{"test_class": {"identifier": "EpubModuleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EPUBMETADATA_KEY = \"EPUBMetadata\";", "modifier": "private static final", "type": "String", "declarator": "EPUBMETADATA_KEY = \"EPUBMetadata\"", "var_name": "EPUBMETADATA_KEY"}, {"original_string": "private static final String CHILDRENSLIT_SRC_FILEPATH = \"src/test/resources/epub/epub3-valid-childrens-literature.epub\";", "modifier": "private static final", "type": "String", "declarator": "CHILDRENSLIT_SRC_FILEPATH = \"src/test/resources/epub/epub3-valid-childrens-literature.epub\"", "var_name": "CHILDRENSLIT_SRC_FILEPATH"}, {"original_string": "private static final String MINIMAL_EPUB_FILEPATH = \"src/test/resources/epub/epub2-minimal.epub\";", "modifier": "private static final", "type": "String", "declarator": "MINIMAL_EPUB_FILEPATH = \"src/test/resources/epub/epub2-minimal.epub\"", "var_name": "MINIMAL_EPUB_FILEPATH"}, {"original_string": "private static final String WRONG_EXT_NOT_AN_EPUB_FILEPATH = \"src/test/resources/epub/not-an-epub.docx\";", "modifier": "private static final", "type": "String", "declarator": "WRONG_EXT_NOT_AN_EPUB_FILEPATH = \"src/test/resources/epub/not-an-epub.docx\"", "var_name": "WRONG_EXT_NOT_AN_EPUB_FILEPATH"}, {"original_string": "private static final String RIGHT_EXT_NOT_AN_EPUB_FILEPATH = \"src/test/resources/epub/not-an-epub.epub\";", "modifier": "private static final", "type": "String", "declarator": "RIGHT_EXT_NOT_AN_EPUB_FILEPATH = \"src/test/resources/epub/not-an-epub.epub\"", "var_name": "RIGHT_EXT_NOT_AN_EPUB_FILEPATH"}, {"original_string": "private static final String ZIPPED_EPUB_FILEPATH = \"src/test/resources/epub/epub3-zipped-childrens-literature.epub\";", "modifier": "private static final", "type": "String", "declarator": "ZIPPED_EPUB_FILEPATH = \"src/test/resources/epub/epub3-zipped-childrens-literature.epub\"", "var_name": "ZIPPED_EPUB_FILEPATH"}, {"original_string": "private static final String EPUB2_WITH_WARNING_FILEPATH = \"src/test/resources/epub/epub2-with-warning-minimal.epub\";", "modifier": "private static final", "type": "String", "declarator": "EPUB2_WITH_WARNING_FILEPATH = \"src/test/resources/epub/epub2-with-warning-minimal.epub\"", "var_name": "EPUB2_WITH_WARNING_FILEPATH"}, {"original_string": "private static final String EPUB3_WITH_MULTIMEDIA_FILEPATH = \"src/test/resources/epub/epub3-valid-multimedia.epub\";", "modifier": "private static final", "type": "String", "declarator": "EPUB3_WITH_MULTIMEDIA_FILEPATH = \"src/test/resources/epub/epub3-valid-multimedia.epub\"", "var_name": "EPUB3_WITH_MULTIMEDIA_FILEPATH"}, {"original_string": "private static final String EMPTY_EPUB_FILEPATH = \"src/test/resources/epub/empty.epub\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY_EPUB_FILEPATH = \"src/test/resources/epub/empty.epub\"", "var_name": "EMPTY_EPUB_FILEPATH"}, {"original_string": "private static final String EPUB_WRONG_EXT_FILEPATH = \"src/test/resources/epub/epub3-wrong-ext-childrens-literature.wrong\";", "modifier": "private static final", "type": "String", "declarator": "EPUB_WRONG_EXT_FILEPATH = \"src/test/resources/epub/epub3-wrong-ext-childrens-literature.wrong\"", "var_name": "EPUB_WRONG_EXT_FILEPATH"}, {"original_string": "private static final String EPUB_MISSING_FONT_FILEPATH = \"src/test/resources/epub/epub2-missing-fontresource.epub\";", "modifier": "private static final", "type": "String", "declarator": "EPUB_MISSING_FONT_FILEPATH = \"src/test/resources/epub/epub2-missing-fontresource.epub\"", "var_name": "EPUB_MISSING_FONT_FILEPATH"}, {"original_string": "private static final String EPUB_OBFUSCATED_FONT_FILEPATH = \"src/test/resources/epub/epub3-font-obfuscated-wasteland.epub\";", "modifier": "private static final", "type": "String", "declarator": "EPUB_OBFUSCATED_FONT_FILEPATH = \"src/test/resources/epub/epub3-font-obfuscated-wasteland.epub\"", "var_name": "EPUB_OBFUSCATED_FONT_FILEPATH"}, {"original_string": "private static final String EPUB2_WITH_ERROR_FILEPATH = \"src/test/resources/epub/epub2-with-error-minimal.epub\";", "modifier": "private static final", "type": "String", "declarator": "EPUB2_WITH_ERROR_FILEPATH = \"src/test/resources/epub/epub2-with-error-minimal.epub\"", "var_name": "EPUB2_WITH_ERROR_FILEPATH"}, {"original_string": "private static final String EPUB2_MISSING_OPF_FILEPATH = \"src/test/resources/epub/epub2-no-opf-minimal.epub\";", "modifier": "private static final", "type": "String", "declarator": "EPUB2_MISSING_OPF_FILEPATH = \"src/test/resources/epub/epub2-no-opf-minimal.epub\"", "var_name": "EPUB2_MISSING_OPF_FILEPATH"}, {"original_string": "private static final String EPUB3_FIXED_LAYOUT_FILEPATH = \"src/test/resources/epub/epub3-valid-fixedlayout-page-blanche.epub\";", "modifier": "private static final", "type": "String", "declarator": "EPUB3_FIXED_LAYOUT_FILEPATH = \"src/test/resources/epub/epub3-valid-fixedlayout-page-blanche.epub\"", "var_name": "EPUB3_FIXED_LAYOUT_FILEPATH"}, {"original_string": "private static final String EPUB2_ENCRYPTION = \"src/test/resources/epub/epub2-valid-minimal-encryption.epub\";", "modifier": "private static final", "type": "String", "declarator": "EPUB2_ENCRYPTION = \"src/test/resources/epub/epub2-valid-minimal-encryption.epub\"", "var_name": "EPUB2_ENCRYPTION"}, {"original_string": "private static final String EPUB3_TITLE_ENCODING = \"src/test/resources/epub/epub3-multiple-renditions.epub\";", "modifier": "private static final", "type": "String", "declarator": "EPUB3_TITLE_ENCODING = \"src/test/resources/epub/epub3-multiple-renditions.epub\"", "var_name": "EPUB3_TITLE_ENCODING"}, {"original_string": "private static final String EXPECTED_MEDIATYPE = \"application/epub+zip\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_MEDIATYPE = \"application/epub+zip\"", "var_name": "EXPECTED_MEDIATYPE"}, {"original_string": "private static final String EXPECTED_VERSION_3_2 = \"3.2\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_VERSION_3_2 = \"3.2\"", "var_name": "EXPECTED_VERSION_3_2"}, {"original_string": "private static final String PNG_MIMETYPE = \"image/png\";", "modifier": "private static final", "type": "String", "declarator": "PNG_MIMETYPE = \"image/png\"", "var_name": "PNG_MIMETYPE"}, {"original_string": "private static final String XHTML_MIMETYPE = \"application/xhtml+xml\";", "modifier": "private static final", "type": "String", "declarator": "XHTML_MIMETYPE = \"application/xhtml+xml\"", "var_name": "XHTML_MIMETYPE"}, {"original_string": "private static final String NCX_MIMETYPE = \"application/x-dtbncx+xml\";", "modifier": "private static final", "type": "String", "declarator": "NCX_MIMETYPE = \"application/x-dtbncx+xml\"", "var_name": "NCX_MIMETYPE"}, {"original_string": "private static final String JPG_MIMETYPE = \"image/jpeg\";", "modifier": "private static final", "type": "String", "declarator": "JPG_MIMETYPE = \"image/jpeg\"", "var_name": "JPG_MIMETYPE"}, {"original_string": "private static final String CSS_MIMETYPE = \"text/css\";", "modifier": "private static final", "type": "String", "declarator": "CSS_MIMETYPE = \"text/css\"", "var_name": "CSS_MIMETYPE"}, {"original_string": "private static final String OCTET_MIMETYPE = \"application/octet-stream\";", "modifier": "private static final", "type": "String", "declarator": "OCTET_MIMETYPE = \"application/octet-stream\"", "var_name": "OCTET_MIMETYPE"}, {"original_string": "private static final String EN_LANGUAGE = \"en\";", "modifier": "private static final", "type": "String", "declarator": "EN_LANGUAGE = \"en\"", "var_name": "EN_LANGUAGE"}], "file": "jhove-ext-modules/src/test/java/org/ithaka/portico/jhove/module/EpubModuleTest.java"}, "test_case": {"identifier": "parseValidEpub2ChecksumTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseValidEpub2ChecksumTest() throws Exception {\n        File epubFile = new File(MINIMAL_EPUB_FILEPATH);\n\n        EpubModule em = new EpubModule();\n        JhoveBase je = new JhoveBase();\n        je.setChecksumFlag(true);\n        em.setBase(je);\n        RepInfo info = new RepInfo(epubFile.getAbsolutePath());\n        em.parse(new FileInputStream(epubFile), info, 0);\n\n        Map<ChecksumType, String> checksums = new HashMap<ChecksumType, String>();\n        info.getChecksum().forEach(cs -> checksums.put(cs.getType(), cs.getValue()));\n        assertEquals(\"8b80b526\", checksums.get(ChecksumType.CRC32));\n        assertEquals(\"b2110219d62c3c6ef1683c645636fd38\", checksums.get(ChecksumType.MD5));\n        assertEquals(\"79f20f6a499a640019a9bb0334652edbb954c3c9\", checksums.get(ChecksumType.SHA1));\n        assertEquals(\"4776bb33b1cce8598b31996ed0b4daf36e4b74e379b811a27e51efa15315744a\", checksums.get(ChecksumType.SHA256));\n        final int expectedNumChecksum = 4;\n        assertEquals(expectedNumChecksum, info.getChecksum().size());\n    }", "signature": "void parseValidEpub2ChecksumTest()", "full_signature": "@Test public void parseValidEpub2ChecksumTest()", "class_method_signature": "EpubModuleTest.parseValidEpub2ChecksumTest()", "testcase": true, "constructor": false, "invocations": ["setChecksumFlag", "setBase", "getAbsolutePath", "parse", "forEach", "getChecksum", "put", "getType", "getValue", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "size", "getChecksum"]}, "focal_class": {"identifier": "EpubModule", "superclass": "extends ModuleBase", "interfaces": "", "fields": [{"original_string": "private static final String EPUB_MEDIATYPE = \"application/epub+zip\";", "modifier": "private static final", "type": "String", "declarator": "EPUB_MEDIATYPE = \"application/epub+zip\"", "var_name": "EPUB_MEDIATYPE"}, {"original_string": "private static final String FORMATNAME = \"EPUB\";", "modifier": "private static final", "type": "String", "declarator": "FORMATNAME = \"EPUB\"", "var_name": "FORMATNAME"}, {"original_string": "private static final String NAME = \"EPUB-ptc\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"EPUB-ptc\"", "var_name": "NAME"}, {"original_string": "private static final String RELEASE = \"1.0\";", "modifier": "private static final", "type": "String", "declarator": "RELEASE = \"1.0\"", "var_name": "RELEASE"}, {"original_string": "private static final int[] DATE = {2019, 5, 15};", "modifier": "private static final", "type": "int[]", "declarator": "DATE = {2019, 5, 15}", "var_name": "DATE"}, {"original_string": "private static final String RIGHTS_YEAR = \"2019\";", "modifier": "private static final", "type": "String", "declarator": "RIGHTS_YEAR = \"2019\"", "var_name": "RIGHTS_YEAR"}, {"original_string": "private static final String[] FORMAT = { FORMATNAME };", "modifier": "private static final", "type": "String[]", "declarator": "FORMAT = { FORMATNAME }", "var_name": "FORMAT"}, {"original_string": "private static final String COVERAGE = FORMATNAME;", "modifier": "private static final", "type": "String", "declarator": "COVERAGE = FORMATNAME", "var_name": "COVERAGE"}, {"original_string": "private static final String[] MIMETYPE = { EPUB_MEDIATYPE };", "modifier": "private static final", "type": "String[]", "declarator": "MIMETYPE = { EPUB_MEDIATYPE }", "var_name": "MIMETYPE"}, {"original_string": "private static final String WELLFORMED = \"\";", "modifier": "private static final", "type": "String", "declarator": "WELLFORMED = \"\"", "var_name": "WELLFORMED"}, {"original_string": "private static final String VALIDITY = \"\";", "modifier": "private static final", "type": "String", "declarator": "VALIDITY = \"\"", "var_name": "VALIDITY"}, {"original_string": "private static final String REPINFO = \"\";", "modifier": "private static final", "type": "String", "declarator": "REPINFO = \"\"", "var_name": "REPINFO"}, {"original_string": "private static final String NOTE = \"This module uses EPUBCheck for testing of EPUB files.\";", "modifier": "private static final", "type": "String", "declarator": "NOTE = \"This module uses EPUBCheck for testing of EPUB files.\"", "var_name": "NOTE"}, {"original_string": "private static final String EPUB_AGENTNAME = \"International Digital Publishing Forum\";", "modifier": "private static final", "type": "String", "declarator": "EPUB_AGENTNAME = \"International Digital Publishing Forum\"", "var_name": "EPUB_AGENTNAME"}, {"original_string": "private static final AgentType EPUB_AGENTTYPE = AgentType.STANDARD;", "modifier": "private static final", "type": "AgentType", "declarator": "EPUB_AGENTTYPE = AgentType.STANDARD", "var_name": "EPUB_AGENTTYPE"}, {"original_string": "private static final String EPUB_AGENTADDRESS = \"International Digital Publishing Forum (IDPF), \"\n            + \"113 Cherry Street, Suite 70-719, Seattle, WA 98104\";", "modifier": "private static final", "type": "String", "declarator": "EPUB_AGENTADDRESS = \"International Digital Publishing Forum (IDPF), \"\n            + \"113 Cherry Street, Suite 70-719, Seattle, WA 98104\"", "var_name": "EPUB_AGENTADDRESS"}, {"original_string": "private static final String EPUB_AGENTWEBSITE = \"http://idpf.org\";", "modifier": "private static final", "type": "String", "declarator": "EPUB_AGENTWEBSITE = \"http://idpf.org\"", "var_name": "EPUB_AGENTWEBSITE"}, {"original_string": "private static final String EPUB_AGENTEMAIL = \"membership@idpf.org\";", "modifier": "private static final", "type": "String", "declarator": "EPUB_AGENTEMAIL = \"membership@idpf.org\"", "var_name": "EPUB_AGENTEMAIL"}, {"original_string": "private static final String EPUB_AGENTPHONE = \"+1-206-451-7250\";", "modifier": "private static final", "type": "String", "declarator": "EPUB_AGENTPHONE = \"+1-206-451-7250\"", "var_name": "EPUB_AGENTPHONE"}, {"original_string": "private static final String EPUB_FORMATDOCTITLE = FORMATNAME;", "modifier": "private static final", "type": "String", "declarator": "EPUB_FORMATDOCTITLE = FORMATNAME", "var_name": "EPUB_FORMATDOCTITLE"}, {"original_string": "private static final String EPUB_FORMATDOCDATE = \"2019-05-15\";", "modifier": "private static final", "type": "String", "declarator": "EPUB_FORMATDOCDATE = \"2019-05-15\"", "var_name": "EPUB_FORMATDOCDATE"}, {"original_string": "private static final String EPUB_FORMATDOCURL = \"http://www.idpf.org/epub/dir/\";", "modifier": "private static final", "type": "String", "declarator": "EPUB_FORMATDOCURL = \"http://www.idpf.org/epub/dir/\"", "var_name": "EPUB_FORMATDOCURL"}, {"original_string": "private static final String EPUB_EXTENSION = \".epub\";", "modifier": "private static final", "type": "String", "declarator": "EPUB_EXTENSION = \".epub\"", "var_name": "EPUB_EXTENSION"}, {"original_string": "private static final int FIRST_SIG_POSITION = 0;", "modifier": "private static final", "type": "int", "declarator": "FIRST_SIG_POSITION = 0", "var_name": "FIRST_SIG_POSITION"}, {"original_string": "private static final String FIRST_SIG_VALUE = \"PK\";", "modifier": "private static final", "type": "String", "declarator": "FIRST_SIG_VALUE = \"PK\"", "var_name": "FIRST_SIG_VALUE"}, {"original_string": "private static final int SECOND_SIG_POSITION = 30;", "modifier": "private static final", "type": "int", "declarator": "SECOND_SIG_POSITION = 30", "var_name": "SECOND_SIG_POSITION"}, {"original_string": "private static final String SECOND_SIG_VALUE = \"mimetype\";", "modifier": "private static final", "type": "String", "declarator": "SECOND_SIG_VALUE = \"mimetype\"", "var_name": "SECOND_SIG_VALUE"}, {"original_string": "private static final int THIRD_SIG_POSITION = 38;", "modifier": "private static final", "type": "int", "declarator": "THIRD_SIG_POSITION = 38", "var_name": "THIRD_SIG_POSITION"}, {"original_string": "private static final String THIRD_SIG_VALUE = EPUB_MEDIATYPE;", "modifier": "private static final", "type": "String", "declarator": "THIRD_SIG_VALUE = EPUB_MEDIATYPE", "var_name": "THIRD_SIG_VALUE"}, {"original_string": "public static final String[] NOTWELLFORMED_ERRCODES = new String[] { \"PKG-\" };", "modifier": "public static final", "type": "String[]", "declarator": "NOTWELLFORMED_ERRCODES = new String[] { \"PKG-\" }", "var_name": "NOTWELLFORMED_ERRCODES"}, {"original_string": "protected List<Property> _propList;", "modifier": "protected", "type": "List<Property>", "declarator": "_propList", "var_name": "_propList"}, {"original_string": "protected Property _metadata;", "modifier": "protected", "type": "Property", "declarator": "_metadata", "var_name": "_metadata"}], "methods": [{"identifier": "EpubModule", "parameters": "()", "modifiers": "public", "return": "", "signature": " EpubModule()", "full_signature": "public  EpubModule()", "class_method_signature": "EpubModule.EpubModule()", "testcase": false, "constructor": true}, {"identifier": "EpubModule", "parameters": "(String name, String release, int[] date,\n            String[] format, String coverage,\n            String[] mimetype, String wellformedNote,\n            String validityNote, String repinfoNote, String note,\n            String rights, boolean isRandomAccess, Agent moduleAgent)", "modifiers": "public", "return": "", "signature": " EpubModule(String name, String release, int[] date,\n            String[] format, String coverage,\n            String[] mimetype, String wellformedNote,\n            String validityNote, String repinfoNote, String note,\n            String rights, boolean isRandomAccess, Agent moduleAgent)", "full_signature": "public  EpubModule(String name, String release, int[] date,\n            String[] format, String coverage,\n            String[] mimetype, String wellformedNote,\n            String validityNote, String repinfoNote, String note,\n            String rights, boolean isRandomAccess, Agent moduleAgent)", "class_method_signature": "EpubModule.EpubModule(String name, String release, int[] date,\n            String[] format, String coverage,\n            String[] mimetype, String wellformedNote,\n            String validityNote, String repinfoNote, String note,\n            String rights, boolean isRandomAccess, Agent moduleAgent)", "testcase": false, "constructor": true}, {"identifier": "initializeInstance", "parameters": "(Agent moduleAgent)", "modifiers": "protected", "return": "void", "signature": "void initializeInstance(Agent moduleAgent)", "full_signature": "protected void initializeInstance(Agent moduleAgent)", "class_method_signature": "EpubModule.initializeInstance(Agent moduleAgent)", "testcase": false, "constructor": false}, {"identifier": "setupDataStream", "parameters": "(final InputStream stream, final RepInfo info)", "modifiers": "@Override protected", "return": "void", "signature": "void setupDataStream(final InputStream stream, final RepInfo info)", "full_signature": "@Override protected void setupDataStream(final InputStream stream, final RepInfo info)", "class_method_signature": "EpubModule.setupDataStream(final InputStream stream, final RepInfo info)", "testcase": false, "constructor": false}, {"identifier": "checkSignatures", "parameters": "(File file, InputStream stream, RepInfo info)", "modifiers": "@Override public", "return": "void", "signature": "void checkSignatures(File file, InputStream stream, RepInfo info)", "full_signature": "@Override public void checkSignatures(File file, InputStream stream, RepInfo info)", "class_method_signature": "EpubModule.checkSignatures(File file, InputStream stream, RepInfo info)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(InputStream stream, RepInfo info, int parseIndex)", "modifiers": "@Override public", "return": "int", "signature": "int parse(InputStream stream, RepInfo info, int parseIndex)", "full_signature": "@Override public int parse(InputStream stream, RepInfo info, int parseIndex)", "class_method_signature": "EpubModule.parse(InputStream stream, RepInfo info, int parseIndex)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(RandomAccessFile file, RepInfo info)", "modifiers": "@Override public", "return": "void", "signature": "void parse(RandomAccessFile file, RepInfo info)", "full_signature": "@Override public void parse(RandomAccessFile file, RepInfo info)", "class_method_signature": "EpubModule.parse(RandomAccessFile file, RepInfo info)", "testcase": false, "constructor": false}, {"identifier": "generateProperties", "parameters": "(JhoveRepInfoReport report)", "modifiers": "private", "return": "List<Property>", "signature": "List<Property> generateProperties(JhoveRepInfoReport report)", "full_signature": "private List<Property> generateProperties(JhoveRepInfoReport report)", "class_method_signature": "EpubModule.generateProperties(JhoveRepInfoReport report)", "testcase": false, "constructor": false}, {"identifier": "addProperty", "parameters": "(Set<Property> props, Property prop)", "modifiers": "private static", "return": "void", "signature": "void addProperty(Set<Property> props, Property prop)", "full_signature": "private static void addProperty(Set<Property> props, Property prop)", "class_method_signature": "EpubModule.addProperty(Set<Property> props, Property prop)", "testcase": false, "constructor": false}, {"identifier": "triggerNotWellFormed", "parameters": "(CheckMessage msg)", "modifiers": "private", "return": "boolean", "signature": "boolean triggerNotWellFormed(CheckMessage msg)", "full_signature": "private boolean triggerNotWellFormed(CheckMessage msg)", "class_method_signature": "EpubModule.triggerNotWellFormed(CheckMessage msg)", "testcase": false, "constructor": false}, {"identifier": "generateFontProps", "parameters": "(Set<String> fonts, boolean fontFile)", "modifiers": "private", "return": "Set<Property>", "signature": "Set<Property> generateFontProps(Set<String> fonts, boolean fontFile)", "full_signature": "private Set<Property> generateFontProps(Set<String> fonts, boolean fontFile)", "class_method_signature": "EpubModule.generateFontProps(Set<String> fonts, boolean fontFile)", "testcase": false, "constructor": false}, {"identifier": "generateProperty", "parameters": "(String name, String value)", "modifiers": "private", "return": "Property", "signature": "Property generateProperty(String name, String value)", "full_signature": "private Property generateProperty(String name, String value)", "class_method_signature": "EpubModule.generateProperty(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "generateProperty", "parameters": "(String name, Long value, boolean hideIfZero)", "modifiers": "private", "return": "Property", "signature": "Property generateProperty(String name, Long value, boolean hideIfZero)", "full_signature": "private Property generateProperty(String name, Long value, boolean hideIfZero)", "class_method_signature": "EpubModule.generateProperty(String name, Long value, boolean hideIfZero)", "testcase": false, "constructor": false}, {"identifier": "generateProperty", "parameters": "(String name, boolean value)", "modifiers": "private", "return": "Property", "signature": "Property generateProperty(String name, boolean value)", "full_signature": "private Property generateProperty(String name, boolean value)", "class_method_signature": "EpubModule.generateProperty(String name, boolean value)", "testcase": false, "constructor": false}, {"identifier": "generateProperty", "parameters": "(String name, String[] value)", "modifiers": "private", "return": "Property", "signature": "Property generateProperty(String name, String[] value)", "full_signature": "private Property generateProperty(String name, String[] value)", "class_method_signature": "EpubModule.generateProperty(String name, String[] value)", "testcase": false, "constructor": false}, {"identifier": "generateProperty", "parameters": "(String name, Set<Property> value)", "modifiers": "private", "return": "Property", "signature": "Property generateProperty(String name, Set<Property> value)", "full_signature": "private Property generateProperty(String name, Set<Property> value)", "class_method_signature": "EpubModule.generateProperty(String name, Set<Property> value)", "testcase": false, "constructor": false}, {"identifier": "toJhoveMessages", "parameters": "(CheckMessage msg)", "modifiers": "private", "return": "Set<Message>", "signature": "Set<Message> toJhoveMessages(CheckMessage msg)", "full_signature": "private Set<Message> toJhoveMessages(CheckMessage msg)", "class_method_signature": "EpubModule.toJhoveMessages(CheckMessage msg)", "testcase": false, "constructor": false}, {"identifier": "addJhoveMessage", "parameters": "(Set<Message> msgs, Message msg)", "modifiers": "private static", "return": "void", "signature": "void addJhoveMessage(Set<Message> msgs, Message msg)", "full_signature": "private static void addJhoveMessage(Set<Message> msgs, Message msg)", "class_method_signature": "EpubModule.addJhoveMessage(Set<Message> msgs, Message msg)", "testcase": false, "constructor": false}, {"identifier": "toJhoveMessage", "parameters": "(String msgId, String messageText, Severity severity, EPUBLocation location)", "modifiers": "private", "return": "Message", "signature": "Message toJhoveMessage(String msgId, String messageText, Severity severity, EPUBLocation location)", "full_signature": "private Message toJhoveMessage(String msgId, String messageText, Severity severity, EPUBLocation location)", "class_method_signature": "EpubModule.toJhoveMessage(String msgId, String messageText, Severity severity, EPUBLocation location)", "testcase": false, "constructor": false}, {"identifier": "toUtf8", "parameters": "(String inputString)", "modifiers": "public static", "return": "String", "signature": "String toUtf8(String inputString)", "full_signature": "public static String toUtf8(String inputString)", "class_method_signature": "EpubModule.toUtf8(String inputString)", "testcase": false, "constructor": false}, {"identifier": "initParse", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void initParse()", "full_signature": "@Override protected void initParse()", "class_method_signature": "EpubModule.initParse()", "testcase": false, "constructor": false}], "file": "jhove-ext-modules/src/main/java/org/ithaka/portico/jhove/module/EpubModule.java"}, "focal_method": {"identifier": "parse", "parameters": "(InputStream stream, RepInfo info, int parseIndex)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int parse(InputStream stream, RepInfo info, int parseIndex) throws IOException {\n\n        initParse();\n\n        info.setModule(this);\n        info.setFormat(_format[0]);\n        info.setWellFormed(false);\n        info.setValid(false);\n\n        _propList = new LinkedList<>();\n        _metadata = new Property(PROPNAME_EPUB_METADATA, PropertyType.PROPERTY, PropertyArity.LIST, _propList);\n\n        // loads stream to _dstream so it can be checksummed when flag enabled\n        _ckSummer = null;\n        setupDataStream(stream, info);\n\n        //Call tool and calculate stats\n        try {\n            JhoveRepInfoReport report = new JhoveRepInfoReport(info.getUri());\n            EpubCheck epubCheck = new EpubCheck(_dstream, report, info.getUri());\n            epubCheck.doValidate();\n\n            info.setCreated(report.getCreationDate());\n            info.setLastModified(report.getLastModifiedDate());\n            info.setVersion(report.getVersion());\n\n            List<CheckMessage> epubMessages = report.getAllMessages();\n\n            // check if any of the messages are on the customized not-well-formed\n            // list of errors\n            int notWellFormedErrors = epubMessages.stream().filter(c -> triggerNotWellFormed(c))\n                    .collect(Collectors.toSet()).size();\n\n            info.setWellFormed(report.getFatalErrorCount() == 0 && notWellFormedErrors == 0);\n            info.setValid(info.getWellFormed() == RepInfo.TRUE && report.getErrorCount() == 0);\n\n            Set<Message> msgs = new TreeSet<Message>(new MessageComparator());\n            for (CheckMessage msg : report.getAllMessages()) {\n                msgs.addAll(toJhoveMessages(msg));\n            }\n            msgs.forEach(jhoveMsg -> info.setMessage(jhoveMsg));\n\n            info.setMimeType(report.getFormat());\n\n            generateProperties(report).forEach(prop -> _propList.add(prop));\n\n        } catch (Exception f) {\n            f.printStackTrace();\n            if (f.getMessage() != null) {\n                info.setMessage(new ErrorMessage(f.getMessage()));\n            } else {\n                info.setMessage(new ErrorMessage(MessageConstants.ERR_UNKNOWN));\n            }\n            info.setWellFormed(false); // may not be the file's fault\n            return 0;\n        }\n\n        // Check if user has aborted\n        if (_je != null && _je.getAbort()) {\n            return 0;\n        }\n\n        // We parsed it.  Now assemble the properties.\n        info.setProperty(_metadata);\n\n        setChecksums(_ckSummer, info);\n\n        return 0;\n    }", "signature": "int parse(InputStream stream, RepInfo info, int parseIndex)", "full_signature": "@Override public int parse(InputStream stream, RepInfo info, int parseIndex)", "class_method_signature": "EpubModule.parse(InputStream stream, RepInfo info, int parseIndex)", "testcase": false, "constructor": false, "invocations": ["initParse", "setModule", "setFormat", "setWellFormed", "setValid", "setupDataStream", "getUri", "getUri", "doValidate", "setCreated", "getCreationDate", "setLastModified", "getLastModifiedDate", "setVersion", "getVersion", "getAllMessages", "size", "collect", "filter", "stream", "triggerNotWellFormed", "toSet", "setWellFormed", "getFatalErrorCount", "setValid", "getWellFormed", "getErrorCount", "getAllMessages", "addAll", "toJhoveMessages", "forEach", "setMessage", "setMimeType", "getFormat", "forEach", "generateProperties", "add", "printStackTrace", "getMessage", "setMessage", "getMessage", "setMessage", "setWellFormed", "getAbort", "setProperty", "setChecksums"]}, "repository": {"repo_id": 17627031, "url": "https://github.com/openpreserve/jhove", "stars": 91, "created": "3/11/2014 10:47:10 AM +00:00", "updates": "2020-01-24T19:19:11+00:00", "fork": "False", "license": "licensed"}}