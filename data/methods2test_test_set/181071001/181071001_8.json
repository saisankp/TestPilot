{"test_class": {"identifier": "TestFlowRefresherTask", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AgentClassRepository agentClassRepository;", "modifier": "private", "type": "AgentClassRepository", "declarator": "agentClassRepository", "var_name": "agentClassRepository"}, {"original_string": "private FlowMapper flowMapper;", "modifier": "private", "type": "FlowMapper", "declarator": "flowMapper", "var_name": "flowMapper"}, {"original_string": "private FlowRetrievalService flowRetrievalService;", "modifier": "private", "type": "FlowRetrievalService", "declarator": "flowRetrievalService", "var_name": "flowRetrievalService"}, {"original_string": "private FlowTransformService<ConfigSchema> flowTransformService;", "modifier": "private", "type": "FlowTransformService<ConfigSchema>", "declarator": "flowTransformService", "var_name": "flowTransformService"}, {"original_string": "private Serializer<ConfigSchema> configSchemaSerializer;", "modifier": "private", "type": "Serializer<ConfigSchema>", "declarator": "configSchemaSerializer", "var_name": "configSchemaSerializer"}, {"original_string": "private FlowRepository flowRepository;", "modifier": "private", "type": "FlowRepository", "declarator": "flowRepository", "var_name": "flowRepository"}, {"original_string": "private FlowMappingRepository flowMappingRepository;", "modifier": "private", "type": "FlowMappingRepository", "declarator": "flowMappingRepository", "var_name": "flowMappingRepository"}, {"original_string": "private TransactionTemplate transactionTemplate;", "modifier": "private", "type": "TransactionTemplate", "declarator": "transactionTemplate", "var_name": "transactionTemplate"}, {"original_string": "private FlowRefresherTask flowRefresherTask;", "modifier": "private", "type": "FlowRefresherTask", "declarator": "flowRefresherTask", "var_name": "flowRefresherTask"}], "file": "efm/efm-c2-protocol/efm-c2-protocol-framework/src/test/java/com/cloudera/cem/efm/service/flow/refresh/TestFlowRefresherTask.java"}, "test_case": {"identifier": "testRefreshWhenNewerVersionExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRefreshWhenNewerVersionExists() throws FlowRetrievalException, FlowMapperException, SerializerException, FlowTransformException, IOException {\n        final String className = \"Test Class\";\n        final AtomicInteger refreshedCounter = new AtomicInteger(0);\n\n        final FlowUri flowUri = new FlowUri(\"http://localhost:18080\", \"1234\", \"5678\");\n        when(flowMapper.getFlowMapping(className)).thenReturn(Optional.of(flowUri));\n\n        final VersionedFlowSnapshot flowSnapshot = FlowTestUtils.createSnapshot(flowUri.getBucketId(), flowUri.getFlowId(), 2);\n        when(flowRetrievalService.getLatestFlow(flowUri)).thenReturn(flowSnapshot);\n\n        final FlowMappingEntity flowMappingEntity = FlowTestUtils.createFlowMappingEntity(className, flowUri, 1, \"YAML\");\n\n        when(flowMappingRepository.findById(className)).thenReturn(Optional.of(flowMappingEntity));\n\n        flowRefresherTask.refreshAgentClass(className, refreshedCounter);\n\n        // should have refreshed from v1 to v2\n        assertEquals(1, refreshedCounter.get());\n    }", "signature": "void testRefreshWhenNewerVersionExists()", "full_signature": "@Test public void testRefreshWhenNewerVersionExists()", "class_method_signature": "TestFlowRefresherTask.testRefreshWhenNewerVersionExists()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getFlowMapping", "of", "createSnapshot", "getBucketId", "getFlowId", "thenReturn", "when", "getLatestFlow", "createFlowMappingEntity", "thenReturn", "when", "findById", "of", "refreshAgentClass", "assertEquals", "get"]}, "focal_class": {"identifier": "FlowRefresherTask", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(FlowRefresherTask.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FlowRefresherTask.class)", "var_name": "LOGGER"}, {"original_string": "private final AgentClassRepository agentClassRepository;", "modifier": "private final", "type": "AgentClassRepository", "declarator": "agentClassRepository", "var_name": "agentClassRepository"}, {"original_string": "private final FlowMapper flowMapper;", "modifier": "private final", "type": "FlowMapper", "declarator": "flowMapper", "var_name": "flowMapper"}, {"original_string": "private final FlowRetrievalService flowRetrievalService;", "modifier": "private final", "type": "FlowRetrievalService", "declarator": "flowRetrievalService", "var_name": "flowRetrievalService"}, {"original_string": "private final FlowTransformService<ConfigSchema> flowTransformService;", "modifier": "private final", "type": "FlowTransformService<ConfigSchema>", "declarator": "flowTransformService", "var_name": "flowTransformService"}, {"original_string": "private final Serializer<ConfigSchema> configSchemaSerializer;", "modifier": "private final", "type": "Serializer<ConfigSchema>", "declarator": "configSchemaSerializer", "var_name": "configSchemaSerializer"}, {"original_string": "private final FlowRepository flowRepository;", "modifier": "private final", "type": "FlowRepository", "declarator": "flowRepository", "var_name": "flowRepository"}, {"original_string": "private final FlowMappingRepository flowMappingRepository;", "modifier": "private final", "type": "FlowMappingRepository", "declarator": "flowMappingRepository", "var_name": "flowMappingRepository"}, {"original_string": "private final TransactionTemplate transactionTemplate;", "modifier": "private final", "type": "TransactionTemplate", "declarator": "transactionTemplate", "var_name": "transactionTemplate"}], "methods": [{"identifier": "FlowRefresherTask", "parameters": "(\n            final AgentClassRepository agentClassRepository,\n            final FlowMapper flowMapper,\n            final FlowRetrievalService flowRetrievalService,\n            final FlowTransformService<ConfigSchema> flowTransformService,\n            final Serializer<ConfigSchema> configSchemaSerializer,\n            final FlowRepository flowRepository,\n            final FlowMappingRepository flowMappingRepository,\n            final TransactionTemplate transactionTemplate)", "modifiers": "@Autowired public", "return": "", "signature": " FlowRefresherTask(\n            final AgentClassRepository agentClassRepository,\n            final FlowMapper flowMapper,\n            final FlowRetrievalService flowRetrievalService,\n            final FlowTransformService<ConfigSchema> flowTransformService,\n            final Serializer<ConfigSchema> configSchemaSerializer,\n            final FlowRepository flowRepository,\n            final FlowMappingRepository flowMappingRepository,\n            final TransactionTemplate transactionTemplate)", "full_signature": "@Autowired public  FlowRefresherTask(\n            final AgentClassRepository agentClassRepository,\n            final FlowMapper flowMapper,\n            final FlowRetrievalService flowRetrievalService,\n            final FlowTransformService<ConfigSchema> flowTransformService,\n            final Serializer<ConfigSchema> configSchemaSerializer,\n            final FlowRepository flowRepository,\n            final FlowMappingRepository flowMappingRepository,\n            final TransactionTemplate transactionTemplate)", "class_method_signature": "FlowRefresherTask.FlowRefresherTask(\n            final AgentClassRepository agentClassRepository,\n            final FlowMapper flowMapper,\n            final FlowRetrievalService flowRetrievalService,\n            final FlowTransformService<ConfigSchema> flowTransformService,\n            final Serializer<ConfigSchema> configSchemaSerializer,\n            final FlowRepository flowRepository,\n            final FlowMappingRepository flowMappingRepository,\n            final TransactionTemplate transactionTemplate)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "FlowRefresherTask.run()", "testcase": false, "constructor": false}, {"identifier": "refreshAgentClass", "parameters": "(final String agentClassName, final AtomicInteger refreshedCount)", "modifiers": "", "return": "void", "signature": "void refreshAgentClass(final String agentClassName, final AtomicInteger refreshedCount)", "full_signature": " void refreshAgentClass(final String agentClassName, final AtomicInteger refreshedCount)", "class_method_signature": "FlowRefresherTask.refreshAgentClass(final String agentClassName, final AtomicInteger refreshedCount)", "testcase": false, "constructor": false}, {"identifier": "updateFlowMapping", "parameters": "(final FlowMappingEntity existingFlowMapping, final FlowUri flowUri, final VersionedFlowSnapshot latestFlow)", "modifiers": "private", "return": "void", "signature": "void updateFlowMapping(final FlowMappingEntity existingFlowMapping, final FlowUri flowUri, final VersionedFlowSnapshot latestFlow)", "full_signature": "private void updateFlowMapping(final FlowMappingEntity existingFlowMapping, final FlowUri flowUri, final VersionedFlowSnapshot latestFlow)", "class_method_signature": "FlowRefresherTask.updateFlowMapping(final FlowMappingEntity existingFlowMapping, final FlowUri flowUri, final VersionedFlowSnapshot latestFlow)", "testcase": false, "constructor": false}, {"identifier": "createNewFlowMapping", "parameters": "(final String agentClassName, final FlowUri flowUri, final VersionedFlowSnapshot latestFlow)", "modifiers": "private", "return": "void", "signature": "void createNewFlowMapping(final String agentClassName, final FlowUri flowUri, final VersionedFlowSnapshot latestFlow)", "full_signature": "private void createNewFlowMapping(final String agentClassName, final FlowUri flowUri, final VersionedFlowSnapshot latestFlow)", "class_method_signature": "FlowRefresherTask.createNewFlowMapping(final String agentClassName, final FlowUri flowUri, final VersionedFlowSnapshot latestFlow)", "testcase": false, "constructor": false}, {"identifier": "createNewFlow", "parameters": "(final FlowUri flowUri, final VersionedFlowSnapshot latestFlow)", "modifiers": "private", "return": "FlowEntity", "signature": "FlowEntity createNewFlow(final FlowUri flowUri, final VersionedFlowSnapshot latestFlow)", "full_signature": "private FlowEntity createNewFlow(final FlowUri flowUri, final VersionedFlowSnapshot latestFlow)", "class_method_signature": "FlowRefresherTask.createNewFlow(final FlowUri flowUri, final VersionedFlowSnapshot latestFlow)", "testcase": false, "constructor": false}], "file": "efm/efm-c2-protocol/efm-c2-protocol-framework/src/main/java/com/cloudera/cem/efm/service/flow/refresh/FlowRefresherTask.java"}, "focal_method": {"identifier": "refreshAgentClass", "parameters": "(final String agentClassName, final AtomicInteger refreshedCount)", "modifiers": "", "return": "void", "body": "void refreshAgentClass(final String agentClassName, final AtomicInteger refreshedCount)\n            throws FlowMapperException, IOException, FlowRetrievalException, SerializerException, FlowTransformException {\n\n        // Determine the uri from NiFi Registry that maps to this class\n        final Optional<FlowUri> optionalFlowUri = flowMapper.getFlowMapping(agentClassName);\n        if (!optionalFlowUri.isPresent()) {\n            LOGGER.debug(\"No flow mapping present for '{}'\", new Object[] {agentClassName});\n            return;\n        }\n\n        final FlowUri flowUri = optionalFlowUri.get();\n        LOGGER.debug(\"Found flow {} mapped to '{}'\", new Object[]{flowUri.getFlowId(), agentClassName});\n\n        // Get the latest version available for the uri we got above\n        final VersionedFlowSnapshot latestFlow = flowRetrievalService.getLatestFlow(flowUri);\n        if (latestFlow == null) {\n            LOGGER.debug(\"No flow versions exist for '{}'\", new Object[] {agentClassName});\n            return;\n        }\n\n        // Query the database to see if we anything currently mapped for the given agent class\n        final Optional<FlowMappingEntity> optionalFlowMapping = flowMappingRepository.findById(agentClassName);\n        if (optionalFlowMapping.isPresent()) {\n            final FlowMappingEntity existingFlowMapping = optionalFlowMapping.get();\n\n            final String existingRegistryUrl = existingFlowMapping.getFlowEntity().getRegistryUrl();\n            final String existingBucketId = existingFlowMapping.getFlowEntity().getRegistryBucketId();\n            final String existingFlowId = existingFlowMapping.getFlowEntity().getRegistryFlowId();\n\n            if (flowUri.getRegistryUrl().equals(existingRegistryUrl)\n                    && flowUri.getBucketId().equals(existingBucketId)\n                    && flowUri.getFlowId().equals(existingFlowId)) {\n\n                final FlowEntity existingFlow = existingFlowMapping.getFlowEntity();\n                if (latestFlow.getSnapshotMetadata().getVersion() > existingFlow.getRegistryFlowVersion()) {\n                    updateFlowMapping(existingFlowMapping, flowUri, latestFlow);\n                    refreshedCount.incrementAndGet();\n                } else {\n                    LOGGER.debug(\"'{}' already mapped to latest version, nothing to do...\", new Object[]{agentClassName});\n                }\n\n            } else {\n                // Existing mapping doesn't match the flow uri we have so we have to update the flow mapping to point\n                // to a new flow, this could happen if the C2 server is restarted to point at a different NiFi registry\n                updateFlowMapping(existingFlowMapping, flowUri, latestFlow);\n                refreshedCount.incrementAndGet();\n            }\n\n        } else {\n            // No mapping present yet so we need to create a new one\n            createNewFlowMapping(agentClassName, flowUri, latestFlow);\n            refreshedCount.incrementAndGet();\n        }\n    }", "signature": "void refreshAgentClass(final String agentClassName, final AtomicInteger refreshedCount)", "full_signature": " void refreshAgentClass(final String agentClassName, final AtomicInteger refreshedCount)", "class_method_signature": "FlowRefresherTask.refreshAgentClass(final String agentClassName, final AtomicInteger refreshedCount)", "testcase": false, "constructor": false, "invocations": ["getFlowMapping", "isPresent", "debug", "get", "debug", "getFlowId", "getLatestFlow", "debug", "findById", "isPresent", "get", "getRegistryUrl", "getFlowEntity", "getRegistryBucketId", "getFlowEntity", "getRegistryFlowId", "getFlowEntity", "equals", "getRegistryUrl", "equals", "getBucketId", "equals", "getFlowId", "getFlowEntity", "getVersion", "getSnapshotMetadata", "getRegistryFlowVersion", "updateFlowMapping", "incrementAndGet", "debug", "updateFlowMapping", "incrementAndGet", "createNewFlowMapping", "incrementAndGet"]}, "repository": {"repo_id": 181071001, "url": "https://github.com/hortonworks/efm", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 2003, "license": "licensed"}}