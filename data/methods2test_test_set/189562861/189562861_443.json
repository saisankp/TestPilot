{"test_class": {"identifier": "SpringExtensionFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SpringExtensionFactory springExtensionFactory = new SpringExtensionFactory();", "modifier": "private", "type": "SpringExtensionFactory", "declarator": "springExtensionFactory = new SpringExtensionFactory()", "var_name": "springExtensionFactory"}, {"original_string": "private AnnotationConfigApplicationContext context1;", "modifier": "private", "type": "AnnotationConfigApplicationContext", "declarator": "context1", "var_name": "context1"}, {"original_string": "private AnnotationConfigApplicationContext context2;", "modifier": "private", "type": "AnnotationConfigApplicationContext", "declarator": "context2", "var_name": "context2"}], "file": "dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/extension/SpringExtensionFactoryTest.java"}, "test_case": {"identifier": "testGetExtensionByType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetExtensionByType() {\n        HelloService bean = springExtensionFactory.getExtension(HelloService.class, \"beanname-not-exist\");\n        Assert.assertNotNull(bean);\n    }", "signature": "void testGetExtensionByType()", "full_signature": "@Test public void testGetExtensionByType()", "class_method_signature": "SpringExtensionFactoryTest.testGetExtensionByType()", "testcase": true, "constructor": false, "invocations": ["getExtension", "assertNotNull"]}, "focal_class": {"identifier": "SpringExtensionFactory", "superclass": "", "interfaces": "implements ExtensionFactory", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SpringExtensionFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SpringExtensionFactory.class)", "var_name": "logger"}, {"original_string": "private static final Set<ApplicationContext> contexts = new ConcurrentHashSet<ApplicationContext>();", "modifier": "private static final", "type": "Set<ApplicationContext>", "declarator": "contexts = new ConcurrentHashSet<ApplicationContext>()", "var_name": "contexts"}, {"original_string": "private static final ApplicationListener shutdownHookListener = new ShutdownHookListener();", "modifier": "private static final", "type": "ApplicationListener", "declarator": "shutdownHookListener = new ShutdownHookListener()", "var_name": "shutdownHookListener"}], "methods": [{"identifier": "addApplicationContext", "parameters": "(ApplicationContext context)", "modifiers": "public static", "return": "void", "signature": "void addApplicationContext(ApplicationContext context)", "full_signature": "public static void addApplicationContext(ApplicationContext context)", "class_method_signature": "SpringExtensionFactory.addApplicationContext(ApplicationContext context)", "testcase": false, "constructor": false}, {"identifier": "removeApplicationContext", "parameters": "(ApplicationContext context)", "modifiers": "public static", "return": "void", "signature": "void removeApplicationContext(ApplicationContext context)", "full_signature": "public static void removeApplicationContext(ApplicationContext context)", "class_method_signature": "SpringExtensionFactory.removeApplicationContext(ApplicationContext context)", "testcase": false, "constructor": false}, {"identifier": "getContexts", "parameters": "()", "modifiers": "public static", "return": "Set<ApplicationContext>", "signature": "Set<ApplicationContext> getContexts()", "full_signature": "public static Set<ApplicationContext> getContexts()", "class_method_signature": "SpringExtensionFactory.getContexts()", "testcase": false, "constructor": false}, {"identifier": "clearContexts", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clearContexts()", "full_signature": "public static void clearContexts()", "class_method_signature": "SpringExtensionFactory.clearContexts()", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(Class<T> type, String name)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T getExtension(Class<T> type, String name)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public T getExtension(Class<T> type, String name)", "class_method_signature": "SpringExtensionFactory.getExtension(Class<T> type, String name)", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/extension/SpringExtensionFactory.java"}, "focal_method": {"identifier": "getExtension", "parameters": "(Class<T> type, String name)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "T", "body": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T getExtension(Class<T> type, String name) {\n        for (ApplicationContext context : contexts) {\n            if (context.containsBean(name)) {\n                Object bean = context.getBean(name);\n                if (type.isInstance(bean)) {\n                    return (T) bean;\n                }\n            }\n        }\n\n        logger.warn(\"No spring extension (bean) named:\" + name + \", try to find an extension (bean) of type \" + type.getName());\n\n        if (Object.class == type) {\n            return null;\n        }\n\n        for (ApplicationContext context : contexts) {\n            try {\n                return context.getBean(type);\n            } catch (NoUniqueBeanDefinitionException multiBeanExe) {\n                logger.warn(\"Find more than 1 spring extensions (beans) of type \" + type.getName() + \", will stop auto injection. Please make sure you have specified the concrete parameter type and there's only one extension of that type.\");\n            } catch (NoSuchBeanDefinitionException noBeanExe) {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Error when get spring extension(bean) for type:\" + type.getName(), noBeanExe);\n                }\n            }\n        }\n\n        logger.warn(\"No spring extension (bean) named:\" + name + \", type:\" + type.getName() + \" found, stop get bean.\");\n\n        return null;\n    }", "signature": "T getExtension(Class<T> type, String name)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public T getExtension(Class<T> type, String name)", "class_method_signature": "SpringExtensionFactory.getExtension(Class<T> type, String name)", "testcase": false, "constructor": false, "invocations": ["containsBean", "getBean", "isInstance", "warn", "getName", "getBean", "warn", "getName", "isDebugEnabled", "debug", "getName", "warn", "getName"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}