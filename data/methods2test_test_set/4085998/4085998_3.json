{"test_class": {"identifier": "ExtSourceTCSTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Spy\n\tprivate static ExtSourceTCS extSourceTCS;", "modifier": "@Spy\n\tprivate static", "type": "ExtSourceTCS", "declarator": "extSourceTCS", "var_name": "extSourceTCS"}], "file": "perun-core/src/test/java/cz/metacentrum/perun/core/impl/ExtSourceTCSTest.java"}, "test_case": {"identifier": "getUsersSubjects", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getUsersSubjects() {\n\t\t// mock certificates\n\t\tX509CertificateHolder certificateHolder = mock(X509CertificateHolder.class, RETURNS_DEEP_STUBS);\n\t\twhen(certificateHolder.getSubject().toString()).thenReturn(\"certificate\");\n\t\tMap<String, Pair<X509CertificateHolder, String>> validCertificatesForLogin = new HashMap<>();\n\t\tvalidCertificatesForLogin.put(\"123456\", new Pair<>(certificateHolder, \"value\"));\n\t\tdoReturn(validCertificatesForLogin).when(extSourceTCS).prepareStructureOfValidCertificates(\"url\");\n\n\t\t// define needed attributes\n\t\tMap<String, String> mapOfAttributes = new HashMap<>();\n\t\tmapOfAttributes.put(\"usersQuery\", \"url\");\n\t\tmapOfAttributes.put(\"googleMapping\", \"userID={userID},\\ndomainName={domainName},\\ngroupName={groupName}\");\n\t\tdoReturn(mapOfAttributes).when(extSourceTCS).getAttributes();\n\n\t\t// create expected subject to get\n\t\tList<Map<String, String>> expectedSubjects = new ArrayList<>();\n\t\tMap<String, String> subject = new HashMap<>();\n\t\tsubject.put(\"login\", \"123456\");\n\t\tsubject.put(\"additionalues_1\", \"https://idp2.ics.muni.cz/idp/shibboleth|cz.metacentrum.perun.core.impl.ExtSourceIdp|123456@muni.cz|2\");\n\t\tsubject.put(\"urn:perun:user:attribute-def:def:userCertificates\", \"certificate:value,\");\n\t\texpectedSubjects.add(subject);\n\n\t\t// test the method\n\t\tList<Map<String, String>> actualSubjects = extSourceTCS.getUsersSubjects();\n\t\tassertEquals(\"subjects should be same\", expectedSubjects, actualSubjects);\n\t}", "signature": "void getUsersSubjects()", "full_signature": "@Test public void getUsersSubjects()", "class_method_signature": "ExtSourceTCSTest.getUsersSubjects()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "toString", "getSubject", "put", "prepareStructureOfValidCertificates", "when", "doReturn", "put", "put", "getAttributes", "when", "doReturn", "put", "put", "put", "add", "getUsersSubjects", "assertEquals"]}, "focal_class": {"identifier": "ExtSourceTCS", "superclass": "extends ExtSource", "interfaces": "implements ExtSourceApi", "fields": [{"original_string": "private static PerunBlImpl perunBl;", "modifier": "private static", "type": "PerunBlImpl", "declarator": "perunBl", "var_name": "perunBl"}, {"original_string": "private static final String attrLoginMUName = \"urn:perun:user:attribute-def:def:login-namespace:mu\";", "modifier": "private static final", "type": "String", "declarator": "attrLoginMUName = \"urn:perun:user:attribute-def:def:login-namespace:mu\"", "var_name": "attrLoginMUName"}, {"original_string": "private static final String attrUserCertificates = \"urn:perun:user:attribute-def:def:userCertificates\";", "modifier": "private static final", "type": "String", "declarator": "attrUserCertificates = \"urn:perun:user:attribute-def:def:userCertificates\"", "var_name": "attrUserCertificates"}, {"original_string": "private final static Pattern loginPattern = Pattern.compile(\"^.*\\\\s([0-9]+)$\");", "modifier": "private final static", "type": "Pattern", "declarator": "loginPattern = Pattern.compile(\"^.*\\\\s([0-9]+)$\")", "var_name": "loginPattern"}, {"original_string": "private final static Pattern wrongLoginPattern = Pattern.compile(\"^.*\\\\s[0-9]+\\\\s[0-9]+$\");", "modifier": "private final static", "type": "Pattern", "declarator": "wrongLoginPattern = Pattern.compile(\"^.*\\\\s[0-9]+\\\\s[0-9]+$\")", "var_name": "wrongLoginPattern"}], "methods": [{"identifier": "setPerunBlImpl", "parameters": "(PerunBlImpl perun)", "modifiers": "public static", "return": "PerunBlImpl", "signature": "PerunBlImpl setPerunBlImpl(PerunBlImpl perun)", "full_signature": "public static PerunBlImpl setPerunBlImpl(PerunBlImpl perun)", "class_method_signature": "ExtSourceTCS.setPerunBlImpl(PerunBlImpl perun)", "testcase": false, "constructor": false}, {"identifier": "findSubjectsLogins", "parameters": "(String searchString)", "modifiers": "@Override public", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> findSubjectsLogins(String searchString)", "full_signature": "@Override public List<Map<String,String>> findSubjectsLogins(String searchString)", "class_method_signature": "ExtSourceTCS.findSubjectsLogins(String searchString)", "testcase": false, "constructor": false}, {"identifier": "findSubjects", "parameters": "(String searchString)", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> findSubjects(String searchString)", "full_signature": "@Override public List<Map<String, String>> findSubjects(String searchString)", "class_method_signature": "ExtSourceTCS.findSubjects(String searchString)", "testcase": false, "constructor": false}, {"identifier": "findSubjects", "parameters": "(String searchString, int maxResults)", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> findSubjects(String searchString, int maxResults)", "full_signature": "@Override public List<Map<String, String>> findSubjects(String searchString, int maxResults)", "class_method_signature": "ExtSourceTCS.findSubjects(String searchString, int maxResults)", "testcase": false, "constructor": false}, {"identifier": "findSubjectsLogins", "parameters": "(String searchString, int maxResults)", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> findSubjectsLogins(String searchString, int maxResults)", "full_signature": "@Override public List<Map<String, String>> findSubjectsLogins(String searchString, int maxResults)", "class_method_signature": "ExtSourceTCS.findSubjectsLogins(String searchString, int maxResults)", "testcase": false, "constructor": false}, {"identifier": "getSubjectGroups", "parameters": "(Map<String, String> attributes)", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getSubjectGroups(Map<String, String> attributes)", "full_signature": "@Override public List<Map<String, String>> getSubjectGroups(Map<String, String> attributes)", "class_method_signature": "ExtSourceTCS.getSubjectGroups(Map<String, String> attributes)", "testcase": false, "constructor": false}, {"identifier": "getUsersSubjects", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getUsersSubjects()", "full_signature": "@Override public List<Map<String, String>> getUsersSubjects()", "class_method_signature": "ExtSourceTCS.getUsersSubjects()", "testcase": false, "constructor": false}, {"identifier": "getSubjectByLogin", "parameters": "(String login)", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getSubjectByLogin(String login)", "full_signature": "@Override public Map<String, String> getSubjectByLogin(String login)", "class_method_signature": "ExtSourceTCS.getSubjectByLogin(String login)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ExtSourceTCS.close()", "testcase": false, "constructor": false}, {"identifier": "getGroupSubjects", "parameters": "(Map<String, String> attributes)", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getGroupSubjects(Map<String, String> attributes)", "full_signature": "@Override public List<Map<String, String>> getGroupSubjects(Map<String, String> attributes)", "class_method_signature": "ExtSourceTCS.getGroupSubjects(Map<String, String> attributes)", "testcase": false, "constructor": false}, {"identifier": "getUsersOrGroupSubjects", "parameters": "(String url)", "modifiers": "private", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getUsersOrGroupSubjects(String url)", "full_signature": "private List<Map<String, String>> getUsersOrGroupSubjects(String url)", "class_method_signature": "ExtSourceTCS.getUsersOrGroupSubjects(String url)", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "()", "modifiers": "private", "return": "PerunSession", "signature": "PerunSession getSession()", "full_signature": "private PerunSession getSession()", "class_method_signature": "ExtSourceTCS.getSession()", "testcase": false, "constructor": false}, {"identifier": "getLoginsFromPerun", "parameters": "(String loginAttrName)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getLoginsFromPerun(String loginAttrName)", "full_signature": "private List<String> getLoginsFromPerun(String loginAttrName)", "class_method_signature": "ExtSourceTCS.getLoginsFromPerun(String loginAttrName)", "testcase": false, "constructor": false}, {"identifier": "prepareStructureOfValidCertificates", "parameters": "(String url)", "modifiers": "protected", "return": "Map<String, Pair<X509CertificateHolder, String>>", "signature": "Map<String, Pair<X509CertificateHolder, String>> prepareStructureOfValidCertificates(String url)", "full_signature": "protected Map<String, Pair<X509CertificateHolder, String>> prepareStructureOfValidCertificates(String url)", "class_method_signature": "ExtSourceTCS.prepareStructureOfValidCertificates(String url)", "testcase": false, "constructor": false}, {"identifier": "checkCertAndGetLogin", "parameters": "(X509CertificateHolder x509CertificateHolder, List<String> allLoginsFromPerun)", "modifiers": "private", "return": "String", "signature": "String checkCertAndGetLogin(X509CertificateHolder x509CertificateHolder, List<String> allLoginsFromPerun)", "full_signature": "private String checkCertAndGetLogin(X509CertificateHolder x509CertificateHolder, List<String> allLoginsFromPerun)", "class_method_signature": "ExtSourceTCS.checkCertAndGetLogin(X509CertificateHolder x509CertificateHolder, List<String> allLoginsFromPerun)", "testcase": false, "constructor": false}, {"identifier": "exportBase64Certificate", "parameters": "(PemObject pemObject)", "modifiers": "private", "return": "String", "signature": "String exportBase64Certificate(PemObject pemObject)", "full_signature": "private String exportBase64Certificate(PemObject pemObject)", "class_method_signature": "ExtSourceTCS.exportBase64Certificate(PemObject pemObject)", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "()", "modifiers": "protected", "return": "Map<String,String>", "signature": "Map<String,String> getAttributes()", "full_signature": "protected Map<String,String> getAttributes()", "class_method_signature": "ExtSourceTCS.getAttributes()", "testcase": false, "constructor": false}], "file": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/ExtSourceTCS.java"}, "focal_method": {"identifier": "getUsersSubjects", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<String, String>>", "body": "@Override\n\tpublic List<Map<String, String>> getUsersSubjects() {\n\t\tString url = getAttributes().get(UsersManager.USERS_QUERY);\n\n\t\treturn getUsersOrGroupSubjects(url);\n\t}", "signature": "List<Map<String, String>> getUsersSubjects()", "full_signature": "@Override public List<Map<String, String>> getUsersSubjects()", "class_method_signature": "ExtSourceTCS.getUsersSubjects()", "testcase": false, "constructor": false, "invocations": ["get", "getAttributes", "getUsersOrGroupSubjects"]}, "repository": {"repo_id": 4085998, "url": "https://github.com/CESNET/perun", "stars": 38, "created": "4/20/2012 11:55:38 AM +00:00", "updates": "2020-01-27T09:51:13+00:00", "fork": "False", "license": "licensed"}}