{"test_class": {"identifier": "IndentTrackerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "IndentTracker it;", "modifier": "", "type": "IndentTracker", "declarator": "it", "var_name": "it"}], "file": "core/prettyprinting/npp/src/test/java/org/overture/core/npp/IndentTrackerTest.java"}, "test_case": {"identifier": "testIndent_1Level_MultiLine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIndent_1Level_MultiLine() {\n\t\tString expected = \"\\tmulti\\n\\tline\\n\\tstring\";\n\t\tString input = \"multi\\nline\\nstring\";\n\t\tString actual = it.indent(input);\n\t\tassertEquals(expected, actual);\n\t}", "signature": "void testIndent_1Level_MultiLine()", "full_signature": "@Test public void testIndent_1Level_MultiLine()", "class_method_signature": "IndentTrackerTest.testIndent_1Level_MultiLine()", "testcase": true, "constructor": false, "invocations": ["indent", "assertEquals"]}, "focal_class": {"identifier": "IndentTracker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int count;", "modifier": "private", "type": "int", "declarator": "count", "var_name": "count"}, {"original_string": "private String indent = \"\\t\";", "modifier": "private", "type": "String", "declarator": "indent = \"\\t\"", "var_name": "indent"}], "methods": [{"identifier": "IndentTracker", "parameters": "()", "modifiers": "public", "return": "", "signature": " IndentTracker()", "full_signature": "public  IndentTracker()", "class_method_signature": "IndentTracker.IndentTracker()", "testcase": false, "constructor": true}, {"identifier": "decrIndent", "parameters": "()", "modifiers": "", "return": "void", "signature": "void decrIndent()", "full_signature": " void decrIndent()", "class_method_signature": "IndentTracker.decrIndent()", "testcase": false, "constructor": false}, {"identifier": "getIndentation", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getIndentation()", "full_signature": " String getIndentation()", "class_method_signature": "IndentTracker.getIndentation()", "testcase": false, "constructor": false}, {"identifier": "incrIndent", "parameters": "()", "modifiers": "", "return": "void", "signature": "void incrIndent()", "full_signature": " void incrIndent()", "class_method_signature": "IndentTracker.incrIndent()", "testcase": false, "constructor": false}, {"identifier": "indent", "parameters": "(String s)", "modifiers": "", "return": "String", "signature": "String indent(String s)", "full_signature": " String indent(String s)", "class_method_signature": "IndentTracker.indent(String s)", "testcase": false, "constructor": false}, {"identifier": "resetIndent", "parameters": "()", "modifiers": "", "return": "void", "signature": "void resetIndent()", "full_signature": " void resetIndent()", "class_method_signature": "IndentTracker.resetIndent()", "testcase": false, "constructor": false}], "file": "core/prettyprinting/npp/src/main/java/org/overture/core/npp/IndentTracker.java"}, "focal_method": {"identifier": "indent", "parameters": "(String s)", "modifiers": "", "return": "String", "body": "String indent(String s)\n\t{\n\t\tif (count > 0)\n\t\t{ // don't bother indenting if the level is zero\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tsb.append(\"\\n\");\n\t\t\tsb.append(getIndentation());\n\t\t\tStringBuilder r = new StringBuilder();\n\t\t\tr.append(getIndentation());\n\t\t\tr.append(s.replaceAll(\"\\n\", sb.toString()));\n\t\t\treturn r.toString();\n\t\t} else\n\t\t{\n\t\t\treturn s;\n\t\t}\n\t}", "signature": "String indent(String s)", "full_signature": " String indent(String s)", "class_method_signature": "IndentTracker.indent(String s)", "testcase": false, "constructor": false, "invocations": ["append", "append", "getIndentation", "append", "getIndentation", "append", "replaceAll", "toString", "toString"]}, "repository": {"repo_id": 14611005, "url": "https://github.com/overturetool/overture", "language": "Java", "is_fork": false, "fork_count": 24, "stargazer_count": 42, "size": 214314, "license": "licensed"}}