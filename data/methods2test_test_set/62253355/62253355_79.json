{"test_class": {"identifier": "XmlStackingSemanticTranslatorTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private static final String ONT_URI = \"urn://test.ontology\";", "modifier": "private static final", "type": "String", "declarator": "ONT_URI = \"urn://test.ontology\"", "var_name": "ONT_URI"}, {"original_string": "private final File simpleTestFile = new File(\"src/test/resources/test.xml\");", "modifier": "private final", "type": "File", "declarator": "simpleTestFile = new File(\"src/test/resources/test.xml\")", "var_name": "simpleTestFile"}, {"original_string": "private XmlStackingSemanticTranslator xmlStackingSemanticTranslator;", "modifier": "private", "type": "XmlStackingSemanticTranslator", "declarator": "xmlStackingSemanticTranslator", "var_name": "xmlStackingSemanticTranslator"}], "file": "document-translation/com.mobi.document.translator.xml/src/test/java/com/mobi/document/translator/impl/xml/XmlStackingSemanticTranslatorTest.java"}, "test_case": {"identifier": "testNonXml", "parameters": "()", "modifiers": "@Test(expected = SemanticTranslationException.class) public", "return": "void", "body": "@Test(expected = SemanticTranslationException.class)\n    public void testNonXml() throws Exception {\n        final ExtractedOntology ont = getRequiredOrmFactory(ExtractedOntology.class)\n                .createNew(VALUE_FACTORY.createIRI(ONT_URI));\n        try (InputStream is = new FileInputStream(new File(\"src/test/resources/ormFactories.conf\"))) {\n            xmlStackingSemanticTranslator.translate(is, \"ormFactories.conf\", ont);\n            fail(\"Translating non-xml should throw a semantic translation exception\");\n        }\n    }", "signature": "void testNonXml()", "full_signature": "@Test(expected = SemanticTranslationException.class) public void testNonXml()", "class_method_signature": "XmlStackingSemanticTranslatorTest.testNonXml()", "testcase": true, "constructor": false, "invocations": ["createNew", "getRequiredOrmFactory", "createIRI", "translate", "fail"]}, "focal_class": {"identifier": "XmlStackingSemanticTranslator", "superclass": "extends AbstractStackingSemanticTranslator<XmlStackItem>", "interfaces": "implements StackingSemanticTranslator<XmlStackItem>, SemanticTranslator", "fields": [{"original_string": "private static final String ATTRIBUTE_PROPERTY_NAME_TEMPLATE = \"_%s-attr-%s\";", "modifier": "private static final", "type": "String", "declarator": "ATTRIBUTE_PROPERTY_NAME_TEMPLATE = \"_%s-attr-%s\"", "var_name": "ATTRIBUTE_PROPERTY_NAME_TEMPLATE"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(XmlStackingSemanticTranslator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(XmlStackingSemanticTranslator.class)", "var_name": "LOG"}, {"original_string": "private static final XMLInputFactory XML_INPUT_FACTORY = XMLInputFactory.newFactory();", "modifier": "private static final", "type": "XMLInputFactory", "declarator": "XML_INPUT_FACTORY = XMLInputFactory.newFactory()", "var_name": "XML_INPUT_FACTORY"}, {"original_string": "private List<String> rootComments = new ArrayList<>();", "modifier": "private", "type": "List<String>", "declarator": "rootComments = new ArrayList<>()", "var_name": "rootComments"}], "methods": [{"identifier": "XmlStackingSemanticTranslator", "parameters": "()", "modifiers": "public", "return": "", "signature": " XmlStackingSemanticTranslator()", "full_signature": "public  XmlStackingSemanticTranslator()", "class_method_signature": "XmlStackingSemanticTranslator.XmlStackingSemanticTranslator()", "testcase": false, "constructor": true}, {"identifier": "setValueFactory", "parameters": "(ValueFactory valueFactory)", "modifiers": "@Reference public", "return": "void", "signature": "void setValueFactory(ValueFactory valueFactory)", "full_signature": "@Reference public void setValueFactory(ValueFactory valueFactory)", "class_method_signature": "XmlStackingSemanticTranslator.setValueFactory(ValueFactory valueFactory)", "testcase": false, "constructor": false}, {"identifier": "setModelFactory", "parameters": "(ModelFactory modelFactory)", "modifiers": "@Reference public", "return": "void", "signature": "void setModelFactory(ModelFactory modelFactory)", "full_signature": "@Reference public void setModelFactory(ModelFactory modelFactory)", "class_method_signature": "XmlStackingSemanticTranslator.setModelFactory(ModelFactory modelFactory)", "testcase": false, "constructor": false}, {"identifier": "setExpressionProcessor", "parameters": "(IriExpressionProcessor expressionProcessor)", "modifiers": "@Reference public", "return": "void", "signature": "void setExpressionProcessor(IriExpressionProcessor expressionProcessor)", "full_signature": "@Reference public void setExpressionProcessor(IriExpressionProcessor expressionProcessor)", "class_method_signature": "XmlStackingSemanticTranslator.setExpressionProcessor(IriExpressionProcessor expressionProcessor)", "testcase": false, "constructor": false}, {"identifier": "setOrmFactoryRegistry", "parameters": "(OrmFactoryRegistry ormFactoryRegistry)", "modifiers": "@Reference public", "return": "void", "signature": "void setOrmFactoryRegistry(OrmFactoryRegistry ormFactoryRegistry)", "full_signature": "@Reference public void setOrmFactoryRegistry(OrmFactoryRegistry ormFactoryRegistry)", "class_method_signature": "XmlStackingSemanticTranslator.setOrmFactoryRegistry(OrmFactoryRegistry ormFactoryRegistry)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)", "modifiers": "@Override public", "return": "Model", "signature": "Model translate(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)", "full_signature": "@Override public Model translate(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)", "class_method_signature": "XmlStackingSemanticTranslator.translate(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)", "testcase": false, "constructor": false}, {"identifier": "handleElementEnd", "parameters": "(XmlStackItem endingItem, String val, ExtractedOntology managedOntology,\n                                  String address, Model resultsModel)", "modifiers": "private", "return": "void", "signature": "void handleElementEnd(XmlStackItem endingItem, String val, ExtractedOntology managedOntology,\n                                  String address, Model resultsModel)", "full_signature": "private void handleElementEnd(XmlStackItem endingItem, String val, ExtractedOntology managedOntology,\n                                  String address, Model resultsModel)", "class_method_signature": "XmlStackingSemanticTranslator.handleElementEnd(XmlStackItem endingItem, String val, ExtractedOntology managedOntology,\n                                  String address, Model resultsModel)", "testcase": false, "constructor": false}, {"identifier": "rootElementEnding", "parameters": "(XmlStackItem endingItem)", "modifiers": "private", "return": "void", "signature": "void rootElementEnding(XmlStackItem endingItem)", "full_signature": "private void rootElementEnding(XmlStackItem endingItem)", "class_method_signature": "XmlStackingSemanticTranslator.rootElementEnding(XmlStackItem endingItem)", "testcase": false, "constructor": false}, {"identifier": "handleComment", "parameters": "(String commentText)", "modifiers": "private", "return": "void", "signature": "void handleComment(String commentText)", "full_signature": "private void handleComment(String commentText)", "class_method_signature": "XmlStackingSemanticTranslator.handleComment(String commentText)", "testcase": false, "constructor": false}, {"identifier": "startElement", "parameters": "(XMLStreamReader reader, ExtractedOntology managedOntology)", "modifiers": "private", "return": "void", "signature": "void startElement(XMLStreamReader reader, ExtractedOntology managedOntology)", "full_signature": "private void startElement(XMLStreamReader reader, ExtractedOntology managedOntology)", "class_method_signature": "XmlStackingSemanticTranslator.startElement(XMLStreamReader reader, ExtractedOntology managedOntology)", "testcase": false, "constructor": false}, {"identifier": "silentlyCloseReader", "parameters": "(final XMLStreamReader reader)", "modifiers": "private", "return": "void", "signature": "void silentlyCloseReader(final XMLStreamReader reader)", "full_signature": "private void silentlyCloseReader(final XMLStreamReader reader)", "class_method_signature": "XmlStackingSemanticTranslator.silentlyCloseReader(final XMLStreamReader reader)", "testcase": false, "constructor": false}, {"identifier": "initXmlStreamReader", "parameters": "(final InputStream is)", "modifiers": "private", "return": "XMLStreamReader", "signature": "XMLStreamReader initXmlStreamReader(final InputStream is)", "full_signature": "private XMLStreamReader initXmlStreamReader(final InputStream is)", "class_method_signature": "XmlStackingSemanticTranslator.initXmlStreamReader(final InputStream is)", "testcase": false, "constructor": false}, {"identifier": "addComment", "parameters": "(XmlStackItem item, String comment)", "modifiers": "private", "return": "void", "signature": "void addComment(XmlStackItem item, String comment)", "full_signature": "private void addComment(XmlStackItem item, String comment)", "class_method_signature": "XmlStackingSemanticTranslator.addComment(XmlStackItem item, String comment)", "testcase": false, "constructor": false}], "file": "document-translation/com.mobi.document.translator.xml/src/main/java/com/mobi/document/translator/impl/xml/XmlStackingSemanticTranslator.java"}, "focal_method": {"identifier": "translate", "parameters": "(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)", "modifiers": "@Override public", "return": "Model", "body": "@Override\n    public Model translate(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)\n            throws SemanticTranslationException {\n        final Model resultsModel = modelFactory.createModel();\n        final XMLStreamReader reader = initXmlStreamReader(dataStream);\n        try {\n            final StringBuilder stringBuffer = new StringBuilder();\n            for (int event = reader.next(); event != XMLStreamConstants.END_DOCUMENT; event = reader.next()) {\n                final String address = getCurrentLocation();\n                switch (event) {\n                    case XMLStreamConstants.START_ELEMENT:\n                        // Process the start of an element.\n                        startElement(reader, managedOntology);\n                        break;\n                    case XMLStreamConstants.COMMENT:\n                        // Handle a comment on the document.\n                        handleComment(reader.getText());\n                        break;\n                    case XMLStreamConstants.END_ELEMENT:\n                        // Pull the item corresponding to this element end off the stack.\n                        final XmlStackItem endingItem = popStack()\n                                // End of element requires a corresponding stack item.\n                                .orElseThrow(() -> new SemanticTranslationException(\"Element ending without a \" +\n                                        \"corresponding stack item.\"));\n                        // Get the content for this ending element.\n                        final String val = stringBuffer.toString();\n                        stringBuffer.setLength(0);\n                        LOG.trace(\"Ending '{}' - Value: '{}'\", reader.getLocalName(), val);\n                        // Handle the end of a root element.\n                        rootElementEnding(endingItem);\n                        // Handle the ending element.\n                        handleElementEnd(endingItem, val, managedOntology, address, resultsModel);\n                        break;\n                    case XMLStreamConstants.CHARACTERS:\n                        stringBuffer.append(reader.getText().trim());\n                        break;\n                    default:\n                        break;\n                }\n            }\n        } catch (XMLStreamException e) {\n            throw new SemanticTranslationException(\"Issue reading XML from incoming data stream\", e);\n        } finally {\n            silentlyCloseReader(reader);\n        }\n        return resultsModel;\n    }", "signature": "Model translate(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)", "full_signature": "@Override public Model translate(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)", "class_method_signature": "XmlStackingSemanticTranslator.translate(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)", "testcase": false, "constructor": false, "invocations": ["createModel", "initXmlStreamReader", "next", "next", "getCurrentLocation", "startElement", "handleComment", "getText", "orElseThrow", "popStack", "toString", "setLength", "trace", "getLocalName", "rootElementEnding", "handleElementEnd", "append", "trim", "getText", "silentlyCloseReader"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}