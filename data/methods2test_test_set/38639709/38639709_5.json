{"test_class": {"identifier": "RepositoryBuildServiceTest", "superclass": "extends DatabaseBackedTest", "interfaces": "", "fields": [{"original_string": "@Inject\n  private RepositoryBuildService repositoryBuildService;", "modifier": "@Inject\n  private", "type": "RepositoryBuildService", "declarator": "repositoryBuildService", "var_name": "repositoryBuildService"}, {"original_string": "@Inject\n  private BranchService branchService;", "modifier": "@Inject\n  private", "type": "BranchService", "declarator": "branchService", "var_name": "branchService"}, {"original_string": "private GitInfo branchOne;", "modifier": "private", "type": "GitInfo", "declarator": "branchOne", "var_name": "branchOne"}, {"original_string": "private GitInfo branchTwo;", "modifier": "private", "type": "GitInfo", "declarator": "branchTwo", "var_name": "branchTwo"}, {"original_string": "private long buildIdOne;", "modifier": "private", "type": "long", "declarator": "buildIdOne", "var_name": "buildIdOne"}, {"original_string": "private long buildIdTwo;", "modifier": "private", "type": "long", "declarator": "buildIdTwo", "var_name": "buildIdTwo"}, {"original_string": "private BuildTrigger buildTriggerOne;", "modifier": "private", "type": "BuildTrigger", "declarator": "buildTriggerOne", "var_name": "buildTriggerOne"}, {"original_string": "private BuildTrigger buildTriggerTwo;", "modifier": "private", "type": "BuildTrigger", "declarator": "buildTriggerTwo", "var_name": "buildTriggerTwo"}, {"original_string": "private BuildOptions buildOptionsOne;", "modifier": "private", "type": "BuildOptions", "declarator": "buildOptionsOne", "var_name": "buildOptionsOne"}, {"original_string": "private BuildOptions buildOptionsTwo;", "modifier": "private", "type": "BuildOptions", "declarator": "buildOptionsTwo", "var_name": "buildOptionsTwo"}, {"original_string": "private CommitInfo commitInfoOne;", "modifier": "private", "type": "CommitInfo", "declarator": "commitInfoOne", "var_name": "commitInfoOne"}, {"original_string": "private CommitInfo commitInfoTwo;", "modifier": "private", "type": "CommitInfo", "declarator": "commitInfoTwo", "var_name": "commitInfoTwo"}, {"original_string": "private DependencyGraph dependencyGraphOne;", "modifier": "private", "type": "DependencyGraph", "declarator": "dependencyGraphOne", "var_name": "dependencyGraphOne"}, {"original_string": "private DependencyGraph dependencyGraphTwo;", "modifier": "private", "type": "DependencyGraph", "declarator": "dependencyGraphTwo", "var_name": "dependencyGraphTwo"}], "file": "BlazarData/src/test/java/com/hubspot/blazar/data/service/RepositoryBuildServiceTest.java"}, "test_case": {"identifier": "itReturnsPendingBuildForSecondPushEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void itReturnsPendingBuildForSecondPushEvent() {\n    long newBuildId = repositoryBuildService.enqueue(branchOne, buildTriggerTwo, buildOptionsTwo);\n    assertThat(newBuildId).isEqualTo(buildIdOne);\n  }", "signature": "void itReturnsPendingBuildForSecondPushEvent()", "full_signature": "@Test public void itReturnsPendingBuildForSecondPushEvent()", "class_method_signature": "RepositoryBuildServiceTest.itReturnsPendingBuildForSecondPushEvent()", "testcase": true, "constructor": false, "invocations": ["enqueue", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "RepositoryBuildService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RepositoryBuildService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RepositoryBuildService.class)", "var_name": "LOG"}, {"original_string": "private final RepositoryBuildDao repositoryBuildDao;", "modifier": "private final", "type": "RepositoryBuildDao", "declarator": "repositoryBuildDao", "var_name": "repositoryBuildDao"}, {"original_string": "private final BranchDao branchDao;", "modifier": "private final", "type": "BranchDao", "declarator": "branchDao", "var_name": "branchDao"}, {"original_string": "private final EventBus eventBus;", "modifier": "private final", "type": "EventBus", "declarator": "eventBus", "var_name": "eventBus"}], "methods": [{"identifier": "RepositoryBuildService", "parameters": "(RepositoryBuildDao repositoryBuildDao, BranchDao branchDao, EventBus eventBus)", "modifiers": "@Inject public", "return": "", "signature": " RepositoryBuildService(RepositoryBuildDao repositoryBuildDao, BranchDao branchDao, EventBus eventBus)", "full_signature": "@Inject public  RepositoryBuildService(RepositoryBuildDao repositoryBuildDao, BranchDao branchDao, EventBus eventBus)", "class_method_signature": "RepositoryBuildService.RepositoryBuildService(RepositoryBuildDao repositoryBuildDao, BranchDao branchDao, EventBus eventBus)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(long id)", "modifiers": "public", "return": "Optional<RepositoryBuild>", "signature": "Optional<RepositoryBuild> get(long id)", "full_signature": "public Optional<RepositoryBuild> get(long id)", "class_method_signature": "RepositoryBuildService.get(long id)", "testcase": false, "constructor": false}, {"identifier": "getByBranch", "parameters": "(int branchId)", "modifiers": "public", "return": "List<RepositoryBuild>", "signature": "List<RepositoryBuild> getByBranch(int branchId)", "full_signature": "public List<RepositoryBuild> getByBranch(int branchId)", "class_method_signature": "RepositoryBuildService.getByBranch(int branchId)", "testcase": false, "constructor": false}, {"identifier": "getByBranchAndNumber", "parameters": "(int branchId, int buildNumber)", "modifiers": "public", "return": "Optional<RepositoryBuild>", "signature": "Optional<RepositoryBuild> getByBranchAndNumber(int branchId, int buildNumber)", "full_signature": "public Optional<RepositoryBuild> getByBranchAndNumber(int branchId, int buildNumber)", "class_method_signature": "RepositoryBuildService.getByBranchAndNumber(int branchId, int buildNumber)", "testcase": false, "constructor": false}, {"identifier": "getBuildNumbers", "parameters": "(int branchId)", "modifiers": "public", "return": "BuildNumbers", "signature": "BuildNumbers getBuildNumbers(int branchId)", "full_signature": "public BuildNumbers getBuildNumbers(int branchId)", "class_method_signature": "RepositoryBuildService.getBuildNumbers(int branchId)", "testcase": false, "constructor": false}, {"identifier": "getPreviousBuild", "parameters": "(RepositoryBuild build)", "modifiers": "public", "return": "Optional<RepositoryBuild>", "signature": "Optional<RepositoryBuild> getPreviousBuild(RepositoryBuild build)", "full_signature": "public Optional<RepositoryBuild> getPreviousBuild(RepositoryBuild build)", "class_method_signature": "RepositoryBuildService.getPreviousBuild(RepositoryBuild build)", "testcase": false, "constructor": false}, {"identifier": "enqueue", "parameters": "(GitInfo gitInfo, BuildTrigger trigger, BuildOptions buildOptions)", "modifiers": "public", "return": "long", "signature": "long enqueue(GitInfo gitInfo, BuildTrigger trigger, BuildOptions buildOptions)", "full_signature": "public long enqueue(GitInfo gitInfo, BuildTrigger trigger, BuildOptions buildOptions)", "class_method_signature": "RepositoryBuildService.enqueue(GitInfo gitInfo, BuildTrigger trigger, BuildOptions buildOptions)", "testcase": false, "constructor": false}, {"identifier": "enqueue", "parameters": "(RepositoryBuild build, int expectedUpdateCount)", "modifiers": "@Transactional protected", "return": "RepositoryBuild", "signature": "RepositoryBuild enqueue(RepositoryBuild build, int expectedUpdateCount)", "full_signature": "@Transactional protected RepositoryBuild enqueue(RepositoryBuild build, int expectedUpdateCount)", "class_method_signature": "RepositoryBuildService.enqueue(RepositoryBuild build, int expectedUpdateCount)", "testcase": false, "constructor": false}, {"identifier": "begin", "parameters": "(RepositoryBuild build)", "modifiers": "@Transactional public", "return": "void", "signature": "void begin(RepositoryBuild build)", "full_signature": "@Transactional public void begin(RepositoryBuild build)", "class_method_signature": "RepositoryBuildService.begin(RepositoryBuild build)", "testcase": false, "constructor": false}, {"identifier": "beginNoPublish", "parameters": "(RepositoryBuild build)", "modifiers": "@Transactional", "return": "void", "signature": "void beginNoPublish(RepositoryBuild build)", "full_signature": "@Transactional void beginNoPublish(RepositoryBuild build)", "class_method_signature": "RepositoryBuildService.beginNoPublish(RepositoryBuild build)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(RepositoryBuild build)", "modifiers": "@Transactional public", "return": "void", "signature": "void update(RepositoryBuild build)", "full_signature": "@Transactional public void update(RepositoryBuild build)", "class_method_signature": "RepositoryBuildService.update(RepositoryBuild build)", "testcase": false, "constructor": false}, {"identifier": "fail", "parameters": "(RepositoryBuild build)", "modifiers": "@Transactional public", "return": "void", "signature": "void fail(RepositoryBuild build)", "full_signature": "@Transactional public void fail(RepositoryBuild build)", "class_method_signature": "RepositoryBuildService.fail(RepositoryBuild build)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "(RepositoryBuild build)", "modifiers": "public", "return": "void", "signature": "void cancel(RepositoryBuild build)", "full_signature": "public void cancel(RepositoryBuild build)", "class_method_signature": "RepositoryBuildService.cancel(RepositoryBuild build)", "testcase": false, "constructor": false}, {"identifier": "deleteQueuedBuild", "parameters": "(RepositoryBuild build)", "modifiers": "@Transactional", "return": "void", "signature": "void deleteQueuedBuild(RepositoryBuild build)", "full_signature": "@Transactional void deleteQueuedBuild(RepositoryBuild build)", "class_method_signature": "RepositoryBuildService.deleteQueuedBuild(RepositoryBuild build)", "testcase": false, "constructor": false}, {"identifier": "isThePendingBuild", "parameters": "(RepositoryBuild build)", "modifiers": "private", "return": "boolean", "signature": "boolean isThePendingBuild(RepositoryBuild build)", "full_signature": "private boolean isThePendingBuild(RepositoryBuild build)", "class_method_signature": "RepositoryBuildService.isThePendingBuild(RepositoryBuild build)", "testcase": false, "constructor": false}, {"identifier": "nextQueuedBuild", "parameters": "(int branchId)", "modifiers": "private", "return": "Optional<RepositoryBuild>", "signature": "Optional<RepositoryBuild> nextQueuedBuild(int branchId)", "full_signature": "private Optional<RepositoryBuild> nextQueuedBuild(int branchId)", "class_method_signature": "RepositoryBuildService.nextQueuedBuild(int branchId)", "testcase": false, "constructor": false}, {"identifier": "determineNextBuildNumber", "parameters": "(int branchId, List<RepositoryBuild> queuedBuilds)", "modifiers": "private", "return": "int", "signature": "int determineNextBuildNumber(int branchId, List<RepositoryBuild> queuedBuilds)", "full_signature": "private int determineNextBuildNumber(int branchId, List<RepositoryBuild> queuedBuilds)", "class_method_signature": "RepositoryBuildService.determineNextBuildNumber(int branchId, List<RepositoryBuild> queuedBuilds)", "testcase": false, "constructor": false}, {"identifier": "checkAffectedRowCount", "parameters": "(int affectedRows)", "modifiers": "private static", "return": "void", "signature": "void checkAffectedRowCount(int affectedRows)", "full_signature": "private static void checkAffectedRowCount(int affectedRows)", "class_method_signature": "RepositoryBuildService.checkAffectedRowCount(int affectedRows)", "testcase": false, "constructor": false}, {"identifier": "checkAffectedRowCount", "parameters": "(int affectedRows, int expectedAffectedRows)", "modifiers": "private static", "return": "void", "signature": "void checkAffectedRowCount(int affectedRows, int expectedAffectedRows)", "full_signature": "private static void checkAffectedRowCount(int affectedRows, int expectedAffectedRows)", "class_method_signature": "RepositoryBuildService.checkAffectedRowCount(int affectedRows, int expectedAffectedRows)", "testcase": false, "constructor": false}], "file": "BlazarData/src/main/java/com/hubspot/blazar/data/service/RepositoryBuildService.java"}, "focal_method": {"identifier": "enqueue", "parameters": "(GitInfo gitInfo, BuildTrigger trigger, BuildOptions buildOptions)", "modifiers": "public", "return": "long", "body": "public long enqueue(GitInfo gitInfo, BuildTrigger trigger, BuildOptions buildOptions) {\n    int branchId = gitInfo.getId().get();\n\n    // determine build number first (unique index will prevent concurrent modification)\n    List<RepositoryBuild> queuedBuilds = repositoryBuildDao.getByBranchAndState(branchId, State.QUEUED);\n    int nextBuildNumber = determineNextBuildNumber(branchId, queuedBuilds);\n\n    // If this repository build was queued due to a push and there is already a queued repository build that was triggered by a push this build will be ignored\n    if (trigger.getType() == BuildTrigger.Type.PUSH) {\n      for (RepositoryBuild build : queuedBuilds) {\n        if (build.getBuildTrigger().getType() == BuildTrigger.Type.PUSH) {\n          long existingBuildId = build.getId().get();\n          LOG.info(\"A push was received for branch {} but will not enqueue a repository build because there is already pending repository build {} that was triggered by a previous push to this branch\",\n              branchId, existingBuildId);\n          return existingBuildId;\n        }\n      }\n    }\n\n    RepositoryBuild build = RepositoryBuild.queuedBuild(gitInfo, trigger, nextBuildNumber, buildOptions);\n    LOG.info(\"Enqueuing repository build for branch {} and build number {}\", branchId, nextBuildNumber);\n    // if there is no other repository build for the same branch and build number, we expect the update to succeed otherwise it shouldn't\n    int expectedUpdateCount = queuedBuilds.isEmpty() ? 1 : 0;\n    build = enqueue(build, expectedUpdateCount);\n    LOG.info(\"Enqueued repository build with id {} for branch {}\", build.getId().get(), branchId);\n    return build.getId().get();\n  }", "signature": "long enqueue(GitInfo gitInfo, BuildTrigger trigger, BuildOptions buildOptions)", "full_signature": "public long enqueue(GitInfo gitInfo, BuildTrigger trigger, BuildOptions buildOptions)", "class_method_signature": "RepositoryBuildService.enqueue(GitInfo gitInfo, BuildTrigger trigger, BuildOptions buildOptions)", "testcase": false, "constructor": false, "invocations": ["get", "getId", "getByBranchAndState", "determineNextBuildNumber", "getType", "getType", "getBuildTrigger", "get", "getId", "info", "queuedBuild", "info", "isEmpty", "enqueue", "info", "get", "getId", "get", "getId"]}, "repository": {"repo_id": 38639709, "url": "https://github.com/HubSpot/Blazar-Archive", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 66, "size": 4209, "license": "licensed"}}