{"test_class": {"identifier": "CoordinatesUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WKTReader wKTReader = new WKTReader();", "modifier": "private", "type": "WKTReader", "declarator": "wKTReader = new WKTReader()", "var_name": "wKTReader"}], "file": "bundles/map-editor/src/test/java/org/orbisgis/mapeditor/map/geometryUtils/CoordinatesUtilsTest.java"}, "test_case": {"identifier": "testFindFurthestPoint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n        public void testFindFurthestPoint() throws Exception {\n                Geometry geom = wKTReader.read(\"LINESTRING(0 1, 20 8, 20 0)\");\n                Coordinate expectedCoord = new Coordinate(20, 8);\n                Coordinate[] coords = CoordinatesUtils.getFurthestCoordinate(new Coordinate(0, 0), geom.getCoordinates());\n                double expectedDistance = new Coordinate(0, 0).distance(expectedCoord);\n                assertEquals(expectedDistance, coords[0].distance(coords[1]), 10E-9);\n        }", "signature": "void testFindFurthestPoint()", "full_signature": "@Test public void testFindFurthestPoint()", "class_method_signature": "CoordinatesUtilsTest.testFindFurthestPoint()", "testcase": true, "constructor": false, "invocations": ["read", "getFurthestCoordinate", "getCoordinates", "distance", "assertEquals", "distance"]}, "focal_class": {"identifier": "CoordinatesUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "interpolate", "parameters": "(Coordinate firstCoordinate, Coordinate lastCoordinate, Coordinate toBeInterpolated)", "modifiers": "public static", "return": "double", "signature": "double interpolate(Coordinate firstCoordinate, Coordinate lastCoordinate, Coordinate toBeInterpolated)", "full_signature": "public static double interpolate(Coordinate firstCoordinate, Coordinate lastCoordinate, Coordinate toBeInterpolated)", "class_method_signature": "CoordinatesUtils.interpolate(Coordinate firstCoordinate, Coordinate lastCoordinate, Coordinate toBeInterpolated)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Coordinate[] coords, Coordinate coord)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(Coordinate[] coords, Coordinate coord)", "full_signature": "public static boolean contains(Coordinate[] coords, Coordinate coord)", "class_method_signature": "CoordinatesUtils.contains(Coordinate[] coords, Coordinate coord)", "testcase": false, "constructor": false}, {"identifier": "contains2D", "parameters": "(Coordinate[] coords, Coordinate coord)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains2D(Coordinate[] coords, Coordinate coord)", "full_signature": "public static boolean contains2D(Coordinate[] coords, Coordinate coord)", "class_method_signature": "CoordinatesUtils.contains2D(Coordinate[] coords, Coordinate coord)", "testcase": false, "constructor": false}, {"identifier": "contains3D", "parameters": "(Coordinate[] coords, Coordinate coord)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains3D(Coordinate[] coords, Coordinate coord)", "full_signature": "public static boolean contains3D(Coordinate[] coords, Coordinate coord)", "class_method_signature": "CoordinatesUtils.contains3D(Coordinate[] coords, Coordinate coord)", "testcase": false, "constructor": false}, {"identifier": "zMinMax", "parameters": "(final Coordinate[] cs)", "modifiers": "public static", "return": "double[]", "signature": "double[] zMinMax(final Coordinate[] cs)", "full_signature": "public static double[] zMinMax(final Coordinate[] cs)", "class_method_signature": "CoordinatesUtils.zMinMax(final Coordinate[] cs)", "testcase": false, "constructor": false}, {"identifier": "getFurthestCoordinate", "parameters": "(Coordinate base, Coordinate[] coords)", "modifiers": "public static", "return": "Coordinate[]", "signature": "Coordinate[] getFurthestCoordinate(Coordinate base, Coordinate[] coords)", "full_signature": "public static Coordinate[] getFurthestCoordinate(Coordinate base, Coordinate[] coords)", "class_method_signature": "CoordinatesUtils.getFurthestCoordinate(Coordinate base, Coordinate[] coords)", "testcase": false, "constructor": false}, {"identifier": "length3D", "parameters": "(CoordinateSequence pts)", "modifiers": "public static", "return": "double", "signature": "double length3D(CoordinateSequence pts)", "full_signature": "public static double length3D(CoordinateSequence pts)", "class_method_signature": "CoordinatesUtils.length3D(CoordinateSequence pts)", "testcase": false, "constructor": false}, {"identifier": "length3D", "parameters": "(Geometry geom)", "modifiers": "public static", "return": "double", "signature": "double length3D(Geometry geom)", "full_signature": "public static double length3D(Geometry geom)", "class_method_signature": "CoordinatesUtils.length3D(Geometry geom)", "testcase": false, "constructor": false}, {"identifier": "length3D", "parameters": "(LineString lineString)", "modifiers": "public static", "return": "double", "signature": "double length3D(LineString lineString)", "full_signature": "public static double length3D(LineString lineString)", "class_method_signature": "CoordinatesUtils.length3D(LineString lineString)", "testcase": false, "constructor": false}, {"identifier": "length3D", "parameters": "(Polygon polygon)", "modifiers": "public static", "return": "double", "signature": "double length3D(Polygon polygon)", "full_signature": "public static double length3D(Polygon polygon)", "class_method_signature": "CoordinatesUtils.length3D(Polygon polygon)", "testcase": false, "constructor": false}, {"identifier": "CoordinatesUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " CoordinatesUtils()", "full_signature": "private  CoordinatesUtils()", "class_method_signature": "CoordinatesUtils.CoordinatesUtils()", "testcase": false, "constructor": true}], "file": "bundles/map-editor/src/main/java/org/orbisgis/mapeditor/map/geometryUtils/CoordinatesUtils.java"}, "focal_method": {"identifier": "getFurthestCoordinate", "parameters": "(Coordinate base, Coordinate[] coords)", "modifiers": "public static", "return": "Coordinate[]", "body": "public static Coordinate[] getFurthestCoordinate(Coordinate base, Coordinate[] coords) {\n                double distanceMax = Double.MIN_VALUE;\n                Coordinate farCoordinate = null;\n                for (Coordinate coord : coords) {\n                        double distance = coord.distance(base);\n                        if (distance > distanceMax) {\n                                distanceMax = distance;\n                                farCoordinate = coord;\n                        }\n                }\n\n                if (farCoordinate != null) {\n                        return new Coordinate[]{base, farCoordinate};\n                } else {\n                        return null;\n                }\n        }", "signature": "Coordinate[] getFurthestCoordinate(Coordinate base, Coordinate[] coords)", "full_signature": "public static Coordinate[] getFurthestCoordinate(Coordinate base, Coordinate[] coords)", "class_method_signature": "CoordinatesUtils.getFurthestCoordinate(Coordinate base, Coordinate[] coords)", "testcase": false, "constructor": false, "invocations": ["distance"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}