{"test_class": {"identifier": "TableDataConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TableDataConverter converter;", "modifier": "private", "type": "TableDataConverter", "declarator": "converter", "var_name": "converter"}, {"original_string": "private HierarchicalStreamReader readerMock;", "modifier": "private", "type": "HierarchicalStreamReader", "declarator": "readerMock", "var_name": "readerMock"}, {"original_string": "private String text;", "modifier": "private", "type": "String", "declarator": "text", "var_name": "text"}], "file": "geoclient-core/src/test/java/gov/nyc/doitt/gis/geoclient/config/xml/TableDataConverterTest.java"}, "test_case": {"identifier": "testUnmarshal_textWithFootnote", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnmarshal_textWithFootnote() {\n        setUpReaderMock(null, text, \"*\", \"8\", DocumentationXmlReader.XML_TD_ELEMENT);\n        TableData td = (TableData) this.converter.unmarshal(readerMock, null);\n        assertEquals(1, td.getColspan());\n        assertEquals(text, td.getText());\n        assertEquals(\"*\", td.getFootnote().getSymbol());\n        assertEquals(8, td.getFootnote().getPosition());\n        assertFalse(td.isHeader());\n    }", "signature": "void testUnmarshal_textWithFootnote()", "full_signature": "@Test public void testUnmarshal_textWithFootnote()", "class_method_signature": "TableDataConverterTest.testUnmarshal_textWithFootnote()", "testcase": true, "constructor": false, "invocations": ["setUpReaderMock", "unmarshal", "assertEquals", "getColspan", "assertEquals", "getText", "assertEquals", "getSymbol", "getFootnote", "assertEquals", "getPosition", "getFootnote", "assertFalse", "isHeader"]}, "focal_class": {"identifier": "TableDataConverter", "superclass": "", "interfaces": "implements Converter", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(TableDataConverter.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TableDataConverter.class)", "var_name": "log"}], "methods": [{"identifier": "canConvert", "parameters": "(@SuppressWarnings(\"rawtypes\") Class type)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canConvert(@SuppressWarnings(\"rawtypes\") Class type)", "full_signature": "@Override public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class type)", "class_method_signature": "TableDataConverter.canConvert(@SuppressWarnings(\"rawtypes\") Class type)", "testcase": false, "constructor": false}, {"identifier": "marshal", "parameters": "(Object source, HierarchicalStreamWriter writer, MarshallingContext context)", "modifiers": "@Override public", "return": "void", "signature": "void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context)", "full_signature": "@Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context)", "class_method_signature": "TableDataConverter.marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context)", "testcase": false, "constructor": false}, {"identifier": "unmarshal", "parameters": "(HierarchicalStreamReader reader, UnmarshallingContext context)", "modifiers": "@Override public", "return": "Object", "signature": "Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "full_signature": "@Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "class_method_signature": "TableDataConverter.unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "testcase": false, "constructor": false}], "file": "geoclient-core/src/main/java/gov/nyc/doitt/gis/geoclient/config/xml/TableDataConverter.java"}, "focal_method": {"identifier": "unmarshal", "parameters": "(HierarchicalStreamReader reader, UnmarshallingContext context)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)\n    {\n        String colspanText = reader.getAttribute(DocumentationXmlReader.XML_TD_ATTRIBUTE_COLSPAN);\n        int colspan = colspanText != null ? Integer.valueOf(colspanText) : 1;\n        // Text\n        //StringBuffer value = new StringBuffer(reader.getValue());\n        Footnote footnote = null;\n        if(reader.hasMoreChildren())\n        {\n            reader.moveDown();\n            String positionString = reader.getAttribute(DocumentationXmlReader.XML_FOOTNOTE_ATTRIBUTE_POSITION);\n            footnote = new Footnote(reader.getValue(),Integer.valueOf(positionString));\n            reader.moveUp();\n        }\n        StringBuffer value = new StringBuffer(reader.getValue());\n        boolean isHeader = DocumentationXmlReader.XML_TH_ELEMENT.equalsIgnoreCase(reader.getNodeName());\n        TableData td = new TableData(value.toString(), colspan,isHeader,footnote);\n        log.trace(\"Created TableData {}\", td);\n        return td;\n    }", "signature": "Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "full_signature": "@Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "class_method_signature": "TableDataConverter.unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "testcase": false, "constructor": false, "invocations": ["getAttribute", "valueOf", "hasMoreChildren", "moveDown", "getAttribute", "getValue", "valueOf", "moveUp", "getValue", "equalsIgnoreCase", "getNodeName", "toString", "trace"]}, "repository": {"repo_id": 49475567, "url": "https://github.com/CityOfNewYork/geoclient", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 42, "size": 9801, "license": "licensed"}}