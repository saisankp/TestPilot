{"test_class": {"identifier": "AbstractRunnerHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "AbstractRunnerHelper abstractRunnerHelper = new AbstractRunnerHelper() {\n        @Override\n        protected ScenarioResultMetadata extractResultMetadata(Map<String, Object> requestContext, ScenarioWithIndex scenarioWithIndex) {\n            return null;\n        }\n\n        @Override\n        protected Map<String, Object> executeScenario(KieContainer kieContainer, ScenarioRunnerData scenarioRunnerData, ExpressionEvaluatorFactory expressionEvaluatorFactory, ScesimModelDescriptor scesimModelDescriptor, Settings settings) {\n            return null;\n        }\n\n        @Override\n        protected void verifyConditions(ScesimModelDescriptor scesimModelDescriptor, ScenarioRunnerData scenarioRunnerData, ExpressionEvaluatorFactory expressionEvaluatorFactory, Map<String, Object> requestContext) {\n\n        }\n\n        @Override\n        protected Object createObject(ValueWrapper<Object> initialInstance, String className, Map<List<String>, Object> params, ClassLoader classLoader) {\n            return null;\n        }\n    };", "modifier": "", "type": "AbstractRunnerHelper", "declarator": "abstractRunnerHelper = new AbstractRunnerHelper() {\n        @Override\n        protected ScenarioResultMetadata extractResultMetadata(Map<String, Object> requestContext, ScenarioWithIndex scenarioWithIndex) {\n            return null;\n        }\n\n        @Override\n        protected Map<String, Object> executeScenario(KieContainer kieContainer, ScenarioRunnerData scenarioRunnerData, ExpressionEvaluatorFactory expressionEvaluatorFactory, ScesimModelDescriptor scesimModelDescriptor, Settings settings) {\n            return null;\n        }\n\n        @Override\n        protected void verifyConditions(ScesimModelDescriptor scesimModelDescriptor, ScenarioRunnerData scenarioRunnerData, ExpressionEvaluatorFactory expressionEvaluatorFactory, Map<String, Object> requestContext) {\n\n        }\n\n        @Override\n        protected Object createObject(ValueWrapper<Object> initialInstance, String className, Map<List<String>, Object> params, ClassLoader classLoader) {\n            return null;\n        }\n    }", "var_name": "abstractRunnerHelper"}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/runner/AbstractRunnerHelperTest.java"}, "test_case": {"identifier": "getResultWrapper", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getResultWrapper() {\n        ExpressionEvaluator expressionEvaluatorMock = mock(ExpressionEvaluator.class);\n        Object resultRaw = \"test\";\n        Object expectedResultRaw = \"\";\n        String collectionError = \"Impossible to find elements in the collection to satisfy the conditions\";\n        String genericErrorMessage = \"errorMessage\";\n\n        // case 1: succeed\n        when(expressionEvaluatorMock.evaluateUnaryExpression(any(), any(), any(Class.class))).thenReturn(true);\n        ValueWrapper valueWrapper = abstractRunnerHelper.getResultWrapper(String.class.getCanonicalName(), new FactMappingValue(), expressionEvaluatorMock, expectedResultRaw, resultRaw, String.class);\n        assertTrue(valueWrapper.isValid());\n\n        // case 2: failed with actual value\n        when(expressionEvaluatorMock.evaluateUnaryExpression(any(), any(), any(Class.class))).thenReturn(false);\n        valueWrapper = abstractRunnerHelper.getResultWrapper(String.class.getCanonicalName(), new FactMappingValue(), expressionEvaluatorMock, expectedResultRaw, resultRaw, String.class);\n        assertFalse(valueWrapper.isValid());\n        assertEquals(resultRaw, valueWrapper.getValue());\n\n        // case 3: failed without actual value (list)\n        valueWrapper = abstractRunnerHelper.getResultWrapper(List.class.getCanonicalName(), new FactMappingValue(), expressionEvaluatorMock, expectedResultRaw, resultRaw, List.class);\n        assertEquals(collectionError, valueWrapper.getErrorMessage().get());\n\n        // case 4: failed without actual value (map)\n        valueWrapper = abstractRunnerHelper.getResultWrapper(Map.class.getCanonicalName(), new FactMappingValue(), expressionEvaluatorMock, expectedResultRaw, resultRaw, Map.class);\n        assertEquals(collectionError, valueWrapper.getErrorMessage().get());\n\n        // case 5: failed with generic exception\n        when(expressionEvaluatorMock.evaluateUnaryExpression(any(), any(), any(Class.class))).thenThrow(new IllegalArgumentException(genericErrorMessage));\n        FactMappingValue expectedResult5 = new FactMappingValue();\n        valueWrapper = abstractRunnerHelper.getResultWrapper(Map.class.getCanonicalName(), expectedResult5, expressionEvaluatorMock, expectedResultRaw, resultRaw, Map.class);\n        assertEquals(genericErrorMessage, valueWrapper.getErrorMessage().get());\n        assertEquals(genericErrorMessage, expectedResult5.getExceptionMessage());\n    }", "signature": "void getResultWrapper()", "full_signature": "@Test public void getResultWrapper()", "class_method_signature": "AbstractRunnerHelperTest.getResultWrapper()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "evaluateUnaryExpression", "any", "any", "any", "getResultWrapper", "getCanonicalName", "assertTrue", "isValid", "thenReturn", "when", "evaluateUnaryExpression", "any", "any", "any", "getResultWrapper", "getCanonicalName", "assertFalse", "isValid", "assertEquals", "getValue", "getResultWrapper", "getCanonicalName", "assertEquals", "get", "getErrorMessage", "getResultWrapper", "getCanonicalName", "assertEquals", "get", "getErrorMessage", "thenThrow", "when", "evaluateUnaryExpression", "any", "any", "any", "getResultWrapper", "getCanonicalName", "assertEquals", "get", "getErrorMessage", "assertEquals", "getExceptionMessage"]}, "focal_class": {"identifier": "AbstractRunnerHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}], "methods": [{"identifier": "run", "parameters": "(KieContainer kieContainer,\n                    ScesimModelDescriptor scesimModelDescriptor,\n                    ScenarioWithIndex scenarioWithIndex,\n                    ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                    ClassLoader classLoader,\n                    ScenarioRunnerData scenarioRunnerData,\n                    Settings settings,\n                    Background background)", "modifiers": "public", "return": "void", "signature": "void run(KieContainer kieContainer,\n                    ScesimModelDescriptor scesimModelDescriptor,\n                    ScenarioWithIndex scenarioWithIndex,\n                    ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                    ClassLoader classLoader,\n                    ScenarioRunnerData scenarioRunnerData,\n                    Settings settings,\n                    Background background)", "full_signature": "public void run(KieContainer kieContainer,\n                    ScesimModelDescriptor scesimModelDescriptor,\n                    ScenarioWithIndex scenarioWithIndex,\n                    ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                    ClassLoader classLoader,\n                    ScenarioRunnerData scenarioRunnerData,\n                    Settings settings,\n                    Background background)", "class_method_signature": "AbstractRunnerHelper.run(KieContainer kieContainer,\n                    ScesimModelDescriptor scesimModelDescriptor,\n                    ScenarioWithIndex scenarioWithIndex,\n                    ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                    ClassLoader classLoader,\n                    ScenarioRunnerData scenarioRunnerData,\n                    Settings settings,\n                    Background background)", "testcase": false, "constructor": false}, {"identifier": "extractBackgroundValues", "parameters": "(Background background,\n                                                          ClassLoader classLoader,\n                                                          ExpressionEvaluatorFactory expressionEvaluatorFactory)", "modifiers": "protected", "return": "List<InstanceGiven>", "signature": "List<InstanceGiven> extractBackgroundValues(Background background,\n                                                          ClassLoader classLoader,\n                                                          ExpressionEvaluatorFactory expressionEvaluatorFactory)", "full_signature": "protected List<InstanceGiven> extractBackgroundValues(Background background,\n                                                          ClassLoader classLoader,\n                                                          ExpressionEvaluatorFactory expressionEvaluatorFactory)", "class_method_signature": "AbstractRunnerHelper.extractBackgroundValues(Background background,\n                                                          ClassLoader classLoader,\n                                                          ExpressionEvaluatorFactory expressionEvaluatorFactory)", "testcase": false, "constructor": false}, {"identifier": "extractGivenValues", "parameters": "(ScesimModelDescriptor scesimModelDescriptor,\n                                                     List<FactMappingValue> factMappingValues,\n                                                     ClassLoader classLoader,\n                                                     ExpressionEvaluatorFactory expressionEvaluatorFactory)", "modifiers": "protected", "return": "List<InstanceGiven>", "signature": "List<InstanceGiven> extractGivenValues(ScesimModelDescriptor scesimModelDescriptor,\n                                                     List<FactMappingValue> factMappingValues,\n                                                     ClassLoader classLoader,\n                                                     ExpressionEvaluatorFactory expressionEvaluatorFactory)", "full_signature": "protected List<InstanceGiven> extractGivenValues(ScesimModelDescriptor scesimModelDescriptor,\n                                                     List<FactMappingValue> factMappingValues,\n                                                     ClassLoader classLoader,\n                                                     ExpressionEvaluatorFactory expressionEvaluatorFactory)", "class_method_signature": "AbstractRunnerHelper.extractGivenValues(ScesimModelDescriptor scesimModelDescriptor,\n                                                     List<FactMappingValue> factMappingValues,\n                                                     ClassLoader classLoader,\n                                                     ExpressionEvaluatorFactory expressionEvaluatorFactory)", "testcase": false, "constructor": false}, {"identifier": "getDirectMapping", "parameters": "(Map<List<String>, Object> params)", "modifiers": "protected", "return": "ValueWrapper<Object>", "signature": "ValueWrapper<Object> getDirectMapping(Map<List<String>, Object> params)", "full_signature": "protected ValueWrapper<Object> getDirectMapping(Map<List<String>, Object> params)", "class_method_signature": "AbstractRunnerHelper.getDirectMapping(Map<List<String>, Object> params)", "testcase": false, "constructor": false}, {"identifier": "extractExpectedValues", "parameters": "(List<FactMappingValue> factMappingValues)", "modifiers": "protected", "return": "List<ScenarioExpect>", "signature": "List<ScenarioExpect> extractExpectedValues(List<FactMappingValue> factMappingValues)", "full_signature": "protected List<ScenarioExpect> extractExpectedValues(List<FactMappingValue> factMappingValues)", "class_method_signature": "AbstractRunnerHelper.extractExpectedValues(List<FactMappingValue> factMappingValues)", "testcase": false, "constructor": false}, {"identifier": "groupByFactIdentifierAndFilter", "parameters": "(List<FactMappingValue> factMappingValues,\n                                                                                         FactMappingType type)", "modifiers": "protected", "return": "Map<FactIdentifier, List<FactMappingValue>>", "signature": "Map<FactIdentifier, List<FactMappingValue>> groupByFactIdentifierAndFilter(List<FactMappingValue> factMappingValues,\n                                                                                         FactMappingType type)", "full_signature": "protected Map<FactIdentifier, List<FactMappingValue>> groupByFactIdentifierAndFilter(List<FactMappingValue> factMappingValues,\n                                                                                         FactMappingType type)", "class_method_signature": "AbstractRunnerHelper.groupByFactIdentifierAndFilter(List<FactMappingValue> factMappingValues,\n                                                                                         FactMappingType type)", "testcase": false, "constructor": false}, {"identifier": "isFactMappingValueToSkip", "parameters": "(FactMappingValue factMappingValue)", "modifiers": "protected", "return": "boolean", "signature": "boolean isFactMappingValueToSkip(FactMappingValue factMappingValue)", "full_signature": "protected boolean isFactMappingValueToSkip(FactMappingValue factMappingValue)", "class_method_signature": "AbstractRunnerHelper.isFactMappingValueToSkip(FactMappingValue factMappingValue)", "testcase": false, "constructor": false}, {"identifier": "getParamsForBean", "parameters": "(ScesimModelDescriptor scesimModelDescriptor,\n                                                         FactIdentifier factIdentifier,\n                                                         List<FactMappingValue> factMappingValues,\n                                                         ExpressionEvaluatorFactory expressionEvaluatorFactory)", "modifiers": "protected", "return": "Map<List<String>, Object>", "signature": "Map<List<String>, Object> getParamsForBean(ScesimModelDescriptor scesimModelDescriptor,\n                                                         FactIdentifier factIdentifier,\n                                                         List<FactMappingValue> factMappingValues,\n                                                         ExpressionEvaluatorFactory expressionEvaluatorFactory)", "full_signature": "protected Map<List<String>, Object> getParamsForBean(ScesimModelDescriptor scesimModelDescriptor,\n                                                         FactIdentifier factIdentifier,\n                                                         List<FactMappingValue> factMappingValues,\n                                                         ExpressionEvaluatorFactory expressionEvaluatorFactory)", "class_method_signature": "AbstractRunnerHelper.getParamsForBean(ScesimModelDescriptor scesimModelDescriptor,\n                                                         FactIdentifier factIdentifier,\n                                                         List<FactMappingValue> factMappingValues,\n                                                         ExpressionEvaluatorFactory expressionEvaluatorFactory)", "testcase": false, "constructor": false}, {"identifier": "validateAssertion", "parameters": "(List<ScenarioResult> scenarioResults, Scenario scenario)", "modifiers": "protected", "return": "void", "signature": "void validateAssertion(List<ScenarioResult> scenarioResults, Scenario scenario)", "full_signature": "protected void validateAssertion(List<ScenarioResult> scenarioResults, Scenario scenario)", "class_method_signature": "AbstractRunnerHelper.validateAssertion(List<ScenarioResult> scenarioResults, Scenario scenario)", "testcase": false, "constructor": false}, {"identifier": "fillResult", "parameters": "(FactMappingValue expectedResult,\n                                        Supplier<ValueWrapper<?>> resultSupplier,\n                                        ExpressionEvaluator expressionEvaluator)", "modifiers": "protected", "return": "ScenarioResult", "signature": "ScenarioResult fillResult(FactMappingValue expectedResult,\n                                        Supplier<ValueWrapper<?>> resultSupplier,\n                                        ExpressionEvaluator expressionEvaluator)", "full_signature": "protected ScenarioResult fillResult(FactMappingValue expectedResult,\n                                        Supplier<ValueWrapper<?>> resultSupplier,\n                                        ExpressionEvaluator expressionEvaluator)", "class_method_signature": "AbstractRunnerHelper.fillResult(FactMappingValue expectedResult,\n                                        Supplier<ValueWrapper<?>> resultSupplier,\n                                        ExpressionEvaluator expressionEvaluator)", "testcase": false, "constructor": false}, {"identifier": "getResultWrapper", "parameters": "(String className,\n                                            FactMappingValue expectedResult,\n                                            ExpressionEvaluator expressionEvaluator,\n                                            Object expectedResultRaw,\n                                            Object resultRaw,\n                                            Class<?> resultClass)", "modifiers": "protected", "return": "ValueWrapper", "signature": "ValueWrapper getResultWrapper(String className,\n                                            FactMappingValue expectedResult,\n                                            ExpressionEvaluator expressionEvaluator,\n                                            Object expectedResultRaw,\n                                            Object resultRaw,\n                                            Class<?> resultClass)", "full_signature": "protected ValueWrapper getResultWrapper(String className,\n                                            FactMappingValue expectedResult,\n                                            ExpressionEvaluator expressionEvaluator,\n                                            Object expectedResultRaw,\n                                            Object resultRaw,\n                                            Class<?> resultClass)", "class_method_signature": "AbstractRunnerHelper.getResultWrapper(String className,\n                                            FactMappingValue expectedResult,\n                                            ExpressionEvaluator expressionEvaluator,\n                                            Object expectedResultRaw,\n                                            Object resultRaw,\n                                            Class<?> resultClass)", "testcase": false, "constructor": false}, {"identifier": "extractResultMetadata", "parameters": "(Map<String, Object> requestContext,\n                                                                    ScenarioWithIndex scenarioWithIndex)", "modifiers": "protected abstract", "return": "ScenarioResultMetadata", "signature": "ScenarioResultMetadata extractResultMetadata(Map<String, Object> requestContext,\n                                                                    ScenarioWithIndex scenarioWithIndex)", "full_signature": "protected abstract ScenarioResultMetadata extractResultMetadata(Map<String, Object> requestContext,\n                                                                    ScenarioWithIndex scenarioWithIndex)", "class_method_signature": "AbstractRunnerHelper.extractResultMetadata(Map<String, Object> requestContext,\n                                                                    ScenarioWithIndex scenarioWithIndex)", "testcase": false, "constructor": false}, {"identifier": "executeScenario", "parameters": "(KieContainer kieContainer,\n                                                           ScenarioRunnerData scenarioRunnerData,\n                                                           ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                                           ScesimModelDescriptor scesimModelDescriptor,\n                                                           Settings settings)", "modifiers": "protected abstract", "return": "Map<String, Object>", "signature": "Map<String, Object> executeScenario(KieContainer kieContainer,\n                                                           ScenarioRunnerData scenarioRunnerData,\n                                                           ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                                           ScesimModelDescriptor scesimModelDescriptor,\n                                                           Settings settings)", "full_signature": "protected abstract Map<String, Object> executeScenario(KieContainer kieContainer,\n                                                           ScenarioRunnerData scenarioRunnerData,\n                                                           ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                                           ScesimModelDescriptor scesimModelDescriptor,\n                                                           Settings settings)", "class_method_signature": "AbstractRunnerHelper.executeScenario(KieContainer kieContainer,\n                                                           ScenarioRunnerData scenarioRunnerData,\n                                                           ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                                           ScesimModelDescriptor scesimModelDescriptor,\n                                                           Settings settings)", "testcase": false, "constructor": false}, {"identifier": "verifyConditions", "parameters": "(ScesimModelDescriptor scesimModelDescriptor,\n                                             ScenarioRunnerData scenarioRunnerData,\n                                             ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                             Map<String, Object> requestContext)", "modifiers": "protected abstract", "return": "void", "signature": "void verifyConditions(ScesimModelDescriptor scesimModelDescriptor,\n                                             ScenarioRunnerData scenarioRunnerData,\n                                             ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                             Map<String, Object> requestContext)", "full_signature": "protected abstract void verifyConditions(ScesimModelDescriptor scesimModelDescriptor,\n                                             ScenarioRunnerData scenarioRunnerData,\n                                             ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                             Map<String, Object> requestContext)", "class_method_signature": "AbstractRunnerHelper.verifyConditions(ScesimModelDescriptor scesimModelDescriptor,\n                                             ScenarioRunnerData scenarioRunnerData,\n                                             ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                             Map<String, Object> requestContext)", "testcase": false, "constructor": false}, {"identifier": "createObject", "parameters": "(ValueWrapper<Object> initialInstance,\n                                           String className,\n                                           Map<List<String>, Object> params,\n                                           ClassLoader classLoader)", "modifiers": "protected abstract", "return": "Object", "signature": "Object createObject(ValueWrapper<Object> initialInstance,\n                                           String className,\n                                           Map<List<String>, Object> params,\n                                           ClassLoader classLoader)", "full_signature": "protected abstract Object createObject(ValueWrapper<Object> initialInstance,\n                                           String className,\n                                           Map<List<String>, Object> params,\n                                           ClassLoader classLoader)", "class_method_signature": "AbstractRunnerHelper.createObject(ValueWrapper<Object> initialInstance,\n                                           String className,\n                                           Map<List<String>, Object> params,\n                                           ClassLoader classLoader)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/runner/AbstractRunnerHelper.java"}, "focal_method": {"identifier": "getResultWrapper", "parameters": "(String className,\n                                            FactMappingValue expectedResult,\n                                            ExpressionEvaluator expressionEvaluator,\n                                            Object expectedResultRaw,\n                                            Object resultRaw,\n                                            Class<?> resultClass)", "modifiers": "protected", "return": "ValueWrapper", "body": "protected ValueWrapper getResultWrapper(String className,\n                                            FactMappingValue expectedResult,\n                                            ExpressionEvaluator expressionEvaluator,\n                                            Object expectedResultRaw,\n                                            Object resultRaw,\n                                            Class<?> resultClass) {\n        try {\n            boolean evaluationSucceed = expressionEvaluator.evaluateUnaryExpression((String) expectedResultRaw, resultRaw, resultClass);\n            if (evaluationSucceed) {\n                return of(resultRaw);\n            } else if (isCollection(className)) {\n                // no suggestions for collection yet\n                return errorWithMessage(\"Impossible to find elements in the collection to satisfy the conditions\");\n            } else {\n                return errorWithValidValue(resultRaw, expectedResultRaw);\n            }\n        } catch (Exception e) {\n            expectedResult.setExceptionMessage(e.getMessage());\n            return errorWithMessage(e.getMessage());\n        }\n    }", "signature": "ValueWrapper getResultWrapper(String className,\n                                            FactMappingValue expectedResult,\n                                            ExpressionEvaluator expressionEvaluator,\n                                            Object expectedResultRaw,\n                                            Object resultRaw,\n                                            Class<?> resultClass)", "full_signature": "protected ValueWrapper getResultWrapper(String className,\n                                            FactMappingValue expectedResult,\n                                            ExpressionEvaluator expressionEvaluator,\n                                            Object expectedResultRaw,\n                                            Object resultRaw,\n                                            Class<?> resultClass)", "class_method_signature": "AbstractRunnerHelper.getResultWrapper(String className,\n                                            FactMappingValue expectedResult,\n                                            ExpressionEvaluator expressionEvaluator,\n                                            Object expectedResultRaw,\n                                            Object resultRaw,\n                                            Class<?> resultClass)", "testcase": false, "constructor": false, "invocations": ["evaluateUnaryExpression", "of", "isCollection", "errorWithMessage", "errorWithValidValue", "setExceptionMessage", "getMessage", "errorWithMessage", "getMessage"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}