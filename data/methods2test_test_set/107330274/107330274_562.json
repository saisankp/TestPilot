{"test_class": {"identifier": "CassandraLoadBalancerStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(CassandraLoadBalancerStoreTest.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CassandraLoadBalancerStoreTest.class)", "var_name": "logger"}, {"original_string": "private static final long STARTUP_TIMEOUT = 60_000L;", "modifier": "private static final", "type": "long", "declarator": "STARTUP_TIMEOUT = 60_000L", "var_name": "STARTUP_TIMEOUT"}, {"original_string": "private static final String CONFIGURATION_FILE_NAME = \"relocated-cassandra.yaml\";", "modifier": "private static final", "type": "String", "declarator": "CONFIGURATION_FILE_NAME = \"relocated-cassandra.yaml\"", "var_name": "CONFIGURATION_FILE_NAME"}, {"original_string": "private static final long TIMEOUT_MS = 30_000;", "modifier": "private static final", "type": "long", "declarator": "TIMEOUT_MS = 30_000", "var_name": "TIMEOUT_MS"}, {"original_string": "@Rule\n    public CassandraCQLUnit cassandraCQLUnit = new CassandraCQLUnit(\n            new ClassPathCQLDataSet(\"tables.cql\", \"titus_integration_tests\"),\n            CONFIGURATION_FILE_NAME,\n            STARTUP_TIMEOUT\n    );", "modifier": "@Rule\n    public", "type": "CassandraCQLUnit", "declarator": "cassandraCQLUnit = new CassandraCQLUnit(\n            new ClassPathCQLDataSet(\"tables.cql\", \"titus_integration_tests\"),\n            CONFIGURATION_FILE_NAME,\n            STARTUP_TIMEOUT\n    )", "var_name": "cassandraCQLUnit"}], "file": "titus-ext/cassandra/src/test/java/com/netflix/titus/ext/cassandra/store/CassandraLoadBalancerStoreTest.java"}, "test_case": {"identifier": "testUpdateTarget", "parameters": "()", "modifiers": "@Test(timeout = TIMEOUT_MS) public", "return": "void", "body": "@Test(timeout = TIMEOUT_MS)\n    public void testUpdateTarget() throws Exception {\n        Session session = cassandraCQLUnit.getSession();\n        BoundStatement countStmt = session.prepare(\"SELECT COUNT(*) FROM load_balancer_targets;\").bind();\n        PreparedStatement stateStmt = session.prepare(\"SELECT state FROM load_balancer_targets WHERE load_balancer_id = ? AND ip_address = ?;\");\n\n        assertThat(session.execute(countStmt).one().getLong(0)).isEqualTo(0);\n\n        LoadBalancerTarget target = new LoadBalancerTarget(\"lb-1\", \"task-1\", \"1.1.1.1\");\n        CassandraLoadBalancerStore store = getInitdStore();\n        store.addOrUpdateTargets(target.withState(LoadBalancerTarget.State.REGISTERED)).block();\n        assertThat(session.execute(countStmt).one().getLong(0)).isEqualTo(1);\n        Row registered = session.execute(stateStmt.bind(\"lb-1\", \"1.1.1.1\")).one();\n        assertThat(registered.getString(\"state\")).isEqualTo(\"REGISTERED\");\n\n        store.addOrUpdateTargets(target.withState(LoadBalancerTarget.State.DEREGISTERED)).block();\n        assertThat(session.execute(countStmt).one().getLong(0)).isEqualTo(1);\n        Row deregistered = session.execute(stateStmt.bind(\"lb-1\", \"1.1.1.1\")).one();\n        assertThat(deregistered.getString(\"state\")).isEqualTo(\"DEREGISTERED\");\n    }", "signature": "void testUpdateTarget()", "full_signature": "@Test(timeout = TIMEOUT_MS) public void testUpdateTarget()", "class_method_signature": "CassandraLoadBalancerStoreTest.testUpdateTarget()", "testcase": true, "constructor": false, "invocations": ["getSession", "bind", "prepare", "prepare", "isEqualTo", "assertThat", "getLong", "one", "execute", "getInitdStore", "block", "addOrUpdateTargets", "withState", "isEqualTo", "assertThat", "getLong", "one", "execute", "one", "execute", "bind", "isEqualTo", "assertThat", "getString", "block", "addOrUpdateTargets", "withState", "isEqualTo", "assertThat", "getLong", "one", "execute", "one", "execute", "bind", "isEqualTo", "assertThat", "getString"]}, "focal_class": {"identifier": "CassandraLoadBalancerStore", "superclass": "", "interfaces": "implements LoadBalancerStore", "fields": [{"original_string": "public static final String LOAD_BALANCER_CASSANDRA_SESSION = \"loadbalancer\";", "modifier": "public static final", "type": "String", "declarator": "LOAD_BALANCER_CASSANDRA_SESSION = \"loadbalancer\"", "var_name": "LOAD_BALANCER_CASSANDRA_SESSION"}, {"original_string": "private static Logger logger = LoggerFactory.getLogger(CassandraLoadBalancerStore.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CassandraLoadBalancerStore.class)", "var_name": "logger"}, {"original_string": "private static final String TABLE_LOAD_BALANCER_ASSOCIATIONS = \"load_balancer_jobs\";", "modifier": "private static final", "type": "String", "declarator": "TABLE_LOAD_BALANCER_ASSOCIATIONS = \"load_balancer_jobs\"", "var_name": "TABLE_LOAD_BALANCER_ASSOCIATIONS"}, {"original_string": "private static final String TABLE_LOAD_BALANCER_TARGETS = \"load_balancer_targets\";", "modifier": "private static final", "type": "String", "declarator": "TABLE_LOAD_BALANCER_TARGETS = \"load_balancer_targets\"", "var_name": "TABLE_LOAD_BALANCER_TARGETS"}, {"original_string": "private static final String COLUMN_JOB_ID = \"job_id\";", "modifier": "private static final", "type": "String", "declarator": "COLUMN_JOB_ID = \"job_id\"", "var_name": "COLUMN_JOB_ID"}, {"original_string": "private static final String COLUMN_TASK_ID = \"task_id\";", "modifier": "private static final", "type": "String", "declarator": "COLUMN_TASK_ID = \"task_id\"", "var_name": "COLUMN_TASK_ID"}, {"original_string": "private static final String COLUMN_LOAD_BALANCER = \"load_balancer_id\";", "modifier": "private static final", "type": "String", "declarator": "COLUMN_LOAD_BALANCER = \"load_balancer_id\"", "var_name": "COLUMN_LOAD_BALANCER"}, {"original_string": "private static final String COLUMN_IP_ADDRESS = \"ip_address\";", "modifier": "private static final", "type": "String", "declarator": "COLUMN_IP_ADDRESS = \"ip_address\"", "var_name": "COLUMN_IP_ADDRESS"}, {"original_string": "private static final String COLUMN_STATE = \"state\";", "modifier": "private static final", "type": "String", "declarator": "COLUMN_STATE = \"state\"", "var_name": "COLUMN_STATE"}, {"original_string": "private static final Integer FETCH_SIZE = Integer.MAX_VALUE;", "modifier": "private static final", "type": "Integer", "declarator": "FETCH_SIZE = Integer.MAX_VALUE", "var_name": "FETCH_SIZE"}, {"original_string": "private static final long FETCH_TIMEOUT_MS = 120_000;", "modifier": "private static final", "type": "long", "declarator": "FETCH_TIMEOUT_MS = 120_000", "var_name": "FETCH_TIMEOUT_MS"}, {"original_string": "private final PreparedStatement selectAssociations;", "modifier": "private final", "type": "PreparedStatement", "declarator": "selectAssociations", "var_name": "selectAssociations"}, {"original_string": "private final PreparedStatement insertAssociation;", "modifier": "private final", "type": "PreparedStatement", "declarator": "insertAssociation", "var_name": "insertAssociation"}, {"original_string": "private final PreparedStatement deleteAssociation;", "modifier": "private final", "type": "PreparedStatement", "declarator": "deleteAssociation", "var_name": "deleteAssociation"}, {"original_string": "private final PreparedStatement selectTargetsForLoadBalancer;", "modifier": "private final", "type": "PreparedStatement", "declarator": "selectTargetsForLoadBalancer", "var_name": "selectTargetsForLoadBalancer"}, {"original_string": "private final PreparedStatement insertTarget;", "modifier": "private final", "type": "PreparedStatement", "declarator": "insertTarget", "var_name": "insertTarget"}, {"original_string": "private final PreparedStatement deleteDeregisteredTarget;", "modifier": "private final", "type": "PreparedStatement", "declarator": "deleteDeregisteredTarget", "var_name": "deleteDeregisteredTarget"}, {"original_string": "private final CassandraStoreConfiguration configuration;", "modifier": "private final", "type": "CassandraStoreConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final EntitySanitizer entitySanitizer;", "modifier": "private final", "type": "EntitySanitizer", "declarator": "entitySanitizer", "var_name": "entitySanitizer"}, {"original_string": "private final Session session;", "modifier": "private final", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "private final CassStoreHelper storeHelper;", "modifier": "private final", "type": "CassStoreHelper", "declarator": "storeHelper", "var_name": "storeHelper"}, {"original_string": "private final ConcurrentMap<JobLoadBalancer, JobLoadBalancer.State> loadBalancerStateMap;", "modifier": "private final", "type": "ConcurrentMap<JobLoadBalancer, JobLoadBalancer.State>", "declarator": "loadBalancerStateMap", "var_name": "loadBalancerStateMap"}, {"original_string": "private final ConcurrentMap<String, SortedSet<JobLoadBalancer>> jobToAssociatedLoadBalancersMap;", "modifier": "private final", "type": "ConcurrentMap<String, SortedSet<JobLoadBalancer>>", "declarator": "jobToAssociatedLoadBalancersMap", "var_name": "jobToAssociatedLoadBalancersMap"}, {"original_string": "private static final String GET_ALL_ASSOCIATIONS = String\n            .format(\"SELECT %s, %s, %s FROM %s;\",\n                    COLUMN_JOB_ID,\n                    COLUMN_LOAD_BALANCER,\n                    COLUMN_STATE,\n                    TABLE_LOAD_BALANCER_ASSOCIATIONS);", "modifier": "private static final", "type": "String", "declarator": "GET_ALL_ASSOCIATIONS = String\n            .format(\"SELECT %s, %s, %s FROM %s;\",\n                    COLUMN_JOB_ID,\n                    COLUMN_LOAD_BALANCER,\n                    COLUMN_STATE,\n                    TABLE_LOAD_BALANCER_ASSOCIATIONS)", "var_name": "GET_ALL_ASSOCIATIONS"}, {"original_string": "private static final String INSERT_ASSOCIATION = String\n            .format(\"INSERT INTO %s(%s, %s, %s) VALUES (?, ?, ?);\",\n                    TABLE_LOAD_BALANCER_ASSOCIATIONS,\n                    COLUMN_JOB_ID,\n                    COLUMN_LOAD_BALANCER,\n                    COLUMN_STATE);", "modifier": "private static final", "type": "String", "declarator": "INSERT_ASSOCIATION = String\n            .format(\"INSERT INTO %s(%s, %s, %s) VALUES (?, ?, ?);\",\n                    TABLE_LOAD_BALANCER_ASSOCIATIONS,\n                    COLUMN_JOB_ID,\n                    COLUMN_LOAD_BALANCER,\n                    COLUMN_STATE)", "var_name": "INSERT_ASSOCIATION"}, {"original_string": "private static final String DELETE_ASSOCIATION = String\n            .format(\"DELETE FROM %s WHERE %s = ? AND %s = ?\",\n                    TABLE_LOAD_BALANCER_ASSOCIATIONS,\n                    COLUMN_JOB_ID,\n                    COLUMN_LOAD_BALANCER);", "modifier": "private static final", "type": "String", "declarator": "DELETE_ASSOCIATION = String\n            .format(\"DELETE FROM %s WHERE %s = ? AND %s = ?\",\n                    TABLE_LOAD_BALANCER_ASSOCIATIONS,\n                    COLUMN_JOB_ID,\n                    COLUMN_LOAD_BALANCER)", "var_name": "DELETE_ASSOCIATION"}], "methods": [{"identifier": "buildLoadBalancerStatePairFromRow", "parameters": "(Row row)", "modifiers": "private static", "return": "Pair<JobLoadBalancer, JobLoadBalancer.State>", "signature": "Pair<JobLoadBalancer, JobLoadBalancer.State> buildLoadBalancerStatePairFromRow(Row row)", "full_signature": "private static Pair<JobLoadBalancer, JobLoadBalancer.State> buildLoadBalancerStatePairFromRow(Row row)", "class_method_signature": "CassandraLoadBalancerStore.buildLoadBalancerStatePairFromRow(Row row)", "testcase": false, "constructor": false}, {"identifier": "buildLoadBalancerTargetStateFromRow", "parameters": "(Row row)", "modifiers": "private static", "return": "LoadBalancerTargetState", "signature": "LoadBalancerTargetState buildLoadBalancerTargetStateFromRow(Row row)", "full_signature": "private static LoadBalancerTargetState buildLoadBalancerTargetStateFromRow(Row row)", "class_method_signature": "CassandraLoadBalancerStore.buildLoadBalancerTargetStateFromRow(Row row)", "testcase": false, "constructor": false}, {"identifier": "CassandraLoadBalancerStore", "parameters": "(CassandraStoreConfiguration configuration,\n                                      @Named(LOAD_BALANCER_SANITIZER) EntitySanitizer entitySanitizer,\n                                      @Named(LOAD_BALANCER_CASSANDRA_SESSION) Session session)", "modifiers": "@Inject public", "return": "", "signature": " CassandraLoadBalancerStore(CassandraStoreConfiguration configuration,\n                                      @Named(LOAD_BALANCER_SANITIZER) EntitySanitizer entitySanitizer,\n                                      @Named(LOAD_BALANCER_CASSANDRA_SESSION) Session session)", "full_signature": "@Inject public  CassandraLoadBalancerStore(CassandraStoreConfiguration configuration,\n                                      @Named(LOAD_BALANCER_SANITIZER) EntitySanitizer entitySanitizer,\n                                      @Named(LOAD_BALANCER_CASSANDRA_SESSION) Session session)", "class_method_signature": "CassandraLoadBalancerStore.CassandraLoadBalancerStore(CassandraStoreConfiguration configuration,\n                                      @Named(LOAD_BALANCER_SANITIZER) EntitySanitizer entitySanitizer,\n                                      @Named(LOAD_BALANCER_CASSANDRA_SESSION) Session session)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@Activator public", "return": "void", "signature": "void init()", "full_signature": "@Activator public void init()", "class_method_signature": "CassandraLoadBalancerStore.init()", "testcase": false, "constructor": false}, {"identifier": "loadAllAssociations", "parameters": "(boolean failOnError)", "modifiers": "private", "return": "Mono<Void>", "signature": "Mono<Void> loadAllAssociations(boolean failOnError)", "full_signature": "private Mono<Void> loadAllAssociations(boolean failOnError)", "class_method_signature": "CassandraLoadBalancerStore.loadAllAssociations(boolean failOnError)", "testcase": false, "constructor": false}, {"identifier": "getAssociatedLoadBalancersForJob", "parameters": "(String jobId)", "modifiers": "@Override public", "return": "Observable<JobLoadBalancer>", "signature": "Observable<JobLoadBalancer> getAssociatedLoadBalancersForJob(String jobId)", "full_signature": "@Override public Observable<JobLoadBalancer> getAssociatedLoadBalancersForJob(String jobId)", "class_method_signature": "CassandraLoadBalancerStore.getAssociatedLoadBalancersForJob(String jobId)", "testcase": false, "constructor": false}, {"identifier": "getAssociatedLoadBalancersSetForJob", "parameters": "(String jobId)", "modifiers": "@Override public", "return": "Set<JobLoadBalancer>", "signature": "Set<JobLoadBalancer> getAssociatedLoadBalancersSetForJob(String jobId)", "full_signature": "@Override public Set<JobLoadBalancer> getAssociatedLoadBalancersSetForJob(String jobId)", "class_method_signature": "CassandraLoadBalancerStore.getAssociatedLoadBalancersSetForJob(String jobId)", "testcase": false, "constructor": false}, {"identifier": "getAssociations", "parameters": "()", "modifiers": "@Override public", "return": "List<JobLoadBalancerState>", "signature": "List<JobLoadBalancerState> getAssociations()", "full_signature": "@Override public List<JobLoadBalancerState> getAssociations()", "class_method_signature": "CassandraLoadBalancerStore.getAssociations()", "testcase": false, "constructor": false}, {"identifier": "getAssociationsPage", "parameters": "(int offset, int limit)", "modifiers": "@Override public", "return": "List<JobLoadBalancer>", "signature": "List<JobLoadBalancer> getAssociationsPage(int offset, int limit)", "full_signature": "@Override public List<JobLoadBalancer> getAssociationsPage(int offset, int limit)", "class_method_signature": "CassandraLoadBalancerStore.getAssociationsPage(int offset, int limit)", "testcase": false, "constructor": false}, {"identifier": "addOrUpdateLoadBalancer", "parameters": "(JobLoadBalancer jobLoadBalancer, JobLoadBalancer.State state)", "modifiers": "@Override public", "return": "Completable", "signature": "Completable addOrUpdateLoadBalancer(JobLoadBalancer jobLoadBalancer, JobLoadBalancer.State state)", "full_signature": "@Override public Completable addOrUpdateLoadBalancer(JobLoadBalancer jobLoadBalancer, JobLoadBalancer.State state)", "class_method_signature": "CassandraLoadBalancerStore.addOrUpdateLoadBalancer(JobLoadBalancer jobLoadBalancer, JobLoadBalancer.State state)", "testcase": false, "constructor": false}, {"identifier": "removeLoadBalancer", "parameters": "(JobLoadBalancer jobLoadBalancer)", "modifiers": "@Override public", "return": "Completable", "signature": "Completable removeLoadBalancer(JobLoadBalancer jobLoadBalancer)", "full_signature": "@Override public Completable removeLoadBalancer(JobLoadBalancer jobLoadBalancer)", "class_method_signature": "CassandraLoadBalancerStore.removeLoadBalancer(JobLoadBalancer jobLoadBalancer)", "testcase": false, "constructor": false}, {"identifier": "getNumLoadBalancersForJob", "parameters": "(String jobId)", "modifiers": "@Override public", "return": "int", "signature": "int getNumLoadBalancersForJob(String jobId)", "full_signature": "@Override public int getNumLoadBalancersForJob(String jobId)", "class_method_signature": "CassandraLoadBalancerStore.getNumLoadBalancersForJob(String jobId)", "testcase": false, "constructor": false}, {"identifier": "addOrUpdateTargets", "parameters": "(Collection<LoadBalancerTargetState> targets)", "modifiers": "@Override public", "return": "Mono<Void>", "signature": "Mono<Void> addOrUpdateTargets(Collection<LoadBalancerTargetState> targets)", "full_signature": "@Override public Mono<Void> addOrUpdateTargets(Collection<LoadBalancerTargetState> targets)", "class_method_signature": "CassandraLoadBalancerStore.addOrUpdateTargets(Collection<LoadBalancerTargetState> targets)", "testcase": false, "constructor": false}, {"identifier": "addOrUpdateTarget", "parameters": "(LoadBalancerTargetState target)", "modifiers": "private", "return": "Mono<Void>", "signature": "Mono<Void> addOrUpdateTarget(LoadBalancerTargetState target)", "full_signature": "private Mono<Void> addOrUpdateTarget(LoadBalancerTargetState target)", "class_method_signature": "CassandraLoadBalancerStore.addOrUpdateTarget(LoadBalancerTargetState target)", "testcase": false, "constructor": false}, {"identifier": "removeDeregisteredTargets", "parameters": "(Collection<LoadBalancerTarget> toRemove)", "modifiers": "@Override public", "return": "Mono<Void>", "signature": "Mono<Void> removeDeregisteredTargets(Collection<LoadBalancerTarget> toRemove)", "full_signature": "@Override public Mono<Void> removeDeregisteredTargets(Collection<LoadBalancerTarget> toRemove)", "class_method_signature": "CassandraLoadBalancerStore.removeDeregisteredTargets(Collection<LoadBalancerTarget> toRemove)", "testcase": false, "constructor": false}, {"identifier": "getLoadBalancerTargets", "parameters": "(String loadBalancerId)", "modifiers": "@Override public", "return": "Flux<LoadBalancerTargetState>", "signature": "Flux<LoadBalancerTargetState> getLoadBalancerTargets(String loadBalancerId)", "full_signature": "@Override public Flux<LoadBalancerTargetState> getLoadBalancerTargets(String loadBalancerId)", "class_method_signature": "CassandraLoadBalancerStore.getLoadBalancerTargets(String loadBalancerId)", "testcase": false, "constructor": false}, {"identifier": "addJobLoadBalancerAssociation", "parameters": "(JobLoadBalancer association)", "modifiers": "private", "return": "void", "signature": "void addJobLoadBalancerAssociation(JobLoadBalancer association)", "full_signature": "private void addJobLoadBalancerAssociation(JobLoadBalancer association)", "class_method_signature": "CassandraLoadBalancerStore.addJobLoadBalancerAssociation(JobLoadBalancer association)", "testcase": false, "constructor": false}, {"identifier": "removeJobLoadBalancerAssociation", "parameters": "(JobLoadBalancer association)", "modifiers": "private", "return": "void", "signature": "void removeJobLoadBalancerAssociation(JobLoadBalancer association)", "full_signature": "private void removeJobLoadBalancerAssociation(JobLoadBalancer association)", "class_method_signature": "CassandraLoadBalancerStore.removeJobLoadBalancerAssociation(JobLoadBalancer association)", "testcase": false, "constructor": false}], "file": "titus-ext/cassandra/src/main/java/com/netflix/titus/ext/cassandra/store/CassandraLoadBalancerStore.java"}, "focal_method": {"identifier": "addOrUpdateTargets", "parameters": "(Collection<LoadBalancerTargetState> targets)", "modifiers": "@Override public", "return": "Mono<Void>", "body": "@Override\n    public Mono<Void> addOrUpdateTargets(Collection<LoadBalancerTargetState> targets) {\n        List<Mono<Void>> insertOperations = targets.stream()\n                .map(this::addOrUpdateTarget)\n                .collect(Collectors.toList());\n\n        int limit = configuration.getLoadBalancerWriteConcurrencyLimit();\n        // prefetch does not matter here because operations don't produce any result (they are Mono<Void>)\n        return Flux.mergeSequentialDelayError(insertOperations, limit, limit)\n                .ignoreElements()\n                .doOnSubscribe(ignored -> {\n                    Map<String, Long> countPerLoadBalancer = targets.stream().collect(Collectors.groupingBy(\n                            target -> target.getLoadBalancerTarget().getLoadBalancerId(),\n                            Collectors.counting()\n                    ));\n                    logger.info(\"Inserting/updating targets: {}\", countPerLoadBalancer);\n                    logger.debug(\"Inserting/updating {} targets. Details: {}\", targets.size(), targets);\n                });\n    }", "signature": "Mono<Void> addOrUpdateTargets(Collection<LoadBalancerTargetState> targets)", "full_signature": "@Override public Mono<Void> addOrUpdateTargets(Collection<LoadBalancerTargetState> targets)", "class_method_signature": "CassandraLoadBalancerStore.addOrUpdateTargets(Collection<LoadBalancerTargetState> targets)", "testcase": false, "constructor": false, "invocations": ["collect", "map", "stream", "toList", "getLoadBalancerWriteConcurrencyLimit", "doOnSubscribe", "ignoreElements", "mergeSequentialDelayError", "collect", "stream", "groupingBy", "getLoadBalancerId", "getLoadBalancerTarget", "counting", "info", "debug", "size"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}