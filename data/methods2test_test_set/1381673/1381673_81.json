{"test_class": {"identifier": "MVELExpressionEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MVELExpressionEvaluator evaluator = new MVELExpressionEvaluator(MVELExpressionEvaluatorTest.class.getClassLoader());", "modifier": "", "type": "MVELExpressionEvaluator", "declarator": "evaluator = new MVELExpressionEvaluator(MVELExpressionEvaluatorTest.class.getClassLoader())", "var_name": "evaluator"}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/MVELExpressionEvaluatorTest.java"}, "test_case": {"identifier": "cleanExpression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cleanExpression() {\n        assertEquals(\"test\", evaluator.cleanExpression(MVEL_ESCAPE_SYMBOL + \"test\"));\n        assertEquals(\" test\", evaluator.cleanExpression(MVEL_ESCAPE_SYMBOL + \" test\"));\n        assertEquals(\" \" + MVEL_ESCAPE_SYMBOL + \" test\", evaluator.cleanExpression(MVEL_ESCAPE_SYMBOL + \" \" + MVEL_ESCAPE_SYMBOL + \" test\"));\n        assertEquals(\"test\", evaluator.cleanExpression(new TextNode(MVEL_ESCAPE_SYMBOL + \"test\").toString()));\n        assertEquals(\" test\", evaluator.cleanExpression(new TextNode(MVEL_ESCAPE_SYMBOL + \" test\").toString()));\n        assertEquals(\" \" + MVEL_ESCAPE_SYMBOL + \" test\", evaluator.cleanExpression(new TextNode(MVEL_ESCAPE_SYMBOL + \" \" + MVEL_ESCAPE_SYMBOL + \" test\").toString()));\n\n        assertThatThrownBy(() -> evaluator.cleanExpression(\"test\"))\n                .isInstanceOf(IllegalArgumentException.class)\n                .hasMessageStartingWith(\"Malformed MVEL expression\");\n\n        assertThatThrownBy(() -> evaluator.cleanExpression(new TextNode(\"test\").toString()))\n                .isInstanceOf(IllegalArgumentException.class)\n                .hasMessageStartingWith(\"Malformed MVEL expression\");\n    }", "signature": "void cleanExpression()", "full_signature": "@Test public void cleanExpression()", "class_method_signature": "MVELExpressionEvaluatorTest.cleanExpression()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "cleanExpression", "assertEquals", "cleanExpression", "assertEquals", "cleanExpression", "assertEquals", "cleanExpression", "toString", "assertEquals", "cleanExpression", "toString", "assertEquals", "cleanExpression", "toString", "hasMessageStartingWith", "isInstanceOf", "assertThatThrownBy", "cleanExpression", "hasMessageStartingWith", "isInstanceOf", "assertThatThrownBy", "cleanExpression", "toString"]}, "focal_class": {"identifier": "MVELExpressionEvaluator", "superclass": "", "interfaces": "implements ExpressionEvaluator", "fields": [{"original_string": "private final ParserConfiguration config;", "modifier": "private final", "type": "ParserConfiguration", "declarator": "config", "var_name": "config"}, {"original_string": "private final MVELEvaluator evaluator = MVELSafeHelper.getEvaluator();", "modifier": "private final", "type": "MVELEvaluator", "declarator": "evaluator = MVELSafeHelper.getEvaluator()", "var_name": "evaluator"}, {"original_string": "private final ClassLoader classLoader;", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}], "methods": [{"identifier": "MVELExpressionEvaluator", "parameters": "(ClassLoader classLoader)", "modifiers": "public", "return": "", "signature": " MVELExpressionEvaluator(ClassLoader classLoader)", "full_signature": "public  MVELExpressionEvaluator(ClassLoader classLoader)", "class_method_signature": "MVELExpressionEvaluator.MVELExpressionEvaluator(ClassLoader classLoader)", "testcase": false, "constructor": true}, {"identifier": "evaluateUnaryExpression", "parameters": "(String rawExpression, Object resultValue, Class<?> resultClass)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean evaluateUnaryExpression(String rawExpression, Object resultValue, Class<?> resultClass)", "full_signature": "@Override public boolean evaluateUnaryExpression(String rawExpression, Object resultValue, Class<?> resultClass)", "class_method_signature": "MVELExpressionEvaluator.evaluateUnaryExpression(String rawExpression, Object resultValue, Class<?> resultClass)", "testcase": false, "constructor": false}, {"identifier": "evaluateLiteralExpression", "parameters": "(String rawExpression, String className, List<String> genericClasses)", "modifiers": "@Override public", "return": "Object", "signature": "Object evaluateLiteralExpression(String rawExpression, String className, List<String> genericClasses)", "full_signature": "@Override public Object evaluateLiteralExpression(String rawExpression, String className, List<String> genericClasses)", "class_method_signature": "MVELExpressionEvaluator.evaluateLiteralExpression(String rawExpression, String className, List<String> genericClasses)", "testcase": false, "constructor": false}, {"identifier": "fromObjectToExpression", "parameters": "(Object value)", "modifiers": "@Override public", "return": "String", "signature": "String fromObjectToExpression(Object value)", "full_signature": "@Override public String fromObjectToExpression(Object value)", "class_method_signature": "MVELExpressionEvaluator.fromObjectToExpression(Object value)", "testcase": false, "constructor": false}, {"identifier": "compileAndExecute", "parameters": "(String rawExpression, Map<String, Object> params)", "modifiers": "protected", "return": "Object", "signature": "Object compileAndExecute(String rawExpression, Map<String, Object> params)", "full_signature": "protected Object compileAndExecute(String rawExpression, Map<String, Object> params)", "class_method_signature": "MVELExpressionEvaluator.compileAndExecute(String rawExpression, Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "cleanExpression", "parameters": "(String rawExpression)", "modifiers": "protected", "return": "String", "signature": "String cleanExpression(String rawExpression)", "full_signature": "protected String cleanExpression(String rawExpression)", "class_method_signature": "MVELExpressionEvaluator.cleanExpression(String rawExpression)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/expression/MVELExpressionEvaluator.java"}, "focal_method": {"identifier": "cleanExpression", "parameters": "(String rawExpression)", "modifiers": "protected", "return": "String", "body": "protected String cleanExpression(String rawExpression) {\n        if (rawExpression != null && rawExpression.trim().startsWith(MVEL_ESCAPE_SYMBOL)) {\n            return rawExpression.replaceFirst(MVEL_ESCAPE_SYMBOL, \"\");\n        }\n        Optional<JsonNode> optionalJSONNode = JsonUtils.convertFromStringToJSONNode(rawExpression);\n        if (optionalJSONNode.isPresent()) {\n            JsonNode jsonNode = optionalJSONNode.get();\n            if (jsonNode.isTextual() && jsonNode.asText() != null && jsonNode.asText().trim().startsWith(MVEL_ESCAPE_SYMBOL)) {\n                String expression = jsonNode.asText();\n                return expression.replaceFirst(MVEL_ESCAPE_SYMBOL, \"\");\n            }\n        }\n        throw new IllegalArgumentException(MALFORMED_MVEL_EXPRESSION + \"'\" + rawExpression + \"'\");\n    }", "signature": "String cleanExpression(String rawExpression)", "full_signature": "protected String cleanExpression(String rawExpression)", "class_method_signature": "MVELExpressionEvaluator.cleanExpression(String rawExpression)", "testcase": false, "constructor": false, "invocations": ["startsWith", "trim", "replaceFirst", "convertFromStringToJSONNode", "isPresent", "get", "isTextual", "asText", "startsWith", "trim", "asText", "asText", "replaceFirst"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}