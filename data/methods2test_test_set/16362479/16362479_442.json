{"test_class": {"identifier": "ShardSnapshotStateTest", "superclass": "", "interfaces": "", "fields": [], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/persisted/ShardSnapshotStateTest.java"}, "test_case": {"identifier": "testSerialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSerialization() {\n        NormalizedNode<?, ?> expectedNode = ImmutableContainerNodeBuilder.create()\n                .withNodeIdentifier(new YangInstanceIdentifier.NodeIdentifier(TestModel.TEST_QNAME))\n                .withChild(ImmutableNodes.leafNode(TestModel.DESC_QNAME, \"foo\")).build();\n\n        ShardSnapshotState expected = new ShardSnapshotState(new MetadataShardDataTreeSnapshot(expectedNode));\n        ShardSnapshotState cloned = (ShardSnapshotState) SerializationUtils.clone(expected);\n\n        assertNotNull(\"getSnapshot is null\", cloned.getSnapshot());\n        assertEquals(\"getSnapshot type\", MetadataShardDataTreeSnapshot.class, cloned.getSnapshot().getClass());\n        assertEquals(\"getRootNode\", expectedNode,\n                ((MetadataShardDataTreeSnapshot)cloned.getSnapshot()).getRootNode().get());\n    }", "signature": "void testSerialization()", "full_signature": "@Test public void testSerialization()", "class_method_signature": "ShardSnapshotStateTest.testSerialization()", "testcase": true, "constructor": false, "invocations": ["build", "withChild", "withNodeIdentifier", "create", "leafNode", "clone", "assertNotNull", "getSnapshot", "assertEquals", "getClass", "getSnapshot", "assertEquals", "get", "getRootNode", "getSnapshot"]}, "focal_class": {"identifier": "ShardSnapshotState", "superclass": "", "interfaces": "implements Snapshot.State", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "@SuppressFBWarnings(value = \"SE_BAD_FIELD\", justification = \"This field is not Serializable but this class \"\n            + \"implements writeReplace to delegate serialization to a Proxy class and thus instances of this class \"\n            + \"aren't serialized. FindBugs does not recognize this.\")\n    private final @NonNull ShardDataTreeSnapshot snapshot;", "modifier": "@SuppressFBWarnings(value = \"SE_BAD_FIELD\", justification = \"This field is not Serializable but this class \"\n            + \"implements writeReplace to delegate serialization to a Proxy class and thus instances of this class \"\n            + \"aren't serialized. FindBugs does not recognize this.\")\n    private final @NonNull", "type": "ShardDataTreeSnapshot", "declarator": "snapshot", "var_name": "snapshot"}, {"original_string": "private final boolean migrated;", "modifier": "private final", "type": "boolean", "declarator": "migrated", "var_name": "migrated"}], "methods": [{"identifier": "ShardSnapshotState", "parameters": "(final @NonNull ShardDataTreeSnapshot snapshot, final boolean migrated)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " ShardSnapshotState(final @NonNull ShardDataTreeSnapshot snapshot, final boolean migrated)", "full_signature": "@VisibleForTesting public  ShardSnapshotState(final @NonNull ShardDataTreeSnapshot snapshot, final boolean migrated)", "class_method_signature": "ShardSnapshotState.ShardSnapshotState(final @NonNull ShardDataTreeSnapshot snapshot, final boolean migrated)", "testcase": false, "constructor": true}, {"identifier": "ShardSnapshotState", "parameters": "(final @NonNull ShardDataTreeSnapshot snapshot)", "modifiers": "public", "return": "", "signature": " ShardSnapshotState(final @NonNull ShardDataTreeSnapshot snapshot)", "full_signature": "public  ShardSnapshotState(final @NonNull ShardDataTreeSnapshot snapshot)", "class_method_signature": "ShardSnapshotState.ShardSnapshotState(final @NonNull ShardDataTreeSnapshot snapshot)", "testcase": false, "constructor": true}, {"identifier": "getSnapshot", "parameters": "()", "modifiers": "public @NonNull", "return": "ShardDataTreeSnapshot", "signature": "ShardDataTreeSnapshot getSnapshot()", "full_signature": "public @NonNull ShardDataTreeSnapshot getSnapshot()", "class_method_signature": "ShardSnapshotState.getSnapshot()", "testcase": false, "constructor": false}, {"identifier": "needsMigration", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean needsMigration()", "full_signature": "@Override public boolean needsMigration()", "class_method_signature": "ShardSnapshotState.needsMigration()", "testcase": false, "constructor": false}, {"identifier": "writeReplace", "parameters": "()", "modifiers": "private", "return": "Object", "signature": "Object writeReplace()", "full_signature": "private Object writeReplace()", "class_method_signature": "ShardSnapshotState.writeReplace()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/persisted/ShardSnapshotState.java"}, "focal_method": {"identifier": "getSnapshot", "parameters": "()", "modifiers": "public @NonNull", "return": "ShardDataTreeSnapshot", "body": "public @NonNull ShardDataTreeSnapshot getSnapshot() {\n        return snapshot;\n    }", "signature": "ShardDataTreeSnapshot getSnapshot()", "full_signature": "public @NonNull ShardDataTreeSnapshot getSnapshot()", "class_method_signature": "ShardSnapshotState.getSnapshot()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}