{"test_class": {"identifier": "OfxTransactionReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "services/src/test/java/com/greensopinion/finance/services/transaction/OfxTransactionReaderTest.java"}, "test_case": {"identifier": "readNextNonBlankLine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void readNextNonBlankLine() throws IOException {\n\t\ttry (OfxTransactionReader reader = new OfxTransactionReader(\n\t\t\t\tnew ByteArrayInputStream(\"\\n\\r\\none\\n\\rtwo\".getBytes(StandardCharsets.UTF_8)))) {\n\t\t\tassertEquals(\"one\", reader.readNextNonBlankLine());\n\t\t\tassertEquals(\"two\", reader.readNextNonBlankLine());\n\t\t\tassertEquals(null, reader.readNextNonBlankLine());\n\t\t}\n\t}", "signature": "void readNextNonBlankLine()", "full_signature": "@Test public void readNextNonBlankLine()", "class_method_signature": "OfxTransactionReaderTest.readNextNonBlankLine()", "testcase": true, "constructor": false, "invocations": ["getBytes", "assertEquals", "readNextNonBlankLine", "assertEquals", "readNextNonBlankLine", "assertEquals", "readNextNonBlankLine"]}, "focal_class": {"identifier": "OfxTransactionReader", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final String NAME = \"NAME\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"NAME\"", "var_name": "NAME"}, {"original_string": "private static final String MEMO = \"MEMO\";", "modifier": "private static final", "type": "String", "declarator": "MEMO = \"MEMO\"", "var_name": "MEMO"}, {"original_string": "private static final String TRNAMT = \"TRNAMT\";", "modifier": "private static final", "type": "String", "declarator": "TRNAMT = \"TRNAMT\"", "var_name": "TRNAMT"}, {"original_string": "private static final String DTPOSTED = \"DTPOSTED\";", "modifier": "private static final", "type": "String", "declarator": "DTPOSTED = \"DTPOSTED\"", "var_name": "DTPOSTED"}, {"original_string": "private static final String STMTTRN = \"STMTTRN\";", "modifier": "private static final", "type": "String", "declarator": "STMTTRN = \"STMTTRN\"", "var_name": "STMTTRN"}, {"original_string": "private static final String ACCTID = \"ACCTID\";", "modifier": "private static final", "type": "String", "declarator": "ACCTID = \"ACCTID\"", "var_name": "ACCTID"}, {"original_string": "private static final String TAG_BANKACCTFROM = \"BANKACCTFROM\";", "modifier": "private static final", "type": "String", "declarator": "TAG_BANKACCTFROM = \"BANKACCTFROM\"", "var_name": "TAG_BANKACCTFROM"}, {"original_string": "private static final Object TAG_CCACCTFROM = \"CCACCTFROM\";", "modifier": "private static final", "type": "Object", "declarator": "TAG_CCACCTFROM = \"CCACCTFROM\"", "var_name": "TAG_CCACCTFROM"}, {"original_string": "private static final String CHARSET_NAME_CP1252 = \"Cp1252\";", "modifier": "private static final", "type": "String", "declarator": "CHARSET_NAME_CP1252 = \"Cp1252\"", "var_name": "CHARSET_NAME_CP1252"}, {"original_string": "private final LookAheadReader reader;", "modifier": "private final", "type": "LookAheadReader", "declarator": "reader", "var_name": "reader"}], "methods": [{"identifier": "OfxTransactionReader", "parameters": "(InputStream inputStream)", "modifiers": "public", "return": "", "signature": " OfxTransactionReader(InputStream inputStream)", "full_signature": "public  OfxTransactionReader(InputStream inputStream)", "class_method_signature": "OfxTransactionReader.OfxTransactionReader(InputStream inputStream)", "testcase": false, "constructor": true}, {"identifier": "transactions", "parameters": "()", "modifiers": "public", "return": "List<Transaction>", "signature": "List<Transaction> transactions()", "full_signature": "public List<Transaction> transactions()", "class_method_signature": "OfxTransactionReader.transactions()", "testcase": false, "constructor": false}, {"identifier": "readTransaction", "parameters": "(SgmlReader sgmlReader, String tagName, String accountNumber)", "modifiers": "private", "return": "Transaction", "signature": "Transaction readTransaction(SgmlReader sgmlReader, String tagName, String accountNumber)", "full_signature": "private Transaction readTransaction(SgmlReader sgmlReader, String tagName, String accountNumber)", "class_method_signature": "OfxTransactionReader.readTransaction(SgmlReader sgmlReader, String tagName, String accountNumber)", "testcase": false, "constructor": false}, {"identifier": "readTransactionAmount", "parameters": "(String value)", "modifiers": "private", "return": "Long", "signature": "Long readTransactionAmount(String value)", "full_signature": "private Long readTransactionAmount(String value)", "class_method_signature": "OfxTransactionReader.readTransactionAmount(String value)", "testcase": false, "constructor": false}, {"identifier": "readTransactionDate", "parameters": "(String value)", "modifiers": "private", "return": "Date", "signature": "Date readTransactionDate(String value)", "full_signature": "private Date readTransactionDate(String value)", "class_method_signature": "OfxTransactionReader.readTransactionDate(String value)", "testcase": false, "constructor": false}, {"identifier": "readAccountNumber", "parameters": "(SgmlReader sgmlReader, String tagName)", "modifiers": "private", "return": "String", "signature": "String readAccountNumber(SgmlReader sgmlReader, String tagName)", "full_signature": "private String readAccountNumber(SgmlReader sgmlReader, String tagName)", "class_method_signature": "OfxTransactionReader.readAccountNumber(SgmlReader sgmlReader, String tagName)", "testcase": false, "constructor": false}, {"identifier": "isCloseTag", "parameters": "(Token token, String tagName)", "modifiers": "private", "return": "boolean", "signature": "boolean isCloseTag(Token token, String tagName)", "full_signature": "private boolean isCloseTag(Token token, String tagName)", "class_method_signature": "OfxTransactionReader.isCloseTag(Token token, String tagName)", "testcase": false, "constructor": false}, {"identifier": "readHeader", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void readHeader()", "full_signature": "private void readHeader()", "class_method_signature": "OfxTransactionReader.readHeader()", "testcase": false, "constructor": false}, {"identifier": "advanceToFirstNonHeaderLine", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void advanceToFirstNonHeaderLine()", "full_signature": "private void advanceToFirstNonHeaderLine()", "class_method_signature": "OfxTransactionReader.advanceToFirstNonHeaderLine()", "testcase": false, "constructor": false}, {"identifier": "skipBlankLines", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void skipBlankLines()", "full_signature": "private void skipBlankLines()", "class_method_signature": "OfxTransactionReader.skipBlankLines()", "testcase": false, "constructor": false}, {"identifier": "readNextNonBlankLine", "parameters": "()", "modifiers": "", "return": "String", "signature": "String readNextNonBlankLine()", "full_signature": " String readNextNonBlankLine()", "class_method_signature": "OfxTransactionReader.readNextNonBlankLine()", "testcase": false, "constructor": false}, {"identifier": "checkValidFormat", "parameters": "(String expected, String line)", "modifiers": "private", "return": "void", "signature": "void checkValidFormat(String expected, String line)", "full_signature": "private void checkValidFormat(String expected, String line)", "class_method_signature": "OfxTransactionReader.checkValidFormat(String expected, String line)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "OfxTransactionReader.close()", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/greensopinion/finance/services/transaction/OfxTransactionReader.java"}, "focal_method": {"identifier": "readNextNonBlankLine", "parameters": "()", "modifiers": "", "return": "String", "body": "String readNextNonBlankLine() throws IOException {\n\t\tskipBlankLines();\n\t\treturn reader.readLine();\n\t}", "signature": "String readNextNonBlankLine()", "full_signature": " String readNextNonBlankLine()", "class_method_signature": "OfxTransactionReader.readNextNonBlankLine()", "testcase": false, "constructor": false, "invocations": ["skipBlankLines", "readLine"]}, "repository": {"repo_id": 54854741, "url": "https://github.com/greensopinion/greenbeans", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 30, "size": 1684, "license": "licensed"}}