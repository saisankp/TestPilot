{"test_class": {"identifier": "ElasticsearchConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private ElasticsearchConfig elasticSearchConfig;", "modifier": "@InjectMocks\n    private", "type": "ElasticsearchConfig", "declarator": "elasticSearchConfig", "var_name": "elasticSearchConfig"}, {"original_string": "@Mock\n    private ElasticSearchProperties elasticSearchProperties;", "modifier": "@Mock\n    private", "type": "ElasticSearchProperties", "declarator": "elasticSearchProperties", "var_name": "elasticSearchProperties"}, {"original_string": "private ElasticSearchProperties.Config config;", "modifier": "private", "type": "ElasticSearchProperties.Config", "declarator": "config", "var_name": "config"}], "file": "modelservice/src/test/java/com/expedia/adaptivealerting/modelservice/elasticsearch/ElasticsearchConfigTest.java"}, "test_case": {"identifier": "testRestTemplate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRestTemplate() {\n        when(elasticSearchProperties.getUrls()).thenReturn(\"localhost:8000\");\n        when(elasticSearchProperties.getConfig()).thenReturn(config);\n        val elasticsearchRestTemplate = elasticSearchConfig.elasticsearchTemplate();\n        assertNotNull(elasticsearchRestTemplate);\n    }", "signature": "void testRestTemplate()", "full_signature": "@Test public void testRestTemplate()", "class_method_signature": "ElasticsearchConfigTest.testRestTemplate()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getUrls", "thenReturn", "when", "getConfig", "elasticsearchTemplate", "assertNotNull"]}, "focal_class": {"identifier": "ElasticsearchConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ElasticSearchProperties elasticSearchProperties;", "modifier": "@Autowired\n    private", "type": "ElasticSearchProperties", "declarator": "elasticSearchProperties", "var_name": "elasticSearchProperties"}], "methods": [{"identifier": "elasticsearchTemplate", "parameters": "()", "modifiers": "@Bean public", "return": "ElasticsearchRestTemplate", "signature": "ElasticsearchRestTemplate elasticsearchTemplate()", "full_signature": "@Bean public ElasticsearchRestTemplate elasticsearchTemplate()", "class_method_signature": "ElasticsearchConfig.elasticsearchTemplate()", "testcase": false, "constructor": false}, {"identifier": "client", "parameters": "()", "modifiers": "@Bean(destroyMethod = \"close\") public", "return": "RestHighLevelClient", "signature": "RestHighLevelClient client()", "full_signature": "@Bean(destroyMethod = \"close\") public RestHighLevelClient client()", "class_method_signature": "ElasticsearchConfig.client()", "testcase": false, "constructor": false}, {"identifier": "buildRestClientBuilder", "parameters": "()", "modifiers": "private", "return": "RestClientBuilder", "signature": "RestClientBuilder buildRestClientBuilder()", "full_signature": "private RestClientBuilder buildRestClientBuilder()", "class_method_signature": "ElasticsearchConfig.buildRestClientBuilder()", "testcase": false, "constructor": false}], "file": "modelservice/src/main/java/com/expedia/adaptivealerting/modelservice/elasticsearch/ElasticsearchConfig.java"}, "focal_method": {"identifier": "elasticsearchTemplate", "parameters": "()", "modifiers": "@Bean public", "return": "ElasticsearchRestTemplate", "body": "@Bean\n    public ElasticsearchRestTemplate elasticsearchTemplate() {\n        return new ElasticsearchRestTemplate(client());\n    }", "signature": "ElasticsearchRestTemplate elasticsearchTemplate()", "full_signature": "@Bean public ElasticsearchRestTemplate elasticsearchTemplate()", "class_method_signature": "ElasticsearchConfig.elasticsearchTemplate()", "testcase": false, "constructor": false, "invocations": ["client"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}