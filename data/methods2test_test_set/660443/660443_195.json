{"test_class": {"identifier": "StandardAtomGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Font                  font          = new Font(\"Verdana\", Font.PLAIN, 12);", "modifier": "private final", "type": "Font", "declarator": "font          = new Font(\"Verdana\", Font.PLAIN, 12)", "var_name": "font"}, {"original_string": "private final TextOutline           element       = new TextOutline(\"N\", font);", "modifier": "private final", "type": "TextOutline", "declarator": "element       = new TextOutline(\"N\", font)", "var_name": "element"}, {"original_string": "private final TextOutline           hydrogen      = new TextOutline(\"H\", font);", "modifier": "private final", "type": "TextOutline", "declarator": "hydrogen      = new TextOutline(\"H\", font)", "var_name": "hydrogen"}, {"original_string": "private final StandardAtomGenerator atomGenerator = new StandardAtomGenerator(font);", "modifier": "private final", "type": "StandardAtomGenerator", "declarator": "atomGenerator = new StandardAtomGenerator(font)", "var_name": "atomGenerator"}], "file": "display/renderbasic/src/test/java/org/openscience/cdk/renderer/generators/standard/StandardAtomGeneratorTest.java"}, "test_case": {"identifier": "hydrogenCountDodgesElement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void hydrogenCountDodgesElement() {\n        AtomSymbol symbol = atomGenerator.generatePeriodicSymbol(7, 2, -1, 0, 0, HydrogenPosition.Left, null);\n        List<Shape> outlines = symbol.getOutlines();\n        assertThat(outlines.size(), is(3));\n        Shape elementShape = outlines.get(0);\n        Shape hydrogenShape = outlines.get(1);\n        Shape hydrogenCountShape = outlines.get(2);\n\n        assertThat(hydrogenCountShape.getBounds2D().getMaxX(), lessThan(elementShape.getBounds2D().getMinX()));\n        assertThat(hydrogenShape.getBounds2D().getMaxX(), lessThan(hydrogenCountShape.getBounds2D().getMinX()));\n    }", "signature": "void hydrogenCountDodgesElement()", "full_signature": "@Test public void hydrogenCountDodgesElement()", "class_method_signature": "StandardAtomGeneratorTest.hydrogenCountDodgesElement()", "testcase": true, "constructor": false, "invocations": ["generatePeriodicSymbol", "getOutlines", "assertThat", "size", "is", "get", "get", "get", "assertThat", "getMaxX", "getBounds2D", "lessThan", "getMinX", "getBounds2D", "assertThat", "getMaxX", "getBounds2D", "lessThan", "getMinX", "getBounds2D"]}, "focal_class": {"identifier": "StandardAtomGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static double DEFAULT_ADJUNCT_SPACING_RATIO = 0.15d;", "modifier": "private final static", "type": "double", "declarator": "DEFAULT_ADJUNCT_SPACING_RATIO = 0.15d", "var_name": "DEFAULT_ADJUNCT_SPACING_RATIO"}, {"original_string": "private final static double DEFAULT_SUBSCRIPT_SIZE        = 0.6d;", "modifier": "private final static", "type": "double", "declarator": "DEFAULT_SUBSCRIPT_SIZE        = 0.6d", "var_name": "DEFAULT_SUBSCRIPT_SIZE"}, {"original_string": "private final Font font;", "modifier": "private final", "type": "Font", "declarator": "font", "var_name": "font"}, {"original_string": "private final double scriptSize;", "modifier": "private final", "type": "double", "declarator": "scriptSize", "var_name": "scriptSize"}, {"original_string": "private final double padding;", "modifier": "private final", "type": "double", "declarator": "padding", "var_name": "padding"}, {"original_string": "private final TextOutline defaultHydrogenLabel;", "modifier": "private final", "type": "TextOutline", "declarator": "defaultHydrogenLabel", "var_name": "defaultHydrogenLabel"}, {"original_string": "private static final char BULLET = '\u2022', // '\\u2022'\n            PLUS                     = '+', MINUS = '\u2212'; /", "modifier": "private static final", "type": "char", "declarator": "BULLET = '\u2022', ", "var_name": "BULLET"}], "methods": [{"identifier": "StandardAtomGenerator", "parameters": "(Font font)", "modifiers": "", "return": "", "signature": " StandardAtomGenerator(Font font)", "full_signature": "  StandardAtomGenerator(Font font)", "class_method_signature": "StandardAtomGenerator.StandardAtomGenerator(Font font)", "testcase": false, "constructor": true}, {"identifier": "StandardAtomGenerator", "parameters": "(Font font, double adjunctSpacing, double scriptSize)", "modifiers": "private", "return": "", "signature": " StandardAtomGenerator(Font font, double adjunctSpacing, double scriptSize)", "full_signature": "private  StandardAtomGenerator(Font font, double adjunctSpacing, double scriptSize)", "class_method_signature": "StandardAtomGenerator.StandardAtomGenerator(Font font, double adjunctSpacing, double scriptSize)", "testcase": false, "constructor": true}, {"identifier": "generateSymbol", "parameters": "(IAtomContainer container, IAtom atom, HydrogenPosition position, RendererModel model)", "modifiers": "", "return": "AtomSymbol", "signature": "AtomSymbol generateSymbol(IAtomContainer container, IAtom atom, HydrogenPosition position, RendererModel model)", "full_signature": " AtomSymbol generateSymbol(IAtomContainer container, IAtom atom, HydrogenPosition position, RendererModel model)", "class_method_signature": "StandardAtomGenerator.generateSymbol(IAtomContainer container, IAtom atom, HydrogenPosition position, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "generatePseudoSymbol", "parameters": "(String label, HydrogenPosition position, RendererModel model)", "modifiers": "", "return": "AtomSymbol", "signature": "AtomSymbol generatePseudoSymbol(String label, HydrogenPosition position, RendererModel model)", "full_signature": " AtomSymbol generatePseudoSymbol(String label, HydrogenPosition position, RendererModel model)", "class_method_signature": "StandardAtomGenerator.generatePseudoSymbol(String label, HydrogenPosition position, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "isUpperCase", "parameters": "(char c)", "modifiers": "private", "return": "boolean", "signature": "boolean isUpperCase(char c)", "full_signature": "private boolean isUpperCase(char c)", "class_method_signature": "StandardAtomGenerator.isUpperCase(char c)", "testcase": false, "constructor": false}, {"identifier": "isLowerCase", "parameters": "(char c)", "modifiers": "private", "return": "boolean", "signature": "boolean isLowerCase(char c)", "full_signature": "private boolean isLowerCase(char c)", "class_method_signature": "StandardAtomGenerator.isLowerCase(char c)", "testcase": false, "constructor": false}, {"identifier": "isDigit", "parameters": "(char c)", "modifiers": "private", "return": "boolean", "signature": "boolean isDigit(char c)", "full_signature": "private boolean isDigit(char c)", "class_method_signature": "StandardAtomGenerator.isDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "generateAbbreviatedSymbol", "parameters": "(String label, HydrogenPosition position)", "modifiers": "", "return": "AtomSymbol", "signature": "AtomSymbol generateAbbreviatedSymbol(String label, HydrogenPosition position)", "full_signature": " AtomSymbol generateAbbreviatedSymbol(String label, HydrogenPosition position)", "class_method_signature": "StandardAtomGenerator.generateAbbreviatedSymbol(String label, HydrogenPosition position)", "testcase": false, "constructor": false}, {"identifier": "generateAbbreviationSymbol", "parameters": "(List<String> tokens, HydrogenPosition position)", "modifiers": "", "return": "AtomSymbol", "signature": "AtomSymbol generateAbbreviationSymbol(List<String> tokens, HydrogenPosition position)", "full_signature": " AtomSymbol generateAbbreviationSymbol(List<String> tokens, HydrogenPosition position)", "class_method_signature": "StandardAtomGenerator.generateAbbreviationSymbol(List<String> tokens, HydrogenPosition position)", "testcase": false, "constructor": false}, {"identifier": "generatePeriodicSymbol", "parameters": "(final int number, final int hydrogens, int mass, final int charge,\n                                      final int unpaired, HydrogenPosition position,\n                                      RendererModel opts)", "modifiers": "", "return": "AtomSymbol", "signature": "AtomSymbol generatePeriodicSymbol(final int number, final int hydrogens, int mass, final int charge,\n                                      final int unpaired, HydrogenPosition position,\n                                      RendererModel opts)", "full_signature": " AtomSymbol generatePeriodicSymbol(final int number, final int hydrogens, int mass, final int charge,\n                                      final int unpaired, HydrogenPosition position,\n                                      RendererModel opts)", "class_method_signature": "StandardAtomGenerator.generatePeriodicSymbol(final int number, final int hydrogens, int mass, final int charge,\n                                      final int unpaired, HydrogenPosition position,\n                                      RendererModel opts)", "testcase": false, "constructor": false}, {"identifier": "positionHydrogenLabel", "parameters": "(HydrogenPosition position, TextOutline element, TextOutline hydrogen)", "modifiers": "", "return": "TextOutline", "signature": "TextOutline positionHydrogenLabel(HydrogenPosition position, TextOutline element, TextOutline hydrogen)", "full_signature": " TextOutline positionHydrogenLabel(HydrogenPosition position, TextOutline element, TextOutline hydrogen)", "class_method_signature": "StandardAtomGenerator.positionHydrogenLabel(HydrogenPosition position, TextOutline element, TextOutline hydrogen)", "testcase": false, "constructor": false}, {"identifier": "positionSubscript", "parameters": "(TextOutline label, TextOutline subscript)", "modifiers": "", "return": "TextOutline", "signature": "TextOutline positionSubscript(TextOutline label, TextOutline subscript)", "full_signature": " TextOutline positionSubscript(TextOutline label, TextOutline subscript)", "class_method_signature": "StandardAtomGenerator.positionSubscript(TextOutline label, TextOutline subscript)", "testcase": false, "constructor": false}, {"identifier": "positionSuperscript", "parameters": "(TextOutline label, TextOutline superscript)", "modifiers": "", "return": "TextOutline", "signature": "TextOutline positionSuperscript(TextOutline label, TextOutline superscript)", "full_signature": " TextOutline positionSuperscript(TextOutline label, TextOutline superscript)", "class_method_signature": "StandardAtomGenerator.positionSuperscript(TextOutline label, TextOutline superscript)", "testcase": false, "constructor": false}, {"identifier": "positionAfter", "parameters": "(TextOutline before, TextOutline after)", "modifiers": "", "return": "TextOutline", "signature": "TextOutline positionAfter(TextOutline before, TextOutline after)", "full_signature": " TextOutline positionAfter(TextOutline before, TextOutline after)", "class_method_signature": "StandardAtomGenerator.positionAfter(TextOutline before, TextOutline after)", "testcase": false, "constructor": false}, {"identifier": "positionChargeLabel", "parameters": "(int hydrogens,\n                                    HydrogenPosition position,\n                                    TextOutline charge,\n                                    TextOutline element,\n                                    TextOutline hydrogen)", "modifiers": "", "return": "TextOutline", "signature": "TextOutline positionChargeLabel(int hydrogens,\n                                    HydrogenPosition position,\n                                    TextOutline charge,\n                                    TextOutline element,\n                                    TextOutline hydrogen)", "full_signature": " TextOutline positionChargeLabel(int hydrogens,\n                                    HydrogenPosition position,\n                                    TextOutline charge,\n                                    TextOutline element,\n                                    TextOutline hydrogen)", "class_method_signature": "StandardAtomGenerator.positionChargeLabel(int hydrogens,\n                                    HydrogenPosition position,\n                                    TextOutline charge,\n                                    TextOutline element,\n                                    TextOutline hydrogen)", "testcase": false, "constructor": false}, {"identifier": "positionMassLabel", "parameters": "(TextOutline massLabel, TextOutline elementLabel)", "modifiers": "", "return": "TextOutline", "signature": "TextOutline positionMassLabel(TextOutline massLabel, TextOutline elementLabel)", "full_signature": " TextOutline positionMassLabel(TextOutline massLabel, TextOutline elementLabel)", "class_method_signature": "StandardAtomGenerator.positionMassLabel(TextOutline massLabel, TextOutline elementLabel)", "testcase": false, "constructor": false}, {"identifier": "hydrogenXDodge", "parameters": "(int hydrogens, int mass, TextOutline elementLabel, TextOutline hydrogenLabel,\n                                  TextOutline hydrogenCount, TextOutline massLabel)", "modifiers": "private", "return": "double", "signature": "double hydrogenXDodge(int hydrogens, int mass, TextOutline elementLabel, TextOutline hydrogenLabel,\n                                  TextOutline hydrogenCount, TextOutline massLabel)", "full_signature": "private double hydrogenXDodge(int hydrogens, int mass, TextOutline elementLabel, TextOutline hydrogenLabel,\n                                  TextOutline hydrogenCount, TextOutline massLabel)", "class_method_signature": "StandardAtomGenerator.hydrogenXDodge(int hydrogens, int mass, TextOutline elementLabel, TextOutline hydrogenLabel,\n                                  TextOutline hydrogenCount, TextOutline massLabel)", "testcase": false, "constructor": false}, {"identifier": "isMajorIsotope", "parameters": "(int number, int mass)", "modifiers": "private", "return": "boolean", "signature": "boolean isMajorIsotope(int number, int mass)", "full_signature": "private boolean isMajorIsotope(int number, int mass)", "class_method_signature": "StandardAtomGenerator.isMajorIsotope(int number, int mass)", "testcase": false, "constructor": false}, {"identifier": "unboxSafely", "parameters": "(Integer value, int defaultValue)", "modifiers": "private static", "return": "int", "signature": "int unboxSafely(Integer value, int defaultValue)", "full_signature": "private static int unboxSafely(Integer value, int defaultValue)", "class_method_signature": "StandardAtomGenerator.unboxSafely(Integer value, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "chargeAdjunctText", "parameters": "(final int charge, final int unpaired)", "modifiers": "static", "return": "String", "signature": "String chargeAdjunctText(final int charge, final int unpaired)", "full_signature": "static String chargeAdjunctText(final int charge, final int unpaired)", "class_method_signature": "StandardAtomGenerator.chargeAdjunctText(final int charge, final int unpaired)", "testcase": false, "constructor": false}, {"identifier": "accessPseudoLabel", "parameters": "(IPseudoAtom atom, String defaultLabel)", "modifiers": "static", "return": "String", "signature": "String accessPseudoLabel(IPseudoAtom atom, String defaultLabel)", "full_signature": "static String accessPseudoLabel(IPseudoAtom atom, String defaultLabel)", "class_method_signature": "StandardAtomGenerator.accessPseudoLabel(IPseudoAtom atom, String defaultLabel)", "testcase": false, "constructor": false}], "file": "display/renderbasic/src/main/java/org/openscience/cdk/renderer/generators/standard/StandardAtomGenerator.java"}, "focal_method": {"identifier": "generatePeriodicSymbol", "parameters": "(final int number, final int hydrogens, int mass, final int charge,\n                                      final int unpaired, HydrogenPosition position,\n                                      RendererModel opts)", "modifiers": "", "return": "AtomSymbol", "body": "AtomSymbol generatePeriodicSymbol(final int number, final int hydrogens, int mass, final int charge,\n                                      final int unpaired, HydrogenPosition position,\n                                      RendererModel opts) {\n\n        Font myfont = font;\n        final String label;\n        switch (number) {\n            case 0:\n                label = \"*\";\n                myfont = font.deriveFont(Font.BOLD);\n                break;\n            case 1:\n                if (mass == 2 && opts.get(DeuteriumSymbol.class)) {\n                    label = \"D\";\n                    mass = 0;\n                } else {\n                    label = Elements.ofNumber(number).symbol();\n                }\n                break;\n            default:\n                label = Elements.ofNumber(number).symbol();\n                break;\n        }\n        TextOutline element = new TextOutline(label, myfont);\n        TextOutline hydrogenAdjunct = defaultHydrogenLabel;\n\n        // the hydrogen count, charge, and mass adjuncts are script size\n        TextOutline hydrogenCount = new TextOutline(Integer.toString(hydrogens), font).resize(scriptSize, scriptSize);\n        TextOutline chargeAdjunct = new TextOutline(chargeAdjunctText(charge, unpaired), font).resize(scriptSize,\n                                                                                                      scriptSize);\n        TextOutline massAdjunct = new TextOutline(Integer.toString(mass), font).resize(scriptSize, scriptSize);\n\n        // position each adjunct relative to the element label and each other\n        hydrogenAdjunct = positionHydrogenLabel(position, element, hydrogenAdjunct);\n        hydrogenCount = positionSubscript(hydrogenAdjunct, hydrogenCount);\n        chargeAdjunct = positionChargeLabel(hydrogens, position, chargeAdjunct, element, hydrogenAdjunct);\n        massAdjunct = positionMassLabel(massAdjunct, element);\n\n        // when the hydrogen label is positioned to the left we may need to nudge it\n        // over to account for the hydrogen count and/or the mass adjunct colliding\n        // with the element label, we also need to move the charge too '+H3N'\n        if (position == Left) {\n            final double nudgeX = hydrogenXDodge(hydrogens, mass, element, hydrogenAdjunct, hydrogenCount, massAdjunct);\n            hydrogenAdjunct = hydrogenAdjunct.translate(nudgeX, 0);\n            hydrogenCount = hydrogenCount.translate(nudgeX, 0);\n            chargeAdjunct = chargeAdjunct.translate(nudgeX, 0);\n        }\n\n        final List<TextOutline> adjuncts = new ArrayList<TextOutline>(4);\n\n        if (hydrogens > 0) adjuncts.add(hydrogenAdjunct);\n        if (hydrogens > 1) adjuncts.add(hydrogenCount);\n        if (charge != 0 || unpaired > 0) adjuncts.add(chargeAdjunct);\n        if (mass > 0) adjuncts.add(massAdjunct);\n\n        return new AtomSymbol(element, adjuncts);\n    }", "signature": "AtomSymbol generatePeriodicSymbol(final int number, final int hydrogens, int mass, final int charge,\n                                      final int unpaired, HydrogenPosition position,\n                                      RendererModel opts)", "full_signature": " AtomSymbol generatePeriodicSymbol(final int number, final int hydrogens, int mass, final int charge,\n                                      final int unpaired, HydrogenPosition position,\n                                      RendererModel opts)", "class_method_signature": "StandardAtomGenerator.generatePeriodicSymbol(final int number, final int hydrogens, int mass, final int charge,\n                                      final int unpaired, HydrogenPosition position,\n                                      RendererModel opts)", "testcase": false, "constructor": false, "invocations": ["deriveFont", "get", "symbol", "ofNumber", "symbol", "ofNumber", "resize", "toString", "resize", "chargeAdjunctText", "resize", "toString", "positionHydrogenLabel", "positionSubscript", "positionChargeLabel", "positionMassLabel", "hydrogenXDodge", "translate", "translate", "translate", "add", "add", "add", "add"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}