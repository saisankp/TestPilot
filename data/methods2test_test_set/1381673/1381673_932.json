{"test_class": {"identifier": "RuleSheetParserUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-decisiontables/src/test/java/org/drools/decisiontable/parser/RuleSheetParserUtilTest.java"}, "test_case": {"identifier": "testRowColumnToCellNAme", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRowColumnToCellNAme() {\n        String cellName = RuleSheetParserUtil.rc2name( 0, 0 );\n        assertEquals( \"A1\", cellName );\n\n        cellName = RuleSheetParserUtil.rc2name( 0, 10 );\n        assertEquals( \"K1\", cellName );\n\n        cellName = RuleSheetParserUtil.rc2name( 0, 42 );\n        assertEquals( \"AQ1\", cellName );\n\n        cellName = RuleSheetParserUtil.rc2name( 9, 27 );\n        assertEquals( \"AB10\", cellName );\n\n        cellName = RuleSheetParserUtil.rc2name( 99, 53 );\n        assertEquals( \"BB100\", cellName );\n    }", "signature": "void testRowColumnToCellNAme()", "full_signature": "@Test public void testRowColumnToCellNAme()", "class_method_signature": "RuleSheetParserUtilTest.testRowColumnToCellNAme()", "testcase": true, "constructor": false, "invocations": ["rc2name", "assertEquals", "rc2name", "assertEquals", "rc2name", "assertEquals", "rc2name", "assertEquals", "rc2name", "assertEquals"]}, "focal_class": {"identifier": "RuleSheetParserUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "RuleSheetParserUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " RuleSheetParserUtil()", "full_signature": "private  RuleSheetParserUtil()", "class_method_signature": "RuleSheetParserUtil.RuleSheetParserUtil()", "testcase": false, "constructor": true}, {"identifier": "getRuleName", "parameters": "(final String ruleRow)", "modifiers": "public static", "return": "String", "signature": "String getRuleName(final String ruleRow)", "full_signature": "public static String getRuleName(final String ruleRow)", "class_method_signature": "RuleSheetParserUtil.getRuleName(final String ruleRow)", "testcase": false, "constructor": false}, {"identifier": "invalidRuleTableDef", "parameters": "(final String ruleRow)", "modifiers": "private static", "return": "void", "signature": "void invalidRuleTableDef(final String ruleRow)", "full_signature": "private static void invalidRuleTableDef(final String ruleRow)", "class_method_signature": "RuleSheetParserUtil.invalidRuleTableDef(final String ruleRow)", "testcase": false, "constructor": false}, {"identifier": "getImportList", "parameters": "(final List<String> importCells)", "modifiers": "public static", "return": "List<Import>", "signature": "List<Import> getImportList(final List<String> importCells)", "full_signature": "public static List<Import> getImportList(final List<String> importCells)", "class_method_signature": "RuleSheetParserUtil.getImportList(final List<String> importCells)", "testcase": false, "constructor": false}, {"identifier": "getVariableList", "parameters": "( final List<String> variableCells )", "modifiers": "public static", "return": "List<Global>", "signature": "List<Global> getVariableList( final List<String> variableCells )", "full_signature": "public static List<Global> getVariableList( final List<String> variableCells )", "class_method_signature": "RuleSheetParserUtil.getVariableList( final List<String> variableCells )", "testcase": false, "constructor": false}, {"identifier": "isStringMeaningTrue", "parameters": "(String property)", "modifiers": "public static", "return": "boolean", "signature": "boolean isStringMeaningTrue(String property)", "full_signature": "public static boolean isStringMeaningTrue(String property)", "class_method_signature": "RuleSheetParserUtil.isStringMeaningTrue(String property)", "testcase": false, "constructor": false}, {"identifier": "rc2name", "parameters": "( int row, int col )", "modifiers": "public static", "return": "String", "signature": "String rc2name( int row, int col )", "full_signature": "public static String rc2name( int row, int col )", "class_method_signature": "RuleSheetParserUtil.rc2name( int row, int col )", "testcase": false, "constructor": false}], "file": "drools-decisiontables/src/main/java/org/drools/decisiontable/parser/RuleSheetParserUtil.java"}, "focal_method": {"identifier": "rc2name", "parameters": "( int row, int col )", "modifiers": "public static", "return": "String", "body": "public static String rc2name( int row, int col ){\n        StringBuilder sb = new StringBuilder();\n        int b = 26;\n        int p = 1;\n        if( col >= b  ){\n            col -= b;\n            p *= b;\n        }\n        if( col >= b*b ){\n            col -= b*b;\n            p *= b;\n        }\n        while( p > 0 ){\n            sb.append( (char)(col/p + (int)'A') );\n            col %= p;\n            p /= b;\n        }\n        sb.append( row + 1 );\n        return sb.toString();\n    }", "signature": "String rc2name( int row, int col )", "full_signature": "public static String rc2name( int row, int col )", "class_method_signature": "RuleSheetParserUtil.rc2name( int row, int col )", "testcase": false, "constructor": false, "invocations": ["append", "append", "toString"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}