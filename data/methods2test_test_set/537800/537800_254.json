{"test_class": {"identifier": "InstrumentedExecutorServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(InstrumentedExecutorServiceTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(InstrumentedExecutorServiceTest.class)", "var_name": "LOGGER"}, {"original_string": "private ExecutorService executor;", "modifier": "private", "type": "ExecutorService", "declarator": "executor", "var_name": "executor"}, {"original_string": "private MetricRegistry registry;", "modifier": "private", "type": "MetricRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private InstrumentedExecutorService instrumentedExecutorService;", "modifier": "private", "type": "InstrumentedExecutorService", "declarator": "instrumentedExecutorService", "var_name": "instrumentedExecutorService"}, {"original_string": "private Meter submitted;", "modifier": "private", "type": "Meter", "declarator": "submitted", "var_name": "submitted"}, {"original_string": "private Counter running;", "modifier": "private", "type": "Counter", "declarator": "running", "var_name": "running"}, {"original_string": "private Meter completed;", "modifier": "private", "type": "Meter", "declarator": "completed", "var_name": "completed"}, {"original_string": "private Timer duration;", "modifier": "private", "type": "Timer", "declarator": "duration", "var_name": "duration"}, {"original_string": "private Timer idle;", "modifier": "private", "type": "Timer", "declarator": "idle", "var_name": "idle"}], "file": "metrics-core/src/test/java/com/codahale/metrics/InstrumentedExecutorServiceTest.java"}, "test_case": {"identifier": "reportsTasksInformationForRunnable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reportsTasksInformationForRunnable() throws Exception {\n\n        assertThat(submitted.getCount()).isEqualTo(0);\n        assertThat(running.getCount()).isEqualTo(0);\n        assertThat(completed.getCount()).isEqualTo(0);\n        assertThat(duration.getCount()).isEqualTo(0);\n        assertThat(idle.getCount()).isEqualTo(0);\n\n        Runnable runnable = () -> {\n            assertThat(submitted.getCount()).isEqualTo(1);\n            assertThat(running.getCount()).isEqualTo(1);\n            assertThat(completed.getCount()).isEqualTo(0);\n            assertThat(duration.getCount()).isEqualTo(0);\n            assertThat(idle.getCount()).isEqualTo(1);\n        };\n\n        Future<?> theFuture = instrumentedExecutorService.submit(runnable);\n\n        theFuture.get();\n\n        assertThat(submitted.getCount()).isEqualTo(1);\n        assertThat(running.getCount()).isEqualTo(0);\n        assertThat(completed.getCount()).isEqualTo(1);\n        assertThat(duration.getCount()).isEqualTo(1);\n        assertThat(duration.getSnapshot().size()).isEqualTo(1);\n        assertThat(idle.getCount()).isEqualTo(1);\n        assertThat(idle.getSnapshot().size()).isEqualTo(1);\n    }", "signature": "void reportsTasksInformationForRunnable()", "full_signature": "@Test public void reportsTasksInformationForRunnable()", "class_method_signature": "InstrumentedExecutorServiceTest.reportsTasksInformationForRunnable()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getCount", "isEqualTo", "assertThat", "getCount", "isEqualTo", "assertThat", "getCount", "isEqualTo", "assertThat", "getCount", "isEqualTo", "assertThat", "getCount", "isEqualTo", "assertThat", "getCount", "isEqualTo", "assertThat", "getCount", "isEqualTo", "assertThat", "getCount", "isEqualTo", "assertThat", "getCount", "isEqualTo", "assertThat", "getCount", "submit", "get", "isEqualTo", "assertThat", "getCount", "isEqualTo", "assertThat", "getCount", "isEqualTo", "assertThat", "getCount", "isEqualTo", "assertThat", "getCount", "isEqualTo", "assertThat", "size", "getSnapshot", "isEqualTo", "assertThat", "getCount", "isEqualTo", "assertThat", "size", "getSnapshot"]}, "focal_class": {"identifier": "InstrumentedExecutorService", "superclass": "", "interfaces": "implements ExecutorService", "fields": [{"original_string": "private static final AtomicLong NAME_COUNTER = new AtomicLong();", "modifier": "private static final", "type": "AtomicLong", "declarator": "NAME_COUNTER = new AtomicLong()", "var_name": "NAME_COUNTER"}, {"original_string": "private final ExecutorService delegate;", "modifier": "private final", "type": "ExecutorService", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private final Meter submitted;", "modifier": "private final", "type": "Meter", "declarator": "submitted", "var_name": "submitted"}, {"original_string": "private final Counter running;", "modifier": "private final", "type": "Counter", "declarator": "running", "var_name": "running"}, {"original_string": "private final Meter completed;", "modifier": "private final", "type": "Meter", "declarator": "completed", "var_name": "completed"}, {"original_string": "private final Timer idle;", "modifier": "private final", "type": "Timer", "declarator": "idle", "var_name": "idle"}, {"original_string": "private final Timer duration;", "modifier": "private final", "type": "Timer", "declarator": "duration", "var_name": "duration"}], "methods": [{"identifier": "InstrumentedExecutorService", "parameters": "(ExecutorService delegate, MetricRegistry registry)", "modifiers": "public", "return": "", "signature": " InstrumentedExecutorService(ExecutorService delegate, MetricRegistry registry)", "full_signature": "public  InstrumentedExecutorService(ExecutorService delegate, MetricRegistry registry)", "class_method_signature": "InstrumentedExecutorService.InstrumentedExecutorService(ExecutorService delegate, MetricRegistry registry)", "testcase": false, "constructor": true}, {"identifier": "InstrumentedExecutorService", "parameters": "(ExecutorService delegate, MetricRegistry registry, String name)", "modifiers": "public", "return": "", "signature": " InstrumentedExecutorService(ExecutorService delegate, MetricRegistry registry, String name)", "full_signature": "public  InstrumentedExecutorService(ExecutorService delegate, MetricRegistry registry, String name)", "class_method_signature": "InstrumentedExecutorService.InstrumentedExecutorService(ExecutorService delegate, MetricRegistry registry, String name)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Runnable runnable)", "modifiers": "@Override public", "return": "void", "signature": "void execute(Runnable runnable)", "full_signature": "@Override public void execute(Runnable runnable)", "class_method_signature": "InstrumentedExecutorService.execute(Runnable runnable)", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "(Runnable runnable)", "modifiers": "@Override public", "return": "Future<?>", "signature": "Future<?> submit(Runnable runnable)", "full_signature": "@Override public Future<?> submit(Runnable runnable)", "class_method_signature": "InstrumentedExecutorService.submit(Runnable runnable)", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "(Runnable runnable, T result)", "modifiers": "@Override public", "return": "Future<T>", "signature": "Future<T> submit(Runnable runnable, T result)", "full_signature": "@Override public Future<T> submit(Runnable runnable, T result)", "class_method_signature": "InstrumentedExecutorService.submit(Runnable runnable, T result)", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "(Callable<T> task)", "modifiers": "@Override public", "return": "Future<T>", "signature": "Future<T> submit(Callable<T> task)", "full_signature": "@Override public Future<T> submit(Callable<T> task)", "class_method_signature": "InstrumentedExecutorService.submit(Callable<T> task)", "testcase": false, "constructor": false}, {"identifier": "invokeAll", "parameters": "(Collection<? extends Callable<T>> tasks)", "modifiers": "@Override public", "return": "List<Future<T>>", "signature": "List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)", "full_signature": "@Override public List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)", "class_method_signature": "InstrumentedExecutorService.invokeAll(Collection<? extends Callable<T>> tasks)", "testcase": false, "constructor": false}, {"identifier": "invokeAll", "parameters": "(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "List<Future<T>>", "signature": "List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "full_signature": "@Override public List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "class_method_signature": "InstrumentedExecutorService.invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "invokeAny", "parameters": "(Collection<? extends Callable<T>> tasks)", "modifiers": "@Override public", "return": "T", "signature": "T invokeAny(Collection<? extends Callable<T>> tasks)", "full_signature": "@Override public T invokeAny(Collection<? extends Callable<T>> tasks)", "class_method_signature": "InstrumentedExecutorService.invokeAny(Collection<? extends Callable<T>> tasks)", "testcase": false, "constructor": false}, {"identifier": "invokeAny", "parameters": "(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "T", "signature": "T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "full_signature": "@Override public T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "class_method_signature": "InstrumentedExecutorService.invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "instrument", "parameters": "(Collection<? extends Callable<T>> tasks)", "modifiers": "private", "return": "Collection<? extends Callable<T>>", "signature": "Collection<? extends Callable<T>> instrument(Collection<? extends Callable<T>> tasks)", "full_signature": "private Collection<? extends Callable<T>> instrument(Collection<? extends Callable<T>> tasks)", "class_method_signature": "InstrumentedExecutorService.instrument(Collection<? extends Callable<T>> tasks)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "InstrumentedExecutorService.shutdown()", "testcase": false, "constructor": false}, {"identifier": "shutdownNow", "parameters": "()", "modifiers": "@Override public", "return": "List<Runnable>", "signature": "List<Runnable> shutdownNow()", "full_signature": "@Override public List<Runnable> shutdownNow()", "class_method_signature": "InstrumentedExecutorService.shutdownNow()", "testcase": false, "constructor": false}, {"identifier": "isShutdown", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isShutdown()", "full_signature": "@Override public boolean isShutdown()", "class_method_signature": "InstrumentedExecutorService.isShutdown()", "testcase": false, "constructor": false}, {"identifier": "isTerminated", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isTerminated()", "full_signature": "@Override public boolean isTerminated()", "class_method_signature": "InstrumentedExecutorService.isTerminated()", "testcase": false, "constructor": false}, {"identifier": "awaitTermination", "parameters": "(long l, TimeUnit timeUnit)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean awaitTermination(long l, TimeUnit timeUnit)", "full_signature": "@Override public boolean awaitTermination(long l, TimeUnit timeUnit)", "class_method_signature": "InstrumentedExecutorService.awaitTermination(long l, TimeUnit timeUnit)", "testcase": false, "constructor": false}], "file": "metrics-core/src/main/java/com/codahale/metrics/InstrumentedExecutorService.java"}, "focal_method": {"identifier": "submit", "parameters": "(Runnable runnable)", "modifiers": "@Override public", "return": "Future<?>", "body": "@Override\n    public Future<?> submit(Runnable runnable) {\n        submitted.mark();\n        return delegate.submit(new InstrumentedRunnable(runnable));\n    }", "signature": "Future<?> submit(Runnable runnable)", "full_signature": "@Override public Future<?> submit(Runnable runnable)", "class_method_signature": "InstrumentedExecutorService.submit(Runnable runnable)", "testcase": false, "constructor": false, "invocations": ["mark", "submit"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}