{"test_class": {"identifier": "SW360UpdaterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private final SW360Configuration configurationMock = mock(SW360Configuration.class);", "modifier": "private final", "type": "SW360Configuration", "declarator": "configurationMock = mock(SW360Configuration.class)", "var_name": "configurationMock"}], "file": "assembly/compliance-tool/src/test/java/org/eclipse/sw360/antenna/frontend/compliancetool/sw360/updater/SW360UpdaterTest.java"}, "test_case": {"identifier": "testIllegalStateIsCaught", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIllegalStateIsCaught() throws IOException {\n        SW360UpdaterImpl updaterImpl = mock(SW360UpdaterImpl.class);\n        when(updaterImpl.artifactToReleaseInSW360(any(), any()))\n                .thenReturn(SW360TestUtils.mkSW360Release(\"test\"));\n\n        String propertiesFilePath = Objects.requireNonNull(this.getClass().getClassLoader().getResource(\"compliancetool-updater.properties\")).getPath();\n        final Map<String, String> properties = ComplianceFeatureUtils.mapPropertiesFile(new File(propertiesFilePath));\n        initConfiguration(properties);\n\n        SW360ReleaseClientAdapter releaseClientAdapter = mock(SW360ReleaseClientAdapter.class);\n\n        SW360Connection connection = mock(SW360Connection.class);\n        when(connection.getReleaseAdapter())\n                .thenReturn(releaseClientAdapter);\n\n        final ClearingReportGenerator clearingReportGenerator = mock(ClearingReportGenerator.class);\n        when(clearingReportGenerator.createClearingDocument(any(), any()))\n                .thenThrow(new SW360ClientException(\"Clearing doc generation error\"));\n        SW360Updater updater = new SW360Updater(updaterImpl, configurationMock, clearingReportGenerator);\n        updater.execute();\n\n        verify(releaseClientAdapter, never()).uploadAttachments(any());\n\n        // TODO after #593 is fixed, put the test method in SW360UpdaterTestWithFailure in SW360UpdaterTest\n    }", "signature": "void testIllegalStateIsCaught()", "full_signature": "@Test public void testIllegalStateIsCaught()", "class_method_signature": "SW360UpdaterTest.testIllegalStateIsCaught()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "artifactToReleaseInSW360", "any", "any", "mkSW360Release", "getPath", "requireNonNull", "getResource", "getClassLoader", "getClass", "mapPropertiesFile", "initConfiguration", "mock", "mock", "thenReturn", "when", "getReleaseAdapter", "mock", "thenThrow", "when", "createClearingDocument", "any", "any", "execute", "uploadAttachments", "verify", "never", "any"]}, "focal_class": {"identifier": "SW360Updater", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PROP_REMOVE_CLEARED_SOURCES = \"removeClearedSources\";", "modifier": "public static final", "type": "String", "declarator": "PROP_REMOVE_CLEARED_SOURCES = \"removeClearedSources\"", "var_name": "PROP_REMOVE_CLEARED_SOURCES"}, {"original_string": "public static final String PROP_REMOVE_CLEARING_DOCS = \"removeClearingDocuments\";", "modifier": "public static final", "type": "String", "declarator": "PROP_REMOVE_CLEARING_DOCS = \"removeClearingDocuments\"", "var_name": "PROP_REMOVE_CLEARING_DOCS"}, {"original_string": "public static final String PROP_CLEARING_DOC_FOLDER = \"clearingDocDir\";", "modifier": "public static final", "type": "String", "declarator": "PROP_CLEARING_DOC_FOLDER = \"clearingDocDir\"", "var_name": "PROP_CLEARING_DOC_FOLDER"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SW360Updater.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SW360Updater.class)", "var_name": "LOGGER"}, {"original_string": "private final SW360UpdaterImpl updater;", "modifier": "private final", "type": "SW360UpdaterImpl", "declarator": "updater", "var_name": "updater"}, {"original_string": "private final SW360Configuration configuration;", "modifier": "private final", "type": "SW360Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final ClearingReportGenerator generator;", "modifier": "private final", "type": "ClearingReportGenerator", "declarator": "generator", "var_name": "generator"}, {"original_string": "private final Path clearingDocDir;", "modifier": "private final", "type": "Path", "declarator": "clearingDocDir", "var_name": "clearingDocDir"}, {"original_string": "private final boolean removeClearedSources;", "modifier": "private final", "type": "boolean", "declarator": "removeClearedSources", "var_name": "removeClearedSources"}, {"original_string": "private final boolean removeClearingDocs;", "modifier": "private final", "type": "boolean", "declarator": "removeClearingDocs", "var_name": "removeClearingDocs"}], "methods": [{"identifier": "SW360Updater", "parameters": "(SW360UpdaterImpl updater, SW360Configuration configuration,\n                        ClearingReportGenerator generator)", "modifiers": "public", "return": "", "signature": " SW360Updater(SW360UpdaterImpl updater, SW360Configuration configuration,\n                        ClearingReportGenerator generator)", "full_signature": "public  SW360Updater(SW360UpdaterImpl updater, SW360Configuration configuration,\n                        ClearingReportGenerator generator)", "class_method_signature": "SW360Updater.SW360Updater(SW360UpdaterImpl updater, SW360Configuration configuration,\n                        ClearingReportGenerator generator)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void execute()", "full_signature": "public void execute()", "class_method_signature": "SW360Updater.execute()", "testcase": false, "constructor": false}, {"identifier": "uploadReleaseWithClearingDocumentFromArtifact", "parameters": "(Artifact artifact)", "modifiers": "private", "return": "void", "signature": "void uploadReleaseWithClearingDocumentFromArtifact(Artifact artifact)", "full_signature": "private void uploadReleaseWithClearingDocumentFromArtifact(Artifact artifact)", "class_method_signature": "SW360Updater.uploadReleaseWithClearingDocumentFromArtifact(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "getOrGenerateClearingDocument", "parameters": "(SW360Release release, Artifact artifact)", "modifiers": "private", "return": "Path", "signature": "Path getOrGenerateClearingDocument(SW360Release release, Artifact artifact)", "full_signature": "private Path getOrGenerateClearingDocument(SW360Release release, Artifact artifact)", "class_method_signature": "SW360Updater.getOrGenerateClearingDocument(SW360Release release, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "removeSourceArtifact", "parameters": "(Artifact artifact, SW360Release release, Set<Path> failedUploads)", "modifiers": "private static", "return": "void", "signature": "void removeSourceArtifact(Artifact artifact, SW360Release release, Set<Path> failedUploads)", "full_signature": "private static void removeSourceArtifact(Artifact artifact, SW360Release release, Set<Path> failedUploads)", "class_method_signature": "SW360Updater.removeSourceArtifact(Artifact artifact, SW360Release release, Set<Path> failedUploads)", "testcase": false, "constructor": false}, {"identifier": "removeClearingDocument", "parameters": "(Path clearingDoc, Set<Path> failedUploads)", "modifiers": "private static", "return": "void", "signature": "void removeClearingDocument(Path clearingDoc, Set<Path> failedUploads)", "full_signature": "private static void removeClearingDocument(Path clearingDoc, Set<Path> failedUploads)", "class_method_signature": "SW360Updater.removeClearingDocument(Path clearingDoc, Set<Path> failedUploads)", "testcase": false, "constructor": false}, {"identifier": "removeUploadedFile", "parameters": "(Path path, Set<Path> failedUploads, String tag)", "modifiers": "private static", "return": "void", "signature": "void removeUploadedFile(Path path, Set<Path> failedUploads, String tag)", "full_signature": "private static void removeUploadedFile(Path path, Set<Path> failedUploads, String tag)", "class_method_signature": "SW360Updater.removeUploadedFile(Path path, Set<Path> failedUploads, String tag)", "testcase": false, "constructor": false}], "file": "assembly/compliance-tool/src/main/java/org/eclipse/sw360/antenna/frontend/compliancetool/sw360/updater/SW360Updater.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void execute() {\n        LOGGER.debug(\"{} has started.\", SW360Updater.class.getName());\n        Collection<Artifact> artifacts = getArtifactsFromCsvFile(configuration);\n\n        Map<Artifact, SW360ClientException> exceptions = new HashMap<>();\n        for (Artifact artifact : artifacts) {\n            try {\n                uploadReleaseWithClearingDocumentFromArtifact(artifact);\n            } catch (SW360ClientException e) {\n                exceptions.put(artifact, e);\n            }\n        }\n\n        LOGGER.info(\"The SW360Updater was executed with the following configuration:\");\n        configuration.logConfiguration(LOGGER);\n        LOGGER.info(\"Path for clearing documents: {}\", clearingDocDir);\n\n        if (!exceptions.isEmpty()) {\n            StringBuilder builder = new StringBuilder(\"There have been some errors during update:\");\n            exceptions.forEach((key, value) -> {\n                String packageURL = key.getMainCoordinate()\n                        .map(coordinate ->\n                                coordinate.getPackageURL().toString())\n                        .orElse(\"UNKNOWN\");\n\n                builder.append(System.lineSeparator());\n                builder.append(String.format(\"%s: %s\", packageURL, value.getMessage()));\n            });\n            LOGGER.error(builder.toString());\n            throw new SW360ClientException(builder.toString());\n        }\n    }", "signature": "void execute()", "full_signature": "public void execute()", "class_method_signature": "SW360Updater.execute()", "testcase": false, "constructor": false, "invocations": ["debug", "getName", "getArtifactsFromCsvFile", "uploadReleaseWithClearingDocumentFromArtifact", "put", "info", "logConfiguration", "info", "isEmpty", "forEach", "orElse", "map", "getMainCoordinate", "toString", "getPackageURL", "append", "lineSeparator", "append", "format", "getMessage", "error", "toString", "toString"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}