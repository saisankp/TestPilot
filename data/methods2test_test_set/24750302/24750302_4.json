{"test_class": {"identifier": "NodeTemplateUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Resource\n    private ICSARRepositorySearchService csarRepositorySearchService;", "modifier": "@Resource\n    private", "type": "ICSARRepositorySearchService", "declarator": "csarRepositorySearchService", "var_name": "csarRepositorySearchService"}, {"original_string": "@Resource\n    private ToscaContextualAspect toscaContextualAspect;", "modifier": "@Resource\n    private", "type": "ToscaContextualAspect", "declarator": "toscaContextualAspect", "var_name": "toscaContextualAspect"}], "file": "alien4cloud-tosca/src/test/java/org/alien4cloud/tosca/utils/NodeTemplateUtilsTest.java"}, "test_case": {"identifier": "getCapabilityByTypeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getCapabilityByTypeTest() {\n        NodeTemplate nodeTemplate = new NodeTemplate();\n        Capability nodeCapability = new Capability(\"org.alien4cloud.capabilities.SampleCapability\", null);\n        nodeTemplate.setCapabilities(Maps.newHashMap(\"test\", nodeCapability));\n        // if the capability type exactly equals then no tosca context and request is required\n        Capability capability = getCapabilityByType(nodeTemplate, \"org.alien4cloud.capabilities.SampleCapability\");\n        assertSame(nodeCapability, capability);\n\n        // if the capability derives from parent type then a TOSCA context and query is required to fetch the type.\n        CapabilityType capabilityType = new CapabilityType();\n        capabilityType.setElementId(\"org.alien4cloud.capabilities.SampleCapability\");\n        capabilityType.setDerivedFrom(Lists.newArrayList(\"org.alien4cloud.capabilities.TestCapability\"));\n        Mockito.reset(csarRepositorySearchService);\n        Mockito.when(csarRepositorySearchService.getElementInDependencies(Mockito.eq(CapabilityType.class),\n                Mockito.eq(\"org.alien4cloud.capabilities.SampleCapability\"), Mockito.any(Set.class))).thenReturn(capabilityType);\n\n        capability = toscaContextualAspect.execInToscaContext(() -> getCapabilityByType(nodeTemplate, \"org.alien4cloud.capabilities.TestCapability\"), false,\n                Sets.newHashSet(new CSARDependency(\"org.alien4cloud.testArchive\", \"1.0.0-SNAPSHOT\")));\n        assertSame(nodeCapability, capability);\n    }", "signature": "void getCapabilityByTypeTest()", "full_signature": "@Test public void getCapabilityByTypeTest()", "class_method_signature": "NodeTemplateUtilsTest.getCapabilityByTypeTest()", "testcase": true, "constructor": false, "invocations": ["setCapabilities", "newHashMap", "getCapabilityByType", "assertSame", "setElementId", "setDerivedFrom", "newArrayList", "reset", "thenReturn", "when", "getElementInDependencies", "eq", "eq", "any", "execInToscaContext", "getCapabilityByType", "newHashSet", "assertSame"]}, "focal_class": {"identifier": "NodeTemplateUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "NodeTemplateUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " NodeTemplateUtils()", "full_signature": "private  NodeTemplateUtils()", "class_method_signature": "NodeTemplateUtils.NodeTemplateUtils()", "testcase": false, "constructor": true}, {"identifier": "getCapabilitEntryyByType", "parameters": "(NodeTemplate nodeTemplate, String capabilityTypeName)", "modifiers": "public static", "return": "Entry<String, Capability>", "signature": "Entry<String, Capability> getCapabilitEntryyByType(NodeTemplate nodeTemplate, String capabilityTypeName)", "full_signature": "public static Entry<String, Capability> getCapabilitEntryyByType(NodeTemplate nodeTemplate, String capabilityTypeName)", "class_method_signature": "NodeTemplateUtils.getCapabilitEntryyByType(NodeTemplate nodeTemplate, String capabilityTypeName)", "testcase": false, "constructor": false}, {"identifier": "getCapabilityByType", "parameters": "(NodeTemplate nodeTemplate, String capabilityTypeName)", "modifiers": "public static", "return": "Capability", "signature": "Capability getCapabilityByType(NodeTemplate nodeTemplate, String capabilityTypeName)", "full_signature": "public static Capability getCapabilityByType(NodeTemplate nodeTemplate, String capabilityTypeName)", "class_method_signature": "NodeTemplateUtils.getCapabilityByType(NodeTemplate nodeTemplate, String capabilityTypeName)", "testcase": false, "constructor": false}, {"identifier": "getCapabilityByTypeOrFail", "parameters": "(NodeTemplate nodeTemplate, String capabilityType)", "modifiers": "public static", "return": "Capability", "signature": "Capability getCapabilityByTypeOrFail(NodeTemplate nodeTemplate, String capabilityType)", "full_signature": "public static Capability getCapabilityByTypeOrFail(NodeTemplate nodeTemplate, String capabilityType)", "class_method_signature": "NodeTemplateUtils.getCapabilityByTypeOrFail(NodeTemplate nodeTemplate, String capabilityType)", "testcase": false, "constructor": false}, {"identifier": "setCapability", "parameters": "(NodeTemplate nodeTemplate, String name, Capability capability)", "modifiers": "public static", "return": "void", "signature": "void setCapability(NodeTemplate nodeTemplate, String name, Capability capability)", "full_signature": "public static void setCapability(NodeTemplate nodeTemplate, String name, Capability capability)", "class_method_signature": "NodeTemplateUtils.setCapability(NodeTemplate nodeTemplate, String name, Capability capability)", "testcase": false, "constructor": false}, {"identifier": "countRelationshipsForRequirement", "parameters": "(NodeTemplate nodeTemplate, RequirementDefinition requirementDefinition)", "modifiers": "public static", "return": "int", "signature": "int countRelationshipsForRequirement(NodeTemplate nodeTemplate, RequirementDefinition requirementDefinition)", "full_signature": "public static int countRelationshipsForRequirement(NodeTemplate nodeTemplate, RequirementDefinition requirementDefinition)", "class_method_signature": "NodeTemplateUtils.countRelationshipsForRequirement(NodeTemplate nodeTemplate, RequirementDefinition requirementDefinition)", "testcase": false, "constructor": false}], "file": "alien4cloud-tosca/src/main/java/org/alien4cloud/tosca/utils/NodeTemplateUtils.java"}, "focal_method": {"identifier": "getCapabilityByType", "parameters": "(NodeTemplate nodeTemplate, String capabilityTypeName)", "modifiers": "public static", "return": "Capability", "body": "public static Capability getCapabilityByType(NodeTemplate nodeTemplate, String capabilityTypeName) {\n        Entry<String, Capability> capabilityEntry = getCapabilitEntryyByType(nodeTemplate, capabilityTypeName);\n        return capabilityEntry == null ? null : capabilityEntry.getValue();\n    }", "signature": "Capability getCapabilityByType(NodeTemplate nodeTemplate, String capabilityTypeName)", "full_signature": "public static Capability getCapabilityByType(NodeTemplate nodeTemplate, String capabilityTypeName)", "class_method_signature": "NodeTemplateUtils.getCapabilityByType(NodeTemplate nodeTemplate, String capabilityTypeName)", "testcase": false, "constructor": false, "invocations": ["getCapabilitEntryyByType", "getValue"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}