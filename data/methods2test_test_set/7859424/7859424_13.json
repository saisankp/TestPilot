{"test_class": {"identifier": "ShortSetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ShortSet set;", "modifier": "private", "type": "ShortSet", "declarator": "set", "var_name": "set"}, {"original_string": "private static final CoordinateSystem COORDS = CoordinateSystem.forWidth(19);", "modifier": "private static final", "type": "CoordinateSystem", "declarator": "COORDS = CoordinateSystem.forWidth(19)", "var_name": "COORDS"}, {"original_string": "private static final int CAPACITY = COORDS.getFirstPointBeyondBoard();", "modifier": "private static final", "type": "int", "declarator": "CAPACITY = COORDS.getFirstPointBeyondBoard()", "var_name": "CAPACITY"}], "file": "src/edu/lclark/orego/util/ShortSetTest.java"}, "test_case": {"identifier": "testAdd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAdd() {\n\t\t// The set should initially be empty\n\t\tassertEquals(0, set.size());\n\t\t// Add some elements\n\t\tset.add((short)23);\n\t\tset.add((short)99);\n\t\tset.add((short)99);\n\t\t// Verify that the set has size 2\n\t\tassertEquals(2, set.size());\n\t\t// Verify that there were no side effects\n\t\tassertEquals(2, set.size());\n\t\t// Verify that some element is present\n\t\tassertTrue(set.contains((short)23));\n\t\t// Verify that some element is not present\n\t\tassertFalse(set.contains((short)0));\n\t}", "signature": "void testAdd()", "full_signature": "@Test public void testAdd()", "class_method_signature": "ShortSetTest.testAdd()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "add", "add", "add", "assertEquals", "size", "assertEquals", "size", "assertTrue", "contains", "assertFalse", "contains"]}, "focal_class": {"identifier": "ShortSet", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private final short[] data;", "modifier": "private final", "type": "short[]", "declarator": "data", "var_name": "data"}, {"original_string": "private final short[] locations;", "modifier": "private final", "type": "short[]", "declarator": "locations", "var_name": "locations"}, {"original_string": "private int size;", "modifier": "private", "type": "int", "declarator": "size", "var_name": "size"}], "methods": [{"identifier": "ShortSet", "parameters": "(int capacity)", "modifiers": "public", "return": "", "signature": " ShortSet(int capacity)", "full_signature": "public  ShortSet(int capacity)", "class_method_signature": "ShortSet.ShortSet(int capacity)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(short key)", "modifiers": "public", "return": "void", "signature": "void add(short key)", "full_signature": "public void add(short key)", "class_method_signature": "ShortSet.add(short key)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(ShortSet that)", "modifiers": "public", "return": "void", "signature": "void addAll(ShortSet that)", "full_signature": "public void addAll(ShortSet that)", "class_method_signature": "ShortSet.addAll(ShortSet that)", "testcase": false, "constructor": false}, {"identifier": "addKnownAbsent", "parameters": "(short key)", "modifiers": "public", "return": "void", "signature": "void addKnownAbsent(short key)", "full_signature": "public void addKnownAbsent(short key)", "class_method_signature": "ShortSet.addKnownAbsent(short key)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "ShortSet.clear()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(short key)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(short key)", "full_signature": "public boolean contains(short key)", "class_method_signature": "ShortSet.contains(short key)", "testcase": false, "constructor": false}, {"identifier": "copyDataFrom", "parameters": "(ShortSet that)", "modifiers": "public", "return": "void", "signature": "void copyDataFrom(ShortSet that)", "full_signature": "public void copyDataFrom(ShortSet that)", "class_method_signature": "ShortSet.copyDataFrom(ShortSet that)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ShortSet.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int i)", "modifiers": "public", "return": "short", "signature": "short get(int i)", "full_signature": "public short get(int i)", "class_method_signature": "ShortSet.get(int i)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ShortSet.hashCode()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(short key)", "modifiers": "public", "return": "void", "signature": "void remove(short key)", "full_signature": "public void remove(short key)", "class_method_signature": "ShortSet.remove(short key)", "testcase": false, "constructor": false}, {"identifier": "removeKnownPresent", "parameters": "(int key)", "modifiers": "public", "return": "void", "signature": "void removeKnownPresent(int key)", "full_signature": "public void removeKnownPresent(int key)", "class_method_signature": "ShortSet.removeKnownPresent(int key)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "ShortSet.size()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ShortSet.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(CoordinateSystem coords)", "modifiers": "public", "return": "String", "signature": "String toString(CoordinateSystem coords)", "full_signature": "public String toString(CoordinateSystem coords)", "class_method_signature": "ShortSet.toString(CoordinateSystem coords)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/util/ShortSet.java"}, "focal_method": {"identifier": "add", "parameters": "(short key)", "modifiers": "public", "return": "void", "body": "public void add(short key) {\n\t\tif (!contains(key)) {\n\t\t\taddKnownAbsent(key);\n\t\t}\n\t}", "signature": "void add(short key)", "full_signature": "public void add(short key)", "class_method_signature": "ShortSet.add(short key)", "testcase": false, "constructor": false, "invocations": ["contains", "addKnownAbsent"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}