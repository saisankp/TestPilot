{"test_class": {"identifier": "LimitDataGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-common/src/test/java/com/netflix/titus/common/data/generator/internal/LimitDataGeneratorTest.java"}, "test_case": {"identifier": "testLimit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLimit() throws Exception {\n        DataGenerator<Long> genWithLimit = DataGenerator.range(0, 9).limit(2);\n        DataGenerator<List<Long>> batchGen = genWithLimit.batch(2);\n\n        assertThat(batchGen.getValue()).isEqualTo(asList(0L, 1L));\n        assertThat(batchGen.apply().isClosed()).isTrue();\n    }", "signature": "void testLimit()", "full_signature": "@Test public void testLimit()", "class_method_signature": "LimitDataGeneratorTest.testLimit()", "testcase": true, "constructor": false, "invocations": ["limit", "range", "batch", "isEqualTo", "assertThat", "getValue", "asList", "isTrue", "assertThat", "isClosed", "apply"]}, "focal_class": {"identifier": "LimitDataGenerator", "superclass": "extends DataGenerator<A>", "interfaces": "", "fields": [{"original_string": "private final DataGenerator<A> source;", "modifier": "private final", "type": "DataGenerator<A>", "declarator": "source", "var_name": "source"}, {"original_string": "private final int remaining;", "modifier": "private final", "type": "int", "declarator": "remaining", "var_name": "remaining"}], "methods": [{"identifier": "LimitDataGenerator", "parameters": "(DataGenerator<A> source, int count)", "modifiers": "private", "return": "", "signature": " LimitDataGenerator(DataGenerator<A> source, int count)", "full_signature": "private  LimitDataGenerator(DataGenerator<A> source, int count)", "class_method_signature": "LimitDataGenerator.LimitDataGenerator(DataGenerator<A> source, int count)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "()", "modifiers": "@Override public", "return": "DataGenerator<A>", "signature": "DataGenerator<A> apply()", "full_signature": "@Override public DataGenerator<A> apply()", "class_method_signature": "LimitDataGenerator.apply()", "testcase": false, "constructor": false}, {"identifier": "getOptionalValue", "parameters": "()", "modifiers": "@Override public", "return": "Optional<A>", "signature": "Optional<A> getOptionalValue()", "full_signature": "@Override public Optional<A> getOptionalValue()", "class_method_signature": "LimitDataGenerator.getOptionalValue()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(DataGenerator<A> source, int count)", "modifiers": "public static", "return": "DataGenerator<A>", "signature": "DataGenerator<A> newInstance(DataGenerator<A> source, int count)", "full_signature": "public static DataGenerator<A> newInstance(DataGenerator<A> source, int count)", "class_method_signature": "LimitDataGenerator.newInstance(DataGenerator<A> source, int count)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/data/generator/internal/LimitDataGenerator.java"}, "focal_method": {"identifier": "apply", "parameters": "()", "modifiers": "@Override public", "return": "DataGenerator<A>", "body": "@Override\n    public DataGenerator<A> apply() {\n        if (remaining == 0) {\n            return (DataGenerator<A>) EOS;\n        }\n        DataGenerator nextGen = source.apply();\n        if (nextGen.isClosed()) {\n            return (DataGenerator<A>) EOS;\n        }\n        return new LimitDataGenerator<>(nextGen, remaining);\n    }", "signature": "DataGenerator<A> apply()", "full_signature": "@Override public DataGenerator<A> apply()", "class_method_signature": "LimitDataGenerator.apply()", "testcase": false, "constructor": false, "invocations": ["apply", "isClosed"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}