{"test_class": {"identifier": "LogQueryServiceTest", "superclass": "extends TestAbstractService", "interfaces": "", "fields": [], "file": "web-manager/src/test/java/com/threathunter/web/manager/service/LogQueryServiceTest.java"}, "test_case": {"identifier": "testLogQueryService_downloadAtBase64", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLogQueryService_downloadAtBase64() {\n        String s = logQueryService.downloadAtBase64(\"events_query_1\");\n        System.out.println(s);\n\n    }", "signature": "void testLogQueryService_downloadAtBase64()", "full_signature": "@Test public void testLogQueryService_downloadAtBase64()", "class_method_signature": "LogQueryServiceTest.testLogQueryService_downloadAtBase64()", "testcase": true, "constructor": false, "invocations": ["downloadAtBase64", "println"]}, "focal_class": {"identifier": "LogQueryService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String QUERY_DIR = ConfigUtil.getString(\"platform.persistent.query.dir\", \"/data/tmp/query\");", "modifier": "private static", "type": "String", "declarator": "QUERY_DIR = ConfigUtil.getString(\"platform.persistent.query.dir\", \"/data/tmp/query\")", "var_name": "QUERY_DIR"}, {"original_string": "private static Gson GSON = new GsonBuilder().create();", "modifier": "private static", "type": "Gson", "declarator": "GSON = new GsonBuilder().create()", "var_name": "GSON"}, {"original_string": "private static String RESULT_NAME_RREFIX = \"events_query_\";", "modifier": "private static", "type": "String", "declarator": "RESULT_NAME_RREFIX = \"events_query_\"", "var_name": "RESULT_NAME_RREFIX"}, {"original_string": "private static String TOTAL_NAME_PREFIX = \"events_query_total_\";", "modifier": "private static", "type": "String", "declarator": "TOTAL_NAME_PREFIX = \"events_query_total_\"", "var_name": "TOTAL_NAME_PREFIX"}, {"original_string": "@Autowired\n    BabelService babelService;", "modifier": "@Autowired", "type": "BabelService", "declarator": "babelService", "var_name": "babelService"}, {"original_string": "@Autowired\n    MysqlService mysqlService;", "modifier": "@Autowired", "type": "MysqlService", "declarator": "mysqlService", "var_name": "mysqlService"}], "methods": [{"identifier": "toShowCols", "parameters": "(String json)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> toShowCols(String json)", "full_signature": "public static List<String> toShowCols(String json)", "class_method_signature": "LogQueryService.toShowCols(String json)", "testcase": false, "constructor": false}, {"identifier": "toTerms", "parameters": "(String json)", "modifiers": "public static", "return": "List<Map<String, Object>>", "signature": "List<Map<String, Object>> toTerms(String json)", "full_signature": "public static List<Map<String, Object>> toTerms(String json)", "class_method_signature": "LogQueryService.toTerms(String json)", "testcase": false, "constructor": false}, {"identifier": "asLogQuery", "parameters": "(Map<String, Object> parameterMap)", "modifiers": "public static", "return": "LogQuery", "signature": "LogQuery asLogQuery(Map<String, Object> parameterMap)", "full_signature": "public static LogQuery asLogQuery(Map<String, Object> parameterMap)", "class_method_signature": "LogQueryService.asLogQuery(Map<String, Object> parameterMap)", "testcase": false, "constructor": false}, {"identifier": "getQueryResultSize", "parameters": "(int id)", "modifiers": "public static", "return": "Long", "signature": "Long getQueryResultSize(int id)", "full_signature": "public static Long getQueryResultSize(int id)", "class_method_signature": "LogQueryService.getQueryResultSize(int id)", "testcase": false, "constructor": false}, {"identifier": "getTotalSize", "parameters": "(int id)", "modifiers": "public static", "return": "Long", "signature": "Long getTotalSize(int id)", "full_signature": "public static Long getTotalSize(int id)", "class_method_signature": "LogQueryService.getTotalSize(int id)", "testcase": false, "constructor": false}, {"identifier": "getDownloadPath", "parameters": "(int id)", "modifiers": "public static", "return": "String", "signature": "String getDownloadPath(int id)", "full_signature": "public static String getDownloadPath(int id)", "class_method_signature": "LogQueryService.getDownloadPath(int id)", "testcase": false, "constructor": false}, {"identifier": "getPaginate", "parameters": "(int id, int page, int pageCount)", "modifiers": "public", "return": "List<Map<String, Object>>", "signature": "List<Map<String, Object>> getPaginate(int id, int page, int pageCount)", "full_signature": "public List<Map<String, Object>> getPaginate(int id, int page, int pageCount)", "class_method_signature": "LogQueryService.getPaginate(int id, int page, int pageCount)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "()", "modifiers": "public", "return": "List<LogQuery>", "signature": "List<LogQuery> getAll()", "full_signature": "public List<LogQuery> getAll()", "class_method_signature": "LogQueryService.getAll()", "testcase": false, "constructor": false}, {"identifier": "addQueryInfo", "parameters": "(LogQuery query)", "modifiers": "private", "return": "void", "signature": "void addQueryInfo(LogQuery query)", "full_signature": "private void addQueryInfo(LogQuery query)", "class_method_signature": "LogQueryService.addQueryInfo(LogQuery query)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(LogQuery query)", "modifiers": "@Transactional public", "return": "boolean", "signature": "boolean insert(LogQuery query)", "full_signature": "@Transactional public boolean insert(LogQuery query)", "class_method_signature": "LogQueryService.insert(LogQuery query)", "testcase": false, "constructor": false}, {"identifier": "getById", "parameters": "(int id)", "modifiers": "public", "return": "LogQuery", "signature": "LogQuery getById(int id)", "full_signature": "public LogQuery getById(int id)", "class_method_signature": "LogQueryService.getById(int id)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(int id)", "modifiers": "@Transactional public", "return": "void", "signature": "void delete(int id)", "full_signature": "@Transactional public void delete(int id)", "class_method_signature": "LogQueryService.delete(int id)", "testcase": false, "constructor": false}, {"identifier": "progress", "parameters": "()", "modifiers": "public", "return": "List<Map<String, Object>>", "signature": "List<Map<String, Object>> progress()", "full_signature": "public List<Map<String, Object>> progress()", "class_method_signature": "LogQueryService.progress()", "testcase": false, "constructor": false}, {"identifier": "progressDataEntry", "parameters": "(Integer id, String status)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> progressDataEntry(Integer id, String status)", "full_signature": "private Map<String, Object> progressDataEntry(Integer id, String status)", "class_method_signature": "LogQueryService.progressDataEntry(Integer id, String status)", "testcase": false, "constructor": false}, {"identifier": "asDownloadFile", "parameters": "(String name)", "modifiers": "public", "return": "File", "signature": "File asDownloadFile(String name)", "full_signature": "public File asDownloadFile(String name)", "class_method_signature": "LogQueryService.asDownloadFile(String name)", "testcase": false, "constructor": false}, {"identifier": "downloadAtBase64", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String downloadAtBase64(String name)", "full_signature": "public String downloadAtBase64(String name)", "class_method_signature": "LogQueryService.downloadAtBase64(String name)", "testcase": false, "constructor": false}], "file": "web-manager/src/main/java/com/threathunter/web/manager/service/LogQueryService.java"}, "focal_method": {"identifier": "downloadAtBase64", "parameters": "(String name)", "modifiers": "public", "return": "String", "body": "public String downloadAtBase64(String name) {\n        File file = asDownloadFile(name);\n        try {\n            RandomAccessFile raf = new RandomAccessFile(file, \"r\");\n            FileChannel channel = raf.getChannel();\n            ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n            List<ChannelBuffer> list = new ArrayList<>();\n            while (channel.read(byteBuffer) != -1) {\n                byteBuffer.flip();\n                byte[] array = byteBuffer.duplicate().array();\n                ChannelBuffer channelBuffer = ChannelBuffers.wrappedBuffer(array);\n                list.add(channelBuffer);\n                byteBuffer.clear();\n            }\n            ChannelBuffer channelBuffer = ChannelBuffers.wrappedBuffer(list.toArray(new ChannelBuffer[]{}));\n            ChannelBuffer encode = Base64.encode(channelBuffer);\n            return new String(encode.array());\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return \"\";\n    }", "signature": "String downloadAtBase64(String name)", "full_signature": "public String downloadAtBase64(String name)", "class_method_signature": "LogQueryService.downloadAtBase64(String name)", "testcase": false, "constructor": false, "invocations": ["asDownloadFile", "getChannel", "allocate", "read", "flip", "array", "duplicate", "wrappedBuffer", "add", "clear", "wrappedBuffer", "toArray", "encode", "array", "printStackTrace", "printStackTrace"]}, "repository": {"repo_id": 174508778, "url": "https://github.com/threathunterX/apiserver", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 7, "size": 170, "license": "licensed"}}