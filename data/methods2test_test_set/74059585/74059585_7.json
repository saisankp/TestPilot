{"test_class": {"identifier": "TraceHttpRequestInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HttpRequest requestWithNoHeaders;", "modifier": "private", "type": "HttpRequest", "declarator": "requestWithNoHeaders", "var_name": "requestWithNoHeaders"}, {"original_string": "private HttpRequest requestWithHeaders;", "modifier": "private", "type": "HttpRequest", "declarator": "requestWithHeaders", "var_name": "requestWithHeaders"}, {"original_string": "private TestTracer tracer;", "modifier": "private", "type": "TestTracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "private TraceHttpRequestInterceptor requestInterceptor;", "modifier": "private", "type": "TraceHttpRequestInterceptor", "declarator": "requestInterceptor", "var_name": "requestInterceptor"}], "file": "core-http/src/test/java/com/google/cloud/trace/http/TraceHttpRequestInterceptorTest.java"}, "test_case": {"identifier": "testProcess_WithHeaders", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testProcess_WithHeaders() throws Exception {\n    TraceContext traceContext = requestInterceptor.process(requestWithHeaders);\n\n    assertThat(tracer.startSpanEvents).hasSize(1);\n    StartSpanEvent startEvent = tracer.startSpanEvents.get(0);\n    assertThat(startEvent.getName()).isEqualTo(\"/foo/bar\");\n    assertThat(traceContext).isEqualTo(startEvent.getTraceContext());\n\n    assertThat(tracer.annotateEvents).hasSize(1);\n    AnnotateEvent annotateEvent = tracer.annotateEvents.get(0);\n    assertThat(annotateEvent.getLabels().getLabels()).containsAllOf(\n        new Label(\"/http/user_agent\", \"test-user-agent\"),\n        new Label(\"/request/size\", \"123456\"),\n        new Label(\"/http/method\", \"GET\"),\n        new Label(\"/http/client_protocol\", \"HTTP\")\n    );\n    assertThat(annotateEvent.getTraceContext()).isEqualTo(startEvent.getTraceContext());\n  }", "signature": "void testProcess_WithHeaders()", "full_signature": "@Test public void testProcess_WithHeaders()", "class_method_signature": "TraceHttpRequestInterceptorTest.testProcess_WithHeaders()", "testcase": true, "constructor": false, "invocations": ["process", "hasSize", "assertThat", "get", "isEqualTo", "assertThat", "getName", "isEqualTo", "assertThat", "getTraceContext", "hasSize", "assertThat", "get", "containsAllOf", "assertThat", "getLabels", "getLabels", "isEqualTo", "assertThat", "getTraceContext", "getTraceContext"]}, "focal_class": {"identifier": "TraceHttpRequestInterceptor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Tracer tracer;", "modifier": "private final", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}], "methods": [{"identifier": "TraceHttpRequestInterceptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " TraceHttpRequestInterceptor()", "full_signature": "public  TraceHttpRequestInterceptor()", "class_method_signature": "TraceHttpRequestInterceptor.TraceHttpRequestInterceptor()", "testcase": false, "constructor": true}, {"identifier": "TraceHttpRequestInterceptor", "parameters": "(Tracer tracer)", "modifiers": "public", "return": "", "signature": " TraceHttpRequestInterceptor(Tracer tracer)", "full_signature": "public  TraceHttpRequestInterceptor(Tracer tracer)", "class_method_signature": "TraceHttpRequestInterceptor.TraceHttpRequestInterceptor(Tracer tracer)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(HttpRequest request)", "modifiers": "public", "return": "TraceContext", "signature": "TraceContext process(HttpRequest request)", "full_signature": "public TraceContext process(HttpRequest request)", "class_method_signature": "TraceHttpRequestInterceptor.process(HttpRequest request)", "testcase": false, "constructor": false}], "file": "core-http/src/main/java/com/google/cloud/trace/http/TraceHttpRequestInterceptor.java"}, "focal_method": {"identifier": "process", "parameters": "(HttpRequest request)", "modifiers": "public", "return": "TraceContext", "body": "public TraceContext process(HttpRequest request) {\n    Labels.Builder labels = Labels.builder();\n    TraceInterceptorUtil\n        .annotateIfNotEmpty(labels, HttpLabels.HTTP_METHOD, request.getURI().toString());\n    labels.add(HttpLabels.HTTP_METHOD, request.getMethod());\n    TraceInterceptorUtil\n        .annotateIfNotEmpty(labels, HttpLabels.HTTP_URL, request.getURI().toString());\n    TraceInterceptorUtil.annotateIfNotEmpty(labels, HttpLabels.HTTP_CLIENT_PROTOCOL,\n        request.getProtocol());\n    TraceInterceptorUtil.annotateIfNotEmpty(labels, HttpLabels.HTTP_USER_AGENT,\n        request.getHeader(HttpHeaders.USER_AGENT));\n    TraceInterceptorUtil.annotateIfNotEmpty(labels, HttpLabels.REQUEST_SIZE,\n        request.getHeader(HttpHeaders.CONTENT_LENGTH));\n    TraceContext traceContext = tracer.startSpan(request.getURI().getPath());\n    tracer.annotateSpan(traceContext, labels.build());\n    return traceContext;\n  }", "signature": "TraceContext process(HttpRequest request)", "full_signature": "public TraceContext process(HttpRequest request)", "class_method_signature": "TraceHttpRequestInterceptor.process(HttpRequest request)", "testcase": false, "constructor": false, "invocations": ["builder", "annotateIfNotEmpty", "toString", "getURI", "add", "getMethod", "annotateIfNotEmpty", "toString", "getURI", "annotateIfNotEmpty", "getProtocol", "annotateIfNotEmpty", "getHeader", "annotateIfNotEmpty", "getHeader", "startSpan", "getPath", "getURI", "annotateSpan", "build"]}, "repository": {"repo_id": 74059585, "url": "https://github.com/GoogleCloudPlatform/cloud-trace-java-instrumentation", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 10, "size": 141, "license": "licensed"}}