{"test_class": {"identifier": "TestRateMonitor", "superclass": "", "interfaces": "", "fields": [], "file": "databus-core/databus-core-impl/src/test/java/com/linkedin/databus/core/util/TestRateMonitor.java"}, "test_case": {"identifier": "testGetRate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetRate() \n  {\n    \n    /*\n     * Use Case:\n     * RateMonitor.start();\n     * ....ticks goes here\n     * RateMonitor.getRate();\n     */\n    RateMonitor monitor = new RateMonitor(\"test\");\n    long startTime = System.nanoTime();\n    monitor.start();\n    for (int i = 0; i < 1000; ++i)\n    {\n      monitor.tick();\n      trySleep(1);\n    }\n    \n    long endTime = System.nanoTime();\n    double monitorRate = monitor.getRate();\n    double calculatedRate = 1000 * 1000000000.0 / (endTime - startTime);\n    String rateStr = monitor.toString();\n    // Difference should not be more than 5 qps & State = started\n    assertTrue(\"CalculatedRate = \" + calculatedRate + \" : MonitorRate = \" + monitorRate,  Math.abs(calculatedRate - monitorRate) < 5);\n    assertTrue(\"Monitor = \" + rateStr,rateStr.contains(\"state = STARTED\"));\n    \n    /*\n     * Use Case \n     * RateMonitor.start();\n     * ... ticks goes here\n     * RateMonitor.suspend();\n     * .. other stmts\n     * RateMonitor.getRate();\n     * RateMonitor.resume();\n     * ... ticks goes here\n     * RateMonitor.getRate();\n     * ... ticks goes here\n     * RateMonitor.stop();\n     * RateMonitor.getRate();\n     */\n    monitor = new RateMonitor(\"test\");\n    startTime = System.nanoTime();\n    monitor.start();\n   \n    for (int i = 0; i < 1000; ++i)\n    {\n      monitor.tick();\n      trySleep(1);\n    }\n    \n    endTime = System.nanoTime();\n    monitor.suspend();\n    \n    trySleep(100); //Sleep vor 100 milliSec before getting Rate\n    \n    monitorRate = monitor.getRate();\n    calculatedRate = 1000 * 1000000000.0 / (endTime - startTime);\n    rateStr = monitor.toString();\n    // Difference should not be more than 5 qps & State = started\n    assertTrue(\"CalculatedRate = \" + calculatedRate + \" : MonitorRate = \" + monitorRate,  Math.abs(calculatedRate - monitorRate) < 5);\n    assertTrue(\"Monitor = \" + rateStr,rateStr.contains(\"state = SUSPENDED\"));\n    \n    long startTime2 = System.nanoTime();\n    monitor.resume();\n    for (int i = 0; i < 200; ++i)\n    {\n      monitor.tick();\n      trySleep(1);\n    }\n    long endTime2 = System.nanoTime(); \n    monitorRate = monitor.getRate();\n    calculatedRate = 1200 * 1000000000.0 / ((endTime - startTime) + (endTime2 - startTime2));\n    rateStr = monitor.toString();\n\n    // Difference should not be more than 5 qps & State = started\n    assertTrue(\"CalculatedRate = \" + calculatedRate + \" : MonitorRate = \" + monitorRate,  Math.abs(calculatedRate - monitorRate) < 5);\n    assertTrue(\"Monitor = \" + rateStr,rateStr.contains(\"state = RESUMED\"));\n    \n    //Test For Stop State\n    endTime2 = System.nanoTime(); \n    monitor.stop();\n    calculatedRate = 1200 * 1000000000.0 / ((endTime - startTime) + (endTime2 - startTime2));\n    rateStr = monitor.toString();\n    \n    // Difference should not be more than 5 qps & State = started\n    assertTrue(\"CalculatedRate = \" + calculatedRate + \" : MonitorRate = \" + monitorRate,  Math.abs(calculatedRate - monitorRate) < 5);\n    assertTrue(\"Monitor = \" + rateStr,rateStr.contains(\"state = STOPPED\"));\n    \n    //Sleep for 500 msec and getRate. Should be same as before\n    trySleep(500);\n    String rateStr2 = monitor.toString(); //toString() calls getRate() internally\n    assertEquals(\"STOP State :\" + rateStr2, rateStr, rateStr2);\n    System.out.println(\"Done !!\");\n  }", "signature": "void testGetRate()", "full_signature": "@Test public void testGetRate()", "class_method_signature": "TestRateMonitor.testGetRate()", "testcase": true, "constructor": false, "invocations": ["nanoTime", "start", "tick", "trySleep", "nanoTime", "getRate", "toString", "assertTrue", "abs", "assertTrue", "contains", "nanoTime", "start", "tick", "trySleep", "nanoTime", "suspend", "trySleep", "getRate", "toString", "assertTrue", "abs", "assertTrue", "contains", "nanoTime", "resume", "tick", "trySleep", "nanoTime", "getRate", "toString", "assertTrue", "abs", "assertTrue", "contains", "nanoTime", "stop", "toString", "assertTrue", "abs", "assertTrue", "contains", "trySleep", "toString", "assertEquals", "println"]}, "focal_class": {"identifier": "RateMonitor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String _name;", "modifier": "private final", "type": "String", "declarator": "_name", "var_name": "_name"}, {"original_string": "private long _startTime;", "modifier": "private", "type": "long", "declarator": "_startTime", "var_name": "_startTime"}, {"original_string": "private long _numTicks;", "modifier": "private", "type": "long", "declarator": "_numTicks", "var_name": "_numTicks"}, {"original_string": "private double _rate;", "modifier": "private", "type": "double", "declarator": "_rate", "var_name": "_rate"}, {"original_string": "private long  _durationSoFar;", "modifier": "private", "type": "long", "declarator": "_durationSoFar", "var_name": "_durationSoFar"}, {"original_string": "private State _state;", "modifier": "private", "type": "State", "declarator": "_state", "var_name": "_state"}], "methods": [{"identifier": "RateMonitor", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " RateMonitor(String name)", "full_signature": "public  RateMonitor(String name)", "class_method_signature": "RateMonitor.RateMonitor(String name)", "testcase": false, "constructor": true}, {"identifier": "started", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean started()", "full_signature": "public boolean started()", "class_method_signature": "RateMonitor.started()", "testcase": false, "constructor": false}, {"identifier": "suspend", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void suspend()", "full_signature": "public void suspend()", "class_method_signature": "RateMonitor.suspend()", "testcase": false, "constructor": false}, {"identifier": "resume", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resume()", "full_signature": "public void resume()", "class_method_signature": "RateMonitor.resume()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "RateMonitor.start()", "testcase": false, "constructor": false}, {"identifier": "tick", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void tick()", "full_signature": "public void tick()", "class_method_signature": "RateMonitor.tick()", "testcase": false, "constructor": false}, {"identifier": "ticks", "parameters": "(long ticks)", "modifiers": "public", "return": "void", "signature": "void ticks(long ticks)", "full_signature": "public void ticks(long ticks)", "class_method_signature": "RateMonitor.ticks(long ticks)", "testcase": false, "constructor": false}, {"identifier": "getRate", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRate()", "full_signature": "public double getRate()", "class_method_signature": "RateMonitor.getRate()", "testcase": false, "constructor": false}, {"identifier": "getDuration", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getDuration()", "full_signature": "public long getDuration()", "class_method_signature": "RateMonitor.getDuration()", "testcase": false, "constructor": false}, {"identifier": "getNumTicks", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getNumTicks()", "full_signature": "public long getNumTicks()", "class_method_signature": "RateMonitor.getNumTicks()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "RateMonitor.stop()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RateMonitor.toString()", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "public", "return": "State", "signature": "State getState()", "full_signature": "public State getState()", "class_method_signature": "RateMonitor.getState()", "testcase": false, "constructor": false}, {"identifier": "isStarted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStarted()", "full_signature": "public boolean isStarted()", "class_method_signature": "RateMonitor.isStarted()", "testcase": false, "constructor": false}, {"identifier": "getNanoTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getNanoTime()", "full_signature": "public long getNanoTime()", "class_method_signature": "RateMonitor.getNanoTime()", "testcase": false, "constructor": false}, {"identifier": "sleep", "parameters": "(long msec)", "modifiers": "public", "return": "void", "signature": "void sleep(long msec)", "full_signature": "public void sleep(long msec)", "class_method_signature": "RateMonitor.sleep(long msec)", "testcase": false, "constructor": false}], "file": "databus-core/databus-core-impl/src/main/java/com/linkedin/databus/core/util/RateMonitor.java"}, "focal_method": {"identifier": "getRate", "parameters": "()", "modifiers": "public", "return": "double", "body": "public double getRate()\n  {\n    long duration = getDuration();\n\n    if (_numTicks > 1000000000)\n    {\n      _rate = 1000000000 * ((double)_numTicks / (double) duration );\n    }\n    else\n    {\n      _rate = _numTicks * 1000000000.0 / duration;\n    }\n    return _rate;\n  }", "signature": "double getRate()", "full_signature": "public double getRate()", "class_method_signature": "RateMonitor.getRate()", "testcase": false, "constructor": false, "invocations": ["getDuration"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}