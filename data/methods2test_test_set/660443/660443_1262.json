{"test_class": {"identifier": "PharmacophoreQueryBondTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/pcore/src/test/java/org/openscience/cdk/pharmacophore/PharmacophoreQueryBondTest.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToString() {\n        PharmacophoreQueryAtom qatom1 = new PharmacophoreQueryAtom(\"Amine\", \"[CX2]N\");\n        PharmacophoreQueryAtom qatom2 = new PharmacophoreQueryAtom(\"aromatic\", \"c1ccccc1\");\n        PharmacophoreQueryBond qbond1 = new PharmacophoreQueryBond(qatom1, qatom2, 1.0, 2.0);\n        String repr = qbond1.toString();\n        Assert.assertEquals(repr, \"DC::Amine [[CX2]N]::aromatic [c1ccccc1]::[1.0 - 2.0] \");\n    }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "PharmacophoreQueryBondTest.testToString()", "testcase": true, "constructor": false, "invocations": ["toString", "assertEquals"]}, "focal_class": {"identifier": "PharmacophoreQueryBond", "superclass": "extends Bond", "interfaces": "implements IQueryBond", "fields": [{"original_string": "private double upper;", "modifier": "private", "type": "double", "declarator": "upper", "var_name": "upper"}, {"original_string": "private double lower;", "modifier": "private", "type": "double", "declarator": "lower", "var_name": "lower"}], "methods": [{"identifier": "PharmacophoreQueryBond", "parameters": "()", "modifiers": "public", "return": "", "signature": " PharmacophoreQueryBond()", "full_signature": "public  PharmacophoreQueryBond()", "class_method_signature": "PharmacophoreQueryBond.PharmacophoreQueryBond()", "testcase": false, "constructor": true}, {"identifier": "PharmacophoreQueryBond", "parameters": "(PharmacophoreQueryAtom atom1, PharmacophoreQueryAtom atom2, double lower, double upper)", "modifiers": "public", "return": "", "signature": " PharmacophoreQueryBond(PharmacophoreQueryAtom atom1, PharmacophoreQueryAtom atom2, double lower, double upper)", "full_signature": "public  PharmacophoreQueryBond(PharmacophoreQueryAtom atom1, PharmacophoreQueryAtom atom2, double lower, double upper)", "class_method_signature": "PharmacophoreQueryBond.PharmacophoreQueryBond(PharmacophoreQueryAtom atom1, PharmacophoreQueryAtom atom2, double lower, double upper)", "testcase": false, "constructor": true}, {"identifier": "PharmacophoreQueryBond", "parameters": "(PharmacophoreQueryAtom atom1, PharmacophoreQueryAtom atom2, double distance)", "modifiers": "public", "return": "", "signature": " PharmacophoreQueryBond(PharmacophoreQueryAtom atom1, PharmacophoreQueryAtom atom2, double distance)", "full_signature": "public  PharmacophoreQueryBond(PharmacophoreQueryAtom atom1, PharmacophoreQueryAtom atom2, double distance)", "class_method_signature": "PharmacophoreQueryBond.PharmacophoreQueryBond(PharmacophoreQueryAtom atom1, PharmacophoreQueryAtom atom2, double distance)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(IBond bond)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(IBond bond)", "full_signature": "@Override public boolean matches(IBond bond)", "class_method_signature": "PharmacophoreQueryBond.matches(IBond bond)", "testcase": false, "constructor": false}, {"identifier": "getUpper", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getUpper()", "full_signature": "public double getUpper()", "class_method_signature": "PharmacophoreQueryBond.getUpper()", "testcase": false, "constructor": false}, {"identifier": "getLower", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getLower()", "full_signature": "public double getLower()", "class_method_signature": "PharmacophoreQueryBond.getLower()", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(double val, int places)", "modifiers": "private", "return": "double", "signature": "double round(double val, int places)", "full_signature": "private double round(double val, int places)", "class_method_signature": "PharmacophoreQueryBond.round(double val, int places)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PharmacophoreQueryBond.toString()", "testcase": false, "constructor": false}], "file": "tool/pcore/src/main/java/org/openscience/cdk/pharmacophore/PharmacophoreQueryBond.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toString() {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"DC::\" + getAtom(0) + \"::\" + getAtom(1) + \"::[\" + getLower() + \" - \" + getUpper() + \"] \");\n        return sb.toString();\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PharmacophoreQueryBond.toString()", "testcase": false, "constructor": false, "invocations": ["append", "getAtom", "getAtom", "getLower", "getUpper", "toString"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}