{"test_class": {"identifier": "PreparationEventUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private PreparationEventUtil preparationEventUtil;", "modifier": "@InjectMocks\n    private", "type": "PreparationEventUtil", "declarator": "preparationEventUtil", "var_name": "preparationEventUtil"}, {"original_string": "@Mock\n    private PreparationRepository preparationRepository;", "modifier": "@Mock\n    private", "type": "PreparationRepository", "declarator": "preparationRepository", "var_name": "preparationRepository"}, {"original_string": "@Mock\n    private PreparationUtils preparationUtils;", "modifier": "@Mock\n    private", "type": "PreparationUtils", "declarator": "preparationUtils", "var_name": "preparationUtils"}, {"original_string": "@Mock\n    private DatasetClient datasetClient;", "modifier": "@Mock\n    private", "type": "DatasetClient", "declarator": "datasetClient", "var_name": "datasetClient"}, {"original_string": "@Mock\n    private SecurityProxy securityProxy;", "modifier": "@Mock\n    private", "type": "SecurityProxy", "declarator": "securityProxy", "var_name": "securityProxy"}, {"original_string": "@Mock\n    private CacheKeyGenerator cacheKeyGenerator;", "modifier": "@Mock\n    private", "type": "CacheKeyGenerator", "declarator": "cacheKeyGenerator", "var_name": "cacheKeyGenerator"}, {"original_string": "@Mock\n    private CacheEventProcessingUtil cacheEventProcessingUtil;", "modifier": "@Mock\n    private", "type": "CacheEventProcessingUtil", "declarator": "cacheEventProcessingUtil", "var_name": "cacheEventProcessingUtil"}], "file": "dataprep-preparation/src/test/java/org/talend/dataprep/preparation/event/PreparationEventUtilTest.java"}, "test_case": {"identifier": "shouldRemoveStepRowMetadata", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldRemoveStepRowMetadata() {\n        // given\n        final DataSetMetadata metadata = new DataSetMetadata();\n        metadata.setId(\"ds-1234\");\n\n        final Step step1 = new Step();\n        step1.setId(UUID.randomUUID().toString());\n        step1.setRowMetadata(\"srmd-1\");\n        final Step step2 = new Step();\n        step2.setId(UUID.randomUUID().toString());\n        step2.setRowMetadata(\"srmd-2\");\n        step2.setParent(step1.id());\n        final Step step3 = new Step();\n        step3.setId(UUID.randomUUID().toString());\n        step3.setRowMetadata(null); // Intentionally left to null\n        step3.setParent(step2.id());\n\n        final PersistentPreparation preparation = new PersistentPreparation();\n        preparation.setHeadId(step3.id());\n\n        when(preparationUtils.listSteps(eq(preparation.getHeadId()), eq(preparationRepository)))\n                .thenReturn(Arrays.asList(Step.ROOT_STEP, step1, step2, step3));\n        when(preparationRepository.list(eq(PersistentPreparation.class), eq(TqlBuilder.eq(\"dataSetId\", \"ds-1234\"))))\n                .thenReturn(Stream.of(preparation), Stream.of(preparation));\n        when(preparationRepository.get(eq(step1.id()), eq(Step.class))).thenReturn(step1);\n        when(preparationRepository.get(eq(step2.id()), eq(Step.class))).thenReturn(step2);\n        when(datasetClient.getDataSetMetadata(any())).thenReturn(metadata);\n\n        // when\n        preparationEventUtil.performUpdateEvent(metadata.getId());\n\n        // then\n        verify(cacheEventProcessingUtil, times(2)).processCleanCacheEvent(any(ContentCacheKey.class), any());\n        verify(preparationRepository, times(1)).add(any(Preparation.class));\n        verify(preparationRepository, times(1)).remove(eq(StepRowMetadata.class),\n                eq(TqlBuilder.in(\"id\", \"srmd-1\", \"srmd-2\")));\n        verify(securityProxy, times(2)).asTechnicalUser();\n        verify(securityProxy, times(1)).asTechnicalUserForDataSet();\n        verify(securityProxy, times(3)).releaseIdentity();\n    }", "signature": "void shouldRemoveStepRowMetadata()", "full_signature": "@Test public void shouldRemoveStepRowMetadata()", "class_method_signature": "PreparationEventUtilTest.shouldRemoveStepRowMetadata()", "testcase": true, "constructor": false, "invocations": ["setId", "setId", "toString", "randomUUID", "setRowMetadata", "setId", "toString", "randomUUID", "setRowMetadata", "setParent", "id", "setId", "toString", "randomUUID", "setRowMetadata", "setParent", "id", "setHeadId", "id", "thenReturn", "when", "listSteps", "eq", "getHeadId", "eq", "asList", "thenReturn", "when", "list", "eq", "eq", "eq", "of", "of", "thenReturn", "when", "get", "eq", "id", "eq", "thenReturn", "when", "get", "eq", "id", "eq", "thenReturn", "when", "getDataSetMetadata", "any", "performUpdateEvent", "getId", "processCleanCacheEvent", "verify", "times", "any", "any", "add", "verify", "times", "any", "remove", "verify", "times", "eq", "eq", "in", "asTechnicalUser", "verify", "times", "asTechnicalUserForDataSet", "verify", "times", "releaseIdentity", "verify", "times"]}, "focal_class": {"identifier": "PreparationEventUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PreparationEventUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PreparationEventUtil.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private PreparationRepository preparationRepository;", "modifier": "@Autowired\n    private", "type": "PreparationRepository", "declarator": "preparationRepository", "var_name": "preparationRepository"}, {"original_string": "@Autowired\n    private PreparationUtils preparationUtils;", "modifier": "@Autowired\n    private", "type": "PreparationUtils", "declarator": "preparationUtils", "var_name": "preparationUtils"}, {"original_string": "@Autowired\n    private DatasetClient datasetClient;", "modifier": "@Autowired\n    private", "type": "DatasetClient", "declarator": "datasetClient", "var_name": "datasetClient"}, {"original_string": "@Autowired\n    private CacheKeyGenerator cacheKeyGenerator;", "modifier": "@Autowired\n    private", "type": "CacheKeyGenerator", "declarator": "cacheKeyGenerator", "var_name": "cacheKeyGenerator"}, {"original_string": "@Autowired\n    private CacheEventProcessingUtil cacheEventProcessingUtil;", "modifier": "@Autowired\n    private", "type": "CacheEventProcessingUtil", "declarator": "cacheEventProcessingUtil", "var_name": "cacheEventProcessingUtil"}, {"original_string": "@Autowired\n    private SecurityProxy securityProxy;", "modifier": "@Autowired\n    private", "type": "SecurityProxy", "declarator": "securityProxy", "var_name": "securityProxy"}], "methods": [{"identifier": "performUpdateEvent", "parameters": "(String datasetId)", "modifiers": "public", "return": "void", "signature": "void performUpdateEvent(String datasetId)", "full_signature": "public void performUpdateEvent(String datasetId)", "class_method_signature": "PreparationEventUtil.performUpdateEvent(String datasetId)", "testcase": false, "constructor": false}, {"identifier": "cleanTransformationCache", "parameters": "(String datasetId)", "modifiers": "private", "return": "void", "signature": "void cleanTransformationCache(String datasetId)", "full_signature": "private void cleanTransformationCache(String datasetId)", "class_method_signature": "PreparationEventUtil.cleanTransformationCache(String datasetId)", "testcase": false, "constructor": false}, {"identifier": "cleanTransformationMetadataCache", "parameters": "(String datasetId)", "modifiers": "private", "return": "void", "signature": "void cleanTransformationMetadataCache(String datasetId)", "full_signature": "private void cleanTransformationMetadataCache(String datasetId)", "class_method_signature": "PreparationEventUtil.cleanTransformationMetadataCache(String datasetId)", "testcase": false, "constructor": false}, {"identifier": "updatesFromDataSetMetadata", "parameters": "(String dataSetId)", "modifiers": "private", "return": "void", "signature": "void updatesFromDataSetMetadata(String dataSetId)", "full_signature": "private void updatesFromDataSetMetadata(String dataSetId)", "class_method_signature": "PreparationEventUtil.updatesFromDataSetMetadata(String dataSetId)", "testcase": false, "constructor": false}], "file": "dataprep-preparation/src/main/java/org/talend/dataprep/preparation/event/PreparationEventUtil.java"}, "focal_method": {"identifier": "performUpdateEvent", "parameters": "(String datasetId)", "modifiers": "public", "return": "void", "body": "public void performUpdateEvent(String datasetId) {\n        LOGGER.info(\"Performing update event for dataset {}\", datasetId);\n        cleanTransformationCache(datasetId);\n        cleanTransformationMetadataCache(datasetId);\n        updatesFromDataSetMetadata(datasetId);\n    }", "signature": "void performUpdateEvent(String datasetId)", "full_signature": "public void performUpdateEvent(String datasetId)", "class_method_signature": "PreparationEventUtil.performUpdateEvent(String datasetId)", "testcase": false, "constructor": false, "invocations": ["info", "cleanTransformationCache", "cleanTransformationMetadataCache", "updatesFromDataSetMetadata"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}