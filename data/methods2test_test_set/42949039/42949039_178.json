{"test_class": {"identifier": "TagHelperTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private AlternateKeyHelper alternateKeyHelper;", "modifier": "@Mock\n    private", "type": "AlternateKeyHelper", "declarator": "alternateKeyHelper", "var_name": "alternateKeyHelper"}, {"original_string": "@Mock\n    private JsonHelper jsonHelper;", "modifier": "@Mock\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@InjectMocks\n    private TagHelper tagHelper;", "modifier": "@InjectMocks\n    private", "type": "TagHelper", "declarator": "tagHelper", "var_name": "tagHelper"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/TagHelperTest.java"}, "test_case": {"identifier": "testExecuteFunctionForTagEntities", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecuteFunctionForTagEntities()\n    {\n        // Create a list of tag entities.\n        final List<TagEntity> tagEntities = Collections.unmodifiableList(Arrays\n            .asList(tagDaoTestHelper.createTagEntity(TAG_TYPE, TAG_CODE, TAG_DISPLAY_NAME, TAG_DESCRIPTION),\n                tagDaoTestHelper.createTagEntity(TAG_TYPE_2, TAG_CODE_2, TAG_DISPLAY_NAME_2, TAG_DESCRIPTION_2)));\n\n        // Mock the external calls.\n        when(jsonHelper.objectToJson(any())).thenReturn(JSON_STRING);\n\n        // Execute a function for all tag entities.\n        tagHelper.executeFunctionForTagEntities(SEARCH_INDEX_NAME, tagEntities, (indexName, id, json) -> { });\n\n        // Verify the external calls.\n        verify(jsonHelper, times(tagEntities.size())).objectToJson(any());\n        verifyNoMoreInteractions(alternateKeyHelper, jsonHelper);\n    }", "signature": "void testExecuteFunctionForTagEntities()", "full_signature": "@Test public void testExecuteFunctionForTagEntities()", "class_method_signature": "TagHelperTest.testExecuteFunctionForTagEntities()", "testcase": true, "constructor": false, "invocations": ["unmodifiableList", "asList", "createTagEntity", "createTagEntity", "thenReturn", "when", "objectToJson", "any", "executeFunctionForTagEntities", "objectToJson", "verify", "times", "size", "any", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "TagHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(TagHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(TagHelper.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private AlternateKeyHelper alternateKeyHelper;", "modifier": "@Autowired\n    private", "type": "AlternateKeyHelper", "declarator": "alternateKeyHelper", "var_name": "alternateKeyHelper"}, {"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}], "methods": [{"identifier": "executeFunctionForTagEntities", "parameters": "(final String indexName, final List<TagEntity> tagEntities,\n        final TriConsumer<String, String, String> function)", "modifiers": "public", "return": "void", "signature": "void executeFunctionForTagEntities(final String indexName, final List<TagEntity> tagEntities,\n        final TriConsumer<String, String, String> function)", "full_signature": "public void executeFunctionForTagEntities(final String indexName, final List<TagEntity> tagEntities,\n        final TriConsumer<String, String, String> function)", "class_method_signature": "TagHelper.executeFunctionForTagEntities(final String indexName, final List<TagEntity> tagEntities,\n        final TriConsumer<String, String, String> function)", "testcase": false, "constructor": false}, {"identifier": "safeObjectMapperWriteValueAsString", "parameters": "(final TagEntity tagEntity)", "modifiers": "public", "return": "String", "signature": "String safeObjectMapperWriteValueAsString(final TagEntity tagEntity)", "full_signature": "public String safeObjectMapperWriteValueAsString(final TagEntity tagEntity)", "class_method_signature": "TagHelper.safeObjectMapperWriteValueAsString(final TagEntity tagEntity)", "testcase": false, "constructor": false}, {"identifier": "validateTagKey", "parameters": "(TagKey tagKey)", "modifiers": "public", "return": "void", "signature": "void validateTagKey(TagKey tagKey)", "full_signature": "public void validateTagKey(TagKey tagKey)", "class_method_signature": "TagHelper.validateTagKey(TagKey tagKey)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/TagHelper.java"}, "focal_method": {"identifier": "executeFunctionForTagEntities", "parameters": "(final String indexName, final List<TagEntity> tagEntities,\n        final TriConsumer<String, String, String> function)", "modifiers": "public", "return": "void", "body": "public void executeFunctionForTagEntities(final String indexName, final List<TagEntity> tagEntities,\n        final TriConsumer<String, String, String> function)\n    {\n        // For each tag apply the passed in function\n        tagEntities.forEach(tagEntity -> {\n            // Fetch Join with .size()\n            tagEntity.getChildrenTagEntities().size();\n\n            // Convert the tag entity to a JSON string\n            final String jsonString = safeObjectMapperWriteValueAsString(tagEntity);\n\n            if (StringUtils.isNotEmpty(jsonString))\n            {\n                // Call the function that will process each tag entity against the index\n                try\n                {\n                    function.accept(indexName, tagEntity.getId().toString(), jsonString);\n                }\n                catch (Exception ex)\n                {\n                    LOGGER.warn(\"Index operation exception is logged {} for {}, {}, {}\", ex, indexName, tagEntity.getId().toString(), jsonString);\n                }\n            }\n        });\n\n        LOGGER.info(\"Finished processing {} tags with a search index function.\", tagEntities.size());\n    }", "signature": "void executeFunctionForTagEntities(final String indexName, final List<TagEntity> tagEntities,\n        final TriConsumer<String, String, String> function)", "full_signature": "public void executeFunctionForTagEntities(final String indexName, final List<TagEntity> tagEntities,\n        final TriConsumer<String, String, String> function)", "class_method_signature": "TagHelper.executeFunctionForTagEntities(final String indexName, final List<TagEntity> tagEntities,\n        final TriConsumer<String, String, String> function)", "testcase": false, "constructor": false, "invocations": ["forEach", "size", "getChildrenTagEntities", "safeObjectMapperWriteValueAsString", "isNotEmpty", "accept", "toString", "getId", "warn", "toString", "getId", "info", "size"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}