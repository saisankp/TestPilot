{"test_class": {"identifier": "BlockingInvocationHandlerAdapterTest", "superclass": "", "interfaces": "", "fields": [], "file": "mycontainer-components/mycontainer-commons/src/test/java/com/googlecode/mycontainer/commons/reflect/BlockingInvocationHandlerAdapterTest.java"}, "test_case": {"identifier": "testHookedAdapter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testHookedAdapter() {\n\t\tInvocationHandlerAdapter handler = new InvocationHandlerAdapter(\n\t\t\t\tnew TestServiceImpl()) {\n\t\t\t@Override\n\t\t\tpublic Object invoke(Object proxy, Method method, Object[] args)\n\t\t\t\t\tthrows Throwable {\n\t\t\t\tInteger ret = (Integer) super.invoke(proxy, method, args);\n\t\t\t\tret = ret * 2;\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t};\n\t\tTestService test = handler.createProxy(TestService.class);\n\t\tassertEquals(28, test.sum(5, 9));\n\t}", "signature": "void testHookedAdapter()", "full_signature": "@Test public void testHookedAdapter()", "class_method_signature": "BlockingInvocationHandlerAdapterTest.testHookedAdapter()", "testcase": true, "constructor": false, "invocations": ["invoke", "createProxy", "assertEquals", "sum"]}, "focal_class": {"identifier": "BlockingInvocationHandlerAdapter", "superclass": "extends InvocationHandlerAdapter", "interfaces": "", "fields": [{"original_string": "private final String domain;", "modifier": "private final", "type": "String", "declarator": "domain", "var_name": "domain"}], "methods": [{"identifier": "BlockingInvocationHandlerAdapter", "parameters": "(Object impl, String domain)", "modifiers": "public", "return": "", "signature": " BlockingInvocationHandlerAdapter(Object impl, String domain)", "full_signature": "public  BlockingInvocationHandlerAdapter(Object impl, String domain)", "class_method_signature": "BlockingInvocationHandlerAdapter.BlockingInvocationHandlerAdapter(Object impl, String domain)", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(Object proxy, Method method, Object[] args)", "modifiers": "@Override public", "return": "Object", "signature": "Object invoke(Object proxy, Method method, Object[] args)", "full_signature": "@Override public Object invoke(Object proxy, Method method, Object[] args)", "class_method_signature": "BlockingInvocationHandlerAdapter.invoke(Object proxy, Method method, Object[] args)", "testcase": false, "constructor": false}], "file": "mycontainer-components/mycontainer-commons/src/main/java/com/googlecode/mycontainer/commons/reflect/BlockingInvocationHandlerAdapter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Object proxy, Method method, Object[] args)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n\tpublic Object invoke(Object proxy, Method method, Object[] args)\n\t\t\tthrows Throwable {\n\n\t\tAllow allow = method.getAnnotation(Allow.class);\n\n\t\tif (allow != null) {\n\t\t\tfor (String domainAllowed : allow.value()) {\n\t\t\t\tif (domainAllowed.equals(domain)) {\n\t\t\t\t\treturn super.invoke(proxy, method, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthrow new RuntimeException(MessageFormat.format(\n\t\t\t\t\"Your domain ({0}) is not allowed to run the method {1}.\",\n\t\t\t\tdomain, method.getName()));\n\t}", "signature": "Object invoke(Object proxy, Method method, Object[] args)", "full_signature": "@Override public Object invoke(Object proxy, Method method, Object[] args)", "class_method_signature": "BlockingInvocationHandlerAdapter.invoke(Object proxy, Method method, Object[] args)", "testcase": false, "constructor": false, "invocations": ["getAnnotation", "value", "equals", "invoke", "format", "getName"]}, "repository": {"repo_id": 9149127, "url": "https://github.com/murer/mycontainer", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 13, "size": 1353, "license": "licensed"}}