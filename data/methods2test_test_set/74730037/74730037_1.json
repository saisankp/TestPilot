{"test_class": {"identifier": "SignProtocolTest", "superclass": "", "interfaces": "", "fields": [], "file": "BiliLiveLib/src/test/java/charlie/bililivelib/user/SignProtocolTest.java"}, "test_case": {"identifier": "signIn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void signIn() throws Exception {\n        SignProtocol signProtocol = new SignProtocol(TestSessionHelper.initSession());\n        SignProtocol.SignInfo signInfo = signProtocol.getCurrentSignInfo();\n        if (signInfo.isSignedIn()) fail();\n\n        System.out.println(signProtocol.signIn());\n    }", "signature": "void signIn()", "full_signature": "@Test public void signIn()", "class_method_signature": "SignProtocolTest.signIn()", "testcase": true, "constructor": false, "invocations": ["initSession", "getCurrentSignInfo", "isSignedIn", "fail", "println", "signIn"]}, "focal_class": {"identifier": "SignProtocol", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EXCEPTION_SIGN = \"exception.sign\";", "modifier": "private static final", "type": "String", "declarator": "EXCEPTION_SIGN = \"exception.sign\"", "var_name": "EXCEPTION_SIGN"}, {"original_string": "private static final String SIGN_INFO_G = \"/sign/GetSignInfo\";", "modifier": "private static final", "type": "String", "declarator": "SIGN_INFO_G = \"/sign/GetSignInfo\"", "var_name": "SIGN_INFO_G"}, {"original_string": "private static final String DO_SIGN_IN_G = \"/sign/doSign\";", "modifier": "private static final", "type": "String", "declarator": "DO_SIGN_IN_G = \"/sign/doSign\"", "var_name": "DO_SIGN_IN_G"}, {"original_string": "private static final int STATUS_NOT_LOGGED_IN = -105;", "modifier": "private static final", "type": "int", "declarator": "STATUS_NOT_LOGGED_IN = -105", "var_name": "STATUS_NOT_LOGGED_IN"}, {"original_string": "private HttpHelper httpHelper;", "modifier": "private", "type": "HttpHelper", "declarator": "httpHelper", "var_name": "httpHelper"}], "methods": [{"identifier": "SignProtocol", "parameters": "(@NotNull Session session)", "modifiers": "public", "return": "", "signature": " SignProtocol(@NotNull Session session)", "full_signature": "public  SignProtocol(@NotNull Session session)", "class_method_signature": "SignProtocol.SignProtocol(@NotNull Session session)", "testcase": false, "constructor": true}, {"identifier": "signIn", "parameters": "()", "modifiers": "public", "return": "DoSignInfo", "signature": "DoSignInfo signIn()", "full_signature": "public DoSignInfo signIn()", "class_method_signature": "SignProtocol.signIn()", "testcase": false, "constructor": false}, {"identifier": "getCurrentSignInfo", "parameters": "()", "modifiers": "public", "return": "SignInfo", "signature": "SignInfo getCurrentSignInfo()", "full_signature": "public SignInfo getCurrentSignInfo()", "class_method_signature": "SignProtocol.getCurrentSignInfo()", "testcase": false, "constructor": false}], "file": "BiliLiveLib/src/main/java/charlie/bililivelib/user/SignProtocol.java"}, "focal_method": {"identifier": "signIn", "parameters": "()", "modifiers": "public", "return": "DoSignInfo", "body": "public DoSignInfo signIn() throws BiliLiveException {\n        DoSignInfo doSignInfo = httpHelper.getBiliLiveJSON(DO_SIGN_IN_G, DoSignInfo.class, EXCEPTION_SIGN);\n        if (doSignInfo.getCode() == -101) throw new NotLoggedInException();\n        return doSignInfo;\n    }", "signature": "DoSignInfo signIn()", "full_signature": "public DoSignInfo signIn()", "class_method_signature": "SignProtocol.signIn()", "testcase": false, "constructor": false, "invocations": ["getBiliLiveJSON", "getCode"]}, "repository": {"repo_id": 74730037, "url": "https://github.com/cqjjjzr/BiliLiveLib", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 17, "size": 535, "license": "licensed"}}