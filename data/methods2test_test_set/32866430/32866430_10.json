{"test_class": {"identifier": "SanitizedSecretWithGroupsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SanitizedSecret sanitizedSecret = SanitizedSecret.of(\n      767,\n      \"trapdoor\",\n      \"v1\",\n      \"checksum\",\n      ApiDate.parse(\"2013-03-28T21:42:42.000Z\"),\n      \"keywhizAdmin\",\n      ApiDate.parse(\"2013-03-28T21:42:42.000Z\"),\n      \"keywhizAdmin\",\n      ImmutableMap.of(\"owner\", \"the king\"),\n      \"password\",\n      ImmutableMap.of(\"favoriteFood\", \"PB&J sandwich\"),\n      1136214245,\n      1L,\n      ApiDate.parse(\"2013-03-28T21:42:42.000Z\"),\n      \"keywhizAdmin\");", "modifier": "private", "type": "SanitizedSecret", "declarator": "sanitizedSecret = SanitizedSecret.of(\n      767,\n      \"trapdoor\",\n      \"v1\",\n      \"checksum\",\n      ApiDate.parse(\"2013-03-28T21:42:42.000Z\"),\n      \"keywhizAdmin\",\n      ApiDate.parse(\"2013-03-28T21:42:42.000Z\"),\n      \"keywhizAdmin\",\n      ImmutableMap.of(\"owner\", \"the king\"),\n      \"password\",\n      ImmutableMap.of(\"favoriteFood\", \"PB&J sandwich\"),\n      1136214245,\n      1L,\n      ApiDate.parse(\"2013-03-28T21:42:42.000Z\"),\n      \"keywhizAdmin\")", "var_name": "sanitizedSecret"}, {"original_string": "private List<Group> groups;", "modifier": "private", "type": "List<Group>", "declarator": "groups", "var_name": "groups"}], "file": "api/src/test/java/keywhiz/api/model/SanitizedSecretWithGroupsTest.java"}, "test_case": {"identifier": "serializesCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void serializesCorrectly() throws Exception {\n    SanitizedSecretWithGroups sanitizedSecretWithGroups = SanitizedSecretWithGroups.of(sanitizedSecret, groups);\n    assertThat(asJson(sanitizedSecretWithGroups))\n        .isEqualTo(jsonFixture(\"fixtures/sanitizedSecretWithGroups.json\"));\n  }", "signature": "void serializesCorrectly()", "full_signature": "@Test public void serializesCorrectly()", "class_method_signature": "SanitizedSecretWithGroupsTest.serializesCorrectly()", "testcase": true, "constructor": false, "invocations": ["of", "isEqualTo", "assertThat", "asJson", "jsonFixture"]}, "focal_class": {"identifier": "SanitizedSecretWithGroups", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "of", "parameters": "(\n      @JsonProperty(\"secret\") SanitizedSecret secret,\n      @JsonProperty(\"groups\") List<Group> groups)", "modifiers": "@JsonCreator public static", "return": "SanitizedSecretWithGroups", "signature": "SanitizedSecretWithGroups of(\n      @JsonProperty(\"secret\") SanitizedSecret secret,\n      @JsonProperty(\"groups\") List<Group> groups)", "full_signature": "@JsonCreator public static SanitizedSecretWithGroups of(\n      @JsonProperty(\"secret\") SanitizedSecret secret,\n      @JsonProperty(\"groups\") List<Group> groups)", "class_method_signature": "SanitizedSecretWithGroups.of(\n      @JsonProperty(\"secret\") SanitizedSecret secret,\n      @JsonProperty(\"groups\") List<Group> groups)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(long id, String name, List<Group> groups)", "modifiers": "public static", "return": "SanitizedSecretWithGroups", "signature": "SanitizedSecretWithGroups of(long id, String name, List<Group> groups)", "full_signature": "public static SanitizedSecretWithGroups of(long id, String name, List<Group> groups)", "class_method_signature": "SanitizedSecretWithGroups.of(long id, String name, List<Group> groups)", "testcase": false, "constructor": false}, {"identifier": "fromSecretSeriesAndContentAndGroups", "parameters": "(SecretSeriesAndContent seriesAndContent, List<Group> groups)", "modifiers": "public static", "return": "SanitizedSecretWithGroups", "signature": "SanitizedSecretWithGroups fromSecretSeriesAndContentAndGroups(SecretSeriesAndContent seriesAndContent, List<Group> groups)", "full_signature": "public static SanitizedSecretWithGroups fromSecretSeriesAndContentAndGroups(SecretSeriesAndContent seriesAndContent, List<Group> groups)", "class_method_signature": "SanitizedSecretWithGroups.fromSecretSeriesAndContentAndGroups(SecretSeriesAndContent seriesAndContent, List<Group> groups)", "testcase": false, "constructor": false}, {"identifier": "fromSecret", "parameters": "(Secret secret, List<Group> groups)", "modifiers": "public static", "return": "SanitizedSecretWithGroups", "signature": "SanitizedSecretWithGroups fromSecret(Secret secret, List<Group> groups)", "full_signature": "public static SanitizedSecretWithGroups fromSecret(Secret secret, List<Group> groups)", "class_method_signature": "SanitizedSecretWithGroups.fromSecret(Secret secret, List<Group> groups)", "testcase": false, "constructor": false}, {"identifier": "secret", "parameters": "()", "modifiers": "@JsonProperty public abstract", "return": "SanitizedSecret", "signature": "SanitizedSecret secret()", "full_signature": "@JsonProperty public abstract SanitizedSecret secret()", "class_method_signature": "SanitizedSecretWithGroups.secret()", "testcase": false, "constructor": false}, {"identifier": "groups", "parameters": "()", "modifiers": "@JsonProperty public abstract", "return": "List<Group>", "signature": "List<Group> groups()", "full_signature": "@JsonProperty public abstract List<Group> groups()", "class_method_signature": "SanitizedSecretWithGroups.groups()", "testcase": false, "constructor": false}, {"identifier": "displayName", "parameters": "(SanitizedSecretWithGroups sanitizedSecretWithGroups)", "modifiers": "public static", "return": "String", "signature": "String displayName(SanitizedSecretWithGroups sanitizedSecretWithGroups)", "full_signature": "public static String displayName(SanitizedSecretWithGroups sanitizedSecretWithGroups)", "class_method_signature": "SanitizedSecretWithGroups.displayName(SanitizedSecretWithGroups sanitizedSecretWithGroups)", "testcase": false, "constructor": false}], "file": "api/src/main/java/keywhiz/api/model/SanitizedSecretWithGroups.java"}, "focal_method": {"identifier": "of", "parameters": "(\n      @JsonProperty(\"secret\") SanitizedSecret secret,\n      @JsonProperty(\"groups\") List<Group> groups)", "modifiers": "@JsonCreator public static", "return": "SanitizedSecretWithGroups", "body": "@JsonCreator public static SanitizedSecretWithGroups of(\n      @JsonProperty(\"secret\") SanitizedSecret secret,\n      @JsonProperty(\"groups\") List<Group> groups) {\n    return new AutoValue_SanitizedSecretWithGroups(secret, groups);\n  }", "signature": "SanitizedSecretWithGroups of(\n      @JsonProperty(\"secret\") SanitizedSecret secret,\n      @JsonProperty(\"groups\") List<Group> groups)", "full_signature": "@JsonCreator public static SanitizedSecretWithGroups of(\n      @JsonProperty(\"secret\") SanitizedSecret secret,\n      @JsonProperty(\"groups\") List<Group> groups)", "class_method_signature": "SanitizedSecretWithGroups.of(\n      @JsonProperty(\"secret\") SanitizedSecret secret,\n      @JsonProperty(\"groups\") List<Group> groups)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}