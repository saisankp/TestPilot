{"test_class": {"identifier": "VectorInteractionMapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/dataproc/vector/VectorInteractionMapperTest.java"}, "test_case": {"identifier": "testReserveTwoCol", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testReserveTwoCol() throws Exception {\n\t\tTableSchema schema = new TableSchema(new String[] {\"c0\", \"c1\"},\n\t\t\tnew TypeInformation <?>[] {Types.STRING, Types.STRING});\n\n\t\tTableSchema outSchema = new TableSchema(new String[] {\"c0\", \"c1\", \"out\"},\n\t\t\tnew TypeInformation <?>[] {Types.STRING, Types.STRING, VectorTypes.VECTOR});\n\n\t\tParams params = new Params()\n\t\t\t.set(VectorInteractionParams.SELECTED_COLS, new String[] {\"c0\", \"c1\"})\n\t\t\t.set(VectorInteractionParams.OUTPUT_COL, \"out\");\n\n\t\tVectorInteractionMapper mapper = new VectorInteractionMapper(schema, params);\n\n\t\tassertEquals(mapper.map(Row.of(new DenseVector(new double[]{3.0, 4.0}), new DenseVector(new double[]{3.0, 4.0})))\n\t\t\t\t.getField(2), new DenseVector(new double[]{9.0, 12.0, 12.0, 16.0}));\n\t\tassertEquals(mapper.getOutputSchema(), outSchema);\n\t}", "signature": "void testReserveTwoCol()", "full_signature": "@Test public void testReserveTwoCol()", "class_method_signature": "VectorInteractionMapperTest.testReserveTwoCol()", "testcase": true, "constructor": false, "invocations": ["set", "set", "assertEquals", "getField", "map", "of", "assertEquals", "getOutputSchema"]}, "focal_class": {"identifier": "VectorInteractionMapper", "superclass": "extends MISOMapper", "interfaces": "", "fields": [], "methods": [{"identifier": "VectorInteractionMapper", "parameters": "(TableSchema dataSchema, Params params)", "modifiers": "public", "return": "", "signature": " VectorInteractionMapper(TableSchema dataSchema, Params params)", "full_signature": "public  VectorInteractionMapper(TableSchema dataSchema, Params params)", "class_method_signature": "VectorInteractionMapper.VectorInteractionMapper(TableSchema dataSchema, Params params)", "testcase": false, "constructor": true}, {"identifier": "initOutputColType", "parameters": "()", "modifiers": "@Override protected", "return": "TypeInformation", "signature": "TypeInformation initOutputColType()", "full_signature": "@Override protected TypeInformation initOutputColType()", "class_method_signature": "VectorInteractionMapper.initOutputColType()", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(Object[] input)", "modifiers": "@Override protected", "return": "Object", "signature": "Object map(Object[] input)", "full_signature": "@Override protected Object map(Object[] input)", "class_method_signature": "VectorInteractionMapper.map(Object[] input)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/dataproc/vector/VectorInteractionMapper.java"}, "focal_method": {"identifier": "map", "parameters": "(Object[] input)", "modifiers": "@Override protected", "return": "Object", "body": "@Override\n    protected Object map(Object[] input) {\n        if (input.length != 2) {\n            throw new IllegalArgumentException(\"VectorInteraction only support two input columns.\");\n        }\n\n        if (input[0] == null || input[1] == null) {\n            return null;\n        }\n\n        Vector vector1 = VectorUtil.getVector(input[0]);\n        Vector vector2 = VectorUtil.getVector(input[1]);\n\n        if (vector1 instanceof SparseVector) {\n            if (vector2 instanceof DenseVector) {\n                throw new IllegalArgumentException(\"Make sure the two input vectors are both dense or sparse.\");\n            }\n            SparseVector sparseVector = (SparseVector) vector1;\n            int vecSize = sparseVector.size();\n            int[] indices = sparseVector.getIndices();\n            double[] values = sparseVector.getValues();\n            SparseVector scalingVector = (SparseVector) vector2;\n            int scalingSize = scalingVector.size();\n            int[] scalingIndices = scalingVector.getIndices();\n            double[] scalingValues = scalingVector.getValues();\n            double[] interactionValues = new double[scalingIndices.length * indices.length];\n            int[] interactionIndices = new int[scalingIndices.length * indices.length];\n            for (int i = 0; i < indices.length; ++i) {\n                int idxBase = i * scalingIndices.length;\n                for (int j = 0; j < scalingIndices.length; ++j) {\n                    int idx = idxBase + j;\n                    interactionIndices[idx] = vecSize * scalingIndices[j] + indices[i];\n                    interactionValues[idx] = values[i] * scalingValues[j];\n                }\n            }\n            return new SparseVector(vecSize * scalingSize, interactionIndices, interactionValues);\n        } else {\n\t\t\tif (vector2 instanceof SparseVector) {\n\t\t\t\tthrow new IllegalArgumentException(\"Make sure the two input vectors are both dense or sparse.\");\n\t\t\t}\n            double[] vecArray = ((DenseVector) vector1).getData();\n            double[] scalingArray = ((DenseVector) vector2).getData();\n            DenseVector inter = new DenseVector(vecArray.length * scalingArray.length);\n            double[] interArray = inter.getData();\n            for (int i = 0; i < vecArray.length; ++i) {\n                int idxBase = i * scalingArray.length;\n                for (int j = 0; j < scalingArray.length; ++j) {\n                    interArray[idxBase + j] = vecArray[i] * scalingArray[j];\n                }\n            }\n            return inter;\n        }\n\n    }", "signature": "Object map(Object[] input)", "full_signature": "@Override protected Object map(Object[] input)", "class_method_signature": "VectorInteractionMapper.map(Object[] input)", "testcase": false, "constructor": false, "invocations": ["getVector", "getVector", "size", "getIndices", "getValues", "size", "getIndices", "getValues", "getData", "getData", "getData"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}