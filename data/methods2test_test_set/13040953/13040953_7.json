{"test_class": {"identifier": "XmlReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String XML5 = \"xml-prolog-encoding-spaced-single-quotes\";", "modifier": "private static final", "type": "String", "declarator": "XML5 = \"xml-prolog-encoding-spaced-single-quotes\"", "var_name": "XML5"}, {"original_string": "private static final String XML4 = \"xml-prolog-encoding-single-quotes\";", "modifier": "private static final", "type": "String", "declarator": "XML4 = \"xml-prolog-encoding-single-quotes\"", "var_name": "XML4"}, {"original_string": "private static final String XML3 = \"xml-prolog-encoding-double-quotes\";", "modifier": "private static final", "type": "String", "declarator": "XML3 = \"xml-prolog-encoding-double-quotes\"", "var_name": "XML3"}, {"original_string": "private static final String XML2 = \"xml-prolog\";", "modifier": "private static final", "type": "String", "declarator": "XML2 = \"xml-prolog\"", "var_name": "XML2"}, {"original_string": "private static final String XML1 = \"xml\";", "modifier": "private static final", "type": "String", "declarator": "XML1 = \"xml\"", "var_name": "XML1"}, {"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private static final String ENCODING_ATTRIBUTE_XML = \"<?xml version=\\\"1.0\\\" ?> \\n\" + \"<atom:feed xmlns:atom=\\\"http://www.w3.org/2005/Atom\\\">\\n\" + \"\\n\"\n            + \"  <atom:entry>\\n\" + \"    <atom:title encoding=\\\"base64\\\"><![CDATA\\n\" + \"aW5nTGluZSIgLz4\";", "modifier": "private static final", "type": "String", "declarator": "ENCODING_ATTRIBUTE_XML = \"<?xml version=\\\"1.0\\\" ?> \\n\" + \"<atom:feed xmlns:atom=\\\"http://www.w3.org/2005/Atom\\\">\\n\" + \"\\n\"\n            + \"  <atom:entry>\\n\" + \"    <atom:title encoding=\\\"base64\\\"><![CDATA\\n\" + \"aW5nTGluZSIgLz4\"", "var_name": "ENCODING_ATTRIBUTE_XML"}, {"original_string": "private static final int[] NO_BOM_BYTES = {};", "modifier": "private static final", "type": "int[]", "declarator": "NO_BOM_BYTES = {}", "var_name": "NO_BOM_BYTES"}, {"original_string": "private static final int[] UTF_16BE_BOM_BYTES = { 0xFE, 0xFF };", "modifier": "private static final", "type": "int[]", "declarator": "UTF_16BE_BOM_BYTES = { 0xFE, 0xFF }", "var_name": "UTF_16BE_BOM_BYTES"}, {"original_string": "private static final int[] UTF_16LE_BOM_BYTES = { 0xFF, 0XFE };", "modifier": "private static final", "type": "int[]", "declarator": "UTF_16LE_BOM_BYTES = { 0xFF, 0XFE }", "var_name": "UTF_16LE_BOM_BYTES"}, {"original_string": "private static final int[] UTF_8_BOM_BYTES = { 0xEF, 0xBB, 0xBF };", "modifier": "private static final", "type": "int[]", "declarator": "UTF_8_BOM_BYTES = { 0xEF, 0xBB, 0xBF }", "var_name": "UTF_8_BOM_BYTES"}, {"original_string": "private static final Map<String, int[]> BOMs = new HashMap<String, int[]>();", "modifier": "private static final", "type": "Map<String, int[]>", "declarator": "BOMs = new HashMap<String, int[]>()", "var_name": "BOMs"}, {"original_string": "private static final MessageFormat XML = new MessageFormat(\"<root>{2}</root>\");", "modifier": "private static final", "type": "MessageFormat", "declarator": "XML = new MessageFormat(\"<root>{2}</root>\")", "var_name": "XML"}, {"original_string": "private static final MessageFormat XML_WITH_PROLOG = new MessageFormat(\"<?xml version=\\\"1.0\\\"?>\\n<root>{2}</root>\");", "modifier": "private static final", "type": "MessageFormat", "declarator": "XML_WITH_PROLOG = new MessageFormat(\"<?xml version=\\\"1.0\\\"?>\\n<root>{2}</root>\")", "var_name": "XML_WITH_PROLOG"}, {"original_string": "private static final MessageFormat XML_WITH_PROLOG_AND_ENCODING_DOUBLE_QUOTES = new MessageFormat(\n            \"<?xml version=\\\"1.0\\\" encoding=\\\"{1}\\\"?>\\n<root>{2}</root>\");", "modifier": "private static final", "type": "MessageFormat", "declarator": "XML_WITH_PROLOG_AND_ENCODING_DOUBLE_QUOTES = new MessageFormat(\n            \"<?xml version=\\\"1.0\\\" encoding=\\\"{1}\\\"?>\\n<root>{2}</root>\")", "var_name": "XML_WITH_PROLOG_AND_ENCODING_DOUBLE_QUOTES"}, {"original_string": "private static final MessageFormat XML_WITH_PROLOG_AND_ENCODING_SINGLE_QUOTES = new MessageFormat(\n            \"<?xml version=\\\"1.0\\\" encoding=''{1}''?>\\n<root>{2}</root>\");", "modifier": "private static final", "type": "MessageFormat", "declarator": "XML_WITH_PROLOG_AND_ENCODING_SINGLE_QUOTES = new MessageFormat(\n            \"<?xml version=\\\"1.0\\\" encoding=''{1}''?>\\n<root>{2}</root>\")", "var_name": "XML_WITH_PROLOG_AND_ENCODING_SINGLE_QUOTES"}, {"original_string": "private static final MessageFormat XML_WITH_PROLOG_AND_ENCODING_SPACED_SINGLE_QUOTES = new MessageFormat(\n            \"<?xml version=\\\"1.0\\\" encoding =  \\t \\n \\r''{1}''?>\\n<root>{2}</root>\");", "modifier": "private static final", "type": "MessageFormat", "declarator": "XML_WITH_PROLOG_AND_ENCODING_SPACED_SINGLE_QUOTES = new MessageFormat(\n            \"<?xml version=\\\"1.0\\\" encoding =  \\t \\n \\r''{1}''?>\\n<root>{2}</root>\")", "var_name": "XML_WITH_PROLOG_AND_ENCODING_SPACED_SINGLE_QUOTES"}, {"original_string": "private static final MessageFormat INFO = new MessageFormat(\"\\nBOM : {0}\\nDoc : {1}\\nStream Enc : {2}\\nProlog Enc : {3}\\n\");", "modifier": "private static final", "type": "MessageFormat", "declarator": "INFO = new MessageFormat(\"\\nBOM : {0}\\nDoc : {1}\\nStream Enc : {2}\\nProlog Enc : {3}\\n\")", "var_name": "INFO"}, {"original_string": "private static final Map<String, MessageFormat> XMLs = new HashMap<String, MessageFormat>();", "modifier": "private static final", "type": "Map<String, MessageFormat>", "declarator": "XMLs = new HashMap<String, MessageFormat>()", "var_name": "XMLs"}], "file": "rome/src/test/java/com/rometools/rome/io/XmlReaderTest.java"}, "test_case": {"identifier": "testGetXmlProlog_UppercaseResult", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetXmlProlog_UppercaseResult() throws IOException {\n        final InputStream input = stringToStream(\"<?xml encoding=\\\"utf-8\\\"?>\", \"UTF-8\");\n        final String guessedEncoding = \"UTF-8\";\n\n        assertEquals(\"UTF-8\", XmlReader.getXmlProlog(input, guessedEncoding));\n    }", "signature": "void testGetXmlProlog_UppercaseResult()", "full_signature": "@Test public void testGetXmlProlog_UppercaseResult()", "class_method_signature": "XmlReaderTest.testGetXmlProlog_UppercaseResult()", "testcase": true, "constructor": false, "invocations": ["stringToStream", "assertEquals", "getXmlProlog"]}, "focal_class": {"identifier": "XmlReader", "superclass": "extends Reader", "interfaces": "", "fields": [{"original_string": "private static final int BUFFER_SIZE = 4096;", "modifier": "private static final", "type": "int", "declarator": "BUFFER_SIZE = 4096", "var_name": "BUFFER_SIZE"}, {"original_string": "private static final String US_ASCII = \"US-ASCII\";", "modifier": "private static final", "type": "String", "declarator": "US_ASCII = \"US-ASCII\"", "var_name": "US_ASCII"}, {"original_string": "private static final String UTF_8 = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "UTF_8 = \"UTF-8\"", "var_name": "UTF_8"}, {"original_string": "private static final String UTF_16BE = \"UTF-16BE\";", "modifier": "private static final", "type": "String", "declarator": "UTF_16BE = \"UTF-16BE\"", "var_name": "UTF_16BE"}, {"original_string": "private static final String UTF_16LE = \"UTF-16LE\";", "modifier": "private static final", "type": "String", "declarator": "UTF_16LE = \"UTF-16LE\"", "var_name": "UTF_16LE"}, {"original_string": "private static final String UTF_16 = \"UTF-16\";", "modifier": "private static final", "type": "String", "declarator": "UTF_16 = \"UTF-16\"", "var_name": "UTF_16"}, {"original_string": "private static final String CP1047 = \"CP1047\";", "modifier": "private static final", "type": "String", "declarator": "CP1047 = \"CP1047\"", "var_name": "CP1047"}, {"original_string": "private static final Pattern CHARSET_PATTERN = Pattern.compile(\"charset=([.[^; ]]*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "CHARSET_PATTERN = Pattern.compile(\"charset=([.[^; ]]*)\")", "var_name": "CHARSET_PATTERN"}, {"original_string": "private static final Pattern ENCODING_PATTERN = Pattern.compile(\"<\\\\?xml.*encoding[\\\\s]*=[\\\\s]*((?:\\\".[^\\\"]*\\\")|(?:'.[^']*'))\", Pattern.MULTILINE);", "modifier": "private static final", "type": "Pattern", "declarator": "ENCODING_PATTERN = Pattern.compile(\"<\\\\?xml.*encoding[\\\\s]*=[\\\\s]*((?:\\\".[^\\\"]*\\\")|(?:'.[^']*'))\", Pattern.MULTILINE)", "var_name": "ENCODING_PATTERN"}, {"original_string": "private static final MessageFormat RAW_EX_1 = new MessageFormat(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch\");", "modifier": "private static final", "type": "MessageFormat", "declarator": "RAW_EX_1 = new MessageFormat(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch\")", "var_name": "RAW_EX_1"}, {"original_string": "private static final MessageFormat RAW_EX_2 = new MessageFormat(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] unknown BOM\");", "modifier": "private static final", "type": "MessageFormat", "declarator": "RAW_EX_2 = new MessageFormat(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] unknown BOM\")", "var_name": "RAW_EX_2"}, {"original_string": "private static final MessageFormat HTTP_EX_1 = new MessageFormat(\n            \"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], BOM must be NULL\");", "modifier": "private static final", "type": "MessageFormat", "declarator": "HTTP_EX_1 = new MessageFormat(\n            \"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], BOM must be NULL\")", "var_name": "HTTP_EX_1"}, {"original_string": "private static final MessageFormat HTTP_EX_2 = new MessageFormat(\n            \"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], encoding mismatch\");", "modifier": "private static final", "type": "MessageFormat", "declarator": "HTTP_EX_2 = new MessageFormat(\n            \"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], encoding mismatch\")", "var_name": "HTTP_EX_2"}, {"original_string": "private static final MessageFormat HTTP_EX_3 = new MessageFormat(\n            \"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], Invalid MIME\");", "modifier": "private static final", "type": "MessageFormat", "declarator": "HTTP_EX_3 = new MessageFormat(\n            \"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], Invalid MIME\")", "var_name": "HTTP_EX_3"}, {"original_string": "private static String staticDefaultEncoding = null;", "modifier": "private static", "type": "String", "declarator": "staticDefaultEncoding = null", "var_name": "staticDefaultEncoding"}, {"original_string": "private final String defaultEncoding;", "modifier": "private final", "type": "String", "declarator": "defaultEncoding", "var_name": "defaultEncoding"}, {"original_string": "private Reader reader;", "modifier": "private", "type": "Reader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private String encoding;", "modifier": "private", "type": "String", "declarator": "encoding", "var_name": "encoding"}], "methods": [{"identifier": "XmlReader", "parameters": "(final File file)", "modifiers": "public", "return": "", "signature": " XmlReader(final File file)", "full_signature": "public  XmlReader(final File file)", "class_method_signature": "XmlReader.XmlReader(final File file)", "testcase": false, "constructor": true}, {"identifier": "XmlReader", "parameters": "(final InputStream is)", "modifiers": "public", "return": "", "signature": " XmlReader(final InputStream is)", "full_signature": "public  XmlReader(final InputStream is)", "class_method_signature": "XmlReader.XmlReader(final InputStream is)", "testcase": false, "constructor": true}, {"identifier": "XmlReader", "parameters": "(final InputStream is, final boolean lenient, final String defaultEncoding)", "modifiers": "public", "return": "", "signature": " XmlReader(final InputStream is, final boolean lenient, final String defaultEncoding)", "full_signature": "public  XmlReader(final InputStream is, final boolean lenient, final String defaultEncoding)", "class_method_signature": "XmlReader.XmlReader(final InputStream is, final boolean lenient, final String defaultEncoding)", "testcase": false, "constructor": true}, {"identifier": "XmlReader", "parameters": "(final InputStream is, final boolean lenient)", "modifiers": "public", "return": "", "signature": " XmlReader(final InputStream is, final boolean lenient)", "full_signature": "public  XmlReader(final InputStream is, final boolean lenient)", "class_method_signature": "XmlReader.XmlReader(final InputStream is, final boolean lenient)", "testcase": false, "constructor": true}, {"identifier": "XmlReader", "parameters": "(final URL url)", "modifiers": "public", "return": "", "signature": " XmlReader(final URL url)", "full_signature": "public  XmlReader(final URL url)", "class_method_signature": "XmlReader.XmlReader(final URL url)", "testcase": false, "constructor": true}, {"identifier": "XmlReader", "parameters": "(final URL url, final Map<String, String> requestHeaders)", "modifiers": "public", "return": "", "signature": " XmlReader(final URL url, final Map<String, String> requestHeaders)", "full_signature": "public  XmlReader(final URL url, final Map<String, String> requestHeaders)", "class_method_signature": "XmlReader.XmlReader(final URL url, final Map<String, String> requestHeaders)", "testcase": false, "constructor": true}, {"identifier": "XmlReader", "parameters": "(final URLConnection conn)", "modifiers": "public", "return": "", "signature": " XmlReader(final URLConnection conn)", "full_signature": "public  XmlReader(final URLConnection conn)", "class_method_signature": "XmlReader.XmlReader(final URLConnection conn)", "testcase": false, "constructor": true}, {"identifier": "XmlReader", "parameters": "(final URLConnection conn, final Map<String, String> requestHeaders)", "modifiers": "public", "return": "", "signature": " XmlReader(final URLConnection conn, final Map<String, String> requestHeaders)", "full_signature": "public  XmlReader(final URLConnection conn, final Map<String, String> requestHeaders)", "class_method_signature": "XmlReader.XmlReader(final URLConnection conn, final Map<String, String> requestHeaders)", "testcase": false, "constructor": true}, {"identifier": "XmlReader", "parameters": "(final InputStream is, final String httpContentType)", "modifiers": "public", "return": "", "signature": " XmlReader(final InputStream is, final String httpContentType)", "full_signature": "public  XmlReader(final InputStream is, final String httpContentType)", "class_method_signature": "XmlReader.XmlReader(final InputStream is, final String httpContentType)", "testcase": false, "constructor": true}, {"identifier": "XmlReader", "parameters": "(final InputStream is, final String httpContentType, final boolean lenient, final String defaultEncoding)", "modifiers": "public", "return": "", "signature": " XmlReader(final InputStream is, final String httpContentType, final boolean lenient, final String defaultEncoding)", "full_signature": "public  XmlReader(final InputStream is, final String httpContentType, final boolean lenient, final String defaultEncoding)", "class_method_signature": "XmlReader.XmlReader(final InputStream is, final String httpContentType, final boolean lenient, final String defaultEncoding)", "testcase": false, "constructor": true}, {"identifier": "XmlReader", "parameters": "(final InputStream is, final String httpContentType, final boolean lenient)", "modifiers": "public", "return": "", "signature": " XmlReader(final InputStream is, final String httpContentType, final boolean lenient)", "full_signature": "public  XmlReader(final InputStream is, final String httpContentType, final boolean lenient)", "class_method_signature": "XmlReader.XmlReader(final InputStream is, final String httpContentType, final boolean lenient)", "testcase": false, "constructor": true}, {"identifier": "getDefaultEncoding", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getDefaultEncoding()", "full_signature": "public static String getDefaultEncoding()", "class_method_signature": "XmlReader.getDefaultEncoding()", "testcase": false, "constructor": false}, {"identifier": "setDefaultEncoding", "parameters": "(final String encoding)", "modifiers": "public static", "return": "void", "signature": "void setDefaultEncoding(final String encoding)", "full_signature": "public static void setDefaultEncoding(final String encoding)", "class_method_signature": "XmlReader.setDefaultEncoding(final String encoding)", "testcase": false, "constructor": false}, {"identifier": "getEncoding", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEncoding()", "full_signature": "public String getEncoding()", "class_method_signature": "XmlReader.getEncoding()", "testcase": false, "constructor": false}, {"identifier": "doLenientDetection", "parameters": "(String httpContentType, XmlReaderException ex)", "modifiers": "private", "return": "void", "signature": "void doLenientDetection(String httpContentType, XmlReaderException ex)", "full_signature": "private void doLenientDetection(String httpContentType, XmlReaderException ex)", "class_method_signature": "XmlReader.doLenientDetection(String httpContentType, XmlReaderException ex)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(final char[] buf, final int offset, final int len)", "modifiers": "@Override public", "return": "int", "signature": "int read(final char[] buf, final int offset, final int len)", "full_signature": "@Override public int read(final char[] buf, final int offset, final int len)", "class_method_signature": "XmlReader.read(final char[] buf, final int offset, final int len)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "XmlReader.close()", "testcase": false, "constructor": false}, {"identifier": "doRawStream", "parameters": "(final InputStream is, final boolean lenient)", "modifiers": "private", "return": "void", "signature": "void doRawStream(final InputStream is, final boolean lenient)", "full_signature": "private void doRawStream(final InputStream is, final boolean lenient)", "class_method_signature": "XmlReader.doRawStream(final InputStream is, final boolean lenient)", "testcase": false, "constructor": false}, {"identifier": "doHttpStream", "parameters": "(final InputStream is, final String httpContentType, final boolean lenient)", "modifiers": "private", "return": "void", "signature": "void doHttpStream(final InputStream is, final String httpContentType, final boolean lenient)", "full_signature": "private void doHttpStream(final InputStream is, final String httpContentType, final boolean lenient)", "class_method_signature": "XmlReader.doHttpStream(final InputStream is, final String httpContentType, final boolean lenient)", "testcase": false, "constructor": false}, {"identifier": "prepareReader", "parameters": "(final InputStream is, final String encoding)", "modifiers": "private", "return": "void", "signature": "void prepareReader(final InputStream is, final String encoding)", "full_signature": "private void prepareReader(final InputStream is, final String encoding)", "class_method_signature": "XmlReader.prepareReader(final InputStream is, final String encoding)", "testcase": false, "constructor": false}, {"identifier": "calculateRawEncoding", "parameters": "(final String bomEnc, final String xmlGuessEnc, final String xmlEnc, final InputStream is)", "modifiers": "private", "return": "String", "signature": "String calculateRawEncoding(final String bomEnc, final String xmlGuessEnc, final String xmlEnc, final InputStream is)", "full_signature": "private String calculateRawEncoding(final String bomEnc, final String xmlGuessEnc, final String xmlEnc, final InputStream is)", "class_method_signature": "XmlReader.calculateRawEncoding(final String bomEnc, final String xmlGuessEnc, final String xmlEnc, final InputStream is)", "testcase": false, "constructor": false}, {"identifier": "setRequestHeader", "parameters": "(final URLConnection conn, final Map<String, String> requestHeaders)", "modifiers": "private", "return": "void", "signature": "void setRequestHeader(final URLConnection conn, final Map<String, String> requestHeaders)", "full_signature": "private void setRequestHeader(final URLConnection conn, final Map<String, String> requestHeaders)", "class_method_signature": "XmlReader.setRequestHeader(final URLConnection conn, final Map<String, String> requestHeaders)", "testcase": false, "constructor": false}, {"identifier": "calculateHttpEncoding", "parameters": "(final String cTMime, final String cTEnc, final String bomEnc, final String xmlGuessEnc, final String xmlEnc,\n            final InputStream is, final boolean lenient)", "modifiers": "private", "return": "String", "signature": "String calculateHttpEncoding(final String cTMime, final String cTEnc, final String bomEnc, final String xmlGuessEnc, final String xmlEnc,\n            final InputStream is, final boolean lenient)", "full_signature": "private String calculateHttpEncoding(final String cTMime, final String cTEnc, final String bomEnc, final String xmlGuessEnc, final String xmlEnc,\n            final InputStream is, final boolean lenient)", "class_method_signature": "XmlReader.calculateHttpEncoding(final String cTMime, final String cTEnc, final String bomEnc, final String xmlGuessEnc, final String xmlEnc,\n            final InputStream is, final boolean lenient)", "testcase": false, "constructor": false}, {"identifier": "getContentTypeMime", "parameters": "(final String httpContentType)", "modifiers": "private static", "return": "String", "signature": "String getContentTypeMime(final String httpContentType)", "full_signature": "private static String getContentTypeMime(final String httpContentType)", "class_method_signature": "XmlReader.getContentTypeMime(final String httpContentType)", "testcase": false, "constructor": false}, {"identifier": "getContentTypeEncoding", "parameters": "(final String httpContentType)", "modifiers": "private static", "return": "String", "signature": "String getContentTypeEncoding(final String httpContentType)", "full_signature": "private static String getContentTypeEncoding(final String httpContentType)", "class_method_signature": "XmlReader.getContentTypeEncoding(final String httpContentType)", "testcase": false, "constructor": false}, {"identifier": "getBOMEncoding", "parameters": "(final BufferedInputStream is)", "modifiers": "private static", "return": "String", "signature": "String getBOMEncoding(final BufferedInputStream is)", "full_signature": "private static String getBOMEncoding(final BufferedInputStream is)", "class_method_signature": "XmlReader.getBOMEncoding(final BufferedInputStream is)", "testcase": false, "constructor": false}, {"identifier": "getXMLGuessEncoding", "parameters": "(final BufferedInputStream is)", "modifiers": "private static", "return": "String", "signature": "String getXMLGuessEncoding(final BufferedInputStream is)", "full_signature": "private static String getXMLGuessEncoding(final BufferedInputStream is)", "class_method_signature": "XmlReader.getXMLGuessEncoding(final BufferedInputStream is)", "testcase": false, "constructor": false}, {"identifier": "getXmlProlog", "parameters": "(final InputStream is, final String guessedEnc)", "modifiers": "static", "return": "String", "signature": "String getXmlProlog(final InputStream is, final String guessedEnc)", "full_signature": "static String getXmlProlog(final InputStream is, final String guessedEnc)", "class_method_signature": "XmlReader.getXmlProlog(final InputStream is, final String guessedEnc)", "testcase": false, "constructor": false}, {"identifier": "isAppXml", "parameters": "(final String mime)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAppXml(final String mime)", "full_signature": "private static boolean isAppXml(final String mime)", "class_method_signature": "XmlReader.isAppXml(final String mime)", "testcase": false, "constructor": false}, {"identifier": "isTextXml", "parameters": "(final String mime)", "modifiers": "private static", "return": "boolean", "signature": "boolean isTextXml(final String mime)", "full_signature": "private static boolean isTextXml(final String mime)", "class_method_signature": "XmlReader.isTextXml(final String mime)", "testcase": false, "constructor": false}], "file": "rome/src/main/java/com/rometools/rome/io/XmlReader.java"}, "focal_method": {"identifier": "getXmlProlog", "parameters": "(final InputStream is, final String guessedEnc)", "modifiers": "static", "return": "String", "body": "static String getXmlProlog(final InputStream is, final String guessedEnc) throws IOException {\n        String encoding = null;\n        if (guessedEnc != null) {\n            final byte[] bytes = new byte[BUFFER_SIZE];\n            is.mark(BUFFER_SIZE);\n            int offset = 0;\n            int max = BUFFER_SIZE;\n            int c = is.read(bytes, offset, max);\n            int firstGT = -1;\n            while (c != -1 && firstGT == -1 && offset < BUFFER_SIZE) {\n                offset += c;\n                max -= c;\n                c = is.read(bytes, offset, max);\n                firstGT = new String(bytes, 0, offset, guessedEnc).indexOf(\">\");\n            }\n            if (firstGT == -1) {\n                if (c == -1) {\n                    throw new IOException(\"Unexpected end of XML stream\");\n                } else {\n                    throw new IOException(\"XML prolog or ROOT element not found on first \" + offset + \" bytes\");\n                }\n            }\n            final int bytesRead = offset;\n            if (bytesRead > 0) {\n                is.reset();\n                String prolog = new String(bytes, guessedEnc).substring(0, firstGT);\n                final Matcher m = ENCODING_PATTERN.matcher(prolog);\n                if (m.find()) {\n                    encoding = m.group(1).toUpperCase(Locale.ENGLISH);\n                    encoding = encoding.substring(1, encoding.length() - 1);\n                }\n            }\n        }\n        return encoding;\n    }", "signature": "String getXmlProlog(final InputStream is, final String guessedEnc)", "full_signature": "static String getXmlProlog(final InputStream is, final String guessedEnc)", "class_method_signature": "XmlReader.getXmlProlog(final InputStream is, final String guessedEnc)", "testcase": false, "constructor": false, "invocations": ["mark", "read", "read", "indexOf", "reset", "substring", "matcher", "find", "toUpperCase", "group", "substring", "length"]}, "repository": {"repo_id": 13040953, "url": "https://github.com/rometools/rome", "stars": 594, "created": "9/23/2013 4:35:35 PM +00:00", "updates": "2020-01-16T10:28:05+00:00", "fork": "False", "license": "licensed"}}