{"test_class": {"identifier": "TimestampFileNameExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SimpleDateFormat df;", "modifier": "private", "type": "SimpleDateFormat", "declarator": "df", "var_name": "df"}, {"original_string": "private SimpleFeature feature;", "modifier": "private", "type": "SimpleFeature", "declarator": "feature", "var_name": "feature"}], "file": "modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/properties/time/TimestampFileNameExtractorTest.java"}, "test_case": {"identifier": "testUnableToParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnableToParse() {\n        PropertiesCollectorSPI spi = getTimestampSpi();\n        PropertiesCollector collector = spi.create(\"regex=[0-9]{8}T[0-9]{6}\", Arrays.asList(\"time\"));\n\n        // Note that the number of 0 after the T char isn't enough\n        // will throw an illegalArgumentException while parsing\n        File file = new File(\"polyphemus_20130301T00000.nc\"); \n\n        boolean parsed = true; \n        try {\n            collector.collect(file);\n            collector.setProperties(feature);\n        } catch (IllegalArgumentException ie) {\n            parsed = false;\n        }\n        assertFalse(parsed);\n    }", "signature": "void testUnableToParse()", "full_signature": "@Test public void testUnableToParse()", "class_method_signature": "TimestampFileNameExtractorTest.testUnableToParse()", "testcase": true, "constructor": false, "invocations": ["getTimestampSpi", "create", "asList", "collect", "setProperties", "assertFalse"]}, "focal_class": {"identifier": "TimestampFileNameExtractor", "superclass": "extends RegExPropertiesCollector", "interfaces": "", "fields": [{"original_string": "private final static Logger LOGGER = Logging.getLogger(TimestampFileNameExtractor.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(TimestampFileNameExtractor.class)", "var_name": "LOGGER"}, {"original_string": "private static final TimeParser parser = new TimeParser();", "modifier": "private static final", "type": "TimeParser", "declarator": "parser = new TimeParser()", "var_name": "parser"}, {"original_string": "private DateFormat customFormat;", "modifier": "private", "type": "DateFormat", "declarator": "customFormat", "var_name": "customFormat"}], "methods": [{"identifier": "TimestampFileNameExtractor", "parameters": "(PropertiesCollectorSPI spi, List<String> propertyNames,\n            String regex, String format)", "modifiers": "public", "return": "", "signature": " TimestampFileNameExtractor(PropertiesCollectorSPI spi, List<String> propertyNames,\n            String regex, String format)", "full_signature": "public  TimestampFileNameExtractor(PropertiesCollectorSPI spi, List<String> propertyNames,\n            String regex, String format)", "class_method_signature": "TimestampFileNameExtractor.TimestampFileNameExtractor(PropertiesCollectorSPI spi, List<String> propertyNames,\n            String regex, String format)", "testcase": false, "constructor": true}, {"identifier": "TimestampFileNameExtractor", "parameters": "(PropertiesCollectorSPI spi, List<String> propertyNames,\n            String regex, String format, boolean fullPath)", "modifiers": "public", "return": "", "signature": " TimestampFileNameExtractor(PropertiesCollectorSPI spi, List<String> propertyNames,\n            String regex, String format, boolean fullPath)", "full_signature": "public  TimestampFileNameExtractor(PropertiesCollectorSPI spi, List<String> propertyNames,\n            String regex, String format, boolean fullPath)", "class_method_signature": "TimestampFileNameExtractor.TimestampFileNameExtractor(PropertiesCollectorSPI spi, List<String> propertyNames,\n            String regex, String format, boolean fullPath)", "testcase": false, "constructor": true}, {"identifier": "setProperties", "parameters": "(SimpleFeature feature)", "modifiers": "@Override public", "return": "void", "signature": "void setProperties(SimpleFeature feature)", "full_signature": "@Override public void setProperties(SimpleFeature feature)", "class_method_signature": "TimestampFileNameExtractor.setProperties(SimpleFeature feature)", "testcase": false, "constructor": false}], "file": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/properties/time/TimestampFileNameExtractor.java"}, "focal_method": {"identifier": "setProperties", "parameters": "(SimpleFeature feature)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setProperties(SimpleFeature feature) {\n\n        // get all the matches and convert them in times\n        final List<Date> dates = new ArrayList<Date>();\n        for (String match : getMatches()) {\n            // try to convert to date\n            try {\n                if (customFormat != null) {\n                    Date parsed = customFormat.parse(match);\n                    dates.add(parsed);\n                } else {\n                    List<Date> parsed = parser.parse(match);\n                    dates.addAll(parsed);\n                }\n            } catch (ParseException e) {\n                if (LOGGER.isLoggable(Level.FINE))\n                    LOGGER.log(Level.FINE, e.getLocalizedMessage(), e);\n            }\n\n        }\n\n        // set the properties, only if we have matches!\n        if (dates.size() <= 0) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.fine(\"No matches found for this property extractor:\");\n            }\n            throw new IllegalArgumentException(\"No matches found for this property extractor\");\n        }\n        int index = 0;\n        for (String propertyName : getPropertyNames()) {\n            // set the property\n            feature.setAttribute(propertyName, dates.get(index++));\n\n            // do we have more dates?\n            if (index >= dates.size())\n                return;\n        }\n        \n    }", "signature": "void setProperties(SimpleFeature feature)", "full_signature": "@Override public void setProperties(SimpleFeature feature)", "class_method_signature": "TimestampFileNameExtractor.setProperties(SimpleFeature feature)", "testcase": false, "constructor": false, "invocations": ["getMatches", "parse", "add", "parse", "addAll", "isLoggable", "log", "getLocalizedMessage", "size", "isLoggable", "fine", "getPropertyNames", "setAttribute", "get", "size"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}