{"test_class": {"identifier": "IndexScanSelectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final IndexScanSelector selector;", "modifier": "private final", "type": "IndexScanSelector", "declarator": "selector", "var_name": "selector"}, {"original_string": "private final String expectedMap;", "modifier": "private final", "type": "String", "declarator": "expectedMap", "var_name": "expectedMap"}, {"original_string": "private static final AisStruct ais = new AisStruct();", "modifier": "private static final", "type": "AisStruct", "declarator": "ais = new AisStruct()", "var_name": "ais"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/qp/operator/IndexScanSelectorTest.java"}, "test_case": {"identifier": "leftAboveGI", "parameters": "()", "modifiers": "@OnlyIfNot(\"parameterized()\") @Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@OnlyIfNot(\"parameterized()\")\n    @Test(expected = IllegalArgumentException.class)\n    public void leftAboveGI() {\n        IndexScanSelector.leftJoinAfter(ais.oiGroupIndex, ais.c);\n    }", "signature": "void leftAboveGI()", "full_signature": "@OnlyIfNot(\"parameterized()\") @Test(expected = IllegalArgumentException.class) public void leftAboveGI()", "class_method_signature": "IndexScanSelectorTest.leftAboveGI()", "testcase": true, "constructor": false, "invocations": ["leftJoinAfter"]}, "focal_class": {"identifier": "IndexScanSelector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final IndexScanSelector ALLOW_ALL = new AllSelector();", "modifier": "private static final", "type": "IndexScanSelector", "declarator": "ALLOW_ALL = new AllSelector()", "var_name": "ALLOW_ALL"}], "methods": [{"identifier": "matchesAll", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean matchesAll()", "full_signature": "public abstract boolean matchesAll()", "class_method_signature": "IndexScanSelector.matchesAll()", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(long map)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean matches(long map)", "full_signature": "public abstract boolean matches(long map)", "class_method_signature": "IndexScanSelector.matches(long map)", "testcase": false, "constructor": false}, {"identifier": "getBitMask", "parameters": "()", "modifiers": "abstract", "return": "long", "signature": "long getBitMask()", "full_signature": "abstract long getBitMask()", "class_method_signature": "IndexScanSelector.getBitMask()", "testcase": false, "constructor": false}, {"identifier": "leftJoinAfter", "parameters": "(Index index, final Table leafmostRequired)", "modifiers": "public static", "return": "IndexScanSelector", "signature": "IndexScanSelector leftJoinAfter(Index index, final Table leafmostRequired)", "full_signature": "public static IndexScanSelector leftJoinAfter(Index index, final Table leafmostRequired)", "class_method_signature": "IndexScanSelector.leftJoinAfter(Index index, final Table leafmostRequired)", "testcase": false, "constructor": false}, {"identifier": "rightJoinUntil", "parameters": "(Index index, final Table rootmostRequired)", "modifiers": "public static", "return": "IndexScanSelector", "signature": "IndexScanSelector rightJoinUntil(Index index, final Table rootmostRequired)", "full_signature": "public static IndexScanSelector rightJoinUntil(Index index, final Table rootmostRequired)", "class_method_signature": "IndexScanSelector.rightJoinUntil(Index index, final Table rootmostRequired)", "testcase": false, "constructor": false}, {"identifier": "complain", "parameters": "(Index index, Table rootmostRequired)", "modifiers": "private static", "return": "void", "signature": "void complain(Index index, Table rootmostRequired)", "full_signature": "private static void complain(Index index, Table rootmostRequired)", "class_method_signature": "IndexScanSelector.complain(Index index, Table rootmostRequired)", "testcase": false, "constructor": false}, {"identifier": "inner", "parameters": "(Index index)", "modifiers": "public static", "return": "IndexScanSelector", "signature": "IndexScanSelector inner(Index index)", "full_signature": "public static IndexScanSelector inner(Index index)", "class_method_signature": "IndexScanSelector.inner(Index index)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Index index, SelectorCreationPolicy policy)", "modifiers": "private static", "return": "IndexScanSelector", "signature": "IndexScanSelector create(Index index, SelectorCreationPolicy policy)", "full_signature": "private static IndexScanSelector create(Index index, SelectorCreationPolicy policy)", "class_method_signature": "IndexScanSelector.create(Index index, SelectorCreationPolicy policy)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(GroupIndex index, SelectorCreationPolicy policy)", "modifiers": "private static", "return": "IndexScanSelector", "signature": "IndexScanSelector create(GroupIndex index, SelectorCreationPolicy policy)", "full_signature": "private static IndexScanSelector create(GroupIndex index, SelectorCreationPolicy policy)", "class_method_signature": "IndexScanSelector.create(GroupIndex index, SelectorCreationPolicy policy)", "testcase": false, "constructor": false}, {"identifier": "IndexScanSelector", "parameters": "()", "modifiers": "private", "return": "", "signature": " IndexScanSelector()", "full_signature": "private  IndexScanSelector()", "class_method_signature": "IndexScanSelector.IndexScanSelector()", "testcase": false, "constructor": true}, {"identifier": "describe", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String describe()", "full_signature": "public abstract String describe()", "class_method_signature": "IndexScanSelector.describe()", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/qp/operator/IndexScanSelector.java"}, "focal_method": {"identifier": "leftJoinAfter", "parameters": "(Index index, final Table leafmostRequired)", "modifiers": "public static", "return": "IndexScanSelector", "body": "public static IndexScanSelector leftJoinAfter(Index index, final Table leafmostRequired) {\n        final int leafmostRequiredDepth = leafmostRequired.getDepth();\n        return create(index, new SelectorCreationPolicy() {\n            @Override\n            public boolean include(Table table) {\n                if (table.equals(leafmostRequired))\n                    sawTable = true;\n                return table.getDepth() <= leafmostRequiredDepth;\n            }\n\n            @Override\n            public String description(GroupIndex index) {\n                return index.leafMostTable().equals(leafmostRequired)\n                        ? \"\"\n                        : \" INNER JOIN thru \" + leafmostRequired.getName().getTableName() + \", then LEFT\";\n            }\n\n            @Override\n            public void validate(GroupIndex index) {\n                if (!sawTable)\n                    complain(index, leafmostRequired);\n            }\n\n            @Override\n            public void validate(TableIndex index) {\n                if (!index.getTable().equals(leafmostRequired))\n                    complain(index, leafmostRequired);\n            }\n\n            private boolean sawTable = false;\n        });\n    }", "signature": "IndexScanSelector leftJoinAfter(Index index, final Table leafmostRequired)", "full_signature": "public static IndexScanSelector leftJoinAfter(Index index, final Table leafmostRequired)", "class_method_signature": "IndexScanSelector.leftJoinAfter(Index index, final Table leafmostRequired)", "testcase": false, "constructor": false, "invocations": ["getDepth", "create", "equals", "getDepth", "equals", "leafMostTable", "getTableName", "getName", "complain", "equals", "getTable", "complain"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}