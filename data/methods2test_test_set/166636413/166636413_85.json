{"test_class": {"identifier": "AuditEventTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long START_TIME = 1545392727685L;", "modifier": "private static final", "type": "long", "declarator": "START_TIME = 1545392727685L", "var_name": "START_TIME"}, {"original_string": "private static final long END_TIME = 1545392728527L;", "modifier": "private static final", "type": "long", "declarator": "END_TIME = 1545392728527L", "var_name": "END_TIME"}], "file": "collect_app/src/test/java/org/odk/collect/android/logic/AuditEventTest.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToString() {\n        AuditEvent auditEvent = new AuditEvent(START_TIME, QUESTION, false, false, getTestFormIndex(), \"\");\n        assertNotNull(auditEvent);\n        assertTrue(auditEvent.isIntervalAuditEventType());\n        assertEquals(\"question,/data/text1,1545392727685,\", auditEvent.toString());\n        assertFalse(auditEvent.isEndTimeSet());\n        auditEvent.setEnd(END_TIME);\n        assertTrue(auditEvent.isEndTimeSet());\n        assertFalse(auditEvent.isLocationAlreadySet());\n        assertEquals(\"question,/data/text1,1545392727685,1545392728527\", auditEvent.toString());\n    }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "AuditEventTest.testToString()", "testcase": true, "constructor": false, "invocations": ["getTestFormIndex", "assertNotNull", "assertTrue", "isIntervalAuditEventType", "assertEquals", "toString", "assertFalse", "isEndTimeSet", "setEnd", "assertTrue", "isEndTimeSet", "assertFalse", "isLocationAlreadySet", "assertEquals", "toString"]}, "focal_class": {"identifier": "AuditEvent", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final long start;", "modifier": "private final", "type": "long", "declarator": "start", "var_name": "start"}, {"original_string": "private AuditEventType auditEventType;", "modifier": "private", "type": "AuditEventType", "declarator": "auditEventType", "var_name": "auditEventType"}, {"original_string": "private String latitude;", "modifier": "private", "type": "String", "declarator": "latitude", "var_name": "latitude"}, {"original_string": "private String longitude;", "modifier": "private", "type": "String", "declarator": "longitude", "var_name": "longitude"}, {"original_string": "private String accuracy;", "modifier": "private", "type": "String", "declarator": "accuracy", "var_name": "accuracy"}, {"original_string": "@NonNull private String oldValue;", "modifier": "@NonNull private", "type": "String", "declarator": "oldValue", "var_name": "oldValue"}, {"original_string": "@NonNull private String newValue = \"\";", "modifier": "@NonNull private", "type": "String", "declarator": "newValue = \"\"", "var_name": "newValue"}, {"original_string": "private long end;", "modifier": "private", "type": "long", "declarator": "end", "var_name": "end"}, {"original_string": "private boolean endTimeSet;", "modifier": "private", "type": "boolean", "declarator": "endTimeSet", "var_name": "endTimeSet"}, {"original_string": "private boolean isTrackingLocationsEnabled;", "modifier": "private", "type": "boolean", "declarator": "isTrackingLocationsEnabled", "var_name": "isTrackingLocationsEnabled"}, {"original_string": "private boolean isTrackingChangesEnabled;", "modifier": "private", "type": "boolean", "declarator": "isTrackingChangesEnabled", "var_name": "isTrackingChangesEnabled"}, {"original_string": "private FormIndex formIndex;", "modifier": "private", "type": "FormIndex", "declarator": "formIndex", "var_name": "formIndex"}], "methods": [{"identifier": "AuditEvent", "parameters": "(long start, AuditEventType auditEventType)", "modifiers": "public", "return": "", "signature": " AuditEvent(long start, AuditEventType auditEventType)", "full_signature": "public  AuditEvent(long start, AuditEventType auditEventType)", "class_method_signature": "AuditEvent.AuditEvent(long start, AuditEventType auditEventType)", "testcase": false, "constructor": true}, {"identifier": "AuditEvent", "parameters": "(long start, AuditEventType auditEventType,  boolean isTrackingLocationsEnabled, boolean isTrackingChangesEnabled)", "modifiers": "public", "return": "", "signature": " AuditEvent(long start, AuditEventType auditEventType,  boolean isTrackingLocationsEnabled, boolean isTrackingChangesEnabled)", "full_signature": "public  AuditEvent(long start, AuditEventType auditEventType,  boolean isTrackingLocationsEnabled, boolean isTrackingChangesEnabled)", "class_method_signature": "AuditEvent.AuditEvent(long start, AuditEventType auditEventType,  boolean isTrackingLocationsEnabled, boolean isTrackingChangesEnabled)", "testcase": false, "constructor": true}, {"identifier": "AuditEvent", "parameters": "(long start, AuditEventType auditEventType, boolean isTrackingLocationsEnabled,\n                      boolean isTrackingChangesEnabled, FormIndex formIndex, String oldValue)", "modifiers": "public", "return": "", "signature": " AuditEvent(long start, AuditEventType auditEventType, boolean isTrackingLocationsEnabled,\n                      boolean isTrackingChangesEnabled, FormIndex formIndex, String oldValue)", "full_signature": "public  AuditEvent(long start, AuditEventType auditEventType, boolean isTrackingLocationsEnabled,\n                      boolean isTrackingChangesEnabled, FormIndex formIndex, String oldValue)", "class_method_signature": "AuditEvent.AuditEvent(long start, AuditEventType auditEventType, boolean isTrackingLocationsEnabled,\n                      boolean isTrackingChangesEnabled, FormIndex formIndex, String oldValue)", "testcase": false, "constructor": true}, {"identifier": "isIntervalAuditEventType", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIntervalAuditEventType()", "full_signature": "public boolean isIntervalAuditEventType()", "class_method_signature": "AuditEvent.isIntervalAuditEventType()", "testcase": false, "constructor": false}, {"identifier": "setEnd", "parameters": "(long endTime)", "modifiers": "public", "return": "void", "signature": "void setEnd(long endTime)", "full_signature": "public void setEnd(long endTime)", "class_method_signature": "AuditEvent.setEnd(long endTime)", "testcase": false, "constructor": false}, {"identifier": "isEndTimeSet", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEndTimeSet()", "full_signature": "public boolean isEndTimeSet()", "class_method_signature": "AuditEvent.isEndTimeSet()", "testcase": false, "constructor": false}, {"identifier": "getAuditEventType", "parameters": "()", "modifiers": "public", "return": "AuditEventType", "signature": "AuditEventType getAuditEventType()", "full_signature": "public AuditEventType getAuditEventType()", "class_method_signature": "AuditEvent.getAuditEventType()", "testcase": false, "constructor": false}, {"identifier": "getFormIndex", "parameters": "()", "modifiers": "public", "return": "FormIndex", "signature": "FormIndex getFormIndex()", "full_signature": "public FormIndex getFormIndex()", "class_method_signature": "AuditEvent.getFormIndex()", "testcase": false, "constructor": false}, {"identifier": "hasNewAnswer", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasNewAnswer()", "full_signature": "public boolean hasNewAnswer()", "class_method_signature": "AuditEvent.hasNewAnswer()", "testcase": false, "constructor": false}, {"identifier": "isLocationAlreadySet", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLocationAlreadySet()", "full_signature": "public boolean isLocationAlreadySet()", "class_method_signature": "AuditEvent.isLocationAlreadySet()", "testcase": false, "constructor": false}, {"identifier": "setLocationCoordinates", "parameters": "(String latitude, String longitude, String accuracy)", "modifiers": "public", "return": "void", "signature": "void setLocationCoordinates(String latitude, String longitude, String accuracy)", "full_signature": "public void setLocationCoordinates(String latitude, String longitude, String accuracy)", "class_method_signature": "AuditEvent.setLocationCoordinates(String latitude, String longitude, String accuracy)", "testcase": false, "constructor": false}, {"identifier": "recordValueChange", "parameters": "(String newValue)", "modifiers": "public", "return": "void", "signature": "void recordValueChange(String newValue)", "full_signature": "public void recordValueChange(String newValue)", "class_method_signature": "AuditEvent.recordValueChange(String newValue)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@NonNull public", "return": "String", "signature": "String toString()", "full_signature": "@NonNull public String toString()", "class_method_signature": "AuditEvent.toString()", "testcase": false, "constructor": false}, {"identifier": "getAuditEventTypeFromFecType", "parameters": "(int fcEvent)", "modifiers": "public static", "return": "AuditEventType", "signature": "AuditEventType getAuditEventTypeFromFecType(int fcEvent)", "full_signature": "public static AuditEventType getAuditEventTypeFromFecType(int fcEvent)", "class_method_signature": "AuditEvent.getAuditEventTypeFromFecType(int fcEvent)", "testcase": false, "constructor": false}, {"identifier": "getEscapedValueForCsv", "parameters": "(String value)", "modifiers": "private", "return": "String", "signature": "String getEscapedValueForCsv(String value)", "full_signature": "private String getEscapedValueForCsv(String value)", "class_method_signature": "AuditEvent.getEscapedValueForCsv(String value)", "testcase": false, "constructor": false}, {"identifier": "getXPathPath", "parameters": "(FormIndex formIndex)", "modifiers": "private static", "return": "String", "signature": "String getXPathPath(FormIndex formIndex)", "full_signature": "private static String getXPathPath(FormIndex formIndex)", "class_method_signature": "AuditEvent.getXPathPath(FormIndex formIndex)", "testcase": false, "constructor": false}], "file": "collect_app/src/main/java/org/odk/collect/android/logic/AuditEvent.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@NonNull public", "return": "String", "body": "@NonNull\n    public String toString() {\n        String node = formIndex == null || formIndex.getReference() == null ? \"\" : getXPathPath(formIndex);\n\n        String event;\n        if (isTrackingLocationsEnabled && isTrackingChangesEnabled) {\n            event = String.format(\"%s,%s,%s,%s,%s,%s,%s,%s,%s\", auditEventType.getValue(), node, start, end != 0 ? end : \"\", latitude, longitude, accuracy, oldValue, newValue);\n        } else if (isTrackingLocationsEnabled) {\n            event = String.format(\"%s,%s,%s,%s,%s,%s,%s\", auditEventType.getValue(), node, start, end != 0 ? end : \"\", latitude, longitude, accuracy);\n        } else if (isTrackingChangesEnabled) {\n            event = String.format(\"%s,%s,%s,%s,%s,%s\", auditEventType.getValue(), node, start, end != 0 ? end : \"\", oldValue, newValue);\n        } else {\n            event = String.format(\"%s,%s,%s,%s\", auditEventType.getValue(), node, start, end != 0 ? end : \"\");\n        }\n\n        return event;\n    }", "signature": "String toString()", "full_signature": "@NonNull public String toString()", "class_method_signature": "AuditEvent.toString()", "testcase": false, "constructor": false, "invocations": ["getReference", "getXPathPath", "format", "getValue", "format", "getValue", "format", "getValue", "format", "getValue"]}, "repository": {"repo_id": 166636413, "url": "https://github.com/fieldsight/fieldsight-mobile", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 41030, "license": "licensed"}}