{"test_class": {"identifier": "SeriesUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final List<Number> LINEAR = Arrays.asList(new Number[]{ 1, 2, 3, 4 ,5 , 6, 7, 8});", "modifier": "final", "type": "List<Number>", "declarator": "LINEAR = Arrays.asList(new Number[]{ 1, 2, 3, 4 ,5 , 6, 7, 8})", "var_name": "LINEAR"}, {"original_string": "final List<Number> LINEAR_INVERSE = Arrays.asList(new Number[]{ 8, 7, 6, 5, 4, 3, 2, 1});", "modifier": "final", "type": "List<Number>", "declarator": "LINEAR_INVERSE = Arrays.asList(new Number[]{ 8, 7, 6, 5, 4, 3, 2, 1})", "var_name": "LINEAR_INVERSE"}, {"original_string": "final List<Number> ZIG_ZAG = Arrays.asList(new Number[]{1, 10, 1, 10, 1, 10, 1, 10});", "modifier": "final", "type": "List<Number>", "declarator": "ZIG_ZAG = Arrays.asList(new Number[]{1, 10, 1, 10, 1, 10, 1, 10})", "var_name": "ZIG_ZAG"}, {"original_string": "final List<Number> NULLS = Arrays.asList(new Number[]{null, 2, null, 4, null, 0, -1, null});", "modifier": "final", "type": "List<Number>", "declarator": "NULLS = Arrays.asList(new Number[]{null, 2, null, 4, null, 0, -1, null})", "var_name": "NULLS"}, {"original_string": "final List<Number> SINGLE_VALUE = Arrays.asList(new Number[]{3});", "modifier": "final", "type": "List<Number>", "declarator": "SINGLE_VALUE = Arrays.asList(new Number[]{3})", "var_name": "SINGLE_VALUE"}, {"original_string": "final List<Number> SINGLE_VALUE_NULL = Arrays.asList(new Number[]{null});", "modifier": "final", "type": "List<Number>", "declarator": "SINGLE_VALUE_NULL = Arrays.asList(new Number[]{null})", "var_name": "SINGLE_VALUE_NULL"}, {"original_string": "final List<Number> EMPTY = new ArrayList<>();", "modifier": "final", "type": "List<Number>", "declarator": "EMPTY = new ArrayList<>()", "var_name": "EMPTY"}], "file": "androidplot-core/src/test/java/com/androidplot/util/SeriesUtilsTest.java"}, "test_case": {"identifier": "iBoundsMax_findsMax", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void iBoundsMax_findsMax() {\n        XYSeries s1 = new SimpleXYSeries(\n                Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),\n                Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),\n                \"s1\");\n\n        assertEquals(12, SeriesUtils.iBoundsMax(s1, 12, 1));\n        assertEquals(6, SeriesUtils.iBoundsMax(s1, 6, 1));\n        assertEquals(12, SeriesUtils.iBoundsMax(s1, 12, 1));\n\n        // now test with null vals:\n        XYSeries s2 = new SimpleXYSeries(\n                Arrays.asList(null, 1, 2, null, null, 5, 6, 7, 8, null, 10, 11, null),\n                Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),\n                \"s2\");\n\n        assertEquals(1, SeriesUtils.iBoundsMax(s2, 0, 1));\n        assertEquals(5, SeriesUtils.iBoundsMax(s2, 3, 1));\n        assertEquals(12, SeriesUtils.iBoundsMax(s2, 12, 1));\n\n        // test with a higher step value:\n        assertEquals(1, SeriesUtils.iBoundsMax(s2, 0, 5));\n        assertEquals(5, SeriesUtils.iBoundsMax(s2, 3, 5));\n        assertEquals(12, SeriesUtils.iBoundsMax(s2, 12, 5));\n    }", "signature": "void iBoundsMax_findsMax()", "full_signature": "@Test public void iBoundsMax_findsMax()", "class_method_signature": "SeriesUtilsTest.iBoundsMax_findsMax()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "assertEquals", "iBoundsMax", "assertEquals", "iBoundsMax", "assertEquals", "iBoundsMax", "asList", "asList", "assertEquals", "iBoundsMax", "assertEquals", "iBoundsMax", "assertEquals", "iBoundsMax", "assertEquals", "iBoundsMax", "assertEquals", "iBoundsMax", "assertEquals", "iBoundsMax"]}, "focal_class": {"identifier": "SeriesUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "minMax", "parameters": "(List<XYSeries> seriesList)", "modifiers": "public static", "return": "RectRegion", "signature": "RectRegion minMax(List<XYSeries> seriesList)", "full_signature": "public static RectRegion minMax(List<XYSeries> seriesList)", "class_method_signature": "SeriesUtils.minMax(List<XYSeries> seriesList)", "testcase": false, "constructor": false}, {"identifier": "minMax", "parameters": "(XYSeries... seriesList)", "modifiers": "public static", "return": "RectRegion", "signature": "RectRegion minMax(XYSeries... seriesList)", "full_signature": "public static RectRegion minMax(XYSeries... seriesList)", "class_method_signature": "SeriesUtils.minMax(XYSeries... seriesList)", "testcase": false, "constructor": false}, {"identifier": "minMaxX", "parameters": "(XYSeries... seriesList)", "modifiers": "public static", "return": "Region", "signature": "Region minMaxX(XYSeries... seriesList)", "full_signature": "public static Region minMaxX(XYSeries... seriesList)", "class_method_signature": "SeriesUtils.minMaxX(XYSeries... seriesList)", "testcase": false, "constructor": false}, {"identifier": "minMaxY", "parameters": "(XYSeries... seriesList)", "modifiers": "public static", "return": "Region", "signature": "Region minMaxY(XYSeries... seriesList)", "full_signature": "public static Region minMaxY(XYSeries... seriesList)", "class_method_signature": "SeriesUtils.minMaxY(XYSeries... seriesList)", "testcase": false, "constructor": false}, {"identifier": "minMax", "parameters": "(XYConstraints constraints, List<XYSeries> seriesList)", "modifiers": "public static", "return": "RectRegion", "signature": "RectRegion minMax(XYConstraints constraints, List<XYSeries> seriesList)", "full_signature": "public static RectRegion minMax(XYConstraints constraints, List<XYSeries> seriesList)", "class_method_signature": "SeriesUtils.minMax(XYConstraints constraints, List<XYSeries> seriesList)", "testcase": false, "constructor": false}, {"identifier": "minMax", "parameters": "(XYConstraints constraints, XYSeries... seriesArray)", "modifiers": "public static", "return": "RectRegion", "signature": "RectRegion minMax(XYConstraints constraints, XYSeries... seriesArray)", "full_signature": "public static RectRegion minMax(XYConstraints constraints, XYSeries... seriesArray)", "class_method_signature": "SeriesUtils.minMax(XYConstraints constraints, XYSeries... seriesArray)", "testcase": false, "constructor": false}, {"identifier": "minMax", "parameters": "(Region bounds, List<Number>... lists)", "modifiers": "public static", "return": "Region", "signature": "Region minMax(Region bounds, List<Number>... lists)", "full_signature": "public static Region minMax(Region bounds, List<Number>... lists)", "class_method_signature": "SeriesUtils.minMax(Region bounds, List<Number>... lists)", "testcase": false, "constructor": false}, {"identifier": "iBounds", "parameters": "(XYSeries series, RectRegion visibleBounds)", "modifiers": "public static", "return": "Region", "signature": "Region iBounds(XYSeries series, RectRegion visibleBounds)", "full_signature": "public static Region iBounds(XYSeries series, RectRegion visibleBounds)", "class_method_signature": "SeriesUtils.iBounds(XYSeries series, RectRegion visibleBounds)", "testcase": false, "constructor": false}, {"identifier": "iBoundsMax", "parameters": "(XYSeries series, double visibleMax, float step)", "modifiers": "protected static", "return": "int", "signature": "int iBoundsMax(XYSeries series, double visibleMax, float step)", "full_signature": "protected static int iBoundsMax(XYSeries series, double visibleMax, float step)", "class_method_signature": "SeriesUtils.iBoundsMax(XYSeries series, double visibleMax, float step)", "testcase": false, "constructor": false}, {"identifier": "iBoundsMin", "parameters": "(XYSeries series, double visibleMin, float step)", "modifiers": "protected static", "return": "int", "signature": "int iBoundsMin(XYSeries series, double visibleMin, float step)", "full_signature": "protected static int iBoundsMin(XYSeries series, double visibleMin, float step)", "class_method_signature": "SeriesUtils.iBoundsMin(XYSeries series, double visibleMin, float step)", "testcase": false, "constructor": false}, {"identifier": "getNullRegion", "parameters": "(XYSeries series, int index)", "modifiers": "protected static", "return": "Region", "signature": "Region getNullRegion(XYSeries series, int index)", "full_signature": "protected static Region getNullRegion(XYSeries series, int index)", "class_method_signature": "SeriesUtils.getNullRegion(XYSeries series, int index)", "testcase": false, "constructor": false}, {"identifier": "minMax", "parameters": "(List<Number>... lists)", "modifiers": "public static", "return": "Region", "signature": "Region minMax(List<Number>... lists)", "full_signature": "public static Region minMax(List<Number>... lists)", "class_method_signature": "SeriesUtils.minMax(List<Number>... lists)", "testcase": false, "constructor": false}, {"identifier": "getXYOrder", "parameters": "(XYSeries series)", "modifiers": "public static", "return": "OrderedXYSeries.XOrder", "signature": "OrderedXYSeries.XOrder getXYOrder(XYSeries series)", "full_signature": "public static OrderedXYSeries.XOrder getXYOrder(XYSeries series)", "class_method_signature": "SeriesUtils.getXYOrder(XYSeries series)", "testcase": false, "constructor": false}], "file": "androidplot-core/src/main/java/com/androidplot/util/SeriesUtils.java"}, "focal_method": {"identifier": "iBoundsMax", "parameters": "(XYSeries series, double visibleMax, float step)", "modifiers": "protected static", "return": "int", "body": "protected static int iBoundsMax(XYSeries series, double visibleMax, float step) {\n        int max = series.size() - 1;\n        final int seriesSize = series.size();\n        final int steps = (int) Math.ceil(seriesSize / step);\n        for (int stepIndex = steps; stepIndex >= 0; stepIndex--) {\n            final int i = stepIndex * (int) step;\n            for (int ii = 0; ii < step; ii++) {\n                final int iii = i + ii;\n                if(iii < seriesSize) {\n                    final Number thisX = series.getX(iii);\n                    if (thisX != null) {\n                        final double thisDouble = thisX.doubleValue();\n                        if (thisDouble > visibleMax) {\n                            // this is the smallest non-null value in this block, so skip\n                            // to the next block:\n                            max = iii;\n                            break;\n                        } else if (thisDouble == visibleMax) {\n                            return iii;\n                        } else {\n                            return max;\n                        }\n                    }\n                }\n            }\n        }\n        return max;\n    }", "signature": "int iBoundsMax(XYSeries series, double visibleMax, float step)", "full_signature": "protected static int iBoundsMax(XYSeries series, double visibleMax, float step)", "class_method_signature": "SeriesUtils.iBoundsMax(XYSeries series, double visibleMax, float step)", "testcase": false, "constructor": false, "invocations": ["size", "size", "ceil", "getX", "doubleValue"]}, "repository": {"repo_id": 1424783, "url": "https://github.com/halfhp/androidplot", "language": "Java", "is_fork": false, "fork_count": 129, "stargazer_count": 369, "size": 7178, "license": "licensed"}}