{"test_class": {"identifier": "PoliciesAclMigrationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final EffectedPermissions READ_PERMISSIONS =\n            EffectedPermissions.newInstance(Collections.singleton(Permission.READ.name()),\n                    Collections.emptyList());", "modifier": "private static final", "type": "EffectedPermissions", "declarator": "READ_PERMISSIONS =\n            EffectedPermissions.newInstance(Collections.singleton(Permission.READ.name()),\n                    Collections.emptyList())", "var_name": "READ_PERMISSIONS"}, {"original_string": "private static final EffectedPermissions REVOKED_WRITE_PERMISSIONS =\n            EffectedPermissions.newInstance(Collections.emptyList(), Collections.singleton(Permission.WRITE.name()));", "modifier": "private static final", "type": "EffectedPermissions", "declarator": "REVOKED_WRITE_PERMISSIONS =\n            EffectedPermissions.newInstance(Collections.emptyList(), Collections.singleton(Permission.WRITE.name()))", "var_name": "REVOKED_WRITE_PERMISSIONS"}], "file": "services/models/policies/src/test/java/org/eclipse/ditto/services/models/policies/PoliciesAclMigrationsTest.java"}, "test_case": {"identifier": "verifyMigratedSubjects", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyMigratedSubjects() {\n        final SubjectId subjectId = SubjectId.newInstance(SubjectIssuer.GOOGLE, \"user\");\n        final AccessControlList aclToMigrate = AccessControlList.newBuilder()\n                .set(AclEntry.newInstance(AuthorizationSubject.newInstance(subjectId), Permission.READ))\n                .build();\n        final PolicyId policyId = PolicyId.dummy();\n        final List<SubjectIssuer> issuers = Arrays.asList(SubjectIssuer.GOOGLE, SubjectIssuer.newInstance(\"any-other\"));\n\n        final String expectedLabel = \"acl_\" + subjectId.getSubject();\n        final PolicyEntry expectedEntry = createExpectedPolicyEntry(expectedLabel, subjectId, issuers);\n\n        final Policy migratedPolicy =\n                PoliciesAclMigrations.accessControlListToPolicyEntries(aclToMigrate, policyId, issuers);\n\n        assertThat(migratedPolicy.getEntryFor(expectedLabel)).contains(expectedEntry);\n    }", "signature": "void verifyMigratedSubjects()", "full_signature": "@Test public void verifyMigratedSubjects()", "class_method_signature": "PoliciesAclMigrationsTest.verifyMigratedSubjects()", "testcase": true, "constructor": false, "invocations": ["newInstance", "build", "set", "newBuilder", "newInstance", "newInstance", "dummy", "asList", "newInstance", "getSubject", "createExpectedPolicyEntry", "accessControlListToPolicyEntries", "contains", "assertThat", "getEntryFor"]}, "focal_class": {"identifier": "PoliciesAclMigrations", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String ACL_LABEL_PREFIX = \"acl_\";", "modifier": "public static final", "type": "String", "declarator": "ACL_LABEL_PREFIX = \"acl_\"", "var_name": "ACL_LABEL_PREFIX"}, {"original_string": "private static final JsonPointer ROOT_PATH = JsonPointer.empty();", "modifier": "private static final", "type": "JsonPointer", "declarator": "ROOT_PATH = JsonPointer.empty()", "var_name": "ROOT_PATH"}], "methods": [{"identifier": "PoliciesAclMigrations", "parameters": "()", "modifiers": "private", "return": "", "signature": " PoliciesAclMigrations()", "full_signature": "private  PoliciesAclMigrations()", "class_method_signature": "PoliciesAclMigrations.PoliciesAclMigrations()", "testcase": false, "constructor": true}, {"identifier": "accessControlListToPolicyEntries", "parameters": "(final AccessControlList accessControlList,\n            final PolicyId policyId, final List<SubjectIssuer> subjectIssuers)", "modifiers": "public static", "return": "Policy", "signature": "Policy accessControlListToPolicyEntries(final AccessControlList accessControlList,\n            final PolicyId policyId, final List<SubjectIssuer> subjectIssuers)", "full_signature": "public static Policy accessControlListToPolicyEntries(final AccessControlList accessControlList,\n            final PolicyId policyId, final List<SubjectIssuer> subjectIssuers)", "class_method_signature": "PoliciesAclMigrations.accessControlListToPolicyEntries(final AccessControlList accessControlList,\n            final PolicyId policyId, final List<SubjectIssuer> subjectIssuers)", "testcase": false, "constructor": false}, {"identifier": "getSubjectWithoutIssuer", "parameters": "(final AclEntry aclEntry)", "modifiers": "private static", "return": "String", "signature": "String getSubjectWithoutIssuer(final AclEntry aclEntry)", "full_signature": "private static String getSubjectWithoutIssuer(final AclEntry aclEntry)", "class_method_signature": "PoliciesAclMigrations.getSubjectWithoutIssuer(final AclEntry aclEntry)", "testcase": false, "constructor": false}], "file": "services/models/policies/src/main/java/org/eclipse/ditto/services/models/policies/PoliciesAclMigrations.java"}, "focal_method": {"identifier": "accessControlListToPolicyEntries", "parameters": "(final AccessControlList accessControlList,\n            final PolicyId policyId, final List<SubjectIssuer> subjectIssuers)", "modifiers": "public static", "return": "Policy", "body": "public static Policy accessControlListToPolicyEntries(final AccessControlList accessControlList,\n            final PolicyId policyId, final List<SubjectIssuer> subjectIssuers) {\n        final PolicyBuilder policyBuilder = PoliciesModelFactory.newPolicyBuilder(policyId);\n        accessControlList.getEntriesSet().forEach(aclEntry -> {\n            final String sid = getSubjectWithoutIssuer(aclEntry);\n            final PolicyBuilder.LabelScoped labelScoped = policyBuilder.forLabel(ACL_LABEL_PREFIX + sid);\n\n            subjectIssuers.forEach(\n                    subjectIssuer -> labelScoped.setSubject(subjectIssuer, sid));\n\n            if (aclEntry.getPermissions().contains(org.eclipse.ditto.model.things.Permission.READ) &&\n                    aclEntry.getPermissions()\n                            .contains(org.eclipse.ditto.model.things.Permission.WRITE)) {\n                labelScoped.setGrantedPermissions(PoliciesResourceType.policyResource(ROOT_PATH), Permission.READ);\n                labelScoped.setGrantedPermissions(PoliciesResourceType.thingResource(ROOT_PATH), Permission.READ,\n                        Permission.WRITE);\n                labelScoped.setGrantedPermissions(PoliciesResourceType.messageResource(ROOT_PATH), Permission.READ,\n                        Permission.WRITE);\n            } else if (aclEntry.getPermissions().contains(org.eclipse.ditto.model.things.Permission.READ)) {\n                labelScoped.setGrantedPermissions(PoliciesResourceType.policyResource(ROOT_PATH), Permission.READ);\n                labelScoped.setGrantedPermissions(PoliciesResourceType.thingResource(ROOT_PATH), Permission.READ);\n                labelScoped.setGrantedPermissions(PoliciesResourceType.messageResource(ROOT_PATH), Permission.READ);\n            } else if (aclEntry.getPermissions().contains(org.eclipse.ditto.model.things.Permission.WRITE)) {\n                labelScoped.setGrantedPermissions(PoliciesResourceType.thingResource(ROOT_PATH), Permission.WRITE);\n                labelScoped.setGrantedPermissions(PoliciesResourceType.messageResource(ROOT_PATH), Permission.WRITE);\n            }\n\n            if (aclEntry.getPermissions().contains(org.eclipse.ditto.model.things.Permission.ADMINISTRATE)) {\n                // allow reading+writing policy:/ if the ACL entry has Administrate permission\n                labelScoped.setGrantedPermissions(PoliciesResourceType.policyResource(ROOT_PATH),\n                        Permission.READ, Permission.WRITE);\n                // allow writing thing:/acl if the ACL entry has Administrate permission\n                labelScoped.setGrantedPermissions(PoliciesResourceType.thingResource(Thing.JsonFields.ACL.getPointer()),\n                        Permission.READ, Permission.WRITE);\n            } else {\n                // forbid writing thing:/acl if the ACL entry was missing Administrate permission\n                labelScoped.setRevokedPermissions(PoliciesResourceType.thingResource(Thing.JsonFields.ACL.getPointer()),\n                        Permission.WRITE);\n            }\n        });\n        return policyBuilder.build();\n    }", "signature": "Policy accessControlListToPolicyEntries(final AccessControlList accessControlList,\n            final PolicyId policyId, final List<SubjectIssuer> subjectIssuers)", "full_signature": "public static Policy accessControlListToPolicyEntries(final AccessControlList accessControlList,\n            final PolicyId policyId, final List<SubjectIssuer> subjectIssuers)", "class_method_signature": "PoliciesAclMigrations.accessControlListToPolicyEntries(final AccessControlList accessControlList,\n            final PolicyId policyId, final List<SubjectIssuer> subjectIssuers)", "testcase": false, "constructor": false, "invocations": ["newPolicyBuilder", "forEach", "getEntriesSet", "getSubjectWithoutIssuer", "forLabel", "forEach", "setSubject", "contains", "getPermissions", "contains", "getPermissions", "setGrantedPermissions", "policyResource", "setGrantedPermissions", "thingResource", "setGrantedPermissions", "messageResource", "contains", "getPermissions", "setGrantedPermissions", "policyResource", "setGrantedPermissions", "thingResource", "setGrantedPermissions", "messageResource", "contains", "getPermissions", "setGrantedPermissions", "thingResource", "setGrantedPermissions", "messageResource", "contains", "getPermissions", "setGrantedPermissions", "policyResource", "setGrantedPermissions", "thingResource", "getPointer", "setRevokedPermissions", "thingResource", "getPointer", "build"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}