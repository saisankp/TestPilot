{"test_class": {"identifier": "LastFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ObjectMapper objectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}], "file": "foxtrot-common/src/test/java/com/flipkart/foxtrot/common/query/datetime/LastFilterTest.java"}, "test_case": {"identifier": "testGetWindowStartCeiling", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetWindowStartCeiling() throws Exception {\n        DateTime currentTime = new DateTime();\n        final String json = String.format(\n                \"{ \\\"operator\\\": \\\"last\\\", \\\"currentTime\\\": %d, \\\"roundingMode\\\": \\\"CEILING\\\", \\\"duration\\\": \\\"1h\\\" }\",\n                currentTime.getMillis()\n                                         );\n        LastFilter lastFilter = objectMapper.readValue(json, LastFilter.class);\n        TimeWindow timeWindow = lastFilter.getWindow();\n        Assert.assertEquals(\"_timestamp\", lastFilter.getField());\n        Assert.assertEquals(currentTime.getMillis(), lastFilter.getCurrentTime());\n        Assert.assertEquals(currentTime.withMinuteOfHour(0)\n                                    .withSecondOfMinute(0)\n                                    .withMillisOfSecond(0)\n                                    .getMillis(), timeWindow.getStartTime());\n    }", "signature": "void testGetWindowStartCeiling()", "full_signature": "@Test public void testGetWindowStartCeiling()", "class_method_signature": "LastFilterTest.testGetWindowStartCeiling()", "testcase": true, "constructor": false, "invocations": ["format", "getMillis", "readValue", "getWindow", "assertEquals", "getField", "assertEquals", "getMillis", "getCurrentTime", "assertEquals", "getMillis", "withMillisOfSecond", "withSecondOfMinute", "withMinuteOfHour", "getStartTime"]}, "focal_class": {"identifier": "LastFilter", "superclass": "extends Filter", "interfaces": "", "fields": [{"original_string": "private long currentTime;", "modifier": "private", "type": "long", "declarator": "currentTime", "var_name": "currentTime"}, {"original_string": "private RoundingMode roundingMode;", "modifier": "private", "type": "RoundingMode", "declarator": "roundingMode", "var_name": "roundingMode"}, {"original_string": "@NotNull\n    private Duration duration;", "modifier": "@NotNull\n    private", "type": "Duration", "declarator": "duration", "var_name": "duration"}], "methods": [{"identifier": "LastFilter", "parameters": "()", "modifiers": "public", "return": "", "signature": " LastFilter()", "full_signature": "public  LastFilter()", "class_method_signature": "LastFilter.LastFilter()", "testcase": false, "constructor": true}, {"identifier": "LastFilter", "parameters": "(String field, long currentTime, Duration duration, RoundingMode roundingMode)", "modifiers": "@Builder public", "return": "", "signature": " LastFilter(String field, long currentTime, Duration duration, RoundingMode roundingMode)", "full_signature": "@Builder public  LastFilter(String field, long currentTime, Duration duration, RoundingMode roundingMode)", "class_method_signature": "LastFilter.LastFilter(String field, long currentTime, Duration duration, RoundingMode roundingMode)", "testcase": false, "constructor": true}, {"identifier": "setDuration", "parameters": "(Duration duration)", "modifiers": "public", "return": "void", "signature": "void setDuration(Duration duration)", "full_signature": "public void setDuration(Duration duration)", "class_method_signature": "LastFilter.setDuration(Duration duration)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(FilterVisitor<T> visitor)", "modifiers": "@Override public", "return": "T", "signature": "T accept(FilterVisitor<T> visitor)", "full_signature": "@Override public T accept(FilterVisitor<T> visitor)", "class_method_signature": "LastFilter.accept(FilterVisitor<T> visitor)", "testcase": false, "constructor": false}, {"identifier": "getWindow", "parameters": "()", "modifiers": "@JsonIgnore public", "return": "TimeWindow", "signature": "TimeWindow getWindow()", "full_signature": "@JsonIgnore public TimeWindow getWindow()", "class_method_signature": "LastFilter.getWindow()", "testcase": false, "constructor": false}, {"identifier": "isFilterTemporal", "parameters": "()", "modifiers": "@Override @JsonIgnore public", "return": "boolean", "signature": "boolean isFilterTemporal()", "full_signature": "@Override @JsonIgnore public boolean isFilterTemporal()", "class_method_signature": "LastFilter.isFilterTemporal()", "testcase": false, "constructor": false}], "file": "foxtrot-common/src/main/java/com/flipkart/foxtrot/common/query/datetime/LastFilter.java"}, "focal_method": {"identifier": "getWindow", "parameters": "()", "modifiers": "@JsonIgnore public", "return": "TimeWindow", "body": "@JsonIgnore\n    public TimeWindow getWindow() {\n        return WindowUtil.calculate(currentTime, duration, roundingMode);\n    }", "signature": "TimeWindow getWindow()", "full_signature": "@JsonIgnore public TimeWindow getWindow()", "class_method_signature": "LastFilter.getWindow()", "testcase": false, "constructor": false, "invocations": ["calculate"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}