{"test_class": {"identifier": "KVMFencerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    HostDao hostDao;", "modifier": "@Mock", "type": "HostDao", "declarator": "hostDao", "var_name": "hostDao"}, {"original_string": "@Mock\n    AgentManager agentManager;", "modifier": "@Mock", "type": "AgentManager", "declarator": "agentManager", "var_name": "agentManager"}, {"original_string": "@Mock\n    AlertManager alertMgr;", "modifier": "@Mock", "type": "AlertManager", "declarator": "alertMgr", "var_name": "alertMgr"}, {"original_string": "@Mock\n    ResourceManager resourceManager;", "modifier": "@Mock", "type": "ResourceManager", "declarator": "resourceManager", "var_name": "resourceManager"}, {"original_string": "KVMFencer fencer;", "modifier": "", "type": "KVMFencer", "declarator": "fencer", "var_name": "fencer"}], "file": "server/src/test/java/com/cloud/ha/KVMFencerTest.java"}, "test_case": {"identifier": "testWithTimeoutingFence", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithTimeoutingFence() throws AgentUnavailableException, OperationTimedoutException {\n        HostVO host = Mockito.mock(HostVO.class);\n        Mockito.when(host.getClusterId()).thenReturn(1l);\n        Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(host.getStatus()).thenReturn(Status.Up);\n        Mockito.when(host.getDataCenterId()).thenReturn(1l);\n        Mockito.when(host.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(1l);\n\n        HostVO secondHost = Mockito.mock(HostVO.class);\n        Mockito.when(secondHost.getClusterId()).thenReturn(1l);\n        Mockito.when(secondHost.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(secondHost.getStatus()).thenReturn(Status.Up);\n        Mockito.when(secondHost.getDataCenterId()).thenReturn(1l);\n        Mockito.when(secondHost.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(2l);\n\n        VirtualMachine virtualMachine = Mockito.mock(VirtualMachine.class);\n\n        Mockito.when(resourceManager.listAllHostsInCluster(1l)).thenReturn(Arrays.asList(host, secondHost));\n\n        Mockito.when(agentManager.send(Matchers.anyLong(), Matchers.any(FenceCommand.class))).thenThrow(new OperationTimedoutException(null, 2l, 0l, 0, false));\n\n        Assert.assertFalse(fencer.fenceOff(virtualMachine, host));\n    }", "signature": "void testWithTimeoutingFence()", "full_signature": "@Test public void testWithTimeoutingFence()", "class_method_signature": "KVMFencerTest.testWithTimeoutingFence()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getClusterId", "thenReturn", "when", "getHypervisorType", "thenReturn", "when", "getStatus", "thenReturn", "when", "getDataCenterId", "thenReturn", "when", "getPodId", "thenReturn", "when", "getId", "mock", "thenReturn", "when", "getClusterId", "thenReturn", "when", "getHypervisorType", "thenReturn", "when", "getStatus", "thenReturn", "when", "getDataCenterId", "thenReturn", "when", "getPodId", "thenReturn", "when", "getId", "mock", "thenReturn", "when", "listAllHostsInCluster", "asList", "thenThrow", "when", "send", "anyLong", "any", "assertFalse", "fenceOff"]}, "focal_class": {"identifier": "KVMFencer", "superclass": "extends AdapterBase", "interfaces": "implements FenceBuilder", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(KVMFencer.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(KVMFencer.class)", "var_name": "s_logger"}, {"original_string": "@Inject\n    HostDao _hostDao;", "modifier": "@Inject", "type": "HostDao", "declarator": "_hostDao", "var_name": "_hostDao"}, {"original_string": "@Inject\n    AgentManager _agentMgr;", "modifier": "@Inject", "type": "AgentManager", "declarator": "_agentMgr", "var_name": "_agentMgr"}, {"original_string": "@Inject\n    AlertManager _alertMgr;", "modifier": "@Inject", "type": "AlertManager", "declarator": "_alertMgr", "var_name": "_alertMgr"}, {"original_string": "@Inject\n    ResourceManager _resourceMgr;", "modifier": "@Inject", "type": "ResourceManager", "declarator": "_resourceMgr", "var_name": "_resourceMgr"}], "methods": [{"identifier": "configure", "parameters": "(String name, Map<String, Object> params)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean configure(String name, Map<String, Object> params)", "full_signature": "@Override public boolean configure(String name, Map<String, Object> params)", "class_method_signature": "KVMFencer.configure(String name, Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start()", "full_signature": "@Override public boolean start()", "class_method_signature": "KVMFencer.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stop()", "full_signature": "@Override public boolean stop()", "class_method_signature": "KVMFencer.stop()", "testcase": false, "constructor": false}, {"identifier": "KVMFencer", "parameters": "()", "modifiers": "public", "return": "", "signature": " KVMFencer()", "full_signature": "public  KVMFencer()", "class_method_signature": "KVMFencer.KVMFencer()", "testcase": false, "constructor": true}, {"identifier": "fenceOff", "parameters": "(VirtualMachine vm, Host host)", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean fenceOff(VirtualMachine vm, Host host)", "full_signature": "@Override public Boolean fenceOff(VirtualMachine vm, Host host)", "class_method_signature": "KVMFencer.fenceOff(VirtualMachine vm, Host host)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/ha/KVMFencer.java"}, "focal_method": {"identifier": "fenceOff", "parameters": "(VirtualMachine vm, Host host)", "modifiers": "@Override public", "return": "Boolean", "body": "@Override\n    public Boolean fenceOff(VirtualMachine vm, Host host) {\n        if (host.getHypervisorType() != HypervisorType.KVM) {\n            s_logger.warn(\"Don't know how to fence non kvm hosts \" + host.getHypervisorType());\n            return null;\n        }\n\n        List<HostVO> hosts = _resourceMgr.listAllHostsInCluster(host.getClusterId());\n        FenceCommand fence = new FenceCommand(vm, host);\n\n        int i = 0;\n        for (HostVO h : hosts) {\n            if (h.getHypervisorType() == HypervisorType.KVM) {\n                if (h.getStatus() != Status.Up) {\n                    continue;\n                }\n\n                i++;\n\n                if (h.getId() == host.getId()) {\n                    continue;\n                }\n                FenceAnswer answer;\n                try {\n                    answer = (FenceAnswer)_agentMgr.send(h.getId(), fence);\n                } catch (AgentUnavailableException e) {\n                    s_logger.info(\"Moving on to the next host because \" + h.toString() + \" is unavailable\");\n                    continue;\n                } catch (OperationTimedoutException e) {\n                    s_logger.info(\"Moving on to the next host because \" + h.toString() + \" is unavailable\");\n                    continue;\n                }\n                if (answer != null && answer.getResult()) {\n                    return true;\n                }\n            }\n        }\n\n        _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST, host.getDataCenterId(), host.getPodId(),\n                            \"Unable to fence off host: \" + host.getId(),\n                            \"Fencing off host \" + host.getId() + \" did not succeed after asking \" + i + \" hosts. \" +\n                            \"Check Agent logs for more information.\");\n\n        s_logger.error(\"Unable to fence off \" + vm.toString() + \" on \" + host.toString());\n\n        return false;\n    }", "signature": "Boolean fenceOff(VirtualMachine vm, Host host)", "full_signature": "@Override public Boolean fenceOff(VirtualMachine vm, Host host)", "class_method_signature": "KVMFencer.fenceOff(VirtualMachine vm, Host host)", "testcase": false, "constructor": false, "invocations": ["getHypervisorType", "warn", "getHypervisorType", "listAllHostsInCluster", "getClusterId", "getHypervisorType", "getStatus", "getId", "getId", "send", "getId", "info", "toString", "info", "toString", "getResult", "sendAlert", "getDataCenterId", "getPodId", "getId", "getId", "error", "toString", "toString"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}