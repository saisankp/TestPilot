{"test_class": {"identifier": "JavaDomUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/mybatis-generator-core/src/test/java/org/mybatis/generator/api/dom/java/JavaDomUtilsTest.java"}, "test_case": {"identifier": "testGenericTypeNothingImported", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenericTypeNothingImported() {\n        Interface interfaze = new Interface(new FullyQualifiedJavaType(\"com.foo.UserMapper\"));\n\n        FullyQualifiedJavaType fqjt = new FullyQualifiedJavaType(\"java.util.Map<java.math.BigDecimal, java.util.List<com.beeant.dto.User>>\");\n        assertEquals(\"java.util.Map<java.math.BigDecimal, java.util.List<com.beeant.dto.User>>\",\n                JavaDomUtils.calculateTypeName(interfaze, fqjt));\n    }", "signature": "void testGenericTypeNothingImported()", "full_signature": "@Test public void testGenericTypeNothingImported()", "class_method_signature": "JavaDomUtilsTest.testGenericTypeNothingImported()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "calculateTypeName"]}, "focal_class": {"identifier": "JavaDomUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "JavaDomUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " JavaDomUtils()", "full_signature": "private  JavaDomUtils()", "class_method_signature": "JavaDomUtils.JavaDomUtils()", "testcase": false, "constructor": true}, {"identifier": "calculateTypeName", "parameters": "(CompilationUnit compilationUnit, FullyQualifiedJavaType fqjt)", "modifiers": "public static", "return": "String", "signature": "String calculateTypeName(CompilationUnit compilationUnit, FullyQualifiedJavaType fqjt)", "full_signature": "public static String calculateTypeName(CompilationUnit compilationUnit, FullyQualifiedJavaType fqjt)", "class_method_signature": "JavaDomUtils.calculateTypeName(CompilationUnit compilationUnit, FullyQualifiedJavaType fqjt)", "testcase": false, "constructor": false}, {"identifier": "calculateParameterizedTypeName", "parameters": "(CompilationUnit compilationUnit,\n            FullyQualifiedJavaType fqjt)", "modifiers": "private static", "return": "String", "signature": "String calculateParameterizedTypeName(CompilationUnit compilationUnit,\n            FullyQualifiedJavaType fqjt)", "full_signature": "private static String calculateParameterizedTypeName(CompilationUnit compilationUnit,\n            FullyQualifiedJavaType fqjt)", "class_method_signature": "JavaDomUtils.calculateParameterizedTypeName(CompilationUnit compilationUnit,\n            FullyQualifiedJavaType fqjt)", "testcase": false, "constructor": false}, {"identifier": "typeDoesNotRequireImport", "parameters": "(FullyQualifiedJavaType fullyQualifiedJavaType)", "modifiers": "private static", "return": "boolean", "signature": "boolean typeDoesNotRequireImport(FullyQualifiedJavaType fullyQualifiedJavaType)", "full_signature": "private static boolean typeDoesNotRequireImport(FullyQualifiedJavaType fullyQualifiedJavaType)", "class_method_signature": "JavaDomUtils.typeDoesNotRequireImport(FullyQualifiedJavaType fullyQualifiedJavaType)", "testcase": false, "constructor": false}, {"identifier": "typeIsInSamePackage", "parameters": "(CompilationUnit compilationUnit,\n            FullyQualifiedJavaType fullyQualifiedJavaType)", "modifiers": "private static", "return": "boolean", "signature": "boolean typeIsInSamePackage(CompilationUnit compilationUnit,\n            FullyQualifiedJavaType fullyQualifiedJavaType)", "full_signature": "private static boolean typeIsInSamePackage(CompilationUnit compilationUnit,\n            FullyQualifiedJavaType fullyQualifiedJavaType)", "class_method_signature": "JavaDomUtils.typeIsInSamePackage(CompilationUnit compilationUnit,\n            FullyQualifiedJavaType fullyQualifiedJavaType)", "testcase": false, "constructor": false}, {"identifier": "typeIsAlreadyImported", "parameters": "(CompilationUnit compilationUnit,\n            FullyQualifiedJavaType fullyQualifiedJavaType)", "modifiers": "private static", "return": "boolean", "signature": "boolean typeIsAlreadyImported(CompilationUnit compilationUnit,\n            FullyQualifiedJavaType fullyQualifiedJavaType)", "full_signature": "private static boolean typeIsAlreadyImported(CompilationUnit compilationUnit,\n            FullyQualifiedJavaType fullyQualifiedJavaType)", "class_method_signature": "JavaDomUtils.typeIsAlreadyImported(CompilationUnit compilationUnit,\n            FullyQualifiedJavaType fullyQualifiedJavaType)", "testcase": false, "constructor": false}], "file": "core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/JavaDomUtils.java"}, "focal_method": {"identifier": "calculateTypeName", "parameters": "(CompilationUnit compilationUnit, FullyQualifiedJavaType fqjt)", "modifiers": "public static", "return": "String", "body": "public static String calculateTypeName(CompilationUnit compilationUnit, FullyQualifiedJavaType fqjt) {\n\n        if (fqjt.isArray()) {\n            // if array, then calculate the name of the base (non-array) type\n            // then add the array indicators back in\n            String fqn = fqjt.getFullyQualifiedName();\n            String typeName = calculateTypeName(compilationUnit,\n                    new FullyQualifiedJavaType(fqn.substring(0, fqn.indexOf('['))));\n            return typeName + fqn.substring(fqn.indexOf('['));\n        }\n\n        if (!fqjt.getTypeArguments().isEmpty()) {\n            return calculateParameterizedTypeName(compilationUnit, fqjt);\n        }\n\n        if (compilationUnit == null\n                || typeDoesNotRequireImport(fqjt)\n                || typeIsInSamePackage(compilationUnit, fqjt)\n                || typeIsAlreadyImported(compilationUnit, fqjt)) {\n            return fqjt.getShortName();\n        } else {\n            return fqjt.getFullyQualifiedName();\n        }\n    }", "signature": "String calculateTypeName(CompilationUnit compilationUnit, FullyQualifiedJavaType fqjt)", "full_signature": "public static String calculateTypeName(CompilationUnit compilationUnit, FullyQualifiedJavaType fqjt)", "class_method_signature": "JavaDomUtils.calculateTypeName(CompilationUnit compilationUnit, FullyQualifiedJavaType fqjt)", "testcase": false, "constructor": false, "invocations": ["isArray", "getFullyQualifiedName", "calculateTypeName", "substring", "indexOf", "substring", "indexOf", "isEmpty", "getTypeArguments", "calculateParameterizedTypeName", "typeDoesNotRequireImport", "typeIsInSamePackage", "typeIsAlreadyImported", "getShortName", "getFullyQualifiedName"]}, "repository": {"repo_id": 8121707, "url": "https://github.com/mybatis/generator", "stars": 4099, "created": "2/10/2013 11:14:50 AM +00:00", "updates": "2020-01-27T16:52:10+00:00", "fork": "False", "license": "licensed"}}