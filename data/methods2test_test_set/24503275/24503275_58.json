{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/util/UtilsTest.java"}, "test_case": {"identifier": "testGetValueShortString2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetValueShortString2() {\n\n        String expected = \"123\u00b7(10^3)\";\n        String result = Utils.getValueShortString(new BigInteger(\"123456\"));\n\n        assertEquals(expected, result);\n    }", "signature": "void testGetValueShortString2()", "full_signature": "@Test public void testGetValueShortString2()", "class_method_signature": "UtilsTest.testGetValueShortString2()", "testcase": true, "constructor": false, "invocations": ["getValueShortString", "assertEquals"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static SecureRandom random = new SecureRandom();", "modifier": "private static", "type": "SecureRandom", "declarator": "random = new SecureRandom()", "var_name": "random"}, {"original_string": "static BigInteger _1000_ = new BigInteger(\"1000\");", "modifier": "static", "type": "BigInteger", "declarator": "_1000_ = new BigInteger(\"1000\")", "var_name": "_1000_"}, {"original_string": "public static double JAVA_VERSION = getJavaVersion();", "modifier": "public static", "type": "double", "declarator": "JAVA_VERSION = getJavaVersion()", "var_name": "JAVA_VERSION"}], "methods": [{"identifier": "hexStringToDecimalString", "parameters": "(String hexNum)", "modifiers": "public static", "return": "String", "signature": "String hexStringToDecimalString(String hexNum)", "full_signature": "public static String hexStringToDecimalString(String hexNum)", "class_method_signature": "Utils.hexStringToDecimalString(String hexNum)", "testcase": false, "constructor": false}, {"identifier": "longToDateTime", "parameters": "(long timestamp)", "modifiers": "public static", "return": "String", "signature": "String longToDateTime(long timestamp)", "full_signature": "public static String longToDateTime(long timestamp)", "class_method_signature": "Utils.longToDateTime(long timestamp)", "testcase": false, "constructor": false}, {"identifier": "getImageIcon", "parameters": "(String resource)", "modifiers": "public static", "return": "ImageIcon", "signature": "ImageIcon getImageIcon(String resource)", "full_signature": "public static ImageIcon getImageIcon(String resource)", "class_method_signature": "Utils.getImageIcon(String resource)", "testcase": false, "constructor": false}, {"identifier": "getValueShortString", "parameters": "(BigInteger number)", "modifiers": "public static", "return": "String", "signature": "String getValueShortString(BigInteger number)", "full_signature": "public static String getValueShortString(BigInteger number)", "class_method_signature": "Utils.getValueShortString(BigInteger number)", "testcase": false, "constructor": false}, {"identifier": "addressStringToBytes", "parameters": "(String hex)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] addressStringToBytes(String hex)", "full_signature": "public static byte[] addressStringToBytes(String hex)", "class_method_signature": "Utils.addressStringToBytes(String hex)", "testcase": false, "constructor": false}, {"identifier": "isValidAddress", "parameters": "(byte[] addr)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidAddress(byte[] addr)", "full_signature": "public static boolean isValidAddress(byte[] addr)", "class_method_signature": "Utils.isValidAddress(byte[] addr)", "testcase": false, "constructor": false}, {"identifier": "getAddressShortString", "parameters": "(byte[] addr)", "modifiers": "public static", "return": "String", "signature": "String getAddressShortString(byte[] addr)", "full_signature": "public static String getAddressShortString(byte[] addr)", "class_method_signature": "Utils.getAddressShortString(byte[] addr)", "testcase": false, "constructor": false}, {"identifier": "getRandom", "parameters": "()", "modifiers": "public static", "return": "SecureRandom", "signature": "SecureRandom getRandom()", "full_signature": "public static SecureRandom getRandom()", "class_method_signature": "Utils.getRandom()", "testcase": false, "constructor": false}, {"identifier": "getJavaVersion", "parameters": "()", "modifiers": "static", "return": "double", "signature": "double getJavaVersion()", "full_signature": "static double getJavaVersion()", "class_method_signature": "Utils.getJavaVersion()", "testcase": false, "constructor": false}, {"identifier": "getHashlistShort", "parameters": "(List<byte[]> blockHashes)", "modifiers": "public static", "return": "StringBuffer", "signature": "StringBuffer getHashlistShort(List<byte[]> blockHashes)", "full_signature": "public static StringBuffer getHashlistShort(List<byte[]> blockHashes)", "class_method_signature": "Utils.getHashlistShort(List<byte[]> blockHashes)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/util/Utils.java"}, "focal_method": {"identifier": "getValueShortString", "parameters": "(BigInteger number)", "modifiers": "public static", "return": "String", "body": "public static String getValueShortString(BigInteger number) {\n        BigInteger result = number;\n        int pow = 0;\n        while (result.compareTo(_1000_) == 1 || result.compareTo(_1000_) == 0) {\n            result = result.divide(_1000_);\n            pow += 3;\n        }\n        return result.toString() + \"\u00b7(\" + \"10^\" + pow + \")\";\n    }", "signature": "String getValueShortString(BigInteger number)", "full_signature": "public static String getValueShortString(BigInteger number)", "class_method_signature": "Utils.getValueShortString(BigInteger number)", "testcase": false, "constructor": false, "invocations": ["compareTo", "compareTo", "divide", "toString"]}, "repository": {"repo_id": 24503275, "url": "https://github.com/ethereumj/ethereumj", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 27, "size": 13884, "license": "licensed"}}