{"test_class": {"identifier": "SessionCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Session session;", "modifier": "private", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "private final UUID uuid = TestConstants.PLAYER_ONE_UUID;", "modifier": "private final", "type": "UUID", "declarator": "uuid = TestConstants.PLAYER_ONE_UUID", "var_name": "uuid"}, {"original_string": "private final UUID serverUUID = TestConstants.SERVER_UUID;", "modifier": "private final", "type": "UUID", "declarator": "serverUUID = TestConstants.SERVER_UUID", "var_name": "serverUUID"}, {"original_string": "private SessionCache sessionCache;", "modifier": "private", "type": "SessionCache", "declarator": "sessionCache", "var_name": "sessionCache"}], "file": "Plan/common/src/test/java/com/djrapitops/plan/gathering/cache/SessionCacheTest.java"}, "test_case": {"identifier": "testAtomity", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testAtomity() {\n        Optional<Session> cachedSession = SessionCache.getCachedSession(uuid);\n        assertTrue(cachedSession.isPresent());\n        assertEquals(session, cachedSession.get());\n    }", "signature": "void testAtomity()", "full_signature": "@Test void testAtomity()", "class_method_signature": "SessionCacheTest.testAtomity()", "testcase": true, "constructor": false, "invocations": ["getCachedSession", "assertTrue", "isPresent", "assertEquals", "get"]}, "focal_class": {"identifier": "SessionCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<UUID, Session> ACTIVE_SESSIONS = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "Map<UUID, Session>", "declarator": "ACTIVE_SESSIONS = new ConcurrentHashMap<>()", "var_name": "ACTIVE_SESSIONS"}], "methods": [{"identifier": "SessionCache", "parameters": "()", "modifiers": "@Inject public", "return": "", "signature": " SessionCache()", "full_signature": "@Inject public  SessionCache()", "class_method_signature": "SessionCache.SessionCache()", "testcase": false, "constructor": true}, {"identifier": "getActiveSessions", "parameters": "()", "modifiers": "public static", "return": "Map<UUID, Session>", "signature": "Map<UUID, Session> getActiveSessions()", "full_signature": "public static Map<UUID, Session> getActiveSessions()", "class_method_signature": "SessionCache.getActiveSessions()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clear()", "full_signature": "public static void clear()", "class_method_signature": "SessionCache.clear()", "testcase": false, "constructor": false}, {"identifier": "refreshActiveSessionsState", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void refreshActiveSessionsState()", "full_signature": "public static void refreshActiveSessionsState()", "class_method_signature": "SessionCache.refreshActiveSessionsState()", "testcase": false, "constructor": false}, {"identifier": "getCachedSession", "parameters": "(UUID playerUUID)", "modifiers": "public static", "return": "Optional<Session>", "signature": "Optional<Session> getCachedSession(UUID playerUUID)", "full_signature": "public static Optional<Session> getCachedSession(UUID playerUUID)", "class_method_signature": "SessionCache.getCachedSession(UUID playerUUID)", "testcase": false, "constructor": false}, {"identifier": "cacheSession", "parameters": "(UUID playerUUID, Session session)", "modifiers": "public", "return": "Optional<Session>", "signature": "Optional<Session> cacheSession(UUID playerUUID, Session session)", "full_signature": "public Optional<Session> cacheSession(UUID playerUUID, Session session)", "class_method_signature": "SessionCache.cacheSession(UUID playerUUID, Session session)", "testcase": false, "constructor": false}, {"identifier": "endSession", "parameters": "(UUID playerUUID, long time)", "modifiers": "public", "return": "Optional<Session>", "signature": "Optional<Session> endSession(UUID playerUUID, long time)", "full_signature": "public Optional<Session> endSession(UUID playerUUID, long time)", "class_method_signature": "SessionCache.endSession(UUID playerUUID, long time)", "testcase": false, "constructor": false}], "file": "Plan/common/src/main/java/com/djrapitops/plan/gathering/cache/SessionCache.java"}, "focal_method": {"identifier": "getCachedSession", "parameters": "(UUID playerUUID)", "modifiers": "public static", "return": "Optional<Session>", "body": "public static Optional<Session> getCachedSession(UUID playerUUID) {\n        Optional<Session> found = Optional.ofNullable(ACTIVE_SESSIONS.get(playerUUID));\n        found.ifPresent(Session::updateState);\n        return found;\n    }", "signature": "Optional<Session> getCachedSession(UUID playerUUID)", "full_signature": "public static Optional<Session> getCachedSession(UUID playerUUID)", "class_method_signature": "SessionCache.getCachedSession(UUID playerUUID)", "testcase": false, "constructor": false, "invocations": ["ofNullable", "get", "ifPresent"]}, "repository": {"repo_id": 75960287, "url": "https://github.com/plan-player-analytics/Plan", "stars": 172, "created": "12/8/2016 5:34:11 PM +00:00", "updates": "2020-01-27T14:34:49+00:00", "fork": "False", "license": "licensed"}}