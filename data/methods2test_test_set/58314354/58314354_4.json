{"test_class": {"identifier": "LocalWeatherDataConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "JavaElasticSearchExperiment/src/test/java/converter/LocalWeatherDataConverterTest.java"}, "test_case": {"identifier": "testConvert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvert() throws Exception {\n\n        // CSV Weather Data:\n        csv.model.LocalWeatherData csvLocalWeatherData = new csv.model.LocalWeatherData();\n\n        csvLocalWeatherData.setWban(\"WB1931\");\n        csvLocalWeatherData.setDate(LocalDate.of(2013, 1, 1));\n        csvLocalWeatherData.setTime(LocalTime.of(0, 30, 0, 0));\n        csvLocalWeatherData.setDryBulbCelsius(22.0f);\n        csvLocalWeatherData.setSkyCondition(\"CLR\");\n        csvLocalWeatherData.setStationPressure(42.12f);\n        csvLocalWeatherData.setWindSpeed(5.0f);\n\n        // CSV Station Data:\n        csv.model.Station csvStationData = new csv.model.Station();\n        csvStationData.setWban(\"24028\");\n        csvStationData.setWmo(\"72566\");\n        csvStationData.setCallSign(\"BFF\");\n        csvStationData.setClimateDivisionCode(\"01\");\n        csvStationData.setClimateDivisionStateCode(\"25\");\n        csvStationData.setClimateDivisionStationCode(\"7665\");\n        csvStationData.setName(\"SCOTTSBLUFF\");\n        csvStationData.setState(\"NE\");\n        csvStationData.setLocation(\"WESTERN NE REGIONAL/HEILIG FIELD AP\");\n        csvStationData.setLatitude(41.8705f);\n        csvStationData.setLongitude(-103.593f);\n        csvStationData.setGroundHeight(3945);\n        csvStationData.setStationHeight(3958);\n        csvStationData.setBarometer(3949);\n        csvStationData.setTimeZone(-7);\n\n        // Elastic Geo Data:\n        elastic.model.GeoLocation elasticGeoLocation = new elastic.model.GeoLocation();\n\n        elasticGeoLocation.lat = csvStationData.getLatitude();\n        elasticGeoLocation.lon = csvStationData.getLongitude();\n\n        // Elastic Station Data:\n        elastic.model.Station elasticStation = new elastic.model.Station();\n\n        elasticStation.wban = csvStationData.getWban();\n        elasticStation.name = csvStationData.getName();\n        elasticStation.state = csvStationData.getState();\n        elasticStation.location = csvStationData.getLocation();\n        elasticStation.geoLocation = elasticGeoLocation;\n\n        // Elastic Weather Data:\n        elastic.model.LocalWeatherData elasticLocalWeatherData = new elastic.model.LocalWeatherData();\n\n        elasticLocalWeatherData.windSpeed = csvLocalWeatherData.getWindSpeed();\n        elasticLocalWeatherData.temperature = csvLocalWeatherData.getDryBulbCelsius();\n        elasticLocalWeatherData.stationPressure = csvLocalWeatherData.getStationPressure();\n        elasticLocalWeatherData.skyCondition = csvLocalWeatherData.getSkyCondition();\n        elasticLocalWeatherData.dateTime = DateUtilities.from(csvLocalWeatherData.getDate(), csvLocalWeatherData.getTime(), ZoneOffset.ofHours(csvStationData.getTimeZone()));\n        elasticLocalWeatherData.station = elasticStation;\n\n        // Get the Converter Result:\n        elastic.model.LocalWeatherData elasticConverterResult = LocalWeatherDataConverter.convert(csvLocalWeatherData, csvStationData);\n\n        Assert.assertNotEquals(null, elasticConverterResult);\n\n        Assert.assertEquals(elasticLocalWeatherData.windSpeed, elasticConverterResult.windSpeed);\n        Assert.assertEquals(elasticLocalWeatherData.temperature, elasticConverterResult.temperature);\n        Assert.assertEquals(elasticLocalWeatherData.stationPressure, elasticConverterResult.stationPressure);\n        Assert.assertEquals(elasticLocalWeatherData.skyCondition, elasticConverterResult.skyCondition);\n        Assert.assertEquals(elasticLocalWeatherData.dateTime, elasticConverterResult.dateTime);\n\n        Assert.assertNotEquals(null, elasticConverterResult.station);\n\n        Assert.assertEquals(elasticLocalWeatherData.station.wban, elasticConverterResult.station.wban);\n        Assert.assertEquals(elasticLocalWeatherData.station.name, elasticConverterResult.station.name);\n        Assert.assertEquals(elasticLocalWeatherData.station.state, elasticConverterResult.station.state);\n        Assert.assertEquals(elasticLocalWeatherData.station.location, elasticConverterResult.station.location);\n\n        Assert.assertNotEquals(null, elasticLocalWeatherData.station.geoLocation );\n        Assert.assertEquals(elasticLocalWeatherData.station.geoLocation.lat, elasticLocalWeatherData.station.geoLocation.lat, 1e-10);\n        Assert.assertEquals(elasticLocalWeatherData.station.geoLocation.lon, elasticLocalWeatherData.station.geoLocation.lon, 1e-10);\n\n\n        // Elastic Weather Data:\n\n\n    }", "signature": "void testConvert()", "full_signature": "@Test public void testConvert()", "class_method_signature": "LocalWeatherDataConverterTest.testConvert()", "testcase": true, "constructor": false, "invocations": ["setWban", "setDate", "of", "setTime", "of", "setDryBulbCelsius", "setSkyCondition", "setStationPressure", "setWindSpeed", "setWban", "setWmo", "setCallSign", "setClimateDivisionCode", "setClimateDivisionStateCode", "setClimateDivisionStationCode", "setName", "setState", "setLocation", "setLatitude", "setLongitude", "setGroundHeight", "setStationHeight", "setBarometer", "setTimeZone", "getLatitude", "getLongitude", "getWban", "getName", "getState", "getLocation", "getWindSpeed", "getDryBulbCelsius", "getStationPressure", "getSkyCondition", "from", "getDate", "getTime", "ofHours", "getTimeZone", "convert", "assertNotEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertNotEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertNotEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "LocalWeatherDataConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convert", "parameters": "(csv.model.LocalWeatherData csvLocalWeatherData, csv.model.Station csvStation)", "modifiers": "public static", "return": "elastic.model.LocalWeatherData", "signature": "elastic.model.LocalWeatherData convert(csv.model.LocalWeatherData csvLocalWeatherData, csv.model.Station csvStation)", "full_signature": "public static elastic.model.LocalWeatherData convert(csv.model.LocalWeatherData csvLocalWeatherData, csv.model.Station csvStation)", "class_method_signature": "LocalWeatherDataConverter.convert(csv.model.LocalWeatherData csvLocalWeatherData, csv.model.Station csvStation)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(csv.model.Station csvStation)", "modifiers": "public static", "return": "elastic.model.Station", "signature": "elastic.model.Station convert(csv.model.Station csvStation)", "full_signature": "public static elastic.model.Station convert(csv.model.Station csvStation)", "class_method_signature": "LocalWeatherDataConverter.convert(csv.model.Station csvStation)", "testcase": false, "constructor": false}], "file": "JavaElasticSearchExperiment/src/main/java/converter/LocalWeatherDataConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(csv.model.LocalWeatherData csvLocalWeatherData, csv.model.Station csvStation)", "modifiers": "public static", "return": "elastic.model.LocalWeatherData", "body": "public static elastic.model.LocalWeatherData convert(csv.model.LocalWeatherData csvLocalWeatherData, csv.model.Station csvStation) {\n\n        elastic.model.LocalWeatherData elasticLocalWeatherData = new elastic.model.LocalWeatherData();\n\n        elasticLocalWeatherData.dateTime = DateUtilities.from(csvLocalWeatherData.getDate(), csvLocalWeatherData.getTime(), ZoneOffset.ofHours(csvStation.getTimeZone()));\n        elasticLocalWeatherData.skyCondition = csvLocalWeatherData.getSkyCondition();\n        elasticLocalWeatherData.stationPressure = csvLocalWeatherData.getStationPressure();\n        elasticLocalWeatherData.temperature = csvLocalWeatherData.getDryBulbCelsius();\n        elasticLocalWeatherData.windSpeed = csvLocalWeatherData.getWindSpeed();\n\n        // Convert the Station data:\n        elasticLocalWeatherData.station = convert(csvStation);\n\n        return elasticLocalWeatherData;\n    }", "signature": "elastic.model.LocalWeatherData convert(csv.model.LocalWeatherData csvLocalWeatherData, csv.model.Station csvStation)", "full_signature": "public static elastic.model.LocalWeatherData convert(csv.model.LocalWeatherData csvLocalWeatherData, csv.model.Station csvStation)", "class_method_signature": "LocalWeatherDataConverter.convert(csv.model.LocalWeatherData csvLocalWeatherData, csv.model.Station csvStation)", "testcase": false, "constructor": false, "invocations": ["from", "getDate", "getTime", "ofHours", "getTimeZone", "getSkyCondition", "getStationPressure", "getDryBulbCelsius", "getWindSpeed", "convert"]}, "repository": {"repo_id": 58314354, "url": "https://github.com/bytefish/JavaElasticSearchExperiment", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 292, "license": "licensed"}}