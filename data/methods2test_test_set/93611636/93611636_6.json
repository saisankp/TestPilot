{"test_class": {"identifier": "AuthenticationControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  private MockMvc mockMvc;", "modifier": "@Autowired\n  private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@MockBean\n  private AuthenticationService authenticationService;", "modifier": "@MockBean\n  private", "type": "AuthenticationService", "declarator": "authenticationService", "var_name": "authenticationService"}, {"original_string": "@MockBean\n  private AuthorizationHeaderGenerator headerGenerator;", "modifier": "@MockBean\n  private", "type": "AuthorizationHeaderGenerator", "declarator": "headerGenerator", "var_name": "headerGenerator"}, {"original_string": "private final String password = uniquify(\"password\");", "modifier": "private final", "type": "String", "declarator": "password = uniquify(\"password\")", "var_name": "password"}, {"original_string": "private final String username = uniquify(\"username\");", "modifier": "private final", "type": "String", "declarator": "username = uniquify(\"username\")", "var_name": "username"}, {"original_string": "private final String token = uniquify(\"token\");", "modifier": "private final", "type": "String", "declarator": "token = uniquify(\"token\")", "var_name": "token"}, {"original_string": "private final ObjectMapper objectMapper = new ObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper = new ObjectMapper()", "var_name": "objectMapper"}], "file": "doorman/src/test/java/io/servicecomb/company/auth/endpoint/rest/AuthenticationControllerTest.java"}, "test_case": {"identifier": "validatesTokenAgainstStoredUserSessions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void validatesTokenAgainstStoredUserSessions() throws Exception {\n    when(authenticationService.validate(token)).thenReturn(username);\n\n    mockMvc.perform(\n        post(\"/rest/validate\")\n            .contentType(APPLICATION_JSON_UTF8_VALUE)\n            .content(objectMapper.writeValueAsBytes(new Token(token))))\n        .andExpect(status().isOk())\n        .andExpect(content().string(username));\n  }", "signature": "void validatesTokenAgainstStoredUserSessions()", "full_signature": "@Test public void validatesTokenAgainstStoredUserSessions()", "class_method_signature": "AuthenticationControllerTest.validatesTokenAgainstStoredUserSessions()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "validate", "andExpect", "andExpect", "perform", "content", "contentType", "post", "writeValueAsBytes", "isOk", "status", "string", "content"]}, "focal_class": {"identifier": "AuthenticationController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AuthenticationController.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AuthenticationController.class)", "var_name": "logger"}, {"original_string": "static final String USERNAME = \"username\";", "modifier": "static final", "type": "String", "declarator": "USERNAME = \"username\"", "var_name": "USERNAME"}, {"original_string": "static final String PASSWORD = \"password\";", "modifier": "static final", "type": "String", "declarator": "PASSWORD = \"password\"", "var_name": "PASSWORD"}, {"original_string": "private final AuthenticationService authenticationService;", "modifier": "private final", "type": "AuthenticationService", "declarator": "authenticationService", "var_name": "authenticationService"}, {"original_string": "private final AuthorizationHeaderGenerator authorizationHeaderGenerator;", "modifier": "private final", "type": "AuthorizationHeaderGenerator", "declarator": "authorizationHeaderGenerator", "var_name": "authorizationHeaderGenerator"}], "methods": [{"identifier": "AuthenticationController", "parameters": "(\n      AuthenticationService authenticationService,\n      AuthorizationHeaderGenerator authorizationHeaderGenerator)", "modifiers": "@Autowired", "return": "", "signature": " AuthenticationController(\n      AuthenticationService authenticationService,\n      AuthorizationHeaderGenerator authorizationHeaderGenerator)", "full_signature": "@Autowired  AuthenticationController(\n      AuthenticationService authenticationService,\n      AuthorizationHeaderGenerator authorizationHeaderGenerator)", "class_method_signature": "AuthenticationController.AuthenticationController(\n      AuthenticationService authenticationService,\n      AuthorizationHeaderGenerator authorizationHeaderGenerator)", "testcase": false, "constructor": true}, {"identifier": "login", "parameters": "(\n      @RequestParam(USERNAME) String username,\n      @RequestParam(PASSWORD) String password)", "modifiers": "@RequestMapping(value = \"/login\", method = POST, produces = TEXT_PLAIN_VALUE) public", "return": "ResponseEntity<String>", "signature": "ResponseEntity<String> login(\n      @RequestParam(USERNAME) String username,\n      @RequestParam(PASSWORD) String password)", "full_signature": "@RequestMapping(value = \"/login\", method = POST, produces = TEXT_PLAIN_VALUE) public ResponseEntity<String> login(\n      @RequestParam(USERNAME) String username,\n      @RequestParam(PASSWORD) String password)", "class_method_signature": "AuthenticationController.login(\n      @RequestParam(USERNAME) String username,\n      @RequestParam(PASSWORD) String password)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(@RequestBody Token token)", "modifiers": "@RequestMapping(value = \"/validate\", method = POST, consumes = APPLICATION_JSON_UTF8_VALUE, produces = TEXT_PLAIN_VALUE) @ResponseBody public", "return": "String", "signature": "String validate(@RequestBody Token token)", "full_signature": "@RequestMapping(value = \"/validate\", method = POST, consumes = APPLICATION_JSON_UTF8_VALUE, produces = TEXT_PLAIN_VALUE) @ResponseBody public String validate(@RequestBody Token token)", "class_method_signature": "AuthenticationController.validate(@RequestBody Token token)", "testcase": false, "constructor": false}], "file": "doorman/src/main/java/io/servicecomb/company/auth/endpoint/rest/AuthenticationController.java"}, "focal_method": {"identifier": "validate", "parameters": "(@RequestBody Token token)", "modifiers": "@RequestMapping(value = \"/validate\", method = POST, consumes = APPLICATION_JSON_UTF8_VALUE, produces = TEXT_PLAIN_VALUE) @ResponseBody public", "return": "String", "body": "@RequestMapping(value = \"/validate\", method = POST, consumes = APPLICATION_JSON_UTF8_VALUE, produces = TEXT_PLAIN_VALUE)\n  @ResponseBody\n  public String validate(@RequestBody Token token) {\n    logger.info(\"Received validation request of token {}\", token);\n    return authenticationService.validate(token.getToken());\n  }", "signature": "String validate(@RequestBody Token token)", "full_signature": "@RequestMapping(value = \"/validate\", method = POST, consumes = APPLICATION_JSON_UTF8_VALUE, produces = TEXT_PLAIN_VALUE) @ResponseBody public String validate(@RequestBody Token token)", "class_method_signature": "AuthenticationController.validate(@RequestBody Token token)", "testcase": false, "constructor": false, "invocations": ["info", "validate", "getToken"]}, "repository": {"repo_id": 93611636, "url": "https://github.com/huaweicse/ServiceComb-Company-WorkShop", "language": "Java", "is_fork": false, "fork_count": 49, "stargazer_count": 79, "size": 1350, "license": "licensed"}}