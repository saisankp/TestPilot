{"test_class": {"identifier": "JGitSourceReferencesProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "tycho-extras/tycho-sourceref-jgit/src/test/java/org/eclipse/tycho/extras/sourceref/jgit/JGitSourceReferencesProviderTest.java"}, "test_case": {"identifier": "testGetSourceReferencesHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSourceReferencesHeader() throws MojoExecutionException {\n        JGitSourceReferencesProvider provider = new JGitSourceReferencesProvider();\n        MavenProject mockProject = new MavenProject();\n        ScmUrl scmUrl = new ScmUrl(properties(\"scm:git:foo\"));\n        mockProject.setFile(new File(\"src/test/resources/pom.xml\").getAbsoluteFile());\n        String sourceRef = provider.getSourceReferencesHeader(mockProject, scmUrl);\n        assertTrue(sourceRef.startsWith(\"scm:git:foo;path=\\\"tycho-sourceref-jgit/src/test/resources\\\"\"));\n    }", "signature": "void testGetSourceReferencesHeader()", "full_signature": "@Test public void testGetSourceReferencesHeader()", "class_method_signature": "JGitSourceReferencesProviderTest.testGetSourceReferencesHeader()", "testcase": true, "constructor": false, "invocations": ["properties", "setFile", "getAbsoluteFile", "getSourceReferencesHeader", "assertTrue", "startsWith"]}, "focal_class": {"identifier": "JGitSourceReferencesProvider", "superclass": "", "interfaces": "implements SourceReferencesProvider", "fields": [], "methods": [{"identifier": "getSourceReferencesHeader", "parameters": "(MavenProject project, ScmUrl scmUrl)", "modifiers": "@Override public", "return": "String", "signature": "String getSourceReferencesHeader(MavenProject project, ScmUrl scmUrl)", "full_signature": "@Override public String getSourceReferencesHeader(MavenProject project, ScmUrl scmUrl)", "class_method_signature": "JGitSourceReferencesProvider.getSourceReferencesHeader(MavenProject project, ScmUrl scmUrl)", "testcase": false, "constructor": false}, {"identifier": "resolveHead", "parameters": "(Repository repo)", "modifiers": "private", "return": "ObjectId", "signature": "ObjectId resolveHead(Repository repo)", "full_signature": "private ObjectId resolveHead(Repository repo)", "class_method_signature": "JGitSourceReferencesProvider.resolveHead(Repository repo)", "testcase": false, "constructor": false}, {"identifier": "findTagForHead", "parameters": "(Git git, ObjectId head)", "modifiers": "private", "return": "String", "signature": "String findTagForHead(Git git, ObjectId head)", "full_signature": "private String findTagForHead(Git git, ObjectId head)", "class_method_signature": "JGitSourceReferencesProvider.findTagForHead(Git git, ObjectId head)", "testcase": false, "constructor": false}, {"identifier": "getRelativePath", "parameters": "(File subDir, File parentDir)", "modifiers": "", "return": "String", "signature": "String getRelativePath(File subDir, File parentDir)", "full_signature": " String getRelativePath(File subDir, File parentDir)", "class_method_signature": "JGitSourceReferencesProvider.getRelativePath(File subDir, File parentDir)", "testcase": false, "constructor": false}], "file": "tycho-extras/tycho-sourceref-jgit/src/main/java/org/eclipse/tycho/extras/sourceref/jgit/JGitSourceReferencesProvider.java"}, "focal_method": {"identifier": "getSourceReferencesHeader", "parameters": "(MavenProject project, ScmUrl scmUrl)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getSourceReferencesHeader(MavenProject project, ScmUrl scmUrl) throws MojoExecutionException {\n        File basedir = project.getBasedir().getAbsoluteFile();\n        FileRepositoryBuilder builder = new FileRepositoryBuilder().readEnvironment().findGitDir(basedir)\n                .setMustExist(true);\n        Repository repo;\n        Git git;\n        try {\n            repo = builder.build();\n            git = Git.wrap(repo);\n        } catch (IOException e) {\n            throw new MojoExecutionException(\"IO exception trying to create git repo \", e);\n        }\n        ObjectId head = resolveHead(repo);\n\n        StringBuilder result = new StringBuilder(scmUrl.getUrl());\n        result.append(\";path=\\\"\");\n        result.append(getRelativePath(basedir, repo.getWorkTree()));\n        result.append(\"\\\"\");\n\n        String tag = findTagForHead(git, head);\n        if (tag != null) {\n            // may contain e.g. spaces, so we quote it\n            result.append(\";tag=\\\"\");\n            result.append(tag);\n            result.append(\"\\\"\");\n        }\n        result.append(\";commitId=\");\n        result.append(head.getName());\n        return result.toString();\n    }", "signature": "String getSourceReferencesHeader(MavenProject project, ScmUrl scmUrl)", "full_signature": "@Override public String getSourceReferencesHeader(MavenProject project, ScmUrl scmUrl)", "class_method_signature": "JGitSourceReferencesProvider.getSourceReferencesHeader(MavenProject project, ScmUrl scmUrl)", "testcase": false, "constructor": false, "invocations": ["getAbsoluteFile", "getBasedir", "setMustExist", "findGitDir", "readEnvironment", "build", "wrap", "resolveHead", "getUrl", "append", "append", "getRelativePath", "getWorkTree", "append", "findTagForHead", "append", "append", "append", "append", "append", "getName", "toString"]}, "repository": {"repo_id": 3604591, "url": "https://github.com/eclipse/tycho.extras", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 9, "size": 1014, "license": "licensed"}}