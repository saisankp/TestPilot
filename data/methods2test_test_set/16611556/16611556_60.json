{"test_class": {"identifier": "InvalidateSingleCacheAdviceTest", "superclass": "extends AbstractCacheTest<InvalidateSingleCacheAdvice>", "interfaces": "", "fields": [{"original_string": "private static final String NS = \"SOME_NS\";", "modifier": "private static final", "type": "String", "declarator": "NS = \"SOME_NS\"", "var_name": "NS"}, {"original_string": "private Object expectedValue;", "modifier": "private", "type": "Object", "declarator": "expectedValue", "var_name": "expectedValue"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/aop/InvalidateSingleCacheAdviceTest.java"}, "test_case": {"identifier": "invalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invalid() throws Throwable {\n        Assume.assumeThat(isValid, CoreMatchers.is(false));\n\n        when(pjp.proceed()).thenReturn(expectedValue);\n\n        assertEquals(expectedValue, advice.cacheInvalidateSingle(pjp));\n\n        verify(pjp).proceed();\n        verify(cache, never()).delete(anyString());\n    }", "signature": "void invalid()", "full_signature": "@Test public void invalid()", "class_method_signature": "InvalidateSingleCacheAdviceTest.invalid()", "testcase": true, "constructor": false, "invocations": ["assumeThat", "is", "thenReturn", "when", "proceed", "assertEquals", "cacheInvalidateSingle", "proceed", "verify", "delete", "verify", "never", "anyString"]}, "focal_class": {"identifier": "InvalidateSingleCacheAdvice", "superclass": "extends CacheAdvice", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(InvalidateSingleCacheAdvice.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(InvalidateSingleCacheAdvice.class)", "var_name": "LOG"}], "methods": [{"identifier": "invalidateSingle", "parameters": "()", "modifiers": "@Pointcut(\"@annotation(com.google.code.ssm.api.InvalidateSingleCache)\") public", "return": "void", "signature": "void invalidateSingle()", "full_signature": "@Pointcut(\"@annotation(com.google.code.ssm.api.InvalidateSingleCache)\") public void invalidateSingle()", "class_method_signature": "InvalidateSingleCacheAdvice.invalidateSingle()", "testcase": false, "constructor": false}, {"identifier": "cacheInvalidateSingle", "parameters": "(final ProceedingJoinPoint pjp)", "modifiers": "@Around(\"invalidateSingle()\") public", "return": "Object", "signature": "Object cacheInvalidateSingle(final ProceedingJoinPoint pjp)", "full_signature": "@Around(\"invalidateSingle()\") public Object cacheInvalidateSingle(final ProceedingJoinPoint pjp)", "class_method_signature": "InvalidateSingleCacheAdvice.cacheInvalidateSingle(final ProceedingJoinPoint pjp)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "@Override protected", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "@Override protected Logger getLogger()", "class_method_signature": "InvalidateSingleCacheAdvice.getLogger()", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/aop/InvalidateSingleCacheAdvice.java"}, "focal_method": {"identifier": "cacheInvalidateSingle", "parameters": "(final ProceedingJoinPoint pjp)", "modifiers": "@Around(\"invalidateSingle()\") public", "return": "Object", "body": "@Around(\"invalidateSingle()\")\n    public Object cacheInvalidateSingle(final ProceedingJoinPoint pjp) throws Throwable {\n        if (isDisabled()) {\n            getLogger().info(\"Cache disabled\");\n            return pjp.proceed();\n        }\n\n        // This is injected caching. If anything goes wrong in the caching, LOG\n        // the crap outta it, but do not let it surface up past the AOP injection itself.\n        String cacheKey = null;\n        final AnnotationData data;\n        final Method methodToCache;\n        try {\n            methodToCache = getCacheBase().getMethodToCache(pjp, InvalidateSingleCache.class);\n            final InvalidateSingleCache annotation = methodToCache.getAnnotation(InvalidateSingleCache.class);\n            data = AnnotationDataBuilder.buildAnnotationData(annotation, InvalidateSingleCache.class, methodToCache);\n            if (!data.isReturnKeyIndex()) {\n                cacheKey = getCacheBase().getCacheKeyBuilder().getCacheKey(data, pjp.getArgs(), methodToCache.toString());\n            }\n        } catch (Exception ex) {\n            warn(ex, \"Caching on method %s and key [%s] aborted due to an error.\", pjp.toShortString(), cacheKey);\n            return pjp.proceed();\n        }\n\n        final Object result = pjp.proceed();\n\n        // This is injected caching. If anything goes wrong in the caching, LOG\n        // the crap outta it, but do not let it surface up past the AOP injection itself.\n        try {\n            if (data.isReturnKeyIndex()) {\n                getCacheBase().verifyReturnTypeIsNoVoid(methodToCache, InvalidateSingleCache.class);\n                cacheKey = getCacheBase().getCacheKeyBuilder().getCacheKey(result, data.getNamespace());\n            }\n\n            getCacheBase().getCache(data).delete(cacheKey);\n        } catch (Exception ex) {\n            warn(ex, \"Caching on method %s and key [%s] aborted due to an error.\", pjp.toShortString(), cacheKey);\n        }\n        return result;\n    }", "signature": "Object cacheInvalidateSingle(final ProceedingJoinPoint pjp)", "full_signature": "@Around(\"invalidateSingle()\") public Object cacheInvalidateSingle(final ProceedingJoinPoint pjp)", "class_method_signature": "InvalidateSingleCacheAdvice.cacheInvalidateSingle(final ProceedingJoinPoint pjp)", "testcase": false, "constructor": false, "invocations": ["isDisabled", "info", "getLogger", "proceed", "getMethodToCache", "getCacheBase", "getAnnotation", "buildAnnotationData", "isReturnKeyIndex", "getCacheKey", "getCacheKeyBuilder", "getCacheBase", "getArgs", "toString", "warn", "toShortString", "proceed", "proceed", "isReturnKeyIndex", "verifyReturnTypeIsNoVoid", "getCacheBase", "getCacheKey", "getCacheKeyBuilder", "getCacheBase", "getNamespace", "delete", "getCache", "getCacheBase", "warn", "toShortString"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}