{"test_class": {"identifier": "AssignTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "hbase0.98/hbase-manager-0.98/src/test/java/com/kakao/hbase/manager/command/AssignTest.java"}, "test_case": {"identifier": "testExportImportWithBalancerOffOption", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExportImportWithBalancerOffOption() throws Exception {\n        String expFileName = \"export_test.exp\";\n        boolean balancerRunning = false;\n\n        // invalid export\n        try {\n            balancerRunning = false;\n            String[] argsParam = {\"zookeeper\", \"export\", expFileName};\n            Args args = new ManagerArgs(argsParam);\n            Assign command = new Assign(admin, args);\n\n            balancerRunning = admin.setBalancerRunning(true, true);\n            command.run();\n            fail();\n        } catch (IllegalStateException e) {\n            if (!e.getMessage().contains(AssignAction.MESSAGE_TURN_BALANCER_OFF))\n                throw e;\n        } finally {\n            if (balancerRunning)\n                admin.setBalancerRunning(true, true);\n        }\n\n        // valid export\n        try {\n            balancerRunning = false;\n            String[] argsParam = {\"zookeeper\", \"export\", expFileName, \"--\" + Args.OPTION_TURN_BALANCER_OFF,\n                \"--skip-export\", \"--force-proceed\"};\n            Args args = new ManagerArgs(argsParam);\n            Assign command = new Assign(admin, args);\n\n            balancerRunning = admin.setBalancerRunning(true, true);\n            command.run();\n        } finally {\n            if (balancerRunning)\n                admin.setBalancerRunning(true, true);\n        }\n\n        // invalid import\n        try {\n            balancerRunning = false;\n            String[] argsParam = {\"zookeeper\", \"import\", expFileName};\n            Args args = new ManagerArgs(argsParam);\n            Assign command = new Assign(admin, args);\n\n            balancerRunning = admin.setBalancerRunning(true, true);\n            command.run();\n            fail();\n        } catch (IllegalStateException e) {\n            if (!e.getMessage().contains(AssignAction.MESSAGE_TURN_BALANCER_OFF))\n                throw e;\n        } finally {\n            if (balancerRunning)\n                admin.setBalancerRunning(true, true);\n        }\n\n        // valid import\n        try {\n            balancerRunning = false;\n            String[] argsParam = {\"zookeeper\", \"import\", expFileName, \"--\" + Args.OPTION_TURN_BALANCER_OFF,\n                \"--skip-export\", \"--force-proceed\"};\n            Args args = new ManagerArgs(argsParam);\n            Assign command = new Assign(admin, args);\n\n            balancerRunning = admin.setBalancerRunning(true, true);\n            command.run();\n        } finally {\n            if (balancerRunning)\n                admin.setBalancerRunning(true, true);\n        }\n    }", "signature": "void testExportImportWithBalancerOffOption()", "full_signature": "@Test public void testExportImportWithBalancerOffOption()", "class_method_signature": "AssignTest.testExportImportWithBalancerOffOption()", "testcase": true, "constructor": false, "invocations": ["setBalancerRunning", "run", "fail", "contains", "getMessage", "setBalancerRunning", "setBalancerRunning", "run", "setBalancerRunning", "setBalancerRunning", "run", "fail", "contains", "getMessage", "setBalancerRunning", "setBalancerRunning", "run", "setBalancerRunning"]}, "focal_class": {"identifier": "Assign", "superclass": "", "interfaces": "implements Command", "fields": [{"original_string": "private final HBaseAdmin admin;", "modifier": "private final", "type": "HBaseAdmin", "declarator": "admin", "var_name": "admin"}, {"original_string": "private final Args args;", "modifier": "private final", "type": "Args", "declarator": "args", "var_name": "args"}], "methods": [{"identifier": "Assign", "parameters": "(HBaseAdmin admin, Args args)", "modifiers": "public", "return": "", "signature": " Assign(HBaseAdmin admin, Args args)", "full_signature": "public  Assign(HBaseAdmin admin, Args args)", "class_method_signature": "Assign.Assign(HBaseAdmin admin, Args args)", "testcase": false, "constructor": true}, {"identifier": "usage", "parameters": "()", "modifiers": "@SuppressWarnings(\"unused\") public static", "return": "String", "signature": "String usage()", "full_signature": "@SuppressWarnings(\"unused\") public static String usage()", "class_method_signature": "Assign.usage()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "Assign.run()", "testcase": false, "constructor": false}], "file": "hbase0.98/hbase-manager-0.98/src/main/java/com/kakao/hbase/manager/command/Assign.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() throws Exception {\n        String actionStr = ((String) args.getOptionSet().nonOptionArguments().get(1)).toUpperCase();\n        AssignAction assignAction = AssignAction.valueOf(actionStr);\n        assignAction.run(admin, args);\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "Assign.run()", "testcase": false, "constructor": false, "invocations": ["toUpperCase", "get", "nonOptionArguments", "getOptionSet", "valueOf", "run"]}, "repository": {"repo_id": 46396068, "url": "https://github.com/kakao/hbase-tools", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 49, "size": 1758, "license": "licensed"}}