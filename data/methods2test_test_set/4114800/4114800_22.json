{"test_class": {"identifier": "TestGeneralJSONRDF", "superclass": "extends TwitterUtilsTest", "interfaces": "", "fields": [], "file": "web/twitter/src/test/java/org/openimaj/twitter/TestGeneralJSONRDF.java"}, "test_case": {"identifier": "testFromUSMF", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFromUSMF() throws Exception {\n\t\tFile twitterfile = fileFromeStream(USMFStatus.class.getResourceAsStream(\"/org/openimaj/twitter/newtweets.json\"));\n\t\tFileTwitterStatusList<USMFStatus> status = FileTwitterStatusList.readUSMF(twitterfile, \"UTF-8\", GeneralJSONTwitter.class);\n\t\tUSMFStatus aStatus = null;\n\t\tfor (USMFStatus usmfStatus : status) {\n\t\t\tif (usmfStatus.to_users.size() > 0) {\n\t\t\t\taStatus = usmfStatus;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tGeneralJSONRDF rgj = new GeneralJSONRDF();\n\t\trgj.fromUSMF(aStatus);\n//\t\tUSMFStatus n = new USMFStatus();\n//\t\trgj.fillUSMF(n);\n//\t\tassertTrue(n.equals(aStatus));\n\t}", "signature": "void testFromUSMF()", "full_signature": "@Test public void testFromUSMF()", "class_method_signature": "TestGeneralJSONRDF.testFromUSMF()", "testcase": true, "constructor": false, "invocations": ["fileFromeStream", "getResourceAsStream", "readUSMF", "size", "fromUSMF"]}, "focal_class": {"identifier": "GeneralJSONRDF", "superclass": "extends GeneralJSON", "interfaces": "", "fields": [{"original_string": "private static final String INSERT_ITEM_QUERY_FILE = \"/org/openimaj/twitter/rdf/insert_usmf_query.sparql\";", "modifier": "private static final", "type": "String", "declarator": "INSERT_ITEM_QUERY_FILE = \"/org/openimaj/twitter/rdf/insert_usmf_query.sparql\"", "var_name": "INSERT_ITEM_QUERY_FILE"}, {"original_string": "private static final String DELETE_TM_NULL = \"/org/openimaj/twitter/rdf/delete_null.sparql\";", "modifier": "private static final", "type": "String", "declarator": "DELETE_TM_NULL = \"/org/openimaj/twitter/rdf/delete_null.sparql\"", "var_name": "DELETE_TM_NULL"}, {"original_string": "private static final String LINK_INSERT_QUERY_FILE = \"/org/openimaj/twitter/rdf/insert_usmf_links_query.sparql\";", "modifier": "private static final", "type": "String", "declarator": "LINK_INSERT_QUERY_FILE = \"/org/openimaj/twitter/rdf/insert_usmf_links_query.sparql\"", "var_name": "LINK_INSERT_QUERY_FILE"}, {"original_string": "private static final String KEYWORDS_INSERT_QUERY_FILE = \"/org/openimaj/twitter/rdf/insert_usmf_keywords_query.sparql\";", "modifier": "private static final", "type": "String", "declarator": "KEYWORDS_INSERT_QUERY_FILE = \"/org/openimaj/twitter/rdf/insert_usmf_keywords_query.sparql\"", "var_name": "KEYWORDS_INSERT_QUERY_FILE"}, {"original_string": "private static final String TOUSERS_INSERT_QUERY_FILE = \"/org/openimaj/twitter/rdf/insert_usmf_touser_query.sparql\";", "modifier": "private static final", "type": "String", "declarator": "TOUSERS_INSERT_QUERY_FILE = \"/org/openimaj/twitter/rdf/insert_usmf_touser_query.sparql\"", "var_name": "TOUSERS_INSERT_QUERY_FILE"}, {"original_string": "private static Map<String, String> queryCache;", "modifier": "private static", "type": "Map<String, String>", "declarator": "queryCache", "var_name": "queryCache"}, {"original_string": "private Model m;", "modifier": "private", "type": "Model", "declarator": "m", "var_name": "m"}, {"original_string": "private Resource eventIRI;", "modifier": "private", "type": "Resource", "declarator": "eventIRI", "var_name": "eventIRI"}, {"original_string": "private static String baseModelString;", "modifier": "private static", "type": "String", "declarator": "baseModelString", "var_name": "baseModelString"}, {"original_string": "private static final Map<String, RDFAnalysisProvider> providers = new HashMap<String, RDFAnalysisProvider>();", "modifier": "private static final", "type": "Map<String, RDFAnalysisProvider>", "declarator": "providers = new HashMap<String, RDFAnalysisProvider>()", "var_name": "providers"}], "methods": [{"identifier": "registerRDFAnalysisProvider", "parameters": "(String analysis, RDFAnalysisProvider analysisProvider)", "modifiers": "public static", "return": "void", "signature": "void registerRDFAnalysisProvider(String analysis, RDFAnalysisProvider analysisProvider)", "full_signature": "public static void registerRDFAnalysisProvider(String analysis, RDFAnalysisProvider analysisProvider)", "class_method_signature": "GeneralJSONRDF.registerRDFAnalysisProvider(String analysis, RDFAnalysisProvider analysisProvider)", "testcase": false, "constructor": false}, {"identifier": "readASCII", "parameters": "(final Scanner in)", "modifiers": "@Override public", "return": "void", "signature": "void readASCII(final Scanner in)", "full_signature": "@Override public void readASCII(final Scanner in)", "class_method_signature": "GeneralJSONRDF.readASCII(final Scanner in)", "testcase": false, "constructor": false}, {"identifier": "fillUSMF", "parameters": "(USMFStatus status)", "modifiers": "@Override public", "return": "void", "signature": "void fillUSMF(USMFStatus status)", "full_signature": "@Override public void fillUSMF(USMFStatus status)", "class_method_signature": "GeneralJSONRDF.fillUSMF(USMFStatus status)", "testcase": false, "constructor": false}, {"identifier": "queryCache", "parameters": "(String queryFile)", "modifiers": "private static", "return": "String", "signature": "String queryCache(String queryFile)", "full_signature": "private static String queryCache(String queryFile)", "class_method_signature": "GeneralJSONRDF.queryCache(String queryFile)", "testcase": false, "constructor": false}, {"identifier": "readQuery", "parameters": "(String qf)", "modifiers": "private static", "return": "String", "signature": "String readQuery(String qf)", "full_signature": "private static String readQuery(String qf)", "class_method_signature": "GeneralJSONRDF.readQuery(String qf)", "testcase": false, "constructor": false}, {"identifier": "fromUSMF", "parameters": "(USMFStatus status)", "modifiers": "@Override public", "return": "void", "signature": "void fromUSMF(USMFStatus status)", "full_signature": "@Override public void fromUSMF(USMFStatus status)", "class_method_signature": "GeneralJSONRDF.fromUSMF(USMFStatus status)", "testcase": false, "constructor": false}, {"identifier": "cleanupModel", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cleanupModel()", "full_signature": "private void cleanupModel()", "class_method_signature": "GeneralJSONRDF.cleanupModel()", "testcase": false, "constructor": false}, {"identifier": "addUserParameters", "parameters": "(ParameterizedSparqlString pss, User user, USMFStatus status)", "modifiers": "private", "return": "void", "signature": "void addUserParameters(ParameterizedSparqlString pss, User user, USMFStatus status)", "full_signature": "private void addUserParameters(ParameterizedSparqlString pss, User user, USMFStatus status)", "class_method_signature": "GeneralJSONRDF.addUserParameters(ParameterizedSparqlString pss, User user, USMFStatus status)", "testcase": false, "constructor": false}, {"identifier": "writeASCIIAnalysis", "parameters": "(PrintWriter outputWriter, List<String> selectiveAnalysis, List<String> selectiveStatus)", "modifiers": "@Override public", "return": "void", "signature": "void writeASCIIAnalysis(PrintWriter outputWriter, List<String> selectiveAnalysis, List<String> selectiveStatus)", "full_signature": "@Override public void writeASCIIAnalysis(PrintWriter outputWriter, List<String> selectiveAnalysis, List<String> selectiveStatus)", "class_method_signature": "GeneralJSONRDF.writeASCIIAnalysis(PrintWriter outputWriter, List<String> selectiveAnalysis, List<String> selectiveStatus)", "testcase": false, "constructor": false}, {"identifier": "createUserIRI", "parameters": "(USMFStatus status, User user)", "modifiers": "private", "return": "String", "signature": "String createUserIRI(USMFStatus status, User user)", "full_signature": "private String createUserIRI(USMFStatus status, User user)", "class_method_signature": "GeneralJSONRDF.createUserIRI(USMFStatus status, User user)", "testcase": false, "constructor": false}, {"identifier": "createPersonIRI", "parameters": "(USMFStatus status, User user)", "modifiers": "private", "return": "String", "signature": "String createPersonIRI(USMFStatus status, User user)", "full_signature": "private String createPersonIRI(USMFStatus status, User user)", "class_method_signature": "GeneralJSONRDF.createPersonIRI(USMFStatus status, User user)", "testcase": false, "constructor": false}, {"identifier": "generateSocialEventIRI", "parameters": "(USMFStatus status)", "modifiers": "private", "return": "String", "signature": "String generateSocialEventIRI(USMFStatus status)", "full_signature": "private String generateSocialEventIRI(USMFStatus status)", "class_method_signature": "GeneralJSONRDF.generateSocialEventIRI(USMFStatus status)", "testcase": false, "constructor": false}, {"identifier": "prepareModel", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void prepareModel()", "full_signature": "private synchronized void prepareModel()", "class_method_signature": "GeneralJSONRDF.prepareModel()", "testcase": false, "constructor": false}, {"identifier": "instanceFromString", "parameters": "(String line)", "modifiers": "@Override public", "return": "GeneralJSON", "signature": "GeneralJSON instanceFromString(String line)", "full_signature": "@Override public GeneralJSON instanceFromString(String line)", "class_method_signature": "GeneralJSONRDF.instanceFromString(String line)", "testcase": false, "constructor": false}], "file": "web/twitter/src/main/java/org/openimaj/twitter/GeneralJSONRDF.java"}, "focal_method": {"identifier": "fromUSMF", "parameters": "(USMFStatus status)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void fromUSMF(USMFStatus status) {\n\t\tprepareModel();\n\t\t// m.add(\n\t\t// ResourceFactory.createResource(\"dc:wangSub\"),\n\t\t// ResourceFactory.createProperty(\"dc:wangPre\"),\n\t\t// \"wangObj\"\n\t\t// );\n\t\tParameterizedSparqlString pss = PQUtils.constructPQ(queryCache(INSERT_ITEM_QUERY_FILE), m);\n\t\tthis.eventIRI = m.createResource(generateSocialEventIRI(status));\n\t\tPQUtils.setPSSResource(pss, Variables.SOCIAL_EVENT.name, eventIRI);\n\t\tPQUtils.setPSSLiteral(pss, Variables.SERVICE.name, status.service);\n\t\taddUserParameters(pss, status.user, status);\n\t\tPQUtils.setPSSLiteral(pss, Variables.SOURCE_URL.name, status.source);\n\t\tPQUtils.setPSSLiteral(pss, Variables.TEXT.name, status.text);\n\t\tPQUtils.setPSSLiteral(pss, Variables.DESC.name, status.description);\n\t\tPQUtils.setPSSLiteral(pss, Variables.CAT.name, status.category);\n\t\tPQUtils.setPSSLiteral(pss, Variables.FAV.name, status.favorites);\n\t\tUpdateAction.execute(pss.asUpdate(), m);\n\t\tpss = PQUtils.constructPQ(readQuery(TOUSERS_INSERT_QUERY_FILE), m);\n\t\t// the inreply user\n\n\t\t// the mentioned users\n\t\tfor (final User key : status.to_users) {\n\t\t\tPQUtils.setPSSResource(pss, Variables.SOCIAL_EVENT.name, eventIRI);\n\t\t\taddUserParameters(pss, key, status);\n\t\t\tUpdateAction.execute(pss.asUpdate(), m);\n\t\t\tpss.clearParams();\n\t\t}\n\t\tpss = PQUtils.constructPQ(readQuery(LINK_INSERT_QUERY_FILE), m);\n\t\tPQUtils.setPSSResource(pss, Variables.SOCIAL_EVENT.name, eventIRI);\n\t\tfor (final Link link : status.links) {\n\t\t\tPQUtils.setPSSLiteral(pss, Variables.LINK.name, link.href);\n\t\t\tUpdateAction.execute(pss.asUpdate(), m);\n\t\t}\n\t\tpss = PQUtils.constructPQ(readQuery(KEYWORDS_INSERT_QUERY_FILE), m);\n\t\tPQUtils.setPSSResource(pss, Variables.SOCIAL_EVENT.name, eventIRI);\n\t\tfor (final String key : status.keywords) {\n\t\t\tPQUtils.setPSSLiteral(pss, Variables.KEYWORD.name, key);\n\t\t\tUpdateAction.execute(pss.asUpdate(), m);\n\t\t}\n\n\t\tcleanupModel();\n\t\tstatus.fillAnalysis(this);\n\t}", "signature": "void fromUSMF(USMFStatus status)", "full_signature": "@Override public void fromUSMF(USMFStatus status)", "class_method_signature": "GeneralJSONRDF.fromUSMF(USMFStatus status)", "testcase": false, "constructor": false, "invocations": ["prepareModel", "constructPQ", "queryCache", "createResource", "generateSocialEventIRI", "setPSSResource", "setPSSLiteral", "addUserParameters", "setPSSLiteral", "setPSSLiteral", "setPSSLiteral", "setPSSLiteral", "setPSSLiteral", "execute", "asUpdate", "constructPQ", "readQuery", "setPSSResource", "addUserParameters", "execute", "asUpdate", "clearParams", "constructPQ", "readQuery", "setPSSResource", "setPSSLiteral", "execute", "asUpdate", "constructPQ", "readQuery", "setPSSResource", "setPSSLiteral", "execute", "asUpdate", "cleanupModel", "fillAnalysis"]}, "repository": {"repo_id": 4114800, "url": "https://github.com/sinjax/trendminer-java", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 10, "size": 209307, "license": "licensed"}}