{"test_class": {"identifier": "SimpleReportTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/SimpleReportTest.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToString() {\n        assertNotNull(\"toString is still good\", new SimpleReport(\"\", null).toString());\n    }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "SimpleReportTest.testToString()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "toString"]}, "focal_class": {"identifier": "SimpleReport", "superclass": "", "interfaces": "implements CheckReport", "fields": [{"original_string": "private final String checkName;", "modifier": "private final", "type": "String", "declarator": "checkName", "var_name": "checkName"}, {"original_string": "private final List<Violation> violations;", "modifier": "private final", "type": "List<Violation>", "declarator": "violations", "var_name": "violations"}], "methods": [{"identifier": "SimpleReport", "parameters": "(final String checkName, final Collection<Violation> violations)", "modifiers": "public", "return": "", "signature": " SimpleReport(final String checkName, final Collection<Violation> violations)", "full_signature": "public  SimpleReport(final String checkName, final Collection<Violation> violations)", "class_method_signature": "SimpleReport.SimpleReport(final String checkName, final Collection<Violation> violations)", "testcase": false, "constructor": true}, {"identifier": "getCheckName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCheckName()", "full_signature": "@Override public String getCheckName()", "class_method_signature": "SimpleReport.getCheckName()", "testcase": false, "constructor": false}, {"identifier": "getViolations", "parameters": "()", "modifiers": "@Override public @NotNull", "return": "Collection<Violation>", "signature": "Collection<Violation> getViolations()", "full_signature": "@Override public @NotNull Collection<Violation> getViolations()", "class_method_signature": "SimpleReport.getViolations()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "SimpleReport.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SimpleReport.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SimpleReport.toString()", "testcase": false, "constructor": false}, {"identifier": "generateReport", "parameters": "(final @NotNull ProgressCheck reporter)", "modifiers": "public static", "return": "SimpleReport", "signature": "SimpleReport generateReport(final @NotNull ProgressCheck reporter)", "full_signature": "public static SimpleReport generateReport(final @NotNull ProgressCheck reporter)", "class_method_signature": "SimpleReport.generateReport(final @NotNull ProgressCheck reporter)", "testcase": false, "constructor": false}, {"identifier": "generateReport", "parameters": "(final @NotNull ErrorListener reporter)", "modifiers": "public static", "return": "SimpleReport", "signature": "SimpleReport generateReport(final @NotNull ErrorListener reporter)", "full_signature": "public static SimpleReport generateReport(final @NotNull ErrorListener reporter)", "class_method_signature": "SimpleReport.generateReport(final @NotNull ErrorListener reporter)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final @NotNull JsonObject jsonReport)", "modifiers": "public static", "return": "SimpleReport", "signature": "SimpleReport fromJson(final @NotNull JsonObject jsonReport)", "full_signature": "public static SimpleReport fromJson(final @NotNull JsonObject jsonReport)", "class_method_signature": "SimpleReport.fromJson(final @NotNull JsonObject jsonReport)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/SimpleReport.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toString() {\n        return \"SimpleReport{\" +\n                \"checkName='\" + checkName + '\\'' +\n                \", violations=\" + violations +\n                '}';\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SimpleReport.toString()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}