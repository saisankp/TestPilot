{"test_class": {"identifier": "PopulationUtilsTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/util/PopulationUtilsTest.java"}, "test_case": {"identifier": "testAppendPopulation2", "parameters": "()", "modifiers": "@Test // tests appending at the beginning of the population public", "return": "void", "body": "@Test\n    // tests appending at the beginning of the population\n    public void testAppendPopulation2(){\n        Population[] inputPopulations = new Population[]{new SimplePopulation(), new SimplePopulation(), new SimplePopulation() };\n        Population populationToAppend = new SimplePopulation();\n        Population[] results = PopulationUtils.appendPopulation(inputPopulations, populationToAppend, false);\n        assertEquals(4, results.length);\n        assertSame(populationToAppend, results[0]);\n        assertSame(inputPopulations[0], results[1]);\n        assertSame(inputPopulations[1], results[2]);\n        assertSame(inputPopulations[2], results[3]);\n    }", "signature": "void testAppendPopulation2()", "full_signature": "@Test // tests appending at the beginning of the population public void testAppendPopulation2()", "class_method_signature": "PopulationUtilsTest.testAppendPopulation2()", "testcase": true, "constructor": false, "invocations": ["appendPopulation", "assertEquals", "assertSame", "assertSame", "assertSame", "assertSame"]}, "focal_class": {"identifier": "PopulationUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "concatenate", "parameters": "(Population[] populations, PopulationFactory populationFactory)", "modifiers": "public static", "return": "Population", "signature": "Population concatenate(Population[] populations, PopulationFactory populationFactory)", "full_signature": "public static Population concatenate(Population[] populations, PopulationFactory populationFactory)", "class_method_signature": "PopulationUtils.concatenate(Population[] populations, PopulationFactory populationFactory)", "testcase": false, "constructor": false}, {"identifier": "concatenate", "parameters": "(Population[] populations, PopulationFactory populationFactory, int maxIndexExclusive)", "modifiers": "public static", "return": "Population", "signature": "Population concatenate(Population[] populations, PopulationFactory populationFactory, int maxIndexExclusive)", "full_signature": "public static Population concatenate(Population[] populations, PopulationFactory populationFactory, int maxIndexExclusive)", "class_method_signature": "PopulationUtils.concatenate(Population[] populations, PopulationFactory populationFactory, int maxIndexExclusive)", "testcase": false, "constructor": false}, {"identifier": "appendPopulation", "parameters": "(Population[] populations, Population populationToAppend, boolean appendAtTheEnd)", "modifiers": "public static", "return": "Population[]", "signature": "Population[] appendPopulation(Population[] populations, Population populationToAppend, boolean appendAtTheEnd)", "full_signature": "public static Population[] appendPopulation(Population[] populations, Population populationToAppend, boolean appendAtTheEnd)", "class_method_signature": "PopulationUtils.appendPopulation(Population[] populations, Population populationToAppend, boolean appendAtTheEnd)", "testcase": false, "constructor": false}, {"identifier": "sumSizes", "parameters": "(Population[] populations)", "modifiers": "public static", "return": "int", "signature": "int sumSizes(Population[] populations)", "full_signature": "public static int sumSizes(Population[] populations)", "class_method_signature": "PopulationUtils.sumSizes(Population[] populations)", "testcase": false, "constructor": false}, {"identifier": "sumSizes", "parameters": "(Population[] populations, int maxIndexExclusive)", "modifiers": "public static", "return": "int", "signature": "int sumSizes(Population[] populations, int maxIndexExclusive)", "full_signature": "public static int sumSizes(Population[] populations, int maxIndexExclusive)", "class_method_signature": "PopulationUtils.sumSizes(Population[] populations, int maxIndexExclusive)", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/util/PopulationUtils.java"}, "focal_method": {"identifier": "appendPopulation", "parameters": "(Population[] populations, Population populationToAppend, boolean appendAtTheEnd)", "modifiers": "public static", "return": "Population[]", "body": "public static Population[] appendPopulation(Population[] populations, Population populationToAppend, boolean appendAtTheEnd){\n        Population[] result = null;\n        if (populations != null){ // if there are populations to which to append\n            if (populationToAppend != null){\n                result = new Population[populations.length + 1];\n                int startIndex = 0;\n                if (appendAtTheEnd){\n                    startIndex = 0;\n                    result[result.length - 1] = populationToAppend;\n                } else {\n                    startIndex = 1;\n                    result[0] = populationToAppend;\n                }\n                for (Population population : populations){\n                    result[startIndex++] = population;\n                }\n            } else { // return original populations\n                result = populations;\n            }\n        } else if (populationToAppend != null) { // return new array just of given populationToAppend\n            result = new Population[]{populationToAppend};\n        }\n        return result;\n    }", "signature": "Population[] appendPopulation(Population[] populations, Population populationToAppend, boolean appendAtTheEnd)", "full_signature": "public static Population[] appendPopulation(Population[] populations, Population populationToAppend, boolean appendAtTheEnd)", "class_method_signature": "PopulationUtils.appendPopulation(Population[] populations, Population populationToAppend, boolean appendAtTheEnd)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}