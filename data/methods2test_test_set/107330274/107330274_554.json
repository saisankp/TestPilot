{"test_class": {"identifier": "ZookeeperMasterMonitorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final TitusRuntime titusRuntime = TitusRuntimes.internal();", "modifier": "private static final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.internal()", "var_name": "titusRuntime"}, {"original_string": "private static final MasterInstance DEFAULT_MASTER_INSTANCE = toCoreMasterInstance(com.netflix.titus.grpc.protogen.MasterInstance.getDefaultInstance());", "modifier": "private static final", "type": "MasterInstance", "declarator": "DEFAULT_MASTER_INSTANCE = toCoreMasterInstance(com.netflix.titus.grpc.protogen.MasterInstance.getDefaultInstance())", "var_name": "DEFAULT_MASTER_INSTANCE"}, {"original_string": "@ClassRule\n    public static CuratorServiceResource curatorServiceResource = new CuratorServiceResource(titusRuntime);", "modifier": "@ClassRule\n    public static", "type": "CuratorServiceResource", "declarator": "curatorServiceResource = new CuratorServiceResource(titusRuntime)", "var_name": "curatorServiceResource"}, {"original_string": "private static CuratorFramework curator;", "modifier": "private static", "type": "CuratorFramework", "declarator": "curator", "var_name": "curator"}, {"original_string": "private static ZookeeperPaths zkPaths;", "modifier": "private static", "type": "ZookeeperPaths", "declarator": "zkPaths", "var_name": "zkPaths"}, {"original_string": "private ZookeeperMasterMonitor masterMonitor;", "modifier": "private", "type": "ZookeeperMasterMonitor", "declarator": "masterMonitor", "var_name": "masterMonitor"}], "file": "titus-ext/zookeeper/src/test/java/com/netflix/titus/ext/zookeeper/supervisor/ZookeeperMasterMonitorTest.java"}, "test_case": {"identifier": "testMonitorWorksForMultipleLeaderUpdates", "parameters": "()", "modifiers": "@Test(timeout = 30_000) public", "return": "void", "body": "@Test(timeout = 30_000)\n    public void testMonitorWorksForMultipleLeaderUpdates() throws Exception {\n        // Note we intentionally didn't set the initial value of master description because we'd like to make sure\n        // that the monitor will work property even if it fails occasionally (in this case, it will fail to deserialize\n        // the master description in the very beginning\n        ExtTestSubscriber<MasterDescription> leaderSubscriber = new ExtTestSubscriber<>();\n        masterMonitor.getLeaderObservable().filter(Objects::nonNull).subscribe(leaderSubscriber);\n\n        for (int i = 0; i < 5; i++) {\n            curator.setData()\n                    .forPath(zkPaths.getLeaderAnnouncementPath(), ObjectMappers.defaultMapper().writeValueAsBytes(newMasterDescription(i)));\n\n            // Try a few times, as we can get update for the same entity more than once.\n            for (int j = 0; j < 3; j++) {\n                MasterDescription newLeader = leaderSubscriber.takeNext(5, TimeUnit.SECONDS);\n                if (newLeader != null && newLeader.getApiPort() == i) {\n                    return;\n                }\n            }\n            fail(\"Did not received TitusMaster update for iteration \" + i);\n        }\n    }", "signature": "void testMonitorWorksForMultipleLeaderUpdates()", "full_signature": "@Test(timeout = 30_000) public void testMonitorWorksForMultipleLeaderUpdates()", "class_method_signature": "ZookeeperMasterMonitorTest.testMonitorWorksForMultipleLeaderUpdates()", "testcase": true, "constructor": false, "invocations": ["subscribe", "filter", "getLeaderObservable", "forPath", "setData", "getLeaderAnnouncementPath", "writeValueAsBytes", "defaultMapper", "newMasterDescription", "takeNext", "getApiPort", "fail"]}, "focal_class": {"identifier": "ZookeeperMasterMonitor", "superclass": "", "interfaces": "implements MasterMonitor", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ZookeeperMasterMonitor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ZookeeperMasterMonitor.class)", "var_name": "logger"}, {"original_string": "@VisibleForTesting\n    static final MasterInstance UNKNOWN_MASTER_INSTANCE = MasterInstance.newBuilder()\n            .withInstanceId(\"unknownId\")\n            .withInstanceGroupId(\"unknownId\")\n            .withIpAddress(\"0.0.0.0\")\n            .withStatus(MasterStatus.newBuilder()\n                    .withState(MasterState.Starting)\n                    .withMessage(\"TitusMaster instance state not known yet\")\n                    .build()\n            )\n            .withServerPorts(Collections.emptyList())\n            .withLabels(Collections.emptyMap())\n            .build();", "modifier": "@VisibleForTesting\n    static final", "type": "MasterInstance", "declarator": "UNKNOWN_MASTER_INSTANCE = MasterInstance.newBuilder()\n            .withInstanceId(\"unknownId\")\n            .withInstanceGroupId(\"unknownId\")\n            .withIpAddress(\"0.0.0.0\")\n            .withStatus(MasterStatus.newBuilder()\n                    .withState(MasterState.Starting)\n                    .withMessage(\"TitusMaster instance state not known yet\")\n                    .build()\n            )\n            .withServerPorts(Collections.emptyList())\n            .withLabels(Collections.emptyMap())\n            .build()", "var_name": "UNKNOWN_MASTER_INSTANCE"}, {"original_string": "private static final long OWN_MASTER_REFRESH_INTERVAL_MS = 30_000;", "modifier": "private static final", "type": "long", "declarator": "OWN_MASTER_REFRESH_INTERVAL_MS = 30_000", "var_name": "OWN_MASTER_REFRESH_INTERVAL_MS"}, {"original_string": "private final CuratorFramework curator;", "modifier": "private final", "type": "CuratorFramework", "declarator": "curator", "var_name": "curator"}, {"original_string": "private final TitusRuntime titusRuntime;", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime", "var_name": "titusRuntime"}, {"original_string": "private final String leaderPath;", "modifier": "private final", "type": "String", "declarator": "leaderPath", "var_name": "leaderPath"}, {"original_string": "private final SerializedSubject<MasterDescription, MasterDescription> leaderSubject;", "modifier": "private final", "type": "SerializedSubject<MasterDescription, MasterDescription>", "declarator": "leaderSubject", "var_name": "leaderSubject"}, {"original_string": "private final AtomicReference<MasterDescription> latestLeader = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<MasterDescription>", "declarator": "latestLeader = new AtomicReference<>()", "var_name": "latestLeader"}, {"original_string": "private final NodeCache leaderMonitor;", "modifier": "private final", "type": "NodeCache", "declarator": "leaderMonitor", "var_name": "leaderMonitor"}, {"original_string": "private final String allMastersPath;", "modifier": "private final", "type": "String", "declarator": "allMastersPath", "var_name": "allMastersPath"}, {"original_string": "private final TreeCache masterMonitor;", "modifier": "private final", "type": "TreeCache", "declarator": "masterMonitor", "var_name": "masterMonitor"}, {"original_string": "private volatile List<MasterInstance> knownMasterInstances = Collections.emptyList();", "modifier": "private volatile", "type": "List<MasterInstance>", "declarator": "knownMasterInstances = Collections.emptyList()", "var_name": "knownMasterInstances"}, {"original_string": "private final Subject<List<MasterInstance>, List<MasterInstance>> masterUpdates = new SerializedSubject<>(\n            BehaviorSubject.create(Collections.emptyList())\n    );", "modifier": "private final", "type": "Subject<List<MasterInstance>, List<MasterInstance>>", "declarator": "masterUpdates = new SerializedSubject<>(\n            BehaviorSubject.create(Collections.emptyList())\n    )", "var_name": "masterUpdates"}, {"original_string": "private final Observable<List<MasterInstance>> masterUpdatesObserver = ObservableExt.protectFromMissingExceptionHandlers(\n            masterUpdates.asObservable(),\n            logger\n    );", "modifier": "private final", "type": "Observable<List<MasterInstance>>", "declarator": "masterUpdatesObserver = ObservableExt.protectFromMissingExceptionHandlers(\n            masterUpdates.asObservable(),\n            logger\n    )", "var_name": "masterUpdatesObserver"}, {"original_string": "private volatile MasterInstance ownMasterInstance = UNKNOWN_MASTER_INSTANCE;", "modifier": "private volatile", "type": "MasterInstance", "declarator": "ownMasterInstance = UNKNOWN_MASTER_INSTANCE", "var_name": "ownMasterInstance"}, {"original_string": "private final Subscription refreshOwnMasterInstanceSubscriber;", "modifier": "private final", "type": "Subscription", "declarator": "refreshOwnMasterInstanceSubscriber", "var_name": "refreshOwnMasterInstanceSubscriber"}], "methods": [{"identifier": "ZookeeperMasterMonitor", "parameters": "(ZookeeperPaths zkPaths, CuratorService curatorService, TitusRuntime titusRuntime)", "modifiers": "@Inject public", "return": "", "signature": " ZookeeperMasterMonitor(ZookeeperPaths zkPaths, CuratorService curatorService, TitusRuntime titusRuntime)", "full_signature": "@Inject public  ZookeeperMasterMonitor(ZookeeperPaths zkPaths, CuratorService curatorService, TitusRuntime titusRuntime)", "class_method_signature": "ZookeeperMasterMonitor.ZookeeperMasterMonitor(ZookeeperPaths zkPaths, CuratorService curatorService, TitusRuntime titusRuntime)", "testcase": false, "constructor": true}, {"identifier": "ZookeeperMasterMonitor", "parameters": "(ZookeeperPaths zkPaths,\n                                  CuratorFramework curator,\n                                  MasterDescription initValue,\n                                  TitusRuntime titusRuntime,\n                                  Scheduler scheduler)", "modifiers": "public", "return": "", "signature": " ZookeeperMasterMonitor(ZookeeperPaths zkPaths,\n                                  CuratorFramework curator,\n                                  MasterDescription initValue,\n                                  TitusRuntime titusRuntime,\n                                  Scheduler scheduler)", "full_signature": "public  ZookeeperMasterMonitor(ZookeeperPaths zkPaths,\n                                  CuratorFramework curator,\n                                  MasterDescription initValue,\n                                  TitusRuntime titusRuntime,\n                                  Scheduler scheduler)", "class_method_signature": "ZookeeperMasterMonitor.ZookeeperMasterMonitor(ZookeeperPaths zkPaths,\n                                  CuratorFramework curator,\n                                  MasterDescription initValue,\n                                  TitusRuntime titusRuntime,\n                                  Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void start()", "full_signature": "@PostConstruct public void start()", "class_method_signature": "ZookeeperMasterMonitor.start()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@PreDestroy public", "return": "void", "signature": "void shutdown()", "full_signature": "@PreDestroy public void shutdown()", "class_method_signature": "ZookeeperMasterMonitor.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getLeaderObservable", "parameters": "()", "modifiers": "@Override public", "return": "Observable<MasterDescription>", "signature": "Observable<MasterDescription> getLeaderObservable()", "full_signature": "@Override public Observable<MasterDescription> getLeaderObservable()", "class_method_signature": "ZookeeperMasterMonitor.getLeaderObservable()", "testcase": false, "constructor": false}, {"identifier": "getLatestLeader", "parameters": "()", "modifiers": "@Override public", "return": "MasterDescription", "signature": "MasterDescription getLatestLeader()", "full_signature": "@Override public MasterDescription getLatestLeader()", "class_method_signature": "ZookeeperMasterMonitor.getLatestLeader()", "testcase": false, "constructor": false}, {"identifier": "getCurrentMasterInstance", "parameters": "()", "modifiers": "@Override public", "return": "MasterInstance", "signature": "MasterInstance getCurrentMasterInstance()", "full_signature": "@Override public MasterInstance getCurrentMasterInstance()", "class_method_signature": "ZookeeperMasterMonitor.getCurrentMasterInstance()", "testcase": false, "constructor": false}, {"identifier": "updateOwnMasterInstance", "parameters": "(MasterInstance self)", "modifiers": "@Override public", "return": "Completable", "signature": "Completable updateOwnMasterInstance(MasterInstance self)", "full_signature": "@Override public Completable updateOwnMasterInstance(MasterInstance self)", "class_method_signature": "ZookeeperMasterMonitor.updateOwnMasterInstance(MasterInstance self)", "testcase": false, "constructor": false}, {"identifier": "registerOwnMasterInstance", "parameters": "(Supplier<MasterInstance> source)", "modifiers": "private", "return": "Completable", "signature": "Completable registerOwnMasterInstance(Supplier<MasterInstance> source)", "full_signature": "private Completable registerOwnMasterInstance(Supplier<MasterInstance> source)", "class_method_signature": "ZookeeperMasterMonitor.registerOwnMasterInstance(Supplier<MasterInstance> source)", "testcase": false, "constructor": false}, {"identifier": "observeMasters", "parameters": "()", "modifiers": "@Override public", "return": "Observable<List<MasterInstance>>", "signature": "Observable<List<MasterInstance>> observeMasters()", "full_signature": "@Override public Observable<List<MasterInstance>> observeMasters()", "class_method_signature": "ZookeeperMasterMonitor.observeMasters()", "testcase": false, "constructor": false}, {"identifier": "retrieveLeader", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void retrieveLeader()", "full_signature": "private void retrieveLeader()", "class_method_signature": "ZookeeperMasterMonitor.retrieveLeader()", "testcase": false, "constructor": false}, {"identifier": "retrieveAllMasters", "parameters": "(CuratorFramework curator, TreeCacheEvent cacheEvent)", "modifiers": "private", "return": "void", "signature": "void retrieveAllMasters(CuratorFramework curator, TreeCacheEvent cacheEvent)", "full_signature": "private void retrieveAllMasters(CuratorFramework curator, TreeCacheEvent cacheEvent)", "class_method_signature": "ZookeeperMasterMonitor.retrieveAllMasters(CuratorFramework curator, TreeCacheEvent cacheEvent)", "testcase": false, "constructor": false}, {"identifier": "parseMasterInstanceData", "parameters": "(ChildData childData)", "modifiers": "private", "return": "Optional<MasterInstance>", "signature": "Optional<MasterInstance> parseMasterInstanceData(ChildData childData)", "full_signature": "private Optional<MasterInstance> parseMasterInstanceData(ChildData childData)", "class_method_signature": "ZookeeperMasterMonitor.parseMasterInstanceData(ChildData childData)", "testcase": false, "constructor": false}], "file": "titus-ext/zookeeper/src/main/java/com/netflix/titus/ext/zookeeper/supervisor/ZookeeperMasterMonitor.java"}, "focal_method": {"identifier": "getLeaderObservable", "parameters": "()", "modifiers": "@Override public", "return": "Observable<MasterDescription>", "body": "@Override\n    public Observable<MasterDescription> getLeaderObservable() {\n        return leaderSubject.asObservable();\n    }", "signature": "Observable<MasterDescription> getLeaderObservable()", "full_signature": "@Override public Observable<MasterDescription> getLeaderObservable()", "class_method_signature": "ZookeeperMasterMonitor.getLeaderObservable()", "testcase": false, "constructor": false, "invocations": ["asObservable"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}