{"test_class": {"identifier": "HostValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DittoHeaders DITTO_HEADERS = DittoHeaders.newBuilder().correlationId(\"ditto\").build();", "modifier": "private static final", "type": "DittoHeaders", "declarator": "DITTO_HEADERS = DittoHeaders.newBuilder().correlationId(\"ditto\").build()", "var_name": "DITTO_HEADERS"}, {"original_string": "private ConnectionConfig connectionConfig;", "modifier": "private", "type": "ConnectionConfig", "declarator": "connectionConfig", "var_name": "connectionConfig"}, {"original_string": "private ConnectivityConfig connectivityConfig;", "modifier": "private", "type": "ConnectivityConfig", "declarator": "connectivityConfig", "var_name": "connectivityConfig"}, {"original_string": "private LoggingAdapter loggingAdapter;", "modifier": "private", "type": "LoggingAdapter", "declarator": "loggingAdapter", "var_name": "loggingAdapter"}], "file": "services/connectivity/messaging/src/test/java/org/eclipse/ditto/services/connectivity/messaging/validation/HostValidatorTest.java"}, "test_case": {"identifier": "testAllowedBlockedHosts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAllowedBlockedHosts() {\n\n        final HostValidator underTest =\n                getHostValidatorWithAllowlist(\"0.0.0.0\", \"8.8.8.8\", \"[::1]\", \"192.168.0.1\", \"224.0.1.1\");\n\n        // check if allowlist works for fixed (not configured) blocked ips\n        assertValid(underTest.validateHost(\"0.0.0.0\"));\n        assertValid(underTest.validateHost(\"8.8.8.8\"));\n        assertValid(underTest.validateHost(\"[::1]\"));\n        assertValid(underTest.validateHost(\"192.168.0.1\"));\n        assertValid(underTest.validateHost(\"224.0.1.1\"));\n    }", "signature": "void testAllowedBlockedHosts()", "full_signature": "@Test public void testAllowedBlockedHosts()", "class_method_signature": "HostValidatorTest.testAllowedBlockedHosts()", "testcase": true, "constructor": false, "invocations": ["getHostValidatorWithAllowlist", "assertValid", "validateHost", "assertValid", "validateHost", "assertValid", "validateHost", "assertValid", "validateHost", "assertValid", "validateHost"]}, "focal_class": {"identifier": "HostValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Collection<String> allowedHostnames;", "modifier": "private final", "type": "Collection<String>", "declarator": "allowedHostnames", "var_name": "allowedHostnames"}, {"original_string": "private final Collection<InetAddress> blockedAddresses;", "modifier": "private final", "type": "Collection<InetAddress>", "declarator": "blockedAddresses", "var_name": "blockedAddresses"}, {"original_string": "private final AddressResolver resolver;", "modifier": "private final", "type": "AddressResolver", "declarator": "resolver", "var_name": "resolver"}], "methods": [{"identifier": "HostValidator", "parameters": "(final ConnectivityConfig connectivityConfig, final LoggingAdapter loggingAdapter)", "modifiers": "", "return": "", "signature": " HostValidator(final ConnectivityConfig connectivityConfig, final LoggingAdapter loggingAdapter)", "full_signature": "  HostValidator(final ConnectivityConfig connectivityConfig, final LoggingAdapter loggingAdapter)", "class_method_signature": "HostValidator.HostValidator(final ConnectivityConfig connectivityConfig, final LoggingAdapter loggingAdapter)", "testcase": false, "constructor": true}, {"identifier": "HostValidator", "parameters": "(final ConnectivityConfig connectivityConfig, final LoggingAdapter loggingAdapter,\n            final AddressResolver resolver)", "modifiers": "", "return": "", "signature": " HostValidator(final ConnectivityConfig connectivityConfig, final LoggingAdapter loggingAdapter,\n            final AddressResolver resolver)", "full_signature": "  HostValidator(final ConnectivityConfig connectivityConfig, final LoggingAdapter loggingAdapter,\n            final AddressResolver resolver)", "class_method_signature": "HostValidator.HostValidator(final ConnectivityConfig connectivityConfig, final LoggingAdapter loggingAdapter,\n            final AddressResolver resolver)", "testcase": false, "constructor": true}, {"identifier": "validateHost", "parameters": "(final String host)", "modifiers": "", "return": "HostValidationResult", "signature": "HostValidationResult validateHost(final String host)", "full_signature": " HostValidationResult validateHost(final String host)", "class_method_signature": "HostValidator.validateHost(final String host)", "testcase": false, "constructor": false}, {"identifier": "calculateBlockedAddresses", "parameters": "(final Collection<String> blockedHostnames,\n            final LoggingAdapter log)", "modifiers": "private", "return": "Collection<InetAddress>", "signature": "Collection<InetAddress> calculateBlockedAddresses(final Collection<String> blockedHostnames,\n            final LoggingAdapter log)", "full_signature": "private Collection<InetAddress> calculateBlockedAddresses(final Collection<String> blockedHostnames,\n            final LoggingAdapter log)", "class_method_signature": "HostValidator.calculateBlockedAddresses(final Collection<String> blockedHostnames,\n            final LoggingAdapter log)", "testcase": false, "constructor": false}, {"identifier": "validateHostname", "parameters": "(final String connectionHost, final DittoHeaders dittoHeaders)", "modifiers": "", "return": "void", "signature": "void validateHostname(final String connectionHost, final DittoHeaders dittoHeaders)", "full_signature": " void validateHostname(final String connectionHost, final DittoHeaders dittoHeaders)", "class_method_signature": "HostValidator.validateHostname(final String connectionHost, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}], "file": "services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/validation/HostValidator.java"}, "focal_method": {"identifier": "validateHost", "parameters": "(final String host)", "modifiers": "", "return": "HostValidationResult", "body": "HostValidationResult validateHost(final String host) {\n        if (blockedAddresses.isEmpty()) {\n            // If not even localhost is blocked, then permit even private, loopback, multicast and wildcard IPs.\n            return HostValidationResult.valid();\n        } else if (allowedHostnames.contains(host)) {\n            // the host is contained in the allow-list, do not block\n            return HostValidationResult.valid();\n        } else {\n            // Forbid blocked, private, loopback, multicast and wildcard IPs.\n            try {\n                final InetAddress[] inetAddresses = resolver.resolve(host);\n                for (final InetAddress requestAddress : inetAddresses) {\n                    if (requestAddress.isLoopbackAddress()) {\n                        return HostValidationResult.blocked(host, \"the hostname resolved to a loopback address.\");\n                    } else if (requestAddress.isSiteLocalAddress()) {\n                        return HostValidationResult.blocked(host, \"the hostname resolved to a site local address.\");\n                    } else if (requestAddress.isMulticastAddress()) {\n                        return HostValidationResult.blocked(host, \"the hostname resolved to a multicast address.\");\n                    } else if (requestAddress.isAnyLocalAddress()) {\n                        return HostValidationResult.blocked(host, \"the hostname resolved to a wildcard address.\");\n                    } else if (blockedAddresses.contains(requestAddress)) {\n                        // host is contained in the blocklist --> block\n                        return HostValidationResult.blocked(host);\n                    }\n                }\n                return HostValidationResult.valid();\n            } catch (UnknownHostException e) {\n                final String reason = String.format(\"The configured host '%s' is invalid: %s\", host, e.getMessage());\n                return HostValidationResult.invalid(host, reason);\n            }\n        }\n    }", "signature": "HostValidationResult validateHost(final String host)", "full_signature": " HostValidationResult validateHost(final String host)", "class_method_signature": "HostValidator.validateHost(final String host)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "valid", "contains", "valid", "resolve", "isLoopbackAddress", "blocked", "isSiteLocalAddress", "blocked", "isMulticastAddress", "blocked", "isAnyLocalAddress", "blocked", "contains", "blocked", "valid", "format", "getMessage", "invalid"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}