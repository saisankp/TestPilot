{"test_class": {"identifier": "KafkaUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private KafkaTestBroker broker;", "modifier": "private", "type": "KafkaTestBroker", "declarator": "broker", "var_name": "broker"}, {"original_string": "private SimpleConsumer simpleConsumer;", "modifier": "private", "type": "SimpleConsumer", "declarator": "simpleConsumer", "var_name": "simpleConsumer"}, {"original_string": "private KafkaConfig config;", "modifier": "private", "type": "KafkaConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private BrokerHosts brokerHosts;", "modifier": "private", "type": "BrokerHosts", "declarator": "brokerHosts", "var_name": "brokerHosts"}], "file": "storm/storm-app/src/test/java/storm/kafka/KafkaUtilsTest.java"}, "test_case": {"identifier": "assignInvalidTask", "parameters": "()", "modifiers": "@Test (expected = IllegalArgumentException.class ) public", "return": "void", "body": "@Test (expected = IllegalArgumentException.class )\n    public void assignInvalidTask() {\n        GlobalPartitionInformation globalPartitionInformation = new GlobalPartitionInformation();\n        KafkaUtils.calculatePartitionsForTask(globalPartitionInformation, 1, 1);\n    }", "signature": "void assignInvalidTask()", "full_signature": "@Test (expected = IllegalArgumentException.class ) public void assignInvalidTask()", "class_method_signature": "KafkaUtilsTest.assignInvalidTask()", "testcase": true, "constructor": false, "invocations": ["calculatePartitionsForTask"]}, "focal_class": {"identifier": "KafkaUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger LOG = LoggerFactory.getLogger(KafkaUtils.class);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(KafkaUtils.class)", "var_name": "LOG"}, {"original_string": "private static final int NO_OFFSET = -5;", "modifier": "private static final", "type": "int", "declarator": "NO_OFFSET = -5", "var_name": "NO_OFFSET"}], "methods": [{"identifier": "makeBrokerReader", "parameters": "(Map stormConf, KafkaConfig conf)", "modifiers": "public static", "return": "IBrokerReader", "signature": "IBrokerReader makeBrokerReader(Map stormConf, KafkaConfig conf)", "full_signature": "public static IBrokerReader makeBrokerReader(Map stormConf, KafkaConfig conf)", "class_method_signature": "KafkaUtils.makeBrokerReader(Map stormConf, KafkaConfig conf)", "testcase": false, "constructor": false}, {"identifier": "getOffset", "parameters": "(SimpleConsumer consumer, String topic, int partition, KafkaConfig config)", "modifiers": "public static", "return": "long", "signature": "long getOffset(SimpleConsumer consumer, String topic, int partition, KafkaConfig config)", "full_signature": "public static long getOffset(SimpleConsumer consumer, String topic, int partition, KafkaConfig config)", "class_method_signature": "KafkaUtils.getOffset(SimpleConsumer consumer, String topic, int partition, KafkaConfig config)", "testcase": false, "constructor": false}, {"identifier": "getOffset", "parameters": "(SimpleConsumer consumer, String topic, int partition, long startOffsetTime)", "modifiers": "public static", "return": "long", "signature": "long getOffset(SimpleConsumer consumer, String topic, int partition, long startOffsetTime)", "full_signature": "public static long getOffset(SimpleConsumer consumer, String topic, int partition, long startOffsetTime)", "class_method_signature": "KafkaUtils.getOffset(SimpleConsumer consumer, String topic, int partition, long startOffsetTime)", "testcase": false, "constructor": false}, {"identifier": "fetchMessages", "parameters": "(KafkaConfig config, SimpleConsumer consumer, Partition partition, long offset)", "modifiers": "public static", "return": "ByteBufferMessageSet", "signature": "ByteBufferMessageSet fetchMessages(KafkaConfig config, SimpleConsumer consumer, Partition partition, long offset)", "full_signature": "public static ByteBufferMessageSet fetchMessages(KafkaConfig config, SimpleConsumer consumer, Partition partition, long offset)", "class_method_signature": "KafkaUtils.fetchMessages(KafkaConfig config, SimpleConsumer consumer, Partition partition, long offset)", "testcase": false, "constructor": false}, {"identifier": "generateTuples", "parameters": "(KafkaConfig kafkaConfig, Message msg)", "modifiers": "public static", "return": "Iterable<List<Object>>", "signature": "Iterable<List<Object>> generateTuples(KafkaConfig kafkaConfig, Message msg)", "full_signature": "public static Iterable<List<Object>> generateTuples(KafkaConfig kafkaConfig, Message msg)", "class_method_signature": "KafkaUtils.generateTuples(KafkaConfig kafkaConfig, Message msg)", "testcase": false, "constructor": false}, {"identifier": "calculatePartitionsForTask", "parameters": "(GlobalPartitionInformation partitionInformation, int totalTasks, int taskIndex)", "modifiers": "public static", "return": "List<Partition>", "signature": "List<Partition> calculatePartitionsForTask(GlobalPartitionInformation partitionInformation, int totalTasks, int taskIndex)", "full_signature": "public static List<Partition> calculatePartitionsForTask(GlobalPartitionInformation partitionInformation, int totalTasks, int taskIndex)", "class_method_signature": "KafkaUtils.calculatePartitionsForTask(GlobalPartitionInformation partitionInformation, int totalTasks, int taskIndex)", "testcase": false, "constructor": false}, {"identifier": "logPartitionMapping", "parameters": "(int totalTasks, int taskIndex, List<Partition> taskPartitions)", "modifiers": "private static", "return": "void", "signature": "void logPartitionMapping(int totalTasks, int taskIndex, List<Partition> taskPartitions)", "full_signature": "private static void logPartitionMapping(int totalTasks, int taskIndex, List<Partition> taskPartitions)", "class_method_signature": "KafkaUtils.logPartitionMapping(int totalTasks, int taskIndex, List<Partition> taskPartitions)", "testcase": false, "constructor": false}, {"identifier": "taskId", "parameters": "(int taskIndex, int totalTasks)", "modifiers": "public static", "return": "String", "signature": "String taskId(int taskIndex, int totalTasks)", "full_signature": "public static String taskId(int taskIndex, int totalTasks)", "class_method_signature": "KafkaUtils.taskId(int taskIndex, int totalTasks)", "testcase": false, "constructor": false}], "file": "storm/storm-app/src/main/java/storm/kafka/KafkaUtils.java"}, "focal_method": {"identifier": "calculatePartitionsForTask", "parameters": "(GlobalPartitionInformation partitionInformation, int totalTasks, int taskIndex)", "modifiers": "public static", "return": "List<Partition>", "body": "public static List<Partition> calculatePartitionsForTask(GlobalPartitionInformation partitionInformation, int totalTasks, int taskIndex) {\n        Preconditions.checkArgument(taskIndex < totalTasks, \"task index must be less that total tasks\");\n        List<Partition> partitions = partitionInformation.getOrderedPartitions();\n        //kafka\u7684\u65e5\u5fd7\u5206\u533a\u6570\u548cspout\u7684\u4efb\u52a1\u6570.\n        int numPartitions = partitions.size();\n        //\u5982\u679cspout\u7684\u4efb\u52a1\u6570\u6bd4\u65e5\u5fd7\u5206\u533a\u6570\u8fd8\u8981\u591a, \u8bf4\u660e\u6709\u4e9btask\u4f1a\u7a7a\u95f2. \u4e00\u822c\u8981\u4e00\u4e2a\u4efb\u52a1\u5904\u7406\u591a\u4e2a\u65e5\u5fd7\u5206\u533a, \u5373totalTasks <= partitions\n        if (numPartitions < totalTasks) {\n            LOG.warn(\"there are more tasks than partitions (tasks: \" + totalTasks + \"; partitions: \" + numPartitions + \"), some tasks will be idle\");\n        }\n\n        List<Partition> taskPartitions = new ArrayList<Partition>();\n        //\u5047\u8bbe\u670910\u4e2a\u5206\u533a\u65e5\u5fd7,\u67095\u4e2a\u4efb\u52a1. taskIndex=0, \u5206\u914d\u65e5\u5fd7\u5206\u533a=0,5\n        //taskIndex=1, \u5206\u914d\u65e5\u5fd7\u5206\u533a=1,6. \u5b9e\u9645\u4e0a\u662f\u987a\u5e8f\u4e3atask\u5206\u914d\u4e00\u4e2a\u65e5\u5fd7\u5206\u533a: \u6bcf\u4e2atask\u5206\u914d\u4e00\u4e2a\u987a\u5e8f\u7684\u65e5\u5fd7\u5206\u533a\n        //\u5982\u679c\u8fd8\u6709\u5269\u4f59\u7684\u65e5\u5fd7\u5206\u533a\u6ca1\u6709\u6307\u5b9atask,\u518d\u4ece\u5934\u5f00\u59cb\u4e3a\u6240\u6709\u7684task\u7ee7\u7eed\u987a\u5e8f\u5206\u914d\n        for (int i = taskIndex; i < numPartitions; i += totalTasks) {\n            Partition taskPartition = partitions.get(i);\n            taskPartitions.add(taskPartition);\n        }\n        logPartitionMapping(totalTasks, taskIndex, taskPartitions);\n        return taskPartitions;\n    }", "signature": "List<Partition> calculatePartitionsForTask(GlobalPartitionInformation partitionInformation, int totalTasks, int taskIndex)", "full_signature": "public static List<Partition> calculatePartitionsForTask(GlobalPartitionInformation partitionInformation, int totalTasks, int taskIndex)", "class_method_signature": "KafkaUtils.calculatePartitionsForTask(GlobalPartitionInformation partitionInformation, int totalTasks, int taskIndex)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "getOrderedPartitions", "size", "warn", "get", "add", "logPartitionMapping"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}