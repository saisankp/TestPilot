{"test_class": {"identifier": "CustomIconsTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/de/slackspace/openkeepass/domain/CustomIconsTest.java"}, "test_case": {"identifier": "shouldUnmarshallXmlToObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUnmarshallXmlToObject() throws Exception {\n        UUID uuid = UUID.fromString(\"87d4f441-a5ec-4ce0-8ca9-82a5079d28ef\");\n        CustomIcon customIcon = new CustomIconBuilder()\n                .uuid(uuid)\n                .data(new byte[10])\n                .build();\n        \n        CustomIcons customIcons = new CustomIconsBuilder().addIcon(customIcon).build();\n        \n        String xml = \"<customIcons><Icon><UUID>h9T0QaXsTOCMqYKlB50o7w==</UUID><Data>AAAAAAAAAAAAAA==</Data></Icon></customIcons>\";\n        ByteArrayInputStream inputStream = new ByteArrayInputStream(xml.getBytes());\n        CustomIcons customIconsUnmarshall =\n                new SimpleXmlParser().fromXml(inputStream, new NullProtectionStrategy(), CustomIcons.class);\n        \n        \n        Assert.assertEquals(customIcons.getIcons().size(), customIconsUnmarshall.getIcons().size());\n        Assert.assertArrayEquals(customIcons.getIcons().get(0).getData(), customIconsUnmarshall.getIcons().get(0).getData());\n        Assert.assertEquals(customIcons.getIcons().get(0).getUuid(), customIconsUnmarshall.getIcons().get(0).getUuid());\n    }", "signature": "void shouldUnmarshallXmlToObject()", "full_signature": "@Test public void shouldUnmarshallXmlToObject()", "class_method_signature": "CustomIconsTest.shouldUnmarshallXmlToObject()", "testcase": true, "constructor": false, "invocations": ["fromString", "build", "data", "uuid", "build", "addIcon", "getBytes", "fromXml", "assertEquals", "size", "getIcons", "size", "getIcons", "assertArrayEquals", "getData", "get", "getIcons", "getData", "get", "getIcons", "assertEquals", "getUuid", "get", "getIcons", "getUuid", "get", "getIcons"]}, "focal_class": {"identifier": "CustomIcons", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ElementList(name = \"Icon\", inline = true, required = false)\n    private List<CustomIcon> customIconList = new ArrayList<CustomIcon>();", "modifier": "@ElementList(name = \"Icon\", inline = true, required = false)\n    private", "type": "List<CustomIcon>", "declarator": "customIconList = new ArrayList<CustomIcon>()", "var_name": "customIconList"}], "methods": [{"identifier": "CustomIcons", "parameters": "()", "modifiers": "", "return": "", "signature": " CustomIcons()", "full_signature": "  CustomIcons()", "class_method_signature": "CustomIcons.CustomIcons()", "testcase": false, "constructor": true}, {"identifier": "CustomIcons", "parameters": "(CustomIconsContract customIconsContract)", "modifiers": "public", "return": "", "signature": " CustomIcons(CustomIconsContract customIconsContract)", "full_signature": "public  CustomIcons(CustomIconsContract customIconsContract)", "class_method_signature": "CustomIcons.CustomIcons(CustomIconsContract customIconsContract)", "testcase": false, "constructor": true}, {"identifier": "getIcons", "parameters": "()", "modifiers": "public", "return": "List<CustomIcon>", "signature": "List<CustomIcon> getIcons()", "full_signature": "public List<CustomIcon> getIcons()", "class_method_signature": "CustomIcons.getIcons()", "testcase": false, "constructor": false}, {"identifier": "getIconByUuid", "parameters": "(UUID uuid)", "modifiers": "public", "return": "CustomIcon", "signature": "CustomIcon getIconByUuid(UUID uuid)", "full_signature": "public CustomIcon getIconByUuid(UUID uuid)", "class_method_signature": "CustomIcons.getIconByUuid(UUID uuid)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public final int hashCode()", "class_method_signature": "CustomIcons.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public final boolean equals(Object obj)", "class_method_signature": "CustomIcons.equals(Object obj)", "testcase": false, "constructor": false}], "file": "src/de/slackspace/openkeepass/domain/CustomIcons.java"}, "focal_method": {"identifier": "getIcons", "parameters": "()", "modifiers": "public", "return": "List<CustomIcon>", "body": "public List<CustomIcon> getIcons() {\n        return customIconList;\n    }", "signature": "List<CustomIcon> getIcons()", "full_signature": "public List<CustomIcon> getIcons()", "class_method_signature": "CustomIcons.getIcons()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 102137829, "url": "https://github.com/privacyint/ThornSec", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 10, "size": 20604, "license": "licensed"}}