{"test_class": {"identifier": "DBUserGroupCallbackImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String DATASOURCE_PROPERTIES = \"/datasource.properties\";", "modifier": "protected static final", "type": "String", "declarator": "DATASOURCE_PROPERTIES = \"/datasource.properties\"", "var_name": "DATASOURCE_PROPERTIES"}, {"original_string": "private PoolingDataSourceWrapper pds;", "modifier": "private", "type": "PoolingDataSourceWrapper", "declarator": "pds", "var_name": "pds"}, {"original_string": "private Properties props;", "modifier": "private", "type": "Properties", "declarator": "props", "var_name": "props"}, {"original_string": "private Configuration config;", "modifier": "private", "type": "Configuration", "declarator": "config", "var_name": "config"}, {"original_string": "private DBUserGroupCallbackImpl callback;", "modifier": "private", "type": "DBUserGroupCallbackImpl", "declarator": "callback", "var_name": "callback"}], "file": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/identity/DBUserGroupCallbackImplTest.java"}, "test_case": {"identifier": "testGroupNotExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGroupNotExists() {\n        boolean exists = callback.existsGroup(\"HR\");\n        assertFalse(exists);\n    }", "signature": "void testGroupNotExists()", "full_signature": "@Test public void testGroupNotExists()", "class_method_signature": "DBUserGroupCallbackImplTest.testGroupNotExists()", "testcase": true, "constructor": false, "invocations": ["existsGroup", "assertFalse"]}, "focal_class": {"identifier": "DBUserGroupCallbackImpl", "superclass": "extends AbstractUserGroupInfo", "interfaces": "implements UserGroupCallback", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DBUserGroupCallbackImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DBUserGroupCallbackImpl.class)", "var_name": "logger"}, {"original_string": "protected static final String DEFAULT_PROPERTIES_NAME = \"classpath:/jbpm.usergroup.callback.properties\";", "modifier": "protected static final", "type": "String", "declarator": "DEFAULT_PROPERTIES_NAME = \"classpath:/jbpm.usergroup.callback.properties\"", "var_name": "DEFAULT_PROPERTIES_NAME"}, {"original_string": "public static final String DS_JNDI_NAME = \"db.ds.jndi.name\";", "modifier": "public static final", "type": "String", "declarator": "DS_JNDI_NAME = \"db.ds.jndi.name\"", "var_name": "DS_JNDI_NAME"}, {"original_string": "public static final String PRINCIPAL_QUERY = \"db.user.query\";", "modifier": "public static final", "type": "String", "declarator": "PRINCIPAL_QUERY = \"db.user.query\"", "var_name": "PRINCIPAL_QUERY"}, {"original_string": "public static final String USER_ROLES_QUERY = \"db.user.roles.query\";", "modifier": "public static final", "type": "String", "declarator": "USER_ROLES_QUERY = \"db.user.roles.query\"", "var_name": "USER_ROLES_QUERY"}, {"original_string": "public static final String ROLES_QUERY = \"db.roles.query\";", "modifier": "public static final", "type": "String", "declarator": "ROLES_QUERY = \"db.roles.query\"", "var_name": "ROLES_QUERY"}, {"original_string": "private Properties config;", "modifier": "private", "type": "Properties", "declarator": "config", "var_name": "config"}, {"original_string": "private DataSource ds;", "modifier": "private", "type": "DataSource", "declarator": "ds", "var_name": "ds"}], "methods": [{"identifier": "DBUserGroupCallbackImpl", "parameters": "(boolean activate)", "modifiers": "public", "return": "", "signature": " DBUserGroupCallbackImpl(boolean activate)", "full_signature": "public  DBUserGroupCallbackImpl(boolean activate)", "class_method_signature": "DBUserGroupCallbackImpl.DBUserGroupCallbackImpl(boolean activate)", "testcase": false, "constructor": true}, {"identifier": "DBUserGroupCallbackImpl", "parameters": "(Properties config)", "modifiers": "public", "return": "", "signature": " DBUserGroupCallbackImpl(Properties config)", "full_signature": "public  DBUserGroupCallbackImpl(Properties config)", "class_method_signature": "DBUserGroupCallbackImpl.DBUserGroupCallbackImpl(Properties config)", "testcase": false, "constructor": true}, {"identifier": "existsUser", "parameters": "(String userId)", "modifiers": "public", "return": "boolean", "signature": "boolean existsUser(String userId)", "full_signature": "public boolean existsUser(String userId)", "class_method_signature": "DBUserGroupCallbackImpl.existsUser(String userId)", "testcase": false, "constructor": false}, {"identifier": "existsGroup", "parameters": "(String groupId)", "modifiers": "public", "return": "boolean", "signature": "boolean existsGroup(String groupId)", "full_signature": "public boolean existsGroup(String groupId)", "class_method_signature": "DBUserGroupCallbackImpl.existsGroup(String groupId)", "testcase": false, "constructor": false}, {"identifier": "getGroupsForUser", "parameters": "(String userId)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getGroupsForUser(String userId)", "full_signature": "public List<String> getGroupsForUser(String userId)", "class_method_signature": "DBUserGroupCallbackImpl.getGroupsForUser(String userId)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "protected", "return": "Connection", "signature": "Connection getConnection()", "full_signature": "protected Connection getConnection()", "class_method_signature": "DBUserGroupCallbackImpl.getConnection()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "DBUserGroupCallbackImpl.init()", "testcase": false, "constructor": false}, {"identifier": "checkExistence", "parameters": "(String querySql, String parameter)", "modifiers": "protected", "return": "boolean", "signature": "boolean checkExistence(String querySql, String parameter)", "full_signature": "protected boolean checkExistence(String querySql, String parameter)", "class_method_signature": "DBUserGroupCallbackImpl.checkExistence(String querySql, String parameter)", "testcase": false, "constructor": false}], "file": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/identity/DBUserGroupCallbackImpl.java"}, "focal_method": {"identifier": "existsGroup", "parameters": "(String groupId)", "modifiers": "public", "return": "boolean", "body": "public boolean existsGroup(String groupId) {\n\t\tif (groupId == null) {\n\t\t\tthrow new IllegalArgumentException(\"GroupId cannot be null\");\n\t\t}\n\t\treturn checkExistence(this.config.getProperty(ROLES_QUERY), groupId);\n\t}", "signature": "boolean existsGroup(String groupId)", "full_signature": "public boolean existsGroup(String groupId)", "class_method_signature": "DBUserGroupCallbackImpl.existsGroup(String groupId)", "testcase": false, "constructor": false, "invocations": ["checkExistence", "getProperty"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}