{"test_class": {"identifier": "AzureProbeMonitorConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final AzureConfiguration azureConfiguration = new AzureConfiguration(\n        \"subscription-id\", new AzureConfiguration.ServicePrincipal(\"tenant-id\", \"client-id\",\n        \"client-secret\", null));", "modifier": "public static final", "type": "AzureConfiguration", "declarator": "azureConfiguration = new AzureConfiguration(\n        \"subscription-id\", new AzureConfiguration.ServicePrincipal(\"tenant-id\", \"client-id\",\n        \"client-secret\", null))", "var_name": "azureConfiguration"}, {"original_string": "public static final List<NvaConfiguration> nvaConfigurations = Arrays.asList(\n        new NvaConfiguration(\"nva-1-probe-network-interface\", 1234,\n            Arrays.asList(\n                new NamedResourceId(\"nic1\", \"nva1-network-interface-id1\"),\n                new NamedResourceId(\"nic2\", \"nva1-network-interface-id2\"))\n        ),\n        new NvaConfiguration(\"nva-2-probe-network-interface\", 1234,\n            Arrays.asList(\n                new NamedResourceId(\"nic1\", \"nva2-network-interface-id1\"),\n                new NamedResourceId(\"nic2\", \"nva2-network-interface-id2\"))\n        )\n    );", "modifier": "public static final", "type": "List<NvaConfiguration>", "declarator": "nvaConfigurations = Arrays.asList(\n        new NvaConfiguration(\"nva-1-probe-network-interface\", 1234,\n            Arrays.asList(\n                new NamedResourceId(\"nic1\", \"nva1-network-interface-id1\"),\n                new NamedResourceId(\"nic2\", \"nva1-network-interface-id2\"))\n        ),\n        new NvaConfiguration(\"nva-2-probe-network-interface\", 1234,\n            Arrays.asList(\n                new NamedResourceId(\"nic1\", \"nva2-network-interface-id1\"),\n                new NamedResourceId(\"nic2\", \"nva2-network-interface-id2\"))\n        )\n    )", "var_name": "nvaConfigurations"}, {"original_string": "public static final List<String> routeTables =\n        Arrays.asList(\"route-table-id1\", \"route-table-id2\", \"route-table-id3\");", "modifier": "public static final", "type": "List<String>", "declarator": "routeTables =\n        Arrays.asList(\"route-table-id1\", \"route-table-id2\", \"route-table-id3\")", "var_name": "routeTables"}, {"original_string": "public static final List<NamedResourceId> publicIpAddresses =\n        Arrays.asList(new NamedResourceId(\"nic1\", \"public-ip-address-id1\"));", "modifier": "public static final", "type": "List<NamedResourceId>", "declarator": "publicIpAddresses =\n        Arrays.asList(new NamedResourceId(\"nic1\", \"public-ip-address-id1\"))", "var_name": "publicIpAddresses"}], "file": "nvadaemon-azure/src/test/java/com/microsoft/azure/practices/nvadaemon/config/AzureProbeMonitorConfigurationTest.java"}, "test_case": {"identifier": "test_validate_invalid_route_table", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void test_validate_invalid_route_table() throws ConfigurationException {\n        AzureProbeMonitorConfiguration azureProbeMonitorConfiguration =\n            new AzureProbeMonitorConfiguration(azureConfiguration,\n                nvaConfigurations, routeTables, publicIpAddresses,\n                null, null, null);\n\n        AzureClient azureClient = mock(AzureClient.class);\n        when(azureClient.checkExistenceById(contains(\"network-interface\")))\n            .thenReturn(true);\n        when(azureClient.checkExistenceById(contains(\"public-ip-address\")))\n            .thenReturn(true);\n        NetworkInterface networkInterface = mock(NetworkInterface.class);\n        when(networkInterface.primaryPrivateIp())\n            .thenReturn(\"127.0.0.1\")\n            .thenReturn(\"127.0.0.2\");\n        when(azureClient.getNetworkInterfaceById(anyString()))\n            .thenReturn(networkInterface);\n\n        Assertions.assertThrows(ConfigurationException.class,\n            () -> azureProbeMonitorConfiguration.validate(azureClient));\n    }", "signature": "void test_validate_invalid_route_table()", "full_signature": "@Test void test_validate_invalid_route_table()", "class_method_signature": "AzureProbeMonitorConfigurationTest.test_validate_invalid_route_table()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "checkExistenceById", "contains", "thenReturn", "when", "checkExistenceById", "contains", "mock", "thenReturn", "thenReturn", "when", "primaryPrivateIp", "thenReturn", "when", "getNetworkInterfaceById", "anyString", "assertThrows", "validate"]}, "focal_class": {"identifier": "AzureProbeMonitorConfiguration", "superclass": "", "interfaces": "implements ConfigurationValidation", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AzureProbeMonitorConfiguration.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AzureProbeMonitorConfiguration.class)", "var_name": "log"}, {"original_string": "public static final int DEFAULT_NUMBER_OF_FAILURES_THRESHOLD = 3;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_NUMBER_OF_FAILURES_THRESHOLD = 3", "var_name": "DEFAULT_NUMBER_OF_FAILURES_THRESHOLD"}, {"original_string": "public static final int DEFAULT_PROBE_CONNECT_TIMEOUT = 10000;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_PROBE_CONNECT_TIMEOUT = 10000", "var_name": "DEFAULT_PROBE_CONNECT_TIMEOUT"}, {"original_string": "public static final int DEFAULT_PROBE_POLLING_INTERVAL = 3000;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_PROBE_POLLING_INTERVAL = 3000", "var_name": "DEFAULT_PROBE_POLLING_INTERVAL"}, {"original_string": "private List<String> routeTables = new ArrayList<>();", "modifier": "private", "type": "List<String>", "declarator": "routeTables = new ArrayList<>()", "var_name": "routeTables"}, {"original_string": "private List<NamedResourceId> publicIpAddresses = new ArrayList<>();", "modifier": "private", "type": "List<NamedResourceId>", "declarator": "publicIpAddresses = new ArrayList<>()", "var_name": "publicIpAddresses"}, {"original_string": "@JsonProperty(\"nvas\")\n    private List<NvaConfiguration> nvaConfigurations = new ArrayList<>();", "modifier": "@JsonProperty(\"nvas\")\n    private", "type": "List<NvaConfiguration>", "declarator": "nvaConfigurations = new ArrayList<>()", "var_name": "nvaConfigurations"}, {"original_string": "@JsonProperty(\"azure\")\n    private AzureConfiguration azureConfiguration;", "modifier": "@JsonProperty(\"azure\")\n    private", "type": "AzureConfiguration", "declarator": "azureConfiguration", "var_name": "azureConfiguration"}, {"original_string": "private int numberOfFailuresThreshold = DEFAULT_NUMBER_OF_FAILURES_THRESHOLD;", "modifier": "private", "type": "int", "declarator": "numberOfFailuresThreshold = DEFAULT_NUMBER_OF_FAILURES_THRESHOLD", "var_name": "numberOfFailuresThreshold"}, {"original_string": "private int probeConnectTimeout = DEFAULT_PROBE_CONNECT_TIMEOUT;", "modifier": "private", "type": "int", "declarator": "probeConnectTimeout = DEFAULT_PROBE_CONNECT_TIMEOUT", "var_name": "probeConnectTimeout"}, {"original_string": "private int probePollingInterval = DEFAULT_PROBE_POLLING_INTERVAL;", "modifier": "private", "type": "int", "declarator": "probePollingInterval = DEFAULT_PROBE_POLLING_INTERVAL", "var_name": "probePollingInterval"}], "methods": [{"identifier": "create", "parameters": "(MonitorConfiguration monitorConfiguration)", "modifiers": "public static", "return": "AzureProbeMonitorConfiguration", "signature": "AzureProbeMonitorConfiguration create(MonitorConfiguration monitorConfiguration)", "full_signature": "public static AzureProbeMonitorConfiguration create(MonitorConfiguration monitorConfiguration)", "class_method_signature": "AzureProbeMonitorConfiguration.create(MonitorConfiguration monitorConfiguration)", "testcase": false, "constructor": false}, {"identifier": "AzureProbeMonitorConfiguration", "parameters": "(@JsonProperty(\"azure\")AzureConfiguration azureConfiguration,\n                                          @JsonProperty(\"nvas\")List<NvaConfiguration> nvaConfigurations,\n                                          @JsonProperty(\"routeTables\")List<String> routeTables,\n                                          @JsonProperty(\"publicIpAddresses\")List<NamedResourceId> publicIpAddresses,\n                                          @JsonProperty(\"numberOfFailuresThreshold\")Integer numberOfFailuresThreshold,\n                                          @JsonProperty(\"probeConnectTimeout\")Integer probeConnectTimeout,\n                                          @JsonProperty(\"probePollingInterval\")Integer probePollingInterval)", "modifiers": "@JsonCreator public", "return": "", "signature": " AzureProbeMonitorConfiguration(@JsonProperty(\"azure\")AzureConfiguration azureConfiguration,\n                                          @JsonProperty(\"nvas\")List<NvaConfiguration> nvaConfigurations,\n                                          @JsonProperty(\"routeTables\")List<String> routeTables,\n                                          @JsonProperty(\"publicIpAddresses\")List<NamedResourceId> publicIpAddresses,\n                                          @JsonProperty(\"numberOfFailuresThreshold\")Integer numberOfFailuresThreshold,\n                                          @JsonProperty(\"probeConnectTimeout\")Integer probeConnectTimeout,\n                                          @JsonProperty(\"probePollingInterval\")Integer probePollingInterval)", "full_signature": "@JsonCreator public  AzureProbeMonitorConfiguration(@JsonProperty(\"azure\")AzureConfiguration azureConfiguration,\n                                          @JsonProperty(\"nvas\")List<NvaConfiguration> nvaConfigurations,\n                                          @JsonProperty(\"routeTables\")List<String> routeTables,\n                                          @JsonProperty(\"publicIpAddresses\")List<NamedResourceId> publicIpAddresses,\n                                          @JsonProperty(\"numberOfFailuresThreshold\")Integer numberOfFailuresThreshold,\n                                          @JsonProperty(\"probeConnectTimeout\")Integer probeConnectTimeout,\n                                          @JsonProperty(\"probePollingInterval\")Integer probePollingInterval)", "class_method_signature": "AzureProbeMonitorConfiguration.AzureProbeMonitorConfiguration(@JsonProperty(\"azure\")AzureConfiguration azureConfiguration,\n                                          @JsonProperty(\"nvas\")List<NvaConfiguration> nvaConfigurations,\n                                          @JsonProperty(\"routeTables\")List<String> routeTables,\n                                          @JsonProperty(\"publicIpAddresses\")List<NamedResourceId> publicIpAddresses,\n                                          @JsonProperty(\"numberOfFailuresThreshold\")Integer numberOfFailuresThreshold,\n                                          @JsonProperty(\"probeConnectTimeout\")Integer probeConnectTimeout,\n                                          @JsonProperty(\"probePollingInterval\")Integer probePollingInterval)", "testcase": false, "constructor": true}, {"identifier": "getAzureConfiguration", "parameters": "()", "modifiers": "public", "return": "AzureConfiguration", "signature": "AzureConfiguration getAzureConfiguration()", "full_signature": "public AzureConfiguration getAzureConfiguration()", "class_method_signature": "AzureProbeMonitorConfiguration.getAzureConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getProbeConnectTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getProbeConnectTimeout()", "full_signature": "public int getProbeConnectTimeout()", "class_method_signature": "AzureProbeMonitorConfiguration.getProbeConnectTimeout()", "testcase": false, "constructor": false}, {"identifier": "getProbePollingInterval", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getProbePollingInterval()", "full_signature": "public int getProbePollingInterval()", "class_method_signature": "AzureProbeMonitorConfiguration.getProbePollingInterval()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfFailuresThreshold", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumberOfFailuresThreshold()", "full_signature": "public int getNumberOfFailuresThreshold()", "class_method_signature": "AzureProbeMonitorConfiguration.getNumberOfFailuresThreshold()", "testcase": false, "constructor": false}, {"identifier": "getRouteTables", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getRouteTables()", "full_signature": "public List<String> getRouteTables()", "class_method_signature": "AzureProbeMonitorConfiguration.getRouteTables()", "testcase": false, "constructor": false}, {"identifier": "getPublicIpAddresses", "parameters": "()", "modifiers": "public", "return": "List<NamedResourceId>", "signature": "List<NamedResourceId> getPublicIpAddresses()", "full_signature": "public List<NamedResourceId> getPublicIpAddresses()", "class_method_signature": "AzureProbeMonitorConfiguration.getPublicIpAddresses()", "testcase": false, "constructor": false}, {"identifier": "getNvaConfigurations", "parameters": "()", "modifiers": "public", "return": "List<NvaConfiguration>", "signature": "List<NvaConfiguration> getNvaConfigurations()", "full_signature": "public List<NvaConfiguration> getNvaConfigurations()", "class_method_signature": "AzureProbeMonitorConfiguration.getNvaConfigurations()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(AzureClient azureClient)", "modifiers": "public", "return": "void", "signature": "void validate(AzureClient azureClient)", "full_signature": "public void validate(AzureClient azureClient)", "class_method_signature": "AzureProbeMonitorConfiguration.validate(AzureClient azureClient)", "testcase": false, "constructor": false}], "file": "nvadaemon-azure/src/main/java/com/microsoft/azure/practices/nvadaemon/config/AzureProbeMonitorConfiguration.java"}, "focal_method": {"identifier": "validate", "parameters": "(AzureClient azureClient)", "modifiers": "public", "return": "void", "body": "public void validate(AzureClient azureClient) throws ConfigurationException {\n        Preconditions.checkNotNull(azureClient, \"azureClient cannot be null\");\n\n        for (NvaConfiguration config : this.nvaConfigurations) {\n            config.validate(azureClient);\n        }\n\n        if (this.nvaConfigurations.stream()\n            .map(c -> ((InetSocketAddress)c.getProbeSocketAddress()).getHostName())\n            .distinct()\n            .count() != this.nvaConfigurations.size()) {\n            throw new ConfigurationException(\"Duplicate probe IP Address found\");\n        }\n\n        List<String> invalidPublicIpAddresses = this.publicIpAddresses.stream()\n            .map(r -> r.getId())\n            .filter(id -> !azureClient.checkExistenceById(id))\n            .collect(Collectors.toList());\n        if (invalidPublicIpAddresses.size() > 0) {\n            throw new ConfigurationException(\"Invalid public ip address(es): \" +\n                invalidPublicIpAddresses.stream().collect(Collectors.joining(\", \")));\n        }\n\n        List<String> invalidRouteTables = this.routeTables.stream()\n            .filter(id -> !azureClient.checkExistenceById(id))\n            .collect(Collectors.toList());\n\n        if (invalidRouteTables.size() > 0) {\n            throw new ConfigurationException(\"Invalid route table(s): \" +\n            invalidRouteTables.stream().collect(Collectors.joining(\", \")));\n        }\n    }", "signature": "void validate(AzureClient azureClient)", "full_signature": "public void validate(AzureClient azureClient)", "class_method_signature": "AzureProbeMonitorConfiguration.validate(AzureClient azureClient)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "validate", "count", "distinct", "map", "stream", "getHostName", "getProbeSocketAddress", "size", "collect", "filter", "map", "stream", "getId", "checkExistenceById", "toList", "size", "collect", "stream", "joining", "collect", "filter", "stream", "checkExistenceById", "toList", "size", "collect", "stream", "joining"]}, "repository": {"repo_id": 70932660, "url": "https://github.com/mspnp/ha-nva", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 27, "size": 38331, "license": "licensed"}}