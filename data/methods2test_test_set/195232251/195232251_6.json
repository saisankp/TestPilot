{"test_class": {"identifier": "ReFtpClientTest", "superclass": "", "interfaces": "", "fields": [], "file": "re/src/test/java/cn/rootelement/ftp/ReFtpClientTest.java"}, "test_case": {"identifier": "uploadFile", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void uploadFile() {\n        ReFtpClient reFtpClient = new ReFtpClient();\n        reFtpClient.init();\n        try {\n            reFtpClient.connect();\n//            Map<String, Boolean> stringBooleanMap = reFtpClient.downloadFile(\"images\", \"C:\\\\Users\\\\ljt\\\\Desktop\", \"var_copy.png\");\n//            stringBooleanMap.forEach((k, v) -> {\n//                System.out.println(k + \":\" + v);\n//            });\n//            boolean b = reFtpClient.uploadFile(\"/files\", \"myblog.sql\", new FileInputStream(\"C:\\\\Users\\\\ljt\\\\Desktop\\\\myblog.sql\"));\n//            System.out.println(b);\n            String originName = \"C:\\\\Users\\\\ljt\\\\Desktop\\\\re.sql\";\n            String extName = originName.substring(originName.lastIndexOf(\".\") + 1);\n            InputStream inputStream = new BufferedInputStream(new FileInputStream(originName));\n            String filePath = \"\";\n            for (CommonFileTypeEnum commonFileTypeEnum : CommonFileTypeEnum.values()) {\n                if (extName.equalsIgnoreCase(commonFileTypeEnum.getValue())) {\n                    int type = commonFileTypeEnum.getType();\n                    switch (type) {\n                        case 1 :\n                            filePath = \"images\";\n                            break;\n                        case 2 :\n                            filePath = \"music\";\n                            break;\n                        case 3 :\n                            filePath = \"documentation\";\n                            break;\n                        case 4 :\n                            filePath = \"video\";\n                            break;\n                        case 5 :\n                            filePath = \"pdf\";\n                            break;\n                        case 6 :\n                            filePath = \"markdown\";\n                            break;\n                        case 7 :\n                            filePath = \"code\";\n                            break;\n                        default:\n                            filePath = \"other\";\n                    }\n                }\n            }\n            reFtpClient.uploadFile(filePath, \"re.sql\", inputStream);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }", "signature": "void uploadFile()", "full_signature": "@Test void uploadFile()", "class_method_signature": "ReFtpClientTest.uploadFile()", "testcase": true, "constructor": false, "invocations": ["init", "connect", "substring", "lastIndexOf", "values", "equalsIgnoreCase", "getValue", "getType", "uploadFile", "printStackTrace"]}, "focal_class": {"identifier": "ReFtpClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReFtpClientConfig reFtpClientConfig;", "modifier": "private", "type": "ReFtpClientConfig", "declarator": "reFtpClientConfig", "var_name": "reFtpClientConfig"}, {"original_string": "private FTPClient ftpClient;", "modifier": "private", "type": "FTPClient", "declarator": "ftpClient", "var_name": "ftpClient"}], "methods": [{"identifier": "ReFtpClient", "parameters": "(ReFtpClientConfig reFtpClientConfig)", "modifiers": "public", "return": "", "signature": " ReFtpClient(ReFtpClientConfig reFtpClientConfig)", "full_signature": "public  ReFtpClient(ReFtpClientConfig reFtpClientConfig)", "class_method_signature": "ReFtpClient.ReFtpClient(ReFtpClientConfig reFtpClientConfig)", "testcase": false, "constructor": true}, {"identifier": "ReFtpClient", "parameters": "()", "modifiers": "public", "return": "", "signature": " ReFtpClient()", "full_signature": "public  ReFtpClient()", "class_method_signature": "ReFtpClient.ReFtpClient()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "ReFtpClient.init()", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void connect()", "full_signature": "public void connect()", "class_method_signature": "ReFtpClient.connect()", "testcase": false, "constructor": false}, {"identifier": "isActive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isActive()", "full_signature": "public boolean isActive()", "class_method_signature": "ReFtpClient.isActive()", "testcase": false, "constructor": false}, {"identifier": "disConnect", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void disConnect()", "full_signature": "public void disConnect()", "class_method_signature": "ReFtpClient.disConnect()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "ReFtpClient.destroy()", "testcase": false, "constructor": false}, {"identifier": "validateUploadFileParameters", "parameters": "(String filePath, String fileName, final InputStream input)", "modifiers": "private", "return": "void", "signature": "void validateUploadFileParameters(String filePath, String fileName, final InputStream input)", "full_signature": "private void validateUploadFileParameters(String filePath, String fileName, final InputStream input)", "class_method_signature": "ReFtpClient.validateUploadFileParameters(String filePath, String fileName, final InputStream input)", "testcase": false, "constructor": false}, {"identifier": "uploadFile", "parameters": "(String filePath, final String fileName, final byte[] b)", "modifiers": "public", "return": "boolean", "signature": "boolean uploadFile(String filePath, final String fileName, final byte[] b)", "full_signature": "public boolean uploadFile(String filePath, final String fileName, final byte[] b)", "class_method_signature": "ReFtpClient.uploadFile(String filePath, final String fileName, final byte[] b)", "testcase": false, "constructor": false}, {"identifier": "uploadFile", "parameters": "(MultipartFile multipartFile)", "modifiers": "public", "return": "boolean", "signature": "boolean uploadFile(MultipartFile multipartFile)", "full_signature": "public boolean uploadFile(MultipartFile multipartFile)", "class_method_signature": "ReFtpClient.uploadFile(MultipartFile multipartFile)", "testcase": false, "constructor": false}, {"identifier": "uploadFile", "parameters": "(String filePath, final String fileName, final InputStream input)", "modifiers": "public", "return": "boolean", "signature": "boolean uploadFile(String filePath, final String fileName, final InputStream input)", "full_signature": "public boolean uploadFile(String filePath, final String fileName, final InputStream input)", "class_method_signature": "ReFtpClient.uploadFile(String filePath, final String fileName, final InputStream input)", "testcase": false, "constructor": false}, {"identifier": "validateDownloadFileParameters", "parameters": "(String remotePath, String localPath, String[] fileNames)", "modifiers": "private", "return": "void", "signature": "void validateDownloadFileParameters(String remotePath, String localPath, String[] fileNames)", "full_signature": "private void validateDownloadFileParameters(String remotePath, String localPath, String[] fileNames)", "class_method_signature": "ReFtpClient.validateDownloadFileParameters(String remotePath, String localPath, String[] fileNames)", "testcase": false, "constructor": false}, {"identifier": "downloadFile", "parameters": "(String remotePath, String localPath, String fileName)", "modifiers": "public", "return": "Map<String, Boolean>", "signature": "Map<String, Boolean> downloadFile(String remotePath, String localPath, String fileName)", "full_signature": "public Map<String, Boolean> downloadFile(String remotePath, String localPath, String fileName)", "class_method_signature": "ReFtpClient.downloadFile(String remotePath, String localPath, String fileName)", "testcase": false, "constructor": false}, {"identifier": "downloadFile", "parameters": "(String remotePath, String localPath, String[] fileNames)", "modifiers": "public", "return": "Map<String, Boolean>", "signature": "Map<String, Boolean> downloadFile(String remotePath, String localPath, String[] fileNames)", "full_signature": "public Map<String, Boolean> downloadFile(String remotePath, String localPath, String[] fileNames)", "class_method_signature": "ReFtpClient.downloadFile(String remotePath, String localPath, String[] fileNames)", "testcase": false, "constructor": false}, {"identifier": "getCurrentDirectoryPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCurrentDirectoryPath()", "full_signature": "public String getCurrentDirectoryPath()", "class_method_signature": "ReFtpClient.getCurrentDirectoryPath()", "testcase": false, "constructor": false}, {"identifier": "changeWorkingDirectory", "parameters": "(final String path)", "modifiers": "public", "return": "void", "signature": "void changeWorkingDirectory(final String path)", "full_signature": "public void changeWorkingDirectory(final String path)", "class_method_signature": "ReFtpClient.changeWorkingDirectory(final String path)", "testcase": false, "constructor": false}, {"identifier": "changeToParentDirectory", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean changeToParentDirectory()", "full_signature": "public boolean changeToParentDirectory()", "class_method_signature": "ReFtpClient.changeToParentDirectory()", "testcase": false, "constructor": false}, {"identifier": "makeDirectory", "parameters": "(String dirName)", "modifiers": "public", "return": "boolean", "signature": "boolean makeDirectory(String dirName)", "full_signature": "public boolean makeDirectory(String dirName)", "class_method_signature": "ReFtpClient.makeDirectory(String dirName)", "testcase": false, "constructor": false}, {"identifier": "getFileSize", "parameters": "(final String fileName)", "modifiers": "public", "return": "long", "signature": "long getFileSize(final String fileName)", "full_signature": "public long getFileSize(final String fileName)", "class_method_signature": "ReFtpClient.getFileSize(final String fileName)", "testcase": false, "constructor": false}, {"identifier": "renameCurrentFile", "parameters": "(final String from, final String to)", "modifiers": "public", "return": "boolean", "signature": "boolean renameCurrentFile(final String from, final String to)", "full_signature": "public boolean renameCurrentFile(final String from, final String to)", "class_method_signature": "ReFtpClient.renameCurrentFile(final String from, final String to)", "testcase": false, "constructor": false}, {"identifier": "listCurrentDirectoryFileNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> listCurrentDirectoryFileNames()", "full_signature": "public List<String> listCurrentDirectoryFileNames()", "class_method_signature": "ReFtpClient.listCurrentDirectoryFileNames()", "testcase": false, "constructor": false}, {"identifier": "listCurrentDirectoryFiles", "parameters": "()", "modifiers": "public", "return": "List<FTPFile>", "signature": "List<FTPFile> listCurrentDirectoryFiles()", "full_signature": "public List<FTPFile> listCurrentDirectoryFiles()", "class_method_signature": "ReFtpClient.listCurrentDirectoryFiles()", "testcase": false, "constructor": false}, {"identifier": "deleteFile", "parameters": "(String dirPath, String name)", "modifiers": "public", "return": "boolean", "signature": "boolean deleteFile(String dirPath, String name)", "full_signature": "public boolean deleteFile(String dirPath, String name)", "class_method_signature": "ReFtpClient.deleteFile(String dirPath, String name)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "ReFtpClient.main(String[] args)", "testcase": false, "constructor": false}], "file": "re/src/main/java/cn/rootelement/ftp/ReFtpClient.java"}, "focal_method": {"identifier": "uploadFile", "parameters": "(String filePath, final String fileName, final byte[] b)", "modifiers": "public", "return": "boolean", "body": "public boolean uploadFile(String filePath, final String fileName, final byte[] b) throws IOException {\n        return uploadFile(filePath, fileName, new BufferedInputStream(new ByteArrayInputStream(b)));\n    }", "signature": "boolean uploadFile(String filePath, final String fileName, final byte[] b)", "full_signature": "public boolean uploadFile(String filePath, final String fileName, final byte[] b)", "class_method_signature": "ReFtpClient.uploadFile(String filePath, final String fileName, final byte[] b)", "testcase": false, "constructor": false, "invocations": ["uploadFile"]}, "repository": {"repo_id": 195232251, "url": "https://github.com/ljtnono/re", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 68910, "license": "licensed"}}