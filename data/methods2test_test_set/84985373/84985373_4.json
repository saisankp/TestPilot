{"test_class": {"identifier": "LorentzVectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "common-tools/clas-physics/src/test/java/org/jlab/clas/physics/LorentzVectorTest.java"}, "test_case": {"identifier": "testLorentzVector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testLorentzVector() {\n\t\tLorentzVector v = new LorentzVector(0.0, 0.0, 6.0, Math.sqrt(6.0*6.0 + 0.938*0.938));\n\t\tassertEquals(v.mass(), 0.938, 1e-6);\n\t\tassertEquals(v.theta(), 0.0, 1e-6);\n\t\tassertEquals(v.p(), 6.0, 1e-6);\n\t\tassertEquals(v.e(), Math.sqrt(6.0*6.0 + 0.938*0.938), 1e-6);\n\n\t\tv.setPxPyPzM(6.0, 0.0, 0.0, 0.000511);\n\t\tassertEquals(v.mass(), 0.000511, 1e-6);\n\t\tassertEquals(v.theta(), Math.PI/2.0, 1e-6);\n\t\tassertEquals(v.phi(), 0.0, 1e-6);\n\t\tassertEquals(v.p(), 6.0, 1e-6);\n\t\tassertEquals(v.e(), Math.sqrt(6.0*6.0 + 0.000511*0.000511), 1e-6);\n\n\t\tv.print();\n\t}", "signature": "void testLorentzVector()", "full_signature": "@Test public void testLorentzVector()", "class_method_signature": "LorentzVectorTest.testLorentzVector()", "testcase": true, "constructor": false, "invocations": ["sqrt", "assertEquals", "mass", "assertEquals", "theta", "assertEquals", "p", "assertEquals", "e", "sqrt", "setPxPyPzM", "assertEquals", "mass", "assertEquals", "theta", "assertEquals", "phi", "assertEquals", "p", "assertEquals", "e", "sqrt", "print"]}, "focal_class": {"identifier": "LorentzVector", "superclass": "", "interfaces": "", "fields": [{"original_string": "Vector3 vector;", "modifier": "", "type": "Vector3", "declarator": "vector", "var_name": "vector"}, {"original_string": "double energy;", "modifier": "", "type": "double", "declarator": "energy", "var_name": "energy"}], "methods": [{"identifier": "LorentzVector", "parameters": "()", "modifiers": "public", "return": "", "signature": " LorentzVector()", "full_signature": "public  LorentzVector()", "class_method_signature": "LorentzVector.LorentzVector()", "testcase": false, "constructor": true}, {"identifier": "LorentzVector", "parameters": "(LorentzVector v)", "modifiers": "public", "return": "", "signature": " LorentzVector(LorentzVector v)", "full_signature": "public  LorentzVector(LorentzVector v)", "class_method_signature": "LorentzVector.LorentzVector(LorentzVector v)", "testcase": false, "constructor": true}, {"identifier": "LorentzVector", "parameters": "(double px, double py, double pz, double en)", "modifiers": "public", "return": "", "signature": " LorentzVector(double px, double py, double pz, double en)", "full_signature": "public  LorentzVector(double px, double py, double pz, double en)", "class_method_signature": "LorentzVector.LorentzVector(double px, double py, double pz, double en)", "testcase": false, "constructor": true}, {"identifier": "setPxPyPzE", "parameters": "(double px, double py, double pz, double e)", "modifiers": "public", "return": "void", "signature": "void setPxPyPzE(double px, double py, double pz, double e)", "full_signature": "public void setPxPyPzE(double px, double py, double pz, double e)", "class_method_signature": "LorentzVector.setPxPyPzE(double px, double py, double pz, double e)", "testcase": false, "constructor": false}, {"identifier": "setPxPyPzM", "parameters": "(double px, double py, double pz, double m)", "modifiers": "public", "return": "void", "signature": "void setPxPyPzM(double px, double py, double pz, double m)", "full_signature": "public void setPxPyPzM(double px, double py, double pz, double m)", "class_method_signature": "LorentzVector.setPxPyPzM(double px, double py, double pz, double m)", "testcase": false, "constructor": false}, {"identifier": "setVectM", "parameters": "(Vector3 vect, double m)", "modifiers": "public", "return": "void", "signature": "void setVectM(Vector3 vect, double m)", "full_signature": "public void setVectM(Vector3 vect, double m)", "class_method_signature": "LorentzVector.setVectM(Vector3 vect, double m)", "testcase": false, "constructor": false}, {"identifier": "rotateX", "parameters": "(double angle)", "modifiers": "public", "return": "void", "signature": "void rotateX(double angle)", "full_signature": "public void rotateX(double angle)", "class_method_signature": "LorentzVector.rotateX(double angle)", "testcase": false, "constructor": false}, {"identifier": "rotateY", "parameters": "(double angle)", "modifiers": "public", "return": "void", "signature": "void rotateY(double angle)", "full_signature": "public void rotateY(double angle)", "class_method_signature": "LorentzVector.rotateY(double angle)", "testcase": false, "constructor": false}, {"identifier": "rotateZ", "parameters": "(double angle)", "modifiers": "public", "return": "void", "signature": "void rotateZ(double angle)", "full_signature": "public void rotateZ(double angle)", "class_method_signature": "LorentzVector.rotateZ(double angle)", "testcase": false, "constructor": false}, {"identifier": "px", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double px()", "full_signature": "public double px()", "class_method_signature": "LorentzVector.px()", "testcase": false, "constructor": false}, {"identifier": "py", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double py()", "full_signature": "public double py()", "class_method_signature": "LorentzVector.py()", "testcase": false, "constructor": false}, {"identifier": "pz", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double pz()", "full_signature": "public double pz()", "class_method_signature": "LorentzVector.pz()", "testcase": false, "constructor": false}, {"identifier": "p", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double p()", "full_signature": "public double p()", "class_method_signature": "LorentzVector.p()", "testcase": false, "constructor": false}, {"identifier": "theta", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double theta()", "full_signature": "public double theta()", "class_method_signature": "LorentzVector.theta()", "testcase": false, "constructor": false}, {"identifier": "phi", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double phi()", "full_signature": "public double phi()", "class_method_signature": "LorentzVector.phi()", "testcase": false, "constructor": false}, {"identifier": "mass2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double mass2()", "full_signature": "public double mass2()", "class_method_signature": "LorentzVector.mass2()", "testcase": false, "constructor": false}, {"identifier": "mass", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double mass()", "full_signature": "public double mass()", "class_method_signature": "LorentzVector.mass()", "testcase": false, "constructor": false}, {"identifier": "e", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double e()", "full_signature": "public double e()", "class_method_signature": "LorentzVector.e()", "testcase": false, "constructor": false}, {"identifier": "setE", "parameters": "(double e)", "modifiers": "", "return": "void", "signature": "void setE(double e)", "full_signature": " void setE(double e)", "class_method_signature": "LorentzVector.setE(double e)", "testcase": false, "constructor": false}, {"identifier": "boostVector", "parameters": "()", "modifiers": "public", "return": "Vector3", "signature": "Vector3 boostVector()", "full_signature": "public Vector3 boostVector()", "class_method_signature": "LorentzVector.boostVector()", "testcase": false, "constructor": false}, {"identifier": "boost", "parameters": "(double bx, double by, double bz)", "modifiers": "public", "return": "void", "signature": "void boost(double bx, double by, double bz)", "full_signature": "public void boost(double bx, double by, double bz)", "class_method_signature": "LorentzVector.boost(double bx, double by, double bz)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(LorentzVector vect)", "modifiers": "public", "return": "void", "signature": "void copy(LorentzVector vect)", "full_signature": "public void copy(LorentzVector vect)", "class_method_signature": "LorentzVector.copy(LorentzVector vect)", "testcase": false, "constructor": false}, {"identifier": "boost", "parameters": "(Vector3 vect)", "modifiers": "public", "return": "void", "signature": "void boost(Vector3 vect)", "full_signature": "public void boost(Vector3 vect)", "class_method_signature": "LorentzVector.boost(Vector3 vect)", "testcase": false, "constructor": false}, {"identifier": "vect", "parameters": "()", "modifiers": "public", "return": "Vector3", "signature": "Vector3 vect()", "full_signature": "public Vector3 vect()", "class_method_signature": "LorentzVector.vect()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(LorentzVector vLor)", "modifiers": "public", "return": "void", "signature": "void add(LorentzVector vLor)", "full_signature": "public void add(LorentzVector vLor)", "class_method_signature": "LorentzVector.add(LorentzVector vLor)", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "(LorentzVector vLor)", "modifiers": "public", "return": "void", "signature": "void sub(LorentzVector vLor)", "full_signature": "public void sub(LorentzVector vLor)", "class_method_signature": "LorentzVector.sub(LorentzVector vLor)", "testcase": false, "constructor": false}, {"identifier": "invert", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void invert()", "full_signature": "public void invert()", "class_method_signature": "LorentzVector.invert()", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void print()", "full_signature": "public void print()", "class_method_signature": "LorentzVector.print()", "testcase": false, "constructor": false}], "file": "common-tools/clas-physics/src/main/java/org/jlab/clas/physics/LorentzVector.java"}, "focal_method": {"identifier": "LorentzVector", "parameters": "()", "modifiers": "public", "return": "", "body": "public LorentzVector() {\n\t\tvector = new Vector3();\n\t\tenergy = 0.0;\n\t}", "signature": " LorentzVector()", "full_signature": "public  LorentzVector()", "class_method_signature": "LorentzVector.LorentzVector()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 84985373, "url": "https://github.com/JeffersonLab/clas12-offline-software", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 5, "size": 561666, "license": "licensed"}}