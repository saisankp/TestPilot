{"test_class": {"identifier": "RouteSearchTest", "superclass": "", "interfaces": "", "fields": [], "file": "encoder/src/test/java/openlr/encoder/routesearch/RouteSearchTest.java"}, "test_case": {"identifier": "testRouteSearch", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testRouteSearch() {\n        TestData td = TestData.getInstance();\n        Location loc = td.getRoute();\n        List<? extends Line> theRoute = loc.getLocationLines();\n        RouteSearchResult result = null;\n        try {\n            RouteSearch rs = new RouteSearch(theRoute);\n            result = rs.calculateRoute();\n        } catch (OpenLREncoderProcessingException e1) {\n            fail(\"Unexpected exception\", e1);\n        }\n        assertTrue(\"Route search failed for first calculation!\", result\n                .getResult() == RouteSearchResult.RouteSearchReturnCode.INTERMEDIATE_FOUND);\n        assertEquals(\"Wrong intermediate found!\", result.getIntermediate()\n                .getID(), td.getIntermediate().getID());\n        assertEquals(\"Wrong route length 1!\", result.getRouteLength(), td\n                .getRoutLength1());\n        List<? extends Line> rest = theRoute.subList(td.getIntermediatePos(),\n                theRoute.size());\n        try {\n            RouteSearch rs = new RouteSearch(rest);\n            result = rs.calculateRoute();\n\n            CommonObjectTestUtils.testToString(rs);\n        } catch (OpenLREncoderProcessingException e) {\n            fail(\"Unexpected exception\", e);\n        }\n        assertTrue(\"Route search failed for first calculation!\", result\n                .getResult() == RouteSearchResult.RouteSearchReturnCode.ROUTE_FOUND);\n        assertEquals(\"Wrong route length 2!\", result.getRouteLength(), td\n                .getRoutLength2());\n\n        //TODO calculate invalid route\n    }", "signature": "void testRouteSearch()", "full_signature": "@Test public final void testRouteSearch()", "class_method_signature": "RouteSearchTest.testRouteSearch()", "testcase": true, "constructor": false, "invocations": ["getInstance", "getRoute", "getLocationLines", "calculateRoute", "fail", "assertTrue", "getResult", "assertEquals", "getID", "getIntermediate", "getID", "getIntermediate", "assertEquals", "getRouteLength", "getRoutLength1", "subList", "getIntermediatePos", "size", "calculateRoute", "testToString", "fail", "assertTrue", "getResult", "assertEquals", "getRouteLength", "getRoutLength2"]}, "focal_class": {"identifier": "RouteSearch", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final FrcComparator FRC_COMPARATOR = new FunctionalRoadClass.FrcComparator();", "modifier": "private static final", "type": "FrcComparator", "declarator": "FRC_COMPARATOR = new FunctionalRoadClass.FrcComparator()", "var_name": "FRC_COMPARATOR"}, {"original_string": "private static final Logger LOG = Logger.getLogger(RouteSearch.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(RouteSearch.class)", "var_name": "LOG"}, {"original_string": "private final List<? extends Line> location;", "modifier": "private final", "type": "List<? extends Line>", "declarator": "location", "var_name": "location"}, {"original_string": "private final Line startLine;", "modifier": "private final", "type": "Line", "declarator": "startLine", "var_name": "startLine"}, {"original_string": "private final Line destLine;", "modifier": "private final", "type": "Line", "declarator": "destLine", "var_name": "destLine"}, {"original_string": "private final int startLoopIndex;", "modifier": "private final", "type": "int", "declarator": "startLoopIndex", "var_name": "startLoopIndex"}, {"original_string": "private final int endLoopIndex;", "modifier": "private final", "type": "int", "declarator": "endLoopIndex", "var_name": "endLoopIndex"}, {"original_string": "private double destX = 0;", "modifier": "private", "type": "double", "declarator": "destX = 0", "var_name": "destX"}, {"original_string": "private double destY = 0;", "modifier": "private", "type": "double", "declarator": "destY = 0", "var_name": "destY"}, {"original_string": "private int lengthBetweenStartAndEndLineAlongLocation = 0;", "modifier": "private", "type": "int", "declarator": "lengthBetweenStartAndEndLineAlongLocation = 0", "var_name": "lengthBetweenStartAndEndLineAlongLocation"}], "methods": [{"identifier": "RouteSearch", "parameters": "(final List<? extends Line> loc)", "modifiers": "public", "return": "", "signature": " RouteSearch(final List<? extends Line> loc)", "full_signature": "public  RouteSearch(final List<? extends Line> loc)", "class_method_signature": "RouteSearch.RouteSearch(final List<? extends Line> loc)", "testcase": false, "constructor": true}, {"identifier": "checkLoopAtStart", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int checkLoopAtStart()", "full_signature": "private int checkLoopAtStart()", "class_method_signature": "RouteSearch.checkLoopAtStart()", "testcase": false, "constructor": false}, {"identifier": "checkLoopAtEnd", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int checkLoopAtEnd()", "full_signature": "private int checkLoopAtEnd()", "class_method_signature": "RouteSearch.checkLoopAtEnd()", "testcase": false, "constructor": false}, {"identifier": "calculateRoute", "parameters": "()", "modifiers": "public final", "return": "RouteSearchResult", "signature": "RouteSearchResult calculateRoute()", "full_signature": "public final RouteSearchResult calculateRoute()", "class_method_signature": "RouteSearch.calculateRoute()", "testcase": false, "constructor": false}, {"identifier": "extractNextLines", "parameters": "(final PQElem actualElement,\n                                  final RouteSearchData data)", "modifiers": "private", "return": "void", "signature": "void extractNextLines(final PQElem actualElement,\n                                  final RouteSearchData data)", "full_signature": "private void extractNextLines(final PQElem actualElement,\n                                  final RouteSearchData data)", "class_method_signature": "RouteSearch.extractNextLines(final PQElem actualElement,\n                                  final RouteSearchData data)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String toString()", "full_signature": "@Override public final String toString()", "class_method_signature": "RouteSearch.toString()", "testcase": false, "constructor": false}], "file": "encoder/src/main/java/openlr/encoder/routesearch/RouteSearch.java"}, "focal_method": {"identifier": "RouteSearch", "parameters": "(final List<? extends Line> loc)", "modifiers": "public", "return": "", "body": "public RouteSearch(final List<? extends Line> loc)\n            throws OpenLREncoderProcessingException {\n        location = loc;\n        if (location == null || location.isEmpty()) {\n            throw new OpenLREncoderProcessingException(\n                    EncoderProcessingError.ROUTE_CONSTRUCTION_ERROR);\n        }\n        startLine = location.get(0);\n        destLine = location.get(location.size() - 1);\n        for (int routeIndex = 0; routeIndex < location.size(); ++routeIndex) {\n            lengthBetweenStartAndEndLineAlongLocation += location.get(routeIndex).getLineLength();\n        }\n        startLoopIndex = checkLoopAtStart();\n        endLoopIndex = checkLoopAtEnd();\n    }", "signature": " RouteSearch(final List<? extends Line> loc)", "full_signature": "public  RouteSearch(final List<? extends Line> loc)", "class_method_signature": "RouteSearch.RouteSearch(final List<? extends Line> loc)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}