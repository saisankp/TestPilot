{"test_class": {"identifier": "TestBootstrapCheckpointHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[] ONE_SOURCE = {\"source1\"};", "modifier": "private static final", "type": "String[]", "declarator": "ONE_SOURCE = {\"source1\"}", "var_name": "ONE_SOURCE"}, {"original_string": "private static final List<String> TWO_SOURCES = Arrays.asList(\"source1\", \"source2\");", "modifier": "private static final", "type": "List<String>", "declarator": "TWO_SOURCES = Arrays.asList(\"source1\", \"source2\")", "var_name": "TWO_SOURCES"}, {"original_string": "private static final String[] THREE_SOURCES = {\"Source1\", \"Source2\", \"Source3\"};", "modifier": "private static final", "type": "String[]", "declarator": "THREE_SOURCES = {\"Source1\", \"Source2\", \"Source3\"}", "var_name": "THREE_SOURCES"}, {"original_string": "private static final String[] MANY_SOURCES = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"};", "modifier": "private static final", "type": "String[]", "declarator": "MANY_SOURCES = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"}", "var_name": "MANY_SOURCES"}], "file": "databus-core/databus-core-impl/src/test/java/com/linkedin/databus/core/TestBootstrapCheckpointHandler.java"}, "test_case": {"identifier": "testAdvanceAfterTargetScn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAdvanceAfterTargetScn()\n  {\n    BootstrapCheckpointHandler handler = new BootstrapCheckpointHandler(ONE_SOURCE);\n    Checkpoint cp1 = handler.createInitialBootstrapCheckpoint(null, 100L);\n\n    assertStartBootstrapCheckpoint(handler, cp1, ONE_SOURCE[0], 100L);\n    cp1.setBootstrapStartScn(200L);\n\n    //now finalize the snapshot phase\n    handler.finalizeSnapshotPhase(cp1);\n    assertSnapshotCompleteCheckpoint(handler, cp1, 0, ONE_SOURCE[0]);\n    Assert.assertTrue(cp1.isSnapShotSourceCompleted());\n\n    //now advance to next phase -- catchup\n    handler.advanceAfterSnapshotPhase(cp1);\n    assertAfterSnapshotCheckpoint(cp1, 1, Checkpoint.NO_SOURCE_NAME);\n    Assert.assertTrue(cp1.isSnapShotSourceCompleted());\n    Assert.assertTrue(!handler.needsMoreSnapshot(cp1));\n\n    //try to set an invalid targetSCN (< startSCN)\n    try\n    {\n      cp1.setBootstrapTargetScn(100L);\n      Assert.fail(\"InvalidCheckpointException expected\");\n    }\n    catch (InvalidCheckpointException e)\n    {\n      //OK\n    }\n\n    //try to setup -1 as targetScn\n    try\n    {\n      cp1.setBootstrapTargetScn(Checkpoint.UNSET_BOOTSTRAP_TARGET_SCN);\n      handler.advanceAfterTargetScn(cp1);\n      Assert.fail(\"InvalidCheckpointException expected\");\n    }\n    catch (InvalidCheckpointException e)\n    {\n      //OK\n    }\n\n    cp1.setBootstrapTargetScn(200L);\n    handler.advanceAfterTargetScn(cp1);\n    Assert.assertEquals(DbusClientMode.BOOTSTRAP_CATCHUP, cp1.getConsumptionMode());\n    Assert.assertEquals(cp1.getWindowOffset().longValue(), 0L);\n    Assert.assertEquals(cp1.getWindowScn(), cp1.getBootstrapStartScn().longValue());\n  }", "signature": "void testAdvanceAfterTargetScn()", "full_signature": "@Test public void testAdvanceAfterTargetScn()", "class_method_signature": "TestBootstrapCheckpointHandler.testAdvanceAfterTargetScn()", "testcase": true, "constructor": false, "invocations": ["createInitialBootstrapCheckpoint", "assertStartBootstrapCheckpoint", "setBootstrapStartScn", "finalizeSnapshotPhase", "assertSnapshotCompleteCheckpoint", "assertTrue", "isSnapShotSourceCompleted", "advanceAfterSnapshotPhase", "assertAfterSnapshotCheckpoint", "assertTrue", "isSnapShotSourceCompleted", "assertTrue", "needsMoreSnapshot", "setBootstrapTargetScn", "fail", "setBootstrapTargetScn", "advanceAfterTargetScn", "fail", "setBootstrapTargetScn", "advanceAfterTargetScn", "assertEquals", "getConsumptionMode", "assertEquals", "longValue", "getWindowOffset", "assertEquals", "getWindowScn", "longValue", "getBootstrapStartScn"]}, "focal_class": {"identifier": "BootstrapCheckpointHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String[] _sourceNames;", "modifier": "private", "type": "String[]", "declarator": "_sourceNames", "var_name": "_sourceNames"}], "methods": [{"identifier": "BootstrapCheckpointHandler", "parameters": "(List<String> sourceNames)", "modifiers": "public", "return": "", "signature": " BootstrapCheckpointHandler(List<String> sourceNames)", "full_signature": "public  BootstrapCheckpointHandler(List<String> sourceNames)", "class_method_signature": "BootstrapCheckpointHandler.BootstrapCheckpointHandler(List<String> sourceNames)", "testcase": false, "constructor": true}, {"identifier": "BootstrapCheckpointHandler", "parameters": "(String... sourceNames)", "modifiers": "public", "return": "", "signature": " BootstrapCheckpointHandler(String... sourceNames)", "full_signature": "public  BootstrapCheckpointHandler(String... sourceNames)", "class_method_signature": "BootstrapCheckpointHandler.BootstrapCheckpointHandler(String... sourceNames)", "testcase": false, "constructor": true}, {"identifier": "setSourceNames", "parameters": "(List<String> sourceNames)", "modifiers": "public", "return": "void", "signature": "void setSourceNames(List<String> sourceNames)", "full_signature": "public void setSourceNames(List<String> sourceNames)", "class_method_signature": "BootstrapCheckpointHandler.setSourceNames(List<String> sourceNames)", "testcase": false, "constructor": false}, {"identifier": "needsMoreCatchup", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "boolean", "signature": "boolean needsMoreCatchup(Checkpoint ckpt)", "full_signature": "public boolean needsMoreCatchup(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.needsMoreCatchup(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "needsMoreSnapshot", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "boolean", "signature": "boolean needsMoreSnapshot(Checkpoint ckpt)", "full_signature": "public boolean needsMoreSnapshot(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.needsMoreSnapshot(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "createInitialBootstrapCheckpoint", "parameters": "(Checkpoint ckpt, Long sinceScn)", "modifiers": "public", "return": "Checkpoint", "signature": "Checkpoint createInitialBootstrapCheckpoint(Checkpoint ckpt, Long sinceScn)", "full_signature": "public Checkpoint createInitialBootstrapCheckpoint(Checkpoint ckpt, Long sinceScn)", "class_method_signature": "BootstrapCheckpointHandler.createInitialBootstrapCheckpoint(Checkpoint ckpt, Long sinceScn)", "testcase": false, "constructor": false}, {"identifier": "needsMoreCowbell", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "boolean", "signature": "boolean needsMoreCowbell(Checkpoint ckpt)", "full_signature": "public boolean needsMoreCowbell(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.needsMoreCowbell(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "finalizeSnapshotPhase", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "void", "signature": "void finalizeSnapshotPhase(Checkpoint ckpt)", "full_signature": "public void finalizeSnapshotPhase(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.finalizeSnapshotPhase(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "finalizeCatchupPhase", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "void", "signature": "void finalizeCatchupPhase(Checkpoint ckpt)", "full_signature": "public void finalizeCatchupPhase(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.finalizeCatchupPhase(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "advanceAfterSnapshotPhase", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "void", "signature": "void advanceAfterSnapshotPhase(Checkpoint ckpt)", "full_signature": "public void advanceAfterSnapshotPhase(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.advanceAfterSnapshotPhase(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "advanceAfterCatchupPhase", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "void", "signature": "void advanceAfterCatchupPhase(Checkpoint ckpt)", "full_signature": "public void advanceAfterCatchupPhase(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.advanceAfterCatchupPhase(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "advanceAfterTargetScn", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "void", "signature": "void advanceAfterTargetScn(Checkpoint ckpt)", "full_signature": "public void advanceAfterTargetScn(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.advanceAfterTargetScn(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "assertBootstrapCheckpoint", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "boolean", "signature": "boolean assertBootstrapCheckpoint(Checkpoint ckpt)", "full_signature": "public boolean assertBootstrapCheckpoint(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.assertBootstrapCheckpoint(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "resetForServerChange", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "void", "signature": "void resetForServerChange(Checkpoint ckpt)", "full_signature": "public void resetForServerChange(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.resetForServerChange(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "startCatchupSource", "parameters": "(Checkpoint ckpt)", "modifiers": "private", "return": "void", "signature": "void startCatchupSource(Checkpoint ckpt)", "full_signature": "private void startCatchupSource(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.startCatchupSource(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "startNextSnapshotSource", "parameters": "(Checkpoint ckpt)", "modifiers": "private", "return": "void", "signature": "void startNextSnapshotSource(Checkpoint ckpt)", "full_signature": "private void startNextSnapshotSource(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.startNextSnapshotSource(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "assertSnapshotCheckpoint", "parameters": "(Checkpoint ckpt)", "modifiers": "private", "return": "boolean", "signature": "boolean assertSnapshotCheckpoint(Checkpoint ckpt)", "full_signature": "private boolean assertSnapshotCheckpoint(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.assertSnapshotCheckpoint(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "validateSnapshotSourceIndex", "parameters": "(int snapshotSourceIndex, Checkpoint ckpt)", "modifiers": "private", "return": "void", "signature": "void validateSnapshotSourceIndex(int snapshotSourceIndex, Checkpoint ckpt)", "full_signature": "private void validateSnapshotSourceIndex(int snapshotSourceIndex, Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.validateSnapshotSourceIndex(int snapshotSourceIndex, Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "assertSnapshotSourceIndex", "parameters": "(Checkpoint ckpt)", "modifiers": "private", "return": "void", "signature": "void assertSnapshotSourceIndex(Checkpoint ckpt)", "full_signature": "private void assertSnapshotSourceIndex(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.assertSnapshotSourceIndex(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "assertCatchupCheckpoint", "parameters": "(Checkpoint ckpt)", "modifiers": "private", "return": "boolean", "signature": "boolean assertCatchupCheckpoint(Checkpoint ckpt)", "full_signature": "private boolean assertCatchupCheckpoint(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.assertCatchupCheckpoint(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "assertCatchupSourceIndex", "parameters": "(Checkpoint ckpt)", "modifiers": "private", "return": "void", "signature": "void assertCatchupSourceIndex(Checkpoint ckpt)", "full_signature": "private void assertCatchupSourceIndex(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.assertCatchupSourceIndex(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "setCatchupSource", "parameters": "(Checkpoint ckpt, int catchupSourceIndex)", "modifiers": "private", "return": "void", "signature": "void setCatchupSource(Checkpoint ckpt, int catchupSourceIndex)", "full_signature": "private void setCatchupSource(Checkpoint ckpt, int catchupSourceIndex)", "class_method_signature": "BootstrapCheckpointHandler.setCatchupSource(Checkpoint ckpt, int catchupSourceIndex)", "testcase": false, "constructor": false}, {"identifier": "setSnapshotSource", "parameters": "(Checkpoint ckpt, int snapshotSourceIndex)", "modifiers": "private", "return": "void", "signature": "void setSnapshotSource(Checkpoint ckpt, int snapshotSourceIndex)", "full_signature": "private void setSnapshotSource(Checkpoint ckpt, int snapshotSourceIndex)", "class_method_signature": "BootstrapCheckpointHandler.setSnapshotSource(Checkpoint ckpt, int snapshotSourceIndex)", "testcase": false, "constructor": false}, {"identifier": "getSourcesNamesListLength", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getSourcesNamesListLength()", "full_signature": "private int getSourcesNamesListLength()", "class_method_signature": "BootstrapCheckpointHandler.getSourcesNamesListLength()", "testcase": false, "constructor": false}, {"identifier": "setStartScnAfterServerChange", "parameters": "(Checkpoint ckpt, Long startScn)", "modifiers": "public", "return": "void", "signature": "void setStartScnAfterServerChange(Checkpoint ckpt, Long startScn)", "full_signature": "public void setStartScnAfterServerChange(Checkpoint ckpt, Long startScn)", "class_method_signature": "BootstrapCheckpointHandler.setStartScnAfterServerChange(Checkpoint ckpt, Long startScn)", "testcase": false, "constructor": false}], "file": "databus-core/databus-core-impl/src/main/java/com/linkedin/databus/core/BootstrapCheckpointHandler.java"}, "focal_method": {"identifier": "advanceAfterTargetScn", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "void", "body": "public void advanceAfterTargetScn(Checkpoint ckpt)\n  {\n    assertBootstrapCheckpoint(ckpt);\n    if (! ckpt.isBootstrapTargetScnSet())\n    {\n      throw new InvalidCheckpointException(\"bootstrap_target_scn must be set\", ckpt);\n    }\n    if (0 != ckpt.getBootstrapCatchupSourceIndex())\n    {\n      throw new InvalidCheckpointException(\"bootstrap_catchup_source_index must be 0\", ckpt);\n    }\n\n    startCatchupSource(ckpt);\n  }", "signature": "void advanceAfterTargetScn(Checkpoint ckpt)", "full_signature": "public void advanceAfterTargetScn(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.advanceAfterTargetScn(Checkpoint ckpt)", "testcase": false, "constructor": false, "invocations": ["assertBootstrapCheckpoint", "isBootstrapTargetScnSet", "getBootstrapCatchupSourceIndex", "startCatchupSource"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}