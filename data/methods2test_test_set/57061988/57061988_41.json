{"test_class": {"identifier": "SignedCertificateGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int expectedDurationInDays = 10;", "modifier": "private final", "type": "int", "declarator": "expectedDurationInDays = 10", "var_name": "expectedDurationInDays"}, {"original_string": "private final String caName = \"CN=ca DN,O=credhub\";", "modifier": "private final", "type": "String", "declarator": "caName = \"CN=ca DN,O=credhub\"", "var_name": "caName"}, {"original_string": "private final String expectedCertificateCommonName = \"my cert name\";", "modifier": "private final", "type": "String", "declarator": "expectedCertificateCommonName = \"my cert name\"", "var_name": "expectedCertificateCommonName"}, {"original_string": "private final String[] alternateNames = {\"alt1\", \"alt2\"};", "modifier": "private final", "type": "String[]", "declarator": "alternateNames = {\"alt1\", \"alt2\"}", "var_name": "alternateNames"}, {"original_string": "private final String[] keyUsage = {DIGITAL_SIGNATURE, KEY_ENCIPHERMENT};", "modifier": "private final", "type": "String[]", "declarator": "keyUsage = {DIGITAL_SIGNATURE, KEY_ENCIPHERMENT}", "var_name": "keyUsage"}, {"original_string": "private final String[] extendedKeyUsage = {SERVER_AUTH, CODE_SIGNING};", "modifier": "private final", "type": "String[]", "declarator": "extendedKeyUsage = {SERVER_AUTH, CODE_SIGNING}", "var_name": "extendedKeyUsage"}, {"original_string": "private SignedCertificateGenerator subject;", "modifier": "private", "type": "SignedCertificateGenerator", "declarator": "subject", "var_name": "subject"}, {"original_string": "private X500Principal issuerDn;", "modifier": "private", "type": "X500Principal", "declarator": "issuerDn", "var_name": "issuerDn"}, {"original_string": "private KeyPair issuerKey;", "modifier": "private", "type": "KeyPair", "declarator": "issuerKey", "var_name": "issuerKey"}, {"original_string": "private KeyPair generatedCertificateKeyPair;", "modifier": "private", "type": "KeyPair", "declarator": "generatedCertificateKeyPair", "var_name": "generatedCertificateKeyPair"}, {"original_string": "private CertificateGenerationParameters certificateGenerationParameters;", "modifier": "private", "type": "CertificateGenerationParameters", "declarator": "certificateGenerationParameters", "var_name": "certificateGenerationParameters"}, {"original_string": "private KeyPairGenerator generator;", "modifier": "private", "type": "KeyPairGenerator", "declarator": "generator", "var_name": "generator"}, {"original_string": "private RandomSerialNumberGenerator serialNumberGenerator;", "modifier": "private", "type": "RandomSerialNumberGenerator", "declarator": "serialNumberGenerator", "var_name": "serialNumberGenerator"}, {"original_string": "private CurrentTimeProvider timeProvider;", "modifier": "private", "type": "CurrentTimeProvider", "declarator": "timeProvider", "var_name": "timeProvider"}, {"original_string": "private Instant now;", "modifier": "private", "type": "Instant", "declarator": "now", "var_name": "now"}, {"original_string": "private Instant later;", "modifier": "private", "type": "Instant", "declarator": "later", "var_name": "later"}, {"original_string": "private byte[] expectedSubjectKeyIdentifier;", "modifier": "private", "type": "byte[]", "declarator": "expectedSubjectKeyIdentifier", "var_name": "expectedSubjectKeyIdentifier"}, {"original_string": "@Autowired\n  private JcaContentSignerBuilder jcaContentSignerBuilder;", "modifier": "@Autowired\n  private", "type": "JcaContentSignerBuilder", "declarator": "jcaContentSignerBuilder", "var_name": "jcaContentSignerBuilder"}, {"original_string": "@Autowired\n  private JcaX509CertificateConverter jcaX509CertificateConverter;", "modifier": "@Autowired\n  private", "type": "JcaX509CertificateConverter", "declarator": "jcaX509CertificateConverter", "var_name": "jcaX509CertificateConverter"}, {"original_string": "private JcaX509ExtensionUtils jcaX509ExtensionUtils;", "modifier": "private", "type": "JcaX509ExtensionUtils", "declarator": "jcaX509ExtensionUtils", "var_name": "jcaX509ExtensionUtils"}, {"original_string": "private SubjectKeyIdentifier caSubjectKeyIdentifier;", "modifier": "private", "type": "SubjectKeyIdentifier", "declarator": "caSubjectKeyIdentifier", "var_name": "caSubjectKeyIdentifier"}, {"original_string": "private X509Certificate certificateAuthority;", "modifier": "private", "type": "X509Certificate", "declarator": "certificateAuthority", "var_name": "certificateAuthority"}, {"original_string": "private X509Certificate certificateAuthorityWithSubjectKeyId;", "modifier": "private", "type": "X509Certificate", "declarator": "certificateAuthorityWithSubjectKeyId", "var_name": "certificateAuthorityWithSubjectKeyId"}, {"original_string": "private BigInteger caSerialNumber;", "modifier": "private", "type": "BigInteger", "declarator": "caSerialNumber", "var_name": "caSerialNumber"}], "file": "components/credentials/src/test/java/org/cloudfoundry/credhub/generators/SignedCertificateGeneratorTest.java"}, "test_case": {"identifier": "getSignedByIssuer_setsExtendedKeyUsage_ifPresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getSignedByIssuer_setsExtendedKeyUsage_ifPresent() throws Exception {\n    X509Certificate generatedCertificate = subject\n      .getSignedByIssuer(generatedCertificateKeyPair, certificateGenerationParameters,\n        certificateAuthorityWithSubjectKeyId, issuerKey.getPrivate());\n\n    assertThat(generatedCertificate.getExtensionValue(Extension.keyUsage.getId()), nullValue());\n\n    certificateGenerationParameters = parametersContainsExtensions();\n\n    generatedCertificate = subject\n      .getSignedByIssuer(generatedCertificateKeyPair, certificateGenerationParameters,\n        certificateAuthorityWithSubjectKeyId, issuerKey.getPrivate());\n    final byte[] actualKeyUsage = generatedCertificate.getExtensionValue(Extension.extendedKeyUsage.getId());\n\n    assertThat(Arrays.copyOfRange(actualKeyUsage, 2, actualKeyUsage.length),\n      equalTo(certificateGenerationParameters.getExtendedKeyUsage().getEncoded()));\n  }", "signature": "void getSignedByIssuer_setsExtendedKeyUsage_ifPresent()", "full_signature": "@Test public void getSignedByIssuer_setsExtendedKeyUsage_ifPresent()", "class_method_signature": "SignedCertificateGeneratorTest.getSignedByIssuer_setsExtendedKeyUsage_ifPresent()", "testcase": true, "constructor": false, "invocations": ["getSignedByIssuer", "getPrivate", "assertThat", "getExtensionValue", "getId", "nullValue", "parametersContainsExtensions", "getSignedByIssuer", "getPrivate", "getExtensionValue", "getId", "assertThat", "copyOfRange", "equalTo", "getEncoded", "getExtendedKeyUsage"]}, "focal_class": {"identifier": "SignedCertificateGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CurrentTimeProvider timeProvider;", "modifier": "private final", "type": "CurrentTimeProvider", "declarator": "timeProvider", "var_name": "timeProvider"}, {"original_string": "private final RandomSerialNumberGenerator serialNumberGenerator;", "modifier": "private final", "type": "RandomSerialNumberGenerator", "declarator": "serialNumberGenerator", "var_name": "serialNumberGenerator"}, {"original_string": "private final JcaX509ExtensionUtils jcaX509ExtensionUtils;", "modifier": "private final", "type": "JcaX509ExtensionUtils", "declarator": "jcaX509ExtensionUtils", "var_name": "jcaX509ExtensionUtils"}, {"original_string": "private final JcaContentSignerBuilder jcaContentSignerBuilder;", "modifier": "private final", "type": "JcaContentSignerBuilder", "declarator": "jcaContentSignerBuilder", "var_name": "jcaContentSignerBuilder"}, {"original_string": "private final JcaX509CertificateConverter jcaX509CertificateConverter;", "modifier": "private final", "type": "JcaX509CertificateConverter", "declarator": "jcaX509CertificateConverter", "var_name": "jcaX509CertificateConverter"}], "methods": [{"identifier": "SignedCertificateGenerator", "parameters": "(\n    final CurrentTimeProvider timeProvider,\n    final RandomSerialNumberGenerator serialNumberGenerator,\n    final JcaContentSignerBuilder jcaContentSignerBuilder,\n    final JcaX509CertificateConverter jcaX509CertificateConverter\n  )", "modifiers": "@Autowired", "return": "", "signature": " SignedCertificateGenerator(\n    final CurrentTimeProvider timeProvider,\n    final RandomSerialNumberGenerator serialNumberGenerator,\n    final JcaContentSignerBuilder jcaContentSignerBuilder,\n    final JcaX509CertificateConverter jcaX509CertificateConverter\n  )", "full_signature": "@Autowired  SignedCertificateGenerator(\n    final CurrentTimeProvider timeProvider,\n    final RandomSerialNumberGenerator serialNumberGenerator,\n    final JcaContentSignerBuilder jcaContentSignerBuilder,\n    final JcaX509CertificateConverter jcaX509CertificateConverter\n  )", "class_method_signature": "SignedCertificateGenerator.SignedCertificateGenerator(\n    final CurrentTimeProvider timeProvider,\n    final RandomSerialNumberGenerator serialNumberGenerator,\n    final JcaContentSignerBuilder jcaContentSignerBuilder,\n    final JcaX509CertificateConverter jcaX509CertificateConverter\n  )", "testcase": false, "constructor": true}, {"identifier": "getSelfSigned", "parameters": "(final KeyPair keyPair, final CertificateGenerationParameters params)", "modifiers": "public", "return": "X509Certificate", "signature": "X509Certificate getSelfSigned(final KeyPair keyPair, final CertificateGenerationParameters params)", "full_signature": "public X509Certificate getSelfSigned(final KeyPair keyPair, final CertificateGenerationParameters params)", "class_method_signature": "SignedCertificateGenerator.getSelfSigned(final KeyPair keyPair, final CertificateGenerationParameters params)", "testcase": false, "constructor": false}, {"identifier": "getSignedByIssuer", "parameters": "(\n    final KeyPair keyPair,\n    final CertificateGenerationParameters params,\n    final X509Certificate caCertificate,\n    final PrivateKey caPrivateKey)", "modifiers": "public", "return": "X509Certificate", "signature": "X509Certificate getSignedByIssuer(\n    final KeyPair keyPair,\n    final CertificateGenerationParameters params,\n    final X509Certificate caCertificate,\n    final PrivateKey caPrivateKey)", "full_signature": "public X509Certificate getSignedByIssuer(\n    final KeyPair keyPair,\n    final CertificateGenerationParameters params,\n    final X509Certificate caCertificate,\n    final PrivateKey caPrivateKey)", "class_method_signature": "SignedCertificateGenerator.getSignedByIssuer(\n    final KeyPair keyPair,\n    final CertificateGenerationParameters params,\n    final X509Certificate caCertificate,\n    final PrivateKey caPrivateKey)", "testcase": false, "constructor": false}, {"identifier": "getSignedByIssuer", "parameters": "(\n    final X509Certificate issuerCertificate,\n    final PrivateKey issuerKey,\n    final X500Principal issuerDn,\n    final SubjectKeyIdentifier caSubjectKeyIdentifier,\n    final KeyPair keyPair,\n    final   CertificateGenerationParameters params)", "modifiers": "private", "return": "X509Certificate", "signature": "X509Certificate getSignedByIssuer(\n    final X509Certificate issuerCertificate,\n    final PrivateKey issuerKey,\n    final X500Principal issuerDn,\n    final SubjectKeyIdentifier caSubjectKeyIdentifier,\n    final KeyPair keyPair,\n    final   CertificateGenerationParameters params)", "full_signature": "private X509Certificate getSignedByIssuer(\n    final X509Certificate issuerCertificate,\n    final PrivateKey issuerKey,\n    final X500Principal issuerDn,\n    final SubjectKeyIdentifier caSubjectKeyIdentifier,\n    final KeyPair keyPair,\n    final   CertificateGenerationParameters params)", "class_method_signature": "SignedCertificateGenerator.getSignedByIssuer(\n    final X509Certificate issuerCertificate,\n    final PrivateKey issuerKey,\n    final X500Principal issuerDn,\n    final SubjectKeyIdentifier caSubjectKeyIdentifier,\n    final KeyPair keyPair,\n    final   CertificateGenerationParameters params)", "testcase": false, "constructor": false}, {"identifier": "getSubjectKeyIdentifierFromKeyInfo", "parameters": "(final PublicKey publicKey)", "modifiers": "private", "return": "SubjectKeyIdentifier", "signature": "SubjectKeyIdentifier getSubjectKeyIdentifierFromKeyInfo(final PublicKey publicKey)", "full_signature": "private SubjectKeyIdentifier getSubjectKeyIdentifierFromKeyInfo(final PublicKey publicKey)", "class_method_signature": "SignedCertificateGenerator.getSubjectKeyIdentifierFromKeyInfo(final PublicKey publicKey)", "testcase": false, "constructor": false}, {"identifier": "getSubjectNameFrom", "parameters": "(final X509Certificate certificate)", "modifiers": "private", "return": "X500Principal", "signature": "X500Principal getSubjectNameFrom(final X509Certificate certificate)", "full_signature": "private X500Principal getSubjectNameFrom(final X509Certificate certificate)", "class_method_signature": "SignedCertificateGenerator.getSubjectNameFrom(final X509Certificate certificate)", "testcase": false, "constructor": false}, {"identifier": "getSubjectKeyIdentifierFrom", "parameters": "(final X509Certificate certificate)", "modifiers": "private", "return": "SubjectKeyIdentifier", "signature": "SubjectKeyIdentifier getSubjectKeyIdentifierFrom(final X509Certificate certificate)", "full_signature": "private SubjectKeyIdentifier getSubjectKeyIdentifierFrom(final X509Certificate certificate)", "class_method_signature": "SignedCertificateGenerator.getSubjectKeyIdentifierFrom(final X509Certificate certificate)", "testcase": false, "constructor": false}], "file": "components/credentials/src/main/java/org/cloudfoundry/credhub/generators/SignedCertificateGenerator.java"}, "focal_method": {"identifier": "getSignedByIssuer", "parameters": "(\n    final KeyPair keyPair,\n    final CertificateGenerationParameters params,\n    final X509Certificate caCertificate,\n    final PrivateKey caPrivateKey)", "modifiers": "public", "return": "X509Certificate", "body": "public X509Certificate getSignedByIssuer(\n    final KeyPair keyPair,\n    final CertificateGenerationParameters params,\n    final X509Certificate caCertificate,\n    final PrivateKey caPrivateKey) throws Exception {\n    return getSignedByIssuer(\n      caCertificate,\n      caPrivateKey,\n      getSubjectNameFrom(caCertificate),\n      getSubjectKeyIdentifierFrom(caCertificate), keyPair,\n      params\n    );\n  }", "signature": "X509Certificate getSignedByIssuer(\n    final KeyPair keyPair,\n    final CertificateGenerationParameters params,\n    final X509Certificate caCertificate,\n    final PrivateKey caPrivateKey)", "full_signature": "public X509Certificate getSignedByIssuer(\n    final KeyPair keyPair,\n    final CertificateGenerationParameters params,\n    final X509Certificate caCertificate,\n    final PrivateKey caPrivateKey)", "class_method_signature": "SignedCertificateGenerator.getSignedByIssuer(\n    final KeyPair keyPair,\n    final CertificateGenerationParameters params,\n    final X509Certificate caCertificate,\n    final PrivateKey caPrivateKey)", "testcase": false, "constructor": false, "invocations": ["getSignedByIssuer", "getSubjectNameFrom", "getSubjectKeyIdentifierFrom"]}, "repository": {"repo_id": 57061988, "url": "https://github.com/cloudfoundry-incubator/credhub", "stars": 167, "created": "4/25/2016 5:30:51 PM +00:00", "updates": "2020-01-27T21:31:19+00:00", "fork": "False", "license": "licensed"}}