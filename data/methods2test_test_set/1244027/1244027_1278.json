{"test_class": {"identifier": "LocalEnvironmentTest", "superclass": "", "interfaces": "", "fields": [], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/LocalEnvironmentTest.java"}, "test_case": {"identifier": "shouldStartRepositoryUsingLocalEnvironmentWithDefaultPersistenceConfiguration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldStartRepositoryUsingLocalEnvironmentWithDefaultPersistenceConfiguration() throws Exception {\n        // Create the repository configuration ...\n        String configFilePath = \"config/repo-config-inmemory-no-persistence.json\";\n        InputStream configFileStream = getClass().getClassLoader().getResourceAsStream(configFilePath);\n        RepositoryConfiguration repositoryConfiguration = RepositoryConfiguration.read(configFileStream, \"doesn't matter\");\n\n        LocalEnvironment environment = new LocalEnvironment();\n        repositoryConfiguration = repositoryConfiguration.with(environment);\n\n        // Start the engine and repository ...\n        ModeShapeEngine engine = new ModeShapeEngine();\n        engine.start();\n\n        try {\n            JcrRepository repository = engine.deploy(repositoryConfiguration);\n            Session session = repository.login();\n            Node root = session.getRootNode();\n            root.addNode(\"Library\", \"nt:folder\");\n            session.save();\n            session.logout();\n\n            session = repository.login();\n            Node library = session.getNode(\"/Library\");\n            assertThat(library, is(notNullValue()));\n            assertThat(library.getPrimaryNodeType().getName(), is(\"nt:folder\"));\n            session.logout();\n        } finally {\n            engine.shutdown().get();\n            environment.shutdown();\n        }\n    }", "signature": "void shouldStartRepositoryUsingLocalEnvironmentWithDefaultPersistenceConfiguration()", "full_signature": "@Test public void shouldStartRepositoryUsingLocalEnvironmentWithDefaultPersistenceConfiguration()", "class_method_signature": "LocalEnvironmentTest.shouldStartRepositoryUsingLocalEnvironmentWithDefaultPersistenceConfiguration()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "read", "with", "start", "deploy", "login", "getRootNode", "addNode", "save", "logout", "login", "getNode", "assertThat", "is", "notNullValue", "assertThat", "getName", "getPrimaryNodeType", "is", "logout", "get", "shutdown", "shutdown"]}, "focal_class": {"identifier": "LocalEnvironment", "superclass": "", "interfaces": "implements Environment", "fields": [], "methods": [{"identifier": "LocalEnvironment", "parameters": "()", "modifiers": "public", "return": "", "signature": " LocalEnvironment()", "full_signature": "public  LocalEnvironment()", "class_method_signature": "LocalEnvironment.LocalEnvironment()", "testcase": false, "constructor": true}, {"identifier": "getChannel", "parameters": "(String name)", "modifiers": "@Override public", "return": "Channel", "signature": "Channel getChannel(String name)", "full_signature": "@Override public Channel getChannel(String name)", "class_method_signature": "LocalEnvironment.getChannel(String name)", "testcase": false, "constructor": false}, {"identifier": "getClassLoader", "parameters": "( Object caller,\n                                       String... classpathEntries )", "modifiers": "@Override public", "return": "ClassLoader", "signature": "ClassLoader getClassLoader( Object caller,\n                                       String... classpathEntries )", "full_signature": "@Override public ClassLoader getClassLoader( Object caller,\n                                       String... classpathEntries )", "class_method_signature": "LocalEnvironment.getClassLoader( Object caller,\n                                       String... classpathEntries )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/LocalEnvironment.java"}, "focal_method": {"identifier": "getClassLoader", "parameters": "( Object caller,\n                                       String... classpathEntries )", "modifiers": "@Override public", "return": "ClassLoader", "body": "@Override\n    public ClassLoader getClassLoader( Object caller,\n                                       String... classpathEntries ) {\n        caller = Objects.requireNonNull(caller);\n\n        Set<ClassLoader> delegates = new LinkedHashSet<>();\n\n        List<String> urls = Arrays.stream(classpathEntries).filter(StringUtil::notBlank).collect(Collectors.toList());\n        if (urls.isEmpty()) {\n            StringURLClassLoader urlClassLoader = new StringURLClassLoader(urls);\n            // only if any custom urls were parsed add this loader\n            if (urlClassLoader.getURLs().length > 0) {\n                delegates.add(urlClassLoader);\n            }\n        }\n\n        ClassLoader currentLoader = getClass().getClassLoader();\n        ClassLoader callerLoader = caller.getClass().getClassLoader();\n        ClassLoader tccl = Thread.currentThread().getContextClassLoader();\n        \n        //add the TCCL to the list if it's not the same as the current loader or the fallback loader\n        if (!callerLoader.equals(tccl) && !currentLoader.equals(tccl)) {\n            delegates.add(tccl);\n        }\n\n        if (!callerLoader.equals(currentLoader)) {\n            // if the parent of fallback is the same as the current loader, just use that\n            if (currentLoader.equals(callerLoader.getParent())) {\n                currentLoader = callerLoader;\n            } else {\n                delegates.add(callerLoader);\n            }\n        }\n\n        return delegates.isEmpty() ? currentLoader : new DelegatingClassLoader(currentLoader, delegates);\n    }", "signature": "ClassLoader getClassLoader( Object caller,\n                                       String... classpathEntries )", "full_signature": "@Override public ClassLoader getClassLoader( Object caller,\n                                       String... classpathEntries )", "class_method_signature": "LocalEnvironment.getClassLoader( Object caller,\n                                       String... classpathEntries )", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "collect", "filter", "stream", "toList", "isEmpty", "getURLs", "add", "getClassLoader", "getClass", "getClassLoader", "getClass", "getContextClassLoader", "currentThread", "equals", "equals", "add", "equals", "equals", "getParent", "add", "isEmpty"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}