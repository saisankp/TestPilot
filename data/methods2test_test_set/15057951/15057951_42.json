{"test_class": {"identifier": "AbstractFSParamRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ParamDeserializer deserializer;", "modifier": "private", "type": "ParamDeserializer", "declarator": "deserializer", "var_name": "deserializer"}, {"original_string": "private ResourceResolver resourceResolver;", "modifier": "private", "type": "ResourceResolver", "declarator": "resourceResolver", "var_name": "resourceResolver"}], "file": "smartparam-repository-fs/src/test/java/org/smartparam/repository/fs/AbstractFSParamRepositoryTest.java"}, "test_case": {"identifier": "shouldThrowInitializationExceptionWhenLoadingParameterListWithoutInitialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldThrowInitializationExceptionWhenLoadingParameterListWithoutInitialization() {\n        // given\n        ParamRepository paramRepository = new TestFSParamRepository(resourceResolver);\n\n        // when\n        catchException(paramRepository).listParameters();\n\n        // then\n        assertThat(caughtException()).isInstanceOf(InitializableComponentNotInitialized.class);\n    }", "signature": "void shouldThrowInitializationExceptionWhenLoadingParameterListWithoutInitialization()", "full_signature": "@Test public void shouldThrowInitializationExceptionWhenLoadingParameterListWithoutInitialization()", "class_method_signature": "AbstractFSParamRepositoryTest.shouldThrowInitializationExceptionWhenLoadingParameterListWithoutInitialization()", "testcase": true, "constructor": false, "invocations": ["listParameters", "catchException", "isInstanceOf", "assertThat", "caughtException"]}, "focal_class": {"identifier": "AbstractFSParamRepository", "superclass": "", "interfaces": "implements ParamRepository, InitializableComponent", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AbstractFSParamRepository.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AbstractFSParamRepository.class)", "var_name": "logger"}, {"original_string": "private boolean initialized;", "modifier": "private", "type": "boolean", "declarator": "initialized", "var_name": "initialized"}, {"original_string": "private String basePath;", "modifier": "private", "type": "String", "declarator": "basePath", "var_name": "basePath"}, {"original_string": "private String filePattern;", "modifier": "private", "type": "String", "declarator": "filePattern", "var_name": "filePattern"}, {"original_string": "private ParamDeserializer deserializer;", "modifier": "private", "type": "ParamDeserializer", "declarator": "deserializer", "var_name": "deserializer"}, {"original_string": "private ResourceResolver resourceResolver;", "modifier": "private", "type": "ResourceResolver", "declarator": "resourceResolver", "var_name": "resourceResolver"}, {"original_string": "private Map<String, String> parameters;", "modifier": "private", "type": "Map<String, String>", "declarator": "parameters", "var_name": "parameters"}], "methods": [{"identifier": "AbstractFSParamRepository", "parameters": "(String basePath, String filePattern)", "modifiers": "public", "return": "", "signature": " AbstractFSParamRepository(String basePath, String filePattern)", "full_signature": "public  AbstractFSParamRepository(String basePath, String filePattern)", "class_method_signature": "AbstractFSParamRepository.AbstractFSParamRepository(String basePath, String filePattern)", "testcase": false, "constructor": true}, {"identifier": "AbstractFSParamRepository", "parameters": "(String basePath, String filePattern, ParamDeserializer deserializer)", "modifiers": "public", "return": "", "signature": " AbstractFSParamRepository(String basePath, String filePattern, ParamDeserializer deserializer)", "full_signature": "public  AbstractFSParamRepository(String basePath, String filePattern, ParamDeserializer deserializer)", "class_method_signature": "AbstractFSParamRepository.AbstractFSParamRepository(String basePath, String filePattern, ParamDeserializer deserializer)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "AbstractFSParamRepository.initialize()", "testcase": false, "constructor": false}, {"identifier": "createResourceResolver", "parameters": "(String basePath, String filePattern, ParamDeserializer deserializer)", "modifiers": "protected abstract", "return": "ResourceResolver", "signature": "ResourceResolver createResourceResolver(String basePath, String filePattern, ParamDeserializer deserializer)", "full_signature": "protected abstract ResourceResolver createResourceResolver(String basePath, String filePattern, ParamDeserializer deserializer)", "class_method_signature": "AbstractFSParamRepository.createResourceResolver(String basePath, String filePattern, ParamDeserializer deserializer)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(String parameterName)", "modifiers": "@Override public", "return": "Parameter", "signature": "Parameter load(String parameterName)", "full_signature": "@Override public Parameter load(String parameterName)", "class_method_signature": "AbstractFSParamRepository.load(String parameterName)", "testcase": false, "constructor": false}, {"identifier": "batchLoad", "parameters": "(String parameterName)", "modifiers": "@Override public", "return": "ParameterBatchLoader", "signature": "ParameterBatchLoader batchLoad(String parameterName)", "full_signature": "@Override public ParameterBatchLoader batchLoad(String parameterName)", "class_method_signature": "AbstractFSParamRepository.batchLoad(String parameterName)", "testcase": false, "constructor": false}, {"identifier": "findEntries", "parameters": "(String parameterName, String[] levelValues)", "modifiers": "@Override public", "return": "Set<ParameterEntry>", "signature": "Set<ParameterEntry> findEntries(String parameterName, String[] levelValues)", "full_signature": "@Override public Set<ParameterEntry> findEntries(String parameterName, String[] levelValues)", "class_method_signature": "AbstractFSParamRepository.findEntries(String parameterName, String[] levelValues)", "testcase": false, "constructor": false}, {"identifier": "listParameters", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> listParameters()", "full_signature": "@Override public Set<String> listParameters()", "class_method_signature": "AbstractFSParamRepository.listParameters()", "testcase": false, "constructor": false}, {"identifier": "checkIfInitialized", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkIfInitialized()", "full_signature": "private void checkIfInitialized()", "class_method_signature": "AbstractFSParamRepository.checkIfInitialized()", "testcase": false, "constructor": false}], "file": "smartparam-repository-fs/src/main/java/org/smartparam/repository/fs/AbstractFSParamRepository.java"}, "focal_method": {"identifier": "listParameters", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "body": "@Override\n    public Set<String> listParameters() {\n        checkIfInitialized();\n\n        return parameters.keySet();\n    }", "signature": "Set<String> listParameters()", "full_signature": "@Override public Set<String> listParameters()", "class_method_signature": "AbstractFSParamRepository.listParameters()", "testcase": false, "constructor": false, "invocations": ["checkIfInitialized", "keySet"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}