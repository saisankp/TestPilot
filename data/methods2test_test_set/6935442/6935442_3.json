{"test_class": {"identifier": "PivotUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "subdomains/excel/applib/src/test/java/org/apache/isis/subdomains/excel/applib/dom/util/PivotUtilsTest.java"}, "test_case": {"identifier": "addCellValueToTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addCellValueToTest(){\n\n        // given\n        XSSFWorkbook workbook = new XSSFWorkbook();\n        XSSFSheet sheet = workbook.createSheet();\n        Row r = sheet.createRow(0);\n\n        // when source null\n        Cell cSource = null;\n        Cell cTarget = r.createCell(1);\n        cTarget.setCellValue(1);\n\n        PivotUtils.addCellValueTo(cSource, cTarget);\n\n        // then\n        Assertions.assertThat(cTarget.getNumericCellValue()).isEqualTo(1);\n\n        // when numeric\n        cSource = r.createCell(0);\n        cTarget = r.createCell(1);\n        cSource.setCellValue(1);\n        cTarget.setCellValue(2);\n\n        PivotUtils.addCellValueTo(cSource, cTarget);\n\n        // then\n        Assertions.assertThat(cTarget.getNumericCellValue()).isEqualTo(3);\n\n        // when mixed: adding ignored\n        cSource.setCellValue(1);\n        cTarget.setCellValue(\"b\");\n\n        PivotUtils.addCellValueTo(cSource, cTarget);\n\n        // then\n        Assertions.assertThat(cTarget.getStringCellValue()).isEqualTo(\"b\");\n\n        // when boolean: adding ignored\n        cSource.setCellValue(true);\n        cTarget.setCellValue(false);\n\n        PivotUtils.addCellValueTo(cSource, cTarget);\n\n        // then\n        Assertions.assertThat(cTarget.getBooleanCellValue()).isEqualTo(false);\n\n    }", "signature": "void addCellValueToTest()", "full_signature": "@Test public void addCellValueToTest()", "class_method_signature": "PivotUtilsTest.addCellValueToTest()", "testcase": true, "constructor": false, "invocations": ["createSheet", "createRow", "createCell", "setCellValue", "addCellValueTo", "isEqualTo", "assertThat", "getNumericCellValue", "createCell", "createCell", "setCellValue", "setCellValue", "addCellValueTo", "isEqualTo", "assertThat", "getNumericCellValue", "setCellValue", "setCellValue", "addCellValueTo", "isEqualTo", "assertThat", "getStringCellValue", "setCellValue", "setCellValue", "addCellValueTo", "isEqualTo", "assertThat", "getBooleanCellValue"]}, "focal_class": {"identifier": "PivotUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createAnnotationRow", "parameters": "(final Row annotationRow, final List<String> annotationList)", "modifiers": "public static", "return": "void", "signature": "void createAnnotationRow(final Row annotationRow, final List<String> annotationList)", "full_signature": "public static void createAnnotationRow(final Row annotationRow, final List<String> annotationList)", "class_method_signature": "PivotUtils.createAnnotationRow(final Row annotationRow, final List<String> annotationList)", "testcase": false, "constructor": false}, {"identifier": "createOrderRow", "parameters": "(final Row orderRow, final List<Integer> orderList)", "modifiers": "public static", "return": "void", "signature": "void createOrderRow(final Row orderRow, final List<Integer> orderList)", "full_signature": "public static void createOrderRow(final Row orderRow, final List<Integer> orderList)", "class_method_signature": "PivotUtils.createOrderRow(final Row orderRow, final List<Integer> orderList)", "testcase": false, "constructor": false}, {"identifier": "createTypeRow", "parameters": "(final Row typeRow, final List<AggregationType> typeList)", "modifiers": "public static", "return": "void", "signature": "void createTypeRow(final Row typeRow, final List<AggregationType> typeList)", "full_signature": "public static void createTypeRow(final Row typeRow, final List<AggregationType> typeList)", "class_method_signature": "PivotUtils.createTypeRow(final Row typeRow, final List<AggregationType> typeList)", "testcase": false, "constructor": false}, {"identifier": "cellValueEquals", "parameters": "(Cell cell, Cell other)", "modifiers": "static", "return": "boolean", "signature": "boolean cellValueEquals(Cell cell, Cell other)", "full_signature": "static boolean cellValueEquals(Cell cell, Cell other)", "class_method_signature": "PivotUtils.cellValueEquals(Cell cell, Cell other)", "testcase": false, "constructor": false}, {"identifier": "addCellValueTo", "parameters": "(Cell source, Cell target)", "modifiers": "static", "return": "Cell", "signature": "Cell addCellValueTo(Cell source, Cell target)", "full_signature": "static Cell addCellValueTo(Cell source, Cell target)", "class_method_signature": "PivotUtils.addCellValueTo(Cell source, Cell target)", "testcase": false, "constructor": false}, {"identifier": "copyCell", "parameters": "(Cell source, Cell target)", "modifiers": "static", "return": "void", "signature": "void copyCell(Cell source, Cell target)", "full_signature": "static void copyCell(Cell source, Cell target)", "class_method_signature": "PivotUtils.copyCell(Cell source, Cell target)", "testcase": false, "constructor": false}], "file": "subdomains/excel/applib/src/main/java/org/apache/isis/subdomains/excel/applib/dom/util/PivotUtils.java"}, "focal_method": {"identifier": "addCellValueTo", "parameters": "(Cell source, Cell target)", "modifiers": "static", "return": "Cell", "body": "static Cell addCellValueTo(Cell source, Cell target){\n\n        if (source == null) {\n            return target;\n        }\n\n        if (target.getCellType()==CellType.NUMERIC && source.getCellType()==CellType.NUMERIC ){\n            double val1 = target.getNumericCellValue();\n            double val2 = source.getNumericCellValue();\n            target.setCellValue(val1+val2);\n        }\n\n        return target;\n    }", "signature": "Cell addCellValueTo(Cell source, Cell target)", "full_signature": "static Cell addCellValueTo(Cell source, Cell target)", "class_method_signature": "PivotUtils.addCellValueTo(Cell source, Cell target)", "testcase": false, "constructor": false, "invocations": ["getCellType", "getCellType", "getNumericCellValue", "getNumericCellValue", "setCellValue"]}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}