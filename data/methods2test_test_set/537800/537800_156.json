{"test_class": {"identifier": "ExponentiallyDecayingReservoirTest", "superclass": "", "interfaces": "", "fields": [], "file": "metrics-core/src/test/java/com/codahale/metrics/ExponentiallyDecayingReservoirTest.java"}, "test_case": {"identifier": "removeZeroWeightsInSamplesToPreventNaNInMeanValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void removeZeroWeightsInSamplesToPreventNaNInMeanValues() {\n        final ManualClock clock = new ManualClock();\n        final ExponentiallyDecayingReservoir reservoir = new ExponentiallyDecayingReservoir(1028, 0.015, clock);\n        Timer timer = new Timer(reservoir, clock);\n\n        Context context = timer.time();\n        clock.addMillis(100);\n        context.stop();\n\n        for (int i = 1; i < 48; i++) {\n            clock.addHours(1);\n            assertThat(reservoir.getSnapshot().getMean()).isBetween(0.0, Double.MAX_VALUE);\n        }\n    }", "signature": "void removeZeroWeightsInSamplesToPreventNaNInMeanValues()", "full_signature": "@Test public void removeZeroWeightsInSamplesToPreventNaNInMeanValues()", "class_method_signature": "ExponentiallyDecayingReservoirTest.removeZeroWeightsInSamplesToPreventNaNInMeanValues()", "testcase": true, "constructor": false, "invocations": ["time", "addMillis", "stop", "addHours", "isBetween", "assertThat", "getMean", "getSnapshot"]}, "focal_class": {"identifier": "ExponentiallyDecayingReservoir", "superclass": "", "interfaces": "implements Reservoir", "fields": [{"original_string": "private static final int DEFAULT_SIZE = 1028;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_SIZE = 1028", "var_name": "DEFAULT_SIZE"}, {"original_string": "private static final double DEFAULT_ALPHA = 0.015;", "modifier": "private static final", "type": "double", "declarator": "DEFAULT_ALPHA = 0.015", "var_name": "DEFAULT_ALPHA"}, {"original_string": "private static final long RESCALE_THRESHOLD = TimeUnit.HOURS.toNanos(1);", "modifier": "private static final", "type": "long", "declarator": "RESCALE_THRESHOLD = TimeUnit.HOURS.toNanos(1)", "var_name": "RESCALE_THRESHOLD"}, {"original_string": "private final ConcurrentSkipListMap<Double, WeightedSample> values;", "modifier": "private final", "type": "ConcurrentSkipListMap<Double, WeightedSample>", "declarator": "values", "var_name": "values"}, {"original_string": "private final ReentrantReadWriteLock lock;", "modifier": "private final", "type": "ReentrantReadWriteLock", "declarator": "lock", "var_name": "lock"}, {"original_string": "private final double alpha;", "modifier": "private final", "type": "double", "declarator": "alpha", "var_name": "alpha"}, {"original_string": "private final int size;", "modifier": "private final", "type": "int", "declarator": "size", "var_name": "size"}, {"original_string": "private final AtomicLong count;", "modifier": "private final", "type": "AtomicLong", "declarator": "count", "var_name": "count"}, {"original_string": "private volatile long startTime;", "modifier": "private volatile", "type": "long", "declarator": "startTime", "var_name": "startTime"}, {"original_string": "private final AtomicLong lastScaleTick;", "modifier": "private final", "type": "AtomicLong", "declarator": "lastScaleTick", "var_name": "lastScaleTick"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "ExponentiallyDecayingReservoir", "parameters": "()", "modifiers": "public", "return": "", "signature": " ExponentiallyDecayingReservoir()", "full_signature": "public  ExponentiallyDecayingReservoir()", "class_method_signature": "ExponentiallyDecayingReservoir.ExponentiallyDecayingReservoir()", "testcase": false, "constructor": true}, {"identifier": "ExponentiallyDecayingReservoir", "parameters": "(int size, double alpha)", "modifiers": "public", "return": "", "signature": " ExponentiallyDecayingReservoir(int size, double alpha)", "full_signature": "public  ExponentiallyDecayingReservoir(int size, double alpha)", "class_method_signature": "ExponentiallyDecayingReservoir.ExponentiallyDecayingReservoir(int size, double alpha)", "testcase": false, "constructor": true}, {"identifier": "ExponentiallyDecayingReservoir", "parameters": "(int size, double alpha, Clock clock)", "modifiers": "public", "return": "", "signature": " ExponentiallyDecayingReservoir(int size, double alpha, Clock clock)", "full_signature": "public  ExponentiallyDecayingReservoir(int size, double alpha, Clock clock)", "class_method_signature": "ExponentiallyDecayingReservoir.ExponentiallyDecayingReservoir(int size, double alpha, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "ExponentiallyDecayingReservoir.size()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(long value)", "modifiers": "@Override public", "return": "void", "signature": "void update(long value)", "full_signature": "@Override public void update(long value)", "class_method_signature": "ExponentiallyDecayingReservoir.update(long value)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(long value, long timestamp)", "modifiers": "public", "return": "void", "signature": "void update(long value, long timestamp)", "full_signature": "public void update(long value, long timestamp)", "class_method_signature": "ExponentiallyDecayingReservoir.update(long value, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "rescaleIfNeeded", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rescaleIfNeeded()", "full_signature": "private void rescaleIfNeeded()", "class_method_signature": "ExponentiallyDecayingReservoir.rescaleIfNeeded()", "testcase": false, "constructor": false}, {"identifier": "getSnapshot", "parameters": "()", "modifiers": "@Override public", "return": "Snapshot", "signature": "Snapshot getSnapshot()", "full_signature": "@Override public Snapshot getSnapshot()", "class_method_signature": "ExponentiallyDecayingReservoir.getSnapshot()", "testcase": false, "constructor": false}, {"identifier": "currentTimeInSeconds", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long currentTimeInSeconds()", "full_signature": "private long currentTimeInSeconds()", "class_method_signature": "ExponentiallyDecayingReservoir.currentTimeInSeconds()", "testcase": false, "constructor": false}, {"identifier": "weight", "parameters": "(long t)", "modifiers": "private", "return": "double", "signature": "double weight(long t)", "full_signature": "private double weight(long t)", "class_method_signature": "ExponentiallyDecayingReservoir.weight(long t)", "testcase": false, "constructor": false}, {"identifier": "rescale", "parameters": "(long now, long lastTick)", "modifiers": "private", "return": "void", "signature": "void rescale(long now, long lastTick)", "full_signature": "private void rescale(long now, long lastTick)", "class_method_signature": "ExponentiallyDecayingReservoir.rescale(long now, long lastTick)", "testcase": false, "constructor": false}, {"identifier": "unlockForRescale", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void unlockForRescale()", "full_signature": "private void unlockForRescale()", "class_method_signature": "ExponentiallyDecayingReservoir.unlockForRescale()", "testcase": false, "constructor": false}, {"identifier": "lockForRescale", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void lockForRescale()", "full_signature": "private void lockForRescale()", "class_method_signature": "ExponentiallyDecayingReservoir.lockForRescale()", "testcase": false, "constructor": false}, {"identifier": "lockForRegularUsage", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void lockForRegularUsage()", "full_signature": "private void lockForRegularUsage()", "class_method_signature": "ExponentiallyDecayingReservoir.lockForRegularUsage()", "testcase": false, "constructor": false}, {"identifier": "unlockForRegularUsage", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void unlockForRegularUsage()", "full_signature": "private void unlockForRegularUsage()", "class_method_signature": "ExponentiallyDecayingReservoir.unlockForRegularUsage()", "testcase": false, "constructor": false}], "file": "metrics-core/src/main/java/com/codahale/metrics/ExponentiallyDecayingReservoir.java"}, "focal_method": {"identifier": "getSnapshot", "parameters": "()", "modifiers": "@Override public", "return": "Snapshot", "body": "@Override\n    public Snapshot getSnapshot() {\n        rescaleIfNeeded();\n        lockForRegularUsage();\n        try {\n            return new WeightedSnapshot(values.values());\n        } finally {\n            unlockForRegularUsage();\n        }\n    }", "signature": "Snapshot getSnapshot()", "full_signature": "@Override public Snapshot getSnapshot()", "class_method_signature": "ExponentiallyDecayingReservoir.getSnapshot()", "testcase": false, "constructor": false, "invocations": ["rescaleIfNeeded", "lockForRegularUsage", "values", "unlockForRegularUsage"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}