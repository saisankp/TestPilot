{"test_class": {"identifier": "MolecularFormulaCheckerTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private final static IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private final static", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "private IsotopeFactory                  ifac;", "modifier": "private", "type": "IsotopeFactory", "declarator": "ifac", "var_name": "ifac"}], "file": "tool/formula/src/test/java/org/openscience/cdk/formula/MolecularFormulaCheckerTest.java"}, "test_case": {"identifier": "testIsValid_True_2Rules", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsValid_True_2Rules() {\n\n        IMolecularFormula formula = new MolecularFormula();\n        formula.addIsotope(ifac.getMajorIsotope(\"C\"), 1);\n        formula.addIsotope(ifac.getMajorIsotope(\"H\"), 4);\n        formula.setCharge(0);\n\n        List<IRule> rules = new ArrayList<IRule>();\n        rules.add(new MMElementRule());\n        rules.add(new ChargeRule());\n\n        MolecularFormulaChecker MFChecker = new MolecularFormulaChecker(rules);\n\n        IMolecularFormula formulaWith = MFChecker.isValid(formula);\n\n        Assert.assertEquals(1.0, formulaWith.getProperty((new MMElementRule()).getClass()), 0.01);\n        Assert.assertEquals(1.0, formulaWith.getProperty((new ChargeRule()).getClass()), 0.01);\n\n    }", "signature": "void testIsValid_True_2Rules()", "full_signature": "@Test public void testIsValid_True_2Rules()", "class_method_signature": "MolecularFormulaCheckerTest.testIsValid_True_2Rules()", "testcase": true, "constructor": false, "invocations": ["addIsotope", "getMajorIsotope", "addIsotope", "getMajorIsotope", "setCharge", "add", "add", "isValid", "assertEquals", "getProperty", "getClass", "assertEquals", "getProperty", "getClass"]}, "focal_class": {"identifier": "MolecularFormulaChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ILoggingTool logger = LoggingToolFactory.createLoggingTool(MolecularFormulaChecker.class);", "modifier": "private", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(MolecularFormulaChecker.class)", "var_name": "logger"}, {"original_string": "private List<IRule>  rules;", "modifier": "private", "type": "List<IRule>", "declarator": "rules", "var_name": "rules"}], "methods": [{"identifier": "MolecularFormulaChecker", "parameters": "(List<IRule> rules)", "modifiers": "public", "return": "", "signature": " MolecularFormulaChecker(List<IRule> rules)", "full_signature": "public  MolecularFormulaChecker(List<IRule> rules)", "class_method_signature": "MolecularFormulaChecker.MolecularFormulaChecker(List<IRule> rules)", "testcase": false, "constructor": true}, {"identifier": "getRules", "parameters": "()", "modifiers": "public", "return": "List<IRule>", "signature": "List<IRule> getRules()", "full_signature": "public List<IRule> getRules()", "class_method_signature": "MolecularFormulaChecker.getRules()", "testcase": false, "constructor": false}, {"identifier": "isValidSum", "parameters": "(IMolecularFormula formula)", "modifiers": "public", "return": "Double", "signature": "Double isValidSum(IMolecularFormula formula)", "full_signature": "public Double isValidSum(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaChecker.isValidSum(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(IMolecularFormula formula)", "modifiers": "public", "return": "IMolecularFormula", "signature": "IMolecularFormula isValid(IMolecularFormula formula)", "full_signature": "public IMolecularFormula isValid(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaChecker.isValid(IMolecularFormula formula)", "testcase": false, "constructor": false}], "file": "tool/formula/src/main/java/org/openscience/cdk/formula/MolecularFormulaChecker.java"}, "focal_method": {"identifier": "isValid", "parameters": "(IMolecularFormula formula)", "modifiers": "public", "return": "IMolecularFormula", "body": "public IMolecularFormula isValid(IMolecularFormula formula) {\n        logger.info(\"Generating the validity of the molecular formula\");\n\n        if (formula.getIsotopeCount() == 0) {\n            logger.error(\"Proposed molecular formula has not elements\");\n            return formula;\n        }\n\n        Iterator<IRule> iterRules = rules.iterator();\n        try {\n            while (iterRules.hasNext()) {\n                IRule rule = iterRules.next();\n                double result = rule.validate(formula);\n                formula.setProperty(rule.getClass(), result);\n\n            }\n        } catch (CDKException e) {\n            e.printStackTrace();\n        }\n\n        return formula;\n    }", "signature": "IMolecularFormula isValid(IMolecularFormula formula)", "full_signature": "public IMolecularFormula isValid(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaChecker.isValid(IMolecularFormula formula)", "testcase": false, "constructor": false, "invocations": ["info", "getIsotopeCount", "error", "iterator", "hasNext", "next", "validate", "setProperty", "getClass", "printStackTrace"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}