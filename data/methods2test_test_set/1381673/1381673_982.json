{"test_class": {"identifier": "ClassUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-core/src/test/java/org/drools/core/util/ClassUtilsTest.java"}, "test_case": {"identifier": "testCanonicalNameMultiIndexArrayPrimitives", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCanonicalNameMultiIndexArrayPrimitives() {\n        String name = ClassUtils.canonicalName( long[][][].class );\n        assertEquals( \"long[][][]\",\n                      name );\n    }", "signature": "void testCanonicalNameMultiIndexArrayPrimitives()", "full_signature": "@Test public void testCanonicalNameMultiIndexArrayPrimitives()", "class_method_signature": "ClassUtilsTest.testCanonicalNameMultiIndexArrayPrimitives()", "testcase": true, "constructor": false, "invocations": ["canonicalName", "assertEquals"]}, "focal_class": {"identifier": "ClassUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ProtectionDomain  PROTECTION_DOMAIN;", "modifier": "private static final", "type": "ProtectionDomain", "declarator": "PROTECTION_DOMAIN", "var_name": "PROTECTION_DOMAIN"}, {"original_string": "public static final boolean IS_ANDROID;", "modifier": "public static final", "type": "boolean", "declarator": "IS_ANDROID", "var_name": "IS_ANDROID"}, {"original_string": "private static final Map<String, Class<?>> classes = Collections.synchronizedMap( new HashMap() );", "modifier": "private static final", "type": "Map<String, Class<?>>", "declarator": "classes = Collections.synchronizedMap( new HashMap() )", "var_name": "classes"}, {"original_string": "private static final Map<String, Constructor<?>> constructors = Collections.synchronizedMap( new HashMap() );", "modifier": "private static final", "type": "Map<String, Constructor<?>>", "declarator": "constructors = Collections.synchronizedMap( new HashMap() )", "var_name": "constructors"}, {"original_string": "private static final String STAR    = \"*\";", "modifier": "private static final", "type": "String", "declarator": "STAR    = \"*\"", "var_name": "STAR"}, {"original_string": "private static final Map<String, String> abbreviationMap;", "modifier": "private static final", "type": "Map<String, String>", "declarator": "abbreviationMap", "var_name": "abbreviationMap"}, {"original_string": "private static final Map<String, Class<?>> primitiveNameToType;", "modifier": "private static final", "type": "Map<String, Class<?>>", "declarator": "primitiveNameToType", "var_name": "primitiveNameToType"}], "methods": [{"identifier": "areNullSafeEquals", "parameters": "(Object obj1, Object obj2)", "modifiers": "public static", "return": "boolean", "signature": "boolean areNullSafeEquals(Object obj1, Object obj2)", "full_signature": "public static boolean areNullSafeEquals(Object obj1, Object obj2)", "class_method_signature": "ClassUtils.areNullSafeEquals(Object obj1, Object obj2)", "testcase": false, "constructor": false}, {"identifier": "convertResourceToClassName", "parameters": "(final String pResourceName)", "modifiers": "public static", "return": "String", "signature": "String convertResourceToClassName(final String pResourceName)", "full_signature": "public static String convertResourceToClassName(final String pResourceName)", "class_method_signature": "ClassUtils.convertResourceToClassName(final String pResourceName)", "testcase": false, "constructor": false}, {"identifier": "convertClassToResourcePath", "parameters": "(final Class cls)", "modifiers": "public static", "return": "String", "signature": "String convertClassToResourcePath(final Class cls)", "full_signature": "public static String convertClassToResourcePath(final Class cls)", "class_method_signature": "ClassUtils.convertClassToResourcePath(final Class cls)", "testcase": false, "constructor": false}, {"identifier": "convertClassToResourcePath", "parameters": "(final String pName)", "modifiers": "public static", "return": "String", "signature": "String convertClassToResourcePath(final String pName)", "full_signature": "public static String convertClassToResourcePath(final String pName)", "class_method_signature": "ClassUtils.convertClassToResourcePath(final String pName)", "testcase": false, "constructor": false}, {"identifier": "stripExtension", "parameters": "(final String pResourceName)", "modifiers": "public static", "return": "String", "signature": "String stripExtension(final String pResourceName)", "full_signature": "public static String stripExtension(final String pResourceName)", "class_method_signature": "ClassUtils.stripExtension(final String pResourceName)", "testcase": false, "constructor": false}, {"identifier": "toJavaCasing", "parameters": "(final String pName)", "modifiers": "public static", "return": "String", "signature": "String toJavaCasing(final String pName)", "full_signature": "public static String toJavaCasing(final String pName)", "class_method_signature": "ClassUtils.toJavaCasing(final String pName)", "testcase": false, "constructor": false}, {"identifier": "clazzName", "parameters": "(final File base,\n                                   final File file)", "modifiers": "public static", "return": "String", "signature": "String clazzName(final File base,\n                                   final File file)", "full_signature": "public static String clazzName(final File base,\n                                   final File file)", "class_method_signature": "ClassUtils.clazzName(final File base,\n                                   final File file)", "testcase": false, "constructor": false}, {"identifier": "relative", "parameters": "(final File base,\n                                  final File file)", "modifiers": "public static", "return": "String", "signature": "String relative(final File base,\n                                  final File file)", "full_signature": "public static String relative(final File base,\n                                  final File file)", "class_method_signature": "ClassUtils.relative(final File base,\n                                  final File file)", "testcase": false, "constructor": false}, {"identifier": "canonicalName", "parameters": "(Class clazz)", "modifiers": "public static", "return": "String", "signature": "String canonicalName(Class clazz)", "full_signature": "public static String canonicalName(Class clazz)", "class_method_signature": "ClassUtils.canonicalName(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "loadClass", "parameters": "(String className,\n                                     ClassLoader classLoader)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> loadClass(String className,\n                                     ClassLoader classLoader)", "full_signature": "public static Class<?> loadClass(String className,\n                                     ClassLoader classLoader)", "class_method_signature": "ClassUtils.loadClass(String className,\n                                     ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "instantiateObject", "parameters": "(String className)", "modifiers": "public static", "return": "Object", "signature": "Object instantiateObject(String className)", "full_signature": "public static Object instantiateObject(String className)", "class_method_signature": "ClassUtils.instantiateObject(String className)", "testcase": false, "constructor": false}, {"identifier": "instantiateObject", "parameters": "(String className,\n                                           ClassLoader classLoader)", "modifiers": "public static", "return": "Object", "signature": "Object instantiateObject(String className,\n                                           ClassLoader classLoader)", "full_signature": "public static Object instantiateObject(String className,\n                                           ClassLoader classLoader)", "class_method_signature": "ClassUtils.instantiateObject(String className,\n                                           ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "instantiateObject", "parameters": "(String className,\n                                           ClassLoader classLoader, Object...args)", "modifiers": "public static", "return": "Object", "signature": "Object instantiateObject(String className,\n                                           ClassLoader classLoader, Object...args)", "full_signature": "public static Object instantiateObject(String className,\n                                           ClassLoader classLoader, Object...args)", "class_method_signature": "ClassUtils.instantiateObject(String className,\n                                           ClassLoader classLoader, Object...args)", "testcase": false, "constructor": false}, {"identifier": "instantiateObject", "parameters": "(String className, Object...args)", "modifiers": "public static", "return": "Object", "signature": "Object instantiateObject(String className, Object...args)", "full_signature": "public static Object instantiateObject(String className, Object...args)", "class_method_signature": "ClassUtils.instantiateObject(String className, Object...args)", "testcase": false, "constructor": false}, {"identifier": "addImportStylePatterns", "parameters": "(Map<String, Object> patterns,\n                                              String str)", "modifiers": "public static", "return": "void", "signature": "void addImportStylePatterns(Map<String, Object> patterns,\n                                              String str)", "full_signature": "public static void addImportStylePatterns(Map<String, Object> patterns,\n                                              String str)", "class_method_signature": "ClassUtils.addImportStylePatterns(Map<String, Object> patterns,\n                                              String str)", "testcase": false, "constructor": false}, {"identifier": "isMatched", "parameters": "(Map<String, Object> patterns,\n                                    String className)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatched(Map<String, Object> patterns,\n                                    String className)", "full_signature": "public static boolean isMatched(Map<String, Object> patterns,\n                                    String className)", "class_method_signature": "ClassUtils.isMatched(Map<String, Object> patterns,\n                                    String className)", "testcase": false, "constructor": false}, {"identifier": "getPackage", "parameters": "(Class<?> cls)", "modifiers": "public static", "return": "String", "signature": "String getPackage(Class<?> cls)", "full_signature": "public static String getPackage(Class<?> cls)", "class_method_signature": "ClassUtils.getPackage(Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "findClass", "parameters": "(String name, Collection<String> availableImports, ClassLoader cl)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> findClass(String name, Collection<String> availableImports, ClassLoader cl)", "full_signature": "public static Class<?> findClass(String name, Collection<String> availableImports, ClassLoader cl)", "class_method_signature": "ClassUtils.findClass(String name, Collection<String> availableImports, ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "findClass", "parameters": "(String className, ClassLoader cl)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> findClass(String className, ClassLoader cl)", "full_signature": "public static Class<?> findClass(String className, ClassLoader cl)", "class_method_signature": "ClassUtils.findClass(String className, ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "getAccessibleProperties", "parameters": "( Class<?> clazz )", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getAccessibleProperties( Class<?> clazz )", "full_signature": "public static List<String> getAccessibleProperties( Class<?> clazz )", "class_method_signature": "ClassUtils.getAccessibleProperties( Class<?> clazz )", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(Class<?> clazz, String field)", "modifiers": "public static", "return": "Field", "signature": "Field getField(Class<?> clazz, String field)", "full_signature": "public static Field getField(Class<?> clazz, String field)", "class_method_signature": "ClassUtils.getField(Class<?> clazz, String field)", "testcase": false, "constructor": false}, {"identifier": "getAccessor", "parameters": "(Class<?> clazz, String field)", "modifiers": "public static", "return": "Method", "signature": "Method getAccessor(Class<?> clazz, String field)", "full_signature": "public static Method getAccessor(Class<?> clazz, String field)", "class_method_signature": "ClassUtils.getAccessor(Class<?> clazz, String field)", "testcase": false, "constructor": false}, {"identifier": "getSetter", "parameters": "(Class<?> clazz, String field, Class<?> parameterType)", "modifiers": "public static", "return": "Method", "signature": "Method getSetter(Class<?> clazz, String field, Class<?> parameterType)", "full_signature": "public static Method getSetter(Class<?> clazz, String field, Class<?> parameterType)", "class_method_signature": "ClassUtils.getSetter(Class<?> clazz, String field, Class<?> parameterType)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(Class<?> clazz, String name, Class<?>... parameterTypes)", "modifiers": "private static", "return": "Optional<Method>", "signature": "Optional<Method> getMethod(Class<?> clazz, String name, Class<?>... parameterTypes)", "full_signature": "private static Optional<Method> getMethod(Class<?> clazz, String name, Class<?>... parameterTypes)", "class_method_signature": "ClassUtils.getMethod(Class<?> clazz, String name, Class<?>... parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "getFieldOrAccessor", "parameters": "( Class clazz, String property)", "modifiers": "public static", "return": "Member", "signature": "Member getFieldOrAccessor( Class clazz, String property)", "full_signature": "public static Member getFieldOrAccessor( Class clazz, String property)", "class_method_signature": "ClassUtils.getFieldOrAccessor( Class clazz, String property)", "testcase": false, "constructor": false}, {"identifier": "getGetter", "parameters": "( Class clazz, String property)", "modifiers": "private static", "return": "Method", "signature": "Method getGetter( Class clazz, String property)", "full_signature": "private static Method getGetter( Class clazz, String property)", "class_method_signature": "ClassUtils.getGetter( Class clazz, String property)", "testcase": false, "constructor": false}, {"identifier": "getGetter", "parameters": "(String s)", "modifiers": "private static", "return": "String", "signature": "String getGetter(String s)", "full_signature": "private static String getGetter(String s)", "class_method_signature": "ClassUtils.getGetter(String s)", "testcase": false, "constructor": false}, {"identifier": "getIsGetter", "parameters": "(String s)", "modifiers": "private static", "return": "String", "signature": "String getIsGetter(String s)", "full_signature": "private static String getIsGetter(String s)", "class_method_signature": "ClassUtils.getIsGetter(String s)", "testcase": false, "constructor": false}, {"identifier": "extractGenericType", "parameters": "(Class<?> clazz, final String methodName)", "modifiers": "public static", "return": "Class", "signature": "Class extractGenericType(Class<?> clazz, final String methodName)", "full_signature": "public static Class extractGenericType(Class<?> clazz, final String methodName)", "class_method_signature": "ClassUtils.extractGenericType(Class<?> clazz, final String methodName)", "testcase": false, "constructor": false}, {"identifier": "processModifiesAnnotation", "parameters": "( Class<?> clazz, Set<PropertyInClass> props, Method m )", "modifiers": "private static", "return": "void", "signature": "void processModifiesAnnotation( Class<?> clazz, Set<PropertyInClass> props, Method m )", "full_signature": "private static void processModifiesAnnotation( Class<?> clazz, Set<PropertyInClass> props, Method m )", "class_method_signature": "ClassUtils.processModifiesAnnotation( Class<?> clazz, Set<PropertyInClass> props, Method m )", "testcase": false, "constructor": false}, {"identifier": "isTypeCompatibleWithArgumentType", "parameters": "( Class<?> actual, Class<?> formal )", "modifiers": "public static", "return": "boolean", "signature": "boolean isTypeCompatibleWithArgumentType( Class<?> actual, Class<?> formal )", "full_signature": "public static boolean isTypeCompatibleWithArgumentType( Class<?> actual, Class<?> formal )", "class_method_signature": "ClassUtils.isTypeCompatibleWithArgumentType( Class<?> actual, Class<?> formal )", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "( Class<?> type, Object obj )", "modifiers": "public static", "return": "boolean", "signature": "boolean isAssignable( Class<?> type, Object obj )", "full_signature": "public static boolean isAssignable( Class<?> type, Object obj )", "class_method_signature": "ClassUtils.isAssignable( Class<?> type, Object obj )", "testcase": false, "constructor": false}, {"identifier": "isConvertible", "parameters": "( Class<?> srcPrimitive, Class<?> tgtPrimitive )", "modifiers": "public static", "return": "boolean", "signature": "boolean isConvertible( Class<?> srcPrimitive, Class<?> tgtPrimitive )", "full_signature": "public static boolean isConvertible( Class<?> srcPrimitive, Class<?> tgtPrimitive )", "class_method_signature": "ClassUtils.isConvertible( Class<?> srcPrimitive, Class<?> tgtPrimitive )", "testcase": false, "constructor": false}, {"identifier": "isFinal", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFinal(Class<?> clazz)", "full_signature": "public static boolean isFinal(Class<?> clazz)", "class_method_signature": "ClassUtils.isFinal(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isInterface", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInterface(Class<?> clazz)", "full_signature": "public static boolean isInterface(Class<?> clazz)", "class_method_signature": "ClassUtils.isInterface(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getter2property", "parameters": "(String methodName)", "modifiers": "public static", "return": "String", "signature": "String getter2property(String methodName)", "full_signature": "public static String getter2property(String methodName)", "class_method_signature": "ClassUtils.getter2property(String methodName)", "testcase": false, "constructor": false}, {"identifier": "setter2property", "parameters": "(String methodName)", "modifiers": "public static", "return": "String", "signature": "String setter2property(String methodName)", "full_signature": "public static String setter2property(String methodName)", "class_method_signature": "ClassUtils.setter2property(String methodName)", "testcase": false, "constructor": false}, {"identifier": "isGetter", "parameters": "(String methodName)", "modifiers": "public static", "return": "boolean", "signature": "boolean isGetter(String methodName)", "full_signature": "public static boolean isGetter(String methodName)", "class_method_signature": "ClassUtils.isGetter(String methodName)", "testcase": false, "constructor": false}, {"identifier": "isSetter", "parameters": "(String methodName)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSetter(String methodName)", "full_signature": "public static boolean isSetter(String methodName)", "class_method_signature": "ClassUtils.isSetter(String methodName)", "testcase": false, "constructor": false}, {"identifier": "deepClone", "parameters": "(T origin)", "modifiers": "public static", "return": "T", "signature": "T deepClone(T origin)", "full_signature": "public static T deepClone(T origin)", "class_method_signature": "ClassUtils.deepClone(T origin)", "testcase": false, "constructor": false}, {"identifier": "deepClone", "parameters": "(T origin, ClassLoader classLoader)", "modifiers": "public static", "return": "T", "signature": "T deepClone(T origin, ClassLoader classLoader)", "full_signature": "public static T deepClone(T origin, ClassLoader classLoader)", "class_method_signature": "ClassUtils.deepClone(T origin, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "deepClone", "parameters": "(T origin, ClassLoader classLoader, Map<String, Object> cloningResources)", "modifiers": "public static", "return": "T", "signature": "T deepClone(T origin, ClassLoader classLoader, Map<String, Object> cloningResources)", "full_signature": "public static T deepClone(T origin, ClassLoader classLoader, Map<String, Object> cloningResources)", "class_method_signature": "ClassUtils.deepClone(T origin, ClassLoader classLoader, Map<String, Object> cloningResources)", "testcase": false, "constructor": false}, {"identifier": "convertFromPrimitiveType", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> convertFromPrimitiveType(Class<?> type)", "full_signature": "public static Class<?> convertFromPrimitiveType(Class<?> type)", "class_method_signature": "ClassUtils.convertFromPrimitiveType(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "convertToPrimitiveType", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> convertToPrimitiveType(Class<?> type)", "full_signature": "public static Class<?> convertToPrimitiveType(Class<?> type)", "class_method_signature": "ClassUtils.convertToPrimitiveType(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "convertPrimitiveNameToType", "parameters": "( String typeName )", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> convertPrimitiveNameToType( String typeName )", "full_signature": "public static Class<?> convertPrimitiveNameToType( String typeName )", "class_method_signature": "ClassUtils.convertPrimitiveNameToType( String typeName )", "testcase": false, "constructor": false}, {"identifier": "getAllImplementedInterfaceNames", "parameters": "( Class<?> klass )", "modifiers": "public static", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getAllImplementedInterfaceNames( Class<?> klass )", "full_signature": "public static Set<Class<?>> getAllImplementedInterfaceNames( Class<?> klass )", "class_method_signature": "ClassUtils.getAllImplementedInterfaceNames( Class<?> klass )", "testcase": false, "constructor": false}, {"identifier": "exploreSuperInterfaces", "parameters": "( Class<?> intf, Set<Class<?>> traitInterfaces )", "modifiers": "private static", "return": "void", "signature": "void exploreSuperInterfaces( Class<?> intf, Set<Class<?>> traitInterfaces )", "full_signature": "private static void exploreSuperInterfaces( Class<?> intf, Set<Class<?>> traitInterfaces )", "class_method_signature": "ClassUtils.exploreSuperInterfaces( Class<?> intf, Set<Class<?>> traitInterfaces )", "testcase": false, "constructor": false}, {"identifier": "getMinimalImplementedInterfaceNames", "parameters": "( Class<?> klass )", "modifiers": "public static", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getMinimalImplementedInterfaceNames( Class<?> klass )", "full_signature": "public static Set<Class<?>> getMinimalImplementedInterfaceNames( Class<?> klass )", "class_method_signature": "ClassUtils.getMinimalImplementedInterfaceNames( Class<?> klass )", "testcase": false, "constructor": false}, {"identifier": "isCaseSenstiveOS", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isCaseSenstiveOS()", "full_signature": "public static boolean isCaseSenstiveOS()", "class_method_signature": "ClassUtils.isCaseSenstiveOS()", "testcase": false, "constructor": false}, {"identifier": "isWindows", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isWindows()", "full_signature": "public static boolean isWindows()", "class_method_signature": "ClassUtils.isWindows()", "testcase": false, "constructor": false}, {"identifier": "isOSX", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isOSX()", "full_signature": "public static boolean isOSX()", "class_method_signature": "ClassUtils.isOSX()", "testcase": false, "constructor": false}, {"identifier": "isJboss", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isJboss()", "full_signature": "public static boolean isJboss()", "class_method_signature": "ClassUtils.isJboss()", "testcase": false, "constructor": false}, {"identifier": "isAndroid", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isAndroid()", "full_signature": "public static boolean isAndroid()", "class_method_signature": "ClassUtils.isAndroid()", "testcase": false, "constructor": false}, {"identifier": "findCommonSuperClass", "parameters": "(Class<?> c1, Class<?> c2)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> findCommonSuperClass(Class<?> c1, Class<?> c2)", "full_signature": "public static Class<?> findCommonSuperClass(Class<?> c1, Class<?> c2)", "class_method_signature": "ClassUtils.findCommonSuperClass(Class<?> c1, Class<?> c2)", "testcase": false, "constructor": false}, {"identifier": "getClassFromName", "parameters": "(String className)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getClassFromName(String className)", "full_signature": "public static Class<?> getClassFromName(String className)", "class_method_signature": "ClassUtils.getClassFromName(String className)", "testcase": false, "constructor": false}, {"identifier": "getClassFromName", "parameters": "(String className, boolean initialize, ClassLoader classLoader)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getClassFromName(String className, boolean initialize, ClassLoader classLoader)", "full_signature": "public static Class<?> getClassFromName(String className, boolean initialize, ClassLoader classLoader)", "class_method_signature": "ClassUtils.getClassFromName(String className, boolean initialize, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "toCanonicalName", "parameters": "(String className)", "modifiers": "private static", "return": "String", "signature": "String toCanonicalName(String className)", "full_signature": "private static String toCanonicalName(String className)", "class_method_signature": "ClassUtils.toCanonicalName(String className)", "testcase": false, "constructor": false}, {"identifier": "safeLoadClass", "parameters": "(ClassLoader cl, String name)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> safeLoadClass(ClassLoader cl, String name)", "full_signature": "public static Class<?> safeLoadClass(ClassLoader cl, String name)", "class_method_signature": "ClassUtils.safeLoadClass(ClassLoader cl, String name)", "testcase": false, "constructor": false}, {"identifier": "getSimpleName", "parameters": "(Class<?> c)", "modifiers": "public static", "return": "String", "signature": "String getSimpleName(Class<?> c)", "full_signature": "public static String getSimpleName(Class<?> c)", "class_method_signature": "ClassUtils.getSimpleName(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "getCanonicalSimpleName", "parameters": "(Class<?> c)", "modifiers": "public static", "return": "String", "signature": "String getCanonicalSimpleName(Class<?> c)", "full_signature": "public static String getCanonicalSimpleName(Class<?> c)", "class_method_signature": "ClassUtils.getCanonicalSimpleName(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "getCanonicalSimpleName", "parameters": "(Class<?> c, char separator)", "modifiers": "public static", "return": "String", "signature": "String getCanonicalSimpleName(Class<?> c, char separator)", "full_signature": "public static String getCanonicalSimpleName(Class<?> c, char separator)", "class_method_signature": "ClassUtils.getCanonicalSimpleName(Class<?> c, char separator)", "testcase": false, "constructor": false}], "file": "drools-core/src/main/java/org/drools/core/util/ClassUtils.java"}, "focal_method": {"identifier": "canonicalName", "parameters": "(Class clazz)", "modifiers": "public static", "return": "String", "body": "public static String canonicalName(Class clazz) {\n        StringBuilder name = new StringBuilder();\n\n        if ( clazz.isArray() ) {\n            name.append( canonicalName( clazz.getComponentType() ) );\n            name.append( \"[]\" );\n        } else if ( clazz.getDeclaringClass() == null ) {\n            name.append( clazz.getName() );\n        } else {\n            name.append( canonicalName( clazz.getDeclaringClass() ) );\n            name.append( \".\" );\n            name.append( clazz.getName().substring( clazz.getDeclaringClass().getName().length() + 1 ) );\n        }\n\n        return name.toString();\n    }", "signature": "String canonicalName(Class clazz)", "full_signature": "public static String canonicalName(Class clazz)", "class_method_signature": "ClassUtils.canonicalName(Class clazz)", "testcase": false, "constructor": false, "invocations": ["isArray", "append", "canonicalName", "getComponentType", "append", "getDeclaringClass", "append", "getName", "append", "canonicalName", "getDeclaringClass", "append", "append", "substring", "getName", "length", "getName", "getDeclaringClass", "toString"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}