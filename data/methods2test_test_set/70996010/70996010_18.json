{"test_class": {"identifier": "RuleDatabaseUpdateTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "HashMap<String, Uri> uriLocations = new HashMap<>();", "modifier": "", "type": "HashMap<String, Uri>", "declarator": "uriLocations = new HashMap<>()", "var_name": "uriLocations"}], "file": "app/src/test/java/org/jak_linux/dns66/db/RuleDatabaseUpdateTaskTest.java"}, "test_case": {"identifier": "testReleaseGarbagePermissions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReleaseGarbagePermissions() throws Exception {\n        Context mockContext = mock(Context.class);\n        ContentResolver mockResolver = mock(ContentResolver.class);\n        when(mockContext.getContentResolver()).thenReturn(mockResolver);\n\n        final List<UriPermission> persistedPermissions = new LinkedList<>();\n        when(mockResolver.getPersistedUriPermissions()).thenReturn(persistedPermissions);\n\n        UriPermission usedPermission = mock(UriPermission.class);\n        when(usedPermission.getUri()).thenReturn(newUri(\"content://used\"));\n        persistedPermissions.add(usedPermission);\n\n        UriPermission garbagePermission = mock(UriPermission.class);\n        when(garbagePermission.getUri()).thenReturn(newUri(\"content://garbage\"));\n        persistedPermissions.add(garbagePermission);\n\n        doAnswer(new Answer<Void>() {\n            @Override\n            public Void answer(InvocationOnMock invocation) throws Throwable {\n                Iterator<UriPermission> iter = persistedPermissions.iterator();\n                while (iter.hasNext()) {\n                    UriPermission perm = iter.next();\n                    if (perm.getUri() == invocation.getArgumentAt(0, Uri.class))\n                        iter.remove();\n                }\n                return null;\n            }\n        }).when(mockResolver, \"releasePersistableUriPermission\", any(Uri.class), anyInt());\n\n        Configuration configuration = new Configuration();\n        configuration.hosts.items.add(newItemForLocation(\"content://used\"));\n\n        assertTrue(persistedPermissions.contains(usedPermission));\n        assertTrue(persistedPermissions.contains(garbagePermission));\n\n        new RuleDatabaseUpdateTask(mockContext, configuration, false).releaseGarbagePermissions();\n\n        assertTrue(persistedPermissions.contains(usedPermission));\n        assertFalse(persistedPermissions.contains(garbagePermission));\n    }", "signature": "void testReleaseGarbagePermissions()", "full_signature": "@Test public void testReleaseGarbagePermissions()", "class_method_signature": "RuleDatabaseUpdateTaskTest.testReleaseGarbagePermissions()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getContentResolver", "thenReturn", "when", "getPersistedUriPermissions", "mock", "thenReturn", "when", "getUri", "newUri", "add", "mock", "thenReturn", "when", "getUri", "newUri", "add", "when", "doAnswer", "iterator", "hasNext", "next", "getUri", "getArgumentAt", "remove", "any", "anyInt", "add", "newItemForLocation", "assertTrue", "contains", "assertTrue", "contains", "releaseGarbagePermissions", "assertTrue", "contains", "assertFalse", "contains"]}, "focal_class": {"identifier": "RuleDatabaseUpdateTask", "superclass": "extends AsyncTask<Void, Void, Void>", "interfaces": "", "fields": [{"original_string": "public static final AtomicReference<List<String>> lastErrors = new AtomicReference<>(null);", "modifier": "public static final", "type": "AtomicReference<List<String>>", "declarator": "lastErrors = new AtomicReference<>(null)", "var_name": "lastErrors"}, {"original_string": "private static final String TAG = \"RuleDatabaseUpdateTask\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"RuleDatabaseUpdateTask\"", "var_name": "TAG"}, {"original_string": "private static final int UPDATE_NOTIFICATION_ID = 42;", "modifier": "private static final", "type": "int", "declarator": "UPDATE_NOTIFICATION_ID = 42", "var_name": "UPDATE_NOTIFICATION_ID"}, {"original_string": "Context context;", "modifier": "", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "Configuration configuration;", "modifier": "", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "ArrayList<String> errors = new ArrayList<>();", "modifier": "", "type": "ArrayList<String>", "declarator": "errors = new ArrayList<>()", "var_name": "errors"}, {"original_string": "List<String> pending = new ArrayList<>();", "modifier": "", "type": "List<String>", "declarator": "pending = new ArrayList<>()", "var_name": "pending"}, {"original_string": "List<String> done = new ArrayList<>();", "modifier": "", "type": "List<String>", "declarator": "done = new ArrayList<>()", "var_name": "done"}, {"original_string": "private NotificationManager notificationManager;", "modifier": "private", "type": "NotificationManager", "declarator": "notificationManager", "var_name": "notificationManager"}, {"original_string": "private NotificationCompat.Builder notificationBuilder;", "modifier": "private", "type": "NotificationCompat.Builder", "declarator": "notificationBuilder", "var_name": "notificationBuilder"}], "methods": [{"identifier": "RuleDatabaseUpdateTask", "parameters": "(Context context, Configuration configuration, boolean notifications)", "modifiers": "public", "return": "", "signature": " RuleDatabaseUpdateTask(Context context, Configuration configuration, boolean notifications)", "full_signature": "public  RuleDatabaseUpdateTask(Context context, Configuration configuration, boolean notifications)", "class_method_signature": "RuleDatabaseUpdateTask.RuleDatabaseUpdateTask(Context context, Configuration configuration, boolean notifications)", "testcase": false, "constructor": true}, {"identifier": "setupNotificationBuilder", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setupNotificationBuilder()", "full_signature": "private void setupNotificationBuilder()", "class_method_signature": "RuleDatabaseUpdateTask.setupNotificationBuilder()", "testcase": false, "constructor": false}, {"identifier": "doInBackground", "parameters": "(final Void... configurations)", "modifiers": "@Override protected", "return": "Void", "signature": "Void doInBackground(final Void... configurations)", "full_signature": "@Override protected Void doInBackground(final Void... configurations)", "class_method_signature": "RuleDatabaseUpdateTask.doInBackground(final Void... configurations)", "testcase": false, "constructor": false}, {"identifier": "releaseGarbagePermissions", "parameters": "()", "modifiers": "", "return": "void", "signature": "void releaseGarbagePermissions()", "full_signature": " void releaseGarbagePermissions()", "class_method_signature": "RuleDatabaseUpdateTask.releaseGarbagePermissions()", "testcase": false, "constructor": false}, {"identifier": "isGarbage", "parameters": "(Uri uri)", "modifiers": "private", "return": "boolean", "signature": "boolean isGarbage(Uri uri)", "full_signature": "private boolean isGarbage(Uri uri)", "class_method_signature": "RuleDatabaseUpdateTask.isGarbage(Uri uri)", "testcase": false, "constructor": false}, {"identifier": "getCommand", "parameters": "(Configuration.Item item)", "modifiers": "@NonNull", "return": "RuleDatabaseItemUpdateRunnable", "signature": "RuleDatabaseItemUpdateRunnable getCommand(Configuration.Item item)", "full_signature": "@NonNull RuleDatabaseItemUpdateRunnable getCommand(Configuration.Item item)", "class_method_signature": "RuleDatabaseUpdateTask.getCommand(Configuration.Item item)", "testcase": false, "constructor": false}, {"identifier": "updateProgressNotification", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void updateProgressNotification()", "full_signature": "private synchronized void updateProgressNotification()", "class_method_signature": "RuleDatabaseUpdateTask.updateProgressNotification()", "testcase": false, "constructor": false}, {"identifier": "postExecute", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void postExecute()", "full_signature": "private synchronized void postExecute()", "class_method_signature": "RuleDatabaseUpdateTask.postExecute()", "testcase": false, "constructor": false}, {"identifier": "addError", "parameters": "(Configuration.Item item, String message)", "modifiers": "synchronized", "return": "void", "signature": "void addError(Configuration.Item item, String message)", "full_signature": "synchronized void addError(Configuration.Item item, String message)", "class_method_signature": "RuleDatabaseUpdateTask.addError(Configuration.Item item, String message)", "testcase": false, "constructor": false}, {"identifier": "addDone", "parameters": "(Configuration.Item item)", "modifiers": "synchronized", "return": "void", "signature": "void addDone(Configuration.Item item)", "full_signature": "synchronized void addDone(Configuration.Item item)", "class_method_signature": "RuleDatabaseUpdateTask.addDone(Configuration.Item item)", "testcase": false, "constructor": false}, {"identifier": "addBegin", "parameters": "(Configuration.Item item)", "modifiers": "synchronized", "return": "void", "signature": "void addBegin(Configuration.Item item)", "full_signature": "synchronized void addBegin(Configuration.Item item)", "class_method_signature": "RuleDatabaseUpdateTask.addBegin(Configuration.Item item)", "testcase": false, "constructor": false}, {"identifier": "pendingCount", "parameters": "()", "modifiers": "synchronized", "return": "long", "signature": "long pendingCount()", "full_signature": "synchronized long pendingCount()", "class_method_signature": "RuleDatabaseUpdateTask.pendingCount()", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/jak_linux/dns66/db/RuleDatabaseUpdateTask.java"}, "focal_method": {"identifier": "releaseGarbagePermissions", "parameters": "()", "modifiers": "", "return": "void", "body": "void releaseGarbagePermissions() {\n        ContentResolver contentResolver = context.getContentResolver();\n        for (UriPermission permission : contentResolver.getPersistedUriPermissions()) {\n            if (isGarbage(permission.getUri())) {\n                Log.i(TAG, \"releaseGarbagePermissions: Releasing permission for \" + permission.getUri());\n                contentResolver.releasePersistableUriPermission(permission.getUri(), Intent.FLAG_GRANT_READ_URI_PERMISSION);\n            } else {\n                Log.v(TAG, \"releaseGarbagePermissions: Keeping permission for \" + permission.getUri());\n            }\n        }\n    }", "signature": "void releaseGarbagePermissions()", "full_signature": " void releaseGarbagePermissions()", "class_method_signature": "RuleDatabaseUpdateTask.releaseGarbagePermissions()", "testcase": false, "constructor": false, "invocations": ["getContentResolver", "getPersistedUriPermissions", "isGarbage", "getUri", "i", "getUri", "releasePersistableUriPermission", "getUri", "v", "getUri"]}, "repository": {"repo_id": 70996010, "url": "https://github.com/julian-klode/dns66", "stars": 1372, "created": "10/15/2016 3:27:17 PM +00:00", "updates": "2020-01-26T10:51:30+00:00", "fork": "False", "license": "licensed"}}