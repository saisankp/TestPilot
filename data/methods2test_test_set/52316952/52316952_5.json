{"test_class": {"identifier": "TestNimbleLinearLayout", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  NimblePresenter<NimbleView> presenter;", "modifier": "@Mock", "type": "NimblePresenter<NimbleView>", "declarator": "presenter", "var_name": "presenter"}, {"original_string": "@Mock\n  Bundle bundle;", "modifier": "@Mock", "type": "Bundle", "declarator": "bundle", "var_name": "bundle"}, {"original_string": "NimbleLinearLayout<NimbleView> layout;", "modifier": "", "type": "NimbleLinearLayout<NimbleView>", "declarator": "layout", "var_name": "layout"}, {"original_string": "@Mock\n  Context context;", "modifier": "@Mock", "type": "Context", "declarator": "context", "var_name": "context"}], "file": "nimble/src/test/java/com/lenguyenthanh/nimble/view/TestNimbleLinearLayout.java"}, "test_case": {"identifier": "testOnAttachedToWindow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testOnAttachedToWindow() throws Exception {\n    layout.onAttachedToWindow();\n    verify(layout).isInEditMode();\n  }", "signature": "void testOnAttachedToWindow()", "full_signature": "@Test public void testOnAttachedToWindow()", "class_method_signature": "TestNimbleLinearLayout.testOnAttachedToWindow()", "testcase": true, "constructor": false, "invocations": ["onAttachedToWindow", "isInEditMode", "verify"]}, "focal_class": {"identifier": "NimbleLinearLayout", "superclass": "extends LinearLayout", "interfaces": "implements NimbleView", "fields": [{"original_string": "protected static final String PARENT_STATE_KEY = \"parent_state\";", "modifier": "protected static final", "type": "String", "declarator": "PARENT_STATE_KEY = \"parent_state\"", "var_name": "PARENT_STATE_KEY"}], "methods": [{"identifier": "presenter", "parameters": "()", "modifiers": "abstract protected", "return": "NimblePresenter<V>", "signature": "NimblePresenter<V> presenter()", "full_signature": "abstract protected NimblePresenter<V> presenter()", "class_method_signature": "NimbleLinearLayout.presenter()", "testcase": false, "constructor": false}, {"identifier": "NimbleLinearLayout", "parameters": "(Context context)", "modifiers": "public", "return": "", "signature": " NimbleLinearLayout(Context context)", "full_signature": "public  NimbleLinearLayout(Context context)", "class_method_signature": "NimbleLinearLayout.NimbleLinearLayout(Context context)", "testcase": false, "constructor": true}, {"identifier": "NimbleLinearLayout", "parameters": "(Context context, AttributeSet attrs)", "modifiers": "public", "return": "", "signature": " NimbleLinearLayout(Context context, AttributeSet attrs)", "full_signature": "public  NimbleLinearLayout(Context context, AttributeSet attrs)", "class_method_signature": "NimbleLinearLayout.NimbleLinearLayout(Context context, AttributeSet attrs)", "testcase": false, "constructor": true}, {"identifier": "NimbleLinearLayout", "parameters": "(Context context, AttributeSet attrs, int defStyleAttr)", "modifiers": "public", "return": "", "signature": " NimbleLinearLayout(Context context, AttributeSet attrs, int defStyleAttr)", "full_signature": "public  NimbleLinearLayout(Context context, AttributeSet attrs, int defStyleAttr)", "class_method_signature": "NimbleLinearLayout.NimbleLinearLayout(Context context, AttributeSet attrs, int defStyleAttr)", "testcase": false, "constructor": true}, {"identifier": "getActivity", "parameters": "()", "modifiers": "public", "return": "Activity", "signature": "Activity getActivity()", "full_signature": "public Activity getActivity()", "class_method_signature": "NimbleLinearLayout.getActivity()", "testcase": false, "constructor": false}, {"identifier": "onAttachedToWindow", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onAttachedToWindow()", "full_signature": "@Override protected void onAttachedToWindow()", "class_method_signature": "NimbleLinearLayout.onAttachedToWindow()", "testcase": false, "constructor": false}, {"identifier": "onDetachedFromWindow", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onDetachedFromWindow()", "full_signature": "@Override protected void onDetachedFromWindow()", "class_method_signature": "NimbleLinearLayout.onDetachedFromWindow()", "testcase": false, "constructor": false}, {"identifier": "onSaveInstanceState", "parameters": "()", "modifiers": "@Override protected", "return": "Parcelable", "signature": "Parcelable onSaveInstanceState()", "full_signature": "@Override protected Parcelable onSaveInstanceState()", "class_method_signature": "NimbleLinearLayout.onSaveInstanceState()", "testcase": false, "constructor": false}, {"identifier": "onRestoreInstanceState", "parameters": "(Parcelable state)", "modifiers": "@Override protected", "return": "void", "signature": "void onRestoreInstanceState(Parcelable state)", "full_signature": "@Override protected void onRestoreInstanceState(Parcelable state)", "class_method_signature": "NimbleLinearLayout.onRestoreInstanceState(Parcelable state)", "testcase": false, "constructor": false}, {"identifier": "getMvpView", "parameters": "()", "modifiers": "private", "return": "V", "signature": "V getMvpView()", "full_signature": "private V getMvpView()", "class_method_signature": "NimbleLinearLayout.getMvpView()", "testcase": false, "constructor": false}], "file": "nimble/src/main/java/com/lenguyenthanh/nimble/view/NimbleLinearLayout.java"}, "focal_method": {"identifier": "onAttachedToWindow", "parameters": "()", "modifiers": "@Override protected", "return": "void", "body": "@Override\n  protected void onAttachedToWindow() {\n    super.onAttachedToWindow();\n    if (!isInEditMode()) {\n      presenter().takeView(getMvpView());\n    }\n  }", "signature": "void onAttachedToWindow()", "full_signature": "@Override protected void onAttachedToWindow()", "class_method_signature": "NimbleLinearLayout.onAttachedToWindow()", "testcase": false, "constructor": false, "invocations": ["onAttachedToWindow", "isInEditMode", "takeView", "presenter", "getMvpView"]}, "repository": {"repo_id": 52316952, "url": "https://github.com/lenguyenthanh/nimble", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 24, "size": 292, "license": "licensed"}}