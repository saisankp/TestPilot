{"test_class": {"identifier": "HttpRequesterTest", "superclass": "extends AntennaTestWithMockedContext", "interfaces": "", "fields": [{"original_string": "private HttpHelper httpHelperMock = Mockito.mock(HttpHelper.class);", "modifier": "private", "type": "HttpHelper", "declarator": "httpHelperMock = Mockito.mock(HttpHelper.class)", "var_name": "httpHelperMock"}, {"original_string": "private HttpRequester hr;", "modifier": "private", "type": "HttpRequester", "declarator": "hr", "var_name": "hr"}, {"original_string": "private Coordinate mavenCoordinate;", "modifier": "private", "type": "Coordinate", "declarator": "mavenCoordinate", "var_name": "mavenCoordinate"}, {"original_string": "private ClassifierInformation classifierInformation;", "modifier": "private", "type": "ClassifierInformation", "declarator": "classifierInformation", "var_name": "classifierInformation"}], "file": "modules/maven/src/test/java/org/eclipse/sw360/antenna/maven/HttpRequesterTest.java"}, "test_case": {"identifier": "requestFileDoesNotDownloadIfFileExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void requestFileDoesNotDownloadIfFileExists() throws Exception {\n        Path targetDirectory = temporaryFolder.newFolder(\"target\").toPath();\n        String filename = \"artifactId-version\" + (classifierInformation.isSource ? \"-sources\" : \"\") + \".jar\";\n        File expectedFile = new File(targetDirectory.toFile(), filename);\n\n        new FileOutputStream(expectedFile).close();\n\n        hr.requestFile(mavenCoordinate, targetDirectory, classifierInformation);\n\n        verify(httpHelperMock, never()).downloadFile(anyString(), eq(targetDirectory), anyString());\n    }", "signature": "void requestFileDoesNotDownloadIfFileExists()", "full_signature": "@Test public void requestFileDoesNotDownloadIfFileExists()", "class_method_signature": "HttpRequesterTest.requestFileDoesNotDownloadIfFileExists()", "testcase": true, "constructor": false, "invocations": ["toPath", "newFolder", "toFile", "close", "requestFile", "downloadFile", "verify", "never", "anyString", "eq", "anyString"]}, "focal_class": {"identifier": "HttpRequester", "superclass": "extends IArtifactRequester", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HttpRequester.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HttpRequester.class)", "var_name": "LOGGER"}, {"original_string": "private static final String GROUP_ID_PLACEHOLDER = \"{groupId}\";", "modifier": "private static final", "type": "String", "declarator": "GROUP_ID_PLACEHOLDER = \"{groupId}\"", "var_name": "GROUP_ID_PLACEHOLDER"}, {"original_string": "private static final String ARTIFACT_ID_PLACEHOLDER = \"{artifactId}\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACT_ID_PLACEHOLDER = \"{artifactId}\"", "var_name": "ARTIFACT_ID_PLACEHOLDER"}, {"original_string": "private static final String VERSION_PLACEHOLDER = \"{version}\";", "modifier": "private static final", "type": "String", "declarator": "VERSION_PLACEHOLDER = \"{version}\"", "var_name": "VERSION_PLACEHOLDER"}, {"original_string": "private static final String MAVEN_CENTRAL_URL = \"https://repo.maven.apache.org/maven2/\" + GROUP_ID_PLACEHOLDER + \"/\" + ARTIFACT_ID_PLACEHOLDER + \"/\" + VERSION_PLACEHOLDER + \"/\";", "modifier": "private static final", "type": "String", "declarator": "MAVEN_CENTRAL_URL = \"https://repo.maven.apache.org/maven2/\" + GROUP_ID_PLACEHOLDER + \"/\" + ARTIFACT_ID_PLACEHOLDER + \"/\" + VERSION_PLACEHOLDER + \"/\"", "var_name": "MAVEN_CENTRAL_URL"}, {"original_string": "private HttpHelper httpHelper;", "modifier": "private", "type": "HttpHelper", "declarator": "httpHelper", "var_name": "httpHelper"}, {"original_string": "private Optional<URL> sourceRepositoryUrl;", "modifier": "private", "type": "Optional<URL>", "declarator": "sourceRepositoryUrl", "var_name": "sourceRepositoryUrl"}], "methods": [{"identifier": "HttpRequester", "parameters": "(HttpClient httpClient, URL sourceRepositoryUrl)", "modifiers": "public", "return": "", "signature": " HttpRequester(HttpClient httpClient, URL sourceRepositoryUrl)", "full_signature": "public  HttpRequester(HttpClient httpClient, URL sourceRepositoryUrl)", "class_method_signature": "HttpRequester.HttpRequester(HttpClient httpClient, URL sourceRepositoryUrl)", "testcase": false, "constructor": true}, {"identifier": "HttpRequester", "parameters": "(HttpClient httpClient)", "modifiers": "public", "return": "", "signature": " HttpRequester(HttpClient httpClient)", "full_signature": "public  HttpRequester(HttpClient httpClient)", "class_method_signature": "HttpRequester.HttpRequester(HttpClient httpClient)", "testcase": false, "constructor": true}, {"identifier": "requestFile", "parameters": "(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "modifiers": "@Override public", "return": "Optional<File>", "signature": "Optional<File> requestFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "full_signature": "@Override public Optional<File> requestFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "class_method_signature": "HttpRequester.requestFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "testcase": false, "constructor": false}, {"identifier": "downloadFileFromUserUrl", "parameters": "(Coordinate mavenCoordinate, Path targetDirectory, String jarBaseName)", "modifiers": "private", "return": "Optional<File>", "signature": "Optional<File> downloadFileFromUserUrl(Coordinate mavenCoordinate, Path targetDirectory, String jarBaseName)", "full_signature": "private Optional<File> downloadFileFromUserUrl(Coordinate mavenCoordinate, Path targetDirectory, String jarBaseName)", "class_method_signature": "HttpRequester.downloadFileFromUserUrl(Coordinate mavenCoordinate, Path targetDirectory, String jarBaseName)", "testcase": false, "constructor": false}, {"identifier": "convertToJarUrlTemplate", "parameters": "(Coordinate mavenCoordinate, String jarBaseName, String repoTemplate)", "modifiers": "private", "return": "String", "signature": "String convertToJarUrlTemplate(Coordinate mavenCoordinate, String jarBaseName, String repoTemplate)", "full_signature": "private String convertToJarUrlTemplate(Coordinate mavenCoordinate, String jarBaseName, String repoTemplate)", "class_method_signature": "HttpRequester.convertToJarUrlTemplate(Coordinate mavenCoordinate, String jarBaseName, String repoTemplate)", "testcase": false, "constructor": false}, {"identifier": "tryFileDownload", "parameters": "(String jarUrl, Path targetDirectory, String jarBaseName)", "modifiers": "private", "return": "Optional<File>", "signature": "Optional<File> tryFileDownload(String jarUrl, Path targetDirectory, String jarBaseName)", "full_signature": "private Optional<File> tryFileDownload(String jarUrl, Path targetDirectory, String jarBaseName)", "class_method_signature": "HttpRequester.tryFileDownload(String jarUrl, Path targetDirectory, String jarBaseName)", "testcase": false, "constructor": false}, {"identifier": "getJarUrl", "parameters": "(Coordinate mavenCoordinate, String remoteFileName, String repoTemplate)", "modifiers": "private", "return": "String", "signature": "String getJarUrl(Coordinate mavenCoordinate, String remoteFileName, String repoTemplate)", "full_signature": "private String getJarUrl(Coordinate mavenCoordinate, String remoteFileName, String repoTemplate)", "class_method_signature": "HttpRequester.getJarUrl(Coordinate mavenCoordinate, String remoteFileName, String repoTemplate)", "testcase": false, "constructor": false}], "file": "modules/maven/src/main/java/org/eclipse/sw360/antenna/maven/HttpRequester.java"}, "focal_method": {"identifier": "requestFile", "parameters": "(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "modifiers": "@Override public", "return": "Optional<File>", "body": "@Override\n    public Optional<File> requestFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation) {\n        String jarBaseName = getExpectedJarBaseName(mavenCoordinate, classifierInformation);\n        File localJarFile = targetDirectory.resolve(jarBaseName).toFile();\n\n        if (localJarFile.exists()) {\n            LOGGER.debug(\"The file \" + localJarFile + \" already exists and won't be downloaded again\");\n            return Optional.of(localJarFile);\n        }\n\n        Optional<File> downloadedFile = downloadFileFromUserUrl(mavenCoordinate, targetDirectory, jarBaseName);\n\n        if (!downloadedFile.isPresent()) {\n            String mavenCentralJarUrl = getJarUrl(mavenCoordinate, jarBaseName, MAVEN_CENTRAL_URL);\n            return tryFileDownload(mavenCentralJarUrl, targetDirectory, jarBaseName);\n        }\n        return downloadedFile;\n    }", "signature": "Optional<File> requestFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "full_signature": "@Override public Optional<File> requestFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "class_method_signature": "HttpRequester.requestFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "testcase": false, "constructor": false, "invocations": ["getExpectedJarBaseName", "toFile", "resolve", "exists", "debug", "of", "downloadFileFromUserUrl", "isPresent", "getJarUrl", "tryFileDownload"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}