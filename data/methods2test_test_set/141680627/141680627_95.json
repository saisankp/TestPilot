{"test_class": {"identifier": "ThemeUtilTest", "superclass": "extends RobolectricTest", "interfaces": "", "fields": [], "file": "MSDKUIKit/MSDKUILib/src/test/java/com/here/msdkui/common/ThemeUtilTest.java"}, "test_case": {"identifier": "testGetDrawableWhenTypeValueIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDrawableWhenTypeValueIsNull() {\n        TypedArray typedArray = mock(TypedArray.class);\n        when(typedArray.peekValue(anyInt())).thenReturn(null);\n        assertNull(ThemeUtil.getDrawable(getApplicationContext(), typedArray, anyInt()));\n    }", "signature": "void testGetDrawableWhenTypeValueIsNull()", "full_signature": "@Test public void testGetDrawableWhenTypeValueIsNull()", "class_method_signature": "ThemeUtilTest.testGetDrawableWhenTypeValueIsNull()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "peekValue", "anyInt", "assertNull", "getDrawable", "getApplicationContext", "anyInt"]}, "focal_class": {"identifier": "ThemeUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int[] DESIGN_THEME = R.styleable.DarkTheme;", "modifier": "private static final", "type": "int[]", "declarator": "DESIGN_THEME = R.styleable.DarkTheme", "var_name": "DESIGN_THEME"}], "methods": [{"identifier": "ThemeUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ThemeUtil()", "full_signature": "private  ThemeUtil()", "class_method_signature": "ThemeUtil.ThemeUtil()", "testcase": false, "constructor": true}, {"identifier": "getDrawable", "parameters": "(Context context, final TypedArray typedArray, final int index)", "modifiers": "public static", "return": "Drawable", "signature": "Drawable getDrawable(Context context, final TypedArray typedArray, final int index)", "full_signature": "public static Drawable getDrawable(Context context, final TypedArray typedArray, final int index)", "class_method_signature": "ThemeUtil.getDrawable(Context context, final TypedArray typedArray, final int index)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(final TypedArray typedArray, final int index)", "modifiers": "public static", "return": "String", "signature": "String getString(final TypedArray typedArray, final int index)", "full_signature": "public static String getString(final TypedArray typedArray, final int index)", "class_method_signature": "ThemeUtil.getString(final TypedArray typedArray, final int index)", "testcase": false, "constructor": false}, {"identifier": "getColor", "parameters": "(Context context, int colorAttribute)", "modifiers": "@ColorInt public static", "return": "int", "signature": "int getColor(Context context, int colorAttribute)", "full_signature": "@ColorInt public static int getColor(Context context, int colorAttribute)", "class_method_signature": "ThemeUtil.getColor(Context context, int colorAttribute)", "testcase": false, "constructor": false}, {"identifier": "isColor", "parameters": "(TypedValue value)", "modifiers": "private static", "return": "boolean", "signature": "boolean isColor(TypedValue value)", "full_signature": "private static boolean isColor(TypedValue value)", "class_method_signature": "ThemeUtil.isColor(TypedValue value)", "testcase": false, "constructor": false}, {"identifier": "getColorFromStyleable", "parameters": "(Context context, int colorStyleable)", "modifiers": "private static", "return": "int", "signature": "int getColorFromStyleable(Context context, int colorStyleable)", "full_signature": "private static int getColorFromStyleable(Context context, int colorStyleable)", "class_method_signature": "ThemeUtil.getColorFromStyleable(Context context, int colorStyleable)", "testcase": false, "constructor": false}, {"identifier": "styleableForAttr", "parameters": "(int attribute)", "modifiers": "private static", "return": "int", "signature": "int styleableForAttr(int attribute)", "full_signature": "private static int styleableForAttr(int attribute)", "class_method_signature": "ThemeUtil.styleableForAttr(int attribute)", "testcase": false, "constructor": false}, {"identifier": "getStyleId", "parameters": "(Context context, int themeAttribute)", "modifiers": "public static", "return": "int", "signature": "int getStyleId(Context context, int themeAttribute)", "full_signature": "public static int getStyleId(Context context, int themeAttribute)", "class_method_signature": "ThemeUtil.getStyleId(Context context, int themeAttribute)", "testcase": false, "constructor": false}], "file": "MSDKUIKit/MSDKUILib/src/main/java/com/here/msdkui/common/ThemeUtil.java"}, "focal_method": {"identifier": "getDrawable", "parameters": "(Context context, final TypedArray typedArray, final int index)", "modifiers": "public static", "return": "Drawable", "body": "public static Drawable getDrawable(Context context, final TypedArray typedArray, final int index) {\n        final TypedValue value = typedArray.peekValue(index);\n        if (value == null) {\n            return null;\n        }\n        if (value.type == TypedValue.TYPE_REFERENCE || value.type == TypedValue.TYPE_STRING) {\n            // if it is reference to some drawable.\n            return typedArray.getDrawable(index);\n        } else if (value.type == TypedValue.TYPE_INT_COLOR_ARGB8 || value.type == TypedValue.TYPE_INT_COLOR_ARGB4 || value.type ==\n                TypedValue.TYPE_INT_COLOR_RGB8 || value.type == TypedValue.TYPE_INT_COLOR_RGB4) {\n            // if it is reference to some color.\n            return new ColorDrawable(typedArray.getColor(index, 0xFF000000)); // black color\n        } else {\n            throw new IllegalArgumentException(\n                    context.getString(R.string.msdkui_exception_attribute_invalid, index));\n        }\n    }", "signature": "Drawable getDrawable(Context context, final TypedArray typedArray, final int index)", "full_signature": "public static Drawable getDrawable(Context context, final TypedArray typedArray, final int index)", "class_method_signature": "ThemeUtil.getDrawable(Context context, final TypedArray typedArray, final int index)", "testcase": false, "constructor": false, "invocations": ["peekValue", "getDrawable", "getColor", "getString"]}, "repository": {"repo_id": 141680627, "url": "https://github.com/heremaps/msdkui-android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 35, "size": 5559, "license": "licensed"}}