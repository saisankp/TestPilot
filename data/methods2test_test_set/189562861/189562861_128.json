{"test_class": {"identifier": "RedisRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String service = \"com.alibaba.dubbo.test.injvmServie\";", "modifier": "private", "type": "String", "declarator": "service = \"com.alibaba.dubbo.test.injvmServie\"", "var_name": "service"}, {"original_string": "private URL serviceUrl = URL.valueOf(\"redis://redis/\" + service + \"?notify=false&methods=test1,test2\");", "modifier": "private", "type": "URL", "declarator": "serviceUrl = URL.valueOf(\"redis://redis/\" + service + \"?notify=false&methods=test1,test2\")", "var_name": "serviceUrl"}, {"original_string": "private RedisServer redisServer;", "modifier": "private", "type": "RedisServer", "declarator": "redisServer", "var_name": "redisServer"}, {"original_string": "private RedisRegistry redisRegistry;", "modifier": "private", "type": "RedisRegistry", "declarator": "redisRegistry", "var_name": "redisRegistry"}, {"original_string": "private URL registryUrl;", "modifier": "private", "type": "URL", "declarator": "registryUrl", "var_name": "registryUrl"}], "file": "dubbo-registry/dubbo-registry-redis/src/test/java/com/alibaba/dubbo/registry/redis/RedisRegistryTest.java"}, "test_case": {"identifier": "testAvailableWithBackup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAvailableWithBackup() {\n        URL url = URL.valueOf(\"redis://redisOne:8880\").addParameter(BACKUP_KEY, \"redisTwo:8881\");\n        Registry registry = new RedisRegistryFactory().createRegistry(url);\n\n        assertThat(registry.isAvailable(), is(false));\n\n        url = URL.valueOf(this.registryUrl.toFullString()).addParameter(BACKUP_KEY, \"redisTwo:8881\");\n        registry = new RedisRegistryFactory().createRegistry(url);\n\n        assertThat(registry.isAvailable(), is(true));\n    }", "signature": "void testAvailableWithBackup()", "full_signature": "@Test public void testAvailableWithBackup()", "class_method_signature": "RedisRegistryTest.testAvailableWithBackup()", "testcase": true, "constructor": false, "invocations": ["addParameter", "valueOf", "createRegistry", "assertThat", "isAvailable", "is", "addParameter", "valueOf", "toFullString", "createRegistry", "assertThat", "isAvailable", "is"]}, "focal_class": {"identifier": "RedisRegistry", "superclass": "extends FailbackRegistry", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RedisRegistry.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RedisRegistry.class)", "var_name": "logger"}, {"original_string": "private static final int DEFAULT_REDIS_PORT = 6379;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_REDIS_PORT = 6379", "var_name": "DEFAULT_REDIS_PORT"}, {"original_string": "private final static String DEFAULT_ROOT = \"dubbo\";", "modifier": "private final static", "type": "String", "declarator": "DEFAULT_ROOT = \"dubbo\"", "var_name": "DEFAULT_ROOT"}, {"original_string": "private final ScheduledExecutorService expireExecutor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"DubboRegistryExpireTimer\", true));", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "expireExecutor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"DubboRegistryExpireTimer\", true))", "var_name": "expireExecutor"}, {"original_string": "private final ScheduledFuture<?> expireFuture;", "modifier": "private final", "type": "ScheduledFuture<?>", "declarator": "expireFuture", "var_name": "expireFuture"}, {"original_string": "private final String root;", "modifier": "private final", "type": "String", "declarator": "root", "var_name": "root"}, {"original_string": "private final Map<String, JedisPool> jedisPools = new ConcurrentHashMap<String, JedisPool>();", "modifier": "private final", "type": "Map<String, JedisPool>", "declarator": "jedisPools = new ConcurrentHashMap<String, JedisPool>()", "var_name": "jedisPools"}, {"original_string": "private final ConcurrentMap<String, Notifier> notifiers = new ConcurrentHashMap<String, Notifier>();", "modifier": "private final", "type": "ConcurrentMap<String, Notifier>", "declarator": "notifiers = new ConcurrentHashMap<String, Notifier>()", "var_name": "notifiers"}, {"original_string": "private final int reconnectPeriod;", "modifier": "private final", "type": "int", "declarator": "reconnectPeriod", "var_name": "reconnectPeriod"}, {"original_string": "private final int expirePeriod;", "modifier": "private final", "type": "int", "declarator": "expirePeriod", "var_name": "expirePeriod"}, {"original_string": "private volatile boolean admin = false;", "modifier": "private volatile", "type": "boolean", "declarator": "admin = false", "var_name": "admin"}, {"original_string": "private boolean replicate;", "modifier": "private", "type": "boolean", "declarator": "replicate", "var_name": "replicate"}], "methods": [{"identifier": "RedisRegistry", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " RedisRegistry(URL url)", "full_signature": "public  RedisRegistry(URL url)", "class_method_signature": "RedisRegistry.RedisRegistry(URL url)", "testcase": false, "constructor": true}, {"identifier": "deferExpired", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deferExpired()", "full_signature": "private void deferExpired()", "class_method_signature": "RedisRegistry.deferExpired()", "testcase": false, "constructor": false}, {"identifier": "clean", "parameters": "(Jedis jedis)", "modifiers": "private", "return": "void", "signature": "void clean(Jedis jedis)", "full_signature": "private void clean(Jedis jedis)", "class_method_signature": "RedisRegistry.clean(Jedis jedis)", "testcase": false, "constructor": false}, {"identifier": "isAvailable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAvailable()", "full_signature": "@Override public boolean isAvailable()", "class_method_signature": "RedisRegistry.isAvailable()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "RedisRegistry.destroy()", "testcase": false, "constructor": false}, {"identifier": "doRegister", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void doRegister(URL url)", "full_signature": "@Override public void doRegister(URL url)", "class_method_signature": "RedisRegistry.doRegister(URL url)", "testcase": false, "constructor": false}, {"identifier": "doUnregister", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void doUnregister(URL url)", "full_signature": "@Override public void doUnregister(URL url)", "class_method_signature": "RedisRegistry.doUnregister(URL url)", "testcase": false, "constructor": false}, {"identifier": "doSubscribe", "parameters": "(final URL url, final NotifyListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void doSubscribe(final URL url, final NotifyListener listener)", "full_signature": "@Override public void doSubscribe(final URL url, final NotifyListener listener)", "class_method_signature": "RedisRegistry.doSubscribe(final URL url, final NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "doUnsubscribe", "parameters": "(URL url, NotifyListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void doUnsubscribe(URL url, NotifyListener listener)", "full_signature": "@Override public void doUnsubscribe(URL url, NotifyListener listener)", "class_method_signature": "RedisRegistry.doUnsubscribe(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "doNotify", "parameters": "(Jedis jedis, String key)", "modifiers": "private", "return": "void", "signature": "void doNotify(Jedis jedis, String key)", "full_signature": "private void doNotify(Jedis jedis, String key)", "class_method_signature": "RedisRegistry.doNotify(Jedis jedis, String key)", "testcase": false, "constructor": false}, {"identifier": "doNotify", "parameters": "(Jedis jedis, Collection<String> keys, URL url, Collection<NotifyListener> listeners)", "modifiers": "private", "return": "void", "signature": "void doNotify(Jedis jedis, Collection<String> keys, URL url, Collection<NotifyListener> listeners)", "full_signature": "private void doNotify(Jedis jedis, Collection<String> keys, URL url, Collection<NotifyListener> listeners)", "class_method_signature": "RedisRegistry.doNotify(Jedis jedis, Collection<String> keys, URL url, Collection<NotifyListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "toServiceName", "parameters": "(String categoryPath)", "modifiers": "private", "return": "String", "signature": "String toServiceName(String categoryPath)", "full_signature": "private String toServiceName(String categoryPath)", "class_method_signature": "RedisRegistry.toServiceName(String categoryPath)", "testcase": false, "constructor": false}, {"identifier": "toCategoryName", "parameters": "(String categoryPath)", "modifiers": "private", "return": "String", "signature": "String toCategoryName(String categoryPath)", "full_signature": "private String toCategoryName(String categoryPath)", "class_method_signature": "RedisRegistry.toCategoryName(String categoryPath)", "testcase": false, "constructor": false}, {"identifier": "toServicePath", "parameters": "(String categoryPath)", "modifiers": "private", "return": "String", "signature": "String toServicePath(String categoryPath)", "full_signature": "private String toServicePath(String categoryPath)", "class_method_signature": "RedisRegistry.toServicePath(String categoryPath)", "testcase": false, "constructor": false}, {"identifier": "toServicePath", "parameters": "(URL url)", "modifiers": "private", "return": "String", "signature": "String toServicePath(URL url)", "full_signature": "private String toServicePath(URL url)", "class_method_signature": "RedisRegistry.toServicePath(URL url)", "testcase": false, "constructor": false}, {"identifier": "toCategoryPath", "parameters": "(URL url)", "modifiers": "private", "return": "String", "signature": "String toCategoryPath(URL url)", "full_signature": "private String toCategoryPath(URL url)", "class_method_signature": "RedisRegistry.toCategoryPath(URL url)", "testcase": false, "constructor": false}], "file": "dubbo-registry/dubbo-registry-redis/src/main/java/com/alibaba/dubbo/registry/redis/RedisRegistry.java"}, "focal_method": {"identifier": "isAvailable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isAvailable() {\n        for (JedisPool jedisPool : jedisPools.values()) {\n            try {\n                Jedis jedis = jedisPool.getResource();\n                try {\n                    if (jedis.isConnected()) {\n                        return true; // At least one single machine is available.\n                    }\n                } finally {\n                    jedis.close();\n                }\n            } catch (Throwable t) {\n            }\n        }\n        return false;\n    }", "signature": "boolean isAvailable()", "full_signature": "@Override public boolean isAvailable()", "class_method_signature": "RedisRegistry.isAvailable()", "testcase": false, "constructor": false, "invocations": ["values", "getResource", "isConnected", "close"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}