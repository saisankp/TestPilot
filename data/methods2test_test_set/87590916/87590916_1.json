{"test_class": {"identifier": "HttpRequestDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Configuration config = null;", "modifier": "private static", "type": "Configuration", "declarator": "config = null", "var_name": "config"}, {"original_string": "private static Configuration anonConfig = null;", "modifier": "private static", "type": "Configuration", "declarator": "anonConfig = null", "var_name": "anonConfig"}, {"original_string": "private TestHttpQueryDecoder decoder = null;", "modifier": "private", "type": "TestHttpQueryDecoder", "declarator": "decoder = null", "var_name": "decoder"}, {"original_string": "private List<Object> results = new ArrayList<>();", "modifier": "private", "type": "List<Object>", "declarator": "results = new ArrayList<>()", "var_name": "results"}, {"original_string": "private static String cookie = null;", "modifier": "private static", "type": "String", "declarator": "cookie = null", "var_name": "cookie"}], "file": "server/src/test/java/qonduit/netty/http/HttpRequestDecoderTest.java"}, "test_case": {"identifier": "testVersionPost", "parameters": "()", "modifiers": "@Test(expected = QonduitException.class) public", "return": "void", "body": "@Test(expected = QonduitException.class)\n    public void testVersionPost() throws Exception {\n        decoder = new TestHttpQueryDecoder(config);\n        DefaultFullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/version\");\n        addCookie(request);\n        decoder.decode(null, request, results);\n        Assert.assertEquals(1, results.size());\n        Assert.assertEquals(\"VersionRequest\", results.iterator().next().getClass().getSimpleName());\n    }", "signature": "void testVersionPost()", "full_signature": "@Test(expected = QonduitException.class) public void testVersionPost()", "class_method_signature": "HttpRequestDecoderTest.testVersionPost()", "testcase": true, "constructor": false, "invocations": ["addCookie", "decode", "assertEquals", "size", "assertEquals", "getSimpleName", "getClass", "next", "iterator"]}, "focal_class": {"identifier": "HttpRequestDecoder", "superclass": "extends MessageToMessageDecoder<FullHttpRequest>", "interfaces": "implements HttpHandler", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(HttpRequestDecoder.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(HttpRequestDecoder.class)", "var_name": "LOG"}, {"original_string": "private static final String LOG_RECEIVED_REQUEST = \"Received HTTP request {}\";", "modifier": "private static final", "type": "String", "declarator": "LOG_RECEIVED_REQUEST = \"Received HTTP request {}\"", "var_name": "LOG_RECEIVED_REQUEST"}, {"original_string": "private static final String NO_AUTHORIZATIONS = \"\";", "modifier": "private static final", "type": "String", "declarator": "NO_AUTHORIZATIONS = \"\"", "var_name": "NO_AUTHORIZATIONS"}, {"original_string": "private final Configuration conf;", "modifier": "private final", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private boolean anonymousAccessAllowed = false;", "modifier": "private", "type": "boolean", "declarator": "anonymousAccessAllowed = false", "var_name": "anonymousAccessAllowed"}, {"original_string": "private final String nonSecureRedirectAddress;", "modifier": "private final", "type": "String", "declarator": "nonSecureRedirectAddress", "var_name": "nonSecureRedirectAddress"}], "methods": [{"identifier": "HttpRequestDecoder", "parameters": "(Configuration config)", "modifiers": "public", "return": "", "signature": " HttpRequestDecoder(Configuration config)", "full_signature": "public  HttpRequestDecoder(Configuration config)", "class_method_signature": "HttpRequestDecoder.HttpRequestDecoder(Configuration config)", "testcase": false, "constructor": true}, {"identifier": "getSessionId", "parameters": "(FullHttpRequest msg, boolean anonymousAccessAllowed)", "modifiers": "public static", "return": "String", "signature": "String getSessionId(FullHttpRequest msg, boolean anonymousAccessAllowed)", "full_signature": "public static String getSessionId(FullHttpRequest msg, boolean anonymousAccessAllowed)", "class_method_signature": "HttpRequestDecoder.getSessionId(FullHttpRequest msg, boolean anonymousAccessAllowed)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(ChannelHandlerContext ctx, FullHttpRequest msg, List<Object> out)", "modifiers": "@Override protected", "return": "void", "signature": "void decode(ChannelHandlerContext ctx, FullHttpRequest msg, List<Object> out)", "full_signature": "@Override protected void decode(ChannelHandlerContext ctx, FullHttpRequest msg, List<Object> out)", "class_method_signature": "HttpRequestDecoder.decode(ChannelHandlerContext ctx, FullHttpRequest msg, List<Object> out)", "testcase": false, "constructor": false}], "file": "server/src/main/java/qonduit/netty/http/HttpRequestDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(ChannelHandlerContext ctx, FullHttpRequest msg, List<Object> out)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void decode(ChannelHandlerContext ctx, FullHttpRequest msg, List<Object> out) throws Exception {\n\n        LOG.trace(LOG_RECEIVED_REQUEST, msg);\n\n        final String uri = msg.uri();\n        final QueryStringDecoder decoder = new QueryStringDecoder(uri);\n        if (decoder.path().equals(nonSecureRedirectAddress)) {\n            out.add(new StrictTransportResponse());\n            return;\n        }\n\n        final String sessionId = getSessionId(msg, this.anonymousAccessAllowed);\n        LOG.trace(\"SessionID: \" + sessionId);\n\n        if (decoder.path().equals(\"/login\")) {\n            if (msg.method().equals(HttpMethod.GET)) {\n                out.add(new X509LoginRequest());\n            } else if (msg.method().equals(HttpMethod.POST)) {\n                ByteBuf body = msg.content();\n                byte[] content = null;\n                if (null != body) {\n                    content = new byte[body.readableBytes()];\n                    body.readBytes(content);\n                }\n                BasicAuthLoginRequest request = BasicAuthLoginRequest.parseBody(content);\n                request.validate();\n                out.add(request);\n            } else {\n                QonduitException e = new QonduitException(HttpResponseStatus.METHOD_NOT_ALLOWED.code(),\n                        \"unhandled method type\", \"\");\n                e.addResponseHeader(HttpHeaderNames.ALLOW.toString(),\n                        HttpMethod.GET.name() + \",\" + HttpMethod.POST.name());\n                LOG.warn(\"Unhandled HTTP request type {}\", msg.method());\n                throw e;\n            }\n        } else {\n            QonduitException e = new QonduitException(HttpResponseStatus.SEE_OTHER.code(), \"Unknown request path\", \"\");\n            LOG.warn(\"Unknown request path {}\", decoder.path());\n            throw e;\n        }\n\n    }", "signature": "void decode(ChannelHandlerContext ctx, FullHttpRequest msg, List<Object> out)", "full_signature": "@Override protected void decode(ChannelHandlerContext ctx, FullHttpRequest msg, List<Object> out)", "class_method_signature": "HttpRequestDecoder.decode(ChannelHandlerContext ctx, FullHttpRequest msg, List<Object> out)", "testcase": false, "constructor": false, "invocations": ["trace", "uri", "equals", "path", "add", "getSessionId", "trace", "equals", "path", "equals", "method", "add", "equals", "method", "content", "readableBytes", "readBytes", "parseBody", "validate", "add", "code", "addResponseHeader", "toString", "name", "name", "warn", "method", "code", "warn", "path"]}, "repository": {"repo_id": 87590916, "url": "https://github.com/NationalSecurityAgency/qonduit", "stars": 51, "created": "4/7/2017 10:14:58 PM +00:00", "updates": "2020-01-01T19:51:03+00:00", "fork": "False", "license": "licensed"}}