{"test_class": {"identifier": "CleanupPersistenceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final EntityId ID = DefaultEntityId.of(\"thing:eclipse:ditto\");", "modifier": "private static final", "type": "EntityId", "declarator": "ID = DefaultEntityId.of(\"thing:eclipse:ditto\")", "var_name": "ID"}, {"original_string": "private static final JsonObject KNOWN_JSON = JsonObject.newBuilder()\n            .set(Command.JsonFields.TYPE, CleanupPersistence.TYPE)\n            .set(CleanupCommand.JsonFields.ENTITY_ID, ID.toString())\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "KNOWN_JSON = JsonObject.newBuilder()\n            .set(Command.JsonFields.TYPE, CleanupPersistence.TYPE)\n            .set(CleanupCommand.JsonFields.ENTITY_ID, ID.toString())\n            .build()", "var_name": "KNOWN_JSON"}, {"original_string": "private static final DittoHeaders HEADERS = DittoHeaders.newBuilder().correlationId(\"123\").build();", "modifier": "private static final", "type": "DittoHeaders", "declarator": "HEADERS = DittoHeaders.newBuilder().correlationId(\"123\").build()", "var_name": "HEADERS"}], "file": "signals/commands/cleanup/src/test/java/org/eclipse/ditto/signals/commands/cleanup/CleanupPersistenceTest.java"}, "test_case": {"identifier": "toJsonReturnsExpected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toJsonReturnsExpected() {\n        final JsonObject jsonObject = CleanupPersistence.of(ID, DittoHeaders.empty()).toJson();\n        assertThat(jsonObject).isEqualTo(KNOWN_JSON);\n    }", "signature": "void toJsonReturnsExpected()", "full_signature": "@Test public void toJsonReturnsExpected()", "class_method_signature": "CleanupPersistenceTest.toJsonReturnsExpected()", "testcase": true, "constructor": false, "invocations": ["toJson", "of", "empty", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "CleanupPersistence", "superclass": "extends AbstractCommand<CleanupPersistence>", "interfaces": "implements CleanupCommand<CleanupPersistence>", "fields": [{"original_string": "static final String NAME = \"cleanupPersistence\";", "modifier": "static final", "type": "String", "declarator": "NAME = \"cleanupPersistence\"", "var_name": "NAME"}, {"original_string": "public static final String TYPE = TYPE_PREFIX + NAME;", "modifier": "public static final", "type": "String", "declarator": "TYPE = TYPE_PREFIX + NAME", "var_name": "TYPE"}, {"original_string": "private final EntityId entityId;", "modifier": "private final", "type": "EntityId", "declarator": "entityId", "var_name": "entityId"}], "methods": [{"identifier": "CleanupPersistence", "parameters": "(final EntityId entityId, final DittoHeaders dittoHeaders)", "modifiers": "private", "return": "", "signature": " CleanupPersistence(final EntityId entityId, final DittoHeaders dittoHeaders)", "full_signature": "private  CleanupPersistence(final EntityId entityId, final DittoHeaders dittoHeaders)", "class_method_signature": "CleanupPersistence.CleanupPersistence(final EntityId entityId, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final EntityId entityId, final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "CleanupPersistence", "signature": "CleanupPersistence of(final EntityId entityId, final DittoHeaders dittoHeaders)", "full_signature": "public static CleanupPersistence of(final EntityId entityId, final DittoHeaders dittoHeaders)", "class_method_signature": "CleanupPersistence.of(final EntityId entityId, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "getEntityId", "parameters": "()", "modifiers": "@Override public", "return": "EntityId", "signature": "EntityId getEntityId()", "full_signature": "@Override public EntityId getEntityId()", "class_method_signature": "CleanupPersistence.getEntityId()", "testcase": false, "constructor": false}, {"identifier": "setDittoHeaders", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "@Override public", "return": "CleanupPersistence", "signature": "CleanupPersistence setDittoHeaders(final DittoHeaders dittoHeaders)", "full_signature": "@Override public CleanupPersistence setDittoHeaders(final DittoHeaders dittoHeaders)", "class_method_signature": "CleanupPersistence.setDittoHeaders(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "appendPayload", "parameters": "(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> predicate)", "modifiers": "@Override protected", "return": "void", "signature": "void appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> predicate)", "full_signature": "@Override protected void appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> predicate)", "class_method_signature": "CleanupPersistence.appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> predicate)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "CleanupPersistence", "signature": "CleanupPersistence fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "full_signature": "public static CleanupPersistence fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "class_method_signature": "CleanupPersistence.fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "canEqual", "parameters": "(@Nullable final Object other)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean canEqual(@Nullable final Object other)", "full_signature": "@Override protected boolean canEqual(@Nullable final Object other)", "class_method_signature": "CleanupPersistence.canEqual(@Nullable final Object other)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "CleanupPersistence.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "CleanupPersistence.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CleanupPersistence.toString()", "testcase": false, "constructor": false}], "file": "signals/commands/cleanup/src/main/java/org/eclipse/ditto/signals/commands/cleanup/CleanupPersistence.java"}, "focal_method": {"identifier": "of", "parameters": "(final EntityId entityId, final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "CleanupPersistence", "body": "public static CleanupPersistence of(final EntityId entityId, final DittoHeaders dittoHeaders) {\n        return new CleanupPersistence(entityId, dittoHeaders);\n    }", "signature": "CleanupPersistence of(final EntityId entityId, final DittoHeaders dittoHeaders)", "full_signature": "public static CleanupPersistence of(final EntityId entityId, final DittoHeaders dittoHeaders)", "class_method_signature": "CleanupPersistence.of(final EntityId entityId, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}