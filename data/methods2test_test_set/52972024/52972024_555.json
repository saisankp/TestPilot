{"test_class": {"identifier": "UpdateAsyncOperationTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UpdateAsyncOperationTask testTask;", "modifier": "private", "type": "UpdateAsyncOperationTask", "declarator": "testTask", "var_name": "testTask"}, {"original_string": "private IStorageConnection connection;", "modifier": "private", "type": "IStorageConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private IDatabaseTask targetTask;", "modifier": "private", "type": "IDatabaseTask", "declarator": "targetTask", "var_name": "targetTask"}, {"original_string": "private IField doneFlagField;", "modifier": "private", "type": "IField", "declarator": "doneFlagField", "var_name": "doneFlagField"}, {"original_string": "private IField documentField;", "modifier": "private", "type": "IField", "declarator": "documentField", "var_name": "documentField"}, {"original_string": "private IField collectionNameField;", "modifier": "private", "type": "IField", "declarator": "collectionNameField", "var_name": "collectionNameField"}], "file": "CoreFeatures/Database/AsyncOperationCollection/src/test/java/info/smart_tools/smartactors/database/async_operation_collection/task/UpdateAsyncOperationTaskTest.java"}, "test_case": {"identifier": "MustInCorrectPrepareWhenDocumentFieldInThrowReadValueException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void MustInCorrectPrepareWhenDocumentFieldInThrowReadValueException() throws ReadValueException, InvalidArgumentException {\n        IObject query = mock(IObject.class);\n\n        when(documentField.in(query)).thenThrow(new ReadValueException());\n\n        try {\n            testTask.prepare(query);\n        } catch (TaskPrepareException e) {\n            verify(documentField).in(query);\n            return;\n        }\n        assertTrue(false);\n    }", "signature": "void MustInCorrectPrepareWhenDocumentFieldInThrowReadValueException()", "full_signature": "@Test public void MustInCorrectPrepareWhenDocumentFieldInThrowReadValueException()", "class_method_signature": "UpdateAsyncOperationTaskTest.MustInCorrectPrepareWhenDocumentFieldInThrowReadValueException()", "testcase": true, "constructor": false, "invocations": ["mock", "thenThrow", "when", "in", "prepare", "in", "verify", "assertTrue"]}, "focal_class": {"identifier": "UpdateAsyncOperationTask", "superclass": "", "interfaces": "implements IDatabaseTask", "fields": [{"original_string": "private IStorageConnection connection;", "modifier": "private", "type": "IStorageConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private IDatabaseTask upsertTask;", "modifier": "private", "type": "IDatabaseTask", "declarator": "upsertTask", "var_name": "upsertTask"}, {"original_string": "private IField doneFlagField;", "modifier": "private", "type": "IField", "declarator": "doneFlagField", "var_name": "doneFlagField"}, {"original_string": "private IField documentField;", "modifier": "private", "type": "IField", "declarator": "documentField", "var_name": "documentField"}, {"original_string": "private IField collectionNameField;", "modifier": "private", "type": "IField", "declarator": "collectionNameField", "var_name": "collectionNameField"}], "methods": [{"identifier": "UpdateAsyncOperationTask", "parameters": "(final IStorageConnection connection)", "modifiers": "public", "return": "", "signature": " UpdateAsyncOperationTask(final IStorageConnection connection)", "full_signature": "public  UpdateAsyncOperationTask(final IStorageConnection connection)", "class_method_signature": "UpdateAsyncOperationTask.UpdateAsyncOperationTask(final IStorageConnection connection)", "testcase": false, "constructor": true}, {"identifier": "prepare", "parameters": "(final IObject query)", "modifiers": "@Override public", "return": "void", "signature": "void prepare(final IObject query)", "full_signature": "@Override public void prepare(final IObject query)", "class_method_signature": "UpdateAsyncOperationTask.prepare(final IObject query)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "UpdateAsyncOperationTask.execute()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database/AsyncOperationCollection/src/main/java/info/smart_tools/smartactors/database/async_operation_collection/task/UpdateAsyncOperationTask.java"}, "focal_method": {"identifier": "prepare", "parameters": "(final IObject query)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void prepare(final IObject query) throws TaskPrepareException {\n\n        try {\n            IObject document = documentField.in(query);\n            doneFlagField.out(document, true);\n            upsertTask = IOC.resolve(Keys.getOrAdd(\"db.collection.upsert\"),\n                    connection,\n                    collectionNameField.in(query),\n                    document);\n        } catch (ReadValueException | ChangeValueException | ResolutionException | InvalidArgumentException e) {\n            throw new TaskPrepareException(\"Can't prepare query for update into async operation collection\", e);\n        }\n    }", "signature": "void prepare(final IObject query)", "full_signature": "@Override public void prepare(final IObject query)", "class_method_signature": "UpdateAsyncOperationTask.prepare(final IObject query)", "testcase": false, "constructor": false, "invocations": ["in", "out", "resolve", "getOrAdd", "in"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}