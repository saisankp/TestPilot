{"test_class": {"identifier": "DITStructureRuleTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/schema/DITStructureRuleTest.java"}, "test_case": {"identifier": "parse", "parameters": "(final DITStructureRule structureRule, final String definition)", "modifiers": "@Test(groups = \"schema\", dataProvider = \"definitions\") public", "return": "void", "body": "@Test(groups = \"schema\", dataProvider = \"definitions\")\n  public void parse(final DITStructureRule structureRule, final String definition)\n    throws Exception\n  {\n    final DITStructureRule parsed = DITStructureRule.parse(definition);\n    Assert.assertEquals(structureRule, parsed);\n    Assert.assertEquals(definition, parsed.format());\n    Assert.assertEquals(structureRule.format(), parsed.format());\n  }", "signature": "void parse(final DITStructureRule structureRule, final String definition)", "full_signature": "@Test(groups = \"schema\", dataProvider = \"definitions\") public void parse(final DITStructureRule structureRule, final String definition)", "class_method_signature": "DITStructureRuleTest.parse(final DITStructureRule structureRule, final String definition)", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals", "assertEquals", "format", "assertEquals", "format", "format"]}, "focal_class": {"identifier": "DITStructureRule", "superclass": "extends AbstractNamedSchemaElement", "interfaces": "", "fields": [{"original_string": "private static final int HASH_CODE_SEED = 1153;", "modifier": "private static final", "type": "int", "declarator": "HASH_CODE_SEED = 1153", "var_name": "HASH_CODE_SEED"}, {"original_string": "private static final Pattern DEFINITION_PATTERN = Pattern.compile(\n    WSP_REGEX + \"\\\\(\" +\n      WSP_REGEX + \"(\\\\p{Digit}+)\" +\n      WSP_REGEX + \"(?:NAME (?:'([^']+)'|\\\\(([^\\\\)]+)\\\\)))?\" +\n      WSP_REGEX + \"(?:DESC '([^']*)')?\" +\n      WSP_REGEX + \"(OBSOLETE)?\" +\n      WSP_REGEX + \"(?:FORM (\" + NO_WSP_REGEX + \"))?\" +\n      WSP_REGEX + \"(?:SUP (?:(\" + NO_WSP_REGEX + \")|\\\\(([^\\\\)]+)\\\\)))?\" +\n      WSP_REGEX + \"(?:(X-[^ ]+.*))?\" +\n      WSP_REGEX + \"\\\\)\" + WSP_REGEX);", "modifier": "private static final", "type": "Pattern", "declarator": "DEFINITION_PATTERN = Pattern.compile(\n    WSP_REGEX + \"\\\\(\" +\n      WSP_REGEX + \"(\\\\p{Digit}+)\" +\n      WSP_REGEX + \"(?:NAME (?:'([^']+)'|\\\\(([^\\\\)]+)\\\\)))?\" +\n      WSP_REGEX + \"(?:DESC '([^']*)')?\" +\n      WSP_REGEX + \"(OBSOLETE)?\" +\n      WSP_REGEX + \"(?:FORM (\" + NO_WSP_REGEX + \"))?\" +\n      WSP_REGEX + \"(?:SUP (?:(\" + NO_WSP_REGEX + \")|\\\\(([^\\\\)]+)\\\\)))?\" +\n      WSP_REGEX + \"(?:(X-[^ ]+.*))?\" +\n      WSP_REGEX + \"\\\\)\" + WSP_REGEX)", "var_name": "DEFINITION_PATTERN"}, {"original_string": "private final int id;", "modifier": "private final", "type": "int", "declarator": "id", "var_name": "id"}, {"original_string": "private String nameForm;", "modifier": "private", "type": "String", "declarator": "nameForm", "var_name": "nameForm"}, {"original_string": "private int[] superiorRules;", "modifier": "private", "type": "int[]", "declarator": "superiorRules", "var_name": "superiorRules"}], "methods": [{"identifier": "DITStructureRule", "parameters": "(final int i)", "modifiers": "public", "return": "", "signature": " DITStructureRule(final int i)", "full_signature": "public  DITStructureRule(final int i)", "class_method_signature": "DITStructureRule.DITStructureRule(final int i)", "testcase": false, "constructor": true}, {"identifier": "DITStructureRule", "parameters": "(\n    final int id,\n    final String[] names,\n    final String description,\n    final boolean obsolete,\n    final String nameForm,\n    final int[] superiorRules,\n    final Extensions extensions)", "modifiers": "public", "return": "", "signature": " DITStructureRule(\n    final int id,\n    final String[] names,\n    final String description,\n    final boolean obsolete,\n    final String nameForm,\n    final int[] superiorRules,\n    final Extensions extensions)", "full_signature": "public  DITStructureRule(\n    final int id,\n    final String[] names,\n    final String description,\n    final boolean obsolete,\n    final String nameForm,\n    final int[] superiorRules,\n    final Extensions extensions)", "class_method_signature": "DITStructureRule.DITStructureRule(\n    final int id,\n    final String[] names,\n    final String description,\n    final boolean obsolete,\n    final String nameForm,\n    final int[] superiorRules,\n    final Extensions extensions)", "testcase": false, "constructor": true}, {"identifier": "getID", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getID()", "full_signature": "public int getID()", "class_method_signature": "DITStructureRule.getID()", "testcase": false, "constructor": false}, {"identifier": "getNameForm", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNameForm()", "full_signature": "public String getNameForm()", "class_method_signature": "DITStructureRule.getNameForm()", "testcase": false, "constructor": false}, {"identifier": "setNameForm", "parameters": "(final String s)", "modifiers": "public", "return": "void", "signature": "void setNameForm(final String s)", "full_signature": "public void setNameForm(final String s)", "class_method_signature": "DITStructureRule.setNameForm(final String s)", "testcase": false, "constructor": false}, {"identifier": "getSuperiorRules", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getSuperiorRules()", "full_signature": "public int[] getSuperiorRules()", "class_method_signature": "DITStructureRule.getSuperiorRules()", "testcase": false, "constructor": false}, {"identifier": "setSuperiorRules", "parameters": "(final int[] i)", "modifiers": "public", "return": "void", "signature": "void setSuperiorRules(final int[] i)", "full_signature": "public void setSuperiorRules(final int[] i)", "class_method_signature": "DITStructureRule.setSuperiorRules(final int[] i)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String definition)", "modifiers": "public static", "return": "DITStructureRule", "signature": "DITStructureRule parse(final String definition)", "full_signature": "public static DITStructureRule parse(final String definition)", "class_method_signature": "DITStructureRule.parse(final String definition)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String format()", "full_signature": "@Override public String format()", "class_method_signature": "DITStructureRule.format()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "DITStructureRule.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DITStructureRule.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DITStructureRule.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/schema/DITStructureRule.java"}, "focal_method": {"identifier": "parse", "parameters": "(final String definition)", "modifiers": "public static", "return": "DITStructureRule", "body": "public static DITStructureRule parse(final String definition)\n    throws ParseException\n  {\n    final Matcher m = DEFINITION_PATTERN.matcher(definition);\n    if (!m.matches()) {\n      throw new ParseException(\"Invalid DIT structure rule definition: \" + definition, definition.length());\n    }\n\n    final DITStructureRule dsrd = new DITStructureRule(Integer.parseInt(m.group(1).trim()));\n\n    // CheckStyle:MagicNumber OFF\n    // parse names\n    if (m.group(2) != null) {\n      dsrd.setNames(SchemaUtils.parseDescriptors(m.group(2).trim()));\n    } else if (m.group(3) != null) {\n      dsrd.setNames(SchemaUtils.parseDescriptors(m.group(3).trim()));\n    }\n\n    dsrd.setDescription(m.group(4) != null ? m.group(4).trim() : null);\n    dsrd.setObsolete(m.group(5) != null);\n    dsrd.setNameForm(m.group(6) != null ? m.group(6).trim() : null);\n\n    // parse superior rules\n    if (m.group(7) != null) {\n      dsrd.setSuperiorRules(SchemaUtils.parseNumbers(m.group(7).trim()));\n    } else if (m.group(8) != null) {\n      dsrd.setSuperiorRules(SchemaUtils.parseNumbers(m.group(8).trim()));\n    }\n\n    // parse extensions\n    if (m.group(9) != null) {\n      dsrd.setExtensions(Extensions.parse(m.group(9).trim()));\n    }\n    return dsrd;\n    // CheckStyle:MagicNumber ON\n  }", "signature": "DITStructureRule parse(final String definition)", "full_signature": "public static DITStructureRule parse(final String definition)", "class_method_signature": "DITStructureRule.parse(final String definition)", "testcase": false, "constructor": false, "invocations": ["matcher", "matches", "length", "parseInt", "trim", "group", "group", "setNames", "parseDescriptors", "trim", "group", "group", "setNames", "parseDescriptors", "trim", "group", "setDescription", "group", "trim", "group", "setObsolete", "group", "setNameForm", "group", "trim", "group", "group", "setSuperiorRules", "parseNumbers", "trim", "group", "group", "setSuperiorRules", "parseNumbers", "trim", "group", "group", "setExtensions", "parse", "trim", "group"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}