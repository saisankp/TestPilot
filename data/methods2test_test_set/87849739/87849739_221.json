{"test_class": {"identifier": "AmqpClientActorTest", "superclass": "extends AbstractBaseClientActorTest", "interfaces": "", "fields": [{"original_string": "private static final Status.Success CONNECTED_SUCCESS = new Status.Success(BaseClientState.CONNECTED);", "modifier": "private static final", "type": "Status.Success", "declarator": "CONNECTED_SUCCESS = new Status.Success(BaseClientState.CONNECTED)", "var_name": "CONNECTED_SUCCESS"}, {"original_string": "private static final Status.Success DISCONNECTED_SUCCESS = new Status.Success(BaseClientState.DISCONNECTED);", "modifier": "private static final", "type": "Status.Success", "declarator": "DISCONNECTED_SUCCESS = new Status.Success(BaseClientState.DISCONNECTED)", "var_name": "DISCONNECTED_SUCCESS"}, {"original_string": "private static final JMSException JMS_EXCEPTION = new JMSException(\"FAIL\");", "modifier": "private static final", "type": "JMSException", "declarator": "JMS_EXCEPTION = new JMSException(\"FAIL\")", "var_name": "JMS_EXCEPTION"}, {"original_string": "private static final URI DUMMY = URI.create(\"amqp://test:1234\");", "modifier": "private static final", "type": "URI", "declarator": "DUMMY = URI.create(\"amqp://test:1234\")", "var_name": "DUMMY"}, {"original_string": "private static final ConnectionId CONNECTION_ID = TestConstants.createRandomConnectionId();", "modifier": "private static final", "type": "ConnectionId", "declarator": "CONNECTION_ID = TestConstants.createRandomConnectionId()", "var_name": "CONNECTION_ID"}, {"original_string": "private static final ConnectionFailedException SESSION_EXCEPTION =\n            ConnectionFailedException.newBuilder(CONNECTION_ID).build();", "modifier": "private static final", "type": "ConnectionFailedException", "declarator": "SESSION_EXCEPTION =\n            ConnectionFailedException.newBuilder(CONNECTION_ID).build()", "var_name": "SESSION_EXCEPTION"}, {"original_string": "private static ActorSystem actorSystem;", "modifier": "private static", "type": "ActorSystem", "declarator": "actorSystem", "var_name": "actorSystem"}, {"original_string": "private static Connection connection;", "modifier": "private static", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock\n    private final JmsConnection mockConnection = Mockito.mock(JmsConnection.class);", "modifier": "@Mock\n    private final", "type": "JmsConnection", "declarator": "mockConnection = Mockito.mock(JmsConnection.class)", "var_name": "mockConnection"}, {"original_string": "private final JmsConnectionFactory jmsConnectionFactory = (connection1, exceptionListener) -> mockConnection;", "modifier": "private final", "type": "JmsConnectionFactory", "declarator": "jmsConnectionFactory = (connection1, exceptionListener) -> mockConnection", "var_name": "jmsConnectionFactory"}, {"original_string": "@Mock\n    private final JmsSession mockSession = Mockito.mock(JmsSession.class);", "modifier": "@Mock\n    private final", "type": "JmsSession", "declarator": "mockSession = Mockito.mock(JmsSession.class)", "var_name": "mockSession"}, {"original_string": "@Mock\n    private final JmsMessageConsumer mockConsumer = Mockito.mock(JmsMessageConsumer.class);", "modifier": "@Mock\n    private final", "type": "JmsMessageConsumer", "declarator": "mockConsumer = Mockito.mock(JmsMessageConsumer.class)", "var_name": "mockConsumer"}, {"original_string": "private final List<MessageProducer> mockProducers = new LinkedList<>();", "modifier": "private final", "type": "List<MessageProducer>", "declarator": "mockProducers = new LinkedList<>()", "var_name": "mockProducers"}, {"original_string": "private ArgumentCaptor<JmsConnectionListener> listenerArgumentCaptor;", "modifier": "private", "type": "ArgumentCaptor<JmsConnectionListener>", "declarator": "listenerArgumentCaptor", "var_name": "listenerArgumentCaptor"}, {"original_string": "private TestProbe connectionActorProbe;", "modifier": "private", "type": "TestProbe", "declarator": "connectionActorProbe", "var_name": "connectionActorProbe"}, {"original_string": "private ActorRef connectionActor;", "modifier": "private", "type": "ActorRef", "declarator": "connectionActor", "var_name": "connectionActor"}], "file": "services/connectivity/messaging/src/test/java/org/eclipse/ditto/services/connectivity/messaging/amqp/AmqpClientActorTest.java"}, "test_case": {"identifier": "testConnectionRestoredExpectRecreateSession", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConnectionRestoredExpectRecreateSession() throws JMSException {\n\n        final Target target = TestConstants.Targets.TWIN_TARGET;\n        final JmsMessageConsumer recoveredConsumer = Mockito.mock(JmsMessageConsumer.class);\n        final JmsSession newSession = Mockito.mock(JmsSession.class, withSettings().name(\"recoveredSession\"));\n\n        when(mockSession.isClosed()).thenReturn(true); // existing session was closed\n        doReturn(mockSession) // initial session\n                .doReturn(newSession) // recovered session\n                .when(mockConnection)\n                .createSession(anyInt());\n        prepareSession(newSession, recoveredConsumer);\n\n        new TestKit(actorSystem) {{\n            final Props props =\n                    AmqpClientActor.propsForTests(connection, getRef(), getRef(), (ac, el) -> mockConnection);\n            final ActorRef amqpClientActor = actorSystem.actorOf(props);\n\n            // connect\n            amqpClientActor.tell(OpenConnection.of(CONNECTION_ID, DittoHeaders.empty()), getRef());\n            expectMsg(CONNECTED_SUCCESS);\n\n            // capture connection listener to close session later\n            final ArgumentCaptor<JmsConnectionListener> captor = ArgumentCaptor.forClass(JmsConnectionListener.class);\n            verify(mockConnection).addConnectionListener(captor.capture());\n            final JmsConnectionListener jmsConnectionListener = captor.getValue();\n\n            // verify everything is setup correctly by publishing an event\n            sendThingEventAndExpectPublish(amqpClientActor, target, () -> getProducerForAddress(target.getAddress()));\n            // verify message is consumed and forwarded to concierge\n            consumeMockMessage(mockConsumer);\n            expectMsgClass(Command.class);\n\n            // now close session\n            jmsConnectionListener.onConnectionRestored(URI.create(\"amqp://broker:5671\"));\n            verify(mockConnection, timeout(2000).times(2)).createSession(anyInt());\n\n            // close is called on old session\n            verify(mockSession, timeout(2000).times(2)).close();\n\n            // verify publishing an event works with new session/producer\n            sendThingEventAndExpectPublish(amqpClientActor, target, () -> getProducerForAddress(target.getAddress()));\n\n            // verify message is consumed with newly created consumer\n            consumeMockMessage(recoveredConsumer);\n            expectMsgClass(Command.class);\n        }};\n    }", "signature": "void testConnectionRestoredExpectRecreateSession()", "full_signature": "@Test public void testConnectionRestoredExpectRecreateSession()", "class_method_signature": "AmqpClientActorTest.testConnectionRestoredExpectRecreateSession()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "name", "withSettings", "thenReturn", "when", "isClosed", "createSession", "when", "doReturn", "doReturn", "anyInt", "prepareSession", "propsForTests", "getRef", "getRef", "actorOf", "tell", "of", "empty", "getRef", "expectMsg", "forClass", "addConnectionListener", "verify", "capture", "getValue", "sendThingEventAndExpectPublish", "getProducerForAddress", "getAddress", "consumeMockMessage", "expectMsgClass", "onConnectionRestored", "create", "createSession", "verify", "times", "timeout", "anyInt", "close", "verify", "times", "timeout", "sendThingEventAndExpectPublish", "getProducerForAddress", "getAddress", "consumeMockMessage", "expectMsgClass"]}, "focal_class": {"identifier": "AmqpClientActor", "superclass": "extends BaseClientActor", "interfaces": "implements ExceptionListener", "fields": [{"original_string": "private static final String SPEC_CONFIG_RECOVER_ON_SESSION_CLOSED = \"recover.on-session-closed\";", "modifier": "private static final", "type": "String", "declarator": "SPEC_CONFIG_RECOVER_ON_SESSION_CLOSED = \"recover.on-session-closed\"", "var_name": "SPEC_CONFIG_RECOVER_ON_SESSION_CLOSED"}, {"original_string": "private static final String SPEC_CONFIG_RECOVER_ON_CONNECTION_RESTORED = \"recover.on-connection-restored\";", "modifier": "private static final", "type": "String", "declarator": "SPEC_CONFIG_RECOVER_ON_CONNECTION_RESTORED = \"recover.on-connection-restored\"", "var_name": "SPEC_CONFIG_RECOVER_ON_CONNECTION_RESTORED"}, {"original_string": "private final JmsConnectionFactory jmsConnectionFactory;", "modifier": "private final", "type": "JmsConnectionFactory", "declarator": "jmsConnectionFactory", "var_name": "jmsConnectionFactory"}, {"original_string": "final StatusReportingListener connectionListener;", "modifier": "final", "type": "StatusReportingListener", "declarator": "connectionListener", "var_name": "connectionListener"}, {"original_string": "@Nullable private JmsConnection jmsConnection;", "modifier": "@Nullable private", "type": "JmsConnection", "declarator": "jmsConnection", "var_name": "jmsConnection"}, {"original_string": "@Nullable private Session jmsSession;", "modifier": "@Nullable private", "type": "Session", "declarator": "jmsSession", "var_name": "jmsSession"}, {"original_string": "@Nullable private ActorRef testConnectionHandler;", "modifier": "@Nullable private", "type": "ActorRef", "declarator": "testConnectionHandler", "var_name": "testConnectionHandler"}, {"original_string": "@Nullable private ActorRef connectConnectionHandler;", "modifier": "@Nullable private", "type": "ActorRef", "declarator": "connectConnectionHandler", "var_name": "connectConnectionHandler"}, {"original_string": "@Nullable private ActorRef disconnectConnectionHandler;", "modifier": "@Nullable private", "type": "ActorRef", "declarator": "disconnectConnectionHandler", "var_name": "disconnectConnectionHandler"}, {"original_string": "private final Map<String, ActorRef> consumerByNamePrefix;", "modifier": "private final", "type": "Map<String, ActorRef>", "declarator": "consumerByNamePrefix", "var_name": "consumerByNamePrefix"}, {"original_string": "private final boolean recoverSessionOnSessionClosed;", "modifier": "private final", "type": "boolean", "declarator": "recoverSessionOnSessionClosed", "var_name": "recoverSessionOnSessionClosed"}, {"original_string": "private final boolean recoverSessionOnConnectionRestored;", "modifier": "private final", "type": "boolean", "declarator": "recoverSessionOnConnectionRestored", "var_name": "recoverSessionOnConnectionRestored"}, {"original_string": "private ActorRef amqpPublisherActor;", "modifier": "private", "type": "ActorRef", "declarator": "amqpPublisherActor", "var_name": "amqpPublisherActor"}], "methods": [{"identifier": "AmqpClientActor", "parameters": "(final Connection connection,\n            final JmsConnectionFactory jmsConnectionFactory,\n            @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "", "signature": " AmqpClientActor(final Connection connection,\n            final JmsConnectionFactory jmsConnectionFactory,\n            @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "full_signature": "@SuppressWarnings(\"unused\") private  AmqpClientActor(final Connection connection,\n            final JmsConnectionFactory jmsConnectionFactory,\n            @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "class_method_signature": "AmqpClientActor.AmqpClientActor(final Connection connection,\n            final JmsConnectionFactory jmsConnectionFactory,\n            @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "testcase": false, "constructor": true}, {"identifier": "AmqpClientActor", "parameters": "(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "", "signature": " AmqpClientActor(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "full_signature": "@SuppressWarnings(\"unused\") private  AmqpClientActor(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "class_method_signature": "AmqpClientActor.AmqpClientActor(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "testcase": false, "constructor": true}, {"identifier": "props", "parameters": "(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "modifiers": "public static", "return": "Props", "signature": "Props props(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "full_signature": "public static Props props(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "class_method_signature": "AmqpClientActor.props(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "testcase": false, "constructor": false}, {"identifier": "propsForTests", "parameters": "(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final JmsConnectionFactory jmsConnectionFactory)", "modifiers": "static", "return": "Props", "signature": "Props propsForTests(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final JmsConnectionFactory jmsConnectionFactory)", "full_signature": "static Props propsForTests(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final JmsConnectionFactory jmsConnectionFactory)", "class_method_signature": "AmqpClientActor.propsForTests(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final JmsConnectionFactory jmsConnectionFactory)", "testcase": false, "constructor": false}, {"identifier": "validateConnection", "parameters": "(final Connection connection)", "modifiers": "private static", "return": "Connection", "signature": "Connection validateConnection(final Connection connection)", "full_signature": "private static Connection validateConnection(final Connection connection)", "class_method_signature": "AmqpClientActor.validateConnection(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "postStop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void postStop()", "full_signature": "@Override public void postStop()", "class_method_signature": "AmqpClientActor.postStop()", "testcase": false, "constructor": false}, {"identifier": "inConnectedState", "parameters": "()", "modifiers": "@Override protected", "return": "FSMStateFunctionBuilder<BaseClientState, BaseClientData>", "signature": "FSMStateFunctionBuilder<BaseClientState, BaseClientData> inConnectedState()", "full_signature": "@Override protected FSMStateFunctionBuilder<BaseClientState, BaseClientData> inConnectedState()", "class_method_signature": "AmqpClientActor.inConnectedState()", "testcase": false, "constructor": false}, {"identifier": "inAnyState", "parameters": "()", "modifiers": "@Override protected", "return": "FSMStateFunctionBuilder<BaseClientState, BaseClientData>", "signature": "FSMStateFunctionBuilder<BaseClientState, BaseClientData> inAnyState()", "full_signature": "@Override protected FSMStateFunctionBuilder<BaseClientState, BaseClientData> inAnyState()", "class_method_signature": "AmqpClientActor.inAnyState()", "testcase": false, "constructor": false}, {"identifier": "doTestConnection", "parameters": "(final TestConnection testConnectionCommand)", "modifiers": "@Override protected", "return": "CompletionStage<Status.Status>", "signature": "CompletionStage<Status.Status> doTestConnection(final TestConnection testConnectionCommand)", "full_signature": "@Override protected CompletionStage<Status.Status> doTestConnection(final TestConnection testConnectionCommand)", "class_method_signature": "AmqpClientActor.doTestConnection(final TestConnection testConnectionCommand)", "testcase": false, "constructor": false}, {"identifier": "doConnectClient", "parameters": "(final Connection connection, @Nullable final ActorRef origin)", "modifiers": "@Override protected", "return": "void", "signature": "void doConnectClient(final Connection connection, @Nullable final ActorRef origin)", "full_signature": "@Override protected void doConnectClient(final Connection connection, @Nullable final ActorRef origin)", "class_method_signature": "AmqpClientActor.doConnectClient(final Connection connection, @Nullable final ActorRef origin)", "testcase": false, "constructor": false}, {"identifier": "doDisconnectClient", "parameters": "(final Connection connection, @Nullable final ActorRef origin)", "modifiers": "@Override protected", "return": "void", "signature": "void doDisconnectClient(final Connection connection, @Nullable final ActorRef origin)", "full_signature": "@Override protected void doDisconnectClient(final Connection connection, @Nullable final ActorRef origin)", "class_method_signature": "AmqpClientActor.doDisconnectClient(final Connection connection, @Nullable final ActorRef origin)", "testcase": false, "constructor": false}, {"identifier": "allocateResourcesOnConnection", "parameters": "(final ClientConnected clientConnected)", "modifiers": "@Override protected", "return": "void", "signature": "void allocateResourcesOnConnection(final ClientConnected clientConnected)", "full_signature": "@Override protected void allocateResourcesOnConnection(final ClientConnected clientConnected)", "class_method_signature": "AmqpClientActor.allocateResourcesOnConnection(final ClientConnected clientConnected)", "testcase": false, "constructor": false}, {"identifier": "startPublisherActor", "parameters": "()", "modifiers": "@Override protected", "return": "CompletionStage<Status.Status>", "signature": "CompletionStage<Status.Status> startPublisherActor()", "full_signature": "@Override protected CompletionStage<Status.Status> startPublisherActor()", "class_method_signature": "AmqpClientActor.startPublisherActor()", "testcase": false, "constructor": false}, {"identifier": "startConsumerActors", "parameters": "(@Nullable final ClientConnected clientConnected)", "modifiers": "@Override protected", "return": "CompletionStage<Status.Status>", "signature": "CompletionStage<Status.Status> startConsumerActors(@Nullable final ClientConnected clientConnected)", "full_signature": "@Override protected CompletionStage<Status.Status> startConsumerActors(@Nullable final ClientConnected clientConnected)", "class_method_signature": "AmqpClientActor.startConsumerActors(@Nullable final ClientConnected clientConnected)", "testcase": false, "constructor": false}, {"identifier": "cleanupResourcesForConnection", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void cleanupResourcesForConnection()", "full_signature": "@Override protected void cleanupResourcesForConnection()", "class_method_signature": "AmqpClientActor.cleanupResourcesForConnection()", "testcase": false, "constructor": false}, {"identifier": "cleanupFurtherResourcesOnConnectionTimeout", "parameters": "(final BaseClientState currentState)", "modifiers": "@Override protected", "return": "void", "signature": "void cleanupFurtherResourcesOnConnectionTimeout(final BaseClientState currentState)", "full_signature": "@Override protected void cleanupFurtherResourcesOnConnectionTimeout(final BaseClientState currentState)", "class_method_signature": "AmqpClientActor.cleanupFurtherResourcesOnConnectionTimeout(final BaseClientState currentState)", "testcase": false, "constructor": false}, {"identifier": "isEventUpToDate", "parameters": "(final Object event, final BaseClientState state,\n            @Nullable final ActorRef sender)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isEventUpToDate(final Object event, final BaseClientState state,\n            @Nullable final ActorRef sender)", "full_signature": "@Override protected boolean isEventUpToDate(final Object event, final BaseClientState state,\n            @Nullable final ActorRef sender)", "class_method_signature": "AmqpClientActor.isEventUpToDate(final Object event, final BaseClientState state,\n            @Nullable final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "getPublisherActor", "parameters": "()", "modifiers": "@Override protected", "return": "ActorRef", "signature": "ActorRef getPublisherActor()", "full_signature": "@Override protected ActorRef getPublisherActor()", "class_method_signature": "AmqpClientActor.getPublisherActor()", "testcase": false, "constructor": false}, {"identifier": "startCommandConsumers", "parameters": "(final List<ConsumerData> consumers, final ActorRef jmsActor)", "modifiers": "private", "return": "void", "signature": "void startCommandConsumers(final List<ConsumerData> consumers, final ActorRef jmsActor)", "full_signature": "private void startCommandConsumers(final List<ConsumerData> consumers, final ActorRef jmsActor)", "class_method_signature": "AmqpClientActor.startCommandConsumers(final List<ConsumerData> consumers, final ActorRef jmsActor)", "testcase": false, "constructor": false}, {"identifier": "startCommandConsumer", "parameters": "(final ConsumerData consumer, final ActorRef messageMappingProcessor,\n            final ActorRef jmsActor)", "modifiers": "private", "return": "void", "signature": "void startCommandConsumer(final ConsumerData consumer, final ActorRef messageMappingProcessor,\n            final ActorRef jmsActor)", "full_signature": "private void startCommandConsumer(final ConsumerData consumer, final ActorRef messageMappingProcessor,\n            final ActorRef jmsActor)", "class_method_signature": "AmqpClientActor.startCommandConsumer(final ConsumerData consumer, final ActorRef messageMappingProcessor,\n            final ActorRef jmsActor)", "testcase": false, "constructor": false}, {"identifier": "stopCommandConsumers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void stopCommandConsumers()", "full_signature": "private void stopCommandConsumers()", "class_method_signature": "AmqpClientActor.stopCommandConsumers()", "testcase": false, "constructor": false}, {"identifier": "getTestConnectionHandler", "parameters": "(final Connection connection)", "modifiers": "private", "return": "ActorRef", "signature": "ActorRef getTestConnectionHandler(final Connection connection)", "full_signature": "private ActorRef getTestConnectionHandler(final Connection connection)", "class_method_signature": "AmqpClientActor.getTestConnectionHandler(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getConnectConnectionHandler", "parameters": "(final Connection connection)", "modifiers": "private", "return": "ActorRef", "signature": "ActorRef getConnectConnectionHandler(final Connection connection)", "full_signature": "private ActorRef getConnectConnectionHandler(final Connection connection)", "class_method_signature": "AmqpClientActor.getConnectConnectionHandler(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getDisconnectConnectionHandler", "parameters": "(final Connection connection)", "modifiers": "private", "return": "ActorRef", "signature": "ActorRef getDisconnectConnectionHandler(final Connection connection)", "full_signature": "private ActorRef getDisconnectConnectionHandler(final Connection connection)", "class_method_signature": "AmqpClientActor.getDisconnectConnectionHandler(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "startConnectionHandlingActor", "parameters": "(final String suffix, final Connection connection)", "modifiers": "private", "return": "ActorRef", "signature": "ActorRef startConnectionHandlingActor(final String suffix, final Connection connection)", "full_signature": "private ActorRef startConnectionHandlingActor(final String suffix, final Connection connection)", "class_method_signature": "AmqpClientActor.startConnectionHandlingActor(final String suffix, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "ensureJmsConnectionClosed", "parameters": "()", "modifiers": "@SuppressWarnings(\"UnusedReturnValue\") private", "return": "CompletableFuture<Void>", "signature": "CompletableFuture<Void> ensureJmsConnectionClosed()", "full_signature": "@SuppressWarnings(\"UnusedReturnValue\") private CompletableFuture<Void> ensureJmsConnectionClosed()", "class_method_signature": "AmqpClientActor.ensureJmsConnectionClosed()", "testcase": false, "constructor": false}, {"identifier": "handleConnectionRestored", "parameters": "(final BaseClientData currentData)", "modifiers": "private", "return": "FSM.State<BaseClientState, BaseClientData>", "signature": "FSM.State<BaseClientState, BaseClientData> handleConnectionRestored(final BaseClientData currentData)", "full_signature": "private FSM.State<BaseClientState, BaseClientData> handleConnectionRestored(final BaseClientData currentData)", "class_method_signature": "AmqpClientActor.handleConnectionRestored(final BaseClientData currentData)", "testcase": false, "constructor": false}, {"identifier": "handleConnectionFailure", "parameters": "(\n            final ConnectionFailureStatusReport statusReport,\n            final BaseClientData currentData)", "modifiers": "private", "return": "FSM.State<BaseClientState, BaseClientData>", "signature": "FSM.State<BaseClientState, BaseClientData> handleConnectionFailure(\n            final ConnectionFailureStatusReport statusReport,\n            final BaseClientData currentData)", "full_signature": "private FSM.State<BaseClientState, BaseClientData> handleConnectionFailure(\n            final ConnectionFailureStatusReport statusReport,\n            final BaseClientData currentData)", "class_method_signature": "AmqpClientActor.handleConnectionFailure(\n            final ConnectionFailureStatusReport statusReport,\n            final BaseClientData currentData)", "testcase": false, "constructor": false}, {"identifier": "handleConsumerClosed", "parameters": "(\n            final ConsumerClosedStatusReport statusReport,\n            final BaseClientData currentData)", "modifiers": "private", "return": "FSM.State<BaseClientState, BaseClientData>", "signature": "FSM.State<BaseClientState, BaseClientData> handleConsumerClosed(\n            final ConsumerClosedStatusReport statusReport,\n            final BaseClientData currentData)", "full_signature": "private FSM.State<BaseClientState, BaseClientData> handleConsumerClosed(\n            final ConsumerClosedStatusReport statusReport,\n            final BaseClientData currentData)", "class_method_signature": "AmqpClientActor.handleConsumerClosed(\n            final ConsumerClosedStatusReport statusReport,\n            final BaseClientData currentData)", "testcase": false, "constructor": false}, {"identifier": "handleProducerClosed", "parameters": "(\n            final ProducerClosedStatusReport statusReport,\n            final BaseClientData currentData)", "modifiers": "private", "return": "FSM.State<BaseClientState, BaseClientData>", "signature": "FSM.State<BaseClientState, BaseClientData> handleProducerClosed(\n            final ProducerClosedStatusReport statusReport,\n            final BaseClientData currentData)", "full_signature": "private FSM.State<BaseClientState, BaseClientData> handleProducerClosed(\n            final ProducerClosedStatusReport statusReport,\n            final BaseClientData currentData)", "class_method_signature": "AmqpClientActor.handleProducerClosed(\n            final ProducerClosedStatusReport statusReport,\n            final BaseClientData currentData)", "testcase": false, "constructor": false}, {"identifier": "handleSessionClosed", "parameters": "(final SessionClosedStatusReport statusReport,\n            final BaseClientData currentData)", "modifiers": "private", "return": "FSM.State<BaseClientState, BaseClientData>", "signature": "FSM.State<BaseClientState, BaseClientData> handleSessionClosed(final SessionClosedStatusReport statusReport,\n            final BaseClientData currentData)", "full_signature": "private FSM.State<BaseClientState, BaseClientData> handleSessionClosed(final SessionClosedStatusReport statusReport,\n            final BaseClientData currentData)", "class_method_signature": "AmqpClientActor.handleSessionClosed(final SessionClosedStatusReport statusReport,\n            final BaseClientData currentData)", "testcase": false, "constructor": false}, {"identifier": "recoverSession", "parameters": "(@Nullable final Session session)", "modifiers": "private", "return": "void", "signature": "void recoverSession(@Nullable final Session session)", "full_signature": "private void recoverSession(@Nullable final Session session)", "class_method_signature": "AmqpClientActor.recoverSession(@Nullable final Session session)", "testcase": false, "constructor": false}, {"identifier": "handleSessionRecovered", "parameters": "(\n            final JmsSessionRecovered sessionRecovered,\n            final BaseClientData currentData)", "modifiers": "private", "return": "FSM.State<BaseClientState, BaseClientData>", "signature": "FSM.State<BaseClientState, BaseClientData> handleSessionRecovered(\n            final JmsSessionRecovered sessionRecovered,\n            final BaseClientData currentData)", "full_signature": "private FSM.State<BaseClientState, BaseClientData> handleSessionRecovered(\n            final JmsSessionRecovered sessionRecovered,\n            final BaseClientData currentData)", "class_method_signature": "AmqpClientActor.handleSessionRecovered(\n            final JmsSessionRecovered sessionRecovered,\n            final BaseClientData currentData)", "testcase": false, "constructor": false}, {"identifier": "isRecoverSessionOnSessionClosedEnabled", "parameters": "(final Connection connection)", "modifiers": "private", "return": "boolean", "signature": "boolean isRecoverSessionOnSessionClosedEnabled(final Connection connection)", "full_signature": "private boolean isRecoverSessionOnSessionClosedEnabled(final Connection connection)", "class_method_signature": "AmqpClientActor.isRecoverSessionOnSessionClosedEnabled(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "isRecoverSessionOnConnectionRestoredEnabled", "parameters": "(final Connection connection)", "modifiers": "private", "return": "boolean", "signature": "boolean isRecoverSessionOnConnectionRestoredEnabled(final Connection connection)", "full_signature": "private boolean isRecoverSessionOnConnectionRestoredEnabled(final Connection connection)", "class_method_signature": "AmqpClientActor.isRecoverSessionOnConnectionRestoredEnabled(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "onException", "parameters": "(final JMSException exception)", "modifiers": "@Override public", "return": "void", "signature": "void onException(final JMSException exception)", "full_signature": "@Override public void onException(final JMSException exception)", "class_method_signature": "AmqpClientActor.onException(final JMSException exception)", "testcase": false, "constructor": false}], "file": "services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/amqp/AmqpClientActor.java"}, "focal_method": {"identifier": "propsForTests", "parameters": "(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final JmsConnectionFactory jmsConnectionFactory)", "modifiers": "static", "return": "Props", "body": "static Props propsForTests(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final JmsConnectionFactory jmsConnectionFactory) {\n\n        return Props.create(AmqpClientActor.class, validateConnection(connection),\n                jmsConnectionFactory, proxyActor, connectionActor);\n    }", "signature": "Props propsForTests(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final JmsConnectionFactory jmsConnectionFactory)", "full_signature": "static Props propsForTests(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final JmsConnectionFactory jmsConnectionFactory)", "class_method_signature": "AmqpClientActor.propsForTests(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final JmsConnectionFactory jmsConnectionFactory)", "testcase": false, "constructor": false, "invocations": ["create", "validateConnection"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}