{"test_class": {"identifier": "HmsManagementRestServiceTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/hms-core/src/test/java/com/vmware/vrack/hms/rest/services/HmsManagementRestServiceTest.java"}, "test_case": {"identifier": "getHMSLogsTest_fileNotExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getHMSLogsTest_fileNotExists()\n        throws Exception\n    {\n        File fileMock = mock( File.class );\n        whenNew( File.class ).withArguments( anyString() ).thenReturn( fileMock );\n        when( fileMock.canWrite() ).thenReturn( true );\n        when( fileMock.getParentFile() ).thenReturn( fileMock );\n        when( fileMock.getParentFile().exists() ).thenReturn( true );\n        when( fileMock.getParentFile().mkdirs() ).thenReturn( true );\n        when( fileMock.createNewFile() ).thenReturn( true );\n        PowerMockito.mockStatic( ZipUtil.class );\n        when( ZipUtil.zipFiles( any( String.class ), any( String.class ) ) ).thenReturn( true );\n        HMSManagementRestService service = new HMSManagementRestService();\n\n        Response response = service.getHmsLogs();\n        assertNotNull( response );\n        assertEquals( response.getStatus(), 404 );\n    }", "signature": "void getHMSLogsTest_fileNotExists()", "full_signature": "@Test public void getHMSLogsTest_fileNotExists()", "class_method_signature": "HmsManagementRestServiceTest.getHMSLogsTest_fileNotExists()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "withArguments", "whenNew", "anyString", "thenReturn", "when", "canWrite", "thenReturn", "when", "getParentFile", "thenReturn", "when", "exists", "getParentFile", "thenReturn", "when", "mkdirs", "getParentFile", "thenReturn", "when", "createNewFile", "mockStatic", "thenReturn", "when", "zipFiles", "any", "any", "getHmsLogs", "assertNotNull", "assertEquals", "getStatus"]}, "focal_class": {"identifier": "HMSManagementRestService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String QUOTE = \"\\\"\";", "modifier": "private static final", "type": "String", "declarator": "QUOTE = \"\\\"\"", "var_name": "QUOTE"}, {"original_string": "public static final String GRANT_EXECUTE_RIGHTS = \"chmod +x %s\";", "modifier": "public static final", "type": "String", "declarator": "GRANT_EXECUTE_RIGHTS = \"chmod +x %s\"", "var_name": "GRANT_EXECUTE_RIGHTS"}, {"original_string": "public final String TIMESTAMP_FORMAT = \"yyyy-MM-dd_hh-mm-ss\";", "modifier": "public final", "type": "String", "declarator": "TIMESTAMP_FORMAT = \"yyyy-MM-dd_hh-mm-ss\"", "var_name": "TIMESTAMP_FORMAT"}, {"original_string": "private static Logger logger = LoggerFactory.getLogger( HMSManagementRestService.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( HMSManagementRestService.class )", "var_name": "logger"}, {"original_string": "private ServerNodeConnector serverConnector = ServerNodeConnector.getInstance();", "modifier": "private", "type": "ServerNodeConnector", "declarator": "serverConnector = ServerNodeConnector.getInstance()", "var_name": "serverConnector"}, {"original_string": "private SwitchNodeConnector switchConnector = SwitchNodeConnector.getInstance();", "modifier": "private", "type": "SwitchNodeConnector", "declarator": "switchConnector = SwitchNodeConnector.getInstance()", "var_name": "switchConnector"}], "methods": [{"identifier": "getHMSNodes", "parameters": "()", "modifiers": "@GET @Path( \"/nodes\" ) @Produces( \"application/json\" ) public", "return": "Map<String, Object[]>", "signature": "Map<String, Object[]> getHMSNodes()", "full_signature": "@GET @Path( \"/nodes\" ) @Produces( \"application/json\" ) public Map<String, Object[]> getHMSNodes()", "class_method_signature": "HMSManagementRestService.getHMSNodes()", "testcase": false, "constructor": false}, {"identifier": "discoverNodes", "parameters": "()", "modifiers": "@GET @Path( \"/discover\" ) @Produces( \"application/json\" ) public", "return": "NodeDiscoveryResponse", "signature": "NodeDiscoveryResponse discoverNodes()", "full_signature": "@GET @Path( \"/discover\" ) @Produces( \"application/json\" ) public NodeDiscoveryResponse discoverNodes()", "class_method_signature": "HMSManagementRestService.discoverNodes()", "testcase": false, "constructor": false}, {"identifier": "handshake", "parameters": "()", "modifiers": "@POST @Path( \"/handshake\" ) @Consumes( MediaType.APPLICATION_JSON ) @Produces( \"application/json\" ) public", "return": "BaseResponse", "signature": "BaseResponse handshake()", "full_signature": "@POST @Path( \"/handshake\" ) @Consumes( MediaType.APPLICATION_JSON ) @Produces( \"application/json\" ) public BaseResponse handshake()", "class_method_signature": "HMSManagementRestService.handshake()", "testcase": false, "constructor": false}, {"identifier": "handshake", "parameters": "( @PathParam( \"aggregator_ip\" ) String aggregatorIp,\n                                   @PathParam( \"source\" ) String source )", "modifiers": "@POST @Path( \"/handshake/{aggregator_ip}/{source}\" ) @Consumes( MediaType.APPLICATION_JSON ) @Produces( \"application/json\" ) public", "return": "BaseResponse", "signature": "BaseResponse handshake( @PathParam( \"aggregator_ip\" ) String aggregatorIp,\n                                   @PathParam( \"source\" ) String source )", "full_signature": "@POST @Path( \"/handshake/{aggregator_ip}/{source}\" ) @Consumes( MediaType.APPLICATION_JSON ) @Produces( \"application/json\" ) public BaseResponse handshake( @PathParam( \"aggregator_ip\" ) String aggregatorIp,\n                                   @PathParam( \"source\" ) String source )", "class_method_signature": "HMSManagementRestService.handshake( @PathParam( \"aggregator_ip\" ) String aggregatorIp,\n                                   @PathParam( \"source\" ) String source )", "testcase": false, "constructor": false}, {"identifier": "isHandshakeCompleted", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isHandshakeCompleted()", "full_signature": "private boolean isHandshakeCompleted()", "class_method_signature": "HMSManagementRestService.isHandshakeCompleted()", "testcase": false, "constructor": false}, {"identifier": "updateProxyConfiguration", "parameters": "( String aggregatorIp )", "modifiers": "private", "return": "void", "signature": "void updateProxyConfiguration( String aggregatorIp )", "full_signature": "private void updateProxyConfiguration( String aggregatorIp )", "class_method_signature": "HMSManagementRestService.updateProxyConfiguration( String aggregatorIp )", "testcase": false, "constructor": false}, {"identifier": "getSupportedOOBOperations", "parameters": "()", "modifiers": "@GET @Path( \"/service/operations\" ) @Produces( \"application/json\" ) public", "return": "Map<String, List<HmsApi>>", "signature": "Map<String, List<HmsApi>> getSupportedOOBOperations()", "full_signature": "@GET @Path( \"/service/operations\" ) @Produces( \"application/json\" ) public Map<String, List<HmsApi>> getSupportedOOBOperations()", "class_method_signature": "HMSManagementRestService.getSupportedOOBOperations()", "testcase": false, "constructor": false}, {"identifier": "executeThreadStackLogger", "parameters": "()", "modifiers": "@GET @Path( \"/debug/threads\" ) @Produces( \"application/json\" ) public", "return": "Map<String, String>", "signature": "Map<String, String> executeThreadStackLogger()", "full_signature": "@GET @Path( \"/debug/threads\" ) @Produces( \"application/json\" ) public Map<String, String> executeThreadStackLogger()", "class_method_signature": "HMSManagementRestService.executeThreadStackLogger()", "testcase": false, "constructor": false}, {"identifier": "refreshInventory", "parameters": "( final String inventory )", "modifiers": "@PUT @Path( \"/refreshinventory\" ) @Produces( MediaType.APPLICATION_JSON ) @Deprecated public", "return": "Response", "signature": "Response refreshInventory( final String inventory )", "full_signature": "@PUT @Path( \"/refreshinventory\" ) @Produces( MediaType.APPLICATION_JSON ) @Deprecated public Response refreshInventory( final String inventory )", "class_method_signature": "HMSManagementRestService.refreshInventory( final String inventory )", "testcase": false, "constructor": false}, {"identifier": "getHmsLogs", "parameters": "()", "modifiers": "@GET @Path( \"/hmslogs\" ) @Produces( MediaType.APPLICATION_OCTET_STREAM ) public", "return": "Response", "signature": "Response getHmsLogs()", "full_signature": "@GET @Path( \"/hmslogs\" ) @Produces( MediaType.APPLICATION_OCTET_STREAM ) public Response getHmsLogs()", "class_method_signature": "HMSManagementRestService.getHmsLogs()", "testcase": false, "constructor": false}, {"identifier": "deleteTemporaryHmsLogFile", "parameters": "()", "modifiers": "@DELETE @Path( \"/hmslogs\" ) @Produces( \"application/json\" ) public", "return": "BaseResponse", "signature": "BaseResponse deleteTemporaryHmsLogFile()", "full_signature": "@DELETE @Path( \"/hmslogs\" ) @Produces( \"application/json\" ) public BaseResponse deleteTemporaryHmsLogFile()", "class_method_signature": "HMSManagementRestService.deleteTemporaryHmsLogFile()", "testcase": false, "constructor": false}, {"identifier": "isFileDeleteable", "parameters": "( File logArchiveName )", "modifiers": "public", "return": "boolean", "signature": "boolean isFileDeleteable( File logArchiveName )", "full_signature": "public boolean isFileDeleteable( File logArchiveName )", "class_method_signature": "HMSManagementRestService.isFileDeleteable( File logArchiveName )", "testcase": false, "constructor": false}, {"identifier": "getNewHosts", "parameters": "()", "modifiers": "@GET @Path( \"/newhosts\" ) @Produces( MediaType.APPLICATION_JSON ) public", "return": "Response", "signature": "Response getNewHosts()", "full_signature": "@GET @Path( \"/newhosts\" ) @Produces( MediaType.APPLICATION_JSON ) public Response getNewHosts()", "class_method_signature": "HMSManagementRestService.getNewHosts()", "testcase": false, "constructor": false}], "file": "modules/hms-core/src/main/java/com/vmware/vrack/hms/rest/services/HMSManagementRestService.java"}, "focal_method": {"identifier": "getHmsLogs", "parameters": "()", "modifiers": "@GET @Path( \"/hmslogs\" ) @Produces( MediaType.APPLICATION_OCTET_STREAM ) public", "return": "Response", "body": "@GET\n    @Path( \"/hmslogs\" )\n    @Produces( MediaType.APPLICATION_OCTET_STREAM )\n    public Response getHmsLogs()\n        throws HMSRestException\n    {\n        // String tempDir = FileUtil.getTemporaryFolderPath();\n        String tempDir = HmsConfigHolder.getHMSConfigProperty( HmsConfigHolder.HMS_TEMPORARY_LOG_DIR );\n        File tempDirHandle = new File( tempDir );\n\n        if ( !tempDirHandle.exists() && !tempDirHandle.isDirectory() )\n        {\n            if ( !FileUtil.createDirectory( tempDir ) )\n            {\n                logger.error( \"Unable to create directory for creating temporary OOB logs\" );\n                ResponseBuilder response = Response.status( Status.INTERNAL_SERVER_ERROR );\n                return response.build();\n            }\n        }\n\n        String tempZipFileName = System.currentTimeMillis() + \"-hmsLog.zip\";\n\n        // Create a random zip file name\n        String outputZipFile = tempDir + tempZipFileName;\n\n        String hmslogPath = HmsConfigHolder.getHMSConfigProperty( HmsConfigHolder.HMS_LOG_FILE_PATH );\n        String hmslog1Path = HmsConfigHolder.getHMSConfigProperty( HmsConfigHolder.HMS_LOG_1_FILE_PATH );\n\n        // Put some validations here such as invalid file name or missing file name\n        if ( hmslogPath == null || hmslogPath.isEmpty() )\n        {\n            ResponseBuilder response = Response.status( Status.NOT_FOUND );\n            return response.build();\n        }\n\n        logger.debug( \"Hms Log file path:\" + hmslogPath );\n        logger.debug( \"Hms Log 1 file path:\" + hmslog1Path );\n\n        boolean zipForLogCreated = ZipUtil.zipFiles( outputZipFile, hmslogPath, hmslog1Path );\n\n        if ( zipForLogCreated )\n        {\n            // Prepare a file object with file to return\n            File hmsLog = new File( outputZipFile );\n\n            ResponseBuilder response = Response.ok( hmsLog );\n            response.header( \"Content-Disposition\", \"attachment; filename=\\\"\" + \"hmslog.zip\" + \"\\\"\" );\n\n            return response.build();\n        }\n        else\n        {\n            ResponseBuilder response = Response.status( Status.INTERNAL_SERVER_ERROR );\n            return response.build();\n        }\n    }", "signature": "Response getHmsLogs()", "full_signature": "@GET @Path( \"/hmslogs\" ) @Produces( MediaType.APPLICATION_OCTET_STREAM ) public Response getHmsLogs()", "class_method_signature": "HMSManagementRestService.getHmsLogs()", "testcase": false, "constructor": false, "invocations": ["getHMSConfigProperty", "exists", "isDirectory", "createDirectory", "error", "status", "build", "currentTimeMillis", "getHMSConfigProperty", "getHMSConfigProperty", "isEmpty", "status", "build", "debug", "debug", "zipFiles", "ok", "header", "build", "status", "build"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}