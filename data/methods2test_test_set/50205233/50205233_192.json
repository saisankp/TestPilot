{"test_class": {"identifier": "MaskStringsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Column column = Column.editor().name(\"col\").jdbcType(Types.VARCHAR).create();", "modifier": "private final", "type": "Column", "declarator": "column = Column.editor().name(\"col\").jdbcType(Types.VARCHAR).create()", "var_name": "column"}, {"original_string": "private ValueConverter converter;", "modifier": "private", "type": "ValueConverter", "declarator": "converter", "var_name": "converter"}], "file": "debezium-core/src/test/java/io/debezium/relational/mapping/MaskStringsTest.java"}, "test_case": {"identifier": "shouldMaskStringsWithAsterisks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldMaskStringsWithAsterisks() {\n        String maskValue = \"*****\";\n        converter = new MaskStrings(maskValue).create(column);\n        assertThat(converter.convert(\"1234567890\").toString()).isEqualTo(maskValue);\n        assertThat(converter.convert(\"123456\").toString()).isEqualTo(maskValue);\n        assertThat(converter.convert(\"12345\").toString()).isEqualTo(maskValue);\n        assertThat(converter.convert(\"1234\").toString()).isEqualTo(maskValue);\n        assertThat(converter.convert(\"123\").toString()).isEqualTo(maskValue);\n        assertThat(converter.convert(\"12\").toString()).isEqualTo(maskValue);\n        assertThat(converter.convert(\"1\").toString()).isEqualTo(maskValue);\n        assertThat(converter.convert(null).toString()).isEqualTo(maskValue);\n    }", "signature": "void shouldMaskStringsWithAsterisks()", "full_signature": "@Test public void shouldMaskStringsWithAsterisks()", "class_method_signature": "MaskStringsTest.shouldMaskStringsWithAsterisks()", "testcase": true, "constructor": false, "invocations": ["create", "isEqualTo", "assertThat", "toString", "convert", "isEqualTo", "assertThat", "toString", "convert", "isEqualTo", "assertThat", "toString", "convert", "isEqualTo", "assertThat", "toString", "convert", "isEqualTo", "assertThat", "toString", "convert", "isEqualTo", "assertThat", "toString", "convert", "isEqualTo", "assertThat", "toString", "convert", "isEqualTo", "assertThat", "toString", "convert"]}, "focal_class": {"identifier": "MaskStrings", "superclass": "", "interfaces": "implements ColumnMapper", "fields": [{"original_string": "private final Function<Column, ValueConverter> converterFromColumn;", "modifier": "private final", "type": "Function<Column, ValueConverter>", "declarator": "converterFromColumn", "var_name": "converterFromColumn"}], "methods": [{"identifier": "MaskStrings", "parameters": "(String maskValue)", "modifiers": "public", "return": "", "signature": " MaskStrings(String maskValue)", "full_signature": "public  MaskStrings(String maskValue)", "class_method_signature": "MaskStrings.MaskStrings(String maskValue)", "testcase": false, "constructor": true}, {"identifier": "MaskStrings", "parameters": "(byte[] salt, String hashAlgorithm)", "modifiers": "public", "return": "", "signature": " MaskStrings(byte[] salt, String hashAlgorithm)", "full_signature": "public  MaskStrings(byte[] salt, String hashAlgorithm)", "class_method_signature": "MaskStrings.MaskStrings(byte[] salt, String hashAlgorithm)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(Column column)", "modifiers": "@Override public", "return": "ValueConverter", "signature": "ValueConverter create(Column column)", "full_signature": "@Override public ValueConverter create(Column column)", "class_method_signature": "MaskStrings.create(Column column)", "testcase": false, "constructor": false}, {"identifier": "alterFieldSchema", "parameters": "(Column column, SchemaBuilder schemaBuilder)", "modifiers": "@Override public", "return": "void", "signature": "void alterFieldSchema(Column column, SchemaBuilder schemaBuilder)", "full_signature": "@Override public void alterFieldSchema(Column column, SchemaBuilder schemaBuilder)", "class_method_signature": "MaskStrings.alterFieldSchema(Column column, SchemaBuilder schemaBuilder)", "testcase": false, "constructor": false}], "file": "debezium-core/src/main/java/io/debezium/relational/mapping/MaskStrings.java"}, "focal_method": {"identifier": "create", "parameters": "(Column column)", "modifiers": "@Override public", "return": "ValueConverter", "body": "@Override\n    public ValueConverter create(Column column) {\n        switch (column.jdbcType()) {\n            case Types.CHAR: // variable-length\n            case Types.VARCHAR: // variable-length\n            case Types.LONGVARCHAR: // variable-length\n            case Types.CLOB: // variable-length\n            case Types.NCHAR: // fixed-length\n            case Types.NVARCHAR: // fixed-length\n            case Types.LONGNVARCHAR: // fixed-length\n            case Types.NCLOB: // fixed-length\n            case Types.DATALINK:\n                return converterFromColumn.apply(column);\n            default:\n                return ValueConverter.passthrough();\n        }\n    }", "signature": "ValueConverter create(Column column)", "full_signature": "@Override public ValueConverter create(Column column)", "class_method_signature": "MaskStrings.create(Column column)", "testcase": false, "constructor": false, "invocations": ["jdbcType", "apply", "passthrough"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}