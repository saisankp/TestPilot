{"test_class": {"identifier": "SQLiteUtilsTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [], "file": "reactiveandroid/src/test/java/com/reactiveandroid/internal/utils/SQLiteUtilsTest.java"}, "test_case": {"identifier": "testGetAllTablesNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAllTablesNames() {\n        DatabaseInfo testDatabase = ReActiveAndroid.getDatabase(TestDatabase.class);\n        List<String> tableNames = SQLiteUtils.getAllTableNames(testDatabase.getWritableDatabase());\n\n        assertEquals(8, tableNames.size());\n        //assertTrue(tableNames.contains(\"TestModelOne\") && tableNames.contains(\"Categories\"));\n        assertFalse(tableNames.contains(ReActiveMasterTable.TABLE_NAME));\n    }", "signature": "void testGetAllTablesNames()", "full_signature": "@Test public void testGetAllTablesNames()", "class_method_signature": "SQLiteUtilsTest.testGetAllTablesNames()", "testcase": true, "constructor": false, "invocations": ["getDatabase", "getAllTableNames", "getWritableDatabase", "assertEquals", "size", "assertFalse", "contains"]}, "focal_class": {"identifier": "SQLiteUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getIdentityHash", "parameters": "(Collection<TableInfo> tableInfos)", "modifiers": "@NonNull public static", "return": "String", "signature": "String getIdentityHash(Collection<TableInfo> tableInfos)", "full_signature": "@NonNull public static String getIdentityHash(Collection<TableInfo> tableInfos)", "class_method_signature": "SQLiteUtils.getIdentityHash(Collection<TableInfo> tableInfos)", "testcase": false, "constructor": false}, {"identifier": "getAllTableNames", "parameters": "(SQLiteDatabase database)", "modifiers": "@NonNull public static", "return": "ArrayList<String>", "signature": "ArrayList<String> getAllTableNames(SQLiteDatabase database)", "full_signature": "@NonNull public static ArrayList<String> getAllTableNames(SQLiteDatabase database)", "class_method_signature": "SQLiteUtils.getAllTableNames(SQLiteDatabase database)", "testcase": false, "constructor": false}, {"identifier": "createTableDefinition", "parameters": "(TableInfo tableInfo)", "modifiers": "@NonNull public static", "return": "String", "signature": "String createTableDefinition(TableInfo tableInfo)", "full_signature": "@NonNull public static String createTableDefinition(TableInfo tableInfo)", "class_method_signature": "SQLiteUtils.createTableDefinition(TableInfo tableInfo)", "testcase": false, "constructor": false}, {"identifier": "createColumnDefinition", "parameters": "(TableInfo tableInfo, Field field)", "modifiers": "@NonNull @SuppressWarnings(\"unchecked\") static", "return": "String", "signature": "String createColumnDefinition(TableInfo tableInfo, Field field)", "full_signature": "@NonNull @SuppressWarnings(\"unchecked\") static String createColumnDefinition(TableInfo tableInfo, Field field)", "class_method_signature": "SQLiteUtils.createColumnDefinition(TableInfo tableInfo, Field field)", "testcase": false, "constructor": false}, {"identifier": "createUniqueDefinition", "parameters": "(TableInfo tableInfo)", "modifiers": "@NonNull static", "return": "List<String>", "signature": "List<String> createUniqueDefinition(TableInfo tableInfo)", "full_signature": "@NonNull static List<String> createUniqueDefinition(TableInfo tableInfo)", "class_method_signature": "SQLiteUtils.createUniqueDefinition(TableInfo tableInfo)", "testcase": false, "constructor": false}, {"identifier": "createIndexDefinition", "parameters": "(TableInfo tableInfo)", "modifiers": "@NonNull public static", "return": "List<String>", "signature": "List<String> createIndexDefinition(TableInfo tableInfo)", "full_signature": "@NonNull public static List<String> createIndexDefinition(TableInfo tableInfo)", "class_method_signature": "SQLiteUtils.createIndexDefinition(TableInfo tableInfo)", "testcase": false, "constructor": false}, {"identifier": "getFieldSQLiteType", "parameters": "(Field field, Map<Class<?>, TypeSerializer> typeSerializers)", "modifiers": "public static", "return": "SQLiteType", "signature": "SQLiteType getFieldSQLiteType(Field field, Map<Class<?>, TypeSerializer> typeSerializers)", "full_signature": "public static SQLiteType getFieldSQLiteType(Field field, Map<Class<?>, TypeSerializer> typeSerializers)", "class_method_signature": "SQLiteUtils.getFieldSQLiteType(Field field, Map<Class<?>, TypeSerializer> typeSerializers)", "testcase": false, "constructor": false}, {"identifier": "getColumnFieldValue", "parameters": "(Class<?> modelClass,\n                                             Class<?> fieldType,\n                                             Cursor cursor,\n                                             int columnIndex)", "modifiers": "public static", "return": "Object", "signature": "Object getColumnFieldValue(Class<?> modelClass,\n                                             Class<?> fieldType,\n                                             Cursor cursor,\n                                             int columnIndex)", "full_signature": "public static Object getColumnFieldValue(Class<?> modelClass,\n                                             Class<?> fieldType,\n                                             Cursor cursor,\n                                             int columnIndex)", "class_method_signature": "SQLiteUtils.getColumnFieldValue(Class<?> modelClass,\n                                             Class<?> fieldType,\n                                             Cursor cursor,\n                                             int columnIndex)", "testcase": false, "constructor": false}, {"identifier": "fillContentValuesForUpdate", "parameters": "(Object model,\n                                                  ModelAdapter modelAdapter,\n                                                  ContentValues contentValues)", "modifiers": "public static", "return": "void", "signature": "void fillContentValuesForUpdate(Object model,\n                                                  ModelAdapter modelAdapter,\n                                                  ContentValues contentValues)", "full_signature": "public static void fillContentValuesForUpdate(Object model,\n                                                  ModelAdapter modelAdapter,\n                                                  ContentValues contentValues)", "class_method_signature": "SQLiteUtils.fillContentValuesForUpdate(Object model,\n                                                  ModelAdapter modelAdapter,\n                                                  ContentValues contentValues)", "testcase": false, "constructor": false}, {"identifier": "fillContentValuesForInsert", "parameters": "(Object model,\n                                                  ModelAdapter modelAdapter,\n                                                  ContentValues contentValues)", "modifiers": "public static", "return": "void", "signature": "void fillContentValuesForInsert(Object model,\n                                                  ModelAdapter modelAdapter,\n                                                  ContentValues contentValues)", "full_signature": "public static void fillContentValuesForInsert(Object model,\n                                                  ModelAdapter modelAdapter,\n                                                  ContentValues contentValues)", "class_method_signature": "SQLiteUtils.fillContentValuesForInsert(Object model,\n                                                  ModelAdapter modelAdapter,\n                                                  ContentValues contentValues)", "testcase": false, "constructor": false}, {"identifier": "isInternalTable", "parameters": "(String tableName)", "modifiers": "private static", "return": "boolean", "signature": "boolean isInternalTable(String tableName)", "full_signature": "private static boolean isInternalTable(String tableName)", "class_method_signature": "SQLiteUtils.isInternalTable(String tableName)", "testcase": false, "constructor": false}, {"identifier": "getDatabaseSchemaHash", "parameters": "(ArrayList<String> tableDefinitions)", "modifiers": "@NonNull private static", "return": "String", "signature": "String getDatabaseSchemaHash(ArrayList<String> tableDefinitions)", "full_signature": "@NonNull private static String getDatabaseSchemaHash(ArrayList<String> tableDefinitions)", "class_method_signature": "SQLiteUtils.getDatabaseSchemaHash(ArrayList<String> tableDefinitions)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(List<ColumnInfo> columnInfos)", "modifiers": "@NonNull private static", "return": "String", "signature": "String join(List<ColumnInfo> columnInfos)", "full_signature": "@NonNull private static String join(List<ColumnInfo> columnInfos)", "class_method_signature": "SQLiteUtils.join(List<ColumnInfo> columnInfos)", "testcase": false, "constructor": false}], "file": "reactiveandroid/src/main/java/com/reactiveandroid/internal/utils/SQLiteUtils.java"}, "focal_method": {"identifier": "getAllTableNames", "parameters": "(SQLiteDatabase database)", "modifiers": "@NonNull public static", "return": "ArrayList<String>", "body": "@NonNull\n    public static ArrayList<String> getAllTableNames(SQLiteDatabase database) {\n        Cursor cursor = database.rawQuery(\"SELECT name FROM sqlite_master  WHERE type='table' ORDER BY name;\", new String[]{});\n        int nameColumnIndex = cursor.getColumnIndex(\"name\");\n\n        ArrayList<String> tableNames = new ArrayList<>();\n        while (cursor.moveToNext()) {\n            String tableName = cursor.getString(nameColumnIndex);\n            if (!isInternalTable(tableName)) {\n                tableNames.add(cursor.getString(nameColumnIndex));\n            }\n\n        }\n\n        return tableNames;\n    }", "signature": "ArrayList<String> getAllTableNames(SQLiteDatabase database)", "full_signature": "@NonNull public static ArrayList<String> getAllTableNames(SQLiteDatabase database)", "class_method_signature": "SQLiteUtils.getAllTableNames(SQLiteDatabase database)", "testcase": false, "constructor": false, "invocations": ["rawQuery", "getColumnIndex", "moveToNext", "getString", "isInternalTable", "add", "getString"]}, "repository": {"repo_id": 108579191, "url": "https://github.com/ImangazalievM/ReActiveAndroid", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 101, "size": 572, "license": "licensed"}}