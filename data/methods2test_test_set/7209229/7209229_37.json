{"test_class": {"identifier": "TestStringUtils", "superclass": "", "interfaces": "", "fields": [], "file": "databus-core/databus-core-impl/src/test/java/com/linkedin/databus/core/util/TestStringUtils.java"}, "test_case": {"identifier": "testSanitizeDbUri", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n public void testSanitizeDbUri()\n {\n   String s = StringUtils.sanitizeDbUri(\"jdbc:oracle:thin:uSeR/p4ssw0rd@db.company.com:1521/SCHEMA\");\n   Assert.assertEquals(s, \"jdbc:oracle:thin:*/*@db.company.com:1521/SCHEMA\");\n\n   s = StringUtils.sanitizeDbUri(\"jdbc:oracle:thick:uSeR/p4ssw0rd@db.company.com:1521/SCHEMA\");\n   Assert.assertEquals(s, \"jdbc:oracle:thick:uSeR/p4ssw0rd@db.company.com:1521/SCHEMA\");\n\n   s = StringUtils.sanitizeDbUri(\"jdbc:oracle:thin:fancy-uri/v1/v2(123,456,789)@(DESCRIPTION=(LOAD_BALANCE=on)(FAILOVER=on)(ADDRESS=(PROTOCOL=TCP)(HOST=db1.host.com)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=db2.host.com)(PORT=1521))(CONNECT_DATA=(FAILOVER_MODE=(TYPE=SELECT)(METHOD=BASIC)(RETRIES=180)(DELAY=5))))\");\n   Assert.assertEquals(s, \"jdbc:oracle:thin:*/*@(DESCRIPTION=(LOAD_BALANCE=on)(FAILOVER=on)(ADDRESS=(PROTOCOL=TCP)(HOST=db1.host.com)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=db2.host.com)(PORT=1521))(CONNECT_DATA=(FAILOVER_MODE=(TYPE=SELECT)(METHOD=BASIC)(RETRIES=180)(DELAY=5))))\");\n\n   s = StringUtils.sanitizeDbUri(\"jdbc:mysql://address=(protocol=tcp)(host=localhost)(port=3306)(password=p4ssw0rd)(user=uSeR)/db\");\n   Assert.assertEquals(s, \"jdbc:mysql://address=(protocol=tcp)(host=localhost)(port=3306)(password=*)(user=*)/db\");\n\n   s = StringUtils.sanitizeDbUri(\"jdbc:mysql://localhost:3306/DB?profileSQL=true&user=Godzilla&password=KingKong\");\n   Assert.assertEquals(s, \"jdbc:mysql://localhost:3306/DB?profileSQL=true&user=*&password=*\");\n\n   s = StringUtils.sanitizeDbUri(\"jdbc:MySqL://localhost:3306/DB?profileSQL=true&user=Godzilla&password=KingKong\");\n   Assert.assertEquals(s, \"jdbc:MySqL://localhost:3306/DB?profileSQL=true&user=Godzilla&password=KingKong\");\n }", "signature": "void testSanitizeDbUri()", "full_signature": "@Test public void testSanitizeDbUri()", "class_method_signature": "TestStringUtils.testSanitizeDbUri()", "testcase": true, "constructor": false, "invocations": ["sanitizeDbUri", "assertEquals", "sanitizeDbUri", "assertEquals", "sanitizeDbUri", "assertEquals", "sanitizeDbUri", "assertEquals", "sanitizeDbUri", "assertEquals", "sanitizeDbUri", "assertEquals"]}, "focal_class": {"identifier": "StringUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern ORA_JDBC_URI_PATTERN =\n      Pattern.compile(\"(jdbc:oracle:thin:)([^/@]*)(/[^@]*)(@.*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "ORA_JDBC_URI_PATTERN =\n      Pattern.compile(\"(jdbc:oracle:thin:)([^/@]*)(/[^@]*)(@.*)\")", "var_name": "ORA_JDBC_URI_PATTERN"}, {"original_string": "private static final Pattern MYSQL_JDBC_PATTERN1 = Pattern.compile(\"\\\\((user=|password=)([^)]*)\\\\)\");", "modifier": "private static final", "type": "Pattern", "declarator": "MYSQL_JDBC_PATTERN1 = Pattern.compile(\"\\\\((user=|password=)([^)]*)\\\\)\")", "var_name": "MYSQL_JDBC_PATTERN1"}, {"original_string": "private static final Pattern MYSQL_JDBC_PATTERN2 = Pattern.compile(\"(user=|password=)([^&]*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "MYSQL_JDBC_PATTERN2 = Pattern.compile(\"(user=|password=)([^&]*)\")", "var_name": "MYSQL_JDBC_PATTERN2"}, {"original_string": "public static final String DEFAULT_ENCODING_NAME = \"UTF-8\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_ENCODING_NAME = \"UTF-8\"", "var_name": "DEFAULT_ENCODING_NAME"}, {"original_string": "public static final Charset DEFAULT_CHARSET = Charset.forName(DEFAULT_ENCODING_NAME);", "modifier": "public static final", "type": "Charset", "declarator": "DEFAULT_CHARSET = Charset.forName(DEFAULT_ENCODING_NAME)", "var_name": "DEFAULT_CHARSET"}], "methods": [{"identifier": "bytesToString", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String bytesToString(byte[] bytes)", "full_signature": "public static String bytesToString(byte[] bytes)", "class_method_signature": "StringUtils.bytesToString(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "createFileReader", "parameters": "(File file)", "modifiers": "public static", "return": "Reader", "signature": "Reader createFileReader(File file)", "full_signature": "public static Reader createFileReader(File file)", "class_method_signature": "StringUtils.createFileReader(File file)", "testcase": false, "constructor": false}, {"identifier": "createFileReader", "parameters": "(String fileName)", "modifiers": "public static", "return": "Reader", "signature": "Reader createFileReader(String fileName)", "full_signature": "public static Reader createFileReader(String fileName)", "class_method_signature": "StringUtils.createFileReader(String fileName)", "testcase": false, "constructor": false}, {"identifier": "createFileWriter", "parameters": "(File file)", "modifiers": "public static", "return": "Writer", "signature": "Writer createFileWriter(File file)", "full_signature": "public static Writer createFileWriter(File file)", "class_method_signature": "StringUtils.createFileWriter(File file)", "testcase": false, "constructor": false}, {"identifier": "createFileWriter", "parameters": "(String fileName)", "modifiers": "public static", "return": "Writer", "signature": "Writer createFileWriter(String fileName)", "full_signature": "public static Writer createFileWriter(String fileName)", "class_method_signature": "StringUtils.createFileWriter(String fileName)", "testcase": false, "constructor": false}, {"identifier": "hexdumpByteBufferContents", "parameters": "(ByteBuffer buf, int bufOfs, int length)", "modifiers": "public static", "return": "String", "signature": "String hexdumpByteBufferContents(ByteBuffer buf, int bufOfs, int length)", "full_signature": "public static String hexdumpByteBufferContents(ByteBuffer buf, int bufOfs, int length)", "class_method_signature": "StringUtils.hexdumpByteBufferContents(ByteBuffer buf, int bufOfs, int length)", "testcase": false, "constructor": false}, {"identifier": "sanitizeDbUri", "parameters": "(String uri)", "modifiers": "public static", "return": "String", "signature": "String sanitizeDbUri(String uri)", "full_signature": "public static String sanitizeDbUri(String uri)", "class_method_signature": "StringUtils.sanitizeDbUri(String uri)", "testcase": false, "constructor": false}], "file": "databus-core/databus-core-impl/src/main/java/com/linkedin/databus/core/util/StringUtils.java"}, "focal_method": {"identifier": "sanitizeDbUri", "parameters": "(String uri)", "modifiers": "public static", "return": "String", "body": "public static String sanitizeDbUri(String uri)\n  {\n    String result = uri;\n    Matcher m = ORA_JDBC_URI_PATTERN.matcher(uri);\n    if (m.matches())\n    {\n      result = m.group(1) + \"*/*\" + m.group(4);\n    }\n    else if (uri.startsWith(\"jdbc:mysql:\"))\n    {\n      Matcher m1 = MYSQL_JDBC_PATTERN1.matcher(result);\n      Matcher m2 = MYSQL_JDBC_PATTERN2.matcher(result);\n      if (m1.find())\n      {\n        result = m1.replaceAll(\"($1*)\");\n      }\n      else if (m2.find())\n      {\n        result = m2.replaceAll(\"$1*\");\n      }\n    }\n\n    return result;\n  }", "signature": "String sanitizeDbUri(String uri)", "full_signature": "public static String sanitizeDbUri(String uri)", "class_method_signature": "StringUtils.sanitizeDbUri(String uri)", "testcase": false, "constructor": false, "invocations": ["matcher", "matches", "group", "group", "startsWith", "matcher", "matcher", "find", "replaceAll", "find", "replaceAll"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}