{"test_class": {"identifier": "ExpandViewsTest", "superclass": "", "interfaces": "", "fields": [], "file": "yqlplus_engine/src/test/java/com/yahoo/yqlplus/engine/rules/ExpandViewsTest.java"}, "test_case": {"identifier": "testExpandView", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExpandView() throws IOException {\n        OperatorNode<SequenceOperator> query = OperatorNode.create(SequenceOperator.FILTER,\n                OperatorNode.create(SequenceOperator.JOIN,\n                        OperatorNode.create(SequenceOperator.SCAN, Lists.newArrayList(\"left\"), ImmutableList.of()).putAnnotation(\"alias\", \"left\"),\n                        OperatorNode.create(SequenceOperator.SCAN, Lists.newArrayList(\"right\"), ImmutableList.of()).putAnnotation(\"alias\", \"right\"),\n                        OperatorNode.create(ExpressionOperator.EQ,\n                                OperatorNode.create(ExpressionOperator.PROPREF, OperatorNode.create(ExpressionOperator.READ_RECORD, \"left\"), \"id\"),\n                                OperatorNode.create(ExpressionOperator.PROPREF, OperatorNode.create(ExpressionOperator.READ_RECORD, \"right\"), \"id\"))),\n                OperatorNode.create(ExpressionOperator.EQ,\n                        OperatorNode.create(ExpressionOperator.PROPREF, OperatorNode.create(ExpressionOperator.READ_RECORD, \"left\"), \"id\"),\n                        OperatorNode.create(ExpressionOperator.LITERAL, \"1\")));\n        OperatorNode<SequenceOperator> transformed = new JoinFilterPushDown().visitSequenceOperator(query);\n        Assert.assertEquals(transformed.getOperator(), SequenceOperator.JOIN);\n        Assert.assertEquals(((OperatorNode) transformed.getArgument(0)).getOperator(), SequenceOperator.FILTER);\n        Assert.assertEquals(((OperatorNode) transformed.getArgument(1)).getOperator(), SequenceOperator.SCAN);\n\n        // now expand the view\n        Registry scope = new Registry();\n\n        scope.defineView(\"left\", OperatorNode.create(SequenceOperator.FILTER,\n                OperatorNode.create(SequenceOperator.SCAN, Lists.newArrayList(\"fancy\"), ImmutableList.of()).putAnnotation(\"alias\", \"fancy\"),\n                OperatorNode.create(ExpressionOperator.EQ,\n                        OperatorNode.create(ExpressionOperator.PROPREF, OperatorNode.create(ExpressionOperator.READ_RECORD, \"fancy\"), \"id\"),\n                        OperatorNode.create(ExpressionOperator.LITERAL, \"1\"))));\n\n        transformed = new ExpandViews(scope).visitSequenceOperator(transformed);\n        Assert.assertEquals(transformed.getOperator(), SequenceOperator.JOIN);\n        Assert.assertEquals(((OperatorNode) transformed.getArgument(0)).getOperator(), SequenceOperator.FILTER);\n        Assert.assertEquals(((OperatorNode) transformed.getArgument(1)).getOperator(), SequenceOperator.SCAN);\n\n        OperatorNode<SequenceOperator> left = (OperatorNode<SequenceOperator>) transformed.getArgument(0);\n        // FILTER FILTER SCAN (already checked that left is FILTER, so the next should be too\n        Assert.assertEquals(((OperatorNode) left.getArgument(0)).getOperator(), SequenceOperator.FILTER);\n        // now look for the scan\n        OperatorNode<SequenceOperator> scan = (OperatorNode) ((OperatorNode) left.getArgument(0)).getArgument(0);\n        Assert.assertEquals(scan.getOperator(), SequenceOperator.SCAN);\n        Assert.assertEquals(scan.getArgument(0), ImmutableList.of(\"fancy\"));\n\n    }", "signature": "void testExpandView()", "full_signature": "@Test public void testExpandView()", "class_method_signature": "ExpandViewsTest.testExpandView()", "testcase": true, "constructor": false, "invocations": ["create", "create", "putAnnotation", "create", "newArrayList", "of", "putAnnotation", "create", "newArrayList", "of", "create", "create", "create", "create", "create", "create", "create", "create", "create", "visitSequenceOperator", "assertEquals", "getOperator", "assertEquals", "getOperator", "getArgument", "assertEquals", "getOperator", "getArgument", "defineView", "create", "putAnnotation", "create", "newArrayList", "of", "create", "create", "create", "create", "visitSequenceOperator", "assertEquals", "getOperator", "assertEquals", "getOperator", "getArgument", "assertEquals", "getOperator", "getArgument", "getArgument", "assertEquals", "getOperator", "getArgument", "getArgument", "getArgument", "assertEquals", "getOperator", "assertEquals", "getArgument", "of"]}, "focal_class": {"identifier": "ExpandViews", "superclass": "extends LogicalOperatorTransform", "interfaces": "", "fields": [{"original_string": "private ViewRegistry scope;", "modifier": "private", "type": "ViewRegistry", "declarator": "scope", "var_name": "scope"}], "methods": [{"identifier": "ExpandViews", "parameters": "(ViewRegistry scope)", "modifiers": "public", "return": "", "signature": " ExpandViews(ViewRegistry scope)", "full_signature": "public  ExpandViews(ViewRegistry scope)", "class_method_signature": "ExpandViews.ExpandViews(ViewRegistry scope)", "testcase": false, "constructor": true}, {"identifier": "visitSequenceOperator", "parameters": "(OperatorNode<SequenceOperator> node)", "modifiers": "@Override public", "return": "OperatorNode<SequenceOperator>", "signature": "OperatorNode<SequenceOperator> visitSequenceOperator(OperatorNode<SequenceOperator> node)", "full_signature": "@Override public OperatorNode<SequenceOperator> visitSequenceOperator(OperatorNode<SequenceOperator> node)", "class_method_signature": "ExpandViews.visitSequenceOperator(OperatorNode<SequenceOperator> node)", "testcase": false, "constructor": false}], "file": "yqlplus_engine/src/main/java/com/yahoo/yqlplus/engine/rules/ExpandViews.java"}, "focal_method": {"identifier": "visitSequenceOperator", "parameters": "(OperatorNode<SequenceOperator> node)", "modifiers": "@Override public", "return": "OperatorNode<SequenceOperator>", "body": "@Override\n    public OperatorNode<SequenceOperator> visitSequenceOperator(OperatorNode<SequenceOperator> node) {\n        // a view reference has to be in a 'SCAN'\n        if (node.getOperator() != SequenceOperator.SCAN) {\n            return super.visitSequenceOperator(node);\n        }\n        List<String> name = (List<String>) node.getArgument(0);\n        List<OperatorNode<ExpressionOperator>> arguments = (List<OperatorNode<ExpressionOperator>>) node.getArgument(1);\n        // a view reference has to have no arguments\n        if (arguments.size() > 0) {\n            // we need to continue traversing because the arguments are nodes too\n            return super.visitSequenceOperator(node);\n        }\n        OperatorNode<SequenceOperator> view = scope.getView(name);\n        if (view == null) {\n            return super.visitSequenceOperator(node);\n        }\n        // OK, so we have a SCAN node and we know it maps to a view.\n        // Make a deep copy of the view so later transforms can mutate it safely.\n        view = view.copy();\n        String alias = (String) node.getAnnotation(\"alias\");\n        if (alias != null) {\n            view.putAnnotation(\"alias\", alias);\n        }\n        return view;\n    }", "signature": "OperatorNode<SequenceOperator> visitSequenceOperator(OperatorNode<SequenceOperator> node)", "full_signature": "@Override public OperatorNode<SequenceOperator> visitSequenceOperator(OperatorNode<SequenceOperator> node)", "class_method_signature": "ExpandViews.visitSequenceOperator(OperatorNode<SequenceOperator> node)", "testcase": false, "constructor": false, "invocations": ["getOperator", "visitSequenceOperator", "getArgument", "getArgument", "size", "visitSequenceOperator", "getView", "visitSequenceOperator", "copy", "getAnnotation", "putAnnotation"]}, "repository": {"repo_id": 76505423, "url": "https://github.com/yahoo/yql-plus", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 30, "size": 1315, "license": "licensed"}}