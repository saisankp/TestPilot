{"test_class": {"identifier": "FeatureLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IKey fieldNameKey = mock(IKey.class);", "modifier": "private", "type": "IKey", "declarator": "fieldNameKey = mock(IKey.class)", "var_name": "fieldNameKey"}, {"original_string": "private IFieldName featureNameFN = mock(IFieldName.class);", "modifier": "private", "type": "IFieldName", "declarator": "featureNameFN = mock(IFieldName.class)", "var_name": "featureNameFN"}, {"original_string": "private IFieldName afterFeaturesFN = mock(IFieldName.class);", "modifier": "private", "type": "IFieldName", "declarator": "afterFeaturesFN = mock(IFieldName.class)", "var_name": "afterFeaturesFN"}, {"original_string": "private IKey pluginCreatorKey = mock(IKey.class);", "modifier": "private", "type": "IKey", "declarator": "pluginCreatorKey = mock(IKey.class)", "var_name": "pluginCreatorKey"}, {"original_string": "private IPluginCreator pluginCreatorMock;", "modifier": "private", "type": "IPluginCreator", "declarator": "pluginCreatorMock", "var_name": "pluginCreatorMock"}, {"original_string": "private IKey pluginLoaderVisitorKey = mock(IKey.class);", "modifier": "private", "type": "IKey", "declarator": "pluginLoaderVisitorKey = mock(IKey.class)", "var_name": "pluginLoaderVisitorKey"}, {"original_string": "private IPluginLoaderVisitor pluginLoaderVisitorMock;", "modifier": "private", "type": "IPluginLoaderVisitor", "declarator": "pluginLoaderVisitorMock", "var_name": "pluginLoaderVisitorMock"}, {"original_string": "private IKey configurationManagerKey = mock(IKey.class);", "modifier": "private", "type": "IKey", "declarator": "configurationManagerKey = mock(IKey.class)", "var_name": "configurationManagerKey"}, {"original_string": "private IConfigurationManager configurationManagerMock;", "modifier": "private", "type": "IConfigurationManager", "declarator": "configurationManagerMock", "var_name": "configurationManagerMock"}, {"original_string": "private IKey filesystemFacadeKey = mock(IKey.class);", "modifier": "private", "type": "IKey", "declarator": "filesystemFacadeKey = mock(IKey.class)", "var_name": "filesystemFacadeKey"}, {"original_string": "private IFilesystemFacade filesystemFacadeMock;", "modifier": "private", "type": "IFilesystemFacade", "declarator": "filesystemFacadeMock", "var_name": "filesystemFacadeMock"}, {"original_string": "private IKey iobjectKey = mock(IKey.class);", "modifier": "private", "type": "IKey", "declarator": "iobjectKey = mock(IKey.class)", "var_name": "iobjectKey"}, {"original_string": "private IObject metafeatureConfigMock = mock(IObject.class);", "modifier": "private", "type": "IObject", "declarator": "metafeatureConfigMock = mock(IObject.class)", "var_name": "metafeatureConfigMock"}, {"original_string": "private IKey featureStatusKey = mock(IKey.class);", "modifier": "private", "type": "IKey", "declarator": "featureStatusKey = mock(IKey.class)", "var_name": "featureStatusKey"}, {"original_string": "private FeatureStatusImpl featureStatusMock1;", "modifier": "private", "type": "FeatureStatusImpl", "declarator": "featureStatusMock1", "var_name": "featureStatusMock1"}, {"original_string": "private FeatureStatusImpl featureStatusMock2;", "modifier": "private", "type": "FeatureStatusImpl", "declarator": "featureStatusMock2", "var_name": "featureStatusMock2"}, {"original_string": "private IKey configurationObjectKey = mock(IKey.class);", "modifier": "private", "type": "IKey", "declarator": "configurationObjectKey = mock(IKey.class)", "var_name": "configurationObjectKey"}, {"original_string": "private IObject featureConfigurationMock1;", "modifier": "private", "type": "IObject", "declarator": "featureConfigurationMock1", "var_name": "featureConfigurationMock1"}, {"original_string": "private IObject featureConfigurationMock2;", "modifier": "private", "type": "IObject", "declarator": "featureConfigurationMock2", "var_name": "featureConfigurationMock2"}, {"original_string": "private IKey pluginLoaderKey = mock(IKey.class);", "modifier": "private", "type": "IKey", "declarator": "pluginLoaderKey = mock(IKey.class)", "var_name": "pluginLoaderKey"}, {"original_string": "private IPluginLoader pluginLoaderMock;", "modifier": "private", "type": "IPluginLoader", "declarator": "pluginLoaderMock", "var_name": "pluginLoaderMock"}, {"original_string": "private IKey queueKey = mock(IKey.class);", "modifier": "private", "type": "IKey", "declarator": "queueKey = mock(IKey.class)", "var_name": "queueKey"}, {"original_string": "private IQueue queueMock = mock(IQueue.class);", "modifier": "private", "type": "IQueue", "declarator": "queueMock = mock(IQueue.class)", "var_name": "queueMock"}, {"original_string": "private ArgumentCaptor<Object> argsCaptor = ArgumentCaptor.forClass(Object.class);", "modifier": "private", "type": "ArgumentCaptor<Object>", "declarator": "argsCaptor = ArgumentCaptor.forClass(Object.class)", "var_name": "argsCaptor"}, {"original_string": "private ITask taskMock = mock(ITask.class);", "modifier": "private", "type": "ITask", "declarator": "taskMock = mock(ITask.class)", "var_name": "taskMock"}], "file": "CoreFeatures/FeatureLoader/FeatureLoader/src/test/java/info/smart_tools/smartactors/feature_loader/feature_loader/FeatureLoaderTest.java"}, "test_case": {"identifier": "Should_loadFeatureGroup_justReturnStatusIfItIsAlreadyInitialized", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_loadFeatureGroup_justReturnStatusIfItIsAlreadyInitialized()\n            throws Exception {\n        when(featureStatusMock1.isInitialized()).thenReturn(true);\n        IPath pathMock = mock(IPath.class);\n\n        FeatureLoader featureLoader = new FeatureLoader();\n\n        IFeatureStatus status = featureLoader.loadGroup(pathMock);\n\n        assertSame(featureStatusMock1, status);\n        verify(featureStatusMock1).isInitialized();\n        verifyNoMoreInteractions(featureStatusMock1);\n    }", "signature": "void Should_loadFeatureGroup_justReturnStatusIfItIsAlreadyInitialized()", "full_signature": "@Test public void Should_loadFeatureGroup_justReturnStatusIfItIsAlreadyInitialized()", "class_method_signature": "FeatureLoaderTest.Should_loadFeatureGroup_justReturnStatusIfItIsAlreadyInitialized()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isInitialized", "mock", "loadGroup", "assertSame", "isInitialized", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "FeatureLoader", "superclass": "", "interfaces": "implements IFeatureLoader", "fields": [{"original_string": "private final ConcurrentHashMap<String, FeatureStatusImpl> statuses = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentHashMap<String, FeatureStatusImpl>", "declarator": "statuses = new ConcurrentHashMap<>()", "var_name": "statuses"}, {"original_string": "private final IFieldName featureNameFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "featureNameFieldName", "var_name": "featureNameFieldName"}, {"original_string": "private final IFieldName afterFeaturesFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "afterFeaturesFieldName", "var_name": "afterFeaturesFieldName"}, {"original_string": "private final IPluginCreator pluginCreator;", "modifier": "private final", "type": "IPluginCreator", "declarator": "pluginCreator", "var_name": "pluginCreator"}, {"original_string": "private final IPluginLoaderVisitor<String> pluginLoaderVisitor;", "modifier": "private final", "type": "IPluginLoaderVisitor<String>", "declarator": "pluginLoaderVisitor", "var_name": "pluginLoaderVisitor"}, {"original_string": "private final IConfigurationManager configurationManager;", "modifier": "private final", "type": "IConfigurationManager", "declarator": "configurationManager", "var_name": "configurationManager"}, {"original_string": "private final IFilesystemFacade fs;", "modifier": "private final", "type": "IFilesystemFacade", "declarator": "fs", "var_name": "fs"}, {"original_string": "private final Set<IBootstrapItem<String>> doneItems = ConcurrentHashMap.newKeySet();", "modifier": "private final", "type": "Set<IBootstrapItem<String>>", "declarator": "doneItems = ConcurrentHashMap.newKeySet()", "var_name": "doneItems"}, {"original_string": "private final AtomicReference<FeatureStatusImpl> currentLoadingStatus = new AtomicReference<>(null);", "modifier": "private final", "type": "AtomicReference<FeatureStatusImpl>", "declarator": "currentLoadingStatus = new AtomicReference<>(null)", "var_name": "currentLoadingStatus"}, {"original_string": "private IQueue<ITask> featureCompletionTaskQueue;", "modifier": "private", "type": "IQueue<ITask>", "declarator": "featureCompletionTaskQueue", "var_name": "featureCompletionTaskQueue"}], "methods": [{"identifier": "FeatureLoader", "parameters": "()", "modifiers": "public", "return": "", "signature": " FeatureLoader()", "full_signature": "public  FeatureLoader()", "class_method_signature": "FeatureLoader.FeatureLoader()", "testcase": false, "constructor": true}, {"identifier": "loadGroup", "parameters": "(final IPath groupPath)", "modifiers": "@Override public", "return": "IFeatureStatus", "signature": "IFeatureStatus loadGroup(final IPath groupPath)", "full_signature": "@Override public IFeatureStatus loadGroup(final IPath groupPath)", "class_method_signature": "FeatureLoader.loadGroup(final IPath groupPath)", "testcase": false, "constructor": false}, {"identifier": "loadFeature", "parameters": "(final IPath featurePath)", "modifiers": "@Override public", "return": "IFeatureStatus", "signature": "IFeatureStatus loadFeature(final IPath featurePath)", "full_signature": "@Override public IFeatureStatus loadFeature(final IPath featurePath)", "class_method_signature": "FeatureLoader.loadFeature(final IPath featurePath)", "testcase": false, "constructor": false}, {"identifier": "getFeatureStatus", "parameters": "(final String featureId)", "modifiers": "@Override public", "return": "IFeatureStatus", "signature": "IFeatureStatus getFeatureStatus(final String featureId)", "full_signature": "@Override public IFeatureStatus getFeatureStatus(final String featureId)", "class_method_signature": "FeatureLoader.getFeatureStatus(final String featureId)", "testcase": false, "constructor": false}, {"identifier": "loadFeature0", "parameters": "(final IPath featurePath)", "modifiers": "private", "return": "FeatureStatusImpl", "signature": "FeatureStatusImpl loadFeature0(final IPath featurePath)", "full_signature": "private FeatureStatusImpl loadFeature0(final IPath featurePath)", "class_method_signature": "FeatureLoader.loadFeature0(final IPath featurePath)", "testcase": false, "constructor": false}, {"identifier": "getFeatureStatus0", "parameters": "(final String featureId)", "modifiers": "private", "return": "FeatureStatusImpl", "signature": "FeatureStatusImpl getFeatureStatus0(final String featureId)", "full_signature": "private FeatureStatusImpl getFeatureStatus0(final String featureId)", "class_method_signature": "FeatureLoader.getFeatureStatus0(final String featureId)", "testcase": false, "constructor": false}, {"identifier": "listJarsIn", "parameters": "(final IPath dirPath)", "modifiers": "private", "return": "Collection<IPath>", "signature": "Collection<IPath> listJarsIn(final IPath dirPath)", "full_signature": "private Collection<IPath> listJarsIn(final IPath dirPath)", "class_method_signature": "FeatureLoader.listJarsIn(final IPath dirPath)", "testcase": false, "constructor": false}, {"identifier": "readFeatureConfig", "parameters": "(final IPath featurePath)", "modifiers": "private", "return": "IObject", "signature": "IObject readFeatureConfig(final IPath featurePath)", "full_signature": "private IObject readFeatureConfig(final IPath featurePath)", "class_method_signature": "FeatureLoader.readFeatureConfig(final IPath featurePath)", "testcase": false, "constructor": false}, {"identifier": "loadPluginsAndConfig", "parameters": "(final IObject config, final IPath directory)", "modifiers": "private", "return": "void", "signature": "void loadPluginsAndConfig(final IObject config, final IPath directory)", "full_signature": "private void loadPluginsAndConfig(final IObject config, final IPath directory)", "class_method_signature": "FeatureLoader.loadPluginsAndConfig(final IObject config, final IPath directory)", "testcase": false, "constructor": false}, {"identifier": "loadPluginsFrom", "parameters": "(final Collection<IPath> jars)", "modifiers": "private", "return": "void", "signature": "void loadPluginsFrom(final Collection<IPath> jars)", "full_signature": "private void loadPluginsFrom(final Collection<IPath> jars)", "class_method_signature": "FeatureLoader.loadPluginsFrom(final Collection<IPath> jars)", "testcase": false, "constructor": false}, {"identifier": "preStartProcess", "parameters": "(final FeatureStatusImpl status)", "modifiers": "private", "return": "void", "signature": "void preStartProcess(final FeatureStatusImpl status)", "full_signature": "private void preStartProcess(final FeatureStatusImpl status)", "class_method_signature": "FeatureLoader.preStartProcess(final FeatureStatusImpl status)", "testcase": false, "constructor": false}], "file": "CoreFeatures/FeatureLoader/FeatureLoader/src/main/java/info/smart_tools/smartactors/feature_loader/feature_loader/FeatureLoader.java"}, "focal_method": {"identifier": "loadGroup", "parameters": "(final IPath groupPath)", "modifiers": "@Override public", "return": "IFeatureStatus", "body": "@Override\n    public IFeatureStatus loadGroup(final IPath groupPath)\n            throws FeatureLoadException {\n        try {\n            FeatureStatusImpl metaFeatureStatus = getFeatureStatus0(\"group@\" + groupPath.getPath());\n\n            if (metaFeatureStatus.isInitialized()) {\n                return metaFeatureStatus;\n            }\n\n            Set<FeatureStatusImpl> statuses = new HashSet<>();\n\n            for (IPath path : fs.listSubdirectories(groupPath)) {\n                FeatureStatusImpl status = loadFeature0(path);\n\n                statuses.add(status);\n                statuses.addAll(status.getDependencies());\n            }\n\n            for (FeatureStatusImpl dependencyStatus : statuses) {\n                if (!dependencyStatus.isInitialized()) {\n                    throw new FeatureLoadException(\n                            MessageFormat.format(\"Feature named {0} not found.\", dependencyStatus.getId()));\n                }\n\n                metaFeatureStatus.addDependency(dependencyStatus);\n            }\n\n            metaFeatureStatus.init(groupPath, IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\")));\n\n            preStartProcess(metaFeatureStatus);\n\n            for (FeatureStatusImpl status : statuses) {\n                status.load();\n            }\n\n            metaFeatureStatus.load();\n\n            return metaFeatureStatus;\n        } catch (IOException | FeatureLoadException | ActionExecuteException | ResolutionException e) {\n            throw new FeatureLoadException(\n                    MessageFormat.format(\"Error occurred loading features from ''{0}''.\", groupPath.getPath()), e);\n        }\n    }", "signature": "IFeatureStatus loadGroup(final IPath groupPath)", "full_signature": "@Override public IFeatureStatus loadGroup(final IPath groupPath)", "class_method_signature": "FeatureLoader.loadGroup(final IPath groupPath)", "testcase": false, "constructor": false, "invocations": ["getFeatureStatus0", "getPath", "isInitialized", "listSubdirectories", "loadFeature0", "add", "addAll", "getDependencies", "isInitialized", "format", "getId", "addDependency", "init", "resolve", "getOrAdd", "preStartProcess", "load", "load", "format", "getPath"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}