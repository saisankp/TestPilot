{"test_class": {"identifier": "KeysTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final byte[] ENCODED;", "modifier": "private static final", "type": "byte[]", "declarator": "ENCODED", "var_name": "ENCODED"}], "file": "crypto/src/test/java/org/web3j/crypto/KeysTest.java"}, "test_case": {"identifier": "testCreateSecp256k1KeyPair", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateSecp256k1KeyPair() throws Exception {\n        KeyPair keyPair = Keys.createSecp256k1KeyPair();\n        PrivateKey privateKey = keyPair.getPrivate();\n        PublicKey publicKey = keyPair.getPublic();\n\n        assertNotNull(privateKey);\n        assertNotNull(publicKey);\n\n        assertThat(privateKey.getEncoded().length, is(144));\n        assertThat(publicKey.getEncoded().length, is(88));\n    }", "signature": "void testCreateSecp256k1KeyPair()", "full_signature": "@Test public void testCreateSecp256k1KeyPair()", "class_method_signature": "KeysTest.testCreateSecp256k1KeyPair()", "testcase": true, "constructor": false, "invocations": ["createSecp256k1KeyPair", "getPrivate", "getPublic", "assertNotNull", "assertNotNull", "assertThat", "getEncoded", "is", "assertThat", "getEncoded", "is"]}, "focal_class": {"identifier": "Keys", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int PRIVATE_KEY_SIZE = 32;", "modifier": "static final", "type": "int", "declarator": "PRIVATE_KEY_SIZE = 32", "var_name": "PRIVATE_KEY_SIZE"}, {"original_string": "static final int PUBLIC_KEY_SIZE = 64;", "modifier": "static final", "type": "int", "declarator": "PUBLIC_KEY_SIZE = 64", "var_name": "PUBLIC_KEY_SIZE"}, {"original_string": "public static final int ADDRESS_SIZE = 160;", "modifier": "public static final", "type": "int", "declarator": "ADDRESS_SIZE = 160", "var_name": "ADDRESS_SIZE"}, {"original_string": "public static final int ADDRESS_LENGTH_IN_HEX = ADDRESS_SIZE >> 2;", "modifier": "public static final", "type": "int", "declarator": "ADDRESS_LENGTH_IN_HEX = ADDRESS_SIZE >> 2", "var_name": "ADDRESS_LENGTH_IN_HEX"}, {"original_string": "static final int PUBLIC_KEY_LENGTH_IN_HEX = PUBLIC_KEY_SIZE << 1;", "modifier": "static final", "type": "int", "declarator": "PUBLIC_KEY_LENGTH_IN_HEX = PUBLIC_KEY_SIZE << 1", "var_name": "PUBLIC_KEY_LENGTH_IN_HEX"}, {"original_string": "public static final int PRIVATE_KEY_LENGTH_IN_HEX = PRIVATE_KEY_SIZE << 1;", "modifier": "public static final", "type": "int", "declarator": "PRIVATE_KEY_LENGTH_IN_HEX = PRIVATE_KEY_SIZE << 1", "var_name": "PRIVATE_KEY_LENGTH_IN_HEX"}], "methods": [{"identifier": "Keys", "parameters": "()", "modifiers": "private", "return": "", "signature": " Keys()", "full_signature": "private  Keys()", "class_method_signature": "Keys.Keys()", "testcase": false, "constructor": true}, {"identifier": "createSecp256k1KeyPair", "parameters": "()", "modifiers": "static", "return": "KeyPair", "signature": "KeyPair createSecp256k1KeyPair()", "full_signature": "static KeyPair createSecp256k1KeyPair()", "class_method_signature": "Keys.createSecp256k1KeyPair()", "testcase": false, "constructor": false}, {"identifier": "createEcKeyPair", "parameters": "()", "modifiers": "public static", "return": "ECKeyPair", "signature": "ECKeyPair createEcKeyPair()", "full_signature": "public static ECKeyPair createEcKeyPair()", "class_method_signature": "Keys.createEcKeyPair()", "testcase": false, "constructor": false}, {"identifier": "getAddress", "parameters": "(ECKeyPair ecKeyPair)", "modifiers": "public static", "return": "String", "signature": "String getAddress(ECKeyPair ecKeyPair)", "full_signature": "public static String getAddress(ECKeyPair ecKeyPair)", "class_method_signature": "Keys.getAddress(ECKeyPair ecKeyPair)", "testcase": false, "constructor": false}, {"identifier": "getAddress", "parameters": "(BigInteger publicKey)", "modifiers": "public static", "return": "String", "signature": "String getAddress(BigInteger publicKey)", "full_signature": "public static String getAddress(BigInteger publicKey)", "class_method_signature": "Keys.getAddress(BigInteger publicKey)", "testcase": false, "constructor": false}, {"identifier": "getAddress", "parameters": "(String publicKey)", "modifiers": "public static", "return": "String", "signature": "String getAddress(String publicKey)", "full_signature": "public static String getAddress(String publicKey)", "class_method_signature": "Keys.getAddress(String publicKey)", "testcase": false, "constructor": false}, {"identifier": "getAddress", "parameters": "(byte[] publicKey)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getAddress(byte[] publicKey)", "full_signature": "public static byte[] getAddress(byte[] publicKey)", "class_method_signature": "Keys.getAddress(byte[] publicKey)", "testcase": false, "constructor": false}, {"identifier": "toChecksumAddress", "parameters": "(String address)", "modifiers": "public static", "return": "String", "signature": "String toChecksumAddress(String address)", "full_signature": "public static String toChecksumAddress(String address)", "class_method_signature": "Keys.toChecksumAddress(String address)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(ECKeyPair ecKeyPair)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] serialize(ECKeyPair ecKeyPair)", "full_signature": "public static byte[] serialize(ECKeyPair ecKeyPair)", "class_method_signature": "Keys.serialize(ECKeyPair ecKeyPair)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(byte[] input)", "modifiers": "public static", "return": "ECKeyPair", "signature": "ECKeyPair deserialize(byte[] input)", "full_signature": "public static ECKeyPair deserialize(byte[] input)", "class_method_signature": "Keys.deserialize(byte[] input)", "testcase": false, "constructor": false}], "file": "crypto/src/main/java/org/web3j/crypto/Keys.java"}, "focal_method": {"identifier": "createSecp256k1KeyPair", "parameters": "()", "modifiers": "static", "return": "KeyPair", "body": "static KeyPair createSecp256k1KeyPair() throws NoSuchProviderException,\n            NoSuchAlgorithmException, InvalidAlgorithmParameterException {\n\n        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"ECDSA\", \"SC\");\n        ECGenParameterSpec ecGenParameterSpec = new ECGenParameterSpec(\"secp256k1\");\n        keyPairGenerator.initialize(ecGenParameterSpec, secureRandom());\n        return keyPairGenerator.generateKeyPair();\n    }", "signature": "KeyPair createSecp256k1KeyPair()", "full_signature": "static KeyPair createSecp256k1KeyPair()", "class_method_signature": "Keys.createSecp256k1KeyPair()", "testcase": false, "constructor": false, "invocations": ["getInstance", "initialize", "secureRandom", "generateKeyPair"]}, "repository": {"repo_id": 149736342, "url": "https://github.com/BrahmaOS/brahmaos-web3j", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 1779, "license": "licensed"}}