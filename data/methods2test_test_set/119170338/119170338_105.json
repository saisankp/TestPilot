{"test_class": {"identifier": "HypergeometricTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Hypergeometric hypergeometric = new Hypergeometric();", "modifier": "private static final", "type": "Hypergeometric", "declarator": "hypergeometric = new Hypergeometric()", "var_name": "hypergeometric"}, {"original_string": "private static final double EPSILON = 0.00001;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 0.00001", "var_name": "EPSILON"}], "file": "phenol-analysis/src/test/java/org/monarchinitiative/phenol/stats/HypergeometricTest.java"}, "test_case": {"identifier": "compareTermForTerm3", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void compareTermForTerm3() {\n    // Pop.total\tPop.term\tStudy.total\tStudy.term\n    // 13668\t360\t1757\t82\t5.610055205824117E-7\n    int m = 13668;\n    int m_t = 360;\n    int n = 1757;\n    int n_t = 82;\n    double expected = 5.610055205824117E-7;\n    assertEquals(expected, hypergeometric.phypergeometric(m, m_t, n, n_t), EPSILON);\n  }", "signature": "void compareTermForTerm3()", "full_signature": "@Test void compareTermForTerm3()", "class_method_signature": "HypergeometricTest.compareTermForTerm3()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "phypergeometric"]}, "focal_class": {"identifier": "Hypergeometric", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Vector<Double> lfactorial;", "modifier": "private final", "type": "Vector<Double>", "declarator": "lfactorial", "var_name": "lfactorial"}], "methods": [{"identifier": "Hypergeometric", "parameters": "()", "modifiers": "public", "return": "", "signature": " Hypergeometric()", "full_signature": "public  Hypergeometric()", "class_method_signature": "Hypergeometric.Hypergeometric()", "testcase": false, "constructor": true}, {"identifier": "phypergeometric", "parameters": "(int n, double p, int k, int r)", "modifiers": "public", "return": "double", "signature": "double phypergeometric(int n, double p, int k, int r)", "full_signature": "public double phypergeometric(int n, double p, int k, int r)", "class_method_signature": "Hypergeometric.phypergeometric(int n, double p, int k, int r)", "testcase": false, "constructor": false}, {"identifier": "phypergeometric", "parameters": "(int m, int m_t, int n, int n_t)", "modifiers": "public", "return": "double", "signature": "double phypergeometric(int m, int m_t, int n, int n_t)", "full_signature": "public double phypergeometric(int m, int m_t, int n, int n_t)", "class_method_signature": "Hypergeometric.phypergeometric(int m, int m_t, int n, int n_t)", "testcase": false, "constructor": false}, {"identifier": "dhyper", "parameters": "(int x, int N, int M, int n)", "modifiers": "public", "return": "double", "signature": "double dhyper(int x, int N, int M, int n)", "full_signature": "public double dhyper(int x, int N, int M, int n)", "class_method_signature": "Hypergeometric.dhyper(int x, int N, int M, int n)", "testcase": false, "constructor": false}, {"identifier": "phyper", "parameters": "(int x, int N, int M, int n, boolean lowerTail)", "modifiers": "public", "return": "double", "signature": "double phyper(int x, int N, int M, int n, boolean lowerTail)", "full_signature": "public double phyper(int x, int N, int M, int n, boolean lowerTail)", "class_method_signature": "Hypergeometric.phyper(int x, int N, int M, int n, boolean lowerTail)", "testcase": false, "constructor": false}, {"identifier": "lNchooseK", "parameters": "(int n, int k)", "modifiers": "public", "return": "double", "signature": "double lNchooseK(int n, int k)", "full_signature": "public double lNchooseK(int n, int k)", "class_method_signature": "Hypergeometric.lNchooseK(int n, int k)", "testcase": false, "constructor": false}, {"identifier": "logfact", "parameters": "(int i)", "modifiers": "public", "return": "double", "signature": "double logfact(int i)", "full_signature": "public double logfact(int i)", "class_method_signature": "Hypergeometric.logfact(int i)", "testcase": false, "constructor": false}], "file": "phenol-analysis/src/main/java/org/monarchinitiative/phenol/stats/Hypergeometric.java"}, "focal_method": {"identifier": "phypergeometric", "parameters": "(int n, double p, int k, int r)", "modifiers": "public", "return": "double", "body": "public double phypergeometric(int n, double p, int k, int r) {\n    /*\n     * Study group cannot be larger than population. If this happens there\n     * is probably something wrong with the input data, but returning 1.0\n     * prevents confusing and wrong output.\n     */\n    if (k >= n)\n      return 1.0;\n\n    if (r < 1) {\n      return 1.0; // Not valid for r < 2, less than 2 study genes.\n    }\n\n    double q = 1.0 - p;\n    int np = (int) Math.round(n * p); // Round to nearest int\n    int nq = (int) Math.round(n * q);\n\n    double log_n_choose_k = lNchooseK(n, k);\n    int top = k;\n    if (np < k) {\n      top = np;\n    }\n\n    double lfoo = lNchooseK(np, top) + lNchooseK(nq, k - top);\n\n    double sum = 0.0;\n\n    for (int i = top; i >= r; --i) {\n      sum += Math.exp(lfoo - log_n_choose_k);\n      if (i > r) {\n        lfoo = lfoo\n          + Math.log((double) i / (double) (np - i + 1))\n          + Math.log((double) (nq - k + i)\n          / (double) (k - i + 1));\n      }\n    }\n    return sum;\n  }", "signature": "double phypergeometric(int n, double p, int k, int r)", "full_signature": "public double phypergeometric(int n, double p, int k, int r)", "class_method_signature": "Hypergeometric.phypergeometric(int n, double p, int k, int r)", "testcase": false, "constructor": false, "invocations": ["round", "round", "lNchooseK", "lNchooseK", "lNchooseK", "exp", "log", "log"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}