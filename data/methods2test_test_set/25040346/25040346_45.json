{"test_class": {"identifier": "AudioEncoderTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "domain/src/test/java/org/m4m/domain/AudioEncoderTest.java"}, "test_case": {"identifier": "findFreeFrameReturnsNull_whenFillCommandQueuesNotCalled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findFreeFrameReturnsNull_whenFillCommandQueuesNotCalled() {\n        AudioEncoder encoder = create.audioEncoder().withDequeueInputBufferIndex(2).construct();\n        encoder.start();\n\n        Frame frame = encoder.findFreeFrame();\n\n        assertNull(frame);\n    }", "signature": "void findFreeFrameReturnsNull_whenFillCommandQueuesNotCalled()", "full_signature": "@Test public void findFreeFrameReturnsNull_whenFillCommandQueuesNotCalled()", "class_method_signature": "AudioEncoderTest.findFreeFrameReturnsNull_whenFillCommandQueuesNotCalled()", "testcase": true, "constructor": false, "invocations": ["construct", "withDequeueInputBufferIndex", "audioEncoder", "start", "findFreeFrame", "assertNull"]}, "focal_class": {"identifier": "AudioEncoder", "superclass": "extends Encoder", "interfaces": "", "fields": [{"original_string": "private Resampler resampler = null;", "modifier": "private", "type": "Resampler", "declarator": "resampler = null", "var_name": "resampler"}, {"original_string": "private AudioFormat inputAudioFormat;", "modifier": "private", "type": "AudioFormat", "declarator": "inputAudioFormat", "var_name": "inputAudioFormat"}], "methods": [{"identifier": "AudioEncoder", "parameters": "(IMediaCodec mediaCodec)", "modifiers": "public", "return": "", "signature": " AudioEncoder(IMediaCodec mediaCodec)", "full_signature": "public  AudioEncoder(IMediaCodec mediaCodec)", "class_method_signature": "AudioEncoder.AudioEncoder(IMediaCodec mediaCodec)", "testcase": false, "constructor": true}, {"identifier": "setMediaFormat", "parameters": "(MediaFormat mediaFormat)", "modifiers": "@Override public", "return": "void", "signature": "void setMediaFormat(MediaFormat mediaFormat)", "full_signature": "@Override public void setMediaFormat(MediaFormat mediaFormat)", "class_method_signature": "AudioEncoder.setMediaFormat(MediaFormat mediaFormat)", "testcase": false, "constructor": false}, {"identifier": "setInputMediaFormat", "parameters": "(MediaFormat mediaFormat)", "modifiers": "@Override public", "return": "void", "signature": "void setInputMediaFormat(MediaFormat mediaFormat)", "full_signature": "@Override public void setInputMediaFormat(MediaFormat mediaFormat)", "class_method_signature": "AudioEncoder.setInputMediaFormat(MediaFormat mediaFormat)", "testcase": false, "constructor": false}, {"identifier": "initInputCommandQueue", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void initInputCommandQueue()", "full_signature": "@Override protected void initInputCommandQueue()", "class_method_signature": "AudioEncoder.initInputCommandQueue()", "testcase": false, "constructor": false}, {"identifier": "isLastFile", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLastFile()", "full_signature": "@Override public boolean isLastFile()", "class_method_signature": "AudioEncoder.isLastFile()", "testcase": false, "constructor": false}, {"identifier": "setOutputSurface", "parameters": "(ISurface surface)", "modifiers": "@Override public", "return": "void", "signature": "void setOutputSurface(ISurface surface)", "full_signature": "@Override public void setOutputSurface(ISurface surface)", "class_method_signature": "AudioEncoder.setOutputSurface(ISurface surface)", "testcase": false, "constructor": false}, {"identifier": "waitForSurface", "parameters": "(long pts)", "modifiers": "@Override public", "return": "void", "signature": "void waitForSurface(long pts)", "full_signature": "@Override public void waitForSurface(long pts)", "class_method_signature": "AudioEncoder.waitForSurface(long pts)", "testcase": false, "constructor": false}, {"identifier": "drain", "parameters": "(int bufferIndex)", "modifiers": "@Override public", "return": "void", "signature": "void drain(int bufferIndex)", "full_signature": "@Override public void drain(int bufferIndex)", "class_method_signature": "AudioEncoder.drain(int bufferIndex)", "testcase": false, "constructor": false}, {"identifier": "push", "parameters": "(Frame frame)", "modifiers": "@Override public", "return": "void", "signature": "void push(Frame frame)", "full_signature": "@Override public void push(Frame frame)", "class_method_signature": "AudioEncoder.push(Frame frame)", "testcase": false, "constructor": false}, {"identifier": "getSampleRate", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSampleRate()", "full_signature": "public int getSampleRate()", "class_method_signature": "AudioEncoder.getSampleRate()", "testcase": false, "constructor": false}, {"identifier": "getChannelCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getChannelCount()", "full_signature": "public int getChannelCount()", "class_method_signature": "AudioEncoder.getChannelCount()", "testcase": false, "constructor": false}, {"identifier": "getBitRate", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBitRate()", "full_signature": "public int getBitRate()", "class_method_signature": "AudioEncoder.getBitRate()", "testcase": false, "constructor": false}, {"identifier": "setSampleRate", "parameters": "(int sampleRateInHz)", "modifiers": "public", "return": "void", "signature": "void setSampleRate(int sampleRateInHz)", "full_signature": "public void setSampleRate(int sampleRateInHz)", "class_method_signature": "AudioEncoder.setSampleRate(int sampleRateInHz)", "testcase": false, "constructor": false}, {"identifier": "setChannelCount", "parameters": "(int channelCount)", "modifiers": "public", "return": "void", "signature": "void setChannelCount(int channelCount)", "full_signature": "public void setChannelCount(int channelCount)", "class_method_signature": "AudioEncoder.setChannelCount(int channelCount)", "testcase": false, "constructor": false}, {"identifier": "getAudioFormat", "parameters": "()", "modifiers": "private", "return": "AudioFormat", "signature": "AudioFormat getAudioFormat()", "full_signature": "private AudioFormat getAudioFormat()", "class_method_signature": "AudioEncoder.getAudioFormat()", "testcase": false, "constructor": false}, {"identifier": "resampleAudioFrame", "parameters": "(Frame frame)", "modifiers": "public", "return": "void", "signature": "void resampleAudioFrame(Frame frame)", "full_signature": "public void resampleAudioFrame(Frame frame)", "class_method_signature": "AudioEncoder.resampleAudioFrame(Frame frame)", "testcase": false, "constructor": false}, {"identifier": "addResampler", "parameters": "(Resampler resampler)", "modifiers": "public", "return": "void", "signature": "void addResampler(Resampler resampler)", "full_signature": "public void addResampler(Resampler resampler)", "class_method_signature": "AudioEncoder.addResampler(Resampler resampler)", "testcase": false, "constructor": false}], "file": "domain/src/main/java/org/m4m/domain/AudioEncoder.java"}, "focal_method": {"identifier": "AudioEncoder", "parameters": "(IMediaCodec mediaCodec)", "modifiers": "public", "return": "", "body": "public AudioEncoder(IMediaCodec mediaCodec) {\n        super(mediaCodec);\n    }", "signature": " AudioEncoder(IMediaCodec mediaCodec)", "full_signature": "public  AudioEncoder(IMediaCodec mediaCodec)", "class_method_signature": "AudioEncoder.AudioEncoder(IMediaCodec mediaCodec)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 25040346, "url": "https://github.com/INDExOS/media-for-mobile", "language": "Java", "is_fork": false, "fork_count": 167, "stargazer_count": 416, "size": 619, "license": "licensed"}}