{"test_class": {"identifier": "ResultsServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    ResultsService resultsService;", "modifier": "@InjectMocks", "type": "ResultsService", "declarator": "resultsService", "var_name": "resultsService"}, {"original_string": "@Mock\n    RunEntityService runEntityService;", "modifier": "@Mock", "type": "RunEntityService", "declarator": "runEntityService", "var_name": "runEntityService"}, {"original_string": "@Mock\n    RunScoringInteractor runScoringInteractor;", "modifier": "@Mock", "type": "RunScoringInteractor", "declarator": "runScoringInteractor", "var_name": "runScoringInteractor"}, {"original_string": "@Mock\n    Registration registration;", "modifier": "@Mock", "type": "Registration", "declarator": "registration", "var_name": "registration"}, {"original_string": "@Mock\n    Event event;", "modifier": "@Mock", "type": "Event", "declarator": "event", "var_name": "event"}, {"original_string": "List<Run> allRunsWithRegistration = new ArrayList<>();", "modifier": "", "type": "List<Run>", "declarator": "allRunsWithRegistration = new ArrayList<>()", "var_name": "allRunsWithRegistration"}], "file": "service/src/test/java/org/coner/core/domain/service/ResultsServiceTest.java"}, "test_case": {"identifier": "itShouldGetResultsWithScoreForRegistrationWithCompletedRuns", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void itShouldGetResultsWithScoreForRegistrationWithCompletedRuns() {\n        ScoredRun expectedScoredRun = DomainEntityTestUtils.fullScoredRun();\n        allRunsWithRegistration.addAll(Arrays.asList(mock(Run.class), mock(Run.class)));\n        expectedScoredRun.setRawTimeScored(TestConstants.SCORED_RUN_RAW_TIME_SCORED.subtract(BigDecimal.ONE));\n        expectedScoredRun.setHandicapTimeScored(TestConstants.SCORED_RUN_HANDICAP_TIME_SCORED.subtract(BigDecimal.ONE));\n        ScoredRun unexpectedScoredRun = DomainEntityTestUtils.fullScoredRun();\n        unexpectedScoredRun.setRawTimeScored(TestConstants.SCORED_RUN_RAW_TIME_SCORED.add(BigDecimal.ONE));\n        unexpectedScoredRun.setHandicapTimeScored(TestConstants.SCORED_RUN_HANDICAP_TIME_SCORED.add(BigDecimal.ONE));\n        List<ScoredRun> expectedScoredRuns = Arrays.asList(unexpectedScoredRun, expectedScoredRun);\n        when(runScoringInteractor.score(any(Run.class))).thenReturn(unexpectedScoredRun, expectedScoredRun);\n\n        GetRegistrationResultsPayload actual = resultsService.getResultsFor(registration);\n\n        assertThat(actual.getScore()).isEqualTo(expectedScoredRun);\n        assertThat(actual.getScoredRuns()).isEqualTo(expectedScoredRuns);\n        assertThat(actual.getRegistration()).isSameAs(registration);\n    }", "signature": "void itShouldGetResultsWithScoreForRegistrationWithCompletedRuns()", "full_signature": "@Test public void itShouldGetResultsWithScoreForRegistrationWithCompletedRuns()", "class_method_signature": "ResultsServiceTest.itShouldGetResultsWithScoreForRegistrationWithCompletedRuns()", "testcase": true, "constructor": false, "invocations": ["fullScoredRun", "addAll", "asList", "mock", "mock", "setRawTimeScored", "subtract", "setHandicapTimeScored", "subtract", "fullScoredRun", "setRawTimeScored", "add", "setHandicapTimeScored", "add", "asList", "thenReturn", "when", "score", "any", "getResultsFor", "isEqualTo", "assertThat", "getScore", "isEqualTo", "assertThat", "getScoredRuns", "isSameAs", "assertThat", "getRegistration"]}, "focal_class": {"identifier": "ResultsService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final RunEntityService runEntityService;", "modifier": "private final", "type": "RunEntityService", "declarator": "runEntityService", "var_name": "runEntityService"}, {"original_string": "private final RunScoringInteractor runScoringInteractor;", "modifier": "private final", "type": "RunScoringInteractor", "declarator": "runScoringInteractor", "var_name": "runScoringInteractor"}], "methods": [{"identifier": "ResultsService", "parameters": "(\n            RunEntityService runEntityService,\n            RunScoringInteractor runScoringInteractor\n    )", "modifiers": "@Inject public", "return": "", "signature": " ResultsService(\n            RunEntityService runEntityService,\n            RunScoringInteractor runScoringInteractor\n    )", "full_signature": "@Inject public  ResultsService(\n            RunEntityService runEntityService,\n            RunScoringInteractor runScoringInteractor\n    )", "class_method_signature": "ResultsService.ResultsService(\n            RunEntityService runEntityService,\n            RunScoringInteractor runScoringInteractor\n    )", "testcase": false, "constructor": true}, {"identifier": "getResultsFor", "parameters": "(Registration registration)", "modifiers": "public", "return": "GetRegistrationResultsPayload", "signature": "GetRegistrationResultsPayload getResultsFor(Registration registration)", "full_signature": "public GetRegistrationResultsPayload getResultsFor(Registration registration)", "class_method_signature": "ResultsService.getResultsFor(Registration registration)", "testcase": false, "constructor": false}], "file": "service/src/main/java/org/coner/core/domain/service/ResultsService.java"}, "focal_method": {"identifier": "getResultsFor", "parameters": "(Registration registration)", "modifiers": "public", "return": "GetRegistrationResultsPayload", "body": "public GetRegistrationResultsPayload getResultsFor(Registration registration) {\n        GetRegistrationResultsPayload payload = new GetRegistrationResultsPayload();\n        payload.setRegistration(registration);\n\n        List<Run> runs = runEntityService.getAllWithRegistration(registration);\n        int maxRunsPerRegistration = registration.getEvent().getMaxRunsPerRegistration();\n        List<ScoredRun> scoredRuns = new ArrayList<>(runs.size());\n        for (Run run : runs) {\n            if (scoredRuns.size() >= maxRunsPerRegistration) {\n                break;\n            }\n            ScoredRun scoredRun = runScoringInteractor.score(run);\n            if (scoredRun != null) {\n                scoredRuns.add(scoredRun);\n            }\n        }\n        payload.setScoredRuns(scoredRuns);\n\n        payload.setScore(scoredRuns.stream()\n                                 .min(Comparator.comparing(ScoredRun::getRawTimeScored))\n                                 .orElse(null));\n\n        return payload;\n    }", "signature": "GetRegistrationResultsPayload getResultsFor(Registration registration)", "full_signature": "public GetRegistrationResultsPayload getResultsFor(Registration registration)", "class_method_signature": "ResultsService.getResultsFor(Registration registration)", "testcase": false, "constructor": false, "invocations": ["setRegistration", "getAllWithRegistration", "getMaxRunsPerRegistration", "getEvent", "size", "size", "score", "add", "setScoredRuns", "setScore", "orElse", "min", "stream", "comparing"]}, "repository": {"repo_id": 28649714, "url": "https://github.com/caeos/coner-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1027, "license": "licensed"}}