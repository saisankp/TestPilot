{"test_class": {"identifier": "KiePMMLUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NO_MODELNAME_SAMPLE_NAME = \"NoModelNameSample.pmml\";", "modifier": "private static final", "type": "String", "declarator": "NO_MODELNAME_SAMPLE_NAME = \"NoModelNameSample.pmml\"", "var_name": "NO_MODELNAME_SAMPLE_NAME"}, {"original_string": "private static final String NO_MODELNAME_NO_SEGMENTID_SAMPLE_NAME = \"NoModelNameNoSegmentIdSample.pmml\";", "modifier": "private static final", "type": "String", "declarator": "NO_MODELNAME_NO_SEGMENTID_SAMPLE_NAME = \"NoModelNameNoSegmentIdSample.pmml\"", "var_name": "NO_MODELNAME_NO_SEGMENTID_SAMPLE_NAME"}], "file": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtilTest.java"}, "test_case": {"identifier": "getSanitizedId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getSanitizedId() {\n        final String modelName = \"MODEL_NAME\";\n        String id = \"2\";\n        String expected = String.format(SEGMENTID_TEMPLATE, modelName, id);\n        String retrieved = KiePMMLUtil.getSanitizedId(id, modelName);\n        assertEquals(expected,retrieved);\n        id = \"34.5\";\n        expected = String.format(SEGMENTID_TEMPLATE, modelName, id);\n        retrieved = KiePMMLUtil.getSanitizedId(id, modelName);\n        assertEquals(expected,retrieved);\n        id = \"3,45\";\n        expected = String.format(SEGMENTID_TEMPLATE, modelName, id);\n        retrieved = KiePMMLUtil.getSanitizedId(id, modelName);\n        assertEquals(expected,retrieved);\n\n    }", "signature": "void getSanitizedId()", "full_signature": "@Test public void getSanitizedId()", "class_method_signature": "KiePMMLUtilTest.getSanitizedId()", "testcase": true, "constructor": false, "invocations": ["format", "getSanitizedId", "assertEquals", "format", "getSanitizedId", "assertEquals", "format", "getSanitizedId", "assertEquals"]}, "focal_class": {"identifier": "KiePMMLUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String SEGMENTID_TEMPLATE = \"%sSegment%s\";", "modifier": "public static final", "type": "String", "declarator": "SEGMENTID_TEMPLATE = \"%sSegment%s\"", "var_name": "SEGMENTID_TEMPLATE"}, {"original_string": "static final String MODELNAME_TEMPLATE = \"%s%s%s\";", "modifier": "static final", "type": "String", "declarator": "MODELNAME_TEMPLATE = \"%s%s%s\"", "var_name": "MODELNAME_TEMPLATE"}, {"original_string": "static final String SEGMENTMODELNAME_TEMPLATE = \"Segment%s%s\";", "modifier": "static final", "type": "String", "declarator": "SEGMENTMODELNAME_TEMPLATE = \"Segment%s%s\"", "var_name": "SEGMENTMODELNAME_TEMPLATE"}], "methods": [{"identifier": "KiePMMLUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " KiePMMLUtil()", "full_signature": "private  KiePMMLUtil()", "class_method_signature": "KiePMMLUtil.KiePMMLUtil()", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "(String source)", "modifiers": "public static", "return": "PMML", "signature": "PMML load(String source)", "full_signature": "public static PMML load(String source)", "class_method_signature": "KiePMMLUtil.load(String source)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(final InputStream is, final String fileName)", "modifiers": "public static", "return": "PMML", "signature": "PMML load(final InputStream is, final String fileName)", "full_signature": "public static PMML load(final InputStream is, final String fileName)", "class_method_signature": "KiePMMLUtil.load(final InputStream is, final String fileName)", "testcase": false, "constructor": false}, {"identifier": "populateMissingNames", "parameters": "(final PMML toPopulate, final String fileName)", "modifiers": "static", "return": "void", "signature": "void populateMissingNames(final PMML toPopulate, final String fileName)", "full_signature": "static void populateMissingNames(final PMML toPopulate, final String fileName)", "class_method_signature": "KiePMMLUtil.populateMissingNames(final PMML toPopulate, final String fileName)", "testcase": false, "constructor": false}, {"identifier": "populateCorrectMiningModel", "parameters": "(final MiningModel miningModel)", "modifiers": "static", "return": "void", "signature": "void populateCorrectMiningModel(final MiningModel miningModel)", "full_signature": "static void populateCorrectMiningModel(final MiningModel miningModel)", "class_method_signature": "KiePMMLUtil.populateCorrectMiningModel(final MiningModel miningModel)", "testcase": false, "constructor": false}, {"identifier": "getSanitizedId", "parameters": "(String id, String modelName)", "modifiers": "static", "return": "String", "signature": "String getSanitizedId(String id, String modelName)", "full_signature": "static String getSanitizedId(String id, String modelName)", "class_method_signature": "KiePMMLUtil.getSanitizedId(String id, String modelName)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtil.java"}, "focal_method": {"identifier": "getSanitizedId", "parameters": "(String id, String modelName)", "modifiers": "static", "return": "String", "body": "static String getSanitizedId(String id, String modelName) {\n        String toReturn = id.replace(\".\", \"\")\n                .replace(\",\", \"\");\n        try {\n            Integer.parseInt(toReturn);\n            toReturn = String.format(SEGMENTID_TEMPLATE, modelName, id);\n        } catch (NumberFormatException e) {\n            // ignore\n        }\n        return toReturn;\n    }", "signature": "String getSanitizedId(String id, String modelName)", "full_signature": "static String getSanitizedId(String id, String modelName)", "class_method_signature": "KiePMMLUtil.getSanitizedId(String id, String modelName)", "testcase": false, "constructor": false, "invocations": ["replace", "replace", "parseInt", "format"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}