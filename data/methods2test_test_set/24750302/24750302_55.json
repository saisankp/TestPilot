{"test_class": {"identifier": "PaaSUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String SELF = \"SELF_\";", "modifier": "private final", "type": "String", "declarator": "SELF = \"SELF_\"", "var_name": "SELF"}, {"original_string": "private final String interface1 = \"interface1\";", "modifier": "private final", "type": "String", "declarator": "interface1 = \"interface1\"", "var_name": "interface1"}, {"original_string": "private final String operation1 = \"operation1\";", "modifier": "private final", "type": "String", "declarator": "operation1 = \"operation1\"", "var_name": "operation1"}, {"original_string": "private final String fake1 = \"FAKE1\";", "modifier": "private final", "type": "String", "declarator": "fake1 = \"FAKE1\"", "var_name": "fake1"}, {"original_string": "private final String fake2 = \"FAKE2\";", "modifier": "private final", "type": "String", "declarator": "fake2 = \"FAKE2\"", "var_name": "fake2"}, {"original_string": "private final String fake3 = \"FAKE3\";", "modifier": "private final", "type": "String", "declarator": "fake3 = \"FAKE3\"", "var_name": "fake3"}, {"original_string": "private final String fake4 = \"FAKE4\";", "modifier": "private final", "type": "String", "declarator": "fake4 = \"FAKE4\"", "var_name": "fake4"}, {"original_string": "private final String fake5 = \"FAKE5\";", "modifier": "private final", "type": "String", "declarator": "fake5 = \"FAKE5\"", "var_name": "fake5"}, {"original_string": "private final String fakeCapa1 = \"fakecapa1\";", "modifier": "private final", "type": "String", "declarator": "fakeCapa1 = \"fakecapa1\"", "var_name": "fakeCapa1"}, {"original_string": "private final String node1 = \"node1\";", "modifier": "private final", "type": "String", "declarator": "node1 = \"node1\"", "var_name": "node1"}, {"original_string": "private final String node2 = \"node2\";", "modifier": "private final", "type": "String", "declarator": "node2 = \"node2\"", "var_name": "node2"}], "file": "alien4cloud-core/src/test/java/alien4cloud/tosca/PaaSUtilsTest.java"}, "test_case": {"identifier": "injectRelationshipTemplatePropertiesAsInputs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void injectRelationshipTemplatePropertiesAsInputs() throws Exception {\n\n        Map<String, PaaSNodeTemplate> nodes = Maps.newHashMap();\n        PaaSNodeTemplate source = buildPaaSNodeTemplate();\n        nodes.put(node1, source);\n        PaaSNodeTemplate target = buildPaaSNodeTemplate();\n        nodes.put(node2, target);\n\n        PaaSRelationshipTemplate paaSRelationshipTemplate = buildFakePaaSRelTemplate(node1, node2, fakeCapa1);\n        Mockito.when(source.getRelationshipTemplates()).thenReturn(Lists.newArrayList(paaSRelationshipTemplate));\n\n        PaaSUtils.processRelationshipTemplateProperties(paaSRelationshipTemplate, nodes);\n\n        Operation operation = paaSRelationshipTemplate.getInterfaces().get(interface1).getOperations().get(operation1);\n        Assert.assertNotNull(operation.getInputParameters());\n\n        // assert all relationship properties are inputs properties\n        Assert.assertTrue(operation.getInputParameters().containsKey(SELF + fake1));\n        Assert.assertTrue(operation.getInputParameters().containsKey(SELF + fake3));\n        Assert.assertTrue(operation.getInputParameters().containsKey(SELF + fake5));\n        Assert.assertTrue(operation.getInputParameters().containsKey(SELF + fake2));\n\n        // assert that the property from the operation has not been overrided\n        Assert.assertEquals(operation.getInputParameters().get(fake1), new ScalarPropertyValue(\"1_from_operation\"));\n\n        // check source node inputs\n        Assert.assertTrue(operation.getInputParameters().containsKey(generateSourceInputName(fake1)));\n        Assert.assertTrue(operation.getInputParameters().containsKey(generateSourceInputName(fake2)));\n        Assert.assertTrue(operation.getInputParameters().containsKey(generateSourceInputName(fake3)));\n        Assert.assertTrue(operation.getInputParameters().containsKey(generateSourceInputName(fake5)));\n\n        // check target node inputs\n        Assert.assertTrue(operation.getInputParameters().containsKey(generateTargetInputName(fake1)));\n        Assert.assertTrue(operation.getInputParameters().containsKey(generateTargetInputName(fake2)));\n        Assert.assertTrue(operation.getInputParameters().containsKey(generateTargetInputName(fake3)));\n        Assert.assertTrue(operation.getInputParameters().containsKey(generateTargetInputName(fake5)));\n\n        // check targeted capability inputs\n        Assert.assertTrue(operation.getInputParameters().containsKey(generateTargetedCapaInputName(fakeCapa1, fake1)));\n        Assert.assertTrue(operation.getInputParameters().containsKey(generateTargetedCapaInputName(fakeCapa1, fake2)));\n        Assert.assertTrue(operation.getInputParameters().containsKey(generateTargetedCapaInputName(fakeCapa1, fake5)));\n        Assert.assertTrue(operation.getInputParameters().containsKey(generateTargetedCapaInputName(fakeCapa1, fake3)));\n    }", "signature": "void injectRelationshipTemplatePropertiesAsInputs()", "full_signature": "@Test public void injectRelationshipTemplatePropertiesAsInputs()", "class_method_signature": "PaaSUtilsTest.injectRelationshipTemplatePropertiesAsInputs()", "testcase": true, "constructor": false, "invocations": ["newHashMap", "buildPaaSNodeTemplate", "put", "buildPaaSNodeTemplate", "put", "buildFakePaaSRelTemplate", "thenReturn", "when", "getRelationshipTemplates", "newArrayList", "processRelationshipTemplateProperties", "get", "getOperations", "get", "getInterfaces", "assertNotNull", "getInputParameters", "assertTrue", "containsKey", "getInputParameters", "assertTrue", "containsKey", "getInputParameters", "assertTrue", "containsKey", "getInputParameters", "assertTrue", "containsKey", "getInputParameters", "assertEquals", "get", "getInputParameters", "assertTrue", "containsKey", "getInputParameters", "generateSourceInputName", "assertTrue", "containsKey", "getInputParameters", "generateSourceInputName", "assertTrue", "containsKey", "getInputParameters", "generateSourceInputName", "assertTrue", "containsKey", "getInputParameters", "generateSourceInputName", "assertTrue", "containsKey", "getInputParameters", "generateTargetInputName", "assertTrue", "containsKey", "getInputParameters", "generateTargetInputName", "assertTrue", "containsKey", "getInputParameters", "generateTargetInputName", "assertTrue", "containsKey", "getInputParameters", "generateTargetInputName", "assertTrue", "containsKey", "getInputParameters", "generateTargetedCapaInputName", "assertTrue", "containsKey", "getInputParameters", "generateTargetedCapaInputName", "assertTrue", "containsKey", "getInputParameters", "generateTargetedCapaInputName", "assertTrue", "containsKey", "getInputParameters", "generateTargetedCapaInputName"]}, "focal_class": {"identifier": "PaaSUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static String CAPABILITIES = \"CAPABILITIES\";", "modifier": "public final static", "type": "String", "declarator": "CAPABILITIES = \"CAPABILITIES\"", "var_name": "CAPABILITIES"}], "methods": [{"identifier": "getMandatoryHostTemplate", "parameters": "(final PaaSNodeTemplate paaSNodeTemplate)", "modifiers": "public static", "return": "PaaSNodeTemplate", "signature": "PaaSNodeTemplate getMandatoryHostTemplate(final PaaSNodeTemplate paaSNodeTemplate)", "full_signature": "public static PaaSNodeTemplate getMandatoryHostTemplate(final PaaSNodeTemplate paaSNodeTemplate)", "class_method_signature": "PaaSUtils.getMandatoryHostTemplate(final PaaSNodeTemplate paaSNodeTemplate)", "testcase": false, "constructor": false}, {"identifier": "getHostTemplate", "parameters": "(PaaSNodeTemplate paaSNodeTemplate)", "modifiers": "public static", "return": "PaaSNodeTemplate", "signature": "PaaSNodeTemplate getHostTemplate(PaaSNodeTemplate paaSNodeTemplate)", "full_signature": "public static PaaSNodeTemplate getHostTemplate(PaaSNodeTemplate paaSNodeTemplate)", "class_method_signature": "PaaSUtils.getHostTemplate(PaaSNodeTemplate paaSNodeTemplate)", "testcase": false, "constructor": false}, {"identifier": "injectPropertiesAsOperationInputs", "parameters": "(Map<String, PaaSNodeTemplate> nodeTemplates)", "modifiers": "public static", "return": "void", "signature": "void injectPropertiesAsOperationInputs(Map<String, PaaSNodeTemplate> nodeTemplates)", "full_signature": "public static void injectPropertiesAsOperationInputs(Map<String, PaaSNodeTemplate> nodeTemplates)", "class_method_signature": "PaaSUtils.injectPropertiesAsOperationInputs(Map<String, PaaSNodeTemplate> nodeTemplates)", "testcase": false, "constructor": false}, {"identifier": "processNodeTemplateProperties", "parameters": "(PaaSNodeTemplate paaSTemplate)", "modifiers": "public static", "return": "void", "signature": "void processNodeTemplateProperties(PaaSNodeTemplate paaSTemplate)", "full_signature": "public static void processNodeTemplateProperties(PaaSNodeTemplate paaSTemplate)", "class_method_signature": "PaaSUtils.processNodeTemplateProperties(PaaSNodeTemplate paaSTemplate)", "testcase": false, "constructor": false}, {"identifier": "injectCapabilitiesProperties", "parameters": "(NodeTemplate template, Map<String, Interface> interfaces)", "modifiers": "private static", "return": "void", "signature": "void injectCapabilitiesProperties(NodeTemplate template, Map<String, Interface> interfaces)", "full_signature": "private static void injectCapabilitiesProperties(NodeTemplate template, Map<String, Interface> interfaces)", "class_method_signature": "PaaSUtils.injectCapabilitiesProperties(NodeTemplate template, Map<String, Interface> interfaces)", "testcase": false, "constructor": false}, {"identifier": "processRelationshipTemplateProperties", "parameters": "(PaaSRelationshipTemplate paaSRelationshipTemplate,\n            Map<String, PaaSNodeTemplate> paaSNodeTemplates)", "modifiers": "public static", "return": "void", "signature": "void processRelationshipTemplateProperties(PaaSRelationshipTemplate paaSRelationshipTemplate,\n            Map<String, PaaSNodeTemplate> paaSNodeTemplates)", "full_signature": "public static void processRelationshipTemplateProperties(PaaSRelationshipTemplate paaSRelationshipTemplate,\n            Map<String, PaaSNodeTemplate> paaSNodeTemplates)", "class_method_signature": "PaaSUtils.processRelationshipTemplateProperties(PaaSRelationshipTemplate paaSRelationshipTemplate,\n            Map<String, PaaSNodeTemplate> paaSNodeTemplates)", "testcase": false, "constructor": false}, {"identifier": "injectTargetedCapabilityProperties", "parameters": "(PaaSNodeTemplate target, String capabilityName, Map<String, Interface> interfaces)", "modifiers": "private static", "return": "void", "signature": "void injectTargetedCapabilityProperties(PaaSNodeTemplate target, String capabilityName, Map<String, Interface> interfaces)", "full_signature": "private static void injectTargetedCapabilityProperties(PaaSNodeTemplate target, String capabilityName, Map<String, Interface> interfaces)", "class_method_signature": "PaaSUtils.injectTargetedCapabilityProperties(PaaSNodeTemplate target, String capabilityName, Map<String, Interface> interfaces)", "testcase": false, "constructor": false}, {"identifier": "injectSourcePropertiesAsInputs", "parameters": "(PaaSNodeTemplate source, Map<String, Interface> interfaces)", "modifiers": "private static", "return": "void", "signature": "void injectSourcePropertiesAsInputs(PaaSNodeTemplate source, Map<String, Interface> interfaces)", "full_signature": "private static void injectSourcePropertiesAsInputs(PaaSNodeTemplate source, Map<String, Interface> interfaces)", "class_method_signature": "PaaSUtils.injectSourcePropertiesAsInputs(PaaSNodeTemplate source, Map<String, Interface> interfaces)", "testcase": false, "constructor": false}, {"identifier": "injectTargetPropertiesAsInputs", "parameters": "(PaaSNodeTemplate target, Map<String, Interface> interfaces)", "modifiers": "private static", "return": "void", "signature": "void injectTargetPropertiesAsInputs(PaaSNodeTemplate target, Map<String, Interface> interfaces)", "full_signature": "private static void injectTargetPropertiesAsInputs(PaaSNodeTemplate target, Map<String, Interface> interfaces)", "class_method_signature": "PaaSUtils.injectTargetPropertiesAsInputs(PaaSNodeTemplate target, Map<String, Interface> interfaces)", "testcase": false, "constructor": false}, {"identifier": "injectPropertiesAsInputs", "parameters": "(String entity, String capabilityName, Map<String, AbstractPropertyValue> properties,\n            Map<String, Interface> interfaces, Function<String, String> inputNameBuilder)", "modifiers": "private static", "return": "void", "signature": "void injectPropertiesAsInputs(String entity, String capabilityName, Map<String, AbstractPropertyValue> properties,\n            Map<String, Interface> interfaces, Function<String, String> inputNameBuilder)", "full_signature": "private static void injectPropertiesAsInputs(String entity, String capabilityName, Map<String, AbstractPropertyValue> properties,\n            Map<String, Interface> interfaces, Function<String, String> inputNameBuilder)", "class_method_signature": "PaaSUtils.injectPropertiesAsInputs(String entity, String capabilityName, Map<String, AbstractPropertyValue> properties,\n            Map<String, Interface> interfaces, Function<String, String> inputNameBuilder)", "testcase": false, "constructor": false}, {"identifier": "injectInputIntoOperations", "parameters": "(String inputName, List<String> path, AbstractPropertyValue value, Map<String, Operation> operations)", "modifiers": "private static", "return": "void", "signature": "void injectInputIntoOperations(String inputName, List<String> path, AbstractPropertyValue value, Map<String, Operation> operations)", "full_signature": "private static void injectInputIntoOperations(String inputName, List<String> path, AbstractPropertyValue value, Map<String, Operation> operations)", "class_method_signature": "PaaSUtils.injectInputIntoOperations(String inputName, List<String> path, AbstractPropertyValue value, Map<String, Operation> operations)", "testcase": false, "constructor": false}], "file": "alien4cloud-core/src/main/java/alien4cloud/tosca/PaaSUtils.java"}, "focal_method": {"identifier": "processRelationshipTemplateProperties", "parameters": "(PaaSRelationshipTemplate paaSRelationshipTemplate,\n            Map<String, PaaSNodeTemplate> paaSNodeTemplates)", "modifiers": "public static", "return": "void", "body": "public static void processRelationshipTemplateProperties(PaaSRelationshipTemplate paaSRelationshipTemplate,\n            Map<String, PaaSNodeTemplate> paaSNodeTemplates) {\n        RelationshipTemplate template = paaSRelationshipTemplate.getTemplate();\n        // inject relationship properties\n        injectPropertiesAsInputs(ToscaFunctionConstants.SELF, null, template.getProperties(), paaSRelationshipTemplate.getInterfaces(),\n                baseName -> StringUtils.joinWith(AlienUtils.DEFAULT_PREFIX_SEPARATOR, ToscaFunctionConstants.SELF, baseName));\n\n        // inject source properties\n        injectSourcePropertiesAsInputs(paaSNodeTemplates.get(paaSRelationshipTemplate.getSource()), paaSRelationshipTemplate.getInterfaces());\n\n        // inject target properties\n        injectTargetPropertiesAsInputs(paaSNodeTemplates.get(template.getTarget()), paaSRelationshipTemplate.getInterfaces());\n\n        // inject related target capability properties\n        injectTargetedCapabilityProperties(paaSNodeTemplates.get(template.getTarget()), template.getTargetedCapabilityName(),\n                paaSRelationshipTemplate.getInterfaces());\n\n    }", "signature": "void processRelationshipTemplateProperties(PaaSRelationshipTemplate paaSRelationshipTemplate,\n            Map<String, PaaSNodeTemplate> paaSNodeTemplates)", "full_signature": "public static void processRelationshipTemplateProperties(PaaSRelationshipTemplate paaSRelationshipTemplate,\n            Map<String, PaaSNodeTemplate> paaSNodeTemplates)", "class_method_signature": "PaaSUtils.processRelationshipTemplateProperties(PaaSRelationshipTemplate paaSRelationshipTemplate,\n            Map<String, PaaSNodeTemplate> paaSNodeTemplates)", "testcase": false, "constructor": false, "invocations": ["getTemplate", "injectPropertiesAsInputs", "getProperties", "getInterfaces", "joinWith", "injectSourcePropertiesAsInputs", "get", "getSource", "getInterfaces", "injectTargetPropertiesAsInputs", "get", "getTarget", "getInterfaces", "injectTargetedCapabilityProperties", "get", "getTarget", "getTargetedCapabilityName", "getInterfaces"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}