{"test_class": {"identifier": "PropertyProviderImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PROPERTY = \"property\";", "modifier": "private static final", "type": "String", "declarator": "PROPERTY = \"property\"", "var_name": "PROPERTY"}, {"original_string": "private static final String VALUE = \"value\";", "modifier": "private static final", "type": "String", "declarator": "VALUE = \"value\"", "var_name": "VALUE"}, {"original_string": "private PropertyProviderImpl provider;", "modifier": "private", "type": "PropertyProviderImpl", "declarator": "provider", "var_name": "provider"}], "file": "protostuff-generator/src/test/java/io/protostuff/generator/PropertyProviderImplTest.java"}, "test_case": {"identifier": "hasProperty", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void hasProperty() {\n        provider.register(PROPERTY, key -> VALUE);\n        assertTrue(provider.hasProperty(PROPERTY));\n        assertFalse(provider.hasProperty(\"does not exist\"));\n    }", "signature": "void hasProperty()", "full_signature": "@Test void hasProperty()", "class_method_signature": "PropertyProviderImplTest.hasProperty()", "testcase": true, "constructor": false, "invocations": ["register", "assertTrue", "hasProperty", "assertFalse", "hasProperty"]}, "focal_class": {"identifier": "PropertyProviderImpl", "superclass": "", "interfaces": "implements PropertyProvider", "fields": [{"original_string": "private final Map<String, Function<?, Object>> propertyProviders = new HashMap<>();", "modifier": "private final", "type": "Map<String, Function<?, Object>>", "declarator": "propertyProviders = new HashMap<>()", "var_name": "propertyProviders"}], "methods": [{"identifier": "hasProperty", "parameters": "(String propertyName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasProperty(String propertyName)", "full_signature": "@Override public boolean hasProperty(String propertyName)", "class_method_signature": "PropertyProviderImpl.hasProperty(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(Object object, String propertyName)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Object", "signature": "Object getProperty(Object object, String propertyName)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Object getProperty(Object object, String propertyName)", "class_method_signature": "PropertyProviderImpl.getProperty(Object object, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(String property, Function<?, Object> function)", "modifiers": "@Override public", "return": "void", "signature": "void register(String property, Function<?, Object> function)", "full_signature": "@Override public void register(String property, Function<?, Object> function)", "class_method_signature": "PropertyProviderImpl.register(String property, Function<?, Object> function)", "testcase": false, "constructor": false}], "file": "protostuff-generator/src/main/java/io/protostuff/generator/PropertyProviderImpl.java"}, "focal_method": {"identifier": "hasProperty", "parameters": "(String propertyName)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean hasProperty(String propertyName) {\n        return propertyProviders.containsKey(propertyName);\n    }", "signature": "boolean hasProperty(String propertyName)", "full_signature": "@Override public boolean hasProperty(String propertyName)", "class_method_signature": "PropertyProviderImpl.hasProperty(String propertyName)", "testcase": false, "constructor": false, "invocations": ["containsKey"]}, "repository": {"repo_id": 32651977, "url": "https://github.com/protostuff/protostuff-compiler", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 30, "size": 1539, "license": "licensed"}}