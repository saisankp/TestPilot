{"test_class": {"identifier": "DataRowTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DataRowBuilder rb = createDataRowBuilder();", "modifier": "private final", "type": "DataRowBuilder", "declarator": "rb = createDataRowBuilder()", "var_name": "rb"}, {"original_string": "private DataRow row = rb.createRow(2, 4);", "modifier": "private", "type": "DataRow", "declarator": "row = rb.createRow(2, 4)", "var_name": "row"}], "file": "dbfit-java/core/src/test/java/dbfit/util/DataRowTest.java"}, "test_case": {"identifier": "testDataRowStringValueOfExistingColumns", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDataRowStringValueOfExistingColumns() {\n        assertThat(row.getStringValue(\"c0\"), is(\"2\"));\n        assertThat(row.getStringValue(\"c1\"), is(\"4\"));\n    }", "signature": "void testDataRowStringValueOfExistingColumns()", "full_signature": "@Test public void testDataRowStringValueOfExistingColumns()", "class_method_signature": "DataRowTest.testDataRowStringValueOfExistingColumns()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getStringValue", "is", "assertThat", "getStringValue", "is"]}, "focal_class": {"identifier": "DataRow", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<String, Object> values = new HashMap<String, Object>();", "modifier": "private", "type": "Map<String, Object>", "declarator": "values = new HashMap<String, Object>()", "var_name": "values"}], "methods": [{"identifier": "getColumnNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getColumnNames()", "full_signature": "public Set<String> getColumnNames()", "class_method_signature": "DataRow.getColumnNames()", "testcase": false, "constructor": false}, {"identifier": "DataRow", "parameters": "(ResultSet rs, ResultSetMetaData rsmd)", "modifiers": "public", "return": "", "signature": " DataRow(ResultSet rs, ResultSetMetaData rsmd)", "full_signature": "public  DataRow(ResultSet rs, ResultSetMetaData rsmd)", "class_method_signature": "DataRow.DataRow(ResultSet rs, ResultSetMetaData rsmd)", "testcase": false, "constructor": true}, {"identifier": "DataRow", "parameters": "(Map<String, Object> rowValues)", "modifiers": "public", "return": "", "signature": " DataRow(Map<String, Object> rowValues)", "full_signature": "public  DataRow(Map<String, Object> rowValues)", "class_method_signature": "DataRow.DataRow(Map<String, Object> rowValues)", "testcase": false, "constructor": true}, {"identifier": "addValue", "parameters": "(final String name, final Object value)", "modifiers": "private", "return": "void", "signature": "void addValue(final String name, final Object value)", "full_signature": "private void addValue(final String name, final Object value)", "class_method_signature": "DataRow.addValue(final String name, final Object value)", "testcase": false, "constructor": false}, {"identifier": "getStringValue", "parameters": "(String columnName)", "modifiers": "public", "return": "String", "signature": "String getStringValue(String columnName)", "full_signature": "public String getStringValue(String columnName)", "class_method_signature": "DataRow.getStringValue(String columnName)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(final Map<String, Object> keyProperties)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(final Map<String, Object> keyProperties)", "full_signature": "public boolean matches(final Map<String, Object> keyProperties)", "class_method_signature": "DataRow.matches(final Map<String, Object> keyProperties)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(final String key, final Object value)", "modifiers": "private", "return": "boolean", "signature": "boolean matches(final String key, final Object value)", "full_signature": "private boolean matches(final String key, final Object value)", "class_method_signature": "DataRow.matches(final String key, final Object value)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object a, Object b)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(Object a, Object b)", "full_signature": "private boolean equals(Object a, Object b)", "class_method_signature": "DataRow.equals(Object a, Object b)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "public", "return": "Object", "signature": "Object get(String key)", "full_signature": "public Object get(String key)", "class_method_signature": "DataRow.get(String key)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DataRow.toString()", "testcase": false, "constructor": false}], "file": "dbfit-java/core/src/main/java/dbfit/util/DataRow.java"}, "focal_method": {"identifier": "getStringValue", "parameters": "(String columnName)", "modifiers": "public", "return": "String", "body": "public String getStringValue(String columnName) {\n        return String.valueOf(values.get(columnName));\n    }", "signature": "String getStringValue(String columnName)", "full_signature": "public String getStringValue(String columnName)", "class_method_signature": "DataRow.getStringValue(String columnName)", "testcase": false, "constructor": false, "invocations": ["valueOf", "get"]}, "repository": {"repo_id": 7283919, "url": "https://github.com/dbfit/dbfit", "language": "Java", "is_fork": false, "fork_count": 83, "stargazer_count": 181, "size": 6978, "license": "licensed"}}