{"test_class": {"identifier": "NetStorageSenderTest", "superclass": "extends HttpSenderTestBase<NetStorageSender>", "interfaces": "", "fields": [], "file": "akamai/src/test/java/nl/nn/adapterframework/extensions/akamai/NetStorageSenderTest.java"}, "test_case": {"identifier": "testContentType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testContentType() throws Throwable {\n\t\tNetStorageSender sender = getSender();\n\t\tsender.configure();\n\t\tassertNull(\"no content-type should be present\", sender.getFullContentType());\n\t}", "signature": "void testContentType()", "full_signature": "@Test public void testContentType()", "class_method_signature": "NetStorageSenderTest.testContentType()", "testcase": true, "constructor": false, "invocations": ["getSender", "configure", "assertNull", "getFullContentType"]}, "focal_class": {"identifier": "NetStorageSender", "superclass": "extends HttpSenderBase", "interfaces": "", "fields": [{"original_string": "private Logger log = LogUtil.getLogger(NetStorageSender.class);", "modifier": "private", "type": "Logger", "declarator": "log = LogUtil.getLogger(NetStorageSender.class)", "var_name": "log"}, {"original_string": "private String URL_PARAM_KEY = \"urlParameter\";", "modifier": "private", "type": "String", "declarator": "URL_PARAM_KEY = \"urlParameter\"", "var_name": "URL_PARAM_KEY"}, {"original_string": "private String action = null;", "modifier": "private", "type": "String", "declarator": "action = null", "var_name": "action"}, {"original_string": "private List<String> actions = Arrays.asList(\"du\", \"dir\", \"delete\", \"upload\", \"mkdir\", \"rmdir\", \"rename\", \"mtime\", \"download\");", "modifier": "private", "type": "List<String>", "declarator": "actions = Arrays.asList(\"du\", \"dir\", \"delete\", \"upload\", \"mkdir\", \"rmdir\", \"rename\", \"mtime\", \"download\")", "var_name": "actions"}, {"original_string": "private String url = null;", "modifier": "private", "type": "String", "declarator": "url = null", "var_name": "url"}, {"original_string": "private String nonce = null;", "modifier": "private", "type": "String", "declarator": "nonce = null", "var_name": "nonce"}, {"original_string": "private int signVersion = 5;", "modifier": "private", "type": "int", "declarator": "signVersion = 5", "var_name": "signVersion"}, {"original_string": "private int actionVersion = 1;", "modifier": "private", "type": "int", "declarator": "actionVersion = 1", "var_name": "actionVersion"}, {"original_string": "private String hashAlgorithm = null;", "modifier": "private", "type": "String", "declarator": "hashAlgorithm = null", "var_name": "hashAlgorithm"}, {"original_string": "private List<String> hashAlgorithms = Arrays.asList(\"MD5\", \"SHA1\", \"SHA256\");", "modifier": "private", "type": "List<String>", "declarator": "hashAlgorithms = Arrays.asList(\"MD5\", \"SHA1\", \"SHA256\")", "var_name": "hashAlgorithms"}, {"original_string": "private String rootDir = null;", "modifier": "private", "type": "String", "declarator": "rootDir = null", "var_name": "rootDir"}, {"original_string": "private String authAlias;", "modifier": "private", "type": "String", "declarator": "authAlias", "var_name": "authAlias"}, {"original_string": "private String cpCode = null;", "modifier": "private", "type": "String", "declarator": "cpCode = null", "var_name": "cpCode"}, {"original_string": "private String accessToken = null;", "modifier": "private", "type": "String", "declarator": "accessToken = null", "var_name": "accessToken"}, {"original_string": "private CredentialFactory accessTokenCf = null;", "modifier": "private", "type": "CredentialFactory", "declarator": "accessTokenCf = null", "var_name": "accessTokenCf"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "NetStorageSender.configure()", "testcase": false, "constructor": false}, {"identifier": "getURI", "parameters": "(String path)", "modifiers": "@Override protected", "return": "URI", "signature": "URI getURI(String path)", "full_signature": "@Override protected URI getURI(String path)", "class_method_signature": "NetStorageSender.getURI(String path)", "testcase": false, "constructor": false}, {"identifier": "sendMessage", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "Message", "signature": "Message sendMessage(Message message, IPipeLineSession session)", "full_signature": "@Override public Message sendMessage(Message message, IPipeLineSession session)", "class_method_signature": "NetStorageSender.sendMessage(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(URI uri, Message message, ParameterValueList parameters, IPipeLineSession session)", "modifiers": "@Override public", "return": "HttpRequestBase", "signature": "HttpRequestBase getMethod(URI uri, Message message, ParameterValueList parameters, IPipeLineSession session)", "full_signature": "@Override public HttpRequestBase getMethod(URI uri, Message message, ParameterValueList parameters, IPipeLineSession session)", "class_method_signature": "NetStorageSender.getMethod(URI uri, Message message, ParameterValueList parameters, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "extractResult", "parameters": "(HttpResponseHandler responseHandler, IPipeLineSession session)", "modifiers": "@Override public", "return": "Message", "signature": "Message extractResult(HttpResponseHandler responseHandler, IPipeLineSession session)", "full_signature": "@Override public Message extractResult(HttpResponseHandler responseHandler, IPipeLineSession session)", "class_method_signature": "NetStorageSender.extractResult(HttpResponseHandler responseHandler, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "getResponseBodyAsString", "parameters": "(HttpResponseHandler responseHandler)", "modifiers": "public", "return": "String", "signature": "String getResponseBodyAsString(HttpResponseHandler responseHandler)", "full_signature": "public String getResponseBodyAsString(HttpResponseHandler responseHandler)", "class_method_signature": "NetStorageSender.getResponseBodyAsString(HttpResponseHandler responseHandler)", "testcase": false, "constructor": false}, {"identifier": "setHashAlgorithm", "parameters": "(String hashAlgorithm)", "modifiers": "@IbisDoc({\"only works in combination with the <code>upload</code> action. if set, and not specified as parameter, the sender will sign the file to be uploaded. possible values: md5, sha1, sha256. <br/>note: if the file input is a stream this will put the file in memory!\", \"\"}) public", "return": "void", "signature": "void setHashAlgorithm(String hashAlgorithm)", "full_signature": "@IbisDoc({\"only works in combination with the <code>upload</code> action. if set, and not specified as parameter, the sender will sign the file to be uploaded. possible values: md5, sha1, sha256. <br/>note: if the file input is a stream this will put the file in memory!\", \"\"}) public void setHashAlgorithm(String hashAlgorithm)", "class_method_signature": "NetStorageSender.setHashAlgorithm(String hashAlgorithm)", "testcase": false, "constructor": false}, {"identifier": "setAction", "parameters": "(String action)", "modifiers": "@IbisDoc({\"possible values: delete, dir, download, du, mkdir, mtime, rename, rmdir, upload\", \"\"}) public", "return": "void", "signature": "void setAction(String action)", "full_signature": "@IbisDoc({\"possible values: delete, dir, download, du, mkdir, mtime, rename, rmdir, upload\", \"\"}) public void setAction(String action)", "class_method_signature": "NetStorageSender.setAction(String action)", "testcase": false, "constructor": false}, {"identifier": "getAction", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAction()", "full_signature": "public String getAction()", "class_method_signature": "NetStorageSender.getAction()", "testcase": false, "constructor": false}, {"identifier": "setActionVersion", "parameters": "(int actionVersion)", "modifiers": "@IbisDoc({\"akamai currently only supports action version 1!\", \"1\"}) public", "return": "void", "signature": "void setActionVersion(int actionVersion)", "full_signature": "@IbisDoc({\"akamai currently only supports action version 1!\", \"1\"}) public void setActionVersion(int actionVersion)", "class_method_signature": "NetStorageSender.setActionVersion(int actionVersion)", "testcase": false, "constructor": false}, {"identifier": "setCpCode", "parameters": "(String cpCode)", "modifiers": "@IbisDoc({\"the cp code to be used\", \"\"}) public", "return": "void", "signature": "void setCpCode(String cpCode)", "full_signature": "@IbisDoc({\"the cp code to be used\", \"\"}) public void setCpCode(String cpCode)", "class_method_signature": "NetStorageSender.setCpCode(String cpCode)", "testcase": false, "constructor": false}, {"identifier": "getCpCode", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCpCode()", "full_signature": "public String getCpCode()", "class_method_signature": "NetStorageSender.getCpCode()", "testcase": false, "constructor": false}, {"identifier": "setUrl", "parameters": "(String url)", "modifiers": "@IbisDoc({\"the destination, aka akamai host. only the hostname is allowed; eq. xyz-nsu.akamaihd.net\", \"\"}) @Override public", "return": "void", "signature": "void setUrl(String url)", "full_signature": "@IbisDoc({\"the destination, aka akamai host. only the hostname is allowed; eq. xyz-nsu.akamaihd.net\", \"\"}) @Override public void setUrl(String url)", "class_method_signature": "NetStorageSender.setUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "getUrl", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getUrl()", "full_signature": "@Override public String getUrl()", "class_method_signature": "NetStorageSender.getUrl()", "testcase": false, "constructor": false}, {"identifier": "setNonce", "parameters": "(String nonce)", "modifiers": "@IbisDoc({\"the nonce or api username\", \"\"}) public", "return": "void", "signature": "void setNonce(String nonce)", "full_signature": "@IbisDoc({\"the nonce or api username\", \"\"}) public void setNonce(String nonce)", "class_method_signature": "NetStorageSender.setNonce(String nonce)", "testcase": false, "constructor": false}, {"identifier": "getNonce", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNonce()", "full_signature": "public String getNonce()", "class_method_signature": "NetStorageSender.getNonce()", "testcase": false, "constructor": false}, {"identifier": "setSignVersion", "parameters": "(int signVersion)", "modifiers": "@IbisDoc({\"the version used to sign the authentication headers. possible values: 3 (md5), 4 (sha1), 5 (sha256)\", \"5\"}) public", "return": "void", "signature": "void setSignVersion(int signVersion)", "full_signature": "@IbisDoc({\"the version used to sign the authentication headers. possible values: 3 (md5), 4 (sha1), 5 (sha256)\", \"5\"}) public void setSignVersion(int signVersion)", "class_method_signature": "NetStorageSender.setSignVersion(int signVersion)", "testcase": false, "constructor": false}, {"identifier": "getSignVersion", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSignVersion()", "full_signature": "public int getSignVersion()", "class_method_signature": "NetStorageSender.getSignVersion()", "testcase": false, "constructor": false}, {"identifier": "getSignType", "parameters": "()", "modifiers": "public", "return": "SignType", "signature": "SignType getSignType()", "full_signature": "public SignType getSignType()", "class_method_signature": "NetStorageSender.getSignType()", "testcase": false, "constructor": false}, {"identifier": "setAccessToken", "parameters": "(String accessToken)", "modifiers": "@IbisDoc({\"the api accesstoken\", \"\"}) public", "return": "void", "signature": "void setAccessToken(String accessToken)", "full_signature": "@IbisDoc({\"the api accesstoken\", \"\"}) public void setAccessToken(String accessToken)", "class_method_signature": "NetStorageSender.setAccessToken(String accessToken)", "testcase": false, "constructor": false}, {"identifier": "getAccessToken", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAccessToken()", "full_signature": "public String getAccessToken()", "class_method_signature": "NetStorageSender.getAccessToken()", "testcase": false, "constructor": false}, {"identifier": "getPhysicalDestinationName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPhysicalDestinationName()", "full_signature": "@Override public String getPhysicalDestinationName()", "class_method_signature": "NetStorageSender.getPhysicalDestinationName()", "testcase": false, "constructor": false}, {"identifier": "getRootDir", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRootDir()", "full_signature": "public String getRootDir()", "class_method_signature": "NetStorageSender.getRootDir()", "testcase": false, "constructor": false}, {"identifier": "setRootDir", "parameters": "(String rootDir)", "modifiers": "@IbisDoc({\"<i>optional</i> root directory\", \"\"}) public", "return": "void", "signature": "void setRootDir(String rootDir)", "full_signature": "@IbisDoc({\"<i>optional</i> root directory\", \"\"}) public void setRootDir(String rootDir)", "class_method_signature": "NetStorageSender.setRootDir(String rootDir)", "testcase": false, "constructor": false}, {"identifier": "getAuthAlias", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getAuthAlias()", "full_signature": "@Override public String getAuthAlias()", "class_method_signature": "NetStorageSender.getAuthAlias()", "testcase": false, "constructor": false}, {"identifier": "setAuthAlias", "parameters": "(String authAlias)", "modifiers": "@IbisDoc({\"alias used to obtain credentials for nonce (username) and accesstoken (password)\", \"\"}) @Override public", "return": "void", "signature": "void setAuthAlias(String authAlias)", "full_signature": "@IbisDoc({\"alias used to obtain credentials for nonce (username) and accesstoken (password)\", \"\"}) @Override public void setAuthAlias(String authAlias)", "class_method_signature": "NetStorageSender.setAuthAlias(String authAlias)", "testcase": false, "constructor": false}], "file": "akamai/src/main/java/nl/nn/adapterframework/extensions/akamai/NetStorageSender.java"}, "focal_method": {"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void configure() throws ConfigurationException {\n\t\t//The HttpSenderBase dictates that you must use a Parameter with 'getUrlParam()' as name to use a dynamic endpoint.\n\t\t//In order to not force everyone to use the URL parameter but instead the input of the sender as 'dynamic' path, this exists.\n\t\tParameter urlParameter = new Parameter();\n\t\turlParameter.setName(getUrlParam());\n\t\turlParameter.setSessionKey(URL_PARAM_KEY);\n\t\taddParameter(urlParameter);\n\n\t\tsuper.configure();\n\n\t\t//Safety checks\n\t\tif(getAction() == null)\n\t\t\tthrow new ConfigurationException(getLogPrefix()+\"action must be specified\");\n\t\tif(!actions.contains(getAction()))\n\t\t\tthrow new ConfigurationException(getLogPrefix()+\"unknown or invalid action [\"+getAction()+\"] supported actions are \"+actions.toString()+\"\");\n\n\t\tif(getCpCode() == null)\n\t\t\tthrow new ConfigurationException(getLogPrefix()+\"cpCode must be specified\");\n\t\tif(!getUrl().startsWith(\"http\"))\n\t\t\tthrow new ConfigurationException(getLogPrefix()+\"url must be start with http(s)\");\n\n\t\tif(hashAlgorithm != null && !hashAlgorithms.contains(hashAlgorithm))\n\t\t\tthrow new ConfigurationException(getLogPrefix()+\"unknown authenticationMethod [\"+hashAlgorithm+\"] supported methods are \"+hashAlgorithms.toString()+\"\");\n\n\t\tif(getSignVersion() < 3 || getSignVersion() > 5)\n\t\t\tthrow new ConfigurationException(getLogPrefix()+\"signVersion must be either 3, 4 or 5\");\n\n\n\t\tParameterList parameterList = getParameterList();\n\t\tif(getAction().equals(\"upload\") && parameterList.findParameter(\"file\") == null)\n\t\t\tthrow new ConfigurationException(getLogPrefix()+\"the upload action requires a file parameter to be present\");\n\t\tif(getAction().equals(\"rename\") && parameterList.findParameter(\"destination\") == null)\n\t\t\tthrow new ConfigurationException(getLogPrefix()+\"the rename action requires a destination parameter to be present\");\n\t\tif(getAction().equals(\"mtime\") && parameterList.findParameter(\"mtime\") == null)\n\t\t\tthrow new ConfigurationException(getLogPrefix()+\"the mtime action requires a mtime parameter to be present\");\n\n\t\taccessTokenCf = new CredentialFactory(getAuthAlias(), getNonce(), getAccessToken());\n\t}", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "NetStorageSender.configure()", "testcase": false, "constructor": false, "invocations": ["setName", "getUrlParam", "setSessionKey", "addParameter", "configure", "getAction", "getLogPrefix", "contains", "getAction", "getLogPrefix", "getAction", "toString", "getCpCode", "getLogPrefix", "startsWith", "getUrl", "getLogPrefix", "contains", "getLogPrefix", "toString", "getSignVersion", "getSignVersion", "getLogPrefix", "getParameterList", "equals", "getAction", "findParameter", "getLogPrefix", "equals", "getAction", "findParameter", "getLogPrefix", "equals", "getAction", "findParameter", "getLogPrefix", "getAuthAlias", "getNonce", "getAccessToken"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}