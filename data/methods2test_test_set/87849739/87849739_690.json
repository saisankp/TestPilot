{"test_class": {"identifier": "SubscriptionManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ActorSystem actorSystem;", "modifier": "private", "type": "ActorSystem", "declarator": "actorSystem", "var_name": "actorSystem"}, {"original_string": "private Materializer materializer;", "modifier": "private", "type": "Materializer", "declarator": "materializer", "var_name": "materializer"}, {"original_string": "private TestProbe pubSubMediatorProbe;", "modifier": "private", "type": "TestProbe", "declarator": "pubSubMediatorProbe", "var_name": "pubSubMediatorProbe"}, {"original_string": "private TestProbe conciergeForwarderProbe;", "modifier": "private", "type": "TestProbe", "declarator": "conciergeForwarderProbe", "var_name": "conciergeForwarderProbe"}], "file": "services/utils/search/src/test/java/org/eclipse/ditto/services/utils/search/SubscriptionManagerTest.java"}, "test_case": {"identifier": "parallelSessions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parallelSessions() {\n        // Suppressing logs due to stacktrace for test4. Comment out to see logs.\n        actorSystem.eventStream().setLogLevel(Attributes.logLevelOff());\n\n        final ActorRef underTest = createSubscriptionManager();\n\n        final TestProbe probe1 = TestProbe.apply(\"test1\", actorSystem);\n        final TestProbe probe2 = TestProbe.apply(\"test2\", actorSystem);\n        final TestProbe probe3 = TestProbe.apply(\"test3\", actorSystem);\n        final TestProbe probe4 = TestProbe.apply(\"test4\", actorSystem);\n\n        // expect success with results\n        underTest.tell(createSubscription(1), probe1.ref());\n        // expect success with prefix\n        final String prefix = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        underTest.tell(createSubscription(2).setPrefix(prefix), probe2.ref());\n        // expect cancellation\n        underTest.tell(createSubscription(3), probe3.ref());\n        // expect upstream failure\n        underTest.tell(createSubscription(4), probe4.ref());\n\n        final String sid1 = probe1.expectMsgClass(SubscriptionCreated.class).getSubscriptionId();\n        final String sid2 = probe2.expectMsgClass(SubscriptionCreated.class).getSubscriptionId();\n        final String sid3 = probe3.expectMsgClass(SubscriptionCreated.class).getSubscriptionId();\n        final String sid4 = probe4.expectMsgClass(SubscriptionCreated.class).getSubscriptionId();\n\n        final List<?> sources = List.of(\n                Source.single(\"t:1\"),\n                Source.single(\"t:2\"),\n                Source.from(List.of(\"t:3\", \"t:4\")),\n                new AskTimeoutException(\"mock error\")\n        );\n\n        underTest.tell(request(sid1), probe1.ref());\n        underTest.tell(request(sid2), probe2.ref());\n        underTest.tell(request(sid3), probe3.ref());\n        underTest.tell(request(sid4), probe4.ref());\n\n        // there should be no upstream request until downstream requests.\n        for (int i = 0; i < 4; ++i) {\n            final StreamThings streamThings = conciergeForwarderProbe.expectMsgClass(StreamThings.class);\n            final ActorRef sender = conciergeForwarderProbe.sender();\n            final Object source = sources.get(getTag(streamThings) - 1);\n            if (source instanceof Source) {\n                final SourceRef<?> sourceRef = ((Source<?, ?>) source).runWith(StreamRefs.sourceRef(), materializer);\n                sender.tell(sourceRef, ActorRef.noSender());\n            } else {\n                sender.tell(source, ActorRef.noSender());\n            }\n        }\n\n        probe1.expectMsg(hasNext(sid1, \"t:1\"));\n        probe1.expectMsg(subscriptionComplete(sid1));\n\n        probe2.expectMsg(hasNext(sid2, \"t:2\"));\n        probe2.expectMsg(subscriptionComplete(sid2));\n\n        probe3.expectMsg(hasNext(sid3, \"t:3\"));\n        underTest.tell(CancelSubscription.of(sid3, DittoHeaders.empty()), probe3.ref());\n\n        assertThat(probe4.expectMsgClass(SubscriptionFailed.class).getError())\n                .isInstanceOf(GatewayInternalErrorException.class);\n\n        CompletableFuture.allOf(\n                CompletableFuture.runAsync(\n                        () -> probe3.expectNoMessage(FiniteDuration.apply(250L, TimeUnit.MILLISECONDS))),\n                CompletableFuture.runAsync(\n                        () -> probe4.expectNoMessage(FiniteDuration.apply(250L, TimeUnit.MILLISECONDS)))\n        ).join();\n    }", "signature": "void parallelSessions()", "full_signature": "@Test public void parallelSessions()", "class_method_signature": "SubscriptionManagerTest.parallelSessions()", "testcase": true, "constructor": false, "invocations": ["setLogLevel", "eventStream", "logLevelOff", "createSubscriptionManager", "apply", "apply", "apply", "apply", "tell", "createSubscription", "ref", "tell", "setPrefix", "createSubscription", "ref", "tell", "createSubscription", "ref", "tell", "createSubscription", "ref", "getSubscriptionId", "expectMsgClass", "getSubscriptionId", "expectMsgClass", "getSubscriptionId", "expectMsgClass", "getSubscriptionId", "expectMsgClass", "of", "single", "single", "from", "of", "tell", "request", "ref", "tell", "request", "ref", "tell", "request", "ref", "tell", "request", "ref", "expectMsgClass", "sender", "get", "getTag", "runWith", "sourceRef", "tell", "noSender", "tell", "noSender", "expectMsg", "hasNext", "expectMsg", "subscriptionComplete", "expectMsg", "hasNext", "expectMsg", "subscriptionComplete", "expectMsg", "hasNext", "tell", "of", "empty", "ref", "isInstanceOf", "assertThat", "getError", "expectMsgClass", "join", "allOf", "runAsync", "expectNoMessage", "apply", "runAsync", "expectNoMessage", "apply"]}, "focal_class": {"identifier": "SubscriptionManager", "superclass": "extends AbstractActor", "interfaces": "", "fields": [{"original_string": "public static final String ACTOR_NAME = \"subscriptionManager\";", "modifier": "public static final", "type": "String", "declarator": "ACTOR_NAME = \"subscriptionManager\"", "var_name": "ACTOR_NAME"}, {"original_string": "private final Duration idleTimeout;", "modifier": "private final", "type": "Duration", "declarator": "idleTimeout", "var_name": "idleTimeout"}, {"original_string": "private final ActorRef pubSubMediator;", "modifier": "private final", "type": "ActorRef", "declarator": "pubSubMediator", "var_name": "pubSubMediator"}, {"original_string": "private final ActorRef proxyActor;", "modifier": "private final", "type": "ActorRef", "declarator": "proxyActor", "var_name": "proxyActor"}, {"original_string": "private final Materializer materializer;", "modifier": "private final", "type": "Materializer", "declarator": "materializer", "var_name": "materializer"}, {"original_string": "private final DittoDiagnosticLoggingAdapter log;", "modifier": "private final", "type": "DittoDiagnosticLoggingAdapter", "declarator": "log", "var_name": "log"}, {"original_string": "private final int defaultPageSize;", "modifier": "private final", "type": "int", "declarator": "defaultPageSize", "var_name": "defaultPageSize"}, {"original_string": "private final int maxPageSize;", "modifier": "private final", "type": "int", "declarator": "maxPageSize", "var_name": "maxPageSize"}, {"original_string": "private int subscriptionIdCounter = 0;", "modifier": "private", "type": "int", "declarator": "subscriptionIdCounter = 0", "var_name": "subscriptionIdCounter"}], "methods": [{"identifier": "SubscriptionManager", "parameters": "(final Duration idleTimeout,\n            final ActorRef pubSubMediator,\n            final ActorRef proxyActor,\n            final Materializer materializer)", "modifiers": "", "return": "", "signature": " SubscriptionManager(final Duration idleTimeout,\n            final ActorRef pubSubMediator,\n            final ActorRef proxyActor,\n            final Materializer materializer)", "full_signature": "  SubscriptionManager(final Duration idleTimeout,\n            final ActorRef pubSubMediator,\n            final ActorRef proxyActor,\n            final Materializer materializer)", "class_method_signature": "SubscriptionManager.SubscriptionManager(final Duration idleTimeout,\n            final ActorRef pubSubMediator,\n            final ActorRef proxyActor,\n            final Materializer materializer)", "testcase": false, "constructor": true}, {"identifier": "props", "parameters": "(final Duration idleTimeout,\n            final ActorRef pubSubMediator,\n            final ActorRef proxyActor,\n            final Materializer materializer)", "modifiers": "public static", "return": "Props", "signature": "Props props(final Duration idleTimeout,\n            final ActorRef pubSubMediator,\n            final ActorRef proxyActor,\n            final Materializer materializer)", "full_signature": "public static Props props(final Duration idleTimeout,\n            final ActorRef pubSubMediator,\n            final ActorRef proxyActor,\n            final Materializer materializer)", "class_method_signature": "SubscriptionManager.props(final Duration idleTimeout,\n            final ActorRef pubSubMediator,\n            final ActorRef proxyActor,\n            final Materializer materializer)", "testcase": false, "constructor": false}, {"identifier": "asJsonArray", "parameters": "(final Collection<String> strings)", "modifiers": "private static", "return": "JsonArray", "signature": "JsonArray asJsonArray(final Collection<String> strings)", "full_signature": "private static JsonArray asJsonArray(final Collection<String> strings)", "class_method_signature": "SubscriptionManager.asJsonArray(final Collection<String> strings)", "testcase": false, "constructor": false}, {"identifier": "getPageSize", "parameters": "(@Nullable final String optionString)", "modifiers": "private", "return": "int", "signature": "int getPageSize(@Nullable final String optionString)", "full_signature": "private int getPageSize(@Nullable final String optionString)", "class_method_signature": "SubscriptionManager.getPageSize(@Nullable final String optionString)", "testcase": false, "constructor": false}, {"identifier": "createReceive", "parameters": "()", "modifiers": "@Override public", "return": "Receive", "signature": "Receive createReceive()", "full_signature": "@Override public Receive createReceive()", "class_method_signature": "SubscriptionManager.createReceive()", "testcase": false, "constructor": false}, {"identifier": "requestSubscription", "parameters": "(final RequestFromSubscription requestFromSubscription)", "modifiers": "private", "return": "void", "signature": "void requestSubscription(final RequestFromSubscription requestFromSubscription)", "full_signature": "private void requestSubscription(final RequestFromSubscription requestFromSubscription)", "class_method_signature": "SubscriptionManager.requestSubscription(final RequestFromSubscription requestFromSubscription)", "testcase": false, "constructor": false}, {"identifier": "cancelSubscription", "parameters": "(final CancelSubscription cancelSubscription)", "modifiers": "private", "return": "void", "signature": "void cancelSubscription(final CancelSubscription cancelSubscription)", "full_signature": "private void cancelSubscription(final CancelSubscription cancelSubscription)", "class_method_signature": "SubscriptionManager.cancelSubscription(final CancelSubscription cancelSubscription)", "testcase": false, "constructor": false}, {"identifier": "forwardToChild", "parameters": "(final String subscriptionId, final ThingSearchCommand<?> command)", "modifiers": "private", "return": "void", "signature": "void forwardToChild(final String subscriptionId, final ThingSearchCommand<?> command)", "full_signature": "private void forwardToChild(final String subscriptionId, final ThingSearchCommand<?> command)", "class_method_signature": "SubscriptionManager.forwardToChild(final String subscriptionId, final ThingSearchCommand<?> command)", "testcase": false, "constructor": false}, {"identifier": "createSubscription", "parameters": "(final CreateSubscription createSubscription)", "modifiers": "private", "return": "void", "signature": "void createSubscription(final CreateSubscription createSubscription)", "full_signature": "private void createSubscription(final CreateSubscription createSubscription)", "class_method_signature": "SubscriptionManager.createSubscription(final CreateSubscription createSubscription)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(final ActorRef subscriptionActor, final Source<JsonArray, NotUsed> pageSource)", "modifiers": "private", "return": "void", "signature": "void connect(final ActorRef subscriptionActor, final Source<JsonArray, NotUsed> pageSource)", "full_signature": "private void connect(final ActorRef subscriptionActor, final Source<JsonArray, NotUsed> pageSource)", "class_method_signature": "SubscriptionManager.connect(final ActorRef subscriptionActor, final Source<JsonArray, NotUsed> pageSource)", "testcase": false, "constructor": false}, {"identifier": "getPageSource", "parameters": "(final CreateSubscription createSubscription)", "modifiers": "private", "return": "Source<JsonArray, NotUsed>", "signature": "Source<JsonArray, NotUsed> getPageSource(final CreateSubscription createSubscription)", "full_signature": "private Source<JsonArray, NotUsed> getPageSource(final CreateSubscription createSubscription)", "class_method_signature": "SubscriptionManager.getPageSource(final CreateSubscription createSubscription)", "testcase": false, "constructor": false}, {"identifier": "nextSubscriptionId", "parameters": "(final CreateSubscription createSubscription)", "modifiers": "private", "return": "String", "signature": "String nextSubscriptionId(final CreateSubscription createSubscription)", "full_signature": "private String nextSubscriptionId(final CreateSubscription createSubscription)", "class_method_signature": "SubscriptionManager.nextSubscriptionId(final CreateSubscription createSubscription)", "testcase": false, "constructor": false}, {"identifier": "lazify", "parameters": "(final Source<T, ?> upstream)", "modifiers": "private static", "return": "Source<T, ?>", "signature": "Source<T, ?> lazify(final Source<T, ?> upstream)", "full_signature": "private static Source<T, ?> lazify(final Source<T, ?> upstream)", "class_method_signature": "SubscriptionManager.lazify(final Source<T, ?> upstream)", "testcase": false, "constructor": false}], "file": "services/utils/search/src/main/java/org/eclipse/ditto/services/utils/search/SubscriptionManager.java"}, "focal_method": {"identifier": "createSubscription", "parameters": "(final CreateSubscription createSubscription)", "modifiers": "private", "return": "void", "body": "private void createSubscription(final CreateSubscription createSubscription) {\n        log.withCorrelationId(createSubscription).info(\"Processing <{}>\", createSubscription);\n        final String subscriptionId = nextSubscriptionId(createSubscription);\n        final Props props = SubscriptionActor.props(idleTimeout, getSender(), createSubscription.getDittoHeaders());\n        final ActorRef subscriptionActor = getContext().actorOf(props, subscriptionId);\n        final Source<JsonArray, NotUsed> pageSource = getPageSource(createSubscription);\n        connect(subscriptionActor, pageSource);\n    }", "signature": "void createSubscription(final CreateSubscription createSubscription)", "full_signature": "private void createSubscription(final CreateSubscription createSubscription)", "class_method_signature": "SubscriptionManager.createSubscription(final CreateSubscription createSubscription)", "testcase": false, "constructor": false, "invocations": ["info", "withCorrelationId", "nextSubscriptionId", "props", "getSender", "getDittoHeaders", "actorOf", "getContext", "getPageSource", "connect"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}