{"test_class": {"identifier": "TestURLEncodedUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int SWISS_GERMAN_HELLO [] = {\n        0x47, 0x72, 0xFC, 0x65, 0x7A, 0x69, 0x5F, 0x7A, 0xE4, 0x6D, 0xE4\n    };", "modifier": "private static final", "type": "int", "declarator": "SWISS_GERMAN_HELLO [] = {\n        0x47, 0x72, 0xFC, 0x65, 0x7A, 0x69, 0x5F, 0x7A, 0xE4, 0x6D, 0xE4\n    }", "var_name": "SWISS_GERMAN_HELLO"}, {"original_string": "private static final int RUSSIAN_HELLO [] = {\n        0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438,\n        0x432, 0x435, 0x442\n    };", "modifier": "private static final", "type": "int", "declarator": "RUSSIAN_HELLO [] = {\n        0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438,\n        0x432, 0x435, 0x442\n    }", "var_name": "RUSSIAN_HELLO"}], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/client/utils/TestURLEncodedUtils.java"}, "test_case": {"identifier": "testFormat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFormat () throws Exception {\n        final List <NameValuePair> params = new ArrayList <NameValuePair>();\n        Assert.assertEquals(0, URLEncodedUtils.format(params, null).length());\n\n        params.clear();\n        params.add(new BasicNameValuePair(\"Name1\", \"Value1\"));\n        Assert.assertEquals(\"Name1=Value1\", URLEncodedUtils.format(params, null));\n\n        params.clear();\n        params.add(new BasicNameValuePair(\"Name2\", null));\n        Assert.assertEquals(\"Name2=\", URLEncodedUtils.format(params, null));\n\n        params.clear();\n        params.add(new BasicNameValuePair(\"Name4\", \"Value 4!\"));\n        Assert.assertEquals(\"Name4=Value+4%21\", URLEncodedUtils.format(params, null));\n\n        params.clear();\n        params.add(new BasicNameValuePair(\"Name4\", \"Value+4!\"));\n        Assert.assertEquals(\"Name4=Value%2B4%21\", URLEncodedUtils.format(params, null));\n\n        params.clear();\n        params.add(new BasicNameValuePair(\"Name4\", \"Value 4! !4\"));\n        Assert.assertEquals(\"Name4=Value+4%21+%214\", URLEncodedUtils.format(params, null));\n\n        params.clear();\n        params.add(new BasicNameValuePair(\"Name5\", \"aaa\"));\n        params.add(new BasicNameValuePair(\"Name6\", \"bbb\"));\n        Assert.assertEquals(\"Name5=aaa&Name6=bbb\", URLEncodedUtils.format(params, null));\n\n        params.clear();\n        params.add(new BasicNameValuePair(\"Name7\", \"aaa\"));\n        params.add(new BasicNameValuePair(\"Name7\", \"b,b\"));\n        params.add(new BasicNameValuePair(\"Name7\", \"ccc\"));\n        Assert.assertEquals(\"Name7=aaa&Name7=b%2Cb&Name7=ccc\", URLEncodedUtils.format(params, null));\n\n        params.clear();\n        params.add(new BasicNameValuePair(\"Name8\", \"xx,  yy  ,zz\"));\n        Assert.assertEquals(\"Name8=xx%2C++yy++%2Czz\", URLEncodedUtils.format(params, null));\n    }", "signature": "void testFormat()", "full_signature": "@Test public void testFormat()", "class_method_signature": "TestURLEncodedUtils.testFormat()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "length", "format", "clear", "add", "assertEquals", "format", "clear", "add", "assertEquals", "format", "clear", "add", "assertEquals", "format", "clear", "add", "assertEquals", "format", "clear", "add", "assertEquals", "format", "clear", "add", "add", "assertEquals", "format", "clear", "add", "add", "add", "assertEquals", "format", "clear", "add", "assertEquals", "format"]}, "focal_class": {"identifier": "URLEncodedUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CONTENT_TYPE = \"application/x-www-form-urlencoded\";", "modifier": "public static final", "type": "String", "declarator": "CONTENT_TYPE = \"application/x-www-form-urlencoded\"", "var_name": "CONTENT_TYPE"}, {"original_string": "private static final String PARAMETER_SEPARATOR = \"&\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETER_SEPARATOR = \"&\"", "var_name": "PARAMETER_SEPARATOR"}, {"original_string": "private static final String NAME_VALUE_SEPARATOR = \"=\";", "modifier": "private static final", "type": "String", "declarator": "NAME_VALUE_SEPARATOR = \"=\"", "var_name": "NAME_VALUE_SEPARATOR"}], "methods": [{"identifier": "parse", "parameters": "(final URI uri, final String encoding)", "modifiers": "public static", "return": "List <NameValuePair>", "signature": "List <NameValuePair> parse(final URI uri, final String encoding)", "full_signature": "public static List <NameValuePair> parse(final URI uri, final String encoding)", "class_method_signature": "URLEncodedUtils.parse(final URI uri, final String encoding)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(\n            final HttpEntity entity)", "modifiers": "public static", "return": "List <NameValuePair>", "signature": "List <NameValuePair> parse(\n            final HttpEntity entity)", "full_signature": "public static List <NameValuePair> parse(\n            final HttpEntity entity)", "class_method_signature": "URLEncodedUtils.parse(\n            final HttpEntity entity)", "testcase": false, "constructor": false}, {"identifier": "isEncoded", "parameters": "(final HttpEntity entity)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEncoded(final HttpEntity entity)", "full_signature": "public static boolean isEncoded(final HttpEntity entity)", "class_method_signature": "URLEncodedUtils.isEncoded(final HttpEntity entity)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(\n            final List <NameValuePair> parameters,\n            final Scanner scanner,\n            final String encoding)", "modifiers": "public static", "return": "void", "signature": "void parse(\n            final List <NameValuePair> parameters,\n            final Scanner scanner,\n            final String encoding)", "full_signature": "public static void parse(\n            final List <NameValuePair> parameters,\n            final Scanner scanner,\n            final String encoding)", "class_method_signature": "URLEncodedUtils.parse(\n            final List <NameValuePair> parameters,\n            final Scanner scanner,\n            final String encoding)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(\n            final List <? extends NameValuePair> parameters,\n            final String encoding)", "modifiers": "public static", "return": "String", "signature": "String format(\n            final List <? extends NameValuePair> parameters,\n            final String encoding)", "full_signature": "public static String format(\n            final List <? extends NameValuePair> parameters,\n            final String encoding)", "class_method_signature": "URLEncodedUtils.format(\n            final List <? extends NameValuePair> parameters,\n            final String encoding)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(final String content, final String encoding)", "modifiers": "private static", "return": "String", "signature": "String decode(final String content, final String encoding)", "full_signature": "private static String decode(final String content, final String encoding)", "class_method_signature": "URLEncodedUtils.decode(final String content, final String encoding)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(final String content, final String encoding)", "modifiers": "private static", "return": "String", "signature": "String encode(final String content, final String encoding)", "full_signature": "private static String encode(final String content, final String encoding)", "class_method_signature": "URLEncodedUtils.encode(final String content, final String encoding)", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/client/utils/URLEncodedUtils.java"}, "focal_method": {"identifier": "format", "parameters": "(\n            final List <? extends NameValuePair> parameters,\n            final String encoding)", "modifiers": "public static", "return": "String", "body": "public static String format (\n            final List <? extends NameValuePair> parameters,\n            final String encoding) {\n        final StringBuilder result = new StringBuilder();\n        for (final NameValuePair parameter : parameters) {\n            final String encodedName = encode(parameter.getName(), encoding);\n            final String value = parameter.getValue();\n            final String encodedValue = value != null ? encode(value, encoding) : \"\";\n            if (result.length() > 0)\n                result.append(PARAMETER_SEPARATOR);\n            result.append(encodedName);\n            result.append(NAME_VALUE_SEPARATOR);\n            result.append(encodedValue);\n        }\n        return result.toString();\n    }", "signature": "String format(\n            final List <? extends NameValuePair> parameters,\n            final String encoding)", "full_signature": "public static String format(\n            final List <? extends NameValuePair> parameters,\n            final String encoding)", "class_method_signature": "URLEncodedUtils.format(\n            final List <? extends NameValuePair> parameters,\n            final String encoding)", "testcase": false, "constructor": false, "invocations": ["encode", "getName", "getValue", "encode", "length", "append", "append", "append", "append", "toString"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}