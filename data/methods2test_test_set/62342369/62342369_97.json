{"test_class": {"identifier": "ErrorRateViewTest", "superclass": "", "interfaces": "", "fields": [], "file": "step-controller/step-controller-base-plugins/src/test/java/step/plugins/views/functions/ErrorRateViewTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test() {\n\t\tErrorRateView view = new ErrorRateView();\n\t\tview.setResolutions(new int[]{10,100});\n\t\tAbstractTimeBasedModel<ErrorRateEntry> model = view.init();\n\t\tfor(int j=0;j<10;j++) {\n\t\t\tfor(int i=0;i<99;i++) {\n\t\t\t\tReportNode node = new CallFunctionReportNode();\n\t\t\t\tCallFunction callFunction = new CallFunction();\n\t\t\t\tnode.setArtefactInstance(callFunction);\n\t\t\t\tnode.setResolvedArtefact(callFunction);\n\t\t\t\tnode.setExecutionTime(j*100+i);\n\t\t\t\tnode.setError(\"Error \"+i%2, 0, true);\n\t\t\t\tview.afterReportNodeExecution(model, node);\n\t\t\t}\n\t\t}\n\t\t\n\t\tAssert.assertEquals(10,model.getIntervals().size());\n\t\tAssert.assertEquals(99,model.getIntervals().get(0l).getCount());\n\t\tAssert.assertEquals(99,model.getIntervals().get(900l).getCount());\n\t\tAssert.assertEquals(50,(int)model.getIntervals().get(900l).countByErrorMsg.get(\"Error 0\"));\n\t\tAssert.assertEquals(49,(int)model.getIntervals().get(900l).countByErrorMsg.get(\"Error 1\"));\n\t}", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "ErrorRateViewTest.test()", "testcase": true, "constructor": false, "invocations": ["setResolutions", "init", "setArtefactInstance", "setResolvedArtefact", "setExecutionTime", "setError", "afterReportNodeExecution", "assertEquals", "size", "getIntervals", "assertEquals", "getCount", "get", "getIntervals", "assertEquals", "getCount", "get", "getIntervals", "assertEquals", "get", "get", "getIntervals", "assertEquals", "get", "get", "getIntervals"]}, "focal_class": {"identifier": "ErrorRateView", "superclass": "extends AbstractTimeBasedView<ErrorRateEntry>", "interfaces": "", "fields": [], "methods": [{"identifier": "afterReportNodeSkeletonCreation", "parameters": "(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node)", "modifiers": "@Override public", "return": "void", "signature": "void afterReportNodeSkeletonCreation(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node)", "full_signature": "@Override public void afterReportNodeSkeletonCreation(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node)", "class_method_signature": "ErrorRateView.afterReportNodeSkeletonCreation(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node)", "testcase": false, "constructor": false}, {"identifier": "createPoint", "parameters": "(ReportNode node)", "modifiers": "private", "return": "ErrorRateEntry", "signature": "ErrorRateEntry createPoint(ReportNode node)", "full_signature": "private ErrorRateEntry createPoint(ReportNode node)", "class_method_signature": "ErrorRateView.createPoint(ReportNode node)", "testcase": false, "constructor": false}, {"identifier": "afterReportNodeExecution", "parameters": "(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node)", "modifiers": "@Override public", "return": "void", "signature": "void afterReportNodeExecution(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node)", "full_signature": "@Override public void afterReportNodeExecution(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node)", "class_method_signature": "ErrorRateView.afterReportNodeExecution(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node)", "testcase": false, "constructor": false}, {"identifier": "mergePoints", "parameters": "(ErrorRateEntry target, ErrorRateEntry source)", "modifiers": "@Override protected", "return": "void", "signature": "void mergePoints(ErrorRateEntry target, ErrorRateEntry source)", "full_signature": "@Override protected void mergePoints(ErrorRateEntry target, ErrorRateEntry source)", "class_method_signature": "ErrorRateView.mergePoints(ErrorRateEntry target, ErrorRateEntry source)", "testcase": false, "constructor": false}, {"identifier": "getViewId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getViewId()", "full_signature": "@Override public String getViewId()", "class_method_signature": "ErrorRateView.getViewId()", "testcase": false, "constructor": false}, {"identifier": "rollbackReportNode", "parameters": "(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node)", "modifiers": "@Override public", "return": "void", "signature": "void rollbackReportNode(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node)", "full_signature": "@Override public void rollbackReportNode(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node)", "class_method_signature": "ErrorRateView.rollbackReportNode(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node)", "testcase": false, "constructor": false}, {"identifier": "unMergePoints", "parameters": "(ErrorRateEntry target, ErrorRateEntry source)", "modifiers": "@Override protected", "return": "void", "signature": "void unMergePoints(ErrorRateEntry target, ErrorRateEntry source)", "full_signature": "@Override protected void unMergePoints(ErrorRateEntry target, ErrorRateEntry source)", "class_method_signature": "ErrorRateView.unMergePoints(ErrorRateEntry target, ErrorRateEntry source)", "testcase": false, "constructor": false}], "file": "step-controller/step-controller-base-plugins/src/main/java/step/plugins/views/functions/ErrorRateView.java"}, "focal_method": {"identifier": "afterReportNodeExecution", "parameters": "(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void afterReportNodeExecution(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node) {\n\t\tErrorRateEntry e = createPoint(node);\n\t\tif (e != null) {\n\t\t\taddPoint(model, node.getExecutionTime(), e);\n\t\t}\n\t}", "signature": "void afterReportNodeExecution(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node)", "full_signature": "@Override public void afterReportNodeExecution(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node)", "class_method_signature": "ErrorRateView.afterReportNodeExecution(AbstractTimeBasedModel<ErrorRateEntry> model, ReportNode node)", "testcase": false, "constructor": false, "invocations": ["createPoint", "addPoint", "getExecutionTime"]}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}