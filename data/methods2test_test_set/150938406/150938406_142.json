{"test_class": {"identifier": "ClusterEvaluationUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/evaluation/ClusterEvaluationUtilTest.java"}, "test_case": {"identifier": "getClusterStatisticsCosineTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getClusterStatisticsCosineTest() {\n        Row[] rows0 = new Row[] {\n            Row.of(1, \"9 9 9\"),\n            Row.of(1, \"9.1 9.1 9.1\"),\n            Row.of(1, \"9.2 9.2 9.2\")\n        };\n\n        ClusterMetricsSummary clusterMetricsSummary = ClusterEvaluationUtil.getClusterStatistics(Arrays.asList(rows0),\n            new CosineDistance());\n\n        Assert.assertEquals(clusterMetricsSummary.k, 1);\n        Assert.assertEquals(clusterMetricsSummary.clusterId.get(0), \"1\");\n        Assert.assertEquals(clusterMetricsSummary.clusterCnt.get(0).intValue(), 3);\n        Assert.assertEquals(clusterMetricsSummary.compactness.get(0), 0, 0.001);\n        Assert.assertEquals(clusterMetricsSummary.distanceSquareSum.get(0), 0, 0.01);\n        Assert.assertEquals(clusterMetricsSummary.vectorNormL2Sum.get(0), 3.0, 0.01);\n        Assert.assertEquals(clusterMetricsSummary.meanVector.get(0).normL2Square(), 1.0, 0.01);\n        Assert.assertEquals(clusterMetricsSummary.k, 1);\n        Assert.assertEquals(clusterMetricsSummary.total, 3);\n    }", "signature": "void getClusterStatisticsCosineTest()", "full_signature": "@Test public void getClusterStatisticsCosineTest()", "class_method_signature": "ClusterEvaluationUtilTest.getClusterStatisticsCosineTest()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "getClusterStatistics", "asList", "assertEquals", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "normL2Square", "get", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "ClusterEvaluationUtil", "superclass": "", "interfaces": "implements AllWindowFunction<Row, Row, TimeWindow>", "fields": [{"original_string": "public static int COUNT = 0;", "modifier": "public static", "type": "int", "declarator": "COUNT = 0", "var_name": "COUNT"}, {"original_string": "public static int MEAN = 1;", "modifier": "public static", "type": "int", "declarator": "MEAN = 1", "var_name": "MEAN"}, {"original_string": "public static int SUM_2 = 2;", "modifier": "public static", "type": "int", "declarator": "SUM_2 = 2", "var_name": "SUM_2"}, {"original_string": "private ContinuousDistance distance;", "modifier": "private", "type": "ContinuousDistance", "declarator": "distance", "var_name": "distance"}], "methods": [{"identifier": "ClusterEvaluationUtil", "parameters": "(ContinuousDistance distance)", "modifiers": "public", "return": "", "signature": " ClusterEvaluationUtil(ContinuousDistance distance)", "full_signature": "public  ClusterEvaluationUtil(ContinuousDistance distance)", "class_method_signature": "ClusterEvaluationUtil.ClusterEvaluationUtil(ContinuousDistance distance)", "testcase": false, "constructor": true}, {"identifier": "extractParamsFromConfusionMatrix", "parameters": "(LongMatrix longMatrix)", "modifiers": "public static", "return": "Params", "signature": "Params extractParamsFromConfusionMatrix(LongMatrix longMatrix)", "full_signature": "public static Params extractParamsFromConfusionMatrix(LongMatrix longMatrix)", "class_method_signature": "ClusterEvaluationUtil.extractParamsFromConfusionMatrix(LongMatrix longMatrix)", "testcase": false, "constructor": false}, {"identifier": "combination", "parameters": "(long number)", "modifiers": "private static", "return": "long", "signature": "long combination(long number)", "full_signature": "private static long combination(long number)", "class_method_signature": "ClusterEvaluationUtil.combination(long number)", "testcase": false, "constructor": false}, {"identifier": "entropy", "parameters": "(long frequency, long total)", "modifiers": "private static", "return": "double", "signature": "double entropy(long frequency, long total)", "full_signature": "private static double entropy(long frequency, long total)", "class_method_signature": "ClusterEvaluationUtil.entropy(long frequency, long total)", "testcase": false, "constructor": false}, {"identifier": "calSilhouetteCoefficient", "parameters": "(Row row, ClusterMetricsSummary clusterMetricsSummary)", "modifiers": "public static", "return": "Tuple1<Double>", "signature": "Tuple1<Double> calSilhouetteCoefficient(Row row, ClusterMetricsSummary clusterMetricsSummary)", "full_signature": "public static Tuple1<Double> calSilhouetteCoefficient(Row row, ClusterMetricsSummary clusterMetricsSummary)", "class_method_signature": "ClusterEvaluationUtil.calSilhouetteCoefficient(Row row, ClusterMetricsSummary clusterMetricsSummary)", "testcase": false, "constructor": false}, {"identifier": "getBasicClusterStatistics", "parameters": "(Iterable<Row> rows)", "modifiers": "public static", "return": "Params", "signature": "Params getBasicClusterStatistics(Iterable<Row> rows)", "full_signature": "public static Params getBasicClusterStatistics(Iterable<Row> rows)", "class_method_signature": "ClusterEvaluationUtil.getBasicClusterStatistics(Iterable<Row> rows)", "testcase": false, "constructor": false}, {"identifier": "getClusterStatistics", "parameters": "(Iterable<Row> rows, ContinuousDistance distance)", "modifiers": "public static", "return": "ClusterMetricsSummary", "signature": "ClusterMetricsSummary getClusterStatistics(Iterable<Row> rows, ContinuousDistance distance)", "full_signature": "public static ClusterMetricsSummary getClusterStatistics(Iterable<Row> rows, ContinuousDistance distance)", "class_method_signature": "ClusterEvaluationUtil.getClusterStatistics(Iterable<Row> rows, ContinuousDistance distance)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(TimeWindow timeWindow, Iterable<Row> rows, Collector<Row> collector)", "modifiers": "@Override public", "return": "void", "signature": "void apply(TimeWindow timeWindow, Iterable<Row> rows, Collector<Row> collector)", "full_signature": "@Override public void apply(TimeWindow timeWindow, Iterable<Row> rows, Collector<Row> collector)", "class_method_signature": "ClusterEvaluationUtil.apply(TimeWindow timeWindow, Iterable<Row> rows, Collector<Row> collector)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/evaluation/ClusterEvaluationUtil.java"}, "focal_method": {"identifier": "getClusterStatistics", "parameters": "(Iterable<Row> rows, ContinuousDistance distance)", "modifiers": "public static", "return": "ClusterMetricsSummary", "body": "public static ClusterMetricsSummary getClusterStatistics(Iterable<Row> rows, ContinuousDistance distance) {\n        List<Vector> list = new ArrayList<>();\n        int total = 0;\n        String clusterId;\n        DenseVector sumVector;\n\n        Iterator<Row> iterator = rows.iterator();\n        Row row = null;\n        while (iterator.hasNext() && !EvaluationUtil.checkRowFieldNotNull(row)) {\n            row = iterator.next();\n        }\n        if (EvaluationUtil.checkRowFieldNotNull(row)) {\n            clusterId = row.getField(0).toString();\n            Vector vec = VectorUtil.getVector(row.getField(1));\n            Preconditions.checkArgument(vec.size() >= 1, \"Vector Size must be at least 1!\");\n            sumVector = DenseVector.zeros(vec.size());\n        } else {\n            return null;\n        }\n\n        while (null != row) {\n            if (EvaluationUtil.checkRowFieldNotNull(row)) {\n                Preconditions.checkArgument(row.getField(0).toString().equals(clusterId),\n                    \"ClusterId must be the same!\");\n                Vector vec = VectorUtil.getVector(row.getField(1));\n                list.add(vec);\n                if (distance instanceof EuclideanDistance) {\n                    sumVector.plusEqual(vec);\n                } else {\n                    vec.scaleEqual(1.0 / vec.normL2());\n                    sumVector.plusEqual(vec);\n                }\n                total++;\n            }\n            row = iterator.hasNext() ? iterator.next() : null;\n        }\n\n        DenseVector meanVector = sumVector.scale(1.0 / total);\n\n        double distanceSum = 0.0;\n        double distanceSquareSum = 0.0;\n        double vectorNormL2Sum = 0.0;\n        for (Vector vec : list) {\n            double d = distance.calc(meanVector, vec);\n            distanceSum += d;\n            distanceSquareSum += d * d;\n            vectorNormL2Sum += vec.normL2Square();\n        }\n        return new ClusterMetricsSummary(clusterId, total, distanceSum / total, distanceSquareSum, vectorNormL2Sum,\n            meanVector, distance);\n    }", "signature": "ClusterMetricsSummary getClusterStatistics(Iterable<Row> rows, ContinuousDistance distance)", "full_signature": "public static ClusterMetricsSummary getClusterStatistics(Iterable<Row> rows, ContinuousDistance distance)", "class_method_signature": "ClusterEvaluationUtil.getClusterStatistics(Iterable<Row> rows, ContinuousDistance distance)", "testcase": false, "constructor": false, "invocations": ["iterator", "hasNext", "checkRowFieldNotNull", "next", "checkRowFieldNotNull", "toString", "getField", "getVector", "getField", "checkArgument", "size", "zeros", "size", "checkRowFieldNotNull", "checkArgument", "equals", "toString", "getField", "getVector", "getField", "add", "plusEqual", "scaleEqual", "normL2", "plusEqual", "hasNext", "next", "scale", "calc", "normL2Square"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}