{"test_class": {"identifier": "ServerWrapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "frontend/app/src/test/java/com/eddex/jackle/jumpcutter/internet/ServerWrapperTest.java"}, "test_case": {"identifier": "processVideo_NoSettingsProvider_ThrowsNullPointerException", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void processVideo_NoSettingsProvider_ThrowsNullPointerException() {\n\n        ServerWrapper server = new ServerWrapper(null, null);\n\n        server.processVideo(null, null);\n    }", "signature": "void processVideo_NoSettingsProvider_ThrowsNullPointerException()", "full_signature": "@Test(expected = NullPointerException.class) public void processVideo_NoSettingsProvider_ThrowsNullPointerException()", "class_method_signature": "ServerWrapperTest.processVideo_NoSettingsProvider_ThrowsNullPointerException()", "testcase": true, "constructor": false, "invocations": ["processVideo"]}, "focal_class": {"identifier": "ServerWrapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public boolean HasError = false;", "modifier": "public", "type": "boolean", "declarator": "HasError = false", "var_name": "HasError"}, {"original_string": "private final OkHttpClient okHttpClient;", "modifier": "private final", "type": "OkHttpClient", "declarator": "okHttpClient", "var_name": "okHttpClient"}, {"original_string": "private final FileSystemWrapper filesystemWrapper;", "modifier": "private final", "type": "FileSystemWrapper", "declarator": "filesystemWrapper", "var_name": "filesystemWrapper"}, {"original_string": "private final String Scheme = \"https\";", "modifier": "private final", "type": "String", "declarator": "Scheme = \"https\"", "var_name": "Scheme"}, {"original_string": "private final String Host = \"jumpcutter.letum.ch\";", "modifier": "private final", "type": "String", "declarator": "Host = \"jumpcutter.letum.ch\"", "var_name": "Host"}], "methods": [{"identifier": "ServerWrapper", "parameters": "(OkHttpClient okHttpClient, FileSystemWrapper filesystemWrapper)", "modifiers": "@Inject public", "return": "", "signature": " ServerWrapper(OkHttpClient okHttpClient, FileSystemWrapper filesystemWrapper)", "full_signature": "@Inject public  ServerWrapper(OkHttpClient okHttpClient, FileSystemWrapper filesystemWrapper)", "class_method_signature": "ServerWrapper.ServerWrapper(OkHttpClient okHttpClient, FileSystemWrapper filesystemWrapper)", "testcase": false, "constructor": true}, {"identifier": "ping", "parameters": "()", "modifiers": "public", "return": "Boolean", "signature": "Boolean ping()", "full_signature": "public Boolean ping()", "class_method_signature": "ServerWrapper.ping()", "testcase": false, "constructor": false}, {"identifier": "uploadVideo", "parameters": "(File video)", "modifiers": "public", "return": "String", "signature": "String uploadVideo(File video)", "full_signature": "public String uploadVideo(File video)", "class_method_signature": "ServerWrapper.uploadVideo(File video)", "testcase": false, "constructor": false}, {"identifier": "downloadYouTubeVideo", "parameters": "(String youtubeUrl)", "modifiers": "public", "return": "String", "signature": "String downloadYouTubeVideo(String youtubeUrl)", "full_signature": "public String downloadYouTubeVideo(String youtubeUrl)", "class_method_signature": "ServerWrapper.downloadYouTubeVideo(String youtubeUrl)", "testcase": false, "constructor": false}, {"identifier": "processVideo", "parameters": "(String videoId, SettingsProvider settingsProvider)", "modifiers": "public", "return": "String", "signature": "String processVideo(String videoId, SettingsProvider settingsProvider)", "full_signature": "public String processVideo(String videoId, SettingsProvider settingsProvider)", "class_method_signature": "ServerWrapper.processVideo(String videoId, SettingsProvider settingsProvider)", "testcase": false, "constructor": false}, {"identifier": "downloadVideo", "parameters": "(String downloadId)", "modifiers": "public", "return": "boolean", "signature": "boolean downloadVideo(String downloadId)", "full_signature": "public boolean downloadVideo(String downloadId)", "class_method_signature": "ServerWrapper.downloadVideo(String downloadId)", "testcase": false, "constructor": false}, {"identifier": "getStringResponseFromServer", "parameters": "(Request request)", "modifiers": "private", "return": "String", "signature": "String getStringResponseFromServer(Request request)", "full_signature": "private String getStringResponseFromServer(Request request)", "class_method_signature": "ServerWrapper.getStringResponseFromServer(Request request)", "testcase": false, "constructor": false}], "file": "frontend/app/src/main/java/com/eddex/jackle/jumpcutter/internet/ServerWrapper.java"}, "focal_method": {"identifier": "processVideo", "parameters": "(String videoId, SettingsProvider settingsProvider)", "modifiers": "public", "return": "String", "body": "public String processVideo(String videoId, SettingsProvider settingsProvider) {\n\n        ProcessUrlBuilder urlBuilder = new ProcessUrlBuilder()\n                .withHost(this.Host)\n                .withScheme(this.Scheme)\n                //.withPort(this.Port)\n                .withVideoId(videoId)\n                .withSoundedSpeed(settingsProvider.getSoundSpeed())\n                .withSilentSpeed(settingsProvider.getSilenceSpeed())\n                .withSilentThreshold(settingsProvider.getSilenceThreshold())\n                .withFrameMargin(settingsProvider.getFrameMargin());\n\n        if (settingsProvider.getAdvancedOptionsSwitchEnabled()) {\n            urlBuilder\n                .withSampleRate(settingsProvider.getSampleRate())\n                .withFrameRate(settingsProvider.getFrameRate())\n                .withFrameQuality(settingsProvider.getFrameQuality());\n        }\n\n        HttpUrl url = urlBuilder.build();\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n\n        return this.getStringResponseFromServer(request);\n    }", "signature": "String processVideo(String videoId, SettingsProvider settingsProvider)", "full_signature": "public String processVideo(String videoId, SettingsProvider settingsProvider)", "class_method_signature": "ServerWrapper.processVideo(String videoId, SettingsProvider settingsProvider)", "testcase": false, "constructor": false, "invocations": ["withFrameMargin", "withSilentThreshold", "withSilentSpeed", "withSoundedSpeed", "withVideoId", "withScheme", "withHost", "getSoundSpeed", "getSilenceSpeed", "getSilenceThreshold", "getFrameMargin", "getAdvancedOptionsSwitchEnabled", "withFrameQuality", "withFrameRate", "withSampleRate", "getSampleRate", "getFrameRate", "getFrameQuality", "build", "build", "get", "url", "getStringResponseFromServer"]}, "repository": {"repo_id": 181514613, "url": "https://github.com/eddex/jumpcutter-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 994, "license": "licensed"}}