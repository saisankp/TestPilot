{"test_class": {"identifier": "HistogramTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger logger = Logger.getLogger(HistogramTest.class);", "modifier": "private", "type": "Logger", "declarator": "logger = Logger.getLogger(HistogramTest.class)", "var_name": "logger"}, {"original_string": "private Inflector inflector = Inflector.getInstance();", "modifier": "private", "type": "Inflector", "declarator": "inflector = Inflector.getInstance()", "var_name": "inflector"}], "file": "modeshape-common/src/test/java/org/modeshape/common/statistic/HistogramTest.java"}, "test_case": {"identifier": "shouldCorrectlyConstructBoundariesWithWindowSmallerThanActualNarrowlyVaryingFloats", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCorrectlyConstructBoundariesWithWindowSmallerThanActualNarrowlyVaryingFloats() {\n        List<Float> boundaries = Histogram.getBucketBoundaries(new FloatOperations(),\n                                                               10.00020f,\n                                                               10.00030f,\n                                                               10.00011f,\n                                                               10.00050f,\n                                                               12,\n                                                               3);\n        assertNotNull(boundaries);\n        assertEquals(13, boundaries.size());\n        assertEquals(10.00011f, boundaries.get(0), 0.00001f);\n        assertEquals(10.00020f, boundaries.get(1), 0.00001f);\n        assertEquals(10.00021f, boundaries.get(2), 0.00001f);\n        assertEquals(10.00022f, boundaries.get(3), 0.00001f);\n        assertEquals(10.00023f, boundaries.get(4), 0.00001f);\n        assertEquals(10.00024f, boundaries.get(5), 0.00001f);\n        assertEquals(10.00025f, boundaries.get(6), 0.00001f);\n        assertEquals(10.00026f, boundaries.get(7), 0.00001f);\n        assertEquals(10.00027f, boundaries.get(8), 0.00001f);\n        assertEquals(10.00028f, boundaries.get(9), 0.00001f);\n        assertEquals(10.00029f, boundaries.get(10), 0.00001f);\n        assertEquals(10.00030f, boundaries.get(11), 0.00001f);\n        assertEquals(10.00050f, boundaries.get(12), 0.00001f);\n    }", "signature": "void shouldCorrectlyConstructBoundariesWithWindowSmallerThanActualNarrowlyVaryingFloats()", "full_signature": "@Test public void shouldCorrectlyConstructBoundariesWithWindowSmallerThanActualNarrowlyVaryingFloats()", "class_method_signature": "HistogramTest.shouldCorrectlyConstructBoundariesWithWindowSmallerThanActualNarrowlyVaryingFloats()", "testcase": true, "constructor": false, "invocations": ["getBucketBoundaries", "assertNotNull", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "Histogram", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_BUCKET_COUNT = 10;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_BUCKET_COUNT = 10", "var_name": "DEFAULT_BUCKET_COUNT"}, {"original_string": "public static final int DEFAULT_SIGNIFICANT_FIGURES = 4;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_SIGNIFICANT_FIGURES = 4", "var_name": "DEFAULT_SIGNIFICANT_FIGURES"}, {"original_string": "protected final MathOperations<T> math;", "modifier": "protected final", "type": "MathOperations<T>", "declarator": "math", "var_name": "math"}, {"original_string": "protected final List<T> values;", "modifier": "protected final", "type": "List<T>", "declarator": "values", "var_name": "values"}, {"original_string": "private int bucketCount = DEFAULT_BUCKET_COUNT;", "modifier": "private", "type": "int", "declarator": "bucketCount = DEFAULT_BUCKET_COUNT", "var_name": "bucketCount"}, {"original_string": "private int significantFigures = DEFAULT_SIGNIFICANT_FIGURES;", "modifier": "private", "type": "int", "declarator": "significantFigures = DEFAULT_SIGNIFICANT_FIGURES", "var_name": "significantFigures"}, {"original_string": "private BigDecimal bucketWidth;", "modifier": "private", "type": "BigDecimal", "declarator": "bucketWidth", "var_name": "bucketWidth"}, {"original_string": "private LinkedList<Bucket> buckets;", "modifier": "private", "type": "LinkedList<Bucket>", "declarator": "buckets", "var_name": "buckets"}, {"original_string": "private BucketingStrategy actualValueStrategy = new DefaultBucketingStrategy();", "modifier": "private", "type": "BucketingStrategy", "declarator": "actualValueStrategy = new DefaultBucketingStrategy()", "var_name": "actualValueStrategy"}, {"original_string": "private BucketingStrategy bucketingStrategy = actualValueStrategy;", "modifier": "private", "type": "BucketingStrategy", "declarator": "bucketingStrategy = actualValueStrategy", "var_name": "bucketingStrategy"}], "methods": [{"identifier": "Histogram", "parameters": "( MathOperations<T> operations,\n                      List<T> values )", "modifiers": "public", "return": "", "signature": " Histogram( MathOperations<T> operations,\n                      List<T> values )", "full_signature": "public  Histogram( MathOperations<T> operations,\n                      List<T> values )", "class_method_signature": "Histogram.Histogram( MathOperations<T> operations,\n                      List<T> values )", "testcase": false, "constructor": true}, {"identifier": "Histogram", "parameters": "( MathOperations<T> operations, T... values )", "modifiers": "@SafeVarargs public", "return": "", "signature": " Histogram( MathOperations<T> operations, T... values )", "full_signature": "@SafeVarargs public  Histogram( MathOperations<T> operations, T... values )", "class_method_signature": "Histogram.Histogram( MathOperations<T> operations, T... values )", "testcase": false, "constructor": true}, {"identifier": "getStrategy", "parameters": "()", "modifiers": "public", "return": "BucketingStrategy", "signature": "BucketingStrategy getStrategy()", "full_signature": "public BucketingStrategy getStrategy()", "class_method_signature": "Histogram.getStrategy()", "testcase": false, "constructor": false}, {"identifier": "getMathOperations", "parameters": "()", "modifiers": "public", "return": "MathOperations<T>", "signature": "MathOperations<T> getMathOperations()", "full_signature": "public MathOperations<T> getMathOperations()", "class_method_signature": "Histogram.getMathOperations()", "testcase": false, "constructor": false}, {"identifier": "setStrategy", "parameters": "( double median,\n                             double standardDeviation,\n                             int sigma )", "modifiers": "public", "return": "void", "signature": "void setStrategy( double median,\n                             double standardDeviation,\n                             int sigma )", "full_signature": "public void setStrategy( double median,\n                             double standardDeviation,\n                             int sigma )", "class_method_signature": "Histogram.setStrategy( double median,\n                             double standardDeviation,\n                             int sigma )", "testcase": false, "constructor": false}, {"identifier": "setStrategy", "parameters": "( T minimum,\n                             T maximum )", "modifiers": "public", "return": "void", "signature": "void setStrategy( T minimum,\n                             T maximum )", "full_signature": "public void setStrategy( T minimum,\n                             T maximum )", "class_method_signature": "Histogram.setStrategy( T minimum,\n                             T maximum )", "testcase": false, "constructor": false}, {"identifier": "setStrategyToDefault", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setStrategyToDefault()", "full_signature": "public void setStrategyToDefault()", "class_method_signature": "Histogram.setStrategyToDefault()", "testcase": false, "constructor": false}, {"identifier": "getSignificantFigures", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSignificantFigures()", "full_signature": "public int getSignificantFigures()", "class_method_signature": "Histogram.getSignificantFigures()", "testcase": false, "constructor": false}, {"identifier": "setSignificantFigures", "parameters": "( int significantFigures )", "modifiers": "public", "return": "Histogram<T>", "signature": "Histogram<T> setSignificantFigures( int significantFigures )", "full_signature": "public Histogram<T> setSignificantFigures( int significantFigures )", "class_method_signature": "Histogram.setSignificantFigures( int significantFigures )", "testcase": false, "constructor": false}, {"identifier": "getBucketCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBucketCount()", "full_signature": "public int getBucketCount()", "class_method_signature": "Histogram.getBucketCount()", "testcase": false, "constructor": false}, {"identifier": "setBucketCount", "parameters": "( int count )", "modifiers": "public", "return": "Histogram<T>", "signature": "Histogram<T> setBucketCount( int count )", "full_signature": "public Histogram<T> setBucketCount( int count )", "class_method_signature": "Histogram.setBucketCount( int count )", "testcase": false, "constructor": false}, {"identifier": "getBuckets", "parameters": "()", "modifiers": "public", "return": "List<Bucket>", "signature": "List<Bucket> getBuckets()", "full_signature": "public List<Bucket> getBuckets()", "class_method_signature": "Histogram.getBuckets()", "testcase": false, "constructor": false}, {"identifier": "compute", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void compute()", "full_signature": "protected void compute()", "class_method_signature": "Histogram.compute()", "testcase": false, "constructor": false}, {"identifier": "getTotalNumberOfValues", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTotalNumberOfValues()", "full_signature": "public long getTotalNumberOfValues()", "class_method_signature": "Histogram.getTotalNumberOfValues()", "testcase": false, "constructor": false}, {"identifier": "getMaximumPercentage", "parameters": "()", "modifiers": "protected", "return": "float", "signature": "float getMaximumPercentage()", "full_signature": "protected float getMaximumPercentage()", "class_method_signature": "Histogram.getMaximumPercentage()", "testcase": false, "constructor": false}, {"identifier": "getMaximumCount", "parameters": "()", "modifiers": "protected", "return": "long", "signature": "long getMaximumCount()", "full_signature": "protected long getMaximumCount()", "class_method_signature": "Histogram.getMaximumCount()", "testcase": false, "constructor": false}, {"identifier": "getTextGraph", "parameters": "( int maxBarLength )", "modifiers": "public", "return": "List<String>", "signature": "List<String> getTextGraph( int maxBarLength )", "full_signature": "public List<String> getTextGraph( int maxBarLength )", "class_method_signature": "Histogram.getTextGraph( int maxBarLength )", "testcase": false, "constructor": false}, {"identifier": "getBucketBoundaries", "parameters": "( MathOperations<T> math,\n                                                      T lowerBound,\n                                                      T upperBound,\n                                                      T actualMinimum,\n                                                      T actualMaximum,\n                                                      int bucketCount,\n                                                      int bucketWidthSigFigs )", "modifiers": "protected static", "return": "List<T>", "signature": "List<T> getBucketBoundaries( MathOperations<T> math,\n                                                      T lowerBound,\n                                                      T upperBound,\n                                                      T actualMinimum,\n                                                      T actualMaximum,\n                                                      int bucketCount,\n                                                      int bucketWidthSigFigs )", "full_signature": "protected static List<T> getBucketBoundaries( MathOperations<T> math,\n                                                      T lowerBound,\n                                                      T upperBound,\n                                                      T actualMinimum,\n                                                      T actualMaximum,\n                                                      int bucketCount,\n                                                      int bucketWidthSigFigs )", "class_method_signature": "Histogram.getBucketBoundaries( MathOperations<T> math,\n                                                      T lowerBound,\n                                                      T upperBound,\n                                                      T actualMinimum,\n                                                      T actualMaximum,\n                                                      int bucketCount,\n                                                      int bucketWidthSigFigs )", "testcase": false, "constructor": false}], "file": "modeshape-common/src/main/java/org/modeshape/common/statistic/Histogram.java"}, "focal_method": {"identifier": "getBucketBoundaries", "parameters": "( MathOperations<T> math,\n                                                      T lowerBound,\n                                                      T upperBound,\n                                                      T actualMinimum,\n                                                      T actualMaximum,\n                                                      int bucketCount,\n                                                      int bucketWidthSigFigs )", "modifiers": "protected static", "return": "List<T>", "body": "protected static <T> List<T> getBucketBoundaries( MathOperations<T> math,\n                                                      T lowerBound,\n                                                      T upperBound,\n                                                      T actualMinimum,\n                                                      T actualMaximum,\n                                                      int bucketCount,\n                                                      int bucketWidthSigFigs ) {\n        lowerBound = math.compare(lowerBound, actualMinimum) < 0 ? actualMinimum : lowerBound;\n        upperBound = math.compare(actualMaximum, upperBound) < 0 ? actualMaximum : upperBound;\n        if (math.compare(lowerBound, upperBound) == 0) {\n            List<T> boundaries = new ArrayList<T>();\n            boundaries.add(lowerBound);\n            boundaries.add(upperBound);\n            return boundaries;\n        }\n        final boolean extraLowerBucketNeeded = math.compare(lowerBound, actualMinimum) > 0;\n        final boolean extraUpperBucketNeeded = math.compare(actualMaximum, upperBound) > 0;\n        if (extraLowerBucketNeeded) --bucketCount;\n        if (extraUpperBucketNeeded) --bucketCount;\n\n        // Compute the delta between the lower and upper bound ...\n        T totalWidth = math.subtract(upperBound, lowerBound);\n        int totalWidthScale = math.getExponentInScientificNotation(totalWidth);\n\n        // Modify the lower bound by rounding down to the next lower meaningful value,\n        // using the scale of the totalWidth to determine how to round down.\n        T roundedLowerBound = math.roundDown(lowerBound, -totalWidthScale);\n        T roundedUpperBound = math.roundUp(upperBound, -totalWidthScale);\n\n        // Create the ranges ...\n        double finalLowerBound = math.doubleValue(roundedLowerBound);\n        double finalUpperBound = math.doubleValue(roundedUpperBound);\n        double finalBucketCount = bucketCount;\n        double bucketWidth = (finalUpperBound - finalLowerBound) / finalBucketCount;\n\n        // DoubleOperations doubleOps = new DoubleOperations();\n        // bucketWidth = doubleOps.keepSignificantFigures(bucketWidth,bucketWidthSigFigs);\n\n        List<T> boundaries = new ArrayList<T>();\n        if (bucketWidth > 0.0d) {\n            if (extraLowerBucketNeeded) boundaries.add(actualMinimum);\n            double nextBoundary = finalLowerBound;\n            for (int i = 0; i != bucketCount; ++i) {\n                boundaries.add(math.create(nextBoundary));\n                nextBoundary = nextBoundary + bucketWidth;\n                // nextBoundary = doubleOps.roundUp(nextBoundary + bucketWidth, bucketWidthSigFigs );\n            }\n            boundaries.add(roundedUpperBound);\n            if (extraUpperBucketNeeded) boundaries.add(actualMaximum);\n        }\n        return boundaries;\n    }", "signature": "List<T> getBucketBoundaries( MathOperations<T> math,\n                                                      T lowerBound,\n                                                      T upperBound,\n                                                      T actualMinimum,\n                                                      T actualMaximum,\n                                                      int bucketCount,\n                                                      int bucketWidthSigFigs )", "full_signature": "protected static List<T> getBucketBoundaries( MathOperations<T> math,\n                                                      T lowerBound,\n                                                      T upperBound,\n                                                      T actualMinimum,\n                                                      T actualMaximum,\n                                                      int bucketCount,\n                                                      int bucketWidthSigFigs )", "class_method_signature": "Histogram.getBucketBoundaries( MathOperations<T> math,\n                                                      T lowerBound,\n                                                      T upperBound,\n                                                      T actualMinimum,\n                                                      T actualMaximum,\n                                                      int bucketCount,\n                                                      int bucketWidthSigFigs )", "testcase": false, "constructor": false, "invocations": ["compare", "compare", "compare", "add", "add", "compare", "compare", "subtract", "getExponentInScientificNotation", "roundDown", "roundUp", "doubleValue", "doubleValue", "add", "add", "create", "add", "add"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}