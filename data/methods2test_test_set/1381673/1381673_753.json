{"test_class": {"identifier": "BaseColumnFieldDiffImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Parameterized.Parameter(0)\n    public DTCellValue52 dcv1;", "modifier": "@Parameterized.Parameter(0)\n    public", "type": "DTCellValue52", "declarator": "dcv1", "var_name": "dcv1"}, {"original_string": "@Parameterized.Parameter(1)\n    public DTCellValue52 dcv2;", "modifier": "@Parameterized.Parameter(1)\n    public", "type": "DTCellValue52", "declarator": "dcv2", "var_name": "dcv2"}, {"original_string": "@Parameterized.Parameter(2)\n    public boolean isEqual;", "modifier": "@Parameterized.Parameter(2)\n    public", "type": "boolean", "declarator": "isEqual", "var_name": "isEqual"}], "file": "drools-workbench-models/drools-workbench-models-guided-dtable/src/test/java/org/drools/workbench/models/guided/dtable/shared/model/BaseColumnFieldDiffImplTest.java"}, "test_case": {"identifier": "check", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void check() {\n        assertEquals( isEqual,\n                      BaseColumnFieldDiffImpl.isEqualOrNull( dcv1,\n                                                             dcv2 ) );\n    }", "signature": "void check()", "full_signature": "@Test public void check()", "class_method_signature": "BaseColumnFieldDiffImplTest.check()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "isEqualOrNull"]}, "focal_class": {"identifier": "BaseColumnFieldDiffImpl", "superclass": "", "interfaces": "implements BaseColumnFieldDiff", "fields": [{"original_string": "private String fieldName;", "modifier": "private", "type": "String", "declarator": "fieldName", "var_name": "fieldName"}, {"original_string": "private Object oldValue;", "modifier": "private", "type": "Object", "declarator": "oldValue", "var_name": "oldValue"}, {"original_string": "private Object newValue;", "modifier": "private", "type": "Object", "declarator": "newValue", "var_name": "newValue"}], "methods": [{"identifier": "BaseColumnFieldDiffImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " BaseColumnFieldDiffImpl()", "full_signature": "public  BaseColumnFieldDiffImpl()", "class_method_signature": "BaseColumnFieldDiffImpl.BaseColumnFieldDiffImpl()", "testcase": false, "constructor": true}, {"identifier": "BaseColumnFieldDiffImpl", "parameters": "( String fieldName,\n                                    Object oldValue,\n                                    Object newValue )", "modifiers": "public", "return": "", "signature": " BaseColumnFieldDiffImpl( String fieldName,\n                                    Object oldValue,\n                                    Object newValue )", "full_signature": "public  BaseColumnFieldDiffImpl( String fieldName,\n                                    Object oldValue,\n                                    Object newValue )", "class_method_signature": "BaseColumnFieldDiffImpl.BaseColumnFieldDiffImpl( String fieldName,\n                                    Object oldValue,\n                                    Object newValue )", "testcase": false, "constructor": true}, {"identifier": "getFieldName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFieldName()", "full_signature": "public String getFieldName()", "class_method_signature": "BaseColumnFieldDiffImpl.getFieldName()", "testcase": false, "constructor": false}, {"identifier": "setFieldName", "parameters": "( String fieldName )", "modifiers": "public", "return": "void", "signature": "void setFieldName( String fieldName )", "full_signature": "public void setFieldName( String fieldName )", "class_method_signature": "BaseColumnFieldDiffImpl.setFieldName( String fieldName )", "testcase": false, "constructor": false}, {"identifier": "getOldValue", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getOldValue()", "full_signature": "public Object getOldValue()", "class_method_signature": "BaseColumnFieldDiffImpl.getOldValue()", "testcase": false, "constructor": false}, {"identifier": "setOldValue", "parameters": "( Object oldValue )", "modifiers": "public", "return": "void", "signature": "void setOldValue( Object oldValue )", "full_signature": "public void setOldValue( Object oldValue )", "class_method_signature": "BaseColumnFieldDiffImpl.setOldValue( Object oldValue )", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getValue()", "full_signature": "public Object getValue()", "class_method_signature": "BaseColumnFieldDiffImpl.getValue()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "( Object newValue )", "modifiers": "public", "return": "void", "signature": "void setValue( Object newValue )", "full_signature": "public void setValue( Object newValue )", "class_method_signature": "BaseColumnFieldDiffImpl.setValue( Object newValue )", "testcase": false, "constructor": false}, {"identifier": "hasChanged", "parameters": "( String fieldName,\n                                      List<BaseColumnFieldDiff> source )", "modifiers": "public static", "return": "boolean", "signature": "boolean hasChanged( String fieldName,\n                                      List<BaseColumnFieldDiff> source )", "full_signature": "public static boolean hasChanged( String fieldName,\n                                      List<BaseColumnFieldDiff> source )", "class_method_signature": "BaseColumnFieldDiffImpl.hasChanged( String fieldName,\n                                      List<BaseColumnFieldDiff> source )", "testcase": false, "constructor": false}, {"identifier": "getDiff", "parameters": "( String fieldName,\n                                               List<BaseColumnFieldDiff> source )", "modifiers": "public static", "return": "BaseColumnFieldDiff", "signature": "BaseColumnFieldDiff getDiff( String fieldName,\n                                               List<BaseColumnFieldDiff> source )", "full_signature": "public static BaseColumnFieldDiff getDiff( String fieldName,\n                                               List<BaseColumnFieldDiff> source )", "class_method_signature": "BaseColumnFieldDiffImpl.getDiff( String fieldName,\n                                               List<BaseColumnFieldDiff> source )", "testcase": false, "constructor": false}, {"identifier": "isEqualOrNull", "parameters": "( Object s1,\n                                         Object s2 )", "modifiers": "public static", "return": "boolean", "signature": "boolean isEqualOrNull( Object s1,\n                                         Object s2 )", "full_signature": "public static boolean isEqualOrNull( Object s1,\n                                         Object s2 )", "class_method_signature": "BaseColumnFieldDiffImpl.isEqualOrNull( Object s1,\n                                         Object s2 )", "testcase": false, "constructor": false}, {"identifier": "isEqualOrNull", "parameters": "( final DTCellValue52 dcv1,\n                                         final DTCellValue52 dcv2 )", "modifiers": "public static", "return": "boolean", "signature": "boolean isEqualOrNull( final DTCellValue52 dcv1,\n                                         final DTCellValue52 dcv2 )", "full_signature": "public static boolean isEqualOrNull( final DTCellValue52 dcv1,\n                                         final DTCellValue52 dcv2 )", "class_method_signature": "BaseColumnFieldDiffImpl.isEqualOrNull( final DTCellValue52 dcv1,\n                                         final DTCellValue52 dcv2 )", "testcase": false, "constructor": false}, {"identifier": "isEqualOrNull", "parameters": "( List s1,\n                                         List s2 )", "modifiers": "public static", "return": "boolean", "signature": "boolean isEqualOrNull( List s1,\n                                         List s2 )", "full_signature": "public static boolean isEqualOrNull( List s1,\n                                         List s2 )", "class_method_signature": "BaseColumnFieldDiffImpl.isEqualOrNull( List s1,\n                                         List s2 )", "testcase": false, "constructor": false}, {"identifier": "isEqualOrNull", "parameters": "( Map s1,\n                                         Map s2 )", "modifiers": "public static", "return": "boolean", "signature": "boolean isEqualOrNull( Map s1,\n                                         Map s2 )", "full_signature": "public static boolean isEqualOrNull( Map s1,\n                                         Map s2 )", "class_method_signature": "BaseColumnFieldDiffImpl.isEqualOrNull( Map s1,\n                                         Map s2 )", "testcase": false, "constructor": false}], "file": "drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/BaseColumnFieldDiffImpl.java"}, "focal_method": {"identifier": "isEqualOrNull", "parameters": "( Object s1,\n                                         Object s2 )", "modifiers": "public static", "return": "boolean", "body": "public static boolean isEqualOrNull( Object s1,\n                                         Object s2 ) {\n        if ( s1 == null\n                && s2 == null ) {\n            return true;\n        } else if ( s1 != null\n                && s2 != null\n                && s1.equals( s2 ) ) {\n            return true;\n        }\n        return false;\n    }", "signature": "boolean isEqualOrNull( Object s1,\n                                         Object s2 )", "full_signature": "public static boolean isEqualOrNull( Object s1,\n                                         Object s2 )", "class_method_signature": "BaseColumnFieldDiffImpl.isEqualOrNull( Object s1,\n                                         Object s2 )", "testcase": false, "constructor": false, "invocations": ["equals"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}