{"test_class": {"identifier": "AnalyticsUtilsTest", "superclass": "extends DhisConvenienceTest", "interfaces": "", "fields": [], "file": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/util/AnalyticsUtilsTest.java"}, "test_case": {"identifier": "testGetDataValueSetFromGrid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDataValueSetFromGrid()\n    {\n        Grid grid = new ListGrid();\n\n        grid.addHeader( new GridHeader( DimensionalObject.DATA_X_DIM_ID ) );\n        grid.addHeader( new GridHeader( DimensionalObject.ORGUNIT_DIM_ID ) );\n        grid.addHeader( new GridHeader( DimensionalObject.PERIOD_DIM_ID ) );\n        grid.addHeader( new GridHeader( DimensionalObject.CATEGORYOPTIONCOMBO_DIM_ID ) );\n        grid.addHeader( new GridHeader( DimensionalObject.ATTRIBUTEOPTIONCOMBO_DIM_ID ) );\n        grid.addHeader( new GridHeader( VALUE_ID, VALUE_HEADER_NAME, ValueType.NUMBER, Double.class.getName(), false, false ) );\n\n        grid.addRow().addValuesAsList( Lists.newArrayList( \"dxA\", \"ouA\", \"peA\", \"coA\", \"aoA\", 1d ) );\n        grid.addRow().addValuesAsList( Lists.newArrayList( \"dxA\", \"ouA\", \"peB\", null, null, 2d ) );\n        grid.addRow().addValuesAsList( Lists.newArrayList( \"dxA\", \"ouB\", \"peA\", null, null, 3d ) );\n        grid.addRow().addValuesAsList( Lists.newArrayList( \"dxA\", \"ouB\", \"peB\", null, null, 4d ) );\n        grid.addRow().addValuesAsList( Lists.newArrayList( \"dxB\", \"ouA\", \"peA\", \"coA\", null, 5d ) );\n        grid.addRow().addValuesAsList( Lists.newArrayList( \"dxB\", \"ouA\", \"peB\", \"coA\", \"aoB\", 6d ) );\n        grid.addRow().addValuesAsList( Lists.newArrayList( \"dxC\", \"ouA\", \"peA\", null, \"aoA\", 7 ) );\n        grid.addRow().addValuesAsList( Lists.newArrayList( \"dxC\", \"ouA\", \"peB\", null, null, 8d ) );\n        grid.addRow().addValuesAsList( Lists.newArrayList( \"dxD\", \"ouA\", \"peA\", \"coB\", null, 9d ) );\n        grid.addRow().addValuesAsList( Lists.newArrayList( \"dxE\", \"ouA\", \"peB\", null, null, 10 ) );\n\n        DataValueSet dvs = AnalyticsUtils.getDataValueSetFromGrid( DataQueryParams.newBuilder().build(), grid );\n\n        assertNotNull( dvs );\n        assertNotNull( dvs.getDataValues() );\n        assertEquals( 10, dvs.getDataValues().size() );\n\n        assertEquals( \"dxA\", dvs.getDataValues().get( 1 ).getDataElement() );\n        assertEquals( \"ouA\", dvs.getDataValues().get( 1 ).getOrgUnit() );\n        assertEquals( \"peB\", dvs.getDataValues().get( 1 ).getPeriod() );\n        assertNull( dvs.getDataValues().get( 1 ).getCategoryOptionCombo() );\n        assertNull( dvs.getDataValues().get( 1 ).getAttributeOptionCombo() );\n        assertEquals( \"2.0\", dvs.getDataValues().get( 1 ).getValue() );\n\n        assertEquals( \"dxB\", dvs.getDataValues().get( 4 ).getDataElement() );\n        assertEquals( \"ouA\", dvs.getDataValues().get( 4 ).getOrgUnit() );\n        assertEquals( \"peA\", dvs.getDataValues().get( 4 ).getPeriod() );\n        assertEquals( \"coA\", dvs.getDataValues().get( 4 ).getCategoryOptionCombo() );\n        assertNull( dvs.getDataValues().get( 4 ).getAttributeOptionCombo() );\n        assertEquals( \"5.0\", dvs.getDataValues().get( 4 ).getValue() );\n\n        assertEquals( \"dxC\", dvs.getDataValues().get( 6 ).getDataElement() );\n        assertEquals( \"ouA\", dvs.getDataValues().get( 6 ).getOrgUnit() );\n        assertEquals( \"peA\", dvs.getDataValues().get( 6 ).getPeriod() );\n        assertNull( dvs.getDataValues().get( 6 ).getCategoryOptionCombo() );\n        assertEquals( \"aoA\", dvs.getDataValues().get( 6 ).getAttributeOptionCombo() );\n        assertEquals( \"7\", dvs.getDataValues().get( 6 ).getValue() );\n\n        assertEquals( \"dxD\", dvs.getDataValues().get( 8 ).getDataElement() );\n        assertEquals( \"ouA\", dvs.getDataValues().get( 8 ).getOrgUnit() );\n        assertEquals( \"peA\", dvs.getDataValues().get( 8 ).getPeriod() );\n        assertEquals( \"coB\", dvs.getDataValues().get( 8 ).getCategoryOptionCombo() );\n        assertNull( dvs.getDataValues().get( 8 ).getAttributeOptionCombo() );\n        assertEquals( \"9.0\", dvs.getDataValues().get( 8 ).getValue() );\n\n        assertEquals( \"dxE\", dvs.getDataValues().get( 9 ).getDataElement() );\n        assertEquals( \"ouA\", dvs.getDataValues().get( 9 ).getOrgUnit() );\n        assertEquals( \"peB\", dvs.getDataValues().get( 9 ).getPeriod() );\n        assertNull( dvs.getDataValues().get( 9 ).getCategoryOptionCombo() );\n        assertNull( dvs.getDataValues().get( 9 ).getAttributeOptionCombo() );\n        assertEquals( \"10\", dvs.getDataValues().get( 9 ).getValue() );\n    }", "signature": "void testGetDataValueSetFromGrid()", "full_signature": "@Test public void testGetDataValueSetFromGrid()", "class_method_signature": "AnalyticsUtilsTest.testGetDataValueSetFromGrid()", "testcase": true, "constructor": false, "invocations": ["addHeader", "addHeader", "addHeader", "addHeader", "addHeader", "addHeader", "getName", "addValuesAsList", "addRow", "newArrayList", "addValuesAsList", "addRow", "newArrayList", "addValuesAsList", "addRow", "newArrayList", "addValuesAsList", "addRow", "newArrayList", "addValuesAsList", "addRow", "newArrayList", "addValuesAsList", "addRow", "newArrayList", "addValuesAsList", "addRow", "newArrayList", "addValuesAsList", "addRow", "newArrayList", "addValuesAsList", "addRow", "newArrayList", "addValuesAsList", "addRow", "newArrayList", "getDataValueSetFromGrid", "build", "newBuilder", "assertNotNull", "assertNotNull", "getDataValues", "assertEquals", "size", "getDataValues", "assertEquals", "getDataElement", "get", "getDataValues", "assertEquals", "getOrgUnit", "get", "getDataValues", "assertEquals", "getPeriod", "get", "getDataValues", "assertNull", "getCategoryOptionCombo", "get", "getDataValues", "assertNull", "getAttributeOptionCombo", "get", "getDataValues", "assertEquals", "getValue", "get", "getDataValues", "assertEquals", "getDataElement", "get", "getDataValues", "assertEquals", "getOrgUnit", "get", "getDataValues", "assertEquals", "getPeriod", "get", "getDataValues", "assertEquals", "getCategoryOptionCombo", "get", "getDataValues", "assertNull", "getAttributeOptionCombo", "get", "getDataValues", "assertEquals", "getValue", "get", "getDataValues", "assertEquals", "getDataElement", "get", "getDataValues", "assertEquals", "getOrgUnit", "get", "getDataValues", "assertEquals", "getPeriod", "get", "getDataValues", "assertNull", "getCategoryOptionCombo", "get", "getDataValues", "assertEquals", "getAttributeOptionCombo", "get", "getDataValues", "assertEquals", "getValue", "get", "getDataValues", "assertEquals", "getDataElement", "get", "getDataValues", "assertEquals", "getOrgUnit", "get", "getDataValues", "assertEquals", "getPeriod", "get", "getDataValues", "assertEquals", "getCategoryOptionCombo", "get", "getDataValues", "assertNull", "getAttributeOptionCombo", "get", "getDataValues", "assertEquals", "getValue", "get", "getDataValues", "assertEquals", "getDataElement", "get", "getDataValues", "assertEquals", "getOrgUnit", "get", "getDataValues", "assertEquals", "getPeriod", "get", "getDataValues", "assertNull", "getCategoryOptionCombo", "get", "getDataValues", "assertNull", "getAttributeOptionCombo", "get", "getDataValues", "assertEquals", "getValue", "get", "getDataValues"]}, "focal_class": {"identifier": "AnalyticsUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DECIMALS_NO_ROUNDING = 10;", "modifier": "private static final", "type": "int", "declarator": "DECIMALS_NO_ROUNDING = 10", "var_name": "DECIMALS_NO_ROUNDING"}, {"original_string": "private static final String KEY_AGG_VALUE = \"[aggregated]\";", "modifier": "private static final", "type": "String", "declarator": "KEY_AGG_VALUE = \"[aggregated]\"", "var_name": "KEY_AGG_VALUE"}, {"original_string": "private static final Pattern OU_LEVEL_PATTERN = Pattern.compile( DataQueryParams.PREFIX_ORG_UNIT_LEVEL + \"(\\\\d+)\" );", "modifier": "private static final", "type": "Pattern", "declarator": "OU_LEVEL_PATTERN = Pattern.compile( DataQueryParams.PREFIX_ORG_UNIT_LEVEL + \"(\\\\d+)\" )", "var_name": "OU_LEVEL_PATTERN"}, {"original_string": "public static final String ERR_MSG_TABLE_NOT_EXISTING = \"Query failed, likely because the requested analytics table does not exist\";", "modifier": "public static final", "type": "String", "declarator": "ERR_MSG_TABLE_NOT_EXISTING = \"Query failed, likely because the requested analytics table does not exist\"", "var_name": "ERR_MSG_TABLE_NOT_EXISTING"}], "methods": [{"identifier": "getDebugDataSql", "parameters": "( DataQueryParams params )", "modifiers": "public static", "return": "String", "signature": "String getDebugDataSql( DataQueryParams params )", "full_signature": "public static String getDebugDataSql( DataQueryParams params )", "class_method_signature": "AnalyticsUtils.getDebugDataSql( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getByDataDimensionItemType", "parameters": "( DataDimensionItemType itemType, List<DimensionalItemObject> dataDimensionOptions )", "modifiers": "public static", "return": "List<DimensionalItemObject>", "signature": "List<DimensionalItemObject> getByDataDimensionItemType( DataDimensionItemType itemType, List<DimensionalItemObject> dataDimensionOptions )", "full_signature": "public static List<DimensionalItemObject> getByDataDimensionItemType( DataDimensionItemType itemType, List<DimensionalItemObject> dataDimensionOptions )", "class_method_signature": "AnalyticsUtils.getByDataDimensionItemType( DataDimensionItemType itemType, List<DimensionalItemObject> dataDimensionOptions )", "testcase": false, "constructor": false}, {"identifier": "getRoundedValue", "parameters": "( DataQueryParams params, Integer decimals, Double value )", "modifiers": "public static", "return": "Number", "signature": "Number getRoundedValue( DataQueryParams params, Integer decimals, Double value )", "full_signature": "public static Number getRoundedValue( DataQueryParams params, Integer decimals, Double value )", "class_method_signature": "AnalyticsUtils.getRoundedValue( DataQueryParams params, Integer decimals, Double value )", "testcase": false, "constructor": false}, {"identifier": "getRoundedValueObject", "parameters": "( DataQueryParams params, Object value )", "modifiers": "public static", "return": "Object", "signature": "Object getRoundedValueObject( DataQueryParams params, Object value )", "full_signature": "public static Object getRoundedValueObject( DataQueryParams params, Object value )", "class_method_signature": "AnalyticsUtils.getRoundedValueObject( DataQueryParams params, Object value )", "testcase": false, "constructor": false}, {"identifier": "getColumnType", "parameters": "( ValueType valueType, boolean spatialSupport )", "modifiers": "public static", "return": "ColumnDataType", "signature": "ColumnDataType getColumnType( ValueType valueType, boolean spatialSupport )", "full_signature": "public static ColumnDataType getColumnType( ValueType valueType, boolean spatialSupport )", "class_method_signature": "AnalyticsUtils.getColumnType( ValueType valueType, boolean spatialSupport )", "testcase": false, "constructor": false}, {"identifier": "convertDxToOperand", "parameters": "( Map<String, T> valueMap, TotalType totalType )", "modifiers": "public static", "return": "Map<String, T>", "signature": "Map<String, T> convertDxToOperand( Map<String, T> valueMap, TotalType totalType )", "full_signature": "public static Map<String, T> convertDxToOperand( Map<String, T> valueMap, TotalType totalType )", "class_method_signature": "AnalyticsUtils.convertDxToOperand( Map<String, T> valueMap, TotalType totalType )", "testcase": false, "constructor": false}, {"identifier": "getDoubleMap", "parameters": "( Map<String, Object> map )", "modifiers": "public static", "return": "Map<String, Double>", "signature": "Map<String, Double> getDoubleMap( Map<String, Object> map )", "full_signature": "public static Map<String, Double> getDoubleMap( Map<String, Object> map )", "class_method_signature": "AnalyticsUtils.getDoubleMap( Map<String, Object> map )", "testcase": false, "constructor": false}, {"identifier": "getAggregatedDataValueMapping", "parameters": "( Grid grid )", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> getAggregatedDataValueMapping( Grid grid )", "full_signature": "public static Map<String, Object> getAggregatedDataValueMapping( Grid grid )", "class_method_signature": "AnalyticsUtils.getAggregatedDataValueMapping( Grid grid )", "testcase": false, "constructor": false}, {"identifier": "getDataValueSetFromGrid", "parameters": "( DataQueryParams params, Grid grid )", "modifiers": "public static", "return": "DataValueSet", "signature": "DataValueSet getDataValueSetFromGrid( DataQueryParams params, Grid grid )", "full_signature": "public static DataValueSet getDataValueSetFromGrid( DataQueryParams params, Grid grid )", "class_method_signature": "AnalyticsUtils.getDataValueSetFromGrid( DataQueryParams params, Grid grid )", "testcase": false, "constructor": false}, {"identifier": "handleGridForDataValueSet", "parameters": "( DataQueryParams params, Grid grid )", "modifiers": "public static", "return": "void", "signature": "void handleGridForDataValueSet( DataQueryParams params, Grid grid )", "full_signature": "public static void handleGridForDataValueSet( DataQueryParams params, Grid grid )", "class_method_signature": "AnalyticsUtils.handleGridForDataValueSet( DataQueryParams params, Grid grid )", "testcase": false, "constructor": false}, {"identifier": "getIntegerOrValue", "parameters": "( Object value, DimensionalItemObject item )", "modifiers": "public static", "return": "Object", "signature": "Object getIntegerOrValue( Object value, DimensionalItemObject item )", "full_signature": "public static Object getIntegerOrValue( Object value, DimensionalItemObject item )", "class_method_signature": "AnalyticsUtils.getIntegerOrValue( Object value, DimensionalItemObject item )", "testcase": false, "constructor": false}, {"identifier": "getDimensionalItemObjectMap", "parameters": "( DataQueryParams params )", "modifiers": "public static", "return": "Map<String, DimensionalItemObject>", "signature": "Map<String, DimensionalItemObject> getDimensionalItemObjectMap( DataQueryParams params )", "full_signature": "public static Map<String, DimensionalItemObject> getDimensionalItemObjectMap( DataQueryParams params )", "class_method_signature": "AnalyticsUtils.getDimensionalItemObjectMap( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getDimensionItemNameMap", "parameters": "( DataQueryParams params )", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getDimensionItemNameMap( DataQueryParams params )", "full_signature": "public static Map<String, String> getDimensionItemNameMap( DataQueryParams params )", "class_method_signature": "AnalyticsUtils.getDimensionItemNameMap( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getDimensionMetadataItemMap", "parameters": "( DataQueryParams params )", "modifiers": "public static", "return": "Map<String, MetadataItem>", "signature": "Map<String, MetadataItem> getDimensionMetadataItemMap( DataQueryParams params )", "full_signature": "public static Map<String, MetadataItem> getDimensionMetadataItemMap( DataQueryParams params )", "class_method_signature": "AnalyticsUtils.getDimensionMetadataItemMap( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getCocNameMap", "parameters": "( DataQueryParams params )", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getCocNameMap( DataQueryParams params )", "full_signature": "public static Map<String, String> getCocNameMap( DataQueryParams params )", "class_method_signature": "AnalyticsUtils.getCocNameMap( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getUidDisplayPropertyMap", "parameters": "( List<QueryItem> queryItems, DisplayProperty displayProperty )", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getUidDisplayPropertyMap( List<QueryItem> queryItems, DisplayProperty displayProperty )", "full_signature": "public static Map<String, String> getUidDisplayPropertyMap( List<QueryItem> queryItems, DisplayProperty displayProperty )", "class_method_signature": "AnalyticsUtils.getUidDisplayPropertyMap( List<QueryItem> queryItems, DisplayProperty displayProperty )", "testcase": false, "constructor": false}, {"identifier": "getUidDisplayPropertyMap", "parameters": "( List<DimensionalObject> dimensions, boolean hierarchyMeta, DisplayProperty displayProperty )", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getUidDisplayPropertyMap( List<DimensionalObject> dimensions, boolean hierarchyMeta, DisplayProperty displayProperty )", "full_signature": "public static Map<String, String> getUidDisplayPropertyMap( List<DimensionalObject> dimensions, boolean hierarchyMeta, DisplayProperty displayProperty )", "class_method_signature": "AnalyticsUtils.getUidDisplayPropertyMap( List<DimensionalObject> dimensions, boolean hierarchyMeta, DisplayProperty displayProperty )", "testcase": false, "constructor": false}, {"identifier": "periodIsOutsideApprovalMaxYears", "parameters": "( Integer year, Integer maxYears )", "modifiers": "public static", "return": "boolean", "signature": "boolean periodIsOutsideApprovalMaxYears( Integer year, Integer maxYears )", "full_signature": "public static boolean periodIsOutsideApprovalMaxYears( Integer year, Integer maxYears )", "class_method_signature": "AnalyticsUtils.periodIsOutsideApprovalMaxYears( Integer year, Integer maxYears )", "testcase": false, "constructor": false}, {"identifier": "getLevelFromOrgUnitDimensionName", "parameters": "( String dimensionName )", "modifiers": "public static", "return": "int", "signature": "int getLevelFromOrgUnitDimensionName( String dimensionName )", "full_signature": "public static int getLevelFromOrgUnitDimensionName( String dimensionName )", "class_method_signature": "AnalyticsUtils.getLevelFromOrgUnitDimensionName( String dimensionName )", "testcase": false, "constructor": false}, {"identifier": "isTableLayout", "parameters": "( List<String> columns, List<String> rows )", "modifiers": "public static", "return": "boolean", "signature": "boolean isTableLayout( List<String> columns, List<String> rows )", "full_signature": "public static boolean isTableLayout( List<String> columns, List<String> rows )", "class_method_signature": "AnalyticsUtils.isTableLayout( List<String> columns, List<String> rows )", "testcase": false, "constructor": false}, {"identifier": "calculateYearlyWeightedAverage", "parameters": "( Double year1Value, Double year2Value, Double factor )", "modifiers": "public static", "return": "Double", "signature": "Double calculateYearlyWeightedAverage( Double year1Value, Double year2Value, Double factor )", "full_signature": "public static Double calculateYearlyWeightedAverage( Double year1Value, Double year2Value, Double factor )", "class_method_signature": "AnalyticsUtils.calculateYearlyWeightedAverage( Double year1Value, Double year2Value, Double factor )", "testcase": false, "constructor": false}, {"identifier": "getBaseMonth", "parameters": "( PeriodType periodType )", "modifiers": "public static", "return": "Double", "signature": "Double getBaseMonth( PeriodType periodType )", "full_signature": "public static Double getBaseMonth( PeriodType periodType )", "class_method_signature": "AnalyticsUtils.getBaseMonth( PeriodType periodType )", "testcase": false, "constructor": false}, {"identifier": "throwIllegalQueryEx", "parameters": "( ErrorCode errorCode, Object... args )", "modifiers": "public static", "return": "void", "signature": "void throwIllegalQueryEx( ErrorCode errorCode, Object... args )", "full_signature": "public static void throwIllegalQueryEx( ErrorCode errorCode, Object... args )", "class_method_signature": "AnalyticsUtils.throwIllegalQueryEx( ErrorCode errorCode, Object... args )", "testcase": false, "constructor": false}, {"identifier": "isPeriodInPeriods", "parameters": "( String period, List<DimensionalItemObject> periods )", "modifiers": "public static", "return": "boolean", "signature": "boolean isPeriodInPeriods( String period, List<DimensionalItemObject> periods )", "full_signature": "public static boolean isPeriodInPeriods( String period, List<DimensionalItemObject> periods )", "class_method_signature": "AnalyticsUtils.isPeriodInPeriods( String period, List<DimensionalItemObject> periods )", "testcase": false, "constructor": false}, {"identifier": "findDimensionalItems", "parameters": "( String dimensionIdentifier,\n        List<DimensionalItemObject> items )", "modifiers": "public static", "return": "List<DimensionalItemObject>", "signature": "List<DimensionalItemObject> findDimensionalItems( String dimensionIdentifier,\n        List<DimensionalItemObject> items )", "full_signature": "public static List<DimensionalItemObject> findDimensionalItems( String dimensionIdentifier,\n        List<DimensionalItemObject> items )", "class_method_signature": "AnalyticsUtils.findDimensionalItems( String dimensionIdentifier,\n        List<DimensionalItemObject> items )", "testcase": false, "constructor": false}, {"identifier": "hasPeriod", "parameters": "( List<Object> row, int periodIndex )", "modifiers": "public static", "return": "boolean", "signature": "boolean hasPeriod( List<Object> row, int periodIndex )", "full_signature": "public static boolean hasPeriod( List<Object> row, int periodIndex )", "class_method_signature": "AnalyticsUtils.hasPeriod( List<Object> row, int periodIndex )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/util/AnalyticsUtils.java"}, "focal_method": {"identifier": "getDataValueSetFromGrid", "parameters": "( DataQueryParams params, Grid grid )", "modifiers": "public static", "return": "DataValueSet", "body": "public static DataValueSet getDataValueSetFromGrid( DataQueryParams params, Grid grid )\n    {\n        int dxInx = grid.getIndexOfHeader( DATA_X_DIM_ID );\n        int peInx = grid.getIndexOfHeader( PERIOD_DIM_ID );\n        int ouInx = grid.getIndexOfHeader( ORGUNIT_DIM_ID );\n        int coInx = grid.getIndexOfHeader( CATEGORYOPTIONCOMBO_DIM_ID );\n        int aoInx = grid.getIndexOfHeader( ATTRIBUTEOPTIONCOMBO_DIM_ID );\n        int vlInx = grid.getHeaderWidth() - 1;\n\n        Assert.isTrue( dxInx >= 0, \"Data dimension index must be greater than or equal to zero\" );\n        Assert.isTrue( peInx >= 0, \"Period dimension index must be greater than or equal to zero\" );\n        Assert.isTrue( ouInx >= 0, \"Org unit dimension index must be greater than or equal to zero\" );\n        Assert.isTrue( coInx >= 0, \"Category option combo dimension index must be greater than or equal to zero\" );\n        Assert.isTrue( aoInx >= 0, \"Attribute option combo dimension index must be greater than or equal to zero\" );\n        Assert.isTrue( vlInx >= 0, \"Value index must be greater than or equal to zero\" );\n\n        String created = DateUtils.getMediumDateString();\n\n        DataValueSet dvs = new DataValueSet();\n\n        Set<String> primaryKeys = Sets.newHashSet();\n\n        for ( List<Object> row : grid.getRows() )\n        {\n            DataValue dv = new DataValue();\n\n            Object coc = row.get( coInx );\n            Object aoc = row.get( aoInx );\n\n            dv.setDataElement( String.valueOf( row.get( dxInx ) ) );\n            dv.setPeriod( String.valueOf( row.get( peInx ) ) );\n            dv.setOrgUnit( String.valueOf( row.get( ouInx ) ) );\n            dv.setCategoryOptionCombo( coc != null ? String.valueOf( coc ) : null );\n            dv.setAttributeOptionCombo( aoc != null ? String.valueOf( aoc ) : null );\n            dv.setValue( String.valueOf( row.get( vlInx ) ) );\n            dv.setComment( KEY_AGG_VALUE );\n            dv.setStoredBy( KEY_AGG_VALUE );\n            dv.setCreated( created );\n            dv.setLastUpdated( created );\n\n            if ( !params.isDuplicatesOnly() || !primaryKeys.add( dv.getPrimaryKey() ) )\n            {\n                dvs.getDataValues().add( dv );\n            }\n        }\n\n        return dvs;\n    }", "signature": "DataValueSet getDataValueSetFromGrid( DataQueryParams params, Grid grid )", "full_signature": "public static DataValueSet getDataValueSetFromGrid( DataQueryParams params, Grid grid )", "class_method_signature": "AnalyticsUtils.getDataValueSetFromGrid( DataQueryParams params, Grid grid )", "testcase": false, "constructor": false, "invocations": ["getIndexOfHeader", "getIndexOfHeader", "getIndexOfHeader", "getIndexOfHeader", "getIndexOfHeader", "getHeaderWidth", "isTrue", "isTrue", "isTrue", "isTrue", "isTrue", "isTrue", "getMediumDateString", "newHashSet", "getRows", "get", "get", "setDataElement", "valueOf", "get", "setPeriod", "valueOf", "get", "setOrgUnit", "valueOf", "get", "setCategoryOptionCombo", "valueOf", "setAttributeOptionCombo", "valueOf", "setValue", "valueOf", "get", "setComment", "setStoredBy", "setCreated", "setLastUpdated", "isDuplicatesOnly", "add", "getPrimaryKey", "add", "getDataValues"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}