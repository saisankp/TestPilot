{"test_class": {"identifier": "CSVReaderDataPoolTest", "superclass": "extends AbstractArtefactTest", "interfaces": "", "fields": [], "file": "step-plans/step-plans-base-artefacts/src/test/java/step/datapool/file/CSVReaderDataPoolTest.java"}, "test_case": {"identifier": "testCSVReaderDataPool", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCSVReaderDataPool() {\t\t\n\t\tDataSet<?> pool = getDataPool(\"File.csv\");\n\t\tAssert.assertEquals(\"row12\", ((SimpleStringMap)pool.next().getValue()).get(\"Col2\").toString());\n\t\t// Test empty string\n\t\tAssert.assertEquals(\"\", ((SimpleStringMap)pool.next().getValue()).get(\"Col4\").toString());\n\t\tpool.close();\n\t}", "signature": "void testCSVReaderDataPool()", "full_signature": "@Test public void testCSVReaderDataPool()", "class_method_signature": "CSVReaderDataPoolTest.testCSVReaderDataPool()", "testcase": true, "constructor": false, "invocations": ["getDataPool", "assertEquals", "toString", "get", "getValue", "next", "assertEquals", "toString", "get", "getValue", "next", "close"]}, "focal_class": {"identifier": "CSVReaderDataPool", "superclass": "extends FileReaderDataPool", "interfaces": "", "fields": [{"original_string": "public static final Logger logger = LoggerFactory.getLogger(CSVReaderDataPool.class);", "modifier": "public static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CSVReaderDataPool.class)", "var_name": "logger"}, {"original_string": "protected Vector<String> headers;", "modifier": "protected", "type": "Vector<String>", "declarator": "headers", "var_name": "headers"}, {"original_string": "protected String delimiter;", "modifier": "protected", "type": "String", "declarator": "delimiter", "var_name": "delimiter"}, {"original_string": "protected AtomicBoolean hasChanges = new AtomicBoolean(false);", "modifier": "protected", "type": "AtomicBoolean", "declarator": "hasChanges = new AtomicBoolean(false)", "var_name": "hasChanges"}, {"original_string": "protected File tempFile;", "modifier": "protected", "type": "File", "declarator": "tempFile", "var_name": "tempFile"}, {"original_string": "protected PrintWriter tempFileWriter;", "modifier": "protected", "type": "PrintWriter", "declarator": "tempFileWriter", "var_name": "tempFileWriter"}], "methods": [{"identifier": "CSVReaderDataPool", "parameters": "(CSVDataPool configuration)", "modifiers": "public", "return": "", "signature": " CSVReaderDataPool(CSVDataPool configuration)", "full_signature": "public  CSVReaderDataPool(CSVDataPool configuration)", "class_method_signature": "CSVReaderDataPool.CSVReaderDataPool(CSVDataPool configuration)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "CSVReaderDataPool.init()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "CSVReaderDataPool.close()", "testcase": false, "constructor": false}, {"identifier": "writeRow", "parameters": "(DataPoolRow row)", "modifiers": "@Override public", "return": "void", "signature": "void writeRow(DataPoolRow row)", "full_signature": "@Override public void writeRow(DataPoolRow row)", "class_method_signature": "CSVReaderDataPool.writeRow(DataPoolRow row)", "testcase": false, "constructor": false}, {"identifier": "isWriteQueueSupportEnabled", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isWriteQueueSupportEnabled()", "full_signature": "@Override protected boolean isWriteQueueSupportEnabled()", "class_method_signature": "CSVReaderDataPool.isWriteQueueSupportEnabled()", "testcase": false, "constructor": false}, {"identifier": "isWriteEnabled", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isWriteEnabled()", "full_signature": "private boolean isWriteEnabled()", "class_method_signature": "CSVReaderDataPool.isWriteEnabled()", "testcase": false, "constructor": false}, {"identifier": "postProcess", "parameters": "(String line)", "modifiers": "@Override public", "return": "Object", "signature": "Object postProcess(String line)", "full_signature": "@Override public Object postProcess(String line)", "class_method_signature": "CSVReaderDataPool.postProcess(String line)", "testcase": false, "constructor": false}, {"identifier": "getHeaders", "parameters": "(String readOneLine)", "modifiers": "public", "return": "Vector<String>", "signature": "Vector<String> getHeaders(String readOneLine)", "full_signature": "public Vector<String> getHeaders(String readOneLine)", "class_method_signature": "CSVReaderDataPool.getHeaders(String readOneLine)", "testcase": false, "constructor": false}, {"identifier": "splitCSV", "parameters": "(String readOneLine)", "modifiers": "public", "return": "Vector<String>", "signature": "Vector<String> splitCSV(String readOneLine)", "full_signature": "public Vector<String> splitCSV(String readOneLine)", "class_method_signature": "CSVReaderDataPool.splitCSV(String readOneLine)", "testcase": false, "constructor": false}, {"identifier": "doFirst_", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void doFirst_()", "full_signature": "@Override public void doFirst_()", "class_method_signature": "CSVReaderDataPool.doFirst_()", "testcase": false, "constructor": false}, {"identifier": "addRow", "parameters": "(Object row)", "modifiers": "@Override public", "return": "void", "signature": "void addRow(Object row)", "full_signature": "@Override public void addRow(Object row)", "class_method_signature": "CSVReaderDataPool.addRow(Object row)", "testcase": false, "constructor": false}], "file": "step-plans/step-plans-base-artefacts/src/main/java/step/datapool/file/CSVReaderDataPool.java"}, "focal_method": {"identifier": "CSVReaderDataPool", "parameters": "(CSVDataPool configuration)", "modifiers": "public", "return": "", "body": "public CSVReaderDataPool(CSVDataPool configuration) {\n\t\tsuper(configuration);\n\t\tthis.delimiter = configuration.getDelimiter().get();\n\t}", "signature": " CSVReaderDataPool(CSVDataPool configuration)", "full_signature": "public  CSVReaderDataPool(CSVDataPool configuration)", "class_method_signature": "CSVReaderDataPool.CSVReaderDataPool(CSVDataPool configuration)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}