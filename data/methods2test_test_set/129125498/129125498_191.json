{"test_class": {"identifier": "DataInitializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private DataInitializer initializerUnderTest;", "modifier": "@InjectMocks\n    private", "type": "DataInitializer", "declarator": "initializerUnderTest", "var_name": "initializerUnderTest"}, {"original_string": "@Mock\n    private DataSource dataSource;", "modifier": "@Mock\n    private", "type": "DataSource", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "@Mock\n    private Config config;", "modifier": "@Mock\n    private", "type": "Config", "declarator": "config", "var_name": "config"}, {"original_string": "@Mock\n    private ThrottleGate throttleGate;", "modifier": "@Mock\n    private", "type": "ThrottleGate", "declarator": "throttleGate", "var_name": "throttleGate"}, {"original_string": "@Mock\n    private ForecastingDetector seasonalNaiveDetector;", "modifier": "@Mock\n    private", "type": "ForecastingDetector", "declarator": "seasonalNaiveDetector", "var_name": "seasonalNaiveDetector"}, {"original_string": "@Mock\n    private SeasonalPointForecaster seasonalPointForecaster;", "modifier": "@Mock\n    private", "type": "SeasonalPointForecaster", "declarator": "seasonalPointForecaster", "var_name": "seasonalPointForecaster"}, {"original_string": "private DetectorMapping detectorMapping;", "modifier": "private", "type": "DetectorMapping", "declarator": "detectorMapping", "var_name": "detectorMapping"}, {"original_string": "private MappedMetricData mappedMetricData;", "modifier": "private", "type": "MappedMetricData", "declarator": "mappedMetricData", "var_name": "mappedMetricData"}, {"original_string": "private List<DataSourceResult> dataSourceResults;", "modifier": "private", "type": "List<DataSourceResult>", "declarator": "dataSourceResults", "var_name": "dataSourceResults"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/source/data/initializer/DataInitializerTest.java"}, "test_case": {"identifier": "testInitializeDetectorWithDuplicateMetric", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitializeDetectorWithDuplicateMetric() {\n        when(throttleGate.isOpen()).thenReturn(true);\n        doThrow(new MetricDeliveryDuplicateException(\"Metric with dodgy timestamp\")).when(seasonalPointForecaster).forecast(any(MetricData.class));\n        initializerUnderTest.initializeDetector(mappedMetricData, seasonalNaiveDetector, detectorMapping);\n        // Assertion here is that exception is swallowed\n    }", "signature": "void testInitializeDetectorWithDuplicateMetric()", "full_signature": "@Test public void testInitializeDetectorWithDuplicateMetric()", "class_method_signature": "DataInitializerTest.testInitializeDetectorWithDuplicateMetric()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isOpen", "forecast", "when", "doThrow", "any", "initializeDetector"]}, "focal_class": {"identifier": "DataInitializer", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String BASE_URI = \"graphite-base-uri\";", "modifier": "public static final", "type": "String", "declarator": "BASE_URI = \"graphite-base-uri\"", "var_name": "BASE_URI"}, {"original_string": "public static final String DATA_RETRIEVAL_TAG_KEY = \"graphite-data-retrieval-key\";", "modifier": "public static final", "type": "String", "declarator": "DATA_RETRIEVAL_TAG_KEY = \"graphite-data-retrieval-key\"", "var_name": "DATA_RETRIEVAL_TAG_KEY"}, {"original_string": "public static final String THROTTLE_GATE_LIKELIHOOD = \"throttle-gate-likelihood\";", "modifier": "public static final", "type": "String", "declarator": "THROTTLE_GATE_LIKELIHOOD = \"throttle-gate-likelihood\"", "var_name": "THROTTLE_GATE_LIKELIHOOD"}, {"original_string": "public static final String DEFAULT_GRAPHITE_FUNCTION = \"seriesByTag\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_GRAPHITE_FUNCTION = \"seriesByTag\"", "var_name": "DEFAULT_GRAPHITE_FUNCTION"}, {"original_string": "private final String dataRetrievalTagKey;", "modifier": "private final", "type": "String", "declarator": "dataRetrievalTagKey", "var_name": "dataRetrievalTagKey"}, {"original_string": "private final DataSource dataSource;", "modifier": "private final", "type": "DataSource", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "private final ThrottleGate throttleGate;", "modifier": "private final", "type": "ThrottleGate", "declarator": "throttleGate", "var_name": "throttleGate"}], "methods": [{"identifier": "DataInitializer", "parameters": "(Config config, ThrottleGate throttleGate, DataSource dataSource)", "modifiers": "public", "return": "", "signature": " DataInitializer(Config config, ThrottleGate throttleGate, DataSource dataSource)", "full_signature": "public  DataInitializer(Config config, ThrottleGate throttleGate, DataSource dataSource)", "class_method_signature": "DataInitializer.DataInitializer(Config config, ThrottleGate throttleGate, DataSource dataSource)", "testcase": false, "constructor": true}, {"identifier": "initializeDetector", "parameters": "(MappedMetricData mappedMetricData, Detector detector, DetectorMapping detectorMapping)", "modifiers": "public", "return": "void", "signature": "void initializeDetector(MappedMetricData mappedMetricData, Detector detector, DetectorMapping detectorMapping)", "full_signature": "public void initializeDetector(MappedMetricData mappedMetricData, Detector detector, DetectorMapping detectorMapping)", "class_method_signature": "DataInitializer.initializeDetector(MappedMetricData mappedMetricData, Detector detector, DetectorMapping detectorMapping)", "testcase": false, "constructor": false}, {"identifier": "isSeasonalNaiveDetector", "parameters": "(Detector detector)", "modifiers": "private", "return": "boolean", "signature": "boolean isSeasonalNaiveDetector(Detector detector)", "full_signature": "private boolean isSeasonalNaiveDetector(Detector detector)", "class_method_signature": "DataInitializer.isSeasonalNaiveDetector(Detector detector)", "testcase": false, "constructor": false}, {"identifier": "initializeForecastingDetector", "parameters": "(MappedMetricData mappedMetricData, ForecastingDetector forecastingDetector, DetectorMapping detectorMapping)", "modifiers": "private", "return": "void", "signature": "void initializeForecastingDetector(MappedMetricData mappedMetricData, ForecastingDetector forecastingDetector, DetectorMapping detectorMapping)", "full_signature": "private void initializeForecastingDetector(MappedMetricData mappedMetricData, ForecastingDetector forecastingDetector, DetectorMapping detectorMapping)", "class_method_signature": "DataInitializer.initializeForecastingDetector(MappedMetricData mappedMetricData, ForecastingDetector forecastingDetector, DetectorMapping detectorMapping)", "testcase": false, "constructor": false}, {"identifier": "getHistoricalData", "parameters": "(MappedMetricData mappedMetricData, ForecastingDetector forecastingDetector, DetectorMapping detectorMapping)", "modifiers": "private", "return": "List<DataSourceResult>", "signature": "List<DataSourceResult> getHistoricalData(MappedMetricData mappedMetricData, ForecastingDetector forecastingDetector, DetectorMapping detectorMapping)", "full_signature": "private List<DataSourceResult> getHistoricalData(MappedMetricData mappedMetricData, ForecastingDetector forecastingDetector, DetectorMapping detectorMapping)", "class_method_signature": "DataInitializer.getHistoricalData(MappedMetricData mappedMetricData, ForecastingDetector forecastingDetector, DetectorMapping detectorMapping)", "testcase": false, "constructor": false}, {"identifier": "populateForecastingDetectorWithHistoricalData", "parameters": "(ForecastingDetector forecastingDetector, List<DataSourceResult> data, MetricDefinition metricDefinition)", "modifiers": "private", "return": "void", "signature": "void populateForecastingDetectorWithHistoricalData(ForecastingDetector forecastingDetector, List<DataSourceResult> data, MetricDefinition metricDefinition)", "full_signature": "private void populateForecastingDetectorWithHistoricalData(ForecastingDetector forecastingDetector, List<DataSourceResult> data, MetricDefinition metricDefinition)", "class_method_signature": "DataInitializer.populateForecastingDetectorWithHistoricalData(ForecastingDetector forecastingDetector, List<DataSourceResult> data, MetricDefinition metricDefinition)", "testcase": false, "constructor": false}, {"identifier": "dataSourceResultToMetricData", "parameters": "(DataSourceResult dataSourceResult, MetricDefinition metricDefinition)", "modifiers": "private", "return": "MetricData", "signature": "MetricData dataSourceResultToMetricData(DataSourceResult dataSourceResult, MetricDefinition metricDefinition)", "full_signature": "private MetricData dataSourceResultToMetricData(DataSourceResult dataSourceResult, MetricDefinition metricDefinition)", "class_method_signature": "DataInitializer.dataSourceResultToMetricData(DataSourceResult dataSourceResult, MetricDefinition metricDefinition)", "testcase": false, "constructor": false}, {"identifier": "getTarget", "parameters": "(MappedMetricData mappedMetricData, DetectorMapping detectorMapping)", "modifiers": "private", "return": "String", "signature": "String getTarget(MappedMetricData mappedMetricData, DetectorMapping detectorMapping)", "full_signature": "private String getTarget(MappedMetricData mappedMetricData, DetectorMapping detectorMapping)", "class_method_signature": "DataInitializer.getTarget(MappedMetricData mappedMetricData, DetectorMapping detectorMapping)", "testcase": false, "constructor": false}, {"identifier": "extractTagsFromExpression", "parameters": "(ExpressionTree expression)", "modifiers": "private", "return": "String", "signature": "String extractTagsFromExpression(ExpressionTree expression)", "full_signature": "private String extractTagsFromExpression(ExpressionTree expression)", "class_method_signature": "DataInitializer.extractTagsFromExpression(ExpressionTree expression)", "testcase": false, "constructor": false}, {"identifier": "convertHashMapToQueryString", "parameters": "(Map<String, String> mapToConvert)", "modifiers": "private", "return": "String", "signature": "String convertHashMapToQueryString(Map<String, String> mapToConvert)", "full_signature": "private String convertHashMapToQueryString(Map<String, String> mapToConvert)", "class_method_signature": "DataInitializer.convertHashMapToQueryString(Map<String, String> mapToConvert)", "testcase": false, "constructor": false}, {"identifier": "getDefaultTarget", "parameters": "(String dataRetrievalTags)", "modifiers": "private", "return": "String", "signature": "String getDefaultTarget(String dataRetrievalTags)", "full_signature": "private String getDefaultTarget(String dataRetrievalTags)", "class_method_signature": "DataInitializer.getDefaultTarget(String dataRetrievalTags)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/source/data/initializer/DataInitializer.java"}, "focal_method": {"identifier": "initializeDetector", "parameters": "(MappedMetricData mappedMetricData, Detector detector, DetectorMapping detectorMapping)", "modifiers": "public", "return": "void", "body": "public void initializeDetector(MappedMetricData mappedMetricData, Detector detector, DetectorMapping detectorMapping) {\n        // TODO: Forecasting Detector initialisation is currently limited to Seasonal Naive detector and assumes Graphite source\n        if (isSeasonalNaiveDetector(detector)) {\n            if (throttleGate.isOpen()) {\n                log.info(\"Throttle gate is open, initializing data and creating a detector\");\n                val forecastingDetector = (ForecastingDetector) detector;\n                initializeForecastingDetector(mappedMetricData, forecastingDetector, detectorMapping);\n            } else {\n                String message = \"Throttle gate is closed, skipping data initialization\";\n                log.info(message);\n                throw new DetectorDataInitializationThrottledException(message);\n            }\n        }\n    }", "signature": "void initializeDetector(MappedMetricData mappedMetricData, Detector detector, DetectorMapping detectorMapping)", "full_signature": "public void initializeDetector(MappedMetricData mappedMetricData, Detector detector, DetectorMapping detectorMapping)", "class_method_signature": "DataInitializer.initializeDetector(MappedMetricData mappedMetricData, Detector detector, DetectorMapping detectorMapping)", "testcase": false, "constructor": false, "invocations": ["isSeasonalNaiveDetector", "isOpen", "info", "initializeForecastingDetector", "info"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}