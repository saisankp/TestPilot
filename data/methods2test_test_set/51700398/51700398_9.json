{"test_class": {"identifier": "RateUpdaterServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BRE = \"BRE\";", "modifier": "private static final", "type": "String", "declarator": "BRE = \"BRE\"", "var_name": "BRE"}, {"original_string": "@Autowired\n\tprivate LatestRateRepository latestRepo;", "modifier": "@Autowired\n\tprivate", "type": "LatestRateRepository", "declarator": "latestRepo", "var_name": "latestRepo"}, {"original_string": "@Autowired\n\tprivate RateUpdaterService rateUpdaterService;", "modifier": "@Autowired\n\tprivate", "type": "RateUpdaterService", "declarator": "rateUpdaterService", "var_name": "rateUpdaterService"}, {"original_string": "@Autowired\n\tprivate HistoricalRateRepository histoRepo;", "modifier": "@Autowired\n\tprivate", "type": "HistoricalRateRepository", "declarator": "histoRepo", "var_name": "histoRepo"}, {"original_string": "@MockBean\n\tprivate ActiveMQConfig activeMQConfig;", "modifier": "@MockBean\n\tprivate", "type": "ActiveMQConfig", "declarator": "activeMQConfig", "var_name": "activeMQConfig"}], "file": "trading-data-collect/src/test/java/fr/ymanvieu/trading/datacollect/rate/RateUpdaterServiceTest.java"}, "test_case": {"identifier": "testUpdateRates_WithExistingData", "parameters": "()", "modifiers": "@Sql(\"/sql/insert_symbols_bre_usd.sql\") @Sql(\"/sql/insert_rates_bre_usd.sql\") @Test public", "return": "void", "body": "@Sql(\"/sql/insert_symbols_bre_usd.sql\")\n\t@Sql(\"/sql/insert_rates_bre_usd.sql\")\n\t@Test\n\tpublic void testUpdateRates_WithExistingData() {\n\t\t// given\n\t\tList<Quote> quotes = getBrentQuotes();\n\n\t\tHistoricalRate expectedOldLatest = new HistoricalRate(BRE, USD, new BigDecimal(\"55.18\"), parse(\"2015-04-06T02:00:00\"));\n\t\tHistoricalRate expectedAdded = new HistoricalRate(BRE, USD, new BigDecimal(\"57.8\"), parse(\"2015-04-08T02:00:00\"));\n\t\tHistoricalRate expectedNewLatest = new HistoricalRate(BRE, USD, new BigDecimal(\"58.3\"), parse(\"2015-04-09T02:00:00\"));\n\t\tLatestRate expectedNewLatest1 = new LatestRate(BRE, USD, new BigDecimal(\"58.3\"), parse(\"2015-04-09T02:00:00\"));\n\t\tHistoricalRate olderButAdded = new HistoricalRate(BRE, USD, new BigDecimal(\"55.18\"), parse(\"2015-04-02T02:00:00\"));\n\n\t\t// when\n\t\trateUpdaterService.updateRates(quotes);\n\n\t\t// then\n\t\tList<HistoricalRate> hRates = new ArrayList<>(histoRepo.findAll());\n\t\tList<LatestRate> lRates = new ArrayList<>(latestRepo.findAll());\n\n\t\tassertThat(hRates).hasSize(7);\n\t\tassertThat(hRates).containsOnlyOnce(expectedOldLatest, expectedAdded, expectedNewLatest, olderButAdded);\n\n\t\tassertThat(lRates).hasSize(1);\n\t\tassertThat(lRates).containsOnly(expectedNewLatest1);\n\n\t\tverify(activeMQConfig).send(any());\n\t}", "signature": "void testUpdateRates_WithExistingData()", "full_signature": "@Sql(\"/sql/insert_symbols_bre_usd.sql\") @Sql(\"/sql/insert_rates_bre_usd.sql\") @Test public void testUpdateRates_WithExistingData()", "class_method_signature": "RateUpdaterServiceTest.testUpdateRates_WithExistingData()", "testcase": true, "constructor": false, "invocations": ["getBrentQuotes", "parse", "parse", "parse", "parse", "parse", "updateRates", "findAll", "findAll", "hasSize", "assertThat", "containsOnlyOnce", "assertThat", "hasSize", "assertThat", "containsOnly", "assertThat", "send", "verify", "any"]}, "focal_class": {"identifier": "RateUpdaterService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate LatestRateRepository latestRepo;", "modifier": "@Autowired\n\tprivate", "type": "LatestRateRepository", "declarator": "latestRepo", "var_name": "latestRepo"}, {"original_string": "@Autowired\n\tprivate SymbolRepository symbolRepo;", "modifier": "@Autowired\n\tprivate", "type": "SymbolRepository", "declarator": "symbolRepo", "var_name": "symbolRepo"}, {"original_string": "@Autowired\n\tprivate RateService rateService;", "modifier": "@Autowired\n\tprivate", "type": "RateService", "declarator": "rateService", "var_name": "rateService"}, {"original_string": "@Autowired\n\tprivate ApplicationEventPublisher bus;", "modifier": "@Autowired\n\tprivate", "type": "ApplicationEventPublisher", "declarator": "bus", "var_name": "bus"}, {"original_string": "@Autowired\n\tprivate RateMapper rateMapper;", "modifier": "@Autowired\n\tprivate", "type": "RateMapper", "declarator": "rateMapper", "var_name": "rateMapper"}], "methods": [{"identifier": "updateRates", "parameters": "(List<Quote> quotes)", "modifiers": "@Transactional public", "return": "void", "signature": "void updateRates(List<Quote> quotes)", "full_signature": "@Transactional public void updateRates(List<Quote> quotes)", "class_method_signature": "RateUpdaterService.updateRates(List<Quote> quotes)", "testcase": false, "constructor": false}, {"identifier": "getFromList", "parameters": "(List<LatestRate> ratesList, Quote q)", "modifiers": "private", "return": "LatestRate", "signature": "LatestRate getFromList(List<LatestRate> ratesList, Quote q)", "full_signature": "private LatestRate getFromList(List<LatestRate> ratesList, Quote q)", "class_method_signature": "RateUpdaterService.getFromList(List<LatestRate> ratesList, Quote q)", "testcase": false, "constructor": false}, {"identifier": "getFromList", "parameters": "(List<SymbolEntity> symbols, String code)", "modifiers": "private", "return": "SymbolEntity", "signature": "SymbolEntity getFromList(List<SymbolEntity> symbols, String code)", "full_signature": "private SymbolEntity getFromList(List<SymbolEntity> symbols, String code)", "class_method_signature": "RateUpdaterService.getFromList(List<SymbolEntity> symbols, String code)", "testcase": false, "constructor": false}], "file": "trading-data-collect/src/main/java/fr/ymanvieu/trading/datacollect/rate/RateUpdaterService.java"}, "focal_method": {"identifier": "updateRates", "parameters": "(List<Quote> quotes)", "modifiers": "@Transactional public", "return": "void", "body": "@Transactional\n\tpublic void updateRates(List<Quote> quotes) {\n\n\t\tList<Quote> quotesList = new ArrayList<>(quotes);\n\n\t\tCollections.sort(quotesList, (o1, o2) -> o1.getTime().compareTo(o2.getTime()));\n\n\t\tList<LatestRate> existingLatestRates = latestRepo.findAll();\n\n\t\tList<LatestRate> newLatestRates = new ArrayList<>();\n\t\tList<Quote> newHistoricalRates = new ArrayList<>();\n\n\t\tList<SymbolEntity> symbols = symbolRepo.findAll();\n\n\t\tfor (Quote quote : quotesList) {\n\t\t\tLatestRate existingLatestRate = getFromList(existingLatestRates, quote);\n\n\t\t\tif (existingLatestRate == null) {\n\n\t\t\t\tSymbolEntity fromcur = getFromList(symbols, quote.getCode());\n\t\t\t\t\n\t\t\t\tif(fromcur == null) {\n\t\t\t\t\tlog.warn(\"Cannot find symbol '{}' in DB, skipping it.\", quote.getCode());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tSymbolEntity tocur = getFromList(symbols, quote.getCurrency());\n\n\t\t\t\tif(tocur == null) {\n\t\t\t\t\tlog.warn(\"Cannot find symbol '{}' in DB, skipping it.\", quote.getCurrency());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tLatestRate newLatestRate = new LatestRate(fromcur, tocur, quote.getPrice(), quote.getTime());\n\n\t\t\t\tnewLatestRates.add(newLatestRate);\n\t\t\t\texistingLatestRates.add(newLatestRate);\n\n\t\t\t} else if (quote.getTime().isAfter(existingLatestRate.getDate())) {\n\t\t\t\texistingLatestRate.setDate(quote.getTime());\n\t\t\t\texistingLatestRate.setValue(quote.getPrice());\n\n\t\t\t\tif (!newLatestRates.contains(existingLatestRate)) {\n\t\t\t\t\tnewLatestRates.add(existingLatestRate);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tnewHistoricalRates.add(quote);\n\t\t}\n\n\t\tlatestRepo.saveAll(newLatestRates);\n\n\t\trateService.addHistoricalRates(newHistoricalRates);\n\n\t\tif (!newLatestRates.isEmpty()) {\n\t\t\tbus.publishEvent(new RatesUpdatedEvent().setRates(rateMapper.mapToRates(newLatestRates)));\n\t\t}\n\t}", "signature": "void updateRates(List<Quote> quotes)", "full_signature": "@Transactional public void updateRates(List<Quote> quotes)", "class_method_signature": "RateUpdaterService.updateRates(List<Quote> quotes)", "testcase": false, "constructor": false, "invocations": ["sort", "compareTo", "getTime", "getTime", "findAll", "findAll", "getFromList", "getFromList", "getCode", "warn", "getCode", "getFromList", "getCurrency", "warn", "getCurrency", "getPrice", "getTime", "add", "add", "isAfter", "getTime", "getDate", "setDate", "getTime", "setValue", "getPrice", "contains", "add", "add", "saveAll", "addHistoricalRates", "isEmpty", "publishEvent", "setRates", "mapToRates"]}, "repository": {"repo_id": 51700398, "url": "https://github.com/ymanvieu/trading", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 988, "license": "licensed"}}