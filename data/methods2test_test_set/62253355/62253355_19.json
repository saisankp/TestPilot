{"test_class": {"identifier": "QueryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String DATASET_REPLACEMENT = \"FROM<test:iri>\";", "modifier": "private final", "type": "String", "declarator": "DATASET_REPLACEMENT = \"FROM<test:iri>\"", "var_name": "DATASET_REPLACEMENT"}], "file": "com.mobi.sparql.utils/src/test/java/com/mobi/sparql/utils/QueryTest.java"}, "test_case": {"identifier": "replaceDatasetClause", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void replaceDatasetClause() throws Exception {\n        InputStream query = getClass().getResourceAsStream(\"/example2.rq\");\n        Sparql11Parser parser = Query.getParser(streamToString(query));\n        parser.addErrorListener(new BaseErrorListener() {\n            @Override\n            public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line, int charPositionInLine, String msg, RecognitionException e) {\n                throw new IllegalStateException(\"failed to parse at line \" + line + \" due to \" + msg, e);\n            }\n        });\n\n        Sparql11Parser.QueryContext queryContext = parser.query();\n\n        // Rewrite the dataset clause\n        TokenStreamRewriter rewriter = new TokenStreamRewriter(parser.getTokenStream());\n        ParseTreeWalker walker = new ParseTreeWalker();\n        DatasetListener listener = new DatasetListener(rewriter);\n        walker.walk(listener, queryContext);\n\n        // Test result\n        String newText = rewriter.getText();\n        parser = Query.getParser(newText);\n        String datasetText = parser.query().selectQuery().datasetClause().get(0).getText();\n        assertEquals(DATASET_REPLACEMENT, datasetText);\n    }", "signature": "void replaceDatasetClause()", "full_signature": "@Test public void replaceDatasetClause()", "class_method_signature": "QueryTest.replaceDatasetClause()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "getParser", "streamToString", "addErrorListener", "query", "getTokenStream", "walk", "getText", "getParser", "getText", "get", "datasetClause", "selectQuery", "query", "assertEquals"]}, "focal_class": {"identifier": "Query", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getParser", "parameters": "(String query)", "modifiers": "public static", "return": "Sparql11Parser", "signature": "Sparql11Parser getParser(String query)", "full_signature": "public static Sparql11Parser getParser(String query)", "class_method_signature": "Query.getParser(String query)", "testcase": false, "constructor": false}, {"identifier": "getQueryType", "parameters": "(String queryString)", "modifiers": "public static", "return": "String", "signature": "String getQueryType(String queryString)", "full_signature": "public static String getQueryType(String queryString)", "class_method_signature": "Query.getQueryType(String queryString)", "testcase": false, "constructor": false}], "file": "com.mobi.sparql.utils/src/main/java/com/mobi/sparql/utils/Query.java"}, "focal_method": {"identifier": "getParser", "parameters": "(String query)", "modifiers": "public static", "return": "Sparql11Parser", "body": "public static Sparql11Parser getParser(String query) {\n        Sparql11Lexer lexer = new Sparql11Lexer(new CaseInsensitiveInputStream(query));\n        CommonTokenStream tokens = new CommonTokenStream(lexer);\n        Sparql11Parser parser = new Sparql11Parser(tokens);\n        parser.addErrorListener(new BaseErrorListener() {\n            @Override\n            public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line,\n                                    int charPositionInLine, String msg, RecognitionException ex) {\n                throw new MalformedQueryException(\"Failed to parse at line \" + line + \" due to \" + msg, ex);\n            }\n        });\n        return parser;\n    }", "signature": "Sparql11Parser getParser(String query)", "full_signature": "public static Sparql11Parser getParser(String query)", "class_method_signature": "Query.getParser(String query)", "testcase": false, "constructor": false, "invocations": ["addErrorListener"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}