{"test_class": {"identifier": "AbstractDependencyBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "status-core/src/test/java/com/indeed/status/core/AbstractDependencyBuilderTest.java"}, "test_case": {"identifier": "testExistingMethods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExistingMethods() throws Exception {\n        AbstractDependencyBuilder<SimpleDependency, ExistingExtendedBuilder> builder = new ExistingExtendedBuilder()\n                .setId(\"abc\")\n                // Ensure we get the proper cast object back from the superclass mutator\n                .setFoo(\"foo\");\n    }", "signature": "void testExistingMethods()", "full_signature": "@Test public void testExistingMethods()", "class_method_signature": "AbstractDependencyBuilderTest.testExistingMethods()", "testcase": true, "constructor": false, "invocations": ["setFoo", "setId"]}, "focal_class": {"identifier": "AbstractDependencyBuilder", "superclass": "extends AbstractDependency.Builder<T, B>", "interfaces": "", "fields": [], "methods": [{"identifier": "setId", "parameters": "(@Nonnull final String id)", "modifiers": "@Nonnull @Override public", "return": "B", "signature": "B setId(@Nonnull final String id)", "full_signature": "@Nonnull @Override public B setId(@Nonnull final String id)", "class_method_signature": "AbstractDependencyBuilder.setId(@Nonnull final String id)", "testcase": false, "constructor": false}, {"identifier": "setDescription", "parameters": "(@Nonnull final String description)", "modifiers": "@Nonnull @Override public", "return": "B", "signature": "B setDescription(@Nonnull final String description)", "full_signature": "@Nonnull @Override public B setDescription(@Nonnull final String description)", "class_method_signature": "AbstractDependencyBuilder.setDescription(@Nonnull final String description)", "testcase": false, "constructor": false}, {"identifier": "setTimeout", "parameters": "(@Nonnegative final long timeout)", "modifiers": "@Nonnull @Override public", "return": "B", "signature": "B setTimeout(@Nonnegative final long timeout)", "full_signature": "@Nonnull @Override public B setTimeout(@Nonnegative final long timeout)", "class_method_signature": "AbstractDependencyBuilder.setTimeout(@Nonnegative final long timeout)", "testcase": false, "constructor": false}, {"identifier": "setPingPeriod", "parameters": "(@Nonnegative final long pingPeriod)", "modifiers": "@Nonnull @Override public", "return": "B", "signature": "B setPingPeriod(@Nonnegative final long pingPeriod)", "full_signature": "@Nonnull @Override public B setPingPeriod(@Nonnegative final long pingPeriod)", "class_method_signature": "AbstractDependencyBuilder.setPingPeriod(@Nonnegative final long pingPeriod)", "testcase": false, "constructor": false}, {"identifier": "setUrgency", "parameters": "(@Nonnull final Urgency urgency)", "modifiers": "@Nonnull @Override public", "return": "B", "signature": "B setUrgency(@Nonnull final Urgency urgency)", "full_signature": "@Nonnull @Override public B setUrgency(@Nonnull final Urgency urgency)", "class_method_signature": "AbstractDependencyBuilder.setUrgency(@Nonnull final Urgency urgency)", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(@Nonnull final DependencyType type)", "modifiers": "@Nonnull @Override public", "return": "B", "signature": "B setType(@Nonnull final DependencyType type)", "full_signature": "@Nonnull @Override public B setType(@Nonnull final DependencyType type)", "class_method_signature": "AbstractDependencyBuilder.setType(@Nonnull final DependencyType type)", "testcase": false, "constructor": false}, {"identifier": "setServicePool", "parameters": "(@Nonnull final String servicePool)", "modifiers": "@Nonnull @Override public", "return": "B", "signature": "B setServicePool(@Nonnull final String servicePool)", "full_signature": "@Nonnull @Override public B setServicePool(@Nonnull final String servicePool)", "class_method_signature": "AbstractDependencyBuilder.setServicePool(@Nonnull final String servicePool)", "testcase": false, "constructor": false}], "file": "status-core/src/main/java/com/indeed/status/core/AbstractDependencyBuilder.java"}, "focal_method": {"identifier": "setId", "parameters": "(@Nonnull final String id)", "modifiers": "@Nonnull @Override public", "return": "B", "body": "@Nonnull\n    @Override\n    public B setId(@Nonnull final String id) {\n        return super.setId(id);\n    }", "signature": "B setId(@Nonnull final String id)", "full_signature": "@Nonnull @Override public B setId(@Nonnull final String id)", "class_method_signature": "AbstractDependencyBuilder.setId(@Nonnull final String id)", "testcase": false, "constructor": false, "invocations": ["setId"]}, "repository": {"repo_id": 15592774, "url": "https://github.com/indeedeng/status", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 17, "size": 467, "license": "licensed"}}