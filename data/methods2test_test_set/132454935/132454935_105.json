{"test_class": {"identifier": "ElrondNodeControllerTest", "superclass": "", "interfaces": "", "fields": [], "file": "elrond-api/src/test/java/network/elrond/api/ElrondNodeControllerTest.java"}, "test_case": {"identifier": "testShardAllocation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShardAllocation(){\n        ElrondNodeController elrondNodeController = new ElrondNodeController();\n\n        TestCase.assertEquals(false, elrondNodeController.shardOfAddress(null, null).isSuccess());\n        TestCase.assertEquals(false, elrondNodeController.shardOfAddress(null, \"\").isSuccess());\n        TestCase.assertEquals(0, elrondNodeController.shardOfAddress(null, \"0302fa311fac6aa56c1a5b08e6c9bcea32fc1939cbef5010c2ab853afb5563976c\").getPayload());\n        TestCase.assertEquals(1, elrondNodeController.shardOfAddress(null, \"0302fa311fac6aa56c1a5b08e6c9bcea32fc1939cbef5010c2ab853afb5563976d\").getPayload());\n\n        System.out.println(\"Shard: \" + elrondNodeController.shardOfAddress(null, \"0302fa311fac6aa56c1a5b08e6c9bcea32fc1939cbef5010c2ab853afb5563976c\"));\n\n\n\n    }", "signature": "void testShardAllocation()", "full_signature": "@Test public void testShardAllocation()", "class_method_signature": "ElrondNodeControllerTest.testShardAllocation()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "isSuccess", "shardOfAddress", "assertEquals", "isSuccess", "shardOfAddress", "assertEquals", "getPayload", "shardOfAddress", "assertEquals", "getPayload", "shardOfAddress", "println", "shardOfAddress"]}, "focal_class": {"identifier": "ElrondNodeController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LogManager.getLogger(ElrondNodeController.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LogManager.getLogger(ElrondNodeController.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    ElrondApiNode elrondApiNode;", "modifier": "@Autowired", "type": "ElrondApiNode", "declarator": "elrondApiNode", "var_name": "elrondApiNode"}, {"original_string": "@Autowired\n    ElrondWebSocketManager elrondWebSocketManager;", "modifier": "@Autowired", "type": "ElrondWebSocketManager", "declarator": "elrondWebSocketManager", "var_name": "elrondWebSocketManager"}], "methods": [{"identifier": "stopNode", "parameters": "(HttpServletResponse response)", "modifiers": "@RequestMapping(path = \"/node/stop\", method = RequestMethod.GET) public @ResponseBody", "return": "boolean", "signature": "boolean stopNode(HttpServletResponse response)", "full_signature": "@RequestMapping(path = \"/node/stop\", method = RequestMethod.GET) public @ResponseBody boolean stopNode(HttpServletResponse response)", "class_method_signature": "ElrondNodeController.stopNode(HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "nodeAppStatus", "parameters": "(\n            HttpServletResponse response)", "modifiers": "@RequestMapping(path = \"/node/appstatus\", method = RequestMethod.GET) public @ResponseBody", "return": "boolean", "signature": "boolean nodeAppStatus(\n            HttpServletResponse response)", "full_signature": "@RequestMapping(path = \"/node/appstatus\", method = RequestMethod.GET) public @ResponseBody boolean nodeAppStatus(\n            HttpServletResponse response)", "class_method_signature": "ElrondNodeController.nodeAppStatus(\n            HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "nodeStatus", "parameters": "(HttpServletResponse response)", "modifiers": "@RequestMapping(path = \"/node/status\", method = RequestMethod.GET) public @ResponseBody", "return": "boolean", "signature": "boolean nodeStatus(HttpServletResponse response)", "full_signature": "@RequestMapping(path = \"/node/status\", method = RequestMethod.GET) public @ResponseBody boolean nodeStatus(HttpServletResponse response)", "class_method_signature": "ElrondNodeController.nodeStatus(HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "startNode", "parameters": "(\n            HttpServletResponse response,\n            @RequestParam(defaultValue = \"elrond-node-1\") String nodeName,\n            @RequestParam(defaultValue = \"4001\") Integer port,\n            @RequestParam(defaultValue = \"4000\", required = false) Integer masterPeerPort,\n            @RequestParam(defaultValue = \"127.0.0.1\", required = false) String masterPeerIpAddress,\n            @RequestParam(defaultValue = \"00e15fc71adc4832c56c4e6a8b50a9503a4ede9485c4efbc585def0c657d93066a\", required = true) String privateKey,\n            @RequestParam(defaultValue = \"21000000\", required = false) String mintValue,\n            @RequestParam(defaultValue = \"START_FROM_SCRATCH\", required = true) BootstrapType bootstrapType//,\n            //@RequestParam(defaultValue = \"elrond-node-1\", required = false) String blockchainPath,\n            //@RequestParam(defaultValue = \"elrond-node-1\", required = false) String blockchainRestorePath\n\n    )", "modifiers": "@RequestMapping(path = \"/node/start\", method = RequestMethod.GET) public @ResponseBody", "return": "boolean", "signature": "boolean startNode(\n            HttpServletResponse response,\n            @RequestParam(defaultValue = \"elrond-node-1\") String nodeName,\n            @RequestParam(defaultValue = \"4001\") Integer port,\n            @RequestParam(defaultValue = \"4000\", required = false) Integer masterPeerPort,\n            @RequestParam(defaultValue = \"127.0.0.1\", required = false) String masterPeerIpAddress,\n            @RequestParam(defaultValue = \"00e15fc71adc4832c56c4e6a8b50a9503a4ede9485c4efbc585def0c657d93066a\", required = true) String privateKey,\n            @RequestParam(defaultValue = \"21000000\", required = false) String mintValue,\n            @RequestParam(defaultValue = \"START_FROM_SCRATCH\", required = true) BootstrapType bootstrapType//,\n            //@RequestParam(defaultValue = \"elrond-node-1\", required = false) String blockchainPath,\n            //@RequestParam(defaultValue = \"elrond-node-1\", required = false) String blockchainRestorePath\n\n    )", "full_signature": "@RequestMapping(path = \"/node/start\", method = RequestMethod.GET) public @ResponseBody boolean startNode(\n            HttpServletResponse response,\n            @RequestParam(defaultValue = \"elrond-node-1\") String nodeName,\n            @RequestParam(defaultValue = \"4001\") Integer port,\n            @RequestParam(defaultValue = \"4000\", required = false) Integer masterPeerPort,\n            @RequestParam(defaultValue = \"127.0.0.1\", required = false) String masterPeerIpAddress,\n            @RequestParam(defaultValue = \"00e15fc71adc4832c56c4e6a8b50a9503a4ede9485c4efbc585def0c657d93066a\", required = true) String privateKey,\n            @RequestParam(defaultValue = \"21000000\", required = false) String mintValue,\n            @RequestParam(defaultValue = \"START_FROM_SCRATCH\", required = true) BootstrapType bootstrapType//,\n            //@RequestParam(defaultValue = \"elrond-node-1\", required = false) String blockchainPath,\n            //@RequestParam(defaultValue = \"elrond-node-1\", required = false) String blockchainRestorePath\n\n    )", "class_method_signature": "ElrondNodeController.startNode(\n            HttpServletResponse response,\n            @RequestParam(defaultValue = \"elrond-node-1\") String nodeName,\n            @RequestParam(defaultValue = \"4001\") Integer port,\n            @RequestParam(defaultValue = \"4000\", required = false) Integer masterPeerPort,\n            @RequestParam(defaultValue = \"127.0.0.1\", required = false) String masterPeerIpAddress,\n            @RequestParam(defaultValue = \"00e15fc71adc4832c56c4e6a8b50a9503a4ede9485c4efbc585def0c657d93066a\", required = true) String privateKey,\n            @RequestParam(defaultValue = \"21000000\", required = false) String mintValue,\n            @RequestParam(defaultValue = \"START_FROM_SCRATCH\", required = true) BootstrapType bootstrapType//,\n            //@RequestParam(defaultValue = \"elrond-node-1\", required = false) String blockchainPath,\n            //@RequestParam(defaultValue = \"elrond-node-1\", required = false) String blockchainRestorePath\n\n    )", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(\n            HttpServletResponse response,\n            @RequestParam  String address,\n            @RequestParam(defaultValue = \"1\") BigInteger value)", "modifiers": "@RequestMapping(path = \"/node/send\", method = RequestMethod.GET) public @ResponseBody", "return": "ResponseObject", "signature": "ResponseObject send(\n            HttpServletResponse response,\n            @RequestParam  String address,\n            @RequestParam(defaultValue = \"1\") BigInteger value)", "full_signature": "@RequestMapping(path = \"/node/send\", method = RequestMethod.GET) public @ResponseBody ResponseObject send(\n            HttpServletResponse response,\n            @RequestParam  String address,\n            @RequestParam(defaultValue = \"1\") BigInteger value)", "class_method_signature": "ElrondNodeController.send(\n            HttpServletResponse response,\n            @RequestParam  String address,\n            @RequestParam(defaultValue = \"1\") BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "getReceipt", "parameters": "(\n            HttpServletResponse response,\n            @RequestParam() String transactionHash)", "modifiers": "@RequestMapping(path = \"/node/receipt\", method = RequestMethod.GET) public @ResponseBody", "return": "ResponseObject", "signature": "ResponseObject getReceipt(\n            HttpServletResponse response,\n            @RequestParam() String transactionHash)", "full_signature": "@RequestMapping(path = \"/node/receipt\", method = RequestMethod.GET) public @ResponseBody ResponseObject getReceipt(\n            HttpServletResponse response,\n            @RequestParam() String transactionHash)", "class_method_signature": "ElrondNodeController.getReceipt(\n            HttpServletResponse response,\n            @RequestParam() String transactionHash)", "testcase": false, "constructor": false}, {"identifier": "getBalance", "parameters": "(\n            HttpServletResponse response,\n            @RequestParam() String address)", "modifiers": "@RequestMapping(path = \"/node/balance\", method = RequestMethod.GET) public @ResponseBody", "return": "ResponseObject", "signature": "ResponseObject getBalance(\n            HttpServletResponse response,\n            @RequestParam() String address)", "full_signature": "@RequestMapping(path = \"/node/balance\", method = RequestMethod.GET) public @ResponseBody ResponseObject getBalance(\n            HttpServletResponse response,\n            @RequestParam() String address)", "class_method_signature": "ElrondNodeController.getBalance(\n            HttpServletResponse response,\n            @RequestParam() String address)", "testcase": false, "constructor": false}, {"identifier": "sendMultipleTransactions", "parameters": "(\n            HttpServletResponse response,\n            @RequestParam String address,\n            @RequestParam(defaultValue = \"1\") BigInteger value,\n            @RequestParam(defaultValue = \"1\") Integer nrTransactions)", "modifiers": "@RequestMapping(path = \"/node/sendMultipleTransactions\", method = RequestMethod.GET) public @ResponseBody", "return": "ResponseObject", "signature": "ResponseObject sendMultipleTransactions(\n            HttpServletResponse response,\n            @RequestParam String address,\n            @RequestParam(defaultValue = \"1\") BigInteger value,\n            @RequestParam(defaultValue = \"1\") Integer nrTransactions)", "full_signature": "@RequestMapping(path = \"/node/sendMultipleTransactions\", method = RequestMethod.GET) public @ResponseBody ResponseObject sendMultipleTransactions(\n            HttpServletResponse response,\n            @RequestParam String address,\n            @RequestParam(defaultValue = \"1\") BigInteger value,\n            @RequestParam(defaultValue = \"1\") Integer nrTransactions)", "class_method_signature": "ElrondNodeController.sendMultipleTransactions(\n            HttpServletResponse response,\n            @RequestParam String address,\n            @RequestParam(defaultValue = \"1\") BigInteger value,\n            @RequestParam(defaultValue = \"1\") Integer nrTransactions)", "testcase": false, "constructor": false}, {"identifier": "sendMultipleTransactionsToAllShards", "parameters": "(\n            HttpServletResponse response,\n            @RequestParam(defaultValue = \"1\") BigInteger value,\n            @RequestParam(defaultValue = \"1\") Integer nrTransactions)", "modifiers": "@RequestMapping(path = \"/node/sendMultipleTransactionsToAllShards\", method = RequestMethod.GET) public @ResponseBody", "return": "ResponseObject", "signature": "ResponseObject sendMultipleTransactionsToAllShards(\n            HttpServletResponse response,\n            @RequestParam(defaultValue = \"1\") BigInteger value,\n            @RequestParam(defaultValue = \"1\") Integer nrTransactions)", "full_signature": "@RequestMapping(path = \"/node/sendMultipleTransactionsToAllShards\", method = RequestMethod.GET) public @ResponseBody ResponseObject sendMultipleTransactionsToAllShards(\n            HttpServletResponse response,\n            @RequestParam(defaultValue = \"1\") BigInteger value,\n            @RequestParam(defaultValue = \"1\") Integer nrTransactions)", "class_method_signature": "ElrondNodeController.sendMultipleTransactionsToAllShards(\n            HttpServletResponse response,\n            @RequestParam(defaultValue = \"1\") BigInteger value,\n            @RequestParam(defaultValue = \"1\") Integer nrTransactions)", "testcase": false, "constructor": false}, {"identifier": "getStats", "parameters": "(\n            HttpServletResponse response)", "modifiers": "@RequestMapping(path = \"/node/getStats\", method = RequestMethod.GET) public @ResponseBody", "return": "ResponseObject", "signature": "ResponseObject getStats(\n            HttpServletResponse response)", "full_signature": "@RequestMapping(path = \"/node/getStats\", method = RequestMethod.GET) public @ResponseBody ResponseObject getStats(\n            HttpServletResponse response)", "class_method_signature": "ElrondNodeController.getStats(\n            HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "ping", "parameters": "(\n            HttpServletResponse response,\n            @RequestParam() String ipAddress,\n            @RequestParam() int port\n    )", "modifiers": "@RequestMapping(path = \"/node/ping\", method = RequestMethod.GET) public @ResponseBody", "return": "ResponseObject", "signature": "ResponseObject ping(\n            HttpServletResponse response,\n            @RequestParam() String ipAddress,\n            @RequestParam() int port\n    )", "full_signature": "@RequestMapping(path = \"/node/ping\", method = RequestMethod.GET) public @ResponseBody ResponseObject ping(\n            HttpServletResponse response,\n            @RequestParam() String ipAddress,\n            @RequestParam() int port\n    )", "class_method_signature": "ElrondNodeController.ping(\n            HttpServletResponse response,\n            @RequestParam() String ipAddress,\n            @RequestParam() int port\n    )", "testcase": false, "constructor": false}, {"identifier": "checkFreePort", "parameters": "(\n            HttpServletResponse response,\n            @RequestParam() String ipAddress,\n            @RequestParam() int port\n    )", "modifiers": "@RequestMapping(path = \"/node/checkfreeport\", method = RequestMethod.GET) public @ResponseBody", "return": "ResponseObject", "signature": "ResponseObject checkFreePort(\n            HttpServletResponse response,\n            @RequestParam() String ipAddress,\n            @RequestParam() int port\n    )", "full_signature": "@RequestMapping(path = \"/node/checkfreeport\", method = RequestMethod.GET) public @ResponseBody ResponseObject checkFreePort(\n            HttpServletResponse response,\n            @RequestParam() String ipAddress,\n            @RequestParam() int port\n    )", "class_method_signature": "ElrondNodeController.checkFreePort(\n            HttpServletResponse response,\n            @RequestParam() String ipAddress,\n            @RequestParam() int port\n    )", "testcase": false, "constructor": false}, {"identifier": "generatePublicKeyAndPrivateKey", "parameters": "(\n            HttpServletResponse response,\n            @RequestParam() String privateKey)", "modifiers": "@RequestMapping(path = \"/node/generatepublickeyandprivateKey\", method = RequestMethod.GET) public @ResponseBody", "return": "ResponseObject", "signature": "ResponseObject generatePublicKeyAndPrivateKey(\n            HttpServletResponse response,\n            @RequestParam() String privateKey)", "full_signature": "@RequestMapping(path = \"/node/generatepublickeyandprivateKey\", method = RequestMethod.GET) public @ResponseBody ResponseObject generatePublicKeyAndPrivateKey(\n            HttpServletResponse response,\n            @RequestParam() String privateKey)", "class_method_signature": "ElrondNodeController.generatePublicKeyAndPrivateKey(\n            HttpServletResponse response,\n            @RequestParam() String privateKey)", "testcase": false, "constructor": false}, {"identifier": "shardOfAddress", "parameters": "(\n            HttpServletResponse response,\n            @RequestParam() String address)", "modifiers": "@RequestMapping(path = \"/node/shardofaddress\", method = RequestMethod.GET) public @ResponseBody", "return": "ResponseObject", "signature": "ResponseObject shardOfAddress(\n            HttpServletResponse response,\n            @RequestParam() String address)", "full_signature": "@RequestMapping(path = \"/node/shardofaddress\", method = RequestMethod.GET) public @ResponseBody ResponseObject shardOfAddress(\n            HttpServletResponse response,\n            @RequestParam() String address)", "class_method_signature": "ElrondNodeController.shardOfAddress(\n            HttpServletResponse response,\n            @RequestParam() String address)", "testcase": false, "constructor": false}, {"identifier": "getTransactionFromHash", "parameters": "(\n            HttpServletResponse response,\n            @RequestParam() String transactionHash)", "modifiers": "@RequestMapping(path = \"/node/gettransactionfromhash\", method = RequestMethod.GET) public @ResponseBody", "return": "ResponseObject", "signature": "ResponseObject getTransactionFromHash(\n            HttpServletResponse response,\n            @RequestParam() String transactionHash)", "full_signature": "@RequestMapping(path = \"/node/gettransactionfromhash\", method = RequestMethod.GET) public @ResponseBody ResponseObject getTransactionFromHash(\n            HttpServletResponse response,\n            @RequestParam() String transactionHash)", "class_method_signature": "ElrondNodeController.getTransactionFromHash(\n            HttpServletResponse response,\n            @RequestParam() String transactionHash)", "testcase": false, "constructor": false}, {"identifier": "getBlockFromHash", "parameters": "(\n            HttpServletResponse response,\n            @RequestParam() String blockHash)", "modifiers": "@RequestMapping(path = \"/node/getblockfromhash\", method = RequestMethod.GET) public @ResponseBody", "return": "ResponseObject", "signature": "ResponseObject getBlockFromHash(\n            HttpServletResponse response,\n            @RequestParam() String blockHash)", "full_signature": "@RequestMapping(path = \"/node/getblockfromhash\", method = RequestMethod.GET) public @ResponseBody ResponseObject getBlockFromHash(\n            HttpServletResponse response,\n            @RequestParam() String blockHash)", "class_method_signature": "ElrondNodeController.getBlockFromHash(\n            HttpServletResponse response,\n            @RequestParam() String blockHash)", "testcase": false, "constructor": false}, {"identifier": "getNextPrivateKey", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "@RequestMapping(path = \"/node/getNextPrivateKey\", method = RequestMethod.GET) public @ResponseBody", "return": "ResponseObject", "signature": "ResponseObject getNextPrivateKey(HttpServletRequest request, HttpServletResponse response)", "full_signature": "@RequestMapping(path = \"/node/getNextPrivateKey\", method = RequestMethod.GET) public @ResponseBody ResponseObject getNextPrivateKey(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "ElrondNodeController.getNextPrivateKey(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "getPrivatePublicKeyShard", "parameters": "(\n            HttpServletResponse response)", "modifiers": "@RequestMapping(path = \"/node/getprivatepublickeyshard\", method = RequestMethod.GET) public @ResponseBody", "return": "ResponseObject", "signature": "ResponseObject getPrivatePublicKeyShard(\n            HttpServletResponse response)", "full_signature": "@RequestMapping(path = \"/node/getprivatepublickeyshard\", method = RequestMethod.GET) public @ResponseBody ResponseObject getPrivatePublicKeyShard(\n            HttpServletResponse response)", "class_method_signature": "ElrondNodeController.getPrivatePublicKeyShard(\n            HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "nodeExit", "parameters": "(\n            HttpServletResponse response)", "modifiers": "@RequestMapping(path = \"/node/exit\", method = RequestMethod.GET) public @ResponseBody", "return": "void", "signature": "void nodeExit(\n            HttpServletResponse response)", "full_signature": "@RequestMapping(path = \"/node/exit\", method = RequestMethod.GET) public @ResponseBody void nodeExit(\n            HttpServletResponse response)", "class_method_signature": "ElrondNodeController.nodeExit(\n            HttpServletResponse response)", "testcase": false, "constructor": false}], "file": "elrond-api/src/main/java/network/elrond/api/ElrondNodeController.java"}, "focal_method": {"identifier": "shardOfAddress", "parameters": "(\n            HttpServletResponse response,\n            @RequestParam() String address)", "modifiers": "@RequestMapping(path = \"/node/shardofaddress\", method = RequestMethod.GET) public @ResponseBody", "return": "ResponseObject", "body": "@RequestMapping(path = \"/node/shardofaddress\", method = RequestMethod.GET)\n    public @ResponseBody\n    ResponseObject shardOfAddress(\n            HttpServletResponse response,\n            @RequestParam() String address) {\n\n        logger.traceEntry(\"params: {}\", address);\n\n        try {\n\n            ShardingService shardingService = AppServiceProvider.getShardingService();\n            byte[] publicKeyBytes = Util.hexStringToByteArray(address);\n            return logger.traceExit(new ResponseObject(true, \"\", shardingService.getShard(publicKeyBytes).getIndex()));\n        } catch (Exception ex){\n            logger.throwing(ex);\n            return logger.traceExit(new ResponseObject(false, ex.getMessage(), null));\n        }\n    }", "signature": "ResponseObject shardOfAddress(\n            HttpServletResponse response,\n            @RequestParam() String address)", "full_signature": "@RequestMapping(path = \"/node/shardofaddress\", method = RequestMethod.GET) public @ResponseBody ResponseObject shardOfAddress(\n            HttpServletResponse response,\n            @RequestParam() String address)", "class_method_signature": "ElrondNodeController.shardOfAddress(\n            HttpServletResponse response,\n            @RequestParam() String address)", "testcase": false, "constructor": false, "invocations": ["traceEntry", "getShardingService", "hexStringToByteArray", "traceExit", "getIndex", "getShard", "throwing", "traceExit", "getMessage"]}, "repository": {"repo_id": 132454935, "url": "https://github.com/ElrondNetwork/elrond-node-prototype", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 16635, "license": "licensed"}}