{"test_class": {"identifier": "JcrSessionTest", "superclass": "extends SingleUseAbstractTest", "interfaces": "", "fields": [{"original_string": "private static final String MULTI_LINE_VALUE = \"Line\\t1\\nLine 2\\rLine 3\\r\\nLine 4\";", "modifier": "private static final", "type": "String", "declarator": "MULTI_LINE_VALUE = \"Line\\t1\\nLine 2\\rLine 3\\r\\nLine 4\"", "var_name": "MULTI_LINE_VALUE"}, {"original_string": "private static final String PUBLIC_DECODED_NAME = \"a|b]c[d:e/f*g\";", "modifier": "private static final", "type": "String", "declarator": "PUBLIC_DECODED_NAME = \"a|b]c[d:e/f*g\"", "var_name": "PUBLIC_DECODED_NAME"}, {"original_string": "private static final String PUBLIC_ENCODED_NAME = \"a\" + '\\uF07C' + 'b' + '\\uF05D' + 'c' + '\\uF05B' + 'd' + '\\uF03A' + 'e'\n                                                      + '\\uF02F' + 'f' + '\\uF02A' + 'g';", "modifier": "private static final", "type": "String", "declarator": "PUBLIC_ENCODED_NAME = \"a\" + '\\uF07C' + 'b' + '\\uF05D' + 'c' + '\\uF05B' + 'd' + '\\uF03A' + 'e'\n                                                      + '\\uF02F' + 'f' + '\\uF02A' + 'g'", "var_name": "PUBLIC_ENCODED_NAME"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/JcrSessionTest.java"}, "test_case": {"identifier": "shouldEncodeNameWithIllegalCharacters", "parameters": "()", "modifiers": "@Test @FixFor( \"MODE-1956\" ) public", "return": "void", "body": "@Test\n    @FixFor( \"MODE-1956\" )\n    public void shouldEncodeNameWithIllegalCharacters() {\n        assertThat(session.encode(PUBLIC_DECODED_NAME), is(PUBLIC_ENCODED_NAME));\n    }", "signature": "void shouldEncodeNameWithIllegalCharacters()", "full_signature": "@Test @FixFor( \"MODE-1956\" ) public void shouldEncodeNameWithIllegalCharacters()", "class_method_signature": "JcrSessionTest.shouldEncodeNameWithIllegalCharacters()", "testcase": true, "constructor": false, "invocations": ["assertThat", "encode", "is"]}, "focal_class": {"identifier": "JcrSession", "superclass": "", "interfaces": "implements org.modeshape.jcr.api.Session", "fields": [{"original_string": "private static final String[] NO_ATTRIBUTES_NAMES = new String[] {};", "modifier": "private static final", "type": "String[]", "declarator": "NO_ATTRIBUTES_NAMES = new String[] {}", "var_name": "NO_ATTRIBUTES_NAMES"}, {"original_string": "protected final JcrRepository repository;", "modifier": "protected final", "type": "JcrRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private final SessionCache cache;", "modifier": "private final", "type": "SessionCache", "declarator": "cache", "var_name": "cache"}, {"original_string": "private final JcrRootNode rootNode;", "modifier": "private final", "type": "JcrRootNode", "declarator": "rootNode", "var_name": "rootNode"}, {"original_string": "private final ConcurrentMap<NodeKey, AbstractJcrNode> jcrNodes = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<NodeKey, AbstractJcrNode>", "declarator": "jcrNodes = new ConcurrentHashMap<>()", "var_name": "jcrNodes"}, {"original_string": "private final Map<String, Object> sessionAttributes;", "modifier": "private final", "type": "Map<String, Object>", "declarator": "sessionAttributes", "var_name": "sessionAttributes"}, {"original_string": "private final JcrWorkspace workspace;", "modifier": "private final", "type": "JcrWorkspace", "declarator": "workspace", "var_name": "workspace"}, {"original_string": "private final JcrNamespaceRegistry sessionRegistry;", "modifier": "private final", "type": "JcrNamespaceRegistry", "declarator": "sessionRegistry", "var_name": "sessionRegistry"}, {"original_string": "private final AtomicReference<Map<NodeKey, NodeKey>> baseVersionKeys = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<Map<NodeKey, NodeKey>>", "declarator": "baseVersionKeys = new AtomicReference<>()", "var_name": "baseVersionKeys"}, {"original_string": "private final AtomicReference<Map<NodeKey, NodeKey>> originalVersionKeys = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<Map<NodeKey, NodeKey>>", "declarator": "originalVersionKeys = new AtomicReference<>()", "var_name": "originalVersionKeys"}, {"original_string": "private final AtomicReference<JcrSharedNodeCache> shareableNodeCache = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<JcrSharedNodeCache>", "declarator": "shareableNodeCache = new AtomicReference<>()", "var_name": "shareableNodeCache"}, {"original_string": "private final AtomicLong aclChangesCount = new AtomicLong(0);", "modifier": "private final", "type": "AtomicLong", "declarator": "aclChangesCount = new AtomicLong(0)", "var_name": "aclChangesCount"}, {"original_string": "private volatile JcrValueFactory valueFactory;", "modifier": "private volatile", "type": "JcrValueFactory", "declarator": "valueFactory", "var_name": "valueFactory"}, {"original_string": "private volatile JcrValueFactoryWithHint valueFactoryWithHint;", "modifier": "private volatile", "type": "JcrValueFactoryWithHint", "declarator": "valueFactoryWithHint", "var_name": "valueFactoryWithHint"}, {"original_string": "private volatile boolean isLive = true;", "modifier": "private volatile", "type": "boolean", "declarator": "isLive = true", "var_name": "isLive"}, {"original_string": "private final long nanosCreated;", "modifier": "private final", "type": "long", "declarator": "nanosCreated", "var_name": "nanosCreated"}, {"original_string": "private volatile BufferManager bufferMgr;", "modifier": "private volatile", "type": "BufferManager", "declarator": "bufferMgr", "var_name": "bufferMgr"}, {"original_string": "private final boolean hasCustomAuthorizationProvider;", "modifier": "private final", "type": "boolean", "declarator": "hasCustomAuthorizationProvider", "var_name": "hasCustomAuthorizationProvider"}, {"original_string": "private final boolean mimeTypeDetectionEnabled;", "modifier": "private final", "type": "boolean", "declarator": "mimeTypeDetectionEnabled", "var_name": "mimeTypeDetectionEnabled"}, {"original_string": "private ExecutionContext context;", "modifier": "private", "type": "ExecutionContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final AccessControlManagerImpl acm;", "modifier": "private final", "type": "AccessControlManagerImpl", "declarator": "acm", "var_name": "acm"}, {"original_string": "private final AdvancedAuthorizationProvider.Context authorizerContext = new AdvancedAuthorizationProvider.Context() {\n        @Override\n        public ExecutionContext getExecutionContext() {\n            return context();\n        }\n\n        @Override\n        public String getRepositoryName() {\n            return repository().getName();\n        }\n\n        @Override\n        public Session getSession() {\n            return JcrSession.this;\n        }\n\n        @Override\n        public String getWorkspaceName() {\n            return workspaceName();\n        }\n    };", "modifier": "private final", "type": "AdvancedAuthorizationProvider.Context", "declarator": "authorizerContext = new AdvancedAuthorizationProvider.Context() {\n        @Override\n        public ExecutionContext getExecutionContext() {\n            return context();\n        }\n\n        @Override\n        public String getRepositoryName() {\n            return repository().getName();\n        }\n\n        @Override\n        public Session getSession() {\n            return JcrSession.this;\n        }\n\n        @Override\n        public String getWorkspaceName() {\n            return workspaceName();\n        }\n    }", "var_name": "authorizerContext"}], "methods": [{"identifier": "JcrSession", "parameters": "( JcrRepository repository,\n                          String workspaceName,\n                          ExecutionContext context,\n                          Map<String, Object> sessionAttributes,\n                          boolean readOnly )", "modifiers": "protected", "return": "", "signature": " JcrSession( JcrRepository repository,\n                          String workspaceName,\n                          ExecutionContext context,\n                          Map<String, Object> sessionAttributes,\n                          boolean readOnly )", "full_signature": "protected  JcrSession( JcrRepository repository,\n                          String workspaceName,\n                          ExecutionContext context,\n                          Map<String, Object> sessionAttributes,\n                          boolean readOnly )", "class_method_signature": "JcrSession.JcrSession( JcrRepository repository,\n                          String workspaceName,\n                          ExecutionContext context,\n                          Map<String, Object> sessionAttributes,\n                          boolean readOnly )", "testcase": false, "constructor": true}, {"identifier": "JcrSession", "parameters": "( JcrSession original,\n                          boolean readOnly )", "modifiers": "protected", "return": "", "signature": " JcrSession( JcrSession original,\n                          boolean readOnly )", "full_signature": "protected  JcrSession( JcrSession original,\n                          boolean readOnly )", "class_method_signature": "JcrSession.JcrSession( JcrSession original,\n                          boolean readOnly )", "testcase": false, "constructor": true}, {"identifier": "workspace", "parameters": "()", "modifiers": "final", "return": "JcrWorkspace", "signature": "JcrWorkspace workspace()", "full_signature": "final JcrWorkspace workspace()", "class_method_signature": "JcrSession.workspace()", "testcase": false, "constructor": false}, {"identifier": "repository", "parameters": "()", "modifiers": "final", "return": "JcrRepository", "signature": "JcrRepository repository()", "full_signature": "final JcrRepository repository()", "class_method_signature": "JcrSession.repository()", "testcase": false, "constructor": false}, {"identifier": "bufferManager", "parameters": "()", "modifiers": "final synchronized", "return": "BufferManager", "signature": "BufferManager bufferManager()", "full_signature": "final synchronized BufferManager bufferManager()", "class_method_signature": "JcrSession.bufferManager()", "testcase": false, "constructor": false}, {"identifier": "checkPermissionsWhenIteratingChildren", "parameters": "()", "modifiers": "final", "return": "boolean", "signature": "boolean checkPermissionsWhenIteratingChildren()", "full_signature": "final boolean checkPermissionsWhenIteratingChildren()", "class_method_signature": "JcrSession.checkPermissionsWhenIteratingChildren()", "testcase": false, "constructor": false}, {"identifier": "terminate", "parameters": "( boolean removeFromActiveSession )", "modifiers": "", "return": "void", "signature": "void terminate( boolean removeFromActiveSession )", "full_signature": " void terminate( boolean removeFromActiveSession )", "class_method_signature": "JcrSession.terminate( boolean removeFromActiveSession )", "testcase": false, "constructor": false}, {"identifier": "cleanLocks", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cleanLocks()", "full_signature": "private void cleanLocks()", "class_method_signature": "JcrSession.cleanLocks()", "testcase": false, "constructor": false}, {"identifier": "workspaceName", "parameters": "()", "modifiers": "final", "return": "String", "signature": "String workspaceName()", "full_signature": "final String workspaceName()", "class_method_signature": "JcrSession.workspaceName()", "testcase": false, "constructor": false}, {"identifier": "sessionId", "parameters": "()", "modifiers": "final", "return": "String", "signature": "String sessionId()", "full_signature": "final String sessionId()", "class_method_signature": "JcrSession.sessionId()", "testcase": false, "constructor": false}, {"identifier": "isReadOnly", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isReadOnly()", "full_signature": "public final boolean isReadOnly()", "class_method_signature": "JcrSession.isReadOnly()", "testcase": false, "constructor": false}, {"identifier": "checkLive", "parameters": "()", "modifiers": "final", "return": "void", "signature": "void checkLive()", "full_signature": "final void checkLive()", "class_method_signature": "JcrSession.checkLive()", "testcase": false, "constructor": false}, {"identifier": "namespaces", "parameters": "()", "modifiers": "", "return": "NamespaceRegistry", "signature": "NamespaceRegistry namespaces()", "full_signature": " NamespaceRegistry namespaces()", "class_method_signature": "JcrSession.namespaces()", "testcase": false, "constructor": false}, {"identifier": "stringFactory", "parameters": "()", "modifiers": "final", "return": "StringFactory", "signature": "StringFactory stringFactory()", "full_signature": "final StringFactory stringFactory()", "class_method_signature": "JcrSession.stringFactory()", "testcase": false, "constructor": false}, {"identifier": "nameFactory", "parameters": "()", "modifiers": "final", "return": "NameFactory", "signature": "NameFactory nameFactory()", "full_signature": "final NameFactory nameFactory()", "class_method_signature": "JcrSession.nameFactory()", "testcase": false, "constructor": false}, {"identifier": "pathFactory", "parameters": "()", "modifiers": "final", "return": "PathFactory", "signature": "PathFactory pathFactory()", "full_signature": "final PathFactory pathFactory()", "class_method_signature": "JcrSession.pathFactory()", "testcase": false, "constructor": false}, {"identifier": "propertyFactory", "parameters": "()", "modifiers": "final", "return": "PropertyFactory", "signature": "PropertyFactory propertyFactory()", "full_signature": "final PropertyFactory propertyFactory()", "class_method_signature": "JcrSession.propertyFactory()", "testcase": false, "constructor": false}, {"identifier": "referenceFactory", "parameters": "()", "modifiers": "final", "return": "ReferenceFactory", "signature": "ReferenceFactory referenceFactory()", "full_signature": "final ReferenceFactory referenceFactory()", "class_method_signature": "JcrSession.referenceFactory()", "testcase": false, "constructor": false}, {"identifier": "dateFactory", "parameters": "()", "modifiers": "final", "return": "DateTimeFactory", "signature": "DateTimeFactory dateFactory()", "full_signature": "final DateTimeFactory dateFactory()", "class_method_signature": "JcrSession.dateFactory()", "testcase": false, "constructor": false}, {"identifier": "context", "parameters": "()", "modifiers": "final", "return": "ExecutionContext", "signature": "ExecutionContext context()", "full_signature": "final ExecutionContext context()", "class_method_signature": "JcrSession.context()", "testcase": false, "constructor": false}, {"identifier": "valueFactory", "parameters": "()", "modifiers": "final", "return": "JcrValueFactory", "signature": "JcrValueFactory valueFactory()", "full_signature": "final JcrValueFactory valueFactory()", "class_method_signature": "JcrSession.valueFactory()", "testcase": false, "constructor": false}, {"identifier": "valueFactoryWithHint", "parameters": "( String binaryStoreHint )", "modifiers": "final", "return": "JcrValueFactory", "signature": "JcrValueFactory valueFactoryWithHint( String binaryStoreHint )", "full_signature": "final JcrValueFactory valueFactoryWithHint( String binaryStoreHint )", "class_method_signature": "JcrSession.valueFactoryWithHint( String binaryStoreHint )", "testcase": false, "constructor": false}, {"identifier": "cache", "parameters": "()", "modifiers": "final", "return": "SessionCache", "signature": "SessionCache cache()", "full_signature": "final SessionCache cache()", "class_method_signature": "JcrSession.cache()", "testcase": false, "constructor": false}, {"identifier": "createSystemCache", "parameters": "( boolean readOnly )", "modifiers": "final", "return": "SessionCache", "signature": "SessionCache createSystemCache( boolean readOnly )", "full_signature": "final SessionCache createSystemCache( boolean readOnly )", "class_method_signature": "JcrSession.createSystemCache( boolean readOnly )", "testcase": false, "constructor": false}, {"identifier": "nodeTypeManager", "parameters": "()", "modifiers": "final", "return": "JcrNodeTypeManager", "signature": "JcrNodeTypeManager nodeTypeManager()", "full_signature": "final JcrNodeTypeManager nodeTypeManager()", "class_method_signature": "JcrSession.nodeTypeManager()", "testcase": false, "constructor": false}, {"identifier": "nodeTypes", "parameters": "()", "modifiers": "final", "return": "NodeTypes", "signature": "NodeTypes nodeTypes()", "full_signature": "final NodeTypes nodeTypes()", "class_method_signature": "JcrSession.nodeTypes()", "testcase": false, "constructor": false}, {"identifier": "versionManager", "parameters": "()", "modifiers": "final", "return": "JcrVersionManager", "signature": "JcrVersionManager versionManager()", "full_signature": "final JcrVersionManager versionManager()", "class_method_signature": "JcrSession.versionManager()", "testcase": false, "constructor": false}, {"identifier": "lockManager", "parameters": "()", "modifiers": "final", "return": "JcrLockManager", "signature": "JcrLockManager lockManager()", "full_signature": "final JcrLockManager lockManager()", "class_method_signature": "JcrSession.lockManager()", "testcase": false, "constructor": false}, {"identifier": "observationManager", "parameters": "()", "modifiers": "final", "return": "JcrObservationManager", "signature": "JcrObservationManager observationManager()", "full_signature": "final JcrObservationManager observationManager()", "class_method_signature": "JcrSession.observationManager()", "testcase": false, "constructor": false}, {"identifier": "signalNamespaceChanges", "parameters": "( boolean global )", "modifiers": "final", "return": "void", "signature": "void signalNamespaceChanges( boolean global )", "full_signature": "final void signalNamespaceChanges( boolean global )", "class_method_signature": "JcrSession.signalNamespaceChanges( boolean global )", "testcase": false, "constructor": false}, {"identifier": "setDesiredBaseVersionKey", "parameters": "( NodeKey nodeKey,\n                                         NodeKey baseVersionKey )", "modifiers": "final", "return": "void", "signature": "void setDesiredBaseVersionKey( NodeKey nodeKey,\n                                         NodeKey baseVersionKey )", "full_signature": "final void setDesiredBaseVersionKey( NodeKey nodeKey,\n                                         NodeKey baseVersionKey )", "class_method_signature": "JcrSession.setDesiredBaseVersionKey( NodeKey nodeKey,\n                                         NodeKey baseVersionKey )", "testcase": false, "constructor": false}, {"identifier": "setOriginalVersionKey", "parameters": "( NodeKey nodeKey,\n                                      NodeKey originalVersionKey )", "modifiers": "final", "return": "void", "signature": "void setOriginalVersionKey( NodeKey nodeKey,\n                                      NodeKey originalVersionKey )", "full_signature": "final void setOriginalVersionKey( NodeKey nodeKey,\n                                      NodeKey originalVersionKey )", "class_method_signature": "JcrSession.setOriginalVersionKey( NodeKey nodeKey,\n                                      NodeKey originalVersionKey )", "testcase": false, "constructor": false}, {"identifier": "spawnSession", "parameters": "( boolean readOnly )", "modifiers": "final", "return": "JcrSession", "signature": "JcrSession spawnSession( boolean readOnly )", "full_signature": "final JcrSession spawnSession( boolean readOnly )", "class_method_signature": "JcrSession.spawnSession( boolean readOnly )", "testcase": false, "constructor": false}, {"identifier": "spawnSession", "parameters": "( String workspaceName,\n                                   boolean readOnly )", "modifiers": "final", "return": "JcrSession", "signature": "JcrSession spawnSession( String workspaceName,\n                                   boolean readOnly )", "full_signature": "final JcrSession spawnSession( String workspaceName,\n                                   boolean readOnly )", "class_method_signature": "JcrSession.spawnSession( String workspaceName,\n                                   boolean readOnly )", "testcase": false, "constructor": false}, {"identifier": "spawnSessionCache", "parameters": "( boolean readOnly )", "modifiers": "final", "return": "SessionCache", "signature": "SessionCache spawnSessionCache( boolean readOnly )", "full_signature": "final SessionCache spawnSessionCache( boolean readOnly )", "class_method_signature": "JcrSession.spawnSessionCache( boolean readOnly )", "testcase": false, "constructor": false}, {"identifier": "addContextData", "parameters": "( String key,\n                               String value )", "modifiers": "final", "return": "void", "signature": "void addContextData( String key,\n                               String value )", "full_signature": "final void addContextData( String key,\n                               String value )", "class_method_signature": "JcrSession.addContextData( String key,\n                               String value )", "testcase": false, "constructor": false}, {"identifier": "shareableNodeCache", "parameters": "()", "modifiers": "final", "return": "JcrSharedNodeCache", "signature": "JcrSharedNodeCache shareableNodeCache()", "full_signature": "final JcrSharedNodeCache shareableNodeCache()", "class_method_signature": "JcrSession.shareableNodeCache()", "testcase": false, "constructor": false}, {"identifier": "readableLocation", "parameters": "( CachedNode node )", "modifiers": "protected final", "return": "String", "signature": "String readableLocation( CachedNode node )", "full_signature": "protected final String readableLocation( CachedNode node )", "class_method_signature": "JcrSession.readableLocation( CachedNode node )", "testcase": false, "constructor": false}, {"identifier": "aclChangesCount", "parameters": "()", "modifiers": "protected final", "return": "long", "signature": "long aclChangesCount()", "full_signature": "protected final long aclChangesCount()", "class_method_signature": "JcrSession.aclChangesCount()", "testcase": false, "constructor": false}, {"identifier": "aclAdded", "parameters": "( long count )", "modifiers": "protected final", "return": "long", "signature": "long aclAdded( long count )", "full_signature": "protected final long aclAdded( long count )", "class_method_signature": "JcrSession.aclAdded( long count )", "testcase": false, "constructor": false}, {"identifier": "aclRemoved", "parameters": "( long count )", "modifiers": "protected final", "return": "long", "signature": "long aclRemoved( long count )", "full_signature": "protected final long aclRemoved( long count )", "class_method_signature": "JcrSession.aclRemoved( long count )", "testcase": false, "constructor": false}, {"identifier": "readable", "parameters": "( Path path )", "modifiers": "protected final", "return": "String", "signature": "String readable( Path path )", "full_signature": "protected final String readable( Path path )", "class_method_signature": "JcrSession.readable( Path path )", "testcase": false, "constructor": false}, {"identifier": "releaseCachedNode", "parameters": "( AbstractJcrNode node )", "modifiers": "protected", "return": "void", "signature": "void releaseCachedNode( AbstractJcrNode node )", "full_signature": "protected void releaseCachedNode( AbstractJcrNode node )", "class_method_signature": "JcrSession.releaseCachedNode( AbstractJcrNode node )", "testcase": false, "constructor": false}, {"identifier": "node", "parameters": "( NodeKey nodeKey,\n                          AbstractJcrNode.Type expectedType )", "modifiers": "", "return": "AbstractJcrNode", "signature": "AbstractJcrNode node( NodeKey nodeKey,\n                          AbstractJcrNode.Type expectedType )", "full_signature": " AbstractJcrNode node( NodeKey nodeKey,\n                          AbstractJcrNode.Type expectedType )", "class_method_signature": "JcrSession.node( NodeKey nodeKey,\n                          AbstractJcrNode.Type expectedType )", "testcase": false, "constructor": false}, {"identifier": "node", "parameters": "( NodeKey nodeKey,\n                          AbstractJcrNode.Type expectedType,\n                          NodeKey parentKey )", "modifiers": "", "return": "AbstractJcrNode", "signature": "AbstractJcrNode node( NodeKey nodeKey,\n                          AbstractJcrNode.Type expectedType,\n                          NodeKey parentKey )", "full_signature": " AbstractJcrNode node( NodeKey nodeKey,\n                          AbstractJcrNode.Type expectedType,\n                          NodeKey parentKey )", "class_method_signature": "JcrSession.node( NodeKey nodeKey,\n                          AbstractJcrNode.Type expectedType,\n                          NodeKey parentKey )", "testcase": false, "constructor": false}, {"identifier": "node", "parameters": "( CachedNode cachedNode,\n                          AbstractJcrNode.Type expectedType )", "modifiers": "", "return": "AbstractJcrNode", "signature": "AbstractJcrNode node( CachedNode cachedNode,\n                          AbstractJcrNode.Type expectedType )", "full_signature": " AbstractJcrNode node( CachedNode cachedNode,\n                          AbstractJcrNode.Type expectedType )", "class_method_signature": "JcrSession.node( CachedNode cachedNode,\n                          AbstractJcrNode.Type expectedType )", "testcase": false, "constructor": false}, {"identifier": "node", "parameters": "( CachedNode cachedNode,\n                          AbstractJcrNode.Type expectedType,\n                          NodeKey parentKey )", "modifiers": "", "return": "AbstractJcrNode", "signature": "AbstractJcrNode node( CachedNode cachedNode,\n                          AbstractJcrNode.Type expectedType,\n                          NodeKey parentKey )", "full_signature": " AbstractJcrNode node( CachedNode cachedNode,\n                          AbstractJcrNode.Type expectedType,\n                          NodeKey parentKey )", "class_method_signature": "JcrSession.node( CachedNode cachedNode,\n                          AbstractJcrNode.Type expectedType,\n                          NodeKey parentKey )", "testcase": false, "constructor": false}, {"identifier": "node", "parameters": "( CachedNode cachedNode,\n                          SessionCache cache,\n                          AbstractJcrNode.Type expectedType,\n                          NodeKey parentKey )", "modifiers": "", "return": "AbstractJcrNode", "signature": "AbstractJcrNode node( CachedNode cachedNode,\n                          SessionCache cache,\n                          AbstractJcrNode.Type expectedType,\n                          NodeKey parentKey )", "full_signature": " AbstractJcrNode node( CachedNode cachedNode,\n                          SessionCache cache,\n                          AbstractJcrNode.Type expectedType,\n                          NodeKey parentKey )", "class_method_signature": "JcrSession.node( CachedNode cachedNode,\n                          SessionCache cache,\n                          AbstractJcrNode.Type expectedType,\n                          NodeKey parentKey )", "testcase": false, "constructor": false}, {"identifier": "cachedNode", "parameters": "( Path absolutePath,\n                                 boolean checkReadPermission )", "modifiers": "final", "return": "CachedNode", "signature": "CachedNode cachedNode( Path absolutePath,\n                                 boolean checkReadPermission )", "full_signature": "final CachedNode cachedNode( Path absolutePath,\n                                 boolean checkReadPermission )", "class_method_signature": "JcrSession.cachedNode( Path absolutePath,\n                                 boolean checkReadPermission )", "testcase": false, "constructor": false}, {"identifier": "cachedNode", "parameters": "( SessionCache cache,\n                                 CachedNode node,\n                                 Path path,\n                                 String... actions )", "modifiers": "final", "return": "CachedNode", "signature": "CachedNode cachedNode( SessionCache cache,\n                                 CachedNode node,\n                                 Path path,\n                                 String... actions )", "full_signature": "final CachedNode cachedNode( SessionCache cache,\n                                 CachedNode node,\n                                 Path path,\n                                 String... actions )", "class_method_signature": "JcrSession.cachedNode( SessionCache cache,\n                                 CachedNode node,\n                                 Path path,\n                                 String... actions )", "testcase": false, "constructor": false}, {"identifier": "mutableNode", "parameters": "( SessionCache cache,\n                                         CachedNode node,\n                                         Path path,\n                                         String... actions )", "modifiers": "final", "return": "MutableCachedNode", "signature": "MutableCachedNode mutableNode( SessionCache cache,\n                                         CachedNode node,\n                                         Path path,\n                                         String... actions )", "full_signature": "final MutableCachedNode mutableNode( SessionCache cache,\n                                         CachedNode node,\n                                         Path path,\n                                         String... actions )", "class_method_signature": "JcrSession.mutableNode( SessionCache cache,\n                                         CachedNode node,\n                                         Path path,\n                                         String... actions )", "testcase": false, "constructor": false}, {"identifier": "node", "parameters": "( CachedNode node,\n                                Path path )", "modifiers": "final", "return": "AbstractJcrNode", "signature": "AbstractJcrNode node( CachedNode node,\n                                Path path )", "full_signature": "final AbstractJcrNode node( CachedNode node,\n                                Path path )", "class_method_signature": "JcrSession.node( CachedNode node,\n                                Path path )", "testcase": false, "constructor": false}, {"identifier": "node", "parameters": "( Path absolutePath )", "modifiers": "final", "return": "AbstractJcrNode", "signature": "AbstractJcrNode node( Path absolutePath )", "full_signature": "final AbstractJcrNode node( Path absolutePath )", "class_method_signature": "JcrSession.node( Path absolutePath )", "testcase": false, "constructor": false}, {"identifier": "findItem", "parameters": "( NodeKey nodeKey,\n                                    Path relativePath )", "modifiers": "final", "return": "AbstractJcrItem", "signature": "AbstractJcrItem findItem( NodeKey nodeKey,\n                                    Path relativePath )", "full_signature": "final AbstractJcrItem findItem( NodeKey nodeKey,\n                                    Path relativePath )", "class_method_signature": "JcrSession.findItem( NodeKey nodeKey,\n                                    Path relativePath )", "testcase": false, "constructor": false}, {"identifier": "findItem", "parameters": "( AbstractJcrNode node,\n                                    Path relativePath )", "modifiers": "final", "return": "AbstractJcrItem", "signature": "AbstractJcrItem findItem( AbstractJcrNode node,\n                                    Path relativePath )", "full_signature": "final AbstractJcrItem findItem( AbstractJcrNode node,\n                                    Path relativePath )", "class_method_signature": "JcrSession.findItem( AbstractJcrNode node,\n                                    Path relativePath )", "testcase": false, "constructor": false}, {"identifier": "absolutePathFor", "parameters": "( String absPath )", "modifiers": "", "return": "Path", "signature": "Path absolutePathFor( String absPath )", "full_signature": " Path absolutePathFor( String absPath )", "class_method_signature": "JcrSession.absolutePathFor( String absPath )", "testcase": false, "constructor": false}, {"identifier": "getRepository", "parameters": "()", "modifiers": "@Override public", "return": "JcrRepository", "signature": "JcrRepository getRepository()", "full_signature": "@Override public JcrRepository getRepository()", "class_method_signature": "JcrSession.getRepository()", "testcase": false, "constructor": false}, {"identifier": "getUserID", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getUserID()", "full_signature": "@Override public String getUserID()", "class_method_signature": "JcrSession.getUserID()", "testcase": false, "constructor": false}, {"identifier": "isAnonymous", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAnonymous()", "full_signature": "public boolean isAnonymous()", "class_method_signature": "JcrSession.isAnonymous()", "testcase": false, "constructor": false}, {"identifier": "getAttributeNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getAttributeNames()", "full_signature": "@Override public String[] getAttributeNames()", "class_method_signature": "JcrSession.getAttributeNames()", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "( String name )", "modifiers": "@Override public", "return": "Object", "signature": "Object getAttribute( String name )", "full_signature": "@Override public Object getAttribute( String name )", "class_method_signature": "JcrSession.getAttribute( String name )", "testcase": false, "constructor": false}, {"identifier": "getWorkspace", "parameters": "()", "modifiers": "@Override public", "return": "JcrWorkspace", "signature": "JcrWorkspace getWorkspace()", "full_signature": "@Override public JcrWorkspace getWorkspace()", "class_method_signature": "JcrSession.getWorkspace()", "testcase": false, "constructor": false}, {"identifier": "getRootNode", "parameters": "()", "modifiers": "@Override public", "return": "JcrRootNode", "signature": "JcrRootNode getRootNode()", "full_signature": "@Override public JcrRootNode getRootNode()", "class_method_signature": "JcrSession.getRootNode()", "testcase": false, "constructor": false}, {"identifier": "impersonate", "parameters": "( Credentials credentials )", "modifiers": "@Override public", "return": "Session", "signature": "Session impersonate( Credentials credentials )", "full_signature": "@Override public Session impersonate( Credentials credentials )", "class_method_signature": "JcrSession.impersonate( Credentials credentials )", "testcase": false, "constructor": false}, {"identifier": "getNodeByUUID", "parameters": "( String uuid )", "modifiers": "@Deprecated @Override public", "return": "AbstractJcrNode", "signature": "AbstractJcrNode getNodeByUUID( String uuid )", "full_signature": "@Deprecated @Override public AbstractJcrNode getNodeByUUID( String uuid )", "class_method_signature": "JcrSession.getNodeByUUID( String uuid )", "testcase": false, "constructor": false}, {"identifier": "getNodeByIdentifier", "parameters": "( String id )", "modifiers": "@Override public", "return": "AbstractJcrNode", "signature": "AbstractJcrNode getNodeByIdentifier( String id )", "full_signature": "@Override public AbstractJcrNode getNodeByIdentifier( String id )", "class_method_signature": "JcrSession.getNodeByIdentifier( String id )", "testcase": false, "constructor": false}, {"identifier": "getNonSystemNodeByIdentifier", "parameters": "( String id )", "modifiers": "public", "return": "AbstractJcrNode", "signature": "AbstractJcrNode getNonSystemNodeByIdentifier( String id )", "full_signature": "public AbstractJcrNode getNonSystemNodeByIdentifier( String id )", "class_method_signature": "JcrSession.getNonSystemNodeByIdentifier( String id )", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "( String absPath )", "modifiers": "@Override public", "return": "AbstractJcrNode", "signature": "AbstractJcrNode getNode( String absPath )", "full_signature": "@Override public AbstractJcrNode getNode( String absPath )", "class_method_signature": "JcrSession.getNode( String absPath )", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "( String absPath,\n                                       boolean accessControlScope )", "modifiers": "protected", "return": "AbstractJcrNode", "signature": "AbstractJcrNode getNode( String absPath,\n                                       boolean accessControlScope )", "full_signature": "protected AbstractJcrNode getNode( String absPath,\n                                       boolean accessControlScope )", "class_method_signature": "JcrSession.getNode( String absPath,\n                                       boolean accessControlScope )", "testcase": false, "constructor": false}, {"identifier": "getItem", "parameters": "( String absPath )", "modifiers": "@Override public", "return": "AbstractJcrItem", "signature": "AbstractJcrItem getItem( String absPath )", "full_signature": "@Override public AbstractJcrItem getItem( String absPath )", "class_method_signature": "JcrSession.getItem( String absPath )", "testcase": false, "constructor": false}, {"identifier": "getItem", "parameters": "( Path path )", "modifiers": "", "return": "AbstractJcrItem", "signature": "AbstractJcrItem getItem( Path path )", "full_signature": " AbstractJcrItem getItem( Path path )", "class_method_signature": "JcrSession.getItem( Path path )", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "( String absPath )", "modifiers": "@Override public", "return": "Property", "signature": "Property getProperty( String absPath )", "full_signature": "@Override public Property getProperty( String absPath )", "class_method_signature": "JcrSession.getProperty( String absPath )", "testcase": false, "constructor": false}, {"identifier": "itemExists", "parameters": "( String absPath )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean itemExists( String absPath )", "full_signature": "@Override public boolean itemExists( String absPath )", "class_method_signature": "JcrSession.itemExists( String absPath )", "testcase": false, "constructor": false}, {"identifier": "removeItem", "parameters": "( String absPath )", "modifiers": "@Override public", "return": "void", "signature": "void removeItem( String absPath )", "full_signature": "@Override public void removeItem( String absPath )", "class_method_signature": "JcrSession.removeItem( String absPath )", "testcase": false, "constructor": false}, {"identifier": "nodeExists", "parameters": "( String absPath )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean nodeExists( String absPath )", "full_signature": "@Override public boolean nodeExists( String absPath )", "class_method_signature": "JcrSession.nodeExists( String absPath )", "testcase": false, "constructor": false}, {"identifier": "nodeExists", "parameters": "( NodeKey key )", "modifiers": "protected", "return": "boolean", "signature": "boolean nodeExists( NodeKey key )", "full_signature": "protected boolean nodeExists( NodeKey key )", "class_method_signature": "JcrSession.nodeExists( NodeKey key )", "testcase": false, "constructor": false}, {"identifier": "propertyExists", "parameters": "( String absPath )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean propertyExists( String absPath )", "full_signature": "@Override public boolean propertyExists( String absPath )", "class_method_signature": "JcrSession.propertyExists( String absPath )", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "( String srcAbsPath,\n                      String destAbsPath )", "modifiers": "@Override public", "return": "void", "signature": "void move( String srcAbsPath,\n                      String destAbsPath )", "full_signature": "@Override public void move( String srcAbsPath,\n                      String destAbsPath )", "class_method_signature": "JcrSession.move( String srcAbsPath,\n                      String destAbsPath )", "testcase": false, "constructor": false}, {"identifier": "validateMoveForExternalNodes", "parameters": "( Path srcPath,\n                                               Path destPath )", "modifiers": "private", "return": "void", "signature": "void validateMoveForExternalNodes( Path srcPath,\n                                               Path destPath )", "full_signature": "private void validateMoveForExternalNodes( Path srcPath,\n                                               Path destPath )", "class_method_signature": "JcrSession.validateMoveForExternalNodes( Path srcPath,\n                                               Path destPath )", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void save()", "full_signature": "@Override public void save()", "class_method_signature": "JcrSession.save()", "testcase": false, "constructor": false}, {"identifier": "clearState", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clearState()", "full_signature": "private void clearState()", "class_method_signature": "JcrSession.clearState()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "( AbstractJcrNode node )", "modifiers": "", "return": "void", "signature": "void save( AbstractJcrNode node )", "full_signature": " void save( AbstractJcrNode node )", "class_method_signature": "JcrSession.save( AbstractJcrNode node )", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "( boolean keepChanges )", "modifiers": "@Override public", "return": "void", "signature": "void refresh( boolean keepChanges )", "full_signature": "@Override public void refresh( boolean keepChanges )", "class_method_signature": "JcrSession.refresh( boolean keepChanges )", "testcase": false, "constructor": false}, {"identifier": "hasPendingChanges", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPendingChanges()", "full_signature": "@Override public boolean hasPendingChanges()", "class_method_signature": "JcrSession.hasPendingChanges()", "testcase": false, "constructor": false}, {"identifier": "getValueFactory", "parameters": "()", "modifiers": "@Override public", "return": "JcrValueFactory", "signature": "JcrValueFactory getValueFactory()", "full_signature": "@Override public JcrValueFactory getValueFactory()", "class_method_signature": "JcrSession.getValueFactory()", "testcase": false, "constructor": false}, {"identifier": "getValueFactory", "parameters": "( String binaryStoreHint )", "modifiers": "@Override public", "return": "ValueFactory", "signature": "ValueFactory getValueFactory( String binaryStoreHint )", "full_signature": "@Override public ValueFactory getValueFactory( String binaryStoreHint )", "class_method_signature": "JcrSession.getValueFactory( String binaryStoreHint )", "testcase": false, "constructor": false}, {"identifier": "pathSupplierFor", "parameters": "( final Path path )", "modifiers": "private", "return": "PathSupplier", "signature": "PathSupplier pathSupplierFor( final Path path )", "full_signature": "private PathSupplier pathSupplierFor( final Path path )", "class_method_signature": "JcrSession.pathSupplierFor( final Path path )", "testcase": false, "constructor": false}, {"identifier": "pathSupplierFor", "parameters": "( final CachedNode node,\n                                          final NodeCache nodeCache )", "modifiers": "private", "return": "PathSupplier", "signature": "PathSupplier pathSupplierFor( final CachedNode node,\n                                          final NodeCache nodeCache )", "full_signature": "private PathSupplier pathSupplierFor( final CachedNode node,\n                                          final NodeCache nodeCache )", "class_method_signature": "JcrSession.pathSupplierFor( final CachedNode node,\n                                          final NodeCache nodeCache )", "testcase": false, "constructor": false}, {"identifier": "pathSupplierFor", "parameters": "( final AbstractJcrItem item )", "modifiers": "private", "return": "PathSupplier", "signature": "PathSupplier pathSupplierFor( final AbstractJcrItem item )", "full_signature": "private PathSupplier pathSupplierFor( final AbstractJcrItem item )", "class_method_signature": "JcrSession.pathSupplierFor( final AbstractJcrItem item )", "testcase": false, "constructor": false}, {"identifier": "hasPermission", "parameters": "( String workspaceName,\n                                   PathSupplier pathSupplier,\n                                   String... actions )", "modifiers": "private", "return": "boolean", "signature": "boolean hasPermission( String workspaceName,\n                                   PathSupplier pathSupplier,\n                                   String... actions )", "full_signature": "private boolean hasPermission( String workspaceName,\n                                   PathSupplier pathSupplier,\n                                   String... actions )", "class_method_signature": "JcrSession.hasPermission( String workspaceName,\n                                   PathSupplier pathSupplier,\n                                   String... actions )", "testcase": false, "constructor": false}, {"identifier": "hasPermissionOnExternalPath", "parameters": "( PathSupplier pathSupplier,\n                                                 String... actions )", "modifiers": "private", "return": "boolean", "signature": "boolean hasPermissionOnExternalPath( PathSupplier pathSupplier,\n                                                 String... actions )", "full_signature": "private boolean hasPermissionOnExternalPath( PathSupplier pathSupplier,\n                                                 String... actions )", "class_method_signature": "JcrSession.hasPermissionOnExternalPath( PathSupplier pathSupplier,\n                                                 String... actions )", "testcase": false, "constructor": false}, {"identifier": "hasRole", "parameters": "( SecurityContext context,\n                            String roleName,\n                            String repositoryName,\n                            String workspaceName )", "modifiers": "static", "return": "boolean", "signature": "boolean hasRole( SecurityContext context,\n                            String roleName,\n                            String repositoryName,\n                            String workspaceName )", "full_signature": "static boolean hasRole( SecurityContext context,\n                            String roleName,\n                            String repositoryName,\n                            String workspaceName )", "class_method_signature": "JcrSession.hasRole( SecurityContext context,\n                            String roleName,\n                            String repositoryName,\n                            String workspaceName )", "testcase": false, "constructor": false}, {"identifier": "checkPermission", "parameters": "( String path,\n                                 String actions )", "modifiers": "@Override public", "return": "void", "signature": "void checkPermission( String path,\n                                 String actions )", "full_signature": "@Override public void checkPermission( String path,\n                                 String actions )", "class_method_signature": "JcrSession.checkPermission( String path,\n                                 String actions )", "testcase": false, "constructor": false}, {"identifier": "checkPermission", "parameters": "( Path path,\n                          String... actions )", "modifiers": "", "return": "void", "signature": "void checkPermission( Path path,\n                          String... actions )", "full_signature": " void checkPermission( Path path,\n                          String... actions )", "class_method_signature": "JcrSession.checkPermission( Path path,\n                          String... actions )", "testcase": false, "constructor": false}, {"identifier": "checkPermission", "parameters": "( PathSupplier pathSupplier,\n                          String... actions )", "modifiers": "", "return": "void", "signature": "void checkPermission( PathSupplier pathSupplier,\n                          String... actions )", "full_signature": " void checkPermission( PathSupplier pathSupplier,\n                          String... actions )", "class_method_signature": "JcrSession.checkPermission( PathSupplier pathSupplier,\n                          String... actions )", "testcase": false, "constructor": false}, {"identifier": "checkPermission", "parameters": "( AbstractJcrItem item,\n                          String... actions )", "modifiers": "", "return": "void", "signature": "void checkPermission( AbstractJcrItem item,\n                          String... actions )", "full_signature": " void checkPermission( AbstractJcrItem item,\n                          String... actions )", "class_method_signature": "JcrSession.checkPermission( AbstractJcrItem item,\n                          String... actions )", "testcase": false, "constructor": false}, {"identifier": "checkPermission", "parameters": "( CachedNode node,\n                          NodeCache cache,\n                          String... actions )", "modifiers": "", "return": "void", "signature": "void checkPermission( CachedNode node,\n                          NodeCache cache,\n                          String... actions )", "full_signature": " void checkPermission( CachedNode node,\n                          NodeCache cache,\n                          String... actions )", "class_method_signature": "JcrSession.checkPermission( CachedNode node,\n                          NodeCache cache,\n                          String... actions )", "testcase": false, "constructor": false}, {"identifier": "checkPermission", "parameters": "( String workspaceName,\n                          Path path,\n                          String... actions )", "modifiers": "", "return": "void", "signature": "void checkPermission( String workspaceName,\n                          Path path,\n                          String... actions )", "full_signature": " void checkPermission( String workspaceName,\n                          Path path,\n                          String... actions )", "class_method_signature": "JcrSession.checkPermission( String workspaceName,\n                          Path path,\n                          String... actions )", "testcase": false, "constructor": false}, {"identifier": "checkPermission", "parameters": "( String workspaceName,\n                          PathSupplier pathSupplier,\n                          String... actions )", "modifiers": "", "return": "void", "signature": "void checkPermission( String workspaceName,\n                          PathSupplier pathSupplier,\n                          String... actions )", "full_signature": " void checkPermission( String workspaceName,\n                          PathSupplier pathSupplier,\n                          String... actions )", "class_method_signature": "JcrSession.checkPermission( String workspaceName,\n                          PathSupplier pathSupplier,\n                          String... actions )", "testcase": false, "constructor": false}, {"identifier": "checkWorkspacePermission", "parameters": "( String workspaceName,\n                                   String... actions )", "modifiers": "", "return": "void", "signature": "void checkWorkspacePermission( String workspaceName,\n                                   String... actions )", "full_signature": " void checkWorkspacePermission( String workspaceName,\n                                   String... actions )", "class_method_signature": "JcrSession.checkWorkspacePermission( String workspaceName,\n                                   String... actions )", "testcase": false, "constructor": false}, {"identifier": "hasPermission", "parameters": "( String absPath,\n                                  String actions )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPermission( String absPath,\n                                  String actions )", "full_signature": "@Override public boolean hasPermission( String absPath,\n                                  String actions )", "class_method_signature": "JcrSession.hasPermission( String absPath,\n                                  String actions )", "testcase": false, "constructor": false}, {"identifier": "hasCapability", "parameters": "( String methodName,\n                                  Object target,\n                                  Object[] arguments )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasCapability( String methodName,\n                                  Object target,\n                                  Object[] arguments )", "full_signature": "@Override public boolean hasCapability( String methodName,\n                                  Object target,\n                                  Object[] arguments )", "class_method_signature": "JcrSession.hasCapability( String methodName,\n                                  Object target,\n                                  Object[] arguments )", "testcase": false, "constructor": false}, {"identifier": "getImportContentHandler", "parameters": "( String parentAbsPath,\n                                                   int uuidBehavior )", "modifiers": "@Override public", "return": "ContentHandler", "signature": "ContentHandler getImportContentHandler( String parentAbsPath,\n                                                   int uuidBehavior )", "full_signature": "@Override public ContentHandler getImportContentHandler( String parentAbsPath,\n                                                   int uuidBehavior )", "class_method_signature": "JcrSession.getImportContentHandler( String parentAbsPath,\n                                                   int uuidBehavior )", "testcase": false, "constructor": false}, {"identifier": "getImportContentHandler", "parameters": "( String parentAbsPath, int uuidBehavior,\n                                                    String binaryStoreHint )", "modifiers": "@Override public", "return": "ContentHandler", "signature": "ContentHandler getImportContentHandler( String parentAbsPath, int uuidBehavior,\n                                                    String binaryStoreHint )", "full_signature": "@Override public ContentHandler getImportContentHandler( String parentAbsPath, int uuidBehavior,\n                                                    String binaryStoreHint )", "class_method_signature": "JcrSession.getImportContentHandler( String parentAbsPath, int uuidBehavior,\n                                                    String binaryStoreHint )", "testcase": false, "constructor": false}, {"identifier": "initBaseVersionKeys", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void initBaseVersionKeys()", "full_signature": "protected void initBaseVersionKeys()", "class_method_signature": "JcrSession.initBaseVersionKeys()", "testcase": false, "constructor": false}, {"identifier": "initOriginalVersionKeys", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void initOriginalVersionKeys()", "full_signature": "protected void initOriginalVersionKeys()", "class_method_signature": "JcrSession.initOriginalVersionKeys()", "testcase": false, "constructor": false}, {"identifier": "importXML", "parameters": "( String parentAbsPath,\n                           InputStream in,\n                           int uuidBehavior )", "modifiers": "@Override public", "return": "void", "signature": "void importXML( String parentAbsPath,\n                           InputStream in,\n                           int uuidBehavior )", "full_signature": "@Override public void importXML( String parentAbsPath,\n                           InputStream in,\n                           int uuidBehavior )", "class_method_signature": "JcrSession.importXML( String parentAbsPath,\n                           InputStream in,\n                           int uuidBehavior )", "testcase": false, "constructor": false}, {"identifier": "importXML", "parameters": "( String parentAbsPath,\n                           InputStream in,\n                           int uuidBehavior,\n                           String binaryStoreHint )", "modifiers": "@Override public", "return": "void", "signature": "void importXML( String parentAbsPath,\n                           InputStream in,\n                           int uuidBehavior,\n                           String binaryStoreHint )", "full_signature": "@Override public void importXML( String parentAbsPath,\n                           InputStream in,\n                           int uuidBehavior,\n                           String binaryStoreHint )", "class_method_signature": "JcrSession.importXML( String parentAbsPath,\n                           InputStream in,\n                           int uuidBehavior,\n                           String binaryStoreHint )", "testcase": false, "constructor": false}, {"identifier": "exportSystemView", "parameters": "( String absPath,\n                                  ContentHandler contentHandler,\n                                  boolean skipBinary,\n                                  boolean noRecurse )", "modifiers": "@Override public", "return": "void", "signature": "void exportSystemView( String absPath,\n                                  ContentHandler contentHandler,\n                                  boolean skipBinary,\n                                  boolean noRecurse )", "full_signature": "@Override public void exportSystemView( String absPath,\n                                  ContentHandler contentHandler,\n                                  boolean skipBinary,\n                                  boolean noRecurse )", "class_method_signature": "JcrSession.exportSystemView( String absPath,\n                                  ContentHandler contentHandler,\n                                  boolean skipBinary,\n                                  boolean noRecurse )", "testcase": false, "constructor": false}, {"identifier": "exportSystemView", "parameters": "( String absPath,\n                                  OutputStream out,\n                                  boolean skipBinary,\n                                  boolean noRecurse )", "modifiers": "@Override public", "return": "void", "signature": "void exportSystemView( String absPath,\n                                  OutputStream out,\n                                  boolean skipBinary,\n                                  boolean noRecurse )", "full_signature": "@Override public void exportSystemView( String absPath,\n                                  OutputStream out,\n                                  boolean skipBinary,\n                                  boolean noRecurse )", "class_method_signature": "JcrSession.exportSystemView( String absPath,\n                                  OutputStream out,\n                                  boolean skipBinary,\n                                  boolean noRecurse )", "testcase": false, "constructor": false}, {"identifier": "exportDocumentView", "parameters": "( String absPath,\n                                    ContentHandler contentHandler,\n                                    boolean skipBinary,\n                                    boolean noRecurse )", "modifiers": "@Override public", "return": "void", "signature": "void exportDocumentView( String absPath,\n                                    ContentHandler contentHandler,\n                                    boolean skipBinary,\n                                    boolean noRecurse )", "full_signature": "@Override public void exportDocumentView( String absPath,\n                                    ContentHandler contentHandler,\n                                    boolean skipBinary,\n                                    boolean noRecurse )", "class_method_signature": "JcrSession.exportDocumentView( String absPath,\n                                    ContentHandler contentHandler,\n                                    boolean skipBinary,\n                                    boolean noRecurse )", "testcase": false, "constructor": false}, {"identifier": "exportDocumentView", "parameters": "( String absPath,\n                                    OutputStream out,\n                                    boolean skipBinary,\n                                    boolean noRecurse )", "modifiers": "@Override public", "return": "void", "signature": "void exportDocumentView( String absPath,\n                                    OutputStream out,\n                                    boolean skipBinary,\n                                    boolean noRecurse )", "full_signature": "@Override public void exportDocumentView( String absPath,\n                                    OutputStream out,\n                                    boolean skipBinary,\n                                    boolean noRecurse )", "class_method_signature": "JcrSession.exportDocumentView( String absPath,\n                                    OutputStream out,\n                                    boolean skipBinary,\n                                    boolean noRecurse )", "testcase": false, "constructor": false}, {"identifier": "getNamespacePrefix", "parameters": "( String uri )", "modifiers": "@Override public", "return": "String", "signature": "String getNamespacePrefix( String uri )", "full_signature": "@Override public String getNamespacePrefix( String uri )", "class_method_signature": "JcrSession.getNamespacePrefix( String uri )", "testcase": false, "constructor": false}, {"identifier": "getNamespacePrefixes", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getNamespacePrefixes()", "full_signature": "@Override public String[] getNamespacePrefixes()", "class_method_signature": "JcrSession.getNamespacePrefixes()", "testcase": false, "constructor": false}, {"identifier": "getNamespaceURI", "parameters": "( String prefix )", "modifiers": "@Override public", "return": "String", "signature": "String getNamespaceURI( String prefix )", "full_signature": "@Override public String getNamespaceURI( String prefix )", "class_method_signature": "JcrSession.getNamespaceURI( String prefix )", "testcase": false, "constructor": false}, {"identifier": "setNamespacePrefix", "parameters": "( String newPrefix,\n                                    String existingUri )", "modifiers": "@Override public", "return": "void", "signature": "void setNamespacePrefix( String newPrefix,\n                                    String existingUri )", "full_signature": "@Override public void setNamespacePrefix( String newPrefix,\n                                    String existingUri )", "class_method_signature": "JcrSession.setNamespacePrefix( String newPrefix,\n                                    String existingUri )", "testcase": false, "constructor": false}, {"identifier": "logout", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void logout()", "full_signature": "@Override public synchronized void logout()", "class_method_signature": "JcrSession.logout()", "testcase": false, "constructor": false}, {"identifier": "isLive", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLive()", "full_signature": "@Override public boolean isLive()", "class_method_signature": "JcrSession.isLive()", "testcase": false, "constructor": false}, {"identifier": "addLockToken", "parameters": "( String lockToken )", "modifiers": "@Override @SuppressWarnings(\"deprecation\") public", "return": "void", "signature": "void addLockToken( String lockToken )", "full_signature": "@Override @SuppressWarnings(\"deprecation\") public void addLockToken( String lockToken )", "class_method_signature": "JcrSession.addLockToken( String lockToken )", "testcase": false, "constructor": false}, {"identifier": "getLockTokens", "parameters": "()", "modifiers": "@Override @SuppressWarnings(\"deprecation\") public", "return": "String[]", "signature": "String[] getLockTokens()", "full_signature": "@Override @SuppressWarnings(\"deprecation\") public String[] getLockTokens()", "class_method_signature": "JcrSession.getLockTokens()", "testcase": false, "constructor": false}, {"identifier": "removeLockToken", "parameters": "( String lockToken )", "modifiers": "@Override @SuppressWarnings(\"deprecation\") public", "return": "void", "signature": "void removeLockToken( String lockToken )", "full_signature": "@Override @SuppressWarnings(\"deprecation\") public void removeLockToken( String lockToken )", "class_method_signature": "JcrSession.removeLockToken( String lockToken )", "testcase": false, "constructor": false}, {"identifier": "getAccessControlManager", "parameters": "()", "modifiers": "@Override public", "return": "AccessControlManager", "signature": "AccessControlManager getAccessControlManager()", "full_signature": "@Override public AccessControlManager getAccessControlManager()", "class_method_signature": "JcrSession.getAccessControlManager()", "testcase": false, "constructor": false}, {"identifier": "getRetentionManager", "parameters": "()", "modifiers": "@Override public", "return": "RetentionManager", "signature": "RetentionManager getRetentionManager()", "full_signature": "@Override public RetentionManager getRetentionManager()", "class_method_signature": "JcrSession.getRetentionManager()", "testcase": false, "constructor": false}, {"identifier": "getPathForCorrespondingNode", "parameters": "( String workspaceName,\n                                      NodeKey key,\n                                      Path relativePath )", "modifiers": "", "return": "Path", "signature": "Path getPathForCorrespondingNode( String workspaceName,\n                                      NodeKey key,\n                                      Path relativePath )", "full_signature": " Path getPathForCorrespondingNode( String workspaceName,\n                                      NodeKey key,\n                                      Path relativePath )", "class_method_signature": "JcrSession.getPathForCorrespondingNode( String workspaceName,\n                                      NodeKey key,\n                                      Path relativePath )", "testcase": false, "constructor": false}, {"identifier": "createNodeKeyFromIdentifier", "parameters": "( String identifier,\n                                                       NodeKey rootKey )", "modifiers": "public static", "return": "NodeKey", "signature": "NodeKey createNodeKeyFromIdentifier( String identifier,\n                                                       NodeKey rootKey )", "full_signature": "public static NodeKey createNodeKeyFromIdentifier( String identifier,\n                                                       NodeKey rootKey )", "class_method_signature": "JcrSession.createNodeKeyFromIdentifier( String identifier,\n                                                       NodeKey rootKey )", "testcase": false, "constructor": false}, {"identifier": "isForeignKey", "parameters": "( NodeKey key,\n                                        NodeKey rootKey )", "modifiers": "public static", "return": "boolean", "signature": "boolean isForeignKey( NodeKey key,\n                                        NodeKey rootKey )", "full_signature": "public static boolean isForeignKey( NodeKey key,\n                                        NodeKey rootKey )", "class_method_signature": "JcrSession.isForeignKey( NodeKey key,\n                                        NodeKey rootKey )", "testcase": false, "constructor": false}, {"identifier": "nodeIdentifier", "parameters": "( NodeKey key,\n                                         NodeKey rootKey )", "modifiers": "public static", "return": "String", "signature": "String nodeIdentifier( NodeKey key,\n                                         NodeKey rootKey )", "full_signature": "public static String nodeIdentifier( NodeKey key,\n                                         NodeKey rootKey )", "class_method_signature": "JcrSession.nodeIdentifier( NodeKey key,\n                                         NodeKey rootKey )", "testcase": false, "constructor": false}, {"identifier": "isForeignKey", "parameters": "( NodeKey key )", "modifiers": "protected final", "return": "boolean", "signature": "boolean isForeignKey( NodeKey key )", "full_signature": "protected final boolean isForeignKey( NodeKey key )", "class_method_signature": "JcrSession.isForeignKey( NodeKey key )", "testcase": false, "constructor": false}, {"identifier": "nodeIdentifier", "parameters": "( NodeKey key )", "modifiers": "protected final", "return": "String", "signature": "String nodeIdentifier( NodeKey key )", "full_signature": "protected final String nodeIdentifier( NodeKey key )", "class_method_signature": "JcrSession.nodeIdentifier( NodeKey key )", "testcase": false, "constructor": false}, {"identifier": "sequence", "parameters": "( String sequencerName,\n                             Property inputProperty,\n                             Node outputNode )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean sequence( String sequencerName,\n                             Property inputProperty,\n                             Node outputNode )", "full_signature": "@Override public boolean sequence( String sequencerName,\n                             Property inputProperty,\n                             Node outputNode )", "class_method_signature": "JcrSession.sequence( String sequencerName,\n                             Property inputProperty,\n                             Node outputNode )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "JcrSession.toString()", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "( final String localName )", "modifiers": "@Override public", "return": "String", "signature": "String decode( final String localName )", "full_signature": "@Override public String decode( final String localName )", "class_method_signature": "JcrSession.decode( final String localName )", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "( final String localName )", "modifiers": "@Override public", "return": "String", "signature": "String encode( final String localName )", "full_signature": "@Override public String encode( final String localName )", "class_method_signature": "JcrSession.encode( final String localName )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/JcrSession.java"}, "focal_method": {"identifier": "encode", "parameters": "( final String localName )", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String encode( final String localName ) {\n        return Path.JSR283_ENCODER.encode(localName);\n    }", "signature": "String encode( final String localName )", "full_signature": "@Override public String encode( final String localName )", "class_method_signature": "JcrSession.encode( final String localName )", "testcase": false, "constructor": false, "invocations": ["encode"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}