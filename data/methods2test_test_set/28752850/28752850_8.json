{"test_class": {"identifier": "TimepointTest", "superclass": "", "interfaces": "", "fields": [], "file": "library/src/test/java/com/wdullaer/materialdatetimepicker/time/TimepointTest.java"}, "test_case": {"identifier": "timepointsWithDifferentFieldsShouldNotBeDistinctInHashSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void timepointsWithDifferentFieldsShouldNotBeDistinctInHashSet() {\n        HashSet<Timepoint> timepoints = new HashSet<>(4);\n        timepoints.add(new Timepoint(12, 1, 0));\n        timepoints.add(new Timepoint(12, 2, 0));\n        timepoints.add(new Timepoint(12, 3, 0));\n        timepoints.add(new Timepoint(12, 4, 0));\n        Assert.assertEquals(timepoints.size(), 4);\n    }", "signature": "void timepointsWithDifferentFieldsShouldNotBeDistinctInHashSet()", "full_signature": "@Test public void timepointsWithDifferentFieldsShouldNotBeDistinctInHashSet()", "class_method_signature": "TimepointTest.timepointsWithDifferentFieldsShouldNotBeDistinctInHashSet()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "assertEquals", "size"]}, "focal_class": {"identifier": "Timepoint", "superclass": "", "interfaces": "implements Parcelable, Comparable<Timepoint>", "fields": [{"original_string": "private int hour;", "modifier": "private", "type": "int", "declarator": "hour", "var_name": "hour"}, {"original_string": "private int minute;", "modifier": "private", "type": "int", "declarator": "minute", "var_name": "minute"}, {"original_string": "private int second;", "modifier": "private", "type": "int", "declarator": "second", "var_name": "second"}, {"original_string": "public static final Parcelable.Creator<Timepoint> CREATOR\n            = new Parcelable.Creator<Timepoint>() {\n        public Timepoint createFromParcel(Parcel in) {\n            return new Timepoint(in);\n        }\n\n        public Timepoint[] newArray(int size) {\n            return new Timepoint[size];\n        }\n    };", "modifier": "public static final", "type": "Parcelable.Creator<Timepoint>", "declarator": "CREATOR\n            = new Parcelable.Creator<Timepoint>() {\n        public Timepoint createFromParcel(Parcel in) {\n            return new Timepoint(in);\n        }\n\n        public Timepoint[] newArray(int size) {\n            return new Timepoint[size];\n        }\n    }", "var_name": "CREATOR"}], "methods": [{"identifier": "Timepoint", "parameters": "(Timepoint time)", "modifiers": "public", "return": "", "signature": " Timepoint(Timepoint time)", "full_signature": "public  Timepoint(Timepoint time)", "class_method_signature": "Timepoint.Timepoint(Timepoint time)", "testcase": false, "constructor": true}, {"identifier": "Timepoint", "parameters": "(@IntRange(from=0, to=23) int hour,\n                     @IntRange(from=0, to=59) int minute,\n                     @IntRange(from=0, to=59) int second)", "modifiers": "public", "return": "", "signature": " Timepoint(@IntRange(from=0, to=23) int hour,\n                     @IntRange(from=0, to=59) int minute,\n                     @IntRange(from=0, to=59) int second)", "full_signature": "public  Timepoint(@IntRange(from=0, to=23) int hour,\n                     @IntRange(from=0, to=59) int minute,\n                     @IntRange(from=0, to=59) int second)", "class_method_signature": "Timepoint.Timepoint(@IntRange(from=0, to=23) int hour,\n                     @IntRange(from=0, to=59) int minute,\n                     @IntRange(from=0, to=59) int second)", "testcase": false, "constructor": true}, {"identifier": "Timepoint", "parameters": "(@IntRange(from=0, to=23) int hour,\n                     @IntRange(from=0, to=59) int minute)", "modifiers": "public", "return": "", "signature": " Timepoint(@IntRange(from=0, to=23) int hour,\n                     @IntRange(from=0, to=59) int minute)", "full_signature": "public  Timepoint(@IntRange(from=0, to=23) int hour,\n                     @IntRange(from=0, to=59) int minute)", "class_method_signature": "Timepoint.Timepoint(@IntRange(from=0, to=23) int hour,\n                     @IntRange(from=0, to=59) int minute)", "testcase": false, "constructor": true}, {"identifier": "Timepoint", "parameters": "(@IntRange(from=0, to=23) int hour)", "modifiers": "public", "return": "", "signature": " Timepoint(@IntRange(from=0, to=23) int hour)", "full_signature": "public  Timepoint(@IntRange(from=0, to=23) int hour)", "class_method_signature": "Timepoint.Timepoint(@IntRange(from=0, to=23) int hour)", "testcase": false, "constructor": true}, {"identifier": "Timepoint", "parameters": "(Parcel in)", "modifiers": "public", "return": "", "signature": " Timepoint(Parcel in)", "full_signature": "public  Timepoint(Parcel in)", "class_method_signature": "Timepoint.Timepoint(Parcel in)", "testcase": false, "constructor": true}, {"identifier": "getHour", "parameters": "()", "modifiers": "@IntRange(from=0, to=23) public", "return": "int", "signature": "int getHour()", "full_signature": "@IntRange(from=0, to=23) public int getHour()", "class_method_signature": "Timepoint.getHour()", "testcase": false, "constructor": false}, {"identifier": "getMinute", "parameters": "()", "modifiers": "@IntRange(from=0, to=59) public", "return": "int", "signature": "int getMinute()", "full_signature": "@IntRange(from=0, to=59) public int getMinute()", "class_method_signature": "Timepoint.getMinute()", "testcase": false, "constructor": false}, {"identifier": "getSecond", "parameters": "()", "modifiers": "@IntRange(from=0, to=59) public", "return": "int", "signature": "int getSecond()", "full_signature": "@IntRange(from=0, to=59) public int getSecond()", "class_method_signature": "Timepoint.getSecond()", "testcase": false, "constructor": false}, {"identifier": "isAM", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAM()", "full_signature": "public boolean isAM()", "class_method_signature": "Timepoint.isAM()", "testcase": false, "constructor": false}, {"identifier": "isPM", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPM()", "full_signature": "public boolean isPM()", "class_method_signature": "Timepoint.isPM()", "testcase": false, "constructor": false}, {"identifier": "setAM", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setAM()", "full_signature": "public void setAM()", "class_method_signature": "Timepoint.setAM()", "testcase": false, "constructor": false}, {"identifier": "setPM", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setPM()", "full_signature": "public void setPM()", "class_method_signature": "Timepoint.setPM()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(TYPE type, int value)", "modifiers": "public", "return": "void", "signature": "void add(TYPE type, int value)", "full_signature": "public void add(TYPE type, int value)", "class_method_signature": "Timepoint.add(TYPE type, int value)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(@NonNull TYPE type)", "modifiers": "public", "return": "int", "signature": "int get(@NonNull TYPE type)", "full_signature": "public int get(@NonNull TYPE type)", "class_method_signature": "Timepoint.get(@NonNull TYPE type)", "testcase": false, "constructor": false}, {"identifier": "toSeconds", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int toSeconds()", "full_signature": "public int toSeconds()", "class_method_signature": "Timepoint.toSeconds()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Timepoint.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Timepoint.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable Timepoint time, @NonNull TYPE resolution)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(@Nullable Timepoint time, @NonNull TYPE resolution)", "full_signature": "public boolean equals(@Nullable Timepoint time, @NonNull TYPE resolution)", "class_method_signature": "Timepoint.equals(@Nullable Timepoint time, @NonNull TYPE resolution)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(@NonNull Timepoint t)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(@NonNull Timepoint t)", "full_signature": "@Override public int compareTo(@NonNull Timepoint t)", "class_method_signature": "Timepoint.compareTo(@NonNull Timepoint t)", "testcase": false, "constructor": false}, {"identifier": "writeToParcel", "parameters": "(Parcel out, int flags)", "modifiers": "@Override public", "return": "void", "signature": "void writeToParcel(Parcel out, int flags)", "full_signature": "@Override public void writeToParcel(Parcel out, int flags)", "class_method_signature": "Timepoint.writeToParcel(Parcel out, int flags)", "testcase": false, "constructor": false}, {"identifier": "describeContents", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int describeContents()", "full_signature": "@Override public int describeContents()", "class_method_signature": "Timepoint.describeContents()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Timepoint.toString()", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/wdullaer/materialdatetimepicker/time/Timepoint.java"}, "focal_method": {"identifier": "add", "parameters": "(TYPE type, int value)", "modifiers": "public", "return": "void", "body": "public void add(TYPE type, int value) {\n        if (type == MINUTE) value *= 60;\n        if (type == HOUR) value *= 3600;\n        value += toSeconds();\n\n        switch (type) {\n            case SECOND:\n                int secondVal = (value % 3600) % 60;\n                if(secondVal<0){\n                    second = 60+secondVal;\n                    add(MINUTE, -1);\n                }else {\n                    second = secondVal;\n                }\n            case MINUTE:\n                int minuteVal = (value % 3600) / 60;\n                if(minuteVal<0){\n                    minute = 60+minuteVal;\n                    add(HOUR, -1);\n                }else {\n                    minute = minuteVal;\n                }\n            case HOUR:\n                int hourVal = (value / 3600) % 24;\n                if(hourVal<0){\n                    hour = 24+hourVal;\n                }else{\n                    hour=hourVal;\n                }\n        }\n    }", "signature": "void add(TYPE type, int value)", "full_signature": "public void add(TYPE type, int value)", "class_method_signature": "Timepoint.add(TYPE type, int value)", "testcase": false, "constructor": false, "invocations": ["toSeconds", "add", "add"]}, "repository": {"repo_id": 28752850, "url": "https://github.com/wdullaer/MaterialDateTimePicker", "stars": 4295, "created": "1/3/2015 7:41:03 PM +00:00", "updates": "2020-01-27T21:04:41+00:00", "fork": "False", "license": "licensed"}}