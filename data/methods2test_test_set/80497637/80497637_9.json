{"test_class": {"identifier": "ScannerContextTest", "superclass": "", "interfaces": "", "fields": [], "file": "mercator-core/src/test/java/org/lendingclub/mercator/core/ScannerContextTest.java"}, "test_case": {"identifier": "testCleanup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCleanup() throws InterruptedException {\n\n\t\tCountDownLatch latch = new CountDownLatch(1);\n\t\tCleanupTask task = new CleanupTask() {\n\n\t\t\t@Override\n\t\t\tpublic void cleanup(ScannerContext context) {\n\t\t\t\tlatch.countDown();\n\n\t\t\t}\n\t\t};\n\t\tnew ScannerContext().withName(\"test\").withCleanupTask(task).exec(ctx -> {\n\t\t\tAssertions.assertThat(ctx.getMap().get(\"name\")).isEqualTo(\"test\");\n\t\t});\n\n\t\tAssertions.assertThat(latch.await(1, TimeUnit.SECONDS)).isTrue();\n\n\t}", "signature": "void testCleanup()", "full_signature": "@Test public void testCleanup()", "class_method_signature": "ScannerContextTest.testCleanup()", "testcase": true, "constructor": false, "invocations": ["countDown", "exec", "withCleanupTask", "withName", "isEqualTo", "assertThat", "get", "getMap", "isTrue", "assertThat", "await"]}, "focal_class": {"identifier": "ScannerContext", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Logger logger = LoggerFactory.getLogger(ScannerContext.class);", "modifier": "static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ScannerContext.class)", "var_name": "logger"}, {"original_string": "Map<String, Object> map = Maps.newConcurrentMap();", "modifier": "", "type": "Map<String, Object>", "declarator": "map = Maps.newConcurrentMap()", "var_name": "map"}, {"original_string": "AtomicLong entityScanCount = new AtomicLong();", "modifier": "", "type": "AtomicLong", "declarator": "entityScanCount = new AtomicLong()", "var_name": "entityScanCount"}, {"original_string": "long t0 = System.currentTimeMillis();", "modifier": "", "type": "long", "declarator": "t0 = System.currentTimeMillis()", "var_name": "t0"}, {"original_string": "private static ThreadLocal<ScannerContext> threadLocalContext = new ThreadLocal<>();", "modifier": "private static", "type": "ThreadLocal<ScannerContext>", "declarator": "threadLocalContext = new ThreadLocal<>()", "var_name": "threadLocalContext"}, {"original_string": "private List<CleanupTask> cleanupQueue = Lists.newArrayList();", "modifier": "private", "type": "List<CleanupTask>", "declarator": "cleanupQueue = Lists.newArrayList()", "var_name": "cleanupQueue"}, {"original_string": "List<Exception> exceptions = Lists.newArrayList();", "modifier": "", "type": "List<Exception>", "declarator": "exceptions = Lists.newArrayList()", "var_name": "exceptions"}], "methods": [{"identifier": "hasExceptions", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasExceptions()", "full_signature": "public boolean hasExceptions()", "class_method_signature": "ScannerContext.hasExceptions()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "ScannerContext.getName()", "testcase": false, "constructor": false}, {"identifier": "getMap", "parameters": "()", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getMap()", "full_signature": "public Map<String, Object> getMap()", "class_method_signature": "ScannerContext.getMap()", "testcase": false, "constructor": false}, {"identifier": "withAttribute", "parameters": "(String key, Object val)", "modifiers": "public", "return": "ScannerContext", "signature": "ScannerContext withAttribute(String key, Object val)", "full_signature": "public ScannerContext withAttribute(String key, Object val)", "class_method_signature": "ScannerContext.withAttribute(String key, Object val)", "testcase": false, "constructor": false}, {"identifier": "addCleanupTask", "parameters": "(CleanupTask task)", "modifiers": "public", "return": "ScannerContext", "signature": "ScannerContext addCleanupTask(CleanupTask task)", "full_signature": "public ScannerContext addCleanupTask(CleanupTask task)", "class_method_signature": "ScannerContext.addCleanupTask(CleanupTask task)", "testcase": false, "constructor": false}, {"identifier": "withCleanupTask", "parameters": "(CleanupTask task)", "modifiers": "public", "return": "ScannerContext", "signature": "ScannerContext withCleanupTask(CleanupTask task)", "full_signature": "public ScannerContext withCleanupTask(CleanupTask task)", "class_method_signature": "ScannerContext.withCleanupTask(CleanupTask task)", "testcase": false, "constructor": false}, {"identifier": "getScannerContext", "parameters": "()", "modifiers": "public static", "return": "Optional<ScannerContext>", "signature": "Optional<ScannerContext> getScannerContext()", "full_signature": "public static Optional<ScannerContext> getScannerContext()", "class_method_signature": "ScannerContext.getScannerContext()", "testcase": false, "constructor": false}, {"identifier": "getEntityCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getEntityCount()", "full_signature": "public long getEntityCount()", "class_method_signature": "ScannerContext.getEntityCount()", "testcase": false, "constructor": false}, {"identifier": "incrementEntityCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long incrementEntityCount()", "full_signature": "public long incrementEntityCount()", "class_method_signature": "ScannerContext.incrementEntityCount()", "testcase": false, "constructor": false}, {"identifier": "getExceptions", "parameters": "()", "modifiers": "public", "return": "List<Exception>", "signature": "List<Exception> getExceptions()", "full_signature": "public List<Exception> getExceptions()", "class_method_signature": "ScannerContext.getExceptions()", "testcase": false, "constructor": false}, {"identifier": "markException", "parameters": "(Exception e)", "modifiers": "public", "return": "ScannerContext", "signature": "ScannerContext markException(Exception e)", "full_signature": "public ScannerContext markException(Exception e)", "class_method_signature": "ScannerContext.markException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "withName", "parameters": "(String name)", "modifiers": "public", "return": "ScannerContext", "signature": "ScannerContext withName(String name)", "full_signature": "public ScannerContext withName(String name)", "class_method_signature": "ScannerContext.withName(String name)", "testcase": false, "constructor": false}, {"identifier": "exec", "parameters": "(Invokable x)", "modifiers": "public", "return": "void", "signature": "void exec(Invokable x)", "full_signature": "public void exec(Invokable x)", "class_method_signature": "ScannerContext.exec(Invokable x)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cleanup()", "full_signature": "private void cleanup()", "class_method_signature": "ScannerContext.cleanup()", "testcase": false, "constructor": false}, {"identifier": "logMetrics", "parameters": "(String msg)", "modifiers": "private", "return": "void", "signature": "void logMetrics(String msg)", "full_signature": "private void logMetrics(String msg)", "class_method_signature": "ScannerContext.logMetrics(String msg)", "testcase": false, "constructor": false}, {"identifier": "toStringHelper", "parameters": "()", "modifiers": "protected", "return": "ToStringHelper", "signature": "ToStringHelper toStringHelper()", "full_signature": "protected ToStringHelper toStringHelper()", "class_method_signature": "ScannerContext.toStringHelper()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "ScannerContext.toString()", "testcase": false, "constructor": false}], "file": "mercator-core/src/main/java/org/lendingclub/mercator/core/ScannerContext.java"}, "focal_method": {"identifier": "cleanup", "parameters": "()", "modifiers": "private", "return": "void", "body": "private void cleanup() {\n\t\tlogger.debug(\"cleanup\");\n\t\tcleanupQueue.forEach(c -> {\n\t\t\ttry {\n\t\t\t\tlogger.info(\"invoking cleanup task: {}\", c);\n\t\t\t\tc.cleanup(this);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.warn(\"problem during cleanup: \" + e);\n\t\t\t}\n\t\t});\n\t}", "signature": "void cleanup()", "full_signature": "private void cleanup()", "class_method_signature": "ScannerContext.cleanup()", "testcase": false, "constructor": false, "invocations": ["debug", "forEach", "info", "cleanup", "warn"]}, "repository": {"repo_id": 80497637, "url": "https://github.com/LendingClub/mercator", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 64, "size": 646, "license": "licensed"}}