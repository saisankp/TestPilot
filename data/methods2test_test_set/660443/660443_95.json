{"test_class": {"identifier": "AtomNumberGeneratorTest", "superclass": "extends AbstractGeneratorTest", "interfaces": "", "fields": [{"original_string": "private AtomNumberGenerator generator;", "modifier": "private", "type": "AtomNumberGenerator", "declarator": "generator", "var_name": "generator"}], "file": "display/renderextra/src/test/java/org/openscience/cdk/renderer/generators/AtomNumberGeneratorTest.java"}, "test_case": {"identifier": "testEmptyContainer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyContainer() {\n        IAtomContainer emptyContainer = super.builder.newInstance(IAtomContainer.class);\n\n        // nothing should be made\n        IRenderingElement root = generator.generate(emptyContainer, model);\n        List<IRenderingElement> elements = elementUtil.getAllSimpleElements(root);\n        Assert.assertEquals(0, elements.size());\n    }", "signature": "void testEmptyContainer()", "full_signature": "@Test public void testEmptyContainer()", "class_method_signature": "AtomNumberGeneratorTest.testEmptyContainer()", "testcase": true, "constructor": false, "invocations": ["newInstance", "generate", "getAllSimpleElements", "assertEquals", "size"]}, "focal_class": {"identifier": "AtomNumberGenerator", "superclass": "", "interfaces": "implements IGenerator<IAtomContainer>", "fields": [{"original_string": "private IGeneratorParameter<Color> textColor = new AtomNumberTextColor();", "modifier": "private", "type": "IGeneratorParameter<Color>", "declarator": "textColor = new AtomNumberTextColor()", "var_name": "textColor"}, {"original_string": "private WillDrawAtomNumbers willDrawAtomNumbers = new WillDrawAtomNumbers();", "modifier": "private", "type": "WillDrawAtomNumbers", "declarator": "willDrawAtomNumbers = new WillDrawAtomNumbers()", "var_name": "willDrawAtomNumbers"}, {"original_string": "private IGeneratorParameter<IAtomColorer> atomColorer = new AtomColorer();", "modifier": "private", "type": "IGeneratorParameter<IAtomColorer>", "declarator": "atomColorer = new AtomColorer()", "var_name": "atomColorer"}, {"original_string": "private IGeneratorParameter<Boolean> colorByType = new ColorByType();", "modifier": "private", "type": "IGeneratorParameter<Boolean>", "declarator": "colorByType = new ColorByType()", "var_name": "colorByType"}, {"original_string": "private Offset offset = new Offset();", "modifier": "private", "type": "Offset", "declarator": "offset = new Offset()", "var_name": "offset"}], "methods": [{"identifier": "generate", "parameters": "(IAtomContainer container, RendererModel model)", "modifiers": "@Override public", "return": "IRenderingElement", "signature": "IRenderingElement generate(IAtomContainer container, RendererModel model)", "full_signature": "@Override public IRenderingElement generate(IAtomContainer container, RendererModel model)", "class_method_signature": "AtomNumberGenerator.generate(IAtomContainer container, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "List<IGeneratorParameter<?>>", "signature": "List<IGeneratorParameter<?>> getParameters()", "full_signature": "@Override public List<IGeneratorParameter<?>> getParameters()", "class_method_signature": "AtomNumberGenerator.getParameters()", "testcase": false, "constructor": false}], "file": "display/renderextra/src/main/java/org/openscience/cdk/renderer/generators/AtomNumberGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(IAtomContainer container, RendererModel model)", "modifiers": "@Override public", "return": "IRenderingElement", "body": "@Override\n    public IRenderingElement generate(IAtomContainer container, RendererModel model) {\n        ElementGroup numbers = new ElementGroup();\n        if (!model.getParameter(WillDrawAtomNumbers.class).getValue()) return numbers;\n\n        Vector2d offset = new Vector2d(this.offset.getValue().x, -this.offset.getValue().y);\n        offset.scale(1 / model.getParameter(Scale.class).getValue());\n\n        int number = 1;\n        for (IAtom atom : container.atoms()) {\n            Point2d point = new Point2d(atom.getPoint2d());\n            point.add(offset);\n            numbers.add(new TextElement(point.x, point.y, String.valueOf(number), colorByType.getValue() ? atomColorer\n                    .getValue().getAtomColor(atom) : textColor.getValue()));\n            number++;\n        }\n        return numbers;\n    }", "signature": "IRenderingElement generate(IAtomContainer container, RendererModel model)", "full_signature": "@Override public IRenderingElement generate(IAtomContainer container, RendererModel model)", "class_method_signature": "AtomNumberGenerator.generate(IAtomContainer container, RendererModel model)", "testcase": false, "constructor": false, "invocations": ["getValue", "getParameter", "getValue", "getValue", "scale", "getValue", "getParameter", "atoms", "getPoint2d", "add", "add", "valueOf", "getValue", "getAtomColor", "getValue", "getValue"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}