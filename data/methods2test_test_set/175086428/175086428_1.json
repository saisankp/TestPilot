{"test_class": {"identifier": "PagedVirtualMemoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "hprof-heap/src/test/java/org/gridkit/jvmtool/heapdump/io/PagedVirtualMemoryTest.java"}, "test_case": {"identifier": "randomAccessRun", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void randomAccessRun() {\n        \n        TestMemory mem = new TestMemory();\n        int limit = 16 << 10;\n        mem.setLimit(limit);\n        Random rnd = new Random();\n        \n        for(int i = 0; i != 10000; ++i) {\n            long n = rnd.nextInt(limit - 64);\n            \n            verify(mem, n, 64);\n        }\n        \n        System.out.println(mem.getFaultCount());\n    }", "signature": "void randomAccessRun()", "full_signature": "@Test public void randomAccessRun()", "class_method_signature": "PagedVirtualMemoryTest.randomAccessRun()", "testcase": true, "constructor": false, "invocations": ["setLimit", "nextInt", "verify", "println", "getFaultCount"]}, "focal_class": {"identifier": "PagedVirtualMemory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long SANITY_LIMIT = 1l << 40;", "modifier": "private static final", "type": "long", "declarator": "SANITY_LIMIT = 1l << 40", "var_name": "SANITY_LIMIT"}, {"original_string": "private static final int LOAD_BUST = 16;", "modifier": "private static final", "type": "int", "declarator": "LOAD_BUST = 16", "var_name": "LOAD_BUST"}, {"original_string": "private static final int MAP_BUST = 4;", "modifier": "private static final", "type": "int", "declarator": "MAP_BUST = 4", "var_name": "MAP_BUST"}, {"original_string": "private final PageComparator cmp = new PageComparator();", "modifier": "private final", "type": "PageComparator", "declarator": "cmp = new PageComparator()", "var_name": "cmp"}, {"original_string": "protected final PagePool pagePool;", "modifier": "protected final", "type": "PagePool", "declarator": "pagePool", "var_name": "pagePool"}, {"original_string": "protected final int pageSize;", "modifier": "protected final", "type": "int", "declarator": "pageSize", "var_name": "pageSize"}, {"original_string": "protected final int pageBits;", "modifier": "protected final", "type": "int", "declarator": "pageBits", "var_name": "pageBits"}, {"original_string": "protected final long pageMask;", "modifier": "protected final", "type": "long", "declarator": "pageMask", "var_name": "pageMask"}, {"original_string": "private ByteBuffer[] bufferMap = new ByteBuffer[0];", "modifier": "private", "type": "ByteBuffer[]", "declarator": "bufferMap = new ByteBuffer[0]", "var_name": "bufferMap"}, {"original_string": "private int[] hitCounts = new int[0];", "modifier": "private", "type": "int[]", "declarator": "hitCounts = new int[0]", "var_name": "hitCounts"}, {"original_string": "private PageInfo[] pageMap = new PageInfo[0];", "modifier": "private", "type": "PageInfo[]", "declarator": "pageMap = new PageInfo[0]", "var_name": "pageMap"}, {"original_string": "private long pageFaults = 0;", "modifier": "private", "type": "long", "declarator": "pageFaults = 0", "var_name": "pageFaults"}, {"original_string": "private long eof = SANITY_LIMIT;", "modifier": "private", "type": "long", "declarator": "eof = SANITY_LIMIT", "var_name": "eof"}, {"original_string": "private List<PageInfo> pages = new ArrayList<PageInfo>();", "modifier": "private", "type": "List<PageInfo>", "declarator": "pages = new ArrayList<PageInfo>()", "var_name": "pages"}, {"original_string": "private int mappedPageCount = 0;", "modifier": "private", "type": "int", "declarator": "mappedPageCount = 0", "var_name": "mappedPageCount"}, {"original_string": "private int mappedPageLimit = 0;", "modifier": "private", "type": "int", "declarator": "mappedPageLimit = 0", "var_name": "mappedPageLimit"}], "methods": [{"identifier": "PagedVirtualMemory", "parameters": "(PagePool pagePool)", "modifiers": "public", "return": "", "signature": " PagedVirtualMemory(PagePool pagePool)", "full_signature": "public  PagedVirtualMemory(PagePool pagePool)", "class_method_signature": "PagedVirtualMemory.PagedVirtualMemory(PagePool pagePool)", "testcase": false, "constructor": true}, {"identifier": "setLimit", "parameters": "(long vsize)", "modifiers": "public", "return": "void", "signature": "void setLimit(long vsize)", "full_signature": "public void setLimit(long vsize)", "class_method_signature": "PagedVirtualMemory.setLimit(long vsize)", "testcase": false, "constructor": false}, {"identifier": "readChar", "parameters": "(long index)", "modifiers": "public", "return": "char", "signature": "char readChar(long index)", "full_signature": "public char readChar(long index)", "class_method_signature": "PagedVirtualMemory.readChar(long index)", "testcase": false, "constructor": false}, {"identifier": "readDouble", "parameters": "(long index)", "modifiers": "public", "return": "double", "signature": "double readDouble(long index)", "full_signature": "public double readDouble(long index)", "class_method_signature": "PagedVirtualMemory.readDouble(long index)", "testcase": false, "constructor": false}, {"identifier": "readFloat", "parameters": "(long index)", "modifiers": "public", "return": "float", "signature": "float readFloat(long index)", "full_signature": "public float readFloat(long index)", "class_method_signature": "PagedVirtualMemory.readFloat(long index)", "testcase": false, "constructor": false}, {"identifier": "readInt", "parameters": "(long index)", "modifiers": "public", "return": "int", "signature": "int readInt(long index)", "full_signature": "public int readInt(long index)", "class_method_signature": "PagedVirtualMemory.readInt(long index)", "testcase": false, "constructor": false}, {"identifier": "readLong", "parameters": "(long index)", "modifiers": "public", "return": "long", "signature": "long readLong(long index)", "full_signature": "public long readLong(long index)", "class_method_signature": "PagedVirtualMemory.readLong(long index)", "testcase": false, "constructor": false}, {"identifier": "readShort", "parameters": "(long index)", "modifiers": "public", "return": "short", "signature": "short readShort(long index)", "full_signature": "public short readShort(long index)", "class_method_signature": "PagedVirtualMemory.readShort(long index)", "testcase": false, "constructor": false}, {"identifier": "readByte", "parameters": "(long index)", "modifiers": "public", "return": "byte", "signature": "byte readByte(long index)", "full_signature": "public byte readByte(long index)", "class_method_signature": "PagedVirtualMemory.readByte(long index)", "testcase": false, "constructor": false}, {"identifier": "readBytes", "parameters": "(long position, byte[] chars)", "modifiers": "public", "return": "void", "signature": "void readBytes(long position, byte[] chars)", "full_signature": "public void readBytes(long position, byte[] chars)", "class_method_signature": "PagedVirtualMemory.readBytes(long position, byte[] chars)", "testcase": false, "constructor": false}, {"identifier": "readSafe", "parameters": "(long index, byte[] buffer, int len)", "modifiers": "private", "return": "void", "signature": "void readSafe(long index, byte[] buffer, int len)", "full_signature": "private void readSafe(long index, byte[] buffer, int len)", "class_method_signature": "PagedVirtualMemory.readSafe(long index, byte[] buffer, int len)", "testcase": false, "constructor": false}, {"identifier": "ensureBuffer", "parameters": "(long index)", "modifiers": "private", "return": "ByteBuffer", "signature": "ByteBuffer ensureBuffer(long index)", "full_signature": "private ByteBuffer ensureBuffer(long index)", "class_method_signature": "PagedVirtualMemory.ensureBuffer(long index)", "testcase": false, "constructor": false}, {"identifier": "allocPage", "parameters": "()", "modifiers": "protected", "return": "PageInfo", "signature": "PageInfo allocPage()", "full_signature": "protected PageInfo allocPage()", "class_method_signature": "PagedVirtualMemory.allocPage()", "testcase": false, "constructor": false}, {"identifier": "allocBuffer", "parameters": "()", "modifiers": "protected", "return": "ByteBuffer", "signature": "ByteBuffer allocBuffer()", "full_signature": "protected ByteBuffer allocBuffer()", "class_method_signature": "PagedVirtualMemory.allocBuffer()", "testcase": false, "constructor": false}, {"identifier": "reclaimPages", "parameters": "(PageInfo[] pages)", "modifiers": "protected", "return": "void", "signature": "void reclaimPages(PageInfo[] pages)", "full_signature": "protected void reclaimPages(PageInfo[] pages)", "class_method_signature": "PagedVirtualMemory.reclaimPages(PageInfo[] pages)", "testcase": false, "constructor": false}, {"identifier": "loadPage", "parameters": "(int pageId)", "modifiers": "protected abstract", "return": "void", "signature": "void loadPage(int pageId)", "full_signature": "protected abstract void loadPage(int pageId)", "class_method_signature": "PagedVirtualMemory.loadPage(int pageId)", "testcase": false, "constructor": false}, {"identifier": "isPageMapped", "parameters": "(int pageId)", "modifiers": "protected", "return": "boolean", "signature": "boolean isPageMapped(int pageId)", "full_signature": "protected boolean isPageMapped(int pageId)", "class_method_signature": "PagedVirtualMemory.isPageMapped(int pageId)", "testcase": false, "constructor": false}, {"identifier": "mapPage", "parameters": "(int pageId, PageInfo info)", "modifiers": "protected", "return": "void", "signature": "void mapPage(int pageId, PageInfo info)", "full_signature": "protected void mapPage(int pageId, PageInfo info)", "class_method_signature": "PagedVirtualMemory.mapPage(int pageId, PageInfo info)", "testcase": false, "constructor": false}, {"identifier": "pageFault", "parameters": "(int pageId)", "modifiers": "protected", "return": "void", "signature": "void pageFault(int pageId)", "full_signature": "protected void pageFault(int pageId)", "class_method_signature": "PagedVirtualMemory.pageFault(int pageId)", "testcase": false, "constructor": false}, {"identifier": "fadeHitCounts", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fadeHitCounts()", "full_signature": "private void fadeHitCounts()", "class_method_signature": "PagedVirtualMemory.fadeHitCounts()", "testcase": false, "constructor": false}], "file": "hprof-heap/src/main/java/org/gridkit/jvmtool/heapdump/io/PagedVirtualMemory.java"}, "focal_method": {"identifier": "setLimit", "parameters": "(long vsize)", "modifiers": "public", "return": "void", "body": "public void setLimit(long vsize) {\n        eof = vsize;\n        int n = (int) (vsize >> pageBits);\n        if (n >= bufferMap.length) {\n            int nsize = Math.max(n + 1, (3 * bufferMap.length) / 4);\n            bufferMap = Arrays.copyOf(bufferMap, nsize);\n            hitCounts = Arrays.copyOf(hitCounts, nsize);\n            pageMap = Arrays.copyOf(pageMap, nsize);\n        }\n    }", "signature": "void setLimit(long vsize)", "full_signature": "public void setLimit(long vsize)", "class_method_signature": "PagedVirtualMemory.setLimit(long vsize)", "testcase": false, "constructor": false, "invocations": ["max", "copyOf", "copyOf", "copyOf"]}, "repository": {"repo_id": 175086428, "url": "https://github.com/aragozin/heaplib", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 6556, "license": "licensed"}}