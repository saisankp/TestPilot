{"test_class": {"identifier": "DelimitedStreamReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "hbc-core/src/test/java/com/twitter/hbc/common/DelimitedStreamReaderTest.java"}, "test_case": {"identifier": "testReadWithBigBuffer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReadWithBigBuffer() throws Exception {\n    String myMessage = \"{this is my message}\\r\\n\";\n    byte[] bytes = myMessage.getBytes(Charsets.UTF_8);\n\n    InputStream stream = new ByteArrayInputStream(bytes);\n    DelimitedStreamReader r = new DelimitedStreamReader(stream, Charsets.UTF_8, myMessage.length() * 3);\n\n    String msg = r.read(myMessage.length());\n    assertEquals(msg, myMessage);\n  }", "signature": "void testReadWithBigBuffer()", "full_signature": "@Test public void testReadWithBigBuffer()", "class_method_signature": "DelimitedStreamReaderTest.testReadWithBigBuffer()", "testcase": true, "constructor": false, "invocations": ["getBytes", "length", "read", "length", "assertEquals"]}, "focal_class": {"identifier": "DelimitedStreamReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final InputStream inputStream;", "modifier": "private final", "type": "InputStream", "declarator": "inputStream", "var_name": "inputStream"}, {"original_string": "private final byte[] buffer;", "modifier": "private final", "type": "byte[]", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "private byte[] strBuffer;", "modifier": "private", "type": "byte[]", "declarator": "strBuffer", "var_name": "strBuffer"}, {"original_string": "private int strBufferIndex;", "modifier": "private", "type": "int", "declarator": "strBufferIndex", "var_name": "strBufferIndex"}, {"original_string": "private final Charset charset;", "modifier": "private final", "type": "Charset", "declarator": "charset", "var_name": "charset"}, {"original_string": "private int offset;", "modifier": "private", "type": "int", "declarator": "offset", "var_name": "offset"}, {"original_string": "private int end;", "modifier": "private", "type": "int", "declarator": "end", "var_name": "end"}, {"original_string": "private static final int DEFAULT_READ_COUNT = 64;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_READ_COUNT = 64", "var_name": "DEFAULT_READ_COUNT"}, {"original_string": "private static final int MAX_ALLOWABLE_BUFFER_SIZE = 500000;", "modifier": "private static final", "type": "int", "declarator": "MAX_ALLOWABLE_BUFFER_SIZE = 500000", "var_name": "MAX_ALLOWABLE_BUFFER_SIZE"}, {"original_string": "private static final byte CR = 13;", "modifier": "private static final", "type": "byte", "declarator": "CR = 13", "var_name": "CR"}, {"original_string": "private static final byte LF = 10;", "modifier": "private static final", "type": "byte", "declarator": "LF = 10", "var_name": "LF"}], "methods": [{"identifier": "DelimitedStreamReader", "parameters": "(InputStream stream, Charset charset, int bufferSize)", "modifiers": "public", "return": "", "signature": " DelimitedStreamReader(InputStream stream, Charset charset, int bufferSize)", "full_signature": "public  DelimitedStreamReader(InputStream stream, Charset charset, int bufferSize)", "class_method_signature": "DelimitedStreamReader.DelimitedStreamReader(InputStream stream, Charset charset, int bufferSize)", "testcase": false, "constructor": true}, {"identifier": "readLine", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String readLine()", "full_signature": "public String readLine()", "class_method_signature": "DelimitedStreamReader.readLine()", "testcase": false, "constructor": false}, {"identifier": "readLine", "parameters": "(boolean trim)", "modifiers": "private", "return": "String", "signature": "String readLine(boolean trim)", "full_signature": "private String readLine(boolean trim)", "class_method_signature": "DelimitedStreamReader.readLine(boolean trim)", "testcase": false, "constructor": false}, {"identifier": "copyToStrBuffer", "parameters": "(byte[] buffer, int offset, int length)", "modifiers": "private", "return": "void", "signature": "void copyToStrBuffer(byte[] buffer, int offset, int length)", "full_signature": "private void copyToStrBuffer(byte[] buffer, int offset, int length)", "class_method_signature": "DelimitedStreamReader.copyToStrBuffer(byte[] buffer, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "expandStrBuffer", "parameters": "(int minLength)", "modifiers": "private", "return": "void", "signature": "void expandStrBuffer(int minLength)", "full_signature": "private void expandStrBuffer(int minLength)", "class_method_signature": "DelimitedStreamReader.expandStrBuffer(int minLength)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(int numBytes)", "modifiers": "public", "return": "String", "signature": "String read(int numBytes)", "full_signature": "public String read(int numBytes)", "class_method_signature": "DelimitedStreamReader.read(int numBytes)", "testcase": false, "constructor": false}, {"identifier": "readAmountToStrBuffer", "parameters": "(int length)", "modifiers": "private", "return": "void", "signature": "void readAmountToStrBuffer(int length)", "full_signature": "private void readAmountToStrBuffer(int length)", "class_method_signature": "DelimitedStreamReader.readAmountToStrBuffer(int length)", "testcase": false, "constructor": false}, {"identifier": "readStreamToStrBuffer", "parameters": "(int length)", "modifiers": "private", "return": "int", "signature": "int readStreamToStrBuffer(int length)", "full_signature": "private int readStreamToStrBuffer(int length)", "class_method_signature": "DelimitedStreamReader.readStreamToStrBuffer(int length)", "testcase": false, "constructor": false}, {"identifier": "isReadBufferEmpty", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isReadBufferEmpty()", "full_signature": "private boolean isReadBufferEmpty()", "class_method_signature": "DelimitedStreamReader.isReadBufferEmpty()", "testcase": false, "constructor": false}], "file": "hbc-core/src/main/java/com/twitter/hbc/common/DelimitedStreamReader.java"}, "focal_method": {"identifier": "read", "parameters": "(int numBytes)", "modifiers": "public", "return": "String", "body": "public String read(int numBytes) throws IOException {\n    Preconditions.checkArgument(numBytes >= 0);\n    Preconditions.checkArgument(numBytes <= MAX_ALLOWABLE_BUFFER_SIZE);\n    int numBytesRemaining = numBytes;\n    // first read whatever we need from our buffer\n    if (!isReadBufferEmpty()) {\n      int length = Math.min(end - offset, numBytesRemaining);\n      copyToStrBuffer(buffer, offset, length);\n      offset += length;\n      numBytesRemaining -= length;\n    }\n\n    // next read the remaining chars directly into our strBuffer\n    if (numBytesRemaining > 0) {\n      readAmountToStrBuffer(numBytesRemaining);\n    }\n\n    if (strBufferIndex > 0 && strBuffer[strBufferIndex - 1] != LF) {\n      // the last byte doesn't correspond to lf\n      return readLine(false);\n    }\n\n    int strBufferLength = strBufferIndex;\n    strBufferIndex = 0;\n    return new String(strBuffer, 0, strBufferLength, charset);\n  }", "signature": "String read(int numBytes)", "full_signature": "public String read(int numBytes)", "class_method_signature": "DelimitedStreamReader.read(int numBytes)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "checkArgument", "isReadBufferEmpty", "min", "copyToStrBuffer", "readAmountToStrBuffer", "readLine"]}, "repository": {"repo_id": 8064341, "url": "https://github.com/twitter/hbc", "language": "Java", "is_fork": false, "fork_count": 338, "stargazer_count": 868, "size": 352, "license": "licensed"}}