{"test_class": {"identifier": "AbstractTransformerWriterTest", "superclass": "extends BaseFormatTest", "interfaces": "", "fields": [{"original_string": "protected AbstractTransformerWriter writer;", "modifier": "protected", "type": "AbstractTransformerWriter", "declarator": "writer", "var_name": "writer"}], "file": "dataprep-transformation/src/test/java/org/talend/dataprep/transformation/api/transformer/AbstractTransformerWriterTest.java"}, "test_case": {"identifier": "should_only_write_values_in_columns_order_TDP_3188", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n    public void should_only_write_values_in_columns_order_TDP_3188() throws Exception {\n\n        final Map<String, String> values = new HashMap<>();\n        values.put(\"key\", \"value\");\n        DataSetRow row = new DataSetRow(new RowMetadata(), values);\n\n        writer.write(row);\n    }", "signature": "void should_only_write_values_in_columns_order_TDP_3188()", "full_signature": "@Test(expected = IllegalStateException.class) public void should_only_write_values_in_columns_order_TDP_3188()", "class_method_signature": "AbstractTransformerWriterTest.should_only_write_values_in_columns_order_TDP_3188()", "testcase": true, "constructor": false, "invocations": ["put", "write"]}, "focal_class": {"identifier": "AbstractTransformerWriter", "superclass": "", "interfaces": "implements TransformerWriter", "fields": [], "methods": [{"identifier": "getRecordsWriter", "parameters": "()", "modifiers": "protected abstract", "return": "au.com.bytecode.opencsv.CSVWriter", "signature": "au.com.bytecode.opencsv.CSVWriter getRecordsWriter()", "full_signature": "protected abstract au.com.bytecode.opencsv.CSVWriter getRecordsWriter()", "class_method_signature": "AbstractTransformerWriter.getRecordsWriter()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataSetRow row)", "modifiers": "@Override public", "return": "void", "signature": "void write(DataSetRow row)", "full_signature": "@Override public void write(DataSetRow row)", "class_method_signature": "AbstractTransformerWriter.write(DataSetRow row)", "testcase": false, "constructor": false}], "file": "dataprep-transformation/src/main/java/org/talend/dataprep/transformation/api/transformer/AbstractTransformerWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(DataSetRow row)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void write(DataSetRow row) throws IOException {\n        if (!row.values().isEmpty() && row.getRowMetadata().getColumns().isEmpty()) {\n            throw new IllegalStateException(\n                    \" If a dataset row has some values it should at least have columns just before writing the result of a non json transformation.\");\n        }\n        // values need to be written in the same order as the columns\n        getRecordsWriter().writeNext(row.order().toArray(DataSetRow.SKIP_TDP_ID));\n    }", "signature": "void write(DataSetRow row)", "full_signature": "@Override public void write(DataSetRow row)", "class_method_signature": "AbstractTransformerWriter.write(DataSetRow row)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "values", "isEmpty", "getColumns", "getRowMetadata", "writeNext", "getRecordsWriter", "toArray", "order"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}