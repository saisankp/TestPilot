{"test_class": {"identifier": "NMEATest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/com/platypii/baseline/location/NMEATest.java"}, "test_case": {"identifier": "splitNmea", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void splitNmea() {\n        String[] split = {\"$GPFOO\", \"0\", \"1\", \"2\", \"3\"};\n        assertArrayEquals(split, NMEA.splitNmea(\"$GPFOO,0,1,2,3*99\"));\n    }", "signature": "void splitNmea()", "full_signature": "@Test public void splitNmea()", "class_method_signature": "NMEATest.splitNmea()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "splitNmea"]}, "focal_class": {"identifier": "NMEA", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"NMEA\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"NMEA\"", "var_name": "TAG"}, {"original_string": "private static final Calendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));", "modifier": "private static final", "type": "Calendar", "declarator": "cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"))", "var_name": "cal"}], "methods": [{"identifier": "parseDegreesMinutes", "parameters": "(@NonNull String dm, @NonNull String nsew)", "modifiers": "static", "return": "double", "signature": "double parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "full_signature": "static double parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "class_method_signature": "NMEA.parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(@Nullable String date)", "modifiers": "static", "return": "long", "signature": "long parseDate(@Nullable String date)", "full_signature": "static long parseDate(@Nullable String date)", "class_method_signature": "NMEA.parseDate(@Nullable String date)", "testcase": false, "constructor": false}, {"identifier": "parseTime", "parameters": "(@Nullable String time)", "modifiers": "static", "return": "long", "signature": "long parseTime(@Nullable String time)", "full_signature": "static long parseTime(@Nullable String time)", "class_method_signature": "NMEA.parseTime(@Nullable String time)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(@NonNull String nmea)", "modifiers": "static", "return": "boolean", "signature": "boolean validate(@NonNull String nmea)", "full_signature": "static boolean validate(@NonNull String nmea)", "class_method_signature": "NMEA.validate(@NonNull String nmea)", "testcase": false, "constructor": false}, {"identifier": "parsePowerLevel", "parameters": "(@NonNull String[] split)", "modifiers": "static", "return": "float", "signature": "float parsePowerLevel(@NonNull String[] split)", "full_signature": "static float parsePowerLevel(@NonNull String[] split)", "class_method_signature": "NMEA.parsePowerLevel(@NonNull String[] split)", "testcase": false, "constructor": false}, {"identifier": "cleanNmea", "parameters": "(@NonNull String nmea)", "modifiers": "@NonNull static", "return": "String", "signature": "String cleanNmea(@NonNull String nmea)", "full_signature": "@NonNull static String cleanNmea(@NonNull String nmea)", "class_method_signature": "NMEA.cleanNmea(@NonNull String nmea)", "testcase": false, "constructor": false}, {"identifier": "splitNmea", "parameters": "(@NonNull String nmea)", "modifiers": "@NonNull static", "return": "String[]", "signature": "String[] splitNmea(@NonNull String nmea)", "full_signature": "@NonNull static String[] splitNmea(@NonNull String nmea)", "class_method_signature": "NMEA.splitNmea(@NonNull String nmea)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/platypii/baseline/location/NMEA.java"}, "focal_method": {"identifier": "splitNmea", "parameters": "(@NonNull String nmea)", "modifiers": "@NonNull static", "return": "String[]", "body": "@NonNull\n    static String[] splitNmea(@NonNull String nmea) {\n        // Strip checksum\n        final int starIndex = nmea.lastIndexOf('*');\n        if (0 < starIndex && starIndex < nmea.length()) {\n            nmea = nmea.substring(0, starIndex);\n        }\n        // Split on comma, -1 preserves trailing columns\n        return nmea.split(\",\", -1);\n    }", "signature": "String[] splitNmea(@NonNull String nmea)", "full_signature": "@NonNull static String[] splitNmea(@NonNull String nmea)", "class_method_signature": "NMEA.splitNmea(@NonNull String nmea)", "testcase": false, "constructor": false, "invocations": ["lastIndexOf", "length", "substring", "split"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}