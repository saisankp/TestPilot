{"test_class": {"identifier": "TileSelectorTest", "superclass": "extends ApplicationTest", "interfaces": "", "fields": [{"original_string": "private TileSelector selector;", "modifier": "private", "type": "TileSelector", "declarator": "selector", "var_name": "selector"}, {"original_string": "private WidgetPane pane;", "modifier": "private", "type": "WidgetPane", "declarator": "pane", "var_name": "pane"}, {"original_string": "private WidgetTile firstTile;", "modifier": "private", "type": "WidgetTile", "declarator": "firstTile", "var_name": "firstTile"}, {"original_string": "private WidgetTile secondTile;", "modifier": "private", "type": "WidgetTile", "declarator": "secondTile", "var_name": "secondTile"}, {"original_string": "private WidgetTile thirdTile;", "modifier": "private", "type": "WidgetTile", "declarator": "thirdTile", "var_name": "thirdTile"}], "file": "app/src/test/java/edu/wpi/first/shuffleboard/app/TileSelectorTest.java"}, "test_case": {"identifier": "testCtrlClickToAddToSelection", "parameters": "()", "modifiers": "@Test @Tag(\"NonHeadlessTests\") public", "return": "void", "body": "@Test\n  @Tag(\"NonHeadlessTests\")\n  public void testCtrlClickToAddToSelection() {\n    testDragToSelectMultiple();\n    press(KeyCode.CONTROL);\n    clickOn(thirdTile);\n    release(KeyCode.CONTROL);\n    waitForFxEvents();\n    assertAll(\"All tiles should be selected\",\n        () -> assertTrue(firstTile.isSelected(), \"First tile was not selected\"),\n        () -> assertTrue(secondTile.isSelected(), \"Second tile was not selected\"),\n        () -> assertTrue(thirdTile.isSelected(), \"Third tile was not selected\")\n    );\n    press(KeyCode.CONTROL);\n    clickOn(firstTile);\n    release(KeyCode.CONTROL);\n    waitForFxEvents();\n    assertAll(\"All but the first tile should be selected\",\n        () -> assertFalse(firstTile.isSelected(), \"First tile was still selected\"),\n        () -> assertTrue(secondTile.isSelected(), \"Second tile was not selected\"),\n        () -> assertTrue(thirdTile.isSelected(), \"Third tile was not selected\")\n    );\n  }", "signature": "void testCtrlClickToAddToSelection()", "full_signature": "@Test @Tag(\"NonHeadlessTests\") public void testCtrlClickToAddToSelection()", "class_method_signature": "TileSelectorTest.testCtrlClickToAddToSelection()", "testcase": true, "constructor": false, "invocations": ["testDragToSelectMultiple", "press", "clickOn", "release", "waitForFxEvents", "assertAll", "assertTrue", "isSelected", "assertTrue", "isSelected", "assertTrue", "isSelected", "press", "clickOn", "release", "waitForFxEvents", "assertAll", "assertFalse", "isSelected", "assertTrue", "isSelected", "assertTrue", "isSelected"]}, "focal_class": {"identifier": "TileSelector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final WidgetPane pane;", "modifier": "private final", "type": "WidgetPane", "declarator": "pane", "var_name": "pane"}, {"original_string": "private final Pane dragHighlightContainer = new Pane();", "modifier": "private final", "type": "Pane", "declarator": "dragHighlightContainer = new Pane()", "var_name": "dragHighlightContainer"}, {"original_string": "private boolean dragSelection = false;", "modifier": "private", "type": "boolean", "declarator": "dragSelection = false", "var_name": "dragSelection"}, {"original_string": "private Point2D dragStart = null;", "modifier": "private", "type": "Point2D", "declarator": "dragStart = null", "var_name": "dragStart"}, {"original_string": "private Rectangle dragArea;", "modifier": "private", "type": "Rectangle", "declarator": "dragArea", "var_name": "dragArea"}, {"original_string": "private final ObservableSet<Tile<?>> selectedTiles = FXCollections.observableSet();", "modifier": "private final", "type": "ObservableSet<Tile<?>>", "declarator": "selectedTiles = FXCollections.observableSet()", "var_name": "selectedTiles"}, {"original_string": "private static final Map<WidgetPane, TileSelector> selectors = new WeakHashMap<>();", "modifier": "private static final", "type": "Map<WidgetPane, TileSelector>", "declarator": "selectors = new WeakHashMap<>()", "var_name": "selectors"}], "methods": [{"identifier": "forPane", "parameters": "(WidgetPane pane)", "modifiers": "public static", "return": "TileSelector", "signature": "TileSelector forPane(WidgetPane pane)", "full_signature": "public static TileSelector forPane(WidgetPane pane)", "class_method_signature": "TileSelector.forPane(WidgetPane pane)", "testcase": false, "constructor": false}, {"identifier": "TileSelector", "parameters": "(WidgetPane pane)", "modifiers": "private", "return": "", "signature": " TileSelector(WidgetPane pane)", "full_signature": "private  TileSelector(WidgetPane pane)", "class_method_signature": "TileSelector.TileSelector(WidgetPane pane)", "testcase": false, "constructor": true}, {"identifier": "updateTileState", "parameters": "(SetChangeListener.Change<? extends Tile<?>> change)", "modifiers": "private static", "return": "void", "signature": "void updateTileState(SetChangeListener.Change<? extends Tile<?>> change)", "full_signature": "private static void updateTileState(SetChangeListener.Change<? extends Tile<?>> change)", "class_method_signature": "TileSelector.updateTileState(SetChangeListener.Change<? extends Tile<?>> change)", "testcase": false, "constructor": false}, {"identifier": "setupMultiselectDrag", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setupMultiselectDrag()", "full_signature": "private void setupMultiselectDrag()", "class_method_signature": "TileSelector.setupMultiselectDrag()", "testcase": false, "constructor": false}, {"identifier": "updateSelections", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateSelections()", "full_signature": "private void updateSelections()", "class_method_signature": "TileSelector.updateSelections()", "testcase": false, "constructor": false}, {"identifier": "getSelectedTiles", "parameters": "()", "modifiers": "public", "return": "ObservableSet<Tile<?>>", "signature": "ObservableSet<Tile<?>> getSelectedTiles()", "full_signature": "public ObservableSet<Tile<?>> getSelectedTiles()", "class_method_signature": "TileSelector.getSelectedTiles()", "testcase": false, "constructor": false}, {"identifier": "isSelected", "parameters": "(Tile<?> tile)", "modifiers": "public", "return": "boolean", "signature": "boolean isSelected(Tile<?> tile)", "full_signature": "public boolean isSelected(Tile<?> tile)", "class_method_signature": "TileSelector.isSelected(Tile<?> tile)", "testcase": false, "constructor": false}, {"identifier": "areTilesSelected", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean areTilesSelected()", "full_signature": "public boolean areTilesSelected()", "class_method_signature": "TileSelector.areTilesSelected()", "testcase": false, "constructor": false}, {"identifier": "deselectAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deselectAll()", "full_signature": "public void deselectAll()", "class_method_signature": "TileSelector.deselectAll()", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(Tile<?> tile)", "modifiers": "public", "return": "void", "signature": "void select(Tile<?> tile)", "full_signature": "public void select(Tile<?> tile)", "class_method_signature": "TileSelector.select(Tile<?> tile)", "testcase": false, "constructor": false}, {"identifier": "deselect", "parameters": "(Tile<?> tile)", "modifiers": "public", "return": "void", "signature": "void deselect(Tile<?> tile)", "full_signature": "public void deselect(Tile<?> tile)", "class_method_signature": "TileSelector.deselect(Tile<?> tile)", "testcase": false, "constructor": false}, {"identifier": "toggleSelect", "parameters": "(Tile<?> tile)", "modifiers": "public", "return": "void", "signature": "void toggleSelect(Tile<?> tile)", "full_signature": "public void toggleSelect(Tile<?> tile)", "class_method_signature": "TileSelector.toggleSelect(Tile<?> tile)", "testcase": false, "constructor": false}, {"identifier": "selectOnly", "parameters": "(Tile<?> tile)", "modifiers": "public", "return": "void", "signature": "void selectOnly(Tile<?> tile)", "full_signature": "public void selectOnly(Tile<?> tile)", "class_method_signature": "TileSelector.selectOnly(Tile<?> tile)", "testcase": false, "constructor": false}], "file": "app/src/main/java/edu/wpi/first/shuffleboard/app/TileSelector.java"}, "focal_method": {"identifier": "isSelected", "parameters": "(Tile<?> tile)", "modifiers": "public", "return": "boolean", "body": "public boolean isSelected(Tile<?> tile) {\n    return selectedTiles.contains(tile);\n  }", "signature": "boolean isSelected(Tile<?> tile)", "full_signature": "public boolean isSelected(Tile<?> tile)", "class_method_signature": "TileSelector.isSelected(Tile<?> tile)", "testcase": false, "constructor": false, "invocations": ["contains"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}