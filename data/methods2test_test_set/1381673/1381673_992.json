{"test_class": {"identifier": "ObjectSourceTest", "superclass": "extends DroolsTestCase", "interfaces": "", "fields": [], "file": "drools-core/src/test/java/org/drools/core/reteoo/ObjectSourceTest.java"}, "test_case": {"identifier": "testAddObjectSink", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddObjectSink() throws Exception {\n        final MockObjectSource source = new MockObjectSource( 15 );\n\n        // We need to re-assign this var each time the sink changes references\n        final Field field = ObjectSource.class.getDeclaredField( \"sink\" );\n        field.setAccessible( true );\n        ObjectSinkPropagator sink = (ObjectSinkPropagator) field.get( source );\n\n        assertSame( EmptyObjectSinkAdapter.getInstance(),\n                    sink );\n\n        final MockObjectSink sink1 = new MockObjectSink();\n        source.addObjectSink( sink1 );\n        sink = (ObjectSinkPropagator) field.get( source );\n        assertSame( SingleObjectSinkAdapter.class,\n                    sink.getClass() );\n        assertEquals( 1,\n                      sink.getSinks().length );\n\n        final MockObjectSink sink2 = new MockObjectSink();\n        source.addObjectSink( sink2 );\n        sink = (ObjectSinkPropagator) field.get( source );\n        assertSame( CompositeObjectSinkAdapter.class,\n                    sink.getClass() );\n        assertEquals( 2,\n                      sink.getSinks().length );\n\n        final MockObjectSink sink3 = new MockObjectSink();\n        source.addObjectSink( sink3 );\n        assertSame( CompositeObjectSinkAdapter.class,\n                    sink.getClass() );\n        assertEquals( 3,\n                      sink.getSinks().length );\n\n        source.removeObjectSink( sink2 );\n        assertSame( CompositeObjectSinkAdapter.class,\n                    sink.getClass() );\n        assertEquals( 2,\n                      sink.getSinks().length );\n\n        source.removeObjectSink( sink1 );\n        sink = (ObjectSinkPropagator) field.get( source );\n        assertSame( SingleObjectSinkAdapter.class,\n                    sink.getClass() );\n        assertEquals( 1,\n                      sink.getSinks().length );\n\n        source.removeObjectSink( sink3 );\n        sink = (ObjectSinkPropagator) field.get( source );\n        assertSame( EmptyObjectSinkAdapter.getInstance(),\n                    sink );\n        assertEquals( 0,\n                      sink.getSinks().length );\n    }", "signature": "void testAddObjectSink()", "full_signature": "@Test public void testAddObjectSink()", "class_method_signature": "ObjectSourceTest.testAddObjectSink()", "testcase": true, "constructor": false, "invocations": ["getDeclaredField", "setAccessible", "get", "assertSame", "getInstance", "addObjectSink", "get", "assertSame", "getClass", "assertEquals", "getSinks", "addObjectSink", "get", "assertSame", "getClass", "assertEquals", "getSinks", "addObjectSink", "assertSame", "getClass", "assertEquals", "getSinks", "removeObjectSink", "assertSame", "getClass", "assertEquals", "getSinks", "removeObjectSink", "get", "assertSame", "getClass", "assertEquals", "getSinks", "removeObjectSink", "get", "assertSame", "getInstance", "assertEquals", "getSinks"]}, "focal_class": {"identifier": "ObjectSource", "superclass": "extends BaseNode", "interfaces": "implements\n    Externalizable", "fields": [{"original_string": "protected ObjectSinkPropagator sink;", "modifier": "protected", "type": "ObjectSinkPropagator", "declarator": "sink", "var_name": "sink"}, {"original_string": "protected ObjectSource         source;", "modifier": "protected", "type": "ObjectSource", "declarator": "source", "var_name": "source"}, {"original_string": "protected int                  alphaNodeHashingThreshold;", "modifier": "protected", "type": "int", "declarator": "alphaNodeHashingThreshold", "var_name": "alphaNodeHashingThreshold"}, {"original_string": "protected BitMask declaredMask = EmptyBitMask.get();", "modifier": "protected", "type": "BitMask", "declarator": "declaredMask = EmptyBitMask.get()", "var_name": "declaredMask"}, {"original_string": "protected BitMask inferredMask = EmptyBitMask.get();", "modifier": "protected", "type": "BitMask", "declarator": "inferredMask = EmptyBitMask.get()", "var_name": "inferredMask"}], "methods": [{"identifier": "ObjectSource", "parameters": "()", "modifiers": "public", "return": "", "signature": " ObjectSource()", "full_signature": "public  ObjectSource()", "class_method_signature": "ObjectSource.ObjectSource()", "testcase": false, "constructor": true}, {"identifier": "ObjectSource", "parameters": "(final int id,\n                 final RuleBasePartitionId partitionId,\n                 final boolean partitionsEnabled)", "modifiers": "protected", "return": "", "signature": " ObjectSource(final int id,\n                 final RuleBasePartitionId partitionId,\n                 final boolean partitionsEnabled)", "full_signature": "protected  ObjectSource(final int id,\n                 final RuleBasePartitionId partitionId,\n                 final boolean partitionsEnabled)", "class_method_signature": "ObjectSource.ObjectSource(final int id,\n                 final RuleBasePartitionId partitionId,\n                 final boolean partitionsEnabled)", "testcase": false, "constructor": true}, {"identifier": "ObjectSource", "parameters": "(final int id,\n                 final RuleBasePartitionId partitionId,\n                 final boolean partitionsEnabled,\n                 final ObjectSource objectSource,\n                 final int alphaNodeHashingThreshold)", "modifiers": "", "return": "", "signature": " ObjectSource(final int id,\n                 final RuleBasePartitionId partitionId,\n                 final boolean partitionsEnabled,\n                 final ObjectSource objectSource,\n                 final int alphaNodeHashingThreshold)", "full_signature": "  ObjectSource(final int id,\n                 final RuleBasePartitionId partitionId,\n                 final boolean partitionsEnabled,\n                 final ObjectSource objectSource,\n                 final int alphaNodeHashingThreshold)", "class_method_signature": "ObjectSource.ObjectSource(final int id,\n                 final RuleBasePartitionId partitionId,\n                 final boolean partitionsEnabled,\n                 final ObjectSource objectSource,\n                 final int alphaNodeHashingThreshold)", "testcase": false, "constructor": true}, {"identifier": "readExternal", "parameters": "(ObjectInput in)", "modifiers": "public", "return": "void", "signature": "void readExternal(ObjectInput in)", "full_signature": "public void readExternal(ObjectInput in)", "class_method_signature": "ObjectSource.readExternal(ObjectInput in)", "testcase": false, "constructor": false}, {"identifier": "writeExternal", "parameters": "(ObjectOutput out)", "modifiers": "public", "return": "void", "signature": "void writeExternal(ObjectOutput out)", "full_signature": "public void writeExternal(ObjectOutput out)", "class_method_signature": "ObjectSource.writeExternal(ObjectOutput out)", "testcase": false, "constructor": false}, {"identifier": "getParentObjectSource", "parameters": "()", "modifiers": "public", "return": "ObjectSource", "signature": "ObjectSource getParentObjectSource()", "full_signature": "public ObjectSource getParentObjectSource()", "class_method_signature": "ObjectSource.getParentObjectSource()", "testcase": false, "constructor": false}, {"identifier": "setParentObjectSource", "parameters": "(ObjectSource source)", "modifiers": "public", "return": "void", "signature": "void setParentObjectSource(ObjectSource source)", "full_signature": "public void setParentObjectSource(ObjectSource source)", "class_method_signature": "ObjectSource.setParentObjectSource(ObjectSource source)", "testcase": false, "constructor": false}, {"identifier": "getKnowledgeBase", "parameters": "()", "modifiers": "public", "return": "InternalKnowledgeBase", "signature": "InternalKnowledgeBase getKnowledgeBase()", "full_signature": "public InternalKnowledgeBase getKnowledgeBase()", "class_method_signature": "ObjectSource.getKnowledgeBase()", "testcase": false, "constructor": false}, {"identifier": "initDeclaredMask", "parameters": "(BuildContext context)", "modifiers": "public", "return": "void", "signature": "void initDeclaredMask(BuildContext context)", "full_signature": "public void initDeclaredMask(BuildContext context)", "class_method_signature": "ObjectSource.initDeclaredMask(BuildContext context)", "testcase": false, "constructor": false}, {"identifier": "calculateDeclaredMask", "parameters": "(Class modifiedClass, List<String> settableProperties)", "modifiers": "public abstract", "return": "BitMask", "signature": "BitMask calculateDeclaredMask(Class modifiedClass, List<String> settableProperties)", "full_signature": "public abstract BitMask calculateDeclaredMask(Class modifiedClass, List<String> settableProperties)", "class_method_signature": "ObjectSource.calculateDeclaredMask(Class modifiedClass, List<String> settableProperties)", "testcase": false, "constructor": false}, {"identifier": "resetInferredMask", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resetInferredMask()", "full_signature": "public void resetInferredMask()", "class_method_signature": "ObjectSource.resetInferredMask()", "testcase": false, "constructor": false}, {"identifier": "updateMask", "parameters": "(BitMask mask)", "modifiers": "public", "return": "BitMask", "signature": "BitMask updateMask(BitMask mask)", "full_signature": "public BitMask updateMask(BitMask mask)", "class_method_signature": "ObjectSource.updateMask(BitMask mask)", "testcase": false, "constructor": false}, {"identifier": "setPartitionId", "parameters": "(BuildContext context, RuleBasePartitionId partitionId)", "modifiers": "@Override public", "return": "void", "signature": "void setPartitionId(BuildContext context, RuleBasePartitionId partitionId)", "full_signature": "@Override public void setPartitionId(BuildContext context, RuleBasePartitionId partitionId)", "class_method_signature": "ObjectSource.setPartitionId(BuildContext context, RuleBasePartitionId partitionId)", "testcase": false, "constructor": false}, {"identifier": "setSourcePartitionId", "parameters": "(RuleBasePartitionId partitionId)", "modifiers": "public final", "return": "RuleBasePartitionId", "signature": "RuleBasePartitionId setSourcePartitionId(RuleBasePartitionId partitionId)", "full_signature": "public final RuleBasePartitionId setSourcePartitionId(RuleBasePartitionId partitionId)", "class_method_signature": "ObjectSource.setSourcePartitionId(RuleBasePartitionId partitionId)", "testcase": false, "constructor": false}, {"identifier": "setPartitionIdWithSinks", "parameters": "( RuleBasePartitionId partitionId )", "modifiers": "public final", "return": "void", "signature": "void setPartitionIdWithSinks( RuleBasePartitionId partitionId )", "full_signature": "public final void setPartitionIdWithSinks( RuleBasePartitionId partitionId )", "class_method_signature": "ObjectSource.setPartitionIdWithSinks( RuleBasePartitionId partitionId )", "testcase": false, "constructor": false}, {"identifier": "addObjectSink", "parameters": "(final ObjectSink objectSink)", "modifiers": "public", "return": "void", "signature": "void addObjectSink(final ObjectSink objectSink)", "full_signature": "public void addObjectSink(final ObjectSink objectSink)", "class_method_signature": "ObjectSource.addObjectSink(final ObjectSink objectSink)", "testcase": false, "constructor": false}, {"identifier": "removeObjectSink", "parameters": "(final ObjectSink objectSink)", "modifiers": "public", "return": "void", "signature": "void removeObjectSink(final ObjectSink objectSink)", "full_signature": "public void removeObjectSink(final ObjectSink objectSink)", "class_method_signature": "ObjectSource.removeObjectSink(final ObjectSink objectSink)", "testcase": false, "constructor": false}, {"identifier": "updateSink", "parameters": "(ObjectSink sink,\n                                    PropagationContext context,\n                                    InternalWorkingMemory workingMemory)", "modifiers": "public abstract", "return": "void", "signature": "void updateSink(ObjectSink sink,\n                                    PropagationContext context,\n                                    InternalWorkingMemory workingMemory)", "full_signature": "public abstract void updateSink(ObjectSink sink,\n                                    PropagationContext context,\n                                    InternalWorkingMemory workingMemory)", "class_method_signature": "ObjectSource.updateSink(ObjectSink sink,\n                                    PropagationContext context,\n                                    InternalWorkingMemory workingMemory)", "testcase": false, "constructor": false}, {"identifier": "networkUpdated", "parameters": "(UpdateContext updateContext)", "modifiers": "public", "return": "void", "signature": "void networkUpdated(UpdateContext updateContext)", "full_signature": "public void networkUpdated(UpdateContext updateContext)", "class_method_signature": "ObjectSource.networkUpdated(UpdateContext updateContext)", "testcase": false, "constructor": false}, {"identifier": "getObjectSinkPropagator", "parameters": "()", "modifiers": "public", "return": "ObjectSinkPropagator", "signature": "ObjectSinkPropagator getObjectSinkPropagator()", "full_signature": "public ObjectSinkPropagator getObjectSinkPropagator()", "class_method_signature": "ObjectSource.getObjectSinkPropagator()", "testcase": false, "constructor": false}, {"identifier": "setObjectSinkPropagator", "parameters": "(ObjectSinkPropagator sink)", "modifiers": "public", "return": "void", "signature": "void setObjectSinkPropagator(ObjectSinkPropagator sink)", "full_signature": "public void setObjectSinkPropagator(ObjectSinkPropagator sink)", "class_method_signature": "ObjectSource.setObjectSinkPropagator(ObjectSinkPropagator sink)", "testcase": false, "constructor": false}, {"identifier": "isInUse", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInUse()", "full_signature": "public boolean isInUse()", "class_method_signature": "ObjectSource.isInUse()", "testcase": false, "constructor": false}, {"identifier": "doRemove", "parameters": "(final RuleRemovalContext context,\n                            final ReteooBuilder builder)", "modifiers": "protected", "return": "boolean", "signature": "boolean doRemove(final RuleRemovalContext context,\n                            final ReteooBuilder builder)", "full_signature": "protected boolean doRemove(final RuleRemovalContext context,\n                            final ReteooBuilder builder)", "class_method_signature": "ObjectSource.doRemove(final RuleRemovalContext context,\n                            final ReteooBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "getObjectTypeNode", "parameters": "()", "modifiers": "@Override public", "return": "ObjectTypeNode", "signature": "ObjectTypeNode getObjectTypeNode()", "full_signature": "@Override public ObjectTypeNode getObjectTypeNode()", "class_method_signature": "ObjectSource.getObjectTypeNode()", "testcase": false, "constructor": false}, {"identifier": "getDeclaredMask", "parameters": "()", "modifiers": "public", "return": "BitMask", "signature": "BitMask getDeclaredMask()", "full_signature": "public BitMask getDeclaredMask()", "class_method_signature": "ObjectSource.getDeclaredMask()", "testcase": false, "constructor": false}], "file": "drools-core/src/main/java/org/drools/core/reteoo/ObjectSource.java"}, "focal_method": {"identifier": "addObjectSink", "parameters": "(final ObjectSink objectSink)", "modifiers": "public", "return": "void", "body": "public void addObjectSink(final ObjectSink objectSink) {\n        this.sink = this.sink.addObjectSink( objectSink, this.alphaNodeHashingThreshold );\n    }", "signature": "void addObjectSink(final ObjectSink objectSink)", "full_signature": "public void addObjectSink(final ObjectSink objectSink)", "class_method_signature": "ObjectSource.addObjectSink(final ObjectSink objectSink)", "testcase": false, "constructor": false, "invocations": ["addObjectSink"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}