{"test_class": {"identifier": "LambdaObserverTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/observers/LambdaObserverTest.java"}, "test_case": {"identifier": "onErrorThrows", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onErrorThrows() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n\n        try {\n            final List<Object> received = new ArrayList<Object>();\n\n            LambdaObserver<Object> o = new LambdaObserver<Object>(new Consumer<Object>() {\n                @Override\n                public void accept(Object v) throws Exception {\n                    received.add(v);\n                }\n            },\n            new Consumer<Throwable>() {\n                @Override\n                public void accept(Throwable e) throws Exception {\n                    throw new TestException(\"Inner\");\n                }\n            }, new Action() {\n                @Override\n                public void run() throws Exception {\n                    received.add(100);\n                }\n            }, new Consumer<Disposable>() {\n                @Override\n                public void accept(Disposable s) throws Exception {\n                }\n            });\n\n            assertFalse(o.isDisposed());\n\n            Observable.<Integer>error(new TestException(\"Outer\")).subscribe(o);\n\n            assertTrue(received.toString(), received.isEmpty());\n\n            assertTrue(o.isDisposed());\n\n            TestHelper.assertError(errors, 0, CompositeException.class);\n            List<Throwable> ce = TestHelper.compositeList(errors.get(0));\n            TestHelper.assertError(ce, 0, TestException.class, \"Outer\");\n            TestHelper.assertError(ce, 1, TestException.class, \"Inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }", "signature": "void onErrorThrows()", "full_signature": "@Test public void onErrorThrows()", "class_method_signature": "LambdaObserverTest.onErrorThrows()", "testcase": true, "constructor": false, "invocations": ["trackPluginErrors", "add", "add", "assertFalse", "isDisposed", "subscribe", "error", "assertTrue", "toString", "isEmpty", "assertTrue", "isDisposed", "assertError", "compositeList", "get", "assertError", "assertError", "reset"]}, "focal_class": {"identifier": "LambdaObserver", "superclass": "extends AtomicReference<Disposable>", "interfaces": "implements Observer<T>, Disposable, LambdaConsumerIntrospection", "fields": [{"original_string": "private static final long serialVersionUID = -7251123623727029452L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -7251123623727029452L", "var_name": "serialVersionUID"}, {"original_string": "final Consumer<? super T> onNext;", "modifier": "final", "type": "Consumer<? super T>", "declarator": "onNext", "var_name": "onNext"}, {"original_string": "final Consumer<? super Throwable> onError;", "modifier": "final", "type": "Consumer<? super Throwable>", "declarator": "onError", "var_name": "onError"}, {"original_string": "final Action onComplete;", "modifier": "final", "type": "Action", "declarator": "onComplete", "var_name": "onComplete"}, {"original_string": "final Consumer<? super Disposable> onSubscribe;", "modifier": "final", "type": "Consumer<? super Disposable>", "declarator": "onSubscribe", "var_name": "onSubscribe"}], "methods": [{"identifier": "LambdaObserver", "parameters": "(Consumer<? super T> onNext, Consumer<? super Throwable> onError,\n            Action onComplete,\n            Consumer<? super Disposable> onSubscribe)", "modifiers": "public", "return": "", "signature": " LambdaObserver(Consumer<? super T> onNext, Consumer<? super Throwable> onError,\n            Action onComplete,\n            Consumer<? super Disposable> onSubscribe)", "full_signature": "public  LambdaObserver(Consumer<? super T> onNext, Consumer<? super Throwable> onError,\n            Action onComplete,\n            Consumer<? super Disposable> onSubscribe)", "class_method_signature": "LambdaObserver.LambdaObserver(Consumer<? super T> onNext, Consumer<? super Throwable> onError,\n            Action onComplete,\n            Consumer<? super Disposable> onSubscribe)", "testcase": false, "constructor": true}, {"identifier": "onSubscribe", "parameters": "(Disposable s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Disposable s)", "full_signature": "@Override public void onSubscribe(Disposable s)", "class_method_signature": "LambdaObserver.onSubscribe(Disposable s)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "LambdaObserver.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t)", "full_signature": "@Override public void onError(Throwable t)", "class_method_signature": "LambdaObserver.onError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "LambdaObserver.onComplete()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "LambdaObserver.dispose()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "LambdaObserver.isDisposed()", "testcase": false, "constructor": false}, {"identifier": "hasCustomOnError", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasCustomOnError()", "full_signature": "@Override public boolean hasCustomOnError()", "class_method_signature": "LambdaObserver.hasCustomOnError()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/observers/LambdaObserver.java"}, "focal_method": {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isDisposed() {\n        return get() == DisposableHelper.DISPOSED;\n    }", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "LambdaObserver.isDisposed()", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}