{"test_class": {"identifier": "VirtualDirTgzTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private VirtualDirTgz virtualDir;", "modifier": "private", "type": "VirtualDirTgz", "declarator": "virtualDir", "var_name": "virtualDir"}], "file": "s3tbx-landsat-reader/src/test/java/org/esa/s3tbx/dataio/landsat/tgz/VirtualDirTgzTest.java"}, "test_case": {"identifier": "testTgz_getInputStream_invalidPath", "parameters": "()", "modifiers": "@Test(expected = IOException.class) public", "return": "void", "body": "@Test(expected = IOException.class)\n    public void testTgz_getInputStream_invalidPath() throws IOException {\n        final File testTgz = TestUtil.getTestFile(\"tgz/test-archive.tgz\");\n\n        virtualDir = new VirtualDirTgz(testTgz);\n        virtualDir.getInputStream(\"test-archive/invalid_dir/no.file\");\n    }", "signature": "void testTgz_getInputStream_invalidPath()", "full_signature": "@Test(expected = IOException.class) public void testTgz_getInputStream_invalidPath()", "class_method_signature": "VirtualDirTgzTest.testTgz_getInputStream_invalidPath()", "testcase": true, "constructor": false, "invocations": ["getTestFile", "getInputStream"]}, "focal_class": {"identifier": "VirtualDirTgz", "superclass": "extends VirtualDir", "interfaces": "", "fields": [{"original_string": "private final File archiveFile;", "modifier": "private final", "type": "File", "declarator": "archiveFile", "var_name": "archiveFile"}, {"original_string": "private File extractDir;", "modifier": "private", "type": "File", "declarator": "extractDir", "var_name": "extractDir"}], "methods": [{"identifier": "VirtualDirTgz", "parameters": "(File tgz)", "modifiers": "public", "return": "", "signature": " VirtualDirTgz(File tgz)", "full_signature": "public  VirtualDirTgz(File tgz)", "class_method_signature": "VirtualDirTgz.VirtualDirTgz(File tgz)", "testcase": false, "constructor": true}, {"identifier": "getBasePath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getBasePath()", "full_signature": "@Override public String getBasePath()", "class_method_signature": "VirtualDirTgz.getBasePath()", "testcase": false, "constructor": false}, {"identifier": "getBaseFile", "parameters": "()", "modifiers": "@Override public", "return": "File", "signature": "File getBaseFile()", "full_signature": "@Override public File getBaseFile()", "class_method_signature": "VirtualDirTgz.getBaseFile()", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(String path)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream(String path)", "full_signature": "@Override public InputStream getInputStream(String path)", "class_method_signature": "VirtualDirTgz.getInputStream(String path)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(String path)", "modifiers": "@Override public", "return": "File", "signature": "File getFile(String path)", "full_signature": "@Override public File getFile(String path)", "class_method_signature": "VirtualDirTgz.getFile(String path)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(String path)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] list(String path)", "full_signature": "@Override public String[] list(String path)", "class_method_signature": "VirtualDirTgz.list(String path)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(String path)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(String path)", "full_signature": "@Override public boolean exists(String path)", "class_method_signature": "VirtualDirTgz.exists(String path)", "testcase": false, "constructor": false}, {"identifier": "listAllFiles", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] listAllFiles()", "full_signature": "@Override public String[] listAllFiles()", "class_method_signature": "VirtualDirTgz.listAllFiles()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "VirtualDirTgz.close()", "testcase": false, "constructor": false}, {"identifier": "isCompressed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCompressed()", "full_signature": "@Override public boolean isCompressed()", "class_method_signature": "VirtualDirTgz.isCompressed()", "testcase": false, "constructor": false}, {"identifier": "isArchive", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isArchive()", "full_signature": "@Override public boolean isArchive()", "class_method_signature": "VirtualDirTgz.isArchive()", "testcase": false, "constructor": false}, {"identifier": "finalize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void finalize()", "full_signature": "@Override public void finalize()", "class_method_signature": "VirtualDirTgz.finalize()", "testcase": false, "constructor": false}, {"identifier": "getTempDir", "parameters": "()", "modifiers": "@Override public", "return": "File", "signature": "File getTempDir()", "full_signature": "@Override public File getTempDir()", "class_method_signature": "VirtualDirTgz.getTempDir()", "testcase": false, "constructor": false}, {"identifier": "getFilenameFromPath", "parameters": "(String path)", "modifiers": "static", "return": "String", "signature": "String getFilenameFromPath(String path)", "full_signature": "static String getFilenameFromPath(String path)", "class_method_signature": "VirtualDirTgz.getFilenameFromPath(String path)", "testcase": false, "constructor": false}, {"identifier": "isTgz", "parameters": "(String filename)", "modifiers": "static", "return": "boolean", "signature": "boolean isTgz(String filename)", "full_signature": "static boolean isTgz(String filename)", "class_method_signature": "VirtualDirTgz.isTgz(String filename)", "testcase": false, "constructor": false}, {"identifier": "isTbz", "parameters": "(String filename)", "modifiers": "static", "return": "boolean", "signature": "boolean isTbz(String filename)", "full_signature": "static boolean isTbz(String filename)", "class_method_signature": "VirtualDirTgz.isTbz(String filename)", "testcase": false, "constructor": false}, {"identifier": "ensureUnpacked", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureUnpacked()", "full_signature": "private void ensureUnpacked()", "class_method_signature": "VirtualDirTgz.ensureUnpacked()", "testcase": false, "constructor": false}, {"identifier": "getTarInputStream", "parameters": "()", "modifiers": "private", "return": "TarInputStream", "signature": "TarInputStream getTarInputStream()", "full_signature": "private TarInputStream getTarInputStream()", "class_method_signature": "VirtualDirTgz.getTarInputStream()", "testcase": false, "constructor": false}, {"identifier": "ensureDirectory", "parameters": "(File targetDir)", "modifiers": "private", "return": "void", "signature": "void ensureDirectory(File targetDir)", "full_signature": "private void ensureDirectory(File targetDir)", "class_method_signature": "VirtualDirTgz.ensureDirectory(File targetDir)", "testcase": false, "constructor": false}], "file": "s3tbx-landsat-reader/src/main/java/org/esa/s3tbx/dataio/landsat/tgz/VirtualDirTgz.java"}, "focal_method": {"identifier": "getInputStream", "parameters": "(String path)", "modifiers": "@Override public", "return": "InputStream", "body": "@Override\n    public InputStream getInputStream(String path) throws IOException {\n        final File file = getFile(path);\n        return new BufferedInputStream(new FileInputStream(file));\n    }", "signature": "InputStream getInputStream(String path)", "full_signature": "@Override public InputStream getInputStream(String path)", "class_method_signature": "VirtualDirTgz.getInputStream(String path)", "testcase": false, "constructor": false, "invocations": ["getFile"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}