{"test_class": {"identifier": "CoverageAgendaListenerTest", "superclass": "extends AbstractRuleCoverageTest", "interfaces": "", "fields": [{"original_string": "private final static String RULE_NAME = \"rule1\";", "modifier": "private final static", "type": "String", "declarator": "RULE_NAME = \"rule1\"", "var_name": "RULE_NAME"}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/fluent/CoverageAgendaListenerTest.java"}, "test_case": {"identifier": "beforeMatchFired", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void beforeMatchFired() {\n        CoverageAgendaListener coverageAgendaListener = new CoverageAgendaListener();\n        assertTrue(coverageAgendaListener.getRuleExecuted().isEmpty());\n        assertTrue(coverageAgendaListener.getAuditsMessages().isEmpty());\n        BeforeMatchFiredEvent beforeMatchFiredEvent = createBeforeMatchFiredEventMock(RULE_NAME);\n        coverageAgendaListener.beforeMatchFired(beforeMatchFiredEvent);\n        Map<String, Integer> ruleExecuted = coverageAgendaListener.getRuleExecuted();\n        assertEquals(1, ruleExecuted.size());\n        assertEquals((Integer) 1, ruleExecuted.get(RULE_NAME));\n        List<String> auditMessages = coverageAgendaListener.getAuditsMessages();\n        assertEquals(1, auditMessages.size());\n        assertEquals(RULE_NAME, auditMessages.get(0));\n    }", "signature": "void beforeMatchFired()", "full_signature": "@Test public void beforeMatchFired()", "class_method_signature": "CoverageAgendaListenerTest.beforeMatchFired()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isEmpty", "getRuleExecuted", "assertTrue", "isEmpty", "getAuditsMessages", "createBeforeMatchFiredEventMock", "beforeMatchFired", "getRuleExecuted", "assertEquals", "size", "assertEquals", "get", "getAuditsMessages", "assertEquals", "size", "assertEquals", "get"]}, "focal_class": {"identifier": "CoverageAgendaListener", "superclass": "extends DefaultAgendaEventListener", "interfaces": "", "fields": [{"original_string": "protected Map<String, Integer> ruleExecuted = new HashMap<>();", "modifier": "protected", "type": "Map<String, Integer>", "declarator": "ruleExecuted = new HashMap<>()", "var_name": "ruleExecuted"}, {"original_string": "protected List<String> auditsMessages = new ArrayList<>();", "modifier": "protected", "type": "List<String>", "declarator": "auditsMessages = new ArrayList<>()", "var_name": "auditsMessages"}], "methods": [{"identifier": "beforeMatchFired", "parameters": "(BeforeMatchFiredEvent beforeMatchFiredEvent)", "modifiers": "@Override public", "return": "void", "signature": "void beforeMatchFired(BeforeMatchFiredEvent beforeMatchFiredEvent)", "full_signature": "@Override public void beforeMatchFired(BeforeMatchFiredEvent beforeMatchFiredEvent)", "class_method_signature": "CoverageAgendaListener.beforeMatchFired(BeforeMatchFiredEvent beforeMatchFiredEvent)", "testcase": false, "constructor": false}, {"identifier": "getRuleExecuted", "parameters": "()", "modifiers": "public", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getRuleExecuted()", "full_signature": "public Map<String, Integer> getRuleExecuted()", "class_method_signature": "CoverageAgendaListener.getRuleExecuted()", "testcase": false, "constructor": false}, {"identifier": "getAuditsMessages", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAuditsMessages()", "full_signature": "public List<String> getAuditsMessages()", "class_method_signature": "CoverageAgendaListener.getAuditsMessages()", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/fluent/CoverageAgendaListener.java"}, "focal_method": {"identifier": "beforeMatchFired", "parameters": "(BeforeMatchFiredEvent beforeMatchFiredEvent)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void beforeMatchFired(BeforeMatchFiredEvent beforeMatchFiredEvent) {\n        InternalRule rule = (InternalRule) beforeMatchFiredEvent.getMatch().getRule();\n        String ruleKey = prettyFullyQualifiedName(rule);\n        ruleExecuted.compute(ruleKey, (r, counter) -> counter == null ? 1 : counter + 1);\n        auditsMessages.add(ruleKey);\n    }", "signature": "void beforeMatchFired(BeforeMatchFiredEvent beforeMatchFiredEvent)", "full_signature": "@Override public void beforeMatchFired(BeforeMatchFiredEvent beforeMatchFiredEvent)", "class_method_signature": "CoverageAgendaListener.beforeMatchFired(BeforeMatchFiredEvent beforeMatchFiredEvent)", "testcase": false, "constructor": false, "invocations": ["getRule", "getMatch", "prettyFullyQualifiedName", "compute", "add"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}