{"test_class": {"identifier": "FileYAMLTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "File file = new File(new File(getClass().getClassLoader().getResource(\"beacon.yml\").getFile()).getParentFile(), \"plugin.yml\");", "modifier": "", "type": "File", "declarator": "file = new File(new File(getClass().getClassLoader().getResource(\"beacon.yml\").getFile()).getParentFile(), \"plugin.yml\")", "var_name": "file"}, {"original_string": "IOException exception = mock(IOException.class);", "modifier": "", "type": "IOException", "declarator": "exception = mock(IOException.class)", "var_name": "exception"}, {"original_string": "YAML yaml = YAML.fromFile(\"name\", file);", "modifier": "", "type": "YAML", "declarator": "yaml = YAML.fromFile(\"name\", file)", "var_name": "yaml"}], "file": "scribe/core/src/test/java/com/karuslabs/scribe/core/YAMLTest.java"}, "test_case": {"identifier": "handle", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void handle() {\n        assertTrue(assertThrows(UncheckedIOException.class, () -> yaml.handle(exception)).getCause() instanceof IOException);\n    }", "signature": "void handle()", "full_signature": "@Test void handle()", "class_method_signature": "FileYAMLTest.handle()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "getCause", "assertThrows", "handle"]}, "focal_class": {"identifier": "YAML", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected String name;", "modifier": "protected", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "protected Dump dump;", "modifier": "protected", "type": "Dump", "declarator": "dump", "var_name": "dump"}], "methods": [{"identifier": "fromFile", "parameters": "(String project, File file)", "modifiers": "public static", "return": "YAML", "signature": "YAML fromFile(String project, File file)", "full_signature": "public static YAML fromFile(String project, File file)", "class_method_signature": "YAML.fromFile(String project, File file)", "testcase": false, "constructor": false}, {"identifier": "YAML", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " YAML(String name)", "full_signature": "public  YAML(String name)", "class_method_signature": "YAML.YAML(String name)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(Map<String, Object> mapping)", "modifiers": "public", "return": "void", "signature": "void write(Map<String, Object> mapping)", "full_signature": "public void write(Map<String, Object> mapping)", "class_method_signature": "YAML.write(Map<String, Object> mapping)", "testcase": false, "constructor": false}, {"identifier": "writer", "parameters": "()", "modifiers": "protected abstract", "return": "Writer", "signature": "Writer writer()", "full_signature": "protected abstract Writer writer()", "class_method_signature": "YAML.writer()", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(IOException e)", "modifiers": "protected abstract", "return": "void", "signature": "void handle(IOException e)", "full_signature": "protected abstract void handle(IOException e)", "class_method_signature": "YAML.handle(IOException e)", "testcase": false, "constructor": false}], "file": "scribe/core/src/main/java/com/karuslabs/scribe/core/YAML.java"}, "focal_method": {"identifier": "handle", "parameters": "(IOException e)", "modifiers": "protected abstract", "return": "void", "body": "protected abstract void handle(IOException e);", "signature": "void handle(IOException e)", "full_signature": "protected abstract void handle(IOException e)", "class_method_signature": "YAML.handle(IOException e)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}