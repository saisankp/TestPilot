{"test_class": {"identifier": "ProactiveFloodFlowWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@MockitoAnnotations.Mock\n    private DataBroker dataBroker;", "modifier": "@MockitoAnnotations.Mock\n    private", "type": "DataBroker", "declarator": "dataBroker", "var_name": "dataBroker"}, {"original_string": "@MockitoAnnotations.Mock\n    private SalFlowService salFlowService;", "modifier": "@MockitoAnnotations.Mock\n    private", "type": "SalFlowService", "declarator": "salFlowService", "var_name": "salFlowService"}, {"original_string": "private ProactiveFloodFlowWriter proactiveFloodFlowWriter;", "modifier": "private", "type": "ProactiveFloodFlowWriter", "declarator": "proactiveFloodFlowWriter", "var_name": "proactiveFloodFlowWriter"}], "file": "arphandler/src/test/java/org/opendaylight/l2switch/arphandler/core/ProactiveFloodFlowWriterTest.java"}, "test_case": {"identifier": "testSetFlowIdleTimeout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetFlowIdleTimeout() throws Exception {\n        proactiveFloodFlowWriter.setFlowIdleTimeout(0);\n    }", "signature": "void testSetFlowIdleTimeout()", "full_signature": "@Test public void testSetFlowIdleTimeout()", "class_method_signature": "ProactiveFloodFlowWriterTest.testSetFlowIdleTimeout()", "testcase": true, "constructor": false, "invocations": ["setFlowIdleTimeout"]}, "focal_class": {"identifier": "ProactiveFloodFlowWriter", "superclass": "", "interfaces": "implements DataTreeChangeListener<StpStatusAwareNodeConnector>,\n        OpendaylightInventoryListener", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ProactiveFloodFlowWriter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ProactiveFloodFlowWriter.class)", "var_name": "LOG"}, {"original_string": "private static final String FLOW_ID_PREFIX = \"L2switch-\";", "modifier": "private static final", "type": "String", "declarator": "FLOW_ID_PREFIX = \"L2switch-\"", "var_name": "FLOW_ID_PREFIX"}, {"original_string": "private final DataBroker dataBroker;", "modifier": "private final", "type": "DataBroker", "declarator": "dataBroker", "var_name": "dataBroker"}, {"original_string": "private final SalFlowService salFlowService;", "modifier": "private final", "type": "SalFlowService", "declarator": "salFlowService", "var_name": "salFlowService"}, {"original_string": "private final ScheduledExecutorService stpStatusDataChangeEventProcessor = Executors.newScheduledThreadPool(1);", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "stpStatusDataChangeEventProcessor = Executors.newScheduledThreadPool(1)", "var_name": "stpStatusDataChangeEventProcessor"}, {"original_string": "private volatile boolean flowRefreshScheduled = false;", "modifier": "private volatile", "type": "boolean", "declarator": "flowRefreshScheduled = false", "var_name": "flowRefreshScheduled"}, {"original_string": "private volatile boolean threadReschedule = false;", "modifier": "private volatile", "type": "boolean", "declarator": "threadReschedule = false", "var_name": "threadReschedule"}, {"original_string": "private long flowInstallationDelay;", "modifier": "private", "type": "long", "declarator": "flowInstallationDelay", "var_name": "flowInstallationDelay"}, {"original_string": "private short flowTableId;", "modifier": "private", "type": "short", "declarator": "flowTableId", "var_name": "flowTableId"}, {"original_string": "private int flowPriority;", "modifier": "private", "type": "int", "declarator": "flowPriority", "var_name": "flowPriority"}, {"original_string": "private int flowIdleTimeout;", "modifier": "private", "type": "int", "declarator": "flowIdleTimeout", "var_name": "flowIdleTimeout"}, {"original_string": "private int flowHardTimeout;", "modifier": "private", "type": "int", "declarator": "flowHardTimeout", "var_name": "flowHardTimeout"}, {"original_string": "private final AtomicLong flowIdInc = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "flowIdInc = new AtomicLong()", "var_name": "flowIdInc"}, {"original_string": "private final AtomicLong flowCookieInc = new AtomicLong(0x2b00000000000000L);", "modifier": "private final", "type": "AtomicLong", "declarator": "flowCookieInc = new AtomicLong(0x2b00000000000000L)", "var_name": "flowCookieInc"}], "methods": [{"identifier": "ProactiveFloodFlowWriter", "parameters": "(DataBroker dataBroker, SalFlowService salFlowService)", "modifiers": "public", "return": "", "signature": " ProactiveFloodFlowWriter(DataBroker dataBroker, SalFlowService salFlowService)", "full_signature": "public  ProactiveFloodFlowWriter(DataBroker dataBroker, SalFlowService salFlowService)", "class_method_signature": "ProactiveFloodFlowWriter.ProactiveFloodFlowWriter(DataBroker dataBroker, SalFlowService salFlowService)", "testcase": false, "constructor": true}, {"identifier": "setFlowInstallationDelay", "parameters": "(long flowInstallationDelay)", "modifiers": "public", "return": "void", "signature": "void setFlowInstallationDelay(long flowInstallationDelay)", "full_signature": "public void setFlowInstallationDelay(long flowInstallationDelay)", "class_method_signature": "ProactiveFloodFlowWriter.setFlowInstallationDelay(long flowInstallationDelay)", "testcase": false, "constructor": false}, {"identifier": "setFlowTableId", "parameters": "(short flowTableId)", "modifiers": "public", "return": "void", "signature": "void setFlowTableId(short flowTableId)", "full_signature": "public void setFlowTableId(short flowTableId)", "class_method_signature": "ProactiveFloodFlowWriter.setFlowTableId(short flowTableId)", "testcase": false, "constructor": false}, {"identifier": "setFlowPriority", "parameters": "(int flowPriority)", "modifiers": "public", "return": "void", "signature": "void setFlowPriority(int flowPriority)", "full_signature": "public void setFlowPriority(int flowPriority)", "class_method_signature": "ProactiveFloodFlowWriter.setFlowPriority(int flowPriority)", "testcase": false, "constructor": false}, {"identifier": "setFlowIdleTimeout", "parameters": "(int flowIdleTimeout)", "modifiers": "public", "return": "void", "signature": "void setFlowIdleTimeout(int flowIdleTimeout)", "full_signature": "public void setFlowIdleTimeout(int flowIdleTimeout)", "class_method_signature": "ProactiveFloodFlowWriter.setFlowIdleTimeout(int flowIdleTimeout)", "testcase": false, "constructor": false}, {"identifier": "setFlowHardTimeout", "parameters": "(int flowHardTimeout)", "modifiers": "public", "return": "void", "signature": "void setFlowHardTimeout(int flowHardTimeout)", "full_signature": "public void setFlowHardTimeout(int flowHardTimeout)", "class_method_signature": "ProactiveFloodFlowWriter.setFlowHardTimeout(int flowHardTimeout)", "testcase": false, "constructor": false}, {"identifier": "onNodeConnectorRemoved", "parameters": "(NodeConnectorRemoved notification)", "modifiers": "@Override public", "return": "void", "signature": "void onNodeConnectorRemoved(NodeConnectorRemoved notification)", "full_signature": "@Override public void onNodeConnectorRemoved(NodeConnectorRemoved notification)", "class_method_signature": "ProactiveFloodFlowWriter.onNodeConnectorRemoved(NodeConnectorRemoved notification)", "testcase": false, "constructor": false}, {"identifier": "onNodeConnectorUpdated", "parameters": "(NodeConnectorUpdated notification)", "modifiers": "@Override public", "return": "void", "signature": "void onNodeConnectorUpdated(NodeConnectorUpdated notification)", "full_signature": "@Override public void onNodeConnectorUpdated(NodeConnectorUpdated notification)", "class_method_signature": "ProactiveFloodFlowWriter.onNodeConnectorUpdated(NodeConnectorUpdated notification)", "testcase": false, "constructor": false}, {"identifier": "onNodeRemoved", "parameters": "(NodeRemoved notification)", "modifiers": "@Override public", "return": "void", "signature": "void onNodeRemoved(NodeRemoved notification)", "full_signature": "@Override public void onNodeRemoved(NodeRemoved notification)", "class_method_signature": "ProactiveFloodFlowWriter.onNodeRemoved(NodeRemoved notification)", "testcase": false, "constructor": false}, {"identifier": "onNodeUpdated", "parameters": "(NodeUpdated notification)", "modifiers": "@Override public", "return": "void", "signature": "void onNodeUpdated(NodeUpdated notification)", "full_signature": "@Override public void onNodeUpdated(NodeUpdated notification)", "class_method_signature": "ProactiveFloodFlowWriter.onNodeUpdated(NodeUpdated notification)", "testcase": false, "constructor": false}, {"identifier": "registerAsDataChangeListener", "parameters": "()", "modifiers": "public", "return": "ListenerRegistration<ProactiveFloodFlowWriter>", "signature": "ListenerRegistration<ProactiveFloodFlowWriter> registerAsDataChangeListener()", "full_signature": "public ListenerRegistration<ProactiveFloodFlowWriter> registerAsDataChangeListener()", "class_method_signature": "ProactiveFloodFlowWriter.registerAsDataChangeListener()", "testcase": false, "constructor": false}, {"identifier": "onDataTreeChanged", "parameters": "(Collection<DataTreeModification<StpStatusAwareNodeConnector>> changes)", "modifiers": "@Override public", "return": "void", "signature": "void onDataTreeChanged(Collection<DataTreeModification<StpStatusAwareNodeConnector>> changes)", "full_signature": "@Override public void onDataTreeChanged(Collection<DataTreeModification<StpStatusAwareNodeConnector>> changes)", "class_method_signature": "ProactiveFloodFlowWriter.onDataTreeChanged(Collection<DataTreeModification<StpStatusAwareNodeConnector>> changes)", "testcase": false, "constructor": false}], "file": "arphandler/src/main/java/org/opendaylight/l2switch/arphandler/core/ProactiveFloodFlowWriter.java"}, "focal_method": {"identifier": "setFlowIdleTimeout", "parameters": "(int flowIdleTimeout)", "modifiers": "public", "return": "void", "body": "public void setFlowIdleTimeout(int flowIdleTimeout) {\n        this.flowIdleTimeout = flowIdleTimeout;\n    }", "signature": "void setFlowIdleTimeout(int flowIdleTimeout)", "full_signature": "public void setFlowIdleTimeout(int flowIdleTimeout)", "class_method_signature": "ProactiveFloodFlowWriter.setFlowIdleTimeout(int flowIdleTimeout)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 20701467, "url": "https://github.com/opendaylight/l2switch", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 25, "size": 4178, "license": "licensed"}}