{"test_class": {"identifier": "MraidNativeCommandHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String IMAGE_URI_VALUE = \"file://tmp/expectedFile.jpg\";", "modifier": "private static final", "type": "String", "declarator": "IMAGE_URI_VALUE = \"file://tmp/expectedFile.jpg\"", "var_name": "IMAGE_URI_VALUE"}, {"original_string": "private static final int TIME_TO_PAUSE_FOR_NETWORK = 300;", "modifier": "private static final", "type": "int", "declarator": "TIME_TO_PAUSE_FOR_NETWORK = 300", "var_name": "TIME_TO_PAUSE_FOR_NETWORK"}, {"original_string": "private static final String FAKE_IMAGE_DATA = \"imageFileData\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_IMAGE_DATA = \"imageFileData\"", "var_name": "FAKE_IMAGE_DATA"}, {"original_string": "private static final String CALENDAR_START_TIME = \"2013-08-14T20:00:00-0000\";", "modifier": "private static final", "type": "String", "declarator": "CALENDAR_START_TIME = \"2013-08-14T20:00:00-0000\"", "var_name": "CALENDAR_START_TIME"}, {"original_string": "@Mock MraidCommandFailureListener mraidCommandFailureListener;", "modifier": "@Mock", "type": "MraidCommandFailureListener", "declarator": "mraidCommandFailureListener", "var_name": "mraidCommandFailureListener"}, {"original_string": "private MraidNativeCommandHandler subject;", "modifier": "private", "type": "MraidNativeCommandHandler", "declarator": "subject", "var_name": "subject"}, {"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private Map<String, String> params;", "modifier": "private", "type": "Map<String, String>", "declarator": "params", "var_name": "params"}, {"original_string": "private File expectedFile;", "modifier": "private", "type": "File", "declarator": "expectedFile", "var_name": "expectedFile"}, {"original_string": "private File pictureDirectory;", "modifier": "private", "type": "File", "declarator": "pictureDirectory", "var_name": "pictureDirectory"}, {"original_string": "private File fileWithoutExtension;", "modifier": "private", "type": "File", "declarator": "fileWithoutExtension", "var_name": "fileWithoutExtension"}, {"original_string": "private TestHttpResponseWithHeaders response;", "modifier": "private", "type": "TestHttpResponseWithHeaders", "declarator": "response", "var_name": "response"}], "file": "MoPubAd/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java"}, "test_case": {"identifier": "isInlineVideoAvailable_whenViewsAreNotHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnFalse", "parameters": "()", "modifiers": "@TargetApi(11) @Test public", "return": "void", "body": "@TargetApi(11)\n    @Test\n    public void isInlineVideoAvailable_whenViewsAreNotHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnFalse() throws Exception {\n        Activity activity = Robolectric.buildActivity(Activity.class).create().get();\n        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);\n\n        View mockView = mock(View.class);\n        when(mockView.isHardwareAccelerated()).thenReturn(false);\n        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);\n\n        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();\n    }", "signature": "void isInlineVideoAvailable_whenViewsAreNotHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnFalse()", "full_signature": "@TargetApi(11) @Test public void isInlineVideoAvailable_whenViewsAreNotHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnFalse()", "class_method_signature": "MraidNativeCommandHandlerTest.isInlineVideoAvailable_whenViewsAreNotHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnFalse()", "testcase": true, "constructor": false, "invocations": ["get", "create", "buildActivity", "addFlags", "getWindow", "mock", "thenReturn", "when", "isHardwareAccelerated", "thenReturn", "when", "getLayerType", "isFalse", "assertThat", "isInlineVideoAvailable"]}, "focal_class": {"identifier": "MraidNativeCommandHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "@VisibleForTesting\n    static final String MIME_TYPE_HEADER = \"Content-Type\";", "modifier": "@VisibleForTesting\n    static final", "type": "String", "declarator": "MIME_TYPE_HEADER = \"Content-Type\"", "var_name": "MIME_TYPE_HEADER"}, {"original_string": "private static final int MAX_NUMBER_DAYS_IN_MONTH = 31;", "modifier": "private static final", "type": "int", "declarator": "MAX_NUMBER_DAYS_IN_MONTH = 31", "var_name": "MAX_NUMBER_DAYS_IN_MONTH"}, {"original_string": "private static final String[] DATE_FORMATS = {\n            \"yyyy-MM-dd'T'HH:mm:ssZZZZZ\",\n            \"yyyy-MM-dd'T'HH:mmZZZZZ\"\n    };", "modifier": "private static final", "type": "String[]", "declarator": "DATE_FORMATS = {\n            \"yyyy-MM-dd'T'HH:mm:ssZZZZZ\",\n            \"yyyy-MM-dd'T'HH:mmZZZZZ\"\n    }", "var_name": "DATE_FORMATS"}, {"original_string": "public static final String ANDROID_CALENDAR_CONTENT_TYPE = \"vnd.android.cursor.item/event\";", "modifier": "public static final", "type": "String", "declarator": "ANDROID_CALENDAR_CONTENT_TYPE = \"vnd.android.cursor.item/event\"", "var_name": "ANDROID_CALENDAR_CONTENT_TYPE"}], "methods": [{"identifier": "createCalendarEvent", "parameters": "(final Context context, final Map<String, String> params)", "modifiers": "", "return": "void", "signature": "void createCalendarEvent(final Context context, final Map<String, String> params)", "full_signature": " void createCalendarEvent(final Context context, final Map<String, String> params)", "class_method_signature": "MraidNativeCommandHandler.createCalendarEvent(final Context context, final Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "storePicture", "parameters": "(@NonNull final Context context,\n            @NonNull final String imageUrl,\n            @NonNull MraidCommandFailureListener failureListener)", "modifiers": "", "return": "void", "signature": "void storePicture(@NonNull final Context context,\n            @NonNull final String imageUrl,\n            @NonNull MraidCommandFailureListener failureListener)", "full_signature": " void storePicture(@NonNull final Context context,\n            @NonNull final String imageUrl,\n            @NonNull MraidCommandFailureListener failureListener)", "class_method_signature": "MraidNativeCommandHandler.storePicture(@NonNull final Context context,\n            @NonNull final String imageUrl,\n            @NonNull MraidCommandFailureListener failureListener)", "testcase": false, "constructor": false}, {"identifier": "isTelAvailable", "parameters": "(Context context)", "modifiers": "", "return": "boolean", "signature": "boolean isTelAvailable(Context context)", "full_signature": " boolean isTelAvailable(Context context)", "class_method_signature": "MraidNativeCommandHandler.isTelAvailable(Context context)", "testcase": false, "constructor": false}, {"identifier": "isSmsAvailable", "parameters": "(Context context)", "modifiers": "", "return": "boolean", "signature": "boolean isSmsAvailable(Context context)", "full_signature": " boolean isSmsAvailable(Context context)", "class_method_signature": "MraidNativeCommandHandler.isSmsAvailable(Context context)", "testcase": false, "constructor": false}, {"identifier": "isStorePictureSupported", "parameters": "(Context context)", "modifiers": "public", "return": "boolean", "signature": "boolean isStorePictureSupported(Context context)", "full_signature": "public boolean isStorePictureSupported(Context context)", "class_method_signature": "MraidNativeCommandHandler.isStorePictureSupported(Context context)", "testcase": false, "constructor": false}, {"identifier": "isCalendarAvailable", "parameters": "(Context context)", "modifiers": "", "return": "boolean", "signature": "boolean isCalendarAvailable(Context context)", "full_signature": " boolean isCalendarAvailable(Context context)", "class_method_signature": "MraidNativeCommandHandler.isCalendarAvailable(Context context)", "testcase": false, "constructor": false}, {"identifier": "isInlineVideoAvailable", "parameters": "(@NonNull Activity activity, @NonNull View view)", "modifiers": "@TargetApi(11)", "return": "boolean", "signature": "boolean isInlineVideoAvailable(@NonNull Activity activity, @NonNull View view)", "full_signature": "@TargetApi(11) boolean isInlineVideoAvailable(@NonNull Activity activity, @NonNull View view)", "class_method_signature": "MraidNativeCommandHandler.isInlineVideoAvailable(@NonNull Activity activity, @NonNull View view)", "testcase": false, "constructor": false}, {"identifier": "translateJSParamsToAndroidCalendarEventMapping", "parameters": "(Map<String, String> params)", "modifiers": "@TargetApi(VERSION_CODES.ICE_CREAM_SANDWICH) private", "return": "Map<String, Object>", "signature": "Map<String, Object> translateJSParamsToAndroidCalendarEventMapping(Map<String, String> params)", "full_signature": "@TargetApi(VERSION_CODES.ICE_CREAM_SANDWICH) private Map<String, Object> translateJSParamsToAndroidCalendarEventMapping(Map<String, String> params)", "class_method_signature": "MraidNativeCommandHandler.translateJSParamsToAndroidCalendarEventMapping(Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(String dateTime)", "modifiers": "private", "return": "Date", "signature": "Date parseDate(String dateTime)", "full_signature": "private Date parseDate(String dateTime)", "class_method_signature": "MraidNativeCommandHandler.parseDate(String dateTime)", "testcase": false, "constructor": false}, {"identifier": "parseRecurrenceRule", "parameters": "(Map<String, String> params)", "modifiers": "private", "return": "String", "signature": "String parseRecurrenceRule(Map<String, String> params)", "full_signature": "private String parseRecurrenceRule(Map<String, String> params)", "class_method_signature": "MraidNativeCommandHandler.parseRecurrenceRule(Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "translateWeekIntegersToDays", "parameters": "(String expression)", "modifiers": "private", "return": "String", "signature": "String translateWeekIntegersToDays(String expression)", "full_signature": "private String translateWeekIntegersToDays(String expression)", "class_method_signature": "MraidNativeCommandHandler.translateWeekIntegersToDays(String expression)", "testcase": false, "constructor": false}, {"identifier": "translateMonthIntegersToDays", "parameters": "(String expression)", "modifiers": "private", "return": "String", "signature": "String translateMonthIntegersToDays(String expression)", "full_signature": "private String translateMonthIntegersToDays(String expression)", "class_method_signature": "MraidNativeCommandHandler.translateMonthIntegersToDays(String expression)", "testcase": false, "constructor": false}, {"identifier": "dayNumberToDayOfWeekString", "parameters": "(int number)", "modifiers": "private", "return": "String", "signature": "String dayNumberToDayOfWeekString(int number)", "full_signature": "private String dayNumberToDayOfWeekString(int number)", "class_method_signature": "MraidNativeCommandHandler.dayNumberToDayOfWeekString(int number)", "testcase": false, "constructor": false}, {"identifier": "dayNumberToDayOfMonthString", "parameters": "(int number)", "modifiers": "private", "return": "String", "signature": "String dayNumberToDayOfMonthString(int number)", "full_signature": "private String dayNumberToDayOfMonthString(int number)", "class_method_signature": "MraidNativeCommandHandler.dayNumberToDayOfMonthString(int number)", "testcase": false, "constructor": false}, {"identifier": "downloadImage", "parameters": "(final Context context, final String uriString,\n            final MraidCommandFailureListener failureListener)", "modifiers": "", "return": "void", "signature": "void downloadImage(final Context context, final String uriString,\n            final MraidCommandFailureListener failureListener)", "full_signature": " void downloadImage(final Context context, final String uriString,\n            final MraidCommandFailureListener failureListener)", "class_method_signature": "MraidNativeCommandHandler.downloadImage(final Context context, final String uriString,\n            final MraidCommandFailureListener failureListener)", "testcase": false, "constructor": false}, {"identifier": "showUserDialog", "parameters": "(final Context context, final String imageUrl,\n            final MraidCommandFailureListener failureListener)", "modifiers": "private", "return": "void", "signature": "void showUserDialog(final Context context, final String imageUrl,\n            final MraidCommandFailureListener failureListener)", "full_signature": "private void showUserDialog(final Context context, final String imageUrl,\n            final MraidCommandFailureListener failureListener)", "class_method_signature": "MraidNativeCommandHandler.showUserDialog(final Context context, final String imageUrl,\n            final MraidCommandFailureListener failureListener)", "testcase": false, "constructor": false}], "file": "MoPubAd/mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java"}, "focal_method": {"identifier": "isInlineVideoAvailable", "parameters": "(@NonNull Activity activity, @NonNull View view)", "modifiers": "@TargetApi(11)", "return": "boolean", "body": "@TargetApi(11)\n    boolean isInlineVideoAvailable(@NonNull Activity activity, @NonNull View view) {\n        // In addition to potential hardware acceleration problems, there is a problem in the WebKit\n        // HTML5VideoView implementation pre-Gingerbread that would result in HTML5VideoViewProxy\n        // holding on to an instance of the WebView even after the WebView is destroyed. For\n        // this reason, we never allow inline video on Gingerbread devices.\n        if (VersionCode.currentApiLevel().isBelow(VersionCode.HONEYCOMB_MR1)) {\n            return false;\n        }\n\n        // Hardware Acceleration\n        // Hardware acceleration for the application and activity is enabled by default\n        // in API >= 14 (Ice Cream Sandwich)\n        // http://developer.android.com/reference/android/R.attr.html#hardwareAccelerated\n        // http://developer.android.com/guide/topics/graphics/hardware-accel.html\n\n        // HTML5 Inline Video\n        // http://developer.android.com/about/versions/android-3.1.html\n\n        // Traverse up the View tree to determine if any views are being software rendered\n        // You can only disable hardware acceleration at the view level by setting the layer type\n        View tempView = view;\n        while (true) {\n            // View#isHardwareAccelerated does not reflect the layer type used to render the view\n            // therefore we have to check for both\n            if (!tempView.isHardwareAccelerated()\n                    || Utils.bitMaskContainsFlag(tempView.getLayerType(), View.LAYER_TYPE_SOFTWARE)) {\n                return false;\n            }\n\n            // If parent is not a view or parent is null then break\n            if (!(tempView.getParent() instanceof View)) {\n                break;\n            }\n\n            tempView = (View)tempView.getParent();\n        }\n\n        // Has hardware acceleration been enabled in the current window?\n        // Hardware acceleration can only be enabled for a window, not disabled\n        // This flag is automatically set by the system if the android:hardwareAccelerated\n        // XML attribute is set to true on an activity or on the application.\n        // http://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_HARDWARE_ACCELERATED\n        Window window = activity.getWindow();\n        if (window != null) {\n            if (Utils.bitMaskContainsFlag(window.getAttributes().flags,\n                    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED)) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "signature": "boolean isInlineVideoAvailable(@NonNull Activity activity, @NonNull View view)", "full_signature": "@TargetApi(11) boolean isInlineVideoAvailable(@NonNull Activity activity, @NonNull View view)", "class_method_signature": "MraidNativeCommandHandler.isInlineVideoAvailable(@NonNull Activity activity, @NonNull View view)", "testcase": false, "constructor": false, "invocations": ["isBelow", "currentApiLevel", "isHardwareAccelerated", "bitMaskContainsFlag", "getLayerType", "getParent", "getParent", "getWindow", "bitMaskContainsFlag", "getAttributes"]}, "repository": {"repo_id": 38092182, "url": "https://github.com/harshalbenake/hbworkspace2-100", "language": "Java", "is_fork": false, "fork_count": 160, "stargazer_count": 191, "size": 307516, "license": "licensed"}}