{"test_class": {"identifier": "FilePartTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String name = \"filepart\";", "modifier": "static final", "type": "String", "declarator": "name = \"filepart\"", "var_name": "name"}, {"original_string": "static final String content = \"test Test tEst\";", "modifier": "static final", "type": "String", "declarator": "content = \"test Test tEst\"", "var_name": "content"}, {"original_string": "static File file = null;", "modifier": "static", "type": "File", "declarator": "file = null", "var_name": "file"}], "file": "volleyer/src/test/java/com/navercorp/volleyextensions/volleyer/multipart/FilePartTest.java"}, "test_case": {"identifier": "shouldReturnSameFilename", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldReturnSameFilename() {\n\t\t// Given\n\t\tString filename = \"justfortest.txt\";\n\t\tString path = \"/hello/world/\" + filename;\n\t\tFile newFile = new File(path);\n\t\tFilePart part = new FilePart(name, newFile);\n\t\t// When\n\t\tString result = part.getFilename();\n\t\t// Then\n\t\tassertThat(result, is(filename));\n\t}", "signature": "void shouldReturnSameFilename()", "full_signature": "@Test public void shouldReturnSameFilename()", "class_method_signature": "FilePartTest.shouldReturnSameFilename()", "testcase": true, "constructor": false, "invocations": ["getFilename", "assertThat", "is"]}, "focal_class": {"identifier": "FilePart", "superclass": "extends AbstractPart", "interfaces": "", "fields": [{"original_string": "private final File file;", "modifier": "private final", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private ContentType contentType;", "modifier": "private", "type": "ContentType", "declarator": "contentType", "var_name": "contentType"}, {"original_string": "private String filename;", "modifier": "private", "type": "String", "declarator": "filename", "var_name": "filename"}], "methods": [{"identifier": "FilePart", "parameters": "(File file)", "modifiers": "public", "return": "", "signature": " FilePart(File file)", "full_signature": "public  FilePart(File file)", "class_method_signature": "FilePart.FilePart(File file)", "testcase": false, "constructor": true}, {"identifier": "FilePart", "parameters": "(String name, File file)", "modifiers": "public", "return": "", "signature": " FilePart(String name, File file)", "full_signature": "public  FilePart(String name, File file)", "class_method_signature": "FilePart.FilePart(String name, File file)", "testcase": false, "constructor": true}, {"identifier": "FilePart", "parameters": "(String name, File file, ContentType contentType)", "modifiers": "public", "return": "", "signature": " FilePart(String name, File file, ContentType contentType)", "full_signature": "public  FilePart(String name, File file, ContentType contentType)", "class_method_signature": "FilePart.FilePart(String name, File file, ContentType contentType)", "testcase": false, "constructor": true}, {"identifier": "createDefaultContentTypeIfNull", "parameters": "(ContentType contentType)", "modifiers": "private", "return": "ContentType", "signature": "ContentType createDefaultContentTypeIfNull(ContentType contentType)", "full_signature": "private ContentType createDefaultContentTypeIfNull(ContentType contentType)", "class_method_signature": "FilePart.createDefaultContentTypeIfNull(ContentType contentType)", "testcase": false, "constructor": false}, {"identifier": "getContentType", "parameters": "()", "modifiers": "@Override public", "return": "ContentType", "signature": "ContentType getContentType()", "full_signature": "@Override public ContentType getContentType()", "class_method_signature": "FilePart.getContentType()", "testcase": false, "constructor": false}, {"identifier": "getExtraHeader", "parameters": "()", "modifiers": "@Override protected", "return": "byte[]", "signature": "byte[] getExtraHeader()", "full_signature": "@Override protected byte[] getExtraHeader()", "class_method_signature": "FilePart.getExtraHeader()", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "()", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getContent()", "full_signature": "@Override public InputStream getContent()", "class_method_signature": "FilePart.getContent()", "testcase": false, "constructor": false}, {"identifier": "getFilename", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFilename()", "full_signature": "public String getFilename()", "class_method_signature": "FilePart.getFilename()", "testcase": false, "constructor": false}], "file": "volleyer/src/main/java/com/navercorp/volleyextensions/volleyer/multipart/FilePart.java"}, "focal_method": {"identifier": "getFilename", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getFilename() {\n\t\treturn filename;\n\t}", "signature": "String getFilename()", "full_signature": "public String getFilename()", "class_method_signature": "FilePart.getFilename()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 17432029, "url": "https://github.com/naver/volley-extensions", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 138, "size": 666, "license": "licensed"}}