{"test_class": {"identifier": "FileDataSourceIdTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static File FILE, OTHER;", "modifier": "static", "type": "File", "declarator": "FILE", "var_name": "FILE"}], "file": "jtss/src/test/java/ec/tss/tsproviders/legacy/FileDataSourceIdTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test \n    public void testEquals() throws IOException {\n        FileDataSourceId sourceId = FileDataSourceId.from(FILE);\n\n        Assert.assertEquals(sourceId, FileDataSourceId.from(FILE));\n        Assert.assertNotSame(sourceId, FileDataSourceId.from(FILE));        \n        Assert.assertFalse(sourceId.equals(FileDataSourceId.from(OTHER)));\n\n        Assert.assertEquals(sourceId, FileDataSourceId.parse(FILE.getPath()));\n        Assert.assertNotSame(sourceId, FileDataSourceId.parse(FILE.getPath()));        \n        Assert.assertFalse(sourceId.equals(FileDataSourceId.parse(OTHER.getPath())));\n\n        Assert.assertEquals(sourceId, FileDataSourceId.parse((CharSequence)sourceId));\n        Assert.assertSame(sourceId, FileDataSourceId.parse((CharSequence)sourceId));        \n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "FileDataSourceIdTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["from", "assertEquals", "from", "assertNotSame", "from", "assertFalse", "equals", "from", "assertEquals", "parse", "getPath", "assertNotSame", "parse", "getPath", "assertFalse", "equals", "parse", "getPath", "assertEquals", "parse", "assertSame", "parse"]}, "focal_class": {"identifier": "FileDataSourceId", "superclass": "", "interfaces": "implements CharSequence", "fields": [{"original_string": "private static final IStringHandler SH = StringHandlers.PLAIN;", "modifier": "private static final", "type": "IStringHandler", "declarator": "SH = StringHandlers.PLAIN", "var_name": "SH"}, {"original_string": "private final LinearIdBuilder id;", "modifier": "private final", "type": "LinearIdBuilder", "declarator": "id", "var_name": "id"}, {"original_string": "private static final String X_FILE = \"file\";", "modifier": "private static final", "type": "String", "declarator": "X_FILE = \"file\"", "var_name": "X_FILE"}], "methods": [{"identifier": "parse", "parameters": "(CharSequence input)", "modifiers": "public static", "return": "FileDataSourceId", "signature": "FileDataSourceId parse(CharSequence input)", "full_signature": "public static FileDataSourceId parse(CharSequence input)", "class_method_signature": "FileDataSourceId.parse(CharSequence input)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String input)", "modifiers": "public static", "return": "FileDataSourceId", "signature": "FileDataSourceId parse(String input)", "full_signature": "public static FileDataSourceId parse(String input)", "class_method_signature": "FileDataSourceId.parse(String input)", "testcase": false, "constructor": false}, {"identifier": "isDemetraUri", "parameters": "(String input)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDemetraUri(String input)", "full_signature": "private static boolean isDemetraUri(String input)", "class_method_signature": "FileDataSourceId.isDemetraUri(String input)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(File file)", "modifiers": "public static", "return": "FileDataSourceId", "signature": "FileDataSourceId from(File file)", "full_signature": "public static FileDataSourceId from(File file)", "class_method_signature": "FileDataSourceId.from(File file)", "testcase": false, "constructor": false}, {"identifier": "FileDataSourceId", "parameters": "(LinearIdBuilder id)", "modifiers": "private", "return": "", "signature": " FileDataSourceId(LinearIdBuilder id)", "full_signature": "private  FileDataSourceId(LinearIdBuilder id)", "class_method_signature": "FileDataSourceId.FileDataSourceId(LinearIdBuilder id)", "testcase": false, "constructor": true}, {"identifier": "fill", "parameters": "(T bean)", "modifiers": "public", "return": "T", "signature": "T fill(T bean)", "full_signature": "public T fill(T bean)", "class_method_signature": "FileDataSourceId.fill(T bean)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFile()", "full_signature": "public String getFile()", "class_method_signature": "FileDataSourceId.getFile()", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFileName()", "full_signature": "public String getFileName()", "class_method_signature": "FileDataSourceId.getFileName()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FileDataSourceId.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "FileDataSourceId.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "FileDataSourceId.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int length()", "full_signature": "@Override public int length()", "class_method_signature": "FileDataSourceId.length()", "testcase": false, "constructor": false}, {"identifier": "charAt", "parameters": "(int index)", "modifiers": "@Override public", "return": "char", "signature": "char charAt(int index)", "full_signature": "@Override public char charAt(int index)", "class_method_signature": "FileDataSourceId.charAt(int index)", "testcase": false, "constructor": false}, {"identifier": "subSequence", "parameters": "(int start, int end)", "modifiers": "@Override public", "return": "CharSequence", "signature": "CharSequence subSequence(int start, int end)", "full_signature": "@Override public CharSequence subSequence(int start, int end)", "class_method_signature": "FileDataSourceId.subSequence(int start, int end)", "testcase": false, "constructor": false}, {"identifier": "legacyParser", "parameters": "(final String providerName, final String version)", "modifiers": "public static", "return": "Parser<DataSource>", "signature": "Parser<DataSource> legacyParser(final String providerName, final String version)", "full_signature": "public static Parser<DataSource> legacyParser(final String providerName, final String version)", "class_method_signature": "FileDataSourceId.legacyParser(final String providerName, final String version)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/tsproviders/legacy/FileDataSourceId.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object obj) {\n        return this == obj ? true : obj instanceof FileDataSourceId ? this.getFile().equals(((FileDataSourceId) obj).getFile()) : false;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "FileDataSourceId.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "getFile", "getFile"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}