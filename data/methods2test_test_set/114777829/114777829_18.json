{"test_class": {"identifier": "ServletContainerInitializerExtensionTest", "superclass": "", "interfaces": "", "fields": [], "file": "webapp/scinitializer/src/test/java/cloud/piranha/webapp/scinitializer/ServletContainerInitializerExtensionTest.java"}, "test_case": {"identifier": "testConfigure", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testConfigure() {\n        DefaultWebApplication webApplication = new DefaultWebApplication();\n        ServletContainerInitializerExtension extension = new ServletContainerInitializerExtension();\n        extension.configure(webApplication);\n    }", "signature": "void testConfigure()", "full_signature": "@Test void testConfigure()", "class_method_signature": "ServletContainerInitializerExtensionTest.testConfigure()", "testcase": true, "constructor": false, "invocations": ["configure"]}, "focal_class": {"identifier": "ServletContainerInitializerExtension", "superclass": "", "interfaces": "implements WebApplicationExtension", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(\n            ServletContainerInitializerExtension.class.getPackage().getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(\n            ServletContainerInitializerExtension.class.getPackage().getName())", "var_name": "LOGGER"}, {"original_string": "private final boolean excludeExistingInitializers;", "modifier": "private final", "type": "boolean", "declarator": "excludeExistingInitializers", "var_name": "excludeExistingInitializers"}, {"original_string": "private final List<String> ignoreInitializers;", "modifier": "private final", "type": "List<String>", "declarator": "ignoreInitializers", "var_name": "ignoreInitializers"}], "methods": [{"identifier": "ServletContainerInitializerExtension", "parameters": "()", "modifiers": "public", "return": "", "signature": " ServletContainerInitializerExtension()", "full_signature": "public  ServletContainerInitializerExtension()", "class_method_signature": "ServletContainerInitializerExtension.ServletContainerInitializerExtension()", "testcase": false, "constructor": true}, {"identifier": "ServletContainerInitializerExtension", "parameters": "(boolean excludeExistingInitializers, List<String> ignoreInitializers)", "modifiers": "public", "return": "", "signature": " ServletContainerInitializerExtension(boolean excludeExistingInitializers, List<String> ignoreInitializers)", "full_signature": "public  ServletContainerInitializerExtension(boolean excludeExistingInitializers, List<String> ignoreInitializers)", "class_method_signature": "ServletContainerInitializerExtension.ServletContainerInitializerExtension(boolean excludeExistingInitializers, List<String> ignoreInitializers)", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(WebApplication webApplication)", "modifiers": "@Override public", "return": "void", "signature": "void configure(WebApplication webApplication)", "full_signature": "@Override public void configure(WebApplication webApplication)", "class_method_signature": "ServletContainerInitializerExtension.configure(WebApplication webApplication)", "testcase": false, "constructor": false}, {"identifier": "shouldAdd", "parameters": "(WebApplication webApplication, ServletContainerInitializer initializer)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldAdd(WebApplication webApplication, ServletContainerInitializer initializer)", "full_signature": "private boolean shouldAdd(WebApplication webApplication, ServletContainerInitializer initializer)", "class_method_signature": "ServletContainerInitializerExtension.shouldAdd(WebApplication webApplication, ServletContainerInitializer initializer)", "testcase": false, "constructor": false}, {"identifier": "containsInstance", "parameters": "(WebApplication webApplication, ServletContainerInitializer initializer)", "modifiers": "private", "return": "boolean", "signature": "boolean containsInstance(WebApplication webApplication, ServletContainerInitializer initializer)", "full_signature": "private boolean containsInstance(WebApplication webApplication, ServletContainerInitializer initializer)", "class_method_signature": "ServletContainerInitializerExtension.containsInstance(WebApplication webApplication, ServletContainerInitializer initializer)", "testcase": false, "constructor": false}, {"identifier": "isIgnored", "parameters": "(ServletContainerInitializer initializer)", "modifiers": "private", "return": "boolean", "signature": "boolean isIgnored(ServletContainerInitializer initializer)", "full_signature": "private boolean isIgnored(ServletContainerInitializer initializer)", "class_method_signature": "ServletContainerInitializerExtension.isIgnored(ServletContainerInitializer initializer)", "testcase": false, "constructor": false}], "file": "webapp/scinitializer/src/main/java/cloud/piranha/webapp/scinitializer/ServletContainerInitializerExtension.java"}, "focal_method": {"identifier": "configure", "parameters": "(WebApplication webApplication)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void configure(WebApplication webApplication) {\n        LOGGER.log(FINER, \"Starting ServletContainerInitializer processing\");\n        ServiceLoader<ServletContainerInitializer> serviceLoader = ServiceLoader.load(\n                ServletContainerInitializer.class, webApplication.getClassLoader());\n\n        for (ServletContainerInitializer initializer : serviceLoader) {\n            LOGGER.log(FINE, () -> \"Adding initializer: \" + initializer.getClass().getName());\n\n            if (shouldAdd(webApplication, initializer)) {\n                webApplication.addInitializer(initializer);\n            }\n        }\n\n        if (this.getClass().getModule().isNamed()) {\n            // We are running in a modular environment,\n            // the providers from modules aren't available in the webApplication classloader\n            serviceLoader = ServiceLoader.load(ServletContainerInitializer.class);\n            for (ServletContainerInitializer initializer : serviceLoader) {\n                LOGGER.log(FINE, () -> \"Adding initializer: \" + initializer.getClass().getName());\n\n                if (shouldAdd(webApplication, initializer)) {\n                    webApplication.addInitializer(initializer);\n                }\n            }\n        }\n\n        LOGGER.log(FINER, \"Finished ServletContainerInitializer processing\");\n    }", "signature": "void configure(WebApplication webApplication)", "full_signature": "@Override public void configure(WebApplication webApplication)", "class_method_signature": "ServletContainerInitializerExtension.configure(WebApplication webApplication)", "testcase": false, "constructor": false, "invocations": ["log", "load", "getClassLoader", "log", "getName", "getClass", "shouldAdd", "addInitializer", "isNamed", "getModule", "getClass", "load", "log", "getName", "getClass", "shouldAdd", "addInitializer", "log"]}, "repository": {"repo_id": 114777829, "url": "https://github.com/piranhacloud/piranha", "stars": 27, "created": "12/19/2017 2:55:23 PM +00:00", "updates": "2020-01-27T11:57:41+00:00", "fork": "False", "license": "licensed"}}