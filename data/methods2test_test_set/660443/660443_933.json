{"test_class": {"identifier": "FragmentUtilsTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "static SmilesParser smilesParser;", "modifier": "static", "type": "SmilesParser", "declarator": "smilesParser", "var_name": "smilesParser"}], "file": "tool/fragment/src/test/java/org/openscience/cdk/fragment/FragmentUtilsTest.java"}, "test_case": {"identifier": "testMakeAtomContainer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMakeAtomContainer() {\n\n        IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();\n\n        IAtom atom = builder.newInstance(IAtom.class, \"C\");\n        IAtom exclude = builder.newInstance(IAtom.class, \"C\");\n\n        IAtom a1 = builder.newInstance(IAtom.class, \"C\");\n        IAtom a2 = builder.newInstance(IAtom.class, \"C\");\n\n        IBond[] bonds = new IBond[]{builder.newInstance(IBond.class, atom, exclude),\n                builder.newInstance(IBond.class, a1, a2), builder.newInstance(IBond.class, a1, atom),\n                builder.newInstance(IBond.class, a2, exclude)};\n\n        IAtomContainer part = FragmentUtils.makeAtomContainer(atom, Arrays.asList(bonds), exclude);\n\n        assertThat(part.getAtomCount(), is(3));\n        assertThat(part.getBondCount(), is(2));\n\n        Assert.assertTrue(part.contains(atom));\n        Assert.assertTrue(part.contains(a1));\n        Assert.assertTrue(part.contains(a2));\n        Assert.assertFalse(part.contains(exclude));\n\n        Assert.assertTrue(part.contains(bonds[1]));\n        Assert.assertTrue(part.contains(bonds[2]));\n    }", "signature": "void testMakeAtomContainer()", "full_signature": "@Test public void testMakeAtomContainer()", "class_method_signature": "FragmentUtilsTest.testMakeAtomContainer()", "testcase": true, "constructor": false, "invocations": ["getInstance", "newInstance", "newInstance", "newInstance", "newInstance", "newInstance", "newInstance", "newInstance", "newInstance", "makeAtomContainer", "asList", "assertThat", "getAtomCount", "is", "assertThat", "getBondCount", "is", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertFalse", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "FragmentUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "splitMolecule", "parameters": "(IAtomContainer atomContainer, IBond bond)", "modifiers": "protected static", "return": "List<IAtomContainer>", "signature": "List<IAtomContainer> splitMolecule(IAtomContainer atomContainer, IBond bond)", "full_signature": "protected static List<IAtomContainer> splitMolecule(IAtomContainer atomContainer, IBond bond)", "class_method_signature": "FragmentUtils.splitMolecule(IAtomContainer atomContainer, IBond bond)", "testcase": false, "constructor": false}, {"identifier": "makeAtomContainer", "parameters": "(IAtom atom, List<IBond> parts, IAtom excludedAtom)", "modifiers": "protected static", "return": "IAtomContainer", "signature": "IAtomContainer makeAtomContainer(IAtom atom, List<IBond> parts, IAtom excludedAtom)", "full_signature": "protected static IAtomContainer makeAtomContainer(IAtom atom, List<IBond> parts, IAtom excludedAtom)", "class_method_signature": "FragmentUtils.makeAtomContainer(IAtom atom, List<IBond> parts, IAtom excludedAtom)", "testcase": false, "constructor": false}, {"identifier": "traverse", "parameters": "(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList)", "modifiers": "protected static", "return": "List<IBond>", "signature": "List<IBond> traverse(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList)", "full_signature": "protected static List<IBond> traverse(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList)", "class_method_signature": "FragmentUtils.traverse(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList)", "testcase": false, "constructor": false}], "file": "tool/fragment/src/main/java/org/openscience/cdk/fragment/FragmentUtils.java"}, "focal_method": {"identifier": "makeAtomContainer", "parameters": "(IAtom atom, List<IBond> parts, IAtom excludedAtom)", "modifiers": "protected static", "return": "IAtomContainer", "body": "protected static IAtomContainer makeAtomContainer(IAtom atom, List<IBond> parts, IAtom excludedAtom) {\n        IAtomContainer partContainer = atom.getBuilder().newInstance(IAtomContainer.class);\n        partContainer.addAtom(atom);\n        for (IBond aBond : parts) {\n            for (IAtom bondedAtom : aBond.atoms()) {\n                if (!bondedAtom.equals(excludedAtom) && !partContainer.contains(bondedAtom))\n                    partContainer.addAtom(bondedAtom);\n            }\n            if (!aBond.contains(excludedAtom)) partContainer.addBond(aBond);\n        }\n        return partContainer;\n    }", "signature": "IAtomContainer makeAtomContainer(IAtom atom, List<IBond> parts, IAtom excludedAtom)", "full_signature": "protected static IAtomContainer makeAtomContainer(IAtom atom, List<IBond> parts, IAtom excludedAtom)", "class_method_signature": "FragmentUtils.makeAtomContainer(IAtom atom, List<IBond> parts, IAtom excludedAtom)", "testcase": false, "constructor": false, "invocations": ["newInstance", "getBuilder", "addAtom", "atoms", "equals", "contains", "addAtom", "contains", "addBond"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}