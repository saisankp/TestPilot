{"test_class": {"identifier": "LoggingSpanReporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LoggingSpanReporter loggingSpanReporter;", "modifier": "private", "type": "LoggingSpanReporter", "declarator": "loggingSpanReporter", "var_name": "loggingSpanReporter"}, {"original_string": "private TracingPlugin tracingPlugin;", "modifier": "private", "type": "TracingPlugin", "declarator": "tracingPlugin", "var_name": "tracingPlugin"}, {"original_string": "private MockTracer mockTracer;", "modifier": "private", "type": "MockTracer", "declarator": "mockTracer", "var_name": "mockTracer"}], "file": "stagemonitor-tracing/src/test/java/org/stagemonitor/tracing/reporter/LoggingSpanReporterTest.java"}, "test_case": {"identifier": "isActive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void isActive() throws Exception {\n\t\twhen(tracingPlugin.isLogSpans()).thenReturn(true);\n\t\tassertTrue(loggingSpanReporter.isActive(null));\n\n\t\twhen(tracingPlugin.isLogSpans()).thenReturn(false);\n\t\tassertFalse(loggingSpanReporter.isActive(null));\n\t}", "signature": "void isActive()", "full_signature": "@Test public void isActive()", "class_method_signature": "LoggingSpanReporterTest.isActive()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isLogSpans", "assertTrue", "isActive", "thenReturn", "when", "isLogSpans", "assertFalse", "isActive"]}, "focal_class": {"identifier": "LoggingSpanReporter", "superclass": "extends SpanReporter", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(LoggingSpanReporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LoggingSpanReporter.class)", "var_name": "logger"}, {"original_string": "private TracingPlugin tracingPlugin;", "modifier": "private", "type": "TracingPlugin", "declarator": "tracingPlugin", "var_name": "tracingPlugin"}], "methods": [{"identifier": "init", "parameters": "(ConfigurationRegistry configuration)", "modifiers": "@Override public", "return": "void", "signature": "void init(ConfigurationRegistry configuration)", "full_signature": "@Override public void init(ConfigurationRegistry configuration)", "class_method_signature": "LoggingSpanReporter.init(ConfigurationRegistry configuration)", "testcase": false, "constructor": false}, {"identifier": "report", "parameters": "(SpanContextInformation context, SpanWrapper spanWrapper)", "modifiers": "@Override public", "return": "void", "signature": "void report(SpanContextInformation context, SpanWrapper spanWrapper)", "full_signature": "@Override public void report(SpanContextInformation context, SpanWrapper spanWrapper)", "class_method_signature": "LoggingSpanReporter.report(SpanContextInformation context, SpanWrapper spanWrapper)", "testcase": false, "constructor": false}, {"identifier": "getLogMessage", "parameters": "(SpanWrapper span)", "modifiers": "", "return": "String", "signature": "String getLogMessage(SpanWrapper span)", "full_signature": " String getLogMessage(SpanWrapper span)", "class_method_signature": "LoggingSpanReporter.getLogMessage(SpanWrapper span)", "testcase": false, "constructor": false}, {"identifier": "appendLine", "parameters": "(StringBuilder sb, Object key, Object value)", "modifiers": "private", "return": "void", "signature": "void appendLine(StringBuilder sb, Object key, Object value)", "full_signature": "private void appendLine(StringBuilder sb, Object key, Object value)", "class_method_signature": "LoggingSpanReporter.appendLine(StringBuilder sb, Object key, Object value)", "testcase": false, "constructor": false}, {"identifier": "isActive", "parameters": "(SpanContextInformation spanContext)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isActive(SpanContextInformation spanContext)", "full_signature": "@Override public boolean isActive(SpanContextInformation spanContext)", "class_method_signature": "LoggingSpanReporter.isActive(SpanContextInformation spanContext)", "testcase": false, "constructor": false}], "file": "stagemonitor-tracing/src/main/java/org/stagemonitor/tracing/reporter/LoggingSpanReporter.java"}, "focal_method": {"identifier": "isActive", "parameters": "(SpanContextInformation spanContext)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean isActive(SpanContextInformation spanContext) {\n\t\treturn tracingPlugin.isLogSpans();\n\t}", "signature": "boolean isActive(SpanContextInformation spanContext)", "full_signature": "@Override public boolean isActive(SpanContextInformation spanContext)", "class_method_signature": "LoggingSpanReporter.isActive(SpanContextInformation spanContext)", "testcase": false, "constructor": false, "invocations": ["isLogSpans"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}