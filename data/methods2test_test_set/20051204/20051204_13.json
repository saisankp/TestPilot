{"test_class": {"identifier": "TestAgentUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger log =\n      LoggerFactory.getLogger(TestAgentUtils.class);", "modifier": "protected static final", "type": "Logger", "declarator": "log =\n      LoggerFactory.getLogger(TestAgentUtils.class)", "var_name": "log"}, {"original_string": "@Rule\n  public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private static final String metainfo_str = \"<metainfo>\\n\"\n      + \"  <schemaVersion>2.0</schemaVersion>\\n\"\n      + \"  <application>\\n\"\n      + \"      <name>MYTESTAPPLICATION</name>\\n\"\n      + \"      <comment>\\n\"\n      + \"        My Test Application\\n\"\n      + \"      </comment>\\n\"\n      + \"      <version>1.0</version>\\n\"\n      + \"      <type>YARN-APP</type>\\n\"\n      + \"      <components>\\n\"\n      + \"        <component>\\n\"\n      + \"          <name>REST</name>\\n\"\n      + \"          <category>MASTER</category>\\n\"\n      + \"          <commandScript>\\n\"\n      + \"            <script>scripts/rest.py</script>\\n\"\n      + \"            <scriptType>PYTHON</scriptType>\\n\"\n      + \"            <timeout>600</timeout>\\n\"\n      + \"          </commandScript>\\n\"\n      + \"        </component>\\n\"\n      + \"      </components>\\n\"\n      + \"  </application>\\n\"\n      + \"</metainfo>\";", "modifier": "private static final", "type": "String", "declarator": "metainfo_str = \"<metainfo>\\n\"\n      + \"  <schemaVersion>2.0</schemaVersion>\\n\"\n      + \"  <application>\\n\"\n      + \"      <name>MYTESTAPPLICATION</name>\\n\"\n      + \"      <comment>\\n\"\n      + \"        My Test Application\\n\"\n      + \"      </comment>\\n\"\n      + \"      <version>1.0</version>\\n\"\n      + \"      <type>YARN-APP</type>\\n\"\n      + \"      <components>\\n\"\n      + \"        <component>\\n\"\n      + \"          <name>REST</name>\\n\"\n      + \"          <category>MASTER</category>\\n\"\n      + \"          <commandScript>\\n\"\n      + \"            <script>scripts/rest.py</script>\\n\"\n      + \"            <scriptType>PYTHON</scriptType>\\n\"\n      + \"            <timeout>600</timeout>\\n\"\n      + \"          </commandScript>\\n\"\n      + \"        </component>\\n\"\n      + \"      </components>\\n\"\n      + \"  </application>\\n\"\n      + \"</metainfo>\"", "var_name": "metainfo_str"}], "file": "slider-core/src/test/java/org/apache/slider/providers/agent/TestAgentUtils.java"}, "test_case": {"identifier": "testGetApplicationMetainfo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetApplicationMetainfo() throws Exception {\n    String zipFileName = TestUtility.createAppPackage(\n        folder,\n        \"testpkg\",\n        \"test.zip\",\n        \"target/test-classes/org/apache/slider/common/tools/test\");\n    Configuration configuration = new Configuration();\n    FileSystem fs = FileSystem.getLocal(configuration);\n    log.info(\"fs working dir is {}\", fs.getWorkingDirectory().toString());\n    SliderFileSystem sliderFileSystem = new SliderFileSystem(fs, configuration);\n\n    // Without accompany metainfo file, read metainfo from the zip file\n    Metainfo metainfo = AgentUtils.getApplicationMetainfo(\n        sliderFileSystem, zipFileName, false);\n    Assert.assertNotNull(metainfo.getApplication());\n    Assert.assertEquals(\"STORM\", metainfo.getApplication().getName());\n\n    // With accompany metainfo file, read metainfo from the accompany file\n    String acompanyFileName = zipFileName + \".metainfo.xml\";\n    File f = new File(acompanyFileName);\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(f))) {\n      writer.write(metainfo_str);\n    }\n    metainfo = AgentUtils.getApplicationMetainfo(\n        sliderFileSystem, zipFileName, false);\n    Assert.assertNotNull(metainfo.getApplication());\n    Assert.assertEquals(\"MYTESTAPPLICATION\", metainfo.getApplication().getName());\n  }", "signature": "void testGetApplicationMetainfo()", "full_signature": "@Test public void testGetApplicationMetainfo()", "class_method_signature": "TestAgentUtils.testGetApplicationMetainfo()", "testcase": true, "constructor": false, "invocations": ["createAppPackage", "getLocal", "info", "toString", "getWorkingDirectory", "getApplicationMetainfo", "assertNotNull", "getApplication", "assertEquals", "getName", "getApplication", "write", "getApplicationMetainfo", "assertNotNull", "getApplication", "assertEquals", "getName", "getApplication"]}, "focal_class": {"identifier": "AgentUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AgentUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AgentUtils.class)", "var_name": "log"}], "methods": [{"identifier": "getApplicationMetainfoFromSummaryFile", "parameters": "(\n      SliderFileSystem fileSystem, String metainfoPath, boolean metainfoForAddon)", "modifiers": "public static", "return": "Metainfo", "signature": "Metainfo getApplicationMetainfoFromSummaryFile(\n      SliderFileSystem fileSystem, String metainfoPath, boolean metainfoForAddon)", "full_signature": "public static Metainfo getApplicationMetainfoFromSummaryFile(\n      SliderFileSystem fileSystem, String metainfoPath, boolean metainfoForAddon)", "class_method_signature": "AgentUtils.getApplicationMetainfoFromSummaryFile(\n      SliderFileSystem fileSystem, String metainfoPath, boolean metainfoForAddon)", "testcase": false, "constructor": false}, {"identifier": "getApplicationMetainfo", "parameters": "(SliderFileSystem fileSystem,\n      String metainfoPath, boolean metainfoForAddon)", "modifiers": "public static", "return": "Metainfo", "signature": "Metainfo getApplicationMetainfo(SliderFileSystem fileSystem,\n      String metainfoPath, boolean metainfoForAddon)", "full_signature": "public static Metainfo getApplicationMetainfo(SliderFileSystem fileSystem,\n      String metainfoPath, boolean metainfoForAddon)", "class_method_signature": "AgentUtils.getApplicationMetainfo(SliderFileSystem fileSystem,\n      String metainfoPath, boolean metainfoForAddon)", "testcase": false, "constructor": false}, {"identifier": "parseMetainfo", "parameters": "(InputStream stream,\n      boolean metainfoForAddon, String type)", "modifiers": "private static", "return": "Metainfo", "signature": "Metainfo parseMetainfo(InputStream stream,\n      boolean metainfoForAddon, String type)", "full_signature": "private static Metainfo parseMetainfo(InputStream stream,\n      boolean metainfoForAddon, String type)", "class_method_signature": "AgentUtils.parseMetainfo(InputStream stream,\n      boolean metainfoForAddon, String type)", "testcase": false, "constructor": false}, {"identifier": "getDefaultConfig", "parameters": "(SliderFileSystem fileSystem,\n                                        String appDef, String configFileName)", "modifiers": "static", "return": "DefaultConfig", "signature": "DefaultConfig getDefaultConfig(SliderFileSystem fileSystem,\n                                        String appDef, String configFileName)", "full_signature": "static DefaultConfig getDefaultConfig(SliderFileSystem fileSystem,\n                                        String appDef, String configFileName)", "class_method_signature": "AgentUtils.getDefaultConfig(SliderFileSystem fileSystem,\n                                        String appDef, String configFileName)", "testcase": false, "constructor": false}, {"identifier": "getMetainfoComponentName", "parameters": "(String roleGroup,\n      ConfTreeOperations appConf)", "modifiers": "static", "return": "String", "signature": "String getMetainfoComponentName(String roleGroup,\n      ConfTreeOperations appConf)", "full_signature": "static String getMetainfoComponentName(String roleGroup,\n      ConfTreeOperations appConf)", "class_method_signature": "AgentUtils.getMetainfoComponentName(String roleGroup,\n      ConfTreeOperations appConf)", "testcase": false, "constructor": false}], "file": "slider-core/src/main/java/org/apache/slider/providers/agent/AgentUtils.java"}, "focal_method": {"identifier": "getApplicationMetainfo", "parameters": "(SliderFileSystem fileSystem,\n      String metainfoPath, boolean metainfoForAddon)", "modifiers": "public static", "return": "Metainfo", "body": "public static Metainfo getApplicationMetainfo(SliderFileSystem fileSystem,\n      String metainfoPath, boolean metainfoForAddon) throws IOException,\n      BadConfigException {\n    log.info(\"Reading metainfo at {}\", metainfoPath);\n    Metainfo metainfo = getApplicationMetainfoFromSummaryFile(fileSystem,\n        metainfoPath, metainfoForAddon);\n    if (metainfo != null) {\n      log.info(\"Got metainfo from summary file\");\n      return metainfo;\n    }\n\n    FileSystem fs = fileSystem.getFileSystem();\n    Path appPath = new Path(metainfoPath);\n\n    InputStream metainfoJsonStream = SliderUtils.getApplicationResourceInputStream(\n        fs, appPath, \"metainfo.json\");\n    if (metainfoJsonStream == null) {\n      InputStream metainfoXMLStream = SliderUtils.getApplicationResourceInputStream(\n          fs, appPath, \"metainfo.xml\");\n      if (metainfoXMLStream != null) {\n        metainfo = parseMetainfo(metainfoXMLStream, metainfoForAddon, \"xml\");\n      }\n    } else {\n      metainfo = parseMetainfo(metainfoJsonStream, metainfoForAddon, \"json\");\n    }\n\n    if (metainfo == null) {\n      log.error(\"metainfo is unavailable at {}.\", metainfoPath);\n      throw new FileNotFoundException(\"metainfo.xml/json is required in app package. \" +\n                                      appPath);\n    }\n    return metainfo;\n  }", "signature": "Metainfo getApplicationMetainfo(SliderFileSystem fileSystem,\n      String metainfoPath, boolean metainfoForAddon)", "full_signature": "public static Metainfo getApplicationMetainfo(SliderFileSystem fileSystem,\n      String metainfoPath, boolean metainfoForAddon)", "class_method_signature": "AgentUtils.getApplicationMetainfo(SliderFileSystem fileSystem,\n      String metainfoPath, boolean metainfoForAddon)", "testcase": false, "constructor": false, "invocations": ["info", "getApplicationMetainfoFromSummaryFile", "info", "getFileSystem", "getApplicationResourceInputStream", "getApplicationResourceInputStream", "parseMetainfo", "parseMetainfo", "error"]}, "repository": {"repo_id": 20051204, "url": "https://github.com/apache/incubator-retired-slider", "language": "Java", "is_fork": false, "fork_count": 73, "stargazer_count": 74, "size": 16472, "license": "licensed"}}