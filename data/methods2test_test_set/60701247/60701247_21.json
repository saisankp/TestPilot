{"test_class": {"identifier": "CpuServiceProxyTest", "superclass": "", "interfaces": "", "fields": [], "file": "profilers-android/testSrc/com/android/tools/idea/profilers/perfd/CpuServiceProxyTest.java"}, "test_case": {"identifier": "testBindServiceContainsAllMethods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBindServiceContainsAllMethods() throws Exception {\n    IDevice mockDevice = mock(IDevice.class);\n    when(mockDevice.getSerialNumber()).thenReturn(\"Serial\");\n    when(mockDevice.getName()).thenReturn(\"Device\");\n    when(mockDevice.getVersion()).thenReturn(new AndroidVersion(1, \"API\"));\n    when(mockDevice.isOnline()).thenReturn(true);\n    when(mockDevice.getClients()).thenReturn(new Client[0]);\n    ManagedChannel channel = InProcessChannelBuilder.forName(\"CpuServiceProxyTest\").build();\n    CpuServiceProxy proxy = new CpuServiceProxy(mockDevice, channel, new FakeLegacyCpuTraceProfiler());\n\n    ServerServiceDefinition serverDefinition = proxy.getServiceDefinition();\n    Collection<MethodDescriptor<?, ?>> allMethods = CpuServiceGrpc.getServiceDescriptor().getMethods();\n    Set<MethodDescriptor<?, ?>> definedMethods =\n      serverDefinition.getMethods().stream().map(method -> method.getMethodDescriptor()).collect(Collectors.toSet());\n    assertThat(definedMethods.size()).isEqualTo(allMethods.size());\n    definedMethods.containsAll(allMethods);\n  }", "signature": "void testBindServiceContainsAllMethods()", "full_signature": "@Test public void testBindServiceContainsAllMethods()", "class_method_signature": "CpuServiceProxyTest.testBindServiceContainsAllMethods()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getSerialNumber", "thenReturn", "when", "getName", "thenReturn", "when", "getVersion", "thenReturn", "when", "isOnline", "thenReturn", "when", "getClients", "build", "forName", "getServiceDefinition", "getMethods", "getServiceDescriptor", "collect", "map", "stream", "getMethods", "getMethodDescriptor", "toSet", "isEqualTo", "assertThat", "size", "size", "containsAll"]}, "focal_class": {"identifier": "CpuServiceProxy", "superclass": "extends ServiceProxy", "interfaces": "", "fields": [{"original_string": "@NotNull private CpuServiceGrpc.CpuServiceBlockingStub myServiceStub;", "modifier": "@NotNull private", "type": "CpuServiceGrpc.CpuServiceBlockingStub", "declarator": "myServiceStub", "var_name": "myServiceStub"}, {"original_string": "@NotNull LegacyCpuTraceProfiler myLegacyProfiler;", "modifier": "@NotNull", "type": "LegacyCpuTraceProfiler", "declarator": "myLegacyProfiler", "var_name": "myLegacyProfiler"}, {"original_string": "private boolean myUseLegacyTracing;", "modifier": "private", "type": "boolean", "declarator": "myUseLegacyTracing", "var_name": "myUseLegacyTracing"}], "methods": [{"identifier": "CpuServiceProxy", "parameters": "(@NotNull IDevice device,\n                         @NotNull ManagedChannel channel,\n                         @NotNull LegacyCpuTraceProfiler legacyProfiler)", "modifiers": "public", "return": "", "signature": " CpuServiceProxy(@NotNull IDevice device,\n                         @NotNull ManagedChannel channel,\n                         @NotNull LegacyCpuTraceProfiler legacyProfiler)", "full_signature": "public  CpuServiceProxy(@NotNull IDevice device,\n                         @NotNull ManagedChannel channel,\n                         @NotNull LegacyCpuTraceProfiler legacyProfiler)", "class_method_signature": "CpuServiceProxy.CpuServiceProxy(@NotNull IDevice device,\n                         @NotNull ManagedChannel channel,\n                         @NotNull LegacyCpuTraceProfiler legacyProfiler)", "testcase": false, "constructor": true}, {"identifier": "startProfilingApp", "parameters": "(CpuProfilingAppStartRequest request,\n                                 StreamObserver<CpuProfilingAppStartResponse> responseObserver)", "modifiers": "private", "return": "void", "signature": "void startProfilingApp(CpuProfilingAppStartRequest request,\n                                 StreamObserver<CpuProfilingAppStartResponse> responseObserver)", "full_signature": "private void startProfilingApp(CpuProfilingAppStartRequest request,\n                                 StreamObserver<CpuProfilingAppStartResponse> responseObserver)", "class_method_signature": "CpuServiceProxy.startProfilingApp(CpuProfilingAppStartRequest request,\n                                 StreamObserver<CpuProfilingAppStartResponse> responseObserver)", "testcase": false, "constructor": false}, {"identifier": "stopProfilingApp", "parameters": "(CpuProfilingAppStopRequest request,\n                                StreamObserver<CpuProfilingAppStopResponse> responseObserver)", "modifiers": "private", "return": "void", "signature": "void stopProfilingApp(CpuProfilingAppStopRequest request,\n                                StreamObserver<CpuProfilingAppStopResponse> responseObserver)", "full_signature": "private void stopProfilingApp(CpuProfilingAppStopRequest request,\n                                StreamObserver<CpuProfilingAppStopResponse> responseObserver)", "class_method_signature": "CpuServiceProxy.stopProfilingApp(CpuProfilingAppStopRequest request,\n                                StreamObserver<CpuProfilingAppStopResponse> responseObserver)", "testcase": false, "constructor": false}, {"identifier": "getTraceInfo", "parameters": "(GetTraceInfoRequest request,\n                            StreamObserver<GetTraceInfoResponse> responseObserver)", "modifiers": "private", "return": "void", "signature": "void getTraceInfo(GetTraceInfoRequest request,\n                            StreamObserver<GetTraceInfoResponse> responseObserver)", "full_signature": "private void getTraceInfo(GetTraceInfoRequest request,\n                            StreamObserver<GetTraceInfoResponse> responseObserver)", "class_method_signature": "CpuServiceProxy.getTraceInfo(GetTraceInfoRequest request,\n                            StreamObserver<GetTraceInfoResponse> responseObserver)", "testcase": false, "constructor": false}, {"identifier": "getServiceDefinition", "parameters": "()", "modifiers": "@Override public", "return": "ServerServiceDefinition", "signature": "ServerServiceDefinition getServiceDefinition()", "full_signature": "@Override public ServerServiceDefinition getServiceDefinition()", "class_method_signature": "CpuServiceProxy.getServiceDefinition()", "testcase": false, "constructor": false}], "file": "profilers-android/src/com/android/tools/idea/profilers/perfd/CpuServiceProxy.java"}, "focal_method": {"identifier": "getServiceDefinition", "parameters": "()", "modifiers": "@Override public", "return": "ServerServiceDefinition", "body": "@Override\n  public ServerServiceDefinition getServiceDefinition() {\n    Map<MethodDescriptor, ServerCallHandler> overrides = new HashMap<>();\n    overrides.put(CpuServiceGrpc.METHOD_START_PROFILING_APP,\n                  ServerCalls.asyncUnaryCall((request, observer) -> {\n                    startProfilingApp((CpuProfilingAppStartRequest)request, (StreamObserver)observer);\n                  }));\n    overrides.put(CpuServiceGrpc.METHOD_STOP_PROFILING_APP,\n                  ServerCalls.asyncUnaryCall((request, observer) -> {\n                    stopProfilingApp((CpuProfilingAppStopRequest)request, (StreamObserver)observer);\n                  }));\n    overrides.put(CpuServiceGrpc.METHOD_GET_TRACE_INFO,\n                  ServerCalls.asyncUnaryCall((request, observer) -> {\n                    getTraceInfo((GetTraceInfoRequest)request, (StreamObserver)observer);\n                  }));\n\n    return generatePassThroughDefinitions(overrides, myServiceStub);\n  }", "signature": "ServerServiceDefinition getServiceDefinition()", "full_signature": "@Override public ServerServiceDefinition getServiceDefinition()", "class_method_signature": "CpuServiceProxy.getServiceDefinition()", "testcase": false, "constructor": false, "invocations": ["put", "asyncUnaryCall", "startProfilingApp", "put", "asyncUnaryCall", "stopProfilingApp", "put", "asyncUnaryCall", "getTraceInfo", "generatePassThroughDefinitions"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}