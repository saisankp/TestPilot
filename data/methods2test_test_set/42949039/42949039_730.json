{"test_class": {"identifier": "RetryPolicyFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private RetryPolicyFactory retryPolicyFactory;", "modifier": "@InjectMocks\n    private", "type": "RetryPolicyFactory", "declarator": "retryPolicyFactory", "var_name": "retryPolicyFactory"}, {"original_string": "@Mock\n    private ConfigurationHelper configurationHelper;", "modifier": "@Mock\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Mock\n    private BackoffStrategy backoffStrategy;", "modifier": "@Mock\n    private", "type": "BackoffStrategy", "declarator": "backoffStrategy", "var_name": "backoffStrategy"}], "file": "herd-code/herd-dao/src/test/java/org/finra/herd/dao/RetryPolicyFactoryTest.java"}, "test_case": {"identifier": "assertResultRetryPolicyConfiguredCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void assertResultRetryPolicyConfiguredCorrectly()\n    {\n        int expectedMaxErrorRetry = 12345;\n\n        when(configurationHelper.getProperty(any(), eq(Integer.class))).thenReturn(expectedMaxErrorRetry);\n\n        RetryPolicy retryPolicy = retryPolicyFactory.getRetryPolicy();\n\n        assertEquals(PredefinedRetryPolicies.DEFAULT_RETRY_CONDITION, retryPolicy.getRetryCondition());\n        assertEquals(backoffStrategy, retryPolicy.getBackoffStrategy());\n        assertEquals(expectedMaxErrorRetry, retryPolicy.getMaxErrorRetry());\n    }", "signature": "void assertResultRetryPolicyConfiguredCorrectly()", "full_signature": "@Test public void assertResultRetryPolicyConfiguredCorrectly()", "class_method_signature": "RetryPolicyFactoryTest.assertResultRetryPolicyConfiguredCorrectly()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getProperty", "any", "eq", "getRetryPolicy", "assertEquals", "getRetryCondition", "assertEquals", "getBackoffStrategy", "assertEquals", "getMaxErrorRetry"]}, "focal_class": {"identifier": "RetryPolicyFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private BackoffStrategy backoffStrategy;", "modifier": "@Autowired\n    private", "type": "BackoffStrategy", "declarator": "backoffStrategy", "var_name": "backoffStrategy"}], "methods": [{"identifier": "getRetryPolicy", "parameters": "()", "modifiers": "public", "return": "RetryPolicy", "signature": "RetryPolicy getRetryPolicy()", "full_signature": "public RetryPolicy getRetryPolicy()", "class_method_signature": "RetryPolicyFactory.getRetryPolicy()", "testcase": false, "constructor": false}], "file": "herd-code/herd-dao/src/main/java/org/finra/herd/dao/RetryPolicyFactory.java"}, "focal_method": {"identifier": "getRetryPolicy", "parameters": "()", "modifiers": "public", "return": "RetryPolicy", "body": "public RetryPolicy getRetryPolicy()\n    {\n        return new RetryPolicy(PredefinedRetryPolicies.DEFAULT_RETRY_CONDITION, backoffStrategy,\n            configurationHelper.getProperty(ConfigurationValue.AWS_MAX_RETRY_ATTEMPT, Integer.class), true);\n    }", "signature": "RetryPolicy getRetryPolicy()", "full_signature": "public RetryPolicy getRetryPolicy()", "class_method_signature": "RetryPolicyFactory.getRetryPolicy()", "testcase": false, "constructor": false, "invocations": ["getProperty"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}