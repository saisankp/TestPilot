{"test_class": {"identifier": "LineDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "LineDecoder lineDecoder = new LineDecoder(new LocationReferencePointDecoder());", "modifier": "", "type": "LineDecoder", "declarator": "lineDecoder = new LineDecoder(new LocationReferencePointDecoder())", "var_name": "lineDecoder"}], "file": "proto/src/test/java/openlr/proto/decoder/LineDecoderTest.java"}, "test_case": {"identifier": "testMissingLocationReference", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMissingLocationReference() {\n        LocationReferenceData locationReferenceData = LocationReferenceData.newBuilder()\n                .build();\n\n        try {\n            lineDecoder.decode(\"1\", locationReferenceData);\n            fail();\n        } catch (PhysicalFormatException e) {\n            assertEquals(e.getErrorCode(), OpenLRProtoStatusCode.MISSING_LOCATION_REFERENCE);\n        }\n    }", "signature": "void testMissingLocationReference()", "full_signature": "@Test public void testMissingLocationReference()", "class_method_signature": "LineDecoderTest.testMissingLocationReference()", "testcase": true, "constructor": false, "invocations": ["build", "newBuilder", "decode", "fail", "assertEquals", "getErrorCode"]}, "focal_class": {"identifier": "LineDecoder", "superclass": "", "interfaces": "implements LocationReferenceDecoder", "fields": [{"original_string": "private final LocationReferencePointDecoder locationReferencePointDecoder;", "modifier": "private final", "type": "LocationReferencePointDecoder", "declarator": "locationReferencePointDecoder", "var_name": "locationReferencePointDecoder"}], "methods": [{"identifier": "LineDecoder", "parameters": "(LocationReferencePointDecoder locationReferencePointDecoder)", "modifiers": "", "return": "", "signature": " LineDecoder(LocationReferencePointDecoder locationReferencePointDecoder)", "full_signature": "  LineDecoder(LocationReferencePointDecoder locationReferencePointDecoder)", "class_method_signature": "LineDecoder.LineDecoder(LocationReferencePointDecoder locationReferencePointDecoder)", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "(String id, LocationReferenceData data)", "modifiers": "@Override public", "return": "RawLocationReference", "signature": "RawLocationReference decode(String id, LocationReferenceData data)", "full_signature": "@Override public RawLocationReference decode(String id, LocationReferenceData data)", "class_method_signature": "LineDecoder.decode(String id, LocationReferenceData data)", "testcase": false, "constructor": false}], "file": "proto/src/main/java/openlr/proto/decoder/LineDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(String id, LocationReferenceData data)", "modifiers": "@Override public", "return": "RawLocationReference", "body": "@Override\n    public RawLocationReference decode(String id, LocationReferenceData data) throws OpenLRProtoException {\n        if (!data.hasLineLocationReference()) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.MISSING_LOCATION_REFERENCE);\n        }\n\n        LineLocationReference lineLocationReference = data.getLineLocationReference();\n\n        int lrpCount = lineLocationReference.getLocationReferencePointsCount();\n\n        if (lrpCount < 2) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);\n        }\n\n        List<LocationReferencePoint> locationReferencePoints = new ArrayList<>();\n\n        for (int sequenceNumber = 1; sequenceNumber <= lrpCount; sequenceNumber++) {\n            LocationReferencePoint locationReferencePoint = locationReferencePointDecoder.decode(\n                    lineLocationReference.getLocationReferencePoints(sequenceNumber - 1),\n                    sequenceNumber,\n                    sequenceNumber == lrpCount);\n            locationReferencePoints.add(locationReferencePoint);\n        }\n\n        Offsets offsets = new OffsetsProtoImpl(\n                lineLocationReference.getPositiveOffset(),\n                lineLocationReference.getNegativeOffset());\n\n        return new RawLineLocRef(id, locationReferencePoints, offsets);\n    }", "signature": "RawLocationReference decode(String id, LocationReferenceData data)", "full_signature": "@Override public RawLocationReference decode(String id, LocationReferenceData data)", "class_method_signature": "LineDecoder.decode(String id, LocationReferenceData data)", "testcase": false, "constructor": false, "invocations": ["hasLineLocationReference", "getLineLocationReference", "getLocationReferencePointsCount", "decode", "getLocationReferencePoints", "add", "getPositiveOffset", "getNegativeOffset"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}