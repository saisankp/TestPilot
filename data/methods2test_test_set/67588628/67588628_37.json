{"test_class": {"identifier": "ReflectionFieldWriterFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    private ReflectionFieldWriterFactory writerFactory;", "modifier": "@Inject\n    private", "type": "ReflectionFieldWriterFactory", "declarator": "writerFactory", "var_name": "writerFactory"}], "file": "artemis-core/src/test/java/org/jnosql/artemis/reflection/ReflectionFieldWriterFactoryTest.java"}, "test_case": {"identifier": "shouldREturnFieldReader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldREturnFieldReader() {\n        Person person = Person.builder().withId(10L).withAge(10).withName(\"Ada\").withPhones(singletonList(\"234234324\")).build();\n        Field[] fields = Person.class.getDeclaredFields();\n        Field id = Stream.of(fields).filter(f -> f.getName().equals(\"id\")).findFirst().get();\n        FieldWriter writer = writerFactory.apply(id);\n        Assertions.assertNotNull(writer);\n\n    }", "signature": "void shouldREturnFieldReader()", "full_signature": "@Test public void shouldREturnFieldReader()", "class_method_signature": "ReflectionFieldWriterFactoryTest.shouldREturnFieldReader()", "testcase": true, "constructor": false, "invocations": ["build", "withPhones", "withName", "withAge", "withId", "builder", "singletonList", "getDeclaredFields", "get", "findFirst", "filter", "of", "equals", "getName", "apply", "assertNotNull"]}, "focal_class": {"identifier": "ReflectionFieldWriterFactory", "superclass": "", "interfaces": "implements FieldWriterFactory", "fields": [{"original_string": "private Reflections reflections;", "modifier": "private", "type": "Reflections", "declarator": "reflections", "var_name": "reflections"}], "methods": [{"identifier": "ReflectionFieldWriterFactory", "parameters": "(Reflections reflections)", "modifiers": "@Inject public", "return": "", "signature": " ReflectionFieldWriterFactory(Reflections reflections)", "full_signature": "@Inject public  ReflectionFieldWriterFactory(Reflections reflections)", "class_method_signature": "ReflectionFieldWriterFactory.ReflectionFieldWriterFactory(Reflections reflections)", "testcase": false, "constructor": true}, {"identifier": "ReflectionFieldWriterFactory", "parameters": "()", "modifiers": "", "return": "", "signature": " ReflectionFieldWriterFactory()", "full_signature": "  ReflectionFieldWriterFactory()", "class_method_signature": "ReflectionFieldWriterFactory.ReflectionFieldWriterFactory()", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(Field field)", "modifiers": "@Override public", "return": "FieldWriter", "signature": "FieldWriter apply(Field field)", "full_signature": "@Override public FieldWriter apply(Field field)", "class_method_signature": "ReflectionFieldWriterFactory.apply(Field field)", "testcase": false, "constructor": false}], "file": "artemis-core/src/main/java/org/jnosql/artemis/reflection/ReflectionFieldWriterFactory.java"}, "focal_method": {"identifier": "apply", "parameters": "(Field field)", "modifiers": "@Override public", "return": "FieldWriter", "body": "@Override\n    public FieldWriter apply(Field field) {\n        return (bean, value) -> reflections.setValue(bean, field, value);\n    }", "signature": "FieldWriter apply(Field field)", "full_signature": "@Override public FieldWriter apply(Field field)", "class_method_signature": "ReflectionFieldWriterFactory.apply(Field field)", "testcase": false, "constructor": false, "invocations": ["setValue"]}, "repository": {"repo_id": 67588628, "url": "https://github.com/eclipse/jnosql-artemis", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 2612, "license": "licensed"}}