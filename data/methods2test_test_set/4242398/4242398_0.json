{"test_class": {"identifier": "GuavaOffHeapCacheBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "GuavaOffHeapCacheBuilder<String, TestEntity1> builder;", "modifier": "", "type": "GuavaOffHeapCacheBuilder<String, TestEntity1>", "declarator": "builder", "var_name": "builder"}, {"original_string": "GuavaOffHeapCache<String, TestEntity1> cache;", "modifier": "", "type": "GuavaOffHeapCache<String, TestEntity1>", "declarator": "cache", "var_name": "cache"}], "file": "collections/src/test/java/com/turbospaces/collections/GuavaOffHeapCacheBuilderTest.java"}, "test_case": {"identifier": "trivialSunnyDayScenario1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void trivialSunnyDayScenario1()\n                                          throws ExecutionException {\n        cache = builder.build( TestEntity1.class );\n        for ( int i = 0; i < 100; i++ ) {\n            final String key = String.valueOf( System.currentTimeMillis() + i );\n            assertThat( cache.getIfPresent( key ), is( nullValue() ) );\n            cache.get( key, new Callable<TestEntity1>() {\n                @Override\n                public TestEntity1 call() {\n                    Uninterruptibles.sleepUninterruptibly( 10, TimeUnit.NANOSECONDS );\n                    TestEntity1 entity = new TestEntity1();\n                    entity.afterPropertiesSet();\n                    entity.setUniqueIdentifier( key );\n                    return entity;\n                }\n            } );\n            assertThat( (int) cache.size(), is( i + 1 ) );\n            assertThat( cache.getIfPresent( key ).getUniqueIdentifier(), is( key ) );\n        }\n        assertThat( cache.stats().hitCount(), is( 100L ) );\n        assertThat( cache.stats().loadCount(), is( 100L ) );\n        assertThat( cache.stats().missCount(), is( 200L ) );\n        assertThat( cache.stats().averageLoadPenalty(), is( greaterThan( 0D ) ) );\n    }", "signature": "void trivialSunnyDayScenario1()", "full_signature": "@Test public void trivialSunnyDayScenario1()", "class_method_signature": "GuavaOffHeapCacheBuilderTest.trivialSunnyDayScenario1()", "testcase": true, "constructor": false, "invocations": ["build", "valueOf", "currentTimeMillis", "assertThat", "getIfPresent", "is", "nullValue", "get", "sleepUninterruptibly", "afterPropertiesSet", "setUniqueIdentifier", "assertThat", "size", "is", "assertThat", "getUniqueIdentifier", "getIfPresent", "is", "assertThat", "hitCount", "stats", "is", "assertThat", "loadCount", "stats", "is", "assertThat", "missCount", "stats", "is", "assertThat", "averageLoadPenalty", "stats", "is", "greaterThan"]}, "focal_class": {"identifier": "GuavaOffHeapCacheBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CapacityRestriction capacityRestriction = new CapacityRestriction();", "modifier": "private", "type": "CapacityRestriction", "declarator": "capacityRestriction = new CapacityRestriction()", "var_name": "capacityRestriction"}, {"original_string": "private ExecutorService executorService;", "modifier": "private", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private EffectiveMemoryManager memoryManager;", "modifier": "private", "type": "EffectiveMemoryManager", "declarator": "memoryManager", "var_name": "memoryManager"}, {"original_string": "private DecoratedKryo kryo;", "modifier": "private", "type": "DecoratedKryo", "declarator": "kryo", "var_name": "kryo"}, {"original_string": "private int ttl = Integer.MAX_VALUE;", "modifier": "private", "type": "int", "declarator": "ttl = Integer.MAX_VALUE", "var_name": "ttl"}, {"original_string": "private SpaceExpirationListener<K, V> expirationListener;", "modifier": "private", "type": "SpaceExpirationListener<K, V>", "declarator": "expirationListener", "var_name": "expirationListener"}, {"original_string": "private boolean recordStats;", "modifier": "private", "type": "boolean", "declarator": "recordStats", "var_name": "recordStats"}], "methods": [{"identifier": "expireAfterWrite", "parameters": "(final int duration,\n                                                           final TimeUnit unit)", "modifiers": "public", "return": "GuavaOffHeapCacheBuilder<K, V>", "signature": "GuavaOffHeapCacheBuilder<K, V> expireAfterWrite(final int duration,\n                                                           final TimeUnit unit)", "full_signature": "public GuavaOffHeapCacheBuilder<K, V> expireAfterWrite(final int duration,\n                                                           final TimeUnit unit)", "class_method_signature": "GuavaOffHeapCacheBuilder.expireAfterWrite(final int duration,\n                                                           final TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "expirationListener", "parameters": "(final SpaceExpirationListener<K, V> expirationListener)", "modifiers": "public", "return": "GuavaOffHeapCacheBuilder<K, V>", "signature": "GuavaOffHeapCacheBuilder<K, V> expirationListener(final SpaceExpirationListener<K, V> expirationListener)", "full_signature": "public GuavaOffHeapCacheBuilder<K, V> expirationListener(final SpaceExpirationListener<K, V> expirationListener)", "class_method_signature": "GuavaOffHeapCacheBuilder.expirationListener(final SpaceExpirationListener<K, V> expirationListener)", "testcase": false, "constructor": false}, {"identifier": "executorService", "parameters": "(final ExecutorService executorService)", "modifiers": "public", "return": "GuavaOffHeapCacheBuilder<K, V>", "signature": "GuavaOffHeapCacheBuilder<K, V> executorService(final ExecutorService executorService)", "full_signature": "public GuavaOffHeapCacheBuilder<K, V> executorService(final ExecutorService executorService)", "class_method_signature": "GuavaOffHeapCacheBuilder.executorService(final ExecutorService executorService)", "testcase": false, "constructor": false}, {"identifier": "kryo", "parameters": "(final DecoratedKryo kryo)", "modifiers": "public", "return": "GuavaOffHeapCacheBuilder<K, V>", "signature": "GuavaOffHeapCacheBuilder<K, V> kryo(final DecoratedKryo kryo)", "full_signature": "public GuavaOffHeapCacheBuilder<K, V> kryo(final DecoratedKryo kryo)", "class_method_signature": "GuavaOffHeapCacheBuilder.kryo(final DecoratedKryo kryo)", "testcase": false, "constructor": false}, {"identifier": "recordStats", "parameters": "(final boolean record)", "modifiers": "public", "return": "GuavaOffHeapCacheBuilder<K, V>", "signature": "GuavaOffHeapCacheBuilder<K, V> recordStats(final boolean record)", "full_signature": "public GuavaOffHeapCacheBuilder<K, V> recordStats(final boolean record)", "class_method_signature": "GuavaOffHeapCacheBuilder.recordStats(final boolean record)", "testcase": false, "constructor": false}, {"identifier": "setCapacityRestriction", "parameters": "(final CapacityRestriction capacityRestriction)", "modifiers": "public", "return": "void", "signature": "void setCapacityRestriction(final CapacityRestriction capacityRestriction)", "full_signature": "public void setCapacityRestriction(final CapacityRestriction capacityRestriction)", "class_method_signature": "GuavaOffHeapCacheBuilder.setCapacityRestriction(final CapacityRestriction capacityRestriction)", "testcase": false, "constructor": false}, {"identifier": "memoryManager", "parameters": "(final EffectiveMemoryManager memoryManager)", "modifiers": "public", "return": "GuavaOffHeapCacheBuilder<K, V>", "signature": "GuavaOffHeapCacheBuilder<K, V> memoryManager(final EffectiveMemoryManager memoryManager)", "full_signature": "public GuavaOffHeapCacheBuilder<K, V> memoryManager(final EffectiveMemoryManager memoryManager)", "class_method_signature": "GuavaOffHeapCacheBuilder.memoryManager(final EffectiveMemoryManager memoryManager)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(final Class<V> clazz)", "modifiers": "@SuppressWarnings(\"rawtypes\") public", "return": "GuavaOffHeapCache<K, V>", "signature": "GuavaOffHeapCache<K, V> build(final Class<V> clazz)", "full_signature": "@SuppressWarnings(\"rawtypes\") public GuavaOffHeapCache<K, V> build(final Class<V> clazz)", "class_method_signature": "GuavaOffHeapCacheBuilder.build(final Class<V> clazz)", "testcase": false, "constructor": false}], "file": "collections/src/main/java/com/turbospaces/collections/GuavaOffHeapCacheBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "(final Class<V> clazz)", "modifiers": "@SuppressWarnings(\"rawtypes\") public", "return": "GuavaOffHeapCache<K, V>", "body": "@SuppressWarnings(\"rawtypes\")\n    public GuavaOffHeapCache<K, V> build(final Class<V> clazz) {\n        if ( executorService == null )\n            executorService = MoreExecutors.sameThreadExecutor();\n        if ( kryo == null )\n            kryo = new DecoratedKryo();\n        if ( memoryManager == null )\n            memoryManager = new UnsafeMemoryManager();\n        kryo.register( clazz, new FieldsSerializer( kryo, new BasicBO( clazz ) ) );\n        MatchingSerializer<?> serializer = new ExplicitCacheEntrySerializer( kryo );\n        final MutableObject<SimpleStatsCounter> statsCounter = new MutableObject<AbstractCache.SimpleStatsCounter>();\n        if ( recordStats )\n            statsCounter.set( new SimpleStatsCounter() );\n        OffHeapLinearProbingSet offheapSet = new OffHeapLinearProbingSet( memoryManager, capacityRestriction, null, serializer, executorService );\n        SpaceExpirationListener<K, ByteBuffer> evictionListener = new SpaceExpirationListener<K, ByteBuffer>( false ) {\n            @Override\n            public void handleNotification(final ByteBuffer entity,\n                                           final K id,\n                                           final Class<ByteBuffer> persistentClass,\n                                           final int originalTimeToLive) {\n                if ( statsCounter.get() != null )\n                    statsCounter.get().recordEviction();\n            }\n        };\n        if ( expirationListener != null )\n            offheapSet.setExpirationListeners( evictionListener, new SpaceExpirationListener<K, ExplicitCacheEntry<K, V>>() {\n                @SuppressWarnings(\"unchecked\")\n                @Override\n                public void handleNotification(final ExplicitCacheEntry<K, V> entity,\n                                               final K id,\n                                               final Class<ExplicitCacheEntry<K, V>> persistentClass,\n                                               final int originalTimeToLive) {\n                    expirationListener.handleNotification( entity.getBean(), id, (Class<V>) entity.getBean().getClass(), originalTimeToLive );\n                }\n            } );\n        else\n            offheapSet.setExpirationListeners( evictionListener );\n        return new GuavaOffHeapCache<K, V>( memoryManager, offheapSet, kryo, ttl, statsCounter.get() );\n    }", "signature": "GuavaOffHeapCache<K, V> build(final Class<V> clazz)", "full_signature": "@SuppressWarnings(\"rawtypes\") public GuavaOffHeapCache<K, V> build(final Class<V> clazz)", "class_method_signature": "GuavaOffHeapCacheBuilder.build(final Class<V> clazz)", "testcase": false, "constructor": false, "invocations": ["sameThreadExecutor", "register", "set", "get", "recordEviction", "get", "setExpirationListeners", "handleNotification", "getBean", "getClass", "getBean", "setExpirationListeners", "get"]}, "repository": {"repo_id": 4242398, "url": "https://github.com/turbospaces/turbospaces", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 915, "license": "licensed"}}