{"test_class": {"identifier": "ChinesePlayoutScorerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ChinesePlayoutScorer scorer;", "modifier": "private", "type": "ChinesePlayoutScorer", "declarator": "scorer", "var_name": "scorer"}, {"original_string": "private Board board;", "modifier": "private", "type": "Board", "declarator": "board", "var_name": "board"}], "file": "src/edu/lclark/orego/score/ChinesePlayoutScorerTest.java"}, "test_case": {"identifier": "testScore", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testScore() {\n\t\tString[] before = {\n\t\t\t\t\".#OO.\",\n\t\t\t\t\"###OO\",\n\t\t\t\t\".#.O.\",\n\t\t\t\t\"##OOO\",\n\t\t\t\t\"OOO.O\",\n\t\t};\n\t\tboard.setUpProblem(before, WHITE);\n\t\tassertEquals(-13.5, scorer.score(), 0.1);\n\t}", "signature": "void testScore()", "full_signature": "@Test public void testScore()", "class_method_signature": "ChinesePlayoutScorerTest.testScore()", "testcase": true, "constructor": false, "invocations": ["setUpProblem", "assertEquals", "score"]}, "focal_class": {"identifier": "ChinesePlayoutScorer", "superclass": "", "interfaces": "implements PlayoutScorer", "fields": [{"original_string": "private final Board board;", "modifier": "private final", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private final double komi;", "modifier": "private final", "type": "double", "declarator": "komi", "var_name": "komi"}], "methods": [{"identifier": "ChinesePlayoutScorer", "parameters": "(Board board, double komi)", "modifiers": "public", "return": "", "signature": " ChinesePlayoutScorer(Board board, double komi)", "full_signature": "public  ChinesePlayoutScorer(Board board, double komi)", "class_method_signature": "ChinesePlayoutScorer.ChinesePlayoutScorer(Board board, double komi)", "testcase": false, "constructor": true}, {"identifier": "getKomi", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getKomi()", "full_signature": "@Override public double getKomi()", "class_method_signature": "ChinesePlayoutScorer.getKomi()", "testcase": false, "constructor": false}, {"identifier": "score", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double score()", "full_signature": "@Override public double score()", "class_method_signature": "ChinesePlayoutScorer.score()", "testcase": false, "constructor": false}, {"identifier": "winner", "parameters": "()", "modifiers": "@Override public", "return": "Color", "signature": "Color winner()", "full_signature": "@Override public Color winner()", "class_method_signature": "ChinesePlayoutScorer.winner()", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/score/ChinesePlayoutScorer.java"}, "focal_method": {"identifier": "score", "parameters": "()", "modifiers": "@Override public", "return": "double", "body": "@Override\n\tpublic double score() {\n\t\tfinal CoordinateSystem coords = board.getCoordinateSystem();\n\t\tdouble result = komi;\n\t\tfor (final short p : coords.getAllPointsOnBoard()) {\n\t\t\tfinal Color color = board.getColorAt(p);\n\t\t\tif (color == BLACK) {\n\t\t\t\tresult++;\n\t\t\t} else if (color == WHITE) {\n\t\t\t\tresult--;\n\t\t\t} else {\n\t\t\t\tif (board.hasMaxNeighborsForColor(BLACK, p)) {\n\t\t\t\t\tresult++;\n\t\t\t\t} else if (board.hasMaxNeighborsForColor(WHITE, p)) {\n\t\t\t\t\tresult--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "signature": "double score()", "full_signature": "@Override public double score()", "class_method_signature": "ChinesePlayoutScorer.score()", "testcase": false, "constructor": false, "invocations": ["getCoordinateSystem", "getAllPointsOnBoard", "getColorAt", "hasMaxNeighborsForColor", "hasMaxNeighborsForColor"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}