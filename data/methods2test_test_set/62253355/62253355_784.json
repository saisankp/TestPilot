{"test_class": {"identifier": "MobiPIPTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private MobiPIP pip;", "modifier": "private", "type": "MobiPIP", "declarator": "pip", "var_name": "pip"}, {"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private IRI subjectCategory = VALUE_FACTORY.createIRI(\"http://test.com/category-subject\");", "modifier": "private", "type": "IRI", "declarator": "subjectCategory = VALUE_FACTORY.createIRI(\"http://test.com/category-subject\")", "var_name": "subjectCategory"}, {"original_string": "private IRI resourceCategory = VALUE_FACTORY.createIRI(\"http://test.com/category-resource\");", "modifier": "private", "type": "IRI", "declarator": "resourceCategory = VALUE_FACTORY.createIRI(\"http://test.com/category-resource\")", "var_name": "resourceCategory"}, {"original_string": "private IRI actionCategory = VALUE_FACTORY.createIRI(\"http://test.com/category-action\");", "modifier": "private", "type": "IRI", "declarator": "actionCategory = VALUE_FACTORY.createIRI(\"http://test.com/category-action\")", "var_name": "actionCategory"}, {"original_string": "private IRI parentId = VALUE_FACTORY.createIRI(\"http://test.com/parent\");", "modifier": "private", "type": "IRI", "declarator": "parentId = VALUE_FACTORY.createIRI(\"http://test.com/parent\")", "var_name": "parentId"}, {"original_string": "private IRI subjectId = VALUE_FACTORY.createIRI(\"http://test.com/subject\");", "modifier": "private", "type": "IRI", "declarator": "subjectId = VALUE_FACTORY.createIRI(\"http://test.com/subject\")", "var_name": "subjectId"}, {"original_string": "private IRI resourceId = VALUE_FACTORY.createIRI(\"http://test.com/resource\");", "modifier": "private", "type": "IRI", "declarator": "resourceId = VALUE_FACTORY.createIRI(\"http://test.com/resource\")", "var_name": "resourceId"}, {"original_string": "private IRI actionId = VALUE_FACTORY.createIRI(\"http://test.com/action\");", "modifier": "private", "type": "IRI", "declarator": "actionId = VALUE_FACTORY.createIRI(\"http://test.com/action\")", "var_name": "actionId"}, {"original_string": "private IRI prop1Id = VALUE_FACTORY.createIRI(\"http://test.com/prop1\");", "modifier": "private", "type": "IRI", "declarator": "prop1Id = VALUE_FACTORY.createIRI(\"http://test.com/prop1\")", "var_name": "prop1Id"}, {"original_string": "private IRI prop2Id = VALUE_FACTORY.createIRI(\"http://test.com/prop2\");", "modifier": "private", "type": "IRI", "declarator": "prop2Id = VALUE_FACTORY.createIRI(\"http://test.com/prop2\")", "var_name": "prop2Id"}, {"original_string": "private IRI pathPropId = VALUE_FACTORY.createIRI(\"http://test.com/path\");", "modifier": "private", "type": "IRI", "declarator": "pathPropId = VALUE_FACTORY.createIRI(\"http://test.com/path\")", "var_name": "pathPropId"}, {"original_string": "private IRI datatypeId = VALUE_FACTORY.createIRI(\"http://test.com/prop\");", "modifier": "private", "type": "IRI", "declarator": "datatypeId = VALUE_FACTORY.createIRI(\"http://test.com/prop\")", "var_name": "datatypeId"}, {"original_string": "private IRI titleIRI = VALUE_FACTORY.createIRI(_Thing.title_IRI);", "modifier": "private", "type": "IRI", "declarator": "titleIRI = VALUE_FACTORY.createIRI(_Thing.title_IRI)", "var_name": "titleIRI"}, {"original_string": "private IRI pathId;", "modifier": "private", "type": "IRI", "declarator": "pathId", "var_name": "pathId"}, {"original_string": "private Map<String, Literal> attrs = createAttrs();", "modifier": "private", "type": "Map<String, Literal>", "declarator": "attrs = createAttrs()", "var_name": "attrs"}, {"original_string": "private OffsetDateTime time = OffsetDateTime.now();", "modifier": "private", "type": "OffsetDateTime", "declarator": "time = OffsetDateTime.now()", "var_name": "time"}, {"original_string": "@Mock\n    private AttributeDesignator designator;", "modifier": "@Mock\n    private", "type": "AttributeDesignator", "declarator": "designator", "var_name": "designator"}, {"original_string": "@Mock\n    private Request request;", "modifier": "@Mock\n    private", "type": "Request", "declarator": "request", "var_name": "request"}], "file": "com.mobi.security.policy.impl.core/src/test/java/com/mobi/security/policy/impl/core/pip/MobiPIPTest.java"}, "test_case": {"identifier": "findAttributeSubjectDirectTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findAttributeSubjectDirectTest() throws Exception {\n        List<Literal> result = pip.findAttribute(designator, request);\n        assertEquals(1, result.size());\n        Literal value = result.get(0);\n        assertEquals(VALUE_FACTORY.createIRI(XSD.BOOLEAN), value.getDatatype());\n        assertEquals(true, value.booleanValue());\n    }", "signature": "void findAttributeSubjectDirectTest()", "full_signature": "@Test public void findAttributeSubjectDirectTest()", "class_method_signature": "MobiPIPTest.findAttributeSubjectDirectTest()", "testcase": true, "constructor": false, "invocations": ["findAttribute", "assertEquals", "size", "get", "assertEquals", "createIRI", "getDatatype", "assertEquals", "booleanValue"]}, "focal_class": {"identifier": "MobiPIP", "superclass": "", "interfaces": "implements PIP", "fields": [{"original_string": "static final String PROP_PATH_NAMESPACE = \"http://mobi.com/policy/prop-path\";", "modifier": "static final", "type": "String", "declarator": "PROP_PATH_NAMESPACE = \"http://mobi.com/policy/prop-path\"", "var_name": "PROP_PATH_NAMESPACE"}, {"original_string": "private static final String PROP_PATH_QUERY = \"SELECT ?value WHERE { ?sub %s ?value .}\";", "modifier": "private static final", "type": "String", "declarator": "PROP_PATH_QUERY = \"SELECT ?value WHERE { ?sub %s ?value .}\"", "var_name": "PROP_PATH_QUERY"}, {"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}], "methods": [{"identifier": "setRepo", "parameters": "(Repository repo)", "modifiers": "@Reference(target = \"(id=system)\") public", "return": "void", "signature": "void setRepo(Repository repo)", "full_signature": "@Reference(target = \"(id=system)\") public void setRepo(Repository repo)", "class_method_signature": "MobiPIP.setRepo(Repository repo)", "testcase": false, "constructor": false}, {"identifier": "setVf", "parameters": "(ValueFactory vf)", "modifiers": "@Reference public", "return": "void", "signature": "void setVf(ValueFactory vf)", "full_signature": "@Reference public void setVf(ValueFactory vf)", "class_method_signature": "MobiPIP.setVf(ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "findAttribute", "parameters": "(AttributeDesignator attributeDesignator, Request request)", "modifiers": "@Override public", "return": "List<Literal>", "signature": "List<Literal> findAttribute(AttributeDesignator attributeDesignator, Request request)", "full_signature": "@Override public List<Literal> findAttribute(AttributeDesignator attributeDesignator, Request request)", "class_method_signature": "MobiPIP.findAttribute(AttributeDesignator attributeDesignator, Request request)", "testcase": false, "constructor": false}], "file": "com.mobi.security.policy.impl.core/src/main/java/com/mobi/security/policy/impl/core/pip/MobiPIP.java"}, "focal_method": {"identifier": "findAttribute", "parameters": "(AttributeDesignator attributeDesignator, Request request)", "modifiers": "@Override public", "return": "List<Literal>", "body": "@Override\n    public List<Literal> findAttribute(AttributeDesignator attributeDesignator, Request request)\n            throws MissingAttributeException, ProcessingException {\n        IRI attributeId = attributeDesignator.attributeId();\n        IRI category = attributeDesignator.category();\n        IRI pathSource;\n        if (category.equals(request.getSubjectCategory())) {\n            pathSource = request.getSubjectId();\n        } else if (category.equals(request.getResourceCategory())) {\n            pathSource = request.getResourceId();\n        } else {\n            return Collections.emptyList();\n        }\n\n        try (RepositoryConnection conn = repo.getConnection()) {\n            if (attributeId.stringValue().startsWith(PROP_PATH_NAMESPACE)) {\n                int firstIdx = attributeId.stringValue().lastIndexOf(\"(\") + 1;\n                int lastIdx = attributeId.stringValue().lastIndexOf(\")\");\n                String path = decode(attributeId.stringValue().substring(firstIdx, lastIdx));\n                TupleQuery query = conn.prepareTupleQuery(String.format(PROP_PATH_QUERY, path));\n                query.setBinding(\"sub\", pathSource);\n                return StreamSupport.stream(query.evaluate().spliterator(), false)\n                        .map(bindings -> bindings.getBinding(\"value\").get().getValue())\n                        .map(value -> {\n                            if (Literal.class.isAssignableFrom(value.getClass())) {\n                                return (Literal) value;\n                            } else {\n                                return vf.createLiteral(value.stringValue());\n                            }\n                        })\n                        .collect(Collectors.toList());\n            } else {\n                return StreamSupport.stream(conn.getStatements(pathSource, attributeId, null).spliterator(), false)\n                        .map(Statement::getObject)\n                        .map(value -> value instanceof Literal ? (Literal) value\n                                : vf.createLiteral(value.stringValue()))\n                        .collect(Collectors.toList());\n            }\n        }\n    }", "signature": "List<Literal> findAttribute(AttributeDesignator attributeDesignator, Request request)", "full_signature": "@Override public List<Literal> findAttribute(AttributeDesignator attributeDesignator, Request request)", "class_method_signature": "MobiPIP.findAttribute(AttributeDesignator attributeDesignator, Request request)", "testcase": false, "constructor": false, "invocations": ["attributeId", "category", "equals", "getSubjectCategory", "getSubjectId", "equals", "getResourceCategory", "getResourceId", "emptyList", "getConnection", "startsWith", "stringValue", "lastIndexOf", "stringValue", "lastIndexOf", "stringValue", "decode", "substring", "stringValue", "prepareTupleQuery", "format", "setBinding", "collect", "map", "map", "stream", "spliterator", "evaluate", "getValue", "get", "getBinding", "isAssignableFrom", "getClass", "createLiteral", "stringValue", "toList", "collect", "map", "map", "stream", "spliterator", "getStatements", "createLiteral", "stringValue", "toList"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}