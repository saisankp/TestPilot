{"test_class": {"identifier": "TestMultiplicationTriple", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final BigInteger modulus = new BigInteger(\"251\");", "modifier": "private final", "type": "BigInteger", "declarator": "modulus = new BigInteger(\"251\")", "var_name": "modulus"}, {"original_string": "private final BigIntegerFieldDefinition definition = new BigIntegerFieldDefinition(modulus);", "modifier": "private final", "type": "BigIntegerFieldDefinition", "declarator": "definition = new BigIntegerFieldDefinition(modulus)", "var_name": "definition"}], "file": "tools/mascot/src/test/java/dk/alexandra/fresco/tools/mascot/field/TestMultiplicationTriple.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToString() {\n    AuthenticatedElement left = new AuthenticatedElement(\n        definition.createElement(1),\n        definition.createElement(2));\n    AuthenticatedElement right = new AuthenticatedElement(\n        definition.createElement(3),\n        definition.createElement(4));\n    AuthenticatedElement product = new AuthenticatedElement(\n        definition.createElement(5),\n        definition.createElement(6));\n    MultiplicationTriple triple = new MultiplicationTriple(left, right, product);\n    String expected = \"MultiplicationTriple [left=AuthenticatedElement [share=BigIntegerFieldElement{value=1, modulus=BigIntegerModulus{value=251}}, mac=BigIntegerFieldElement{value=2, modulus=BigIntegerModulus{value=251}}], right=AuthenticatedElement [share=BigIntegerFieldElement{value=3, modulus=BigIntegerModulus{value=251}}, mac=BigIntegerFieldElement{value=4, modulus=BigIntegerModulus{value=251}}], product=AuthenticatedElement [share=BigIntegerFieldElement{value=5, modulus=BigIntegerModulus{value=251}}, mac=BigIntegerFieldElement{value=6, modulus=BigIntegerModulus{value=251}}]]\";\n    assertEquals(expected, triple.toString());\n  }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "TestMultiplicationTriple.testToString()", "testcase": true, "constructor": false, "invocations": ["createElement", "createElement", "createElement", "createElement", "createElement", "createElement", "assertEquals", "toString"]}, "focal_class": {"identifier": "MultiplicationTriple", "superclass": "", "interfaces": "implements Addable<MultiplicationTriple>", "fields": [{"original_string": "private final AuthenticatedElement left;", "modifier": "private final", "type": "AuthenticatedElement", "declarator": "left", "var_name": "left"}, {"original_string": "private final AuthenticatedElement right;", "modifier": "private final", "type": "AuthenticatedElement", "declarator": "right", "var_name": "right"}, {"original_string": "private final AuthenticatedElement product;", "modifier": "private final", "type": "AuthenticatedElement", "declarator": "product", "var_name": "product"}], "methods": [{"identifier": "MultiplicationTriple", "parameters": "(AuthenticatedElement left, AuthenticatedElement right,\n      AuthenticatedElement product)", "modifiers": "public", "return": "", "signature": " MultiplicationTriple(AuthenticatedElement left, AuthenticatedElement right,\n      AuthenticatedElement product)", "full_signature": "public  MultiplicationTriple(AuthenticatedElement left, AuthenticatedElement right,\n      AuthenticatedElement product)", "class_method_signature": "MultiplicationTriple.MultiplicationTriple(AuthenticatedElement left, AuthenticatedElement right,\n      AuthenticatedElement product)", "testcase": false, "constructor": true}, {"identifier": "getLeft", "parameters": "()", "modifiers": "public", "return": "AuthenticatedElement", "signature": "AuthenticatedElement getLeft()", "full_signature": "public AuthenticatedElement getLeft()", "class_method_signature": "MultiplicationTriple.getLeft()", "testcase": false, "constructor": false}, {"identifier": "getRight", "parameters": "()", "modifiers": "public", "return": "AuthenticatedElement", "signature": "AuthenticatedElement getRight()", "full_signature": "public AuthenticatedElement getRight()", "class_method_signature": "MultiplicationTriple.getRight()", "testcase": false, "constructor": false}, {"identifier": "getProduct", "parameters": "()", "modifiers": "public", "return": "AuthenticatedElement", "signature": "AuthenticatedElement getProduct()", "full_signature": "public AuthenticatedElement getProduct()", "class_method_signature": "MultiplicationTriple.getProduct()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MultiplicationTriple.toString()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(MultiplicationTriple other)", "modifiers": "@Override public", "return": "MultiplicationTriple", "signature": "MultiplicationTriple add(MultiplicationTriple other)", "full_signature": "@Override public MultiplicationTriple add(MultiplicationTriple other)", "class_method_signature": "MultiplicationTriple.add(MultiplicationTriple other)", "testcase": false, "constructor": false}], "file": "tools/mascot/src/main/java/dk/alexandra/fresco/tools/mascot/field/MultiplicationTriple.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String toString() {\n    return \"MultiplicationTriple [left=\" + left + \", right=\" + right + \", product=\" + product + \"]\";\n  }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MultiplicationTriple.toString()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}