{"test_class": {"identifier": "CurrentUserTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/org/apache/ivory/security/CurrentUserTest.java"}, "test_case": {"identifier": "testGetUser", "parameters": "()", "modifiers": "@Test(threadPoolSize = 10, invocationCount = 10, timeOut = 10000) public", "return": "void", "body": "@Test(threadPoolSize = 10, invocationCount = 10,  timeOut = 10000)\n    public void testGetUser() throws Exception {\n        String id = Long.toString(System.nanoTime());\n        CurrentUser.authenticate(id);\n        Assert.assertEquals(CurrentUser.getUser(), id);\n    }", "signature": "void testGetUser()", "full_signature": "@Test(threadPoolSize = 10, invocationCount = 10, timeOut = 10000) public void testGetUser()", "class_method_signature": "CurrentUserTest.testGetUser()", "testcase": true, "constructor": false, "invocations": ["toString", "nanoTime", "authenticate", "assertEquals", "getUser"]}, "focal_class": {"identifier": "CurrentUser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger LOG = Logger.getLogger(CurrentUser.class);", "modifier": "private static", "type": "Logger", "declarator": "LOG = Logger.getLogger(CurrentUser.class)", "var_name": "LOG"}, {"original_string": "private static final CurrentUser instance = new CurrentUser();", "modifier": "private static final", "type": "CurrentUser", "declarator": "instance = new CurrentUser()", "var_name": "instance"}, {"original_string": "private final ThreadLocal<Subject> currentSubject =\n            new ThreadLocal<Subject>();", "modifier": "private final", "type": "ThreadLocal<Subject>", "declarator": "currentSubject =\n            new ThreadLocal<Subject>()", "var_name": "currentSubject"}], "methods": [{"identifier": "get", "parameters": "()", "modifiers": "public static", "return": "CurrentUser", "signature": "CurrentUser get()", "full_signature": "public static CurrentUser get()", "class_method_signature": "CurrentUser.get()", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(String user)", "modifiers": "public static", "return": "void", "signature": "void authenticate(String user)", "full_signature": "public static void authenticate(String user)", "class_method_signature": "CurrentUser.authenticate(String user)", "testcase": false, "constructor": false}, {"identifier": "getSubject", "parameters": "()", "modifiers": "public static", "return": "Subject", "signature": "Subject getSubject()", "full_signature": "public static Subject getSubject()", "class_method_signature": "CurrentUser.getSubject()", "testcase": false, "constructor": false}, {"identifier": "getUser", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getUser()", "full_signature": "public static String getUser()", "class_method_signature": "CurrentUser.getUser()", "testcase": false, "constructor": false}, {"identifier": "getUserInternal", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String getUserInternal()", "full_signature": "private static String getUserInternal()", "class_method_signature": "CurrentUser.getUserInternal()", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/apache/ivory/security/CurrentUser.java"}, "focal_method": {"identifier": "getUser", "parameters": "()", "modifiers": "public static", "return": "String", "body": "public static String getUser() {\n        String user = getUserInternal();\n        if (user == null) {\n            throw new IllegalStateException(\"No user logged into the system\");\n        } else {\n            return user;\n        }\n    }", "signature": "String getUser()", "full_signature": "public static String getUser()", "class_method_signature": "CurrentUser.getUser()", "testcase": false, "constructor": false, "invocations": ["getUserInternal"]}, "repository": {"repo_id": 2836228, "url": "https://github.com/sriksun/Ivory", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 28, "size": 11708, "license": "licensed"}}