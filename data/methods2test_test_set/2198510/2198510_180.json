{"test_class": {"identifier": "TestCounterGroup", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CounterGroup counterGroup;", "modifier": "private", "type": "CounterGroup", "declarator": "counterGroup", "var_name": "counterGroup"}], "file": "flume-ng-core/src/test/java/org/apache/flume/TestCounterGroup.java"}, "test_case": {"identifier": "testIncrementAndGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIncrementAndGet() {\n    long value = counterGroup.incrementAndGet(\"test\");\n\n    Assert.assertEquals(1, value);\n  }", "signature": "void testIncrementAndGet()", "full_signature": "@Test public void testIncrementAndGet()", "class_method_signature": "TestCounterGroup.testIncrementAndGet()", "testcase": true, "constructor": false, "invocations": ["incrementAndGet", "assertEquals"]}, "focal_class": {"identifier": "CounterGroup", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private HashMap<String, AtomicLong> counters;", "modifier": "private", "type": "HashMap<String, AtomicLong>", "declarator": "counters", "var_name": "counters"}], "methods": [{"identifier": "CounterGroup", "parameters": "()", "modifiers": "public", "return": "", "signature": " CounterGroup()", "full_signature": "public  CounterGroup()", "class_method_signature": "CounterGroup.CounterGroup()", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(String name)", "modifiers": "public synchronized", "return": "Long", "signature": "Long get(String name)", "full_signature": "public synchronized Long get(String name)", "class_method_signature": "CounterGroup.get(String name)", "testcase": false, "constructor": false}, {"identifier": "incrementAndGet", "parameters": "(String name)", "modifiers": "public synchronized", "return": "Long", "signature": "Long incrementAndGet(String name)", "full_signature": "public synchronized Long incrementAndGet(String name)", "class_method_signature": "CounterGroup.incrementAndGet(String name)", "testcase": false, "constructor": false}, {"identifier": "addAndGet", "parameters": "(String name, Long delta)", "modifiers": "public synchronized", "return": "Long", "signature": "Long addAndGet(String name, Long delta)", "full_signature": "public synchronized Long addAndGet(String name, Long delta)", "class_method_signature": "CounterGroup.addAndGet(String name, Long delta)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(CounterGroup counterGroup)", "modifiers": "public synchronized", "return": "void", "signature": "void add(CounterGroup counterGroup)", "full_signature": "public synchronized void add(CounterGroup counterGroup)", "class_method_signature": "CounterGroup.add(CounterGroup counterGroup)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(String name, Long value)", "modifiers": "public synchronized", "return": "void", "signature": "void set(String name, Long value)", "full_signature": "public synchronized void set(String name, Long value)", "class_method_signature": "CounterGroup.set(String name, Long value)", "testcase": false, "constructor": false}, {"identifier": "getCounter", "parameters": "(String name)", "modifiers": "public synchronized", "return": "AtomicLong", "signature": "AtomicLong getCounter(String name)", "full_signature": "public synchronized AtomicLong getCounter(String name)", "class_method_signature": "CounterGroup.getCounter(String name)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public synchronized", "return": "String", "signature": "String toString()", "full_signature": "@Override public synchronized String toString()", "class_method_signature": "CounterGroup.toString()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public synchronized", "return": "String", "signature": "String getName()", "full_signature": "public synchronized String getName()", "class_method_signature": "CounterGroup.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public synchronized", "return": "void", "signature": "void setName(String name)", "full_signature": "public synchronized void setName(String name)", "class_method_signature": "CounterGroup.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "getCounters", "parameters": "()", "modifiers": "public synchronized", "return": "HashMap<String, AtomicLong>", "signature": "HashMap<String, AtomicLong> getCounters()", "full_signature": "public synchronized HashMap<String, AtomicLong> getCounters()", "class_method_signature": "CounterGroup.getCounters()", "testcase": false, "constructor": false}, {"identifier": "setCounters", "parameters": "(HashMap<String, AtomicLong> counters)", "modifiers": "public synchronized", "return": "void", "signature": "void setCounters(HashMap<String, AtomicLong> counters)", "full_signature": "public synchronized void setCounters(HashMap<String, AtomicLong> counters)", "class_method_signature": "CounterGroup.setCounters(HashMap<String, AtomicLong> counters)", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/CounterGroup.java"}, "focal_method": {"identifier": "incrementAndGet", "parameters": "(String name)", "modifiers": "public synchronized", "return": "Long", "body": "public synchronized Long incrementAndGet(String name) {\n    return getCounter(name).incrementAndGet();\n  }", "signature": "Long incrementAndGet(String name)", "full_signature": "public synchronized Long incrementAndGet(String name)", "class_method_signature": "CounterGroup.incrementAndGet(String name)", "testcase": false, "constructor": false, "invocations": ["incrementAndGet", "getCounter"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}