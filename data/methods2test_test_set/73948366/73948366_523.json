{"test_class": {"identifier": "InstanceProviderManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PrivateKey privateKey = null;", "modifier": "private", "type": "PrivateKey", "declarator": "privateKey = null", "var_name": "privateKey"}, {"original_string": "private DataStore store = null;", "modifier": "private", "type": "DataStore", "declarator": "store = null", "var_name": "store"}, {"original_string": "private static final String ZTS_DATA_STORE_PATH = \"/tmp/zts_server_unit_tests/zts_root\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_DATA_STORE_PATH = \"/tmp/zts_server_unit_tests/zts_root\"", "var_name": "ZTS_DATA_STORE_PATH"}, {"original_string": "private static final String ZTS_PRIVATE_KEY = \"src/test/resources/unit_test_zts_private.pem\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_PRIVATE_KEY = \"src/test/resources/unit_test_zts_private.pem\"", "var_name": "ZTS_PRIVATE_KEY"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/InstanceProviderManagerTest.java"}, "test_case": {"identifier": "testVerifyProviderEndpoint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVerifyProviderEndpoint() {\n        InstanceProviderManager providerManager = new InstanceProviderManager(null, null, null);\n        assertTrue(providerManager.verifyProviderEndpoint(\"test1.athenz.com\"));\n        assertTrue(providerManager.verifyProviderEndpoint(\"test1.athenz2.com\"));\n        assertFalse(providerManager.verifyProviderEndpoint(\"test1.athenz3.com\"));\n        \n        // now let's remove our config in which case all is true\n        \n        providerManager.providerEndpoints = Collections.emptyList();\n        assertTrue(providerManager.verifyProviderEndpoint(\"test1.athenz.com\"));\n        assertTrue(providerManager.verifyProviderEndpoint(\"test1.athenz2.com\"));\n        assertTrue(providerManager.verifyProviderEndpoint(\"test1.athenz3.com\"));\n    }", "signature": "void testVerifyProviderEndpoint()", "full_signature": "@Test public void testVerifyProviderEndpoint()", "class_method_signature": "InstanceProviderManagerTest.testVerifyProviderEndpoint()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "verifyProviderEndpoint", "assertTrue", "verifyProviderEndpoint", "assertFalse", "verifyProviderEndpoint", "emptyList", "assertTrue", "verifyProviderEndpoint", "assertTrue", "verifyProviderEndpoint", "assertTrue", "verifyProviderEndpoint"]}, "focal_class": {"identifier": "InstanceProviderManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(InstanceProviderManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(InstanceProviderManager.class)", "var_name": "LOGGER"}, {"original_string": "private static final String SCHEME_HTTPS = \"https\";", "modifier": "private static final", "type": "String", "declarator": "SCHEME_HTTPS = \"https\"", "var_name": "SCHEME_HTTPS"}, {"original_string": "private static final String SCHEME_CLASS = \"class\";", "modifier": "private static final", "type": "String", "declarator": "SCHEME_CLASS = \"class\"", "var_name": "SCHEME_CLASS"}, {"original_string": "private ConcurrentHashMap<String, InstanceProvider> providerMap;", "modifier": "private", "type": "ConcurrentHashMap<String, InstanceProvider>", "declarator": "providerMap", "var_name": "providerMap"}, {"original_string": "private DataStore dataStore;", "modifier": "private", "type": "DataStore", "declarator": "dataStore", "var_name": "dataStore"}, {"original_string": "private KeyStore keyStore;", "modifier": "private", "type": "KeyStore", "declarator": "keyStore", "var_name": "keyStore"}, {"original_string": "private SSLContext sslContext;", "modifier": "private", "type": "SSLContext", "declarator": "sslContext", "var_name": "sslContext"}, {"original_string": "List<String> providerEndpoints = Collections.emptyList();", "modifier": "", "type": "List<String>", "declarator": "providerEndpoints = Collections.emptyList()", "var_name": "providerEndpoints"}], "methods": [{"identifier": "InstanceProviderManager", "parameters": "(DataStore dataStore, SSLContext sslContext, KeyStore keyStore)", "modifiers": "public", "return": "", "signature": " InstanceProviderManager(DataStore dataStore, SSLContext sslContext, KeyStore keyStore)", "full_signature": "public  InstanceProviderManager(DataStore dataStore, SSLContext sslContext, KeyStore keyStore)", "class_method_signature": "InstanceProviderManager.InstanceProviderManager(DataStore dataStore, SSLContext sslContext, KeyStore keyStore)", "testcase": false, "constructor": true}, {"identifier": "getProvider", "parameters": "(String provider, HostnameResolver hostnameResolver)", "modifiers": "", "return": "InstanceProvider", "signature": "InstanceProvider getProvider(String provider, HostnameResolver hostnameResolver)", "full_signature": " InstanceProvider getProvider(String provider, HostnameResolver hostnameResolver)", "class_method_signature": "InstanceProviderManager.getProvider(String provider, HostnameResolver hostnameResolver)", "testcase": false, "constructor": false}, {"identifier": "getClassProvider", "parameters": "(String className, String providerName, HostnameResolver hostnameResolver)", "modifiers": "", "return": "InstanceProvider", "signature": "InstanceProvider getClassProvider(String className, String providerName, HostnameResolver hostnameResolver)", "full_signature": " InstanceProvider getClassProvider(String className, String providerName, HostnameResolver hostnameResolver)", "class_method_signature": "InstanceProviderManager.getClassProvider(String className, String providerName, HostnameResolver hostnameResolver)", "testcase": false, "constructor": false}, {"identifier": "getProviderScheme", "parameters": "(URI uri)", "modifiers": "", "return": "ProviderScheme", "signature": "ProviderScheme getProviderScheme(URI uri)", "full_signature": " ProviderScheme getProviderScheme(URI uri)", "class_method_signature": "InstanceProviderManager.getProviderScheme(URI uri)", "testcase": false, "constructor": false}, {"identifier": "verifyProviderEndpoint", "parameters": "(String host)", "modifiers": "", "return": "boolean", "signature": "boolean verifyProviderEndpoint(String host)", "full_signature": " boolean verifyProviderEndpoint(String host)", "class_method_signature": "InstanceProviderManager.verifyProviderEndpoint(String host)", "testcase": false, "constructor": false}, {"identifier": "getProviderEndpointScheme", "parameters": "(URI uri)", "modifiers": "", "return": "ProviderScheme", "signature": "ProviderScheme getProviderEndpointScheme(URI uri)", "full_signature": " ProviderScheme getProviderEndpointScheme(URI uri)", "class_method_signature": "InstanceProviderManager.getProviderEndpointScheme(URI uri)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/InstanceProviderManager.java"}, "focal_method": {"identifier": "verifyProviderEndpoint", "parameters": "(String host)", "modifiers": "", "return": "boolean", "body": "boolean verifyProviderEndpoint(String host) {\n        \n        if (providerEndpoints.isEmpty()) {\n            return true;\n        }\n        \n        for (String endpoint : providerEndpoints) {\n            if (host.endsWith(endpoint)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }", "signature": "boolean verifyProviderEndpoint(String host)", "full_signature": " boolean verifyProviderEndpoint(String host)", "class_method_signature": "InstanceProviderManager.verifyProviderEndpoint(String host)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "endsWith"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}