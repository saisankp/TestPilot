{"test_class": {"identifier": "ZMSImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String ZMS_PROP_PUBLIC_KEY = \"athenz.zms.publickey\";", "modifier": "public static final", "type": "String", "declarator": "ZMS_PROP_PUBLIC_KEY = \"athenz.zms.publickey\"", "var_name": "ZMS_PROP_PUBLIC_KEY"}, {"original_string": "private ZMSImpl zms             = null;", "modifier": "private", "type": "ZMSImpl", "declarator": "zms             = null", "var_name": "zms"}, {"original_string": "private String adminUser        = null;", "modifier": "private", "type": "String", "declarator": "adminUser        = null", "var_name": "adminUser"}, {"original_string": "private String pubKey           = null;", "modifier": "private", "type": "String", "declarator": "pubKey           = null", "var_name": "pubKey"}, {"original_string": "private String pubKeyK1         = null;", "modifier": "private", "type": "String", "declarator": "pubKeyK1         = null", "var_name": "pubKeyK1"}, {"original_string": "private String pubKeyK2         = null;", "modifier": "private", "type": "String", "declarator": "pubKeyK2         = null", "var_name": "pubKeyK2"}, {"original_string": "private String privKey          = null;", "modifier": "private", "type": "String", "declarator": "privKey          = null", "var_name": "privKey"}, {"original_string": "private String privKeyK1        = null;", "modifier": "private", "type": "String", "declarator": "privKeyK1        = null", "var_name": "privKeyK1"}, {"original_string": "private String privKeyK2        = null;", "modifier": "private", "type": "String", "declarator": "privKeyK2        = null", "var_name": "privKeyK2"}, {"original_string": "private final String auditRef   = \"audittest\";", "modifier": "private final", "type": "String", "declarator": "auditRef   = \"audittest\"", "var_name": "auditRef"}, {"original_string": "@Mock private RsrcCtxWrapper mockDomRsrcCtx;", "modifier": "@Mock private", "type": "RsrcCtxWrapper", "declarator": "mockDomRsrcCtx", "var_name": "mockDomRsrcCtx"}, {"original_string": "@Mock private com.yahoo.athenz.common.server.rest.ResourceContext mockDomRestRsrcCtx;", "modifier": "@Mock private", "type": "com.yahoo.athenz.common.server.rest.ResourceContext", "declarator": "mockDomRestRsrcCtx", "var_name": "mockDomRestRsrcCtx"}, {"original_string": "private AuditLogger auditLogger = null;", "modifier": "private", "type": "AuditLogger", "declarator": "auditLogger = null", "var_name": "auditLogger"}, {"original_string": "private static final String MOCKCLIENTADDR = \"10.11.12.13\";", "modifier": "private static final", "type": "String", "declarator": "MOCKCLIENTADDR = \"10.11.12.13\"", "var_name": "MOCKCLIENTADDR"}, {"original_string": "private static final String DB_USER = \"admin\";", "modifier": "private static final", "type": "String", "declarator": "DB_USER = \"admin\"", "var_name": "DB_USER"}, {"original_string": "private static final String DB_PASS = \"unit-test\";", "modifier": "private static final", "type": "String", "declarator": "DB_PASS = \"unit-test\"", "var_name": "DB_PASS"}, {"original_string": "@Mock private HttpServletRequest mockServletRequest;", "modifier": "@Mock private", "type": "HttpServletRequest", "declarator": "mockServletRequest", "var_name": "mockServletRequest"}, {"original_string": "@Mock private HttpServletResponse mockServletResponse;", "modifier": "@Mock private", "type": "HttpServletResponse", "declarator": "mockServletResponse", "var_name": "mockServletResponse"}, {"original_string": "@Mock private NotificationManager mockNotificationManager;", "modifier": "@Mock private", "type": "NotificationManager", "declarator": "mockNotificationManager", "var_name": "mockNotificationManager"}, {"original_string": "private static final Struct TABLE_PROVIDER_ROLE_ACTIONS = new Struct()\n            .with(\"admin\", \"*\").with(\"writer\", \"WRITE\").with(\"reader\", \"READ\");", "modifier": "private static final", "type": "Struct", "declarator": "TABLE_PROVIDER_ROLE_ACTIONS = new Struct()\n            .with(\"admin\", \"*\").with(\"writer\", \"WRITE\").with(\"reader\", \"READ\")", "var_name": "TABLE_PROVIDER_ROLE_ACTIONS"}, {"original_string": "private static final Struct RESOURCE_PROVIDER_ROLE_ACTIONS = new Struct()\n            .with(\"writer\", \"WRITE\").with(\"reader\", \"READ\");", "modifier": "private static final", "type": "Struct", "declarator": "RESOURCE_PROVIDER_ROLE_ACTIONS = new Struct()\n            .with(\"writer\", \"WRITE\").with(\"reader\", \"READ\")", "var_name": "RESOURCE_PROVIDER_ROLE_ACTIONS"}, {"original_string": "private static final int BASE_PRODUCT_ID = 400000000;", "modifier": "private static final", "type": "int", "declarator": "BASE_PRODUCT_ID = 400000000", "var_name": "BASE_PRODUCT_ID"}, {"original_string": "private static final java.util.Random domainProductId = new java.security.SecureRandom();", "modifier": "private static final", "type": "java.util.Random", "declarator": "domainProductId = new java.security.SecureRandom()", "var_name": "domainProductId"}, {"original_string": "private EmbeddedMysql mysqld;", "modifier": "private", "type": "EmbeddedMysql", "declarator": "mysqld", "var_name": "mysqld"}], "file": "servers/zms/src/test/java/com/yahoo/athenz/zms/ZMSImplTest.java"}, "test_case": {"identifier": "testGetDomainDataCheck", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDomainDataCheck() {\n\n        String tenantDomainName = \"testGetDomainDataCheck\";\n        TopLevelDomain tenDom = createTopLevelDomainObject(tenantDomainName,\n                \"Test Provider Domain\", \"testOrg\", adminUser);\n        zms.postTopLevelDomain(mockDomRsrcCtx, auditRef, tenDom);\n        // create roles\n        Role role1 = createRoleObject(tenantDomainName, \"Role1\", null, \"user.joe\", \"user.jane\");\n        zms.putRole(mockDomRsrcCtx, tenantDomainName, \"Role1\", auditRef, role1);\n\n        Role role2 = createRoleObject(tenantDomainName, \"Role2\", null, \"user.phil\", \"user.gil\");\n        zms.putRole(mockDomRsrcCtx, tenantDomainName, \"Role2\", auditRef, role2);\n\n        // create policies\n        Policy policy1 = createPolicyObject(tenantDomainName, \"Policy1\", \"Role1\",\n                \"UPDATE\", tenantDomainName + \":resource1\", AssertionEffect.ALLOW);\n        zms.putPolicy(mockDomRsrcCtx, tenantDomainName, \"Policy1\", auditRef, policy1);\n        Policy policy2 = createPolicyObject(tenantDomainName, \"Policy2\", \"Role2\",\n                \"READ\", tenantDomainName + \":resource1\", AssertionEffect.ALLOW);\n        zms.putPolicy(mockDomRsrcCtx, tenantDomainName, \"Policy2\", auditRef, policy2);\n        //\n        // test valid setup domain\n        DomainDataCheck ddc = zms.getDomainDataCheck(mockDomRsrcCtx, tenantDomainName);\n        assertNotNull(ddc);\n        assertEquals(3, ddc.getPolicyCount());\n        assertEquals(3, ddc.getAssertionCount());\n        assertEquals(0, ddc.getRoleWildCardCount());\n        assertNull(ddc.getDanglingRoles());\n        assertNull(ddc.getDanglingPolicies());\n        assertNull(ddc.getProvidersWithoutTrust());\n        assertNull(ddc.getTenantsWithoutAssumeRole());\n\n        // set valid wildcard role\n        Assertion assertion = new Assertion();\n        assertion.setAction(\"MANAGE\");\n        assertion.setEffect(AssertionEffect.ALLOW);\n        assertion.setResource(tenantDomainName + \":wildlife\");\n        assertion.setRole(tenantDomainName + \":role.Role*\");\n        \n        Policy policy = zms.getPolicy(mockDomRsrcCtx, tenantDomainName, \"Policy2\");\n        List<Assertion> assertList = policy.getAssertions();\n        assertList.add(assertion);\n        policy.setAssertions(assertList);\n        zms.putPolicy(mockDomRsrcCtx, tenantDomainName, \"Policy2\", auditRef, policy);\n\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, tenantDomainName);\n        assertNotNull(ddc);\n        assertEquals(3, ddc.getPolicyCount());\n        assertEquals(4, ddc.getAssertionCount());\n        assertEquals(1, ddc.getRoleWildCardCount());\n        assertNull(ddc.getDanglingRoles());\n        assertNull(ddc.getDanglingPolicies());\n        assertNull(ddc.getProvidersWithoutTrust());\n        assertNull(ddc.getTenantsWithoutAssumeRole());\n\n        // test dangling policy with wildcard role\n        assertion = new Assertion();\n        assertion.setAction(\"MANAGE\");\n        assertion.setEffect(AssertionEffect.ALLOW);\n        assertion.setResource(tenantDomainName + \":wildlife\");\n        assertion.setRole(tenantDomainName + \":role.Wild*\");\n        \n        policy = zms.getPolicy(mockDomRsrcCtx, tenantDomainName, \"Policy2\");\n        assertList = policy.getAssertions();\n        assertList.add(assertion);\n        policy.setAssertions(assertList);\n        zms.putPolicy(mockDomRsrcCtx, tenantDomainName, \"Policy2\", auditRef, policy);\n\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, tenantDomainName);\n        assertNotNull(ddc);\n        assertEquals(3, ddc.getPolicyCount());\n        assertEquals(5, ddc.getAssertionCount());\n        assertEquals(2, ddc.getRoleWildCardCount());\n        assertNull(ddc.getDanglingRoles());\n        assertEquals(1, ddc.getDanglingPolicies().size());\n        assertNull(ddc.getProvidersWithoutTrust());\n        assertNull(ddc.getTenantsWithoutAssumeRole());\n\n        // add a dangling role \n        Role role3 = createRoleObject(tenantDomainName, \"Role3\", null, \"user.user1\", \"user.user3\");\n        zms.putRole(mockDomRsrcCtx, tenantDomainName, \"Role3\", auditRef, role3);\n\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, tenantDomainName);\n        assertNotNull(ddc);\n        assertEquals(3, ddc.getPolicyCount());\n        assertEquals(5, ddc.getAssertionCount());\n        assertEquals(2, ddc.getRoleWildCardCount());\n        assertEquals(1, ddc.getDanglingRoles().size());\n        assertEquals(1, ddc.getDanglingPolicies().size());\n        assertNull(ddc.getProvidersWithoutTrust());\n        assertNull(ddc.getTenantsWithoutAssumeRole());\n\n        // test more dangling policies\n        // create policy with assertion using unknown role\n        assertion = new Assertion();\n        assertion.setAction(\"snorkel\");\n        assertion.setEffect(AssertionEffect.ALLOW);\n        assertion.setResource(tenantDomainName + \":molokoni\");\n        assertion.setRole(tenantDomainName + \":role.snorkeler\");\n        \n        policy = zms.getPolicy(mockDomRsrcCtx, tenantDomainName, \"Policy2\");\n        assertList = policy.getAssertions();\n        assertList.add(assertion);\n        policy.setAssertions(assertList);\n        zms.putPolicy(mockDomRsrcCtx, tenantDomainName, \"Policy2\", auditRef, policy);\n\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, tenantDomainName);\n        assertNotNull(ddc);\n        assertEquals(3, ddc.getPolicyCount());\n        assertEquals(6, ddc.getAssertionCount());\n        assertEquals(2, ddc.getRoleWildCardCount());\n        assertEquals(1, ddc.getDanglingRoles().size());\n        assertEquals(2, ddc.getDanglingPolicies().size());\n        assertNull(ddc.getProvidersWithoutTrust());\n        assertNull(ddc.getTenantsWithoutAssumeRole());\n\n        // create provider domain\n        String provDomainTop = \"testGetDomainDataCheckProvider\";\n        TopLevelDomain provDom = createTopLevelDomainObject(provDomainTop,\n                \"Test Provider Domain\", \"testOrg\", adminUser);\n        zms.postTopLevelDomain(mockDomRsrcCtx, auditRef, provDom);\n\n        String provDomainSub = provDomainTop + \".sub\";\n        SubDomain subDom = createSubDomainObject(\"sub\", provDomainTop, null, null, adminUser);\n        subDom.setAuditEnabled(true);\n        zms.postSubDomain(mockDomRsrcCtx, provDomainTop, auditRef, subDom);\n\n        // test incomplete tenancy setup\n        // put tenancy for provider\n        String provEndPoint = \"http://localhost:8090/provider\";\n        String provSvc      = \"storage\";\n        ServiceIdentity service = createServiceObject(\n                provDomainSub, provSvc, provEndPoint,\n                \"/usr/bin/java\", \"root\", \"users\", \"localhost\");\n\n        zms.putServiceIdentity(mockDomRsrcCtx, provDomainSub, provSvc, auditRef, service);\n\n        Tenancy tenant = createTenantObject(tenantDomainName, provDomainSub + \".\" + provSvc);\n        zms.putTenancy(mockDomRsrcCtx, tenantDomainName, provDomainSub + \".\" + provSvc, auditRef, tenant);\n\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, tenantDomainName);\n        assertNotNull(ddc);\n        assertEquals(4, ddc.getPolicyCount());\n        assertEquals(9, ddc.getAssertionCount());\n        assertEquals(2, ddc.getRoleWildCardCount());\n        assertEquals(1, ddc.getDanglingRoles().size());\n        assertEquals(2, ddc.getDanglingPolicies().size());\n        assertTrue(ddc.getDanglingRoles().contains(\"role3\"));\n        boolean danglingPolicy1Found = false;\n        boolean danglingPolicy2Found = false;\n        for (DanglingPolicy danglingPolicy : ddc.getDanglingPolicies()) {\n            if (danglingPolicy.getPolicyName().equals(\"policy2\") && danglingPolicy.getRoleName().equals(\"wild*\")) {\n                danglingPolicy1Found = true;\n            } else if (danglingPolicy.getPolicyName().equals(\"policy2\") && danglingPolicy.getRoleName().equals(\"snorkeler\")) {\n                danglingPolicy2Found = true;\n            }\n        }\n        assertTrue(danglingPolicy1Found);\n        assertTrue(danglingPolicy2Found);\n        assertEquals(1, ddc.getProvidersWithoutTrust().size());\n        assertNull(ddc.getTenantsWithoutAssumeRole());\n\n        // test that now all is hunky dory between the tenant and provider\n        // provider gets the trust role(s)\n        List<TenantRoleAction> roleActions = new ArrayList<>();\n        for (Struct.Field f : TABLE_PROVIDER_ROLE_ACTIONS) {\n            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction((String) f.value()));\n        }\n\n        TenantResourceGroupRoles tenantRoles = new TenantResourceGroupRoles().setDomain(provDomainSub)\n                .setService(provSvc).setTenant(tenantDomainName)\n                .setRoles(roleActions).setResourceGroup(\"set1\");\n\n        zms.putTenantResourceGroupRoles(mockDomRsrcCtx, provDomainSub, provSvc, tenantDomainName,\n                \"set1\", auditRef, tenantRoles);\n\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, tenantDomainName);\n        assertNotNull(ddc);\n        assertEquals(4, ddc.getPolicyCount());\n        assertEquals(9, ddc.getAssertionCount());\n        assertEquals(2, ddc.getRoleWildCardCount());\n        assertEquals(1, ddc.getDanglingRoles().size());\n        assertEquals(2, ddc.getDanglingPolicies().size());\n        assertNull(ddc.getTenantsWithoutAssumeRole());\n\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, provDomainSub);\n        assertNotNull(ddc);\n        assertEquals(5, ddc.getPolicyCount());\n        assertEquals(5, ddc.getAssertionCount());\n        assertEquals(0, ddc.getRoleWildCardCount());\n        assertNull(ddc.getDanglingRoles());\n        assertNull(ddc.getDanglingPolicies());\n        assertNull(ddc.getProvidersWithoutTrust());\n        assertNotNull(ddc.getTenantsWithoutAssumeRole());\n\n        // test provider should report tenant is missing\n        // remove the assume_role policies from the tenant\n        zms.deleteTenancy(mockDomRsrcCtx, tenantDomainName,  provDomainSub + \".\" + provSvc, auditRef);\n\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, provDomainSub);\n        assertNotNull(ddc);\n        assertEquals(5, ddc.getPolicyCount());\n        assertEquals(5, ddc.getAssertionCount());\n        assertEquals(0, ddc.getRoleWildCardCount());\n        assertNull(ddc.getDanglingRoles());\n        assertNull(ddc.getDanglingPolicies());\n        assertNull(ddc.getProvidersWithoutTrust());\n         assertEquals(1, ddc.getTenantsWithoutAssumeRole().size());\n\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, tenantDomainName);\n        assertNotNull(ddc);\n        assertEquals(3, ddc.getPolicyCount());\n        assertEquals(6, ddc.getAssertionCount());\n        assertEquals(2, ddc.getRoleWildCardCount());\n        assertEquals(2, ddc.getDanglingRoles().size());\n        assertEquals(2, ddc.getDanglingPolicies().size());\n        assertNull(ddc.getProvidersWithoutTrust());\n        assertNull(ddc.getTenantsWithoutAssumeRole());\n\n        // test service name with resource group\n        // setup up the top level domain+service with resource group\n        String provSvcTop = \"shelter\";\n        service = createServiceObject(\n                provDomainTop, provSvcTop, provEndPoint,\n                \"/usr/bin/java\", \"root\", \"users\", \"localhost\");\n\n        zms.putServiceIdentity(mockDomRsrcCtx, provDomainTop, provSvcTop, auditRef, service);\n\n        TenantResourceGroupRoles tenantGroupRoles = new TenantResourceGroupRoles()\n                .setDomain(provDomainTop)\n                .setService(provSvcTop).setTenant(tenantDomainName)\n                .setRoles(roleActions).setResourceGroup(\"ravers\");\n        // put the trust roles with resource group into top level provider domain\n        // - tenant is not yet supporting the top level domain\n        zms.putTenantResourceGroupRoles(mockDomRsrcCtx, provDomainTop, provSvcTop, tenantDomainName, \"ravers\",\n                auditRef, tenantGroupRoles);\n\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, provDomainTop);\n        assertNotNull(ddc);\n        assertEquals(5, ddc.getPolicyCount());\n        assertEquals(5, ddc.getAssertionCount());\n        assertEquals(0, ddc.getRoleWildCardCount());\n        assertNull(ddc.getDanglingRoles());\n        assertNull(ddc.getDanglingPolicies());\n        assertNull(ddc.getProvidersWithoutTrust());\n        assertEquals(1, ddc.getTenantsWithoutAssumeRole().size());\n\n        // now set up the tenant for the sub domain provider\n        ProviderResourceGroupRoles providerRoles = new ProviderResourceGroupRoles()\n                .setDomain(provDomainSub).setService(provSvc)\n                .setTenant(tenantDomainName).setRoles(roleActions)\n                .setResourceGroup(\"ravers\");\n        // this sets up the assume roles in the tenant for the sub domain\n        // if it is an authorized service, then it will setup the provider roles too\n        zms.putProviderResourceGroupRoles(mockDomRsrcCtx, tenantDomainName, provDomainSub, provSvc,\n                \"ravers\", auditRef, providerRoles);\n\n        // tenant sees that the subdomain provider isn't provisioned yet\n        // for the resource group: testgetdomaindatacheckprovider.sub.storage.ravers\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, tenantDomainName);\n        assertNotNull(ddc, ddc.toString());\n        assertEquals(7, ddc.getPolicyCount());\n        assertEquals(12, ddc.getAssertionCount());\n        assertEquals(2, ddc.getRoleWildCardCount());\n        assertEquals(1, ddc.getDanglingRoles().size());\n        assertEquals(2, ddc.getDanglingPolicies().size());\n        assertEquals(1, ddc.getProvidersWithoutTrust().size());\n        assertNull(ddc.getTenantsWithoutAssumeRole());\n\n        // setup tenancy in the tenant domain for the provider subdomain\n        zms.putTenancy(mockDomRsrcCtx, tenantDomainName, provDomainSub + \".\" + provSvc, auditRef, tenant);\n\n        // the subdomain provider believes it is in sync with tenant\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, provDomainSub);\n        assertNotNull(ddc);\n        assertEquals(5, ddc.getPolicyCount());\n        assertEquals(5, ddc.getAssertionCount());\n        assertEquals(0, ddc.getRoleWildCardCount());\n        assertNull(ddc.getDanglingRoles());\n        assertNull(ddc.getDanglingPolicies());\n        assertNull(ddc.getProvidersWithoutTrust());\n        assertNotNull(ddc.getTenantsWithoutAssumeRole());\n\n        // but the tenant sees the sub provider is not setup \n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, tenantDomainName);\n        assertNotNull(ddc);\n        assertEquals(7, ddc.getPolicyCount());\n        assertEquals(12, ddc.getAssertionCount());\n        assertEquals(2, ddc.getRoleWildCardCount());\n        assertEquals(1, ddc.getDanglingRoles().size());\n        assertEquals(2, ddc.getDanglingPolicies().size());\n        assertEquals(1, ddc.getProvidersWithoutTrust().size());\n        assertNull(ddc.getTenantsWithoutAssumeRole());\n\n        // now set up the sub domain provider for the tenant with resource groups\n        // so tenant and the sub domain provider are in sync again\n        // add resource groups to provider\n        tenantGroupRoles = new TenantResourceGroupRoles()\n                .setDomain(provDomainSub)\n                .setService(provSvc).setTenant(tenantDomainName)\n                .setRoles(roleActions).setResourceGroup(\"ravers\");\n        // put the trust roles into sub domain provider\n        zms.putTenantResourceGroupRoles(mockDomRsrcCtx, provDomainSub, provSvc, tenantDomainName, \"ravers\",\n                auditRef, tenantGroupRoles);\n\n        // now tenant sees the sub domain has provisioned it\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, tenantDomainName);\n        assertNotNull(ddc);\n        assertEquals(7, ddc.getPolicyCount());\n        assertEquals(12, ddc.getAssertionCount());\n        assertEquals(2, ddc.getRoleWildCardCount());\n        assertEquals(1, ddc.getDanglingRoles().size());\n        assertEquals(2, ddc.getDanglingPolicies().size());\n        assertNull(ddc.getProvidersWithoutTrust());\n        assertNull(ddc.getTenantsWithoutAssumeRole());\n\n        // now set up the tenant for the top level domain provider\n        // so tenant and the top level domain provider are in sync again\n        providerRoles = new ProviderResourceGroupRoles()\n                .setDomain(provDomainTop).setService(provSvcTop)\n                .setTenant(tenantDomainName).setRoles(roleActions)\n                .setResourceGroup(\"ravers\");\n        // this sets up the assume roles in the tenant for the top level domain\n        zms.putProviderResourceGroupRoles(mockDomRsrcCtx, tenantDomainName, provDomainTop, provSvcTop,\n                \"ravers\", auditRef, providerRoles);\n\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, tenantDomainName);\n        assertNotNull(ddc);\n        assertEquals(11, ddc.getPolicyCount());\n        assertEquals(18, ddc.getAssertionCount());\n        assertEquals(2, ddc.getRoleWildCardCount());\n        assertEquals(1, ddc.getDanglingRoles().size());\n        assertEquals(2, ddc.getDanglingPolicies().size());\n        assertNull(ddc.getProvidersWithoutTrust());\n        assertNull(ddc.getTenantsWithoutAssumeRole());\n\n        // delete the resource group tenancy support from sub domain\n        // this means the tenant domain should show both the sub domain and\n        // the top domain is without trust roles\n        zms.deleteTenantResourceGroupRoles(mockDomRsrcCtx, provDomainSub, provSvc,\n                tenantDomainName, \"ravers\", auditRef);\n\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, tenantDomainName);\n        assertNotNull(ddc);\n        assertEquals(11, ddc.getPolicyCount());\n        assertEquals(18, ddc.getAssertionCount());\n        assertEquals(2, ddc.getRoleWildCardCount());\n        assertEquals(1, ddc.getDanglingRoles().size());\n        assertEquals(2, ddc.getDanglingPolicies().size());\n        assertEquals(1, ddc.getProvidersWithoutTrust().size());\n        assertNull(ddc.getTenantsWithoutAssumeRole());\n\n        // delete the dangling policies and dangling role\n        zms.deletePolicy(mockDomRsrcCtx, tenantDomainName, \"Policy2\", auditRef);\n        zms.deleteRole(mockDomRsrcCtx, tenantDomainName, \"Role3\", auditRef);\n        zms.deleteRole(mockDomRsrcCtx, tenantDomainName, \"Role2\", auditRef);\n\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, tenantDomainName);\n        assertNotNull(ddc);\n        assertEquals(10, ddc.getPolicyCount());\n        assertEquals(14, ddc.getAssertionCount());\n        assertEquals(0, ddc.getRoleWildCardCount());\n        assertNull(ddc.getDanglingRoles());\n        assertNull(ddc.getDanglingPolicies());\n        assertEquals(1, ddc.getProvidersWithoutTrust().size());\n        assertNull(ddc.getTenantsWithoutAssumeRole());\n\n        // add the tenancy support for top domain\n        // - now tenant will see that it is all setup\n        tenantRoles = new TenantResourceGroupRoles().setDomain(provDomainTop)\n                .setService(provSvcTop).setTenant(tenantDomainName)\n                .setRoles(roleActions).setResourceGroup(\"set1\");\n\n        zms.putTenantResourceGroupRoles(mockDomRsrcCtx, provDomainTop, provSvcTop,\n                tenantDomainName, \"set1\", auditRef, tenantRoles);\n\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, tenantDomainName);\n        assertNotNull(ddc);\n        assertEquals(10, ddc.getPolicyCount());\n        assertEquals(14, ddc.getAssertionCount());\n        assertEquals(0, ddc.getRoleWildCardCount());\n        assertNull(ddc.getDanglingRoles());\n        assertNull(ddc.getDanglingPolicies());\n        assertEquals(1, ddc.getProvidersWithoutTrust().size());\n        assertNull(ddc.getTenantsWithoutAssumeRole());\n\n        // delete the provider resource group roles for the sub domain provider\n        // then everything in sync for this tenant\n        zms.deleteProviderResourceGroupRoles(mockDomRsrcCtx, tenantDomainName, provDomainSub, provSvc,\n                \"ravers\", auditRef);\n\n        ddc = zms.getDomainDataCheck(mockDomRsrcCtx, tenantDomainName);\n        assertNotNull(ddc);\n        assertEquals(7, ddc.getPolicyCount());\n        assertEquals(11, ddc.getAssertionCount());\n        assertEquals(0, ddc.getRoleWildCardCount());\n        assertNull(ddc.getDanglingRoles());\n        assertNull(ddc.getDanglingPolicies());\n        assertNull(ddc.getProvidersWithoutTrust());\n        assertNull(ddc.getTenantsWithoutAssumeRole());\n\n        zms.deleteTopLevelDomain(mockDomRsrcCtx, tenantDomainName, auditRef);\n        zms.deleteSubDomain(mockDomRsrcCtx, provDomainTop, \"sub\", auditRef);\n        zms.deleteTopLevelDomain(mockDomRsrcCtx, provDomainTop, auditRef);\n    }", "signature": "void testGetDomainDataCheck()", "full_signature": "@Test public void testGetDomainDataCheck()", "class_method_signature": "ZMSImplTest.testGetDomainDataCheck()", "testcase": true, "constructor": false, "invocations": ["createTopLevelDomainObject", "postTopLevelDomain", "createRoleObject", "putRole", "createRoleObject", "putRole", "createPolicyObject", "putPolicy", "createPolicyObject", "putPolicy", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertNull", "getDanglingRoles", "assertNull", "getDanglingPolicies", "assertNull", "getProvidersWithoutTrust", "assertNull", "getTenantsWithoutAssumeRole", "setAction", "setEffect", "setResource", "setRole", "getPolicy", "getAssertions", "add", "setAssertions", "putPolicy", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertNull", "getDanglingRoles", "assertNull", "getDanglingPolicies", "assertNull", "getProvidersWithoutTrust", "assertNull", "getTenantsWithoutAssumeRole", "setAction", "setEffect", "setResource", "setRole", "getPolicy", "getAssertions", "add", "setAssertions", "putPolicy", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertNull", "getDanglingRoles", "assertEquals", "size", "getDanglingPolicies", "assertNull", "getProvidersWithoutTrust", "assertNull", "getTenantsWithoutAssumeRole", "createRoleObject", "putRole", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertEquals", "size", "getDanglingRoles", "assertEquals", "size", "getDanglingPolicies", "assertNull", "getProvidersWithoutTrust", "assertNull", "getTenantsWithoutAssumeRole", "setAction", "setEffect", "setResource", "setRole", "getPolicy", "getAssertions", "add", "setAssertions", "putPolicy", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertEquals", "size", "getDanglingRoles", "assertEquals", "size", "getDanglingPolicies", "assertNull", "getProvidersWithoutTrust", "assertNull", "getTenantsWithoutAssumeRole", "createTopLevelDomainObject", "postTopLevelDomain", "createSubDomainObject", "setAuditEnabled", "postSubDomain", "createServiceObject", "putServiceIdentity", "createTenantObject", "putTenancy", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertEquals", "size", "getDanglingRoles", "assertEquals", "size", "getDanglingPolicies", "assertTrue", "contains", "getDanglingRoles", "getDanglingPolicies", "equals", "getPolicyName", "equals", "getRoleName", "equals", "getPolicyName", "equals", "getRoleName", "assertTrue", "assertTrue", "assertEquals", "size", "getProvidersWithoutTrust", "assertNull", "getTenantsWithoutAssumeRole", "add", "setAction", "setRole", "name", "value", "setResourceGroup", "setRoles", "setTenant", "setService", "setDomain", "putTenantResourceGroupRoles", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertEquals", "size", "getDanglingRoles", "assertEquals", "size", "getDanglingPolicies", "assertNull", "getTenantsWithoutAssumeRole", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertNull", "getDanglingRoles", "assertNull", "getDanglingPolicies", "assertNull", "getProvidersWithoutTrust", "assertNotNull", "getTenantsWithoutAssumeRole", "deleteTenancy", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertNull", "getDanglingRoles", "assertNull", "getDanglingPolicies", "assertNull", "getProvidersWithoutTrust", "assertEquals", "size", "getTenantsWithoutAssumeRole", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertEquals", "size", "getDanglingRoles", "assertEquals", "size", "getDanglingPolicies", "assertNull", "getProvidersWithoutTrust", "assertNull", "getTenantsWithoutAssumeRole", "createServiceObject", "putServiceIdentity", "setResourceGroup", "setRoles", "setTenant", "setService", "setDomain", "putTenantResourceGroupRoles", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertNull", "getDanglingRoles", "assertNull", "getDanglingPolicies", "assertNull", "getProvidersWithoutTrust", "assertEquals", "size", "getTenantsWithoutAssumeRole", "setResourceGroup", "setRoles", "setTenant", "setService", "setDomain", "putProviderResourceGroupRoles", "getDomainDataCheck", "assertNotNull", "toString", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertEquals", "size", "getDanglingRoles", "assertEquals", "size", "getDanglingPolicies", "assertEquals", "size", "getProvidersWithoutTrust", "assertNull", "getTenantsWithoutAssumeRole", "putTenancy", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertNull", "getDanglingRoles", "assertNull", "getDanglingPolicies", "assertNull", "getProvidersWithoutTrust", "assertNotNull", "getTenantsWithoutAssumeRole", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertEquals", "size", "getDanglingRoles", "assertEquals", "size", "getDanglingPolicies", "assertEquals", "size", "getProvidersWithoutTrust", "assertNull", "getTenantsWithoutAssumeRole", "setResourceGroup", "setRoles", "setTenant", "setService", "setDomain", "putTenantResourceGroupRoles", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertEquals", "size", "getDanglingRoles", "assertEquals", "size", "getDanglingPolicies", "assertNull", "getProvidersWithoutTrust", "assertNull", "getTenantsWithoutAssumeRole", "setResourceGroup", "setRoles", "setTenant", "setService", "setDomain", "putProviderResourceGroupRoles", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertEquals", "size", "getDanglingRoles", "assertEquals", "size", "getDanglingPolicies", "assertNull", "getProvidersWithoutTrust", "assertNull", "getTenantsWithoutAssumeRole", "deleteTenantResourceGroupRoles", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertEquals", "size", "getDanglingRoles", "assertEquals", "size", "getDanglingPolicies", "assertEquals", "size", "getProvidersWithoutTrust", "assertNull", "getTenantsWithoutAssumeRole", "deletePolicy", "deleteRole", "deleteRole", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertNull", "getDanglingRoles", "assertNull", "getDanglingPolicies", "assertEquals", "size", "getProvidersWithoutTrust", "assertNull", "getTenantsWithoutAssumeRole", "setResourceGroup", "setRoles", "setTenant", "setService", "setDomain", "putTenantResourceGroupRoles", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertNull", "getDanglingRoles", "assertNull", "getDanglingPolicies", "assertEquals", "size", "getProvidersWithoutTrust", "assertNull", "getTenantsWithoutAssumeRole", "deleteProviderResourceGroupRoles", "getDomainDataCheck", "assertNotNull", "assertEquals", "getPolicyCount", "assertEquals", "getAssertionCount", "assertEquals", "getRoleWildCardCount", "assertNull", "getDanglingRoles", "assertNull", "getDanglingPolicies", "assertNull", "getProvidersWithoutTrust", "assertNull", "getTenantsWithoutAssumeRole", "deleteTopLevelDomain", "deleteSubDomain", "deleteTopLevelDomain"]}, "focal_class": {"identifier": "ZMSImpl", "superclass": "", "interfaces": "implements Authorizer, KeyStore, ZMSHandler", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ZMSImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ZMSImpl.class)", "var_name": "LOG"}, {"original_string": "private static String ROOT_DIR;", "modifier": "private static", "type": "String", "declarator": "ROOT_DIR", "var_name": "ROOT_DIR"}, {"original_string": "private static final String ROLE_PREFIX = \"role.\";", "modifier": "private static final", "type": "String", "declarator": "ROLE_PREFIX = \"role.\"", "var_name": "ROLE_PREFIX"}, {"original_string": "private static final String POLICY_PREFIX = \"policy.\";", "modifier": "private static final", "type": "String", "declarator": "POLICY_PREFIX = \"policy.\"", "var_name": "POLICY_PREFIX"}, {"original_string": "private static final String ADMIN_POLICY_NAME = \"admin\";", "modifier": "private static final", "type": "String", "declarator": "ADMIN_POLICY_NAME = \"admin\"", "var_name": "ADMIN_POLICY_NAME"}, {"original_string": "private static final String ADMIN_ROLE_NAME = \"admin\";", "modifier": "private static final", "type": "String", "declarator": "ADMIN_ROLE_NAME = \"admin\"", "var_name": "ADMIN_ROLE_NAME"}, {"original_string": "private static final String META_ATTR_ACCOUNT = \"account\";", "modifier": "private static final", "type": "String", "declarator": "META_ATTR_ACCOUNT = \"account\"", "var_name": "META_ATTR_ACCOUNT"}, {"original_string": "private static final String META_ATTR_YPM_ID = \"ypmid\";", "modifier": "private static final", "type": "String", "declarator": "META_ATTR_YPM_ID = \"ypmid\"", "var_name": "META_ATTR_YPM_ID"}, {"original_string": "private static final String META_ATTR_ALL = \"all\";", "modifier": "private static final", "type": "String", "declarator": "META_ATTR_ALL = \"all\"", "var_name": "META_ATTR_ALL"}, {"original_string": "private static final String SYS_AUTH = \"sys.auth\";", "modifier": "private static final", "type": "String", "declarator": "SYS_AUTH = \"sys.auth\"", "var_name": "SYS_AUTH"}, {"original_string": "private static final String USER_TOKEN_DEFAULT_NAME = \"_self_\";", "modifier": "private static final", "type": "String", "declarator": "USER_TOKEN_DEFAULT_NAME = \"_self_\"", "var_name": "USER_TOKEN_DEFAULT_NAME"}, {"original_string": "private static final String TYPE_DOMAIN_NAME = \"DomainName\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_DOMAIN_NAME = \"DomainName\"", "var_name": "TYPE_DOMAIN_NAME"}, {"original_string": "private static final String TYPE_ENTITY_NAME = \"EntityName\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_ENTITY_NAME = \"EntityName\"", "var_name": "TYPE_ENTITY_NAME"}, {"original_string": "private static final String TYPE_SIMPLE_NAME = \"SimpleName\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_SIMPLE_NAME = \"SimpleName\"", "var_name": "TYPE_SIMPLE_NAME"}, {"original_string": "private static final String TYPE_MEMBER_NAME = \"MemberName\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_MEMBER_NAME = \"MemberName\"", "var_name": "TYPE_MEMBER_NAME"}, {"original_string": "private static final String TYPE_COMPOUND_NAME = \"CompoundName\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_COMPOUND_NAME = \"CompoundName\"", "var_name": "TYPE_COMPOUND_NAME"}, {"original_string": "private static final String TYPE_RESOURCE_NAME = \"ResourceName\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_RESOURCE_NAME = \"ResourceName\"", "var_name": "TYPE_RESOURCE_NAME"}, {"original_string": "private static final String TYPE_SERVICE_NAME = \"ServiceName\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_SERVICE_NAME = \"ServiceName\"", "var_name": "TYPE_SERVICE_NAME"}, {"original_string": "private static final String TYPE_ROLE = \"Role\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_ROLE = \"Role\"", "var_name": "TYPE_ROLE"}, {"original_string": "private static final String TYPE_POLICY = \"Policy\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_POLICY = \"Policy\"", "var_name": "TYPE_POLICY"}, {"original_string": "private static final String TYPE_ASSERTION = \"Assertion\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_ASSERTION = \"Assertion\"", "var_name": "TYPE_ASSERTION"}, {"original_string": "private static final String TYPE_SERVICE_IDENTITY = \"ServiceIdentity\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_SERVICE_IDENTITY = \"ServiceIdentity\"", "var_name": "TYPE_SERVICE_IDENTITY"}, {"original_string": "private static final String TYPE_TOP_LEVEL_DOMAIN = \"TopLevelDomain\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_TOP_LEVEL_DOMAIN = \"TopLevelDomain\"", "var_name": "TYPE_TOP_LEVEL_DOMAIN"}, {"original_string": "private static final String TYPE_SUB_DOMAIN = \"SubDomain\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_SUB_DOMAIN = \"SubDomain\"", "var_name": "TYPE_SUB_DOMAIN"}, {"original_string": "private static final String TYPE_USER_DOMAIN = \"UserDomain\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_USER_DOMAIN = \"UserDomain\"", "var_name": "TYPE_USER_DOMAIN"}, {"original_string": "private static final String TYPE_DOMAIN_META = \"DomainMeta\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_DOMAIN_META = \"DomainMeta\"", "var_name": "TYPE_DOMAIN_META"}, {"original_string": "private static final String TYPE_DOMAIN_TEMPLATE = \"DomainTemplate\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_DOMAIN_TEMPLATE = \"DomainTemplate\"", "var_name": "TYPE_DOMAIN_TEMPLATE"}, {"original_string": "private static final String TYPE_TENANT_RESOURCE_GROUP_ROLES = \"TenantResourceGroupRoles\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_TENANT_RESOURCE_GROUP_ROLES = \"TenantResourceGroupRoles\"", "var_name": "TYPE_TENANT_RESOURCE_GROUP_ROLES"}, {"original_string": "private static final String TYPE_PROVIDER_RESOURCE_GROUP_ROLES = \"ProviderResourceGroupRoles\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_PROVIDER_RESOURCE_GROUP_ROLES = \"ProviderResourceGroupRoles\"", "var_name": "TYPE_PROVIDER_RESOURCE_GROUP_ROLES"}, {"original_string": "private static final String TYPE_PUBLIC_KEY_ENTRY = \"PublicKeyEntry\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_PUBLIC_KEY_ENTRY = \"PublicKeyEntry\"", "var_name": "TYPE_PUBLIC_KEY_ENTRY"}, {"original_string": "private static final String TYPE_MEMBERSHIP = \"Membership\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_MEMBERSHIP = \"Membership\"", "var_name": "TYPE_MEMBERSHIP"}, {"original_string": "private static final String TYPE_GROUP_MEMBERSHIP = \"GroupMembership\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_GROUP_MEMBERSHIP = \"GroupMembership\"", "var_name": "TYPE_GROUP_MEMBERSHIP"}, {"original_string": "private static final String TYPE_QUOTA = \"Quota\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_QUOTA = \"Quota\"", "var_name": "TYPE_QUOTA"}, {"original_string": "private static final String TYPE_ROLE_SYSTEM_META = \"RoleSystemMeta\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_ROLE_SYSTEM_META = \"RoleSystemMeta\"", "var_name": "TYPE_ROLE_SYSTEM_META"}, {"original_string": "private static final String TYPE_ROLE_META = \"RoleMeta\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_ROLE_META = \"RoleMeta\"", "var_name": "TYPE_ROLE_META"}, {"original_string": "private static final String TYPE_SERVICE_IDENTITY_SYSTEM_META = \"ServiceIdentitySystemMeta\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_SERVICE_IDENTITY_SYSTEM_META = \"ServiceIdentitySystemMeta\"", "var_name": "TYPE_SERVICE_IDENTITY_SYSTEM_META"}, {"original_string": "private static final String TYPE_RESOURCE_NAMES = \"ResourceNames\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_RESOURCE_NAMES = \"ResourceNames\"", "var_name": "TYPE_RESOURCE_NAMES"}, {"original_string": "private static final String TYPE_AUTHORITY_KEYWORD = \"AuthorityKeyword\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_AUTHORITY_KEYWORD = \"AuthorityKeyword\"", "var_name": "TYPE_AUTHORITY_KEYWORD"}, {"original_string": "private static final String TYPE_AUTHORITY_KEYWORDS = \"AuthorityKeywords\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_AUTHORITY_KEYWORDS = \"AuthorityKeywords\"", "var_name": "TYPE_AUTHORITY_KEYWORDS"}, {"original_string": "private static final String TYPE_GROUP = \"Group\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_GROUP = \"Group\"", "var_name": "TYPE_GROUP"}, {"original_string": "private static final String TYPE_GROUP_SYSTEM_META = \"GroupSystemMeta\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_GROUP_SYSTEM_META = \"GroupSystemMeta\"", "var_name": "TYPE_GROUP_SYSTEM_META"}, {"original_string": "private static final String TYPE_GROUP_META = \"GroupMeta\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_GROUP_META = \"GroupMeta\"", "var_name": "TYPE_GROUP_META"}, {"original_string": "private static final String SERVER_READ_ONLY_MESSAGE = \"Server in Maintenance Read-Only mode. Please try your request later\";", "modifier": "private static final", "type": "String", "declarator": "SERVER_READ_ONLY_MESSAGE = \"Server in Maintenance Read-Only mode. Please try your request later\"", "var_name": "SERVER_READ_ONLY_MESSAGE"}, {"original_string": "private static final byte[] PERIOD = { 46 };", "modifier": "private static final", "type": "byte[]", "declarator": "PERIOD = { 46 }", "var_name": "PERIOD"}, {"original_string": "public static Metric metric;", "modifier": "public static", "type": "Metric", "declarator": "metric", "var_name": "metric"}, {"original_string": "public static String serverHostName  = null;", "modifier": "public static", "type": "String", "declarator": "serverHostName  = null", "var_name": "serverHostName"}, {"original_string": "protected DBService dbService = null;", "modifier": "protected", "type": "DBService", "declarator": "dbService = null", "var_name": "dbService"}, {"original_string": "protected Schema schema = null;", "modifier": "protected", "type": "Schema", "declarator": "schema = null", "var_name": "schema"}, {"original_string": "protected ServerPrivateKey privateKey = null;", "modifier": "protected", "type": "ServerPrivateKey", "declarator": "privateKey = null", "var_name": "privateKey"}, {"original_string": "protected ServerPrivateKey privateECKey = null;", "modifier": "protected", "type": "ServerPrivateKey", "declarator": "privateECKey = null", "var_name": "privateECKey"}, {"original_string": "protected ServerPrivateKey privateRSAKey = null;", "modifier": "protected", "type": "ServerPrivateKey", "declarator": "privateRSAKey = null", "var_name": "privateRSAKey"}, {"original_string": "protected int userTokenTimeout = 3600;", "modifier": "protected", "type": "int", "declarator": "userTokenTimeout = 3600", "var_name": "userTokenTimeout"}, {"original_string": "protected boolean virtualDomainSupport = true;", "modifier": "protected", "type": "boolean", "declarator": "virtualDomainSupport = true", "var_name": "virtualDomainSupport"}, {"original_string": "protected boolean productIdSupport = false;", "modifier": "protected", "type": "boolean", "declarator": "productIdSupport = false", "var_name": "productIdSupport"}, {"original_string": "protected int virtualDomainLimit = 2;", "modifier": "protected", "type": "int", "declarator": "virtualDomainLimit = 2", "var_name": "virtualDomainLimit"}, {"original_string": "protected long signedPolicyTimeout;", "modifier": "protected", "type": "long", "declarator": "signedPolicyTimeout", "var_name": "signedPolicyTimeout"}, {"original_string": "protected int domainNameMaxLen;", "modifier": "protected", "type": "int", "declarator": "domainNameMaxLen", "var_name": "domainNameMaxLen"}, {"original_string": "protected AuthorizedServices serverAuthorizedServices = null;", "modifier": "protected", "type": "AuthorizedServices", "declarator": "serverAuthorizedServices = null", "var_name": "serverAuthorizedServices"}, {"original_string": "protected SolutionTemplates serverSolutionTemplates = null;", "modifier": "protected", "type": "SolutionTemplates", "declarator": "serverSolutionTemplates = null", "var_name": "serverSolutionTemplates"}, {"original_string": "protected Map<String, String> serverPublicKeyMap = null;", "modifier": "protected", "type": "Map<String, String>", "declarator": "serverPublicKeyMap = null", "var_name": "serverPublicKeyMap"}, {"original_string": "protected boolean readOnlyMode = false;", "modifier": "protected", "type": "boolean", "declarator": "readOnlyMode = false", "var_name": "readOnlyMode"}, {"original_string": "protected boolean validateUserRoleMembers = false;", "modifier": "protected", "type": "boolean", "declarator": "validateUserRoleMembers = false", "var_name": "validateUserRoleMembers"}, {"original_string": "protected boolean validateServiceRoleMembers = false;", "modifier": "protected", "type": "boolean", "declarator": "validateServiceRoleMembers = false", "var_name": "validateServiceRoleMembers"}, {"original_string": "protected boolean useMasterCopyForSignedDomains = false;", "modifier": "protected", "type": "boolean", "declarator": "useMasterCopyForSignedDomains = false", "var_name": "useMasterCopyForSignedDomains"}, {"original_string": "protected Set<String> validateServiceMemberSkipDomains;", "modifier": "protected", "type": "Set<String>", "declarator": "validateServiceMemberSkipDomains", "var_name": "validateServiceMemberSkipDomains"}, {"original_string": "protected static Validator validator;", "modifier": "protected static", "type": "Validator", "declarator": "validator", "var_name": "validator"}, {"original_string": "protected String userDomain;", "modifier": "protected", "type": "String", "declarator": "userDomain", "var_name": "userDomain"}, {"original_string": "protected String userDomainPrefix;", "modifier": "protected", "type": "String", "declarator": "userDomainPrefix", "var_name": "userDomainPrefix"}, {"original_string": "protected String homeDomain;", "modifier": "protected", "type": "String", "declarator": "homeDomain", "var_name": "homeDomain"}, {"original_string": "protected String homeDomainPrefix;", "modifier": "protected", "type": "String", "declarator": "homeDomainPrefix", "var_name": "homeDomainPrefix"}, {"original_string": "protected String userDomainAlias;", "modifier": "protected", "type": "String", "declarator": "userDomainAlias", "var_name": "userDomainAlias"}, {"original_string": "protected String userDomainAliasPrefix;", "modifier": "protected", "type": "String", "declarator": "userDomainAliasPrefix", "var_name": "userDomainAliasPrefix"}, {"original_string": "protected String serverRegion = null;", "modifier": "protected", "type": "String", "declarator": "serverRegion = null", "var_name": "serverRegion"}, {"original_string": "protected List<String> addlUserCheckDomainPrefixList = null;", "modifier": "protected", "type": "List<String>", "declarator": "addlUserCheckDomainPrefixList = null", "var_name": "addlUserCheckDomainPrefixList"}, {"original_string": "protected Http.AuthorityList authorities = null;", "modifier": "protected", "type": "Http.AuthorityList", "declarator": "authorities = null", "var_name": "authorities"}, {"original_string": "protected List<String> providerEndpoints = null;", "modifier": "protected", "type": "List<String>", "declarator": "providerEndpoints = null", "var_name": "providerEndpoints"}, {"original_string": "protected Set<String> reservedServiceNames = null;", "modifier": "protected", "type": "Set<String>", "declarator": "reservedServiceNames = null", "var_name": "reservedServiceNames"}, {"original_string": "protected PrivateKeyStore keyStore = null;", "modifier": "protected", "type": "PrivateKeyStore", "declarator": "keyStore = null", "var_name": "keyStore"}, {"original_string": "protected boolean secureRequestsOnly = true;", "modifier": "protected", "type": "boolean", "declarator": "secureRequestsOnly = true", "var_name": "secureRequestsOnly"}, {"original_string": "protected AuditLogger auditLogger = null;", "modifier": "protected", "type": "AuditLogger", "declarator": "auditLogger = null", "var_name": "auditLogger"}, {"original_string": "protected Authority userAuthority = null;", "modifier": "protected", "type": "Authority", "declarator": "userAuthority = null", "var_name": "userAuthority"}, {"original_string": "protected Authority principalAuthority = null;", "modifier": "protected", "type": "Authority", "declarator": "principalAuthority = null", "var_name": "principalAuthority"}, {"original_string": "protected Set<String> authFreeUriSet = null;", "modifier": "protected", "type": "Set<String>", "declarator": "authFreeUriSet = null", "var_name": "authFreeUriSet"}, {"original_string": "protected List<Pattern> authFreeUriList = null;", "modifier": "protected", "type": "List<Pattern>", "declarator": "authFreeUriList = null", "var_name": "authFreeUriList"}, {"original_string": "protected Set<String> corsOriginList = null;", "modifier": "protected", "type": "Set<String>", "declarator": "corsOriginList = null", "var_name": "corsOriginList"}, {"original_string": "protected int httpPort;", "modifier": "protected", "type": "int", "declarator": "httpPort", "var_name": "httpPort"}, {"original_string": "protected int httpsPort;", "modifier": "protected", "type": "int", "declarator": "httpsPort", "var_name": "httpsPort"}, {"original_string": "protected int statusPort;", "modifier": "protected", "type": "int", "declarator": "statusPort", "var_name": "statusPort"}, {"original_string": "protected int serviceNameMinLength;", "modifier": "protected", "type": "int", "declarator": "serviceNameMinLength", "var_name": "serviceNameMinLength"}, {"original_string": "protected Status successServerStatus = null;", "modifier": "protected", "type": "Status", "declarator": "successServerStatus = null", "var_name": "successServerStatus"}, {"original_string": "protected Set<String> reservedSystemDomains = null;", "modifier": "protected", "type": "Set<String>", "declarator": "reservedSystemDomains = null", "var_name": "reservedSystemDomains"}, {"original_string": "protected File healthCheckFile = null;", "modifier": "protected", "type": "File", "declarator": "healthCheckFile = null", "var_name": "healthCheckFile"}, {"original_string": "protected AuditReferenceValidator auditReferenceValidator = null;", "modifier": "protected", "type": "AuditReferenceValidator", "declarator": "auditReferenceValidator = null", "var_name": "auditReferenceValidator"}, {"original_string": "protected NotificationManager notificationManager = null;", "modifier": "protected", "type": "NotificationManager", "declarator": "notificationManager = null", "var_name": "notificationManager"}, {"original_string": "protected ObjectMapper jsonMapper;", "modifier": "protected", "type": "ObjectMapper", "declarator": "jsonMapper", "var_name": "jsonMapper"}, {"original_string": "protected StatusChecker statusChecker = null;", "modifier": "protected", "type": "StatusChecker", "declarator": "statusChecker = null", "var_name": "statusChecker"}, {"original_string": "protected ObjectStore objectStore = null;", "modifier": "protected", "type": "ObjectStore", "declarator": "objectStore = null", "var_name": "objectStore"}, {"original_string": "protected ZMSGroupMembersFetcher groupMemberFetcher = null;", "modifier": "protected", "type": "ZMSGroupMembersFetcher", "declarator": "groupMemberFetcher = null", "var_name": "groupMemberFetcher"}], "methods": [{"identifier": "ZMSImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " ZMSImpl()", "full_signature": "public  ZMSImpl()", "class_method_signature": "ZMSImpl.ZMSImpl()", "testcase": false, "constructor": true}, {"identifier": "setNotificationManager", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setNotificationManager()", "full_signature": "private void setNotificationManager()", "class_method_signature": "ZMSImpl.setNotificationManager()", "testcase": false, "constructor": false}, {"identifier": "loadSystemProperties", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadSystemProperties()", "full_signature": " void loadSystemProperties()", "class_method_signature": "ZMSImpl.loadSystemProperties()", "testcase": false, "constructor": false}, {"identifier": "setAuthorityKeyStore", "parameters": "()", "modifiers": "", "return": "void", "signature": "void setAuthorityKeyStore()", "full_signature": " void setAuthorityKeyStore()", "class_method_signature": "ZMSImpl.setAuthorityKeyStore()", "testcase": false, "constructor": false}, {"identifier": "loadSchemaValidator", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadSchemaValidator()", "full_signature": " void loadSchemaValidator()", "class_method_signature": "ZMSImpl.loadSchemaValidator()", "testcase": false, "constructor": false}, {"identifier": "loadConfigurationSettings", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadConfigurationSettings()", "full_signature": " void loadConfigurationSettings()", "class_method_signature": "ZMSImpl.loadConfigurationSettings()", "testcase": false, "constructor": false}, {"identifier": "loadObjectStore", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadObjectStore()", "full_signature": " void loadObjectStore()", "class_method_signature": "ZMSImpl.loadObjectStore()", "testcase": false, "constructor": false}, {"identifier": "loadMetricObject", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadMetricObject()", "full_signature": " void loadMetricObject()", "class_method_signature": "ZMSImpl.loadMetricObject()", "testcase": false, "constructor": false}, {"identifier": "loadPrivateKeyStore", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadPrivateKeyStore()", "full_signature": " void loadPrivateKeyStore()", "class_method_signature": "ZMSImpl.loadPrivateKeyStore()", "testcase": false, "constructor": false}, {"identifier": "loadAuthorities", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadAuthorities()", "full_signature": " void loadAuthorities()", "class_method_signature": "ZMSImpl.loadAuthorities()", "testcase": false, "constructor": false}, {"identifier": "loadAuditLogger", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadAuditLogger()", "full_signature": " void loadAuditLogger()", "class_method_signature": "ZMSImpl.loadAuditLogger()", "testcase": false, "constructor": false}, {"identifier": "loadAuditRefValidator", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadAuditRefValidator()", "full_signature": " void loadAuditRefValidator()", "class_method_signature": "ZMSImpl.loadAuditRefValidator()", "testcase": false, "constructor": false}, {"identifier": "loadServerPublicKeys", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadServerPublicKeys()", "full_signature": " void loadServerPublicKeys()", "class_method_signature": "ZMSImpl.loadServerPublicKeys()", "testcase": false, "constructor": false}, {"identifier": "loadSolutionTemplates", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadSolutionTemplates()", "full_signature": " void loadSolutionTemplates()", "class_method_signature": "ZMSImpl.loadSolutionTemplates()", "testcase": false, "constructor": false}, {"identifier": "autoApplyTemplates", "parameters": "()", "modifiers": "", "return": "void", "signature": "void autoApplyTemplates()", "full_signature": " void autoApplyTemplates()", "class_method_signature": "ZMSImpl.autoApplyTemplates()", "testcase": false, "constructor": false}, {"identifier": "loadAuthorizedServices", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadAuthorizedServices()", "full_signature": " void loadAuthorizedServices()", "class_method_signature": "ZMSImpl.loadAuthorizedServices()", "testcase": false, "constructor": false}, {"identifier": "loadStatusChecker", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadStatusChecker()", "full_signature": " void loadStatusChecker()", "class_method_signature": "ZMSImpl.loadStatusChecker()", "testcase": false, "constructor": false}, {"identifier": "initObjectStore", "parameters": "()", "modifiers": "", "return": "void", "signature": "void initObjectStore()", "full_signature": " void initObjectStore()", "class_method_signature": "ZMSImpl.initObjectStore()", "testcase": false, "constructor": false}, {"identifier": "schema", "parameters": "()", "modifiers": "public", "return": "Schema", "signature": "Schema schema()", "full_signature": "public Schema schema()", "class_method_signature": "ZMSImpl.schema()", "testcase": false, "constructor": false}, {"identifier": "getDomainList", "parameters": "(ResourceContext ctx, Integer limit, String skip, String prefix,\n            Integer depth, String account, Integer productId, String roleMember, String roleName,\n            String modifiedSince)", "modifiers": "public", "return": "DomainList", "signature": "DomainList getDomainList(ResourceContext ctx, Integer limit, String skip, String prefix,\n            Integer depth, String account, Integer productId, String roleMember, String roleName,\n            String modifiedSince)", "full_signature": "public DomainList getDomainList(ResourceContext ctx, Integer limit, String skip, String prefix,\n            Integer depth, String account, Integer productId, String roleMember, String roleName,\n            String modifiedSince)", "class_method_signature": "ZMSImpl.getDomainList(ResourceContext ctx, Integer limit, String skip, String prefix,\n            Integer depth, String account, Integer productId, String roleMember, String roleName,\n            String modifiedSince)", "testcase": false, "constructor": false}, {"identifier": "getDomain", "parameters": "(ResourceContext ctx, String domainName)", "modifiers": "public", "return": "Domain", "signature": "Domain getDomain(ResourceContext ctx, String domainName)", "full_signature": "public Domain getDomain(ResourceContext ctx, String domainName)", "class_method_signature": "ZMSImpl.getDomain(ResourceContext ctx, String domainName)", "testcase": false, "constructor": false}, {"identifier": "postTopLevelDomain", "parameters": "(ResourceContext ctx, String auditRef, TopLevelDomain detail)", "modifiers": "public", "return": "Domain", "signature": "Domain postTopLevelDomain(ResourceContext ctx, String auditRef, TopLevelDomain detail)", "full_signature": "public Domain postTopLevelDomain(ResourceContext ctx, String auditRef, TopLevelDomain detail)", "class_method_signature": "ZMSImpl.postTopLevelDomain(ResourceContext ctx, String auditRef, TopLevelDomain detail)", "testcase": false, "constructor": false}, {"identifier": "deleteTopLevelDomain", "parameters": "(ResourceContext ctx, String domainName, String auditRef)", "modifiers": "public", "return": "void", "signature": "void deleteTopLevelDomain(ResourceContext ctx, String domainName, String auditRef)", "full_signature": "public void deleteTopLevelDomain(ResourceContext ctx, String domainName, String auditRef)", "class_method_signature": "ZMSImpl.deleteTopLevelDomain(ResourceContext ctx, String domainName, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "deleteDomain", "parameters": "(ResourceContext ctx, String auditRef, String domainName, String caller)", "modifiers": "", "return": "void", "signature": "void deleteDomain(ResourceContext ctx, String auditRef, String domainName, String caller)", "full_signature": " void deleteDomain(ResourceContext ctx, String auditRef, String domainName, String caller)", "class_method_signature": "ZMSImpl.deleteDomain(ResourceContext ctx, String auditRef, String domainName, String caller)", "testcase": false, "constructor": false}, {"identifier": "isVirtualDomain", "parameters": "(String domain)", "modifiers": "", "return": "boolean", "signature": "boolean isVirtualDomain(String domain)", "full_signature": " boolean isVirtualDomain(String domain)", "class_method_signature": "ZMSImpl.isVirtualDomain(String domain)", "testcase": false, "constructor": false}, {"identifier": "hasExceededVirtualSubDomainLimit", "parameters": "(String domain)", "modifiers": "", "return": "boolean", "signature": "boolean hasExceededVirtualSubDomainLimit(String domain)", "full_signature": " boolean hasExceededVirtualSubDomainLimit(String domain)", "class_method_signature": "ZMSImpl.hasExceededVirtualSubDomainLimit(String domain)", "testcase": false, "constructor": false}, {"identifier": "postUserDomain", "parameters": "(ResourceContext ctx, String name, String auditRef, UserDomain detail)", "modifiers": "public", "return": "Domain", "signature": "Domain postUserDomain(ResourceContext ctx, String name, String auditRef, UserDomain detail)", "full_signature": "public Domain postUserDomain(ResourceContext ctx, String name, String auditRef, UserDomain detail)", "class_method_signature": "ZMSImpl.postUserDomain(ResourceContext ctx, String name, String auditRef, UserDomain detail)", "testcase": false, "constructor": false}, {"identifier": "postSubDomain", "parameters": "(ResourceContext ctx, String parent, String auditRef, SubDomain detail)", "modifiers": "public", "return": "Domain", "signature": "Domain postSubDomain(ResourceContext ctx, String parent, String auditRef, SubDomain detail)", "full_signature": "public Domain postSubDomain(ResourceContext ctx, String parent, String auditRef, SubDomain detail)", "class_method_signature": "ZMSImpl.postSubDomain(ResourceContext ctx, String parent, String auditRef, SubDomain detail)", "testcase": false, "constructor": false}, {"identifier": "isSysAdminUser", "parameters": "(Principal principal)", "modifiers": "", "return": "boolean", "signature": "boolean isSysAdminUser(Principal principal)", "full_signature": " boolean isSysAdminUser(Principal principal)", "class_method_signature": "ZMSImpl.isSysAdminUser(Principal principal)", "testcase": false, "constructor": false}, {"identifier": "isAllowedResourceLookForAllUsers", "parameters": "(Principal principal)", "modifiers": "", "return": "boolean", "signature": "boolean isAllowedResourceLookForAllUsers(Principal principal)", "full_signature": " boolean isAllowedResourceLookForAllUsers(Principal principal)", "class_method_signature": "ZMSImpl.isAllowedResourceLookForAllUsers(Principal principal)", "testcase": false, "constructor": false}, {"identifier": "deleteSubDomain", "parameters": "(ResourceContext ctx, String parent, String name, String auditRef)", "modifiers": "public", "return": "void", "signature": "void deleteSubDomain(ResourceContext ctx, String parent, String name, String auditRef)", "full_signature": "public void deleteSubDomain(ResourceContext ctx, String parent, String name, String auditRef)", "class_method_signature": "ZMSImpl.deleteSubDomain(ResourceContext ctx, String parent, String name, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "deleteUserDomain", "parameters": "(ResourceContext ctx, String name, String auditRef)", "modifiers": "public", "return": "void", "signature": "void deleteUserDomain(ResourceContext ctx, String name, String auditRef)", "full_signature": "public void deleteUserDomain(ResourceContext ctx, String name, String auditRef)", "class_method_signature": "ZMSImpl.deleteUserDomain(ResourceContext ctx, String name, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "getUserList", "parameters": "(ResourceContext ctx)", "modifiers": "public", "return": "UserList", "signature": "UserList getUserList(ResourceContext ctx)", "full_signature": "public UserList getUserList(ResourceContext ctx)", "class_method_signature": "ZMSImpl.getUserList(ResourceContext ctx)", "testcase": false, "constructor": false}, {"identifier": "deleteDomainRoleMember", "parameters": "(ResourceContext ctx, String domainName, String memberName, String auditRef)", "modifiers": "@Override public", "return": "void", "signature": "void deleteDomainRoleMember(ResourceContext ctx, String domainName, String memberName, String auditRef)", "full_signature": "@Override public void deleteDomainRoleMember(ResourceContext ctx, String domainName, String memberName, String auditRef)", "class_method_signature": "ZMSImpl.deleteDomainRoleMember(ResourceContext ctx, String domainName, String memberName, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "deleteUser", "parameters": "(ResourceContext ctx, String name, String auditRef)", "modifiers": "@Override public", "return": "void", "signature": "void deleteUser(ResourceContext ctx, String name, String auditRef)", "full_signature": "@Override public void deleteUser(ResourceContext ctx, String name, String auditRef)", "class_method_signature": "ZMSImpl.deleteUser(ResourceContext ctx, String name, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "getUserDomainName", "parameters": "(String userName)", "modifiers": "", "return": "String", "signature": "String getUserDomainName(String userName)", "full_signature": " String getUserDomainName(String userName)", "class_method_signature": "ZMSImpl.getUserDomainName(String userName)", "testcase": false, "constructor": false}, {"identifier": "putDomainMeta", "parameters": "(ResourceContext ctx, String domainName, String auditRef,\n            DomainMeta meta)", "modifiers": "@Override public", "return": "void", "signature": "void putDomainMeta(ResourceContext ctx, String domainName, String auditRef,\n            DomainMeta meta)", "full_signature": "@Override public void putDomainMeta(ResourceContext ctx, String domainName, String auditRef,\n            DomainMeta meta)", "class_method_signature": "ZMSImpl.putDomainMeta(ResourceContext ctx, String domainName, String auditRef,\n            DomainMeta meta)", "testcase": false, "constructor": false}, {"identifier": "validateString", "parameters": "(final String value, final String type, final String caller)", "modifiers": "", "return": "void", "signature": "void validateString(final String value, final String type, final String caller)", "full_signature": " void validateString(final String value, final String type, final String caller)", "class_method_signature": "ZMSImpl.validateString(final String value, final String type, final String caller)", "testcase": false, "constructor": false}, {"identifier": "validateIntegerValue", "parameters": "(final Integer value, final String fieldName)", "modifiers": "", "return": "void", "signature": "void validateIntegerValue(final Integer value, final String fieldName)", "full_signature": " void validateIntegerValue(final Integer value, final String fieldName)", "class_method_signature": "ZMSImpl.validateIntegerValue(final Integer value, final String fieldName)", "testcase": false, "constructor": false}, {"identifier": "validateDomainValues", "parameters": "(Domain domain)", "modifiers": "", "return": "void", "signature": "void validateDomainValues(Domain domain)", "full_signature": " void validateDomainValues(Domain domain)", "class_method_signature": "ZMSImpl.validateDomainValues(Domain domain)", "testcase": false, "constructor": false}, {"identifier": "validateDomainMetaValues", "parameters": "(DomainMeta meta)", "modifiers": "", "return": "void", "signature": "void validateDomainMetaValues(DomainMeta meta)", "full_signature": " void validateDomainMetaValues(DomainMeta meta)", "class_method_signature": "ZMSImpl.validateDomainMetaValues(DomainMeta meta)", "testcase": false, "constructor": false}, {"identifier": "validateRoleMetaValues", "parameters": "(RoleMeta meta)", "modifiers": "", "return": "void", "signature": "void validateRoleMetaValues(RoleMeta meta)", "full_signature": " void validateRoleMetaValues(RoleMeta meta)", "class_method_signature": "ZMSImpl.validateRoleMetaValues(RoleMeta meta)", "testcase": false, "constructor": false}, {"identifier": "validateRoleValues", "parameters": "(Role role)", "modifiers": "", "return": "void", "signature": "void validateRoleValues(Role role)", "full_signature": " void validateRoleValues(Role role)", "class_method_signature": "ZMSImpl.validateRoleValues(Role role)", "testcase": false, "constructor": false}, {"identifier": "validateGroupValues", "parameters": "(Group group)", "modifiers": "", "return": "void", "signature": "void validateGroupValues(Group group)", "full_signature": " void validateGroupValues(Group group)", "class_method_signature": "ZMSImpl.validateGroupValues(Group group)", "testcase": false, "constructor": false}, {"identifier": "validateGroupMetaValues", "parameters": "(GroupMeta meta)", "modifiers": "", "return": "void", "signature": "void validateGroupMetaValues(GroupMeta meta)", "full_signature": " void validateGroupMetaValues(GroupMeta meta)", "class_method_signature": "ZMSImpl.validateGroupMetaValues(GroupMeta meta)", "testcase": false, "constructor": false}, {"identifier": "putDomainSystemMeta", "parameters": "(ResourceContext ctx, String domainName, String attribute,\n            String auditRef, DomainMeta meta)", "modifiers": "@Override public", "return": "void", "signature": "void putDomainSystemMeta(ResourceContext ctx, String domainName, String attribute,\n            String auditRef, DomainMeta meta)", "full_signature": "@Override public void putDomainSystemMeta(ResourceContext ctx, String domainName, String attribute,\n            String auditRef, DomainMeta meta)", "class_method_signature": "ZMSImpl.putDomainSystemMeta(ResourceContext ctx, String domainName, String attribute,\n            String auditRef, DomainMeta meta)", "testcase": false, "constructor": false}, {"identifier": "validateSolutionTemplates", "parameters": "(List<String> templateNames, String caller)", "modifiers": "", "return": "void", "signature": "void validateSolutionTemplates(List<String> templateNames, String caller)", "full_signature": " void validateSolutionTemplates(List<String> templateNames, String caller)", "class_method_signature": "ZMSImpl.validateSolutionTemplates(List<String> templateNames, String caller)", "testcase": false, "constructor": false}, {"identifier": "getDomainTemplateList", "parameters": "(ResourceContext ctx, String domainName)", "modifiers": "public", "return": "DomainTemplateList", "signature": "DomainTemplateList getDomainTemplateList(ResourceContext ctx, String domainName)", "full_signature": "public DomainTemplateList getDomainTemplateList(ResourceContext ctx, String domainName)", "class_method_signature": "ZMSImpl.getDomainTemplateList(ResourceContext ctx, String domainName)", "testcase": false, "constructor": false}, {"identifier": "putDomainTemplate", "parameters": "(ResourceContext ctx, String domainName, String auditRef,\n            DomainTemplate domainTemplate)", "modifiers": "@Override public", "return": "void", "signature": "void putDomainTemplate(ResourceContext ctx, String domainName, String auditRef,\n            DomainTemplate domainTemplate)", "full_signature": "@Override public void putDomainTemplate(ResourceContext ctx, String domainName, String auditRef,\n            DomainTemplate domainTemplate)", "class_method_signature": "ZMSImpl.putDomainTemplate(ResourceContext ctx, String domainName, String auditRef,\n            DomainTemplate domainTemplate)", "testcase": false, "constructor": false}, {"identifier": "putDomainTemplateExt", "parameters": "(ResourceContext ctx, String domainName,\n            String templateName, String auditRef, DomainTemplate domainTemplate)", "modifiers": "@Override public", "return": "void", "signature": "void putDomainTemplateExt(ResourceContext ctx, String domainName,\n            String templateName, String auditRef, DomainTemplate domainTemplate)", "full_signature": "@Override public void putDomainTemplateExt(ResourceContext ctx, String domainName,\n            String templateName, String auditRef, DomainTemplate domainTemplate)", "class_method_signature": "ZMSImpl.putDomainTemplateExt(ResourceContext ctx, String domainName,\n            String templateName, String auditRef, DomainTemplate domainTemplate)", "testcase": false, "constructor": false}, {"identifier": "deleteDomainTemplate", "parameters": "(ResourceContext ctx, String domainName, String templateName, String auditRef)", "modifiers": "public", "return": "void", "signature": "void deleteDomainTemplate(ResourceContext ctx, String domainName, String templateName, String auditRef)", "full_signature": "public void deleteDomainTemplate(ResourceContext ctx, String domainName, String templateName, String auditRef)", "class_method_signature": "ZMSImpl.deleteDomainTemplate(ResourceContext ctx, String domainName, String templateName, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "createPrincipalForName", "parameters": "(String principalName)", "modifiers": "", "return": "Principal", "signature": "Principal createPrincipalForName(String principalName)", "full_signature": " Principal createPrincipalForName(String principalName)", "class_method_signature": "ZMSImpl.createPrincipalForName(String principalName)", "testcase": false, "constructor": false}, {"identifier": "validateRoleBasedAccessCheck", "parameters": "(List<String> roles, final String trustDomain, final String domainName,\n                                         final String principalName)", "modifiers": "", "return": "boolean", "signature": "boolean validateRoleBasedAccessCheck(List<String> roles, final String trustDomain, final String domainName,\n                                         final String principalName)", "full_signature": " boolean validateRoleBasedAccessCheck(List<String> roles, final String trustDomain, final String domainName,\n                                         final String principalName)", "class_method_signature": "ZMSImpl.validateRoleBasedAccessCheck(List<String> roles, final String trustDomain, final String domainName,\n                                         final String principalName)", "testcase": false, "constructor": false}, {"identifier": "getAthenzDomain", "parameters": "(String domainName, boolean ignoreExceptions)", "modifiers": "", "return": "AthenzDomain", "signature": "AthenzDomain getAthenzDomain(String domainName, boolean ignoreExceptions)", "full_signature": " AthenzDomain getAthenzDomain(String domainName, boolean ignoreExceptions)", "class_method_signature": "ZMSImpl.getAthenzDomain(String domainName, boolean ignoreExceptions)", "testcase": false, "constructor": false}, {"identifier": "getAthenzDomain", "parameters": "(String domainName, boolean ignoreExceptions, boolean masterCopy)", "modifiers": "", "return": "AthenzDomain", "signature": "AthenzDomain getAthenzDomain(String domainName, boolean ignoreExceptions, boolean masterCopy)", "full_signature": " AthenzDomain getAthenzDomain(String domainName, boolean ignoreExceptions, boolean masterCopy)", "class_method_signature": "ZMSImpl.getAthenzDomain(String domainName, boolean ignoreExceptions, boolean masterCopy)", "testcase": false, "constructor": false}, {"identifier": "retrieveAccessDomain", "parameters": "(String domainName, Principal principal)", "modifiers": "", "return": "AthenzDomain", "signature": "AthenzDomain retrieveAccessDomain(String domainName, Principal principal)", "full_signature": " AthenzDomain retrieveAccessDomain(String domainName, Principal principal)", "class_method_signature": "ZMSImpl.retrieveAccessDomain(String domainName, Principal principal)", "testcase": false, "constructor": false}, {"identifier": "evaluateAccess", "parameters": "(AthenzDomain domain, String identity, String action, String resource,\n            List<String> authenticatedRoles, String trustDomain, Principal principal)", "modifiers": "", "return": "AccessStatus", "signature": "AccessStatus evaluateAccess(AthenzDomain domain, String identity, String action, String resource,\n            List<String> authenticatedRoles, String trustDomain, Principal principal)", "full_signature": " AccessStatus evaluateAccess(AthenzDomain domain, String identity, String action, String resource,\n            List<String> authenticatedRoles, String trustDomain, Principal principal)", "class_method_signature": "ZMSImpl.evaluateAccess(AthenzDomain domain, String identity, String action, String resource,\n            List<String> authenticatedRoles, String trustDomain, Principal principal)", "testcase": false, "constructor": false}, {"identifier": "userHomeDomainResource", "parameters": "(String resource)", "modifiers": "", "return": "String", "signature": "String userHomeDomainResource(String resource)", "full_signature": " String userHomeDomainResource(String resource)", "class_method_signature": "ZMSImpl.userHomeDomainResource(String resource)", "testcase": false, "constructor": false}, {"identifier": "access", "parameters": "(String action, String resource, Principal principal, String trustDomain)", "modifiers": "public", "return": "boolean", "signature": "boolean access(String action, String resource, Principal principal, String trustDomain)", "full_signature": "public boolean access(String action, String resource, Principal principal, String trustDomain)", "class_method_signature": "ZMSImpl.access(String action, String resource, Principal principal, String trustDomain)", "testcase": false, "constructor": false}, {"identifier": "hasAccess", "parameters": "(AthenzDomain domain, String action, String resource,\n            Principal principal, String trustDomain)", "modifiers": "", "return": "AccessStatus", "signature": "AccessStatus hasAccess(AthenzDomain domain, String action, String resource,\n            Principal principal, String trustDomain)", "full_signature": " AccessStatus hasAccess(AthenzDomain domain, String action, String resource,\n            Principal principal, String trustDomain)", "class_method_signature": "ZMSImpl.hasAccess(AthenzDomain domain, String action, String resource,\n            Principal principal, String trustDomain)", "testcase": false, "constructor": false}, {"identifier": "getAccessExt", "parameters": "(ResourceContext ctx, String action, String resource,\n            String trustDomain, String checkPrincipal)", "modifiers": "public", "return": "Access", "signature": "Access getAccessExt(ResourceContext ctx, String action, String resource,\n            String trustDomain, String checkPrincipal)", "full_signature": "public Access getAccessExt(ResourceContext ctx, String action, String resource,\n            String trustDomain, String checkPrincipal)", "class_method_signature": "ZMSImpl.getAccessExt(ResourceContext ctx, String action, String resource,\n            String trustDomain, String checkPrincipal)", "testcase": false, "constructor": false}, {"identifier": "getAccess", "parameters": "(ResourceContext ctx, String action, String resource,\n            String trustDomain, String checkPrincipal)", "modifiers": "public", "return": "Access", "signature": "Access getAccess(ResourceContext ctx, String action, String resource,\n            String trustDomain, String checkPrincipal)", "full_signature": "public Access getAccess(ResourceContext ctx, String action, String resource,\n            String trustDomain, String checkPrincipal)", "class_method_signature": "ZMSImpl.getAccess(ResourceContext ctx, String action, String resource,\n            String trustDomain, String checkPrincipal)", "testcase": false, "constructor": false}, {"identifier": "getAccessCheck", "parameters": "(Principal principal, String action, String resource,\n            String trustDomain, String checkPrincipal, ResourceContext ctx)", "modifiers": "", "return": "Access", "signature": "Access getAccessCheck(Principal principal, String action, String resource,\n            String trustDomain, String checkPrincipal, ResourceContext ctx)", "full_signature": " Access getAccessCheck(Principal principal, String action, String resource,\n            String trustDomain, String checkPrincipal, ResourceContext ctx)", "class_method_signature": "ZMSImpl.getAccessCheck(Principal principal, String action, String resource,\n            String trustDomain, String checkPrincipal, ResourceContext ctx)", "testcase": false, "constructor": false}, {"identifier": "validateEntity", "parameters": "(String entityName, Entity entity)", "modifiers": "", "return": "void", "signature": "void validateEntity(String entityName, Entity entity)", "full_signature": " void validateEntity(String entityName, Entity entity)", "class_method_signature": "ZMSImpl.validateEntity(String entityName, Entity entity)", "testcase": false, "constructor": false}, {"identifier": "putEntity", "parameters": "(ResourceContext ctx, String domainName, String entityName, String auditRef, Entity resource)", "modifiers": "@Override public", "return": "void", "signature": "void putEntity(ResourceContext ctx, String domainName, String entityName, String auditRef, Entity resource)", "full_signature": "@Override public void putEntity(ResourceContext ctx, String domainName, String entityName, String auditRef, Entity resource)", "class_method_signature": "ZMSImpl.putEntity(ResourceContext ctx, String domainName, String entityName, String auditRef, Entity resource)", "testcase": false, "constructor": false}, {"identifier": "getEntityList", "parameters": "(ResourceContext ctx, String domainName)", "modifiers": "@Override public", "return": "EntityList", "signature": "EntityList getEntityList(ResourceContext ctx, String domainName)", "full_signature": "@Override public EntityList getEntityList(ResourceContext ctx, String domainName)", "class_method_signature": "ZMSImpl.getEntityList(ResourceContext ctx, String domainName)", "testcase": false, "constructor": false}, {"identifier": "getEntity", "parameters": "(ResourceContext ctx, String domainName, String entityName)", "modifiers": "public", "return": "Entity", "signature": "Entity getEntity(ResourceContext ctx, String domainName, String entityName)", "full_signature": "public Entity getEntity(ResourceContext ctx, String domainName, String entityName)", "class_method_signature": "ZMSImpl.getEntity(ResourceContext ctx, String domainName, String entityName)", "testcase": false, "constructor": false}, {"identifier": "deleteEntity", "parameters": "(ResourceContext ctx, String domainName, String entityName, String auditRef)", "modifiers": "public", "return": "void", "signature": "void deleteEntity(ResourceContext ctx, String domainName, String entityName, String auditRef)", "full_signature": "public void deleteEntity(ResourceContext ctx, String domainName, String entityName, String auditRef)", "class_method_signature": "ZMSImpl.deleteEntity(ResourceContext ctx, String domainName, String entityName, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "getServerTemplateList", "parameters": "(ResourceContext ctx)", "modifiers": "public", "return": "ServerTemplateList", "signature": "ServerTemplateList getServerTemplateList(ResourceContext ctx)", "full_signature": "public ServerTemplateList getServerTemplateList(ResourceContext ctx)", "class_method_signature": "ZMSImpl.getServerTemplateList(ResourceContext ctx)", "testcase": false, "constructor": false}, {"identifier": "getTemplate", "parameters": "(ResourceContext ctx, String templateName)", "modifiers": "public", "return": "Template", "signature": "Template getTemplate(ResourceContext ctx, String templateName)", "full_signature": "public Template getTemplate(ResourceContext ctx, String templateName)", "class_method_signature": "ZMSImpl.getTemplate(ResourceContext ctx, String templateName)", "testcase": false, "constructor": false}, {"identifier": "getDomainTemplateDetailsList", "parameters": "(ResourceContext ctx, String domainName)", "modifiers": "@Override public", "return": "DomainTemplateDetailsList", "signature": "DomainTemplateDetailsList getDomainTemplateDetailsList(ResourceContext ctx, String domainName)", "full_signature": "@Override public DomainTemplateDetailsList getDomainTemplateDetailsList(ResourceContext ctx, String domainName)", "class_method_signature": "ZMSImpl.getDomainTemplateDetailsList(ResourceContext ctx, String domainName)", "testcase": false, "constructor": false}, {"identifier": "getRoleList", "parameters": "(ResourceContext ctx, String domainName, Integer limit, String skip)", "modifiers": "public", "return": "RoleList", "signature": "RoleList getRoleList(ResourceContext ctx, String domainName, Integer limit, String skip)", "full_signature": "public RoleList getRoleList(ResourceContext ctx, String domainName, Integer limit, String skip)", "class_method_signature": "ZMSImpl.getRoleList(ResourceContext ctx, String domainName, Integer limit, String skip)", "testcase": false, "constructor": false}, {"identifier": "setupRoleList", "parameters": "(AthenzDomain domain, Boolean members)", "modifiers": "", "return": "List<Role>", "signature": "List<Role> setupRoleList(AthenzDomain domain, Boolean members)", "full_signature": " List<Role> setupRoleList(AthenzDomain domain, Boolean members)", "class_method_signature": "ZMSImpl.setupRoleList(AthenzDomain domain, Boolean members)", "testcase": false, "constructor": false}, {"identifier": "getRoles", "parameters": "(ResourceContext ctx, String domainName, Boolean members)", "modifiers": "public", "return": "Roles", "signature": "Roles getRoles(ResourceContext ctx, String domainName, Boolean members)", "full_signature": "public Roles getRoles(ResourceContext ctx, String domainName, Boolean members)", "class_method_signature": "ZMSImpl.getRoles(ResourceContext ctx, String domainName, Boolean members)", "testcase": false, "constructor": false}, {"identifier": "getDomainRoleMembers", "parameters": "(ResourceContext ctx, String domainName)", "modifiers": "@Override public", "return": "DomainRoleMembers", "signature": "DomainRoleMembers getDomainRoleMembers(ResourceContext ctx, String domainName)", "full_signature": "@Override public DomainRoleMembers getDomainRoleMembers(ResourceContext ctx, String domainName)", "class_method_signature": "ZMSImpl.getDomainRoleMembers(ResourceContext ctx, String domainName)", "testcase": false, "constructor": false}, {"identifier": "getPrincipalRoles", "parameters": "(ResourceContext context, String principal, String domainName)", "modifiers": "@Override public", "return": "DomainRoleMember", "signature": "DomainRoleMember getPrincipalRoles(ResourceContext context, String principal, String domainName)", "full_signature": "@Override public DomainRoleMember getPrincipalRoles(ResourceContext context, String principal, String domainName)", "class_method_signature": "ZMSImpl.getPrincipalRoles(ResourceContext context, String principal, String domainName)", "testcase": false, "constructor": false}, {"identifier": "getRole", "parameters": "(ResourceContext ctx, String domainName, String roleName,\n            Boolean auditLog, Boolean expand, Boolean pending)", "modifiers": "@Override public", "return": "Role", "signature": "Role getRole(ResourceContext ctx, String domainName, String roleName,\n            Boolean auditLog, Boolean expand, Boolean pending)", "full_signature": "@Override public Role getRole(ResourceContext ctx, String domainName, String roleName,\n            Boolean auditLog, Boolean expand, Boolean pending)", "class_method_signature": "ZMSImpl.getRole(ResourceContext ctx, String domainName, String roleName,\n            Boolean auditLog, Boolean expand, Boolean pending)", "testcase": false, "constructor": false}, {"identifier": "normalizedAdminUsers", "parameters": "(List<String> admins, final String domainUserAuthorityFilter, final String caller)", "modifiers": "", "return": "List<String>", "signature": "List<String> normalizedAdminUsers(List<String> admins, final String domainUserAuthorityFilter, final String caller)", "full_signature": " List<String> normalizedAdminUsers(List<String> admins, final String domainUserAuthorityFilter, final String caller)", "class_method_signature": "ZMSImpl.normalizedAdminUsers(List<String> admins, final String domainUserAuthorityFilter, final String caller)", "testcase": false, "constructor": false}, {"identifier": "principalType", "parameters": "(final String principalName)", "modifiers": "", "return": "int", "signature": "int principalType(final String principalName)", "full_signature": " int principalType(final String principalName)", "class_method_signature": "ZMSImpl.principalType(final String principalName)", "testcase": false, "constructor": false}, {"identifier": "normalizeDomainAliasUser", "parameters": "(String user)", "modifiers": "", "return": "String", "signature": "String normalizeDomainAliasUser(String user)", "full_signature": " String normalizeDomainAliasUser(String user)", "class_method_signature": "ZMSImpl.normalizeDomainAliasUser(String user)", "testcase": false, "constructor": false}, {"identifier": "addNormalizedRoleMember", "parameters": "(Map<String, RoleMember> normalizedMembers,\n            RoleMember member)", "modifiers": "private", "return": "boolean", "signature": "boolean addNormalizedRoleMember(Map<String, RoleMember> normalizedMembers,\n            RoleMember member)", "full_signature": "private boolean addNormalizedRoleMember(Map<String, RoleMember> normalizedMembers,\n            RoleMember member)", "class_method_signature": "ZMSImpl.addNormalizedRoleMember(Map<String, RoleMember> normalizedMembers,\n            RoleMember member)", "testcase": false, "constructor": false}, {"identifier": "normalizeRoleMembers", "parameters": "(Role role)", "modifiers": "", "return": "void", "signature": "void normalizeRoleMembers(Role role)", "full_signature": " void normalizeRoleMembers(Role role)", "class_method_signature": "ZMSImpl.normalizeRoleMembers(Role role)", "testcase": false, "constructor": false}, {"identifier": "isConsistentRoleName", "parameters": "(final String domainName, final String roleName, Role role)", "modifiers": "", "return": "boolean", "signature": "boolean isConsistentRoleName(final String domainName, final String roleName, Role role)", "full_signature": " boolean isConsistentRoleName(final String domainName, final String roleName, Role role)", "class_method_signature": "ZMSImpl.isConsistentRoleName(final String domainName, final String roleName, Role role)", "testcase": false, "constructor": false}, {"identifier": "putRole", "parameters": "(ResourceContext ctx, String domainName, String roleName, String auditRef, Role role)", "modifiers": "@Override public", "return": "void", "signature": "void putRole(ResourceContext ctx, String domainName, String roleName, String auditRef, Role role)", "full_signature": "@Override public void putRole(ResourceContext ctx, String domainName, String roleName, String auditRef, Role role)", "class_method_signature": "ZMSImpl.putRole(ResourceContext ctx, String domainName, String roleName, String auditRef, Role role)", "testcase": false, "constructor": false}, {"identifier": "validateRoleStructure", "parameters": "(final Role role, final String domainName, final String caller)", "modifiers": "", "return": "void", "signature": "void validateRoleStructure(final Role role, final String domainName, final String caller)", "full_signature": " void validateRoleStructure(final Role role, final String domainName, final String caller)", "class_method_signature": "ZMSImpl.validateRoleStructure(final Role role, final String domainName, final String caller)", "testcase": false, "constructor": false}, {"identifier": "validateRoleMemberPrincipals", "parameters": "(final Role role, final String domainUserAuthorityFilter, boolean disallowGroups,\n                                      final String caller)", "modifiers": "", "return": "void", "signature": "void validateRoleMemberPrincipals(final Role role, final String domainUserAuthorityFilter, boolean disallowGroups,\n                                      final String caller)", "full_signature": " void validateRoleMemberPrincipals(final Role role, final String domainUserAuthorityFilter, boolean disallowGroups,\n                                      final String caller)", "class_method_signature": "ZMSImpl.validateRoleMemberPrincipals(final Role role, final String domainUserAuthorityFilter, boolean disallowGroups,\n                                      final String caller)", "testcase": false, "constructor": false}, {"identifier": "updateRoleMemberUserAuthorityExpiry", "parameters": "(final Role role, final String caller)", "modifiers": "", "return": "void", "signature": "void updateRoleMemberUserAuthorityExpiry(final Role role, final String caller)", "full_signature": " void updateRoleMemberUserAuthorityExpiry(final Role role, final String caller)", "class_method_signature": "ZMSImpl.updateRoleMemberUserAuthorityExpiry(final Role role, final String caller)", "testcase": false, "constructor": false}, {"identifier": "validateUserPrincipal", "parameters": "(final String memberName, boolean validateUserMember, final String userAuthorityFilter,\n                               final String caller)", "modifiers": "", "return": "void", "signature": "void validateUserPrincipal(final String memberName, boolean validateUserMember, final String userAuthorityFilter,\n                               final String caller)", "full_signature": " void validateUserPrincipal(final String memberName, boolean validateUserMember, final String userAuthorityFilter,\n                               final String caller)", "class_method_signature": "ZMSImpl.validateUserPrincipal(final String memberName, boolean validateUserMember, final String userAuthorityFilter,\n                               final String caller)", "testcase": false, "constructor": false}, {"identifier": "validateServicePrincipal", "parameters": "(final String memberName, final String caller)", "modifiers": "", "return": "void", "signature": "void validateServicePrincipal(final String memberName, final String caller)", "full_signature": " void validateServicePrincipal(final String memberName, final String caller)", "class_method_signature": "ZMSImpl.validateServicePrincipal(final String memberName, final String caller)", "testcase": false, "constructor": false}, {"identifier": "validateGroupPrincipal", "parameters": "(final String memberName, final String userAuthorityFilter,\n                                final String userAuthorityExpiration, Boolean auditEnabled, final String caller)", "modifiers": "", "return": "void", "signature": "void validateGroupPrincipal(final String memberName, final String userAuthorityFilter,\n                                final String userAuthorityExpiration, Boolean auditEnabled, final String caller)", "full_signature": " void validateGroupPrincipal(final String memberName, final String userAuthorityFilter,\n                                final String userAuthorityExpiration, Boolean auditEnabled, final String caller)", "class_method_signature": "ZMSImpl.validateGroupPrincipal(final String memberName, final String userAuthorityFilter,\n                                final String userAuthorityExpiration, Boolean auditEnabled, final String caller)", "testcase": false, "constructor": false}, {"identifier": "validateRoleMemberPrincipal", "parameters": "(final String memberName, int principalType, final String userAuthorityFilter,\n                                     final String userAuthorityExpiration, Boolean roleAuditEnabled,\n                                     boolean disallowGroups, final String caller)", "modifiers": "", "return": "void", "signature": "void validateRoleMemberPrincipal(final String memberName, int principalType, final String userAuthorityFilter,\n                                     final String userAuthorityExpiration, Boolean roleAuditEnabled,\n                                     boolean disallowGroups, final String caller)", "full_signature": " void validateRoleMemberPrincipal(final String memberName, int principalType, final String userAuthorityFilter,\n                                     final String userAuthorityExpiration, Boolean roleAuditEnabled,\n                                     boolean disallowGroups, final String caller)", "class_method_signature": "ZMSImpl.validateRoleMemberPrincipal(final String memberName, int principalType, final String userAuthorityFilter,\n                                     final String userAuthorityExpiration, Boolean roleAuditEnabled,\n                                     boolean disallowGroups, final String caller)", "testcase": false, "constructor": false}, {"identifier": "validateGroupMemberPrincipal", "parameters": "(final String memberName, int principalType, final String userAuthorityFilter,\n                                      final String caller)", "modifiers": "", "return": "void", "signature": "void validateGroupMemberPrincipal(final String memberName, int principalType, final String userAuthorityFilter,\n                                      final String caller)", "full_signature": " void validateGroupMemberPrincipal(final String memberName, int principalType, final String userAuthorityFilter,\n                                      final String caller)", "class_method_signature": "ZMSImpl.validateGroupMemberPrincipal(final String memberName, int principalType, final String userAuthorityFilter,\n                                      final String caller)", "testcase": false, "constructor": false}, {"identifier": "deleteRole", "parameters": "(ResourceContext ctx, String domainName, String roleName, String auditRef)", "modifiers": "public", "return": "void", "signature": "void deleteRole(ResourceContext ctx, String domainName, String roleName, String auditRef)", "full_signature": "public void deleteRole(ResourceContext ctx, String domainName, String roleName, String auditRef)", "class_method_signature": "ZMSImpl.deleteRole(ResourceContext ctx, String domainName, String roleName, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "isMemberOfRole", "parameters": "(Role role, String member)", "modifiers": "", "return": "boolean", "signature": "boolean isMemberOfRole(Role role, String member)", "full_signature": " boolean isMemberOfRole(Role role, String member)", "class_method_signature": "ZMSImpl.isMemberOfRole(Role role, String member)", "testcase": false, "constructor": false}, {"identifier": "getMembership", "parameters": "(ResourceContext ctx, String domainName,\n            String roleName, String memberName, String expiration)", "modifiers": "@Override public", "return": "Membership", "signature": "Membership getMembership(ResourceContext ctx, String domainName,\n            String roleName, String memberName, String expiration)", "full_signature": "@Override public Membership getMembership(ResourceContext ctx, String domainName,\n            String roleName, String memberName, String expiration)", "class_method_signature": "ZMSImpl.getMembership(ResourceContext ctx, String domainName,\n            String roleName, String memberName, String expiration)", "testcase": false, "constructor": false}, {"identifier": "getOverdueReview", "parameters": "(ResourceContext ctx, String domainName)", "modifiers": "@Override public", "return": "DomainRoleMembers", "signature": "DomainRoleMembers getOverdueReview(ResourceContext ctx, String domainName)", "full_signature": "@Override public DomainRoleMembers getOverdueReview(ResourceContext ctx, String domainName)", "class_method_signature": "ZMSImpl.getOverdueReview(ResourceContext ctx, String domainName)", "testcase": false, "constructor": false}, {"identifier": "configuredDueDateMillis", "parameters": "(Integer domainDueDateDays, Integer roleDueDateDays)", "modifiers": "", "return": "long", "signature": "long configuredDueDateMillis(Integer domainDueDateDays, Integer roleDueDateDays)", "full_signature": " long configuredDueDateMillis(Integer domainDueDateDays, Integer roleDueDateDays)", "class_method_signature": "ZMSImpl.configuredDueDateMillis(Integer domainDueDateDays, Integer roleDueDateDays)", "testcase": false, "constructor": false}, {"identifier": "getMemberDueDate", "parameters": "(long cfgDueDateMillis, Timestamp memberDueDate)", "modifiers": "", "return": "Timestamp", "signature": "Timestamp getMemberDueDate(long cfgDueDateMillis, Timestamp memberDueDate)", "full_signature": " Timestamp getMemberDueDate(long cfgDueDateMillis, Timestamp memberDueDate)", "class_method_signature": "ZMSImpl.getMemberDueDate(long cfgDueDateMillis, Timestamp memberDueDate)", "testcase": false, "constructor": false}, {"identifier": "updateRoleMemberExpiration", "parameters": "(Integer domainUserMemberDueDateDays,\n                                    Integer roleUserMemberDueDateDays,\n                                    Integer domainServiceMemberDueDateDays,\n                                    Integer roleServiceMemberDueDateDays,\n                                    Integer domainGroupMemberDueDateDays,\n                                    Integer roleGroupMemberDueDateDays,\n                                    List<RoleMember> roleMembers)", "modifiers": "", "return": "void", "signature": "void updateRoleMemberExpiration(Integer domainUserMemberDueDateDays,\n                                    Integer roleUserMemberDueDateDays,\n                                    Integer domainServiceMemberDueDateDays,\n                                    Integer roleServiceMemberDueDateDays,\n                                    Integer domainGroupMemberDueDateDays,\n                                    Integer roleGroupMemberDueDateDays,\n                                    List<RoleMember> roleMembers)", "full_signature": " void updateRoleMemberExpiration(Integer domainUserMemberDueDateDays,\n                                    Integer roleUserMemberDueDateDays,\n                                    Integer domainServiceMemberDueDateDays,\n                                    Integer roleServiceMemberDueDateDays,\n                                    Integer domainGroupMemberDueDateDays,\n                                    Integer roleGroupMemberDueDateDays,\n                                    List<RoleMember> roleMembers)", "class_method_signature": "ZMSImpl.updateRoleMemberExpiration(Integer domainUserMemberDueDateDays,\n                                    Integer roleUserMemberDueDateDays,\n                                    Integer domainServiceMemberDueDateDays,\n                                    Integer roleServiceMemberDueDateDays,\n                                    Integer domainGroupMemberDueDateDays,\n                                    Integer roleGroupMemberDueDateDays,\n                                    List<RoleMember> roleMembers)", "testcase": false, "constructor": false}, {"identifier": "updateRoleMemberReviewReminder", "parameters": "(Integer roleUserMemberDueDateDays,\n                                        Integer roleServiceMemberDueDateDays,\n                                        List<RoleMember> roleMembers)", "modifiers": "", "return": "void", "signature": "void updateRoleMemberReviewReminder(Integer roleUserMemberDueDateDays,\n                                        Integer roleServiceMemberDueDateDays,\n                                        List<RoleMember> roleMembers)", "full_signature": " void updateRoleMemberReviewReminder(Integer roleUserMemberDueDateDays,\n                                        Integer roleServiceMemberDueDateDays,\n                                        List<RoleMember> roleMembers)", "class_method_signature": "ZMSImpl.updateRoleMemberReviewReminder(Integer roleUserMemberDueDateDays,\n                                        Integer roleServiceMemberDueDateDays,\n                                        List<RoleMember> roleMembers)", "testcase": false, "constructor": false}, {"identifier": "updateRoleMemberDueDate", "parameters": "(Integer domainUserMemberDueDateDays,\n                                 Integer roleUserMemberDueDateDays,\n                                 Integer domainServiceMemberDueDateDays,\n                                 Integer roleServiceMemberDueDateDays,\n                                 Integer domainGroupMemberDueDateDays,\n                                 Integer roleGroupMemberDueDateDays,\n                                 List<RoleMember> roleMembers,\n                                 Function<RoleMember, Timestamp> dueDateGetter,\n                                 BiConsumer<RoleMember, Timestamp> dueDateSetter)", "modifiers": "private", "return": "void", "signature": "void updateRoleMemberDueDate(Integer domainUserMemberDueDateDays,\n                                 Integer roleUserMemberDueDateDays,\n                                 Integer domainServiceMemberDueDateDays,\n                                 Integer roleServiceMemberDueDateDays,\n                                 Integer domainGroupMemberDueDateDays,\n                                 Integer roleGroupMemberDueDateDays,\n                                 List<RoleMember> roleMembers,\n                                 Function<RoleMember, Timestamp> dueDateGetter,\n                                 BiConsumer<RoleMember, Timestamp> dueDateSetter)", "full_signature": "private void updateRoleMemberDueDate(Integer domainUserMemberDueDateDays,\n                                 Integer roleUserMemberDueDateDays,\n                                 Integer domainServiceMemberDueDateDays,\n                                 Integer roleServiceMemberDueDateDays,\n                                 Integer domainGroupMemberDueDateDays,\n                                 Integer roleGroupMemberDueDateDays,\n                                 List<RoleMember> roleMembers,\n                                 Function<RoleMember, Timestamp> dueDateGetter,\n                                 BiConsumer<RoleMember, Timestamp> dueDateSetter)", "class_method_signature": "ZMSImpl.updateRoleMemberDueDate(Integer domainUserMemberDueDateDays,\n                                 Integer roleUserMemberDueDateDays,\n                                 Integer domainServiceMemberDueDateDays,\n                                 Integer roleServiceMemberDueDateDays,\n                                 Integer domainGroupMemberDueDateDays,\n                                 Integer roleGroupMemberDueDateDays,\n                                 List<RoleMember> roleMembers,\n                                 Function<RoleMember, Timestamp> dueDateGetter,\n                                 BiConsumer<RoleMember, Timestamp> dueDateSetter)", "testcase": false, "constructor": false}, {"identifier": "memberDueDateTimestamp", "parameters": "(Integer domainDueDateDays, Integer roleDueDateDays, Timestamp memberDueDate)", "modifiers": "", "return": "Timestamp", "signature": "Timestamp memberDueDateTimestamp(Integer domainDueDateDays, Integer roleDueDateDays, Timestamp memberDueDate)", "full_signature": " Timestamp memberDueDateTimestamp(Integer domainDueDateDays, Integer roleDueDateDays, Timestamp memberDueDate)", "class_method_signature": "ZMSImpl.memberDueDateTimestamp(Integer domainDueDateDays, Integer roleDueDateDays, Timestamp memberDueDate)", "testcase": false, "constructor": false}, {"identifier": "putMembership", "parameters": "(ResourceContext ctx, String domainName, String roleName,\n            String memberName, String auditRef, Membership membership)", "modifiers": "@Override public", "return": "void", "signature": "void putMembership(ResourceContext ctx, String domainName, String roleName,\n            String memberName, String auditRef, Membership membership)", "full_signature": "@Override public void putMembership(ResourceContext ctx, String domainName, String roleName,\n            String memberName, String auditRef, Membership membership)", "class_method_signature": "ZMSImpl.putMembership(ResourceContext ctx, String domainName, String roleName,\n            String memberName, String auditRef, Membership membership)", "testcase": false, "constructor": false}, {"identifier": "enforcedUserAuthorityFilter", "parameters": "(final String roleUserAuthorityFilter, final String domainUserAuthorityFilter)", "modifiers": "", "return": "String", "signature": "String enforcedUserAuthorityFilter(final String roleUserAuthorityFilter, final String domainUserAuthorityFilter)", "full_signature": " String enforcedUserAuthorityFilter(final String roleUserAuthorityFilter, final String domainUserAuthorityFilter)", "class_method_signature": "ZMSImpl.enforcedUserAuthorityFilter(final String roleUserAuthorityFilter, final String domainUserAuthorityFilter)", "testcase": false, "constructor": false}, {"identifier": "getUserAuthorityExpiryAttr", "parameters": "(final String userAuthorityExpiry)", "modifiers": "", "return": "String", "signature": "String getUserAuthorityExpiryAttr(final String userAuthorityExpiry)", "full_signature": " String getUserAuthorityExpiryAttr(final String userAuthorityExpiry)", "class_method_signature": "ZMSImpl.getUserAuthorityExpiryAttr(final String userAuthorityExpiry)", "testcase": false, "constructor": false}, {"identifier": "getUserAuthorityExpiry", "parameters": "(final String userName, final String expiryAttrValue, final String caller)", "modifiers": "", "return": "Timestamp", "signature": "Timestamp getUserAuthorityExpiry(final String userName, final String expiryAttrValue, final String caller)", "full_signature": " Timestamp getUserAuthorityExpiry(final String userName, final String expiryAttrValue, final String caller)", "class_method_signature": "ZMSImpl.getUserAuthorityExpiry(final String userName, final String expiryAttrValue, final String caller)", "testcase": false, "constructor": false}, {"identifier": "setRoleMemberExpiration", "parameters": "(final AthenzDomain domain, final Role role, final RoleMember roleMember,\n            final Membership membership, final String caller)", "modifiers": "", "return": "void", "signature": "void setRoleMemberExpiration(final AthenzDomain domain, final Role role, final RoleMember roleMember,\n            final Membership membership, final String caller)", "full_signature": " void setRoleMemberExpiration(final AthenzDomain domain, final Role role, final RoleMember roleMember,\n            final Membership membership, final String caller)", "class_method_signature": "ZMSImpl.setRoleMemberExpiration(final AthenzDomain domain, final Role role, final RoleMember roleMember,\n            final Membership membership, final String caller)", "testcase": false, "constructor": false}, {"identifier": "setRoleMemberReview", "parameters": "(final Role role, final RoleMember roleMember,\n                                 final Membership membership)", "modifiers": "", "return": "void", "signature": "void setRoleMemberReview(final Role role, final RoleMember roleMember,\n                                 final Membership membership)", "full_signature": " void setRoleMemberReview(final Role role, final RoleMember roleMember,\n                                 final Membership membership)", "class_method_signature": "ZMSImpl.setRoleMemberReview(final Role role, final RoleMember roleMember,\n                                 final Membership membership)", "testcase": false, "constructor": false}, {"identifier": "sendMembershipApprovalNotification", "parameters": "(final String domain, final String org, final String roleName,\n            final String member, final String auditRef, final String principal, final Role role)", "modifiers": "", "return": "void", "signature": "void sendMembershipApprovalNotification(final String domain, final String org, final String roleName,\n            final String member, final String auditRef, final String principal, final Role role)", "full_signature": " void sendMembershipApprovalNotification(final String domain, final String org, final String roleName,\n            final String member, final String auditRef, final String principal, final Role role)", "class_method_signature": "ZMSImpl.sendMembershipApprovalNotification(final String domain, final String org, final String roleName,\n            final String member, final String auditRef, final String principal, final Role role)", "testcase": false, "constructor": false}, {"identifier": "sendGroupMembershipApprovalNotification", "parameters": "(final String domain, final String org, final String groupName,\n                                                 final String member, final String auditRef, final String principal,\n                                                 final Group group)", "modifiers": "", "return": "void", "signature": "void sendGroupMembershipApprovalNotification(final String domain, final String org, final String groupName,\n                                                 final String member, final String auditRef, final String principal,\n                                                 final Group group)", "full_signature": " void sendGroupMembershipApprovalNotification(final String domain, final String org, final String groupName,\n                                                 final String member, final String auditRef, final String principal,\n                                                 final Group group)", "class_method_signature": "ZMSImpl.sendGroupMembershipApprovalNotification(final String domain, final String org, final String groupName,\n                                                 final String member, final String auditRef, final String principal,\n                                                 final Group group)", "testcase": false, "constructor": false}, {"identifier": "deletePendingMembership", "parameters": "(ResourceContext ctx, String domainName, String roleName,\n            String memberName, String auditRef)", "modifiers": "public", "return": "void", "signature": "void deletePendingMembership(ResourceContext ctx, String domainName, String roleName,\n            String memberName, String auditRef)", "full_signature": "public void deletePendingMembership(ResourceContext ctx, String domainName, String roleName,\n            String memberName, String auditRef)", "class_method_signature": "ZMSImpl.deletePendingMembership(ResourceContext ctx, String domainName, String roleName,\n            String memberName, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "deleteMembership", "parameters": "(ResourceContext ctx, String domainName, String roleName,\n            String memberName, String auditRef)", "modifiers": "public", "return": "void", "signature": "void deleteMembership(ResourceContext ctx, String domainName, String roleName,\n            String memberName, String auditRef)", "full_signature": "public void deleteMembership(ResourceContext ctx, String domainName, String roleName,\n            String memberName, String auditRef)", "class_method_signature": "ZMSImpl.deleteMembership(ResourceContext ctx, String domainName, String roleName,\n            String memberName, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "getQuota", "parameters": "(ResourceContext ctx, String domainName)", "modifiers": "public", "return": "Quota", "signature": "Quota getQuota(ResourceContext ctx, String domainName)", "full_signature": "public Quota getQuota(ResourceContext ctx, String domainName)", "class_method_signature": "ZMSImpl.getQuota(ResourceContext ctx, String domainName)", "testcase": false, "constructor": false}, {"identifier": "putQuota", "parameters": "(ResourceContext ctx, String domainName, String auditRef, Quota quota)", "modifiers": "@Override public", "return": "void", "signature": "void putQuota(ResourceContext ctx, String domainName, String auditRef, Quota quota)", "full_signature": "@Override public void putQuota(ResourceContext ctx, String domainName, String auditRef, Quota quota)", "class_method_signature": "ZMSImpl.putQuota(ResourceContext ctx, String domainName, String auditRef, Quota quota)", "testcase": false, "constructor": false}, {"identifier": "deleteQuota", "parameters": "(ResourceContext ctx, String domainName, String auditRef)", "modifiers": "public", "return": "void", "signature": "void deleteQuota(ResourceContext ctx, String domainName, String auditRef)", "full_signature": "public void deleteQuota(ResourceContext ctx, String domainName, String auditRef)", "class_method_signature": "ZMSImpl.deleteQuota(ResourceContext ctx, String domainName, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "hasExceededListLimit", "parameters": "(Integer limit, int count)", "modifiers": "", "return": "boolean", "signature": "boolean hasExceededListLimit(Integer limit, int count)", "full_signature": " boolean hasExceededListLimit(Integer limit, int count)", "class_method_signature": "ZMSImpl.hasExceededListLimit(Integer limit, int count)", "testcase": false, "constructor": false}, {"identifier": "processListRequest", "parameters": "(String domainName, AthenzObject objType, Integer limit,\n            String skip, List<String> names)", "modifiers": "", "return": "String", "signature": "String processListRequest(String domainName, AthenzObject objType, Integer limit,\n            String skip, List<String> names)", "full_signature": " String processListRequest(String domainName, AthenzObject objType, Integer limit,\n            String skip, List<String> names)", "class_method_signature": "ZMSImpl.processListRequest(String domainName, AthenzObject objType, Integer limit,\n            String skip, List<String> names)", "testcase": false, "constructor": false}, {"identifier": "getPolicyList", "parameters": "(ResourceContext ctx, String domainName, Integer limit, String skip)", "modifiers": "public", "return": "PolicyList", "signature": "PolicyList getPolicyList(ResourceContext ctx, String domainName, Integer limit, String skip)", "full_signature": "public PolicyList getPolicyList(ResourceContext ctx, String domainName, Integer limit, String skip)", "class_method_signature": "ZMSImpl.getPolicyList(ResourceContext ctx, String domainName, Integer limit, String skip)", "testcase": false, "constructor": false}, {"identifier": "setupPolicyList", "parameters": "(AthenzDomain domain, Boolean assertions)", "modifiers": "", "return": "List<Policy>", "signature": "List<Policy> setupPolicyList(AthenzDomain domain, Boolean assertions)", "full_signature": " List<Policy> setupPolicyList(AthenzDomain domain, Boolean assertions)", "class_method_signature": "ZMSImpl.setupPolicyList(AthenzDomain domain, Boolean assertions)", "testcase": false, "constructor": false}, {"identifier": "getPolicies", "parameters": "(ResourceContext ctx, String domainName, Boolean assertions)", "modifiers": "public", "return": "Policies", "signature": "Policies getPolicies(ResourceContext ctx, String domainName, Boolean assertions)", "full_signature": "public Policies getPolicies(ResourceContext ctx, String domainName, Boolean assertions)", "class_method_signature": "ZMSImpl.getPolicies(ResourceContext ctx, String domainName, Boolean assertions)", "testcase": false, "constructor": false}, {"identifier": "getPolicy", "parameters": "(ResourceContext ctx, String domainName, String policyName)", "modifiers": "public", "return": "Policy", "signature": "Policy getPolicy(ResourceContext ctx, String domainName, String policyName)", "full_signature": "public Policy getPolicy(ResourceContext ctx, String domainName, String policyName)", "class_method_signature": "ZMSImpl.getPolicy(ResourceContext ctx, String domainName, String policyName)", "testcase": false, "constructor": false}, {"identifier": "getAssertion", "parameters": "(ResourceContext ctx, String domainName, String policyName,\n            Long assertionId)", "modifiers": "public", "return": "Assertion", "signature": "Assertion getAssertion(ResourceContext ctx, String domainName, String policyName,\n            Long assertionId)", "full_signature": "public Assertion getAssertion(ResourceContext ctx, String domainName, String policyName,\n            Long assertionId)", "class_method_signature": "ZMSImpl.getAssertion(ResourceContext ctx, String domainName, String policyName,\n            Long assertionId)", "testcase": false, "constructor": false}, {"identifier": "putAssertion", "parameters": "(ResourceContext ctx, String domainName, String policyName,\n            String auditRef, Assertion assertion)", "modifiers": "@Override public", "return": "Assertion", "signature": "Assertion putAssertion(ResourceContext ctx, String domainName, String policyName,\n            String auditRef, Assertion assertion)", "full_signature": "@Override public Assertion putAssertion(ResourceContext ctx, String domainName, String policyName,\n            String auditRef, Assertion assertion)", "class_method_signature": "ZMSImpl.putAssertion(ResourceContext ctx, String domainName, String policyName,\n            String auditRef, Assertion assertion)", "testcase": false, "constructor": false}, {"identifier": "deleteAssertion", "parameters": "(ResourceContext ctx, String domainName, String policyName,\n            Long assertionId, String auditRef)", "modifiers": "public", "return": "void", "signature": "void deleteAssertion(ResourceContext ctx, String domainName, String policyName,\n            Long assertionId, String auditRef)", "full_signature": "public void deleteAssertion(ResourceContext ctx, String domainName, String policyName,\n            Long assertionId, String auditRef)", "class_method_signature": "ZMSImpl.deleteAssertion(ResourceContext ctx, String domainName, String policyName,\n            Long assertionId, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "validatePolicyAssertions", "parameters": "(List<Assertion> assertions, String caller)", "modifiers": "", "return": "void", "signature": "void validatePolicyAssertions(List<Assertion> assertions, String caller)", "full_signature": " void validatePolicyAssertions(List<Assertion> assertions, String caller)", "class_method_signature": "ZMSImpl.validatePolicyAssertions(List<Assertion> assertions, String caller)", "testcase": false, "constructor": false}, {"identifier": "validatePolicyAssertion", "parameters": "(Assertion assertion, String caller)", "modifiers": "", "return": "void", "signature": "void validatePolicyAssertion(Assertion assertion, String caller)", "full_signature": " void validatePolicyAssertion(Assertion assertion, String caller)", "class_method_signature": "ZMSImpl.validatePolicyAssertion(Assertion assertion, String caller)", "testcase": false, "constructor": false}, {"identifier": "isConsistentPolicyName", "parameters": "(final String domainName, final String policyName, Policy policy)", "modifiers": "", "return": "boolean", "signature": "boolean isConsistentPolicyName(final String domainName, final String policyName, Policy policy)", "full_signature": " boolean isConsistentPolicyName(final String domainName, final String policyName, Policy policy)", "class_method_signature": "ZMSImpl.isConsistentPolicyName(final String domainName, final String policyName, Policy policy)", "testcase": false, "constructor": false}, {"identifier": "putPolicy", "parameters": "(ResourceContext ctx, String domainName, String policyName, String auditRef, Policy policy)", "modifiers": "@Override public", "return": "void", "signature": "void putPolicy(ResourceContext ctx, String domainName, String policyName, String auditRef, Policy policy)", "full_signature": "@Override public void putPolicy(ResourceContext ctx, String domainName, String policyName, String auditRef, Policy policy)", "class_method_signature": "ZMSImpl.putPolicy(ResourceContext ctx, String domainName, String policyName, String auditRef, Policy policy)", "testcase": false, "constructor": false}, {"identifier": "deletePolicy", "parameters": "(ResourceContext ctx, String domainName, String policyName, String auditRef)", "modifiers": "public", "return": "void", "signature": "void deletePolicy(ResourceContext ctx, String domainName, String policyName, String auditRef)", "full_signature": "public void deletePolicy(ResourceContext ctx, String domainName, String policyName, String auditRef)", "class_method_signature": "ZMSImpl.deletePolicy(ResourceContext ctx, String domainName, String policyName, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "delegatedTrust", "parameters": "(String domainName, String roleName, String roleMember)", "modifiers": "", "return": "boolean", "signature": "boolean delegatedTrust(String domainName, String roleName, String roleMember)", "full_signature": " boolean delegatedTrust(String domainName, String roleName, String roleMember)", "class_method_signature": "ZMSImpl.delegatedTrust(String domainName, String roleName, String roleMember)", "testcase": false, "constructor": false}, {"identifier": "matchRole", "parameters": "(String domain, List<Role> roles, String rolePattern, List<String> authenticatedRoles)", "modifiers": "", "return": "boolean", "signature": "boolean matchRole(String domain, List<Role> roles, String rolePattern, List<String> authenticatedRoles)", "full_signature": " boolean matchRole(String domain, List<Role> roles, String rolePattern, List<String> authenticatedRoles)", "class_method_signature": "ZMSImpl.matchRole(String domain, List<Role> roles, String rolePattern, List<String> authenticatedRoles)", "testcase": false, "constructor": false}, {"identifier": "matchPrincipalInRole", "parameters": "(Role role, String roleName, String fullUser, String trustDomain)", "modifiers": "", "return": "boolean", "signature": "boolean matchPrincipalInRole(Role role, String roleName, String fullUser, String trustDomain)", "full_signature": " boolean matchPrincipalInRole(Role role, String roleName, String fullUser, String trustDomain)", "class_method_signature": "ZMSImpl.matchPrincipalInRole(Role role, String roleName, String fullUser, String trustDomain)", "testcase": false, "constructor": false}, {"identifier": "matchPrincipal", "parameters": "(List<Role> roles, String rolePattern, String fullUser, String trustDomain)", "modifiers": "", "return": "boolean", "signature": "boolean matchPrincipal(List<Role> roles, String rolePattern, String fullUser, String trustDomain)", "full_signature": " boolean matchPrincipal(List<Role> roles, String rolePattern, String fullUser, String trustDomain)", "class_method_signature": "ZMSImpl.matchPrincipal(List<Role> roles, String rolePattern, String fullUser, String trustDomain)", "testcase": false, "constructor": false}, {"identifier": "virtualHomeDomain", "parameters": "(Principal principal, String domainName)", "modifiers": "", "return": "AthenzDomain", "signature": "AthenzDomain virtualHomeDomain(Principal principal, String domainName)", "full_signature": " AthenzDomain virtualHomeDomain(Principal principal, String domainName)", "class_method_signature": "ZMSImpl.virtualHomeDomain(Principal principal, String domainName)", "testcase": false, "constructor": false}, {"identifier": "assertionMatch", "parameters": "(Assertion assertion, String identity, String action, String resource,\n            String domain, List<Role> roles, List<String> authenticatedRoles, String trustDomain)", "modifiers": "", "return": "boolean", "signature": "boolean assertionMatch(Assertion assertion, String identity, String action, String resource,\n            String domain, List<Role> roles, List<String> authenticatedRoles, String trustDomain)", "full_signature": " boolean assertionMatch(Assertion assertion, String identity, String action, String resource,\n            String domain, List<Role> roles, List<String> authenticatedRoles, String trustDomain)", "class_method_signature": "ZMSImpl.assertionMatch(Assertion assertion, String identity, String action, String resource,\n            String domain, List<Role> roles, List<String> authenticatedRoles, String trustDomain)", "testcase": false, "constructor": false}, {"identifier": "verifyProviderEndpoint", "parameters": "(String providerEndpoint)", "modifiers": "", "return": "boolean", "signature": "boolean verifyProviderEndpoint(String providerEndpoint)", "full_signature": " boolean verifyProviderEndpoint(String providerEndpoint)", "class_method_signature": "ZMSImpl.verifyProviderEndpoint(String providerEndpoint)", "testcase": false, "constructor": false}, {"identifier": "verifyServicePublicKey", "parameters": "(String key)", "modifiers": "", "return": "boolean", "signature": "boolean verifyServicePublicKey(String key)", "full_signature": " boolean verifyServicePublicKey(String key)", "class_method_signature": "ZMSImpl.verifyServicePublicKey(String key)", "testcase": false, "constructor": false}, {"identifier": "verifyServicePublicKeys", "parameters": "(ServiceIdentity service)", "modifiers": "", "return": "boolean", "signature": "boolean verifyServicePublicKeys(ServiceIdentity service)", "full_signature": " boolean verifyServicePublicKeys(ServiceIdentity service)", "class_method_signature": "ZMSImpl.verifyServicePublicKeys(ServiceIdentity service)", "testcase": false, "constructor": false}, {"identifier": "isValidServiceName", "parameters": "(final String serviceName)", "modifiers": "public", "return": "boolean", "signature": "boolean isValidServiceName(final String serviceName)", "full_signature": "public boolean isValidServiceName(final String serviceName)", "class_method_signature": "ZMSImpl.isValidServiceName(final String serviceName)", "testcase": false, "constructor": false}, {"identifier": "putServiceIdentity", "parameters": "(ResourceContext ctx, String domainName, String serviceName,\n                                   String auditRef, ServiceIdentity service)", "modifiers": "@Override public", "return": "void", "signature": "void putServiceIdentity(ResourceContext ctx, String domainName, String serviceName,\n                                   String auditRef, ServiceIdentity service)", "full_signature": "@Override public void putServiceIdentity(ResourceContext ctx, String domainName, String serviceName,\n                                   String auditRef, ServiceIdentity service)", "class_method_signature": "ZMSImpl.putServiceIdentity(ResourceContext ctx, String domainName, String serviceName,\n                                   String auditRef, ServiceIdentity service)", "testcase": false, "constructor": false}, {"identifier": "putServiceIdentitySystemMeta", "parameters": "(ResourceContext ctx, String domainName, String serviceName,\n             String attribute, String auditRef, ServiceIdentitySystemMeta meta)", "modifiers": "@Override public", "return": "void", "signature": "void putServiceIdentitySystemMeta(ResourceContext ctx, String domainName, String serviceName,\n             String attribute, String auditRef, ServiceIdentitySystemMeta meta)", "full_signature": "@Override public void putServiceIdentitySystemMeta(ResourceContext ctx, String domainName, String serviceName,\n             String attribute, String auditRef, ServiceIdentitySystemMeta meta)", "class_method_signature": "ZMSImpl.putServiceIdentitySystemMeta(ResourceContext ctx, String domainName, String serviceName,\n             String attribute, String auditRef, ServiceIdentitySystemMeta meta)", "testcase": false, "constructor": false}, {"identifier": "getServiceIdentity", "parameters": "(ResourceContext ctx, String domainName, String serviceName)", "modifiers": "public", "return": "ServiceIdentity", "signature": "ServiceIdentity getServiceIdentity(ResourceContext ctx, String domainName, String serviceName)", "full_signature": "public ServiceIdentity getServiceIdentity(ResourceContext ctx, String domainName, String serviceName)", "class_method_signature": "ZMSImpl.getServiceIdentity(ResourceContext ctx, String domainName, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "deleteServiceIdentity", "parameters": "(ResourceContext ctx, String domainName,\n            String serviceName, String auditRef)", "modifiers": "public", "return": "void", "signature": "void deleteServiceIdentity(ResourceContext ctx, String domainName,\n            String serviceName, String auditRef)", "full_signature": "public void deleteServiceIdentity(ResourceContext ctx, String domainName,\n            String serviceName, String auditRef)", "class_method_signature": "ZMSImpl.deleteServiceIdentity(ResourceContext ctx, String domainName,\n            String serviceName, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "setupServiceIdentityList", "parameters": "(AthenzDomain domain, Boolean publicKeys, Boolean hosts)", "modifiers": "", "return": "List<ServiceIdentity>", "signature": "List<ServiceIdentity> setupServiceIdentityList(AthenzDomain domain, Boolean publicKeys, Boolean hosts)", "full_signature": " List<ServiceIdentity> setupServiceIdentityList(AthenzDomain domain, Boolean publicKeys, Boolean hosts)", "class_method_signature": "ZMSImpl.setupServiceIdentityList(AthenzDomain domain, Boolean publicKeys, Boolean hosts)", "testcase": false, "constructor": false}, {"identifier": "getServiceIdentities", "parameters": "(ResourceContext ctx, String domainName,\n            Boolean publicKeys, Boolean hosts)", "modifiers": "public", "return": "ServiceIdentities", "signature": "ServiceIdentities getServiceIdentities(ResourceContext ctx, String domainName,\n            Boolean publicKeys, Boolean hosts)", "full_signature": "public ServiceIdentities getServiceIdentities(ResourceContext ctx, String domainName,\n            Boolean publicKeys, Boolean hosts)", "class_method_signature": "ZMSImpl.getServiceIdentities(ResourceContext ctx, String domainName,\n            Boolean publicKeys, Boolean hosts)", "testcase": false, "constructor": false}, {"identifier": "getServiceIdentityList", "parameters": "(ResourceContext ctx, String domainName,\n            Integer limit, String skip)", "modifiers": "public", "return": "ServiceIdentityList", "signature": "ServiceIdentityList getServiceIdentityList(ResourceContext ctx, String domainName,\n            Integer limit, String skip)", "full_signature": "public ServiceIdentityList getServiceIdentityList(ResourceContext ctx, String domainName,\n            Integer limit, String skip)", "class_method_signature": "ZMSImpl.getServiceIdentityList(ResourceContext ctx, String domainName,\n            Integer limit, String skip)", "testcase": false, "constructor": false}, {"identifier": "getPublicKeyEntry", "parameters": "(ResourceContext ctx, String domainName, String serviceName, String keyId)", "modifiers": "public", "return": "PublicKeyEntry", "signature": "PublicKeyEntry getPublicKeyEntry(ResourceContext ctx, String domainName, String serviceName, String keyId)", "full_signature": "public PublicKeyEntry getPublicKeyEntry(ResourceContext ctx, String domainName, String serviceName, String keyId)", "class_method_signature": "ZMSImpl.getPublicKeyEntry(ResourceContext ctx, String domainName, String serviceName, String keyId)", "testcase": false, "constructor": false}, {"identifier": "deletePublicKeyEntry", "parameters": "(ResourceContext ctx, String domainName, String serviceName,\n            String keyId, String auditRef)", "modifiers": "public", "return": "void", "signature": "void deletePublicKeyEntry(ResourceContext ctx, String domainName, String serviceName,\n            String keyId, String auditRef)", "full_signature": "public void deletePublicKeyEntry(ResourceContext ctx, String domainName, String serviceName,\n            String keyId, String auditRef)", "class_method_signature": "ZMSImpl.deletePublicKeyEntry(ResourceContext ctx, String domainName, String serviceName,\n            String keyId, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "putPublicKeyEntry", "parameters": "(ResourceContext ctx, String domainName, String serviceName,\n            String keyId, String auditRef, PublicKeyEntry keyEntry)", "modifiers": "@Override public", "return": "void", "signature": "void putPublicKeyEntry(ResourceContext ctx, String domainName, String serviceName,\n            String keyId, String auditRef, PublicKeyEntry keyEntry)", "full_signature": "@Override public void putPublicKeyEntry(ResourceContext ctx, String domainName, String serviceName,\n            String keyId, String auditRef, PublicKeyEntry keyEntry)", "class_method_signature": "ZMSImpl.putPublicKeyEntry(ResourceContext ctx, String domainName, String serviceName,\n            String keyId, String auditRef, PublicKeyEntry keyEntry)", "testcase": false, "constructor": false}, {"identifier": "removeQuotes", "parameters": "(String value)", "modifiers": "", "return": "String", "signature": "String removeQuotes(String value)", "full_signature": " String removeQuotes(String value)", "class_method_signature": "ZMSImpl.removeQuotes(String value)", "testcase": false, "constructor": false}, {"identifier": "getModTimestamp", "parameters": "(String matchingTag)", "modifiers": "", "return": "long", "signature": "long getModTimestamp(String matchingTag)", "full_signature": " long getModTimestamp(String matchingTag)", "class_method_signature": "ZMSImpl.getModTimestamp(String matchingTag)", "testcase": false, "constructor": false}, {"identifier": "createSignedDomain", "parameters": "(String domainName, long modifiedTime)", "modifiers": "", "return": "SignedDomain", "signature": "SignedDomain createSignedDomain(String domainName, long modifiedTime)", "full_signature": " SignedDomain createSignedDomain(String domainName, long modifiedTime)", "class_method_signature": "ZMSImpl.createSignedDomain(String domainName, long modifiedTime)", "testcase": false, "constructor": false}, {"identifier": "retrieveSignedDomainMeta", "parameters": "(final Domain domain, final String metaAttr)", "modifiers": "", "return": "SignedDomain", "signature": "SignedDomain retrieveSignedDomainMeta(final Domain domain, final String metaAttr)", "full_signature": " SignedDomain retrieveSignedDomainMeta(final Domain domain, final String metaAttr)", "class_method_signature": "ZMSImpl.retrieveSignedDomainMeta(final Domain domain, final String metaAttr)", "testcase": false, "constructor": false}, {"identifier": "retrieveSignedDomain", "parameters": "(Domain domain, final String metaAttr, boolean setMetaDataOnly, boolean masterCopy)", "modifiers": "", "return": "SignedDomain", "signature": "SignedDomain retrieveSignedDomain(Domain domain, final String metaAttr, boolean setMetaDataOnly, boolean masterCopy)", "full_signature": " SignedDomain retrieveSignedDomain(Domain domain, final String metaAttr, boolean setMetaDataOnly, boolean masterCopy)", "class_method_signature": "ZMSImpl.retrieveSignedDomain(Domain domain, final String metaAttr, boolean setMetaDataOnly, boolean masterCopy)", "testcase": false, "constructor": false}, {"identifier": "retrieveSignedDomainData", "parameters": "(final String domainName, long modifiedTime, boolean masterCopy)", "modifiers": "", "return": "SignedDomain", "signature": "SignedDomain retrieveSignedDomainData(final String domainName, long modifiedTime, boolean masterCopy)", "full_signature": " SignedDomain retrieveSignedDomainData(final String domainName, long modifiedTime, boolean masterCopy)", "class_method_signature": "ZMSImpl.retrieveSignedDomainData(final String domainName, long modifiedTime, boolean masterCopy)", "testcase": false, "constructor": false}, {"identifier": "getSignedDomains", "parameters": "(ResourceContext ctx, String domainName, String metaOnly,\n            String metaAttr, Boolean master, String matchingTag)", "modifiers": "@Override public", "return": "Response", "signature": "Response getSignedDomains(ResourceContext ctx, String domainName, String metaOnly,\n            String metaAttr, Boolean master, String matchingTag)", "full_signature": "@Override public Response getSignedDomains(ResourceContext ctx, String domainName, String metaOnly,\n            String metaAttr, Boolean master, String matchingTag)", "class_method_signature": "ZMSImpl.getSignedDomains(ResourceContext ctx, String domainName, String metaOnly,\n            String metaAttr, Boolean master, String matchingTag)", "testcase": false, "constructor": false}, {"identifier": "getJWSDomain", "parameters": "(ResourceContext ctx, String domainName)", "modifiers": "@Override public", "return": "JWSDomain", "signature": "JWSDomain getJWSDomain(ResourceContext ctx, String domainName)", "full_signature": "@Override public JWSDomain getJWSDomain(ResourceContext ctx, String domainName)", "class_method_signature": "ZMSImpl.getJWSDomain(ResourceContext ctx, String domainName)", "testcase": false, "constructor": false}, {"identifier": "retrieveJWSDomain", "parameters": "(final String domainName)", "modifiers": "", "return": "JWSDomain", "signature": "JWSDomain retrieveJWSDomain(final String domainName)", "full_signature": " JWSDomain retrieveJWSDomain(final String domainName)", "class_method_signature": "ZMSImpl.retrieveJWSDomain(final String domainName)", "testcase": false, "constructor": false}, {"identifier": "signJwsDomain", "parameters": "(DomainData domainData)", "modifiers": "", "return": "JWSDomain", "signature": "JWSDomain signJwsDomain(DomainData domainData)", "full_signature": " JWSDomain signJwsDomain(DomainData domainData)", "class_method_signature": "ZMSImpl.signJwsDomain(DomainData domainData)", "testcase": false, "constructor": false}, {"identifier": "getPolicyListWithoutAssertionId", "parameters": "(List<Policy> policies)", "modifiers": "", "return": "List<Policy>", "signature": "List<Policy> getPolicyListWithoutAssertionId(List<Policy> policies)", "full_signature": " List<Policy> getPolicyListWithoutAssertionId(List<Policy> policies)", "class_method_signature": "ZMSImpl.getPolicyListWithoutAssertionId(List<Policy> policies)", "testcase": false, "constructor": false}, {"identifier": "isValidUserTokenRequest", "parameters": "(Principal principal, String userName)", "modifiers": "", "return": "boolean", "signature": "boolean isValidUserTokenRequest(Principal principal, String userName)", "full_signature": " boolean isValidUserTokenRequest(Principal principal, String userName)", "class_method_signature": "ZMSImpl.isValidUserTokenRequest(Principal principal, String userName)", "testcase": false, "constructor": false}, {"identifier": "getUserToken", "parameters": "(ResourceContext ctx, String userName, String authorizedServices,\n            Boolean header)", "modifiers": "@Override public", "return": "UserToken", "signature": "UserToken getUserToken(ResourceContext ctx, String userName, String authorizedServices,\n            Boolean header)", "full_signature": "@Override public UserToken getUserToken(ResourceContext ctx, String userName, String authorizedServices,\n            Boolean header)", "class_method_signature": "ZMSImpl.getUserToken(ResourceContext ctx, String userName, String authorizedServices,\n            Boolean header)", "testcase": false, "constructor": false}, {"identifier": "optionsUserToken", "parameters": "(ResourceContext ctx, String userName, String authorizedServices)", "modifiers": "public", "return": "UserToken", "signature": "UserToken optionsUserToken(ResourceContext ctx, String userName, String authorizedServices)", "full_signature": "public UserToken optionsUserToken(ResourceContext ctx, String userName, String authorizedServices)", "class_method_signature": "ZMSImpl.optionsUserToken(ResourceContext ctx, String userName, String authorizedServices)", "testcase": false, "constructor": false}, {"identifier": "isValidCORSOrigin", "parameters": "(final String origin)", "modifiers": "", "return": "boolean", "signature": "boolean isValidCORSOrigin(final String origin)", "full_signature": " boolean isValidCORSOrigin(final String origin)", "class_method_signature": "ZMSImpl.isValidCORSOrigin(final String origin)", "testcase": false, "constructor": false}, {"identifier": "setStandardCORSHeaders", "parameters": "(ResourceContext ctx)", "modifiers": "", "return": "void", "signature": "void setStandardCORSHeaders(ResourceContext ctx)", "full_signature": " void setStandardCORSHeaders(ResourceContext ctx)", "class_method_signature": "ZMSImpl.setStandardCORSHeaders(ResourceContext ctx)", "testcase": false, "constructor": false}, {"identifier": "providerServiceDomain", "parameters": "(String provider)", "modifiers": "", "return": "String", "signature": "String providerServiceDomain(String provider)", "full_signature": " String providerServiceDomain(String provider)", "class_method_signature": "ZMSImpl.providerServiceDomain(String provider)", "testcase": false, "constructor": false}, {"identifier": "providerServiceName", "parameters": "(String provider)", "modifiers": "", "return": "String", "signature": "String providerServiceName(String provider)", "full_signature": " String providerServiceName(String provider)", "class_method_signature": "ZMSImpl.providerServiceName(String provider)", "testcase": false, "constructor": false}, {"identifier": "putTenancy", "parameters": "(ResourceContext ctx, String tenantDomain, String provider,\n            String auditRef, Tenancy detail)", "modifiers": "@Override public", "return": "void", "signature": "void putTenancy(ResourceContext ctx, String tenantDomain, String provider,\n            String auditRef, Tenancy detail)", "full_signature": "@Override public void putTenancy(ResourceContext ctx, String tenantDomain, String provider,\n            String auditRef, Tenancy detail)", "class_method_signature": "ZMSImpl.putTenancy(ResourceContext ctx, String tenantDomain, String provider,\n            String auditRef, Tenancy detail)", "testcase": false, "constructor": false}, {"identifier": "deleteTenancy", "parameters": "(ResourceContext ctx, String tenantDomain, String provider, String auditRef)", "modifiers": "@Override public", "return": "void", "signature": "void deleteTenancy(ResourceContext ctx, String tenantDomain, String provider, String auditRef)", "full_signature": "@Override public void deleteTenancy(ResourceContext ctx, String tenantDomain, String provider, String auditRef)", "class_method_signature": "ZMSImpl.deleteTenancy(ResourceContext ctx, String tenantDomain, String provider, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "putTenant", "parameters": "(ResourceContext ctx, String providerDomain, String providerService,\n           String tenantDomain, String auditRef, Tenancy detail)", "modifiers": "@Override public", "return": "void", "signature": "void putTenant(ResourceContext ctx, String providerDomain, String providerService,\n           String tenantDomain, String auditRef, Tenancy detail)", "full_signature": "@Override public void putTenant(ResourceContext ctx, String providerDomain, String providerService,\n           String tenantDomain, String auditRef, Tenancy detail)", "class_method_signature": "ZMSImpl.putTenant(ResourceContext ctx, String providerDomain, String providerService,\n           String tenantDomain, String auditRef, Tenancy detail)", "testcase": false, "constructor": false}, {"identifier": "deleteTenant", "parameters": "(ResourceContext ctx, String providerDomain, String providerService,\n            String tenantDomain, String auditRef)", "modifiers": "@Override public", "return": "void", "signature": "void deleteTenant(ResourceContext ctx, String providerDomain, String providerService,\n            String tenantDomain, String auditRef)", "full_signature": "@Override public void deleteTenant(ResourceContext ctx, String providerDomain, String providerService,\n            String tenantDomain, String auditRef)", "class_method_signature": "ZMSImpl.deleteTenant(ResourceContext ctx, String providerDomain, String providerService,\n            String tenantDomain, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "validateTenancyObject", "parameters": "(Tenancy tenant, final String tenantDomain, final String providerService)", "modifiers": "", "return": "boolean", "signature": "boolean validateTenancyObject(Tenancy tenant, final String tenantDomain, final String providerService)", "full_signature": " boolean validateTenancyObject(Tenancy tenant, final String tenantDomain, final String providerService)", "class_method_signature": "ZMSImpl.validateTenancyObject(Tenancy tenant, final String tenantDomain, final String providerService)", "testcase": false, "constructor": false}, {"identifier": "validateTenantResourceGroupRolesObject", "parameters": "(TenantResourceGroupRoles roles, final String providerDomain,\n            final String providerService, final String tenantDomain, final String resourceGroup)", "modifiers": "", "return": "boolean", "signature": "boolean validateTenantResourceGroupRolesObject(TenantResourceGroupRoles roles, final String providerDomain,\n            final String providerService, final String tenantDomain, final String resourceGroup)", "full_signature": " boolean validateTenantResourceGroupRolesObject(TenantResourceGroupRoles roles, final String providerDomain,\n            final String providerService, final String tenantDomain, final String resourceGroup)", "class_method_signature": "ZMSImpl.validateTenantResourceGroupRolesObject(TenantResourceGroupRoles roles, final String providerDomain,\n            final String providerService, final String tenantDomain, final String resourceGroup)", "testcase": false, "constructor": false}, {"identifier": "validateProviderResourceGroupRolesObject", "parameters": "(ProviderResourceGroupRoles roles, final String providerDomain,\n            final String providerService, final String tenantDomain, final String resourceGroup)", "modifiers": "", "return": "boolean", "signature": "boolean validateProviderResourceGroupRolesObject(ProviderResourceGroupRoles roles, final String providerDomain,\n            final String providerService, final String tenantDomain, final String resourceGroup)", "full_signature": " boolean validateProviderResourceGroupRolesObject(ProviderResourceGroupRoles roles, final String providerDomain,\n            final String providerService, final String tenantDomain, final String resourceGroup)", "class_method_signature": "ZMSImpl.validateProviderResourceGroupRolesObject(ProviderResourceGroupRoles roles, final String providerDomain,\n            final String providerService, final String tenantDomain, final String resourceGroup)", "testcase": false, "constructor": false}, {"identifier": "putTenantResourceGroupRoles", "parameters": "(ResourceContext ctx, String provSvcDomain,\n            String provSvcName, String tenantDomain, String resourceGroup, String auditRef,\n            TenantResourceGroupRoles detail)", "modifiers": "@Override public", "return": "TenantResourceGroupRoles", "signature": "TenantResourceGroupRoles putTenantResourceGroupRoles(ResourceContext ctx, String provSvcDomain,\n            String provSvcName, String tenantDomain, String resourceGroup, String auditRef,\n            TenantResourceGroupRoles detail)", "full_signature": "@Override public TenantResourceGroupRoles putTenantResourceGroupRoles(ResourceContext ctx, String provSvcDomain,\n            String provSvcName, String tenantDomain, String resourceGroup, String auditRef,\n            TenantResourceGroupRoles detail)", "class_method_signature": "ZMSImpl.putTenantResourceGroupRoles(ResourceContext ctx, String provSvcDomain,\n            String provSvcName, String tenantDomain, String resourceGroup, String auditRef,\n            TenantResourceGroupRoles detail)", "testcase": false, "constructor": false}, {"identifier": "getDomainDataCheck", "parameters": "(ResourceContext ctx, String domainName)", "modifiers": "public", "return": "DomainDataCheck", "signature": "DomainDataCheck getDomainDataCheck(ResourceContext ctx, String domainName)", "full_signature": "public DomainDataCheck getDomainDataCheck(ResourceContext ctx, String domainName)", "class_method_signature": "ZMSImpl.getDomainDataCheck(ResourceContext ctx, String domainName)", "testcase": false, "constructor": false}, {"identifier": "deleteProviderResourceGroupRoles", "parameters": "(ResourceContext ctx, String tenantDomain,\n             String provSvcDomain, String provSvcName, String resourceGroup, String auditRef)", "modifiers": "public", "return": "void", "signature": "void deleteProviderResourceGroupRoles(ResourceContext ctx, String tenantDomain,\n             String provSvcDomain, String provSvcName, String resourceGroup, String auditRef)", "full_signature": "public void deleteProviderResourceGroupRoles(ResourceContext ctx, String tenantDomain,\n             String provSvcDomain, String provSvcName, String resourceGroup, String auditRef)", "class_method_signature": "ZMSImpl.deleteProviderResourceGroupRoles(ResourceContext ctx, String tenantDomain,\n             String provSvcDomain, String provSvcName, String resourceGroup, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "getProviderResourceGroupRoles", "parameters": "(ResourceContext ctx, String tenantDomain,\n            String provSvcDomain, String provSvcName, String resourceGroup)", "modifiers": "public", "return": "ProviderResourceGroupRoles", "signature": "ProviderResourceGroupRoles getProviderResourceGroupRoles(ResourceContext ctx, String tenantDomain,\n            String provSvcDomain, String provSvcName, String resourceGroup)", "full_signature": "public ProviderResourceGroupRoles getProviderResourceGroupRoles(ResourceContext ctx, String tenantDomain,\n            String provSvcDomain, String provSvcName, String resourceGroup)", "class_method_signature": "ZMSImpl.getProviderResourceGroupRoles(ResourceContext ctx, String tenantDomain,\n            String provSvcDomain, String provSvcName, String resourceGroup)", "testcase": false, "constructor": false}, {"identifier": "isAuthorizedProviderService", "parameters": "(String authorizedService, String provSvcDomain,\n             String provSvcName, Principal principal)", "modifiers": "", "return": "boolean", "signature": "boolean isAuthorizedProviderService(String authorizedService, String provSvcDomain,\n             String provSvcName, Principal principal)", "full_signature": " boolean isAuthorizedProviderService(String authorizedService, String provSvcDomain,\n             String provSvcName, Principal principal)", "class_method_signature": "ZMSImpl.isAuthorizedProviderService(String authorizedService, String provSvcDomain,\n             String provSvcName, Principal principal)", "testcase": false, "constructor": false}, {"identifier": "putProviderResourceGroupRoles", "parameters": "(ResourceContext ctx, String tenantDomain,\n             String provSvcDomain, String provSvcName, String resourceGroup, String auditRef,\n             ProviderResourceGroupRoles detail)", "modifiers": "@Override public", "return": "ProviderResourceGroupRoles", "signature": "ProviderResourceGroupRoles putProviderResourceGroupRoles(ResourceContext ctx, String tenantDomain,\n             String provSvcDomain, String provSvcName, String resourceGroup, String auditRef,\n             ProviderResourceGroupRoles detail)", "full_signature": "@Override public ProviderResourceGroupRoles putProviderResourceGroupRoles(ResourceContext ctx, String tenantDomain,\n             String provSvcDomain, String provSvcName, String resourceGroup, String auditRef,\n             ProviderResourceGroupRoles detail)", "class_method_signature": "ZMSImpl.putProviderResourceGroupRoles(ResourceContext ctx, String tenantDomain,\n             String provSvcDomain, String provSvcName, String resourceGroup, String auditRef,\n             ProviderResourceGroupRoles detail)", "testcase": false, "constructor": false}, {"identifier": "setupTenantAdminPolicyInProvider", "parameters": "(ResourceContext ctx, final String provSvcDomain,\n            final String provSvcName, final String tenantDomain, final String auditRef,\n            final String caller)", "modifiers": "", "return": "void", "signature": "void setupTenantAdminPolicyInProvider(ResourceContext ctx, final String provSvcDomain,\n            final String provSvcName, final String tenantDomain, final String auditRef,\n            final String caller)", "full_signature": " void setupTenantAdminPolicyInProvider(ResourceContext ctx, final String provSvcDomain,\n            final String provSvcName, final String tenantDomain, final String auditRef,\n            final String caller)", "class_method_signature": "ZMSImpl.setupTenantAdminPolicyInProvider(ResourceContext ctx, final String provSvcDomain,\n            final String provSvcName, final String tenantDomain, final String auditRef,\n            final String caller)", "testcase": false, "constructor": false}, {"identifier": "getProviderRoleAction", "parameters": "(String provSvcDomain, String roleName)", "modifiers": "", "return": "String", "signature": "String getProviderRoleAction(String provSvcDomain, String roleName)", "full_signature": " String getProviderRoleAction(String provSvcDomain, String roleName)", "class_method_signature": "ZMSImpl.getProviderRoleAction(String provSvcDomain, String roleName)", "testcase": false, "constructor": false}, {"identifier": "getTenantResourceGroupRoles", "parameters": "(ResourceContext ctx, String provSvcDomain,\n            String provSvcName, String tenantDomain, String resourceGroup)", "modifiers": "public", "return": "TenantResourceGroupRoles", "signature": "TenantResourceGroupRoles getTenantResourceGroupRoles(ResourceContext ctx, String provSvcDomain,\n            String provSvcName, String tenantDomain, String resourceGroup)", "full_signature": "public TenantResourceGroupRoles getTenantResourceGroupRoles(ResourceContext ctx, String provSvcDomain,\n            String provSvcName, String tenantDomain, String resourceGroup)", "class_method_signature": "ZMSImpl.getTenantResourceGroupRoles(ResourceContext ctx, String provSvcDomain,\n            String provSvcName, String tenantDomain, String resourceGroup)", "testcase": false, "constructor": false}, {"identifier": "deleteTenantResourceGroupRoles", "parameters": "(ResourceContext ctx, String provSvcDomain,\n            String provSvcName, String tenantDomain, String resourceGroup, String auditRef)", "modifiers": "public", "return": "void", "signature": "void deleteTenantResourceGroupRoles(ResourceContext ctx, String provSvcDomain,\n            String provSvcName, String tenantDomain, String resourceGroup, String auditRef)", "full_signature": "public void deleteTenantResourceGroupRoles(ResourceContext ctx, String provSvcDomain,\n            String provSvcName, String tenantDomain, String resourceGroup, String auditRef)", "class_method_signature": "ZMSImpl.deleteTenantResourceGroupRoles(ResourceContext ctx, String provSvcDomain,\n            String provSvcName, String tenantDomain, String resourceGroup, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "validateRequest", "parameters": "(HttpServletRequest request, String caller)", "modifiers": "", "return": "void", "signature": "void validateRequest(HttpServletRequest request, String caller)", "full_signature": " void validateRequest(HttpServletRequest request, String caller)", "class_method_signature": "ZMSImpl.validateRequest(HttpServletRequest request, String caller)", "testcase": false, "constructor": false}, {"identifier": "validateRequest", "parameters": "(HttpServletRequest request, String caller, boolean statusRequest)", "modifiers": "", "return": "void", "signature": "void validateRequest(HttpServletRequest request, String caller, boolean statusRequest)", "full_signature": " void validateRequest(HttpServletRequest request, String caller, boolean statusRequest)", "class_method_signature": "ZMSImpl.validateRequest(HttpServletRequest request, String caller, boolean statusRequest)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Object val, String type, String caller)", "modifiers": "", "return": "void", "signature": "void validate(Object val, String type, String caller)", "full_signature": " void validate(Object val, String type, String caller)", "class_method_signature": "ZMSImpl.validate(Object val, String type, String caller)", "testcase": false, "constructor": false}, {"identifier": "validatedAdminUsers", "parameters": "(List<String> lst)", "modifiers": "", "return": "List<String>", "signature": "List<String> validatedAdminUsers(List<String> lst)", "full_signature": " List<String> validatedAdminUsers(List<String> lst)", "class_method_signature": "ZMSImpl.validatedAdminUsers(List<String> lst)", "testcase": false, "constructor": false}, {"identifier": "createTopLevelDomain", "parameters": "(ResourceContext ctx, Domain domain, List<String> adminUsers,\n                List<String> solutionTemplates, String auditRef)", "modifiers": "", "return": "Domain", "signature": "Domain createTopLevelDomain(ResourceContext ctx, Domain domain, List<String> adminUsers,\n                List<String> solutionTemplates, String auditRef)", "full_signature": " Domain createTopLevelDomain(ResourceContext ctx, Domain domain, List<String> adminUsers,\n                List<String> solutionTemplates, String auditRef)", "class_method_signature": "ZMSImpl.createTopLevelDomain(ResourceContext ctx, Domain domain, List<String> adminUsers,\n                List<String> solutionTemplates, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "createSubDomain", "parameters": "(ResourceContext ctx, Domain domain, List<String> adminUsers,\n                List<String> solutionTemplates, String auditRef, String caller)", "modifiers": "", "return": "Domain", "signature": "Domain createSubDomain(ResourceContext ctx, Domain domain, List<String> adminUsers,\n                List<String> solutionTemplates, String auditRef, String caller)", "full_signature": " Domain createSubDomain(ResourceContext ctx, Domain domain, List<String> adminUsers,\n                List<String> solutionTemplates, String auditRef, String caller)", "class_method_signature": "ZMSImpl.createSubDomain(ResourceContext ctx, Domain domain, List<String> adminUsers,\n                List<String> solutionTemplates, String auditRef, String caller)", "testcase": false, "constructor": false}, {"identifier": "countDots", "parameters": "(String str)", "modifiers": "", "return": "int", "signature": "int countDots(String str)", "full_signature": " int countDots(String str)", "class_method_signature": "ZMSImpl.countDots(String str)", "testcase": false, "constructor": false}, {"identifier": "hasExceededDepthLimit", "parameters": "(Integer depth, String name)", "modifiers": "", "return": "boolean", "signature": "boolean hasExceededDepthLimit(Integer depth, String name)", "full_signature": " boolean hasExceededDepthLimit(Integer depth, String name)", "class_method_signature": "ZMSImpl.hasExceededDepthLimit(Integer depth, String name)", "testcase": false, "constructor": false}, {"identifier": "listDomains", "parameters": "(Integer limit, String skip, String prefix, Integer depth, long modTime, boolean masterCopy)", "modifiers": "", "return": "DomainList", "signature": "DomainList listDomains(Integer limit, String skip, String prefix, Integer depth, long modTime, boolean masterCopy)", "full_signature": " DomainList listDomains(Integer limit, String skip, String prefix, Integer depth, long modTime, boolean masterCopy)", "class_method_signature": "ZMSImpl.listDomains(Integer limit, String skip, String prefix, Integer depth, long modTime, boolean masterCopy)", "testcase": false, "constructor": false}, {"identifier": "isZMSService", "parameters": "(String domain, String service)", "modifiers": "", "return": "boolean", "signature": "boolean isZMSService(String domain, String service)", "full_signature": " boolean isZMSService(String domain, String service)", "class_method_signature": "ZMSImpl.isZMSService(String domain, String service)", "testcase": false, "constructor": false}, {"identifier": "getPublicKey", "parameters": "(String domain, String service, String keyId)", "modifiers": "@Override public", "return": "String", "signature": "String getPublicKey(String domain, String service, String keyId)", "full_signature": "@Override public String getPublicKey(String domain, String service, String keyId)", "class_method_signature": "ZMSImpl.getPublicKey(String domain, String service, String keyId)", "testcase": false, "constructor": false}, {"identifier": "putDefaultAdmins", "parameters": "(ResourceContext ctx, String domainName, String auditRef,\n            DefaultAdmins defaultAdmins)", "modifiers": "@Override public", "return": "void", "signature": "void putDefaultAdmins(ResourceContext ctx, String domainName, String auditRef,\n            DefaultAdmins defaultAdmins)", "full_signature": "@Override public void putDefaultAdmins(ResourceContext ctx, String domainName, String auditRef,\n            DefaultAdmins defaultAdmins)", "class_method_signature": "ZMSImpl.putDefaultAdmins(ResourceContext ctx, String domainName, String auditRef,\n            DefaultAdmins defaultAdmins)", "testcase": false, "constructor": false}, {"identifier": "addDefaultAdminAssertion", "parameters": "(ResourceContext ctx, String domainName, Policy adminPolicy,\n            String auditRef, String caller)", "modifiers": "", "return": "void", "signature": "void addDefaultAdminAssertion(ResourceContext ctx, String domainName, Policy adminPolicy,\n            String auditRef, String caller)", "full_signature": " void addDefaultAdminAssertion(ResourceContext ctx, String domainName, Policy adminPolicy,\n            String auditRef, String caller)", "class_method_signature": "ZMSImpl.addDefaultAdminAssertion(ResourceContext ctx, String domainName, Policy adminPolicy,\n            String auditRef, String caller)", "testcase": false, "constructor": false}, {"identifier": "removeAdminDenyAssertions", "parameters": "(ResourceContext ctx, final String domainName, List<Policy> policies,\n            List<Role> roles, Role adminRole, DefaultAdmins defaultAdmins, final String auditRef)", "modifiers": "", "return": "void", "signature": "void removeAdminDenyAssertions(ResourceContext ctx, final String domainName, List<Policy> policies,\n            List<Role> roles, Role adminRole, DefaultAdmins defaultAdmins, final String auditRef)", "full_signature": " void removeAdminDenyAssertions(ResourceContext ctx, final String domainName, List<Policy> policies,\n            List<Role> roles, Role adminRole, DefaultAdmins defaultAdmins, final String auditRef)", "class_method_signature": "ZMSImpl.removeAdminDenyAssertions(ResourceContext ctx, final String domainName, List<Policy> policies,\n            List<Role> roles, Role adminRole, DefaultAdmins defaultAdmins, final String auditRef)", "testcase": false, "constructor": false}, {"identifier": "removeAdminMembers", "parameters": "(ResourceContext ctx, String domainName, List<Role> roles,\n            String assertionRole, DefaultAdmins defaultAdmins, String auditRef, String caller)", "modifiers": "", "return": "void", "signature": "void removeAdminMembers(ResourceContext ctx, String domainName, List<Role> roles,\n            String assertionRole, DefaultAdmins defaultAdmins, String auditRef, String caller)", "full_signature": " void removeAdminMembers(ResourceContext ctx, String domainName, List<Role> roles,\n            String assertionRole, DefaultAdmins defaultAdmins, String auditRef, String caller)", "class_method_signature": "ZMSImpl.removeAdminMembers(ResourceContext ctx, String domainName, List<Role> roles,\n            String assertionRole, DefaultAdmins defaultAdmins, String auditRef, String caller)", "testcase": false, "constructor": false}, {"identifier": "addDefaultAdminMembers", "parameters": "(ResourceContext ctx, String domainName, Role adminRole,\n            DefaultAdmins defaultAdmins, String auditRef, String caller)", "modifiers": "", "return": "void", "signature": "void addDefaultAdminMembers(ResourceContext ctx, String domainName, Role adminRole,\n            DefaultAdmins defaultAdmins, String auditRef, String caller)", "full_signature": " void addDefaultAdminMembers(ResourceContext ctx, String domainName, Role adminRole,\n            DefaultAdmins defaultAdmins, String auditRef, String caller)", "class_method_signature": "ZMSImpl.addDefaultAdminMembers(ResourceContext ctx, String domainName, Role adminRole,\n            DefaultAdmins defaultAdmins, String auditRef, String caller)", "testcase": false, "constructor": false}, {"identifier": "getServicePrincipal", "parameters": "(ResourceContext ctx)", "modifiers": "public", "return": "ServicePrincipal", "signature": "ServicePrincipal getServicePrincipal(ResourceContext ctx)", "full_signature": "public ServicePrincipal getServicePrincipal(ResourceContext ctx)", "class_method_signature": "ZMSImpl.getServicePrincipal(ResourceContext ctx)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizedServiceOperations", "parameters": "(final String authorizedService, final String operationName)", "modifiers": "", "return": "ArrayList<AllowedOperation>", "signature": "ArrayList<AllowedOperation> getAuthorizedServiceOperations(final String authorizedService, final String operationName)", "full_signature": " ArrayList<AllowedOperation> getAuthorizedServiceOperations(final String authorizedService, final String operationName)", "class_method_signature": "ZMSImpl.getAuthorizedServiceOperations(final String authorizedService, final String operationName)", "testcase": false, "constructor": false}, {"identifier": "verifyAuthorizedServiceOperation", "parameters": "(final String authorizedService, final String operationName)", "modifiers": "", "return": "void", "signature": "void verifyAuthorizedServiceOperation(final String authorizedService, final String operationName)", "full_signature": " void verifyAuthorizedServiceOperation(final String authorizedService, final String operationName)", "class_method_signature": "ZMSImpl.verifyAuthorizedServiceOperation(final String authorizedService, final String operationName)", "testcase": false, "constructor": false}, {"identifier": "verifyAuthorizedServiceRoleOperation", "parameters": "(final String authorizedService, final String operationName,\n            final String roleName)", "modifiers": "", "return": "void", "signature": "void verifyAuthorizedServiceRoleOperation(final String authorizedService, final String operationName,\n            final String roleName)", "full_signature": " void verifyAuthorizedServiceRoleOperation(final String authorizedService, final String operationName,\n            final String roleName)", "class_method_signature": "ZMSImpl.verifyAuthorizedServiceRoleOperation(final String authorizedService, final String operationName,\n            final String roleName)", "testcase": false, "constructor": false}, {"identifier": "verifyAuthorizedServiceGroupOperation", "parameters": "(final String authorizedService, final String operationName,\n                                              final String groupName)", "modifiers": "", "return": "void", "signature": "void verifyAuthorizedServiceGroupOperation(final String authorizedService, final String operationName,\n                                              final String groupName)", "full_signature": " void verifyAuthorizedServiceGroupOperation(final String authorizedService, final String operationName,\n                                              final String groupName)", "class_method_signature": "ZMSImpl.verifyAuthorizedServiceGroupOperation(final String authorizedService, final String operationName,\n                                              final String groupName)", "testcase": false, "constructor": false}, {"identifier": "verifyAuthorizedServiceOperation", "parameters": "(final String authorizedService, final String operationName,\n            final String opItemType, final String opItemVal)", "modifiers": "", "return": "void", "signature": "void verifyAuthorizedServiceOperation(final String authorizedService, final String operationName,\n            final String opItemType, final String opItemVal)", "full_signature": " void verifyAuthorizedServiceOperation(final String authorizedService, final String operationName,\n            final String opItemType, final String opItemVal)", "class_method_signature": "ZMSImpl.verifyAuthorizedServiceOperation(final String authorizedService, final String operationName,\n            final String opItemType, final String opItemVal)", "testcase": false, "constructor": false}, {"identifier": "getResourceAccessList", "parameters": "(ResourceContext ctx, String principal,\n            String action)", "modifiers": "@Override public", "return": "ResourceAccessList", "signature": "ResourceAccessList getResourceAccessList(ResourceContext ctx, String principal,\n            String action)", "full_signature": "@Override public ResourceAccessList getResourceAccessList(ResourceContext ctx, String principal,\n            String action)", "class_method_signature": "ZMSImpl.getResourceAccessList(ResourceContext ctx, String principal,\n            String action)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(ResourceContext ctx)", "modifiers": "@Override public", "return": "Status", "signature": "Status getStatus(ResourceContext ctx)", "full_signature": "@Override public Status getStatus(ResourceContext ctx)", "class_method_signature": "ZMSImpl.getStatus(ResourceContext ctx)", "testcase": false, "constructor": false}, {"identifier": "getPrincipalDomain", "parameters": "(ResourceContext ctx)", "modifiers": "", "return": "String", "signature": "String getPrincipalDomain(ResourceContext ctx)", "full_signature": " String getPrincipalDomain(ResourceContext ctx)", "class_method_signature": "ZMSImpl.getPrincipalDomain(ResourceContext ctx)", "testcase": false, "constructor": false}, {"identifier": "setRequestDomain", "parameters": "(ResourceContext ctx, String requestDomainName)", "modifiers": "", "return": "void", "signature": "void setRequestDomain(ResourceContext ctx, String requestDomainName)", "full_signature": " void setRequestDomain(ResourceContext ctx, String requestDomainName)", "class_method_signature": "ZMSImpl.setRequestDomain(ResourceContext ctx, String requestDomainName)", "testcase": false, "constructor": false}, {"identifier": "getRequestDomainName", "parameters": "(ResourceContext ctx)", "modifiers": "", "return": "String", "signature": "String getRequestDomainName(ResourceContext ctx)", "full_signature": " String getRequestDomainName(ResourceContext ctx)", "class_method_signature": "ZMSImpl.getRequestDomainName(ResourceContext ctx)", "testcase": false, "constructor": false}, {"identifier": "getTimerMetric", "parameters": "(ResourceContext ctx)", "modifiers": "", "return": "Object", "signature": "Object getTimerMetric(ResourceContext ctx)", "full_signature": " Object getTimerMetric(ResourceContext ctx)", "class_method_signature": "ZMSImpl.getTimerMetric(ResourceContext ctx)", "testcase": false, "constructor": false}, {"identifier": "logPrincipal", "parameters": "(ResourceContext ctx)", "modifiers": "", "return": "void", "signature": "void logPrincipal(ResourceContext ctx)", "full_signature": " void logPrincipal(ResourceContext ctx)", "class_method_signature": "ZMSImpl.logPrincipal(ResourceContext ctx)", "testcase": false, "constructor": false}, {"identifier": "newResourceContext", "parameters": "(HttpServletRequest request,\n                                              HttpServletResponse response,\n                                              String apiName)", "modifiers": "public", "return": "ResourceContext", "signature": "ResourceContext newResourceContext(HttpServletRequest request,\n                                              HttpServletResponse response,\n                                              String apiName)", "full_signature": "public ResourceContext newResourceContext(HttpServletRequest request,\n                                              HttpServletResponse response,\n                                              String apiName)", "class_method_signature": "ZMSImpl.newResourceContext(HttpServletRequest request,\n                                              HttpServletResponse response,\n                                              String apiName)", "testcase": false, "constructor": false}, {"identifier": "getRdlSchema", "parameters": "(ResourceContext context)", "modifiers": "@Override public", "return": "Schema", "signature": "Schema getRdlSchema(ResourceContext context)", "full_signature": "@Override public Schema getRdlSchema(ResourceContext context)", "class_method_signature": "ZMSImpl.getRdlSchema(ResourceContext context)", "testcase": false, "constructor": false}, {"identifier": "getServerHostName", "parameters": "()", "modifiers": "static", "return": "String", "signature": "String getServerHostName()", "full_signature": "static String getServerHostName()", "class_method_signature": "ZMSImpl.getServerHostName()", "testcase": false, "constructor": false}, {"identifier": "getAuthority", "parameters": "(String className)", "modifiers": "", "return": "Authority", "signature": "Authority getAuthority(String className)", "full_signature": " Authority getAuthority(String className)", "class_method_signature": "ZMSImpl.getAuthority(String className)", "testcase": false, "constructor": false}, {"identifier": "getRootDir", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getRootDir()", "full_signature": "public static String getRootDir()", "class_method_signature": "ZMSImpl.getRootDir()", "testcase": false, "constructor": false}, {"identifier": "isAllowedSystemMetaDelete", "parameters": "(Principal principal, final String reqDomain, final String attribute,\n            final String objectType)", "modifiers": "", "return": "boolean", "signature": "boolean isAllowedSystemMetaDelete(Principal principal, final String reqDomain, final String attribute,\n            final String objectType)", "full_signature": " boolean isAllowedSystemMetaDelete(Principal principal, final String reqDomain, final String attribute,\n            final String objectType)", "class_method_signature": "ZMSImpl.isAllowedSystemMetaDelete(Principal principal, final String reqDomain, final String attribute,\n            final String objectType)", "testcase": false, "constructor": false}, {"identifier": "putRoleSystemMeta", "parameters": "(ResourceContext ctx, String domainName, String roleName, String attribute,\n            String auditRef, RoleSystemMeta meta)", "modifiers": "@Override public", "return": "void", "signature": "void putRoleSystemMeta(ResourceContext ctx, String domainName, String roleName, String attribute,\n            String auditRef, RoleSystemMeta meta)", "full_signature": "@Override public void putRoleSystemMeta(ResourceContext ctx, String domainName, String roleName, String attribute,\n            String auditRef, RoleSystemMeta meta)", "class_method_signature": "ZMSImpl.putRoleSystemMeta(ResourceContext ctx, String domainName, String roleName, String attribute,\n            String auditRef, RoleSystemMeta meta)", "testcase": false, "constructor": false}, {"identifier": "putRoleMeta", "parameters": "(ResourceContext ctx, String domainName, String roleName, String auditRef, RoleMeta meta)", "modifiers": "@Override public", "return": "void", "signature": "void putRoleMeta(ResourceContext ctx, String domainName, String roleName, String auditRef, RoleMeta meta)", "full_signature": "@Override public void putRoleMeta(ResourceContext ctx, String domainName, String roleName, String auditRef, RoleMeta meta)", "class_method_signature": "ZMSImpl.putRoleMeta(ResourceContext ctx, String domainName, String roleName, String auditRef, RoleMeta meta)", "testcase": false, "constructor": false}, {"identifier": "validateGroupMemberAuthorityAttributes", "parameters": "(Role role, final String userAuthorityFilter,\n                                                final String userAuthorityExpiration, final String caller)", "modifiers": "", "return": "void", "signature": "void validateGroupMemberAuthorityAttributes(Role role, final String userAuthorityFilter,\n                                                final String userAuthorityExpiration, final String caller)", "full_signature": " void validateGroupMemberAuthorityAttributes(Role role, final String userAuthorityFilter,\n                                                final String userAuthorityExpiration, final String caller)", "class_method_signature": "ZMSImpl.validateGroupMemberAuthorityAttributes(Role role, final String userAuthorityFilter,\n                                                final String userAuthorityExpiration, final String caller)", "testcase": false, "constructor": false}, {"identifier": "getGroup", "parameters": "(final String groupFullName)", "modifiers": "", "return": "Group", "signature": "Group getGroup(final String groupFullName)", "full_signature": " Group getGroup(final String groupFullName)", "class_method_signature": "ZMSImpl.getGroup(final String groupFullName)", "testcase": false, "constructor": false}, {"identifier": "putMembershipDecision", "parameters": "(ResourceContext ctx, String domainName, String roleName,\n            String memberName, String auditRef, Membership membership)", "modifiers": "@Override public", "return": "void", "signature": "void putMembershipDecision(ResourceContext ctx, String domainName, String roleName,\n            String memberName, String auditRef, Membership membership)", "full_signature": "@Override public void putMembershipDecision(ResourceContext ctx, String domainName, String roleName,\n            String memberName, String auditRef, Membership membership)", "class_method_signature": "ZMSImpl.putMembershipDecision(ResourceContext ctx, String domainName, String roleName,\n            String memberName, String auditRef, Membership membership)", "testcase": false, "constructor": false}, {"identifier": "validatePutMembershipDecisionAuthorization", "parameters": "(final Principal principal, final AthenzDomain domain,\n            final Role role, final RoleMember roleMember)", "modifiers": "private", "return": "void", "signature": "void validatePutMembershipDecisionAuthorization(final Principal principal, final AthenzDomain domain,\n            final Role role, final RoleMember roleMember)", "full_signature": "private void validatePutMembershipDecisionAuthorization(final Principal principal, final AthenzDomain domain,\n            final Role role, final RoleMember roleMember)", "class_method_signature": "ZMSImpl.validatePutMembershipDecisionAuthorization(final Principal principal, final AthenzDomain domain,\n            final Role role, final RoleMember roleMember)", "testcase": false, "constructor": false}, {"identifier": "validatePutGroupMembershipDecisionAuthorization", "parameters": "(final Principal principal, final AthenzDomain domain,\n                                                                 final Group group, final GroupMember groupMember)", "modifiers": "private", "return": "void", "signature": "void validatePutGroupMembershipDecisionAuthorization(final Principal principal, final AthenzDomain domain,\n                                                                 final Group group, final GroupMember groupMember)", "full_signature": "private void validatePutGroupMembershipDecisionAuthorization(final Principal principal, final AthenzDomain domain,\n                                                                 final Group group, final GroupMember groupMember)", "class_method_signature": "ZMSImpl.validatePutGroupMembershipDecisionAuthorization(final Principal principal, final AthenzDomain domain,\n                                                                 final Group group, final GroupMember groupMember)", "testcase": false, "constructor": false}, {"identifier": "isAllowedAuditRoleMembershipApproval", "parameters": "(Principal principal, final AthenzDomain reqDomain)", "modifiers": "", "return": "boolean", "signature": "boolean isAllowedAuditRoleMembershipApproval(Principal principal, final AthenzDomain reqDomain)", "full_signature": " boolean isAllowedAuditRoleMembershipApproval(Principal principal, final AthenzDomain reqDomain)", "class_method_signature": "ZMSImpl.isAllowedAuditRoleMembershipApproval(Principal principal, final AthenzDomain reqDomain)", "testcase": false, "constructor": false}, {"identifier": "getRoleFromDomain", "parameters": "(final String roleName, AthenzDomain domain)", "modifiers": "", "return": "Role", "signature": "Role getRoleFromDomain(final String roleName, AthenzDomain domain)", "full_signature": " Role getRoleFromDomain(final String roleName, AthenzDomain domain)", "class_method_signature": "ZMSImpl.getRoleFromDomain(final String roleName, AthenzDomain domain)", "testcase": false, "constructor": false}, {"identifier": "getGroupFromDomain", "parameters": "(final String groupName, AthenzDomain domain)", "modifiers": "", "return": "Group", "signature": "Group getGroupFromDomain(final String groupName, AthenzDomain domain)", "full_signature": " Group getGroupFromDomain(final String groupName, AthenzDomain domain)", "class_method_signature": "ZMSImpl.getGroupFromDomain(final String groupName, AthenzDomain domain)", "testcase": false, "constructor": false}, {"identifier": "isAllowedPutMembershipAccess", "parameters": "(Principal principal, final AthenzDomain domain, final String roleName)", "modifiers": "", "return": "boolean", "signature": "boolean isAllowedPutMembershipAccess(Principal principal, final AthenzDomain domain, final String roleName)", "full_signature": " boolean isAllowedPutMembershipAccess(Principal principal, final AthenzDomain domain, final String roleName)", "class_method_signature": "ZMSImpl.isAllowedPutMembershipAccess(Principal principal, final AthenzDomain domain, final String roleName)", "testcase": false, "constructor": false}, {"identifier": "isAllowedPutMembershipWithoutApproval", "parameters": "(Principal principal, final AthenzDomain reqDomain, final Role role)", "modifiers": "", "return": "boolean", "signature": "boolean isAllowedPutMembershipWithoutApproval(Principal principal, final AthenzDomain reqDomain, final Role role)", "full_signature": " boolean isAllowedPutMembershipWithoutApproval(Principal principal, final AthenzDomain reqDomain, final Role role)", "class_method_signature": "ZMSImpl.isAllowedPutMembershipWithoutApproval(Principal principal, final AthenzDomain reqDomain, final Role role)", "testcase": false, "constructor": false}, {"identifier": "isAllowedPutMembership", "parameters": "(Principal principal, final AthenzDomain domain, final Role role,\n            final RoleMember member)", "modifiers": "", "return": "boolean", "signature": "boolean isAllowedPutMembership(Principal principal, final AthenzDomain domain, final Role role,\n            final RoleMember member)", "full_signature": " boolean isAllowedPutMembership(Principal principal, final AthenzDomain domain, final Role role,\n            final RoleMember member)", "class_method_signature": "ZMSImpl.isAllowedPutMembership(Principal principal, final AthenzDomain domain, final Role role,\n            final RoleMember member)", "testcase": false, "constructor": false}, {"identifier": "isAllowedDeletePendingMembership", "parameters": "(Principal principal, final String domainName,\n            final String roleName, final String memberName)", "modifiers": "", "return": "boolean", "signature": "boolean isAllowedDeletePendingMembership(Principal principal, final String domainName,\n            final String roleName, final String memberName)", "full_signature": " boolean isAllowedDeletePendingMembership(Principal principal, final String domainName,\n            final String roleName, final String memberName)", "class_method_signature": "ZMSImpl.isAllowedDeletePendingMembership(Principal principal, final String domainName,\n            final String roleName, final String memberName)", "testcase": false, "constructor": false}, {"identifier": "getPendingDomainRoleMembersList", "parameters": "(ResourceContext ctx, String principal)", "modifiers": "@Override public", "return": "DomainRoleMembership", "signature": "DomainRoleMembership getPendingDomainRoleMembersList(ResourceContext ctx, String principal)", "full_signature": "@Override public DomainRoleMembership getPendingDomainRoleMembersList(ResourceContext ctx, String principal)", "class_method_signature": "ZMSImpl.getPendingDomainRoleMembersList(ResourceContext ctx, String principal)", "testcase": false, "constructor": false}, {"identifier": "putRoleReview", "parameters": "(ResourceContext ctx, String domainName, String roleName, String auditRef, Role role)", "modifiers": "@Override public", "return": "void", "signature": "void putRoleReview(ResourceContext ctx, String domainName, String roleName, String auditRef, Role role)", "full_signature": "@Override public void putRoleReview(ResourceContext ctx, String domainName, String roleName, String auditRef, Role role)", "class_method_signature": "ZMSImpl.putRoleReview(ResourceContext ctx, String domainName, String roleName, String auditRef, Role role)", "testcase": false, "constructor": false}, {"identifier": "setupGroupList", "parameters": "(AthenzDomain domain, Boolean members)", "modifiers": "", "return": "List<Group>", "signature": "List<Group> setupGroupList(AthenzDomain domain, Boolean members)", "full_signature": " List<Group> setupGroupList(AthenzDomain domain, Boolean members)", "class_method_signature": "ZMSImpl.setupGroupList(AthenzDomain domain, Boolean members)", "testcase": false, "constructor": false}, {"identifier": "getGroups", "parameters": "(ResourceContext ctx, String domainName, Boolean members)", "modifiers": "@Override public", "return": "Groups", "signature": "Groups getGroups(ResourceContext ctx, String domainName, Boolean members)", "full_signature": "@Override public Groups getGroups(ResourceContext ctx, String domainName, Boolean members)", "class_method_signature": "ZMSImpl.getGroups(ResourceContext ctx, String domainName, Boolean members)", "testcase": false, "constructor": false}, {"identifier": "getGroup", "parameters": "(ResourceContext ctx, String domainName, String groupName, Boolean auditLog, Boolean pending)", "modifiers": "@Override public", "return": "Group", "signature": "Group getGroup(ResourceContext ctx, String domainName, String groupName, Boolean auditLog, Boolean pending)", "full_signature": "@Override public Group getGroup(ResourceContext ctx, String domainName, String groupName, Boolean auditLog, Boolean pending)", "class_method_signature": "ZMSImpl.getGroup(ResourceContext ctx, String domainName, String groupName, Boolean auditLog, Boolean pending)", "testcase": false, "constructor": false}, {"identifier": "isConsistentGroupName", "parameters": "(final String domainName, final String groupName, Group group)", "modifiers": "", "return": "boolean", "signature": "boolean isConsistentGroupName(final String domainName, final String groupName, Group group)", "full_signature": " boolean isConsistentGroupName(final String domainName, final String groupName, Group group)", "class_method_signature": "ZMSImpl.isConsistentGroupName(final String domainName, final String groupName, Group group)", "testcase": false, "constructor": false}, {"identifier": "addNormalizedGroupMember", "parameters": "(Map<String, GroupMember> normalizedMembers, GroupMember member)", "modifiers": "private", "return": "boolean", "signature": "boolean addNormalizedGroupMember(Map<String, GroupMember> normalizedMembers, GroupMember member)", "full_signature": "private boolean addNormalizedGroupMember(Map<String, GroupMember> normalizedMembers, GroupMember member)", "class_method_signature": "ZMSImpl.addNormalizedGroupMember(Map<String, GroupMember> normalizedMembers, GroupMember member)", "testcase": false, "constructor": false}, {"identifier": "normalizeGroupMembers", "parameters": "(Group group)", "modifiers": "", "return": "void", "signature": "void normalizeGroupMembers(Group group)", "full_signature": " void normalizeGroupMembers(Group group)", "class_method_signature": "ZMSImpl.normalizeGroupMembers(Group group)", "testcase": false, "constructor": false}, {"identifier": "validateGroupMemberPrincipals", "parameters": "(final Group group, final String domainUserAuthorityFilter, final String caller)", "modifiers": "", "return": "void", "signature": "void validateGroupMemberPrincipals(final Group group, final String domainUserAuthorityFilter, final String caller)", "full_signature": " void validateGroupMemberPrincipals(final Group group, final String domainUserAuthorityFilter, final String caller)", "class_method_signature": "ZMSImpl.validateGroupMemberPrincipals(final Group group, final String domainUserAuthorityFilter, final String caller)", "testcase": false, "constructor": false}, {"identifier": "updateGroupMemberUserAuthorityExpiry", "parameters": "(final Group group, final String caller)", "modifiers": "", "return": "void", "signature": "void updateGroupMemberUserAuthorityExpiry(final Group group, final String caller)", "full_signature": " void updateGroupMemberUserAuthorityExpiry(final Group group, final String caller)", "class_method_signature": "ZMSImpl.updateGroupMemberUserAuthorityExpiry(final Group group, final String caller)", "testcase": false, "constructor": false}, {"identifier": "putGroup", "parameters": "(ResourceContext ctx, String domainName, String groupName, String auditRef, Group group)", "modifiers": "@Override public", "return": "void", "signature": "void putGroup(ResourceContext ctx, String domainName, String groupName, String auditRef, Group group)", "full_signature": "@Override public void putGroup(ResourceContext ctx, String domainName, String groupName, String auditRef, Group group)", "class_method_signature": "ZMSImpl.putGroup(ResourceContext ctx, String domainName, String groupName, String auditRef, Group group)", "testcase": false, "constructor": false}, {"identifier": "deleteGroup", "parameters": "(ResourceContext ctx, String domainName, String groupName, String auditRef)", "modifiers": "@Override public", "return": "void", "signature": "void deleteGroup(ResourceContext ctx, String domainName, String groupName, String auditRef)", "full_signature": "@Override public void deleteGroup(ResourceContext ctx, String domainName, String groupName, String auditRef)", "class_method_signature": "ZMSImpl.deleteGroup(ResourceContext ctx, String domainName, String groupName, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "groupMemberConsistencyCheck", "parameters": "(final String domainName, final String groupResourceName, boolean skipOwnerDomain, final String caller)", "modifiers": "", "return": "void", "signature": "void groupMemberConsistencyCheck(final String domainName, final String groupResourceName, boolean skipOwnerDomain, final String caller)", "full_signature": " void groupMemberConsistencyCheck(final String domainName, final String groupResourceName, boolean skipOwnerDomain, final String caller)", "class_method_signature": "ZMSImpl.groupMemberConsistencyCheck(final String domainName, final String groupResourceName, boolean skipOwnerDomain, final String caller)", "testcase": false, "constructor": false}, {"identifier": "getGroupMembership", "parameters": "(ResourceContext ctx, String domainName, String groupName, String memberName, String expiration)", "modifiers": "@Override public", "return": "GroupMembership", "signature": "GroupMembership getGroupMembership(ResourceContext ctx, String domainName, String groupName, String memberName, String expiration)", "full_signature": "@Override public GroupMembership getGroupMembership(ResourceContext ctx, String domainName, String groupName, String memberName, String expiration)", "class_method_signature": "ZMSImpl.getGroupMembership(ResourceContext ctx, String domainName, String groupName, String memberName, String expiration)", "testcase": false, "constructor": false}, {"identifier": "setGroupMemberExpiration", "parameters": "(final Group group, final GroupMember groupMember, final String caller)", "modifiers": "", "return": "void", "signature": "void setGroupMemberExpiration(final Group group, final GroupMember groupMember, final String caller)", "full_signature": " void setGroupMemberExpiration(final Group group, final GroupMember groupMember, final String caller)", "class_method_signature": "ZMSImpl.setGroupMemberExpiration(final Group group, final GroupMember groupMember, final String caller)", "testcase": false, "constructor": false}, {"identifier": "isAllowedPutGroupMembership", "parameters": "(Principal principal, final AthenzDomain domain, final Group group,\n                                   final GroupMember groupMember)", "modifiers": "", "return": "boolean", "signature": "boolean isAllowedPutGroupMembership(Principal principal, final AthenzDomain domain, final Group group,\n                                   final GroupMember groupMember)", "full_signature": " boolean isAllowedPutGroupMembership(Principal principal, final AthenzDomain domain, final Group group,\n                                   final GroupMember groupMember)", "class_method_signature": "ZMSImpl.isAllowedPutGroupMembership(Principal principal, final AthenzDomain domain, final Group group,\n                                   final GroupMember groupMember)", "testcase": false, "constructor": false}, {"identifier": "putGroupMembership", "parameters": "(ResourceContext ctx, String domainName, String groupName, String memberName, String auditRef, GroupMembership membership)", "modifiers": "@Override public", "return": "void", "signature": "void putGroupMembership(ResourceContext ctx, String domainName, String groupName, String memberName, String auditRef, GroupMembership membership)", "full_signature": "@Override public void putGroupMembership(ResourceContext ctx, String domainName, String groupName, String memberName, String auditRef, GroupMembership membership)", "class_method_signature": "ZMSImpl.putGroupMembership(ResourceContext ctx, String domainName, String groupName, String memberName, String auditRef, GroupMembership membership)", "testcase": false, "constructor": false}, {"identifier": "deleteGroupMembership", "parameters": "(ResourceContext ctx, String domainName, String groupName, String memberName, String auditRef)", "modifiers": "@Override public", "return": "void", "signature": "void deleteGroupMembership(ResourceContext ctx, String domainName, String groupName, String memberName, String auditRef)", "full_signature": "@Override public void deleteGroupMembership(ResourceContext ctx, String domainName, String groupName, String memberName, String auditRef)", "class_method_signature": "ZMSImpl.deleteGroupMembership(ResourceContext ctx, String domainName, String groupName, String memberName, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "isAllowedDeletePendingGroupMembership", "parameters": "(Principal principal, final String domainName,\n                                                  final String groupName, final String memberName)", "modifiers": "", "return": "boolean", "signature": "boolean isAllowedDeletePendingGroupMembership(Principal principal, final String domainName,\n                                                  final String groupName, final String memberName)", "full_signature": " boolean isAllowedDeletePendingGroupMembership(Principal principal, final String domainName,\n                                                  final String groupName, final String memberName)", "class_method_signature": "ZMSImpl.isAllowedDeletePendingGroupMembership(Principal principal, final String domainName,\n                                                  final String groupName, final String memberName)", "testcase": false, "constructor": false}, {"identifier": "deletePendingGroupMembership", "parameters": "(ResourceContext ctx, String domainName, String groupName, String memberName, String auditRef)", "modifiers": "@Override public", "return": "void", "signature": "void deletePendingGroupMembership(ResourceContext ctx, String domainName, String groupName, String memberName, String auditRef)", "full_signature": "@Override public void deletePendingGroupMembership(ResourceContext ctx, String domainName, String groupName, String memberName, String auditRef)", "class_method_signature": "ZMSImpl.deletePendingGroupMembership(ResourceContext ctx, String domainName, String groupName, String memberName, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "getPrincipalGroups", "parameters": "(ResourceContext ctx, String principal, String domainName)", "modifiers": "@Override public", "return": "DomainGroupMember", "signature": "DomainGroupMember getPrincipalGroups(ResourceContext ctx, String principal, String domainName)", "full_signature": "@Override public DomainGroupMember getPrincipalGroups(ResourceContext ctx, String principal, String domainName)", "class_method_signature": "ZMSImpl.getPrincipalGroups(ResourceContext ctx, String principal, String domainName)", "testcase": false, "constructor": false}, {"identifier": "putGroupSystemMeta", "parameters": "(ResourceContext ctx, String domainName, String groupName, String attribute,\n                                   String auditRef, GroupSystemMeta meta)", "modifiers": "@Override public", "return": "void", "signature": "void putGroupSystemMeta(ResourceContext ctx, String domainName, String groupName, String attribute,\n                                   String auditRef, GroupSystemMeta meta)", "full_signature": "@Override public void putGroupSystemMeta(ResourceContext ctx, String domainName, String groupName, String attribute,\n                                   String auditRef, GroupSystemMeta meta)", "class_method_signature": "ZMSImpl.putGroupSystemMeta(ResourceContext ctx, String domainName, String groupName, String attribute,\n                                   String auditRef, GroupSystemMeta meta)", "testcase": false, "constructor": false}, {"identifier": "putGroupMeta", "parameters": "(ResourceContext ctx, String domainName, String groupName, String auditRef, GroupMeta meta)", "modifiers": "@Override public", "return": "void", "signature": "void putGroupMeta(ResourceContext ctx, String domainName, String groupName, String auditRef, GroupMeta meta)", "full_signature": "@Override public void putGroupMeta(ResourceContext ctx, String domainName, String groupName, String auditRef, GroupMeta meta)", "class_method_signature": "ZMSImpl.putGroupMeta(ResourceContext ctx, String domainName, String groupName, String auditRef, GroupMeta meta)", "testcase": false, "constructor": false}, {"identifier": "putGroupMembershipDecision", "parameters": "(ResourceContext ctx, String domainName, String groupName, String memberName,\n                                           String auditRef, GroupMembership membership)", "modifiers": "@Override public", "return": "void", "signature": "void putGroupMembershipDecision(ResourceContext ctx, String domainName, String groupName, String memberName,\n                                           String auditRef, GroupMembership membership)", "full_signature": "@Override public void putGroupMembershipDecision(ResourceContext ctx, String domainName, String groupName, String memberName,\n                                           String auditRef, GroupMembership membership)", "class_method_signature": "ZMSImpl.putGroupMembershipDecision(ResourceContext ctx, String domainName, String groupName, String memberName,\n                                           String auditRef, GroupMembership membership)", "testcase": false, "constructor": false}, {"identifier": "putGroupReview", "parameters": "(ResourceContext ctx, String domainName, String groupName, String auditRef, Group group)", "modifiers": "@Override public", "return": "void", "signature": "void putGroupReview(ResourceContext ctx, String domainName, String groupName, String auditRef, Group group)", "full_signature": "@Override public void putGroupReview(ResourceContext ctx, String domainName, String groupName, String auditRef, Group group)", "class_method_signature": "ZMSImpl.putGroupReview(ResourceContext ctx, String domainName, String groupName, String auditRef, Group group)", "testcase": false, "constructor": false}, {"identifier": "getPendingDomainGroupMembersList", "parameters": "(ResourceContext ctx, String principal)", "modifiers": "@Override public", "return": "DomainGroupMembership", "signature": "DomainGroupMembership getPendingDomainGroupMembersList(ResourceContext ctx, String principal)", "full_signature": "@Override public DomainGroupMembership getPendingDomainGroupMembersList(ResourceContext ctx, String principal)", "class_method_signature": "ZMSImpl.getPendingDomainGroupMembersList(ResourceContext ctx, String principal)", "testcase": false, "constructor": false}, {"identifier": "validateUserAuthorityFilterAttribute", "parameters": "(final String authorityFilter, final String caller)", "modifiers": "", "return": "void", "signature": "void validateUserAuthorityFilterAttribute(final String authorityFilter, final String caller)", "full_signature": " void validateUserAuthorityFilterAttribute(final String authorityFilter, final String caller)", "class_method_signature": "ZMSImpl.validateUserAuthorityFilterAttribute(final String authorityFilter, final String caller)", "testcase": false, "constructor": false}, {"identifier": "validateUserAuthorityDateAttribute", "parameters": "(final String authorityExpiration, final String caller)", "modifiers": "", "return": "void", "signature": "void validateUserAuthorityDateAttribute(final String authorityExpiration, final String caller)", "full_signature": " void validateUserAuthorityDateAttribute(final String authorityExpiration, final String caller)", "class_method_signature": "ZMSImpl.validateUserAuthorityDateAttribute(final String authorityExpiration, final String caller)", "testcase": false, "constructor": false}, {"identifier": "validateUserAuthorityAttributes", "parameters": "(final String authorityFilter, final String authorityExpiration, final String caller)", "modifiers": "", "return": "void", "signature": "void validateUserAuthorityAttributes(final String authorityFilter, final String authorityExpiration, final String caller)", "full_signature": " void validateUserAuthorityAttributes(final String authorityFilter, final String authorityExpiration, final String caller)", "class_method_signature": "ZMSImpl.validateUserAuthorityAttributes(final String authorityFilter, final String authorityExpiration, final String caller)", "testcase": false, "constructor": false}, {"identifier": "recordMetrics", "parameters": "(ResourceContext ctx, int httpStatus)", "modifiers": "public", "return": "void", "signature": "void recordMetrics(ResourceContext ctx, int httpStatus)", "full_signature": "public void recordMetrics(ResourceContext ctx, int httpStatus)", "class_method_signature": "ZMSImpl.recordMetrics(ResourceContext ctx, int httpStatus)", "testcase": false, "constructor": false}], "file": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java"}, "focal_method": {"identifier": "getDomainDataCheck", "parameters": "(ResourceContext ctx, String domainName)", "modifiers": "public", "return": "DomainDataCheck", "body": "public DomainDataCheck getDomainDataCheck(ResourceContext ctx, String domainName) {\n\n        final String caller = ctx.getApiName();\n        logPrincipal(ctx);\n\n        validateRequest(ctx.request(), caller);\n        validate(domainName, TYPE_DOMAIN_NAME, caller);\n        \n        domainName = domainName.toLowerCase();\n        setRequestDomain(ctx, domainName);\n        \n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"getDomainDataCheck: domain=\" + domainName);\n        }\n\n        AthenzDomain domain = getAthenzDomain(domainName, false);\n        if (domain == null) {\n            throw ZMSUtils.notFoundError(\"getDomainDataCheck: Domain not found: '\" + domainName + \"'\", caller);\n        }\n\n        // build set of roles\n        // iterate them to look for trust roles - in case this is a provider domain\n        \n        Set<String> roleSet      = new HashSet<>();\n        Set<String> trustRoleSet = new HashSet<>();\n\n        // map per trust/tenant domain that contains the trust roles\n        \n        Map<String, Set<String>> trustRoleMap = new HashMap<>();\n        for (Role role : domain.getRoles()) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"getDomainDataCheck: processing role - \" + role.getName());\n            }\n            roleSet.add(role.getName());\n            String roleName = ZMSUtils.removeDomainPrefix(role.getName(), domainName, ROLE_PREFIX);\n            String trustDomain = role.getTrust();\n            if (trustDomain != null) {\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"trust role for domain: \" + trustDomain);\n                }\n                trustRoleSet.add(trustDomain);\n                Set<String> tset = trustRoleMap.computeIfAbsent(trustDomain, k -> new HashSet<>());\n                tset.add(roleName);\n            }\n        }\n\n        // look for dangling roles and policies\n        //\n        int assertionCount = 0;\n        int roleWildcardCount = 0;\n        Set<String> usedRoleSet = new HashSet<>(); // keep track of roles used by policies\n        Set<String> providerSet = new HashSet<>(); // keep track of providers from assume_role policies\n\n        // assume_role resources are placed into the set per provider service domain\n        \n        Map<String, Set<String>> svcRoleMap = new HashMap<>();\n        List<DanglingPolicy> danglingPolicies = new ArrayList<>();\n        List<Policy> policies = domain.getPolicies();\n        for (Policy policy : policies) {\n            String pname = ZMSUtils.removeDomainPrefix(policy.getName(), domainName, POLICY_PREFIX);\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"getDomainDataCheck: processing policy=\" + pname + \" in domain=\" + domainName);\n            }\n\n            List<Assertion> assertions = policy.getAssertions();\n            if (assertions == null) {\n                continue;\n            }\n            \n            for (Assertion assertion : assertions) {\n                assertionCount++;\n                if (ZMSConsts.ACTION_ASSUME_ROLE.equalsIgnoreCase(assertion.getAction())) {\n                    // get provider domain+service name and add to set of providers\n                    // Note there may be a resource appended - to be dealt with later\n                    // ex: testgetdomaindatacheck:policy.tenancy.testgetdomaindatacheckprovider.storage.reader\n                    // ex: testgetdomaindatacheck:policy.tenancy.testgetdomaindatacheckprovider.sub.storage.res_group.ravers.reader\n                    // index after \"tenancy.\" and index of last dot\n                    int index = pname.indexOf(\"tenancy.\");\n                    if (index == -1) {\n                        continue;\n                    }\n                    int lindex = pname.lastIndexOf('.');\n                    if (lindex == -1) {\n                        continue;\n                    }\n                    String provSvcDomain = pname.substring(index + \"tenancy.\".length(), lindex);\n                    providerSet.add(provSvcDomain);\n\n                    // lets collect the resource field that is name of role in provider\n                    // ex: testgetdomaindatacheckprovider.sub:role.storage.tenant.testgetdomaindatacheck.reader\n                    // ex: testgetdomaindatacheckprovider.sub:role.storage.tenant.testgetdomaindatacheck.res_group.ravers.reader\n                    String rsrc = assertion.getResource();\n                    Set<String> rset = svcRoleMap.computeIfAbsent(provSvcDomain, k -> new HashSet<>());\n                    rset.add(rsrc);\n                }\n\n                String roleName = assertion.getRole();\n\n                // check for wildcard role\n                if (roleName.lastIndexOf('*') != -1) {\n                    roleWildcardCount++;\n                    // make sure there is at least 1 role that can match\n                    // this wildcard - else its a dangling policy\n                    String rolePattern = StringUtils.patternFromGlob(roleName);\n                    boolean wildCardMatch = false;\n                    for (String role: roleSet) {\n                        if (role.matches(rolePattern)) {\n                            wildCardMatch = true;\n                            break;\n                        }\n                    }\n                    if (!wildCardMatch) { // dangling policy\n                        DanglingPolicy dp = new DanglingPolicy();\n                        // we need to remove the domain:role. and domain:policy prefixes\n                        // according to RDL definitions for role and policy names\n                        dp.setRoleName(ZMSUtils.removeDomainPrefix(roleName, domainName, ROLE_PREFIX));\n                        dp.setPolicyName(ZMSUtils.removeDomainPrefix(pname, domainName, POLICY_PREFIX));\n                        danglingPolicies.add(dp);\n                    }\n                } else if (roleSet.contains(roleName)) {\n                    usedRoleSet.add(roleName);\n                } else { // dangling policy\n                    DanglingPolicy dp = new DanglingPolicy();\n                    // we need to remove the domain:role. and domain:policy prefixes\n                    // according to RDL definitions for role and policy names\n                    dp.setRoleName(ZMSUtils.removeDomainPrefix(roleName, domainName, ROLE_PREFIX));\n                    dp.setPolicyName(ZMSUtils.removeDomainPrefix(pname, domainName, POLICY_PREFIX));\n                    danglingPolicies.add(dp);\n                }\n            }\n        }\n\n        DomainDataCheck ddc = new DomainDataCheck();\n        ddc.setPolicyCount(policies.size());\n        ddc.setAssertionCount(assertionCount);\n        ddc.setRoleWildCardCount(roleWildcardCount);\n        if (!danglingPolicies.isEmpty()) {\n            ddc.setDanglingPolicies(danglingPolicies);\n        }\n\n        if (roleSet.size() != usedRoleSet.size()) {\n            // oh oh, some roles are unused - need to subtract the usedRoleSet\n            // from roleSet - the leftovers are the unused roles\n            roleSet.removeAll(usedRoleSet);\n            // we need to remove the domain:role. prefix according to\n            // RDL definition for dangling role names\n            List<String> danglingRoleList = new ArrayList<>();\n            for (String roleName : roleSet) {\n                danglingRoleList.add(ZMSUtils.removeDomainPrefix(roleName, domainName, ROLE_PREFIX));\n            }\n            ddc.setDanglingRoles(danglingRoleList);\n        }\n\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"getDomainDataCheck: domain=\" + domainName +\n                \" policy-count=\" + policies.size() + \" assertion-count=\" +\n                assertionCount + \" wildcard-count==\" + roleWildcardCount +\n                \" dangling-policies=\" + danglingPolicies.size() +\n                \" dangling-roles=\" + roleSet.size());\n        }\n\n        // Tenant Domain Check: does each provider fully support this tenant?\n        // collect Service names (domain.service) for domains that don't contain\n        // trust role\n        List<String> provsWithoutTrust = new ArrayList<>();\n        for (String provSvc : providerSet) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"getDomainDataCheck: domain=\" + domainName +\n                    \" provider-service=\" + provSvc);\n            }\n\n            // 2 cases to resolve, one with resource group, one without\n            // ex: iaas.stuff.storage.read\n            // ex: iaas.stuff.storage.res_group.my_resource_group.read\n            \n            int idx = provSvc.indexOf(\".res_group.\");\n            String provSvcDomain;\n            if (idx == -1) {\n                provSvcDomain = providerServiceDomain(provSvc);\n            } else {\n                provSvcDomain = providerServiceDomain(provSvc.substring(0, idx));\n            }\n            \n            AthenzDomain providerDomain = getAthenzDomain(provSvcDomain, true);\n            Set<String> rset = svcRoleMap.get(provSvc);\n            if (rset == null || rset.isEmpty() || providerDomain == null) {\n                provsWithoutTrust.add(provSvc);\n                continue;\n            }\n            \n            // find trust role in the provider that contains the tenant domain\n            int foundTrust = 0;\n            for (Role role : providerDomain.getRoles()) {\n                String trustDomain = role.getTrust();\n                if (trustDomain != null) {\n                    if (domainName.equals(trustDomain)) {\n                        // is this role a match for an assume role in the tenant\n                        // look for the role in the role set for this service\n                        if (rset.contains(role.getName())) {\n                            foundTrust++;\n                        }\n                    }\n                }\n            }\n            if (foundTrust != rset.size()) {\n                provsWithoutTrust.add(provSvc);\n            }\n        }\n        if (!provsWithoutTrust.isEmpty()) {\n            ddc.setProvidersWithoutTrust(provsWithoutTrust);\n        }\n\n        // Provider Domain Check: does each tenant have all the assume_role\n        // assertions to match each trust role.\n\n        // tenantsWithoutProv: names of Tenant domains that don't contain assume\n        // role assertions if this is a provider domain\n        List<String> tenantsWithoutProv = new ArrayList<>();\n\n        // tenantDomMap: optimize reading tenant domains once already read\n        // This is optimizing for Providers with lots of tenants.\n        Map<String, AthenzDomain> tenantDomMap = new HashMap<>();\n        for (String trustRole: trustRoleSet) {\n            \n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"getDomainDataCheck: processing trust role: \" + trustRole);\n            }\n            \n            AthenzDomain tenantDomain = tenantDomMap.get(trustRole);\n            if (tenantDomain == null) {\n                tenantDomain = getAthenzDomain(trustRole, true);\n                if (tenantDomain == null) {\n                    tenantsWithoutProv.add(trustRole);\n                    continue;\n                } else {\n                    tenantDomMap.put(trustRole, tenantDomain);\n                }\n            }\n\n            // Get set of providers trust roles for trust/tenant domain.\n            Set<String> tset = trustRoleMap.get(trustRole);\n            if (tset == null || tset.isEmpty()) {\n                tenantsWithoutProv.add(trustRole);\n                continue;\n            }\n\n            int foundProviderCnt = 0;\n\n            // Check for assume_role containing the provider in the tenantDomain\n            for (Policy policy : tenantDomain.getPolicies()) {\n                List<Assertion> assertions = policy.getAssertions();\n                if (assertions == null) {\n                    continue;\n                }\n                for (Assertion assertion : assertions) {\n                    if (ZMSConsts.ACTION_ASSUME_ROLE.equalsIgnoreCase(assertion.getAction())) {\n                        String rsrc = assertion.getResource();\n                        // If the provider domain contains a role that matches\n                        // the tenant domain resource - then the tenant is supported\n                        if (roleSet.contains(rsrc)) {\n                            // HAVE: an assume_role with resource pointing at the provider\n                            foundProviderCnt++;\n                        }\n                    }\n                }\n            }\n            if (foundProviderCnt < tset.size()) {\n                // didn't find all required matching provider trust-role to assume_role-resource pairs\n                tenantsWithoutProv.add(trustRole);\n            }\n        }\n        if (!tenantsWithoutProv.isEmpty()) {\n            ddc.setTenantsWithoutAssumeRole(tenantsWithoutProv);\n        }\n\n        return ddc;\n    }", "signature": "DomainDataCheck getDomainDataCheck(ResourceContext ctx, String domainName)", "full_signature": "public DomainDataCheck getDomainDataCheck(ResourceContext ctx, String domainName)", "class_method_signature": "ZMSImpl.getDomainDataCheck(ResourceContext ctx, String domainName)", "testcase": false, "constructor": false, "invocations": ["getApiName", "logPrincipal", "validateRequest", "request", "validate", "toLowerCase", "setRequestDomain", "isDebugEnabled", "debug", "getAthenzDomain", "notFoundError", "getRoles", "isDebugEnabled", "debug", "getName", "add", "getName", "removeDomainPrefix", "getName", "getTrust", "isDebugEnabled", "debug", "add", "computeIfAbsent", "add", "getPolicies", "removeDomainPrefix", "getName", "isDebugEnabled", "debug", "getAssertions", "equalsIgnoreCase", "getAction", "indexOf", "lastIndexOf", "substring", "length", "add", "getResource", "computeIfAbsent", "add", "getRole", "lastIndexOf", "patternFromGlob", "matches", "setRoleName", "removeDomainPrefix", "setPolicyName", "removeDomainPrefix", "add", "contains", "add", "setRoleName", "removeDomainPrefix", "setPolicyName", "removeDomainPrefix", "add", "setPolicyCount", "size", "setAssertionCount", "setRoleWildCardCount", "isEmpty", "setDanglingPolicies", "size", "size", "removeAll", "add", "removeDomainPrefix", "setDanglingRoles", "isDebugEnabled", "debug", "size", "size", "size", "isDebugEnabled", "debug", "indexOf", "providerServiceDomain", "providerServiceDomain", "substring", "getAthenzDomain", "get", "isEmpty", "add", "getRoles", "getTrust", "equals", "contains", "getName", "size", "add", "isEmpty", "setProvidersWithoutTrust", "isDebugEnabled", "debug", "get", "getAthenzDomain", "add", "put", "get", "isEmpty", "add", "getPolicies", "getAssertions", "equalsIgnoreCase", "getAction", "getResource", "contains", "size", "add", "isEmpty", "setTenantsWithoutAssumeRole"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}