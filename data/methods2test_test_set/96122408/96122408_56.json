{"test_class": {"identifier": "BadgeClassExtensionServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CassandraOperation mockDBService;", "modifier": "private", "type": "CassandraOperation", "declarator": "mockDBService", "var_name": "mockDBService"}, {"original_string": "private BadgeClassExtensionService badgeClassExtensionServiceImpl;", "modifier": "private", "type": "BadgeClassExtensionService", "declarator": "badgeClassExtensionServiceImpl", "var_name": "badgeClassExtensionServiceImpl"}, {"original_string": "private static final String VALUE_BADGE_ID = \"java-se-8-programmer\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_BADGE_ID = \"java-se-8-programmer\"", "var_name": "VALUE_BADGE_ID"}, {"original_string": "private static final String VALUE_ISSUER_ID = \"oracle-university\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_ISSUER_ID = \"oracle-university\"", "var_name": "VALUE_ISSUER_ID"}, {"original_string": "private static final String VALUE_ROOT_ORG_ID = \"AP\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_ROOT_ORG_ID = \"AP\"", "var_name": "VALUE_ROOT_ORG_ID"}, {"original_string": "private static final String VALUE_TYPE = \"user\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_TYPE = \"user\"", "var_name": "VALUE_TYPE"}, {"original_string": "private static final String VALUE_SUBTYPE = \"award\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_SUBTYPE = \"award\"", "var_name": "VALUE_SUBTYPE"}, {"original_string": "private static final ArrayList<String> VALUE_ROLES_LIST =\n      new ArrayList<>(Arrays.asList(\"roleId1\"));", "modifier": "private static final", "type": "ArrayList<String>", "declarator": "VALUE_ROLES_LIST =\n      new ArrayList<>(Arrays.asList(\"roleId1\"))", "var_name": "VALUE_ROLES_LIST"}], "file": "actors/badge/src/test/java/org/sunbird/badge/service/impl/BadgeClassExtensionServiceImplTest.java"}, "test_case": {"identifier": "testGetSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetSuccess() {\n    Response response = new Response();\n    response.put(\n        JsonKey.RESPONSE, new ArrayList<Map<String, Object>>(Arrays.asList(new HashMap<>())));\n\n    PowerMockito.when(\n            mockDBService.getRecordById(Mockito.any(), Mockito.any(), Mockito.anyString()))\n        .thenReturn(response);\n\n    BadgeClassExtension badgeClassExtension = badgeClassExtensionServiceImpl.get(VALUE_BADGE_ID);\n\n    Assert.assertTrue(null != badgeClassExtension);\n  }", "signature": "void testGetSuccess()", "full_signature": "@Test public void testGetSuccess()", "class_method_signature": "BadgeClassExtensionServiceImplTest.testGetSuccess()", "testcase": true, "constructor": false, "invocations": ["put", "asList", "thenReturn", "when", "getRecordById", "any", "any", "anyString", "get", "assertTrue"]}, "focal_class": {"identifier": "BadgeClassExtensionServiceImpl", "superclass": "", "interfaces": "implements BadgeClassExtensionService", "fields": [{"original_string": "private CassandraOperation cassandraOperation;", "modifier": "private", "type": "CassandraOperation", "declarator": "cassandraOperation", "var_name": "cassandraOperation"}, {"original_string": "public static final String BADGE_CLASS_EXT_TABLE_NAME = \"badge_class_extension\";", "modifier": "public static final", "type": "String", "declarator": "BADGE_CLASS_EXT_TABLE_NAME = \"badge_class_extension\"", "var_name": "BADGE_CLASS_EXT_TABLE_NAME"}], "methods": [{"identifier": "BadgeClassExtensionServiceImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " BadgeClassExtensionServiceImpl()", "full_signature": "public  BadgeClassExtensionServiceImpl()", "class_method_signature": "BadgeClassExtensionServiceImpl.BadgeClassExtensionServiceImpl()", "testcase": false, "constructor": true}, {"identifier": "BadgeClassExtensionServiceImpl", "parameters": "(CassandraOperation cassandraOperation)", "modifiers": "public", "return": "", "signature": " BadgeClassExtensionServiceImpl(CassandraOperation cassandraOperation)", "full_signature": "public  BadgeClassExtensionServiceImpl(CassandraOperation cassandraOperation)", "class_method_signature": "BadgeClassExtensionServiceImpl.BadgeClassExtensionServiceImpl(CassandraOperation cassandraOperation)", "testcase": false, "constructor": true}, {"identifier": "save", "parameters": "(BadgeClassExtension badgeClassExtension)", "modifiers": "@Override public", "return": "void", "signature": "void save(BadgeClassExtension badgeClassExtension)", "full_signature": "@Override public void save(BadgeClassExtension badgeClassExtension)", "class_method_signature": "BadgeClassExtensionServiceImpl.save(BadgeClassExtension badgeClassExtension)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(\n      List<String> issuerList,\n      List<String> badgeList,\n      String rootOrgId,\n      String type,\n      String subtype,\n      List<String> roles)", "modifiers": "@Override public", "return": "List<BadgeClassExtension>", "signature": "List<BadgeClassExtension> search(\n      List<String> issuerList,\n      List<String> badgeList,\n      String rootOrgId,\n      String type,\n      String subtype,\n      List<String> roles)", "full_signature": "@Override public List<BadgeClassExtension> search(\n      List<String> issuerList,\n      List<String> badgeList,\n      String rootOrgId,\n      String type,\n      String subtype,\n      List<String> roles)", "class_method_signature": "BadgeClassExtensionServiceImpl.search(\n      List<String> issuerList,\n      List<String> badgeList,\n      String rootOrgId,\n      String type,\n      String subtype,\n      List<String> roles)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String badgeId)", "modifiers": "@Override public", "return": "BadgeClassExtension", "signature": "BadgeClassExtension get(String badgeId)", "full_signature": "@Override public BadgeClassExtension get(String badgeId)", "class_method_signature": "BadgeClassExtensionServiceImpl.get(String badgeId)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String badgeId)", "modifiers": "@Override public", "return": "void", "signature": "void delete(String badgeId)", "full_signature": "@Override public void delete(String badgeId)", "class_method_signature": "BadgeClassExtensionServiceImpl.delete(String badgeId)", "testcase": false, "constructor": false}], "file": "actors/badge/src/main/java/org/sunbird/badge/service/impl/BadgeClassExtensionServiceImpl.java"}, "focal_method": {"identifier": "get", "parameters": "(String badgeId)", "modifiers": "@Override public", "return": "BadgeClassExtension", "body": "@Override\n  public BadgeClassExtension get(String badgeId) throws ProjectCommonException {\n    Response response =\n        cassandraOperation.getRecordById(Util.KEY_SPACE_NAME, BADGE_CLASS_EXT_TABLE_NAME, badgeId);\n    List<Map<String, Object>> badgeList =\n        (List<Map<String, Object>>) response.get(JsonKey.RESPONSE);\n\n    if ((badgeList == null) || badgeList.isEmpty()) {\n      ProjectLogger.log(\n          \"BadgeClassExtensionServiceImpl:get: Badge not found \" + badgeId,\n          LoggerEnum.ERROR.name());\n      throw new ProjectCommonException(\n          ResponseCode.resourceNotFound.getErrorCode(),\n          ResponseCode.resourceNotFound.getErrorMessage(),\n          ResponseCode.RESOURCE_NOT_FOUND.getResponseCode());\n    }\n\n    return new BadgeClassExtension(badgeList.get(0));\n  }", "signature": "BadgeClassExtension get(String badgeId)", "full_signature": "@Override public BadgeClassExtension get(String badgeId)", "class_method_signature": "BadgeClassExtensionServiceImpl.get(String badgeId)", "testcase": false, "constructor": false, "invocations": ["getRecordById", "get", "isEmpty", "log", "name", "getErrorCode", "getErrorMessage", "getResponseCode", "get"]}, "repository": {"repo_id": 96122408, "url": "https://github.com/project-sunbird/sunbird-lms-mw", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 5, "size": 15380, "license": "licensed"}}