{"test_class": {"identifier": "ApplicationCellRouterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final JobDescriptor APP_2 = JobDescriptor.newBuilder().setApplicationName(\"app2foobar\").build();", "modifier": "private static final", "type": "JobDescriptor", "declarator": "APP_2 = JobDescriptor.newBuilder().setApplicationName(\"app2foobar\").build()", "var_name": "APP_2"}, {"original_string": "private static final JobDescriptor APP_3 = JobDescriptor.newBuilder().setApplicationName(\"app3foobar\").build();", "modifier": "private static final", "type": "JobDescriptor", "declarator": "APP_3 = JobDescriptor.newBuilder().setApplicationName(\"app3foobar\").build()", "var_name": "APP_3"}, {"original_string": "private static final JobDescriptor APP_4 = JobDescriptor.newBuilder().setApplicationName(\"app4foobar\").build();", "modifier": "private static final", "type": "JobDescriptor", "declarator": "APP_4 = JobDescriptor.newBuilder().setApplicationName(\"app4foobar\").build()", "var_name": "APP_4"}, {"original_string": "private static final JobDescriptor OTHER = JobDescriptor.newBuilder().setApplicationName(\"other\").build();", "modifier": "private static final", "type": "JobDescriptor", "declarator": "OTHER = JobDescriptor.newBuilder().setApplicationName(\"other\").build()", "var_name": "OTHER"}], "file": "titus-server-federation/src/test/java/com/netflix/titus/federation/service/router/ApplicationCellRouterTest.java"}, "test_case": {"identifier": "cellsWithNoRulesCanExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cellsWithNoRulesCanExist() {\n        TitusFederationConfiguration titusFederationConfiguration = mock(TitusFederationConfiguration.class);\n        when(titusFederationConfiguration.getCells()).thenReturn(\"cell1=hostName1:7001;cell2=hostName2:7002\");\n        when(titusFederationConfiguration.getRoutingRules()).thenReturn(\"cell1=(app1.*|app2.*)\");\n\n        CellInfoResolver cellInfoResolver = new DefaultCellInfoResolver(titusFederationConfiguration);\n\n        ApplicationCellRouter cellRouter = new ApplicationCellRouter(cellInfoResolver, titusFederationConfiguration);\n        Cell cell = cellRouter.routeKey(APP_2).get();\n        assertThat(cell.getName()).isEqualTo(\"cell1\");\n    }", "signature": "void cellsWithNoRulesCanExist()", "full_signature": "@Test public void cellsWithNoRulesCanExist()", "class_method_signature": "ApplicationCellRouterTest.cellsWithNoRulesCanExist()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getCells", "thenReturn", "when", "getRoutingRules", "get", "routeKey", "isEqualTo", "assertThat", "getName"]}, "focal_class": {"identifier": "ApplicationCellRouter", "superclass": "", "interfaces": "implements CellRouter", "fields": [{"original_string": "private static final String DEFAULT_ROUTE_KEY = \"DEFAULT_FEDERATION_ROUTE_KEY\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_ROUTE_KEY = \"DEFAULT_FEDERATION_ROUTE_KEY\"", "var_name": "DEFAULT_ROUTE_KEY"}, {"original_string": "private final CellInfoResolver cellInfoResolver;", "modifier": "private final", "type": "CellInfoResolver", "declarator": "cellInfoResolver", "var_name": "cellInfoResolver"}, {"original_string": "private final RoutingRuleSelector selector;", "modifier": "private final", "type": "RoutingRuleSelector", "declarator": "selector", "var_name": "selector"}], "methods": [{"identifier": "ApplicationCellRouter", "parameters": "(CellInfoResolver cellInfoResolver, TitusFederationConfiguration federationConfiguration)", "modifiers": "public", "return": "", "signature": " ApplicationCellRouter(CellInfoResolver cellInfoResolver, TitusFederationConfiguration federationConfiguration)", "full_signature": "public  ApplicationCellRouter(CellInfoResolver cellInfoResolver, TitusFederationConfiguration federationConfiguration)", "class_method_signature": "ApplicationCellRouter.ApplicationCellRouter(CellInfoResolver cellInfoResolver, TitusFederationConfiguration federationConfiguration)", "testcase": false, "constructor": true}, {"identifier": "routeKeyFor", "parameters": "(JobDescriptor jobDescriptor)", "modifiers": "private static", "return": "String", "signature": "String routeKeyFor(JobDescriptor jobDescriptor)", "full_signature": "private static String routeKeyFor(JobDescriptor jobDescriptor)", "class_method_signature": "ApplicationCellRouter.routeKeyFor(JobDescriptor jobDescriptor)", "testcase": false, "constructor": false}, {"identifier": "routeKey", "parameters": "(JobDescriptor jobDescriptor)", "modifiers": "@Override public", "return": "Optional<Cell>", "signature": "Optional<Cell> routeKey(JobDescriptor jobDescriptor)", "full_signature": "@Override public Optional<Cell> routeKey(JobDescriptor jobDescriptor)", "class_method_signature": "ApplicationCellRouter.routeKey(JobDescriptor jobDescriptor)", "testcase": false, "constructor": false}, {"identifier": "getCellPinnedToJob", "parameters": "(JobDescriptor jobDescriptor)", "modifiers": "private", "return": "Optional<Cell>", "signature": "Optional<Cell> getCellPinnedToJob(JobDescriptor jobDescriptor)", "full_signature": "private Optional<Cell> getCellPinnedToJob(JobDescriptor jobDescriptor)", "class_method_signature": "ApplicationCellRouter.getCellPinnedToJob(JobDescriptor jobDescriptor)", "testcase": false, "constructor": false}], "file": "titus-server-federation/src/main/java/com/netflix/titus/federation/service/router/ApplicationCellRouter.java"}, "focal_method": {"identifier": "routeKey", "parameters": "(JobDescriptor jobDescriptor)", "modifiers": "@Override public", "return": "Optional<Cell>", "body": "@Override\n    public Optional<Cell> routeKey(JobDescriptor jobDescriptor) {\n        Optional<Cell> pinnedCell = getCellPinnedToJob(jobDescriptor);\n        if (pinnedCell.isPresent()) {\n            return pinnedCell;\n        }\n\n        String routeKey = routeKeyFor(jobDescriptor);\n        Set<String> antiAffinityNames = StringExt.splitByCommaIntoSet(\n                jobDescriptor.getAttributesMap().get(JobAttributes.JOB_PARAMETER_ATTRIBUTES_CELL_AVOID)\n        );\n\n        Optional<Cell> found = selector.select(routeKey, cell -> !antiAffinityNames.contains(cell.getName()));\n        if (found.isPresent()) {\n            return found;\n        }\n\n        // fallback to any cell that is not in the anti affinity list, or the default when all available cells are rejected\n        return cellInfoResolver.resolve().stream()\n                .filter(cell -> !antiAffinityNames.contains(cell.getName()))\n                .findAny();\n    }", "signature": "Optional<Cell> routeKey(JobDescriptor jobDescriptor)", "full_signature": "@Override public Optional<Cell> routeKey(JobDescriptor jobDescriptor)", "class_method_signature": "ApplicationCellRouter.routeKey(JobDescriptor jobDescriptor)", "testcase": false, "constructor": false, "invocations": ["getCellPinnedToJob", "isPresent", "routeKeyFor", "splitByCommaIntoSet", "get", "getAttributesMap", "select", "contains", "getName", "isPresent", "findAny", "filter", "stream", "resolve", "contains", "getName"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}