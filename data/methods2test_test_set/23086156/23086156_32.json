{"test_class": {"identifier": "AliasMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/io/nuun/kernel/core/internal/AliasMapTest.java"}, "test_case": {"identifier": "testComputedMapNotNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testComputedMapNotNull() throws Exception\n    {\n        Assertions.assertThat(new AliasMap().toMap()).isNotNull();\n    }", "signature": "void testComputedMapNotNull()", "full_signature": "@Test public void testComputedMapNotNull()", "class_method_signature": "AliasMapTest.testComputedMapNotNull()", "testcase": true, "constructor": false, "invocations": ["isNotNull", "assertThat", "toMap"]}, "focal_class": {"identifier": "AliasMap", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<String, String> aliases = new HashMap<>();", "modifier": "private", "type": "Map<String, String>", "declarator": "aliases = new HashMap<>()", "var_name": "aliases"}, {"original_string": "private Map<String, String> params = new HashMap<>();", "modifier": "private", "type": "Map<String, String>", "declarator": "params = new HashMap<>()", "var_name": "params"}], "methods": [{"identifier": "putAlias", "parameters": "(String alias, String key)", "modifiers": "public", "return": "String", "signature": "String putAlias(String alias, String key)", "full_signature": "public String putAlias(String alias, String key)", "class_method_signature": "AliasMap.putAlias(String alias, String key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "public", "return": "String", "signature": "String get(String key)", "full_signature": "public String get(String key)", "class_method_signature": "AliasMap.get(String key)", "testcase": false, "constructor": false}, {"identifier": "getWithAlias", "parameters": "(String key, List<String> cache)", "modifiers": "private", "return": "String", "signature": "String getWithAlias(String key, List<String> cache)", "full_signature": "private String getWithAlias(String key, List<String> cache)", "class_method_signature": "AliasMap.getWithAlias(String key, List<String> cache)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String key, String value)", "modifiers": "public", "return": "String", "signature": "String put(String key, String value)", "full_signature": "public String put(String key, String value)", "class_method_signature": "AliasMap.put(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> toMap()", "full_signature": "public Map<String, String> toMap()", "class_method_signature": "AliasMap.toMap()", "testcase": false, "constructor": false}, {"identifier": "containsAllKeys", "parameters": "(Collection<String> keys)", "modifiers": "public", "return": "boolean", "signature": "boolean containsAllKeys(Collection<String> keys)", "full_signature": "public boolean containsAllKeys(Collection<String> keys)", "class_method_signature": "AliasMap.containsAllKeys(Collection<String> keys)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(String key)", "modifiers": "public", "return": "boolean", "signature": "boolean containsKey(String key)", "full_signature": "public boolean containsKey(String key)", "class_method_signature": "AliasMap.containsKey(String key)", "testcase": false, "constructor": false}], "file": "core/src/main/java/io/nuun/kernel/core/internal/AliasMap.java"}, "focal_method": {"identifier": "toMap", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "body": "public Map<String, String> toMap()\n    {\n        Map<String, String> map = new HashMap<>(params);\n        for (Map.Entry<String, String> entry : aliases.entrySet())\n        {\n            String alias = entry.getKey();\n            String paramKey = entry.getValue();\n            map.put(alias, get(paramKey));\n        }\n        return Collections.unmodifiableMap(map);\n    }", "signature": "Map<String, String> toMap()", "full_signature": "public Map<String, String> toMap()", "class_method_signature": "AliasMap.toMap()", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "getValue", "put", "get", "unmodifiableMap"]}, "repository": {"repo_id": 23086156, "url": "https://github.com/nuun-io/kernel", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 1114, "license": "licensed"}}