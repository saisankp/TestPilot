{"test_class": {"identifier": "TestPlaintextKeysProvider", "superclass": "", "interfaces": "", "fields": [], "file": "tool/src/test/java/pro/javacard/gp/TestPlaintextKeysProvider.java"}, "test_case": {"identifier": "testMasterKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMasterKey() {\n        CardKeysProvider p = new PlaintextKeysProvider();\n        Assert.assertTrue(p.getCardKeys(\"404142434445464748494a4b4c4d4e4f\").isPresent());\n    }", "signature": "void testMasterKey()", "full_signature": "@Test public void testMasterKey()", "class_method_signature": "TestPlaintextKeysProvider.testMasterKey()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isPresent", "getCardKeys"]}, "focal_class": {"identifier": "PlaintextKeysProvider", "superclass": "", "interfaces": "implements CardKeysProvider", "fields": [], "methods": [{"identifier": "PlaintextKeysProvider", "parameters": "()", "modifiers": "public", "return": "", "signature": " PlaintextKeysProvider()", "full_signature": "public  PlaintextKeysProvider()", "class_method_signature": "PlaintextKeysProvider.PlaintextKeysProvider()", "testcase": false, "constructor": true}, {"identifier": "getCardKeys", "parameters": "(String spec)", "modifiers": "@Override public", "return": "Optional<GPCardKeys>", "signature": "Optional<GPCardKeys> getCardKeys(String spec)", "full_signature": "@Override public Optional<GPCardKeys> getCardKeys(String spec)", "class_method_signature": "PlaintextKeysProvider.getCardKeys(String spec)", "testcase": false, "constructor": false}], "file": "tool/src/main/java/pro/javacard/gp/PlaintextKeysProvider.java"}, "focal_method": {"identifier": "getCardKeys", "parameters": "(String spec)", "modifiers": "@Override public", "return": "Optional<GPCardKeys>", "body": "@Override\n    public Optional<GPCardKeys> getCardKeys(String spec) {\n        if (spec == null)\n            return Optional.empty();\n        \n        // Default key, with shorthand\n        if (\"default\".startsWith(spec.toLowerCase()))\n            return Optional.of(PlaintextKeys.defaultKey());\n\n        try {\n            // emv:<hex>\n            for (PlaintextKeys.Diversification d : PlaintextKeys.Diversification.values()) {\n                if (spec.toLowerCase().startsWith(d.name().toLowerCase())) {\n                    byte[] k = HexUtils.stringToBin(spec.substring(d.name().length() + 1));\n                    return Optional.of(PlaintextKeys.derivedFromMasterKey(k, null, d));\n                }\n            }\n\n            // hex\n            byte[] k = HexUtils.stringToBin(spec);\n            return Optional.of(PlaintextKeys.fromMasterKey(k));\n        } catch (IllegalArgumentException e) {\n            // log\n        }\n        return Optional.empty();\n    }", "signature": "Optional<GPCardKeys> getCardKeys(String spec)", "full_signature": "@Override public Optional<GPCardKeys> getCardKeys(String spec)", "class_method_signature": "PlaintextKeysProvider.getCardKeys(String spec)", "testcase": false, "constructor": false, "invocations": ["empty", "startsWith", "toLowerCase", "of", "defaultKey", "values", "startsWith", "toLowerCase", "toLowerCase", "name", "stringToBin", "substring", "length", "name", "of", "derivedFromMasterKey", "stringToBin", "of", "fromMasterKey", "empty"]}, "repository": {"repo_id": 15939233, "url": "https://github.com/martinpaljak/GlobalPlatformPro", "stars": 351, "created": "1/15/2014 3:34:22 PM +00:00", "updates": "2020-01-23T12:51:05+00:00", "fork": "False", "license": "licensed"}}