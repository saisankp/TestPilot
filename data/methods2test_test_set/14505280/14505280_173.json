{"test_class": {"identifier": "PersistTransactionCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DOUBLE_TOLERANCE = .0000000001;", "modifier": "private static final", "type": "double", "declarator": "DOUBLE_TOLERANCE = .0000000001", "var_name": "DOUBLE_TOLERANCE"}, {"original_string": "private static final String LAYER_ID = \"countries\";", "modifier": "private static final", "type": "String", "declarator": "LAYER_ID = \"countries\"", "var_name": "LAYER_ID"}, {"original_string": "private static final String CRS = \"EPSG:4326\";", "modifier": "private static final", "type": "String", "declarator": "CRS = \"EPSG:4326\"", "var_name": "CRS"}, {"original_string": "@Autowired\n\tprivate CommandDispatcher dispatcher;", "modifier": "@Autowired\n\tprivate", "type": "CommandDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}, {"original_string": "@Autowired\n\tprivate DtoConverterService dtoConverter;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "dtoConverter", "var_name": "dtoConverter"}, {"original_string": "@Autowired\n\t@Rule\n\tpublic SecurityRule securityRule;", "modifier": "@Autowired\n\t@Rule\n\tpublic", "type": "SecurityRule", "declarator": "securityRule", "var_name": "securityRule"}], "file": "command/src/test/java/org/geomajas/command/feature/PersistTransactionCommandTest.java"}, "test_case": {"identifier": "testPersistEmptyTransaction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPersistEmptyTransaction() throws Exception {\n\t\tPersistTransactionRequest request = new PersistTransactionRequest();\n\t\trequest.setCrs(CRS);\n\t\tFeatureTransaction featureTransaction = new FeatureTransaction();\n\t\tfeatureTransaction.setLayerId(LAYER_ID);\n\t\trequest.setFeatureTransaction(featureTransaction);\n\t\tPersistTransactionResponse response = (PersistTransactionResponse) dispatcher.execute(\n\t\t\t\tPersistTransactionRequest.COMMAND, request, null, \"en\");\n\t\tif (response.isError()) {\n\t\t\tresponse.getErrors().get(0).printStackTrace();\n\t\t}\n\t\tAssert.assertFalse(response.isError());\n\t\tAssert.assertNotNull(response.getFeatureTransaction());\n\t}", "signature": "void testPersistEmptyTransaction()", "full_signature": "@Test public void testPersistEmptyTransaction()", "class_method_signature": "PersistTransactionCommandTest.testPersistEmptyTransaction()", "testcase": true, "constructor": false, "invocations": ["setCrs", "setLayerId", "setFeatureTransaction", "execute", "isError", "printStackTrace", "get", "getErrors", "assertFalse", "isError", "assertNotNull", "getFeatureTransaction"]}, "focal_class": {"identifier": "PersistTransactionCommand", "superclass": "", "interfaces": "implements CommandHasRequest<PersistTransactionRequest, PersistTransactionResponse>", "fields": [{"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}, {"original_string": "@Autowired\n\tprivate DtoConverterService converter;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "converter", "var_name": "converter"}, {"original_string": "@Autowired\n\tprivate VectorLayerService layerService;", "modifier": "@Autowired\n\tprivate", "type": "VectorLayerService", "declarator": "layerService", "var_name": "layerService"}], "methods": [{"identifier": "getEmptyCommandRequest", "parameters": "()", "modifiers": "@Override public", "return": "PersistTransactionRequest", "signature": "PersistTransactionRequest getEmptyCommandRequest()", "full_signature": "@Override public PersistTransactionRequest getEmptyCommandRequest()", "class_method_signature": "PersistTransactionCommand.getEmptyCommandRequest()", "testcase": false, "constructor": false}, {"identifier": "getEmptyCommandResponse", "parameters": "()", "modifiers": "@Override public", "return": "PersistTransactionResponse", "signature": "PersistTransactionResponse getEmptyCommandResponse()", "full_signature": "@Override public PersistTransactionResponse getEmptyCommandResponse()", "class_method_signature": "PersistTransactionCommand.getEmptyCommandResponse()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(PersistTransactionRequest request, PersistTransactionResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void execute(PersistTransactionRequest request, PersistTransactionResponse response)", "full_signature": "@Override public void execute(PersistTransactionRequest request, PersistTransactionResponse response)", "class_method_signature": "PersistTransactionCommand.execute(PersistTransactionRequest request, PersistTransactionResponse response)", "testcase": false, "constructor": false}], "file": "command/src/main/java/org/geomajas/command/feature/PersistTransactionCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(PersistTransactionRequest request, PersistTransactionResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(PersistTransactionRequest request, PersistTransactionResponse response) throws Exception {\n\t\tif (null == request.getFeatureTransaction()) {\n\t\t\tthrow new GeomajasException(ExceptionCode.PARAMETER_MISSING, \"featureTransaction\");\n\t\t}\n\t\tif (null == request.getFeatureTransaction().getLayerId()) {\n\t\t\tthrow new GeomajasException(ExceptionCode.PARAMETER_MISSING, \"featureTransaction.layerId\");\n\t\t}\n\t\tif (null == request.getCrs()) {\n\t\t\tthrow new GeomajasException(ExceptionCode.PARAMETER_MISSING, \"crs\");\n\t\t}\n\t\tFeatureTransaction featureTransaction = request.getFeatureTransaction();\n\t\tif (featureTransaction == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tList<InternalFeature> oldFeatures = new ArrayList<InternalFeature>();\n\t\tList<InternalFeature> newFeatures = new ArrayList<InternalFeature>();\n\t\tif (featureTransaction.getOldFeatures() != null) {\n\t\t\tfor (int i = 0; i < featureTransaction.getOldFeatures().length; i++) {\n\t\t\t\toldFeatures.add(converter.toInternal(featureTransaction.getOldFeatures()[i]));\n\t\t\t}\n\t\t}\n\t\tif (featureTransaction.getNewFeatures() != null) {\n\t\t\tfor (int i = 0; i < featureTransaction.getNewFeatures().length; i++) {\n\t\t\t\tnewFeatures.add(converter.toInternal(featureTransaction.getNewFeatures()[i]));\n\t\t\t}\n\t\t}\n\n\t\tlayerService.saveOrUpdate(featureTransaction.getLayerId(), geoService.getCrs(request.getCrs()), oldFeatures,\n\t\t\t\tnewFeatures);\n\n\t\t// Apply the new set of InternalFeatures onto the transaction: (ID may be filled in now)\n\t\tif (featureTransaction.getNewFeatures() != null) {\n\t\t\tFeature[] resultFeatures = new Feature[newFeatures.size()];\n\t\t\tfor (int i = 0; i < newFeatures.size(); i++) {\n\t\t\t\tInternalFeature internalFeature = newFeatures.get(i);\n\t\t\t\tresultFeatures[i] = converter.toDto(internalFeature);\n\t\t\t}\n\t\t\tfeatureTransaction.setNewFeatures(resultFeatures);\n\t\t}\n\t\tresponse.setFeatureTransaction(featureTransaction);\n\t}", "signature": "void execute(PersistTransactionRequest request, PersistTransactionResponse response)", "full_signature": "@Override public void execute(PersistTransactionRequest request, PersistTransactionResponse response)", "class_method_signature": "PersistTransactionCommand.execute(PersistTransactionRequest request, PersistTransactionResponse response)", "testcase": false, "constructor": false, "invocations": ["getFeatureTransaction", "getLayerId", "getFeatureTransaction", "getCrs", "getFeatureTransaction", "getOldFeatures", "getOldFeatures", "add", "toInternal", "getOldFeatures", "getNewFeatures", "getNewFeatures", "add", "toInternal", "getNewFeatures", "saveOrUpdate", "getLayerId", "getCrs", "getCrs", "getNewFeatures", "size", "size", "get", "toDto", "setNewFeatures", "setFeatureTransaction"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}