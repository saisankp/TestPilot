{"test_class": {"identifier": "BlockTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final NetworkParameters params = TestNet2Params.get();", "modifier": "static final", "type": "NetworkParameters", "declarator": "params = TestNet2Params.get()", "var_name": "params"}, {"original_string": "public static final byte[] blockBytes;", "modifier": "public static final", "type": "byte[]", "declarator": "blockBytes", "var_name": "blockBytes"}], "file": "core/src/test/java/com/google/bitcoin/core/BlockTest.java"}, "test_case": {"identifier": "testWork", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWork() throws Exception {\n        BigInteger work = params.getGenesisBlock().getWork();\n        // This number is printed by the official client at startup as the calculated value of chainWork on testnet:\n        //\n        // SetBestChain: new best=00000007199508e34a9f  height=0  work=536879104\n        assertEquals(BigInteger.valueOf(536879104L), work);\n    }", "signature": "void testWork()", "full_signature": "@Test public void testWork()", "class_method_signature": "BlockTest.testWork()", "testcase": true, "constructor": false, "invocations": ["getWork", "getGenesisBlock", "assertEquals", "valueOf"]}, "focal_class": {"identifier": "Block", "superclass": "extends Message", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(Block.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Block.class)", "var_name": "log"}, {"original_string": "private static final long serialVersionUID = 2738848929966035281L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2738848929966035281L", "var_name": "serialVersionUID"}, {"original_string": "public static final int HEADER_SIZE = 80;", "modifier": "public static final", "type": "int", "declarator": "HEADER_SIZE = 80", "var_name": "HEADER_SIZE"}, {"original_string": "static final long ALLOWED_TIME_DRIFT = 2 * 60 * 60;", "modifier": "static final", "type": "long", "declarator": "ALLOWED_TIME_DRIFT = 2 * 60 * 60", "var_name": "ALLOWED_TIME_DRIFT"}, {"original_string": "public static final int MAX_BLOCK_SIZE = CoinDefinition.MAX_BLOCK_SIZE;", "modifier": "public static final", "type": "int", "declarator": "MAX_BLOCK_SIZE = CoinDefinition.MAX_BLOCK_SIZE", "var_name": "MAX_BLOCK_SIZE"}, {"original_string": "public static final int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE / 50;", "modifier": "public static final", "type": "int", "declarator": "MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE / 50", "var_name": "MAX_BLOCK_SIGOPS"}, {"original_string": "public static final long EASIEST_DIFFICULTY_TARGET = 0x207fFFFFL;", "modifier": "public static final", "type": "long", "declarator": "EASIEST_DIFFICULTY_TARGET = 0x207fFFFFL", "var_name": "EASIEST_DIFFICULTY_TARGET"}, {"original_string": "private long version;", "modifier": "private", "type": "long", "declarator": "version", "var_name": "version"}, {"original_string": "private Sha256Hash prevBlockHash;", "modifier": "private", "type": "Sha256Hash", "declarator": "prevBlockHash", "var_name": "prevBlockHash"}, {"original_string": "private Sha256Hash merkleRoot;", "modifier": "private", "type": "Sha256Hash", "declarator": "merkleRoot", "var_name": "merkleRoot"}, {"original_string": "private long time;", "modifier": "private", "type": "long", "declarator": "time", "var_name": "time"}, {"original_string": "private long difficultyTarget;", "modifier": "private", "type": "long", "declarator": "difficultyTarget", "var_name": "difficultyTarget"}, {"original_string": "private long nonce;", "modifier": "private", "type": "long", "declarator": "nonce", "var_name": "nonce"}, {"original_string": "List<Transaction> transactions;", "modifier": "", "type": "List<Transaction>", "declarator": "transactions", "var_name": "transactions"}, {"original_string": "private transient Sha256Hash hash;", "modifier": "private transient", "type": "Sha256Hash", "declarator": "hash", "var_name": "hash"}, {"original_string": "private transient Sha256Hash scryptHash;", "modifier": "private transient", "type": "Sha256Hash", "declarator": "scryptHash", "var_name": "scryptHash"}, {"original_string": "private transient boolean headerParsed;", "modifier": "private transient", "type": "boolean", "declarator": "headerParsed", "var_name": "headerParsed"}, {"original_string": "private transient boolean transactionsParsed;", "modifier": "private transient", "type": "boolean", "declarator": "transactionsParsed", "var_name": "transactionsParsed"}, {"original_string": "private transient boolean headerBytesValid;", "modifier": "private transient", "type": "boolean", "declarator": "headerBytesValid", "var_name": "headerBytesValid"}, {"original_string": "private transient boolean transactionBytesValid;", "modifier": "private transient", "type": "boolean", "declarator": "transactionBytesValid", "var_name": "transactionBytesValid"}, {"original_string": "private transient int optimalEncodingMessageSize;", "modifier": "private transient", "type": "int", "declarator": "optimalEncodingMessageSize", "var_name": "optimalEncodingMessageSize"}, {"original_string": "static private BigInteger LARGEST_HASH = BigInteger.ONE.shiftLeft(256);", "modifier": "static private", "type": "BigInteger", "declarator": "LARGEST_HASH = BigInteger.ONE.shiftLeft(256)", "var_name": "LARGEST_HASH"}, {"original_string": "static private int txCounter;", "modifier": "static private", "type": "int", "declarator": "txCounter", "var_name": "txCounter"}, {"original_string": "static final byte[] EMPTY_BYTES = new byte[32];", "modifier": "static final", "type": "byte[]", "declarator": "EMPTY_BYTES = new byte[32]", "var_name": "EMPTY_BYTES"}], "methods": [{"identifier": "Block", "parameters": "(NetworkParameters params)", "modifiers": "", "return": "", "signature": " Block(NetworkParameters params)", "full_signature": "  Block(NetworkParameters params)", "class_method_signature": "Block.Block(NetworkParameters params)", "testcase": false, "constructor": true}, {"identifier": "Block", "parameters": "(NetworkParameters params, byte[] payloadBytes)", "modifiers": "public", "return": "", "signature": " Block(NetworkParameters params, byte[] payloadBytes)", "full_signature": "public  Block(NetworkParameters params, byte[] payloadBytes)", "class_method_signature": "Block.Block(NetworkParameters params, byte[] payloadBytes)", "testcase": false, "constructor": true}, {"identifier": "Block", "parameters": "(NetworkParameters params, byte[] payloadBytes, boolean parseLazy, boolean parseRetain, int length)", "modifiers": "public", "return": "", "signature": " Block(NetworkParameters params, byte[] payloadBytes, boolean parseLazy, boolean parseRetain, int length)", "full_signature": "public  Block(NetworkParameters params, byte[] payloadBytes, boolean parseLazy, boolean parseRetain, int length)", "class_method_signature": "Block.Block(NetworkParameters params, byte[] payloadBytes, boolean parseLazy, boolean parseRetain, int length)", "testcase": false, "constructor": true}, {"identifier": "Block", "parameters": "(NetworkParameters params, long version, Sha256Hash prevBlockHash, Sha256Hash merkleRoot, long time,\n                 long difficultyTarget, long nonce, List<Transaction> transactions)", "modifiers": "public", "return": "", "signature": " Block(NetworkParameters params, long version, Sha256Hash prevBlockHash, Sha256Hash merkleRoot, long time,\n                 long difficultyTarget, long nonce, List<Transaction> transactions)", "full_signature": "public  Block(NetworkParameters params, long version, Sha256Hash prevBlockHash, Sha256Hash merkleRoot, long time,\n                 long difficultyTarget, long nonce, List<Transaction> transactions)", "class_method_signature": "Block.Block(NetworkParameters params, long version, Sha256Hash prevBlockHash, Sha256Hash merkleRoot, long time,\n                 long difficultyTarget, long nonce, List<Transaction> transactions)", "testcase": false, "constructor": true}, {"identifier": "getBlockInflation", "parameters": "(int nHeight)", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getBlockInflation(int nHeight)", "full_signature": "public BigInteger getBlockInflation(int nHeight)", "class_method_signature": "Block.getBlockInflation(int nHeight)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream ois)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream ois)", "full_signature": "private void readObject(ObjectInputStream ois)", "class_method_signature": "Block.readObject(ObjectInputStream ois)", "testcase": false, "constructor": false}, {"identifier": "parseHeader", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void parseHeader()", "full_signature": "private void parseHeader()", "class_method_signature": "Block.parseHeader()", "testcase": false, "constructor": false}, {"identifier": "parseTransactions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void parseTransactions()", "full_signature": "private void parseTransactions()", "class_method_signature": "Block.parseTransactions()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "()", "modifiers": "", "return": "void", "signature": "void parse()", "full_signature": " void parse()", "class_method_signature": "Block.parse()", "testcase": false, "constructor": false}, {"identifier": "getOptimalEncodingMessageSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getOptimalEncodingMessageSize()", "full_signature": "public int getOptimalEncodingMessageSize()", "class_method_signature": "Block.getOptimalEncodingMessageSize()", "testcase": false, "constructor": false}, {"identifier": "parseLite", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void parseLite()", "full_signature": "protected void parseLite()", "class_method_signature": "Block.parseLite()", "testcase": false, "constructor": false}, {"identifier": "maybeParseHeader", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void maybeParseHeader()", "full_signature": "private void maybeParseHeader()", "class_method_signature": "Block.maybeParseHeader()", "testcase": false, "constructor": false}, {"identifier": "maybeParseTransactions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void maybeParseTransactions()", "full_signature": "private void maybeParseTransactions()", "class_method_signature": "Block.maybeParseTransactions()", "testcase": false, "constructor": false}, {"identifier": "maybeParse", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void maybeParse()", "full_signature": "protected void maybeParse()", "class_method_signature": "Block.maybeParse()", "testcase": false, "constructor": false}, {"identifier": "ensureParsed", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void ensureParsed()", "full_signature": "public void ensureParsed()", "class_method_signature": "Block.ensureParsed()", "testcase": false, "constructor": false}, {"identifier": "ensureParsedHeader", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void ensureParsedHeader()", "full_signature": "public void ensureParsedHeader()", "class_method_signature": "Block.ensureParsedHeader()", "testcase": false, "constructor": false}, {"identifier": "ensureParsedTransactions", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void ensureParsedTransactions()", "full_signature": "public void ensureParsedTransactions()", "class_method_signature": "Block.ensureParsedTransactions()", "testcase": false, "constructor": false}, {"identifier": "writeHeader", "parameters": "(OutputStream stream)", "modifiers": "", "return": "void", "signature": "void writeHeader(OutputStream stream)", "full_signature": " void writeHeader(OutputStream stream)", "class_method_signature": "Block.writeHeader(OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "writeTransactions", "parameters": "(OutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeTransactions(OutputStream stream)", "full_signature": "private void writeTransactions(OutputStream stream)", "class_method_signature": "Block.writeTransactions(OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "bitcoinSerialize", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] bitcoinSerialize()", "full_signature": "public byte[] bitcoinSerialize()", "class_method_signature": "Block.bitcoinSerialize()", "testcase": false, "constructor": false}, {"identifier": "bitcoinSerializeToStream", "parameters": "(OutputStream stream)", "modifiers": "@Override protected", "return": "void", "signature": "void bitcoinSerializeToStream(OutputStream stream)", "full_signature": "@Override protected void bitcoinSerializeToStream(OutputStream stream)", "class_method_signature": "Block.bitcoinSerializeToStream(OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "guessTransactionsLength", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int guessTransactionsLength()", "full_signature": "private int guessTransactionsLength()", "class_method_signature": "Block.guessTransactionsLength()", "testcase": false, "constructor": false}, {"identifier": "unCache", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void unCache()", "full_signature": "protected void unCache()", "class_method_signature": "Block.unCache()", "testcase": false, "constructor": false}, {"identifier": "unCacheHeader", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void unCacheHeader()", "full_signature": "private void unCacheHeader()", "class_method_signature": "Block.unCacheHeader()", "testcase": false, "constructor": false}, {"identifier": "unCacheTransactions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void unCacheTransactions()", "full_signature": "private void unCacheTransactions()", "class_method_signature": "Block.unCacheTransactions()", "testcase": false, "constructor": false}, {"identifier": "calculateHash", "parameters": "()", "modifiers": "private", "return": "Sha256Hash", "signature": "Sha256Hash calculateHash()", "full_signature": "private Sha256Hash calculateHash()", "class_method_signature": "Block.calculateHash()", "testcase": false, "constructor": false}, {"identifier": "calculateScryptHash", "parameters": "()", "modifiers": "private", "return": "Sha256Hash", "signature": "Sha256Hash calculateScryptHash()", "full_signature": "private Sha256Hash calculateScryptHash()", "class_method_signature": "Block.calculateScryptHash()", "testcase": false, "constructor": false}, {"identifier": "getHashAsString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHashAsString()", "full_signature": "public String getHashAsString()", "class_method_signature": "Block.getHashAsString()", "testcase": false, "constructor": false}, {"identifier": "getScryptHashAsString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getScryptHashAsString()", "full_signature": "public String getScryptHashAsString()", "class_method_signature": "Block.getScryptHashAsString()", "testcase": false, "constructor": false}, {"identifier": "getHash", "parameters": "()", "modifiers": "public", "return": "Sha256Hash", "signature": "Sha256Hash getHash()", "full_signature": "public Sha256Hash getHash()", "class_method_signature": "Block.getHash()", "testcase": false, "constructor": false}, {"identifier": "getScryptHash", "parameters": "()", "modifiers": "public", "return": "Sha256Hash", "signature": "Sha256Hash getScryptHash()", "full_signature": "public Sha256Hash getScryptHash()", "class_method_signature": "Block.getScryptHash()", "testcase": false, "constructor": false}, {"identifier": "getWork", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getWork()", "full_signature": "public BigInteger getWork()", "class_method_signature": "Block.getWork()", "testcase": false, "constructor": false}, {"identifier": "cloneAsHeader", "parameters": "()", "modifiers": "public", "return": "Block", "signature": "Block cloneAsHeader()", "full_signature": "public Block cloneAsHeader()", "class_method_signature": "Block.cloneAsHeader()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Block.toString()", "testcase": false, "constructor": false}, {"identifier": "solve", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void solve()", "full_signature": "public void solve()", "class_method_signature": "Block.solve()", "testcase": false, "constructor": false}, {"identifier": "getDifficultyTargetAsInteger", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getDifficultyTargetAsInteger()", "full_signature": "public BigInteger getDifficultyTargetAsInteger()", "class_method_signature": "Block.getDifficultyTargetAsInteger()", "testcase": false, "constructor": false}, {"identifier": "checkProofOfWork", "parameters": "(boolean throwException)", "modifiers": "private", "return": "boolean", "signature": "boolean checkProofOfWork(boolean throwException)", "full_signature": "private boolean checkProofOfWork(boolean throwException)", "class_method_signature": "Block.checkProofOfWork(boolean throwException)", "testcase": false, "constructor": false}, {"identifier": "checkTimestamp", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkTimestamp()", "full_signature": "private void checkTimestamp()", "class_method_signature": "Block.checkTimestamp()", "testcase": false, "constructor": false}, {"identifier": "checkSigOps", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkSigOps()", "full_signature": "private void checkSigOps()", "class_method_signature": "Block.checkSigOps()", "testcase": false, "constructor": false}, {"identifier": "checkMerkleRoot", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkMerkleRoot()", "full_signature": "private void checkMerkleRoot()", "class_method_signature": "Block.checkMerkleRoot()", "testcase": false, "constructor": false}, {"identifier": "calculateMerkleRoot", "parameters": "()", "modifiers": "private", "return": "Sha256Hash", "signature": "Sha256Hash calculateMerkleRoot()", "full_signature": "private Sha256Hash calculateMerkleRoot()", "class_method_signature": "Block.calculateMerkleRoot()", "testcase": false, "constructor": false}, {"identifier": "buildMerkleTree", "parameters": "()", "modifiers": "private", "return": "List<byte[]>", "signature": "List<byte[]> buildMerkleTree()", "full_signature": "private List<byte[]> buildMerkleTree()", "class_method_signature": "Block.buildMerkleTree()", "testcase": false, "constructor": false}, {"identifier": "checkTransactions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkTransactions()", "full_signature": "private void checkTransactions()", "class_method_signature": "Block.checkTransactions()", "testcase": false, "constructor": false}, {"identifier": "verifyHeader", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void verifyHeader()", "full_signature": "public void verifyHeader()", "class_method_signature": "Block.verifyHeader()", "testcase": false, "constructor": false}, {"identifier": "verifyTransactions", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void verifyTransactions()", "full_signature": "public void verifyTransactions()", "class_method_signature": "Block.verifyTransactions()", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void verify()", "full_signature": "public void verify()", "class_method_signature": "Block.verify()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Block.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Block.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getMerkleRoot", "parameters": "()", "modifiers": "public", "return": "Sha256Hash", "signature": "Sha256Hash getMerkleRoot()", "full_signature": "public Sha256Hash getMerkleRoot()", "class_method_signature": "Block.getMerkleRoot()", "testcase": false, "constructor": false}, {"identifier": "setMerkleRoot", "parameters": "(Sha256Hash value)", "modifiers": "", "return": "void", "signature": "void setMerkleRoot(Sha256Hash value)", "full_signature": " void setMerkleRoot(Sha256Hash value)", "class_method_signature": "Block.setMerkleRoot(Sha256Hash value)", "testcase": false, "constructor": false}, {"identifier": "addTransaction", "parameters": "(Transaction t)", "modifiers": "public", "return": "void", "signature": "void addTransaction(Transaction t)", "full_signature": "public void addTransaction(Transaction t)", "class_method_signature": "Block.addTransaction(Transaction t)", "testcase": false, "constructor": false}, {"identifier": "addTransaction", "parameters": "(Transaction t, boolean runSanityChecks)", "modifiers": "", "return": "void", "signature": "void addTransaction(Transaction t, boolean runSanityChecks)", "full_signature": " void addTransaction(Transaction t, boolean runSanityChecks)", "class_method_signature": "Block.addTransaction(Transaction t, boolean runSanityChecks)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getVersion()", "full_signature": "public long getVersion()", "class_method_signature": "Block.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getPrevBlockHash", "parameters": "()", "modifiers": "public", "return": "Sha256Hash", "signature": "Sha256Hash getPrevBlockHash()", "full_signature": "public Sha256Hash getPrevBlockHash()", "class_method_signature": "Block.getPrevBlockHash()", "testcase": false, "constructor": false}, {"identifier": "setPrevBlockHash", "parameters": "(Sha256Hash prevBlockHash)", "modifiers": "", "return": "void", "signature": "void setPrevBlockHash(Sha256Hash prevBlockHash)", "full_signature": " void setPrevBlockHash(Sha256Hash prevBlockHash)", "class_method_signature": "Block.setPrevBlockHash(Sha256Hash prevBlockHash)", "testcase": false, "constructor": false}, {"identifier": "getTimeSeconds", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTimeSeconds()", "full_signature": "public long getTimeSeconds()", "class_method_signature": "Block.getTimeSeconds()", "testcase": false, "constructor": false}, {"identifier": "getTime", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getTime()", "full_signature": "public Date getTime()", "class_method_signature": "Block.getTime()", "testcase": false, "constructor": false}, {"identifier": "setTime", "parameters": "(long time)", "modifiers": "public", "return": "void", "signature": "void setTime(long time)", "full_signature": "public void setTime(long time)", "class_method_signature": "Block.setTime(long time)", "testcase": false, "constructor": false}, {"identifier": "getDifficultyTarget", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getDifficultyTarget()", "full_signature": "public long getDifficultyTarget()", "class_method_signature": "Block.getDifficultyTarget()", "testcase": false, "constructor": false}, {"identifier": "setDifficultyTarget", "parameters": "(long compactForm)", "modifiers": "public", "return": "void", "signature": "void setDifficultyTarget(long compactForm)", "full_signature": "public void setDifficultyTarget(long compactForm)", "class_method_signature": "Block.setDifficultyTarget(long compactForm)", "testcase": false, "constructor": false}, {"identifier": "getNonce", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getNonce()", "full_signature": "public long getNonce()", "class_method_signature": "Block.getNonce()", "testcase": false, "constructor": false}, {"identifier": "setNonce", "parameters": "(long nonce)", "modifiers": "public", "return": "void", "signature": "void setNonce(long nonce)", "full_signature": "public void setNonce(long nonce)", "class_method_signature": "Block.setNonce(long nonce)", "testcase": false, "constructor": false}, {"identifier": "getTransactions", "parameters": "()", "modifiers": "public", "return": "List<Transaction>", "signature": "List<Transaction> getTransactions()", "full_signature": "public List<Transaction> getTransactions()", "class_method_signature": "Block.getTransactions()", "testcase": false, "constructor": false}, {"identifier": "addCoinbaseTransaction", "parameters": "(byte[] pubKeyTo, BigInteger value)", "modifiers": "", "return": "void", "signature": "void addCoinbaseTransaction(byte[] pubKeyTo, BigInteger value)", "full_signature": " void addCoinbaseTransaction(byte[] pubKeyTo, BigInteger value)", "class_method_signature": "Block.addCoinbaseTransaction(byte[] pubKeyTo, BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "createNextBlock", "parameters": "(Address to, long time)", "modifiers": "@VisibleForTesting public", "return": "Block", "signature": "Block createNextBlock(Address to, long time)", "full_signature": "@VisibleForTesting public Block createNextBlock(Address to, long time)", "class_method_signature": "Block.createNextBlock(Address to, long time)", "testcase": false, "constructor": false}, {"identifier": "createNextBlock", "parameters": "(@Nullable Address to, @Nullable TransactionOutPoint prevOut, long time,\n                          byte[] pubKey, BigInteger coinbaseValue)", "modifiers": "", "return": "Block", "signature": "Block createNextBlock(@Nullable Address to, @Nullable TransactionOutPoint prevOut, long time,\n                          byte[] pubKey, BigInteger coinbaseValue)", "full_signature": " Block createNextBlock(@Nullable Address to, @Nullable TransactionOutPoint prevOut, long time,\n                          byte[] pubKey, BigInteger coinbaseValue)", "class_method_signature": "Block.createNextBlock(@Nullable Address to, @Nullable TransactionOutPoint prevOut, long time,\n                          byte[] pubKey, BigInteger coinbaseValue)", "testcase": false, "constructor": false}, {"identifier": "createNextBlock", "parameters": "(@Nullable Address to, TransactionOutPoint prevOut)", "modifiers": "@VisibleForTesting public", "return": "Block", "signature": "Block createNextBlock(@Nullable Address to, TransactionOutPoint prevOut)", "full_signature": "@VisibleForTesting public Block createNextBlock(@Nullable Address to, TransactionOutPoint prevOut)", "class_method_signature": "Block.createNextBlock(@Nullable Address to, TransactionOutPoint prevOut)", "testcase": false, "constructor": false}, {"identifier": "createNextBlock", "parameters": "(@Nullable Address to, BigInteger value)", "modifiers": "@VisibleForTesting public", "return": "Block", "signature": "Block createNextBlock(@Nullable Address to, BigInteger value)", "full_signature": "@VisibleForTesting public Block createNextBlock(@Nullable Address to, BigInteger value)", "class_method_signature": "Block.createNextBlock(@Nullable Address to, BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "createNextBlock", "parameters": "(@Nullable Address to)", "modifiers": "@VisibleForTesting public", "return": "Block", "signature": "Block createNextBlock(@Nullable Address to)", "full_signature": "@VisibleForTesting public Block createNextBlock(@Nullable Address to)", "class_method_signature": "Block.createNextBlock(@Nullable Address to)", "testcase": false, "constructor": false}, {"identifier": "createNextBlockWithCoinbase", "parameters": "(byte[] pubKey, BigInteger coinbaseValue)", "modifiers": "@VisibleForTesting public", "return": "Block", "signature": "Block createNextBlockWithCoinbase(byte[] pubKey, BigInteger coinbaseValue)", "full_signature": "@VisibleForTesting public Block createNextBlockWithCoinbase(byte[] pubKey, BigInteger coinbaseValue)", "class_method_signature": "Block.createNextBlockWithCoinbase(byte[] pubKey, BigInteger coinbaseValue)", "testcase": false, "constructor": false}, {"identifier": "createNextBlockWithCoinbase", "parameters": "(byte[] pubKey)", "modifiers": "@VisibleForTesting", "return": "Block", "signature": "Block createNextBlockWithCoinbase(byte[] pubKey)", "full_signature": "@VisibleForTesting Block createNextBlockWithCoinbase(byte[] pubKey)", "class_method_signature": "Block.createNextBlockWithCoinbase(byte[] pubKey)", "testcase": false, "constructor": false}, {"identifier": "isParsedHeader", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean isParsedHeader()", "full_signature": "@VisibleForTesting boolean isParsedHeader()", "class_method_signature": "Block.isParsedHeader()", "testcase": false, "constructor": false}, {"identifier": "isParsedTransactions", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean isParsedTransactions()", "full_signature": "@VisibleForTesting boolean isParsedTransactions()", "class_method_signature": "Block.isParsedTransactions()", "testcase": false, "constructor": false}, {"identifier": "isHeaderBytesValid", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean isHeaderBytesValid()", "full_signature": "@VisibleForTesting boolean isHeaderBytesValid()", "class_method_signature": "Block.isHeaderBytesValid()", "testcase": false, "constructor": false}, {"identifier": "isTransactionBytesValid", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean isTransactionBytesValid()", "full_signature": "@VisibleForTesting boolean isTransactionBytesValid()", "class_method_signature": "Block.isTransactionBytesValid()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/google/bitcoin/core/Block.java"}, "focal_method": {"identifier": "getWork", "parameters": "()", "modifiers": "public", "return": "BigInteger", "body": "public BigInteger getWork() throws VerificationException {\n        BigInteger target = getDifficultyTargetAsInteger();\n        return LARGEST_HASH.divide(target.add(BigInteger.ONE));\n    }", "signature": "BigInteger getWork()", "full_signature": "public BigInteger getWork()", "class_method_signature": "Block.getWork()", "testcase": false, "constructor": false, "invocations": ["getDifficultyTargetAsInteger", "divide", "add"]}, "repository": {"repo_id": 24363680, "url": "https://github.com/cannabiscoindev/cannabiscoinj", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 10126, "license": "licensed"}}