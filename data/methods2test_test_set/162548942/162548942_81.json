{"test_class": {"identifier": "ConsulNamingServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static BrpcURL namingUrl;", "modifier": "private static", "type": "BrpcURL", "declarator": "namingUrl", "var_name": "namingUrl"}, {"original_string": "private static ConsulNamingService consulNamingService;", "modifier": "private static", "type": "ConsulNamingService", "declarator": "consulNamingService", "var_name": "consulNamingService"}, {"original_string": "private static ConsulProcess consul;", "modifier": "private static", "type": "ConsulProcess", "declarator": "consul", "var_name": "consul"}], "file": "brpc-java-naming-consul/src/test/java/com/baidu/brpc/naming/consul/ConsulNamingServiceTest.java"}, "test_case": {"identifier": "testRegisterAndSubscribe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRegisterAndSubscribe() throws InterruptedException {\n        RegisterInfo registerInfo = createRegisterInfo(\"127.0.0.1\", 8015);\n        RegisterInfo anotherRegisterInfo = createRegisterInfo(\"127.0.0.1\", 8016);\n        consulNamingService.register(registerInfo);\n        consulNamingService.register(anotherRegisterInfo);\n        Thread.sleep(3 * 1000);\n\n        SubscribeInfo subscribeInfo = createSubscribeInfo(false);\n        final List<ServiceInstance> adds = consulNamingService.lookup(subscribeInfo);\n        Assert.assertTrue(adds.size() == 2);\n        adds.clear();\n\n        final List<ServiceInstance> deletes = new ArrayList<ServiceInstance>();\n        consulNamingService.subscribe(subscribeInfo, new NotifyListener() {\n            @Override public void notify(Collection<ServiceInstance> addList,\n                                         Collection<ServiceInstance> deleteList) {\n                adds.addAll(addList);\n                deletes.addAll(deleteList);\n                log.info(\"notify: {}, {}\", addList, deleteList);\n            }\n        });\n\n        consulNamingService.unregister(registerInfo);\n        Thread.sleep(3 * 1000);\n        Assert.assertTrue(adds.size() == 0);\n        Assert.assertTrue(deletes.size() == 1);\n        Assert.assertTrue(deletes.get(0).equals(new ServiceInstance(\"127.0.0.1\", 8015)));\n        adds.clear();\n        deletes.clear();\n\n        consulNamingService.register(registerInfo);\n        Thread.sleep(3 * 1000);\n        Assert.assertTrue(adds.size() == 1);\n        Assert.assertTrue(deletes.size() == 0);\n        Assert.assertTrue(adds.get(0).equals(new ServiceInstance(\"127.0.0.1\", 8015)));\n    }", "signature": "void testRegisterAndSubscribe()", "full_signature": "@Test public void testRegisterAndSubscribe()", "class_method_signature": "ConsulNamingServiceTest.testRegisterAndSubscribe()", "testcase": true, "constructor": false, "invocations": ["createRegisterInfo", "createRegisterInfo", "register", "register", "sleep", "createSubscribeInfo", "lookup", "assertTrue", "size", "clear", "subscribe", "addAll", "addAll", "info", "unregister", "sleep", "assertTrue", "size", "assertTrue", "size", "assertTrue", "equals", "get", "clear", "clear", "register", "sleep", "assertTrue", "size", "assertTrue", "size", "assertTrue", "equals", "get"]}, "focal_class": {"identifier": "ConsulNamingService", "superclass": "extends  FailbackNamingService", "interfaces": "implements NamingService", "fields": [{"original_string": "private BrpcURL url;", "modifier": "private", "type": "BrpcURL", "declarator": "url", "var_name": "url"}, {"original_string": "private ConsulClient client;", "modifier": "private", "type": "ConsulClient", "declarator": "client", "var_name": "client"}, {"original_string": "private int consulInterval;", "modifier": "private", "type": "int", "declarator": "consulInterval", "var_name": "consulInterval"}, {"original_string": "private int lookupInterval;", "modifier": "private", "type": "int", "declarator": "lookupInterval", "var_name": "lookupInterval"}, {"original_string": "private ConcurrentMap<SubscribeInfo, WatchTask> watchTaskMap\n            = new ConcurrentHashMap<SubscribeInfo, WatchTask>();", "modifier": "private", "type": "ConcurrentMap<SubscribeInfo, WatchTask>", "declarator": "watchTaskMap\n            = new ConcurrentHashMap<SubscribeInfo, WatchTask>()", "var_name": "watchTaskMap"}, {"original_string": "private Set<String> instanceIds = new ConcurrentSet<String>();", "modifier": "private", "type": "Set<String>", "declarator": "instanceIds = new ConcurrentSet<String>()", "var_name": "instanceIds"}, {"original_string": "private ScheduledExecutorService heartbeatExecutor;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "heartbeatExecutor", "var_name": "heartbeatExecutor"}, {"original_string": "private ExecutorService watchExecutor;", "modifier": "private", "type": "ExecutorService", "declarator": "watchExecutor", "var_name": "watchExecutor"}], "methods": [{"identifier": "ConsulNamingService", "parameters": "(BrpcURL url)", "modifiers": "public", "return": "", "signature": " ConsulNamingService(BrpcURL url)", "full_signature": "public  ConsulNamingService(BrpcURL url)", "class_method_signature": "ConsulNamingService.ConsulNamingService(BrpcURL url)", "testcase": false, "constructor": true}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "ConsulNamingService.destroy()", "testcase": false, "constructor": false}, {"identifier": "lookup", "parameters": "(SubscribeInfo subscribeInfo)", "modifiers": "@Override public", "return": "List<ServiceInstance>", "signature": "List<ServiceInstance> lookup(SubscribeInfo subscribeInfo)", "full_signature": "@Override public List<ServiceInstance> lookup(SubscribeInfo subscribeInfo)", "class_method_signature": "ConsulNamingService.lookup(SubscribeInfo subscribeInfo)", "testcase": false, "constructor": false}, {"identifier": "doSubscribe", "parameters": "(SubscribeInfo subscribeInfo, NotifyListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void doSubscribe(SubscribeInfo subscribeInfo, NotifyListener listener)", "full_signature": "@Override public void doSubscribe(SubscribeInfo subscribeInfo, NotifyListener listener)", "class_method_signature": "ConsulNamingService.doSubscribe(SubscribeInfo subscribeInfo, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "doUnsubscribe", "parameters": "(SubscribeInfo subscribeInfo)", "modifiers": "@Override public", "return": "void", "signature": "void doUnsubscribe(SubscribeInfo subscribeInfo)", "full_signature": "@Override public void doUnsubscribe(SubscribeInfo subscribeInfo)", "class_method_signature": "ConsulNamingService.doUnsubscribe(SubscribeInfo subscribeInfo)", "testcase": false, "constructor": false}, {"identifier": "doRegister", "parameters": "(RegisterInfo registerInfo)", "modifiers": "@Override public", "return": "void", "signature": "void doRegister(RegisterInfo registerInfo)", "full_signature": "@Override public void doRegister(RegisterInfo registerInfo)", "class_method_signature": "ConsulNamingService.doRegister(RegisterInfo registerInfo)", "testcase": false, "constructor": false}, {"identifier": "doUnregister", "parameters": "(RegisterInfo registerInfo)", "modifiers": "@Override public", "return": "void", "signature": "void doUnregister(RegisterInfo registerInfo)", "full_signature": "@Override public void doUnregister(RegisterInfo registerInfo)", "class_method_signature": "ConsulNamingService.doUnregister(RegisterInfo registerInfo)", "testcase": false, "constructor": false}, {"identifier": "getConsulNewService", "parameters": "(RegisterInfo registerInfo)", "modifiers": "private", "return": "NewService", "signature": "NewService getConsulNewService(RegisterInfo registerInfo)", "full_signature": "private NewService getConsulNewService(RegisterInfo registerInfo)", "class_method_signature": "ConsulNamingService.getConsulNewService(RegisterInfo registerInfo)", "testcase": false, "constructor": false}, {"identifier": "generateInstanceId", "parameters": "(RegisterInfo registerInfo)", "modifiers": "public", "return": "String", "signature": "String generateInstanceId(RegisterInfo registerInfo)", "full_signature": "public String generateInstanceId(RegisterInfo registerInfo)", "class_method_signature": "ConsulNamingService.generateInstanceId(RegisterInfo registerInfo)", "testcase": false, "constructor": false}, {"identifier": "lookupHealthService", "parameters": "(String serviceName, long lastConsulIndex)", "modifiers": "public", "return": "Response<List<HealthService>>", "signature": "Response<List<HealthService>> lookupHealthService(String serviceName, long lastConsulIndex)", "full_signature": "public Response<List<HealthService>> lookupHealthService(String serviceName, long lastConsulIndex)", "class_method_signature": "ConsulNamingService.lookupHealthService(String serviceName, long lastConsulIndex)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Response<List<HealthService>> consulServices)", "modifiers": "public", "return": "List<ServiceInstance>", "signature": "List<ServiceInstance> convert(Response<List<HealthService>> consulServices)", "full_signature": "public List<ServiceInstance> convert(Response<List<HealthService>> consulServices)", "class_method_signature": "ConsulNamingService.convert(Response<List<HealthService>> consulServices)", "testcase": false, "constructor": false}], "file": "brpc-java-naming-consul/src/main/java/com/baidu/brpc/naming/consul/ConsulNamingService.java"}, "focal_method": {"identifier": "lookup", "parameters": "(SubscribeInfo subscribeInfo)", "modifiers": "@Override public", "return": "List<ServiceInstance>", "body": "@Override\n    public List<ServiceInstance> lookup(SubscribeInfo subscribeInfo) {\n        try {\n            Response<List<HealthService>> consulServices = lookupHealthService(\n                    subscribeInfo.getServiceId(), -1);\n            List<ServiceInstance> instances = convert(consulServices);\n            log.info(\"lookup {} instances from consul\", instances.size());\n            return instances;\n        } catch (Exception ex) {\n            log.warn(\"lookup endpoint list failed from {}, msg={}\",\n                    url, ex.getMessage());\n            if (!subscribeInfo.isIgnoreFailOfNamingService()) {\n                throw new RpcException(\"lookup endpoint list failed from consul failed\", ex);\n            } else {\n                return new ArrayList<ServiceInstance>();\n            }\n        }\n    }", "signature": "List<ServiceInstance> lookup(SubscribeInfo subscribeInfo)", "full_signature": "@Override public List<ServiceInstance> lookup(SubscribeInfo subscribeInfo)", "class_method_signature": "ConsulNamingService.lookup(SubscribeInfo subscribeInfo)", "testcase": false, "constructor": false, "invocations": ["lookupHealthService", "getServiceId", "convert", "info", "size", "warn", "getMessage", "isIgnoreFailOfNamingService"]}, "repository": {"repo_id": 162548942, "url": "https://github.com/baidu/brpc-java", "language": "Java", "is_fork": false, "fork_count": 175, "stargazer_count": 551, "size": 3271, "license": "licensed"}}