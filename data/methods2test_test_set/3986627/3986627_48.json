{"test_class": {"identifier": "PartialScanFileAcceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PartialScanFileAcceptor fixture;", "modifier": "private", "type": "PartialScanFileAcceptor", "declarator": "fixture", "var_name": "fixture"}, {"original_string": "private ProjectLocale translation;", "modifier": "private", "type": "ProjectLocale", "declarator": "translation", "var_name": "translation"}, {"original_string": "private ProjectLocale template;", "modifier": "private", "type": "ProjectLocale", "declarator": "template", "var_name": "template"}], "file": "org.jabylon.properties/src/test/java/org/jabylon/properties/util/scanner/PartialScanFileAcceptorTest.java"}, "test_case": {"identifier": "testNewMatchExistingTemplate", "parameters": "()", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) @Test public", "return": "void", "body": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n\t@Test\n\tpublic void testNewMatchExistingTemplate() throws Exception {\n\t\tURI uri = URI.createFileURI(\"foo/test.properties\");\n\t\tPropertyFileDescriptor descriptor = getFixture().createDescriptor(template, uri);\n\t\ttemplate.getDescriptors().add(descriptor);\n\t\tResolvable folder = PropertyResourceUtil.getOrCreateFolder(template, \"foo\");\n\t\tfolder.getChildren().add(descriptor);\n\n\t\turi = URI.createFileURI(\"foo/test_de.properties\");\n\t\tPropertyFileDescriptor translationDescriptor = getFixture().createDescriptor(translation, uri);\n\t\ttranslation.getDescriptors().add(translationDescriptor);\n\t\tfolder = PropertyResourceUtil.getOrCreateFolder(translation, \"foo\");\n\t\tfolder.getChildren().add(translationDescriptor);\n\t\ttranslationDescriptor.setMaster(descriptor);\n\t\tgetFixture().newMatch(new File(\"workspace/test/master/foo/test.properties\"));\n\n\t\tassertEquals(\"Must not be added again\",1,template.getChild(\"foo\").getChildren().size());\n\t\tassertEquals(\"Must not be added again\",1,translation.getChild(\"foo\").getChildren().size());\n\t}", "signature": "void testNewMatchExistingTemplate()", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) @Test public void testNewMatchExistingTemplate()", "class_method_signature": "PartialScanFileAcceptorTest.testNewMatchExistingTemplate()", "testcase": true, "constructor": false, "invocations": ["createFileURI", "createDescriptor", "getFixture", "add", "getDescriptors", "getOrCreateFolder", "add", "getChildren", "createFileURI", "createDescriptor", "getFixture", "add", "getDescriptors", "getOrCreateFolder", "add", "getChildren", "setMaster", "newMatch", "getFixture", "assertEquals", "size", "getChildren", "getChild", "assertEquals", "size", "getChildren", "getChild"]}, "focal_class": {"identifier": "PartialScanFileAcceptor", "superclass": "extends AbstractScanFileAcceptor", "interfaces": "", "fields": [], "methods": [{"identifier": "PartialScanFileAcceptor", "parameters": "(ProjectVersion projectVersion, PropertyScanner scanner, ScanConfiguration config)", "modifiers": "public", "return": "", "signature": " PartialScanFileAcceptor(ProjectVersion projectVersion, PropertyScanner scanner, ScanConfiguration config)", "full_signature": "public  PartialScanFileAcceptor(ProjectVersion projectVersion, PropertyScanner scanner, ScanConfiguration config)", "class_method_signature": "PartialScanFileAcceptor.PartialScanFileAcceptor(ProjectVersion projectVersion, PropertyScanner scanner, ScanConfiguration config)", "testcase": false, "constructor": true}, {"identifier": "newMatch", "parameters": "(File file)", "modifiers": "@Override public", "return": "void", "signature": "void newMatch(File file)", "full_signature": "@Override public void newMatch(File file)", "class_method_signature": "PartialScanFileAcceptor.newMatch(File file)", "testcase": false, "constructor": false}, {"identifier": "newTranslationMatch", "parameters": "(File file)", "modifiers": "private", "return": "void", "signature": "void newTranslationMatch(File file)", "full_signature": "private void newTranslationMatch(File file)", "class_method_signature": "PartialScanFileAcceptor.newTranslationMatch(File file)", "testcase": false, "constructor": false}, {"identifier": "newTemplateMatch", "parameters": "(File file)", "modifiers": "private", "return": "void", "signature": "void newTemplateMatch(File file)", "full_signature": "private void newTemplateMatch(File file)", "class_method_signature": "PartialScanFileAcceptor.newTemplateMatch(File file)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateProjectLocale", "parameters": "(Locale locale)", "modifiers": "public", "return": "ProjectLocale", "signature": "ProjectLocale getOrCreateProjectLocale(Locale locale)", "full_signature": "public ProjectLocale getOrCreateProjectLocale(Locale locale)", "class_method_signature": "PartialScanFileAcceptor.getOrCreateProjectLocale(Locale locale)", "testcase": false, "constructor": false}], "file": "org.jabylon.properties/src/main/java/org/jabylon/properties/util/scanner/PartialScanFileAcceptor.java"}, "focal_method": {"identifier": "newMatch", "parameters": "(File file)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void newMatch(File file) {\n\n        if(getPropertyScanner().isTemplate(file, getScanConfig().getMasterLocale()))\n            newTemplateMatch(file);\n        else if(getPropertyScanner().isTranslation(file, getScanConfig()))\n            newTranslationMatch(file);\n\n\n    }", "signature": "void newMatch(File file)", "full_signature": "@Override public void newMatch(File file)", "class_method_signature": "PartialScanFileAcceptor.newMatch(File file)", "testcase": false, "constructor": false, "invocations": ["isTemplate", "getPropertyScanner", "getMasterLocale", "getScanConfig", "newTemplateMatch", "isTranslation", "getPropertyScanner", "getScanConfig", "newTranslationMatch"]}, "repository": {"repo_id": 3986627, "url": "https://github.com/jutzig/jabylon", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 51, "size": 13400, "license": "licensed"}}