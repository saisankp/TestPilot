{"test_class": {"identifier": "ObjectAssociationAbstractTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public JUnitRuleMockery2 context = JUnitRuleMockery2.createFor(Mode.INTERFACES_AND_CLASSES);", "modifier": "@Rule\n    public", "type": "JUnitRuleMockery2", "declarator": "context = JUnitRuleMockery2.createFor(Mode.INTERFACES_AND_CLASSES)", "var_name": "context"}, {"original_string": "@Mock private ObjectSpecification objectSpecification;", "modifier": "@Mock private", "type": "ObjectSpecification", "declarator": "objectSpecification", "var_name": "objectSpecification"}, {"original_string": "@Mock private ServiceInjector mockServicesInjector;", "modifier": "@Mock private", "type": "ServiceInjector", "declarator": "mockServicesInjector", "var_name": "mockServicesInjector"}, {"original_string": "@Mock private SpecificationLoader mockSpecificationLoader;", "modifier": "@Mock private", "type": "SpecificationLoader", "declarator": "mockSpecificationLoader", "var_name": "mockSpecificationLoader"}, {"original_string": "private ObjectAssociationAbstract objectAssociation;", "modifier": "private", "type": "ObjectAssociationAbstract", "declarator": "objectAssociation", "var_name": "objectAssociation"}, {"original_string": "private FacetedMethod facetedMethod;", "modifier": "private", "type": "FacetedMethod", "declarator": "facetedMethod", "var_name": "facetedMethod"}], "file": "core/metamodel/src/test/java/org/apache/isis/core/metamodel/specloader/specimpl/ObjectAssociationAbstractTest.java"}, "test_case": {"identifier": "hasChoices", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void hasChoices() throws Exception {\n        final PropertyChoicesFacet mockFacet = mockFacetIgnoring(PropertyChoicesFacet.class);\n        facetedMethod.addFacet(mockFacet);\n        assertTrue(objectAssociation.hasChoices());\n    }", "signature": "void hasChoices()", "full_signature": "@Test public void hasChoices()", "class_method_signature": "ObjectAssociationAbstractTest.hasChoices()", "testcase": true, "constructor": false, "invocations": ["mockFacetIgnoring", "addFacet", "assertTrue", "hasChoices"]}, "focal_class": {"identifier": "ObjectAssociationAbstract", "superclass": "extends ObjectMemberAbstract", "interfaces": "implements ObjectAssociation", "fields": [{"original_string": "private final ObjectSpecification specification;", "modifier": "private final", "type": "ObjectSpecification", "declarator": "specification", "var_name": "specification"}], "methods": [{"identifier": "ObjectAssociationAbstract", "parameters": "(\n            final FacetedMethod facetedMethod,\n            final FeatureType featureType,\n            final ObjectSpecification specification)", "modifiers": "public", "return": "", "signature": " ObjectAssociationAbstract(\n            final FacetedMethod facetedMethod,\n            final FeatureType featureType,\n            final ObjectSpecification specification)", "full_signature": "public  ObjectAssociationAbstract(\n            final FacetedMethod facetedMethod,\n            final FeatureType featureType,\n            final ObjectSpecification specification)", "class_method_signature": "ObjectAssociationAbstract.ObjectAssociationAbstract(\n            final FacetedMethod facetedMethod,\n            final FeatureType featureType,\n            final ObjectSpecification specification)", "testcase": false, "constructor": true}, {"identifier": "headFor", "parameters": "(final ManagedObject ownerAdapter)", "modifiers": "protected", "return": "InteractionHead", "signature": "InteractionHead headFor(final ManagedObject ownerAdapter)", "full_signature": "protected InteractionHead headFor(final ManagedObject ownerAdapter)", "class_method_signature": "ObjectAssociationAbstract.headFor(final ManagedObject ownerAdapter)", "testcase": false, "constructor": false}, {"identifier": "getFacetHolder", "parameters": "()", "modifiers": "@Override public", "return": "FacetHolder", "signature": "FacetHolder getFacetHolder()", "full_signature": "@Override public FacetHolder getFacetHolder()", "class_method_signature": "ObjectAssociationAbstract.getFacetHolder()", "testcase": false, "constructor": false}, {"identifier": "getOnType", "parameters": "()", "modifiers": "@Override public", "return": "ObjectSpecification", "signature": "ObjectSpecification getOnType()", "full_signature": "@Override public ObjectSpecification getOnType()", "class_method_signature": "ObjectAssociationAbstract.getOnType()", "testcase": false, "constructor": false}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "ObjectSpecification", "signature": "ObjectSpecification getSpecification()", "full_signature": "@Override public ObjectSpecification getSpecification()", "class_method_signature": "ObjectAssociationAbstract.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "isNotPersisted", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNotPersisted()", "full_signature": "@Override public boolean isNotPersisted()", "class_method_signature": "ObjectAssociationAbstract.isNotPersisted()", "testcase": false, "constructor": false}, {"identifier": "hasChoices", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasChoices()", "full_signature": "@Override public boolean hasChoices()", "class_method_signature": "ObjectAssociationAbstract.hasChoices()", "testcase": false, "constructor": false}, {"identifier": "isMandatory", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMandatory()", "full_signature": "@Override public boolean isMandatory()", "class_method_signature": "ObjectAssociationAbstract.isMandatory()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(final ManagedObject adapter, final InteractionInitiatedBy interactionInitiatedBy)", "modifiers": "@Override public abstract", "return": "boolean", "signature": "boolean isEmpty(final ManagedObject adapter, final InteractionInitiatedBy interactionInitiatedBy)", "full_signature": "@Override public abstract boolean isEmpty(final ManagedObject adapter, final InteractionInitiatedBy interactionInitiatedBy)", "class_method_signature": "ObjectAssociationAbstract.isEmpty(final ManagedObject adapter, final InteractionInitiatedBy interactionInitiatedBy)", "testcase": false, "constructor": false}, {"identifier": "isOneToOneAssociation", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isOneToOneAssociation()", "full_signature": "@Override public boolean isOneToOneAssociation()", "class_method_signature": "ObjectAssociationAbstract.isOneToOneAssociation()", "testcase": false, "constructor": false}], "file": "core/metamodel/src/main/java/org/apache/isis/core/metamodel/specloader/specimpl/ObjectAssociationAbstract.java"}, "focal_method": {"identifier": "hasChoices", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean hasChoices() {\n        return containsFacet(PropertyChoicesFacet.class);\n    }", "signature": "boolean hasChoices()", "full_signature": "@Override public boolean hasChoices()", "class_method_signature": "ObjectAssociationAbstract.hasChoices()", "testcase": false, "constructor": false, "invocations": ["containsFacet"]}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}