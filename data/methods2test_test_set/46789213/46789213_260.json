{"test_class": {"identifier": "TestAesDemo", "superclass": "", "interfaces": "", "fields": [], "file": "demos/aes/src/test/java/dk/alexandra/fresco/demo/TestAesDemo.java"}, "test_case": {"identifier": "testAESCmdLineBadLength", "parameters": "()", "modifiers": "@Test(expected=IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected=IllegalArgumentException.class)\n  public void testAESCmdLineBadLength() throws Exception {\n    AesDemo.main(\n        new String[]{\"-i\", \"1\", \"-p\", \"1:localhost:8081\", \"-p\", \"2:localhost:8082\",\n            \"-s\", \"dummyBool\", \"-in\", \"000102030405060708090a0b0c0d0\"});\n    fail();\n  }", "signature": "void testAESCmdLineBadLength()", "full_signature": "@Test(expected=IllegalArgumentException.class) public void testAESCmdLineBadLength()", "class_method_signature": "TestAesDemo.testAESCmdLineBadLength()", "testcase": true, "constructor": false, "invocations": ["main", "fail"]}, "focal_class": {"identifier": "AesDemo", "superclass": "", "interfaces": "implements Application<List<Boolean>, ProtocolBuilderBinary>", "fields": [{"original_string": "private Boolean[] in;", "modifier": "private", "type": "Boolean[]", "declarator": "in", "var_name": "in"}, {"original_string": "private int id;", "modifier": "private", "type": "int", "declarator": "id", "var_name": "id"}, {"original_string": "private static final int BLOCK_SIZE = 128;", "modifier": "private static final", "type": "int", "declarator": "BLOCK_SIZE = 128", "var_name": "BLOCK_SIZE"}, {"original_string": "private static final int INPUT_LENGTH = 32;", "modifier": "private static final", "type": "int", "declarator": "INPUT_LENGTH = 32", "var_name": "INPUT_LENGTH"}], "methods": [{"identifier": "AesDemo", "parameters": "(int id, Boolean[] in)", "modifiers": "public", "return": "", "signature": " AesDemo(int id, Boolean[] in)", "full_signature": "public  AesDemo(int id, Boolean[] in)", "class_method_signature": "AesDemo.AesDemo(int id, Boolean[] in)", "testcase": false, "constructor": true}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "AesDemo.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "buildComputation", "parameters": "(ProtocolBuilderBinary producer)", "modifiers": "@Override public", "return": "DRes<List<Boolean>>", "signature": "DRes<List<Boolean>> buildComputation(ProtocolBuilderBinary producer)", "full_signature": "@Override public DRes<List<Boolean>> buildComputation(ProtocolBuilderBinary producer)", "class_method_signature": "AesDemo.buildComputation(ProtocolBuilderBinary producer)", "testcase": false, "constructor": false}], "file": "demos/aes/src/main/java/dk/alexandra/fresco/demo/AesDemo.java"}, "focal_method": {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "body": "public static <ResourcePoolT extends ResourcePool> void main(String[] args) throws IOException {\n    CmdLineUtil<ResourcePoolT, ProtocolBuilderBinary> util = new CmdLineUtil<>();\n\n    util.addOption(Option.builder(\"in\")\n        .desc(\"The input to use for encryption. \" + \"A \" + INPUT_LENGTH\n            + \" char hex string. Required for player 1 and 2. \"\n            + \"For player 1 this is interpreted as the AES key. \"\n            + \"For player 2 this is interpreted as the plaintext block to encrypt.\")\n        .longOpt(\"input\").hasArg().build());\n    \n    CommandLine cmd = util.parse(args);\n    \n    // Get and validate the AES specific input.\n    Boolean[] input;\n    int myId = util.getNetworkConfiguration().getMyId();\n    if (myId == 1 || myId == 2) {\n\n      if (!cmd.hasOption(\"in\")) {\n        throw new IllegalArgumentException(\"Player 1 and 2 must submit input\");\n      } else {\n        if (cmd.getOptionValue(\"in\").length() != INPUT_LENGTH) {\n          throw new IllegalArgumentException(\n              \"bad input hex string: must be hex string of length \" + INPUT_LENGTH);\n        }\n        input = ByteAndBitConverter.toBoolean(cmd.getOptionValue(\"in\"));\n      }\n    } else {\n      if (cmd.hasOption(\"in\")) {\n        throw new IllegalArgumentException(\"Only player 1 and 2 should submit input\");\n      }\n      input = ByteAndBitConverter.toBoolean(\"00000000000000000000000000000000\");\n    }\n\n    \n    ProtocolSuite<ResourcePoolT, ProtocolBuilderBinary> psConf = util.getProtocolSuite();\n\n    SecureComputationEngine<ResourcePoolT, ProtocolBuilderBinary> sce =\n        new SecureComputationEngineImpl<>(psConf, util.getEvaluator());\n\n    ResourcePoolT resourcePool = util.getResourcePool();\n    AesDemo aes = new AesDemo(util.getNetworkConfiguration().getMyId(), input);\n    List<Boolean> aesResult = sce.runApplication(aes, resourcePool, util.getNetwork());\n    \n    util.closeNetwork();\n    sce.shutdownSCE();\n\n    // Print result.\n    boolean[] res = new boolean[BLOCK_SIZE];\n    for (int i = 0; i < BLOCK_SIZE; i++) {\n      res[i] = aesResult.get(i);\n    }\n    System.out.println(\"The resulting ciphertext is: \" + ByteAndBitConverter.toHex(res));\n\n  }", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "AesDemo.main(String[] args)", "testcase": false, "constructor": false, "invocations": ["addOption", "build", "hasArg", "longOpt", "desc", "builder", "parse", "getMyId", "getNetworkConfiguration", "hasOption", "length", "getOptionValue", "toBoolean", "getOptionValue", "hasOption", "toBoolean", "getProtocolSuite", "getEvaluator", "getResourcePool", "getMyId", "getNetworkConfiguration", "runApplication", "getNetwork", "closeNetwork", "shutdownSCE", "get", "println", "toHex"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}