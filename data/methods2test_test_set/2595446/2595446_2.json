{"test_class": {"identifier": "HttpUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "heroku-api/src/test/java/com/heroku/api/http/HttpUtilTest.java"}, "test_case": {"identifier": "encodeSpecialCharsInEmailAddressShouldNotLeaveAPeriodOrAtsign", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void encodeSpecialCharsInEmailAddressShouldNotLeaveAPeriodOrAtsign() {\n        assertEquals(\"j%40heroku%2djar%2ecom\", encodeIncludingSpecialCharacters(\"j@heroku-jar.com\"));\n    }", "signature": "void encodeSpecialCharsInEmailAddressShouldNotLeaveAPeriodOrAtsign()", "full_signature": "@Test public void encodeSpecialCharsInEmailAddressShouldNotLeaveAPeriodOrAtsign()", "class_method_signature": "HttpUtilTest.encodeSpecialCharsInEmailAddressShouldNotLeaveAPeriodOrAtsign()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "encodeIncludingSpecialCharacters"]}, "focal_class": {"identifier": "HttpUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String ENCODE_FAIL = \"Unsupported encoding exception while encoding parameters\";", "modifier": "private static", "type": "String", "declarator": "ENCODE_FAIL = \"Unsupported encoding exception while encoding parameters\"", "var_name": "ENCODE_FAIL"}, {"original_string": "static final Map<String, String> specialChars = Collections.unmodifiableMap(new HashMap<String, String>(){{\n        put(\".\", \"%2e\");\n        put(\"-\", \"%2d\");\n        put(\"*\", \"%2a\");\n        put(\"_\", \"%5f\");\n    }});", "modifier": "static final", "type": "Map<String, String>", "declarator": "specialChars = Collections.unmodifiableMap(new HashMap<String, String>(){{\n        put(\".\", \"%2e\");\n        put(\"-\", \"%2d\");\n        put(\"*\", \"%2a\");\n        put(\"_\", \"%5f\");\n    }})", "var_name": "specialChars"}], "methods": [{"identifier": "encodeParameters", "parameters": "(RequestConfig config, Heroku.RequestKey... keys)", "modifiers": "public static", "return": "String", "signature": "String encodeParameters(RequestConfig config, Heroku.RequestKey... keys)", "full_signature": "public static String encodeParameters(RequestConfig config, Heroku.RequestKey... keys)", "class_method_signature": "HttpUtil.encodeParameters(RequestConfig config, Heroku.RequestKey... keys)", "testcase": false, "constructor": false}, {"identifier": "encodeIncludingSpecialCharacters", "parameters": "(String toEncode)", "modifiers": "public static", "return": "String", "signature": "String encodeIncludingSpecialCharacters(String toEncode)", "full_signature": "public static String encodeIncludingSpecialCharacters(String toEncode)", "class_method_signature": "HttpUtil.encodeIncludingSpecialCharacters(String toEncode)", "testcase": false, "constructor": false}, {"identifier": "urlencode", "parameters": "(String toEncode, String messageIfFails)", "modifiers": "public static", "return": "String", "signature": "String urlencode(String toEncode, String messageIfFails)", "full_signature": "public static String urlencode(String toEncode, String messageIfFails)", "class_method_signature": "HttpUtil.urlencode(String toEncode, String messageIfFails)", "testcase": false, "constructor": false}, {"identifier": "noBody", "parameters": "()", "modifiers": "public static", "return": "UnsupportedOperationException", "signature": "UnsupportedOperationException noBody()", "full_signature": "public static UnsupportedOperationException noBody()", "class_method_signature": "HttpUtil.noBody()", "testcase": false, "constructor": false}, {"identifier": "toURL", "parameters": "(String url)", "modifiers": "public static", "return": "URL", "signature": "URL toURL(String url)", "full_signature": "public static URL toURL(String url)", "class_method_signature": "HttpUtil.toURL(String url)", "testcase": false, "constructor": false}, {"identifier": "insufficientPrivileges", "parameters": "(int code, byte[] bytes)", "modifiers": "public static", "return": "RequestFailedException", "signature": "RequestFailedException insufficientPrivileges(int code, byte[] bytes)", "full_signature": "public static RequestFailedException insufficientPrivileges(int code, byte[] bytes)", "class_method_signature": "HttpUtil.insufficientPrivileges(int code, byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "(InputStream in)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getBytes(InputStream in)", "full_signature": "public static byte[] getBytes(InputStream in)", "class_method_signature": "HttpUtil.getBytes(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "getUTF8String", "parameters": "(byte[] in)", "modifiers": "public static", "return": "String", "signature": "String getUTF8String(byte[] in)", "full_signature": "public static String getUTF8String(byte[] in)", "class_method_signature": "HttpUtil.getUTF8String(byte[] in)", "testcase": false, "constructor": false}], "file": "heroku-api/src/main/java/com/heroku/api/http/HttpUtil.java"}, "focal_method": {"identifier": "encodeIncludingSpecialCharacters", "parameters": "(String toEncode)", "modifiers": "public static", "return": "String", "body": "public static String encodeIncludingSpecialCharacters(String toEncode) {\n        String encoded = urlencode(toEncode, \"Unable to urlencode \" + toEncode);\n        for (Map.Entry<String, String> s : specialChars.entrySet()) {\n            encoded = encoded.replace(s.getKey(), s.getValue());\n        }\n        return encoded;\n    }", "signature": "String encodeIncludingSpecialCharacters(String toEncode)", "full_signature": "public static String encodeIncludingSpecialCharacters(String toEncode)", "class_method_signature": "HttpUtil.encodeIncludingSpecialCharacters(String toEncode)", "testcase": false, "constructor": false, "invocations": ["urlencode", "entrySet", "replace", "getKey", "getValue"]}, "repository": {"repo_id": 2595446, "url": "https://github.com/heroku/heroku.jar", "stars": 29, "created": "10/17/2011 10:35:37 PM +00:00", "updates": "2020-01-07T09:33:05+00:00", "fork": "False", "license": "licensed"}}