{"test_class": {"identifier": "SlstrTiePointGeoCodingTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TiePointGrid lat;", "modifier": "private", "type": "TiePointGrid", "declarator": "lat", "var_name": "lat"}, {"original_string": "private TiePointGrid lon;", "modifier": "private", "type": "TiePointGrid", "declarator": "lon", "var_name": "lon"}, {"original_string": "private TiePointGeoCoding referenceGeoCoding;", "modifier": "private", "type": "TiePointGeoCoding", "declarator": "referenceGeoCoding", "var_name": "referenceGeoCoding"}, {"original_string": "private SlstrTiePointGeoCoding slstrCoding;", "modifier": "private", "type": "SlstrTiePointGeoCoding", "declarator": "slstrCoding", "var_name": "slstrCoding"}], "file": "s3tbx-sentinel3-reader/src/test/java/org/esa/s3tbx/dataio/s3/slstr/SlstrTiePointGeoCodingTest.java"}, "test_case": {"identifier": "testGetGeoPos_Transform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetGeoPos_Transform() throws Exception {\n        final PixelPos pixelPos1 = new PixelPos(4, 7);\n        final PixelPos pixelPos2 = new PixelPos(6, 6);\n        final PixelPos pixelPos3 = new PixelPos(7, 4);\n        final GeoPos referenceGeoPos1 = new GeoPos();\n        final GeoPos referenceGeoPos2 = new GeoPos();\n        final GeoPos referenceGeoPos3 = new GeoPos();\n        referenceGeoCoding.getGeoPos(pixelPos1, referenceGeoPos1);\n        referenceGeoCoding.getGeoPos(pixelPos2, referenceGeoPos2);\n        referenceGeoCoding.getGeoPos(pixelPos3, referenceGeoPos3);\n\n        final AffineTransform transform = new AffineTransform();\n        transform.scale(2.0, 2.0);\n        transform.translate(1.0, 1.0);\n        final SlstrTiePointGeoCoding slstrTiePointGeoCoding =\n                new SlstrTiePointGeoCoding(lat, lon, new AffineTransform2D(transform));\n        final GeoPos slstrGeoPos1 = new GeoPos();\n        final GeoPos slstrGeoPos2 = new GeoPos();\n        final GeoPos slstrGeoPos3 = new GeoPos();\n        slstrTiePointGeoCoding.getGeoPos(pixelPos1, slstrGeoPos1);\n        slstrTiePointGeoCoding.getGeoPos(pixelPos2, slstrGeoPos2);\n        slstrTiePointGeoCoding.getGeoPos(pixelPos3, slstrGeoPos3);\n\n        assertEquals(referenceGeoPos1.getLat() * 2 , slstrGeoPos1.getLat(), 1e-8);\n        assertEquals(referenceGeoPos1.getLon() * 2, slstrGeoPos1.getLon(), 1e-8);\n\n        assertEquals(referenceGeoPos2.getLat() * 2 , slstrGeoPos2.getLat(), 1e-8);\n        assertEquals(referenceGeoPos2.getLon() * 2, slstrGeoPos2.getLon(), 1e-8);\n\n        assertEquals(referenceGeoPos3.getLat() * 2 , slstrGeoPos3.getLat(), 1e-8);\n        assertEquals(referenceGeoPos3.getLon() * 2, slstrGeoPos3.getLon(), 1e-8);\n    }", "signature": "void testGetGeoPos_Transform()", "full_signature": "@Test public void testGetGeoPos_Transform()", "class_method_signature": "SlstrTiePointGeoCodingTest.testGetGeoPos_Transform()", "testcase": true, "constructor": false, "invocations": ["getGeoPos", "getGeoPos", "getGeoPos", "scale", "translate", "getGeoPos", "getGeoPos", "getGeoPos", "assertEquals", "getLat", "getLat", "assertEquals", "getLon", "getLon", "assertEquals", "getLat", "getLat", "assertEquals", "getLon", "getLon", "assertEquals", "getLat", "getLat", "assertEquals", "getLon", "getLon"]}, "focal_class": {"identifier": "SlstrTiePointGeoCoding", "superclass": "extends TiePointGeoCoding", "interfaces": "", "fields": [{"original_string": "private final AffineTransform2D transform;", "modifier": "private final", "type": "AffineTransform2D", "declarator": "transform", "var_name": "transform"}, {"original_string": "private final AffineTransform inverse;", "modifier": "private final", "type": "AffineTransform", "declarator": "inverse", "var_name": "inverse"}], "methods": [{"identifier": "SlstrTiePointGeoCoding", "parameters": "(TiePointGrid latGrid, TiePointGrid lonGrid, AffineTransform2D transform)", "modifiers": "public", "return": "", "signature": " SlstrTiePointGeoCoding(TiePointGrid latGrid, TiePointGrid lonGrid, AffineTransform2D transform)", "full_signature": "public  SlstrTiePointGeoCoding(TiePointGrid latGrid, TiePointGrid lonGrid, AffineTransform2D transform)", "class_method_signature": "SlstrTiePointGeoCoding.SlstrTiePointGeoCoding(TiePointGrid latGrid, TiePointGrid lonGrid, AffineTransform2D transform)", "testcase": false, "constructor": true}, {"identifier": "getGeoPos", "parameters": "(PixelPos pixelPos, GeoPos geoPos)", "modifiers": "@Override public", "return": "GeoPos", "signature": "GeoPos getGeoPos(PixelPos pixelPos, GeoPos geoPos)", "full_signature": "@Override public GeoPos getGeoPos(PixelPos pixelPos, GeoPos geoPos)", "class_method_signature": "SlstrTiePointGeoCoding.getGeoPos(PixelPos pixelPos, GeoPos geoPos)", "testcase": false, "constructor": false}, {"identifier": "getPixelPos", "parameters": "(GeoPos geoPos, PixelPos pixelPos)", "modifiers": "@Override public", "return": "PixelPos", "signature": "PixelPos getPixelPos(GeoPos geoPos, PixelPos pixelPos)", "full_signature": "@Override public PixelPos getPixelPos(GeoPos geoPos, PixelPos pixelPos)", "class_method_signature": "SlstrTiePointGeoCoding.getPixelPos(GeoPos geoPos, PixelPos pixelPos)", "testcase": false, "constructor": false}, {"identifier": "transferGeoCoding", "parameters": "(Scene srcScene, Scene destScene, ProductSubsetDef subsetDef)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean transferGeoCoding(Scene srcScene, Scene destScene, ProductSubsetDef subsetDef)", "full_signature": "@Override public boolean transferGeoCoding(Scene srcScene, Scene destScene, ProductSubsetDef subsetDef)", "class_method_signature": "SlstrTiePointGeoCoding.transferGeoCoding(Scene srcScene, Scene destScene, ProductSubsetDef subsetDef)", "testcase": false, "constructor": false}, {"identifier": "canClone", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canClone()", "full_signature": "@Override public boolean canClone()", "class_method_signature": "SlstrTiePointGeoCoding.canClone()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@SuppressWarnings(\"MethodDoesntCallSuperMethod\") @Override public", "return": "GeoCoding", "signature": "GeoCoding clone()", "full_signature": "@SuppressWarnings(\"MethodDoesntCallSuperMethod\") @Override public GeoCoding clone()", "class_method_signature": "SlstrTiePointGeoCoding.clone()", "testcase": false, "constructor": false}], "file": "s3tbx-sentinel3-reader/src/main/java/org/esa/s3tbx/dataio/s3/slstr/SlstrTiePointGeoCoding.java"}, "focal_method": {"identifier": "getGeoPos", "parameters": "(PixelPos pixelPos, GeoPos geoPos)", "modifiers": "@Override public", "return": "GeoPos", "body": "@Override\n    public GeoPos getGeoPos(PixelPos pixelPos, GeoPos geoPos) {\n        PixelPos transformedPixelPos = new PixelPos();\n        transform.transform(pixelPos, transformedPixelPos);\n        return super.getGeoPos(transformedPixelPos, geoPos);\n    }", "signature": "GeoPos getGeoPos(PixelPos pixelPos, GeoPos geoPos)", "full_signature": "@Override public GeoPos getGeoPos(PixelPos pixelPos, GeoPos geoPos)", "class_method_signature": "SlstrTiePointGeoCoding.getGeoPos(PixelPos pixelPos, GeoPos geoPos)", "testcase": false, "constructor": false, "invocations": ["transform", "getGeoPos"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}