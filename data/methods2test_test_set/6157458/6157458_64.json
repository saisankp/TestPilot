{"test_class": {"identifier": "SingletonExtensionFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "pf4j/src/test/java/org/pf4j/SingletonExtensionFactoryTest.java"}, "test_case": {"identifier": "createNewEachTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createNewEachTime() {\n        ExtensionFactory extensionFactory = new SingletonExtensionFactory(FailTestExtension.class.getName());\n        Object extensionOne = extensionFactory.create(TestExtension.class);\n        Object extensionTwo = extensionFactory.create(TestExtension.class);\n        assertNotSame(extensionOne, extensionTwo);\n    }", "signature": "void createNewEachTime()", "full_signature": "@Test public void createNewEachTime()", "class_method_signature": "SingletonExtensionFactoryTest.createNewEachTime()", "testcase": true, "constructor": false, "invocations": ["getName", "create", "create", "assertNotSame"]}, "focal_class": {"identifier": "SingletonExtensionFactory", "superclass": "extends DefaultExtensionFactory", "interfaces": "", "fields": [{"original_string": "private final List<String> extensionClassNames;", "modifier": "private final", "type": "List<String>", "declarator": "extensionClassNames", "var_name": "extensionClassNames"}, {"original_string": "private Map<String, Object> cache;", "modifier": "private", "type": "Map<String, Object>", "declarator": "cache", "var_name": "cache"}], "methods": [{"identifier": "SingletonExtensionFactory", "parameters": "(String... extensionClassNames)", "modifiers": "public", "return": "", "signature": " SingletonExtensionFactory(String... extensionClassNames)", "full_signature": "public  SingletonExtensionFactory(String... extensionClassNames)", "class_method_signature": "SingletonExtensionFactory.SingletonExtensionFactory(String... extensionClassNames)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(Class<T> extensionClass)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T create(Class<T> extensionClass)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public T create(Class<T> extensionClass)", "class_method_signature": "SingletonExtensionFactory.create(Class<T> extensionClass)", "testcase": false, "constructor": false}], "file": "pf4j/src/main/java/org/pf4j/SingletonExtensionFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(Class<T> extensionClass)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "T", "body": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T create(Class<T> extensionClass) {\n        String extensionClassName = extensionClass.getName();\n        if (cache.containsKey(extensionClassName)) {\n            return (T) cache.get(extensionClassName);\n        }\n\n        T extension = super.create(extensionClass);\n        if (extensionClassNames.isEmpty() || extensionClassNames.contains(extensionClassName)) {\n            cache.put(extensionClassName, extension);\n        }\n\n        return extension;\n    }", "signature": "T create(Class<T> extensionClass)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public T create(Class<T> extensionClass)", "class_method_signature": "SingletonExtensionFactory.create(Class<T> extensionClass)", "testcase": false, "constructor": false, "invocations": ["getName", "containsKey", "get", "create", "isEmpty", "contains", "put"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}