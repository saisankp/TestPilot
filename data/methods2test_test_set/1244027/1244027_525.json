{"test_class": {"identifier": "BasicNameTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NamespaceRegistry namespaceRegistry;", "modifier": "private", "type": "NamespaceRegistry", "declarator": "namespaceRegistry", "var_name": "namespaceRegistry"}, {"original_string": "private Name name;", "modifier": "private", "type": "Name", "declarator": "name", "var_name": "name"}, {"original_string": "private String validNamespaceUri;", "modifier": "private", "type": "String", "declarator": "validNamespaceUri", "var_name": "validNamespaceUri"}, {"original_string": "private String validLocalName;", "modifier": "private", "type": "String", "declarator": "validLocalName", "var_name": "validLocalName"}, {"original_string": "private TextEncoder encoder;", "modifier": "private", "type": "TextEncoder", "declarator": "encoder", "var_name": "encoder"}, {"original_string": "private TextEncoder delimiterEncoder;", "modifier": "private", "type": "TextEncoder", "declarator": "delimiterEncoder", "var_name": "delimiterEncoder"}, {"original_string": "private String validNamespacePrefix;", "modifier": "private", "type": "String", "declarator": "validNamespacePrefix", "var_name": "validNamespacePrefix"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/value/basic/BasicNameTest.java"}, "test_case": {"identifier": "shouldUseNamespacePrefixInResultFromGetStringWithNamespaceRegistry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUseNamespacePrefixInResultFromGetStringWithNamespaceRegistry() {\n        String result = name.getString(namespaceRegistry, encoder);\n        assertThat(result, is(\"mode:\" + validLocalName));\n\n        validLocalName = \"some:name:with:colons\";\n        name = new BasicName(validNamespaceUri, validLocalName);\n        result = name.getString(namespaceRegistry, encoder);\n        assertThat(result, is(\"mode:some%3aname%3awith%3acolons\"));\n    }", "signature": "void shouldUseNamespacePrefixInResultFromGetStringWithNamespaceRegistry()", "full_signature": "@Test public void shouldUseNamespacePrefixInResultFromGetStringWithNamespaceRegistry()", "class_method_signature": "BasicNameTest.shouldUseNamespacePrefixInResultFromGetStringWithNamespaceRegistry()", "testcase": true, "constructor": false, "invocations": ["getString", "assertThat", "is", "getString", "assertThat", "is"]}, "focal_class": {"identifier": "BasicName", "superclass": "", "interfaces": "implements Name", "fields": [{"original_string": "private static final Map<String, String> BUILT_IN_NAMESPACES;", "modifier": "private static final", "type": "Map<String, String>", "declarator": "BUILT_IN_NAMESPACES", "var_name": "BUILT_IN_NAMESPACES"}, {"original_string": "private static final long serialVersionUID = -1737537720336990144L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -1737537720336990144L", "var_name": "serialVersionUID"}, {"original_string": "private final String namespaceUri;", "modifier": "private final", "type": "String", "declarator": "namespaceUri", "var_name": "namespaceUri"}, {"original_string": "private final String localName;", "modifier": "private final", "type": "String", "declarator": "localName", "var_name": "localName"}, {"original_string": "private final int hc;", "modifier": "private final", "type": "int", "declarator": "hc", "var_name": "hc"}], "methods": [{"identifier": "trimNonEmptyStrings", "parameters": "( String value )", "modifiers": "private", "return": "String", "signature": "String trimNonEmptyStrings( String value )", "full_signature": "private String trimNonEmptyStrings( String value )", "class_method_signature": "BasicName.trimNonEmptyStrings( String value )", "testcase": false, "constructor": false}, {"identifier": "BasicName", "parameters": "( String namespaceUri,\n                      String localName )", "modifiers": "public", "return": "", "signature": " BasicName( String namespaceUri,\n                      String localName )", "full_signature": "public  BasicName( String namespaceUri,\n                      String localName )", "class_method_signature": "BasicName.BasicName( String namespaceUri,\n                      String localName )", "testcase": false, "constructor": true}, {"identifier": "getLocalName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLocalName()", "full_signature": "@Override public String getLocalName()", "class_method_signature": "BasicName.getLocalName()", "testcase": false, "constructor": false}, {"identifier": "getNamespaceUri", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getNamespaceUri()", "full_signature": "@Override public String getNamespaceUri()", "class_method_signature": "BasicName.getNamespaceUri()", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getString()", "full_signature": "@Override public String getString()", "class_method_signature": "BasicName.getString()", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "( TextEncoder encoder )", "modifiers": "@Override public", "return": "String", "signature": "String getString( TextEncoder encoder )", "full_signature": "@Override public String getString( TextEncoder encoder )", "class_method_signature": "BasicName.getString( TextEncoder encoder )", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "( NamespaceRegistry namespaceRegistry )", "modifiers": "@Override public", "return": "String", "signature": "String getString( NamespaceRegistry namespaceRegistry )", "full_signature": "@Override public String getString( NamespaceRegistry namespaceRegistry )", "class_method_signature": "BasicName.getString( NamespaceRegistry namespaceRegistry )", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "( NamespaceRegistry namespaceRegistry,\n                             TextEncoder encoder )", "modifiers": "@Override public", "return": "String", "signature": "String getString( NamespaceRegistry namespaceRegistry,\n                             TextEncoder encoder )", "full_signature": "@Override public String getString( NamespaceRegistry namespaceRegistry,\n                             TextEncoder encoder )", "class_method_signature": "BasicName.getString( NamespaceRegistry namespaceRegistry,\n                             TextEncoder encoder )", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "( NamespaceRegistry namespaceRegistry,\n                             TextEncoder encoder,\n                             TextEncoder delimiterEncoder )", "modifiers": "@Override public", "return": "String", "signature": "String getString( NamespaceRegistry namespaceRegistry,\n                             TextEncoder encoder,\n                             TextEncoder delimiterEncoder )", "full_signature": "@Override public String getString( NamespaceRegistry namespaceRegistry,\n                             TextEncoder encoder,\n                             TextEncoder delimiterEncoder )", "class_method_signature": "BasicName.getString( NamespaceRegistry namespaceRegistry,\n                             TextEncoder encoder,\n                             TextEncoder delimiterEncoder )", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "( Name that )", "modifiers": "@Override public", "return": "int", "signature": "int compareTo( Name that )", "full_signature": "@Override public int compareTo( Name that )", "class_method_signature": "BasicName.compareTo( Name that )", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BasicName.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( Object obj )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals( Object obj )", "full_signature": "@Override public boolean equals( Object obj )", "class_method_signature": "BasicName.equals( Object obj )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BasicName.toString()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/value/basic/BasicName.java"}, "focal_method": {"identifier": "getString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getString() {\n        return getString(Path.DEFAULT_ENCODER);\n    }", "signature": "String getString()", "full_signature": "@Override public String getString()", "class_method_signature": "BasicName.getString()", "testcase": false, "constructor": false, "invocations": ["getString"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}