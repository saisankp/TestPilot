{"test_class": {"identifier": "DeflateCompressorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static byte[] CONTENT = new DefaultDeflateCompatibilityWindow().getCorpus();", "modifier": "private final static", "type": "byte[]", "declarator": "CONTENT = new DefaultDeflateCompatibilityWindow().getCorpus()", "var_name": "CONTENT"}, {"original_string": "private DeflateCompressor compressor;", "modifier": "private", "type": "DeflateCompressor", "declarator": "compressor", "var_name": "compressor"}, {"original_string": "private ByteArrayInputStream rawContentIn;", "modifier": "private", "type": "ByteArrayInputStream", "declarator": "rawContentIn", "var_name": "rawContentIn"}, {"original_string": "private ByteArrayOutputStream compressedContentOut;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "compressedContentOut", "var_name": "compressedContentOut"}], "file": "feya/libraries/archive_diff/diff.shared/src/test/java/com/google/archivepatcher/shared/DeflateCompressorTest.java"}, "test_case": {"identifier": "testSetOutputBufferSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSetOutputBufferSize() throws IOException {\n    Assert.assertNotEquals(17, compressor.getOutputBufferSize()); // Ensure test is valid\n    compressor.setOutputBufferSize(17); // Arbitrary non-default value\n    Assert.assertEquals(17, compressor.getOutputBufferSize());\n    compressor.compress(rawContentIn, compressedContentOut);\n    byte[] uncompressed =\n        uncompressWithJavaInflater(compressor.isNowrap(), compressedContentOut.toByteArray());\n    Assert.assertArrayEquals(CONTENT, uncompressed);\n  }", "signature": "void testSetOutputBufferSize()", "full_signature": "@Test public void testSetOutputBufferSize()", "class_method_signature": "DeflateCompressorTest.testSetOutputBufferSize()", "testcase": true, "constructor": false, "invocations": ["assertNotEquals", "getOutputBufferSize", "setOutputBufferSize", "assertEquals", "getOutputBufferSize", "compress", "uncompressWithJavaInflater", "isNowrap", "toByteArray", "assertArrayEquals"]}, "focal_class": {"identifier": "DeflateCompressor", "superclass": "", "interfaces": "implements Compressor", "fields": [{"original_string": "private int compressionLevel = Deflater.DEFAULT_COMPRESSION;", "modifier": "private", "type": "int", "declarator": "compressionLevel = Deflater.DEFAULT_COMPRESSION", "var_name": "compressionLevel"}, {"original_string": "private int strategy = Deflater.DEFAULT_STRATEGY;", "modifier": "private", "type": "int", "declarator": "strategy = Deflater.DEFAULT_STRATEGY", "var_name": "strategy"}, {"original_string": "private boolean nowrap = true;", "modifier": "private", "type": "boolean", "declarator": "nowrap = true", "var_name": "nowrap"}, {"original_string": "private int inputBufferSize = 32768;", "modifier": "private", "type": "int", "declarator": "inputBufferSize = 32768", "var_name": "inputBufferSize"}, {"original_string": "private int outputBufferSize = 32768;", "modifier": "private", "type": "int", "declarator": "outputBufferSize = 32768", "var_name": "outputBufferSize"}, {"original_string": "private Deflater deflater = null;", "modifier": "private", "type": "Deflater", "declarator": "deflater = null", "var_name": "deflater"}, {"original_string": "private boolean caching = false;", "modifier": "private", "type": "boolean", "declarator": "caching = false", "var_name": "caching"}], "methods": [{"identifier": "isNowrap", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNowrap()", "full_signature": "public boolean isNowrap()", "class_method_signature": "DeflateCompressor.isNowrap()", "testcase": false, "constructor": false}, {"identifier": "setNowrap", "parameters": "(boolean nowrap)", "modifiers": "public", "return": "void", "signature": "void setNowrap(boolean nowrap)", "full_signature": "public void setNowrap(boolean nowrap)", "class_method_signature": "DeflateCompressor.setNowrap(boolean nowrap)", "testcase": false, "constructor": false}, {"identifier": "getCompressionLevel", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCompressionLevel()", "full_signature": "public int getCompressionLevel()", "class_method_signature": "DeflateCompressor.getCompressionLevel()", "testcase": false, "constructor": false}, {"identifier": "setCompressionLevel", "parameters": "(int compressionLevel)", "modifiers": "public", "return": "void", "signature": "void setCompressionLevel(int compressionLevel)", "full_signature": "public void setCompressionLevel(int compressionLevel)", "class_method_signature": "DeflateCompressor.setCompressionLevel(int compressionLevel)", "testcase": false, "constructor": false}, {"identifier": "getStrategy", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStrategy()", "full_signature": "public int getStrategy()", "class_method_signature": "DeflateCompressor.getStrategy()", "testcase": false, "constructor": false}, {"identifier": "setStrategy", "parameters": "(int strategy)", "modifiers": "public", "return": "void", "signature": "void setStrategy(int strategy)", "full_signature": "public void setStrategy(int strategy)", "class_method_signature": "DeflateCompressor.setStrategy(int strategy)", "testcase": false, "constructor": false}, {"identifier": "getInputBufferSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getInputBufferSize()", "full_signature": "public int getInputBufferSize()", "class_method_signature": "DeflateCompressor.getInputBufferSize()", "testcase": false, "constructor": false}, {"identifier": "setInputBufferSize", "parameters": "(int inputBufferSize)", "modifiers": "public", "return": "void", "signature": "void setInputBufferSize(int inputBufferSize)", "full_signature": "public void setInputBufferSize(int inputBufferSize)", "class_method_signature": "DeflateCompressor.setInputBufferSize(int inputBufferSize)", "testcase": false, "constructor": false}, {"identifier": "getOutputBufferSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getOutputBufferSize()", "full_signature": "public int getOutputBufferSize()", "class_method_signature": "DeflateCompressor.getOutputBufferSize()", "testcase": false, "constructor": false}, {"identifier": "setOutputBufferSize", "parameters": "(int outputBufferSize)", "modifiers": "public", "return": "void", "signature": "void setOutputBufferSize(int outputBufferSize)", "full_signature": "public void setOutputBufferSize(int outputBufferSize)", "class_method_signature": "DeflateCompressor.setOutputBufferSize(int outputBufferSize)", "testcase": false, "constructor": false}, {"identifier": "isCaching", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCaching()", "full_signature": "public boolean isCaching()", "class_method_signature": "DeflateCompressor.isCaching()", "testcase": false, "constructor": false}, {"identifier": "setCaching", "parameters": "(boolean caching)", "modifiers": "public", "return": "void", "signature": "void setCaching(boolean caching)", "full_signature": "public void setCaching(boolean caching)", "class_method_signature": "DeflateCompressor.setCaching(boolean caching)", "testcase": false, "constructor": false}, {"identifier": "createOrResetDeflater", "parameters": "()", "modifiers": "protected", "return": "Deflater", "signature": "Deflater createOrResetDeflater()", "full_signature": "protected Deflater createOrResetDeflater()", "class_method_signature": "DeflateCompressor.createOrResetDeflater()", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void release()", "full_signature": "public void release()", "class_method_signature": "DeflateCompressor.release()", "testcase": false, "constructor": false}, {"identifier": "compress", "parameters": "(InputStream uncompressedIn, OutputStream compressedOut)", "modifiers": "@Override public", "return": "void", "signature": "void compress(InputStream uncompressedIn, OutputStream compressedOut)", "full_signature": "@Override public void compress(InputStream uncompressedIn, OutputStream compressedOut)", "class_method_signature": "DeflateCompressor.compress(InputStream uncompressedIn, OutputStream compressedOut)", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.shared/src/main/java/com/google/archivepatcher/shared/DeflateCompressor.java"}, "focal_method": {"identifier": "setOutputBufferSize", "parameters": "(int outputBufferSize)", "modifiers": "public", "return": "void", "body": "public void setOutputBufferSize(int outputBufferSize) {\n    this.outputBufferSize = outputBufferSize;\n  }", "signature": "void setOutputBufferSize(int outputBufferSize)", "full_signature": "public void setOutputBufferSize(int outputBufferSize)", "class_method_signature": "DeflateCompressor.setOutputBufferSize(int outputBufferSize)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}