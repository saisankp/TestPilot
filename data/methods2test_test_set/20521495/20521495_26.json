{"test_class": {"identifier": "SolrOperationsServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SolrOperationsServiceTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SolrOperationsServiceTest.class)", "var_name": "LOGGER"}, {"original_string": "private SolrOperationsService service;", "modifier": "private", "type": "SolrOperationsService", "declarator": "service", "var_name": "service"}, {"original_string": "private static final String HOSTS= \"localhost\";", "modifier": "private static final", "type": "String", "declarator": "HOSTS= \"localhost\"", "var_name": "HOSTS"}, {"original_string": "private static final Boolean IS_CLOUD= false;", "modifier": "private static final", "type": "Boolean", "declarator": "IS_CLOUD= false", "var_name": "IS_CLOUD"}, {"original_string": "@Rule\n    public TemporaryFolder DATA_FOLDER = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "DATA_FOLDER = new TemporaryFolder()", "var_name": "DATA_FOLDER"}, {"original_string": "@Rule\n    public TemporaryFolder CONF_FOLDER = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "CONF_FOLDER = new TemporaryFolder()", "var_name": "CONF_FOLDER"}], "file": "engine/src/test/java/com/stratio/decision/service/SolrOperationsServiceTest.java"}, "test_case": {"identifier": "testCreateCore", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void testCreateCore() throws Exception {\n\n        StratioStreamingMessage message= new StratioStreamingMessage(\n                    StreamsHelper.STREAM_NAME, Long.parseLong(\"1234567890\"), StreamsHelper.COLUMNS);\n            service.createCore(message);\n    }", "signature": "void testCreateCore()", "full_signature": "@Test @Ignore public void testCreateCore()", "class_method_signature": "SolrOperationsServiceTest.testCreateCore()", "testcase": true, "constructor": false, "invocations": ["parseLong", "createCore"]}, "focal_class": {"identifier": "SolrOperationsService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(SolrOperationsService.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SolrOperationsService.class)", "var_name": "log"}, {"original_string": "private String solrHosts;", "modifier": "private", "type": "String", "declarator": "solrHosts", "var_name": "solrHosts"}, {"original_string": "private String zkHosts;", "modifier": "private", "type": "String", "declarator": "zkHosts", "var_name": "zkHosts"}, {"original_string": "private String dataDir;", "modifier": "private", "type": "String", "declarator": "dataDir", "var_name": "dataDir"}, {"original_string": "private Boolean isCloud;", "modifier": "private", "type": "Boolean", "declarator": "isCloud", "var_name": "isCloud"}], "methods": [{"identifier": "SolrOperationsService", "parameters": "(String solrHosts, String zkHosts, String dataDir, Boolean isCloud)", "modifiers": "public", "return": "", "signature": " SolrOperationsService(String solrHosts, String zkHosts, String dataDir, Boolean isCloud)", "full_signature": "public  SolrOperationsService(String solrHosts, String zkHosts, String dataDir, Boolean isCloud)", "class_method_signature": "SolrOperationsService.SolrOperationsService(String solrHosts, String zkHosts, String dataDir, Boolean isCloud)", "testcase": false, "constructor": true}, {"identifier": "createCore", "parameters": "(StratioStreamingMessage message)", "modifiers": "public", "return": "void", "signature": "void createCore(StratioStreamingMessage message)", "full_signature": "public void createCore(StratioStreamingMessage message)", "class_method_signature": "SolrOperationsService.createCore(StratioStreamingMessage message)", "testcase": false, "constructor": false}, {"identifier": "createDirs", "parameters": "(String dataPath, String confPath)", "modifiers": "public", "return": "void", "signature": "void createDirs(String dataPath, String confPath)", "full_signature": "public void createDirs(String dataPath, String confPath)", "class_method_signature": "SolrOperationsService.createDirs(String dataPath, String confPath)", "testcase": false, "constructor": false}, {"identifier": "createSolrConfig", "parameters": "(String confPath)", "modifiers": "public", "return": "void", "signature": "void createSolrConfig(String confPath)", "full_signature": "public void createSolrConfig(String confPath)", "class_method_signature": "SolrOperationsService.createSolrConfig(String confPath)", "testcase": false, "constructor": false}, {"identifier": "createSolrSchema", "parameters": "(List<ColumnNameTypeValue> columns, String confpath)", "modifiers": "public", "return": "void", "signature": "void createSolrSchema(List<ColumnNameTypeValue> columns, String confpath)", "full_signature": "public void createSolrSchema(List<ColumnNameTypeValue> columns, String confpath)", "class_method_signature": "SolrOperationsService.createSolrSchema(List<ColumnNameTypeValue> columns, String confpath)", "testcase": false, "constructor": false}, {"identifier": "streamingToSolr", "parameters": "(ColumnType column)", "modifiers": "private", "return": "String", "signature": "String streamingToSolr(ColumnType column)", "full_signature": "private String streamingToSolr(ColumnType column)", "class_method_signature": "SolrOperationsService.streamingToSolr(ColumnType column)", "testcase": false, "constructor": false}, {"identifier": "getCoreList", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getCoreList()", "full_signature": "public List<String> getCoreList()", "class_method_signature": "SolrOperationsService.getCoreList()", "testcase": false, "constructor": false}, {"identifier": "getSolrclient", "parameters": "(String core)", "modifiers": "private", "return": "SolrClient", "signature": "SolrClient getSolrclient(String core)", "full_signature": "private SolrClient getSolrclient(String core)", "class_method_signature": "SolrOperationsService.getSolrclient(String core)", "testcase": false, "constructor": false}], "file": "engine/src/main/java/com/stratio/decision/service/SolrOperationsService.java"}, "focal_method": {"identifier": "createCore", "parameters": "(StratioStreamingMessage message)", "modifiers": "public", "return": "void", "body": "public void createCore(StratioStreamingMessage message) throws IOException, URISyntaxException, SolrServerException, ParserConfigurationException, SAXException, TransformerException, InterruptedException {\n        String core = message.getStreamName();\n        String dataPath = this.dataDir + '/' + core + \"/data\";\n        String confPath = this.dataDir + '/' + core + \"/conf\";\n        createDirs(dataPath, confPath);\n        createSolrConfig(confPath);\n        createSolrSchema(message.getColumns(), confPath);\n        SolrClient solrClient = getSolrclient(core);\n        CoreAdminRequest.Create createCore = new CoreAdminRequest.Create();\n        createCore.setDataDir(dataPath);\n        createCore.setInstanceDir(dataDir + '/' + core);\n        createCore.setCoreName(core);\n        createCore.setSchemaName(\"schema.xml\");\n        createCore.setConfigName(\"solrconfig.xml\");\n        if (solrClient instanceof CloudSolrClient) {\n            ((CloudSolrClient)solrClient).uploadConfig(Paths.get(confPath), core);\n        }\n        solrClient.request(createCore);\n    }", "signature": "void createCore(StratioStreamingMessage message)", "full_signature": "public void createCore(StratioStreamingMessage message)", "class_method_signature": "SolrOperationsService.createCore(StratioStreamingMessage message)", "testcase": false, "constructor": false, "invocations": ["getStreamName", "createDirs", "createSolrConfig", "createSolrSchema", "getColumns", "getSolrclient", "setDataDir", "setInstanceDir", "setCoreName", "setSchemaName", "setConfigName", "uploadConfig", "get", "request"]}, "repository": {"repo_id": 20521495, "url": "https://github.com/Stratio/Decision", "language": "Java", "is_fork": false, "fork_count": 85, "stargazer_count": 305, "size": 41858, "license": "licensed"}}