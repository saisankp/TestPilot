{"test_class": {"identifier": "BSNTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected byte[] probePkt = {\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // src mac\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x04, // dst mac\n\t\t(byte) 0x89, 0x42, // BSN type\n        0x20, 0x00, 0x06, 0x04, 0x00, 0x01, 0x00, 0x00, // BSN header\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // controller id\n\t\t0x00, 0x00, 0x00, 0x03, // sequence id\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // src mac\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x04, // dst mac\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // switch dpid\n\t\t0x00, 0x00, 0x00, 0x01 // port number\n    };", "modifier": "protected", "type": "byte[]", "declarator": "probePkt = {\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // src mac\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x04, // dst mac\n\t\t(byte) 0x89, 0x42, // BSN type\n        0x20, 0x00, 0x06, 0x04, 0x00, 0x01, 0x00, 0x00, // BSN header\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // controller id\n\t\t0x00, 0x00, 0x00, 0x03, // sequence id\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // src mac\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x04, // dst mac\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // switch dpid\n\t\t0x00, 0x00, 0x00, 0x01 // port number\n    }", "var_name": "probePkt"}], "file": "network-level/fl-ho-nl/src/test/java/net/floodlightcontroller/packet/BSNTest.java"}, "test_case": {"identifier": "testSerialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSerialize() throws Exception {\n        Ethernet pkt = getProbePacket();\n        byte[] serialized = pkt.serialize();\n        assertTrue(Arrays.equals(probePkt, serialized));\n    }", "signature": "void testSerialize()", "full_signature": "@Test public void testSerialize()", "class_method_signature": "BSNTest.testSerialize()", "testcase": true, "constructor": false, "invocations": ["getProbePacket", "serialize", "assertTrue", "equals"]}, "focal_class": {"identifier": "BSN", "superclass": "extends BasePacket", "interfaces": "", "fields": [{"original_string": "public static final int BSN_MAGIC = 0x20000604;", "modifier": "public static final", "type": "int", "declarator": "BSN_MAGIC = 0x20000604", "var_name": "BSN_MAGIC"}, {"original_string": "public static final short BSN_VERSION_CURRENT = 0x0;", "modifier": "public static final", "type": "short", "declarator": "BSN_VERSION_CURRENT = 0x0", "var_name": "BSN_VERSION_CURRENT"}, {"original_string": "public static final short BSN_TYPE_PROBE = 0x1;", "modifier": "public static final", "type": "short", "declarator": "BSN_TYPE_PROBE = 0x1", "var_name": "BSN_TYPE_PROBE"}, {"original_string": "public static final short BSN_TYPE_BDDP  = 0x2;", "modifier": "public static final", "type": "short", "declarator": "BSN_TYPE_BDDP  = 0x2", "var_name": "BSN_TYPE_BDDP"}, {"original_string": "public static Map<Short, Class<? extends IPacket>> typeClassMap;", "modifier": "public static", "type": "Map<Short, Class<? extends IPacket>>", "declarator": "typeClassMap", "var_name": "typeClassMap"}, {"original_string": "protected short type;", "modifier": "protected", "type": "short", "declarator": "type", "var_name": "type"}, {"original_string": "protected short version;", "modifier": "protected", "type": "short", "declarator": "version", "var_name": "version"}], "methods": [{"identifier": "BSN", "parameters": "()", "modifiers": "public", "return": "", "signature": " BSN()", "full_signature": "public  BSN()", "class_method_signature": "BSN.BSN()", "testcase": false, "constructor": true}, {"identifier": "BSN", "parameters": "(short type)", "modifiers": "public", "return": "", "signature": " BSN(short type)", "full_signature": "public  BSN(short type)", "class_method_signature": "BSN.BSN(short type)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getType()", "full_signature": "public short getType()", "class_method_signature": "BSN.getType()", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(short type)", "modifiers": "public", "return": "BSN", "signature": "BSN setType(short type)", "full_signature": "public BSN setType(short type)", "class_method_signature": "BSN.setType(short type)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getVersion()", "full_signature": "public short getVersion()", "class_method_signature": "BSN.getVersion()", "testcase": false, "constructor": false}, {"identifier": "setVersion", "parameters": "(short version)", "modifiers": "public", "return": "BSN", "signature": "BSN setVersion(short version)", "full_signature": "public BSN setVersion(short version)", "class_method_signature": "BSN.setVersion(short version)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] serialize()", "full_signature": "@Override public byte[] serialize()", "class_method_signature": "BSN.serialize()", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(byte[] data, int offset, int length)", "modifiers": "@Override public", "return": "IPacket", "signature": "IPacket deserialize(byte[] data, int offset, int length)", "full_signature": "@Override public IPacket deserialize(byte[] data, int offset, int length)", "class_method_signature": "BSN.deserialize(byte[] data, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BSN.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "BSN.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "BSN.toString()", "testcase": false, "constructor": false}], "file": "network-level/fl-ho-nl/src/main/java/net/floodlightcontroller/packet/BSN.java"}, "focal_method": {"identifier": "serialize", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n    public byte[] serialize() {\n    \tshort length = 4 /* magic */ + 2 /* type */ + 2 /* version */;\n    \t\n    \tbyte[] payloadData = null;\n    \tif (this.payload != null) {\n            payload.setParent(this);\n            payloadData = payload.serialize();\n            length += payloadData.length;\n        }\n    \n        byte[] data = new byte[length];\n        ByteBuffer bb = ByteBuffer.wrap(data);\n        bb.putInt(BSN_MAGIC);\n        bb.putShort(this.type);\n        bb.putShort(this.version);\n        if (payloadData != null)\n        \tbb.put(payloadData);\n\n        if (this.parent != null && this.parent instanceof Ethernet)\n            ((Ethernet)this.parent).setEtherType(Ethernet.TYPE_BSN);\n\n        return data;\n    }", "signature": "byte[] serialize()", "full_signature": "@Override public byte[] serialize()", "class_method_signature": "BSN.serialize()", "testcase": false, "constructor": false, "invocations": ["setParent", "serialize", "wrap", "putInt", "putShort", "putShort", "put", "setEtherType"]}, "repository": {"repo_id": 10459637, "url": "https://github.com/rizard/geni-openflow-vertical-handover", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 33971, "license": "licensed"}}