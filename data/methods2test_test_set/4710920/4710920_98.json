{"test_class": {"identifier": "ClusterUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ClusterUtilsTest.java"}, "test_case": {"identifier": "testUseProviderParams", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUseProviderParams() {\n        // present in both local and remote, but uses remote value.\n        URL localURL = URL.valueOf(\"dubbo://localhost:20880/DemoService?version=local&group=local&dubbo=local&release=local\" +\n                \"&methods=local&tag=local&timestamp=local\");\n        URL remoteURL = URL.valueOf(\"dubbo://localhost:20880/DemoService?version=remote&group=remote&dubbo=remote&release=remote\" +\n                \"&methods=remote&tag=remote&timestamp=remote\");\n        URL mergedUrl = ClusterUtils.mergeUrl(remoteURL, localURL.getParameters());\n\n        Assertions.assertEquals(remoteURL.getParameter(VERSION_KEY), mergedUrl.getParameter(VERSION_KEY));\n        Assertions.assertEquals(remoteURL.getParameter(GROUP_KEY), mergedUrl.getParameter(GROUP_KEY));\n        Assertions.assertEquals(remoteURL.getParameter(DUBBO_VERSION_KEY), mergedUrl.getParameter(DUBBO_VERSION_KEY));\n        Assertions.assertEquals(remoteURL.getParameter(RELEASE_KEY), mergedUrl.getParameter(RELEASE_KEY));\n        Assertions.assertEquals(remoteURL.getParameter(METHODS_KEY), mergedUrl.getParameter(METHODS_KEY));\n        Assertions.assertEquals(remoteURL.getParameter(TIMESTAMP_KEY), mergedUrl.getParameter(TIMESTAMP_KEY));\n        Assertions.assertEquals(remoteURL.getParameter(TAG_KEY), mergedUrl.getParameter(TAG_KEY));\n\n        // present in local url but not in remote url, parameters of remote url is empty\n        localURL = URL.valueOf(\"dubbo://localhost:20880/DemoService?version=local&group=local&dubbo=local&release=local\" +\n                \"&methods=local&tag=local&timestamp=local\");\n        remoteURL = URL.valueOf(\"dubbo://localhost:20880/DemoService\");\n        mergedUrl = ClusterUtils.mergeUrl(remoteURL, localURL.getParameters());\n\n        Assertions.assertEquals(mergedUrl.getParameter(VERSION_KEY),localURL.getParameter(VERSION_KEY));\n        Assertions.assertEquals(mergedUrl.getParameter(GROUP_KEY),localURL.getParameter(GROUP_KEY));\n        Assertions.assertNull(mergedUrl.getParameter(DUBBO_VERSION_KEY));\n        Assertions.assertNull(mergedUrl.getParameter(RELEASE_KEY));\n        Assertions.assertNull(mergedUrl.getParameter(METHODS_KEY));\n        Assertions.assertNull(mergedUrl.getParameter(TIMESTAMP_KEY));\n        Assertions.assertNull(mergedUrl.getParameter(TAG_KEY));\n\n        // present in local url but not in remote url\n        localURL = URL.valueOf(\"dubbo://localhost:20880/DemoService?version=local&group=local&dubbo=local&release=local\" +\n                \"&methods=local&tag=local&timestamp=local\");\n        remoteURL = URL.valueOf(\"dubbo://localhost:20880/DemoService?key=value\");\n        mergedUrl = ClusterUtils.mergeUrl(remoteURL, localURL.getParameters());\n\n        Assertions.assertEquals(mergedUrl.getParameter(VERSION_KEY),localURL.getParameter(VERSION_KEY));\n        Assertions.assertEquals(mergedUrl.getParameter(GROUP_KEY),localURL.getParameter(GROUP_KEY));\n        Assertions.assertNull(mergedUrl.getParameter(DUBBO_VERSION_KEY));\n        Assertions.assertNull(mergedUrl.getParameter(RELEASE_KEY));\n        Assertions.assertNull(mergedUrl.getParameter(METHODS_KEY));\n        Assertions.assertNull(mergedUrl.getParameter(TIMESTAMP_KEY));\n        Assertions.assertNull(mergedUrl.getParameter(TAG_KEY));\n\n        // present in both local and remote, uses local url params\n        localURL = URL.valueOf(\"dubbo://localhost:20880/DemoService?loadbalance=local&timeout=1000&cluster=local\");\n        remoteURL = URL.valueOf(\"dubbo://localhost:20880/DemoService?loadbalance=remote&timeout=2000&cluster=remote\");\n        mergedUrl = ClusterUtils.mergeUrl(remoteURL, localURL.getParameters());\n\n        Assertions.assertEquals(localURL.getParameter(CLUSTER_KEY), mergedUrl.getParameter(CLUSTER_KEY));\n        Assertions.assertEquals(localURL.getParameter(TIMEOUT_KEY), mergedUrl.getParameter(TIMEOUT_KEY));\n        Assertions.assertEquals(localURL.getParameter(LOADBALANCE_KEY), mergedUrl.getParameter(LOADBALANCE_KEY));\n    }", "signature": "void testUseProviderParams()", "full_signature": "@Test public void testUseProviderParams()", "class_method_signature": "ClusterUtilsTest.testUseProviderParams()", "testcase": true, "constructor": false, "invocations": ["valueOf", "valueOf", "mergeUrl", "getParameters", "assertEquals", "getParameter", "getParameter", "assertEquals", "getParameter", "getParameter", "assertEquals", "getParameter", "getParameter", "assertEquals", "getParameter", "getParameter", "assertEquals", "getParameter", "getParameter", "assertEquals", "getParameter", "getParameter", "assertEquals", "getParameter", "getParameter", "valueOf", "valueOf", "mergeUrl", "getParameters", "assertEquals", "getParameter", "getParameter", "assertEquals", "getParameter", "getParameter", "assertNull", "getParameter", "assertNull", "getParameter", "assertNull", "getParameter", "assertNull", "getParameter", "assertNull", "getParameter", "valueOf", "valueOf", "mergeUrl", "getParameters", "assertEquals", "getParameter", "getParameter", "assertEquals", "getParameter", "getParameter", "assertNull", "getParameter", "assertNull", "getParameter", "assertNull", "getParameter", "assertNull", "getParameter", "assertNull", "getParameter", "valueOf", "valueOf", "mergeUrl", "getParameters", "assertEquals", "getParameter", "getParameter", "assertEquals", "getParameter", "getParameter", "assertEquals", "getParameter", "getParameter"]}, "focal_class": {"identifier": "ClusterUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ClusterUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ClusterUtils()", "full_signature": "private  ClusterUtils()", "class_method_signature": "ClusterUtils.ClusterUtils()", "testcase": false, "constructor": true}, {"identifier": "mergeUrl", "parameters": "(URL remoteUrl, Map<String, String> localMap)", "modifiers": "public static", "return": "URL", "signature": "URL mergeUrl(URL remoteUrl, Map<String, String> localMap)", "full_signature": "public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap)", "class_method_signature": "ClusterUtils.mergeUrl(URL remoteUrl, Map<String, String> localMap)", "testcase": false, "constructor": false}, {"identifier": "mergeProviderUrl", "parameters": "(URL remoteUrl, Map<String, String> localMap)", "modifiers": "public static", "return": "URL", "signature": "URL mergeProviderUrl(URL remoteUrl, Map<String, String> localMap)", "full_signature": "public static URL mergeProviderUrl(URL remoteUrl, Map<String, String> localMap)", "class_method_signature": "ClusterUtils.mergeProviderUrl(URL remoteUrl, Map<String, String> localMap)", "testcase": false, "constructor": false}], "file": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java"}, "focal_method": {"identifier": "mergeUrl", "parameters": "(URL remoteUrl, Map<String, String> localMap)", "modifiers": "public static", "return": "URL", "body": "public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap) {\n        Map<String, String> map = new HashMap<String, String>();\n        Map<String, String> remoteMap = remoteUrl.getParameters();\n\n        if (remoteMap != null && remoteMap.size() > 0) {\n            map.putAll(remoteMap);\n\n            // Remove configurations from provider, some items should be affected by provider.\n            map.remove(THREAD_NAME_KEY);\n            map.remove(DEFAULT_KEY_PREFIX + THREAD_NAME_KEY);\n\n            map.remove(THREADPOOL_KEY);\n            map.remove(DEFAULT_KEY_PREFIX + THREADPOOL_KEY);\n\n            map.remove(CORE_THREADS_KEY);\n            map.remove(DEFAULT_KEY_PREFIX + CORE_THREADS_KEY);\n\n            map.remove(THREADS_KEY);\n            map.remove(DEFAULT_KEY_PREFIX + THREADS_KEY);\n\n            map.remove(QUEUES_KEY);\n            map.remove(DEFAULT_KEY_PREFIX + QUEUES_KEY);\n\n            map.remove(ALIVE_KEY);\n            map.remove(DEFAULT_KEY_PREFIX + ALIVE_KEY);\n\n            map.remove(Constants.TRANSPORTER_KEY);\n            map.remove(DEFAULT_KEY_PREFIX + Constants.TRANSPORTER_KEY);\n        }\n\n        if (localMap != null && localMap.size() > 0) {\n            Map<String, String> copyOfLocalMap = new HashMap<>(localMap);\n\n            if(map.containsKey(GROUP_KEY)){\n                copyOfLocalMap.remove(GROUP_KEY);\n            }\n            if(map.containsKey(VERSION_KEY)){\n                copyOfLocalMap.remove(VERSION_KEY);\n            }\n\n            copyOfLocalMap.remove(RELEASE_KEY);\n            copyOfLocalMap.remove(DUBBO_VERSION_KEY);\n            copyOfLocalMap.remove(METHODS_KEY);\n            copyOfLocalMap.remove(TIMESTAMP_KEY);\n            copyOfLocalMap.remove(TAG_KEY);\n\n            map.putAll(copyOfLocalMap);\n\n            map.put(REMOTE_APPLICATION_KEY, remoteMap.get(APPLICATION_KEY));\n\n            // Combine filters and listeners on Provider and Consumer\n            String remoteFilter = remoteMap.get(REFERENCE_FILTER_KEY);\n            String localFilter = copyOfLocalMap.get(REFERENCE_FILTER_KEY);\n            if (remoteFilter != null && remoteFilter.length() > 0\n                    && localFilter != null && localFilter.length() > 0) {\n                map.put(REFERENCE_FILTER_KEY, remoteFilter + \",\" + localFilter);\n            }\n            String remoteListener = remoteMap.get(INVOKER_LISTENER_KEY);\n            String localListener = copyOfLocalMap.get(INVOKER_LISTENER_KEY);\n            if (remoteListener != null && remoteListener.length() > 0\n                    && localListener != null && localListener.length() > 0) {\n                map.put(INVOKER_LISTENER_KEY, remoteListener + \",\" + localListener);\n            }\n        }\n\n        return remoteUrl.clearParameters().addParameters(map);\n    }", "signature": "URL mergeUrl(URL remoteUrl, Map<String, String> localMap)", "full_signature": "public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap)", "class_method_signature": "ClusterUtils.mergeUrl(URL remoteUrl, Map<String, String> localMap)", "testcase": false, "constructor": false, "invocations": ["getParameters", "size", "putAll", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "size", "containsKey", "remove", "containsKey", "remove", "remove", "remove", "remove", "remove", "remove", "putAll", "put", "get", "get", "get", "length", "length", "put", "get", "get", "length", "length", "put", "addParameters", "clearParameters"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}