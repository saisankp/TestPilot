{"test_class": {"identifier": "ZeroUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final TypeVariableName K = TypeVariableName.get(\"K\");", "modifier": "private static final", "type": "TypeVariableName", "declarator": "K = TypeVariableName.get(\"K\")", "var_name": "K"}, {"original_string": "private static final TypeVariableName V = TypeVariableName.get(\"V\");", "modifier": "private static final", "type": "TypeVariableName", "declarator": "V = TypeVariableName.get(\"V\")", "var_name": "V"}, {"original_string": "private static final ParameterizedTypeName LIST_OF_K =\n      ParameterizedTypeName.get(ClassName.get(List.class), K);", "modifier": "private static final", "type": "ParameterizedTypeName", "declarator": "LIST_OF_K =\n      ParameterizedTypeName.get(ClassName.get(List.class), K)", "var_name": "LIST_OF_K"}, {"original_string": "private static final ParameterizedTypeName LIST_OF_V =\n      ParameterizedTypeName.get(ClassName.get(List.class), V);", "modifier": "private static final", "type": "ParameterizedTypeName", "declarator": "LIST_OF_V =\n      ParameterizedTypeName.get(ClassName.get(List.class), V)", "var_name": "LIST_OF_V"}, {"original_string": "private static final ParameterizedTypeName MAP_K_V =\n      ParameterizedTypeName.get(ClassName.get(Map.class), K, V);", "modifier": "private static final", "type": "ParameterizedTypeName", "declarator": "MAP_K_V =\n      ParameterizedTypeName.get(ClassName.get(Map.class), K, V)", "var_name": "MAP_K_V"}, {"original_string": "private static final ParameterizedTypeName MAP_V_LIST_OF_K =\n      ParameterizedTypeName.get(ClassName.get(Map.class), V, LIST_OF_K);", "modifier": "private static final", "type": "ParameterizedTypeName", "declarator": "MAP_V_LIST_OF_K =\n      ParameterizedTypeName.get(ClassName.get(Map.class), V, LIST_OF_K)", "var_name": "MAP_V_LIST_OF_K"}], "file": "api/src/test/java/net/zerobuilder/compiler/generate/ZeroUtilTest.java"}, "test_case": {"identifier": "testExtractTypeVars", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testExtractTypeVars() {\n    TypeVariableName a = TypeVariableName.get(\"A\");\n    TypeVariableName b = TypeVariableName.get(\"B\");\n    TypeVariableName c = TypeVariableName.get(\"C\");\n    TypeVariableName d = TypeVariableName.get(\"D\");\n    ParameterizedTypeName ab = ParameterizedTypeName.get(ClassName.get(HashMap.class), a, b);\n    ParameterizedTypeName abc = ParameterizedTypeName.get(ClassName.get(HashMap.class), ab, c);\n    ParameterizedTypeName dabc = ParameterizedTypeName.get(ClassName.get(HashMap.class), d, abc);\n    ParameterizedTypeName dabca = ParameterizedTypeName.get(ClassName.get(HashMap.class), dabc, a);\n    ParameterizedTypeName dabcab = ParameterizedTypeName.get(ClassName.get(HashMap.class), dabca, b);\n    ParameterizedTypeName ddabcab = ParameterizedTypeName.get(ClassName.get(HashMap.class), d, dabcab);\n    List<TypeVariableName> vars = extractTypeVars(ddabcab);\n    assertThat(new HashSet<>(vars), is(new HashSet<>(asList(a, b, c, d))));\n  }", "signature": "void testExtractTypeVars()", "full_signature": "@Test public void testExtractTypeVars()", "class_method_signature": "ZeroUtilTest.testExtractTypeVars()", "testcase": true, "constructor": false, "invocations": ["get", "get", "get", "get", "get", "get", "get", "get", "get", "get", "get", "get", "get", "get", "get", "get", "extractTypeVars", "assertThat", "is", "asList"]}, "focal_class": {"identifier": "ZeroUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<String> reservedWords = new HashSet<>(Arrays.asList(\n      \"abstract\", \"assert\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\",\n      \"const\", \"continue\", \"default\", \"do\", \"double\", \"else\", \"enum\", \"extends\", \"final\",\n      \"finally\", \"float\", \"for\", \"goto\", \"if\", \"implements\", \"import\", \"instanceof\", \"int\",\n      \"interface\", \"long\", \"native\", \"new\", \"package\", \"private\", \"protected\", \"public\",\n      \"return\", \"short\", \"static\", \"strictfp\", \"super\", \"switch\", \"synchronized\", \"this\",\n      \"throw\", \"throws\", \"transient\", \"try\", \"void\", \"volatile\", \"while\"));", "modifier": "private static final", "type": "Set<String>", "declarator": "reservedWords = new HashSet<>(Arrays.asList(\n      \"abstract\", \"assert\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\",\n      \"const\", \"continue\", \"default\", \"do\", \"double\", \"else\", \"enum\", \"extends\", \"final\",\n      \"finally\", \"float\", \"for\", \"goto\", \"if\", \"implements\", \"import\", \"instanceof\", \"int\",\n      \"interface\", \"long\", \"native\", \"new\", \"package\", \"private\", \"protected\", \"public\",\n      \"return\", \"short\", \"static\", \"strictfp\", \"super\", \"switch\", \"synchronized\", \"this\",\n      \"throw\", \"throws\", \"transient\", \"try\", \"void\", \"volatile\", \"while\"))", "var_name": "reservedWords"}, {"original_string": "public static final CodeBlock emptyCodeBlock = CodeBlock.of(\"\");", "modifier": "public static final", "type": "CodeBlock", "declarator": "emptyCodeBlock = CodeBlock.of(\"\")", "var_name": "emptyCodeBlock"}, {"original_string": "public static final Collector<CodeBlock, List<CodeBlock>, CodeBlock> joinCodeBlocks\n      = joinCodeBlocks(\"\");", "modifier": "public static final", "type": "Collector<CodeBlock, List<CodeBlock>, CodeBlock>", "declarator": "joinCodeBlocks\n      = joinCodeBlocks(\"\")", "var_name": "joinCodeBlocks"}], "methods": [{"identifier": "upcase", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String upcase(String s)", "full_signature": "public static String upcase(String s)", "class_method_signature": "ZeroUtil.upcase(String s)", "testcase": false, "constructor": false}, {"identifier": "downcase", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String downcase(String s)", "full_signature": "public static String downcase(String s)", "class_method_signature": "ZeroUtil.downcase(String s)", "testcase": false, "constructor": false}, {"identifier": "statement", "parameters": "(String format, Object... args)", "modifiers": "public static", "return": "CodeBlock", "signature": "CodeBlock statement(String format, Object... args)", "full_signature": "public static CodeBlock statement(String format, Object... args)", "class_method_signature": "ZeroUtil.statement(String format, Object... args)", "testcase": false, "constructor": false}, {"identifier": "parameterSpec", "parameters": "(TypeName type, String name)", "modifiers": "public static", "return": "ParameterSpec", "signature": "ParameterSpec parameterSpec(TypeName type, String name)", "full_signature": "public static ParameterSpec parameterSpec(TypeName type, String name)", "class_method_signature": "ZeroUtil.parameterSpec(TypeName type, String name)", "testcase": false, "constructor": false}, {"identifier": "fieldSpec", "parameters": "(TypeName type, String name, Modifier... modifiers)", "modifiers": "public static", "return": "FieldSpec", "signature": "FieldSpec fieldSpec(TypeName type, String name, Modifier... modifiers)", "full_signature": "public static FieldSpec fieldSpec(TypeName type, String name, Modifier... modifiers)", "class_method_signature": "ZeroUtil.fieldSpec(TypeName type, String name, Modifier... modifiers)", "testcase": false, "constructor": false}, {"identifier": "distinctFrom", "parameters": "(String string, String other)", "modifiers": "static", "return": "String", "signature": "String distinctFrom(String string, String other)", "full_signature": "static String distinctFrom(String string, String other)", "class_method_signature": "ZeroUtil.distinctFrom(String string, String other)", "testcase": false, "constructor": false}, {"identifier": "rawClassName", "parameters": "(TypeName typeName)", "modifiers": "public static", "return": "ClassName", "signature": "ClassName rawClassName(TypeName typeName)", "full_signature": "public static ClassName rawClassName(TypeName typeName)", "class_method_signature": "ZeroUtil.rawClassName(TypeName typeName)", "testcase": false, "constructor": false}, {"identifier": "typeArguments", "parameters": "(TypeName typeName)", "modifiers": "private static", "return": "List<TypeName>", "signature": "List<TypeName> typeArguments(TypeName typeName)", "full_signature": "private static List<TypeName> typeArguments(TypeName typeName)", "class_method_signature": "ZeroUtil.typeArguments(TypeName typeName)", "testcase": false, "constructor": false}, {"identifier": "onlyTypeArgument", "parameters": "(TypeName typeName)", "modifiers": "static", "return": "Optional<TypeName>", "signature": "Optional<TypeName> onlyTypeArgument(TypeName typeName)", "full_signature": "static Optional<TypeName> onlyTypeArgument(TypeName typeName)", "class_method_signature": "ZeroUtil.onlyTypeArgument(TypeName typeName)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(Collection<? extends X> input, Function<X, E> function)", "modifiers": "public static", "return": "List<E>", "signature": "List<E> transform(Collection<? extends X> input, Function<X, E> function)", "full_signature": "public static List<E> transform(Collection<? extends X> input, Function<X, E> function)", "class_method_signature": "ZeroUtil.transform(Collection<? extends X> input, Function<X, E> function)", "testcase": false, "constructor": false}, {"identifier": "cons", "parameters": "(P first, List<? extends P> list)", "modifiers": "public static", "return": "List<P>", "signature": "List<P> cons(P first, List<? extends P> list)", "full_signature": "public static List<P> cons(P first, List<? extends P> list)", "class_method_signature": "ZeroUtil.cons(P first, List<? extends P> list)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(List<? extends P> left, List<? extends P> right)", "modifiers": "public static", "return": "List<P>", "signature": "List<P> concat(List<? extends P> left, List<? extends P> right)", "full_signature": "public static List<P> concat(List<? extends P> left, List<? extends P> right)", "class_method_signature": "ZeroUtil.concat(List<? extends P> left, List<? extends P> right)", "testcase": false, "constructor": false}, {"identifier": "joinCodeBlocks", "parameters": "(String delimiter)", "modifiers": "public static", "return": "Collector<CodeBlock, List<CodeBlock>, CodeBlock>", "signature": "Collector<CodeBlock, List<CodeBlock>, CodeBlock> joinCodeBlocks(String delimiter)", "full_signature": "public static Collector<CodeBlock, List<CodeBlock>, CodeBlock> joinCodeBlocks(String delimiter)", "class_method_signature": "ZeroUtil.joinCodeBlocks(String delimiter)", "testcase": false, "constructor": false}, {"identifier": "flatList", "parameters": "()", "modifiers": "public static", "return": "Collector<List<E>, List<E>, List<E>>", "signature": "Collector<List<E>, List<E>, List<E>> flatList()", "full_signature": "public static Collector<List<E>, List<E>, List<E>> flatList()", "class_method_signature": "ZeroUtil.flatList()", "testcase": false, "constructor": false}, {"identifier": "listCollector", "parameters": "(Function<List<E>, R> finisher)", "modifiers": "static", "return": "Collector<E, List<E>, R>", "signature": "Collector<E, List<E>, R> listCollector(Function<List<E>, R> finisher)", "full_signature": "static Collector<E, List<E>, R> listCollector(Function<List<E>, R> finisher)", "class_method_signature": "ZeroUtil.listCollector(Function<List<E>, R> finisher)", "testcase": false, "constructor": false}, {"identifier": "memoize", "parameters": "(Supplier<R> supplier)", "modifiers": "static", "return": "Supplier<R>", "signature": "Supplier<R> memoize(Supplier<R> supplier)", "full_signature": "static Supplier<R> memoize(Supplier<R> supplier)", "class_method_signature": "ZeroUtil.memoize(Supplier<R> supplier)", "testcase": false, "constructor": false}, {"identifier": "constructor", "parameters": "(Modifier... modifiers)", "modifiers": "public static", "return": "MethodSpec", "signature": "MethodSpec constructor(Modifier... modifiers)", "full_signature": "public static MethodSpec constructor(Modifier... modifiers)", "class_method_signature": "ZeroUtil.constructor(Modifier... modifiers)", "testcase": false, "constructor": false}, {"identifier": "simpleName", "parameters": "(TypeName type)", "modifiers": "public static", "return": "String", "signature": "String simpleName(TypeName type)", "full_signature": "public static String simpleName(TypeName type)", "class_method_signature": "ZeroUtil.simpleName(TypeName type)", "testcase": false, "constructor": false}, {"identifier": "createRanking", "parameters": "(E[] a, E[] b)", "modifiers": "static", "return": "int[]", "signature": "int[] createRanking(E[] a, E[] b)", "full_signature": "static int[] createRanking(E[] a, E[] b)", "class_method_signature": "ZeroUtil.createRanking(E[] a, E[] b)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(E[] b, E el)", "modifiers": "private static", "return": "int", "signature": "int indexOf(E[] b, E el)", "full_signature": "private static int indexOf(E[] b, E el)", "class_method_signature": "ZeroUtil.indexOf(E[] b, E el)", "testcase": false, "constructor": false}, {"identifier": "applyRanking", "parameters": "(int[] ranking, List<E> input)", "modifiers": "static", "return": "List<E>", "signature": "List<E> applyRanking(int[] ranking, List<E> input)", "full_signature": "static List<E> applyRanking(int[] ranking, List<E> input)", "class_method_signature": "ZeroUtil.applyRanking(int[] ranking, List<E> input)", "testcase": false, "constructor": false}, {"identifier": "parameterizedTypeName", "parameters": "(ClassName raw, List<TypeVariableName> typeVars)", "modifiers": "public static", "return": "TypeName", "signature": "TypeName parameterizedTypeName(ClassName raw, List<TypeVariableName> typeVars)", "full_signature": "public static TypeName parameterizedTypeName(ClassName raw, List<TypeVariableName> typeVars)", "class_method_signature": "ZeroUtil.parameterizedTypeName(ClassName raw, List<TypeVariableName> typeVars)", "testcase": false, "constructor": false}, {"identifier": "addModifier", "parameters": "(Modifier modifier, Modifier[] modifiers)", "modifiers": "private static", "return": "Modifier[]", "signature": "Modifier[] addModifier(Modifier modifier, Modifier[] modifiers)", "full_signature": "private static Modifier[] addModifier(Modifier modifier, Modifier[] modifiers)", "class_method_signature": "ZeroUtil.addModifier(Modifier modifier, Modifier[] modifiers)", "testcase": false, "constructor": false}, {"identifier": "modifiers", "parameters": "(Access access, Modifier modifiers)", "modifiers": "public static", "return": "Modifier[]", "signature": "Modifier[] modifiers(Access access, Modifier modifiers)", "full_signature": "public static Modifier[] modifiers(Access access, Modifier modifiers)", "class_method_signature": "ZeroUtil.modifiers(Access access, Modifier modifiers)", "testcase": false, "constructor": false}, {"identifier": "modifiers", "parameters": "(Access access)", "modifiers": "public static", "return": "Modifier[]", "signature": "Modifier[] modifiers(Access access)", "full_signature": "public static Modifier[] modifiers(Access access)", "class_method_signature": "ZeroUtil.modifiers(Access access)", "testcase": false, "constructor": false}, {"identifier": "maybeTypevars", "parameters": "(TypeName type)", "modifiers": "private static", "return": "boolean", "signature": "boolean maybeTypevars(TypeName type)", "full_signature": "private static boolean maybeTypevars(TypeName type)", "class_method_signature": "ZeroUtil.maybeTypevars(TypeName type)", "testcase": false, "constructor": false}, {"identifier": "references", "parameters": "(TypeName type, TypeVariableName test)", "modifiers": "public static", "return": "boolean", "signature": "boolean references(TypeName type, TypeVariableName test)", "full_signature": "public static boolean references(TypeName type, TypeVariableName test)", "class_method_signature": "ZeroUtil.references(TypeName type, TypeVariableName test)", "testcase": false, "constructor": false}, {"identifier": "extractTypeVars", "parameters": "(TypeName type)", "modifiers": "public static", "return": "List<TypeVariableName>", "signature": "List<TypeVariableName> extractTypeVars(TypeName type)", "full_signature": "public static List<TypeVariableName> extractTypeVars(TypeName type)", "class_method_signature": "ZeroUtil.extractTypeVars(TypeName type)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(List<E> in)", "modifiers": "public static", "return": "List<E>", "signature": "List<E> reverse(List<E> in)", "full_signature": "public static List<E> reverse(List<E> in)", "class_method_signature": "ZeroUtil.reverse(List<E> in)", "testcase": false, "constructor": false}, {"identifier": "ZeroUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ZeroUtil()", "full_signature": "private  ZeroUtil()", "class_method_signature": "ZeroUtil.ZeroUtil()", "testcase": false, "constructor": true}], "file": "api/src/main/java/net/zerobuilder/compiler/generate/ZeroUtil.java"}, "focal_method": {"identifier": "extractTypeVars", "parameters": "(TypeName type)", "modifiers": "public static", "return": "List<TypeVariableName>", "body": "public static List<TypeVariableName> extractTypeVars(TypeName type) {\n    if (!maybeTypevars(type)) {\n      return emptyList();\n    }\n    List<TypeVariableName> builder = new ArrayList<>();\n    TypeWalk walk = new TypeWalk(type);\n    while (walk.hasNext()) {\n      TypeName next = walk.next();\n      if (next instanceof TypeVariableName) {\n        if (!builder.contains(next)) {\n          builder.add((TypeVariableName) next);\n        }\n      }\n    }\n    return builder;\n  }", "signature": "List<TypeVariableName> extractTypeVars(TypeName type)", "full_signature": "public static List<TypeVariableName> extractTypeVars(TypeName type)", "class_method_signature": "ZeroUtil.extractTypeVars(TypeName type)", "testcase": false, "constructor": false, "invocations": ["maybeTypevars", "emptyList", "hasNext", "next", "contains", "add"]}, "repository": {"repo_id": 66055507, "url": "https://github.com/h908714124/zerobuilder", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 19, "size": 1962, "license": "licensed"}}