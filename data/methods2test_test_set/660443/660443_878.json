{"test_class": {"identifier": "TemplateHandler3DTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "tool/builder3d/src/test/java/org/openscience/cdk/modeling/builder3d/TemplateHandler3DTest.java"}, "test_case": {"identifier": "testAnonFingerprints", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAnonFingerprints() throws Exception {\n        BitSet[] expected = new BitSet[]{\n            parseBitSet(\"{148, 206, 392, 542, 637, 742, 752, 830}\"),\n            parseBitSet(\"{148, 206, 392, 542, 637, 742, 752, 830}\"),\n            parseBitSet(\"{148, 206, 392, 542, 637, 742, 752, 830}\"),\n            parseBitSet(\"{148, 206, 392, 542, 637, 742, 752, 830}\"),\n            parseBitSet(\"{148, 206, 392, 542, 637, 742, 752, 830}\"),\n            parseBitSet(\"{148, 206, 392, 542, 637, 742, 752, 830}\"),\n            parseBitSet(\"{148, 206, 392, 542, 637, 742, 752, 830}\"),\n            parseBitSet(\"{148, 206, 392, 542, 637, 742, 752, 830}\"),\n            parseBitSet(\"{148, 206, 392, 542, 637, 742, 752, 830}\"),\n            parseBitSet(\"{148, 206, 392, 542, 637, 742, 752, 830}\")};\n\n        String filename = \"data/mdl/fingerprints_from_modelbuilder3d.sdf\";\n        InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename);\n        List<IBitFingerprint> data = new TemplateExtractor().makeFingerprintsFromSdf(true, true,\n                                                                                     new HashMap<String, Integer>(), new BufferedReader(new InputStreamReader(ins)), 10);\n        QueryChemObject obj = new QueryChemObject(DefaultChemObjectBuilder.getInstance());\n        obj.getBuilder();\n        for (int i = 0; i < data.size(); i++) {\n            IBitFingerprint bs = data.get(i);\n            Assert.assertEquals(expected[i], bs.asBitSet());\n        }\n    }", "signature": "void testAnonFingerprints()", "full_signature": "@Test public void testAnonFingerprints()", "class_method_signature": "TemplateHandler3DTest.testAnonFingerprints()", "testcase": true, "constructor": false, "invocations": ["parseBitSet", "parseBitSet", "parseBitSet", "parseBitSet", "parseBitSet", "parseBitSet", "parseBitSet", "parseBitSet", "parseBitSet", "parseBitSet", "getResourceAsStream", "getClassLoader", "getClass", "makeFingerprintsFromSdf", "getInstance", "getBuilder", "size", "get", "assertEquals", "asBitSet"]}, "focal_class": {"identifier": "TemplateHandler3D", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final IChemObjectBuilder builder       = SilentChemObjectBuilder.getInstance();", "modifier": "private static final", "type": "IChemObjectBuilder", "declarator": "builder       = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "public static final  String             TEMPLATE_PATH = \"data/ringTemplateStructures.sdf.gz\";", "modifier": "public static final", "type": "String", "declarator": "TEMPLATE_PATH = \"data/ringTemplateStructures.sdf.gz\"", "var_name": "TEMPLATE_PATH"}, {"original_string": "private final List<IAtomContainer>      templates = new ArrayList<>();", "modifier": "private final", "type": "List<IAtomContainer>", "declarator": "templates = new ArrayList<>()", "var_name": "templates"}, {"original_string": "private final List<IQueryAtomContainer> queries   = new ArrayList<>();", "modifier": "private final", "type": "List<IQueryAtomContainer>", "declarator": "queries   = new ArrayList<>()", "var_name": "queries"}, {"original_string": "private final List<Pattern>             patterns  = new ArrayList<>();", "modifier": "private final", "type": "List<Pattern>", "declarator": "patterns  = new ArrayList<>()", "var_name": "patterns"}, {"original_string": "private static TemplateHandler3D self = null;", "modifier": "private static", "type": "TemplateHandler3D", "declarator": "self = null", "var_name": "self"}, {"original_string": "private final ILoggingTool logger = LoggingToolFactory.createLoggingTool(TemplateHandler3D.class);", "modifier": "private final", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(TemplateHandler3D.class)", "var_name": "logger"}, {"original_string": "private UniversalIsomorphismTester universalIsomorphismTester = new UniversalIsomorphismTester();", "modifier": "private", "type": "UniversalIsomorphismTester", "declarator": "universalIsomorphismTester = new UniversalIsomorphismTester()", "var_name": "universalIsomorphismTester"}], "methods": [{"identifier": "TemplateHandler3D", "parameters": "()", "modifiers": "private", "return": "", "signature": " TemplateHandler3D()", "full_signature": "private  TemplateHandler3D()", "class_method_signature": "TemplateHandler3D.TemplateHandler3D()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "TemplateHandler3D", "signature": "TemplateHandler3D getInstance()", "full_signature": "public static TemplateHandler3D getInstance()", "class_method_signature": "TemplateHandler3D.getInstance()", "testcase": false, "constructor": false}, {"identifier": "addTemplateMol", "parameters": "(IAtomContainer mol)", "modifiers": "private", "return": "void", "signature": "void addTemplateMol(IAtomContainer mol)", "full_signature": "private void addTemplateMol(IAtomContainer mol)", "class_method_signature": "TemplateHandler3D.addTemplateMol(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "loadTemplates", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadTemplates()", "full_signature": "private void loadTemplates()", "class_method_signature": "TemplateHandler3D.loadTemplates()", "testcase": false, "constructor": false}, {"identifier": "getBitSetFromFile", "parameters": "(StringTokenizer st)", "modifiers": "public static", "return": "BitSet", "signature": "BitSet getBitSetFromFile(StringTokenizer st)", "full_signature": "public static BitSet getBitSetFromFile(StringTokenizer st)", "class_method_signature": "TemplateHandler3D.getBitSetFromFile(StringTokenizer st)", "testcase": false, "constructor": false}, {"identifier": "getLargestRingSet", "parameters": "(List<IRingSet> ringSystems)", "modifiers": "public", "return": "IRingSet", "signature": "IRingSet getLargestRingSet(List<IRingSet> ringSystems)", "full_signature": "public IRingSet getLargestRingSet(List<IRingSet> ringSystems)", "class_method_signature": "TemplateHandler3D.getLargestRingSet(List<IRingSet> ringSystems)", "testcase": false, "constructor": false}, {"identifier": "getAllInOneContainer", "parameters": "(IRingSet ringSet)", "modifiers": "private", "return": "IAtomContainer", "signature": "IAtomContainer getAllInOneContainer(IRingSet ringSet)", "full_signature": "private IAtomContainer getAllInOneContainer(IRingSet ringSet)", "class_method_signature": "TemplateHandler3D.getAllInOneContainer(IRingSet ringSet)", "testcase": false, "constructor": false}, {"identifier": "mapTemplates", "parameters": "(IAtomContainer ringSystems,\n                             double numberOfRingAtoms)", "modifiers": "@Deprecated public", "return": "void", "signature": "void mapTemplates(IAtomContainer ringSystems,\n                             double numberOfRingAtoms)", "full_signature": "@Deprecated public void mapTemplates(IAtomContainer ringSystems,\n                             double numberOfRingAtoms)", "class_method_signature": "TemplateHandler3D.mapTemplates(IAtomContainer ringSystems,\n                             double numberOfRingAtoms)", "testcase": false, "constructor": false}, {"identifier": "isExactMatch", "parameters": "(IAtomContainer query,\n                                 Map<IChemObject, IChemObject> mapping)", "modifiers": "private", "return": "boolean", "signature": "boolean isExactMatch(IAtomContainer query,\n                                 Map<IChemObject, IChemObject> mapping)", "full_signature": "private boolean isExactMatch(IAtomContainer query,\n                                 Map<IChemObject, IChemObject> mapping)", "class_method_signature": "TemplateHandler3D.isExactMatch(IAtomContainer query,\n                                 Map<IChemObject, IChemObject> mapping)", "testcase": false, "constructor": false}, {"identifier": "mapTemplates", "parameters": "(IAtomContainer mol, int numberOfRingAtoms)", "modifiers": "public", "return": "void", "signature": "void mapTemplates(IAtomContainer mol, int numberOfRingAtoms)", "full_signature": "public void mapTemplates(IAtomContainer mol, int numberOfRingAtoms)", "class_method_signature": "TemplateHandler3D.mapTemplates(IAtomContainer mol, int numberOfRingAtoms)", "testcase": false, "constructor": false}, {"identifier": "assignCoords", "parameters": "(IAtomContainer template,\n                              Map<IChemObject, IChemObject> map)", "modifiers": "private", "return": "void", "signature": "void assignCoords(IAtomContainer template,\n                              Map<IChemObject, IChemObject> map)", "full_signature": "private void assignCoords(IAtomContainer template,\n                              Map<IChemObject, IChemObject> map)", "class_method_signature": "TemplateHandler3D.assignCoords(IAtomContainer template,\n                              Map<IChemObject, IChemObject> map)", "testcase": false, "constructor": false}, {"identifier": "getTemplateCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTemplateCount()", "full_signature": "public int getTemplateCount()", "class_method_signature": "TemplateHandler3D.getTemplateCount()", "testcase": false, "constructor": false}, {"identifier": "getTemplateAt", "parameters": "(int position)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer getTemplateAt(int position)", "full_signature": "public IAtomContainer getTemplateAt(int position)", "class_method_signature": "TemplateHandler3D.getTemplateAt(int position)", "testcase": false, "constructor": false}], "file": "tool/builder3d/src/main/java/org/openscience/cdk/modeling/builder3d/TemplateHandler3D.java"}, "focal_method": {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "TemplateHandler3D", "body": "public static TemplateHandler3D getInstance() throws CDKException {\n        if (self == null) {\n            self = new TemplateHandler3D();\n        }\n        return self;\n    }", "signature": "TemplateHandler3D getInstance()", "full_signature": "public static TemplateHandler3D getInstance()", "class_method_signature": "TemplateHandler3D.getInstance()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}