{"test_class": {"identifier": "RunScriptToolTest", "superclass": "extends AbstractToolTest", "interfaces": "", "fields": [{"original_string": "private RunScriptTool tool;", "modifier": "private", "type": "RunScriptTool", "declarator": "tool", "var_name": "tool"}], "file": "scripting/src/test/java/com/powsybl/scripting/RunScriptToolTest.java"}, "test_case": {"identifier": "run", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void run() throws Exception {\n        String helloFile = \"/hello.groovy\";\n        createFile(helloFile, \"print 'hello'\");\n\n        assertCommand(new String[] {\"run-script\", \"--file\", helloFile}, CommandLineTools.COMMAND_OK_STATUS, \"hello\", \"\");\n    }", "signature": "void run()", "full_signature": "@Test public void run()", "class_method_signature": "RunScriptToolTest.run()", "testcase": true, "constructor": false, "invocations": ["createFile", "assertCommand"]}, "focal_class": {"identifier": "RunScriptTool", "superclass": "", "interfaces": "implements Tool", "fields": [{"original_string": "public static final String FILE = \"file\";", "modifier": "public static final", "type": "String", "declarator": "FILE = \"file\"", "var_name": "FILE"}, {"original_string": "private static final Command COMMAND = new Command() {\n        @Override\n        public String getName() {\n            return \"run-script\";\n        }\n\n        @Override\n        public String getTheme() {\n            return \"Script\";\n        }\n\n        @Override\n        public String getDescription() {\n            return \"run script (only groovy is supported)\";\n        }\n\n        @Override\n        public Options getOptions() {\n            Options options = new Options();\n            options.addOption(Option.builder()\n                    .longOpt(FILE)\n                    .desc(\"the script file\")\n                    .hasArg()\n                    .required()\n                    .argName(\"FILE\")\n                    .build());\n            return options;\n        }\n\n        @Override\n        public String getUsageFooter() {\n            return null;\n        }\n    };", "modifier": "private static final", "type": "Command", "declarator": "COMMAND = new Command() {\n        @Override\n        public String getName() {\n            return \"run-script\";\n        }\n\n        @Override\n        public String getTheme() {\n            return \"Script\";\n        }\n\n        @Override\n        public String getDescription() {\n            return \"run script (only groovy is supported)\";\n        }\n\n        @Override\n        public Options getOptions() {\n            Options options = new Options();\n            options.addOption(Option.builder()\n                    .longOpt(FILE)\n                    .desc(\"the script file\")\n                    .hasArg()\n                    .required()\n                    .argName(\"FILE\")\n                    .build());\n            return options;\n        }\n\n        @Override\n        public String getUsageFooter() {\n            return null;\n        }\n    }", "var_name": "COMMAND"}], "methods": [{"identifier": "getCommand", "parameters": "()", "modifiers": "@Override public", "return": "Command", "signature": "Command getCommand()", "full_signature": "@Override public Command getCommand()", "class_method_signature": "RunScriptTool.getCommand()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(CommandLine line, ToolRunningContext context)", "modifiers": "@Override public", "return": "void", "signature": "void run(CommandLine line, ToolRunningContext context)", "full_signature": "@Override public void run(CommandLine line, ToolRunningContext context)", "class_method_signature": "RunScriptTool.run(CommandLine line, ToolRunningContext context)", "testcase": false, "constructor": false}], "file": "scripting/src/main/java/com/powsybl/scripting/RunScriptTool.java"}, "focal_method": {"identifier": "run", "parameters": "(CommandLine line, ToolRunningContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run(CommandLine line, ToolRunningContext context) {\n        Path file = context.getFileSystem().getPath(line.getOptionValue(FILE));\n        if (file.getFileName().toString().endsWith(\".groovy\")) {\n            try {\n                Binding binding = new Binding();\n                binding.setProperty(\"args\", line.getArgs());\n                GroovyScripts.run(file, binding, context.getOutputStream());\n            } catch (Exception e) {\n                Throwable rootCause = StackTraceUtils.sanitizeRootCause(e);\n                rootCause.printStackTrace(context.getErrorStream());\n            }\n        } else {\n            throw new IllegalArgumentException(\"Script type not supported\");\n        }\n    }", "signature": "void run(CommandLine line, ToolRunningContext context)", "full_signature": "@Override public void run(CommandLine line, ToolRunningContext context)", "class_method_signature": "RunScriptTool.run(CommandLine line, ToolRunningContext context)", "testcase": false, "constructor": false, "invocations": ["getPath", "getFileSystem", "getOptionValue", "endsWith", "toString", "getFileName", "setProperty", "getArgs", "run", "getOutputStream", "sanitizeRootCause", "printStackTrace", "getErrorStream"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}