{"test_class": {"identifier": "LambdaUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/LambdaUtilTest.java"}, "test_case": {"identifier": "appendaLambdaToOld", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void appendaLambdaToOld() {\n\n        LambdaExpr l1 = parseExpression(\"(_this) -> _this.getTimeFieldAsDate()\");\n        LambdaExpr l2 = parseExpression(\"(_this) -> _this.getTime()\");\n\n        Expression expected = parseExpression(\"(_this) -> _this.getTimeFieldAsDate().getTime()\");\n\n        Expression actual = LambdaUtil.appendNewLambdaToOld(l1, l2);\n        assertEquals(expected.toString(), actual.toString());\n    }", "signature": "void appendaLambdaToOld()", "full_signature": "@Test public void appendaLambdaToOld()", "class_method_signature": "LambdaUtilTest.appendaLambdaToOld()", "testcase": true, "constructor": false, "invocations": ["parseExpression", "parseExpression", "parseExpression", "appendNewLambdaToOld", "assertEquals", "toString", "toString"]}, "focal_class": {"identifier": "LambdaUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "LambdaUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " LambdaUtil()", "full_signature": "private  LambdaUtil()", "class_method_signature": "LambdaUtil.LambdaUtil()", "testcase": false, "constructor": true}, {"identifier": "appendNewLambdaToOld", "parameters": "(LambdaExpr l1, LambdaExpr l2)", "modifiers": "public static", "return": "Expression", "signature": "Expression appendNewLambdaToOld(LambdaExpr l1, LambdaExpr l2)", "full_signature": "public static Expression appendNewLambdaToOld(LambdaExpr l1, LambdaExpr l2)", "class_method_signature": "LambdaUtil.appendNewLambdaToOld(LambdaExpr l1, LambdaExpr l2)", "testcase": false, "constructor": false}], "file": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/LambdaUtil.java"}, "focal_method": {"identifier": "appendNewLambdaToOld", "parameters": "(LambdaExpr l1, LambdaExpr l2)", "modifiers": "public static", "return": "Expression", "body": "public static Expression appendNewLambdaToOld(LambdaExpr l1, LambdaExpr l2) {\n        ExpressionStmt l1ExprStmt = (ExpressionStmt) l1.getBody();\n        ExpressionStmt l2ExprStmt = (ExpressionStmt) l2.getBody();\n\n        DrlxParseUtil.RemoveRootNodeResult removeRootNodeResult = DrlxParseUtil.removeRootNode(l2ExprStmt.getExpression());\n\n        NodeWithOptionalScope<?> newExpr = (NodeWithOptionalScope<?>) removeRootNodeResult.getFirstChild();\n\n        newExpr.setScope(l1ExprStmt.getExpression());\n        l1.setBody(new ExpressionStmt(removeRootNodeResult.getWithoutRootNode()));\n        return l1;\n    }", "signature": "Expression appendNewLambdaToOld(LambdaExpr l1, LambdaExpr l2)", "full_signature": "public static Expression appendNewLambdaToOld(LambdaExpr l1, LambdaExpr l2)", "class_method_signature": "LambdaUtil.appendNewLambdaToOld(LambdaExpr l1, LambdaExpr l2)", "testcase": false, "constructor": false, "invocations": ["getBody", "getBody", "removeRootNode", "getExpression", "getFirstChild", "setScope", "getExpression", "setBody", "getWithoutRootNode"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}