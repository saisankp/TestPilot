{"test_class": {"identifier": "BasicParameterManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BasicParameterManager manager;", "modifier": "private", "type": "BasicParameterManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private ParameterProvider paramProvider;", "modifier": "private", "type": "ParameterProvider", "declarator": "paramProvider", "var_name": "paramProvider"}, {"original_string": "private ParamPreparer preparer;", "modifier": "private", "type": "ParamPreparer", "declarator": "preparer", "var_name": "preparer"}, {"original_string": "private PreparedParamCache cache;", "modifier": "private", "type": "PreparedParamCache", "declarator": "cache", "var_name": "cache"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/core/parameter/BasicParameterManagerTest.java"}, "test_case": {"identifier": "shouldReturnNullWhenParameterNotFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnNullWhenParameterNotFound() {\n        // given\n        when(paramProvider.load(\"param\")).thenReturn(null);\n\n        // when\n        PreparedParameter preparedParameter = manager.getPreparedParameter(\"param\");\n\n        // then\n        assertThat(preparedParameter).isNull();\n    }", "signature": "void shouldReturnNullWhenParameterNotFound()", "full_signature": "@Test public void shouldReturnNullWhenParameterNotFound()", "class_method_signature": "BasicParameterManagerTest.shouldReturnNullWhenParameterNotFound()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "load", "getPreparedParameter", "isNull", "assertThat"]}, "focal_class": {"identifier": "BasicParameterManager", "superclass": "", "interfaces": "implements ParameterManager", "fields": [{"original_string": "private final ParamPreparer preparer;", "modifier": "private final", "type": "ParamPreparer", "declarator": "preparer", "var_name": "preparer"}, {"original_string": "private final ParameterProvider parameterProvider;", "modifier": "private final", "type": "ParameterProvider", "declarator": "parameterProvider", "var_name": "parameterProvider"}, {"original_string": "private final PreparedParamCache cache;", "modifier": "private final", "type": "PreparedParamCache", "declarator": "cache", "var_name": "cache"}, {"original_string": "private final ParameterRequestQueue requestQueue;", "modifier": "private final", "type": "ParameterRequestQueue", "declarator": "requestQueue", "var_name": "requestQueue"}, {"original_string": "private final ParameterRequest request;", "modifier": "private final", "type": "ParameterRequest", "declarator": "request", "var_name": "request"}], "methods": [{"identifier": "BasicParameterManager", "parameters": "(ParamPreparer preparer,\n            ParameterProvider parameterProvider,\n            PreparedParamCache cache,\n            ParameterRequestQueue requestQueue)", "modifiers": "public", "return": "", "signature": " BasicParameterManager(ParamPreparer preparer,\n            ParameterProvider parameterProvider,\n            PreparedParamCache cache,\n            ParameterRequestQueue requestQueue)", "full_signature": "public  BasicParameterManager(ParamPreparer preparer,\n            ParameterProvider parameterProvider,\n            PreparedParamCache cache,\n            ParameterRequestQueue requestQueue)", "class_method_signature": "BasicParameterManager.BasicParameterManager(ParamPreparer preparer,\n            ParameterProvider parameterProvider,\n            PreparedParamCache cache,\n            ParameterRequestQueue requestQueue)", "testcase": false, "constructor": true}, {"identifier": "createRequest", "parameters": "()", "modifiers": "private", "return": "ParameterRequest", "signature": "ParameterRequest createRequest()", "full_signature": "private ParameterRequest createRequest()", "class_method_signature": "BasicParameterManager.createRequest()", "testcase": false, "constructor": false}, {"identifier": "getPreparedParameter", "parameters": "(final String parameterName)", "modifiers": "@Override public", "return": "PreparedParameter", "signature": "PreparedParameter getPreparedParameter(final String parameterName)", "full_signature": "@Override public PreparedParameter getPreparedParameter(final String parameterName)", "class_method_signature": "BasicParameterManager.getPreparedParameter(final String parameterName)", "testcase": false, "constructor": false}, {"identifier": "findEntries", "parameters": "(String paramName, String[] levelValues)", "modifiers": "@Override public", "return": "List<PreparedEntry>", "signature": "List<PreparedEntry> findEntries(String paramName, String[] levelValues)", "full_signature": "@Override public List<PreparedEntry> findEntries(String paramName, String[] levelValues)", "class_method_signature": "BasicParameterManager.findEntries(String paramName, String[] levelValues)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/core/parameter/BasicParameterManager.java"}, "focal_method": {"identifier": "getPreparedParameter", "parameters": "(final String parameterName)", "modifiers": "@Override public", "return": "PreparedParameter", "body": "@Override\n    public PreparedParameter getPreparedParameter(final String parameterName) {\n        PreparedParameter preparedParameter = cache.get(parameterName);\n\n        if (preparedParameter == null) {\n            preparedParameter = requestQueue.resolve(parameterName, request);\n        }\n\n        return preparedParameter;\n    }", "signature": "PreparedParameter getPreparedParameter(final String parameterName)", "full_signature": "@Override public PreparedParameter getPreparedParameter(final String parameterName)", "class_method_signature": "BasicParameterManager.getPreparedParameter(final String parameterName)", "testcase": false, "constructor": false, "invocations": ["get", "resolve"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}