{"test_class": {"identifier": "TestImageDB", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long PRODUCT_ID = 1234567890;", "modifier": "private static final", "type": "long", "declarator": "PRODUCT_ID = 1234567890", "var_name": "PRODUCT_ID"}, {"original_string": "private static final String NAME = \"testname\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"testname\"", "var_name": "NAME"}, {"original_string": "private static final long PRODUCT_IMAGE_ID = 99;", "modifier": "private static final", "type": "long", "declarator": "PRODUCT_IMAGE_ID = 99", "var_name": "PRODUCT_IMAGE_ID"}, {"original_string": "private static final long PRODUCT_IMAGE_ID_LARGE = 999;", "modifier": "private static final", "type": "long", "declarator": "PRODUCT_IMAGE_ID_LARGE = 999", "var_name": "PRODUCT_IMAGE_ID_LARGE"}, {"original_string": "private static final long NAME_IMAGE_ID = 200;", "modifier": "private static final", "type": "long", "declarator": "NAME_IMAGE_ID = 200", "var_name": "NAME_IMAGE_ID"}, {"original_string": "private ImageSize size = ImageSizePreset.ICON.getSize();", "modifier": "private", "type": "ImageSize", "declarator": "size = ImageSizePreset.ICON.getSize()", "var_name": "size"}, {"original_string": "private ImageSize sizeLarge = ImageSizePreset.FULL.getSize();", "modifier": "private", "type": "ImageSize", "declarator": "sizeLarge = ImageSizePreset.FULL.getSize()", "var_name": "sizeLarge"}, {"original_string": "private ImageDB uut;", "modifier": "private", "type": "ImageDB", "declarator": "uut", "var_name": "uut"}, {"original_string": "@Mock\n  private ImageDBKey mockedProductKey;", "modifier": "@Mock\n  private", "type": "ImageDBKey", "declarator": "mockedProductKey", "var_name": "mockedProductKey"}, {"original_string": "@Mock\n  private ImageDBKey mockedNameKey;", "modifier": "@Mock\n  private", "type": "ImageDBKey", "declarator": "mockedNameKey", "var_name": "mockedNameKey"}], "file": "services/tools.descartes.teastore.image/src/test/java/tools/descartes/teastore/image/TestImageDB.java"}, "test_case": {"identifier": "testGetImageSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetImageSize() {\n    assertNull(uut.getImageSize(PRODUCT_IMAGE_ID));\n\n    uut.setImageMapping(mockedProductKey, PRODUCT_IMAGE_ID, size);\n    assertNull(uut.getImageSize(NAME_IMAGE_ID));\n    assertEquals(size, uut.getImageSize(PRODUCT_IMAGE_ID));\n\n    uut.setImageMapping(mockedProductKey, PRODUCT_IMAGE_ID_LARGE, sizeLarge);\n    assertNull(uut.getImageSize(NAME_IMAGE_ID));\n    assertNotEquals(sizeLarge, uut.getImageSize(PRODUCT_IMAGE_ID));\n    assertEquals(size, uut.getImageSize(PRODUCT_IMAGE_ID));\n  }", "signature": "void testGetImageSize()", "full_signature": "@Test public void testGetImageSize()", "class_method_signature": "TestImageDB.testGetImageSize()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getImageSize", "setImageMapping", "assertNull", "getImageSize", "assertEquals", "getImageSize", "setImageMapping", "assertNull", "getImageSize", "assertNotEquals", "getImageSize", "assertEquals", "getImageSize"]}, "focal_class": {"identifier": "ImageDB", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HashMap<Long, Map<Long, ImageSize>> products = new HashMap<>();", "modifier": "private", "type": "HashMap<Long, Map<Long, ImageSize>>", "declarator": "products = new HashMap<>()", "var_name": "products"}, {"original_string": "private HashMap<String, Map<Long, ImageSize>> webui = new HashMap<>();", "modifier": "private", "type": "HashMap<String, Map<Long, ImageSize>>", "declarator": "webui = new HashMap<>()", "var_name": "webui"}, {"original_string": "private HashMap<Long, ImageSize> sizes = new HashMap<>();", "modifier": "private", "type": "HashMap<Long, ImageSize>", "declarator": "sizes = new HashMap<>()", "var_name": "sizes"}, {"original_string": "private final Logger log = LoggerFactory.getLogger(ImageDB.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ImageDB.class)", "var_name": "log"}, {"original_string": "private final ReadWriteLock lock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReadWriteLock", "declarator": "lock = new ReentrantReadWriteLock()", "var_name": "lock"}], "methods": [{"identifier": "ImageDB", "parameters": "()", "modifiers": "public", "return": "", "signature": " ImageDB()", "full_signature": "public  ImageDB()", "class_method_signature": "ImageDB.ImageDB()", "testcase": false, "constructor": true}, {"identifier": "ImageDB", "parameters": "(ImageDB copy)", "modifiers": "public", "return": "", "signature": " ImageDB(ImageDB copy)", "full_signature": "public  ImageDB(ImageDB copy)", "class_method_signature": "ImageDB.ImageDB(ImageDB copy)", "testcase": false, "constructor": true}, {"identifier": "hasImageID", "parameters": "(ImageDBKey imageKey, ImageSize imageSize)", "modifiers": "public", "return": "boolean", "signature": "boolean hasImageID(ImageDBKey imageKey, ImageSize imageSize)", "full_signature": "public boolean hasImageID(ImageDBKey imageKey, ImageSize imageSize)", "class_method_signature": "ImageDB.hasImageID(ImageDBKey imageKey, ImageSize imageSize)", "testcase": false, "constructor": false}, {"identifier": "hasImageID", "parameters": "(long productID, ImageSize imageSize)", "modifiers": "public", "return": "boolean", "signature": "boolean hasImageID(long productID, ImageSize imageSize)", "full_signature": "public boolean hasImageID(long productID, ImageSize imageSize)", "class_method_signature": "ImageDB.hasImageID(long productID, ImageSize imageSize)", "testcase": false, "constructor": false}, {"identifier": "hasImageID", "parameters": "(String name, ImageSize imageSize)", "modifiers": "public", "return": "boolean", "signature": "boolean hasImageID(String name, ImageSize imageSize)", "full_signature": "public boolean hasImageID(String name, ImageSize imageSize)", "class_method_signature": "ImageDB.hasImageID(String name, ImageSize imageSize)", "testcase": false, "constructor": false}, {"identifier": "getImageID", "parameters": "(ImageDBKey imageKey, ImageSize imageSize)", "modifiers": "public", "return": "long", "signature": "long getImageID(ImageDBKey imageKey, ImageSize imageSize)", "full_signature": "public long getImageID(ImageDBKey imageKey, ImageSize imageSize)", "class_method_signature": "ImageDB.getImageID(ImageDBKey imageKey, ImageSize imageSize)", "testcase": false, "constructor": false}, {"identifier": "getImageID", "parameters": "(long productID, ImageSize imageSize)", "modifiers": "public", "return": "long", "signature": "long getImageID(long productID, ImageSize imageSize)", "full_signature": "public long getImageID(long productID, ImageSize imageSize)", "class_method_signature": "ImageDB.getImageID(long productID, ImageSize imageSize)", "testcase": false, "constructor": false}, {"identifier": "getImageID", "parameters": "(String name, ImageSize imageSize)", "modifiers": "public", "return": "long", "signature": "long getImageID(String name, ImageSize imageSize)", "full_signature": "public long getImageID(String name, ImageSize imageSize)", "class_method_signature": "ImageDB.getImageID(String name, ImageSize imageSize)", "testcase": false, "constructor": false}, {"identifier": "findImageID", "parameters": "(K key, ImageSize imageSize, HashMap<K, Map<Long, ImageSize>> db)", "modifiers": "private", "return": "long", "signature": "long findImageID(K key, ImageSize imageSize, HashMap<K, Map<Long, ImageSize>> db)", "full_signature": "private long findImageID(K key, ImageSize imageSize, HashMap<K, Map<Long, ImageSize>> db)", "class_method_signature": "ImageDB.findImageID(K key, ImageSize imageSize, HashMap<K, Map<Long, ImageSize>> db)", "testcase": false, "constructor": false}, {"identifier": "getImageSize", "parameters": "(long imageID)", "modifiers": "public", "return": "ImageSize", "signature": "ImageSize getImageSize(long imageID)", "full_signature": "public ImageSize getImageSize(long imageID)", "class_method_signature": "ImageDB.getImageSize(long imageID)", "testcase": false, "constructor": false}, {"identifier": "setImageMapping", "parameters": "(ImageDBKey imageKey, long imageID, ImageSize imageSize)", "modifiers": "public", "return": "void", "signature": "void setImageMapping(ImageDBKey imageKey, long imageID, ImageSize imageSize)", "full_signature": "public void setImageMapping(ImageDBKey imageKey, long imageID, ImageSize imageSize)", "class_method_signature": "ImageDB.setImageMapping(ImageDBKey imageKey, long imageID, ImageSize imageSize)", "testcase": false, "constructor": false}, {"identifier": "setImageMapping", "parameters": "(long productID, long imageID, ImageSize imageSize)", "modifiers": "public", "return": "void", "signature": "void setImageMapping(long productID, long imageID, ImageSize imageSize)", "full_signature": "public void setImageMapping(long productID, long imageID, ImageSize imageSize)", "class_method_signature": "ImageDB.setImageMapping(long productID, long imageID, ImageSize imageSize)", "testcase": false, "constructor": false}, {"identifier": "setImageMapping", "parameters": "(String name, long imageID, ImageSize imageSize)", "modifiers": "public", "return": "void", "signature": "void setImageMapping(String name, long imageID, ImageSize imageSize)", "full_signature": "public void setImageMapping(String name, long imageID, ImageSize imageSize)", "class_method_signature": "ImageDB.setImageMapping(String name, long imageID, ImageSize imageSize)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(K key, long imageID, ImageSize imageSize,\n      HashMap<K, Map<Long, ImageSize>> db)", "modifiers": "private", "return": "void", "signature": "void map(K key, long imageID, ImageSize imageSize,\n      HashMap<K, Map<Long, ImageSize>> db)", "full_signature": "private void map(K key, long imageID, ImageSize imageSize,\n      HashMap<K, Map<Long, ImageSize>> db)", "class_method_signature": "ImageDB.map(K key, long imageID, ImageSize imageSize,\n      HashMap<K, Map<Long, ImageSize>> db)", "testcase": false, "constructor": false}, {"identifier": "removeImageMapping", "parameters": "(long imageID)", "modifiers": "public", "return": "void", "signature": "void removeImageMapping(long imageID)", "full_signature": "public void removeImageMapping(long imageID)", "class_method_signature": "ImageDB.removeImageMapping(long imageID)", "testcase": false, "constructor": false}, {"identifier": "unmap", "parameters": "(long imageID, HashMap<K, Map<Long, ImageSize>> db)", "modifiers": "private", "return": "void", "signature": "void unmap(long imageID, HashMap<K, Map<Long, ImageSize>> db)", "full_signature": "private void unmap(long imageID, HashMap<K, Map<Long, ImageSize>> db)", "class_method_signature": "ImageDB.unmap(long imageID, HashMap<K, Map<Long, ImageSize>> db)", "testcase": false, "constructor": false}], "file": "services/tools.descartes.teastore.image/src/main/java/tools/descartes/teastore/image/ImageDB.java"}, "focal_method": {"identifier": "getImageSize", "parameters": "(long imageID)", "modifiers": "public", "return": "ImageSize", "body": "public ImageSize getImageSize(long imageID) {\n    ImageSize result = null;\n    lock.readLock().lock();\n    try {\n      result = sizes.getOrDefault(imageID, null);\n    } finally {\n      lock.readLock().unlock();\n    }\n    return result;\n  }", "signature": "ImageSize getImageSize(long imageID)", "full_signature": "public ImageSize getImageSize(long imageID)", "class_method_signature": "ImageDB.getImageSize(long imageID)", "testcase": false, "constructor": false, "invocations": ["lock", "readLock", "getOrDefault", "unlock", "readLock"]}, "repository": {"repo_id": 100679870, "url": "https://github.com/DescartesResearch/TeaStore", "language": "Java", "is_fork": false, "fork_count": 31, "stargazer_count": 43, "size": 91777, "license": "licensed"}}