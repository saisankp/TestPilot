{"test_class": {"identifier": "InstallationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEVICE_IDENTIFICATION = \"test-device-identification\";", "modifier": "private static final", "type": "String", "declarator": "DEVICE_IDENTIFICATION = \"test-device-identification\"", "var_name": "DEVICE_IDENTIFICATION"}, {"original_string": "private static final String PROTOCOL_NAME = \"test-protocol-name\";", "modifier": "private static final", "type": "String", "declarator": "PROTOCOL_NAME = \"test-protocol-name\"", "var_name": "PROTOCOL_NAME"}, {"original_string": "private static final String PROTOCOL_VERSION = \"test-protocol-version\";", "modifier": "private static final", "type": "String", "declarator": "PROTOCOL_VERSION = \"test-protocol-version\"", "var_name": "PROTOCOL_VERSION"}, {"original_string": "@InjectMocks\n    private SmartMeterService smartMeterService;", "modifier": "@InjectMocks\n    private", "type": "SmartMeterService", "declarator": "smartMeterService", "var_name": "smartMeterService"}, {"original_string": "@InjectMocks\n    private InstallationService instance;", "modifier": "@InjectMocks\n    private", "type": "InstallationService", "declarator": "instance", "var_name": "instance"}, {"original_string": "@Mock\n    private SmartMeterRepository smartMeteringDeviceRepository;", "modifier": "@Mock\n    private", "type": "SmartMeterRepository", "declarator": "smartMeteringDeviceRepository", "var_name": "smartMeteringDeviceRepository"}, {"original_string": "@Mock\n    private MapperFactory mapperFactory;", "modifier": "@Mock\n    private", "type": "MapperFactory", "declarator": "mapperFactory", "var_name": "mapperFactory"}, {"original_string": "@Mock\n    private MapperFacade mapperFacade;", "modifier": "@Mock\n    private", "type": "MapperFacade", "declarator": "mapperFacade", "var_name": "mapperFacade"}, {"original_string": "@Mock\n    private ProtocolInfoRepository protocolInfoRepository;", "modifier": "@Mock\n    private", "type": "ProtocolInfoRepository", "declarator": "protocolInfoRepository", "var_name": "protocolInfoRepository"}, {"original_string": "@Mock\n    private ManufacturerRepository manufacturerRepository;", "modifier": "@Mock\n    private", "type": "ManufacturerRepository", "declarator": "manufacturerRepository", "var_name": "manufacturerRepository"}, {"original_string": "@Mock\n    private DeviceModelRepository deviceModelRepository;", "modifier": "@Mock\n    private", "type": "DeviceModelRepository", "declarator": "deviceModelRepository", "var_name": "deviceModelRepository"}, {"original_string": "@Mock\n    private OrganisationRepository organisationRepository;", "modifier": "@Mock\n    private", "type": "OrganisationRepository", "declarator": "organisationRepository", "var_name": "organisationRepository"}, {"original_string": "@Mock\n    private DeviceAuthorizationRepository deviceAuthorizationRepository;", "modifier": "@Mock\n    private", "type": "DeviceAuthorizationRepository", "declarator": "deviceAuthorizationRepository", "var_name": "deviceAuthorizationRepository"}, {"original_string": "@Mock\n    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;", "modifier": "@Mock\n    private", "type": "OsgpCoreRequestMessageSender", "declarator": "osgpCoreRequestMessageSender", "var_name": "osgpCoreRequestMessageSender"}, {"original_string": "@Mock\n    private DeviceMessageMetadata deviceMessageMetadata;", "modifier": "@Mock\n    private", "type": "DeviceMessageMetadata", "declarator": "deviceMessageMetadata", "var_name": "deviceMessageMetadata"}, {"original_string": "@Mock\n    private AddSmartMeterRequest addSmartMeterRequest;", "modifier": "@Mock\n    private", "type": "AddSmartMeterRequest", "declarator": "addSmartMeterRequest", "var_name": "addSmartMeterRequest"}, {"original_string": "@Mock\n    private SmartMeteringDevice smartMeteringDevice;", "modifier": "@Mock\n    private", "type": "SmartMeteringDevice", "declarator": "smartMeteringDevice", "var_name": "smartMeteringDevice"}, {"original_string": "@Mock\n    private SmartMeter smartMeter;", "modifier": "@Mock\n    private", "type": "SmartMeter", "declarator": "smartMeter", "var_name": "smartMeter"}, {"original_string": "@Mock\n    private ProtocolInfo protocolInfo;", "modifier": "@Mock\n    private", "type": "ProtocolInfo", "declarator": "protocolInfo", "var_name": "protocolInfo"}, {"original_string": "@Mock\n    private DeviceModel deviceModel;", "modifier": "@Mock\n    private", "type": "DeviceModel", "declarator": "deviceModel", "var_name": "deviceModel"}], "file": "osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/InstallationServiceTest.java"}, "test_case": {"identifier": "addMeterDeviceExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addMeterDeviceExists() {\n\n        // SETUP\n        when(this.smartMeteringDeviceRepository.findByDeviceIdentification(DEVICE_IDENTIFICATION))\n                .thenReturn(this.smartMeter);\n\n        // CALL\n        try {\n            this.instance.addMeter(this.deviceMessageMetadata, this.addSmartMeterRequest);\n        } catch (final FunctionalException e) {\n            assertThat(e.getExceptionType()).isEqualTo(FunctionalExceptionType.EXISTING_DEVICE);\n            assertThat(e.getComponentType()).isEqualTo(ComponentType.DOMAIN_SMART_METERING);\n        }\n    }", "signature": "void addMeterDeviceExists()", "full_signature": "@Test public void addMeterDeviceExists()", "class_method_signature": "InstallationServiceTest.addMeterDeviceExists()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findByDeviceIdentification", "addMeter", "isEqualTo", "assertThat", "getExceptionType", "isEqualTo", "assertThat", "getComponentType"]}, "focal_class": {"identifier": "InstallationService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(InstallationService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(InstallationService.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    @Qualifier(value = \"domainSmartMeteringOutboundOsgpCoreRequestsMessageSender\")\n    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;", "modifier": "@Autowired\n    @Qualifier(value = \"domainSmartMeteringOutboundOsgpCoreRequestsMessageSender\")\n    private", "type": "OsgpCoreRequestMessageSender", "declarator": "osgpCoreRequestMessageSender", "var_name": "osgpCoreRequestMessageSender"}, {"original_string": "@Autowired\n    private MapperFactory mapperFactory;", "modifier": "@Autowired\n    private", "type": "MapperFactory", "declarator": "mapperFactory", "var_name": "mapperFactory"}, {"original_string": "@Autowired\n    @Qualifier(value = \"domainSmartMeteringOutboundWebServiceResponsesMessageSender\")\n    private WebServiceResponseMessageSender webServiceResponseMessageSender;", "modifier": "@Autowired\n    @Qualifier(value = \"domainSmartMeteringOutboundWebServiceResponsesMessageSender\")\n    private", "type": "WebServiceResponseMessageSender", "declarator": "webServiceResponseMessageSender", "var_name": "webServiceResponseMessageSender"}, {"original_string": "@Autowired\n    @Qualifier(value = \"domainSmartMeteringSmartMeterService\")\n    private SmartMeterService smartMeterService;", "modifier": "@Autowired\n    @Qualifier(value = \"domainSmartMeteringSmartMeterService\")\n    private", "type": "SmartMeterService", "declarator": "smartMeterService", "var_name": "smartMeterService"}, {"original_string": "@Autowired\n    private MBusGatewayService mBusGatewayService;", "modifier": "@Autowired\n    private", "type": "MBusGatewayService", "declarator": "mBusGatewayService", "var_name": "mBusGatewayService"}, {"original_string": "@Autowired\n    private CommonMapper commonMapper;", "modifier": "@Autowired\n    private", "type": "CommonMapper", "declarator": "commonMapper", "var_name": "commonMapper"}], "methods": [{"identifier": "InstallationService", "parameters": "()", "modifiers": "public", "return": "", "signature": " InstallationService()", "full_signature": "public  InstallationService()", "class_method_signature": "InstallationService.InstallationService()", "testcase": false, "constructor": true}, {"identifier": "addMeter", "parameters": "(final DeviceMessageMetadata deviceMessageMetadata,\n            final AddSmartMeterRequest addSmartMeterRequest)", "modifiers": "public", "return": "void", "signature": "void addMeter(final DeviceMessageMetadata deviceMessageMetadata,\n            final AddSmartMeterRequest addSmartMeterRequest)", "full_signature": "public void addMeter(final DeviceMessageMetadata deviceMessageMetadata,\n            final AddSmartMeterRequest addSmartMeterRequest)", "class_method_signature": "InstallationService.addMeter(final DeviceMessageMetadata deviceMessageMetadata,\n            final AddSmartMeterRequest addSmartMeterRequest)", "testcase": false, "constructor": false}, {"identifier": "removeMeter", "parameters": "(final DeviceMessageMetadata deviceMessageMetadata)", "modifiers": "public", "return": "void", "signature": "void removeMeter(final DeviceMessageMetadata deviceMessageMetadata)", "full_signature": "public void removeMeter(final DeviceMessageMetadata deviceMessageMetadata)", "class_method_signature": "InstallationService.removeMeter(final DeviceMessageMetadata deviceMessageMetadata)", "testcase": false, "constructor": false}, {"identifier": "getRequestMessage", "parameters": "(final DeviceMessageMetadata deviceMessageMetadata,\n            final SmartMeteringDevice smartMeteringDevice)", "modifiers": "private", "return": "RequestMessage", "signature": "RequestMessage getRequestMessage(final DeviceMessageMetadata deviceMessageMetadata,\n            final SmartMeteringDevice smartMeteringDevice)", "full_signature": "private RequestMessage getRequestMessage(final DeviceMessageMetadata deviceMessageMetadata,\n            final SmartMeteringDevice smartMeteringDevice)", "class_method_signature": "InstallationService.getRequestMessage(final DeviceMessageMetadata deviceMessageMetadata,\n            final SmartMeteringDevice smartMeteringDevice)", "testcase": false, "constructor": false}, {"identifier": "handleAddMeterResponse", "parameters": "(final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType deviceResult, final OsgpException exception)", "modifiers": "@Transactional(value = \"transactionManager\") public", "return": "void", "signature": "void handleAddMeterResponse(final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType deviceResult, final OsgpException exception)", "full_signature": "@Transactional(value = \"transactionManager\") public void handleAddMeterResponse(final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType deviceResult, final OsgpException exception)", "class_method_signature": "InstallationService.handleAddMeterResponse(final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType deviceResult, final OsgpException exception)", "testcase": false, "constructor": false}, {"identifier": "coupleMbusDevice", "parameters": "(final DeviceMessageMetadata deviceMessageMetadata,\n            final CoupleMbusDeviceRequestData requestData)", "modifiers": "public", "return": "void", "signature": "void coupleMbusDevice(final DeviceMessageMetadata deviceMessageMetadata,\n            final CoupleMbusDeviceRequestData requestData)", "full_signature": "public void coupleMbusDevice(final DeviceMessageMetadata deviceMessageMetadata,\n            final CoupleMbusDeviceRequestData requestData)", "class_method_signature": "InstallationService.coupleMbusDevice(final DeviceMessageMetadata deviceMessageMetadata,\n            final CoupleMbusDeviceRequestData requestData)", "testcase": false, "constructor": false}, {"identifier": "deCoupleMbusDevice", "parameters": "(final DeviceMessageMetadata deviceMessageMetadata,\n            final DeCoupleMbusDeviceRequestData requestData)", "modifiers": "@Transactional(value = \"transactionManager\") public", "return": "void", "signature": "void deCoupleMbusDevice(final DeviceMessageMetadata deviceMessageMetadata,\n            final DeCoupleMbusDeviceRequestData requestData)", "full_signature": "@Transactional(value = \"transactionManager\") public void deCoupleMbusDevice(final DeviceMessageMetadata deviceMessageMetadata,\n            final DeCoupleMbusDeviceRequestData requestData)", "class_method_signature": "InstallationService.deCoupleMbusDevice(final DeviceMessageMetadata deviceMessageMetadata,\n            final DeCoupleMbusDeviceRequestData requestData)", "testcase": false, "constructor": false}, {"identifier": "coupleMbusDeviceByChannel", "parameters": "(final DeviceMessageMetadata deviceMessageMetadata,\n            final CoupleMbusDeviceByChannelRequestData requestData)", "modifiers": "@Transactional(value = \"transactionManager\") public", "return": "void", "signature": "void coupleMbusDeviceByChannel(final DeviceMessageMetadata deviceMessageMetadata,\n            final CoupleMbusDeviceByChannelRequestData requestData)", "full_signature": "@Transactional(value = \"transactionManager\") public void coupleMbusDeviceByChannel(final DeviceMessageMetadata deviceMessageMetadata,\n            final CoupleMbusDeviceByChannelRequestData requestData)", "class_method_signature": "InstallationService.coupleMbusDeviceByChannel(final DeviceMessageMetadata deviceMessageMetadata,\n            final CoupleMbusDeviceByChannelRequestData requestData)", "testcase": false, "constructor": false}, {"identifier": "handleCoupleMbusDeviceResponse", "parameters": "(final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType result, final OsgpException exception,\n            final MbusChannelElementsResponseDto dataObject)", "modifiers": "@Transactional(value = \"transactionManager\") public", "return": "void", "signature": "void handleCoupleMbusDeviceResponse(final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType result, final OsgpException exception,\n            final MbusChannelElementsResponseDto dataObject)", "full_signature": "@Transactional(value = \"transactionManager\") public void handleCoupleMbusDeviceResponse(final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType result, final OsgpException exception,\n            final MbusChannelElementsResponseDto dataObject)", "class_method_signature": "InstallationService.handleCoupleMbusDeviceResponse(final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType result, final OsgpException exception,\n            final MbusChannelElementsResponseDto dataObject)", "testcase": false, "constructor": false}, {"identifier": "handleDeCoupleMbusDeviceResponse", "parameters": "(final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType result, final OsgpException exception,\n            final DeCoupleMbusDeviceResponseDto deCoupleMbusDeviceResponseDto)", "modifiers": "@Transactional(value = \"transactionManager\") public", "return": "void", "signature": "void handleDeCoupleMbusDeviceResponse(final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType result, final OsgpException exception,\n            final DeCoupleMbusDeviceResponseDto deCoupleMbusDeviceResponseDto)", "full_signature": "@Transactional(value = \"transactionManager\") public void handleDeCoupleMbusDeviceResponse(final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType result, final OsgpException exception,\n            final DeCoupleMbusDeviceResponseDto deCoupleMbusDeviceResponseDto)", "class_method_signature": "InstallationService.handleDeCoupleMbusDeviceResponse(final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType result, final OsgpException exception,\n            final DeCoupleMbusDeviceResponseDto deCoupleMbusDeviceResponseDto)", "testcase": false, "constructor": false}, {"identifier": "handleCoupleMbusDeviceByChannelResponse", "parameters": "(final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType responseMessageResultType, final OsgpException osgpException,\n            final CoupleMbusDeviceByChannelResponseDto dataObject)", "modifiers": "@Transactional(value = \"transactionManager\") public", "return": "void", "signature": "void handleCoupleMbusDeviceByChannelResponse(final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType responseMessageResultType, final OsgpException osgpException,\n            final CoupleMbusDeviceByChannelResponseDto dataObject)", "full_signature": "@Transactional(value = \"transactionManager\") public void handleCoupleMbusDeviceByChannelResponse(final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType responseMessageResultType, final OsgpException osgpException,\n            final CoupleMbusDeviceByChannelResponseDto dataObject)", "class_method_signature": "InstallationService.handleCoupleMbusDeviceByChannelResponse(final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType responseMessageResultType, final OsgpException osgpException,\n            final CoupleMbusDeviceByChannelResponseDto dataObject)", "testcase": false, "constructor": false}, {"identifier": "handleResponse", "parameters": "(final String methodName, final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType deviceResult, final OsgpException exception)", "modifiers": "@Transactional(value = \"transactionManager\") public", "return": "void", "signature": "void handleResponse(final String methodName, final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType deviceResult, final OsgpException exception)", "full_signature": "@Transactional(value = \"transactionManager\") public void handleResponse(final String methodName, final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType deviceResult, final OsgpException exception)", "class_method_signature": "InstallationService.handleResponse(final String methodName, final DeviceMessageMetadata deviceMessageMetadata,\n            final ResponseMessageResultType deviceResult, final OsgpException exception)", "testcase": false, "constructor": false}, {"identifier": "getResponseMessageResultType", "parameters": "(final ResponseMessageResultType deviceResult,\n            final OsgpException exception)", "modifiers": "private", "return": "ResponseMessageResultType", "signature": "ResponseMessageResultType getResponseMessageResultType(final ResponseMessageResultType deviceResult,\n            final OsgpException exception)", "full_signature": "private ResponseMessageResultType getResponseMessageResultType(final ResponseMessageResultType deviceResult,\n            final OsgpException exception)", "class_method_signature": "InstallationService.getResponseMessageResultType(final ResponseMessageResultType deviceResult,\n            final OsgpException exception)", "testcase": false, "constructor": false}], "file": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/InstallationService.java"}, "focal_method": {"identifier": "addMeter", "parameters": "(final DeviceMessageMetadata deviceMessageMetadata,\n            final AddSmartMeterRequest addSmartMeterRequest)", "modifiers": "public", "return": "void", "body": "public void addMeter(final DeviceMessageMetadata deviceMessageMetadata,\n            final AddSmartMeterRequest addSmartMeterRequest) throws FunctionalException {\n        final String organisationId = deviceMessageMetadata.getOrganisationIdentification();\n        final String deviceId = deviceMessageMetadata.getDeviceIdentification();\n        LOGGER.debug(\"addMeter for organisationIdentification: {} for deviceIdentification: {}\", organisationId,\n                deviceId);\n        final SmartMeteringDevice smartMeteringDevice = addSmartMeterRequest.getDevice();\n\n        final SmartMeter smartMeter = this.smartMeterService.getSmartMeter(deviceId, smartMeteringDevice);\n        this.smartMeterService.storeMeter(organisationId, addSmartMeterRequest, smartMeter);\n        this.osgpCoreRequestMessageSender.send(this.getRequestMessage(deviceMessageMetadata, smartMeteringDevice),\n                deviceMessageMetadata.getMessageType(), deviceMessageMetadata.getMessagePriority(),\n                deviceMessageMetadata.getScheduleTime());\n    }", "signature": "void addMeter(final DeviceMessageMetadata deviceMessageMetadata,\n            final AddSmartMeterRequest addSmartMeterRequest)", "full_signature": "public void addMeter(final DeviceMessageMetadata deviceMessageMetadata,\n            final AddSmartMeterRequest addSmartMeterRequest)", "class_method_signature": "InstallationService.addMeter(final DeviceMessageMetadata deviceMessageMetadata,\n            final AddSmartMeterRequest addSmartMeterRequest)", "testcase": false, "constructor": false, "invocations": ["getOrganisationIdentification", "getDeviceIdentification", "debug", "getDevice", "getSmartMeter", "storeMeter", "send", "getRequestMessage", "getMessageType", "getMessagePriority", "getScheduleTime"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}