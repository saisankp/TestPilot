{"test_class": {"identifier": "AsgardBundleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String BUNDLE_TEST_PATH = \"~/doraemon-bundle/\";", "modifier": "public static final", "type": "String", "declarator": "BUNDLE_TEST_PATH = \"~/doraemon-bundle/\"", "var_name": "BUNDLE_TEST_PATH"}], "file": "asgard-doraemon/src/test/java/io/github/qianxingchuan/framework/doraemon/bundle/AsgardBundleTest.java"}, "test_case": {"identifier": "test_INIT_bundle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_INIT_bundle() throws Exception {\n        String bundleFileName = \"/sample-auth-bundle1-2048-SNAPSHOT-release.zip\";\n        URL url = AsgardBundleTest.class.getResource(bundleFileName);\n        String moduleName = StringUtils.substringBeforeLast(\"sample-auth-bundle1-2048-SNAPSHOT-release.zip\", \".zip\");\n        String bundleExtractPath = BUNDLE_TEST_PATH + moduleName + \"/\";\n        AsgardBundle asgardBundle = initBundle(url.getFile()).getBundle();\n        assertThat(asgardBundle.getBundleName()).isEqualTo(\"sample-auth-bundle1-2048-SNAPSHOT-release\");\n\n        File extractPath = new File(bundleExtractPath);\n        assertThat(extractPath.exists()).isTrue();\n        File bundleClassPath = new File(bundleExtractPath + \"BUNDLE-CLASS\");\n        assertThat(bundleClassPath.exists() && bundleClassPath.isDirectory()).isTrue();\n        File bundleJarPath = new File(bundleExtractPath + \"lib\");\n        assertThat(bundleJarPath.exists() && bundleJarPath.isDirectory()).isTrue();\n        File metaInfPath = new File(bundleExtractPath + \"META-INF\");\n        assertThat(metaInfPath.exists() && metaInfPath.isDirectory()).isTrue();\n    }", "signature": "void test_INIT_bundle()", "full_signature": "@Test public void test_INIT_bundle()", "class_method_signature": "AsgardBundleTest.test_INIT_bundle()", "testcase": true, "constructor": false, "invocations": ["getResource", "substringBeforeLast", "getBundle", "initBundle", "getFile", "isEqualTo", "assertThat", "getBundleName", "isTrue", "assertThat", "exists", "isTrue", "assertThat", "exists", "isDirectory", "isTrue", "assertThat", "exists", "isDirectory", "isTrue", "assertThat", "exists", "isDirectory"]}, "focal_class": {"identifier": "AsgardBundle", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PARAM_ERROR_NAME = \"errorName\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_ERROR_NAME = \"errorName\"", "var_name": "PARAM_ERROR_NAME"}, {"original_string": "private Logger logger = LoggerFactory.getLogger(AsgardBundle.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AsgardBundle.class)", "var_name": "logger"}, {"original_string": "private ConcurrentHashMap<String, Class<?>> shareClassMap = new ConcurrentHashMap<>();", "modifier": "private", "type": "ConcurrentHashMap<String, Class<?>>", "declarator": "shareClassMap = new ConcurrentHashMap<>()", "var_name": "shareClassMap"}, {"original_string": "private AsgardClassLoader bundleClassLoader;", "modifier": "private", "type": "AsgardClassLoader", "declarator": "bundleClassLoader", "var_name": "bundleClassLoader"}, {"original_string": "private BundleConfiguration bundleConfiguration;", "modifier": "private", "type": "BundleConfiguration", "declarator": "bundleConfiguration", "var_name": "bundleConfiguration"}, {"original_string": "private ClassLoader parentClassLoader;", "modifier": "private", "type": "ClassLoader", "declarator": "parentClassLoader", "var_name": "parentClassLoader"}, {"original_string": "private volatile boolean bundleRunning = false;", "modifier": "private volatile", "type": "boolean", "declarator": "bundleRunning = false", "var_name": "bundleRunning"}, {"original_string": "private String bundleName;", "modifier": "private", "type": "String", "declarator": "bundleName", "var_name": "bundleName"}, {"original_string": "private BundleService bundleService;", "modifier": "private", "type": "BundleService", "declarator": "bundleService", "var_name": "bundleService"}], "methods": [{"identifier": "AsgardBundle", "parameters": "(BundleConfiguration bundleConfiguration, ClassLoader parentClassLoader)", "modifiers": "public", "return": "", "signature": " AsgardBundle(BundleConfiguration bundleConfiguration, ClassLoader parentClassLoader)", "full_signature": "public  AsgardBundle(BundleConfiguration bundleConfiguration, ClassLoader parentClassLoader)", "class_method_signature": "AsgardBundle.AsgardBundle(BundleConfiguration bundleConfiguration, ClassLoader parentClassLoader)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void init()", "full_signature": "public synchronized void init()", "class_method_signature": "AsgardBundle.init()", "testcase": false, "constructor": false}, {"identifier": "getSharedClass", "parameters": "(String classFullName)", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getSharedClass(String classFullName)", "full_signature": "public Class<?> getSharedClass(String classFullName)", "class_method_signature": "AsgardBundle.getSharedClass(String classFullName)", "testcase": false, "constructor": false}, {"identifier": "getBundleName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBundleName()", "full_signature": "public String getBundleName()", "class_method_signature": "AsgardBundle.getBundleName()", "testcase": false, "constructor": false}, {"identifier": "getBundleService", "parameters": "()", "modifiers": "public", "return": "BundleService", "signature": "BundleService getBundleService()", "full_signature": "public BundleService getBundleService()", "class_method_signature": "AsgardBundle.getBundleService()", "testcase": false, "constructor": false}, {"identifier": "getBundleClassLoader", "parameters": "()", "modifiers": "public", "return": "AsgardClassLoader", "signature": "AsgardClassLoader getBundleClassLoader()", "full_signature": "public AsgardClassLoader getBundleClassLoader()", "class_method_signature": "AsgardBundle.getBundleClassLoader()", "testcase": false, "constructor": false}, {"identifier": "initBundleClassLoader", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initBundleClassLoader()", "full_signature": "private void initBundleClassLoader()", "class_method_signature": "AsgardBundle.initBundleClassLoader()", "testcase": false, "constructor": false}, {"identifier": "buildClassPathUrls", "parameters": "(String extractPath)", "modifiers": "private", "return": "URL[]", "signature": "URL[] buildClassPathUrls(String extractPath)", "full_signature": "private URL[] buildClassPathUrls(String extractPath)", "class_method_signature": "AsgardBundle.buildClassPathUrls(String extractPath)", "testcase": false, "constructor": false}, {"identifier": "bundleCustomRun", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void bundleCustomRun()", "full_signature": "private void bundleCustomRun()", "class_method_signature": "AsgardBundle.bundleCustomRun()", "testcase": false, "constructor": false}, {"identifier": "loadConfigure", "parameters": "(String extractPath)", "modifiers": "private", "return": "void", "signature": "void loadConfigure(String extractPath)", "full_signature": "private void loadConfigure(String extractPath)", "class_method_signature": "AsgardBundle.loadConfigure(String extractPath)", "testcase": false, "constructor": false}, {"identifier": "loadBundleExportClasses", "parameters": "(AsgardClassLoader bundleClassLoader)", "modifiers": "private", "return": "void", "signature": "void loadBundleExportClasses(AsgardClassLoader bundleClassLoader)", "full_signature": "private void loadBundleExportClasses(AsgardClassLoader bundleClassLoader)", "class_method_signature": "AsgardBundle.loadBundleExportClasses(AsgardClassLoader bundleClassLoader)", "testcase": false, "constructor": false}, {"identifier": "unpackBundleZip", "parameters": "(File bundleFile)", "modifiers": "private", "return": "void", "signature": "void unpackBundleZip(File bundleFile)", "full_signature": "private void unpackBundleZip(File bundleFile)", "class_method_signature": "AsgardBundle.unpackBundleZip(File bundleFile)", "testcase": false, "constructor": false}], "file": "asgard-doraemon/src/main/java/io/github/qianxingchuan/framework/doraemon/bundle/AsgardBundle.java"}, "focal_method": {"identifier": "getBundleName", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getBundleName() {\n        return bundleName;\n    }", "signature": "String getBundleName()", "full_signature": "public String getBundleName()", "class_method_signature": "AsgardBundle.getBundleName()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 188574042, "url": "https://github.com/qianxingchuan/doraemon", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 9924, "license": "licensed"}}