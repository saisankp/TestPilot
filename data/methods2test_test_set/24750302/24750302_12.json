{"test_class": {"identifier": "ReferencedParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "alien4cloud-tosca/src/test/java/alien4cloud/tosca/parser/impl/base/ReferencedParserTest.java"}, "test_case": {"identifier": "referenceToMissingTypeShouldFail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void referenceToMissingTypeShouldFail() {\n        ReferencedParser referencedParser = new ReferencedParser(\"missingParser\");\n        ParsingContextExecution contextExecution = new ParsingContextExecution();\n        try {\n            contextExecution.init();\n            contextExecution.setRegistry(Maps.newHashMap());\n            Node node = Mockito.mock(Node.class);\n            Mockito.when(node.getStartMark()).thenReturn(new Mark(\"name\", 0, 10, 10, \"\", 0));\n            Mockito.when(node.getEndMark()).thenReturn(new Mark(\"name\", 0, 10, 10, \"\", 0));\n            referencedParser.parse(node, contextExecution);\n            assertEquals(ParsingErrorLevel.ERROR, contextExecution.getParsingErrors().get(0).getErrorLevel());\n            assertEquals(ErrorCode.ALIEN_MAPPING_ERROR, contextExecution.getParsingErrors().get(0).getErrorCode());\n        } finally {\n            ParsingContextExecution.destroy();\n        }\n    }", "signature": "void referenceToMissingTypeShouldFail()", "full_signature": "@Test public void referenceToMissingTypeShouldFail()", "class_method_signature": "ReferencedParserTest.referenceToMissingTypeShouldFail()", "testcase": true, "constructor": false, "invocations": ["init", "setRegistry", "newHashMap", "mock", "thenReturn", "when", "getStartMark", "thenReturn", "when", "getEndMark", "parse", "assertEquals", "getErrorLevel", "get", "getParsingErrors", "assertEquals", "getErrorCode", "get", "getParsingErrors", "destroy"]}, "focal_class": {"identifier": "ReferencedParser", "superclass": "", "interfaces": "implements INodeParser<T>", "fields": [{"original_string": "private String typeName;", "modifier": "private", "type": "String", "declarator": "typeName", "var_name": "typeName"}], "methods": [{"identifier": "ReferencedParser", "parameters": "(String typeName)", "modifiers": "public", "return": "", "signature": " ReferencedParser(String typeName)", "full_signature": "public  ReferencedParser(String typeName)", "class_method_signature": "ReferencedParser.ReferencedParser(String typeName)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(Node node, ParsingContextExecution context)", "modifiers": "@Override public", "return": "T", "signature": "T parse(Node node, ParsingContextExecution context)", "full_signature": "@Override public T parse(Node node, ParsingContextExecution context)", "class_method_signature": "ReferencedParser.parse(Node node, ParsingContextExecution context)", "testcase": false, "constructor": false}], "file": "alien4cloud-tosca/src/main/java/alien4cloud/tosca/parser/impl/base/ReferencedParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(Node node, ParsingContextExecution context)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public T parse(Node node, ParsingContextExecution context) {\n        INodeParser<?> delegate = context.getRegistry().get(typeName);\n        if (delegate == null) {\n            log.error(\"No parser found for yaml type {}\", typeName);\n            context.getParsingErrors().add(\n                    new ParsingError(ErrorCode.ALIEN_MAPPING_ERROR, \"No parser found for yaml type\", node.getStartMark(), \"\", node.getEndMark(), typeName));\n            return null;\n        }\n        return (T) delegate.parse(node, context);\n    }", "signature": "T parse(Node node, ParsingContextExecution context)", "full_signature": "@Override public T parse(Node node, ParsingContextExecution context)", "class_method_signature": "ReferencedParser.parse(Node node, ParsingContextExecution context)", "testcase": false, "constructor": false, "invocations": ["get", "getRegistry", "error", "add", "getParsingErrors", "getStartMark", "getEndMark", "parse"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}