{"test_class": {"identifier": "MultiplePdfSourceMultipleOutputParametersTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-model/src/test/java/org/sejda/model/parameter/base/MultiplePdfSourceMultipleOutputParametersTest.java"}, "test_case": {"identifier": "getSpecificResultFilename", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getSpecificResultFilename() {\n        MultiplePdfSourceMultipleOutputParameters victim = new MultiplePdfSourceMultipleOutputParameters();\n        victim.addSpecificResultFilenames(Arrays.asList(\"one\", \"two\", \"three.json\"));\n        assertEquals(\"one.txt\", victim.getSpecificResultFilename(1, \".txt\"));\n        assertEquals(\"two.pdf\", victim.getSpecificResultFilename(2));\n        assertEquals(\"three.json\", victim.getSpecificResultFilename(3, \"\"));\n        assertNull(victim.getSpecificResultFilename(10));\n    }", "signature": "void getSpecificResultFilename()", "full_signature": "@Test public void getSpecificResultFilename()", "class_method_signature": "MultiplePdfSourceMultipleOutputParametersTest.getSpecificResultFilename()", "testcase": true, "constructor": false, "invocations": ["addSpecificResultFilenames", "asList", "assertEquals", "getSpecificResultFilename", "assertEquals", "getSpecificResultFilename", "assertEquals", "getSpecificResultFilename", "assertNull", "getSpecificResultFilename"]}, "focal_class": {"identifier": "MultiplePdfSourceMultipleOutputParameters", "superclass": "extends MultiplePdfSourceParameters", "interfaces": "implements SingleOrMultipleOutputTaskParameters", "fields": [{"original_string": "private String outputPrefix = \"\";", "modifier": "private", "type": "String", "declarator": "outputPrefix = \"\"", "var_name": "outputPrefix"}, {"original_string": "@Valid\n    @NotNull\n    private SingleOrMultipleTaskOutput output;", "modifier": "@Valid\n    @NotNull\n    private", "type": "SingleOrMultipleTaskOutput", "declarator": "output", "var_name": "output"}, {"original_string": "private final List<String> specificResultFilenames = new ArrayList<>();", "modifier": "private final", "type": "List<String>", "declarator": "specificResultFilenames = new ArrayList<>()", "var_name": "specificResultFilenames"}], "methods": [{"identifier": "getOutputPrefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getOutputPrefix()", "full_signature": "@Override public String getOutputPrefix()", "class_method_signature": "MultiplePdfSourceMultipleOutputParameters.getOutputPrefix()", "testcase": false, "constructor": false}, {"identifier": "setOutputPrefix", "parameters": "(String outputPrefix)", "modifiers": "@Override public", "return": "void", "signature": "void setOutputPrefix(String outputPrefix)", "full_signature": "@Override public void setOutputPrefix(String outputPrefix)", "class_method_signature": "MultiplePdfSourceMultipleOutputParameters.setOutputPrefix(String outputPrefix)", "testcase": false, "constructor": false}, {"identifier": "getOutput", "parameters": "()", "modifiers": "@Override public", "return": "SingleOrMultipleTaskOutput", "signature": "SingleOrMultipleTaskOutput getOutput()", "full_signature": "@Override public SingleOrMultipleTaskOutput getOutput()", "class_method_signature": "MultiplePdfSourceMultipleOutputParameters.getOutput()", "testcase": false, "constructor": false}, {"identifier": "setOutput", "parameters": "(SingleOrMultipleTaskOutput output)", "modifiers": "@Override public", "return": "void", "signature": "void setOutput(SingleOrMultipleTaskOutput output)", "full_signature": "@Override public void setOutput(SingleOrMultipleTaskOutput output)", "class_method_signature": "MultiplePdfSourceMultipleOutputParameters.setOutput(SingleOrMultipleTaskOutput output)", "testcase": false, "constructor": false}, {"identifier": "addSpecificResultFilename", "parameters": "(String filename)", "modifiers": "public", "return": "void", "signature": "void addSpecificResultFilename(String filename)", "full_signature": "public void addSpecificResultFilename(String filename)", "class_method_signature": "MultiplePdfSourceMultipleOutputParameters.addSpecificResultFilename(String filename)", "testcase": false, "constructor": false}, {"identifier": "addSpecificResultFilenames", "parameters": "(Collection<String> filenames)", "modifiers": "public", "return": "void", "signature": "void addSpecificResultFilenames(Collection<String> filenames)", "full_signature": "public void addSpecificResultFilenames(Collection<String> filenames)", "class_method_signature": "MultiplePdfSourceMultipleOutputParameters.addSpecificResultFilenames(Collection<String> filenames)", "testcase": false, "constructor": false}, {"identifier": "getSpecificResultFilenames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getSpecificResultFilenames()", "full_signature": "public List<String> getSpecificResultFilenames()", "class_method_signature": "MultiplePdfSourceMultipleOutputParameters.getSpecificResultFilenames()", "testcase": false, "constructor": false}, {"identifier": "getSpecificResultFilename", "parameters": "(int fileNumber)", "modifiers": "public", "return": "String", "signature": "String getSpecificResultFilename(int fileNumber)", "full_signature": "public String getSpecificResultFilename(int fileNumber)", "class_method_signature": "MultiplePdfSourceMultipleOutputParameters.getSpecificResultFilename(int fileNumber)", "testcase": false, "constructor": false}, {"identifier": "getSpecificResultFilename", "parameters": "(int fileNumber, String expectedExtension)", "modifiers": "public", "return": "String", "signature": "String getSpecificResultFilename(int fileNumber, String expectedExtension)", "full_signature": "public String getSpecificResultFilename(int fileNumber, String expectedExtension)", "class_method_signature": "MultiplePdfSourceMultipleOutputParameters.getSpecificResultFilename(int fileNumber, String expectedExtension)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MultiplePdfSourceMultipleOutputParameters.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "MultiplePdfSourceMultipleOutputParameters.equals(Object other)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/model/parameter/base/MultiplePdfSourceMultipleOutputParameters.java"}, "focal_method": {"identifier": "getSpecificResultFilename", "parameters": "(int fileNumber)", "modifiers": "public", "return": "String", "body": "public String getSpecificResultFilename(int fileNumber) {\n        return getSpecificResultFilename(fileNumber, \".pdf\");\n    }", "signature": "String getSpecificResultFilename(int fileNumber)", "full_signature": "public String getSpecificResultFilename(int fileNumber)", "class_method_signature": "MultiplePdfSourceMultipleOutputParameters.getSpecificResultFilename(int fileNumber)", "testcase": false, "constructor": false, "invocations": ["getSpecificResultFilename"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}