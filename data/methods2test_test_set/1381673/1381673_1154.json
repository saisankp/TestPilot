{"test_class": {"identifier": "RegressionModelImplementationProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final RegressionModelImplementationProvider PROVIDER = new RegressionModelImplementationProvider();", "modifier": "private static final", "type": "RegressionModelImplementationProvider", "declarator": "PROVIDER = new RegressionModelImplementationProvider()", "var_name": "PROVIDER"}, {"original_string": "private static final String RELEASE_ID = \"org.drools:kie-pmml-models-testing:1.0\";", "modifier": "private static final", "type": "String", "declarator": "RELEASE_ID = \"org.drools:kie-pmml-models-testing:1.0\"", "var_name": "RELEASE_ID"}, {"original_string": "private static final String SOURCE_1 = \"LinearRegressionSample.pmml\";", "modifier": "private static final", "type": "String", "declarator": "SOURCE_1 = \"LinearRegressionSample.pmml\"", "var_name": "SOURCE_1"}, {"original_string": "private static final String SOURCE_2 = \"test_regression.pmml\";", "modifier": "private static final", "type": "String", "declarator": "SOURCE_2 = \"test_regression.pmml\"", "var_name": "SOURCE_2"}, {"original_string": "private static final String SOURCE_3 = \"test_regression_clax.pmml\";", "modifier": "private static final", "type": "String", "declarator": "SOURCE_3 = \"test_regression_clax.pmml\"", "var_name": "SOURCE_3"}, {"original_string": "private static final List<RegressionModel.NormalizationMethod> VALID_NORMALIZATION_METHODS = Arrays.asList(NONE,\n                                                                                                             SOFTMAX,\n                                                                                                             LOGIT,\n                                                                                                             EXP,\n                                                                                                             PROBIT,\n                                                                                                             CLOGLOG,\n                                                                                                             LOGLOG,\n                                                                                                             CAUCHIT);", "modifier": "private static final", "type": "List<RegressionModel.NormalizationMethod>", "declarator": "VALID_NORMALIZATION_METHODS = Arrays.asList(NONE,\n                                                                                                             SOFTMAX,\n                                                                                                             LOGIT,\n                                                                                                             EXP,\n                                                                                                             PROBIT,\n                                                                                                             CLOGLOG,\n                                                                                                             LOGLOG,\n                                                                                                             CAUCHIT)", "var_name": "VALID_NORMALIZATION_METHODS"}], "file": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProviderTest.java"}, "test_case": {"identifier": "getKiePMMLModel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getKiePMMLModel() throws Exception {\n        final PMML pmml = TestUtils.loadFromFile(SOURCE_1);\n        assertNotNull(pmml);\n        assertEquals(1, pmml.getModels().size());\n        assertTrue(pmml.getModels().get(0) instanceof RegressionModel);\n        final KiePMMLRegressionModel retrieved = PROVIDER.getKiePMMLModel(pmml.getDataDictionary(),\n                                                                          pmml.getTransformationDictionary(),\n                                                                          (RegressionModel) pmml.getModels().get(0),\n                                                                          RELEASE_ID);\n        assertNotNull(retrieved);\n    }", "signature": "void getKiePMMLModel()", "full_signature": "@Test public void getKiePMMLModel()", "class_method_signature": "RegressionModelImplementationProviderTest.getKiePMMLModel()", "testcase": true, "constructor": false, "invocations": ["loadFromFile", "assertNotNull", "assertEquals", "size", "getModels", "assertTrue", "get", "getModels", "getKiePMMLModel", "getDataDictionary", "getTransformationDictionary", "get", "getModels", "assertNotNull"]}, "focal_class": {"identifier": "RegressionModelImplementationProvider", "superclass": "", "interfaces": "implements ModelImplementationProvider<RegressionModel, KiePMMLRegressionModel>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RegressionModelImplementationProvider.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RegressionModelImplementationProvider.class.getName())", "var_name": "logger"}, {"original_string": "private static final String INVALID_NORMALIZATION_METHOD = \"Invalid Normalization Method \";", "modifier": "private static final", "type": "String", "declarator": "INVALID_NORMALIZATION_METHOD = \"Invalid Normalization Method \"", "var_name": "INVALID_NORMALIZATION_METHOD"}], "methods": [{"identifier": "getPMMLModelType", "parameters": "()", "modifiers": "@Override public", "return": "PMML_MODEL", "signature": "PMML_MODEL getPMMLModelType()", "full_signature": "@Override public PMML_MODEL getPMMLModelType()", "class_method_signature": "RegressionModelImplementationProvider.getPMMLModelType()", "testcase": false, "constructor": false}, {"identifier": "getKiePMMLModel", "parameters": "(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final RegressionModel model, final Object kBuilder)", "modifiers": "@Override public", "return": "KiePMMLRegressionModel", "signature": "KiePMMLRegressionModel getKiePMMLModel(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final RegressionModel model, final Object kBuilder)", "full_signature": "@Override public KiePMMLRegressionModel getKiePMMLModel(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final RegressionModel model, final Object kBuilder)", "class_method_signature": "RegressionModelImplementationProvider.getKiePMMLModel(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final RegressionModel model, final Object kBuilder)", "testcase": false, "constructor": false}, {"identifier": "getKiePMMLModelFromPlugin", "parameters": "(final String packageName, final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final RegressionModel model, final Object kBuilder)", "modifiers": "@Override public", "return": "KiePMMLRegressionModel", "signature": "KiePMMLRegressionModel getKiePMMLModelFromPlugin(final String packageName, final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final RegressionModel model, final Object kBuilder)", "full_signature": "@Override public KiePMMLRegressionModel getKiePMMLModelFromPlugin(final String packageName, final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final RegressionModel model, final Object kBuilder)", "class_method_signature": "RegressionModelImplementationProvider.getKiePMMLModelFromPlugin(final String packageName, final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final RegressionModel model, final Object kBuilder)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(final DataDictionary dataDictionary, final RegressionModel toValidate)", "modifiers": "protected", "return": "void", "signature": "void validate(final DataDictionary dataDictionary, final RegressionModel toValidate)", "full_signature": "protected void validate(final DataDictionary dataDictionary, final RegressionModel toValidate)", "class_method_signature": "RegressionModelImplementationProvider.validate(final DataDictionary dataDictionary, final RegressionModel toValidate)", "testcase": false, "constructor": false}, {"identifier": "validateRegression", "parameters": "(final List<KiePMMLNameOpType> targetFields, final RegressionModel toValidate)", "modifiers": "", "return": "void", "signature": "void validateRegression(final List<KiePMMLNameOpType> targetFields, final RegressionModel toValidate)", "full_signature": " void validateRegression(final List<KiePMMLNameOpType> targetFields, final RegressionModel toValidate)", "class_method_signature": "RegressionModelImplementationProvider.validateRegression(final List<KiePMMLNameOpType> targetFields, final RegressionModel toValidate)", "testcase": false, "constructor": false}, {"identifier": "validateNormalizationMethod", "parameters": "(RegressionModel.NormalizationMethod toValidate)", "modifiers": "", "return": "void", "signature": "void validateNormalizationMethod(RegressionModel.NormalizationMethod toValidate)", "full_signature": " void validateNormalizationMethod(RegressionModel.NormalizationMethod toValidate)", "class_method_signature": "RegressionModelImplementationProvider.validateNormalizationMethod(RegressionModel.NormalizationMethod toValidate)", "testcase": false, "constructor": false}, {"identifier": "validateClassification", "parameters": "(final DataDictionary dataDictionary, final RegressionModel toValidate)", "modifiers": "private", "return": "void", "signature": "void validateClassification(final DataDictionary dataDictionary, final RegressionModel toValidate)", "full_signature": "private void validateClassification(final DataDictionary dataDictionary, final RegressionModel toValidate)", "class_method_signature": "RegressionModelImplementationProvider.validateClassification(final DataDictionary dataDictionary, final RegressionModel toValidate)", "testcase": false, "constructor": false}, {"identifier": "validateClassificationCategorical", "parameters": "(final DataDictionary dataDictionary, final RegressionModel toValidate, final String categoricalFieldName)", "modifiers": "private", "return": "void", "signature": "void validateClassificationCategorical(final DataDictionary dataDictionary, final RegressionModel toValidate, final String categoricalFieldName)", "full_signature": "private void validateClassificationCategorical(final DataDictionary dataDictionary, final RegressionModel toValidate, final String categoricalFieldName)", "class_method_signature": "RegressionModelImplementationProvider.validateClassificationCategorical(final DataDictionary dataDictionary, final RegressionModel toValidate, final String categoricalFieldName)", "testcase": false, "constructor": false}, {"identifier": "validateClassificationCategoricalBinary", "parameters": "(final RegressionModel toValidate)", "modifiers": "private", "return": "void", "signature": "void validateClassificationCategoricalBinary(final RegressionModel toValidate)", "full_signature": "private void validateClassificationCategoricalBinary(final RegressionModel toValidate)", "class_method_signature": "RegressionModelImplementationProvider.validateClassificationCategoricalBinary(final RegressionModel toValidate)", "testcase": false, "constructor": false}, {"identifier": "validateClassificationCategoricalNotBinary", "parameters": "(final RegressionModel toValidate)", "modifiers": "private", "return": "void", "signature": "void validateClassificationCategoricalNotBinary(final RegressionModel toValidate)", "full_signature": "private void validateClassificationCategoricalNotBinary(final RegressionModel toValidate)", "class_method_signature": "RegressionModelImplementationProvider.validateClassificationCategoricalNotBinary(final RegressionModel toValidate)", "testcase": false, "constructor": false}, {"identifier": "validateClassificationOrdinal", "parameters": "(final RegressionModel toValidate)", "modifiers": "private", "return": "void", "signature": "void validateClassificationOrdinal(final RegressionModel toValidate)", "full_signature": "private void validateClassificationOrdinal(final RegressionModel toValidate)", "class_method_signature": "RegressionModelImplementationProvider.validateClassificationOrdinal(final RegressionModel toValidate)", "testcase": false, "constructor": false}, {"identifier": "validateRegressionTargetField", "parameters": "(final List<KiePMMLNameOpType> targetFields, final RegressionModel toValidate)", "modifiers": "private", "return": "void", "signature": "void validateRegressionTargetField(final List<KiePMMLNameOpType> targetFields, final RegressionModel toValidate)", "full_signature": "private void validateRegressionTargetField(final List<KiePMMLNameOpType> targetFields, final RegressionModel toValidate)", "class_method_signature": "RegressionModelImplementationProvider.validateRegressionTargetField(final List<KiePMMLNameOpType> targetFields, final RegressionModel toValidate)", "testcase": false, "constructor": false}, {"identifier": "isRegression", "parameters": "(final RegressionModel toValidate)", "modifiers": "private", "return": "boolean", "signature": "boolean isRegression(final RegressionModel toValidate)", "full_signature": "private boolean isRegression(final RegressionModel toValidate)", "class_method_signature": "RegressionModelImplementationProvider.isRegression(final RegressionModel toValidate)", "testcase": false, "constructor": false}, {"identifier": "isBinary", "parameters": "(final DataDictionary dataDictionary, final String categoricalFieldName)", "modifiers": "private", "return": "boolean", "signature": "boolean isBinary(final DataDictionary dataDictionary, final String categoricalFieldName)", "full_signature": "private boolean isBinary(final DataDictionary dataDictionary, final String categoricalFieldName)", "class_method_signature": "RegressionModelImplementationProvider.isBinary(final DataDictionary dataDictionary, final String categoricalFieldName)", "testcase": false, "constructor": false}, {"identifier": "getCategoricalTargetName", "parameters": "(final DataDictionary dataDictionary, final RegressionModel toValidate)", "modifiers": "private", "return": "String", "signature": "String getCategoricalTargetName(final DataDictionary dataDictionary, final RegressionModel toValidate)", "full_signature": "private String getCategoricalTargetName(final DataDictionary dataDictionary, final RegressionModel toValidate)", "class_method_signature": "RegressionModelImplementationProvider.getCategoricalTargetName(final DataDictionary dataDictionary, final RegressionModel toValidate)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java"}, "focal_method": {"identifier": "getKiePMMLModel", "parameters": "(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final RegressionModel model, final Object kBuilder)", "modifiers": "@Override public", "return": "KiePMMLRegressionModel", "body": "@Override\n    public KiePMMLRegressionModel getKiePMMLModel(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final RegressionModel model, final Object kBuilder) {\n        logger.trace(\"getKiePMMLModel {} {} {}\", dataDictionary, model, kBuilder);\n        validate(dataDictionary, model);\n        try {\n            return KiePMMLRegressionModelFactory.getKiePMMLRegressionModelClasses(dataDictionary, transformationDictionary, model);\n        } catch (IOException | IllegalAccessException | InstantiationException e) {\n            throw new KiePMMLException(e.getMessage(), e);\n        }\n    }", "signature": "KiePMMLRegressionModel getKiePMMLModel(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final RegressionModel model, final Object kBuilder)", "full_signature": "@Override public KiePMMLRegressionModel getKiePMMLModel(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final RegressionModel model, final Object kBuilder)", "class_method_signature": "RegressionModelImplementationProvider.getKiePMMLModel(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final RegressionModel model, final Object kBuilder)", "testcase": false, "constructor": false, "invocations": ["trace", "validate", "getKiePMMLRegressionModelClasses", "getMessage"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}