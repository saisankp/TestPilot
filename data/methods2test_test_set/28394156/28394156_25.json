{"test_class": {"identifier": "PythonExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static boolean shouldRunMaven;", "modifier": "private static", "type": "boolean", "declarator": "shouldRunMaven", "var_name": "shouldRunMaven"}, {"original_string": "private static String LINE_SEPARATOR = System.lineSeparator();", "modifier": "private static", "type": "String", "declarator": "LINE_SEPARATOR = System.lineSeparator()", "var_name": "LINE_SEPARATOR"}, {"original_string": "private static final String SYSTEM_PROPERTIES_MAP = \"__sys_prop__\";", "modifier": "private static final", "type": "String", "declarator": "SYSTEM_PROPERTIES_MAP = \"__sys_prop__\"", "var_name": "SYSTEM_PROPERTIES_MAP"}, {"original_string": "private static final String GET_SP_FUNCTION_DEFINITION =\n            \"import time\" + LINE_SEPARATOR +\n                    \"def check_env(sysPropName, expectedSysPropValue, variable, expectedVariableValue):\" + LINE_SEPARATOR +\n                    \"  time.sleep(3)\" + LINE_SEPARATOR +\n                    \"  property_value = __sys_prop__.get(sysPropName)\" + LINE_SEPARATOR +\n                    \"  print 'sysProperty: found ' + property_value + ', expected ' + expectedSysPropValue\" + LINE_SEPARATOR +\n                    \"  global_variable_value = globals().get(variable)\" + LINE_SEPARATOR +\n                    \"  print 'global variable: found ' + str(global_variable_value) + ', expected ' + expectedVariableValue\" + LINE_SEPARATOR +\n                    \"  EXPECTED=expectedVariableValue\" + LINE_SEPARATOR +\n                    \"  ACTUAL=property_value\" + LINE_SEPARATOR +\n                    \"  return expectedSysPropValue + ':' + property_value + ',' + expectedVariableValue + ':' + global_variable_value\";", "modifier": "private static final", "type": "String", "declarator": "GET_SP_FUNCTION_DEFINITION =\n            \"import time\" + LINE_SEPARATOR +\n                    \"def check_env(sysPropName, expectedSysPropValue, variable, expectedVariableValue):\" + LINE_SEPARATOR +\n                    \"  time.sleep(3)\" + LINE_SEPARATOR +\n                    \"  property_value = __sys_prop__.get(sysPropName)\" + LINE_SEPARATOR +\n                    \"  print 'sysProperty: found ' + property_value + ', expected ' + expectedSysPropValue\" + LINE_SEPARATOR +\n                    \"  global_variable_value = globals().get(variable)\" + LINE_SEPARATOR +\n                    \"  print 'global variable: found ' + str(global_variable_value) + ', expected ' + expectedVariableValue\" + LINE_SEPARATOR +\n                    \"  EXPECTED=expectedVariableValue\" + LINE_SEPARATOR +\n                    \"  ACTUAL=property_value\" + LINE_SEPARATOR +\n                    \"  return expectedSysPropValue + ':' + property_value + ',' + expectedVariableValue + ':' + global_variable_value\"", "var_name": "GET_SP_FUNCTION_DEFINITION"}, {"original_string": "private static final String VAR1 = \"VAR1\";", "modifier": "private static final", "type": "String", "declarator": "VAR1 = \"VAR1\"", "var_name": "VAR1"}, {"original_string": "private static final String VAR2 = \"VAR2\";", "modifier": "private static final", "type": "String", "declarator": "VAR2 = \"VAR2\"", "var_name": "VAR2"}, {"original_string": "private static final String EXECUTION_SCRIPT =\n            \"import sys\" + LINE_SEPARATOR +\n                    \"import time\" + LINE_SEPARATOR +\n                    \"time.sleep(3)\" + LINE_SEPARATOR +\n                    VAR1 + \"={0}\" + LINE_SEPARATOR +\n                    VAR2 + \"={1}\" + LINE_SEPARATOR +\n                    \"print ''VAR1='' + str(\" + VAR1 + \")\" + LINE_SEPARATOR +\n                    \"print ''VAR2='' + str(\" + VAR2 + \")\" + LINE_SEPARATOR;", "modifier": "private static final", "type": "String", "declarator": "EXECUTION_SCRIPT =\n            \"import sys\" + LINE_SEPARATOR +\n                    \"import time\" + LINE_SEPARATOR +\n                    \"time.sleep(3)\" + LINE_SEPARATOR +\n                    VAR1 + \"={0}\" + LINE_SEPARATOR +\n                    VAR2 + \"={1}\" + LINE_SEPARATOR +\n                    \"print ''VAR1='' + str(\" + VAR1 + \")\" + LINE_SEPARATOR +\n                    \"print ''VAR2='' + str(\" + VAR2 + \")\" + LINE_SEPARATOR", "var_name": "EXECUTION_SCRIPT"}, {"original_string": "private static final String PY_CLASS_IS_EXCLUDED_SCRIPT =\n            \"from Queue import Queue\" + LINE_SEPARATOR +\n                    \"x = 'abc'\" + LINE_SEPARATOR;", "modifier": "private static final", "type": "String", "declarator": "PY_CLASS_IS_EXCLUDED_SCRIPT =\n            \"from Queue import Queue\" + LINE_SEPARATOR +\n                    \"x = 'abc'\" + LINE_SEPARATOR", "var_name": "PY_CLASS_IS_EXCLUDED_SCRIPT"}, {"original_string": "private static final Map<String, Serializable> EMPTY_CALL_ARGUMENTS = Collections.emptyMap();", "modifier": "private static final", "type": "Map<String, Serializable>", "declarator": "EMPTY_CALL_ARGUMENTS = Collections.emptyMap()", "var_name": "EMPTY_CALL_ARGUMENTS"}, {"original_string": "private static final Map<String, Serializable> EXPECTED_CONTEXT_EXEC;", "modifier": "private static final", "type": "Map<String, Serializable>", "declarator": "EXPECTED_CONTEXT_EXEC", "var_name": "EXPECTED_CONTEXT_EXEC"}, {"original_string": "private static final Map<String, Serializable> EXPECTED_CONTEXT_EVAL;", "modifier": "private static final", "type": "Map<String, Serializable>", "declarator": "EXPECTED_CONTEXT_EVAL", "var_name": "EXPECTED_CONTEXT_EVAL"}, {"original_string": "@Resource(name = \"jythonRuntimeService\")\n    private PythonRuntimeService pythonRuntimeService;", "modifier": "@Resource(name = \"jythonRuntimeService\")\n    private", "type": "PythonRuntimeService", "declarator": "pythonRuntimeService", "var_name": "pythonRuntimeService"}], "file": "runtime-management/runtime-management-impl/src/test/java/io/cloudslang/runtime/impl/python/PythonExecutorTest.java"}, "test_case": {"identifier": "testMultithreadedExecWithDependencies", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultithreadedExecWithDependencies() throws InterruptedException {\n        Assume.assumeTrue(shouldRunMaven);\n        int executionsNum = 5;\n\n        final CountDownLatch latch = new CountDownLatch(executionsNum);\n\n        final String [] dependencies = {\n                new File(getClass().getClassLoader().getResource(\".m2/repository/python/math2/mult/1.0/mult-1.0.zip\").getFile()).getAbsolutePath(),\n                new File(getClass().getClassLoader().getResource(\".m2/repository/python/math2/sum/2.1/sum-2.1.zip\").getFile()).getAbsolutePath(),\n                new File(getClass().getClassLoader().getResource(\".m2/repository/python/math3/mult/1.2/mult-1.2.zip\").getFile()).getAbsolutePath(),\n                new File(getClass().getClassLoader().getResource(\".m2/repository/python/math3/sum/4.1/sum-4.1.zip\").getFile()).getAbsolutePath()\n        };\n\n        for(int i = 0; i < executionsNum; i++) {\n            final String executioId = String.valueOf(i);\n            final String varName = \"VAR\";\n            final String script = \"import sys\\nimport time\\nimport math_fake.utils.print_text as print_text\\ntime.sleep(3)\\n\" + varName + \" = print_text.foo('\" + executioId + \"')\\nprint \" + varName + \"\\n\";\n            final String dependency = dependencies[i % 4];\n\n            int count = dependency.contains(\"math2\") ? 2 : 3;\n            String sign = dependency.contains(\"sum-\") ? \"+\" : \"*\";\n\n            final StringBuilder expectedResult = new StringBuilder(executioId);\n            while (--count > 0) {\n                expectedResult.append(sign).append(executioId);\n            }\n\n            new Thread() {\n                public void run() {\n                    try {\n                        PythonExecutionResult result = pythonRuntimeService.exec(new HashSet<>(Collections.singletonList(dependency)), script, EMPTY_CALL_ARGUMENTS);\n                        assertNotNull(result);\n                        assertNotNull(result.getExecutionResult().get(varName));\n                        assertEquals(expectedResult.toString(), result.getExecutionResult().get(varName).toString());\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n            }.start();\n        }\n        latch.await();\n    }", "signature": "void testMultithreadedExecWithDependencies()", "full_signature": "@Test public void testMultithreadedExecWithDependencies()", "class_method_signature": "PythonExecutorTest.testMultithreadedExecWithDependencies()", "testcase": true, "constructor": false, "invocations": ["assumeTrue", "getAbsolutePath", "getFile", "getResource", "getClassLoader", "getClass", "getAbsolutePath", "getFile", "getResource", "getClassLoader", "getClass", "getAbsolutePath", "getFile", "getResource", "getClassLoader", "getClass", "getAbsolutePath", "getFile", "getResource", "getClassLoader", "getClass", "valueOf", "contains", "contains", "append", "append", "start", "exec", "singletonList", "assertNotNull", "assertNotNull", "get", "getExecutionResult", "assertEquals", "toString", "toString", "get", "getExecutionResult", "countDown", "await"]}, "focal_class": {"identifier": "PythonExecutor", "superclass": "", "interfaces": "implements Executor", "fields": [{"original_string": "public static final String THREADED_MODULES_ISSUE = \"No module named\";", "modifier": "public static final", "type": "String", "declarator": "THREADED_MODULES_ISSUE = \"No module named\"", "var_name": "THREADED_MODULES_ISSUE"}, {"original_string": "private static final Logger logger = Logger.getLogger(PythonExecutor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(PythonExecutor.class)", "var_name": "logger"}, {"original_string": "private static final String TRUE = \"true\";", "modifier": "private static final", "type": "String", "declarator": "TRUE = \"true\"", "var_name": "TRUE"}, {"original_string": "private static final String FALSE = \"false\";", "modifier": "private static final", "type": "String", "declarator": "FALSE = \"false\"", "var_name": "FALSE"}, {"original_string": "private static final PythonInterpreter GLOBAL_INTERPRETER = new ThreadSafePythonInterpreter(null);", "modifier": "private static final", "type": "PythonInterpreter", "declarator": "GLOBAL_INTERPRETER = new ThreadSafePythonInterpreter(null)", "var_name": "GLOBAL_INTERPRETER"}, {"original_string": "public static final int RETRIES_NUMBER_ON_THREADED_ISSUE = 3;", "modifier": "public static final", "type": "int", "declarator": "RETRIES_NUMBER_ON_THREADED_ISSUE = 3", "var_name": "RETRIES_NUMBER_ON_THREADED_ISSUE"}, {"original_string": "public static final int MAX_LENGTH = Integer.getInteger(\"input.error.max.length\", 1000);", "modifier": "public static final", "type": "int", "declarator": "MAX_LENGTH = Integer.getInteger(\"input.error.max.length\", 1000)", "var_name": "MAX_LENGTH"}, {"original_string": "private final PythonInterpreter interpreter;", "modifier": "private final", "type": "PythonInterpreter", "declarator": "interpreter", "var_name": "interpreter"}, {"original_string": "private final Lock allocationLock = new ReentrantLock();", "modifier": "private final", "type": "Lock", "declarator": "allocationLock = new ReentrantLock()", "var_name": "allocationLock"}, {"original_string": "private int allocations = 0;", "modifier": "private", "type": "int", "declarator": "allocations = 0", "var_name": "allocations"}, {"original_string": "private boolean markedClosed = false;", "modifier": "private", "type": "boolean", "declarator": "markedClosed = false", "var_name": "markedClosed"}, {"original_string": "private boolean actuallyClosed = false;", "modifier": "private", "type": "boolean", "declarator": "actuallyClosed = false", "var_name": "actuallyClosed"}, {"original_string": "private final Set<String> dependencies;", "modifier": "private final", "type": "Set<String>", "declarator": "dependencies", "var_name": "dependencies"}], "methods": [{"identifier": "PythonExecutor", "parameters": "()", "modifiers": "public", "return": "", "signature": " PythonExecutor()", "full_signature": "public  PythonExecutor()", "class_method_signature": "PythonExecutor.PythonExecutor()", "testcase": false, "constructor": true}, {"identifier": "PythonExecutor", "parameters": "(Set<String> dependencies)", "modifiers": "public", "return": "", "signature": " PythonExecutor(Set<String> dependencies)", "full_signature": "public  PythonExecutor(Set<String> dependencies)", "class_method_signature": "PythonExecutor.PythonExecutor(Set<String> dependencies)", "testcase": false, "constructor": true}, {"identifier": "initInterpreter", "parameters": "(Set<String> dependencies)", "modifiers": "protected", "return": "PythonInterpreter", "signature": "PythonInterpreter initInterpreter(Set<String> dependencies)", "full_signature": "protected PythonInterpreter initInterpreter(Set<String> dependencies)", "class_method_signature": "PythonExecutor.initInterpreter(Set<String> dependencies)", "testcase": false, "constructor": false}, {"identifier": "exec", "parameters": "(String script, Map<String, Serializable> callArguments)", "modifiers": "public", "return": "PythonExecutionResult", "signature": "PythonExecutionResult exec(String script, Map<String, Serializable> callArguments)", "full_signature": "public PythonExecutionResult exec(String script, Map<String, Serializable> callArguments)", "class_method_signature": "PythonExecutor.exec(String script, Map<String, Serializable> callArguments)", "testcase": false, "constructor": false}, {"identifier": "isThreadsRelatedModuleIssue", "parameters": "(Exception e)", "modifiers": "private", "return": "boolean", "signature": "boolean isThreadsRelatedModuleIssue(Exception e)", "full_signature": "private boolean isThreadsRelatedModuleIssue(Exception e)", "class_method_signature": "PythonExecutor.isThreadsRelatedModuleIssue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "exec", "parameters": "(String script)", "modifiers": "private", "return": "PythonExecutionResult", "signature": "PythonExecutionResult exec(String script)", "full_signature": "private PythonExecutionResult exec(String script)", "class_method_signature": "PythonExecutor.exec(String script)", "testcase": false, "constructor": false}, {"identifier": "getPythonLocals", "parameters": "()", "modifiers": "private", "return": "Map<String, Serializable>", "signature": "Map<String, Serializable> getPythonLocals()", "full_signature": "private Map<String, Serializable> getPythonLocals()", "class_method_signature": "PythonExecutor.getPythonLocals()", "testcase": false, "constructor": false}, {"identifier": "eval", "parameters": "(String prepareEnvironmentScript, String expr, Map<String, Serializable> context)", "modifiers": "public", "return": "PythonEvaluationResult", "signature": "PythonEvaluationResult eval(String prepareEnvironmentScript, String expr, Map<String, Serializable> context)", "full_signature": "public PythonEvaluationResult eval(String prepareEnvironmentScript, String expr, Map<String, Serializable> context)", "class_method_signature": "PythonExecutor.eval(String prepareEnvironmentScript, String expr, Map<String, Serializable> context)", "testcase": false, "constructor": false}, {"identifier": "getTruncatedExpression", "parameters": "(String expr)", "modifiers": "private", "return": "String", "signature": "String getTruncatedExpression(String expr)", "full_signature": "private String getTruncatedExpression(String expr)", "class_method_signature": "PythonExecutor.getTruncatedExpression(String expr)", "testcase": false, "constructor": false}, {"identifier": "handleExceptionSpecialCases", "parameters": "(String message)", "modifiers": "private", "return": "String", "signature": "String handleExceptionSpecialCases(String message)", "full_signature": "private String handleExceptionSpecialCases(String message)", "class_method_signature": "PythonExecutor.handleExceptionSpecialCases(String message)", "testcase": false, "constructor": false}, {"identifier": "checkValidInterpreter", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkValidInterpreter()", "full_signature": "private void checkValidInterpreter()", "class_method_signature": "PythonExecutor.checkValidInterpreter()", "testcase": false, "constructor": false}, {"identifier": "eval", "parameters": "(String prepareEnvironmentScript, String script)", "modifiers": "protected", "return": "Serializable", "signature": "Serializable eval(String prepareEnvironmentScript, String script)", "full_signature": "protected Serializable eval(String prepareEnvironmentScript, String script)", "class_method_signature": "PythonExecutor.eval(String prepareEnvironmentScript, String script)", "testcase": false, "constructor": false}, {"identifier": "allocate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void allocate()", "full_signature": "@Override public void allocate()", "class_method_signature": "PythonExecutor.allocate()", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void release()", "full_signature": "@Override public void release()", "class_method_signature": "PythonExecutor.release()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "PythonExecutor.close()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "public boolean isClosed()", "class_method_signature": "PythonExecutor.isClosed()", "testcase": false, "constructor": false}, {"identifier": "initInterpreter", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initInterpreter()", "full_signature": "private void initInterpreter()", "class_method_signature": "PythonExecutor.initInterpreter()", "testcase": false, "constructor": false}, {"identifier": "prepareInterpreterContext", "parameters": "(Map<String, Serializable> context)", "modifiers": "private", "return": "void", "signature": "void prepareInterpreterContext(Map<String, Serializable> context)", "full_signature": "private void prepareInterpreterContext(Map<String, Serializable> context)", "class_method_signature": "PythonExecutor.prepareInterpreterContext(Map<String, Serializable> context)", "testcase": false, "constructor": false}, {"identifier": "resolveJythonObjectToJavaExec", "parameters": "(PyObject value, String key)", "modifiers": "private", "return": "Serializable", "signature": "Serializable resolveJythonObjectToJavaExec(PyObject value, String key)", "full_signature": "private Serializable resolveJythonObjectToJavaExec(PyObject value, String key)", "class_method_signature": "PythonExecutor.resolveJythonObjectToJavaExec(PyObject value, String key)", "testcase": false, "constructor": false}, {"identifier": "resolveJythonObjectToJavaEval", "parameters": "(PyObject value, String expression)", "modifiers": "private", "return": "Serializable", "signature": "Serializable resolveJythonObjectToJavaEval(PyObject value, String expression)", "full_signature": "private Serializable resolveJythonObjectToJavaEval(PyObject value, String expression)", "class_method_signature": "PythonExecutor.resolveJythonObjectToJavaEval(PyObject value, String expression)", "testcase": false, "constructor": false}, {"identifier": "resolveJythonObjectToJava", "parameters": "(PyObject value, String errorMessage)", "modifiers": "private", "return": "Serializable", "signature": "Serializable resolveJythonObjectToJava(PyObject value, String errorMessage)", "full_signature": "private Serializable resolveJythonObjectToJava(PyObject value, String errorMessage)", "class_method_signature": "PythonExecutor.resolveJythonObjectToJava(PyObject value, String errorMessage)", "testcase": false, "constructor": false}, {"identifier": "keyIsExcluded", "parameters": "(String key, PyObject value)", "modifiers": "private", "return": "boolean", "signature": "boolean keyIsExcluded(String key, PyObject value)", "full_signature": "private boolean keyIsExcluded(String key, PyObject value)", "class_method_signature": "PythonExecutor.keyIsExcluded(String key, PyObject value)", "testcase": false, "constructor": false}], "file": "runtime-management/runtime-management-impl/src/main/java/io/cloudslang/runtime/impl/python/PythonExecutor.java"}, "focal_method": {"identifier": "exec", "parameters": "(String script, Map<String, Serializable> callArguments)", "modifiers": "public", "return": "PythonExecutionResult", "body": "public PythonExecutionResult exec(String script, Map<String, Serializable> callArguments) {\n        checkValidInterpreter();\n        initInterpreter();\n        prepareInterpreterContext(callArguments);\n\n        Exception originException = null;\n        for(int i = 0; i < RETRIES_NUMBER_ON_THREADED_ISSUE; i++) {\n            try {\n                return exec(script);\n            } catch (Exception e) {\n                if(!isThreadsRelatedModuleIssue(e)) {\n                    throw new RuntimeException(\"Error executing python script: \" + e, e);\n                }\n                if(originException == null) {\n                    originException = e;\n                }\n            }\n        }\n        throw new RuntimeException(\"Error executing python script: \" + originException, originException);\n    }", "signature": "PythonExecutionResult exec(String script, Map<String, Serializable> callArguments)", "full_signature": "public PythonExecutionResult exec(String script, Map<String, Serializable> callArguments)", "class_method_signature": "PythonExecutor.exec(String script, Map<String, Serializable> callArguments)", "testcase": false, "constructor": false, "invocations": ["checkValidInterpreter", "initInterpreter", "prepareInterpreterContext", "exec", "isThreadsRelatedModuleIssue"]}, "repository": {"repo_id": 28394156, "url": "https://github.com/CloudSlang/score", "stars": 76, "created": "12/23/2014 11:19:26 AM +00:00", "updates": "2020-01-27T14:36:32+00:00", "fork": "False", "license": "licensed"}}