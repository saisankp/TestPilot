{"test_class": {"identifier": "NIOServerCnxnFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private InetSocketAddress listenAddress;", "modifier": "private", "type": "InetSocketAddress", "declarator": "listenAddress", "var_name": "listenAddress"}, {"original_string": "private NIOServerCnxnFactory factory;", "modifier": "private", "type": "NIOServerCnxnFactory", "declarator": "factory", "var_name": "factory"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java"}, "test_case": {"identifier": "testShutdownWithoutStart_SocketReleased", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShutdownWithoutStart_SocketReleased() throws IOException {\n        factory.shutdown();\n        factory = null;\n\n        ServerSocket ss = new ServerSocket(listenAddress.getPort());\n        ss.close();\n    }", "signature": "void testShutdownWithoutStart_SocketReleased()", "full_signature": "@Test public void testShutdownWithoutStart_SocketReleased()", "class_method_signature": "NIOServerCnxnFactoryTest.testShutdownWithoutStart_SocketReleased()", "testcase": true, "constructor": false, "invocations": ["shutdown", "getPort", "close"]}, "focal_class": {"identifier": "NIOServerCnxnFactory", "superclass": "extends ServerCnxnFactory", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(NIOServerCnxnFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(NIOServerCnxnFactory.class)", "var_name": "LOG"}, {"original_string": "public static final String ZOOKEEPER_NIO_SESSIONLESS_CNXN_TIMEOUT =\n        \"zookeeper.nio.sessionlessCnxnTimeout\";", "modifier": "public static final", "type": "String", "declarator": "ZOOKEEPER_NIO_SESSIONLESS_CNXN_TIMEOUT =\n        \"zookeeper.nio.sessionlessCnxnTimeout\"", "var_name": "ZOOKEEPER_NIO_SESSIONLESS_CNXN_TIMEOUT"}, {"original_string": "public static final String ZOOKEEPER_NIO_NUM_SELECTOR_THREADS =\n        \"zookeeper.nio.numSelectorThreads\";", "modifier": "public static final", "type": "String", "declarator": "ZOOKEEPER_NIO_NUM_SELECTOR_THREADS =\n        \"zookeeper.nio.numSelectorThreads\"", "var_name": "ZOOKEEPER_NIO_NUM_SELECTOR_THREADS"}, {"original_string": "public static final String ZOOKEEPER_NIO_NUM_WORKER_THREADS =\n        \"zookeeper.nio.numWorkerThreads\";", "modifier": "public static final", "type": "String", "declarator": "ZOOKEEPER_NIO_NUM_WORKER_THREADS =\n        \"zookeeper.nio.numWorkerThreads\"", "var_name": "ZOOKEEPER_NIO_NUM_WORKER_THREADS"}, {"original_string": "public static final String ZOOKEEPER_NIO_DIRECT_BUFFER_BYTES =\n        \"zookeeper.nio.directBufferBytes\";", "modifier": "public static final", "type": "String", "declarator": "ZOOKEEPER_NIO_DIRECT_BUFFER_BYTES =\n        \"zookeeper.nio.directBufferBytes\"", "var_name": "ZOOKEEPER_NIO_DIRECT_BUFFER_BYTES"}, {"original_string": "public static final String ZOOKEEPER_NIO_SHUTDOWN_TIMEOUT =\n        \"zookeeper.nio.shutdownTimeout\";", "modifier": "public static final", "type": "String", "declarator": "ZOOKEEPER_NIO_SHUTDOWN_TIMEOUT =\n        \"zookeeper.nio.shutdownTimeout\"", "var_name": "ZOOKEEPER_NIO_SHUTDOWN_TIMEOUT"}, {"original_string": "ServerSocketChannel ss;", "modifier": "", "type": "ServerSocketChannel", "declarator": "ss", "var_name": "ss"}, {"original_string": "private static final ThreadLocal<ByteBuffer> directBuffer =\n        new ThreadLocal<ByteBuffer>() {\n            @Override protected ByteBuffer initialValue() {\n                return ByteBuffer.allocateDirect(directBufferBytes);\n            }\n        };", "modifier": "private static final", "type": "ThreadLocal<ByteBuffer>", "declarator": "directBuffer =\n        new ThreadLocal<ByteBuffer>() {\n            @Override protected ByteBuffer initialValue() {\n                return ByteBuffer.allocateDirect(directBufferBytes);\n            }\n        }", "var_name": "directBuffer"}, {"original_string": "private final ConcurrentHashMap<Long, NIOServerCnxn> sessionMap =\n        new ConcurrentHashMap<Long, NIOServerCnxn>();", "modifier": "private final", "type": "ConcurrentHashMap<Long, NIOServerCnxn>", "declarator": "sessionMap =\n        new ConcurrentHashMap<Long, NIOServerCnxn>()", "var_name": "sessionMap"}, {"original_string": "private final ConcurrentHashMap<InetAddress, Set<NIOServerCnxn>> ipMap =\n        new ConcurrentHashMap<InetAddress, Set<NIOServerCnxn>>( );", "modifier": "private final", "type": "ConcurrentHashMap<InetAddress, Set<NIOServerCnxn>>", "declarator": "ipMap =\n        new ConcurrentHashMap<InetAddress, Set<NIOServerCnxn>>( )", "var_name": "ipMap"}, {"original_string": "protected int maxClientCnxns = 60;", "modifier": "protected", "type": "int", "declarator": "maxClientCnxns = 60", "var_name": "maxClientCnxns"}, {"original_string": "int sessionlessCnxnTimeout;", "modifier": "", "type": "int", "declarator": "sessionlessCnxnTimeout", "var_name": "sessionlessCnxnTimeout"}, {"original_string": "private ExpiryQueue<NIOServerCnxn> cnxnExpiryQueue;", "modifier": "private", "type": "ExpiryQueue<NIOServerCnxn>", "declarator": "cnxnExpiryQueue", "var_name": "cnxnExpiryQueue"}, {"original_string": "protected WorkerService workerPool;", "modifier": "protected", "type": "WorkerService", "declarator": "workerPool", "var_name": "workerPool"}, {"original_string": "private static int directBufferBytes;", "modifier": "private static", "type": "int", "declarator": "directBufferBytes", "var_name": "directBufferBytes"}, {"original_string": "private int numSelectorThreads;", "modifier": "private", "type": "int", "declarator": "numSelectorThreads", "var_name": "numSelectorThreads"}, {"original_string": "private int numWorkerThreads;", "modifier": "private", "type": "int", "declarator": "numWorkerThreads", "var_name": "numWorkerThreads"}, {"original_string": "private long workerShutdownTimeoutMS;", "modifier": "private", "type": "long", "declarator": "workerShutdownTimeoutMS", "var_name": "workerShutdownTimeoutMS"}, {"original_string": "private volatile boolean stopped = true;", "modifier": "private volatile", "type": "boolean", "declarator": "stopped = true", "var_name": "stopped"}, {"original_string": "private ConnectionExpirerThread expirerThread;", "modifier": "private", "type": "ConnectionExpirerThread", "declarator": "expirerThread", "var_name": "expirerThread"}, {"original_string": "private AcceptThread acceptThread;", "modifier": "private", "type": "AcceptThread", "declarator": "acceptThread", "var_name": "acceptThread"}, {"original_string": "private final Set<SelectorThread> selectorThreads =\n        new HashSet<SelectorThread>();", "modifier": "private final", "type": "Set<SelectorThread>", "declarator": "selectorThreads =\n        new HashSet<SelectorThread>()", "var_name": "selectorThreads"}], "methods": [{"identifier": "getDirectBuffer", "parameters": "()", "modifiers": "public static", "return": "ByteBuffer", "signature": "ByteBuffer getDirectBuffer()", "full_signature": "public static ByteBuffer getDirectBuffer()", "class_method_signature": "NIOServerCnxnFactory.getDirectBuffer()", "testcase": false, "constructor": false}, {"identifier": "NIOServerCnxnFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " NIOServerCnxnFactory()", "full_signature": "public  NIOServerCnxnFactory()", "class_method_signature": "NIOServerCnxnFactory.NIOServerCnxnFactory()", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(InetSocketAddress addr, int maxcc, boolean secure)", "modifiers": "@Override public", "return": "void", "signature": "void configure(InetSocketAddress addr, int maxcc, boolean secure)", "full_signature": "@Override public void configure(InetSocketAddress addr, int maxcc, boolean secure)", "class_method_signature": "NIOServerCnxnFactory.configure(InetSocketAddress addr, int maxcc, boolean secure)", "testcase": false, "constructor": false}, {"identifier": "tryClose", "parameters": "(ServerSocketChannel s)", "modifiers": "private", "return": "void", "signature": "void tryClose(ServerSocketChannel s)", "full_signature": "private void tryClose(ServerSocketChannel s)", "class_method_signature": "NIOServerCnxnFactory.tryClose(ServerSocketChannel s)", "testcase": false, "constructor": false}, {"identifier": "reconfigure", "parameters": "(InetSocketAddress addr)", "modifiers": "@Override public", "return": "void", "signature": "void reconfigure(InetSocketAddress addr)", "full_signature": "@Override public void reconfigure(InetSocketAddress addr)", "class_method_signature": "NIOServerCnxnFactory.reconfigure(InetSocketAddress addr)", "testcase": false, "constructor": false}, {"identifier": "getMaxClientCnxnsPerHost", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxClientCnxnsPerHost()", "full_signature": "public int getMaxClientCnxnsPerHost()", "class_method_signature": "NIOServerCnxnFactory.getMaxClientCnxnsPerHost()", "testcase": false, "constructor": false}, {"identifier": "setMaxClientCnxnsPerHost", "parameters": "(int max)", "modifiers": "public", "return": "void", "signature": "void setMaxClientCnxnsPerHost(int max)", "full_signature": "public void setMaxClientCnxnsPerHost(int max)", "class_method_signature": "NIOServerCnxnFactory.setMaxClientCnxnsPerHost(int max)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "NIOServerCnxnFactory.start()", "testcase": false, "constructor": false}, {"identifier": "startup", "parameters": "(ZooKeeperServer zks, boolean startServer)", "modifiers": "@Override public", "return": "void", "signature": "void startup(ZooKeeperServer zks, boolean startServer)", "full_signature": "@Override public void startup(ZooKeeperServer zks, boolean startServer)", "class_method_signature": "NIOServerCnxnFactory.startup(ZooKeeperServer zks, boolean startServer)", "testcase": false, "constructor": false}, {"identifier": "getLocalAddress", "parameters": "()", "modifiers": "@Override public", "return": "InetSocketAddress", "signature": "InetSocketAddress getLocalAddress()", "full_signature": "@Override public InetSocketAddress getLocalAddress()", "class_method_signature": "NIOServerCnxnFactory.getLocalAddress()", "testcase": false, "constructor": false}, {"identifier": "getLocalPort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getLocalPort()", "full_signature": "@Override public int getLocalPort()", "class_method_signature": "NIOServerCnxnFactory.getLocalPort()", "testcase": false, "constructor": false}, {"identifier": "removeCnxn", "parameters": "(NIOServerCnxn cnxn)", "modifiers": "public", "return": "boolean", "signature": "boolean removeCnxn(NIOServerCnxn cnxn)", "full_signature": "public boolean removeCnxn(NIOServerCnxn cnxn)", "class_method_signature": "NIOServerCnxnFactory.removeCnxn(NIOServerCnxn cnxn)", "testcase": false, "constructor": false}, {"identifier": "touchCnxn", "parameters": "(NIOServerCnxn cnxn)", "modifiers": "public", "return": "void", "signature": "void touchCnxn(NIOServerCnxn cnxn)", "full_signature": "public void touchCnxn(NIOServerCnxn cnxn)", "class_method_signature": "NIOServerCnxnFactory.touchCnxn(NIOServerCnxn cnxn)", "testcase": false, "constructor": false}, {"identifier": "addCnxn", "parameters": "(NIOServerCnxn cnxn)", "modifiers": "private", "return": "void", "signature": "void addCnxn(NIOServerCnxn cnxn)", "full_signature": "private void addCnxn(NIOServerCnxn cnxn)", "class_method_signature": "NIOServerCnxnFactory.addCnxn(NIOServerCnxn cnxn)", "testcase": false, "constructor": false}, {"identifier": "createConnection", "parameters": "(SocketChannel sock,\n            SelectionKey sk, SelectorThread selectorThread)", "modifiers": "protected", "return": "NIOServerCnxn", "signature": "NIOServerCnxn createConnection(SocketChannel sock,\n            SelectionKey sk, SelectorThread selectorThread)", "full_signature": "protected NIOServerCnxn createConnection(SocketChannel sock,\n            SelectionKey sk, SelectorThread selectorThread)", "class_method_signature": "NIOServerCnxnFactory.createConnection(SocketChannel sock,\n            SelectionKey sk, SelectorThread selectorThread)", "testcase": false, "constructor": false}, {"identifier": "getClientCnxnCount", "parameters": "(InetAddress cl)", "modifiers": "private", "return": "int", "signature": "int getClientCnxnCount(InetAddress cl)", "full_signature": "private int getClientCnxnCount(InetAddress cl)", "class_method_signature": "NIOServerCnxnFactory.getClientCnxnCount(InetAddress cl)", "testcase": false, "constructor": false}, {"identifier": "closeAll", "parameters": "()", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void closeAll()", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public void closeAll()", "class_method_signature": "NIOServerCnxnFactory.closeAll()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "NIOServerCnxnFactory.stop()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "NIOServerCnxnFactory.shutdown()", "testcase": false, "constructor": false}, {"identifier": "addSession", "parameters": "(long sessionId, NIOServerCnxn cnxn)", "modifiers": "public", "return": "void", "signature": "void addSession(long sessionId, NIOServerCnxn cnxn)", "full_signature": "public void addSession(long sessionId, NIOServerCnxn cnxn)", "class_method_signature": "NIOServerCnxnFactory.addSession(long sessionId, NIOServerCnxn cnxn)", "testcase": false, "constructor": false}, {"identifier": "closeSession", "parameters": "(long sessionId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean closeSession(long sessionId)", "full_signature": "@Override public boolean closeSession(long sessionId)", "class_method_signature": "NIOServerCnxnFactory.closeSession(long sessionId)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void join()", "full_signature": "@Override public void join()", "class_method_signature": "NIOServerCnxnFactory.join()", "testcase": false, "constructor": false}, {"identifier": "getConnections", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<ServerCnxn>", "signature": "Iterable<ServerCnxn> getConnections()", "full_signature": "@Override public Iterable<ServerCnxn> getConnections()", "class_method_signature": "NIOServerCnxnFactory.getConnections()", "testcase": false, "constructor": false}, {"identifier": "dumpConnections", "parameters": "(PrintWriter pwriter)", "modifiers": "public", "return": "void", "signature": "void dumpConnections(PrintWriter pwriter)", "full_signature": "public void dumpConnections(PrintWriter pwriter)", "class_method_signature": "NIOServerCnxnFactory.dumpConnections(PrintWriter pwriter)", "testcase": false, "constructor": false}, {"identifier": "resetAllConnectionStats", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void resetAllConnectionStats()", "full_signature": "@Override public void resetAllConnectionStats()", "class_method_signature": "NIOServerCnxnFactory.resetAllConnectionStats()", "testcase": false, "constructor": false}, {"identifier": "getAllConnectionInfo", "parameters": "(boolean brief)", "modifiers": "@Override public", "return": "Iterable<Map<String, Object>>", "signature": "Iterable<Map<String, Object>> getAllConnectionInfo(boolean brief)", "full_signature": "@Override public Iterable<Map<String, Object>> getAllConnectionInfo(boolean brief)", "class_method_signature": "NIOServerCnxnFactory.getAllConnectionInfo(boolean brief)", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java"}, "focal_method": {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void shutdown() {\n        try {\n            // close listen socket and signal selector threads to stop\n            stop();\n\n            // wait for selector and worker threads to shutdown\n            join();\n\n            // close all open connections\n            closeAll();\n\n            if (login != null) {\n                login.shutdown();\n            }\n        } catch (InterruptedException e) {\n            LOG.warn(\"Ignoring interrupted exception during shutdown\", e);\n        } catch (Exception e) {\n            LOG.warn(\"Ignoring unexpected exception during shutdown\", e);\n        }\n\n        if (zkServer != null) {\n            zkServer.shutdown();\n        }\n    }", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "NIOServerCnxnFactory.shutdown()", "testcase": false, "constructor": false, "invocations": ["stop", "join", "closeAll", "shutdown", "warn", "warn", "shutdown"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}