{"test_class": {"identifier": "GridLogCommandHandlerTest", "superclass": "extends GridCommonAbstractTest", "interfaces": "", "fields": [{"original_string": "private String igniteHome = System.getProperty(\"user.dir\");", "modifier": "private", "type": "String", "declarator": "igniteHome = System.getProperty(\"user.dir\")", "var_name": "igniteHome"}], "file": "modules/core/src/test/java/org/apache/ignite/internal/processors/rest/handlers/log/GridLogCommandHandlerTest.java"}, "test_case": {"identifier": "testHandleAsyncFromAndToNotSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHandleAsyncFromAndToNotSet() throws Exception {\n        IgniteConfiguration cfg = new IgniteConfiguration();\n        cfg.setIgniteHome(igniteHome);\n        GridTestKernalContext ctx = newContext(cfg);\n        GridLogCommandHandler cmdHandler = new GridLogCommandHandler(ctx);\n        GridRestLogRequest req = new GridRestLogRequest();\n\n        req.path(igniteHome + \"/work/log/\" + \"test.log\");\n        IgniteInternalFuture<GridRestResponse> resp = cmdHandler.handleAsync(req);\n\n        assertNull(resp.result().getError());\n        assertEquals(GridRestResponse.STATUS_SUCCESS, resp.result().getSuccessStatus());\n        assertNotNull(resp.result().getResponse());\n    }", "signature": "void testHandleAsyncFromAndToNotSet()", "full_signature": "@Test public void testHandleAsyncFromAndToNotSet()", "class_method_signature": "GridLogCommandHandlerTest.testHandleAsyncFromAndToNotSet()", "testcase": true, "constructor": false, "invocations": ["setIgniteHome", "newContext", "path", "handleAsync", "assertNull", "getError", "result", "assertEquals", "getSuccessStatus", "result", "assertNotNull", "getResponse", "result"]}, "focal_class": {"identifier": "GridLogCommandHandler", "superclass": "extends GridRestCommandHandlerAdapter", "interfaces": "", "fields": [{"original_string": "private static final Collection<GridRestCommand> SUPPORTED_COMMANDS = U.sealList(LOG);", "modifier": "private static final", "type": "Collection<GridRestCommand>", "declarator": "SUPPORTED_COMMANDS = U.sealList(LOG)", "var_name": "SUPPORTED_COMMANDS"}, {"original_string": "private static final int DEFAULT_FROM = 0;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_FROM = 0", "var_name": "DEFAULT_FROM"}, {"original_string": "private static final int DEFAULT_TO = 1;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_TO = 1", "var_name": "DEFAULT_TO"}], "methods": [{"identifier": "GridLogCommandHandler", "parameters": "(GridKernalContext ctx)", "modifiers": "public", "return": "", "signature": " GridLogCommandHandler(GridKernalContext ctx)", "full_signature": "public  GridLogCommandHandler(GridKernalContext ctx)", "class_method_signature": "GridLogCommandHandler.GridLogCommandHandler(GridKernalContext ctx)", "testcase": false, "constructor": true}, {"identifier": "supportedCommands", "parameters": "()", "modifiers": "@Override public", "return": "Collection<GridRestCommand>", "signature": "Collection<GridRestCommand> supportedCommands()", "full_signature": "@Override public Collection<GridRestCommand> supportedCommands()", "class_method_signature": "GridLogCommandHandler.supportedCommands()", "testcase": false, "constructor": false}, {"identifier": "handleAsync", "parameters": "(GridRestRequest req)", "modifiers": "@Override public", "return": "IgniteInternalFuture<GridRestResponse>", "signature": "IgniteInternalFuture<GridRestResponse> handleAsync(GridRestRequest req)", "full_signature": "@Override public IgniteInternalFuture<GridRestResponse> handleAsync(GridRestRequest req)", "class_method_signature": "GridLogCommandHandler.handleAsync(GridRestRequest req)", "testcase": false, "constructor": false}, {"identifier": "readLog", "parameters": "(int from, int to, File logFile)", "modifiers": "private", "return": "String", "signature": "String readLog(int from, int to, File logFile)", "full_signature": "private String readLog(int from, int to, File logFile)", "class_method_signature": "GridLogCommandHandler.readLog(int from, int to, File logFile)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/log/GridLogCommandHandler.java"}, "focal_method": {"identifier": "handleAsync", "parameters": "(GridRestRequest req)", "modifiers": "@Override public", "return": "IgniteInternalFuture<GridRestResponse>", "body": "@Override public IgniteInternalFuture<GridRestResponse> handleAsync(GridRestRequest req) {\n        assert req != null;\n\n        if (req.command() == LOG) {\n            if (log.isDebugEnabled())\n                log.debug(\"Handling log REST request: \" + req);\n\n            GridRestLogRequest req0 = (GridRestLogRequest)req;\n\n            if (req0.from() < -1 || req0.to() < -1)\n                return new GridFinishedFuture<>(new GridRestResponse(GridRestResponse.STATUS_FAILED,\n                    \"One of the request parameters is invalid [from=\" + req0.from() + \", to=\" + req0.to() + ']'));\n\n            int from;\n\n            if (req0.from() != -1) {\n                if (req0.to() == -1)\n                    return new GridFinishedFuture<>(new GridRestResponse(GridRestResponse.STATUS_FAILED,\n                        \"Request parameter 'to' is not set.\"));\n\n                from = req0.from();\n            }\n            else\n                from = DEFAULT_FROM;\n\n            int to;\n\n            if (req0.to() != -1) {\n                if (req0.from() == -1)\n                    return new GridFinishedFuture<>(new GridRestResponse(GridRestResponse.STATUS_FAILED,\n                        \"Request parameter 'from' is not set.\"));\n\n                to = req0.to();\n            }\n            else\n                to = DEFAULT_TO;\n\n            if (from >= to)\n                return new GridFinishedFuture<>(new GridRestResponse(GridRestResponse.STATUS_FAILED,\n                    \"Request parameter 'from' must be less than 'to'.\"));\n\n            File logFile;\n\n            try {\n                if (req0.path() != null) {\n                    if (log.fileName() != null) {\n                        if (!req0.path().equals(log.fileName())) {\n                            return new GridFinishedFuture<>(new GridRestResponse(GridRestResponse.STATUS_FAILED,\n                                \"Request parameter 'path' must contain a path to valid log file.\"));\n                        }\n                        else\n                            logFile = new File(req0.path());\n                    }\n                    else if (req0.path().startsWith(ctx.config().getIgniteHome()))\n                        logFile = new File(req0.path());\n                    else {\n                        return new GridFinishedFuture<>(new GridRestResponse(GridRestResponse.STATUS_FAILED,\n                            \"Request parameter 'path' must contain a path to valid log file.\"));\n                    }\n                }\n                else if (log.fileName() == null)\n                    logFile = new File(ctx.config().getIgniteHome() + \"/work/log/ignite.log\");\n                else\n                    logFile = new File(log.fileName());\n            }\n            catch (InvalidPathException e) {\n                return new GridFinishedFuture<>(new GridRestResponse(GridRestResponse.STATUS_FAILED,\n                    \"Incorrect path to a log file [msg=\" + e.getMessage() + ']'));\n            }\n\n            try {\n                String content = readLog(from, to, logFile);\n\n                return new GridFinishedFuture<>(new GridRestResponse(content));\n            }\n            catch (IgniteCheckedException e) {\n                return new GridFinishedFuture<>(new GridRestResponse(GridRestResponse.STATUS_FAILED, e.getMessage()));\n            }\n        }\n\n        return new GridFinishedFuture<>();\n    }", "signature": "IgniteInternalFuture<GridRestResponse> handleAsync(GridRestRequest req)", "full_signature": "@Override public IgniteInternalFuture<GridRestResponse> handleAsync(GridRestRequest req)", "class_method_signature": "GridLogCommandHandler.handleAsync(GridRestRequest req)", "testcase": false, "constructor": false, "invocations": ["command", "isDebugEnabled", "debug", "from", "to", "from", "to", "from", "to", "from", "to", "from", "to", "path", "fileName", "equals", "path", "fileName", "path", "startsWith", "path", "getIgniteHome", "config", "path", "fileName", "getIgniteHome", "config", "fileName", "getMessage", "readLog", "getMessage"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}