{"test_class": {"identifier": "ValueGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-common/src/test/java/com/netflix/titus/common/util/rx/ValueGeneratorTest.java"}, "test_case": {"identifier": "testSimpleValueGeneration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSimpleValueGeneration() throws Exception {\n        final int limit = 100;\n        AtomicInteger valueSource = new AtomicInteger();\n        AtomicInteger emitCounter = new AtomicInteger();\n        CountDownLatch latch = new CountDownLatch(1);\n        Subscription subscription = ObservableExt.generatorFrom(valueSource::getAndIncrement).subscribe(new Subscriber<Integer>() {\n            private Producer producer;\n\n            @Override\n            public void setProducer(Producer p) {\n                this.producer = p;\n                p.request(1);\n            }\n\n            @Override\n            public void onCompleted() {\n                latch.countDown();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                latch.countDown();\n                e.printStackTrace();\n            }\n\n            @Override\n            public void onNext(Integer integer) {\n                if (emitCounter.incrementAndGet() < limit) {\n                    producer.request(1);\n                } else {\n                    unsubscribe();\n                    latch.countDown();\n                }\n            }\n        });\n        latch.await();\n        assertThat(emitCounter.get()).isEqualTo(limit);\n        Awaitility.await().timeout(5, TimeUnit.SECONDS).until(subscription::isUnsubscribed);\n    }", "signature": "void testSimpleValueGeneration()", "full_signature": "@Test public void testSimpleValueGeneration()", "class_method_signature": "ValueGeneratorTest.testSimpleValueGeneration()", "testcase": true, "constructor": false, "invocations": ["subscribe", "generatorFrom", "request", "countDown", "countDown", "printStackTrace", "incrementAndGet", "request", "unsubscribe", "countDown", "await", "isEqualTo", "assertThat", "get", "until", "timeout", "await"]}, "focal_class": {"identifier": "ValueGenerator", "superclass": "", "interfaces": "implements Producer", "fields": [{"original_string": "private final Function<Long, T> source;", "modifier": "private final", "type": "Function<Long, T>", "declarator": "source", "var_name": "source"}, {"original_string": "private final Subscriber<? super T> subscriber;", "modifier": "private final", "type": "Subscriber<? super T>", "declarator": "subscriber", "var_name": "subscriber"}, {"original_string": "private final Scheduler.Worker worker;", "modifier": "private final", "type": "Scheduler.Worker", "declarator": "worker", "var_name": "worker"}, {"original_string": "private final AtomicLong nextIndex = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "nextIndex = new AtomicLong()", "var_name": "nextIndex"}, {"original_string": "private final AtomicLong requested = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "requested = new AtomicLong()", "var_name": "requested"}], "methods": [{"identifier": "ValueGenerator", "parameters": "(Function<Long, T> source, Subscriber<? super T> subscriber, Scheduler scheduler)", "modifiers": "", "return": "", "signature": " ValueGenerator(Function<Long, T> source, Subscriber<? super T> subscriber, Scheduler scheduler)", "full_signature": "  ValueGenerator(Function<Long, T> source, Subscriber<? super T> subscriber, Scheduler scheduler)", "class_method_signature": "ValueGenerator.ValueGenerator(Function<Long, T> source, Subscriber<? super T> subscriber, Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "request", "parameters": "(long n)", "modifiers": "@Override public", "return": "void", "signature": "void request(long n)", "full_signature": "@Override public void request(long n)", "class_method_signature": "ValueGenerator.request(long n)", "testcase": false, "constructor": false}, {"identifier": "drain", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void drain()", "full_signature": "private void drain()", "class_method_signature": "ValueGenerator.drain()", "testcase": false, "constructor": false}, {"identifier": "doOne", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean doOne()", "full_signature": "private boolean doOne()", "class_method_signature": "ValueGenerator.doOne()", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(Supplier<T> source, Scheduler scheduler)", "modifiers": "static", "return": "Observable<T>", "signature": "Observable<T> from(Supplier<T> source, Scheduler scheduler)", "full_signature": "static Observable<T> from(Supplier<T> source, Scheduler scheduler)", "class_method_signature": "ValueGenerator.from(Supplier<T> source, Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(Function<Long, T> source, Scheduler scheduler)", "modifiers": "static", "return": "Observable<T>", "signature": "Observable<T> from(Function<Long, T> source, Scheduler scheduler)", "full_signature": "static Observable<T> from(Function<Long, T> source, Scheduler scheduler)", "class_method_signature": "ValueGenerator.from(Function<Long, T> source, Scheduler scheduler)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/rx/ValueGenerator.java"}, "focal_method": {"identifier": "request", "parameters": "(long n)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void request(long n) {\n        if (n > 0) {\n            BackpressureUtils.getAndAddRequest(requested, n);\n            worker.schedule(this::drain);\n        }\n    }", "signature": "void request(long n)", "full_signature": "@Override public void request(long n)", "class_method_signature": "ValueGenerator.request(long n)", "testcase": false, "constructor": false, "invocations": ["getAndAddRequest", "schedule"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}