{"test_class": {"identifier": "ClasspathCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ClasspathCache classpathCache;", "modifier": "private static", "type": "ClasspathCache", "declarator": "classpathCache", "var_name": "classpathCache"}], "file": "agent/core/src/test/java/org/glowroot/agent/live/ClasspathCacheTest.java"}, "test_case": {"identifier": "shouldAnalyzedMethodsB", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAnalyzedMethodsB() {\n        List<UiAnalyzedMethod> methods = classpathCache.getAnalyzedMethods(B.class.getName());\n        assertThat(methods).hasSize(1);\n    }", "signature": "void shouldAnalyzedMethodsB()", "full_signature": "@Test public void shouldAnalyzedMethodsB()", "class_method_signature": "ClasspathCacheTest.shouldAnalyzedMethodsB()", "testcase": true, "constructor": false, "invocations": ["getAnalyzedMethods", "getName", "hasSize", "assertThat"]}, "focal_class": {"identifier": "ClasspathCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ClasspathCache.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ClasspathCache.class)", "var_name": "logger"}, {"original_string": "private final AnalyzedWorld analyzedWorld;", "modifier": "private final", "type": "AnalyzedWorld", "declarator": "analyzedWorld", "var_name": "analyzedWorld"}, {"original_string": "private final @Nullable Instrumentation instrumentation;", "modifier": "private final @Nullable", "type": "Instrumentation", "declarator": "instrumentation", "var_name": "instrumentation"}, {"original_string": "@GuardedBy(\"this\")\n    private final Set<Location> classpathLocations = Sets.newHashSet();", "modifier": "@GuardedBy(\"this\")\n    private final", "type": "Set<Location>", "declarator": "classpathLocations = Sets.newHashSet()", "var_name": "classpathLocations"}, {"original_string": "@GuardedBy(\"this\")\n    private ImmutableMultimap<String, Location> classNameLocations = ImmutableMultimap.of();", "modifier": "@GuardedBy(\"this\")\n    private", "type": "ImmutableMultimap<String, Location>", "declarator": "classNameLocations = ImmutableMultimap.of()", "var_name": "classNameLocations"}], "methods": [{"identifier": "ClasspathCache", "parameters": "(AnalyzedWorld analyzedWorld, @Nullable Instrumentation instrumentation)", "modifiers": "", "return": "", "signature": " ClasspathCache(AnalyzedWorld analyzedWorld, @Nullable Instrumentation instrumentation)", "full_signature": "  ClasspathCache(AnalyzedWorld analyzedWorld, @Nullable Instrumentation instrumentation)", "class_method_signature": "ClasspathCache.ClasspathCache(AnalyzedWorld analyzedWorld, @Nullable Instrumentation instrumentation)", "testcase": false, "constructor": true}, {"identifier": "getMatchingClassNames", "parameters": "(String partialClassName, int limit)", "modifiers": "synchronized", "return": "ImmutableList<String>", "signature": "ImmutableList<String> getMatchingClassNames(String partialClassName, int limit)", "full_signature": "synchronized ImmutableList<String> getMatchingClassNames(String partialClassName, int limit)", "class_method_signature": "ClasspathCache.getMatchingClassNames(String partialClassName, int limit)", "testcase": false, "constructor": false}, {"identifier": "getAnalyzedMethods", "parameters": "(String className)", "modifiers": "synchronized", "return": "ImmutableList<UiAnalyzedMethod>", "signature": "ImmutableList<UiAnalyzedMethod> getAnalyzedMethods(String className)", "full_signature": "synchronized ImmutableList<UiAnalyzedMethod> getAnalyzedMethods(String className)", "class_method_signature": "ClasspathCache.getAnalyzedMethods(String className)", "testcase": false, "constructor": false}, {"identifier": "updateCache", "parameters": "()", "modifiers": "synchronized", "return": "void", "signature": "void updateCache()", "full_signature": "synchronized void updateCache()", "class_method_signature": "ClasspathCache.updateCache()", "testcase": false, "constructor": false}, {"identifier": "updateCacheWithClasspathClasses", "parameters": "(Multimap<String, Location> newClassNameLocations)", "modifiers": "@GuardedBy(\"this\") private", "return": "void", "signature": "void updateCacheWithClasspathClasses(Multimap<String, Location> newClassNameLocations)", "full_signature": "@GuardedBy(\"this\") private void updateCacheWithClasspathClasses(Multimap<String, Location> newClassNameLocations)", "class_method_signature": "ClasspathCache.updateCacheWithClasspathClasses(Multimap<String, Location> newClassNameLocations)", "testcase": false, "constructor": false}, {"identifier": "updateCacheWithBootstrapClasses", "parameters": "(Multimap<String, Location> newClassNameLocations)", "modifiers": "@GuardedBy(\"this\") private", "return": "void", "signature": "void updateCacheWithBootstrapClasses(Multimap<String, Location> newClassNameLocations)", "full_signature": "@GuardedBy(\"this\") private void updateCacheWithBootstrapClasses(Multimap<String, Location> newClassNameLocations)", "class_method_signature": "ClasspathCache.updateCacheWithBootstrapClasses(Multimap<String, Location> newClassNameLocations)", "testcase": false, "constructor": false}, {"identifier": "updateCache", "parameters": "(ClassLoader loader, Multimap<String, Location> newClassNameLocations)", "modifiers": "@GuardedBy(\"this\") private", "return": "void", "signature": "void updateCache(ClassLoader loader, Multimap<String, Location> newClassNameLocations)", "full_signature": "@GuardedBy(\"this\") private void updateCache(ClassLoader loader, Multimap<String, Location> newClassNameLocations)", "class_method_signature": "ClasspathCache.updateCache(ClassLoader loader, Multimap<String, Location> newClassNameLocations)", "testcase": false, "constructor": false}, {"identifier": "getKnownClassLoaders", "parameters": "()", "modifiers": "private", "return": "List<ClassLoader>", "signature": "List<ClassLoader> getKnownClassLoaders()", "full_signature": "private List<ClassLoader> getKnownClassLoaders()", "class_method_signature": "ClasspathCache.getKnownClassLoaders()", "testcase": false, "constructor": false}, {"identifier": "loadClassNames", "parameters": "(Location location,\n            Multimap<String, Location> newClassNameLocations)", "modifiers": "@GuardedBy(\"this\") private", "return": "void", "signature": "void loadClassNames(Location location,\n            Multimap<String, Location> newClassNameLocations)", "full_signature": "@GuardedBy(\"this\") private void loadClassNames(Location location,\n            Multimap<String, Location> newClassNameLocations)", "class_method_signature": "ClasspathCache.loadClassNames(Location location,\n            Multimap<String, Location> newClassNameLocations)", "testcase": false, "constructor": false}, {"identifier": "loadClassNamesFromJarFile", "parameters": "(File jarFile, Location location,\n            Multimap<String, Location> newClassNameLocations)", "modifiers": "@GuardedBy(\"this\") private", "return": "void", "signature": "void loadClassNamesFromJarFile(File jarFile, Location location,\n            Multimap<String, Location> newClassNameLocations)", "full_signature": "@GuardedBy(\"this\") private void loadClassNamesFromJarFile(File jarFile, Location location,\n            Multimap<String, Location> newClassNameLocations)", "class_method_signature": "ClasspathCache.loadClassNamesFromJarFile(File jarFile, Location location,\n            Multimap<String, Location> newClassNameLocations)", "testcase": false, "constructor": false}, {"identifier": "loadClassNamesFromManifestClassPath", "parameters": "(JarInputStream jarIn, File jarFile,\n            Multimap<String, Location> newClassNameLocations)", "modifiers": "@GuardedBy(\"this\") private", "return": "void", "signature": "void loadClassNamesFromManifestClassPath(JarInputStream jarIn, File jarFile,\n            Multimap<String, Location> newClassNameLocations)", "full_signature": "@GuardedBy(\"this\") private void loadClassNamesFromManifestClassPath(JarInputStream jarIn, File jarFile,\n            Multimap<String, Location> newClassNameLocations)", "class_method_signature": "ClasspathCache.loadClassNamesFromManifestClassPath(JarInputStream jarIn, File jarFile,\n            Multimap<String, Location> newClassNameLocations)", "testcase": false, "constructor": false}, {"identifier": "combineClassNamesWithLimit", "parameters": "(\n            Set<String> fullMatchingClassNames, Set<String> matchingClassNames, int limit)", "modifiers": "private static", "return": "ImmutableList<String>", "signature": "ImmutableList<String> combineClassNamesWithLimit(\n            Set<String> fullMatchingClassNames, Set<String> matchingClassNames, int limit)", "full_signature": "private static ImmutableList<String> combineClassNamesWithLimit(\n            Set<String> fullMatchingClassNames, Set<String> matchingClassNames, int limit)", "class_method_signature": "ClasspathCache.combineClassNamesWithLimit(\n            Set<String> fullMatchingClassNames, Set<String> matchingClassNames, int limit)", "testcase": false, "constructor": false}, {"identifier": "getAnalyzedMethods", "parameters": "(Location location, String className)", "modifiers": "private static", "return": "List<UiAnalyzedMethod>", "signature": "List<UiAnalyzedMethod> getAnalyzedMethods(Location location, String className)", "full_signature": "private static List<UiAnalyzedMethod> getAnalyzedMethods(Location location, String className)", "class_method_signature": "ClasspathCache.getAnalyzedMethods(Location location, String className)", "testcase": false, "constructor": false}, {"identifier": "getAnalyzedMethods", "parameters": "(byte[] bytes)", "modifiers": "private static", "return": "List<UiAnalyzedMethod>", "signature": "List<UiAnalyzedMethod> getAnalyzedMethods(byte[] bytes)", "full_signature": "private static List<UiAnalyzedMethod> getAnalyzedMethods(byte[] bytes)", "class_method_signature": "ClasspathCache.getAnalyzedMethods(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "getAnalyzedMethods", "parameters": "(Class<?> clazz)", "modifiers": "private static", "return": "List<UiAnalyzedMethod>", "signature": "List<UiAnalyzedMethod> getAnalyzedMethods(Class<?> clazz)", "full_signature": "private static List<UiAnalyzedMethod> getAnalyzedMethods(Class<?> clazz)", "class_method_signature": "ClasspathCache.getAnalyzedMethods(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "tryToGetFileFromURL", "parameters": "(URL url, ClassLoader loader)", "modifiers": "private static @Nullable", "return": "Location", "signature": "Location tryToGetFileFromURL(URL url, ClassLoader loader)", "full_signature": "private static @Nullable Location tryToGetFileFromURL(URL url, ClassLoader loader)", "class_method_signature": "ClasspathCache.tryToGetFileFromURL(URL url, ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "getURLs", "parameters": "(ClassLoader loader)", "modifiers": "private static", "return": "List<URL>", "signature": "List<URL> getURLs(ClassLoader loader)", "full_signature": "private static List<URL> getURLs(ClassLoader loader)", "class_method_signature": "ClasspathCache.getURLs(ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "loadClassNamesFromDirectory", "parameters": "(File dir, String prefix, Location location,\n            Multimap<String, Location> newClassNameLocations)", "modifiers": "private static", "return": "void", "signature": "void loadClassNamesFromDirectory(File dir, String prefix, Location location,\n            Multimap<String, Location> newClassNameLocations)", "full_signature": "private static void loadClassNamesFromDirectory(File dir, String prefix, Location location,\n            Multimap<String, Location> newClassNameLocations)", "class_method_signature": "ClasspathCache.loadClassNamesFromDirectory(File dir, String prefix, Location location,\n            Multimap<String, Location> newClassNameLocations)", "testcase": false, "constructor": false}, {"identifier": "loadClassNamesFromJarFileInsideJarFile", "parameters": "(File jarFile,\n            String jarFileInsideJarFile, Location location,\n            Multimap<String, Location> newClassNameLocations)", "modifiers": "private static", "return": "void", "signature": "void loadClassNamesFromJarFileInsideJarFile(File jarFile,\n            String jarFileInsideJarFile, Location location,\n            Multimap<String, Location> newClassNameLocations)", "full_signature": "private static void loadClassNamesFromJarFileInsideJarFile(File jarFile,\n            String jarFileInsideJarFile, Location location,\n            Multimap<String, Location> newClassNameLocations)", "class_method_signature": "ClasspathCache.loadClassNamesFromJarFileInsideJarFile(File jarFile,\n            String jarFileInsideJarFile, Location location,\n            Multimap<String, Location> newClassNameLocations)", "testcase": false, "constructor": false}, {"identifier": "loadClassNamesFromDirectoryInsideJarFile", "parameters": "(File jarFile,\n            String directoryInsideJarFile, Location location,\n            Multimap<String, Location> newClassNameLocations)", "modifiers": "private static", "return": "void", "signature": "void loadClassNamesFromDirectoryInsideJarFile(File jarFile,\n            String directoryInsideJarFile, Location location,\n            Multimap<String, Location> newClassNameLocations)", "full_signature": "private static void loadClassNamesFromDirectoryInsideJarFile(File jarFile,\n            String directoryInsideJarFile, Location location,\n            Multimap<String, Location> newClassNameLocations)", "class_method_signature": "ClasspathCache.loadClassNamesFromDirectoryInsideJarFile(File jarFile,\n            String directoryInsideJarFile, Location location,\n            Multimap<String, Location> newClassNameLocations)", "testcase": false, "constructor": false}, {"identifier": "loadClassNamesFromJarInputStream", "parameters": "(JarInputStream jarIn, String directory,\n            Location location, Multimap<String, Location> newClassNameLocations)", "modifiers": "private static", "return": "void", "signature": "void loadClassNamesFromJarInputStream(JarInputStream jarIn, String directory,\n            Location location, Multimap<String, Location> newClassNameLocations)", "full_signature": "private static void loadClassNamesFromJarInputStream(JarInputStream jarIn, String directory,\n            Location location, Multimap<String, Location> newClassNameLocations)", "class_method_signature": "ClasspathCache.loadClassNamesFromJarInputStream(JarInputStream jarIn, String directory,\n            Location location, Multimap<String, Location> newClassNameLocations)", "testcase": false, "constructor": false}, {"identifier": "getFileFromJBossVfsURL", "parameters": "(URL url, ClassLoader loader)", "modifiers": "private static @Nullable", "return": "Location", "signature": "Location getFileFromJBossVfsURL(URL url, ClassLoader loader)", "full_signature": "private static @Nullable Location getFileFromJBossVfsURL(URL url, ClassLoader loader)", "class_method_signature": "ClasspathCache.getFileFromJBossVfsURL(URL url, ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "getLocationFromFile", "parameters": "(File file)", "modifiers": "private static @Nullable", "return": "Location", "signature": "Location getLocationFromFile(File file)", "full_signature": "private static @Nullable Location getLocationFromFile(File file)", "class_method_signature": "ClasspathCache.getLocationFromFile(File file)", "testcase": false, "constructor": false}, {"identifier": "getLocationFromJarFile", "parameters": "(String f)", "modifiers": "private static", "return": "Location", "signature": "Location getLocationFromJarFile(String f)", "full_signature": "private static Location getLocationFromJarFile(String f)", "class_method_signature": "ClasspathCache.getLocationFromJarFile(String f)", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "(Location location, String className)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] getBytes(Location location, String className)", "full_signature": "private static byte[] getBytes(Location location, String className)", "class_method_signature": "ClasspathCache.getBytes(Location location, String className)", "testcase": false, "constructor": false}, {"identifier": "getBytesFromJarFile", "parameters": "(String name, File jarFile)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] getBytesFromJarFile(String name, File jarFile)", "full_signature": "private static byte[] getBytesFromJarFile(String name, File jarFile)", "class_method_signature": "ClasspathCache.getBytesFromJarFile(String name, File jarFile)", "testcase": false, "constructor": false}, {"identifier": "getBytesFromJarFileInsideJarFile", "parameters": "(String name, File jarFile,\n            String jarFileInsideJarFile)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] getBytesFromJarFileInsideJarFile(String name, File jarFile,\n            String jarFileInsideJarFile)", "full_signature": "private static byte[] getBytesFromJarFileInsideJarFile(String name, File jarFile,\n            String jarFileInsideJarFile)", "class_method_signature": "ClasspathCache.getBytesFromJarFileInsideJarFile(String name, File jarFile,\n            String jarFileInsideJarFile)", "testcase": false, "constructor": false}, {"identifier": "getBytesFromDirectoryInsideJarFile", "parameters": "(String name, File jarFile,\n            String directoryInsideJarFile)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] getBytesFromDirectoryInsideJarFile(String name, File jarFile,\n            String directoryInsideJarFile)", "full_signature": "private static byte[] getBytesFromDirectoryInsideJarFile(String name, File jarFile,\n            String directoryInsideJarFile)", "class_method_signature": "ClasspathCache.getBytesFromDirectoryInsideJarFile(String name, File jarFile,\n            String directoryInsideJarFile)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/glowroot/agent/live/ClasspathCache.java"}, "focal_method": {"identifier": "getAnalyzedMethods", "parameters": "(String className)", "modifiers": "synchronized", "return": "ImmutableList<UiAnalyzedMethod>", "body": "synchronized ImmutableList<UiAnalyzedMethod> getAnalyzedMethods(String className) {\n        // update cache before proceeding\n        updateCache();\n        Set<UiAnalyzedMethod> analyzedMethods = Sets.newHashSet();\n        Collection<Location> locations = classNameLocations.get(className);\n        for (Location location : locations) {\n            try {\n                analyzedMethods.addAll(getAnalyzedMethods(location, className));\n            } catch (IOException e) {\n                logger.warn(e.getMessage(), e);\n            }\n        }\n        if (instrumentation != null) {\n            // also check loaded classes, e.g. for groovy classes\n            for (Class<?> clazz : instrumentation.getAllLoadedClasses()) {\n                if (clazz.getName().equals(className)) {\n                    analyzedMethods.addAll(getAnalyzedMethods(clazz));\n                }\n            }\n        }\n        return ImmutableList.copyOf(analyzedMethods);\n    }", "signature": "ImmutableList<UiAnalyzedMethod> getAnalyzedMethods(String className)", "full_signature": "synchronized ImmutableList<UiAnalyzedMethod> getAnalyzedMethods(String className)", "class_method_signature": "ClasspathCache.getAnalyzedMethods(String className)", "testcase": false, "constructor": false, "invocations": ["updateCache", "newHashSet", "get", "addAll", "getAnalyzedMethods", "warn", "getMessage", "getAllLoadedClasses", "equals", "getName", "addAll", "getAnalyzedMethods", "copyOf"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}