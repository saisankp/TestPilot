{"test_class": {"identifier": "SpanCustomizingAsyncHandlerInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "SpanCustomizingAsyncHandlerInterceptor interceptor;", "modifier": "", "type": "SpanCustomizingAsyncHandlerInterceptor", "declarator": "interceptor", "var_name": "interceptor"}, {"original_string": "TestController controller = new TestController();", "modifier": "", "type": "TestController", "declarator": "controller = new TestController()", "var_name": "controller"}, {"original_string": "HttpServletRequest request = mock(HttpServletRequest.class);", "modifier": "", "type": "HttpServletRequest", "declarator": "request = mock(HttpServletRequest.class)", "var_name": "request"}, {"original_string": "HttpServletResponse response = mock(HttpServletResponse.class);", "modifier": "", "type": "HttpServletResponse", "declarator": "response = mock(HttpServletResponse.class)", "var_name": "response"}, {"original_string": "SpanCustomizer span = mock(SpanCustomizer.class);", "modifier": "", "type": "SpanCustomizer", "declarator": "span = mock(SpanCustomizer.class)", "var_name": "span"}, {"original_string": "HandlerParser parser = mock(HandlerParser.class);", "modifier": "", "type": "HandlerParser", "declarator": "parser = mock(HandlerParser.class)", "var_name": "parser"}], "file": "instrumentation/spring-webmvc/src/test/java/brave/spring/webmvc/SpanCustomizingAsyncHandlerInterceptorTest.java"}, "test_case": {"identifier": "afterCompletion_addsHttpRouteAttribute_coercesNullToEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void afterCompletion_addsHttpRouteAttribute_coercesNullToEmpty() {\n    when(request.getAttribute(\"brave.SpanCustomizer\")).thenReturn(span);\n\n    interceptor.afterCompletion(request, response, controller, null);\n\n    verify(request).getAttribute(\"brave.SpanCustomizer\");\n    verify(request).getAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE);\n    verify(request).setAttribute(\"http.route\", \"\");\n\n    verifyNoMoreInteractions(request, response, parser, span);\n  }", "signature": "void afterCompletion_addsHttpRouteAttribute_coercesNullToEmpty()", "full_signature": "@Test public void afterCompletion_addsHttpRouteAttribute_coercesNullToEmpty()", "class_method_signature": "SpanCustomizingAsyncHandlerInterceptorTest.afterCompletion_addsHttpRouteAttribute_coercesNullToEmpty()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getAttribute", "afterCompletion", "getAttribute", "verify", "getAttribute", "verify", "setAttribute", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "SpanCustomizingAsyncHandlerInterceptor", "superclass": "extends HandlerInterceptorAdapter", "interfaces": "", "fields": [{"original_string": "@Autowired(required = false)\n  HandlerParser handlerParser = new HandlerParser();", "modifier": "@Autowired(required = false)", "type": "HandlerParser", "declarator": "handlerParser = new HandlerParser()", "var_name": "handlerParser"}], "methods": [{"identifier": "SpanCustomizingAsyncHandlerInterceptor", "parameters": "()", "modifiers": "", "return": "", "signature": " SpanCustomizingAsyncHandlerInterceptor()", "full_signature": "  SpanCustomizingAsyncHandlerInterceptor()", "class_method_signature": "SpanCustomizingAsyncHandlerInterceptor.SpanCustomizingAsyncHandlerInterceptor()", "testcase": false, "constructor": true}, {"identifier": "preHandle", "parameters": "(HttpServletRequest request, HttpServletResponse response, Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object o)", "full_signature": "@Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object o)", "class_method_signature": "SpanCustomizingAsyncHandlerInterceptor.preHandle(HttpServletRequest request, HttpServletResponse response, Object o)", "testcase": false, "constructor": false}, {"identifier": "afterCompletion", "parameters": "(\n    HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "modifiers": "@Override public", "return": "void", "signature": "void afterCompletion(\n    HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "full_signature": "@Override public void afterCompletion(\n    HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "class_method_signature": "SpanCustomizingAsyncHandlerInterceptor.afterCompletion(\n    HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "testcase": false, "constructor": false}], "file": "instrumentation/spring-webmvc/src/main/java/brave/spring/webmvc/SpanCustomizingAsyncHandlerInterceptor.java"}, "focal_method": {"identifier": "afterCompletion", "parameters": "(\n    HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void afterCompletion(\n    HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {\n    Object span = request.getAttribute(SpanCustomizer.class.getName());\n    if (span instanceof SpanCustomizer) {\n      setErrorAttribute(request, ex);\n      setHttpRouteAttribute(request);\n    }\n  }", "signature": "void afterCompletion(\n    HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "full_signature": "@Override public void afterCompletion(\n    HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "class_method_signature": "SpanCustomizingAsyncHandlerInterceptor.afterCompletion(\n    HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "testcase": false, "constructor": false, "invocations": ["getAttribute", "getName", "setErrorAttribute", "setHttpRouteAttribute"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}