{"test_class": {"identifier": "AbstractLocalTransactionRequestTest", "superclass": "extends AbstractTransactionRequestTest<T>", "interfaces": "", "fields": [], "file": "opendaylight/md-sal/cds-access-api/src/test/java/org/opendaylight/controller/cluster/access/commands/AbstractLocalTransactionRequestTest.java"}, "test_case": {"identifier": "cloneAsVersionTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cloneAsVersionTest() {\n        Assert.assertEquals(object(), object().cloneAsVersion(ABIVersion.BORON));\n    }", "signature": "void cloneAsVersionTest()", "full_signature": "@Test public void cloneAsVersionTest()", "class_method_signature": "AbstractLocalTransactionRequestTest.cloneAsVersionTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "object", "cloneAsVersion", "object"]}, "focal_class": {"identifier": "AbstractLocalTransactionRequest", "superclass": "extends TransactionRequest<T>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "AbstractLocalTransactionRequest", "parameters": "(final TransactionIdentifier identifier, final long sequence,\n            final ActorRef replyTo)", "modifiers": "", "return": "", "signature": " AbstractLocalTransactionRequest(final TransactionIdentifier identifier, final long sequence,\n            final ActorRef replyTo)", "full_signature": "  AbstractLocalTransactionRequest(final TransactionIdentifier identifier, final long sequence,\n            final ActorRef replyTo)", "class_method_signature": "AbstractLocalTransactionRequest.AbstractLocalTransactionRequest(final TransactionIdentifier identifier, final long sequence,\n            final ActorRef replyTo)", "testcase": false, "constructor": true}, {"identifier": "externalizableProxy", "parameters": "(final ABIVersion version)", "modifiers": "@Override protected final", "return": "AbstractTransactionRequestProxy<T>", "signature": "AbstractTransactionRequestProxy<T> externalizableProxy(final ABIVersion version)", "full_signature": "@Override protected final AbstractTransactionRequestProxy<T> externalizableProxy(final ABIVersion version)", "class_method_signature": "AbstractLocalTransactionRequest.externalizableProxy(final ABIVersion version)", "testcase": false, "constructor": false}, {"identifier": "cloneAsVersion", "parameters": "(final ABIVersion version)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override protected final", "return": "T", "signature": "T cloneAsVersion(final ABIVersion version)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override protected final T cloneAsVersion(final ABIVersion version)", "class_method_signature": "AbstractLocalTransactionRequest.cloneAsVersion(final ABIVersion version)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/cds-access-api/src/main/java/org/opendaylight/controller/cluster/access/commands/AbstractLocalTransactionRequest.java"}, "focal_method": {"identifier": "cloneAsVersion", "parameters": "(final ABIVersion version)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override protected final", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    protected final T cloneAsVersion(final ABIVersion version) {\n        // These messages cannot be serialized, hence we this method is a no-op\n        return (T)this;\n    }", "signature": "T cloneAsVersion(final ABIVersion version)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override protected final T cloneAsVersion(final ABIVersion version)", "class_method_signature": "AbstractLocalTransactionRequest.cloneAsVersion(final ABIVersion version)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}