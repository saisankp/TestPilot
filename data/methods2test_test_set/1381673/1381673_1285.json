{"test_class": {"identifier": "CommonCodegenUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/CommonCodegenUtilsTest.java"}, "test_case": {"identifier": "getFilteredKiePMMLNameValueExpression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getFilteredKiePMMLNameValueExpression() {\n        String kiePMMLNameValueListParam = \"KIEPMMLNAMEVALUELISTPARAM\";\n        String fieldNameToRef = \"FIELDNAMETOREF\";\n        ExpressionStmt retrieved = CommonCodegenUtils.getFilteredKiePMMLNameValueExpression(kiePMMLNameValueListParam, fieldNameToRef, true);\n        assertNotNull(retrieved);\n        String expected = String.format(\"%1$s<%2$s> %3$s = %4$s.stream().filter((%2$s %5$s) -> %6$s.equals(\\\"%7$s\\\", %5$s.getName())).findFirst();\",\n                                        Optional.class.getName(),\n                                        KiePMMLNameValue.class.getName(),\n                                        OPTIONAL_FILTERED_KIEPMMLNAMEVALUE_NAME,\n                                        kiePMMLNameValueListParam,\n                                        LAMBDA_PARAMETER_NAME,\n                                        Objects.class.getName(),\n                                        fieldNameToRef);\n        String retrievedString = retrieved.toString();\n        assertEquals(expected, retrievedString);\n        BlockStmt body = new BlockStmt();\n        body.addStatement(retrieved);\n        Parameter listParameter = new Parameter(CommonCodegenUtils.getTypedClassOrInterfaceType(List.class.getName(), Collections.singletonList(KiePMMLNameValue.class.getName())), kiePMMLNameValueListParam);\n        Parameter fieldRefParameter = new Parameter(parseClassOrInterfaceType(String.class.getName()), fieldNameToRef);\n        commonValidateCompilation(body, Arrays.asList(listParameter, fieldRefParameter));\n        //\n        retrieved = CommonCodegenUtils.getFilteredKiePMMLNameValueExpression(kiePMMLNameValueListParam, fieldNameToRef, false);\n        assertNotNull(retrieved);\n        expected = String.format(\"%1$s<%2$s> %3$s = %4$s.stream().filter((%2$s %5$s) -> %6$s.equals(%7$s, %5$s.getName())).findFirst();\",\n                                        Optional.class.getName(),\n                                        KiePMMLNameValue.class.getName(),\n                                        OPTIONAL_FILTERED_KIEPMMLNAMEVALUE_NAME,\n                                        kiePMMLNameValueListParam,\n                                        LAMBDA_PARAMETER_NAME,\n                                        Objects.class.getName(),\n                                        fieldNameToRef);\n        retrievedString = retrieved.toString();\n        assertEquals(expected, retrievedString);\n        body = new BlockStmt();\n        body.addStatement(retrieved);\n        listParameter = new Parameter(CommonCodegenUtils.getTypedClassOrInterfaceType(List.class.getName(), Collections.singletonList(KiePMMLNameValue.class.getName())), kiePMMLNameValueListParam);\n        fieldRefParameter = new Parameter(parseClassOrInterfaceType(String.class.getName()), fieldNameToRef);\n        commonValidateCompilation(body, Arrays.asList(listParameter, fieldRefParameter));\n    }", "signature": "void getFilteredKiePMMLNameValueExpression()", "full_signature": "@Test public void getFilteredKiePMMLNameValueExpression()", "class_method_signature": "CommonCodegenUtilsTest.getFilteredKiePMMLNameValueExpression()", "testcase": true, "constructor": false, "invocations": ["getFilteredKiePMMLNameValueExpression", "assertNotNull", "format", "getName", "getName", "getName", "toString", "assertEquals", "addStatement", "getTypedClassOrInterfaceType", "getName", "singletonList", "getName", "parseClassOrInterfaceType", "getName", "commonValidateCompilation", "asList", "getFilteredKiePMMLNameValueExpression", "assertNotNull", "format", "getName", "getName", "getName", "toString", "assertEquals", "addStatement", "getTypedClassOrInterfaceType", "getName", "singletonList", "getName", "parseClassOrInterfaceType", "getName", "commonValidateCompilation", "asList"]}, "focal_class": {"identifier": "CommonCodegenUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static String OPTIONAL_FILTERED_KIEPMMLNAMEVALUE_NAME =\"kiePMMLNameValue\";", "modifier": "public static", "type": "String", "declarator": "OPTIONAL_FILTERED_KIEPMMLNAMEVALUE_NAME =\"kiePMMLNameValue\"", "var_name": "OPTIONAL_FILTERED_KIEPMMLNAMEVALUE_NAME"}, {"original_string": "static final String LAMBDA_PARAMETER_NAME = \"lmbdParam\";", "modifier": "static final", "type": "String", "declarator": "LAMBDA_PARAMETER_NAME = \"lmbdParam\"", "var_name": "LAMBDA_PARAMETER_NAME"}, {"original_string": "static final String METHOD_NAME_TEMPLATE = \"%s%s\";", "modifier": "static final", "type": "String", "declarator": "METHOD_NAME_TEMPLATE = \"%s%s\"", "var_name": "METHOD_NAME_TEMPLATE"}, {"original_string": "static final String PARAMETER_NAME_TEMPLATE = \"param%s\";", "modifier": "static final", "type": "String", "declarator": "PARAMETER_NAME_TEMPLATE = \"param%s\"", "var_name": "PARAMETER_NAME_TEMPLATE"}], "methods": [{"identifier": "CommonCodegenUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " CommonCodegenUtils()", "full_signature": "private  CommonCodegenUtils()", "class_method_signature": "CommonCodegenUtils.CommonCodegenUtils()", "testcase": false, "constructor": true}, {"identifier": "populateMethodDeclarations", "parameters": "(final ClassOrInterfaceDeclaration toPopulate,\n                                                  final Collection<MethodDeclaration> methodDeclarations)", "modifiers": "public static", "return": "void", "signature": "void populateMethodDeclarations(final ClassOrInterfaceDeclaration toPopulate,\n                                                  final Collection<MethodDeclaration> methodDeclarations)", "full_signature": "public static void populateMethodDeclarations(final ClassOrInterfaceDeclaration toPopulate,\n                                                  final Collection<MethodDeclaration> methodDeclarations)", "class_method_signature": "CommonCodegenUtils.populateMethodDeclarations(final ClassOrInterfaceDeclaration toPopulate,\n                                                  final Collection<MethodDeclaration> methodDeclarations)", "testcase": false, "constructor": false}, {"identifier": "getFilteredKiePMMLNameValueExpression", "parameters": "(final String kiePMMLNameValueListParam,\n                                                                       final String fieldNameToRef,\n                                                                       boolean stringLiteralComparison)", "modifiers": "public static", "return": "ExpressionStmt", "signature": "ExpressionStmt getFilteredKiePMMLNameValueExpression(final String kiePMMLNameValueListParam,\n                                                                       final String fieldNameToRef,\n                                                                       boolean stringLiteralComparison)", "full_signature": "public static ExpressionStmt getFilteredKiePMMLNameValueExpression(final String kiePMMLNameValueListParam,\n                                                                       final String fieldNameToRef,\n                                                                       boolean stringLiteralComparison)", "class_method_signature": "CommonCodegenUtils.getFilteredKiePMMLNameValueExpression(final String kiePMMLNameValueListParam,\n                                                                       final String fieldNameToRef,\n                                                                       boolean stringLiteralComparison)", "testcase": false, "constructor": false}, {"identifier": "addMapPopulation", "parameters": "(final Map<String, MethodDeclaration> toAdd,\n                                        final BlockStmt body,\n                                        final String mapName)", "modifiers": "public static", "return": "void", "signature": "void addMapPopulation(final Map<String, MethodDeclaration> toAdd,\n                                        final BlockStmt body,\n                                        final String mapName)", "full_signature": "public static void addMapPopulation(final Map<String, MethodDeclaration> toAdd,\n                                        final BlockStmt body,\n                                        final String mapName)", "class_method_signature": "CommonCodegenUtils.addMapPopulation(final Map<String, MethodDeclaration> toAdd,\n                                        final BlockStmt body,\n                                        final String mapName)", "testcase": false, "constructor": false}, {"identifier": "getMethodDeclaration", "parameters": "(final String methodName,\n                                                         final Map<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "public static", "return": "MethodDeclaration", "signature": "MethodDeclaration getMethodDeclaration(final String methodName,\n                                                         final Map<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "public static MethodDeclaration getMethodDeclaration(final String methodName,\n                                                         final Map<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "CommonCodegenUtils.getMethodDeclaration(final String methodName,\n                                                         final Map<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getMethodDeclaration", "parameters": "(final String methodName)", "modifiers": "public static", "return": "MethodDeclaration", "signature": "MethodDeclaration getMethodDeclaration(final String methodName)", "full_signature": "public static MethodDeclaration getMethodDeclaration(final String methodName)", "class_method_signature": "CommonCodegenUtils.getMethodDeclaration(final String methodName)", "testcase": false, "constructor": false}, {"identifier": "getReturnStmt", "parameters": "(final String returnedVariableName)", "modifiers": "public static", "return": "ReturnStmt", "signature": "ReturnStmt getReturnStmt(final String returnedVariableName)", "full_signature": "public static ReturnStmt getReturnStmt(final String returnedVariableName)", "class_method_signature": "CommonCodegenUtils.getReturnStmt(final String returnedVariableName)", "testcase": false, "constructor": false}, {"identifier": "getTypedClassOrInterfaceType", "parameters": "(final String className,\n                                                                    final List<String> typesName )", "modifiers": "public static", "return": "ClassOrInterfaceType", "signature": "ClassOrInterfaceType getTypedClassOrInterfaceType(final String className,\n                                                                    final List<String> typesName )", "full_signature": "public static ClassOrInterfaceType getTypedClassOrInterfaceType(final String className,\n                                                                    final List<String> typesName )", "class_method_signature": "CommonCodegenUtils.getTypedClassOrInterfaceType(final String className,\n                                                                    final List<String> typesName )", "testcase": false, "constructor": false}, {"identifier": "setAssignExpressionValue", "parameters": "( final BlockStmt body, final String assignExpressionName, final Expression value)", "modifiers": "public static", "return": "void", "signature": "void setAssignExpressionValue( final BlockStmt body, final String assignExpressionName, final Expression value)", "full_signature": "public static void setAssignExpressionValue( final BlockStmt body, final String assignExpressionName, final Expression value)", "class_method_signature": "CommonCodegenUtils.setAssignExpressionValue( final BlockStmt body, final String assignExpressionName, final Expression value)", "testcase": false, "constructor": false}, {"identifier": "getAssignExpression", "parameters": "(final BlockStmt body, final String assignExpressionName)", "modifiers": "public static", "return": "Optional<AssignExpr>", "signature": "Optional<AssignExpr> getAssignExpression(final BlockStmt body, final String assignExpressionName)", "full_signature": "public static Optional<AssignExpr> getAssignExpression(final BlockStmt body, final String assignExpressionName)", "class_method_signature": "CommonCodegenUtils.getAssignExpression(final BlockStmt body, final String assignExpressionName)", "testcase": false, "constructor": false}, {"identifier": "getExplicitConstructorInvocationStmt", "parameters": "(final BlockStmt body)", "modifiers": "public static", "return": "Optional<ExplicitConstructorInvocationStmt>", "signature": "Optional<ExplicitConstructorInvocationStmt> getExplicitConstructorInvocationStmt(final BlockStmt body)", "full_signature": "public static Optional<ExplicitConstructorInvocationStmt> getExplicitConstructorInvocationStmt(final BlockStmt body)", "class_method_signature": "CommonCodegenUtils.getExplicitConstructorInvocationStmt(final BlockStmt body)", "testcase": false, "constructor": false}, {"identifier": "setExplicitConstructorInvocationArgument", "parameters": "(final ExplicitConstructorInvocationStmt constructorInvocationStmt, final String parameterName, final String value)", "modifiers": "public static", "return": "void", "signature": "void setExplicitConstructorInvocationArgument(final ExplicitConstructorInvocationStmt constructorInvocationStmt, final String parameterName, final String value)", "full_signature": "public static void setExplicitConstructorInvocationArgument(final ExplicitConstructorInvocationStmt constructorInvocationStmt, final String parameterName, final String value)", "class_method_signature": "CommonCodegenUtils.setExplicitConstructorInvocationArgument(final ExplicitConstructorInvocationStmt constructorInvocationStmt, final String parameterName, final String value)", "testcase": false, "constructor": false}, {"identifier": "getExplicitConstructorInvocationParameter", "parameters": "(final ExplicitConstructorInvocationStmt constructorInvocationStmt, final String parameterName)", "modifiers": "public static", "return": "Optional<NameExpr>", "signature": "Optional<NameExpr> getExplicitConstructorInvocationParameter(final ExplicitConstructorInvocationStmt constructorInvocationStmt, final String parameterName)", "full_signature": "public static Optional<NameExpr> getExplicitConstructorInvocationParameter(final ExplicitConstructorInvocationStmt constructorInvocationStmt, final String parameterName)", "class_method_signature": "CommonCodegenUtils.getExplicitConstructorInvocationParameter(final ExplicitConstructorInvocationStmt constructorInvocationStmt, final String parameterName)", "testcase": false, "constructor": false}, {"identifier": "getMethodDeclaration", "parameters": "(final ClassOrInterfaceDeclaration classOrInterfaceDeclaration, final String methodName)", "modifiers": "public static", "return": "Optional<MethodDeclaration>", "signature": "Optional<MethodDeclaration> getMethodDeclaration(final ClassOrInterfaceDeclaration classOrInterfaceDeclaration, final String methodName)", "full_signature": "public static Optional<MethodDeclaration> getMethodDeclaration(final ClassOrInterfaceDeclaration classOrInterfaceDeclaration, final String methodName)", "class_method_signature": "CommonCodegenUtils.getMethodDeclaration(final ClassOrInterfaceDeclaration classOrInterfaceDeclaration, final String methodName)", "testcase": false, "constructor": false}, {"identifier": "addMethod", "parameters": "(final MethodDeclaration methodTemplate,\n                                                 final ClassOrInterfaceDeclaration tableTemplate,\n                                                 final String methodName)", "modifiers": "public static", "return": "MethodDeclaration", "signature": "MethodDeclaration addMethod(final MethodDeclaration methodTemplate,\n                                                 final ClassOrInterfaceDeclaration tableTemplate,\n                                                 final String methodName)", "full_signature": "public static MethodDeclaration addMethod(final MethodDeclaration methodTemplate,\n                                                 final ClassOrInterfaceDeclaration tableTemplate,\n                                                 final String methodName)", "class_method_signature": "CommonCodegenUtils.addMethod(final MethodDeclaration methodTemplate,\n                                                 final ClassOrInterfaceDeclaration tableTemplate,\n                                                 final String methodName)", "testcase": false, "constructor": false}, {"identifier": "getVariableDeclarator", "parameters": "(final BlockStmt body, final String variableName)", "modifiers": "public static", "return": "Optional<VariableDeclarator>", "signature": "Optional<VariableDeclarator> getVariableDeclarator(final BlockStmt body, final String variableName)", "full_signature": "public static Optional<VariableDeclarator> getVariableDeclarator(final BlockStmt body, final String variableName)", "class_method_signature": "CommonCodegenUtils.getVariableDeclarator(final BlockStmt body, final String variableName)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/CommonCodegenUtils.java"}, "focal_method": {"identifier": "getFilteredKiePMMLNameValueExpression", "parameters": "(final String kiePMMLNameValueListParam,\n                                                                       final String fieldNameToRef,\n                                                                       boolean stringLiteralComparison)", "modifiers": "public static", "return": "ExpressionStmt", "body": "public static ExpressionStmt getFilteredKiePMMLNameValueExpression(final String kiePMMLNameValueListParam,\n                                                                       final String fieldNameToRef,\n                                                                       boolean stringLiteralComparison) {\n        // kpmmlnv.getName()\n        MethodCallExpr argumentBodyExpressionArgument2 = new MethodCallExpr(\"getName\");\n        argumentBodyExpressionArgument2.setScope(new NameExpr(LAMBDA_PARAMETER_NAME));\n        // Objects.equals(fieldNameToRef, kpmmlnv.getName())\n        MethodCallExpr argumentBodyExpression = new MethodCallExpr(\"equals\");\n        Expression equalsComparisonExpression;\n        if (stringLiteralComparison) {\n            equalsComparisonExpression = new StringLiteralExpr(fieldNameToRef);\n        } else {\n            equalsComparisonExpression = new NameExpr(fieldNameToRef);\n        }\n        argumentBodyExpression.setArguments(NodeList.nodeList(equalsComparisonExpression, argumentBodyExpressionArgument2));\n        argumentBodyExpression.setScope(new NameExpr(Objects.class.getName()));\n        ExpressionStmt argumentBody = new ExpressionStmt(argumentBodyExpression);\n        // (KiePMMLNameValue kpmmlnv) -> Objects.equals(fieldNameToRef, kpmmlnv.getName())\n        Parameter argumentParameter = new Parameter(parseClassOrInterfaceType(KiePMMLNameValue.class.getName()), LAMBDA_PARAMETER_NAME);\n        LambdaExpr argument = new LambdaExpr();\n        argument.setEnclosingParameters(true).setParameters(NodeList.nodeList(argumentParameter)); // (KiePMMLNameValue kpmmlnv) ->\n        argument.setBody(argumentBody); // Objects.equals(fieldNameToRef, kpmmlnv.getName())\n        // kiePMMLNameValueListParam.stream()\n        MethodCallExpr initializerScopeScope = new MethodCallExpr(\"stream\");\n        initializerScopeScope.setScope(new NameExpr(kiePMMLNameValueListParam));\n        // kiePMMLNameValueListParam.stream().filter((KiePMMLNameValue kpmmlnv)  -> Objects.equals(fieldNameToRef, kpmmlnv.getName()))\n        MethodCallExpr initializerScope = new MethodCallExpr(\"filter\");\n        initializerScope.setScope(initializerScopeScope);\n        initializerScope.setArguments(NodeList.nodeList(argument));\n\n        // kiePMMLNameValueListParam.stream().filter((KiePMMLNameValue kpmmlnv)  -> Objects.equals(fieldNameToRef, kpmmlnv.getName())).findFirst()\n        MethodCallExpr initializer = new MethodCallExpr( \"findFirst\");\n        initializer.setScope(initializerScope);\n        // Optional<KiePMMLNameValue> kiePMMLNameValue\n        VariableDeclarator variableDeclarator = new VariableDeclarator(getTypedClassOrInterfaceType(Optional.class.getName(), Collections.singletonList(KiePMMLNameValue.class.getName())),\n                                                                       OPTIONAL_FILTERED_KIEPMMLNAMEVALUE_NAME);\n        // Optional<KiePMMLNameValue> kiePMMLNameValue = kiePMMLNameValueListParam.stream().filter((KiePMMLNameValue kpmmlnv)  -> Objects.equals(fieldNameToRef, kpmmlnv.getName())).findFirst()\n        variableDeclarator.setInitializer(initializer);\n        //\n        VariableDeclarationExpr variableDeclarationExpr = new VariableDeclarationExpr(NodeList.nodeList(variableDeclarator));\n        ExpressionStmt toReturn = new ExpressionStmt();\n        toReturn.setExpression(variableDeclarationExpr);\n        return toReturn;\n    }", "signature": "ExpressionStmt getFilteredKiePMMLNameValueExpression(final String kiePMMLNameValueListParam,\n                                                                       final String fieldNameToRef,\n                                                                       boolean stringLiteralComparison)", "full_signature": "public static ExpressionStmt getFilteredKiePMMLNameValueExpression(final String kiePMMLNameValueListParam,\n                                                                       final String fieldNameToRef,\n                                                                       boolean stringLiteralComparison)", "class_method_signature": "CommonCodegenUtils.getFilteredKiePMMLNameValueExpression(final String kiePMMLNameValueListParam,\n                                                                       final String fieldNameToRef,\n                                                                       boolean stringLiteralComparison)", "testcase": false, "constructor": false, "invocations": ["setScope", "setArguments", "nodeList", "setScope", "getName", "parseClassOrInterfaceType", "getName", "setParameters", "setEnclosingParameters", "nodeList", "setBody", "setScope", "setScope", "setArguments", "nodeList", "setScope", "getTypedClassOrInterfaceType", "getName", "singletonList", "getName", "setInitializer", "nodeList", "setExpression"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}