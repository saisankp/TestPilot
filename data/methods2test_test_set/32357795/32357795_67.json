{"test_class": {"identifier": "AssociationWalkerTest", "superclass": "extends AbstractUtilsTestCase", "interfaces": "", "fields": [{"original_string": "protected TopicIF bart, homer, marge, gramps, lisa, maggie;", "modifier": "protected", "type": "TopicIF", "declarator": "bart", "var_name": "bart"}, {"original_string": "protected TopicIF at_descendant_of, rt_ancestor, rt_descendant;", "modifier": "protected", "type": "TopicIF", "declarator": "at_descendant_of", "var_name": "at_descendant_of"}], "file": "ontopia-engine/src/test/java/net/ontopia/topicmaps/utils/AssociationWalkerTest.java"}, "test_case": {"identifier": "testWalker", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWalker() {\n    AssociationWalker twalker = new AssociationWalker(at_descendant_of, rt_descendant, rt_ancestor);\n    Set ancestors = twalker.walkTopics(bart);\n    Assert.assertTrue(\"Expecting 2 members of association set. Got: \" + String.valueOf(ancestors.size()),\n           ancestors.size() == 2);\n  }", "signature": "void testWalker()", "full_signature": "@Test public void testWalker()", "class_method_signature": "AssociationWalkerTest.testWalker()", "testcase": true, "constructor": false, "invocations": ["walkTopics", "assertTrue", "valueOf", "size", "size"]}, "focal_class": {"identifier": "AssociationWalker", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected DeciderIF<AssociationIF> assocDecider;", "modifier": "protected", "type": "DeciderIF<AssociationIF>", "declarator": "assocDecider", "var_name": "assocDecider"}, {"original_string": "protected DeciderIF<AssociationRoleIF> leftRoleDecider;", "modifier": "protected", "type": "DeciderIF<AssociationRoleIF>", "declarator": "leftRoleDecider", "var_name": "leftRoleDecider"}, {"original_string": "protected DeciderIF<AssociationRoleIF> rightRoleDecider;", "modifier": "protected", "type": "DeciderIF<AssociationRoleIF>", "declarator": "rightRoleDecider", "var_name": "rightRoleDecider"}, {"original_string": "protected List<AssociationWalkerListenerIF> listeners;", "modifier": "protected", "type": "List<AssociationWalkerListenerIF>", "declarator": "listeners", "var_name": "listeners"}], "methods": [{"identifier": "AssociationWalker", "parameters": "(TopicIF associationType, TopicIF leftRoleSpec, TopicIF rightRoleSpec)", "modifiers": "public", "return": "", "signature": " AssociationWalker(TopicIF associationType, TopicIF leftRoleSpec, TopicIF rightRoleSpec)", "full_signature": "public  AssociationWalker(TopicIF associationType, TopicIF leftRoleSpec, TopicIF rightRoleSpec)", "class_method_signature": "AssociationWalker.AssociationWalker(TopicIF associationType, TopicIF leftRoleSpec, TopicIF rightRoleSpec)", "testcase": false, "constructor": true}, {"identifier": "AssociationWalker", "parameters": "(DeciderIF<AssociationIF> assocDecider, DeciderIF<AssociationRoleIF> fromRoleDecider, DeciderIF<AssociationRoleIF> toRoleDecider)", "modifiers": "public", "return": "", "signature": " AssociationWalker(DeciderIF<AssociationIF> assocDecider, DeciderIF<AssociationRoleIF> fromRoleDecider, DeciderIF<AssociationRoleIF> toRoleDecider)", "full_signature": "public  AssociationWalker(DeciderIF<AssociationIF> assocDecider, DeciderIF<AssociationRoleIF> fromRoleDecider, DeciderIF<AssociationRoleIF> toRoleDecider)", "class_method_signature": "AssociationWalker.AssociationWalker(DeciderIF<AssociationIF> assocDecider, DeciderIF<AssociationRoleIF> fromRoleDecider, DeciderIF<AssociationRoleIF> toRoleDecider)", "testcase": false, "constructor": true}, {"identifier": "walkTopics", "parameters": "(TopicIF start)", "modifiers": "public", "return": "Set<TopicIF>", "signature": "Set<TopicIF> walkTopics(TopicIF start)", "full_signature": "public Set<TopicIF> walkTopics(TopicIF start)", "class_method_signature": "AssociationWalker.walkTopics(TopicIF start)", "testcase": false, "constructor": false}, {"identifier": "walkPaths", "parameters": "(TopicIF start)", "modifiers": "public", "return": "Collection<List<TMObjectIF>>", "signature": "Collection<List<TMObjectIF>> walkPaths(TopicIF start)", "full_signature": "public Collection<List<TMObjectIF>> walkPaths(TopicIF start)", "class_method_signature": "AssociationWalker.walkPaths(TopicIF start)", "testcase": false, "constructor": false}, {"identifier": "walk", "parameters": "(TopicIF start, boolean storePaths)", "modifiers": "protected", "return": "WalkerState", "signature": "WalkerState walk(TopicIF start, boolean storePaths)", "full_signature": "protected WalkerState walk(TopicIF start, boolean storePaths)", "class_method_signature": "AssociationWalker.walk(TopicIF start, boolean storePaths)", "testcase": false, "constructor": false}, {"identifier": "doWalk", "parameters": "(TopicIF fromTopic, WalkerState state)", "modifiers": "private", "return": "void", "signature": "void doWalk(TopicIF fromTopic, WalkerState state)", "full_signature": "private void doWalk(TopicIF fromTopic, WalkerState state)", "class_method_signature": "AssociationWalker.doWalk(TopicIF fromTopic, WalkerState state)", "testcase": false, "constructor": false}, {"identifier": "foundLeaf", "parameters": "(WalkerState state)", "modifiers": "protected", "return": "void", "signature": "void foundLeaf(WalkerState state)", "full_signature": "protected void foundLeaf(WalkerState state)", "class_method_signature": "AssociationWalker.foundLeaf(WalkerState state)", "testcase": false, "constructor": false}, {"identifier": "isAssociated", "parameters": "(TopicIF start, TopicIF associated)", "modifiers": "public", "return": "boolean", "signature": "boolean isAssociated(TopicIF start, TopicIF associated)", "full_signature": "public boolean isAssociated(TopicIF start, TopicIF associated)", "class_method_signature": "AssociationWalker.isAssociated(TopicIF start, TopicIF associated)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(AssociationWalkerListenerIF listener)", "modifiers": "public", "return": "void", "signature": "void addListener(AssociationWalkerListenerIF listener)", "full_signature": "public void addListener(AssociationWalkerListenerIF listener)", "class_method_signature": "AssociationWalker.addListener(AssociationWalkerListenerIF listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(AssociationWalkerListenerIF listener)", "modifiers": "public", "return": "void", "signature": "void removeListener(AssociationWalkerListenerIF listener)", "full_signature": "public void removeListener(AssociationWalkerListenerIF listener)", "class_method_signature": "AssociationWalker.removeListener(AssociationWalkerListenerIF listener)", "testcase": false, "constructor": false}, {"identifier": "notifyListeners", "parameters": "(TopicIF leftRolePlayer, AssociationIF assoc, TopicIF rightRolePlayer)", "modifiers": "private", "return": "void", "signature": "void notifyListeners(TopicIF leftRolePlayer, AssociationIF assoc, TopicIF rightRolePlayer)", "full_signature": "private void notifyListeners(TopicIF leftRolePlayer, AssociationIF assoc, TopicIF rightRolePlayer)", "class_method_signature": "AssociationWalker.notifyListeners(TopicIF leftRolePlayer, AssociationIF assoc, TopicIF rightRolePlayer)", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/topicmaps/utils/AssociationWalker.java"}, "focal_method": {"identifier": "walkTopics", "parameters": "(TopicIF start)", "modifiers": "public", "return": "Set<TopicIF>", "body": "public Set<TopicIF> walkTopics(TopicIF start) {\n    WalkerState state = walk(start, false);\n    return Collections.unmodifiableSet(state.closure);\n  }", "signature": "Set<TopicIF> walkTopics(TopicIF start)", "full_signature": "public Set<TopicIF> walkTopics(TopicIF start)", "class_method_signature": "AssociationWalker.walkTopics(TopicIF start)", "testcase": false, "constructor": false, "invocations": ["walk", "unmodifiableSet"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}