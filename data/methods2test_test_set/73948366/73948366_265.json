{"test_class": {"identifier": "YBase64Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "final static String DOUBLE_PADDING = \"LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZrd0V3WUhLb1pJemowQ0FRW\"\n            + \"UlLb1pJemowREFRY0RRZ0FFeSszVEJJL281SzVwUFpQS2RYdk5YSmQ2L1hYYwpoMmNUQTgyRlVlcUVFU2QxUy9nTj\"\n            + \"IrY0daRnhZOWNJYlRCL01vbDFueU9uOHFGQmpkS1JnSUM5MDlnPT0KLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg--\";", "modifier": "final static", "type": "String", "declarator": "DOUBLE_PADDING = \"LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZrd0V3WUhLb1pJemowQ0FRW\"\n            + \"UlLb1pJemowREFRY0RRZ0FFeSszVEJJL281SzVwUFpQS2RYdk5YSmQ2L1hYYwpoMmNUQTgyRlVlcUVFU2QxUy9nTj\"\n            + \"IrY0daRnhZOWNJYlRCL01vbDFueU9uOHFGQmpkS1JnSUM5MDlnPT0KLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg--\"", "var_name": "DOUBLE_PADDING"}, {"original_string": "final static String NO_PADDING = \"LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZrd0V3WUhLb1pJemowQ0FRW\"\n            + \"UlLb1pJemowREFRY0RRZ0FFa2Y5UzN3Q09tQ1BvbklQWTdGZHNHU05WQlAxOQorSlBMV2dST2hOV0pOMW1qZnNLa\"\n            + \"GJvZXZjNHNxeGdlb2xQaERCLzExeVFWSVdpcFlGanlYdFJVT0pnPT0KLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t\";", "modifier": "final static", "type": "String", "declarator": "NO_PADDING = \"LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZrd0V3WUhLb1pJemowQ0FRW\"\n            + \"UlLb1pJemowREFRY0RRZ0FFa2Y5UzN3Q09tQ1BvbklQWTdGZHNHU05WQlAxOQorSlBMV2dST2hOV0pOMW1qZnNLa\"\n            + \"GJvZXZjNHNxeGdlb2xQaERCLzExeVFWSVdpcFlGanlYdFJVT0pnPT0KLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t\"", "var_name": "NO_PADDING"}, {"original_string": "final static String SINGLE_PADDING = \"LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZ3d0RRWUpLb1pJaHZjTkFRRU\"\n            + \"JCUUFEU3dBd1NBSkJBT0lRMlY1NURmQk93VjNBMTZ1andOcStKcCtMTURrNwpKUXZldThMT3J5R1pWc25aQmxFVit\"\n            + \"za05FYTJzNzBHNmM4blBoRVJyZVBtYUQ2cjd5Wk50MGVVQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo-\";", "modifier": "final static", "type": "String", "declarator": "SINGLE_PADDING = \"LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZ3d0RRWUpLb1pJaHZjTkFRRU\"\n            + \"JCUUFEU3dBd1NBSkJBT0lRMlY1NURmQk93VjNBMTZ1andOcStKcCtMTURrNwpKUXZldThMT3J5R1pWc25aQmxFVit\"\n            + \"za05FYTJzNzBHNmM4blBoRVJyZVBtYUQ2cjd5Wk50MGVVQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo-\"", "var_name": "SINGLE_PADDING"}, {"original_string": "final static String SINGLE_PAD_PUBLIC_KEY = \"-----BEGIN PUBLIC KEY-----\\n\"\n            + \"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAOIQ2V55DfBOwV3A16ujwNq+Jp+LMDk7\\n\"\n            + \"JQveu8LOryGZVsnZBlEV+skNEa2s70G6c8nPhERrePmaD6r7yZNt0eUCAwEAAQ==\\n\"\n            + \"-----END PUBLIC KEY-----\\n\";", "modifier": "final static", "type": "String", "declarator": "SINGLE_PAD_PUBLIC_KEY = \"-----BEGIN PUBLIC KEY-----\\n\"\n            + \"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAOIQ2V55DfBOwV3A16ujwNq+Jp+LMDk7\\n\"\n            + \"JQveu8LOryGZVsnZBlEV+skNEa2s70G6c8nPhERrePmaD6r7yZNt0eUCAwEAAQ==\\n\"\n            + \"-----END PUBLIC KEY-----\\n\"", "var_name": "SINGLE_PAD_PUBLIC_KEY"}, {"original_string": "final static String DOUBLE_PAD_PUBLIC_KEY = \"-----BEGIN PUBLIC KEY-----\\n\"\n            + \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEy+3TBI/o5K5pPZPKdXvNXJd6/XXc\\n\"\n            + \"h2cTA82FUeqEESd1S/gN2+cGZFxY9cIbTB/Mol1nyOn8qFBjdKRgIC909g==\\n\"\n            + \"-----END PUBLIC KEY-----\\n\";", "modifier": "final static", "type": "String", "declarator": "DOUBLE_PAD_PUBLIC_KEY = \"-----BEGIN PUBLIC KEY-----\\n\"\n            + \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEy+3TBI/o5K5pPZPKdXvNXJd6/XXc\\n\"\n            + \"h2cTA82FUeqEESd1S/gN2+cGZFxY9cIbTB/Mol1nyOn8qFBjdKRgIC909g==\\n\"\n            + \"-----END PUBLIC KEY-----\\n\"", "var_name": "DOUBLE_PAD_PUBLIC_KEY"}, {"original_string": "final static String NO_PAD_PUBLIC_KEY = \"-----BEGIN PUBLIC KEY-----\\n\"\n            + \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEkf9S3wCOmCPonIPY7FdsGSNVBP19\\n\"\n            + \"+JPLWgROhNWJN1mjfsKhboevc4sqxgeolPhDB/11yQVIWipYFjyXtRUOJg==\\n\"\n            + \"-----END PUBLIC KEY-----\";", "modifier": "final static", "type": "String", "declarator": "NO_PAD_PUBLIC_KEY = \"-----BEGIN PUBLIC KEY-----\\n\"\n            + \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEkf9S3wCOmCPonIPY7FdsGSNVBP19\\n\"\n            + \"+JPLWgROhNWJN1mjfsKhboevc4sqxgeolPhDB/11yQVIWipYFjyXtRUOJg==\\n\"\n            + \"-----END PUBLIC KEY-----\"", "var_name": "NO_PAD_PUBLIC_KEY"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/util/YBase64Test.java"}, "test_case": {"identifier": "testEncodeDoublePaddingCharacter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncodeDoublePaddingCharacter() {\n        byte[] data = YBase64.encode(DOUBLE_PAD_PUBLIC_KEY.getBytes(StandardCharsets.UTF_8));\n        assertEquals(new String(data, StandardCharsets.UTF_8), DOUBLE_PADDING);\n    }", "signature": "void testEncodeDoublePaddingCharacter()", "full_signature": "@Test public void testEncodeDoublePaddingCharacter()", "class_method_signature": "YBase64Test.testEncodeDoublePaddingCharacter()", "testcase": true, "constructor": false, "invocations": ["encode", "getBytes", "assertEquals"]}, "focal_class": {"identifier": "YBase64", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final byte[] Y64_ARRAY = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n            'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n            'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3',\n            '4', '5', '6', '7', '8', '9', '.', '_'\n    };", "modifier": "private static final", "type": "byte[]", "declarator": "Y64_ARRAY = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n            'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n            'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3',\n            '4', '5', '6', '7', '8', '9', '.', '_'\n    }", "var_name": "Y64_ARRAY"}, {"original_string": "public static final byte[] Y64_DECODE_ARRAY = {\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xff, 62, (byte) 0xee, 52,\n            53, 54, 55, 56, 57, 58, 59, 60, 61, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n            17, 18, 19, 20, 21, 22, 23, 24, 25, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, 63,\n            (byte) 0xee, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\n            47, 48, 49, 50, 51, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee\n    };", "modifier": "public static final", "type": "byte[]", "declarator": "Y64_DECODE_ARRAY = {\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xff, 62, (byte) 0xee, 52,\n            53, 54, 55, 56, 57, 58, 59, 60, 61, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n            17, 18, 19, 20, 21, 22, 23, 24, 25, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, 63,\n            (byte) 0xee, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\n            47, 48, 49, 50, 51, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee,\n            (byte) 0xee, (byte) 0xee, (byte) 0xee, (byte) 0xee\n    }", "var_name": "Y64_DECODE_ARRAY"}], "methods": [{"identifier": "decodeByte", "parameters": "(int index)", "modifiers": "private static", "return": "byte", "signature": "byte decodeByte(int index)", "full_signature": "private static byte decodeByte(int index)", "class_method_signature": "YBase64.decodeByte(int index)", "testcase": false, "constructor": false}, {"identifier": "encode1", "parameters": "(byte ba)", "modifiers": "private static", "return": "byte", "signature": "byte encode1(byte ba)", "full_signature": "private static byte encode1(byte ba)", "class_method_signature": "YBase64.encode1(byte ba)", "testcase": false, "constructor": false}, {"identifier": "encode2", "parameters": "(byte ba, byte bb)", "modifiers": "private static", "return": "byte", "signature": "byte encode2(byte ba, byte bb)", "full_signature": "private static byte encode2(byte ba, byte bb)", "class_method_signature": "YBase64.encode2(byte ba, byte bb)", "testcase": false, "constructor": false}, {"identifier": "encode3", "parameters": "(byte bb, byte bc)", "modifiers": "private static", "return": "byte", "signature": "byte encode3(byte bb, byte bc)", "full_signature": "private static byte encode3(byte bb, byte bc)", "class_method_signature": "YBase64.encode3(byte bb, byte bc)", "testcase": false, "constructor": false}, {"identifier": "encode4", "parameters": "(byte bc)", "modifiers": "private static", "return": "byte", "signature": "byte encode4(byte bc)", "full_signature": "private static byte encode4(byte bc)", "class_method_signature": "YBase64.encode4(byte bc)", "testcase": false, "constructor": false}, {"identifier": "decode1", "parameters": "(byte a, byte b)", "modifiers": "private static", "return": "byte", "signature": "byte decode1(byte a, byte b)", "full_signature": "private static byte decode1(byte a, byte b)", "class_method_signature": "YBase64.decode1(byte a, byte b)", "testcase": false, "constructor": false}, {"identifier": "decode2", "parameters": "(byte b, byte c)", "modifiers": "private static", "return": "byte", "signature": "byte decode2(byte b, byte c)", "full_signature": "private static byte decode2(byte b, byte c)", "class_method_signature": "YBase64.decode2(byte b, byte c)", "testcase": false, "constructor": false}, {"identifier": "decode3", "parameters": "(byte c, byte d)", "modifiers": "private static", "return": "byte", "signature": "byte decode3(byte c, byte d)", "full_signature": "private static byte decode3(byte c, byte d)", "class_method_signature": "YBase64.decode3(byte c, byte d)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(byte[] inBytes)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decode(byte[] inBytes)", "full_signature": "public static byte[] decode(byte[] inBytes)", "class_method_signature": "YBase64.decode(byte[] inBytes)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(byte[] inBytes)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encode(byte[] inBytes)", "full_signature": "public static byte[] encode(byte[] inBytes)", "class_method_signature": "YBase64.encode(byte[] inBytes)", "testcase": false, "constructor": false}, {"identifier": "y64decodeLen", "parameters": "(int len)", "modifiers": "static", "return": "int", "signature": "int y64decodeLen(int len)", "full_signature": "static int y64decodeLen(int len)", "class_method_signature": "YBase64.y64decodeLen(int len)", "testcase": false, "constructor": false}, {"identifier": "y64encodeLen", "parameters": "(int len)", "modifiers": "static", "return": "int", "signature": "int y64encodeLen(int len)", "full_signature": "static int y64encodeLen(int len)", "class_method_signature": "YBase64.y64encodeLen(int len)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/YBase64.java"}, "focal_method": {"identifier": "encode", "parameters": "(byte[] inBytes)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] encode(byte[] inBytes) {\n        \n        if (null == inBytes) {\n            throw new NullPointerException(\"input buffer was null\");\n        }\n\n        /* Sanity check, should always be padded at the end. */\n        if (inBytes.length < 1) {\n            return new byte[] {};\n        }\n\n        int len = inBytes.length;\n        int encodeLen = y64encodeLen(len);\n        byte[] out = new byte[encodeLen];\n        int j = 0;\n        int tlen;\n\n        for (int i = 0; i < len; i += 3) {\n\n            tlen = (len - i);\n            if (tlen > 3) {\n                tlen = 3;\n            }\n\n            byte a;\n            byte b;\n            byte c;\n\n            if (tlen == 1) {\n                a = inBytes[i];\n                b = 0;\n                // enc1: Y64_array[(a >> 2)];\n                out[j++] = encode1(a);\n                // enc2: Y64_array[((a << 4) & 0x30) + (b >> 4)];\n                out[j++] = encode2(a, b);\n                out[j++] = '-';\n                out[j++] = '-';\n            } else if (tlen == 2) {\n                a = inBytes[i];\n                b = inBytes[i + 1];\n                c = 0;\n                // enc1: Y64_array[(a >> 2)];\n                out[j++] = encode1(a);\n                // enc2: Y64_array[((a << 4) & 0x30) + (b >> 4)];\n                out[j++] = encode2(a, b);\n                // enc3: Y64_array[((b << 2) & 0x3C) + (c >> 6)];\n                out[j++] = encode3(b, c);\n                out[j++] = '-';\n            } else {\n                a = inBytes[i];\n                b = inBytes[i + 1];\n                c = inBytes[i + 2];\n                // enc1: Y64_array[(a >> 2)];\n                out[j++] = encode1(a);\n                // enc2: Y64_array[((a << 4) & 0x30) + (b >> 4)];\n                out[j++] = encode2(a, b);\n                // enc3: Y64_array[((b << 2) & 0x3C) + (c >> 6)];\n                out[j++] = encode3(b, c);\n                // enc4: Y64_array[c & 0x3F];\n                out[j++] = encode4(c);\n            }\n        }\n\n        return Arrays.copyOf(out, j);\n    }", "signature": "byte[] encode(byte[] inBytes)", "full_signature": "public static byte[] encode(byte[] inBytes)", "class_method_signature": "YBase64.encode(byte[] inBytes)", "testcase": false, "constructor": false, "invocations": ["y64encodeLen", "encode1", "encode2", "encode1", "encode2", "encode3", "encode1", "encode2", "encode3", "encode4", "copyOf"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}