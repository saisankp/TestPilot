{"test_class": {"identifier": "OrderWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OrderWriter orderWriter;", "modifier": "private", "type": "OrderWriter", "declarator": "orderWriter", "var_name": "orderWriter"}, {"original_string": "private StringWriter body;", "modifier": "private", "type": "StringWriter", "declarator": "body", "var_name": "body"}, {"original_string": "private QueryStatement query;", "modifier": "private", "type": "QueryStatement", "declarator": "query", "var_name": "query"}], "file": "CoreFeatures/Database-postgresql/PostgresSchema/src/test/java/info/smart_tools/smartactors/database_postgresql/postgres_schema/search/OrderWriterTest.java"}, "test_case": {"identifier": "should_WritesORDERClauseIntoQueryStatement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_WritesORDERClauseIntoQueryStatement() throws Exception {\n        IObject criteriaMessage = new DSObject(\"{ \\\"sort\\\": [ { \\\"testField\\\": \\\"desc\\\" }, { \\\"anotherTestField\\\": \\\"asc\\\" } ] }\");\n        List<IObject> sortMessage = (List<IObject>) criteriaMessage.getValue(new FieldName(\"sort\"));\n        orderWriter.write(query, sortMessage);\n        assertEquals(\"ORDER BY(document#>'{testField}')DESC,(document#>'{anotherTestField}')ASC\", body.toString());\n        verify(query, times(0)).pushParameterSetter(any());\n    }", "signature": "void should_WritesORDERClauseIntoQueryStatement()", "full_signature": "@Test public void should_WritesORDERClauseIntoQueryStatement()", "class_method_signature": "OrderWriterTest.should_WritesORDERClauseIntoQueryStatement()", "testcase": true, "constructor": false, "invocations": ["getValue", "write", "assertEquals", "toString", "pushParameterSetter", "verify", "times", "any"]}, "focal_class": {"identifier": "OrderWriter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "write", "parameters": "(QueryStatement queryStatement, List<IObject> sortMessage)", "modifiers": "public", "return": "void", "signature": "void write(QueryStatement queryStatement, List<IObject> sortMessage)", "full_signature": "public void write(QueryStatement queryStatement, List<IObject> sortMessage)", "class_method_signature": "OrderWriter.write(QueryStatement queryStatement, List<IObject> sortMessage)", "testcase": false, "constructor": false}, {"identifier": "resolveSortDirection", "parameters": "(Object direction)", "modifiers": "private", "return": "String", "signature": "String resolveSortDirection(Object direction)", "full_signature": "private String resolveSortDirection(Object direction)", "class_method_signature": "OrderWriter.resolveSortDirection(Object direction)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database-postgresql/PostgresSchema/src/main/java/info/smart_tools/smartactors/database_postgresql/postgres_schema/search/OrderWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(QueryStatement queryStatement, List<IObject> sortMessage)", "modifiers": "public", "return": "void", "body": "public void write(QueryStatement queryStatement, List<IObject> sortMessage) throws QueryBuildException {\n        try {\n            Writer writer = queryStatement.getBodyWriter();\n            writer.write(\"ORDER BY\");\n\n            Iterator<IObject> sortObjects = sortMessage.iterator();\n            while (sortObjects.hasNext()) {\n                IObject sortObject = sortObjects.next();\n                Iterator<Map.Entry<IFieldName, Object>> sortEntries = sortObject.iterator();\n                while (sortEntries.hasNext()) {\n                    Map.Entry<IFieldName, Object> entry = sortEntries.next();\n                    FieldPath fieldPath = PostgresFieldPath.fromString(String.valueOf(entry.getKey()));     // TODO: convert using IOC\n                    String sortDirection = resolveSortDirection(entry.getValue());      // TODO: convert using IOC\n                    writer.write(\"(\");\n                    writer.write(fieldPath.toSQL());\n                    writer.write(\")\");\n                    writer.write(sortDirection);\n                    if (sortObjects.hasNext() || sortEntries.hasNext()) {\n                        writer.write(\",\");\n                    }\n                }\n            }\n        } catch (QueryBuildException qbe) {\n            throw qbe;\n        } catch (Exception e) {\n            throw new QueryBuildException(\"Error while writing ORDER BY clause\", e);\n        }\n    }", "signature": "void write(QueryStatement queryStatement, List<IObject> sortMessage)", "full_signature": "public void write(QueryStatement queryStatement, List<IObject> sortMessage)", "class_method_signature": "OrderWriter.write(QueryStatement queryStatement, List<IObject> sortMessage)", "testcase": false, "constructor": false, "invocations": ["getBodyWriter", "write", "iterator", "hasNext", "next", "iterator", "hasNext", "next", "fromString", "valueOf", "getKey", "resolveSortDirection", "getValue", "write", "write", "toSQL", "write", "write", "hasNext", "hasNext", "write"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}