{"test_class": {"identifier": "MathUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "trading-common/src/test/java/fr/ymanvieu/trading/common/util/MathUtilsTest.java"}, "test_case": {"identifier": "testDivide", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDivide() {\n\t\tassertThat(MathUtils.divide(new BigDecimal(\"1.2\"), new BigDecimal(\"0.7\"))).isEqualByComparingTo(\"1.7142857143\");\n\t}", "signature": "void testDivide()", "full_signature": "@Test public void testDivide()", "class_method_signature": "MathUtilsTest.testDivide()", "testcase": true, "constructor": false, "invocations": ["isEqualByComparingTo", "assertThat", "divide"]}, "focal_class": {"identifier": "MathUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final BigDecimal HUNDRED = new BigDecimal(\"100\");", "modifier": "private static final", "type": "BigDecimal", "declarator": "HUNDRED = new BigDecimal(\"100\")", "var_name": "HUNDRED"}, {"original_string": "private static final int SCALE = 10;", "modifier": "private static final", "type": "int", "declarator": "SCALE = 10", "var_name": "SCALE"}], "methods": [{"identifier": "divide", "parameters": "(BigDecimal dividend, BigDecimal divisor)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal divide(BigDecimal dividend, BigDecimal divisor)", "full_signature": "public static BigDecimal divide(BigDecimal dividend, BigDecimal divisor)", "class_method_signature": "MathUtils.divide(BigDecimal dividend, BigDecimal divisor)", "testcase": false, "constructor": false}, {"identifier": "invert", "parameters": "(BigDecimal d)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal invert(BigDecimal d)", "full_signature": "public static BigDecimal invert(BigDecimal d)", "class_method_signature": "MathUtils.invert(BigDecimal d)", "testcase": false, "constructor": false}, {"identifier": "percentChange", "parameters": "(BigDecimal oldValue, BigDecimal newValue)", "modifiers": "public static", "return": "double", "signature": "double percentChange(BigDecimal oldValue, BigDecimal newValue)", "full_signature": "public static double percentChange(BigDecimal oldValue, BigDecimal newValue)", "class_method_signature": "MathUtils.percentChange(BigDecimal oldValue, BigDecimal newValue)", "testcase": false, "constructor": false}, {"identifier": "equalsByComparingTo", "parameters": "(BigDecimal bd1, BigDecimal bd2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsByComparingTo(BigDecimal bd1, BigDecimal bd2)", "full_signature": "public static boolean equalsByComparingTo(BigDecimal bd1, BigDecimal bd2)", "class_method_signature": "MathUtils.equalsByComparingTo(BigDecimal bd1, BigDecimal bd2)", "testcase": false, "constructor": false}], "file": "trading-common/src/main/java/fr/ymanvieu/trading/common/util/MathUtils.java"}, "focal_method": {"identifier": "divide", "parameters": "(BigDecimal dividend, BigDecimal divisor)", "modifiers": "public static", "return": "BigDecimal", "body": "public static BigDecimal divide(BigDecimal dividend, BigDecimal divisor) {\n\t\treturn dividend.divide(divisor, SCALE, RoundingMode.HALF_EVEN);\n\t}", "signature": "BigDecimal divide(BigDecimal dividend, BigDecimal divisor)", "full_signature": "public static BigDecimal divide(BigDecimal dividend, BigDecimal divisor)", "class_method_signature": "MathUtils.divide(BigDecimal dividend, BigDecimal divisor)", "testcase": false, "constructor": false, "invocations": ["divide"]}, "repository": {"repo_id": 51700398, "url": "https://github.com/ymanvieu/trading", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 988, "license": "licensed"}}