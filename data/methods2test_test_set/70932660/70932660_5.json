{"test_class": {"identifier": "NvaMonitorTest", "superclass": "", "interfaces": "", "fields": [], "file": "nvadaemon/src/test/java/com/microsoft/azure/practices/nvadaemon/NvaMonitorTest.java"}, "test_case": {"identifier": "testMonitorValidConstructor", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testMonitorValidConstructor() throws NvaMonitor.NvaMonitorException {\n        List<MonitorConfiguration> monitors = new ArrayList<>();\n        Map<String, Object> settings = new HashMap<>();\n        settings.put(\"constructorShouldThrowException\", \"false\");\n        settings.put(\"initShouldCauseInterrupt\", \"false\");\n        monitors.add(\n            new MonitorConfiguration(\n                \"com.microsoft.azure.practices.nvadaemon.NvaMonitorTest$MonitorValidConstructor\",\n                settings));\n        DaemonConfiguration daemonConfiguration = new DaemonConfiguration(monitors, null);\n        NvaMonitor nvaMonitor = new NvaMonitor(daemonConfiguration);\n        nvaMonitor.start();\n    }", "signature": "void testMonitorValidConstructor()", "full_signature": "@Test void testMonitorValidConstructor()", "class_method_signature": "NvaMonitorTest.testMonitorValidConstructor()", "testcase": true, "constructor": false, "invocations": ["put", "put", "add", "start"]}, "focal_class": {"identifier": "NvaMonitor", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(NvaMonitor.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(NvaMonitor.class)", "var_name": "log"}, {"original_string": "private final DaemonConfiguration configuration;", "modifier": "private final", "type": "DaemonConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final ExecutorService executorService;", "modifier": "private final", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private final ReentrantLock lock = new ReentrantLock();", "modifier": "private final", "type": "ReentrantLock", "declarator": "lock = new ReentrantLock()", "var_name": "lock"}, {"original_string": "private final Condition shutdown = lock.newCondition();", "modifier": "private final", "type": "Condition", "declarator": "shutdown = lock.newCondition()", "var_name": "shutdown"}, {"original_string": "private volatile boolean isRunning = false;", "modifier": "private volatile", "type": "boolean", "declarator": "isRunning = false", "var_name": "isRunning"}], "methods": [{"identifier": "NvaMonitor", "parameters": "(DaemonConfiguration configuration)", "modifiers": "public", "return": "", "signature": " NvaMonitor(DaemonConfiguration configuration)", "full_signature": "public  NvaMonitor(DaemonConfiguration configuration)", "class_method_signature": "NvaMonitor.NvaMonitor(DaemonConfiguration configuration)", "testcase": false, "constructor": true}, {"identifier": "createMonitorCallable", "parameters": "(MonitorConfiguration monitorConfiguration)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Callable<Void>", "signature": "Callable<Void> createMonitorCallable(MonitorConfiguration monitorConfiguration)", "full_signature": "@SuppressWarnings(\"unchecked\") private Callable<Void> createMonitorCallable(MonitorConfiguration monitorConfiguration)", "class_method_signature": "NvaMonitor.createMonitorCallable(MonitorConfiguration monitorConfiguration)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public synchronized", "return": "Future<Void>", "signature": "Future<Void> start()", "full_signature": "public synchronized Future<Void> start()", "class_method_signature": "NvaMonitor.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void stop()", "full_signature": "public synchronized void stop()", "class_method_signature": "NvaMonitor.stop()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void close()", "full_signature": "@Override public synchronized void close()", "class_method_signature": "NvaMonitor.close()", "testcase": false, "constructor": false}], "file": "nvadaemon/src/main/java/com/microsoft/azure/practices/nvadaemon/NvaMonitor.java"}, "focal_method": {"identifier": "start", "parameters": "()", "modifiers": "public synchronized", "return": "Future<Void>", "body": "public synchronized Future<Void> start() throws NvaMonitorException {\n        //log.debug(\"executorService.isShutdown(): \" + executorService.isShutdown());\n        //Preconditions.checkState(!executorService.isShutdown(), \"Already started\");\n        Preconditions.checkState(!this.isRunning, \"Already started\");\n        // We need to eventually support multiple monitors, but for now, just grab the\n        // first one.\n        MonitorConfiguration monitorConfiguration =\n            this.configuration.getMonitors().get(0);\n        Callable<Void> monitor = createMonitorCallable(monitorConfiguration);\n        isRunning = true;\n        Future<Void> task = executorService.submit(\n            monitor\n        );\n\n        return task;\n    }", "signature": "Future<Void> start()", "full_signature": "public synchronized Future<Void> start()", "class_method_signature": "NvaMonitor.start()", "testcase": false, "constructor": false, "invocations": ["checkState", "get", "getMonitors", "createMonitorCallable", "submit"]}, "repository": {"repo_id": 70932660, "url": "https://github.com/mspnp/ha-nva", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 27, "size": 38331, "license": "licensed"}}