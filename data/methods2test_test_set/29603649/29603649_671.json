{"test_class": {"identifier": "FilePathReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SHORT_PATH = \"MOCK_SHORT_PATH_WITH_FILE_NAME\";", "modifier": "private static final", "type": "String", "declarator": "SHORT_PATH = \"MOCK_SHORT_PATH_WITH_FILE_NAME\"", "var_name": "SHORT_PATH"}, {"original_string": "private static final String PATH = \"MOCK_PATH\";", "modifier": "private static final", "type": "String", "declarator": "PATH = \"MOCK_PATH\"", "var_name": "PATH"}, {"original_string": "@Mock\n    private FileFactory fileFactory;", "modifier": "@Mock\n    private", "type": "FileFactory", "declarator": "fileFactory", "var_name": "fileFactory"}, {"original_string": "@Mock\n    private File file;", "modifier": "@Mock\n    private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "@Mock\n    private Collection<String> filePaths;", "modifier": "@Mock\n    private", "type": "Collection<String>", "declarator": "filePaths", "var_name": "filePaths"}, {"original_string": "@Mock\n    private FileUtils fileUtils;", "modifier": "@Mock\n    private", "type": "FileUtils", "declarator": "fileUtils", "var_name": "fileUtils"}, {"original_string": "@InjectMocks\n    private FilePathReader underTest;", "modifier": "@InjectMocks\n    private", "type": "FilePathReader", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/test/java/com/epam/wilma/stubconfig/initializer/template/FilePathReaderTest.java"}, "test_case": {"identifier": "testGetShortFilePathsShouldReturnListWithOneElementWhenTargetFolderContainsOneFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetShortFilePathsShouldReturnListWithOneElementWhenTargetFolderContainsOneFile() {\n        //GIVEN\n        given(fileFactory.createFile(PATH)).willReturn(file);\n        List<File> fileList = new ArrayList<File>();\n        fileList.add(file);\n        given(fileUtils.listFiles(file)).willReturn(fileList);\n        given(file.toString()).willReturn(PATH + \"\\\\\" + SHORT_PATH);\n        //WHEN\n        List<String> actual = underTest.getShortFilePaths(PATH);\n        //THEN\n        Assert.assertEquals(actual.get(0), SHORT_PATH);\n    }", "signature": "void testGetShortFilePathsShouldReturnListWithOneElementWhenTargetFolderContainsOneFile()", "full_signature": "@Test public void testGetShortFilePathsShouldReturnListWithOneElementWhenTargetFolderContainsOneFile()", "class_method_signature": "FilePathReaderTest.testGetShortFilePathsShouldReturnListWithOneElementWhenTargetFolderContainsOneFile()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "createFile", "add", "willReturn", "given", "listFiles", "willReturn", "given", "toString", "getShortFilePaths", "assertEquals", "get"]}, "focal_class": {"identifier": "FilePathReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private FileFactory fileFactory;", "modifier": "@Autowired\n    private", "type": "FileFactory", "declarator": "fileFactory", "var_name": "fileFactory"}, {"original_string": "@Autowired\n    private FileUtils fileUtils;", "modifier": "@Autowired\n    private", "type": "FileUtils", "declarator": "fileUtils", "var_name": "fileUtils"}], "methods": [{"identifier": "getFilePaths", "parameters": "(final String path)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getFilePaths(final String path)", "full_signature": "public List<String> getFilePaths(final String path)", "class_method_signature": "FilePathReader.getFilePaths(final String path)", "testcase": false, "constructor": false}, {"identifier": "getShortFilePaths", "parameters": "(final String path)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getShortFilePaths(final String path)", "full_signature": "public List<String> getShortFilePaths(final String path)", "class_method_signature": "FilePathReader.getShortFilePaths(final String path)", "testcase": false, "constructor": false}, {"identifier": "getSimpleName", "parameters": "(final String path, final File file)", "modifiers": "private", "return": "String", "signature": "String getSimpleName(final String path, final File file)", "full_signature": "private String getSimpleName(final String path, final File file)", "class_method_signature": "FilePathReader.getSimpleName(final String path, final File file)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/main/java/com/epam/wilma/stubconfig/initializer/template/FilePathReader.java"}, "focal_method": {"identifier": "getShortFilePaths", "parameters": "(final String path)", "modifiers": "public", "return": "List<String>", "body": "public List<String> getShortFilePaths(final String path) {\n        List<String> result = new ArrayList<>();\n        File folder = fileFactory.createFile(path);\n        Collection<File> files = fileUtils.listFiles(folder);\n        for (File file : files) {\n            result.add(getSimpleName(path, file));\n        }\n        return result;\n    }", "signature": "List<String> getShortFilePaths(final String path)", "full_signature": "public List<String> getShortFilePaths(final String path)", "class_method_signature": "FilePathReader.getShortFilePaths(final String path)", "testcase": false, "constructor": false, "invocations": ["createFile", "listFiles", "add", "getSimpleName"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}