{"test_class": {"identifier": "JcrPackageManagerImplTest", "superclass": "extends IntegrationTestBase", "interfaces": "", "fields": [{"original_string": "private List<String> visitedPaths = new LinkedList<String>();", "modifier": "private", "type": "List<String>", "declarator": "visitedPaths = new LinkedList<String>()", "var_name": "visitedPaths"}], "file": "vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/impl/JcrPackageManagerImplTest.java"}, "test_case": {"identifier": "testGetPackageRootNoRootAccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPackageRootNoRootAccess() throws Exception {\n        Node packageRoot = packMgr.getPackageRoot();\n\n        // TODO: maybe rather change the setup of the test-base to not assume that everyone has full read-access\n        AccessControlManager acMgr = admin.getAccessControlManager();\n        JackrabbitAccessControlList acl = AccessControlUtils.getAccessControlList(acMgr, \"/\");\n        acMgr.removePolicy(acl.getPath(), acl);\n\n        AccessControlUtils.getAccessControlList(acMgr, \"/etc/packages\");\n        AccessControlUtils.allow(packageRoot, org.apache.jackrabbit.oak.spi.security.principal.EveryonePrincipal.NAME, javax.jcr.security.Privilege.JCR_READ);\n\n        admin.save();\n\n        Session anonymous = repository.login(new GuestCredentials());\n        try {\n            assertFalse(anonymous.nodeExists(\"/\"));\n            assertFalse(anonymous.nodeExists(\"/etc\"));\n            assertTrue(anonymous.nodeExists(\"/etc/packages\"));\n\n            JcrPackageManagerImpl jcrPackageManager = new JcrPackageManagerImpl(anonymous, new String[0]);\n            jcrPackageManager.getPackageRoot(false);\n        } finally {\n            anonymous.logout();\n        }\n    }", "signature": "void testGetPackageRootNoRootAccess()", "full_signature": "@Test public void testGetPackageRootNoRootAccess()", "class_method_signature": "JcrPackageManagerImplTest.testGetPackageRootNoRootAccess()", "testcase": true, "constructor": false, "invocations": ["getPackageRoot", "getAccessControlManager", "getAccessControlList", "removePolicy", "getPath", "getAccessControlList", "allow", "save", "login", "assertFalse", "nodeExists", "assertFalse", "nodeExists", "assertTrue", "nodeExists", "getPackageRoot", "logout"]}, "focal_class": {"identifier": "JcrPackageManagerImpl", "superclass": "extends PackageManagerImpl", "interfaces": "implements JcrPackageManager", "fields": [{"original_string": "public final static String ARCHIVE_PACKAGE_ROOT_PATH = \"/jcr_root/etc/packages\";", "modifier": "public final static", "type": "String", "declarator": "ARCHIVE_PACKAGE_ROOT_PATH = \"/jcr_root/etc/packages\"", "var_name": "ARCHIVE_PACKAGE_ROOT_PATH"}, {"original_string": "private final JcrPackageRegistry registry;", "modifier": "private final", "type": "JcrPackageRegistry", "declarator": "registry", "var_name": "registry"}], "methods": [{"identifier": "JcrPackageManagerImpl", "parameters": "(@NotNull Session session, @Nullable String[] roots)", "modifiers": "public", "return": "", "signature": " JcrPackageManagerImpl(@NotNull Session session, @Nullable String[] roots)", "full_signature": "public  JcrPackageManagerImpl(@NotNull Session session, @Nullable String[] roots)", "class_method_signature": "JcrPackageManagerImpl.JcrPackageManagerImpl(@NotNull Session session, @Nullable String[] roots)", "testcase": false, "constructor": true}, {"identifier": "JcrPackageManagerImpl", "parameters": "(@NotNull Session session, @Nullable String[] roots, @Nullable String[] authIdsForHookExecution, @Nullable String[] authIdsForRootInstallation)", "modifiers": "public", "return": "", "signature": " JcrPackageManagerImpl(@NotNull Session session, @Nullable String[] roots, @Nullable String[] authIdsForHookExecution, @Nullable String[] authIdsForRootInstallation)", "full_signature": "public  JcrPackageManagerImpl(@NotNull Session session, @Nullable String[] roots, @Nullable String[] authIdsForHookExecution, @Nullable String[] authIdsForRootInstallation)", "class_method_signature": "JcrPackageManagerImpl.JcrPackageManagerImpl(@NotNull Session session, @Nullable String[] roots, @Nullable String[] authIdsForHookExecution, @Nullable String[] authIdsForRootInstallation)", "testcase": false, "constructor": true}, {"identifier": "JcrPackageManagerImpl", "parameters": "(JcrPackageRegistry registry)", "modifiers": "protected", "return": "", "signature": " JcrPackageManagerImpl(JcrPackageRegistry registry)", "full_signature": "protected  JcrPackageManagerImpl(JcrPackageRegistry registry)", "class_method_signature": "JcrPackageManagerImpl.JcrPackageManagerImpl(JcrPackageRegistry registry)", "testcase": false, "constructor": true}, {"identifier": "unwrapRepositoryException", "parameters": "(Exception e)", "modifiers": "private", "return": "RepositoryException", "signature": "RepositoryException unwrapRepositoryException(Exception e)", "full_signature": "private RepositoryException unwrapRepositoryException(Exception e)", "class_method_signature": "JcrPackageManagerImpl.unwrapRepositoryException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "getRegistry", "parameters": "()", "modifiers": "public", "return": "PackageRegistry", "signature": "PackageRegistry getRegistry()", "full_signature": "public PackageRegistry getRegistry()", "class_method_signature": "JcrPackageManagerImpl.getRegistry()", "testcase": false, "constructor": false}, {"identifier": "getInternalRegistry", "parameters": "()", "modifiers": "public", "return": "JcrPackageRegistry", "signature": "JcrPackageRegistry getInternalRegistry()", "full_signature": "public JcrPackageRegistry getInternalRegistry()", "class_method_signature": "JcrPackageManagerImpl.getInternalRegistry()", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(PackageId id)", "modifiers": "@Override public", "return": "JcrPackage", "signature": "JcrPackage open(PackageId id)", "full_signature": "@Override public JcrPackage open(PackageId id)", "class_method_signature": "JcrPackageManagerImpl.open(PackageId id)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(Node node)", "modifiers": "@Override public", "return": "JcrPackage", "signature": "JcrPackage open(Node node)", "full_signature": "@Override public JcrPackage open(Node node)", "class_method_signature": "JcrPackageManagerImpl.open(Node node)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(Node node, boolean allowInvalid)", "modifiers": "@Override public", "return": "JcrPackage", "signature": "JcrPackage open(Node node, boolean allowInvalid)", "full_signature": "@Override public JcrPackage open(Node node, boolean allowInvalid)", "class_method_signature": "JcrPackageManagerImpl.open(Node node, boolean allowInvalid)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(Dependency dependency, boolean onlyInstalled)", "modifiers": "@Override public", "return": "PackageId", "signature": "PackageId resolve(Dependency dependency, boolean onlyInstalled)", "full_signature": "@Override public PackageId resolve(Dependency dependency, boolean onlyInstalled)", "class_method_signature": "JcrPackageManagerImpl.resolve(Dependency dependency, boolean onlyInstalled)", "testcase": false, "constructor": false}, {"identifier": "usage", "parameters": "(PackageId id)", "modifiers": "@Override public", "return": "PackageId[]", "signature": "PackageId[] usage(PackageId id)", "full_signature": "@Override public PackageId[] usage(PackageId id)", "class_method_signature": "JcrPackageManagerImpl.usage(PackageId id)", "testcase": false, "constructor": false}, {"identifier": "upload", "parameters": "(InputStream in, boolean replace)", "modifiers": "@Override public", "return": "JcrPackage", "signature": "JcrPackage upload(InputStream in, boolean replace)", "full_signature": "@Override public JcrPackage upload(InputStream in, boolean replace)", "class_method_signature": "JcrPackageManagerImpl.upload(InputStream in, boolean replace)", "testcase": false, "constructor": false}, {"identifier": "upload", "parameters": "(InputStream in, boolean replace, boolean strict)", "modifiers": "@Override public", "return": "JcrPackage", "signature": "JcrPackage upload(InputStream in, boolean replace, boolean strict)", "full_signature": "@Override public JcrPackage upload(InputStream in, boolean replace, boolean strict)", "class_method_signature": "JcrPackageManagerImpl.upload(InputStream in, boolean replace, boolean strict)", "testcase": false, "constructor": false}, {"identifier": "extract", "parameters": "(@NotNull Archive archive, @NotNull ImportOptions options, boolean replace)", "modifiers": "@NotNull @Override public", "return": "PackageId[]", "signature": "PackageId[] extract(@NotNull Archive archive, @NotNull ImportOptions options, boolean replace)", "full_signature": "@NotNull @Override public PackageId[] extract(@NotNull Archive archive, @NotNull ImportOptions options, boolean replace)", "class_method_signature": "JcrPackageManagerImpl.extract(@NotNull Archive archive, @NotNull ImportOptions options, boolean replace)", "testcase": false, "constructor": false}, {"identifier": "upload", "parameters": "(File file, boolean isTmpFile, boolean replace, String nameHint)", "modifiers": "@Override public", "return": "JcrPackage", "signature": "JcrPackage upload(File file, boolean isTmpFile, boolean replace, String nameHint)", "full_signature": "@Override public JcrPackage upload(File file, boolean isTmpFile, boolean replace, String nameHint)", "class_method_signature": "JcrPackageManagerImpl.upload(File file, boolean isTmpFile, boolean replace, String nameHint)", "testcase": false, "constructor": false}, {"identifier": "upload", "parameters": "(File file, boolean isTmpFile, boolean replace, String nameHint, boolean strict)", "modifiers": "@Override public", "return": "JcrPackage", "signature": "JcrPackage upload(File file, boolean isTmpFile, boolean replace, String nameHint, boolean strict)", "full_signature": "@Override public JcrPackage upload(File file, boolean isTmpFile, boolean replace, String nameHint, boolean strict)", "class_method_signature": "JcrPackageManagerImpl.upload(File file, boolean isTmpFile, boolean replace, String nameHint, boolean strict)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Node folder, String name)", "modifiers": "@Override public", "return": "JcrPackage", "signature": "JcrPackage create(Node folder, String name)", "full_signature": "@Override public JcrPackage create(Node folder, String name)", "class_method_signature": "JcrPackageManagerImpl.create(Node folder, String name)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String group, String name)", "modifiers": "@Override public", "return": "JcrPackage", "signature": "JcrPackage create(String group, String name)", "full_signature": "@Override public JcrPackage create(String group, String name)", "class_method_signature": "JcrPackageManagerImpl.create(String group, String name)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String group, String name, String version)", "modifiers": "@Override public", "return": "JcrPackage", "signature": "JcrPackage create(String group, String name, String version)", "full_signature": "@Override public JcrPackage create(String group, String name, String version)", "class_method_signature": "JcrPackageManagerImpl.create(String group, String name, String version)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(JcrPackage pack)", "modifiers": "@Override public", "return": "void", "signature": "void remove(JcrPackage pack)", "full_signature": "@Override public void remove(JcrPackage pack)", "class_method_signature": "JcrPackageManagerImpl.remove(JcrPackage pack)", "testcase": false, "constructor": false}, {"identifier": "rename", "parameters": "(JcrPackage pack, String group, String name)", "modifiers": "@Override public", "return": "JcrPackage", "signature": "JcrPackage rename(JcrPackage pack, String group, String name)", "full_signature": "@Override public JcrPackage rename(JcrPackage pack, String group, String name)", "class_method_signature": "JcrPackageManagerImpl.rename(JcrPackage pack, String group, String name)", "testcase": false, "constructor": false}, {"identifier": "rename", "parameters": "(JcrPackage pack, String group, String name, String version)", "modifiers": "@Override public", "return": "JcrPackage", "signature": "JcrPackage rename(JcrPackage pack, String group, String name, String version)", "full_signature": "@Override public JcrPackage rename(JcrPackage pack, String group, String name, String version)", "class_method_signature": "JcrPackageManagerImpl.rename(JcrPackage pack, String group, String name, String version)", "testcase": false, "constructor": false}, {"identifier": "assemble", "parameters": "(JcrPackage pack, ProgressTrackerListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void assemble(JcrPackage pack, ProgressTrackerListener listener)", "full_signature": "@Override public void assemble(JcrPackage pack, ProgressTrackerListener listener)", "class_method_signature": "JcrPackageManagerImpl.assemble(JcrPackage pack, ProgressTrackerListener listener)", "testcase": false, "constructor": false}, {"identifier": "assemble", "parameters": "(Node packNode, JcrPackageDefinition definition,\n                         ProgressTrackerListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void assemble(Node packNode, JcrPackageDefinition definition,\n                         ProgressTrackerListener listener)", "full_signature": "@Override public void assemble(Node packNode, JcrPackageDefinition definition,\n                         ProgressTrackerListener listener)", "class_method_signature": "JcrPackageManagerImpl.assemble(Node packNode, JcrPackageDefinition definition,\n                         ProgressTrackerListener listener)", "testcase": false, "constructor": false}, {"identifier": "validateSubPackages", "parameters": "(JcrPackageDefinitionImpl def)", "modifiers": "private", "return": "void", "signature": "void validateSubPackages(JcrPackageDefinitionImpl def)", "full_signature": "private void validateSubPackages(JcrPackageDefinitionImpl def)", "class_method_signature": "JcrPackageManagerImpl.validateSubPackages(JcrPackageDefinitionImpl def)", "testcase": false, "constructor": false}, {"identifier": "assemble", "parameters": "(JcrPackageDefinition definition,\n                         ProgressTrackerListener listener, OutputStream out)", "modifiers": "@Override public", "return": "void", "signature": "void assemble(JcrPackageDefinition definition,\n                         ProgressTrackerListener listener, OutputStream out)", "full_signature": "@Override public void assemble(JcrPackageDefinition definition,\n                         ProgressTrackerListener listener, OutputStream out)", "class_method_signature": "JcrPackageManagerImpl.assemble(JcrPackageDefinition definition,\n                         ProgressTrackerListener listener, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "rewrap", "parameters": "(JcrPackage pack, ProgressTrackerListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void rewrap(JcrPackage pack, ProgressTrackerListener listener)", "full_signature": "@Override public void rewrap(JcrPackage pack, ProgressTrackerListener listener)", "class_method_signature": "JcrPackageManagerImpl.rewrap(JcrPackage pack, ProgressTrackerListener listener)", "testcase": false, "constructor": false}, {"identifier": "mkdir", "parameters": "(String path, boolean autoSave)", "modifiers": "protected", "return": "Node", "signature": "Node mkdir(String path, boolean autoSave)", "full_signature": "protected Node mkdir(String path, boolean autoSave)", "class_method_signature": "JcrPackageManagerImpl.mkdir(String path, boolean autoSave)", "testcase": false, "constructor": false}, {"identifier": "getPackageRoot", "parameters": "()", "modifiers": "@Override public", "return": "Node", "signature": "Node getPackageRoot()", "full_signature": "@Override public Node getPackageRoot()", "class_method_signature": "JcrPackageManagerImpl.getPackageRoot()", "testcase": false, "constructor": false}, {"identifier": "getPackageRoot", "parameters": "(boolean noCreate)", "modifiers": "@Override public", "return": "Node", "signature": "Node getPackageRoot(boolean noCreate)", "full_signature": "@Override public Node getPackageRoot(boolean noCreate)", "class_method_signature": "JcrPackageManagerImpl.getPackageRoot(boolean noCreate)", "testcase": false, "constructor": false}, {"identifier": "listPackages", "parameters": "()", "modifiers": "@Override public", "return": "List<JcrPackage>", "signature": "List<JcrPackage> listPackages()", "full_signature": "@Override public List<JcrPackage> listPackages()", "class_method_signature": "JcrPackageManagerImpl.listPackages()", "testcase": false, "constructor": false}, {"identifier": "listPackages", "parameters": "(WorkspaceFilter filter)", "modifiers": "@Override public", "return": "List<JcrPackage>", "signature": "List<JcrPackage> listPackages(WorkspaceFilter filter)", "full_signature": "@Override public List<JcrPackage> listPackages(WorkspaceFilter filter)", "class_method_signature": "JcrPackageManagerImpl.listPackages(WorkspaceFilter filter)", "testcase": false, "constructor": false}, {"identifier": "listPackages", "parameters": "(String group, boolean built)", "modifiers": "@Override public", "return": "List<JcrPackage>", "signature": "List<JcrPackage> listPackages(String group, boolean built)", "full_signature": "@Override public List<JcrPackage> listPackages(String group, boolean built)", "class_method_signature": "JcrPackageManagerImpl.listPackages(String group, boolean built)", "testcase": false, "constructor": false}, {"identifier": "listPackages", "parameters": "(Node pkgRoot, List<JcrPackage> packages, String group, boolean built)", "modifiers": "private", "return": "void", "signature": "void listPackages(Node pkgRoot, List<JcrPackage> packages, String group, boolean built)", "full_signature": "private void listPackages(Node pkgRoot, List<JcrPackage> packages, String group, boolean built)", "class_method_signature": "JcrPackageManagerImpl.listPackages(Node pkgRoot, List<JcrPackage> packages, String group, boolean built)", "testcase": false, "constructor": false}, {"identifier": "listPackages", "parameters": "(Node root, List<JcrPackage> packages,\n                              WorkspaceFilter filter, boolean built, boolean shallow)", "modifiers": "private", "return": "void", "signature": "void listPackages(Node root, List<JcrPackage> packages,\n                              WorkspaceFilter filter, boolean built, boolean shallow)", "full_signature": "private void listPackages(Node root, List<JcrPackage> packages,\n                              WorkspaceFilter filter, boolean built, boolean shallow)", "class_method_signature": "JcrPackageManagerImpl.listPackages(Node root, List<JcrPackage> packages,\n                              WorkspaceFilter filter, boolean built, boolean shallow)", "testcase": false, "constructor": false}, {"identifier": "setDispatcher", "parameters": "(@Nullable PackageEventDispatcher dispatcher)", "modifiers": "@Override public", "return": "void", "signature": "void setDispatcher(@Nullable PackageEventDispatcher dispatcher)", "full_signature": "@Override public void setDispatcher(@Nullable PackageEventDispatcher dispatcher)", "class_method_signature": "JcrPackageManagerImpl.setDispatcher(@Nullable PackageEventDispatcher dispatcher)", "testcase": false, "constructor": false}], "file": "vault-core/src/main/java/org/apache/jackrabbit/vault/packaging/impl/JcrPackageManagerImpl.java"}, "focal_method": {"identifier": "getPackageRoot", "parameters": "()", "modifiers": "@Override public", "return": "Node", "body": "@Override\n    public Node getPackageRoot() throws RepositoryException {\n        return registry.getPrimaryPackageRoot(true);\n    }", "signature": "Node getPackageRoot()", "full_signature": "@Override public Node getPackageRoot()", "class_method_signature": "JcrPackageManagerImpl.getPackageRoot()", "testcase": false, "constructor": false, "invocations": ["getPrimaryPackageRoot"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}