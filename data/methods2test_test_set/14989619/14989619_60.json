{"test_class": {"identifier": "RequestValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/src/test/java/org/jvalue/ods/utils/RequestValidatorTest.java"}, "test_case": {"identifier": "testValidateSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testValidateSuccess() throws IOException {\n\n\t\tString dataSourceDescription =\n\t\t\t\"{\\n\" +\n\t\t\t\t\"\\t\\\"data\\\":{\\n\" +\n\t\t\t\t\"\\t\\t\\\"id\\\":\\\"osm\\\",\\n\" +\n\t\t\t\t\"\\t\\t\\\"type\\\":\\\"DataSource\\\",\\n\" +\n\t\t\t\t\"\\t\\t\\\"attributes\\\":{\\n\" +\n\t\t\t\t\"\\t\\t\\t\\\"domainIdKey\\\":\\\"/id\\\",\\n\" +\n\t\t\t\t\"\\t\\t\\t\\\"schema\\\":{},\\n\" +\n\t\t\t\t\"\\t\\t\\t\\\"metaData\\\":{\\n\" +\n\t\t\t\t\"\\t\\t\\t\\t\\\"name\\\":\\\"OSM\\\",\\n\" +\n\t\t\t\t\"\\t\\t\\t\\t\\\"title\\\":\\\"OSM\\\",\\n\" +\n\t\t\t\t\"\\t\\t\\t\\t\\\"authorEmail\\\":\\\"\\\",\\n\" +\n\t\t\t\t\"\\t\\t\\t\\t\\\"notes\\\":\\\"\\\",\\n\" +\n\t\t\t\t\"\\t\\t\\t\\t\\\"author\\\":\\\"\\\",\\n\" +\n\t\t\t\t\"\\t\\t\\t\\t\\\"termsOfUse\\\":\\\"\\\",\\n\" +\n\t\t\t\t\"\\t\\t\\t\\t\\\"url\\\":\\\"\\\"\\n\" +\n\t\t\t\t\"\\t\\t\\t}\\n\" +\n\t\t\t\t\"\\t\\t}\\n\" +\n\t\t\t\t\"\\t}\\n\" +\n\t\t\t\t\"}\";\n\n\t\tJsonApiRequest request = JsonMapper.readValue(dataSourceDescription, JsonApiRequest.class);\n\n\t\tDataSourceDescription sourceDescription = JsonMapper.convertValue(\n\t\t\trequest.getAttributes(),\n\t\t\tDataSourceDescription.class);\n\n\t\tRequestValidator.validate(sourceDescription);\n\t}", "signature": "void testValidateSuccess()", "full_signature": "@Test public void testValidateSuccess()", "class_method_signature": "RequestValidatorTest.testValidateSuccess()", "testcase": true, "constructor": false, "invocations": ["readValue", "convertValue", "getAttributes", "validate"]}, "focal_class": {"identifier": "RequestValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Validator validator;", "modifier": "private static", "type": "Validator", "declarator": "validator", "var_name": "validator"}], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "Validator", "signature": "Validator getInstance()", "full_signature": "public static Validator getInstance()", "class_method_signature": "RequestValidator.getInstance()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(T obj)", "modifiers": "public static", "return": "void", "signature": "void validate(T obj)", "full_signature": "public static void validate(T obj)", "class_method_signature": "RequestValidator.validate(T obj)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/jvalue/ods/utils/RequestValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(T obj)", "modifiers": "public static", "return": "void", "body": "public static <T> void validate(T obj) {\n\t\tSet<ConstraintViolation<T>> violations = getInstance().validate(obj);\n\n\t\tif (!violations.isEmpty()) {\n\t\t\tStringBuilder violationStringBuilder = new StringBuilder();\n\t\t\tfor (ConstraintViolation<T> violation : violations) {\n\t\t\t\tviolationStringBuilder.append(violation.getPropertyPath().toString())\n\t\t\t\t\t.append(\" \")\n\t\t\t\t\t.append(violation.getMessage())\n\t\t\t\t\t.append(System.lineSeparator());\n\t\t\t}\n\t\t\tthrow RestUtils.createJsonFormattedException(\"Malformed \" + obj.getClass().getSimpleName() + \": \"  + violationStringBuilder.toString(), 400);\n\t\t}\n\t}", "signature": "void validate(T obj)", "full_signature": "public static void validate(T obj)", "class_method_signature": "RequestValidator.validate(T obj)", "testcase": false, "constructor": false, "invocations": ["validate", "getInstance", "isEmpty", "append", "append", "append", "append", "toString", "getPropertyPath", "getMessage", "lineSeparator", "createJsonFormattedException", "getSimpleName", "getClass", "toString"]}, "repository": {"repo_id": 14989619, "url": "https://github.com/jvalue/open-data-service-v1", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 6, "size": 4525, "license": "licensed"}}