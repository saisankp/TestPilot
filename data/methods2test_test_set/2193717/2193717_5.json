{"test_class": {"identifier": "TestConvertConstructorToReflectedConstructor", "superclass": "", "interfaces": "", "fields": [], "file": "fluent-reflection/src/test/java/com/lexicalscope/fluentreflection/TestConvertConstructorToReflectedConstructor.java"}, "test_case": {"identifier": "constructorIsConvertedToReflectedConstructor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void constructorIsConvertedToReflectedConstructor() throws Exception {\n        assertThat(new ConvertConstructorToReflectedConstructor<ExampleClass>(\n                new ReflectedTypeFactoryImpl(),\n                ExampleClass.class)\n                .convert(ExampleClass.class\n                        .getDeclaredConstructor()), reflectingOnConstructor(ExampleClass.class\n                .getDeclaredConstructor()));\n    }", "signature": "void constructorIsConvertedToReflectedConstructor()", "full_signature": "@Test public void constructorIsConvertedToReflectedConstructor()", "class_method_signature": "TestConvertConstructorToReflectedConstructor.constructorIsConvertedToReflectedConstructor()", "testcase": true, "constructor": false, "invocations": ["assertThat", "convert", "getDeclaredConstructor", "reflectingOnConstructor", "getDeclaredConstructor"]}, "focal_class": {"identifier": "ConvertConstructorToReflectedConstructor", "superclass": "", "interfaces": "implements Converter<Constructor<?>, FluentConstructor<T>>", "fields": [{"original_string": "private final ReflectedTypeFactory reflectedTypeFactory;", "modifier": "private final", "type": "ReflectedTypeFactory", "declarator": "reflectedTypeFactory", "var_name": "reflectedTypeFactory"}, {"original_string": "private final TypeLiteral<T> typeLiteral;", "modifier": "private final", "type": "TypeLiteral<T>", "declarator": "typeLiteral", "var_name": "typeLiteral"}], "methods": [{"identifier": "ConvertConstructorToReflectedConstructor", "parameters": "(\n            final ReflectedTypeFactory reflectedTypeFactory,\n            final TypeLiteral<T> typeLiteral)", "modifiers": "public", "return": "", "signature": " ConvertConstructorToReflectedConstructor(\n            final ReflectedTypeFactory reflectedTypeFactory,\n            final TypeLiteral<T> typeLiteral)", "full_signature": "public  ConvertConstructorToReflectedConstructor(\n            final ReflectedTypeFactory reflectedTypeFactory,\n            final TypeLiteral<T> typeLiteral)", "class_method_signature": "ConvertConstructorToReflectedConstructor.ConvertConstructorToReflectedConstructor(\n            final ReflectedTypeFactory reflectedTypeFactory,\n            final TypeLiteral<T> typeLiteral)", "testcase": false, "constructor": true}, {"identifier": "ConvertConstructorToReflectedConstructor", "parameters": "(\n            final ReflectedTypeFactory reflectedTypeFactory,\n            final Class<T> klass)", "modifiers": "public", "return": "", "signature": " ConvertConstructorToReflectedConstructor(\n            final ReflectedTypeFactory reflectedTypeFactory,\n            final Class<T> klass)", "full_signature": "public  ConvertConstructorToReflectedConstructor(\n            final ReflectedTypeFactory reflectedTypeFactory,\n            final Class<T> klass)", "class_method_signature": "ConvertConstructorToReflectedConstructor.ConvertConstructorToReflectedConstructor(\n            final ReflectedTypeFactory reflectedTypeFactory,\n            final Class<T> klass)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(final Constructor<?> from)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "FluentConstructor<T>", "signature": "FluentConstructor<T> convert(final Constructor<?> from)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public FluentConstructor<T> convert(final Constructor<?> from)", "class_method_signature": "ConvertConstructorToReflectedConstructor.convert(final Constructor<?> from)", "testcase": false, "constructor": false}], "file": "fluent-reflection/src/main/java/com/lexicalscope/fluentreflection/ConvertConstructorToReflectedConstructor.java"}, "focal_method": {"identifier": "convert", "parameters": "(final Constructor<?> from)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "FluentConstructor<T>", "body": "@SuppressWarnings(\"unchecked\") @Override public FluentConstructor<T> convert(final Constructor<?> from) {\n        return new FluentConstructorImpl<T>(reflectedTypeFactory, typeLiteral, (Constructor<T>) from);\n    }", "signature": "FluentConstructor<T> convert(final Constructor<?> from)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public FluentConstructor<T> convert(final Constructor<?> from)", "class_method_signature": "ConvertConstructorToReflectedConstructor.convert(final Constructor<?> from)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2193717, "url": "https://github.com/lexicalscope/fluent-reflection", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 8596, "license": "licensed"}}