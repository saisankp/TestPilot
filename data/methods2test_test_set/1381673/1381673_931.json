{"test_class": {"identifier": "RuleSheetParserUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-decisiontables/src/test/java/org/drools/decisiontable/parser/RuleSheetParserUtilTest.java"}, "test_case": {"identifier": "testBadVariableFormat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBadVariableFormat() {\n        List<String> varCells = new ArrayList<String>();\n        varCells.add( \"class1, object2\" );\n        try {\n            RuleSheetParserUtil.getVariableList( varCells );\n            fail( \"should not work\" );\n        } catch ( final DecisionTableParseException e ) {\n            assertNotNull( e.getMessage() );\n        }\n    }", "signature": "void testBadVariableFormat()", "full_signature": "@Test public void testBadVariableFormat()", "class_method_signature": "RuleSheetParserUtilTest.testBadVariableFormat()", "testcase": true, "constructor": false, "invocations": ["add", "getVariableList", "fail", "assertNotNull", "getMessage"]}, "focal_class": {"identifier": "RuleSheetParserUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "RuleSheetParserUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " RuleSheetParserUtil()", "full_signature": "private  RuleSheetParserUtil()", "class_method_signature": "RuleSheetParserUtil.RuleSheetParserUtil()", "testcase": false, "constructor": true}, {"identifier": "getRuleName", "parameters": "(final String ruleRow)", "modifiers": "public static", "return": "String", "signature": "String getRuleName(final String ruleRow)", "full_signature": "public static String getRuleName(final String ruleRow)", "class_method_signature": "RuleSheetParserUtil.getRuleName(final String ruleRow)", "testcase": false, "constructor": false}, {"identifier": "invalidRuleTableDef", "parameters": "(final String ruleRow)", "modifiers": "private static", "return": "void", "signature": "void invalidRuleTableDef(final String ruleRow)", "full_signature": "private static void invalidRuleTableDef(final String ruleRow)", "class_method_signature": "RuleSheetParserUtil.invalidRuleTableDef(final String ruleRow)", "testcase": false, "constructor": false}, {"identifier": "getImportList", "parameters": "(final List<String> importCells)", "modifiers": "public static", "return": "List<Import>", "signature": "List<Import> getImportList(final List<String> importCells)", "full_signature": "public static List<Import> getImportList(final List<String> importCells)", "class_method_signature": "RuleSheetParserUtil.getImportList(final List<String> importCells)", "testcase": false, "constructor": false}, {"identifier": "getVariableList", "parameters": "( final List<String> variableCells )", "modifiers": "public static", "return": "List<Global>", "signature": "List<Global> getVariableList( final List<String> variableCells )", "full_signature": "public static List<Global> getVariableList( final List<String> variableCells )", "class_method_signature": "RuleSheetParserUtil.getVariableList( final List<String> variableCells )", "testcase": false, "constructor": false}, {"identifier": "isStringMeaningTrue", "parameters": "(String property)", "modifiers": "public static", "return": "boolean", "signature": "boolean isStringMeaningTrue(String property)", "full_signature": "public static boolean isStringMeaningTrue(String property)", "class_method_signature": "RuleSheetParserUtil.isStringMeaningTrue(String property)", "testcase": false, "constructor": false}, {"identifier": "rc2name", "parameters": "( int row, int col )", "modifiers": "public static", "return": "String", "signature": "String rc2name( int row, int col )", "full_signature": "public static String rc2name( int row, int col )", "class_method_signature": "RuleSheetParserUtil.rc2name( int row, int col )", "testcase": false, "constructor": false}], "file": "drools-decisiontables/src/main/java/org/drools/decisiontable/parser/RuleSheetParserUtil.java"}, "focal_method": {"identifier": "getVariableList", "parameters": "( final List<String> variableCells )", "modifiers": "public static", "return": "List<Global>", "body": "public static List<Global> getVariableList( final List<String> variableCells ){\n        final List<Global> variableList = new ArrayList<Global>();\n        if ( variableCells == null ) return variableList;\n\n        for( String variableCell: variableCells ){\n            final StringTokenizer tokens = new StringTokenizer( variableCell, \",\" );\n            while ( tokens.hasMoreTokens() ) {\n                final String token = tokens.nextToken();\n                final Global vars = new Global();\n                final StringTokenizer paramTokens = new StringTokenizer( token, \" \" );\n                vars.setClassName( paramTokens.nextToken() );\n                if ( !paramTokens.hasMoreTokens() ) {\n                    throw new DecisionTableParseException( \"The format for global variables is incorrect. \" + \"It should be: [Class name, Class otherName]. But it was: [\" + variableCell + \"]\" );\n                }\n                vars.setIdentifier( paramTokens.nextToken() );\n                variableList.add( vars );\n            }\n        }\n        return variableList;\n    }", "signature": "List<Global> getVariableList( final List<String> variableCells )", "full_signature": "public static List<Global> getVariableList( final List<String> variableCells )", "class_method_signature": "RuleSheetParserUtil.getVariableList( final List<String> variableCells )", "testcase": false, "constructor": false, "invocations": ["hasMoreTokens", "nextToken", "setClassName", "nextToken", "hasMoreTokens", "setIdentifier", "nextToken", "add"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}