{"test_class": {"identifier": "EventDataValueAggregatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EventDataValueAggregator subject;", "modifier": "private", "type": "EventDataValueAggregator", "declarator": "subject", "var_name": "subject"}, {"original_string": "private final ImportOptions importOptions = ImportOptions.getDefaultImportOptions();", "modifier": "private final", "type": "ImportOptions", "declarator": "importOptions = ImportOptions.getDefaultImportOptions()", "var_name": "importOptions"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/EventDataValueAggregatorTest.java"}, "test_case": {"identifier": "verifyAggregateDataValuesOnExistingPSIwithMergeAndEmptyDataValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyAggregateDataValuesOnExistingPSIwithMergeAndEmptyDataValue()\n    {\n        Event event1 = createEvent( createDataValue( \"abcd\", \"\" ) );\n\n        importOptions.setMergeDataValues( true );\n\n        Map<String, ProgramStageInstance> programStageInstanceMap = new HashMap<>();\n        programStageInstanceMap.put( event1.getUid(),\n                createPsi( event1.getUid(),\n                        createEventDataValue( \"abcd\", \"val1\" ),\n                        createEventDataValue( \"efgh\", \"val2\" ),\n                        createEventDataValue( \"ilmn\", \"val3\" ) ) );\n\n        Map<String, Set<EventDataValue>> dataValues = subject.aggregateDataValues( Lists.newArrayList( event1 ),\n                programStageInstanceMap, importOptions );\n\n        assertThat( dataValues, is( notNullValue() ) );\n        assertThat( dataValues.keySet(), hasSize( 1 ) );\n        assertThat( dataValues.get( event1.getUid() ), hasSize( 2 ) );\n\n        assertDataValue( dataValues.get( event1.getUid() ), \"efgh\", \"val2\" );\n        assertDataValue( dataValues.get( event1.getUid() ), \"ilmn\", \"val3\" );\n    }", "signature": "void verifyAggregateDataValuesOnExistingPSIwithMergeAndEmptyDataValue()", "full_signature": "@Test public void verifyAggregateDataValuesOnExistingPSIwithMergeAndEmptyDataValue()", "class_method_signature": "EventDataValueAggregatorTest.verifyAggregateDataValuesOnExistingPSIwithMergeAndEmptyDataValue()", "testcase": true, "constructor": false, "invocations": ["createEvent", "createDataValue", "setMergeDataValues", "put", "getUid", "createPsi", "getUid", "createEventDataValue", "createEventDataValue", "createEventDataValue", "aggregateDataValues", "newArrayList", "assertThat", "is", "notNullValue", "assertThat", "keySet", "hasSize", "assertThat", "get", "getUid", "hasSize", "assertDataValue", "get", "getUid", "assertDataValue", "get", "getUid"]}, "focal_class": {"identifier": "EventDataValueAggregator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "aggregateDataValues", "parameters": "( List<Event> events,\n        Map<String, ProgramStageInstance> programStageInstanceMap, ImportOptions importOptions )", "modifiers": "public", "return": "Map<String, Set<EventDataValue>>", "signature": "Map<String, Set<EventDataValue>> aggregateDataValues( List<Event> events,\n        Map<String, ProgramStageInstance> programStageInstanceMap, ImportOptions importOptions )", "full_signature": "public Map<String, Set<EventDataValue>> aggregateDataValues( List<Event> events,\n        Map<String, ProgramStageInstance> programStageInstanceMap, ImportOptions importOptions )", "class_method_signature": "EventDataValueAggregator.aggregateDataValues( List<Event> events,\n        Map<String, ProgramStageInstance> programStageInstanceMap, ImportOptions importOptions )", "testcase": false, "constructor": false}, {"identifier": "aggregateForUpdate", "parameters": "( Event event,\n        Map<String, ProgramStageInstance> programStageInstanceMap, ImportOptions importOptions )", "modifiers": "private", "return": "Set<EventDataValue>", "signature": "Set<EventDataValue> aggregateForUpdate( Event event,\n        Map<String, ProgramStageInstance> programStageInstanceMap, ImportOptions importOptions )", "full_signature": "private Set<EventDataValue> aggregateForUpdate( Event event,\n        Map<String, ProgramStageInstance> programStageInstanceMap, ImportOptions importOptions )", "class_method_signature": "EventDataValueAggregator.aggregateForUpdate( Event event,\n        Map<String, ProgramStageInstance> programStageInstanceMap, ImportOptions importOptions )", "testcase": false, "constructor": false}, {"identifier": "getDataValues", "parameters": "( ProgramStageInstance psi, Set<DataValue> dataValues )", "modifiers": "private", "return": "Set<EventDataValue>", "signature": "Set<EventDataValue> getDataValues( ProgramStageInstance psi, Set<DataValue> dataValues )", "full_signature": "private Set<EventDataValue> getDataValues( ProgramStageInstance psi, Set<DataValue> dataValues )", "class_method_signature": "EventDataValueAggregator.getDataValues( ProgramStageInstance psi, Set<DataValue> dataValues )", "testcase": false, "constructor": false}, {"identifier": "toEventDataValue", "parameters": "( DataValue dataValue, EventDataValue existing )", "modifiers": "private", "return": "EventDataValue", "signature": "EventDataValue toEventDataValue( DataValue dataValue, EventDataValue existing )", "full_signature": "private EventDataValue toEventDataValue( DataValue dataValue, EventDataValue existing )", "class_method_signature": "EventDataValueAggregator.toEventDataValue( DataValue dataValue, EventDataValue existing )", "testcase": false, "constructor": false}, {"identifier": "exist", "parameters": "( DataValue dataValue, Set<EventDataValue> eventDataValues )", "modifiers": "private", "return": "EventDataValue", "signature": "EventDataValue exist( DataValue dataValue, Set<EventDataValue> eventDataValues )", "full_signature": "private EventDataValue exist( DataValue dataValue, Set<EventDataValue> eventDataValues )", "class_method_signature": "EventDataValueAggregator.exist( DataValue dataValue, Set<EventDataValue> eventDataValues )", "testcase": false, "constructor": false}, {"identifier": "getDataValues", "parameters": "( Set<DataValue> dataValues )", "modifiers": "private", "return": "Set<EventDataValue>", "signature": "Set<EventDataValue> getDataValues( Set<DataValue> dataValues )", "full_signature": "private Set<EventDataValue> getDataValues( Set<DataValue> dataValues )", "class_method_signature": "EventDataValueAggregator.getDataValues( Set<DataValue> dataValues )", "testcase": false, "constructor": false}, {"identifier": "isNew", "parameters": "( String eventUid, Map<String, ProgramStageInstance> programStageInstanceMap )", "modifiers": "private", "return": "boolean", "signature": "boolean isNew( String eventUid, Map<String, ProgramStageInstance> programStageInstanceMap )", "full_signature": "private boolean isNew( String eventUid, Map<String, ProgramStageInstance> programStageInstanceMap )", "class_method_signature": "EventDataValueAggregator.isNew( String eventUid, Map<String, ProgramStageInstance> programStageInstanceMap )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/EventDataValueAggregator.java"}, "focal_method": {"identifier": "aggregateDataValues", "parameters": "( List<Event> events,\n        Map<String, ProgramStageInstance> programStageInstanceMap, ImportOptions importOptions )", "modifiers": "public", "return": "Map<String, Set<EventDataValue>>", "body": "public Map<String, Set<EventDataValue>> aggregateDataValues( List<Event> events,\n        Map<String, ProgramStageInstance> programStageInstanceMap, ImportOptions importOptions )\n    {\n        checkNotNull( programStageInstanceMap );\n        checkNotNull( events );\n\n        Map<String, Set<EventDataValue>> eventDataValueMap = new HashMap<>();\n        for ( Event event : events )\n        {\n            if ( isNew( event.getUid(), programStageInstanceMap ) )\n            {\n                eventDataValueMap.put( event.getUid(), getDataValues( event.getDataValues() ) );\n            }\n            else\n            {\n                eventDataValueMap.put( event.getUid(),\n                    aggregateForUpdate( event, programStageInstanceMap, importOptions ) );\n            }\n        }\n        return eventDataValueMap;\n    }", "signature": "Map<String, Set<EventDataValue>> aggregateDataValues( List<Event> events,\n        Map<String, ProgramStageInstance> programStageInstanceMap, ImportOptions importOptions )", "full_signature": "public Map<String, Set<EventDataValue>> aggregateDataValues( List<Event> events,\n        Map<String, ProgramStageInstance> programStageInstanceMap, ImportOptions importOptions )", "class_method_signature": "EventDataValueAggregator.aggregateDataValues( List<Event> events,\n        Map<String, ProgramStageInstance> programStageInstanceMap, ImportOptions importOptions )", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "isNew", "getUid", "put", "getUid", "getDataValues", "getDataValues", "put", "getUid", "aggregateForUpdate"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}