{"test_class": {"identifier": "NiciraNvpGuestNetworkGuruTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long NETWORK_ID = 42L;", "modifier": "private static final", "type": "long", "declarator": "NETWORK_ID = 42L", "var_name": "NETWORK_ID"}, {"original_string": "PhysicalNetworkDao physnetdao = mock(PhysicalNetworkDao.class);", "modifier": "", "type": "PhysicalNetworkDao", "declarator": "physnetdao = mock(PhysicalNetworkDao.class)", "var_name": "physnetdao"}, {"original_string": "NiciraNvpDao nvpdao = mock(NiciraNvpDao.class);", "modifier": "", "type": "NiciraNvpDao", "declarator": "nvpdao = mock(NiciraNvpDao.class)", "var_name": "nvpdao"}, {"original_string": "DataCenterDao dcdao = mock(DataCenterDao.class);", "modifier": "", "type": "DataCenterDao", "declarator": "dcdao = mock(DataCenterDao.class)", "var_name": "dcdao"}, {"original_string": "NetworkOfferingServiceMapDao nosd = mock(NetworkOfferingServiceMapDao.class);", "modifier": "", "type": "NetworkOfferingServiceMapDao", "declarator": "nosd = mock(NetworkOfferingServiceMapDao.class)", "var_name": "nosd"}, {"original_string": "AgentManager agentmgr = mock(AgentManager.class);", "modifier": "", "type": "AgentManager", "declarator": "agentmgr = mock(AgentManager.class)", "var_name": "agentmgr"}, {"original_string": "NetworkOrchestrationService netmgr = mock(NetworkOrchestrationService.class);", "modifier": "", "type": "NetworkOrchestrationService", "declarator": "netmgr = mock(NetworkOrchestrationService.class)", "var_name": "netmgr"}, {"original_string": "NetworkModel netmodel = mock(NetworkModel.class);", "modifier": "", "type": "NetworkModel", "declarator": "netmodel = mock(NetworkModel.class)", "var_name": "netmodel"}, {"original_string": "HostDao hostdao = mock(HostDao.class);", "modifier": "", "type": "HostDao", "declarator": "hostdao = mock(HostDao.class)", "var_name": "hostdao"}, {"original_string": "NetworkDao netdao = mock(NetworkDao.class);", "modifier": "", "type": "NetworkDao", "declarator": "netdao = mock(NetworkDao.class)", "var_name": "netdao"}, {"original_string": "NiciraNvpGuestNetworkGuru guru;", "modifier": "", "type": "NiciraNvpGuestNetworkGuru", "declarator": "guru", "var_name": "guru"}], "file": "plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/guru/NiciraNvpGuestNetworkGuruTest.java"}, "test_case": {"identifier": "testDesignNoIsolationMethodSTT", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDesignNoIsolationMethodSTT() {\n        final PhysicalNetworkVO physnet = mock(PhysicalNetworkVO.class);\n        when(physnetdao.findById((Long)any())).thenReturn(physnet);\n        when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"VLAN\"}));\n        when(physnet.getId()).thenReturn(NETWORK_ID);\n\n        mock(NiciraNvpDeviceVO.class);\n        when(nvpdao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Collections.<NiciraNvpDeviceVO> emptyList());\n\n        final NetworkOffering offering = mock(NetworkOffering.class);\n        when(offering.getId()).thenReturn(NETWORK_ID);\n        when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(offering.getGuestType()).thenReturn(GuestType.Isolated);\n\n        final DeploymentPlan plan = mock(DeploymentPlan.class);\n        final Network network = mock(Network.class);\n        final Account account = mock(Account.class);\n\n        final Network designednetwork = guru.design(offering, plan, network, account);\n        assertTrue(designednetwork == null);\n    }", "signature": "void testDesignNoIsolationMethodSTT()", "full_signature": "@Test public void testDesignNoIsolationMethodSTT()", "class_method_signature": "NiciraNvpGuestNetworkGuruTest.testDesignNoIsolationMethodSTT()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "findById", "any", "thenReturn", "when", "getIsolationMethods", "asList", "thenReturn", "when", "getId", "mock", "thenReturn", "when", "listByPhysicalNetwork", "emptyList", "mock", "thenReturn", "when", "getId", "thenReturn", "when", "getTrafficType", "thenReturn", "when", "getGuestType", "mock", "mock", "mock", "design", "assertTrue"]}, "focal_class": {"identifier": "NiciraNvpGuestNetworkGuru", "superclass": "extends GuestNetworkGuru", "interfaces": "", "fields": [{"original_string": "private static final int MAX_NAME_LENGTH = 40;", "modifier": "private static final", "type": "int", "declarator": "MAX_NAME_LENGTH = 40", "var_name": "MAX_NAME_LENGTH"}, {"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(NiciraNvpGuestNetworkGuru.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(NiciraNvpGuestNetworkGuru.class)", "var_name": "s_logger"}, {"original_string": "@Inject\n    protected NetworkModel networkModel;", "modifier": "@Inject\n    protected", "type": "NetworkModel", "declarator": "networkModel", "var_name": "networkModel"}, {"original_string": "@Inject\n    protected NetworkDao networkDao;", "modifier": "@Inject\n    protected", "type": "NetworkDao", "declarator": "networkDao", "var_name": "networkDao"}, {"original_string": "@Inject\n    protected DataCenterDao zoneDao;", "modifier": "@Inject\n    protected", "type": "DataCenterDao", "declarator": "zoneDao", "var_name": "zoneDao"}, {"original_string": "@Inject\n    protected PhysicalNetworkDao physicalNetworkDao;", "modifier": "@Inject\n    protected", "type": "PhysicalNetworkDao", "declarator": "physicalNetworkDao", "var_name": "physicalNetworkDao"}, {"original_string": "@Inject\n    protected AccountDao accountDao;", "modifier": "@Inject\n    protected", "type": "AccountDao", "declarator": "accountDao", "var_name": "accountDao"}, {"original_string": "@Inject\n    protected NiciraNvpDao niciraNvpDao;", "modifier": "@Inject\n    protected", "type": "NiciraNvpDao", "declarator": "niciraNvpDao", "var_name": "niciraNvpDao"}, {"original_string": "@Inject\n    protected HostDao hostDao;", "modifier": "@Inject\n    protected", "type": "HostDao", "declarator": "hostDao", "var_name": "hostDao"}, {"original_string": "@Inject\n    protected ResourceManager resourceMgr;", "modifier": "@Inject\n    protected", "type": "ResourceManager", "declarator": "resourceMgr", "var_name": "resourceMgr"}, {"original_string": "@Inject\n    protected AgentManager agentMgr;", "modifier": "@Inject\n    protected", "type": "AgentManager", "declarator": "agentMgr", "var_name": "agentMgr"}, {"original_string": "@Inject\n    protected HostDetailsDao hostDetailsDao;", "modifier": "@Inject\n    protected", "type": "HostDetailsDao", "declarator": "hostDetailsDao", "var_name": "hostDetailsDao"}, {"original_string": "@Inject\n    protected NetworkOfferingServiceMapDao ntwkOfferingSrvcDao;", "modifier": "@Inject\n    protected", "type": "NetworkOfferingServiceMapDao", "declarator": "ntwkOfferingSrvcDao", "var_name": "ntwkOfferingSrvcDao"}], "methods": [{"identifier": "NiciraNvpGuestNetworkGuru", "parameters": "()", "modifiers": "public", "return": "", "signature": " NiciraNvpGuestNetworkGuru()", "full_signature": "public  NiciraNvpGuestNetworkGuru()", "class_method_signature": "NiciraNvpGuestNetworkGuru.NiciraNvpGuestNetworkGuru()", "testcase": false, "constructor": true}, {"identifier": "canHandle", "parameters": "(final NetworkOffering offering, final NetworkType networkType, final PhysicalNetwork physicalNetwork)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean canHandle(final NetworkOffering offering, final NetworkType networkType, final PhysicalNetwork physicalNetwork)", "full_signature": "@Override protected boolean canHandle(final NetworkOffering offering, final NetworkType networkType, final PhysicalNetwork physicalNetwork)", "class_method_signature": "NiciraNvpGuestNetworkGuru.canHandle(final NetworkOffering offering, final NetworkType networkType, final PhysicalNetwork physicalNetwork)", "testcase": false, "constructor": false}, {"identifier": "design", "parameters": "(final NetworkOffering offering, final DeploymentPlan plan, final Network userSpecified, final Account owner)", "modifiers": "@Override public", "return": "Network", "signature": "Network design(final NetworkOffering offering, final DeploymentPlan plan, final Network userSpecified, final Account owner)", "full_signature": "@Override public Network design(final NetworkOffering offering, final DeploymentPlan plan, final Network userSpecified, final Account owner)", "class_method_signature": "NiciraNvpGuestNetworkGuru.design(final NetworkOffering offering, final DeploymentPlan plan, final Network userSpecified, final Account owner)", "testcase": false, "constructor": false}, {"identifier": "checkThatLogicalSwitchExists", "parameters": "(final Network userSpecified, final NiciraNvpDeviceVO niciraNvpDeviceVO)", "modifiers": "private", "return": "void", "signature": "void checkThatLogicalSwitchExists(final Network userSpecified, final NiciraNvpDeviceVO niciraNvpDeviceVO)", "full_signature": "private void checkThatLogicalSwitchExists(final Network userSpecified, final NiciraNvpDeviceVO niciraNvpDeviceVO)", "class_method_signature": "NiciraNvpGuestNetworkGuru.checkThatLogicalSwitchExists(final Network userSpecified, final NiciraNvpDeviceVO niciraNvpDeviceVO)", "testcase": false, "constructor": false}, {"identifier": "lswitchExists", "parameters": "(String lswitchUuid, NiciraNvpDeviceVO niciraNvpDeviceVO)", "modifiers": "private", "return": "boolean", "signature": "boolean lswitchExists(String lswitchUuid, NiciraNvpDeviceVO niciraNvpDeviceVO)", "full_signature": "private boolean lswitchExists(String lswitchUuid, NiciraNvpDeviceVO niciraNvpDeviceVO)", "class_method_signature": "NiciraNvpGuestNetworkGuru.lswitchExists(String lswitchUuid, NiciraNvpDeviceVO niciraNvpDeviceVO)", "testcase": false, "constructor": false}, {"identifier": "implement", "parameters": "(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override public", "return": "Network", "signature": "Network implement(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override public Network implement(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "NiciraNvpGuestNetworkGuru.implement(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "reserve", "parameters": "(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override public", "return": "void", "signature": "void reserve(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override public void reserve(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "NiciraNvpGuestNetworkGuru.reserve(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(final NicProfile nic, final VirtualMachineProfile vm, final String reservationId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean release(final NicProfile nic, final VirtualMachineProfile vm, final String reservationId)", "full_signature": "@Override public boolean release(final NicProfile nic, final VirtualMachineProfile vm, final String reservationId)", "class_method_signature": "NiciraNvpGuestNetworkGuru.release(final NicProfile nic, final VirtualMachineProfile vm, final String reservationId)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "(final NetworkProfile profile, final NetworkOffering offering)", "modifiers": "@Override public", "return": "void", "signature": "void shutdown(final NetworkProfile profile, final NetworkOffering offering)", "full_signature": "@Override public void shutdown(final NetworkProfile profile, final NetworkOffering offering)", "class_method_signature": "NiciraNvpGuestNetworkGuru.shutdown(final NetworkProfile profile, final NetworkOffering offering)", "testcase": false, "constructor": false}, {"identifier": "trash", "parameters": "(final Network network, final NetworkOffering offering)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean trash(final Network network, final NetworkOffering offering)", "full_signature": "@Override public boolean trash(final Network network, final NetworkOffering offering)", "class_method_signature": "NiciraNvpGuestNetworkGuru.trash(final Network network, final NetworkOffering offering)", "testcase": false, "constructor": false}], "file": "plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/guru/NiciraNvpGuestNetworkGuru.java"}, "focal_method": {"identifier": "design", "parameters": "(final NetworkOffering offering, final DeploymentPlan plan, final Network userSpecified, final Account owner)", "modifiers": "@Override public", "return": "Network", "body": "@Override\n    public Network design(final NetworkOffering offering, final DeploymentPlan plan, final Network userSpecified, final Account owner) {\n        // Check if the isolation type of the related physical network is supported\n        final PhysicalNetworkVO physnet = physicalNetworkDao.findById(plan.getPhysicalNetworkId());\n        final DataCenter dc = _dcDao.findById(plan.getDataCenterId());\n        if (!canHandle(offering, dc.getNetworkType(), physnet)) {\n            s_logger.debug(\"Refusing to design this network\");\n            return null;\n        }\n\n        final List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(physnet.getId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No NiciraNvp Controller on physical network \" + physnet.getName());\n            return null;\n        }\n        final NiciraNvpDeviceVO niciraNvpDeviceVO = devices.get(0);\n        s_logger.debug(\"Nicira Nvp \" + niciraNvpDeviceVO.getUuid() + \" found on physical network \" + physnet.getId());\n\n        checkThatLogicalSwitchExists(userSpecified, niciraNvpDeviceVO);\n\n        s_logger.debug(\"Physical isolation type is supported, asking GuestNetworkGuru to design this network\");\n        final NetworkVO networkObject = (NetworkVO) super.design(offering, plan, userSpecified, owner);\n        if (networkObject == null) {\n            return null;\n        }\n        networkObject.setBroadcastDomainType(BroadcastDomainType.Lswitch);\n\n        return networkObject;\n    }", "signature": "Network design(final NetworkOffering offering, final DeploymentPlan plan, final Network userSpecified, final Account owner)", "full_signature": "@Override public Network design(final NetworkOffering offering, final DeploymentPlan plan, final Network userSpecified, final Account owner)", "class_method_signature": "NiciraNvpGuestNetworkGuru.design(final NetworkOffering offering, final DeploymentPlan plan, final Network userSpecified, final Account owner)", "testcase": false, "constructor": false, "invocations": ["findById", "getPhysicalNetworkId", "findById", "getDataCenterId", "canHandle", "getNetworkType", "debug", "listByPhysicalNetwork", "getId", "isEmpty", "error", "getName", "get", "debug", "getUuid", "getId", "checkThatLogicalSwitchExists", "debug", "design", "setBroadcastDomainType"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}