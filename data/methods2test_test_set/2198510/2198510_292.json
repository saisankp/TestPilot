{"test_class": {"identifier": "TestMultiportSyslogTCPSource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DateTime time = new DateTime();", "modifier": "private final", "type": "DateTime", "declarator": "time = new DateTime()", "var_name": "time"}, {"original_string": "private final String stamp1 = time.toString();", "modifier": "private final", "type": "String", "declarator": "stamp1 = time.toString()", "var_name": "stamp1"}, {"original_string": "private final String host1 = \"localhost.localdomain\";", "modifier": "private final", "type": "String", "declarator": "host1 = \"localhost.localdomain\"", "var_name": "host1"}, {"original_string": "private final String data1 = \"proc1 - some msg\";", "modifier": "private final", "type": "String", "declarator": "data1 = \"proc1 - some msg\"", "var_name": "data1"}], "file": "flume-ng-core/src/test/java/org/apache/flume/source/TestMultiportSyslogTCPSource.java"}, "test_case": {"identifier": "testMultiplePortsSSL", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMultiplePortsSSL() throws Exception {\n\n    SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n    sslContext.init(null, new TrustManager[]{new X509TrustManager() {\n        @Override\n        public void checkClientTrusted(X509Certificate[] certs, String s) {\n          // nothing\n        }\n\n        @Override\n        public void checkServerTrusted(X509Certificate[] certs, String s) {\n          // nothing\n        }\n\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n          return new X509Certificate[0];\n        }\n      } },\n        null);\n\n    SocketFactory socketFactory = sslContext.getSocketFactory();\n\n    Context context = new Context();\n    context.put(\"ssl\", \"true\");\n    context.put(\"keystore\", \"src/test/resources/server.p12\");\n    context.put(\"keystore-password\", \"password\");\n    context.put(\"keystore-type\", \"PKCS12\");\n\n\n    MultiportSyslogTCPSource source = new MultiportSyslogTCPSource();\n    Channel channel = new MemoryChannel();\n    List<Event> channelEvents = new ArrayList<>();\n    int numPorts = 10;\n\n    List<Integer> portList = testNPorts(source, channel, channelEvents,\n        numPorts, null, getSSLEventSender(socketFactory), context);\n\n    //Since events can arrive out of order, search for each event in the array\n    processEvents(channelEvents, numPorts, portList);\n    source.stop();\n  }", "signature": "void testMultiplePortsSSL()", "full_signature": "@Test public void testMultiplePortsSSL()", "class_method_signature": "TestMultiportSyslogTCPSource.testMultiplePortsSSL()", "testcase": true, "constructor": false, "invocations": ["getInstance", "init", "getSocketFactory", "put", "put", "put", "put", "testNPorts", "getSSLEventSender", "processEvents", "stop"]}, "focal_class": {"identifier": "MultiportSyslogTCPSource", "superclass": "extends SslContextAwareAbstractSource", "interfaces": "implements\n        EventDrivenSource, Configurable, BatchSizeSupported", "fields": [{"original_string": "public static final Logger logger = LoggerFactory.getLogger(\n          MultiportSyslogTCPSource.class);", "modifier": "public static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(\n          MultiportSyslogTCPSource.class)", "var_name": "logger"}, {"original_string": "private final ConcurrentMap<Integer, ThreadSafeDecoder> portCharsets;", "modifier": "private final", "type": "ConcurrentMap<Integer, ThreadSafeDecoder>", "declarator": "portCharsets", "var_name": "portCharsets"}, {"original_string": "private List<Integer> ports = Lists.newArrayList();", "modifier": "private", "type": "List<Integer>", "declarator": "ports = Lists.newArrayList()", "var_name": "ports"}, {"original_string": "private String host;", "modifier": "private", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "private NioSocketAcceptor acceptor;", "modifier": "private", "type": "NioSocketAcceptor", "declarator": "acceptor", "var_name": "acceptor"}, {"original_string": "private Integer numProcessors;", "modifier": "private", "type": "Integer", "declarator": "numProcessors", "var_name": "numProcessors"}, {"original_string": "private int maxEventSize;", "modifier": "private", "type": "int", "declarator": "maxEventSize", "var_name": "maxEventSize"}, {"original_string": "private int batchSize;", "modifier": "private", "type": "int", "declarator": "batchSize", "var_name": "batchSize"}, {"original_string": "private int readBufferSize;", "modifier": "private", "type": "int", "declarator": "readBufferSize", "var_name": "readBufferSize"}, {"original_string": "private String portHeader;", "modifier": "private", "type": "String", "declarator": "portHeader", "var_name": "portHeader"}, {"original_string": "private String clientIPHeader;", "modifier": "private", "type": "String", "declarator": "clientIPHeader", "var_name": "clientIPHeader"}, {"original_string": "private String clientHostnameHeader;", "modifier": "private", "type": "String", "declarator": "clientHostnameHeader", "var_name": "clientHostnameHeader"}, {"original_string": "private SourceCounter sourceCounter = null;", "modifier": "private", "type": "SourceCounter", "declarator": "sourceCounter = null", "var_name": "sourceCounter"}, {"original_string": "private Charset defaultCharset;", "modifier": "private", "type": "Charset", "declarator": "defaultCharset", "var_name": "defaultCharset"}, {"original_string": "private ThreadSafeDecoder defaultDecoder;", "modifier": "private", "type": "ThreadSafeDecoder", "declarator": "defaultDecoder", "var_name": "defaultDecoder"}, {"original_string": "private Set<String> keepFields;", "modifier": "private", "type": "Set<String>", "declarator": "keepFields", "var_name": "keepFields"}], "methods": [{"identifier": "MultiportSyslogTCPSource", "parameters": "()", "modifiers": "public", "return": "", "signature": " MultiportSyslogTCPSource()", "full_signature": "public  MultiportSyslogTCPSource()", "class_method_signature": "MultiportSyslogTCPSource.MultiportSyslogTCPSource()", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Context context)", "full_signature": "@Override public void configure(Context context)", "class_method_signature": "MultiportSyslogTCPSource.configure(Context context)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "MultiportSyslogTCPSource.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "MultiportSyslogTCPSource.stop()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MultiportSyslogTCPSource.toString()", "testcase": false, "constructor": false}, {"identifier": "getBatchSize", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getBatchSize()", "full_signature": "@Override public long getBatchSize()", "class_method_signature": "MultiportSyslogTCPSource.getBatchSize()", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/source/MultiportSyslogTCPSource.java"}, "focal_method": {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void stop() {\n    logger.info(\"Stopping {}...\", this);\n\n    acceptor.unbind();\n    acceptor.dispose();\n\n    sourceCounter.stop();\n    super.stop();\n\n    logger.info(\"{} stopped. Metrics: {}\", this, sourceCounter);\n  }", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "MultiportSyslogTCPSource.stop()", "testcase": false, "constructor": false, "invocations": ["info", "unbind", "dispose", "stop", "stop", "info"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}