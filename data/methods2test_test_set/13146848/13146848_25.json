{"test_class": {"identifier": "HasSelectedPagesValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HasSelectedPagesValidator victim = new HasSelectedPagesValidator();", "modifier": "private", "type": "HasSelectedPagesValidator", "declarator": "victim = new HasSelectedPagesValidator()", "var_name": "victim"}, {"original_string": "private ExtractPagesParameters params = mock(ExtractPagesParameters.class);", "modifier": "private", "type": "ExtractPagesParameters", "declarator": "params = mock(ExtractPagesParameters.class)", "var_name": "params"}, {"original_string": "private PageRange range = new PageRange(10);", "modifier": "private", "type": "PageRange", "declarator": "range = new PageRange(10)", "var_name": "range"}], "file": "sejda-model/src/test/java/org/sejda/model/validation/validator/HasSelectedPagesValidatorTest.java"}, "test_case": {"identifier": "testHasBoth", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHasBoth() {\n        when(params.getPredefinedSetOfPages()).thenReturn(PredefinedSetOfPages.EVEN_PAGES);\n        when(params.getPageSelection()).thenReturn(Collections.singleton(range));\n        assertTrue(victim.isValid(params, null));\n    }", "signature": "void testHasBoth()", "full_signature": "@Test public void testHasBoth()", "class_method_signature": "HasSelectedPagesValidatorTest.testHasBoth()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getPredefinedSetOfPages", "thenReturn", "when", "getPageSelection", "singleton", "assertTrue", "isValid"]}, "focal_class": {"identifier": "HasSelectedPagesValidator", "superclass": "", "interfaces": "implements ConstraintValidator<HasSelectedPages, ExtractPagesParameters>", "fields": [], "methods": [{"identifier": "initialize", "parameters": "(HasSelectedPages constraintAnnotation)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(HasSelectedPages constraintAnnotation)", "full_signature": "@Override public void initialize(HasSelectedPages constraintAnnotation)", "class_method_signature": "HasSelectedPagesValidator.initialize(HasSelectedPages constraintAnnotation)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(ExtractPagesParameters value, ConstraintValidatorContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid(ExtractPagesParameters value, ConstraintValidatorContext context)", "full_signature": "@Override public boolean isValid(ExtractPagesParameters value, ConstraintValidatorContext context)", "class_method_signature": "HasSelectedPagesValidator.isValid(ExtractPagesParameters value, ConstraintValidatorContext context)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/model/validation/validator/HasSelectedPagesValidator.java"}, "focal_method": {"identifier": "isValid", "parameters": "(ExtractPagesParameters value, ConstraintValidatorContext context)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isValid(ExtractPagesParameters value, ConstraintValidatorContext context) {\n        if (value != null) {\n            return value.getPredefinedSetOfPages() != PredefinedSetOfPages.NONE || !value.getPageSelection().isEmpty();\n        }\n        return true;\n    }", "signature": "boolean isValid(ExtractPagesParameters value, ConstraintValidatorContext context)", "full_signature": "@Override public boolean isValid(ExtractPagesParameters value, ConstraintValidatorContext context)", "class_method_signature": "HasSelectedPagesValidator.isValid(ExtractPagesParameters value, ConstraintValidatorContext context)", "testcase": false, "constructor": false, "invocations": ["getPredefinedSetOfPages", "isEmpty", "getPageSelection"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}