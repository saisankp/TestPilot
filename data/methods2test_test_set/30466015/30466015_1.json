{"test_class": {"identifier": "BPIServiceClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-d\");", "modifier": "private static", "type": "SimpleDateFormat", "declarator": "dateFormat = new SimpleDateFormat(\"yyyy-MM-d\")", "var_name": "dateFormat"}], "file": "app/src/test/java/com/romainpiel/bitcointracker/network/BPIServiceClientTest.java"}, "test_case": {"identifier": "getHistory_oneNext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getHistory_oneNext() throws ParseException {\n        BPIService service = mock(BPIService.class);\n        when(service.getHistory()).thenReturn(Observable.from(new HistoryDto[] {\n                newHistory(3)\n        }));\n        BPIServiceClient client = new BPIServiceClient(service);\n\n        TestSubscriber<List<BPI>> subscriber = new TestSubscriber<>();\n        client.getHistory().subscribe(subscriber);\n\n        List<List<BPI>> expectedResults = new ArrayList<>();\n        expectedResults.add(Lists.newArrayList(\n                new BPI(newDate(3), 3f, 1f/2f),\n                new BPI(newDate(2), 2f, 1f)\n        ));\n        subscriber.assertReceivedOnNext(expectedResults);\n        subscriber.assertTerminalEvent();\n        subscriber.assertNoErrors();\n    }", "signature": "void getHistory_oneNext()", "full_signature": "@Test public void getHistory_oneNext()", "class_method_signature": "BPIServiceClientTest.getHistory_oneNext()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getHistory", "from", "newHistory", "subscribe", "getHistory", "add", "newArrayList", "newDate", "newDate", "assertReceivedOnNext", "assertTerminalEvent", "assertNoErrors"]}, "focal_class": {"identifier": "BPIServiceClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BPIService bpiService;", "modifier": "private", "type": "BPIService", "declarator": "bpiService", "var_name": "bpiService"}], "methods": [{"identifier": "BPIServiceClient", "parameters": "(BPIService bpiService)", "modifiers": "public", "return": "", "signature": " BPIServiceClient(BPIService bpiService)", "full_signature": "public  BPIServiceClient(BPIService bpiService)", "class_method_signature": "BPIServiceClient.BPIServiceClient(BPIService bpiService)", "testcase": false, "constructor": true}, {"identifier": "getCurrentUSDPrice", "parameters": "()", "modifiers": "public", "return": "Observable<BPI>", "signature": "Observable<BPI> getCurrentUSDPrice()", "full_signature": "public Observable<BPI> getCurrentUSDPrice()", "class_method_signature": "BPIServiceClient.getCurrentUSDPrice()", "testcase": false, "constructor": false}, {"identifier": "getHistory", "parameters": "()", "modifiers": "public", "return": "Observable<List<BPI>>", "signature": "Observable<List<BPI>> getHistory()", "full_signature": "public Observable<List<BPI>> getHistory()", "class_method_signature": "BPIServiceClient.getHistory()", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/romainpiel/bitcointracker/network/BPIServiceClient.java"}, "focal_method": {"identifier": "getHistory", "parameters": "()", "modifiers": "public", "return": "Observable<List<BPI>>", "body": "public Observable<List<BPI>> getHistory() {\n        return bpiService.getHistory().flatMap(new Func1<HistoryDto, Observable<List<BPI>>>() {\n            @Override\n            public Observable<List<BPI>> call(HistoryDto historyDto) {\n                return Observable.from(historyDto.getBpi().entrySet())\n                        .map(new Func1<Map.Entry<Date, Float>, BPI>() {\n                            @Override\n                            public BPI call(Map.Entry<Date, Float> entry) {\n                                return new BPI(entry.getKey(), entry.getValue());\n                            }\n                        })\n                        .scan(new Func2<BPI, BPI, BPI>() {\n                            @Override\n                            public BPI call(BPI bpi, BPI bpi2) {\n                                if (bpi.getClose() != 0) {\n                                    bpi2.setChange(bpi);\n                                }\n                                return bpi2;\n                            }\n                        })\n                        .filter(new Func1<BPI, Boolean>() {\n                            @Override\n                            public Boolean call(BPI bpi) {\n                                return bpi.getChange() != null;\n                            }\n                        })\n                        .toSortedList(new Func2<BPI, BPI, Integer>() {\n                            @Override\n                            public Integer call(BPI bpi, BPI bpi2) {\n                                // DESC order\n                                return - bpi.getDate().compareTo(bpi2.getDate());\n                            }\n                        });\n            }\n        });\n    }", "signature": "Observable<List<BPI>> getHistory()", "full_signature": "public Observable<List<BPI>> getHistory()", "class_method_signature": "BPIServiceClient.getHistory()", "testcase": false, "constructor": false, "invocations": ["flatMap", "getHistory", "toSortedList", "filter", "scan", "map", "from", "entrySet", "getBpi", "getKey", "getValue", "getClose", "setChange", "getChange", "compareTo", "getDate", "getDate"]}, "repository": {"repo_id": 30466015, "url": "https://github.com/romainpiel/BitCoin-Tracker", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 10, "size": 628, "license": "licensed"}}