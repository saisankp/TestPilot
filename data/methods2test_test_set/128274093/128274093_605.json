{"test_class": {"identifier": "FunctionsTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/functions/FunctionsTest.java"}, "test_case": {"identifier": "toFunction2", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void toFunction2() throws Exception {\n        Functions.toFunction(new BiFunction<Integer, Integer, Integer>() {\n            @Override\n            public Integer apply(Integer t1, Integer t2) throws Exception {\n                return null;\n            }\n        }).apply(new Object[20]);\n    }", "signature": "void toFunction2()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void toFunction2()", "class_method_signature": "FunctionsTest.toFunction2()", "testcase": true, "constructor": false, "invocations": ["apply", "toFunction"]}, "focal_class": {"identifier": "Functions", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Function<Object, Object> IDENTITY = new Identity();", "modifier": "static final", "type": "Function<Object, Object>", "declarator": "IDENTITY = new Identity()", "var_name": "IDENTITY"}, {"original_string": "public static final Runnable EMPTY_RUNNABLE = new EmptyRunnable();", "modifier": "public static final", "type": "Runnable", "declarator": "EMPTY_RUNNABLE = new EmptyRunnable()", "var_name": "EMPTY_RUNNABLE"}, {"original_string": "public static final Action EMPTY_ACTION = new EmptyAction();", "modifier": "public static final", "type": "Action", "declarator": "EMPTY_ACTION = new EmptyAction()", "var_name": "EMPTY_ACTION"}, {"original_string": "static final Consumer<Object> EMPTY_CONSUMER = new EmptyConsumer();", "modifier": "static final", "type": "Consumer<Object>", "declarator": "EMPTY_CONSUMER = new EmptyConsumer()", "var_name": "EMPTY_CONSUMER"}, {"original_string": "public static final Consumer<Throwable> ERROR_CONSUMER = new ErrorConsumer();", "modifier": "public static final", "type": "Consumer<Throwable>", "declarator": "ERROR_CONSUMER = new ErrorConsumer()", "var_name": "ERROR_CONSUMER"}, {"original_string": "public static final Consumer<Throwable> ON_ERROR_MISSING = new OnErrorMissingConsumer();", "modifier": "public static final", "type": "Consumer<Throwable>", "declarator": "ON_ERROR_MISSING = new OnErrorMissingConsumer()", "var_name": "ON_ERROR_MISSING"}, {"original_string": "public static final LongConsumer EMPTY_LONG_CONSUMER = new EmptyLongConsumer();", "modifier": "public static final", "type": "LongConsumer", "declarator": "EMPTY_LONG_CONSUMER = new EmptyLongConsumer()", "var_name": "EMPTY_LONG_CONSUMER"}, {"original_string": "static final Predicate<Object> ALWAYS_TRUE = new TruePredicate();", "modifier": "static final", "type": "Predicate<Object>", "declarator": "ALWAYS_TRUE = new TruePredicate()", "var_name": "ALWAYS_TRUE"}, {"original_string": "static final Predicate<Object> ALWAYS_FALSE = new FalsePredicate();", "modifier": "static final", "type": "Predicate<Object>", "declarator": "ALWAYS_FALSE = new FalsePredicate()", "var_name": "ALWAYS_FALSE"}, {"original_string": "static final Callable<Object> NULL_SUPPLIER = new NullCallable();", "modifier": "static final", "type": "Callable<Object>", "declarator": "NULL_SUPPLIER = new NullCallable()", "var_name": "NULL_SUPPLIER"}, {"original_string": "static final Comparator<Object> NATURAL_COMPARATOR = new NaturalObjectComparator();", "modifier": "static final", "type": "Comparator<Object>", "declarator": "NATURAL_COMPARATOR = new NaturalObjectComparator()", "var_name": "NATURAL_COMPARATOR"}, {"original_string": "public static final Consumer<Subscription> REQUEST_MAX = new MaxRequestSubscription();", "modifier": "public static final", "type": "Consumer<Subscription>", "declarator": "REQUEST_MAX = new MaxRequestSubscription()", "var_name": "REQUEST_MAX"}], "methods": [{"identifier": "Functions", "parameters": "()", "modifiers": "private", "return": "", "signature": " Functions()", "full_signature": "private  Functions()", "class_method_signature": "Functions.Functions()", "testcase": false, "constructor": true}, {"identifier": "toFunction", "parameters": "(final BiFunction<? super T1, ? super T2, ? extends R> f)", "modifiers": "public static", "return": "Function<Object[], R>", "signature": "Function<Object[], R> toFunction(final BiFunction<? super T1, ? super T2, ? extends R> f)", "full_signature": "public static Function<Object[], R> toFunction(final BiFunction<? super T1, ? super T2, ? extends R> f)", "class_method_signature": "Functions.toFunction(final BiFunction<? super T1, ? super T2, ? extends R> f)", "testcase": false, "constructor": false}, {"identifier": "toFunction", "parameters": "(final Function3<T1, T2, T3, R> f)", "modifiers": "public static", "return": "Function<Object[], R>", "signature": "Function<Object[], R> toFunction(final Function3<T1, T2, T3, R> f)", "full_signature": "public static Function<Object[], R> toFunction(final Function3<T1, T2, T3, R> f)", "class_method_signature": "Functions.toFunction(final Function3<T1, T2, T3, R> f)", "testcase": false, "constructor": false}, {"identifier": "toFunction", "parameters": "(final Function4<T1, T2, T3, T4, R> f)", "modifiers": "public static", "return": "Function<Object[], R>", "signature": "Function<Object[], R> toFunction(final Function4<T1, T2, T3, T4, R> f)", "full_signature": "public static Function<Object[], R> toFunction(final Function4<T1, T2, T3, T4, R> f)", "class_method_signature": "Functions.toFunction(final Function4<T1, T2, T3, T4, R> f)", "testcase": false, "constructor": false}, {"identifier": "toFunction", "parameters": "(final Function5<T1, T2, T3, T4, T5, R> f)", "modifiers": "public static", "return": "Function<Object[], R>", "signature": "Function<Object[], R> toFunction(final Function5<T1, T2, T3, T4, T5, R> f)", "full_signature": "public static Function<Object[], R> toFunction(final Function5<T1, T2, T3, T4, T5, R> f)", "class_method_signature": "Functions.toFunction(final Function5<T1, T2, T3, T4, T5, R> f)", "testcase": false, "constructor": false}, {"identifier": "toFunction", "parameters": "(\n            final Function6<T1, T2, T3, T4, T5, T6, R> f)", "modifiers": "public static", "return": "Function<Object[], R>", "signature": "Function<Object[], R> toFunction(\n            final Function6<T1, T2, T3, T4, T5, T6, R> f)", "full_signature": "public static Function<Object[], R> toFunction(\n            final Function6<T1, T2, T3, T4, T5, T6, R> f)", "class_method_signature": "Functions.toFunction(\n            final Function6<T1, T2, T3, T4, T5, T6, R> f)", "testcase": false, "constructor": false}, {"identifier": "toFunction", "parameters": "(\n            final Function7<T1, T2, T3, T4, T5, T6, T7, R> f)", "modifiers": "public static", "return": "Function<Object[], R>", "signature": "Function<Object[], R> toFunction(\n            final Function7<T1, T2, T3, T4, T5, T6, T7, R> f)", "full_signature": "public static Function<Object[], R> toFunction(\n            final Function7<T1, T2, T3, T4, T5, T6, T7, R> f)", "class_method_signature": "Functions.toFunction(\n            final Function7<T1, T2, T3, T4, T5, T6, T7, R> f)", "testcase": false, "constructor": false}, {"identifier": "toFunction", "parameters": "(\n            final Function8<T1, T2, T3, T4, T5, T6, T7, T8, R> f)", "modifiers": "public static", "return": "Function<Object[], R>", "signature": "Function<Object[], R> toFunction(\n            final Function8<T1, T2, T3, T4, T5, T6, T7, T8, R> f)", "full_signature": "public static Function<Object[], R> toFunction(\n            final Function8<T1, T2, T3, T4, T5, T6, T7, T8, R> f)", "class_method_signature": "Functions.toFunction(\n            final Function8<T1, T2, T3, T4, T5, T6, T7, T8, R> f)", "testcase": false, "constructor": false}, {"identifier": "toFunction", "parameters": "(\n            final Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> f)", "modifiers": "public static", "return": "Function<Object[], R>", "signature": "Function<Object[], R> toFunction(\n            final Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> f)", "full_signature": "public static Function<Object[], R> toFunction(\n            final Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> f)", "class_method_signature": "Functions.toFunction(\n            final Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> f)", "testcase": false, "constructor": false}, {"identifier": "identity", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Function<T, T>", "signature": "Function<T, T> identity()", "full_signature": "@SuppressWarnings(\"unchecked\") public static Function<T, T> identity()", "class_method_signature": "Functions.identity()", "testcase": false, "constructor": false}, {"identifier": "emptyConsumer", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Consumer<T>", "signature": "Consumer<T> emptyConsumer()", "full_signature": "@SuppressWarnings(\"unchecked\") public static Consumer<T> emptyConsumer()", "class_method_signature": "Functions.emptyConsumer()", "testcase": false, "constructor": false}, {"identifier": "alwaysTrue", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Predicate<T>", "signature": "Predicate<T> alwaysTrue()", "full_signature": "@SuppressWarnings(\"unchecked\") public static Predicate<T> alwaysTrue()", "class_method_signature": "Functions.alwaysTrue()", "testcase": false, "constructor": false}, {"identifier": "alwaysFalse", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Predicate<T>", "signature": "Predicate<T> alwaysFalse()", "full_signature": "@SuppressWarnings(\"unchecked\") public static Predicate<T> alwaysFalse()", "class_method_signature": "Functions.alwaysFalse()", "testcase": false, "constructor": false}, {"identifier": "nullSupplier", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Callable<T>", "signature": "Callable<T> nullSupplier()", "full_signature": "@SuppressWarnings(\"unchecked\") public static Callable<T> nullSupplier()", "class_method_signature": "Functions.nullSupplier()", "testcase": false, "constructor": false}, {"identifier": "naturalOrder", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Comparator<T>", "signature": "Comparator<T> naturalOrder()", "full_signature": "@SuppressWarnings(\"unchecked\") public static Comparator<T> naturalOrder()", "class_method_signature": "Functions.naturalOrder()", "testcase": false, "constructor": false}, {"identifier": "futureAction", "parameters": "(Future<?> future)", "modifiers": "public static", "return": "Action", "signature": "Action futureAction(Future<?> future)", "full_signature": "public static Action futureAction(Future<?> future)", "class_method_signature": "Functions.futureAction(Future<?> future)", "testcase": false, "constructor": false}, {"identifier": "justCallable", "parameters": "(T value)", "modifiers": "public static", "return": "Callable<T>", "signature": "Callable<T> justCallable(T value)", "full_signature": "public static Callable<T> justCallable(T value)", "class_method_signature": "Functions.justCallable(T value)", "testcase": false, "constructor": false}, {"identifier": "justFunction", "parameters": "(U value)", "modifiers": "public static", "return": "Function<T, U>", "signature": "Function<T, U> justFunction(U value)", "full_signature": "public static Function<T, U> justFunction(U value)", "class_method_signature": "Functions.justFunction(U value)", "testcase": false, "constructor": false}, {"identifier": "castFunction", "parameters": "(Class<U> target)", "modifiers": "public static", "return": "Function<T, U>", "signature": "Function<T, U> castFunction(Class<U> target)", "full_signature": "public static Function<T, U> castFunction(Class<U> target)", "class_method_signature": "Functions.castFunction(Class<U> target)", "testcase": false, "constructor": false}, {"identifier": "createArrayList", "parameters": "(int capacity)", "modifiers": "public static", "return": "Callable<List<T>>", "signature": "Callable<List<T>> createArrayList(int capacity)", "full_signature": "public static Callable<List<T>> createArrayList(int capacity)", "class_method_signature": "Functions.createArrayList(int capacity)", "testcase": false, "constructor": false}, {"identifier": "equalsWith", "parameters": "(T value)", "modifiers": "public static", "return": "Predicate<T>", "signature": "Predicate<T> equalsWith(T value)", "full_signature": "public static Predicate<T> equalsWith(T value)", "class_method_signature": "Functions.equalsWith(T value)", "testcase": false, "constructor": false}, {"identifier": "createHashSet", "parameters": "()", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) public static", "return": "Callable<Set<T>>", "signature": "Callable<Set<T>> createHashSet()", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) public static Callable<Set<T>> createHashSet()", "class_method_signature": "Functions.createHashSet()", "testcase": false, "constructor": false}, {"identifier": "notificationOnNext", "parameters": "(Consumer<? super Notification<T>> onNotification)", "modifiers": "public static", "return": "Consumer<T>", "signature": "Consumer<T> notificationOnNext(Consumer<? super Notification<T>> onNotification)", "full_signature": "public static Consumer<T> notificationOnNext(Consumer<? super Notification<T>> onNotification)", "class_method_signature": "Functions.notificationOnNext(Consumer<? super Notification<T>> onNotification)", "testcase": false, "constructor": false}, {"identifier": "notificationOnError", "parameters": "(Consumer<? super Notification<T>> onNotification)", "modifiers": "public static", "return": "Consumer<Throwable>", "signature": "Consumer<Throwable> notificationOnError(Consumer<? super Notification<T>> onNotification)", "full_signature": "public static Consumer<Throwable> notificationOnError(Consumer<? super Notification<T>> onNotification)", "class_method_signature": "Functions.notificationOnError(Consumer<? super Notification<T>> onNotification)", "testcase": false, "constructor": false}, {"identifier": "notificationOnComplete", "parameters": "(Consumer<? super Notification<T>> onNotification)", "modifiers": "public static", "return": "Action", "signature": "Action notificationOnComplete(Consumer<? super Notification<T>> onNotification)", "full_signature": "public static Action notificationOnComplete(Consumer<? super Notification<T>> onNotification)", "class_method_signature": "Functions.notificationOnComplete(Consumer<? super Notification<T>> onNotification)", "testcase": false, "constructor": false}, {"identifier": "actionConsumer", "parameters": "(Action action)", "modifiers": "public static", "return": "Consumer<T>", "signature": "Consumer<T> actionConsumer(Action action)", "full_signature": "public static Consumer<T> actionConsumer(Action action)", "class_method_signature": "Functions.actionConsumer(Action action)", "testcase": false, "constructor": false}, {"identifier": "isInstanceOf", "parameters": "(Class<U> clazz)", "modifiers": "public static", "return": "Predicate<T>", "signature": "Predicate<T> isInstanceOf(Class<U> clazz)", "full_signature": "public static Predicate<T> isInstanceOf(Class<U> clazz)", "class_method_signature": "Functions.isInstanceOf(Class<U> clazz)", "testcase": false, "constructor": false}, {"identifier": "predicateReverseFor", "parameters": "(BooleanSupplier supplier)", "modifiers": "public static", "return": "Predicate<T>", "signature": "Predicate<T> predicateReverseFor(BooleanSupplier supplier)", "full_signature": "public static Predicate<T> predicateReverseFor(BooleanSupplier supplier)", "class_method_signature": "Functions.predicateReverseFor(BooleanSupplier supplier)", "testcase": false, "constructor": false}, {"identifier": "timestampWith", "parameters": "(TimeUnit unit, Scheduler scheduler)", "modifiers": "public static", "return": "Function<T, Timed<T>>", "signature": "Function<T, Timed<T>> timestampWith(TimeUnit unit, Scheduler scheduler)", "full_signature": "public static Function<T, Timed<T>> timestampWith(TimeUnit unit, Scheduler scheduler)", "class_method_signature": "Functions.timestampWith(TimeUnit unit, Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "toMapKeySelector", "parameters": "(final Function<? super T, ? extends K> keySelector)", "modifiers": "public static", "return": "BiConsumer<Map<K, T>, T>", "signature": "BiConsumer<Map<K, T>, T> toMapKeySelector(final Function<? super T, ? extends K> keySelector)", "full_signature": "public static BiConsumer<Map<K, T>, T> toMapKeySelector(final Function<? super T, ? extends K> keySelector)", "class_method_signature": "Functions.toMapKeySelector(final Function<? super T, ? extends K> keySelector)", "testcase": false, "constructor": false}, {"identifier": "toMapKeyValueSelector", "parameters": "(final Function<? super T, ? extends K> keySelector, final Function<? super T, ? extends V> valueSelector)", "modifiers": "public static", "return": "BiConsumer<Map<K, V>, T>", "signature": "BiConsumer<Map<K, V>, T> toMapKeyValueSelector(final Function<? super T, ? extends K> keySelector, final Function<? super T, ? extends V> valueSelector)", "full_signature": "public static BiConsumer<Map<K, V>, T> toMapKeyValueSelector(final Function<? super T, ? extends K> keySelector, final Function<? super T, ? extends V> valueSelector)", "class_method_signature": "Functions.toMapKeyValueSelector(final Function<? super T, ? extends K> keySelector, final Function<? super T, ? extends V> valueSelector)", "testcase": false, "constructor": false}, {"identifier": "toMultimapKeyValueSelector", "parameters": "(\n            final Function<? super T, ? extends K> keySelector, final Function<? super T, ? extends V> valueSelector,\n            final Function<? super K, ? extends Collection<? super V>> collectionFactory)", "modifiers": "public static", "return": "BiConsumer<Map<K, Collection<V>>, T>", "signature": "BiConsumer<Map<K, Collection<V>>, T> toMultimapKeyValueSelector(\n            final Function<? super T, ? extends K> keySelector, final Function<? super T, ? extends V> valueSelector,\n            final Function<? super K, ? extends Collection<? super V>> collectionFactory)", "full_signature": "public static BiConsumer<Map<K, Collection<V>>, T> toMultimapKeyValueSelector(\n            final Function<? super T, ? extends K> keySelector, final Function<? super T, ? extends V> valueSelector,\n            final Function<? super K, ? extends Collection<? super V>> collectionFactory)", "class_method_signature": "Functions.toMultimapKeyValueSelector(\n            final Function<? super T, ? extends K> keySelector, final Function<? super T, ? extends V> valueSelector,\n            final Function<? super K, ? extends Collection<? super V>> collectionFactory)", "testcase": false, "constructor": false}, {"identifier": "naturalComparator", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Comparator<T>", "signature": "Comparator<T> naturalComparator()", "full_signature": "@SuppressWarnings(\"unchecked\") public static Comparator<T> naturalComparator()", "class_method_signature": "Functions.naturalComparator()", "testcase": false, "constructor": false}, {"identifier": "listSorter", "parameters": "(final Comparator<? super T> comparator)", "modifiers": "public static", "return": "Function<List<T>, List<T>>", "signature": "Function<List<T>, List<T>> listSorter(final Comparator<? super T> comparator)", "full_signature": "public static Function<List<T>, List<T>> listSorter(final Comparator<? super T> comparator)", "class_method_signature": "Functions.listSorter(final Comparator<? super T> comparator)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/functions/Functions.java"}, "focal_method": {"identifier": "toFunction", "parameters": "(final BiFunction<? super T1, ? super T2, ? extends R> f)", "modifiers": "public static", "return": "Function<Object[], R>", "body": "public static <T1, T2, R> Function<Object[], R> toFunction(final BiFunction<? super T1, ? super T2, ? extends R> f) {\n        ObjectHelper.requireNonNull(f, \"f is null\");\n        return new Array2Func<T1, T2, R>(f);\n    }", "signature": "Function<Object[], R> toFunction(final BiFunction<? super T1, ? super T2, ? extends R> f)", "full_signature": "public static Function<Object[], R> toFunction(final BiFunction<? super T1, ? super T2, ? extends R> f)", "class_method_signature": "Functions.toFunction(final BiFunction<? super T1, ? super T2, ? extends R> f)", "testcase": false, "constructor": false, "invocations": ["requireNonNull"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}