{"test_class": {"identifier": "MavenColorRendererTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ClearSystemProperties myPropertyIsCleared = new ClearSystemProperties(\"maven.color.hide.level\");", "modifier": "@Rule\n    public", "type": "ClearSystemProperties", "declarator": "myPropertyIsCleared = new ClearSystemProperties(\"maven.color.hide.level\")", "var_name": "myPropertyIsCleared"}, {"original_string": "private static final Logger LOGGER = getLogger(MavenColorRendererTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = getLogger(MavenColorRendererTest.class)", "var_name": "LOGGER"}], "file": "maven-color-gossip/src/test/java/com/github/jcgay/maven/color/gossip/MavenColorRendererTest.java"}, "test_case": {"identifier": "do_not_render_level_when_colorization_is_activated_and_property_equals_true", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void do_not_render_level_when_colorization_is_activated_and_property_equals_true() {\n        System.setProperty(\"maven.color.hide.level\", \"true\");\n        StringBuilder result = new StringBuilder();\n\n        new MavenColorRenderer(true).renderLevel(event(INFO, \"message\"), result);\n\n        assertThat(result.toString()).isEmpty();\n    }", "signature": "void do_not_render_level_when_colorization_is_activated_and_property_equals_true()", "full_signature": "@Test public void do_not_render_level_when_colorization_is_activated_and_property_equals_true()", "class_method_signature": "MavenColorRendererTest.do_not_render_level_when_colorization_is_activated_and_property_equals_true()", "testcase": true, "constructor": false, "invocations": ["setProperty", "renderLevel", "event", "isEmpty", "assertThat", "toString"]}, "focal_class": {"identifier": "MavenColorRenderer", "superclass": "extends PatternRenderer", "interfaces": "", "fields": [{"original_string": "private static final String MC_PATTERN = \"%l%m%n%x\";", "modifier": "private static final", "type": "String", "declarator": "MC_PATTERN = \"%l%m%n%x\"", "var_name": "MC_PATTERN"}, {"original_string": "private static final Logger LOGGER = getLogger(MavenColorRenderer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = getLogger(MavenColorRenderer.class)", "var_name": "LOGGER"}, {"original_string": "private final Colorizer colorizer;", "modifier": "private final", "type": "Colorizer", "declarator": "colorizer", "var_name": "colorizer"}, {"original_string": "private final boolean isActivated;", "modifier": "private final", "type": "boolean", "declarator": "isActivated", "var_name": "isActivated"}], "methods": [{"identifier": "MavenColorRenderer", "parameters": "()", "modifiers": "public", "return": "", "signature": " MavenColorRenderer()", "full_signature": "public  MavenColorRenderer()", "class_method_signature": "MavenColorRenderer.MavenColorRenderer()", "testcase": false, "constructor": true}, {"identifier": "MavenColorRenderer", "parameters": "(boolean isActivated)", "modifiers": "public", "return": "", "signature": " MavenColorRenderer(boolean isActivated)", "full_signature": "public  MavenColorRenderer(boolean isActivated)", "class_method_signature": "MavenColorRenderer.MavenColorRenderer(boolean isActivated)", "testcase": false, "constructor": true}, {"identifier": "MavenColorRenderer", "parameters": "(String pattern)", "modifiers": "public", "return": "", "signature": " MavenColorRenderer(String pattern)", "full_signature": "public  MavenColorRenderer(String pattern)", "class_method_signature": "MavenColorRenderer.MavenColorRenderer(String pattern)", "testcase": false, "constructor": true}, {"identifier": "MavenColorRenderer", "parameters": "(String pattern, boolean isActivated)", "modifiers": "public", "return": "", "signature": " MavenColorRenderer(String pattern, boolean isActivated)", "full_signature": "public  MavenColorRenderer(String pattern, boolean isActivated)", "class_method_signature": "MavenColorRenderer.MavenColorRenderer(String pattern, boolean isActivated)", "testcase": false, "constructor": true}, {"identifier": "renderMessage", "parameters": "(Event event, StringBuilder buff)", "modifiers": "@Override protected", "return": "void", "signature": "void renderMessage(Event event, StringBuilder buff)", "full_signature": "@Override protected void renderMessage(Event event, StringBuilder buff)", "class_method_signature": "MavenColorRenderer.renderMessage(Event event, StringBuilder buff)", "testcase": false, "constructor": false}, {"identifier": "renderLevel", "parameters": "(Event event, StringBuilder buff)", "modifiers": "@Override protected", "return": "void", "signature": "void renderLevel(Event event, StringBuilder buff)", "full_signature": "@Override protected void renderLevel(Event event, StringBuilder buff)", "class_method_signature": "MavenColorRenderer.renderLevel(Event event, StringBuilder buff)", "testcase": false, "constructor": false}, {"identifier": "colorize", "parameters": "(Event event, Ansi.Color color)", "modifiers": "private static", "return": "String", "signature": "String colorize(Event event, Ansi.Color color)", "full_signature": "private static String colorize(Event event, Ansi.Color color)", "class_method_signature": "MavenColorRenderer.colorize(Event event, Ansi.Color color)", "testcase": false, "constructor": false}], "file": "maven-color-gossip/src/main/java/com/github/jcgay/maven/color/gossip/MavenColorRenderer.java"}, "focal_method": {"identifier": "renderLevel", "parameters": "(Event event, StringBuilder buff)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void renderLevel(Event event, StringBuilder buff) {\n        if (!isActivated) {\n            buff.append(\"[\");\n            super.renderLevel(event, buff);\n            buff.append(\"] \");\n            return;\n        }\n\n        if (event.getLevel() == ERROR) {\n            buff.append(ansi().fgBright(RED).bold().a(\"[\" + ERROR.name() + \"]\").reset())\n                .append(\" \");\n            return;\n        }\n\n        if (LogLevelActivation.isShown()) {\n            if (event.getLevel() == WARN) {\n                buff.append(ansi().fgBright(YELLOW).bold().a(\"[WARNING]\").reset())\n                    .append(\" \");\n\n            } else {\n                buff.append(\"[\");\n                super.renderLevel(event, buff);\n                buff.append(\"] \");\n            }\n        }\n    }", "signature": "void renderLevel(Event event, StringBuilder buff)", "full_signature": "@Override protected void renderLevel(Event event, StringBuilder buff)", "class_method_signature": "MavenColorRenderer.renderLevel(Event event, StringBuilder buff)", "testcase": false, "constructor": false, "invocations": ["append", "renderLevel", "append", "getLevel", "append", "append", "reset", "a", "bold", "fgBright", "ansi", "name", "isShown", "getLevel", "append", "append", "reset", "a", "bold", "fgBright", "ansi", "append", "renderLevel", "append"]}, "repository": {"repo_id": 9132656, "url": "https://github.com/jcgay/maven-color", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 177, "size": 264, "license": "licensed"}}