{"test_class": {"identifier": "AbstractFileTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected Vector<AbstractFile> filesToDelete;", "modifier": "protected", "type": "Vector<AbstractFile>", "declarator": "filesToDelete", "var_name": "filesToDelete"}, {"original_string": "protected AbstractFile tempFile;", "modifier": "protected", "type": "AbstractFile", "declarator": "tempFile", "var_name": "tempFile"}, {"original_string": "protected Random random;", "modifier": "protected", "type": "Random", "declarator": "random", "var_name": "random"}], "file": "mucommander-commons-file/src/test/java/com/mucommander/commons/file/AbstractFileTest.java"}, "test_case": {"identifier": "testGetAppendOutputStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAppendOutputStream() throws IOException, NoSuchAlgorithmException {\n        if(tempFile.isFileOperationSupported(FileOperation.APPEND_FILE))\n            testGetAppendOutputStreamSupported();\n        else\n            testGetAppendOutputStreamUnsupported();\n    }", "signature": "void testGetAppendOutputStream()", "full_signature": "@Test public void testGetAppendOutputStream()", "class_method_signature": "AbstractFileTest.testGetAppendOutputStream()", "testcase": true, "constructor": false, "invocations": ["isFileOperationSupported", "testGetAppendOutputStreamSupported", "testGetAppendOutputStreamUnsupported"]}, "focal_class": {"identifier": "AbstractFile", "superclass": "", "interfaces": "implements FileAttributes", "fields": [{"original_string": "protected FileURL fileURL;", "modifier": "protected", "type": "FileURL", "declarator": "fileURL", "var_name": "fileURL"}, {"original_string": "public final static String DEFAULT_SEPARATOR = \"/\";", "modifier": "public final static", "type": "String", "declarator": "DEFAULT_SEPARATOR = \"/\"", "var_name": "DEFAULT_SEPARATOR"}, {"original_string": "public final static int IO_BUFFER_SIZE = 65536;", "modifier": "public final static", "type": "int", "declarator": "IO_BUFFER_SIZE = 65536", "var_name": "IO_BUFFER_SIZE"}, {"original_string": "private String customExtension;", "modifier": "private", "type": "String", "declarator": "customExtension", "var_name": "customExtension"}], "methods": [{"identifier": "AbstractFile", "parameters": "(FileURL url)", "modifiers": "protected", "return": "", "signature": " AbstractFile(FileURL url)", "full_signature": "protected  AbstractFile(FileURL url)", "class_method_signature": "AbstractFile.AbstractFile(FileURL url)", "testcase": false, "constructor": true}, {"identifier": "getURL", "parameters": "()", "modifiers": "public", "return": "FileURL", "signature": "FileURL getURL()", "full_signature": "public FileURL getURL()", "class_method_signature": "AbstractFile.getURL()", "testcase": false, "constructor": false}, {"identifier": "getJavaNetURL", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL getJavaNetURL()", "full_signature": "public URL getJavaNetURL()", "class_method_signature": "AbstractFile.getJavaNetURL()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "AbstractFile.getName()", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getExtension()", "full_signature": "public String getExtension()", "class_method_signature": "AbstractFile.getExtension()", "testcase": false, "constructor": false}, {"identifier": "getAbsolutePath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAbsolutePath()", "full_signature": "public String getAbsolutePath()", "class_method_signature": "AbstractFile.getAbsolutePath()", "testcase": false, "constructor": false}, {"identifier": "getCanonicalPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCanonicalPath()", "full_signature": "public String getCanonicalPath()", "class_method_signature": "AbstractFile.getCanonicalPath()", "testcase": false, "constructor": false}, {"identifier": "getCanonicalFile", "parameters": "()", "modifiers": "public", "return": "AbstractFile", "signature": "AbstractFile getCanonicalFile()", "full_signature": "public AbstractFile getCanonicalFile()", "class_method_signature": "AbstractFile.getCanonicalFile()", "testcase": false, "constructor": false}, {"identifier": "getSeparator", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSeparator()", "full_signature": "public String getSeparator()", "class_method_signature": "AbstractFile.getSeparator()", "testcase": false, "constructor": false}, {"identifier": "isHidden", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isHidden()", "full_signature": "public boolean isHidden()", "class_method_signature": "AbstractFile.isHidden()", "testcase": false, "constructor": false}, {"identifier": "canRead", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canRead()", "full_signature": "public boolean canRead()", "class_method_signature": "AbstractFile.canRead()", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "public", "return": "AbstractFile", "signature": "AbstractFile getRoot()", "full_signature": "public AbstractFile getRoot()", "class_method_signature": "AbstractFile.getRoot()", "testcase": false, "constructor": false}, {"identifier": "isRoot", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRoot()", "full_signature": "public boolean isRoot()", "class_method_signature": "AbstractFile.isRoot()", "testcase": false, "constructor": false}, {"identifier": "getVolume", "parameters": "()", "modifiers": "public", "return": "AbstractFile", "signature": "AbstractFile getVolume()", "full_signature": "public AbstractFile getVolume()", "class_method_signature": "AbstractFile.getVolume()", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(long offset)", "modifiers": "public", "return": "InputStream", "signature": "InputStream getInputStream(long offset)", "full_signature": "public InputStream getInputStream(long offset)", "class_method_signature": "AbstractFile.getInputStream(long offset)", "testcase": false, "constructor": false}, {"identifier": "copyStream", "parameters": "(InputStream in, boolean append, long length)", "modifiers": "public", "return": "void", "signature": "void copyStream(InputStream in, boolean append, long length)", "full_signature": "public void copyStream(InputStream in, boolean append, long length)", "class_method_signature": "AbstractFile.copyStream(InputStream in, boolean append, long length)", "testcase": false, "constructor": false}, {"identifier": "copyTo", "parameters": "(AbstractFile destFile)", "modifiers": "public final", "return": "void", "signature": "void copyTo(AbstractFile destFile)", "full_signature": "public final void copyTo(AbstractFile destFile)", "class_method_signature": "AbstractFile.copyTo(AbstractFile destFile)", "testcase": false, "constructor": false}, {"identifier": "moveTo", "parameters": "(AbstractFile destFile)", "modifiers": "public final", "return": "void", "signature": "void moveTo(AbstractFile destFile)", "full_signature": "public final void moveTo(AbstractFile destFile)", "class_method_signature": "AbstractFile.moveTo(AbstractFile destFile)", "testcase": false, "constructor": false}, {"identifier": "mkfile", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void mkfile()", "full_signature": "public void mkfile()", "class_method_signature": "AbstractFile.mkfile()", "testcase": false, "constructor": false}, {"identifier": "ls", "parameters": "(FileFilter filter)", "modifiers": "public", "return": "AbstractFile[]", "signature": "AbstractFile[] ls(FileFilter filter)", "full_signature": "public AbstractFile[] ls(FileFilter filter)", "class_method_signature": "AbstractFile.ls(FileFilter filter)", "testcase": false, "constructor": false}, {"identifier": "ls", "parameters": "(FilenameFilter filter)", "modifiers": "public", "return": "AbstractFile[]", "signature": "AbstractFile[] ls(FilenameFilter filter)", "full_signature": "public AbstractFile[] ls(FilenameFilter filter)", "class_method_signature": "AbstractFile.ls(FilenameFilter filter)", "testcase": false, "constructor": false}, {"identifier": "changePermissions", "parameters": "(int permissions)", "modifiers": "public", "return": "void", "signature": "void changePermissions(int permissions)", "full_signature": "public void changePermissions(int permissions)", "class_method_signature": "AbstractFile.changePermissions(int permissions)", "testcase": false, "constructor": false}, {"identifier": "getPermissionsString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPermissionsString()", "full_signature": "public String getPermissionsString()", "class_method_signature": "AbstractFile.getPermissionsString()", "testcase": false, "constructor": false}, {"identifier": "deleteRecursively", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deleteRecursively()", "full_signature": "public void deleteRecursively()", "class_method_signature": "AbstractFile.deleteRecursively()", "testcase": false, "constructor": false}, {"identifier": "isFileOperationSupported", "parameters": "(FileOperation op)", "modifiers": "public", "return": "boolean", "signature": "boolean isFileOperationSupported(FileOperation op)", "full_signature": "public boolean isFileOperationSupported(FileOperation op)", "class_method_signature": "AbstractFile.isFileOperationSupported(FileOperation op)", "testcase": false, "constructor": false}, {"identifier": "isBrowsable", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isBrowsable()", "full_signature": "public final boolean isBrowsable()", "class_method_signature": "AbstractFile.isBrowsable()", "testcase": false, "constructor": false}, {"identifier": "getNameWithoutExtension", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getNameWithoutExtension()", "full_signature": "public final String getNameWithoutExtension()", "class_method_signature": "AbstractFile.getNameWithoutExtension()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getPath()", "full_signature": "public final String getPath()", "class_method_signature": "AbstractFile.getPath()", "testcase": false, "constructor": false}, {"identifier": "getAbsolutePath", "parameters": "(boolean appendSeparator)", "modifiers": "public final", "return": "String", "signature": "String getAbsolutePath(boolean appendSeparator)", "full_signature": "public final String getAbsolutePath(boolean appendSeparator)", "class_method_signature": "AbstractFile.getAbsolutePath(boolean appendSeparator)", "testcase": false, "constructor": false}, {"identifier": "getCanonicalPath", "parameters": "(boolean appendSeparator)", "modifiers": "public final", "return": "String", "signature": "String getCanonicalPath(boolean appendSeparator)", "full_signature": "public final String getCanonicalPath(boolean appendSeparator)", "class_method_signature": "AbstractFile.getCanonicalPath(boolean appendSeparator)", "testcase": false, "constructor": false}, {"identifier": "getChild", "parameters": "(String relativePath)", "modifiers": "public final", "return": "AbstractFile", "signature": "AbstractFile getChild(String relativePath)", "full_signature": "public final AbstractFile getChild(String relativePath)", "class_method_signature": "AbstractFile.getChild(String relativePath)", "testcase": false, "constructor": false}, {"identifier": "getChild", "parameters": "(String relativePath, AbstractFile template)", "modifiers": "public", "return": "AbstractFile", "signature": "AbstractFile getChild(String relativePath, AbstractFile template)", "full_signature": "public AbstractFile getChild(String relativePath, AbstractFile template)", "class_method_signature": "AbstractFile.getChild(String relativePath, AbstractFile template)", "testcase": false, "constructor": false}, {"identifier": "getChildSilently", "parameters": "(String relativePath)", "modifiers": "public final", "return": "AbstractFile", "signature": "AbstractFile getChildSilently(String relativePath)", "full_signature": "public final AbstractFile getChildSilently(String relativePath)", "class_method_signature": "AbstractFile.getChildSilently(String relativePath)", "testcase": false, "constructor": false}, {"identifier": "getDirectChild", "parameters": "(String filename)", "modifiers": "public final", "return": "AbstractFile", "signature": "AbstractFile getDirectChild(String filename)", "full_signature": "public final AbstractFile getDirectChild(String filename)", "class_method_signature": "AbstractFile.getDirectChild(String filename)", "testcase": false, "constructor": false}, {"identifier": "getDirectChild", "parameters": "(String filename, AbstractFile template)", "modifiers": "public final", "return": "AbstractFile", "signature": "AbstractFile getDirectChild(String filename, AbstractFile template)", "full_signature": "public final AbstractFile getDirectChild(String filename, AbstractFile template)", "class_method_signature": "AbstractFile.getDirectChild(String filename, AbstractFile template)", "testcase": false, "constructor": false}, {"identifier": "mkdir", "parameters": "(String name)", "modifiers": "public final", "return": "void", "signature": "void mkdir(String name)", "full_signature": "public final void mkdir(String name)", "class_method_signature": "AbstractFile.mkdir(String name)", "testcase": false, "constructor": false}, {"identifier": "mkdirs", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void mkdirs()", "full_signature": "public final void mkdirs()", "class_method_signature": "AbstractFile.mkdirs()", "testcase": false, "constructor": false}, {"identifier": "mkfile", "parameters": "(String name)", "modifiers": "public final", "return": "void", "signature": "void mkfile(String name)", "full_signature": "public final void mkfile(String name)", "class_method_signature": "AbstractFile.mkfile(String name)", "testcase": false, "constructor": false}, {"identifier": "getAncestor", "parameters": "()", "modifiers": "public final", "return": "AbstractFile", "signature": "AbstractFile getAncestor()", "full_signature": "public final AbstractFile getAncestor()", "class_method_signature": "AbstractFile.getAncestor()", "testcase": false, "constructor": false}, {"identifier": "getAncestor", "parameters": "(Class<T> abstractFileClass)", "modifiers": "public final", "return": "T", "signature": "T getAncestor(Class<T> abstractFileClass)", "full_signature": "public final T getAncestor(Class<T> abstractFileClass)", "class_method_signature": "AbstractFile.getAncestor(Class<T> abstractFileClass)", "testcase": false, "constructor": false}, {"identifier": "getTopAncestor", "parameters": "()", "modifiers": "public final", "return": "AbstractFile", "signature": "AbstractFile getTopAncestor()", "full_signature": "public final AbstractFile getTopAncestor()", "class_method_signature": "AbstractFile.getTopAncestor()", "testcase": false, "constructor": false}, {"identifier": "hasAncestor", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean hasAncestor()", "full_signature": "public final boolean hasAncestor()", "class_method_signature": "AbstractFile.hasAncestor()", "testcase": false, "constructor": false}, {"identifier": "hasAncestor", "parameters": "(Class<? extends AbstractFile> abstractFileClass)", "modifiers": "public final", "return": "boolean", "signature": "boolean hasAncestor(Class<? extends AbstractFile> abstractFileClass)", "full_signature": "public final boolean hasAncestor(Class<? extends AbstractFile> abstractFileClass)", "class_method_signature": "AbstractFile.hasAncestor(Class<? extends AbstractFile> abstractFileClass)", "testcase": false, "constructor": false}, {"identifier": "isParentOf", "parameters": "(AbstractFile file)", "modifiers": "public final", "return": "boolean", "signature": "boolean isParentOf(AbstractFile file)", "full_signature": "public final boolean isParentOf(AbstractFile file)", "class_method_signature": "AbstractFile.isParentOf(AbstractFile file)", "testcase": false, "constructor": false}, {"identifier": "getParentArchive", "parameters": "()", "modifiers": "public final", "return": "AbstractArchiveFile", "signature": "AbstractArchiveFile getParentArchive()", "full_signature": "public final AbstractArchiveFile getParentArchive()", "class_method_signature": "AbstractFile.getParentArchive()", "testcase": false, "constructor": false}, {"identifier": "getIcon", "parameters": "(Dimension preferredResolution)", "modifiers": "public final", "return": "Icon", "signature": "Icon getIcon(Dimension preferredResolution)", "full_signature": "public final Icon getIcon(Dimension preferredResolution)", "class_method_signature": "AbstractFile.getIcon(Dimension preferredResolution)", "testcase": false, "constructor": false}, {"identifier": "getIcon", "parameters": "()", "modifiers": "public final", "return": "Icon", "signature": "Icon getIcon()", "full_signature": "public final Icon getIcon()", "class_method_signature": "AbstractFile.getIcon()", "testcase": false, "constructor": false}, {"identifier": "calculateChecksum", "parameters": "(String algorithm)", "modifiers": "public final", "return": "String", "signature": "String calculateChecksum(String algorithm)", "full_signature": "public final String calculateChecksum(String algorithm)", "class_method_signature": "AbstractFile.calculateChecksum(String algorithm)", "testcase": false, "constructor": false}, {"identifier": "calculateChecksum", "parameters": "(MessageDigest messageDigest)", "modifiers": "public final", "return": "String", "signature": "String calculateChecksum(MessageDigest messageDigest)", "full_signature": "public final String calculateChecksum(MessageDigest messageDigest)", "class_method_signature": "AbstractFile.calculateChecksum(MessageDigest messageDigest)", "testcase": false, "constructor": false}, {"identifier": "addTrailingSeparator", "parameters": "(String path)", "modifiers": "public final", "return": "String", "signature": "String addTrailingSeparator(String path)", "full_signature": "public final String addTrailingSeparator(String path)", "class_method_signature": "AbstractFile.addTrailingSeparator(String path)", "testcase": false, "constructor": false}, {"identifier": "removeTrailingSeparator", "parameters": "(String path)", "modifiers": "protected final", "return": "String", "signature": "String removeTrailingSeparator(String path)", "full_signature": "protected final String removeTrailingSeparator(String path)", "class_method_signature": "AbstractFile.removeTrailingSeparator(String path)", "testcase": false, "constructor": false}, {"identifier": "checkCopyPrerequisites", "parameters": "(AbstractFile destFile, boolean allowCaseVariations)", "modifiers": "protected final", "return": "void", "signature": "void checkCopyPrerequisites(AbstractFile destFile, boolean allowCaseVariations)", "full_signature": "protected final void checkCopyPrerequisites(AbstractFile destFile, boolean allowCaseVariations)", "class_method_signature": "AbstractFile.checkCopyPrerequisites(AbstractFile destFile, boolean allowCaseVariations)", "testcase": false, "constructor": false}, {"identifier": "checkCopyRemotelyPrerequisites", "parameters": "(AbstractFile destFile, boolean allowCaseVariations, boolean allowDifferentHosts)", "modifiers": "protected final", "return": "void", "signature": "void checkCopyRemotelyPrerequisites(AbstractFile destFile, boolean allowCaseVariations, boolean allowDifferentHosts)", "full_signature": "protected final void checkCopyRemotelyPrerequisites(AbstractFile destFile, boolean allowCaseVariations, boolean allowDifferentHosts)", "class_method_signature": "AbstractFile.checkCopyRemotelyPrerequisites(AbstractFile destFile, boolean allowCaseVariations, boolean allowDifferentHosts)", "testcase": false, "constructor": false}, {"identifier": "checkRenamePrerequisites", "parameters": "(AbstractFile destFile, boolean allowCaseVariations, boolean allowDifferentHosts)", "modifiers": "protected final", "return": "void", "signature": "void checkRenamePrerequisites(AbstractFile destFile, boolean allowCaseVariations, boolean allowDifferentHosts)", "full_signature": "protected final void checkRenamePrerequisites(AbstractFile destFile, boolean allowCaseVariations, boolean allowDifferentHosts)", "class_method_signature": "AbstractFile.checkRenamePrerequisites(AbstractFile destFile, boolean allowCaseVariations, boolean allowDifferentHosts)", "testcase": false, "constructor": false}, {"identifier": "copyRecursively", "parameters": "(AbstractFile sourceFile, AbstractFile destFile)", "modifiers": "protected final", "return": "void", "signature": "void copyRecursively(AbstractFile sourceFile, AbstractFile destFile)", "full_signature": "protected final void copyRecursively(AbstractFile sourceFile, AbstractFile destFile)", "class_method_signature": "AbstractFile.copyRecursively(AbstractFile sourceFile, AbstractFile destFile)", "testcase": false, "constructor": false}, {"identifier": "deleteRecursively", "parameters": "(AbstractFile file)", "modifiers": "protected final", "return": "void", "signature": "void deleteRecursively(AbstractFile file)", "full_signature": "protected final void deleteRecursively(AbstractFile file)", "class_method_signature": "AbstractFile.deleteRecursively(AbstractFile file)", "testcase": false, "constructor": false}, {"identifier": "changePermissions", "parameters": "(FilePermissions permissions)", "modifiers": "public final", "return": "void", "signature": "void changePermissions(FilePermissions permissions)", "full_signature": "public final void changePermissions(FilePermissions permissions)", "class_method_signature": "AbstractFile.changePermissions(FilePermissions permissions)", "testcase": false, "constructor": false}, {"identifier": "importPermissions", "parameters": "(AbstractFile sourceFile)", "modifiers": "public final", "return": "void", "signature": "void importPermissions(AbstractFile sourceFile)", "full_signature": "public final void importPermissions(AbstractFile sourceFile)", "class_method_signature": "AbstractFile.importPermissions(AbstractFile sourceFile)", "testcase": false, "constructor": false}, {"identifier": "importPermissions", "parameters": "(AbstractFile sourceFile, FilePermissions defaultPermissions)", "modifiers": "public final", "return": "void", "signature": "void importPermissions(AbstractFile sourceFile, FilePermissions defaultPermissions)", "full_signature": "public final void importPermissions(AbstractFile sourceFile, FilePermissions defaultPermissions)", "class_method_signature": "AbstractFile.importPermissions(AbstractFile sourceFile, FilePermissions defaultPermissions)", "testcase": false, "constructor": false}, {"identifier": "isFileOperationSupported", "parameters": "(FileOperation op, Class<? extends AbstractFile> c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFileOperationSupported(FileOperation op, Class<? extends AbstractFile> c)", "full_signature": "public static boolean isFileOperationSupported(FileOperation op, Class<? extends AbstractFile> c)", "class_method_signature": "AbstractFile.isFileOperationSupported(FileOperation op, Class<? extends AbstractFile> c)", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String getExtension(String filename)", "full_signature": "public static String getExtension(String filename)", "class_method_signature": "AbstractFile.getExtension(String filename)", "testcase": false, "constructor": false}, {"identifier": "getBaseName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBaseName()", "full_signature": "public String getBaseName()", "class_method_signature": "AbstractFile.getBaseName()", "testcase": false, "constructor": false}, {"identifier": "calculateChecksum", "parameters": "(InputStream in, MessageDigest messageDigest)", "modifiers": "public static", "return": "String", "signature": "String calculateChecksum(InputStream in, MessageDigest messageDigest)", "full_signature": "public static String calculateChecksum(InputStream in, MessageDigest messageDigest)", "class_method_signature": "AbstractFile.calculateChecksum(InputStream in, MessageDigest messageDigest)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "public boolean equals(Object o)", "class_method_signature": "AbstractFile.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "equalsCanonical", "parameters": "(Object o)", "modifiers": "public", "return": "boolean", "signature": "boolean equalsCanonical(Object o)", "full_signature": "public boolean equalsCanonical(Object o)", "class_method_signature": "AbstractFile.equalsCanonical(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "AbstractFile.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "AbstractFile.toString()", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "()", "modifiers": "public abstract", "return": "long", "signature": "long getDate()", "full_signature": "public abstract long getDate()", "class_method_signature": "AbstractFile.getDate()", "testcase": false, "constructor": false}, {"identifier": "changeDate", "parameters": "(long lastModified)", "modifiers": "public abstract", "return": "void", "signature": "void changeDate(long lastModified)", "full_signature": "public abstract void changeDate(long lastModified)", "class_method_signature": "AbstractFile.changeDate(long lastModified)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public abstract", "return": "long", "signature": "long getSize()", "full_signature": "public abstract long getSize()", "class_method_signature": "AbstractFile.getSize()", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "public abstract", "return": "AbstractFile", "signature": "AbstractFile getParent()", "full_signature": "public abstract AbstractFile getParent()", "class_method_signature": "AbstractFile.getParent()", "testcase": false, "constructor": false}, {"identifier": "setParent", "parameters": "(AbstractFile parent)", "modifiers": "public abstract", "return": "void", "signature": "void setParent(AbstractFile parent)", "full_signature": "public abstract void setParent(AbstractFile parent)", "class_method_signature": "AbstractFile.setParent(AbstractFile parent)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean exists()", "full_signature": "public abstract boolean exists()", "class_method_signature": "AbstractFile.exists()", "testcase": false, "constructor": false}, {"identifier": "getPermissions", "parameters": "()", "modifiers": "public abstract", "return": "FilePermissions", "signature": "FilePermissions getPermissions()", "full_signature": "public abstract FilePermissions getPermissions()", "class_method_signature": "AbstractFile.getPermissions()", "testcase": false, "constructor": false}, {"identifier": "getChangeablePermissions", "parameters": "()", "modifiers": "public abstract", "return": "PermissionBits", "signature": "PermissionBits getChangeablePermissions()", "full_signature": "public abstract PermissionBits getChangeablePermissions()", "class_method_signature": "AbstractFile.getChangeablePermissions()", "testcase": false, "constructor": false}, {"identifier": "changePermission", "parameters": "(PermissionAccess access, PermissionType permission, boolean enabled)", "modifiers": "public abstract", "return": "void", "signature": "void changePermission(PermissionAccess access, PermissionType permission, boolean enabled)", "full_signature": "public abstract void changePermission(PermissionAccess access, PermissionType permission, boolean enabled)", "class_method_signature": "AbstractFile.changePermission(PermissionAccess access, PermissionType permission, boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "getOwner", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getOwner()", "full_signature": "public abstract String getOwner()", "class_method_signature": "AbstractFile.getOwner()", "testcase": false, "constructor": false}, {"identifier": "canGetOwner", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean canGetOwner()", "full_signature": "public abstract boolean canGetOwner()", "class_method_signature": "AbstractFile.canGetOwner()", "testcase": false, "constructor": false}, {"identifier": "getGroup", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getGroup()", "full_signature": "public abstract String getGroup()", "class_method_signature": "AbstractFile.getGroup()", "testcase": false, "constructor": false}, {"identifier": "canGetGroup", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean canGetGroup()", "full_signature": "public abstract boolean canGetGroup()", "class_method_signature": "AbstractFile.canGetGroup()", "testcase": false, "constructor": false}, {"identifier": "isDirectory", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isDirectory()", "full_signature": "public abstract boolean isDirectory()", "class_method_signature": "AbstractFile.isDirectory()", "testcase": false, "constructor": false}, {"identifier": "isArchive", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isArchive()", "full_signature": "public abstract boolean isArchive()", "class_method_signature": "AbstractFile.isArchive()", "testcase": false, "constructor": false}, {"identifier": "isSymlink", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isSymlink()", "full_signature": "public abstract boolean isSymlink()", "class_method_signature": "AbstractFile.isSymlink()", "testcase": false, "constructor": false}, {"identifier": "isSystem", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isSystem()", "full_signature": "public abstract boolean isSystem()", "class_method_signature": "AbstractFile.isSystem()", "testcase": false, "constructor": false}, {"identifier": "ls", "parameters": "()", "modifiers": "public abstract", "return": "AbstractFile[]", "signature": "AbstractFile[] ls()", "full_signature": "public abstract AbstractFile[] ls()", "class_method_signature": "AbstractFile.ls()", "testcase": false, "constructor": false}, {"identifier": "mkdir", "parameters": "()", "modifiers": "public abstract", "return": "void", "signature": "void mkdir()", "full_signature": "public abstract void mkdir()", "class_method_signature": "AbstractFile.mkdir()", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "()", "modifiers": "public abstract", "return": "InputStream", "signature": "InputStream getInputStream()", "full_signature": "public abstract InputStream getInputStream()", "class_method_signature": "AbstractFile.getInputStream()", "testcase": false, "constructor": false}, {"identifier": "getOutputStream", "parameters": "()", "modifiers": "public abstract", "return": "OutputStream", "signature": "OutputStream getOutputStream()", "full_signature": "public abstract OutputStream getOutputStream()", "class_method_signature": "AbstractFile.getOutputStream()", "testcase": false, "constructor": false}, {"identifier": "getAppendOutputStream", "parameters": "()", "modifiers": "public abstract", "return": "OutputStream", "signature": "OutputStream getAppendOutputStream()", "full_signature": "public abstract OutputStream getAppendOutputStream()", "class_method_signature": "AbstractFile.getAppendOutputStream()", "testcase": false, "constructor": false}, {"identifier": "getRandomAccessInputStream", "parameters": "()", "modifiers": "public abstract", "return": "RandomAccessInputStream", "signature": "RandomAccessInputStream getRandomAccessInputStream()", "full_signature": "public abstract RandomAccessInputStream getRandomAccessInputStream()", "class_method_signature": "AbstractFile.getRandomAccessInputStream()", "testcase": false, "constructor": false}, {"identifier": "getRandomAccessOutputStream", "parameters": "()", "modifiers": "public abstract", "return": "RandomAccessOutputStream", "signature": "RandomAccessOutputStream getRandomAccessOutputStream()", "full_signature": "public abstract RandomAccessOutputStream getRandomAccessOutputStream()", "class_method_signature": "AbstractFile.getRandomAccessOutputStream()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "()", "modifiers": "public abstract", "return": "void", "signature": "void delete()", "full_signature": "public abstract void delete()", "class_method_signature": "AbstractFile.delete()", "testcase": false, "constructor": false}, {"identifier": "renameTo", "parameters": "(AbstractFile destFile)", "modifiers": "public abstract", "return": "void", "signature": "void renameTo(AbstractFile destFile)", "full_signature": "public abstract void renameTo(AbstractFile destFile)", "class_method_signature": "AbstractFile.renameTo(AbstractFile destFile)", "testcase": false, "constructor": false}, {"identifier": "copyRemotelyTo", "parameters": "(AbstractFile destFile)", "modifiers": "public abstract", "return": "void", "signature": "void copyRemotelyTo(AbstractFile destFile)", "full_signature": "public abstract void copyRemotelyTo(AbstractFile destFile)", "class_method_signature": "AbstractFile.copyRemotelyTo(AbstractFile destFile)", "testcase": false, "constructor": false}, {"identifier": "getFreeSpace", "parameters": "()", "modifiers": "public abstract", "return": "long", "signature": "long getFreeSpace()", "full_signature": "public abstract long getFreeSpace()", "class_method_signature": "AbstractFile.getFreeSpace()", "testcase": false, "constructor": false}, {"identifier": "getTotalSpace", "parameters": "()", "modifiers": "public abstract", "return": "long", "signature": "long getTotalSpace()", "full_signature": "public abstract long getTotalSpace()", "class_method_signature": "AbstractFile.getTotalSpace()", "testcase": false, "constructor": false}, {"identifier": "getUnderlyingFileObject", "parameters": "()", "modifiers": "public abstract", "return": "Object", "signature": "Object getUnderlyingFileObject()", "full_signature": "public abstract Object getUnderlyingFileObject()", "class_method_signature": "AbstractFile.getUnderlyingFileObject()", "testcase": false, "constructor": false}, {"identifier": "getCustomExtension", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCustomExtension()", "full_signature": "public String getCustomExtension()", "class_method_signature": "AbstractFile.getCustomExtension()", "testcase": false, "constructor": false}, {"identifier": "setCustomExtension", "parameters": "(String customExtension)", "modifiers": "public", "return": "void", "signature": "void setCustomExtension(String customExtension)", "full_signature": "public void setCustomExtension(String customExtension)", "class_method_signature": "AbstractFile.setCustomExtension(String customExtension)", "testcase": false, "constructor": false}], "file": "mucommander-commons-file/src/main/java/com/mucommander/commons/file/AbstractFile.java"}, "focal_method": {"identifier": "getAppendOutputStream", "parameters": "()", "modifiers": "public abstract", "return": "OutputStream", "body": "public abstract OutputStream getAppendOutputStream() throws IOException, UnsupportedFileOperationException;", "signature": "OutputStream getAppendOutputStream()", "full_signature": "public abstract OutputStream getAppendOutputStream()", "class_method_signature": "AbstractFile.getAppendOutputStream()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 16462032, "url": "https://github.com/mucommander/mucommander", "language": "Java", "is_fork": false, "fork_count": 124, "stargazer_count": 448, "size": 47123, "license": "licensed"}}