{"test_class": {"identifier": "TextUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "orbisgis-commons/src/test/java/org/orbisgis/commons/utils/TextUtilsTest.java"}, "test_case": {"identifier": "testLikePattern", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n        public void testLikePattern() {\n                Pattern p = TextUtils.buildLikePattern(\"str%a_8\");\n                match(p, \"straaa8\");\n                match(p, \"straa8\");\n                match(p, \"strah8\");\n                match(p, \"strazertyam8\");\n                notMatch(p, \"stra8\");\n                notMatch(p, \"straa\");\n                notMatch(p, \"strazertya118\");\n                notMatch(p, \"1straaa8\");\n\n                p = TextUtils.buildLikePattern(\"%str\");\n                match(p, \"str\");\n                match(p, \"astr\");\n                match(p, \"strstr\");\n                match(p, \"azerty34str\");\n                notMatch(p, \"tr\");\n                notMatch(p, \"str12\");\n                notMatch(p, \"azertstrf\");\n                notMatch(p, \"st\");\n\n                p = TextUtils.buildLikePattern(\"_str%\");\n                match(p, \"sstr\");\n                match(p, \"astr\");\n                match(p, \"7strstr\");\n                match(p, \"astrazert5y\");\n                notMatch(p, \"str\");\n                notMatch(p, \"str12stuff\");\n                notMatch(p, \"sst\");\n                notMatch(p, \"zzstr\");\n\n                p = TextUtils.buildLikePattern(\"__tr%\");\n                match(p, \"sstr\");\n                match(p, \"astr23\");\n                match(p, \"7strstr\");\n                match(p, \"trtrz\");\n                notMatch(p, \"str\");\n                notMatch(p, \"str12stuff\");\n                notMatch(p, \"sst\");\n                notMatch(p, \"zzztr12\");\n\n                p = TextUtils.buildLikePattern(\"_str%%\");\n                match(p, \"sstr\");\n                match(p, \"astr\");\n                match(p, \"7strstr\");\n                match(p, \"astrazert5y\");\n                notMatch(p, \"str\");\n                notMatch(p, \"str12stuff\");\n                notMatch(p, \"sst\");\n                notMatch(p, \"zzstr\");\n\n                p = TextUtils.buildLikePattern(\"__\");\n                match(p, \"gg\");\n                match(p, \"a1\");\n                notMatch(p, \"str\");\n                notMatch(p, \"s\");\n                notMatch(p, \"1234g\");\n\n                p = TextUtils.buildLikePattern(\"%%\");\n                match(p, \"gg\");\n                match(p, \"a1\");\n                match(p, \"str\");\n                match(p, \"s\");\n                match(p, \"1234g\");\n\n                p = TextUtils.buildLikePattern(\"str\\\\%a_8\");\n                match(p, \"str%aa8\");\n                match(p, \"str%ab8\");\n                notMatch(p, \"stra8\");\n                notMatch(p, \"straa8\");\n                notMatch(p, \"strazertyaj8\");\n                notMatch(p, \"1straaa8\");\n\n                p = TextUtils.buildLikePattern(\"str\\\\%a\\\\_8\");\n                match(p, \"str%a_8\");\n                notMatch(p, \"str%ab8\");\n                notMatch(p, \"stra8\");\n                notMatch(p, \"straa8\");\n                notMatch(p, \"strazertyaj8\");\n                notMatch(p, \"1straaa8\");\n\n                p = TextUtils.buildLikePattern(\"\\\\\\\\\");\n                match(p, \"\\\\\");\n                notMatch(p, \"\\\\\\\\\");\n                notMatch(p, \"s\\\\\");\n                notMatch(p, \"\\\\sse\");\n                \n                p = TextUtils.buildLikePattern(\"ab\\\\_\");\n                match(p, \"ab_\");\n                notMatch(p, \"aba\");\n                notMatch(p, \"ab_b\");\n\n        }", "signature": "void testLikePattern()", "full_signature": "@Test public void testLikePattern()", "class_method_signature": "TextUtilsTest.testLikePattern()", "testcase": true, "constructor": false, "invocations": ["buildLikePattern", "match", "match", "match", "match", "notMatch", "notMatch", "notMatch", "notMatch", "buildLikePattern", "match", "match", "match", "match", "notMatch", "notMatch", "notMatch", "notMatch", "buildLikePattern", "match", "match", "match", "match", "notMatch", "notMatch", "notMatch", "notMatch", "buildLikePattern", "match", "match", "match", "match", "notMatch", "notMatch", "notMatch", "notMatch", "buildLikePattern", "match", "match", "match", "match", "notMatch", "notMatch", "notMatch", "notMatch", "buildLikePattern", "match", "match", "notMatch", "notMatch", "notMatch", "buildLikePattern", "match", "match", "match", "match", "match", "buildLikePattern", "match", "match", "notMatch", "notMatch", "notMatch", "notMatch", "buildLikePattern", "match", "notMatch", "notMatch", "notMatch", "notMatch", "notMatch", "buildLikePattern", "match", "notMatch", "notMatch", "notMatch", "buildLikePattern", "match", "notMatch", "notMatch"]}, "focal_class": {"identifier": "TextUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern SPLITLIKE = Pattern.compile(\"%|_\");", "modifier": "private static final", "type": "Pattern", "declarator": "SPLITLIKE = Pattern.compile(\"%|_\")", "var_name": "SPLITLIKE"}, {"original_string": "private static final Pattern ESCAPE = Pattern.compile(\"\\\\\\\\\\\\\\\\\");", "modifier": "private static final", "type": "Pattern", "declarator": "ESCAPE = Pattern.compile(\"\\\\\\\\\\\\\\\\\")", "var_name": "ESCAPE"}, {"original_string": "private static final Pattern DOT = Pattern.compile(\"\\\\.\");", "modifier": "private static final", "type": "Pattern", "declarator": "DOT = Pattern.compile(\"\\\\.\")", "var_name": "DOT"}], "methods": [{"identifier": "getEolStr", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getEolStr()", "full_signature": "public static String getEolStr()", "class_method_signature": "TextUtils.getEolStr()", "testcase": false, "constructor": false}, {"identifier": "stringToHTMLString", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String stringToHTMLString(String string)", "full_signature": "public static String stringToHTMLString(String string)", "class_method_signature": "TextUtils.stringToHTMLString(String string)", "testcase": false, "constructor": false}, {"identifier": "getLocation", "parameters": "(int bl, int bc, int el, int ec,\n                String[] lines)", "modifiers": "public static", "return": "int[]", "signature": "int[] getLocation(int bl, int bc, int el, int ec,\n                String[] lines)", "full_signature": "public static int[] getLocation(int bl, int bc, int el, int ec,\n                String[] lines)", "class_method_signature": "TextUtils.getLocation(int bl, int bc, int el, int ec,\n                String[] lines)", "testcase": false, "constructor": false}, {"identifier": "getPosition", "parameters": "(int line, int column, String[] lines)", "modifiers": "private static", "return": "int", "signature": "int getPosition(int line, int column, String[] lines)", "full_signature": "private static int getPosition(int line, int column, String[] lines)", "class_method_signature": "TextUtils.getPosition(int line, int column, String[] lines)", "testcase": false, "constructor": false}, {"identifier": "buildLikePattern", "parameters": "(String pattern)", "modifiers": "public static", "return": "Pattern", "signature": "Pattern buildLikePattern(String pattern)", "full_signature": "public static Pattern buildLikePattern(String pattern)", "class_method_signature": "TextUtils.buildLikePattern(String pattern)", "testcase": false, "constructor": false}, {"identifier": "buildLikePattern", "parameters": "(String pattern, boolean caseInsensitive)", "modifiers": "public static", "return": "Pattern", "signature": "Pattern buildLikePattern(String pattern, boolean caseInsensitive)", "full_signature": "public static Pattern buildLikePattern(String pattern, boolean caseInsensitive)", "class_method_signature": "TextUtils.buildLikePattern(String pattern, boolean caseInsensitive)", "testcase": false, "constructor": false}, {"identifier": "buildSimilarToPattern", "parameters": "(String pattern)", "modifiers": "public static", "return": "Pattern", "signature": "Pattern buildSimilarToPattern(String pattern)", "full_signature": "public static Pattern buildSimilarToPattern(String pattern)", "class_method_signature": "TextUtils.buildSimilarToPattern(String pattern)", "testcase": false, "constructor": false}, {"identifier": "TextUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " TextUtils()", "full_signature": "private  TextUtils()", "class_method_signature": "TextUtils.TextUtils()", "testcase": false, "constructor": true}], "file": "orbisgis-commons/src/main/java/org/orbisgis/commons/utils/TextUtils.java"}, "focal_method": {"identifier": "buildLikePattern", "parameters": "(String pattern)", "modifiers": "public static", "return": "Pattern", "body": "public static Pattern buildLikePattern(String pattern) {\n                return buildLikePattern(pattern, false);\n        }", "signature": "Pattern buildLikePattern(String pattern)", "full_signature": "public static Pattern buildLikePattern(String pattern)", "class_method_signature": "TextUtils.buildLikePattern(String pattern)", "testcase": false, "constructor": false, "invocations": ["buildLikePattern"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}