{"test_class": {"identifier": "LongBitMaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule public final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "drools-core/src/test/java/org/drools/core/util/bitmask/LongBitMaskTest.java"}, "test_case": {"identifier": "testIntersects", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIntersects() {\n    Assert.assertFalse(new LongBitMask(0L).intersects(EmptyBitMask.get()));\n    Assert.assertFalse(new LongBitMask(0L).intersects(new LongBitMask(0L)));\n    Assert.assertTrue(new LongBitMask(2L).intersects(new LongBitMask(2L)));\n  }", "signature": "void testIntersects()", "full_signature": "@Test public void testIntersects()", "class_method_signature": "LongBitMaskTest.testIntersects()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "intersects", "get", "assertFalse", "intersects", "assertTrue", "intersects"]}, "focal_class": {"identifier": "LongBitMask", "superclass": "extends SingleLongBitMask", "interfaces": "implements BitMask", "fields": [{"original_string": "private long mask;", "modifier": "private", "type": "long", "declarator": "mask", "var_name": "mask"}], "methods": [{"identifier": "LongBitMask", "parameters": "()", "modifiers": "public", "return": "", "signature": " LongBitMask()", "full_signature": "public  LongBitMask()", "class_method_signature": "LongBitMask.LongBitMask()", "testcase": false, "constructor": true}, {"identifier": "LongBitMask", "parameters": "(long mask)", "modifiers": "public", "return": "", "signature": " LongBitMask(long mask)", "full_signature": "public  LongBitMask(long mask)", "class_method_signature": "LongBitMask.LongBitMask(long mask)", "testcase": false, "constructor": true}, {"identifier": "set", "parameters": "(int index)", "modifiers": "@Override public", "return": "BitMask", "signature": "BitMask set(int index)", "full_signature": "@Override public BitMask set(int index)", "class_method_signature": "LongBitMask.set(int index)", "testcase": false, "constructor": false}, {"identifier": "setAll", "parameters": "(BitMask mask)", "modifiers": "@Override public", "return": "BitMask", "signature": "BitMask setAll(BitMask mask)", "full_signature": "@Override public BitMask setAll(BitMask mask)", "class_method_signature": "LongBitMask.setAll(BitMask mask)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "(int index)", "modifiers": "@Override public", "return": "BitMask", "signature": "BitMask reset(int index)", "full_signature": "@Override public BitMask reset(int index)", "class_method_signature": "LongBitMask.reset(int index)", "testcase": false, "constructor": false}, {"identifier": "resetAll", "parameters": "(BitMask mask)", "modifiers": "@Override public", "return": "BitMask", "signature": "BitMask resetAll(BitMask mask)", "full_signature": "@Override public BitMask resetAll(BitMask mask)", "class_method_signature": "LongBitMask.resetAll(BitMask mask)", "testcase": false, "constructor": false}, {"identifier": "isSet", "parameters": "(int index)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSet(int index)", "full_signature": "@Override public boolean isSet(int index)", "class_method_signature": "LongBitMask.isSet(int index)", "testcase": false, "constructor": false}, {"identifier": "isAllSet", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAllSet()", "full_signature": "@Override public boolean isAllSet()", "class_method_signature": "LongBitMask.isAllSet()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "LongBitMask.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(BitMask mask)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean intersects(BitMask mask)", "full_signature": "@Override public boolean intersects(BitMask mask)", "class_method_signature": "LongBitMask.intersects(BitMask mask)", "testcase": false, "constructor": false}, {"identifier": "asLong", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long asLong()", "full_signature": "public long asLong()", "class_method_signature": "LongBitMask.asLong()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "LongBitMask", "signature": "LongBitMask clone()", "full_signature": "@Override public LongBitMask clone()", "class_method_signature": "LongBitMask.clone()", "testcase": false, "constructor": false}, {"identifier": "getInstancingStatement", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getInstancingStatement()", "full_signature": "@Override public String getInstancingStatement()", "class_method_signature": "LongBitMask.getInstancingStatement()", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "()", "modifiers": "private", "return": "BitMask", "signature": "BitMask normalize()", "full_signature": "private BitMask normalize()", "class_method_signature": "LongBitMask.normalize()", "testcase": false, "constructor": false}], "file": "drools-core/src/main/java/org/drools/core/util/bitmask/LongBitMask.java"}, "focal_method": {"identifier": "intersects", "parameters": "(BitMask mask)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean intersects(BitMask mask) {\n        return mask instanceof LongBitMask ?\n               (this.mask & ((LongBitMask)mask).asLong()) != 0 :\n               mask.intersects(this);\n    }", "signature": "boolean intersects(BitMask mask)", "full_signature": "@Override public boolean intersects(BitMask mask)", "class_method_signature": "LongBitMask.intersects(BitMask mask)", "testcase": false, "constructor": false, "invocations": ["asLong", "intersects"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}