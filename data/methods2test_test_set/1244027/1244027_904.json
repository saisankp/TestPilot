{"test_class": {"identifier": "NodeSequenceTest", "superclass": "extends AbstractNodeSequenceTest", "interfaces": "", "fields": [], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/query/NodeSequenceTest.java"}, "test_case": {"identifier": "shouldCreateLimitedSequenceSmallerThanDelegate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateLimitedSequenceSmallerThanDelegate() {\n        assertThat(countRows(NodeSequence.limit(allNodes(), 2)), is(2L));\n    }", "signature": "void shouldCreateLimitedSequenceSmallerThanDelegate()", "full_signature": "@Test public void shouldCreateLimitedSequenceSmallerThanDelegate()", "class_method_signature": "NodeSequenceTest.shouldCreateLimitedSequenceSmallerThanDelegate()", "testcase": true, "constructor": false, "invocations": ["assertThat", "countRows", "limit", "allNodes", "is"]}, "focal_class": {"identifier": "NodeSequence", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger LOGGER = Logger.getLogger(NodeSequence.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(NodeSequence.class)", "var_name": "LOGGER"}, {"original_string": "public static final RowFilter NO_PASS_ROW_FILTER = new RowFilter() {\n        @Override\n        public boolean isCurrentRowValid( Batch batch ) {\n            return false;\n        }\n\n        @Override\n        public String toString() {\n            return \"(no-pass-filter)\";\n        }\n    };", "modifier": "public static final", "type": "RowFilter", "declarator": "NO_PASS_ROW_FILTER = new RowFilter() {\n        @Override\n        public boolean isCurrentRowValid( Batch batch ) {\n            return false;\n        }\n\n        @Override\n        public String toString() {\n            return \"(no-pass-filter)\";\n        }\n    }", "var_name": "NO_PASS_ROW_FILTER"}, {"original_string": "public static final RowFilter PASS_ROW_FILTER = new RowFilter() {\n        @Override\n        public boolean isCurrentRowValid( Batch batch ) {\n            return true;\n        }\n\n        @Override\n        public String toString() {\n            return \"(pass-filter)\";\n        }\n    };", "modifier": "public static final", "type": "RowFilter", "declarator": "PASS_ROW_FILTER = new RowFilter() {\n        @Override\n        public boolean isCurrentRowValid( Batch batch ) {\n            return true;\n        }\n\n        @Override\n        public String toString() {\n            return \"(pass-filter)\";\n        }\n    }", "var_name": "PASS_ROW_FILTER"}], "methods": [{"identifier": "width", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int width()", "full_signature": "public abstract int width()", "class_method_signature": "NodeSequence.width()", "testcase": false, "constructor": false}, {"identifier": "getRowCount", "parameters": "()", "modifiers": "public abstract", "return": "long", "signature": "long getRowCount()", "full_signature": "public abstract long getRowCount()", "class_method_signature": "NodeSequence.getRowCount()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public abstract boolean isEmpty()", "class_method_signature": "NodeSequence.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "nextBatch", "parameters": "()", "modifiers": "public abstract", "return": "Batch", "signature": "Batch nextBatch()", "full_signature": "public abstract Batch nextBatch()", "class_method_signature": "NodeSequence.nextBatch()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public abstract", "return": "void", "signature": "void close()", "full_signature": "public abstract void close()", "class_method_signature": "NodeSequence.close()", "testcase": false, "constructor": false}, {"identifier": "emptySequence", "parameters": "( final int width )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence emptySequence( final int width )", "full_signature": "public static NodeSequence emptySequence( final int width )", "class_method_signature": "NodeSequence.emptySequence( final int width )", "testcase": false, "constructor": false}, {"identifier": "emptyBatch", "parameters": "( final String workspaceName,\n                                    final int width )", "modifiers": "public static", "return": "Batch", "signature": "Batch emptyBatch( final String workspaceName,\n                                    final int width )", "full_signature": "public static Batch emptyBatch( final String workspaceName,\n                                    final int width )", "class_method_signature": "NodeSequence.emptyBatch( final String workspaceName,\n                                    final int width )", "testcase": false, "constructor": false}, {"identifier": "withBatch", "parameters": "( final Batch sequence )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence withBatch( final Batch sequence )", "full_signature": "public static NodeSequence withBatch( final Batch sequence )", "class_method_signature": "NodeSequence.withBatch( final Batch sequence )", "testcase": false, "constructor": false}, {"identifier": "withBatches", "parameters": "( final Collection<Batch> batches,\n                                            final int width )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence withBatches( final Collection<Batch> batches,\n                                            final int width )", "full_signature": "public static NodeSequence withBatches( final Collection<Batch> batches,\n                                            final int width )", "class_method_signature": "NodeSequence.withBatches( final Collection<Batch> batches,\n                                            final int width )", "testcase": false, "constructor": false}, {"identifier": "withBatches", "parameters": "( final Iterator<Batch> batches,\n                                            final int width,\n                                            final long rowCount )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence withBatches( final Iterator<Batch> batches,\n                                            final int width,\n                                            final long rowCount )", "full_signature": "public static NodeSequence withBatches( final Iterator<Batch> batches,\n                                            final int width,\n                                            final long rowCount )", "class_method_signature": "NodeSequence.withBatches( final Iterator<Batch> batches,\n                                            final int width,\n                                            final long rowCount )", "testcase": false, "constructor": false}, {"identifier": "withNodes", "parameters": "( final Collection<CachedNode> nodes,\n                                          final float score,\n                                          final String workspaceName )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence withNodes( final Collection<CachedNode> nodes,\n                                          final float score,\n                                          final String workspaceName )", "full_signature": "public static NodeSequence withNodes( final Collection<CachedNode> nodes,\n                                          final float score,\n                                          final String workspaceName )", "class_method_signature": "NodeSequence.withNodes( final Collection<CachedNode> nodes,\n                                          final float score,\n                                          final String workspaceName )", "testcase": false, "constructor": false}, {"identifier": "withNodes", "parameters": "( final Iterator<CachedNode> nodes,\n                                          final long nodeCount,\n                                          final float score,\n                                          final String workspaceName )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence withNodes( final Iterator<CachedNode> nodes,\n                                          final long nodeCount,\n                                          final float score,\n                                          final String workspaceName )", "full_signature": "public static NodeSequence withNodes( final Iterator<CachedNode> nodes,\n                                          final long nodeCount,\n                                          final float score,\n                                          final String workspaceName )", "class_method_signature": "NodeSequence.withNodes( final Iterator<CachedNode> nodes,\n                                          final long nodeCount,\n                                          final float score,\n                                          final String workspaceName )", "testcase": false, "constructor": false}, {"identifier": "withNode", "parameters": "( final CachedNode node,\n                                         final int width,\n                                         final float score,\n                                         final String workspaceName )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence withNode( final CachedNode node,\n                                         final int width,\n                                         final float score,\n                                         final String workspaceName )", "full_signature": "public static NodeSequence withNode( final CachedNode node,\n                                         final int width,\n                                         final float score,\n                                         final String workspaceName )", "class_method_signature": "NodeSequence.withNode( final CachedNode node,\n                                         final int width,\n                                         final float score,\n                                         final String workspaceName )", "testcase": false, "constructor": false}, {"identifier": "withNodeKeys", "parameters": "( final Collection<NodeKey> keys,\n                                             final float score,\n                                             final String workspaceName,\n                                             final RepositoryCache repository )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence withNodeKeys( final Collection<NodeKey> keys,\n                                             final float score,\n                                             final String workspaceName,\n                                             final RepositoryCache repository )", "full_signature": "public static NodeSequence withNodeKeys( final Collection<NodeKey> keys,\n                                             final float score,\n                                             final String workspaceName,\n                                             final RepositoryCache repository )", "class_method_signature": "NodeSequence.withNodeKeys( final Collection<NodeKey> keys,\n                                             final float score,\n                                             final String workspaceName,\n                                             final RepositoryCache repository )", "testcase": false, "constructor": false}, {"identifier": "withNodeKeys", "parameters": "( final Collection<NodeKey> keys,\n                                             final float score,\n                                             final String workspaceName,\n                                             final NodeCache cache )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence withNodeKeys( final Collection<NodeKey> keys,\n                                             final float score,\n                                             final String workspaceName,\n                                             final NodeCache cache )", "full_signature": "public static NodeSequence withNodeKeys( final Collection<NodeKey> keys,\n                                             final float score,\n                                             final String workspaceName,\n                                             final NodeCache cache )", "class_method_signature": "NodeSequence.withNodeKeys( final Collection<NodeKey> keys,\n                                             final float score,\n                                             final String workspaceName,\n                                             final NodeCache cache )", "testcase": false, "constructor": false}, {"identifier": "withNodeKeys", "parameters": "( final Iterator<NodeKey> keys,\n                                             final long keyCount,\n                                             final float score,\n                                             final String workspaceName,\n                                             final RepositoryCache repository )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence withNodeKeys( final Iterator<NodeKey> keys,\n                                             final long keyCount,\n                                             final float score,\n                                             final String workspaceName,\n                                             final RepositoryCache repository )", "full_signature": "public static NodeSequence withNodeKeys( final Iterator<NodeKey> keys,\n                                             final long keyCount,\n                                             final float score,\n                                             final String workspaceName,\n                                             final RepositoryCache repository )", "class_method_signature": "NodeSequence.withNodeKeys( final Iterator<NodeKey> keys,\n                                             final long keyCount,\n                                             final float score,\n                                             final String workspaceName,\n                                             final RepositoryCache repository )", "testcase": false, "constructor": false}, {"identifier": "withNodeKeys", "parameters": "( final Iterator<NodeKey> keys,\n                                             final long keyCount,\n                                             final float score,\n                                             final String workspaceName,\n                                             final NodeCache cache )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence withNodeKeys( final Iterator<NodeKey> keys,\n                                             final long keyCount,\n                                             final float score,\n                                             final String workspaceName,\n                                             final NodeCache cache )", "full_signature": "public static NodeSequence withNodeKeys( final Iterator<NodeKey> keys,\n                                             final long keyCount,\n                                             final float score,\n                                             final String workspaceName,\n                                             final NodeCache cache )", "class_method_signature": "NodeSequence.withNodeKeys( final Iterator<NodeKey> keys,\n                                             final long keyCount,\n                                             final float score,\n                                             final String workspaceName,\n                                             final NodeCache cache )", "testcase": false, "constructor": false}, {"identifier": "limit", "parameters": "( NodeSequence sequence,\n                                      Limit limitAndOffset )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence limit( NodeSequence sequence,\n                                      Limit limitAndOffset )", "full_signature": "public static NodeSequence limit( NodeSequence sequence,\n                                      Limit limitAndOffset )", "class_method_signature": "NodeSequence.limit( NodeSequence sequence,\n                                      Limit limitAndOffset )", "testcase": false, "constructor": false}, {"identifier": "limit", "parameters": "( final NodeSequence sequence,\n                                      final long maxRows )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence limit( final NodeSequence sequence,\n                                      final long maxRows )", "full_signature": "public static NodeSequence limit( final NodeSequence sequence,\n                                      final long maxRows )", "class_method_signature": "NodeSequence.limit( final NodeSequence sequence,\n                                      final long maxRows )", "testcase": false, "constructor": false}, {"identifier": "skip", "parameters": "( final NodeSequence sequence,\n                                     final int skip )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence skip( final NodeSequence sequence,\n                                     final int skip )", "full_signature": "public static NodeSequence skip( final NodeSequence sequence,\n                                     final int skip )", "class_method_signature": "NodeSequence.skip( final NodeSequence sequence,\n                                     final int skip )", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "( final NodeSequence sequence,\n                                       final RowFilter filter )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence filter( final NodeSequence sequence,\n                                       final RowFilter filter )", "full_signature": "public static NodeSequence filter( final NodeSequence sequence,\n                                       final RowFilter filter )", "class_method_signature": "NodeSequence.filter( final NodeSequence sequence,\n                                       final RowFilter filter )", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "( final NodeSequence first,\n                                       final NodeSequence second )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence append( final NodeSequence first,\n                                       final NodeSequence second )", "full_signature": "public static NodeSequence append( final NodeSequence first,\n                                       final NodeSequence second )", "class_method_signature": "NodeSequence.append( final NodeSequence first,\n                                       final NodeSequence second )", "testcase": false, "constructor": false}, {"identifier": "slice", "parameters": "( final NodeSequence original,\n                                      Columns columns )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence slice( final NodeSequence original,\n                                      Columns columns )", "full_signature": "public static NodeSequence slice( final NodeSequence original,\n                                      Columns columns )", "class_method_signature": "NodeSequence.slice( final NodeSequence original,\n                                      Columns columns )", "testcase": false, "constructor": false}, {"identifier": "slicingBatch", "parameters": "( final Batch original,\n                                         final int[] selectorIndexes )", "modifiers": "protected static", "return": "Batch", "signature": "Batch slicingBatch( final Batch original,\n                                         final int[] selectorIndexes )", "full_signature": "protected static Batch slicingBatch( final Batch original,\n                                         final int[] selectorIndexes )", "class_method_signature": "NodeSequence.slicingBatch( final Batch original,\n                                         final int[] selectorIndexes )", "testcase": false, "constructor": false}, {"identifier": "merging", "parameters": "( final NodeSequence first,\n                                        final NodeSequence second,\n                                        final int totalWidth )", "modifiers": "public static", "return": "NodeSequence", "signature": "NodeSequence merging( final NodeSequence first,\n                                        final NodeSequence second,\n                                        final int totalWidth )", "full_signature": "public static NodeSequence merging( final NodeSequence first,\n                                        final NodeSequence second,\n                                        final int totalWidth )", "class_method_signature": "NodeSequence.merging( final NodeSequence first,\n                                        final NodeSequence second,\n                                        final int totalWidth )", "testcase": false, "constructor": false}, {"identifier": "batchOf", "parameters": "( final Collection<CachedNode> nodes,\n                                 final float score,\n                                 final String workspaceName )", "modifiers": "public static", "return": "Batch", "signature": "Batch batchOf( final Collection<CachedNode> nodes,\n                                 final float score,\n                                 final String workspaceName )", "full_signature": "public static Batch batchOf( final Collection<CachedNode> nodes,\n                                 final float score,\n                                 final String workspaceName )", "class_method_signature": "NodeSequence.batchOf( final Collection<CachedNode> nodes,\n                                 final float score,\n                                 final String workspaceName )", "testcase": false, "constructor": false}, {"identifier": "batchOf", "parameters": "( final Iterator<CachedNode> nodes,\n                                 final long nodeCount,\n                                 final float score,\n                                 final String workspaceName )", "modifiers": "public static", "return": "Batch", "signature": "Batch batchOf( final Iterator<CachedNode> nodes,\n                                 final long nodeCount,\n                                 final float score,\n                                 final String workspaceName )", "full_signature": "public static Batch batchOf( final Iterator<CachedNode> nodes,\n                                 final long nodeCount,\n                                 final float score,\n                                 final String workspaceName )", "class_method_signature": "NodeSequence.batchOf( final Iterator<CachedNode> nodes,\n                                 final long nodeCount,\n                                 final float score,\n                                 final String workspaceName )", "testcase": false, "constructor": false}, {"identifier": "batchOfKeys", "parameters": "( final Collection<NodeKey> keys,\n                                     final float score,\n                                     final String workspaceName,\n                                     final RepositoryCache repository )", "modifiers": "public static", "return": "Batch", "signature": "Batch batchOfKeys( final Collection<NodeKey> keys,\n                                     final float score,\n                                     final String workspaceName,\n                                     final RepositoryCache repository )", "full_signature": "public static Batch batchOfKeys( final Collection<NodeKey> keys,\n                                     final float score,\n                                     final String workspaceName,\n                                     final RepositoryCache repository )", "class_method_signature": "NodeSequence.batchOfKeys( final Collection<NodeKey> keys,\n                                     final float score,\n                                     final String workspaceName,\n                                     final RepositoryCache repository )", "testcase": false, "constructor": false}, {"identifier": "batchOfKeys", "parameters": "( final Iterator<NodeKey> keys,\n                                     final long nodeCount,\n                                     final float score,\n                                     final String workspaceName,\n                                     final NodeCache cache )", "modifiers": "public static", "return": "Batch", "signature": "Batch batchOfKeys( final Iterator<NodeKey> keys,\n                                     final long nodeCount,\n                                     final float score,\n                                     final String workspaceName,\n                                     final NodeCache cache )", "full_signature": "public static Batch batchOfKeys( final Iterator<NodeKey> keys,\n                                     final long nodeCount,\n                                     final float score,\n                                     final String workspaceName,\n                                     final NodeCache cache )", "class_method_signature": "NodeSequence.batchOfKeys( final Iterator<NodeKey> keys,\n                                     final long nodeCount,\n                                     final float score,\n                                     final String workspaceName,\n                                     final NodeCache cache )", "testcase": false, "constructor": false}, {"identifier": "batchOfKeys", "parameters": "( final Iterator<NodeKey> keys,\n                                     final long nodeCount,\n                                     final float score,\n                                     final String workspaceName,\n                                     final RepositoryCache repository )", "modifiers": "public static", "return": "Batch", "signature": "Batch batchOfKeys( final Iterator<NodeKey> keys,\n                                     final long nodeCount,\n                                     final float score,\n                                     final String workspaceName,\n                                     final RepositoryCache repository )", "full_signature": "public static Batch batchOfKeys( final Iterator<NodeKey> keys,\n                                     final long nodeCount,\n                                     final float score,\n                                     final String workspaceName,\n                                     final RepositoryCache repository )", "class_method_signature": "NodeSequence.batchOfKeys( final Iterator<NodeKey> keys,\n                                     final long nodeCount,\n                                     final float score,\n                                     final String workspaceName,\n                                     final RepositoryCache repository )", "testcase": false, "constructor": false}, {"identifier": "batchOfKeys", "parameters": "( final Iterator<NodeKey> keys,\n                                     final Iterator<Float> scores,\n                                     final long nodeCount,\n                                     final String workspaceName,\n                                     final RepositoryCache repository )", "modifiers": "public static", "return": "Batch", "signature": "Batch batchOfKeys( final Iterator<NodeKey> keys,\n                                     final Iterator<Float> scores,\n                                     final long nodeCount,\n                                     final String workspaceName,\n                                     final RepositoryCache repository )", "full_signature": "public static Batch batchOfKeys( final Iterator<NodeKey> keys,\n                                     final Iterator<Float> scores,\n                                     final long nodeCount,\n                                     final String workspaceName,\n                                     final RepositoryCache repository )", "class_method_signature": "NodeSequence.batchOfKeys( final Iterator<NodeKey> keys,\n                                     final Iterator<Float> scores,\n                                     final long nodeCount,\n                                     final String workspaceName,\n                                     final RepositoryCache repository )", "testcase": false, "constructor": false}, {"identifier": "batchOf", "parameters": "( final Batch first,\n                                    final Batch second,\n                                    final int firstWidth,\n                                    final int secondWidth )", "modifiers": "protected static", "return": "Batch", "signature": "Batch batchOf( final Batch first,\n                                    final Batch second,\n                                    final int firstWidth,\n                                    final int secondWidth )", "full_signature": "protected static Batch batchOf( final Batch first,\n                                    final Batch second,\n                                    final int firstWidth,\n                                    final int secondWidth )", "class_method_signature": "NodeSequence.batchOf( final Batch first,\n                                    final Batch second,\n                                    final int firstWidth,\n                                    final int secondWidth )", "testcase": false, "constructor": false}, {"identifier": "keyFor", "parameters": "( CachedNode node )", "modifiers": "protected static final", "return": "NodeKey", "signature": "NodeKey keyFor( CachedNode node )", "full_signature": "protected static final NodeKey keyFor( CachedNode node )", "class_method_signature": "NodeSequence.keyFor( CachedNode node )", "testcase": false, "constructor": false}, {"identifier": "requireBoth", "parameters": "( final RowFilter first,\n                                         final RowFilter second )", "modifiers": "public static", "return": "RowFilter", "signature": "RowFilter requireBoth( final RowFilter first,\n                                         final RowFilter second )", "full_signature": "public static RowFilter requireBoth( final RowFilter first,\n                                         final RowFilter second )", "class_method_signature": "NodeSequence.requireBoth( final RowFilter first,\n                                         final RowFilter second )", "testcase": false, "constructor": false}, {"identifier": "requireEither", "parameters": "( final RowFilter first,\n                                           final RowFilter second )", "modifiers": "public static", "return": "RowFilter", "signature": "RowFilter requireEither( final RowFilter first,\n                                           final RowFilter second )", "full_signature": "public static RowFilter requireEither( final RowFilter first,\n                                           final RowFilter second )", "class_method_signature": "NodeSequence.requireEither( final RowFilter first,\n                                           final RowFilter second )", "testcase": false, "constructor": false}, {"identifier": "batchFilteredWith", "parameters": "( final Batch batch,\n                                           final RowFilter filter )", "modifiers": "public static", "return": "Batch", "signature": "Batch batchFilteredWith( final Batch batch,\n                                           final RowFilter filter )", "full_signature": "public static Batch batchFilteredWith( final Batch batch,\n                                           final RowFilter filter )", "class_method_signature": "NodeSequence.batchFilteredWith( final Batch batch,\n                                           final RowFilter filter )", "testcase": false, "constructor": false}, {"identifier": "batchWithCount", "parameters": "( Batch batch )", "modifiers": "public static", "return": "Batch", "signature": "Batch batchWithCount( Batch batch )", "full_signature": "public static Batch batchWithCount( Batch batch )", "class_method_signature": "NodeSequence.batchWithCount( Batch batch )", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( Batch batch )", "modifiers": "public static", "return": "Batch", "signature": "Batch copy( Batch batch )", "full_signature": "public static Batch copy( Batch batch )", "class_method_signature": "NodeSequence.copy( Batch batch )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/query/NodeSequence.java"}, "focal_method": {"identifier": "limit", "parameters": "( NodeSequence sequence,\n                                      Limit limitAndOffset )", "modifiers": "public static", "return": "NodeSequence", "body": "public static NodeSequence limit( NodeSequence sequence,\n                                      Limit limitAndOffset ) {\n        if (sequence == null) return emptySequence(0);\n        if (limitAndOffset != null && !limitAndOffset.isUnlimited()) {\n            final int limit = limitAndOffset.getRowLimit();\n            // Perform the skip first ...\n            if (limitAndOffset.isOffset()) {\n                sequence = skip(sequence, limitAndOffset.getOffset());\n            }\n            // And then the offset ...\n            if (limit != Integer.MAX_VALUE) {\n                sequence = limit(sequence, limit);\n            }\n        }\n        return sequence;\n    }", "signature": "NodeSequence limit( NodeSequence sequence,\n                                      Limit limitAndOffset )", "full_signature": "public static NodeSequence limit( NodeSequence sequence,\n                                      Limit limitAndOffset )", "class_method_signature": "NodeSequence.limit( NodeSequence sequence,\n                                      Limit limitAndOffset )", "testcase": false, "constructor": false, "invocations": ["emptySequence", "isUnlimited", "getRowLimit", "isOffset", "skip", "getOffset", "limit"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}