{"test_class": {"identifier": "OpenDaylightToasterTest", "superclass": "extends AbstractConcurrentDataBrokerTest", "interfaces": "", "fields": [{"original_string": "private static final InstanceIdentifier<Toaster> TOASTER_IID = InstanceIdentifier.builder(Toaster.class).build();", "modifier": "private static final", "type": "InstanceIdentifier<Toaster>", "declarator": "TOASTER_IID = InstanceIdentifier.builder(Toaster.class).build()", "var_name": "TOASTER_IID"}, {"original_string": "private OpendaylightToaster toaster;", "modifier": "private", "type": "OpendaylightToaster", "declarator": "toaster", "var_name": "toaster"}], "file": "opendaylight/md-sal/samples/toaster-provider/src/test/java/org/opendaylight/controller/sample/toaster/provider/OpenDaylightToasterTest.java"}, "test_case": {"identifier": "testSomething", "parameters": "()", "modifiers": "@Test @Ignore //ignored because it is not a test right now. Illustrative purposes only. public", "return": "void", "body": "@Test\n    @Ignore //ignored because it is not a test right now. Illustrative purposes only.\n    public void testSomething() throws Exception {\n        MakeToastInput toastInput = new MakeToastInputBuilder().setToasterDoneness(Uint32.valueOf(1))\n                .setToasterToastType(WheatBread.class).build();\n\n        // NOTE: In a real test we would want to override the Thread.sleep() to\n        // prevent our junit test\n        // for sleeping for a second...\n        Future<RpcResult<MakeToastOutput>> makeToast = toaster.makeToast(toastInput);\n\n        RpcResult<MakeToastOutput> rpcResult = makeToast.get();\n\n        assertNotNull(rpcResult);\n        assertTrue(rpcResult.isSuccessful());\n        // etc\n    }", "signature": "void testSomething()", "full_signature": "@Test @Ignore //ignored because it is not a test right now. Illustrative purposes only. public void testSomething()", "class_method_signature": "OpenDaylightToasterTest.testSomething()", "testcase": true, "constructor": false, "invocations": ["build", "setToasterToastType", "setToasterDoneness", "valueOf", "makeToast", "get", "assertNotNull", "assertTrue", "isSuccessful"]}, "focal_class": {"identifier": "OpendaylightToaster", "superclass": "extends AbstractMXBean", "interfaces": "implements ToasterService, ToasterProviderRuntimeMXBean, DataTreeChangeListener<Toaster>, AutoCloseable", "fields": [{"original_string": "private static final CancelToastOutput EMPTY_CANCEL_OUTPUT = new CancelToastOutputBuilder().build();", "modifier": "private static final", "type": "CancelToastOutput", "declarator": "EMPTY_CANCEL_OUTPUT = new CancelToastOutputBuilder().build()", "var_name": "EMPTY_CANCEL_OUTPUT"}, {"original_string": "private static final MakeToastOutput EMPTY_MAKE_OUTPUT = new MakeToastOutputBuilder().build();", "modifier": "private static final", "type": "MakeToastOutput", "declarator": "EMPTY_MAKE_OUTPUT = new MakeToastOutputBuilder().build()", "var_name": "EMPTY_MAKE_OUTPUT"}, {"original_string": "private static final RestockToasterOutput EMPTY_RESTOCK_OUTPUT = new RestockToasterOutputBuilder().build();", "modifier": "private static final", "type": "RestockToasterOutput", "declarator": "EMPTY_RESTOCK_OUTPUT = new RestockToasterOutputBuilder().build()", "var_name": "EMPTY_RESTOCK_OUTPUT"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(OpendaylightToaster.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(OpendaylightToaster.class)", "var_name": "LOG"}, {"original_string": "private static final InstanceIdentifier<Toaster> TOASTER_IID = InstanceIdentifier.builder(Toaster.class).build();", "modifier": "private static final", "type": "InstanceIdentifier<Toaster>", "declarator": "TOASTER_IID = InstanceIdentifier.builder(Toaster.class).build()", "var_name": "TOASTER_IID"}, {"original_string": "private static final DisplayString TOASTER_MANUFACTURER = new DisplayString(\"Opendaylight\");", "modifier": "private static final", "type": "DisplayString", "declarator": "TOASTER_MANUFACTURER = new DisplayString(\"Opendaylight\")", "var_name": "TOASTER_MANUFACTURER"}, {"original_string": "private static final DisplayString TOASTER_MODEL_NUMBER = new DisplayString(\"Model 1 - Binding Aware\");", "modifier": "private static final", "type": "DisplayString", "declarator": "TOASTER_MODEL_NUMBER = new DisplayString(\"Model 1 - Binding Aware\")", "var_name": "TOASTER_MODEL_NUMBER"}, {"original_string": "private DataBroker dataBroker;", "modifier": "private", "type": "DataBroker", "declarator": "dataBroker", "var_name": "dataBroker"}, {"original_string": "private NotificationPublishService notificationProvider;", "modifier": "private", "type": "NotificationPublishService", "declarator": "notificationProvider", "var_name": "notificationProvider"}, {"original_string": "private ListenerRegistration<OpendaylightToaster> dataTreeChangeListenerRegistration;", "modifier": "private", "type": "ListenerRegistration<OpendaylightToaster>", "declarator": "dataTreeChangeListenerRegistration", "var_name": "dataTreeChangeListenerRegistration"}, {"original_string": "private final ExecutorService executor;", "modifier": "private final", "type": "ExecutorService", "declarator": "executor", "var_name": "executor"}, {"original_string": "private final AtomicReference<Future<?>> currentMakeToastTask = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<Future<?>>", "declarator": "currentMakeToastTask = new AtomicReference<>()", "var_name": "currentMakeToastTask"}, {"original_string": "private final AtomicLong amountOfBreadInStock = new AtomicLong(100);", "modifier": "private final", "type": "AtomicLong", "declarator": "amountOfBreadInStock = new AtomicLong(100)", "var_name": "amountOfBreadInStock"}, {"original_string": "private final AtomicLong toastsMade = new AtomicLong(0);", "modifier": "private final", "type": "AtomicLong", "declarator": "toastsMade = new AtomicLong(0)", "var_name": "toastsMade"}, {"original_string": "private final AtomicLong darknessFactor = new AtomicLong(1000);", "modifier": "private final", "type": "AtomicLong", "declarator": "darknessFactor = new AtomicLong(1000)", "var_name": "darknessFactor"}, {"original_string": "private final ToasterAppConfig toasterAppConfig;", "modifier": "private final", "type": "ToasterAppConfig", "declarator": "toasterAppConfig", "var_name": "toasterAppConfig"}], "methods": [{"identifier": "OpendaylightToaster", "parameters": "()", "modifiers": "public", "return": "", "signature": " OpendaylightToaster()", "full_signature": "public  OpendaylightToaster()", "class_method_signature": "OpendaylightToaster.OpendaylightToaster()", "testcase": false, "constructor": true}, {"identifier": "OpendaylightToaster", "parameters": "(final ToasterAppConfig toasterAppConfig)", "modifiers": "public", "return": "", "signature": " OpendaylightToaster(final ToasterAppConfig toasterAppConfig)", "full_signature": "public  OpendaylightToaster(final ToasterAppConfig toasterAppConfig)", "class_method_signature": "OpendaylightToaster.OpendaylightToaster(final ToasterAppConfig toasterAppConfig)", "testcase": false, "constructor": true}, {"identifier": "setNotificationProvider", "parameters": "(final NotificationPublishService notificationPublishService)", "modifiers": "public", "return": "void", "signature": "void setNotificationProvider(final NotificationPublishService notificationPublishService)", "full_signature": "public void setNotificationProvider(final NotificationPublishService notificationPublishService)", "class_method_signature": "OpendaylightToaster.setNotificationProvider(final NotificationPublishService notificationPublishService)", "testcase": false, "constructor": false}, {"identifier": "setDataBroker", "parameters": "(final DataBroker dataBroker)", "modifiers": "public", "return": "void", "signature": "void setDataBroker(final DataBroker dataBroker)", "full_signature": "public void setDataBroker(final DataBroker dataBroker)", "class_method_signature": "OpendaylightToaster.setDataBroker(final DataBroker dataBroker)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "OpendaylightToaster.init()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "OpendaylightToaster.close()", "testcase": false, "constructor": false}, {"identifier": "buildToaster", "parameters": "(final ToasterStatus status)", "modifiers": "private", "return": "Toaster", "signature": "Toaster buildToaster(final ToasterStatus status)", "full_signature": "private Toaster buildToaster(final ToasterStatus status)", "class_method_signature": "OpendaylightToaster.buildToaster(final ToasterStatus status)", "testcase": false, "constructor": false}, {"identifier": "onDataTreeChanged", "parameters": "(final Collection<DataTreeModification<Toaster>> changes)", "modifiers": "@Override public", "return": "void", "signature": "void onDataTreeChanged(final Collection<DataTreeModification<Toaster>> changes)", "full_signature": "@Override public void onDataTreeChanged(final Collection<DataTreeModification<Toaster>> changes)", "class_method_signature": "OpendaylightToaster.onDataTreeChanged(final Collection<DataTreeModification<Toaster>> changes)", "testcase": false, "constructor": false}, {"identifier": "cancelToast", "parameters": "(final CancelToastInput input)", "modifiers": "@Override public", "return": "ListenableFuture<RpcResult<CancelToastOutput>>", "signature": "ListenableFuture<RpcResult<CancelToastOutput>> cancelToast(final CancelToastInput input)", "full_signature": "@Override public ListenableFuture<RpcResult<CancelToastOutput>> cancelToast(final CancelToastInput input)", "class_method_signature": "OpendaylightToaster.cancelToast(final CancelToastInput input)", "testcase": false, "constructor": false}, {"identifier": "makeToast", "parameters": "(final MakeToastInput input)", "modifiers": "@Override public", "return": "ListenableFuture<RpcResult<MakeToastOutput>>", "signature": "ListenableFuture<RpcResult<MakeToastOutput>> makeToast(final MakeToastInput input)", "full_signature": "@Override public ListenableFuture<RpcResult<MakeToastOutput>> makeToast(final MakeToastInput input)", "class_method_signature": "OpendaylightToaster.makeToast(final MakeToastInput input)", "testcase": false, "constructor": false}, {"identifier": "makeToasterOutOfBreadError", "parameters": "()", "modifiers": "private static", "return": "RpcError", "signature": "RpcError makeToasterOutOfBreadError()", "full_signature": "private static RpcError makeToasterOutOfBreadError()", "class_method_signature": "OpendaylightToaster.makeToasterOutOfBreadError()", "testcase": false, "constructor": false}, {"identifier": "makeToasterInUseError", "parameters": "()", "modifiers": "private static", "return": "RpcError", "signature": "RpcError makeToasterInUseError()", "full_signature": "private static RpcError makeToasterInUseError()", "class_method_signature": "OpendaylightToaster.makeToasterInUseError()", "testcase": false, "constructor": false}, {"identifier": "checkStatusAndMakeToast", "parameters": "(final MakeToastInput input,\n            final SettableFuture<RpcResult<MakeToastOutput>> futureResult, final int tries)", "modifiers": "private", "return": "void", "signature": "void checkStatusAndMakeToast(final MakeToastInput input,\n            final SettableFuture<RpcResult<MakeToastOutput>> futureResult, final int tries)", "full_signature": "private void checkStatusAndMakeToast(final MakeToastInput input,\n            final SettableFuture<RpcResult<MakeToastOutput>> futureResult, final int tries)", "class_method_signature": "OpendaylightToaster.checkStatusAndMakeToast(final MakeToastInput input,\n            final SettableFuture<RpcResult<MakeToastOutput>> futureResult, final int tries)", "testcase": false, "constructor": false}, {"identifier": "restockToaster", "parameters": "(final RestockToasterInput input)", "modifiers": "@Override public", "return": "ListenableFuture<RpcResult<RestockToasterOutput>>", "signature": "ListenableFuture<RpcResult<RestockToasterOutput>> restockToaster(final RestockToasterInput input)", "full_signature": "@Override public ListenableFuture<RpcResult<RestockToasterOutput>> restockToaster(final RestockToasterInput input)", "class_method_signature": "OpendaylightToaster.restockToaster(final RestockToasterInput input)", "testcase": false, "constructor": false}, {"identifier": "clearToastsMade", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearToastsMade()", "full_signature": "@Override public void clearToastsMade()", "class_method_signature": "OpendaylightToaster.clearToastsMade()", "testcase": false, "constructor": false}, {"identifier": "getToastsMade", "parameters": "()", "modifiers": "@Override public", "return": "Long", "signature": "Long getToastsMade()", "full_signature": "@Override public Long getToastsMade()", "class_method_signature": "OpendaylightToaster.getToastsMade()", "testcase": false, "constructor": false}, {"identifier": "setToasterStatusUp", "parameters": "(final Function<Boolean, MakeToastOutput> resultCallback)", "modifiers": "private", "return": "void", "signature": "void setToasterStatusUp(final Function<Boolean, MakeToastOutput> resultCallback)", "full_signature": "private void setToasterStatusUp(final Function<Boolean, MakeToastOutput> resultCallback)", "class_method_signature": "OpendaylightToaster.setToasterStatusUp(final Function<Boolean, MakeToastOutput> resultCallback)", "testcase": false, "constructor": false}, {"identifier": "outOfBread", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean outOfBread()", "full_signature": "private boolean outOfBread()", "class_method_signature": "OpendaylightToaster.outOfBread()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/samples/toaster-provider/src/main/java/org/opendaylight/controller/sample/toaster/provider/OpendaylightToaster.java"}, "focal_method": {"identifier": "makeToast", "parameters": "(final MakeToastInput input)", "modifiers": "@Override public", "return": "ListenableFuture<RpcResult<MakeToastOutput>>", "body": "@Override\n    public ListenableFuture<RpcResult<MakeToastOutput>> makeToast(final MakeToastInput input) {\n        LOG.info(\"makeToast: {}\", input);\n\n        final SettableFuture<RpcResult<MakeToastOutput>> futureResult = SettableFuture.create();\n\n        checkStatusAndMakeToast(input, futureResult, toasterAppConfig.getMaxMakeToastTries().toJava());\n\n        return futureResult;\n    }", "signature": "ListenableFuture<RpcResult<MakeToastOutput>> makeToast(final MakeToastInput input)", "full_signature": "@Override public ListenableFuture<RpcResult<MakeToastOutput>> makeToast(final MakeToastInput input)", "class_method_signature": "OpendaylightToaster.makeToast(final MakeToastInput input)", "testcase": false, "constructor": false, "invocations": ["info", "create", "checkStatusAndMakeToast", "toJava", "getMaxMakeToastTries"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}