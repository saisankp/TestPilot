{"test_class": {"identifier": "BlockTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String PoC7_GENESIS_HEX_RLP_ENCODED = \"f88bf887a0000000000000000000000000000000000000000000000000000000000000000080940000000000000000000000000000000000000000a008bf6a98374f333b84e7d063d607696ac7cbbd409bd20fbe6a741c2dfc0eb28580830200008080830f4240808080a004994f67dc55b09e814ab7ffc8df3686b4afb2bb53e60eae97ef043fe03fb829c0c0\";", "modifier": "private", "type": "String", "declarator": "PoC7_GENESIS_HEX_RLP_ENCODED = \"f88bf887a0000000000000000000000000000000000000000000000000000000000000000080940000000000000000000000000000000000000000a008bf6a98374f333b84e7d063d607696ac7cbbd409bd20fbe6a741c2dfc0eb28580830200008080830f4240808080a004994f67dc55b09e814ab7ffc8df3686b4afb2bb53e60eae97ef043fe03fb829c0c0\"", "var_name": "PoC7_GENESIS_HEX_RLP_ENCODED"}, {"original_string": "private String PoC7_GENESIS_HEX_HASH = \"9f0eb5da696ede7b44b22a8ef3a998f19e422195fdc9a8b3c82457858d310d6c\";", "modifier": "private", "type": "String", "declarator": "PoC7_GENESIS_HEX_HASH = \"9f0eb5da696ede7b44b22a8ef3a998f19e422195fdc9a8b3c82457858d310d6c\"", "var_name": "PoC7_GENESIS_HEX_HASH"}, {"original_string": "String block_2 = \"f8b5f8b1a0cf4b25b08b39350304fe12a16e4216c01a426f8f3dbf0d392b5b45\"\n\t\t\t\t   + \"8ffb6a399da01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a1\"\n\t\t\t\t   + \"42fd40d493479476f5eabe4b342ee56b8ceba6ab2a770c3e2198e7a08a22d58b\"\n\t\t\t\t   + \"a5c65b2bf660a961b075a43f564374d38bfe6cc69823eea574d1d16e80833fe0\"\n\t\t\t\t   + \"04028609184e72a000830f3aab80845387c60380a00000000000000000000000\"\n\t\t\t\t   + \"0000000000000000000000000033172b6669131179c0c0\";", "modifier": "", "type": "String", "declarator": "block_2 = \"f8b5f8b1a0cf4b25b08b39350304fe12a16e4216c01a426f8f3dbf0d392b5b45\"\n\t\t\t\t   + \"8ffb6a399da01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a1\"\n\t\t\t\t   + \"42fd40d493479476f5eabe4b342ee56b8ceba6ab2a770c3e2198e7a08a22d58b\"\n\t\t\t\t   + \"a5c65b2bf660a961b075a43f564374d38bfe6cc69823eea574d1d16e80833fe0\"\n\t\t\t\t   + \"04028609184e72a000830f3aab80845387c60380a00000000000000000000000\"\n\t\t\t\t   + \"0000000000000000000000000033172b6669131179c0c0\"", "var_name": "block_2"}, {"original_string": "String block_17 = \"f9016df8d3a0aa142573b355c6f2e8306471c869b0d12d0638cea3f57d39991a\"\n    \t\t+ \"b1b03ffa40daa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40\"\n    \t\t+ \"d4934794e559de5527492bcb42ec68d07df0742a98ec3f1ea031c973c20e7a15c319a9ff\"\n    \t\t+ \"9b0aab5bdc121320767fee71fb2b771ce1c93cf812a01b224ec310c2bfb40fd0e6a668ee\"\n    \t\t+ \"7c06a5a4a4bfb99620d0fea8f7b43315dd59833f3130118609184e72a000830f01ec8201\"\n    \t\t+ \"f4845387f36980a00000000000000000000000000000000000000000000000000532c3ae\"\n    \t\t+ \"9b3503f6f895f893f86d018609184e72a0008201f494f625565ac58ec5dadfce1b8f9fb1\"\n    \t\t+ \"dd30db48613b8862cf5246d0c80000801ca05caa26abb350e0521a25b8df229806f3777d\"\n    \t\t+ \"9e262996493846a590c7011697dba07bb7680a256ede4034212b7a1ae6c7caea73190cb0\"\n    \t\t+ \"7dedb91a07b72f34074e76a00cd22d78d556175604407dc6109797f5c8d990d05f1b352e\"\n    \t\t+ \"10c71b3dd74bc70f8201f4c0\";", "modifier": "", "type": "String", "declarator": "block_17 = \"f9016df8d3a0aa142573b355c6f2e8306471c869b0d12d0638cea3f57d39991a\"\n    \t\t+ \"b1b03ffa40daa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40\"\n    \t\t+ \"d4934794e559de5527492bcb42ec68d07df0742a98ec3f1ea031c973c20e7a15c319a9ff\"\n    \t\t+ \"9b0aab5bdc121320767fee71fb2b771ce1c93cf812a01b224ec310c2bfb40fd0e6a668ee\"\n    \t\t+ \"7c06a5a4a4bfb99620d0fea8f7b43315dd59833f3130118609184e72a000830f01ec8201\"\n    \t\t+ \"f4845387f36980a00000000000000000000000000000000000000000000000000532c3ae\"\n    \t\t+ \"9b3503f6f895f893f86d018609184e72a0008201f494f625565ac58ec5dadfce1b8f9fb1\"\n    \t\t+ \"dd30db48613b8862cf5246d0c80000801ca05caa26abb350e0521a25b8df229806f3777d\"\n    \t\t+ \"9e262996493846a590c7011697dba07bb7680a256ede4034212b7a1ae6c7caea73190cb0\"\n    \t\t+ \"7dedb91a07b72f34074e76a00cd22d78d556175604407dc6109797f5c8d990d05f1b352e\"\n    \t\t+ \"10c71b3dd74bc70f8201f4c0\"", "var_name": "block_17"}, {"original_string": "String block_32 = \"f8b5f8b1a00a312c2b0a8f125c60a3976b6e508e740e095eb59943988d9bbfb8\"\n    \t\t+ \"aa43922e31a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4\"\n    \t\t+ \"934794e559de5527492bcb42ec68d07df0742a98ec3f1ea050188ab86bdf164ac90eb283\"\n    \t\t+ \"5a04a8930aae5393c3a2ef1166fb95028f9456b880833ee248208609184e72a000830eca\"\n    \t\t+ \"0080845387fd2080a00000000000000000000000000000000000000000000000001f52eb\"\n    \t\t+ \"b192c4ea97c0c0\";", "modifier": "", "type": "String", "declarator": "block_32 = \"f8b5f8b1a00a312c2b0a8f125c60a3976b6e508e740e095eb59943988d9bbfb8\"\n    \t\t+ \"aa43922e31a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4\"\n    \t\t+ \"934794e559de5527492bcb42ec68d07df0742a98ec3f1ea050188ab86bdf164ac90eb283\"\n    \t\t+ \"5a04a8930aae5393c3a2ef1166fb95028f9456b880833ee248208609184e72a000830eca\"\n    \t\t+ \"0080845387fd2080a00000000000000000000000000000000000000000000000001f52eb\"\n    \t\t+ \"b192c4ea97c0c0\"", "var_name": "block_32"}], "file": "ethereumj-core/src/test/java/org/ethereum/core/BlockTest.java"}, "test_case": {"identifier": "testCalcDifficulty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCalcDifficulty() {\n\n        Block genesis = Genesis.getInstance();\n        BigInteger difficulty = new BigInteger(1, genesis.calcDifficulty());\n        System.out.println(\"Genesis difficulty = \" + difficulty.toString());\n        assertEquals(new BigInteger(1, Genesis.DIFFICULTY), difficulty);\n\n        // Storing genesis because the parent needs to be in the DB for calculation.\n        WorldManager.getInstance().getBlockchain().add(genesis);\n\n        Block block1 = new Block(Hex.decode(PoC7_GENESIS_HEX_RLP_ENCODED));\n        BigInteger calcDifficulty = new BigInteger(1, block1.calcDifficulty());\n        BigInteger actualDifficulty = new BigInteger(1, block1.getDifficulty());\n        System.out.println(\"Block#1 actual difficulty = \" + actualDifficulty.toString());\n        System.out.println(\"Block#1 calculated difficulty = \" + calcDifficulty.toString());\n        assertEquals(actualDifficulty, calcDifficulty);\n    }", "signature": "void testCalcDifficulty()", "full_signature": "@Test public void testCalcDifficulty()", "class_method_signature": "BlockTest.testCalcDifficulty()", "testcase": true, "constructor": false, "invocations": ["getInstance", "calcDifficulty", "println", "toString", "assertEquals", "add", "getBlockchain", "getInstance", "decode", "calcDifficulty", "getDifficulty", "println", "toString", "println", "toString", "assertEquals"]}, "focal_class": {"identifier": "Block", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(\"block\");", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(\"block\")", "var_name": "logger"}, {"original_string": "public  static BigInteger BLOCK_REWARD = BigInteger.valueOf(1500000000000000000L);", "modifier": "public  static", "type": "BigInteger", "declarator": "BLOCK_REWARD = BigInteger.valueOf(1500000000000000000L)", "var_name": "BLOCK_REWARD"}, {"original_string": "public static BigInteger UNCLE_REWARD = BLOCK_REWARD.multiply(\n\t\t\tBigInteger.valueOf(15)).divide(BigInteger.valueOf(16));", "modifier": "public static", "type": "BigInteger", "declarator": "UNCLE_REWARD = BLOCK_REWARD.multiply(\n\t\t\tBigInteger.valueOf(15)).divide(BigInteger.valueOf(16))", "var_name": "UNCLE_REWARD"}, {"original_string": "public static BigInteger INCLUSION_REWARD = Block.BLOCK_REWARD\n\t\t\t.divide(BigInteger.valueOf(32));", "modifier": "public static", "type": "BigInteger", "declarator": "INCLUSION_REWARD = Block.BLOCK_REWARD\n\t\t\t.divide(BigInteger.valueOf(32))", "var_name": "INCLUSION_REWARD"}, {"original_string": "private BlockHeader header;", "modifier": "private", "type": "BlockHeader", "declarator": "header", "var_name": "header"}, {"original_string": "private List<TransactionReceipt> txReceiptList = new CopyOnWriteArrayList<>() ;", "modifier": "private", "type": "List<TransactionReceipt>", "declarator": "txReceiptList = new CopyOnWriteArrayList<>()", "var_name": "txReceiptList"}, {"original_string": "private List<Transaction> transactionsList = new CopyOnWriteArrayList<>();", "modifier": "private", "type": "List<Transaction>", "declarator": "transactionsList = new CopyOnWriteArrayList<>()", "var_name": "transactionsList"}, {"original_string": "private List<BlockHeader> uncleList = new CopyOnWriteArrayList<>();", "modifier": "private", "type": "List<BlockHeader>", "declarator": "uncleList = new CopyOnWriteArrayList<>()", "var_name": "uncleList"}, {"original_string": "private byte[] rlpEncoded;", "modifier": "private", "type": "byte[]", "declarator": "rlpEncoded", "var_name": "rlpEncoded"}, {"original_string": "private boolean parsed = false;", "modifier": "private", "type": "boolean", "declarator": "parsed = false", "var_name": "parsed"}, {"original_string": "private Trie txsState;", "modifier": "private", "type": "Trie", "declarator": "txsState", "var_name": "txsState"}, {"original_string": "private StringBuffer toStringBuff = new StringBuffer();", "modifier": "private", "type": "StringBuffer", "declarator": "toStringBuff = new StringBuffer()", "var_name": "toStringBuff"}], "methods": [{"identifier": "Block", "parameters": "(byte[] rawData)", "modifiers": "public", "return": "", "signature": " Block(byte[] rawData)", "full_signature": "public  Block(byte[] rawData)", "class_method_signature": "Block.Block(byte[] rawData)", "testcase": false, "constructor": true}, {"identifier": "Block", "parameters": "(byte[] parentHash, byte[] unclesHash, byte[] coinbase,\n\t\t\tbyte[] difficulty, long number, long minGasPrice, long gasLimit,\n\t\t\tlong gasUsed, long timestamp, byte[] extraData, byte[] nonce,\n\t\t\tList<Transaction> transactionsList, List<BlockHeader> uncleList)", "modifiers": "public", "return": "", "signature": " Block(byte[] parentHash, byte[] unclesHash, byte[] coinbase,\n\t\t\tbyte[] difficulty, long number, long minGasPrice, long gasLimit,\n\t\t\tlong gasUsed, long timestamp, byte[] extraData, byte[] nonce,\n\t\t\tList<Transaction> transactionsList, List<BlockHeader> uncleList)", "full_signature": "public  Block(byte[] parentHash, byte[] unclesHash, byte[] coinbase,\n\t\t\tbyte[] difficulty, long number, long minGasPrice, long gasLimit,\n\t\t\tlong gasUsed, long timestamp, byte[] extraData, byte[] nonce,\n\t\t\tList<Transaction> transactionsList, List<BlockHeader> uncleList)", "class_method_signature": "Block.Block(byte[] parentHash, byte[] unclesHash, byte[] coinbase,\n\t\t\tbyte[] difficulty, long number, long minGasPrice, long gasLimit,\n\t\t\tlong gasUsed, long timestamp, byte[] extraData, byte[] nonce,\n\t\t\tList<Transaction> transactionsList, List<BlockHeader> uncleList)", "testcase": false, "constructor": true}, {"identifier": "parseRLP", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void parseRLP()", "full_signature": "private void parseRLP()", "class_method_signature": "Block.parseRLP()", "testcase": false, "constructor": false}, {"identifier": "getHash", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getHash()", "full_signature": "public byte[] getHash()", "class_method_signature": "Block.getHash()", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "public", "return": "Block", "signature": "Block getParent()", "full_signature": "public Block getParent()", "class_method_signature": "Block.getParent()", "testcase": false, "constructor": false}, {"identifier": "calcDifficulty", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] calcDifficulty()", "full_signature": "public byte[] calcDifficulty()", "class_method_signature": "Block.calcDifficulty()", "testcase": false, "constructor": false}, {"identifier": "calcGasLimit", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long calcGasLimit()", "full_signature": "public long calcGasLimit()", "class_method_signature": "Block.calcGasLimit()", "testcase": false, "constructor": false}, {"identifier": "validateNonce", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean validateNonce()", "full_signature": "public boolean validateNonce()", "class_method_signature": "Block.validateNonce()", "testcase": false, "constructor": false}, {"identifier": "getParentHash", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getParentHash()", "full_signature": "public byte[] getParentHash()", "class_method_signature": "Block.getParentHash()", "testcase": false, "constructor": false}, {"identifier": "getUnclesHash", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getUnclesHash()", "full_signature": "public byte[] getUnclesHash()", "class_method_signature": "Block.getUnclesHash()", "testcase": false, "constructor": false}, {"identifier": "getCoinbase", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getCoinbase()", "full_signature": "public byte[] getCoinbase()", "class_method_signature": "Block.getCoinbase()", "testcase": false, "constructor": false}, {"identifier": "getStateRoot", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getStateRoot()", "full_signature": "public byte[] getStateRoot()", "class_method_signature": "Block.getStateRoot()", "testcase": false, "constructor": false}, {"identifier": "setStateRoot", "parameters": "(byte[] stateRoot)", "modifiers": "public", "return": "void", "signature": "void setStateRoot(byte[] stateRoot)", "full_signature": "public void setStateRoot(byte[] stateRoot)", "class_method_signature": "Block.setStateRoot(byte[] stateRoot)", "testcase": false, "constructor": false}, {"identifier": "getTxTrieRoot", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getTxTrieRoot()", "full_signature": "public byte[] getTxTrieRoot()", "class_method_signature": "Block.getTxTrieRoot()", "testcase": false, "constructor": false}, {"identifier": "getDifficulty", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getDifficulty()", "full_signature": "public byte[] getDifficulty()", "class_method_signature": "Block.getDifficulty()", "testcase": false, "constructor": false}, {"identifier": "getCumulativeDifficulty", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getCumulativeDifficulty()", "full_signature": "public BigInteger getCumulativeDifficulty()", "class_method_signature": "Block.getCumulativeDifficulty()", "testcase": false, "constructor": false}, {"identifier": "getTimestamp", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTimestamp()", "full_signature": "public long getTimestamp()", "class_method_signature": "Block.getTimestamp()", "testcase": false, "constructor": false}, {"identifier": "getNumber", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getNumber()", "full_signature": "public long getNumber()", "class_method_signature": "Block.getNumber()", "testcase": false, "constructor": false}, {"identifier": "getMinGasPrice", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMinGasPrice()", "full_signature": "public long getMinGasPrice()", "class_method_signature": "Block.getMinGasPrice()", "testcase": false, "constructor": false}, {"identifier": "getGasLimit", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getGasLimit()", "full_signature": "public long getGasLimit()", "class_method_signature": "Block.getGasLimit()", "testcase": false, "constructor": false}, {"identifier": "getGasUsed", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getGasUsed()", "full_signature": "public long getGasUsed()", "class_method_signature": "Block.getGasUsed()", "testcase": false, "constructor": false}, {"identifier": "getExtraData", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getExtraData()", "full_signature": "public byte[] getExtraData()", "class_method_signature": "Block.getExtraData()", "testcase": false, "constructor": false}, {"identifier": "getNonce", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getNonce()", "full_signature": "public byte[] getNonce()", "class_method_signature": "Block.getNonce()", "testcase": false, "constructor": false}, {"identifier": "setNonce", "parameters": "(byte[] nonce)", "modifiers": "public", "return": "void", "signature": "void setNonce(byte[] nonce)", "full_signature": "public void setNonce(byte[] nonce)", "class_method_signature": "Block.setNonce(byte[] nonce)", "testcase": false, "constructor": false}, {"identifier": "getTransactionsList", "parameters": "()", "modifiers": "public", "return": "List<Transaction>", "signature": "List<Transaction> getTransactionsList()", "full_signature": "public List<Transaction> getTransactionsList()", "class_method_signature": "Block.getTransactionsList()", "testcase": false, "constructor": false}, {"identifier": "getTxReceiptList", "parameters": "()", "modifiers": "public", "return": "List<TransactionReceipt>", "signature": "List<TransactionReceipt> getTxReceiptList()", "full_signature": "public List<TransactionReceipt> getTxReceiptList()", "class_method_signature": "Block.getTxReceiptList()", "testcase": false, "constructor": false}, {"identifier": "getUncleList", "parameters": "()", "modifiers": "public", "return": "List<BlockHeader>", "signature": "List<BlockHeader> getUncleList()", "full_signature": "public List<BlockHeader> getUncleList()", "class_method_signature": "Block.getUncleList()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Block.toString()", "testcase": false, "constructor": false}, {"identifier": "toFlatString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toFlatString()", "full_signature": "public String toFlatString()", "class_method_signature": "Block.toFlatString()", "testcase": false, "constructor": false}, {"identifier": "toStylishString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toStylishString()", "full_signature": "public String toStylishString()", "class_method_signature": "Block.toStylishString()", "testcase": false, "constructor": false}, {"identifier": "parseTxs", "parameters": "(byte[] expectedRoot, RLPList txReceipts)", "modifiers": "private", "return": "void", "signature": "void parseTxs(byte[] expectedRoot, RLPList txReceipts)", "full_signature": "private void parseTxs(byte[] expectedRoot, RLPList txReceipts)", "class_method_signature": "Block.parseTxs(byte[] expectedRoot, RLPList txReceipts)", "testcase": false, "constructor": false}, {"identifier": "addTxReceipt", "parameters": "(int counter, TransactionReceipt txReceipt)", "modifiers": "private", "return": "void", "signature": "void addTxReceipt(int counter, TransactionReceipt txReceipt)", "full_signature": "private void addTxReceipt(int counter, TransactionReceipt txReceipt)", "class_method_signature": "Block.addTxReceipt(int counter, TransactionReceipt txReceipt)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isValid()", "full_signature": "public boolean isValid()", "class_method_signature": "Block.isValid()", "testcase": false, "constructor": false}, {"identifier": "isGenesis", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isGenesis()", "full_signature": "public boolean isGenesis()", "class_method_signature": "Block.isGenesis()", "testcase": false, "constructor": false}, {"identifier": "getEncoded", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getEncoded()", "full_signature": "public byte[] getEncoded()", "class_method_signature": "Block.getEncoded()", "testcase": false, "constructor": false}, {"identifier": "getEncodedWithoutNonce", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getEncodedWithoutNonce()", "full_signature": "public byte[] getEncodedWithoutNonce()", "class_method_signature": "Block.getEncodedWithoutNonce()", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/core/Block.java"}, "focal_method": {"identifier": "calcDifficulty", "parameters": "()", "modifiers": "public", "return": "byte[]", "body": "public byte[] calcDifficulty() {\n\t\tif (!parsed) parseRLP();\n\t\treturn this.header.calcDifficulty();\n\t}", "signature": "byte[] calcDifficulty()", "full_signature": "public byte[] calcDifficulty()", "class_method_signature": "Block.calcDifficulty()", "testcase": false, "constructor": false, "invocations": ["parseRLP", "calcDifficulty"]}, "repository": {"repo_id": 24503275, "url": "https://github.com/ethereumj/ethereumj", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 27, "size": 13884, "license": "licensed"}}