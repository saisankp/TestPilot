{"test_class": {"identifier": "StringTimeSeriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}], "file": "time-series/time-series-api/src/test/java/com/powsybl/timeseries/StringTimeSeriesTest.java"}, "test_case": {"identifier": "testCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate() {\n        TimeSeriesIndex index = new TestTimeSeriesIndex(0L, 3);\n        StringTimeSeries ts1 = TimeSeries.createString(\"ts1\", index, \"a\", \"b\", \"c\");\n        assertEquals(\"ts1\", ts1.getMetadata().getName());\n        assertEquals(TimeSeriesDataType.STRING, ts1.getMetadata().getDataType());\n        assertArrayEquals(new String[] {\"a\", \"b\", \"c\"}, ts1.toArray());\n    }", "signature": "void testCreate()", "full_signature": "@Test public void testCreate()", "class_method_signature": "StringTimeSeriesTest.testCreate()", "testcase": true, "constructor": false, "invocations": ["createString", "assertEquals", "getName", "getMetadata", "assertEquals", "getDataType", "getMetadata", "assertArrayEquals", "toArray"]}, "focal_class": {"identifier": "StringTimeSeries", "superclass": "extends AbstractTimeSeries<StringPoint, StringDataChunk, StringTimeSeries>", "interfaces": "implements TimeSeries<StringPoint, StringTimeSeries>", "fields": [{"original_string": "private static final String[] NULL_ARRAY = new String[] {null};", "modifier": "private static final", "type": "String[]", "declarator": "NULL_ARRAY = new String[] {null}", "var_name": "NULL_ARRAY"}], "methods": [{"identifier": "StringTimeSeries", "parameters": "(TimeSeriesMetadata metadata, StringDataChunk... chunks)", "modifiers": "public", "return": "", "signature": " StringTimeSeries(TimeSeriesMetadata metadata, StringDataChunk... chunks)", "full_signature": "public  StringTimeSeries(TimeSeriesMetadata metadata, StringDataChunk... chunks)", "class_method_signature": "StringTimeSeries.StringTimeSeries(TimeSeriesMetadata metadata, StringDataChunk... chunks)", "testcase": false, "constructor": true}, {"identifier": "StringTimeSeries", "parameters": "(TimeSeriesMetadata metadata, List<StringDataChunk> chunks)", "modifiers": "public", "return": "", "signature": " StringTimeSeries(TimeSeriesMetadata metadata, List<StringDataChunk> chunks)", "full_signature": "public  StringTimeSeries(TimeSeriesMetadata metadata, List<StringDataChunk> chunks)", "class_method_signature": "StringTimeSeries.StringTimeSeries(TimeSeriesMetadata metadata, List<StringDataChunk> chunks)", "testcase": false, "constructor": true}, {"identifier": "createGapFillingChunk", "parameters": "(int i, int length)", "modifiers": "protected", "return": "CompressedStringDataChunk", "signature": "CompressedStringDataChunk createGapFillingChunk(int i, int length)", "full_signature": "protected CompressedStringDataChunk createGapFillingChunk(int i, int length)", "class_method_signature": "StringTimeSeries.createGapFillingChunk(int i, int length)", "testcase": false, "constructor": false}, {"identifier": "createTimeSeries", "parameters": "(StringDataChunk chunk)", "modifiers": "@Override protected", "return": "StringTimeSeries", "signature": "StringTimeSeries createTimeSeries(StringDataChunk chunk)", "full_signature": "@Override protected StringTimeSeries createTimeSeries(StringDataChunk chunk)", "class_method_signature": "StringTimeSeries.createTimeSeries(StringDataChunk chunk)", "testcase": false, "constructor": false}, {"identifier": "forEachChunk", "parameters": "(Consumer<StringDataChunk> consumer)", "modifiers": "private", "return": "void", "signature": "void forEachChunk(Consumer<StringDataChunk> consumer)", "full_signature": "private void forEachChunk(Consumer<StringDataChunk> consumer)", "class_method_signature": "StringTimeSeries.forEachChunk(Consumer<StringDataChunk> consumer)", "testcase": false, "constructor": false}, {"identifier": "fillBuffer", "parameters": "(CompactStringBuffer buffer, int timeSeriesOffset)", "modifiers": "public", "return": "void", "signature": "void fillBuffer(CompactStringBuffer buffer, int timeSeriesOffset)", "full_signature": "public void fillBuffer(CompactStringBuffer buffer, int timeSeriesOffset)", "class_method_signature": "StringTimeSeries.fillBuffer(CompactStringBuffer buffer, int timeSeriesOffset)", "testcase": false, "constructor": false}, {"identifier": "fillBuffer", "parameters": "(BigStringBuffer buffer, long timeSeriesOffset)", "modifiers": "public", "return": "void", "signature": "void fillBuffer(BigStringBuffer buffer, long timeSeriesOffset)", "full_signature": "public void fillBuffer(BigStringBuffer buffer, long timeSeriesOffset)", "class_method_signature": "StringTimeSeries.fillBuffer(BigStringBuffer buffer, long timeSeriesOffset)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] toArray()", "full_signature": "public String[] toArray()", "class_method_signature": "StringTimeSeries.toArray()", "testcase": false, "constructor": false}], "file": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/StringTimeSeries.java"}, "focal_method": {"identifier": "toArray", "parameters": "()", "modifiers": "public", "return": "String[]", "body": "public String[] toArray() {\n        CompactStringBuffer buffer = new CompactStringBuffer(ByteBuffer::allocate, metadata.getIndex().getPointCount());\n        chunks.forEach(chunk -> chunk.fillBuffer(buffer, 0));\n        return buffer.toArray();\n    }", "signature": "String[] toArray()", "full_signature": "public String[] toArray()", "class_method_signature": "StringTimeSeries.toArray()", "testcase": false, "constructor": false, "invocations": ["getPointCount", "getIndex", "forEach", "fillBuffer", "toArray"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}