{"test_class": {"identifier": "RedisClusterOnlineRetrieverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock StatefulRedisClusterConnection<byte[], byte[]> connection;", "modifier": "@Mock", "type": "StatefulRedisClusterConnection<byte[], byte[]>", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock RedisAdvancedClusterCommands<byte[], byte[]> syncCommands;", "modifier": "@Mock", "type": "RedisAdvancedClusterCommands<byte[], byte[]>", "declarator": "syncCommands", "var_name": "syncCommands"}, {"original_string": "RedisKeySerializer serializer = new RedisKeyPrefixSerializer(\"test:\");", "modifier": "", "type": "RedisKeySerializer", "declarator": "serializer = new RedisKeyPrefixSerializer(\"test:\")", "var_name": "serializer"}, {"original_string": "RedisKeySerializer fallbackSerializer = new RedisKeyPrefixSerializer(\"\");", "modifier": "", "type": "RedisKeySerializer", "declarator": "fallbackSerializer = new RedisKeyPrefixSerializer(\"\")", "var_name": "fallbackSerializer"}, {"original_string": "private List<RedisKey> redisKeys;", "modifier": "private", "type": "List<RedisKey>", "declarator": "redisKeys", "var_name": "redisKeys"}, {"original_string": "private FeatureSetRequest featureSetRequest;", "modifier": "private", "type": "FeatureSetRequest", "declarator": "featureSetRequest", "var_name": "featureSetRequest"}, {"original_string": "private List<EntityRow> entityRows;", "modifier": "private", "type": "List<EntityRow>", "declarator": "entityRows", "var_name": "entityRows"}, {"original_string": "private List<FeatureRow> featureRows;", "modifier": "private", "type": "List<FeatureRow>", "declarator": "featureRows", "var_name": "featureRows"}], "file": "storage/connectors/redis/src/test/java/feast/storage/connectors/redis/retriever/RedisClusterOnlineRetrieverTest.java"}, "test_case": {"identifier": "shouldReturnResponseWithValuesIfKeysPresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldReturnResponseWithValuesIfKeysPresent() {\n    byte[] serializedKey1 = serializer.serialize(redisKeys.get(0));\n    byte[] serializedKey2 = serializer.serialize(redisKeys.get(1));\n\n    KeyValue<byte[], byte[]> keyValue1 =\n        KeyValue.from(serializedKey1, Optional.of(featureRows.get(0).toByteArray()));\n    KeyValue<byte[], byte[]> keyValue2 =\n        KeyValue.from(serializedKey2, Optional.of(featureRows.get(1).toByteArray()));\n\n    List<KeyValue<byte[], byte[]>> featureRowBytes = Lists.newArrayList(keyValue1, keyValue2);\n\n    OnlineRetriever redisClusterOnlineRetriever =\n        new RedisClusterOnlineRetriever.Builder(connection, serializer)\n            .withFallbackSerializer(fallbackSerializer)\n            .build();\n    when(syncCommands.mget(serializedKey1, serializedKey2)).thenReturn(featureRowBytes);\n\n    List<Optional<FeatureRow>> expected =\n        Lists.newArrayList(\n            Optional.of(\n                FeatureRow.newBuilder()\n                    .setEventTimestamp(Timestamp.newBuilder().setSeconds(100))\n                    .setFeatureSet(\"project/featureSet\")\n                    .addAllFields(\n                        Lists.newArrayList(\n                            Field.newBuilder().setName(\"feature1\").setValue(intValue(1)).build(),\n                            Field.newBuilder().setName(\"feature2\").setValue(intValue(1)).build()))\n                    .build()),\n            Optional.of(\n                FeatureRow.newBuilder()\n                    .setEventTimestamp(Timestamp.newBuilder().setSeconds(100))\n                    .setFeatureSet(\"project/featureSet\")\n                    .addAllFields(\n                        Lists.newArrayList(\n                            Field.newBuilder().setName(\"feature1\").setValue(intValue(2)).build(),\n                            Field.newBuilder().setName(\"feature2\").setValue(intValue(2)).build()))\n                    .build()));\n\n    List<Optional<FeatureRow>> actual =\n        redisClusterOnlineRetriever.getOnlineFeatures(entityRows, featureSetRequest);\n    assertThat(actual, equalTo(expected));\n\n    // check that fallback is used only when there's something to fallback\n    verify(syncCommands, never()).mget();\n  }", "signature": "void shouldReturnResponseWithValuesIfKeysPresent()", "full_signature": "@Test public void shouldReturnResponseWithValuesIfKeysPresent()", "class_method_signature": "RedisClusterOnlineRetrieverTest.shouldReturnResponseWithValuesIfKeysPresent()", "testcase": true, "constructor": false, "invocations": ["serialize", "get", "serialize", "get", "from", "of", "toByteArray", "get", "from", "of", "toByteArray", "get", "newArrayList", "build", "withFallbackSerializer", "thenReturn", "when", "mget", "newArrayList", "of", "build", "addAllFields", "setFeatureSet", "setEventTimestamp", "newBuilder", "setSeconds", "newBuilder", "newArrayList", "build", "setValue", "setName", "newBuilder", "intValue", "build", "setValue", "setName", "newBuilder", "intValue", "of", "build", "addAllFields", "setFeatureSet", "setEventTimestamp", "newBuilder", "setSeconds", "newBuilder", "newArrayList", "build", "setValue", "setName", "newBuilder", "intValue", "build", "setValue", "setName", "newBuilder", "intValue", "getOnlineFeatures", "assertThat", "equalTo", "mget", "verify", "never"]}, "focal_class": {"identifier": "RedisClusterOnlineRetriever", "superclass": "", "interfaces": "implements OnlineRetriever", "fields": [{"original_string": "private final RedisAdvancedClusterCommands<byte[], byte[]> syncCommands;", "modifier": "private final", "type": "RedisAdvancedClusterCommands<byte[], byte[]>", "declarator": "syncCommands", "var_name": "syncCommands"}, {"original_string": "private final RedisKeySerializer serializer;", "modifier": "private final", "type": "RedisKeySerializer", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "@Nullable private final RedisKeySerializer fallbackSerializer;", "modifier": "@Nullable private final", "type": "RedisKeySerializer", "declarator": "fallbackSerializer", "var_name": "fallbackSerializer"}], "methods": [{"identifier": "RedisClusterOnlineRetriever", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "signature": " RedisClusterOnlineRetriever(Builder builder)", "full_signature": "private  RedisClusterOnlineRetriever(Builder builder)", "class_method_signature": "RedisClusterOnlineRetriever.RedisClusterOnlineRetriever(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(Map<String, String> config)", "modifiers": "public static", "return": "OnlineRetriever", "signature": "OnlineRetriever create(Map<String, String> config)", "full_signature": "public static OnlineRetriever create(Map<String, String> config)", "class_method_signature": "RedisClusterOnlineRetriever.create(Map<String, String> config)", "testcase": false, "constructor": false}, {"identifier": "getOnlineFeatures", "parameters": "(\n      List<EntityRow> entityRows, FeatureSetRequest featureSetRequest)", "modifiers": "@Override public", "return": "List<Optional<FeatureRow>>", "signature": "List<Optional<FeatureRow>> getOnlineFeatures(\n      List<EntityRow> entityRows, FeatureSetRequest featureSetRequest)", "full_signature": "@Override public List<Optional<FeatureRow>> getOnlineFeatures(\n      List<EntityRow> entityRows, FeatureSetRequest featureSetRequest)", "class_method_signature": "RedisClusterOnlineRetriever.getOnlineFeatures(\n      List<EntityRow> entityRows, FeatureSetRequest featureSetRequest)", "testcase": false, "constructor": false}, {"identifier": "buildRedisKeys", "parameters": "(List<EntityRow> entityRows, FeatureSetSpec featureSetSpec)", "modifiers": "private", "return": "List<RedisKey>", "signature": "List<RedisKey> buildRedisKeys(List<EntityRow> entityRows, FeatureSetSpec featureSetSpec)", "full_signature": "private List<RedisKey> buildRedisKeys(List<EntityRow> entityRows, FeatureSetSpec featureSetSpec)", "class_method_signature": "RedisClusterOnlineRetriever.buildRedisKeys(List<EntityRow> entityRows, FeatureSetSpec featureSetSpec)", "testcase": false, "constructor": false}, {"identifier": "makeRedisKey", "parameters": "(\n      String featureSet, List<String> featureSetEntityNames, EntityRow entityRow)", "modifiers": "private", "return": "RedisKey", "signature": "RedisKey makeRedisKey(\n      String featureSet, List<String> featureSetEntityNames, EntityRow entityRow)", "full_signature": "private RedisKey makeRedisKey(\n      String featureSet, List<String> featureSetEntityNames, EntityRow entityRow)", "class_method_signature": "RedisClusterOnlineRetriever.makeRedisKey(\n      String featureSet, List<String> featureSetEntityNames, EntityRow entityRow)", "testcase": false, "constructor": false}, {"identifier": "getFeaturesFromRedis", "parameters": "(\n      List<RedisKey> redisKeys, FeatureRowDecoder decoder)", "modifiers": "private", "return": "List<Optional<FeatureRow>>", "signature": "List<Optional<FeatureRow>> getFeaturesFromRedis(\n      List<RedisKey> redisKeys, FeatureRowDecoder decoder)", "full_signature": "private List<Optional<FeatureRow>> getFeaturesFromRedis(\n      List<RedisKey> redisKeys, FeatureRowDecoder decoder)", "class_method_signature": "RedisClusterOnlineRetriever.getFeaturesFromRedis(\n      List<RedisKey> redisKeys, FeatureRowDecoder decoder)", "testcase": false, "constructor": false}, {"identifier": "sendMultiGet", "parameters": "(List<RedisKey> keys)", "modifiers": "private", "return": "List<byte[]>", "signature": "List<byte[]> sendMultiGet(List<RedisKey> keys)", "full_signature": "private List<byte[]> sendMultiGet(List<RedisKey> keys)", "class_method_signature": "RedisClusterOnlineRetriever.sendMultiGet(List<RedisKey> keys)", "testcase": false, "constructor": false}, {"identifier": "generateFeatureSetStringRef", "parameters": "(FeatureSetSpec featureSetSpec)", "modifiers": "private static", "return": "String", "signature": "String generateFeatureSetStringRef(FeatureSetSpec featureSetSpec)", "full_signature": "private static String generateFeatureSetStringRef(FeatureSetSpec featureSetSpec)", "class_method_signature": "RedisClusterOnlineRetriever.generateFeatureSetStringRef(FeatureSetSpec featureSetSpec)", "testcase": false, "constructor": false}], "file": "storage/connectors/redis/src/main/java/feast/storage/connectors/redis/retriever/RedisClusterOnlineRetriever.java"}, "focal_method": {"identifier": "getOnlineFeatures", "parameters": "(\n      List<EntityRow> entityRows, FeatureSetRequest featureSetRequest)", "modifiers": "@Override public", "return": "List<Optional<FeatureRow>>", "body": "@Override\n  public List<Optional<FeatureRow>> getOnlineFeatures(\n      List<EntityRow> entityRows, FeatureSetRequest featureSetRequest) {\n\n    // get features for this features/featureset in featureset request\n    FeatureSetSpec featureSetSpec = featureSetRequest.getSpec();\n    List<RedisKey> redisKeys = buildRedisKeys(entityRows, featureSetSpec);\n    FeatureRowDecoder decoder =\n        new FeatureRowDecoder(generateFeatureSetStringRef(featureSetSpec), featureSetSpec);\n    List<Optional<FeatureRow>> featureRows = new ArrayList<>();\n    try {\n      featureRows = getFeaturesFromRedis(redisKeys, decoder);\n    } catch (InvalidProtocolBufferException | ExecutionException e) {\n      throw Status.INTERNAL\n          .withDescription(\"Unable to parse protobuf while retrieving feature\")\n          .withCause(e)\n          .asRuntimeException();\n    }\n    return featureRows;\n  }", "signature": "List<Optional<FeatureRow>> getOnlineFeatures(\n      List<EntityRow> entityRows, FeatureSetRequest featureSetRequest)", "full_signature": "@Override public List<Optional<FeatureRow>> getOnlineFeatures(\n      List<EntityRow> entityRows, FeatureSetRequest featureSetRequest)", "class_method_signature": "RedisClusterOnlineRetriever.getOnlineFeatures(\n      List<EntityRow> entityRows, FeatureSetRequest featureSetRequest)", "testcase": false, "constructor": false, "invocations": ["getSpec", "buildRedisKeys", "generateFeatureSetStringRef", "getFeaturesFromRedis", "asRuntimeException", "withCause", "withDescription"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}