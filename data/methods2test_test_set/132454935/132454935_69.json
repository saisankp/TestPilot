{"test_class": {"identifier": "TransactionsPoolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LogManager.getLogger(TransactionsPoolTest.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LogManager.getLogger(TransactionsPoolTest.class)", "var_name": "logger"}], "file": "elrond-core/src/test/java/network/elrond/blockchain/TransactionsPoolTest.java"}, "test_case": {"identifier": "testAddMultipleTimes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddMultipleTimes(){\n        TransactionsPool transactionsPool = new TransactionsPool();\n\n        TestCase.assertTrue(transactionsPool.addTransaction(\"aaaa\"));\n        TestCase.assertFalse(transactionsPool.addTransaction(\"aaaa\"));\n    }", "signature": "void testAddMultipleTimes()", "full_signature": "@Test public void testAddMultipleTimes()", "class_method_signature": "TransactionsPoolTest.testAddMultipleTimes()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "addTransaction", "assertFalse", "addTransaction"]}, "focal_class": {"identifier": "TransactionsPool", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LogManager.getLogger(TransactionsPool.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LogManager.getLogger(TransactionsPool.class)", "var_name": "logger"}, {"original_string": "private Object locker = new Object();", "modifier": "private", "type": "Object", "declarator": "locker = new Object()", "var_name": "locker"}, {"original_string": "protected final Map<String, Object> lastTransactions = new LRUMap<>(100000);", "modifier": "protected final", "type": "Map<String, Object>", "declarator": "lastTransactions = new LRUMap<>(100000)", "var_name": "lastTransactions"}, {"original_string": "protected final List<String> transactions = new ArrayList<>();", "modifier": "protected final", "type": "List<String>", "declarator": "transactions = new ArrayList<>()", "var_name": "transactions"}], "methods": [{"identifier": "getTransactions", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getTransactions()", "full_signature": "public List<String> getTransactions()", "class_method_signature": "TransactionsPool.getTransactions()", "testcase": false, "constructor": false}, {"identifier": "addTransaction", "parameters": "(String transactionHash)", "modifiers": "public", "return": "boolean", "signature": "boolean addTransaction(String transactionHash)", "full_signature": "public boolean addTransaction(String transactionHash)", "class_method_signature": "TransactionsPool.addTransaction(String transactionHash)", "testcase": false, "constructor": false}, {"identifier": "checkExists", "parameters": "(String transactionHash)", "modifiers": "public", "return": "boolean", "signature": "boolean checkExists(String transactionHash)", "full_signature": "public boolean checkExists(String transactionHash)", "class_method_signature": "TransactionsPool.checkExists(String transactionHash)", "testcase": false, "constructor": false}, {"identifier": "checkExistsNoLock", "parameters": "(String transactionHash)", "modifiers": "protected", "return": "boolean", "signature": "boolean checkExistsNoLock(String transactionHash)", "full_signature": "protected boolean checkExistsNoLock(String transactionHash)", "class_method_signature": "TransactionsPool.checkExistsNoLock(String transactionHash)", "testcase": false, "constructor": false}, {"identifier": "addBlock", "parameters": "(Block block)", "modifiers": "public", "return": "void", "signature": "void addBlock(Block block)", "full_signature": "public void addBlock(Block block)", "class_method_signature": "TransactionsPool.addBlock(Block block)", "testcase": false, "constructor": false}], "file": "elrond-core/src/main/java/network/elrond/blockchain/TransactionsPool.java"}, "focal_method": {"identifier": "addTransaction", "parameters": "(String transactionHash)", "modifiers": "public", "return": "boolean", "body": "public boolean addTransaction(String transactionHash) {\n        Util.check(transactionHash != null, \"transaction != null\");\n\n        synchronized (locker) {\n            if (!checkExistsNoLock(transactionHash)) {\n                transactions.add(transactionHash);\n\n                logger.trace(\"Added {}\", transactionHash);\n\n                return (true);\n            } else {\n                logger.debug(\"Transaction {} already in pool/processed!\", transactionHash);\n                return (false);\n            }\n\n        }\n    }", "signature": "boolean addTransaction(String transactionHash)", "full_signature": "public boolean addTransaction(String transactionHash)", "class_method_signature": "TransactionsPool.addTransaction(String transactionHash)", "testcase": false, "constructor": false, "invocations": ["check", "checkExistsNoLock", "add", "trace", "debug"]}, "repository": {"repo_id": 132454935, "url": "https://github.com/ElrondNetwork/elrond-node-prototype", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 16635, "license": "licensed"}}