{"test_class": {"identifier": "KeyStoreHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String KEYSTORE_SERVER_RESOURCE_NAME = \"droolsServer.keystore\";", "modifier": "private static final", "type": "String", "declarator": "KEYSTORE_SERVER_RESOURCE_NAME = \"droolsServer.keystore\"", "var_name": "KEYSTORE_SERVER_RESOURCE_NAME"}, {"original_string": "private static final String KEYSTORE_CLIENT_RESOURCE_NAME = \"droolsClient.keystore\";", "modifier": "private static final", "type": "String", "declarator": "KEYSTORE_CLIENT_RESOURCE_NAME = \"droolsClient.keystore\"", "var_name": "KEYSTORE_CLIENT_RESOURCE_NAME"}, {"original_string": "private static final String KEYSTORE_JCEKS_RESOURCE_NAME = \"droolsServer.jceks\";", "modifier": "private static final", "type": "String", "declarator": "KEYSTORE_JCEKS_RESOURCE_NAME = \"droolsServer.jceks\"", "var_name": "KEYSTORE_JCEKS_RESOURCE_NAME"}, {"original_string": "private static final String KEYSTORE_JCEKS_FILENAME = \"target/test-classes/org/drools/core/util/droolsServer.jceks\";", "modifier": "private static final", "type": "String", "declarator": "KEYSTORE_JCEKS_FILENAME = \"target/test-classes/org/drools/core/util/droolsServer.jceks\"", "var_name": "KEYSTORE_JCEKS_FILENAME"}, {"original_string": "private static final String KEYSTORE_SERVER_PASSWORD = \"serverpwd\";", "modifier": "private static final", "type": "String", "declarator": "KEYSTORE_SERVER_PASSWORD = \"serverpwd\"", "var_name": "KEYSTORE_SERVER_PASSWORD"}, {"original_string": "private static final String KEYSTORE_CLIENT_PASSWORD = \"clientpwd\";", "modifier": "private static final", "type": "String", "declarator": "KEYSTORE_CLIENT_PASSWORD = \"clientpwd\"", "var_name": "KEYSTORE_CLIENT_PASSWORD"}, {"original_string": "private static final String KEY_ALIAS = \"droolsKey\";", "modifier": "private static final", "type": "String", "declarator": "KEY_ALIAS = \"droolsKey\"", "var_name": "KEY_ALIAS"}, {"original_string": "private static final String KEY_PASSWORD = \"keypwd\";", "modifier": "private static final", "type": "String", "declarator": "KEY_PASSWORD = \"keypwd\"", "var_name": "KEY_PASSWORD"}, {"original_string": "private static final String KEY_PHRASE = \"secretkey\";", "modifier": "private static final", "type": "String", "declarator": "KEY_PHRASE = \"secretkey\"", "var_name": "KEY_PHRASE"}], "file": "drools-core/src/test/java/org/drools/core/util/KeyStoreHelperTest.java"}, "test_case": {"identifier": "testLoadPassword", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadPassword() throws CertificateException, NoSuchAlgorithmException, IOException, KeyStoreException, InvalidKeyException, InvalidKeySpecException {\n        final SecretKey storedSecretKey = storeKeyIntoKeyStoreFile(KEY_PHRASE);\n\n        // Set properties to simulate the server\n        final URL serverKeyStoreURL = getClass().getResource(KEYSTORE_JCEKS_RESOURCE_NAME);\n        System.setProperty(KeyStoreConstants.PROP_PWD_KS_URL, serverKeyStoreURL.toExternalForm());\n        System.setProperty(KeyStoreConstants.PROP_PWD_KS_PWD, KEYSTORE_SERVER_PASSWORD);\n\n        try {\n            final KeyStoreHelper serverHelper = new KeyStoreHelper();\n\n            final String passwordKey = serverHelper.getPasswordKey(KEY_ALIAS, KEY_PASSWORD.toCharArray());\n            assertEquals(new String(storedSecretKey.getEncoded()), passwordKey);\n        } catch (final RuntimeException re) {\n            re.printStackTrace();\n            fail(re.getMessage());\n        }\n    }", "signature": "void testLoadPassword()", "full_signature": "@Test public void testLoadPassword()", "class_method_signature": "KeyStoreHelperTest.testLoadPassword()", "testcase": true, "constructor": false, "invocations": ["storeKeyIntoKeyStoreFile", "getResource", "getClass", "setProperty", "toExternalForm", "setProperty", "getPasswordKey", "toCharArray", "assertEquals", "getEncoded", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "KeyStoreHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private boolean signed;", "modifier": "private", "type": "boolean", "declarator": "signed", "var_name": "signed"}, {"original_string": "private URL pvtKeyStoreURL;", "modifier": "private", "type": "URL", "declarator": "pvtKeyStoreURL", "var_name": "pvtKeyStoreURL"}, {"original_string": "private char[] pvtKeyStorePwd;", "modifier": "private", "type": "char[]", "declarator": "pvtKeyStorePwd", "var_name": "pvtKeyStorePwd"}, {"original_string": "private String pvtKeyAlias;", "modifier": "private", "type": "String", "declarator": "pvtKeyAlias", "var_name": "pvtKeyAlias"}, {"original_string": "private char[] pvtKeyPassword;", "modifier": "private", "type": "char[]", "declarator": "pvtKeyPassword", "var_name": "pvtKeyPassword"}, {"original_string": "private URL pubKeyStoreURL;", "modifier": "private", "type": "URL", "declarator": "pubKeyStoreURL", "var_name": "pubKeyStoreURL"}, {"original_string": "private char[] pubKeyStorePwd;", "modifier": "private", "type": "char[]", "declarator": "pubKeyStorePwd", "var_name": "pubKeyStorePwd"}, {"original_string": "private URL pwdKeyStoreURL;", "modifier": "private", "type": "URL", "declarator": "pwdKeyStoreURL", "var_name": "pwdKeyStoreURL"}, {"original_string": "private char[] pwdKeyStorePwd;", "modifier": "private", "type": "char[]", "declarator": "pwdKeyStorePwd", "var_name": "pwdKeyStorePwd"}, {"original_string": "private KeyStore pvtKeyStore;", "modifier": "private", "type": "KeyStore", "declarator": "pvtKeyStore", "var_name": "pvtKeyStore"}, {"original_string": "private KeyStore pubKeyStore;", "modifier": "private", "type": "KeyStore", "declarator": "pubKeyStore", "var_name": "pubKeyStore"}, {"original_string": "private KeyStore pwdKeyStore;", "modifier": "private", "type": "KeyStore", "declarator": "pwdKeyStore", "var_name": "pwdKeyStore"}], "methods": [{"identifier": "KeyStoreHelper", "parameters": "()", "modifiers": "public", "return": "", "signature": " KeyStoreHelper()", "full_signature": "public  KeyStoreHelper()", "class_method_signature": "KeyStoreHelper.KeyStoreHelper()", "testcase": false, "constructor": true}, {"identifier": "loadPrivateKeyStoreProperties", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadPrivateKeyStoreProperties()", "full_signature": "private void loadPrivateKeyStoreProperties()", "class_method_signature": "KeyStoreHelper.loadPrivateKeyStoreProperties()", "testcase": false, "constructor": false}, {"identifier": "loadPublicKeyStoreProperties", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadPublicKeyStoreProperties()", "full_signature": "private void loadPublicKeyStoreProperties()", "class_method_signature": "KeyStoreHelper.loadPublicKeyStoreProperties()", "testcase": false, "constructor": false}, {"identifier": "loadPasswordKeyStoreProperties", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadPasswordKeyStoreProperties()", "full_signature": "private void loadPasswordKeyStoreProperties()", "class_method_signature": "KeyStoreHelper.loadPasswordKeyStoreProperties()", "testcase": false, "constructor": false}, {"identifier": "initKeyStore", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initKeyStore()", "full_signature": "private void initKeyStore()", "class_method_signature": "KeyStoreHelper.initKeyStore()", "testcase": false, "constructor": false}, {"identifier": "loadKeystore", "parameters": "(String keyCertificateType, URL url, char[] password)", "modifiers": "private", "return": "KeyStore", "signature": "KeyStore loadKeystore(String keyCertificateType, URL url, char[] password)", "full_signature": "private KeyStore loadKeystore(String keyCertificateType, URL url, char[] password)", "class_method_signature": "KeyStoreHelper.loadKeystore(String keyCertificateType, URL url, char[] password)", "testcase": false, "constructor": false}, {"identifier": "signDataWithPrivateKey", "parameters": "(byte[] data)", "modifiers": "public", "return": "byte[]", "signature": "byte[] signDataWithPrivateKey(byte[] data)", "full_signature": "public byte[] signDataWithPrivateKey(byte[] data)", "class_method_signature": "KeyStoreHelper.signDataWithPrivateKey(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "checkDataWithPublicKey", "parameters": "(final String publicKeyAlias,\n                                          final byte[] data,\n                                          final byte[] signature)", "modifiers": "public", "return": "boolean", "signature": "boolean checkDataWithPublicKey(final String publicKeyAlias,\n                                          final byte[] data,\n                                          final byte[] signature)", "full_signature": "public boolean checkDataWithPublicKey(final String publicKeyAlias,\n                                          final byte[] data,\n                                          final byte[] signature)", "class_method_signature": "KeyStoreHelper.checkDataWithPublicKey(final String publicKeyAlias,\n                                          final byte[] data,\n                                          final byte[] signature)", "testcase": false, "constructor": false}, {"identifier": "getPasswordKey", "parameters": "(String pwdKeyAlias, char[] pwdKeyPassword)", "modifiers": "public", "return": "String", "signature": "String getPasswordKey(String pwdKeyAlias, char[] pwdKeyPassword)", "full_signature": "public String getPasswordKey(String pwdKeyAlias, char[] pwdKeyPassword)", "class_method_signature": "KeyStoreHelper.getPasswordKey(String pwdKeyAlias, char[] pwdKeyPassword)", "testcase": false, "constructor": false}, {"identifier": "isSigned", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSigned()", "full_signature": "public boolean isSigned()", "class_method_signature": "KeyStoreHelper.isSigned()", "testcase": false, "constructor": false}, {"identifier": "getPvtKeyStoreURL", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL getPvtKeyStoreURL()", "full_signature": "public URL getPvtKeyStoreURL()", "class_method_signature": "KeyStoreHelper.getPvtKeyStoreURL()", "testcase": false, "constructor": false}, {"identifier": "getPvtKeyStorePwd", "parameters": "()", "modifiers": "public", "return": "char[]", "signature": "char[] getPvtKeyStorePwd()", "full_signature": "public char[] getPvtKeyStorePwd()", "class_method_signature": "KeyStoreHelper.getPvtKeyStorePwd()", "testcase": false, "constructor": false}, {"identifier": "getPvtKeyAlias", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPvtKeyAlias()", "full_signature": "public String getPvtKeyAlias()", "class_method_signature": "KeyStoreHelper.getPvtKeyAlias()", "testcase": false, "constructor": false}, {"identifier": "getPvtKeyPassword", "parameters": "()", "modifiers": "public", "return": "char[]", "signature": "char[] getPvtKeyPassword()", "full_signature": "public char[] getPvtKeyPassword()", "class_method_signature": "KeyStoreHelper.getPvtKeyPassword()", "testcase": false, "constructor": false}, {"identifier": "getPubKeyStoreURL", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL getPubKeyStoreURL()", "full_signature": "public URL getPubKeyStoreURL()", "class_method_signature": "KeyStoreHelper.getPubKeyStoreURL()", "testcase": false, "constructor": false}, {"identifier": "getPubKeyStorePwd", "parameters": "()", "modifiers": "public", "return": "char[]", "signature": "char[] getPubKeyStorePwd()", "full_signature": "public char[] getPubKeyStorePwd()", "class_method_signature": "KeyStoreHelper.getPubKeyStorePwd()", "testcase": false, "constructor": false}, {"identifier": "getPvtKeyStore", "parameters": "()", "modifiers": "public", "return": "KeyStore", "signature": "KeyStore getPvtKeyStore()", "full_signature": "public KeyStore getPvtKeyStore()", "class_method_signature": "KeyStoreHelper.getPvtKeyStore()", "testcase": false, "constructor": false}, {"identifier": "getPubKeyStore", "parameters": "()", "modifiers": "public", "return": "KeyStore", "signature": "KeyStore getPubKeyStore()", "full_signature": "public KeyStore getPubKeyStore()", "class_method_signature": "KeyStoreHelper.getPubKeyStore()", "testcase": false, "constructor": false}], "file": "drools-core/src/main/java/org/drools/core/util/KeyStoreHelper.java"}, "focal_method": {"identifier": "getPasswordKey", "parameters": "(String pwdKeyAlias, char[] pwdKeyPassword)", "modifiers": "public", "return": "String", "body": "public String getPasswordKey(String pwdKeyAlias, char[] pwdKeyPassword) {\n        SecretKey passwordKey;\n        try {\n            passwordKey = (SecretKey) pwdKeyStore.getKey(pwdKeyAlias, pwdKeyPassword);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Unable to load a key from Key Store. Source \" + e.getCause());\n        }\n        return new String(passwordKey.getEncoded());\n    }", "signature": "String getPasswordKey(String pwdKeyAlias, char[] pwdKeyPassword)", "full_signature": "public String getPasswordKey(String pwdKeyAlias, char[] pwdKeyPassword)", "class_method_signature": "KeyStoreHelper.getPasswordKey(String pwdKeyAlias, char[] pwdKeyPassword)", "testcase": false, "constructor": false, "invocations": ["getKey", "getCause", "getEncoded"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}