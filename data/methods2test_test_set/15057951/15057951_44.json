{"test_class": {"identifier": "JdbcParamVersionRepositoryTest", "superclass": "extends DatabaseTest", "interfaces": "", "fields": [], "file": "smartparam-coherent-cache-jdbc/src/test/java/org/smartparam/coherence/jdbc/repository/JdbcParamVersionRepositoryTest.java"}, "test_case": {"identifier": "shouldReturnNullAsVersionOfNonexistentParam", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnNullAsVersionOfNonexistentParam() {\n        // given\n        JdbcParamVersionRepository versionRepository = get(JdbcParamVersionRepository.class);\n\n        // when\n        Long nonexistentParam = versionRepository.versionOfParam(\"someParam\");\n\n        // then\n        assertThat(nonexistentParam).isNull();\n    }", "signature": "void shouldReturnNullAsVersionOfNonexistentParam()", "full_signature": "@Test public void shouldReturnNullAsVersionOfNonexistentParam()", "class_method_signature": "JdbcParamVersionRepositoryTest.shouldReturnNullAsVersionOfNonexistentParam()", "testcase": true, "constructor": false, "invocations": ["get", "versionOfParam", "isNull", "assertThat"]}, "focal_class": {"identifier": "JdbcParamVersionRepository", "superclass": "", "interfaces": "implements ParamVersionRepository, InitializableComponent", "fields": [{"original_string": "private final ParamVersionSchemaCreator schemaCreator;", "modifier": "private final", "type": "ParamVersionSchemaCreator", "declarator": "schemaCreator", "var_name": "schemaCreator"}, {"original_string": "private final JdbcConfig configuration;", "modifier": "private final", "type": "JdbcConfig", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final SimpleQueryRunner queryRunner;", "modifier": "private final", "type": "SimpleQueryRunner", "declarator": "queryRunner", "var_name": "queryRunner"}, {"original_string": "private final TransactionRunner transactionRunner;", "modifier": "private final", "type": "TransactionRunner", "declarator": "transactionRunner", "var_name": "transactionRunner"}], "methods": [{"identifier": "JdbcParamVersionRepository", "parameters": "(ParamVersionSchemaCreator schemaCreator,\n                                      JdbcConfig configuration,\n                                      SimpleQueryRunner queryRunner,\n                                      TransactionRunner transactionRunner)", "modifiers": "public", "return": "", "signature": " JdbcParamVersionRepository(ParamVersionSchemaCreator schemaCreator,\n                                      JdbcConfig configuration,\n                                      SimpleQueryRunner queryRunner,\n                                      TransactionRunner transactionRunner)", "full_signature": "public  JdbcParamVersionRepository(ParamVersionSchemaCreator schemaCreator,\n                                      JdbcConfig configuration,\n                                      SimpleQueryRunner queryRunner,\n                                      TransactionRunner transactionRunner)", "class_method_signature": "JdbcParamVersionRepository.JdbcParamVersionRepository(ParamVersionSchemaCreator schemaCreator,\n                                      JdbcConfig configuration,\n                                      SimpleQueryRunner queryRunner,\n                                      TransactionRunner transactionRunner)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "JdbcParamVersionRepository.initialize()", "testcase": false, "constructor": false}, {"identifier": "incrementVersion", "parameters": "(final String paramName)", "modifiers": "@Override public", "return": "Long", "signature": "Long incrementVersion(final String paramName)", "full_signature": "@Override public Long incrementVersion(final String paramName)", "class_method_signature": "JdbcParamVersionRepository.incrementVersion(final String paramName)", "testcase": false, "constructor": false}, {"identifier": "hasVersionOfParam", "parameters": "(String paramName)", "modifiers": "private", "return": "boolean", "signature": "boolean hasVersionOfParam(String paramName)", "full_signature": "private boolean hasVersionOfParam(String paramName)", "class_method_signature": "JdbcParamVersionRepository.hasVersionOfParam(String paramName)", "testcase": false, "constructor": false}, {"identifier": "versionOfParam", "parameters": "(String paramName)", "modifiers": "@Override public", "return": "Long", "signature": "Long versionOfParam(String paramName)", "full_signature": "@Override public Long versionOfParam(String paramName)", "class_method_signature": "JdbcParamVersionRepository.versionOfParam(String paramName)", "testcase": false, "constructor": false}, {"identifier": "versionOfAllParams", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Long>", "signature": "Map<String, Long> versionOfAllParams()", "full_signature": "@Override public Map<String, Long> versionOfAllParams()", "class_method_signature": "JdbcParamVersionRepository.versionOfAllParams()", "testcase": false, "constructor": false}], "file": "smartparam-coherent-cache-jdbc/src/main/java/org/smartparam/coherence/jdbc/repository/JdbcParamVersionRepository.java"}, "focal_method": {"identifier": "versionOfParam", "parameters": "(String paramName)", "modifiers": "@Override public", "return": "Long", "body": "@Override\n    public Long versionOfParam(String paramName) {\n        if (!hasVersionOfParam(paramName)) {\n            return null;\n        }\n\n        SelectQuery query = QueryFactory.select(\"version\").from(configuration.entityName()).where(\"name = :name\")\n                .withArgument(\"name\", paramName);\n        return queryRunner.queryUnique(query, new LongMapper());\n    }", "signature": "Long versionOfParam(String paramName)", "full_signature": "@Override public Long versionOfParam(String paramName)", "class_method_signature": "JdbcParamVersionRepository.versionOfParam(String paramName)", "testcase": false, "constructor": false, "invocations": ["hasVersionOfParam", "withArgument", "where", "from", "select", "entityName", "queryUnique"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}