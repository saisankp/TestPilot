{"test_class": {"identifier": "HttpProtocolTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-rpc/dubbo-rpc-http/src/test/java/com/alibaba/dubbo/rpc/protocol/http/HttpProtocolTest.java"}, "test_case": {"identifier": "testHttpProtocol", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHttpProtocol() {\n        HttpServiceImpl server = new HttpServiceImpl();\n        Assert.assertFalse(server.isCalled());\n        ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();\n        Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();\n        URL url = URL.valueOf(\"http://127.0.0.1:5342/\" + HttpService.class.getName() + \"?version=1.0.0\");\n        Exporter<HttpService> exporter = protocol.export(proxyFactory.getInvoker(server, HttpService.class, url));\n        Invoker<HttpService> invoker = protocol.refer(HttpService.class, url);\n        HttpService client = proxyFactory.getProxy(invoker);\n        String result = client.sayHello(\"haha\");\n        Assert.assertTrue(server.isCalled());\n        Assert.assertEquals(\"Hello, haha\", result);\n        invoker.destroy();\n        exporter.unexport();\n    }", "signature": "void testHttpProtocol()", "full_signature": "@Test public void testHttpProtocol()", "class_method_signature": "HttpProtocolTest.testHttpProtocol()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isCalled", "getAdaptiveExtension", "getExtensionLoader", "getAdaptiveExtension", "getExtensionLoader", "valueOf", "getName", "export", "getInvoker", "refer", "getProxy", "sayHello", "assertTrue", "isCalled", "assertEquals", "destroy", "unexport"]}, "focal_class": {"identifier": "HttpProtocol", "superclass": "extends AbstractProxyProtocol", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_PORT = 80;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_PORT = 80", "var_name": "DEFAULT_PORT"}, {"original_string": "private final Map<String, HttpServer> serverMap = new ConcurrentHashMap<String, HttpServer>();", "modifier": "private final", "type": "Map<String, HttpServer>", "declarator": "serverMap = new ConcurrentHashMap<String, HttpServer>()", "var_name": "serverMap"}, {"original_string": "private final Map<String, HttpInvokerServiceExporter> skeletonMap = new ConcurrentHashMap<String, HttpInvokerServiceExporter>();", "modifier": "private final", "type": "Map<String, HttpInvokerServiceExporter>", "declarator": "skeletonMap = new ConcurrentHashMap<String, HttpInvokerServiceExporter>()", "var_name": "skeletonMap"}, {"original_string": "private HttpBinder httpBinder;", "modifier": "private", "type": "HttpBinder", "declarator": "httpBinder", "var_name": "httpBinder"}], "methods": [{"identifier": "HttpProtocol", "parameters": "()", "modifiers": "public", "return": "", "signature": " HttpProtocol()", "full_signature": "public  HttpProtocol()", "class_method_signature": "HttpProtocol.HttpProtocol()", "testcase": false, "constructor": true}, {"identifier": "setHttpBinder", "parameters": "(HttpBinder httpBinder)", "modifiers": "public", "return": "void", "signature": "void setHttpBinder(HttpBinder httpBinder)", "full_signature": "public void setHttpBinder(HttpBinder httpBinder)", "class_method_signature": "HttpProtocol.setHttpBinder(HttpBinder httpBinder)", "testcase": false, "constructor": false}, {"identifier": "getDefaultPort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDefaultPort()", "full_signature": "@Override public int getDefaultPort()", "class_method_signature": "HttpProtocol.getDefaultPort()", "testcase": false, "constructor": false}, {"identifier": "doExport", "parameters": "(final T impl, Class<T> type, URL url)", "modifiers": "@Override protected", "return": "Runnable", "signature": "Runnable doExport(final T impl, Class<T> type, URL url)", "full_signature": "@Override protected Runnable doExport(final T impl, Class<T> type, URL url)", "class_method_signature": "HttpProtocol.doExport(final T impl, Class<T> type, URL url)", "testcase": false, "constructor": false}, {"identifier": "createExporter", "parameters": "(T impl, Class<?> type)", "modifiers": "private", "return": "HttpInvokerServiceExporter", "signature": "HttpInvokerServiceExporter createExporter(T impl, Class<?> type)", "full_signature": "private HttpInvokerServiceExporter createExporter(T impl, Class<?> type)", "class_method_signature": "HttpProtocol.createExporter(T impl, Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "doRefer", "parameters": "(final Class<T> serviceType, final URL url)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") protected", "return": "T", "signature": "T doRefer(final Class<T> serviceType, final URL url)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") protected T doRefer(final Class<T> serviceType, final URL url)", "class_method_signature": "HttpProtocol.doRefer(final Class<T> serviceType, final URL url)", "testcase": false, "constructor": false}, {"identifier": "getErrorCode", "parameters": "(Throwable e)", "modifiers": "@Override protected", "return": "int", "signature": "int getErrorCode(Throwable e)", "full_signature": "@Override protected int getErrorCode(Throwable e)", "class_method_signature": "HttpProtocol.getErrorCode(Throwable e)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-http/src/main/java/com/alibaba/dubbo/rpc/protocol/http/HttpProtocol.java"}, "focal_method": {"identifier": "HttpProtocol", "parameters": "()", "modifiers": "public", "return": "", "body": "public HttpProtocol() {\n        super(RemoteAccessException.class);\n    }", "signature": " HttpProtocol()", "full_signature": "public  HttpProtocol()", "class_method_signature": "HttpProtocol.HttpProtocol()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}