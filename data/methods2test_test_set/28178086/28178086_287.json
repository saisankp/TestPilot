{"test_class": {"identifier": "MatrixTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/maths/matrices/MatrixTest.java"}, "test_case": {"identifier": "testDiagonal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDiagonal() {\n        Matrix D = Matrix.square(20);\n        D.diagonal().randomize();\n        assertTrue(D.isDiagonal());\n        assertTrue(D.isDiagonal(.001));\n\n        D.set(18, 19, .001);\n        assertTrue(!D.isDiagonal());\n        assertTrue(D.isDiagonal(.001));\n        assertTrue(!D.isDiagonal(.000999));\n    }", "signature": "void testDiagonal()", "full_signature": "@Test public void testDiagonal()", "class_method_signature": "MatrixTest.testDiagonal()", "testcase": true, "constructor": false, "invocations": ["square", "randomize", "diagonal", "assertTrue", "isDiagonal", "assertTrue", "isDiagonal", "set", "assertTrue", "isDiagonal", "assertTrue", "isDiagonal", "assertTrue", "isDiagonal"]}, "focal_class": {"identifier": "Matrix", "superclass": "", "interfaces": "implements Cloneable", "fields": [{"original_string": "double[] data_;", "modifier": "", "type": "double[]", "declarator": "data_", "var_name": "data_"}, {"original_string": "int nrows_, ncols_;", "modifier": "", "type": "int", "declarator": "nrows_", "var_name": "nrows_"}, {"original_string": "private static final IRandomNumberGenerator RNG = JdkRNG.newRandom(0);", "modifier": "private static final", "type": "IRandomNumberGenerator", "declarator": "RNG = JdkRNG.newRandom(0)", "var_name": "RNG"}], "methods": [{"identifier": "diagonal", "parameters": "(final double[] d)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix diagonal(final double[] d)", "full_signature": "public static Matrix diagonal(final double[] d)", "class_method_signature": "Matrix.diagonal(final double[] d)", "testcase": false, "constructor": false}, {"identifier": "diagonal", "parameters": "(final IReadDataBlock d)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix diagonal(final IReadDataBlock d)", "full_signature": "public static Matrix diagonal(final IReadDataBlock d)", "class_method_signature": "Matrix.diagonal(final IReadDataBlock d)", "testcase": false, "constructor": false}, {"identifier": "diff", "parameters": "(int n, int lag, int d)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix diff(int n, int lag, int d)", "full_signature": "public static Matrix diff(int n, int lag, int d)", "class_method_signature": "Matrix.diff(int n, int lag, int d)", "testcase": false, "constructor": false}, {"identifier": "diff", "parameters": "(int n, Polynomial D)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix diff(int n, Polynomial D)", "full_signature": "public static Matrix diff(int n, Polynomial D)", "class_method_signature": "Matrix.diff(int n, Polynomial D)", "testcase": false, "constructor": false}, {"identifier": "identity", "parameters": "(final int n)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix identity(final int n)", "full_signature": "public static Matrix identity(final int n)", "class_method_signature": "Matrix.identity(final int n)", "testcase": false, "constructor": false}, {"identifier": "square", "parameters": "(final int n)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix square(final int n)", "full_signature": "public static Matrix square(final int n)", "class_method_signature": "Matrix.square(final int n)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(SubMatrix m, boolean[] rsel, boolean[] csel)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix select(SubMatrix m, boolean[] rsel, boolean[] csel)", "full_signature": "public static Matrix select(SubMatrix m, boolean[] rsel, boolean[] csel)", "class_method_signature": "Matrix.select(SubMatrix m, boolean[] rsel, boolean[] csel)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(SubMatrix m, int[] rsel, int[] csel)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix select(SubMatrix m, int[] rsel, int[] csel)", "full_signature": "public static Matrix select(SubMatrix m, int[] rsel, int[] csel)", "class_method_signature": "Matrix.select(SubMatrix m, int[] rsel, int[] csel)", "testcase": false, "constructor": false}, {"identifier": "selectRows", "parameters": "(SubMatrix m, boolean[] rsel)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix selectRows(SubMatrix m, boolean[] rsel)", "full_signature": "public static Matrix selectRows(SubMatrix m, boolean[] rsel)", "class_method_signature": "Matrix.selectRows(SubMatrix m, boolean[] rsel)", "testcase": false, "constructor": false}, {"identifier": "selectRows", "parameters": "(SubMatrix m, int[] rsel)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix selectRows(SubMatrix m, int[] rsel)", "full_signature": "public static Matrix selectRows(SubMatrix m, int[] rsel)", "class_method_signature": "Matrix.selectRows(SubMatrix m, int[] rsel)", "testcase": false, "constructor": false}, {"identifier": "selectColumns", "parameters": "(SubMatrix m, boolean[] csel)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix selectColumns(SubMatrix m, boolean[] csel)", "full_signature": "public static Matrix selectColumns(SubMatrix m, boolean[] csel)", "class_method_signature": "Matrix.selectColumns(SubMatrix m, boolean[] csel)", "testcase": false, "constructor": false}, {"identifier": "selectColumns", "parameters": "(SubMatrix m, int[] csel)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix selectColumns(SubMatrix m, int[] csel)", "full_signature": "public static Matrix selectColumns(SubMatrix m, int[] csel)", "class_method_signature": "Matrix.selectColumns(SubMatrix m, int[] csel)", "testcase": false, "constructor": false}, {"identifier": "Matrix", "parameters": "(final double[] data, final int nrows, final int ncols)", "modifiers": "public", "return": "", "signature": " Matrix(final double[] data, final int nrows, final int ncols)", "full_signature": "public  Matrix(final double[] data, final int nrows, final int ncols)", "class_method_signature": "Matrix.Matrix(final double[] data, final int nrows, final int ncols)", "testcase": false, "constructor": true}, {"identifier": "Matrix", "parameters": "(final int nrows, final int ncols)", "modifiers": "public", "return": "", "signature": " Matrix(final int nrows, final int ncols)", "full_signature": "public  Matrix(final int nrows, final int ncols)", "class_method_signature": "Matrix.Matrix(final int nrows, final int ncols)", "testcase": false, "constructor": true}, {"identifier": "Matrix", "parameters": "(final SubMatrix sm)", "modifiers": "public", "return": "", "signature": " Matrix(final SubMatrix sm)", "full_signature": "public  Matrix(final SubMatrix sm)", "class_method_signature": "Matrix.Matrix(final SubMatrix sm)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(final double r)", "modifiers": "public", "return": "void", "signature": "void add(final double r)", "full_signature": "public void add(final double r)", "class_method_signature": "Matrix.add(final double r)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final int row, final int col, final double val)", "modifiers": "public", "return": "void", "signature": "void add(final int row, final int col, final double val)", "full_signature": "public void add(final int row, final int col, final double val)", "class_method_signature": "Matrix.add(final int row, final int col, final double val)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final Matrix M)", "modifiers": "public", "return": "void", "signature": "void add(final Matrix M)", "full_signature": "public void add(final Matrix M)", "class_method_signature": "Matrix.add(final Matrix M)", "testcase": false, "constructor": false}, {"identifier": "chs", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void chs()", "full_signature": "public void chs()", "class_method_signature": "Matrix.chs()", "testcase": false, "constructor": false}, {"identifier": "clean", "parameters": "(double epsilon)", "modifiers": "public", "return": "void", "signature": "void clean(double epsilon)", "full_signature": "public void clean(double epsilon)", "class_method_signature": "Matrix.clean(double epsilon)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "Matrix.clear()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Matrix", "signature": "Matrix clone()", "full_signature": "@Override public Matrix clone()", "class_method_signature": "Matrix.clone()", "testcase": false, "constructor": false}, {"identifier": "column", "parameters": "(final int col)", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock column(final int col)", "full_signature": "public DataBlock column(final int col)", "class_method_signature": "Matrix.column(final int col)", "testcase": false, "constructor": false}, {"identifier": "columnList", "parameters": "()", "modifiers": "public", "return": "List<DataBlock>", "signature": "List<DataBlock> columnList()", "full_signature": "public List<DataBlock> columnList()", "class_method_signature": "Matrix.columnList()", "testcase": false, "constructor": false}, {"identifier": "columns", "parameters": "()", "modifiers": "public", "return": "DataBlockIterator", "signature": "DataBlockIterator columns()", "full_signature": "public DataBlockIterator columns()", "class_method_signature": "Matrix.columns()", "testcase": false, "constructor": false}, {"identifier": "copyTo", "parameters": "(final double[] buffer, final int start)", "modifiers": "public", "return": "void", "signature": "void copyTo(final double[] buffer, final int start)", "full_signature": "public void copyTo(final double[] buffer, final int start)", "class_method_signature": "Matrix.copyTo(final double[] buffer, final int start)", "testcase": false, "constructor": false}, {"identifier": "diagonal", "parameters": "()", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock diagonal()", "full_signature": "public DataBlock diagonal()", "class_method_signature": "Matrix.diagonal()", "testcase": false, "constructor": false}, {"identifier": "subDiagonal", "parameters": "(int pos)", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock subDiagonal(int pos)", "full_signature": "public DataBlock subDiagonal(int pos)", "class_method_signature": "Matrix.subDiagonal(int pos)", "testcase": false, "constructor": false}, {"identifier": "skewDiagonal", "parameters": "(int pos)", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock skewDiagonal(int pos)", "full_signature": "public DataBlock skewDiagonal(int pos)", "class_method_signature": "Matrix.skewDiagonal(int pos)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final int row, final int col)", "modifiers": "public", "return": "double", "signature": "double get(final int row, final int col)", "full_signature": "public double get(final int row, final int col)", "class_method_signature": "Matrix.get(final int row, final int col)", "testcase": false, "constructor": false}, {"identifier": "getColumnsCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getColumnsCount()", "full_signature": "public int getColumnsCount()", "class_method_signature": "Matrix.getColumnsCount()", "testcase": false, "constructor": false}, {"identifier": "getRowsCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRowsCount()", "full_signature": "public int getRowsCount()", "class_method_signature": "Matrix.getRowsCount()", "testcase": false, "constructor": false}, {"identifier": "internalStorage", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] internalStorage()", "full_signature": "public double[] internalStorage()", "class_method_signature": "Matrix.internalStorage()", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "(double eps)", "modifiers": "public", "return": "boolean", "signature": "boolean isZero(double eps)", "full_signature": "public boolean isZero(double eps)", "class_method_signature": "Matrix.isZero(double eps)", "testcase": false, "constructor": false}, {"identifier": "isDiagonal", "parameters": "(double eps)", "modifiers": "public", "return": "boolean", "signature": "boolean isDiagonal(double eps)", "full_signature": "public boolean isDiagonal(double eps)", "class_method_signature": "Matrix.isDiagonal(double eps)", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isZero()", "full_signature": "public boolean isZero()", "class_method_signature": "Matrix.isZero()", "testcase": false, "constructor": false}, {"identifier": "isDiagonal", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDiagonal()", "full_signature": "public boolean isDiagonal()", "class_method_signature": "Matrix.isDiagonal()", "testcase": false, "constructor": false}, {"identifier": "isSquare", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSquare()", "full_signature": "public boolean isSquare()", "class_method_signature": "Matrix.isSquare()", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(final double r)", "modifiers": "public", "return": "Matrix", "signature": "Matrix minus(final double r)", "full_signature": "public Matrix minus(final double r)", "class_method_signature": "Matrix.minus(final double r)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(final Matrix Y)", "modifiers": "public", "return": "Matrix", "signature": "Matrix minus(final Matrix Y)", "full_signature": "public Matrix minus(final Matrix Y)", "class_method_signature": "Matrix.minus(final Matrix Y)", "testcase": false, "constructor": false}, {"identifier": "mul", "parameters": "(final double r)", "modifiers": "public", "return": "void", "signature": "void mul(final double r)", "full_signature": "public void mul(final double r)", "class_method_signature": "Matrix.mul(final double r)", "testcase": false, "constructor": false}, {"identifier": "mul", "parameters": "(final int row, final int col, final double val)", "modifiers": "public", "return": "void", "signature": "void mul(final int row, final int col, final double val)", "full_signature": "public void mul(final int row, final int col, final double val)", "class_method_signature": "Matrix.mul(final int row, final int col, final double val)", "testcase": false, "constructor": false}, {"identifier": "nrm2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double nrm2()", "full_signature": "public double nrm2()", "class_method_signature": "Matrix.nrm2()", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(final double r)", "modifiers": "public", "return": "Matrix", "signature": "Matrix plus(final double r)", "full_signature": "public Matrix plus(final double r)", "class_method_signature": "Matrix.plus(final double r)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(final Matrix Y)", "modifiers": "public", "return": "Matrix", "signature": "Matrix plus(final Matrix Y)", "full_signature": "public Matrix plus(final Matrix Y)", "class_method_signature": "Matrix.plus(final Matrix Y)", "testcase": false, "constructor": false}, {"identifier": "randomize", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void randomize()", "full_signature": "public void randomize()", "class_method_signature": "Matrix.randomize()", "testcase": false, "constructor": false}, {"identifier": "randomize", "parameters": "(int seed)", "modifiers": "public", "return": "void", "signature": "void randomize(int seed)", "full_signature": "public void randomize(int seed)", "class_method_signature": "Matrix.randomize(int seed)", "testcase": false, "constructor": false}, {"identifier": "row", "parameters": "(final int row)", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock row(final int row)", "full_signature": "public DataBlock row(final int row)", "class_method_signature": "Matrix.row(final int row)", "testcase": false, "constructor": false}, {"identifier": "rowList", "parameters": "()", "modifiers": "public", "return": "List<DataBlock>", "signature": "List<DataBlock> rowList()", "full_signature": "public List<DataBlock> rowList()", "class_method_signature": "Matrix.rowList()", "testcase": false, "constructor": false}, {"identifier": "rows", "parameters": "()", "modifiers": "public", "return": "DataBlockIterator", "signature": "DataBlockIterator rows()", "full_signature": "public DataBlockIterator rows()", "class_method_signature": "Matrix.rows()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void set(double value)", "full_signature": "public void set(double value)", "class_method_signature": "Matrix.set(double value)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(final int row, final int col, final double value)", "modifiers": "public", "return": "void", "signature": "void set(final int row, final int col, final double value)", "full_signature": "public void set(final int row, final int col, final double value)", "class_method_signature": "Matrix.set(final int row, final int col, final double value)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(MatrixFunction fn)", "modifiers": "public", "return": "void", "signature": "void set(MatrixFunction fn)", "full_signature": "public void set(MatrixFunction fn)", "class_method_signature": "Matrix.set(MatrixFunction fn)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(MatrixRelativeFunction fn)", "modifiers": "public", "return": "void", "signature": "void set(MatrixRelativeFunction fn)", "full_signature": "public void set(MatrixRelativeFunction fn)", "class_method_signature": "Matrix.set(MatrixRelativeFunction fn)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(MatrixFunction fn)", "modifiers": "public", "return": "void", "signature": "void add(MatrixFunction fn)", "full_signature": "public void add(MatrixFunction fn)", "class_method_signature": "Matrix.add(MatrixFunction fn)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(MatrixRelativeFunction fn)", "modifiers": "public", "return": "void", "signature": "void add(MatrixRelativeFunction fn)", "full_signature": "public void add(MatrixRelativeFunction fn)", "class_method_signature": "Matrix.add(MatrixRelativeFunction fn)", "testcase": false, "constructor": false}, {"identifier": "ssq", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double ssq()", "full_signature": "public double ssq()", "class_method_signature": "Matrix.ssq()", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "(final double r)", "modifiers": "public", "return": "void", "signature": "void sub(final double r)", "full_signature": "public void sub(final double r)", "class_method_signature": "Matrix.sub(final double r)", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "(final Matrix M)", "modifiers": "public", "return": "void", "signature": "void sub(final Matrix M)", "full_signature": "public void sub(final Matrix M)", "class_method_signature": "Matrix.sub(final Matrix M)", "testcase": false, "constructor": false}, {"identifier": "all", "parameters": "()", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix all()", "full_signature": "public SubMatrix all()", "class_method_signature": "Matrix.all()", "testcase": false, "constructor": false}, {"identifier": "subMatrix", "parameters": "()", "modifiers": "@Deprecated public", "return": "SubMatrix", "signature": "SubMatrix subMatrix()", "full_signature": "@Deprecated public SubMatrix subMatrix()", "class_method_signature": "Matrix.subMatrix()", "testcase": false, "constructor": false}, {"identifier": "subMatrix", "parameters": "(final int r0, final int r1, final int c0,\n            final int c1)", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix subMatrix(final int r0, final int r1, final int c0,\n            final int c1)", "full_signature": "public SubMatrix subMatrix(final int r0, final int r1, final int c0,\n            final int c1)", "class_method_signature": "Matrix.subMatrix(final int r0, final int r1, final int c0,\n            final int c1)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double sum()", "full_signature": "public double sum()", "class_method_signature": "Matrix.sum()", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(final double r)", "modifiers": "public", "return": "Matrix", "signature": "Matrix times(final double r)", "full_signature": "public Matrix times(final double r)", "class_method_signature": "Matrix.times(final double r)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(final Matrix Y)", "modifiers": "public", "return": "Matrix", "signature": "Matrix times(final Matrix Y)", "full_signature": "public Matrix times(final Matrix Y)", "class_method_signature": "Matrix.times(final Matrix Y)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(Matrix m)", "modifiers": "public", "return": "double", "signature": "double dot(Matrix m)", "full_signature": "public double dot(Matrix m)", "class_method_signature": "Matrix.dot(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "rsolve", "parameters": "(SubMatrix S, SubMatrix B)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix rsolve(SubMatrix S, SubMatrix B)", "full_signature": "public static Matrix rsolve(SubMatrix S, SubMatrix B)", "class_method_signature": "Matrix.rsolve(SubMatrix S, SubMatrix B)", "testcase": false, "constructor": false}, {"identifier": "lsolve", "parameters": "(SubMatrix S, SubMatrix B)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix lsolve(SubMatrix S, SubMatrix B)", "full_signature": "public static Matrix lsolve(SubMatrix S, SubMatrix B)", "class_method_signature": "Matrix.lsolve(SubMatrix S, SubMatrix B)", "testcase": false, "constructor": false}, {"identifier": "toLower", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void toLower()", "full_signature": "public void toLower()", "class_method_signature": "Matrix.toLower()", "testcase": false, "constructor": false}, {"identifier": "toUpper", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void toUpper()", "full_signature": "public void toUpper()", "class_method_signature": "Matrix.toUpper()", "testcase": false, "constructor": false}, {"identifier": "transpose", "parameters": "()", "modifiers": "public", "return": "Matrix", "signature": "Matrix transpose()", "full_signature": "public Matrix transpose()", "class_method_signature": "Matrix.transpose()", "testcase": false, "constructor": false}, {"identifier": "addAY", "parameters": "(double a, Matrix Y)", "modifiers": "public", "return": "void", "signature": "void addAY(double a, Matrix Y)", "full_signature": "public void addAY(double a, Matrix Y)", "class_method_signature": "Matrix.addAY(double a, Matrix Y)", "testcase": false, "constructor": false}, {"identifier": "addXaXt", "parameters": "(double a, DataBlock x)", "modifiers": "public", "return": "void", "signature": "void addXaXt(double a, DataBlock x)", "full_signature": "public void addXaXt(double a, DataBlock x)", "class_method_signature": "Matrix.addXaXt(double a, DataBlock x)", "testcase": false, "constructor": false}, {"identifier": "addXaYt", "parameters": "(double a, DataBlock x, DataBlock y)", "modifiers": "public", "return": "void", "signature": "void addXaYt(double a, DataBlock x, DataBlock y)", "full_signature": "public void addXaYt(double a, DataBlock x, DataBlock y)", "class_method_signature": "Matrix.addXaYt(double a, DataBlock x, DataBlock y)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "Matrix.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Matrix.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(String fmt)", "modifiers": "public", "return": "String", "signature": "String toString(String fmt)", "full_signature": "public String toString(String fmt)", "class_method_signature": "Matrix.toString(String fmt)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Matrix.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Matrix other)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Matrix other)", "full_signature": "public boolean equals(Matrix other)", "class_method_signature": "Matrix.equals(Matrix other)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Matrix other, double eps)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Matrix other, double eps)", "full_signature": "public boolean equals(Matrix other, double eps)", "class_method_signature": "Matrix.equals(Matrix other, double eps)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Matrix.hashCode()", "testcase": false, "constructor": false}, {"identifier": "rank", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int rank()", "full_signature": "public int rank()", "class_method_signature": "Matrix.rank()", "testcase": false, "constructor": false}, {"identifier": "permuteColumns", "parameters": "(final int i, final int j)", "modifiers": "public", "return": "void", "signature": "void permuteColumns(final int i, final int j)", "full_signature": "public void permuteColumns(final int i, final int j)", "class_method_signature": "Matrix.permuteColumns(final int i, final int j)", "testcase": false, "constructor": false}, {"identifier": "permuteRows", "parameters": "(final int i, final int j)", "modifiers": "public", "return": "void", "signature": "void permuteRows(final int i, final int j)", "full_signature": "public void permuteRows(final int i, final int j)", "class_method_signature": "Matrix.permuteRows(final int i, final int j)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Matrix C)", "modifiers": "public", "return": "void", "signature": "void copy(Matrix C)", "full_signature": "public void copy(Matrix C)", "class_method_signature": "Matrix.copy(Matrix C)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(Matrix m)", "modifiers": "public", "return": "double", "signature": "double distance(Matrix m)", "full_signature": "public double distance(Matrix m)", "class_method_signature": "Matrix.distance(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "smooth", "parameters": "(double eps)", "modifiers": "public", "return": "void", "signature": "void smooth(double eps)", "full_signature": "public void smooth(double eps)", "class_method_signature": "Matrix.smooth(double eps)", "testcase": false, "constructor": false}, {"identifier": "topLeft", "parameters": "()", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix topLeft()", "full_signature": "public SubMatrix topLeft()", "class_method_signature": "Matrix.topLeft()", "testcase": false, "constructor": false}, {"identifier": "topLeft", "parameters": "(int nr, int nc)", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix topLeft(int nr, int nc)", "full_signature": "public SubMatrix topLeft(int nr, int nc)", "class_method_signature": "Matrix.topLeft(int nr, int nc)", "testcase": false, "constructor": false}, {"identifier": "bottomRight", "parameters": "()", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix bottomRight()", "full_signature": "public SubMatrix bottomRight()", "class_method_signature": "Matrix.bottomRight()", "testcase": false, "constructor": false}, {"identifier": "bottomRight", "parameters": "(int nr, int nc)", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix bottomRight(int nr, int nc)", "full_signature": "public SubMatrix bottomRight(int nr, int nc)", "class_method_signature": "Matrix.bottomRight(int nr, int nc)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/maths/matrices/Matrix.java"}, "focal_method": {"identifier": "diagonal", "parameters": "(final double[] d)", "modifiers": "public static", "return": "Matrix", "body": "public static Matrix diagonal(final double[] d) {\n        Matrix M = new Matrix(d.length, d.length);\n        for (int i = 0, j = 0; i < d.length; ++i, j += d.length + 1) {\n            M.data_[j] = d[i];\n        }\n        return M;\n    }", "signature": "Matrix diagonal(final double[] d)", "full_signature": "public static Matrix diagonal(final double[] d)", "class_method_signature": "Matrix.diagonal(final double[] d)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}