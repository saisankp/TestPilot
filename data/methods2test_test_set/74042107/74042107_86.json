{"test_class": {"identifier": "PhysicsSimulatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProductionSiteSimulation site;", "modifier": "private", "type": "ProductionSiteSimulation", "declarator": "site", "var_name": "site"}, {"original_string": "private PhysicsSimulator sim;", "modifier": "private", "type": "PhysicsSimulator", "declarator": "sim", "var_name": "sim"}], "file": "src/osip-simulation-controller/src/test/java/edu/kit/pse/osip/simulation/controller/PhysicsSimulatorTest.java"}, "test_case": {"identifier": "testSetInputTemperature", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetInputTemperature() {\n        for (TankSelector selector: TankSelector.valuesWithoutMix()) {\n            sim.setInputTemperature(selector, SimulationConstants.MIN_TEMPERATURE);\n            assertEquals(SimulationConstants.MIN_TEMPERATURE, site.getInputTemperature(selector), 0.001);\n        }\n    }", "signature": "void testSetInputTemperature()", "full_signature": "@Test public void testSetInputTemperature()", "class_method_signature": "PhysicsSimulatorTest.testSetInputTemperature()", "testcase": true, "constructor": false, "invocations": ["valuesWithoutMix", "setInputTemperature", "assertEquals", "getInputTemperature"]}, "focal_class": {"identifier": "PhysicsSimulator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProductionSiteSimulation productionSite;", "modifier": "private", "type": "ProductionSiteSimulation", "declarator": "productionSite", "var_name": "productionSite"}], "methods": [{"identifier": "PhysicsSimulator", "parameters": "(ProductionSiteSimulation productionSite)", "modifiers": "public", "return": "", "signature": " PhysicsSimulator(ProductionSiteSimulation productionSite)", "full_signature": "public  PhysicsSimulator(ProductionSiteSimulation productionSite)", "class_method_signature": "PhysicsSimulator.PhysicsSimulator(ProductionSiteSimulation productionSite)", "testcase": false, "constructor": true}, {"identifier": "tick", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void tick()", "full_signature": "public void tick()", "class_method_signature": "PhysicsSimulator.tick()", "testcase": false, "constructor": false}, {"identifier": "simulateTank", "parameters": "(TankSimulation tank)", "modifiers": "private", "return": "Liquid", "signature": "Liquid simulateTank(TankSimulation tank)", "full_signature": "private Liquid simulateTank(TankSimulation tank)", "class_method_signature": "PhysicsSimulator.simulateTank(TankSimulation tank)", "testcase": false, "constructor": false}, {"identifier": "setInputTemperature", "parameters": "(TankSelector tank, float temperature)", "modifiers": "public", "return": "void", "signature": "void setInputTemperature(TankSelector tank, float temperature)", "full_signature": "public void setInputTemperature(TankSelector tank, float temperature)", "class_method_signature": "PhysicsSimulator.setInputTemperature(TankSelector tank, float temperature)", "testcase": false, "constructor": false}], "file": "src/osip-simulation-controller/src/main/java/edu/kit/pse/osip/simulation/controller/PhysicsSimulator.java"}, "focal_method": {"identifier": "setInputTemperature", "parameters": "(TankSelector tank, float temperature)", "modifiers": "public", "return": "void", "body": "public void setInputTemperature(TankSelector tank, float temperature) {\n        productionSite.setInputTemperature(tank, temperature);\n    }", "signature": "void setInputTemperature(TankSelector tank, float temperature)", "full_signature": "public void setInputTemperature(TankSelector tank, float temperature)", "class_method_signature": "PhysicsSimulator.setInputTemperature(TankSelector tank, float temperature)", "testcase": false, "constructor": false, "invocations": ["setInputTemperature"]}, "repository": {"repo_id": 74042107, "url": "https://github.com/ByteHamster/PSE", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 18396, "license": "licensed"}}