{"test_class": {"identifier": "ExpressionEvaluatorFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ClassLoader classLoader = ExpressionEvaluatorFactoryTest.class.getClassLoader();", "modifier": "", "type": "ClassLoader", "declarator": "classLoader = ExpressionEvaluatorFactoryTest.class.getClassLoader()", "var_name": "classLoader"}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/ExpressionEvaluatorFactoryTest.java"}, "test_case": {"identifier": "isAnMVELExpression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isAnMVELExpression() {\n        ExpressionEvaluatorFactory ruleEvaluatorFactory = ExpressionEvaluatorFactory.create(classLoader, ScenarioSimulationModel.Type.RULE);\n        assertFalse(ruleEvaluatorFactory.isAnMVELExpression(\"10\"));\n        assertTrue(ruleEvaluatorFactory.isAnMVELExpression(MVEL_ESCAPE_SYMBOL + \"10\"));\n        assertTrue(ruleEvaluatorFactory.isAnMVELExpression(\"     \" + MVEL_ESCAPE_SYMBOL + \" 10\"));\n        assertTrue(ruleEvaluatorFactory.isAnMVELExpression(new TextNode(MVEL_ESCAPE_SYMBOL + \" 10\").textValue()));\n        assertTrue(ruleEvaluatorFactory.isAnMVELExpression(new TextNode(\"     \" + MVEL_ESCAPE_SYMBOL + \" 10\").textValue()));\n        assertFalse(ruleEvaluatorFactory.isAnMVELExpression(new TextNode(\"10\").textValue()));\n    }", "signature": "void isAnMVELExpression()", "full_signature": "@Test public void isAnMVELExpression()", "class_method_signature": "ExpressionEvaluatorFactoryTest.isAnMVELExpression()", "testcase": true, "constructor": false, "invocations": ["create", "assertFalse", "isAnMVELExpression", "assertTrue", "isAnMVELExpression", "assertTrue", "isAnMVELExpression", "assertTrue", "isAnMVELExpression", "textValue", "assertTrue", "isAnMVELExpression", "textValue", "assertFalse", "isAnMVELExpression", "textValue"]}, "focal_class": {"identifier": "ExpressionEvaluatorFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ClassLoader classLoader;", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}, {"original_string": "private final Type type;", "modifier": "private final", "type": "Type", "declarator": "type", "var_name": "type"}, {"original_string": "private BaseExpressionEvaluator baseExpressionEvaluator;", "modifier": "private", "type": "BaseExpressionEvaluator", "declarator": "baseExpressionEvaluator", "var_name": "baseExpressionEvaluator"}, {"original_string": "private DMNFeelExpressionEvaluator dmnFeelExpressionEvaluator;", "modifier": "private", "type": "DMNFeelExpressionEvaluator", "declarator": "dmnFeelExpressionEvaluator", "var_name": "dmnFeelExpressionEvaluator"}, {"original_string": "private MVELExpressionEvaluator mvelExpressionEvaluator;", "modifier": "private", "type": "MVELExpressionEvaluator", "declarator": "mvelExpressionEvaluator", "var_name": "mvelExpressionEvaluator"}], "methods": [{"identifier": "create", "parameters": "(ClassLoader classLoader, Type type)", "modifiers": "public static", "return": "ExpressionEvaluatorFactory", "signature": "ExpressionEvaluatorFactory create(ClassLoader classLoader, Type type)", "full_signature": "public static ExpressionEvaluatorFactory create(ClassLoader classLoader, Type type)", "class_method_signature": "ExpressionEvaluatorFactory.create(ClassLoader classLoader, Type type)", "testcase": false, "constructor": false}, {"identifier": "ExpressionEvaluatorFactory", "parameters": "(ClassLoader classLoader, Type type)", "modifiers": "private", "return": "", "signature": " ExpressionEvaluatorFactory(ClassLoader classLoader, Type type)", "full_signature": "private  ExpressionEvaluatorFactory(ClassLoader classLoader, Type type)", "class_method_signature": "ExpressionEvaluatorFactory.ExpressionEvaluatorFactory(ClassLoader classLoader, Type type)", "testcase": false, "constructor": true}, {"identifier": "getOrCreate", "parameters": "(FactMappingValue factMappingValue)", "modifiers": "public", "return": "ExpressionEvaluator", "signature": "ExpressionEvaluator getOrCreate(FactMappingValue factMappingValue)", "full_signature": "public ExpressionEvaluator getOrCreate(FactMappingValue factMappingValue)", "class_method_signature": "ExpressionEvaluatorFactory.getOrCreate(FactMappingValue factMappingValue)", "testcase": false, "constructor": false}, {"identifier": "isAnMVELExpression", "parameters": "(String rawValue)", "modifiers": "protected", "return": "boolean", "signature": "boolean isAnMVELExpression(String rawValue)", "full_signature": "protected boolean isAnMVELExpression(String rawValue)", "class_method_signature": "ExpressionEvaluatorFactory.isAnMVELExpression(String rawValue)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateBaseExpressionEvaluator", "parameters": "()", "modifiers": "private", "return": "ExpressionEvaluator", "signature": "ExpressionEvaluator getOrCreateBaseExpressionEvaluator()", "full_signature": "private ExpressionEvaluator getOrCreateBaseExpressionEvaluator()", "class_method_signature": "ExpressionEvaluatorFactory.getOrCreateBaseExpressionEvaluator()", "testcase": false, "constructor": false}, {"identifier": "getOrCreateMVELExpressionEvaluator", "parameters": "()", "modifiers": "private", "return": "ExpressionEvaluator", "signature": "ExpressionEvaluator getOrCreateMVELExpressionEvaluator()", "full_signature": "private ExpressionEvaluator getOrCreateMVELExpressionEvaluator()", "class_method_signature": "ExpressionEvaluatorFactory.getOrCreateMVELExpressionEvaluator()", "testcase": false, "constructor": false}, {"identifier": "getOrCreateDMNExpressionEvaluator", "parameters": "()", "modifiers": "private", "return": "ExpressionEvaluator", "signature": "ExpressionEvaluator getOrCreateDMNExpressionEvaluator()", "full_signature": "private ExpressionEvaluator getOrCreateDMNExpressionEvaluator()", "class_method_signature": "ExpressionEvaluatorFactory.getOrCreateDMNExpressionEvaluator()", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/expression/ExpressionEvaluatorFactory.java"}, "focal_method": {"identifier": "isAnMVELExpression", "parameters": "(String rawValue)", "modifiers": "protected", "return": "boolean", "body": "protected boolean isAnMVELExpression(String rawValue) {\n        /* NOT COLLECTIONS CASE */\n        if (rawValue.trim().startsWith(MVEL_ESCAPE_SYMBOL)) {\n            return true;\n        }\n        /* COLLECTION CASE */\n        Optional<JsonNode> optionalNode = JsonUtils.convertFromStringToJSONNode(rawValue);\n        return optionalNode.filter(\n                jsonNode -> jsonNode.isTextual() && jsonNode.asText().trim().startsWith(MVEL_ESCAPE_SYMBOL)).isPresent();\n    }", "signature": "boolean isAnMVELExpression(String rawValue)", "full_signature": "protected boolean isAnMVELExpression(String rawValue)", "class_method_signature": "ExpressionEvaluatorFactory.isAnMVELExpression(String rawValue)", "testcase": false, "constructor": false, "invocations": ["startsWith", "trim", "convertFromStringToJSONNode", "isPresent", "filter", "isTextual", "startsWith", "trim", "asText"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}