{"test_class": {"identifier": "RouterTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "protected Router router;", "modifier": "protected", "type": "Router", "declarator": "router", "var_name": "router"}, {"original_string": "@Mock\n  protected BuildService buildService;", "modifier": "@Mock\n  protected", "type": "BuildService", "declarator": "buildService", "var_name": "buildService"}, {"original_string": "@Mock\n  protected ContractService contractService;", "modifier": "@Mock\n  protected", "type": "ContractService", "declarator": "contractService", "var_name": "contractService"}, {"original_string": "@Mock\n  protected LiveUpdateService liveUpdateService;", "modifier": "@Mock\n  protected", "type": "LiveUpdateService", "declarator": "liveUpdateService", "var_name": "liveUpdateService"}], "file": "core/src/test/java/ship/build/web/RouterTest.java"}, "test_case": {"identifier": "testHandleHttpException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHandleHttpException() {\n    final HttpException httpException = new HttpException(500);\n    final WebRequest webRequest = mock(WebRequest.class);\n    final ResponseEntity responseEntity = router.handleHttpException(httpException, webRequest);\n    assertNotNull(responseEntity);\n  }", "signature": "void testHandleHttpException()", "full_signature": "@Test public void testHandleHttpException()", "class_method_signature": "RouterTest.testHandleHttpException()", "testcase": true, "constructor": false, "invocations": ["mock", "handleHttpException", "assertNotNull"]}, "focal_class": {"identifier": "Router", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "@Inject\n  @Setter\n  protected BuildService buildService;", "modifier": "@Inject\n  @Setter\n  protected", "type": "BuildService", "declarator": "buildService", "var_name": "buildService"}, {"original_string": "@Inject\n  @Setter\n  protected ContractService contractService;", "modifier": "@Inject\n  @Setter\n  protected", "type": "ContractService", "declarator": "contractService", "var_name": "contractService"}, {"original_string": "@Inject\n  @Setter\n  protected LiveUpdateService liveUpdateService;", "modifier": "@Inject\n  @Setter\n  protected", "type": "LiveUpdateService", "declarator": "liveUpdateService", "var_name": "liveUpdateService"}], "methods": [{"identifier": "initialize", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void initialize()", "full_signature": "@PostConstruct public void initialize()", "class_method_signature": "Router.initialize()", "testcase": false, "constructor": false}, {"identifier": "getLatestContract", "parameters": "()", "modifiers": "@GetMapping(\"contract\") public", "return": "DeploymentResult", "signature": "DeploymentResult getLatestContract()", "full_signature": "@GetMapping(\"contract\") public DeploymentResult getLatestContract()", "class_method_signature": "Router.getLatestContract()", "testcase": false, "constructor": false}, {"identifier": "getLatestBuilds", "parameters": "()", "modifiers": "@GetMapping(\"builds\") public", "return": "List<BuildSummary>", "signature": "List<BuildSummary> getLatestBuilds()", "full_signature": "@GetMapping(\"builds\") public List<BuildSummary> getLatestBuilds()", "class_method_signature": "Router.getLatestBuilds()", "testcase": false, "constructor": false}, {"identifier": "getBuild", "parameters": "(@PathVariable(\"uuid\") final String buildUuid)", "modifiers": "@GetMapping(\"build/{uuid}\") public", "return": "BuildDetails", "signature": "BuildDetails getBuild(@PathVariable(\"uuid\") final String buildUuid)", "full_signature": "@GetMapping(\"build/{uuid}\") public BuildDetails getBuild(@PathVariable(\"uuid\") final String buildUuid)", "class_method_signature": "Router.getBuild(@PathVariable(\"uuid\") final String buildUuid)", "testcase": false, "constructor": false}, {"identifier": "deploy", "parameters": "(@PathVariable(\"uuid\") final String buildUuid)", "modifiers": "@PostMapping(\"build/{uuid}/deploy\") public", "return": "DeploymentResult", "signature": "DeploymentResult deploy(@PathVariable(\"uuid\") final String buildUuid)", "full_signature": "@PostMapping(\"build/{uuid}/deploy\") public DeploymentResult deploy(@PathVariable(\"uuid\") final String buildUuid)", "class_method_signature": "Router.deploy(@PathVariable(\"uuid\") final String buildUuid)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(\n      @PathVariable(\"tx\") final String contractTransactionHash,\n      @PathVariable(\"function\") final String functionName,\n      @RequestBody final ContractInput contractInput)", "modifiers": "@PostMapping(value = \"contract/{tx}/{function}\") public", "return": "ExecutionResult", "signature": "ExecutionResult execute(\n      @PathVariable(\"tx\") final String contractTransactionHash,\n      @PathVariable(\"function\") final String functionName,\n      @RequestBody final ContractInput contractInput)", "full_signature": "@PostMapping(value = \"contract/{tx}/{function}\") public ExecutionResult execute(\n      @PathVariable(\"tx\") final String contractTransactionHash,\n      @PathVariable(\"function\") final String functionName,\n      @RequestBody final ContractInput contractInput)", "class_method_signature": "Router.execute(\n      @PathVariable(\"tx\") final String contractTransactionHash,\n      @PathVariable(\"function\") final String functionName,\n      @RequestBody final ContractInput contractInput)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(\n      @PathVariable(\"tx\") final String contractTransactionHash,\n      @PathVariable(\"function\") final String functionName,\n      @RequestParam(value = \"arguments\", required = false) final String[] arguments\n  )", "modifiers": "@GetMapping(value = \"contract/{tx}/{function}\") public", "return": "QueryResult", "signature": "QueryResult query(\n      @PathVariable(\"tx\") final String contractTransactionHash,\n      @PathVariable(\"function\") final String functionName,\n      @RequestParam(value = \"arguments\", required = false) final String[] arguments\n  )", "full_signature": "@GetMapping(value = \"contract/{tx}/{function}\") public QueryResult query(\n      @PathVariable(\"tx\") final String contractTransactionHash,\n      @PathVariable(\"function\") final String functionName,\n      @RequestParam(value = \"arguments\", required = false) final String[] arguments\n  )", "class_method_signature": "Router.query(\n      @PathVariable(\"tx\") final String contractTransactionHash,\n      @PathVariable(\"function\") final String functionName,\n      @RequestParam(value = \"arguments\", required = false) final String[] arguments\n  )", "testcase": false, "constructor": false}, {"identifier": "handleHttpException", "parameters": "(final HttpException ex, final WebRequest request)", "modifiers": "@ExceptionHandler(value = { HttpException.class }) protected", "return": "ResponseEntity", "signature": "ResponseEntity handleHttpException(final HttpException ex, final WebRequest request)", "full_signature": "@ExceptionHandler(value = { HttpException.class }) protected ResponseEntity handleHttpException(final HttpException ex, final WebRequest request)", "class_method_signature": "Router.handleHttpException(final HttpException ex, final WebRequest request)", "testcase": false, "constructor": false}, {"identifier": "handleThrowable", "parameters": "(Throwable ex, WebRequest request)", "modifiers": "@ExceptionHandler(value = { Throwable.class }) @ResponseStatus(INTERNAL_SERVER_ERROR) @ResponseBody protected", "return": "Object", "signature": "Object handleThrowable(Throwable ex, WebRequest request)", "full_signature": "@ExceptionHandler(value = { Throwable.class }) @ResponseStatus(INTERNAL_SERVER_ERROR) @ResponseBody protected Object handleThrowable(Throwable ex, WebRequest request)", "class_method_signature": "Router.handleThrowable(Throwable ex, WebRequest request)", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/build/web/Router.java"}, "focal_method": {"identifier": "handleHttpException", "parameters": "(final HttpException ex, final WebRequest request)", "modifiers": "@ExceptionHandler(value = { HttpException.class }) protected", "return": "ResponseEntity", "body": "@ExceptionHandler(value = { HttpException.class })\n  protected ResponseEntity handleHttpException(final HttpException ex, final WebRequest request) {\n    logger.warn(\"Unexpected exception:\", ex);\n    return ResponseEntity.status(ex.getStatusCode()).body(handleThrowable(ex, request));\n  }", "signature": "ResponseEntity handleHttpException(final HttpException ex, final WebRequest request)", "full_signature": "@ExceptionHandler(value = { HttpException.class }) protected ResponseEntity handleHttpException(final HttpException ex, final WebRequest request)", "class_method_signature": "Router.handleHttpException(final HttpException ex, final WebRequest request)", "testcase": false, "constructor": false, "invocations": ["warn", "body", "status", "getStatusCode", "handleThrowable"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}