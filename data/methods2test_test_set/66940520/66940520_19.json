{"test_class": {"identifier": "TrackerNotificationMessageManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Mock\n    private ObjectFactory<TrackerNotificationThread> objectFactory;", "modifier": "@Mock\n    private", "type": "ObjectFactory<TrackerNotificationThread>", "declarator": "objectFactory", "var_name": "objectFactory"}, {"original_string": "@Mock\n    private MessageManager messageManager;", "modifier": "@Mock\n    private", "type": "MessageManager", "declarator": "messageManager", "var_name": "messageManager"}, {"original_string": "@Mock\n    private RenderService renderService;", "modifier": "@Mock\n    private", "type": "RenderService", "declarator": "renderService", "var_name": "renderService"}, {"original_string": "@Mock\n    private TextMessage textMessage;", "modifier": "@Mock\n    private", "type": "TextMessage", "declarator": "textMessage", "var_name": "textMessage"}, {"original_string": "@Mock\n    private SchedulingManager schedulingManager;", "modifier": "@Mock\n    private", "type": "SchedulingManager", "declarator": "schedulingManager", "var_name": "schedulingManager"}, {"original_string": "@Mock\n    private TrackerNotificationThread trackerNotificationThread;", "modifier": "@Mock\n    private", "type": "TrackerNotificationThread", "declarator": "trackerNotificationThread", "var_name": "trackerNotificationThread"}, {"original_string": "@InjectMocks\n    private TrackerNotificationMessageManager trackerNotificationMessageManager;", "modifier": "@InjectMocks\n    private", "type": "TrackerNotificationMessageManager", "declarator": "trackerNotificationMessageManager", "var_name": "trackerNotificationMessageManager"}, {"original_string": "@Captor\n    private ArgumentCaptor<String> topicCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<String>", "declarator": "topicCaptor", "var_name": "topicCaptor"}, {"original_string": "@Captor\n    private ArgumentCaptor<TrackerSideEffectDataBundle> bundleArgumentCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<TrackerSideEffectDataBundle>", "declarator": "bundleArgumentCaptor", "var_name": "bundleArgumentCaptor"}, {"original_string": "@Captor\n    private ArgumentCaptor<Runnable> runnableCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<Runnable>", "declarator": "runnableCaptor", "var_name": "runnableCaptor"}], "file": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/job/TrackerNotificationMessageManagerTest.java"}, "test_case": {"identifier": "test_message_consumer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_message_consumer()\n        throws JMSException, IOException\n    {\n        TrackerSideEffectDataBundle bundle = TrackerSideEffectDataBundle.builder().accessedBy( \"test-user\" ).build();\n\n        when( textMessage.getText() ).thenReturn( \"text\" );\n        when( objectFactory.getObject() ).thenReturn( trackerNotificationThread );\n        doNothing().when( schedulingManager ).executeJob( any( Runnable.class ) );\n\n        when( renderService.fromJson( anyString(), eq( TrackerSideEffectDataBundle.class ) ) ).thenReturn( null );\n        trackerNotificationMessageManager.consume( textMessage );\n\n        verify( schedulingManager, times( 0 ) ).executeJob( any( Runnable.class ) );\n\n        doReturn( bundle ).when( renderService ).fromJson( anyString(), eq( TrackerSideEffectDataBundle.class ) );\n        trackerNotificationMessageManager.consume( textMessage );\n\n        Mockito.verify( schedulingManager ).executeJob( runnableCaptor.capture() );\n\n        assertTrue( runnableCaptor.getValue() instanceof TrackerNotificationThread );\n    }", "signature": "void test_message_consumer()", "full_signature": "@Test public void test_message_consumer()", "class_method_signature": "TrackerNotificationMessageManagerTest.test_message_consumer()", "testcase": true, "constructor": false, "invocations": ["build", "accessedBy", "builder", "thenReturn", "when", "getText", "thenReturn", "when", "getObject", "executeJob", "when", "doNothing", "any", "thenReturn", "when", "fromJson", "anyString", "eq", "consume", "executeJob", "verify", "times", "any", "fromJson", "when", "doReturn", "anyString", "eq", "consume", "executeJob", "verify", "capture", "assertTrue", "getValue"]}, "focal_class": {"identifier": "TrackerNotificationMessageManager", "superclass": "extends BaseMessageManager", "interfaces": "", "fields": [{"original_string": "private final ObjectFactory<TrackerNotificationThread> trackerNotificationThreadObjectFactory;", "modifier": "private final", "type": "ObjectFactory<TrackerNotificationThread>", "declarator": "trackerNotificationThreadObjectFactory", "var_name": "trackerNotificationThreadObjectFactory"}], "methods": [{"identifier": "TrackerNotificationMessageManager", "parameters": "(\n        MessageManager messageManager,\n        SchedulingManager schedulingManager,\n        RenderService renderService,\n        ObjectFactory<TrackerNotificationThread> trackerNotificationThreadObjectFactory )", "modifiers": "public", "return": "", "signature": " TrackerNotificationMessageManager(\n        MessageManager messageManager,\n        SchedulingManager schedulingManager,\n        RenderService renderService,\n        ObjectFactory<TrackerNotificationThread> trackerNotificationThreadObjectFactory )", "full_signature": "public  TrackerNotificationMessageManager(\n        MessageManager messageManager,\n        SchedulingManager schedulingManager,\n        RenderService renderService,\n        ObjectFactory<TrackerNotificationThread> trackerNotificationThreadObjectFactory )", "class_method_signature": "TrackerNotificationMessageManager.TrackerNotificationMessageManager(\n        MessageManager messageManager,\n        SchedulingManager schedulingManager,\n        RenderService renderService,\n        ObjectFactory<TrackerNotificationThread> trackerNotificationThreadObjectFactory )", "testcase": false, "constructor": true}, {"identifier": "getTopic", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTopic()", "full_signature": "@Override public String getTopic()", "class_method_signature": "TrackerNotificationMessageManager.getTopic()", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "( TextMessage message )", "modifiers": "@JmsListener( destination = Topics.TRACKER_IMPORT_NOTIFICATION_TOPIC_NAME, containerFactory = \"jmsQueueListenerContainerFactory\" ) public", "return": "void", "signature": "void consume( TextMessage message )", "full_signature": "@JmsListener( destination = Topics.TRACKER_IMPORT_NOTIFICATION_TOPIC_NAME, containerFactory = \"jmsQueueListenerContainerFactory\" ) public void consume( TextMessage message )", "class_method_signature": "TrackerNotificationMessageManager.consume( TextMessage message )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/job/TrackerNotificationMessageManager.java"}, "focal_method": {"identifier": "consume", "parameters": "( TextMessage message )", "modifiers": "@JmsListener( destination = Topics.TRACKER_IMPORT_NOTIFICATION_TOPIC_NAME, containerFactory = \"jmsQueueListenerContainerFactory\" ) public", "return": "void", "body": "@JmsListener( destination = Topics.TRACKER_IMPORT_NOTIFICATION_TOPIC_NAME, containerFactory = \"jmsQueueListenerContainerFactory\" )\n    public void consume( TextMessage message )\n        throws JMSException, IOException\n    {\n        TrackerSideEffectDataBundle bundle = toBundle( message );\n\n        if ( bundle == null )\n        {\n            return;\n        }\n\n        JobConfiguration jobConfiguration = new JobConfiguration( \"\", JobType.TRACKER_IMPORT_NOTIFICATION_JOB,\n            bundle.getAccessedBy(), true );\n\n        bundle.setJobConfiguration( jobConfiguration );\n\n        TrackerNotificationThread notificationThread = trackerNotificationThreadObjectFactory.getObject();\n\n        notificationThread.setSideEffectDataBundle( bundle );\n\n        executeJob( notificationThread );\n    }", "signature": "void consume( TextMessage message )", "full_signature": "@JmsListener( destination = Topics.TRACKER_IMPORT_NOTIFICATION_TOPIC_NAME, containerFactory = \"jmsQueueListenerContainerFactory\" ) public void consume( TextMessage message )", "class_method_signature": "TrackerNotificationMessageManager.consume( TextMessage message )", "testcase": false, "constructor": false, "invocations": ["toBundle", "getAccessedBy", "setJobConfiguration", "getObject", "setSideEffectDataBundle", "executeJob"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}