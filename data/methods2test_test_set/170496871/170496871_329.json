{"test_class": {"identifier": "GiniImpurityMeasureCalculatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Parameterized.Parameter\n    public boolean useIdx;", "modifier": "@Parameterized.Parameter\n    public", "type": "boolean", "declarator": "useIdx", "var_name": "useIdx"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/tree/impurity/gini/GiniImpurityMeasureCalculatorTest.java"}, "test_case": {"identifier": "testCalculate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCalculate() {\n        double[][] data = new double[][]{{0, 1}, {1, 0}, {2, 2}, {3, 3}};\n        double[] labels = new double[]{0, 1, 1, 1};\n\n        Map<Double, Integer> encoder = new HashMap<>();\n        encoder.put(0.0, 0);\n        encoder.put(1.0, 1);\n        GiniImpurityMeasureCalculator calculator = new GiniImpurityMeasureCalculator(encoder, useIdx);\n\n        StepFunction<GiniImpurityMeasure>[] impurity = calculator.calculate(new DecisionTreeData(data, labels, useIdx), fs -> true, 0);\n\n        assertEquals(2, impurity.length);\n\n        // Check Gini calculated for the first column.\n        assertArrayEquals(new double[]{Double.NEGATIVE_INFINITY, 0, 1, 2, 3}, impurity[0].getX(), 1e-10);\n        assertEquals(-2.500, impurity[0].getY()[0].impurity(), 1e-3);\n        assertEquals(-4.000, impurity[0].getY()[1].impurity(),1e-3);\n        assertEquals(-3.000, impurity[0].getY()[2].impurity(),1e-3);\n        assertEquals(-2.666, impurity[0].getY()[3].impurity(),1e-3);\n        assertEquals(-2.500, impurity[0].getY()[4].impurity(),1e-3);\n\n        // Check Gini calculated for the second column.\n        assertArrayEquals(new double[]{Double.NEGATIVE_INFINITY, 0, 1, 2, 3}, impurity[1].getX(), 1e-10);\n        assertEquals(-2.500, impurity[1].getY()[0].impurity(),1e-3);\n        assertEquals(-2.666, impurity[1].getY()[1].impurity(),1e-3);\n        assertEquals(-3.000, impurity[1].getY()[2].impurity(),1e-3);\n        assertEquals(-2.666, impurity[1].getY()[3].impurity(),1e-3);\n        assertEquals(-2.500, impurity[1].getY()[4].impurity(),1e-3);\n    }", "signature": "void testCalculate()", "full_signature": "@Test public void testCalculate()", "class_method_signature": "GiniImpurityMeasureCalculatorTest.testCalculate()", "testcase": true, "constructor": false, "invocations": ["put", "put", "calculate", "assertEquals", "assertArrayEquals", "getX", "assertEquals", "impurity", "getY", "assertEquals", "impurity", "getY", "assertEquals", "impurity", "getY", "assertEquals", "impurity", "getY", "assertEquals", "impurity", "getY", "assertArrayEquals", "getX", "assertEquals", "impurity", "getY", "assertEquals", "impurity", "getY", "assertEquals", "impurity", "getY", "assertEquals", "impurity", "getY", "assertEquals", "impurity", "getY"]}, "focal_class": {"identifier": "GiniImpurityMeasureCalculator", "superclass": "extends ImpurityMeasureCalculator<GiniImpurityMeasure>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -522995134128519679L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -522995134128519679L", "var_name": "serialVersionUID"}, {"original_string": "private final Map<Double, Integer> lbEncoder;", "modifier": "private final", "type": "Map<Double, Integer>", "declarator": "lbEncoder", "var_name": "lbEncoder"}], "methods": [{"identifier": "GiniImpurityMeasureCalculator", "parameters": "(Map<Double, Integer> lbEncoder, boolean useIdx)", "modifiers": "public", "return": "", "signature": " GiniImpurityMeasureCalculator(Map<Double, Integer> lbEncoder, boolean useIdx)", "full_signature": "public  GiniImpurityMeasureCalculator(Map<Double, Integer> lbEncoder, boolean useIdx)", "class_method_signature": "GiniImpurityMeasureCalculator.GiniImpurityMeasureCalculator(Map<Double, Integer> lbEncoder, boolean useIdx)", "testcase": false, "constructor": true}, {"identifier": "calculate", "parameters": "(DecisionTreeData data, TreeFilter filter, int depth)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "StepFunction<GiniImpurityMeasure>[]", "signature": "StepFunction<GiniImpurityMeasure>[] calculate(DecisionTreeData data, TreeFilter filter, int depth)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public StepFunction<GiniImpurityMeasure>[] calculate(DecisionTreeData data, TreeFilter filter, int depth)", "class_method_signature": "GiniImpurityMeasureCalculator.calculate(DecisionTreeData data, TreeFilter filter, int depth)", "testcase": false, "constructor": false}, {"identifier": "getLabelCode", "parameters": "(double lb)", "modifiers": "", "return": "int", "signature": "int getLabelCode(double lb)", "full_signature": " int getLabelCode(double lb)", "class_method_signature": "GiniImpurityMeasureCalculator.getLabelCode(double lb)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/tree/impurity/gini/GiniImpurityMeasureCalculator.java"}, "focal_method": {"identifier": "calculate", "parameters": "(DecisionTreeData data, TreeFilter filter, int depth)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "StepFunction<GiniImpurityMeasure>[]", "body": "@SuppressWarnings(\"unchecked\")\n    @Override public StepFunction<GiniImpurityMeasure>[] calculate(DecisionTreeData data, TreeFilter filter, int depth) {\n        TreeDataIndex idx = null;\n        boolean canCalculate = false;\n\n        if (useIdx) {\n            idx = data.createIndexByFilter(depth, filter);\n            canCalculate = idx.rowsCount() > 0;\n        }\n        else {\n            data = data.filter(filter);\n            canCalculate = data.getFeatures().length > 0;\n        }\n\n        if (canCalculate) {\n            int rowsCnt = rowsCount(data, idx);\n            int colsCnt = columnsCount(data, idx);\n\n            StepFunction<GiniImpurityMeasure>[] res = new StepFunction[colsCnt];\n\n            long right[] = new long[lbEncoder.size()];\n            for (int i = 0; i < rowsCnt; i++) {\n                double lb = getLabelValue(data, idx, 0, i);\n                right[getLabelCode(lb)]++;\n            }\n\n            for (int col = 0; col < res.length; col++) {\n                if (!useIdx)\n                    data.sort(col);\n\n                double[] x = new double[rowsCnt + 1];\n                GiniImpurityMeasure[] y = new GiniImpurityMeasure[rowsCnt + 1];\n\n                long[] left = new long[lbEncoder.size()];\n                long[] rightCp = Arrays.copyOf(right, right.length);\n\n                int xPtr = 0, yPtr = 0;\n                x[xPtr++] = Double.NEGATIVE_INFINITY;\n                y[yPtr++] = new GiniImpurityMeasure(\n                    Arrays.copyOf(left, left.length),\n                    Arrays.copyOf(rightCp, rightCp.length)\n                );\n\n                for (int i = 0; i < rowsCnt; i++) {\n                    double lb = getLabelValue(data, idx, col, i);\n                    left[getLabelCode(lb)]++;\n                    rightCp[getLabelCode(lb)]--;\n\n                    double featureVal = getFeatureValue(data, idx, col, i);\n                    if (i < (rowsCnt - 1) && getFeatureValue(data, idx, col, i + 1) == featureVal)\n                        continue;\n\n                    x[xPtr++] = featureVal;\n                    y[yPtr++] = new GiniImpurityMeasure(\n                        Arrays.copyOf(left, left.length),\n                        Arrays.copyOf(rightCp, rightCp.length)\n                    );\n                }\n\n                res[col] = new StepFunction<>(Arrays.copyOf(x, xPtr), Arrays.copyOf(y, yPtr));\n            }\n\n            return res;\n        }\n\n        return null;\n    }", "signature": "StepFunction<GiniImpurityMeasure>[] calculate(DecisionTreeData data, TreeFilter filter, int depth)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public StepFunction<GiniImpurityMeasure>[] calculate(DecisionTreeData data, TreeFilter filter, int depth)", "class_method_signature": "GiniImpurityMeasureCalculator.calculate(DecisionTreeData data, TreeFilter filter, int depth)", "testcase": false, "constructor": false, "invocations": ["createIndexByFilter", "rowsCount", "filter", "getFeatures", "rowsCount", "columnsCount", "size", "getLabelValue", "getLabelCode", "sort", "size", "copyOf", "copyOf", "copyOf", "getLabelValue", "getLabelCode", "getLabelCode", "getFeatureValue", "getFeatureValue", "copyOf", "copyOf", "copyOf", "copyOf"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}