{"test_class": {"identifier": "MediaTypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "httpizza/src/test/java/sexy/code/MediaTypeTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testParse() throws Exception {\n        MediaType mediaType = MediaType.parse(\"text/plain;boundary=foo;charset=utf-8\");\n        assertEquals(\"text\", mediaType.type());\n        assertEquals(\"plain\", mediaType.subtype());\n        assertEquals(\"UTF-8\", mediaType.charset().name());\n        assertEquals(\"text/plain;boundary=foo;charset=utf-8\", mediaType.toString());\n        assertTrue(mediaType.equals(MediaType.parse(\"text/plain;boundary=foo;charset=utf-8\")));\n        assertEquals(mediaType.hashCode(),\n                MediaType.parse(\"text/plain;boundary=foo;charset=utf-8\").hashCode());\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "MediaTypeTest.testParse()", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals", "type", "assertEquals", "subtype", "assertEquals", "name", "charset", "assertEquals", "toString", "assertTrue", "equals", "parse", "assertEquals", "hashCode", "hashCode", "parse"]}, "focal_class": {"identifier": "MediaType", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TOKEN = \"([a-zA-Z0-9-!#$%&'*+.^_`{|}~]+)\";", "modifier": "private static final", "type": "String", "declarator": "TOKEN = \"([a-zA-Z0-9-!#$%&'*+.^_`{|}~]+)\"", "var_name": "TOKEN"}, {"original_string": "private static final String QUOTED = \"\\\"([^\\\"]*)\\\"\";", "modifier": "private static final", "type": "String", "declarator": "QUOTED = \"\\\"([^\\\"]*)\\\"\"", "var_name": "QUOTED"}, {"original_string": "private static final Pattern TYPE_SUBTYPE = Pattern.compile(TOKEN + \"/\" + TOKEN);", "modifier": "private static final", "type": "Pattern", "declarator": "TYPE_SUBTYPE = Pattern.compile(TOKEN + \"/\" + TOKEN)", "var_name": "TYPE_SUBTYPE"}, {"original_string": "private static final Pattern PARAMETER = Pattern.compile(\n            \";\\\\s*(?:\" + TOKEN + \"=(?:\" + TOKEN + \"|\" + QUOTED + \"))?\");", "modifier": "private static final", "type": "Pattern", "declarator": "PARAMETER = Pattern.compile(\n            \";\\\\s*(?:\" + TOKEN + \"=(?:\" + TOKEN + \"|\" + QUOTED + \"))?\")", "var_name": "PARAMETER"}, {"original_string": "private final String mediaType;", "modifier": "private final", "type": "String", "declarator": "mediaType", "var_name": "mediaType"}, {"original_string": "private final String type;", "modifier": "private final", "type": "String", "declarator": "type", "var_name": "type"}, {"original_string": "private final String subtype;", "modifier": "private final", "type": "String", "declarator": "subtype", "var_name": "subtype"}, {"original_string": "private final String charset;", "modifier": "private final", "type": "String", "declarator": "charset", "var_name": "charset"}], "methods": [{"identifier": "MediaType", "parameters": "(String mediaType, String type, String subtype, String charset)", "modifiers": "private", "return": "", "signature": " MediaType(String mediaType, String type, String subtype, String charset)", "full_signature": "private  MediaType(String mediaType, String type, String subtype, String charset)", "class_method_signature": "MediaType.MediaType(String mediaType, String type, String subtype, String charset)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String string)", "modifiers": "public static", "return": "MediaType", "signature": "MediaType parse(String string)", "full_signature": "public static MediaType parse(String string)", "class_method_signature": "MediaType.parse(String string)", "testcase": false, "constructor": false}, {"identifier": "type", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String type()", "full_signature": "public String type()", "class_method_signature": "MediaType.type()", "testcase": false, "constructor": false}, {"identifier": "subtype", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String subtype()", "full_signature": "public String subtype()", "class_method_signature": "MediaType.subtype()", "testcase": false, "constructor": false}, {"identifier": "charset", "parameters": "()", "modifiers": "public", "return": "Charset", "signature": "Charset charset()", "full_signature": "public Charset charset()", "class_method_signature": "MediaType.charset()", "testcase": false, "constructor": false}, {"identifier": "charset", "parameters": "(Charset defaultValue)", "modifiers": "public", "return": "Charset", "signature": "Charset charset(Charset defaultValue)", "full_signature": "public Charset charset(Charset defaultValue)", "class_method_signature": "MediaType.charset(Charset defaultValue)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MediaType.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "MediaType.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MediaType.hashCode()", "testcase": false, "constructor": false}], "file": "httpizza/src/main/java/sexy/code/MediaType.java"}, "focal_method": {"identifier": "parse", "parameters": "(String string)", "modifiers": "public static", "return": "MediaType", "body": "public static MediaType parse(String string) {\n        Matcher typeSubtype = TYPE_SUBTYPE.matcher(string);\n        if (!typeSubtype.lookingAt()) return null;\n        String type = typeSubtype.group(1).toLowerCase(Locale.US);\n        String subtype = typeSubtype.group(2).toLowerCase(Locale.US);\n\n        String charset = null;\n        Matcher parameter = PARAMETER.matcher(string);\n        for (int s = typeSubtype.end(); s < string.length(); s = parameter.end()) {\n            parameter.region(s, string.length());\n            if (!parameter.lookingAt()) return null; // This is not a well-formed media type.\n\n            String name = parameter.group(1);\n            if (name == null || !name.equalsIgnoreCase(\"charset\")) continue;\n            String charsetParameter = parameter.group(2) != null\n                    ? parameter.group(2)  // Value is a token.\n                    : parameter.group(3); // Value is a quoted string.\n            if (charset != null && !charsetParameter.equalsIgnoreCase(charset)) {\n                throw new IllegalArgumentException(\"Multiple different charsets: \" + string);\n            }\n            charset = charsetParameter;\n        }\n\n        return new MediaType(string, type, subtype, charset);\n    }", "signature": "MediaType parse(String string)", "full_signature": "public static MediaType parse(String string)", "class_method_signature": "MediaType.parse(String string)", "testcase": false, "constructor": false, "invocations": ["matcher", "lookingAt", "toLowerCase", "group", "toLowerCase", "group", "matcher", "end", "length", "end", "region", "length", "lookingAt", "group", "equalsIgnoreCase", "group", "group", "group", "equalsIgnoreCase"]}, "repository": {"repo_id": 50866545, "url": "https://github.com/reisub/HttPizza", "stars": 54, "created": "2/1/2016 7:53:59 PM +00:00", "updates": "2019-02-21T14:11:58+00:00", "fork": "False", "license": "licensed"}}