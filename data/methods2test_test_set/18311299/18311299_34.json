{"test_class": {"identifier": "MysqlConfiguratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String INSERT_QUERY = \"INSERT INTO \" + TEST_TABLE_NAME + \" VALUES (?, ?)\";", "modifier": "private static final", "type": "String", "declarator": "INSERT_QUERY = \"INSERT INTO \" + TEST_TABLE_NAME + \" VALUES (?, ?)\"", "var_name": "INSERT_QUERY"}, {"original_string": "private static final String COUNT_EVENTS_QUERY = \"SELECT count(1) FROM \" + MysqlEventRepo.TABLE_NAME;", "modifier": "private static final", "type": "String", "declarator": "COUNT_EVENTS_QUERY = \"SELECT count(1) FROM \" + MysqlEventRepo.TABLE_NAME", "var_name": "COUNT_EVENTS_QUERY"}, {"original_string": "private static final String UPDATE_QUERY = \"UPDATE \" + TEST_TABLE_NAME + \" SET TXT=? WHERE ID=?\";", "modifier": "private static final", "type": "String", "declarator": "UPDATE_QUERY = \"UPDATE \" + TEST_TABLE_NAME + \" SET TXT=? WHERE ID=?\"", "var_name": "UPDATE_QUERY"}, {"original_string": "private static final String DELETE_QUERY = \"DELETE FROM \" + TEST_TABLE_NAME + \" WHERE ID=?\";", "modifier": "private static final", "type": "String", "declarator": "DELETE_QUERY = \"DELETE FROM \" + TEST_TABLE_NAME + \" WHERE ID=?\"", "var_name": "DELETE_QUERY"}, {"original_string": "private ConnectionProvider provider;", "modifier": "private", "type": "ConnectionProvider", "declarator": "provider", "var_name": "provider"}], "file": "reactive-source-mysql/src/test/java/org/reactivesource/mysql/MysqlConfiguratorTest.java"}, "test_case": {"identifier": "testThrowsConfigurationExceptionWhenSqlExceptionOccures", "parameters": "()", "modifiers": "@Test(groups = SMALL, expectedExceptions = ConfigurationException.class) public", "return": "void", "body": "@Test(groups = SMALL, expectedExceptions = ConfigurationException.class)\n    public void testThrowsConfigurationExceptionWhenSqlExceptionOccures() throws SQLException {\n        ConnectionProvider mockedProvider = mock(ConnectionProvider.class);\n        Connection mockedConnection = mock(Connection.class);\n\n        when(mockedProvider.getConnection()).thenReturn(mockedConnection);\n        when(mockedConnection.createStatement()).thenThrow(new SQLException());\n\n        MysqlConfigurator configurator = new MysqlConfigurator(mockedProvider, TEST_TABLE_NAME);\n        configurator.setup();\n    }", "signature": "void testThrowsConfigurationExceptionWhenSqlExceptionOccures()", "full_signature": "@Test(groups = SMALL, expectedExceptions = ConfigurationException.class) public void testThrowsConfigurationExceptionWhenSqlExceptionOccures()", "class_method_signature": "MysqlConfiguratorTest.testThrowsConfigurationExceptionWhenSqlExceptionOccures()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getConnection", "thenThrow", "when", "createStatement", "setup"]}, "focal_class": {"identifier": "MysqlConfigurator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TableMetadata tableMetadata;", "modifier": "private final", "type": "TableMetadata", "declarator": "tableMetadata", "var_name": "tableMetadata"}, {"original_string": "private final ConnectionProvider connectionProvider;", "modifier": "private final", "type": "ConnectionProvider", "declarator": "connectionProvider", "var_name": "connectionProvider"}, {"original_string": "private final String tableName;", "modifier": "private final", "type": "String", "declarator": "tableName", "var_name": "tableName"}], "methods": [{"identifier": "MysqlConfigurator", "parameters": "(ConnectionProvider connectionProvider, String tableName)", "modifiers": "public", "return": "", "signature": " MysqlConfigurator(ConnectionProvider connectionProvider, String tableName)", "full_signature": "public  MysqlConfigurator(ConnectionProvider connectionProvider, String tableName)", "class_method_signature": "MysqlConfigurator.MysqlConfigurator(ConnectionProvider connectionProvider, String tableName)", "testcase": false, "constructor": true}, {"identifier": "setup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setup()", "full_signature": "public void setup()", "class_method_signature": "MysqlConfigurator.setup()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cleanup()", "full_signature": "public void cleanup()", "class_method_signature": "MysqlConfigurator.cleanup()", "testcase": false, "constructor": false}], "file": "reactive-source-mysql/src/main/java/org/reactivesource/mysql/MysqlConfigurator.java"}, "focal_method": {"identifier": "setup", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void setup() {\n        try (\n                Connection connection = connectionProvider.getConnection();\n                Statement stmt = connection.createStatement()\n        ) {\n            List<String> tableColumnNames = tableMetadata.getColumnNames(tableName);\n            ReactiveTrigger insertTrigger = ReactiveTriggerFactory.afterInsert(tableName, tableColumnNames);\n            ReactiveTrigger updateTrigger = ReactiveTriggerFactory.afterUpdate(tableName, tableColumnNames);\n            ReactiveTrigger deleteTrigger = ReactiveTriggerFactory.afterDelete(tableName, tableColumnNames);\n\n            stmt.execute(insertTrigger.getCreateSql());\n            stmt.execute(updateTrigger.getCreateSql());\n            stmt.execute(deleteTrigger.getCreateSql());\n        } catch (SQLException sqle) {\n            throw new ConfigurationException(\"Couldn't configure table \" + tableName + \" as a reactive source\", sqle);\n        }\n    }", "signature": "void setup()", "full_signature": "public void setup()", "class_method_signature": "MysqlConfigurator.setup()", "testcase": false, "constructor": false, "invocations": ["getConnection", "createStatement", "getColumnNames", "afterInsert", "afterUpdate", "afterDelete", "execute", "getCreateSql", "execute", "getCreateSql", "execute", "getCreateSql"]}, "repository": {"repo_id": 18311299, "url": "https://github.com/eBay/reactive-source", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 9, "size": 317, "license": "licensed"}}