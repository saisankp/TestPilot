{"test_class": {"identifier": "PiElectronegativityDescriptorTest", "superclass": "extends AtomicDescriptorTest", "interfaces": "", "fields": [{"original_string": "private IChemObjectBuilder      builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "private LonePairElectronChecker lpcheck = new LonePairElectronChecker();", "modifier": "private", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}], "file": "descriptor/qsaratomic/src/test/java/org/openscience/cdk/qsar/descriptors/atomic/PiElectronegativityDescriptorTest.java"}, "test_case": {"identifier": "testPiElectronegativityDescriptor_Ethylene", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPiElectronegativityDescriptor_Ethylene() throws ClassNotFoundException, CDKException,\n            java.lang.Exception {\n\n        double[] testResult = {5.1519, 5.1519, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};/*\n                                                                              * from\n                                                                              * Petra\n                                                                              * online\n                                                                              * :\n                                                                              * http\n                                                                              * :\n                                                                              * /\n                                                                              * /\n                                                                              * www2\n                                                                              * .\n                                                                              * chemie\n                                                                              * .\n                                                                              * uni\n                                                                              * -\n                                                                              * erlangen\n                                                                              * .\n                                                                              * de\n                                                                              * /\n                                                                              * services\n                                                                              * /\n                                                                              * petra\n                                                                              * /\n                                                                              * smiles\n                                                                              * .\n                                                                              * phtml\n                                                                              */\n        IAtomicDescriptor descriptor = new PiElectronegativityDescriptor();\n\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"C=C\");\n\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        addExplicitHydrogens(mol);\n\n        LonePairElectronChecker lpcheck = new LonePairElectronChecker();\n        lpcheck.saturate(mol);\n        for (int i = 0; i < 3; i++) {\n            double result = ((DoubleResult) descriptor.calculate(mol.getAtom(i), mol).getValue()).doubleValue();\n\n            //\t        logger.debug(\"result: \"+result);\n            if (result == 0.0)\n                Assert.assertEquals(testResult[i], result, 0.0001);\n            else {\n                Assert.assertTrue(result != 0.0);\n                Assert.assertEquals(testResult[i], result, 0.02);\n            }\n        }\n    }", "signature": "void testPiElectronegativityDescriptor_Ethylene()", "full_signature": "@Test public void testPiElectronegativityDescriptor_Ethylene()", "class_method_signature": "PiElectronegativityDescriptorTest.testPiElectronegativityDescriptor_Ethylene()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "percieveAtomTypesAndConfigureAtoms", "addExplicitHydrogens", "saturate", "doubleValue", "getValue", "calculate", "getAtom", "assertEquals", "assertTrue", "assertEquals"]}, "focal_class": {"identifier": "PiElectronegativityDescriptor", "superclass": "extends AbstractAtomicDescriptor", "interfaces": "implements IAtomicDescriptor", "fields": [{"original_string": "private int                   maxIterations   = -1;", "modifier": "private", "type": "int", "declarator": "maxIterations   = -1", "var_name": "maxIterations"}, {"original_string": "private int                   maxResonStruc   = -1;", "modifier": "private", "type": "int", "declarator": "maxResonStruc   = -1", "var_name": "maxResonStruc"}, {"original_string": "private boolean               lpeChecker      = true;", "modifier": "private", "type": "boolean", "declarator": "lpeChecker      = true", "var_name": "lpeChecker"}, {"original_string": "private static final String[] NAMES = {\"elecPiA\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"elecPiA\"}", "var_name": "NAMES"}, {"original_string": "private PiElectronegativity   electronegativity;", "modifier": "private", "type": "PiElectronegativity", "declarator": "electronegativity", "var_name": "electronegativity"}], "methods": [{"identifier": "PiElectronegativityDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " PiElectronegativityDescriptor()", "full_signature": "public  PiElectronegativityDescriptor()", "class_method_signature": "PiElectronegativityDescriptor.PiElectronegativityDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "PiElectronegativityDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "PiElectronegativityDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "PiElectronegativityDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "PiElectronegativityDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer atomContainer)", "class_method_signature": "PiElectronegativityDescriptor.calculate(IAtom atom, IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "PiElectronegativityDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "PiElectronegativityDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsaratomic/src/main/java/org/openscience/cdk/qsar/descriptors/atomic/PiElectronegativityDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtom atom, IAtomContainer atomContainer) {\n        IAtomContainer clone;\n        IAtom localAtom;\n        try {\n            clone = (IAtomContainer) atomContainer.clone();\n            AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(clone);\n            if (lpeChecker) {\n                LonePairElectronChecker lpcheck = new LonePairElectronChecker();\n                lpcheck.saturate(atomContainer);\n            }\n            localAtom = clone.getAtom(atomContainer.indexOf(atom));\n        } catch (CloneNotSupportedException e) {\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                    Double.NaN), NAMES, null);\n        } catch (CDKException e) {\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                    Double.NaN), NAMES, null);\n        }\n\n        if (maxIterations != -1 && maxIterations != 0) electronegativity.setMaxIterations(maxIterations);\n        if (maxResonStruc != -1 && maxResonStruc != 0) electronegativity.setMaxResonStruc(maxResonStruc);\n\n        double result = electronegativity.calculatePiElectronegativity(clone, localAtom);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(result),\n                                   NAMES);\n    }", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer atomContainer)", "class_method_signature": "PiElectronegativityDescriptor.calculate(IAtom atom, IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["clone", "percieveAtomTypesAndConfigureAtoms", "saturate", "getAtom", "indexOf", "getSpecification", "getParameterNames", "getParameters", "getSpecification", "getParameterNames", "getParameters", "setMaxIterations", "setMaxResonStruc", "calculatePiElectronegativity", "getSpecification", "getParameterNames", "getParameters"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}