{"test_class": {"identifier": "OxygenAtomCountDescriptorTest", "superclass": "extends SubstanceDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarsubstance/src/test/java/org/openscience/cdk/qsar/descriptors/substance/OxygenAtomCountDescriptorTest.java"}, "test_case": {"identifier": "testCalculate_IronOxide", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCalculate_IronOxide() throws Exception {\n        ISubstance material = new Substance();\n        material.addAtomContainer(\n            MolecularFormulaManipulator.getAtomContainer(\n                \"Fe3O4\", DefaultChemObjectBuilder.getInstance()\n            )\n        );\n        DescriptorValue value = descriptor.calculate(material);\n        Assert.assertNotNull(value);\n        IDescriptorResult result = value.getValue();\n        Assert.assertNotNull(result);\n        Assert.assertEquals(4, ((IntegerResult)result).intValue());\n    }", "signature": "void testCalculate_IronOxide()", "full_signature": "@Test public void testCalculate_IronOxide()", "class_method_signature": "OxygenAtomCountDescriptorTest.testCalculate_IronOxide()", "testcase": true, "constructor": false, "invocations": ["addAtomContainer", "getAtomContainer", "getInstance", "calculate", "assertNotNull", "getValue", "assertNotNull", "assertEquals", "intValue"]}, "focal_class": {"identifier": "OxygenAtomCountDescriptor", "superclass": "", "interfaces": "implements ISubstanceDescriptor", "fields": [], "methods": [{"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "OxygenAtomCountDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "OxygenAtomCountDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String substance)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String substance)", "full_signature": "@Override public Object getParameterType(String substance)", "class_method_signature": "OxygenAtomCountDescriptor.getParameterType(String substance)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "OxygenAtomCountDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "OxygenAtomCountDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] parameters)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] parameters)", "full_signature": "@Override public void setParameters(Object[] parameters)", "class_method_signature": "OxygenAtomCountDescriptor.setParameters(Object[] parameters)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(ISubstance substance)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(ISubstance substance)", "full_signature": "@Override public DescriptorValue calculate(ISubstance substance)", "class_method_signature": "OxygenAtomCountDescriptor.calculate(ISubstance substance)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "OxygenAtomCountDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "initialise", "parameters": "(IChemObjectBuilder builder)", "modifiers": "@Override public", "return": "void", "signature": "void initialise(IChemObjectBuilder builder)", "full_signature": "@Override public void initialise(IChemObjectBuilder builder)", "class_method_signature": "OxygenAtomCountDescriptor.initialise(IChemObjectBuilder builder)", "testcase": false, "constructor": false}], "file": "descriptor/qsarsubstance/src/main/java/org/openscience/cdk/qsar/descriptors/substance/OxygenAtomCountDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(ISubstance substance)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n\tpublic DescriptorValue calculate(ISubstance substance) {\n        int count = 0;\n        if (substance != null) {\n            for (IAtomContainer container : substance.atomContainers()) {\n                for (IAtom atom : container.atoms()) {\n                    if (\"O\".equals(atom.getSymbol()) || 8 == atom.getAtomicNumber())\n                        count++;\n                }\n            }\n        }\n\n\t\treturn new DescriptorValue(\n\t\t    getSpecification(), getParameterNames(), getParameters(),\n\t\t    new IntegerResult(count), getDescriptorNames()\n\t\t);\n\t}", "signature": "DescriptorValue calculate(ISubstance substance)", "full_signature": "@Override public DescriptorValue calculate(ISubstance substance)", "class_method_signature": "OxygenAtomCountDescriptor.calculate(ISubstance substance)", "testcase": false, "constructor": false, "invocations": ["atomContainers", "atoms", "equals", "getSymbol", "getAtomicNumber", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}