{"test_class": {"identifier": "Oadr20bVENEiReportControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EIREPORT_ENDPOINT = Oadr20bUrlPath.OADR_BASE_PATH + Oadr20bUrlPath.EI_REPORT_SERVICE;", "modifier": "private static final", "type": "String", "declarator": "EIREPORT_ENDPOINT = Oadr20bUrlPath.OADR_BASE_PATH + Oadr20bUrlPath.EI_REPORT_SERVICE", "var_name": "EIREPORT_ENDPOINT"}, {"original_string": "public static final UserRequestPostProcessor VTN_SECURITY_SESSION = SecurityMockMvcRequestPostProcessors.user(\"vtn\")\n\t\t\t.roles(\"VTN\");", "modifier": "public static final", "type": "UserRequestPostProcessor", "declarator": "VTN_SECURITY_SESSION = SecurityMockMvcRequestPostProcessors.user(\"vtn\")\n\t\t\t.roles(\"VTN\")", "var_name": "VTN_SECURITY_SESSION"}, {"original_string": "@Autowired\n\tprivate WebApplicationContext wac;", "modifier": "@Autowired\n\tprivate", "type": "WebApplicationContext", "declarator": "wac", "var_name": "wac"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@Autowired\n\tprivate Filter springSecurityFilterChain;", "modifier": "@Autowired\n\tprivate", "type": "Filter", "declarator": "springSecurityFilterChain", "var_name": "springSecurityFilterChain"}], "file": "OpenADRServerVEN20b/src/test/java/com/avob/openadr/server/oadr20b/ven/controller/Oadr20bVENEiReportControllerTest.java"}, "test_case": {"identifier": "requestTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void requestTest() throws Exception {\n\t\t// GET not allowed\n\t\tthis.mockMvc.perform(MockMvcRequestBuilders.get(EIREPORT_ENDPOINT).with(VTN_SECURITY_SESSION))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.METHOD_NOT_ALLOWED_405));\n\n\t\t// PUT not allowed\n\t\tthis.mockMvc.perform(MockMvcRequestBuilders.put(EIREPORT_ENDPOINT).with(VTN_SECURITY_SESSION))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.METHOD_NOT_ALLOWED_405));\n\n\t\t// DELETE not allowed\n\t\tthis.mockMvc.perform(MockMvcRequestBuilders.delete(EIREPORT_ENDPOINT).with(VTN_SECURITY_SESSION))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.METHOD_NOT_ALLOWED_405));\n\n\t\t// POST without content\n\t\tString content = \"\";\n\t\tthis.mockMvc.perform(MockMvcRequestBuilders.post(EIREPORT_ENDPOINT).with(VTN_SECURITY_SESSION).content(content))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.BAD_REQUEST_400));\n\n\t\t// POST without content\n\t\tcontent = \"mouaiccool\";\n\t\tthis.mockMvc.perform(MockMvcRequestBuilders.post(EIREPORT_ENDPOINT).with(VTN_SECURITY_SESSION).content(content))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.NOT_ACCEPTABLE_406));\n\t}", "signature": "void requestTest()", "full_signature": "@Test public void requestTest()", "class_method_signature": "Oadr20bVENEiReportControllerTest.requestTest()", "testcase": true, "constructor": false, "invocations": ["andExpect", "perform", "with", "get", "is", "status", "andExpect", "perform", "with", "put", "is", "status", "andExpect", "perform", "with", "delete", "is", "status", "andExpect", "perform", "content", "with", "post", "is", "status", "andExpect", "perform", "content", "with", "post", "is", "status"]}, "focal_class": {"identifier": "Oadr20bVENEiReportController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Resource\n\tprivate Oadr20bVENEiReportService reportService;", "modifier": "@Resource\n\tprivate", "type": "Oadr20bVENEiReportService", "declarator": "reportService", "var_name": "reportService"}], "methods": [{"identifier": "request", "parameters": "(@RequestBody String payload, Principal principal)", "modifiers": "@RequestMapping(value = Oadr20bUrlPath.EI_REPORT_SERVICE, method = RequestMethod.POST) @ResponseBody public", "return": "String", "signature": "String request(@RequestBody String payload, Principal principal)", "full_signature": "@RequestMapping(value = Oadr20bUrlPath.EI_REPORT_SERVICE, method = RequestMethod.POST) @ResponseBody public String request(@RequestBody String payload, Principal principal)", "class_method_signature": "Oadr20bVENEiReportController.request(@RequestBody String payload, Principal principal)", "testcase": false, "constructor": false}], "file": "OpenADRServerVEN20b/src/main/java/com/avob/openadr/server/oadr20b/ven/controller/Oadr20bVENEiReportController.java"}, "focal_method": {"identifier": "request", "parameters": "(@RequestBody String payload, Principal principal)", "modifiers": "@RequestMapping(value = Oadr20bUrlPath.EI_REPORT_SERVICE, method = RequestMethod.POST) @ResponseBody public", "return": "String", "body": "@RequestMapping(value = Oadr20bUrlPath.EI_REPORT_SERVICE, method = RequestMethod.POST)\n\t@ResponseBody\n\tpublic String request(@RequestBody String payload, Principal principal)\n\t\t\tthrows Oadr20bMarshalException, Oadr20bUnmarshalException, Oadr20bApplicationLayerException,\n\t\t\tOadr20bXMLSignatureValidationException, Oadr20bXMLSignatureException, OadrSecurityException {\n\n\t\treturn reportService.request(principal.getName(), payload);\n\t}", "signature": "String request(@RequestBody String payload, Principal principal)", "full_signature": "@RequestMapping(value = Oadr20bUrlPath.EI_REPORT_SERVICE, method = RequestMethod.POST) @ResponseBody public String request(@RequestBody String payload, Principal principal)", "class_method_signature": "Oadr20bVENEiReportController.request(@RequestBody String payload, Principal principal)", "testcase": false, "constructor": false, "invocations": ["request", "getName"]}, "repository": {"repo_id": 169761438, "url": "https://github.com/avob/OpenADR", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 55915, "license": "licensed"}}