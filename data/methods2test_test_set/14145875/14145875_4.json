{"test_class": {"identifier": "BaragonRequestWorkerTest", "superclass": "extends BaragonServiceTestBase", "interfaces": "", "fields": [{"original_string": "private static final String TEST_LB_GROUP = \"test\";", "modifier": "private static final", "type": "String", "declarator": "TEST_LB_GROUP = \"test\"", "var_name": "TEST_LB_GROUP"}, {"original_string": "@Inject\n  RequestManager requestManager;", "modifier": "@Inject", "type": "RequestManager", "declarator": "requestManager", "var_name": "requestManager"}, {"original_string": "@Inject\n  BaragonRequestWorker requestWorker;", "modifier": "@Inject", "type": "BaragonRequestWorker", "declarator": "requestWorker", "var_name": "requestWorker"}], "file": "BaragonService/src/test/java/com/hubspot/baragon/service/worker/BaragonRequestWorkerTest.java"}, "test_case": {"identifier": "testQueuedRequestComparator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testQueuedRequestComparator() {\n    List<QueuedRequestWithState> queuedRequestsWithState = Arrays.asList(\n        new QueuedRequestWithState(\n            new QueuedRequestId(\"serviceA\", \"requestIdA\", 0),\n            new BaragonRequestBuilder().setLoadBalancerRequestId(\"requestIdA\")\n                .setLoadBalancerService(null)\n                .setAddUpstreams(Collections.singletonList(new UpstreamInfo(null, Optional.absent(), Optional.absent())))\n                .setRemoveUpstreams(Collections.singletonList(new UpstreamInfo(null, Optional.absent(), Optional.absent())))\n                .setReplaceUpstreams(Collections.emptyList())\n                .setAction(Optional.absent())\n                .setNoValidate(false)\n                .setNoReload(false)\n                .setUpstreamUpdateOnly(false)\n                .setNoDuplicateUpstreams(false)\n                .build(),\n            null\n        ),\n        new QueuedRequestWithState(\n            new QueuedRequestId(\"serviceB\", \"requestIdB\", 0),\n            new BaragonRequestBuilder().setLoadBalancerRequestId(\"requestIdB\")\n                .setLoadBalancerService(null)\n                .setAddUpstreams(Collections.singletonList(new UpstreamInfo(null, Optional.absent(), Optional.absent())))\n                .setRemoveUpstreams(Collections.singletonList(new UpstreamInfo(null, Optional.absent(), Optional.absent())))\n                .setReplaceUpstreams(Collections.emptyList())\n                .setAction(Optional.absent())\n                .setNoValidate(true)\n                .setNoReload(true)\n                .setUpstreamUpdateOnly(false)\n                .setNoDuplicateUpstreams(false)\n                .build(),\n            null\n        ),\n        new QueuedRequestWithState(\n            new QueuedRequestId(\"serviceC\", \"requestIdC\", 0),\n            new BaragonRequestBuilder().setLoadBalancerRequestId(\"requestIdC\")\n                .setLoadBalancerService(null)\n                .setAddUpstreams(Collections.singletonList(new UpstreamInfo(null, Optional.absent(), Optional.absent())))\n                .setRemoveUpstreams(Collections.singletonList(new UpstreamInfo(null, Optional.absent(), Optional.absent())))\n                .setReplaceUpstreams(Collections.emptyList())\n                .setAction(Optional.absent())\n                .setNoValidate(true)\n                .setNoReload(false)\n                .setUpstreamUpdateOnly(false)\n                .setNoDuplicateUpstreams(false)\n                .build(),\n            null\n        ),\n        new QueuedRequestWithState(\n            new QueuedRequestId(\"serviceC\", \"requestIdC\", 0),\n            new BaragonRequestBuilder().setLoadBalancerRequestId(\"requestIdC\")\n                .setLoadBalancerService(null)\n                .setAddUpstreams(Collections.singletonList(new UpstreamInfo(null, Optional.absent(), Optional.absent())))\n                .setRemoveUpstreams(Collections.singletonList(new UpstreamInfo(null, Optional.absent(), Optional.absent())))\n                .setReplaceUpstreams(Collections.emptyList())\n                .setAction(Optional.absent())\n                .setNoValidate(false)\n                .setNoReload(true)\n                .setUpstreamUpdateOnly(false)\n                .setNoDuplicateUpstreams(false)\n                .build(),\n            null\n        )\n    );\n\n    List<QueuedRequestWithState> sortedQueuedRequestsWithState = new ArrayList<>(queuedRequestsWithState);\n    sortedQueuedRequestsWithState.sort(BaragonRequestWorker.queuedRequestComparator());\n\n    assertEquals(queuedRequestsWithState.get(1), sortedQueuedRequestsWithState.get(0));\n    assertEquals(queuedRequestsWithState.get(0), sortedQueuedRequestsWithState.get(3));\n  }", "signature": "void testQueuedRequestComparator()", "full_signature": "@Test public void testQueuedRequestComparator()", "class_method_signature": "BaragonRequestWorkerTest.testQueuedRequestComparator()", "testcase": true, "constructor": false, "invocations": ["asList", "build", "setNoDuplicateUpstreams", "setUpstreamUpdateOnly", "setNoReload", "setNoValidate", "setAction", "setReplaceUpstreams", "setRemoveUpstreams", "setAddUpstreams", "setLoadBalancerService", "setLoadBalancerRequestId", "singletonList", "absent", "absent", "singletonList", "absent", "absent", "emptyList", "absent", "build", "setNoDuplicateUpstreams", "setUpstreamUpdateOnly", "setNoReload", "setNoValidate", "setAction", "setReplaceUpstreams", "setRemoveUpstreams", "setAddUpstreams", "setLoadBalancerService", "setLoadBalancerRequestId", "singletonList", "absent", "absent", "singletonList", "absent", "absent", "emptyList", "absent", "build", "setNoDuplicateUpstreams", "setUpstreamUpdateOnly", "setNoReload", "setNoValidate", "setAction", "setReplaceUpstreams", "setRemoveUpstreams", "setAddUpstreams", "setLoadBalancerService", "setLoadBalancerRequestId", "singletonList", "absent", "absent", "singletonList", "absent", "absent", "emptyList", "absent", "build", "setNoDuplicateUpstreams", "setUpstreamUpdateOnly", "setNoReload", "setNoValidate", "setAction", "setReplaceUpstreams", "setRemoveUpstreams", "setAddUpstreams", "setLoadBalancerService", "setLoadBalancerRequestId", "singletonList", "absent", "absent", "singletonList", "absent", "absent", "emptyList", "absent", "sort", "queuedRequestComparator", "assertEquals", "get", "get", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "BaragonRequestWorker", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(BaragonRequestWorker.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BaragonRequestWorker.class)", "var_name": "LOG"}, {"original_string": "private final AgentManager agentManager;", "modifier": "private final", "type": "AgentManager", "declarator": "agentManager", "var_name": "agentManager"}, {"original_string": "private final RequestManager requestManager;", "modifier": "private final", "type": "RequestManager", "declarator": "requestManager", "var_name": "requestManager"}, {"original_string": "private final BaragonStateDatastore stateDatastore;", "modifier": "private final", "type": "BaragonStateDatastore", "declarator": "stateDatastore", "var_name": "stateDatastore"}, {"original_string": "private final AtomicLong workerLastStartAt;", "modifier": "private final", "type": "AtomicLong", "declarator": "workerLastStartAt", "var_name": "workerLastStartAt"}, {"original_string": "private final BaragonExceptionNotifier exceptionNotifier;", "modifier": "private final", "type": "BaragonExceptionNotifier", "declarator": "exceptionNotifier", "var_name": "exceptionNotifier"}, {"original_string": "private final BaragonConfiguration configuration;", "modifier": "private final", "type": "BaragonConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final EdgeCache edgeCache;", "modifier": "private final", "type": "EdgeCache", "declarator": "edgeCache", "var_name": "edgeCache"}, {"original_string": "private final UpstreamResolver resolver;", "modifier": "private final", "type": "UpstreamResolver", "declarator": "resolver", "var_name": "resolver"}], "methods": [{"identifier": "BaragonRequestWorker", "parameters": "(AgentManager agentManager,\n                              RequestManager requestManager,\n                              BaragonStateDatastore stateDatastore,\n                              BaragonExceptionNotifier exceptionNotifier,\n                              BaragonConfiguration configuration,\n                              EdgeCache edgeCache,\n                              UpstreamResolver resolver,\n                              @Named(BaragonDataModule.BARAGON_SERVICE_WORKER_LAST_START) AtomicLong workerLastStartAt)", "modifiers": "@Inject public", "return": "", "signature": " BaragonRequestWorker(AgentManager agentManager,\n                              RequestManager requestManager,\n                              BaragonStateDatastore stateDatastore,\n                              BaragonExceptionNotifier exceptionNotifier,\n                              BaragonConfiguration configuration,\n                              EdgeCache edgeCache,\n                              UpstreamResolver resolver,\n                              @Named(BaragonDataModule.BARAGON_SERVICE_WORKER_LAST_START) AtomicLong workerLastStartAt)", "full_signature": "@Inject public  BaragonRequestWorker(AgentManager agentManager,\n                              RequestManager requestManager,\n                              BaragonStateDatastore stateDatastore,\n                              BaragonExceptionNotifier exceptionNotifier,\n                              BaragonConfiguration configuration,\n                              EdgeCache edgeCache,\n                              UpstreamResolver resolver,\n                              @Named(BaragonDataModule.BARAGON_SERVICE_WORKER_LAST_START) AtomicLong workerLastStartAt)", "class_method_signature": "BaragonRequestWorker.BaragonRequestWorker(AgentManager agentManager,\n                              RequestManager requestManager,\n                              BaragonStateDatastore stateDatastore,\n                              BaragonExceptionNotifier exceptionNotifier,\n                              BaragonConfiguration configuration,\n                              EdgeCache edgeCache,\n                              UpstreamResolver resolver,\n                              @Named(BaragonDataModule.BARAGON_SERVICE_WORKER_LAST_START) AtomicLong workerLastStartAt)", "testcase": false, "constructor": true}, {"identifier": "buildResponseString", "parameters": "(Map<String, Collection<AgentResponse>> agentResponses, AgentRequestType requestType)", "modifiers": "private", "return": "String", "signature": "String buildResponseString(Map<String, Collection<AgentResponse>> agentResponses, AgentRequestType requestType)", "full_signature": "private String buildResponseString(Map<String, Collection<AgentResponse>> agentResponses, AgentRequestType requestType)", "class_method_signature": "BaragonRequestWorker.buildResponseString(Map<String, Collection<AgentResponse>> agentResponses, AgentRequestType requestType)", "testcase": false, "constructor": false}, {"identifier": "handleCheckRevertResponse", "parameters": "(BaragonRequest request, InternalRequestStates currentState)", "modifiers": "private", "return": "InternalRequestStates", "signature": "InternalRequestStates handleCheckRevertResponse(BaragonRequest request, InternalRequestStates currentState)", "full_signature": "private InternalRequestStates handleCheckRevertResponse(BaragonRequest request, InternalRequestStates currentState)", "class_method_signature": "BaragonRequestWorker.handleCheckRevertResponse(BaragonRequest request, InternalRequestStates currentState)", "testcase": false, "constructor": false}, {"identifier": "handleState", "parameters": "(InternalRequestStates currentState, BaragonRequest request)", "modifiers": "private", "return": "InternalRequestStates", "signature": "InternalRequestStates handleState(InternalRequestStates currentState, BaragonRequest request)", "full_signature": "private InternalRequestStates handleState(InternalRequestStates currentState, BaragonRequest request)", "class_method_signature": "BaragonRequestWorker.handleState(InternalRequestStates currentState, BaragonRequest request)", "testcase": false, "constructor": false}, {"identifier": "performPostApplySteps", "parameters": "(BaragonRequest request)", "modifiers": "private", "return": "boolean", "signature": "boolean performPostApplySteps(BaragonRequest request)", "full_signature": "private boolean performPostApplySteps(BaragonRequest request)", "class_method_signature": "BaragonRequestWorker.performPostApplySteps(BaragonRequest request)", "testcase": false, "constructor": false}, {"identifier": "getDomainsNotServed", "parameters": "(BaragonService service)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getDomainsNotServed(BaragonService service)", "full_signature": "private List<String> getDomainsNotServed(BaragonService service)", "class_method_signature": "BaragonRequestWorker.getDomainsNotServed(BaragonService service)", "testcase": false, "constructor": false}, {"identifier": "getBasePathConflictMessage", "parameters": "(Map<String, String> conflicts)", "modifiers": "private", "return": "String", "signature": "String getBasePathConflictMessage(Map<String, String> conflicts)", "full_signature": "private String getBasePathConflictMessage(Map<String, String> conflicts)", "class_method_signature": "BaragonRequestWorker.getBasePathConflictMessage(Map<String, String> conflicts)", "testcase": false, "constructor": false}, {"identifier": "handleQueuedRequests", "parameters": "(List<QueuedRequestWithState> queuedRequestsWithState)", "modifiers": "private", "return": "Map<QueuedRequestWithState, InternalRequestStates>", "signature": "Map<QueuedRequestWithState, InternalRequestStates> handleQueuedRequests(List<QueuedRequestWithState> queuedRequestsWithState)", "full_signature": "private Map<QueuedRequestWithState, InternalRequestStates> handleQueuedRequests(List<QueuedRequestWithState> queuedRequestsWithState)", "class_method_signature": "BaragonRequestWorker.handleQueuedRequests(List<QueuedRequestWithState> queuedRequestsWithState)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "BaragonRequestWorker.run()", "testcase": false, "constructor": false}, {"identifier": "hasInProgressAttempt", "parameters": "(QueuedRequestWithState queuedRequestWithState)", "modifiers": "private", "return": "boolean", "signature": "boolean hasInProgressAttempt(QueuedRequestWithState queuedRequestWithState)", "full_signature": "private boolean hasInProgressAttempt(QueuedRequestWithState queuedRequestWithState)", "class_method_signature": "BaragonRequestWorker.hasInProgressAttempt(QueuedRequestWithState queuedRequestWithState)", "testcase": false, "constructor": false}, {"identifier": "saveAdjustedRequest", "parameters": "(MaybeAdjustedRequest maybeAdjustedRequest)", "modifiers": "private", "return": "QueuedRequestWithState", "signature": "QueuedRequestWithState saveAdjustedRequest(MaybeAdjustedRequest maybeAdjustedRequest)", "full_signature": "private QueuedRequestWithState saveAdjustedRequest(MaybeAdjustedRequest maybeAdjustedRequest)", "class_method_signature": "BaragonRequestWorker.saveAdjustedRequest(MaybeAdjustedRequest maybeAdjustedRequest)", "testcase": false, "constructor": false}, {"identifier": "setNoValidateIfRequestRemovesUpstreamsOnly", "parameters": "(MaybeAdjustedRequest nonServiceChangeRequest)", "modifiers": "private", "return": "MaybeAdjustedRequest", "signature": "MaybeAdjustedRequest setNoValidateIfRequestRemovesUpstreamsOnly(MaybeAdjustedRequest nonServiceChangeRequest)", "full_signature": "private MaybeAdjustedRequest setNoValidateIfRequestRemovesUpstreamsOnly(MaybeAdjustedRequest nonServiceChangeRequest)", "class_method_signature": "BaragonRequestWorker.setNoValidateIfRequestRemovesUpstreamsOnly(MaybeAdjustedRequest nonServiceChangeRequest)", "testcase": false, "constructor": false}, {"identifier": "preResolveDNS", "parameters": "(MaybeAdjustedRequest nonServiceChangeRequest)", "modifiers": "private", "return": "MaybeAdjustedRequest", "signature": "MaybeAdjustedRequest preResolveDNS(MaybeAdjustedRequest nonServiceChangeRequest)", "full_signature": "private MaybeAdjustedRequest preResolveDNS(MaybeAdjustedRequest nonServiceChangeRequest)", "class_method_signature": "BaragonRequestWorker.preResolveDNS(MaybeAdjustedRequest nonServiceChangeRequest)", "testcase": false, "constructor": false}, {"identifier": "allUpstreamsAreResolved", "parameters": "(Collection<UpstreamInfo> upstreams)", "modifiers": "private", "return": "boolean", "signature": "boolean allUpstreamsAreResolved(Collection<UpstreamInfo> upstreams)", "full_signature": "private boolean allUpstreamsAreResolved(Collection<UpstreamInfo> upstreams)", "class_method_signature": "BaragonRequestWorker.allUpstreamsAreResolved(Collection<UpstreamInfo> upstreams)", "testcase": false, "constructor": false}, {"identifier": "resolveDNSForAllUpstreams", "parameters": "(Collection<UpstreamInfo> upstreams)", "modifiers": "private", "return": "List<UpstreamInfo>", "signature": "List<UpstreamInfo> resolveDNSForAllUpstreams(Collection<UpstreamInfo> upstreams)", "full_signature": "private List<UpstreamInfo> resolveDNSForAllUpstreams(Collection<UpstreamInfo> upstreams)", "class_method_signature": "BaragonRequestWorker.resolveDNSForAllUpstreams(Collection<UpstreamInfo> upstreams)", "testcase": false, "constructor": false}, {"identifier": "handleResultStates", "parameters": "(Map<QueuedRequestWithState, InternalRequestStates> results)", "modifiers": "private", "return": "void", "signature": "void handleResultStates(Map<QueuedRequestWithState, InternalRequestStates> results)", "full_signature": "private void handleResultStates(Map<QueuedRequestWithState, InternalRequestStates> results)", "class_method_signature": "BaragonRequestWorker.handleResultStates(Map<QueuedRequestWithState, InternalRequestStates> results)", "testcase": false, "constructor": false}, {"identifier": "collectRequests", "parameters": "(int previouslyAdded,\n                              List<QueuedRequestWithState> queuedRequests,\n                              ArrayList<QueuedRequestWithState> nonServiceChanges,\n                              ArrayList<QueuedRequestWithState> serviceChanges)", "modifiers": "private", "return": "void", "signature": "void collectRequests(int previouslyAdded,\n                              List<QueuedRequestWithState> queuedRequests,\n                              ArrayList<QueuedRequestWithState> nonServiceChanges,\n                              ArrayList<QueuedRequestWithState> serviceChanges)", "full_signature": "private void collectRequests(int previouslyAdded,\n                              List<QueuedRequestWithState> queuedRequests,\n                              ArrayList<QueuedRequestWithState> nonServiceChanges,\n                              ArrayList<QueuedRequestWithState> serviceChanges)", "class_method_signature": "BaragonRequestWorker.collectRequests(int previouslyAdded,\n                              List<QueuedRequestWithState> queuedRequests,\n                              ArrayList<QueuedRequestWithState> nonServiceChanges,\n                              ArrayList<QueuedRequestWithState> serviceChanges)", "testcase": false, "constructor": false}, {"identifier": "isBatchBoundary", "parameters": "(BaragonRequest baragonRequest)", "modifiers": "private", "return": "boolean", "signature": "boolean isBatchBoundary(BaragonRequest baragonRequest)", "full_signature": "private boolean isBatchBoundary(BaragonRequest baragonRequest)", "class_method_signature": "BaragonRequestWorker.isBatchBoundary(BaragonRequest baragonRequest)", "testcase": false, "constructor": false}, {"identifier": "hydrateQueuedRequestWithState", "parameters": "(QueuedRequestId queuedRequestId)", "modifiers": "private", "return": "Optional<QueuedRequestWithState>", "signature": "Optional<QueuedRequestWithState> hydrateQueuedRequestWithState(QueuedRequestId queuedRequestId)", "full_signature": "private Optional<QueuedRequestWithState> hydrateQueuedRequestWithState(QueuedRequestId queuedRequestId)", "class_method_signature": "BaragonRequestWorker.hydrateQueuedRequestWithState(QueuedRequestId queuedRequestId)", "testcase": false, "constructor": false}, {"identifier": "queuedRequestComparator", "parameters": "()", "modifiers": "@VisibleForTesting static", "return": "Comparator<QueuedRequestWithState>", "signature": "Comparator<QueuedRequestWithState> queuedRequestComparator()", "full_signature": "@VisibleForTesting static Comparator<QueuedRequestWithState> queuedRequestComparator()", "class_method_signature": "BaragonRequestWorker.queuedRequestComparator()", "testcase": false, "constructor": false}], "file": "BaragonService/src/main/java/com/hubspot/baragon/service/worker/BaragonRequestWorker.java"}, "focal_method": {"identifier": "queuedRequestComparator", "parameters": "()", "modifiers": "@VisibleForTesting static", "return": "Comparator<QueuedRequestWithState>", "body": "@VisibleForTesting\n  static Comparator<QueuedRequestWithState> queuedRequestComparator() {\n    return (requestA, requestB) -> {\n      // noValidate & noReload comes first\n      if ((requestA.getRequest().isNoValidate() && requestA.getRequest().isNoReload()) && (!requestB.getRequest().isNoReload() || !requestB.getRequest().isNoValidate())) {\n        return -1;\n      }\n\n      if ((requestB.getRequest().isNoValidate() && requestB.getRequest().isNoReload()) && (!requestA.getRequest().isNoReload() || !requestA.getRequest().isNoValidate())) {\n        return 1;\n      }\n\n      // Then noValidate *or* noReload\n      if ((requestA.getRequest().isNoValidate() || requestA.getRequest().isNoReload()) && (!requestB.getRequest().isNoReload() && !requestB.getRequest().isNoValidate())) {\n        return -1;\n      }\n\n      if ((requestB.getRequest().isNoValidate() || requestB.getRequest().isNoReload()) && (!requestA.getRequest().isNoReload() && !requestA.getRequest().isNoValidate())) {\n        return 1;\n      }\n\n      // Then everything else, oldest first\n      return Integer.compare(requestA.getQueuedRequestId().getIndex(), requestB.getQueuedRequestId().getIndex());\n    };\n  }", "signature": "Comparator<QueuedRequestWithState> queuedRequestComparator()", "full_signature": "@VisibleForTesting static Comparator<QueuedRequestWithState> queuedRequestComparator()", "class_method_signature": "BaragonRequestWorker.queuedRequestComparator()", "testcase": false, "constructor": false, "invocations": ["isNoValidate", "getRequest", "isNoReload", "getRequest", "isNoReload", "getRequest", "isNoValidate", "getRequest", "isNoValidate", "getRequest", "isNoReload", "getRequest", "isNoReload", "getRequest", "isNoValidate", "getRequest", "isNoValidate", "getRequest", "isNoReload", "getRequest", "isNoReload", "getRequest", "isNoValidate", "getRequest", "isNoValidate", "getRequest", "isNoReload", "getRequest", "isNoReload", "getRequest", "isNoValidate", "getRequest", "compare", "getIndex", "getQueuedRequestId", "getIndex", "getQueuedRequestId"]}, "repository": {"repo_id": 14145875, "url": "https://github.com/HubSpot/Baragon", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 101, "size": 9251, "license": "licensed"}}