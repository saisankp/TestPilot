{"test_class": {"identifier": "AddVisitTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ScoreDirector<VehicleRoutingSolution> scoreDirector;", "modifier": "@Mock\n    private", "type": "ScoreDirector<VehicleRoutingSolution>", "declarator": "scoreDirector", "var_name": "scoreDirector"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/planner/change/AddVisitTest.java"}, "test_case": {"identifier": "add_visit_should_add_location_and_create_visit", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void add_visit_should_add_location_and_create_visit() {\n        VehicleRoutingSolution solution = SolutionFactory.emptySolution();\n        when(scoreDirector.getWorkingSolution()).thenReturn(solution);\n\n        PlanningVisit visit = PlanningVisitFactory.testVisit(1);\n        AddVisit addVisit = new AddVisit(visit);\n        addVisit.doChange(scoreDirector);\n\n        verify(scoreDirector).beforeEntityAdded(visit);\n        verify(scoreDirector).afterEntityAdded(visit);\n        assertThat(solution.getVisitList()).containsExactly(visit);\n\n        verify(scoreDirector).triggerVariableListeners();\n    }", "signature": "void add_visit_should_add_location_and_create_visit()", "full_signature": "@Test void add_visit_should_add_location_and_create_visit()", "class_method_signature": "AddVisitTest.add_visit_should_add_location_and_create_visit()", "testcase": true, "constructor": false, "invocations": ["emptySolution", "thenReturn", "when", "getWorkingSolution", "testVisit", "doChange", "beforeEntityAdded", "verify", "afterEntityAdded", "verify", "containsExactly", "assertThat", "getVisitList", "triggerVariableListeners", "verify"]}, "focal_class": {"identifier": "AddVisit", "superclass": "", "interfaces": "implements ProblemFactChange<VehicleRoutingSolution>", "fields": [{"original_string": "private final PlanningVisit visit;", "modifier": "private final", "type": "PlanningVisit", "declarator": "visit", "var_name": "visit"}], "methods": [{"identifier": "AddVisit", "parameters": "(PlanningVisit visit)", "modifiers": "public", "return": "", "signature": " AddVisit(PlanningVisit visit)", "full_signature": "public  AddVisit(PlanningVisit visit)", "class_method_signature": "AddVisit.AddVisit(PlanningVisit visit)", "testcase": false, "constructor": true}, {"identifier": "doChange", "parameters": "(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "modifiers": "@Override public", "return": "void", "signature": "void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "full_signature": "@Override public void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "class_method_signature": "AddVisit.doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/change/AddVisit.java"}, "focal_method": {"identifier": "doChange", "parameters": "(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector) {\n        scoreDirector.beforeEntityAdded(visit);\n        scoreDirector.getWorkingSolution().getVisitList().add(visit);\n        scoreDirector.afterEntityAdded(visit);\n\n        scoreDirector.triggerVariableListeners();\n    }", "signature": "void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "full_signature": "@Override public void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "class_method_signature": "AddVisit.doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "testcase": false, "constructor": false, "invocations": ["beforeEntityAdded", "add", "getVisitList", "getWorkingSolution", "afterEntityAdded", "triggerVariableListeners"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}