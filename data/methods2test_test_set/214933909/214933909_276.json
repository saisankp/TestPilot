{"test_class": {"identifier": "DatabaseSetControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@MockBean\n    private UserLoginInterceptor userLoginInterceptor;", "modifier": "@MockBean\n    private", "type": "UserLoginInterceptor", "declarator": "userLoginInterceptor", "var_name": "userLoginInterceptor"}, {"original_string": "@MockBean\n    private CommStatusInterceptor commStatusInterceptor;", "modifier": "@MockBean\n    private", "type": "CommStatusInterceptor", "declarator": "commStatusInterceptor", "var_name": "commStatusInterceptor"}, {"original_string": "@MockBean\n    private Message message;", "modifier": "@MockBean\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@MockBean\n    private ProjectDao projectDao;", "modifier": "@MockBean\n    private", "type": "ProjectDao", "declarator": "projectDao", "var_name": "projectDao"}, {"original_string": "@MockBean\n    private GroupDao groupDao;", "modifier": "@MockBean\n    private", "type": "GroupDao", "declarator": "groupDao", "var_name": "groupDao"}, {"original_string": "@MockBean\n    private DatabaseSetService databaseSetService;", "modifier": "@MockBean\n    private", "type": "DatabaseSetService", "declarator": "databaseSetService", "var_name": "databaseSetService"}, {"original_string": "@MockBean\n    private DatabaseSetDao databaseSetDao;", "modifier": "@MockBean\n    private", "type": "DatabaseSetDao", "declarator": "databaseSetDao", "var_name": "databaseSetDao"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/controller/DatabaseSetControllerTest.java"}, "test_case": {"identifier": "sync", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sync() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.post(\"/groupdbset/sync\")\n                .contentType(MediaType.APPLICATION_JSON_UTF8)\n                .param(\"id\", \"1\")\n                .accept(MediaType.APPLICATION_JSON_UTF8))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print());\n    }", "signature": "void sync()", "full_signature": "@Test public void sync()", "class_method_signature": "DatabaseSetControllerTest.sync()", "testcase": true, "constructor": false, "invocations": ["andDo", "andExpect", "perform", "accept", "param", "contentType", "post", "isOk", "status", "print"]}, "focal_class": {"identifier": "DatabaseSetController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Message message;", "modifier": "@Autowired\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private GroupDao groupDao;", "modifier": "@Autowired\n    private", "type": "GroupDao", "declarator": "groupDao", "var_name": "groupDao"}, {"original_string": "@Autowired\n    private PermissionService permissionService;", "modifier": "@Autowired\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "@Autowired\n    private DatabaseSetService databaseSetService;", "modifier": "@Autowired\n    private", "type": "DatabaseSetService", "declarator": "databaseSetService", "var_name": "databaseSetService"}, {"original_string": "@Autowired\n    private DatabaseSetDao databaseSetDao;", "modifier": "@Autowired\n    private", "type": "DatabaseSetDao", "declarator": "databaseSetDao", "var_name": "databaseSetDao"}], "methods": [{"identifier": "lists", "parameters": "(@PathVariable(\"groupId\") Long groupId)", "modifiers": "@RequestMapping(value = \"{groupId}/list\") public", "return": "ServiceResult<List<DatabaseSet>>", "signature": "ServiceResult<List<DatabaseSet>> lists(@PathVariable(\"groupId\") Long groupId)", "full_signature": "@RequestMapping(value = \"{groupId}/list\") public ServiceResult<List<DatabaseSet>> lists(@PathVariable(\"groupId\") Long groupId)", "class_method_signature": "DatabaseSetController.lists(@PathVariable(\"groupId\") Long groupId)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(@RequestParam(value = \"projectId\") Long projectId)", "modifiers": "@RequestMapping(value = \"/list\") public", "return": "ServiceResult<List<DatabaseSetView>>", "signature": "ServiceResult<List<DatabaseSetView>> list(@RequestParam(value = \"projectId\") Long projectId)", "full_signature": "@RequestMapping(value = \"/list\") public ServiceResult<List<DatabaseSetView>> list(@RequestParam(value = \"projectId\") Long projectId)", "class_method_signature": "DatabaseSetController.list(@RequestParam(value = \"projectId\") Long projectId)", "testcase": false, "constructor": false}, {"identifier": "loadPageList", "parameters": "(@RequestBody Paging<DatabaseSet> paging, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public", "return": "ServiceResult<ListResult<DatabaseSetView>>", "signature": "ServiceResult<ListResult<DatabaseSetView>> loadPageList(@RequestBody Paging<DatabaseSet> paging, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public ServiceResult<ListResult<DatabaseSetView>> loadPageList(@RequestBody Paging<DatabaseSet> paging, @CurrentUser LoginUser user)", "class_method_signature": "DatabaseSetController.loadPageList(@RequestBody Paging<DatabaseSet> paging, @CurrentUser LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@Validated(AddDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> add(@Validated(AddDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public ServiceResult<String> add(@Validated(AddDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseSetController.add(@Validated(AddDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@Validated(UpdateDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> update(@Validated(UpdateDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public ServiceResult<String> update(@Validated(UpdateDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseSetController.update(@Validated(UpdateDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@Validated(DeleteDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> delete(@Validated(DeleteDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public ServiceResult<String> delete(@Validated(DeleteDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseSetController.delete(@Validated(DeleteDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "sync", "parameters": "(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/sync\") public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/sync\") public ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "class_method_signature": "DatabaseSetController.sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(@CurrentUser LoginUser user, @RequestParam(\"id\") Long id)", "modifiers": "@RequestMapping(value = \"/check\") public", "return": "ConfigCkeckResult", "signature": "ConfigCkeckResult check(@CurrentUser LoginUser user, @RequestParam(\"id\") Long id)", "full_signature": "@RequestMapping(value = \"/check\") public ConfigCkeckResult check(@CurrentUser LoginUser user, @RequestParam(\"id\") Long id)", "class_method_signature": "DatabaseSetController.check(@CurrentUser LoginUser user, @RequestParam(\"id\") Long id)", "testcase": false, "constructor": false}, {"identifier": "groupCheck", "parameters": "(@CurrentUser LoginUser user, @RequestParam(\"gourpId\") Long gourpId)", "modifiers": "@RequestMapping(value = \"/groupCheck\") public", "return": "ConfigCkeckResult<ConfigCheckItem>", "signature": "ConfigCkeckResult<ConfigCheckItem> groupCheck(@CurrentUser LoginUser user, @RequestParam(\"gourpId\") Long gourpId)", "full_signature": "@RequestMapping(value = \"/groupCheck\") public ConfigCkeckResult<ConfigCheckItem> groupCheck(@CurrentUser LoginUser user, @RequestParam(\"gourpId\") Long gourpId)", "class_method_signature": "DatabaseSetController.groupCheck(@CurrentUser LoginUser user, @RequestParam(\"gourpId\") Long gourpId)", "testcase": false, "constructor": false}, {"identifier": "getdbsetnames", "parameters": "(@RequestParam(\"projectId\") Long projectId)", "modifiers": "@RequestMapping(value = \"/getdbsetnames\") public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> getdbsetnames(@RequestParam(\"projectId\") Long projectId)", "full_signature": "@RequestMapping(value = \"/getdbsetnames\") public ServiceResult<String> getdbsetnames(@RequestParam(\"projectId\") Long projectId)", "class_method_signature": "DatabaseSetController.getdbsetnames(@RequestParam(\"projectId\") Long projectId)", "testcase": false, "constructor": false}, {"identifier": "syncdb", "parameters": "(@Validated(AddDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/syncdb\") public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> syncdb(@Validated(AddDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/syncdb\") public ServiceResult<String> syncdb(@Validated(AddDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseSetController.syncdb(@Validated(AddDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "addDbSet", "parameters": "(@Validated(AddDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "modifiers": "private", "return": "ServiceResult<String>", "signature": "ServiceResult<String> addDbSet(@Validated(AddDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "full_signature": "private ServiceResult<String> addDbSet(@Validated(AddDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseSetController.addDbSet(@Validated(AddDbSet.class) @RequestBody DatabaseSet dbset, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "getDbSetButton", "parameters": "(@CurrentUser LoginUser user)", "modifiers": "@RequestMapping(\"/buttons\") public", "return": "ServiceResult", "signature": "ServiceResult getDbSetButton(@CurrentUser LoginUser user)", "full_signature": "@RequestMapping(\"/buttons\") public ServiceResult getDbSetButton(@CurrentUser LoginUser user)", "class_method_signature": "DatabaseSetController.getDbSetButton(@CurrentUser LoginUser user)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/controller/DatabaseSetController.java"}, "focal_method": {"identifier": "sync", "parameters": "(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/sync\") public", "return": "ServiceResult<String>", "body": "@RequestMapping(value = \"/sync\")\n    public ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user) throws Exception {\n        DatabaseSet databaseSet = databaseSetDao.getDatabaseSetById(id);\n        return databaseSetService.syncDbSet(user, databaseSet);\n    }", "signature": "ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/sync\") public ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "class_method_signature": "DatabaseSetController.sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "testcase": false, "constructor": false, "invocations": ["getDatabaseSetById", "syncDbSet"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}