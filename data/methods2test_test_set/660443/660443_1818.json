{"test_class": {"identifier": "StabilizationPlusChargeDescriptorTest", "superclass": "extends AtomicDescriptorTest", "interfaces": "", "fields": [{"original_string": "private final static IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private final static", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "LonePairElectronChecker                 lpcheck = new LonePairElectronChecker();", "modifier": "", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}], "file": "descriptor/qsaratomic/src/test/java/org/openscience/cdk/qsar/descriptors/atomic/StabilizationPlusChargeDescriptorTest.java"}, "test_case": {"identifier": "testStabilizationPlusChargeDescriptor2", "parameters": "()", "modifiers": "@Test @Category(SlowTest.class) public", "return": "void", "body": "@Test\n    @Category(SlowTest.class)\n    public void testStabilizationPlusChargeDescriptor2() throws Exception {\n\n        IAtomContainer mol = builder.newInstance(IAtomContainer.class);\n        mol.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        mol.getAtom(0).setFormalCharge(-1);\n        mol.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        mol.getAtom(1).setFormalCharge(1);\n        mol.addBond(0, 1, Order.SINGLE);\n        mol.addAtom(builder.newInstance(IAtom.class, \"F\"));\n        mol.addBond(1, 2, Order.SINGLE);\n\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        addExplicitHydrogens(mol);\n        lpcheck.saturate(mol);\n\n        DoubleResult result = ((DoubleResult) descriptor.calculate(mol.getAtom(1), mol).getValue());\n\n        Assert.assertNotSame(0.0, result.doubleValue());\n\n    }", "signature": "void testStabilizationPlusChargeDescriptor2()", "full_signature": "@Test @Category(SlowTest.class) public void testStabilizationPlusChargeDescriptor2()", "class_method_signature": "StabilizationPlusChargeDescriptorTest.testStabilizationPlusChargeDescriptor2()", "testcase": true, "constructor": false, "invocations": ["newInstance", "addAtom", "newInstance", "setFormalCharge", "getAtom", "addAtom", "newInstance", "setFormalCharge", "getAtom", "addBond", "addAtom", "newInstance", "addBond", "percieveAtomTypesAndConfigureAtoms", "addExplicitHydrogens", "saturate", "getValue", "calculate", "getAtom", "assertNotSame", "doubleValue"]}, "focal_class": {"identifier": "StabilizationPlusChargeDescriptor", "superclass": "extends AbstractAtomicDescriptor", "interfaces": "implements IAtomicDescriptor", "fields": [{"original_string": "private static final String[] NAMES = {\"stabilPlusC\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"stabilPlusC\"}", "var_name": "NAMES"}, {"original_string": "private StabilizationCharges stabil;", "modifier": "private", "type": "StabilizationCharges", "declarator": "stabil", "var_name": "stabil"}], "methods": [{"identifier": "StabilizationPlusChargeDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " StabilizationPlusChargeDescriptor()", "full_signature": "public  StabilizationPlusChargeDescriptor()", "class_method_signature": "StabilizationPlusChargeDescriptor.StabilizationPlusChargeDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "StabilizationPlusChargeDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "StabilizationPlusChargeDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "StabilizationPlusChargeDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "StabilizationPlusChargeDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer container)", "class_method_signature": "StabilizationPlusChargeDescriptor.calculate(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "StabilizationPlusChargeDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "StabilizationPlusChargeDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsaratomic/src/main/java/org/openscience/cdk/qsar/descriptors/atomic/StabilizationPlusChargeDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtom atom, IAtomContainer container) {\n\n        IAtomContainer clone;\n        IAtom localAtom;\n        try {\n            clone = (IAtomContainer) container.clone();\n            localAtom = clone.getAtom(container.indexOf(atom));\n            AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(clone);\n        } catch (CDKException e) {\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                    Double.NaN), NAMES, e);\n        } catch (CloneNotSupportedException e) {\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                    Double.NaN), NAMES, e);\n        }\n\n        double result = stabil.calculatePositive(clone, localAtom);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(result),\n                                   NAMES);\n    }", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer container)", "class_method_signature": "StabilizationPlusChargeDescriptor.calculate(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["clone", "getAtom", "indexOf", "percieveAtomTypesAndConfigureAtoms", "getSpecification", "getParameterNames", "getParameters", "getSpecification", "getParameterNames", "getParameters", "calculatePositive", "getSpecification", "getParameterNames", "getParameters"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}