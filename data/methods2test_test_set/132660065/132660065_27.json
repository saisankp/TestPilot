{"test_class": {"identifier": "CertificateManagerConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    DataBroker bindingDataBroker;", "modifier": "@Mock", "type": "DataBroker", "declarator": "bindingDataBroker", "var_name": "bindingDataBroker"}, {"original_string": "@Mock\n    ReadTransaction readTransaction;", "modifier": "@Mock", "type": "ReadTransaction", "declarator": "readTransaction", "var_name": "readTransaction"}], "file": "lighty-modules/lighty-aaa/src/test/java/io/lighty/aaa/config/CertificateManagerConfigTest.java"}, "test_case": {"identifier": "getDefaultTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getDefaultTest() {\n        ICertificateManager certificateManager = CertificateManagerConfig.getDefault(bindingDataBroker);\n\n        Assert.assertNotNull(certificateManager);\n        Assert.assertNotNull(certificateManager.getServerContext());\n        Assert.assertEquals(certificateManager.getServerContext().getProtocol(), \"TLS\");\n        Assert.assertNotNull(certificateManager.getServerContext().getProvider());\n        Assert.assertNotNull(certificateManager.getServerContext().getDefaultSSLParameters());\n    }", "signature": "void getDefaultTest()", "full_signature": "@Test public void getDefaultTest()", "class_method_signature": "CertificateManagerConfigTest.getDefaultTest()", "testcase": true, "constructor": false, "invocations": ["getDefault", "assertNotNull", "assertNotNull", "getServerContext", "assertEquals", "getProtocol", "getServerContext", "assertNotNull", "getProvider", "getServerContext", "assertNotNull", "getDefaultSSLParameters", "getServerContext"]}, "focal_class": {"identifier": "CertificateManagerConfig", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "CertificateManagerConfig", "parameters": "()", "modifiers": "private", "return": "", "signature": " CertificateManagerConfig()", "full_signature": "private  CertificateManagerConfig()", "class_method_signature": "CertificateManagerConfig.CertificateManagerConfig()", "testcase": false, "constructor": true}, {"identifier": "getDefault", "parameters": "(final DataBroker bindingDataBroker)", "modifiers": "public static", "return": "ICertificateManager", "signature": "ICertificateManager getDefault(final DataBroker bindingDataBroker)", "full_signature": "public static ICertificateManager getDefault(final DataBroker bindingDataBroker)", "class_method_signature": "CertificateManagerConfig.getDefault(final DataBroker bindingDataBroker)", "testcase": false, "constructor": false}], "file": "lighty-modules/lighty-aaa/src/main/java/io/lighty/aaa/config/CertificateManagerConfig.java"}, "focal_method": {"identifier": "getDefault", "parameters": "(final DataBroker bindingDataBroker)", "modifiers": "public static", "return": "ICertificateManager", "body": "public static ICertificateManager getDefault(final DataBroker bindingDataBroker) {\n        final List<CipherSuites> cipherSuites = new ArrayList<>();\n        final CtlKeystore ctlKeystore = new CtlKeystoreBuilder()\n                .setName(\"ctl.jks\")\n                .setAlias(\"controller\")\n                .setDname(\"CN=ODL, OU=Dev, O=LinuxFoundation, L=QC Montreal, C=CA\")\n                .setValidity(365)\n                .setKeyAlg(\"RSA\")\n                .setSignAlg(\"SHA1WithRSAEncryption\")\n                .setCipherSuites(cipherSuites)\n                .setStorePassword(\"\")\n                .setKeysize(1024)\n                .build();\n        final TrustKeystore trustKeystore = new TrustKeystoreBuilder()\n                .setName(\"truststore.jks\")\n                .build();\n        final AaaCertServiceConfig aaaCertServiceConfig = new AaaCertServiceConfigBuilder()\n                .setUseConfig(true)\n                .setUseMdsal(true)\n                .setBundleName(\"opendaylight\")\n                .setCtlKeystore(ctlKeystore)\n                .setTrustKeystore(trustKeystore)\n                .build();\n        final AaaEncryptServiceConfig encrySrvConfig = new AaaEncryptServiceConfigBuilder()\n                .setEncryptKey(\"V1S1ED4OMeEh\")\n                .setPasswordLength(12)\n                .setEncryptSalt(\"TdtWeHbch/7xP52/rp3Usw==\")\n                .setEncryptMethod(\"PBKDF2WithHmacSHA1\")\n                .setEncryptType(\"AES\")\n                .setEncryptIterationCount(32768)\n                .setEncryptKeyLength(128)\n                .setCipherTransforms(\"AES/CBC/PKCS5Padding\")\n                .build();\n        final AAAEncryptionService encryptionSrv = new AAAEncryptionServiceImpl(encrySrvConfig, bindingDataBroker);\n\n        return new CertificateManagerService(aaaCertServiceConfig, bindingDataBroker, encryptionSrv);\n    }", "signature": "ICertificateManager getDefault(final DataBroker bindingDataBroker)", "full_signature": "public static ICertificateManager getDefault(final DataBroker bindingDataBroker)", "class_method_signature": "CertificateManagerConfig.getDefault(final DataBroker bindingDataBroker)", "testcase": false, "constructor": false, "invocations": ["build", "setKeysize", "setStorePassword", "setCipherSuites", "setSignAlg", "setKeyAlg", "setValidity", "setDname", "setAlias", "setName", "build", "setName", "build", "setTrustKeystore", "setCtlKeystore", "setBundleName", "setUseMdsal", "setUseConfig", "build", "setCipherTransforms", "setEncryptKeyLength", "setEncryptIterationCount", "setEncryptType", "setEncryptMethod", "setEncryptSalt", "setPasswordLength", "setEncryptKey"]}, "repository": {"repo_id": 132660065, "url": "https://github.com/PantheonTechnologies/lighty-core", "stars": 45, "created": "5/8/2018 8:16:54 PM +00:00", "updates": "2020-01-22T13:46:21+00:00", "fork": "False", "license": "licensed"}}