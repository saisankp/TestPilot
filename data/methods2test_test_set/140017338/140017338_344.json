{"test_class": {"identifier": "HttpHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_CONTENT = \"Content of the test file to be downloaded.\";", "modifier": "private static final", "type": "String", "declarator": "TEST_CONTENT = \"Content of the test file to be downloaded.\"", "var_name": "TEST_CONTENT"}, {"original_string": "private static final String FILE_NAME = \"archive.zip\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NAME = \"archive.zip\"", "var_name": "FILE_NAME"}, {"original_string": "private static final String FILE_PATH = \"/test/downloads\";", "modifier": "private static final", "type": "String", "declarator": "FILE_PATH = \"/test/downloads\"", "var_name": "FILE_PATH"}, {"original_string": "private static final String FILE_REQUEST = FILE_PATH + \"/\" + FILE_NAME;", "modifier": "private static final", "type": "String", "declarator": "FILE_REQUEST = FILE_PATH + \"/\" + FILE_NAME", "var_name": "FILE_REQUEST"}, {"original_string": "@Rule\n    public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "@Rule\n    public WireMockRule wireMockRule = new WireMockRule(options().dynamicPort());", "modifier": "@Rule\n    public", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(options().dynamicPort())", "var_name": "wireMockRule"}, {"original_string": "private HttpHelper httpHelper;", "modifier": "private", "type": "HttpHelper", "declarator": "httpHelper", "var_name": "httpHelper"}], "file": "core/runtime/src/test/java/org/eclipse/sw360/antenna/util/HttpHelperTest.java"}, "test_case": {"identifier": "downloadFileWritesTheFileToDisk", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void downloadFileWritesTheFileToDisk() throws Exception {\n        wireMockRule.stubFor(get(urlPathEqualTo(FILE_REQUEST))\n                .willReturn(aResponse().withStatus(HttpConstants.STATUS_OK)\n                        .withBody(TEST_CONTENT)));\n\n        Path targetDirectory = temporaryFolder.newFolder(\"target\").toPath();\n\n        Path resultFile = httpHelper.downloadFile(wireMockRule.url(FILE_REQUEST), targetDirectory).toPath();\n\n        checkDownloadedFile(targetDirectory, resultFile);\n    }", "signature": "void downloadFileWritesTheFileToDisk()", "full_signature": "@Test public void downloadFileWritesTheFileToDisk()", "class_method_signature": "HttpHelperTest.downloadFileWritesTheFileToDisk()", "testcase": true, "constructor": false, "invocations": ["stubFor", "willReturn", "get", "urlPathEqualTo", "withBody", "withStatus", "aResponse", "toPath", "newFolder", "toPath", "downloadFile", "url", "checkDownloadedFile"]}, "focal_class": {"identifier": "HttpHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HttpHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HttpHelper.class)", "var_name": "LOGGER"}, {"original_string": "private final HttpClient httpClient;", "modifier": "private final", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}], "methods": [{"identifier": "HttpHelper", "parameters": "(HttpClient httpClient)", "modifiers": "public", "return": "", "signature": " HttpHelper(HttpClient httpClient)", "full_signature": "public  HttpHelper(HttpClient httpClient)", "class_method_signature": "HttpHelper.HttpHelper(HttpClient httpClient)", "testcase": false, "constructor": true}, {"identifier": "downloadFile", "parameters": "(String url, Path targetDirectory)", "modifiers": "public", "return": "File", "signature": "File downloadFile(String url, Path targetDirectory)", "full_signature": "public File downloadFile(String url, Path targetDirectory)", "class_method_signature": "HttpHelper.downloadFile(String url, Path targetDirectory)", "testcase": false, "constructor": false}, {"identifier": "downloadFile", "parameters": "(String url, Path targetDirectory, String filename)", "modifiers": "public", "return": "File", "signature": "File downloadFile(String url, Path targetDirectory, String filename)", "full_signature": "public File downloadFile(String url, Path targetDirectory, String filename)", "class_method_signature": "HttpHelper.downloadFile(String url, Path targetDirectory, String filename)", "testcase": false, "constructor": false}], "file": "core/runtime/src/main/java/org/eclipse/sw360/antenna/util/HttpHelper.java"}, "focal_method": {"identifier": "downloadFile", "parameters": "(String url, Path targetDirectory)", "modifiers": "public", "return": "File", "body": "public File downloadFile(String url, Path targetDirectory) throws IOException {\n        String filename = url.substring(url.lastIndexOf(\"/\") + 1);  // We don't want to have the last slash in the name\n        return downloadFile(url, targetDirectory, filename);\n    }", "signature": "File downloadFile(String url, Path targetDirectory)", "full_signature": "public File downloadFile(String url, Path targetDirectory)", "class_method_signature": "HttpHelper.downloadFile(String url, Path targetDirectory)", "testcase": false, "constructor": false, "invocations": ["substring", "lastIndexOf", "downloadFile"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}