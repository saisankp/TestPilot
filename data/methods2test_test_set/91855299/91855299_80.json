{"test_class": {"identifier": "AsyncPropertyTest", "superclass": "extends ApplicationTest", "interfaces": "", "fields": [], "file": "api/src/test/java/edu/wpi/first/shuffleboard/api/properties/AsyncPropertyTest.java"}, "test_case": {"identifier": "removeListenerTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void removeListenerTest() {\n    AsyncProperty<String> asyncProperty = new AsyncProperty<>();\n    CompletableFuture<Boolean> listenerFired = new CompletableFuture<>();\n    ChangeListener<String> listener = (observable, oldValue, newValue) -> listenerFired.complete(true);\n\n    asyncProperty.addListener(listener);\n    asyncProperty.removeListener(listener);\n    asyncProperty.set(\"Value\");\n    WaitForAsyncUtils.waitForFxEvents();\n\n    assertThrows(TimeoutException.class, () -> listenerFired.get(1, TimeUnit.SECONDS));\n  }", "signature": "void removeListenerTest()", "full_signature": "@Test public void removeListenerTest()", "class_method_signature": "AsyncPropertyTest.removeListenerTest()", "testcase": true, "constructor": false, "invocations": ["complete", "addListener", "removeListener", "set", "waitForFxEvents", "assertThrows", "get"]}, "focal_class": {"identifier": "AsyncProperty", "superclass": "extends ObjectProperty<T>", "interfaces": "implements AtomicProperty<T>", "fields": [{"original_string": "private final AtomicReference<T> holder = new AtomicReference<>(null);", "modifier": "private final", "type": "AtomicReference<T>", "declarator": "holder = new AtomicReference<>(null)", "var_name": "holder"}, {"original_string": "private final AtomicPropertyListenerDelegate<T> delegate;", "modifier": "private final", "type": "AtomicPropertyListenerDelegate<T>", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private final Object bean;", "modifier": "private final", "type": "Object", "declarator": "bean", "var_name": "bean"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}], "methods": [{"identifier": "AsyncProperty", "parameters": "()", "modifiers": "public", "return": "", "signature": " AsyncProperty()", "full_signature": "public  AsyncProperty()", "class_method_signature": "AsyncProperty.AsyncProperty()", "testcase": false, "constructor": true}, {"identifier": "AsyncProperty", "parameters": "(T initialValue)", "modifiers": "public", "return": "", "signature": " AsyncProperty(T initialValue)", "full_signature": "public  AsyncProperty(T initialValue)", "class_method_signature": "AsyncProperty.AsyncProperty(T initialValue)", "testcase": false, "constructor": true}, {"identifier": "AsyncProperty", "parameters": "(Object bean, String name)", "modifiers": "public", "return": "", "signature": " AsyncProperty(Object bean, String name)", "full_signature": "public  AsyncProperty(Object bean, String name)", "class_method_signature": "AsyncProperty.AsyncProperty(Object bean, String name)", "testcase": false, "constructor": true}, {"identifier": "AsyncProperty", "parameters": "(Object bean, String name, T initialValue)", "modifiers": "@SuppressWarnings(\"JavadocMethod\") public", "return": "", "signature": " AsyncProperty(Object bean, String name, T initialValue)", "full_signature": "@SuppressWarnings(\"JavadocMethod\") public  AsyncProperty(Object bean, String name, T initialValue)", "class_method_signature": "AsyncProperty.AsyncProperty(Object bean, String name, T initialValue)", "testcase": false, "constructor": true}, {"identifier": "bind", "parameters": "(ObservableValue<? extends T> observable)", "modifiers": "@Override public", "return": "void", "signature": "void bind(ObservableValue<? extends T> observable)", "full_signature": "@Override public void bind(ObservableValue<? extends T> observable)", "class_method_signature": "AsyncProperty.bind(ObservableValue<? extends T> observable)", "testcase": false, "constructor": false}, {"identifier": "unbind", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void unbind()", "full_signature": "@Override public void unbind()", "class_method_signature": "AsyncProperty.unbind()", "testcase": false, "constructor": false}, {"identifier": "isBound", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBound()", "full_signature": "@Override public boolean isBound()", "class_method_signature": "AsyncProperty.isBound()", "testcase": false, "constructor": false}, {"identifier": "getBean", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getBean()", "full_signature": "@Override public Object getBean()", "class_method_signature": "AsyncProperty.getBean()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "AsyncProperty.getName()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T get()", "full_signature": "@Override public T get()", "class_method_signature": "AsyncProperty.get()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(T newValue)", "modifiers": "@Override public", "return": "void", "signature": "void set(T newValue)", "full_signature": "@Override public void set(T newValue)", "class_method_signature": "AsyncProperty.set(T newValue)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(T v)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(T v)", "full_signature": "@Override public void setValue(T v)", "class_method_signature": "AsyncProperty.setValue(T v)", "testcase": false, "constructor": false}, {"identifier": "addImmediateListener", "parameters": "(ImmediateChangeListener<? super T> listener)", "modifiers": "@Override public", "return": "void", "signature": "void addImmediateListener(ImmediateChangeListener<? super T> listener)", "full_signature": "@Override public void addImmediateListener(ImmediateChangeListener<? super T> listener)", "class_method_signature": "AsyncProperty.addImmediateListener(ImmediateChangeListener<? super T> listener)", "testcase": false, "constructor": false}, {"identifier": "removeImmediateListener", "parameters": "(ImmediateChangeListener<? super T> listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeImmediateListener(ImmediateChangeListener<? super T> listener)", "full_signature": "@Override public void removeImmediateListener(ImmediateChangeListener<? super T> listener)", "class_method_signature": "AsyncProperty.removeImmediateListener(ImmediateChangeListener<? super T> listener)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(ChangeListener<? super T> listener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(ChangeListener<? super T> listener)", "full_signature": "@Override public void addListener(ChangeListener<? super T> listener)", "class_method_signature": "AsyncProperty.addListener(ChangeListener<? super T> listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(ChangeListener<? super T> listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeListener(ChangeListener<? super T> listener)", "full_signature": "@Override public void removeListener(ChangeListener<? super T> listener)", "class_method_signature": "AsyncProperty.removeListener(ChangeListener<? super T> listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(InvalidationListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeListener(InvalidationListener listener)", "full_signature": "@Override public void removeListener(InvalidationListener listener)", "class_method_signature": "AsyncProperty.removeListener(InvalidationListener listener)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(InvalidationListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(InvalidationListener listener)", "full_signature": "@Override public void addListener(InvalidationListener listener)", "class_method_signature": "AsyncProperty.addListener(InvalidationListener listener)", "testcase": false, "constructor": false}], "file": "api/src/main/java/edu/wpi/first/shuffleboard/api/properties/AsyncProperty.java"}, "focal_method": {"identifier": "removeListener", "parameters": "(ChangeListener<? super T> listener)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void removeListener(ChangeListener<? super T> listener) {\n    delegate.removeChangeListener(listener);\n  }", "signature": "void removeListener(ChangeListener<? super T> listener)", "full_signature": "@Override public void removeListener(ChangeListener<? super T> listener)", "class_method_signature": "AsyncProperty.removeListener(ChangeListener<? super T> listener)", "testcase": false, "constructor": false, "invocations": ["removeChangeListener"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}