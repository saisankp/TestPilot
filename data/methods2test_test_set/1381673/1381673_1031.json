{"test_class": {"identifier": "KeyTreeMapTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final KeyDefinition AGE = KeyDefinition.newKeyDefinition()\n            .updatable()\n            .withId(\"age\")\n            .build();", "modifier": "private final", "type": "KeyDefinition", "declarator": "AGE = KeyDefinition.newKeyDefinition()\n            .updatable()\n            .withId(\"age\")\n            .build()", "var_name": "AGE"}, {"original_string": "private final KeyDefinition NAME = KeyDefinition.newKeyDefinition()\n            .withId(\"name\")\n            .build();", "modifier": "private final", "type": "KeyDefinition", "declarator": "NAME = KeyDefinition.newKeyDefinition()\n            .withId(\"name\")\n            .build()", "var_name": "NAME"}, {"original_string": "private KeyTreeMap<Person> map;", "modifier": "private", "type": "KeyTreeMap<Person>", "declarator": "map", "var_name": "map"}, {"original_string": "private Person toni;", "modifier": "private", "type": "Person", "declarator": "toni", "var_name": "toni"}, {"original_string": "private Person eder;", "modifier": "private", "type": "Person", "declarator": "eder", "var_name": "eder"}, {"original_string": "private Person michael;", "modifier": "private", "type": "Person", "declarator": "michael", "var_name": "michael"}, {"original_string": "private AnalyzerConfiguration configuration;", "modifier": "private", "type": "AnalyzerConfiguration", "declarator": "configuration", "var_name": "configuration"}], "file": "drools-verifier/drools-verifier-core/src/test/java/org/drools/verifier/core/maps/KeyTreeMapTest.java"}, "test_case": {"identifier": "testUpdateAge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpdateAge() throws\n            Exception {\n        final MultiMapChangeHandler changeHandler = mock(MultiMapChangeHandler.class);\n        ((ChangeHandledMultiMap) map.get(AGE)).addChangeListener(changeHandler);\n\n        toni.setAge(10);\n\n        final MultiMap<Value, Person, List<Person>> age = map.get(AGE);\n\n        assertFalse(age.get(new Value(20))\n                            .contains(toni));\n        assertTrue(age.get(new Value(10))\n                           .contains(toni));\n    }", "signature": "void testUpdateAge()", "full_signature": "@Test public void testUpdateAge()", "class_method_signature": "KeyTreeMapTest.testUpdateAge()", "testcase": true, "constructor": false, "invocations": ["mock", "addChangeListener", "get", "setAge", "get", "assertFalse", "contains", "get", "assertTrue", "contains", "get"]}, "focal_class": {"identifier": "KeyTreeMap", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TreeMap<KeyDefinition, MultiMap<Value, T, List<T>>> tree = new TreeMap<>();", "modifier": "private final", "type": "TreeMap<KeyDefinition, MultiMap<Value, T, List<T>>>", "declarator": "tree = new TreeMap<>()", "var_name": "tree"}, {"original_string": "protected final UUIDKeySet keys = new UUIDKeySet(this);", "modifier": "protected final", "type": "UUIDKeySet", "declarator": "keys = new UUIDKeySet(this)", "var_name": "keys"}, {"original_string": "protected KeyChangeListener<T> keyChangeListener = new KeyChangeListener<T>() {\n        @Override\n        public void update(final Key oldKey,\n                           final Key newKey,\n                           final T t) {\n\n            move(oldKey,\n                 newKey,\n                 t);\n        }\n    };", "modifier": "protected", "type": "KeyChangeListener<T>", "declarator": "keyChangeListener = new KeyChangeListener<T>() {\n        @Override\n        public void update(final Key oldKey,\n                           final Key newKey,\n                           final T t) {\n\n            move(oldKey,\n                 newKey,\n                 t);\n        }\n    }", "var_name": "keyChangeListener"}], "methods": [{"identifier": "KeyTreeMap", "parameters": "(final KeyDefinition... keyIDs)", "modifiers": "public", "return": "", "signature": " KeyTreeMap(final KeyDefinition... keyIDs)", "full_signature": "public  KeyTreeMap(final KeyDefinition... keyIDs)", "class_method_signature": "KeyTreeMap.KeyTreeMap(final KeyDefinition... keyIDs)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(final T object)", "modifiers": "public", "return": "void", "signature": "void put(final T object)", "full_signature": "public void put(final T object)", "class_method_signature": "KeyTreeMap.put(final T object)", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(final Key oldKey,\n                      final Key newKey,\n                      final T t)", "modifiers": "private", "return": "void", "signature": "void move(final Key oldKey,\n                      final Key newKey,\n                      final T t)", "full_signature": "private void move(final Key oldKey,\n                      final Key newKey,\n                      final T t)", "class_method_signature": "KeyTreeMap.move(final Key oldKey,\n                      final Key newKey,\n                      final T t)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(final Key key,\n                       final T object)", "modifiers": "protected", "return": "void", "signature": "void put(final Key key,\n                       final T object)", "full_signature": "protected void put(final Key key,\n                       final T object)", "class_method_signature": "KeyTreeMap.put(final Key key,\n                       final T object)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(final KeyDefinition id,\n                        final MultiMap<Value, T, List<T>> multiMap)", "modifiers": "private", "return": "void", "signature": "void putAll(final KeyDefinition id,\n                        final MultiMap<Value, T, List<T>> multiMap)", "full_signature": "private void putAll(final KeyDefinition id,\n                        final MultiMap<Value, T, List<T>> multiMap)", "class_method_signature": "KeyTreeMap.putAll(final KeyDefinition id,\n                        final MultiMap<Value, T, List<T>> multiMap)", "testcase": false, "constructor": false}, {"identifier": "resolveMapByKeyId", "parameters": "(final KeyDefinition id)", "modifiers": "protected", "return": "MultiMap<Value, T, List<T>>", "signature": "MultiMap<Value, T, List<T>> resolveMapByKeyId(final KeyDefinition id)", "full_signature": "protected MultiMap<Value, T, List<T>> resolveMapByKeyId(final KeyDefinition id)", "class_method_signature": "KeyTreeMap.resolveMapByKeyId(final KeyDefinition id)", "testcase": false, "constructor": false}, {"identifier": "getMap", "parameters": "(final KeyDefinition id)", "modifiers": "private", "return": "MultiMap<Value, T, List<T>>", "signature": "MultiMap<Value, T, List<T>> getMap(final KeyDefinition id)", "full_signature": "private MultiMap<Value, T, List<T>> getMap(final KeyDefinition id)", "class_method_signature": "KeyTreeMap.getMap(final KeyDefinition id)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final KeyDefinition keyDefinition)", "modifiers": "public", "return": "MultiMap<Value, T, List<T>>", "signature": "MultiMap<Value, T, List<T>> get(final KeyDefinition keyDefinition)", "full_signature": "public MultiMap<Value, T, List<T>> get(final KeyDefinition keyDefinition)", "class_method_signature": "KeyTreeMap.get(final KeyDefinition keyDefinition)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(final KeyTreeMap<T> keyTreeMap)", "modifiers": "public", "return": "void", "signature": "void merge(final KeyTreeMap<T> keyTreeMap)", "full_signature": "public void merge(final KeyTreeMap<T> keyTreeMap)", "class_method_signature": "KeyTreeMap.merge(final KeyTreeMap<T> keyTreeMap)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final UUIDKey uuidKey)", "modifiers": "protected", "return": "T", "signature": "T remove(final UUIDKey uuidKey)", "full_signature": "protected T remove(final UUIDKey uuidKey)", "class_method_signature": "KeyTreeMap.remove(final UUIDKey uuidKey)", "testcase": false, "constructor": false}, {"identifier": "removeKeyForItem", "parameters": "(final Key key,\n                                     final T item)", "modifiers": "private", "return": "boolean", "signature": "boolean removeKeyForItem(final Key key,\n                                     final T item)", "full_signature": "private boolean removeKeyForItem(final Key key,\n                                     final T item)", "class_method_signature": "KeyTreeMap.removeKeyForItem(final Key key,\n                                     final T item)", "testcase": false, "constructor": false}, {"identifier": "getItemByUUID", "parameters": "(final UUIDKey uuidKey)", "modifiers": "private", "return": "T", "signature": "T getItemByUUID(final UUIDKey uuidKey)", "full_signature": "private T getItemByUUID(final UUIDKey uuidKey)", "class_method_signature": "KeyTreeMap.getItemByUUID(final UUIDKey uuidKey)", "testcase": false, "constructor": false}], "file": "drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/maps/KeyTreeMap.java"}, "focal_method": {"identifier": "get", "parameters": "(final KeyDefinition keyDefinition)", "modifiers": "public", "return": "MultiMap<Value, T, List<T>>", "body": "public MultiMap<Value, T, List<T>> get(final KeyDefinition keyDefinition) {\n        return tree.get(keyDefinition);\n    }", "signature": "MultiMap<Value, T, List<T>> get(final KeyDefinition keyDefinition)", "full_signature": "public MultiMap<Value, T, List<T>> get(final KeyDefinition keyDefinition)", "class_method_signature": "KeyTreeMap.get(final KeyDefinition keyDefinition)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}