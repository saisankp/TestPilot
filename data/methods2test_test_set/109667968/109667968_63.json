{"test_class": {"identifier": "AndroidGpsLocationClientTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "private AndroidGpsLocationClient androidGpsLocationClient;", "modifier": "private", "type": "AndroidGpsLocationClient", "declarator": "androidGpsLocationClient", "var_name": "androidGpsLocationClient"}, {"original_string": "@Rule\n    public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}], "file": "library/src/test/java/io/ona/kujaku/location/clients/AndroidGpsLocationClientTest.java"}, "test_case": {"identifier": "stopLocationUpdatesShouldCallLocationManagerRemoveUpdates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void stopLocationUpdatesShouldCallLocationManagerRemoveUpdates() {\n        LocationListener locationListener = Mockito.mock(LocationListener.class);\n        LocationManager locationManager = Mockito.spy((LocationManager) ReflectionHelpers.getField(androidGpsLocationClient, \"locationManager\"));\n        ReflectionHelpers.setField(androidGpsLocationClient, \"locationManager\", locationManager);\n        androidGpsLocationClient.addLocationListener(locationListener);\n\n        Assert.assertEquals(1, androidGpsLocationClient.getLocationListeners().size());\n        androidGpsLocationClient.stopLocationUpdates();\n\n        // Verify that the AndroidGPSLocationListener was also called\n        Mockito.verify(locationManager, Mockito.times(2)).removeUpdates(Mockito.any(LocationListener.class));\n    }", "signature": "void stopLocationUpdatesShouldCallLocationManagerRemoveUpdates()", "full_signature": "@Test public void stopLocationUpdatesShouldCallLocationManagerRemoveUpdates()", "class_method_signature": "AndroidGpsLocationClientTest.stopLocationUpdatesShouldCallLocationManagerRemoveUpdates()", "testcase": true, "constructor": false, "invocations": ["mock", "spy", "getField", "setField", "addLocationListener", "assertEquals", "size", "getLocationListeners", "stopLocationUpdates", "removeUpdates", "verify", "times", "any"]}, "focal_class": {"identifier": "AndroidGpsLocationClient", "superclass": "extends BaseLocationClient", "interfaces": "", "fields": [{"original_string": "private Location lastLocation;", "modifier": "private", "type": "Location", "declarator": "lastLocation", "var_name": "lastLocation"}, {"original_string": "private long updateInterval = 5000;", "modifier": "private", "type": "long", "declarator": "updateInterval = 5000", "var_name": "updateInterval"}, {"original_string": "private long fastestUpdateInterval = 1000;", "modifier": "private", "type": "long", "declarator": "fastestUpdateInterval = 1000", "var_name": "fastestUpdateInterval"}, {"original_string": "private Object gpsStatusCallback;", "modifier": "private", "type": "Object", "declarator": "gpsStatusCallback", "var_name": "gpsStatusCallback"}, {"original_string": "private AndroidGpsLocationListener androidGpsLocationListener;", "modifier": "private", "type": "AndroidGpsLocationListener", "declarator": "androidGpsLocationListener", "var_name": "androidGpsLocationListener"}], "methods": [{"identifier": "AndroidGpsLocationClient", "parameters": "(@NonNull Context context)", "modifiers": "public", "return": "", "signature": " AndroidGpsLocationClient(@NonNull Context context)", "full_signature": "public  AndroidGpsLocationClient(@NonNull Context context)", "class_method_signature": "AndroidGpsLocationClient.AndroidGpsLocationClient(@NonNull Context context)", "testcase": false, "constructor": true}, {"identifier": "stopLocationUpdates", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stopLocationUpdates()", "full_signature": "@Override public void stopLocationUpdates()", "class_method_signature": "AndroidGpsLocationClient.stopLocationUpdates()", "testcase": false, "constructor": false}, {"identifier": "registerForGpsStoppedEvent", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerForGpsStoppedEvent()", "full_signature": "private void registerForGpsStoppedEvent()", "class_method_signature": "AndroidGpsLocationClient.registerForGpsStoppedEvent()", "testcase": false, "constructor": false}, {"identifier": "unregisterForGpsStoppedEvent", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void unregisterForGpsStoppedEvent()", "full_signature": "private void unregisterForGpsStoppedEvent()", "class_method_signature": "AndroidGpsLocationClient.unregisterForGpsStoppedEvent()", "testcase": false, "constructor": false}, {"identifier": "resetLastLocationIfLocationServiceIsOff", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resetLastLocationIfLocationServiceIsOff()", "full_signature": "private void resetLastLocationIfLocationServiceIsOff()", "class_method_signature": "AndroidGpsLocationClient.resetLastLocationIfLocationServiceIsOff()", "testcase": false, "constructor": false}, {"identifier": "getLastLocation", "parameters": "()", "modifiers": "@SuppressLint(\"MissingPermission\") @Nullable @Override public", "return": "Location", "signature": "Location getLastLocation()", "full_signature": "@SuppressLint(\"MissingPermission\") @Nullable @Override public Location getLastLocation()", "class_method_signature": "AndroidGpsLocationClient.getLastLocation()", "testcase": false, "constructor": false}, {"identifier": "requestLocationUpdates", "parameters": "(@NonNull LocationListener locationListener)", "modifiers": "@Override public", "return": "void", "signature": "void requestLocationUpdates(@NonNull LocationListener locationListener)", "full_signature": "@Override public void requestLocationUpdates(@NonNull LocationListener locationListener)", "class_method_signature": "AndroidGpsLocationClient.requestLocationUpdates(@NonNull LocationListener locationListener)", "testcase": false, "constructor": false}, {"identifier": "setUpdateIntervals", "parameters": "(long updateInterval, long fastestUpdateInterval)", "modifiers": "@Override public", "return": "void", "signature": "void setUpdateIntervals(long updateInterval, long fastestUpdateInterval)", "full_signature": "@Override public void setUpdateIntervals(long updateInterval, long fastestUpdateInterval)", "class_method_signature": "AndroidGpsLocationClient.setUpdateIntervals(long updateInterval, long fastestUpdateInterval)", "testcase": false, "constructor": false}, {"identifier": "getProvider", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "String", "signature": "String getProvider()", "full_signature": "@NonNull @Override public String getProvider()", "class_method_signature": "AndroidGpsLocationClient.getProvider()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AndroidGpsLocationClient.close()", "testcase": false, "constructor": false}], "file": "library/src/main/java/io/ona/kujaku/location/clients/AndroidGpsLocationClient.java"}, "focal_method": {"identifier": "stopLocationUpdates", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void stopLocationUpdates() {\n        if (isMonitoringLocation()) {\n            lastLocation = null;\n\n            locationManager.removeUpdates(androidGpsLocationListener);\n\n            for (LocationListener locationListener : getLocationListeners()) {\n                locationManager.removeUpdates(locationListener);\n            }\n            clearLocationListeners();\n        }\n\n        unregisterForGpsStoppedEvent();\n    }", "signature": "void stopLocationUpdates()", "full_signature": "@Override public void stopLocationUpdates()", "class_method_signature": "AndroidGpsLocationClient.stopLocationUpdates()", "testcase": false, "constructor": false, "invocations": ["isMonitoringLocation", "removeUpdates", "getLocationListeners", "removeUpdates", "clearLocationListeners", "unregisterForGpsStoppedEvent"]}, "repository": {"repo_id": 109667968, "url": "https://github.com/onaio/kujaku", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 4778, "license": "licensed"}}