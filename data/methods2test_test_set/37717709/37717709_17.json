{"test_class": {"identifier": "XmlExtensionNotificationDataExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EMMA_NAMESPACE = \"http://www.w3.org/2003/04/emma\";", "modifier": "private static final", "type": "String", "declarator": "EMMA_NAMESPACE = \"http://www.w3.org/2003/04/emma\"", "var_name": "EMMA_NAMESPACE"}], "file": "org.jvoicexml.callmanager.mmi/src/test/java/org/jvoicexml/callmanager/mmi/xml/XmlExtensionNotificationDataExtractorTest.java"}, "test_case": {"identifier": "testCompundSemanticIntperpretation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompundSemanticIntperpretation() throws Exception, SemanticError {\n        final Mmi mmi = new Mmi();\n        final ExtensionNotification notification = new ExtensionNotification();\n        mmi.setExtensionNotification(notification);\n        notification.setContext(UUID.randomUUID().toString());\n        notification.setRequestId(\"42\");\n        notification.setSource(\"fromhere\");\n        notification.setTarget(\"tothere\");\n        final AnyComplexType any = new AnyComplexType();\n        notification.setData(any);\n        final DocumentBuilderFactory factory = DocumentBuilderFactory\n                .newInstance();\n        factory.setNamespaceAware(true);\n        final DocumentBuilder builder = factory.newDocumentBuilder();\n        final Document document = builder.newDocument();\n        final Element emma = document.createElementNS(EMMA_NAMESPACE,\n                \"emma:emma\");\n        emma.setAttribute(\"version\", \"1.0\");\n        document.appendChild(emma);\n        final Element interpretation = document.createElementNS(EMMA_NAMESPACE,\n                \"emma:interpretation\");\n        interpretation.setAttribute(\"id\", \"dummy\");\n        interpretation\n                .setAttributeNS(EMMA_NAMESPACE, \"emma:medium\", \"acoustic\");\n        any.addContent(emma);\n        interpretation.setAttributeNS(EMMA_NAMESPACE, \"emma:mode\", \"mmi\");\n        float confidence = 0.4f;\n        interpretation.setAttributeNS(EMMA_NAMESPACE, \"emma:confidence\",\n                Float.toString(confidence));\n        final String tokens = \"this is a test\";\n        interpretation.setAttributeNS(EMMA_NAMESPACE, \"emma:tokens\", tokens);\n        emma.appendChild(interpretation);\n        final Element order = document.createElement(\"order\");\n        interpretation.appendChild(order);\n        final Element topping = document.createElement(\"topping\");\n        order.appendChild(topping);\n        final Text orderText = document.createTextNode(\"Salami\");\n        topping.appendChild(orderText);\n        final Element size = document.createElement(\"size\");\n        order.appendChild(size);\n        final Text sizeText = document.createTextNode(\"medium\");\n        size.appendChild(sizeText);\n        final XmlExtensionNotificationDataExtractor extractor = new XmlExtensionNotificationDataExtractor();\n        final ExtensionNotification ext = mmi.getExtensionNotification();\n        final RecognitionResult result = extractor.getRecognitionResult(mmi,\n                ext);\n        Assert.assertEquals(tokens, result.getUtterance());\n        Assert.assertEquals(confidence, result.getConfidence(), .001);\n        final DataModel model = Mockito.mock(DataModel.class);\n        System.out.println(result.getSemanticInterpretation(model));\n//        final String json = ScriptingEngine.toJSON((ScriptableObject) result\n//                .getSemanticInterpretation());\n//        Assert.assertEquals(\"{\\\"topping\\\":\\\"Salami\\\",\\\"size\\\":\\\"medium\\\"}\",\n//                json);\n    }", "signature": "void testCompundSemanticIntperpretation()", "full_signature": "@Test public void testCompundSemanticIntperpretation()", "class_method_signature": "XmlExtensionNotificationDataExtractorTest.testCompundSemanticIntperpretation()", "testcase": true, "constructor": false, "invocations": ["setExtensionNotification", "setContext", "toString", "randomUUID", "setRequestId", "setSource", "setTarget", "setData", "newInstance", "setNamespaceAware", "newDocumentBuilder", "newDocument", "createElementNS", "setAttribute", "appendChild", "createElementNS", "setAttribute", "setAttributeNS", "addContent", "setAttributeNS", "setAttributeNS", "toString", "setAttributeNS", "appendChild", "createElement", "appendChild", "createElement", "appendChild", "createTextNode", "appendChild", "createElement", "appendChild", "createTextNode", "appendChild", "getExtensionNotification", "getRecognitionResult", "assertEquals", "getUtterance", "assertEquals", "getConfidence", "mock", "println", "getSemanticInterpretation"]}, "focal_class": {"identifier": "XmlExtensionNotificationDataExtractor", "superclass": "", "interfaces": "implements ExtensionNotificationDataExtractor", "fields": [], "methods": [{"identifier": "getRecognitionResult", "parameters": "(final Mmi mmi,\n            final ExtensionNotification ext)", "modifiers": "@Override public", "return": "RecognitionResult", "signature": "RecognitionResult getRecognitionResult(final Mmi mmi,\n            final ExtensionNotification ext)", "full_signature": "@Override public RecognitionResult getRecognitionResult(final Mmi mmi,\n            final ExtensionNotification ext)", "class_method_signature": "XmlExtensionNotificationDataExtractor.getRecognitionResult(final Mmi mmi,\n            final ExtensionNotification ext)", "testcase": false, "constructor": false}], "file": "org.jvoicexml.callmanager.mmi/src/main/java/org/jvoicexml/callmanager/mmi/xml/XmlExtensionNotificationDataExtractor.java"}, "focal_method": {"identifier": "getRecognitionResult", "parameters": "(final Mmi mmi,\n            final ExtensionNotification ext)", "modifiers": "@Override public", "return": "RecognitionResult", "body": "@Override\n    public RecognitionResult getRecognitionResult(final Mmi mmi,\n            final ExtensionNotification ext) throws ConversionException {\n        JAXBContext context;\n        try {\n            context = JAXBContext.newInstance(Mmi.class);\n            Marshaller marshaller = context.createMarshaller();\n            final EmmaSemanticInterpretationExtractor extractor = new EmmaSemanticInterpretationExtractor();\n            marshaller.marshal(mmi, extractor);\n            return extractor.getRecognitonResult();\n        } catch (JAXBException e) {\n            throw new ConversionException(e.getMessage(), e);\n        }\n    }", "signature": "RecognitionResult getRecognitionResult(final Mmi mmi,\n            final ExtensionNotification ext)", "full_signature": "@Override public RecognitionResult getRecognitionResult(final Mmi mmi,\n            final ExtensionNotification ext)", "class_method_signature": "XmlExtensionNotificationDataExtractor.getRecognitionResult(final Mmi mmi,\n            final ExtensionNotification ext)", "testcase": false, "constructor": false, "invocations": ["newInstance", "createMarshaller", "marshal", "getRecognitonResult", "getMessage"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}