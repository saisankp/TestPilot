{"test_class": {"identifier": "VertxDispatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final int TIMEOUT = 10;", "modifier": "protected static final", "type": "int", "declarator": "TIMEOUT = 10", "var_name": "TIMEOUT"}, {"original_string": "protected Utils.Port port;", "modifier": "protected", "type": "Utils.Port", "declarator": "port", "var_name": "port"}, {"original_string": "protected AccountRepository accountRepository;", "modifier": "protected", "type": "AccountRepository", "declarator": "accountRepository", "var_name": "accountRepository"}, {"original_string": "protected ConfigurationManager configRepository;", "modifier": "protected", "type": "ConfigurationManager", "declarator": "configRepository", "var_name": "configRepository"}, {"original_string": "protected VertxDispatcher dispatcher;", "modifier": "protected", "type": "VertxDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "protected Vertx vertx;", "modifier": "protected", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "protected static final String HOST = \"127.0.0.1\";", "modifier": "protected static final", "type": "String", "declarator": "HOST = \"127.0.0.1\"", "var_name": "HOST"}], "file": "com.gcplot.web/src/test/java/com/gcplot/web/vertx/VertxDispatcherTest.java"}, "test_case": {"identifier": "testNoAuth", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoAuth() throws Exception {\n        final int[] count = { 0 };\n        dispatcher.requireAuth().get(\"/get/me\", c -> {\n            count[0] += 1;\n        });\n\n        HttpClient client = vertx.createHttpClient();\n        httpGet(client, \"/get/me\", jo -> jo.getLong(\"error\") == ErrorMessages.NOT_AUTHORISED);\n        Assert.assertEquals(count[0], 0);\n    }", "signature": "void testNoAuth()", "full_signature": "@Test public void testNoAuth()", "class_method_signature": "VertxDispatcherTest.testNoAuth()", "testcase": true, "constructor": false, "invocations": ["get", "requireAuth", "createHttpClient", "httpGet", "getLong", "assertEquals"]}, "focal_class": {"identifier": "VertxDispatcher", "superclass": "extends DispatcherBase", "interfaces": "implements Dispatcher<String>", "fields": [{"original_string": "protected final ThreadLocal<VertxRequestContext> contexts = ThreadLocal.withInitial(() ->\n            new VertxRequestContext().setAccountRepository(getAccountRepository()));", "modifier": "protected final", "type": "ThreadLocal<VertxRequestContext>", "declarator": "contexts = ThreadLocal.withInitial(() ->\n            new VertxRequestContext().setAccountRepository(getAccountRepository()))", "var_name": "contexts"}, {"original_string": "protected HttpServer httpServer;", "modifier": "protected", "type": "HttpServer", "declarator": "httpServer", "var_name": "httpServer"}, {"original_string": "protected Router router;", "modifier": "protected", "type": "Router", "declarator": "router", "var_name": "router"}, {"original_string": "protected static final Logger LOG = LoggerFactory.getLogger(VertxDispatcher.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(VertxDispatcher.class)", "var_name": "LOG"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private BodyHandler bodyHandler;", "modifier": "private", "type": "BodyHandler", "declarator": "bodyHandler", "var_name": "bodyHandler"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "VertxDispatcher.init()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void close()", "full_signature": "@Override public synchronized void close()", "class_method_signature": "VertxDispatcher.close()", "testcase": false, "constructor": false}, {"identifier": "isOpen", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isOpen()", "full_signature": "@Override public boolean isOpen()", "class_method_signature": "VertxDispatcher.isOpen()", "testcase": false, "constructor": false}, {"identifier": "preHandle", "parameters": "(Predicate<RequestContext> handler)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> preHandle(Predicate<RequestContext> handler)", "full_signature": "@Override public Dispatcher<String> preHandle(Predicate<RequestContext> handler)", "class_method_signature": "VertxDispatcher.preHandle(Predicate<RequestContext> handler)", "testcase": false, "constructor": false}, {"identifier": "postHandle", "parameters": "(Consumer<RequestContext> handler)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> postHandle(Consumer<RequestContext> handler)", "full_signature": "@Override public Dispatcher<String> postHandle(Consumer<RequestContext> handler)", "class_method_signature": "VertxDispatcher.postHandle(Consumer<RequestContext> handler)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String s, Consumer<RequestContext> handler)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> get(String s, Consumer<RequestContext> handler)", "full_signature": "@Override public Dispatcher<String> get(String s, Consumer<RequestContext> handler)", "class_method_signature": "VertxDispatcher.get(String s, Consumer<RequestContext> handler)", "testcase": false, "constructor": false}, {"identifier": "head", "parameters": "(String s, Consumer<RequestContext> handler)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> head(String s, Consumer<RequestContext> handler)", "full_signature": "@Override public Dispatcher<String> head(String s, Consumer<RequestContext> handler)", "class_method_signature": "VertxDispatcher.head(String s, Consumer<RequestContext> handler)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String s, Consumer<RequestContext> handler)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> delete(String s, Consumer<RequestContext> handler)", "full_signature": "@Override public Dispatcher<String> delete(String s, Consumer<RequestContext> handler)", "class_method_signature": "VertxDispatcher.delete(String s, Consumer<RequestContext> handler)", "testcase": false, "constructor": false}, {"identifier": "post", "parameters": "(String s, Class<? extends Payload> payloadType, BiConsumer<Payload, RequestContext> handler)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> post(String s, Class<? extends Payload> payloadType, BiConsumer<Payload, RequestContext> handler)", "full_signature": "@Override public Dispatcher<String> post(String s, Class<? extends Payload> payloadType, BiConsumer<Payload, RequestContext> handler)", "class_method_signature": "VertxDispatcher.post(String s, Class<? extends Payload> payloadType, BiConsumer<Payload, RequestContext> handler)", "testcase": false, "constructor": false}, {"identifier": "postJson", "parameters": "(String s, BiConsumer<JsonObject, RequestContext> handler)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> postJson(String s, BiConsumer<JsonObject, RequestContext> handler)", "full_signature": "@Override public Dispatcher<String> postJson(String s, BiConsumer<JsonObject, RequestContext> handler)", "class_method_signature": "VertxDispatcher.postJson(String s, BiConsumer<JsonObject, RequestContext> handler)", "testcase": false, "constructor": false}, {"identifier": "post", "parameters": "(String s, Consumer<RequestContext> handler)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> post(String s, Consumer<RequestContext> handler)", "full_signature": "@Override public Dispatcher<String> post(String s, Consumer<RequestContext> handler)", "class_method_signature": "VertxDispatcher.post(String s, Consumer<RequestContext> handler)", "testcase": false, "constructor": false}, {"identifier": "post", "parameters": "(String s, BiConsumer<byte[], RequestContext> handler)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> post(String s, BiConsumer<byte[], RequestContext> handler)", "full_signature": "@Override public Dispatcher<String> post(String s, BiConsumer<byte[], RequestContext> handler)", "class_method_signature": "VertxDispatcher.post(String s, BiConsumer<byte[], RequestContext> handler)", "testcase": false, "constructor": false}, {"identifier": "postUpload", "parameters": "(String s, Consumer<RequestContext> handler)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> postUpload(String s, Consumer<RequestContext> handler)", "full_signature": "@Override public Dispatcher<String> postUpload(String s, Consumer<RequestContext> handler)", "class_method_signature": "VertxDispatcher.postUpload(String s, Consumer<RequestContext> handler)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String s, Consumer<RequestContext> handler)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> put(String s, Consumer<RequestContext> handler)", "full_signature": "@Override public Dispatcher<String> put(String s, Consumer<RequestContext> handler)", "class_method_signature": "VertxDispatcher.put(String s, Consumer<RequestContext> handler)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String s, Class<? extends Payload> payloadType, BiConsumer<Payload, RequestContext> handler)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> put(String s, Class<? extends Payload> payloadType, BiConsumer<Payload, RequestContext> handler)", "full_signature": "@Override public Dispatcher<String> put(String s, Class<? extends Payload> payloadType, BiConsumer<Payload, RequestContext> handler)", "class_method_signature": "VertxDispatcher.put(String s, Class<? extends Payload> payloadType, BiConsumer<Payload, RequestContext> handler)", "testcase": false, "constructor": false}, {"identifier": "putJson", "parameters": "(String s, BiConsumer<JsonObject, RequestContext> handler)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> putJson(String s, BiConsumer<JsonObject, RequestContext> handler)", "full_signature": "@Override public Dispatcher<String> putJson(String s, BiConsumer<JsonObject, RequestContext> handler)", "class_method_signature": "VertxDispatcher.putJson(String s, BiConsumer<JsonObject, RequestContext> handler)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String s, BiConsumer<byte[], RequestContext> handler)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> put(String s, BiConsumer<byte[], RequestContext> handler)", "full_signature": "@Override public Dispatcher<String> put(String s, BiConsumer<byte[], RequestContext> handler)", "class_method_signature": "VertxDispatcher.put(String s, BiConsumer<byte[], RequestContext> handler)", "testcase": false, "constructor": false}, {"identifier": "blocking", "parameters": "()", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> blocking()", "full_signature": "@Override public Dispatcher<String> blocking()", "class_method_signature": "VertxDispatcher.blocking()", "testcase": false, "constructor": false}, {"identifier": "noAuth", "parameters": "()", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> noAuth()", "full_signature": "@Override public Dispatcher<String> noAuth()", "class_method_signature": "VertxDispatcher.noAuth()", "testcase": false, "constructor": false}, {"identifier": "requireAuth", "parameters": "()", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> requireAuth()", "full_signature": "@Override public Dispatcher<String> requireAuth()", "class_method_signature": "VertxDispatcher.requireAuth()", "testcase": false, "constructor": false}, {"identifier": "allowNotConfirmed", "parameters": "()", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> allowNotConfirmed()", "full_signature": "@Override public Dispatcher<String> allowNotConfirmed()", "class_method_signature": "VertxDispatcher.allowNotConfirmed()", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(Predicate<RequestContext> filter, String message)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> filter(Predicate<RequestContext> filter, String message)", "full_signature": "@Override public Dispatcher<String> filter(Predicate<RequestContext> filter, String message)", "class_method_signature": "VertxDispatcher.filter(Predicate<RequestContext> filter, String message)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(Predicate<RequestContext> filter, String message, Object... params)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> filter(Predicate<RequestContext> filter, String message, Object... params)", "full_signature": "@Override public Dispatcher<String> filter(Predicate<RequestContext> filter, String message, Object... params)", "class_method_signature": "VertxDispatcher.filter(Predicate<RequestContext> filter, String message, Object... params)", "testcase": false, "constructor": false}, {"identifier": "mimeTypes", "parameters": "(String... mimeTypes)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> mimeTypes(String... mimeTypes)", "full_signature": "@Override public Dispatcher<String> mimeTypes(String... mimeTypes)", "class_method_signature": "VertxDispatcher.mimeTypes(String... mimeTypes)", "testcase": false, "constructor": false}, {"identifier": "exceptionHandler", "parameters": "(BiConsumer<Throwable, RequestContext> handler)", "modifiers": "@Override public", "return": "Dispatcher<String>", "signature": "Dispatcher<String> exceptionHandler(BiConsumer<Throwable, RequestContext> handler)", "full_signature": "@Override public Dispatcher<String> exceptionHandler(BiConsumer<Throwable, RequestContext> handler)", "class_method_signature": "VertxDispatcher.exceptionHandler(BiConsumer<Throwable, RequestContext> handler)", "testcase": false, "constructor": false}, {"identifier": "handler", "parameters": "(String s, HttpMethod method,\n                                         BiConsumer<RoutingContext, RequestContext> handler)", "modifiers": "protected", "return": "Dispatcher<String>", "signature": "Dispatcher<String> handler(String s, HttpMethod method,\n                                         BiConsumer<RoutingContext, RequestContext> handler)", "full_signature": "protected Dispatcher<String> handler(String s, HttpMethod method,\n                                         BiConsumer<RoutingContext, RequestContext> handler)", "class_method_signature": "VertxDispatcher.handler(String s, HttpMethod method,\n                                         BiConsumer<RoutingContext, RequestContext> handler)", "testcase": false, "constructor": false}, {"identifier": "getVertx", "parameters": "()", "modifiers": "public", "return": "Vertx", "signature": "Vertx getVertx()", "full_signature": "public Vertx getVertx()", "class_method_signature": "VertxDispatcher.getVertx()", "testcase": false, "constructor": false}, {"identifier": "setVertx", "parameters": "(Vertx vertx)", "modifiers": "public", "return": "void", "signature": "void setVertx(Vertx vertx)", "full_signature": "public void setVertx(Vertx vertx)", "class_method_signature": "VertxDispatcher.setVertx(Vertx vertx)", "testcase": false, "constructor": false}, {"identifier": "getBodyHandler", "parameters": "()", "modifiers": "public", "return": "BodyHandler", "signature": "BodyHandler getBodyHandler()", "full_signature": "public BodyHandler getBodyHandler()", "class_method_signature": "VertxDispatcher.getBodyHandler()", "testcase": false, "constructor": false}, {"identifier": "setBodyHandler", "parameters": "(BodyHandler bodyHandler)", "modifiers": "public", "return": "void", "signature": "void setBodyHandler(BodyHandler bodyHandler)", "full_signature": "public void setBodyHandler(BodyHandler bodyHandler)", "class_method_signature": "VertxDispatcher.setBodyHandler(BodyHandler bodyHandler)", "testcase": false, "constructor": false}], "file": "com.gcplot.web/src/main/java/com/gcplot/web/vertx/VertxDispatcher.java"}, "focal_method": {"identifier": "noAuth", "parameters": "()", "modifiers": "@Override public", "return": "Dispatcher<String>", "body": "@Override\n    public Dispatcher<String> noAuth() {\n        this.requireAuth = false;\n        return this;\n    }", "signature": "Dispatcher<String> noAuth()", "full_signature": "@Override public Dispatcher<String> noAuth()", "class_method_signature": "VertxDispatcher.noAuth()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 65088801, "url": "https://github.com/dmart28/gcplot", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 113, "size": 10988, "license": "licensed"}}