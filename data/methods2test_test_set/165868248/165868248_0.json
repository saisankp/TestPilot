{"test_class": {"identifier": "AppTest", "superclass": "", "interfaces": "", "fields": [], "file": "samples/src/test/java/sample/AppTest.java"}, "test_case": {"identifier": "testAppHasAGreeting", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAppHasAGreeting() {\n    App classUnderTest = new App();\n    assertNotNull(\"app should have a connect\", classUnderTest.connect());\n  }", "signature": "void testAppHasAGreeting()", "full_signature": "@Test public void testAppHasAGreeting()", "class_method_signature": "AppTest.testAppHasAGreeting()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "connect"]}, "focal_class": {"identifier": "App", "superclass": "", "interfaces": "", "fields": [{"original_string": "CqlSession session;", "modifier": "", "type": "CqlSession", "declarator": "session", "var_name": "session"}, {"original_string": "private Logger logger = LoggerFactory.getLogger(App.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(App.class)", "var_name": "logger"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "App.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void close()", "full_signature": "private void close()", "class_method_signature": "App.close()", "testcase": false, "constructor": false}, {"identifier": "insertData", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void insertData()", "full_signature": "private void insertData()", "class_method_signature": "App.insertData()", "testcase": false, "constructor": false}, {"identifier": "queryData", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void queryData()", "full_signature": "private void queryData()", "class_method_signature": "App.queryData()", "testcase": false, "constructor": false}, {"identifier": "createDataStructure", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createDataStructure()", "full_signature": "private void createDataStructure()", "class_method_signature": "App.createDataStructure()", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "()", "modifiers": "public synchronized", "return": "Boolean", "signature": "Boolean connect()", "full_signature": "public synchronized Boolean connect()", "class_method_signature": "App.connect()", "testcase": false, "constructor": false}], "file": "samples/src/main/java/sample/App.java"}, "focal_method": {"identifier": "connect", "parameters": "()", "modifiers": "public synchronized", "return": "Boolean", "body": "public synchronized Boolean connect() {\n    logger.info(\"connecting to cassandra\");\n\n    DriverConfigLoader loader = DriverConfigLoader.programmaticBuilder()\n      .withDuration(DefaultDriverOption.REQUEST_TIMEOUT, Duration.ofSeconds(5))\n      .startProfile(\"slow\")\n      .withDuration(DefaultDriverOption.REQUEST_TIMEOUT, Duration.ofSeconds(30))\n      .endProfile()\n      .build();\n\n    session = CqlSession.builder().withConfigLoader(loader)\n      .addContactPoint(new InetSocketAddress(\"localhost\", 9041))\n      .withLocalDatacenter(\"datacenter1\")\n      .build();\n    logger.info(\"connected\");\n    return true;\n  }", "signature": "Boolean connect()", "full_signature": "public synchronized Boolean connect()", "class_method_signature": "App.connect()", "testcase": false, "constructor": false, "invocations": ["info", "build", "endProfile", "withDuration", "startProfile", "withDuration", "programmaticBuilder", "ofSeconds", "ofSeconds", "build", "withLocalDatacenter", "addContactPoint", "withConfigLoader", "builder", "info"]}, "repository": {"repo_id": 165868248, "url": "https://github.com/GenesysPureEngagePremise/cassandra-es-index", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 8, "size": 341, "license": "licensed"}}