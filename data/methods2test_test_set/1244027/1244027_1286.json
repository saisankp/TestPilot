{"test_class": {"identifier": "JcrNodeTest", "superclass": "extends MultiUseAbstractTest", "interfaces": "", "fields": [{"original_string": "private AbstractJcrNode hybrid;", "modifier": "private", "type": "AbstractJcrNode", "declarator": "hybrid", "var_name": "hybrid"}, {"original_string": "private AbstractJcrNode altima;", "modifier": "private", "type": "AbstractJcrNode", "declarator": "altima", "var_name": "altima"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/JcrNodeTest.java"}, "test_case": {"identifier": "shouldHavePath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldHavePath() throws Exception {\n        assertThat(altima.getPath(), is(\"/Cars/Hybrid/Nissan Altima\"));\n\n        javax.jcr.Node altima2 = hybrid.addNode(\"Nissan Altima\");\n        try {\n            assertThat(altima2, is(notNullValue()));\n            assertThat(altima2.getPath(), is(\"/Cars/Hybrid/Nissan Altima[2]\"));\n        } finally {\n            altima2.remove(); // remove the node we added in this test to not interfere with other tests\n        }\n    }", "signature": "void shouldHavePath()", "full_signature": "@Test public void shouldHavePath()", "class_method_signature": "JcrNodeTest.shouldHavePath()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getPath", "is", "addNode", "assertThat", "is", "notNullValue", "assertThat", "getPath", "is", "remove"]}, "focal_class": {"identifier": "JcrNode", "superclass": "extends AbstractJcrNode", "interfaces": "", "fields": [], "methods": [{"identifier": "JcrNode", "parameters": "( JcrSession session,\n             NodeKey nodeKey )", "modifiers": "", "return": "", "signature": " JcrNode( JcrSession session,\n             NodeKey nodeKey )", "full_signature": "  JcrNode( JcrSession session,\n             NodeKey nodeKey )", "class_method_signature": "JcrNode.JcrNode( JcrSession session,\n             NodeKey nodeKey )", "testcase": false, "constructor": true}, {"identifier": "isRoot", "parameters": "()", "modifiers": "@Override final", "return": "boolean", "signature": "boolean isRoot()", "full_signature": "@Override final boolean isRoot()", "class_method_signature": "JcrNode.isRoot()", "testcase": false, "constructor": false}, {"identifier": "type", "parameters": "()", "modifiers": "@Override", "return": "Type", "signature": "Type type()", "full_signature": "@Override Type type()", "class_method_signature": "JcrNode.type()", "testcase": false, "constructor": false}, {"identifier": "getIndex", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getIndex()", "full_signature": "@Override public int getIndex()", "class_method_signature": "JcrNode.getIndex()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "JcrNode.getName()", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "@Override public", "return": "AbstractJcrNode", "signature": "AbstractJcrNode getParent()", "full_signature": "@Override public AbstractJcrNode getParent()", "class_method_signature": "JcrNode.getParent()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPath()", "full_signature": "@Override public String getPath()", "class_method_signature": "JcrNode.getPath()", "testcase": false, "constructor": false}, {"identifier": "isShared", "parameters": "()", "modifiers": "@Override", "return": "boolean", "signature": "boolean isShared()", "full_signature": "@Override boolean isShared()", "class_method_signature": "JcrNode.isShared()", "testcase": false, "constructor": false}, {"identifier": "doRemove", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doRemove()", "full_signature": "@Override protected void doRemove()", "class_method_signature": "JcrNode.doRemove()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/JcrNode.java"}, "focal_method": {"identifier": "getPath", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getPath() throws RepositoryException {\n        // checkSession(); ideally we don't have to do this, because getting the path is a useful thing and is used in 'toString'\n        return path().getString(namespaces());\n    }", "signature": "String getPath()", "full_signature": "@Override public String getPath()", "class_method_signature": "JcrNode.getPath()", "testcase": false, "constructor": false, "invocations": ["getString", "path", "namespaces"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}