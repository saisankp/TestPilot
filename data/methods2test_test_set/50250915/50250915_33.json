{"test_class": {"identifier": "GithubServerTest", "superclass": "extends PipelineBaseTest", "interfaces": "", "fields": [{"original_string": "@Rule\n    public WireMockRule wireMockRule = new WireMockRule(\n        wireMockConfig()\n            .dynamicPort()\n            .usingFilesUnderClasspath(\"server-api\")\n    );", "modifier": "@Rule\n    public", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(\n        wireMockConfig()\n            .dynamicPort()\n            .usingFilesUnderClasspath(\"server-api\")\n    )", "var_name": "wireMockRule"}, {"original_string": "String token;", "modifier": "", "type": "String", "declarator": "token", "var_name": "token"}], "file": "blueocean-github-pipeline/src/test/java/io/jenkins/blueocean/blueocean_github_pipeline/GithubServerTest.java"}, "test_case": {"identifier": "testServerGithubEnterpriseTopLevelUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testServerGithubEnterpriseTopLevelUrl() throws Exception {\n        // Create a server\n        Map resp = request()\n            .status(400)\n            .jwtToken(token)\n            .crumb( crumb )\n            .data(ImmutableMap.of(\n                \"name\", \"My Server\",\n                \"apiUrl\", getApiUrl()\n            ))\n            .post(\"/organizations/jenkins/scm/github-enterprise/servers/\")\n            .build(Map.class);\n\n        List errors = (List) resp.get(\"errors\");\n        Assert.assertEquals(1, errors.size());\n\n        Map error1 = (Map) errors.get(0);\n        Assert.assertEquals(\"apiUrl\", error1.get(\"field\"));\n        Assert.assertEquals(GithubServerContainer.ERROR_MESSAGE_INVALID_APIURL, error1.get(\"message\"));\n        Assert.assertEquals(\"INVALID\", error1.get(\"code\"));\n    }", "signature": "void testServerGithubEnterpriseTopLevelUrl()", "full_signature": "@Test public void testServerGithubEnterpriseTopLevelUrl()", "class_method_signature": "GithubServerTest.testServerGithubEnterpriseTopLevelUrl()", "testcase": true, "constructor": false, "invocations": ["build", "post", "data", "crumb", "jwtToken", "status", "request", "of", "getApiUrl", "get", "assertEquals", "size", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "GithubServer", "superclass": "extends ScmServerEndpoint", "interfaces": "", "fields": [{"original_string": "private final Endpoint endpoint;", "modifier": "private final", "type": "Endpoint", "declarator": "endpoint", "var_name": "endpoint"}, {"original_string": "private final Link parent;", "modifier": "private final", "type": "Link", "declarator": "parent", "var_name": "parent"}], "methods": [{"identifier": "GithubServer", "parameters": "(Endpoint endpoint, Link parent)", "modifiers": "", "return": "", "signature": " GithubServer(Endpoint endpoint, Link parent)", "full_signature": "  GithubServer(Endpoint endpoint, Link parent)", "class_method_signature": "GithubServer.GithubServer(Endpoint endpoint, Link parent)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "GithubServer.getId()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "GithubServer.getName()", "testcase": false, "constructor": false}, {"identifier": "getApiUrl", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getApiUrl()", "full_signature": "@Override public String getApiUrl()", "class_method_signature": "GithubServer.getApiUrl()", "testcase": false, "constructor": false}, {"identifier": "getLink", "parameters": "()", "modifiers": "@Override public", "return": "Link", "signature": "Link getLink()", "full_signature": "@Override public Link getLink()", "class_method_signature": "GithubServer.getLink()", "testcase": false, "constructor": false}], "file": "blueocean-github-pipeline/src/main/java/io/jenkins/blueocean/blueocean_github_pipeline/GithubServer.java"}, "focal_method": {"identifier": "getApiUrl", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getApiUrl() {\n        return endpoint.getApiUri();\n    }", "signature": "String getApiUrl()", "full_signature": "@Override public String getApiUrl()", "class_method_signature": "GithubServer.getApiUrl()", "testcase": false, "constructor": false, "invocations": ["getApiUri"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}