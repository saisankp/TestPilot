{"test_class": {"identifier": "SimplePhenotypeRepresentationTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "protected PhenotypeRepresentation representation;", "modifier": "protected", "type": "PhenotypeRepresentation", "declarator": "representation", "var_name": "representation"}], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/representations/phenotype/SimplePhenotypeRepresentationTest.java"}, "test_case": {"identifier": "testGetDoubleValue", "parameters": "()", "modifiers": "@Test // test that arrays are equal but not the same public", "return": "void", "body": "@Test\n    // test that arrays are equal but not the same\n    public void testGetDoubleValue() throws Exception {\n        double[] input = new double[]{1.2, 4.8, 6.3, 9.9, 10E18};\n        this.representation.setDoubleValue(input);\n        double[] output = this.representation.getDoubleValue();\n        Assert.assertArrayEquals(input, output, 0.0d);\n        Assert.assertNotSame(input, output);\n    }", "signature": "void testGetDoubleValue()", "full_signature": "@Test // test that arrays are equal but not the same public void testGetDoubleValue()", "class_method_signature": "SimplePhenotypeRepresentationTest.testGetDoubleValue()", "testcase": true, "constructor": false, "invocations": ["setDoubleValue", "getDoubleValue", "assertArrayEquals", "assertNotSame"]}, "focal_class": {"identifier": "SimplePhenotypeRepresentation", "superclass": "", "interfaces": "implements PhenotypeRepresentation", "fields": [{"original_string": "private double[] representation;", "modifier": "private", "type": "double[]", "declarator": "representation", "var_name": "representation"}], "methods": [{"identifier": "SimplePhenotypeRepresentation", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimplePhenotypeRepresentation()", "full_signature": "public  SimplePhenotypeRepresentation()", "class_method_signature": "SimplePhenotypeRepresentation.SimplePhenotypeRepresentation()", "testcase": false, "constructor": true}, {"identifier": "SimplePhenotypeRepresentation", "parameters": "(double[] phenotypeValue)", "modifiers": "public", "return": "", "signature": " SimplePhenotypeRepresentation(double[] phenotypeValue)", "full_signature": "public  SimplePhenotypeRepresentation(double[] phenotypeValue)", "class_method_signature": "SimplePhenotypeRepresentation.SimplePhenotypeRepresentation(double[] phenotypeValue)", "testcase": false, "constructor": true}, {"identifier": "SimplePhenotypeRepresentation", "parameters": "(SimplePhenotypeRepresentation second)", "modifiers": "public", "return": "", "signature": " SimplePhenotypeRepresentation(SimplePhenotypeRepresentation second)", "full_signature": "public  SimplePhenotypeRepresentation(SimplePhenotypeRepresentation second)", "class_method_signature": "SimplePhenotypeRepresentation.SimplePhenotypeRepresentation(SimplePhenotypeRepresentation second)", "testcase": false, "constructor": true}, {"identifier": "getDoubleValue", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getDoubleValue()", "full_signature": "public double[] getDoubleValue()", "class_method_signature": "SimplePhenotypeRepresentation.getDoubleValue()", "testcase": false, "constructor": false}, {"identifier": "setDoubleValue", "parameters": "(double[] phenotypeValue)", "modifiers": "public", "return": "void", "signature": "void setDoubleValue(double[] phenotypeValue)", "full_signature": "public void setDoubleValue(double[] phenotypeValue)", "class_method_signature": "SimplePhenotypeRepresentation.setDoubleValue(double[] phenotypeValue)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "public", "return": "Representation", "signature": "Representation copy()", "full_signature": "public Representation copy()", "class_method_signature": "SimplePhenotypeRepresentation.copy()", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/representations/phenotype/SimplePhenotypeRepresentation.java"}, "focal_method": {"identifier": "getDoubleValue", "parameters": "()", "modifiers": "public", "return": "double[]", "body": "public double[] getDoubleValue() {\n        if (this.representation != null){\n            return Arrays.copyOf(this.representation, this.representation.length);\n        } else {\n            return new double[0];\n        }\n\n    }", "signature": "double[] getDoubleValue()", "full_signature": "public double[] getDoubleValue()", "class_method_signature": "SimplePhenotypeRepresentation.getDoubleValue()", "testcase": false, "constructor": false, "invocations": ["copyOf"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}