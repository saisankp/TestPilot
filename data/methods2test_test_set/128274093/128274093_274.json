{"test_class": {"identifier": "BackpressureHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/util/BackpressureHelperTest.java"}, "test_case": {"identifier": "producedMore", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void producedMore() {\n        List<Throwable> list = TestHelper.trackPluginErrors();\n\n        try {\n            AtomicLong requested = new AtomicLong(1);\n\n            assertEquals(0, BackpressureHelper.produced(requested, 2));\n\n            TestHelper.assertError(list, 0, IllegalStateException.class, \"More produced than requested: -1\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }", "signature": "void producedMore()", "full_signature": "@Test public void producedMore()", "class_method_signature": "BackpressureHelperTest.producedMore()", "testcase": true, "constructor": false, "invocations": ["trackPluginErrors", "assertEquals", "produced", "assertError", "reset"]}, "focal_class": {"identifier": "BackpressureHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "BackpressureHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " BackpressureHelper()", "full_signature": "private  BackpressureHelper()", "class_method_signature": "BackpressureHelper.BackpressureHelper()", "testcase": false, "constructor": true}, {"identifier": "addCap", "parameters": "(long a, long b)", "modifiers": "public static", "return": "long", "signature": "long addCap(long a, long b)", "full_signature": "public static long addCap(long a, long b)", "class_method_signature": "BackpressureHelper.addCap(long a, long b)", "testcase": false, "constructor": false}, {"identifier": "multiplyCap", "parameters": "(long a, long b)", "modifiers": "public static", "return": "long", "signature": "long multiplyCap(long a, long b)", "full_signature": "public static long multiplyCap(long a, long b)", "class_method_signature": "BackpressureHelper.multiplyCap(long a, long b)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(AtomicLong requested, long n)", "modifiers": "public static", "return": "long", "signature": "long add(AtomicLong requested, long n)", "full_signature": "public static long add(AtomicLong requested, long n)", "class_method_signature": "BackpressureHelper.add(AtomicLong requested, long n)", "testcase": false, "constructor": false}, {"identifier": "addCancel", "parameters": "(AtomicLong requested, long n)", "modifiers": "public static", "return": "long", "signature": "long addCancel(AtomicLong requested, long n)", "full_signature": "public static long addCancel(AtomicLong requested, long n)", "class_method_signature": "BackpressureHelper.addCancel(AtomicLong requested, long n)", "testcase": false, "constructor": false}, {"identifier": "produced", "parameters": "(AtomicLong requested, long n)", "modifiers": "public static", "return": "long", "signature": "long produced(AtomicLong requested, long n)", "full_signature": "public static long produced(AtomicLong requested, long n)", "class_method_signature": "BackpressureHelper.produced(AtomicLong requested, long n)", "testcase": false, "constructor": false}, {"identifier": "producedCancel", "parameters": "(AtomicLong requested, long n)", "modifiers": "public static", "return": "long", "signature": "long producedCancel(AtomicLong requested, long n)", "full_signature": "public static long producedCancel(AtomicLong requested, long n)", "class_method_signature": "BackpressureHelper.producedCancel(AtomicLong requested, long n)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/util/BackpressureHelper.java"}, "focal_method": {"identifier": "produced", "parameters": "(AtomicLong requested, long n)", "modifiers": "public static", "return": "long", "body": "public static long produced(AtomicLong requested, long n) {\n        for (;;) {\n            long current = requested.get();\n            if (current == Long.MAX_VALUE) {\n                return Long.MAX_VALUE;\n            }\n            long update = current - n;\n            if (update < 0L) {\n                RxJavaPlugins.onError(new IllegalStateException(\"More produced than requested: \" + update));\n                update = 0L;\n            }\n            if (requested.compareAndSet(current, update)) {\n                return update;\n            }\n        }\n    }", "signature": "long produced(AtomicLong requested, long n)", "full_signature": "public static long produced(AtomicLong requested, long n)", "class_method_signature": "BackpressureHelper.produced(AtomicLong requested, long n)", "testcase": false, "constructor": false, "invocations": ["get", "onError", "compareAndSet"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}