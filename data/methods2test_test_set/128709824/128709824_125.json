{"test_class": {"identifier": "NetUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/api/src/test/java/com/alipay/sofa/rpc/common/utils/NetUtilsTest.java"}, "test_case": {"identifier": "toIpString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toIpString() throws Exception {\n    }", "signature": "void toIpString()", "full_signature": "@Test public void toIpString()", "class_method_signature": "NetUtilsTest.toIpString()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "NetUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger LOGGER   = LoggerFactory.getLogger(NetUtils.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER   = LoggerFactory.getLogger(NetUtils.class)", "var_name": "LOGGER"}, {"original_string": "private static final int    MIN_PORT = 0;", "modifier": "private static final", "type": "int", "declarator": "MIN_PORT = 0", "var_name": "MIN_PORT"}, {"original_string": "private static final int    MAX_PORT = 65535;", "modifier": "private static final", "type": "int", "declarator": "MAX_PORT = 65535", "var_name": "MAX_PORT"}, {"original_string": "public static final String   ANYHOST          = \"0.0.0.0\";", "modifier": "public static final", "type": "String", "declarator": "ANYHOST          = \"0.0.0.0\"", "var_name": "ANYHOST"}, {"original_string": "private static final Pattern LOCAL_IP_PATTERN = Pattern.compile(\"127(\\\\.\\\\d{1,3}){3}$\");", "modifier": "private static final", "type": "Pattern", "declarator": "LOCAL_IP_PATTERN = Pattern.compile(\"127(\\\\.\\\\d{1,3}){3}$\")", "var_name": "LOCAL_IP_PATTERN"}, {"original_string": "public static final Pattern  IPV4_PATTERN     = Pattern\n                                                      .compile(\n                                                      \"^(25[0-5]|2[0-4]\\\\d|[0-1]?\\\\d?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|[0-1]?\\\\d?\\\\d)){3}$\");", "modifier": "public static final", "type": "Pattern", "declarator": "IPV4_PATTERN     = Pattern\n                                                      .compile(\n                                                      \"^(25[0-5]|2[0-4]\\\\d|[0-1]?\\\\d?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|[0-1]?\\\\d?\\\\d)){3}$\")", "var_name": "IPV4_PATTERN"}], "methods": [{"identifier": "isInvalidPort", "parameters": "(int port)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInvalidPort(int port)", "full_signature": "public static boolean isInvalidPort(int port)", "class_method_signature": "NetUtils.isInvalidPort(int port)", "testcase": false, "constructor": false}, {"identifier": "isRandomPort", "parameters": "(int port)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRandomPort(int port)", "full_signature": "public static boolean isRandomPort(int port)", "class_method_signature": "NetUtils.isRandomPort(int port)", "testcase": false, "constructor": false}, {"identifier": "getAvailablePort", "parameters": "(String host, int port)", "modifiers": "public static", "return": "int", "signature": "int getAvailablePort(String host, int port)", "full_signature": "public static int getAvailablePort(String host, int port)", "class_method_signature": "NetUtils.getAvailablePort(String host, int port)", "testcase": false, "constructor": false}, {"identifier": "getAvailablePort", "parameters": "(String host, int port, int maxPort)", "modifiers": "public static", "return": "int", "signature": "int getAvailablePort(String host, int port, int maxPort)", "full_signature": "public static int getAvailablePort(String host, int port, int maxPort)", "class_method_signature": "NetUtils.getAvailablePort(String host, int port, int maxPort)", "testcase": false, "constructor": false}, {"identifier": "isLocalHost", "parameters": "(String host)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLocalHost(String host)", "full_signature": "public static boolean isLocalHost(String host)", "class_method_signature": "NetUtils.isLocalHost(String host)", "testcase": false, "constructor": false}, {"identifier": "isAnyHost", "parameters": "(String host)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAnyHost(String host)", "full_signature": "public static boolean isAnyHost(String host)", "class_method_signature": "NetUtils.isAnyHost(String host)", "testcase": false, "constructor": false}, {"identifier": "isIPv4Host", "parameters": "(String host)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIPv4Host(String host)", "full_signature": "public static boolean isIPv4Host(String host)", "class_method_signature": "NetUtils.isIPv4Host(String host)", "testcase": false, "constructor": false}, {"identifier": "isInvalidLocalHost", "parameters": "(String host)", "modifiers": "static", "return": "boolean", "signature": "boolean isInvalidLocalHost(String host)", "full_signature": "static boolean isInvalidLocalHost(String host)", "class_method_signature": "NetUtils.isInvalidLocalHost(String host)", "testcase": false, "constructor": false}, {"identifier": "isValidAddress", "parameters": "(InetAddress address)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidAddress(InetAddress address)", "full_signature": "private static boolean isValidAddress(InetAddress address)", "class_method_signature": "NetUtils.isValidAddress(InetAddress address)", "testcase": false, "constructor": false}, {"identifier": "isHostInNetworkCard", "parameters": "(String host)", "modifiers": "public static", "return": "boolean", "signature": "boolean isHostInNetworkCard(String host)", "full_signature": "public static boolean isHostInNetworkCard(String host)", "class_method_signature": "NetUtils.isHostInNetworkCard(String host)", "testcase": false, "constructor": false}, {"identifier": "getLocalIpv4", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getLocalIpv4()", "full_signature": "public static String getLocalIpv4()", "class_method_signature": "NetUtils.getLocalIpv4()", "testcase": false, "constructor": false}, {"identifier": "getLocalAddress", "parameters": "()", "modifiers": "public static", "return": "InetAddress", "signature": "InetAddress getLocalAddress()", "full_signature": "public static InetAddress getLocalAddress()", "class_method_signature": "NetUtils.getLocalAddress()", "testcase": false, "constructor": false}, {"identifier": "toAddressString", "parameters": "(InetSocketAddress address)", "modifiers": "public static", "return": "String", "signature": "String toAddressString(InetSocketAddress address)", "full_signature": "public static String toAddressString(InetSocketAddress address)", "class_method_signature": "NetUtils.toAddressString(InetSocketAddress address)", "testcase": false, "constructor": false}, {"identifier": "toIpString", "parameters": "(InetSocketAddress address)", "modifiers": "public static", "return": "String", "signature": "String toIpString(InetSocketAddress address)", "full_signature": "public static String toIpString(InetSocketAddress address)", "class_method_signature": "NetUtils.toIpString(InetSocketAddress address)", "testcase": false, "constructor": false}, {"identifier": "getLocalHostByRegistry", "parameters": "(String registryIp)", "modifiers": "public static", "return": "String", "signature": "String getLocalHostByRegistry(String registryIp)", "full_signature": "public static String getLocalHostByRegistry(String registryIp)", "class_method_signature": "NetUtils.getLocalHostByRegistry(String registryIp)", "testcase": false, "constructor": false}, {"identifier": "getLocalHostBySocket", "parameters": "(InetSocketAddress remoteAddress)", "modifiers": "private static", "return": "InetAddress", "signature": "InetAddress getLocalHostBySocket(InetSocketAddress remoteAddress)", "full_signature": "private static InetAddress getLocalHostBySocket(InetSocketAddress remoteAddress)", "class_method_signature": "NetUtils.getLocalHostBySocket(InetSocketAddress remoteAddress)", "testcase": false, "constructor": false}, {"identifier": "getIpListByRegistry", "parameters": "(String registryIp)", "modifiers": "public static", "return": "List<InetSocketAddress>", "signature": "List<InetSocketAddress> getIpListByRegistry(String registryIp)", "full_signature": "public static List<InetSocketAddress> getIpListByRegistry(String registryIp)", "class_method_signature": "NetUtils.getIpListByRegistry(String registryIp)", "testcase": false, "constructor": false}, {"identifier": "isMatchIPByPattern", "parameters": "(String whiteList, String localIP)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatchIPByPattern(String whiteList, String localIP)", "full_signature": "public static boolean isMatchIPByPattern(String whiteList, String localIP)", "class_method_signature": "NetUtils.isMatchIPByPattern(String whiteList, String localIP)", "testcase": false, "constructor": false}, {"identifier": "connectToString", "parameters": "(InetSocketAddress local, InetSocketAddress remote)", "modifiers": "public static", "return": "String", "signature": "String connectToString(InetSocketAddress local, InetSocketAddress remote)", "full_signature": "public static String connectToString(InetSocketAddress local, InetSocketAddress remote)", "class_method_signature": "NetUtils.connectToString(InetSocketAddress local, InetSocketAddress remote)", "testcase": false, "constructor": false}, {"identifier": "channelToString", "parameters": "(SocketAddress local1, SocketAddress remote1)", "modifiers": "public static", "return": "String", "signature": "String channelToString(SocketAddress local1, SocketAddress remote1)", "full_signature": "public static String channelToString(SocketAddress local1, SocketAddress remote1)", "class_method_signature": "NetUtils.channelToString(SocketAddress local1, SocketAddress remote1)", "testcase": false, "constructor": false}, {"identifier": "canTelnet", "parameters": "(String ip, int port, int timeout)", "modifiers": "public static", "return": "boolean", "signature": "boolean canTelnet(String ip, int port, int timeout)", "full_signature": "public static boolean canTelnet(String ip, int port, int timeout)", "class_method_signature": "NetUtils.canTelnet(String ip, int port, int timeout)", "testcase": false, "constructor": false}, {"identifier": "joinMulticastGroup", "parameters": "(MulticastSocket multicastSocket, InetAddress multicastAddress)", "modifiers": "public static", "return": "void", "signature": "void joinMulticastGroup(MulticastSocket multicastSocket, InetAddress multicastAddress)", "full_signature": "public static void joinMulticastGroup(MulticastSocket multicastSocket, InetAddress multicastAddress)", "class_method_signature": "NetUtils.joinMulticastGroup(MulticastSocket multicastSocket, InetAddress multicastAddress)", "testcase": false, "constructor": false}, {"identifier": "setInterface", "parameters": "(MulticastSocket multicastSocket, boolean preferIpv6)", "modifiers": "public static", "return": "void", "signature": "void setInterface(MulticastSocket multicastSocket, boolean preferIpv6)", "full_signature": "public static void setInterface(MulticastSocket multicastSocket, boolean preferIpv6)", "class_method_signature": "NetUtils.setInterface(MulticastSocket multicastSocket, boolean preferIpv6)", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/common/utils/NetUtils.java"}, "focal_method": {"identifier": "toIpString", "parameters": "(InetSocketAddress address)", "modifiers": "public static", "return": "String", "body": "public static String toIpString(InetSocketAddress address) {\n        if (address == null) {\n            return null;\n        } else {\n            InetAddress inetAddress = address.getAddress();\n            return inetAddress == null ? address.getHostName() :\n                inetAddress.getHostAddress();\n        }\n    }", "signature": "String toIpString(InetSocketAddress address)", "full_signature": "public static String toIpString(InetSocketAddress address)", "class_method_signature": "NetUtils.toIpString(InetSocketAddress address)", "testcase": false, "constructor": false, "invocations": ["getAddress", "getHostName", "getHostAddress"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}