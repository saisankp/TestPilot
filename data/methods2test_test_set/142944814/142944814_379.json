{"test_class": {"identifier": "AergoKeyTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "protected final ChainIdHash chainIdHash = ChainIdHash.of(BytesValue.EMPTY);", "modifier": "protected final", "type": "ChainIdHash", "declarator": "chainIdHash = ChainIdHash.of(BytesValue.EMPTY)", "var_name": "chainIdHash"}], "file": "core/common/src/test/java/hera/key/AergoKeyTest.java"}, "test_case": {"identifier": "testSignAndVerifyTransaction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSignAndVerifyTransaction() throws Exception {\n    final AergoSignVerifier verifier = new AergoSignVerifier();\n    for (int i = 0; i < N_TEST; ++i) {\n      final AergoKey key = new AergoKeyGenerator().create();\n      final RawTransaction rawTransaction = RawTransaction.newBuilder(chainIdHash)\n          .from(key.getAddress())\n          .to(key.getAddress())\n          .amount(\"10000\", Unit.AER)\n          .nonce(1L)\n          .build();\n      final Transaction signedTransaction = key.sign(rawTransaction);\n      assertTrue(verifier.verify(signedTransaction));\n    }\n  }", "signature": "void testSignAndVerifyTransaction()", "full_signature": "@Test public void testSignAndVerifyTransaction()", "class_method_signature": "AergoKeyTest.testSignAndVerifyTransaction()", "testcase": true, "constructor": false, "invocations": ["create", "build", "nonce", "amount", "to", "from", "newBuilder", "getAddress", "getAddress", "sign", "assertTrue", "verify"]}, "focal_class": {"identifier": "AergoKey", "superclass": "", "interfaces": "implements KeyPair, Signer", "fields": [{"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "protected final ECDSAKey ecdsakey;", "modifier": "protected final", "type": "ECDSAKey", "declarator": "ecdsakey", "var_name": "ecdsakey"}, {"original_string": "@Getter\n  protected final AccountAddress address;", "modifier": "@Getter\n  protected final", "type": "AccountAddress", "declarator": "address", "var_name": "address"}], "methods": [{"identifier": "of", "parameters": "(final String encodedEncryptedPrivateKey, final String passphrase)", "modifiers": "public static", "return": "AergoKey", "signature": "AergoKey of(final String encodedEncryptedPrivateKey, final String passphrase)", "full_signature": "public static AergoKey of(final String encodedEncryptedPrivateKey, final String passphrase)", "class_method_signature": "AergoKey.of(final String encodedEncryptedPrivateKey, final String passphrase)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final EncryptedPrivateKey encryptedPrivateKey,\n      final String passphrase)", "modifiers": "public static", "return": "AergoKey", "signature": "AergoKey of(final EncryptedPrivateKey encryptedPrivateKey,\n      final String passphrase)", "full_signature": "public static AergoKey of(final EncryptedPrivateKey encryptedPrivateKey,\n      final String passphrase)", "class_method_signature": "AergoKey.of(final EncryptedPrivateKey encryptedPrivateKey,\n      final String passphrase)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final KeyFormat keyFormat, final String passphrase)", "modifiers": "public static", "return": "AergoKey", "signature": "AergoKey of(final KeyFormat keyFormat, final String passphrase)", "full_signature": "public static AergoKey of(final KeyFormat keyFormat, final String passphrase)", "class_method_signature": "AergoKey.of(final KeyFormat keyFormat, final String passphrase)", "testcase": false, "constructor": false}, {"identifier": "AergoKey", "parameters": "(final String encodedEncryptedPrivateKey, final String passphrase)", "modifiers": "public", "return": "", "signature": " AergoKey(final String encodedEncryptedPrivateKey, final String passphrase)", "full_signature": "public  AergoKey(final String encodedEncryptedPrivateKey, final String passphrase)", "class_method_signature": "AergoKey.AergoKey(final String encodedEncryptedPrivateKey, final String passphrase)", "testcase": false, "constructor": true}, {"identifier": "AergoKey", "parameters": "(final EncryptedPrivateKey encryptedPrivateKey, final String passphrase)", "modifiers": "public", "return": "", "signature": " AergoKey(final EncryptedPrivateKey encryptedPrivateKey, final String passphrase)", "full_signature": "public  AergoKey(final EncryptedPrivateKey encryptedPrivateKey, final String passphrase)", "class_method_signature": "AergoKey.AergoKey(final EncryptedPrivateKey encryptedPrivateKey, final String passphrase)", "testcase": false, "constructor": true}, {"identifier": "AergoKey", "parameters": "(final KeyFormat keyFormat, final String passphrase)", "modifiers": "public", "return": "", "signature": " AergoKey(final KeyFormat keyFormat, final String passphrase)", "full_signature": "public  AergoKey(final KeyFormat keyFormat, final String passphrase)", "class_method_signature": "AergoKey.AergoKey(final KeyFormat keyFormat, final String passphrase)", "testcase": false, "constructor": true}, {"identifier": "AergoKey", "parameters": "(final KeyCipherStrategy<T> strategy,\n      final T encrypted, final String passphrase)", "modifiers": "protected", "return": "<T extends Encrypted>", "signature": "<T extends Encrypted> AergoKey(final KeyCipherStrategy<T> strategy,\n      final T encrypted, final String passphrase)", "full_signature": "protected <T extends Encrypted> AergoKey(final KeyCipherStrategy<T> strategy,\n      final T encrypted, final String passphrase)", "class_method_signature": "AergoKey.AergoKey(final KeyCipherStrategy<T> strategy,\n      final T encrypted, final String passphrase)", "testcase": false, "constructor": true}, {"identifier": "AergoKey", "parameters": "(final ECDSAKey ecdsakey)", "modifiers": "public", "return": "", "signature": " AergoKey(final ECDSAKey ecdsakey)", "full_signature": "public  AergoKey(final ECDSAKey ecdsakey)", "class_method_signature": "AergoKey.AergoKey(final ECDSAKey ecdsakey)", "testcase": false, "constructor": true}, {"identifier": "getPrivateKey", "parameters": "()", "modifiers": "@Override public", "return": "PrivateKey", "signature": "PrivateKey getPrivateKey()", "full_signature": "@Override public PrivateKey getPrivateKey()", "class_method_signature": "AergoKey.getPrivateKey()", "testcase": false, "constructor": false}, {"identifier": "getPublicKey", "parameters": "()", "modifiers": "@Override public", "return": "PublicKey", "signature": "PublicKey getPublicKey()", "full_signature": "@Override public PublicKey getPublicKey()", "class_method_signature": "AergoKey.getPublicKey()", "testcase": false, "constructor": false}, {"identifier": "getPrincipal", "parameters": "()", "modifiers": "@Override public", "return": "AccountAddress", "signature": "AccountAddress getPrincipal()", "full_signature": "@Override public AccountAddress getPrincipal()", "class_method_signature": "AergoKey.getPrincipal()", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(final RawTransaction rawTransaction)", "modifiers": "@Override public", "return": "Transaction", "signature": "Transaction sign(final RawTransaction rawTransaction)", "full_signature": "@Override public Transaction sign(final RawTransaction rawTransaction)", "class_method_signature": "AergoKey.sign(final RawTransaction rawTransaction)", "testcase": false, "constructor": false}, {"identifier": "signMessage", "parameters": "(final BytesValue message)", "modifiers": "@Override public", "return": "Signature", "signature": "Signature signMessage(final BytesValue message)", "full_signature": "@Override public Signature signMessage(final BytesValue message)", "class_method_signature": "AergoKey.signMessage(final BytesValue message)", "testcase": false, "constructor": false}, {"identifier": "signMessage", "parameters": "(final Hash hashedMessage)", "modifiers": "@Override public", "return": "Signature", "signature": "Signature signMessage(final Hash hashedMessage)", "full_signature": "@Override public Signature signMessage(final Hash hashedMessage)", "class_method_signature": "AergoKey.signMessage(final Hash hashedMessage)", "testcase": false, "constructor": false}, {"identifier": "export", "parameters": "(final String passphrase)", "modifiers": "public", "return": "EncryptedPrivateKey", "signature": "EncryptedPrivateKey export(final String passphrase)", "full_signature": "public EncryptedPrivateKey export(final String passphrase)", "class_method_signature": "AergoKey.export(final String passphrase)", "testcase": false, "constructor": false}, {"identifier": "export", "parameters": "(final KeyCipherStrategy<T> strategy,\n      final String passphrase)", "modifiers": "protected", "return": "T", "signature": "T export(final KeyCipherStrategy<T> strategy,\n      final String passphrase)", "full_signature": "protected T export(final KeyCipherStrategy<T> strategy,\n      final String passphrase)", "class_method_signature": "AergoKey.export(final KeyCipherStrategy<T> strategy,\n      final String passphrase)", "testcase": false, "constructor": false}, {"identifier": "exportAsWif", "parameters": "(final String passphrase)", "modifiers": "public", "return": "EncryptedPrivateKey", "signature": "EncryptedPrivateKey exportAsWif(final String passphrase)", "full_signature": "public EncryptedPrivateKey exportAsWif(final String passphrase)", "class_method_signature": "AergoKey.exportAsWif(final String passphrase)", "testcase": false, "constructor": false}, {"identifier": "exportAsKeyFormat", "parameters": "(final String passphrase)", "modifiers": "public", "return": "KeyFormat", "signature": "KeyFormat exportAsKeyFormat(final String passphrase)", "full_signature": "public KeyFormat exportAsKeyFormat(final String passphrase)", "class_method_signature": "AergoKey.exportAsKeyFormat(final String passphrase)", "testcase": false, "constructor": false}, {"identifier": "getRawPrivateKey", "parameters": "()", "modifiers": "public", "return": "BytesValue", "signature": "BytesValue getRawPrivateKey()", "full_signature": "public BytesValue getRawPrivateKey()", "class_method_signature": "AergoKey.getRawPrivateKey()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AergoKey.toString()", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/hera/key/AergoKey.java"}, "focal_method": {"identifier": "sign", "parameters": "(final RawTransaction rawTransaction)", "modifiers": "@Override public", "return": "Transaction", "body": "@Override\n  public Transaction sign(final RawTransaction rawTransaction) {\n    try {\n      logger.debug(\"Sign raw transaction: {}\", rawTransaction);\n      final TxHash withoutSignature = rawTransaction.calculateHash();\n      final ECDSASignature ecdsaSignature =\n          ecdsakey.sign(withoutSignature.getBytesValue().getValue());\n      final Signature signature = serialize(ecdsaSignature);\n      logger.trace(\"Raw signature: {}\", ecdsaSignature);\n      logger.trace(\"Serialized signature: {}\", signature);\n      final TxHash withSignature = rawTransaction.calculateHash(signature);\n      final Transaction transaction = Transaction.newBuilder()\n          .rawTransaction(rawTransaction)\n          .signature(signature)\n          .hash(withSignature)\n          .build();\n      return transaction;\n    } catch (HerajException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new HerajException(e);\n    }\n  }", "signature": "Transaction sign(final RawTransaction rawTransaction)", "full_signature": "@Override public Transaction sign(final RawTransaction rawTransaction)", "class_method_signature": "AergoKey.sign(final RawTransaction rawTransaction)", "testcase": false, "constructor": false, "invocations": ["debug", "calculateHash", "sign", "getValue", "getBytesValue", "serialize", "trace", "trace", "calculateHash", "build", "hash", "signature", "rawTransaction", "newBuilder"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}