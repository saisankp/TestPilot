{"test_class": {"identifier": "SocketIoNamespaceImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "socket.io-server/src/test/java/io/socket/socketio/server/SocketIoNamespaceImplTest.java"}, "test_case": {"identifier": "test_broadcast_one_room", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_broadcast_one_room() {\n        final SocketIoAdapter adapter = Mockito.mock(SocketIoAdapter.class);\n        Mockito.doCallRealMethod().when(adapter)\n                .broadcast(Mockito.any(Packet.class), Mockito.any(String[].class));\n        Mockito.doAnswer(invocationOnMock -> {\n            final Packet packet = invocationOnMock.getArgument(0);\n            final String[] rooms = invocationOnMock.getArgument(1);\n            final String[] socketsExcluded = invocationOnMock.getArgument(2);\n\n            assertEquals(Parser.EVENT, packet.type);\n            assertNotNull(packet.data);\n            assertEquals(JSONArray.class, packet.data.getClass());\n            assertEquals(1, ((JSONArray) packet.data).length());\n            assertEquals(\"bar\", ((JSONArray) packet.data).get(0));\n\n            assertNotNull(rooms);\n            assertEquals(1, rooms.length);\n            assertEquals(\"foo\", rooms[0]);\n\n            assertNull(socketsExcluded);\n\n            return null;\n        }).when(adapter).broadcast(Mockito.any(Packet.class), Mockito.any(String[].class), Mockito.isNull());\n\n        final SocketIoAdapter.AdapterFactory adapterFactory = Mockito.mock(SocketIoAdapter.AdapterFactory.class);\n        Mockito.doAnswer(invocationOnMock -> adapter)\n                .when(adapterFactory)\n                .createAdapter(Mockito.any(SocketIoNamespaceImpl.class));\n\n        final SocketIoServer server = Mockito.spy(new SocketIoServer(\n                new EngineIoServer(),\n                SocketIoServerOptions.newFromDefault()\n                        .setAdapterFactory(adapterFactory)));\n        final SocketIoNamespace namespace = server.namespace(\"/\");\n\n        namespace.broadcast(\"foo\", \"bar\");\n        Mockito.verify(adapter, Mockito.times(1))\n                .broadcast(Mockito.any(Packet.class), Mockito.any(String[].class), Mockito.isNull());\n    }", "signature": "void test_broadcast_one_room()", "full_signature": "@Test public void test_broadcast_one_room()", "class_method_signature": "SocketIoNamespaceImplTest.test_broadcast_one_room()", "testcase": true, "constructor": false, "invocations": ["mock", "broadcast", "when", "doCallRealMethod", "any", "any", "broadcast", "when", "doAnswer", "getArgument", "getArgument", "getArgument", "assertEquals", "assertNotNull", "assertEquals", "getClass", "assertEquals", "length", "assertEquals", "get", "assertNotNull", "assertEquals", "assertEquals", "assertNull", "any", "any", "isNull", "mock", "createAdapter", "when", "doAnswer", "any", "spy", "setAdapterFactory", "newFromDefault", "namespace", "broadcast", "broadcast", "verify", "times", "any", "any", "isNull"]}, "focal_class": {"identifier": "SocketIoNamespaceImpl", "superclass": "extends SocketIoNamespace", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"MismatchedQueryAndUpdateOfCollection\")\n    private final Map<String, SocketIoSocket> mSockets = new ConcurrentHashMap<>();", "modifier": "@SuppressWarnings(\"MismatchedQueryAndUpdateOfCollection\")\n    private final", "type": "Map<String, SocketIoSocket>", "declarator": "mSockets = new ConcurrentHashMap<>()", "var_name": "mSockets"}, {"original_string": "private final Map<String, SocketIoSocket> mConnectedSockets = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, SocketIoSocket>", "declarator": "mConnectedSockets = new ConcurrentHashMap<>()", "var_name": "mConnectedSockets"}, {"original_string": "private final AtomicInteger mAckId = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "mAckId = new AtomicInteger(0)", "var_name": "mAckId"}], "methods": [{"identifier": "SocketIoNamespaceImpl", "parameters": "(SocketIoServer server, String name)", "modifiers": "", "return": "", "signature": " SocketIoNamespaceImpl(SocketIoServer server, String name)", "full_signature": "  SocketIoNamespaceImpl(SocketIoServer server, String name)", "class_method_signature": "SocketIoNamespaceImpl.SocketIoNamespaceImpl(SocketIoServer server, String name)", "testcase": false, "constructor": true}, {"identifier": "broadcast", "parameters": "(String[] rooms, String event, Object[] args)", "modifiers": "@Override public", "return": "void", "signature": "void broadcast(String[] rooms, String event, Object[] args)", "full_signature": "@Override public void broadcast(String[] rooms, String event, Object[] args)", "class_method_signature": "SocketIoNamespaceImpl.broadcast(String[] rooms, String event, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "getConnectedSockets", "parameters": "()", "modifiers": "@Override", "return": "Map<String, SocketIoSocket>", "signature": "Map<String, SocketIoSocket> getConnectedSockets()", "full_signature": "@Override Map<String, SocketIoSocket> getConnectedSockets()", "class_method_signature": "SocketIoNamespaceImpl.getConnectedSockets()", "testcase": false, "constructor": false}, {"identifier": "nextId", "parameters": "()", "modifiers": "", "return": "int", "signature": "int nextId()", "full_signature": " int nextId()", "class_method_signature": "SocketIoNamespaceImpl.nextId()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(SocketIoClient client)", "modifiers": "synchronized", "return": "SocketIoSocket", "signature": "SocketIoSocket add(SocketIoClient client)", "full_signature": "synchronized SocketIoSocket add(SocketIoClient client)", "class_method_signature": "SocketIoNamespaceImpl.add(SocketIoClient client)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(SocketIoSocket socket)", "modifiers": "synchronized", "return": "void", "signature": "void remove(SocketIoSocket socket)", "full_signature": "synchronized void remove(SocketIoSocket socket)", "class_method_signature": "SocketIoNamespaceImpl.remove(SocketIoSocket socket)", "testcase": false, "constructor": false}, {"identifier": "addConnected", "parameters": "(SocketIoSocket socket)", "modifiers": "synchronized", "return": "void", "signature": "void addConnected(SocketIoSocket socket)", "full_signature": "synchronized void addConnected(SocketIoSocket socket)", "class_method_signature": "SocketIoNamespaceImpl.addConnected(SocketIoSocket socket)", "testcase": false, "constructor": false}, {"identifier": "removeConnected", "parameters": "(SocketIoSocket socket)", "modifiers": "synchronized", "return": "void", "signature": "void removeConnected(SocketIoSocket socket)", "full_signature": "synchronized void removeConnected(SocketIoSocket socket)", "class_method_signature": "SocketIoNamespaceImpl.removeConnected(SocketIoSocket socket)", "testcase": false, "constructor": false}], "file": "socket.io-server/src/main/java/io/socket/socketio/server/SocketIoNamespaceImpl.java"}, "focal_method": {"identifier": "broadcast", "parameters": "(String[] rooms, String event, Object[] args)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void broadcast(String[] rooms, String event, Object[] args) throws IllegalArgumentException {\n        if (event == null) {\n            throw new IllegalArgumentException(\"event cannot be null.\");\n        }\n\n        final Packet packet = PacketUtils.createDataPacket(Parser.EVENT, event, args);\n        mAdapter.broadcast(packet, rooms);\n    }", "signature": "void broadcast(String[] rooms, String event, Object[] args)", "full_signature": "@Override public void broadcast(String[] rooms, String event, Object[] args)", "class_method_signature": "SocketIoNamespaceImpl.broadcast(String[] rooms, String event, Object[] args)", "testcase": false, "constructor": false, "invocations": ["createDataPacket", "broadcast"]}, "repository": {"repo_id": 144740389, "url": "https://github.com/trinopoty/socket.io-server-java", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 16, "size": 1069, "license": "licensed"}}