{"test_class": {"identifier": "BlockchainTest", "superclass": "extends BaseBlockchainTest", "interfaces": "", "fields": [{"original_string": "private Blockchain blockchain;", "modifier": "private", "type": "Blockchain", "declarator": "blockchain", "var_name": "blockchain"}, {"original_string": "List<BlockchainUnitType> blockchainUnitTypes = Arrays.asList(\n            BlockchainUnitType.BLOCK,\n            BlockchainUnitType.BLOCK_INDEX,\n            BlockchainUnitType.TRANSACTION,\n            BlockchainUnitType.SETTINGS)\n            ;", "modifier": "", "type": "List<BlockchainUnitType>", "declarator": "blockchainUnitTypes = Arrays.asList(\n            BlockchainUnitType.BLOCK,\n            BlockchainUnitType.BLOCK_INDEX,\n            BlockchainUnitType.TRANSACTION,\n            BlockchainUnitType.SETTINGS)", "var_name": "blockchainUnitTypes"}], "file": "elrond-core/src/test/java/network/elrond/blockchain/BlockchainTest.java"}, "test_case": {"identifier": "testGetContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetContext() throws IOException {\n        BlockchainContext context = mock(BlockchainContext.class);\n        Blockchain blockchain = new Blockchain(context);\n        Assert.assertEquals(context, blockchain.getContext());\n    }", "signature": "void testGetContext()", "full_signature": "@Test public void testGetContext()", "class_method_signature": "BlockchainTest.testGetContext()", "testcase": true, "constructor": false, "invocations": ["mock", "assertEquals", "getContext"]}, "focal_class": {"identifier": "Blockchain", "superclass": "", "interfaces": "implements Serializable, PersistenceUnitContainer", "fields": [{"original_string": "private static final Logger logger = LogManager.getLogger(Blockchain.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LogManager.getLogger(Blockchain.class)", "var_name": "logger"}, {"original_string": "protected final BlockchainContext context;", "modifier": "protected final", "type": "BlockchainContext", "declarator": "context", "var_name": "context"}, {"original_string": "protected Block currentBlock;", "modifier": "protected", "type": "Block", "declarator": "currentBlock", "var_name": "currentBlock"}, {"original_string": "protected BigInteger currentBlockIndex = BigInteger.valueOf(-1);", "modifier": "protected", "type": "BigInteger", "declarator": "currentBlockIndex = BigInteger.valueOf(-1)", "var_name": "currentBlockIndex"}, {"original_string": "protected Block genesisBlock;", "modifier": "protected", "type": "Block", "declarator": "genesisBlock", "var_name": "genesisBlock"}, {"original_string": "protected TransactionsPool pool = new TransactionsPool();", "modifier": "protected", "type": "TransactionsPool", "declarator": "pool = new TransactionsPool()", "var_name": "pool"}, {"original_string": "protected final Map<BlockchainUnitType, BlockchainPersistenceUnit<?, ?>> blockchain = new HashMap<>();", "modifier": "protected final", "type": "Map<BlockchainUnitType, BlockchainPersistenceUnit<?, ?>>", "declarator": "blockchain = new HashMap<>()", "var_name": "blockchain"}, {"original_string": "private BigInteger networkBlockHeight = Util.BIG_INT_MIN_ONE;", "modifier": "private", "type": "BigInteger", "declarator": "networkBlockHeight = Util.BIG_INT_MIN_ONE", "var_name": "networkBlockHeight"}], "methods": [{"identifier": "Blockchain", "parameters": "(BlockchainContext context)", "modifiers": "public", "return": "", "signature": " Blockchain(BlockchainContext context)", "full_signature": "public  Blockchain(BlockchainContext context)", "class_method_signature": "Blockchain.Blockchain(BlockchainContext context)", "testcase": false, "constructor": true}, {"identifier": "generatePersistenceUnitMap", "parameters": "(BlockchainContext context)", "modifiers": "public", "return": "void", "signature": "void generatePersistenceUnitMap(BlockchainContext context)", "full_signature": "public void generatePersistenceUnitMap(BlockchainContext context)", "class_method_signature": "Blockchain.generatePersistenceUnitMap(BlockchainContext context)", "testcase": false, "constructor": false}, {"identifier": "getUnit", "parameters": "(BlockchainUnitType type)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "BlockchainPersistenceUnit<H, B>", "signature": "BlockchainPersistenceUnit<H, B> getUnit(BlockchainUnitType type)", "full_signature": "@SuppressWarnings(\"unchecked\") public BlockchainPersistenceUnit<H, B> getUnit(BlockchainUnitType type)", "class_method_signature": "Blockchain.getUnit(BlockchainUnitType type)", "testcase": false, "constructor": false}, {"identifier": "getClazz", "parameters": "(BlockchainUnitType type)", "modifiers": "public", "return": "Class<B>", "signature": "Class<B> getClazz(BlockchainUnitType type)", "full_signature": "public Class<B> getClazz(BlockchainUnitType type)", "class_method_signature": "Blockchain.getClazz(BlockchainUnitType type)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "public", "return": "BlockchainContext", "signature": "BlockchainContext getContext()", "full_signature": "public BlockchainContext getContext()", "class_method_signature": "Blockchain.getContext()", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "public", "return": "P2PConnection", "signature": "P2PConnection getConnection()", "full_signature": "public P2PConnection getConnection()", "class_method_signature": "Blockchain.getConnection()", "testcase": false, "constructor": false}, {"identifier": "getCurrentBlock", "parameters": "()", "modifiers": "public", "return": "Block", "signature": "Block getCurrentBlock()", "full_signature": "public Block getCurrentBlock()", "class_method_signature": "Blockchain.getCurrentBlock()", "testcase": false, "constructor": false}, {"identifier": "setCurrentBlock", "parameters": "(Block currentBlock)", "modifiers": "public", "return": "void", "signature": "void setCurrentBlock(Block currentBlock)", "full_signature": "public void setCurrentBlock(Block currentBlock)", "class_method_signature": "Blockchain.setCurrentBlock(Block currentBlock)", "testcase": false, "constructor": false}, {"identifier": "getGenesisBlock", "parameters": "()", "modifiers": "public", "return": "Block", "signature": "Block getGenesisBlock()", "full_signature": "public Block getGenesisBlock()", "class_method_signature": "Blockchain.getGenesisBlock()", "testcase": false, "constructor": false}, {"identifier": "setGenesisBlock", "parameters": "(Block genesisBlock)", "modifiers": "public", "return": "void", "signature": "void setGenesisBlock(Block genesisBlock)", "full_signature": "public void setGenesisBlock(Block genesisBlock)", "class_method_signature": "Blockchain.setGenesisBlock(Block genesisBlock)", "testcase": false, "constructor": false}, {"identifier": "getCurrentBlockIndex", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getCurrentBlockIndex()", "full_signature": "public BigInteger getCurrentBlockIndex()", "class_method_signature": "Blockchain.getCurrentBlockIndex()", "testcase": false, "constructor": false}, {"identifier": "setCurrentBlockIndex", "parameters": "(BigInteger currentBlockIndex)", "modifiers": "public", "return": "void", "signature": "void setCurrentBlockIndex(BigInteger currentBlockIndex)", "full_signature": "public void setCurrentBlockIndex(BigInteger currentBlockIndex)", "class_method_signature": "Blockchain.setCurrentBlockIndex(BigInteger currentBlockIndex)", "testcase": false, "constructor": false}, {"identifier": "getShard", "parameters": "()", "modifiers": "public", "return": "Shard", "signature": "Shard getShard()", "full_signature": "public Shard getShard()", "class_method_signature": "Blockchain.getShard()", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void flush()", "full_signature": "public void flush()", "class_method_signature": "Blockchain.flush()", "testcase": false, "constructor": false}, {"identifier": "stopPersistenceUnit", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stopPersistenceUnit()", "full_signature": "@Override public void stopPersistenceUnit()", "class_method_signature": "Blockchain.stopPersistenceUnit()", "testcase": false, "constructor": false}, {"identifier": "getPool", "parameters": "()", "modifiers": "public", "return": "TransactionsPool", "signature": "TransactionsPool getPool()", "full_signature": "public TransactionsPool getPool()", "class_method_signature": "Blockchain.getPool()", "testcase": false, "constructor": false}, {"identifier": "getNetworkHeight", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getNetworkHeight()", "full_signature": "public BigInteger getNetworkHeight()", "class_method_signature": "Blockchain.getNetworkHeight()", "testcase": false, "constructor": false}, {"identifier": "setNetworkHeight", "parameters": "(BigInteger networkBlockHeight)", "modifiers": "public synchronized", "return": "void", "signature": "void setNetworkHeight(BigInteger networkBlockHeight)", "full_signature": "public synchronized void setNetworkHeight(BigInteger networkBlockHeight)", "class_method_signature": "Blockchain.setNetworkHeight(BigInteger networkBlockHeight)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Blockchain.toString()", "testcase": false, "constructor": false}], "file": "elrond-core/src/main/java/network/elrond/blockchain/Blockchain.java"}, "focal_method": {"identifier": "getContext", "parameters": "()", "modifiers": "public", "return": "BlockchainContext", "body": "public BlockchainContext getContext() {\n        return context;\n    }", "signature": "BlockchainContext getContext()", "full_signature": "public BlockchainContext getContext()", "class_method_signature": "Blockchain.getContext()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 132454935, "url": "https://github.com/ElrondNetwork/elrond-node-prototype", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 16635, "license": "licensed"}}