{"test_class": {"identifier": "DefaultAuthenticationPostHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultAuthenticationPostHandler handler;", "modifier": "private", "type": "DefaultAuthenticationPostHandler", "declarator": "handler", "var_name": "handler"}], "file": "ki4so-core/src/test/java/com/github/ebnew/ki4so/core/authentication/DefaultAuthenticationPostHandlerTest.java"}, "test_case": {"identifier": "testPostAuthentication", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPostAuthentication() {\n\n        /**\n         * \u6d4b\u8bd5\u4f20\u5165\u9519\u8bef\u53c2\u6570\u7684\u60c5\u51b5\u3002\n         */\n        Authentication authentication = this.handler.postAuthentication(null, null);\n        assertNotNull(authentication);\n        Assert.assertNull(authentication.getPrincipal());\n\n        /**\n         * \u6d4b\u8bd5\u53c2\u6570\u6b63\u786e\u7684\u60c5\u51b5\uff0c\u4f46\u662fki4so \u670d\u52a1\u5668\u7684app\u5bf9\u8c61\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002\n         */\n        String username = \"test\";\n        String password = \"pwdsssss\";\n        UsernamePasswordCredential credential = new UsernamePasswordCredential(username, password);\n        DefaultUserPrincipal principal = new DefaultUserPrincipal();\n        principal.setId(username);\n        //\u8bbe\u7f6e\u6a21\u62df\u670d\u52a1\u3002\n        AppService appService = Mockito.mock(AppService.class);\n        Mockito.when(appService.findKi4soServerApp()).thenReturn(null);\n        this.handler.setAppService(appService);\n        try {\n            this.handler.postAuthentication(credential, principal);\n            fail(\"\u5e94\u8be5\u629b\u51fa\u5f02\u5e38\");\n        } catch (NoKi4soKeyException e) {\n\n        }\n\n         /**\n         * \u6d4b\u8bd5\u53c2\u6570\u6b63\u786e\u7684\u60c5\u51b5\uff0c\u4f46\u662fki4so \u670d\u52a1\u5668\u7684app\u5bf9\u8c61\u4e0d\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002\n         * \u670d\u52a1\u5bf9\u5e94\u7684key\u4fe1\u606f\u4e0d\u4e3a\u7684\u6b63\u5e38\u60c5\u51b5\u3002\n         */\n        String appId = \"1000\";\n        String app2Id = \"1001\";\n        String keyId = \"1000000\";\n        String encStringValue = \"ssssdafdsafdsafdsafdasfdsafdsa\";\n        String service = \"http://loacahost:8080/ki4so-app/home.do\";\n        Map<String, Object> parameters = new HashMap<String, Object>();\n        parameters.put(WebConstants.SERVICE_PARAM_NAME, service);\n        credential.setParameters(parameters);\n        App app = new App();\n        app.setAppId(appId);\n        \n        App clientApp = new App();\n        clientApp.setAppId(app2Id);\n        \n        Ki4soKey key = new Ki4soKey();\n        key.setKeyId(keyId);\n        \n        Mockito.when(appService.findKi4soServerApp()).thenReturn(app);\n        Mockito.when(appService.findAppByHost(service)).thenReturn(clientApp);\n         \n        KeyService keyService = Mockito.mock(KeyService.class);\n        Mockito.when(keyService.findKeyByAppId(appId)).thenReturn(key);\n        Mockito.when(keyService.findKeyByAppId(app2Id)).thenReturn(key);\n        \n        this.handler.setKeyService(keyService);\n        EncryCredentialManager encryCredentialManager = Mockito.mock(EncryCredentialManager.class);\n        Mockito.when(encryCredentialManager.encrypt(Mockito.any(EncryCredentialInfo.class))).thenReturn(encStringValue);\n        this.handler.setEncryCredentialManager(encryCredentialManager);\n        \n        UserLoggedStatusStore userLoggedStatusStore = Mockito.mock(UserLoggedStatusStore.class);\n        this.handler.setUserLoggedStatusStore(userLoggedStatusStore);\n        \n        authentication = this.handler.postAuthentication(credential, principal);\n        assertNotNull(authentication);\n    }", "signature": "void testPostAuthentication()", "full_signature": "@Test public void testPostAuthentication()", "class_method_signature": "DefaultAuthenticationPostHandlerTest.testPostAuthentication()", "testcase": true, "constructor": false, "invocations": ["postAuthentication", "assertNotNull", "assertNull", "getPrincipal", "setId", "mock", "thenReturn", "when", "findKi4soServerApp", "setAppService", "postAuthentication", "fail", "put", "setParameters", "setAppId", "setAppId", "setKeyId", "thenReturn", "when", "findKi4soServerApp", "thenReturn", "when", "findAppByHost", "mock", "thenReturn", "when", "findKeyByAppId", "thenReturn", "when", "findKeyByAppId", "setKeyService", "mock", "thenReturn", "when", "encrypt", "any", "setEncryCredentialManager", "mock", "setUserLoggedStatusStore", "postAuthentication", "assertNotNull"]}, "focal_class": {"identifier": "DefaultAuthenticationPostHandler", "superclass": "", "interfaces": "implements\n\t\tAuthenticationPostHandler", "fields": [{"original_string": "private static Logger logger = Logger.getLogger(DefaultAuthenticationPostHandler.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(DefaultAuthenticationPostHandler.class.getName())", "var_name": "logger"}, {"original_string": "private static final long DURATION = 3L*30*24*60*60*1000;", "modifier": "private static final", "type": "long", "declarator": "DURATION = 3L*30*24*60*60*1000", "var_name": "DURATION"}, {"original_string": "private EncryCredentialManager encryCredentialManager;", "modifier": "private", "type": "EncryCredentialManager", "declarator": "encryCredentialManager", "var_name": "encryCredentialManager"}, {"original_string": "private KeyService keyService;", "modifier": "private", "type": "KeyService", "declarator": "keyService", "var_name": "keyService"}, {"original_string": "private AppService appService;", "modifier": "private", "type": "AppService", "declarator": "appService", "var_name": "appService"}, {"original_string": "private UserLoggedStatusStore userLoggedStatusStore;", "modifier": "private", "type": "UserLoggedStatusStore", "declarator": "userLoggedStatusStore", "var_name": "userLoggedStatusStore"}], "methods": [{"identifier": "setUserLoggedStatusStore", "parameters": "(UserLoggedStatusStore userLoggedStatusStore)", "modifiers": "public", "return": "void", "signature": "void setUserLoggedStatusStore(UserLoggedStatusStore userLoggedStatusStore)", "full_signature": "public void setUserLoggedStatusStore(UserLoggedStatusStore userLoggedStatusStore)", "class_method_signature": "DefaultAuthenticationPostHandler.setUserLoggedStatusStore(UserLoggedStatusStore userLoggedStatusStore)", "testcase": false, "constructor": false}, {"identifier": "getAppService", "parameters": "()", "modifiers": "public", "return": "AppService", "signature": "AppService getAppService()", "full_signature": "public AppService getAppService()", "class_method_signature": "DefaultAuthenticationPostHandler.getAppService()", "testcase": false, "constructor": false}, {"identifier": "setAppService", "parameters": "(AppService appService)", "modifiers": "public", "return": "void", "signature": "void setAppService(AppService appService)", "full_signature": "public void setAppService(AppService appService)", "class_method_signature": "DefaultAuthenticationPostHandler.setAppService(AppService appService)", "testcase": false, "constructor": false}, {"identifier": "getKeyService", "parameters": "()", "modifiers": "public", "return": "KeyService", "signature": "KeyService getKeyService()", "full_signature": "public KeyService getKeyService()", "class_method_signature": "DefaultAuthenticationPostHandler.getKeyService()", "testcase": false, "constructor": false}, {"identifier": "setKeyService", "parameters": "(KeyService keyService)", "modifiers": "public", "return": "void", "signature": "void setKeyService(KeyService keyService)", "full_signature": "public void setKeyService(KeyService keyService)", "class_method_signature": "DefaultAuthenticationPostHandler.setKeyService(KeyService keyService)", "testcase": false, "constructor": false}, {"identifier": "getEncryCredentialManager", "parameters": "()", "modifiers": "public", "return": "EncryCredentialManager", "signature": "EncryCredentialManager getEncryCredentialManager()", "full_signature": "public EncryCredentialManager getEncryCredentialManager()", "class_method_signature": "DefaultAuthenticationPostHandler.getEncryCredentialManager()", "testcase": false, "constructor": false}, {"identifier": "setEncryCredentialManager", "parameters": "(\n\t\t\tEncryCredentialManager encryCredentialManager)", "modifiers": "public", "return": "void", "signature": "void setEncryCredentialManager(\n\t\t\tEncryCredentialManager encryCredentialManager)", "full_signature": "public void setEncryCredentialManager(\n\t\t\tEncryCredentialManager encryCredentialManager)", "class_method_signature": "DefaultAuthenticationPostHandler.setEncryCredentialManager(\n\t\t\tEncryCredentialManager encryCredentialManager)", "testcase": false, "constructor": false}, {"identifier": "postAuthentication", "parameters": "(Credential credential, Principal principal)", "modifiers": "@Override public", "return": "Authentication", "signature": "Authentication postAuthentication(Credential credential, Principal principal)", "full_signature": "@Override public Authentication postAuthentication(Credential credential, Principal principal)", "class_method_signature": "DefaultAuthenticationPostHandler.postAuthentication(Credential credential, Principal principal)", "testcase": false, "constructor": false}, {"identifier": "encryCredentialWithKi4soKey", "parameters": "(AuthenticationImpl authentication, Credential credential, Principal principal)", "modifiers": "private", "return": "void", "signature": "void encryCredentialWithKi4soKey(AuthenticationImpl authentication, Credential credential, Principal principal)", "full_signature": "private void encryCredentialWithKi4soKey(AuthenticationImpl authentication, Credential credential, Principal principal)", "class_method_signature": "DefaultAuthenticationPostHandler.encryCredentialWithKi4soKey(AuthenticationImpl authentication, Credential credential, Principal principal)", "testcase": false, "constructor": false}, {"identifier": "encryCredentialWithAppKey", "parameters": "(AuthenticationImpl authentication, Credential credential, Principal principal)", "modifiers": "private", "return": "void", "signature": "void encryCredentialWithAppKey(AuthenticationImpl authentication, Credential credential, Principal principal)", "full_signature": "private void encryCredentialWithAppKey(AuthenticationImpl authentication, Credential credential, Principal principal)", "class_method_signature": "DefaultAuthenticationPostHandler.encryCredentialWithAppKey(AuthenticationImpl authentication, Credential credential, Principal principal)", "testcase": false, "constructor": false}, {"identifier": "buildEncryCredentialInfo", "parameters": "(String appId, AuthenticationImpl authentication, Principal principal)", "modifiers": "private", "return": "EncryCredentialInfo", "signature": "EncryCredentialInfo buildEncryCredentialInfo(String appId, AuthenticationImpl authentication, Principal principal)", "full_signature": "private EncryCredentialInfo buildEncryCredentialInfo(String appId, AuthenticationImpl authentication, Principal principal)", "class_method_signature": "DefaultAuthenticationPostHandler.buildEncryCredentialInfo(String appId, AuthenticationImpl authentication, Principal principal)", "testcase": false, "constructor": false}], "file": "ki4so-core/src/main/java/com/github/ebnew/ki4so/core/authentication/DefaultAuthenticationPostHandler.java"}, "focal_method": {"identifier": "postAuthentication", "parameters": "(Credential credential, Principal principal)", "modifiers": "@Override public", "return": "Authentication", "body": "@Override\n\tpublic Authentication postAuthentication(Credential credential, Principal principal){\n\t\tDate createTime = new Date();\n\t\t//\u82e5\u8ba4\u8bc1\u901a\u8fc7\uff0c\u5219\u8fd4\u56de\u8ba4\u8bc1\u7ed3\u679c\u5bf9\u8c61\u3002\n\t\tAuthenticationImpl authentication = new AuthenticationImpl();\n\t\tauthentication.setAuthenticatedDate(createTime);\n\t\tauthentication.setPrincipal(principal);\n\t\tencryCredentialWithKi4soKey(authentication, credential, principal);\n\t\tencryCredentialWithAppKey(authentication, credential, principal);\n\t\treturn authentication;\n\t}", "signature": "Authentication postAuthentication(Credential credential, Principal principal)", "full_signature": "@Override public Authentication postAuthentication(Credential credential, Principal principal)", "class_method_signature": "DefaultAuthenticationPostHandler.postAuthentication(Credential credential, Principal principal)", "testcase": false, "constructor": false, "invocations": ["setAuthenticatedDate", "setPrincipal", "encryCredentialWithKi4soKey", "encryCredentialWithAppKey"]}, "repository": {"repo_id": 9836604, "url": "https://github.com/ebnew/ki4so", "language": "Java", "is_fork": false, "fork_count": 84, "stargazer_count": 100, "size": 4421, "license": "licensed"}}