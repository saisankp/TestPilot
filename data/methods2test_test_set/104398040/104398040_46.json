{"test_class": {"identifier": "TransformationEngineTest", "superclass": "extends TestHelper", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ApplicationContext applicationContext;", "modifier": "@Mock\n    private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "@InjectMocks\n    private TransformationEngine transformationEngine;", "modifier": "@InjectMocks\n    private", "type": "TransformationEngine", "declarator": "transformationEngine", "var_name": "transformationEngine"}], "file": "butterfly-core/src/test/java/com/paypal/butterfly/core/TransformationEngineTest.java"}, "test_case": {"identifier": "javaEEToSpringBootTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void javaEEToSpringBootTest() throws IOException, ExecutionException, InterruptedException {\n        File appFolder = new File(\"../tests/sample-apps/echo\");\n        File transformedAppFolder = new File(\"./out/test/resources/echo-transformed\");\n        FileUtils.deleteDirectory(transformedAppFolder);\n        FileUtils.copyDirectory(appFolder, transformedAppFolder);\n        System.out.printf(\"Transformed sample app folder: %s\\n\", transformedAppFolder.getAbsolutePath());\n\n        Application application = new ApplicationImpl(transformedAppFolder);\n\n        Properties properties = new Properties();\n        properties.put(\"changeReadme\", \"true\");\n        properties.put(\"validate\", \"false\");\n        Configuration configuration = new ConfigurationImpl(properties);\n\n        TransformationTemplate transformationTemplate = new JavaEEToSpringBoot();\n        AbstractTransformationRequest transformation = new TemplateTransformationRequest(application, transformationTemplate, configuration);\n\n        TransformationResult transformationResult = transformationEngine.perform(transformation).get();\n\n        assertNotNull(transformationResult);\n        assertTrue(transformationResult.isSuccessful());\n        assertEquals(transformationResult.getTransformationRequest().getConfiguration(), configuration);\n        assertFalse(transformationResult.hasManualInstructions());\n        assertNull(transformationResult.getManualInstructionsFile());\n        assertEquals(transformationResult.getTransformedApplicationDir(), transformedAppFolder);\n        assertNull(transformationResult.getAbortDetails());\n\n        List<TransformationMetrics> metricsList = transformationResult.getMetrics();\n        assertNotNull(metricsList);\n        assertEquals(metricsList.size(), 1);\n\n        TransformationMetrics metrics = metricsList.get(0);\n        assertNull(metrics.getFromVersion());\n        assertNull(metrics.getToVersion());\n\n        TransformationStatistics statistics = metrics.getStatistics();\n        assertEquals(statistics.getPerformResultErrorCount(), 0);\n        assertEquals(statistics.getPerformResultSkippedConditionCount(), 2);\n        assertEquals(statistics.getPerformResultSkippedDependencyCount(), 0);\n        assertEquals(statistics.getTUExecutionResultWarningCount(), 0);\n        assertEquals(statistics.getTUExecutionResultErrorCount(), 0);\n        assertEquals(statistics.getTOExecutionResultWarningCount(), 0);\n        assertEquals(statistics.getTOExecutionResultErrorCount(), 0);\n        assertEquals(statistics.getManualInstructionsCount(), 0);\n    }", "signature": "void javaEEToSpringBootTest()", "full_signature": "@Test public void javaEEToSpringBootTest()", "class_method_signature": "TransformationEngineTest.javaEEToSpringBootTest()", "testcase": true, "constructor": false, "invocations": ["deleteDirectory", "copyDirectory", "printf", "getAbsolutePath", "put", "put", "get", "perform", "assertNotNull", "assertTrue", "isSuccessful", "assertEquals", "getConfiguration", "getTransformationRequest", "assertFalse", "hasManualInstructions", "assertNull", "getManualInstructionsFile", "assertEquals", "getTransformedApplicationDir", "assertNull", "getAbortDetails", "getMetrics", "assertNotNull", "assertEquals", "size", "get", "assertNull", "getFromVersion", "assertNull", "getToVersion", "getStatistics", "assertEquals", "getPerformResultErrorCount", "assertEquals", "getPerformResultSkippedConditionCount", "assertEquals", "getPerformResultSkippedDependencyCount", "assertEquals", "getTUExecutionResultWarningCount", "assertEquals", "getTUExecutionResultErrorCount", "assertEquals", "getTOExecutionResultWarningCount", "assertEquals", "getTOExecutionResultErrorCount", "assertEquals", "getManualInstructionsCount"]}, "focal_class": {"identifier": "TransformationEngine", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Collection<TransformationListener> transformationListeners;", "modifier": "private", "type": "Collection<TransformationListener>", "declarator": "transformationListeners", "var_name": "transformationListeners"}, {"original_string": "@Autowired\n    private ApplicationContext applicationContext;", "modifier": "@Autowired\n    private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private ManualInstructionsHandler manualInstructionsHandler;", "modifier": "private", "type": "ManualInstructionsHandler", "declarator": "manualInstructionsHandler", "var_name": "manualInstructionsHandler"}, {"original_string": "private TransformationValidator validator;", "modifier": "private", "type": "TransformationValidator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private static final int MIN_THREAD_POOL_SIZE = Runtime.getRuntime().availableProcessors();", "modifier": "private static final", "type": "int", "declarator": "MIN_THREAD_POOL_SIZE = Runtime.getRuntime().availableProcessors()", "var_name": "MIN_THREAD_POOL_SIZE"}, {"original_string": "private static final int MAX_THREAD_POOL_SIZE = MIN_THREAD_POOL_SIZE * 2;", "modifier": "private static final", "type": "int", "declarator": "MAX_THREAD_POOL_SIZE = MIN_THREAD_POOL_SIZE * 2", "var_name": "MAX_THREAD_POOL_SIZE"}, {"original_string": "private ExecutorService executor = new ThreadPoolExecutor(MIN_THREAD_POOL_SIZE, MAX_THREAD_POOL_SIZE, 5, TimeUnit.MINUTES, new LinkedBlockingQueue<>());", "modifier": "private", "type": "ExecutorService", "declarator": "executor = new ThreadPoolExecutor(MIN_THREAD_POOL_SIZE, MAX_THREAD_POOL_SIZE, 5, TimeUnit.MINUTES, new LinkedBlockingQueue<>())", "var_name": "executor"}], "methods": [{"identifier": "setupListeners", "parameters": "()", "modifiers": "@PostConstruct", "return": "void", "signature": "void setupListeners()", "full_signature": "@PostConstruct void setupListeners()", "class_method_signature": "TransformationEngine.setupListeners()", "testcase": false, "constructor": false}, {"identifier": "perform", "parameters": "(TransformationRequest transformationRequest)", "modifiers": "", "return": "CompletableFuture<TransformationResult>", "signature": "CompletableFuture<TransformationResult> perform(TransformationRequest transformationRequest)", "full_signature": " CompletableFuture<TransformationResult> perform(TransformationRequest transformationRequest)", "class_method_signature": "TransformationEngine.perform(TransformationRequest transformationRequest)", "testcase": false, "constructor": false}, {"identifier": "shutdownExecutor", "parameters": "()", "modifiers": "@PreDestroy", "return": "void", "signature": "void shutdownExecutor()", "full_signature": "@PreDestroy void shutdownExecutor()", "class_method_signature": "TransformationEngine.shutdownExecutor()", "testcase": false, "constructor": false}], "file": "butterfly-core/src/main/java/com/paypal/butterfly/core/TransformationEngine.java"}, "focal_method": {"identifier": "perform", "parameters": "(TransformationRequest transformationRequest)", "modifiers": "", "return": "CompletableFuture<TransformationResult>", "body": "CompletableFuture<TransformationResult> perform(TransformationRequest transformationRequest) {\n        return CompletableFuture.supplyAsync(\n                Transformer.createTransformer(transformationRequest, transformationListeners, manualInstructionsHandler, validator),\n                executor\n        );\n    }", "signature": "CompletableFuture<TransformationResult> perform(TransformationRequest transformationRequest)", "full_signature": " CompletableFuture<TransformationResult> perform(TransformationRequest transformationRequest)", "class_method_signature": "TransformationEngine.perform(TransformationRequest transformationRequest)", "testcase": false, "constructor": false, "invocations": ["supplyAsync", "createTransformer"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}