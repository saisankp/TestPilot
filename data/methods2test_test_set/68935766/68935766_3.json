{"test_class": {"identifier": "AutoReadWriteLockTest", "superclass": "", "interfaces": "", "fields": [], "file": "commons/src/test/java/com/karuslabs/commons/util/concurrent/locks/AutoReadWriteLockTest.java"}, "test_case": {"identifier": "writelock", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void writelock() {\n        WriteLock writer = when(mock(WriteLock.class).toString()).thenReturn(\"delegate\").getMock();\n        var wrapper = new AutoWriteLock(new AutoReadWriteLock(), writer);\n        \n        wrapper.getHoldCount();\n        verify(writer).getHoldCount();\n        \n        wrapper.isHeldByCurrentThread();\n        verify(writer).isHeldByCurrentThread();\n    }", "signature": "void writelock()", "full_signature": "@Test void writelock()", "class_method_signature": "AutoReadWriteLockTest.writelock()", "testcase": true, "constructor": false, "invocations": ["getMock", "thenReturn", "when", "toString", "mock", "getHoldCount", "getHoldCount", "verify", "isHeldByCurrentThread", "isHeldByCurrentThread", "verify"]}, "focal_class": {"identifier": "AutoReadWriteLock", "superclass": "extends ReentrantReadWriteLock", "interfaces": "", "fields": [{"original_string": "private final AutoReadLock reader;", "modifier": "private final", "type": "AutoReadLock", "declarator": "reader", "var_name": "reader"}, {"original_string": "private final AutoWriteLock writer;", "modifier": "private final", "type": "AutoWriteLock", "declarator": "writer", "var_name": "writer"}], "methods": [{"identifier": "AutoReadWriteLock", "parameters": "()", "modifiers": "public", "return": "", "signature": " AutoReadWriteLock()", "full_signature": "public  AutoReadWriteLock()", "class_method_signature": "AutoReadWriteLock.AutoReadWriteLock()", "testcase": false, "constructor": true}, {"identifier": "AutoReadWriteLock", "parameters": "(boolean fair)", "modifiers": "public", "return": "", "signature": " AutoReadWriteLock(boolean fair)", "full_signature": "public  AutoReadWriteLock(boolean fair)", "class_method_signature": "AutoReadWriteLock.AutoReadWriteLock(boolean fair)", "testcase": false, "constructor": true}, {"identifier": "readLock", "parameters": "()", "modifiers": "@Override public", "return": "AutoReadLock", "signature": "AutoReadLock readLock()", "full_signature": "@Override public AutoReadLock readLock()", "class_method_signature": "AutoReadWriteLock.readLock()", "testcase": false, "constructor": false}, {"identifier": "writeLock", "parameters": "()", "modifiers": "@Override public", "return": "AutoWriteLock", "signature": "AutoWriteLock writeLock()", "full_signature": "@Override public AutoWriteLock writeLock()", "class_method_signature": "AutoReadWriteLock.writeLock()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/util/concurrent/locks/AutoReadWriteLock.java"}, "focal_method": {"identifier": "writeLock", "parameters": "()", "modifiers": "@Override public", "return": "AutoWriteLock", "body": "@Override\n    public AutoWriteLock writeLock() {\n        return writer;\n    }", "signature": "AutoWriteLock writeLock()", "full_signature": "@Override public AutoWriteLock writeLock()", "class_method_signature": "AutoReadWriteLock.writeLock()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}