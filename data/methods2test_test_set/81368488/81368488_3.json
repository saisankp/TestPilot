{"test_class": {"identifier": "BravoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private GameContext mockGameContext;", "modifier": "@Mock\n    private", "type": "GameContext", "declarator": "mockGameContext", "var_name": "mockGameContext"}, {"original_string": "@Mock\n    private GamePanelDimensionProvider mockDimensionProvider;", "modifier": "@Mock\n    private", "type": "GamePanelDimensionProvider", "declarator": "mockDimensionProvider", "var_name": "mockDimensionProvider"}], "file": "gazeplay-core/src/test/java/net/gazeplay/commons/utils/BravoTest.java"}, "test_case": {"identifier": "shouldSetConfettiOnStart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSetConfettiOnStart() throws TimeoutException {\n        ObservableList<Node> mockList = FXCollections.observableArrayList();\n\n        when(mockGameContext.getGamePanelDimensionProvider()).thenReturn(mockDimensionProvider);\n        when(mockGameContext.getChildren()).thenReturn(mockList);\n        when(mockDimensionProvider.getDimension2D()).thenReturn(new Dimension2D(100d, 100d));\n\n        FxToolkit.registerPrimaryStage();\n        BravoTestApp bravoTestApp = (BravoTestApp) FxToolkit.setupApplication(BravoTestApp.class);\n\n        Bravo bravo = bravoTestApp.bravo;\n\n        bravo.setConfettiOnStart(mockGameContext);\n\n        FxToolkit.cleanupStages();\n        assertEquals(101, mockList.size());\n    }", "signature": "void shouldSetConfettiOnStart()", "full_signature": "@Test public void shouldSetConfettiOnStart()", "class_method_signature": "BravoTest.shouldSetConfettiOnStart()", "testcase": true, "constructor": false, "invocations": ["observableArrayList", "thenReturn", "when", "getGamePanelDimensionProvider", "thenReturn", "when", "getChildren", "thenReturn", "when", "getDimension2D", "registerPrimaryStage", "setupApplication", "setConfettiOnStart", "cleanupStages", "assertEquals", "size"]}, "focal_class": {"identifier": "Bravo", "superclass": "extends Rectangle", "interfaces": "", "fields": [{"original_string": "private static final int soundClipDuration = 6000;", "modifier": "private static final", "type": "int", "declarator": "soundClipDuration = 6000", "var_name": "soundClipDuration"}, {"original_string": "private static final int zoomInAndOutCyclesCount = 3;", "modifier": "private static final", "type": "int", "declarator": "zoomInAndOutCyclesCount = 3", "var_name": "zoomInAndOutCyclesCount"}, {"original_string": "private static final int animationDelayDuration = 500;", "modifier": "private static final", "type": "int", "declarator": "animationDelayDuration = 500", "var_name": "animationDelayDuration"}, {"original_string": "private static final int zoomInDuration = (soundClipDuration - animationDelayDuration) / (zoomInAndOutCyclesCount);", "modifier": "private static final", "type": "int", "declarator": "zoomInDuration = (soundClipDuration - animationDelayDuration) / (zoomInAndOutCyclesCount)", "var_name": "zoomInDuration"}, {"original_string": "private static final int fadeInDuration = zoomInDuration / 2;", "modifier": "private static final", "type": "int", "declarator": "fadeInDuration = zoomInDuration / 2", "var_name": "fadeInDuration"}, {"original_string": "private static final int delayBeforeNextRoundDuration = 1000;", "modifier": "private static final", "type": "int", "declarator": "delayBeforeNextRoundDuration = 1000", "var_name": "delayBeforeNextRoundDuration"}, {"original_string": "private static final double pictureInitialHeightToSceneHeightRatio = 1d / 3d;", "modifier": "private static final", "type": "double", "declarator": "pictureInitialHeightToSceneHeightRatio = 1d / 3d", "var_name": "pictureInitialHeightToSceneHeightRatio"}, {"original_string": "private static final double pictureFinalHeightToSceneHeightRatio = 0.95d;", "modifier": "private static final", "type": "double", "declarator": "pictureFinalHeightToSceneHeightRatio = 0.95d", "var_name": "pictureFinalHeightToSceneHeightRatio"}, {"original_string": "private static final String defaultPictureResourceLocation = \"data/common/images/bravo.gif\";", "modifier": "private static final", "type": "String", "declarator": "defaultPictureResourceLocation = \"data/common/images/bravo.gif\"", "var_name": "defaultPictureResourceLocation"}, {"original_string": "private static final String defaultSoundResourceLocation = \"data/common/sounds/applause.mp3\";", "modifier": "private static final", "type": "String", "declarator": "defaultSoundResourceLocation = \"data/common/sounds/applause.mp3\"", "var_name": "defaultSoundResourceLocation"}, {"original_string": "private final String pictureResourceLocation;", "modifier": "private final", "type": "String", "declarator": "pictureResourceLocation", "var_name": "pictureResourceLocation"}, {"original_string": "private final String soundResource;", "modifier": "private final", "type": "String", "declarator": "soundResource", "var_name": "soundResource"}, {"original_string": "private final boolean enableRewardSound;", "modifier": "private final", "type": "boolean", "declarator": "enableRewardSound", "var_name": "enableRewardSound"}, {"original_string": "private final SequentialTransition fullTransition;", "modifier": "private final", "type": "SequentialTransition", "declarator": "fullTransition", "var_name": "fullTransition"}], "methods": [{"identifier": "Bravo", "parameters": "()", "modifiers": "public", "return": "", "signature": " Bravo()", "full_signature": "public  Bravo()", "class_method_signature": "Bravo.Bravo()", "testcase": false, "constructor": true}, {"identifier": "Bravo", "parameters": "(final String pictureResourceLocation, final String soundResourceLocation, final boolean enableRewardSound)", "modifiers": "public", "return": "", "signature": " Bravo(final String pictureResourceLocation, final String soundResourceLocation, final boolean enableRewardSound)", "full_signature": "public  Bravo(final String pictureResourceLocation, final String soundResourceLocation, final boolean enableRewardSound)", "class_method_signature": "Bravo.Bravo(final String pictureResourceLocation, final String soundResourceLocation, final boolean enableRewardSound)", "testcase": false, "constructor": true}, {"identifier": "playWinTransition", "parameters": "(final Region root, final EventHandler<ActionEvent> onFinishedEventHandler)", "modifiers": "public", "return": "void", "signature": "void playWinTransition(final Region root, final EventHandler<ActionEvent> onFinishedEventHandler)", "full_signature": "public void playWinTransition(final Region root, final EventHandler<ActionEvent> onFinishedEventHandler)", "class_method_signature": "Bravo.playWinTransition(final Region root, final EventHandler<ActionEvent> onFinishedEventHandler)", "testcase": false, "constructor": false}, {"identifier": "playWinTransition", "parameters": "(\n        final Region root,\n        final long initialDelay,\n        final EventHandler<ActionEvent> onFinishedEventHandler\n    )", "modifiers": "public", "return": "void", "signature": "void playWinTransition(\n        final Region root,\n        final long initialDelay,\n        final EventHandler<ActionEvent> onFinishedEventHandler\n    )", "full_signature": "public void playWinTransition(\n        final Region root,\n        final long initialDelay,\n        final EventHandler<ActionEvent> onFinishedEventHandler\n    )", "class_method_signature": "Bravo.playWinTransition(\n        final Region root,\n        final long initialDelay,\n        final EventHandler<ActionEvent> onFinishedEventHandler\n    )", "testcase": false, "constructor": false}, {"identifier": "setConfettiOnStart", "parameters": "(final GameContext gc)", "modifiers": "public", "return": "void", "signature": "void setConfettiOnStart(final GameContext gc)", "full_signature": "public void setConfettiOnStart(final GameContext gc)", "class_method_signature": "Bravo.setConfettiOnStart(final GameContext gc)", "testcase": false, "constructor": false}, {"identifier": "delayedStart", "parameters": "(final long initialDelay)", "modifiers": "private", "return": "void", "signature": "void delayedStart(final long initialDelay)", "full_signature": "private void delayedStart(final long initialDelay)", "class_method_signature": "Bravo.delayedStart(final long initialDelay)", "testcase": false, "constructor": false}, {"identifier": "createFullTransition", "parameters": "()", "modifiers": "private", "return": "SequentialTransition", "signature": "SequentialTransition createFullTransition()", "full_signature": "private SequentialTransition createFullTransition()", "class_method_signature": "Bravo.createFullTransition()", "testcase": false, "constructor": false}, {"identifier": "resetState", "parameters": "(final Region root)", "modifiers": "private", "return": "void", "signature": "void resetState(final Region root)", "full_signature": "private void resetState(final Region root)", "class_method_signature": "Bravo.resetState(final Region root)", "testcase": false, "constructor": false}, {"identifier": "createScaleTransition", "parameters": "()", "modifiers": "private", "return": "ScaleTransition", "signature": "ScaleTransition createScaleTransition()", "full_signature": "private ScaleTransition createScaleTransition()", "class_method_signature": "Bravo.createScaleTransition()", "testcase": false, "constructor": false}, {"identifier": "createFadeInTransition", "parameters": "()", "modifiers": "private", "return": "FadeTransition", "signature": "FadeTransition createFadeInTransition()", "full_signature": "private FadeTransition createFadeInTransition()", "class_method_signature": "Bravo.createFadeInTransition()", "testcase": false, "constructor": false}], "file": "gazeplay-core/src/main/java/net/gazeplay/commons/utils/Bravo.java"}, "focal_method": {"identifier": "setConfettiOnStart", "parameters": "(final GameContext gc)", "modifiers": "public", "return": "void", "body": "public void setConfettiOnStart(final GameContext gc) {\n        final Dimension2D dim = gc.getGamePanelDimensionProvider().getDimension2D();\n        final RandomColorGenerator randomColorGenerator = RandomColorGenerator.getInstance();\n        for (int i = 0; i <= 100; i++) {\n            final Rectangle r = new Rectangle(-100, -100, dim.getHeight() / 30, dim.getHeight() / 15);\n            r.setFill(randomColorGenerator.randomColor());\n            gc.getChildren().add(r);\n\n            final Duration duration = Duration.millis(1500 + (Math.random() * 5000));\n\n            final TranslateTransition tt = new TranslateTransition(duration, r);\n            tt.setInterpolator(Interpolator.LINEAR);\n            tt.setFromX(Math.random() * (110 * dim.getWidth() / 100));\n            tt.setFromY(0);\n            tt.setToY(dim.getHeight());\n\n            final RotateTransition rt = new RotateTransition(duration, r);\n            rt.setInterpolator(Interpolator.LINEAR);\n            rt.setByAngle(-360 + Math.random() * 2 * 720);\n\n            final FadeTransition ft = new FadeTransition(duration, r);\n            ft.setInterpolator(Interpolator.LINEAR);\n            ft.setFromValue(0);\n            ft.setToValue(0.8);\n\n            final ParallelTransition pt = new ParallelTransition();\n\n            pt.getChildren().addAll(tt, rt, ft);\n\n            pt.setOnFinished(actionEvent -> gc.getChildren().remove(r));\n            pt.play();\n        }\n    }", "signature": "void setConfettiOnStart(final GameContext gc)", "full_signature": "public void setConfettiOnStart(final GameContext gc)", "class_method_signature": "Bravo.setConfettiOnStart(final GameContext gc)", "testcase": false, "constructor": false, "invocations": ["getDimension2D", "getGamePanelDimensionProvider", "getInstance", "getHeight", "getHeight", "setFill", "randomColor", "add", "getChildren", "millis", "random", "setInterpolator", "setFromX", "random", "getWidth", "setFromY", "setToY", "getHeight", "setInterpolator", "setByAngle", "random", "setInterpolator", "setFromValue", "setToValue", "addAll", "getChildren", "setOnFinished", "remove", "getChildren", "play"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}