{"test_class": {"identifier": "MaybeSubjectTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/subjects/MaybeSubjectTest.java"}, "test_case": {"identifier": "addRemoveRace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addRemoveRace() {\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n            final MaybeSubject<Integer> ms = MaybeSubject.create();\n\n            final TestObserver<Integer> to = ms.test();\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    ms.test();\n                }\n            };\n\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    to.cancel();\n                }\n            };\n            TestHelper.race(r1, r2);\n        }\n    }", "signature": "void addRemoveRace()", "full_signature": "@Test public void addRemoveRace()", "class_method_signature": "MaybeSubjectTest.addRemoveRace()", "testcase": true, "constructor": false, "invocations": ["create", "test", "test", "cancel", "race"]}, "focal_class": {"identifier": "MaybeSubject", "superclass": "extends Maybe<T>", "interfaces": "implements MaybeObserver<T>", "fields": [{"original_string": "final AtomicReference<MaybeDisposable<T>[]> observers;", "modifier": "final", "type": "AtomicReference<MaybeDisposable<T>[]>", "declarator": "observers", "var_name": "observers"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    static final MaybeDisposable[] EMPTY = new MaybeDisposable[0];", "modifier": "@SuppressWarnings(\"rawtypes\")\n    static final", "type": "MaybeDisposable[]", "declarator": "EMPTY = new MaybeDisposable[0]", "var_name": "EMPTY"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    static final MaybeDisposable[] TERMINATED = new MaybeDisposable[0];", "modifier": "@SuppressWarnings(\"rawtypes\")\n    static final", "type": "MaybeDisposable[]", "declarator": "TERMINATED = new MaybeDisposable[0]", "var_name": "TERMINATED"}, {"original_string": "final AtomicBoolean once;", "modifier": "final", "type": "AtomicBoolean", "declarator": "once", "var_name": "once"}, {"original_string": "T value;", "modifier": "", "type": "T", "declarator": "value", "var_name": "value"}, {"original_string": "Throwable error;", "modifier": "", "type": "Throwable", "declarator": "error", "var_name": "error"}], "methods": [{"identifier": "create", "parameters": "()", "modifiers": "@CheckReturnValue @NonNull public static", "return": "MaybeSubject<T>", "signature": "MaybeSubject<T> create()", "full_signature": "@CheckReturnValue @NonNull public static MaybeSubject<T> create()", "class_method_signature": "MaybeSubject.create()", "testcase": false, "constructor": false}, {"identifier": "MaybeSubject", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "", "signature": " MaybeSubject()", "full_signature": "@SuppressWarnings(\"unchecked\")  MaybeSubject()", "class_method_signature": "MaybeSubject.MaybeSubject()", "testcase": false, "constructor": true}, {"identifier": "onSubscribe", "parameters": "(Disposable d)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Disposable d)", "full_signature": "@Override public void onSubscribe(Disposable d)", "class_method_signature": "MaybeSubject.onSubscribe(Disposable d)", "testcase": false, "constructor": false}, {"identifier": "onSuccess", "parameters": "(T value)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void onSuccess(T value)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void onSuccess(T value)", "class_method_signature": "MaybeSubject.onSuccess(T value)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable e)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void onError(Throwable e)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void onError(Throwable e)", "class_method_signature": "MaybeSubject.onError(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void onComplete()", "class_method_signature": "MaybeSubject.onComplete()", "testcase": false, "constructor": false}, {"identifier": "subscribeActual", "parameters": "(MaybeObserver<? super T> observer)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(MaybeObserver<? super T> observer)", "full_signature": "@Override protected void subscribeActual(MaybeObserver<? super T> observer)", "class_method_signature": "MaybeSubject.subscribeActual(MaybeObserver<? super T> observer)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(MaybeDisposable<T> inner)", "modifiers": "", "return": "boolean", "signature": "boolean add(MaybeDisposable<T> inner)", "full_signature": " boolean add(MaybeDisposable<T> inner)", "class_method_signature": "MaybeSubject.add(MaybeDisposable<T> inner)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(MaybeDisposable<T> inner)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "void", "signature": "void remove(MaybeDisposable<T> inner)", "full_signature": "@SuppressWarnings(\"unchecked\") void remove(MaybeDisposable<T> inner)", "class_method_signature": "MaybeSubject.remove(MaybeDisposable<T> inner)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Nullable public", "return": "T", "signature": "T getValue()", "full_signature": "@Nullable public T getValue()", "class_method_signature": "MaybeSubject.getValue()", "testcase": false, "constructor": false}, {"identifier": "hasValue", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasValue()", "full_signature": "public boolean hasValue()", "class_method_signature": "MaybeSubject.hasValue()", "testcase": false, "constructor": false}, {"identifier": "getThrowable", "parameters": "()", "modifiers": "@Nullable public", "return": "Throwable", "signature": "Throwable getThrowable()", "full_signature": "@Nullable public Throwable getThrowable()", "class_method_signature": "MaybeSubject.getThrowable()", "testcase": false, "constructor": false}, {"identifier": "hasThrowable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasThrowable()", "full_signature": "public boolean hasThrowable()", "class_method_signature": "MaybeSubject.hasThrowable()", "testcase": false, "constructor": false}, {"identifier": "hasComplete", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasComplete()", "full_signature": "public boolean hasComplete()", "class_method_signature": "MaybeSubject.hasComplete()", "testcase": false, "constructor": false}, {"identifier": "hasObservers", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasObservers()", "full_signature": "public boolean hasObservers()", "class_method_signature": "MaybeSubject.hasObservers()", "testcase": false, "constructor": false}, {"identifier": "observerCount", "parameters": "()", "modifiers": "", "return": "int", "signature": "int observerCount()", "full_signature": " int observerCount()", "class_method_signature": "MaybeSubject.observerCount()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/subjects/MaybeSubject.java"}, "focal_method": {"identifier": "create", "parameters": "()", "modifiers": "@CheckReturnValue @NonNull public static", "return": "MaybeSubject<T>", "body": "@CheckReturnValue\n    @NonNull\n    public static <T> MaybeSubject<T> create() {\n        return new MaybeSubject<T>();\n    }", "signature": "MaybeSubject<T> create()", "full_signature": "@CheckReturnValue @NonNull public static MaybeSubject<T> create()", "class_method_signature": "MaybeSubject.create()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}