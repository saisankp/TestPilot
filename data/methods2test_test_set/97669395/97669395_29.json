{"test_class": {"identifier": "JavaValueFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "recipe-generator/src/test/java/ca/derekcormier/recipe/generator/filter/JavaValueFilterTest.java"}, "test_case": {"identifier": "testApply_convertsStringWithQuotes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testApply_convertsStringWithQuotes() {\n    Cookbook cookbook = new Cookbook(\"test\", new ArrayList<>(), new ArrayList<>());\n    Filter filter = new JavaValueFilter(cookbook);\n\n    assertEquals(\"\\\"\\\\\\\"foobar\\\"\", filter.apply(\"\\\"foobar\", \"string\"));\n  }", "signature": "void testApply_convertsStringWithQuotes()", "full_signature": "@Test public void testApply_convertsStringWithQuotes()", "class_method_signature": "JavaValueFilterTest.testApply_convertsStringWithQuotes()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "apply"]}, "focal_class": {"identifier": "JavaValueFilter", "superclass": "extends RecipeFilter", "interfaces": "", "fields": [], "methods": [{"identifier": "JavaValueFilter", "parameters": "(Cookbook cookbook)", "modifiers": "public", "return": "", "signature": " JavaValueFilter(Cookbook cookbook)", "full_signature": "public  JavaValueFilter(Cookbook cookbook)", "class_method_signature": "JavaValueFilter.JavaValueFilter(Cookbook cookbook)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(Object value, Object... params)", "modifiers": "@Override public", "return": "Object", "signature": "Object apply(Object value, Object... params)", "full_signature": "@Override public Object apply(Object value, Object... params)", "class_method_signature": "JavaValueFilter.apply(Object value, Object... params)", "testcase": false, "constructor": false}], "file": "recipe-generator/src/main/java/ca/derekcormier/recipe/generator/filter/JavaValueFilter.java"}, "focal_method": {"identifier": "apply", "parameters": "(Object value, Object... params)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n  public Object apply(Object value, Object... params) {\n    if (params.length != 1) {\n      throw new IllegalArgumentException(\"must pass a type parameter to \" + name);\n    }\n\n    String strType = super.asString(params[0]);\n    ParamType paramType = CookbookUtils.parseType(strType, getCookbook());\n    Type type = paramType.getType();\n\n    if (paramType.isVararg() || type instanceof ArrayType) {\n      Type baseType = paramType.isVararg() ? type : ((ArrayType) type).getBaseType();\n\n      String values =\n          StringUtil.join(\n              ((List<Object>) value)\n                  .stream().map(v -> apply(v, baseType.name())).collect(Collectors.toList()),\n              \", \");\n\n      return \"new \" + new JavaTypeFilter(getCookbook()).apply(strType, true) + \"{\" + values + \"}\";\n    } else if (type instanceof PrimitiveType) {\n      PrimitiveType primitive = (PrimitiveType) type;\n      switch (primitive.getPrimitive()) {\n        case BOOLEAN:\n          return super.asString(value);\n        case INTEGER:\n          return super.asString(value);\n        case FLOAT:\n          return super.asString(value) + \"f\";\n        case STRING:\n          return value == null ? \"null\" : \"\\\"\" + super.asString(value).replace(\"\\\"\", \"\\\\\\\"\") + \"\\\"\";\n        default:\n          throw new IllegalArgumentException(\"unknown primitive type \" + type.name());\n      }\n    } else if (type instanceof EnumType) {\n      return type.name() + \".\" + super.asString(value);\n    }\n\n    return super.asString(value);\n  }", "signature": "Object apply(Object value, Object... params)", "full_signature": "@Override public Object apply(Object value, Object... params)", "class_method_signature": "JavaValueFilter.apply(Object value, Object... params)", "testcase": false, "constructor": false, "invocations": ["asString", "parseType", "getCookbook", "getType", "isVararg", "isVararg", "getBaseType", "join", "collect", "map", "stream", "apply", "name", "toList", "apply", "getCookbook", "getPrimitive", "asString", "asString", "asString", "replace", "asString", "name", "name", "asString", "asString"]}, "repository": {"repo_id": 97669395, "url": "https://github.com/kormide/recipe", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 727, "license": "licensed"}}