{"test_class": {"identifier": "AthenzJettyContainerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_EXCLUDED_CIPHERS = \"^_(MD5|SHA|SHA1)$\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_EXCLUDED_CIPHERS = \"^_(MD5|SHA|SHA1)$\"", "var_name": "DEFAULT_EXCLUDED_CIPHERS"}, {"original_string": "private static final String DEFAULT_INCLUDED_CIPHERS = \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_INCLUDED_CIPHERS = \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"", "var_name": "DEFAULT_INCLUDED_CIPHERS"}], "file": "containers/jetty/src/test/java/com/yahoo/athenz/container/AthenzJettyContainerTest.java"}, "test_case": {"identifier": "testInitContainerStatusPortHTTPS", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitContainerStatusPortHTTPS() {\n\n        System.setProperty(AthenzConsts.ATHENZ_PROP_HTTP_PORT, \"4080\");\n        System.setProperty(AthenzConsts.ATHENZ_PROP_HTTPS_PORT, \"4443\");\n        System.setProperty(AthenzConsts.ATHENZ_PROP_STATUS_PORT, \"4444\");\n\n        AthenzJettyContainer container = AthenzJettyContainer.createJettyContainer();\n        assertNotNull(container);\n    }", "signature": "void testInitContainerStatusPortHTTPS()", "full_signature": "@Test public void testInitContainerStatusPortHTTPS()", "class_method_signature": "AthenzJettyContainerTest.testInitContainerStatusPortHTTPS()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "setProperty", "createJettyContainer", "assertNotNull"]}, "focal_class": {"identifier": "AthenzJettyContainer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AthenzJettyContainer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AthenzJettyContainer.class)", "var_name": "LOG"}, {"original_string": "private static String ROOT_DIR;", "modifier": "private static", "type": "String", "declarator": "ROOT_DIR", "var_name": "ROOT_DIR"}, {"original_string": "private static final String DEFAULT_WEBAPP_DESCRIPTOR = \"/etc/webdefault.xml\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_WEBAPP_DESCRIPTOR = \"/etc/webdefault.xml\"", "var_name": "DEFAULT_WEBAPP_DESCRIPTOR"}, {"original_string": "static final String ATHENZ_DEFAULT_EXCLUDED_PROTOCOLS = \"SSLv2,SSLv3\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_DEFAULT_EXCLUDED_PROTOCOLS = \"SSLv2,SSLv3\"", "var_name": "ATHENZ_DEFAULT_EXCLUDED_PROTOCOLS"}, {"original_string": "private Server server = null;", "modifier": "private", "type": "Server", "declarator": "server = null", "var_name": "server"}, {"original_string": "private String banner = null;", "modifier": "private", "type": "String", "declarator": "banner = null", "var_name": "banner"}, {"original_string": "private HandlerCollection handlers = null;", "modifier": "private", "type": "HandlerCollection", "declarator": "handlers = null", "var_name": "handlers"}, {"original_string": "private PrivateKeyStore privateKeyStore;", "modifier": "private", "type": "PrivateKeyStore", "declarator": "privateKeyStore", "var_name": "privateKeyStore"}], "methods": [{"identifier": "AthenzJettyContainer", "parameters": "()", "modifiers": "public", "return": "", "signature": " AthenzJettyContainer()", "full_signature": "public  AthenzJettyContainer()", "class_method_signature": "AthenzJettyContainer.AthenzJettyContainer()", "testcase": false, "constructor": true}, {"identifier": "getServer", "parameters": "()", "modifiers": "", "return": "Server", "signature": "Server getServer()", "full_signature": " Server getServer()", "class_method_signature": "AthenzJettyContainer.getServer()", "testcase": false, "constructor": false}, {"identifier": "getHandlers", "parameters": "()", "modifiers": "", "return": "HandlerCollection", "signature": "HandlerCollection getHandlers()", "full_signature": " HandlerCollection getHandlers()", "class_method_signature": "AthenzJettyContainer.getHandlers()", "testcase": false, "constructor": false}, {"identifier": "getServerHostName", "parameters": "()", "modifiers": "static", "return": "String", "signature": "String getServerHostName()", "full_signature": "static String getServerHostName()", "class_method_signature": "AthenzJettyContainer.getServerHostName()", "testcase": false, "constructor": false}, {"identifier": "getRootDir", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getRootDir()", "full_signature": "public static String getRootDir()", "class_method_signature": "AthenzJettyContainer.getRootDir()", "testcase": false, "constructor": false}, {"identifier": "addRequestLogHandler", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void addRequestLogHandler()", "full_signature": "public void addRequestLogHandler()", "class_method_signature": "AthenzJettyContainer.addRequestLogHandler()", "testcase": false, "constructor": false}, {"identifier": "addServletHandlers", "parameters": "(String serverHostName)", "modifiers": "public", "return": "void", "signature": "void addServletHandlers(String serverHostName)", "full_signature": "public void addServletHandlers(String serverHostName)", "class_method_signature": "AthenzJettyContainer.addServletHandlers(String serverHostName)", "testcase": false, "constructor": false}, {"identifier": "setDefaultsDescriptor", "parameters": "(WebAppProvider webappProvider, String jettyHome)", "modifiers": "private", "return": "void", "signature": "void setDefaultsDescriptor(WebAppProvider webappProvider, String jettyHome)", "full_signature": "private void setDefaultsDescriptor(WebAppProvider webappProvider, String jettyHome)", "class_method_signature": "AthenzJettyContainer.setDefaultsDescriptor(WebAppProvider webappProvider, String jettyHome)", "testcase": false, "constructor": false}, {"identifier": "newHttpConfiguration", "parameters": "()", "modifiers": "public", "return": "HttpConfiguration", "signature": "HttpConfiguration newHttpConfiguration()", "full_signature": "public HttpConfiguration newHttpConfiguration()", "class_method_signature": "AthenzJettyContainer.newHttpConfiguration()", "testcase": false, "constructor": false}, {"identifier": "loadServicePrivateKey", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadServicePrivateKey()", "full_signature": " void loadServicePrivateKey()", "class_method_signature": "AthenzJettyContainer.loadServicePrivateKey()", "testcase": false, "constructor": false}, {"identifier": "createSSLContextObject", "parameters": "(boolean needClientAuth)", "modifiers": "", "return": "SslContextFactory.Server", "signature": "SslContextFactory.Server createSSLContextObject(boolean needClientAuth)", "full_signature": " SslContextFactory.Server createSSLContextObject(boolean needClientAuth)", "class_method_signature": "AthenzJettyContainer.createSSLContextObject(boolean needClientAuth)", "testcase": false, "constructor": false}, {"identifier": "addHTTPConnector", "parameters": "(HttpConfiguration httpConfig, int httpPort, boolean proxyProtocol,\n            String listenHost, int idleTimeout)", "modifiers": "", "return": "void", "signature": "void addHTTPConnector(HttpConfiguration httpConfig, int httpPort, boolean proxyProtocol,\n            String listenHost, int idleTimeout)", "full_signature": " void addHTTPConnector(HttpConfiguration httpConfig, int httpPort, boolean proxyProtocol,\n            String listenHost, int idleTimeout)", "class_method_signature": "AthenzJettyContainer.addHTTPConnector(HttpConfiguration httpConfig, int httpPort, boolean proxyProtocol,\n            String listenHost, int idleTimeout)", "testcase": false, "constructor": false}, {"identifier": "addHTTPSConnector", "parameters": "(HttpConfiguration httpConfig, int httpsPort, boolean proxyProtocol,\n            String listenHost, int idleTimeout, boolean needClientAuth)", "modifiers": "", "return": "void", "signature": "void addHTTPSConnector(HttpConfiguration httpConfig, int httpsPort, boolean proxyProtocol,\n            String listenHost, int idleTimeout, boolean needClientAuth)", "full_signature": " void addHTTPSConnector(HttpConfiguration httpConfig, int httpsPort, boolean proxyProtocol,\n            String listenHost, int idleTimeout, boolean needClientAuth)", "class_method_signature": "AthenzJettyContainer.addHTTPSConnector(HttpConfiguration httpConfig, int httpsPort, boolean proxyProtocol,\n            String listenHost, int idleTimeout, boolean needClientAuth)", "testcase": false, "constructor": false}, {"identifier": "addHTTPConnectors", "parameters": "(HttpConfiguration httpConfig, int httpPort, int httpsPort,\n            int statusPort)", "modifiers": "public", "return": "void", "signature": "void addHTTPConnectors(HttpConfiguration httpConfig, int httpPort, int httpsPort,\n            int statusPort)", "full_signature": "public void addHTTPConnectors(HttpConfiguration httpConfig, int httpPort, int httpsPort,\n            int statusPort)", "class_method_signature": "AthenzJettyContainer.addHTTPConnectors(HttpConfiguration httpConfig, int httpPort, int httpsPort,\n            int statusPort)", "testcase": false, "constructor": false}, {"identifier": "setBanner", "parameters": "(String banner)", "modifiers": "public", "return": "void", "signature": "void setBanner(String banner)", "full_signature": "public void setBanner(String banner)", "class_method_signature": "AthenzJettyContainer.setBanner(String banner)", "testcase": false, "constructor": false}, {"identifier": "createServer", "parameters": "(int maxThreads)", "modifiers": "public", "return": "void", "signature": "void createServer(int maxThreads)", "full_signature": "public void createServer(int maxThreads)", "class_method_signature": "AthenzJettyContainer.createServer(int maxThreads)", "testcase": false, "constructor": false}, {"identifier": "createJettyContainer", "parameters": "()", "modifiers": "public static", "return": "AthenzJettyContainer", "signature": "AthenzJettyContainer createJettyContainer()", "full_signature": "public static AthenzJettyContainer createJettyContainer()", "class_method_signature": "AthenzJettyContainer.createJettyContainer()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void run()", "full_signature": "public void run()", "class_method_signature": "AthenzJettyContainer.run()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "AthenzJettyContainer.stop()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String [] args)", "modifiers": "public static", "return": "void", "signature": "void main(String [] args)", "full_signature": "public static void main(String [] args)", "class_method_signature": "AthenzJettyContainer.main(String [] args)", "testcase": false, "constructor": false}], "file": "containers/jetty/src/main/java/com/yahoo/athenz/container/AthenzJettyContainer.java"}, "focal_method": {"identifier": "createJettyContainer", "parameters": "()", "modifiers": "public static", "return": "AthenzJettyContainer", "body": "public static AthenzJettyContainer createJettyContainer() {\n\n        // retrieve our http and https port numbers\n        \n        int httpPort = ConfigProperties.getPortNumber(AthenzConsts.ATHENZ_PROP_HTTP_PORT,\n                AthenzConsts.ATHENZ_HTTP_PORT_DEFAULT);\n        int httpsPort = ConfigProperties.getPortNumber(AthenzConsts.ATHENZ_PROP_HTTPS_PORT,\n                AthenzConsts.ATHENZ_HTTPS_PORT_DEFAULT);\n        \n        // for status port we'll use the protocol specified for the regular http\n        // port. if both http and https are provided then https will be picked\n        // it could also be either one of the values specified as well\n        \n        int statusPort = ConfigProperties.getPortNumber(AthenzConsts.ATHENZ_PROP_STATUS_PORT, 0);\n        \n        String serverHostName = getServerHostName();\n\n        AthenzJettyContainer container = new AthenzJettyContainer();\n        container.setBanner(\"http://\" + serverHostName + \" http port: \" +\n                httpPort + \" https port: \" + httpsPort + \" status port: \" +\n                statusPort);\n\n        int maxThreads = Integer.parseInt(System.getProperty(AthenzConsts.ATHENZ_PROP_MAX_THREADS,\n                Integer.toString(AthenzConsts.ATHENZ_HTTP_MAX_THREADS)));\n        container.createServer(maxThreads);\n        \n        HttpConfiguration httpConfig = container.newHttpConfiguration();\n        container.addHTTPConnectors(httpConfig, httpPort, httpsPort, statusPort);\n        container.addServletHandlers(serverHostName);\n        \n        container.addRequestLogHandler();\n        return container;\n    }", "signature": "AthenzJettyContainer createJettyContainer()", "full_signature": "public static AthenzJettyContainer createJettyContainer()", "class_method_signature": "AthenzJettyContainer.createJettyContainer()", "testcase": false, "constructor": false, "invocations": ["getPortNumber", "getPortNumber", "getPortNumber", "getServerHostName", "setBanner", "parseInt", "getProperty", "toString", "createServer", "newHttpConfiguration", "addHTTPConnectors", "addServletHandlers", "addRequestLogHandler"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}