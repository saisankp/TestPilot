{"test_class": {"identifier": "DbSearchDataStoreTest", "superclass": "extends ApplicationTestCase", "interfaces": "", "fields": [{"original_string": "private static final String FAKE_SEARCH_STRING = \"fake search string\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_SEARCH_STRING = \"fake search string\"", "var_name": "FAKE_SEARCH_STRING"}, {"original_string": "private static final int FAKE_ID = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_ID = 1", "var_name": "FAKE_ID"}, {"original_string": "private static final Media FAKE_MEDIA = Media.PROGRAM;", "modifier": "private static final", "type": "Media", "declarator": "FAKE_MEDIA = Media.PROGRAM", "var_name": "FAKE_MEDIA"}, {"original_string": "private static final String FAKE_TITLE = \"fake title\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_TITLE = \"fake title\"", "var_name": "FAKE_TITLE"}, {"original_string": "private static final String FAKE_SUB_TITLE = \"fake sub title\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_SUB_TITLE = \"fake sub title\"", "var_name": "FAKE_SUB_TITLE"}, {"original_string": "private static final String FAKE_DESCRIPTION = \"fake description\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_DESCRIPTION = \"fake description\"", "var_name": "FAKE_DESCRIPTION"}, {"original_string": "private static final DateTime FAKE_START_DATE = new DateTime();", "modifier": "private static final", "type": "DateTime", "declarator": "FAKE_START_DATE = new DateTime()", "var_name": "FAKE_START_DATE"}, {"original_string": "private static final int FAKE_PROGRAM_FLAGS = -1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_PROGRAM_FLAGS = -1", "var_name": "FAKE_PROGRAM_FLAGS"}, {"original_string": "private static final int FAKE_SEASON = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_SEASON = 1", "var_name": "FAKE_SEASON"}, {"original_string": "private static final int FAKE_EPISODE = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_EPISODE = 1", "var_name": "FAKE_EPISODE"}, {"original_string": "private static final String FAKE_STUDIO = \"fake studio\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_STUDIO = \"fake studio\"", "var_name": "FAKE_STUDIO"}, {"original_string": "private static final String FAKE_CAST_MEMBERS = \"fake cast members\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_CAST_MEMBERS = \"fake cast members\"", "var_name": "FAKE_CAST_MEMBERS"}, {"original_string": "private static final String FAKE_CHARACTERS = \"fake characters\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_CHARACTERS = \"fake characters\"", "var_name": "FAKE_CHARACTERS"}, {"original_string": "private static final String FAKE_URL = \"fake url\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_URL = \"fake url\"", "var_name": "FAKE_URL"}, {"original_string": "private static final String FAKE_FANART_URL = \"fake fanart url\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_FANART_URL = \"fake fanart url\"", "var_name": "FAKE_FANART_URL"}, {"original_string": "private static final String FAKE_COVERART_URL = \"fake coverart url\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_COVERART_URL = \"fake coverart url\"", "var_name": "FAKE_COVERART_URL"}, {"original_string": "private static final String FAKE_BANNER_URL = \"fake banner url\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_BANNER_URL = \"fake banner url\"", "var_name": "FAKE_BANNER_URL"}, {"original_string": "private static final String FAKE_PREVIEW_URL = \"fake preview url\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_PREVIEW_URL = \"fake preview url\"", "var_name": "FAKE_PREVIEW_URL"}, {"original_string": "private static final String FAKE_CONTENT_TYPE = \"fake content type\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_CONTENT_TYPE = \"fake content type\"", "var_name": "FAKE_CONTENT_TYPE"}, {"original_string": "private static final long FAKE_DURATION = -1L;", "modifier": "private static final", "type": "long", "declarator": "FAKE_DURATION = -1L", "var_name": "FAKE_DURATION"}, {"original_string": "private static final int FAKE_PERCENT_COMPLETE = -1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_PERCENT_COMPLETE = -1", "var_name": "FAKE_PERCENT_COMPLETE"}, {"original_string": "private static final boolean FAKE_RECORDING = false;", "modifier": "private static final", "type": "boolean", "declarator": "FAKE_RECORDING = false", "var_name": "FAKE_RECORDING"}, {"original_string": "private static final int FAKE_LIVE_STREAM_ID = -1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_LIVE_STREAM_ID = -1", "var_name": "FAKE_LIVE_STREAM_ID"}, {"original_string": "private static final boolean FAKE_WATCHED = false;", "modifier": "private static final", "type": "boolean", "declarator": "FAKE_WATCHED = false", "var_name": "FAKE_WATCHED"}, {"original_string": "private static final String FAKE_UPDATE_SAVED_BOOKMARK_URL = \"fake update saved bookmark url\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_UPDATE_SAVED_BOOKMARK_URL = \"fake update saved bookmark url\"", "var_name": "FAKE_UPDATE_SAVED_BOOKMARK_URL"}, {"original_string": "private static final long FAKE_BOOKMARK = -1;", "modifier": "private static final", "type": "long", "declarator": "FAKE_BOOKMARK = -1", "var_name": "FAKE_BOOKMARK"}, {"original_string": "private static final String FAKE_INETREF = \"fake inetref\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_INETREF = \"fake inetref\"", "var_name": "FAKE_INETREF"}, {"original_string": "private static final String FAKE_CERTIFICATION = \"fake certification\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_CERTIFICATION = \"fake certification\"", "var_name": "FAKE_CERTIFICATION"}, {"original_string": "private static final int FAKE_PARENTAL_LEVEL = -1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_PARENTAL_LEVEL = -1", "var_name": "FAKE_PARENTAL_LEVEL"}, {"original_string": "private static final String FAKE_RECORDING_GROUP = \"fake recording group\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_RECORDING_GROUP = \"fake recording group\"", "var_name": "FAKE_RECORDING_GROUP"}, {"original_string": "private DbSearchDataStore dbSearchDataStore;", "modifier": "private", "type": "DbSearchDataStore", "declarator": "dbSearchDataStore", "var_name": "dbSearchDataStore"}, {"original_string": "private SQLiteDatabase db;", "modifier": "private", "type": "SQLiteDatabase", "declarator": "db", "var_name": "db"}, {"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "mythtv-player/src/test/java/org/mythtv/android/data/repository/datasource/DbSearchDataStoreTest.java"}, "test_case": {"identifier": "testSearch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSearch() {\n\n        dbSearchDataStore.search( FAKE_SEARCH_STRING );\n\n    }", "signature": "void testSearch()", "full_signature": "@Test public void testSearch()", "class_method_signature": "DbSearchDataStoreTest.testSearch()", "testcase": true, "constructor": false, "invocations": ["search"]}, "focal_class": {"identifier": "DbSearchDataStore", "superclass": "", "interfaces": "implements SearchDataStore", "fields": [{"original_string": "private static final String TAG = DbSearchDataStore.class.getSimpleName();", "modifier": "private static final", "type": "String", "declarator": "TAG = DbSearchDataStore.class.getSimpleName()", "var_name": "TAG"}, {"original_string": "private final SQLiteDatabase db;", "modifier": "private final", "type": "SQLiteDatabase", "declarator": "db", "var_name": "db"}], "methods": [{"identifier": "DbSearchDataStore", "parameters": "( final SQLiteDatabase db )", "modifiers": "public", "return": "", "signature": " DbSearchDataStore( final SQLiteDatabase db )", "full_signature": "public  DbSearchDataStore( final SQLiteDatabase db )", "class_method_signature": "DbSearchDataStore.DbSearchDataStore( final SQLiteDatabase db )", "testcase": false, "constructor": true}, {"identifier": "search", "parameters": "( String searchString )", "modifiers": "@Override public", "return": "Observable<List<MediaItemEntity>>", "signature": "Observable<List<MediaItemEntity>> search( String searchString )", "full_signature": "@Override public Observable<List<MediaItemEntity>> search( String searchString )", "class_method_signature": "DbSearchDataStore.search( String searchString )", "testcase": false, "constructor": false}, {"identifier": "refreshTitleInfoData", "parameters": "( Collection<SeriesEntity> seriesEntityCollection )", "modifiers": "@Override public", "return": "void", "signature": "void refreshTitleInfoData( Collection<SeriesEntity> seriesEntityCollection )", "full_signature": "@Override public void refreshTitleInfoData( Collection<SeriesEntity> seriesEntityCollection )", "class_method_signature": "DbSearchDataStore.refreshTitleInfoData( Collection<SeriesEntity> seriesEntityCollection )", "testcase": false, "constructor": false}, {"identifier": "refreshRecordedProgramData", "parameters": "( Collection<MediaItemEntity> mediaItemEntityCollection )", "modifiers": "@Override public", "return": "void", "signature": "void refreshRecordedProgramData( Collection<MediaItemEntity> mediaItemEntityCollection )", "full_signature": "@Override public void refreshRecordedProgramData( Collection<MediaItemEntity> mediaItemEntityCollection )", "class_method_signature": "DbSearchDataStore.refreshRecordedProgramData( Collection<MediaItemEntity> mediaItemEntityCollection )", "testcase": false, "constructor": false}, {"identifier": "refreshVideoData", "parameters": "( Collection<MediaItemEntity> mediaItemEntityCollection )", "modifiers": "@Override public", "return": "void", "signature": "void refreshVideoData( Collection<MediaItemEntity> mediaItemEntityCollection )", "full_signature": "@Override public void refreshVideoData( Collection<MediaItemEntity> mediaItemEntityCollection )", "class_method_signature": "DbSearchDataStore.refreshVideoData( Collection<MediaItemEntity> mediaItemEntityCollection )", "testcase": false, "constructor": false}, {"identifier": "processCollection", "parameters": "( Collection<MediaItemEntity> mediaItemEntityCollection )", "modifiers": "private", "return": "void", "signature": "void processCollection( Collection<MediaItemEntity> mediaItemEntityCollection )", "full_signature": "private void processCollection( Collection<MediaItemEntity> mediaItemEntityCollection )", "class_method_signature": "DbSearchDataStore.processCollection( Collection<MediaItemEntity> mediaItemEntityCollection )", "testcase": false, "constructor": false}], "file": "mythtv-player/src/main/java/org/mythtv/android/data/repository/datasource/DbSearchDataStore.java"}, "focal_method": {"identifier": "search", "parameters": "( String searchString )", "modifiers": "@Override public", "return": "Observable<List<MediaItemEntity>>", "body": "@Override\n    public Observable<List<MediaItemEntity>> search( String searchString ) {\n        Log.d( TAG, \"search : enter\" );\n\n        String search = \"*\" + searchString + \"*\";\n        search = search.replaceAll( \" \", \"*\" );\n\n        final String query = search;\n        Log.d( TAG, \"search : query=\" + query );\n\n        return Observable.create( new Observable.OnSubscribe<List<MediaItemEntity>>() {\n\n            @Override\n            public void call( Subscriber<? super List<MediaItemEntity>> subscriber ) {\n                Log.d( TAG, \"search.call : enter\" );\n\n                Cursor cursor;\n\n                SQLiteQueryBuilder builder = new SQLiteQueryBuilder();\n\n                try {\n\n                    List<MediaItemEntity> mediaItems = new ArrayList<>();\n\n                    builder.setTables( MediaItemEntity.TABLE_NAME );\n\n                    String selection = MediaItemEntity.SQL_SELECT_MATCH;\n                    String[] selectionArgs = new String[] { query };\n\n                    MediaItemEntity mediaItem;\n                    cursor = builder.query( db, null, selection, selectionArgs, null, null, MediaItemEntity.FIELD_START_DATE + \" DESC, \" + MediaItemEntity.FIELD_TITLE );\n                    while( cursor.moveToNext() ) {\n\n                        mediaItem = MediaItemEntity.create(\n                            cursor.getInt( cursor.getColumnIndex( MediaItemEntity.FIELD_ID ) ),\n                            Media.valueOf( cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_MEDIA ) ) ),\n                            cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_TITLE ) ),\n                            cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_SUBTITLE ) ),\n                            cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_DESCRIPTION ) ),\n                            new DateTime( cursor.getLong( cursor.getColumnIndex( MediaItemEntity.FIELD_START_DATE ) ) ),\n                            cursor.getInt( cursor.getColumnIndex( MediaItemEntity.FIELD_PROGRAM_FLAGS ) ),\n                            cursor.getInt( cursor.getColumnIndex( MediaItemEntity.FIELD_SEASON ) ),\n                            cursor.getInt( cursor.getColumnIndex( MediaItemEntity.FIELD_EPISODE ) ),\n                            cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_STUDIO ) ),\n                            cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_CAST_MEMBERS ) ),\n                            cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_CHARACTERS ) ),\n                            cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_URL ) ),\n                            cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_FANART_URL ) ),\n                            cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_COVERART_URL ) ),\n                            cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_BANNER_URL ) ),\n                            cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_PREVIEW_URL ) ),\n                            cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_CONTENT_TYPE ) ),\n                            cursor.getLong( cursor.getColumnIndex( MediaItemEntity.FIELD_DURATION ) ),\n                            cursor.getInt( cursor.getColumnIndex( MediaItemEntity.FIELD_LIVE_STREAM_PERCENT_COMPLETE ) ),\n                            ( cursor.getInt( cursor.getColumnIndex( MediaItemEntity.FIELD_RECORDING ) ) != 0 ),\n                            cursor.getInt( cursor.getColumnIndex( MediaItemEntity.FIELD_LIVE_STREAM_ID ) ),\n                            ( cursor.getInt( cursor.getColumnIndex( MediaItemEntity.FIELD_WATCHED_STATUS ) ) != 0 ),\n                            cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_UPDATE_SAVED_BOOKMARK_URL ) ),\n                            cursor.getLong( cursor.getColumnIndex( MediaItemEntity.FIELD_BOOKMARK ) ),\n                            cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_INETREF ) ),\n                            cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_CERTIFICATION ) ),\n                            cursor.getInt( cursor.getColumnIndex( MediaItemEntity.FIELD_PARENTAL_LEVEL ) ),\n                            cursor.getString( cursor.getColumnIndex( MediaItemEntity.FIELD_RECORDING_GROUP ) ),\n                            Collections.emptyList()\n                        );\n\n//                        Log.d( TAG, \"search.call : searchResultEntity=\" + searchResultEntity.toString() );\n                        mediaItems.add( mediaItem );\n\n                    }\n                    cursor.close();\n\n                    subscriber.onNext( mediaItems );\n                    subscriber.onCompleted();\n\n                } catch( Exception e ) {\n                    Log.e( TAG, \"search.call : error\", e );\n\n                    subscriber.onError( new DatabaseException( e.getCause() ) );\n\n                }\n\n                Log.d( TAG, \"search.call : exit\" );\n            }\n\n        });\n\n    }", "signature": "Observable<List<MediaItemEntity>> search( String searchString )", "full_signature": "@Override public Observable<List<MediaItemEntity>> search( String searchString )", "class_method_signature": "DbSearchDataStore.search( String searchString )", "testcase": false, "constructor": false, "invocations": ["d", "replaceAll", "d", "create", "d", "setTables", "query", "moveToNext", "create", "getInt", "getColumnIndex", "valueOf", "getString", "getColumnIndex", "getString", "getColumnIndex", "getString", "getColumnIndex", "getString", "getColumnIndex", "getLong", "getColumnIndex", "getInt", "getColumnIndex", "getInt", "getColumnIndex", "getInt", "getColumnIndex", "getString", "getColumnIndex", "getString", "getColumnIndex", "getString", "getColumnIndex", "getString", "getColumnIndex", "getString", "getColumnIndex", "getString", "getColumnIndex", "getString", "getColumnIndex", "getString", "getColumnIndex", "getString", "getColumnIndex", "getLong", "getColumnIndex", "getInt", "getColumnIndex", "getInt", "getColumnIndex", "getInt", "getColumnIndex", "getInt", "getColumnIndex", "getString", "getColumnIndex", "getLong", "getColumnIndex", "getString", "getColumnIndex", "getString", "getColumnIndex", "getInt", "getColumnIndex", "getString", "getColumnIndex", "emptyList", "add", "close", "onNext", "onCompleted", "e", "onError", "getCause", "d"]}, "repository": {"repo_id": 27323134, "url": "https://github.com/MythTV-Clients/MythtvPlayerForAndroid", "stars": 17, "created": "11/30/2014 3:26:45 AM +00:00", "updates": "2019-12-31T22:13:00+00:00", "fork": "False", "license": "licensed"}}