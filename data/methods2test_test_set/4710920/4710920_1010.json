{"test_class": {"identifier": "AbstractBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/AbstractBuilderTest.java"}, "test_case": {"identifier": "build", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void build() {\n        Builder builder = new Builder();\n        builder.id(\"id\");\n        builder.prefix(\"prefix\");\n\n        Config config = builder.build();\n        Config config2 = builder.build();\n\n        Assertions.assertEquals(\"id\", config.getId());\n        Assertions.assertEquals(\"prefix\", config.getPrefix());\n\n        Assertions.assertNotSame(config, config2);\n    }", "signature": "void build()", "full_signature": "@Test void build()", "class_method_signature": "AbstractBuilderTest.build()", "testcase": true, "constructor": false, "invocations": ["id", "prefix", "build", "build", "assertEquals", "getId", "assertEquals", "getPrefix", "assertNotSame"]}, "focal_class": {"identifier": "AbstractBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected String id;", "modifier": "protected", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "protected String prefix;", "modifier": "protected", "type": "String", "declarator": "prefix", "var_name": "prefix"}], "methods": [{"identifier": "id", "parameters": "(String id)", "modifiers": "public", "return": "B", "signature": "B id(String id)", "full_signature": "public B id(String id)", "class_method_signature": "AbstractBuilder.id(String id)", "testcase": false, "constructor": false}, {"identifier": "prefix", "parameters": "(String prefix)", "modifiers": "protected", "return": "B", "signature": "B prefix(String prefix)", "full_signature": "protected B prefix(String prefix)", "class_method_signature": "AbstractBuilder.prefix(String prefix)", "testcase": false, "constructor": false}, {"identifier": "getThis", "parameters": "()", "modifiers": "protected abstract", "return": "B", "signature": "B getThis()", "full_signature": "protected abstract B getThis()", "class_method_signature": "AbstractBuilder.getThis()", "testcase": false, "constructor": false}, {"identifier": "appendParameter", "parameters": "(Map<String, String> parameters, String key, String value)", "modifiers": "protected static", "return": "Map<String, String>", "signature": "Map<String, String> appendParameter(Map<String, String> parameters, String key, String value)", "full_signature": "protected static Map<String, String> appendParameter(Map<String, String> parameters, String key, String value)", "class_method_signature": "AbstractBuilder.appendParameter(Map<String, String> parameters, String key, String value)", "testcase": false, "constructor": false}, {"identifier": "appendParameters", "parameters": "(Map<String, String> parameters, Map<String, String> appendParameters)", "modifiers": "protected static", "return": "Map<String, String>", "signature": "Map<String, String> appendParameters(Map<String, String> parameters, Map<String, String> appendParameters)", "full_signature": "protected static Map<String, String> appendParameters(Map<String, String> parameters, Map<String, String> appendParameters)", "class_method_signature": "AbstractBuilder.appendParameters(Map<String, String> parameters, Map<String, String> appendParameters)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(C instance)", "modifiers": "protected", "return": "void", "signature": "void build(C instance)", "full_signature": "protected void build(C instance)", "class_method_signature": "AbstractBuilder.build(C instance)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "public abstract", "return": "C", "signature": "C build()", "full_signature": "public abstract C build()", "class_method_signature": "AbstractBuilder.build()", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/builders/AbstractBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "(C instance)", "modifiers": "protected", "return": "void", "body": "protected void build(C instance) {\n        if (!StringUtils.isEmpty(id)) {\n            instance.setId(id);\n        }\n        if (!StringUtils.isEmpty(prefix)) {\n            instance.setPrefix(prefix);\n        }\n    }", "signature": "void build(C instance)", "full_signature": "protected void build(C instance)", "class_method_signature": "AbstractBuilder.build(C instance)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "setId", "isEmpty", "setPrefix"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}