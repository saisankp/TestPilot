{"test_class": {"identifier": "ConnectionUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "rest-backend/src/test/java/org/eclipse/steady/backend/util/ConnectionUtilTest.java"}, "test_case": {"identifier": "testGetProxy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetProxy() {\n\n    String host = System.getProperty(\"http.proxyHost\");\n    String port = System.getProperty(\"http.proxyPort\");\n\n    RequestConfig g = ConnectionUtil.getProxyConfig();\n\n    System.setProperty(\"http.proxyHost\", \"proxy\");\n    System.setProperty(\"http.proxyPort\", \"80\");\n    g = ConnectionUtil.getProxyConfig();\n    assertEquals(g.getProxy().toString(), \"http://proxy:80\");\n\n    System.setProperty(\"http.proxyPort\", \"\");\n    g = ConnectionUtil.getProxyConfig();\n    assertEquals(g, null);\n    // System.out.println(g.getProxy());\n\n    if (host != null) System.setProperty(\"http.proxyHost\", host);\n    if (port != null) System.setProperty(\"http.proxyPort\", port);\n  }", "signature": "void testGetProxy()", "full_signature": "@Test public void testGetProxy()", "class_method_signature": "ConnectionUtilTest.testGetProxy()", "testcase": true, "constructor": false, "invocations": ["getProperty", "getProperty", "getProxyConfig", "setProperty", "setProperty", "getProxyConfig", "assertEquals", "toString", "getProxy", "setProperty", "getProxyConfig", "assertEquals", "setProperty", "setProperty"]}, "focal_class": {"identifier": "ConnectionUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(ConnectionUtil.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ConnectionUtil.class)", "var_name": "log"}], "methods": [{"identifier": "getProxyConfig", "parameters": "()", "modifiers": "public static", "return": "RequestConfig", "signature": "RequestConfig getProxyConfig()", "full_signature": "public static RequestConfig getProxyConfig()", "class_method_signature": "ConnectionUtil.getProxyConfig()", "testcase": false, "constructor": false}, {"identifier": "readInputStream", "parameters": "(@NotNull InputStream _is)", "modifiers": "public static", "return": "String", "signature": "String readInputStream(@NotNull InputStream _is)", "full_signature": "public static String readInputStream(@NotNull InputStream _is)", "class_method_signature": "ConnectionUtil.readInputStream(@NotNull InputStream _is)", "testcase": false, "constructor": false}], "file": "rest-backend/src/main/java/org/eclipse/steady/backend/util/ConnectionUtil.java"}, "focal_method": {"identifier": "getProxyConfig", "parameters": "()", "modifiers": "public static", "return": "RequestConfig", "body": "public static RequestConfig getProxyConfig() {\n    RequestConfig config = null;\n    final String phost = System.getProperty(\"http.proxyHost\", null);\n    final String pport = System.getProperty(\"http.proxyPort\", \"-1\");\n    int pport_int = -1;\n    try {\n      pport_int = Integer.parseInt(pport);\n    } catch (NumberFormatException e) {\n      log.warn(\n          \"The value '\"\n              + pport\n              + \"' is not a valid proxy port, the request will be executed without proxy\");\n    }\n    if (phost != null && pport_int != -1) {\n      final HttpHost http_proxy = new HttpHost(phost, pport_int, \"http\");\n      config = RequestConfig.custom().setProxy(http_proxy).build();\n    }\n    return config;\n  }", "signature": "RequestConfig getProxyConfig()", "full_signature": "public static RequestConfig getProxyConfig()", "class_method_signature": "ConnectionUtil.getProxyConfig()", "testcase": false, "constructor": false, "invocations": ["getProperty", "getProperty", "parseInt", "warn", "build", "setProxy", "custom"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}