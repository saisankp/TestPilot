{"test_class": {"identifier": "BsPatchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SIGNATURE = \"ENDSLEY/BSDIFF43\";", "modifier": "private static final", "type": "String", "declarator": "SIGNATURE = \"ENDSLEY/BSDIFF43\"", "var_name": "SIGNATURE"}, {"original_string": "private byte[] buffer1;", "modifier": "private", "type": "byte[]", "declarator": "buffer1", "var_name": "buffer1"}, {"original_string": "private byte[] buffer2;", "modifier": "private", "type": "byte[]", "declarator": "buffer2", "var_name": "buffer2"}, {"original_string": "private File oldFile;", "modifier": "private", "type": "File", "declarator": "oldFile", "var_name": "oldFile"}], "file": "feya/libraries/archive_diff/diff.applier/src/test/java/com/google/archivepatcher/applier/bsdiff/BsPatchTest.java"}, "test_case": {"identifier": "testApplyPatch_NewLengthNegative", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testApplyPatch_NewLengthNegative() throws Exception {\n    createEmptyOldFile(10);\n    InputStream patchIn =\n        makePatch(\n            SIGNATURE,\n            -10, // newLength (illegal)\n            10, // diffSegmentLength\n            0, // copySegmentLength\n            0, // offsetToNextInput\n            new byte[10] // addends\n            );\n    ByteArrayOutputStream newData = new ByteArrayOutputStream();\n    try {\n      BsPatch.applyPatch(new RandomAccessFile(oldFile, \"r\"), newData, patchIn);\n      Assert.fail(\"Read patch with negative newLength\");\n    } catch (PatchFormatException expected) {\n      // No way to mock the internal logic, so resort to testing exception string for coverage\n      String actual = expected.getMessage();\n      Assert.assertEquals(\"bad newSize\", actual);\n    }\n  }", "signature": "void testApplyPatch_NewLengthNegative()", "full_signature": "@Test public void testApplyPatch_NewLengthNegative()", "class_method_signature": "BsPatchTest.testApplyPatch_NewLengthNegative()", "testcase": true, "constructor": false, "invocations": ["createEmptyOldFile", "makePatch", "applyPatch", "fail", "getMessage", "assertEquals"]}, "focal_class": {"identifier": "BsPatch", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SIGNATURE = \"ENDSLEY/BSDIFF43\";", "modifier": "private static final", "type": "String", "declarator": "SIGNATURE = \"ENDSLEY/BSDIFF43\"", "var_name": "SIGNATURE"}, {"original_string": "private static final int PATCH_BUFFER_SIZE = 1024 * 50;", "modifier": "private static final", "type": "int", "declarator": "PATCH_BUFFER_SIZE = 1024 * 50", "var_name": "PATCH_BUFFER_SIZE"}, {"original_string": "private static final long NEGATIVE_LONG_SIGN_MASK = 1L << 63;", "modifier": "private static final", "type": "long", "declarator": "NEGATIVE_LONG_SIGN_MASK = 1L << 63", "var_name": "NEGATIVE_LONG_SIGN_MASK"}, {"original_string": "private static final int PATCH_STREAM_BUFFER_SIZE = 4 * 1024;", "modifier": "private static final", "type": "int", "declarator": "PATCH_STREAM_BUFFER_SIZE = 4 * 1024", "var_name": "PATCH_STREAM_BUFFER_SIZE"}, {"original_string": "private static final int OUTPUT_STREAM_BUFFER_SIZE = 16 * 1024;", "modifier": "private static final", "type": "int", "declarator": "OUTPUT_STREAM_BUFFER_SIZE = 16 * 1024", "var_name": "OUTPUT_STREAM_BUFFER_SIZE"}], "methods": [{"identifier": "applyPatch", "parameters": "(\n      RandomAccessFile oldData, OutputStream newData, InputStream patchData)", "modifiers": "public static", "return": "void", "signature": "void applyPatch(\n      RandomAccessFile oldData, OutputStream newData, InputStream patchData)", "full_signature": "public static void applyPatch(\n      RandomAccessFile oldData, OutputStream newData, InputStream patchData)", "class_method_signature": "BsPatch.applyPatch(\n      RandomAccessFile oldData, OutputStream newData, InputStream patchData)", "testcase": false, "constructor": false}, {"identifier": "applyPatchInternal", "parameters": "(\n      final RandomAccessFile oldData,\n      final OutputStream newData,\n      final InputStream patchData)", "modifiers": "private static", "return": "void", "signature": "void applyPatchInternal(\n      final RandomAccessFile oldData,\n      final OutputStream newData,\n      final InputStream patchData)", "full_signature": "private static void applyPatchInternal(\n      final RandomAccessFile oldData,\n      final OutputStream newData,\n      final InputStream patchData)", "class_method_signature": "BsPatch.applyPatchInternal(\n      final RandomAccessFile oldData,\n      final OutputStream newData,\n      final InputStream patchData)", "testcase": false, "constructor": false}, {"identifier": "transformBytes", "parameters": "(\n      final int diffLength,\n      final InputStream patchData,\n      final RandomAccessFile oldData,\n      final OutputStream newData,\n      final byte[] buffer1,\n      final byte[] buffer2)", "modifiers": "static", "return": "void", "signature": "void transformBytes(\n      final int diffLength,\n      final InputStream patchData,\n      final RandomAccessFile oldData,\n      final OutputStream newData,\n      final byte[] buffer1,\n      final byte[] buffer2)", "full_signature": "static void transformBytes(\n      final int diffLength,\n      final InputStream patchData,\n      final RandomAccessFile oldData,\n      final OutputStream newData,\n      final byte[] buffer1,\n      final byte[] buffer2)", "class_method_signature": "BsPatch.transformBytes(\n      final int diffLength,\n      final InputStream patchData,\n      final RandomAccessFile oldData,\n      final OutputStream newData,\n      final byte[] buffer1,\n      final byte[] buffer2)", "testcase": false, "constructor": false}, {"identifier": "readBsdiffLong", "parameters": "(InputStream in)", "modifiers": "static final", "return": "long", "signature": "long readBsdiffLong(InputStream in)", "full_signature": "static final long readBsdiffLong(InputStream in)", "class_method_signature": "BsPatch.readBsdiffLong(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "readFully", "parameters": "(\n      final InputStream in, final byte[] destination, final int startAt, final int numBytes)", "modifiers": "static", "return": "void", "signature": "void readFully(\n      final InputStream in, final byte[] destination, final int startAt, final int numBytes)", "full_signature": "static void readFully(\n      final InputStream in, final byte[] destination, final int startAt, final int numBytes)", "class_method_signature": "BsPatch.readFully(\n      final InputStream in, final byte[] destination, final int startAt, final int numBytes)", "testcase": false, "constructor": false}, {"identifier": "pipe", "parameters": "(\n      final InputStream in, final OutputStream out, final byte[] buffer, int copyLength)", "modifiers": "static", "return": "void", "signature": "void pipe(\n      final InputStream in, final OutputStream out, final byte[] buffer, int copyLength)", "full_signature": "static void pipe(\n      final InputStream in, final OutputStream out, final byte[] buffer, int copyLength)", "class_method_signature": "BsPatch.pipe(\n      final InputStream in, final OutputStream out, final byte[] buffer, int copyLength)", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.applier/src/main/java/com/google/archivepatcher/applier/bsdiff/BsPatch.java"}, "focal_method": {"identifier": "applyPatch", "parameters": "(\n      RandomAccessFile oldData, OutputStream newData, InputStream patchData)", "modifiers": "public static", "return": "void", "body": "public static void applyPatch(\n      RandomAccessFile oldData, OutputStream newData, InputStream patchData)\n      throws PatchFormatException, IOException {\n    patchData = new BufferedInputStream(patchData, PATCH_STREAM_BUFFER_SIZE);\n    newData = new BufferedOutputStream(newData, OUTPUT_STREAM_BUFFER_SIZE);\n    try {\n      applyPatchInternal(oldData, newData, patchData);\n    } finally {\n      newData.flush();\n    }\n  }", "signature": "void applyPatch(\n      RandomAccessFile oldData, OutputStream newData, InputStream patchData)", "full_signature": "public static void applyPatch(\n      RandomAccessFile oldData, OutputStream newData, InputStream patchData)", "class_method_signature": "BsPatch.applyPatch(\n      RandomAccessFile oldData, OutputStream newData, InputStream patchData)", "testcase": false, "constructor": false, "invocations": ["applyPatchInternal", "flush"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}