{"test_class": {"identifier": "XOTransactionImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Spy\n    private DatastoreTransaction datastoreTransaction = new DatastoreTransaction() {\n        private boolean active;\n\n        @Override\n        public void begin() {\n            this.active = true;\n        }\n\n        @Override\n        public void commit() {\n            this.active = false;\n        }\n\n        @Override\n        public void rollback() {\n            this.active = false;\n        }\n\n        @Override\n        public boolean isActive() {\n            return this.active;\n        }\n    };", "modifier": "@Spy\n    private", "type": "DatastoreTransaction", "declarator": "datastoreTransaction = new DatastoreTransaction() {\n        private boolean active;\n\n        @Override\n        public void begin() {\n            this.active = true;\n        }\n\n        @Override\n        public void commit() {\n            this.active = false;\n        }\n\n        @Override\n        public void rollback() {\n            this.active = false;\n        }\n\n        @Override\n        public boolean isActive() {\n            return this.active;\n        }\n    }", "var_name": "datastoreTransaction"}], "file": "impl/src/test/java/com/buschmais/xo/impl/XOTransactionImplTest.java"}, "test_case": {"identifier": "rollback", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void rollback() {\n        XOTransaction xoTransaction = new XOTransactionImpl(datastoreTransaction);\n        xoTransaction.begin();\n        assertThat(xoTransaction.isActive(), equalTo(true));\n        xoTransaction.rollback();\n        assertThat(xoTransaction.isActive(), equalTo(false));\n        verify(datastoreTransaction).begin();\n        verify(datastoreTransaction, never()).commit();\n        verify(datastoreTransaction).rollback();\n        verify(datastoreTransaction, times(2)).isActive();\n    }", "signature": "void rollback()", "full_signature": "@Test public void rollback()", "class_method_signature": "XOTransactionImplTest.rollback()", "testcase": true, "constructor": false, "invocations": ["begin", "assertThat", "isActive", "equalTo", "rollback", "assertThat", "isActive", "equalTo", "begin", "verify", "commit", "verify", "never", "rollback", "verify", "isActive", "verify", "times"]}, "focal_class": {"identifier": "XOTransactionImpl", "superclass": "", "interfaces": "implements XOTransaction", "fields": [{"original_string": "private final DatastoreTransaction datastoreTransaction;", "modifier": "private final", "type": "DatastoreTransaction", "declarator": "datastoreTransaction", "var_name": "datastoreTransaction"}, {"original_string": "private final Collection<Synchronization> defaultSynchronizations = new LinkedList<>();", "modifier": "private final", "type": "Collection<Synchronization>", "declarator": "defaultSynchronizations = new LinkedList<>()", "var_name": "defaultSynchronizations"}, {"original_string": "private final Collection<Synchronization> synchronizations = new LinkedList<>();", "modifier": "private final", "type": "Collection<Synchronization>", "declarator": "synchronizations = new LinkedList<>()", "var_name": "synchronizations"}, {"original_string": "private boolean rollbackOnly;", "modifier": "private", "type": "boolean", "declarator": "rollbackOnly", "var_name": "rollbackOnly"}], "methods": [{"identifier": "XOTransactionImpl", "parameters": "(DatastoreTransaction datastoreTransaction)", "modifiers": "public", "return": "", "signature": " XOTransactionImpl(DatastoreTransaction datastoreTransaction)", "full_signature": "public  XOTransactionImpl(DatastoreTransaction datastoreTransaction)", "class_method_signature": "XOTransactionImpl.XOTransactionImpl(DatastoreTransaction datastoreTransaction)", "testcase": false, "constructor": true}, {"identifier": "begin", "parameters": "()", "modifiers": "@Override public", "return": "XOTransaction", "signature": "XOTransaction begin()", "full_signature": "@Override public XOTransaction begin()", "class_method_signature": "XOTransactionImpl.begin()", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void commit()", "full_signature": "@Override public void commit()", "class_method_signature": "XOTransactionImpl.commit()", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void rollback()", "full_signature": "@Override public void rollback()", "class_method_signature": "XOTransactionImpl.rollback()", "testcase": false, "constructor": false}, {"identifier": "isActive", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isActive()", "full_signature": "@Override public boolean isActive()", "class_method_signature": "XOTransactionImpl.isActive()", "testcase": false, "constructor": false}, {"identifier": "setRollbackOnly", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void setRollbackOnly()", "full_signature": "@Override public void setRollbackOnly()", "class_method_signature": "XOTransactionImpl.setRollbackOnly()", "testcase": false, "constructor": false}, {"identifier": "isRollbackOnly", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRollbackOnly()", "full_signature": "@Override public boolean isRollbackOnly()", "class_method_signature": "XOTransactionImpl.isRollbackOnly()", "testcase": false, "constructor": false}, {"identifier": "registerSynchronization", "parameters": "(Synchronization synchronization)", "modifiers": "@Override public", "return": "void", "signature": "void registerSynchronization(Synchronization synchronization)", "full_signature": "@Override public void registerSynchronization(Synchronization synchronization)", "class_method_signature": "XOTransactionImpl.registerSynchronization(Synchronization synchronization)", "testcase": false, "constructor": false}, {"identifier": "unregisterSynchronization", "parameters": "(Synchronization synchronization)", "modifiers": "@Override public", "return": "void", "signature": "void unregisterSynchronization(Synchronization synchronization)", "full_signature": "@Override public void unregisterSynchronization(Synchronization synchronization)", "class_method_signature": "XOTransactionImpl.unregisterSynchronization(Synchronization synchronization)", "testcase": false, "constructor": false}, {"identifier": "registerDefaultSynchronization", "parameters": "(Synchronization synchronization)", "modifiers": "public", "return": "void", "signature": "void registerDefaultSynchronization(Synchronization synchronization)", "full_signature": "public void registerDefaultSynchronization(Synchronization synchronization)", "class_method_signature": "XOTransactionImpl.registerDefaultSynchronization(Synchronization synchronization)", "testcase": false, "constructor": false}, {"identifier": "beforeCompletion", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void beforeCompletion()", "full_signature": "private void beforeCompletion()", "class_method_signature": "XOTransactionImpl.beforeCompletion()", "testcase": false, "constructor": false}, {"identifier": "afterCompletion", "parameters": "(final boolean committed)", "modifiers": "private", "return": "void", "signature": "void afterCompletion(final boolean committed)", "full_signature": "private void afterCompletion(final boolean committed)", "class_method_signature": "XOTransactionImpl.afterCompletion(final boolean committed)", "testcase": false, "constructor": false}, {"identifier": "executeSynchronizations", "parameters": "(SynchronizationOperation operation)", "modifiers": "private", "return": "void", "signature": "void executeSynchronizations(SynchronizationOperation operation)", "full_signature": "private void executeSynchronizations(SynchronizationOperation operation)", "class_method_signature": "XOTransactionImpl.executeSynchronizations(SynchronizationOperation operation)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "XOTransactionImpl.close()", "testcase": false, "constructor": false}], "file": "impl/src/main/java/com/buschmais/xo/impl/XOTransactionImpl.java"}, "focal_method": {"identifier": "rollback", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void rollback() {\n        try {\n            datastoreTransaction.rollback();\n        } finally {\n            afterCompletion(false);\n            rollbackOnly = false;\n        }\n    }", "signature": "void rollback()", "full_signature": "@Override public void rollback()", "class_method_signature": "XOTransactionImpl.rollback()", "testcase": false, "constructor": false, "invocations": ["rollback", "afterCompletion"]}, "repository": {"repo_id": 14117014, "url": "https://github.com/buschmais/extended-objects", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 23, "size": 9542, "license": "licensed"}}