{"test_class": {"identifier": "ProjectUpdaterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long REFRESH_INTERVAL = 10;", "modifier": "private static final", "type": "long", "declarator": "REFRESH_INTERVAL = 10", "var_name": "REFRESH_INTERVAL"}, {"original_string": "@Captor\n    private ArgumentCaptor<List<Project>> projectListCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<List<Project>>", "declarator": "projectListCaptor", "var_name": "projectListCaptor"}, {"original_string": "@Mock\n    private ProjectService projectServiceMock;", "modifier": "@Mock\n    private", "type": "ProjectService", "declarator": "projectServiceMock", "var_name": "projectServiceMock"}, {"original_string": "@Mock\n    private ProjectReader projectReaderMock;", "modifier": "@Mock\n    private", "type": "ProjectReader", "declarator": "projectReaderMock", "var_name": "projectReaderMock"}, {"original_string": "@Mock\n    private ProjectBoardConfigurationProperties pbConfigPropertiesMock;", "modifier": "@Mock\n    private", "type": "ProjectBoardConfigurationProperties", "declarator": "pbConfigPropertiesMock", "var_name": "pbConfigPropertiesMock"}, {"original_string": "@Mock\n    private Project projectMock;", "modifier": "@Mock\n    private", "type": "Project", "declarator": "projectMock", "var_name": "projectMock"}, {"original_string": "@Mock\n    private Normalizer<Project> normalizerMock;", "modifier": "@Mock\n    private", "type": "Normalizer<Project>", "declarator": "normalizerMock", "var_name": "normalizerMock"}, {"original_string": "private Clock clock;", "modifier": "private", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private ProjectUpdater projectUpdater;", "modifier": "private", "type": "ProjectUpdater", "declarator": "projectUpdater", "var_name": "projectUpdater"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/base/project/updater/ProjectUpdaterTest.java"}, "test_case": {"identifier": "executeSavesInitialProjects", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void executeSavesInitialProjects() throws Exception {\n        // given\n        var expectedProjects = List.of(projectMock);\n\n        given(projectReaderMock.getInitialProjects())\n                .willReturn(expectedProjects);\n        given(normalizerMock.normalize(expectedProjects))\n                .willReturn(expectedProjects);\n\n        // when\n        projectUpdater.execute();\n\n        // then\n        verify(projectServiceMock).saveAll(projectListCaptor.capture());\n\n        var actualProjects = projectListCaptor.getValue();\n        assertThat(actualProjects).containsExactlyElementsOf(expectedProjects);\n    }", "signature": "void executeSavesInitialProjects()", "full_signature": "@Test public void executeSavesInitialProjects()", "class_method_signature": "ProjectUpdaterTest.executeSavesInitialProjects()", "testcase": true, "constructor": false, "invocations": ["of", "willReturn", "given", "getInitialProjects", "willReturn", "given", "normalize", "execute", "saveAll", "verify", "capture", "getValue", "containsExactlyElementsOf", "assertThat"]}, "focal_class": {"identifier": "ProjectUpdater", "superclass": "", "interfaces": "implements ScheduledJob", "fields": [{"original_string": "private final ProjectService projectService;", "modifier": "private final", "type": "ProjectService", "declarator": "projectService", "var_name": "projectService"}, {"original_string": "private final ProjectReader projectReader;", "modifier": "private final", "type": "ProjectReader", "declarator": "projectReader", "var_name": "projectReader"}, {"original_string": "private final Duration refreshIntervalDuration;", "modifier": "private final", "type": "Duration", "declarator": "refreshIntervalDuration", "var_name": "refreshIntervalDuration"}, {"original_string": "private final List<Normalizer<Project>> normalizers;", "modifier": "private final", "type": "List<Normalizer<Project>>", "declarator": "normalizers", "var_name": "normalizers"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "ProjectUpdater", "parameters": "(ProjectService projectService,\n                          ProjectReader projectReader,\n                          ProjectBoardConfigurationProperties properties,\n                          @Lazy List<Normalizer<Project>> normalizers,\n                          Clock clock)", "modifiers": "@Autowired(required = false) public", "return": "", "signature": " ProjectUpdater(ProjectService projectService,\n                          ProjectReader projectReader,\n                          ProjectBoardConfigurationProperties properties,\n                          @Lazy List<Normalizer<Project>> normalizers,\n                          Clock clock)", "full_signature": "@Autowired(required = false) public  ProjectUpdater(ProjectService projectService,\n                          ProjectReader projectReader,\n                          ProjectBoardConfigurationProperties properties,\n                          @Lazy List<Normalizer<Project>> normalizers,\n                          Clock clock)", "class_method_signature": "ProjectUpdater.ProjectUpdater(ProjectService projectService,\n                          ProjectReader projectReader,\n                          ProjectBoardConfigurationProperties properties,\n                          @Lazy List<Normalizer<Project>> normalizers,\n                          Clock clock)", "testcase": false, "constructor": true}, {"identifier": "ProjectUpdater", "parameters": "(ProjectService projectService,\n                          ProjectReader projectReader,\n                          ProjectBoardConfigurationProperties properties,\n                          Clock clock)", "modifiers": "@Autowired(required = false) public", "return": "", "signature": " ProjectUpdater(ProjectService projectService,\n                          ProjectReader projectReader,\n                          ProjectBoardConfigurationProperties properties,\n                          Clock clock)", "full_signature": "@Autowired(required = false) public  ProjectUpdater(ProjectService projectService,\n                          ProjectReader projectReader,\n                          ProjectBoardConfigurationProperties properties,\n                          Clock clock)", "class_method_signature": "ProjectUpdater.ProjectUpdater(ProjectService projectService,\n                          ProjectReader projectReader,\n                          ProjectBoardConfigurationProperties properties,\n                          Clock clock)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(LocalDateTime lastExecuteTime)", "modifiers": "@Override public", "return": "void", "signature": "void execute(LocalDateTime lastExecuteTime)", "full_signature": "@Override public void execute(LocalDateTime lastExecuteTime)", "class_method_signature": "ProjectUpdater.execute(LocalDateTime lastExecuteTime)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "ProjectUpdater.execute()", "testcase": false, "constructor": false}, {"identifier": "getJobIdentifier", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getJobIdentifier()", "full_signature": "@Override public String getJobIdentifier()", "class_method_signature": "ProjectUpdater.getJobIdentifier()", "testcase": false, "constructor": false}, {"identifier": "shouldExecute", "parameters": "(LocalDateTime lastExecuteTime)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shouldExecute(LocalDateTime lastExecuteTime)", "full_signature": "@Override public boolean shouldExecute(LocalDateTime lastExecuteTime)", "class_method_signature": "ProjectUpdater.shouldExecute(LocalDateTime lastExecuteTime)", "testcase": false, "constructor": false}, {"identifier": "normalizeAndSave", "parameters": "(List<Project> projects)", "modifiers": "private", "return": "void", "signature": "void normalizeAndSave(List<Project> projects)", "full_signature": "private void normalizeAndSave(List<Project> projects)", "class_method_signature": "ProjectUpdater.normalizeAndSave(List<Project> projects)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/base/project/updater/ProjectUpdater.java"}, "focal_method": {"identifier": "execute", "parameters": "(LocalDateTime lastExecuteTime)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(LocalDateTime lastExecuteTime) throws Exception {\n        var projects = projectReader.getAllProjectsSince(lastExecuteTime);\n        normalizeAndSave(projects);\n    }", "signature": "void execute(LocalDateTime lastExecuteTime)", "full_signature": "@Override public void execute(LocalDateTime lastExecuteTime)", "class_method_signature": "ProjectUpdater.execute(LocalDateTime lastExecuteTime)", "testcase": false, "constructor": false, "invocations": ["getAllProjectsSince", "normalizeAndSave"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}