{"test_class": {"identifier": "TestSource", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/fr/gael/dhus/database/object/config/source/TestSource.java"}, "test_case": {"identifier": "concurrentDownload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void concurrentDownload()\n   {\n      Source source = new Source();\n      Assert.assertEquals(source.concurrentDownload(), 0);\n\n      String calculatorId = UUID.randomUUID().toString();\n      Assert.assertTrue(source.generateBandwidthCalculator(calculatorId));\n      Assert.assertEquals(source.concurrentDownload(), 1);\n\n      source.removeBandwidthCalculator(calculatorId);\n      Assert.assertEquals(source.concurrentDownload(), 0);\n   }", "signature": "void concurrentDownload()", "full_signature": "@Test public void concurrentDownload()", "class_method_signature": "TestSource.concurrentDownload()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "concurrentDownload", "toString", "randomUUID", "assertTrue", "generateBandwidthCalculator", "assertEquals", "concurrentDownload", "removeBandwidthCalculator", "assertEquals", "concurrentDownload"]}, "focal_class": {"identifier": "Source", "superclass": "extends SourceConfiguration", "interfaces": "implements Comparable<Source>", "fields": [{"original_string": "private static final int CALCULATOR_CACHE_TTL = 5;", "modifier": "private static final", "type": "int", "declarator": "CALCULATOR_CACHE_TTL = 5", "var_name": "CALCULATOR_CACHE_TTL"}, {"original_string": "private static final int CALCULATOR_CACHE_MAX_ENTRIES = 1_000;", "modifier": "private static final", "type": "int", "declarator": "CALCULATOR_CACHE_MAX_ENTRIES = 1_000", "var_name": "CALCULATOR_CACHE_MAX_ENTRIES"}, {"original_string": "private static final String SOURCE_CACHE_PREFIX = \"AverageBandwidthSource#\";", "modifier": "private static final", "type": "String", "declarator": "SOURCE_CACHE_PREFIX = \"AverageBandwidthSource#\"", "var_name": "SOURCE_CACHE_PREFIX"}, {"original_string": "private static final int SOURCE_CACHE_TTL = 180;", "modifier": "private static final", "type": "int", "declarator": "SOURCE_CACHE_TTL = 180", "var_name": "SOURCE_CACHE_TTL"}, {"original_string": "private static final int SOURCE_CACHE_MAX_ENTRIES = SOURCE_CACHE_TTL * 1_000;", "modifier": "private static final", "type": "int", "declarator": "SOURCE_CACHE_MAX_ENTRIES = SOURCE_CACHE_TTL * 1_000", "var_name": "SOURCE_CACHE_MAX_ENTRIES"}, {"original_string": "private static final int MIN_CACHE_ENTRIES = 100;", "modifier": "private static final", "type": "int", "declarator": "MIN_CACHE_ENTRIES = 100", "var_name": "MIN_CACHE_ENTRIES"}, {"original_string": "static final long UNKNOWN_BANDWIDTH = -1;", "modifier": "static final", "type": "long", "declarator": "UNKNOWN_BANDWIDTH = -1", "var_name": "UNKNOWN_BANDWIDTH"}, {"original_string": "@XmlTransient\n   private final ConcurrentHashMap<String, BandwidthCalculator> calculatorMap;", "modifier": "@XmlTransient\n   private final", "type": "ConcurrentHashMap<String, BandwidthCalculator>", "declarator": "calculatorMap", "var_name": "calculatorMap"}, {"original_string": "@XmlTransient\n   private CacheManager cacheManager;", "modifier": "@XmlTransient\n   private", "type": "CacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "@XmlTransient\n   private Cache cache;", "modifier": "@XmlTransient\n   private", "type": "Cache", "declarator": "cache", "var_name": "cache"}], "methods": [{"identifier": "initCacheManager", "parameters": "(Source source)", "modifiers": "private static", "return": "void", "signature": "void initCacheManager(Source source)", "full_signature": "private static void initCacheManager(Source source)", "class_method_signature": "Source.initCacheManager(Source source)", "testcase": false, "constructor": false}, {"identifier": "initSourceCache", "parameters": "(Source source)", "modifiers": "private static", "return": "void", "signature": "void initSourceCache(Source source)", "full_signature": "private static void initSourceCache(Source source)", "class_method_signature": "Source.initSourceCache(Source source)", "testcase": false, "constructor": false}, {"identifier": "computeBandwidthFromCache", "parameters": "(Cache cache)", "modifiers": "private static", "return": "long", "signature": "long computeBandwidthFromCache(Cache cache)", "full_signature": "private static long computeBandwidthFromCache(Cache cache)", "class_method_signature": "Source.computeBandwidthFromCache(Cache cache)", "testcase": false, "constructor": false}, {"identifier": "Source", "parameters": "()", "modifiers": "public", "return": "", "signature": " Source()", "full_signature": "public  Source()", "class_method_signature": "Source.Source()", "testcase": false, "constructor": true}, {"identifier": "Source", "parameters": "(SourceConfiguration config)", "modifiers": "", "return": "", "signature": " Source(SourceConfiguration config)", "full_signature": "  Source(SourceConfiguration config)", "class_method_signature": "Source.Source(SourceConfiguration config)", "testcase": false, "constructor": true}, {"identifier": "initSource", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void initSource()", "full_signature": "private synchronized void initSource()", "class_method_signature": "Source.initSource()", "testcase": false, "constructor": false}, {"identifier": "getBandwidth", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getBandwidth()", "full_signature": "public long getBandwidth()", "class_method_signature": "Source.getBandwidth()", "testcase": false, "constructor": false}, {"identifier": "concurrentDownload", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int concurrentDownload()", "full_signature": "public int concurrentDownload()", "class_method_signature": "Source.concurrentDownload()", "testcase": false, "constructor": false}, {"identifier": "generateBandwidthCalculator", "parameters": "(String identifier)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean generateBandwidthCalculator(String identifier)", "full_signature": "public synchronized boolean generateBandwidthCalculator(String identifier)", "class_method_signature": "Source.generateBandwidthCalculator(String identifier)", "testcase": false, "constructor": false}, {"identifier": "populateBandwidthCalculator", "parameters": "(String id, long transferredBytes)", "modifiers": "public", "return": "void", "signature": "void populateBandwidthCalculator(String id, long transferredBytes)", "full_signature": "public void populateBandwidthCalculator(String id, long transferredBytes)", "class_method_signature": "Source.populateBandwidthCalculator(String id, long transferredBytes)", "testcase": false, "constructor": false}, {"identifier": "getCalculatedBandwidth", "parameters": "(String id)", "modifiers": "public", "return": "long", "signature": "long getCalculatedBandwidth(String id)", "full_signature": "public long getCalculatedBandwidth(String id)", "class_method_signature": "Source.getCalculatedBandwidth(String id)", "testcase": false, "constructor": false}, {"identifier": "removeBandwidthCalculator", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void removeBandwidthCalculator(String id)", "full_signature": "public void removeBandwidthCalculator(String id)", "class_method_signature": "Source.removeBandwidthCalculator(String id)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Source.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Source.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Source o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(Source o)", "full_signature": "@Override public int compareTo(Source o)", "class_method_signature": "Source.compareTo(Source o)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "Source.close()", "testcase": false, "constructor": false}, {"identifier": "finalize", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void finalize()", "full_signature": "@Override protected void finalize()", "class_method_signature": "Source.finalize()", "testcase": false, "constructor": false}], "file": "core/src/main/java/fr/gael/dhus/database/object/config/source/Source.java"}, "focal_method": {"identifier": "concurrentDownload", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int concurrentDownload()\n   {\n      return calculatorMap.size();\n   }", "signature": "int concurrentDownload()", "full_signature": "public int concurrentDownload()", "class_method_signature": "Source.concurrentDownload()", "testcase": false, "constructor": false, "invocations": ["size"]}, "repository": {"repo_id": 90016934, "url": "https://github.com/SentinelDataHub/dhus-core", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 2371, "license": "licensed"}}