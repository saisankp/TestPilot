{"test_class": {"identifier": "KafkaStreamsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static final EmbeddedSingleNodeKafkaCluster CLUSTER = new EmbeddedSingleNodeKafkaCluster();", "modifier": "@ClassRule\n    public static final", "type": "EmbeddedSingleNodeKafkaCluster", "declarator": "CLUSTER = new EmbeddedSingleNodeKafkaCluster()", "var_name": "CLUSTER"}], "file": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java"}, "test_case": {"identifier": "testCloseIsIdempotent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCloseIsIdempotent() throws Exception {\n        final Properties props = new Properties();\n        props.setProperty(StreamsConfig.APPLICATION_ID_CONFIG, \"testCloseIsIdempotent\");\n        props.setProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        props.setProperty(StreamsConfig.METRIC_REPORTER_CLASSES_CONFIG, MockMetricsReporter.class.getName());\n\n        final KStreamBuilder builder = new KStreamBuilder();\n        final KafkaStreams streams = new KafkaStreams(builder, props);\n        streams.close();\n        final int closeCount = MockMetricsReporter.CLOSE_COUNT.get();\n\n        streams.close();\n        Assert.assertEquals(\"subsequent close() calls should do nothing\",\n            closeCount, MockMetricsReporter.CLOSE_COUNT.get());\n    }", "signature": "void testCloseIsIdempotent()", "full_signature": "@Test public void testCloseIsIdempotent()", "class_method_signature": "KafkaStreamsTest.testCloseIsIdempotent()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "bootstrapServers", "setProperty", "getName", "close", "get", "close", "assertEquals", "get"]}, "focal_class": {"identifier": "KafkaStreams", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(KafkaStreams.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(KafkaStreams.class)", "var_name": "log"}, {"original_string": "private static final AtomicInteger STREAM_CLIENT_ID_SEQUENCE = new AtomicInteger(1);", "modifier": "private static final", "type": "AtomicInteger", "declarator": "STREAM_CLIENT_ID_SEQUENCE = new AtomicInteger(1)", "var_name": "STREAM_CLIENT_ID_SEQUENCE"}, {"original_string": "private static final String JMX_PREFIX = \"kafka.streams\";", "modifier": "private static final", "type": "String", "declarator": "JMX_PREFIX = \"kafka.streams\"", "var_name": "JMX_PREFIX"}, {"original_string": "private static final int CREATED = 0;", "modifier": "private static final", "type": "int", "declarator": "CREATED = 0", "var_name": "CREATED"}, {"original_string": "private static final int RUNNING = 1;", "modifier": "private static final", "type": "int", "declarator": "RUNNING = 1", "var_name": "RUNNING"}, {"original_string": "private static final int STOPPED = 2;", "modifier": "private static final", "type": "int", "declarator": "STOPPED = 2", "var_name": "STOPPED"}, {"original_string": "private int state = CREATED;", "modifier": "private", "type": "int", "declarator": "state = CREATED", "var_name": "state"}, {"original_string": "private final StreamThread[] threads;", "modifier": "private final", "type": "StreamThread[]", "declarator": "threads", "var_name": "threads"}, {"original_string": "private final Metrics metrics;", "modifier": "private final", "type": "Metrics", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private final UUID processId;", "modifier": "private final", "type": "UUID", "declarator": "processId", "var_name": "processId"}, {"original_string": "private final StreamsConfig config;", "modifier": "private final", "type": "StreamsConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "KafkaStreams", "parameters": "(final TopologyBuilder builder, final Properties props)", "modifiers": "public", "return": "", "signature": " KafkaStreams(final TopologyBuilder builder, final Properties props)", "full_signature": "public  KafkaStreams(final TopologyBuilder builder, final Properties props)", "class_method_signature": "KafkaStreams.KafkaStreams(final TopologyBuilder builder, final Properties props)", "testcase": false, "constructor": true}, {"identifier": "KafkaStreams", "parameters": "(final TopologyBuilder builder, final StreamsConfig config)", "modifiers": "public", "return": "", "signature": " KafkaStreams(final TopologyBuilder builder, final StreamsConfig config)", "full_signature": "public  KafkaStreams(final TopologyBuilder builder, final StreamsConfig config)", "class_method_signature": "KafkaStreams.KafkaStreams(final TopologyBuilder builder, final StreamsConfig config)", "testcase": false, "constructor": true}, {"identifier": "KafkaStreams", "parameters": "(final TopologyBuilder builder, final StreamsConfig config, final KafkaClientSupplier clientSupplier)", "modifiers": "public", "return": "", "signature": " KafkaStreams(final TopologyBuilder builder, final StreamsConfig config, final KafkaClientSupplier clientSupplier)", "full_signature": "public  KafkaStreams(final TopologyBuilder builder, final StreamsConfig config, final KafkaClientSupplier clientSupplier)", "class_method_signature": "KafkaStreams.KafkaStreams(final TopologyBuilder builder, final StreamsConfig config, final KafkaClientSupplier clientSupplier)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void start()", "full_signature": "public synchronized void start()", "class_method_signature": "KafkaStreams.start()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void close()", "full_signature": "public synchronized void close()", "class_method_signature": "KafkaStreams.close()", "testcase": false, "constructor": false}, {"identifier": "cleanUp", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cleanUp()", "full_signature": "public void cleanUp()", "class_method_signature": "KafkaStreams.cleanUp()", "testcase": false, "constructor": false}, {"identifier": "setUncaughtExceptionHandler", "parameters": "(final Thread.UncaughtExceptionHandler eh)", "modifiers": "public", "return": "void", "signature": "void setUncaughtExceptionHandler(final Thread.UncaughtExceptionHandler eh)", "full_signature": "public void setUncaughtExceptionHandler(final Thread.UncaughtExceptionHandler eh)", "class_method_signature": "KafkaStreams.setUncaughtExceptionHandler(final Thread.UncaughtExceptionHandler eh)", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void close() {\n        log.debug(\"Stopping Kafka Stream process\");\n\n        if (this.state == RUNNING) {\n            // signal the threads to stop and wait\n            for (final StreamThread thread : this.threads)\n                thread.close();\n\n            for (final StreamThread thread : this.threads) {\n                try {\n                    thread.join();\n                } catch (final InterruptedException ex) {\n                    Thread.interrupted();\n                }\n            }\n        }\n\n        if (this.state != STOPPED) {\n            this.metrics.close();\n            this.state = STOPPED;\n            log.info(\"Stopped Kafka Stream process\");\n        }\n\n    }", "signature": "void close()", "full_signature": "public synchronized void close()", "class_method_signature": "KafkaStreams.close()", "testcase": false, "constructor": false, "invocations": ["debug", "close", "join", "interrupted", "close", "info"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}