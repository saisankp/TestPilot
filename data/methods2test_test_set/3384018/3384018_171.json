{"test_class": {"identifier": "TestBrowserCompatSpec", "superclass": "", "interfaces": "", "fields": [], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/impl/cookie/TestBrowserCompatSpec.java"}, "test_case": {"identifier": "testParseWithPathMismatch2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseWithPathMismatch2() throws Exception {\n        Header header = new BasicHeader(\"Set-Cookie\",\n            \"cookie-name=cookie-value; path=/foobar\");\n\n        CookieSpec cookiespec = new BrowserCompatSpec();\n        CookieOrigin origin = new CookieOrigin(\"127.0.0.1\", 80, \"/foo\", false);\n        try {\n            List<Cookie> cookies = cookiespec.parse(header, origin);\n            for (int i = 0; i < cookies.size(); i++) {\n                cookiespec.validate(cookies.get(i), origin);\n            }\n            Assert.fail(\"MalformedCookieException should have been thrown.\");\n        } catch (MalformedCookieException e) {\n            // expected\n        }\n    }", "signature": "void testParseWithPathMismatch2()", "full_signature": "@Test public void testParseWithPathMismatch2()", "class_method_signature": "TestBrowserCompatSpec.testParseWithPathMismatch2()", "testcase": true, "constructor": false, "invocations": ["parse", "size", "validate", "get", "fail"]}, "focal_class": {"identifier": "BrowserCompatSpec", "superclass": "extends CookieSpecBase", "interfaces": "", "fields": [{"original_string": "@Deprecated\n    protected static final String[] DATE_PATTERNS = new String[] {\n            DateUtils.PATTERN_RFC1123,\n            DateUtils.PATTERN_RFC1036,\n            DateUtils.PATTERN_ASCTIME,\n            \"EEE, dd-MMM-yyyy HH:mm:ss z\",\n            \"EEE, dd-MMM-yyyy HH-mm-ss z\",\n            \"EEE, dd MMM yy HH:mm:ss z\",\n            \"EEE dd-MMM-yyyy HH:mm:ss z\",\n            \"EEE dd MMM yyyy HH:mm:ss z\",\n            \"EEE dd-MMM-yyyy HH-mm-ss z\",\n            \"EEE dd-MMM-yy HH:mm:ss z\",\n            \"EEE dd MMM yy HH:mm:ss z\",\n            \"EEE,dd-MMM-yy HH:mm:ss z\",\n            \"EEE,dd-MMM-yyyy HH:mm:ss z\",\n            \"EEE, dd-MM-yyyy HH:mm:ss z\",\n        };", "modifier": "@Deprecated\n    protected static final", "type": "String[]", "declarator": "DATE_PATTERNS = new String[] {\n            DateUtils.PATTERN_RFC1123,\n            DateUtils.PATTERN_RFC1036,\n            DateUtils.PATTERN_ASCTIME,\n            \"EEE, dd-MMM-yyyy HH:mm:ss z\",\n            \"EEE, dd-MMM-yyyy HH-mm-ss z\",\n            \"EEE, dd MMM yy HH:mm:ss z\",\n            \"EEE dd-MMM-yyyy HH:mm:ss z\",\n            \"EEE dd MMM yyyy HH:mm:ss z\",\n            \"EEE dd-MMM-yyyy HH-mm-ss z\",\n            \"EEE dd-MMM-yy HH:mm:ss z\",\n            \"EEE dd MMM yy HH:mm:ss z\",\n            \"EEE,dd-MMM-yy HH:mm:ss z\",\n            \"EEE,dd-MMM-yyyy HH:mm:ss z\",\n            \"EEE, dd-MM-yyyy HH:mm:ss z\",\n        }", "var_name": "DATE_PATTERNS"}, {"original_string": "private static final String[] DEFAULT_DATE_PATTERNS = new String[] {\n        DateUtils.PATTERN_RFC1123,\n        DateUtils.PATTERN_RFC1036,\n        DateUtils.PATTERN_ASCTIME,\n        \"EEE, dd-MMM-yyyy HH:mm:ss z\",\n        \"EEE, dd-MMM-yyyy HH-mm-ss z\",\n        \"EEE, dd MMM yy HH:mm:ss z\",\n        \"EEE dd-MMM-yyyy HH:mm:ss z\",\n        \"EEE dd MMM yyyy HH:mm:ss z\",\n        \"EEE dd-MMM-yyyy HH-mm-ss z\",\n        \"EEE dd-MMM-yy HH:mm:ss z\",\n        \"EEE dd MMM yy HH:mm:ss z\",\n        \"EEE,dd-MMM-yy HH:mm:ss z\",\n        \"EEE,dd-MMM-yyyy HH:mm:ss z\",\n        \"EEE, dd-MM-yyyy HH:mm:ss z\",\n    };", "modifier": "private static final", "type": "String[]", "declarator": "DEFAULT_DATE_PATTERNS = new String[] {\n        DateUtils.PATTERN_RFC1123,\n        DateUtils.PATTERN_RFC1036,\n        DateUtils.PATTERN_ASCTIME,\n        \"EEE, dd-MMM-yyyy HH:mm:ss z\",\n        \"EEE, dd-MMM-yyyy HH-mm-ss z\",\n        \"EEE, dd MMM yy HH:mm:ss z\",\n        \"EEE dd-MMM-yyyy HH:mm:ss z\",\n        \"EEE dd MMM yyyy HH:mm:ss z\",\n        \"EEE dd-MMM-yyyy HH-mm-ss z\",\n        \"EEE dd-MMM-yy HH:mm:ss z\",\n        \"EEE dd MMM yy HH:mm:ss z\",\n        \"EEE,dd-MMM-yy HH:mm:ss z\",\n        \"EEE,dd-MMM-yyyy HH:mm:ss z\",\n        \"EEE, dd-MM-yyyy HH:mm:ss z\",\n    }", "var_name": "DEFAULT_DATE_PATTERNS"}, {"original_string": "private final String[] datepatterns;", "modifier": "private final", "type": "String[]", "declarator": "datepatterns", "var_name": "datepatterns"}], "methods": [{"identifier": "BrowserCompatSpec", "parameters": "(final String[] datepatterns)", "modifiers": "public", "return": "", "signature": " BrowserCompatSpec(final String[] datepatterns)", "full_signature": "public  BrowserCompatSpec(final String[] datepatterns)", "class_method_signature": "BrowserCompatSpec.BrowserCompatSpec(final String[] datepatterns)", "testcase": false, "constructor": true}, {"identifier": "BrowserCompatSpec", "parameters": "()", "modifiers": "public", "return": "", "signature": " BrowserCompatSpec()", "full_signature": "public  BrowserCompatSpec()", "class_method_signature": "BrowserCompatSpec.BrowserCompatSpec()", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(final Header header, final CookieOrigin origin)", "modifiers": "public", "return": "List<Cookie>", "signature": "List<Cookie> parse(final Header header, final CookieOrigin origin)", "full_signature": "public List<Cookie> parse(final Header header, final CookieOrigin origin)", "class_method_signature": "BrowserCompatSpec.parse(final Header header, final CookieOrigin origin)", "testcase": false, "constructor": false}, {"identifier": "formatCookies", "parameters": "(final List<Cookie> cookies)", "modifiers": "public", "return": "List<Header>", "signature": "List<Header> formatCookies(final List<Cookie> cookies)", "full_signature": "public List<Header> formatCookies(final List<Cookie> cookies)", "class_method_signature": "BrowserCompatSpec.formatCookies(final List<Cookie> cookies)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getVersion()", "full_signature": "public int getVersion()", "class_method_signature": "BrowserCompatSpec.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getVersionHeader", "parameters": "()", "modifiers": "public", "return": "Header", "signature": "Header getVersionHeader()", "full_signature": "public Header getVersionHeader()", "class_method_signature": "BrowserCompatSpec.getVersionHeader()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BrowserCompatSpec.toString()", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/impl/cookie/BrowserCompatSpec.java"}, "focal_method": {"identifier": "parse", "parameters": "(final Header header, final CookieOrigin origin)", "modifiers": "public", "return": "List<Cookie>", "body": "public List<Cookie> parse(final Header header, final CookieOrigin origin)\n            throws MalformedCookieException {\n        if (header == null) {\n            throw new IllegalArgumentException(\"Header may not be null\");\n        }\n        if (origin == null) {\n            throw new IllegalArgumentException(\"Cookie origin may not be null\");\n        }\n        String headername = header.getName();\n        if (!headername.equalsIgnoreCase(SM.SET_COOKIE)) {\n            throw new MalformedCookieException(\"Unrecognized cookie header '\"\n                    + header.toString() + \"'\");\n        }\n        HeaderElement[] helems = header.getElements();\n        boolean versioned = false;\n        boolean netscape = false;\n        for (HeaderElement helem: helems) {\n            if (helem.getParameterByName(\"version\") != null) {\n                versioned = true;\n            }\n            if (helem.getParameterByName(\"expires\") != null) {\n               netscape = true;\n            }\n        }\n        if (netscape || !versioned) {\n            // Need to parse the header again, because Netscape style cookies do not correctly\n            // support multiple header elements (comma cannot be treated as an element separator)\n            NetscapeDraftHeaderParser parser = NetscapeDraftHeaderParser.DEFAULT;\n            CharArrayBuffer buffer;\n            ParserCursor cursor;\n            if (header instanceof FormattedHeader) {\n                buffer = ((FormattedHeader) header).getBuffer();\n                cursor = new ParserCursor(\n                        ((FormattedHeader) header).getValuePos(),\n                        buffer.length());\n            } else {\n                String s = header.getValue();\n                if (s == null) {\n                    throw new MalformedCookieException(\"Header value is null\");\n                }\n                buffer = new CharArrayBuffer(s.length());\n                buffer.append(s);\n                cursor = new ParserCursor(0, buffer.length());\n            }\n            helems = new HeaderElement[] { parser.parseHeader(buffer, cursor) };\n        }\n        return parse(helems, origin);\n    }", "signature": "List<Cookie> parse(final Header header, final CookieOrigin origin)", "full_signature": "public List<Cookie> parse(final Header header, final CookieOrigin origin)", "class_method_signature": "BrowserCompatSpec.parse(final Header header, final CookieOrigin origin)", "testcase": false, "constructor": false, "invocations": ["getName", "equalsIgnoreCase", "toString", "getElements", "getParameterByName", "getParameterByName", "getBuffer", "getValuePos", "length", "getValue", "length", "append", "length", "parseHeader", "parse"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}