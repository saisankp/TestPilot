{"test_class": {"identifier": "MergeCursorTest", "superclass": "extends MapBehaviorTestBase", "interfaces": "", "fields": [{"original_string": "private static int MAX_N = 10;", "modifier": "private static", "type": "int", "declarator": "MAX_N = 10", "var_name": "MAX_N"}], "file": "zava/src/test/java/com/github/geophile/erdo/map/mergescan/MergeCursorTest.java"}, "test_case": {"identifier": "testNoInputs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoInputs() throws IOException, InterruptedException\n    {\n        MergeCursor cursor = forwardMergeCursor();\n        assertNull(cursor.next());\n    }", "signature": "void testNoInputs()", "full_signature": "@Test public void testNoInputs()", "class_method_signature": "MergeCursorTest.testNoInputs()", "testcase": true, "constructor": false, "invocations": ["forwardMergeCursor", "assertNull", "next"]}, "focal_class": {"identifier": "MergeCursor", "superclass": "extends MapCursor", "interfaces": "", "fields": [{"original_string": "final Merger merger;", "modifier": "final", "type": "Merger", "declarator": "merger", "var_name": "merger"}, {"original_string": "private boolean forward;", "modifier": "private", "type": "boolean", "declarator": "forward", "var_name": "forward"}, {"original_string": "private List<MapCursor> inputs = new ArrayList<>();", "modifier": "private", "type": "List<MapCursor>", "declarator": "inputs = new ArrayList<>()", "var_name": "inputs"}, {"original_string": "private int firstLeaf;", "modifier": "private", "type": "int", "declarator": "firstLeaf", "var_name": "firstLeaf"}, {"original_string": "private Node root;", "modifier": "private", "type": "Node", "declarator": "root", "var_name": "root"}], "methods": [{"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "LazyRecord", "signature": "LazyRecord next()", "full_signature": "@Override public LazyRecord next()", "class_method_signature": "MergeCursor.next()", "testcase": false, "constructor": false}, {"identifier": "previous", "parameters": "()", "modifiers": "@Override public", "return": "LazyRecord", "signature": "LazyRecord previous()", "full_signature": "@Override public LazyRecord previous()", "class_method_signature": "MergeCursor.previous()", "testcase": false, "constructor": false}, {"identifier": "goToFirst", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void goToFirst()", "full_signature": "@Override public void goToFirst()", "class_method_signature": "MergeCursor.goToFirst()", "testcase": false, "constructor": false}, {"identifier": "goToLast", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void goToLast()", "full_signature": "@Override public void goToLast()", "class_method_signature": "MergeCursor.goToLast()", "testcase": false, "constructor": false}, {"identifier": "goTo", "parameters": "(AbstractKey key)", "modifiers": "@Override public", "return": "void", "signature": "void goTo(AbstractKey key)", "full_signature": "@Override public void goTo(AbstractKey key)", "class_method_signature": "MergeCursor.goTo(AbstractKey key)", "testcase": false, "constructor": false}, {"identifier": "isOpen", "parameters": "(AbstractKey key)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isOpen(AbstractKey key)", "full_signature": "@Override protected boolean isOpen(AbstractKey key)", "class_method_signature": "MergeCursor.isOpen(AbstractKey key)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "MergeCursor.close()", "testcase": false, "constructor": false}, {"identifier": "addInput", "parameters": "(MapCursor input)", "modifiers": "public", "return": "void", "signature": "void addInput(MapCursor input)", "full_signature": "public void addInput(MapCursor input)", "class_method_signature": "MergeCursor.addInput(MapCursor input)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "MergeCursor.start()", "testcase": false, "constructor": false}, {"identifier": "MergeCursor", "parameters": "(AbstractKey startKey, boolean forward)", "modifiers": "public", "return": "", "signature": " MergeCursor(AbstractKey startKey, boolean forward)", "full_signature": "public  MergeCursor(AbstractKey startKey, boolean forward)", "class_method_signature": "MergeCursor.MergeCursor(AbstractKey startKey, boolean forward)", "testcase": false, "constructor": true}, {"identifier": "mergeNode", "parameters": "(int position, Node left, Node right, boolean forward)", "modifiers": "", "return": "Node", "signature": "Node mergeNode(int position, Node left, Node right, boolean forward)", "full_signature": " Node mergeNode(int position, Node left, Node right, boolean forward)", "class_method_signature": "MergeCursor.mergeNode(int position, Node left, Node right, boolean forward)", "testcase": false, "constructor": false}, {"identifier": "inputNode", "parameters": "(int position, MapCursor input, boolean forward)", "modifiers": "", "return": "Node", "signature": "Node inputNode(int position, MapCursor input, boolean forward)", "full_signature": " Node inputNode(int position, MapCursor input, boolean forward)", "class_method_signature": "MergeCursor.inputNode(int position, MapCursor input, boolean forward)", "testcase": false, "constructor": false}, {"identifier": "fillerNode", "parameters": "(int position)", "modifiers": "", "return": "Node", "signature": "Node fillerNode(int position)", "full_signature": " Node fillerNode(int position)", "class_method_signature": "MergeCursor.fillerNode(int position)", "testcase": false, "constructor": false}, {"identifier": "MergeCursor", "parameters": "(Merger merger, AbstractKey startKey, boolean forward)", "modifiers": "", "return": "", "signature": " MergeCursor(Merger merger, AbstractKey startKey, boolean forward)", "full_signature": "  MergeCursor(Merger merger, AbstractKey startKey, boolean forward)", "class_method_signature": "MergeCursor.MergeCursor(Merger merger, AbstractKey startKey, boolean forward)", "testcase": false, "constructor": true}, {"identifier": "createNode", "parameters": "(int position)", "modifiers": "private", "return": "Node", "signature": "Node createNode(int position)", "full_signature": "private Node createNode(int position)", "class_method_signature": "MergeCursor.createNode(int position)", "testcase": false, "constructor": false}, {"identifier": "restartAtStartKey", "parameters": "(boolean forward)", "modifiers": "private", "return": "void", "signature": "void restartAtStartKey(boolean forward)", "full_signature": "private void restartAtStartKey(boolean forward)", "class_method_signature": "MergeCursor.restartAtStartKey(boolean forward)", "testcase": false, "constructor": false}, {"identifier": "neighbor", "parameters": "()", "modifiers": "private", "return": "LazyRecord", "signature": "LazyRecord neighbor()", "full_signature": "private LazyRecord neighbor()", "class_method_signature": "MergeCursor.neighbor()", "testcase": false, "constructor": false}], "file": "zava/src/main/java/com/github/geophile/erdo/map/mergescan/MergeCursor.java"}, "focal_method": {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "LazyRecord", "body": "@Override\n    public LazyRecord next() throws IOException, InterruptedException\n    {\n        LazyRecord next = null;\n        if (state != State.DONE) {\n            if (!forward) {\n                restartAtStartKey(true);\n            }\n            next = neighbor();\n        }\n        return next;\n    }", "signature": "LazyRecord next()", "full_signature": "@Override public LazyRecord next()", "class_method_signature": "MergeCursor.next()", "testcase": false, "constructor": false, "invocations": ["restartAtStartKey", "neighbor"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}