{"test_class": {"identifier": "WishartTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(WishartTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(WishartTest.class)", "var_name": "log"}], "file": "contrib/src/test/java/macrobase/analysis/stats/distribution/WishartTest.java"}, "test_case": {"identifier": "entropyTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void entropyTest() {\n        double[][] matrixArray;\n\n        // Comparison values were taken from scipy implementation of wishart entropy.\n        matrixArray = new double[][]{{1, 0}, {0, 1}};\n        assertEquals(3.953808582067758, new Wishart(new BlockRealMatrix(matrixArray), 2).getEntropy(), 1e-7);\n\n        matrixArray = new double[][]{{2, 1}, {1, 2}};\n        assertEquals(8.4584668123359084, new Wishart(new BlockRealMatrix(matrixArray), 5).getEntropy(), 1e-7);\n    }", "signature": "void entropyTest()", "full_signature": "@Test public void entropyTest()", "class_method_signature": "WishartTest.entropyTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getEntropy", "assertEquals", "getEntropy"]}, "focal_class": {"identifier": "Wishart", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(Wishart.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Wishart.class)", "var_name": "log"}, {"original_string": "private final double logDetOmega;", "modifier": "private final", "type": "double", "declarator": "logDetOmega", "var_name": "logDetOmega"}, {"original_string": "private RealMatrix omega;", "modifier": "private", "type": "RealMatrix", "declarator": "omega", "var_name": "omega"}, {"original_string": "private double nu;", "modifier": "private", "type": "double", "declarator": "nu", "var_name": "nu"}, {"original_string": "private int D;", "modifier": "private", "type": "int", "declarator": "D", "var_name": "D"}], "methods": [{"identifier": "Wishart", "parameters": "(RealMatrix omega, double nu)", "modifiers": "public", "return": "", "signature": " Wishart(RealMatrix omega, double nu)", "full_signature": "public  Wishart(RealMatrix omega, double nu)", "class_method_signature": "Wishart.Wishart(RealMatrix omega, double nu)", "testcase": false, "constructor": true}, {"identifier": "lnB", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double lnB()", "full_signature": "public double lnB()", "class_method_signature": "Wishart.lnB()", "testcase": false, "constructor": false}, {"identifier": "expectationLnLambda", "parameters": "()", "modifiers": "private", "return": "double", "signature": "double expectationLnLambda()", "full_signature": "private double expectationLnLambda()", "class_method_signature": "Wishart.expectationLnLambda()", "testcase": false, "constructor": false}, {"identifier": "getEntropy", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getEntropy()", "full_signature": "public double getEntropy()", "class_method_signature": "Wishart.getEntropy()", "testcase": false, "constructor": false}, {"identifier": "getExpectationLogDeterminantLambda", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getExpectationLogDeterminantLambda()", "full_signature": "public double getExpectationLogDeterminantLambda()", "class_method_signature": "Wishart.getExpectationLogDeterminantLambda()", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/stats/distribution/Wishart.java"}, "focal_method": {"identifier": "getEntropy", "parameters": "()", "modifiers": "public", "return": "double", "body": "public double getEntropy() {\n        return -lnB() - 0.5 * (nu - D - 1) * expectationLnLambda() + nu * D / 2.;\n    }", "signature": "double getEntropy()", "full_signature": "public double getEntropy()", "class_method_signature": "Wishart.getEntropy()", "testcase": false, "constructor": false, "invocations": ["lnB", "expectationLnLambda"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}