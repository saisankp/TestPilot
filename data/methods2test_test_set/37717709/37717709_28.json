{"test_class": {"identifier": "TestKeyValueSerializer", "superclass": "", "interfaces": "", "fields": [], "file": "org.jvoicexml.interpreter.datamodel.ecmascript/src/test/java/org/jvoicexml/interpreter/datamodel/ecmascript/serializer/TestKeyValueSerializer.java"}, "test_case": {"identifier": "testSerialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSerialize() throws JVoiceXMLEvent {\n        final DataModel model = new EcmaScriptDataModel();\n        model.createScope(Scope.SESSION);\n        model.evaluateExpression(\"var A = new Object();\", Object.class);\n        model.evaluateExpression(\"A.B = 'test';\", Object.class);\n        model.evaluateExpression(\"A.C = new Object();\", Object.class);\n        model.evaluateExpression(\"A.C.D = 42.0;\", Object.class);\n        model.evaluateExpression(\"A.C.E = null;\", Object.class);\n        final DataModelObjectSerializer serializer = new KeyValueSerializer();\n        final Object object = model.readVariable(\"A\", Object.class);\n        final Collection<KeyValuePair> pairs = serializer.serialize(model, \"A\",\n                object);\n        Assert.assertEquals(2, pairs.size());\n        final Iterator<KeyValuePair> iterator = pairs.iterator();\n        final KeyValuePair pair1 = iterator.next();\n        Assert.assertEquals(\"A.B\", pair1.getKey());\n        Assert.assertEquals(\"test\", pair1.getValue());\n        final KeyValuePair pair2 = iterator.next();\n        Assert.assertEquals(\"A.C.D\", pair2.getKey());\n        Assert.assertEquals(\"42\", pair2.getValue());\n    }", "signature": "void testSerialize()", "full_signature": "@Test public void testSerialize()", "class_method_signature": "TestKeyValueSerializer.testSerialize()", "testcase": true, "constructor": false, "invocations": ["createScope", "evaluateExpression", "evaluateExpression", "evaluateExpression", "evaluateExpression", "evaluateExpression", "readVariable", "serialize", "assertEquals", "size", "iterator", "next", "assertEquals", "getKey", "assertEquals", "getValue", "next", "assertEquals", "getKey", "assertEquals", "getValue"]}, "focal_class": {"identifier": "KeyValueSerializer", "superclass": "", "interfaces": "implements DataModelObjectSerializer", "fields": [], "methods": [{"identifier": "serialize", "parameters": "(final DataModel model,\n            final String name, final Object value)", "modifiers": "@Override public", "return": "Collection<KeyValuePair>", "signature": "Collection<KeyValuePair> serialize(final DataModel model,\n            final String name, final Object value)", "full_signature": "@Override public Collection<KeyValuePair> serialize(final DataModel model,\n            final String name, final Object value)", "class_method_signature": "KeyValueSerializer.serialize(final DataModel model,\n            final String name, final Object value)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(final Scriptable object, final String prefix,\n            final Collection<KeyValuePair> pairs)", "modifiers": "private", "return": "void", "signature": "void serialize(final Scriptable object, final String prefix,\n            final Collection<KeyValuePair> pairs)", "full_signature": "private void serialize(final Scriptable object, final String prefix,\n            final Collection<KeyValuePair> pairs)", "class_method_signature": "KeyValueSerializer.serialize(final Scriptable object, final String prefix,\n            final Collection<KeyValuePair> pairs)", "testcase": false, "constructor": false}], "file": "org.jvoicexml.interpreter.datamodel.ecmascript/src/main/java/org/jvoicexml/interpreter/datamodel/ecmascript/serializer/KeyValueSerializer.java"}, "focal_method": {"identifier": "serialize", "parameters": "(final DataModel model,\n            final String name, final Object value)", "modifiers": "@Override public", "return": "Collection<KeyValuePair>", "body": "@Override\n    public Collection<KeyValuePair> serialize(final DataModel model,\n            final String name, final Object value) throws SemanticError {\n        final Collection<KeyValuePair> pairs = new java.util.ArrayList<KeyValuePair>();\n        if (value instanceof Scriptable) {\n            final Scriptable scriptable = (Scriptable) value;\n            serialize(scriptable, name, pairs);\n        } else {\n            final KeyValuePair pair;\n            if (value == null) {\n                pair = new KeyValuePair(name, \"\");\n            } else {\n                pair = new KeyValuePair(name, value.toString());\n            }\n            pairs.add(pair);\n        }\n        return pairs;\n    }", "signature": "Collection<KeyValuePair> serialize(final DataModel model,\n            final String name, final Object value)", "full_signature": "@Override public Collection<KeyValuePair> serialize(final DataModel model,\n            final String name, final Object value)", "class_method_signature": "KeyValueSerializer.serialize(final DataModel model,\n            final String name, final Object value)", "testcase": false, "constructor": false, "invocations": ["serialize", "toString", "add"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}