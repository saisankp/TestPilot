{"test_class": {"identifier": "DoubleListTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/utilities/DoubleListTest.java"}, "test_case": {"identifier": "testForEach", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testForEach() {\n        DoubleList list = new DoubleList();\n        DoubleList other = new DoubleList();\n        list.forEach(other::add);\n        assertThat(other.toArray()).isEmpty();\n        list.add(10);\n        list.add(5);\n        list.forEach(other::add);\n        assertThat(list.toArray()).containsExactly(10, 5);\n    }", "signature": "void testForEach()", "full_signature": "@Test public void testForEach()", "class_method_signature": "DoubleListTest.testForEach()", "testcase": true, "constructor": false, "invocations": ["forEach", "isEmpty", "assertThat", "toArray", "add", "add", "forEach", "containsExactly", "assertThat", "toArray"]}, "focal_class": {"identifier": "DoubleList", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_SIZE = 128;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_SIZE = 128", "var_name": "DEFAULT_SIZE"}, {"original_string": "private double[] _array;", "modifier": "private", "type": "double[]", "declarator": "_array", "var_name": "_array"}, {"original_string": "private int _limit;", "modifier": "private", "type": "int", "declarator": "_limit", "var_name": "_limit"}, {"original_string": "private double fillval = 0;", "modifier": "private", "type": "double", "declarator": "fillval = 0", "var_name": "fillval"}], "methods": [{"identifier": "DoubleList", "parameters": "()", "modifiers": "public", "return": "", "signature": " DoubleList()", "full_signature": "public  DoubleList()", "class_method_signature": "DoubleList.DoubleList()", "testcase": false, "constructor": true}, {"identifier": "DoubleList", "parameters": "(final int initialCapacity)", "modifiers": "public", "return": "", "signature": " DoubleList(final int initialCapacity)", "full_signature": "public  DoubleList(final int initialCapacity)", "class_method_signature": "DoubleList.DoubleList(final int initialCapacity)", "testcase": false, "constructor": true}, {"identifier": "DoubleList", "parameters": "(final DoubleList list)", "modifiers": "public", "return": "", "signature": " DoubleList(final DoubleList list)", "full_signature": "public  DoubleList(final DoubleList list)", "class_method_signature": "DoubleList.DoubleList(final DoubleList list)", "testcase": false, "constructor": true}, {"identifier": "DoubleList", "parameters": "(final int initialCapacity, double fillvalue)", "modifiers": "public", "return": "", "signature": " DoubleList(final int initialCapacity, double fillvalue)", "full_signature": "public  DoubleList(final int initialCapacity, double fillvalue)", "class_method_signature": "DoubleList.DoubleList(final int initialCapacity, double fillvalue)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(final int index, final double value)", "modifiers": "public", "return": "void", "signature": "void add(final int index, final double value)", "full_signature": "public void add(final int index, final double value)", "class_method_signature": "DoubleList.add(final int index, final double value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final double value)", "modifiers": "public", "return": "boolean", "signature": "boolean add(final double value)", "full_signature": "public boolean add(final double value)", "class_method_signature": "DoubleList.add(final double value)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(final DoubleList c)", "modifiers": "public", "return": "boolean", "signature": "boolean addAll(final DoubleList c)", "full_signature": "public boolean addAll(final DoubleList c)", "class_method_signature": "DoubleList.addAll(final DoubleList c)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(final int index, final DoubleList c)", "modifiers": "public", "return": "boolean", "signature": "boolean addAll(final int index, final DoubleList c)", "full_signature": "public boolean addAll(final int index, final DoubleList c)", "class_method_signature": "DoubleList.addAll(final int index, final DoubleList c)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "DoubleList.clear()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final double o)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(final double o)", "full_signature": "public boolean contains(final double o)", "class_method_signature": "DoubleList.contains(final double o)", "testcase": false, "constructor": false}, {"identifier": "containsAll", "parameters": "(final DoubleList c)", "modifiers": "public", "return": "boolean", "signature": "boolean containsAll(final DoubleList c)", "full_signature": "public boolean containsAll(final DoubleList c)", "class_method_signature": "DoubleList.containsAll(final DoubleList c)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "DoubleList.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final int index)", "modifiers": "public", "return": "double", "signature": "double get(final int index)", "full_signature": "public double get(final int index)", "class_method_signature": "DoubleList.get(final int index)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DoubleList.hashCode()", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(final double o)", "modifiers": "public", "return": "int", "signature": "int indexOf(final double o)", "full_signature": "public int indexOf(final double o)", "class_method_signature": "DoubleList.indexOf(final double o)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "DoubleList.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "lastIndexOf", "parameters": "(final double o)", "modifiers": "public", "return": "int", "signature": "int lastIndexOf(final double o)", "full_signature": "public int lastIndexOf(final double o)", "class_method_signature": "DoubleList.lastIndexOf(final double o)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final int index)", "modifiers": "public", "return": "double", "signature": "double remove(final int index)", "full_signature": "public double remove(final int index)", "class_method_signature": "DoubleList.remove(final int index)", "testcase": false, "constructor": false}, {"identifier": "removeValue", "parameters": "(final double o)", "modifiers": "public", "return": "boolean", "signature": "boolean removeValue(final double o)", "full_signature": "public boolean removeValue(final double o)", "class_method_signature": "DoubleList.removeValue(final double o)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(final DoubleList c)", "modifiers": "public", "return": "boolean", "signature": "boolean removeAll(final DoubleList c)", "full_signature": "public boolean removeAll(final DoubleList c)", "class_method_signature": "DoubleList.removeAll(final DoubleList c)", "testcase": false, "constructor": false}, {"identifier": "retainAll", "parameters": "(final DoubleList c)", "modifiers": "public", "return": "boolean", "signature": "boolean retainAll(final DoubleList c)", "full_signature": "public boolean retainAll(final DoubleList c)", "class_method_signature": "DoubleList.retainAll(final DoubleList c)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(final int index, final double element)", "modifiers": "public", "return": "double", "signature": "double set(final int index, final double element)", "full_signature": "public double set(final int index, final double element)", "class_method_signature": "DoubleList.set(final int index, final double element)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "DoubleList.size()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] toArray()", "full_signature": "public double[] toArray()", "class_method_signature": "DoubleList.toArray()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(final double[] a)", "modifiers": "public", "return": "double[]", "signature": "double[] toArray(final double[] a)", "full_signature": "public double[] toArray(final double[] a)", "class_method_signature": "DoubleList.toArray(final double[] a)", "testcase": false, "constructor": false}, {"identifier": "growArray", "parameters": "(final int new_size)", "modifiers": "private", "return": "void", "signature": "void growArray(final int new_size)", "full_signature": "private void growArray(final int new_size)", "class_method_signature": "DoubleList.growArray(final int new_size)", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "()", "modifiers": "public", "return": "DoubleStream", "signature": "DoubleStream stream()", "full_signature": "public DoubleStream stream()", "class_method_signature": "DoubleList.stream()", "testcase": false, "constructor": false}, {"identifier": "replaceAll", "parameters": "(DoubleUnaryOperator operator)", "modifiers": "public", "return": "void", "signature": "void replaceAll(DoubleUnaryOperator operator)", "full_signature": "public void replaceAll(DoubleUnaryOperator operator)", "class_method_signature": "DoubleList.replaceAll(DoubleUnaryOperator operator)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sort()", "full_signature": "public void sort()", "class_method_signature": "DoubleList.sort()", "testcase": false, "constructor": false}, {"identifier": "spliterator", "parameters": "()", "modifiers": "public", "return": "Spliterator.OfDouble", "signature": "Spliterator.OfDouble spliterator()", "full_signature": "public Spliterator.OfDouble spliterator()", "class_method_signature": "DoubleList.spliterator()", "testcase": false, "constructor": false}, {"identifier": "removeIf", "parameters": "(DoublePredicate filter)", "modifiers": "public", "return": "boolean", "signature": "boolean removeIf(DoublePredicate filter)", "full_signature": "public boolean removeIf(DoublePredicate filter)", "class_method_signature": "DoubleList.removeIf(DoublePredicate filter)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(DoubleConsumer action)", "modifiers": "public", "return": "void", "signature": "void forEach(DoubleConsumer action)", "full_signature": "public void forEach(DoubleConsumer action)", "class_method_signature": "DoubleList.forEach(DoubleConsumer action)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/utilities/DoubleList.java"}, "focal_method": {"identifier": "forEach", "parameters": "(DoubleConsumer action)", "modifiers": "public", "return": "void", "body": "public void forEach(DoubleConsumer action) {\n        java.util.Objects.requireNonNull(action);\n        for (int i = 0; i < _limit; i++) {\n            action.accept(_array[i]);\n        }\n    }", "signature": "void forEach(DoubleConsumer action)", "full_signature": "public void forEach(DoubleConsumer action)", "class_method_signature": "DoubleList.forEach(DoubleConsumer action)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "accept"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}