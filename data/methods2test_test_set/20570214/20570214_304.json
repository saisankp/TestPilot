{"test_class": {"identifier": "EcdsaVerifyJceTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/EcdsaVerifyJceTest.java"}, "test_case": {"identifier": "testModification", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testModification() throws Exception {\n    ECParameterSpec ecParams = EllipticCurves.getNistP256Params();\n    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"EC\");\n    keyGen.initialize(ecParams);\n    KeyPair keyPair = keyGen.generateKeyPair();\n    ECPublicKey pub = (ECPublicKey) keyPair.getPublic();\n    ECPrivateKey priv = (ECPrivateKey) keyPair.getPrivate();\n\n    EcdsaEncoding[] encodings = new EcdsaEncoding[] {EcdsaEncoding.IEEE_P1363, EcdsaEncoding.DER};\n    for (EcdsaEncoding encoding : encodings) {\n      // Sign with EcdsaSignJce\n      EcdsaSignJce signer = new EcdsaSignJce(priv, HashType.SHA256, encoding);\n      byte[] message = \"Hello\".getBytes(\"UTF-8\");\n      byte[] signature = signer.sign(message);\n\n      // Verify with EcdsaVerifyJce.\n      EcdsaVerifyJce verifier = new EcdsaVerifyJce(pub, HashType.SHA256, encoding);\n\n      for (BytesMutation mutation : TestUtil.generateMutations(signature)) {\n        try {\n          verifier.verify(mutation.value, message);\n          fail(\n              String.format(\n                  \"Invalid signature, should have thrown exception : signature = %s, message = %s, \"\n                      + \" description = %s\",\n                  Hex.encode(mutation.value), Arrays.toString(message), mutation.description));\n        } catch (GeneralSecurityException expected) {\n          // Expected.\n        }\n      }\n\n      // Encodings mismatch.\n      verifier =\n          new EcdsaVerifyJce(\n              pub,\n              HashType.SHA256,\n              encoding == EcdsaEncoding.IEEE_P1363 ? EcdsaEncoding.DER : EcdsaEncoding.IEEE_P1363);\n      try {\n        verifier.verify(signature, message);\n        fail(\"Invalid signature, should have thrown exception\");\n      } catch (GeneralSecurityException expected) {\n        // Expected.\n      }\n    }\n  }", "signature": "void testModification()", "full_signature": "@Test public void testModification()", "class_method_signature": "EcdsaVerifyJceTest.testModification()", "testcase": true, "constructor": false, "invocations": ["getNistP256Params", "getInstance", "initialize", "generateKeyPair", "getPublic", "getPrivate", "getBytes", "sign", "generateMutations", "verify", "fail", "format", "encode", "toString", "verify", "fail"]}, "focal_class": {"identifier": "EcdsaVerifyJce", "superclass": "", "interfaces": "implements PublicKeyVerify", "fields": [{"original_string": "private final ECPublicKey publicKey;", "modifier": "private final", "type": "ECPublicKey", "declarator": "publicKey", "var_name": "publicKey"}, {"original_string": "private final String signatureAlgorithm;", "modifier": "private final", "type": "String", "declarator": "signatureAlgorithm", "var_name": "signatureAlgorithm"}, {"original_string": "private final EcdsaEncoding encoding;", "modifier": "private final", "type": "EcdsaEncoding", "declarator": "encoding", "var_name": "encoding"}], "methods": [{"identifier": "EcdsaVerifyJce", "parameters": "(final ECPublicKey pubKey, HashType hash, EcdsaEncoding encoding)", "modifiers": "public", "return": "", "signature": " EcdsaVerifyJce(final ECPublicKey pubKey, HashType hash, EcdsaEncoding encoding)", "full_signature": "public  EcdsaVerifyJce(final ECPublicKey pubKey, HashType hash, EcdsaEncoding encoding)", "class_method_signature": "EcdsaVerifyJce.EcdsaVerifyJce(final ECPublicKey pubKey, HashType hash, EcdsaEncoding encoding)", "testcase": false, "constructor": true}, {"identifier": "verify", "parameters": "(final byte[] signature, final byte[] data)", "modifiers": "@Override public", "return": "void", "signature": "void verify(final byte[] signature, final byte[] data)", "full_signature": "@Override public void verify(final byte[] signature, final byte[] data)", "class_method_signature": "EcdsaVerifyJce.verify(final byte[] signature, final byte[] data)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/EcdsaVerifyJce.java"}, "focal_method": {"identifier": "verify", "parameters": "(final byte[] signature, final byte[] data)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void verify(final byte[] signature, final byte[] data) throws GeneralSecurityException {\n    byte[] derSignature = signature;\n    if (encoding == EcdsaEncoding.IEEE_P1363) {\n      EllipticCurve curve = publicKey.getParams().getCurve();\n      if (signature.length != 2 * EllipticCurves.fieldSizeInBytes(curve)) {\n        throw new GeneralSecurityException(\"Invalid signature\");\n      }\n      derSignature = EllipticCurves.ecdsaIeee2Der(signature);\n    }\n    if (!EllipticCurves.isValidDerEncoding(derSignature)) {\n      throw new GeneralSecurityException(\"Invalid signature\");\n    }\n    Signature verifier = EngineFactory.SIGNATURE.getInstance(signatureAlgorithm);\n    verifier.initVerify(publicKey);\n    verifier.update(data);\n    boolean verified = false;\n    try {\n      verified = verifier.verify(derSignature);\n    } catch (java.lang.RuntimeException ex) {\n      verified = false;\n    }\n    if (!verified) {\n      throw new GeneralSecurityException(\"Invalid signature\");\n    }\n  }", "signature": "void verify(final byte[] signature, final byte[] data)", "full_signature": "@Override public void verify(final byte[] signature, final byte[] data)", "class_method_signature": "EcdsaVerifyJce.verify(final byte[] signature, final byte[] data)", "testcase": false, "constructor": false, "invocations": ["getCurve", "getParams", "fieldSizeInBytes", "ecdsaIeee2Der", "isValidDerEncoding", "getInstance", "initVerify", "update", "verify"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}