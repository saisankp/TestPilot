{"test_class": {"identifier": "DefaultSingleOutputWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private TaskExecutionContext context;", "modifier": "private", "type": "TaskExecutionContext", "declarator": "context", "var_name": "context"}], "file": "sejda-core/src/test/java/org/sejda/core/support/io/DefaultSingleOutputWriterTest.java"}, "test_case": {"identifier": "missingOutput", "parameters": "()", "modifiers": "@Test(expected = IOException.class) public", "return": "void", "body": "@Test(expected = IOException.class)\n    public void missingOutput() throws IOException {\n        DefaultSingleOutputWriter victim = new DefaultSingleOutputWriter(ExistingOutputPolicy.OVERWRITE, context);\n        victim.dispatch(new FileTaskOutput(folder.newFile()));\n    }", "signature": "void missingOutput()", "full_signature": "@Test(expected = IOException.class) public void missingOutput()", "class_method_signature": "DefaultSingleOutputWriterTest.missingOutput()", "testcase": true, "constructor": false, "invocations": ["dispatch", "newFile"]}, "focal_class": {"identifier": "DefaultSingleOutputWriter", "superclass": "", "interfaces": "implements SingleOutputWriter", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DefaultSingleOutputWriter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DefaultSingleOutputWriter.class)", "var_name": "LOG"}, {"original_string": "private File taskOutput;", "modifier": "private", "type": "File", "declarator": "taskOutput", "var_name": "taskOutput"}, {"original_string": "private final ExistingOutputPolicy existingOutputPolicy;", "modifier": "private final", "type": "ExistingOutputPolicy", "declarator": "existingOutputPolicy", "var_name": "existingOutputPolicy"}, {"original_string": "private final TaskExecutionContext executionContext;", "modifier": "private final", "type": "TaskExecutionContext", "declarator": "executionContext", "var_name": "executionContext"}], "methods": [{"identifier": "DefaultSingleOutputWriter", "parameters": "(ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "modifiers": "", "return": "", "signature": " DefaultSingleOutputWriter(ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "full_signature": "  DefaultSingleOutputWriter(ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "class_method_signature": "DefaultSingleOutputWriter.DefaultSingleOutputWriter(ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "testcase": false, "constructor": true}, {"identifier": "taskOutput", "parameters": "(File taskOutput)", "modifiers": "@Override public", "return": "void", "signature": "void taskOutput(File taskOutput)", "full_signature": "@Override public void taskOutput(File taskOutput)", "class_method_signature": "DefaultSingleOutputWriter.taskOutput(File taskOutput)", "testcase": false, "constructor": false}, {"identifier": "dispatch", "parameters": "(FileTaskOutput output)", "modifiers": "@Override public", "return": "void", "signature": "void dispatch(FileTaskOutput output)", "full_signature": "@Override public void dispatch(FileTaskOutput output)", "class_method_signature": "DefaultSingleOutputWriter.dispatch(FileTaskOutput output)", "testcase": false, "constructor": false}, {"identifier": "dispatch", "parameters": "(DirectoryTaskOutput output)", "modifiers": "@Override public", "return": "void", "signature": "void dispatch(DirectoryTaskOutput output)", "full_signature": "@Override public void dispatch(DirectoryTaskOutput output)", "class_method_signature": "DefaultSingleOutputWriter.dispatch(DirectoryTaskOutput output)", "testcase": false, "constructor": false}, {"identifier": "dispatch", "parameters": "(FileOrDirectoryTaskOutput output)", "modifiers": "@Override public", "return": "void", "signature": "void dispatch(FileOrDirectoryTaskOutput output)", "full_signature": "@Override public void dispatch(FileOrDirectoryTaskOutput output)", "class_method_signature": "DefaultSingleOutputWriter.dispatch(FileOrDirectoryTaskOutput output)", "testcase": false, "constructor": false}], "file": "sejda-core/src/main/java/org/sejda/core/support/io/DefaultSingleOutputWriter.java"}, "focal_method": {"identifier": "dispatch", "parameters": "(FileTaskOutput output)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void dispatch(FileTaskOutput output) throws IOException {\n        if (isNull(taskOutput)) {\n            throw new IOException(\"No task output set\");\n        }\n        moveFile(taskOutput, output.getDestination(), existingOutputPolicy, executionContext);\n    }", "signature": "void dispatch(FileTaskOutput output)", "full_signature": "@Override public void dispatch(FileTaskOutput output)", "class_method_signature": "DefaultSingleOutputWriter.dispatch(FileTaskOutput output)", "testcase": false, "constructor": false, "invocations": ["isNull", "moveFile", "getDestination"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}