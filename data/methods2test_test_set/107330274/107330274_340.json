{"test_class": {"identifier": "DefaultSupervisorOperationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.test();", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.test()", "var_name": "titusRuntime"}, {"original_string": "private final MasterMonitor masterMonitor = mock(MasterMonitor.class);", "modifier": "private final", "type": "MasterMonitor", "declarator": "masterMonitor = mock(MasterMonitor.class)", "var_name": "masterMonitor"}, {"original_string": "private final PublishSubject<List<MasterInstance>> masterMonitorSubject = PublishSubject.create();", "modifier": "private final", "type": "PublishSubject<List<MasterInstance>>", "declarator": "masterMonitorSubject = PublishSubject.create()", "var_name": "masterMonitorSubject"}, {"original_string": "private LeaderActivator leaderActivator = mock(LeaderActivator.class);", "modifier": "private", "type": "LeaderActivator", "declarator": "leaderActivator = mock(LeaderActivator.class)", "var_name": "leaderActivator"}, {"original_string": "private DefaultSupervisorOperations supervisorOperations;", "modifier": "private", "type": "DefaultSupervisorOperations", "declarator": "supervisorOperations", "var_name": "supervisorOperations"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/supervisor/service/DefaultSupervisorOperationsTest.java"}, "test_case": {"identifier": "testEventStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEventStream() {\n        ExtTestSubscriber<SupervisorEvent> eventSubscriber = new ExtTestSubscriber<>();\n        supervisorOperations.events().subscribe(eventSubscriber);\n\n        List<MasterInstance> initialInstances = new MutableDataGenerator<>(\n                masterInstances(MasterState.Starting, \"id1\", \"id2\", \"id3\")\n        ).getValues(3);\n\n        // Initial set\n        for (int i = 0; i < 3; i++) {\n            masterMonitorSubject.onNext(initialInstances.subList(0, i + 1));\n            expectMasterInstanceUpdateEvent(eventSubscriber, initialInstances.get(i));\n        }\n\n        // Change state of first instance\n        List<MasterInstance> firstUpdated = asList(\n                MasterInstanceGenerator.moveTo(initialInstances.get(0), MasterState.NonLeader),\n                initialInstances.get(1),\n                initialInstances.get(2)\n        );\n        masterMonitorSubject.onNext(firstUpdated);\n        expectMasterInstanceUpdateEvent(eventSubscriber, firstUpdated.get(0));\n\n        // Remove last instance\n        masterMonitorSubject.onNext(firstUpdated.subList(0, 2));\n        expectMasterInstanceRemovedEvent(eventSubscriber, firstUpdated.get(2));\n    }", "signature": "void testEventStream()", "full_signature": "@Test public void testEventStream()", "class_method_signature": "DefaultSupervisorOperationsTest.testEventStream()", "testcase": true, "constructor": false, "invocations": ["subscribe", "events", "getValues", "masterInstances", "onNext", "subList", "expectMasterInstanceUpdateEvent", "get", "asList", "moveTo", "get", "get", "get", "onNext", "expectMasterInstanceUpdateEvent", "get", "onNext", "subList", "expectMasterInstanceRemovedEvent", "get"]}, "focal_class": {"identifier": "DefaultSupervisorOperations", "superclass": "", "interfaces": "implements SupervisorOperations", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DefaultSupervisorOperations.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DefaultSupervisorOperations.class)", "var_name": "logger"}, {"original_string": "private static final long GRACEFUL_SHUTDOWN_TIMEOUT_MS = 10_000;", "modifier": "private static final", "type": "long", "declarator": "GRACEFUL_SHUTDOWN_TIMEOUT_MS = 10_000", "var_name": "GRACEFUL_SHUTDOWN_TIMEOUT_MS"}, {"original_string": "private final LifecycleManager lifecycleManager;", "modifier": "private final", "type": "LifecycleManager", "declarator": "lifecycleManager", "var_name": "lifecycleManager"}, {"original_string": "private final MasterMonitor masterMonitor;", "modifier": "private final", "type": "MasterMonitor", "declarator": "masterMonitor", "var_name": "masterMonitor"}, {"original_string": "private final LeaderActivator leaderActivator;", "modifier": "private final", "type": "LeaderActivator", "declarator": "leaderActivator", "var_name": "leaderActivator"}, {"original_string": "private final TitusRuntime titusRuntime;", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime", "var_name": "titusRuntime"}], "methods": [{"identifier": "DefaultSupervisorOperations", "parameters": "(LifecycleManager lifecycleManager,\n                                       MasterMonitor masterMonitor,\n                                       LeaderActivator leaderActivator,\n                                       TitusRuntime titusRuntime)", "modifiers": "@Inject public", "return": "", "signature": " DefaultSupervisorOperations(LifecycleManager lifecycleManager,\n                                       MasterMonitor masterMonitor,\n                                       LeaderActivator leaderActivator,\n                                       TitusRuntime titusRuntime)", "full_signature": "@Inject public  DefaultSupervisorOperations(LifecycleManager lifecycleManager,\n                                       MasterMonitor masterMonitor,\n                                       LeaderActivator leaderActivator,\n                                       TitusRuntime titusRuntime)", "class_method_signature": "DefaultSupervisorOperations.DefaultSupervisorOperations(LifecycleManager lifecycleManager,\n                                       MasterMonitor masterMonitor,\n                                       LeaderActivator leaderActivator,\n                                       TitusRuntime titusRuntime)", "testcase": false, "constructor": true}, {"identifier": "getMasterInstances", "parameters": "()", "modifiers": "@Override public", "return": "List<MasterInstance>", "signature": "List<MasterInstance> getMasterInstances()", "full_signature": "@Override public List<MasterInstance> getMasterInstances()", "class_method_signature": "DefaultSupervisorOperations.getMasterInstances()", "testcase": false, "constructor": false}, {"identifier": "findMasterInstance", "parameters": "(String instanceId)", "modifiers": "@Override public", "return": "Optional<MasterInstance>", "signature": "Optional<MasterInstance> findMasterInstance(String instanceId)", "full_signature": "@Override public Optional<MasterInstance> findMasterInstance(String instanceId)", "class_method_signature": "DefaultSupervisorOperations.findMasterInstance(String instanceId)", "testcase": false, "constructor": false}, {"identifier": "getMasterInstance", "parameters": "(String instanceId)", "modifiers": "@Override public", "return": "MasterInstance", "signature": "MasterInstance getMasterInstance(String instanceId)", "full_signature": "@Override public MasterInstance getMasterInstance(String instanceId)", "class_method_signature": "DefaultSupervisorOperations.getMasterInstance(String instanceId)", "testcase": false, "constructor": false}, {"identifier": "findLeader", "parameters": "()", "modifiers": "@Override public", "return": "Optional<MasterInstance>", "signature": "Optional<MasterInstance> findLeader()", "full_signature": "@Override public Optional<MasterInstance> findLeader()", "class_method_signature": "DefaultSupervisorOperations.findLeader()", "testcase": false, "constructor": false}, {"identifier": "events", "parameters": "()", "modifiers": "@Override public", "return": "Observable<SupervisorEvent>", "signature": "Observable<SupervisorEvent> events()", "full_signature": "@Override public Observable<SupervisorEvent> events()", "class_method_signature": "DefaultSupervisorOperations.events()", "testcase": false, "constructor": false}, {"identifier": "stopBeingLeader", "parameters": "(CallMetadata callMetadata)", "modifiers": "@Override public", "return": "void", "signature": "void stopBeingLeader(CallMetadata callMetadata)", "full_signature": "@Override public void stopBeingLeader(CallMetadata callMetadata)", "class_method_signature": "DefaultSupervisorOperations.stopBeingLeader(CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "buildEventList", "parameters": "(List<MasterInstance> current, Map<String, MasterInstance> state)", "modifiers": "private", "return": "Pair<List<SupervisorEvent>, Map<String, MasterInstance>>", "signature": "Pair<List<SupervisorEvent>, Map<String, MasterInstance>> buildEventList(List<MasterInstance> current, Map<String, MasterInstance> state)", "full_signature": "private Pair<List<SupervisorEvent>, Map<String, MasterInstance>> buildEventList(List<MasterInstance> current, Map<String, MasterInstance> state)", "class_method_signature": "DefaultSupervisorOperations.buildEventList(List<MasterInstance> current, Map<String, MasterInstance> state)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/supervisor/service/DefaultSupervisorOperations.java"}, "focal_method": {"identifier": "events", "parameters": "()", "modifiers": "@Override public", "return": "Observable<SupervisorEvent>", "body": "@Override\n    public Observable<SupervisorEvent> events() {\n        return masterMonitor.observeMasters()\n                .compose(ObservableExt.mapWithState(Collections.emptyMap(), this::buildEventList))\n                .flatMap(Observable::from);\n    }", "signature": "Observable<SupervisorEvent> events()", "full_signature": "@Override public Observable<SupervisorEvent> events()", "class_method_signature": "DefaultSupervisorOperations.events()", "testcase": false, "constructor": false, "invocations": ["flatMap", "compose", "observeMasters", "mapWithState", "emptyMap"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}