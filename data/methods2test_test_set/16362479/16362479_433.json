{"test_class": {"identifier": "TransactionRateLimitingCallbackTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    ActorUtils mockContext;", "modifier": "@Mock", "type": "ActorUtils", "declarator": "mockContext", "var_name": "mockContext"}, {"original_string": "@Mock\n    Timer mockTimer;", "modifier": "@Mock", "type": "Timer", "declarator": "mockTimer", "var_name": "mockTimer"}, {"original_string": "@Mock\n    Ticker mockTicker;", "modifier": "@Mock", "type": "Ticker", "declarator": "mockTicker", "var_name": "mockTicker"}, {"original_string": "TransactionRateLimitingCallback callback;", "modifier": "", "type": "TransactionRateLimitingCallback", "declarator": "callback", "var_name": "callback"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/TransactionRateLimitingCallbackTest.java"}, "test_case": {"identifier": "testSuccessWithoutRun", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSuccessWithoutRun() {\n        try {\n            callback.success();\n            fail(\"Expected IllegalStateException\");\n        } catch (IllegalStateException e) {\n            // expected\n        }\n\n        verify(mockTimer, never()).update(anyLong(), any(TimeUnit.class));\n    }", "signature": "void testSuccessWithoutRun()", "full_signature": "@Test public void testSuccessWithoutRun()", "class_method_signature": "TransactionRateLimitingCallbackTest.testSuccessWithoutRun()", "testcase": true, "constructor": false, "invocations": ["success", "fail", "update", "verify", "never", "anyLong", "any"]}, "focal_class": {"identifier": "TransactionRateLimitingCallback", "superclass": "", "interfaces": "implements OperationCallback", "fields": [{"original_string": "private static Ticker TICKER = Ticker.systemTicker();", "modifier": "private static", "type": "Ticker", "declarator": "TICKER = Ticker.systemTicker()", "var_name": "TICKER"}, {"original_string": "private final Timer commitTimer;", "modifier": "private final", "type": "Timer", "declarator": "commitTimer", "var_name": "commitTimer"}, {"original_string": "private long startTime;", "modifier": "private", "type": "long", "declarator": "startTime", "var_name": "startTime"}, {"original_string": "private long elapsedTime;", "modifier": "private", "type": "long", "declarator": "elapsedTime", "var_name": "elapsedTime"}, {"original_string": "private volatile State state = State.STOPPED;", "modifier": "private volatile", "type": "State", "declarator": "state = State.STOPPED", "var_name": "state"}], "methods": [{"identifier": "TransactionRateLimitingCallback", "parameters": "(ActorUtils actorUtils)", "modifiers": "", "return": "", "signature": " TransactionRateLimitingCallback(ActorUtils actorUtils)", "full_signature": "  TransactionRateLimitingCallback(ActorUtils actorUtils)", "class_method_signature": "TransactionRateLimitingCallback.TransactionRateLimitingCallback(ActorUtils actorUtils)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "TransactionRateLimitingCallback.run()", "testcase": false, "constructor": false}, {"identifier": "pause", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void pause()", "full_signature": "@Override public void pause()", "class_method_signature": "TransactionRateLimitingCallback.pause()", "testcase": false, "constructor": false}, {"identifier": "resume", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void resume()", "full_signature": "@Override public void resume()", "class_method_signature": "TransactionRateLimitingCallback.resume()", "testcase": false, "constructor": false}, {"identifier": "success", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void success()", "full_signature": "@Override public void success()", "class_method_signature": "TransactionRateLimitingCallback.success()", "testcase": false, "constructor": false}, {"identifier": "failure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void failure()", "full_signature": "@Override public void failure()", "class_method_signature": "TransactionRateLimitingCallback.failure()", "testcase": false, "constructor": false}, {"identifier": "setTicker", "parameters": "(Ticker ticker)", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void setTicker(Ticker ticker)", "full_signature": "@VisibleForTesting static void setTicker(Ticker ticker)", "class_method_signature": "TransactionRateLimitingCallback.setTicker(Ticker ticker)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/TransactionRateLimitingCallback.java"}, "focal_method": {"identifier": "success", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void success() {\n        Preconditions.checkState(state != State.STOPPED, \"state is STOPPED\");\n        pause();\n        commitTimer.update(elapsedTime, TimeUnit.NANOSECONDS);\n        state = State.STOPPED;\n    }", "signature": "void success()", "full_signature": "@Override public void success()", "class_method_signature": "TransactionRateLimitingCallback.success()", "testcase": false, "constructor": false, "invocations": ["checkState", "pause", "update"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}