{"test_class": {"identifier": "ProjectResourcePanelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProjectResourcePanel fixture;", "modifier": "private", "type": "ProjectResourcePanel", "declarator": "fixture", "var_name": "fixture"}], "file": "org.jabylon.rest.ui/src/test/java/org/jabylon/rest/ui/wicket/panels/ProjectResourcePanelTest.java"}, "test_case": {"identifier": "computeProgressBars", "parameters": "()", "modifiers": "@SuppressWarnings(\"rawtypes\") @Test public", "return": "void", "body": "@SuppressWarnings(\"rawtypes\")\n    @Test\n    public void computeProgressBars() {\n        Resolvable mock = mock(Resolvable.class);\n        when(mock.getPercentComplete()).thenReturn(15);\n        Triplet result = fixture.computeProgressBars(mock);\n        assertEquals(15, result.getSuccess());\n        assertEquals(0, result.getWarning());\n        assertEquals(0, result.getDanger());\n    }", "signature": "void computeProgressBars()", "full_signature": "@SuppressWarnings(\"rawtypes\") @Test public void computeProgressBars()", "class_method_signature": "ProjectResourcePanelTest.computeProgressBars()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getPercentComplete", "computeProgressBars", "assertEquals", "getSuccess", "assertEquals", "getWarning", "assertEquals", "getDanger"]}, "focal_class": {"identifier": "ProjectResourcePanel", "superclass": "extends BasicResolvablePanel<Resolvable<?, ?>>", "interfaces": "implements RestrictedComponent", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "ProjectResourcePanel", "parameters": "(Resolvable<?, ?> object, PageParameters parameters)", "modifiers": "public", "return": "", "signature": " ProjectResourcePanel(Resolvable<?, ?> object, PageParameters parameters)", "full_signature": "public  ProjectResourcePanel(Resolvable<?, ?> object, PageParameters parameters)", "class_method_signature": "ProjectResourcePanel.ProjectResourcePanel(Resolvable<?, ?> object, PageParameters parameters)", "testcase": false, "constructor": true}, {"identifier": "renderHead", "parameters": "(IHeaderResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void renderHead(IHeaderResponse response)", "full_signature": "@Override public void renderHead(IHeaderResponse response)", "class_method_signature": "ProjectResourcePanel.renderHead(IHeaderResponse response)", "testcase": false, "constructor": false}, {"identifier": "onBeforeRenderPanel", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onBeforeRenderPanel()", "full_signature": "@Override protected void onBeforeRenderPanel()", "class_method_signature": "ProjectResourcePanel.onBeforeRenderPanel()", "testcase": false, "constructor": false}, {"identifier": "canView", "parameters": "(Resolvable<?, ?> resolvable)", "modifiers": "protected", "return": "boolean", "signature": "boolean canView(Resolvable<?, ?> resolvable)", "full_signature": "protected boolean canView(Resolvable<?, ?> resolvable)", "class_method_signature": "ProjectResourcePanel.canView(Resolvable<?, ?> resolvable)", "testcase": false, "constructor": false}, {"identifier": "computeProgressBars", "parameters": "(Resolvable<?, ?> resolvable)", "modifiers": "protected", "return": "Triplet", "signature": "Triplet computeProgressBars(Resolvable<?, ?> resolvable)", "full_signature": "protected Triplet computeProgressBars(Resolvable<?, ?> resolvable)", "class_method_signature": "ProjectResourcePanel.computeProgressBars(Resolvable<?, ?> resolvable)", "testcase": false, "constructor": false}, {"identifier": "buildLinkTarget", "parameters": "(Resolvable<?, ?> resolvable, boolean endsOnSlash)", "modifiers": "private", "return": "LinkTarget", "signature": "LinkTarget buildLinkTarget(Resolvable<?, ?> resolvable, boolean endsOnSlash)", "full_signature": "private LinkTarget buildLinkTarget(Resolvable<?, ?> resolvable, boolean endsOnSlash)", "class_method_signature": "ProjectResourcePanel.buildLinkTarget(Resolvable<?, ?> resolvable, boolean endsOnSlash)", "testcase": false, "constructor": false}, {"identifier": "getRequiredPermission", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRequiredPermission()", "full_signature": "@Override public String getRequiredPermission()", "class_method_signature": "ProjectResourcePanel.getRequiredPermission()", "testcase": false, "constructor": false}, {"identifier": "uploadPanelVisible", "parameters": "(Resolvable<?, ?> object)", "modifiers": "private", "return": "boolean", "signature": "boolean uploadPanelVisible(Resolvable<?, ?> object)", "full_signature": "private boolean uploadPanelVisible(Resolvable<?, ?> object)", "class_method_signature": "ProjectResourcePanel.uploadPanelVisible(Resolvable<?, ?> object)", "testcase": false, "constructor": false}], "file": "org.jabylon.rest.ui/src/main/java/org/jabylon/rest/ui/wicket/panels/ProjectResourcePanel.java"}, "focal_method": {"identifier": "computeProgressBars", "parameters": "(Resolvable<?, ?> resolvable)", "modifiers": "protected", "return": "Triplet", "body": "protected Triplet computeProgressBars(Resolvable<?, ?> resolvable) {\n\n        int greenWidth = resolvable.getPercentComplete();\n        int yellowWidth = 0;\n        if (resolvable instanceof PropertyFileDescriptor) {\n            PropertyFileDescriptor descriptor = (PropertyFileDescriptor) resolvable;\n            int keys = descriptor.getMaster() == null ? descriptor.getKeys() : descriptor.getMaster().getKeys();\n            if(keys>0)\n            {\n                EList<Review> reviews = descriptor.getReviews();\n                int activeReviews = 0;\n                for (Review review : reviews) {\n\t\t\t\t\tif(review.getState()==ReviewState.OPEN || review.getState()==ReviewState.REOPENED)\n\t\t\t\t\t\tactiveReviews++;\n\t\t\t\t}\n                yellowWidth = (int) (activeReviews*100/(double)keys);\n                greenWidth -= yellowWidth;\n            }\n        }\n        return new Triplet(greenWidth, yellowWidth);\n\n    }", "signature": "Triplet computeProgressBars(Resolvable<?, ?> resolvable)", "full_signature": "protected Triplet computeProgressBars(Resolvable<?, ?> resolvable)", "class_method_signature": "ProjectResourcePanel.computeProgressBars(Resolvable<?, ?> resolvable)", "testcase": false, "constructor": false, "invocations": ["getPercentComplete", "getMaster", "getKeys", "getKeys", "getMaster", "getReviews", "getState", "getState"]}, "repository": {"repo_id": 3986627, "url": "https://github.com/jutzig/jabylon", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 51, "size": 13400, "license": "licensed"}}