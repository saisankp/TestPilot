{"test_class": {"identifier": "GenerateAesKeyCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}], "file": "server/src/test/java/keywhiz/commands/GenerateAesKeyCommandTest.java"}, "test_case": {"identifier": "testKeyGeneration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testKeyGeneration() throws Exception {\n    char[] password = \"CHANGE\".toCharArray();\n    Path destination = Paths.get(temporaryFolder.getRoot().getPath(), \"derivation.jceks\");\n    int keySize = 128;\n    String alias = \"baseKey\";\n\n    GenerateAesKeyCommand.generate(password, destination, keySize, alias, new SecureRandom());\n    assertThat(destination).exists();\n\n    KeyStore keyStore = KeyStore.getInstance(\"JCEKS\");\n    try (InputStream in = Files.newInputStream(destination)) {\n      keyStore.load(in, password);\n    }\n    assertThat(keyStore.isKeyEntry(alias)).isTrue();\n\n    Key key = keyStore.getKey(alias, password);\n    assertThat(key).isInstanceOf(SecretKey.class);\n    SecretKey secretKey = (SecretKey) key;\n    assertThat(secretKey.getEncoded()).hasSize(keySize/8);\n  }", "signature": "void testKeyGeneration()", "full_signature": "@Test public void testKeyGeneration()", "class_method_signature": "GenerateAesKeyCommandTest.testKeyGeneration()", "testcase": true, "constructor": false, "invocations": ["toCharArray", "get", "getPath", "getRoot", "generate", "exists", "assertThat", "getInstance", "newInputStream", "load", "isTrue", "assertThat", "isKeyEntry", "getKey", "isInstanceOf", "assertThat", "hasSize", "assertThat", "getEncoded"]}, "focal_class": {"identifier": "GenerateAesKeyCommand", "superclass": "extends Command", "interfaces": "", "fields": [], "methods": [{"identifier": "GenerateAesKeyCommand", "parameters": "()", "modifiers": "public", "return": "", "signature": " GenerateAesKeyCommand()", "full_signature": "public  GenerateAesKeyCommand()", "class_method_signature": "GenerateAesKeyCommand.GenerateAesKeyCommand()", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(Subparser parser)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Subparser parser)", "full_signature": "@Override public void configure(Subparser parser)", "class_method_signature": "GenerateAesKeyCommand.configure(Subparser parser)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(Bootstrap<?> bootstrap, Namespace namespace)", "modifiers": "@Override public", "return": "void", "signature": "void run(Bootstrap<?> bootstrap, Namespace namespace)", "full_signature": "@Override public void run(Bootstrap<?> bootstrap, Namespace namespace)", "class_method_signature": "GenerateAesKeyCommand.run(Bootstrap<?> bootstrap, Namespace namespace)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(char[] password, Path destination, int keySize, String alias, SecureRandom random)", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void generate(char[] password, Path destination, int keySize, String alias, SecureRandom random)", "full_signature": "@VisibleForTesting static void generate(char[] password, Path destination, int keySize, String alias, SecureRandom random)", "class_method_signature": "GenerateAesKeyCommand.generate(char[] password, Path destination, int keySize, String alias, SecureRandom random)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/commands/GenerateAesKeyCommand.java"}, "focal_method": {"identifier": "generate", "parameters": "(char[] password, Path destination, int keySize, String alias, SecureRandom random)", "modifiers": "@VisibleForTesting static", "return": "void", "body": "@VisibleForTesting\n  static void generate(char[] password, Path destination, int keySize, String alias, SecureRandom random) throws Exception {\n    KeyGenerator generator = KeyGenerator.getInstance(\"AES\");\n    generator.init(keySize, random);\n    SecretKey key = generator.generateKey();\n\n    KeyStore keyStore = KeyStore.getInstance(\"JCEKS\");\n    keyStore.load(null); // KeyStores must be initialized before use.\n    keyStore.setKeyEntry(alias, key, password, null);\n    try (OutputStream out = Files.newOutputStream(destination)) {\n      keyStore.store(out, password);\n    }\n  }", "signature": "void generate(char[] password, Path destination, int keySize, String alias, SecureRandom random)", "full_signature": "@VisibleForTesting static void generate(char[] password, Path destination, int keySize, String alias, SecureRandom random)", "class_method_signature": "GenerateAesKeyCommand.generate(char[] password, Path destination, int keySize, String alias, SecureRandom random)", "testcase": false, "constructor": false, "invocations": ["getInstance", "init", "generateKey", "getInstance", "load", "setKeyEntry", "newOutputStream", "store"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}