{"test_class": {"identifier": "MysqlEventRepoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String INSERT_QUERY = \"INSERT INTO REACTIVE_EVENT VALUES (?, ?, ?, ?, ?, NOW())\";", "modifier": "private static final", "type": "String", "declarator": "INSERT_QUERY = \"INSERT INTO REACTIVE_EVENT VALUES (?, ?, ?, ?, ?, NOW())\"", "var_name": "INSERT_QUERY"}, {"original_string": "private static final String INSERT_WITH_DATE_QUERY = \"INSERT INTO REACTIVE_EVENT VALUES (?, ?, ?, ?, ?, ?)\";", "modifier": "private static final", "type": "String", "declarator": "INSERT_WITH_DATE_QUERY = \"INSERT INTO REACTIVE_EVENT VALUES (?, ?, ?, ?, ?, ?)\"", "var_name": "INSERT_WITH_DATE_QUERY"}, {"original_string": "private MysqlEventRepo repo;", "modifier": "private", "type": "MysqlEventRepo", "declarator": "repo", "var_name": "repo"}, {"original_string": "private Connection connection;", "modifier": "private", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private Listener listener;", "modifier": "private", "type": "Listener", "declarator": "listener", "var_name": "listener"}], "file": "reactive-source-mysql/src/test/java/org/reactivesource/mysql/MysqlEventRepoTest.java"}, "test_case": {"identifier": "testUpdatesTheListenerLastCheckDate", "parameters": "()", "modifiers": "@Test(groups = INTEGRATION) public", "return": "void", "body": "@Test(groups = INTEGRATION)\n    public void testUpdatesTheListenerLastCheckDate() throws SQLException, InterruptedException {\n        Date initialLastCheck = listener.getLastCheck();\n\n        Thread.sleep(1000L);\n        repo.getNewEventsForListener(listener, connection);\n\n        assertTrue(initialLastCheck.before(listener.getLastCheck()));\n    }", "signature": "void testUpdatesTheListenerLastCheckDate()", "full_signature": "@Test(groups = INTEGRATION) public void testUpdatesTheListenerLastCheckDate()", "class_method_signature": "MysqlEventRepoTest.testUpdatesTheListenerLastCheckDate()", "testcase": true, "constructor": false, "invocations": ["getLastCheck", "sleep", "getNewEventsForListener", "assertTrue", "before", "getLastCheck"]}, "focal_class": {"identifier": "MysqlEventRepo", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String TABLE_NAME = \"REACTIVE_EVENT\";", "modifier": "static final", "type": "String", "declarator": "TABLE_NAME = \"REACTIVE_EVENT\"", "var_name": "TABLE_NAME"}, {"original_string": "static final String EVENT_ID_COL = \"EVENT_ID\";", "modifier": "static final", "type": "String", "declarator": "EVENT_ID_COL = \"EVENT_ID\"", "var_name": "EVENT_ID_COL"}, {"original_string": "static final String TABLE_NAME_COL = \"TABLE_NAME\";", "modifier": "static final", "type": "String", "declarator": "TABLE_NAME_COL = \"TABLE_NAME\"", "var_name": "TABLE_NAME_COL"}, {"original_string": "static final String EVENT_TYPE_COL = \"EVENT_TYPE\";", "modifier": "static final", "type": "String", "declarator": "EVENT_TYPE_COL = \"EVENT_TYPE\"", "var_name": "EVENT_TYPE_COL"}, {"original_string": "static final String OLD_ENTITY_COL = \"OLD_ENTITY\";", "modifier": "static final", "type": "String", "declarator": "OLD_ENTITY_COL = \"OLD_ENTITY\"", "var_name": "OLD_ENTITY_COL"}, {"original_string": "static final String NEW_ENTITY_COL = \"NEW_ENTITY\";", "modifier": "static final", "type": "String", "declarator": "NEW_ENTITY_COL = \"NEW_ENTITY\"", "var_name": "NEW_ENTITY_COL"}, {"original_string": "static final String CREATED_DT_COL = \"CREATED_DT\";", "modifier": "static final", "type": "String", "declarator": "CREATED_DT_COL = \"CREATED_DT\"", "var_name": "CREATED_DT_COL"}, {"original_string": "private final ListenerRepo listenerRepo;", "modifier": "private final", "type": "ListenerRepo", "declarator": "listenerRepo", "var_name": "listenerRepo"}, {"original_string": "private static final String REACTIVE_LISTENER = ListenerRepo.TABLE_NAME;", "modifier": "private static final", "type": "String", "declarator": "REACTIVE_LISTENER = ListenerRepo.TABLE_NAME", "var_name": "REACTIVE_LISTENER"}, {"original_string": "private static final String REACTIVE_EVENT = TABLE_NAME;", "modifier": "private static final", "type": "String", "declarator": "REACTIVE_EVENT = TABLE_NAME", "var_name": "REACTIVE_EVENT"}, {"original_string": "private static final String LISTENER_ID_COL = ListenerRepo.LISTENER_ID_COL;", "modifier": "private static final", "type": "String", "declarator": "LISTENER_ID_COL = ListenerRepo.LISTENER_ID_COL", "var_name": "LISTENER_ID_COL"}, {"original_string": "private static final String GET_EVENTS_FOR_LISTENER_QUERY =\n            \"SELECT E.* FROM \" + REACTIVE_LISTENER + \" L \" +\n                    \"INNER JOIN \" + REACTIVE_EVENT + \" E ON \" +\n                    \"L.\" + ListenerRepo.TABLE_NAME_COL + \"=E.\" + TABLE_NAME_COL +\n                    \" AND E.\" + EVENT_ID_COL + \">? \" +\n                    \" AND E.\" + CREATED_DT_COL + \">=?\" +\n                    \"WHERE L.\" + LISTENER_ID_COL + \"=? \" +\n                    \"ORDER BY \" + CREATED_DT_COL + \" ASC, \" + EVENT_ID_COL + \" ASC\";", "modifier": "private static final", "type": "String", "declarator": "GET_EVENTS_FOR_LISTENER_QUERY =\n            \"SELECT E.* FROM \" + REACTIVE_LISTENER + \" L \" +\n                    \"INNER JOIN \" + REACTIVE_EVENT + \" E ON \" +\n                    \"L.\" + ListenerRepo.TABLE_NAME_COL + \"=E.\" + TABLE_NAME_COL +\n                    \" AND E.\" + EVENT_ID_COL + \">? \" +\n                    \" AND E.\" + CREATED_DT_COL + \">=?\" +\n                    \"WHERE L.\" + LISTENER_ID_COL + \"=? \" +\n                    \"ORDER BY \" + CREATED_DT_COL + \" ASC, \" + EVENT_ID_COL + \" ASC\"", "var_name": "GET_EVENTS_FOR_LISTENER_QUERY"}], "methods": [{"identifier": "MysqlEventRepo", "parameters": "()", "modifiers": "", "return": "", "signature": " MysqlEventRepo()", "full_signature": "  MysqlEventRepo()", "class_method_signature": "MysqlEventRepo.MysqlEventRepo()", "testcase": false, "constructor": true}, {"identifier": "getNewEventsForListener", "parameters": "(Listener listener, Connection connection)", "modifiers": "public", "return": "List<MysqlEvent>", "signature": "List<MysqlEvent> getNewEventsForListener(Listener listener, Connection connection)", "full_signature": "public List<MysqlEvent> getNewEventsForListener(Listener listener, Connection connection)", "class_method_signature": "MysqlEventRepo.getNewEventsForListener(Listener listener, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "extractEvent", "parameters": "(ResultSet rs)", "modifiers": "static", "return": "MysqlEvent", "signature": "MysqlEvent extractEvent(ResultSet rs)", "full_signature": "static MysqlEvent extractEvent(ResultSet rs)", "class_method_signature": "MysqlEventRepo.extractEvent(ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "verifyListenerExists", "parameters": "(Listener listener, Connection connection)", "modifiers": "private", "return": "void", "signature": "void verifyListenerExists(Listener listener, Connection connection)", "full_signature": "private void verifyListenerExists(Listener listener, Connection connection)", "class_method_signature": "MysqlEventRepo.verifyListenerExists(Listener listener, Connection connection)", "testcase": false, "constructor": false}], "file": "reactive-source-mysql/src/main/java/org/reactivesource/mysql/MysqlEventRepo.java"}, "focal_method": {"identifier": "getNewEventsForListener", "parameters": "(Listener listener, Connection connection)", "modifiers": "public", "return": "List<MysqlEvent>", "body": "public List<MysqlEvent> getNewEventsForListener(Listener listener, Connection connection)\n            throws DataAccessException {\n        verifyListenerExists(listener, connection);\n        try (\n                PreparedStatement stmt = connection.prepareStatement(GET_EVENTS_FOR_LISTENER_QUERY)\n        ) {\n            Date lastCheckDate = listener.getLastCheck();\n            listenerRepo.refreshLastCheck(listener, connection);\n\n            stmt.setObject(1, listener.getLastEventId());\n            stmt.setObject(2, lastCheckDate);\n            stmt.setObject(3, listener.getId());\n            ResultSet rs = stmt.executeQuery();\n\n            List<MysqlEvent> result = Lists.newArrayList();\n            long maxEventId = 0l;\n            while (rs.next()) {\n                maxEventId = Math.max(rs.getLong(EVENT_ID_COL), maxEventId);\n                result.add(extractEvent(rs));\n            }\n\n            if (maxEventId > listener.getLastEventId()) {\n                listener.setLastEventId(maxEventId);\n                listenerRepo.update(listener, connection);\n            }\n\n            return result;\n        } catch (SQLException e) {\n            throw new DataAccessException(\"Could not get new events for listener with id:\" + listener.getId(), e);\n        }\n    }", "signature": "List<MysqlEvent> getNewEventsForListener(Listener listener, Connection connection)", "full_signature": "public List<MysqlEvent> getNewEventsForListener(Listener listener, Connection connection)", "class_method_signature": "MysqlEventRepo.getNewEventsForListener(Listener listener, Connection connection)", "testcase": false, "constructor": false, "invocations": ["verifyListenerExists", "prepareStatement", "getLastCheck", "refreshLastCheck", "setObject", "getLastEventId", "setObject", "setObject", "getId", "executeQuery", "newArrayList", "next", "max", "getLong", "add", "extractEvent", "getLastEventId", "setLastEventId", "update", "getId"]}, "repository": {"repo_id": 18311299, "url": "https://github.com/eBay/reactive-source", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 9, "size": 317, "license": "licensed"}}