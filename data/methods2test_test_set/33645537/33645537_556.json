{"test_class": {"identifier": "LocaleUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Locale systemLocale;", "modifier": "private", "type": "Locale", "declarator": "systemLocale", "var_name": "systemLocale"}, {"original_string": "private String systemCharset;", "modifier": "private", "type": "String", "declarator": "systemCharset", "var_name": "systemCharset"}], "file": "concurrency/src/test/java/com/baidu/unbiz/common/i18n/LocaleUtilTest.java"}, "test_case": {"identifier": "parseLocale", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseLocale() {\n        assertNull(LocaleUtil.parseLocale(null));\n        assertNull(LocaleUtil.parseLocale(\"\"));\n        assertNull(LocaleUtil.parseLocale(\"  \"));\n\n        assertEquals(new Locale(\"zh\"), LocaleUtil.parseLocale(\" zh \"));\n        assertEquals(new Locale(\"zh\", \"CN\"), LocaleUtil.parseLocale(\" zh _CN\"));\n        assertEquals(new Locale(\"zh\", \"CN\", \"var\"), LocaleUtil.parseLocale(\" zh _CN_var\"));\n        assertEquals(new Locale(\"zh\", \"CN\", \"var_xxx\"), LocaleUtil.parseLocale(\" zh _CN_var_xxx\"));\n\n        assertEquals(new Locale(\"zh\", \"\", \"CN_var_xxx\"), LocaleUtil.parseLocale(\" zh__CN_var_xxx\"));\n    }", "signature": "void parseLocale()", "full_signature": "@Test public void parseLocale()", "class_method_signature": "LocaleUtilTest.parseLocale()", "testcase": true, "constructor": false, "invocations": ["assertNull", "parseLocale", "assertNull", "parseLocale", "assertNull", "parseLocale", "assertEquals", "parseLocale", "assertEquals", "parseLocale", "assertEquals", "parseLocale", "assertEquals", "parseLocale", "assertEquals", "parseLocale"]}, "focal_class": {"identifier": "LocaleUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final LocaleInfo systemLocaleInfo = new LocaleInfo();", "modifier": "private static final", "type": "LocaleInfo", "declarator": "systemLocaleInfo = new LocaleInfo()", "var_name": "systemLocaleInfo"}, {"original_string": "private static LocaleInfo defaultLocalInfo = systemLocaleInfo;", "modifier": "private static", "type": "LocaleInfo", "declarator": "defaultLocalInfo = systemLocaleInfo", "var_name": "defaultLocalInfo"}, {"original_string": "private static final ThreadLocal<LocaleInfo> contextLocaleInfoHolder = new ThreadLocal<LocaleInfo>();", "modifier": "private static final", "type": "ThreadLocal<LocaleInfo>", "declarator": "contextLocaleInfoHolder = new ThreadLocal<LocaleInfo>()", "var_name": "contextLocaleInfoHolder"}, {"original_string": "private static Logger log = LoggerFactory.getLogger(LocaleUtil.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LocaleUtil.class)", "var_name": "log"}, {"original_string": "private static Notifier[] notifiers = getNotifiers();", "modifier": "private static", "type": "Notifier[]", "declarator": "notifiers = getNotifiers()", "var_name": "notifiers"}], "methods": [{"identifier": "isLocaleSupported", "parameters": "(Locale locale)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLocaleSupported(Locale locale)", "full_signature": "public static boolean isLocaleSupported(Locale locale)", "class_method_signature": "LocaleUtil.isLocaleSupported(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "isCharsetSupported", "parameters": "(String charset)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCharsetSupported(String charset)", "full_signature": "public static boolean isCharsetSupported(String charset)", "class_method_signature": "LocaleUtil.isCharsetSupported(String charset)", "testcase": false, "constructor": false}, {"identifier": "parseLocale", "parameters": "(String localeString)", "modifiers": "public static", "return": "Locale", "signature": "Locale parseLocale(String localeString)", "full_signature": "public static Locale parseLocale(String localeString)", "class_method_signature": "LocaleUtil.parseLocale(String localeString)", "testcase": false, "constructor": false}, {"identifier": "getCanonicalCharset", "parameters": "(String charset)", "modifiers": "public static", "return": "String", "signature": "String getCanonicalCharset(String charset)", "full_signature": "public static String getCanonicalCharset(String charset)", "class_method_signature": "LocaleUtil.getCanonicalCharset(String charset)", "testcase": false, "constructor": false}, {"identifier": "calculateBundleNames", "parameters": "(String baseName, Locale locale)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> calculateBundleNames(String baseName, Locale locale)", "full_signature": "public static List<String> calculateBundleNames(String baseName, Locale locale)", "class_method_signature": "LocaleUtil.calculateBundleNames(String baseName, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "calculateBundleNames", "parameters": "(String baseName, Locale locale, boolean noext)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> calculateBundleNames(String baseName, Locale locale, boolean noext)", "full_signature": "public static List<String> calculateBundleNames(String baseName, Locale locale, boolean noext)", "class_method_signature": "LocaleUtil.calculateBundleNames(String baseName, Locale locale, boolean noext)", "testcase": false, "constructor": false}, {"identifier": "getSystem", "parameters": "()", "modifiers": "public static", "return": "LocaleInfo", "signature": "LocaleInfo getSystem()", "full_signature": "public static LocaleInfo getSystem()", "class_method_signature": "LocaleUtil.getSystem()", "testcase": false, "constructor": false}, {"identifier": "getDefault", "parameters": "()", "modifiers": "public static", "return": "LocaleInfo", "signature": "LocaleInfo getDefault()", "full_signature": "public static LocaleInfo getDefault()", "class_method_signature": "LocaleUtil.getDefault()", "testcase": false, "constructor": false}, {"identifier": "setDefault", "parameters": "(Locale locale)", "modifiers": "public static", "return": "LocaleInfo", "signature": "LocaleInfo setDefault(Locale locale)", "full_signature": "public static LocaleInfo setDefault(Locale locale)", "class_method_signature": "LocaleUtil.setDefault(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "setDefault", "parameters": "(Locale locale, String charset)", "modifiers": "public static", "return": "LocaleInfo", "signature": "LocaleInfo setDefault(Locale locale, String charset)", "full_signature": "public static LocaleInfo setDefault(Locale locale, String charset)", "class_method_signature": "LocaleUtil.setDefault(Locale locale, String charset)", "testcase": false, "constructor": false}, {"identifier": "setDefault", "parameters": "(LocaleInfo localeInfo)", "modifiers": "public static", "return": "LocaleInfo", "signature": "LocaleInfo setDefault(LocaleInfo localeInfo)", "full_signature": "public static LocaleInfo setDefault(LocaleInfo localeInfo)", "class_method_signature": "LocaleUtil.setDefault(LocaleInfo localeInfo)", "testcase": false, "constructor": false}, {"identifier": "setDefaultAndNotify", "parameters": "(LocaleInfo localeInfo)", "modifiers": "private static", "return": "void", "signature": "void setDefaultAndNotify(LocaleInfo localeInfo)", "full_signature": "private static void setDefaultAndNotify(LocaleInfo localeInfo)", "class_method_signature": "LocaleUtil.setDefaultAndNotify(LocaleInfo localeInfo)", "testcase": false, "constructor": false}, {"identifier": "resetDefault", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void resetDefault()", "full_signature": "public static void resetDefault()", "class_method_signature": "LocaleUtil.resetDefault()", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "public static", "return": "LocaleInfo", "signature": "LocaleInfo getContext()", "full_signature": "public static LocaleInfo getContext()", "class_method_signature": "LocaleUtil.getContext()", "testcase": false, "constructor": false}, {"identifier": "setContext", "parameters": "(Locale locale)", "modifiers": "public static", "return": "LocaleInfo", "signature": "LocaleInfo setContext(Locale locale)", "full_signature": "public static LocaleInfo setContext(Locale locale)", "class_method_signature": "LocaleUtil.setContext(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "setContext", "parameters": "(Locale locale, String charset)", "modifiers": "public static", "return": "LocaleInfo", "signature": "LocaleInfo setContext(Locale locale, String charset)", "full_signature": "public static LocaleInfo setContext(Locale locale, String charset)", "class_method_signature": "LocaleUtil.setContext(Locale locale, String charset)", "testcase": false, "constructor": false}, {"identifier": "setContext", "parameters": "(LocaleInfo localeInfo)", "modifiers": "public static", "return": "LocaleInfo", "signature": "LocaleInfo setContext(LocaleInfo localeInfo)", "full_signature": "public static LocaleInfo setContext(LocaleInfo localeInfo)", "class_method_signature": "LocaleUtil.setContext(LocaleInfo localeInfo)", "testcase": false, "constructor": false}, {"identifier": "setContextAndNotify", "parameters": "(LocaleInfo localeInfo)", "modifiers": "private static", "return": "void", "signature": "void setContextAndNotify(LocaleInfo localeInfo)", "full_signature": "private static void setContextAndNotify(LocaleInfo localeInfo)", "class_method_signature": "LocaleUtil.setContextAndNotify(LocaleInfo localeInfo)", "testcase": false, "constructor": false}, {"identifier": "resetContext", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void resetContext()", "full_signature": "public static void resetContext()", "class_method_signature": "LocaleUtil.resetContext()", "testcase": false, "constructor": false}, {"identifier": "getNotifiers", "parameters": "()", "modifiers": "private static", "return": "Notifier[]", "signature": "Notifier[] getNotifiers()", "full_signature": "private static Notifier[] getNotifiers()", "class_method_signature": "LocaleUtil.getNotifiers()", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/i18n/LocaleUtil.java"}, "focal_method": {"identifier": "parseLocale", "parameters": "(String localeString)", "modifiers": "public static", "return": "Locale", "body": "public static Locale parseLocale(String localeString) {\n        localeString = StringUtil.trimToNull(localeString);\n\n        if (localeString == null) {\n            return null;\n        }\n\n        String language = Emptys.EMPTY_STRING;\n        String country = Emptys.EMPTY_STRING;\n        String variant = Emptys.EMPTY_STRING;\n\n        // language\n        int start = 0;\n        int index = localeString.indexOf(\"_\");\n\n        if (index >= 0) {\n            language = localeString.substring(start, index).trim();\n\n            // country\n            start = index + 1;\n            index = localeString.indexOf(\"_\", start);\n\n            if (index >= 0) {\n                country = localeString.substring(start, index).trim();\n\n                // variant\n                variant = localeString.substring(index + 1).trim();\n            } else {\n                country = localeString.substring(start).trim();\n            }\n        } else {\n            language = localeString.substring(start).trim();\n        }\n\n        return new Locale(language, country, variant);\n    }", "signature": "Locale parseLocale(String localeString)", "full_signature": "public static Locale parseLocale(String localeString)", "class_method_signature": "LocaleUtil.parseLocale(String localeString)", "testcase": false, "constructor": false, "invocations": ["trimToNull", "indexOf", "trim", "substring", "indexOf", "trim", "substring", "trim", "substring", "trim", "substring", "trim", "substring"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}