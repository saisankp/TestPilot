{"test_class": {"identifier": "SimpleStateManagerTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private SimpleStateManager manager;", "modifier": "private", "type": "SimpleStateManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private OrmFactory<State> stateFactory = getRequiredOrmFactory(State.class);", "modifier": "private", "type": "OrmFactory<State>", "declarator": "stateFactory = getRequiredOrmFactory(State.class)", "var_name": "stateFactory"}, {"original_string": "private OrmFactory<ApplicationState> applicationStateFactory = getRequiredOrmFactory(ApplicationState.class);", "modifier": "private", "type": "OrmFactory<ApplicationState>", "declarator": "applicationStateFactory = getRequiredOrmFactory(ApplicationState.class)", "var_name": "applicationStateFactory"}, {"original_string": "private OrmFactory<User> userFactory = getRequiredOrmFactory(User.class);", "modifier": "private", "type": "OrmFactory<User>", "declarator": "userFactory = getRequiredOrmFactory(User.class)", "var_name": "userFactory"}, {"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "private Application application;", "modifier": "private", "type": "Application", "declarator": "application", "var_name": "application"}, {"original_string": "private Set<Resource> stateResource0, stateResource1;", "modifier": "private", "type": "Set<Resource>", "declarator": "stateResource0", "var_name": "stateResource0"}, {"original_string": "@Mock\n    private EngineManager engineManager;", "modifier": "@Mock\n    private", "type": "EngineManager", "declarator": "engineManager", "var_name": "engineManager"}, {"original_string": "@Mock\n    private ApplicationManager applicationManager;", "modifier": "@Mock\n    private", "type": "ApplicationManager", "declarator": "applicationManager", "var_name": "applicationManager"}], "file": "com.mobi.platform.config.impl/src/test/java/com/mobi/platform/config/impl/state/SimpleStateManagerTest.java"}, "test_case": {"identifier": "storeStateWithUserThatDoesNotExistTest", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void storeStateWithUserThatDoesNotExistTest() {\n        // Setup:\n        when(engineManager.retrieveUser(anyString())).thenReturn(Optional.empty());\n\n        manager.storeState(MODEL_FACTORY.createModel(), \"error\");\n    }", "signature": "void storeStateWithUserThatDoesNotExistTest()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void storeStateWithUserThatDoesNotExistTest()", "class_method_signature": "SimpleStateManagerTest.storeStateWithUserThatDoesNotExistTest()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "retrieveUser", "anyString", "empty", "storeState", "createModel"]}, "focal_class": {"identifier": "SimpleStateManager", "superclass": "", "interfaces": "implements StateManager", "fields": [{"original_string": "protected static final String COMPONENT_NAME = \"com.mobi.platform.config.state.StateManager\";", "modifier": "protected static final", "type": "String", "declarator": "COMPONENT_NAME = \"com.mobi.platform.config.state.StateManager\"", "var_name": "COMPONENT_NAME"}, {"original_string": "private Repository repository;", "modifier": "private", "type": "Repository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private ValueFactory factory;", "modifier": "private", "type": "ValueFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private ModelFactory modelFactory;", "modifier": "private", "type": "ModelFactory", "declarator": "modelFactory", "var_name": "modelFactory"}, {"original_string": "private StateFactory stateFactory;", "modifier": "private", "type": "StateFactory", "declarator": "stateFactory", "var_name": "stateFactory"}, {"original_string": "private ApplicationStateFactory applicationStateFactory;", "modifier": "private", "type": "ApplicationStateFactory", "declarator": "applicationStateFactory", "var_name": "applicationStateFactory"}, {"original_string": "private EngineManager engineManager;", "modifier": "private", "type": "EngineManager", "declarator": "engineManager", "var_name": "engineManager"}, {"original_string": "private ApplicationManager applicationManager;", "modifier": "private", "type": "ApplicationManager", "declarator": "applicationManager", "var_name": "applicationManager"}, {"original_string": "private static final String NAMESPACE = \"http://mobi.com/states#\";", "modifier": "private static final", "type": "String", "declarator": "NAMESPACE = \"http://mobi.com/states#\"", "var_name": "NAMESPACE"}, {"original_string": "private static final String GET_STATES_QUERY;", "modifier": "private static final", "type": "String", "declarator": "GET_STATES_QUERY", "var_name": "GET_STATES_QUERY"}, {"original_string": "private static final String GET_APPLICATION_STATES_QUERY;", "modifier": "private static final", "type": "String", "declarator": "GET_APPLICATION_STATES_QUERY", "var_name": "GET_APPLICATION_STATES_QUERY"}, {"original_string": "private static final String STATE_ID_BINDING = \"id\";", "modifier": "private static final", "type": "String", "declarator": "STATE_ID_BINDING = \"id\"", "var_name": "STATE_ID_BINDING"}, {"original_string": "private static final String USER_BINDING = \"userId\";", "modifier": "private static final", "type": "String", "declarator": "USER_BINDING = \"userId\"", "var_name": "USER_BINDING"}, {"original_string": "private static final String APPLICATION_BINDING = \"application\";", "modifier": "private static final", "type": "String", "declarator": "APPLICATION_BINDING = \"application\"", "var_name": "APPLICATION_BINDING"}, {"original_string": "private static final String RESOURCES_BINDING = \"resources\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCES_BINDING = \"resources\"", "var_name": "RESOURCES_BINDING"}], "methods": [{"identifier": "setRepository", "parameters": "(Repository repository)", "modifiers": "@Reference(name = \"repository\") protected", "return": "void", "signature": "void setRepository(Repository repository)", "full_signature": "@Reference(name = \"repository\") protected void setRepository(Repository repository)", "class_method_signature": "SimpleStateManager.setRepository(Repository repository)", "testcase": false, "constructor": false}, {"identifier": "setValueFactory", "parameters": "(final ValueFactory vf)", "modifiers": "@Reference protected", "return": "void", "signature": "void setValueFactory(final ValueFactory vf)", "full_signature": "@Reference protected void setValueFactory(final ValueFactory vf)", "class_method_signature": "SimpleStateManager.setValueFactory(final ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "setModelFactory", "parameters": "(final ModelFactory mf)", "modifiers": "@Reference protected", "return": "void", "signature": "void setModelFactory(final ModelFactory mf)", "full_signature": "@Reference protected void setModelFactory(final ModelFactory mf)", "class_method_signature": "SimpleStateManager.setModelFactory(final ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "setStateFactory", "parameters": "(StateFactory stateFactory)", "modifiers": "@Reference protected", "return": "void", "signature": "void setStateFactory(StateFactory stateFactory)", "full_signature": "@Reference protected void setStateFactory(StateFactory stateFactory)", "class_method_signature": "SimpleStateManager.setStateFactory(StateFactory stateFactory)", "testcase": false, "constructor": false}, {"identifier": "setApplicationStateFactory", "parameters": "(ApplicationStateFactory applicationStateFactory)", "modifiers": "@Reference protected", "return": "void", "signature": "void setApplicationStateFactory(ApplicationStateFactory applicationStateFactory)", "full_signature": "@Reference protected void setApplicationStateFactory(ApplicationStateFactory applicationStateFactory)", "class_method_signature": "SimpleStateManager.setApplicationStateFactory(ApplicationStateFactory applicationStateFactory)", "testcase": false, "constructor": false}, {"identifier": "setEngineManager", "parameters": "(EngineManager engineManager)", "modifiers": "@Reference protected", "return": "void", "signature": "void setEngineManager(EngineManager engineManager)", "full_signature": "@Reference protected void setEngineManager(EngineManager engineManager)", "class_method_signature": "SimpleStateManager.setEngineManager(EngineManager engineManager)", "testcase": false, "constructor": false}, {"identifier": "setApplicationManager", "parameters": "(ApplicationManager applicationManager)", "modifiers": "@Reference protected", "return": "void", "signature": "void setApplicationManager(ApplicationManager applicationManager)", "full_signature": "@Reference protected void setApplicationManager(ApplicationManager applicationManager)", "class_method_signature": "SimpleStateManager.setApplicationManager(ApplicationManager applicationManager)", "testcase": false, "constructor": false}, {"identifier": "stateExists", "parameters": "(Resource stateId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stateExists(Resource stateId)", "full_signature": "@Override public boolean stateExists(Resource stateId)", "class_method_signature": "SimpleStateManager.stateExists(Resource stateId)", "testcase": false, "constructor": false}, {"identifier": "stateExistsForUser", "parameters": "(Resource stateId, String username)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stateExistsForUser(Resource stateId, String username)", "full_signature": "@Override public boolean stateExistsForUser(Resource stateId, String username)", "class_method_signature": "SimpleStateManager.stateExistsForUser(Resource stateId, String username)", "testcase": false, "constructor": false}, {"identifier": "getStates", "parameters": "(@Nullable String username, @Nullable String applicationId,\n                                          Set<Resource> subjects)", "modifiers": "@Override public", "return": "Map<Resource, Model>", "signature": "Map<Resource, Model> getStates(@Nullable String username, @Nullable String applicationId,\n                                          Set<Resource> subjects)", "full_signature": "@Override public Map<Resource, Model> getStates(@Nullable String username, @Nullable String applicationId,\n                                          Set<Resource> subjects)", "class_method_signature": "SimpleStateManager.getStates(@Nullable String username, @Nullable String applicationId,\n                                          Set<Resource> subjects)", "testcase": false, "constructor": false}, {"identifier": "storeState", "parameters": "(Model newState, String username)", "modifiers": "@Override public", "return": "Resource", "signature": "Resource storeState(Model newState, String username)", "full_signature": "@Override public Resource storeState(Model newState, String username)", "class_method_signature": "SimpleStateManager.storeState(Model newState, String username)", "testcase": false, "constructor": false}, {"identifier": "storeState", "parameters": "(Model newState, String username, String applicationId)", "modifiers": "@Override public", "return": "Resource", "signature": "Resource storeState(Model newState, String username, String applicationId)", "full_signature": "@Override public Resource storeState(Model newState, String username, String applicationId)", "class_method_signature": "SimpleStateManager.storeState(Model newState, String username, String applicationId)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "(Resource stateId)", "modifiers": "@Override public", "return": "Model", "signature": "Model getState(Resource stateId)", "full_signature": "@Override public Model getState(Resource stateId)", "class_method_signature": "SimpleStateManager.getState(Resource stateId)", "testcase": false, "constructor": false}, {"identifier": "updateState", "parameters": "(Resource stateId, Model newState)", "modifiers": "@Override public", "return": "void", "signature": "void updateState(Resource stateId, Model newState)", "full_signature": "@Override public void updateState(Resource stateId, Model newState)", "class_method_signature": "SimpleStateManager.updateState(Resource stateId, Model newState)", "testcase": false, "constructor": false}, {"identifier": "deleteState", "parameters": "(Resource stateId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteState(Resource stateId)", "full_signature": "@Override public void deleteState(Resource stateId)", "class_method_signature": "SimpleStateManager.deleteState(Resource stateId)", "testcase": false, "constructor": false}, {"identifier": "removeState", "parameters": "(State state, RepositoryConnection conn)", "modifiers": "private", "return": "void", "signature": "void removeState(State state, RepositoryConnection conn)", "full_signature": "private void removeState(State state, RepositoryConnection conn)", "class_method_signature": "SimpleStateManager.removeState(State state, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "createState", "parameters": "(Model newState, String username, OrmFactory<T> ormFactory)", "modifiers": "private", "return": "T", "signature": "T createState(Model newState, String username, OrmFactory<T> ormFactory)", "full_signature": "private T createState(Model newState, String username, OrmFactory<T> ormFactory)", "class_method_signature": "SimpleStateManager.createState(Model newState, String username, OrmFactory<T> ormFactory)", "testcase": false, "constructor": false}, {"identifier": "stateExists", "parameters": "(Resource stateId, RepositoryConnection conn)", "modifiers": "private", "return": "boolean", "signature": "boolean stateExists(Resource stateId, RepositoryConnection conn)", "full_signature": "private boolean stateExists(Resource stateId, RepositoryConnection conn)", "class_method_signature": "SimpleStateManager.stateExists(Resource stateId, RepositoryConnection conn)", "testcase": false, "constructor": false}], "file": "com.mobi.platform.config.impl/src/main/java/com/mobi/platform/config/impl/state/SimpleStateManager.java"}, "focal_method": {"identifier": "storeState", "parameters": "(Model newState, String username)", "modifiers": "@Override public", "return": "Resource", "body": "@Override\n    public Resource storeState(Model newState, String username) {\n        State state = createState(newState, username, stateFactory);\n        try (RepositoryConnection conn = repository.getConnection()) {\n            conn.add(state.getModel());\n            return state.getResource();\n        }\n    }", "signature": "Resource storeState(Model newState, String username)", "full_signature": "@Override public Resource storeState(Model newState, String username)", "class_method_signature": "SimpleStateManager.storeState(Model newState, String username)", "testcase": false, "constructor": false, "invocations": ["createState", "getConnection", "add", "getModel", "getResource"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}