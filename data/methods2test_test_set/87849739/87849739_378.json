{"test_class": {"identifier": "RawMessageMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ThingId THING_ID = ThingId.of(\"thing:id\");", "modifier": "private static final", "type": "ThingId", "declarator": "THING_ID = ThingId.of(\"thing:id\")", "var_name": "THING_ID"}, {"original_string": "private static final ProtocolAdapter ADAPTER = DittoProtocolAdapter.newInstance();", "modifier": "private static final", "type": "ProtocolAdapter", "declarator": "ADAPTER = DittoProtocolAdapter.newInstance()", "var_name": "ADAPTER"}, {"original_string": "private MessageMapper underTest;", "modifier": "private", "type": "MessageMapper", "declarator": "underTest", "var_name": "underTest"}], "file": "services/connectivity/mapping/src/test/java/org/eclipse/ditto/services/connectivity/mapping/RawMessageMapperTest.java"}, "test_case": {"identifier": "mapToTextMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mapToTextMessage() {\n        final Map<String, String> headers = Map.of(\n                \"content-type\", \"text/plain\",\n                \"ditto-message-subject\", \"hello/world\",\n                \"ditto-message-thing-id\", \"thing:id\"\n        );\n        final String payload = \"lorem ipsum dolor sit amet\";\n        final List<Adaptable> adaptables =\n                underTest.map(ExternalMessageFactory.newExternalMessageBuilder(headers)\n                        .withText(payload)\n                        .build());\n        assertThat(adaptables).hasSize(1);\n        final Signal<?> signal = ADAPTER.fromAdaptable(adaptables.get(0));\n        assertThat(signal).isInstanceOf(SendThingMessage.class);\n        final SendThingMessage<?> sendThingMessage = (SendThingMessage<?>) signal;\n        assertThat(sendThingMessage.getEntityId().toString()).isEqualTo(\"thing:id\");\n        assertThat(sendThingMessage.getMessage().getPayload().orElseThrow()).isEqualTo(payload);\n    }", "signature": "void mapToTextMessage()", "full_signature": "@Test public void mapToTextMessage()", "class_method_signature": "RawMessageMapperTest.mapToTextMessage()", "testcase": true, "constructor": false, "invocations": ["of", "map", "build", "withText", "newExternalMessageBuilder", "hasSize", "assertThat", "fromAdaptable", "get", "isInstanceOf", "assertThat", "isEqualTo", "assertThat", "toString", "getEntityId", "isEqualTo", "assertThat", "orElseThrow", "getPayload", "getMessage"]}, "focal_class": {"identifier": "RawMessageMapper", "superclass": "extends AbstractMessageMapper", "interfaces": "", "fields": [{"original_string": "private static final JsonKey MESSAGES_JSON_KEY = JsonKey.of(\"messages\");", "modifier": "private static final", "type": "JsonKey", "declarator": "MESSAGES_JSON_KEY = JsonKey.of(\"messages\")", "var_name": "MESSAGES_JSON_KEY"}, {"original_string": "private static final String OUTGOING_CONTENT_TYPE_KEY = \"outgoingContentType\";", "modifier": "private static final", "type": "String", "declarator": "OUTGOING_CONTENT_TYPE_KEY = \"outgoingContentType\"", "var_name": "OUTGOING_CONTENT_TYPE_KEY"}, {"original_string": "private static final String INCOMING_MESSAGE_HEADERS = \"incomingMessageHeaders\";", "modifier": "private static final", "type": "String", "declarator": "INCOMING_MESSAGE_HEADERS = \"incomingMessageHeaders\"", "var_name": "INCOMING_MESSAGE_HEADERS"}, {"original_string": "private static final ContentType DEFAULT_OUTGOING_CONTENT_TYPE =\n            ContentType.of(ContentTypes.TEXT_PLAIN_UTF8.toString());", "modifier": "private static final", "type": "ContentType", "declarator": "DEFAULT_OUTGOING_CONTENT_TYPE =\n            ContentType.of(ContentTypes.TEXT_PLAIN_UTF8.toString())", "var_name": "DEFAULT_OUTGOING_CONTENT_TYPE"}, {"original_string": "private static final Map<String, String> DEFAULT_INCOMING_HEADERS = Map.of(\n            DittoHeaderDefinition.CONTENT_TYPE.getKey(),\n            getFromHeaderOrDefault(DittoHeaderDefinition.CONTENT_TYPE.getKey(),\n                    ContentTypes.APPLICATION_OCTET_STREAM.toString()),\n            MessageHeaderDefinition.DIRECTION.getKey(),\n            getFromHeaderOrDefault(MessageHeaderDefinition.DIRECTION.getKey(), MessageDirection.TO.toString()),\n            MessageHeaderDefinition.THING_ID.getKey(), asPlaceholder(MessageHeaderDefinition.THING_ID),\n            MessageHeaderDefinition.SUBJECT.getKey(), asPlaceholder(MessageHeaderDefinition.SUBJECT),\n            MessageHeaderDefinition.STATUS_CODE.getKey(), asPlaceholder(MessageHeaderDefinition.STATUS_CODE),\n            MessageHeaderDefinition.FEATURE_ID.getKey(), asPlaceholder(MessageHeaderDefinition.FEATURE_ID)\n    );", "modifier": "private static final", "type": "Map<String, String>", "declarator": "DEFAULT_INCOMING_HEADERS = Map.of(\n            DittoHeaderDefinition.CONTENT_TYPE.getKey(),\n            getFromHeaderOrDefault(DittoHeaderDefinition.CONTENT_TYPE.getKey(),\n                    ContentTypes.APPLICATION_OCTET_STREAM.toString()),\n            MessageHeaderDefinition.DIRECTION.getKey(),\n            getFromHeaderOrDefault(MessageHeaderDefinition.DIRECTION.getKey(), MessageDirection.TO.toString()),\n            MessageHeaderDefinition.THING_ID.getKey(), asPlaceholder(MessageHeaderDefinition.THING_ID),\n            MessageHeaderDefinition.SUBJECT.getKey(), asPlaceholder(MessageHeaderDefinition.SUBJECT),\n            MessageHeaderDefinition.STATUS_CODE.getKey(), asPlaceholder(MessageHeaderDefinition.STATUS_CODE),\n            MessageHeaderDefinition.FEATURE_ID.getKey(), asPlaceholder(MessageHeaderDefinition.FEATURE_ID)\n    )", "var_name": "DEFAULT_INCOMING_HEADERS"}, {"original_string": "private static final JsonObject DEFAULT_CONFIG = DittoMessageMapper.DEFAULT_OPTIONS.toBuilder()\n            .set(OUTGOING_CONTENT_TYPE_KEY, DEFAULT_OUTGOING_CONTENT_TYPE.getValue())\n            .set(INCOMING_MESSAGE_HEADERS, DEFAULT_INCOMING_HEADERS.entrySet()\n                    .stream()\n                    .map(entry -> JsonField.newInstance(entry.getKey(), JsonValue.of(entry.getValue())))\n                    .collect(JsonCollectors.fieldsToObject()))\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "DEFAULT_CONFIG = DittoMessageMapper.DEFAULT_OPTIONS.toBuilder()\n            .set(OUTGOING_CONTENT_TYPE_KEY, DEFAULT_OUTGOING_CONTENT_TYPE.getValue())\n            .set(INCOMING_MESSAGE_HEADERS, DEFAULT_INCOMING_HEADERS.entrySet()\n                    .stream()\n                    .map(entry -> JsonField.newInstance(entry.getKey(), JsonValue.of(entry.getValue())))\n                    .collect(JsonCollectors.fieldsToObject()))\n            .build()", "var_name": "DEFAULT_CONFIG"}, {"original_string": "private ContentType fallbackOutgoingContentType = DEFAULT_OUTGOING_CONTENT_TYPE;", "modifier": "private", "type": "ContentType", "declarator": "fallbackOutgoingContentType = DEFAULT_OUTGOING_CONTENT_TYPE", "var_name": "fallbackOutgoingContentType"}, {"original_string": "private Map<String, String> incomingMessageHeaders = DEFAULT_INCOMING_HEADERS;", "modifier": "private", "type": "Map<String, String>", "declarator": "incomingMessageHeaders = DEFAULT_INCOMING_HEADERS", "var_name": "incomingMessageHeaders"}, {"original_string": "private final DittoMessageMapper dittoMessageMapper = new DittoMessageMapper();", "modifier": "private final", "type": "DittoMessageMapper", "declarator": "dittoMessageMapper = new DittoMessageMapper()", "var_name": "dittoMessageMapper"}, {"original_string": "public static final MappingContext CONTEXT = ConnectivityModelFactory.newMappingContext(\n            RawMessageMapper.class.getCanonicalName(),\n            DEFAULT_CONFIG\n    );", "modifier": "public static final", "type": "MappingContext", "declarator": "CONTEXT = ConnectivityModelFactory.newMappingContext(\n            RawMessageMapper.class.getCanonicalName(),\n            DEFAULT_CONFIG\n    )", "var_name": "CONTEXT"}], "methods": [{"identifier": "map", "parameters": "(final ExternalMessage externalMessage)", "modifiers": "@Override public", "return": "List<Adaptable>", "signature": "List<Adaptable> map(final ExternalMessage externalMessage)", "full_signature": "@Override public List<Adaptable> map(final ExternalMessage externalMessage)", "class_method_signature": "RawMessageMapper.map(final ExternalMessage externalMessage)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(final Adaptable adaptable)", "modifiers": "@Override public", "return": "List<ExternalMessage>", "signature": "List<ExternalMessage> map(final Adaptable adaptable)", "full_signature": "@Override public List<ExternalMessage> map(final Adaptable adaptable)", "class_method_signature": "RawMessageMapper.map(final Adaptable adaptable)", "testcase": false, "constructor": false}, {"identifier": "getDefaultOptions", "parameters": "()", "modifiers": "@Override public", "return": "JsonObject", "signature": "JsonObject getDefaultOptions()", "full_signature": "@Override public JsonObject getDefaultOptions()", "class_method_signature": "RawMessageMapper.getDefaultOptions()", "testcase": false, "constructor": false}, {"identifier": "doConfigure", "parameters": "(final MappingConfig mappingConfig, final MessageMapperConfiguration configuration)", "modifiers": "@Override protected", "return": "void", "signature": "void doConfigure(final MappingConfig mappingConfig, final MessageMapperConfiguration configuration)", "full_signature": "@Override protected void doConfigure(final MappingConfig mappingConfig, final MessageMapperConfiguration configuration)", "class_method_signature": "RawMessageMapper.doConfigure(final MappingConfig mappingConfig, final MessageMapperConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "toOutgoingText", "parameters": "(final JsonValue value)", "modifiers": "private static", "return": "String", "signature": "String toOutgoingText(final JsonValue value)", "full_signature": "private static String toOutgoingText(final JsonValue value)", "class_method_signature": "RawMessageMapper.toOutgoingText(final JsonValue value)", "testcase": false, "constructor": false}, {"identifier": "toOutgoingBinary", "parameters": "(final String base64Encoded)", "modifiers": "private static", "return": "Optional<byte[]>", "signature": "Optional<byte[]> toOutgoingBinary(final String base64Encoded)", "full_signature": "private static Optional<byte[]> toOutgoingBinary(final String base64Encoded)", "class_method_signature": "RawMessageMapper.toOutgoingBinary(final String base64Encoded)", "testcase": false, "constructor": false}, {"identifier": "badContentType", "parameters": "(final String contentType, final DittoHeaders headers)", "modifiers": "private static", "return": "MessageFormatInvalidException", "signature": "MessageFormatInvalidException badContentType(final String contentType, final DittoHeaders headers)", "full_signature": "private static MessageFormatInvalidException badContentType(final String contentType, final DittoHeaders headers)", "class_method_signature": "RawMessageMapper.badContentType(final String contentType, final DittoHeaders headers)", "testcase": false, "constructor": false}, {"identifier": "isMessageCommandOrResponse", "parameters": "(final Adaptable adaptable)", "modifiers": "private static", "return": "boolean", "signature": "boolean isMessageCommandOrResponse(final Adaptable adaptable)", "full_signature": "private static boolean isMessageCommandOrResponse(final Adaptable adaptable)", "class_method_signature": "RawMessageMapper.isMessageCommandOrResponse(final Adaptable adaptable)", "testcase": false, "constructor": false}, {"identifier": "asPlaceholder", "parameters": "(final MessageHeaderDefinition messageHeaderDefinition)", "modifiers": "private static", "return": "String", "signature": "String asPlaceholder(final MessageHeaderDefinition messageHeaderDefinition)", "full_signature": "private static String asPlaceholder(final MessageHeaderDefinition messageHeaderDefinition)", "class_method_signature": "RawMessageMapper.asPlaceholder(final MessageHeaderDefinition messageHeaderDefinition)", "testcase": false, "constructor": false}, {"identifier": "getFromHeaderOrDefault", "parameters": "(final String headerKey, final String defaultValue)", "modifiers": "private static", "return": "String", "signature": "String getFromHeaderOrDefault(final String headerKey, final String defaultValue)", "full_signature": "private static String getFromHeaderOrDefault(final String headerKey, final String defaultValue)", "class_method_signature": "RawMessageMapper.getFromHeaderOrDefault(final String headerKey, final String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "evaluateOutgoingMessageHeaders", "parameters": "(final Adaptable adaptable,\n            @Nullable final ContentType contentType)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> evaluateOutgoingMessageHeaders(final Adaptable adaptable,\n            @Nullable final ContentType contentType)", "full_signature": "private static Map<String, String> evaluateOutgoingMessageHeaders(final Adaptable adaptable,\n            @Nullable final ContentType contentType)", "class_method_signature": "RawMessageMapper.evaluateOutgoingMessageHeaders(final Adaptable adaptable,\n            @Nullable final ContentType contentType)", "testcase": false, "constructor": false}, {"identifier": "evaluateIncomingMessageHeaders", "parameters": "(final ExternalMessage externalMessage,\n            final Map<String, String> incomingMessageHeaders)", "modifiers": "private static", "return": "Optional<MessageHeaders>", "signature": "Optional<MessageHeaders> evaluateIncomingMessageHeaders(final ExternalMessage externalMessage,\n            final Map<String, String> incomingMessageHeaders)", "full_signature": "private static Optional<MessageHeaders> evaluateIncomingMessageHeaders(final ExternalMessage externalMessage,\n            final Map<String, String> incomingMessageHeaders)", "class_method_signature": "RawMessageMapper.evaluateIncomingMessageHeaders(final ExternalMessage externalMessage,\n            final Map<String, String> incomingMessageHeaders)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final ExpressionResolver expressionResolver,\n            final Map<String, String> incomingMessageHeaders,\n            final String messageHeader)", "modifiers": "@Nullable private static", "return": "String", "signature": "String resolve(final ExpressionResolver expressionResolver,\n            final Map<String, String> incomingMessageHeaders,\n            final String messageHeader)", "full_signature": "@Nullable private static String resolve(final ExpressionResolver expressionResolver,\n            final Map<String, String> incomingMessageHeaders,\n            final String messageHeader)", "class_method_signature": "RawMessageMapper.resolve(final ExpressionResolver expressionResolver,\n            final Map<String, String> incomingMessageHeaders,\n            final String messageHeader)", "testcase": false, "constructor": false}, {"identifier": "toTopicPath", "parameters": "(final MessageHeaders messageHeaders)", "modifiers": "private static", "return": "TopicPath", "signature": "TopicPath toTopicPath(final MessageHeaders messageHeaders)", "full_signature": "private static TopicPath toTopicPath(final MessageHeaders messageHeaders)", "class_method_signature": "RawMessageMapper.toTopicPath(final MessageHeaders messageHeaders)", "testcase": false, "constructor": false}, {"identifier": "toPayload", "parameters": "(final ExternalMessage externalMessage, final MessageHeaders messageHeaders)", "modifiers": "private static", "return": "Payload", "signature": "Payload toPayload(final ExternalMessage externalMessage, final MessageHeaders messageHeaders)", "full_signature": "private static Payload toPayload(final ExternalMessage externalMessage, final MessageHeaders messageHeaders)", "class_method_signature": "RawMessageMapper.toPayload(final ExternalMessage externalMessage, final MessageHeaders messageHeaders)", "testcase": false, "constructor": false}, {"identifier": "getPayloadValue", "parameters": "(final ExternalMessage externalMessage,\n            final ContentType contentType)", "modifiers": "private static", "return": "Optional<JsonValue>", "signature": "Optional<JsonValue> getPayloadValue(final ExternalMessage externalMessage,\n            final ContentType contentType)", "full_signature": "private static Optional<JsonValue> getPayloadValue(final ExternalMessage externalMessage,\n            final ContentType contentType)", "class_method_signature": "RawMessageMapper.getPayloadValue(final ExternalMessage externalMessage,\n            final ContentType contentType)", "testcase": false, "constructor": false}, {"identifier": "retainContentTypeOnly", "parameters": "(final MessageHeaders messageHeaders)", "modifiers": "private static", "return": "DittoHeaders", "signature": "DittoHeaders retainContentTypeOnly(final MessageHeaders messageHeaders)", "full_signature": "private static DittoHeaders retainContentTypeOnly(final MessageHeaders messageHeaders)", "class_method_signature": "RawMessageMapper.retainContentTypeOnly(final MessageHeaders messageHeaders)", "testcase": false, "constructor": false}, {"identifier": "toMessagePath", "parameters": "(final MessageHeaders messageHeaders)", "modifiers": "private static", "return": "JsonPointer", "signature": "JsonPointer toMessagePath(final MessageHeaders messageHeaders)", "full_signature": "private static JsonPointer toMessagePath(final MessageHeaders messageHeaders)", "class_method_signature": "RawMessageMapper.toMessagePath(final MessageHeaders messageHeaders)", "testcase": false, "constructor": false}], "file": "services/connectivity/mapping/src/main/java/org/eclipse/ditto/services/connectivity/mapping/RawMessageMapper.java"}, "focal_method": {"identifier": "map", "parameters": "(final ExternalMessage externalMessage)", "modifiers": "@Override public", "return": "List<Adaptable>", "body": "@Override\n    public List<Adaptable> map(final ExternalMessage externalMessage) {\n        final Optional<MessageHeaders> messageHeadersOptional =\n                evaluateIncomingMessageHeaders(externalMessage, incomingMessageHeaders);\n        if (messageHeadersOptional.isEmpty()) {\n            // message payload is a Ditto protocol message.\n            return dittoMessageMapper.map(externalMessage);\n        }\n        final MessageHeaders messageHeaders = messageHeadersOptional.get();\n        return List.of(ProtocolFactory.newAdaptableBuilder(toTopicPath(messageHeaders))\n                .withPayload(toPayload(externalMessage, messageHeaders))\n                .withHeaders(retainContentTypeOnly(messageHeaders))\n                .build());\n    }", "signature": "List<Adaptable> map(final ExternalMessage externalMessage)", "full_signature": "@Override public List<Adaptable> map(final ExternalMessage externalMessage)", "class_method_signature": "RawMessageMapper.map(final ExternalMessage externalMessage)", "testcase": false, "constructor": false, "invocations": ["evaluateIncomingMessageHeaders", "isEmpty", "map", "get", "of", "build", "withHeaders", "withPayload", "newAdaptableBuilder", "toTopicPath", "toPayload", "retainContentTypeOnly"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}