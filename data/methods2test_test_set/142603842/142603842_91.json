{"test_class": {"identifier": "RouteListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Router router;", "modifier": "@Mock\n    private", "type": "Router", "declarator": "router", "var_name": "router"}, {"original_string": "@Mock\n    private RoutingPlanConsumer routingPlanConsumer;", "modifier": "@Mock\n    private", "type": "RoutingPlanConsumer", "declarator": "routingPlanConsumer", "var_name": "routingPlanConsumer"}, {"original_string": "@Mock\n    private VehicleRepository vehicleRepository;", "modifier": "@Mock\n    private", "type": "VehicleRepository", "declarator": "vehicleRepository", "var_name": "vehicleRepository"}, {"original_string": "@Mock\n    private LocationRepository locationRepository;", "modifier": "@Mock\n    private", "type": "LocationRepository", "declarator": "locationRepository", "var_name": "locationRepository"}, {"original_string": "@Captor\n    private ArgumentCaptor<RoutingPlan> routeArgumentCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<RoutingPlan>", "declarator": "routeArgumentCaptor", "var_name": "routeArgumentCaptor"}, {"original_string": "@InjectMocks\n    private RouteListener routeListener;", "modifier": "@InjectMocks\n    private", "type": "RouteListener", "declarator": "routeListener", "var_name": "routeListener"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/service/route/RouteListenerTest.java"}, "test_case": {"identifier": "event_with_no_routes_should_be_consumed_as_an_empty_routing_plan", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void event_with_no_routes_should_be_consumed_as_an_empty_routing_plan() {\n        final long vehicleId = 12;\n        final Vehicle vehicle = VehicleFactory.testVehicle(vehicleId);\n        when(vehicleRepository.find(vehicleId)).thenReturn(Optional.of(vehicle));\n        RouteChangedEvent event = new RouteChangedEvent(\n                this,\n                Distance.ZERO,\n                singletonList(vehicleId),\n                null,\n                emptyList(),\n                emptyList());\n        routeListener.onApplicationEvent(event);\n        verifyNoInteractions(router);\n\n        RoutingPlan routingPlan = verifyAndCaptureConsumedPlan();\n        assertThat(routingPlan.vehicles()).containsExactly(vehicle);\n        assertThat(routingPlan.depot()).isEmpty();\n        assertThat(routingPlan.visits()).isEmpty();\n        assertThat(routingPlan.routes()).isEmpty();\n    }", "signature": "void event_with_no_routes_should_be_consumed_as_an_empty_routing_plan()", "full_signature": "@Test void event_with_no_routes_should_be_consumed_as_an_empty_routing_plan()", "class_method_signature": "RouteListenerTest.event_with_no_routes_should_be_consumed_as_an_empty_routing_plan()", "testcase": true, "constructor": false, "invocations": ["testVehicle", "thenReturn", "when", "find", "of", "singletonList", "emptyList", "emptyList", "onApplicationEvent", "verifyNoInteractions", "verifyAndCaptureConsumedPlan", "containsExactly", "assertThat", "vehicles", "isEmpty", "assertThat", "depot", "isEmpty", "assertThat", "visits", "isEmpty", "assertThat", "routes"]}, "focal_class": {"identifier": "RouteListener", "superclass": "", "interfaces": "implements ApplicationListener<RouteChangedEvent>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RouteListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RouteListener.class)", "var_name": "logger"}, {"original_string": "private final Router router;", "modifier": "private final", "type": "Router", "declarator": "router", "var_name": "router"}, {"original_string": "private final RoutingPlanConsumer routingPlanConsumer;", "modifier": "private final", "type": "RoutingPlanConsumer", "declarator": "routingPlanConsumer", "var_name": "routingPlanConsumer"}, {"original_string": "private final VehicleRepository vehicleRepository;", "modifier": "private final", "type": "VehicleRepository", "declarator": "vehicleRepository", "var_name": "vehicleRepository"}, {"original_string": "private final LocationRepository locationRepository;", "modifier": "private final", "type": "LocationRepository", "declarator": "locationRepository", "var_name": "locationRepository"}, {"original_string": "private RoutingPlan bestRoutingPlan;", "modifier": "private", "type": "RoutingPlan", "declarator": "bestRoutingPlan", "var_name": "bestRoutingPlan"}], "methods": [{"identifier": "RouteListener", "parameters": "(\n            Router router,\n            RoutingPlanConsumer routingPlanConsumer,\n            VehicleRepository vehicleRepository,\n            LocationRepository locationRepository)", "modifiers": "@Autowired", "return": "", "signature": " RouteListener(\n            Router router,\n            RoutingPlanConsumer routingPlanConsumer,\n            VehicleRepository vehicleRepository,\n            LocationRepository locationRepository)", "full_signature": "@Autowired  RouteListener(\n            Router router,\n            RoutingPlanConsumer routingPlanConsumer,\n            VehicleRepository vehicleRepository,\n            LocationRepository locationRepository)", "class_method_signature": "RouteListener.RouteListener(\n            Router router,\n            RoutingPlanConsumer routingPlanConsumer,\n            VehicleRepository vehicleRepository,\n            LocationRepository locationRepository)", "testcase": false, "constructor": true}, {"identifier": "onApplicationEvent", "parameters": "(RouteChangedEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void onApplicationEvent(RouteChangedEvent event)", "full_signature": "@Override public void onApplicationEvent(RouteChangedEvent event)", "class_method_signature": "RouteListener.onApplicationEvent(RouteChangedEvent event)", "testcase": false, "constructor": false}, {"identifier": "findVehicleById", "parameters": "(long id)", "modifiers": "private", "return": "Vehicle", "signature": "Vehicle findVehicleById(long id)", "full_signature": "private Vehicle findVehicleById(long id)", "class_method_signature": "RouteListener.findVehicleById(long id)", "testcase": false, "constructor": false}, {"identifier": "findLocationById", "parameters": "(long id)", "modifiers": "private", "return": "Location", "signature": "Location findLocationById(long id)", "full_signature": "private Location findLocationById(long id)", "class_method_signature": "RouteListener.findLocationById(long id)", "testcase": false, "constructor": false}, {"identifier": "track", "parameters": "(Location depot, List<Location> route)", "modifiers": "private", "return": "List<List<Coordinates>>", "signature": "List<List<Coordinates>> track(Location depot, List<Location> route)", "full_signature": "private List<List<Coordinates>> track(Location depot, List<Location> route)", "class_method_signature": "RouteListener.track(Location depot, List<Location> route)", "testcase": false, "constructor": false}, {"identifier": "getBestRoutingPlan", "parameters": "()", "modifiers": "public", "return": "RoutingPlan", "signature": "RoutingPlan getBestRoutingPlan()", "full_signature": "public RoutingPlan getBestRoutingPlan()", "class_method_signature": "RouteListener.getBestRoutingPlan()", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/service/route/RouteListener.java"}, "focal_method": {"identifier": "onApplicationEvent", "parameters": "(RouteChangedEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onApplicationEvent(RouteChangedEvent event) {\n        // TODO persist the best solution\n        Location depot = event.depotId().flatMap(locationRepository::find).orElse(null);\n        try {\n            // TODO Introduce problem revision (every modification increases revision number, event will only\n            //  be published if revision numbers match) to avoid looking for missing/extra vehicles/visits.\n            //  This will also make it possible to get rid of the try-catch approach.\n            Map<Long, Vehicle> vehicleMap = event.vehicleIds().stream()\n                    .collect(toMap(vehicleId -> vehicleId, this::findVehicleById));\n            Map<Long, Location> visitMap = event.visitIds().stream()\n                    .collect(toMap(visitId -> visitId, this::findLocationById));\n\n            List<RouteWithTrack> routes = event.routes().stream()\n                    // list of deep locations\n                    .map(shallowRoute -> new Route(\n                            vehicleMap.get(shallowRoute.vehicleId),\n                            findLocationById(shallowRoute.depotId),\n                            shallowRoute.visitIds.stream()\n                                    .map(visitMap::get)\n                                    .collect(toList())))\n                    // add tracks\n                    .map(route -> new RouteWithTrack(route, track(route.depot(), route.visits())))\n                    .collect(toList());\n            bestRoutingPlan = new RoutingPlan(\n                    event.distance(),\n                    new ArrayList<>(vehicleMap.values()),\n                    depot,\n                    new ArrayList<>(visitMap.values()),\n                    routes);\n            routingPlanConsumer.consumePlan(bestRoutingPlan);\n        } catch (IllegalStateException e) {\n            logger.warn(\"Discarding an outdated routing plan: {}\", e.toString());\n        }\n    }", "signature": "void onApplicationEvent(RouteChangedEvent event)", "full_signature": "@Override public void onApplicationEvent(RouteChangedEvent event)", "class_method_signature": "RouteListener.onApplicationEvent(RouteChangedEvent event)", "testcase": false, "constructor": false, "invocations": ["orElse", "flatMap", "depotId", "collect", "stream", "vehicleIds", "toMap", "collect", "stream", "visitIds", "toMap", "collect", "map", "map", "stream", "routes", "get", "findLocationById", "collect", "map", "stream", "toList", "track", "depot", "visits", "toList", "distance", "values", "values", "consumePlan", "warn", "toString"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}