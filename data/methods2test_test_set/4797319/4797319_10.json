{"test_class": {"identifier": "TestSindicePreProcessing", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SindicePreProcessing pre = new SindicePreProcessing() {\n    {\n      init(\"http://purl.org/dc/elements/1.1/isPartOf\");\n    }\n  };", "modifier": "private final", "type": "SindicePreProcessing", "declarator": "pre = new SindicePreProcessing() {\n    {\n      init(\"http://purl.org/dc/elements/1.1/isPartOf\");\n    }\n  }", "var_name": "pre"}], "file": "sparqled/src/test/java/org/sindice/sparqled/sparql/preprocessing/TestSindicePreProcessing.java"}, "test_case": {"identifier": "testQueryWithFROM", "parameters": "()", "modifiers": "@Test(expected = Exception.class) public", "return": "void", "body": "@Test(expected = Exception.class)\n  public void testQueryWithFROM()\n  throws Exception {\n    String query = \"SELECT * FROM <http://sindice.com> { ?s ?p ?o }\";\n    pre.process(query);\n  }", "signature": "void testQueryWithFROM()", "full_signature": "@Test(expected = Exception.class) public void testQueryWithFROM()", "class_method_signature": "TestSindicePreProcessing.testQueryWithFROM()", "testcase": true, "constructor": false, "invocations": ["process"]}, "focal_class": {"identifier": "SindicePreProcessing", "superclass": "", "interfaces": "implements PreProcessing", "fields": [{"original_string": "private final static String PREFIX = \"GRAPH\";", "modifier": "private final static", "type": "String", "declarator": "PREFIX = \"GRAPH\"", "var_name": "PREFIX"}, {"original_string": "private final static String SUFFIX = \"END\";", "modifier": "private final static", "type": "String", "declarator": "SUFFIX = \"END\"", "var_name": "SUFFIX"}, {"original_string": "public final static ASTIRI isPartOf = new ASTIRI(SyntaxTreeBuilderTreeConstants.JJTIRI);", "modifier": "public final static", "type": "ASTIRI", "declarator": "isPartOf = new ASTIRI(SyntaxTreeBuilderTreeConstants.JJTIRI)", "var_name": "isPartOf"}], "methods": [{"identifier": "init", "parameters": "(String... args)", "modifiers": "@Override public", "return": "void", "signature": "void init(String... args)", "full_signature": "@Override public void init(String... args)", "class_method_signature": "SindicePreProcessing.init(String... args)", "testcase": false, "constructor": false}, {"identifier": "getVarPrefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getVarPrefix()", "full_signature": "@Override public String getVarPrefix()", "class_method_signature": "SindicePreProcessing.getVarPrefix()", "testcase": false, "constructor": false}, {"identifier": "getVarSuffix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getVarSuffix()", "full_signature": "@Override public String getVarSuffix()", "class_method_signature": "SindicePreProcessing.getVarSuffix()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(String query)", "modifiers": "@Override public", "return": "String", "signature": "String process(String query)", "full_signature": "@Override public String process(String query)", "class_method_signature": "SindicePreProcessing.process(String query)", "testcase": false, "constructor": false}], "file": "sparqled/src/main/java/org/sindice/sparqled/sparql/preprocessing/SindicePreProcessing.java"}, "focal_method": {"identifier": "process", "parameters": "(String query)", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String process(String query)\n  throws Exception {\n    final ASTQueryContainer ast = SyntaxTreeBuilder.parseQuery(query);\n\n    // Dataset clauses are not allowed\n    if (ast.getQuery().getDatasetClauseList().size() != 0) {\n      throw new IllegalArgumentException(\"FROM and FROM NAMED clauses are not allowed. Use GRAPH instead.\");\n    }\n    // Extract entities into their separate graph\n    // Add the triple describing the dataset\n    ASTVarGenerator.reset();\n    final AddDatasetStatement addDSst = new AddDatasetStatement();\n    addDSst.visit(ast, null);\n    // Translate query back to string\n    return AST2TextTranslator.translate(ast);\n  }", "signature": "String process(String query)", "full_signature": "@Override public String process(String query)", "class_method_signature": "SindicePreProcessing.process(String query)", "testcase": false, "constructor": false, "invocations": ["parseQuery", "size", "getDatasetClauseList", "getQuery", "reset", "visit", "translate"]}, "repository": {"repo_id": 4797319, "url": "https://github.com/sindice/sparqled", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 33, "size": 12885, "license": "licensed"}}