{"test_class": {"identifier": "ContractServiceTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "protected final ContractTxHash contractTxHash =\n      ContractTxHash.of(BytesValue.of(randomUUID().toString().getBytes()));", "modifier": "protected final", "type": "ContractTxHash", "declarator": "contractTxHash =\n      ContractTxHash.of(BytesValue.of(randomUUID().toString().getBytes()))", "var_name": "contractTxHash"}, {"original_string": "@Mock\n  protected AergoPool resourcePool;", "modifier": "@Mock\n  protected", "type": "AergoPool", "declarator": "resourcePool", "var_name": "resourcePool"}, {"original_string": "protected ContractService contractService;", "modifier": "protected", "type": "ContractService", "declarator": "contractService", "var_name": "contractService"}, {"original_string": "protected AccountWithAddress account = new AccountWithAddress(AccountAddressGen.generate());", "modifier": "protected", "type": "AccountWithAddress", "declarator": "account = new AccountWithAddress(AccountAddressGen.generate())", "var_name": "account"}, {"original_string": "protected ContractTxReceipt contractTxReceipt;", "modifier": "protected", "type": "ContractTxReceipt", "declarator": "contractTxReceipt", "var_name": "contractTxReceipt"}, {"original_string": "protected ContractInterface contractInterface;", "modifier": "protected", "type": "ContractInterface", "declarator": "contractInterface", "var_name": "contractInterface"}, {"original_string": "protected ContractFunction contractFunction;", "modifier": "protected", "type": "ContractFunction", "declarator": "contractFunction", "var_name": "contractFunction"}, {"original_string": "@Mock\n  protected AergoApi aergoApi;", "modifier": "@Mock\n  protected", "type": "AergoApi", "declarator": "aergoApi", "var_name": "aergoApi"}, {"original_string": "@Mock\n  protected KeyStoreOperation keyStoreOperation;", "modifier": "@Mock\n  protected", "type": "KeyStoreOperation", "declarator": "keyStoreOperation", "var_name": "keyStoreOperation"}, {"original_string": "@Mock\n  protected AccountOperation accountOperation;", "modifier": "@Mock\n  protected", "type": "AccountOperation", "declarator": "accountOperation", "var_name": "accountOperation"}, {"original_string": "@Mock\n  protected ContractOperation contractOperation;", "modifier": "@Mock\n  protected", "type": "ContractOperation", "declarator": "contractOperation", "var_name": "contractOperation"}], "file": "core/src/test/java/ship/build/web/service/ContractServiceTest.java"}, "test_case": {"identifier": "testTryExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTryExecute() {\n    when(contractOperation.deploy(any(Account.class), any(), anyLong(), any()))\n        .thenReturn(contractTxHash);\n    final ContractTxHash executedContractTxHash =\n        ContractTxHash.of(BytesValue.of(randomUUID().toString().getBytes()));\n    when(contractOperation.execute(any(Account.class), any(), anyLong(), any()))\n        .thenReturn(executedContractTxHash);\n    final long nonce = Math.abs(new Random().nextLong()) + 1;\n    final AccountState accountState = new AccountState(AccountAddressGen.generate(), nonce, Aer.ZERO);\n    when(accountOperation.getState(account)).thenReturn(accountState);\n\n    // When\n    final BuildDetails buildDetails = new BuildDetails();\n    buildDetails.setResult(randomUUID().toString());\n    final DeploymentResult result = contractService.deploy(buildDetails);\n    result.setContractInterface(contractInterface);\n    final ExecutionResult executionResult =\n        contractService.tryExecute(contractTxHash.toString(), contractFunction.getName());\n\n    // Then\n    assertNotNull(executionResult.getContractTransactionHash());\n    verify(contractOperation).execute(any(Account.class), any(), anyLong(), any());\n  }", "signature": "void testTryExecute()", "full_signature": "@Test public void testTryExecute()", "class_method_signature": "ContractServiceTest.testTryExecute()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "deploy", "any", "any", "anyLong", "any", "of", "of", "getBytes", "toString", "randomUUID", "thenReturn", "when", "execute", "any", "any", "anyLong", "any", "abs", "nextLong", "generate", "thenReturn", "when", "getState", "setResult", "toString", "randomUUID", "deploy", "setContractInterface", "tryExecute", "toString", "getName", "assertNotNull", "getContractTransactionHash", "execute", "verify", "any", "any", "anyLong", "any"]}, "focal_class": {"identifier": "ContractService", "superclass": "extends AbstractService", "interfaces": "implements DeployComponent, ExecuteComponent, QueryComponent", "fields": [{"original_string": "protected static final String NL_0 = ContractService.class.getName() + \".0\";", "modifier": "protected static final", "type": "String", "declarator": "NL_0 = ContractService.class.getName() + \".0\"", "var_name": "NL_0"}, {"original_string": "@Getter\n  @Setter\n  @Value(\"${project.endpoint}\")\n  protected String endpoint;", "modifier": "@Getter\n  @Setter\n  @Value(\"${project.endpoint}\")\n  protected", "type": "String", "declarator": "endpoint", "var_name": "endpoint"}, {"original_string": "@Getter\n  @Setter\n  @Value(\"${project.privatekey:}\")\n  protected String encodedEncryptedPrivateKey;", "modifier": "@Getter\n  @Setter\n  @Value(\"${project.privatekey:}\")\n  protected", "type": "String", "declarator": "encodedEncryptedPrivateKey", "var_name": "encodedEncryptedPrivateKey"}, {"original_string": "@Getter\n  @Setter\n  @Value(\"${project.password:}\")\n  protected String password;", "modifier": "@Getter\n  @Setter\n  @Value(\"${project.password:}\")\n  protected", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "protected Account account;", "modifier": "protected", "type": "Account", "declarator": "account", "var_name": "account"}, {"original_string": "@Getter\n  protected Fee fee = new Fee(Aer.GIGA_ONE, -1);", "modifier": "@Getter\n  protected", "type": "Fee", "declarator": "fee = new Fee(Aer.GIGA_ONE, -1)", "var_name": "fee"}, {"original_string": "protected final LuaCompiler luaCompiler = new LuaCompiler();", "modifier": "protected final", "type": "LuaCompiler", "declarator": "luaCompiler = new LuaCompiler()", "var_name": "luaCompiler"}, {"original_string": "protected final List<DeploymentResult> deployHistory = new ArrayList<>();", "modifier": "protected final", "type": "List<DeploymentResult>", "declarator": "deployHistory = new ArrayList<>()", "var_name": "deployHistory"}, {"original_string": "protected final Map<String, DeploymentResult> encodedContractTxHash2contractAddresses =\n      new HashMap<>();", "modifier": "protected final", "type": "Map<String, DeploymentResult>", "declarator": "encodedContractTxHash2contractAddresses =\n      new HashMap<>()", "var_name": "encodedContractTxHash2contractAddresses"}, {"original_string": "@Setter\n  @Getter\n  protected AergoPool aergoPool;", "modifier": "@Setter\n  @Getter\n  protected", "type": "AergoPool", "declarator": "aergoPool", "var_name": "aergoPool"}], "methods": [{"identifier": "logger", "parameters": "()", "modifiers": "@Override public", "return": "Logger", "signature": "Logger logger()", "full_signature": "@Override public Logger logger()", "class_method_signature": "ContractService.logger()", "testcase": false, "constructor": false}, {"identifier": "ensureAccount", "parameters": "()", "modifiers": "protected synchronized", "return": "void", "signature": "void ensureAccount()", "full_signature": "protected synchronized void ensureAccount()", "class_method_signature": "ContractService.ensureAccount()", "testcase": false, "constructor": false}, {"identifier": "deploy", "parameters": "(final BuildDetails buildDetails)", "modifiers": "public", "return": "DeploymentResult", "signature": "DeploymentResult deploy(final BuildDetails buildDetails)", "full_signature": "public DeploymentResult deploy(final BuildDetails buildDetails)", "class_method_signature": "ContractService.deploy(final BuildDetails buildDetails)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(\n      final String encodedContractTxHash, final String functionName)", "modifiers": "protected", "return": "Pair<ContractTxHash, ContractFunction>", "signature": "Pair<ContractTxHash, ContractFunction> find(\n      final String encodedContractTxHash, final String functionName)", "full_signature": "protected Pair<ContractTxHash, ContractFunction> find(\n      final String encodedContractTxHash, final String functionName)", "class_method_signature": "ContractService.find(\n      final String encodedContractTxHash, final String functionName)", "testcase": false, "constructor": false}, {"identifier": "tryExecute", "parameters": "(final String encodedContractTxHash, final String functionName,\n      final String... args)", "modifiers": "public", "return": "ExecutionResult", "signature": "ExecutionResult tryExecute(final String encodedContractTxHash, final String functionName,\n      final String... args)", "full_signature": "public ExecutionResult tryExecute(final String encodedContractTxHash, final String functionName,\n      final String... args)", "class_method_signature": "ContractService.tryExecute(final String encodedContractTxHash, final String functionName,\n      final String... args)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(\n      final ContractTxHash contractTxHash,\n      final ContractFunction contractFunction,\n      final String... args)", "modifiers": "protected", "return": "ExecutionResult", "signature": "ExecutionResult execute(\n      final ContractTxHash contractTxHash,\n      final ContractFunction contractFunction,\n      final String... args)", "full_signature": "protected ExecutionResult execute(\n      final ContractTxHash contractTxHash,\n      final ContractFunction contractFunction,\n      final String... args)", "class_method_signature": "ContractService.execute(\n      final ContractTxHash contractTxHash,\n      final ContractFunction contractFunction,\n      final String... args)", "testcase": false, "constructor": false}, {"identifier": "tryQuery", "parameters": "(final String encodedContractTxHash, final String functionName,\n      final String... args)", "modifiers": "public", "return": "QueryResult", "signature": "QueryResult tryQuery(final String encodedContractTxHash, final String functionName,\n      final String... args)", "full_signature": "public QueryResult tryQuery(final String encodedContractTxHash, final String functionName,\n      final String... args)", "class_method_signature": "ContractService.tryQuery(final String encodedContractTxHash, final String functionName,\n      final String... args)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(\n      final ContractTxHash contractTxHash,\n      final ContractFunction contractFunction,\n      final String... args)", "modifiers": "protected", "return": "QueryResult", "signature": "QueryResult query(\n      final ContractTxHash contractTxHash,\n      final ContractFunction contractFunction,\n      final String... args)", "full_signature": "protected QueryResult query(\n      final ContractTxHash contractTxHash,\n      final ContractFunction contractFunction,\n      final String... args)", "class_method_signature": "ContractService.query(\n      final ContractTxHash contractTxHash,\n      final ContractFunction contractFunction,\n      final String... args)", "testcase": false, "constructor": false}, {"identifier": "getLatestContractInformation", "parameters": "()", "modifiers": "public", "return": "DeploymentResult", "signature": "DeploymentResult getLatestContractInformation()", "full_signature": "public DeploymentResult getLatestContractInformation()", "class_method_signature": "ContractService.getLatestContractInformation()", "testcase": false, "constructor": false}, {"identifier": "getInterface", "parameters": "(final ContractTxHash contractTxHash)", "modifiers": "public", "return": "ContractInterface", "signature": "ContractInterface getInterface(final ContractTxHash contractTxHash)", "full_signature": "public ContractInterface getInterface(final ContractTxHash contractTxHash)", "class_method_signature": "ContractService.getInterface(final ContractTxHash contractTxHash)", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/build/web/service/ContractService.java"}, "focal_method": {"identifier": "tryExecute", "parameters": "(final String encodedContractTxHash, final String functionName,\n      final String... args)", "modifiers": "public", "return": "ExecutionResult", "body": "public ExecutionResult tryExecute(final String encodedContractTxHash, final String functionName,\n      final String... args) {\n    logger.trace(\"Encoded tx hash: {}\", encodedContractTxHash);\n    final Pair<ContractTxHash, ContractFunction> pair = find(encodedContractTxHash, functionName);\n    return execute(pair.v1, pair.v2, args);\n  }", "signature": "ExecutionResult tryExecute(final String encodedContractTxHash, final String functionName,\n      final String... args)", "full_signature": "public ExecutionResult tryExecute(final String encodedContractTxHash, final String functionName,\n      final String... args)", "class_method_signature": "ContractService.tryExecute(final String encodedContractTxHash, final String functionName,\n      final String... args)", "testcase": false, "constructor": false, "invocations": ["trace", "find", "execute"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}