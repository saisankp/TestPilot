{"test_class": {"identifier": "MoSSOutputReaderTest", "superclass": "extends SimpleChemObjectReaderTest", "interfaces": "", "fields": [], "file": "storage/smiles/src/test/java/org/openscience/cdk/io/MoSSOutputReaderTest.java"}, "test_case": {"identifier": "testAccepts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAccepts() {\n        MoSSOutputReader reader = new MoSSOutputReader();\n        Assert.assertTrue(reader.accepts(AtomContainerSet.class));\n    }", "signature": "void testAccepts()", "full_signature": "@Test public void testAccepts()", "class_method_signature": "MoSSOutputReaderTest.testAccepts()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "accepts"]}, "focal_class": {"identifier": "MoSSOutputReader", "superclass": "extends DefaultChemObjectReader", "interfaces": "", "fields": [{"original_string": "private BufferedReader      input;", "modifier": "private", "type": "BufferedReader", "declarator": "input", "var_name": "input"}, {"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(MoSSOutputReader.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(MoSSOutputReader.class)", "var_name": "logger"}], "methods": [{"identifier": "MoSSOutputReader", "parameters": "(Reader input)", "modifiers": "public", "return": "", "signature": " MoSSOutputReader(Reader input)", "full_signature": "public  MoSSOutputReader(Reader input)", "class_method_signature": "MoSSOutputReader.MoSSOutputReader(Reader input)", "testcase": false, "constructor": true}, {"identifier": "MoSSOutputReader", "parameters": "(InputStream input)", "modifiers": "public", "return": "", "signature": " MoSSOutputReader(InputStream input)", "full_signature": "public  MoSSOutputReader(InputStream input)", "class_method_signature": "MoSSOutputReader.MoSSOutputReader(InputStream input)", "testcase": false, "constructor": true}, {"identifier": "MoSSOutputReader", "parameters": "()", "modifiers": "public", "return": "", "signature": " MoSSOutputReader()", "full_signature": "public  MoSSOutputReader()", "class_method_signature": "MoSSOutputReader.MoSSOutputReader()", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "IResourceFormat", "signature": "IResourceFormat getFormat()", "full_signature": "@Override public IResourceFormat getFormat()", "class_method_signature": "MoSSOutputReader.getFormat()", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(Reader reader)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(Reader reader)", "full_signature": "@Override public void setReader(Reader reader)", "class_method_signature": "MoSSOutputReader.setReader(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(InputStream input)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(InputStream input)", "full_signature": "@Override public void setReader(InputStream input)", "class_method_signature": "MoSSOutputReader.setReader(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> testClass)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accepts(Class<? extends IChemObject> testClass)", "full_signature": "@Override public boolean accepts(Class<? extends IChemObject> testClass)", "class_method_signature": "MoSSOutputReader.accepts(Class<? extends IChemObject> testClass)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(T object)", "modifiers": "@Override public", "return": "T", "signature": "T read(T object)", "full_signature": "@Override public T read(T object)", "class_method_signature": "MoSSOutputReader.read(T object)", "testcase": false, "constructor": false}, {"identifier": "readAtomContainerSet", "parameters": "(IAtomContainerSet molSet)", "modifiers": "private", "return": "IAtomContainerSet", "signature": "IAtomContainerSet readAtomContainerSet(IAtomContainerSet molSet)", "full_signature": "private IAtomContainerSet readAtomContainerSet(IAtomContainerSet molSet)", "class_method_signature": "MoSSOutputReader.readAtomContainerSet(IAtomContainerSet molSet)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "MoSSOutputReader.close()", "testcase": false, "constructor": false}], "file": "storage/smiles/src/main/java/org/openscience/cdk/io/MoSSOutputReader.java"}, "focal_method": {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> testClass)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean accepts(Class<? extends IChemObject> testClass) {\n        if (IAtomContainerSet.class.equals(testClass)) return true;\n        if (IChemFile.class.equals(testClass)) return true;\n        Class<?>[] interfaces = testClass.getInterfaces();\n        for (int i = 0; i < interfaces.length; i++) {\n            if (IAtomContainerSet.class.equals(interfaces[i])) return true;\n            if (IChemFile.class.equals(interfaces[i])) return true;\n        }\n        Class superClass = testClass.getSuperclass();\n        if (superClass != null) return this.accepts(superClass);\n        return false;\n    }", "signature": "boolean accepts(Class<? extends IChemObject> testClass)", "full_signature": "@Override public boolean accepts(Class<? extends IChemObject> testClass)", "class_method_signature": "MoSSOutputReader.accepts(Class<? extends IChemObject> testClass)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "getInterfaces", "equals", "equals", "getSuperclass", "accepts"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}