{"test_class": {"identifier": "MessageCrackerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int messageCracked;", "modifier": "private", "type": "int", "declarator": "messageCracked", "var_name": "messageCracked"}, {"original_string": "private Session mockSession;", "modifier": "private", "type": "Session", "declarator": "mockSession", "var_name": "mockSession"}], "file": "quickfixj-core/src/test/java/quickfix/MessageCrackerTest.java"}, "test_case": {"identifier": "testFixtMessageCrackingWithSessionDefaultApplVerID", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFixtMessageCrackingWithSessionDefaultApplVerID() throws Exception {\n        quickfix.fix44.Email message = createFix44Email();\n        stub(mockSession.getTargetDefaultApplicationVersionID()).toReturn(\n                new ApplVerID(ApplVerID.FIX44));\n\n        MessageCracker cracker = new MessageCracker() {\n            @SuppressWarnings(\"unused\")\n            public void onMessage(quickfix.fix44.Email email, SessionID sessionID) {\n                messageCracked++;\n            }\n        };\n\n        cracker.crack(message, new SessionID(FixVersions.BEGINSTRING_FIXT11, \"SENDER\", \"TARGET\"));\n\n        assertTrue(messageCracked > 0);\n    }", "signature": "void testFixtMessageCrackingWithSessionDefaultApplVerID()", "full_signature": "@Test public void testFixtMessageCrackingWithSessionDefaultApplVerID()", "class_method_signature": "MessageCrackerTest.testFixtMessageCrackingWithSessionDefaultApplVerID()", "testcase": true, "constructor": false, "invocations": ["createFix44Email", "toReturn", "stub", "getTargetDefaultApplicationVersionID", "crack", "assertTrue"]}, "focal_class": {"identifier": "MessageCracker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<Class<?>, Invoker> invokers = new HashMap<>();", "modifier": "private final", "type": "Map<Class<?>, Invoker>", "declarator": "invokers = new HashMap<>()", "var_name": "invokers"}], "methods": [{"identifier": "MessageCracker", "parameters": "()", "modifiers": "protected", "return": "", "signature": " MessageCracker()", "full_signature": "protected  MessageCracker()", "class_method_signature": "MessageCracker.MessageCracker()", "testcase": false, "constructor": true}, {"identifier": "MessageCracker", "parameters": "(Object messageHandler)", "modifiers": "public", "return": "", "signature": " MessageCracker(Object messageHandler)", "full_signature": "public  MessageCracker(Object messageHandler)", "class_method_signature": "MessageCracker.MessageCracker(Object messageHandler)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "(Object messageHandler)", "modifiers": "public", "return": "void", "signature": "void initialize(Object messageHandler)", "full_signature": "public void initialize(Object messageHandler)", "class_method_signature": "MessageCracker.initialize(Object messageHandler)", "testcase": false, "constructor": false}, {"identifier": "isHandlerMethod", "parameters": "(Method method)", "modifiers": "private", "return": "boolean", "signature": "boolean isHandlerMethod(Method method)", "full_signature": "private boolean isHandlerMethod(Method method)", "class_method_signature": "MessageCracker.isHandlerMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "matchesConventionOrAnnotation", "parameters": "(Method method)", "modifiers": "private", "return": "boolean", "signature": "boolean matchesConventionOrAnnotation(Method method)", "full_signature": "private boolean matchesConventionOrAnnotation(Method method)", "class_method_signature": "MessageCracker.matchesConventionOrAnnotation(Method method)", "testcase": false, "constructor": false}, {"identifier": "crack", "parameters": "(quickfix.Message message, SessionID sessionID)", "modifiers": "public", "return": "void", "signature": "void crack(quickfix.Message message, SessionID sessionID)", "full_signature": "public void crack(quickfix.Message message, SessionID sessionID)", "class_method_signature": "MessageCracker.crack(quickfix.Message message, SessionID sessionID)", "testcase": false, "constructor": false}, {"identifier": "propagate", "parameters": "(Throwable e)", "modifiers": "private", "return": "void", "signature": "void propagate(Throwable e)", "full_signature": "private void propagate(Throwable e)", "class_method_signature": "MessageCracker.propagate(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "onMessage", "parameters": "(quickfix.Message message, SessionID sessionID)", "modifiers": "protected", "return": "void", "signature": "void onMessage(quickfix.Message message, SessionID sessionID)", "full_signature": "protected void onMessage(quickfix.Message message, SessionID sessionID)", "class_method_signature": "MessageCracker.onMessage(quickfix.Message message, SessionID sessionID)", "testcase": false, "constructor": false}], "file": "quickfixj-core/src/main/java/quickfix/MessageCracker.java"}, "focal_method": {"identifier": "crack", "parameters": "(quickfix.Message message, SessionID sessionID)", "modifiers": "public", "return": "void", "body": "public void crack(quickfix.Message message, SessionID sessionID) throws UnsupportedMessageType,\n            FieldNotFound, IncorrectTagValue {\n        Invoker invoker = invokers.get(message.getClass());\n        if (invoker != null) {\n            try {\n                invoker.Invoke(message, sessionID);\n            } catch (InvocationTargetException ite) {\n                try {\n                    throw ite.getTargetException();\n                } catch (UnsupportedMessageType | IncorrectTagValue | FieldNotFound e) {\n                    throw e;\n                } catch (Throwable t) {\n                    propagate(t);\n                }\n            } catch (Exception e) {\n                propagate(e);\n            }\n        } else {\n            onMessage(message, sessionID);\n        }\n    }", "signature": "void crack(quickfix.Message message, SessionID sessionID)", "full_signature": "public void crack(quickfix.Message message, SessionID sessionID)", "class_method_signature": "MessageCracker.crack(quickfix.Message message, SessionID sessionID)", "testcase": false, "constructor": false, "invocations": ["get", "getClass", "Invoke", "getTargetException", "propagate", "propagate", "onMessage"]}, "repository": {"repo_id": 19937094, "url": "https://github.com/quickfix-j/quickfixj", "stars": 538, "created": "5/19/2014 10:04:08 AM +00:00", "updates": "2020-01-26T01:21:15+00:00", "fork": "False", "license": "licensed"}}