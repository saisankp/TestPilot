{"test_class": {"identifier": "FileBasedUserRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Path usersPath;", "modifier": "private", "type": "Path", "declarator": "usersPath", "var_name": "usersPath"}, {"original_string": "private Path credentialsPath;", "modifier": "private", "type": "Path", "declarator": "credentialsPath", "var_name": "credentialsPath"}, {"original_string": "private StdUser admin = new StdUser(\"admin\", ImmutableSet.<String>of(\"restx-admin\"));", "modifier": "private", "type": "StdUser", "declarator": "admin = new StdUser(\"admin\", ImmutableSet.<String>of(\"restx-admin\"))", "var_name": "admin"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper().registerModule(new GuavaModule());", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper().registerModule(new GuavaModule())", "var_name": "mapper"}], "file": "restx-security-basic/src/test/java/restx/security/FileBasedUserRepositoryTest.java"}, "test_case": {"identifier": "should_not_reload_users", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_not_reload_users() throws Exception {\n        FileBasedUserRepository<StdUser> repo = newRepo(false);\n        Files.copy(getClass().getResourceAsStream(\"users.json\"), usersPath, StandardCopyOption.REPLACE_EXISTING);\n\n        checkUser(repo.findUserByName(\"john\"), \"john\", \"role1\");\n        assertThat(repo.findUserByName(\"jane\").isPresent()).isFalse();\n\n        Thread.sleep(1000); // sleep enough to make sure timestamp changes\n        Files.copy(getClass().getResourceAsStream(\"users2.json\"), usersPath, StandardCopyOption.REPLACE_EXISTING);\n\n        checkUser(repo.findUserByName(\"john\"), \"john\", \"role1\");\n        assertThat(repo.findUserByName(\"jane\").isPresent()).isFalse();\n    }", "signature": "void should_not_reload_users()", "full_signature": "@Test public void should_not_reload_users()", "class_method_signature": "FileBasedUserRepositoryTest.should_not_reload_users()", "testcase": true, "constructor": false, "invocations": ["newRepo", "copy", "getResourceAsStream", "getClass", "checkUser", "findUserByName", "isFalse", "assertThat", "isPresent", "findUserByName", "sleep", "copy", "getResourceAsStream", "getClass", "checkUser", "findUserByName", "isFalse", "assertThat", "isPresent", "findUserByName"]}, "focal_class": {"identifier": "FileBasedUserRepository", "superclass": "", "interfaces": "implements UserRepository<U>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(FileBasedUserRepository.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FileBasedUserRepository.class)", "var_name": "logger"}, {"original_string": "private final Class<U> userClass;", "modifier": "private final", "type": "Class<U>", "declarator": "userClass", "var_name": "userClass"}, {"original_string": "private final U defaultAdmin;", "modifier": "private final", "type": "U", "declarator": "defaultAdmin", "var_name": "defaultAdmin"}, {"original_string": "private final CachedData<String> credentials;", "modifier": "private final", "type": "CachedData<String>", "declarator": "credentials", "var_name": "credentials"}, {"original_string": "private final CachedData<U> users;", "modifier": "private final", "type": "CachedData<U>", "declarator": "users", "var_name": "users"}], "methods": [{"identifier": "FileBasedUserRepository", "parameters": "(Class<U> userClass, ObjectMapper mapper, U defaultAdmin,\n                                   Path usersPath, Path credentialsPath, boolean reloadOnChange)", "modifiers": "public", "return": "", "signature": " FileBasedUserRepository(Class<U> userClass, ObjectMapper mapper, U defaultAdmin,\n                                   Path usersPath, Path credentialsPath, boolean reloadOnChange)", "full_signature": "public  FileBasedUserRepository(Class<U> userClass, ObjectMapper mapper, U defaultAdmin,\n                                   Path usersPath, Path credentialsPath, boolean reloadOnChange)", "class_method_signature": "FileBasedUserRepository.FileBasedUserRepository(Class<U> userClass, ObjectMapper mapper, U defaultAdmin,\n                                   Path usersPath, Path credentialsPath, boolean reloadOnChange)", "testcase": false, "constructor": true}, {"identifier": "findUserByName", "parameters": "(String name)", "modifiers": "@Override public", "return": "Optional<U>", "signature": "Optional<U> findUserByName(String name)", "full_signature": "@Override public Optional<U> findUserByName(String name)", "class_method_signature": "FileBasedUserRepository.findUserByName(String name)", "testcase": false, "constructor": false}, {"identifier": "findCredentialByUserName", "parameters": "(String userName)", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> findCredentialByUserName(String userName)", "full_signature": "@Override public Optional<String> findCredentialByUserName(String userName)", "class_method_signature": "FileBasedUserRepository.findCredentialByUserName(String userName)", "testcase": false, "constructor": false}, {"identifier": "isAdminDefined", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAdminDefined()", "full_signature": "@Override public boolean isAdminDefined()", "class_method_signature": "FileBasedUserRepository.isAdminDefined()", "testcase": false, "constructor": false}, {"identifier": "defaultAdmin", "parameters": "()", "modifiers": "@Override public", "return": "U", "signature": "U defaultAdmin()", "full_signature": "@Override public U defaultAdmin()", "class_method_signature": "FileBasedUserRepository.defaultAdmin()", "testcase": false, "constructor": false}], "file": "restx-security-basic/src/main/java/restx/security/FileBasedUserRepository.java"}, "focal_method": {"identifier": "findUserByName", "parameters": "(String name)", "modifiers": "@Override public", "return": "Optional<U>", "body": "@Override\n    public Optional<U> findUserByName(String name) {\n        return users.get(name);\n    }", "signature": "Optional<U> findUserByName(String name)", "full_signature": "@Override public Optional<U> findUserByName(String name)", "class_method_signature": "FileBasedUserRepository.findUserByName(String name)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 9836833, "url": "https://github.com/restx/restx", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 433, "size": 7896, "license": "licensed"}}