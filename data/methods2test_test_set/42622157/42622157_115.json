{"test_class": {"identifier": "MinExternalConnectionsTest", "superclass": "extends TestWithGitBackedRepository", "interfaces": "", "fields": [{"original_string": "private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(MinExternalConnectionsTest.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "LOGGER = LoggerFactory.getLogger(MinExternalConnectionsTest.class)", "var_name": "LOGGER"}], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/targetallocation/criteria/minexternalconnections/MinExternalConnectionsTest.java"}, "test_case": {"identifier": "filter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void filter() throws Exception {\n        ServiceTemplateId id = new ServiceTemplateId(\"http://www.winery.opentosca.org/test/targetallocation/servicetemplates\",\n            \"MinExternalConnectionsTest1\", false);\n        TTopologyTemplate twoExternal = repository.getElement(id).getTopologyTemplate();\n        ModelUtilities.setTargetLabel(twoExternal.getNodeTemplate(\"shetland_pony_2\"), \"PastureProvider\");\n        ModelUtilities.setTargetLabel(twoExternal.getNodeTemplate(\"shetland_pony_3\"), \"PastureProvider\");\n        TTopologyTemplate oneExternal = AllocationUtils.deepcopy(twoExternal);\n\n        ModelUtilities.setTargetLabel(oneExternal.getNodeTemplate(\"shetland_pony_2\"), \"FieldProvider\");\n        ModelUtilities.setTargetLabel(oneExternal.getNodeTemplate(\"shetland_pony_3\"), \"FieldProvider\");\n\n        List<TopologyWrapper> topologies = new ArrayList<>();\n        topologies.add(new TopologyWrapper(twoExternal));\n        topologies.add(new TopologyWrapper(oneExternal));\n        Criteria minExternalConnections = new MinExternalConnections(null, Integer.MAX_VALUE);\n        List<TopologyWrapper> filtered = minExternalConnections.filter(topologies);\n\n        assertEquals(1, filtered.size());\n        TTopologyTemplate result = filtered.get(0).getTopology();\n        assertEquals(\"PastureProvider\".toLowerCase(), ModelUtilities.getTargetLabel(result.getNodeTemplate(\"shetland_pony\")).get());\n        assertEquals(\"FieldProvider\".toLowerCase(), ModelUtilities.getTargetLabel(result.getNodeTemplate(\"shetland_pony_2\")).get());\n        assertEquals(\"FieldProvider\".toLowerCase(), ModelUtilities.getTargetLabel(result.getNodeTemplate(\"shetland_pony_3\")).get());\n        assertEquals(\"FieldProvider\".toLowerCase(), ModelUtilities.getTargetLabel(result.getNodeTemplate(\"shetland_pony_4\")).get());\n    }", "signature": "void filter()", "full_signature": "@Test public void filter()", "class_method_signature": "MinExternalConnectionsTest.filter()", "testcase": true, "constructor": false, "invocations": ["getTopologyTemplate", "getElement", "setTargetLabel", "getNodeTemplate", "setTargetLabel", "getNodeTemplate", "deepcopy", "setTargetLabel", "getNodeTemplate", "setTargetLabel", "getNodeTemplate", "add", "add", "filter", "assertEquals", "size", "getTopology", "get", "assertEquals", "toLowerCase", "get", "getTargetLabel", "getNodeTemplate", "assertEquals", "toLowerCase", "get", "getTargetLabel", "getNodeTemplate", "assertEquals", "toLowerCase", "get", "getTargetLabel", "getNodeTemplate", "assertEquals", "toLowerCase", "get", "getTargetLabel", "getNodeTemplate"]}, "focal_class": {"identifier": "MinExternalConnections", "superclass": "extends CriteriaCached", "interfaces": "", "fields": [], "methods": [{"identifier": "MinExternalConnections", "parameters": "(JsonNode params, int outputCap)", "modifiers": "public", "return": "", "signature": " MinExternalConnections(JsonNode params, int outputCap)", "full_signature": "public  MinExternalConnections(JsonNode params, int outputCap)", "class_method_signature": "MinExternalConnections.MinExternalConnections(JsonNode params, int outputCap)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(List<TopologyWrapper> topologies)", "modifiers": "@Override public", "return": "List<TopologyWrapper>", "signature": "List<TopologyWrapper> filter(List<TopologyWrapper> topologies)", "full_signature": "@Override public List<TopologyWrapper> filter(List<TopologyWrapper> topologies)", "class_method_signature": "MinExternalConnections.filter(List<TopologyWrapper> topologies)", "testcase": false, "constructor": false}, {"identifier": "generateTargetLabelTopologies", "parameters": "(TopologyWrapper topology)", "modifiers": "@Override public", "return": "List<TopologyWrapper>", "signature": "List<TopologyWrapper> generateTargetLabelTopologies(TopologyWrapper topology)", "full_signature": "@Override public List<TopologyWrapper> generateTargetLabelTopologies(TopologyWrapper topology)", "class_method_signature": "MinExternalConnections.generateTargetLabelTopologies(TopologyWrapper topology)", "testcase": false, "constructor": false}, {"identifier": "getPossibleMatches", "parameters": "(TopologyWrapper topology)", "modifiers": "@Override protected", "return": "List<List<PermutationHelper>>", "signature": "List<List<PermutationHelper>> getPossibleMatches(TopologyWrapper topology)", "full_signature": "@Override protected List<List<PermutationHelper>> getPossibleMatches(TopologyWrapper topology)", "class_method_signature": "MinExternalConnections.getPossibleMatches(TopologyWrapper topology)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/targetallocation/criteria/minexternalconnections/MinExternalConnections.java"}, "focal_method": {"identifier": "filter", "parameters": "(List<TopologyWrapper> topologies)", "modifiers": "@Override public", "return": "List<TopologyWrapper>", "body": "@Override\n    public List<TopologyWrapper> filter(List<TopologyWrapper> topologies) {\n        List<TopologyWrapper> minExternalRTs = new ArrayList<>();\n        int minExternalRTsCount = Integer.MAX_VALUE;\n\n        for (TopologyWrapper topology : topologies) {\n            int externalRTsCount = 0;\n\n            for (TRelationshipTemplate relationshipTemplate : topology.getConnectsTos(topology.getRelationshipTemplates())) {\n                TNodeTemplate source = topology.getSourceNT(relationshipTemplate);\n                TNodeTemplate target = topology.getTargetNT(relationshipTemplate);\n                // only consider connectsTos between top level nts\n                if (!topology.isTopLevelNT(source) || !topology.isTopLevelNT(target)) {\n                    continue;\n                }\n\n                // external edge?\n                String sourceTargetLabel = ModelUtilities.getTargetLabel(source).get();\n                String targetTargetLabel = ModelUtilities.getTargetLabel(target).get();\n                if (!sourceTargetLabel.equals(targetTargetLabel)) {\n                    externalRTsCount++;\n                }\n            }\n            if (externalRTsCount < minExternalRTsCount) {\n                minExternalRTs.clear();\n                minExternalRTs.add(topology);\n                minExternalRTsCount = externalRTsCount;\n            } else if (externalRTsCount == minExternalRTsCount) {\n                minExternalRTs.add(topology);\n            }\n        }\n        return minExternalRTs;\n    }", "signature": "List<TopologyWrapper> filter(List<TopologyWrapper> topologies)", "full_signature": "@Override public List<TopologyWrapper> filter(List<TopologyWrapper> topologies)", "class_method_signature": "MinExternalConnections.filter(List<TopologyWrapper> topologies)", "testcase": false, "constructor": false, "invocations": ["getConnectsTos", "getRelationshipTemplates", "getSourceNT", "getTargetNT", "isTopLevelNT", "isTopLevelNT", "get", "getTargetLabel", "get", "getTargetLabel", "equals", "clear", "add", "add"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}