{"test_class": {"identifier": "QuietPeriodListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "AssertableExceptionHandler assertableExceptionHandler;", "modifier": "", "type": "AssertableExceptionHandler", "declarator": "assertableExceptionHandler", "var_name": "assertableExceptionHandler"}, {"original_string": "volatile boolean notified;", "modifier": "volatile", "type": "boolean", "declarator": "notified", "var_name": "notified"}], "file": "ch.vorburger.hotea/src/test/java/ch/vorburger/hotea/watchdir/QuietPeriodListenerTest.java"}, "test_case": {"identifier": "testQuietPeriodListener", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testQuietPeriodListener() throws Throwable {\n\t\tassertableExceptionHandler = new AssertableExceptionHandler();\n\t\tListener originalListener = (path, changeKind) -> {\n\t\t\tassertFalse(notified); // We want this to only be called once\n\t\t\tnotified = true;\n\t\t};\n\n\t\tListener quietListener = new QuietPeriodListener(100, originalListener, assertableExceptionHandler);\n\t\t\n\t\tnotified = false;\n\t\tquietListener.onChange(null, null);\n\t\tassertableExceptionHandler.assertNoErrorInTheBackgroundThread();\n\t\tawait().atMost(1, SECONDS).until(() -> notified, is(true));\n\t\tassertableExceptionHandler.assertNoErrorInTheBackgroundThread();\n\t\t\n\t\tnotified = false;\n\t\tquietListener.onChange(null, null);\n\t\tquietListener.onChange(null, null);\n\t\tassertableExceptionHandler.assertNoErrorInTheBackgroundThread();\n\t\tawait().atMost(1, SECONDS).until(() -> notified, is(true));\n\t\tassertableExceptionHandler.assertNoErrorInTheBackgroundThread();\n\n\t\t\n\t\tnotified = false;\n\t\tquietListener.onChange(null, null);\n\t\tassertableExceptionHandler.assertNoErrorInTheBackgroundThread();\n\t\tawait().atMost(1, SECONDS).until(() -> notified, is(true));\n\t\tassertableExceptionHandler.assertNoErrorInTheBackgroundThread();\n\n\t\tThread.sleep(500);\n\t\t\n\t\tnotified = false;\n\t\tquietListener.onChange(null, null);\n\t\tassertableExceptionHandler.assertNoErrorInTheBackgroundThread();\n\t\tawait().atMost(1, SECONDS).until(() -> notified, is(true));\n\t\tassertableExceptionHandler.assertNoErrorInTheBackgroundThread();\n\t}", "signature": "void testQuietPeriodListener()", "full_signature": "@Test public void testQuietPeriodListener()", "class_method_signature": "QuietPeriodListenerTest.testQuietPeriodListener()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "onChange", "assertNoErrorInTheBackgroundThread", "until", "atMost", "await", "is", "assertNoErrorInTheBackgroundThread", "onChange", "onChange", "assertNoErrorInTheBackgroundThread", "until", "atMost", "await", "is", "assertNoErrorInTheBackgroundThread", "onChange", "assertNoErrorInTheBackgroundThread", "until", "atMost", "await", "is", "assertNoErrorInTheBackgroundThread", "sleep", "onChange", "assertNoErrorInTheBackgroundThread", "until", "atMost", "await", "is", "assertNoErrorInTheBackgroundThread"]}, "focal_class": {"identifier": "QuietPeriodListener", "superclass": "", "interfaces": "implements Listener", "fields": [{"original_string": "protected final Listener delegate;", "modifier": "protected final", "type": "Listener", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private final ExceptionHandler exceptionHandler;", "modifier": "private final", "type": "ExceptionHandler", "declarator": "exceptionHandler", "var_name": "exceptionHandler"}, {"original_string": "protected final long quietPeriodInMS;", "modifier": "protected final", "type": "long", "declarator": "quietPeriodInMS", "var_name": "quietPeriodInMS"}, {"original_string": "protected Thread thread;", "modifier": "protected", "type": "Thread", "declarator": "thread", "var_name": "thread"}, {"original_string": "protected volatile boolean sleepAgain;", "modifier": "protected volatile", "type": "boolean", "declarator": "sleepAgain", "var_name": "sleepAgain"}], "methods": [{"identifier": "QuietPeriodListener", "parameters": "(long quietPeriodInMS, Listener listenerToWrap, ExceptionHandler exceptionHandler)", "modifiers": "protected", "return": "", "signature": " QuietPeriodListener(long quietPeriodInMS, Listener listenerToWrap, ExceptionHandler exceptionHandler)", "full_signature": "protected  QuietPeriodListener(long quietPeriodInMS, Listener listenerToWrap, ExceptionHandler exceptionHandler)", "class_method_signature": "QuietPeriodListener.QuietPeriodListener(long quietPeriodInMS, Listener listenerToWrap, ExceptionHandler exceptionHandler)", "testcase": false, "constructor": true}, {"identifier": "onChange", "parameters": "(Path path, ChangeKind changeKind)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void onChange(Path path, ChangeKind changeKind)", "full_signature": "@Override public synchronized void onChange(Path path, ChangeKind changeKind)", "class_method_signature": "QuietPeriodListener.onChange(Path path, ChangeKind changeKind)", "testcase": false, "constructor": false}], "file": "ch.vorburger.hotea/src/main/java/ch/vorburger/hotea/watchdir/QuietPeriodListener.java"}, "focal_method": {"identifier": "QuietPeriodListener", "parameters": "(long quietPeriodInMS, Listener listenerToWrap, ExceptionHandler exceptionHandler)", "modifiers": "protected", "return": "", "body": "protected QuietPeriodListener(long quietPeriodInMS, Listener listenerToWrap, ExceptionHandler exceptionHandler) {\n\t\tthis.quietPeriodInMS = quietPeriodInMS;\n\t\tthis.delegate = listenerToWrap;\n\t\tthis.exceptionHandler = exceptionHandler;\n\t}", "signature": " QuietPeriodListener(long quietPeriodInMS, Listener listenerToWrap, ExceptionHandler exceptionHandler)", "full_signature": "protected  QuietPeriodListener(long quietPeriodInMS, Listener listenerToWrap, ExceptionHandler exceptionHandler)", "class_method_signature": "QuietPeriodListener.QuietPeriodListener(long quietPeriodInMS, Listener listenerToWrap, ExceptionHandler exceptionHandler)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 33821709, "url": "https://github.com/vorburger/HoTea", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 142, "license": "licensed"}}