{"test_class": {"identifier": "LoggingHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TYPE = \"type\";", "modifier": "private static final", "type": "String", "declarator": "TYPE = \"type\"", "var_name": "TYPE"}, {"original_string": "private static final String FILE = \"file\";", "modifier": "private static final", "type": "String", "declarator": "FILE = \"file\"", "var_name": "FILE"}, {"original_string": "private static final String METADATA = \"metadata\";", "modifier": "private static final", "type": "String", "declarator": "METADATA = \"metadata\"", "var_name": "METADATA"}, {"original_string": "private static final String TRANSMISSION = \"transmission\";", "modifier": "private static final", "type": "String", "declarator": "TRANSMISSION = \"transmission\"", "var_name": "TRANSMISSION"}, {"original_string": "private static final String ADDRESS = \"address\";", "modifier": "private static final", "type": "String", "declarator": "ADDRESS = \"address\"", "var_name": "ADDRESS"}, {"original_string": "private static final String EVENT_BUS = \"eventBus\";", "modifier": "private static final", "type": "String", "declarator": "EVENT_BUS = \"eventBus\"", "var_name": "EVENT_BUS"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private ResourceStorage storage;", "modifier": "private", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final String LOGGING_URI = \"/playground/server/admin/v1/logging\";", "modifier": "private final", "type": "String", "declarator": "LOGGING_URI = \"/playground/server/admin/v1/logging\"", "var_name": "LOGGING_URI"}, {"original_string": "private final String GET_REQUEST_URI = \"/playground/server/users/v1/test\";", "modifier": "private final", "type": "String", "declarator": "GET_REQUEST_URI = \"/playground/server/users/v1/test\"", "var_name": "GET_REQUEST_URI"}, {"original_string": "private final String TEST_LOGGING_RESOURCE = ResourcesUtils.loadResource(\"testresource_logging_handler_test\", true);", "modifier": "private final", "type": "String", "declarator": "TEST_LOGGING_RESOURCE = ResourcesUtils.loadResource(\"testresource_logging_handler_test\", true)", "var_name": "TEST_LOGGING_RESOURCE"}], "file": "gateleen-logging/src/test/java/org/swisspush/gateleen/logging/LoggingHandlerTest.java"}, "test_case": {"identifier": "testCustomSorting", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCustomSorting(TestContext context) {\n        LoggingResourceManager manager = new LoggingResourceManager(vertx, storage, LOGGING_URI);\n        LoggingResource loggingResource = manager.getLoggingResource();\n\n        // PayloadFilters\n        List<Map<String, String>> payloadFilterEntries = loggingResource.getPayloadFilters();\n        context.assertEquals(2, payloadFilterEntries.size());\n\n        // Check that the Resource has the correct sequence of the resource entries.\n        context.assertEquals(payloadFilterEntries.get(0).get(\"url\"), \"/playground/nsa/v1/acknowledgment/.*\");\n        context.assertEquals(payloadFilterEntries.get(1).get(\"url\"), \"/playground/server/users/v1/.*\");\n\n        GETRequest request = new GETRequest();\n\n        LoggingHandler loggingHandler = new LoggingHandler(manager, request, vertx.eventBus());\n\n        // Check whether \"active\" is set to TRUE, which means the Logging for the GET Request\n        // is happening and is not aborted (which was the case before the fix (NEMO-5551))\n        context.assertTrue(loggingHandler.isActive());\n\n        // Switch the entries. The test must also pass/true if correct.\n        Map<String, String> firstEntry = payloadFilterEntries.get(0);\n        Map<String, String> secondEntry = payloadFilterEntries.get(1);\n\n        payloadFilterEntries.set(0,secondEntry);\n        payloadFilterEntries.set(1,firstEntry);\n\n        context.assertTrue(loggingHandler.isActive());\n    }", "signature": "void testCustomSorting(TestContext context)", "full_signature": "@Test public void testCustomSorting(TestContext context)", "class_method_signature": "LoggingHandlerTest.testCustomSorting(TestContext context)", "testcase": true, "constructor": false, "invocations": ["getLoggingResource", "getPayloadFilters", "assertEquals", "size", "assertEquals", "get", "get", "assertEquals", "get", "get", "eventBus", "assertTrue", "isActive", "get", "get", "set", "set", "assertTrue", "isActive"]}, "focal_class": {"identifier": "LoggingHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HttpServerRequest request;", "modifier": "private", "type": "HttpServerRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private MultiMap requestHeaders;", "modifier": "private", "type": "MultiMap", "declarator": "requestHeaders", "var_name": "requestHeaders"}, {"original_string": "private HttpClientResponse response;", "modifier": "private", "type": "HttpClientResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private boolean active = false;", "modifier": "private", "type": "boolean", "declarator": "active = false", "var_name": "active"}, {"original_string": "private Buffer requestPayload;", "modifier": "private", "type": "Buffer", "declarator": "requestPayload", "var_name": "requestPayload"}, {"original_string": "private Buffer responsePayload;", "modifier": "private", "type": "Buffer", "declarator": "responsePayload", "var_name": "responsePayload"}, {"original_string": "private LoggingResource loggingResource;", "modifier": "private", "type": "LoggingResource", "declarator": "loggingResource", "var_name": "loggingResource"}, {"original_string": "private EventBus eventBus;", "modifier": "private", "type": "EventBus", "declarator": "eventBus", "var_name": "eventBus"}, {"original_string": "private String currentDestination;", "modifier": "private", "type": "String", "declarator": "currentDestination", "var_name": "currentDestination"}, {"original_string": "private static final String LOGGING_DIR_PROPERTY = \"org.swisspush.logging.dir\";", "modifier": "private static final", "type": "String", "declarator": "LOGGING_DIR_PROPERTY = \"org.swisspush.logging.dir\"", "var_name": "LOGGING_DIR_PROPERTY"}, {"original_string": "private static final String CONTENT_TYPE = \"content-type\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE = \"content-type\"", "var_name": "CONTENT_TYPE"}, {"original_string": "private static final String APPLICATION_JSON = \"application/json\";", "modifier": "private static final", "type": "String", "declarator": "APPLICATION_JSON = \"application/json\"", "var_name": "APPLICATION_JSON"}, {"original_string": "private static final String DEFAULT_LOGGER = \"RequestLog\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_LOGGER = \"RequestLog\"", "var_name": "DEFAULT_LOGGER"}, {"original_string": "private static final String REJECT = \"reject\";", "modifier": "private static final", "type": "String", "declarator": "REJECT = \"reject\"", "var_name": "REJECT"}, {"original_string": "private static final String DESTINATION = \"destination\";", "modifier": "private static final", "type": "String", "declarator": "DESTINATION = \"destination\"", "var_name": "DESTINATION"}, {"original_string": "private static final String DESCRIPTION = \"description\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"description\"", "var_name": "DESCRIPTION"}, {"original_string": "private static final String META_DATA = \"metadata\";", "modifier": "private static final", "type": "String", "declarator": "META_DATA = \"metadata\"", "var_name": "META_DATA"}, {"original_string": "private static final String TRANSMISSION = \"transmission\";", "modifier": "private static final", "type": "String", "declarator": "TRANSMISSION = \"transmission\"", "var_name": "TRANSMISSION"}, {"original_string": "private static final String URL = \"url\";", "modifier": "private static final", "type": "String", "declarator": "URL = \"url\"", "var_name": "URL"}, {"original_string": "private static final String METHOD = \"method\";", "modifier": "private static final", "type": "String", "declarator": "METHOD = \"method\"", "var_name": "METHOD"}, {"original_string": "private static final String STATUS_CODE = \"statusCode\";", "modifier": "private static final", "type": "String", "declarator": "STATUS_CODE = \"statusCode\"", "var_name": "STATUS_CODE"}, {"original_string": "private static final String STATUS_MESSAGE = \"statusMessage\";", "modifier": "private static final", "type": "String", "declarator": "STATUS_MESSAGE = \"statusMessage\"", "var_name": "STATUS_MESSAGE"}, {"original_string": "private static final String REQUEST = \"request\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST = \"request\"", "var_name": "REQUEST"}, {"original_string": "private static final String RESPONSE = \"response\";", "modifier": "private static final", "type": "String", "declarator": "RESPONSE = \"response\"", "var_name": "RESPONSE"}, {"original_string": "private static final String HEADERS = \"headers\";", "modifier": "private static final", "type": "String", "declarator": "HEADERS = \"headers\"", "var_name": "HEADERS"}, {"original_string": "private static final String BODY = \"body\";", "modifier": "private static final", "type": "String", "declarator": "BODY = \"body\"", "var_name": "BODY"}, {"original_string": "private static final String FILE = \"file\";", "modifier": "private static final", "type": "String", "declarator": "FILE = \"file\"", "var_name": "FILE"}, {"original_string": "private static final String ADDRESS = \"address\";", "modifier": "private static final", "type": "String", "declarator": "ADDRESS = \"address\"", "var_name": "ADDRESS"}, {"original_string": "private static final String DEFAULT = \"default\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT = \"default\"", "var_name": "DEFAULT"}, {"original_string": "private Map<String, org.apache.log4j.Logger> loggers = new HashMap<>();", "modifier": "private", "type": "Map<String, org.apache.log4j.Logger>", "declarator": "loggers = new HashMap<>()", "var_name": "loggers"}, {"original_string": "private Map<String, Appender> appenders = new HashMap<>();", "modifier": "private", "type": "Map<String, Appender>", "declarator": "appenders = new HashMap<>()", "var_name": "appenders"}, {"original_string": "private Logger log;", "modifier": "private", "type": "Logger", "declarator": "log", "var_name": "log"}], "methods": [{"identifier": "LoggingHandler", "parameters": "(LoggingResourceManager loggingResourceManager, HttpServerRequest request, EventBus eventBus)", "modifiers": "public", "return": "", "signature": " LoggingHandler(LoggingResourceManager loggingResourceManager, HttpServerRequest request, EventBus eventBus)", "full_signature": "public  LoggingHandler(LoggingResourceManager loggingResourceManager, HttpServerRequest request, EventBus eventBus)", "class_method_signature": "LoggingHandler.LoggingHandler(LoggingResourceManager loggingResourceManager, HttpServerRequest request, EventBus eventBus)", "testcase": false, "constructor": true}, {"identifier": "isActive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isActive()", "full_signature": "public boolean isActive()", "class_method_signature": "LoggingHandler.isActive()", "testcase": false, "constructor": false}, {"identifier": "createLoggerAndGetDestination", "parameters": "(Map<String, String> payloadFilter)", "modifiers": "private", "return": "String", "signature": "String createLoggerAndGetDestination(Map<String, String> payloadFilter)", "full_signature": "private String createLoggerAndGetDestination(Map<String, String> payloadFilter)", "class_method_signature": "LoggingHandler.createLoggerAndGetDestination(Map<String, String> payloadFilter)", "testcase": false, "constructor": false}, {"identifier": "getEventBusAppender", "parameters": "(String filterDestination, Map<String, String> destinationOptions)", "modifiers": "private", "return": "Appender", "signature": "Appender getEventBusAppender(String filterDestination, Map<String, String> destinationOptions)", "full_signature": "private Appender getEventBusAppender(String filterDestination, Map<String, String> destinationOptions)", "class_method_signature": "LoggingHandler.getEventBusAppender(String filterDestination, Map<String, String> destinationOptions)", "testcase": false, "constructor": false}, {"identifier": "getFileAppender", "parameters": "(String filterDestination, String fileName)", "modifiers": "private", "return": "Appender", "signature": "Appender getFileAppender(String filterDestination, String fileName)", "full_signature": "private Appender getFileAppender(String filterDestination, String fileName)", "class_method_signature": "LoggingHandler.getFileAppender(String filterDestination, String fileName)", "testcase": false, "constructor": false}, {"identifier": "setResponse", "parameters": "(HttpClientResponse response)", "modifiers": "public", "return": "void", "signature": "void setResponse(HttpClientResponse response)", "full_signature": "public void setResponse(HttpClientResponse response)", "class_method_signature": "LoggingHandler.setResponse(HttpClientResponse response)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(MultiMap headers)", "modifiers": "public", "return": "void", "signature": "void request(MultiMap headers)", "full_signature": "public void request(MultiMap headers)", "class_method_signature": "LoggingHandler.request(MultiMap headers)", "testcase": false, "constructor": false}, {"identifier": "appendRequestPayload", "parameters": "(Buffer data)", "modifiers": "public", "return": "void", "signature": "void appendRequestPayload(Buffer data)", "full_signature": "public void appendRequestPayload(Buffer data)", "class_method_signature": "LoggingHandler.appendRequestPayload(Buffer data)", "testcase": false, "constructor": false}, {"identifier": "appendResponsePayload", "parameters": "(Buffer data)", "modifiers": "public", "return": "void", "signature": "void appendResponsePayload(Buffer data)", "full_signature": "public void appendResponsePayload(Buffer data)", "class_method_signature": "LoggingHandler.appendResponsePayload(Buffer data)", "testcase": false, "constructor": false}, {"identifier": "appendRequestPayload", "parameters": "(Buffer data, MultiMap headers)", "modifiers": "public", "return": "void", "signature": "void appendRequestPayload(Buffer data, MultiMap headers)", "full_signature": "public void appendRequestPayload(Buffer data, MultiMap headers)", "class_method_signature": "LoggingHandler.appendRequestPayload(Buffer data, MultiMap headers)", "testcase": false, "constructor": false}, {"identifier": "appendResponsePayload", "parameters": "(Buffer data, MultiMap headers)", "modifiers": "public", "return": "void", "signature": "void appendResponsePayload(Buffer data, MultiMap headers)", "full_signature": "public void appendResponsePayload(Buffer data, MultiMap headers)", "class_method_signature": "LoggingHandler.appendResponsePayload(Buffer data, MultiMap headers)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void log()", "full_signature": "public void log()", "class_method_signature": "LoggingHandler.log()", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(String uri, HttpMethod method, int statusCode, String statusMessage, MultiMap requestHeaders, MultiMap responseHeaders)", "modifiers": "public", "return": "void", "signature": "void log(String uri, HttpMethod method, int statusCode, String statusMessage, MultiMap requestHeaders, MultiMap responseHeaders)", "full_signature": "public void log(String uri, HttpMethod method, int statusCode, String statusMessage, MultiMap requestHeaders, MultiMap responseHeaders)", "class_method_signature": "LoggingHandler.log(String uri, HttpMethod method, int statusCode, String statusMessage, MultiMap requestHeaders, MultiMap responseHeaders)", "testcase": false, "constructor": false}, {"identifier": "aboutToLogRequest", "parameters": "(String currentDestination)", "modifiers": "private", "return": "void", "signature": "void aboutToLogRequest(String currentDestination)", "full_signature": "private void aboutToLogRequest(String currentDestination)", "class_method_signature": "LoggingHandler.aboutToLogRequest(String currentDestination)", "testcase": false, "constructor": false}, {"identifier": "errorLogRequest", "parameters": "(String currentDestination, Exception ex)", "modifiers": "private", "return": "void", "signature": "void errorLogRequest(String currentDestination, Exception ex)", "full_signature": "private void errorLogRequest(String currentDestination, Exception ex)", "class_method_signature": "LoggingHandler.errorLogRequest(String currentDestination, Exception ex)", "testcase": false, "constructor": false}, {"identifier": "headersAsJson", "parameters": "(MultiMap headers)", "modifiers": "private", "return": "JsonObject", "signature": "JsonObject headersAsJson(MultiMap headers)", "full_signature": "private JsonObject headersAsJson(MultiMap headers)", "class_method_signature": "LoggingHandler.headersAsJson(MultiMap headers)", "testcase": false, "constructor": false}, {"identifier": "getRequestPayload", "parameters": "()", "modifiers": "private", "return": "Buffer", "signature": "Buffer getRequestPayload()", "full_signature": "private Buffer getRequestPayload()", "class_method_signature": "LoggingHandler.getRequestPayload()", "testcase": false, "constructor": false}, {"identifier": "getResponsePayload", "parameters": "()", "modifiers": "private", "return": "Buffer", "signature": "Buffer getResponsePayload()", "full_signature": "private Buffer getResponsePayload()", "class_method_signature": "LoggingHandler.getResponsePayload()", "testcase": false, "constructor": false}, {"identifier": "isJsonContent", "parameters": "(MultiMap headers)", "modifiers": "private", "return": "boolean", "signature": "boolean isJsonContent(MultiMap headers)", "full_signature": "private boolean isJsonContent(MultiMap headers)", "class_method_signature": "LoggingHandler.isJsonContent(MultiMap headers)", "testcase": false, "constructor": false}], "file": "gateleen-logging/src/main/java/org/swisspush/gateleen/logging/LoggingHandler.java"}, "focal_method": {"identifier": "isActive", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isActive() {\n        return this.active;\n    }", "signature": "boolean isActive()", "full_signature": "public boolean isActive()", "class_method_signature": "LoggingHandler.isActive()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}