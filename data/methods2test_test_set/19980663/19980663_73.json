{"test_class": {"identifier": "MultiTimeQueryActionTest", "superclass": "extends ActionTest", "interfaces": "", "fields": [], "file": "foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/actions/MultiTimeQueryActionTest.java"}, "test_case": {"identifier": "testMultiTimeQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultiTimeQuery() throws FoxtrotException, JsonProcessingException {\n        Query query = new Query();\n        query.setTable(TestUtils.TEST_TABLE_NAME);\n        ResultSort resultSort = new ResultSort();\n        resultSort.setOrder(ResultSort.Order.asc);\n        resultSort.setField(\"_timestamp\");\n        query.setSort(resultSort);\n        BetweenFilter betweenFilter = new BetweenFilter(\"_timestamp\", 1397658117000L, 1397658118005L, false);\n        query.setFilters(Arrays.asList(betweenFilter));\n\n        Duration duration = Duration.days(1);\n        MultiTimeQueryRequest multiTimeQueryRequest = new MultiTimeQueryRequest(1, duration, query);\n        ActionResponse actionResponse = getQueryExecutor().execute(multiTimeQueryRequest);\n        MultiTimeQueryResponse multiTimeQueryResponse = null;\n        if(actionResponse instanceof MultiTimeQueryResponse) {\n            multiTimeQueryResponse = (MultiTimeQueryResponse)actionResponse;\n        }\n        assertNotNull(multiTimeQueryResponse);\n\n        QueryResponse queryResponse = (QueryResponse)multiTimeQueryResponse.getResponses()\n                .get(\"1397658117000\");\n\n        assertEquals(9, queryResponse.getTotalHits());\n    }", "signature": "void testMultiTimeQuery()", "full_signature": "@Test public void testMultiTimeQuery()", "class_method_signature": "MultiTimeQueryActionTest.testMultiTimeQuery()", "testcase": true, "constructor": false, "invocations": ["setTable", "setOrder", "setField", "setSort", "setFilters", "asList", "days", "execute", "getQueryExecutor", "assertNotNull", "get", "getResponses", "assertEquals", "getTotalHits"]}, "focal_class": {"identifier": "MultiTimeQueryAction", "superclass": "extends Action<MultiTimeQueryRequest>", "interfaces": "", "fields": [{"original_string": "private AnalyticsLoader analyticsLoader;", "modifier": "private", "type": "AnalyticsLoader", "declarator": "analyticsLoader", "var_name": "analyticsLoader"}, {"original_string": "private Action action;", "modifier": "private", "type": "Action", "declarator": "action", "var_name": "action"}, {"original_string": "private MultiQueryRequest multiQueryRequest;", "modifier": "private", "type": "MultiQueryRequest", "declarator": "multiQueryRequest", "var_name": "multiQueryRequest"}], "methods": [{"identifier": "MultiTimeQueryAction", "parameters": "(MultiTimeQueryRequest parameter, AnalyticsLoader analyticsLoader)", "modifiers": "public", "return": "", "signature": " MultiTimeQueryAction(MultiTimeQueryRequest parameter, AnalyticsLoader analyticsLoader)", "full_signature": "public  MultiTimeQueryAction(MultiTimeQueryRequest parameter, AnalyticsLoader analyticsLoader)", "class_method_signature": "MultiTimeQueryAction.MultiTimeQueryAction(MultiTimeQueryRequest parameter, AnalyticsLoader analyticsLoader)", "testcase": false, "constructor": true}, {"identifier": "preprocess", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void preprocess()", "full_signature": "@Override public void preprocess()", "class_method_signature": "MultiTimeQueryAction.preprocess()", "testcase": false, "constructor": false}, {"identifier": "getMetricKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMetricKey()", "full_signature": "@Override public String getMetricKey()", "class_method_signature": "MultiTimeQueryAction.getMetricKey()", "testcase": false, "constructor": false}, {"identifier": "getRequestCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRequestCacheKey()", "full_signature": "@Override public String getRequestCacheKey()", "class_method_signature": "MultiTimeQueryAction.getRequestCacheKey()", "testcase": false, "constructor": false}, {"identifier": "validateImpl", "parameters": "(MultiTimeQueryRequest parameter)", "modifiers": "@Override public", "return": "void", "signature": "void validateImpl(MultiTimeQueryRequest parameter)", "full_signature": "@Override public void validateImpl(MultiTimeQueryRequest parameter)", "class_method_signature": "MultiTimeQueryAction.validateImpl(MultiTimeQueryRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(MultiTimeQueryRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse execute(MultiTimeQueryRequest parameter)", "full_signature": "@Override public ActionResponse execute(MultiTimeQueryRequest parameter)", "class_method_signature": "MultiTimeQueryAction.execute(MultiTimeQueryRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getRequestBuilder", "parameters": "(MultiTimeQueryRequest parameter)", "modifiers": "@Override public", "return": "ActionRequestBuilder", "signature": "ActionRequestBuilder getRequestBuilder(MultiTimeQueryRequest parameter)", "full_signature": "@Override public ActionRequestBuilder getRequestBuilder(MultiTimeQueryRequest parameter)", "class_method_signature": "MultiTimeQueryAction.getRequestBuilder(MultiTimeQueryRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getResponse", "parameters": "(org.elasticsearch.action.ActionResponse multiSearchResponse, MultiTimeQueryRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse getResponse(org.elasticsearch.action.ActionResponse multiSearchResponse, MultiTimeQueryRequest parameter)", "full_signature": "@Override public ActionResponse getResponse(org.elasticsearch.action.ActionResponse multiSearchResponse, MultiTimeQueryRequest parameter)", "class_method_signature": "MultiTimeQueryAction.getResponse(org.elasticsearch.action.ActionResponse multiSearchResponse, MultiTimeQueryRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "createMultiQueryRequests", "parameters": "(int sampleSize, BetweenFilter betweenFilter)", "modifiers": "private", "return": "MultiQueryRequest", "signature": "MultiQueryRequest createMultiQueryRequests(int sampleSize, BetweenFilter betweenFilter)", "full_signature": "private MultiQueryRequest createMultiQueryRequests(int sampleSize, BetweenFilter betweenFilter)", "class_method_signature": "MultiTimeQueryAction.createMultiQueryRequests(int sampleSize, BetweenFilter betweenFilter)", "testcase": false, "constructor": false}], "file": "foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/actions/MultiTimeQueryAction.java"}, "focal_method": {"identifier": "execute", "parameters": "(MultiTimeQueryRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "body": "@Override\n    public ActionResponse execute(MultiTimeQueryRequest parameter) {\n        MultiTimeQueryResponse multiTimeQueryResponse = new MultiTimeQueryResponse();\n        multiTimeQueryResponse.setResponses(((MultiQueryResponse)action.execute(multiQueryRequest)).getResponses());\n        return multiTimeQueryResponse;\n    }", "signature": "ActionResponse execute(MultiTimeQueryRequest parameter)", "full_signature": "@Override public ActionResponse execute(MultiTimeQueryRequest parameter)", "class_method_signature": "MultiTimeQueryAction.execute(MultiTimeQueryRequest parameter)", "testcase": false, "constructor": false, "invocations": ["setResponses", "getResponses", "execute"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}