{"test_class": {"identifier": "ApiServletTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    ApiServer apiServer;", "modifier": "@Mock", "type": "ApiServer", "declarator": "apiServer", "var_name": "apiServer"}, {"original_string": "@Mock\n    HttpServletRequest request;", "modifier": "@Mock", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    HttpServletResponse response;", "modifier": "@Mock", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    AccountService accountService;", "modifier": "@Mock", "type": "AccountService", "declarator": "accountService", "var_name": "accountService"}, {"original_string": "@Mock\n    APIAuthenticationManager authManager;", "modifier": "@Mock", "type": "APIAuthenticationManager", "declarator": "authManager", "var_name": "authManager"}, {"original_string": "@Mock\n    APIAuthenticator authenticator;", "modifier": "@Mock", "type": "APIAuthenticator", "declarator": "authenticator", "var_name": "authenticator"}, {"original_string": "@Mock\n    User user;", "modifier": "@Mock", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "@Mock\n    Account account;", "modifier": "@Mock", "type": "Account", "declarator": "account", "var_name": "account"}, {"original_string": "@Mock\n    HttpSession session;", "modifier": "@Mock", "type": "HttpSession", "declarator": "session", "var_name": "session"}, {"original_string": "@Mock\n    ManagementServer managementServer;", "modifier": "@Mock", "type": "ManagementServer", "declarator": "managementServer", "var_name": "managementServer"}, {"original_string": "StringWriter responseWriter;", "modifier": "", "type": "StringWriter", "declarator": "responseWriter", "var_name": "responseWriter"}, {"original_string": "ApiServlet servlet;", "modifier": "", "type": "ApiServlet", "declarator": "servlet", "var_name": "servlet"}], "file": "server/src/test/java/com/cloud/api/ApiServletTest.java"}, "test_case": {"identifier": "getClientAddressWithHttpXForwardedFor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getClientAddressWithHttpXForwardedFor() {\n        Mockito.when(request.getHeader(Mockito.eq(\"HTTP_X_FORWARDED_FOR\"))).thenReturn(\"192.168.1.1\");\n        Assert.assertEquals(\"192.168.1.1\", ApiServlet.getClientAddress(request));\n    }", "signature": "void getClientAddressWithHttpXForwardedFor()", "full_signature": "@Test public void getClientAddressWithHttpXForwardedFor()", "class_method_signature": "ApiServletTest.getClientAddressWithHttpXForwardedFor()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getHeader", "eq", "assertEquals", "getClientAddress"]}, "focal_class": {"identifier": "ApiServlet", "superclass": "extends HttpServlet", "interfaces": "", "fields": [{"original_string": "public static final Logger s_logger = LoggerFactory.getLogger(ApiServlet.class.getName());", "modifier": "public static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(ApiServlet.class.getName())", "var_name": "s_logger"}, {"original_string": "private static final Logger s_accessLogger = LoggerFactory.getLogger(\"apiserver.\" + ApiServer.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "s_accessLogger = LoggerFactory.getLogger(\"apiserver.\" + ApiServer.class.getName())", "var_name": "s_accessLogger"}, {"original_string": "private final static List<String> s_clientAddressHeaders = Collections\n            .unmodifiableList(Arrays.asList(\"X-Forwarded-For\",\n                    \"HTTP_CLIENT_IP\", \"HTTP_X_FORWARDED_FOR\", \"Remote_Addr\"));", "modifier": "private final static", "type": "List<String>", "declarator": "s_clientAddressHeaders = Collections\n            .unmodifiableList(Arrays.asList(\"X-Forwarded-For\",\n                    \"HTTP_CLIENT_IP\", \"HTTP_X_FORWARDED_FOR\", \"Remote_Addr\"))", "var_name": "s_clientAddressHeaders"}, {"original_string": "@Inject\n    ApiServerService _apiServer;", "modifier": "@Inject", "type": "ApiServerService", "declarator": "_apiServer", "var_name": "_apiServer"}, {"original_string": "@Inject\n    AccountService _accountMgr;", "modifier": "@Inject", "type": "AccountService", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Inject\n    EntityManager _entityMgr;", "modifier": "@Inject", "type": "EntityManager", "declarator": "_entityMgr", "var_name": "_entityMgr"}, {"original_string": "@Inject\n    ManagedContext _managedContext;", "modifier": "@Inject", "type": "ManagedContext", "declarator": "_managedContext", "var_name": "_managedContext"}, {"original_string": "@Inject\n    APIAuthenticationManager _authManager;", "modifier": "@Inject", "type": "APIAuthenticationManager", "declarator": "_authManager", "var_name": "_authManager"}], "methods": [{"identifier": "ApiServlet", "parameters": "()", "modifiers": "public", "return": "", "signature": " ApiServlet()", "full_signature": "public  ApiServlet()", "class_method_signature": "ApiServlet.ApiServlet()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(final ServletConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void init(final ServletConfig config)", "full_signature": "@Override public void init(final ServletConfig config)", "class_method_signature": "ApiServlet.init(final ServletConfig config)", "testcase": false, "constructor": false}, {"identifier": "doGet", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "ApiServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "doPost", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doPost(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "ApiServlet.doPost(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "utf8Fixup", "parameters": "(final HttpServletRequest req, final Map<String, Object[]> params)", "modifiers": "", "return": "void", "signature": "void utf8Fixup(final HttpServletRequest req, final Map<String, Object[]> params)", "full_signature": " void utf8Fixup(final HttpServletRequest req, final Map<String, Object[]> params)", "class_method_signature": "ApiServlet.utf8Fixup(final HttpServletRequest req, final Map<String, Object[]> params)", "testcase": false, "constructor": false}, {"identifier": "decodeUtf8", "parameters": "(final String value)", "modifiers": "private", "return": "String", "signature": "String decodeUtf8(final String value)", "full_signature": "private String decodeUtf8(final String value)", "class_method_signature": "ApiServlet.decodeUtf8(final String value)", "testcase": false, "constructor": false}, {"identifier": "processRequest", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "private", "return": "void", "signature": "void processRequest(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "private void processRequest(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "ApiServlet.processRequest(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "processRequestInContext", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "", "return": "void", "signature": "void processRequestInContext(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": " void processRequestInContext(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "ApiServlet.processRequestInContext(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "getClientAddress", "parameters": "(final HttpServletRequest request)", "modifiers": "static", "return": "String", "signature": "String getClientAddress(final HttpServletRequest request)", "full_signature": "static String getClientAddress(final HttpServletRequest request)", "class_method_signature": "ApiServlet.getClientAddress(final HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getCorrectIPAddress", "parameters": "(String ip)", "modifiers": "private static", "return": "String", "signature": "String getCorrectIPAddress(String ip)", "full_signature": "private static String getCorrectIPAddress(String ip)", "class_method_signature": "ApiServlet.getCorrectIPAddress(String ip)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/api/ApiServlet.java"}, "focal_method": {"identifier": "getClientAddress", "parameters": "(final HttpServletRequest request)", "modifiers": "static", "return": "String", "body": "static String getClientAddress(final HttpServletRequest request) {\n        for(final String header : s_clientAddressHeaders) {\n            final String ip = getCorrectIPAddress(request.getHeader(header));\n            if (ip != null) {\n                return ip;\n            }\n        }\n\n        return request.getRemoteAddr();\n    }", "signature": "String getClientAddress(final HttpServletRequest request)", "full_signature": "static String getClientAddress(final HttpServletRequest request)", "class_method_signature": "ApiServlet.getClientAddress(final HttpServletRequest request)", "testcase": false, "constructor": false, "invocations": ["getCorrectIPAddress", "getHeader", "getRemoteAddr"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}