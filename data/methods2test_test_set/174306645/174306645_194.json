{"test_class": {"identifier": "NamedRuleUnitConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "kogito-codegen/src/test/java/org/kie/kogito/codegen/rules/config/NamedRuleUnitConfigTest.java"}, "test_case": {"identifier": "multiUnit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void multiUnit() {\n        Properties properties = new Properties();\n        properties.put(\"kogito.rules.some.other.config\", \"ignore me\");\n\n        properties.put(\"kogito.rules.\\\"my.rule.Unit\\\".event-processing-type\", EventProcessingType.CLOUD.name());\n        properties.put(\"kogito.rules.\\\"my.rule.Unit\\\".clock-type\", ClockType.PSEUDO.name());\n        properties.put(\"kogito.rules.\\\"my.rule.Unit\\\".sessions-pool\", \"10\");\n\n        properties.put(\"kogito.rules.\\\"my.rule.Unit2\\\".event-processing-type\", EventProcessingType.STREAM.name());\n\n        GeneratorContext context = GeneratorContext.ofProperties(properties);\n        List<NamedRuleUnitConfig> namedRuleUnitConfigs = NamedRuleUnitConfig.fromContext(context);\n\n        assertThat(namedRuleUnitConfigs).hasSize(2);\n\n        Map<String, RuleUnitConfig> map =\n                namedRuleUnitConfigs.stream()\n                        .collect(toMap(NamedRuleUnitConfig::getCanonicalName, NamedRuleUnitConfig::getConfig));\n\n        RuleUnitConfig myRuleUnitConfig = map.get(\"my.rule.Unit\");\n        assertThat(myRuleUnitConfig).isNotNull();\n        assertThat(myRuleUnitConfig.getDefaultedEventProcessingType()).isEqualTo(EventProcessingType.CLOUD);\n        assertThat(myRuleUnitConfig.getDefaultedClockType()).isEqualTo(ClockType.PSEUDO);\n        assertThat(myRuleUnitConfig.getSessionPool().getAsInt()).isEqualTo(10);\n\n        RuleUnitConfig myRuleUnit2Config = map.get(\"my.rule.Unit2\");\n        assertThat(myRuleUnit2Config).isNotNull();\n\n        assertThat(myRuleUnit2Config.getDefaultedEventProcessingType()).isEqualTo(EventProcessingType.STREAM);\n        assertThat(myRuleUnit2Config.getDefaultedClockType()).isEqualTo(ClockType.REALTIME);\n        assertThat(myRuleUnit2Config.getSessionPool()).isEmpty();\n    }", "signature": "void multiUnit()", "full_signature": "@Test public void multiUnit()", "class_method_signature": "NamedRuleUnitConfigTest.multiUnit()", "testcase": true, "constructor": false, "invocations": ["put", "put", "name", "put", "name", "put", "put", "name", "ofProperties", "fromContext", "hasSize", "assertThat", "collect", "stream", "toMap", "get", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getDefaultedEventProcessingType", "isEqualTo", "assertThat", "getDefaultedClockType", "isEqualTo", "assertThat", "getAsInt", "getSessionPool", "get", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getDefaultedEventProcessingType", "isEqualTo", "assertThat", "getDefaultedClockType", "isEmpty", "assertThat", "getSessionPool"]}, "focal_class": {"identifier": "NamedRuleUnitConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String CONFIG_PREFIX = \"kogito.rules.\";", "modifier": "private static", "type": "String", "declarator": "CONFIG_PREFIX = \"kogito.rules.\"", "var_name": "CONFIG_PREFIX"}, {"original_string": "private static String CONFIG_EVENT_PROCESSING_TYPE = CONFIG_PREFIX + \"\\\"%s\\\".event-processing-type\";", "modifier": "private static", "type": "String", "declarator": "CONFIG_EVENT_PROCESSING_TYPE = CONFIG_PREFIX + \"\\\"%s\\\".event-processing-type\"", "var_name": "CONFIG_EVENT_PROCESSING_TYPE"}, {"original_string": "private static String CONFIG_CLOCK_TYPE = CONFIG_PREFIX + \"\\\"%s\\\".clock-type\";", "modifier": "private static", "type": "String", "declarator": "CONFIG_CLOCK_TYPE = CONFIG_PREFIX + \"\\\"%s\\\".clock-type\"", "var_name": "CONFIG_CLOCK_TYPE"}, {"original_string": "private static String CONFIG_SESSIONS_POOL = CONFIG_PREFIX + \"\\\"%s\\\".sessions-pool\";", "modifier": "private static", "type": "String", "declarator": "CONFIG_SESSIONS_POOL = CONFIG_PREFIX + \"\\\"%s\\\".sessions-pool\"", "var_name": "CONFIG_SESSIONS_POOL"}, {"original_string": "private final String canonicalName;", "modifier": "private final", "type": "String", "declarator": "canonicalName", "var_name": "canonicalName"}, {"original_string": "private final RuleUnitConfig config;", "modifier": "private final", "type": "RuleUnitConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "fromContext", "parameters": "(GeneratorContext context)", "modifiers": "public static", "return": "List<NamedRuleUnitConfig>", "signature": "List<NamedRuleUnitConfig> fromContext(GeneratorContext context)", "full_signature": "public static List<NamedRuleUnitConfig> fromContext(GeneratorContext context)", "class_method_signature": "NamedRuleUnitConfig.fromContext(GeneratorContext context)", "testcase": false, "constructor": false}, {"identifier": "parseQuotedIdentifier", "parameters": "(String key)", "modifiers": "private static", "return": "Optional<String>", "signature": "Optional<String> parseQuotedIdentifier(String key)", "full_signature": "private static Optional<String> parseQuotedIdentifier(String key)", "class_method_signature": "NamedRuleUnitConfig.parseQuotedIdentifier(String key)", "testcase": false, "constructor": false}, {"identifier": "NamedRuleUnitConfig", "parameters": "(String canonicalName, RuleUnitConfig config)", "modifiers": "public", "return": "", "signature": " NamedRuleUnitConfig(String canonicalName, RuleUnitConfig config)", "full_signature": "public  NamedRuleUnitConfig(String canonicalName, RuleUnitConfig config)", "class_method_signature": "NamedRuleUnitConfig.NamedRuleUnitConfig(String canonicalName, RuleUnitConfig config)", "testcase": false, "constructor": true}, {"identifier": "getCanonicalName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCanonicalName()", "full_signature": "public String getCanonicalName()", "class_method_signature": "NamedRuleUnitConfig.getCanonicalName()", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "()", "modifiers": "public", "return": "RuleUnitConfig", "signature": "RuleUnitConfig getConfig()", "full_signature": "public RuleUnitConfig getConfig()", "class_method_signature": "NamedRuleUnitConfig.getConfig()", "testcase": false, "constructor": false}], "file": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/config/NamedRuleUnitConfig.java"}, "focal_method": {"identifier": "fromContext", "parameters": "(GeneratorContext context)", "modifiers": "public static", "return": "List<NamedRuleUnitConfig>", "body": "public static List<NamedRuleUnitConfig> fromContext(GeneratorContext context) {\n        HashSet<String> canonicalNames = new HashSet<>();\n        for (String k : context.getApplicationProperties()) {\n            if (k.startsWith(CONFIG_PREFIX)) {\n                String rest = k.substring(CONFIG_PREFIX.length());\n                Optional<String> unitCanonicalName = parseQuotedIdentifier(rest);\n                unitCanonicalName.ifPresent(canonicalNames::add);\n            }\n        }\n\n        ArrayList<NamedRuleUnitConfig> configs = new ArrayList<>();\n        for (String canonicalName : canonicalNames) {\n            EventProcessingType eventProcessingType = context.getApplicationProperty(\n                    String.format(CONFIG_EVENT_PROCESSING_TYPE, canonicalName))\n                    .map(String::toUpperCase)\n                    .map(EventProcessingType::valueOf)\n                    .orElse(null);\n\n            ClockType clockType = context.getApplicationProperty(\n                    String.format(CONFIG_CLOCK_TYPE, canonicalName))\n                    .map(String::toUpperCase)\n                    .map(ClockType::valueOf)\n                    .orElse(null);\n\n            Optional<String> sp = context.getApplicationProperty(\n                    String.format(CONFIG_SESSIONS_POOL, canonicalName));\n            Integer sessionPool = sp.map(Integer::parseInt).orElse(null);\n\n            configs.add(new NamedRuleUnitConfig(\n                    canonicalName,\n                    new RuleUnitConfig(\n                            eventProcessingType,\n                            clockType,\n                            sessionPool)));\n        }\n\n        return configs;\n    }", "signature": "List<NamedRuleUnitConfig> fromContext(GeneratorContext context)", "full_signature": "public static List<NamedRuleUnitConfig> fromContext(GeneratorContext context)", "class_method_signature": "NamedRuleUnitConfig.fromContext(GeneratorContext context)", "testcase": false, "constructor": false, "invocations": ["getApplicationProperties", "startsWith", "substring", "length", "parseQuotedIdentifier", "ifPresent", "orElse", "map", "map", "getApplicationProperty", "format", "orElse", "map", "map", "getApplicationProperty", "format", "getApplicationProperty", "format", "orElse", "map", "add"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}