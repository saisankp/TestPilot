{"test_class": {"identifier": "OrganisationUnitSupplierTest", "superclass": "extends AbstractSupplierTest<OrganisationUnit>", "interfaces": "", "fields": [{"original_string": "private OrganisationUnitSupplier subject;", "modifier": "private", "type": "OrganisationUnitSupplier", "declarator": "subject", "var_name": "subject"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/OrganisationUnitSupplierTest.java"}, "test_case": {"identifier": "handleNullEvents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void handleNullEvents()\n    {\n        assertNotNull( subject.get( ImportOptions.getDefaultImportOptions(), null ) );\n    }", "signature": "void handleNullEvents()", "full_signature": "@Test public void handleNullEvents()", "class_method_signature": "OrganisationUnitSupplierTest.handleNullEvents()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "get", "getDefaultImportOptions"]}, "focal_class": {"identifier": "OrganisationUnitSupplier", "superclass": "extends AbstractSupplier<Map<String, OrganisationUnit>>", "interfaces": "", "fields": [{"original_string": "private final static String ATTRIBUTESCHEME_COL = \"attributevalues\";", "modifier": "private final static", "type": "String", "declarator": "ATTRIBUTESCHEME_COL = \"attributevalues\"", "var_name": "ATTRIBUTESCHEME_COL"}], "methods": [{"identifier": "OrganisationUnitSupplier", "parameters": "( NamedParameterJdbcTemplate jdbcTemplate )", "modifiers": "public", "return": "", "signature": " OrganisationUnitSupplier( NamedParameterJdbcTemplate jdbcTemplate )", "full_signature": "public  OrganisationUnitSupplier( NamedParameterJdbcTemplate jdbcTemplate )", "class_method_signature": "OrganisationUnitSupplier.OrganisationUnitSupplier( NamedParameterJdbcTemplate jdbcTemplate )", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "( ImportOptions importOptions, List<Event> events )", "modifiers": "@Override public", "return": "Map<String, OrganisationUnit>", "signature": "Map<String, OrganisationUnit> get( ImportOptions importOptions, List<Event> events )", "full_signature": "@Override public Map<String, OrganisationUnit> get( ImportOptions importOptions, List<Event> events )", "class_method_signature": "OrganisationUnitSupplier.get( ImportOptions importOptions, List<Event> events )", "testcase": false, "constructor": false}, {"identifier": "fetchOu", "parameters": "( IdScheme idScheme, Set<String> orgUnitUids,\n        Multimap<String, String> orgUnitToEvent )", "modifiers": "private", "return": "Map<String, OrganisationUnit>", "signature": "Map<String, OrganisationUnit> fetchOu( IdScheme idScheme, Set<String> orgUnitUids,\n        Multimap<String, String> orgUnitToEvent )", "full_signature": "private Map<String, OrganisationUnit> fetchOu( IdScheme idScheme, Set<String> orgUnitUids,\n        Multimap<String, String> orgUnitToEvent )", "class_method_signature": "OrganisationUnitSupplier.fetchOu( IdScheme idScheme, Set<String> orgUnitUids,\n        Multimap<String, String> orgUnitToEvent )", "testcase": false, "constructor": false}, {"identifier": "mapFromResultSet", "parameters": "( ResultSet rs )", "modifiers": "private", "return": "OrganisationUnit", "signature": "OrganisationUnit mapFromResultSet( ResultSet rs )", "full_signature": "private OrganisationUnit mapFromResultSet( ResultSet rs )", "class_method_signature": "OrganisationUnitSupplier.mapFromResultSet( ResultSet rs )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/OrganisationUnitSupplier.java"}, "focal_method": {"identifier": "get", "parameters": "( ImportOptions importOptions, List<Event> events )", "modifiers": "@Override public", "return": "Map<String, OrganisationUnit>", "body": "@Override\n    public Map<String, OrganisationUnit> get( ImportOptions importOptions, List<Event> events )\n    {\n        //\n        // Get the IdScheme for Org Units. Org Units should support also the Attribute\n        // Scheme, based on JSONB\n        //\n        IdScheme idScheme = importOptions.getIdSchemes().getOrgUnitIdScheme();\n\n        if ( events == null )\n        {\n            return new HashMap<>();\n        }\n\n        //\n        // Collect all the org unit IDs (based on the IdScheme) to pass as SQL query\n        // argument\n        //\n        // @formatter:off\n        final Set<String> orgUnitUids = events.stream()\n            .filter( e -> e.getOrgUnit() != null ).map( Event::getOrgUnit )\n            .collect( Collectors.toSet() );\n        // @formatter:on\n\n        if ( isEmpty( orgUnitUids ) )\n        {\n            return new HashMap<>();\n        }\n\n        // Create a map: org unit uid -> List [event uid]\n        Multimap<String, String> orgUnitToEvent = HashMultimap.create();\n        for ( Event event : events )\n        {\n            orgUnitToEvent.put( event.getOrgUnit(), event.getUid() );\n        }\n\n        return fetchOu( idScheme, orgUnitUids, orgUnitToEvent );\n\n    }", "signature": "Map<String, OrganisationUnit> get( ImportOptions importOptions, List<Event> events )", "full_signature": "@Override public Map<String, OrganisationUnit> get( ImportOptions importOptions, List<Event> events )", "class_method_signature": "OrganisationUnitSupplier.get( ImportOptions importOptions, List<Event> events )", "testcase": false, "constructor": false, "invocations": ["getOrgUnitIdScheme", "getIdSchemes", "collect", "map", "filter", "stream", "getOrgUnit", "toSet", "isEmpty", "create", "put", "getOrgUnit", "getUid", "fetchOu"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}