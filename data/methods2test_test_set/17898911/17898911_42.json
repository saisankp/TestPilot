{"test_class": {"identifier": "RendererSelectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    RendererSelector.RadioListView radioListView;", "modifier": "@Mock", "type": "RendererSelector.RadioListView", "declarator": "radioListView", "var_name": "radioListView"}, {"original_string": "@Mock\n    RendererSelector.TabListView tabListView;", "modifier": "@Mock", "type": "RendererSelector.TabListView", "declarator": "tabListView", "var_name": "tabListView"}, {"original_string": "@Mock\n    RendererSelector.ListBoxView listBoxView;", "modifier": "@Mock", "type": "RendererSelector.ListBoxView", "declarator": "listBoxView", "var_name": "listBoxView"}, {"original_string": "@Mock\n    RendererManager rendererManager;", "modifier": "@Mock", "type": "RendererManager", "declarator": "rendererManager", "var_name": "rendererManager"}, {"original_string": "@Mock\n    Command selectCommand;", "modifier": "@Mock", "type": "Command", "declarator": "selectCommand", "var_name": "selectCommand"}, {"original_string": "RendererLibMock gwtLib = new RendererLibMock(\"gwt\");", "modifier": "", "type": "RendererLibMock", "declarator": "gwtLib = new RendererLibMock(\"gwt\")", "var_name": "gwtLib"}, {"original_string": "RendererLibMock d3Lib = new RendererLibMock(\"d3\");", "modifier": "", "type": "RendererLibMock", "declarator": "d3Lib = new RendererLibMock(\"d3\")", "var_name": "d3Lib"}, {"original_string": "RendererLibMock lienzoLib = new RendererLibMock(\"lienzo\");", "modifier": "", "type": "RendererLibMock", "declarator": "lienzoLib = new RendererLibMock(\"lienzo\")", "var_name": "lienzoLib"}, {"original_string": "DisplayerSettings settings = DisplayerSettingsFactory\n            .newPieChartSettings()\n            .renderer(\"d3\")\n            .buildSettings();", "modifier": "", "type": "DisplayerSettings", "declarator": "settings = DisplayerSettingsFactory\n            .newPieChartSettings()\n            .renderer(\"d3\")\n            .buildSettings()", "var_name": "settings"}, {"original_string": "RendererSelector presenter;", "modifier": "", "type": "RendererSelector", "declarator": "presenter", "var_name": "presenter"}], "file": "dashbuilder-client/dashbuilder-displayer-client/src/test/java/org/dashbuilder/displayer/client/widgets/RendererSelectorTest.java"}, "test_case": {"identifier": "testSingleRenderer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSingleRenderer() {\n        List<RendererLibrary> rendererLibs = Arrays.asList((RendererLibrary) d3Lib);\n        when(rendererManager.getRenderersForType(any(DisplayerType.class), any(DisplayerSubType.class))).thenReturn(rendererLibs);\n        when(rendererManager.getRendererForDisplayer(settings)).thenReturn(d3Lib);\n\n        presenter.init(settings, RendererSelector.SelectorType.TAB, 300, selectCommand);\n\n        verify(tabListView).setVisible(false);\n        verify(tabListView, never()).setWidth(anyInt());\n        verify(tabListView, never()).clearRendererSelector();\n        verify(tabListView, never()).addRendererItem(anyString());\n        verify(tabListView, never()).setSelectedRendererIndex(anyInt());\n\n        verifyZeroInteractions(listBoxView, radioListView);\n    }", "signature": "void testSingleRenderer()", "full_signature": "@Test public void testSingleRenderer()", "class_method_signature": "RendererSelectorTest.testSingleRenderer()", "testcase": true, "constructor": false, "invocations": ["asList", "thenReturn", "when", "getRenderersForType", "any", "any", "thenReturn", "when", "getRendererForDisplayer", "init", "setVisible", "verify", "setWidth", "verify", "never", "anyInt", "clearRendererSelector", "verify", "never", "addRendererItem", "verify", "never", "anyString", "setSelectedRendererIndex", "verify", "never", "anyInt", "verifyZeroInteractions"]}, "focal_class": {"identifier": "RendererSelector", "superclass": "", "interfaces": "implements IsWidget", "fields": [{"original_string": "View tabListView;", "modifier": "", "type": "View", "declarator": "tabListView", "var_name": "tabListView"}, {"original_string": "View listBoxView;", "modifier": "", "type": "View", "declarator": "listBoxView", "var_name": "listBoxView"}, {"original_string": "View radioListView;", "modifier": "", "type": "View", "declarator": "radioListView", "var_name": "radioListView"}, {"original_string": "View view;", "modifier": "", "type": "View", "declarator": "view", "var_name": "view"}, {"original_string": "RendererManager rendererManager;", "modifier": "", "type": "RendererManager", "declarator": "rendererManager", "var_name": "rendererManager"}, {"original_string": "RendererLibrary rendererLibrary;", "modifier": "", "type": "RendererLibrary", "declarator": "rendererLibrary", "var_name": "rendererLibrary"}, {"original_string": "Command selectCommand;", "modifier": "", "type": "Command", "declarator": "selectCommand", "var_name": "selectCommand"}], "methods": [{"identifier": "RendererSelector", "parameters": "(TabListView tabListView,\n                            ListBoxView listBoxView,\n                            RadioListView radioListView,\n                            RendererManager rendererManager)", "modifiers": "@Inject public", "return": "", "signature": " RendererSelector(TabListView tabListView,\n                            ListBoxView listBoxView,\n                            RadioListView radioListView,\n                            RendererManager rendererManager)", "full_signature": "@Inject public  RendererSelector(TabListView tabListView,\n                            ListBoxView listBoxView,\n                            RadioListView radioListView,\n                            RendererManager rendererManager)", "class_method_signature": "RendererSelector.RendererSelector(TabListView tabListView,\n                            ListBoxView listBoxView,\n                            RadioListView radioListView,\n                            RendererManager rendererManager)", "testcase": false, "constructor": true}, {"identifier": "asWidget", "parameters": "()", "modifiers": "@Override public", "return": "Widget", "signature": "Widget asWidget()", "full_signature": "@Override public Widget asWidget()", "class_method_signature": "RendererSelector.asWidget()", "testcase": false, "constructor": false}, {"identifier": "getRendererLibrary", "parameters": "()", "modifiers": "public", "return": "RendererLibrary", "signature": "RendererLibrary getRendererLibrary()", "full_signature": "public RendererLibrary getRendererLibrary()", "class_method_signature": "RendererSelector.getRendererLibrary()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(DisplayerSettings displayerSettings,\n                     SelectorType selectorType, int width,\n                     Command onSelectCommand)", "modifiers": "public", "return": "void", "signature": "void init(DisplayerSettings displayerSettings,\n                     SelectorType selectorType, int width,\n                     Command onSelectCommand)", "full_signature": "public void init(DisplayerSettings displayerSettings,\n                     SelectorType selectorType, int width,\n                     Command onSelectCommand)", "class_method_signature": "RendererSelector.init(DisplayerSettings displayerSettings,\n                     SelectorType selectorType, int width,\n                     Command onSelectCommand)", "testcase": false, "constructor": false}, {"identifier": "onRendererSelected", "parameters": "()", "modifiers": "", "return": "void", "signature": "void onRendererSelected()", "full_signature": " void onRendererSelected()", "class_method_signature": "RendererSelector.onRendererSelected()", "testcase": false, "constructor": false}], "file": "dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/RendererSelector.java"}, "focal_method": {"identifier": "init", "parameters": "(DisplayerSettings displayerSettings,\n                     SelectorType selectorType, int width,\n                     Command onSelectCommand)", "modifiers": "public", "return": "void", "body": "public void init(DisplayerSettings displayerSettings,\n                     SelectorType selectorType, int width,\n                     Command onSelectCommand) {\n\n        // Choose the target view\n        switch (selectorType) {\n            case LIST:\n                view = listBoxView;\n                break;\n            case RADIO:\n                view = radioListView;\n                break;\n            case TAB:\n                view = tabListView;\n                break;\n        }\n\n        this.view.init(this);\n        this.selectCommand = onSelectCommand;\n\n        RendererLibrary rendererLibrary = rendererManager.getRendererForDisplayer(displayerSettings);\n        List<RendererLibrary> renderers = rendererManager.getRenderersForType(displayerSettings.getType(), displayerSettings.getSubtype());\n        if (renderers != null && renderers.size() > 1) {\n\n            view.setVisible(true);\n            view.setWidth(width);\n            view.clearRendererSelector();\n\n            // Build the selector\n            for (int i=0; i<renderers.size(); i++) {\n                RendererLibrary rendererLib = renderers.get(i);\n                view.addRendererItem(rendererLib.getName());\n\n                if (rendererLibrary != null && rendererLib.equals(rendererLibrary)) {\n                    view.setSelectedRendererIndex(i);\n                }\n            }\n        }\n        // If there is only one renderer in the list, do not show the selector.\n        else {\n            view.setVisible(false);\n        }\n    }", "signature": "void init(DisplayerSettings displayerSettings,\n                     SelectorType selectorType, int width,\n                     Command onSelectCommand)", "full_signature": "public void init(DisplayerSettings displayerSettings,\n                     SelectorType selectorType, int width,\n                     Command onSelectCommand)", "class_method_signature": "RendererSelector.init(DisplayerSettings displayerSettings,\n                     SelectorType selectorType, int width,\n                     Command onSelectCommand)", "testcase": false, "constructor": false, "invocations": ["init", "getRendererForDisplayer", "getRenderersForType", "getType", "getSubtype", "size", "setVisible", "setWidth", "clearRendererSelector", "size", "get", "addRendererItem", "getName", "equals", "setSelectedRendererIndex", "setVisible"]}, "repository": {"repo_id": 17898911, "url": "https://github.com/dashbuilder/dashbuilder", "language": "Java", "is_fork": false, "fork_count": 119, "stargazer_count": 160, "size": 10456, "license": "licensed"}}