{"test_class": {"identifier": "TableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LINE_END = System.lineSeparator();", "modifier": "private static final", "type": "String", "declarator": "LINE_END = System.lineSeparator()", "var_name": "LINE_END"}, {"original_string": "private static final int ROWS_BOUNDARY = 1000;", "modifier": "private static final", "type": "int", "declarator": "ROWS_BOUNDARY = 1000", "var_name": "ROWS_BOUNDARY"}, {"original_string": "private static final Random RANDOM = new Random();", "modifier": "private static final", "type": "Random", "declarator": "RANDOM = new Random()", "var_name": "RANDOM"}, {"original_string": "private Table table;", "modifier": "private", "type": "Table", "declarator": "table", "var_name": "table"}, {"original_string": "private DoubleColumn f1 = DoubleColumn.create(\"f1\");", "modifier": "private", "type": "DoubleColumn", "declarator": "f1 = DoubleColumn.create(\"f1\")", "var_name": "f1"}, {"original_string": "private DoubleColumn numberColumn = DoubleColumn.create(\"d1\");", "modifier": "private", "type": "DoubleColumn", "declarator": "numberColumn = DoubleColumn.create(\"d1\")", "var_name": "numberColumn"}], "file": "core/src/test/java/tech/tablesaw/api/TableTest.java"}, "test_case": {"identifier": "testAppendEmptyTableToNonEmptyTable", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testAppendEmptyTableToNonEmptyTable() {\n    populateColumn(f1);\n    assertFalse(table.isEmpty());\n    int initialSize = table.rowCount();\n    appendEmptyColumn(table);\n    assertTableColumnSize(table, f1, initialSize);\n  }", "signature": "void testAppendEmptyTableToNonEmptyTable()", "full_signature": "@Test void testAppendEmptyTableToNonEmptyTable()", "class_method_signature": "TableTest.testAppendEmptyTableToNonEmptyTable()", "testcase": true, "constructor": false, "invocations": ["populateColumn", "assertFalse", "isEmpty", "rowCount", "appendEmptyColumn", "assertTableColumnSize"]}, "focal_class": {"identifier": "Table", "superclass": "extends Relation", "interfaces": "implements Iterable<Row>", "fields": [{"original_string": "public static final ReaderRegistry defaultReaderRegistry = new ReaderRegistry();", "modifier": "public static final", "type": "ReaderRegistry", "declarator": "defaultReaderRegistry = new ReaderRegistry()", "var_name": "defaultReaderRegistry"}, {"original_string": "public static final WriterRegistry defaultWriterRegistry = new WriterRegistry();", "modifier": "public static final", "type": "WriterRegistry", "declarator": "defaultWriterRegistry = new WriterRegistry()", "var_name": "defaultWriterRegistry"}, {"original_string": "private final List<Column<?>> columnList = new ArrayList<>();", "modifier": "private final", "type": "List<Column<?>>", "declarator": "columnList = new ArrayList<>()", "var_name": "columnList"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}], "methods": [{"identifier": "Table", "parameters": "()", "modifiers": "private", "return": "", "signature": " Table()", "full_signature": "private  Table()", "class_method_signature": "Table.Table()", "testcase": false, "constructor": true}, {"identifier": "Table", "parameters": "(String name)", "modifiers": "private", "return": "", "signature": " Table(String name)", "full_signature": "private  Table(String name)", "class_method_signature": "Table.Table(String name)", "testcase": false, "constructor": true}, {"identifier": "Table", "parameters": "(String name, Column<?>... columns)", "modifiers": "protected", "return": "", "signature": " Table(String name, Column<?>... columns)", "full_signature": "protected  Table(String name, Column<?>... columns)", "class_method_signature": "Table.Table(String name, Column<?>... columns)", "testcase": false, "constructor": true}, {"identifier": "Table", "parameters": "(String name, Collection<Column<?>> columns)", "modifiers": "protected", "return": "", "signature": " Table(String name, Collection<Column<?>> columns)", "full_signature": "protected  Table(String name, Collection<Column<?>> columns)", "class_method_signature": "Table.Table(String name, Collection<Column<?>> columns)", "testcase": false, "constructor": true}, {"identifier": "autoRegisterReadersAndWriters", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void autoRegisterReadersAndWriters()", "full_signature": "private static void autoRegisterReadersAndWriters()", "class_method_signature": "Table.autoRegisterReadersAndWriters()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "()", "modifiers": "public static", "return": "Table", "signature": "Table create()", "full_signature": "public static Table create()", "class_method_signature": "Table.create()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String tableName)", "modifiers": "public static", "return": "Table", "signature": "Table create(String tableName)", "full_signature": "public static Table create(String tableName)", "class_method_signature": "Table.create(String tableName)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Column<?>... columns)", "modifiers": "public static", "return": "Table", "signature": "Table create(Column<?>... columns)", "full_signature": "public static Table create(Column<?>... columns)", "class_method_signature": "Table.create(Column<?>... columns)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Collection<Column<?>> columns)", "modifiers": "public static", "return": "Table", "signature": "Table create(Collection<Column<?>> columns)", "full_signature": "public static Table create(Collection<Column<?>> columns)", "class_method_signature": "Table.create(Collection<Column<?>> columns)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Stream<Column<?>> columns)", "modifiers": "public static", "return": "Table", "signature": "Table create(Stream<Column<?>> columns)", "full_signature": "public static Table create(Stream<Column<?>> columns)", "class_method_signature": "Table.create(Stream<Column<?>> columns)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, Column<?>... columns)", "modifiers": "public static", "return": "Table", "signature": "Table create(String name, Column<?>... columns)", "full_signature": "public static Table create(String name, Column<?>... columns)", "class_method_signature": "Table.create(String name, Column<?>... columns)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, Collection<Column<?>> columns)", "modifiers": "public static", "return": "Table", "signature": "Table create(String name, Collection<Column<?>> columns)", "full_signature": "public static Table create(String name, Collection<Column<?>> columns)", "class_method_signature": "Table.create(String name, Collection<Column<?>> columns)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, Stream<Column<?>> columns)", "modifiers": "public static", "return": "Table", "signature": "Table create(String name, Stream<Column<?>> columns)", "full_signature": "public static Table create(String name, Stream<Column<?>> columns)", "class_method_signature": "Table.create(String name, Stream<Column<?>> columns)", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "(String columnName, Sort.Order order)", "modifiers": "private static", "return": "Sort", "signature": "Sort first(String columnName, Sort.Order order)", "full_signature": "private static Sort first(String columnName, Sort.Order order)", "class_method_signature": "Table.first(String columnName, Sort.Order order)", "testcase": false, "constructor": false}, {"identifier": "getSort", "parameters": "(String... columnNames)", "modifiers": "private static", "return": "Sort", "signature": "Sort getSort(String... columnNames)", "full_signature": "private static Sort getSort(String... columnNames)", "class_method_signature": "Table.getSort(String... columnNames)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "()", "modifiers": "public static", "return": "DataFrameReader", "signature": "DataFrameReader read()", "full_signature": "public static DataFrameReader read()", "class_method_signature": "Table.read()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "()", "modifiers": "public", "return": "DataFrameWriter", "signature": "DataFrameWriter write()", "full_signature": "public DataFrameWriter write()", "class_method_signature": "Table.write()", "testcase": false, "constructor": false}, {"identifier": "addColumns", "parameters": "(final Column<?>... cols)", "modifiers": "@Override public", "return": "Table", "signature": "Table addColumns(final Column<?>... cols)", "full_signature": "@Override public Table addColumns(final Column<?>... cols)", "class_method_signature": "Table.addColumns(final Column<?>... cols)", "testcase": false, "constructor": false}, {"identifier": "internalAddWithoutValidation", "parameters": "(final Column<?> c)", "modifiers": "public", "return": "void", "signature": "void internalAddWithoutValidation(final Column<?> c)", "full_signature": "public void internalAddWithoutValidation(final Column<?> c)", "class_method_signature": "Table.internalAddWithoutValidation(final Column<?> c)", "testcase": false, "constructor": false}, {"identifier": "validateColumn", "parameters": "(final Column<?> newColumn)", "modifiers": "private", "return": "void", "signature": "void validateColumn(final Column<?> newColumn)", "full_signature": "private void validateColumn(final Column<?> newColumn)", "class_method_signature": "Table.validateColumn(final Column<?> newColumn)", "testcase": false, "constructor": false}, {"identifier": "checkColumnSize", "parameters": "(Column<?> newColumn)", "modifiers": "private", "return": "void", "signature": "void checkColumnSize(Column<?> newColumn)", "full_signature": "private void checkColumnSize(Column<?> newColumn)", "class_method_signature": "Table.checkColumnSize(Column<?> newColumn)", "testcase": false, "constructor": false}, {"identifier": "insertColumn", "parameters": "(int index, Column<?> column)", "modifiers": "public", "return": "Table", "signature": "Table insertColumn(int index, Column<?> column)", "full_signature": "public Table insertColumn(int index, Column<?> column)", "class_method_signature": "Table.insertColumn(int index, Column<?> column)", "testcase": false, "constructor": false}, {"identifier": "replaceColumn", "parameters": "(final int colIndex, final Column<?> newColumn)", "modifiers": "public", "return": "Table", "signature": "Table replaceColumn(final int colIndex, final Column<?> newColumn)", "full_signature": "public Table replaceColumn(final int colIndex, final Column<?> newColumn)", "class_method_signature": "Table.replaceColumn(final int colIndex, final Column<?> newColumn)", "testcase": false, "constructor": false}, {"identifier": "replaceColumn", "parameters": "(final String columnName, final Column<?> newColumn)", "modifiers": "public", "return": "Table", "signature": "Table replaceColumn(final String columnName, final Column<?> newColumn)", "full_signature": "public Table replaceColumn(final String columnName, final Column<?> newColumn)", "class_method_signature": "Table.replaceColumn(final String columnName, final Column<?> newColumn)", "testcase": false, "constructor": false}, {"identifier": "replaceColumn", "parameters": "(Column<?> newColumn)", "modifiers": "public", "return": "Table", "signature": "Table replaceColumn(Column<?> newColumn)", "full_signature": "public Table replaceColumn(Column<?> newColumn)", "class_method_signature": "Table.replaceColumn(Column<?> newColumn)", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "@Override public", "return": "Table", "signature": "Table setName(String name)", "full_signature": "@Override public Table setName(String name)", "class_method_signature": "Table.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "column", "parameters": "(int columnIndex)", "modifiers": "@Override public", "return": "Column<?>", "signature": "Column<?> column(int columnIndex)", "full_signature": "@Override public Column<?> column(int columnIndex)", "class_method_signature": "Table.column(int columnIndex)", "testcase": false, "constructor": false}, {"identifier": "columnCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int columnCount()", "full_signature": "@Override public int columnCount()", "class_method_signature": "Table.columnCount()", "testcase": false, "constructor": false}, {"identifier": "rowCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int rowCount()", "full_signature": "@Override public int rowCount()", "class_method_signature": "Table.rowCount()", "testcase": false, "constructor": false}, {"identifier": "columns", "parameters": "()", "modifiers": "@Override public", "return": "List<Column<?>>", "signature": "List<Column<?>> columns()", "full_signature": "@Override public List<Column<?>> columns()", "class_method_signature": "Table.columns()", "testcase": false, "constructor": false}, {"identifier": "columnArray", "parameters": "()", "modifiers": "public", "return": "Column<?>[]", "signature": "Column<?>[] columnArray()", "full_signature": "public Column<?>[] columnArray()", "class_method_signature": "Table.columnArray()", "testcase": false, "constructor": false}, {"identifier": "categoricalColumns", "parameters": "(String... columnNames)", "modifiers": "@Override public", "return": "List<CategoricalColumn<?>>", "signature": "List<CategoricalColumn<?>> categoricalColumns(String... columnNames)", "full_signature": "@Override public List<CategoricalColumn<?>> categoricalColumns(String... columnNames)", "class_method_signature": "Table.categoricalColumns(String... columnNames)", "testcase": false, "constructor": false}, {"identifier": "columnIndex", "parameters": "(String columnName)", "modifiers": "@Override public", "return": "int", "signature": "int columnIndex(String columnName)", "full_signature": "@Override public int columnIndex(String columnName)", "class_method_signature": "Table.columnIndex(String columnName)", "testcase": false, "constructor": false}, {"identifier": "columnIndex", "parameters": "(Column<?> column)", "modifiers": "public", "return": "int", "signature": "int columnIndex(Column<?> column)", "full_signature": "public int columnIndex(Column<?> column)", "class_method_signature": "Table.columnIndex(Column<?> column)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "Table.name()", "testcase": false, "constructor": false}, {"identifier": "columnNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> columnNames()", "full_signature": "public List<String> columnNames()", "class_method_signature": "Table.columnNames()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "public", "return": "Table", "signature": "Table copy()", "full_signature": "public Table copy()", "class_method_signature": "Table.copy()", "testcase": false, "constructor": false}, {"identifier": "emptyCopy", "parameters": "()", "modifiers": "public", "return": "Table", "signature": "Table emptyCopy()", "full_signature": "public Table emptyCopy()", "class_method_signature": "Table.emptyCopy()", "testcase": false, "constructor": false}, {"identifier": "emptyCopy", "parameters": "(int rowSize)", "modifiers": "public", "return": "Table", "signature": "Table emptyCopy(int rowSize)", "full_signature": "public Table emptyCopy(int rowSize)", "class_method_signature": "Table.emptyCopy(int rowSize)", "testcase": false, "constructor": false}, {"identifier": "sampleSplit", "parameters": "(double table1Proportion)", "modifiers": "public", "return": "Table[]", "signature": "Table[] sampleSplit(double table1Proportion)", "full_signature": "public Table[] sampleSplit(double table1Proportion)", "class_method_signature": "Table.sampleSplit(double table1Proportion)", "testcase": false, "constructor": false}, {"identifier": "stratifiedSampleSplit", "parameters": "(CategoricalColumn<?> column, double table1Proportion)", "modifiers": "public", "return": "Table[]", "signature": "Table[] stratifiedSampleSplit(CategoricalColumn<?> column, double table1Proportion)", "full_signature": "public Table[] stratifiedSampleSplit(CategoricalColumn<?> column, double table1Proportion)", "class_method_signature": "Table.stratifiedSampleSplit(CategoricalColumn<?> column, double table1Proportion)", "testcase": false, "constructor": false}, {"identifier": "sampleX", "parameters": "(double proportion)", "modifiers": "public", "return": "Table", "signature": "Table sampleX(double proportion)", "full_signature": "public Table sampleX(double proportion)", "class_method_signature": "Table.sampleX(double proportion)", "testcase": false, "constructor": false}, {"identifier": "sampleN", "parameters": "(int nRows)", "modifiers": "public", "return": "Table", "signature": "Table sampleN(int nRows)", "full_signature": "public Table sampleN(int nRows)", "class_method_signature": "Table.sampleN(int nRows)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "Table.clear()", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "(int nRows)", "modifiers": "public", "return": "Table", "signature": "Table first(int nRows)", "full_signature": "public Table first(int nRows)", "class_method_signature": "Table.first(int nRows)", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "(int nRows)", "modifiers": "public", "return": "Table", "signature": "Table last(int nRows)", "full_signature": "public Table last(int nRows)", "class_method_signature": "Table.last(int nRows)", "testcase": false, "constructor": false}, {"identifier": "sortOn", "parameters": "(int... columnIndexes)", "modifiers": "public", "return": "Table", "signature": "Table sortOn(int... columnIndexes)", "full_signature": "public Table sortOn(int... columnIndexes)", "class_method_signature": "Table.sortOn(int... columnIndexes)", "testcase": false, "constructor": false}, {"identifier": "sortOn", "parameters": "(String... columnNames)", "modifiers": "public", "return": "Table", "signature": "Table sortOn(String... columnNames)", "full_signature": "public Table sortOn(String... columnNames)", "class_method_signature": "Table.sortOn(String... columnNames)", "testcase": false, "constructor": false}, {"identifier": "sortAscendingOn", "parameters": "(String... columnNames)", "modifiers": "public", "return": "Table", "signature": "Table sortAscendingOn(String... columnNames)", "full_signature": "public Table sortAscendingOn(String... columnNames)", "class_method_signature": "Table.sortAscendingOn(String... columnNames)", "testcase": false, "constructor": false}, {"identifier": "sortDescendingOn", "parameters": "(String... columnNames)", "modifiers": "public", "return": "Table", "signature": "Table sortDescendingOn(String... columnNames)", "full_signature": "public Table sortDescendingOn(String... columnNames)", "class_method_signature": "Table.sortDescendingOn(String... columnNames)", "testcase": false, "constructor": false}, {"identifier": "sortOn", "parameters": "(Sort key)", "modifiers": "public", "return": "Table", "signature": "Table sortOn(Sort key)", "full_signature": "public Table sortOn(Sort key)", "class_method_signature": "Table.sortOn(Sort key)", "testcase": false, "constructor": false}, {"identifier": "sortOn", "parameters": "(IntComparator rowComparator)", "modifiers": "private", "return": "Table", "signature": "Table sortOn(IntComparator rowComparator)", "full_signature": "private Table sortOn(IntComparator rowComparator)", "class_method_signature": "Table.sortOn(IntComparator rowComparator)", "testcase": false, "constructor": false}, {"identifier": "sortOn", "parameters": "(Comparator<Row> rowComparator)", "modifiers": "public", "return": "Table", "signature": "Table sortOn(Comparator<Row> rowComparator)", "full_signature": "public Table sortOn(Comparator<Row> rowComparator)", "class_method_signature": "Table.sortOn(Comparator<Row> rowComparator)", "testcase": false, "constructor": false}, {"identifier": "rows", "parameters": "()", "modifiers": "private", "return": "int[]", "signature": "int[] rows()", "full_signature": "private int[] rows()", "class_method_signature": "Table.rows()", "testcase": false, "constructor": false}, {"identifier": "addRow", "parameters": "(int rowIndex, Table sourceTable)", "modifiers": "public", "return": "void", "signature": "void addRow(int rowIndex, Table sourceTable)", "full_signature": "public void addRow(int rowIndex, Table sourceTable)", "class_method_signature": "Table.addRow(int rowIndex, Table sourceTable)", "testcase": false, "constructor": false}, {"identifier": "addRow", "parameters": "(Row row)", "modifiers": "public", "return": "void", "signature": "void addRow(Row row)", "full_signature": "public void addRow(Row row)", "class_method_signature": "Table.addRow(Row row)", "testcase": false, "constructor": false}, {"identifier": "row", "parameters": "(int rowIndex)", "modifiers": "public", "return": "Row", "signature": "Row row(int rowIndex)", "full_signature": "public Row row(int rowIndex)", "class_method_signature": "Table.row(int rowIndex)", "testcase": false, "constructor": false}, {"identifier": "rows", "parameters": "(int... rowNumbers)", "modifiers": "public", "return": "Table", "signature": "Table rows(int... rowNumbers)", "full_signature": "public Table rows(int... rowNumbers)", "class_method_signature": "Table.rows(int... rowNumbers)", "testcase": false, "constructor": false}, {"identifier": "dropRows", "parameters": "(int... rowNumbers)", "modifiers": "public", "return": "Table", "signature": "Table dropRows(int... rowNumbers)", "full_signature": "public Table dropRows(int... rowNumbers)", "class_method_signature": "Table.dropRows(int... rowNumbers)", "testcase": false, "constructor": false}, {"identifier": "inRange", "parameters": "(int rowCount)", "modifiers": "public", "return": "Table", "signature": "Table inRange(int rowCount)", "full_signature": "public Table inRange(int rowCount)", "class_method_signature": "Table.inRange(int rowCount)", "testcase": false, "constructor": false}, {"identifier": "inRange", "parameters": "(int rowStart, int rowEnd)", "modifiers": "public", "return": "Table", "signature": "Table inRange(int rowStart, int rowEnd)", "full_signature": "public Table inRange(int rowStart, int rowEnd)", "class_method_signature": "Table.inRange(int rowStart, int rowEnd)", "testcase": false, "constructor": false}, {"identifier": "dropRange", "parameters": "(int rowCount)", "modifiers": "public", "return": "Table", "signature": "Table dropRange(int rowCount)", "full_signature": "public Table dropRange(int rowCount)", "class_method_signature": "Table.dropRange(int rowCount)", "testcase": false, "constructor": false}, {"identifier": "dropRange", "parameters": "(int rowStart, int rowEnd)", "modifiers": "public", "return": "Table", "signature": "Table dropRange(int rowStart, int rowEnd)", "full_signature": "public Table dropRange(int rowStart, int rowEnd)", "class_method_signature": "Table.dropRange(int rowStart, int rowEnd)", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(Selection selection)", "modifiers": "public", "return": "Table", "signature": "Table where(Selection selection)", "full_signature": "public Table where(Selection selection)", "class_method_signature": "Table.where(Selection selection)", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(Function<Table, Selection> selection)", "modifiers": "public", "return": "Table", "signature": "Table where(Function<Table, Selection> selection)", "full_signature": "public Table where(Function<Table, Selection> selection)", "class_method_signature": "Table.where(Function<Table, Selection> selection)", "testcase": false, "constructor": false}, {"identifier": "dropWhere", "parameters": "(Function<Table, Selection> selection)", "modifiers": "public", "return": "Table", "signature": "Table dropWhere(Function<Table, Selection> selection)", "full_signature": "public Table dropWhere(Function<Table, Selection> selection)", "class_method_signature": "Table.dropWhere(Function<Table, Selection> selection)", "testcase": false, "constructor": false}, {"identifier": "dropWhere", "parameters": "(Selection selection)", "modifiers": "public", "return": "Table", "signature": "Table dropWhere(Selection selection)", "full_signature": "public Table dropWhere(Selection selection)", "class_method_signature": "Table.dropWhere(Selection selection)", "testcase": false, "constructor": false}, {"identifier": "pivot", "parameters": "(\n      CategoricalColumn<?> column1,\n      CategoricalColumn<?> column2,\n      NumericColumn<?> column3,\n      AggregateFunction<?, ?> aggregateFunction)", "modifiers": "public", "return": "Table", "signature": "Table pivot(\n      CategoricalColumn<?> column1,\n      CategoricalColumn<?> column2,\n      NumericColumn<?> column3,\n      AggregateFunction<?, ?> aggregateFunction)", "full_signature": "public Table pivot(\n      CategoricalColumn<?> column1,\n      CategoricalColumn<?> column2,\n      NumericColumn<?> column3,\n      AggregateFunction<?, ?> aggregateFunction)", "class_method_signature": "Table.pivot(\n      CategoricalColumn<?> column1,\n      CategoricalColumn<?> column2,\n      NumericColumn<?> column3,\n      AggregateFunction<?, ?> aggregateFunction)", "testcase": false, "constructor": false}, {"identifier": "pivot", "parameters": "(\n      String column1Name,\n      String column2Name,\n      String column3Name,\n      AggregateFunction<?, ?> aggregateFunction)", "modifiers": "public", "return": "Table", "signature": "Table pivot(\n      String column1Name,\n      String column2Name,\n      String column3Name,\n      AggregateFunction<?, ?> aggregateFunction)", "full_signature": "public Table pivot(\n      String column1Name,\n      String column2Name,\n      String column3Name,\n      AggregateFunction<?, ?> aggregateFunction)", "class_method_signature": "Table.pivot(\n      String column1Name,\n      String column2Name,\n      String column3Name,\n      AggregateFunction<?, ?> aggregateFunction)", "testcase": false, "constructor": false}, {"identifier": "splitOn", "parameters": "(String... columns)", "modifiers": "public", "return": "TableSliceGroup", "signature": "TableSliceGroup splitOn(String... columns)", "full_signature": "public TableSliceGroup splitOn(String... columns)", "class_method_signature": "Table.splitOn(String... columns)", "testcase": false, "constructor": false}, {"identifier": "splitOn", "parameters": "(CategoricalColumn<?>... columns)", "modifiers": "public", "return": "TableSliceGroup", "signature": "TableSliceGroup splitOn(CategoricalColumn<?>... columns)", "full_signature": "public TableSliceGroup splitOn(CategoricalColumn<?>... columns)", "class_method_signature": "Table.splitOn(CategoricalColumn<?>... columns)", "testcase": false, "constructor": false}, {"identifier": "structure", "parameters": "()", "modifiers": "@Override public", "return": "Table", "signature": "Table structure()", "full_signature": "@Override public Table structure()", "class_method_signature": "Table.structure()", "testcase": false, "constructor": false}, {"identifier": "dropDuplicateRows", "parameters": "()", "modifiers": "public", "return": "Table", "signature": "Table dropDuplicateRows()", "full_signature": "public Table dropDuplicateRows()", "class_method_signature": "Table.dropDuplicateRows()", "testcase": false, "constructor": false}, {"identifier": "dropRowsWithMissingValues", "parameters": "()", "modifiers": "public", "return": "Table", "signature": "Table dropRowsWithMissingValues()", "full_signature": "public Table dropRowsWithMissingValues()", "class_method_signature": "Table.dropRowsWithMissingValues()", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(Column<?>... columns)", "modifiers": "public", "return": "Table", "signature": "Table select(Column<?>... columns)", "full_signature": "public Table select(Column<?>... columns)", "class_method_signature": "Table.select(Column<?>... columns)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(String... columnNames)", "modifiers": "public", "return": "Table", "signature": "Table select(String... columnNames)", "full_signature": "public Table select(String... columnNames)", "class_method_signature": "Table.select(String... columnNames)", "testcase": false, "constructor": false}, {"identifier": "removeColumns", "parameters": "(Column<?>... columns)", "modifiers": "@Override public", "return": "Table", "signature": "Table removeColumns(Column<?>... columns)", "full_signature": "@Override public Table removeColumns(Column<?>... columns)", "class_method_signature": "Table.removeColumns(Column<?>... columns)", "testcase": false, "constructor": false}, {"identifier": "removeColumnsWithMissingValues", "parameters": "()", "modifiers": "public", "return": "Table", "signature": "Table removeColumnsWithMissingValues()", "full_signature": "public Table removeColumnsWithMissingValues()", "class_method_signature": "Table.removeColumnsWithMissingValues()", "testcase": false, "constructor": false}, {"identifier": "retainColumns", "parameters": "(Column<?>... columns)", "modifiers": "public", "return": "Table", "signature": "Table retainColumns(Column<?>... columns)", "full_signature": "public Table retainColumns(Column<?>... columns)", "class_method_signature": "Table.retainColumns(Column<?>... columns)", "testcase": false, "constructor": false}, {"identifier": "retainColumns", "parameters": "(String... columnNames)", "modifiers": "public", "return": "Table", "signature": "Table retainColumns(String... columnNames)", "full_signature": "public Table retainColumns(String... columnNames)", "class_method_signature": "Table.retainColumns(String... columnNames)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(Table tableToAppend)", "modifiers": "@SuppressWarnings({\"rawtypes\", \"unchecked\"}) public", "return": "Table", "signature": "Table append(Table tableToAppend)", "full_signature": "@SuppressWarnings({\"rawtypes\", \"unchecked\"}) public Table append(Table tableToAppend)", "class_method_signature": "Table.append(Table tableToAppend)", "testcase": false, "constructor": false}, {"identifier": "appendRow", "parameters": "()", "modifiers": "public", "return": "Row", "signature": "Row appendRow()", "full_signature": "public Row appendRow()", "class_method_signature": "Table.appendRow()", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(Table tableToConcatenate)", "modifiers": "public", "return": "Table", "signature": "Table concat(Table tableToConcatenate)", "full_signature": "public Table concat(Table tableToConcatenate)", "class_method_signature": "Table.concat(Table tableToConcatenate)", "testcase": false, "constructor": false}, {"identifier": "summarize", "parameters": "(String columName, AggregateFunction<?, ?>... functions)", "modifiers": "public", "return": "Summarizer", "signature": "Summarizer summarize(String columName, AggregateFunction<?, ?>... functions)", "full_signature": "public Summarizer summarize(String columName, AggregateFunction<?, ?>... functions)", "class_method_signature": "Table.summarize(String columName, AggregateFunction<?, ?>... functions)", "testcase": false, "constructor": false}, {"identifier": "summarize", "parameters": "(List<String> columnNames, AggregateFunction<?, ?>... functions)", "modifiers": "public", "return": "Summarizer", "signature": "Summarizer summarize(List<String> columnNames, AggregateFunction<?, ?>... functions)", "full_signature": "public Summarizer summarize(List<String> columnNames, AggregateFunction<?, ?>... functions)", "class_method_signature": "Table.summarize(List<String> columnNames, AggregateFunction<?, ?>... functions)", "testcase": false, "constructor": false}, {"identifier": "summarize", "parameters": "(\n      String numericColumn1Name, String numericColumn2Name, AggregateFunction<?, ?>... functions)", "modifiers": "public", "return": "Summarizer", "signature": "Summarizer summarize(\n      String numericColumn1Name, String numericColumn2Name, AggregateFunction<?, ?>... functions)", "full_signature": "public Summarizer summarize(\n      String numericColumn1Name, String numericColumn2Name, AggregateFunction<?, ?>... functions)", "class_method_signature": "Table.summarize(\n      String numericColumn1Name, String numericColumn2Name, AggregateFunction<?, ?>... functions)", "testcase": false, "constructor": false}, {"identifier": "summarize", "parameters": "(\n      String col1Name, String col2Name, String col3Name, AggregateFunction<?, ?>... functions)", "modifiers": "public", "return": "Summarizer", "signature": "Summarizer summarize(\n      String col1Name, String col2Name, String col3Name, AggregateFunction<?, ?>... functions)", "full_signature": "public Summarizer summarize(\n      String col1Name, String col2Name, String col3Name, AggregateFunction<?, ?>... functions)", "class_method_signature": "Table.summarize(\n      String col1Name, String col2Name, String col3Name, AggregateFunction<?, ?>... functions)", "testcase": false, "constructor": false}, {"identifier": "summarize", "parameters": "(\n      String col1Name,\n      String col2Name,\n      String col3Name,\n      String col4Name,\n      AggregateFunction<?, ?>... functions)", "modifiers": "public", "return": "Summarizer", "signature": "Summarizer summarize(\n      String col1Name,\n      String col2Name,\n      String col3Name,\n      String col4Name,\n      AggregateFunction<?, ?>... functions)", "full_signature": "public Summarizer summarize(\n      String col1Name,\n      String col2Name,\n      String col3Name,\n      String col4Name,\n      AggregateFunction<?, ?>... functions)", "class_method_signature": "Table.summarize(\n      String col1Name,\n      String col2Name,\n      String col3Name,\n      String col4Name,\n      AggregateFunction<?, ?>... functions)", "testcase": false, "constructor": false}, {"identifier": "summarize", "parameters": "(Column<?> numberColumn, AggregateFunction<?, ?>... function)", "modifiers": "public", "return": "Summarizer", "signature": "Summarizer summarize(Column<?> numberColumn, AggregateFunction<?, ?>... function)", "full_signature": "public Summarizer summarize(Column<?> numberColumn, AggregateFunction<?, ?>... function)", "class_method_signature": "Table.summarize(Column<?> numberColumn, AggregateFunction<?, ?>... function)", "testcase": false, "constructor": false}, {"identifier": "summarize", "parameters": "(\n      Column<?> column1, Column<?> column2, AggregateFunction<?, ?>... function)", "modifiers": "public", "return": "Summarizer", "signature": "Summarizer summarize(\n      Column<?> column1, Column<?> column2, AggregateFunction<?, ?>... function)", "full_signature": "public Summarizer summarize(\n      Column<?> column1, Column<?> column2, AggregateFunction<?, ?>... function)", "class_method_signature": "Table.summarize(\n      Column<?> column1, Column<?> column2, AggregateFunction<?, ?>... function)", "testcase": false, "constructor": false}, {"identifier": "summarize", "parameters": "(\n      Column<?> column1,\n      Column<?> column2,\n      Column<?> column3,\n      AggregateFunction<?, ?>... function)", "modifiers": "public", "return": "Summarizer", "signature": "Summarizer summarize(\n      Column<?> column1,\n      Column<?> column2,\n      Column<?> column3,\n      AggregateFunction<?, ?>... function)", "full_signature": "public Summarizer summarize(\n      Column<?> column1,\n      Column<?> column2,\n      Column<?> column3,\n      AggregateFunction<?, ?>... function)", "class_method_signature": "Table.summarize(\n      Column<?> column1,\n      Column<?> column2,\n      Column<?> column3,\n      AggregateFunction<?, ?>... function)", "testcase": false, "constructor": false}, {"identifier": "summarize", "parameters": "(\n      Column<?> column1,\n      Column<?> column2,\n      Column<?> column3,\n      Column<?> column4,\n      AggregateFunction<?, ?>... function)", "modifiers": "public", "return": "Summarizer", "signature": "Summarizer summarize(\n      Column<?> column1,\n      Column<?> column2,\n      Column<?> column3,\n      Column<?> column4,\n      AggregateFunction<?, ?>... function)", "full_signature": "public Summarizer summarize(\n      Column<?> column1,\n      Column<?> column2,\n      Column<?> column3,\n      Column<?> column4,\n      AggregateFunction<?, ?>... function)", "class_method_signature": "Table.summarize(\n      Column<?> column1,\n      Column<?> column2,\n      Column<?> column3,\n      Column<?> column4,\n      AggregateFunction<?, ?>... function)", "testcase": false, "constructor": false}, {"identifier": "xTabCounts", "parameters": "(String column1Name, String column2Name)", "modifiers": "public", "return": "Table", "signature": "Table xTabCounts(String column1Name, String column2Name)", "full_signature": "public Table xTabCounts(String column1Name, String column2Name)", "class_method_signature": "Table.xTabCounts(String column1Name, String column2Name)", "testcase": false, "constructor": false}, {"identifier": "xTabRowPercents", "parameters": "(String column1Name, String column2Name)", "modifiers": "public", "return": "Table", "signature": "Table xTabRowPercents(String column1Name, String column2Name)", "full_signature": "public Table xTabRowPercents(String column1Name, String column2Name)", "class_method_signature": "Table.xTabRowPercents(String column1Name, String column2Name)", "testcase": false, "constructor": false}, {"identifier": "xTabColumnPercents", "parameters": "(String column1Name, String column2Name)", "modifiers": "public", "return": "Table", "signature": "Table xTabColumnPercents(String column1Name, String column2Name)", "full_signature": "public Table xTabColumnPercents(String column1Name, String column2Name)", "class_method_signature": "Table.xTabColumnPercents(String column1Name, String column2Name)", "testcase": false, "constructor": false}, {"identifier": "xTabTablePercents", "parameters": "(String column1Name, String column2Name)", "modifiers": "public", "return": "Table", "signature": "Table xTabTablePercents(String column1Name, String column2Name)", "full_signature": "public Table xTabTablePercents(String column1Name, String column2Name)", "class_method_signature": "Table.xTabTablePercents(String column1Name, String column2Name)", "testcase": false, "constructor": false}, {"identifier": "xTabPercents", "parameters": "(String column1Name)", "modifiers": "public", "return": "Table", "signature": "Table xTabPercents(String column1Name)", "full_signature": "public Table xTabPercents(String column1Name)", "class_method_signature": "Table.xTabPercents(String column1Name)", "testcase": false, "constructor": false}, {"identifier": "xTabCounts", "parameters": "(String column1Name)", "modifiers": "public", "return": "Table", "signature": "Table xTabCounts(String column1Name)", "full_signature": "public Table xTabCounts(String column1Name)", "class_method_signature": "Table.xTabCounts(String column1Name)", "testcase": false, "constructor": false}, {"identifier": "countBy", "parameters": "(CategoricalColumn<?> groupingColumn)", "modifiers": "public", "return": "Table", "signature": "Table countBy(CategoricalColumn<?> groupingColumn)", "full_signature": "public Table countBy(CategoricalColumn<?> groupingColumn)", "class_method_signature": "Table.countBy(CategoricalColumn<?> groupingColumn)", "testcase": false, "constructor": false}, {"identifier": "countBy", "parameters": "(String categoricalColumnName)", "modifiers": "public", "return": "Table", "signature": "Table countBy(String categoricalColumnName)", "full_signature": "public Table countBy(String categoricalColumnName)", "class_method_signature": "Table.countBy(String categoricalColumnName)", "testcase": false, "constructor": false}, {"identifier": "joinOn", "parameters": "(String... columnNames)", "modifiers": "public", "return": "DataFrameJoiner", "signature": "DataFrameJoiner joinOn(String... columnNames)", "full_signature": "public DataFrameJoiner joinOn(String... columnNames)", "class_method_signature": "Table.joinOn(String... columnNames)", "testcase": false, "constructor": false}, {"identifier": "missingValueCounts", "parameters": "()", "modifiers": "public", "return": "Table", "signature": "Table missingValueCounts()", "full_signature": "public Table missingValueCounts()", "class_method_signature": "Table.missingValueCounts()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Row>", "signature": "Iterator<Row> iterator()", "full_signature": "@Override public Iterator<Row> iterator()", "class_method_signature": "Table.iterator()", "testcase": false, "constructor": false}, {"identifier": "rollingIterator", "parameters": "(int n)", "modifiers": "public", "return": "Iterator<Row[]>", "signature": "Iterator<Row[]> rollingIterator(int n)", "full_signature": "public Iterator<Row[]> rollingIterator(int n)", "class_method_signature": "Table.rollingIterator(int n)", "testcase": false, "constructor": false}, {"identifier": "steppingIterator", "parameters": "(int n)", "modifiers": "public", "return": "Iterator<Row[]>", "signature": "Iterator<Row[]> steppingIterator(int n)", "full_signature": "public Iterator<Row[]> steppingIterator(int n)", "class_method_signature": "Table.steppingIterator(int n)", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "()", "modifiers": "public", "return": "Stream<Row>", "signature": "Stream<Row> stream()", "full_signature": "public Stream<Row> stream()", "class_method_signature": "Table.stream()", "testcase": false, "constructor": false}, {"identifier": "steppingStream", "parameters": "(int n)", "modifiers": "public", "return": "Stream<Row[]>", "signature": "Stream<Row[]> steppingStream(int n)", "full_signature": "public Stream<Row[]> steppingStream(int n)", "class_method_signature": "Table.steppingStream(int n)", "testcase": false, "constructor": false}, {"identifier": "rollingStream", "parameters": "(int n)", "modifiers": "public", "return": "Stream<Row[]>", "signature": "Stream<Row[]> rollingStream(int n)", "full_signature": "public Stream<Row[]> rollingStream(int n)", "class_method_signature": "Table.rollingStream(int n)", "testcase": false, "constructor": false}, {"identifier": "transpose", "parameters": "()", "modifiers": "public", "return": "Table", "signature": "Table transpose()", "full_signature": "public Table transpose()", "class_method_signature": "Table.transpose()", "testcase": false, "constructor": false}, {"identifier": "transpose", "parameters": "(\n      boolean includeColumnHeadingsAsFirstColumn, boolean useFirstColumnForHeadings)", "modifiers": "public", "return": "Table", "signature": "Table transpose(\n      boolean includeColumnHeadingsAsFirstColumn, boolean useFirstColumnForHeadings)", "full_signature": "public Table transpose(\n      boolean includeColumnHeadingsAsFirstColumn, boolean useFirstColumnForHeadings)", "class_method_signature": "Table.transpose(\n      boolean includeColumnHeadingsAsFirstColumn, boolean useFirstColumnForHeadings)", "testcase": false, "constructor": false}, {"identifier": "validateTableHasSingleColumnType", "parameters": "(int startingColumn)", "modifiers": "private", "return": "ColumnType", "signature": "ColumnType validateTableHasSingleColumnType(int startingColumn)", "full_signature": "private ColumnType validateTableHasSingleColumnType(int startingColumn)", "class_method_signature": "Table.validateTableHasSingleColumnType(int startingColumn)", "testcase": false, "constructor": false}, {"identifier": "transpose", "parameters": "(\n      Table transposed,\n      ColumnType resultColumnType,\n      IntFunction<String> columnNameExtractor,\n      int startingColumn)", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) private", "return": "Table", "signature": "Table transpose(\n      Table transposed,\n      ColumnType resultColumnType,\n      IntFunction<String> columnNameExtractor,\n      int startingColumn)", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) private Table transpose(\n      Table transposed,\n      ColumnType resultColumnType,\n      IntFunction<String> columnNameExtractor,\n      int startingColumn)", "class_method_signature": "Table.transpose(\n      Table transposed,\n      ColumnType resultColumnType,\n      IntFunction<String> columnNameExtractor,\n      int startingColumn)", "testcase": false, "constructor": false}, {"identifier": "doWithRows", "parameters": "(Consumer<Row> doable)", "modifiers": "@Deprecated public", "return": "void", "signature": "void doWithRows(Consumer<Row> doable)", "full_signature": "@Deprecated public void doWithRows(Consumer<Row> doable)", "class_method_signature": "Table.doWithRows(Consumer<Row> doable)", "testcase": false, "constructor": false}, {"identifier": "detect", "parameters": "(Predicate<Row> predicate)", "modifiers": "@Deprecated public", "return": "boolean", "signature": "boolean detect(Predicate<Row> predicate)", "full_signature": "@Deprecated public boolean detect(Predicate<Row> predicate)", "class_method_signature": "Table.detect(Predicate<Row> predicate)", "testcase": false, "constructor": false}, {"identifier": "stepWithRows", "parameters": "(Consumer<Row[]> rowConsumer, int n)", "modifiers": "@Deprecated public", "return": "void", "signature": "void stepWithRows(Consumer<Row[]> rowConsumer, int n)", "full_signature": "@Deprecated public void stepWithRows(Consumer<Row[]> rowConsumer, int n)", "class_method_signature": "Table.stepWithRows(Consumer<Row[]> rowConsumer, int n)", "testcase": false, "constructor": false}, {"identifier": "doWithRows", "parameters": "(Pairs pairs)", "modifiers": "@Deprecated public", "return": "void", "signature": "void doWithRows(Pairs pairs)", "full_signature": "@Deprecated public void doWithRows(Pairs pairs)", "class_method_signature": "Table.doWithRows(Pairs pairs)", "testcase": false, "constructor": false}, {"identifier": "doWithRowPairs", "parameters": "(Consumer<RowPair> pairConsumer)", "modifiers": "@Deprecated public", "return": "void", "signature": "void doWithRowPairs(Consumer<RowPair> pairConsumer)", "full_signature": "@Deprecated public void doWithRowPairs(Consumer<RowPair> pairConsumer)", "class_method_signature": "Table.doWithRowPairs(Consumer<RowPair> pairConsumer)", "testcase": false, "constructor": false}, {"identifier": "rollWithRows", "parameters": "(Consumer<Row[]> rowConsumer, int n)", "modifiers": "@Deprecated public", "return": "void", "signature": "void rollWithRows(Consumer<Row[]> rowConsumer, int n)", "full_signature": "@Deprecated public void rollWithRows(Consumer<Row[]> rowConsumer, int n)", "class_method_signature": "Table.rollWithRows(Consumer<Row[]> rowConsumer, int n)", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/api/Table.java"}, "focal_method": {"identifier": "rowCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int rowCount() {\n    int result = 0;\n    if (!columnList.isEmpty()) {\n      // all the columns have the same number of elements, so we can check any of them\n      result = columnList.get(0).size();\n    }\n    return result;\n  }", "signature": "int rowCount()", "full_signature": "@Override public int rowCount()", "class_method_signature": "Table.rowCount()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "size", "get"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}