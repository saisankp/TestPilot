{"test_class": {"identifier": "HttpRequestTransformerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PREFIX = \"prefix\";", "modifier": "private static final", "type": "String", "declarator": "PREFIX = \"prefix\"", "var_name": "PREFIX"}, {"original_string": "private Header[] headers;", "modifier": "private", "type": "Header[]", "declarator": "headers", "var_name": "headers"}, {"original_string": "@Mock\n    private WilmaHttpRequest wilmaHttpRequest;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "wilmaHttpRequest", "var_name": "wilmaHttpRequest"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private BrowserMobHttpRequest browserMobHttpRequest;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private", "type": "BrowserMobHttpRequest", "declarator": "browserMobHttpRequest", "var_name": "browserMobHttpRequest"}, {"original_string": "@Mock\n    private InputStream clonedInputStream;", "modifier": "@Mock\n    private", "type": "InputStream", "declarator": "clonedInputStream", "var_name": "clonedInputStream"}, {"original_string": "@Mock\n    private InputStreamConverter inputStreamConverter;", "modifier": "@Mock\n    private", "type": "InputStreamConverter", "declarator": "inputStreamConverter", "var_name": "inputStreamConverter"}, {"original_string": "@Mock\n    private RequestLine requestLine;", "modifier": "@Mock\n    private", "type": "RequestLine", "declarator": "requestLine", "var_name": "requestLine"}, {"original_string": "@Mock\n    private Header header;", "modifier": "@Mock\n    private", "type": "Header", "declarator": "header", "var_name": "header"}, {"original_string": "@Mock\n    private MessageConfigurationAccess configurationAccess;", "modifier": "@Mock\n    private", "type": "MessageConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "@Mock\n    private WilmaRequestFactory requestFactory;", "modifier": "@Mock\n    private", "type": "WilmaRequestFactory", "declarator": "requestFactory", "var_name": "requestFactory"}, {"original_string": "@InjectMocks\n    private HttpRequestTransformer underTest;", "modifier": "@InjectMocks\n    private", "type": "HttpRequestTransformer", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-browsermob-integration/src/test/java/com/epam/wilma/browsermob/transformer/HttpRequestTransformerTest.java"}, "test_case": {"identifier": "testTransformRequestShouldSetWilmaMessageId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTransformRequestShouldSetWilmaMessageId() throws ApplicationException {\n        //GIVEN\n        setMocksForHeader();\n        setMocksForMessageConfiguration();\n        given(browserMobHttpRequest.getWilmaMessageId()).willReturn(PREFIX);\n        //WHEN\n        WilmaHttpRequest actual = underTest.transformRequest(browserMobHttpRequest);\n        //THEN\n        verify(wilmaHttpRequest).setWilmaMessageId(PREFIX + \"_\" + PREFIX);\n    }", "signature": "void testTransformRequestShouldSetWilmaMessageId()", "full_signature": "@Test public void testTransformRequestShouldSetWilmaMessageId()", "class_method_signature": "HttpRequestTransformerTest.testTransformRequestShouldSetWilmaMessageId()", "testcase": true, "constructor": false, "invocations": ["setMocksForHeader", "setMocksForMessageConfiguration", "willReturn", "given", "getWilmaMessageId", "transformRequest", "setWilmaMessageId", "verify"]}, "focal_class": {"identifier": "HttpRequestTransformer", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private InputStreamConverter inputStreamConverter;", "modifier": "@Autowired\n    private", "type": "InputStreamConverter", "declarator": "inputStreamConverter", "var_name": "inputStreamConverter"}, {"original_string": "@Autowired\n    private WilmaRequestFactory requestFactory;", "modifier": "@Autowired\n    private", "type": "WilmaRequestFactory", "declarator": "requestFactory", "var_name": "requestFactory"}, {"original_string": "@Autowired\n    private MessageConfigurationAccess configurationAccess;", "modifier": "@Autowired\n    private", "type": "MessageConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}], "methods": [{"identifier": "transformRequest", "parameters": "(final BrowserMobHttpRequest browserMobHttpRequest)", "modifiers": "public", "return": "WilmaHttpRequest", "signature": "WilmaHttpRequest transformRequest(final BrowserMobHttpRequest browserMobHttpRequest)", "full_signature": "public WilmaHttpRequest transformRequest(final BrowserMobHttpRequest browserMobHttpRequest)", "class_method_signature": "HttpRequestTransformer.transformRequest(final BrowserMobHttpRequest browserMobHttpRequest)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-browsermob-integration/src/main/java/com/epam/wilma/browsermob/transformer/HttpRequestTransformer.java"}, "focal_method": {"identifier": "transformRequest", "parameters": "(final BrowserMobHttpRequest browserMobHttpRequest)", "modifiers": "public", "return": "WilmaHttpRequest", "body": "public WilmaHttpRequest transformRequest(final BrowserMobHttpRequest browserMobHttpRequest) throws ApplicationException {\n        WilmaHttpRequest result = requestFactory.createNewWilmaHttpRequest();\n        HttpRequestBase requestBase = browserMobHttpRequest.getMethod();\n        result.setRequestLine(requestBase.getRequestLine().toString());\n        for (Header header : requestBase.getAllHeaders()) {\n            result.addHeader(header.getName(), header.getValue());\n        }\n        InputStream clonedInputStream = browserMobHttpRequest.getPlayGround();\n        result.setInputStream(clonedInputStream);\n        result.setBody(inputStreamConverter.getStringFromStream(clonedInputStream));\n        result.setUri(requestBase.getURI());\n        result.setResponseVolatile(browserMobHttpRequest.getResponseVolatile());\n        //prepare instance prefix\n        MessagePropertyDTO properties = configurationAccess.getProperties();\n        String instancePrefix = properties.getInstancePrefix();\n        if (instancePrefix != null) {\n            instancePrefix += \"_\";  // \"prefix_\"\n        } else {\n            instancePrefix = \"\";\n        }\n\n        //set Wilma Message Id\n        result.setWilmaMessageId(instancePrefix + browserMobHttpRequest.getWilmaMessageId());\n\n        //set remote addr\n        String ipAddress = browserMobHttpRequest.getProxyRequest().getRemoteAddr();\n        result.setRemoteAddr(ipAddress);\n\n        return result;\n    }", "signature": "WilmaHttpRequest transformRequest(final BrowserMobHttpRequest browserMobHttpRequest)", "full_signature": "public WilmaHttpRequest transformRequest(final BrowserMobHttpRequest browserMobHttpRequest)", "class_method_signature": "HttpRequestTransformer.transformRequest(final BrowserMobHttpRequest browserMobHttpRequest)", "testcase": false, "constructor": false, "invocations": ["createNewWilmaHttpRequest", "getMethod", "setRequestLine", "toString", "getRequestLine", "getAllHeaders", "addHeader", "getName", "getValue", "getPlayGround", "setInputStream", "setBody", "getStringFromStream", "setUri", "getURI", "setResponseVolatile", "getResponseVolatile", "getProperties", "getInstancePrefix", "setWilmaMessageId", "getWilmaMessageId", "getRemoteAddr", "getProxyRequest", "setRemoteAddr"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}