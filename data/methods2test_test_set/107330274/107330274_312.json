{"test_class": {"identifier": "KubeUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FARZONE_A = \"farzoneA\";", "modifier": "private static final", "type": "String", "declarator": "FARZONE_A = \"farzoneA\"", "var_name": "FARZONE_A"}, {"original_string": "private static final String FARZONE_B = \"farzoneB\";", "modifier": "private static final", "type": "String", "declarator": "FARZONE_B = \"farzoneB\"", "var_name": "FARZONE_B"}, {"original_string": "private static final String NOT_FARZONE = \"notFarzone\";", "modifier": "private static final", "type": "String", "declarator": "NOT_FARZONE = \"notFarzone\"", "var_name": "NOT_FARZONE"}, {"original_string": "private static final List<String> FARZONES = asList(FARZONE_A, FARZONE_B);", "modifier": "private static final", "type": "List<String>", "declarator": "FARZONES = asList(FARZONE_A, FARZONE_B)", "var_name": "FARZONES"}, {"original_string": "private static final V1Node NODE_WITHOUT_ZONE = new V1Node().metadata(new V1ObjectMeta().labels(Collections.emptyMap()));", "modifier": "private static final", "type": "V1Node", "declarator": "NODE_WITHOUT_ZONE = new V1Node().metadata(new V1ObjectMeta().labels(Collections.emptyMap()))", "var_name": "NODE_WITHOUT_ZONE"}, {"original_string": "private static final V1Taint TAINT_SCHEDULER_FENZO = new V1Taint().key(KubeConstants.TAINT_SCHEDULER).value(KubeConstants.TAINT_SCHEDULER_VALUE_FENZO);", "modifier": "private static final", "type": "V1Taint", "declarator": "TAINT_SCHEDULER_FENZO = new V1Taint().key(KubeConstants.TAINT_SCHEDULER).value(KubeConstants.TAINT_SCHEDULER_VALUE_FENZO)", "var_name": "TAINT_SCHEDULER_FENZO"}, {"original_string": "private static final V1Taint TAINT_SCHEDULER_OTHER = new V1Taint().key(KubeConstants.TAINT_SCHEDULER).value(KubeConstants.TAINT_SCHEDULER_VALUE_KUBE);", "modifier": "private static final", "type": "V1Taint", "declarator": "TAINT_SCHEDULER_OTHER = new V1Taint().key(KubeConstants.TAINT_SCHEDULER).value(KubeConstants.TAINT_SCHEDULER_VALUE_KUBE)", "var_name": "TAINT_SCHEDULER_OTHER"}, {"original_string": "private static final V1Taint TAINT_NODE_UNINITIALIZED = new V1Taint().key(KubeConstants.TAINT_NODE_UNINITIALIZED).value(\"someValue\");", "modifier": "private static final", "type": "V1Taint", "declarator": "TAINT_NODE_UNINITIALIZED = new V1Taint().key(KubeConstants.TAINT_NODE_UNINITIALIZED).value(\"someValue\")", "var_name": "TAINT_NODE_UNINITIALIZED"}, {"original_string": "private static final V1Taint TAINT_TOLERATED_TAINT_1 = new V1Taint().key(\"toleratedTaint1\").value(\"someValue\");", "modifier": "private static final", "type": "V1Taint", "declarator": "TAINT_TOLERATED_TAINT_1 = new V1Taint().key(\"toleratedTaint1\").value(\"someValue\")", "var_name": "TAINT_TOLERATED_TAINT_1"}, {"original_string": "private static final V1Taint TAINT_TOLERATED_TAINT_2 = new V1Taint().key(\"toleratedTaint2\").value(\"someValue\");", "modifier": "private static final", "type": "V1Taint", "declarator": "TAINT_TOLERATED_TAINT_2 = new V1Taint().key(\"toleratedTaint2\").value(\"someValue\")", "var_name": "TAINT_TOLERATED_TAINT_2"}, {"original_string": "private static final V1Taint TAINT_NOT_TOLERATED_TAINT = new V1Taint().key(\"notToleratedTaint\").value(\"someValue\");", "modifier": "private static final", "type": "V1Taint", "declarator": "TAINT_NOT_TOLERATED_TAINT = new V1Taint().key(\"notToleratedTaint\").value(\"someValue\")", "var_name": "TAINT_NOT_TOLERATED_TAINT"}, {"original_string": "private static final Set<String> TOLERATED_TAINTS = asSet(TAINT_TOLERATED_TAINT_1.getKey(), TAINT_TOLERATED_TAINT_2.getKey());", "modifier": "private static final", "type": "Set<String>", "declarator": "TOLERATED_TAINTS = asSet(TAINT_TOLERATED_TAINT_1.getKey(), TAINT_TOLERATED_TAINT_2.getKey())", "var_name": "TOLERATED_TAINTS"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtilTest.java"}, "test_case": {"identifier": "testIsFarzone", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsFarzone() {\n        assertThat(KubeUtil.isFarzoneNode(FARZONES, newNodeInZone(FARZONE_A))).isTrue();\n        assertThat(KubeUtil.isFarzoneNode(asList(FARZONE_A, \"farzoneB\"), newNodeInZone(NOT_FARZONE))).isFalse();\n        assertThat(KubeUtil.isFarzoneNode(asList(FARZONE_A, \"farzoneB\"), NODE_WITHOUT_ZONE)).isFalse();\n    }", "signature": "void testIsFarzone()", "full_signature": "@Test public void testIsFarzone()", "class_method_signature": "KubeUtilTest.testIsFarzone()", "testcase": true, "constructor": false, "invocations": ["isTrue", "assertThat", "isFarzoneNode", "newNodeInZone", "isFalse", "assertThat", "isFarzoneNode", "asList", "newNodeInZone", "isFalse", "assertThat", "isFarzoneNode", "asList"]}, "focal_class": {"identifier": "KubeUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(KubeUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(KubeUtil.class)", "var_name": "logger"}, {"original_string": "private static final String SUCCEEDED = \"Succeeded\";", "modifier": "private static final", "type": "String", "declarator": "SUCCEEDED = \"Succeeded\"", "var_name": "SUCCEEDED"}, {"original_string": "private static final String FAILED = \"Failed\";", "modifier": "private static final", "type": "String", "declarator": "FAILED = \"Failed\"", "var_name": "FAILED"}, {"original_string": "public static final String TYPE_INTERNAL_IP = \"InternalIP\";", "modifier": "public static final", "type": "String", "declarator": "TYPE_INTERNAL_IP = \"InternalIP\"", "var_name": "TYPE_INTERNAL_IP"}, {"original_string": "private static final JsonFormat.Printer grpcJsonPrinter = JsonFormat.printer().includingDefaultValueFields();", "modifier": "private static final", "type": "JsonFormat.Printer", "declarator": "grpcJsonPrinter = JsonFormat.printer().includingDefaultValueFields()", "var_name": "grpcJsonPrinter"}, {"original_string": "private static final Gson GSON = new Gson();", "modifier": "private static final", "type": "Gson", "declarator": "GSON = new Gson()", "var_name": "GSON"}], "methods": [{"identifier": "estimatePodSize", "parameters": "(V1Pod v1Pod)", "modifiers": "public static", "return": "int", "signature": "int estimatePodSize(V1Pod v1Pod)", "full_signature": "public static int estimatePodSize(V1Pod v1Pod)", "class_method_signature": "KubeUtil.estimatePodSize(V1Pod v1Pod)", "testcase": false, "constructor": false}, {"identifier": "isPodPhaseTerminal", "parameters": "(String phase)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPodPhaseTerminal(String phase)", "full_signature": "public static boolean isPodPhaseTerminal(String phase)", "class_method_signature": "KubeUtil.isPodPhaseTerminal(String phase)", "testcase": false, "constructor": false}, {"identifier": "findFinishedTimestamp", "parameters": "(V1Pod pod)", "modifiers": "public static", "return": "Optional<Long>", "signature": "Optional<Long> findFinishedTimestamp(V1Pod pod)", "full_signature": "public static Optional<Long> findFinishedTimestamp(V1Pod pod)", "class_method_signature": "KubeUtil.findFinishedTimestamp(V1Pod pod)", "testcase": false, "constructor": false}, {"identifier": "getTitusExecutorDetails", "parameters": "(V1Pod pod)", "modifiers": "public static", "return": "Optional<TitusExecutorDetails>", "signature": "Optional<TitusExecutorDetails> getTitusExecutorDetails(V1Pod pod)", "full_signature": "public static Optional<TitusExecutorDetails> getTitusExecutorDetails(V1Pod pod)", "class_method_signature": "KubeUtil.getTitusExecutorDetails(V1Pod pod)", "testcase": false, "constructor": false}, {"identifier": "findContainerState", "parameters": "(V1Pod pod)", "modifiers": "public static", "return": "Optional<V1ContainerState>", "signature": "Optional<V1ContainerState> findContainerState(V1Pod pod)", "full_signature": "public static Optional<V1ContainerState> findContainerState(V1Pod pod)", "class_method_signature": "KubeUtil.findContainerState(V1Pod pod)", "testcase": false, "constructor": false}, {"identifier": "findTerminatedContainerStatus", "parameters": "(V1Pod pod)", "modifiers": "public static", "return": "Optional<V1ContainerStateTerminated>", "signature": "Optional<V1ContainerStateTerminated> findTerminatedContainerStatus(V1Pod pod)", "full_signature": "public static Optional<V1ContainerStateTerminated> findTerminatedContainerStatus(V1Pod pod)", "class_method_signature": "KubeUtil.findTerminatedContainerStatus(V1Pod pod)", "testcase": false, "constructor": false}, {"identifier": "formatV1ContainerState", "parameters": "(V1ContainerState containerState)", "modifiers": "public static", "return": "String", "signature": "String formatV1ContainerState(V1ContainerState containerState)", "full_signature": "public static String formatV1ContainerState(V1ContainerState containerState)", "class_method_signature": "KubeUtil.formatV1ContainerState(V1ContainerState containerState)", "testcase": false, "constructor": false}, {"identifier": "findFarzoneId", "parameters": "(DirectKubeConfiguration configuration, Job job)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> findFarzoneId(DirectKubeConfiguration configuration, Job job)", "full_signature": "public static Optional<String> findFarzoneId(DirectKubeConfiguration configuration, Job job)", "class_method_signature": "KubeUtil.findFarzoneId(DirectKubeConfiguration configuration, Job job)", "testcase": false, "constructor": false}, {"identifier": "isOwnedByKubeScheduler", "parameters": "(V1Pod v1Pod)", "modifiers": "public static", "return": "boolean", "signature": "boolean isOwnedByKubeScheduler(V1Pod v1Pod)", "full_signature": "public static boolean isOwnedByKubeScheduler(V1Pod v1Pod)", "class_method_signature": "KubeUtil.isOwnedByKubeScheduler(V1Pod v1Pod)", "testcase": false, "constructor": false}, {"identifier": "getNodeIpV4Address", "parameters": "(V1Node node)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> getNodeIpV4Address(V1Node node)", "full_signature": "public static Optional<String> getNodeIpV4Address(V1Node node)", "class_method_signature": "KubeUtil.getNodeIpV4Address(V1Node node)", "testcase": false, "constructor": false}, {"identifier": "createPodAnnotations", "parameters": "(\n            Job<?> job,\n            Task task,\n            byte[] containerInfoData,\n            Map<String, String> passthroughAttributes,\n            boolean includeJobDescriptor\n    )", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> createPodAnnotations(\n            Job<?> job,\n            Task task,\n            byte[] containerInfoData,\n            Map<String, String> passthroughAttributes,\n            boolean includeJobDescriptor\n    )", "full_signature": "public static Map<String, String> createPodAnnotations(\n            Job<?> job,\n            Task task,\n            byte[] containerInfoData,\n            Map<String, String> passthroughAttributes,\n            boolean includeJobDescriptor\n    )", "class_method_signature": "KubeUtil.createPodAnnotations(\n            Job<?> job,\n            Task task,\n            byte[] containerInfoData,\n            Map<String, String> passthroughAttributes,\n            boolean includeJobDescriptor\n    )", "testcase": false, "constructor": false}, {"identifier": "createPodAnnotationsFromJobParameters", "parameters": "(Job<?> job)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> createPodAnnotationsFromJobParameters(Job<?> job)", "full_signature": "public static Map<String, String> createPodAnnotationsFromJobParameters(Job<?> job)", "class_method_signature": "KubeUtil.createPodAnnotationsFromJobParameters(Job<?> job)", "testcase": false, "constructor": false}, {"identifier": "isNodeOwnedByFenzo", "parameters": "(List<String> farzones, V1Node node)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNodeOwnedByFenzo(List<String> farzones, V1Node node)", "full_signature": "public static boolean isNodeOwnedByFenzo(List<String> farzones, V1Node node)", "class_method_signature": "KubeUtil.isNodeOwnedByFenzo(List<String> farzones, V1Node node)", "testcase": false, "constructor": false}, {"identifier": "hasFenzoSchedulerTaint", "parameters": "(V1Node node)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasFenzoSchedulerTaint(V1Node node)", "full_signature": "public static boolean hasFenzoSchedulerTaint(V1Node node)", "class_method_signature": "KubeUtil.hasFenzoSchedulerTaint(V1Node node)", "testcase": false, "constructor": false}, {"identifier": "isFarzoneNode", "parameters": "(List<String> farzones, V1Node node)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFarzoneNode(List<String> farzones, V1Node node)", "full_signature": "public static boolean isFarzoneNode(List<String> farzones, V1Node node)", "class_method_signature": "KubeUtil.isFarzoneNode(List<String> farzones, V1Node node)", "testcase": false, "constructor": false}, {"identifier": "toErrorDetails", "parameters": "(Throwable e)", "modifiers": "public static", "return": "String", "signature": "String toErrorDetails(Throwable e)", "full_signature": "public static String toErrorDetails(Throwable e)", "class_method_signature": "KubeUtil.toErrorDetails(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "toReact", "parameters": "(KubeFunction<ApiCallback<T>, Call> handler)", "modifiers": "public static", "return": "Mono<T>", "signature": "Mono<T> toReact(KubeFunction<ApiCallback<T>, Call> handler)", "full_signature": "public static Mono<T> toReact(KubeFunction<ApiCallback<T>, Call> handler)", "class_method_signature": "KubeUtil.toReact(KubeFunction<ApiCallback<T>, Call> handler)", "testcase": false, "constructor": false}, {"identifier": "getMetadataName", "parameters": "(V1ObjectMeta metadata)", "modifiers": "public static", "return": "String", "signature": "String getMetadataName(V1ObjectMeta metadata)", "full_signature": "public static String getMetadataName(V1ObjectMeta metadata)", "class_method_signature": "KubeUtil.getMetadataName(V1ObjectMeta metadata)", "testcase": false, "constructor": false}, {"identifier": "findNodeCondition", "parameters": "(V1Node node, String type)", "modifiers": "public static", "return": "Optional<V1NodeCondition>", "signature": "Optional<V1NodeCondition> findNodeCondition(V1Node node, String type)", "full_signature": "public static Optional<V1NodeCondition> findNodeCondition(V1Node node, String type)", "class_method_signature": "KubeUtil.findNodeCondition(V1Node node, String type)", "testcase": false, "constructor": false}, {"identifier": "hasUninitializedTaint", "parameters": "(V1Node node)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasUninitializedTaint(V1Node node)", "full_signature": "public static boolean hasUninitializedTaint(V1Node node)", "class_method_signature": "KubeUtil.hasUninitializedTaint(V1Node node)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java"}, "focal_method": {"identifier": "isFarzoneNode", "parameters": "(List<String> farzones, V1Node node)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isFarzoneNode(List<String> farzones, V1Node node) {\n        Map<String, String> labels = node.getMetadata().getLabels();\n        if (CollectionsExt.isNullOrEmpty(labels)) {\n            return false;\n        }\n        String nodeZone = labels.get(KubeConstants.NODE_LABEL_ZONE);\n        if (StringExt.isEmpty(nodeZone)) {\n            logger.debug(\"Node without zone label: {}\", node.getMetadata().getName());\n            return false;\n        }\n        for (String farzone : farzones) {\n            if (farzone.equalsIgnoreCase(nodeZone)) {\n                logger.debug(\"Farzone node: nodeId={}, zoneId={}\", node.getMetadata().getName(), nodeZone);\n                return true;\n            }\n        }\n        logger.debug(\"Non-farzone node: nodeId={}, zoneId={}\", node.getMetadata().getName(), nodeZone);\n        return false;\n    }", "signature": "boolean isFarzoneNode(List<String> farzones, V1Node node)", "full_signature": "public static boolean isFarzoneNode(List<String> farzones, V1Node node)", "class_method_signature": "KubeUtil.isFarzoneNode(List<String> farzones, V1Node node)", "testcase": false, "constructor": false, "invocations": ["getLabels", "getMetadata", "isNullOrEmpty", "get", "isEmpty", "debug", "getName", "getMetadata", "equalsIgnoreCase", "debug", "getName", "getMetadata", "debug", "getName", "getMetadata"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}