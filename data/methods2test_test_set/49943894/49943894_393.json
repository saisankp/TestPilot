{"test_class": {"identifier": "VirtualRouterElementTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private ClusterDao _clusterDao;", "modifier": "@Mock private", "type": "ClusterDao", "declarator": "_clusterDao", "var_name": "_clusterDao"}, {"original_string": "@Mock private ConfigurationDao _configDao;", "modifier": "@Mock private", "type": "ConfigurationDao", "declarator": "_configDao", "var_name": "_configDao"}, {"original_string": "@Mock private DataCenterDao _dcDao;", "modifier": "@Mock private", "type": "DataCenterDao", "declarator": "_dcDao", "var_name": "_dcDao"}, {"original_string": "@Mock private GuestOSDao _guestOSDao;", "modifier": "@Mock private", "type": "GuestOSDao", "declarator": "_guestOSDao", "var_name": "_guestOSDao"}, {"original_string": "@Mock private HostDao _hostDao;", "modifier": "@Mock private", "type": "HostDao", "declarator": "_hostDao", "var_name": "_hostDao"}, {"original_string": "@Mock private IPAddressDao _ipAddressDao;", "modifier": "@Mock private", "type": "IPAddressDao", "declarator": "_ipAddressDao", "var_name": "_ipAddressDao"}, {"original_string": "@Mock private UserIpv6AddressDao _ipv6Dao;", "modifier": "@Mock private", "type": "UserIpv6AddressDao", "declarator": "_ipv6Dao", "var_name": "_ipv6Dao"}, {"original_string": "@Mock private LoadBalancerDao _loadBalancerDao;", "modifier": "@Mock private", "type": "LoadBalancerDao", "declarator": "_loadBalancerDao", "var_name": "_loadBalancerDao"}, {"original_string": "@Mock private LoadBalancerVMMapDao _loadBalancerVMMapDao;", "modifier": "@Mock private", "type": "LoadBalancerVMMapDao", "declarator": "_loadBalancerVMMapDao", "var_name": "_loadBalancerVMMapDao"}, {"original_string": "@Mock private MonitoringServiceDao _monitorServiceDao;", "modifier": "@Mock private", "type": "MonitoringServiceDao", "declarator": "_monitorServiceDao", "var_name": "_monitorServiceDao"}, {"original_string": "@Mock private ManagementServerHostDao _msHostDao;", "modifier": "@Mock private", "type": "ManagementServerHostDao", "declarator": "_msHostDao", "var_name": "_msHostDao"}, {"original_string": "@Mock private NetworkDao _networkDao;", "modifier": "@Mock private", "type": "NetworkDao", "declarator": "_networkDao", "var_name": "_networkDao"}, {"original_string": "@Mock private NetworkOfferingDao _networkOfferingDao;", "modifier": "@Mock private", "type": "NetworkOfferingDao", "declarator": "_networkOfferingDao", "var_name": "_networkOfferingDao"}, {"original_string": "@Mock private NicDao _nicDao;", "modifier": "@Mock private", "type": "NicDao", "declarator": "_nicDao", "var_name": "_nicDao"}, {"original_string": "@Mock private NicIpAliasDao _nicIpAliasDao;", "modifier": "@Mock private", "type": "NicIpAliasDao", "declarator": "_nicIpAliasDao", "var_name": "_nicIpAliasDao"}, {"original_string": "@Mock private OpRouterMonitorServiceDao _opRouterMonitorServiceDao;", "modifier": "@Mock private", "type": "OpRouterMonitorServiceDao", "declarator": "_opRouterMonitorServiceDao", "var_name": "_opRouterMonitorServiceDao"}, {"original_string": "@Mock private PortForwardingRulesDao _pfRulesDao;", "modifier": "@Mock private", "type": "PortForwardingRulesDao", "declarator": "_pfRulesDao", "var_name": "_pfRulesDao"}, {"original_string": "@Mock private PhysicalNetworkServiceProviderDao _physicalProviderDao;", "modifier": "@Mock private", "type": "PhysicalNetworkServiceProviderDao", "declarator": "_physicalProviderDao", "var_name": "_physicalProviderDao"}, {"original_string": "@Mock private HostPodDao _podDao;", "modifier": "@Mock private", "type": "HostPodDao", "declarator": "_podDao", "var_name": "_podDao"}, {"original_string": "@Mock private DomainRouterDao _routerDao;", "modifier": "@Mock private", "type": "DomainRouterDao", "declarator": "_routerDao", "var_name": "_routerDao"}, {"original_string": "@Mock private FirewallRulesDao _rulesDao;", "modifier": "@Mock private", "type": "FirewallRulesDao", "declarator": "_rulesDao", "var_name": "_rulesDao"}, {"original_string": "@Mock private Site2SiteCustomerGatewayDao _s2sCustomerGatewayDao;", "modifier": "@Mock private", "type": "Site2SiteCustomerGatewayDao", "declarator": "_s2sCustomerGatewayDao", "var_name": "_s2sCustomerGatewayDao"}, {"original_string": "@Mock private Site2SiteVpnConnectionDao _s2sVpnConnectionDao;", "modifier": "@Mock private", "type": "Site2SiteVpnConnectionDao", "declarator": "_s2sVpnConnectionDao", "var_name": "_s2sVpnConnectionDao"}, {"original_string": "@Mock private Site2SiteVpnGatewayDao _s2sVpnGatewayDao;", "modifier": "@Mock private", "type": "Site2SiteVpnGatewayDao", "declarator": "_s2sVpnGatewayDao", "var_name": "_s2sVpnGatewayDao"}, {"original_string": "@Mock private ServiceOfferingDao _serviceOfferingDao;", "modifier": "@Mock private", "type": "ServiceOfferingDao", "declarator": "_serviceOfferingDao", "var_name": "_serviceOfferingDao"}, {"original_string": "@Mock private VMTemplateDao _templateDao;", "modifier": "@Mock private", "type": "VMTemplateDao", "declarator": "_templateDao", "var_name": "_templateDao"}, {"original_string": "@Mock private UserDao _userDao;", "modifier": "@Mock private", "type": "UserDao", "declarator": "_userDao", "var_name": "_userDao"}, {"original_string": "@Mock private UserStatisticsDao _userStatsDao;", "modifier": "@Mock private", "type": "UserStatisticsDao", "declarator": "_userStatsDao", "var_name": "_userStatsDao"}, {"original_string": "@Mock private UserStatsLogDao _userStatsLogDao;", "modifier": "@Mock private", "type": "UserStatsLogDao", "declarator": "_userStatsLogDao", "var_name": "_userStatsLogDao"}, {"original_string": "@Mock private UserVmDao _userVmDao;", "modifier": "@Mock private", "type": "UserVmDao", "declarator": "_userVmDao", "var_name": "_userVmDao"}, {"original_string": "@Mock private VlanDao _vlanDao;", "modifier": "@Mock private", "type": "VlanDao", "declarator": "_vlanDao", "var_name": "_vlanDao"}, {"original_string": "@Mock private VMInstanceDao _vmDao;", "modifier": "@Mock private", "type": "VMInstanceDao", "declarator": "_vmDao", "var_name": "_vmDao"}, {"original_string": "@Mock private UserVmDetailsDao _vmDetailsDao;", "modifier": "@Mock private", "type": "UserVmDetailsDao", "declarator": "_vmDetailsDao", "var_name": "_vmDetailsDao"}, {"original_string": "@Mock private VolumeDao _volumeDao;", "modifier": "@Mock private", "type": "VolumeDao", "declarator": "_volumeDao", "var_name": "_volumeDao"}, {"original_string": "@Mock private RemoteAccessVpnDao _vpnDao;", "modifier": "@Mock private", "type": "RemoteAccessVpnDao", "declarator": "_vpnDao", "var_name": "_vpnDao"}, {"original_string": "@Mock private VpnUserDao _vpnUsersDao;", "modifier": "@Mock private", "type": "VpnUserDao", "declarator": "_vpnUsersDao", "var_name": "_vpnUsersDao"}, {"original_string": "@Mock private VirtualRouterProviderDao _vrProviderDao;", "modifier": "@Mock private", "type": "VirtualRouterProviderDao", "declarator": "_vrProviderDao", "var_name": "_vrProviderDao"}, {"original_string": "@Mock private LoadBalancerDao _lbDao;", "modifier": "@Mock private", "type": "LoadBalancerDao", "declarator": "_lbDao", "var_name": "_lbDao"}, {"original_string": "@Mock private NetworkDao _networksDao;", "modifier": "@Mock private", "type": "NetworkDao", "declarator": "_networksDao", "var_name": "_networksDao"}, {"original_string": "@Mock private ServiceOfferingVO _offering;", "modifier": "@Mock private", "type": "ServiceOfferingVO", "declarator": "_offering", "var_name": "_offering"}, {"original_string": "@Mock private NetworkModelImpl _networkModel;", "modifier": "@Mock private", "type": "NetworkModelImpl", "declarator": "_networkModel", "var_name": "_networkModel"}, {"original_string": "@Mock private AccountManager _accountMgr;", "modifier": "@Mock private", "type": "AccountManager", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Mock private ConfigurationManager _configMgr;", "modifier": "@Mock private", "type": "ConfigurationManager", "declarator": "_configMgr", "var_name": "_configMgr"}, {"original_string": "@Mock private NetworkModel _networkMdl;", "modifier": "@Mock private", "type": "NetworkModel", "declarator": "_networkMdl", "var_name": "_networkMdl"}, {"original_string": "@Mock private NetworkOrchestrationService _networkMgr;", "modifier": "@Mock private", "type": "NetworkOrchestrationService", "declarator": "_networkMgr", "var_name": "_networkMgr"}, {"original_string": "@Mock private ResourceManager _resourceMgr;", "modifier": "@Mock private", "type": "ResourceManager", "declarator": "_resourceMgr", "var_name": "_resourceMgr"}, {"original_string": "@Mock private UserVmManager _userVmMgr;", "modifier": "@Mock private", "type": "UserVmManager", "declarator": "_userVmMgr", "var_name": "_userVmMgr"}, {"original_string": "@Mock private VirtualMachineManager _itMgr;", "modifier": "@Mock private", "type": "VirtualMachineManager", "declarator": "_itMgr", "var_name": "_itMgr"}, {"original_string": "@InjectMocks\n  private RouterDeploymentDefinitionBuilder routerDeploymentDefinitionBuilder;", "modifier": "@InjectMocks\n  private", "type": "RouterDeploymentDefinitionBuilder", "declarator": "routerDeploymentDefinitionBuilder", "var_name": "routerDeploymentDefinitionBuilder"}, {"original_string": "@InjectMocks\n  private VpcVirtualNetworkApplianceManagerImpl _routerMgr;", "modifier": "@InjectMocks\n  private", "type": "VpcVirtualNetworkApplianceManagerImpl", "declarator": "_routerMgr", "var_name": "_routerMgr"}, {"original_string": "@InjectMocks\n  private VirtualRouterElement virtualRouterElement;", "modifier": "@InjectMocks\n  private", "type": "VirtualRouterElement", "declarator": "virtualRouterElement", "var_name": "virtualRouterElement"}, {"original_string": "DataCenter testDataCenter = new DataCenterVO(/* id */ 1L,\n      \"name\",\n      \"description\",\n      \"dns1\",\n      /* dns2 */ null,\n      /* dns3 */ null,\n      /* dns4 */ null,\n      \"cidr\",\n      \"domain\",\n      /*domainid */ null,\n      NetworkType.Advanced,\n      \"zoneToken\",\n      \"domainSuffix\");", "modifier": "", "type": "DataCenter", "declarator": "testDataCenter = new DataCenterVO(/* id */ 1L,\n      \"name\",\n      \"description\",\n      \"dns1\",\n      /* dns2 */ null,\n      /* dns3 */ null,\n      /* dns4 */ null,\n      \"cidr\",\n      \"domain\",\n      /*domainid */ null,\n      NetworkType.Advanced,\n      \"zoneToken\",\n      \"domainSuffix\")", "var_name": "testDataCenter"}, {"original_string": "DeployDestination testDestination = new DeployDestination(testDataCenter,null,null,null);", "modifier": "", "type": "DeployDestination", "declarator": "testDestination = new DeployDestination(testDataCenter,null,null,null)", "var_name": "testDestination"}, {"original_string": "ReservationContext testContext = new ReservationContextImpl(null, null, null);", "modifier": "", "type": "ReservationContext", "declarator": "testContext = new ReservationContextImpl(null, null, null)", "var_name": "testContext"}, {"original_string": "NetworkVO testNetwork = new NetworkVO();", "modifier": "", "type": "NetworkVO", "declarator": "testNetwork = new NetworkVO()", "var_name": "testNetwork"}, {"original_string": "NicProfile testNicProfile = new NicProfile();", "modifier": "", "type": "NicProfile", "declarator": "testNicProfile = new NicProfile()", "var_name": "testNicProfile"}, {"original_string": "NetworkOfferingVO testOffering = new NetworkOfferingVO();", "modifier": "", "type": "NetworkOfferingVO", "declarator": "testOffering = new NetworkOfferingVO()", "var_name": "testOffering"}, {"original_string": "@Mock VirtualMachineProfile testVMProfile;", "modifier": "@Mock", "type": "VirtualMachineProfile", "declarator": "testVMProfile", "var_name": "testVMProfile"}], "file": "server/src/test/java/com/cloud/network/element/VirtualRouterElementTest.java"}, "test_case": {"identifier": "testPrepare", "parameters": "()", "modifiers": "@Test @Ignore(\"Ignore it until it's fixed in order not to brake the build\") public", "return": "void", "body": "@Test\n  @Ignore(\"Ignore it until it's fixed in order not to brake the build\")\n  public void testPrepare() {\n    virtualRouterElement._routerMgr = _routerMgr;\n    virtualRouterElement.routerDeploymentDefinitionBuilder = routerDeploymentDefinitionBuilder;\n    mockDAOs(testNetwork, testOffering);\n    mockMgrs();\n\n    boolean done = false;\n    try {\n      done = virtualRouterElement.prepare(testNetwork, testNicProfile, testVMProfile, testDestination, testContext);\n    } catch (ConcurrentOperationException | InsufficientCapacityException | ResourceUnavailableException | IllegalVirtualMachineException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n    assertTrue(\"can not even start to create a router\", done);\n\n  }", "signature": "void testPrepare()", "full_signature": "@Test @Ignore(\"Ignore it until it's fixed in order not to brake the build\") public void testPrepare()", "class_method_signature": "VirtualRouterElementTest.testPrepare()", "testcase": true, "constructor": false, "invocations": ["mockDAOs", "mockMgrs", "prepare", "printStackTrace", "assertTrue"]}, "focal_class": {"identifier": "VirtualRouterElement", "superclass": "extends AdapterBase", "interfaces": "implements VirtualRouterElementService, DhcpServiceProvider, UserDataServiceProvider, SourceNatServiceProvider,\n        StaticNatServiceProvider, FirewallServiceProvider, LoadBalancingServiceProvider, PortForwardingServiceProvider, RemoteAccessVPNServiceProvider, IpDeployer,\n        NetworkMigrationResponder, AggregatedCommandExecutor", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(VirtualRouterElement.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(VirtualRouterElement.class)", "var_name": "s_logger"}, {"original_string": "public static final AutoScaleCounterType AutoScaleCounterCpu = new AutoScaleCounterType(\"cpu\");", "modifier": "public static final", "type": "AutoScaleCounterType", "declarator": "AutoScaleCounterCpu = new AutoScaleCounterType(\"cpu\")", "var_name": "AutoScaleCounterCpu"}, {"original_string": "public static final AutoScaleCounterType AutoScaleCounterMemory = new AutoScaleCounterType(\"memory\");", "modifier": "public static final", "type": "AutoScaleCounterType", "declarator": "AutoScaleCounterMemory = new AutoScaleCounterType(\"memory\")", "var_name": "AutoScaleCounterMemory"}, {"original_string": "protected static final Map<Service, Map<Capability, String>> capabilities = setCapabilities();", "modifier": "protected static final", "type": "Map<Service, Map<Capability, String>>", "declarator": "capabilities = setCapabilities()", "var_name": "capabilities"}, {"original_string": "@Inject\n    NetworkDao _networksDao;", "modifier": "@Inject", "type": "NetworkDao", "declarator": "_networksDao", "var_name": "_networksDao"}, {"original_string": "@Inject\n    NetworkModel _networkMdl;", "modifier": "@Inject", "type": "NetworkModel", "declarator": "_networkMdl", "var_name": "_networkMdl"}, {"original_string": "@Inject\n    LoadBalancingRulesManager _lbMgr;", "modifier": "@Inject", "type": "LoadBalancingRulesManager", "declarator": "_lbMgr", "var_name": "_lbMgr"}, {"original_string": "@Inject\n    NetworkOfferingDao _networkOfferingDao;", "modifier": "@Inject", "type": "NetworkOfferingDao", "declarator": "_networkOfferingDao", "var_name": "_networkOfferingDao"}, {"original_string": "@Inject\n    VpcVirtualNetworkApplianceManager _routerMgr;", "modifier": "@Inject", "type": "VpcVirtualNetworkApplianceManager", "declarator": "_routerMgr", "var_name": "_routerMgr"}, {"original_string": "@Inject\n    ConfigurationManager _configMgr;", "modifier": "@Inject", "type": "ConfigurationManager", "declarator": "_configMgr", "var_name": "_configMgr"}, {"original_string": "@Inject\n    RulesManager _rulesMgr;", "modifier": "@Inject", "type": "RulesManager", "declarator": "_rulesMgr", "var_name": "_rulesMgr"}, {"original_string": "@Inject\n    UserVmManager _userVmMgr;", "modifier": "@Inject", "type": "UserVmManager", "declarator": "_userVmMgr", "var_name": "_userVmMgr"}, {"original_string": "@Inject\n    UserVmDao _userVmDao;", "modifier": "@Inject", "type": "UserVmDao", "declarator": "_userVmDao", "var_name": "_userVmDao"}, {"original_string": "@Inject\n    DomainRouterDao _routerDao;", "modifier": "@Inject", "type": "DomainRouterDao", "declarator": "_routerDao", "var_name": "_routerDao"}, {"original_string": "@Inject\n    LoadBalancerDao _lbDao;", "modifier": "@Inject", "type": "LoadBalancerDao", "declarator": "_lbDao", "var_name": "_lbDao"}, {"original_string": "@Inject\n    HostDao _hostDao;", "modifier": "@Inject", "type": "HostDao", "declarator": "_hostDao", "var_name": "_hostDao"}, {"original_string": "@Inject\n    AccountManager _accountMgr;", "modifier": "@Inject", "type": "AccountManager", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Inject\n    ConfigurationDao _configDao;", "modifier": "@Inject", "type": "ConfigurationDao", "declarator": "_configDao", "var_name": "_configDao"}, {"original_string": "@Inject\n    VirtualRouterProviderDao _vrProviderDao;", "modifier": "@Inject", "type": "VirtualRouterProviderDao", "declarator": "_vrProviderDao", "var_name": "_vrProviderDao"}, {"original_string": "@Inject\n    IPAddressDao _ipAddressDao;", "modifier": "@Inject", "type": "IPAddressDao", "declarator": "_ipAddressDao", "var_name": "_ipAddressDao"}, {"original_string": "@Inject\n    DataCenterDao _dcDao;", "modifier": "@Inject", "type": "DataCenterDao", "declarator": "_dcDao", "var_name": "_dcDao"}, {"original_string": "@Inject\n    NetworkModel _networkModel;", "modifier": "@Inject", "type": "NetworkModel", "declarator": "_networkModel", "var_name": "_networkModel"}, {"original_string": "@Inject\n    NetworkTopologyContext networkTopologyContext;", "modifier": "@Inject", "type": "NetworkTopologyContext", "declarator": "networkTopologyContext", "var_name": "networkTopologyContext"}, {"original_string": "@Inject\n    protected RouterDeploymentDefinitionBuilder routerDeploymentDefinitionBuilder;", "modifier": "@Inject\n    protected", "type": "RouterDeploymentDefinitionBuilder", "declarator": "routerDeploymentDefinitionBuilder", "var_name": "routerDeploymentDefinitionBuilder"}], "methods": [{"identifier": "canHandle", "parameters": "(final Network network, final Service service)", "modifiers": "protected", "return": "boolean", "signature": "boolean canHandle(final Network network, final Service service)", "full_signature": "protected boolean canHandle(final Network network, final Service service)", "class_method_signature": "VirtualRouterElement.canHandle(final Network network, final Service service)", "testcase": false, "constructor": false}, {"identifier": "implement", "parameters": "(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean implement(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override public boolean implement(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "VirtualRouterElement.implement(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean prepare(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override public boolean prepare(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "VirtualRouterElement.prepare(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "applyFWRules", "parameters": "(final Network network, final List<? extends FirewallRule> rules)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applyFWRules(final Network network, final List<? extends FirewallRule> rules)", "full_signature": "@Override public boolean applyFWRules(final Network network, final List<? extends FirewallRule> rules)", "class_method_signature": "VirtualRouterElement.applyFWRules(final Network network, final List<? extends FirewallRule> rules)", "testcase": false, "constructor": false}, {"identifier": "containsOnlyNumbers", "parameters": "(final String str, final String endChar)", "modifiers": "private static", "return": "boolean", "signature": "boolean containsOnlyNumbers(final String str, final String endChar)", "full_signature": "private static boolean containsOnlyNumbers(final String str, final String endChar)", "class_method_signature": "VirtualRouterElement.containsOnlyNumbers(final String str, final String endChar)", "testcase": false, "constructor": false}, {"identifier": "validateHAProxyLBRule", "parameters": "(final LoadBalancingRule rule)", "modifiers": "public static", "return": "boolean", "signature": "boolean validateHAProxyLBRule(final LoadBalancingRule rule)", "full_signature": "public static boolean validateHAProxyLBRule(final LoadBalancingRule rule)", "class_method_signature": "VirtualRouterElement.validateHAProxyLBRule(final LoadBalancingRule rule)", "testcase": false, "constructor": false}, {"identifier": "validateLBRule", "parameters": "(final Network network, final LoadBalancingRule rule)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean validateLBRule(final Network network, final LoadBalancingRule rule)", "full_signature": "@Override public boolean validateLBRule(final Network network, final LoadBalancingRule rule)", "class_method_signature": "VirtualRouterElement.validateLBRule(final Network network, final LoadBalancingRule rule)", "testcase": false, "constructor": false}, {"identifier": "applyLBRules", "parameters": "(final Network network, final List<LoadBalancingRule> rules)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applyLBRules(final Network network, final List<LoadBalancingRule> rules)", "full_signature": "@Override public boolean applyLBRules(final Network network, final List<LoadBalancingRule> rules)", "class_method_signature": "VirtualRouterElement.applyLBRules(final Network network, final List<LoadBalancingRule> rules)", "testcase": false, "constructor": false}, {"identifier": "applyVpnUsers", "parameters": "(final RemoteAccessVpn vpn, final List<? extends VpnUser> users)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] applyVpnUsers(final RemoteAccessVpn vpn, final List<? extends VpnUser> users)", "full_signature": "@Override public String[] applyVpnUsers(final RemoteAccessVpn vpn, final List<? extends VpnUser> users)", "class_method_signature": "VirtualRouterElement.applyVpnUsers(final RemoteAccessVpn vpn, final List<? extends VpnUser> users)", "testcase": false, "constructor": false}, {"identifier": "startVpn", "parameters": "(final RemoteAccessVpn vpn)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean startVpn(final RemoteAccessVpn vpn)", "full_signature": "@Override public boolean startVpn(final RemoteAccessVpn vpn)", "class_method_signature": "VirtualRouterElement.startVpn(final RemoteAccessVpn vpn)", "testcase": false, "constructor": false}, {"identifier": "stopVpn", "parameters": "(final RemoteAccessVpn vpn)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stopVpn(final RemoteAccessVpn vpn)", "full_signature": "@Override public boolean stopVpn(final RemoteAccessVpn vpn)", "class_method_signature": "VirtualRouterElement.stopVpn(final RemoteAccessVpn vpn)", "testcase": false, "constructor": false}, {"identifier": "applyIps", "parameters": "(final Network network, final List<? extends PublicIpAddress> ipAddress, final Set<Service> services)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applyIps(final Network network, final List<? extends PublicIpAddress> ipAddress, final Set<Service> services)", "full_signature": "@Override public boolean applyIps(final Network network, final List<? extends PublicIpAddress> ipAddress, final Set<Service> services)", "class_method_signature": "VirtualRouterElement.applyIps(final Network network, final List<? extends PublicIpAddress> ipAddress, final Set<Service> services)", "testcase": false, "constructor": false}, {"identifier": "getProvider", "parameters": "()", "modifiers": "@Override public", "return": "Provider", "signature": "Provider getProvider()", "full_signature": "@Override public Provider getProvider()", "class_method_signature": "VirtualRouterElement.getProvider()", "testcase": false, "constructor": false}, {"identifier": "getCapabilities", "parameters": "()", "modifiers": "@Override public", "return": "Map<Service, Map<Capability, String>>", "signature": "Map<Service, Map<Capability, String>> getCapabilities()", "full_signature": "@Override public Map<Service, Map<Capability, String>> getCapabilities()", "class_method_signature": "VirtualRouterElement.getCapabilities()", "testcase": false, "constructor": false}, {"identifier": "getHAProxyStickinessCapability", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getHAProxyStickinessCapability()", "full_signature": "public static String getHAProxyStickinessCapability()", "class_method_signature": "VirtualRouterElement.getHAProxyStickinessCapability()", "testcase": false, "constructor": false}, {"identifier": "setCapabilities", "parameters": "()", "modifiers": "private static", "return": "Map<Service, Map<Capability, String>>", "signature": "Map<Service, Map<Capability, String>> setCapabilities()", "full_signature": "private static Map<Service, Map<Capability, String>> setCapabilities()", "class_method_signature": "VirtualRouterElement.setCapabilities()", "testcase": false, "constructor": false}, {"identifier": "applyStaticNats", "parameters": "(final Network network, final List<? extends StaticNat> rules)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applyStaticNats(final Network network, final List<? extends StaticNat> rules)", "full_signature": "@Override public boolean applyStaticNats(final Network network, final List<? extends StaticNat> rules)", "class_method_signature": "VirtualRouterElement.applyStaticNats(final Network network, final List<? extends StaticNat> rules)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "(final Network network, final ReservationContext context, final boolean cleanup)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shutdown(final Network network, final ReservationContext context, final boolean cleanup)", "full_signature": "@Override public boolean shutdown(final Network network, final ReservationContext context, final boolean cleanup)", "class_method_signature": "VirtualRouterElement.shutdown(final Network network, final ReservationContext context, final boolean cleanup)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(final Network config, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean destroy(final Network config, final ReservationContext context)", "full_signature": "@Override public boolean destroy(final Network config, final ReservationContext context)", "class_method_signature": "VirtualRouterElement.destroy(final Network config, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "savePassword", "parameters": "(final Network network, final NicProfile nic, final VirtualMachineProfile vm)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean savePassword(final Network network, final NicProfile nic, final VirtualMachineProfile vm)", "full_signature": "@Override public boolean savePassword(final Network network, final NicProfile nic, final VirtualMachineProfile vm)", "class_method_signature": "VirtualRouterElement.savePassword(final Network network, final NicProfile nic, final VirtualMachineProfile vm)", "testcase": false, "constructor": false}, {"identifier": "saveSSHKey", "parameters": "(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final String sshPublicKey)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean saveSSHKey(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final String sshPublicKey)", "full_signature": "@Override public boolean saveSSHKey(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final String sshPublicKey)", "class_method_signature": "VirtualRouterElement.saveSSHKey(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final String sshPublicKey)", "testcase": false, "constructor": false}, {"identifier": "saveUserData", "parameters": "(final Network network, final NicProfile nic, final VirtualMachineProfile vm)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean saveUserData(final Network network, final NicProfile nic, final VirtualMachineProfile vm)", "full_signature": "@Override public boolean saveUserData(final Network network, final NicProfile nic, final VirtualMachineProfile vm)", "class_method_signature": "VirtualRouterElement.saveUserData(final Network network, final NicProfile nic, final VirtualMachineProfile vm)", "testcase": false, "constructor": false}, {"identifier": "getCommands", "parameters": "()", "modifiers": "@Override public", "return": "List<Class<?>>", "signature": "List<Class<?>> getCommands()", "full_signature": "@Override public List<Class<?>> getCommands()", "class_method_signature": "VirtualRouterElement.getCommands()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(final ConfigureVirtualRouterElementCmd cmd)", "modifiers": "@Override public", "return": "VirtualRouterProvider", "signature": "VirtualRouterProvider configure(final ConfigureVirtualRouterElementCmd cmd)", "full_signature": "@Override public VirtualRouterProvider configure(final ConfigureVirtualRouterElementCmd cmd)", "class_method_signature": "VirtualRouterElement.configure(final ConfigureVirtualRouterElementCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "addElement", "parameters": "(final Long nspId, final Type providerType)", "modifiers": "@Override public", "return": "VirtualRouterProvider", "signature": "VirtualRouterProvider addElement(final Long nspId, final Type providerType)", "full_signature": "@Override public VirtualRouterProvider addElement(final Long nspId, final Type providerType)", "class_method_signature": "VirtualRouterElement.addElement(final Long nspId, final Type providerType)", "testcase": false, "constructor": false}, {"identifier": "applyPFRules", "parameters": "(final Network network, final List<PortForwardingRule> rules)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applyPFRules(final Network network, final List<PortForwardingRule> rules)", "full_signature": "@Override public boolean applyPFRules(final Network network, final List<PortForwardingRule> rules)", "class_method_signature": "VirtualRouterElement.applyPFRules(final Network network, final List<PortForwardingRule> rules)", "testcase": false, "constructor": false}, {"identifier": "isReady", "parameters": "(final PhysicalNetworkServiceProvider provider)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReady(final PhysicalNetworkServiceProvider provider)", "full_signature": "@Override public boolean isReady(final PhysicalNetworkServiceProvider provider)", "class_method_signature": "VirtualRouterElement.isReady(final PhysicalNetworkServiceProvider provider)", "testcase": false, "constructor": false}, {"identifier": "shutdownProviderInstances", "parameters": "(final PhysicalNetworkServiceProvider provider, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shutdownProviderInstances(final PhysicalNetworkServiceProvider provider, final ReservationContext context)", "full_signature": "@Override public boolean shutdownProviderInstances(final PhysicalNetworkServiceProvider provider, final ReservationContext context)", "class_method_signature": "VirtualRouterElement.shutdownProviderInstances(final PhysicalNetworkServiceProvider provider, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "canEnableIndividualServices", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canEnableIndividualServices()", "full_signature": "@Override public boolean canEnableIndividualServices()", "class_method_signature": "VirtualRouterElement.canEnableIndividualServices()", "testcase": false, "constructor": false}, {"identifier": "getIdByNspId", "parameters": "(final Long nspId)", "modifiers": "public", "return": "Long", "signature": "Long getIdByNspId(final Long nspId)", "full_signature": "public Long getIdByNspId(final Long nspId)", "class_method_signature": "VirtualRouterElement.getIdByNspId(final Long nspId)", "testcase": false, "constructor": false}, {"identifier": "getCreatedElement", "parameters": "(final long id)", "modifiers": "@Override public", "return": "VirtualRouterProvider", "signature": "VirtualRouterProvider getCreatedElement(final long id)", "full_signature": "@Override public VirtualRouterProvider getCreatedElement(final long id)", "class_method_signature": "VirtualRouterElement.getCreatedElement(final long id)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean release(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final ReservationContext context)", "full_signature": "@Override public boolean release(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final ReservationContext context)", "class_method_signature": "VirtualRouterElement.release(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "configDhcpSupportForSubnet", "parameters": "(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest,\n                                              final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean configDhcpSupportForSubnet(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest,\n                                              final ReservationContext context)", "full_signature": "@Override public boolean configDhcpSupportForSubnet(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest,\n                                              final ReservationContext context)", "class_method_signature": "VirtualRouterElement.configDhcpSupportForSubnet(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest,\n                                              final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "removeDhcpSupportForSubnet", "parameters": "(final Network network)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeDhcpSupportForSubnet(final Network network)", "full_signature": "@Override public boolean removeDhcpSupportForSubnet(final Network network)", "class_method_signature": "VirtualRouterElement.removeDhcpSupportForSubnet(final Network network)", "testcase": false, "constructor": false}, {"identifier": "addDhcpEntry", "parameters": "(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addDhcpEntry(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override public boolean addDhcpEntry(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "VirtualRouterElement.addDhcpEntry(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "addPasswordAndUserdata", "parameters": "(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest,\n                                          final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addPasswordAndUserdata(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest,\n                                          final ReservationContext context)", "full_signature": "@Override public boolean addPasswordAndUserdata(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest,\n                                          final ReservationContext context)", "class_method_signature": "VirtualRouterElement.addPasswordAndUserdata(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest,\n                                          final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "getRouters", "parameters": "(final Network network, final DeployDestination dest)", "modifiers": "protected", "return": "List<DomainRouterVO>", "signature": "List<DomainRouterVO> getRouters(final Network network, final DeployDestination dest)", "full_signature": "protected List<DomainRouterVO> getRouters(final Network network, final DeployDestination dest)", "class_method_signature": "VirtualRouterElement.getRouters(final Network network, final DeployDestination dest)", "testcase": false, "constructor": false}, {"identifier": "searchForVirtualRouterElement", "parameters": "(final ListVirtualRouterElementsCmd cmd)", "modifiers": "@Override public", "return": "List<? extends VirtualRouterProvider>", "signature": "List<? extends VirtualRouterProvider> searchForVirtualRouterElement(final ListVirtualRouterElementsCmd cmd)", "full_signature": "@Override public List<? extends VirtualRouterProvider> searchForVirtualRouterElement(final ListVirtualRouterElementsCmd cmd)", "class_method_signature": "VirtualRouterElement.searchForVirtualRouterElement(final ListVirtualRouterElementsCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "verifyServicesCombination", "parameters": "(final Set<Service> services)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean verifyServicesCombination(final Set<Service> services)", "full_signature": "@Override public boolean verifyServicesCombination(final Set<Service> services)", "class_method_signature": "VirtualRouterElement.verifyServicesCombination(final Set<Service> services)", "testcase": false, "constructor": false}, {"identifier": "getIpDeployer", "parameters": "(final Network network)", "modifiers": "@Override public", "return": "IpDeployer", "signature": "IpDeployer getIpDeployer(final Network network)", "full_signature": "@Override public IpDeployer getIpDeployer(final Network network)", "class_method_signature": "VirtualRouterElement.getIpDeployer(final Network network)", "testcase": false, "constructor": false}, {"identifier": "getVirtualRouterProvider", "parameters": "()", "modifiers": "protected", "return": "VirtualRouterProvider.Type", "signature": "VirtualRouterProvider.Type getVirtualRouterProvider()", "full_signature": "protected VirtualRouterProvider.Type getVirtualRouterProvider()", "class_method_signature": "VirtualRouterElement.getVirtualRouterProvider()", "testcase": false, "constructor": false}, {"identifier": "updateHealthChecks", "parameters": "(final Network network, final List<LoadBalancingRule> lbrules)", "modifiers": "@Override public", "return": "List<LoadBalancerTO>", "signature": "List<LoadBalancerTO> updateHealthChecks(final Network network, final List<LoadBalancingRule> lbrules)", "full_signature": "@Override public List<LoadBalancerTO> updateHealthChecks(final Network network, final List<LoadBalancingRule> lbrules)", "class_method_signature": "VirtualRouterElement.updateHealthChecks(final Network network, final List<LoadBalancingRule> lbrules)", "testcase": false, "constructor": false}, {"identifier": "canHandleLbRules", "parameters": "(final List<LoadBalancingRule> rules)", "modifiers": "private", "return": "boolean", "signature": "boolean canHandleLbRules(final List<LoadBalancingRule> rules)", "full_signature": "private boolean canHandleLbRules(final List<LoadBalancingRule> rules)", "class_method_signature": "VirtualRouterElement.canHandleLbRules(final List<LoadBalancingRule> rules)", "testcase": false, "constructor": false}, {"identifier": "prepareMigration", "parameters": "(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean prepareMigration(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override public boolean prepareMigration(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "VirtualRouterElement.prepareMigration(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "rollbackMigration", "parameters": "(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final ReservationContext src, final ReservationContext dst)", "modifiers": "@Override public", "return": "void", "signature": "void rollbackMigration(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final ReservationContext src, final ReservationContext dst)", "full_signature": "@Override public void rollbackMigration(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final ReservationContext src, final ReservationContext dst)", "class_method_signature": "VirtualRouterElement.rollbackMigration(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final ReservationContext src, final ReservationContext dst)", "testcase": false, "constructor": false}, {"identifier": "commitMigration", "parameters": "(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final ReservationContext src, final ReservationContext dst)", "modifiers": "@Override public", "return": "void", "signature": "void commitMigration(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final ReservationContext src, final ReservationContext dst)", "full_signature": "@Override public void commitMigration(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final ReservationContext src, final ReservationContext dst)", "class_method_signature": "VirtualRouterElement.commitMigration(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final ReservationContext src, final ReservationContext dst)", "testcase": false, "constructor": false}, {"identifier": "prepareAggregatedExecution", "parameters": "(final Network network, final DeployDestination dest)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean prepareAggregatedExecution(final Network network, final DeployDestination dest)", "full_signature": "@Override public boolean prepareAggregatedExecution(final Network network, final DeployDestination dest)", "class_method_signature": "VirtualRouterElement.prepareAggregatedExecution(final Network network, final DeployDestination dest)", "testcase": false, "constructor": false}, {"identifier": "completeAggregatedExecution", "parameters": "(final Network network, final DeployDestination dest)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean completeAggregatedExecution(final Network network, final DeployDestination dest)", "full_signature": "@Override public boolean completeAggregatedExecution(final Network network, final DeployDestination dest)", "class_method_signature": "VirtualRouterElement.completeAggregatedExecution(final Network network, final DeployDestination dest)", "testcase": false, "constructor": false}, {"identifier": "cleanupAggregatedExecution", "parameters": "(final Network network, final DeployDestination dest)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean cleanupAggregatedExecution(final Network network, final DeployDestination dest)", "full_signature": "@Override public boolean cleanupAggregatedExecution(final Network network, final DeployDestination dest)", "class_method_signature": "VirtualRouterElement.cleanupAggregatedExecution(final Network network, final DeployDestination dest)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/network/element/VirtualRouterElement.java"}, "focal_method": {"identifier": "prepare", "parameters": "(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean prepare(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)\n            throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException, IllegalVirtualMachineException {\n\n        if (vm.getType() != VirtualMachine.Type.User) {\n            throw new IllegalVirtualMachineException(\"Illegal VM type informed. Expected USER VM, but got: \" + vm.getType());\n        }\n\n        if (!canHandle(network, null)) {\n            return false;\n        }\n\n        final NetworkOfferingVO offering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n        if (offering.isSystemOnly()) {\n            return false;\n        }\n        if (!_networkMdl.isProviderEnabledInPhysicalNetwork(_networkMdl.getPhysicalNetworkId(network), getProvider().getName())) {\n            return false;\n        }\n\n        final RouterDeploymentDefinition routerDeploymentDefinition =\n                routerDeploymentDefinitionBuilder.create()\n                        .setGuestNetwork(network)\n                        .setDeployDestination(dest)\n                        .setAccountOwner(_accountMgr.getAccount(network.getAccountId()))\n                        .setParams(vm.getParameters())\n                        .build();\n\n        final List<DomainRouterVO> routers = routerDeploymentDefinition.deployVirtualRouter();\n\n        if (routers == null || routers.size() == 0) {\n            throw new ResourceUnavailableException(\"Can't find at least one running router!\", DataCenter.class, network.getDataCenterId());\n        }\n        return true;\n    }", "signature": "boolean prepare(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override public boolean prepare(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "VirtualRouterElement.prepare(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false, "invocations": ["getType", "getType", "canHandle", "findById", "getNetworkOfferingId", "isSystemOnly", "isProviderEnabledInPhysicalNetwork", "getPhysicalNetworkId", "getName", "getProvider", "build", "setParams", "setAccountOwner", "setDeployDestination", "setGuestNetwork", "create", "getAccount", "getAccountId", "getParameters", "deployVirtualRouter", "size", "getDataCenterId"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}