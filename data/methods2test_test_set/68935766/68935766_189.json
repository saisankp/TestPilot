{"test_class": {"identifier": "InformationParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Environment<Class<?>> environment = StubEnvironment.of(Project.EMPTY);", "modifier": "", "type": "Environment<Class<?>>", "declarator": "environment = StubEnvironment.of(Project.EMPTY)", "var_name": "environment"}, {"original_string": "InformationParser<Class<?>> parser = new InformationParser<>(environment);", "modifier": "", "type": "InformationParser<Class<?>>", "declarator": "parser = new InformationParser<>(environment)", "var_name": "parser"}], "file": "scribe/core/src/test/java/com/karuslabs/scribe/core/parsers/InformationParserTest.java"}, "test_case": {"identifier": "check", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void check() {\n        parser.check(InvalidURL.class.getAnnotation(Information.class), Object.class);\n        \n        verify(environment).error(Object.class, \"\\\"htt://wwww.repo.karuslabs.com\\\" is not a valid URL\");\n    }", "signature": "void check()", "full_signature": "@Test void check()", "class_method_signature": "InformationParserTest.check()", "testcase": true, "constructor": false, "invocations": ["check", "getAnnotation", "error", "verify"]}, "focal_class": {"identifier": "InformationParser", "superclass": "extends SingleParser<T>", "interfaces": "", "fields": [], "methods": [{"identifier": "InformationParser", "parameters": "(Environment<T> environment)", "modifiers": "public", "return": "", "signature": " InformationParser(Environment<T> environment)", "full_signature": "public  InformationParser(Environment<T> environment)", "class_method_signature": "InformationParser.InformationParser(Environment<T> environment)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(T type)", "modifiers": "@Override protected", "return": "void", "signature": "void parse(T type)", "full_signature": "@Override protected void parse(T type)", "class_method_signature": "InformationParser.parse(T type)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(Information information, T type)", "modifiers": "protected", "return": "void", "signature": "void check(Information information, T type)", "full_signature": "protected void check(Information information, T type)", "class_method_signature": "InformationParser.check(Information information, T type)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(Information information)", "modifiers": "protected", "return": "void", "signature": "void parse(Information information)", "full_signature": "protected void parse(Information information)", "class_method_signature": "InformationParser.parse(Information information)", "testcase": false, "constructor": false}], "file": "scribe/core/src/main/java/com/karuslabs/scribe/core/parsers/InformationParser.java"}, "focal_method": {"identifier": "check", "parameters": "(Information information, T type)", "modifiers": "protected", "return": "void", "body": "protected void check(Information information, T type) {\n        var url = information.url();\n        if (!url.isEmpty() && !URL.matcher(url).matches()) {\n            environment.error(type, format(url, \"is not a valid URL\"));\n        }\n    }", "signature": "void check(Information information, T type)", "full_signature": "protected void check(Information information, T type)", "class_method_signature": "InformationParser.check(Information information, T type)", "testcase": false, "constructor": false, "invocations": ["url", "isEmpty", "matches", "matcher", "error", "format"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}