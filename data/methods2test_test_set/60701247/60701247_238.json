{"test_class": {"identifier": "RetryingInstallerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String APPLICATION_ID = \"com.foo.pkg\";", "modifier": "private static final", "type": "String", "declarator": "APPLICATION_ID = \"com.foo.pkg\"", "var_name": "APPLICATION_ID"}, {"original_string": "private IDevice myDevice;", "modifier": "private", "type": "IDevice", "declarator": "myDevice", "var_name": "myDevice"}, {"original_string": "private RetryingInstaller.Installer myInstaller;", "modifier": "private", "type": "RetryingInstaller.Installer", "declarator": "myInstaller", "var_name": "myInstaller"}, {"original_string": "private RetryingInstaller.Prompter myPrompter;", "modifier": "private", "type": "RetryingInstaller.Prompter", "declarator": "myPrompter", "var_name": "myPrompter"}, {"original_string": "private LaunchStatus myLaunchStatus;", "modifier": "private", "type": "LaunchStatus", "declarator": "myLaunchStatus", "var_name": "myLaunchStatus"}, {"original_string": "private RetryingInstaller myRetryingInstaller;", "modifier": "private", "type": "RetryingInstaller", "declarator": "myRetryingInstaller", "var_name": "myRetryingInstaller"}, {"original_string": "private TestTimeSource myStopWatchTimeSource;", "modifier": "private", "type": "TestTimeSource", "declarator": "myStopWatchTimeSource", "var_name": "myStopWatchTimeSource"}], "file": "android/testSrc/com/android/tools/idea/run/RetryingInstallerTest.java"}, "test_case": {"identifier": "notifyUserIfDeviceDisconnectedDuringInstall", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void notifyUserIfDeviceDisconnectedDuringInstall() {\n    // on an install request, return a failure on first install and a success on the 2nd install\n    when (myInstaller.installApp(myDevice, myLaunchStatus))\n      .thenAnswer(invocation -> {\n        myStopWatchTimeSource.advance(50);\n        return new InstallResult(InstallResult.FailureCode.DEVICE_NOT_FOUND, null, null);\n      });\n\n    when (myDevice.getName())\n      .thenReturn(\"Test Device\");\n\n    // perform the installation\n    RetryingInstallerResult installResult = myRetryingInstaller.install();\n    assertThat(installResult.isSuccess()).isFalse();\n    assertThat(installResult.getRetryCount()).isEqualTo(1);\n    assertThat(installResult.getTotalDuration().toMillis()).isEqualTo(50);\n    assertThat(installResult.getLastInstallDuration().toMillis()).isEqualTo(50);\n\n    // verify that we got only 1 install requests (there is no retry for this error)\n    verify(myInstaller, times(1)).installApp(myDevice, myLaunchStatus);\n\n    // verify that we prompted the user\n    verify(myPrompter).showErrorMessage(AndroidBundle.message(\n      \"deployment.failed.reason.devicedisconnected\", myDevice.getName()));\n  }", "signature": "void notifyUserIfDeviceDisconnectedDuringInstall()", "full_signature": "@Test public void notifyUserIfDeviceDisconnectedDuringInstall()", "class_method_signature": "RetryingInstallerTest.notifyUserIfDeviceDisconnectedDuringInstall()", "testcase": true, "constructor": false, "invocations": ["thenAnswer", "when", "installApp", "advance", "thenReturn", "when", "getName", "install", "isFalse", "assertThat", "isSuccess", "isEqualTo", "assertThat", "getRetryCount", "isEqualTo", "assertThat", "toMillis", "getTotalDuration", "isEqualTo", "assertThat", "toMillis", "getLastInstallDuration", "installApp", "verify", "times", "showErrorMessage", "verify", "message", "getName"]}, "focal_class": {"identifier": "RetryingInstaller", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final IDevice myDevice;", "modifier": "private final", "type": "IDevice", "declarator": "myDevice", "var_name": "myDevice"}, {"original_string": "private final Installer myInstaller;", "modifier": "private final", "type": "Installer", "declarator": "myInstaller", "var_name": "myInstaller"}, {"original_string": "private final String myApplicationId;", "modifier": "private final", "type": "String", "declarator": "myApplicationId", "var_name": "myApplicationId"}, {"original_string": "private final ConsolePrinter myPrinter;", "modifier": "private final", "type": "ConsolePrinter", "declarator": "myPrinter", "var_name": "myPrinter"}, {"original_string": "private final LaunchStatus myLaunchStatus;", "modifier": "private final", "type": "LaunchStatus", "declarator": "myLaunchStatus", "var_name": "myLaunchStatus"}, {"original_string": "private final Prompter myPrompter;", "modifier": "private final", "type": "Prompter", "declarator": "myPrompter", "var_name": "myPrompter"}], "methods": [{"identifier": "RetryingInstaller", "parameters": "(@NotNull Project project,\n                           @NotNull IDevice device,\n                           @NotNull Installer installer,\n                           @NotNull String applicationId,\n                           @NotNull ConsolePrinter printer,\n                           @NotNull LaunchStatus launchStatus)", "modifiers": "public", "return": "", "signature": " RetryingInstaller(@NotNull Project project,\n                           @NotNull IDevice device,\n                           @NotNull Installer installer,\n                           @NotNull String applicationId,\n                           @NotNull ConsolePrinter printer,\n                           @NotNull LaunchStatus launchStatus)", "full_signature": "public  RetryingInstaller(@NotNull Project project,\n                           @NotNull IDevice device,\n                           @NotNull Installer installer,\n                           @NotNull String applicationId,\n                           @NotNull ConsolePrinter printer,\n                           @NotNull LaunchStatus launchStatus)", "class_method_signature": "RetryingInstaller.RetryingInstaller(@NotNull Project project,\n                           @NotNull IDevice device,\n                           @NotNull Installer installer,\n                           @NotNull String applicationId,\n                           @NotNull ConsolePrinter printer,\n                           @NotNull LaunchStatus launchStatus)", "testcase": false, "constructor": true}, {"identifier": "RetryingInstaller", "parameters": "(@NotNull IDevice device,\n                           @NotNull Installer installer,\n                           @NotNull String applicationId,\n                           @NotNull Prompter prompter,\n                           @NotNull ConsolePrinter printer,\n                           @NotNull LaunchStatus launchStatus)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " RetryingInstaller(@NotNull IDevice device,\n                           @NotNull Installer installer,\n                           @NotNull String applicationId,\n                           @NotNull Prompter prompter,\n                           @NotNull ConsolePrinter printer,\n                           @NotNull LaunchStatus launchStatus)", "full_signature": "@VisibleForTesting public  RetryingInstaller(@NotNull IDevice device,\n                           @NotNull Installer installer,\n                           @NotNull String applicationId,\n                           @NotNull Prompter prompter,\n                           @NotNull ConsolePrinter printer,\n                           @NotNull LaunchStatus launchStatus)", "class_method_signature": "RetryingInstaller.RetryingInstaller(@NotNull IDevice device,\n                           @NotNull Installer installer,\n                           @NotNull String applicationId,\n                           @NotNull Prompter prompter,\n                           @NotNull ConsolePrinter printer,\n                           @NotNull LaunchStatus launchStatus)", "testcase": false, "constructor": true}, {"identifier": "install", "parameters": "()", "modifiers": "@NotNull public", "return": "RetryingInstallerResult", "signature": "RetryingInstallerResult install()", "full_signature": "@NotNull public RetryingInstallerResult install()", "class_method_signature": "RetryingInstaller.install()", "testcase": false, "constructor": false}, {"identifier": "uninstallPackage", "parameters": "(@NotNull IDevice device, @NotNull String packageName)", "modifiers": "private", "return": "boolean", "signature": "boolean uninstallPackage(@NotNull IDevice device, @NotNull String packageName)", "full_signature": "private boolean uninstallPackage(@NotNull IDevice device, @NotNull String packageName)", "class_method_signature": "RetryingInstaller.uninstallPackage(@NotNull IDevice device, @NotNull String packageName)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/run/RetryingInstaller.java"}, "focal_method": {"identifier": "install", "parameters": "()", "modifiers": "@NotNull public", "return": "RetryingInstallerResult", "body": "@NotNull\n  public RetryingInstallerResult install() {\n    InstallResult result = null;\n    boolean retry = true;\n    int retryCount = 0;\n    StopWatch totalDuration = new StopWatch();\n    StopWatch lastInstallDuration = new StopWatch();\n\n    while (!myLaunchStatus.isLaunchTerminated() && retry) {\n      retryCount++;\n      lastInstallDuration.restart();\n      result = myInstaller.installApp(myDevice, myLaunchStatus);\n      lastInstallDuration.stop();\n\n      if (result.installOutput != null) {\n        if (result.failureCode == InstallResult.FailureCode.NO_ERROR) {\n          myPrinter.stdout(result.installOutput);\n        }\n        else {\n          myPrinter.stderr(result.installOutput);\n        }\n      }\n\n      String reason;\n      switch (result.failureCode) {\n        case DEVICE_NOT_RESPONDING:\n          int waitTime = 2;\n          myPrinter.stdout(\"Device is not ready. Waiting for \" + waitTime + \" seconds.\");\n          try {\n            TimeUnit.SECONDS.sleep(waitTime);\n          }\n          catch (InterruptedException e) {\n            Logger.getInstance(RetryingInstaller.class).info(e);\n          }\n          retry = true;\n          break;\n        case INSTALL_FAILED_VERSION_DOWNGRADE:\n          reason = AndroidBundle\n            .message(\"deployment.failed.uninstall.prompt.text\", AndroidBundle.message(\"deployment.failed.reason.version.downgrade\"));\n          retry = myPrompter.showQuestionPrompt(reason) && uninstallPackage(myDevice, myApplicationId);\n          break;\n        case INSTALL_FAILED_UPDATE_INCOMPATIBLE:\n        case INCONSISTENT_CERTIFICATES:\n          reason = AndroidBundle\n            .message(\"deployment.failed.uninstall.prompt.text\", AndroidBundle.message(\"deployment.failed.reason.different.signature\"));\n          retry = myPrompter.showQuestionPrompt(reason) && uninstallPackage(myDevice, myApplicationId);\n          break;\n        case INSTALL_FAILED_DEXOPT:\n          reason =\n            AndroidBundle.message(\"deployment.failed.uninstall.prompt.text\", AndroidBundle.message(\"deployment.failed.reason.dexopt\"));\n          retry = myPrompter.showQuestionPrompt(reason) && uninstallPackage(myDevice, myApplicationId);\n          break;\n        case NO_CERTIFICATE:\n          myPrinter.stderr(AndroidBundle.message(\"deployment.failed.no.certificates.explanation\"));\n          myPrompter.showErrorMessage(AndroidBundle.message(\"deployment.failed.no.certificates.explanation\"));\n          retry = false;\n          break;\n        case INSTALL_FAILED_OLDER_SDK: // TODO: this should not happen and should have been caught by the device picker\n          String message = AndroidBundle.message(\"deployment.failed.reason.oldersdk\", myDevice.getVersion().toString());\n          myPrinter.stderr(message);\n          retry = false;\n          break;\n        case DEVICE_NOT_FOUND:\n          reason = AndroidBundle.message(\"deployment.failed.reason.devicedisconnected\", myDevice.getName());\n          myPrompter.showErrorMessage(reason);\n          retry = false;\n          break;\n        case UNTYPED_ERROR:\n          reason = AndroidBundle.message(\"deployment.failed.uninstall.prompt.generic.text\", result.failureMessage);\n          retry = myPrompter.showQuestionPrompt(reason) && uninstallPackage(myDevice, myApplicationId);\n          break;\n        default:\n          retry = false;\n          break;\n      }\n    }\n\n    totalDuration.stop();\n    return new RetryingInstallerResult(result != null && result.failureCode == InstallResult.FailureCode.NO_ERROR,\n                                       retryCount,\n                                       totalDuration.getDuration(),\n                                       lastInstallDuration.getDuration());\n  }", "signature": "RetryingInstallerResult install()", "full_signature": "@NotNull public RetryingInstallerResult install()", "class_method_signature": "RetryingInstaller.install()", "testcase": false, "constructor": false, "invocations": ["isLaunchTerminated", "restart", "installApp", "stop", "stdout", "stderr", "stdout", "sleep", "info", "getInstance", "message", "message", "showQuestionPrompt", "uninstallPackage", "message", "message", "showQuestionPrompt", "uninstallPackage", "message", "message", "showQuestionPrompt", "uninstallPackage", "stderr", "message", "showErrorMessage", "message", "message", "toString", "getVersion", "stderr", "message", "getName", "showErrorMessage", "message", "showQuestionPrompt", "uninstallPackage", "stop", "getDuration", "getDuration"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}