{"test_class": {"identifier": "SelectionsResultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FCI1 =\n      \"6F238409315449432E49434131A516BF0C13C708 0000000011223344 53070A3C23121410019000\";", "modifier": "private static final", "type": "String", "declarator": "FCI1 =\n      \"6F238409315449432E49434131A516BF0C13C708 0000000011223344 53070A3C23121410019000\"", "var_name": "FCI1"}, {"original_string": "private static final String FCI2 =\n      \"6F238409315449432E49434131A516BF0C13C708 0000000055667788 53070A3C23121410019000\";", "modifier": "private static final", "type": "String", "declarator": "FCI2 =\n      \"6F238409315449432E49434131A516BF0C13C708 0000000055667788 53070A3C23121410019000\"", "var_name": "FCI2"}], "file": "java/component/keyple-core/src/test/java/org/eclipse/keyple/core/selection/SelectionsResultTest.java"}, "test_case": {"identifier": "testSelectionsResult", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSelectionsResult() {\n    SelectionsResult selectionsResult = new SelectionsResult();\n    ApduResponse fci1 = new ApduResponse(ByteArrayUtil.fromHex(FCI1), null);\n    SelectionStatus selectionStatus1 = new SelectionStatus(null, fci1, true);\n    SeResponse seResponse1 = new SeResponse(true, false, selectionStatus1, null);\n    ApduResponse fci2 = new ApduResponse(ByteArrayUtil.fromHex(FCI2), null);\n    SelectionStatus selectionStatus2 = new SelectionStatus(null, fci2, true);\n    SeResponse seResponse2 = new SeResponse(true, false, selectionStatus2, null);\n    TestMatchingSe testMatchingSe1 = new TestMatchingSe(seResponse1);\n    TestMatchingSe testMatchingSe2 = new TestMatchingSe(seResponse2);\n    selectionsResult.addMatchingSe(0, testMatchingSe1, false);\n    selectionsResult.addMatchingSe(2, testMatchingSe2, true);\n    assertThat(selectionsResult.hasActiveSelection()).isTrue();\n    AbstractMatchingSe activeMatchingSe = selectionsResult.getActiveMatchingSe();\n    assertThat(activeMatchingSe).isEqualTo(testMatchingSe2);\n    assertThat(selectionsResult.getActiveSelectionIndex()).isEqualTo(2);\n    assertThat(selectionsResult.getMatchingSe(0)).isEqualTo(testMatchingSe1);\n    assertThat(selectionsResult.getMatchingSe(2)).isEqualTo(testMatchingSe2);\n    assertThat(selectionsResult.hasSelectionMatched(0)).isTrue();\n    assertThat(selectionsResult.hasSelectionMatched(1)).isFalse();\n    assertThat(selectionsResult.hasSelectionMatched(2)).isTrue();\n    Map<Integer, AbstractMatchingSe> matchingSelections = selectionsResult.getMatchingSelections();\n    assertThat(matchingSelections.get(0)).isEqualTo(testMatchingSe1);\n    assertThat(matchingSelections.get(1)).isEqualTo(null);\n    assertThat(matchingSelections.get(2)).isEqualTo(testMatchingSe2);\n  }", "signature": "void testSelectionsResult()", "full_signature": "@Test public void testSelectionsResult()", "class_method_signature": "SelectionsResultTest.testSelectionsResult()", "testcase": true, "constructor": false, "invocations": ["fromHex", "fromHex", "addMatchingSe", "addMatchingSe", "isTrue", "assertThat", "hasActiveSelection", "getActiveMatchingSe", "isEqualTo", "assertThat", "isEqualTo", "assertThat", "getActiveSelectionIndex", "isEqualTo", "assertThat", "getMatchingSe", "isEqualTo", "assertThat", "getMatchingSe", "isTrue", "assertThat", "hasSelectionMatched", "isFalse", "assertThat", "hasSelectionMatched", "isTrue", "assertThat", "hasSelectionMatched", "getMatchingSelections", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "get"]}, "focal_class": {"identifier": "SelectionsResult", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Integer activeSelectionIndex = null;", "modifier": "private", "type": "Integer", "declarator": "activeSelectionIndex = null", "var_name": "activeSelectionIndex"}, {"original_string": "private final Map<Integer, AbstractMatchingSe> matchingSeMap =\n      new HashMap<Integer, AbstractMatchingSe>();", "modifier": "private final", "type": "Map<Integer, AbstractMatchingSe>", "declarator": "matchingSeMap =\n      new HashMap<Integer, AbstractMatchingSe>()", "var_name": "matchingSeMap"}], "methods": [{"identifier": "SelectionsResult", "parameters": "()", "modifiers": "", "return": "", "signature": " SelectionsResult()", "full_signature": "  SelectionsResult()", "class_method_signature": "SelectionsResult.SelectionsResult()", "testcase": false, "constructor": true}, {"identifier": "addMatchingSe", "parameters": "(int selectionIndex, AbstractMatchingSe matchingSe, boolean isSelected)", "modifiers": "", "return": "void", "signature": "void addMatchingSe(int selectionIndex, AbstractMatchingSe matchingSe, boolean isSelected)", "full_signature": " void addMatchingSe(int selectionIndex, AbstractMatchingSe matchingSe, boolean isSelected)", "class_method_signature": "SelectionsResult.addMatchingSe(int selectionIndex, AbstractMatchingSe matchingSe, boolean isSelected)", "testcase": false, "constructor": false}, {"identifier": "getActiveMatchingSe", "parameters": "()", "modifiers": "public", "return": "AbstractMatchingSe", "signature": "AbstractMatchingSe getActiveMatchingSe()", "full_signature": "public AbstractMatchingSe getActiveMatchingSe()", "class_method_signature": "SelectionsResult.getActiveMatchingSe()", "testcase": false, "constructor": false}, {"identifier": "getMatchingSelections", "parameters": "()", "modifiers": "public", "return": "Map<Integer, AbstractMatchingSe>", "signature": "Map<Integer, AbstractMatchingSe> getMatchingSelections()", "full_signature": "public Map<Integer, AbstractMatchingSe> getMatchingSelections()", "class_method_signature": "SelectionsResult.getMatchingSelections()", "testcase": false, "constructor": false}, {"identifier": "getMatchingSe", "parameters": "(int selectionIndex)", "modifiers": "public", "return": "AbstractMatchingSe", "signature": "AbstractMatchingSe getMatchingSe(int selectionIndex)", "full_signature": "public AbstractMatchingSe getMatchingSe(int selectionIndex)", "class_method_signature": "SelectionsResult.getMatchingSe(int selectionIndex)", "testcase": false, "constructor": false}, {"identifier": "hasActiveSelection", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasActiveSelection()", "full_signature": "public boolean hasActiveSelection()", "class_method_signature": "SelectionsResult.hasActiveSelection()", "testcase": false, "constructor": false}, {"identifier": "hasSelectionMatched", "parameters": "(int selectionIndex)", "modifiers": "public", "return": "boolean", "signature": "boolean hasSelectionMatched(int selectionIndex)", "full_signature": "public boolean hasSelectionMatched(int selectionIndex)", "class_method_signature": "SelectionsResult.hasSelectionMatched(int selectionIndex)", "testcase": false, "constructor": false}, {"identifier": "getActiveSelectionIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getActiveSelectionIndex()", "full_signature": "public int getActiveSelectionIndex()", "class_method_signature": "SelectionsResult.getActiveSelectionIndex()", "testcase": false, "constructor": false}], "file": "java/component/keyple-core/src/main/java/org/eclipse/keyple/core/selection/SelectionsResult.java"}, "focal_method": {"identifier": "SelectionsResult", "parameters": "()", "modifiers": "", "return": "", "body": "SelectionsResult() {}", "signature": " SelectionsResult()", "full_signature": "  SelectionsResult()", "class_method_signature": "SelectionsResult.SelectionsResult()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 156416177, "url": "https://github.com/eclipse/keyple-java", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 10325, "license": "licensed"}}