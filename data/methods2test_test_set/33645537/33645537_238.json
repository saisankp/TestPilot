{"test_class": {"identifier": "WordSearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WordSearch wordSearch;", "modifier": "private", "type": "WordSearch", "declarator": "wordSearch", "var_name": "wordSearch"}], "file": "algs/src/test/java/com/github/pedrovgs/problem48/WordSearchTest.java"}, "test_case": {"identifier": "shouldReturnFalseIfWordSearchIsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnFalseIfWordSearchIsEmpty() {\n    char[][] matrix = {\n        { 'a', 'a', 'c', 'd', 'e' }, { 'a', 'd', 'a', 'r', 'c' }, { 'a', 'd', 'a', 'c', 'c' },\n        { 'b', 'a', 'c', 'o', 'o' }\n    };\n\n    boolean result = wordSearch.contains(matrix, \"pedro\");\n\n    assertFalse(result);\n  }", "signature": "void shouldReturnFalseIfWordSearchIsEmpty()", "full_signature": "@Test public void shouldReturnFalseIfWordSearchIsEmpty()", "class_method_signature": "WordSearchTest.shouldReturnFalseIfWordSearchIsEmpty()", "testcase": true, "constructor": false, "invocations": ["contains", "assertFalse"]}, "focal_class": {"identifier": "WordSearch", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "contains", "parameters": "(char[][] wordSearch, String word)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(char[][] wordSearch, String word)", "full_signature": "public boolean contains(char[][] wordSearch, String word)", "class_method_signature": "WordSearch.contains(char[][] wordSearch, String word)", "testcase": false, "constructor": false}, {"identifier": "isWordInWordSearchInner", "parameters": "(char[][] wordSearch, String word, int x, int y)", "modifiers": "private static", "return": "boolean", "signature": "boolean isWordInWordSearchInner(char[][] wordSearch, String word, int x, int y)", "full_signature": "private static boolean isWordInWordSearchInner(char[][] wordSearch, String word, int x, int y)", "class_method_signature": "WordSearch.isWordInWordSearchInner(char[][] wordSearch, String word, int x, int y)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(char[][] wordSearch, int x, int y, char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean matches(char[][] wordSearch, int x, int y, char c)", "full_signature": "private static boolean matches(char[][] wordSearch, int x, int y, char c)", "class_method_signature": "WordSearch.matches(char[][] wordSearch, int x, int y, char c)", "testcase": false, "constructor": false}, {"identifier": "validateInputData", "parameters": "(char[][] wordSearch, String word)", "modifiers": "private", "return": "void", "signature": "void validateInputData(char[][] wordSearch, String word)", "full_signature": "private void validateInputData(char[][] wordSearch, String word)", "class_method_signature": "WordSearch.validateInputData(char[][] wordSearch, String word)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem48/WordSearch.java"}, "focal_method": {"identifier": "contains", "parameters": "(char[][] wordSearch, String word)", "modifiers": "public", "return": "boolean", "body": "public boolean contains(char[][] wordSearch, String word) {\n    validateInputData(wordSearch, word);\n\n    for (int i = 0; i < wordSearch.length; i++) {\n      for (int j = 0; j < wordSearch[i].length; j++) {\n        if (matches(wordSearch, i, j, word.charAt(0))) {\n          if (isWordInWordSearchInner(wordSearch, word, i, j)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }", "signature": "boolean contains(char[][] wordSearch, String word)", "full_signature": "public boolean contains(char[][] wordSearch, String word)", "class_method_signature": "WordSearch.contains(char[][] wordSearch, String word)", "testcase": false, "constructor": false, "invocations": ["validateInputData", "matches", "charAt", "isWordInWordSearchInner"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}