{"test_class": {"identifier": "PathElementTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/gatein/management/core/api/PathElementTest.java"}, "test_case": {"identifier": "testMatches", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testMatches() throws ParseException\n   {\n      assertTrue(PathElement.pathElement(\"{path}\").matches(\"foo\"));\n      assertTrue(PathElement.pathElement(\"{path}bar\").matches(\"foo-foobar\"));\n\n      assertTrue(PathElement.pathElement(\"{path: .*}\").matches(\"foo/bar\"));\n      assertTrue(PathElement.pathElement(\"{path: .*}/bar\").matches(\"foo/foo-bar/bar\"));\n      assertFalse(PathElement.pathElement(\"{path: .*}/bar\").matches(\"foo/foo-bar/\"));\n\n      assertTrue(PathElement.pathElement(\"{alphapath: [a-zA-Z]{3}}/{numpath: [0-9]*}\").matches(\"foo/123\"));\n      assertFalse(PathElement.pathElement(\"{alphapath: [a-zA-Z]{3}}/{numpath: [0-9]*}\").matches(\"foobar/123\"));\n      assertFalse(PathElement.pathElement(\"{alphapath: [a-zA-Z]{3}}/{numpath: [0-9]*}\").matches(\"foo/a123\"));\n\n      assertTrue(PathElement.pathElement(\"{weird: \\\\{foo\\\\}\\\\/\\\\{bar\\\\}}\").matches(\"{foo}/{bar}\"));\n      assertFalse(PathElement.pathElement(\"{weird: \\\\{foo\\\\}\\\\/\\\\{bar\\\\}}\").matches(\"foo/bar\"));\n\n      assertTrue(PathElement.pathElement(\"foo/{required}/{optional: .*}\").matches(\"foo/bar/\"));\n      assertFalse(PathElement.pathElement(\"foo/{bar}/{required}\").matches(\"foo/bar\"));\n   }", "signature": "void testMatches()", "full_signature": "@Test public void testMatches()", "class_method_signature": "PathElementTest.testMatches()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "matches", "pathElement", "assertTrue", "matches", "pathElement", "assertTrue", "matches", "pathElement", "assertTrue", "matches", "pathElement", "assertFalse", "matches", "pathElement", "assertTrue", "matches", "pathElement", "assertFalse", "matches", "pathElement", "assertFalse", "matches", "pathElement", "assertTrue", "matches", "pathElement", "assertFalse", "matches", "pathElement", "assertTrue", "matches", "pathElement", "assertFalse", "matches", "pathElement"]}, "focal_class": {"identifier": "PathElement", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEMPLATE_NAME_REGEX = \"\\\\w[\\\\w\\\\.-]*\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_NAME_REGEX = \"\\\\w[\\\\w\\\\.-]*\"", "var_name": "TEMPLATE_NAME_REGEX"}, {"original_string": "private static final String TEMPLATE_PARAM_REGEX_REGEX = \"[^{}][^{}]*\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_PARAM_REGEX_REGEX = \"[^{}][^{}]*\"", "var_name": "TEMPLATE_PARAM_REGEX_REGEX"}, {"original_string": "private static final String TEMPLATE_PARAM_REGEX = \"\\\\{\\\\s*(\" + TEMPLATE_NAME_REGEX + \")\\\\s*(:\\\\s*(\" + TEMPLATE_PARAM_REGEX_REGEX + \"))?\\\\}\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_PARAM_REGEX = \"\\\\{\\\\s*(\" + TEMPLATE_NAME_REGEX + \")\\\\s*(:\\\\s*(\" + TEMPLATE_PARAM_REGEX_REGEX + \"))?\\\\}\"", "var_name": "TEMPLATE_PARAM_REGEX"}, {"original_string": "private static final Pattern TEMPLATE_PARAM_PATTERN = Pattern.compile(TEMPLATE_PARAM_REGEX);", "modifier": "private static final", "type": "Pattern", "declarator": "TEMPLATE_PARAM_PATTERN = Pattern.compile(TEMPLATE_PARAM_REGEX)", "var_name": "TEMPLATE_PARAM_PATTERN"}, {"original_string": "private static final String TEMPLATE_PARAM_DEFAULT_REGEX = \"[^/]+\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_PARAM_DEFAULT_REGEX = \"[^/]+\"", "var_name": "TEMPLATE_PARAM_DEFAULT_REGEX"}, {"original_string": "private final String value;", "modifier": "private final", "type": "String", "declarator": "value", "var_name": "value"}, {"original_string": "private final List<Group> groups;", "modifier": "private final", "type": "List<Group>", "declarator": "groups", "var_name": "groups"}, {"original_string": "private final String regex;", "modifier": "private final", "type": "String", "declarator": "regex", "var_name": "regex"}, {"original_string": "private final Pattern pattern;", "modifier": "private final", "type": "Pattern", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "private static final Pattern GROUP = Pattern.compile(\"[^\\\\\\\\]\\\\(\");", "modifier": "private static final", "type": "Pattern", "declarator": "GROUP = Pattern.compile(\"[^\\\\\\\\]\\\\(\")", "var_name": "GROUP"}, {"original_string": "private static final char openCurlyReplacement = 6;", "modifier": "private static final", "type": "char", "declarator": "openCurlyReplacement = 6", "var_name": "openCurlyReplacement"}, {"original_string": "private static final char closeCurlyReplacement = 7;", "modifier": "private static final", "type": "char", "declarator": "closeCurlyReplacement = 7", "var_name": "closeCurlyReplacement"}], "methods": [{"identifier": "pathElement", "parameters": "(String path)", "modifiers": "public static", "return": "PathElement", "signature": "PathElement pathElement(String path)", "full_signature": "public static PathElement pathElement(String path)", "class_method_signature": "PathElement.pathElement(String path)", "testcase": false, "constructor": false}, {"identifier": "PathElement", "parameters": "(String value, List<Group> groups, String regex)", "modifiers": "public", "return": "", "signature": " PathElement(String value, List<Group> groups, String regex)", "full_signature": "public  PathElement(String value, List<Group> groups, String regex)", "class_method_signature": "PathElement.PathElement(String value, List<Group> groups, String regex)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getValue()", "full_signature": "public String getValue()", "class_method_signature": "PathElement.getValue()", "testcase": false, "constructor": false}, {"identifier": "isTemplate", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTemplate()", "full_signature": "public boolean isTemplate()", "class_method_signature": "PathElement.isTemplate()", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(String path)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(String path)", "full_signature": "public boolean matches(String path)", "class_method_signature": "PathElement.matches(String path)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(String name, String path)", "modifiers": "public", "return": "String", "signature": "String resolve(String name, String path)", "full_signature": "public String resolve(String name, String path)", "class_method_signature": "PathElement.resolve(String name, String path)", "testcase": false, "constructor": false}, {"identifier": "groupCount", "parameters": "(String regex)", "modifiers": "private static", "return": "int", "signature": "int groupCount(String regex)", "full_signature": "private static int groupCount(String regex)", "class_method_signature": "PathElement.groupCount(String regex)", "testcase": false, "constructor": false}, {"identifier": "replaceEnclosedCurlyBraces", "parameters": "(String str)", "modifiers": "private static", "return": "String", "signature": "String replaceEnclosedCurlyBraces(String str)", "full_signature": "private static String replaceEnclosedCurlyBraces(String str)", "class_method_signature": "PathElement.replaceEnclosedCurlyBraces(String str)", "testcase": false, "constructor": false}, {"identifier": "recoverEnclosedCurlyBraces", "parameters": "(String str)", "modifiers": "private static", "return": "String", "signature": "String recoverEnclosedCurlyBraces(String str)", "full_signature": "private static String recoverEnclosedCurlyBraces(String str)", "class_method_signature": "PathElement.recoverEnclosedCurlyBraces(String str)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/gatein/management/core/api/PathElement.java"}, "focal_method": {"identifier": "matches", "parameters": "(String path)", "modifiers": "public", "return": "boolean", "body": "public boolean matches(String path)\n   {\n      int start = 0;\n      if (path.charAt(0) == '/') start++;\n\n      Matcher matcher = pattern.matcher(path);\n      matcher.region(start, path.length());\n      return matcher.matches();\n   }", "signature": "boolean matches(String path)", "full_signature": "public boolean matches(String path)", "class_method_signature": "PathElement.matches(String path)", "testcase": false, "constructor": false, "invocations": ["charAt", "matcher", "region", "length", "matches"]}, "repository": {"repo_id": 2155214, "url": "https://github.com/gatein/gatein-management", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3383, "license": "licensed"}}