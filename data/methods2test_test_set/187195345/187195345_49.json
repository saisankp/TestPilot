{"test_class": {"identifier": "PointAlongLineDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "PointAlongLineDecoder pointAlongLineDecoder = new PointAlongLineDecoder(new LocationReferencePointDecoder());", "modifier": "", "type": "PointAlongLineDecoder", "declarator": "pointAlongLineDecoder = new PointAlongLineDecoder(new LocationReferencePointDecoder())", "var_name": "pointAlongLineDecoder"}], "file": "proto/src/test/java/openlr/proto/decoder/PointAlongLineDecoderTest.java"}, "test_case": {"identifier": "testMissingLocationReference", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMissingLocationReference() {\n        LocationReferenceData locationReferenceData = LocationReferenceData.newBuilder()\n                .build();\n\n        try {\n            pointAlongLineDecoder.decode(\"1\", locationReferenceData);\n            fail();\n        } catch (PhysicalFormatException e) {\n            assertEquals(e.getErrorCode(), OpenLRProtoStatusCode.MISSING_LOCATION_REFERENCE);\n        }\n    }", "signature": "void testMissingLocationReference()", "full_signature": "@Test public void testMissingLocationReference()", "class_method_signature": "PointAlongLineDecoderTest.testMissingLocationReference()", "testcase": true, "constructor": false, "invocations": ["build", "newBuilder", "decode", "fail", "assertEquals", "getErrorCode"]}, "focal_class": {"identifier": "PointAlongLineDecoder", "superclass": "", "interfaces": "implements LocationReferenceDecoder", "fields": [{"original_string": "private final LocationReferencePointDecoder locationReferencePointDecoder;", "modifier": "private final", "type": "LocationReferencePointDecoder", "declarator": "locationReferencePointDecoder", "var_name": "locationReferencePointDecoder"}], "methods": [{"identifier": "PointAlongLineDecoder", "parameters": "(LocationReferencePointDecoder locationReferencePointDecoder)", "modifiers": "", "return": "", "signature": " PointAlongLineDecoder(LocationReferencePointDecoder locationReferencePointDecoder)", "full_signature": "  PointAlongLineDecoder(LocationReferencePointDecoder locationReferencePointDecoder)", "class_method_signature": "PointAlongLineDecoder.PointAlongLineDecoder(LocationReferencePointDecoder locationReferencePointDecoder)", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "(String id, LocationReferenceData data)", "modifiers": "@Override public", "return": "RawLocationReference", "signature": "RawLocationReference decode(String id, LocationReferenceData data)", "full_signature": "@Override public RawLocationReference decode(String id, LocationReferenceData data)", "class_method_signature": "PointAlongLineDecoder.decode(String id, LocationReferenceData data)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(openlr.proto.schema.SideOfRoad sideOfRoad)", "modifiers": "private", "return": "SideOfRoad", "signature": "SideOfRoad map(openlr.proto.schema.SideOfRoad sideOfRoad)", "full_signature": "private SideOfRoad map(openlr.proto.schema.SideOfRoad sideOfRoad)", "class_method_signature": "PointAlongLineDecoder.map(openlr.proto.schema.SideOfRoad sideOfRoad)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(openlr.proto.schema.Orientation orientation)", "modifiers": "private", "return": "Orientation", "signature": "Orientation map(openlr.proto.schema.Orientation orientation)", "full_signature": "private Orientation map(openlr.proto.schema.Orientation orientation)", "class_method_signature": "PointAlongLineDecoder.map(openlr.proto.schema.Orientation orientation)", "testcase": false, "constructor": false}], "file": "proto/src/main/java/openlr/proto/decoder/PointAlongLineDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(String id, LocationReferenceData data)", "modifiers": "@Override public", "return": "RawLocationReference", "body": "@Override\n    public RawLocationReference decode(String id, LocationReferenceData data) throws OpenLRProtoException {\n        if (!data.hasPointAlongLineLocationReference()) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.MISSING_LOCATION_REFERENCE);\n        }\n\n        PointAlongLineLocationReference pointAlongLineLocationReference = data.getPointAlongLineLocationReference();\n\n        if (!pointAlongLineLocationReference.hasFirst()) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);\n        }\n\n        LocationReferencePoint first = locationReferencePointDecoder.decode(\n                pointAlongLineLocationReference.getFirst(), 1, false);\n\n        if (!pointAlongLineLocationReference.hasLast()) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);\n        }\n\n        LocationReferencePoint last = locationReferencePointDecoder.decode(\n                pointAlongLineLocationReference.getLast(), 2, true);\n\n        Offsets offsets = new OffsetsProtoImpl(pointAlongLineLocationReference.getPositiveOffset());\n\n        SideOfRoad sideOfRoad = map(pointAlongLineLocationReference.getSideOfRoad());\n        Orientation orientation = map(pointAlongLineLocationReference.getOrientation());\n\n        return new RawPointAlongLocRef(id, first, last, offsets, sideOfRoad, orientation);\n    }", "signature": "RawLocationReference decode(String id, LocationReferenceData data)", "full_signature": "@Override public RawLocationReference decode(String id, LocationReferenceData data)", "class_method_signature": "PointAlongLineDecoder.decode(String id, LocationReferenceData data)", "testcase": false, "constructor": false, "invocations": ["hasPointAlongLineLocationReference", "getPointAlongLineLocationReference", "hasFirst", "decode", "getFirst", "hasLast", "decode", "getLast", "getPositiveOffset", "map", "getSideOfRoad", "map", "getOrientation"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}