{"test_class": {"identifier": "JsonBasedNamespaceManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/backend/filebased/JsonBasedNamespaceManagerTest.java"}, "test_case": {"identifier": "getNamespacePrefix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getNamespacePrefix() {\n        String systemTmpDir = System.getProperty(\"java.io.tmpdir\");\n        File f = new File(systemTmpDir + \"/org.eclipse.winery.test/namespace.json\");\n        f.delete();\n\n        JsonBasedNamespaceManager namespaceManager = new JsonBasedNamespaceManager(f);\n\n        String prefix = namespaceManager.getPrefix(Namespaces.TOSCA_WINERY_EXTENSIONS_NAMESPACE);\n        \n        assertEquals(\"winery\", prefix);\n        assertFalse(f.exists());\n    }", "signature": "void getNamespacePrefix()", "full_signature": "@Test public void getNamespacePrefix()", "class_method_signature": "JsonBasedNamespaceManagerTest.getNamespacePrefix()", "testcase": true, "constructor": false, "invocations": ["getProperty", "delete", "getPrefix", "assertEquals", "assertFalse", "exists"]}, "focal_class": {"identifier": "JsonBasedNamespaceManager", "superclass": "extends AbstractNamespaceManager", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(JsonBasedNamespaceManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JsonBasedNamespaceManager.class)", "var_name": "LOGGER"}, {"original_string": "private final File file;", "modifier": "private final", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private Map<String, NamespaceProperties> namespaceProperties;", "modifier": "private", "type": "Map<String, NamespaceProperties>", "declarator": "namespaceProperties", "var_name": "namespaceProperties"}], "methods": [{"identifier": "JsonBasedNamespaceManager", "parameters": "(File file)", "modifiers": "public", "return": "", "signature": " JsonBasedNamespaceManager(File file)", "full_signature": "public  JsonBasedNamespaceManager(File file)", "class_method_signature": "JsonBasedNamespaceManager.JsonBasedNamespaceManager(File file)", "testcase": false, "constructor": true}, {"identifier": "JsonBasedNamespaceManager", "parameters": "(File file, boolean local)", "modifiers": "public", "return": "", "signature": " JsonBasedNamespaceManager(File file, boolean local)", "full_signature": "public  JsonBasedNamespaceManager(File file, boolean local)", "class_method_signature": "JsonBasedNamespaceManager.JsonBasedNamespaceManager(File file, boolean local)", "testcase": false, "constructor": true}, {"identifier": "getAllPrefixes", "parameters": "(String namespace)", "modifiers": "@Override protected", "return": "Set<String>", "signature": "Set<String> getAllPrefixes(String namespace)", "full_signature": "@Override protected Set<String> getAllPrefixes(String namespace)", "class_method_signature": "JsonBasedNamespaceManager.getAllPrefixes(String namespace)", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "(String namespace)", "modifiers": "@Override public", "return": "String", "signature": "String getPrefix(String namespace)", "full_signature": "@Override public String getPrefix(String namespace)", "class_method_signature": "JsonBasedNamespaceManager.getPrefix(String namespace)", "testcase": false, "constructor": false}, {"identifier": "getNamespaceProperties", "parameters": "(String namespace)", "modifiers": "@NonNull public", "return": "NamespaceProperties", "signature": "NamespaceProperties getNamespaceProperties(String namespace)", "full_signature": "@NonNull public NamespaceProperties getNamespaceProperties(String namespace)", "class_method_signature": "JsonBasedNamespaceManager.getNamespaceProperties(String namespace)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void save()", "full_signature": "private void save()", "class_method_signature": "JsonBasedNamespaceManager.save()", "testcase": false, "constructor": false}, {"identifier": "hasPermanentProperties", "parameters": "(String namespace)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPermanentProperties(String namespace)", "full_signature": "@Override public boolean hasPermanentProperties(String namespace)", "class_method_signature": "JsonBasedNamespaceManager.hasPermanentProperties(String namespace)", "testcase": false, "constructor": false}, {"identifier": "removeNamespaceProperties", "parameters": "(String namespace)", "modifiers": "@Override public", "return": "void", "signature": "void removeNamespaceProperties(String namespace)", "full_signature": "@Override public void removeNamespaceProperties(String namespace)", "class_method_signature": "JsonBasedNamespaceManager.removeNamespaceProperties(String namespace)", "testcase": false, "constructor": false}, {"identifier": "setNamespaceProperties", "parameters": "(String namespace, NamespaceProperties properties)", "modifiers": "@Override public", "return": "void", "signature": "void setNamespaceProperties(String namespace, NamespaceProperties properties)", "full_signature": "@Override public void setNamespaceProperties(String namespace, NamespaceProperties properties)", "class_method_signature": "JsonBasedNamespaceManager.setNamespaceProperties(String namespace, NamespaceProperties properties)", "testcase": false, "constructor": false}, {"identifier": "getAllNamespaces", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, NamespaceProperties>", "signature": "Map<String, NamespaceProperties> getAllNamespaces()", "full_signature": "@Override public Map<String, NamespaceProperties> getAllNamespaces()", "class_method_signature": "JsonBasedNamespaceManager.getAllNamespaces()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "JsonBasedNamespaceManager.clear()", "testcase": false, "constructor": false}, {"identifier": "loadNamespacePropertiesFromFile", "parameters": "()", "modifiers": "private", "return": "Map<String, NamespaceProperties>", "signature": "Map<String, NamespaceProperties> loadNamespacePropertiesFromFile()", "full_signature": "private Map<String, NamespaceProperties> loadNamespacePropertiesFromFile()", "class_method_signature": "JsonBasedNamespaceManager.loadNamespacePropertiesFromFile()", "testcase": false, "constructor": false}, {"identifier": "addAllPermanent", "parameters": "(Collection<NamespaceProperties> properties)", "modifiers": "@Override public", "return": "void", "signature": "void addAllPermanent(Collection<NamespaceProperties> properties)", "full_signature": "@Override public void addAllPermanent(Collection<NamespaceProperties> properties)", "class_method_signature": "JsonBasedNamespaceManager.addAllPermanent(Collection<NamespaceProperties> properties)", "testcase": false, "constructor": false}, {"identifier": "replaceAll", "parameters": "(Map<String, NamespaceProperties> map)", "modifiers": "@Override public", "return": "void", "signature": "void replaceAll(Map<String, NamespaceProperties> map)", "full_signature": "@Override public void replaceAll(Map<String, NamespaceProperties> map)", "class_method_signature": "JsonBasedNamespaceManager.replaceAll(Map<String, NamespaceProperties> map)", "testcase": false, "constructor": false}, {"identifier": "isPatternNamespace", "parameters": "(String namespace)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPatternNamespace(String namespace)", "full_signature": "@Override public boolean isPatternNamespace(String namespace)", "class_method_signature": "JsonBasedNamespaceManager.isPatternNamespace(String namespace)", "testcase": false, "constructor": false}, {"identifier": "isSecureCollection", "parameters": "(String namespace)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSecureCollection(String namespace)", "full_signature": "@Override public boolean isSecureCollection(String namespace)", "class_method_signature": "JsonBasedNamespaceManager.isSecureCollection(String namespace)", "testcase": false, "constructor": false}, {"identifier": "isGeneratedNamespace", "parameters": "(String namespace)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isGeneratedNamespace(String namespace)", "full_signature": "@Override public boolean isGeneratedNamespace(String namespace)", "class_method_signature": "JsonBasedNamespaceManager.isGeneratedNamespace(String namespace)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/filebased/JsonBasedNamespaceManager.java"}, "focal_method": {"identifier": "getPrefix", "parameters": "(String namespace)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getPrefix(String namespace) {\n        return getNamespaceProperties(Objects.isNull(namespace) ? \"\" : namespace).getPrefix();\n    }", "signature": "String getPrefix(String namespace)", "full_signature": "@Override public String getPrefix(String namespace)", "class_method_signature": "JsonBasedNamespaceManager.getPrefix(String namespace)", "testcase": false, "constructor": false, "invocations": ["getPrefix", "getNamespaceProperties", "isNull"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}