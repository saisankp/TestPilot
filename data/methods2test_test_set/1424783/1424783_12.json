{"test_class": {"identifier": "SeriesUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final List<Number> LINEAR = Arrays.asList(new Number[]{ 1, 2, 3, 4 ,5 , 6, 7, 8});", "modifier": "final", "type": "List<Number>", "declarator": "LINEAR = Arrays.asList(new Number[]{ 1, 2, 3, 4 ,5 , 6, 7, 8})", "var_name": "LINEAR"}, {"original_string": "final List<Number> LINEAR_INVERSE = Arrays.asList(new Number[]{ 8, 7, 6, 5, 4, 3, 2, 1});", "modifier": "final", "type": "List<Number>", "declarator": "LINEAR_INVERSE = Arrays.asList(new Number[]{ 8, 7, 6, 5, 4, 3, 2, 1})", "var_name": "LINEAR_INVERSE"}, {"original_string": "final List<Number> ZIG_ZAG = Arrays.asList(new Number[]{1, 10, 1, 10, 1, 10, 1, 10});", "modifier": "final", "type": "List<Number>", "declarator": "ZIG_ZAG = Arrays.asList(new Number[]{1, 10, 1, 10, 1, 10, 1, 10})", "var_name": "ZIG_ZAG"}, {"original_string": "final List<Number> NULLS = Arrays.asList(new Number[]{null, 2, null, 4, null, 0, -1, null});", "modifier": "final", "type": "List<Number>", "declarator": "NULLS = Arrays.asList(new Number[]{null, 2, null, 4, null, 0, -1, null})", "var_name": "NULLS"}, {"original_string": "final List<Number> SINGLE_VALUE = Arrays.asList(new Number[]{3});", "modifier": "final", "type": "List<Number>", "declarator": "SINGLE_VALUE = Arrays.asList(new Number[]{3})", "var_name": "SINGLE_VALUE"}, {"original_string": "final List<Number> SINGLE_VALUE_NULL = Arrays.asList(new Number[]{null});", "modifier": "final", "type": "List<Number>", "declarator": "SINGLE_VALUE_NULL = Arrays.asList(new Number[]{null})", "var_name": "SINGLE_VALUE_NULL"}, {"original_string": "final List<Number> EMPTY = new ArrayList<>();", "modifier": "final", "type": "List<Number>", "declarator": "EMPTY = new ArrayList<>()", "var_name": "EMPTY"}], "file": "androidplot-core/src/test/java/com/androidplot/util/SeriesUtilsTest.java"}, "test_case": {"identifier": "minMax_calculatesExpectedRegion_onFastXYSeriesWithLayoutConstraints", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void minMax_calculatesExpectedRegion_onFastXYSeriesWithLayoutConstraints() {\n        FastXYSeries series = new FastXYSeries() {\n\n            // create a couple arrays of y-values to plot:\n            final ArrayList<Integer> times = new ArrayList<>();\n            final ArrayList<Integer> values = new ArrayList<>();\n\n            {\n                for (int i = 0; i < 10; i++) {\n                    times.add(i);\n                    values.add(i);\n                }\n            }\n\n            @Override\n            public int size() {\n                return times.size();\n            }\n\n            @Override\n            public Number getX(int index) {\n                return times.get(index);\n            }\n\n            @Override\n            public Number getY(int index) {\n                return values.get(index);\n            }\n\n            @Override\n            public String getTitle() {\n                return \"Isaac's crazy thing\";\n            }\n\n            @Override\n            public RectRegion minMax() {\n                return new RectRegion(0, 10, 0, 10);\n            }\n        };\n\n        final XYConstraints constraints = new XYConstraints();\n        constraints.setDomainLowerBoundaryMode(BoundaryMode.FIXED);\n        constraints.setDomainUpperBoundaryMode(BoundaryMode.FIXED);\n        constraints.setMinX(5);\n        constraints.setMaxX(9);\n\n        final RectRegion result = SeriesUtils.minMax(constraints, series);\n        assertEquals(5d, result.getMinX().doubleValue());\n        assertEquals(9d, result.getMaxX().doubleValue());\n        assertEquals(5d, result.getMinY().doubleValue());\n        assertEquals(9d, result.getMaxY().doubleValue());\n    }", "signature": "void minMax_calculatesExpectedRegion_onFastXYSeriesWithLayoutConstraints()", "full_signature": "@Test public void minMax_calculatesExpectedRegion_onFastXYSeriesWithLayoutConstraints()", "class_method_signature": "SeriesUtilsTest.minMax_calculatesExpectedRegion_onFastXYSeriesWithLayoutConstraints()", "testcase": true, "constructor": false, "invocations": ["add", "add", "size", "get", "get", "setDomainLowerBoundaryMode", "setDomainUpperBoundaryMode", "setMinX", "setMaxX", "minMax", "assertEquals", "doubleValue", "getMinX", "assertEquals", "doubleValue", "getMaxX", "assertEquals", "doubleValue", "getMinY", "assertEquals", "doubleValue", "getMaxY"]}, "focal_class": {"identifier": "SeriesUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "minMax", "parameters": "(List<XYSeries> seriesList)", "modifiers": "public static", "return": "RectRegion", "signature": "RectRegion minMax(List<XYSeries> seriesList)", "full_signature": "public static RectRegion minMax(List<XYSeries> seriesList)", "class_method_signature": "SeriesUtils.minMax(List<XYSeries> seriesList)", "testcase": false, "constructor": false}, {"identifier": "minMax", "parameters": "(XYSeries... seriesList)", "modifiers": "public static", "return": "RectRegion", "signature": "RectRegion minMax(XYSeries... seriesList)", "full_signature": "public static RectRegion minMax(XYSeries... seriesList)", "class_method_signature": "SeriesUtils.minMax(XYSeries... seriesList)", "testcase": false, "constructor": false}, {"identifier": "minMaxX", "parameters": "(XYSeries... seriesList)", "modifiers": "public static", "return": "Region", "signature": "Region minMaxX(XYSeries... seriesList)", "full_signature": "public static Region minMaxX(XYSeries... seriesList)", "class_method_signature": "SeriesUtils.minMaxX(XYSeries... seriesList)", "testcase": false, "constructor": false}, {"identifier": "minMaxY", "parameters": "(XYSeries... seriesList)", "modifiers": "public static", "return": "Region", "signature": "Region minMaxY(XYSeries... seriesList)", "full_signature": "public static Region minMaxY(XYSeries... seriesList)", "class_method_signature": "SeriesUtils.minMaxY(XYSeries... seriesList)", "testcase": false, "constructor": false}, {"identifier": "minMax", "parameters": "(XYConstraints constraints, List<XYSeries> seriesList)", "modifiers": "public static", "return": "RectRegion", "signature": "RectRegion minMax(XYConstraints constraints, List<XYSeries> seriesList)", "full_signature": "public static RectRegion minMax(XYConstraints constraints, List<XYSeries> seriesList)", "class_method_signature": "SeriesUtils.minMax(XYConstraints constraints, List<XYSeries> seriesList)", "testcase": false, "constructor": false}, {"identifier": "minMax", "parameters": "(XYConstraints constraints, XYSeries... seriesArray)", "modifiers": "public static", "return": "RectRegion", "signature": "RectRegion minMax(XYConstraints constraints, XYSeries... seriesArray)", "full_signature": "public static RectRegion minMax(XYConstraints constraints, XYSeries... seriesArray)", "class_method_signature": "SeriesUtils.minMax(XYConstraints constraints, XYSeries... seriesArray)", "testcase": false, "constructor": false}, {"identifier": "minMax", "parameters": "(Region bounds, List<Number>... lists)", "modifiers": "public static", "return": "Region", "signature": "Region minMax(Region bounds, List<Number>... lists)", "full_signature": "public static Region minMax(Region bounds, List<Number>... lists)", "class_method_signature": "SeriesUtils.minMax(Region bounds, List<Number>... lists)", "testcase": false, "constructor": false}, {"identifier": "iBounds", "parameters": "(XYSeries series, RectRegion visibleBounds)", "modifiers": "public static", "return": "Region", "signature": "Region iBounds(XYSeries series, RectRegion visibleBounds)", "full_signature": "public static Region iBounds(XYSeries series, RectRegion visibleBounds)", "class_method_signature": "SeriesUtils.iBounds(XYSeries series, RectRegion visibleBounds)", "testcase": false, "constructor": false}, {"identifier": "iBoundsMax", "parameters": "(XYSeries series, double visibleMax, float step)", "modifiers": "protected static", "return": "int", "signature": "int iBoundsMax(XYSeries series, double visibleMax, float step)", "full_signature": "protected static int iBoundsMax(XYSeries series, double visibleMax, float step)", "class_method_signature": "SeriesUtils.iBoundsMax(XYSeries series, double visibleMax, float step)", "testcase": false, "constructor": false}, {"identifier": "iBoundsMin", "parameters": "(XYSeries series, double visibleMin, float step)", "modifiers": "protected static", "return": "int", "signature": "int iBoundsMin(XYSeries series, double visibleMin, float step)", "full_signature": "protected static int iBoundsMin(XYSeries series, double visibleMin, float step)", "class_method_signature": "SeriesUtils.iBoundsMin(XYSeries series, double visibleMin, float step)", "testcase": false, "constructor": false}, {"identifier": "getNullRegion", "parameters": "(XYSeries series, int index)", "modifiers": "protected static", "return": "Region", "signature": "Region getNullRegion(XYSeries series, int index)", "full_signature": "protected static Region getNullRegion(XYSeries series, int index)", "class_method_signature": "SeriesUtils.getNullRegion(XYSeries series, int index)", "testcase": false, "constructor": false}, {"identifier": "minMax", "parameters": "(List<Number>... lists)", "modifiers": "public static", "return": "Region", "signature": "Region minMax(List<Number>... lists)", "full_signature": "public static Region minMax(List<Number>... lists)", "class_method_signature": "SeriesUtils.minMax(List<Number>... lists)", "testcase": false, "constructor": false}, {"identifier": "getXYOrder", "parameters": "(XYSeries series)", "modifiers": "public static", "return": "OrderedXYSeries.XOrder", "signature": "OrderedXYSeries.XOrder getXYOrder(XYSeries series)", "full_signature": "public static OrderedXYSeries.XOrder getXYOrder(XYSeries series)", "class_method_signature": "SeriesUtils.getXYOrder(XYSeries series)", "testcase": false, "constructor": false}], "file": "androidplot-core/src/main/java/com/androidplot/util/SeriesUtils.java"}, "focal_method": {"identifier": "minMax", "parameters": "(List<XYSeries> seriesList)", "modifiers": "public static", "return": "RectRegion", "body": "public static RectRegion minMax(List<XYSeries> seriesList) {\n        return minMax(null, seriesList);\n    }", "signature": "RectRegion minMax(List<XYSeries> seriesList)", "full_signature": "public static RectRegion minMax(List<XYSeries> seriesList)", "class_method_signature": "SeriesUtils.minMax(List<XYSeries> seriesList)", "testcase": false, "constructor": false, "invocations": ["minMax"]}, "repository": {"repo_id": 1424783, "url": "https://github.com/halfhp/androidplot", "language": "Java", "is_fork": false, "fork_count": 129, "stargazer_count": 369, "size": 7178, "license": "licensed"}}