{"test_class": {"identifier": "BooleanBoxWidgetTest", "superclass": "extends AbstractWidgetTest", "interfaces": "", "fields": [{"original_string": "private BooleanBoxWidget widget;", "modifier": "private", "type": "BooleanBoxWidget", "declarator": "widget", "var_name": "widget"}], "file": "plugins/base/src/test/java/edu/wpi/first/shuffleboard/plugin/base/widget/BooleanBoxWidgetTest.java"}, "test_case": {"identifier": "testColorWhenFalse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testColorWhenFalse() {\n    widget.getSource().setData(false);\n    WaitForAsyncUtils.waitForFxEvents();\n    assertEquals(widget.getFalseColor(), getBackground(), \"Background should be the 'false' color\");\n  }", "signature": "void testColorWhenFalse()", "full_signature": "@Test public void testColorWhenFalse()", "class_method_signature": "BooleanBoxWidgetTest.testColorWhenFalse()", "testcase": true, "constructor": false, "invocations": ["setData", "getSource", "waitForFxEvents", "assertEquals", "getFalseColor", "getBackground"]}, "focal_class": {"identifier": "BooleanBoxWidget", "superclass": "extends SimpleAnnotatedWidget<Boolean>", "interfaces": "", "fields": [{"original_string": "@FXML\n  private Pane root;", "modifier": "@FXML\n  private", "type": "Pane", "declarator": "root", "var_name": "root"}, {"original_string": "private final Property<Color> trueColor\n      = new SimpleObjectProperty<>(this, \"colorWhenTrue\", Color.LAWNGREEN);", "modifier": "private final", "type": "Property<Color>", "declarator": "trueColor\n      = new SimpleObjectProperty<>(this, \"colorWhenTrue\", Color.LAWNGREEN)", "var_name": "trueColor"}, {"original_string": "private final Property<Color> falseColor\n      = new SimpleObjectProperty<>(this, \"colorWhenFalse\", Color.DARKRED);", "modifier": "private final", "type": "Property<Color>", "declarator": "falseColor\n      = new SimpleObjectProperty<>(this, \"colorWhenFalse\", Color.DARKRED)", "var_name": "falseColor"}], "methods": [{"identifier": "initialize", "parameters": "()", "modifiers": "@FXML private", "return": "void", "signature": "void initialize()", "full_signature": "@FXML private void initialize()", "class_method_signature": "BooleanBoxWidget.initialize()", "testcase": false, "constructor": false}, {"identifier": "getSettings", "parameters": "()", "modifiers": "@Override public", "return": "List<Group>", "signature": "List<Group> getSettings()", "full_signature": "@Override public List<Group> getSettings()", "class_method_signature": "BooleanBoxWidget.getSettings()", "testcase": false, "constructor": false}, {"identifier": "getView", "parameters": "()", "modifiers": "@Override public", "return": "Pane", "signature": "Pane getView()", "full_signature": "@Override public Pane getView()", "class_method_signature": "BooleanBoxWidget.getView()", "testcase": false, "constructor": false}, {"identifier": "getColor", "parameters": "()", "modifiers": "private", "return": "Color", "signature": "Color getColor()", "full_signature": "private Color getColor()", "class_method_signature": "BooleanBoxWidget.getColor()", "testcase": false, "constructor": false}, {"identifier": "createSolidColorBackground", "parameters": "(Color color)", "modifiers": "private", "return": "Background", "signature": "Background createSolidColorBackground(Color color)", "full_signature": "private Background createSolidColorBackground(Color color)", "class_method_signature": "BooleanBoxWidget.createSolidColorBackground(Color color)", "testcase": false, "constructor": false}, {"identifier": "getTrueColor", "parameters": "()", "modifiers": "public", "return": "Color", "signature": "Color getTrueColor()", "full_signature": "public Color getTrueColor()", "class_method_signature": "BooleanBoxWidget.getTrueColor()", "testcase": false, "constructor": false}, {"identifier": "trueColorProperty", "parameters": "()", "modifiers": "public", "return": "Property<Color>", "signature": "Property<Color> trueColorProperty()", "full_signature": "public Property<Color> trueColorProperty()", "class_method_signature": "BooleanBoxWidget.trueColorProperty()", "testcase": false, "constructor": false}, {"identifier": "setTrueColor", "parameters": "(Color trueColor)", "modifiers": "public", "return": "void", "signature": "void setTrueColor(Color trueColor)", "full_signature": "public void setTrueColor(Color trueColor)", "class_method_signature": "BooleanBoxWidget.setTrueColor(Color trueColor)", "testcase": false, "constructor": false}, {"identifier": "getFalseColor", "parameters": "()", "modifiers": "public", "return": "Color", "signature": "Color getFalseColor()", "full_signature": "public Color getFalseColor()", "class_method_signature": "BooleanBoxWidget.getFalseColor()", "testcase": false, "constructor": false}, {"identifier": "falseColorProperty", "parameters": "()", "modifiers": "public", "return": "Property<Color>", "signature": "Property<Color> falseColorProperty()", "full_signature": "public Property<Color> falseColorProperty()", "class_method_signature": "BooleanBoxWidget.falseColorProperty()", "testcase": false, "constructor": false}, {"identifier": "setFalseColor", "parameters": "(Color falseColor)", "modifiers": "public", "return": "void", "signature": "void setFalseColor(Color falseColor)", "full_signature": "public void setFalseColor(Color falseColor)", "class_method_signature": "BooleanBoxWidget.setFalseColor(Color falseColor)", "testcase": false, "constructor": false}], "file": "plugins/base/src/main/java/edu/wpi/first/shuffleboard/plugin/base/widget/BooleanBoxWidget.java"}, "focal_method": {"identifier": "getFalseColor", "parameters": "()", "modifiers": "public", "return": "Color", "body": "public Color getFalseColor() {\n    return falseColor.getValue();\n  }", "signature": "Color getFalseColor()", "full_signature": "public Color getFalseColor()", "class_method_signature": "BooleanBoxWidget.getFalseColor()", "testcase": false, "constructor": false, "invocations": ["getValue"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}