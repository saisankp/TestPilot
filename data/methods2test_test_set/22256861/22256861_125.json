{"test_class": {"identifier": "SmacAlgorithmTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static double[] _reference = {0.468094529069023, // coef_ASTER1_CONT.dat\n            0.430917490955927, // coef_ASTER1_DES.dat\n            0.461342029523011, // coef_ASTER2_CONT.dat\n            0.428992529994392, // coef_ASTER2_DES.dat\n            0.470408616548691, // coef_ASTER3B_CONT.dat\n            0.434972728967646, // coef_ASTER3B_DES.dat\n            0.472640579528882, // coef_ASTER3N_CONT.dat\n            0.437091917222285, // coef_ASTER3N_DES.dat\n            0.441182451764032, // coef_ASTER4_CONT.dat\n            0.415201280606522, // coef_ASTER4_DES.dat\n            0.438643542240904, // coef_ASTER5_CONT.dat\n            0.423308229318255, // coef_ASTER5_DES.dat\n            0.443541240669732, // coef_ASTER6_CONT.dat\n            0.428933562315611, // coef_ASTER6_DES.dat\n            0.459657518954947, // coef_ASTER7_CONT.dat\n            0.445700178500567, // coef_ASTER7_DES.dat\n            0.521567170975127, // coef_ASTER8_CONT.dat\n            0.506842985725600, // coef_ASTER8_DES.dat\n            0.590143303835105, // coef_ASTER9_CONT.dat\n            0.573935119748640, // coef_ASTER9_DES.dat\n            0.433650603374593, // coef_MISR1_CONT.dat\n            0.390897887585071, // coef_MISR1_DES.dat\n            0.469412585976696, // coef_MISR2_CONT.dat\n            0.431638285127395, // coef_MISR2_DES.dat\n            0.449828137693103, // coef_MISR3_CONT.dat\n            0.417712154021377, // coef_MISR3_DES.dat\n            0.441591119997386, // coef_MISR4_CONT.dat\n            0.406790518776699, // coef_MISR4_DES.dat\n            0.461327947925237, // coef_MODIS1_CONT.dat\n            0.428871402347875, // coef_MODIS1_DES.dat\n            0.442949538024049, // coef_MODIS2_CONT.dat\n            0.408158035789076, // coef_MODIS2_DES.dat\n            0.436654270723612, // coef_MODIS3_CONT.dat\n            0.395951007772092, // coef_MODIS3_DES.dat\n            0.467610577010676, // coef_MODIS4_CONT.dat\n            0.429787435263710, // coef_MODIS4_DES.dat\n            0.439456234527464, // coef_MODIS5_CONT.dat\n            0.407051175401646, // coef_MODIS5_DES.dat\n            0.437512164557338, // coef_MODIS6_CONT.dat\n            0.411143675694166, // coef_MODIS6_DES.dat\n            0.439676745250465, // coef_MODIS7_CONT.dat\n            0.423254243772214, // coef_MODIS7_DES.dat\n            0.419793586189782, // coef_MODIS8_CONT.dat\n            0.375225560448194, // coef_MODIS8_DES.dat\n            0.432913560839322, // coef_MODIS9_CONT.dat\n            0.389635748416660, // coef_MODIS9_DES.dat\n            0.438892320591905, // coef_MODIS10_CONT.dat\n            0.401002795199381, // coef_MODIS10_DES.dat\n            0.456435084955153, // coef_MODIS11_CONT.dat\n            0.419234164210766, // coef_MODIS11_DES.dat\n            0.464087675812192, // coef_MODIS12_CONT.dat\n            0.426257864134451, // coef_MODIS12_DES.dat\n            0.451150574435740, // coef_MODIS13_CONT.dat\n            0.419103304428866, // coef_MODIS13_DES.dat\n            0.447845970070957, // coef_MODIS14_CONT.dat\n            0.415979369662203, // coef_MODIS14_DES.dat\n            0.442845802617623, // coef_MODIS15_CONT.dat\n            0.409148050381570, // coef_MODIS15_DES.dat\n            0.439613321935921, // coef_MODIS16_CONT.dat\n            0.404940921879262, // coef_MODIS16_DES.dat\n            0.517435198696615, // coef_MODIS17_CONT.dat\n            0.479460622159371, // coef_MODIS17_DES.dat\n            0.883303965959083, // coef_MODIS18_CONT.dat\n            0.824207626660916, // coef_MODIS18_DES.dat\n    };", "modifier": "static", "type": "double[]", "declarator": "_reference = {0.468094529069023, // coef_ASTER1_CONT.dat\n            0.430917490955927, // coef_ASTER1_DES.dat\n            0.461342029523011, // coef_ASTER2_CONT.dat\n            0.428992529994392, // coef_ASTER2_DES.dat\n            0.470408616548691, // coef_ASTER3B_CONT.dat\n            0.434972728967646, // coef_ASTER3B_DES.dat\n            0.472640579528882, // coef_ASTER3N_CONT.dat\n            0.437091917222285, // coef_ASTER3N_DES.dat\n            0.441182451764032, // coef_ASTER4_CONT.dat\n            0.415201280606522, // coef_ASTER4_DES.dat\n            0.438643542240904, // coef_ASTER5_CONT.dat\n            0.423308229318255, // coef_ASTER5_DES.dat\n            0.443541240669732, // coef_ASTER6_CONT.dat\n            0.428933562315611, // coef_ASTER6_DES.dat\n            0.459657518954947, // coef_ASTER7_CONT.dat\n            0.445700178500567, // coef_ASTER7_DES.dat\n            0.521567170975127, // coef_ASTER8_CONT.dat\n            0.506842985725600, // coef_ASTER8_DES.dat\n            0.590143303835105, // coef_ASTER9_CONT.dat\n            0.573935119748640, // coef_ASTER9_DES.dat\n            0.433650603374593, // coef_MISR1_CONT.dat\n            0.390897887585071, // coef_MISR1_DES.dat\n            0.469412585976696, // coef_MISR2_CONT.dat\n            0.431638285127395, // coef_MISR2_DES.dat\n            0.449828137693103, // coef_MISR3_CONT.dat\n            0.417712154021377, // coef_MISR3_DES.dat\n            0.441591119997386, // coef_MISR4_CONT.dat\n            0.406790518776699, // coef_MISR4_DES.dat\n            0.461327947925237, // coef_MODIS1_CONT.dat\n            0.428871402347875, // coef_MODIS1_DES.dat\n            0.442949538024049, // coef_MODIS2_CONT.dat\n            0.408158035789076, // coef_MODIS2_DES.dat\n            0.436654270723612, // coef_MODIS3_CONT.dat\n            0.395951007772092, // coef_MODIS3_DES.dat\n            0.467610577010676, // coef_MODIS4_CONT.dat\n            0.429787435263710, // coef_MODIS4_DES.dat\n            0.439456234527464, // coef_MODIS5_CONT.dat\n            0.407051175401646, // coef_MODIS5_DES.dat\n            0.437512164557338, // coef_MODIS6_CONT.dat\n            0.411143675694166, // coef_MODIS6_DES.dat\n            0.439676745250465, // coef_MODIS7_CONT.dat\n            0.423254243772214, // coef_MODIS7_DES.dat\n            0.419793586189782, // coef_MODIS8_CONT.dat\n            0.375225560448194, // coef_MODIS8_DES.dat\n            0.432913560839322, // coef_MODIS9_CONT.dat\n            0.389635748416660, // coef_MODIS9_DES.dat\n            0.438892320591905, // coef_MODIS10_CONT.dat\n            0.401002795199381, // coef_MODIS10_DES.dat\n            0.456435084955153, // coef_MODIS11_CONT.dat\n            0.419234164210766, // coef_MODIS11_DES.dat\n            0.464087675812192, // coef_MODIS12_CONT.dat\n            0.426257864134451, // coef_MODIS12_DES.dat\n            0.451150574435740, // coef_MODIS13_CONT.dat\n            0.419103304428866, // coef_MODIS13_DES.dat\n            0.447845970070957, // coef_MODIS14_CONT.dat\n            0.415979369662203, // coef_MODIS14_DES.dat\n            0.442845802617623, // coef_MODIS15_CONT.dat\n            0.409148050381570, // coef_MODIS15_DES.dat\n            0.439613321935921, // coef_MODIS16_CONT.dat\n            0.404940921879262, // coef_MODIS16_DES.dat\n            0.517435198696615, // coef_MODIS17_CONT.dat\n            0.479460622159371, // coef_MODIS17_DES.dat\n            0.883303965959083, // coef_MODIS18_CONT.dat\n            0.824207626660916, // coef_MODIS18_DES.dat\n    }", "var_name": "_reference"}, {"original_string": "static String _referenceCoeffs[] = {\"coef_ASTER1_CONT.dat\",\n            \"coef_ASTER1_DES.dat\",\n            \"coef_ASTER2_CONT.dat\",\n            \"coef_ASTER2_DES.dat\",\n            \"coef_ASTER3B_CONT.dat\",\n            \"coef_ASTER3B_DES.dat\",\n            \"coef_ASTER3N_CONT.dat\",\n            \"coef_ASTER3N_DES.dat\",\n            \"coef_ASTER4_CONT.dat\",\n            \"coef_ASTER4_DES.dat\",\n            \"coef_ASTER5_CONT.dat\",\n            \"coef_ASTER5_DES.dat\",\n            \"coef_ASTER6_CONT.dat\",\n            \"coef_ASTER6_DES.dat\",\n            \"coef_ASTER7_CONT.dat\",\n            \"coef_ASTER7_DES.dat\",\n            \"coef_ASTER8_CONT.dat\",\n            \"coef_ASTER8_DES.dat\",\n            \"coef_ASTER9_CONT.dat\",\n            \"coef_ASTER9_DES.dat\",\n            \"coef_MISR1_CONT.dat\",\n            \"coef_MISR1_DES.dat\",\n            \"coef_MISR2_CONT.dat\",\n            \"coef_MISR2_DES.dat\",\n            \"coef_MISR3_CONT.dat\",\n            \"coef_MISR3_DES.dat\",\n            \"coef_MISR4_CONT.dat\",\n            \"coef_MISR4_DES.dat\",\n            \"coef_MODIS1_CONT.dat\",\n            \"coef_MODIS1_DES.dat\",\n            \"coef_MODIS2_CONT.dat\",\n            \"coef_MODIS2_DES.dat\",\n            \"coef_MODIS3_CONT.dat\",\n            \"coef_MODIS3_DES.dat\",\n            \"coef_MODIS4_CONT.dat\",\n            \"coef_MODIS4_DES.dat\",\n            \"coef_MODIS5_CONT.dat\",\n            \"coef_MODIS5_DES.dat\",\n            \"coef_MODIS6_CONT.dat\",\n            \"coef_MODIS6_DES.dat\",\n            \"coef_MODIS7_CONT.dat\",\n            \"coef_MODIS7_DES.dat\",\n            \"coef_MODIS8_CONT.dat\",\n            \"coef_MODIS8_DES.dat\",\n            \"coef_MODIS9_CONT.dat\",\n            \"coef_MODIS9_DES.dat\",\n            \"coef_MODIS10_CONT.dat\",\n            \"coef_MODIS10_DES.dat\",\n            \"coef_MODIS11_CONT.dat\",\n            \"coef_MODIS11_DES.dat\",\n            \"coef_MODIS12_CONT.dat\",\n            \"coef_MODIS12_DES.dat\",\n            \"coef_MODIS13_CONT.dat\",\n            \"coef_MODIS13_DES.dat\",\n            \"coef_MODIS14_CONT.dat\",\n            \"coef_MODIS14_DES.dat\",\n            \"coef_MODIS15_CONT.dat\",\n            \"coef_MODIS15_DES.dat\",\n            \"coef_MODIS16_CONT.dat\",\n            \"coef_MODIS16_DES.dat\",\n            \"coef_MODIS17_CONT.dat\",\n            \"coef_MODIS17_DES.dat\",\n            \"coef_MODIS18_CONT.dat\",\n            \"coef_MODIS18_DES.dat\"};", "modifier": "static", "type": "String", "declarator": "_referenceCoeffs[] = {\"coef_ASTER1_CONT.dat\",\n            \"coef_ASTER1_DES.dat\",\n            \"coef_ASTER2_CONT.dat\",\n            \"coef_ASTER2_DES.dat\",\n            \"coef_ASTER3B_CONT.dat\",\n            \"coef_ASTER3B_DES.dat\",\n            \"coef_ASTER3N_CONT.dat\",\n            \"coef_ASTER3N_DES.dat\",\n            \"coef_ASTER4_CONT.dat\",\n            \"coef_ASTER4_DES.dat\",\n            \"coef_ASTER5_CONT.dat\",\n            \"coef_ASTER5_DES.dat\",\n            \"coef_ASTER6_CONT.dat\",\n            \"coef_ASTER6_DES.dat\",\n            \"coef_ASTER7_CONT.dat\",\n            \"coef_ASTER7_DES.dat\",\n            \"coef_ASTER8_CONT.dat\",\n            \"coef_ASTER8_DES.dat\",\n            \"coef_ASTER9_CONT.dat\",\n            \"coef_ASTER9_DES.dat\",\n            \"coef_MISR1_CONT.dat\",\n            \"coef_MISR1_DES.dat\",\n            \"coef_MISR2_CONT.dat\",\n            \"coef_MISR2_DES.dat\",\n            \"coef_MISR3_CONT.dat\",\n            \"coef_MISR3_DES.dat\",\n            \"coef_MISR4_CONT.dat\",\n            \"coef_MISR4_DES.dat\",\n            \"coef_MODIS1_CONT.dat\",\n            \"coef_MODIS1_DES.dat\",\n            \"coef_MODIS2_CONT.dat\",\n            \"coef_MODIS2_DES.dat\",\n            \"coef_MODIS3_CONT.dat\",\n            \"coef_MODIS3_DES.dat\",\n            \"coef_MODIS4_CONT.dat\",\n            \"coef_MODIS4_DES.dat\",\n            \"coef_MODIS5_CONT.dat\",\n            \"coef_MODIS5_DES.dat\",\n            \"coef_MODIS6_CONT.dat\",\n            \"coef_MODIS6_DES.dat\",\n            \"coef_MODIS7_CONT.dat\",\n            \"coef_MODIS7_DES.dat\",\n            \"coef_MODIS8_CONT.dat\",\n            \"coef_MODIS8_DES.dat\",\n            \"coef_MODIS9_CONT.dat\",\n            \"coef_MODIS9_DES.dat\",\n            \"coef_MODIS10_CONT.dat\",\n            \"coef_MODIS10_DES.dat\",\n            \"coef_MODIS11_CONT.dat\",\n            \"coef_MODIS11_DES.dat\",\n            \"coef_MODIS12_CONT.dat\",\n            \"coef_MODIS12_DES.dat\",\n            \"coef_MODIS13_CONT.dat\",\n            \"coef_MODIS13_DES.dat\",\n            \"coef_MODIS14_CONT.dat\",\n            \"coef_MODIS14_DES.dat\",\n            \"coef_MODIS15_CONT.dat\",\n            \"coef_MODIS15_DES.dat\",\n            \"coef_MODIS16_CONT.dat\",\n            \"coef_MODIS16_DES.dat\",\n            \"coef_MODIS17_CONT.dat\",\n            \"coef_MODIS17_DES.dat\",\n            \"coef_MODIS18_CONT.dat\",\n            \"coef_MODIS18_DES.dat\"}", "var_name": "_referenceCoeffs"}, {"original_string": "static int _vectorSize = 1;", "modifier": "static", "type": "int", "declarator": "_vectorSize = 1", "var_name": "_vectorSize"}, {"original_string": "static float _defSza = 30.0f;", "modifier": "static", "type": "float", "declarator": "_defSza = 30.0f", "var_name": "_defSza"}, {"original_string": "static float _defSaa = 30.0f;", "modifier": "static", "type": "float", "declarator": "_defSaa = 30.0f", "var_name": "_defSaa"}, {"original_string": "static float _defVza = 15.0f;", "modifier": "static", "type": "float", "declarator": "_defVza = 15.0f", "var_name": "_defVza"}, {"original_string": "static float _defVaa = 15.0f;", "modifier": "static", "type": "float", "declarator": "_defVaa = 15.0f", "var_name": "_defVaa"}, {"original_string": "static float _defTaup550 = 0.5f;", "modifier": "static", "type": "float", "declarator": "_defTaup550 = 0.5f", "var_name": "_defTaup550"}, {"original_string": "static float _defUh2o = 0.7f;", "modifier": "static", "type": "float", "declarator": "_defUh2o = 0.7f", "var_name": "_defUh2o"}, {"original_string": "static float _defUo3 = 0.3f;", "modifier": "static", "type": "float", "declarator": "_defUo3 = 0.3f", "var_name": "_defUo3"}, {"original_string": "static float _defPressure = 900.0f;", "modifier": "static", "type": "float", "declarator": "_defPressure = 900.0f", "var_name": "_defPressure"}, {"original_string": "static float _defToa = 0.4f;", "modifier": "static", "type": "float", "declarator": "_defToa = 0.4f", "var_name": "_defToa"}], "file": "s3tbx-meris-smac/src/test/java/org/esa/s3tbx/smac/SmacAlgorithmTest.java"}, "test_case": {"identifier": "testRun", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRun() {\n        int n;\n        SmacAlgorithm smac = new SmacAlgorithm();\n\n        // generate test arrays\n        // --------------------\n        float[] sza = new float[_vectorSize];\n        float[] saa = new float[_vectorSize];\n        float[] vza = new float[_vectorSize];\n        float[] vaa = new float[_vectorSize];\n        float[] taup550 = new float[_vectorSize];\n        float[] uh2o = new float[_vectorSize];\n        float[] uo3 = new float[_vectorSize];\n        float[] pressure = new float[_vectorSize];\n        float[] toa = new float[_vectorSize];\n        float[] t_surf = new float[_vectorSize];\n        boolean[] process = new boolean[_vectorSize];\n        float invalid = 0.f;\n\n        for (n = 0; n < _vectorSize; n++) {\n            sza[n] = _defSza;\n            saa[n] = _defSaa;\n            vza[n] = _defVza;\n            vaa[n] = _defVaa;\n            taup550[n] = _defTaup550;\n            uh2o[n] = _defUh2o;\n            uo3[n] = _defUo3;\n            pressure[n] = _defPressure;\n            toa[n] = _defToa;\n            process[n] = true;\n        }\n\n        try {\n            SensorCoefficientFile file = new SensorCoefficientFile();\n            String filePath = \"../../src/org/esa/s3tbx/toolviews/smac/coefficients/\";\n\n            // loop over all sensor coefficient files and perform smac\n            for (n = 0; n < _referenceCoeffs.length; n++) {\n                file.readFile(filePath + _referenceCoeffs[n]);\n\n                smac.setSensorCoefficients(file);\n                t_surf = smac.run(sza, saa, vza, vaa, taup550, uh2o, uo3, pressure, process, invalid, toa, t_surf);\n\n                assertEquals(_referenceCoeffs[n], _reference[n], t_surf[0], 1e-7f);\n            }\n\n            // check whether the process boolean array is working properly\n            for (n = 0; n < _vectorSize; n++) {\n                process[n] = false;\n            }\n\n            file.readFile(filePath + _referenceCoeffs[0]);\n\n            smac.setSensorCoefficients(file);\n            t_surf = smac.run(sza, saa, vza, vaa, taup550, uh2o, uo3, pressure, process, invalid, toa, t_surf);\n            assertEquals(invalid, t_surf[0], 1e-7f);\n        } catch (IOException ignored) {\n        }\n    }", "signature": "void testRun()", "full_signature": "@Test public void testRun()", "class_method_signature": "SmacAlgorithmTest.testRun()", "testcase": true, "constructor": false, "invocations": ["readFile", "setSensorCoefficients", "run", "assertEquals", "readFile", "setSensorCoefficients", "run", "assertEquals"]}, "focal_class": {"identifier": "SmacAlgorithm", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double _cdr = Math.PI / 180.0;", "modifier": "private static final", "type": "double", "declarator": "_cdr = Math.PI / 180.0", "var_name": "_cdr"}, {"original_string": "private static final double _crd = 180.0 / Math.PI;", "modifier": "private static final", "type": "double", "declarator": "_crd = 180.0 / Math.PI", "var_name": "_crd"}, {"original_string": "private static final double _invMaxPressure = 1.0 / 1013.0;", "modifier": "private static final", "type": "double", "declarator": "_invMaxPressure = 1.0 / 1013.0", "var_name": "_invMaxPressure"}, {"original_string": "private static final double _oneQuarter = 1.0 / 4.0;", "modifier": "private static final", "type": "double", "declarator": "_oneQuarter = 1.0 / 4.0", "var_name": "_oneQuarter"}, {"original_string": "private static final double _twoThird = 2.0 / 3.0;", "modifier": "private static final", "type": "double", "declarator": "_twoThird = 2.0 / 3.0", "var_name": "_twoThird"}, {"original_string": "private double _A0taup;", "modifier": "private", "type": "double", "declarator": "_A0taup", "var_name": "_A0taup"}, {"original_string": "private double _A1taup;", "modifier": "private", "type": "double", "declarator": "_A1taup", "var_name": "_A1taup"}, {"original_string": "private double _a0P;", "modifier": "private", "type": "double", "declarator": "_a0P", "var_name": "_a0P"}, {"original_string": "private double _a1P;", "modifier": "private", "type": "double", "declarator": "_a1P", "var_name": "_a1P"}, {"original_string": "private double _a2P;", "modifier": "private", "type": "double", "declarator": "_a2P", "var_name": "_a2P"}, {"original_string": "private double _a3P;", "modifier": "private", "type": "double", "declarator": "_a3P", "var_name": "_a3P"}, {"original_string": "private double _a4P;", "modifier": "private", "type": "double", "declarator": "_a4P", "var_name": "_a4P"}, {"original_string": "private double _ao3;", "modifier": "private", "type": "double", "declarator": "_ao3", "var_name": "_ao3"}, {"original_string": "private double _no3;", "modifier": "private", "type": "double", "declarator": "_no3", "var_name": "_no3"}, {"original_string": "private double _ah2o;", "modifier": "private", "type": "double", "declarator": "_ah2o", "var_name": "_ah2o"}, {"original_string": "private double _nh2o;", "modifier": "private", "type": "double", "declarator": "_nh2o", "var_name": "_nh2o"}, {"original_string": "private double _ao2;", "modifier": "private", "type": "double", "declarator": "_ao2", "var_name": "_ao2"}, {"original_string": "private double _no2;", "modifier": "private", "type": "double", "declarator": "_no2", "var_name": "_no2"}, {"original_string": "private double _po2;", "modifier": "private", "type": "double", "declarator": "_po2", "var_name": "_po2"}, {"original_string": "private double _aco2;", "modifier": "private", "type": "double", "declarator": "_aco2", "var_name": "_aco2"}, {"original_string": "private double _nco2;", "modifier": "private", "type": "double", "declarator": "_nco2", "var_name": "_nco2"}, {"original_string": "private double _pco2;", "modifier": "private", "type": "double", "declarator": "_pco2", "var_name": "_pco2"}, {"original_string": "private double _ach4;", "modifier": "private", "type": "double", "declarator": "_ach4", "var_name": "_ach4"}, {"original_string": "private double _nch4;", "modifier": "private", "type": "double", "declarator": "_nch4", "var_name": "_nch4"}, {"original_string": "private double _pch4;", "modifier": "private", "type": "double", "declarator": "_pch4", "var_name": "_pch4"}, {"original_string": "private double _ano2;", "modifier": "private", "type": "double", "declarator": "_ano2", "var_name": "_ano2"}, {"original_string": "private double _nno2;", "modifier": "private", "type": "double", "declarator": "_nno2", "var_name": "_nno2"}, {"original_string": "private double _pno2;", "modifier": "private", "type": "double", "declarator": "_pno2", "var_name": "_pno2"}, {"original_string": "private double _aco;", "modifier": "private", "type": "double", "declarator": "_aco", "var_name": "_aco"}, {"original_string": "private double _nco;", "modifier": "private", "type": "double", "declarator": "_nco", "var_name": "_nco"}, {"original_string": "private double _pco;", "modifier": "private", "type": "double", "declarator": "_pco", "var_name": "_pco"}, {"original_string": "private double _a0T;", "modifier": "private", "type": "double", "declarator": "_a0T", "var_name": "_a0T"}, {"original_string": "private double _a1T;", "modifier": "private", "type": "double", "declarator": "_a1T", "var_name": "_a1T"}, {"original_string": "private double _a2T;", "modifier": "private", "type": "double", "declarator": "_a2T", "var_name": "_a2T"}, {"original_string": "private double _a3T;", "modifier": "private", "type": "double", "declarator": "_a3T", "var_name": "_a3T"}, {"original_string": "private double _a0s;", "modifier": "private", "type": "double", "declarator": "_a0s", "var_name": "_a0s"}, {"original_string": "private double _a1s;", "modifier": "private", "type": "double", "declarator": "_a1s", "var_name": "_a1s"}, {"original_string": "private double _a2s;", "modifier": "private", "type": "double", "declarator": "_a2s", "var_name": "_a2s"}, {"original_string": "private double _a3s;", "modifier": "private", "type": "double", "declarator": "_a3s", "var_name": "_a3s"}, {"original_string": "private double _taur;", "modifier": "private", "type": "double", "declarator": "_taur", "var_name": "_taur"}, {"original_string": "private double _resr1;", "modifier": "private", "type": "double", "declarator": "_resr1", "var_name": "_resr1"}, {"original_string": "private double _resr2;", "modifier": "private", "type": "double", "declarator": "_resr2", "var_name": "_resr2"}, {"original_string": "private double _resr3;", "modifier": "private", "type": "double", "declarator": "_resr3", "var_name": "_resr3"}, {"original_string": "private double _resa1;", "modifier": "private", "type": "double", "declarator": "_resa1", "var_name": "_resa1"}, {"original_string": "private double _resa2;", "modifier": "private", "type": "double", "declarator": "_resa2", "var_name": "_resa2"}, {"original_string": "private double _resa3;", "modifier": "private", "type": "double", "declarator": "_resa3", "var_name": "_resa3"}, {"original_string": "private double _resa4;", "modifier": "private", "type": "double", "declarator": "_resa4", "var_name": "_resa4"}, {"original_string": "private double _rest1;", "modifier": "private", "type": "double", "declarator": "_rest1", "var_name": "_rest1"}, {"original_string": "private double _rest2;", "modifier": "private", "type": "double", "declarator": "_rest2", "var_name": "_rest2"}, {"original_string": "private double _rest3;", "modifier": "private", "type": "double", "declarator": "_rest3", "var_name": "_rest3"}, {"original_string": "private double _rest4;", "modifier": "private", "type": "double", "declarator": "_rest4", "var_name": "_rest4"}, {"original_string": "private double _wo, _onemwo;", "modifier": "private", "type": "double", "declarator": "_wo", "var_name": "_wo"}, {"original_string": "private double _gc;", "modifier": "private", "type": "double", "declarator": "_gc", "var_name": "_gc"}, {"original_string": "private double _ak, _ak2, _pfac;", "modifier": "private", "type": "double", "declarator": "_ak", "var_name": "_ak"}, {"original_string": "private double _b, _onepb, _onemb, _onepb2, _onemb2;", "modifier": "private", "type": "double", "declarator": "_b", "var_name": "_b"}, {"original_string": "private double _ww;", "modifier": "private", "type": "double", "declarator": "_ww", "var_name": "_ww"}, {"original_string": "private boolean _calcTo3;", "modifier": "private", "type": "boolean", "declarator": "_calcTo3", "var_name": "_calcTo3"}, {"original_string": "private boolean _calcTh2o;", "modifier": "private", "type": "boolean", "declarator": "_calcTh2o", "var_name": "_calcTh2o"}, {"original_string": "private boolean _calcTo2;", "modifier": "private", "type": "boolean", "declarator": "_calcTo2", "var_name": "_calcTo2"}, {"original_string": "private boolean _calcUo2;", "modifier": "private", "type": "boolean", "declarator": "_calcUo2", "var_name": "_calcUo2"}, {"original_string": "private boolean _calcTco2;", "modifier": "private", "type": "boolean", "declarator": "_calcTco2", "var_name": "_calcTco2"}, {"original_string": "private boolean _calcUco2;", "modifier": "private", "type": "boolean", "declarator": "_calcUco2", "var_name": "_calcUco2"}, {"original_string": "private boolean _calcTch4;", "modifier": "private", "type": "boolean", "declarator": "_calcTch4", "var_name": "_calcTch4"}, {"original_string": "private boolean _calcUch4;", "modifier": "private", "type": "boolean", "declarator": "_calcUch4", "var_name": "_calcUch4"}, {"original_string": "private boolean _calcTno2;", "modifier": "private", "type": "boolean", "declarator": "_calcTno2", "var_name": "_calcTno2"}, {"original_string": "private boolean _calcUno2;", "modifier": "private", "type": "boolean", "declarator": "_calcUno2", "var_name": "_calcUno2"}, {"original_string": "private boolean _calcTco;", "modifier": "private", "type": "boolean", "declarator": "_calcTco", "var_name": "_calcTco"}, {"original_string": "private boolean _calcUco;", "modifier": "private", "type": "boolean", "declarator": "_calcUco", "var_name": "_calcUco"}], "methods": [{"identifier": "setSensorCoefficients", "parameters": "(SmacSensorCoefficients coeffs)", "modifiers": "public final", "return": "void", "signature": "void setSensorCoefficients(SmacSensorCoefficients coeffs)", "full_signature": "public final void setSensorCoefficients(SmacSensorCoefficients coeffs)", "class_method_signature": "SmacAlgorithm.setSensorCoefficients(SmacSensorCoefficients coeffs)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(float[] sza, float[] saa, float[] vza, float[] vaa,\n                             float[] taup550, float[] uh2o, float[] uo3,\n                             float[] airPressure, boolean[] process, float invalid, float[] r_toa,\n                             float[] r_surfRecycle)", "modifiers": "public final", "return": "float[]", "signature": "float[] run(float[] sza, float[] saa, float[] vza, float[] vaa,\n                             float[] taup550, float[] uh2o, float[] uo3,\n                             float[] airPressure, boolean[] process, float invalid, float[] r_toa,\n                             float[] r_surfRecycle)", "full_signature": "public final float[] run(float[] sza, float[] saa, float[] vza, float[] vaa,\n                             float[] taup550, float[] uh2o, float[] uo3,\n                             float[] airPressure, boolean[] process, float invalid, float[] r_toa,\n                             float[] r_surfRecycle)", "class_method_signature": "SmacAlgorithm.run(float[] sza, float[] saa, float[] vza, float[] vaa,\n                             float[] taup550, float[] uh2o, float[] uo3,\n                             float[] airPressure, boolean[] process, float invalid, float[] r_toa,\n                             float[] r_surfRecycle)", "testcase": false, "constructor": false}], "file": "s3tbx-meris-smac/src/main/java/org/esa/s3tbx/smac/SmacAlgorithm.java"}, "focal_method": {"identifier": "run", "parameters": "(float[] sza, float[] saa, float[] vza, float[] vaa,\n                             float[] taup550, float[] uh2o, float[] uo3,\n                             float[] airPressure, boolean[] process, float invalid, float[] r_toa,\n                             float[] r_surfRecycle)", "modifiers": "public final", "return": "float[]", "body": "public final float[] run(float[] sza, float[] saa, float[] vza, float[] vaa,\n                             float[] taup550, float[] uh2o, float[] uo3,\n                             float[] airPressure, boolean[] process, float invalid, float[] r_toa,\n                             float[] r_surfRecycle) {\n        // array to be returned\n        float[] r_return;\n        double us, invUs, us2, uv, invUv, usTimesuv, invUsTimesUv;\n        double dphi, Peq, m, s, cksi, ksiD;\n        double taup, tautot, Res_6s;\n        double uo2, uco2, uch4, uno2, uco;\n        double to3, th2o, to2, tco2, tch4, tno2, tco;\n        double ttetas, ttetav;\n        double ray_phase, ray_ref, taurz, Res_ray;\n        double aer_phase, aer_ref, Res_aer;\n        double atm_ref, tg;\n        double d, del, dp, e, f, ss;\n        double q1, q2, q3;\n        double c1, c2, cp1, cp2;\n        double x, y, z;\n        double aa1, aa2, aa3;\n        double temp;\n\n        // try to reuse the recyle array to prevent memory waste. We can reuse if\n        // a) it's present and\n        // b) has the same size as the input vector\n        if ((r_surfRecycle == null) || (r_surfRecycle.length != r_toa.length)) {\n            r_return = new float[r_toa.length];\n        } else {\n            r_return = r_surfRecycle;\n        }\n\n        // loop over vectors\n        // -----------------\n        int n;\n        for (n = 0; n < r_toa.length; n++) {\n            // check for process flag. If set to false we must set the default value for\n            // invalid pixels and process the next pixel\n            if (!process[n]) {\n                r_return[n] = invalid;\n                continue;\n            }\n            // parameter setup\n            us = Math.cos(sza[n] * _cdr);\n            invUs = 1.0 / us;\n            us2 = us * us;\n\n            uv = Math.cos(vza[n] * _cdr);\n            invUv = 1.0 / uv;\n            usTimesuv = us * uv;\n            invUsTimesUv = 1.0 / usTimesuv;\n\n            dphi = (saa[n] - vaa[n]) * _cdr;\n            Peq = airPressure[n] * _invMaxPressure;\n\n            /*------ 1) air mass */\n            m = invUs + invUv;\n\n            /*------ 2) aerosol optical depth in the spectral band, taup  */\n            taup = _A0taup + _A1taup * taup550[n];\n\n            /*------ 3) gaseous transmissions (downward and upward paths)*/\n            uo2 = 1.0;\n            if (_calcUo2) {\n                uo2 = Math.pow(Peq, _po2);\n            }\n            uco2 = 1.0;\n            if (_calcUco2) {\n                uco2 = Math.pow(Peq, _pco2);\n            }\n            uch4 = 1.0;\n            if (_calcUch4) {\n                uch4 = Math.pow(Peq, _pch4);\n            }\n            uno2 = 1.0;\n            if (_calcUno2) {\n                uno2 = Math.pow(Peq, _pno2);\n            }\n            uco = 1.0;\n            if (_calcUco) {\n                uco = Math.pow(Peq, _pco);\n            }\n\n            /*------ 4) if uh2o <= 0 and uo3 <= 0 no gaseous absorption is computed*/\n            to3 = 1.0;\n            th2o = 1.0;\n            to2 = 1.0;\n            tco2 = 1.0;\n            tch4 = 1.0;\n            tno2 = 1.0;\n            tco = 1.0;\n            if ((uh2o[n] > 0.) || (uo3[n] > 0.)) {\n                if (_calcTo3) {\n                    to3 = Math.exp(_ao3 * Math.pow((uo3[n] * m), _no3));\n                }\n                if (_calcTh2o) {\n                    th2o = Math.exp(_ah2o * Math.pow((uh2o[n] * m), _nh2o));\n                }\n                if (_calcTo2) {\n                    to2 = Math.exp(_ao2 * Math.pow((uo2 * m), _no2));\n                }\n                if (_calcTco2) {\n                    tco2 = Math.exp(_aco2 * Math.pow((uco2 * m), _nco2));\n                }\n                if (_calcTch4) {\n                    tch4 = Math.exp(_ach4 * Math.pow((uch4 * m), _nch4));\n                }\n                if (_calcTno2) {\n                    tno2 = Math.exp(_ano2 * Math.pow((uno2 * m), _nno2));\n                }\n                if (_calcTco) {\n                    tco = Math.exp(_aco * Math.pow((uco * m), _nco));\n                }\n            }\n\n            /*------  5) Total scattering transmission */\n            temp = _a2T * Peq + _a3T;\n            /* downward */\n            ttetas = _a0T + _a1T * taup550[n] * invUs + temp / (1.0 + us);\n            /* upward   */\n            ttetav = _a0T + _a1T * taup550[n] * invUv + temp / (1.0 + uv);\n\n            /*------ 6) spherical albedo of the atmosphere */\n            s = _a0s * Peq + _a3s + _a1s * taup550[n] + _a2s * taup550[n] * taup550[n];\n\n            /*------ 7) scattering angle cosine */\n            cksi = -(usTimesuv + (Math.sqrt(1.0 - us2) * Math.sqrt(1.0 - uv * uv) * Math.cos(dphi)));\n            if (cksi < -1) {\n                cksi = -1.0;\n            }\n\n            /*------ 8) scattering angle in degree */\n            ksiD = _crd * Math.acos(cksi);\n\n            /*------ 9) rayleigh atmospheric reflectance */\n            /* pour 6s on a delta = 0.0279 */\n            ray_phase = 0.7190443 * (1.0 + (cksi * cksi)) + 0.0412742;\n            taurz = _taur * Peq;\n            ray_ref = (taurz * ray_phase) * _oneQuarter * invUsTimesUv;\n\n            /*-----------------Residu Rayleigh ---------*/\n            temp = taurz * ray_phase * invUsTimesUv;\n            Res_ray = _resr1 + _resr2 * temp + _resr3 * temp * temp;\n\n            /*------ 10) aerosol atmospheric reflectance */\n            temp = ksiD * ksiD;\n            aer_phase = _a0P + _a1P * ksiD + _a2P * temp + _a3P * temp * ksiD + _a4P * temp * temp;\n\n            // now the uncommented block :-)\n            // -----------------------------\n            temp = 1.0 / (4.0 * (1.0 - _ak2 * us2));\n            e = -3.0 * us2 * _wo * temp;\n            f = -_onemwo * 3.0 * _gc * us2 * _wo * temp;\n            dp = e / (3.0 * us) + us * f;\n            d = e + f;\n            del = Math.exp(_ak * taup) * _onepb2 - Math.exp(-_ak * taup) * _onemb2;\n            ss = us / (1.0 - _ak2 * us2);\n            temp = 3.0 * us;\n            q1 = 2.0 + temp + _onemwo * temp * _gc * (1.0 + 2.0 * us);\n            q2 = 2.0 - temp - _onemwo * temp * _gc * (1.0 - 2.0 * us);\n            q3 = q2 * Math.exp(-taup * invUs);\n            temp = (_ww * ss) / del;\n            c1 = temp * (q1 * Math.exp(_ak * taup) * _onepb + q3 * _onemb);\n            c2 = -temp * (q1 * Math.exp(-_ak * taup) * _onemb + q3 * _onepb);\n            cp1 = c1 * _pfac;\n            cp2 = -c2 * _pfac;\n            temp = _wo * 3.0 * _gc * uv;\n            z = d - temp * dp + _wo * aer_phase * _oneQuarter;\n            x = c1 - temp * cp1;\n            y = c2 - temp * cp2;\n            temp = _ak * uv;\n            aa1 = uv / (1.0 + temp);\n            aa2 = uv / (1.0 - temp);\n            aa3 = usTimesuv / (us + uv);\n\n            aer_ref = x * aa1 * (1.0 - Math.exp(-taup / aa1));\n            aer_ref += y * aa2 * (1.0 - Math.exp(-taup / aa2));\n            aer_ref += z * aa3 * (1.0 - Math.exp(-taup / aa3));\n            aer_ref *= invUsTimesUv;\n\n            /*--------Residu Aerosol --------*/\n            temp = taup * m * cksi;\n            Res_aer = (_resa1 + _resa2 * temp + _resa3 * temp * temp)\n                    + _resa4 * temp * temp * temp;\n\n            /*---------Residu 6s-----------*/\n            tautot = taup + taurz;\n            temp = tautot * m * cksi;\n            Res_6s = (_rest1 + _rest2 * temp + _rest3 * temp * temp)\n                    + _rest4 * temp * temp * temp;\n\n            /*------ 11) total atmospheric reflectance */\n            atm_ref = ray_ref - Res_ray + aer_ref - Res_aer + Res_6s;\n\n            /*-------- reflectance at toa*/\n            tg = th2o * to3 * to2 * tco2 * tch4 * tco * tno2;\n\n            /* reflectance at surface */\n            /*------------------------ */\n            temp = r_toa[n] - (atm_ref * tg);\n            temp = temp / ((tg * ttetas * ttetav) + (temp * s));\n            r_return[n] = (float) temp;\n        }\n\n        return r_return;\n    }", "signature": "float[] run(float[] sza, float[] saa, float[] vza, float[] vaa,\n                             float[] taup550, float[] uh2o, float[] uo3,\n                             float[] airPressure, boolean[] process, float invalid, float[] r_toa,\n                             float[] r_surfRecycle)", "full_signature": "public final float[] run(float[] sza, float[] saa, float[] vza, float[] vaa,\n                             float[] taup550, float[] uh2o, float[] uo3,\n                             float[] airPressure, boolean[] process, float invalid, float[] r_toa,\n                             float[] r_surfRecycle)", "class_method_signature": "SmacAlgorithm.run(float[] sza, float[] saa, float[] vza, float[] vaa,\n                             float[] taup550, float[] uh2o, float[] uo3,\n                             float[] airPressure, boolean[] process, float invalid, float[] r_toa,\n                             float[] r_surfRecycle)", "testcase": false, "constructor": false, "invocations": ["cos", "cos", "pow", "pow", "pow", "pow", "pow", "exp", "pow", "exp", "pow", "exp", "pow", "exp", "pow", "exp", "pow", "exp", "pow", "exp", "pow", "sqrt", "sqrt", "cos", "acos", "exp", "exp", "exp", "exp", "exp", "exp", "exp", "exp"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}