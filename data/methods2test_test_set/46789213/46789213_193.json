{"test_class": {"identifier": "TestStrictBitVector", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestStrictBitVector.java"}, "test_case": {"identifier": "testAsBinaryString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAsBinaryString() {\n    int bitLen = 72;\n    byte[] bits = new byte[bitLen / 8];\n    for (int b = 0; b < bits.length; b++) {\n      bits[b] = (byte) b;\n    }\n    StrictBitVector bv = new StrictBitVector(bits);\n    String expected = \"000100001110000001100000101000000010000011000000010000001000000000000000\";\n    assertEquals(expected, bv.asBinaryString());\n  }", "signature": "void testAsBinaryString()", "full_signature": "@Test public void testAsBinaryString()", "class_method_signature": "TestStrictBitVector.testAsBinaryString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "asBinaryString"]}, "focal_class": {"identifier": "StrictBitVector", "superclass": "", "interfaces": "implements BitVector", "fields": [{"original_string": "private byte[] bits;", "modifier": "private", "type": "byte[]", "declarator": "bits", "var_name": "bits"}, {"original_string": "private final int size;", "modifier": "private final", "type": "int", "declarator": "size", "var_name": "size"}], "methods": [{"identifier": "StrictBitVector", "parameters": "(byte[] bits)", "modifiers": "public", "return": "", "signature": " StrictBitVector(byte[] bits)", "full_signature": "public  StrictBitVector(byte[] bits)", "class_method_signature": "StrictBitVector.StrictBitVector(byte[] bits)", "testcase": false, "constructor": true}, {"identifier": "StrictBitVector", "parameters": "(int size)", "modifiers": "public", "return": "", "signature": " StrictBitVector(int size)", "full_signature": "public  StrictBitVector(int size)", "class_method_signature": "StrictBitVector.StrictBitVector(int size)", "testcase": false, "constructor": true}, {"identifier": "StrictBitVector", "parameters": "(int size, Drbg rand)", "modifiers": "public", "return": "", "signature": " StrictBitVector(int size, Drbg rand)", "full_signature": "public  StrictBitVector(int size, Drbg rand)", "class_method_signature": "StrictBitVector.StrictBitVector(int size, Drbg rand)", "testcase": false, "constructor": true}, {"identifier": "getBit", "parameters": "(int index, boolean isBigEndian)", "modifiers": "public", "return": "boolean", "signature": "boolean getBit(int index, boolean isBigEndian)", "full_signature": "public boolean getBit(int index, boolean isBigEndian)", "class_method_signature": "StrictBitVector.getBit(int index, boolean isBigEndian)", "testcase": false, "constructor": false}, {"identifier": "getBit", "parameters": "(int bit)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getBit(int bit)", "full_signature": "@Override public boolean getBit(int bit)", "class_method_signature": "StrictBitVector.getBit(int bit)", "testcase": false, "constructor": false}, {"identifier": "setBit", "parameters": "(int index, boolean value, boolean isBigEndian)", "modifiers": "public", "return": "void", "signature": "void setBit(int index, boolean value, boolean isBigEndian)", "full_signature": "public void setBit(int index, boolean value, boolean isBigEndian)", "class_method_signature": "StrictBitVector.setBit(int index, boolean value, boolean isBigEndian)", "testcase": false, "constructor": false}, {"identifier": "setBit", "parameters": "(int index, boolean value)", "modifiers": "@Override public", "return": "void", "signature": "void setBit(int index, boolean value)", "full_signature": "@Override public void setBit(int index, boolean value)", "class_method_signature": "StrictBitVector.setBit(int index, boolean value)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSize()", "full_signature": "@Override public int getSize()", "class_method_signature": "StrictBitVector.getSize()", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] toByteArray()", "full_signature": "@Override public byte[] toByteArray()", "class_method_signature": "StrictBitVector.toByteArray()", "testcase": false, "constructor": false}, {"identifier": "asBinaryString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String asBinaryString()", "full_signature": "public String asBinaryString()", "class_method_signature": "StrictBitVector.asBinaryString()", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(BitVector other)", "modifiers": "@Override public", "return": "void", "signature": "void xor(BitVector other)", "full_signature": "@Override public void xor(BitVector other)", "class_method_signature": "StrictBitVector.xor(BitVector other)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StrictBitVector.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "StrictBitVector.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "StrictBitVector.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(StrictBitVector... bitVectors)", "modifiers": "public static", "return": "StrictBitVector", "signature": "StrictBitVector concat(StrictBitVector... bitVectors)", "full_signature": "public static StrictBitVector concat(StrictBitVector... bitVectors)", "class_method_signature": "StrictBitVector.concat(StrictBitVector... bitVectors)", "testcase": false, "constructor": false}, {"identifier": "rangeCheck", "parameters": "(int bit)", "modifiers": "private", "return": "void", "signature": "void rangeCheck(int bit)", "full_signature": "private void rangeCheck(int bit)", "class_method_signature": "StrictBitVector.rangeCheck(int bit)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/StrictBitVector.java"}, "focal_method": {"identifier": "asBinaryString", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String asBinaryString() {\n    String binStr = \"\";\n    for (int b = 0; b < size; b++) {\n      binStr += getBit(b) ? \"1\" : \"0\";\n    }\n    return binStr;\n  }", "signature": "String asBinaryString()", "full_signature": "public String asBinaryString()", "class_method_signature": "StrictBitVector.asBinaryString()", "testcase": false, "constructor": false, "invocations": ["getBit"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}