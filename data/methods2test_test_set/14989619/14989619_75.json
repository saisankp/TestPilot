{"test_class": {"identifier": "ChainReferenceValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ProcessorReference\n\t\t\tjsonSourceFilter = new ProcessorReference.Builder(SourceAdapterFactory.NAME_JSON_SOURCE_ADAPTER)\n\t\t\t\t\t.argument(\"key1\", \"hello world\")\n\t\t\t\t\t.build(),\n\t\t\tdbInsertionFilter = new ProcessorReference.Builder(FilterFactory.NAME_DB_INSERTION_FILTER)\n\t\t\t\t\t.argument(\"key2\", 12)\n\t\t\t\t\t.build(),\n\t\t\tnotificationFilter = new ProcessorReference.Builder(FilterFactory.NAME_NOTIFICATION_FILTER)\n\t\t\t\t\t.argument(\"key3\", false)\n\t\t\t\t\t.build();", "modifier": "private final", "type": "ProcessorReference", "declarator": "jsonSourceFilter = new ProcessorReference.Builder(SourceAdapterFactory.NAME_JSON_SOURCE_ADAPTER)\n\t\t\t\t\t.argument(\"key1\", \"hello world\")\n\t\t\t\t\t.build()", "var_name": "jsonSourceFilter"}, {"original_string": "@Mocked private ConstraintValidatorContext context;", "modifier": "@Mocked private", "type": "ConstraintValidatorContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Mocked private SpecificationManager descriptionManager;", "modifier": "@Mocked private", "type": "SpecificationManager", "declarator": "descriptionManager", "var_name": "descriptionManager"}, {"original_string": "private ChainReferenceValidator validator;", "modifier": "private", "type": "ChainReferenceValidator", "declarator": "validator", "var_name": "validator"}], "file": "server/src/test/java/org/jvalue/ods/processor/reference/ChainReferenceValidatorTest.java"}, "test_case": {"identifier": "testMissingSourceAdapterReference", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMissingSourceAdapterReference() {\n\t\tnew Expectations() {{\n\t\t\tMap<String, Class<?>> argTypes = new HashMap<>();\n\t\t\targTypes.put(\"key3\", Boolean.class);\n\t\t\tdescriptionManager.getByName(FilterFactory.NAME_NOTIFICATION_FILTER);\n\t\t\tresult = Deencapsulation.newInnerInstance(Specification.class, FilterFactory.NAME_NOTIFICATION_FILTER, ProcessorType.FILTER, argTypes);\n\t\t}};\n\n\t\tAssert.assertFalse(validator.isValid(new ProcessorReferenceChainDescription(\n\t\t\t\tArrays.asList(notificationFilter),\n\t\t\t\tnew ExecutionInterval(2, TimeUnit.SECONDS)), context));\n\t}", "signature": "void testMissingSourceAdapterReference()", "full_signature": "@Test public void testMissingSourceAdapterReference()", "class_method_signature": "ChainReferenceValidatorTest.testMissingSourceAdapterReference()", "testcase": true, "constructor": false, "invocations": ["put", "getByName", "newInnerInstance", "assertFalse", "isValid", "asList"]}, "focal_class": {"identifier": "ChainReferenceValidator", "superclass": "", "interfaces": "implements ConstraintValidator<ValidChainReference, ProcessorReferenceChainDescription>", "fields": [{"original_string": "private final SpecificationManager specificationManager;", "modifier": "private final", "type": "SpecificationManager", "declarator": "specificationManager", "var_name": "specificationManager"}], "methods": [{"identifier": "ChainReferenceValidator", "parameters": "(SpecificationManager specificationManager)", "modifiers": "@Inject", "return": "", "signature": " ChainReferenceValidator(SpecificationManager specificationManager)", "full_signature": "@Inject  ChainReferenceValidator(SpecificationManager specificationManager)", "class_method_signature": "ChainReferenceValidator.ChainReferenceValidator(SpecificationManager specificationManager)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "(ValidChainReference validReference)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(ValidChainReference validReference)", "full_signature": "@Override public void initialize(ValidChainReference validReference)", "class_method_signature": "ChainReferenceValidator.initialize(ValidChainReference validReference)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(ProcessorReferenceChainDescription chainReference, ConstraintValidatorContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid(ProcessorReferenceChainDescription chainReference, ConstraintValidatorContext context)", "full_signature": "@Override public boolean isValid(ProcessorReferenceChainDescription chainReference, ConstraintValidatorContext context)", "class_method_signature": "ChainReferenceValidator.isValid(ProcessorReferenceChainDescription chainReference, ConstraintValidatorContext context)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(ProcessorReference reference, ConstraintValidatorContext context)", "modifiers": "private", "return": "boolean", "signature": "boolean isValid(ProcessorReference reference, ConstraintValidatorContext context)", "full_signature": "private boolean isValid(ProcessorReference reference, ConstraintValidatorContext context)", "class_method_signature": "ChainReferenceValidator.isValid(ProcessorReference reference, ConstraintValidatorContext context)", "testcase": false, "constructor": false}, {"identifier": "setAndReturnErrorMessage", "parameters": "(ConstraintValidatorContext context, String message)", "modifiers": "private", "return": "boolean", "signature": "boolean setAndReturnErrorMessage(ConstraintValidatorContext context, String message)", "full_signature": "private boolean setAndReturnErrorMessage(ConstraintValidatorContext context, String message)", "class_method_signature": "ChainReferenceValidator.setAndReturnErrorMessage(ConstraintValidatorContext context, String message)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/jvalue/ods/processor/reference/ChainReferenceValidator.java"}, "focal_method": {"identifier": "isValid", "parameters": "(ProcessorReferenceChainDescription chainReference, ConstraintValidatorContext context)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean isValid(ProcessorReferenceChainDescription chainReference, ConstraintValidatorContext context) {\n\t\tif (chainReference == null) return true;\n\n\t\tList<ProcessorReference> references = chainReference.getProcessors();\n\t\tif (references == null || references.isEmpty())\n\t\t\treturn setAndReturnErrorMessage(context, \"processor chain cannot be empty\");\n\t\tif (!specificationManager.getByName(references.get(0).getName()).getType().equals(ProcessorType.SOURCE_ADAPTER))\n\t\t\treturn setAndReturnErrorMessage(context, \"processor chain must start with \" + ProcessorType.SOURCE_ADAPTER);\n\n\t\tProcessorReference lastReference =  null;\n\t\tfor (ProcessorReference reference : references) {\n\t\t\tif (lastReference != null) {\n\t\t\t\tProcessorType lastType = specificationManager.getByName(lastReference.getName()).getType();\n\t\t\t\tProcessorType nextType = specificationManager.getByName(reference.getName()).getType();\n\t\t\t\tif (!lastType.isValidNextFilter(nextType)) return setAndReturnErrorMessage(context, lastType + \" cannot be followed by \" + nextType);\n\t\t\t}\n\t\t\tif (!isValid(reference, context)) return false;\n\t\t\tlastReference = reference;\n\t\t}\n\t\treturn true;\n\t}", "signature": "boolean isValid(ProcessorReferenceChainDescription chainReference, ConstraintValidatorContext context)", "full_signature": "@Override public boolean isValid(ProcessorReferenceChainDescription chainReference, ConstraintValidatorContext context)", "class_method_signature": "ChainReferenceValidator.isValid(ProcessorReferenceChainDescription chainReference, ConstraintValidatorContext context)", "testcase": false, "constructor": false, "invocations": ["getProcessors", "isEmpty", "setAndReturnErrorMessage", "equals", "getType", "getByName", "getName", "get", "setAndReturnErrorMessage", "getType", "getByName", "getName", "getType", "getByName", "getName", "isValidNextFilter", "setAndReturnErrorMessage", "isValid"]}, "repository": {"repo_id": 14989619, "url": "https://github.com/jvalue/open-data-service-v1", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 6, "size": 4525, "license": "licensed"}}