{"test_class": {"identifier": "BondBasedConfigurationTest", "superclass": "", "interfaces": "", "fields": [], "file": "func/src/test/java/uk/ac/ebi/beam/BondBasedConfigurationTest.java"}, "test_case": {"identifier": "opposite2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void opposite2() throws Exception {\n        Graph g = Graph.fromSmiles(\"F\\\\C=C\\\\F\");\n        assertThat(BondBasedConfiguration.configurationOf(g, 0, 1, 2, 3),\n                   is(Configuration.DoubleBond.OPPOSITE));\n    }", "signature": "void opposite2()", "full_signature": "@Test public void opposite2()", "class_method_signature": "BondBasedConfigurationTest.opposite2()", "testcase": true, "constructor": false, "invocations": ["fromSmiles", "assertThat", "configurationOf", "is"]}, "focal_class": {"identifier": "BondBasedConfiguration", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "configurationOf", "parameters": "(Graph g,\n                                                    int x, int u, int v, int y)", "modifiers": "static", "return": "Configuration.DoubleBond", "signature": "Configuration.DoubleBond configurationOf(Graph g,\n                                                    int x, int u, int v, int y)", "full_signature": "static Configuration.DoubleBond configurationOf(Graph g,\n                                                    int x, int u, int v, int y)", "class_method_signature": "BondBasedConfiguration.configurationOf(Graph g,\n                                                    int x, int u, int v, int y)", "testcase": false, "constructor": false}], "file": "func/src/main/java/uk/ac/ebi/beam/BondBasedConfiguration.java"}, "focal_method": {"identifier": "configurationOf", "parameters": "(Graph g,\n                                                    int x, int u, int v, int y)", "modifiers": "static", "return": "Configuration.DoubleBond", "body": "static Configuration.DoubleBond configurationOf(Graph g,\n                                                    int x, int u, int v, int y) {\n\n        Edge e = g.edge(u, v);\n\n        if (e.bond() != Bond.DOUBLE)\n            throw new IllegalArgumentException(\"atoms u,v are not labelled as a double bond\");\n\n        Edge e1 = g.edge(u, x);\n        Edge e2 = g.edge(v, y);\n\n        Bond b1 = e1.bond(u);\n        Bond b2 = e2.bond(v);\n\n        if (b1 == Bond.IMPLICIT || b1 == Bond.SINGLE)\n            return Configuration.DoubleBond.UNSPECIFIED;\n        if (b2 == Bond.IMPLICIT || b2 == Bond.SINGLE)\n            return Configuration.DoubleBond.UNSPECIFIED;\n\n        return b1 == b2 ? Configuration.DoubleBond.TOGETHER\n                        : Configuration.DoubleBond.OPPOSITE;\n    }", "signature": "Configuration.DoubleBond configurationOf(Graph g,\n                                                    int x, int u, int v, int y)", "full_signature": "static Configuration.DoubleBond configurationOf(Graph g,\n                                                    int x, int u, int v, int y)", "class_method_signature": "BondBasedConfiguration.configurationOf(Graph g,\n                                                    int x, int u, int v, int y)", "testcase": false, "constructor": false, "invocations": ["edge", "bond", "edge", "edge", "bond", "bond"]}, "repository": {"repo_id": 12061606, "url": "https://github.com/johnmay/beam", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 19, "size": 825, "license": "licensed"}}