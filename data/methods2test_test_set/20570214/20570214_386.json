{"test_class": {"identifier": "MacWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int HMAC_KEY_SIZE = 20;", "modifier": "private static final", "type": "int", "declarator": "HMAC_KEY_SIZE = 20", "var_name": "HMAC_KEY_SIZE"}], "file": "java_src/src/test/java/com/google/crypto/tink/mac/MacWrapperTest.java"}, "test_case": {"identifier": "testMultipleKeys", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMultipleKeys() throws Exception {\n    byte[] keyValue = Random.randBytes(HMAC_KEY_SIZE);\n    Key tink = TestUtil.createKey(\n          TestUtil.createHmacKeyData(keyValue, 16),\n          42,\n          KeyStatusType.ENABLED,\n          OutputPrefixType.TINK);\n    Key legacy = TestUtil.createKey(\n          TestUtil.createHmacKeyData(keyValue, 16),\n          43,\n          KeyStatusType.ENABLED,\n          OutputPrefixType.LEGACY);\n    Key raw = TestUtil.createKey(\n          TestUtil.createHmacKeyData(keyValue, 16),\n          44,\n          KeyStatusType.ENABLED,\n          OutputPrefixType.RAW);\n    Key crunchy = TestUtil.createKey(\n          TestUtil.createHmacKeyData(keyValue, 16),\n          45,\n          KeyStatusType.ENABLED,\n          OutputPrefixType.CRUNCHY);\n    Key[] keys = new Key[] {tink, legacy, raw, crunchy};\n    int j = keys.length;\n    for (int i = 0; i < j; i++) {\n      KeysetHandle keysetHandle = TestUtil.createKeysetHandle(\n        TestUtil.createKeyset(\n            keys[i],\n            keys[(i + 1) % j],\n            keys[(i + 2) % j],\n            keys[(i + 3) % j]));\n      Mac mac = new MacWrapper().wrap(Registry.getPrimitives(keysetHandle, Mac.class));\n      byte[] plaintext = \"plaintext\".getBytes(\"UTF-8\");\n      byte[] tag = mac.computeMac(plaintext);\n      if (!keys[i].getOutputPrefixType().equals(OutputPrefixType.RAW)) {\n        byte[] prefix = Arrays.copyOfRange(tag, 0, CryptoFormat.NON_RAW_PREFIX_SIZE);\n        assertArrayEquals(prefix, CryptoFormat.getOutputPrefix(keys[i]));\n      }\n      try {\n        mac.verifyMac(tag, plaintext);\n      } catch (GeneralSecurityException e) {\n        fail(\"Valid MAC, should not throw exception: \" + i);\n      }\n\n      // Modify plaintext or tag and make sure the verifyMac failed.\n      byte[] plaintextAndTag = Bytes.concat(plaintext, tag);\n      for (int b = 0; b < plaintextAndTag.length; b++) {\n        for (int bit = 0; bit < 8; bit++) {\n          byte[] modified = Arrays.copyOf(plaintextAndTag, plaintextAndTag.length);\n          modified[b] ^= (byte) (1 << bit);\n          try {\n            mac.verifyMac(Arrays.copyOfRange(modified, plaintext.length, modified.length),\n                Arrays.copyOfRange(modified, 0, plaintext.length));\n            fail(\"Invalid tag or plaintext, should have thrown exception\");\n          } catch (GeneralSecurityException expected) {\n            // Expected\n          }\n        }\n      }\n\n      // mac with a non-primary RAW key, verify with the keyset\n      KeysetHandle keysetHandle2 = TestUtil.createKeysetHandle(\n          TestUtil.createKeyset(raw, legacy, tink, crunchy));\n      Mac mac2 = new MacWrapper().wrap(Registry.getPrimitives(keysetHandle2, Mac.class));\n      tag = mac2.computeMac(plaintext);\n      try {\n        mac.verifyMac(tag, plaintext);\n      } catch (GeneralSecurityException e) {\n        fail(\"Valid MAC, should not throw exception\");\n      }\n\n      // mac with a random key not in the keyset, verify with the keyset should fail\n      byte[] keyValue2 = Random.randBytes(HMAC_KEY_SIZE);\n      Key random = TestUtil.createKey(\n          TestUtil.createHmacKeyData(keyValue2, 16),\n          44,\n          KeyStatusType.ENABLED,\n          OutputPrefixType.TINK);\n      keysetHandle2 = TestUtil.createKeysetHandle(\n          TestUtil.createKeyset(random));\n      mac2 = new MacWrapper().wrap(Registry.getPrimitives(keysetHandle2, Mac.class));\n      tag = mac2.computeMac(plaintext);\n      try {\n        mac.verifyMac(tag, plaintext);\n        fail(\"Invalid MAC MAC, should have thrown exception\");\n      } catch (GeneralSecurityException expected) {\n        // Expected\n      }\n    }\n  }", "signature": "void testMultipleKeys()", "full_signature": "@Test public void testMultipleKeys()", "class_method_signature": "MacWrapperTest.testMultipleKeys()", "testcase": true, "constructor": false, "invocations": ["randBytes", "createKey", "createHmacKeyData", "createKey", "createHmacKeyData", "createKey", "createHmacKeyData", "createKey", "createHmacKeyData", "createKeysetHandle", "createKeyset", "wrap", "getPrimitives", "getBytes", "computeMac", "equals", "getOutputPrefixType", "copyOfRange", "assertArrayEquals", "getOutputPrefix", "verifyMac", "fail", "concat", "copyOf", "verifyMac", "copyOfRange", "copyOfRange", "fail", "createKeysetHandle", "createKeyset", "wrap", "getPrimitives", "computeMac", "verifyMac", "fail", "randBytes", "createKey", "createHmacKeyData", "createKeysetHandle", "createKeyset", "wrap", "getPrimitives", "computeMac", "verifyMac", "fail"]}, "focal_class": {"identifier": "MacWrapper", "superclass": "", "interfaces": "implements PrimitiveWrapper<Mac, Mac>", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(MacWrapper.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(MacWrapper.class.getName())", "var_name": "logger"}], "methods": [{"identifier": "MacWrapper", "parameters": "()", "modifiers": "", "return": "", "signature": " MacWrapper()", "full_signature": "  MacWrapper()", "class_method_signature": "MacWrapper.MacWrapper()", "testcase": false, "constructor": true}, {"identifier": "wrap", "parameters": "(final PrimitiveSet<Mac> primitives)", "modifiers": "@Override public", "return": "Mac", "signature": "Mac wrap(final PrimitiveSet<Mac> primitives)", "full_signature": "@Override public Mac wrap(final PrimitiveSet<Mac> primitives)", "class_method_signature": "MacWrapper.wrap(final PrimitiveSet<Mac> primitives)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<Mac>", "signature": "Class<Mac> getPrimitiveClass()", "full_signature": "@Override public Class<Mac> getPrimitiveClass()", "class_method_signature": "MacWrapper.getPrimitiveClass()", "testcase": false, "constructor": false}, {"identifier": "getInputPrimitiveClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<Mac>", "signature": "Class<Mac> getInputPrimitiveClass()", "full_signature": "@Override public Class<Mac> getInputPrimitiveClass()", "class_method_signature": "MacWrapper.getInputPrimitiveClass()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void register()", "full_signature": "public static void register()", "class_method_signature": "MacWrapper.register()", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/mac/MacWrapper.java"}, "focal_method": {"identifier": "wrap", "parameters": "(final PrimitiveSet<Mac> primitives)", "modifiers": "@Override public", "return": "Mac", "body": "@Override\n  public Mac wrap(final PrimitiveSet<Mac> primitives) throws GeneralSecurityException {\n    return new WrappedMac(primitives);\n  }", "signature": "Mac wrap(final PrimitiveSet<Mac> primitives)", "full_signature": "@Override public Mac wrap(final PrimitiveSet<Mac> primitives)", "class_method_signature": "MacWrapper.wrap(final PrimitiveSet<Mac> primitives)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}