{"test_class": {"identifier": "PivotUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "subdomains/excel/applib/src/test/java/org/apache/isis/subdomains/excel/applib/dom/util/PivotUtilsTest.java"}, "test_case": {"identifier": "createAnnotationRowTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createAnnotationRowTest() {\n\n        // given\n        XSSFWorkbook workbook = new XSSFWorkbook();\n        XSSFSheet sheet = workbook.createSheet();\n        Row r = sheet.createRow(0);\n\n        List<String> l = Arrays.asList(\"a\", \"b\", \"c\");\n\n        // when\n        PivotUtils.createAnnotationRow(r,l);\n\n        // then\n        Assertions.assertThat(r.getCell(0).getStringCellValue()).isEqualTo(\"a\");\n        Assertions.assertThat(r.getCell(1).getStringCellValue()).isEqualTo(\"b\");\n        Assertions.assertThat(r.getCell(2).getStringCellValue()).isEqualTo(\"c\");\n\n    }", "signature": "void createAnnotationRowTest()", "full_signature": "@Test public void createAnnotationRowTest()", "class_method_signature": "PivotUtilsTest.createAnnotationRowTest()", "testcase": true, "constructor": false, "invocations": ["createSheet", "createRow", "asList", "createAnnotationRow", "isEqualTo", "assertThat", "getStringCellValue", "getCell", "isEqualTo", "assertThat", "getStringCellValue", "getCell", "isEqualTo", "assertThat", "getStringCellValue", "getCell"]}, "focal_class": {"identifier": "PivotUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createAnnotationRow", "parameters": "(final Row annotationRow, final List<String> annotationList)", "modifiers": "public static", "return": "void", "signature": "void createAnnotationRow(final Row annotationRow, final List<String> annotationList)", "full_signature": "public static void createAnnotationRow(final Row annotationRow, final List<String> annotationList)", "class_method_signature": "PivotUtils.createAnnotationRow(final Row annotationRow, final List<String> annotationList)", "testcase": false, "constructor": false}, {"identifier": "createOrderRow", "parameters": "(final Row orderRow, final List<Integer> orderList)", "modifiers": "public static", "return": "void", "signature": "void createOrderRow(final Row orderRow, final List<Integer> orderList)", "full_signature": "public static void createOrderRow(final Row orderRow, final List<Integer> orderList)", "class_method_signature": "PivotUtils.createOrderRow(final Row orderRow, final List<Integer> orderList)", "testcase": false, "constructor": false}, {"identifier": "createTypeRow", "parameters": "(final Row typeRow, final List<AggregationType> typeList)", "modifiers": "public static", "return": "void", "signature": "void createTypeRow(final Row typeRow, final List<AggregationType> typeList)", "full_signature": "public static void createTypeRow(final Row typeRow, final List<AggregationType> typeList)", "class_method_signature": "PivotUtils.createTypeRow(final Row typeRow, final List<AggregationType> typeList)", "testcase": false, "constructor": false}, {"identifier": "cellValueEquals", "parameters": "(Cell cell, Cell other)", "modifiers": "static", "return": "boolean", "signature": "boolean cellValueEquals(Cell cell, Cell other)", "full_signature": "static boolean cellValueEquals(Cell cell, Cell other)", "class_method_signature": "PivotUtils.cellValueEquals(Cell cell, Cell other)", "testcase": false, "constructor": false}, {"identifier": "addCellValueTo", "parameters": "(Cell source, Cell target)", "modifiers": "static", "return": "Cell", "signature": "Cell addCellValueTo(Cell source, Cell target)", "full_signature": "static Cell addCellValueTo(Cell source, Cell target)", "class_method_signature": "PivotUtils.addCellValueTo(Cell source, Cell target)", "testcase": false, "constructor": false}, {"identifier": "copyCell", "parameters": "(Cell source, Cell target)", "modifiers": "static", "return": "void", "signature": "void copyCell(Cell source, Cell target)", "full_signature": "static void copyCell(Cell source, Cell target)", "class_method_signature": "PivotUtils.copyCell(Cell source, Cell target)", "testcase": false, "constructor": false}], "file": "subdomains/excel/applib/src/main/java/org/apache/isis/subdomains/excel/applib/dom/util/PivotUtils.java"}, "focal_method": {"identifier": "createAnnotationRow", "parameters": "(final Row annotationRow, final List<String> annotationList)", "modifiers": "public static", "return": "void", "body": "public static void createAnnotationRow(final Row annotationRow, final List<String> annotationList) {\n\n        int i = 0;\n        for (final String a : annotationList) {\n            final Cell cell = annotationRow.createCell((short) i++);\n            cell.setCellValue(a);\n        }\n\n    }", "signature": "void createAnnotationRow(final Row annotationRow, final List<String> annotationList)", "full_signature": "public static void createAnnotationRow(final Row annotationRow, final List<String> annotationList)", "class_method_signature": "PivotUtils.createAnnotationRow(final Row annotationRow, final List<String> annotationList)", "testcase": false, "constructor": false, "invocations": ["createCell", "setCellValue"]}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}