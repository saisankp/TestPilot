{"test_class": {"identifier": "ReceiverTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ReceiverTask receiverTask;", "modifier": "@Autowired\n    private", "type": "ReceiverTask", "declarator": "receiverTask", "var_name": "receiverTask"}, {"original_string": "@MockBean\n    private PesAllerService pesAllerService;", "modifier": "@MockBean\n    private", "type": "PesAllerService", "declarator": "pesAllerService", "var_name": "pesAllerService"}, {"original_string": "@MockBean\n    private PesRetourRepository pesRetourRepository;", "modifier": "@MockBean\n    private", "type": "PesRetourRepository", "declarator": "pesRetourRepository", "var_name": "pesRetourRepository"}, {"original_string": "@MockBean\n    private PesAllerRepository pesAllerRepository;", "modifier": "@MockBean\n    private", "type": "PesAllerRepository", "declarator": "pesAllerRepository", "var_name": "pesAllerRepository"}, {"original_string": "@MockBean\n    private LocalAuthorityService localAuthorityService;", "modifier": "@MockBean\n    private", "type": "LocalAuthorityService", "declarator": "localAuthorityService", "var_name": "localAuthorityService"}, {"original_string": "@MockBean\n    private DefaultFtpSessionFactory defaultFtpSessionFactory;", "modifier": "@MockBean\n    private", "type": "DefaultFtpSessionFactory", "declarator": "defaultFtpSessionFactory", "var_name": "defaultFtpSessionFactory"}, {"original_string": "@MockBean\n    private StorageService storageService;", "modifier": "@MockBean\n    private", "type": "StorageService", "declarator": "storageService", "var_name": "storageService"}, {"original_string": "@MockBean\n    private NotificationService notificationService;", "modifier": "@MockBean\n    private", "type": "NotificationService", "declarator": "notificationService", "var_name": "notificationService"}], "file": "pes-service/src/test/java/fr/sictiam/stela/pesservice/scheduler/ReceiverTaskTest.java"}, "test_case": {"identifier": "testAckKoWithDetailPiece", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAckKoWithDetailPiece() throws Exception {\n\n        PesAller pesAller = gimmePesAller();\n        given(pesAllerService.getByFileName(\"PesRecette-02-2018-258-258-20190129666666\"))\n                .willReturn(Optional.of(pesAller));\n        doNothing().when(pesAllerService).updateStatus(anyString(), any(), any(), anyString(), anyList());\n\n        InputStream pesFile = new ClassPathResource(\"data/pes-ack-ko/006111_190130123456-ACK-A3020100_A0000SDP_KO.xml\")\n                .getInputStream();\n        receiverTask.readACK(IOUtils.toByteArray(pesFile), \"ackName\");\n\n        verify(pesAllerService).updateStatus(eq(pesAller.getUuid()), eq(StatusType.NACK_RECEIVED),\n                any(), eq(\"ackName\"), argThat(errors ->\n                        errors.size() == 2 &&\n                                errors.stream().allMatch(pesHistoryError -> pesHistoryError.getTitle().equals(\"ERREUR_AUTRE\")) &&\n                                errors.stream().filter(pesHistoryError -> pesHistoryError.getMessage().startsWith(\"2559\")).count() == 2 &&\n                                errors.stream().noneMatch(pesHistoryError -> pesHistoryError.getSource().isEmpty())));\n    }", "signature": "void testAckKoWithDetailPiece()", "full_signature": "@Test public void testAckKoWithDetailPiece()", "class_method_signature": "ReceiverTaskTest.testAckKoWithDetailPiece()", "testcase": true, "constructor": false, "invocations": ["gimmePesAller", "willReturn", "given", "getByFileName", "of", "updateStatus", "when", "doNothing", "anyString", "any", "any", "anyString", "anyList", "getInputStream", "readACK", "toByteArray", "updateStatus", "verify", "eq", "getUuid", "eq", "any", "eq", "argThat", "size", "allMatch", "stream", "equals", "getTitle", "count", "filter", "stream", "startsWith", "getMessage", "noneMatch", "stream", "isEmpty", "getSource"]}, "focal_class": {"identifier": "ReceiverTask", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ReceiverTask.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ReceiverTask.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private PesAllerService pesService;", "modifier": "@Autowired\n    private", "type": "PesAllerService", "declarator": "pesService", "var_name": "pesService"}, {"original_string": "@Autowired\n    private PesRetourRepository pesRetourRepository;", "modifier": "@Autowired\n    private", "type": "PesRetourRepository", "declarator": "pesRetourRepository", "var_name": "pesRetourRepository"}, {"original_string": "@Autowired\n    private LocalAuthorityService localAuthorityService;", "modifier": "@Autowired\n    private", "type": "LocalAuthorityService", "declarator": "localAuthorityService", "var_name": "localAuthorityService"}, {"original_string": "@Autowired\n    private DefaultFtpSessionFactory defaultFtpSessionFactory;", "modifier": "@Autowired\n    private", "type": "DefaultFtpSessionFactory", "declarator": "defaultFtpSessionFactory", "var_name": "defaultFtpSessionFactory"}, {"original_string": "@Autowired\n    private StorageService storageService;", "modifier": "@Autowired\n    private", "type": "StorageService", "declarator": "storageService", "var_name": "storageService"}, {"original_string": "@Autowired\n    private NotificationService notificationService;", "modifier": "@Autowired\n    private", "type": "NotificationService", "declarator": "notificationService", "var_name": "notificationService"}, {"original_string": "@Value(\"${application.receiverTask.hoursWithoutNewFiles}\")\n    private int hoursWithoutNewFiles;", "modifier": "@Value(\"${application.receiverTask.hoursWithoutNewFiles}\")\n    private", "type": "int", "declarator": "hoursWithoutNewFiles", "var_name": "hoursWithoutNewFiles"}, {"original_string": "@Value(\"${application.receiverTask.maxWaitingPes}\")\n    private int maxWaitingPes;", "modifier": "@Value(\"${application.receiverTask.maxWaitingPes}\")\n    private", "type": "int", "declarator": "maxWaitingPes", "var_name": "maxWaitingPes"}, {"original_string": "@Value(\"${application.receiverTask.alertEmail}\")\n    private String alertEmail;", "modifier": "@Value(\"${application.receiverTask.alertEmail}\")\n    private", "type": "String", "declarator": "alertEmail", "var_name": "alertEmail"}, {"original_string": "private Long runsWithoutNewFiles = 0L;", "modifier": "private", "type": "Long", "declarator": "runsWithoutNewFiles = 0L", "var_name": "runsWithoutNewFiles"}, {"original_string": "private boolean alertSent = false;", "modifier": "private", "type": "boolean", "declarator": "alertSent = false", "var_name": "alertSent"}, {"original_string": "@Value(\"${application.ftp.timeout}\")\n    private Integer timeout;", "modifier": "@Value(\"${application.ftp.timeout}\")\n    private", "type": "Integer", "declarator": "timeout", "var_name": "timeout"}], "methods": [{"identifier": "receive", "parameters": "()", "modifiers": "@Scheduled(fixedDelay = 60000) public", "return": "void", "signature": "void receive()", "full_signature": "@Scheduled(fixedDelay = 60000) public void receive()", "class_method_signature": "ReceiverTask.receive()", "testcase": false, "constructor": false}, {"identifier": "readACK", "parameters": "(byte[] targetArray, String ackName)", "modifiers": "public", "return": "void", "signature": "void readACK(byte[] targetArray, String ackName)", "full_signature": "public void readACK(byte[] targetArray, String ackName)", "class_method_signature": "ReceiverTask.readACK(byte[] targetArray, String ackName)", "testcase": false, "constructor": false}, {"identifier": "readPesRetour", "parameters": "(byte[] targetArray, String pesRetourName)", "modifiers": "public", "return": "void", "signature": "void readPesRetour(byte[] targetArray, String pesRetourName)", "full_signature": "public void readPesRetour(byte[] targetArray, String pesRetourName)", "class_method_signature": "ReceiverTask.readPesRetour(byte[] targetArray, String pesRetourName)", "testcase": false, "constructor": false}], "file": "pes-service/src/main/java/fr/sictiam/stela/pesservice/scheduler/ReceiverTask.java"}, "focal_method": {"identifier": "readACK", "parameters": "(byte[] targetArray, String ackName)", "modifiers": "public", "return": "void", "body": "public void readACK(byte[] targetArray, String ackName)\n            throws ParserConfigurationException, SAXException, IOException, XPathExpressionException {\n\n        LOGGER.debug(\"Received ack file : {}\", ackName);\n        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(targetArray);\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder builder = factory.newDocumentBuilder();\n        XPathFactory xpf = XPathFactory.newInstance();\n        XPath path = xpf.newXPath();\n        Document document = builder.parse(byteArrayInputStream);\n        String fileName = path.evaluate(\"/PES_ACQUIT/Enveloppe/Parametres/NomFic/@V\", document);\n        LOGGER.debug(\"Extracted PES filename : {}\", fileName);\n\n        PesAller pesAller = pesService.getByFileName(fileName).orElseThrow(PesNotFoundException::new);\n\n        boolean isAckOk = true;\n        List<PesHistoryError> errors = new ArrayList<>();\n        NodeList nodes = (NodeList) path.evaluate(\"/PES_ACQUIT/ACQUIT/ElementACQUIT\", document, XPathConstants.NODESET);\n        for (int i = 0; i < nodes.getLength(); i++) {\n            Node node = nodes.item(i);\n            boolean isCurrentNodeValid = path.evaluate(\"EtatAck/@V\", node).equals(\"1\");\n            isAckOk = isAckOk && isCurrentNodeValid;\n\n            if (isCurrentNodeValid)\n                continue;\n\n            NodeList innerNodes = (NodeList) path.evaluate(\"DetailPiece\", node, XPathConstants.NODESET);\n            if (innerNodes.getLength() != 0) {\n                for (int j = 0; j < innerNodes.getLength(); j++) {\n                    Node in = innerNodes.item(j);\n                    NodeList detailLigneNode = (NodeList) path.evaluate(\"DetailLigne\", in, XPathConstants.NODESET);\n                    if (detailLigneNode.getLength() != 0) {\n                        /*\n                         * Error pattern #1\n                         *\n                         * <DetailPiece>\n                         *     <NumPiece V=\"20\"/>\n                         *     <DetailLigne>\n                         *         <NumLigne V=\"1\"/>\n                         *         <Erreur>\n                         *             <NumAnoAck V=\"ERREUR_AUTRE\"/>\n                         *             <LibelleAnoAck V=\"1971 - Compte fonction pr\u00e9sent \u00e0 tort\"/>\n                         *         </Erreur>\n                         *     </DetailLigne>\n                         *     [...]\n                         * </DetailPiece>\n                         * <DetailPiece>\n                         *     [...]\n                         * </DetailPiece>\n                         */\n                        for (int k = 0; k < detailLigneNode.getLength(); k++) {\n                            Node detail = detailLigneNode.item(k);\n                            PesHistoryError e = new PesHistoryError(\n                                    path.evaluate(\"Erreur/NumAnoAck/@V\", detail),\n                                    path.evaluate(\"Erreur/LibelleAnoAck/@V\", detail),\n                                    path.evaluate(\"NumPiece/@V\", in)\n                            );\n                            errors.add(e);\n                        }\n                    } else {\n                        /*\n                         * Error pattern #2\n                         *\n                         * <DetailPiece>\n                         *     <NumPiece V=\"5129\"/>\n                         *     <Erreur>\n                         *         <NumAnoAck V=\"ERREUR_AUTRE\"/>\n                         *         <LibelleAnoAck V=\"2559 - Le code service de la structure publique destinataire est inconnu ou inactif dans Chorus Pro\"/>\n                         *     </Erreur>\n                         * </DetailPiece>\n                         */\n                        PesHistoryError e = new PesHistoryError(\n                                path.evaluate(\"Erreur/NumAnoAck/@V\", in),\n                                path.evaluate(\"Erreur/LibelleAnoAck/@V\", in),\n                                path.evaluate(\"NumPiece/@V\", in)\n                        );\n                        errors.add(e);\n                    }\n                }\n            } else {\n                /*\n                 * Error pattern #3\n                 *\n                 * <IdUnique V=\"TI00064567\"/>\n                 * <Erreur>\n                 *     <NumAnoAck V=\"ERREUR_DOUBLON_PJ\"/>\n                 *     <LibelleAnoAck V=\"1984 - L'identifiant unique de la PJ a d\u00e9j\u00e0 \u00e9t\u00e9 int\u00e9gr\u00e9 dans HELIOS\"/>\n                 * </Erreur>\n                 */\n                PesHistoryError e = new PesHistoryError(\n                        path.evaluate(\"Erreur/NumAnoAck/@V\", node),\n                        path.evaluate(\"Erreur/LibelleAnoAck/@V\", node),\n                        path.evaluate(\"IdUnique/@V\", node)\n                );\n                errors.add(e);\n            }\n        }\n\n        if (isAckOk) {\n            pesService.updateStatus(pesAller.getUuid(), StatusType.ACK_RECEIVED, targetArray, ackName);\n        } else {\n            pesService.updateStatus(pesAller.getUuid(), StatusType.NACK_RECEIVED, targetArray, ackName, errors);\n        }\n\n    }", "signature": "void readACK(byte[] targetArray, String ackName)", "full_signature": "public void readACK(byte[] targetArray, String ackName)", "class_method_signature": "ReceiverTask.readACK(byte[] targetArray, String ackName)", "testcase": false, "constructor": false, "invocations": ["debug", "newInstance", "newDocumentBuilder", "newInstance", "newXPath", "parse", "evaluate", "debug", "orElseThrow", "getByFileName", "evaluate", "getLength", "item", "equals", "evaluate", "evaluate", "getLength", "getLength", "item", "evaluate", "getLength", "getLength", "item", "evaluate", "evaluate", "evaluate", "add", "evaluate", "evaluate", "evaluate", "add", "evaluate", "evaluate", "evaluate", "add", "updateStatus", "getUuid", "updateStatus", "getUuid"]}, "repository": {"repo_id": 180337008, "url": "https://github.com/SICTIAM/stela", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 7714, "license": "licensed"}}