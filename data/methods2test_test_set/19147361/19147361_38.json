{"test_class": {"identifier": "TestThemisMasterObserver", "superclass": "extends TransactionTestBase", "interfaces": "", "fields": [{"original_string": "private HBaseAdmin admin = null;", "modifier": "private", "type": "HBaseAdmin", "declarator": "admin = null", "var_name": "admin"}, {"original_string": "private byte[] testTable = Bytes.toBytes(\"test_table\");", "modifier": "private", "type": "byte[]", "declarator": "testTable = Bytes.toBytes(\"test_table\")", "var_name": "testTable"}, {"original_string": "private byte[] testFamily = Bytes.toBytes(\"test_family\");", "modifier": "private", "type": "byte[]", "declarator": "testFamily = Bytes.toBytes(\"test_family\")", "var_name": "testFamily"}], "file": "themis-coprocessor/src/test/java/org/apache/hadoop/hbase/master/TestThemisMasterObserver.java"}, "test_case": {"identifier": "testSetExpiredTsToZk", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSetExpiredTsToZk() throws Exception {\n    long ts = System.currentTimeMillis() - 10l * 86400 * 1000;\n    ThemisMasterObserver masterObserver = new ThemisMasterObserver();\n    masterObserver.zk = new ZooKeeperWatcher(conf, \"test\", null, true);\n    masterObserver.themisExpiredTsZNodePath = ThemisMasterObserver.getThemisExpiredTsZNodePath(masterObserver.zk);\n    masterObserver.setExpiredTsToZk(ts);\n    Assert.assertEquals(ts, ThemisMasterObserver.getThemisExpiredTsFromZk(masterObserver.zk));\n    \n    // test get data from not-exist path\n    Assert.assertEquals(Long.MIN_VALUE,\n      ThemisMasterObserver.getThemisExpiredTsFromZk(masterObserver.zk,\n        masterObserver.themisExpiredTsZNodePath + \"/\" + System.currentTimeMillis()));\n    masterObserver.zk.close();\n  }", "signature": "void testSetExpiredTsToZk()", "full_signature": "@Test public void testSetExpiredTsToZk()", "class_method_signature": "TestThemisMasterObserver.testSetExpiredTsToZk()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "getThemisExpiredTsZNodePath", "setExpiredTsToZk", "assertEquals", "getThemisExpiredTsFromZk", "assertEquals", "getThemisExpiredTsFromZk", "currentTimeMillis", "close"]}, "focal_class": {"identifier": "ThemisMasterObserver", "superclass": "extends BaseMasterObserver", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(ThemisMasterObserver.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(ThemisMasterObserver.class)", "var_name": "LOG"}, {"original_string": "public static final String RETURNED_THEMIS_TABLE_DESC = \"__themis.returned.table.desc__\";", "modifier": "public static final", "type": "String", "declarator": "RETURNED_THEMIS_TABLE_DESC = \"__themis.returned.table.desc__\"", "var_name": "RETURNED_THEMIS_TABLE_DESC"}, {"original_string": "public static final String THEMIS_ENABLE_KEY = \"THEMIS_ENABLE\";", "modifier": "public static final", "type": "String", "declarator": "THEMIS_ENABLE_KEY = \"THEMIS_ENABLE\"", "var_name": "THEMIS_ENABLE_KEY"}, {"original_string": "public static final String THEMIS_EXPIRED_TIMESTAMP_CALCULATE_PERIOD_KEY = \"themis.expired.timestamp.calculator.period\";", "modifier": "public static final", "type": "String", "declarator": "THEMIS_EXPIRED_TIMESTAMP_CALCULATE_PERIOD_KEY = \"themis.expired.timestamp.calculator.period\"", "var_name": "THEMIS_EXPIRED_TIMESTAMP_CALCULATE_PERIOD_KEY"}, {"original_string": "public static final String THEMIS_EXPIRED_DATA_CLEAN_ENABLE_KEY = \"themis.expired.data.clean.enable\";", "modifier": "public static final", "type": "String", "declarator": "THEMIS_EXPIRED_DATA_CLEAN_ENABLE_KEY = \"themis.expired.data.clean.enable\"", "var_name": "THEMIS_EXPIRED_DATA_CLEAN_ENABLE_KEY"}, {"original_string": "public static final String THEMIS_EXPIRED_TIMESTAMP_ZNODE_NAME = \"themis-expired-ts\";", "modifier": "public static final", "type": "String", "declarator": "THEMIS_EXPIRED_TIMESTAMP_ZNODE_NAME = \"themis-expired-ts\"", "var_name": "THEMIS_EXPIRED_TIMESTAMP_ZNODE_NAME"}, {"original_string": "protected int expiredTsCalculatePeriod;", "modifier": "protected", "type": "int", "declarator": "expiredTsCalculatePeriod", "var_name": "expiredTsCalculatePeriod"}, {"original_string": "protected Chore themisExpiredTsCalculator;", "modifier": "protected", "type": "Chore", "declarator": "themisExpiredTsCalculator", "var_name": "themisExpiredTsCalculator"}, {"original_string": "protected ZooKeeperWatcher zk;", "modifier": "protected", "type": "ZooKeeperWatcher", "declarator": "zk", "var_name": "zk"}, {"original_string": "protected String themisExpiredTsZNodePath;", "modifier": "protected", "type": "String", "declarator": "themisExpiredTsZNodePath", "var_name": "themisExpiredTsZNodePath"}, {"original_string": "protected HConnection connection;", "modifier": "protected", "type": "HConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "protected ServerLockCleaner lockCleaner;", "modifier": "protected", "type": "ServerLockCleaner", "declarator": "lockCleaner", "var_name": "lockCleaner"}], "methods": [{"identifier": "start", "parameters": "(CoprocessorEnvironment ctx)", "modifiers": "@Override public", "return": "void", "signature": "void start(CoprocessorEnvironment ctx)", "full_signature": "@Override public void start(CoprocessorEnvironment ctx)", "class_method_signature": "ThemisMasterObserver.start(CoprocessorEnvironment ctx)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "(CoprocessorEnvironment ctx)", "modifiers": "@Override public", "return": "void", "signature": "void stop(CoprocessorEnvironment ctx)", "full_signature": "@Override public void stop(CoprocessorEnvironment ctx)", "class_method_signature": "ThemisMasterObserver.stop(CoprocessorEnvironment ctx)", "testcase": false, "constructor": false}, {"identifier": "preCreateTable", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "modifiers": "@Override public", "return": "void", "signature": "void preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "full_signature": "@Override public void preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "class_method_signature": "ThemisMasterObserver.preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "testcase": false, "constructor": false}, {"identifier": "setReturnedThemisTableDesc", "parameters": "(HTableDescriptor desc)", "modifiers": "protected static", "return": "void", "signature": "void setReturnedThemisTableDesc(HTableDescriptor desc)", "full_signature": "protected static void setReturnedThemisTableDesc(HTableDescriptor desc)", "class_method_signature": "ThemisMasterObserver.setReturnedThemisTableDesc(HTableDescriptor desc)", "testcase": false, "constructor": false}, {"identifier": "isReturnedThemisTableDesc", "parameters": "(HTableDescriptor desc)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isReturnedThemisTableDesc(HTableDescriptor desc)", "full_signature": "protected static boolean isReturnedThemisTableDesc(HTableDescriptor desc)", "class_method_signature": "ThemisMasterObserver.isReturnedThemisTableDesc(HTableDescriptor desc)", "testcase": false, "constructor": false}, {"identifier": "postGetTableDescriptors", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      List<HTableDescriptor> descriptors)", "modifiers": "@Override public", "return": "void", "signature": "void postGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      List<HTableDescriptor> descriptors)", "full_signature": "@Override public void postGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      List<HTableDescriptor> descriptors)", "class_method_signature": "ThemisMasterObserver.postGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      List<HTableDescriptor> descriptors)", "testcase": false, "constructor": false}, {"identifier": "createLockFamily", "parameters": "()", "modifiers": "protected static", "return": "HColumnDescriptor", "signature": "HColumnDescriptor createLockFamily()", "full_signature": "protected static HColumnDescriptor createLockFamily()", "class_method_signature": "ThemisMasterObserver.createLockFamily()", "testcase": false, "constructor": false}, {"identifier": "addCommitFamilies", "parameters": "(HTableDescriptor desc)", "modifiers": "protected static", "return": "void", "signature": "void addCommitFamilies(HTableDescriptor desc)", "full_signature": "protected static void addCommitFamilies(HTableDescriptor desc)", "class_method_signature": "ThemisMasterObserver.addCommitFamilies(HTableDescriptor desc)", "testcase": false, "constructor": false}, {"identifier": "getCommitFamily", "parameters": "(byte[] familyName)", "modifiers": "protected static", "return": "HColumnDescriptor", "signature": "HColumnDescriptor getCommitFamily(byte[] familyName)", "full_signature": "protected static HColumnDescriptor getCommitFamily(byte[] familyName)", "class_method_signature": "ThemisMasterObserver.getCommitFamily(byte[] familyName)", "testcase": false, "constructor": false}, {"identifier": "isThemisEnableFamily", "parameters": "(HColumnDescriptor desc)", "modifiers": "public static", "return": "boolean", "signature": "boolean isThemisEnableFamily(HColumnDescriptor desc)", "full_signature": "public static boolean isThemisEnableFamily(HColumnDescriptor desc)", "class_method_signature": "ThemisMasterObserver.isThemisEnableFamily(HColumnDescriptor desc)", "testcase": false, "constructor": false}, {"identifier": "isThemisEnableTable", "parameters": "(HTableDescriptor desc)", "modifiers": "public static", "return": "boolean", "signature": "boolean isThemisEnableTable(HTableDescriptor desc)", "full_signature": "public static boolean isThemisEnableTable(HTableDescriptor desc)", "class_method_signature": "ThemisMasterObserver.isThemisEnableTable(HTableDescriptor desc)", "testcase": false, "constructor": false}, {"identifier": "startExpiredTimestampCalculator", "parameters": "(MasterEnvironment ctx)", "modifiers": "protected synchronized", "return": "void", "signature": "void startExpiredTimestampCalculator(MasterEnvironment ctx)", "full_signature": "protected synchronized void startExpiredTimestampCalculator(MasterEnvironment ctx)", "class_method_signature": "ThemisMasterObserver.startExpiredTimestampCalculator(MasterEnvironment ctx)", "testcase": false, "constructor": false}, {"identifier": "getThemisTables", "parameters": "(HConnection connection)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getThemisTables(HConnection connection)", "full_signature": "public static List<String> getThemisTables(HConnection connection)", "class_method_signature": "ThemisMasterObserver.getThemisTables(HConnection connection)", "testcase": false, "constructor": false}, {"identifier": "getThemisExpiredTsZNodePath", "parameters": "(ZooKeeperWatcher zk)", "modifiers": "public static", "return": "String", "signature": "String getThemisExpiredTsZNodePath(ZooKeeperWatcher zk)", "full_signature": "public static String getThemisExpiredTsZNodePath(ZooKeeperWatcher zk)", "class_method_signature": "ThemisMasterObserver.getThemisExpiredTsZNodePath(ZooKeeperWatcher zk)", "testcase": false, "constructor": false}, {"identifier": "getThemisExpiredTsFromZk", "parameters": "(ZooKeeperWatcher zk)", "modifiers": "public static", "return": "long", "signature": "long getThemisExpiredTsFromZk(ZooKeeperWatcher zk)", "full_signature": "public static long getThemisExpiredTsFromZk(ZooKeeperWatcher zk)", "class_method_signature": "ThemisMasterObserver.getThemisExpiredTsFromZk(ZooKeeperWatcher zk)", "testcase": false, "constructor": false}, {"identifier": "getThemisExpiredTsFromZk", "parameters": "(ZooKeeperWatcher zk, String path)", "modifiers": "public static", "return": "long", "signature": "long getThemisExpiredTsFromZk(ZooKeeperWatcher zk, String path)", "full_signature": "public static long getThemisExpiredTsFromZk(ZooKeeperWatcher zk, String path)", "class_method_signature": "ThemisMasterObserver.getThemisExpiredTsFromZk(ZooKeeperWatcher zk, String path)", "testcase": false, "constructor": false}, {"identifier": "setExpiredTsToZk", "parameters": "(long currentExpiredTs)", "modifiers": "public", "return": "void", "signature": "void setExpiredTsToZk(long currentExpiredTs)", "full_signature": "public void setExpiredTsToZk(long currentExpiredTs)", "class_method_signature": "ThemisMasterObserver.setExpiredTsToZk(long currentExpiredTs)", "testcase": false, "constructor": false}, {"identifier": "cleanLockBeforeTimestamp", "parameters": "(long ts)", "modifiers": "public", "return": "void", "signature": "void cleanLockBeforeTimestamp(long ts)", "full_signature": "public void cleanLockBeforeTimestamp(long ts)", "class_method_signature": "ThemisMasterObserver.cleanLockBeforeTimestamp(long ts)", "testcase": false, "constructor": false}], "file": "themis-coprocessor/src/main/java/org/apache/hadoop/hbase/master/ThemisMasterObserver.java"}, "focal_method": {"identifier": "setExpiredTsToZk", "parameters": "(long currentExpiredTs)", "modifiers": "public", "return": "void", "body": "public void setExpiredTsToZk(long currentExpiredTs) throws Exception {\n    ZKUtil.createSetData(zk, themisExpiredTsZNodePath,\n      Bytes.toBytes(String.valueOf(currentExpiredTs)));\n    LOG.info(\"successfully set currentExpiredTs to zk, currentExpiredTs=\" + currentExpiredTs\n        + \", zkPath=\" + themisExpiredTsZNodePath);\n  }", "signature": "void setExpiredTsToZk(long currentExpiredTs)", "full_signature": "public void setExpiredTsToZk(long currentExpiredTs)", "class_method_signature": "ThemisMasterObserver.setExpiredTsToZk(long currentExpiredTs)", "testcase": false, "constructor": false, "invocations": ["createSetData", "toBytes", "valueOf", "info"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}