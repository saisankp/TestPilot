{"test_class": {"identifier": "ThreadLocalSpanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "StrictCurrentTraceContext currentTraceContext = StrictCurrentTraceContext.create();", "modifier": "", "type": "StrictCurrentTraceContext", "declarator": "currentTraceContext = StrictCurrentTraceContext.create()", "var_name": "currentTraceContext"}, {"original_string": "TestSpanHandler spans = new TestSpanHandler();", "modifier": "", "type": "TestSpanHandler", "declarator": "spans = new TestSpanHandler()", "var_name": "spans"}, {"original_string": "Tracing tracing = Tracing.newBuilder()\n    .currentTraceContext(currentTraceContext)\n    .addSpanHandler(spans)\n    .build();", "modifier": "", "type": "Tracing", "declarator": "tracing = Tracing.newBuilder()\n    .currentTraceContext(currentTraceContext)\n    .addSpanHandler(spans)\n    .build()", "var_name": "tracing"}, {"original_string": "ThreadLocalSpan threadLocalSpan = ThreadLocalSpan.create(tracing.tracer());", "modifier": "", "type": "ThreadLocalSpan", "declarator": "threadLocalSpan = ThreadLocalSpan.create(tracing.tracer())", "var_name": "threadLocalSpan"}], "file": "brave/src/test/java/brave/propagation/ThreadLocalSpanTest.java"}, "test_case": {"identifier": "next", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void next() {\n    assertThat(threadLocalSpan.next())\n      .isEqualTo(threadLocalSpan.remove());\n  }", "signature": "void next()", "full_signature": "@Test public void next()", "class_method_signature": "ThreadLocalSpanTest.next()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "next", "remove"]}, "focal_class": {"identifier": "ThreadLocalSpan", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final ThreadLocalSpan CURRENT_TRACER = new ThreadLocalSpan(null);", "modifier": "public static final", "type": "ThreadLocalSpan", "declarator": "CURRENT_TRACER = new ThreadLocalSpan(null)", "var_name": "CURRENT_TRACER"}, {"original_string": "@Nullable final Tracer tracer;", "modifier": "@Nullable final", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "@SuppressWarnings(\"ThreadLocalUsage\") // intentional: to support multiple Tracer instances\n  final ThreadLocal<ArrayDeque<SpanAndScope>> currentSpanInScopeStack = new ThreadLocal<>();", "modifier": "@SuppressWarnings(\"ThreadLocalUsage\") // intentional: to support multiple Tracer instances\n  final", "type": "ThreadLocal<ArrayDeque<SpanAndScope>>", "declarator": "currentSpanInScopeStack = new ThreadLocal<>()", "var_name": "currentSpanInScopeStack"}], "methods": [{"identifier": "create", "parameters": "(Tracer tracer)", "modifiers": "public static", "return": "ThreadLocalSpan", "signature": "ThreadLocalSpan create(Tracer tracer)", "full_signature": "public static ThreadLocalSpan create(Tracer tracer)", "class_method_signature": "ThreadLocalSpan.create(Tracer tracer)", "testcase": false, "constructor": false}, {"identifier": "ThreadLocalSpan", "parameters": "(Tracer tracer)", "modifiers": "", "return": "", "signature": " ThreadLocalSpan(Tracer tracer)", "full_signature": "  ThreadLocalSpan(Tracer tracer)", "class_method_signature": "ThreadLocalSpan.ThreadLocalSpan(Tracer tracer)", "testcase": false, "constructor": true}, {"identifier": "tracer", "parameters": "()", "modifiers": "", "return": "Tracer", "signature": "Tracer tracer()", "full_signature": " Tracer tracer()", "class_method_signature": "ThreadLocalSpan.tracer()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(TraceContextOrSamplingFlags extracted)", "modifiers": "@Nullable public", "return": "Span", "signature": "Span next(TraceContextOrSamplingFlags extracted)", "full_signature": "@Nullable public Span next(TraceContextOrSamplingFlags extracted)", "class_method_signature": "ThreadLocalSpan.next(TraceContextOrSamplingFlags extracted)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Nullable public", "return": "Span", "signature": "Span next()", "full_signature": "@Nullable public Span next()", "class_method_signature": "ThreadLocalSpan.next()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "@Nullable public", "return": "Span", "signature": "Span remove()", "full_signature": "@Nullable public Span remove()", "class_method_signature": "ThreadLocalSpan.remove()", "testcase": false, "constructor": false}, {"identifier": "getCurrentSpanInScopeStack", "parameters": "()", "modifiers": "", "return": "ArrayDeque<SpanAndScope>", "signature": "ArrayDeque<SpanAndScope> getCurrentSpanInScopeStack()", "full_signature": " ArrayDeque<SpanAndScope> getCurrentSpanInScopeStack()", "class_method_signature": "ThreadLocalSpan.getCurrentSpanInScopeStack()", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/propagation/ThreadLocalSpan.java"}, "focal_method": {"identifier": "next", "parameters": "(TraceContextOrSamplingFlags extracted)", "modifiers": "@Nullable public", "return": "Span", "body": "@Nullable public Span next(TraceContextOrSamplingFlags extracted) {\n    Tracer tracer = tracer();\n    if (tracer == null) return null;\n    Span next = tracer.nextSpan(extracted);\n    SpanAndScope spanAndScope = new SpanAndScope(next, tracer.withSpanInScope(next));\n    getCurrentSpanInScopeStack().addFirst(spanAndScope);\n    return next;\n  }", "signature": "Span next(TraceContextOrSamplingFlags extracted)", "full_signature": "@Nullable public Span next(TraceContextOrSamplingFlags extracted)", "class_method_signature": "ThreadLocalSpan.next(TraceContextOrSamplingFlags extracted)", "testcase": false, "constructor": false, "invocations": ["tracer", "nextSpan", "withSpanInScope", "addFirst", "getCurrentSpanInScopeStack"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}