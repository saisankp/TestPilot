{"test_class": {"identifier": "EntitiesTest", "superclass": "", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/jsoup/nodes/EntitiesTest.java"}, "test_case": {"identifier": "escape", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void escape() {\n        String text = \"Hello &<> \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9\";\n        String escapedAscii = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.base);\n        String escapedAsciiFull = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.extended);\n        String escapedAsciiXhtml = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.xhtml);\n        String escapedUtfFull = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.base);\n        String escapedUtfMin = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.xhtml);\n\n        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy;\", escapedAscii);\n        assertEquals(\"Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy;\", escapedAsciiFull);\n        assertEquals(\"Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9;\", escapedAsciiXhtml);\n        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; \u03c0 \u65b0 there &frac34; &copy;\", escapedUtfFull);\n        assertEquals(\"Hello &amp;&lt;&gt; \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9\", escapedUtfMin);\n        // odd that it's defined as aring in base but angst in full\n\n        // round trip\n        assertEquals(text, Entities.unescape(escapedAscii));\n        assertEquals(text, Entities.unescape(escapedAsciiFull));\n        assertEquals(text, Entities.unescape(escapedAsciiXhtml));\n        assertEquals(text, Entities.unescape(escapedUtfFull));\n        assertEquals(text, Entities.unescape(escapedUtfMin));\n    }", "signature": "void escape()", "full_signature": "@Test public void escape()", "class_method_signature": "EntitiesTest.escape()", "testcase": true, "constructor": false, "invocations": ["escape", "newEncoder", "forName", "escape", "newEncoder", "forName", "escape", "newEncoder", "forName", "escape", "newEncoder", "forName", "escape", "newEncoder", "forName", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "unescape", "assertEquals", "unescape", "assertEquals", "unescape", "assertEquals", "unescape", "assertEquals", "unescape"]}, "focal_class": {"identifier": "Entities", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<String, Character> full;", "modifier": "private static final", "type": "Map<String, Character>", "declarator": "full", "var_name": "full"}, {"original_string": "private static final Map<Character, String> xhtmlByVal;", "modifier": "private static final", "type": "Map<Character, String>", "declarator": "xhtmlByVal", "var_name": "xhtmlByVal"}, {"original_string": "private static final Map<String, Character> base;", "modifier": "private static final", "type": "Map<String, Character>", "declarator": "base", "var_name": "base"}, {"original_string": "private static final Map<Character, String> baseByVal;", "modifier": "private static final", "type": "Map<Character, String>", "declarator": "baseByVal", "var_name": "baseByVal"}, {"original_string": "private static final Map<Character, String> fullByVal;", "modifier": "private static final", "type": "Map<Character, String>", "declarator": "fullByVal", "var_name": "fullByVal"}, {"original_string": "private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);?\");", "modifier": "private static final", "type": "Pattern", "declarator": "unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);?\")", "var_name": "unescapePattern"}, {"original_string": "private static final Pattern strictUnescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);\");", "modifier": "private static final", "type": "Pattern", "declarator": "strictUnescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);\")", "var_name": "strictUnescapePattern"}, {"original_string": "private static final Object[][] xhtmlArray = {\n            {\"quot\", 0x00022},\n            {\"amp\", 0x00026},\n            {\"apos\", 0x00027},\n            {\"lt\", 0x0003C},\n            {\"gt\", 0x0003E}\n    };", "modifier": "private static final", "type": "Object[][]", "declarator": "xhtmlArray = {\n            {\"quot\", 0x00022},\n            {\"amp\", 0x00026},\n            {\"apos\", 0x00027},\n            {\"lt\", 0x0003C},\n            {\"gt\", 0x0003E}\n    }", "var_name": "xhtmlArray"}], "methods": [{"identifier": "Entities", "parameters": "()", "modifiers": "private", "return": "", "signature": " Entities()", "full_signature": "private  Entities()", "class_method_signature": "Entities.Entities()", "testcase": false, "constructor": true}, {"identifier": "isNamedEntity", "parameters": "(String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNamedEntity(String name)", "full_signature": "public static boolean isNamedEntity(String name)", "class_method_signature": "Entities.isNamedEntity(String name)", "testcase": false, "constructor": false}, {"identifier": "isBaseNamedEntity", "parameters": "(String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBaseNamedEntity(String name)", "full_signature": "public static boolean isBaseNamedEntity(String name)", "class_method_signature": "Entities.isBaseNamedEntity(String name)", "testcase": false, "constructor": false}, {"identifier": "getCharacterByName", "parameters": "(String name)", "modifiers": "public static", "return": "Character", "signature": "Character getCharacterByName(String name)", "full_signature": "public static Character getCharacterByName(String name)", "class_method_signature": "Entities.getCharacterByName(String name)", "testcase": false, "constructor": false}, {"identifier": "escape", "parameters": "(String string, Document.OutputSettings out)", "modifiers": "static", "return": "String", "signature": "String escape(String string, Document.OutputSettings out)", "full_signature": "static String escape(String string, Document.OutputSettings out)", "class_method_signature": "Entities.escape(String string, Document.OutputSettings out)", "testcase": false, "constructor": false}, {"identifier": "escape", "parameters": "(String string, CharsetEncoder encoder, EscapeMode escapeMode)", "modifiers": "static", "return": "String", "signature": "String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode)", "full_signature": "static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode)", "class_method_signature": "Entities.escape(String string, CharsetEncoder encoder, EscapeMode escapeMode)", "testcase": false, "constructor": false}, {"identifier": "unescape", "parameters": "(String string)", "modifiers": "static", "return": "String", "signature": "String unescape(String string)", "full_signature": "static String unescape(String string)", "class_method_signature": "Entities.unescape(String string)", "testcase": false, "constructor": false}, {"identifier": "unescape", "parameters": "(String string, boolean strict)", "modifiers": "static", "return": "String", "signature": "String unescape(String string, boolean strict)", "full_signature": "static String unescape(String string, boolean strict)", "class_method_signature": "Entities.unescape(String string, boolean strict)", "testcase": false, "constructor": false}, {"identifier": "loadEntities", "parameters": "(String filename)", "modifiers": "private static", "return": "Map<String, Character>", "signature": "Map<String, Character> loadEntities(String filename)", "full_signature": "private static Map<String, Character> loadEntities(String filename)", "class_method_signature": "Entities.loadEntities(String filename)", "testcase": false, "constructor": false}, {"identifier": "toCharacterKey", "parameters": "(Map<String, Character> inMap)", "modifiers": "private static", "return": "Map<Character, String>", "signature": "Map<Character, String> toCharacterKey(Map<String, Character> inMap)", "full_signature": "private static Map<Character, String> toCharacterKey(Map<String, Character> inMap)", "class_method_signature": "Entities.toCharacterKey(Map<String, Character> inMap)", "testcase": false, "constructor": false}], "file": "base/lang/src/main/java/leap/lang/jsoup/nodes/Entities.java"}, "focal_method": {"identifier": "escape", "parameters": "(String string, Document.OutputSettings out)", "modifiers": "static", "return": "String", "body": "static String escape(String string, Document.OutputSettings out) {\n        return escape(string, out.encoder(), out.escapeMode());\n    }", "signature": "String escape(String string, Document.OutputSettings out)", "full_signature": "static String escape(String string, Document.OutputSettings out)", "class_method_signature": "Entities.escape(String string, Document.OutputSettings out)", "testcase": false, "constructor": false, "invocations": ["escape", "encoder", "escapeMode"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}