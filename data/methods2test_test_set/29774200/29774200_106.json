{"test_class": {"identifier": "BambooConnectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "BambooConnection bambooConnection = new BambooConnection();", "modifier": "", "type": "BambooConnection", "declarator": "bambooConnection = new BambooConnection()", "var_name": "bambooConnection"}, {"original_string": "@Mock\n    Bamboo bamboo;", "modifier": "@Mock", "type": "Bamboo", "declarator": "bamboo", "var_name": "bamboo"}], "file": "component/core/src/test/java/fr/norad/visuwall/plugin/bamboo/BambooConnectionTest.java"}, "test_case": {"identifier": "should_get_a_disabled_project", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_get_a_disabled_project() throws Exception {\n        Plan plan = new Plan();\n        plan.setEnabled(false);\n\n        when(bamboo.findPlan(anyString())).thenReturn(plan);\n\n        SoftwareProjectId softwareProjectId = new SoftwareProjectId(\"projectId\");\n        boolean isDisabled = bambooConnection.isProjectDisabled(softwareProjectId);\n\n        assertTrue(isDisabled);\n    }", "signature": "void should_get_a_disabled_project()", "full_signature": "@Test public void should_get_a_disabled_project()", "class_method_signature": "BambooConnectionTest.should_get_a_disabled_project()", "testcase": true, "constructor": false, "invocations": ["setEnabled", "thenReturn", "when", "findPlan", "anyString", "isProjectDisabled", "assertTrue"]}, "focal_class": {"identifier": "BambooConnection", "superclass": "", "interfaces": "implements BuildCapability, TestCapability", "fields": [{"original_string": "@VisibleForTesting\n    Bamboo bamboo;", "modifier": "@VisibleForTesting", "type": "Bamboo", "declarator": "bamboo", "var_name": "bamboo"}, {"original_string": "private boolean connected;", "modifier": "private", "type": "boolean", "declarator": "connected", "var_name": "connected"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(BambooConnection.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BambooConnection.class)", "var_name": "LOG"}], "methods": [{"identifier": "connect", "parameters": "(String url, String login, String password)", "modifiers": "@Override public", "return": "void", "signature": "void connect(String url, String login, String password)", "full_signature": "@Override public void connect(String url, String login, String password)", "class_method_signature": "BambooConnection.connect(String url, String login, String password)", "testcase": false, "constructor": false}, {"identifier": "isBuilding", "parameters": "(SoftwareProjectId softwareProjectId, String buildId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBuilding(SoftwareProjectId softwareProjectId, String buildId)", "full_signature": "@Override public boolean isBuilding(SoftwareProjectId softwareProjectId, String buildId)", "class_method_signature": "BambooConnection.isBuilding(SoftwareProjectId softwareProjectId, String buildId)", "testcase": false, "constructor": false}, {"identifier": "getBuildState", "parameters": "(SoftwareProjectId projectId, String buildId)", "modifiers": "@Override public", "return": "BuildState", "signature": "BuildState getBuildState(SoftwareProjectId projectId, String buildId)", "full_signature": "@Override public BuildState getBuildState(SoftwareProjectId projectId, String buildId)", "class_method_signature": "BambooConnection.getBuildState(SoftwareProjectId projectId, String buildId)", "testcase": false, "constructor": false}, {"identifier": "getLastBuildId", "parameters": "(SoftwareProjectId projectId)", "modifiers": "@Override public", "return": "String", "signature": "String getLastBuildId(SoftwareProjectId projectId)", "full_signature": "@Override public String getLastBuildId(SoftwareProjectId projectId)", "class_method_signature": "BambooConnection.getLastBuildId(SoftwareProjectId projectId)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "BambooConnection.close()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "String", "signature": "String getDescription(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public String getDescription(SoftwareProjectId softwareProjectId)", "class_method_signature": "BambooConnection.getDescription(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "identify", "parameters": "(ProjectKey projectKey)", "modifiers": "@Override public", "return": "SoftwareProjectId", "signature": "SoftwareProjectId identify(ProjectKey projectKey)", "full_signature": "@Override public SoftwareProjectId identify(ProjectKey projectKey)", "class_method_signature": "BambooConnection.identify(ProjectKey projectKey)", "testcase": false, "constructor": false}, {"identifier": "getEstimatedFinishTime", "parameters": "(SoftwareProjectId projectId, String buildId)", "modifiers": "@Override public", "return": "Date", "signature": "Date getEstimatedFinishTime(SoftwareProjectId projectId, String buildId)", "full_signature": "@Override public Date getEstimatedFinishTime(SoftwareProjectId projectId, String buildId)", "class_method_signature": "BambooConnection.getEstimatedFinishTime(SoftwareProjectId projectId, String buildId)", "testcase": false, "constructor": false}, {"identifier": "getProjectKey", "parameters": "(SoftwareProjectId projectId)", "modifiers": "private", "return": "String", "signature": "String getProjectKey(SoftwareProjectId projectId)", "full_signature": "private String getProjectKey(SoftwareProjectId projectId)", "class_method_signature": "BambooConnection.getProjectKey(SoftwareProjectId projectId)", "testcase": false, "constructor": false}, {"identifier": "checkConnected", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkConnected()", "full_signature": "private void checkConnected()", "class_method_signature": "BambooConnection.checkConnected()", "testcase": false, "constructor": false}, {"identifier": "listSoftwareProjectIds", "parameters": "()", "modifiers": "@Override public", "return": "Map<SoftwareProjectId, String>", "signature": "Map<SoftwareProjectId, String> listSoftwareProjectIds()", "full_signature": "@Override public Map<SoftwareProjectId, String> listSoftwareProjectIds()", "class_method_signature": "BambooConnection.listSoftwareProjectIds()", "testcase": false, "constructor": false}, {"identifier": "getBuildIds", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getBuildIds(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public List<String> getBuildIds(SoftwareProjectId softwareProjectId)", "class_method_signature": "BambooConnection.getBuildIds(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "getMavenId", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "String", "signature": "String getMavenId(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public String getMavenId(SoftwareProjectId softwareProjectId)", "class_method_signature": "BambooConnection.getMavenId(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "String", "signature": "String getName(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public String getName(SoftwareProjectId softwareProjectId)", "class_method_signature": "BambooConnection.getName(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "@Override public boolean isClosed()", "class_method_signature": "BambooConnection.isClosed()", "testcase": false, "constructor": false}, {"identifier": "getBuildTime", "parameters": "(SoftwareProjectId softwareProjectId, String buildId)", "modifiers": "@Override public", "return": "BuildTime", "signature": "BuildTime getBuildTime(SoftwareProjectId softwareProjectId, String buildId)", "full_signature": "@Override public BuildTime getBuildTime(SoftwareProjectId softwareProjectId, String buildId)", "class_method_signature": "BambooConnection.getBuildTime(SoftwareProjectId softwareProjectId, String buildId)", "testcase": false, "constructor": false}, {"identifier": "isProjectDisabled", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isProjectDisabled(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public boolean isProjectDisabled(SoftwareProjectId softwareProjectId)", "class_method_signature": "BambooConnection.isProjectDisabled(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "getBuildCommiters", "parameters": "(SoftwareProjectId softwareProjectId, String buildId)", "modifiers": "@Override public", "return": "List<Commiter>", "signature": "List<Commiter> getBuildCommiters(SoftwareProjectId softwareProjectId, String buildId)", "full_signature": "@Override public List<Commiter> getBuildCommiters(SoftwareProjectId softwareProjectId, String buildId)", "class_method_signature": "BambooConnection.getBuildCommiters(SoftwareProjectId softwareProjectId, String buildId)", "testcase": false, "constructor": false}, {"identifier": "checkBuildId", "parameters": "(String buildId)", "modifiers": "private", "return": "void", "signature": "void checkBuildId(String buildId)", "full_signature": "private void checkBuildId(String buildId)", "class_method_signature": "BambooConnection.checkBuildId(String buildId)", "testcase": false, "constructor": false}, {"identifier": "checkSoftwareProjectId", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "private", "return": "void", "signature": "void checkSoftwareProjectId(SoftwareProjectId softwareProjectId)", "full_signature": "private void checkSoftwareProjectId(SoftwareProjectId softwareProjectId)", "class_method_signature": "BambooConnection.checkSoftwareProjectId(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "analyzeUnitTests", "parameters": "(SoftwareProjectId projectId)", "modifiers": "@Override public", "return": "TestResult", "signature": "TestResult analyzeUnitTests(SoftwareProjectId projectId)", "full_signature": "@Override public TestResult analyzeUnitTests(SoftwareProjectId projectId)", "class_method_signature": "BambooConnection.analyzeUnitTests(SoftwareProjectId projectId)", "testcase": false, "constructor": false}, {"identifier": "analyzeIntegrationTests", "parameters": "(SoftwareProjectId projectId)", "modifiers": "@Override public", "return": "TestResult", "signature": "TestResult analyzeIntegrationTests(SoftwareProjectId projectId)", "full_signature": "@Override public TestResult analyzeIntegrationTests(SoftwareProjectId projectId)", "class_method_signature": "BambooConnection.analyzeIntegrationTests(SoftwareProjectId projectId)", "testcase": false, "constructor": false}], "file": "component/core/src/main/java/fr/norad/visuwall/plugin/bamboo/BambooConnection.java"}, "focal_method": {"identifier": "isProjectDisabled", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isProjectDisabled(SoftwareProjectId softwareProjectId) throws ProjectNotFoundException {\n        checkConnected();\n        checkSoftwareProjectId(softwareProjectId);\n        String planKey = softwareProjectId.getProjectId();\n        try {\n            Plan plan = bamboo.findPlan(planKey);\n            return !plan.isEnabled();\n        } catch (BambooPlanNotFoundException e) {\n            throw new ProjectNotFoundException(\"Can't find plan with software project id: \" + softwareProjectId, e);\n        }\n    }", "signature": "boolean isProjectDisabled(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public boolean isProjectDisabled(SoftwareProjectId softwareProjectId)", "class_method_signature": "BambooConnection.isProjectDisabled(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false, "invocations": ["checkConnected", "checkSoftwareProjectId", "getProjectId", "findPlan", "isEnabled"]}, "repository": {"repo_id": 29774200, "url": "https://github.com/n0rad/visuwall", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 19747, "license": "licensed"}}