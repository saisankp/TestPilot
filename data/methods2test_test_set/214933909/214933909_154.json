{"test_class": {"identifier": "DatabaseSetEntryServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private DatabaseSetEntryService databaseSetEntryService;", "modifier": "@Mock\n    private", "type": "DatabaseSetEntryService", "declarator": "databaseSetEntryService", "var_name": "databaseSetEntryService"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/service/DatabaseSetEntryServiceTest.java"}, "test_case": {"identifier": "isNotExistByNameTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isNotExistByNameTest() throws SQLException {\n        DatabaseSetEntry databaseSetEntry = DatabaseSetEntry.builder().db_Id(1L).build();\n        Assert.assertTrue(databaseSetEntryService.isNotExistByName(databaseSetEntry));\n    }", "signature": "void isNotExistByNameTest()", "full_signature": "@Test public void isNotExistByNameTest()", "class_method_signature": "DatabaseSetEntryServiceTest.isNotExistByNameTest()", "testcase": true, "constructor": false, "invocations": ["build", "db_Id", "builder", "assertTrue", "isNotExistByName"]}, "focal_class": {"identifier": "DatabaseSetEntryService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Message message;", "modifier": "@Autowired\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private DataBaseSetEntryDao dataBaseSetEntryDao;", "modifier": "@Autowired\n    private", "type": "DataBaseSetEntryDao", "declarator": "dataBaseSetEntryDao", "var_name": "dataBaseSetEntryDao"}, {"original_string": "@Autowired\n    private DbSetConfiguration dbSetConfiguration;", "modifier": "@Autowired\n    private", "type": "DbSetConfiguration", "declarator": "dbSetConfiguration", "var_name": "dbSetConfiguration"}, {"original_string": "@Autowired\n    private DefaultConfiguration defaultConfiguration;", "modifier": "@Autowired\n    private", "type": "DefaultConfiguration", "declarator": "defaultConfiguration", "var_name": "defaultConfiguration"}], "methods": [{"identifier": "findDbSetEntryPageList", "parameters": "(Paging<DatabaseSetEntry> paging)", "modifiers": "public", "return": "ListResult<DatabaseSetEntryView>", "signature": "ListResult<DatabaseSetEntryView> findDbSetEntryPageList(Paging<DatabaseSetEntry> paging)", "full_signature": "public ListResult<DatabaseSetEntryView> findDbSetEntryPageList(Paging<DatabaseSetEntry> paging)", "class_method_signature": "DatabaseSetEntryService.findDbSetEntryPageList(Paging<DatabaseSetEntry> paging)", "testcase": false, "constructor": false}, {"identifier": "isNotExistByName", "parameters": "(DatabaseSetEntry databasesetentry)", "modifiers": "public", "return": "boolean", "signature": "boolean isNotExistByName(DatabaseSetEntry databasesetentry)", "full_signature": "public boolean isNotExistByName(DatabaseSetEntry databasesetentry)", "class_method_signature": "DatabaseSetEntryService.isNotExistByName(DatabaseSetEntry databasesetentry)", "testcase": false, "constructor": false}, {"identifier": "insertDatabaseSetEntry", "parameters": "(DatabaseSetEntry databasesetentry)", "modifiers": "public", "return": "boolean", "signature": "boolean insertDatabaseSetEntry(DatabaseSetEntry databasesetentry)", "full_signature": "public boolean insertDatabaseSetEntry(DatabaseSetEntry databasesetentry)", "class_method_signature": "DatabaseSetEntryService.insertDatabaseSetEntry(DatabaseSetEntry databasesetentry)", "testcase": false, "constructor": false}, {"identifier": "addDatabaseSetEntryList", "parameters": "(LoginUser user, List<DatabaseSetEntry> dBList)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> addDatabaseSetEntryList(LoginUser user, List<DatabaseSetEntry> dBList)", "full_signature": "public ServiceResult<String> addDatabaseSetEntryList(LoginUser user, List<DatabaseSetEntry> dBList)", "class_method_signature": "DatabaseSetEntryService.addDatabaseSetEntryList(LoginUser user, List<DatabaseSetEntry> dBList)", "testcase": false, "constructor": false}, {"identifier": "getNamesByEntryIds", "parameters": "(List<Integer> dbset_ids)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getNamesByEntryIds(List<Integer> dbset_ids)", "full_signature": "public List<String> getNamesByEntryIds(List<Integer> dbset_ids)", "class_method_signature": "DatabaseSetEntryService.getNamesByEntryIds(List<Integer> dbset_ids)", "testcase": false, "constructor": false}, {"identifier": "addDataCenterEntryList", "parameters": "(LoginUser user, List<DatabaseSetEntry> dBList)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> addDataCenterEntryList(LoginUser user, List<DatabaseSetEntry> dBList)", "full_signature": "public ServiceResult<String> addDataCenterEntryList(LoginUser user, List<DatabaseSetEntry> dBList)", "class_method_signature": "DatabaseSetEntryService.addDataCenterEntryList(LoginUser user, List<DatabaseSetEntry> dBList)", "testcase": false, "constructor": false}, {"identifier": "updateDataCenter", "parameters": "(LoginUser user, DatabaseSetEntry newDbSetEntry)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> updateDataCenter(LoginUser user, DatabaseSetEntry newDbSetEntry)", "full_signature": "public ServiceResult<String> updateDataCenter(LoginUser user, DatabaseSetEntry newDbSetEntry)", "class_method_signature": "DatabaseSetEntryService.updateDataCenter(LoginUser user, DatabaseSetEntry newDbSetEntry)", "testcase": false, "constructor": false}, {"identifier": "deleteDataCenter", "parameters": "(LoginUser user, DatabaseSetEntry dbsetEntry)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> deleteDataCenter(LoginUser user, DatabaseSetEntry dbsetEntry)", "full_signature": "public ServiceResult<String> deleteDataCenter(LoginUser user, DatabaseSetEntry dbsetEntry)", "class_method_signature": "DatabaseSetEntryService.deleteDataCenter(LoginUser user, DatabaseSetEntry dbsetEntry)", "testcase": false, "constructor": false}, {"identifier": "syncDbsetEntry", "parameters": "(LoginUser user, DatabaseSetEntry dbsetEntry)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> syncDbsetEntry(LoginUser user, DatabaseSetEntry dbsetEntry)", "full_signature": "public ServiceResult<String> syncDbsetEntry(LoginUser user, DatabaseSetEntry dbsetEntry)", "class_method_signature": "DatabaseSetEntryService.syncDbsetEntry(LoginUser user, DatabaseSetEntry dbsetEntry)", "testcase": false, "constructor": false}, {"identifier": "getCheckData", "parameters": "(LoginUser user, DatabaseSetEntry dbsetEntry)", "modifiers": "public", "return": "ConfigCkeckResult<List<ConfigDataResponse>>", "signature": "ConfigCkeckResult<List<ConfigDataResponse>> getCheckData(LoginUser user, DatabaseSetEntry dbsetEntry)", "full_signature": "public ConfigCkeckResult<List<ConfigDataResponse>> getCheckData(LoginUser user, DatabaseSetEntry dbsetEntry)", "class_method_signature": "DatabaseSetEntryService.getCheckData(LoginUser user, DatabaseSetEntry dbsetEntry)", "testcase": false, "constructor": false}, {"identifier": "getDbSetEntryButton", "parameters": "(LoginUser user)", "modifiers": "public", "return": "ServiceResult", "signature": "ServiceResult getDbSetEntryButton(LoginUser user)", "full_signature": "public ServiceResult getDbSetEntryButton(LoginUser user)", "class_method_signature": "DatabaseSetEntryService.getDbSetEntryButton(LoginUser user)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/service/DatabaseSetEntryService.java"}, "focal_method": {"identifier": "isNotExistByName", "parameters": "(DatabaseSetEntry databasesetentry)", "modifiers": "public", "return": "boolean", "body": "public boolean isNotExistByName(DatabaseSetEntry databasesetentry) throws SQLException {\n        Long n = dataBaseSetEntryDao.getCountByName(databasesetentry.getName());\n        Long i = dataBaseSetEntryDao.getCountByIdAndName(databasesetentry.getId(), databasesetentry.getName());\n        if (n == 0 || (n == 1 && i == 1)) {\n            return true;\n        }\n        return false;\n    }", "signature": "boolean isNotExistByName(DatabaseSetEntry databasesetentry)", "full_signature": "public boolean isNotExistByName(DatabaseSetEntry databasesetentry)", "class_method_signature": "DatabaseSetEntryService.isNotExistByName(DatabaseSetEntry databasesetentry)", "testcase": false, "constructor": false, "invocations": ["getCountByName", "getName", "getCountByIdAndName", "getId", "getName"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}