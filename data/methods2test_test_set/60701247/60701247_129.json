{"test_class": {"identifier": "ProtoStyledStringDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String STYLED_STRING_PROTO = \"\" +\n      \"value: \\\"aabbccddeeffgghhii\\\"\\n\" +\n      \"span: {\\n\" +\n      \"  tag: \\\"i\\\"\\n\" +\n      \"  first_char: 0x00000002\\n\" +\n      \"  last_char: 0x0000000b\\n\" +\n      \"}\\n\" +\n      \"span: {\\n\" +\n      \"  tag: \\\"b\\\"\\n\" +\n      \"  first_char: 0x00000002\\n\" +\n      \"  last_char: 0x00000005\\n\" +\n      \"}\\n\" +\n      \"span: {\\n\" +\n      \"  tag: \\\"u\\\"\\n\" +\n      \"  first_char: 0x00000004\\n\" +\n      \"  last_char: 0x00000005\\n\" +\n      \"}\\n\" +\n      \"span: {\\n\" +\n      \"  tag: \\\"font;color=blue;face=verdana\\\"\\n\" +\n      \"  first_char: 0x00000008\\n\" +\n      \"  last_char: 0x00000009\\n\" +\n      \"}\\n\" +\n      \"span: {\\n\" +\n      \"  tag: \\\"x;e= & < ' \\\\\\\"\\\"\\n\" +\n      \"  first_char: 0x0000000e\\n\" +\n      \"  last_char: 0x0000000f\\n\" +\n      \"}\";", "modifier": "private static final", "type": "String", "declarator": "STYLED_STRING_PROTO = \"\" +\n      \"value: \\\"aabbccddeeffgghhii\\\"\\n\" +\n      \"span: {\\n\" +\n      \"  tag: \\\"i\\\"\\n\" +\n      \"  first_char: 0x00000002\\n\" +\n      \"  last_char: 0x0000000b\\n\" +\n      \"}\\n\" +\n      \"span: {\\n\" +\n      \"  tag: \\\"b\\\"\\n\" +\n      \"  first_char: 0x00000002\\n\" +\n      \"  last_char: 0x00000005\\n\" +\n      \"}\\n\" +\n      \"span: {\\n\" +\n      \"  tag: \\\"u\\\"\\n\" +\n      \"  first_char: 0x00000004\\n\" +\n      \"  last_char: 0x00000005\\n\" +\n      \"}\\n\" +\n      \"span: {\\n\" +\n      \"  tag: \\\"font;color=blue;face=verdana\\\"\\n\" +\n      \"  first_char: 0x00000008\\n\" +\n      \"  last_char: 0x00000009\\n\" +\n      \"}\\n\" +\n      \"span: {\\n\" +\n      \"  tag: \\\"x;e= & < ' \\\\\\\"\\\"\\n\" +\n      \"  first_char: 0x0000000e\\n\" +\n      \"  last_char: 0x0000000f\\n\" +\n      \"}\"", "var_name": "STYLED_STRING_PROTO"}, {"original_string": "private static final String STYLED_STRING_XML = \"\" +\n      \"aa<i><b>bb<u>cc</u></b>dd<font color=\\\"blue\\\" face=\\\"verdana\\\">ee</font>ff</i>gg<x e=\\\" &amp; &lt; &apos; &quot;\\\">hh</x>ii\";", "modifier": "private static final", "type": "String", "declarator": "STYLED_STRING_XML = \"\" +\n      \"aa<i><b>bb<u>cc</u></b>dd<font color=\\\"blue\\\" face=\\\"verdana\\\">ee</font>ff</i>gg<x e=\\\" &amp; &lt; &apos; &quot;\\\">hh</x>ii\"", "var_name": "STYLED_STRING_XML"}], "file": "resources-base/testSrc/com/android/tools/idea/resources/aar/ProtoStyledStringDecoderTest.java"}, "test_case": {"identifier": "testRawXmlValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRawXmlValue() throws Exception {\n    StyledString.Builder builder = StyledString.newBuilder();\n    TextFormat.merge(STYLED_STRING_PROTO, ExtensionRegistry.getEmptyRegistry(), builder);\n    StyledString styledString = builder.build();\n    assertEquals(STYLED_STRING_XML, ProtoStyledStringDecoder.getRawXmlValue(styledString));\n  }", "signature": "void testRawXmlValue()", "full_signature": "@Test public void testRawXmlValue()", "class_method_signature": "ProtoStyledStringDecoderTest.testRawXmlValue()", "testcase": true, "constructor": false, "invocations": ["newBuilder", "merge", "getEmptyRegistry", "build", "assertEquals", "getRawXmlValue"]}, "focal_class": {"identifier": "ProtoStyledStringDecoder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getRawXmlValue", "parameters": "(@NotNull Resources.StyledString styledStringMsg)", "modifiers": "@NotNull public static", "return": "String", "signature": "String getRawXmlValue(@NotNull Resources.StyledString styledStringMsg)", "full_signature": "@NotNull public static String getRawXmlValue(@NotNull Resources.StyledString styledStringMsg)", "class_method_signature": "ProtoStyledStringDecoder.getRawXmlValue(@NotNull Resources.StyledString styledStringMsg)", "testcase": false, "constructor": false}, {"identifier": "indexOfOrEnd", "parameters": "(@NotNull String str, char ch, int fromIndex)", "modifiers": "private static", "return": "int", "signature": "int indexOfOrEnd(@NotNull String str, char ch, int fromIndex)", "full_signature": "private static int indexOfOrEnd(@NotNull String str, char ch, int fromIndex)", "class_method_signature": "ProtoStyledStringDecoder.indexOfOrEnd(@NotNull String str, char ch, int fromIndex)", "testcase": false, "constructor": false}, {"identifier": "ProtoStyledStringDecoder", "parameters": "()", "modifiers": "private", "return": "", "signature": " ProtoStyledStringDecoder()", "full_signature": "private  ProtoStyledStringDecoder()", "class_method_signature": "ProtoStyledStringDecoder.ProtoStyledStringDecoder()", "testcase": false, "constructor": true}], "file": "resources-base/src/com/android/tools/idea/resources/aar/ProtoStyledStringDecoder.java"}, "focal_method": {"identifier": "getRawXmlValue", "parameters": "(@NotNull Resources.StyledString styledStringMsg)", "modifiers": "@NotNull public static", "return": "String", "body": "@NotNull\n  public static String getRawXmlValue(@NotNull Resources.StyledString styledStringMsg) {\n    String text = styledStringMsg.getValue();\n    StringBuilder xmlValue = new StringBuilder(text.length() * 2);\n    List<Resources.StyledString.Span> spanList = styledStringMsg.getSpanList();\n    List<Resources.StyledString.Span> spanStack = new ArrayList<>(spanList.size());\n\n    int offset = 0;\n    for (int i = 0; i <= styledStringMsg.getSpanCount(); i++) {\n      int oldOffset = offset;\n      Resources.StyledString.Span spanMsg;\n      if (i < styledStringMsg.getSpanCount()) {\n        spanMsg = styledStringMsg.getSpan(i);\n        offset = spanMsg.getFirstChar();\n      } else {\n        spanMsg = null;\n        offset = text.length();\n      }\n      // Check if there are any tags that need to be closed.\n      while (!spanStack.isEmpty() && spanStack.get(spanStack.size() - 1).getLastChar() < offset) {\n        Resources.StyledString.Span span = spanStack.remove(spanStack.size() - 1);\n        int spanEnd = span.getLastChar() + 1;\n        if (spanEnd > oldOffset) {\n          XmlUtils.appendXmlTextValue(xmlValue, text, oldOffset, spanEnd);\n          oldOffset = spanEnd;\n        }\n        String tagText = span.getTag();\n        int tagEnd = indexOfOrEnd(tagText, ';', 0);\n        // Write the closing tag.\n        xmlValue.append(\"</\").append(tagText, 0, tagEnd).append('>');\n      }\n      if (offset >= oldOffset) {\n        // Copy text between tags.\n        XmlUtils.appendXmlTextValue(xmlValue, text, oldOffset, offset);\n        // Start a new tag.\n        if (spanMsg != null) {\n          String tagText = spanMsg.getTag();\n          int pos = indexOfOrEnd(tagText, ';', 0);\n          if (pos != 0) {\n            spanStack.add(spanMsg);\n            xmlValue.append('<').append(tagText, 0, pos);\n            while (pos < tagText.length()) {\n              pos++;\n              int nextPos = indexOfOrEnd(tagText, ';', pos);\n              int nameEnd = tagText.indexOf('=', pos);\n              if (nameEnd > pos && nameEnd < nextPos) {\n                xmlValue.append(' ');\n                xmlValue.append(tagText, pos, nameEnd + 1);\n                xmlValue.append('\"');\n                // Attribute values in the proto message are not escaped. Append with escaping.\n                XmlUtils.appendXmlAttributeValue(xmlValue, tagText, nameEnd + 1, nextPos);\n                xmlValue.append('\"');\n              }\n              pos = nextPos;\n            }\n            xmlValue.append('>');\n          }\n        }\n      }\n    }\n    return xmlValue.toString();\n  }", "signature": "String getRawXmlValue(@NotNull Resources.StyledString styledStringMsg)", "full_signature": "@NotNull public static String getRawXmlValue(@NotNull Resources.StyledString styledStringMsg)", "class_method_signature": "ProtoStyledStringDecoder.getRawXmlValue(@NotNull Resources.StyledString styledStringMsg)", "testcase": false, "constructor": false, "invocations": ["getValue", "length", "getSpanList", "size", "getSpanCount", "getSpanCount", "getSpan", "getFirstChar", "length", "isEmpty", "getLastChar", "get", "size", "remove", "size", "getLastChar", "appendXmlTextValue", "getTag", "indexOfOrEnd", "append", "append", "append", "appendXmlTextValue", "getTag", "indexOfOrEnd", "add", "append", "append", "length", "indexOfOrEnd", "indexOf", "append", "append", "append", "appendXmlAttributeValue", "append", "append", "toString"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}