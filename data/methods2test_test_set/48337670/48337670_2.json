{"test_class": {"identifier": "AudioServletTest", "superclass": "extends AbstractAudioServletTest", "interfaces": "", "fields": [{"original_string": "private static final String MEDIA_TYPE_AUDIO_WAV = \"audio/wav\";", "modifier": "private static final", "type": "String", "declarator": "MEDIA_TYPE_AUDIO_WAV = \"audio/wav\"", "var_name": "MEDIA_TYPE_AUDIO_WAV"}, {"original_string": "private static final String MEDIA_TYPE_AUDIO_OGG = \"audio/ogg\";", "modifier": "private static final", "type": "String", "declarator": "MEDIA_TYPE_AUDIO_OGG = \"audio/ogg\"", "var_name": "MEDIA_TYPE_AUDIO_OGG"}, {"original_string": "private static final String MEDIA_TYPE_AUDIO_MPEG = \"audio/mpeg\";", "modifier": "private static final", "type": "String", "declarator": "MEDIA_TYPE_AUDIO_MPEG = \"audio/mpeg\"", "var_name": "MEDIA_TYPE_AUDIO_MPEG"}, {"original_string": "private final byte[] testByteArray = new byte[] { 0, 1, 2 };", "modifier": "private final", "type": "byte[]", "declarator": "testByteArray = new byte[] { 0, 1, 2 }", "var_name": "testByteArray"}], "file": "bundles/org.openhab.core.audio/src/test/java/org/openhab/core/audio/internal/AudioServletTest.java"}, "test_case": {"identifier": "requestToMultitimeStreamCannotBeDoneAfterTheTimeoutOfTheStreamHasExipred", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void requestToMultitimeStreamCannotBeDoneAfterTheTimeoutOfTheStreamHasExipred() throws Exception {\n        final int streamTimeout = 1;\n\n        AudioStream audioStream = getByteArrayAudioStream(testByteArray, AudioFormat.CONTAINER_NONE,\n                AudioFormat.CODEC_MP3);\n\n        final long beg = System.currentTimeMillis();\n\n        String url = serveStream(audioStream, streamTimeout);\n\n        Request request = getHttpRequest(url);\n\n        ContentResponse response = request.send();\n\n        final long end = System.currentTimeMillis();\n\n        if (response.getStatus() == HttpStatus.NOT_FOUND_404) {\n            assertThat(\"Response status 404 is only allowed if streamTimeout is exceeded.\",\n                    TimeUnit.MILLISECONDS.toSeconds(end - beg), greaterThan((long) streamTimeout));\n        } else {\n            assertThat(\"The response status was not as expected\", response.getStatus(), is(HttpStatus.OK_200));\n            assertThat(\"The response content was not as expected\", response.getContent(), is(testByteArray));\n            assertThat(\"The response media type was not as expected\", response.getMediaType(),\n                    is(MEDIA_TYPE_AUDIO_MPEG));\n\n            assertThat(\"The audio stream was not added to the multitime streams\",\n                    audioServlet.getMultiTimeStreams().containsValue(audioStream), is(true));\n        }\n\n        waitForAssert(() -> {\n            try {\n                request.send();\n            } catch (Exception e) {\n                throw new IllegalStateException(e);\n            }\n            assertThat(\"The audio stream was not removed from multitime streams\",\n                    audioServlet.getMultiTimeStreams().containsValue(audioStream), is(false));\n        });\n\n        response = request.send();\n        assertThat(\"The response status was not as expected\", response.getStatus(), is(HttpStatus.NOT_FOUND_404));\n    }", "signature": "void requestToMultitimeStreamCannotBeDoneAfterTheTimeoutOfTheStreamHasExipred()", "full_signature": "@Test public void requestToMultitimeStreamCannotBeDoneAfterTheTimeoutOfTheStreamHasExipred()", "class_method_signature": "AudioServletTest.requestToMultitimeStreamCannotBeDoneAfterTheTimeoutOfTheStreamHasExipred()", "testcase": true, "constructor": false, "invocations": ["getByteArrayAudioStream", "currentTimeMillis", "serveStream", "getHttpRequest", "send", "currentTimeMillis", "getStatus", "assertThat", "toSeconds", "greaterThan", "assertThat", "getStatus", "is", "assertThat", "getContent", "is", "assertThat", "getMediaType", "is", "assertThat", "containsValue", "getMultiTimeStreams", "is", "waitForAssert", "send", "assertThat", "containsValue", "getMultiTimeStreams", "is", "send", "assertThat", "getStatus", "is"]}, "focal_class": {"identifier": "AudioServlet", "superclass": "extends SmartHomeServlet", "interfaces": "implements AudioHTTPServer", "fields": [{"original_string": "private static final long serialVersionUID = -3364664035854567854L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -3364664035854567854L", "var_name": "serialVersionUID"}, {"original_string": "private static final String SERVLET_NAME = \"/audio\";", "modifier": "private static final", "type": "String", "declarator": "SERVLET_NAME = \"/audio\"", "var_name": "SERVLET_NAME"}, {"original_string": "private final Map<String, AudioStream> oneTimeStreams = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, AudioStream>", "declarator": "oneTimeStreams = new ConcurrentHashMap<>()", "var_name": "oneTimeStreams"}, {"original_string": "private final Map<String, FixedLengthAudioStream> multiTimeStreams = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, FixedLengthAudioStream>", "declarator": "multiTimeStreams = new ConcurrentHashMap<>()", "var_name": "multiTimeStreams"}, {"original_string": "private final Map<String, Long> streamTimeouts = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, Long>", "declarator": "streamTimeouts = new ConcurrentHashMap<>()", "var_name": "streamTimeouts"}], "methods": [{"identifier": "AudioServlet", "parameters": "(final @Reference HttpService httpService, final @Reference HttpContext httpContext)", "modifiers": "@Activate public", "return": "", "signature": " AudioServlet(final @Reference HttpService httpService, final @Reference HttpContext httpContext)", "full_signature": "@Activate public  AudioServlet(final @Reference HttpService httpService, final @Reference HttpContext httpContext)", "class_method_signature": "AudioServlet.AudioServlet(final @Reference HttpService httpService, final @Reference HttpContext httpContext)", "testcase": false, "constructor": true}, {"identifier": "activate", "parameters": "()", "modifiers": "@Activate protected", "return": "void", "signature": "void activate()", "full_signature": "@Activate protected void activate()", "class_method_signature": "AudioServlet.activate()", "testcase": false, "constructor": false}, {"identifier": "deactivate", "parameters": "()", "modifiers": "@Deactivate protected", "return": "void", "signature": "void deactivate()", "full_signature": "@Deactivate protected void deactivate()", "class_method_signature": "AudioServlet.deactivate()", "testcase": false, "constructor": false}, {"identifier": "prepareInputStream", "parameters": "(final String streamId, final HttpServletResponse resp)", "modifiers": "private @Nullable", "return": "InputStream", "signature": "InputStream prepareInputStream(final String streamId, final HttpServletResponse resp)", "full_signature": "private @Nullable InputStream prepareInputStream(final String streamId, final HttpServletResponse resp)", "class_method_signature": "AudioServlet.prepareInputStream(final String streamId, final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "substringAfterLast", "parameters": "(String str, String separator)", "modifiers": "private", "return": "String", "signature": "String substringAfterLast(String str, String separator)", "full_signature": "private String substringAfterLast(String str, String separator)", "class_method_signature": "AudioServlet.substringAfterLast(String str, String separator)", "testcase": false, "constructor": false}, {"identifier": "substringBefore", "parameters": "(String str, String separator)", "modifiers": "private", "return": "String", "signature": "String substringBefore(String str, String separator)", "full_signature": "private String substringBefore(String str, String separator)", "class_method_signature": "AudioServlet.substringBefore(String str, String separator)", "testcase": false, "constructor": false}, {"identifier": "doGet", "parameters": "(@NonNullByDefault({}) HttpServletRequest req, @NonNullByDefault({}) HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(@NonNullByDefault({}) HttpServletRequest req, @NonNullByDefault({}) HttpServletResponse resp)", "full_signature": "@Override protected void doGet(@NonNullByDefault({}) HttpServletRequest req, @NonNullByDefault({}) HttpServletResponse resp)", "class_method_signature": "AudioServlet.doGet(@NonNullByDefault({}) HttpServletRequest req, @NonNullByDefault({}) HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "removeTimedOutStreams", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void removeTimedOutStreams()", "full_signature": "private synchronized void removeTimedOutStreams()", "class_method_signature": "AudioServlet.removeTimedOutStreams()", "testcase": false, "constructor": false}, {"identifier": "serve", "parameters": "(AudioStream stream)", "modifiers": "@Override public", "return": "String", "signature": "String serve(AudioStream stream)", "full_signature": "@Override public String serve(AudioStream stream)", "class_method_signature": "AudioServlet.serve(AudioStream stream)", "testcase": false, "constructor": false}, {"identifier": "serve", "parameters": "(FixedLengthAudioStream stream, int seconds)", "modifiers": "@Override public", "return": "String", "signature": "String serve(FixedLengthAudioStream stream, int seconds)", "full_signature": "@Override public String serve(FixedLengthAudioStream stream, int seconds)", "class_method_signature": "AudioServlet.serve(FixedLengthAudioStream stream, int seconds)", "testcase": false, "constructor": false}, {"identifier": "getMultiTimeStreams", "parameters": "()", "modifiers": "", "return": "Map<String, FixedLengthAudioStream>", "signature": "Map<String, FixedLengthAudioStream> getMultiTimeStreams()", "full_signature": " Map<String, FixedLengthAudioStream> getMultiTimeStreams()", "class_method_signature": "AudioServlet.getMultiTimeStreams()", "testcase": false, "constructor": false}, {"identifier": "getRelativeURL", "parameters": "(String streamId)", "modifiers": "private", "return": "String", "signature": "String getRelativeURL(String streamId)", "full_signature": "private String getRelativeURL(String streamId)", "class_method_signature": "AudioServlet.getRelativeURL(String streamId)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/AudioServlet.java"}, "focal_method": {"identifier": "getMultiTimeStreams", "parameters": "()", "modifiers": "", "return": "Map<String, FixedLengthAudioStream>", "body": "Map<String, FixedLengthAudioStream> getMultiTimeStreams() {\n        return Collections.unmodifiableMap(multiTimeStreams);\n    }", "signature": "Map<String, FixedLengthAudioStream> getMultiTimeStreams()", "full_signature": " Map<String, FixedLengthAudioStream> getMultiTimeStreams()", "class_method_signature": "AudioServlet.getMultiTimeStreams()", "testcase": false, "constructor": false, "invocations": ["unmodifiableMap"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}