{"test_class": {"identifier": "X25519Test", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/X25519Test.java"}, "test_case": {"identifier": "testComputeSharedSecretWithRfcIteration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testComputeSharedSecretWithRfcIteration() throws Exception {\n    byte[] k = new byte[32];\n    k[0] = 9;\n    byte[] prevK = k;\n    k = X25519.computeSharedSecret(k, prevK);\n    assertEquals(\n        \"422c8e7a6227d7bca1350b3e2bb7279f7897b87bb6854b783c60e80311ae3079\", TestUtil.hexEncode(k));\n    for (int i = 0; i < 999; i++) {\n      byte[] tmp = k;\n      k = X25519.computeSharedSecret(k, prevK);\n      prevK = tmp;\n    }\n    assertEquals(\n        \"684cf59ba83309552800ef566f2f4d3c1c3887c49360e3875f2eb94d99532c51\", TestUtil.hexEncode(k));\n    // Omitting 1M iteration to limit the test runtime.\n  }", "signature": "void testComputeSharedSecretWithRfcIteration()", "full_signature": "@Test public void testComputeSharedSecretWithRfcIteration()", "class_method_signature": "X25519Test.testComputeSharedSecretWithRfcIteration()", "testcase": true, "constructor": false, "invocations": ["computeSharedSecret", "assertEquals", "hexEncode", "computeSharedSecret", "assertEquals", "hexEncode"]}, "focal_class": {"identifier": "X25519", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "generatePrivateKey", "parameters": "()", "modifiers": "@SuppressWarnings(\"NarrowingCompoundAssignment\") public static", "return": "byte[]", "signature": "byte[] generatePrivateKey()", "full_signature": "@SuppressWarnings(\"NarrowingCompoundAssignment\") public static byte[] generatePrivateKey()", "class_method_signature": "X25519.generatePrivateKey()", "testcase": false, "constructor": false}, {"identifier": "computeSharedSecret", "parameters": "(byte[] privateKey, byte[] peersPublicValue)", "modifiers": "@SuppressWarnings(\"NarrowingCompoundAssignment\") public static", "return": "byte[]", "signature": "byte[] computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)", "full_signature": "@SuppressWarnings(\"NarrowingCompoundAssignment\") public static byte[] computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)", "class_method_signature": "X25519.computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)", "testcase": false, "constructor": false}, {"identifier": "publicFromPrivate", "parameters": "(byte[] privateKey)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] publicFromPrivate(byte[] privateKey)", "full_signature": "public static byte[] publicFromPrivate(byte[] privateKey)", "class_method_signature": "X25519.publicFromPrivate(byte[] privateKey)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/X25519.java"}, "focal_method": {"identifier": "computeSharedSecret", "parameters": "(byte[] privateKey, byte[] peersPublicValue)", "modifiers": "@SuppressWarnings(\"NarrowingCompoundAssignment\") public static", "return": "byte[]", "body": "@SuppressWarnings(\"NarrowingCompoundAssignment\")\n  public static byte[] computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)\n      throws InvalidKeyException {\n    if (privateKey.length != Field25519.FIELD_LEN) {\n      throw new InvalidKeyException(\"Private key must have 32 bytes.\");\n    }\n    long[] x = new long[Field25519.LIMB_CNT + 1];\n\n    byte[] e = Arrays.copyOf(privateKey, Field25519.FIELD_LEN);\n    e[0] &= 248;\n    e[31] &= 127;\n    e[31] |= 64;\n\n    Curve25519.curveMult(x, e, peersPublicValue);\n    return Field25519.contract(x);\n  }", "signature": "byte[] computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)", "full_signature": "@SuppressWarnings(\"NarrowingCompoundAssignment\") public static byte[] computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)", "class_method_signature": "X25519.computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)", "testcase": false, "constructor": false, "invocations": ["copyOf", "curveMult", "contract"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}