{"test_class": {"identifier": "RecordTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private long timestamp;", "modifier": "private", "type": "long", "declarator": "timestamp", "var_name": "timestamp"}, {"original_string": "private ByteBuffer key;", "modifier": "private", "type": "ByteBuffer", "declarator": "key", "var_name": "key"}, {"original_string": "private ByteBuffer value;", "modifier": "private", "type": "ByteBuffer", "declarator": "value", "var_name": "value"}, {"original_string": "private CompressionType compression;", "modifier": "private", "type": "CompressionType", "declarator": "compression", "var_name": "compression"}, {"original_string": "private Record record;", "modifier": "private", "type": "Record", "declarator": "record", "var_name": "record"}], "file": "clients/src/test/java/org/apache/kafka/common/record/RecordTest.java"}, "test_case": {"identifier": "testChecksum", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testChecksum() {\n        assertEquals(record.checksum(), record.computeChecksum());\n        assertEquals(record.checksum(), Record.computeChecksum(\n            this.timestamp,\n            this.key == null ? null : this.key.array(),\n            this.value == null ? null : this.value.array(),\n            this.compression, 0, -1));\n        assertTrue(record.isValid());\n        for (int i = Record.CRC_OFFSET + Record.CRC_LENGTH; i < record.size(); i++) {\n            Record copy = copyOf(record);\n            copy.buffer().put(i, (byte) 69);\n            assertFalse(copy.isValid());\n            try {\n                copy.ensureValid();\n                fail(\"Should fail the above test.\");\n            } catch (InvalidRecordException e) {\n                // this is good\n            }\n        }\n    }", "signature": "void testChecksum()", "full_signature": "@Test public void testChecksum()", "class_method_signature": "RecordTest.testChecksum()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "checksum", "computeChecksum", "assertEquals", "checksum", "computeChecksum", "array", "array", "assertTrue", "isValid", "size", "copyOf", "put", "buffer", "assertFalse", "isValid", "ensureValid", "fail"]}, "focal_class": {"identifier": "Record", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int CRC_OFFSET = 0;", "modifier": "public static final", "type": "int", "declarator": "CRC_OFFSET = 0", "var_name": "CRC_OFFSET"}, {"original_string": "public static final int CRC_LENGTH = 4;", "modifier": "public static final", "type": "int", "declarator": "CRC_LENGTH = 4", "var_name": "CRC_LENGTH"}, {"original_string": "public static final int MAGIC_OFFSET = CRC_OFFSET + CRC_LENGTH;", "modifier": "public static final", "type": "int", "declarator": "MAGIC_OFFSET = CRC_OFFSET + CRC_LENGTH", "var_name": "MAGIC_OFFSET"}, {"original_string": "public static final int MAGIC_LENGTH = 1;", "modifier": "public static final", "type": "int", "declarator": "MAGIC_LENGTH = 1", "var_name": "MAGIC_LENGTH"}, {"original_string": "public static final int ATTRIBUTES_OFFSET = MAGIC_OFFSET + MAGIC_LENGTH;", "modifier": "public static final", "type": "int", "declarator": "ATTRIBUTES_OFFSET = MAGIC_OFFSET + MAGIC_LENGTH", "var_name": "ATTRIBUTES_OFFSET"}, {"original_string": "public static final int ATTRIBUTE_LENGTH = 1;", "modifier": "public static final", "type": "int", "declarator": "ATTRIBUTE_LENGTH = 1", "var_name": "ATTRIBUTE_LENGTH"}, {"original_string": "public static final int TIMESTAMP_OFFSET = ATTRIBUTES_OFFSET + ATTRIBUTE_LENGTH;", "modifier": "public static final", "type": "int", "declarator": "TIMESTAMP_OFFSET = ATTRIBUTES_OFFSET + ATTRIBUTE_LENGTH", "var_name": "TIMESTAMP_OFFSET"}, {"original_string": "public static final int TIMESTAMP_LENGTH = 8;", "modifier": "public static final", "type": "int", "declarator": "TIMESTAMP_LENGTH = 8", "var_name": "TIMESTAMP_LENGTH"}, {"original_string": "public static final int KEY_SIZE_OFFSET_V0 = ATTRIBUTES_OFFSET + ATTRIBUTE_LENGTH;", "modifier": "public static final", "type": "int", "declarator": "KEY_SIZE_OFFSET_V0 = ATTRIBUTES_OFFSET + ATTRIBUTE_LENGTH", "var_name": "KEY_SIZE_OFFSET_V0"}, {"original_string": "public static final int KEY_SIZE_OFFSET_V1 = TIMESTAMP_OFFSET + TIMESTAMP_LENGTH;", "modifier": "public static final", "type": "int", "declarator": "KEY_SIZE_OFFSET_V1 = TIMESTAMP_OFFSET + TIMESTAMP_LENGTH", "var_name": "KEY_SIZE_OFFSET_V1"}, {"original_string": "public static final int KEY_SIZE_LENGTH = 4;", "modifier": "public static final", "type": "int", "declarator": "KEY_SIZE_LENGTH = 4", "var_name": "KEY_SIZE_LENGTH"}, {"original_string": "public static final int KEY_OFFSET_V0 = KEY_SIZE_OFFSET_V0 + KEY_SIZE_LENGTH;", "modifier": "public static final", "type": "int", "declarator": "KEY_OFFSET_V0 = KEY_SIZE_OFFSET_V0 + KEY_SIZE_LENGTH", "var_name": "KEY_OFFSET_V0"}, {"original_string": "public static final int KEY_OFFSET_V1 = KEY_SIZE_OFFSET_V1 + KEY_SIZE_LENGTH;", "modifier": "public static final", "type": "int", "declarator": "KEY_OFFSET_V1 = KEY_SIZE_OFFSET_V1 + KEY_SIZE_LENGTH", "var_name": "KEY_OFFSET_V1"}, {"original_string": "public static final int VALUE_SIZE_LENGTH = 4;", "modifier": "public static final", "type": "int", "declarator": "VALUE_SIZE_LENGTH = 4", "var_name": "VALUE_SIZE_LENGTH"}, {"original_string": "public static final int HEADER_SIZE = CRC_LENGTH + MAGIC_LENGTH + ATTRIBUTE_LENGTH;", "modifier": "public static final", "type": "int", "declarator": "HEADER_SIZE = CRC_LENGTH + MAGIC_LENGTH + ATTRIBUTE_LENGTH", "var_name": "HEADER_SIZE"}, {"original_string": "public static final int RECORD_OVERHEAD = HEADER_SIZE + TIMESTAMP_LENGTH + KEY_SIZE_LENGTH + VALUE_SIZE_LENGTH;", "modifier": "public static final", "type": "int", "declarator": "RECORD_OVERHEAD = HEADER_SIZE + TIMESTAMP_LENGTH + KEY_SIZE_LENGTH + VALUE_SIZE_LENGTH", "var_name": "RECORD_OVERHEAD"}, {"original_string": "public static final byte MAGIC_VALUE_V0 = 0;", "modifier": "public static final", "type": "byte", "declarator": "MAGIC_VALUE_V0 = 0", "var_name": "MAGIC_VALUE_V0"}, {"original_string": "public static final byte MAGIC_VALUE_V1 = 1;", "modifier": "public static final", "type": "byte", "declarator": "MAGIC_VALUE_V1 = 1", "var_name": "MAGIC_VALUE_V1"}, {"original_string": "public static final byte CURRENT_MAGIC_VALUE = MAGIC_VALUE_V1;", "modifier": "public static final", "type": "byte", "declarator": "CURRENT_MAGIC_VALUE = MAGIC_VALUE_V1", "var_name": "CURRENT_MAGIC_VALUE"}, {"original_string": "public static final int COMPRESSION_CODEC_MASK = 0x07;", "modifier": "public static final", "type": "int", "declarator": "COMPRESSION_CODEC_MASK = 0x07", "var_name": "COMPRESSION_CODEC_MASK"}, {"original_string": "public static final byte TIMESTAMP_TYPE_MASK = 0x08;", "modifier": "public static final", "type": "byte", "declarator": "TIMESTAMP_TYPE_MASK = 0x08", "var_name": "TIMESTAMP_TYPE_MASK"}, {"original_string": "public static final int TIMESTAMP_TYPE_ATTRIBUTE_OFFSET = 3;", "modifier": "public static final", "type": "int", "declarator": "TIMESTAMP_TYPE_ATTRIBUTE_OFFSET = 3", "var_name": "TIMESTAMP_TYPE_ATTRIBUTE_OFFSET"}, {"original_string": "public static final int NO_COMPRESSION = 0;", "modifier": "public static final", "type": "int", "declarator": "NO_COMPRESSION = 0", "var_name": "NO_COMPRESSION"}, {"original_string": "public static final long NO_TIMESTAMP = -1L;", "modifier": "public static final", "type": "long", "declarator": "NO_TIMESTAMP = -1L", "var_name": "NO_TIMESTAMP"}, {"original_string": "private final ByteBuffer buffer;", "modifier": "private final", "type": "ByteBuffer", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "private final Long wrapperRecordTimestamp;", "modifier": "private final", "type": "Long", "declarator": "wrapperRecordTimestamp", "var_name": "wrapperRecordTimestamp"}, {"original_string": "private final TimestampType wrapperRecordTimestampType;", "modifier": "private final", "type": "TimestampType", "declarator": "wrapperRecordTimestampType", "var_name": "wrapperRecordTimestampType"}], "methods": [{"identifier": "Record", "parameters": "(ByteBuffer buffer)", "modifiers": "public", "return": "", "signature": " Record(ByteBuffer buffer)", "full_signature": "public  Record(ByteBuffer buffer)", "class_method_signature": "Record.Record(ByteBuffer buffer)", "testcase": false, "constructor": true}, {"identifier": "Record", "parameters": "(ByteBuffer buffer, Long wrapperRecordTimestamp, TimestampType wrapperRecordTimestampType)", "modifiers": "", "return": "", "signature": " Record(ByteBuffer buffer, Long wrapperRecordTimestamp, TimestampType wrapperRecordTimestampType)", "full_signature": "  Record(ByteBuffer buffer, Long wrapperRecordTimestamp, TimestampType wrapperRecordTimestampType)", "class_method_signature": "Record.Record(ByteBuffer buffer, Long wrapperRecordTimestamp, TimestampType wrapperRecordTimestampType)", "testcase": false, "constructor": true}, {"identifier": "Record", "parameters": "(long timestamp, byte[] key, byte[] value, CompressionType type, int valueOffset, int valueSize)", "modifiers": "public", "return": "", "signature": " Record(long timestamp, byte[] key, byte[] value, CompressionType type, int valueOffset, int valueSize)", "full_signature": "public  Record(long timestamp, byte[] key, byte[] value, CompressionType type, int valueOffset, int valueSize)", "class_method_signature": "Record.Record(long timestamp, byte[] key, byte[] value, CompressionType type, int valueOffset, int valueSize)", "testcase": false, "constructor": true}, {"identifier": "Record", "parameters": "(long timestamp, byte[] key, byte[] value, CompressionType type)", "modifiers": "public", "return": "", "signature": " Record(long timestamp, byte[] key, byte[] value, CompressionType type)", "full_signature": "public  Record(long timestamp, byte[] key, byte[] value, CompressionType type)", "class_method_signature": "Record.Record(long timestamp, byte[] key, byte[] value, CompressionType type)", "testcase": false, "constructor": true}, {"identifier": "Record", "parameters": "(long timestamp, byte[] value, CompressionType type)", "modifiers": "public", "return": "", "signature": " Record(long timestamp, byte[] value, CompressionType type)", "full_signature": "public  Record(long timestamp, byte[] value, CompressionType type)", "class_method_signature": "Record.Record(long timestamp, byte[] value, CompressionType type)", "testcase": false, "constructor": true}, {"identifier": "Record", "parameters": "(long timestamp, byte[] key, byte[] value)", "modifiers": "public", "return": "", "signature": " Record(long timestamp, byte[] key, byte[] value)", "full_signature": "public  Record(long timestamp, byte[] key, byte[] value)", "class_method_signature": "Record.Record(long timestamp, byte[] key, byte[] value)", "testcase": false, "constructor": true}, {"identifier": "Record", "parameters": "(long timestamp, byte[] value)", "modifiers": "public", "return": "", "signature": " Record(long timestamp, byte[] value)", "full_signature": "public  Record(long timestamp, byte[] value)", "class_method_signature": "Record.Record(long timestamp, byte[] value)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(ByteBuffer buffer, long timestamp, byte[] key, byte[] value, CompressionType type, int valueOffset, int valueSize)", "modifiers": "public static", "return": "void", "signature": "void write(ByteBuffer buffer, long timestamp, byte[] key, byte[] value, CompressionType type, int valueOffset, int valueSize)", "full_signature": "public static void write(ByteBuffer buffer, long timestamp, byte[] key, byte[] value, CompressionType type, int valueOffset, int valueSize)", "class_method_signature": "Record.write(ByteBuffer buffer, long timestamp, byte[] key, byte[] value, CompressionType type, int valueOffset, int valueSize)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Compressor compressor, long crc, byte attributes, long timestamp, byte[] key, byte[] value, int valueOffset, int valueSize)", "modifiers": "public static", "return": "void", "signature": "void write(Compressor compressor, long crc, byte attributes, long timestamp, byte[] key, byte[] value, int valueOffset, int valueSize)", "full_signature": "public static void write(Compressor compressor, long crc, byte attributes, long timestamp, byte[] key, byte[] value, int valueOffset, int valueSize)", "class_method_signature": "Record.write(Compressor compressor, long crc, byte attributes, long timestamp, byte[] key, byte[] value, int valueOffset, int valueSize)", "testcase": false, "constructor": false}, {"identifier": "recordSize", "parameters": "(byte[] key, byte[] value)", "modifiers": "public static", "return": "int", "signature": "int recordSize(byte[] key, byte[] value)", "full_signature": "public static int recordSize(byte[] key, byte[] value)", "class_method_signature": "Record.recordSize(byte[] key, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "recordSize", "parameters": "(int keySize, int valueSize)", "modifiers": "public static", "return": "int", "signature": "int recordSize(int keySize, int valueSize)", "full_signature": "public static int recordSize(int keySize, int valueSize)", "class_method_signature": "Record.recordSize(int keySize, int valueSize)", "testcase": false, "constructor": false}, {"identifier": "buffer", "parameters": "()", "modifiers": "public", "return": "ByteBuffer", "signature": "ByteBuffer buffer()", "full_signature": "public ByteBuffer buffer()", "class_method_signature": "Record.buffer()", "testcase": false, "constructor": false}, {"identifier": "computeAttributes", "parameters": "(CompressionType type)", "modifiers": "public static", "return": "byte", "signature": "byte computeAttributes(CompressionType type)", "full_signature": "public static byte computeAttributes(CompressionType type)", "class_method_signature": "Record.computeAttributes(CompressionType type)", "testcase": false, "constructor": false}, {"identifier": "computeChecksum", "parameters": "(ByteBuffer buffer, int position, int size)", "modifiers": "public static", "return": "long", "signature": "long computeChecksum(ByteBuffer buffer, int position, int size)", "full_signature": "public static long computeChecksum(ByteBuffer buffer, int position, int size)", "class_method_signature": "Record.computeChecksum(ByteBuffer buffer, int position, int size)", "testcase": false, "constructor": false}, {"identifier": "computeChecksum", "parameters": "(long timestamp, byte[] key, byte[] value, CompressionType type, int valueOffset, int valueSize)", "modifiers": "public static", "return": "long", "signature": "long computeChecksum(long timestamp, byte[] key, byte[] value, CompressionType type, int valueOffset, int valueSize)", "full_signature": "public static long computeChecksum(long timestamp, byte[] key, byte[] value, CompressionType type, int valueOffset, int valueSize)", "class_method_signature": "Record.computeChecksum(long timestamp, byte[] key, byte[] value, CompressionType type, int valueOffset, int valueSize)", "testcase": false, "constructor": false}, {"identifier": "computeChecksum", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long computeChecksum()", "full_signature": "public long computeChecksum()", "class_method_signature": "Record.computeChecksum()", "testcase": false, "constructor": false}, {"identifier": "checksum", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long checksum()", "full_signature": "public long checksum()", "class_method_signature": "Record.checksum()", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isValid()", "full_signature": "public boolean isValid()", "class_method_signature": "Record.isValid()", "testcase": false, "constructor": false}, {"identifier": "ensureValid", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void ensureValid()", "full_signature": "public void ensureValid()", "class_method_signature": "Record.ensureValid()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "Record.size()", "testcase": false, "constructor": false}, {"identifier": "keySize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int keySize()", "full_signature": "public int keySize()", "class_method_signature": "Record.keySize()", "testcase": false, "constructor": false}, {"identifier": "hasKey", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasKey()", "full_signature": "public boolean hasKey()", "class_method_signature": "Record.hasKey()", "testcase": false, "constructor": false}, {"identifier": "valueSizeOffset", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int valueSizeOffset()", "full_signature": "private int valueSizeOffset()", "class_method_signature": "Record.valueSizeOffset()", "testcase": false, "constructor": false}, {"identifier": "valueSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int valueSize()", "full_signature": "public int valueSize()", "class_method_signature": "Record.valueSize()", "testcase": false, "constructor": false}, {"identifier": "magic", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte magic()", "full_signature": "public byte magic()", "class_method_signature": "Record.magic()", "testcase": false, "constructor": false}, {"identifier": "attributes", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte attributes()", "full_signature": "public byte attributes()", "class_method_signature": "Record.attributes()", "testcase": false, "constructor": false}, {"identifier": "timestamp", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long timestamp()", "full_signature": "public long timestamp()", "class_method_signature": "Record.timestamp()", "testcase": false, "constructor": false}, {"identifier": "timestampType", "parameters": "()", "modifiers": "public", "return": "TimestampType", "signature": "TimestampType timestampType()", "full_signature": "public TimestampType timestampType()", "class_method_signature": "Record.timestampType()", "testcase": false, "constructor": false}, {"identifier": "compressionType", "parameters": "()", "modifiers": "public", "return": "CompressionType", "signature": "CompressionType compressionType()", "full_signature": "public CompressionType compressionType()", "class_method_signature": "Record.compressionType()", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "()", "modifiers": "public", "return": "ByteBuffer", "signature": "ByteBuffer value()", "full_signature": "public ByteBuffer value()", "class_method_signature": "Record.value()", "testcase": false, "constructor": false}, {"identifier": "key", "parameters": "()", "modifiers": "public", "return": "ByteBuffer", "signature": "ByteBuffer key()", "full_signature": "public ByteBuffer key()", "class_method_signature": "Record.key()", "testcase": false, "constructor": false}, {"identifier": "sliceDelimited", "parameters": "(int start)", "modifiers": "private", "return": "ByteBuffer", "signature": "ByteBuffer sliceDelimited(int start)", "full_signature": "private ByteBuffer sliceDelimited(int start)", "class_method_signature": "Record.sliceDelimited(int start)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Record.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "public boolean equals(Object other)", "class_method_signature": "Record.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "Record.hashCode()", "testcase": false, "constructor": false}], "file": "clients/src/main/java/org/apache/kafka/common/record/Record.java"}, "focal_method": {"identifier": "checksum", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long checksum() {\n        return Utils.readUnsignedInt(buffer, CRC_OFFSET);\n    }", "signature": "long checksum()", "full_signature": "public long checksum()", "class_method_signature": "Record.checksum()", "testcase": false, "constructor": false, "invocations": ["readUnsignedInt"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}