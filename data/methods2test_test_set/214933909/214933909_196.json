{"test_class": {"identifier": "ServerServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ServerService serverService;", "modifier": "@Mock\n    private", "type": "ServerService", "declarator": "serverService", "var_name": "serverService"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/service/ServerServiceTest.java"}, "test_case": {"identifier": "findServerPageListTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findServerPageListTest() throws SQLException {\n        Paging<Server> paging = new Paging<>();\n        paging.setData(new Server());\n        Assert.assertTrue(serverService.findServerPageList(paging).getList().size() > 0);\n    }", "signature": "void findServerPageListTest()", "full_signature": "@Test public void findServerPageListTest()", "class_method_signature": "ServerServiceTest.findServerPageListTest()", "testcase": true, "constructor": false, "invocations": ["setData", "assertTrue", "size", "getList", "findServerPageList"]}, "focal_class": {"identifier": "ServerService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Message message;", "modifier": "@Autowired\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private ServerDao serverDao;", "modifier": "@Autowired\n    private", "type": "ServerDao", "declarator": "serverDao", "var_name": "serverDao"}, {"original_string": "@Autowired\n    private PermissionService permissionService;", "modifier": "@Autowired\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}], "methods": [{"identifier": "validatePermision", "parameters": "(LoginUser user, Errors errors)", "modifiers": "public", "return": "ValidatorChain", "signature": "ValidatorChain validatePermision(LoginUser user, Errors errors)", "full_signature": "public ValidatorChain validatePermision(LoginUser user, Errors errors)", "class_method_signature": "ServerService.validatePermision(LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "findServerPageList", "parameters": "(Paging<Server> paging)", "modifiers": "public", "return": "ListResult<ServerView>", "signature": "ListResult<ServerView> findServerPageList(Paging<Server> paging)", "full_signature": "public ListResult<ServerView> findServerPageList(Paging<Server> paging)", "class_method_signature": "ServerService.findServerPageList(Paging<Server> paging)", "testcase": false, "constructor": false}, {"identifier": "insertServer", "parameters": "(Server server)", "modifiers": "public", "return": "ServiceResult", "signature": "ServiceResult insertServer(Server server)", "full_signature": "public ServiceResult insertServer(Server server)", "class_method_signature": "ServerService.insertServer(Server server)", "testcase": false, "constructor": false}, {"identifier": "deleteServer", "parameters": "(Server server)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> deleteServer(Server server)", "full_signature": "public ServiceResult<String> deleteServer(Server server)", "class_method_signature": "ServerService.deleteServer(Server server)", "testcase": false, "constructor": false}, {"identifier": "addDataCenter", "parameters": "(LoginUser user, Server server)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> addDataCenter(LoginUser user, Server server)", "full_signature": "public ServiceResult<String> addDataCenter(LoginUser user, Server server)", "class_method_signature": "ServerService.addDataCenter(LoginUser user, Server server)", "testcase": false, "constructor": false}, {"identifier": "updateDataCenter", "parameters": "(LoginUser user, Server server)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> updateDataCenter(LoginUser user, Server server)", "full_signature": "public ServiceResult<String> updateDataCenter(LoginUser user, Server server)", "class_method_signature": "ServerService.updateDataCenter(LoginUser user, Server server)", "testcase": false, "constructor": false}, {"identifier": "deleteDataCenter", "parameters": "(LoginUser user, Server server)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> deleteDataCenter(LoginUser user, Server server)", "full_signature": "public ServiceResult<String> deleteDataCenter(LoginUser user, Server server)", "class_method_signature": "ServerService.deleteDataCenter(LoginUser user, Server server)", "testcase": false, "constructor": false}, {"identifier": "syncDataCenter", "parameters": "(LoginUser user, Server server)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> syncDataCenter(LoginUser user, Server server)", "full_signature": "public ServiceResult<String> syncDataCenter(LoginUser user, Server server)", "class_method_signature": "ServerService.syncDataCenter(LoginUser user, Server server)", "testcase": false, "constructor": false}, {"identifier": "getCheckData", "parameters": "(LoginUser user, Server server)", "modifiers": "public", "return": "List<ConfigDataResponse>", "signature": "List<ConfigDataResponse> getCheckData(LoginUser user, Server server)", "full_signature": "public List<ConfigDataResponse> getCheckData(LoginUser user, Server server)", "class_method_signature": "ServerService.getCheckData(LoginUser user, Server server)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/service/ServerService.java"}, "focal_method": {"identifier": "findServerPageList", "parameters": "(Paging<Server> paging)", "modifiers": "public", "return": "ListResult<ServerView>", "body": "public ListResult<ServerView> findServerPageList(Paging<Server> paging) throws SQLException {\n        Long count = serverDao.getServerTotalCount(paging);\n        return PagerUtil.find(count, paging.getPage(), paging.getPageSize(), () -> {\n            List<ServerView> list = serverDao.findServerPageList(paging);\n            if (CollectionUtils.isEmpty(list)) {\n                return Collections.emptyList();\n            }\n            return list;\n        });\n    }", "signature": "ListResult<ServerView> findServerPageList(Paging<Server> paging)", "full_signature": "public ListResult<ServerView> findServerPageList(Paging<Server> paging)", "class_method_signature": "ServerService.findServerPageList(Paging<Server> paging)", "testcase": false, "constructor": false, "invocations": ["getServerTotalCount", "find", "getPage", "getPageSize", "findServerPageList", "isEmpty", "emptyList"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}