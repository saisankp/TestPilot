{"test_class": {"identifier": "StreamExercisesTest", "superclass": "", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/insightfullogic/java8/examples/chapter3/StreamExercisesTest.java"}, "test_case": {"identifier": "mapExampleParallel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mapExampleParallel() {\n        Stream<Integer> parallelStream = Stream.of(1, 2, 3).parallel();\n\t\tList<Integer> values = StreamExercises.map(parallelStream, x -> x + 1);\n        assertEquals(Arrays.asList(2, 3, 4), values);\n    }", "signature": "void mapExampleParallel()", "full_signature": "@Test public void mapExampleParallel()", "class_method_signature": "StreamExercisesTest.mapExampleParallel()", "testcase": true, "constructor": false, "invocations": ["parallel", "of", "map", "assertEquals", "asList"]}, "focal_class": {"identifier": "StreamExercises", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "countBandMembersExternal", "parameters": "(List<Artist> artists)", "modifiers": "public static", "return": "int", "signature": "int countBandMembersExternal(List<Artist> artists)", "full_signature": "public static int countBandMembersExternal(List<Artist> artists)", "class_method_signature": "StreamExercises.countBandMembersExternal(List<Artist> artists)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(Stream<T> stream, Function<T, R> mapper)", "modifiers": "public static", "return": "List<R>", "signature": "List<R> map(Stream<T> stream, Function<T, R> mapper)", "full_signature": "public static List<R> map(Stream<T> stream, Function<T, R> mapper)", "class_method_signature": "StreamExercises.map(Stream<T> stream, Function<T, R> mapper)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/insightfullogic/java8/examples/chapter3/StreamExercises.java"}, "focal_method": {"identifier": "map", "parameters": "(Stream<T> stream, Function<T, R> mapper)", "modifiers": "public static", "return": "List<R>", "body": "public static <T, R> List<R> map(Stream<T> stream, Function<T, R> mapper) {\n        return stream.reduce(new ArrayList<>(), (acc, value) -> {\n        \t// Make copy of list (modifying acc would violate contract of reduce method) \n            ArrayList<R> result = new ArrayList<>();\n            result.addAll(acc);\n            result.add(mapper.apply(value));\n            return result;\n        }, (left, right) -> {\n            ArrayList<R> result = new ArrayList<>();\n            result.addAll(left);\n            result.addAll(right);\n            return result;\n        });\n    }", "signature": "List<R> map(Stream<T> stream, Function<T, R> mapper)", "full_signature": "public static List<R> map(Stream<T> stream, Function<T, R> mapper)", "class_method_signature": "StreamExercises.map(Stream<T> stream, Function<T, R> mapper)", "testcase": false, "constructor": false, "invocations": ["reduce", "addAll", "add", "apply", "addAll", "addAll"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}