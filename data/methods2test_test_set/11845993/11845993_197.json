{"test_class": {"identifier": "ElasticsearchReporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final TimeUnit DURATION_UNIT = TimeUnit.MICROSECONDS;", "modifier": "private static final", "type": "TimeUnit", "declarator": "DURATION_UNIT = TimeUnit.MICROSECONDS", "var_name": "DURATION_UNIT"}, {"original_string": "private static final double DURATION_FACTOR = 1.0 / DURATION_UNIT.toNanos(1);", "modifier": "private static final", "type": "double", "declarator": "DURATION_FACTOR = 1.0 / DURATION_UNIT.toNanos(1)", "var_name": "DURATION_FACTOR"}, {"original_string": "private ElasticsearchReporter elasticsearchReporter;", "modifier": "private", "type": "ElasticsearchReporter", "declarator": "elasticsearchReporter", "var_name": "elasticsearchReporter"}, {"original_string": "private long timestamp;", "modifier": "private", "type": "long", "declarator": "timestamp", "var_name": "timestamp"}, {"original_string": "private ByteArrayOutputStream out;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "out", "var_name": "out"}, {"original_string": "private Logger metricsLogger;", "modifier": "private", "type": "Logger", "declarator": "metricsLogger", "var_name": "metricsLogger"}, {"original_string": "private CorePlugin corePlugin;", "modifier": "private", "type": "CorePlugin", "declarator": "corePlugin", "var_name": "corePlugin"}, {"original_string": "private Metric2Registry registry;", "modifier": "private", "type": "Metric2Registry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private Clock clock;", "modifier": "private", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "file": "stagemonitor-core/src/test/java/org/stagemonitor/core/metrics/metrics2/ElasticsearchReporterTest.java"}, "test_case": {"identifier": "testReportToLog", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testReportToLog() throws Exception {\n\t\twhen(corePlugin.isOnlyLogElasticsearchMetricReports()).thenReturn(true);\n\n\t\telasticsearchReporter.reportMetrics(\n\t\t\t\tmetricNameMap(name(\"gauge\").build(), gauge(1)),\n\t\t\t\tmetricNameMap(Counter.class),\n\t\t\t\tmetricNameMap(Histogram.class),\n\t\t\t\tmetricNameMap(Meter.class),\n\t\t\t\tmetricNameMap(Timer.class));\n\n\t\tverify(metricsLogger).info(eq(String.format(\"{\\\"index\\\":{\\\"_index\\\":\\\"stagemonitor-metrics-%s\\\",\\\"_type\\\":\\\"metrics\\\"}}\\n\" +\n\t\t\t\t\"{\\\"@timestamp\\\":%d,\\\"name\\\":\\\"gauge\\\",\\\"app\\\":\\\"test\\\",\\\"value\\\":1.0}\\n\", StringUtils.getLogstashStyleDate(), timestamp)));\n\t}", "signature": "void testReportToLog()", "full_signature": "@Test public void testReportToLog()", "class_method_signature": "ElasticsearchReporterTest.testReportToLog()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isOnlyLogElasticsearchMetricReports", "reportMetrics", "metricNameMap", "build", "name", "gauge", "metricNameMap", "metricNameMap", "metricNameMap", "metricNameMap", "info", "verify", "eq", "format", "getLogstashStyleDate"]}, "focal_class": {"identifier": "ElasticsearchReporter", "superclass": "extends ScheduledMetrics2Reporter", "interfaces": "", "fields": [{"original_string": "public static final String STAGEMONITOR_METRICS_INDEX_PREFIX = \"stagemonitor-metrics-\";", "modifier": "public static final", "type": "String", "declarator": "STAGEMONITOR_METRICS_INDEX_PREFIX = \"stagemonitor-metrics-\"", "var_name": "STAGEMONITOR_METRICS_INDEX_PREFIX"}, {"original_string": "public static final String ES_METRICS_LOGGER = \"ElasticsearchMetrics\";", "modifier": "public static final", "type": "String", "declarator": "ES_METRICS_LOGGER = \"ElasticsearchMetrics\"", "var_name": "ES_METRICS_LOGGER"}, {"original_string": "private static final String METRICS_TYPE = \"metrics\";", "modifier": "private static final", "type": "String", "declarator": "METRICS_TYPE = \"metrics\"", "var_name": "METRICS_TYPE"}, {"original_string": "private static final MetricName reportingTimeMetricName = name(\"reporting_time\").tag(\"reporter\", \"elasticsearch\").build();", "modifier": "private static final", "type": "MetricName", "declarator": "reportingTimeMetricName = name(\"reporting_time\").tag(\"reporter\", \"elasticsearch\").build()", "var_name": "reportingTimeMetricName"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private final Logger elasticsearchMetricsLogger;", "modifier": "private final", "type": "Logger", "declarator": "elasticsearchMetricsLogger", "var_name": "elasticsearchMetricsLogger"}, {"original_string": "private final Map<String, String> globalTags;", "modifier": "private final", "type": "Map<String, String>", "declarator": "globalTags", "var_name": "globalTags"}, {"original_string": "private final CorePlugin corePlugin;", "modifier": "private final", "type": "CorePlugin", "declarator": "corePlugin", "var_name": "corePlugin"}, {"original_string": "private final HttpClient httpClient;", "modifier": "private final", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "private final JsonFactory jfactory = new JsonFactory();", "modifier": "private final", "type": "JsonFactory", "declarator": "jfactory = new JsonFactory()", "var_name": "jfactory"}, {"original_string": "private final Metric2RegistryModule metric2RegistryModule;", "modifier": "private final", "type": "Metric2RegistryModule", "declarator": "metric2RegistryModule", "var_name": "metric2RegistryModule"}, {"original_string": "private final ElasticsearchClient elasticsearchClient;", "modifier": "private final", "type": "ElasticsearchClient", "declarator": "elasticsearchClient", "var_name": "elasticsearchClient"}], "methods": [{"identifier": "forRegistry", "parameters": "(Metric2Registry registry, CorePlugin corePlugin)", "modifiers": "public static", "return": "ElasticsearchReporter.Builder", "signature": "ElasticsearchReporter.Builder forRegistry(Metric2Registry registry, CorePlugin corePlugin)", "full_signature": "public static ElasticsearchReporter.Builder forRegistry(Metric2Registry registry, CorePlugin corePlugin)", "class_method_signature": "ElasticsearchReporter.forRegistry(Metric2Registry registry, CorePlugin corePlugin)", "testcase": false, "constructor": false}, {"identifier": "ElasticsearchReporter", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "signature": " ElasticsearchReporter(Builder builder)", "full_signature": "private  ElasticsearchReporter(Builder builder)", "class_method_signature": "ElasticsearchReporter.ElasticsearchReporter(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "reportMetrics", "parameters": "(final Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  final Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  final Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  final Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  final Map<MetricName, Timer> timers)", "modifiers": "@Override public", "return": "void", "signature": "void reportMetrics(final Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  final Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  final Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  final Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  final Map<MetricName, Timer> timers)", "full_signature": "@Override public void reportMetrics(final Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  final Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  final Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  final Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  final Map<MetricName, Timer> timers)", "class_method_signature": "ElasticsearchReporter.reportMetrics(final Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  final Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  final Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  final Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  final Map<MetricName, Timer> timers)", "testcase": false, "constructor": false}, {"identifier": "reportMetrics", "parameters": "(Map<MetricName, Gauge> gauges, Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  Map<MetricName, Histogram> histograms, final Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  Map<MetricName, Timer> timers, OutputStream os, byte[] bulkActionBytes, long timestamp)", "modifiers": "public", "return": "void", "signature": "void reportMetrics(Map<MetricName, Gauge> gauges, Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  Map<MetricName, Histogram> histograms, final Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  Map<MetricName, Timer> timers, OutputStream os, byte[] bulkActionBytes, long timestamp)", "full_signature": "public void reportMetrics(Map<MetricName, Gauge> gauges, Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  Map<MetricName, Histogram> histograms, final Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  Map<MetricName, Timer> timers, OutputStream os, byte[] bulkActionBytes, long timestamp)", "class_method_signature": "ElasticsearchReporter.reportMetrics(Map<MetricName, Gauge> gauges, Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  Map<MetricName, Histogram> histograms, final Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  Map<MetricName, Timer> timers, OutputStream os, byte[] bulkActionBytes, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "reportMetric", "parameters": "(Map<MetricName, T> metrics, long timestamp, Metric2RegistryModule.ValueWriter<T> valueWriter,\n\t\t\t\t\t\t\t\t\t\t\t\t JsonGenerator jg, byte[] bulkActionBytes)", "modifiers": "private", "return": "void", "signature": "void reportMetric(Map<MetricName, T> metrics, long timestamp, Metric2RegistryModule.ValueWriter<T> valueWriter,\n\t\t\t\t\t\t\t\t\t\t\t\t JsonGenerator jg, byte[] bulkActionBytes)", "full_signature": "private void reportMetric(Map<MetricName, T> metrics, long timestamp, Metric2RegistryModule.ValueWriter<T> valueWriter,\n\t\t\t\t\t\t\t\t\t\t\t\t JsonGenerator jg, byte[] bulkActionBytes)", "class_method_signature": "ElasticsearchReporter.reportMetric(Map<MetricName, T> metrics, long timestamp, Metric2RegistryModule.ValueWriter<T> valueWriter,\n\t\t\t\t\t\t\t\t\t\t\t\t JsonGenerator jg, byte[] bulkActionBytes)", "testcase": false, "constructor": false}, {"identifier": "writeMap", "parameters": "(JsonGenerator jg, Map<String, String> map)", "modifiers": "private", "return": "void", "signature": "void writeMap(JsonGenerator jg, Map<String, String> map)", "full_signature": "private void writeMap(JsonGenerator jg, Map<String, String> map)", "class_method_signature": "ElasticsearchReporter.writeMap(JsonGenerator jg, Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "getTodaysIndexName", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getTodaysIndexName()", "full_signature": "public static String getTodaysIndexName()", "class_method_signature": "ElasticsearchReporter.getTodaysIndexName()", "testcase": false, "constructor": false}], "file": "stagemonitor-core/src/main/java/org/stagemonitor/core/metrics/metrics2/ElasticsearchReporter.java"}, "focal_method": {"identifier": "reportMetrics", "parameters": "(final Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  final Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  final Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  final Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  final Map<MetricName, Timer> timers)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void reportMetrics(final Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  final Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  final Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  final Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  final Map<MetricName, Timer> timers) {\n\n\t\tif (!corePlugin.isStagemonitorActive()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlong timestamp = clock.getTime();\n\n\t\tfinal Timer.Context time = registry.timer(reportingTimeMetricName).time();\n\t\tfinal MetricsOutputStreamHandler metricsOutputStreamHandler = new MetricsOutputStreamHandler(gauges, counters, histograms, meters, timers, timestamp);\n\t\tif (!corePlugin.isOnlyLogElasticsearchMetricReports()) {\n\t\t\tif (!elasticsearchClient.isElasticsearchAvailable()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfinal String url = corePlugin.getElasticsearchUrl() + \"/\" + getTodaysIndexName() + \"/\" + METRICS_TYPE + \"/_bulk\";\n\t\t\thttpClient.send(\"POST\", url, CONTENT_TYPE_JSON,\n\t\t\t\t\tmetricsOutputStreamHandler, NoopResponseHandler.INSTANCE);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tfinal ByteArrayOutputStream os = new ByteArrayOutputStream();\n\t\t\t\tmetricsOutputStreamHandler.withHttpURLConnection(os);\n\t\t\t\telasticsearchMetricsLogger.info(os.toString(\"UTF-8\"));\n\t\t\t} catch (IOException e) {\n\t\t\t\tlogger.warn(e.getMessage(), e);\n\t\t\t}\n\t\t}\n\t\ttime.stop();\n\t}", "signature": "void reportMetrics(final Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  final Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  final Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  final Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  final Map<MetricName, Timer> timers)", "full_signature": "@Override public void reportMetrics(final Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  final Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  final Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  final Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  final Map<MetricName, Timer> timers)", "class_method_signature": "ElasticsearchReporter.reportMetrics(final Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  final Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  final Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  final Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  final Map<MetricName, Timer> timers)", "testcase": false, "constructor": false, "invocations": ["isStagemonitorActive", "getTime", "time", "timer", "isOnlyLogElasticsearchMetricReports", "isElasticsearchAvailable", "getElasticsearchUrl", "getTodaysIndexName", "send", "withHttpURLConnection", "info", "toString", "warn", "getMessage", "stop"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}