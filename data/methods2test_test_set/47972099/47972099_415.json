{"test_class": {"identifier": "ClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PackagedProgram program;", "modifier": "private", "type": "PackagedProgram", "declarator": "program", "var_name": "program"}, {"original_string": "private Configuration config;", "modifier": "private", "type": "Configuration", "declarator": "config", "var_name": "config"}, {"original_string": "private ActorSystem jobManagerSystem;", "modifier": "private", "type": "ActorSystem", "declarator": "jobManagerSystem", "var_name": "jobManagerSystem"}, {"original_string": "private static final String ACCUMULATOR_NAME = \"test_accumulator\";", "modifier": "private static final", "type": "String", "declarator": "ACCUMULATOR_NAME = \"test_accumulator\"", "var_name": "ACCUMULATOR_NAME"}, {"original_string": "private static final String FAIL_MESSAGE = \"Invalid program should have thrown ProgramInvocationException.\";", "modifier": "private static final", "type": "String", "declarator": "FAIL_MESSAGE = \"Invalid program should have thrown ProgramInvocationException.\"", "var_name": "FAIL_MESSAGE"}], "file": "flink-clients/src/test/java/org/apache/flink/client/program/ClientTest.java"}, "test_case": {"identifier": "shouldSubmitToJobClientFails", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldSubmitToJobClientFails() {\n\t\ttry {\n\t\t\tjobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME());\n\n\t\t\tClient out = new Client(config);\n\n\t\t\ttry {\n\t\t\t\tout.runDetached(program.getPlanWithJars(), 1);\n\t\t\t\tfail(\"This should fail with an exception\");\n\t\t\t}\n\t\t\tcatch (ProgramInvocationException e) {\n\t\t\t\t// bam!\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tfail(\"wrong exception \" + e);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void shouldSubmitToJobClientFails()", "full_signature": "@Test public void shouldSubmitToJobClientFails()", "class_method_signature": "ClientTest.shouldSubmitToJobClientFails()", "testcase": true, "constructor": false, "invocations": ["actorOf", "create", "JOB_MANAGER_NAME", "runDetached", "getPlanWithJars", "fail", "fail", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "Client", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Client.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Client.class)", "var_name": "LOG"}, {"original_string": "final Optimizer compiler;", "modifier": "final", "type": "Optimizer", "declarator": "compiler", "var_name": "compiler"}, {"original_string": "private final ActorSystem actorSystem;", "modifier": "private final", "type": "ActorSystem", "declarator": "actorSystem", "var_name": "actorSystem"}, {"original_string": "private final Configuration config;", "modifier": "private final", "type": "Configuration", "declarator": "config", "var_name": "config"}, {"original_string": "private final FiniteDuration timeout;", "modifier": "private final", "type": "FiniteDuration", "declarator": "timeout", "var_name": "timeout"}, {"original_string": "private final FiniteDuration lookupTimeout;", "modifier": "private final", "type": "FiniteDuration", "declarator": "lookupTimeout", "var_name": "lookupTimeout"}, {"original_string": "private final int maxSlots;", "modifier": "private final", "type": "int", "declarator": "maxSlots", "var_name": "maxSlots"}, {"original_string": "private boolean printStatusDuringExecution = true;", "modifier": "private", "type": "boolean", "declarator": "printStatusDuringExecution = true", "var_name": "printStatusDuringExecution"}, {"original_string": "private JobID lastJobID;", "modifier": "private", "type": "JobID", "declarator": "lastJobID", "var_name": "lastJobID"}], "methods": [{"identifier": "Client", "parameters": "(Configuration config)", "modifiers": "public", "return": "", "signature": " Client(Configuration config)", "full_signature": "public  Client(Configuration config)", "class_method_signature": "Client.Client(Configuration config)", "testcase": false, "constructor": true}, {"identifier": "Client", "parameters": "(Configuration config, int maxSlots)", "modifiers": "public", "return": "", "signature": " Client(Configuration config, int maxSlots)", "full_signature": "public  Client(Configuration config, int maxSlots)", "class_method_signature": "Client.Client(Configuration config, int maxSlots)", "testcase": false, "constructor": true}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "Client.shutdown()", "testcase": false, "constructor": false}, {"identifier": "setPrintStatusDuringExecution", "parameters": "(boolean print)", "modifiers": "public", "return": "void", "signature": "void setPrintStatusDuringExecution(boolean print)", "full_signature": "public void setPrintStatusDuringExecution(boolean print)", "class_method_signature": "Client.setPrintStatusDuringExecution(boolean print)", "testcase": false, "constructor": false}, {"identifier": "getPrintStatusDuringExecution", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getPrintStatusDuringExecution()", "full_signature": "public boolean getPrintStatusDuringExecution()", "class_method_signature": "Client.getPrintStatusDuringExecution()", "testcase": false, "constructor": false}, {"identifier": "getMaxSlots", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxSlots()", "full_signature": "public int getMaxSlots()", "class_method_signature": "Client.getMaxSlots()", "testcase": false, "constructor": false}, {"identifier": "getOptimizedPlanAsJson", "parameters": "(Optimizer compiler, PackagedProgram prog, int parallelism)", "modifiers": "public static", "return": "String", "signature": "String getOptimizedPlanAsJson(Optimizer compiler, PackagedProgram prog, int parallelism)", "full_signature": "public static String getOptimizedPlanAsJson(Optimizer compiler, PackagedProgram prog, int parallelism)", "class_method_signature": "Client.getOptimizedPlanAsJson(Optimizer compiler, PackagedProgram prog, int parallelism)", "testcase": false, "constructor": false}, {"identifier": "getOptimizedPlan", "parameters": "(Optimizer compiler, PackagedProgram prog, int parallelism)", "modifiers": "public static", "return": "FlinkPlan", "signature": "FlinkPlan getOptimizedPlan(Optimizer compiler, PackagedProgram prog, int parallelism)", "full_signature": "public static FlinkPlan getOptimizedPlan(Optimizer compiler, PackagedProgram prog, int parallelism)", "class_method_signature": "Client.getOptimizedPlan(Optimizer compiler, PackagedProgram prog, int parallelism)", "testcase": false, "constructor": false}, {"identifier": "getOptimizedPlan", "parameters": "(Optimizer compiler, Plan p, int parallelism)", "modifiers": "public static", "return": "OptimizedPlan", "signature": "OptimizedPlan getOptimizedPlan(Optimizer compiler, Plan p, int parallelism)", "full_signature": "public static OptimizedPlan getOptimizedPlan(Optimizer compiler, Plan p, int parallelism)", "class_method_signature": "Client.getOptimizedPlan(Optimizer compiler, Plan p, int parallelism)", "testcase": false, "constructor": false}, {"identifier": "runBlocking", "parameters": "(PackagedProgram prog, int parallelism)", "modifiers": "public", "return": "JobSubmissionResult", "signature": "JobSubmissionResult runBlocking(PackagedProgram prog, int parallelism)", "full_signature": "public JobSubmissionResult runBlocking(PackagedProgram prog, int parallelism)", "class_method_signature": "Client.runBlocking(PackagedProgram prog, int parallelism)", "testcase": false, "constructor": false}, {"identifier": "runDetached", "parameters": "(PackagedProgram prog, int parallelism)", "modifiers": "public", "return": "JobSubmissionResult", "signature": "JobSubmissionResult runDetached(PackagedProgram prog, int parallelism)", "full_signature": "public JobSubmissionResult runDetached(PackagedProgram prog, int parallelism)", "class_method_signature": "Client.runDetached(PackagedProgram prog, int parallelism)", "testcase": false, "constructor": false}, {"identifier": "runBlocking", "parameters": "(JobWithJars program, int parallelism)", "modifiers": "public", "return": "JobExecutionResult", "signature": "JobExecutionResult runBlocking(JobWithJars program, int parallelism)", "full_signature": "public JobExecutionResult runBlocking(JobWithJars program, int parallelism)", "class_method_signature": "Client.runBlocking(JobWithJars program, int parallelism)", "testcase": false, "constructor": false}, {"identifier": "runBlocking", "parameters": "(JobWithJars program, int parallelism, String savepointPath)", "modifiers": "public", "return": "JobExecutionResult", "signature": "JobExecutionResult runBlocking(JobWithJars program, int parallelism, String savepointPath)", "full_signature": "public JobExecutionResult runBlocking(JobWithJars program, int parallelism, String savepointPath)", "class_method_signature": "Client.runBlocking(JobWithJars program, int parallelism, String savepointPath)", "testcase": false, "constructor": false}, {"identifier": "runDetached", "parameters": "(JobWithJars program, int parallelism)", "modifiers": "public", "return": "JobSubmissionResult", "signature": "JobSubmissionResult runDetached(JobWithJars program, int parallelism)", "full_signature": "public JobSubmissionResult runDetached(JobWithJars program, int parallelism)", "class_method_signature": "Client.runDetached(JobWithJars program, int parallelism)", "testcase": false, "constructor": false}, {"identifier": "runDetached", "parameters": "(JobWithJars program, int parallelism, String savepointPath)", "modifiers": "public", "return": "JobSubmissionResult", "signature": "JobSubmissionResult runDetached(JobWithJars program, int parallelism, String savepointPath)", "full_signature": "public JobSubmissionResult runDetached(JobWithJars program, int parallelism, String savepointPath)", "class_method_signature": "Client.runDetached(JobWithJars program, int parallelism, String savepointPath)", "testcase": false, "constructor": false}, {"identifier": "runBlocking", "parameters": "(\n\t\t\tFlinkPlan compiledPlan, List<URL> libraries, List<URL> classpaths, ClassLoader classLoader)", "modifiers": "public", "return": "JobExecutionResult", "signature": "JobExecutionResult runBlocking(\n\t\t\tFlinkPlan compiledPlan, List<URL> libraries, List<URL> classpaths, ClassLoader classLoader)", "full_signature": "public JobExecutionResult runBlocking(\n\t\t\tFlinkPlan compiledPlan, List<URL> libraries, List<URL> classpaths, ClassLoader classLoader)", "class_method_signature": "Client.runBlocking(\n\t\t\tFlinkPlan compiledPlan, List<URL> libraries, List<URL> classpaths, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "runBlocking", "parameters": "(FlinkPlan compiledPlan, List<URL> libraries, List<URL> classpaths,\n\t\t\tClassLoader classLoader, String savepointPath)", "modifiers": "public", "return": "JobExecutionResult", "signature": "JobExecutionResult runBlocking(FlinkPlan compiledPlan, List<URL> libraries, List<URL> classpaths,\n\t\t\tClassLoader classLoader, String savepointPath)", "full_signature": "public JobExecutionResult runBlocking(FlinkPlan compiledPlan, List<URL> libraries, List<URL> classpaths,\n\t\t\tClassLoader classLoader, String savepointPath)", "class_method_signature": "Client.runBlocking(FlinkPlan compiledPlan, List<URL> libraries, List<URL> classpaths,\n\t\t\tClassLoader classLoader, String savepointPath)", "testcase": false, "constructor": false}, {"identifier": "runDetached", "parameters": "(FlinkPlan compiledPlan, List<URL> libraries, List<URL> classpaths, ClassLoader classLoader)", "modifiers": "public", "return": "JobSubmissionResult", "signature": "JobSubmissionResult runDetached(FlinkPlan compiledPlan, List<URL> libraries, List<URL> classpaths, ClassLoader classLoader)", "full_signature": "public JobSubmissionResult runDetached(FlinkPlan compiledPlan, List<URL> libraries, List<URL> classpaths, ClassLoader classLoader)", "class_method_signature": "Client.runDetached(FlinkPlan compiledPlan, List<URL> libraries, List<URL> classpaths, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "runDetached", "parameters": "(FlinkPlan compiledPlan, List<URL> libraries, List<URL> classpaths,\n\t\t\tClassLoader classLoader, String savepointPath)", "modifiers": "public", "return": "JobSubmissionResult", "signature": "JobSubmissionResult runDetached(FlinkPlan compiledPlan, List<URL> libraries, List<URL> classpaths,\n\t\t\tClassLoader classLoader, String savepointPath)", "full_signature": "public JobSubmissionResult runDetached(FlinkPlan compiledPlan, List<URL> libraries, List<URL> classpaths,\n\t\t\tClassLoader classLoader, String savepointPath)", "class_method_signature": "Client.runDetached(FlinkPlan compiledPlan, List<URL> libraries, List<URL> classpaths,\n\t\t\tClassLoader classLoader, String savepointPath)", "testcase": false, "constructor": false}, {"identifier": "runBlocking", "parameters": "(JobGraph jobGraph, ClassLoader classLoader)", "modifiers": "public", "return": "JobExecutionResult", "signature": "JobExecutionResult runBlocking(JobGraph jobGraph, ClassLoader classLoader)", "full_signature": "public JobExecutionResult runBlocking(JobGraph jobGraph, ClassLoader classLoader)", "class_method_signature": "Client.runBlocking(JobGraph jobGraph, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "runDetached", "parameters": "(JobGraph jobGraph, ClassLoader classLoader)", "modifiers": "public", "return": "JobSubmissionResult", "signature": "JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader)", "full_signature": "public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader)", "class_method_signature": "Client.runDetached(JobGraph jobGraph, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "(JobID jobId)", "modifiers": "public", "return": "void", "signature": "void cancel(JobID jobId)", "full_signature": "public void cancel(JobID jobId)", "class_method_signature": "Client.cancel(JobID jobId)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "(final JobID jobId)", "modifiers": "public", "return": "void", "signature": "void stop(final JobID jobId)", "full_signature": "public void stop(final JobID jobId)", "class_method_signature": "Client.stop(final JobID jobId)", "testcase": false, "constructor": false}, {"identifier": "getAccumulators", "parameters": "(JobID jobID)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getAccumulators(JobID jobID)", "full_signature": "public Map<String, Object> getAccumulators(JobID jobID)", "class_method_signature": "Client.getAccumulators(JobID jobID)", "testcase": false, "constructor": false}, {"identifier": "getAccumulators", "parameters": "(JobID jobID, ClassLoader loader)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader)", "full_signature": "public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader)", "class_method_signature": "Client.getAccumulators(JobID jobID, ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "endSession", "parameters": "(JobID jobId)", "modifiers": "public", "return": "void", "signature": "void endSession(JobID jobId)", "full_signature": "public void endSession(JobID jobId)", "class_method_signature": "Client.endSession(JobID jobId)", "testcase": false, "constructor": false}, {"identifier": "endSessions", "parameters": "(List<JobID> jobIds)", "modifiers": "public", "return": "void", "signature": "void endSessions(List<JobID> jobIds)", "full_signature": "public void endSessions(List<JobID> jobIds)", "class_method_signature": "Client.endSessions(List<JobID> jobIds)", "testcase": false, "constructor": false}, {"identifier": "getOptimizedPlan", "parameters": "(Optimizer compiler, JobWithJars prog, int parallelism)", "modifiers": "private static", "return": "OptimizedPlan", "signature": "OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)", "full_signature": "private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)", "class_method_signature": "Client.getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)", "testcase": false, "constructor": false}, {"identifier": "getJobGraph", "parameters": "(PackagedProgram prog, FlinkPlan optPlan)", "modifiers": "public", "return": "JobGraph", "signature": "JobGraph getJobGraph(PackagedProgram prog, FlinkPlan optPlan)", "full_signature": "public JobGraph getJobGraph(PackagedProgram prog, FlinkPlan optPlan)", "class_method_signature": "Client.getJobGraph(PackagedProgram prog, FlinkPlan optPlan)", "testcase": false, "constructor": false}, {"identifier": "getJobGraph", "parameters": "(PackagedProgram prog, FlinkPlan optPlan, String savepointPath)", "modifiers": "public", "return": "JobGraph", "signature": "JobGraph getJobGraph(PackagedProgram prog, FlinkPlan optPlan, String savepointPath)", "full_signature": "public JobGraph getJobGraph(PackagedProgram prog, FlinkPlan optPlan, String savepointPath)", "class_method_signature": "Client.getJobGraph(PackagedProgram prog, FlinkPlan optPlan, String savepointPath)", "testcase": false, "constructor": false}, {"identifier": "getJobGraph", "parameters": "(FlinkPlan optPlan, List<URL> jarFiles, List<URL> classpaths, String savepointPath)", "modifiers": "private", "return": "JobGraph", "signature": "JobGraph getJobGraph(FlinkPlan optPlan, List<URL> jarFiles, List<URL> classpaths, String savepointPath)", "full_signature": "private JobGraph getJobGraph(FlinkPlan optPlan, List<URL> jarFiles, List<URL> classpaths, String savepointPath)", "class_method_signature": "Client.getJobGraph(FlinkPlan optPlan, List<URL> jarFiles, List<URL> classpaths, String savepointPath)", "testcase": false, "constructor": false}, {"identifier": "getJobManagerGateway", "parameters": "()", "modifiers": "private", "return": "ActorGateway", "signature": "ActorGateway getJobManagerGateway()", "full_signature": "private ActorGateway getJobManagerGateway()", "class_method_signature": "Client.getJobManagerGateway()", "testcase": false, "constructor": false}], "file": "flink-clients/src/main/java/org/apache/flink/client/program/Client.java"}, "focal_method": {"identifier": "runDetached", "parameters": "(PackagedProgram prog, int parallelism)", "modifiers": "public", "return": "JobSubmissionResult", "body": "public JobSubmissionResult runDetached(PackagedProgram prog, int parallelism)\n\t\t\tthrows ProgramInvocationException\n\t{\n\t\tThread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader());\n\t\tif (prog.isUsingProgramEntryPoint()) {\n\t\t\treturn runDetached(prog.getPlanWithJars(), parallelism, prog.getSavepointPath());\n\t\t}\n\t\telse if (prog.isUsingInteractiveMode()) {\n\t\t\tLOG.info(\"Starting program in interactive mode\");\n\t\t\tContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, prog.getAllLibraries(),\n\t\t\t\t\tprog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, false,\n\t\t\t\t\tprog.getSavepointPath());\n\t\t\tContextEnvironment.setAsContext(factory);\n\n\t\t\t// invoke here\n\t\t\ttry {\n\t\t\t\tprog.invokeInteractiveModeForExecution();\n\t\t\t\treturn ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute();\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tContextEnvironment.unsetContext();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow new RuntimeException(\"PackagedProgram does not have a valid invocation mode.\");\n\t\t}\n\t}", "signature": "JobSubmissionResult runDetached(PackagedProgram prog, int parallelism)", "full_signature": "public JobSubmissionResult runDetached(PackagedProgram prog, int parallelism)", "class_method_signature": "Client.runDetached(PackagedProgram prog, int parallelism)", "testcase": false, "constructor": false, "invocations": ["setContextClassLoader", "currentThread", "getUserCodeClassLoader", "isUsingProgramEntryPoint", "runDetached", "getPlanWithJars", "getSavepointPath", "isUsingInteractiveMode", "info", "getAllLibraries", "getClasspaths", "getUserCodeClassLoader", "getSavepointPath", "setAsContext", "invokeInteractiveModeForExecution", "finalizeExecute", "getLastEnvCreated", "unsetContext"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}