{"test_class": {"identifier": "JDBCOutputFormatTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JDBCInputFormat jdbcInputFormat;", "modifier": "private", "type": "JDBCInputFormat", "declarator": "jdbcInputFormat", "var_name": "jdbcInputFormat"}, {"original_string": "private JDBCOutputFormat jdbcOutputFormat;", "modifier": "private", "type": "JDBCOutputFormat", "declarator": "jdbcOutputFormat", "var_name": "jdbcOutputFormat"}, {"original_string": "private static Connection conn;", "modifier": "private static", "type": "Connection", "declarator": "conn", "var_name": "conn"}, {"original_string": "static final Object[][] dbData = {\n\t\t{1001, (\"Java for dummies\"), (\"Tan Ah Teck\"), 11.11, 11},\n\t\t{1002, (\"More Java for dummies\"), (\"Tan Ah Teck\"), 22.22, 22},\n\t\t{1003, (\"More Java for more dummies\"), (\"Mohammad Ali\"), 33.33, 33},\n\t\t{1004, (\"A Cup of Java\"), (\"Kumar\"), 44.44, 44},\n\t\t{1005, (\"A Teaspoon of Java\"), (\"Kevin Jones\"), 55.55, 55}};", "modifier": "static final", "type": "Object[][]", "declarator": "dbData = {\n\t\t{1001, (\"Java for dummies\"), (\"Tan Ah Teck\"), 11.11, 11},\n\t\t{1002, (\"More Java for dummies\"), (\"Tan Ah Teck\"), 22.22, 22},\n\t\t{1003, (\"More Java for more dummies\"), (\"Mohammad Ali\"), 33.33, 33},\n\t\t{1004, (\"A Cup of Java\"), (\"Kumar\"), 44.44, 44},\n\t\t{1005, (\"A Teaspoon of Java\"), (\"Kevin Jones\"), 55.55, 55}}", "var_name": "dbData"}], "file": "flink-batch-connectors/flink-jdbc/src/test/java/org/apache/flink/api/java/io/jdbc/JDBCOutputFormatTest.java"}, "test_case": {"identifier": "testJDBCOutputFormat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testJDBCOutputFormat() throws IOException {\n\t\tString sourceTable = \"books\";\n\t\tString targetTable = \"newbooks\";\n\t\tString driverPath = \"org.apache.derby.jdbc.EmbeddedDriver\";\n\t\tString dbUrl = \"jdbc:derby:memory:ebookshop\";\n\n\t\tjdbcOutputFormat = JDBCOutputFormat.buildJDBCOutputFormat()\n\t\t\t\t.setDBUrl(dbUrl)\n\t\t\t\t.setDrivername(driverPath)\n\t\t\t\t.setQuery(\"insert into \" + targetTable + \" (id, title, author, price, qty) values (?,?,?,?,?)\")\n\t\t\t\t.finish();\n\t\tjdbcOutputFormat.open(0, 1);\n\n\t\tjdbcInputFormat = JDBCInputFormat.buildJDBCInputFormat()\n\t\t\t\t.setDrivername(driverPath)\n\t\t\t\t.setDBUrl(dbUrl)\n\t\t\t\t.setQuery(\"select * from \" + sourceTable)\n\t\t\t\t.setResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE)\n\t\t\t\t.finish();\n\t\tjdbcInputFormat.open(null);\n\n\t\tTuple5 tuple = new Tuple5();\n\t\twhile (!jdbcInputFormat.reachedEnd()) {\n\t\t\tjdbcInputFormat.nextRecord(tuple);\n\t\t\tjdbcOutputFormat.writeRecord(tuple);\n\t\t}\n\n\t\tjdbcOutputFormat.close();\n\t\tjdbcInputFormat.close();\n\n\t\tjdbcInputFormat = JDBCInputFormat.buildJDBCInputFormat()\n\t\t\t\t.setDrivername(driverPath)\n\t\t\t\t.setDBUrl(dbUrl)\n\t\t\t\t.setQuery(\"select * from \" + targetTable)\n\t\t\t\t.setResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE)\n\t\t\t\t.finish();\n\t\tjdbcInputFormat.open(null);\n\n\t\tint recordCount = 0;\n\t\twhile (!jdbcInputFormat.reachedEnd()) {\n\t\t\tjdbcInputFormat.nextRecord(tuple);\n\t\t\tAssert.assertEquals(\"Field 0 should be int\", Integer.class, tuple.getField(0).getClass());\n\t\t\tAssert.assertEquals(\"Field 1 should be String\", String.class, tuple.getField(1).getClass());\n\t\t\tAssert.assertEquals(\"Field 2 should be String\", String.class, tuple.getField(2).getClass());\n\t\t\tAssert.assertEquals(\"Field 3 should be float\", Double.class, tuple.getField(3).getClass());\n\t\t\tAssert.assertEquals(\"Field 4 should be int\", Integer.class, tuple.getField(4).getClass());\n\n\t\t\tfor (int x = 0; x < 5; x++) {\n\t\t\t\tAssert.assertEquals(dbData[recordCount][x], tuple.getField(x));\n\t\t\t}\n\n\t\t\trecordCount++;\n\t\t}\n\t\tAssert.assertEquals(5, recordCount);\n\n\t\tjdbcInputFormat.close();\n\t}", "signature": "void testJDBCOutputFormat()", "full_signature": "@Test public void testJDBCOutputFormat()", "class_method_signature": "JDBCOutputFormatTest.testJDBCOutputFormat()", "testcase": true, "constructor": false, "invocations": ["finish", "setQuery", "setDrivername", "setDBUrl", "buildJDBCOutputFormat", "open", "finish", "setResultSetType", "setQuery", "setDBUrl", "setDrivername", "buildJDBCInputFormat", "open", "reachedEnd", "nextRecord", "writeRecord", "close", "close", "finish", "setResultSetType", "setQuery", "setDBUrl", "setDrivername", "buildJDBCInputFormat", "open", "reachedEnd", "nextRecord", "assertEquals", "getClass", "getField", "assertEquals", "getClass", "getField", "assertEquals", "getClass", "getField", "assertEquals", "getClass", "getField", "assertEquals", "getClass", "getField", "assertEquals", "getField", "assertEquals", "close"]}, "focal_class": {"identifier": "JDBCOutputFormat", "superclass": "extends RichOutputFormat<OUT>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "@SuppressWarnings(\"unused\")\n\tprivate static final Logger LOG = LoggerFactory.getLogger(JDBCOutputFormat.class);", "modifier": "@SuppressWarnings(\"unused\")\n\tprivate static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JDBCOutputFormat.class)", "var_name": "LOG"}, {"original_string": "private String username;", "modifier": "private", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "private String password;", "modifier": "private", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private String drivername;", "modifier": "private", "type": "String", "declarator": "drivername", "var_name": "drivername"}, {"original_string": "private String dbURL;", "modifier": "private", "type": "String", "declarator": "dbURL", "var_name": "dbURL"}, {"original_string": "private String query;", "modifier": "private", "type": "String", "declarator": "query", "var_name": "query"}, {"original_string": "private int batchInterval = 5000;", "modifier": "private", "type": "int", "declarator": "batchInterval = 5000", "var_name": "batchInterval"}, {"original_string": "private Connection dbConn;", "modifier": "private", "type": "Connection", "declarator": "dbConn", "var_name": "dbConn"}, {"original_string": "private PreparedStatement upload;", "modifier": "private", "type": "PreparedStatement", "declarator": "upload", "var_name": "upload"}, {"original_string": "private SupportedTypes[] types = null;", "modifier": "private", "type": "SupportedTypes[]", "declarator": "types = null", "var_name": "types"}, {"original_string": "private int batchCount = 0;", "modifier": "private", "type": "int", "declarator": "batchCount = 0", "var_name": "batchCount"}], "methods": [{"identifier": "JDBCOutputFormat", "parameters": "()", "modifiers": "public", "return": "", "signature": " JDBCOutputFormat()", "full_signature": "public  JDBCOutputFormat()", "class_method_signature": "JDBCOutputFormat.JDBCOutputFormat()", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(Configuration parameters)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Configuration parameters)", "full_signature": "@Override public void configure(Configuration parameters)", "class_method_signature": "JDBCOutputFormat.configure(Configuration parameters)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(int taskNumber, int numTasks)", "modifiers": "@Override public", "return": "void", "signature": "void open(int taskNumber, int numTasks)", "full_signature": "@Override public void open(int taskNumber, int numTasks)", "class_method_signature": "JDBCOutputFormat.open(int taskNumber, int numTasks)", "testcase": false, "constructor": false}, {"identifier": "establishConnection", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void establishConnection()", "full_signature": "private void establishConnection()", "class_method_signature": "JDBCOutputFormat.establishConnection()", "testcase": false, "constructor": false}, {"identifier": "writeRecord", "parameters": "(OUT tuple)", "modifiers": "@Override public", "return": "void", "signature": "void writeRecord(OUT tuple)", "full_signature": "@Override public void writeRecord(OUT tuple)", "class_method_signature": "JDBCOutputFormat.writeRecord(OUT tuple)", "testcase": false, "constructor": false}, {"identifier": "extractTypes", "parameters": "(OUT tuple)", "modifiers": "private", "return": "void", "signature": "void extractTypes(OUT tuple)", "full_signature": "private void extractTypes(OUT tuple)", "class_method_signature": "JDBCOutputFormat.extractTypes(OUT tuple)", "testcase": false, "constructor": false}, {"identifier": "addValues", "parameters": "(OUT tuple)", "modifiers": "private", "return": "void", "signature": "void addValues(OUT tuple)", "full_signature": "private void addValues(OUT tuple)", "class_method_signature": "JDBCOutputFormat.addValues(OUT tuple)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "JDBCOutputFormat.close()", "testcase": false, "constructor": false}, {"identifier": "buildJDBCOutputFormat", "parameters": "()", "modifiers": "public static", "return": "JDBCOutputFormatBuilder", "signature": "JDBCOutputFormatBuilder buildJDBCOutputFormat()", "full_signature": "public static JDBCOutputFormatBuilder buildJDBCOutputFormat()", "class_method_signature": "JDBCOutputFormat.buildJDBCOutputFormat()", "testcase": false, "constructor": false}], "file": "flink-batch-connectors/flink-jdbc/src/main/java/org/apache/flink/api/java/io/jdbc/JDBCOutputFormat.java"}, "focal_method": {"identifier": "JDBCOutputFormat", "parameters": "()", "modifiers": "public", "return": "", "body": "public JDBCOutputFormat() {\n\t}", "signature": " JDBCOutputFormat()", "full_signature": "public  JDBCOutputFormat()", "class_method_signature": "JDBCOutputFormat.JDBCOutputFormat()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}