{"test_class": {"identifier": "DeleteFromCachedCollectionTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DeleteFromCachedCollectionTask task;", "modifier": "private", "type": "DeleteFromCachedCollectionTask", "declarator": "task", "var_name": "task"}, {"original_string": "private IField collectionNameField;", "modifier": "private", "type": "IField", "declarator": "collectionNameField", "var_name": "collectionNameField"}, {"original_string": "private IField isActiveField;", "modifier": "private", "type": "IField", "declarator": "isActiveField", "var_name": "isActiveField"}, {"original_string": "private IField documentField;", "modifier": "private", "type": "IField", "declarator": "documentField", "var_name": "documentField"}, {"original_string": "private IStorageConnection connection;", "modifier": "private", "type": "IStorageConnection", "declarator": "connection", "var_name": "connection"}], "file": "CoreFeatures/Database/CachedCollection/src/test/java/info/smart_tools/smartactors/database/cached_collection/task/DeleteFromCachedCollectionTaskTest.java"}, "test_case": {"identifier": "ShouldInCorrectPrepareObjectForDeletingWhenNestedExceptionIsGiven", "parameters": "()", "modifiers": "@Test(expected = TaskPrepareException.class) public", "return": "void", "body": "@Test(expected = TaskPrepareException.class)\n    public void ShouldInCorrectPrepareObjectForDeletingWhenNestedExceptionIsGiven() throws Exception {\n\n        IObject srcQuery = mock(IObject.class);\n        doThrow(new ChangeValueException(\"\")).when(isActiveField).out(srcQuery, false);\n\n        task.prepare(srcQuery);\n    }", "signature": "void ShouldInCorrectPrepareObjectForDeletingWhenNestedExceptionIsGiven()", "full_signature": "@Test(expected = TaskPrepareException.class) public void ShouldInCorrectPrepareObjectForDeletingWhenNestedExceptionIsGiven()", "class_method_signature": "DeleteFromCachedCollectionTaskTest.ShouldInCorrectPrepareObjectForDeletingWhenNestedExceptionIsGiven()", "testcase": true, "constructor": false, "invocations": ["mock", "out", "when", "doThrow", "prepare"]}, "focal_class": {"identifier": "DeleteFromCachedCollectionTask", "superclass": "", "interfaces": "implements IDatabaseTask", "fields": [{"original_string": "private IDatabaseTask updateTask;", "modifier": "private", "type": "IDatabaseTask", "declarator": "updateTask", "var_name": "updateTask"}, {"original_string": "private IStorageConnection connection;", "modifier": "private", "type": "IStorageConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private IField collectionNameField;", "modifier": "private", "type": "IField", "declarator": "collectionNameField", "var_name": "collectionNameField"}, {"original_string": "private IField isActiveField;", "modifier": "private", "type": "IField", "declarator": "isActiveField", "var_name": "isActiveField"}, {"original_string": "private IField documentField;", "modifier": "private", "type": "IField", "declarator": "documentField", "var_name": "documentField"}], "methods": [{"identifier": "DeleteFromCachedCollectionTask", "parameters": "(final IStorageConnection connection)", "modifiers": "public", "return": "", "signature": " DeleteFromCachedCollectionTask(final IStorageConnection connection)", "full_signature": "public  DeleteFromCachedCollectionTask(final IStorageConnection connection)", "class_method_signature": "DeleteFromCachedCollectionTask.DeleteFromCachedCollectionTask(final IStorageConnection connection)", "testcase": false, "constructor": true}, {"identifier": "prepare", "parameters": "(final IObject query)", "modifiers": "@Override public", "return": "void", "signature": "void prepare(final IObject query)", "full_signature": "@Override public void prepare(final IObject query)", "class_method_signature": "DeleteFromCachedCollectionTask.prepare(final IObject query)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "DeleteFromCachedCollectionTask.execute()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database/CachedCollection/src/main/java/info/smart_tools/smartactors/database/cached_collection/task/DeleteFromCachedCollectionTask.java"}, "focal_method": {"identifier": "prepare", "parameters": "(final IObject query)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void prepare(final IObject query) throws TaskPrepareException {\n\n        try {\n            isActiveField.out(query, false);\n            updateTask = IOC.resolve(\n                Keys.getOrAdd(\"db.collection.upsert\"),\n                connection,\n                collectionNameField.in(query),\n                documentField.in(query)\n            );\n        } catch (InvalidArgumentException | ReadValueException | ChangeValueException | ResolutionException e) {\n            throw new TaskPrepareException(\"Can't prepare query for delete from cached collection\", e);\n        }\n\n    }", "signature": "void prepare(final IObject query)", "full_signature": "@Override public void prepare(final IObject query)", "class_method_signature": "DeleteFromCachedCollectionTask.prepare(final IObject query)", "testcase": false, "constructor": false, "invocations": ["out", "resolve", "getOrAdd", "in", "in"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}