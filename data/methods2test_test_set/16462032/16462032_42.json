{"test_class": {"identifier": "PathUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "mucommander-commons-file/src/test/java/com/mucommander/commons/file/util/PathUtilsTest.java"}, "test_case": {"identifier": "testPathEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPathEquals() {\n        assert PathUtils.pathEquals(\"/home/\", \"/home/\", \"/\");\n        assert PathUtils.pathEquals(\"/home\", \"/home\", \"/\");\n        assert PathUtils.pathEquals(\"/home/\", \"/home/\", \"\\\\\");\n        assert PathUtils.pathEquals(\"/home/\", \"/home\", \"/\");\n        assert PathUtils.pathEquals(\"/home\", \"/home/\", \"/\");\n\n        assert PathUtils.pathEquals(\"C:\\\\home\\\\\", \"C:\\\\home\\\\\", \"\\\\\");\n        assert PathUtils.pathEquals(\"C:\\\\home\", \"C:\\\\home\", \"\\\\\");\n        assert PathUtils.pathEquals(\"C:\\\\home\\\\\", \"C:\\\\home\\\\\", \"/\");\n        assert PathUtils.pathEquals(\"C:\\\\home\\\\\", \"C:\\\\home\", \"\\\\\");\n        assert PathUtils.pathEquals(\"C:\\\\home\", \"C:\\\\home\\\\\", \"\\\\\");\n\n        assert PathUtils.pathEquals(\"--home--\", \"--home--\", \"--\");\n        assert PathUtils.pathEquals(\"--home\", \"--home\", \"--\");\n        assert PathUtils.pathEquals(\"--home--\", \"--home--\", \"/\");\n        assert PathUtils.pathEquals(\"--home--\", \"--home\", \"--\");\n        assert PathUtils.pathEquals(\"--home\", \"--home--\", \"--\");\n\n        assert !(PathUtils.pathEquals(\"/\", \"/home\", \"/\"));\n        assert !(PathUtils.pathEquals(\"/home\", \"/home/\", \"\\\\\"));\n        assert !(PathUtils.pathEquals(\"/home/\", \"/home\", \"\\\\\"));\n\n        assert !(PathUtils.pathEquals(\"C:\\\\\", \"C:\\\\home\", \"\\\\\"));\n        assert !(PathUtils.pathEquals(\"C:\\\\home\", \"C:\\\\home\\\\\", \"/\"));\n        assert !(PathUtils.pathEquals(\"C:\\\\home\\\\\", \"C:\\\\home\", \"/\"));\n\n        assert !(PathUtils.pathEquals(\"--\", \"--home\", \"--\"));\n        assert !(PathUtils.pathEquals(\"--home\", \"--home--\", \"/\"));\n        assert !(PathUtils.pathEquals(\"--home--\", \"--home\", \"/\"));\n    }", "signature": "void testPathEquals()", "full_signature": "@Test public void testPathEquals()", "class_method_signature": "PathUtilsTest.testPathEquals()", "testcase": true, "constructor": false, "invocations": ["pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals", "pathEquals"]}, "focal_class": {"identifier": "PathUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PathUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PathUtils.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "resolveDestination", "parameters": "(String destPath, AbstractFile baseFolder)", "modifiers": "public static", "return": "ResolvedDestination", "signature": "ResolvedDestination resolveDestination(String destPath, AbstractFile baseFolder)", "full_signature": "public static ResolvedDestination resolveDestination(String destPath, AbstractFile baseFolder)", "class_method_signature": "PathUtils.resolveDestination(String destPath, AbstractFile baseFolder)", "testcase": false, "constructor": false}, {"identifier": "removeLeadingSeparator", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String removeLeadingSeparator(String path)", "full_signature": "public static String removeLeadingSeparator(String path)", "class_method_signature": "PathUtils.removeLeadingSeparator(String path)", "testcase": false, "constructor": false}, {"identifier": "removeLeadingSeparator", "parameters": "(String path, String separator)", "modifiers": "public static", "return": "String", "signature": "String removeLeadingSeparator(String path, String separator)", "full_signature": "public static String removeLeadingSeparator(String path, String separator)", "class_method_signature": "PathUtils.removeLeadingSeparator(String path, String separator)", "testcase": false, "constructor": false}, {"identifier": "removeTrailingSeparator", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String removeTrailingSeparator(String path)", "full_signature": "public static String removeTrailingSeparator(String path)", "class_method_signature": "PathUtils.removeTrailingSeparator(String path)", "testcase": false, "constructor": false}, {"identifier": "removeTrailingSeparator", "parameters": "(String path, String separator)", "modifiers": "public static", "return": "String", "signature": "String removeTrailingSeparator(String path, String separator)", "full_signature": "public static String removeTrailingSeparator(String path, String separator)", "class_method_signature": "PathUtils.removeTrailingSeparator(String path, String separator)", "testcase": false, "constructor": false}, {"identifier": "pathEquals", "parameters": "(String path1, String path2, String separator)", "modifiers": "public static", "return": "boolean", "signature": "boolean pathEquals(String path1, String path2, String separator)", "full_signature": "public static boolean pathEquals(String path1, String path2, String separator)", "class_method_signature": "PathUtils.pathEquals(String path1, String path2, String separator)", "testcase": false, "constructor": false}, {"identifier": "getPathHashCode", "parameters": "(String path, String separator)", "modifiers": "public static", "return": "int", "signature": "int getPathHashCode(String path, String separator)", "full_signature": "public static int getPathHashCode(String path, String separator)", "class_method_signature": "PathUtils.getPathHashCode(String path, String separator)", "testcase": false, "constructor": false}, {"identifier": "removeLeadingFragments", "parameters": "(String path, String separator, int nbFragments)", "modifiers": "public static", "return": "String", "signature": "String removeLeadingFragments(String path, String separator, int nbFragments)", "full_signature": "public static String removeLeadingFragments(String path, String separator, int nbFragments)", "class_method_signature": "PathUtils.removeLeadingFragments(String path, String separator, int nbFragments)", "testcase": false, "constructor": false}, {"identifier": "getDepth", "parameters": "(String path, String separator)", "modifiers": "public static", "return": "int", "signature": "int getDepth(String path, String separator)", "full_signature": "public static int getDepth(String path, String separator)", "class_method_signature": "PathUtils.getDepth(String path, String separator)", "testcase": false, "constructor": false}], "file": "mucommander-commons-file/src/main/java/com/mucommander/commons/file/util/PathUtils.java"}, "focal_method": {"identifier": "pathEquals", "parameters": "(String path1, String path2, String separator)", "modifiers": "public static", "return": "boolean", "body": "public static boolean pathEquals(String path1, String path2, String separator) {\n        if(path1==null)\n            return path2==null;\n\n        if(path2==null)\n            return path1==null;\n        \n        if(path1.equals(path2))\n            return true;\n\n        int len1 = path1.length();\n        int len2 = path2.length();\n        int separatorLen = separator.length();\n\n        // If the difference between the 2 strings is just a trailing path separator, we consider the paths as equal\n        if(Math.abs(len1-len2)==separatorLen && (len1>len2 ? path1.startsWith(path2) : path2.startsWith(path1))) {\n            String diff = len1>len2 ? path1.substring(len1-separatorLen) : path2.substring(len2-separatorLen);\n            return separator.equals(diff);\n        }\n\n        return false;\n    }", "signature": "boolean pathEquals(String path1, String path2, String separator)", "full_signature": "public static boolean pathEquals(String path1, String path2, String separator)", "class_method_signature": "PathUtils.pathEquals(String path1, String path2, String separator)", "testcase": false, "constructor": false, "invocations": ["equals", "length", "length", "length", "abs", "startsWith", "startsWith", "substring", "substring", "equals"]}, "repository": {"repo_id": 16462032, "url": "https://github.com/mucommander/mucommander", "language": "Java", "is_fork": false, "fork_count": 124, "stargazer_count": 448, "size": 47123, "license": "licensed"}}