{"test_class": {"identifier": "BinarizationTrainerTest", "superclass": "extends TrainerTest", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/preprocessing/binarization/BinarizationTrainerTest.java"}, "test_case": {"identifier": "testFit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFit() {\n        Map<Integer, Vector> data = new HashMap<>();\n        data.put(1, VectorUtils.of(2, 4, 1));\n        data.put(2, VectorUtils.of(1, 8, 22));\n        data.put(3, VectorUtils.of(4, 10, 100));\n        data.put(4, VectorUtils.of(0, 22, 300));\n\n        final Vectorizer<Integer, Vector, Integer, Double> vectorizer = new DummyVectorizer<>(0, 1, 2);\n\n        DatasetBuilder<Integer, Vector> datasetBuilder = new LocalDatasetBuilder<>(data, parts);\n\n        BinarizationTrainer<Integer, Vector> binarizationTrainer = new BinarizationTrainer<Integer, Vector>()\n            .withThreshold(10);\n\n        assertEquals(10., binarizationTrainer.getThreshold(), 0);\n\n        BinarizationPreprocessor<Integer, Vector> preprocessor = binarizationTrainer.fit(\n            TestUtils.testEnvBuilder(),\n            datasetBuilder,\n            vectorizer\n        );\n\n        assertEquals(binarizationTrainer.getThreshold(), preprocessor.getThreshold(), 0);\n\n        assertArrayEquals(new double[] {0, 0, 1}, preprocessor.apply(5, VectorUtils.of(1, 10, 100)).features().asArray(), 1e-8);\n    }", "signature": "void testFit()", "full_signature": "@Test public void testFit()", "class_method_signature": "BinarizationTrainerTest.testFit()", "testcase": true, "constructor": false, "invocations": ["put", "of", "put", "of", "put", "of", "put", "of", "withThreshold", "assertEquals", "getThreshold", "fit", "testEnvBuilder", "assertEquals", "getThreshold", "getThreshold", "assertArrayEquals", "asArray", "features", "apply", "of"]}, "focal_class": {"identifier": "BinarizationTrainer", "superclass": "", "interfaces": "implements PreprocessingTrainer<K, V>", "fields": [{"original_string": "private double threshold;", "modifier": "private", "type": "double", "declarator": "threshold", "var_name": "threshold"}], "methods": [{"identifier": "fit", "parameters": "(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "modifiers": "@Override public", "return": "BinarizationPreprocessor<K, V>", "signature": "BinarizationPreprocessor<K, V> fit(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "full_signature": "@Override public BinarizationPreprocessor<K, V> fit(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "class_method_signature": "BinarizationTrainer.fit(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "testcase": false, "constructor": false}, {"identifier": "getThreshold", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getThreshold()", "full_signature": "public double getThreshold()", "class_method_signature": "BinarizationTrainer.getThreshold()", "testcase": false, "constructor": false}, {"identifier": "withThreshold", "parameters": "(double threshold)", "modifiers": "public", "return": "BinarizationTrainer<K, V>", "signature": "BinarizationTrainer<K, V> withThreshold(double threshold)", "full_signature": "public BinarizationTrainer<K, V> withThreshold(double threshold)", "class_method_signature": "BinarizationTrainer.withThreshold(double threshold)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/preprocessing/binarization/BinarizationTrainer.java"}, "focal_method": {"identifier": "fit", "parameters": "(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "modifiers": "@Override public", "return": "BinarizationPreprocessor<K, V>", "body": "@Override public BinarizationPreprocessor<K, V> fit(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor) {\n        return new BinarizationPreprocessor<>(threshold, basePreprocessor);\n    }", "signature": "BinarizationPreprocessor<K, V> fit(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "full_signature": "@Override public BinarizationPreprocessor<K, V> fit(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "class_method_signature": "BinarizationTrainer.fit(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}