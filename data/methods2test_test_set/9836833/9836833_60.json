{"test_class": {"identifier": "StdRestxRequestMatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "restx-core/src/test/java/restx/StdRestxRequestMatcherTest.java"}, "test_case": {"identifier": "should_matcher_with_no_path_param_match_not_match", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_matcher_with_no_path_param_match_not_match() throws Exception {\n        StdRestxRequestMatcher matcher = new StdRestxRequestMatcher(\"GET\", \"/user\");\n\n        Optional<? extends RestxRequestMatch> match = matcher.match(\"GET\", \"/user\");\n        assertThat(match.isPresent()).isTrue();\n        assertThat(match.get().getPathParams()).isEmpty();\n\n        match = matcher.match(\"POST\", \"/user\");\n        assertThat(match.isPresent()).isFalse();\n\n        match = matcher.match(\"GET\", \"/user/johndoe\");\n        assertThat(match.isPresent()).isFalse();\n\n        match = matcher.match(\"GET\", \"/use\");\n        assertThat(match.isPresent()).isFalse();\n    }", "signature": "void should_matcher_with_no_path_param_match_not_match()", "full_signature": "@Test public void should_matcher_with_no_path_param_match_not_match()", "class_method_signature": "StdRestxRequestMatcherTest.should_matcher_with_no_path_param_match_not_match()", "testcase": true, "constructor": false, "invocations": ["match", "isTrue", "assertThat", "isPresent", "isEmpty", "assertThat", "getPathParams", "get", "match", "isFalse", "assertThat", "isPresent", "match", "isFalse", "assertThat", "isPresent", "match", "isFalse", "assertThat", "isPresent"]}, "focal_class": {"identifier": "StdRestxRequestMatcher", "superclass": "", "interfaces": "implements RestxRequestMatcher", "fields": [{"original_string": "private final Endpoint endpoint;", "modifier": "private final", "type": "Endpoint", "declarator": "endpoint", "var_name": "endpoint"}, {"original_string": "private final String stdPathPattern;", "modifier": "private final", "type": "String", "declarator": "stdPathPattern", "var_name": "stdPathPattern"}, {"original_string": "private final Pattern pattern;", "modifier": "private final", "type": "Pattern", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "private final ImmutableList<String> groupNames;", "modifier": "private final", "type": "ImmutableList<String>", "declarator": "groupNames", "var_name": "groupNames"}, {"original_string": "private static final PathParserCharProcessor regularCharPathParserCharProcessor = new PathParserCharProcessor() {\n        @Override\n        public void handle(int curChar, PathPatternParser pathPatternParser) {\n            if (curChar == '{') {\n                pathPatternParser.processor = new CurlyBracesPathParamPathParserCharProcessor();\n            } else if (curChar == ':') {\n                pathPatternParser.processor = new SimpleColumnBasedPathParamParserCharProcessor();\n            } else {\n                pathPatternParser.patternBuilder.appendCodePoint(curChar);\n                pathPatternParser.stdPathPatternBuilder.appendCodePoint(curChar);\n            }\n        }\n\n        @Override\n        public void end(PathPatternParser pathPatternParser) {\n        }\n    };", "modifier": "private static final", "type": "PathParserCharProcessor", "declarator": "regularCharPathParserCharProcessor = new PathParserCharProcessor() {\n        @Override\n        public void handle(int curChar, PathPatternParser pathPatternParser) {\n            if (curChar == '{') {\n                pathPatternParser.processor = new CurlyBracesPathParamPathParserCharProcessor();\n            } else if (curChar == ':') {\n                pathPatternParser.processor = new SimpleColumnBasedPathParamParserCharProcessor();\n            } else {\n                pathPatternParser.patternBuilder.appendCodePoint(curChar);\n                pathPatternParser.stdPathPatternBuilder.appendCodePoint(curChar);\n            }\n        }\n\n        @Override\n        public void end(PathPatternParser pathPatternParser) {\n        }\n    }", "var_name": "regularCharPathParserCharProcessor"}], "methods": [{"identifier": "StdRestxRequestMatcher", "parameters": "(Endpoint endpoint)", "modifiers": "public", "return": "", "signature": " StdRestxRequestMatcher(Endpoint endpoint)", "full_signature": "public  StdRestxRequestMatcher(Endpoint endpoint)", "class_method_signature": "StdRestxRequestMatcher.StdRestxRequestMatcher(Endpoint endpoint)", "testcase": false, "constructor": true}, {"identifier": "StdRestxRequestMatcher", "parameters": "(String method, String pathPattern)", "modifiers": "public", "return": "", "signature": " StdRestxRequestMatcher(String method, String pathPattern)", "full_signature": "public  StdRestxRequestMatcher(String method, String pathPattern)", "class_method_signature": "StdRestxRequestMatcher.StdRestxRequestMatcher(String method, String pathPattern)", "testcase": false, "constructor": true}, {"identifier": "match", "parameters": "(String method, String path)", "modifiers": "@Override public", "return": "Optional<? extends RestxRequestMatch>", "signature": "Optional<? extends RestxRequestMatch> match(String method, String path)", "full_signature": "@Override public Optional<? extends RestxRequestMatch> match(String method, String path)", "class_method_signature": "StdRestxRequestMatcher.match(String method, String path)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StdRestxRequestMatcher.toString()", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMethod()", "full_signature": "public String getMethod()", "class_method_signature": "StdRestxRequestMatcher.getMethod()", "testcase": false, "constructor": false}, {"identifier": "getPathPattern", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPathPattern()", "full_signature": "public String getPathPattern()", "class_method_signature": "StdRestxRequestMatcher.getPathPattern()", "testcase": false, "constructor": false}, {"identifier": "getStdPathPattern", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStdPathPattern()", "full_signature": "public String getStdPathPattern()", "class_method_signature": "StdRestxRequestMatcher.getStdPathPattern()", "testcase": false, "constructor": false}, {"identifier": "getPathParamNames", "parameters": "()", "modifiers": "public", "return": "ImmutableList<String>", "signature": "ImmutableList<String> getPathParamNames()", "full_signature": "public ImmutableList<String> getPathParamNames()", "class_method_signature": "StdRestxRequestMatcher.getPathParamNames()", "testcase": false, "constructor": false}, {"identifier": "isValidPathParamNameChar", "parameters": "(int curChar)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidPathParamNameChar(int curChar)", "full_signature": "private static boolean isValidPathParamNameChar(int curChar)", "class_method_signature": "StdRestxRequestMatcher.isValidPathParamNameChar(int curChar)", "testcase": false, "constructor": false}], "file": "restx-core/src/main/java/restx/StdRestxRequestMatcher.java"}, "focal_method": {"identifier": "match", "parameters": "(String method, String path)", "modifiers": "@Override public", "return": "Optional<? extends RestxRequestMatch>", "body": "@Override\n    public Optional<? extends RestxRequestMatch> match(String method, String path) {\n        if (!this.endpoint.getMethod().equals(method)) {\n            return Optional.absent();\n        }\n        Matcher m = pattern.matcher(path);\n        if (!m.matches()) {\n            return Optional.absent();\n        }\n\n        ImmutableMap.Builder<String, String> params = ImmutableMap.builder();\n        for (int i = 0; i < m.groupCount() && i < groupNames.size(); i++) {\n             params.put(groupNames.get(i), m.group(i + 1));\n        }\n\n        return Optional.of(new StdRestxRequestMatch(this.endpoint.getPathPattern(), path, params.build()));\n    }", "signature": "Optional<? extends RestxRequestMatch> match(String method, String path)", "full_signature": "@Override public Optional<? extends RestxRequestMatch> match(String method, String path)", "class_method_signature": "StdRestxRequestMatcher.match(String method, String path)", "testcase": false, "constructor": false, "invocations": ["equals", "getMethod", "absent", "matcher", "matches", "absent", "builder", "groupCount", "size", "put", "get", "group", "of", "getPathPattern", "build"]}, "repository": {"repo_id": 9836833, "url": "https://github.com/restx/restx", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 433, "size": 7896, "license": "licensed"}}