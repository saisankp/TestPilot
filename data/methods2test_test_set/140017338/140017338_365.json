{"test_class": {"identifier": "SourceUrlResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private HttpHelper httpHelper;", "modifier": "@Mock\n    private", "type": "HttpHelper", "declarator": "httpHelper", "var_name": "httpHelper"}, {"original_string": "private SourceUrlResolver resolver;", "modifier": "private", "type": "SourceUrlResolver", "declarator": "resolver", "var_name": "resolver"}], "file": "core/core-workflow-steps/src/test/java/org/eclipse/sw360/antenna/workflow/processors/SourceUrlResolverTest.java"}, "test_case": {"identifier": "processDownloadsSourcesAndSetsTheSourceFileFact", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void processDownloadsSourcesAndSetsTheSourceFileFact() throws Exception {\n        when(httpHelper.downloadFile(eq(\"https://example.com/artifact0.zip\"), any()))\n                .thenReturn(new File(\"artifact0.zip\"));\n\n        Artifact artifact0 = new Artifact();\n        artifact0.addFact(new ArtifactSourceUrl(\"https://example.com/artifact0.zip\"));\n\n        Artifact artifact1 = new Artifact();\n\n        Collection<Artifact> artifacts = Arrays.asList(artifact0, artifact1);\n\n        resolver.process(artifacts);\n\n        assertThat(artifact0.askForGet(ArtifactSourceFile.class).isPresent()).isTrue();\n        assertThat(artifact0.askForGet(ArtifactSourceFile.class).get().toString()).isEqualTo(\"artifact0.zip\");\n\n        assertThat(artifact1.askForGet(ArtifactSourceFile.class).isPresent()).isFalse();\n    }", "signature": "void processDownloadsSourcesAndSetsTheSourceFileFact()", "full_signature": "@Test public void processDownloadsSourcesAndSetsTheSourceFileFact()", "class_method_signature": "SourceUrlResolverTest.processDownloadsSourcesAndSetsTheSourceFileFact()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "downloadFile", "eq", "any", "addFact", "asList", "process", "isTrue", "assertThat", "isPresent", "askForGet", "isEqualTo", "assertThat", "toString", "get", "askForGet", "isFalse", "assertThat", "isPresent", "askForGet"]}, "focal_class": {"identifier": "SourceUrlResolver", "superclass": "extends AbstractProcessor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SourceUrlResolver.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SourceUrlResolver.class)", "var_name": "LOGGER"}, {"original_string": "private HttpHelper httpHelper;", "modifier": "private", "type": "HttpHelper", "declarator": "httpHelper", "var_name": "httpHelper"}, {"original_string": "private Path dependencyTargetDirectory;", "modifier": "private", "type": "Path", "declarator": "dependencyTargetDirectory", "var_name": "dependencyTargetDirectory"}], "methods": [{"identifier": "SourceUrlResolver", "parameters": "()", "modifiers": "public", "return": "", "signature": " SourceUrlResolver()", "full_signature": "public  SourceUrlResolver()", "class_method_signature": "SourceUrlResolver.SourceUrlResolver()", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "@Override public", "return": "Collection<Artifact>", "signature": "Collection<Artifact> process(Collection<Artifact> artifacts)", "full_signature": "@Override public Collection<Artifact> process(Collection<Artifact> artifacts)", "class_method_signature": "SourceUrlResolver.process(Collection<Artifact> artifacts)", "testcase": false, "constructor": false}, {"identifier": "resolveSourceUrls", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "private", "return": "void", "signature": "void resolveSourceUrls(Collection<Artifact> artifacts)", "full_signature": "private void resolveSourceUrls(Collection<Artifact> artifacts)", "class_method_signature": "SourceUrlResolver.resolveSourceUrls(Collection<Artifact> artifacts)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Map<String,String> configMap)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String,String> configMap)", "full_signature": "@Override public void configure(Map<String,String> configMap)", "class_method_signature": "SourceUrlResolver.configure(Map<String,String> configMap)", "testcase": false, "constructor": false}], "file": "core/core-workflow-steps/src/main/java/org/eclipse/sw360/antenna/workflow/processors/SourceUrlResolver.java"}, "focal_method": {"identifier": "process", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "@Override public", "return": "Collection<Artifact>", "body": "@Override\n    public Collection<Artifact> process(Collection<Artifact> artifacts) {\n        LOGGER.debug(\"Resolve source urls...\");\n        resolveSourceUrls(artifacts);\n        LOGGER.debug(\"Resolve source urls... done\");\n        return artifacts;\n    }", "signature": "Collection<Artifact> process(Collection<Artifact> artifacts)", "full_signature": "@Override public Collection<Artifact> process(Collection<Artifact> artifacts)", "class_method_signature": "SourceUrlResolver.process(Collection<Artifact> artifacts)", "testcase": false, "constructor": false, "invocations": ["debug", "resolveSourceUrls", "debug"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}