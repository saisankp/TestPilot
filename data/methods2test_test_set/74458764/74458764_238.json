{"test_class": {"identifier": "TestEncryptingSerializerDeserializer", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n  public final", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}], "file": "session-replacement/src/test/java/com/amadeus/session/TestEncryptingSerializerDeserializer.java"}, "test_case": {"identifier": "testDeserialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDeserialize() {\n    EncryptingSerializerDeserializer serializer = new EncryptingSerializerDeserializer();\n    SessionManager sessionManager = mock(SessionManager.class);\n    SessionConfiguration configuration = new SessionConfiguration();\n    configuration.setUsingEncryption(true);\n    configuration.setEncryptionKey(\"test\");\n    when(sessionManager.getMetrics()).thenReturn(new MetricRegistry());\n    when(sessionManager.getConfiguration()).thenReturn(configuration);\n    serializer.setSessionManager(sessionManager);\n    EncryptingSerializerDeserializer tempSerializer = new EncryptingSerializerDeserializer();\n    SessionManager sm = mock(SessionManager.class);\n    when(sm.getMetrics()).thenReturn(new MetricRegistry());\n    when(sm.getConfiguration()).thenReturn(configuration);\n    tempSerializer.setSessionManager(sm);\n    Date now = new Date();\n    byte[] serializedString = serializer.serialize(\"String\");\n    byte[] serializedDate = serializer.serialize(now);\n    byte[] serializedNull = serializer.serialize(null);\n\n    assertEquals(null, serializer.deserialize(serializedNull));\n    assertEquals(\"String\", serializer.deserialize(serializedString));\n    assertEquals(now, serializer.deserialize(serializedDate));\n  }", "signature": "void testDeserialize()", "full_signature": "@Test public void testDeserialize()", "class_method_signature": "TestEncryptingSerializerDeserializer.testDeserialize()", "testcase": true, "constructor": false, "invocations": ["mock", "setUsingEncryption", "setEncryptionKey", "thenReturn", "when", "getMetrics", "thenReturn", "when", "getConfiguration", "setSessionManager", "mock", "thenReturn", "when", "getMetrics", "thenReturn", "when", "getConfiguration", "setSessionManager", "serialize", "serialize", "serialize", "assertEquals", "deserialize", "assertEquals", "deserialize", "assertEquals", "deserialize"]}, "focal_class": {"identifier": "EncryptingSerializerDeserializer", "superclass": "", "interfaces": "implements SerializerDeserializer", "fields": [{"original_string": "private final SerializerDeserializer wrapped;", "modifier": "private final", "type": "SerializerDeserializer", "declarator": "wrapped", "var_name": "wrapped"}, {"original_string": "private SecretKeySpec secretKey;", "modifier": "private", "type": "SecretKeySpec", "declarator": "secretKey", "var_name": "secretKey"}, {"original_string": "private SecureRandom random;", "modifier": "private", "type": "SecureRandom", "declarator": "random", "var_name": "random"}], "methods": [{"identifier": "EncryptingSerializerDeserializer", "parameters": "()", "modifiers": "public", "return": "", "signature": " EncryptingSerializerDeserializer()", "full_signature": "public  EncryptingSerializerDeserializer()", "class_method_signature": "EncryptingSerializerDeserializer.EncryptingSerializerDeserializer()", "testcase": false, "constructor": true}, {"identifier": "EncryptingSerializerDeserializer", "parameters": "(SerializerDeserializer wrapped)", "modifiers": "public", "return": "", "signature": " EncryptingSerializerDeserializer(SerializerDeserializer wrapped)", "full_signature": "public  EncryptingSerializerDeserializer(SerializerDeserializer wrapped)", "class_method_signature": "EncryptingSerializerDeserializer.EncryptingSerializerDeserializer(SerializerDeserializer wrapped)", "testcase": false, "constructor": true}, {"identifier": "initKey", "parameters": "(String key)", "modifiers": "", "return": "void", "signature": "void initKey(String key)", "full_signature": " void initKey(String key)", "class_method_signature": "EncryptingSerializerDeserializer.initKey(String key)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(Object value)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] serialize(Object value)", "full_signature": "@Override public byte[] serialize(Object value)", "class_method_signature": "EncryptingSerializerDeserializer.serialize(Object value)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(byte[] data)", "modifiers": "@Override public", "return": "Object", "signature": "Object deserialize(byte[] data)", "full_signature": "@Override public Object deserialize(byte[] data)", "class_method_signature": "EncryptingSerializerDeserializer.deserialize(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "setSessionManager", "parameters": "(SessionManager sessionManager)", "modifiers": "@Override public", "return": "void", "signature": "void setSessionManager(SessionManager sessionManager)", "full_signature": "@Override public void setSessionManager(SessionManager sessionManager)", "class_method_signature": "EncryptingSerializerDeserializer.setSessionManager(SessionManager sessionManager)", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/EncryptingSerializerDeserializer.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(byte[] data)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n  public Object deserialize(byte[] data) {\n    byte[] decrypted;\n    try {\n      Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n      byte[] iv = new byte[16];\n      System.arraycopy(data, 0, iv, 0, iv.length);\n      cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(iv));\n      decrypted = cipher.doFinal(data, iv.length, data.length-iv.length);\n    } catch (Exception e) { // NOSONAR\n      throw new IllegalStateException(e);\n    }\n    return wrapped.deserialize(decrypted);\n  }", "signature": "Object deserialize(byte[] data)", "full_signature": "@Override public Object deserialize(byte[] data)", "class_method_signature": "EncryptingSerializerDeserializer.deserialize(byte[] data)", "testcase": false, "constructor": false, "invocations": ["getInstance", "arraycopy", "init", "doFinal", "deserialize"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}