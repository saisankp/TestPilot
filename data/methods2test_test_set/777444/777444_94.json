{"test_class": {"identifier": "IoUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "agent/core/src/test/java/org/jolokia/util/IoUtilTest.java"}, "test_case": {"identifier": "checkSmallWrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkSmallWrite() throws IOException {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n\n        JSONObject resp = new JSONObject();\n        resp.put(\"value\", \"hello\");\n        String respString = resp.toJSONString();\n\n        IoUtil.streamResponseAndClose(writer,resp,null);\n        assertEquals(out.size(), respString.length());\n        assertEquals(out.toString(\"UTF-8\"), respString);\n        assertWriterClosed(writer);\n    }", "signature": "void checkSmallWrite()", "full_signature": "@Test public void checkSmallWrite()", "class_method_signature": "IoUtilTest.checkSmallWrite()", "testcase": true, "constructor": false, "invocations": ["put", "toJSONString", "streamResponseAndClose", "assertEquals", "size", "length", "assertEquals", "toString", "assertWriterClosed"]}, "focal_class": {"identifier": "IoUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static char[] STREAM_END_MARKER = {};", "modifier": "private final static", "type": "char[]", "declarator": "STREAM_END_MARKER = {}", "var_name": "STREAM_END_MARKER"}], "methods": [{"identifier": "IoUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " IoUtil()", "full_signature": "private  IoUtil()", "class_method_signature": "IoUtil.IoUtil()", "testcase": false, "constructor": true}, {"identifier": "streamResponseAndClose", "parameters": "(Writer pWriter, JSONStreamAware pJson, String callback)", "modifiers": "public static", "return": "void", "signature": "void streamResponseAndClose(Writer pWriter, JSONStreamAware pJson, String callback)", "full_signature": "public static void streamResponseAndClose(Writer pWriter, JSONStreamAware pJson, String callback)", "class_method_signature": "IoUtil.streamResponseAndClose(Writer pWriter, JSONStreamAware pJson, String callback)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/util/IoUtil.java"}, "focal_method": {"identifier": "streamResponseAndClose", "parameters": "(Writer pWriter, JSONStreamAware pJson, String callback)", "modifiers": "public static", "return": "void", "body": "public static void streamResponseAndClose(Writer pWriter, JSONStreamAware pJson, String callback)\n        throws IOException {\n        try {\n            if (callback == null) {\n                pJson.writeJSONString(pWriter);\n            } else {\n                pWriter.write(callback);\n                pWriter.write(\"(\");\n                pJson.writeJSONString(pWriter);\n                pWriter.write(\");\");\n            }\n            // Writer end marker for chunked responses\n            pWriter.write(STREAM_END_MARKER);\n        } finally {\n            // Flush and close, even on an exception to avoid locks in the thread\n            pWriter.flush();\n            pWriter.close();\n        }\n    }", "signature": "void streamResponseAndClose(Writer pWriter, JSONStreamAware pJson, String callback)", "full_signature": "public static void streamResponseAndClose(Writer pWriter, JSONStreamAware pJson, String callback)", "class_method_signature": "IoUtil.streamResponseAndClose(Writer pWriter, JSONStreamAware pJson, String callback)", "testcase": false, "constructor": false, "invocations": ["writeJSONString", "write", "write", "writeJSONString", "write", "write", "flush", "close"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}