{"test_class": {"identifier": "RCUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}], "file": "restcomm.android.sdk/src/test/java/org/restcomm/android/sdk/util/RCUtilsTest.java"}, "test_case": {"identifier": "validateConnectionParams_Valid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validateConnectionParams_Valid() {\n        HashMap<String, Object> connectParams = new HashMap<String, Object>();\n\n        //CONNECTION_PEER ok\n        connectParams.put(RCConnection.ParameterKeys.CONNECTION_PEER, \"restcomm\");\n        connectParams.put(RCConnection.ParameterKeys.CONNECTION_VIDEO_ENABLED, true);\n\n        connectParams.put(RCConnection.ParameterKeys.CONNECTION_VIDEO_ENABLED, true);\n        connectParams.put(RCConnection.ParameterKeys.CONNECTION_LOCAL_VIDEO, new PercentFrameLayout(context));\n        connectParams.put(RCConnection.ParameterKeys.CONNECTION_LOCAL_VIDEO, new PercentFrameLayout(context));\n        connectParams.put(RCConnection.ParameterKeys.CONNECTION_REMOTE_VIDEO, new PercentFrameLayout(context));\n        try {\n            connectParams.put(RCConnection.ParameterKeys.CONNECTION_VIDEO_ENABLED, false);\n            RCUtils.validateConnectionParms(connectParams);\n        } catch (RCException ex) {\n            fail(ex.toString());\n        }\n    }", "signature": "void validateConnectionParams_Valid()", "full_signature": "@Test public void validateConnectionParams_Valid()", "class_method_signature": "RCUtilsTest.validateConnectionParams_Valid()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "put", "put", "validateConnectionParms", "fail", "toString"]}, "focal_class": {"identifier": "RCUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"RCUtils\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"RCUtils\"", "var_name": "TAG"}], "methods": [{"identifier": "validateDeviceParms", "parameters": "(HashMap<String, Object> parameters)", "modifiers": "public static", "return": "void", "signature": "void validateDeviceParms(HashMap<String, Object> parameters)", "full_signature": "public static void validateDeviceParms(HashMap<String, Object> parameters)", "class_method_signature": "RCUtils.validateDeviceParms(HashMap<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "validateSettingsParms", "parameters": "(HashMap<String, Object> parameters)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "void", "signature": "void validateSettingsParms(HashMap<String, Object> parameters)", "full_signature": "@SuppressWarnings(\"unchecked\") public static void validateSettingsParms(HashMap<String, Object> parameters)", "class_method_signature": "RCUtils.validateSettingsParms(HashMap<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "validateConnectionParms", "parameters": "(HashMap<String, Object> parameters)", "modifiers": "public static", "return": "void", "signature": "void validateConnectionParms(HashMap<String, Object> parameters)", "full_signature": "public static void validateConnectionParms(HashMap<String, Object> parameters)", "class_method_signature": "RCUtils.validateConnectionParms(HashMap<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "validatePushSettings", "parameters": "(HashMap<String, Object> parameters)", "modifiers": "static", "return": "void", "signature": "void validatePushSettings(HashMap<String, Object> parameters)", "full_signature": "static void validatePushSettings(HashMap<String, Object> parameters)", "class_method_signature": "RCUtils.validatePushSettings(HashMap<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "shouldRegisterForPush", "parameters": "(HashMap<String, Object> parameters, StorageManagerInterface storageManagerInterface)", "modifiers": "public static", "return": "boolean", "signature": "boolean shouldRegisterForPush(HashMap<String, Object> parameters, StorageManagerInterface storageManagerInterface)", "full_signature": "public static boolean shouldRegisterForPush(HashMap<String, Object> parameters, StorageManagerInterface storageManagerInterface)", "class_method_signature": "RCUtils.shouldRegisterForPush(HashMap<String, Object> parameters, StorageManagerInterface storageManagerInterface)", "testcase": false, "constructor": false}], "file": "restcomm.android.sdk/src/main/java/org/restcomm/android/sdk/util/RCUtils.java"}, "focal_method": {"identifier": "validateConnectionParms", "parameters": "(HashMap<String, Object> parameters)", "modifiers": "public static", "return": "void", "body": "public static void validateConnectionParms(HashMap<String, Object> parameters) throws RCException\n    {\n        if (!parameters.containsKey(RCConnection.ParameterKeys.CONNECTION_PEER) ||\n                parameters.get(RCConnection.ParameterKeys.CONNECTION_PEER).equals(\"\")) {\n            throw new RCException(RCClient.ErrorCodes.ERROR_CONNECTION_MISSING_PEER);\n        }\n        if (parameters.containsKey(RCConnection.ParameterKeys.CONNECTION_VIDEO_ENABLED) &&\n                (boolean)parameters.get(RCConnection.ParameterKeys.CONNECTION_VIDEO_ENABLED)) {\n            // video call\n\n            if (!parameters.containsKey(RCConnection.ParameterKeys.CONNECTION_LOCAL_VIDEO) ||\n                    parameters.get(RCConnection.ParameterKeys.CONNECTION_LOCAL_VIDEO) == null ||\n                    !parameters.containsKey(RCConnection.ParameterKeys.CONNECTION_REMOTE_VIDEO) ||\n                    parameters.get(RCConnection.ParameterKeys.CONNECTION_REMOTE_VIDEO) == null) {\n                throw new RCException(RCClient.ErrorCodes.ERROR_CONNECTION_VIDEO_CALL_VIEWS_MANDATORY);\n            }\n        }\n        else {\n            // audio-only call\n            if (parameters.containsKey(RCConnection.ParameterKeys.CONNECTION_LOCAL_VIDEO)) {\n                RCLogger.w(TAG, \"validateConnectionParms(): WARN, local video  doesn't take effect since the call is audio-only\" + parameters.toString());\n            }\n\n            if (parameters.containsKey(RCConnection.ParameterKeys.CONNECTION_REMOTE_VIDEO)) {\n                RCLogger.w(TAG, \"validateConnectionParms(): WARN, remote video doesn't take effect since the call is audio-only\" + parameters.toString());\n            }\n\n            if (parameters.containsKey(RCConnection.ParameterKeys.CONNECTION_PREFERRED_VIDEO_CODEC)) {\n                // should not throw exception because we 'll be breaking backwards compatibility pretty badly. Let's instead log this\n                //throw new RCException(RCClient.ErrorCodes.ERROR_CONNECTION_AUDIO_CALL_VIDEO_CODEC_FORBIDDEN);\n                RCLogger.w(TAG, \"validateConnectionParms(): WARN, video codec doesn't take effect since the call is audio-only\" + parameters.toString());\n            }\n            if (parameters.containsKey(RCConnection.ParameterKeys.CONNECTION_PREFERRED_VIDEO_RESOLUTION)) {\n                //throw new RCException(RCClient.ErrorCodes.ERROR_CONNECTION_AUDIO_CALL_VIDEO_RESOLUTION_FORBIDDEN);\n                RCLogger.w(TAG, \"validateConnectionParms(): WARN, video resolution doesn't take effect since the call is audio-only\" + parameters.toString());\n            }\n            if (parameters.containsKey(RCConnection.ParameterKeys.CONNECTION_PREFERRED_VIDEO_FRAME_RATE)) {\n                //throw new RCException(RCClient.ErrorCodes.ERROR_CONNECTION_AUDIO_CALL_VIDEO_FRAME_RATE_FORBIDDEN);\n                RCLogger.w(TAG, \"validateConnectionParms(): WARN, video frame rate doesn't take effect since the call is audio-only\" + parameters.toString());\n            }\n\n        }\n\n    }", "signature": "void validateConnectionParms(HashMap<String, Object> parameters)", "full_signature": "public static void validateConnectionParms(HashMap<String, Object> parameters)", "class_method_signature": "RCUtils.validateConnectionParms(HashMap<String, Object> parameters)", "testcase": false, "constructor": false, "invocations": ["containsKey", "equals", "get", "containsKey", "get", "containsKey", "get", "containsKey", "get", "containsKey", "w", "toString", "containsKey", "w", "toString", "containsKey", "w", "toString", "containsKey", "w", "toString", "containsKey", "w", "toString"]}, "repository": {"repo_id": 23749387, "url": "https://github.com/RestComm/restcomm-android-sdk", "language": "Java", "is_fork": false, "fork_count": 102, "stargazer_count": 129, "size": 28987, "license": "licensed"}}