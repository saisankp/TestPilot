{"test_class": {"identifier": "SequenceAwareXslResponseGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final byte[] requestXml = new byte[1];", "modifier": "private final", "type": "byte[]", "declarator": "requestXml = new byte[1]", "var_name": "requestXml"}, {"original_string": "private final byte[] xsl = new byte[2];", "modifier": "private final", "type": "byte[]", "declarator": "xsl = new byte[2]", "var_name": "xsl"}, {"original_string": "private final byte[] templateXml = new byte[3];", "modifier": "private final", "type": "byte[]", "declarator": "templateXml = new byte[3]", "var_name": "templateXml"}, {"original_string": "@Mock\n    private SequenceAwareXslTransformer transformer;", "modifier": "@Mock\n    private", "type": "SequenceAwareXslTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "@Mock\n    private ByteArrayInputStreamFactory inputStreamFactory;", "modifier": "@Mock\n    private", "type": "ByteArrayInputStreamFactory", "declarator": "inputStreamFactory", "var_name": "inputStreamFactory"}, {"original_string": "@Mock\n    private ByteArrayInputStream requestInputStream;", "modifier": "@Mock\n    private", "type": "ByteArrayInputStream", "declarator": "requestInputStream", "var_name": "requestInputStream"}, {"original_string": "@Mock\n    private ByteArrayInputStream xslInputStream;", "modifier": "@Mock\n    private", "type": "ByteArrayInputStream", "declarator": "xslInputStream", "var_name": "xslInputStream"}, {"original_string": "@Mock\n    private ByteArrayInputStream templateInputStream;", "modifier": "@Mock\n    private", "type": "ByteArrayInputStream", "declarator": "templateInputStream", "var_name": "templateInputStream"}, {"original_string": "@Mock\n    private Map<String, String> nameToXml;", "modifier": "@Mock\n    private", "type": "Map<String, String>", "declarator": "nameToXml", "var_name": "nameToXml"}, {"original_string": "@InjectMocks\n    private SequenceAwareXslResponseGenerator underTest;", "modifier": "@InjectMocks\n    private", "type": "SequenceAwareXslResponseGenerator", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/sequence/formatters/xsl/SequenceAwareXslResponseGeneratorTest.java"}, "test_case": {"identifier": "testGenerateResponseShouldReturnResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateResponseShouldReturnResponse() throws SaxonApiException, SAXException {\n        //GIVEN\n        byte[] response = new byte[1];\n        given(transformer.transform(xslInputStream, requestInputStream, templateInputStream, nameToXml)).willReturn(response);\n        //WHEN\n        byte[] actual = underTest.generateResponse(requestXml, xsl, templateXml, nameToXml);\n        //THEN\n        assertEquals(actual, response);\n    }", "signature": "void testGenerateResponseShouldReturnResponse()", "full_signature": "@Test public void testGenerateResponseShouldReturnResponse()", "class_method_signature": "SequenceAwareXslResponseGeneratorTest.testGenerateResponseShouldReturnResponse()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "transform", "generateResponse", "assertEquals"]}, "focal_class": {"identifier": "SequenceAwareXslResponseGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SequenceAwareXslTransformer transformer;", "modifier": "@Autowired\n    private", "type": "SequenceAwareXslTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "@Autowired\n    private ByteArrayInputStreamFactory inputStreamFactory;", "modifier": "@Autowired\n    private", "type": "ByteArrayInputStreamFactory", "declarator": "inputStreamFactory", "var_name": "inputStreamFactory"}], "methods": [{"identifier": "generateResponse", "parameters": "(final byte[] requestXmlResource, final byte[] xsl, final byte[] template, final Map<String, String> nameToXml)", "modifiers": "public", "return": "byte[]", "signature": "byte[] generateResponse(final byte[] requestXmlResource, final byte[] xsl, final byte[] template, final Map<String, String> nameToXml)", "full_signature": "public byte[] generateResponse(final byte[] requestXmlResource, final byte[] xsl, final byte[] template, final Map<String, String> nameToXml)", "class_method_signature": "SequenceAwareXslResponseGenerator.generateResponse(final byte[] requestXmlResource, final byte[] xsl, final byte[] template, final Map<String, String> nameToXml)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/sequence/formatters/xsl/SequenceAwareXslResponseGenerator.java"}, "focal_method": {"identifier": "generateResponse", "parameters": "(final byte[] requestXmlResource, final byte[] xsl, final byte[] template, final Map<String, String> nameToXml)", "modifiers": "public", "return": "byte[]", "body": "public byte[] generateResponse(final byte[] requestXmlResource, final byte[] xsl, final byte[] template, final Map<String, String> nameToXml) {\n        byte[] result;\n        InputStream requestInputStream = inputStreamFactory.createByteArrayInputStream(requestXmlResource);\n        InputStream xslInputStream = inputStreamFactory.createByteArrayInputStream(xsl);\n        InputStream templateInputStream = inputStreamFactory.createByteArrayInputStream(template);\n        try {\n            result = transformer.transform(xslInputStream, requestInputStream, templateInputStream, nameToXml);\n        } catch (Exception e) {\n            throw new ResponseFormattingFailedException(\"Template formatting failed with xslt:\" + xsl, e);\n        }\n        return result;\n    }", "signature": "byte[] generateResponse(final byte[] requestXmlResource, final byte[] xsl, final byte[] template, final Map<String, String> nameToXml)", "full_signature": "public byte[] generateResponse(final byte[] requestXmlResource, final byte[] xsl, final byte[] template, final Map<String, String> nameToXml)", "class_method_signature": "SequenceAwareXslResponseGenerator.generateResponse(final byte[] requestXmlResource, final byte[] xsl, final byte[] template, final Map<String, String> nameToXml)", "testcase": false, "constructor": false, "invocations": ["createByteArrayInputStream", "createByteArrayInputStream", "createByteArrayInputStream", "transform"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}