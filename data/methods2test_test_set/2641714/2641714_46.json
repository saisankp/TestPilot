{"test_class": {"identifier": "PutListAttributeModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PutListAttributeModel model;", "modifier": "private", "type": "PutListAttributeModel", "declarator": "model", "var_name": "model"}], "file": "tiles-template/src/test/java/org/apache/tiles/template/PutListAttributeModelTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws IOException {\n        TilesContainer container = createMock(TilesContainer.class);\n        AttributeContext attributeContext = createMock(AttributeContext.class);\n        Request request = createMock(Request.class);\n        Deque<Object> composeStack = new ArrayDeque<Object>();\n        Map<String, Object> requestScope = new HashMap<String, Object>();\n        requestScope.put(ComposeStackUtil.COMPOSE_STACK_ATTRIBUTE_NAME, composeStack);\n        requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\n        ApplicationContext applicationContext = createMock(ApplicationContext.class);\n        ModelBody modelBody = createMock(ModelBody.class);\n\n        modelBody.evaluateWithoutWriting();\n        expect(request.getApplicationContext()).andReturn(applicationContext);\n        expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\n        expect(container.getAttributeContext(request)).andReturn(attributeContext);\n        attributeContext.putAttribute(eq(\"myName\"), isA(ListAttribute.class), eq(false));\n\n        replay(container, attributeContext, request, modelBody);\n        model.execute(\"myName\", \"myRole\", false, false, request, modelBody);\n        assertEquals(0, composeStack.size());\n        verify(container, attributeContext, request, modelBody);\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "PutListAttributeModelTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "put", "put", "createMock", "createMock", "evaluateWithoutWriting", "andReturn", "expect", "getApplicationContext", "anyTimes", "andReturn", "expect", "getContext", "andReturn", "expect", "getAttributeContext", "putAttribute", "eq", "isA", "eq", "replay", "execute", "assertEquals", "size", "verify"]}, "focal_class": {"identifier": "PutListAttributeModel", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "execute", "parameters": "(@Parameter(required = true) String name, String role,\n            boolean inherit, boolean cascade, Request request,\n            ModelBody modelBody)", "modifiers": "public", "return": "void", "signature": "void execute(@Parameter(required = true) String name, String role,\n            boolean inherit, boolean cascade, Request request,\n            ModelBody modelBody)", "full_signature": "public void execute(@Parameter(required = true) String name, String role,\n            boolean inherit, boolean cascade, Request request,\n            ModelBody modelBody)", "class_method_signature": "PutListAttributeModel.execute(@Parameter(required = true) String name, String role,\n            boolean inherit, boolean cascade, Request request,\n            ModelBody modelBody)", "testcase": false, "constructor": false}], "file": "tiles-template/src/main/java/org/apache/tiles/template/PutListAttributeModel.java"}, "focal_method": {"identifier": "execute", "parameters": "(@Parameter(required = true) String name, String role,\n            boolean inherit, boolean cascade, Request request,\n            ModelBody modelBody)", "modifiers": "public", "return": "void", "body": "public void execute(@Parameter(required = true) String name, String role,\n            boolean inherit, boolean cascade, Request request,\n            ModelBody modelBody) throws IOException {\n        Deque<Object> composeStack = ComposeStackUtil.getComposeStack(request);\n        ListAttribute listAttribute = new ListAttribute();\n        listAttribute.setRole(role);\n        listAttribute.setInherit(inherit);\n        composeStack.push(listAttribute);\n        modelBody.evaluateWithoutWriting();\n        TilesContainer container = TilesAccess.getCurrentContainer(request);\n        listAttribute = (ListAttribute) composeStack.pop();\n        AttributeContext attributeContext = null;\n        if (!composeStack.isEmpty()) {\n            Object obj = composeStack.peek();\n            if (obj instanceof Definition) {\n                attributeContext = (AttributeContext) obj;\n            }\n        }\n        if (attributeContext == null) {\n            attributeContext = container.getAttributeContext(request);\n        }\n        attributeContext.putAttribute(name, listAttribute, cascade);\n    }", "signature": "void execute(@Parameter(required = true) String name, String role,\n            boolean inherit, boolean cascade, Request request,\n            ModelBody modelBody)", "full_signature": "public void execute(@Parameter(required = true) String name, String role,\n            boolean inherit, boolean cascade, Request request,\n            ModelBody modelBody)", "class_method_signature": "PutListAttributeModel.execute(@Parameter(required = true) String name, String role,\n            boolean inherit, boolean cascade, Request request,\n            ModelBody modelBody)", "testcase": false, "constructor": false, "invocations": ["getComposeStack", "setRole", "setInherit", "push", "evaluateWithoutWriting", "getCurrentContainer", "pop", "isEmpty", "peek", "getAttributeContext", "putAttribute"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}