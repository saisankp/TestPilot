{"test_class": {"identifier": "AccountsManagerTest", "superclass": "extends ExpectedExceptionTest", "interfaces": "", "fields": [{"original_string": "AccountsManager accountsManager = null;", "modifier": "", "type": "AccountsManager", "declarator": "accountsManager = null", "var_name": "accountsManager"}, {"original_string": "Accounts accounts = null;", "modifier": "", "type": "Accounts", "declarator": "accounts = null", "var_name": "accounts"}, {"original_string": "ShardOperation operation = null;", "modifier": "", "type": "ShardOperation", "declarator": "operation = null", "var_name": "operation"}], "file": "elrond-core/src/test/java/network/elrond/account/AccountsManagerTest.java"}, "test_case": {"identifier": "testHasFundsWithNullAddressShouldThrowException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHasFundsWithNullAddressShouldThrowException() throws IOException, ClassNotFoundException {\n        expected(IllegalArgumentException.class, \"addressString!=null\");\n        accountsManager.hasFunds(accounts, null, BigInteger.TEN);\n    }", "signature": "void testHasFundsWithNullAddressShouldThrowException()", "full_signature": "@Test public void testHasFundsWithNullAddressShouldThrowException()", "class_method_signature": "AccountsManagerTest.testHasFundsWithNullAddressShouldThrowException()", "testcase": true, "constructor": false, "invocations": ["expected", "hasFunds"]}, "focal_class": {"identifier": "AccountsManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LogManager.getLogger(AccountsManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LogManager.getLogger(AccountsManager.class)", "var_name": "logger"}, {"original_string": "private static AccountsManager instance = new AccountsManager();", "modifier": "private static", "type": "AccountsManager", "declarator": "instance = new AccountsManager()", "var_name": "instance"}], "methods": [{"identifier": "instance", "parameters": "()", "modifiers": "public static", "return": "AccountsManager", "signature": "AccountsManager instance()", "full_signature": "public static AccountsManager instance()", "class_method_signature": "AccountsManager.instance()", "testcase": false, "constructor": false}, {"identifier": "hasFunds", "parameters": "(Accounts accounts, String addressString, BigInteger value)", "modifiers": "public", "return": "Boolean", "signature": "Boolean hasFunds(Accounts accounts, String addressString, BigInteger value)", "full_signature": "public Boolean hasFunds(Accounts accounts, String addressString, BigInteger value)", "class_method_signature": "AccountsManager.hasFunds(Accounts accounts, String addressString, BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "hasCorrectNonce", "parameters": "(Accounts accounts, String addressString, BigInteger nonce)", "modifiers": "public", "return": "Boolean", "signature": "Boolean hasCorrectNonce(Accounts accounts, String addressString, BigInteger nonce)", "full_signature": "public Boolean hasCorrectNonce(Accounts accounts, String addressString, BigInteger nonce)", "class_method_signature": "AccountsManager.hasCorrectNonce(Accounts accounts, String addressString, BigInteger nonce)", "testcase": false, "constructor": false}, {"identifier": "transferFunds", "parameters": "(Accounts accounts, String senderAddress, String receiverAddress, BigInteger value, BigInteger nonce, ShardOperation operation)", "modifiers": "public", "return": "void", "signature": "void transferFunds(Accounts accounts, String senderAddress, String receiverAddress, BigInteger value, BigInteger nonce, ShardOperation operation)", "full_signature": "public void transferFunds(Accounts accounts, String senderAddress, String receiverAddress, BigInteger value, BigInteger nonce, ShardOperation operation)", "class_method_signature": "AccountsManager.transferFunds(Accounts accounts, String senderAddress, String receiverAddress, BigInteger value, BigInteger nonce, ShardOperation operation)", "testcase": false, "constructor": false}], "file": "elrond-core/src/main/java/network/elrond/account/AccountsManager.java"}, "focal_method": {"identifier": "hasFunds", "parameters": "(Accounts accounts, String addressString, BigInteger value)", "modifiers": "public", "return": "Boolean", "body": "public Boolean hasFunds(Accounts accounts, String addressString, BigInteger value) throws IOException, ClassNotFoundException {\n        logger.traceEntry(\"params: {} {} {}\", accounts, addressString, value);\n        Util.check(accounts != null, \"accounts!=null\");\n        Util.check(!(addressString == null || addressString.isEmpty()), \"addressString!=null\");\n\n        AccountAddress sendAddress = AccountAddress.fromHexString(addressString);\n        AccountState senderAccountState = AppServiceProvider.getAccountStateService().getOrCreateAccountState(sendAddress, accounts);\n\n        return logger.traceExit(senderAccountState.getBalance().compareTo(value) >= 0);\n    }", "signature": "Boolean hasFunds(Accounts accounts, String addressString, BigInteger value)", "full_signature": "public Boolean hasFunds(Accounts accounts, String addressString, BigInteger value)", "class_method_signature": "AccountsManager.hasFunds(Accounts accounts, String addressString, BigInteger value)", "testcase": false, "constructor": false, "invocations": ["traceEntry", "check", "check", "isEmpty", "fromHexString", "getOrCreateAccountState", "getAccountStateService", "traceExit", "compareTo", "getBalance"]}, "repository": {"repo_id": 132454935, "url": "https://github.com/ElrondNetwork/elrond-node-prototype", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 16635, "license": "licensed"}}