{"test_class": {"identifier": "ComputeUtilsTest", "superclass": "extends GridCommonAbstractTest", "interfaces": "", "fields": [{"original_string": "private static final int NODE_COUNT = 10;", "modifier": "private static final", "type": "int", "declarator": "NODE_COUNT = 10", "var_name": "NODE_COUNT"}, {"original_string": "private Ignite ignite;", "modifier": "private", "type": "Ignite", "declarator": "ignite", "var_name": "ignite"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/dataset/impl/cache/util/ComputeUtilsTest.java"}, "test_case": {"identifier": "testAffinityCallWithRetriesNegative", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAffinityCallWithRetriesNegative() {\n        ClusterNode node1 = grid(1).cluster().localNode();\n        ClusterNode node2 = grid(2).cluster().localNode();\n\n        String firstCacheName = \"CACHE_1_\" + UUID.randomUUID();\n        String secondCacheName = \"CACHE_2_\" + UUID.randomUUID();\n\n        CacheConfiguration<Integer, Integer> cacheConfiguration1 = new CacheConfiguration<>();\n        cacheConfiguration1.setName(firstCacheName);\n        cacheConfiguration1.setAffinity(new TestAffinityFunction(node1));\n        IgniteCache<Integer, Integer> cache1 = ignite.createCache(cacheConfiguration1);\n\n        CacheConfiguration<Integer, Integer> cacheConfiguration2 = new CacheConfiguration<>();\n        cacheConfiguration2.setName(secondCacheName);\n        cacheConfiguration2.setAffinity(new TestAffinityFunction(node2));\n        IgniteCache<Integer, Integer> cache2 = ignite.createCache(cacheConfiguration2);\n\n        try {\n            try {\n                ComputeUtils.affinityCallWithRetries(\n                    ignite,\n                    Arrays.asList(firstCacheName, secondCacheName),\n                    part -> part,\n                    0,\n                    DeployingContext.unitialized()\n                );\n            }\n            catch (IllegalStateException expectedException) {\n                return;\n            }\n\n            fail(\"Missing IllegalStateException\");\n        }\n        finally {\n            cache1.destroy();\n            cache2.destroy();\n        }\n    }", "signature": "void testAffinityCallWithRetriesNegative()", "full_signature": "@Test public void testAffinityCallWithRetriesNegative()", "class_method_signature": "ComputeUtilsTest.testAffinityCallWithRetriesNegative()", "testcase": true, "constructor": false, "invocations": ["localNode", "cluster", "grid", "localNode", "cluster", "grid", "randomUUID", "randomUUID", "setName", "setAffinity", "createCache", "setName", "setAffinity", "createCache", "affinityCallWithRetries", "asList", "unitialized", "fail", "destroy", "destroy"]}, "focal_class": {"identifier": "ComputeUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DATA_STORAGE_KEY_TEMPLATE = \"part_data_storage_%s\";", "modifier": "private static final", "type": "String", "declarator": "DATA_STORAGE_KEY_TEMPLATE = \"part_data_storage_%s\"", "var_name": "DATA_STORAGE_KEY_TEMPLATE"}, {"original_string": "private static final String ENVIRONMENT_STORAGE_KEY_TEMPLATE = \"part_environment_storage_%s\";", "modifier": "private static final", "type": "String", "declarator": "ENVIRONMENT_STORAGE_KEY_TEMPLATE = \"part_environment_storage_%s\"", "var_name": "ENVIRONMENT_STORAGE_KEY_TEMPLATE"}], "methods": [{"identifier": "affinityCallWithRetries", "parameters": "(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, int interval, DeployingContext deployingContext)", "modifiers": "public static", "return": "Collection<R>", "signature": "Collection<R> affinityCallWithRetries(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, int interval, DeployingContext deployingContext)", "full_signature": "public static Collection<R> affinityCallWithRetries(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, int interval, DeployingContext deployingContext)", "class_method_signature": "ComputeUtils.affinityCallWithRetries(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, int interval, DeployingContext deployingContext)", "testcase": false, "constructor": false}, {"identifier": "affinityCallWithRetries", "parameters": "(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, DeployingContext deployingContext)", "modifiers": "public static", "return": "Collection<R>", "signature": "Collection<R> affinityCallWithRetries(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, DeployingContext deployingContext)", "full_signature": "public static Collection<R> affinityCallWithRetries(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, DeployingContext deployingContext)", "class_method_signature": "ComputeUtils.affinityCallWithRetries(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, DeployingContext deployingContext)", "testcase": false, "constructor": false}, {"identifier": "getLearningEnvironment", "parameters": "(Ignite ignite,\n        UUID datasetId,\n        int part,\n        LearningEnvironmentBuilder envBuilder)", "modifiers": "public static", "return": "LearningEnvironment", "signature": "LearningEnvironment getLearningEnvironment(Ignite ignite,\n        UUID datasetId,\n        int part,\n        LearningEnvironmentBuilder envBuilder)", "full_signature": "public static LearningEnvironment getLearningEnvironment(Ignite ignite,\n        UUID datasetId,\n        int part,\n        LearningEnvironmentBuilder envBuilder)", "class_method_signature": "ComputeUtils.getLearningEnvironment(Ignite ignite,\n        UUID datasetId,\n        int part,\n        LearningEnvironmentBuilder envBuilder)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(\n        Ignite ignite,\n        String upstreamCacheName, IgniteBiPredicate<K, V> filter,\n        UpstreamTransformerBuilder transformerBuilder,\n        String datasetCacheName, UUID datasetId,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment env,\n        boolean isKeepBinary)", "modifiers": "public static", "return": "D", "signature": "D getData(\n        Ignite ignite,\n        String upstreamCacheName, IgniteBiPredicate<K, V> filter,\n        UpstreamTransformerBuilder transformerBuilder,\n        String datasetCacheName, UUID datasetId,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment env,\n        boolean isKeepBinary)", "full_signature": "public static D getData(\n        Ignite ignite,\n        String upstreamCacheName, IgniteBiPredicate<K, V> filter,\n        UpstreamTransformerBuilder transformerBuilder,\n        String datasetCacheName, UUID datasetId,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment env,\n        boolean isKeepBinary)", "class_method_signature": "ComputeUtils.getData(\n        Ignite ignite,\n        String upstreamCacheName, IgniteBiPredicate<K, V> filter,\n        UpstreamTransformerBuilder transformerBuilder,\n        String datasetCacheName, UUID datasetId,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment env,\n        boolean isKeepBinary)", "testcase": false, "constructor": false}, {"identifier": "removeData", "parameters": "(Ignite ignite, UUID datasetId)", "modifiers": "public static", "return": "void", "signature": "void removeData(Ignite ignite, UUID datasetId)", "full_signature": "public static void removeData(Ignite ignite, UUID datasetId)", "class_method_signature": "ComputeUtils.removeData(Ignite ignite, UUID datasetId)", "testcase": false, "constructor": false}, {"identifier": "removeLearningEnv", "parameters": "(Ignite ignite, UUID datasetId)", "modifiers": "public static", "return": "void", "signature": "void removeLearningEnv(Ignite ignite, UUID datasetId)", "full_signature": "public static void removeLearningEnv(Ignite ignite, UUID datasetId)", "class_method_signature": "ComputeUtils.removeLearningEnv(Ignite ignite, UUID datasetId)", "testcase": false, "constructor": false}, {"identifier": "initContext", "parameters": "(\n        Ignite ignite,\n        String upstreamCacheName,\n        UpstreamTransformerBuilder transformerBuilder,\n        IgniteBiPredicate<K, V> filter,\n        String datasetCacheName,\n        PartitionContextBuilder<K, V, C> ctxBuilder,\n        LearningEnvironmentBuilder envBuilder,\n        int retries,\n        int interval,\n        boolean isKeepBinary,\n        DeployingContext deployingContext)", "modifiers": "public static", "return": "void", "signature": "void initContext(\n        Ignite ignite,\n        String upstreamCacheName,\n        UpstreamTransformerBuilder transformerBuilder,\n        IgniteBiPredicate<K, V> filter,\n        String datasetCacheName,\n        PartitionContextBuilder<K, V, C> ctxBuilder,\n        LearningEnvironmentBuilder envBuilder,\n        int retries,\n        int interval,\n        boolean isKeepBinary,\n        DeployingContext deployingContext)", "full_signature": "public static void initContext(\n        Ignite ignite,\n        String upstreamCacheName,\n        UpstreamTransformerBuilder transformerBuilder,\n        IgniteBiPredicate<K, V> filter,\n        String datasetCacheName,\n        PartitionContextBuilder<K, V, C> ctxBuilder,\n        LearningEnvironmentBuilder envBuilder,\n        int retries,\n        int interval,\n        boolean isKeepBinary,\n        DeployingContext deployingContext)", "class_method_signature": "ComputeUtils.initContext(\n        Ignite ignite,\n        String upstreamCacheName,\n        UpstreamTransformerBuilder transformerBuilder,\n        IgniteBiPredicate<K, V> filter,\n        String datasetCacheName,\n        PartitionContextBuilder<K, V, C> ctxBuilder,\n        LearningEnvironmentBuilder envBuilder,\n        int retries,\n        int interval,\n        boolean isKeepBinary,\n        DeployingContext deployingContext)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "(Ignite ignite, String datasetCacheName, int part)", "modifiers": "public static", "return": "C", "signature": "C getContext(Ignite ignite, String datasetCacheName, int part)", "full_signature": "public static C getContext(Ignite ignite, String datasetCacheName, int part)", "class_method_signature": "ComputeUtils.getContext(Ignite ignite, String datasetCacheName, int part)", "testcase": false, "constructor": false}, {"identifier": "saveContext", "parameters": "(Ignite ignite, String datasetCacheName, int part, C ctx)", "modifiers": "public static", "return": "void", "signature": "void saveContext(Ignite ignite, String datasetCacheName, int part, C ctx)", "full_signature": "public static void saveContext(Ignite ignite, String datasetCacheName, int part, C ctx)", "class_method_signature": "ComputeUtils.saveContext(Ignite ignite, String datasetCacheName, int part, C ctx)", "testcase": false, "constructor": false}, {"identifier": "computeCount", "parameters": "(\n        IgniteCache<K, V> cache,\n        ScanQuery<K, V> qry,\n        UpstreamTransformer transformer)", "modifiers": "private static", "return": "long", "signature": "long computeCount(\n        IgniteCache<K, V> cache,\n        ScanQuery<K, V> qry,\n        UpstreamTransformer transformer)", "full_signature": "private static long computeCount(\n        IgniteCache<K, V> cache,\n        ScanQuery<K, V> qry,\n        UpstreamTransformer transformer)", "class_method_signature": "ComputeUtils.computeCount(\n        IgniteCache<K, V> cache,\n        ScanQuery<K, V> qry,\n        UpstreamTransformer transformer)", "testcase": false, "constructor": false}, {"identifier": "computeCount", "parameters": "(Iterator<?> iter)", "modifiers": "private static", "return": "long", "signature": "long computeCount(Iterator<?> iter)", "full_signature": "private static long computeCount(Iterator<?> iter)", "class_method_signature": "ComputeUtils.computeCount(Iterator<?> iter)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/dataset/impl/cache/util/ComputeUtils.java"}, "focal_method": {"identifier": "affinityCallWithRetries", "parameters": "(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, int interval, DeployingContext deployingContext)", "modifiers": "public static", "return": "Collection<R>", "body": "public static <R> Collection<R> affinityCallWithRetries(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, int interval, DeployingContext deployingContext) {\n        assert !cacheNames.isEmpty();\n        assert interval >= 0;\n\n        String primaryCache = cacheNames.iterator().next();\n\n        Affinity<?> affinity = ignite.affinity(primaryCache);\n        int partitions = affinity.partitions();\n\n        BitSet completionFlags = new BitSet(partitions);\n        Collection<R> results = new ArrayList<>();\n\n        for (int t = 0; t <= retries; t++) {\n            ClusterGroup clusterGrp = ignite.cluster().forDataNodes(primaryCache);\n\n            // Sends jobs.\n            Map<Integer, IgniteFuture<R>> futures = new HashMap<>();\n            for (int part = 0; part < partitions; part++)\n                if (!completionFlags.get(part)) {\n                    final int currPart = part;\n\n                    futures.put(\n                        currPart,\n                        ignite.compute(clusterGrp).affinityCallAsync(\n                            cacheNames, currPart,\n                            new DeployableCallable<>(deployingContext, part, fun)\n                        )\n                    );\n                }\n\n            // Collects results.\n            for (int part : futures.keySet())\n                try {\n                    R res = futures.get(part).get();\n                    results.add(res);\n                    completionFlags.set(part);\n                }\n                catch (IgniteException ignore) {\n                }\n\n            if (completionFlags.cardinality() == partitions)\n                return results;\n\n            LockSupport.parkNanos(interval * 1_000_000);\n        }\n\n        throw new IllegalStateException();\n    }", "signature": "Collection<R> affinityCallWithRetries(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, int interval, DeployingContext deployingContext)", "full_signature": "public static Collection<R> affinityCallWithRetries(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, int interval, DeployingContext deployingContext)", "class_method_signature": "ComputeUtils.affinityCallWithRetries(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, int interval, DeployingContext deployingContext)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "next", "iterator", "affinity", "partitions", "forDataNodes", "cluster", "get", "put", "affinityCallAsync", "compute", "keySet", "get", "get", "add", "set", "cardinality", "parkNanos"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}