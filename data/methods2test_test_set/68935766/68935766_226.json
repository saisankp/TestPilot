{"test_class": {"identifier": "AnnotationProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "AnnotationProcessor processor = spy(new AnnotationProcessor() {});", "modifier": "", "type": "AnnotationProcessor", "declarator": "processor = spy(new AnnotationProcessor() {})", "var_name": "processor"}, {"original_string": "Messager messager = mock(Messager.class);", "modifier": "", "type": "Messager", "declarator": "messager = mock(Messager.class)", "var_name": "messager"}, {"original_string": "ProcessingEnvironment environment = when(mock(ProcessingEnvironment.class).getMessager()).thenReturn(messager).getMock();", "modifier": "", "type": "ProcessingEnvironment", "declarator": "environment = when(mock(ProcessingEnvironment.class).getMessager()).thenReturn(messager).getMock()", "var_name": "environment"}, {"original_string": "Element element = mock(Element.class);", "modifier": "", "type": "Element", "declarator": "element = mock(Element.class)", "var_name": "element"}], "file": "annotations/src/test/java/com/karuslabs/annotations/processor/AnnotationProcessorTest.java"}, "test_case": {"identifier": "process", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void process() {\n        RoundEnvironment round = mock(RoundEnvironment.class);\n        doReturn(Set.of(mock(Element.class))).when(round).getElementsAnnotatedWithAny(any(TypeElement[].class));\n        \n        assertFalse(processor.process(Set.of(), round));\n    }", "signature": "void process()", "full_signature": "@Test void process()", "class_method_signature": "AnnotationProcessorTest.process()", "testcase": true, "constructor": false, "invocations": ["mock", "getElementsAnnotatedWithAny", "when", "doReturn", "of", "mock", "any", "assertFalse", "process", "of"]}, "focal_class": {"identifier": "AnnotationProcessor", "superclass": "extends AbstractProcessor", "interfaces": "", "fields": [{"original_string": "protected Elements elements;", "modifier": "protected", "type": "Elements", "declarator": "elements", "var_name": "elements"}, {"original_string": "protected Types types;", "modifier": "protected", "type": "Types", "declarator": "types", "var_name": "types"}, {"original_string": "protected Logger logger;", "modifier": "protected", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "init", "parameters": "(ProcessingEnvironment environment)", "modifiers": "@Override public", "return": "void", "signature": "void init(ProcessingEnvironment environment)", "full_signature": "@Override public void init(ProcessingEnvironment environment)", "class_method_signature": "AnnotationProcessor.init(ProcessingEnvironment environment)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Set<? extends TypeElement> annotations, RoundEnvironment round)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean process(Set<? extends TypeElement> annotations, RoundEnvironment round)", "full_signature": "@Override public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment round)", "class_method_signature": "AnnotationProcessor.process(Set<? extends TypeElement> annotations, RoundEnvironment round)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Element element)", "modifiers": "@VisibleForOverride protected", "return": "void", "signature": "void process(Element element)", "full_signature": "@VisibleForOverride protected void process(Element element)", "class_method_signature": "AnnotationProcessor.process(Element element)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@VisibleForOverride protected", "return": "void", "signature": "void clear()", "full_signature": "@VisibleForOverride protected void clear()", "class_method_signature": "AnnotationProcessor.clear()", "testcase": false, "constructor": false}], "file": "annotations/src/main/java/com/karuslabs/annotations/processor/AnnotationProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "(Set<? extends TypeElement> annotations, RoundEnvironment round)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment round) {\n        for (var element : round.getElementsAnnotatedWithAny(annotations.toArray(new TypeElement[0]))) {\n            process(element);\n        }\n        \n        clear();\n        \n        return false;\n    }", "signature": "boolean process(Set<? extends TypeElement> annotations, RoundEnvironment round)", "full_signature": "@Override public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment round)", "class_method_signature": "AnnotationProcessor.process(Set<? extends TypeElement> annotations, RoundEnvironment round)", "testcase": false, "constructor": false, "invocations": ["getElementsAnnotatedWithAny", "toArray", "process", "clear"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}