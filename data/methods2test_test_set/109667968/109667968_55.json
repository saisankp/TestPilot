{"test_class": {"identifier": "BaseLocationClientTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "private TestLocationClient testLocationClient;", "modifier": "private", "type": "TestLocationClient", "declarator": "testLocationClient", "var_name": "testLocationClient"}], "file": "library/src/test/java/io/ona/kujaku/location/clients/BaseLocationClientTest.java"}, "test_case": {"identifier": "isBetterLocationWhenGivenSignificantlyNewerLocationShouldReturnTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isBetterLocationWhenGivenSignificantlyNewerLocationShouldReturnTrue() {\n        int significantlyOlder = (2 * 60 * 1000) + 20;\n        long timeNow = System.currentTimeMillis();\n\n        Location newLocation = generateLocation(12, timeNow);\n        Location currentLocation = generateLocation(3, timeNow - significantlyOlder);\n\n        assertTrue(testLocationClient.isBetterLocation(newLocation, currentLocation));\n    }", "signature": "void isBetterLocationWhenGivenSignificantlyNewerLocationShouldReturnTrue()", "full_signature": "@Test public void isBetterLocationWhenGivenSignificantlyNewerLocationShouldReturnTrue()", "class_method_signature": "BaseLocationClientTest.isBetterLocationWhenGivenSignificantlyNewerLocationShouldReturnTrue()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "generateLocation", "generateLocation", "assertTrue", "isBetterLocation"]}, "focal_class": {"identifier": "BaseLocationClient", "superclass": "", "interfaces": "implements ILocationClient", "fields": [{"original_string": "private LocationClientListener locationClientListener;", "modifier": "private", "type": "LocationClientListener", "declarator": "locationClientListener", "var_name": "locationClientListener"}, {"original_string": "private ArrayList<LocationListener> locationListeners = new ArrayList<>();", "modifier": "private", "type": "ArrayList<LocationListener>", "declarator": "locationListeners = new ArrayList<>()", "var_name": "locationListeners"}, {"original_string": "protected LocationManager locationManager;", "modifier": "protected", "type": "LocationManager", "declarator": "locationManager", "var_name": "locationManager"}, {"original_string": "protected Context context;", "modifier": "protected", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private static final int TWO_MINUTES = 1000 * 60 * 2;", "modifier": "private static final", "type": "int", "declarator": "TWO_MINUTES = 1000 * 60 * 2", "var_name": "TWO_MINUTES"}], "methods": [{"identifier": "setListener", "parameters": "(LocationClientListener locationClientListener)", "modifiers": "@Override public", "return": "void", "signature": "void setListener(LocationClientListener locationClientListener)", "full_signature": "@Override public void setListener(LocationClientListener locationClientListener)", "class_method_signature": "BaseLocationClient.setListener(LocationClientListener locationClientListener)", "testcase": false, "constructor": false}, {"identifier": "getListener", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "LocationClientListener", "signature": "LocationClientListener getListener()", "full_signature": "@Nullable @Override public LocationClientListener getListener()", "class_method_signature": "BaseLocationClient.getListener()", "testcase": false, "constructor": false}, {"identifier": "setLocationListener", "parameters": "(@Nullable LocationListener locationListener)", "modifiers": "@Deprecated @Override public", "return": "void", "signature": "void setLocationListener(@Nullable LocationListener locationListener)", "full_signature": "@Deprecated @Override public void setLocationListener(@Nullable LocationListener locationListener)", "class_method_signature": "BaseLocationClient.setLocationListener(@Nullable LocationListener locationListener)", "testcase": false, "constructor": false}, {"identifier": "getLocationListener", "parameters": "()", "modifiers": "@Deprecated @Nullable @Override public", "return": "LocationListener", "signature": "LocationListener getLocationListener()", "full_signature": "@Deprecated @Nullable @Override public LocationListener getLocationListener()", "class_method_signature": "BaseLocationClient.getLocationListener()", "testcase": false, "constructor": false}, {"identifier": "addLocationListener", "parameters": "(@NonNull LocationListener locationListener)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addLocationListener(@NonNull LocationListener locationListener)", "full_signature": "@Override public boolean addLocationListener(@NonNull LocationListener locationListener)", "class_method_signature": "BaseLocationClient.addLocationListener(@NonNull LocationListener locationListener)", "testcase": false, "constructor": false}, {"identifier": "getLocationListeners", "parameters": "()", "modifiers": "@Override public", "return": "ArrayList<LocationListener>", "signature": "ArrayList<LocationListener> getLocationListeners()", "full_signature": "@Override public ArrayList<LocationListener> getLocationListeners()", "class_method_signature": "BaseLocationClient.getLocationListeners()", "testcase": false, "constructor": false}, {"identifier": "removeLocationListener", "parameters": "(@NonNull LocationListener locationListener)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeLocationListener(@NonNull LocationListener locationListener)", "full_signature": "@Override public boolean removeLocationListener(@NonNull LocationListener locationListener)", "class_method_signature": "BaseLocationClient.removeLocationListener(@NonNull LocationListener locationListener)", "testcase": false, "constructor": false}, {"identifier": "isProviderEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isProviderEnabled()", "full_signature": "@Override public boolean isProviderEnabled()", "class_method_signature": "BaseLocationClient.isProviderEnabled()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "BaseLocationClient.close()", "testcase": false, "constructor": false}, {"identifier": "isBetterLocation", "parameters": "(Location location, Location currentBestLocation)", "modifiers": "protected", "return": "boolean", "signature": "boolean isBetterLocation(Location location, Location currentBestLocation)", "full_signature": "protected boolean isBetterLocation(Location location, Location currentBestLocation)", "class_method_signature": "BaseLocationClient.isBetterLocation(Location location, Location currentBestLocation)", "testcase": false, "constructor": false}, {"identifier": "isMonitoringLocation", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMonitoringLocation()", "full_signature": "@Override public boolean isMonitoringLocation()", "class_method_signature": "BaseLocationClient.isMonitoringLocation()", "testcase": false, "constructor": false}, {"identifier": "clearLocationListeners", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearLocationListeners()", "full_signature": "@Override public void clearLocationListeners()", "class_method_signature": "BaseLocationClient.clearLocationListeners()", "testcase": false, "constructor": false}, {"identifier": "isSameProvider", "parameters": "(String provider1, String provider2)", "modifiers": "protected", "return": "boolean", "signature": "boolean isSameProvider(String provider1, String provider2)", "full_signature": "protected boolean isSameProvider(String provider1, String provider2)", "class_method_signature": "BaseLocationClient.isSameProvider(String provider1, String provider2)", "testcase": false, "constructor": false}], "file": "library/src/main/java/io/ona/kujaku/location/clients/BaseLocationClient.java"}, "focal_method": {"identifier": "isBetterLocation", "parameters": "(Location location, Location currentBestLocation)", "modifiers": "protected", "return": "boolean", "body": "protected boolean isBetterLocation(Location location, Location currentBestLocation) {\n        if (currentBestLocation == null) {\n            // A new location is always better than no location\n            return true;\n        }\n\n        // Check whether the new location fix is newer or older\n        long timeDelta = location.getTime() - currentBestLocation.getTime();\n        boolean isSignificantlyNewer = timeDelta > TWO_MINUTES;\n        boolean isSignificantlyOlder = timeDelta < -TWO_MINUTES;\n        boolean isNewer = timeDelta > 0;\n\n        // If it's been more than two minutes since the current location, use the new location\n        // because the user has likely moved\n        if (isSignificantlyNewer) {\n            return true;\n            // If the new location is more than two minutes older, it must be worse\n        } else if (isSignificantlyOlder) {\n            return false;\n        }\n\n        // Check whether the new location fix is more or less accurate\n        int accuracyDelta = (int)(location.getAccuracy() - currentBestLocation.getAccuracy());\n        boolean isLessAccurate = accuracyDelta > 0;\n        boolean isMoreAccurate = accuracyDelta < 0;\n        boolean isSignificantlyLessAccurate = accuracyDelta > 200;\n\n        // Check if the old and new location are from the same provider\n        boolean isFromSameProvider = isSameProvider(location.getProvider(),\n                currentBestLocation.getProvider());\n\n        // Determine location quality using a combination of timeliness and accuracy\n        if (isMoreAccurate) {\n            return true;\n        } else if (isNewer && !isLessAccurate) {\n            return true;\n        } else if (isNewer && !isSignificantlyLessAccurate && isFromSameProvider) {\n            return true;\n        }\n\n        return false;\n    }", "signature": "boolean isBetterLocation(Location location, Location currentBestLocation)", "full_signature": "protected boolean isBetterLocation(Location location, Location currentBestLocation)", "class_method_signature": "BaseLocationClient.isBetterLocation(Location location, Location currentBestLocation)", "testcase": false, "constructor": false, "invocations": ["getTime", "getTime", "getAccuracy", "getAccuracy", "isSameProvider", "getProvider", "getProvider"]}, "repository": {"repo_id": 109667968, "url": "https://github.com/onaio/kujaku", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 4778, "license": "licensed"}}