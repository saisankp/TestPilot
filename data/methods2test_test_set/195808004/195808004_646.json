{"test_class": {"identifier": "TestApplicationHistoryServer", "superclass": "", "interfaces": "", "fields": [], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/test/java/org/apache/hadoop/yarn/server/applicationhistoryservice/TestApplicationHistoryServer.java"}, "test_case": {"identifier": "testStartStopServer", "parameters": "()", "modifiers": "@Test(timeout = 60000) public", "return": "void", "body": "@Test(timeout = 60000)\n  public void testStartStopServer() throws Exception {\n    ApplicationHistoryServer historyServer = new ApplicationHistoryServer();\n    Configuration config = new YarnConfiguration();\n    config.setClass(YarnConfiguration.TIMELINE_SERVICE_STORE,\n        MemoryTimelineStore.class, TimelineStore.class);\n    config.setClass(YarnConfiguration.TIMELINE_SERVICE_STATE_STORE_CLASS,\n        MemoryTimelineStateStore.class, TimelineStateStore.class);\n    config.set(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS, \"localhost:0\");\n    try {\n      try {\n        historyServer.init(config);\n        config.setInt(YarnConfiguration.TIMELINE_SERVICE_HANDLER_THREAD_COUNT,\n            0);\n        historyServer.start();\n        fail();\n      } catch (IllegalArgumentException e) {\n        Assert.assertTrue(e.getMessage().contains(\n            YarnConfiguration.TIMELINE_SERVICE_HANDLER_THREAD_COUNT));\n      }\n      config.setInt(YarnConfiguration.TIMELINE_SERVICE_HANDLER_THREAD_COUNT,\n          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_THREAD_COUNT);\n      historyServer = new ApplicationHistoryServer();\n      historyServer.init(config);\n      assertEquals(STATE.INITED, historyServer.getServiceState());\n      assertEquals(5, historyServer.getServices().size());\n      ApplicationHistoryClientService historyService =\n          historyServer.getClientService();\n      assertNotNull(historyServer.getClientService());\n      assertEquals(STATE.INITED, historyService.getServiceState());\n\n      historyServer.start();\n      assertEquals(STATE.STARTED, historyServer.getServiceState());\n      assertEquals(STATE.STARTED, historyService.getServiceState());\n      historyServer.stop();\n      assertEquals(STATE.STOPPED, historyServer.getServiceState());\n    } finally {\n      historyServer.stop();\n    }\n  }", "signature": "void testStartStopServer()", "full_signature": "@Test(timeout = 60000) public void testStartStopServer()", "class_method_signature": "TestApplicationHistoryServer.testStartStopServer()", "testcase": true, "constructor": false, "invocations": ["setClass", "setClass", "set", "init", "setInt", "start", "fail", "assertTrue", "contains", "getMessage", "setInt", "init", "assertEquals", "getServiceState", "assertEquals", "size", "getServices", "getClientService", "assertNotNull", "getClientService", "assertEquals", "getServiceState", "start", "assertEquals", "getServiceState", "assertEquals", "getServiceState", "stop", "assertEquals", "getServiceState", "stop"]}, "focal_class": {"identifier": "ApplicationHistoryServer", "superclass": "extends CompositeService", "interfaces": "", "fields": [{"original_string": "public static final int SHUTDOWN_HOOK_PRIORITY = 30;", "modifier": "public static final", "type": "int", "declarator": "SHUTDOWN_HOOK_PRIORITY = 30", "var_name": "SHUTDOWN_HOOK_PRIORITY"}, {"original_string": "private static final Log LOG = LogFactory\n    .getLog(ApplicationHistoryServer.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory\n    .getLog(ApplicationHistoryServer.class)", "var_name": "LOG"}, {"original_string": "private ApplicationHistoryClientService ahsClientService;", "modifier": "private", "type": "ApplicationHistoryClientService", "declarator": "ahsClientService", "var_name": "ahsClientService"}, {"original_string": "private ApplicationACLsManager aclsManager;", "modifier": "private", "type": "ApplicationACLsManager", "declarator": "aclsManager", "var_name": "aclsManager"}, {"original_string": "private ApplicationHistoryManager historyManager;", "modifier": "private", "type": "ApplicationHistoryManager", "declarator": "historyManager", "var_name": "historyManager"}, {"original_string": "private TimelineStore timelineStore;", "modifier": "private", "type": "TimelineStore", "declarator": "timelineStore", "var_name": "timelineStore"}, {"original_string": "private TimelineDelegationTokenSecretManagerService secretManagerService;", "modifier": "private", "type": "TimelineDelegationTokenSecretManagerService", "declarator": "secretManagerService", "var_name": "secretManagerService"}, {"original_string": "private TimelineDataManager timelineDataManager;", "modifier": "private", "type": "TimelineDataManager", "declarator": "timelineDataManager", "var_name": "timelineDataManager"}, {"original_string": "private WebApp webApp;", "modifier": "private", "type": "WebApp", "declarator": "webApp", "var_name": "webApp"}], "methods": [{"identifier": "ApplicationHistoryServer", "parameters": "()", "modifiers": "public", "return": "", "signature": " ApplicationHistoryServer()", "full_signature": "public  ApplicationHistoryServer()", "class_method_signature": "ApplicationHistoryServer.ApplicationHistoryServer()", "testcase": false, "constructor": true}, {"identifier": "serviceInit", "parameters": "(Configuration conf)", "modifiers": "@Override protected", "return": "void", "signature": "void serviceInit(Configuration conf)", "full_signature": "@Override protected void serviceInit(Configuration conf)", "class_method_signature": "ApplicationHistoryServer.serviceInit(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "serviceStart", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void serviceStart()", "full_signature": "@Override protected void serviceStart()", "class_method_signature": "ApplicationHistoryServer.serviceStart()", "testcase": false, "constructor": false}, {"identifier": "serviceStop", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void serviceStop()", "full_signature": "@Override protected void serviceStop()", "class_method_signature": "ApplicationHistoryServer.serviceStop()", "testcase": false, "constructor": false}, {"identifier": "getClientService", "parameters": "()", "modifiers": "@Private @VisibleForTesting", "return": "ApplicationHistoryClientService", "signature": "ApplicationHistoryClientService getClientService()", "full_signature": "@Private @VisibleForTesting ApplicationHistoryClientService getClientService()", "class_method_signature": "ApplicationHistoryServer.getClientService()", "testcase": false, "constructor": false}, {"identifier": "getListenerAddress", "parameters": "()", "modifiers": "private", "return": "InetSocketAddress", "signature": "InetSocketAddress getListenerAddress()", "full_signature": "private InetSocketAddress getListenerAddress()", "class_method_signature": "ApplicationHistoryServer.getListenerAddress()", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "()", "modifiers": "@Private @VisibleForTesting public", "return": "int", "signature": "int getPort()", "full_signature": "@Private @VisibleForTesting public int getPort()", "class_method_signature": "ApplicationHistoryServer.getPort()", "testcase": false, "constructor": false}, {"identifier": "getTimelineStore", "parameters": "()", "modifiers": "@Private @VisibleForTesting public", "return": "TimelineStore", "signature": "TimelineStore getTimelineStore()", "full_signature": "@Private @VisibleForTesting public TimelineStore getTimelineStore()", "class_method_signature": "ApplicationHistoryServer.getTimelineStore()", "testcase": false, "constructor": false}, {"identifier": "getApplicationHistoryManager", "parameters": "()", "modifiers": "@Private @VisibleForTesting", "return": "ApplicationHistoryManager", "signature": "ApplicationHistoryManager getApplicationHistoryManager()", "full_signature": "@Private @VisibleForTesting ApplicationHistoryManager getApplicationHistoryManager()", "class_method_signature": "ApplicationHistoryServer.getApplicationHistoryManager()", "testcase": false, "constructor": false}, {"identifier": "launchAppHistoryServer", "parameters": "(String[] args)", "modifiers": "static", "return": "ApplicationHistoryServer", "signature": "ApplicationHistoryServer launchAppHistoryServer(String[] args)", "full_signature": "static ApplicationHistoryServer launchAppHistoryServer(String[] args)", "class_method_signature": "ApplicationHistoryServer.launchAppHistoryServer(String[] args)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "ApplicationHistoryServer.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "createApplicationHistoryClientService", "parameters": "(\n          ApplicationHistoryManager historyManager)", "modifiers": "private", "return": "ApplicationHistoryClientService", "signature": "ApplicationHistoryClientService createApplicationHistoryClientService(\n          ApplicationHistoryManager historyManager)", "full_signature": "private ApplicationHistoryClientService createApplicationHistoryClientService(\n          ApplicationHistoryManager historyManager)", "class_method_signature": "ApplicationHistoryServer.createApplicationHistoryClientService(\n          ApplicationHistoryManager historyManager)", "testcase": false, "constructor": false}, {"identifier": "createApplicationACLsManager", "parameters": "(\n      Configuration conf)", "modifiers": "private", "return": "ApplicationACLsManager", "signature": "ApplicationACLsManager createApplicationACLsManager(\n      Configuration conf)", "full_signature": "private ApplicationACLsManager createApplicationACLsManager(\n      Configuration conf)", "class_method_signature": "ApplicationHistoryServer.createApplicationACLsManager(\n      Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "createApplicationHistoryManager", "parameters": "(\n      Configuration conf)", "modifiers": "private", "return": "ApplicationHistoryManager", "signature": "ApplicationHistoryManager createApplicationHistoryManager(\n      Configuration conf)", "full_signature": "private ApplicationHistoryManager createApplicationHistoryManager(\n      Configuration conf)", "class_method_signature": "ApplicationHistoryServer.createApplicationHistoryManager(\n      Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "createTimelineStore", "parameters": "(\n      Configuration conf)", "modifiers": "private", "return": "TimelineStore", "signature": "TimelineStore createTimelineStore(\n      Configuration conf)", "full_signature": "private TimelineStore createTimelineStore(\n      Configuration conf)", "class_method_signature": "ApplicationHistoryServer.createTimelineStore(\n      Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "createTimelineDelegationTokenSecretManagerService", "parameters": "(Configuration conf)", "modifiers": "private", "return": "TimelineDelegationTokenSecretManagerService", "signature": "TimelineDelegationTokenSecretManagerService createTimelineDelegationTokenSecretManagerService(Configuration conf)", "full_signature": "private TimelineDelegationTokenSecretManagerService createTimelineDelegationTokenSecretManagerService(Configuration conf)", "class_method_signature": "ApplicationHistoryServer.createTimelineDelegationTokenSecretManagerService(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "createTimelineDataManager", "parameters": "(Configuration conf)", "modifiers": "private", "return": "TimelineDataManager", "signature": "TimelineDataManager createTimelineDataManager(Configuration conf)", "full_signature": "private TimelineDataManager createTimelineDataManager(Configuration conf)", "class_method_signature": "ApplicationHistoryServer.createTimelineDataManager(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "startWebApp", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void startWebApp()", "full_signature": "@SuppressWarnings(\"unchecked\") private void startWebApp()", "class_method_signature": "ApplicationHistoryServer.startWebApp()", "testcase": false, "constructor": false}, {"identifier": "doSecureLogin", "parameters": "(Configuration conf)", "modifiers": "private", "return": "void", "signature": "void doSecureLogin(Configuration conf)", "full_signature": "private void doSecureLogin(Configuration conf)", "class_method_signature": "ApplicationHistoryServer.doSecureLogin(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getBindAddress", "parameters": "(Configuration conf)", "modifiers": "private static", "return": "InetSocketAddress", "signature": "InetSocketAddress getBindAddress(Configuration conf)", "full_signature": "private static InetSocketAddress getBindAddress(Configuration conf)", "class_method_signature": "ApplicationHistoryServer.getBindAddress(Configuration conf)", "testcase": false, "constructor": false}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java"}, "focal_method": {"identifier": "getClientService", "parameters": "()", "modifiers": "@Private @VisibleForTesting", "return": "ApplicationHistoryClientService", "body": "@Private\n  @VisibleForTesting\n  ApplicationHistoryClientService getClientService() {\n    return this.ahsClientService;\n  }", "signature": "ApplicationHistoryClientService getClientService()", "full_signature": "@Private @VisibleForTesting ApplicationHistoryClientService getClientService()", "class_method_signature": "ApplicationHistoryServer.getClientService()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}