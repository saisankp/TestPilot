{"test_class": {"identifier": "CorrelatedEventsGrouperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Map<String, Object> TEST_FIELDS_AND_VALUES = Collections.singletonMap(\"key\", \"value\");", "modifier": "public static final", "type": "Map<String, Object>", "declarator": "TEST_FIELDS_AND_VALUES = Collections.singletonMap(\"key\", \"value\")", "var_name": "TEST_FIELDS_AND_VALUES"}], "file": "streams/common/src/test/java/com/hortonworks/streamline/streams/common/event/correlation/CorrelatedEventsGrouperTest.java"}, "test_case": {"identifier": "testGroupEventsWithSplitProcessor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGroupEventsWithSplitProcessor() throws Exception {\n        long timestamp = System.currentTimeMillis();\n\n        List<EventInformation> testEvents = new ArrayList<>();\n\n        /*\n         <SOURCE>    <SPLIT>       <PROJECTION1>        <SINK1>\n           e1     ->     e2     ->      e3         ->\n\n                                \\   <PROJECTION2>\n                                        e4         ->\n\n                                \\   <PROJECTION3>\n                                        e5         ->\n        */\n        EventInformation event1 = new EventInformation(timestamp, \"SOURCE\", \"default\",\n                Collections.singleton(\"SPLIT\"), \"1\",\n                Collections.emptySet(), Collections.emptySet(), TEST_FIELDS_AND_VALUES);\n        testEvents.add(event1);\n\n        EventInformation event2 = new EventInformation(timestamp, \"SPLIT\", \"stream1\",\n                Sets.newHashSet(\"PROJECTION1\", \"PROJECTION2\", \"PROJECTION3\"), \"2\",\n                Sets.newHashSet(\"1\"), Sets.newHashSet(\"1\"), TEST_FIELDS_AND_VALUES);\n        testEvents.add(event2);\n\n        EventInformation event3 = new EventInformation(timestamp, \"PROJECTION1\", \"default\",\n                Collections.singleton(\"SINK1\"), \"3\",\n                Sets.newHashSet(\"1\"), Sets.newHashSet(\"2\"), TEST_FIELDS_AND_VALUES);\n        testEvents.add(event3);\n\n        EventInformation event4 = new EventInformation(timestamp, \"PROJECTION2\", \"default\",\n                Collections.singleton(\"SINK2\"), \"4\",\n                Sets.newHashSet(\"1\"), Sets.newHashSet(\"2\"), TEST_FIELDS_AND_VALUES);\n        testEvents.add(event4);\n\n        EventInformation event5 = new EventInformation(timestamp, \"PROJECTION3\", \"default\",\n                Collections.singleton(\"SINK3\"), \"5\",\n                Sets.newHashSet(\"1\"), Sets.newHashSet(\"2\"), TEST_FIELDS_AND_VALUES);\n        testEvents.add(event5);\n\n        CorrelatedEventsGrouper eventsGrouper = new CorrelatedEventsGrouper(testEvents);\n        GroupedCorrelationEvents groupedEvents = eventsGrouper.groupByComponent(event1.getEventId());\n\n        Map<String, EventInformation> allEvents = groupedEvents.getAllEvents();\n        Assert.assertEquals(5, allEvents.size());\n\n        Map<String, GroupedCorrelationEvents.SortedComponentGroupedEvents> componentGroupedEvents =\n                groupedEvents.getComponentGroupedEvents();\n        GroupedCorrelationEvents.SortedComponentGroupedEvents source = componentGroupedEvents.get(\"SOURCE\");\n        Assert.assertEquals(\"SOURCE\", source.getComponentName());\n        Assert.assertTrue(source.isContainingSelectedEvent());\n        Assert.assertTrue(source.getInputEventIds().isEmpty());\n        Assert.assertEquals(Sets.newHashSet(\"1\"), new HashSet<>(source.getOutputEventIds()));\n\n        GroupedCorrelationEvents.SortedComponentGroupedEvents split = componentGroupedEvents.get(\"SPLIT\");\n        Assert.assertEquals(\"SPLIT\", split.getComponentName());\n        Assert.assertFalse(split.isContainingSelectedEvent());\n        Assert.assertEquals(Collections.singletonList(\"1\"), split.getInputEventIds());\n        Assert.assertEquals(Collections.singletonList(\"2\"), split.getOutputEventIds());\n\n        GroupedCorrelationEvents.SortedComponentGroupedEvents projection1 = componentGroupedEvents.get(\"PROJECTION1\");\n        Assert.assertEquals(\"PROJECTION1\", projection1.getComponentName());\n        Assert.assertFalse(projection1.isContainingSelectedEvent());\n        Assert.assertEquals(Collections.singletonList(\"2\"), projection1.getInputEventIds());\n        Assert.assertEquals(Collections.singletonList(\"3\"), projection1.getOutputEventIds());\n\n        GroupedCorrelationEvents.SortedComponentGroupedEvents projection2 = componentGroupedEvents.get(\"PROJECTION2\");\n        Assert.assertEquals(\"PROJECTION2\", projection2.getComponentName());\n        Assert.assertFalse(projection2.isContainingSelectedEvent());\n        Assert.assertEquals(Collections.singletonList(\"2\"), projection2.getInputEventIds());\n        Assert.assertEquals(Collections.singletonList(\"4\"), projection2.getOutputEventIds());\n\n        GroupedCorrelationEvents.SortedComponentGroupedEvents projection3 = componentGroupedEvents.get(\"PROJECTION3\");\n        Assert.assertEquals(\"PROJECTION3\", projection3.getComponentName());\n        Assert.assertFalse(projection3.isContainingSelectedEvent());\n        Assert.assertEquals(Collections.singletonList(\"2\"), projection3.getInputEventIds());\n        Assert.assertEquals(Collections.singletonList(\"5\"), projection3.getOutputEventIds());\n\n        GroupedCorrelationEvents.SortedComponentGroupedEvents sink1 = componentGroupedEvents.get(\"SINK1\");\n        Assert.assertEquals(\"SINK1\", sink1.getComponentName());\n        Assert.assertFalse(sink1.isContainingSelectedEvent());\n        Assert.assertEquals(Collections.singletonList(\"3\"), sink1.getInputEventIds());\n        Assert.assertTrue(sink1.getOutputEventIds().isEmpty());\n\n        GroupedCorrelationEvents.SortedComponentGroupedEvents sink2 = componentGroupedEvents.get(\"SINK2\");\n        Assert.assertEquals(\"SINK2\", sink2.getComponentName());\n        Assert.assertFalse(sink2.isContainingSelectedEvent());\n        Assert.assertEquals(Collections.singletonList(\"4\"), sink2.getInputEventIds());\n        Assert.assertTrue(sink2.getOutputEventIds().isEmpty());\n\n        GroupedCorrelationEvents.SortedComponentGroupedEvents sink3 = componentGroupedEvents.get(\"SINK3\");\n        Assert.assertEquals(\"SINK3\", sink3.getComponentName());\n        Assert.assertFalse(sink3.isContainingSelectedEvent());\n        Assert.assertEquals(Collections.singletonList(\"5\"), sink3.getInputEventIds());\n        Assert.assertTrue(sink3.getOutputEventIds().isEmpty());\n\n    }", "signature": "void testGroupEventsWithSplitProcessor()", "full_signature": "@Test public void testGroupEventsWithSplitProcessor()", "class_method_signature": "CorrelatedEventsGrouperTest.testGroupEventsWithSplitProcessor()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "singleton", "emptySet", "emptySet", "add", "newHashSet", "newHashSet", "newHashSet", "add", "singleton", "newHashSet", "newHashSet", "add", "singleton", "newHashSet", "newHashSet", "add", "singleton", "newHashSet", "newHashSet", "add", "groupByComponent", "getEventId", "getAllEvents", "assertEquals", "size", "getComponentGroupedEvents", "get", "assertEquals", "getComponentName", "assertTrue", "isContainingSelectedEvent", "assertTrue", "isEmpty", "getInputEventIds", "assertEquals", "newHashSet", "getOutputEventIds", "get", "assertEquals", "getComponentName", "assertFalse", "isContainingSelectedEvent", "assertEquals", "singletonList", "getInputEventIds", "assertEquals", "singletonList", "getOutputEventIds", "get", "assertEquals", "getComponentName", "assertFalse", "isContainingSelectedEvent", "assertEquals", "singletonList", "getInputEventIds", "assertEquals", "singletonList", "getOutputEventIds", "get", "assertEquals", "getComponentName", "assertFalse", "isContainingSelectedEvent", "assertEquals", "singletonList", "getInputEventIds", "assertEquals", "singletonList", "getOutputEventIds", "get", "assertEquals", "getComponentName", "assertFalse", "isContainingSelectedEvent", "assertEquals", "singletonList", "getInputEventIds", "assertEquals", "singletonList", "getOutputEventIds", "get", "assertEquals", "getComponentName", "assertFalse", "isContainingSelectedEvent", "assertEquals", "singletonList", "getInputEventIds", "assertTrue", "isEmpty", "getOutputEventIds", "get", "assertEquals", "getComponentName", "assertFalse", "isContainingSelectedEvent", "assertEquals", "singletonList", "getInputEventIds", "assertTrue", "isEmpty", "getOutputEventIds", "get", "assertEquals", "getComponentName", "assertFalse", "isContainingSelectedEvent", "assertEquals", "singletonList", "getInputEventIds", "assertTrue", "isEmpty", "getOutputEventIds"]}, "focal_class": {"identifier": "CorrelatedEventsGrouper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<EventInformation> events;", "modifier": "private final", "type": "List<EventInformation>", "declarator": "events", "var_name": "events"}], "methods": [{"identifier": "CorrelatedEventsGrouper", "parameters": "(List<EventInformation> events)", "modifiers": "public", "return": "", "signature": " CorrelatedEventsGrouper(List<EventInformation> events)", "full_signature": "public  CorrelatedEventsGrouper(List<EventInformation> events)", "class_method_signature": "CorrelatedEventsGrouper.CorrelatedEventsGrouper(List<EventInformation> events)", "testcase": false, "constructor": true}, {"identifier": "groupByRelatedSourceEvents", "parameters": "(Set<String> sources)", "modifiers": "public", "return": "List<Set<String>>", "signature": "List<Set<String>> groupByRelatedSourceEvents(Set<String> sources)", "full_signature": "public List<Set<String>> groupByRelatedSourceEvents(Set<String> sources)", "class_method_signature": "CorrelatedEventsGrouper.groupByRelatedSourceEvents(Set<String> sources)", "testcase": false, "constructor": false}, {"identifier": "groupByComponent", "parameters": "(String rootEventId)", "modifiers": "public", "return": "GroupedCorrelationEvents", "signature": "GroupedCorrelationEvents groupByComponent(String rootEventId)", "full_signature": "public GroupedCorrelationEvents groupByComponent(String rootEventId)", "class_method_signature": "CorrelatedEventsGrouper.groupByComponent(String rootEventId)", "testcase": false, "constructor": false}, {"identifier": "buildRelatedEventsMap", "parameters": "(String rootEventId)", "modifiers": "private", "return": "Map<String, EventInformation>", "signature": "Map<String, EventInformation> buildRelatedEventsMap(String rootEventId)", "full_signature": "private Map<String, EventInformation> buildRelatedEventsMap(String rootEventId)", "class_method_signature": "CorrelatedEventsGrouper.buildRelatedEventsMap(String rootEventId)", "testcase": false, "constructor": false}, {"identifier": "addNonExistingParents", "parameters": "(Map<String, EventInformation> allEventsMap,\n                                       Map<String, EventInformation> relatedEventsMap)", "modifiers": "private", "return": "void", "signature": "void addNonExistingParents(Map<String, EventInformation> allEventsMap,\n                                       Map<String, EventInformation> relatedEventsMap)", "full_signature": "private void addNonExistingParents(Map<String, EventInformation> allEventsMap,\n                                       Map<String, EventInformation> relatedEventsMap)", "class_method_signature": "CorrelatedEventsGrouper.addNonExistingParents(Map<String, EventInformation> allEventsMap,\n                                       Map<String, EventInformation> relatedEventsMap)", "testcase": false, "constructor": false}, {"identifier": "findAndAddParentsIfNecessary", "parameters": "(Map<String, EventInformation> allEventsMap,\n                                              Map<String, EventInformation> relatedEventsMap,\n                                              Map<String, EventInformation> eventsToAddMap,\n                                              EventInformation event)", "modifiers": "private", "return": "void", "signature": "void findAndAddParentsIfNecessary(Map<String, EventInformation> allEventsMap,\n                                              Map<String, EventInformation> relatedEventsMap,\n                                              Map<String, EventInformation> eventsToAddMap,\n                                              EventInformation event)", "full_signature": "private void findAndAddParentsIfNecessary(Map<String, EventInformation> allEventsMap,\n                                              Map<String, EventInformation> relatedEventsMap,\n                                              Map<String, EventInformation> eventsToAddMap,\n                                              EventInformation event)", "class_method_signature": "CorrelatedEventsGrouper.findAndAddParentsIfNecessary(Map<String, EventInformation> allEventsMap,\n                                              Map<String, EventInformation> relatedEventsMap,\n                                              Map<String, EventInformation> eventsToAddMap,\n                                              EventInformation event)", "testcase": false, "constructor": false}], "file": "streams/common/src/main/java/com/hortonworks/streamline/streams/common/event/correlation/CorrelatedEventsGrouper.java"}, "focal_method": {"identifier": "groupByComponent", "parameters": "(String rootEventId)", "modifiers": "public", "return": "GroupedCorrelationEvents", "body": "public GroupedCorrelationEvents groupByComponent(String rootEventId) {\n        return new GroupedCorrelationEvents(buildRelatedEventsMap(rootEventId), rootEventId);\n    }", "signature": "GroupedCorrelationEvents groupByComponent(String rootEventId)", "full_signature": "public GroupedCorrelationEvents groupByComponent(String rootEventId)", "class_method_signature": "CorrelatedEventsGrouper.groupByComponent(String rootEventId)", "testcase": false, "constructor": false, "invocations": ["buildRelatedEventsMap"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}