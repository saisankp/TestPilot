{"test_class": {"identifier": "DayTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Day D_2001_01_03 = new Day(2001, Month.January, 3 - 1);", "modifier": "static final", "type": "Day", "declarator": "D_2001_01_03 = new Day(2001, Month.January, 3 - 1)", "var_name": "D_2001_01_03"}, {"original_string": "static final Day D_2001_03_03 = new Day(2001, Month.March, 3 - 1);", "modifier": "static final", "type": "Day", "declarator": "D_2001_03_03 = new Day(2001, Month.March, 3 - 1)", "var_name": "D_2001_03_03"}, {"original_string": "static final Day D_2001_03_10 = new Day(2001, Month.March, 10 - 1);", "modifier": "static final", "type": "Day", "declarator": "D_2001_03_10 = new Day(2001, Month.March, 10 - 1)", "var_name": "D_2001_03_10"}], "file": "jtstoolkit/src/test/java/ec/tstoolkit/timeseries/DayTest.java"}, "test_case": {"identifier": "testCompareTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompareTo() {\n        assertTrue(D_2001_01_03.compareTo(D_2001_01_03) == 0);\n        assertTrue(D_2001_03_03.compareTo(D_2001_01_03) > 0);\n        assertTrue(D_2001_01_03.compareTo(D_2001_03_03) < 0);\n    }", "signature": "void testCompareTo()", "full_signature": "@Test public void testCompareTo()", "class_method_signature": "DayTest.testCompareTo()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "compareTo", "assertTrue", "compareTo", "assertTrue", "compareTo"]}, "focal_class": {"identifier": "Day", "superclass": "", "interfaces": "implements IPeriod, Comparable<Day>", "fields": [{"original_string": "public static final int DAY_OF_WEEK_T0 = 3;", "modifier": "public static final", "type": "int", "declarator": "DAY_OF_WEEK_T0 = 3", "var_name": "DAY_OF_WEEK_T0"}, {"original_string": "private static final int[] monthDays = {31, 28, 31, 30, 31, 30, 31, 31, 30,\n        31, 30, 31};", "modifier": "private static final", "type": "int[]", "declarator": "monthDays = {31, 28, 31, 30, 31, 30, 31, 31, 30,\n        31, 30, 31}", "var_name": "monthDays"}, {"original_string": "private static final int[] cumulatedMonthDays = {0, 31, 59, 90, 120, 151,\n        181, 212, 243, 273, 304, 334, 365};", "modifier": "private static final", "type": "int[]", "declarator": "cumulatedMonthDays = {0, 31, 59, 90, 120, 151,\n        181, 212, 243, 273, 304, 334, 365}", "var_name": "cumulatedMonthDays"}, {"original_string": "public static final Day BEG = new Day(1000, Month.January, 0);", "modifier": "public static final", "type": "Day", "declarator": "BEG = new Day(1000, Month.January, 0)", "var_name": "BEG"}, {"original_string": "public static final Day END = new Day(2999, Month.December, 30);", "modifier": "public static final", "type": "Day", "declarator": "END = new Day(2999, Month.December, 30)", "var_name": "END"}, {"original_string": "private final int day_;", "modifier": "private final", "type": "int", "declarator": "day_", "var_name": "day_"}, {"original_string": "private static final long G_DAY0 = new GregorianCalendar(1970, Calendar.JANUARY, 1).getTimeInMillis();", "modifier": "private static final", "type": "long", "declarator": "G_DAY0 = new GregorianCalendar(1970, Calendar.JANUARY, 1).getTimeInMillis()", "var_name": "G_DAY0"}, {"original_string": "private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT_THREAD_LOCAL = ThreadLocal.withInitial(() -> new SimpleDateFormat(\"yyyy-MM-dd\"));", "modifier": "private static final", "type": "ThreadLocal<SimpleDateFormat>", "declarator": "DATE_FORMAT_THREAD_LOCAL = ThreadLocal.withInitial(() -> new SimpleDateFormat(\"yyyy-MM-dd\"))", "var_name": "DATE_FORMAT_THREAD_LOCAL"}, {"original_string": "private static final ThreadLocal<GregorianCalendar> CALENDAR_THREAD_LOCAL = ThreadLocal.withInitial(GregorianCalendar::new);", "modifier": "private static final", "type": "ThreadLocal<GregorianCalendar>", "declarator": "CALENDAR_THREAD_LOCAL = ThreadLocal.withInitial(GregorianCalendar::new)", "var_name": "CALENDAR_THREAD_LOCAL"}], "methods": [{"identifier": "getMonthDays", "parameters": "(int month)", "modifiers": "public static", "return": "int", "signature": "int getMonthDays(int month)", "full_signature": "public static int getMonthDays(int month)", "class_method_signature": "Day.getMonthDays(int month)", "testcase": false, "constructor": false}, {"identifier": "getCumulatedMonthDays", "parameters": "(int month)", "modifiers": "public static", "return": "int", "signature": "int getCumulatedMonthDays(int month)", "full_signature": "public static int getCumulatedMonthDays(int month)", "class_method_signature": "Day.getCumulatedMonthDays(int month)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(final Date date)", "modifiers": "private static", "return": "int", "signature": "int calc(final Date date)", "full_signature": "private static int calc(final Date date)", "class_method_signature": "Day.calc(final Date date)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(int year, final int month, final int day)", "modifiers": "public static", "return": "int", "signature": "int calc(int year, final int month, final int day)", "full_signature": "public static int calc(int year, final int month, final int day)", "class_method_signature": "Day.calc(int year, final int month, final int day)", "testcase": false, "constructor": false}, {"identifier": "calcDays", "parameters": "(int year, final int ndays)", "modifiers": "public static", "return": "int", "signature": "int calcDays(int year, final int ndays)", "full_signature": "public static int calcDays(int year, final int ndays)", "class_method_signature": "Day.calcDays(int year, final int ndays)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(final Day d0, final Day d1)", "modifiers": "public static", "return": "int", "signature": "int subtract(final Day d0, final Day d1)", "full_signature": "public static int subtract(final Day d0, final Day d1)", "class_method_signature": "Day.subtract(final Day d0, final Day d1)", "testcase": false, "constructor": false}, {"identifier": "toDay", "parameters": "()", "modifiers": "public static", "return": "Day", "signature": "Day toDay()", "full_signature": "public static Day toDay()", "class_method_signature": "Day.toDay()", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(int year)", "modifiers": "static", "return": "int", "signature": "int verify(int year)", "full_signature": "static int verify(int year)", "class_method_signature": "Day.verify(int year)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(int year, final int month, final int day)", "modifiers": "static", "return": "boolean", "signature": "boolean verify(int year, final int month, final int day)", "full_signature": "static boolean verify(int year, final int month, final int day)", "class_method_signature": "Day.verify(int year, final int month, final int day)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfDaysByMonth", "parameters": "(final int year, final int month)", "modifiers": "public static", "return": "int", "signature": "int getNumberOfDaysByMonth(final int year, final int month)", "full_signature": "public static int getNumberOfDaysByMonth(final int year, final int month)", "class_method_signature": "Day.getNumberOfDaysByMonth(final int year, final int month)", "testcase": false, "constructor": false}, {"identifier": "isLeap", "parameters": "(final int year)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLeap(final int year)", "full_signature": "public static boolean isLeap(final int year)", "class_method_signature": "Day.isLeap(final int year)", "testcase": false, "constructor": false}, {"identifier": "Day", "parameters": "(final Date d)", "modifiers": "public", "return": "", "signature": " Day(final Date d)", "full_signature": "public  Day(final Date d)", "class_method_signature": "Day.Day(final Date d)", "testcase": false, "constructor": true}, {"identifier": "Day", "parameters": "(final int day)", "modifiers": "", "return": "", "signature": " Day(final int day)", "full_signature": "  Day(final int day)", "class_method_signature": "Day.Day(final int day)", "testcase": false, "constructor": true}, {"identifier": "Day", "parameters": "(final int year, final Month month, final int day)", "modifiers": "public", "return": "", "signature": " Day(final int year, final Month month, final int day)", "full_signature": "public  Day(final int year, final Month month, final int day)", "class_method_signature": "Day.Day(final int year, final Month month, final int day)", "testcase": false, "constructor": true}, {"identifier": "compareTo", "parameters": "(final Day o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(final Day o)", "full_signature": "@Override public int compareTo(final Day o)", "class_method_signature": "Day.compareTo(final Day o)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final Date dt)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(final Date dt)", "full_signature": "@Override public boolean contains(final Date dt)", "class_method_signature": "Day.contains(final Date dt)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(final Day d1)", "modifiers": "public", "return": "int", "signature": "int difference(final Day d1)", "full_signature": "public int difference(final Day d1)", "class_method_signature": "Day.difference(final Day d1)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Day.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Day other)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(Day other)", "full_signature": "private boolean equals(Day other)", "class_method_signature": "Day.equals(Day other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Day.hashCode()", "testcase": false, "constructor": false}, {"identifier": "firstday", "parameters": "()", "modifiers": "@Override public", "return": "Day", "signature": "Day firstday()", "full_signature": "@Override public Day firstday()", "class_method_signature": "Day.firstday()", "testcase": false, "constructor": false}, {"identifier": "getDayOfWeek", "parameters": "()", "modifiers": "public", "return": "DayOfWeek", "signature": "DayOfWeek getDayOfWeek()", "full_signature": "public DayOfWeek getDayOfWeek()", "class_method_signature": "Day.getDayOfWeek()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getId()", "full_signature": "public int getId()", "class_method_signature": "Day.getId()", "testcase": false, "constructor": false}, {"identifier": "getMonth", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMonth()", "full_signature": "public int getMonth()", "class_method_signature": "Day.getMonth()", "testcase": false, "constructor": false}, {"identifier": "getYear", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getYear()", "full_signature": "public int getYear()", "class_method_signature": "Day.getYear()", "testcase": false, "constructor": false}, {"identifier": "isAfter", "parameters": "(final Day d1)", "modifiers": "public", "return": "boolean", "signature": "boolean isAfter(final Day d1)", "full_signature": "public boolean isAfter(final Day d1)", "class_method_signature": "Day.isAfter(final Day d1)", "testcase": false, "constructor": false}, {"identifier": "isBefore", "parameters": "(final Day d1)", "modifiers": "public", "return": "boolean", "signature": "boolean isBefore(final Day d1)", "full_signature": "public boolean isBefore(final Day d1)", "class_method_signature": "Day.isBefore(final Day d1)", "testcase": false, "constructor": false}, {"identifier": "isNotAfter", "parameters": "(final Day d1)", "modifiers": "public", "return": "boolean", "signature": "boolean isNotAfter(final Day d1)", "full_signature": "public boolean isNotAfter(final Day d1)", "class_method_signature": "Day.isNotAfter(final Day d1)", "testcase": false, "constructor": false}, {"identifier": "isNotBefore", "parameters": "(final Day d1)", "modifiers": "public", "return": "boolean", "signature": "boolean isNotBefore(final Day d1)", "full_signature": "public boolean isNotBefore(final Day d1)", "class_method_signature": "Day.isNotBefore(final Day d1)", "testcase": false, "constructor": false}, {"identifier": "isWorkingDay", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isWorkingDay()", "full_signature": "public boolean isWorkingDay()", "class_method_signature": "Day.isWorkingDay()", "testcase": false, "constructor": false}, {"identifier": "lastday", "parameters": "()", "modifiers": "@Override public", "return": "Day", "signature": "Day lastday()", "full_signature": "@Override public Day lastday()", "class_method_signature": "Day.lastday()", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(final int ndays)", "modifiers": "public", "return": "Day", "signature": "Day minus(final int ndays)", "full_signature": "public Day minus(final int ndays)", "class_method_signature": "Day.minus(final int ndays)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(final int ndays)", "modifiers": "public", "return": "Day", "signature": "Day plus(final int ndays)", "full_signature": "public Day plus(final int ndays)", "class_method_signature": "Day.plus(final int ndays)", "testcase": false, "constructor": false}, {"identifier": "getTime", "parameters": "()", "modifiers": "@NewObject public", "return": "Date", "signature": "Date getTime()", "full_signature": "@NewObject public Date getTime()", "class_method_signature": "Day.getTime()", "testcase": false, "constructor": false}, {"identifier": "getTimeInMillis", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTimeInMillis()", "full_signature": "public long getTimeInMillis()", "class_method_signature": "Day.getTimeInMillis()", "testcase": false, "constructor": false}, {"identifier": "toCalendar", "parameters": "()", "modifiers": "@NewObject public", "return": "GregorianCalendar", "signature": "GregorianCalendar toCalendar()", "full_signature": "@NewObject public GregorianCalendar toCalendar()", "class_method_signature": "Day.toCalendar()", "testcase": false, "constructor": false}, {"identifier": "toInternalCalendar", "parameters": "()", "modifiers": "private", "return": "GregorianCalendar", "signature": "GregorianCalendar toInternalCalendar()", "full_signature": "private GregorianCalendar toInternalCalendar()", "class_method_signature": "Day.toInternalCalendar()", "testcase": false, "constructor": false}, {"identifier": "initCalendar", "parameters": "(GregorianCalendar cal)", "modifiers": "private", "return": "GregorianCalendar", "signature": "GregorianCalendar initCalendar(GregorianCalendar cal)", "full_signature": "private GregorianCalendar initCalendar(GregorianCalendar cal)", "class_method_signature": "Day.initCalendar(GregorianCalendar cal)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Day.toString()", "testcase": false, "constructor": false}, {"identifier": "fromString", "parameters": "(String s)", "modifiers": "public static", "return": "Day", "signature": "Day fromString(String s)", "full_signature": "public static Day fromString(String s)", "class_method_signature": "Day.fromString(String s)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/timeseries/Day.java"}, "focal_method": {"identifier": "compareTo", "parameters": "(final Day o)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compareTo(final Day o) {\n        return Integer.compare(day_, o.day_);\n    }", "signature": "int compareTo(final Day o)", "full_signature": "@Override public int compareTo(final Day o)", "class_method_signature": "Day.compareTo(final Day o)", "testcase": false, "constructor": false, "invocations": ["compare"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}