{"test_class": {"identifier": "LineStringCursorTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/library/render/src/test/java/org/geotools/renderer/label/LineStringCursorTest.java"}, "test_case": {"identifier": "testMaxAngle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMaxAngle() throws Exception {\n        LineString ls = (LineString) new WKTReader().read(\"LINESTRING(20 0, 10 1, 0 0)\");\n        LineStringCursor cursor = new LineStringCursor(ls);\n        double maxAngle = cursor.getMaxAngleChange(0, ls.getLength());\n        assertTrue(maxAngle < 11.5);\n    }", "signature": "void testMaxAngle()", "full_signature": "@Test public void testMaxAngle()", "class_method_signature": "LineStringCursorTest.testMaxAngle()", "testcase": true, "constructor": false, "invocations": ["read", "getMaxAngleChange", "getLength", "assertTrue"]}, "focal_class": {"identifier": "LineStringCursor", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final double ONE_DEGREE = Math.PI / 180.0;", "modifier": "static final", "type": "double", "declarator": "ONE_DEGREE = Math.PI / 180.0", "var_name": "ONE_DEGREE"}, {"original_string": "LineString lineString;", "modifier": "", "type": "LineString", "declarator": "lineString", "var_name": "lineString"}, {"original_string": "CoordinateSequence coords;", "modifier": "", "type": "CoordinateSequence", "declarator": "coords", "var_name": "coords"}, {"original_string": "int segment;", "modifier": "", "type": "int", "declarator": "segment", "var_name": "segment"}, {"original_string": "double offsetDistance;", "modifier": "", "type": "double", "declarator": "offsetDistance", "var_name": "offsetDistance"}, {"original_string": "double[] segmentLenghts;", "modifier": "", "type": "double[]", "declarator": "segmentLenghts", "var_name": "segmentLenghts"}, {"original_string": "double[] segmentStartOrdinate;", "modifier": "", "type": "double[]", "declarator": "segmentStartOrdinate", "var_name": "segmentStartOrdinate"}, {"original_string": "double[] segmentAngles;", "modifier": "", "type": "double[]", "declarator": "segmentAngles", "var_name": "segmentAngles"}], "methods": [{"identifier": "LineStringCursor", "parameters": "(LineString ls)", "modifiers": "public", "return": "", "signature": " LineStringCursor(LineString ls)", "full_signature": "public  LineStringCursor(LineString ls)", "class_method_signature": "LineStringCursor.LineStringCursor(LineString ls)", "testcase": false, "constructor": true}, {"identifier": "LineStringCursor", "parameters": "(LineStringCursor cursor)", "modifiers": "public", "return": "", "signature": " LineStringCursor(LineStringCursor cursor)", "full_signature": "public  LineStringCursor(LineStringCursor cursor)", "class_method_signature": "LineStringCursor.LineStringCursor(LineStringCursor cursor)", "testcase": false, "constructor": true}, {"identifier": "getLineStringLength", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getLineStringLength()", "full_signature": "public double getLineStringLength()", "class_method_signature": "LineStringCursor.getLineStringLength()", "testcase": false, "constructor": false}, {"identifier": "moveTo", "parameters": "(double ordinate)", "modifiers": "public", "return": "void", "signature": "void moveTo(double ordinate)", "full_signature": "public void moveTo(double ordinate)", "class_method_signature": "LineStringCursor.moveTo(double ordinate)", "testcase": false, "constructor": false}, {"identifier": "moveRelative", "parameters": "(double offset)", "modifiers": "public", "return": "boolean", "signature": "boolean moveRelative(double offset)", "full_signature": "public boolean moveRelative(double offset)", "class_method_signature": "LineStringCursor.moveRelative(double offset)", "testcase": false, "constructor": false}, {"identifier": "getCurrentPosition", "parameters": "()", "modifiers": "public", "return": "Coordinate", "signature": "Coordinate getCurrentPosition()", "full_signature": "public Coordinate getCurrentPosition()", "class_method_signature": "LineStringCursor.getCurrentPosition()", "testcase": false, "constructor": false}, {"identifier": "getCurrentPosition", "parameters": "(Coordinate c)", "modifiers": "public", "return": "Coordinate", "signature": "Coordinate getCurrentPosition(Coordinate c)", "full_signature": "public Coordinate getCurrentPosition(Coordinate c)", "class_method_signature": "LineStringCursor.getCurrentPosition(Coordinate c)", "testcase": false, "constructor": false}, {"identifier": "getCurrentOrdinate", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCurrentOrdinate()", "full_signature": "public double getCurrentOrdinate()", "class_method_signature": "LineStringCursor.getCurrentOrdinate()", "testcase": false, "constructor": false}, {"identifier": "getCurrentAngle", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCurrentAngle()", "full_signature": "public double getCurrentAngle()", "class_method_signature": "LineStringCursor.getCurrentAngle()", "testcase": false, "constructor": false}, {"identifier": "getSegmentAngle", "parameters": "(int segmentIdx)", "modifiers": "protected", "return": "double", "signature": "double getSegmentAngle(int segmentIdx)", "full_signature": "protected double getSegmentAngle(int segmentIdx)", "class_method_signature": "LineStringCursor.getSegmentAngle(int segmentIdx)", "testcase": false, "constructor": false}, {"identifier": "getLabelOrientation", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getLabelOrientation()", "full_signature": "public double getLabelOrientation()", "class_method_signature": "LineStringCursor.getLabelOrientation()", "testcase": false, "constructor": false}, {"identifier": "getMaxAngleChange", "parameters": "(double startOrdinate, double endOrdinate)", "modifiers": "public", "return": "double", "signature": "double getMaxAngleChange(double startOrdinate, double endOrdinate)", "full_signature": "public double getMaxAngleChange(double startOrdinate, double endOrdinate)", "class_method_signature": "LineStringCursor.getMaxAngleChange(double startOrdinate, double endOrdinate)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "()", "modifiers": "public", "return": "LineStringCursor", "signature": "LineStringCursor reverse()", "full_signature": "public LineStringCursor reverse()", "class_method_signature": "LineStringCursor.reverse()", "testcase": false, "constructor": false}, {"identifier": "getLineString", "parameters": "()", "modifiers": "public", "return": "LineString", "signature": "LineString getLineString()", "full_signature": "public LineString getLineString()", "class_method_signature": "LineStringCursor.getLineString()", "testcase": false, "constructor": false}, {"identifier": "getSubLineString", "parameters": "(double startOrdinate, double endOrdinate)", "modifiers": "public", "return": "LineString", "signature": "LineString getSubLineString(double startOrdinate, double endOrdinate)", "full_signature": "public LineString getSubLineString(double startOrdinate, double endOrdinate)", "class_method_signature": "LineStringCursor.getSubLineString(double startOrdinate, double endOrdinate)", "testcase": false, "constructor": false}], "file": "modules/library/render/src/main/java/org/geotools/renderer/label/LineStringCursor.java"}, "focal_method": {"identifier": "getMaxAngleChange", "parameters": "(double startOrdinate, double endOrdinate)", "modifiers": "public", "return": "double", "body": "public double getMaxAngleChange(double startOrdinate, double endOrdinate) {\n        if (startOrdinate > endOrdinate)\n            throw new IllegalArgumentException(\"Invalid arguments, endOrdinate < starOrdinate\");\n\n        // compute the begin and end segments\n        LineStringCursor delegate = new LineStringCursor(this);\n        delegate.moveTo(startOrdinate);\n        int startSegment = delegate.segment;\n        delegate.moveTo(endOrdinate);\n        int endSegment = delegate.segment;\n\n        // everything inside the same segment\n        if (startSegment == endSegment)\n            return 0;\n\n        double maxDifference = 0;\n        double prevAngle = getSegmentAngle(startSegment);\n        for (int i = startSegment + 1; i <= endSegment; i++) {\n            double currAngle = getSegmentAngle(i);\n            double difference = currAngle - prevAngle;\n            // normalize angle, the difference can become 2 * PI \n            if(difference > Math.PI) {\n                difference -= 2 * Math.PI;\n            } else if(difference < -Math.PI) {\n                difference += 2 * Math.PI;\n            }\n            difference = Math.abs(difference);\n            if (difference > maxDifference)\n                maxDifference = difference;\n            prevAngle = currAngle;\n        }\n\n        return maxDifference;\n    }", "signature": "double getMaxAngleChange(double startOrdinate, double endOrdinate)", "full_signature": "public double getMaxAngleChange(double startOrdinate, double endOrdinate)", "class_method_signature": "LineStringCursor.getMaxAngleChange(double startOrdinate, double endOrdinate)", "testcase": false, "constructor": false, "invocations": ["moveTo", "moveTo", "getSegmentAngle", "getSegmentAngle", "abs"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}