{"test_class": {"identifier": "JndiRepositoryFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String JCR_REPOSITORY_NAME = \"Test Repository\";", "modifier": "private static final", "type": "String", "declarator": "JCR_REPOSITORY_NAME = \"Test Repository\"", "var_name": "JCR_REPOSITORY_NAME"}, {"original_string": "private JndiRepositoryFactory factory = new JndiRepositoryFactory();", "modifier": "private", "type": "JndiRepositoryFactory", "declarator": "factory = new JndiRepositoryFactory()", "var_name": "factory"}, {"original_string": "private Reference reference = new Reference(JndiRepositoryFactory.class.getName());", "modifier": "private", "type": "Reference", "declarator": "reference = new Reference(JndiRepositoryFactory.class.getName())", "var_name": "reference"}, {"original_string": "private RefAddr configFile;", "modifier": "private", "type": "RefAddr", "declarator": "configFile", "var_name": "configFile"}, {"original_string": "private RefAddr repositoryName = new StringRefAddr(\"repositoryName\", JCR_REPOSITORY_NAME);", "modifier": "private", "type": "RefAddr", "declarator": "repositoryName = new StringRefAddr(\"repositoryName\", JCR_REPOSITORY_NAME)", "var_name": "repositoryName"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/JndiRepositoryFactoryTest.java"}, "test_case": {"identifier": "shouldReturnNullWhenNoRepositoryConfigurationsSpecified", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnNullWhenNoRepositoryConfigurationsSpecified() throws Exception {\n        configFile = new StringRefAddr(\"configFile\", \"tck/default/repo-config.json\");\n\n        Repositories repositories = (Repositories)factory.getObjectInstance(reference, null, null, null);\n        assertThat(repositories, is(nullValue()));\n    }", "signature": "void shouldReturnNullWhenNoRepositoryConfigurationsSpecified()", "full_signature": "@Test public void shouldReturnNullWhenNoRepositoryConfigurationsSpecified()", "class_method_signature": "JndiRepositoryFactoryTest.shouldReturnNullWhenNoRepositoryConfigurationsSpecified()", "testcase": true, "constructor": false, "invocations": ["getObjectInstance", "assertThat", "is", "nullValue"]}, "focal_class": {"identifier": "JndiRepositoryFactory", "superclass": "", "interfaces": "implements ObjectFactory", "fields": [{"original_string": "protected static final Logger LOG = Logger.getLogger(JndiRepositoryFactory.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(JndiRepositoryFactory.class)", "var_name": "LOG"}, {"original_string": "private static final String CONFIG_FILE = \"configFile\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_FILE = \"configFile\"", "var_name": "CONFIG_FILE"}, {"original_string": "private static final String CONFIG_FILES = \"configFiles\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_FILES = \"configFiles\"", "var_name": "CONFIG_FILES"}, {"original_string": "private static final String REPOSITORY_NAME = \"repositoryName\";", "modifier": "private static final", "type": "String", "declarator": "REPOSITORY_NAME = \"repositoryName\"", "var_name": "REPOSITORY_NAME"}, {"original_string": "private static final ModeShapeEngine ENGINE = new ModeShapeEngine();", "modifier": "private static final", "type": "ModeShapeEngine", "declarator": "ENGINE = new ModeShapeEngine()", "var_name": "ENGINE"}], "methods": [{"identifier": "shutdown", "parameters": "()", "modifiers": "static", "return": "Future<Boolean>", "signature": "Future<Boolean> shutdown()", "full_signature": "static Future<Boolean> shutdown()", "class_method_signature": "JndiRepositoryFactory.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getRepository", "parameters": "( String configFileName,\n                                                             String repositoryName,\n                                                             final Context nameCtx,\n                                                             final Name jndiName )", "modifiers": "private static synchronized", "return": "JcrRepository", "signature": "JcrRepository getRepository( String configFileName,\n                                                             String repositoryName,\n                                                             final Context nameCtx,\n                                                             final Name jndiName )", "full_signature": "private static synchronized JcrRepository getRepository( String configFileName,\n                                                             String repositoryName,\n                                                             final Context nameCtx,\n                                                             final Name jndiName )", "class_method_signature": "JndiRepositoryFactory.getRepository( String configFileName,\n                                                             String repositoryName,\n                                                             final Context nameCtx,\n                                                             final Name jndiName )", "testcase": false, "constructor": false}, {"identifier": "registerNamingListener", "parameters": "( EventContext evtCtx,\n                                                final Name jndiName )", "modifiers": "private static", "return": "void", "signature": "void registerNamingListener( EventContext evtCtx,\n                                                final Name jndiName )", "full_signature": "private static void registerNamingListener( EventContext evtCtx,\n                                                final Name jndiName )", "class_method_signature": "JndiRepositoryFactory.registerNamingListener( EventContext evtCtx,\n                                                final Name jndiName )", "testcase": false, "constructor": false}, {"identifier": "getObjectInstance", "parameters": "( Object obj,\n                                     final Name name,\n                                     final Context nameCtx,\n                                     Hashtable<?, ?> environment )", "modifiers": "@Override public", "return": "Object", "signature": "Object getObjectInstance( Object obj,\n                                     final Name name,\n                                     final Context nameCtx,\n                                     Hashtable<?, ?> environment )", "full_signature": "@Override public Object getObjectInstance( Object obj,\n                                     final Name name,\n                                     final Context nameCtx,\n                                     Hashtable<?, ?> environment )", "class_method_signature": "JndiRepositoryFactory.getObjectInstance( Object obj,\n                                     final Name name,\n                                     final Context nameCtx,\n                                     Hashtable<?, ?> environment )", "testcase": false, "constructor": false}, {"identifier": "parseStrings", "parameters": "( String value )", "modifiers": "protected", "return": "Set<String>", "signature": "Set<String> parseStrings( String value )", "full_signature": "protected Set<String> parseStrings( String value )", "class_method_signature": "JndiRepositoryFactory.parseStrings( String value )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/JndiRepositoryFactory.java"}, "focal_method": {"identifier": "getObjectInstance", "parameters": "( Object obj,\n                                     final Name name,\n                                     final Context nameCtx,\n                                     Hashtable<?, ?> environment )", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object getObjectInstance( Object obj,\n                                     final Name name,\n                                     final Context nameCtx,\n                                     Hashtable<?, ?> environment )\n        throws IOException, SAXException, RepositoryException, NamingException {\n        if (!(obj instanceof Reference)) return null;\n        Reference ref = (Reference)obj;\n\n        // Get the name of the repository\n        RefAddr repositoryName = ref.get(REPOSITORY_NAME);\n        String repoName = repositoryName != null ? repositoryName.getContent().toString() : null;\n\n        // Get the configuration file\n        RefAddr configFileRef = ref.get(CONFIG_FILE);\n        String configFile = configFileRef != null ? configFileRef.getContent().toString() : null;\n\n        RefAddr configFilesRef = ref.get(CONFIG_FILES);\n        Set<String> configFiles = configFilesRef != null ? parseStrings(configFilesRef.getContent().toString()) : null;\n\n        if (!StringUtil.isBlank(repoName) && !StringUtil.isBlank(configFile)) {\n            // Start the named repository ...\n            return getRepository(configFile, repoName, nameCtx, name);\n        }\n        else if (configFiles != null) {\n            // Start the configured repositories ...\n            for (String file : configFiles) {\n                getRepository(file, null, nameCtx, name);\n            }\n            return ENGINE;\n        }\n        return null;\n    }", "signature": "Object getObjectInstance( Object obj,\n                                     final Name name,\n                                     final Context nameCtx,\n                                     Hashtable<?, ?> environment )", "full_signature": "@Override public Object getObjectInstance( Object obj,\n                                     final Name name,\n                                     final Context nameCtx,\n                                     Hashtable<?, ?> environment )", "class_method_signature": "JndiRepositoryFactory.getObjectInstance( Object obj,\n                                     final Name name,\n                                     final Context nameCtx,\n                                     Hashtable<?, ?> environment )", "testcase": false, "constructor": false, "invocations": ["get", "toString", "getContent", "get", "toString", "getContent", "get", "parseStrings", "toString", "getContent", "isBlank", "isBlank", "getRepository", "getRepository"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}