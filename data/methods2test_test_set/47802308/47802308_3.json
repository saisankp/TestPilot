{"test_class": {"identifier": "IntroTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/modules/common/src/test/java/org/onetwo/common/reflect/IntroTest.java"}, "test_case": {"identifier": "testJFishProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testJFishProperty(){\n\t\tIntro<IntroTestClass> intro = ClassIntroManager.getInstance().getIntro(IntroTestClass.class);\n\t\tassertThat(intro.getJFishProperty(\"name\", false).hasAnnotation(FieldName.class)).isTrue();\n\t}", "signature": "void testJFishProperty()", "full_signature": "@Test public void testJFishProperty()", "class_method_signature": "IntroTest.testJFishProperty()", "testcase": true, "constructor": false, "invocations": ["getIntro", "getInstance", "isTrue", "assertThat", "hasAnnotation", "getJFishProperty"]}, "focal_class": {"identifier": "Intro", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String JAVASSIST_KEY = \"_$$_javassist_\";", "modifier": "public static final", "type": "String", "declarator": "JAVASSIST_KEY = \"_$$_javassist_\"", "var_name": "JAVASSIST_KEY"}, {"original_string": "public static final String READMETHOD_KEY = \"get\";", "modifier": "public static final", "type": "String", "declarator": "READMETHOD_KEY = \"get\"", "var_name": "READMETHOD_KEY"}, {"original_string": "public static final String BOOLEAN_READMETHOD_KEY = \"is\";", "modifier": "public static final", "type": "String", "declarator": "BOOLEAN_READMETHOD_KEY = \"is\"", "var_name": "BOOLEAN_READMETHOD_KEY"}, {"original_string": "public static final String WRITEMETHOD_KEY = \"set\";", "modifier": "public static final", "type": "String", "declarator": "WRITEMETHOD_KEY = \"set\"", "var_name": "WRITEMETHOD_KEY"}, {"original_string": "private final Class<T> clazz;", "modifier": "private final", "type": "Class<T>", "declarator": "clazz", "var_name": "clazz"}, {"original_string": "private Map<String, PropertyDescriptor> propertyDescriptors;", "modifier": "private", "type": "Map<String, PropertyDescriptor>", "declarator": "propertyDescriptors", "var_name": "propertyDescriptors"}, {"original_string": "private volatile Map<String, Field> fieldMaps;", "modifier": "private volatile", "type": "Map<String, Field>", "declarator": "fieldMaps", "var_name": "fieldMaps"}, {"original_string": "private ReentrantLock _fieldLock = new ReentrantLock();", "modifier": "private", "type": "ReentrantLock", "declarator": "_fieldLock = new ReentrantLock()", "var_name": "_fieldLock"}, {"original_string": "private volatile Map<String, Field> _allFieldMap;", "modifier": "private volatile", "type": "Map<String, Field>", "declarator": "_allFieldMap", "var_name": "_allFieldMap"}, {"original_string": "private ReentrantLock _allFieldLock = new ReentrantLock();", "modifier": "private", "type": "ReentrantLock", "declarator": "_allFieldLock = new ReentrantLock()", "var_name": "_allFieldLock"}, {"original_string": "private volatile Map<String, JFishProperty> jfishProperties;", "modifier": "private volatile", "type": "Map<String, JFishProperty>", "declarator": "jfishProperties", "var_name": "jfishProperties"}, {"original_string": "private LoadingCache<String, JFishFieldInfoImpl> fieldInfoCaches = CacheBuilder.newBuilder()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build(new CacheLoader<String, JFishFieldInfoImpl>() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpublic JFishFieldInfoImpl load(String propName) throws Exception {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tField field = getField(propName);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(field==null){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new NoSuchElementException(\"class:\"+clazz+\", field:\"+propName);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn new JFishFieldInfoImpl(clazz, field);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});", "modifier": "private", "type": "LoadingCache<String, JFishFieldInfoImpl>", "declarator": "fieldInfoCaches = CacheBuilder.newBuilder()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build(new CacheLoader<String, JFishFieldInfoImpl>() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpublic JFishFieldInfoImpl load(String propName) throws Exception {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tField field = getField(propName);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(field==null){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new NoSuchElementException(\"class:\"+clazz+\", field:\"+propName);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn new JFishFieldInfoImpl(clazz, field);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})", "var_name": "fieldInfoCaches"}, {"original_string": "private LoadingCache<String, JFishPropertyInfoImpl> propertyInfoCaches = CacheBuilder.newBuilder()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build(new CacheLoader<String, JFishPropertyInfoImpl>() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpublic JFishPropertyInfoImpl load(String propName) throws Exception {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPropertyDescriptor pd = getProperty(propName);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(pd==null){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new NoSuchElementException(\"class:\"+clazz+\", property:\"+propName);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn new JFishPropertyInfoImpl(clazz, pd);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});", "modifier": "private", "type": "LoadingCache<String, JFishPropertyInfoImpl>", "declarator": "propertyInfoCaches = CacheBuilder.newBuilder()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build(new CacheLoader<String, JFishPropertyInfoImpl>() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpublic JFishPropertyInfoImpl load(String propName) throws Exception {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPropertyDescriptor pd = getProperty(propName);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(pd==null){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new NoSuchElementException(\"class:\"+clazz+\", property:\"+propName);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn new JFishPropertyInfoImpl(clazz, pd);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})", "var_name": "propertyInfoCaches"}, {"original_string": "private LoadingCache<FindMethodKey, Method> methodCaches = CacheBuilder.newBuilder()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build(new CacheLoader<FindMethodKey, Method>(){\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpublic Method load(FindMethodKey key)throws Exception {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn ReflectUtils.findMethod(false, key.clazz, key.methodName, key.paramTypes);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});", "modifier": "private", "type": "LoadingCache<FindMethodKey, Method>", "declarator": "methodCaches = CacheBuilder.newBuilder()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build(new CacheLoader<FindMethodKey, Method>(){\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpublic Method load(FindMethodKey key)throws Exception {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn ReflectUtils.findMethod(false, key.clazz, key.methodName, key.paramTypes);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})", "var_name": "methodCaches"}], "methods": [{"identifier": "wrap", "parameters": "(Class<E> clazz)", "modifiers": "public static", "return": "Intro<E>", "signature": "Intro<E> wrap(Class<E> clazz)", "full_signature": "public static Intro<E> wrap(Class<E> clazz)", "class_method_signature": "Intro.wrap(Class<E> clazz)", "testcase": false, "constructor": false}, {"identifier": "Intro", "parameters": "(Class<T> clazz)", "modifiers": "public", "return": "", "signature": " Intro(Class<T> clazz)", "full_signature": "public  Intro(Class<T> clazz)", "class_method_signature": "Intro.Intro(Class<T> clazz)", "testcase": false, "constructor": true}, {"identifier": "getClazz", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getClazz()", "full_signature": "public Class<?> getClazz()", "class_method_signature": "Intro.getClazz()", "testcase": false, "constructor": false}, {"identifier": "isMap", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMap()", "full_signature": "public boolean isMap()", "class_method_signature": "Intro.isMap()", "testcase": false, "constructor": false}, {"identifier": "isCollection", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCollection()", "full_signature": "public boolean isCollection()", "class_method_signature": "Intro.isCollection()", "testcase": false, "constructor": false}, {"identifier": "isArray", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isArray()", "full_signature": "public boolean isArray()", "class_method_signature": "Intro.isArray()", "testcase": false, "constructor": false}, {"identifier": "loadPropertyDescriptors", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadPropertyDescriptors()", "full_signature": "private void loadPropertyDescriptors()", "class_method_signature": "Intro.loadPropertyDescriptors()", "testcase": false, "constructor": false}, {"identifier": "loadPropertyDescriptors0", "parameters": "()", "modifiers": "private", "return": "Map<String, PropertyDescriptor>", "signature": "Map<String, PropertyDescriptor> loadPropertyDescriptors0()", "full_signature": "private Map<String, PropertyDescriptor> loadPropertyDescriptors0()", "class_method_signature": "Intro.loadPropertyDescriptors0()", "testcase": false, "constructor": false}, {"identifier": "getAllFields", "parameters": "()", "modifiers": "public", "return": "List<Field>", "signature": "List<Field> getAllFields()", "full_signature": "public List<Field> getAllFields()", "class_method_signature": "Intro.getAllFields()", "testcase": false, "constructor": false}, {"identifier": "getAllPropertyNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAllPropertyNames()", "full_signature": "public List<String> getAllPropertyNames()", "class_method_signature": "Intro.getAllPropertyNames()", "testcase": false, "constructor": false}, {"identifier": "getPropertyNames", "parameters": "(final Class<? extends Annotation>... ignoreAnnotation)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "List<String>", "signature": "List<String> getPropertyNames(final Class<? extends Annotation>... ignoreAnnotation)", "full_signature": "@SuppressWarnings(\"unchecked\") public List<String> getPropertyNames(final Class<? extends Annotation>... ignoreAnnotation)", "class_method_signature": "Intro.getPropertyNames(final Class<? extends Annotation>... ignoreAnnotation)", "testcase": false, "constructor": false}, {"identifier": "getPropertyDescriptors", "parameters": "(final Class<? extends Annotation>... ignoreAnnotations)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "JFishList<PropertyDescriptor>", "signature": "JFishList<PropertyDescriptor> getPropertyDescriptors(final Class<? extends Annotation>... ignoreAnnotations)", "full_signature": "@SuppressWarnings(\"unchecked\") public JFishList<PropertyDescriptor> getPropertyDescriptors(final Class<? extends Annotation>... ignoreAnnotations)", "class_method_signature": "Intro.getPropertyDescriptors(final Class<? extends Annotation>... ignoreAnnotations)", "testcase": false, "constructor": false}, {"identifier": "getAllFieldMap", "parameters": "()", "modifiers": "public", "return": "Map<String, Field>", "signature": "Map<String, Field> getAllFieldMap()", "full_signature": "public Map<String, Field> getAllFieldMap()", "class_method_signature": "Intro.getAllFieldMap()", "testcase": false, "constructor": false}, {"identifier": "_loadAllFields", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void _loadAllFields()", "full_signature": "private void _loadAllFields()", "class_method_signature": "Intro._loadAllFields()", "testcase": false, "constructor": false}, {"identifier": "_loadFields", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void _loadFields()", "full_signature": "private void _loadFields()", "class_method_signature": "Intro._loadFields()", "testcase": false, "constructor": false}, {"identifier": "getFieldMaps", "parameters": "()", "modifiers": "public", "return": "Map<String, Field>", "signature": "Map<String, Field> getFieldMaps()", "full_signature": "public Map<String, Field> getFieldMaps()", "class_method_signature": "Intro.getFieldMaps()", "testcase": false, "constructor": false}, {"identifier": "getPropertyDescriptors", "parameters": "()", "modifiers": "public", "return": "Map<String, PropertyDescriptor>", "signature": "Map<String, PropertyDescriptor> getPropertyDescriptors()", "full_signature": "public Map<String, PropertyDescriptor> getPropertyDescriptors()", "class_method_signature": "Intro.getPropertyDescriptors()", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "public", "return": "Collection<PropertyDescriptor>", "signature": "Collection<PropertyDescriptor> getProperties()", "full_signature": "public Collection<PropertyDescriptor> getProperties()", "class_method_signature": "Intro.getProperties()", "testcase": false, "constructor": false}, {"identifier": "getPropertyArray", "parameters": "()", "modifiers": "public", "return": "PropertyDescriptor[]", "signature": "PropertyDescriptor[] getPropertyArray()", "full_signature": "public PropertyDescriptor[] getPropertyArray()", "class_method_signature": "Intro.getPropertyArray()", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String propName)", "modifiers": "public", "return": "PropertyDescriptor", "signature": "PropertyDescriptor getProperty(String propName)", "full_signature": "public PropertyDescriptor getProperty(String propName)", "class_method_signature": "Intro.getProperty(String propName)", "testcase": false, "constructor": false}, {"identifier": "checkProperty", "parameters": "(String propName)", "modifiers": "public", "return": "PropertyDescriptor", "signature": "PropertyDescriptor checkProperty(String propName)", "full_signature": "public PropertyDescriptor checkProperty(String propName)", "class_method_signature": "Intro.checkProperty(String propName)", "testcase": false, "constructor": false}, {"identifier": "hasProperty", "parameters": "(String propName)", "modifiers": "public", "return": "boolean", "signature": "boolean hasProperty(String propName)", "full_signature": "public boolean hasProperty(String propName)", "class_method_signature": "Intro.hasProperty(String propName)", "testcase": false, "constructor": false}, {"identifier": "getJFishProperties", "parameters": "()", "modifiers": "public", "return": "Map<String, JFishProperty>", "signature": "Map<String, JFishProperty> getJFishProperties()", "full_signature": "public Map<String, JFishProperty> getJFishProperties()", "class_method_signature": "Intro.getJFishProperties()", "testcase": false, "constructor": false}, {"identifier": "getJFishProperty", "parameters": "(String propName, boolean isField)", "modifiers": "public", "return": "JFishProperty", "signature": "JFishProperty getJFishProperty(String propName, boolean isField)", "full_signature": "public JFishProperty getJFishProperty(String propName, boolean isField)", "class_method_signature": "Intro.getJFishProperty(String propName, boolean isField)", "testcase": false, "constructor": false}, {"identifier": "getFields", "parameters": "()", "modifiers": "public", "return": "Collection<Field>", "signature": "Collection<Field> getFields()", "full_signature": "public Collection<Field> getFields()", "class_method_signature": "Intro.getFields()", "testcase": false, "constructor": false}, {"identifier": "getFieldList", "parameters": "(boolean parent)", "modifiers": "public", "return": "List<Field>", "signature": "List<Field> getFieldList(boolean parent)", "full_signature": "public List<Field> getFieldList(boolean parent)", "class_method_signature": "Intro.getFieldList(boolean parent)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(String fieldName)", "modifiers": "public", "return": "Field", "signature": "Field getField(String fieldName)", "full_signature": "public Field getField(String fieldName)", "class_method_signature": "Intro.getField(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "containsField", "parameters": "(String fieldName, boolean includeParent)", "modifiers": "public", "return": "boolean", "signature": "boolean containsField(String fieldName, boolean includeParent)", "full_signature": "public boolean containsField(String fieldName, boolean includeParent)", "class_method_signature": "Intro.containsField(String fieldName, boolean includeParent)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(String fieldName, boolean parent)", "modifiers": "public", "return": "Field", "signature": "Field getField(String fieldName, boolean parent)", "full_signature": "public Field getField(String fieldName, boolean parent)", "class_method_signature": "Intro.getField(String fieldName, boolean parent)", "testcase": false, "constructor": false}, {"identifier": "getStaticField", "parameters": "(String fieldName)", "modifiers": "public", "return": "Field", "signature": "Field getStaticField(String fieldName)", "full_signature": "public Field getStaticField(String fieldName)", "class_method_signature": "Intro.getStaticField(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "checkField", "parameters": "(String fieldName, boolean parent)", "modifiers": "public", "return": "Field", "signature": "Field checkField(String fieldName, boolean parent)", "full_signature": "public Field checkField(String fieldName, boolean parent)", "class_method_signature": "Intro.checkField(String fieldName, boolean parent)", "testcase": false, "constructor": false}, {"identifier": "getStaticFieldValue", "parameters": "(String fieldName, boolean parent)", "modifiers": "public", "return": "Object", "signature": "Object getStaticFieldValue(String fieldName, boolean parent)", "full_signature": "public Object getStaticFieldValue(String fieldName, boolean parent)", "class_method_signature": "Intro.getStaticFieldValue(String fieldName, boolean parent)", "testcase": false, "constructor": false}, {"identifier": "getFieldValue", "parameters": "(Field f, Object obj, boolean throwIfError)", "modifiers": "public static", "return": "Object", "signature": "Object getFieldValue(Field f, Object obj, boolean throwIfError)", "full_signature": "public static Object getFieldValue(Field f, Object obj, boolean throwIfError)", "class_method_signature": "Intro.getFieldValue(Field f, Object obj, boolean throwIfError)", "testcase": false, "constructor": false}, {"identifier": "setFieldValue", "parameters": "(Field f, Object obj, Object value)", "modifiers": "public static", "return": "void", "signature": "void setFieldValue(Field f, Object obj, Object value)", "full_signature": "public static void setFieldValue(Field f, Object obj, Object value)", "class_method_signature": "Intro.setFieldValue(Field f, Object obj, Object value)", "testcase": false, "constructor": false}, {"identifier": "getFieldValue", "parameters": "(Object obj, String fieldName)", "modifiers": "public", "return": "Object", "signature": "Object getFieldValue(Object obj, String fieldName)", "full_signature": "public Object getFieldValue(Object obj, String fieldName)", "class_method_signature": "Intro.getFieldValue(Object obj, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getFieldValue", "parameters": "(Object obj, String fieldName, boolean parent)", "modifiers": "public", "return": "Object", "signature": "Object getFieldValue(Object obj, String fieldName, boolean parent)", "full_signature": "public Object getFieldValue(Object obj, String fieldName, boolean parent)", "class_method_signature": "Intro.getFieldValue(Object obj, String fieldName, boolean parent)", "testcase": false, "constructor": false}, {"identifier": "setFieldValue", "parameters": "(Object obj, String fieldName, Object value)", "modifiers": "public", "return": "void", "signature": "void setFieldValue(Object obj, String fieldName, Object value)", "full_signature": "public void setFieldValue(Object obj, String fieldName, Object value)", "class_method_signature": "Intro.setFieldValue(Object obj, String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "setFieldValue", "parameters": "(Object obj, String fieldName, Object value, boolean parent)", "modifiers": "public", "return": "void", "signature": "void setFieldValue(Object obj, String fieldName, Object value, boolean parent)", "full_signature": "public void setFieldValue(Object obj, String fieldName, Object value, boolean parent)", "class_method_signature": "Intro.setFieldValue(Object obj, String fieldName, Object value, boolean parent)", "testcase": false, "constructor": false}, {"identifier": "setStaticFieldValue", "parameters": "(Object value, String fieldName)", "modifiers": "public", "return": "void", "signature": "void setStaticFieldValue(Object value, String fieldName)", "full_signature": "public void setStaticFieldValue(Object value, String fieldName)", "class_method_signature": "Intro.setStaticFieldValue(Object value, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "setStaticFieldValue", "parameters": "(Object value, String fieldName, boolean parent)", "modifiers": "public", "return": "void", "signature": "void setStaticFieldValue(Object value, String fieldName, boolean parent)", "full_signature": "public void setStaticFieldValue(Object value, String fieldName, boolean parent)", "class_method_signature": "Intro.setStaticFieldValue(Object value, String fieldName, boolean parent)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "()", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public", "return": "T", "signature": "T newInstance()", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public T newInstance()", "class_method_signature": "Intro.newInstance()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Map<String, ?> propValues, TypeJudge typeJudge)", "modifiers": "public", "return": "T", "signature": "T newInstance(Map<String, ?> propValues, TypeJudge typeJudge)", "full_signature": "public T newInstance(Map<String, ?> propValues, TypeJudge typeJudge)", "class_method_signature": "Intro.newInstance(Map<String, ?> propValues, TypeJudge typeJudge)", "testcase": false, "constructor": false}, {"identifier": "newBy", "parameters": "(Map<String, ?> propValues)", "modifiers": "public", "return": "T", "signature": "T newBy(Map<String, ?> propValues)", "full_signature": "public T newBy(Map<String, ?> propValues)", "class_method_signature": "Intro.newBy(Map<String, ?> propValues)", "testcase": false, "constructor": false}, {"identifier": "newFrom", "parameters": "(Map<?, ?> propValues)", "modifiers": "public", "return": "T", "signature": "T newFrom(Map<?, ?> propValues)", "full_signature": "public T newFrom(Map<?, ?> propValues)", "class_method_signature": "Intro.newFrom(Map<?, ?> propValues)", "testcase": false, "constructor": false}, {"identifier": "setPropertyValue", "parameters": "(Object element, String propName, Object value)", "modifiers": "public", "return": "Object", "signature": "Object setPropertyValue(Object element, String propName, Object value)", "full_signature": "public Object setPropertyValue(Object element, String propName, Object value)", "class_method_signature": "Intro.setPropertyValue(Object element, String propName, Object value)", "testcase": false, "constructor": false}, {"identifier": "setPropertyValue", "parameters": "(Object element, PropertyDescriptor pd, Object value)", "modifiers": "public", "return": "Object", "signature": "Object setPropertyValue(Object element, PropertyDescriptor pd, Object value)", "full_signature": "public Object setPropertyValue(Object element, PropertyDescriptor pd, Object value)", "class_method_signature": "Intro.setPropertyValue(Object element, PropertyDescriptor pd, Object value)", "testcase": false, "constructor": false}, {"identifier": "getPropertyValue", "parameters": "(Object element, String propName)", "modifiers": "public", "return": "Object", "signature": "Object getPropertyValue(Object element, String propName)", "full_signature": "public Object getPropertyValue(Object element, String propName)", "class_method_signature": "Intro.getPropertyValue(Object element, String propName)", "testcase": false, "constructor": false}, {"identifier": "getPropertyValue", "parameters": "(Object element, PropertyDescriptor pd)", "modifiers": "public", "return": "Object", "signature": "Object getPropertyValue(Object element, PropertyDescriptor pd)", "full_signature": "public Object getPropertyValue(Object element, PropertyDescriptor pd)", "class_method_signature": "Intro.getPropertyValue(Object element, PropertyDescriptor pd)", "testcase": false, "constructor": false}, {"identifier": "getReadMethod", "parameters": "(String propName)", "modifiers": "public", "return": "Method", "signature": "Method getReadMethod(String propName)", "full_signature": "public Method getReadMethod(String propName)", "class_method_signature": "Intro.getReadMethod(String propName)", "testcase": false, "constructor": false}, {"identifier": "getWriteMethod", "parameters": "(String propName)", "modifiers": "public", "return": "Method", "signature": "Method getWriteMethod(String propName)", "full_signature": "public Method getWriteMethod(String propName)", "class_method_signature": "Intro.getWriteMethod(String propName)", "testcase": false, "constructor": false}, {"identifier": "getReadMethodName", "parameters": "(String propName, Class<?> returnType)", "modifiers": "public static", "return": "String", "signature": "String getReadMethodName(String propName, Class<?> returnType)", "full_signature": "public static String getReadMethodName(String propName, Class<?> returnType)", "class_method_signature": "Intro.getReadMethodName(String propName, Class<?> returnType)", "testcase": false, "constructor": false}, {"identifier": "getWriteMethodName", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String getWriteMethodName(String name)", "full_signature": "public static String getWriteMethodName(String name)", "class_method_signature": "Intro.getWriteMethodName(String name)", "testcase": false, "constructor": false}, {"identifier": "desribPropertyNames", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> desribPropertyNames()", "full_signature": "public Collection<String> desribPropertyNames()", "class_method_signature": "Intro.desribPropertyNames()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Object source, Object target, PropertyCopyer<PropertyDescriptor> copyer)", "modifiers": "public", "return": "void", "signature": "void copy(Object source, Object target, PropertyCopyer<PropertyDescriptor> copyer)", "full_signature": "public void copy(Object source, Object target, PropertyCopyer<PropertyDescriptor> copyer)", "class_method_signature": "Intro.copy(Object source, Object target, PropertyCopyer<PropertyDescriptor> copyer)", "testcase": false, "constructor": false}, {"identifier": "findMethod", "parameters": "(String name, Class<?>... paramTypes)", "modifiers": "public", "return": "Method", "signature": "Method findMethod(String name, Class<?>... paramTypes)", "full_signature": "public Method findMethod(String name, Class<?>... paramTypes)", "class_method_signature": "Intro.findMethod(String name, Class<?>... paramTypes)", "testcase": false, "constructor": false}, {"identifier": "findSuperClasses", "parameters": "()", "modifiers": "public", "return": "List<Class<?>>", "signature": "List<Class<?>> findSuperClasses()", "full_signature": "public List<Class<?>> findSuperClasses()", "class_method_signature": "Intro.findSuperClasses()", "testcase": false, "constructor": false}, {"identifier": "findSuperClasses", "parameters": "(Class<?> stopClass)", "modifiers": "public", "return": "List<Class<?>>", "signature": "List<Class<?>> findSuperClasses(Class<?> stopClass)", "full_signature": "public List<Class<?>> findSuperClasses(Class<?> stopClass)", "class_method_signature": "Intro.findSuperClasses(Class<?> stopClass)", "testcase": false, "constructor": false}, {"identifier": "getNotStaticAndTransientFields", "parameters": "(boolean parent)", "modifiers": "public", "return": "Collection<Field>", "signature": "Collection<Field> getNotStaticAndTransientFields(boolean parent)", "full_signature": "public Collection<Field> getNotStaticAndTransientFields(boolean parent)", "class_method_signature": "Intro.getNotStaticAndTransientFields(boolean parent)", "testcase": false, "constructor": false}, {"identifier": "getAnnotationWithParent", "parameters": "(Class<E> annotationClass)", "modifiers": "public", "return": "E", "signature": "E getAnnotationWithParent(Class<E> annotationClass)", "full_signature": "public E getAnnotationWithParent(Class<E> annotationClass)", "class_method_signature": "Intro.getAnnotationWithParent(Class<E> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getAnnotationWithSupers", "parameters": "(Class<E> annotationClass)", "modifiers": "public", "return": "E", "signature": "E getAnnotationWithSupers(Class<E> annotationClass)", "full_signature": "public E getAnnotationWithSupers(Class<E> annotationClass)", "class_method_signature": "Intro.getAnnotationWithSupers(Class<E> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getAnnotationWithInterfaces", "parameters": "(Class<E> annotationClass)", "modifiers": "public", "return": "E", "signature": "E getAnnotationWithInterfaces(Class<E> annotationClass)", "full_signature": "public E getAnnotationWithInterfaces(Class<E> annotationClass)", "class_method_signature": "Intro.getAnnotationWithInterfaces(Class<E> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Intro.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Intro.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Intro.equals(Object obj)", "testcase": false, "constructor": false}], "file": "core/modules/common/src/main/java/org/onetwo/common/reflect/Intro.java"}, "focal_method": {"identifier": "getJFishProperty", "parameters": "(String propName, boolean isField)", "modifiers": "public", "return": "JFishProperty", "body": "public JFishProperty getJFishProperty(String propName, boolean isField){\n\t\tif(StringUtils.isBlank(propName)){\n\t\t\treturn null;\n\t\t}\n\t\tJFishProperty prop = null;\n\t\tif(isField){\n\t\t\t/* \u6539\u7528cache\uff0c\u4fee\u590d\u5927\u91cf\u83b7\u53d6\u5b57\u6bb5\u65f6\u6027\u80fd\u6781\u5dee\u7684\u95ee\u9898\n\t\t\t * Field field = getField(propName);\n\t\t\treturn new JFishFieldInfoImpl(clazz, field);*/\n\t\t\ttry {\n\t\t\t\tprop = fieldInfoCaches.get(propName);\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tthrow new BaseException(\"getJFishProperty error\", e);\n\t\t\t}\n\t\t}else{\n\t\t\t/*PropertyDescriptor pd = getProperty(propName);\n\t\t\treturn new JFishPropertyInfoImpl(clazz, pd);*/\n\t\t\ttry {\n\t\t\t\tprop = propertyInfoCaches.get(propName);\n\t\t\t} catch (UncheckedExecutionException e) {\n\t\t\t\tif(e.getCause() instanceof NoSuchElementException){\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t}catch (ExecutionException e) {\n\t\t\t\tthrow new BaseException(\"getJFishProperty error\", e);\n\t\t\t}\n\t\t}\n\t\treturn prop;\n\t}", "signature": "JFishProperty getJFishProperty(String propName, boolean isField)", "full_signature": "public JFishProperty getJFishProperty(String propName, boolean isField)", "class_method_signature": "Intro.getJFishProperty(String propName, boolean isField)", "testcase": false, "constructor": false, "invocations": ["isBlank", "get", "get", "getCause"]}, "repository": {"repo_id": 47802308, "url": "https://github.com/wayshall/onetwo", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 16, "size": 57582, "license": "licensed"}}