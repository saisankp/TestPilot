{"test_class": {"identifier": "JavaxDANameFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TOTO = \"toto\";", "modifier": "private static final", "type": "String", "declarator": "TOTO = \"toto\"", "var_name": "TOTO"}], "file": "core-parent/annotation-processor/src/test/java/fr/javatronic/damapping/processor/impl/javaxparsing/JavaxDANameFactoryTest.java"}, "test_case": {"identifier": "from_Name", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void from_Name() throws Exception {\n    Name mock = Mockito.mock(Name.class);\n    when(mock.toString()).thenReturn(TOTO);\n    assertThat(JavaxDANameFactory.from(mock).getName()).isEqualTo(TOTO);\n  }", "signature": "void from_Name()", "full_signature": "@Test public void from_Name()", "class_method_signature": "JavaxDANameFactoryTest.from_Name()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "toString", "isEqualTo", "assertThat", "getName", "from"]}, "focal_class": {"identifier": "JavaxDANameFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "JavaxDANameFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " JavaxDANameFactory()", "full_signature": "private  JavaxDANameFactory()", "class_method_signature": "JavaxDANameFactory.JavaxDANameFactory()", "testcase": false, "constructor": true}, {"identifier": "from", "parameters": "(@Nonnull Name name)", "modifiers": "@Nonnull public static", "return": "DAName", "signature": "DAName from(@Nonnull Name name)", "full_signature": "@Nonnull public static DAName from(@Nonnull Name name)", "class_method_signature": "JavaxDANameFactory.from(@Nonnull Name name)", "testcase": false, "constructor": false}], "file": "core-parent/annotation-processor/src/main/java/fr/javatronic/damapping/processor/impl/javaxparsing/JavaxDANameFactory.java"}, "focal_method": {"identifier": "from", "parameters": "(@Nonnull Name name)", "modifiers": "@Nonnull public static", "return": "DAName", "body": "@Nonnull\n  public static DAName from(@Nonnull Name name) {\n    return new DANameImpl(name.toString());\n  }", "signature": "DAName from(@Nonnull Name name)", "full_signature": "@Nonnull public static DAName from(@Nonnull Name name)", "class_method_signature": "JavaxDANameFactory.from(@Nonnull Name name)", "testcase": false, "constructor": false, "invocations": ["toString"]}, "repository": {"repo_id": 14714017, "url": "https://github.com/lesaint/damapping", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 14, "size": 4324, "license": "licensed"}}