{"test_class": {"identifier": "SecretManagementServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SOME_DEVICE = \"SOME_DEVICE\";", "modifier": "private static final", "type": "String", "declarator": "SOME_DEVICE = \"SOME_DEVICE\"", "var_name": "SOME_DEVICE"}, {"original_string": "private SecretManagementService service;", "modifier": "private", "type": "SecretManagementService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n    private EncryptionDelegate encryptionDelegate;", "modifier": "@Mock\n    private", "type": "EncryptionDelegate", "declarator": "encryptionDelegate", "var_name": "encryptionDelegate"}, {"original_string": "@Mock\n    private DbEncryptedSecretRepository secretRepository;", "modifier": "@Mock\n    private", "type": "DbEncryptedSecretRepository", "declarator": "secretRepository", "var_name": "secretRepository"}, {"original_string": "@Mock\n    private DbEncryptionKeyRepository keyRepository;", "modifier": "@Mock\n    private", "type": "DbEncryptionKeyRepository", "declarator": "keyRepository", "var_name": "keyRepository"}], "file": "osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java"}, "test_case": {"identifier": "storeSecrets", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void storeSecrets() throws Exception {\n        //GIVEN\n        final TypedSecret typedSecret = new TypedSecret();\n        typedSecret.setSecretType(SecretType.E_METER_MASTER_KEY);\n        typedSecret.setSecret(HexUtils.toHexString(\"$3cr3t\".getBytes()));\n        final DbEncryptionKeyReference keyReference = new DbEncryptionKeyReference();\n        keyReference.setEncryptionProviderType(EncryptionProviderType.JRE);\n        keyReference.setReference(\"keyReferenceString\");\n        final EncryptedSecret encryptedSecret = new EncryptedSecret(EncryptionProviderType.JRE, \"$3cr3t\".getBytes());\n        final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n\n        //WHEN\n        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(null);\n        when(this.keyRepository.findByTypeAndValid(any(), any(), any())).thenReturn(\n                new PageImpl<>(Arrays.asList(keyReference)));\n        when(this.encryptionDelegate.encrypt(any(), any(), anyString())).thenReturn(encryptedSecret);\n        this.service.storeSecrets(\"SOME_DEVICE\", Arrays.asList(typedSecret));\n        //THEN\n        final ArgumentCaptor<DbEncryptedSecret> secretArgumentCaptor = ArgumentCaptor.forClass(DbEncryptedSecret.class);\n        verify(this.secretRepository).save(secretArgumentCaptor.capture());\n        final DbEncryptedSecret savedSecret = secretArgumentCaptor.getValue();\n        assertThat(savedSecret).isNotNull();\n        assertThat(savedSecret.getDeviceIdentification()).isEqualTo(\"SOME_DEVICE\");\n        assertThat(savedSecret.getSecretType()).isEqualTo(typedSecret.getSecretType());\n        assertThat(savedSecret.getEncodedSecret()).isEqualTo(HexUtils.toHexString(encryptedSecret.getSecret()));\n        assertThat(savedSecret.getEncryptionKeyReference()).isEqualTo(keyReference);\n        assertThat(savedSecret.getCreationTime()).isNotNull();\n    }", "signature": "void storeSecrets()", "full_signature": "@Test public void storeSecrets()", "class_method_signature": "SecretManagementServiceTest.storeSecrets()", "testcase": true, "constructor": false, "invocations": ["setSecretType", "setSecret", "toHexString", "getBytes", "setEncryptionProviderType", "setReference", "getBytes", "thenReturn", "when", "findIdOfValidMostRecent", "any", "any", "any", "thenReturn", "when", "findByTypeAndValid", "any", "any", "any", "asList", "thenReturn", "when", "encrypt", "any", "any", "anyString", "storeSecrets", "asList", "forClass", "save", "verify", "capture", "getValue", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getDeviceIdentification", "isEqualTo", "assertThat", "getSecretType", "getSecretType", "isEqualTo", "assertThat", "getEncodedSecret", "toHexString", "getSecret", "isEqualTo", "assertThat", "getEncryptionKeyReference", "isNotNull", "assertThat", "getCreationTime"]}, "focal_class": {"identifier": "SecretManagementService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EncryptionDelegate encryptionDelegate;", "modifier": "private final", "type": "EncryptionDelegate", "declarator": "encryptionDelegate", "var_name": "encryptionDelegate"}, {"original_string": "private final EncryptionProviderType encryptionProviderType;", "modifier": "private final", "type": "EncryptionProviderType", "declarator": "encryptionProviderType", "var_name": "encryptionProviderType"}, {"original_string": "private final DbEncryptedSecretRepository secretRepository;", "modifier": "private final", "type": "DbEncryptedSecretRepository", "declarator": "secretRepository", "var_name": "secretRepository"}, {"original_string": "private final DbEncryptionKeyRepository keyRepository;", "modifier": "private final", "type": "DbEncryptionKeyRepository", "declarator": "keyRepository", "var_name": "keyRepository"}], "methods": [{"identifier": "SecretManagementService", "parameters": "(\n            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n            final DbEncryptionKeyRepository keyRepository)", "modifiers": "public", "return": "", "signature": " SecretManagementService(\n            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n            final DbEncryptionKeyRepository keyRepository)", "full_signature": "public  SecretManagementService(\n            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n            final DbEncryptionKeyRepository keyRepository)", "class_method_signature": "SecretManagementService.SecretManagementService(\n            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n            final DbEncryptionKeyRepository keyRepository)", "testcase": false, "constructor": true}, {"identifier": "storeSecrets", "parameters": "(final String deviceIdentification, final List<TypedSecret> secrets)", "modifiers": "public", "return": "void", "signature": "void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets)", "full_signature": "public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets)", "class_method_signature": "SecretManagementService.storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "()", "modifiers": "private", "return": "DbEncryptionKeyReference", "signature": "DbEncryptionKeyReference getKey()", "full_signature": "private DbEncryptionKeyReference getKey()", "class_method_signature": "SecretManagementService.getKey()", "testcase": false, "constructor": false}, {"identifier": "validateSecret", "parameters": "(final String deviceIdentification, final TypedSecret secret)", "modifiers": "private", "return": "TypedSecret", "signature": "TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret)", "full_signature": "private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret)", "class_method_signature": "SecretManagementService.validateSecret(final String deviceIdentification, final TypedSecret secret)", "testcase": false, "constructor": false}, {"identifier": "isIdenticalToCurrent", "parameters": "(final String deviceIdentification, final TypedSecret secret)", "modifiers": "private", "return": "boolean", "signature": "boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret)", "full_signature": "private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret)", "class_method_signature": "SecretManagementService.isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret)", "testcase": false, "constructor": false}, {"identifier": "createEncrypted", "parameters": "(final String deviceIdentification, final TypedSecret typedSecret,\n                                              final DbEncryptionKeyReference keyReference)", "modifiers": "private", "return": "DbEncryptedSecret", "signature": "DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n                                              final DbEncryptionKeyReference keyReference)", "full_signature": "private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n                                              final DbEncryptionKeyReference keyReference)", "class_method_signature": "SecretManagementService.createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n                                              final DbEncryptionKeyReference keyReference)", "testcase": false, "constructor": false}, {"identifier": "retrieveSecrets", "parameters": "(final String deviceIdentification, final List<SecretType> secretTypes)", "modifiers": "public", "return": "List<TypedSecret>", "signature": "List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes)", "full_signature": "public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes)", "class_method_signature": "SecretManagementService.retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes)", "testcase": false, "constructor": false}, {"identifier": "retrieveSecret", "parameters": "(final String deviceIdentification, final SecretType secretType)", "modifiers": "public", "return": "Optional<TypedSecret>", "signature": "Optional<TypedSecret> retrieveSecret(final String deviceIdentification, final SecretType secretType)", "full_signature": "public Optional<TypedSecret> retrieveSecret(final String deviceIdentification, final SecretType secretType)", "class_method_signature": "SecretManagementService.retrieveSecret(final String deviceIdentification, final SecretType secretType)", "testcase": false, "constructor": false}, {"identifier": "getTypedSecret", "parameters": "(final Optional<DbEncryptedSecret> dbEncryptedSecret)", "modifiers": "private", "return": "TypedSecret", "signature": "TypedSecret getTypedSecret(final Optional<DbEncryptedSecret> dbEncryptedSecret)", "full_signature": "private TypedSecret getTypedSecret(final Optional<DbEncryptedSecret> dbEncryptedSecret)", "class_method_signature": "SecretManagementService.getTypedSecret(final Optional<DbEncryptedSecret> dbEncryptedSecret)", "testcase": false, "constructor": false}, {"identifier": "createTypedSecret", "parameters": "(final DbEncryptedSecret dbEncryptedSecret,\n                                          final DbEncryptionKeyReference keyReference, final EncryptedSecret encryptedSecret)", "modifiers": "private", "return": "TypedSecret", "signature": "TypedSecret createTypedSecret(final DbEncryptedSecret dbEncryptedSecret,\n                                          final DbEncryptionKeyReference keyReference, final EncryptedSecret encryptedSecret)", "full_signature": "private TypedSecret createTypedSecret(final DbEncryptedSecret dbEncryptedSecret,\n                                          final DbEncryptionKeyReference keyReference, final EncryptedSecret encryptedSecret)", "class_method_signature": "SecretManagementService.createTypedSecret(final DbEncryptedSecret dbEncryptedSecret,\n                                          final DbEncryptionKeyReference keyReference, final EncryptedSecret encryptedSecret)", "testcase": false, "constructor": false}], "file": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java"}, "focal_method": {"identifier": "storeSecrets", "parameters": "(final String deviceIdentification, final List<TypedSecret> secrets)", "modifiers": "public", "return": "void", "body": "public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) {\n        //@formatter:off\n        secrets.stream()\n                .map(t -> this.validateSecret(deviceIdentification, t))\n                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n                .forEach(this.secretRepository::save);\n        //@formatter:on\n    }", "signature": "void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets)", "full_signature": "public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets)", "class_method_signature": "SecretManagementService.storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets)", "testcase": false, "constructor": false, "invocations": ["forEach", "map", "map", "stream", "validateSecret", "createEncrypted", "getKey"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}