{"test_class": {"identifier": "TestKijiCellRewriter", "superclass": "extends KijiClientTest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TestKijiCellRewriter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TestKijiCellRewriter.class)", "var_name": "LOG"}, {"original_string": "private static final String LAYOUT_TEST1 =\n      \"org/kiji/mapreduce/layout/org.kiji.mapreduce.pivot.TestKijiCellRewriter.test1.json\";", "modifier": "private static final", "type": "String", "declarator": "LAYOUT_TEST1 =\n      \"org/kiji/mapreduce/layout/org.kiji.mapreduce.pivot.TestKijiCellRewriter.test1.json\"", "var_name": "LAYOUT_TEST1"}, {"original_string": "private static final String LAYOUT_TEST2 =\n      \"org/kiji/mapreduce/layout/org.kiji.mapreduce.pivot.TestKijiCellRewriter.test2.json\";", "modifier": "private static final", "type": "String", "declarator": "LAYOUT_TEST2 =\n      \"org/kiji/mapreduce/layout/org.kiji.mapreduce.pivot.TestKijiCellRewriter.test2.json\"", "var_name": "LAYOUT_TEST2"}], "file": "kiji-mapreduce/src/test/java/org/kiji/mapreduce/pivot/TestKijiCellRewriter.java"}, "test_case": {"identifier": "testConvertAvro", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConvertAvro() throws Exception {\n    final Schema intSchema = Schema.create(Schema.Type.INT);\n    final Schema longSchema = Schema.create(Schema.Type.LONG);\n    final DecodedCell<Object> original = new DecodedCell<Object>(intSchema, 1);\n    Assert.assertEquals(1L, KijiCellRewriter.convertAvro(original, longSchema).getData());\n  }", "signature": "void testConvertAvro()", "full_signature": "@Test public void testConvertAvro()", "class_method_signature": "TestKijiCellRewriter.testConvertAvro()", "testcase": true, "constructor": false, "invocations": ["create", "create", "assertEquals", "getData", "convertAvro"]}, "focal_class": {"identifier": "KijiCellRewriter", "superclass": "extends KijiPivoter", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(KijiCellRewriter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(KijiCellRewriter.class)", "var_name": "LOG"}, {"original_string": "private KijiColumnName mColumn = null;", "modifier": "private", "type": "KijiColumnName", "declarator": "mColumn = null", "var_name": "mColumn"}, {"original_string": "private Map<Schema, Schema> mRules = null;", "modifier": "private", "type": "Map<Schema, Schema>", "declarator": "mRules = null", "var_name": "mRules"}], "methods": [{"identifier": "getSpecFromConf", "parameters": "(final Configuration conf)", "modifiers": "private static", "return": "CellRewriteSpec", "signature": "CellRewriteSpec getSpecFromConf(final Configuration conf)", "full_signature": "private static CellRewriteSpec getSpecFromConf(final Configuration conf)", "class_method_signature": "KijiCellRewriter.getSpecFromConf(final Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getDataRequest", "parameters": "()", "modifiers": "@Override public", "return": "KijiDataRequest", "signature": "KijiDataRequest getDataRequest()", "full_signature": "@Override public KijiDataRequest getDataRequest()", "class_method_signature": "KijiCellRewriter.getDataRequest()", "testcase": false, "constructor": false}, {"identifier": "setup", "parameters": "(KijiContext context)", "modifiers": "@Override public", "return": "void", "signature": "void setup(KijiContext context)", "full_signature": "@Override public void setup(KijiContext context)", "class_method_signature": "KijiCellRewriter.setup(KijiContext context)", "testcase": false, "constructor": false}, {"identifier": "produce", "parameters": "(final KijiRowData row, final KijiTableContext context)", "modifiers": "@Override public", "return": "void", "signature": "void produce(final KijiRowData row, final KijiTableContext context)", "full_signature": "@Override public void produce(final KijiRowData row, final KijiTableContext context)", "class_method_signature": "KijiCellRewriter.produce(final KijiRowData row, final KijiTableContext context)", "testcase": false, "constructor": false}, {"identifier": "rewriteCell", "parameters": "(final DecodedCell<U> cell)", "modifiers": "protected", "return": "DecodedCell<T>", "signature": "DecodedCell<T> rewriteCell(final DecodedCell<U> cell)", "full_signature": "protected DecodedCell<T> rewriteCell(final DecodedCell<U> cell)", "class_method_signature": "KijiCellRewriter.rewriteCell(final DecodedCell<U> cell)", "testcase": false, "constructor": false}, {"identifier": "convertAvro", "parameters": "(\n      DecodedCell<U> original,\n      Schema schema\n  )", "modifiers": "public static", "return": "DecodedCell<T>", "signature": "DecodedCell<T> convertAvro(\n      DecodedCell<U> original,\n      Schema schema\n  )", "full_signature": "public static DecodedCell<T> convertAvro(\n      DecodedCell<U> original,\n      Schema schema\n  )", "class_method_signature": "KijiCellRewriter.convertAvro(\n      DecodedCell<U> original,\n      Schema schema\n  )", "testcase": false, "constructor": false}], "file": "kiji-mapreduce/src/main/java/org/kiji/mapreduce/pivot/KijiCellRewriter.java"}, "focal_method": {"identifier": "convertAvro", "parameters": "(\n      DecodedCell<U> original,\n      Schema schema\n  )", "modifiers": "public static", "return": "DecodedCell<T>", "body": "public static <T, U> DecodedCell<T> convertAvro(\n      DecodedCell<U> original,\n      Schema schema\n  ) throws IOException {\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // Encode original datum to bytes:\n    final Encoder encoder = EncoderFactory.get().directBinaryEncoder(baos, null);\n    final DatumWriter<U> writer = new GenericDatumWriter<U>(original.getWriterSchema());\n    writer.write(original.getData(), encoder);\n    encoder.flush();\n\n    // Decode bytes according to the new schema:\n    final Decoder decoder = DecoderFactory.get().binaryDecoder(baos.toByteArray(), null);\n    final DatumReader<T> reader =\n        new GenericDatumReader<T>(original.getWriterSchema(), schema);\n    final T data = reader.read(null, decoder);\n\n    return new DecodedCell<T>(schema, data);\n  }", "signature": "DecodedCell<T> convertAvro(\n      DecodedCell<U> original,\n      Schema schema\n  )", "full_signature": "public static DecodedCell<T> convertAvro(\n      DecodedCell<U> original,\n      Schema schema\n  )", "class_method_signature": "KijiCellRewriter.convertAvro(\n      DecodedCell<U> original,\n      Schema schema\n  )", "testcase": false, "constructor": false, "invocations": ["directBinaryEncoder", "get", "getWriterSchema", "write", "getData", "flush", "binaryDecoder", "get", "toByteArray", "getWriterSchema", "read"]}, "repository": {"repo_id": 7249073, "url": "https://github.com/kijiproject/kiji-mapreduce", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 12, "size": 5029, "license": "licensed"}}