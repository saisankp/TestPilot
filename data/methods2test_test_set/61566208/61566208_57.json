{"test_class": {"identifier": "HMSLocalServerRestServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger( HMSLocalServerRestServiceTest.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger( HMSLocalServerRestServiceTest.class )", "var_name": "logger"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@Mock\n    HostDataAggregator aggregator;", "modifier": "@Mock", "type": "HostDataAggregator", "declarator": "aggregator", "var_name": "aggregator"}, {"original_string": "@Mock\n    HmsDataCache hmsDataCache;", "modifier": "@Mock", "type": "HmsDataCache", "declarator": "hmsDataCache", "var_name": "hmsDataCache"}, {"original_string": "@Mock\n    ServiceServerNode serviceServerNode;", "modifier": "@Mock", "type": "ServiceServerNode", "declarator": "serviceServerNode", "var_name": "serviceServerNode"}, {"original_string": "@Mock\n    Session session;", "modifier": "@Mock", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "@InjectMocks\n    HMSLocalServerRestService hmsLocalServerRestService;", "modifier": "@InjectMocks", "type": "HMSLocalServerRestService", "declarator": "hmsLocalServerRestService", "var_name": "hmsLocalServerRestService"}], "file": "modules/hms-aggregator/src/test/java/com/vmware/vrack/hms/controller/HMSLocalServerRestServiceTest.java"}, "test_case": {"identifier": "getHddInfo", "parameters": "()", "modifiers": "@Test( expected = HMSRestException.class ) public", "return": "void", "body": "@Test( expected = HMSRestException.class )\n    public void getHddInfo()\n        throws Throwable\n    {\n        MvcResult result;\n        try\n        {\n            result =\n                this.mockMvc.perform( get( \"http://localhost:8080/host/N1/storageinfo\" ) ).andExpect( status().isOk() ).andReturn();\n        }\n        catch ( Exception e )\n        {\n            assertNotNull( e );\n            assertNotNull( e.getCause() );\n            assertTrue( e.getCause() instanceof HMSRestException );\n            throw e.getCause();\n        }\n        assertNotNull( result.getResponse() );\n    }", "signature": "void getHddInfo()", "full_signature": "@Test( expected = HMSRestException.class ) public void getHddInfo()", "class_method_signature": "HMSLocalServerRestServiceTest.getHddInfo()", "testcase": true, "constructor": false, "invocations": ["andReturn", "andExpect", "perform", "get", "isOk", "status", "assertNotNull", "assertNotNull", "getCause", "assertTrue", "getCause", "getCause", "assertNotNull", "getResponse"]}, "focal_class": {"identifier": "HMSLocalServerRestService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger( HMSLocalServerRestService.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( HMSLocalServerRestService.class )", "var_name": "logger"}, {"original_string": "@Autowired\n    private HostDataAggregator aggregator;", "modifier": "@Autowired\n    private", "type": "HostDataAggregator", "declarator": "aggregator", "var_name": "aggregator"}, {"original_string": "@Autowired\n    private ApplicationContext context;", "modifier": "@Autowired\n    private", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Autowired\n    private HmsDataCache hmsDataCache;", "modifier": "@Autowired\n    private", "type": "HmsDataCache", "declarator": "hmsDataCache", "var_name": "hmsDataCache"}, {"original_string": "@Value( \"${hms.switch.host}\" )\n    private String hmsIpAddr;", "modifier": "@Value( \"${hms.switch.host}\" )\n    private", "type": "String", "declarator": "hmsIpAddr", "var_name": "hmsIpAddr"}, {"original_string": "@Value( \"${hms.switch.port}\" )\n    private int hmsPort;", "modifier": "@Value( \"${hms.switch.port}\" )\n    private", "type": "int", "declarator": "hmsPort", "var_name": "hmsPort"}, {"original_string": "@Value( \"${hms.ib.inventory.location}\" )\n    private String hmsIbInventoryLocation;", "modifier": "@Value( \"${hms.ib.inventory.location}\" )\n    private", "type": "String", "declarator": "hmsIbInventoryLocation", "var_name": "hmsIbInventoryLocation"}], "methods": [{"identifier": "getMirrorHostInfo", "parameters": "( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "modifiers": "@RequestMapping( value = { \"/{host_id}/selftest\", \"/{host_id}/bmcusers\", \"/{host_id}/acpipowerstate\", \"/{host_id}/bootoptions\", \"/{host_id}/remoteconsoledetails\", \"/{host_id}/startremoteconsole\" }, method = RequestMethod.GET ) @ResponseBody public", "return": "ResponseEntity<Object>", "signature": "ResponseEntity<Object> getMirrorHostInfo( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "full_signature": "@RequestMapping( value = { \"/{host_id}/selftest\", \"/{host_id}/bmcusers\", \"/{host_id}/acpipowerstate\", \"/{host_id}/bootoptions\", \"/{host_id}/remoteconsoledetails\", \"/{host_id}/startremoteconsole\" }, method = RequestMethod.GET ) @ResponseBody public ResponseEntity<Object> getMirrorHostInfo( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "class_method_signature": "HMSLocalServerRestService.getMirrorHostInfo( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "getAllServerNodes", "parameters": "( @RequestBody( required = false ) String body, HttpMethod method,\n                                                      HttpServletRequest request, HttpServletResponse response )", "modifiers": "@RequestMapping( value = { \"\", \"/\" }, method = RequestMethod.GET ) @ResponseBody public", "return": "Map<String, ServerNode>", "signature": "Map<String, ServerNode> getAllServerNodes( @RequestBody( required = false ) String body, HttpMethod method,\n                                                      HttpServletRequest request, HttpServletResponse response )", "full_signature": "@RequestMapping( value = { \"\", \"/\" }, method = RequestMethod.GET ) @ResponseBody public Map<String, ServerNode> getAllServerNodes( @RequestBody( required = false ) String body, HttpMethod method,\n                                                      HttpServletRequest request, HttpServletResponse response )", "class_method_signature": "HMSLocalServerRestService.getAllServerNodes( @RequestBody( required = false ) String body, HttpMethod method,\n                                                      HttpServletRequest request, HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "getRemoteConsoleJnlpSupportFiles", "parameters": "( HttpServletRequest request, HttpServletResponse response )", "modifiers": "@RequestMapping( value = { \"/jnlpRemoteConsoleSupportFiles/{host_id}/**\" }, method = RequestMethod.GET ) @ResponseBody public", "return": "void", "signature": "void getRemoteConsoleJnlpSupportFiles( HttpServletRequest request, HttpServletResponse response )", "full_signature": "@RequestMapping( value = { \"/jnlpRemoteConsoleSupportFiles/{host_id}/**\" }, method = RequestMethod.GET ) @ResponseBody public void getRemoteConsoleJnlpSupportFiles( HttpServletRequest request, HttpServletResponse response )", "class_method_signature": "HMSLocalServerRestService.getRemoteConsoleJnlpSupportFiles( HttpServletRequest request, HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "getHostInfo", "parameters": "( @PathVariable String host_id )", "modifiers": "@RequestMapping( value = \"/{host_id}\", method = RequestMethod.GET ) @ResponseBody public", "return": "ServerInfo", "signature": "ServerInfo getHostInfo( @PathVariable String host_id )", "full_signature": "@RequestMapping( value = \"/{host_id}\", method = RequestMethod.GET ) @ResponseBody public ServerInfo getHostInfo( @PathVariable String host_id )", "class_method_signature": "HMSLocalServerRestService.getHostInfo( @PathVariable String host_id )", "testcase": false, "constructor": false}, {"identifier": "getHostPowerStatus", "parameters": "( @PathVariable String host_id )", "modifiers": "@RequestMapping( value = \"/{host_id}/powerstatus\", method = RequestMethod.GET ) @ResponseBody public", "return": "ServerNodePowerStatus", "signature": "ServerNodePowerStatus getHostPowerStatus( @PathVariable String host_id )", "full_signature": "@RequestMapping( value = \"/{host_id}/powerstatus\", method = RequestMethod.GET ) @ResponseBody public ServerNodePowerStatus getHostPowerStatus( @PathVariable String host_id )", "class_method_signature": "HMSLocalServerRestService.getHostPowerStatus( @PathVariable String host_id )", "testcase": false, "constructor": false}, {"identifier": "getPortName", "parameters": "( @PathVariable String hostId )", "modifiers": "@RequestMapping( value = \"/{hostId}/portname\", method = RequestMethod.GET ) public @ResponseBody", "return": "String", "signature": "String getPortName( @PathVariable String hostId )", "full_signature": "@RequestMapping( value = \"/{hostId}/portname\", method = RequestMethod.GET ) public @ResponseBody String getPortName( @PathVariable String hostId )", "class_method_signature": "HMSLocalServerRestService.getPortName( @PathVariable String hostId )", "testcase": false, "constructor": false}, {"identifier": "getCpuInfo", "parameters": "( @PathVariable String host_id )", "modifiers": "@RequestMapping( value = \"/{host_id}/cpuinfo\", method = RequestMethod.GET ) public @ResponseBody", "return": "List<CpuInfo>", "signature": "List<CpuInfo> getCpuInfo( @PathVariable String host_id )", "full_signature": "@RequestMapping( value = \"/{host_id}/cpuinfo\", method = RequestMethod.GET ) public @ResponseBody List<CpuInfo> getCpuInfo( @PathVariable String host_id )", "class_method_signature": "HMSLocalServerRestService.getCpuInfo( @PathVariable String host_id )", "testcase": false, "constructor": false}, {"identifier": "getHddInfo", "parameters": "( @PathVariable String host_id )", "modifiers": "@RequestMapping( value = \"/{host_id}/storageinfo\", method = RequestMethod.GET ) public @ResponseBody", "return": "List<StorageInfo>", "signature": "List<StorageInfo> getHddInfo( @PathVariable String host_id )", "full_signature": "@RequestMapping( value = \"/{host_id}/storageinfo\", method = RequestMethod.GET ) public @ResponseBody List<StorageInfo> getHddInfo( @PathVariable String host_id )", "class_method_signature": "HMSLocalServerRestService.getHddInfo( @PathVariable String host_id )", "testcase": false, "constructor": false}, {"identifier": "getStorageControllerInfo", "parameters": "( @PathVariable String host_id )", "modifiers": "@RequestMapping( value = \"/{host_id}/storagecontrollerinfo\", method = RequestMethod.GET ) public @ResponseBody", "return": "List<StorageController>", "signature": "List<StorageController> getStorageControllerInfo( @PathVariable String host_id )", "full_signature": "@RequestMapping( value = \"/{host_id}/storagecontrollerinfo\", method = RequestMethod.GET ) public @ResponseBody List<StorageController> getStorageControllerInfo( @PathVariable String host_id )", "class_method_signature": "HMSLocalServerRestService.getStorageControllerInfo( @PathVariable String host_id )", "testcase": false, "constructor": false}, {"identifier": "getMemoryInfo", "parameters": "( @PathVariable String host_id )", "modifiers": "@RequestMapping( value = \"/{host_id}/memoryinfo\", method = RequestMethod.GET ) public @ResponseBody", "return": "List<MemoryInfo>", "signature": "List<MemoryInfo> getMemoryInfo( @PathVariable String host_id )", "full_signature": "@RequestMapping( value = \"/{host_id}/memoryinfo\", method = RequestMethod.GET ) public @ResponseBody List<MemoryInfo> getMemoryInfo( @PathVariable String host_id )", "class_method_signature": "HMSLocalServerRestService.getMemoryInfo( @PathVariable String host_id )", "testcase": false, "constructor": false}, {"identifier": "getNicInfo", "parameters": "( @PathVariable String host_id )", "modifiers": "@RequestMapping( value = \"/{host_id}/nicinfo\", method = RequestMethod.GET ) public @ResponseBody", "return": "List<EthernetController>", "signature": "List<EthernetController> getNicInfo( @PathVariable String host_id )", "full_signature": "@RequestMapping( value = \"/{host_id}/nicinfo\", method = RequestMethod.GET ) public @ResponseBody List<EthernetController> getNicInfo( @PathVariable String host_id )", "class_method_signature": "HMSLocalServerRestService.getNicInfo( @PathVariable String host_id )", "testcase": false, "constructor": false}, {"identifier": "putMirrorHostInfo", "parameters": "( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "modifiers": "@RequestMapping( value = { \"/{host_id}/bootoptions\", \"/{host_id}/chassisidentify\", \"/{host_id}/selinfo\" }, method = RequestMethod.PUT ) @ResponseBody public", "return": "ResponseEntity<Object>", "signature": "ResponseEntity<Object> putMirrorHostInfo( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "full_signature": "@RequestMapping( value = { \"/{host_id}/bootoptions\", \"/{host_id}/chassisidentify\", \"/{host_id}/selinfo\" }, method = RequestMethod.PUT ) @ResponseBody public ResponseEntity<Object> putMirrorHostInfo( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "class_method_signature": "HMSLocalServerRestService.putMirrorHostInfo( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "updateNode", "parameters": "( @PathVariable String host_id,\n                                                            @RequestParam( \"action\" ) String action,\n                                                            @RequestBody( required = false ) String body,\n                                                            HttpMethod method, HttpServletRequest request,\n                                                            HttpServletResponse response )", "modifiers": "@RequestMapping( value = { \"/{host_id}\" }, method = RequestMethod.PUT ) public @ResponseBody", "return": "ResponseEntity<Object>", "signature": "ResponseEntity<Object> updateNode( @PathVariable String host_id,\n                                                            @RequestParam( \"action\" ) String action,\n                                                            @RequestBody( required = false ) String body,\n                                                            HttpMethod method, HttpServletRequest request,\n                                                            HttpServletResponse response )", "full_signature": "@RequestMapping( value = { \"/{host_id}\" }, method = RequestMethod.PUT ) public @ResponseBody ResponseEntity<Object> updateNode( @PathVariable String host_id,\n                                                            @RequestParam( \"action\" ) String action,\n                                                            @RequestBody( required = false ) String body,\n                                                            HttpMethod method, HttpServletRequest request,\n                                                            HttpServletResponse response )", "class_method_signature": "HMSLocalServerRestService.updateNode( @PathVariable String host_id,\n                                                            @RequestParam( \"action\" ) String action,\n                                                            @RequestBody( required = false ) String body,\n                                                            HttpMethod method, HttpServletRequest request,\n                                                            HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "updateBmcPassword", "parameters": "( @PathVariable String host_id,\n                                                                         @RequestBody String newPassword )", "modifiers": "@RequestMapping( value = { \"/{host_id}/bmcPassword\" }, method = RequestMethod.PUT ) public @ResponseBody", "return": "ResponseEntity<BaseResponse>", "signature": "ResponseEntity<BaseResponse> updateBmcPassword( @PathVariable String host_id,\n                                                                         @RequestBody String newPassword )", "full_signature": "@RequestMapping( value = { \"/{host_id}/bmcPassword\" }, method = RequestMethod.PUT ) public @ResponseBody ResponseEntity<BaseResponse> updateBmcPassword( @PathVariable String host_id,\n                                                                         @RequestBody String newPassword )", "class_method_signature": "HMSLocalServerRestService.updateBmcPassword( @PathVariable String host_id,\n                                                                         @RequestBody String newPassword )", "testcase": false, "constructor": false}, {"identifier": "removeServer", "parameters": "( @PathVariable String hostId )", "modifiers": "@RequestMapping( value = { \"/{hostId}\" }, method = RequestMethod.DELETE ) public", "return": "ResponseEntity<BaseResponse>", "signature": "ResponseEntity<BaseResponse> removeServer( @PathVariable String hostId )", "full_signature": "@RequestMapping( value = { \"/{hostId}\" }, method = RequestMethod.DELETE ) public ResponseEntity<BaseResponse> removeServer( @PathVariable String hostId )", "class_method_signature": "HMSLocalServerRestService.removeServer( @PathVariable String hostId )", "testcase": false, "constructor": false}], "file": "modules/hms-aggregator/src/main/java/com/vmware/vrack/hms/controller/HMSLocalServerRestService.java"}, "focal_method": {"identifier": "getHddInfo", "parameters": "( @PathVariable String host_id )", "modifiers": "@RequestMapping( value = \"/{host_id}/storageinfo\", method = RequestMethod.GET ) public @ResponseBody", "return": "List<StorageInfo>", "body": "@RequestMapping( value = \"/{host_id}/storageinfo\", method = RequestMethod.GET )\n    public @ResponseBody List<StorageInfo> getHddInfo( @PathVariable String host_id )\n        throws HMSRestException\n    {\n\n        List<StorageInfo> listStorageInfo = new ArrayList<StorageInfo>();\n        try\n        {\n            if ( !InventoryLoader.getInstance().getNodeMap().containsKey( host_id ) )\n                throw new HMSRestException( Status.NOT_FOUND.getStatusCode(), \"Invalid Request\",\n                                            \"Can't find host with id \" + host_id );\n            else\n            {\n                ServerNode node = InventoryLoader.getInstance().getNodeMap().get( host_id );\n                ServerComponentAggregator aggregator = new ServerComponentAggregator();\n                aggregator.setServerComponentInfo( node, ServerComponent.STORAGE );\n                listStorageInfo = ServerInfoHelperUtil.convertFruStorageInfo( node );\n                context.publishEvent( new FruDataChangeMessage( (List<FruComponent>) (List<?>) listStorageInfo, host_id,\n                                                                ServerComponent.STORAGE ) );\n                return listStorageInfo;\n            }\n        }\n        catch ( HmsException e )\n        {\n            if ( e instanceof HMSRestException )\n            {\n                logger.error( \"Error while getting hddinfo for Node: {}.\", host_id, e );\n                throw (HMSRestException) e;\n            }\n            else\n            {\n                logger.error( \"Error while getting hddinfo for Node: {}.\", host_id, e );\n                throw new HMSRestException( Status.INTERNAL_SERVER_ERROR.getStatusCode(), \"Server Error\",\n                                            e.getMessage() );\n            }\n        }\n        catch ( Exception e )\n        {\n            logger.error( \"Error while getting hddinfo for Node: {}.\", host_id, e );\n            throw new HMSRestException( Status.INTERNAL_SERVER_ERROR.getStatusCode(), \"Server Error\", e.getMessage() );\n        }\n    }", "signature": "List<StorageInfo> getHddInfo( @PathVariable String host_id )", "full_signature": "@RequestMapping( value = \"/{host_id}/storageinfo\", method = RequestMethod.GET ) public @ResponseBody List<StorageInfo> getHddInfo( @PathVariable String host_id )", "class_method_signature": "HMSLocalServerRestService.getHddInfo( @PathVariable String host_id )", "testcase": false, "constructor": false, "invocations": ["containsKey", "getNodeMap", "getInstance", "getStatusCode", "get", "getNodeMap", "getInstance", "setServerComponentInfo", "convertFruStorageInfo", "publishEvent", "error", "error", "getStatusCode", "getMessage", "error", "getStatusCode", "getMessage"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}