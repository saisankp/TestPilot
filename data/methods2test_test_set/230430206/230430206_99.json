{"test_class": {"identifier": "NettyServerCnxnTest", "superclass": "extends ClientBase", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory\n            .getLogger(NettyServerCnxnTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory\n            .getLogger(NettyServerCnxnTest.class)", "var_name": "LOG"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java"}, "test_case": {"identifier": "testSendCloseSession", "parameters": "()", "modifiers": "@Test(timeout = 40000) public", "return": "void", "body": "@Test(timeout = 40000)\n    public void testSendCloseSession() throws Exception {\n        Assert.assertTrue(\n                \"Didn't instantiate ServerCnxnFactory with NettyServerCnxnFactory!\",\n                serverFactory instanceof NettyServerCnxnFactory);\n\n        final ZooKeeper zk = createClient();\n        final ZooKeeperServer zkServer = getServer(serverFactory);\n        final String path = \"/a\";\n        try {\n            // make sure zkclient works\n            zk.create(path, \"test\".getBytes(StandardCharsets.UTF_8), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n            // set on watch\n            Assert.assertNotNull(\"Didn't create znode:\" + path,\n                    zk.exists(path, true));\n            Assert.assertEquals(1, zkServer.getZKDatabase().getDataTree().getWatchCount());\n            Iterable<ServerCnxn> connections = serverFactory.getConnections();\n            Assert.assertEquals(\"Mismatch in number of live connections!\", 1,\n                    serverFactory.getNumAliveConnections());\n            for (ServerCnxn serverCnxn : connections) {\n                serverCnxn.sendCloseSession();\n            }\n            LOG.info(\"Waiting for the channel disconnected event\");\n            int timeout = 0;\n            while (serverFactory.getNumAliveConnections() != 0) {\n                Thread.sleep(1000);\n                timeout += 1000;\n                if (timeout > CONNECTION_TIMEOUT) {\n                    Assert.fail(\"The number of live connections should be 0\");\n                }\n            }\n            // make sure the watch is removed when the connection closed\n            Assert.assertEquals(0, zkServer.getZKDatabase().getDataTree().getWatchCount());\n        } finally {\n            zk.close();\n        }\n    }", "signature": "void testSendCloseSession()", "full_signature": "@Test(timeout = 40000) public void testSendCloseSession()", "class_method_signature": "NettyServerCnxnTest.testSendCloseSession()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "createClient", "getServer", "create", "getBytes", "assertNotNull", "exists", "assertEquals", "getWatchCount", "getDataTree", "getZKDatabase", "getConnections", "assertEquals", "getNumAliveConnections", "sendCloseSession", "info", "getNumAliveConnections", "sleep", "fail", "assertEquals", "getWatchCount", "getDataTree", "getZKDatabase", "close"]}, "focal_class": {"identifier": "NettyServerCnxn", "superclass": "extends ServerCnxn", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(NettyServerCnxn.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(NettyServerCnxn.class)", "var_name": "LOG"}, {"original_string": "private final Channel channel;", "modifier": "private final", "type": "Channel", "declarator": "channel", "var_name": "channel"}, {"original_string": "private CompositeByteBuf queuedBuffer;", "modifier": "private", "type": "CompositeByteBuf", "declarator": "queuedBuffer", "var_name": "queuedBuffer"}, {"original_string": "private final AtomicBoolean throttled = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "throttled = new AtomicBoolean(false)", "var_name": "throttled"}, {"original_string": "private ByteBuffer bb;", "modifier": "private", "type": "ByteBuffer", "declarator": "bb", "var_name": "bb"}, {"original_string": "private final ByteBuffer bbLen = ByteBuffer.allocate(4);", "modifier": "private final", "type": "ByteBuffer", "declarator": "bbLen = ByteBuffer.allocate(4)", "var_name": "bbLen"}, {"original_string": "private long sessionId;", "modifier": "private", "type": "long", "declarator": "sessionId", "var_name": "sessionId"}, {"original_string": "private int sessionTimeout;", "modifier": "private", "type": "int", "declarator": "sessionTimeout", "var_name": "sessionTimeout"}, {"original_string": "private AtomicLong outstandingCount = new AtomicLong();", "modifier": "private", "type": "AtomicLong", "declarator": "outstandingCount = new AtomicLong()", "var_name": "outstandingCount"}, {"original_string": "private Certificate[] clientChain;", "modifier": "private", "type": "Certificate[]", "declarator": "clientChain", "var_name": "clientChain"}, {"original_string": "private volatile boolean closingChannel;", "modifier": "private volatile", "type": "boolean", "declarator": "closingChannel", "var_name": "closingChannel"}, {"original_string": "private volatile ZooKeeperServer zkServer;", "modifier": "private volatile", "type": "ZooKeeperServer", "declarator": "zkServer", "var_name": "zkServer"}, {"original_string": "private final NettyServerCnxnFactory factory;", "modifier": "private final", "type": "NettyServerCnxnFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private boolean initialized;", "modifier": "private", "type": "boolean", "declarator": "initialized", "var_name": "initialized"}, {"original_string": "private final GenericFutureListener<Future<Void>> onSendBufferDoneListener = f -> {\n        if (f.isSuccess()) {\n            packetSent();\n        }\n    };", "modifier": "private final", "type": "GenericFutureListener<Future<Void>>", "declarator": "onSendBufferDoneListener = f -> {\n        if (f.isSuccess()) {\n            packetSent();\n        }\n    }", "var_name": "onSendBufferDoneListener"}], "methods": [{"identifier": "NettyServerCnxn", "parameters": "(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory)", "modifiers": "", "return": "", "signature": " NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory)", "full_signature": "  NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory)", "class_method_signature": "NettyServerCnxn.NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "NettyServerCnxn.close()", "testcase": false, "constructor": false}, {"identifier": "getSessionId", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getSessionId()", "full_signature": "@Override public long getSessionId()", "class_method_signature": "NettyServerCnxn.getSessionId()", "testcase": false, "constructor": false}, {"identifier": "getSessionTimeout", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSessionTimeout()", "full_signature": "@Override public int getSessionTimeout()", "class_method_signature": "NettyServerCnxn.getSessionTimeout()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(WatchedEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void process(WatchedEvent event)", "full_signature": "@Override public void process(WatchedEvent event)", "class_method_signature": "NettyServerCnxn.process(WatchedEvent event)", "testcase": false, "constructor": false}, {"identifier": "sendResponse", "parameters": "(ReplyHeader h, Record r, String tag)", "modifiers": "@Override public", "return": "void", "signature": "void sendResponse(ReplyHeader h, Record r, String tag)", "full_signature": "@Override public void sendResponse(ReplyHeader h, Record r, String tag)", "class_method_signature": "NettyServerCnxn.sendResponse(ReplyHeader h, Record r, String tag)", "testcase": false, "constructor": false}, {"identifier": "setSessionId", "parameters": "(long sessionId)", "modifiers": "@Override public", "return": "void", "signature": "void setSessionId(long sessionId)", "full_signature": "@Override public void setSessionId(long sessionId)", "class_method_signature": "NettyServerCnxn.setSessionId(long sessionId)", "testcase": false, "constructor": false}, {"identifier": "sendBuffer", "parameters": "(ByteBuffer sendBuffer)", "modifiers": "@Override public", "return": "void", "signature": "void sendBuffer(ByteBuffer sendBuffer)", "full_signature": "@Override public void sendBuffer(ByteBuffer sendBuffer)", "class_method_signature": "NettyServerCnxn.sendBuffer(ByteBuffer sendBuffer)", "testcase": false, "constructor": false}, {"identifier": "checkFourLetterWord", "parameters": "(final Channel channel, ByteBuf message, final int len)", "modifiers": "private", "return": "boolean", "signature": "boolean checkFourLetterWord(final Channel channel, ByteBuf message, final int len)", "full_signature": "private boolean checkFourLetterWord(final Channel channel, ByteBuf message, final int len)", "class_method_signature": "NettyServerCnxn.checkFourLetterWord(final Channel channel, ByteBuf message, final int len)", "testcase": false, "constructor": false}, {"identifier": "checkIsInEventLoop", "parameters": "(String callerMethodName)", "modifiers": "private", "return": "void", "signature": "void checkIsInEventLoop(String callerMethodName)", "full_signature": "private void checkIsInEventLoop(String callerMethodName)", "class_method_signature": "NettyServerCnxn.checkIsInEventLoop(String callerMethodName)", "testcase": false, "constructor": false}, {"identifier": "appendToQueuedBuffer", "parameters": "(ByteBuf buf)", "modifiers": "private", "return": "void", "signature": "void appendToQueuedBuffer(ByteBuf buf)", "full_signature": "private void appendToQueuedBuffer(ByteBuf buf)", "class_method_signature": "NettyServerCnxn.appendToQueuedBuffer(ByteBuf buf)", "testcase": false, "constructor": false}, {"identifier": "processMessage", "parameters": "(ByteBuf buf)", "modifiers": "", "return": "void", "signature": "void processMessage(ByteBuf buf)", "full_signature": " void processMessage(ByteBuf buf)", "class_method_signature": "NettyServerCnxn.processMessage(ByteBuf buf)", "testcase": false, "constructor": false}, {"identifier": "processQueuedBuffer", "parameters": "()", "modifiers": "", "return": "void", "signature": "void processQueuedBuffer()", "full_signature": " void processQueuedBuffer()", "class_method_signature": "NettyServerCnxn.processQueuedBuffer()", "testcase": false, "constructor": false}, {"identifier": "releaseQueuedBuffer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void releaseQueuedBuffer()", "full_signature": "private void releaseQueuedBuffer()", "class_method_signature": "NettyServerCnxn.releaseQueuedBuffer()", "testcase": false, "constructor": false}, {"identifier": "receiveMessage", "parameters": "(ByteBuf message)", "modifiers": "private", "return": "void", "signature": "void receiveMessage(ByteBuf message)", "full_signature": "private void receiveMessage(ByteBuf message)", "class_method_signature": "NettyServerCnxn.receiveMessage(ByteBuf message)", "testcase": false, "constructor": false}, {"identifier": "disableRecv", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void disableRecv()", "full_signature": "@Override public void disableRecv()", "class_method_signature": "NettyServerCnxn.disableRecv()", "testcase": false, "constructor": false}, {"identifier": "disableRecvNoWait", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void disableRecvNoWait()", "full_signature": "private void disableRecvNoWait()", "class_method_signature": "NettyServerCnxn.disableRecvNoWait()", "testcase": false, "constructor": false}, {"identifier": "enableRecv", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void enableRecv()", "full_signature": "@Override public void enableRecv()", "class_method_signature": "NettyServerCnxn.enableRecv()", "testcase": false, "constructor": false}, {"identifier": "getOutstandingRequests", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getOutstandingRequests()", "full_signature": "@Override public long getOutstandingRequests()", "class_method_signature": "NettyServerCnxn.getOutstandingRequests()", "testcase": false, "constructor": false}, {"identifier": "setSessionTimeout", "parameters": "(int sessionTimeout)", "modifiers": "@Override public", "return": "void", "signature": "void setSessionTimeout(int sessionTimeout)", "full_signature": "@Override public void setSessionTimeout(int sessionTimeout)", "class_method_signature": "NettyServerCnxn.setSessionTimeout(int sessionTimeout)", "testcase": false, "constructor": false}, {"identifier": "getInterestOps", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getInterestOps()", "full_signature": "@Override public int getInterestOps()", "class_method_signature": "NettyServerCnxn.getInterestOps()", "testcase": false, "constructor": false}, {"identifier": "getRemoteSocketAddress", "parameters": "()", "modifiers": "@Override public", "return": "InetSocketAddress", "signature": "InetSocketAddress getRemoteSocketAddress()", "full_signature": "@Override public InetSocketAddress getRemoteSocketAddress()", "class_method_signature": "NettyServerCnxn.getRemoteSocketAddress()", "testcase": false, "constructor": false}, {"identifier": "sendCloseSession", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void sendCloseSession()", "full_signature": "@Override public void sendCloseSession()", "class_method_signature": "NettyServerCnxn.sendCloseSession()", "testcase": false, "constructor": false}, {"identifier": "serverStats", "parameters": "()", "modifiers": "@Override protected", "return": "ServerStats", "signature": "ServerStats serverStats()", "full_signature": "@Override protected ServerStats serverStats()", "class_method_signature": "NettyServerCnxn.serverStats()", "testcase": false, "constructor": false}, {"identifier": "isSecure", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSecure()", "full_signature": "@Override public boolean isSecure()", "class_method_signature": "NettyServerCnxn.isSecure()", "testcase": false, "constructor": false}, {"identifier": "getClientCertificateChain", "parameters": "()", "modifiers": "@Override public", "return": "Certificate[]", "signature": "Certificate[] getClientCertificateChain()", "full_signature": "@Override public Certificate[] getClientCertificateChain()", "class_method_signature": "NettyServerCnxn.getClientCertificateChain()", "testcase": false, "constructor": false}, {"identifier": "setClientCertificateChain", "parameters": "(Certificate[] chain)", "modifiers": "@Override public", "return": "void", "signature": "void setClientCertificateChain(Certificate[] chain)", "full_signature": "@Override public void setClientCertificateChain(Certificate[] chain)", "class_method_signature": "NettyServerCnxn.setClientCertificateChain(Certificate[] chain)", "testcase": false, "constructor": false}, {"identifier": "getChannel", "parameters": "()", "modifiers": "", "return": "Channel", "signature": "Channel getChannel()", "full_signature": " Channel getChannel()", "class_method_signature": "NettyServerCnxn.getChannel()", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java"}, "focal_method": {"identifier": "sendCloseSession", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void sendCloseSession() {\n        sendBuffer(ServerCnxnFactory.closeConn);\n    }", "signature": "void sendCloseSession()", "full_signature": "@Override public void sendCloseSession()", "class_method_signature": "NettyServerCnxn.sendCloseSession()", "testcase": false, "constructor": false, "invocations": ["sendBuffer"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}