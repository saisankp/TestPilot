{"test_class": {"identifier": "SensorSanityTest", "superclass": "extends RobolectricTestWithConfig", "interfaces": "", "fields": [], "file": "app/src/test/java/com/eveningoutpost/dexdrip/Models/SensorSanityTest.java"}, "test_case": {"identifier": "checkLibreSensorChangeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkLibreSensorChangeTest() {\n\n        final String[] testSerials = {\"12345678\", \"12345678\", \"\", \"12345678\", \"12345678\", \"12345679\", \"\", \"12345679\", \"12345679\", \"12345680\", \"12345680\", \"12345680\", \"12345680\", \"12345680\"};\n\n        Sensor.shutdownAllSensors();\n        JoH.clearCache();\n        // everything null\n        sensorCheck(\"all null check \", null, false, true);\n\n        // Testing with null sensor\n        for (int i = 0; i < testSerials.length; i++) {\n            sensorCheck(\"Null sensor check \" + i, testSerials[i], false, true);\n        }\n\n        // Testing for standard failure\n        Sensor sensor = Sensor.create(JoH.tsl());\n        for (int i = 0; i < 4; i++) {\n            sensorCheck(\"Standard failure check (a) \" + i, testSerials[i], false, false);\n        }\n        for (int i = 5; i < 6; i++) {\n            sensorCheck(\"Standard failure check (b) \" + i, testSerials[i], true, true);\n        }\n        for (int i = 6; i < testSerials.length; i++) {\n            sensorCheck(\"Standard failure check (b) \" + i, testSerials[i], false, true);\n        }\n\n        // Test sensor create\n        final String[] testSerials2 = {\"12345678\", \"12345678\", \"12345678\", \"12345678\", null, \"12345678\", \"12345678\", \"12345678\", \"12345678\", \"\", \"12345678\", \"12345678\", \"12345678\", \"12345678\"};\n        final long ts = JoH.tsl();\n\n        Sensor.create(ts + 1);\n        for (int i = 0; i < testSerials2.length; i++) {\n            sensorCheck(\"new sensors (\" + i + \") \", testSerials2[i], false, false);\n        }\n    }", "signature": "void checkLibreSensorChangeTest()", "full_signature": "@Test public void checkLibreSensorChangeTest()", "class_method_signature": "SensorSanityTest.checkLibreSensorChangeTest()", "testcase": true, "constructor": false, "invocations": ["shutdownAllSensors", "clearCache", "sensorCheck", "sensorCheck", "create", "tsl", "sensorCheck", "sensorCheck", "sensorCheck", "tsl", "create", "sensorCheck"]}, "focal_class": {"identifier": "SensorSanity", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final double DEXCOM_MIN_RAW = 5;", "modifier": "public static final", "type": "double", "declarator": "DEXCOM_MIN_RAW = 5", "var_name": "DEXCOM_MIN_RAW"}, {"original_string": "public static final double DEXCOM_MAX_RAW = 1000;", "modifier": "public static final", "type": "double", "declarator": "DEXCOM_MAX_RAW = 1000", "var_name": "DEXCOM_MAX_RAW"}, {"original_string": "public static final double DEXCOM_G6_MIN_RAW = 5;", "modifier": "public static final", "type": "double", "declarator": "DEXCOM_G6_MIN_RAW = 5", "var_name": "DEXCOM_G6_MIN_RAW"}, {"original_string": "public static final double DEXCOM_G6_MAX_RAW = 1000;", "modifier": "public static final", "type": "double", "declarator": "DEXCOM_G6_MAX_RAW = 1000", "var_name": "DEXCOM_G6_MAX_RAW"}, {"original_string": "public static final double LIBRE_MIN_RAW = 5;", "modifier": "public static final", "type": "double", "declarator": "LIBRE_MIN_RAW = 5", "var_name": "LIBRE_MIN_RAW"}, {"original_string": "private static final String TAG = \"SensorSanity\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"SensorSanity\"", "var_name": "TAG"}, {"original_string": "private static final String PREF_LIBRE_SN = \"SensorSanity-LibreSN\";", "modifier": "private static final", "type": "String", "declarator": "PREF_LIBRE_SN = \"SensorSanity-LibreSN\"", "var_name": "PREF_LIBRE_SN"}, {"original_string": "private static final String PREF_LIBRE_SENSOR_UUID = \"SensorSanity-LibreSensor\";", "modifier": "private static final", "type": "String", "declarator": "PREF_LIBRE_SENSOR_UUID = \"SensorSanity-LibreSensor\"", "var_name": "PREF_LIBRE_SENSOR_UUID"}], "methods": [{"identifier": "isRawValueSane", "parameters": "(double raw_value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRawValueSane(double raw_value)", "full_signature": "public static boolean isRawValueSane(double raw_value)", "class_method_signature": "SensorSanity.isRawValueSane(double raw_value)", "testcase": false, "constructor": false}, {"identifier": "isRawValueSane", "parameters": "(double raw_value, boolean hard)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRawValueSane(double raw_value, boolean hard)", "full_signature": "public static boolean isRawValueSane(double raw_value, boolean hard)", "class_method_signature": "SensorSanity.isRawValueSane(double raw_value, boolean hard)", "testcase": false, "constructor": false}, {"identifier": "isRawValueSane", "parameters": "(double raw_value, DexCollectionType type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRawValueSane(double raw_value, DexCollectionType type)", "full_signature": "public static boolean isRawValueSane(double raw_value, DexCollectionType type)", "class_method_signature": "SensorSanity.isRawValueSane(double raw_value, DexCollectionType type)", "testcase": false, "constructor": false}, {"identifier": "isRawValueSane", "parameters": "(double raw_value, DexCollectionType type, boolean hard_check)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRawValueSane(double raw_value, DexCollectionType type, boolean hard_check)", "full_signature": "public static boolean isRawValueSane(double raw_value, DexCollectionType type, boolean hard_check)", "class_method_signature": "SensorSanity.isRawValueSane(double raw_value, DexCollectionType type, boolean hard_check)", "testcase": false, "constructor": false}, {"identifier": "allowTestingWithDeadSensor", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean allowTestingWithDeadSensor()", "full_signature": "public static boolean allowTestingWithDeadSensor()", "class_method_signature": "SensorSanity.allowTestingWithDeadSensor()", "testcase": false, "constructor": false}, {"identifier": "clearEnviorment", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clearEnviorment()", "full_signature": "public static void clearEnviorment()", "class_method_signature": "SensorSanity.clearEnviorment()", "testcase": false, "constructor": false}, {"identifier": "checkLibreSensorChangeIfEnabled", "parameters": "(final String sn)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkLibreSensorChangeIfEnabled(final String sn)", "full_signature": "public static boolean checkLibreSensorChangeIfEnabled(final String sn)", "class_method_signature": "SensorSanity.checkLibreSensorChangeIfEnabled(final String sn)", "testcase": false, "constructor": false}, {"identifier": "checkLibreSensorChange", "parameters": "(final String currentSerial)", "modifiers": "public synchronized static", "return": "boolean", "signature": "boolean checkLibreSensorChange(final String currentSerial)", "full_signature": "public synchronized static boolean checkLibreSensorChange(final String currentSerial)", "class_method_signature": "SensorSanity.checkLibreSensorChange(final String currentSerial)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/eveningoutpost/dexdrip/Models/SensorSanity.java"}, "focal_method": {"identifier": "checkLibreSensorChange", "parameters": "(final String currentSerial)", "modifiers": "public synchronized static", "return": "boolean", "body": "public synchronized static boolean checkLibreSensorChange(final String currentSerial) {\n        Log.i(TAG, \"checkLibreSensorChange called currentSerial = \" + currentSerial);\n        if ((currentSerial == null) || currentSerial.length() < 4) return false;\n        final Sensor this_sensor = Sensor.currentSensor();\n        if(this_sensor == null || this_sensor.uuid == null|| this_sensor.uuid.length() < 4) {\n            Log.i(TAG, \"no senosr open, deleting everything\");\n            PersistentStore.setString(PREF_LIBRE_SENSOR_UUID, \"\");\n            PersistentStore.setString(PREF_LIBRE_SN, \"\");\n            return false;\n        }\n        final String lastSn = PersistentStore.getString(PREF_LIBRE_SN);\n        final String last_uuid = PersistentStore.getString(PREF_LIBRE_SENSOR_UUID);\n        Log.i(TAG, \"checkLibreSensorChange Initial values: lastSn = \" + lastSn + \" last_uuid = \" + last_uuid);\n        if(lastSn.length() < 4 || last_uuid.length() < 4) {\n            Log.i(TAG, \"lastSn or last_uuid not valid, writing current values.\");\n            PersistentStore.setString(PREF_LIBRE_SENSOR_UUID, this_sensor.uuid);\n            PersistentStore.setString(PREF_LIBRE_SN, currentSerial);\n            return false;\n        }\n        // Here we have the data that we need to start verifying.\n        if(lastSn.equals(currentSerial)) {\n            if(this_sensor.uuid.equals(last_uuid)) {\n                // all well\n                Log.i(TAG, \"checkLibreSensorChange returning false 1\");\n                return false;\n            } else {\n                // This is the case that the user had a sensor, but he stopped it and started a new one in xDrip.\n                // This is probably ok, since physical sensor has not changed.\n                // we learn the new uuid and continue.\n                Log.e(TAG, \"A new xdrip sensor was found, updating state.\");\n                PersistentStore.setString(PREF_LIBRE_SENSOR_UUID, this_sensor.uuid);\n                return false;\n            }\n        } else {\n            // We have a new sensorid. So physical sensors have changed.\n            // verify uuid have also changed.\n            if(this_sensor.uuid.equals(last_uuid)) {\n                // We need to stop the sensor.\n                Log.e(TAG, String.format(\"Different sensor serial number for same sensor uuid: %s :: %s vs %s\", last_uuid, lastSn, currentSerial));\n                Sensor.stopSensor();\n                JoH.static_toast_long(\"Stopping sensor due to serial number change\");\n                // There is no open sensor now.\n                PersistentStore.setString(PREF_LIBRE_SENSOR_UUID, \"\");\n                PersistentStore.setString(PREF_LIBRE_SN, \"\");\n                return true;\n\n            } else {\n                // This is the first time we see this sensor, update our uuid and current serial.\n                Log.i(TAG, \"This is the first time we see this sensor uuid = \" +  this_sensor.uuid);\n                PersistentStore.setString(PREF_LIBRE_SENSOR_UUID, this_sensor.uuid);\n                PersistentStore.setString(PREF_LIBRE_SN, currentSerial);\n                return false;\n            }\n        }\n    }", "signature": "boolean checkLibreSensorChange(final String currentSerial)", "full_signature": "public synchronized static boolean checkLibreSensorChange(final String currentSerial)", "class_method_signature": "SensorSanity.checkLibreSensorChange(final String currentSerial)", "testcase": false, "constructor": false, "invocations": ["i", "length", "currentSensor", "length", "i", "setString", "setString", "getString", "getString", "i", "length", "length", "i", "setString", "setString", "equals", "equals", "i", "e", "setString", "equals", "e", "format", "stopSensor", "static_toast_long", "setString", "setString", "i", "setString", "setString"]}, "repository": {"repo_id": 49717672, "url": "https://github.com/jamorham/xDrip-plus", "stars": 199, "created": "1/15/2016 12:31:22 PM +00:00", "updates": "2020-01-26T20:46:33+00:00", "fork": "False", "license": "licensed"}}