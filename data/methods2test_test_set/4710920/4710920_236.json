{"test_class": {"identifier": "RegistryFactoryWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();", "modifier": "private", "type": "RegistryFactory", "declarator": "registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension()", "var_name": "registryFactory"}], "file": "dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/RegistryFactoryWrapperTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws Exception {\n        RegistryServiceListener listener1 = Mockito.mock(RegistryServiceListener.class);\n        RegistryServiceListener1.delegate = listener1;\n        RegistryServiceListener listener2 = Mockito.mock(RegistryServiceListener.class);\n        RegistryServiceListener2.delegate = listener2;\n\n        Registry registry = registryFactory.getRegistry(URL.valueOf(\"simple://localhost:8080/registry-service\"));\n        URL url = URL.valueOf(\"dubbo://localhost:8081/simple.service\");\n        registry.register(url);\n\n        Mockito.verify(listener1, Mockito.times(1)).onRegister(url);\n        Mockito.verify(listener2, Mockito.times(1)).onRegister(url);\n\n        registry.unregister(url);\n        Mockito.verify(listener1, Mockito.times(1)).onUnregister(url);\n        Mockito.verify(listener2, Mockito.times(1)).onUnregister(url);\n\n        registry.subscribe(url, Mockito.mock(NotifyListener.class));\n        Mockito.verify(listener1, Mockito.times(1)).onSubscribe(url);\n        Mockito.verify(listener2, Mockito.times(1)).onSubscribe(url);\n\n        registry.unsubscribe(url, Mockito.mock(NotifyListener.class));\n        Mockito.verify(listener1, Mockito.times(1)).onUnsubscribe(url);\n        Mockito.verify(listener2, Mockito.times(1)).onUnsubscribe(url);\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "RegistryFactoryWrapperTest.test()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "getRegistry", "valueOf", "valueOf", "register", "onRegister", "verify", "times", "onRegister", "verify", "times", "unregister", "onUnregister", "verify", "times", "onUnregister", "verify", "times", "subscribe", "mock", "onSubscribe", "verify", "times", "onSubscribe", "verify", "times", "unsubscribe", "mock", "onUnsubscribe", "verify", "times", "onUnsubscribe", "verify", "times"]}, "focal_class": {"identifier": "RegistryFactoryWrapper", "superclass": "", "interfaces": "implements RegistryFactory", "fields": [{"original_string": "private RegistryFactory registryFactory;", "modifier": "private", "type": "RegistryFactory", "declarator": "registryFactory", "var_name": "registryFactory"}], "methods": [{"identifier": "RegistryFactoryWrapper", "parameters": "(RegistryFactory registryFactory)", "modifiers": "public", "return": "", "signature": " RegistryFactoryWrapper(RegistryFactory registryFactory)", "full_signature": "public  RegistryFactoryWrapper(RegistryFactory registryFactory)", "class_method_signature": "RegistryFactoryWrapper.RegistryFactoryWrapper(RegistryFactory registryFactory)", "testcase": false, "constructor": true}, {"identifier": "getRegistry", "parameters": "(URL url)", "modifiers": "@Override public", "return": "Registry", "signature": "Registry getRegistry(URL url)", "full_signature": "@Override public Registry getRegistry(URL url)", "class_method_signature": "RegistryFactoryWrapper.getRegistry(URL url)", "testcase": false, "constructor": false}], "file": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryFactoryWrapper.java"}, "focal_method": {"identifier": "getRegistry", "parameters": "(URL url)", "modifiers": "@Override public", "return": "Registry", "body": "@Override\n    public Registry getRegistry(URL url) {\n        return new ListenerRegistryWrapper(registryFactory.getRegistry(url),\n                Collections.unmodifiableList(ExtensionLoader.getExtensionLoader(RegistryServiceListener.class)\n                        .getActivateExtension(url, \"registry.listeners\")));\n    }", "signature": "Registry getRegistry(URL url)", "full_signature": "@Override public Registry getRegistry(URL url)", "class_method_signature": "RegistryFactoryWrapper.getRegistry(URL url)", "testcase": false, "constructor": false, "invocations": ["getRegistry", "unmodifiableList", "getActivateExtension", "getExtensionLoader"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}