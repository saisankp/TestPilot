{"test_class": {"identifier": "FrontServicesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private FrontServices frontServices;", "modifier": "@Autowired\n    private", "type": "FrontServices", "declarator": "frontServices", "var_name": "frontServices"}], "file": "backend/src/test/java/com/running/coins/service/FrontServicesTest.java"}, "test_case": {"identifier": "everyOneWeekly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void everyOneWeekly() {\n        WeeklyReportRequest weeklyReportRequest = new WeeklyReportRequest();\n        weeklyReportRequest.setGroupId(1);\n\n        long v1begin = System.currentTimeMillis();\n        ResponseMessage responseMessage = frontServices.everyOneWeekly(weeklyReportRequest);\n        long v1end = System.currentTimeMillis();\n        System.err.println(\"old: \"+ (v1end-v1begin));\n        System.err.println(JSON.toJSON(responseMessage));\n\n        long v2begin = System.currentTimeMillis();\n        ResponseMessage responseMessage2 = frontServices.everyOneWeekly2(weeklyReportRequest);\n        long v2end = System.currentTimeMillis();\n        System.err.println(\"parallel: \"+ (v2end-v2begin));\n        WeeklyReportResponse weeklyReportResponse = (WeeklyReportResponse) responseMessage2.getData();\n        List<UserRecord> allWeeklyRecords = weeklyReportResponse.getAllWeeklyRecords();\n\n        allWeeklyRecords.stream().forEach(System.out::println);\n        System.err.println(JSON.toJSON(responseMessage2));\n    }", "signature": "void everyOneWeekly()", "full_signature": "@Test public void everyOneWeekly()", "class_method_signature": "FrontServicesTest.everyOneWeekly()", "testcase": true, "constructor": false, "invocations": ["setGroupId", "currentTimeMillis", "everyOneWeekly", "currentTimeMillis", "println", "println", "toJSON", "currentTimeMillis", "everyOneWeekly2", "currentTimeMillis", "println", "getData", "getAllWeeklyRecords", "forEach", "stream", "println", "toJSON"]}, "focal_class": {"identifier": "FrontServices", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger logger = LoggerFactory.getLogger(FrontServices.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FrontServices.class)", "var_name": "logger"}, {"original_string": "ImmutableMap<String, Integer> immutableDaysMap = ImmutableMap.<String, Integer>builder()\n            .put(\"MON\", 0)\n            .put(\"TUE\", 1)\n            .put(\"WED\", 2)\n            .put(\"THU\", 3)\n            .put(\"FRI\", 4)\n            .put(\"SAT\", 5)\n            .put(\"SUN\", 6)\n            .put(\"\u661f\u671f\u4e00\", 0)\n            .put(\"\u661f\u671f\u4e8c\", 1)\n            .put(\"\u661f\u671f\u4e09\", 2)\n            .put(\"\u661f\u671f\u56db\", 3)\n            .put(\"\u661f\u671f\u4e94\", 4)\n            .put(\"\u661f\u671f\u516d\", 5)\n            .put(\"\u661f\u671f\u65e5\", 6)\n            .build();", "modifier": "", "type": "ImmutableMap<String, Integer>", "declarator": "immutableDaysMap = ImmutableMap.<String, Integer>builder()\n            .put(\"MON\", 0)\n            .put(\"TUE\", 1)\n            .put(\"WED\", 2)\n            .put(\"THU\", 3)\n            .put(\"FRI\", 4)\n            .put(\"SAT\", 5)\n            .put(\"SUN\", 6)\n            .put(\"\u661f\u671f\u4e00\", 0)\n            .put(\"\u661f\u671f\u4e8c\", 1)\n            .put(\"\u661f\u671f\u4e09\", 2)\n            .put(\"\u661f\u671f\u56db\", 3)\n            .put(\"\u661f\u671f\u4e94\", 4)\n            .put(\"\u661f\u671f\u516d\", 5)\n            .put(\"\u661f\u671f\u65e5\", 6)\n            .build()", "var_name": "immutableDaysMap"}, {"original_string": "private final\n    UserInfoMapper userInfoMapper;", "modifier": "private final", "type": "UserInfoMapper", "declarator": "userInfoMapper", "var_name": "userInfoMapper"}, {"original_string": "private final\n    UserGroupMapper userGroupMapper;", "modifier": "private final", "type": "UserGroupMapper", "declarator": "userGroupMapper", "var_name": "userGroupMapper"}, {"original_string": "private final\n    TargetDistanceMapper targetDistanceMapper;", "modifier": "private final", "type": "TargetDistanceMapper", "declarator": "targetDistanceMapper", "var_name": "targetDistanceMapper"}, {"original_string": "private final\n    RunningRecordMapper runningRecordMapper;", "modifier": "private final", "type": "RunningRecordMapper", "declarator": "runningRecordMapper", "var_name": "runningRecordMapper"}, {"original_string": "private final\n    VoteRecordMapper voteRecordMapper;", "modifier": "private final", "type": "VoteRecordMapper", "declarator": "voteRecordMapper", "var_name": "voteRecordMapper"}], "methods": [{"identifier": "FrontServices", "parameters": "(UserInfoMapper userInfoMapper,\n                         UserGroupMapper userGroupMapper,\n                         TargetDistanceMapper targetDistanceMapper,\n                         RunningRecordMapper runningRecordMapper,\n                         VoteRecordMapper voteRecordMapper)", "modifiers": "@Autowired public", "return": "", "signature": " FrontServices(UserInfoMapper userInfoMapper,\n                         UserGroupMapper userGroupMapper,\n                         TargetDistanceMapper targetDistanceMapper,\n                         RunningRecordMapper runningRecordMapper,\n                         VoteRecordMapper voteRecordMapper)", "full_signature": "@Autowired public  FrontServices(UserInfoMapper userInfoMapper,\n                         UserGroupMapper userGroupMapper,\n                         TargetDistanceMapper targetDistanceMapper,\n                         RunningRecordMapper runningRecordMapper,\n                         VoteRecordMapper voteRecordMapper)", "class_method_signature": "FrontServices.FrontServices(UserInfoMapper userInfoMapper,\n                         UserGroupMapper userGroupMapper,\n                         TargetDistanceMapper targetDistanceMapper,\n                         RunningRecordMapper runningRecordMapper,\n                         VoteRecordMapper voteRecordMapper)", "testcase": false, "constructor": true}, {"identifier": "userJoin", "parameters": "(UserJoinRequest userJoinRequest)", "modifiers": "public", "return": "ResponseMessage", "signature": "ResponseMessage userJoin(UserJoinRequest userJoinRequest)", "full_signature": "public ResponseMessage userJoin(UserJoinRequest userJoinRequest)", "class_method_signature": "FrontServices.userJoin(UserJoinRequest userJoinRequest)", "testcase": false, "constructor": false}, {"identifier": "userJoinv3", "parameters": "(UserJoinRequest userJoinRequest)", "modifiers": "public", "return": "ResponseMessage", "signature": "ResponseMessage userJoinv3(UserJoinRequest userJoinRequest)", "full_signature": "public ResponseMessage userJoinv3(UserJoinRequest userJoinRequest)", "class_method_signature": "FrontServices.userJoinv3(UserJoinRequest userJoinRequest)", "testcase": false, "constructor": false}, {"identifier": "currentUserWeekly", "parameters": "(CurrentUserWeeklyReportRequest currentUserWeeklyReportRequest)", "modifiers": "public", "return": "ResponseMessage", "signature": "ResponseMessage currentUserWeekly(CurrentUserWeeklyReportRequest currentUserWeeklyReportRequest)", "full_signature": "public ResponseMessage currentUserWeekly(CurrentUserWeeklyReportRequest currentUserWeeklyReportRequest)", "class_method_signature": "FrontServices.currentUserWeekly(CurrentUserWeeklyReportRequest currentUserWeeklyReportRequest)", "testcase": false, "constructor": false}, {"identifier": "everyOneWeekly", "parameters": "(WeeklyReportRequest weeklyReportRequest)", "modifiers": "public", "return": "ResponseMessage", "signature": "ResponseMessage everyOneWeekly(WeeklyReportRequest weeklyReportRequest)", "full_signature": "public ResponseMessage everyOneWeekly(WeeklyReportRequest weeklyReportRequest)", "class_method_signature": "FrontServices.everyOneWeekly(WeeklyReportRequest weeklyReportRequest)", "testcase": false, "constructor": false}, {"identifier": "everyOneWeekly2", "parameters": "(WeeklyReportRequest weeklyReportRequest)", "modifiers": "public", "return": "ResponseMessage", "signature": "ResponseMessage everyOneWeekly2(WeeklyReportRequest weeklyReportRequest)", "full_signature": "public ResponseMessage everyOneWeekly2(WeeklyReportRequest weeklyReportRequest)", "class_method_signature": "FrontServices.everyOneWeekly2(WeeklyReportRequest weeklyReportRequest)", "testcase": false, "constructor": false}, {"identifier": "handleWeeklyUserInGroup", "parameters": "(List<UserRecord> userRecords, Date start, Date end, UserGroup userGroup)", "modifiers": "private", "return": "void", "signature": "void handleWeeklyUserInGroup(List<UserRecord> userRecords, Date start, Date end, UserGroup userGroup)", "full_signature": "private void handleWeeklyUserInGroup(List<UserRecord> userRecords, Date start, Date end, UserGroup userGroup)", "class_method_signature": "FrontServices.handleWeeklyUserInGroup(List<UserRecord> userRecords, Date start, Date end, UserGroup userGroup)", "testcase": false, "constructor": false}, {"identifier": "setUserJoinResponse", "parameters": "(UserJoinRequest userJoinRequest, UserInfo userInfo, UserJoinResponse userJoinResponse)", "modifiers": "private", "return": "void", "signature": "void setUserJoinResponse(UserJoinRequest userJoinRequest, UserInfo userInfo, UserJoinResponse userJoinResponse)", "full_signature": "private void setUserJoinResponse(UserJoinRequest userJoinRequest, UserInfo userInfo, UserJoinResponse userJoinResponse)", "class_method_signature": "FrontServices.setUserJoinResponse(UserJoinRequest userJoinRequest, UserInfo userInfo, UserJoinResponse userJoinResponse)", "testcase": false, "constructor": false}, {"identifier": "setUserRecords", "parameters": "(UserGroup userInGroup, UserRecord userRecord, float overallDoneDistance, float distancevalided, float distanceWaitvalided, float distanceRejected, UserInfo userInformation, TargetDistance targetDistance, float lastRecord, int likes, int dislikes, int status)", "modifiers": "private", "return": "UserRecord", "signature": "UserRecord setUserRecords(UserGroup userInGroup, UserRecord userRecord, float overallDoneDistance, float distancevalided, float distanceWaitvalided, float distanceRejected, UserInfo userInformation, TargetDistance targetDistance, float lastRecord, int likes, int dislikes, int status)", "full_signature": "private UserRecord setUserRecords(UserGroup userInGroup, UserRecord userRecord, float overallDoneDistance, float distancevalided, float distanceWaitvalided, float distanceRejected, UserInfo userInformation, TargetDistance targetDistance, float lastRecord, int likes, int dislikes, int status)", "class_method_signature": "FrontServices.setUserRecords(UserGroup userInGroup, UserRecord userRecord, float overallDoneDistance, float distancevalided, float distanceWaitvalided, float distanceRejected, UserInfo userInformation, TargetDistance targetDistance, float lastRecord, int likes, int dislikes, int status)", "testcase": false, "constructor": false}, {"identifier": "setUserGroup", "parameters": "(UserJoinRequest userJoinRequest, UserGroup userGroup)", "modifiers": "private", "return": "void", "signature": "void setUserGroup(UserJoinRequest userJoinRequest, UserGroup userGroup)", "full_signature": "private void setUserGroup(UserJoinRequest userJoinRequest, UserGroup userGroup)", "class_method_signature": "FrontServices.setUserGroup(UserJoinRequest userJoinRequest, UserGroup userGroup)", "testcase": false, "constructor": false}, {"identifier": "setUserInfo", "parameters": "(UserJoinRequest userJoinRequest, UserInfo userInfo)", "modifiers": "private", "return": "void", "signature": "void setUserInfo(UserJoinRequest userJoinRequest, UserInfo userInfo)", "full_signature": "private void setUserInfo(UserJoinRequest userJoinRequest, UserInfo userInfo)", "class_method_signature": "FrontServices.setUserInfo(UserJoinRequest userJoinRequest, UserInfo userInfo)", "testcase": false, "constructor": false}, {"identifier": "userJoinv2", "parameters": "(UserJoinRequest userJoinRequest)", "modifiers": "public", "return": "ResponseMessage", "signature": "ResponseMessage userJoinv2(UserJoinRequest userJoinRequest)", "full_signature": "public ResponseMessage userJoinv2(UserJoinRequest userJoinRequest)", "class_method_signature": "FrontServices.userJoinv2(UserJoinRequest userJoinRequest)", "testcase": false, "constructor": false}, {"identifier": "setUserJoinResponseV2", "parameters": "(UserJoinRequest userJoinRequest, UserInfo userInfo, UserJoinResponse userJoinResponse)", "modifiers": "private", "return": "void", "signature": "void setUserJoinResponseV2(UserJoinRequest userJoinRequest, UserInfo userInfo, UserJoinResponse userJoinResponse)", "full_signature": "private void setUserJoinResponseV2(UserJoinRequest userJoinRequest, UserInfo userInfo, UserJoinResponse userJoinResponse)", "class_method_signature": "FrontServices.setUserJoinResponseV2(UserJoinRequest userJoinRequest, UserInfo userInfo, UserJoinResponse userJoinResponse)", "testcase": false, "constructor": false}, {"identifier": "handleUserRecord", "parameters": "(UserInfo userInfo, UserJoinResponse userJoinResponse, List<UserRecord> userRecords, UserGroup userInGroup)", "modifiers": "private", "return": "void", "signature": "void handleUserRecord(UserInfo userInfo, UserJoinResponse userJoinResponse, List<UserRecord> userRecords, UserGroup userInGroup)", "full_signature": "private void handleUserRecord(UserInfo userInfo, UserJoinResponse userJoinResponse, List<UserRecord> userRecords, UserGroup userInGroup)", "class_method_signature": "FrontServices.handleUserRecord(UserInfo userInfo, UserJoinResponse userJoinResponse, List<UserRecord> userRecords, UserGroup userInGroup)", "testcase": false, "constructor": false}], "file": "backend/src/main/java/com/running/coins/service/FrontServices.java"}, "focal_method": {"identifier": "everyOneWeekly", "parameters": "(WeeklyReportRequest weeklyReportRequest)", "modifiers": "public", "return": "ResponseMessage", "body": "public ResponseMessage everyOneWeekly(WeeklyReportRequest weeklyReportRequest) {\n        WeeklyReportResponse weeklyReportResponse = new WeeklyReportResponse();\n        List<UserRecord> userRecords = Lists.newLinkedList();\n        List<UserGroup> userGroups = userGroupMapper.selectByGroupId(weeklyReportRequest.getGroupId());\n        ThisLocalizedWeek thisLocalizedWeek = new ThisLocalizedWeek(Locale.CHINA);\n        Date start = thisLocalizedWeek.getFirstDay();\n        Date end = thisLocalizedWeek.getLastDay();\n        String rangeOfTime = parseForFrontEnd1(start) + \" to \" + parseForFrontEnd1(end);\n\n        for (UserGroup userGroup : userGroups) {\n            handleWeeklyUserInGroup(userRecords, start, end, userGroup);\n        }\n        weeklyReportResponse.setTimeRange(rangeOfTime);\n        weeklyReportResponse.setAllWeeklyRecords(userRecords);\n        return ResultUtils.success(weeklyReportResponse);\n    }", "signature": "ResponseMessage everyOneWeekly(WeeklyReportRequest weeklyReportRequest)", "full_signature": "public ResponseMessage everyOneWeekly(WeeklyReportRequest weeklyReportRequest)", "class_method_signature": "FrontServices.everyOneWeekly(WeeklyReportRequest weeklyReportRequest)", "testcase": false, "constructor": false, "invocations": ["newLinkedList", "selectByGroupId", "getGroupId", "getFirstDay", "getLastDay", "parseForFrontEnd1", "parseForFrontEnd1", "handleWeeklyUserInGroup", "setTimeRange", "setAllWeeklyRecords", "success"]}, "repository": {"repo_id": 129255460, "url": "https://github.com/artbite008/running_coin", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 5, "size": 3010, "license": "licensed"}}