{"test_class": {"identifier": "TokenProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String secretKey = \"e5c9ee274ae87bc031adda32e27fa98b9290da83\";", "modifier": "private final", "type": "String", "declarator": "secretKey = \"e5c9ee274ae87bc031adda32e27fa98b9290da83\"", "var_name": "secretKey"}, {"original_string": "private final long ONE_MINUTE = 60000;", "modifier": "private final", "type": "long", "declarator": "ONE_MINUTE = 60000", "var_name": "ONE_MINUTE"}, {"original_string": "private JHipsterProperties jHipsterProperties;", "modifier": "private", "type": "JHipsterProperties", "declarator": "jHipsterProperties", "var_name": "jHipsterProperties"}, {"original_string": "private TokenProvider tokenProvider;", "modifier": "private", "type": "TokenProvider", "declarator": "tokenProvider", "var_name": "tokenProvider"}], "file": "blog/src/test/java/org/jhipster/security/jwt/TokenProviderTest.java"}, "test_case": {"identifier": "testReturnFalseWhenJWTisUnsupported", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReturnFalseWhenJWTisUnsupported() {\n        Date expirationDate = new Date(new Date().getTime() + ONE_MINUTE);\n\n        Authentication authentication = createAuthentication();\n\n        String unsupportedToken = createUnsupportedToken();\n\n        boolean isTokenValid = tokenProvider.validateToken(unsupportedToken);\n\n        assertThat(isTokenValid).isEqualTo(false);\n    }", "signature": "void testReturnFalseWhenJWTisUnsupported()", "full_signature": "@Test public void testReturnFalseWhenJWTisUnsupported()", "class_method_signature": "TokenProviderTest.testReturnFalseWhenJWTisUnsupported()", "testcase": true, "constructor": false, "invocations": ["getTime", "createAuthentication", "createUnsupportedToken", "validateToken", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "TokenProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(TokenProvider.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TokenProvider.class)", "var_name": "log"}, {"original_string": "private static final String AUTHORITIES_KEY = \"auth\";", "modifier": "private static final", "type": "String", "declarator": "AUTHORITIES_KEY = \"auth\"", "var_name": "AUTHORITIES_KEY"}, {"original_string": "private String secretKey;", "modifier": "private", "type": "String", "declarator": "secretKey", "var_name": "secretKey"}, {"original_string": "private long tokenValidityInMilliseconds;", "modifier": "private", "type": "long", "declarator": "tokenValidityInMilliseconds", "var_name": "tokenValidityInMilliseconds"}, {"original_string": "private long tokenValidityInMillisecondsForRememberMe;", "modifier": "private", "type": "long", "declarator": "tokenValidityInMillisecondsForRememberMe", "var_name": "tokenValidityInMillisecondsForRememberMe"}, {"original_string": "private final JHipsterProperties jHipsterProperties;", "modifier": "private final", "type": "JHipsterProperties", "declarator": "jHipsterProperties", "var_name": "jHipsterProperties"}], "methods": [{"identifier": "TokenProvider", "parameters": "(JHipsterProperties jHipsterProperties)", "modifiers": "public", "return": "", "signature": " TokenProvider(JHipsterProperties jHipsterProperties)", "full_signature": "public  TokenProvider(JHipsterProperties jHipsterProperties)", "class_method_signature": "TokenProvider.TokenProvider(JHipsterProperties jHipsterProperties)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "TokenProvider.init()", "testcase": false, "constructor": false}, {"identifier": "createToken", "parameters": "(Authentication authentication, Boolean rememberMe)", "modifiers": "public", "return": "String", "signature": "String createToken(Authentication authentication, Boolean rememberMe)", "full_signature": "public String createToken(Authentication authentication, Boolean rememberMe)", "class_method_signature": "TokenProvider.createToken(Authentication authentication, Boolean rememberMe)", "testcase": false, "constructor": false}, {"identifier": "getAuthentication", "parameters": "(String token)", "modifiers": "public", "return": "Authentication", "signature": "Authentication getAuthentication(String token)", "full_signature": "public Authentication getAuthentication(String token)", "class_method_signature": "TokenProvider.getAuthentication(String token)", "testcase": false, "constructor": false}, {"identifier": "validateToken", "parameters": "(String authToken)", "modifiers": "public", "return": "boolean", "signature": "boolean validateToken(String authToken)", "full_signature": "public boolean validateToken(String authToken)", "class_method_signature": "TokenProvider.validateToken(String authToken)", "testcase": false, "constructor": false}], "file": "blog/src/main/java/org/jhipster/security/jwt/TokenProvider.java"}, "focal_method": {"identifier": "validateToken", "parameters": "(String authToken)", "modifiers": "public", "return": "boolean", "body": "public boolean validateToken(String authToken) {\n        try {\n            Jwts.parser().setSigningKey(secretKey).parseClaimsJws(authToken);\n            return true;\n        } catch (SignatureException e) {\n            log.info(\"Invalid JWT signature.\");\n            log.trace(\"Invalid JWT signature trace: {}\", e);\n        } catch (MalformedJwtException e) {\n            log.info(\"Invalid JWT token.\");\n            log.trace(\"Invalid JWT token trace: {}\", e);\n        } catch (ExpiredJwtException e) {\n            log.info(\"Expired JWT token.\");\n            log.trace(\"Expired JWT token trace: {}\", e);\n        } catch (UnsupportedJwtException e) {\n            log.info(\"Unsupported JWT token.\");\n            log.trace(\"Unsupported JWT token trace: {}\", e);\n        } catch (IllegalArgumentException e) {\n            log.info(\"JWT token compact of handler are invalid.\");\n            log.trace(\"JWT token compact of handler are invalid trace: {}\", e);\n        }\n        return false;\n    }", "signature": "boolean validateToken(String authToken)", "full_signature": "public boolean validateToken(String authToken)", "class_method_signature": "TokenProvider.validateToken(String authToken)", "testcase": false, "constructor": false, "invocations": ["parseClaimsJws", "setSigningKey", "parser", "info", "trace", "info", "trace", "info", "trace", "info", "trace", "info", "trace"]}, "repository": {"repo_id": 85760629, "url": "https://github.com/mraible/devoxxus-jhipster-microservices-demo", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 10, "size": 7301, "license": "licensed"}}