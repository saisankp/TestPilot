{"test_class": {"identifier": "SW360EnricherTest", "superclass": "extends AntennaTestWithMockedContext", "interfaces": "", "fields": [{"original_string": "private List<Artifact> artifacts;", "modifier": "private", "type": "List<Artifact>", "declarator": "artifacts", "var_name": "artifacts"}, {"original_string": "private SW360Enricher sw360Enricher;", "modifier": "private", "type": "SW360Enricher", "declarator": "sw360Enricher", "var_name": "sw360Enricher"}, {"original_string": "private SW360MetaDataReceiver connector;", "modifier": "private", "type": "SW360MetaDataReceiver", "declarator": "connector", "var_name": "connector"}], "file": "modules/sw360/sw360-workflow/src/test/java/org/eclipse/sw360/antenna/sw360/workflow/processors/SW360EnricherTest.java"}, "test_case": {"identifier": "testMetaDataReceiverIsCreated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMetaDataReceiverIsCreated() {\n        SW360ConnectionConfigurationFactory connectionFactory = mock(SW360ConnectionConfigurationFactory.class);\n        HttpClient httpClient = mock(HttpClient.class);\n        ObjectMapper mapper = mock(ObjectMapper.class);\n        SW360Connection connection = mock(SW360Connection.class);\n        when(antennaContextMock.getHttpClient()).thenReturn(httpClient);\n        when(antennaContextMock.getObjectMapper()).thenReturn(mapper);\n        when(connectionFactory.createConnection(any(), eq(httpClient), eq(mapper))).thenReturn(connection);\n\n        sw360Enricher = new SW360Enricher(connectionFactory);\n        sw360Enricher.setAntennaContext(antennaContextMock);\n\n        SW360MetaDataReceiver metaDataReceiver = sw360Enricher.createMetaDataReceiver(createStandardConfigMap());\n        assertThat(metaDataReceiver).isNotNull();\n\n        @SuppressWarnings(\"unchecked\")\n        ArgumentCaptor<SW360ConnectionConfigurationFactory.Getter<String>> captor =\n                ArgumentCaptor.forClass(SW360ConnectionConfigurationFactory.Getter.class);\n        verify(connectionFactory).createConnection(captor.capture(), eq(httpClient), eq(mapper));\n        SW360ConnectionConfigurationFactory.Getter<String> getter = captor.getValue();\n        for (Map.Entry<String, String> e : createStandardConfigMap().entrySet()) {\n            assertThat(getter.apply(e.getKey())).isEqualTo(e.getValue());\n        }\n        verify(connection).getReleaseAdapter();\n        verify(antennaContextMock).getHttpClient();\n        verify(antennaContextMock).getObjectMapper();\n    }", "signature": "void testMetaDataReceiverIsCreated()", "full_signature": "@Test public void testMetaDataReceiverIsCreated()", "class_method_signature": "SW360EnricherTest.testMetaDataReceiverIsCreated()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "thenReturn", "when", "getHttpClient", "thenReturn", "when", "getObjectMapper", "thenReturn", "when", "createConnection", "any", "eq", "eq", "setAntennaContext", "createMetaDataReceiver", "createStandardConfigMap", "isNotNull", "assertThat", "forClass", "createConnection", "verify", "capture", "eq", "eq", "getValue", "entrySet", "createStandardConfigMap", "isEqualTo", "assertThat", "apply", "getKey", "getValue", "getReleaseAdapter", "verify", "getHttpClient", "verify", "getObjectMapper", "verify"]}, "focal_class": {"identifier": "SW360Enricher", "superclass": "extends AbstractProcessor", "interfaces": "", "fields": [{"original_string": "private static final String DOWNLOAD_ATTACHMENTS = \"download.attachments\";", "modifier": "private static final", "type": "String", "declarator": "DOWNLOAD_ATTACHMENTS = \"download.attachments\"", "var_name": "DOWNLOAD_ATTACHMENTS"}, {"original_string": "private static final String DOWNLOAD_ATTACHMENTS_DIR = \"download.directory\";", "modifier": "private static final", "type": "String", "declarator": "DOWNLOAD_ATTACHMENTS_DIR = \"download.directory\"", "var_name": "DOWNLOAD_ATTACHMENTS_DIR"}, {"original_string": "private final SW360ConnectionConfigurationFactory connectionFactory;", "modifier": "private final", "type": "SW360ConnectionConfigurationFactory", "declarator": "connectionFactory", "var_name": "connectionFactory"}, {"original_string": "private boolean downloadAttachments;", "modifier": "private", "type": "boolean", "declarator": "downloadAttachments", "var_name": "downloadAttachments"}, {"original_string": "private Path downloadPath;", "modifier": "private", "type": "Path", "declarator": "downloadPath", "var_name": "downloadPath"}, {"original_string": "private SW360MetaDataReceiver connector;", "modifier": "private", "type": "SW360MetaDataReceiver", "declarator": "connector", "var_name": "connector"}], "methods": [{"identifier": "SW360Enricher", "parameters": "()", "modifiers": "public", "return": "", "signature": " SW360Enricher()", "full_signature": "public  SW360Enricher()", "class_method_signature": "SW360Enricher.SW360Enricher()", "testcase": false, "constructor": true}, {"identifier": "SW360Enricher", "parameters": "(SW360ConnectionConfigurationFactory factory)", "modifiers": "", "return": "", "signature": " SW360Enricher(SW360ConnectionConfigurationFactory factory)", "full_signature": "  SW360Enricher(SW360ConnectionConfigurationFactory factory)", "class_method_signature": "SW360Enricher.SW360Enricher(SW360ConnectionConfigurationFactory factory)", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(Map<String, String> configMap)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String, String> configMap)", "full_signature": "@Override public void configure(Map<String, String> configMap)", "class_method_signature": "SW360Enricher.configure(Map<String, String> configMap)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Collection<Artifact> intermediates)", "modifiers": "@Override public", "return": "Collection<Artifact>", "signature": "Collection<Artifact> process(Collection<Artifact> intermediates)", "full_signature": "@Override public Collection<Artifact> process(Collection<Artifact> intermediates)", "class_method_signature": "SW360Enricher.process(Collection<Artifact> intermediates)", "testcase": false, "constructor": false}, {"identifier": "createMetaDataReceiver", "parameters": "(Map<String, String> configMap)", "modifiers": "", "return": "SW360MetaDataReceiver", "signature": "SW360MetaDataReceiver createMetaDataReceiver(Map<String, String> configMap)", "full_signature": " SW360MetaDataReceiver createMetaDataReceiver(Map<String, String> configMap)", "class_method_signature": "SW360Enricher.createMetaDataReceiver(Map<String, String> configMap)", "testcase": false, "constructor": false}, {"identifier": "getConnectionFactory", "parameters": "()", "modifiers": "", "return": "SW360ConnectionConfigurationFactory", "signature": "SW360ConnectionConfigurationFactory getConnectionFactory()", "full_signature": " SW360ConnectionConfigurationFactory getConnectionFactory()", "class_method_signature": "SW360Enricher.getConnectionFactory()", "testcase": false, "constructor": false}], "file": "modules/sw360/sw360-workflow/src/main/java/org/eclipse/sw360/antenna/sw360/workflow/processors/SW360Enricher.java"}, "focal_method": {"identifier": "createMetaDataReceiver", "parameters": "(Map<String, String> configMap)", "modifiers": "", "return": "SW360MetaDataReceiver", "body": "SW360MetaDataReceiver createMetaDataReceiver(Map<String, String> configMap) {\n        SW360Connection connection =\n                getConnectionFactory().createConnection(key -> getConfigValue(key, configMap),\n                        context.getHttpClient(), context.getObjectMapper());\n        return new SW360MetaDataReceiver(connection);\n    }", "signature": "SW360MetaDataReceiver createMetaDataReceiver(Map<String, String> configMap)", "full_signature": " SW360MetaDataReceiver createMetaDataReceiver(Map<String, String> configMap)", "class_method_signature": "SW360Enricher.createMetaDataReceiver(Map<String, String> configMap)", "testcase": false, "constructor": false, "invocations": ["createConnection", "getConnectionFactory", "getConfigValue", "getHttpClient", "getObjectMapper"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}