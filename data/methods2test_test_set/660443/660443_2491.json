{"test_class": {"identifier": "PiBondingMovementReactionTest", "superclass": "extends ReactionProcessTest", "interfaces": "", "fields": [{"original_string": "private IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "base/reaction/src/test/java/org/openscience/cdk/reaction/type/PiBondingMovementReactionTest.java"}, "test_case": {"identifier": "testInitiate_IAtomContainerSet_IAtomContainerSet", "parameters": "()", "modifiers": "@Test @Override public", "return": "void", "body": "@Test\n    @Override\n    public void testInitiate_IAtomContainerSet_IAtomContainerSet() throws Exception {\n        IReactionProcess type = new PiBondingMovementReaction();\n        // C1=C(C)-C(C)=C-C=C1\n        IAtomContainer molecule = builder.newInstance(IAtomContainer.class);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(0, 1, IBond.Order.DOUBLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(1, 2, IBond.Order.SINGLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(2, 3, IBond.Order.DOUBLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(3, 4, IBond.Order.SINGLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(4, 5, IBond.Order.DOUBLE);\n        molecule.addBond(5, 0, IBond.Order.SINGLE);\n\n        addExplicitHydrogens(molecule);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n        makeSureAtomTypesAreRecognized(molecule);\n\n        IAtomContainerSet setOfReactants = DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainerSet.class);\n        setOfReactants.addAtomContainer(molecule);\n\n        /* initiate */\n        List<IParameterReact> paramList = new ArrayList<>();\n        IParameterReact param = new SetReactionCenter();\n        param.setParameter(Boolean.FALSE);\n        paramList.add(param);\n        type.setParameterList(paramList);\n        IReactionSet setOfReactions = type.initiate(setOfReactants, null);\n\n        Assert.assertEquals(1, setOfReactions.getReactionCount());\n        Assert.assertEquals(1, setOfReactions.getReaction(0).getProductCount());\n\n        IAtomContainer product2 = setOfReactions.getReaction(0).getProducts().getAtomContainer(0);\n\n        IQueryAtomContainer queryAtom = QueryAtomContainerCreator.createSymbolAndChargeQueryContainer(product2);\n        Assert.assertTrue(new UniversalIsomorphismTester().isIsomorph(molecule, queryAtom));\n\n    }", "signature": "void testInitiate_IAtomContainerSet_IAtomContainerSet()", "full_signature": "@Test @Override public void testInitiate_IAtomContainerSet_IAtomContainerSet()", "class_method_signature": "PiBondingMovementReactionTest.testInitiate_IAtomContainerSet_IAtomContainerSet()", "testcase": true, "constructor": false, "invocations": ["newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addBond", "addExplicitHydrogens", "percieveAtomTypesAndConfigureAtoms", "makeSureAtomTypesAreRecognized", "newInstance", "getInstance", "addAtomContainer", "setParameter", "add", "setParameterList", "initiate", "assertEquals", "getReactionCount", "assertEquals", "getProductCount", "getReaction", "getAtomContainer", "getProducts", "getReaction", "createSymbolAndChargeQueryContainer", "assertTrue", "isIsomorph"]}, "focal_class": {"identifier": "PiBondingMovementReaction", "superclass": "extends ReactionEngine", "interfaces": "implements IReactionProcess", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(PiBondingMovementReaction.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(PiBondingMovementReaction.class)", "var_name": "logger"}], "methods": [{"identifier": "PiBondingMovementReaction", "parameters": "()", "modifiers": "public", "return": "", "signature": " PiBondingMovementReaction()", "full_signature": "public  PiBondingMovementReaction()", "class_method_signature": "PiBondingMovementReaction.PiBondingMovementReaction()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "ReactionSpecification", "signature": "ReactionSpecification getSpecification()", "full_signature": "@Override public ReactionSpecification getSpecification()", "class_method_signature": "PiBondingMovementReaction.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "PiBondingMovementReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false}, {"identifier": "setActiveCenters", "parameters": "(IAtomContainer reactant)", "modifiers": "private", "return": "void", "signature": "void setActiveCenters(IAtomContainer reactant)", "full_signature": "private void setActiveCenters(IAtomContainer reactant)", "class_method_signature": "PiBondingMovementReaction.setActiveCenters(IAtomContainer reactant)", "testcase": false, "constructor": false}], "file": "base/reaction/src/main/java/org/openscience/cdk/reaction/type/PiBondingMovementReaction.java"}, "focal_method": {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "body": "@Override\n    public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents) throws CDKException {\n\n        logger.debug(\"initiate reaction: PiBondingMovementReaction\");\n\n        if (reactants.getAtomContainerCount() != 1) {\n            throw new CDKException(\"PiBondingMovementReaction only expects one reactant\");\n        }\n        if (agents != null) {\n            throw new CDKException(\"PiBondingMovementReaction don't expects agents\");\n        }\n\n        IReactionSet setOfReactions = reactants.getBuilder().newInstance(IReactionSet.class);\n        IAtomContainer reactant = reactants.getAtomContainer(0);\n\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(reactant);\n        /*\n         * if the parameter hasActiveCenter is not fixed yet, set the active\n         * centers\n         */\n        IParameterReact ipr = super.getParameterClass(SetReactionCenter.class);\n        if (ipr != null && !ipr.isSetParameter()) setActiveCenters(reactant);\n\n        //\t\tif((Boolean)paramsMap.get(\"lookingSymmetry\")){\n        //\t\t\tAromaticity.cdkLegacy().apply(reactant);\n        //\t\t}\n\n        AllRingsFinder arf = new AllRingsFinder();\n        IRingSet ringSet = arf.findAllRings(reactant);\n        for (int ir = 0; ir < ringSet.getAtomContainerCount(); ir++) {\n            IRing ring = (IRing) ringSet.getAtomContainer(ir);\n\n            //only rings with even number of atoms\n            int nrAtoms = ring.getAtomCount();\n            if (nrAtoms % 2 == 0) {\n                int nrSingleBonds = 0;\n                for (IBond iBond : ring.bonds()) {\n                    if (iBond.getOrder() == IBond.Order.SINGLE) nrSingleBonds++;\n                }\n                //if exactly half (nrAtoms/2==nrSingleBonds)\n                if (nrSingleBonds != 0 && nrAtoms / 2 == nrSingleBonds) {\n                    Iterator<IBond> bondfs = ring.bonds().iterator();\n                    boolean ringCompletActive = false;\n                    while (bondfs.hasNext()) {\n                        if (bondfs.next().getFlag(CDKConstants.REACTIVE_CENTER))\n                            ringCompletActive = true;\n                        else {\n                            ringCompletActive = false;\n                            break;\n                        }\n                    }\n                    if (!ringCompletActive) continue;\n\n                    IReaction reaction = reactants.getBuilder().newInstance(IReaction.class);\n                    reaction.addReactant(reactant);\n\n                    IAtomContainer reactantCloned;\n                    try {\n                        reactantCloned = reactant.clone();\n                    } catch (CloneNotSupportedException e) {\n                        throw new CDKException(\"Could not clone IAtomContainer!\", e);\n                    }\n\n                    for (IBond bondi : ring.bonds()) {\n                        int bondiP = reactant.indexOf(bondi);\n                        if (bondi.getOrder() == IBond.Order.SINGLE)\n                            BondManipulator.increaseBondOrder(reactantCloned.getBond(bondiP));\n                        else\n                            BondManipulator.decreaseBondOrder(reactantCloned.getBond(bondiP));\n\n                    }\n\n                    reaction.addProduct(reactantCloned);\n                    setOfReactions.addReaction(reaction);\n                }\n\n            }\n        }\n\n        return setOfReactions;\n    }", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "PiBondingMovementReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false, "invocations": ["debug", "getAtomContainerCount", "newInstance", "getBuilder", "getAtomContainer", "percieveAtomTypesAndConfigureAtoms", "getParameterClass", "isSetParameter", "setActiveCenters", "findAllRings", "getAtomContainerCount", "getAtomContainer", "getAtomCount", "bonds", "getOrder", "iterator", "bonds", "hasNext", "getFlag", "next", "newInstance", "getBuilder", "addReactant", "clone", "bonds", "indexOf", "getOrder", "increaseBondOrder", "getBond", "decreaseBondOrder", "getBond", "addProduct", "addReaction"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}