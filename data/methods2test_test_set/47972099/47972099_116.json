{"test_class": {"identifier": "PojoTypeInfoTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/api/java/typeutils/PojoTypeInfoTest.java"}, "test_case": {"identifier": "testPojoTypeInfoInequality", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPojoTypeInfoInequality() {\n\t\ttry {\n\t\t\tTypeInformation<TestPojo> info1 = TypeExtractor.getForClass(TestPojo.class);\n\t\t\tTypeInformation<AlternatePojo> info2 = TypeExtractor.getForClass(AlternatePojo.class);\n\n\t\t\tassertTrue(info1 instanceof PojoTypeInfo);\n\t\t\tassertTrue(info2 instanceof PojoTypeInfo);\n\n\t\t\tassertFalse(info1.equals(info2));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testPojoTypeInfoInequality()", "full_signature": "@Test public void testPojoTypeInfoInequality()", "class_method_signature": "PojoTypeInfoTest.testPojoTypeInfoInequality()", "testcase": true, "constructor": false, "invocations": ["getForClass", "getForClass", "assertTrue", "assertTrue", "assertFalse", "equals", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "PojoTypeInfo", "superclass": "extends CompositeType<T>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final static String REGEX_FIELD = \"[\\\\p{L}_\\\\$][\\\\p{L}\\\\p{Digit}_\\\\$]*\";", "modifier": "private final static", "type": "String", "declarator": "REGEX_FIELD = \"[\\\\p{L}_\\\\$][\\\\p{L}\\\\p{Digit}_\\\\$]*\"", "var_name": "REGEX_FIELD"}, {"original_string": "private final static String REGEX_NESTED_FIELDS = \"(\"+REGEX_FIELD+\")(\\\\.(.+))?\";", "modifier": "private final static", "type": "String", "declarator": "REGEX_NESTED_FIELDS = \"(\"+REGEX_FIELD+\")(\\\\.(.+))?\"", "var_name": "REGEX_NESTED_FIELDS"}, {"original_string": "private final static String REGEX_NESTED_FIELDS_WILDCARD = REGEX_NESTED_FIELDS\n\t\t\t+\"|\\\\\"+ExpressionKeys.SELECT_ALL_CHAR\n\t\t\t+\"|\\\\\"+ExpressionKeys.SELECT_ALL_CHAR_SCALA;", "modifier": "private final static", "type": "String", "declarator": "REGEX_NESTED_FIELDS_WILDCARD = REGEX_NESTED_FIELDS\n\t\t\t+\"|\\\\\"+ExpressionKeys.SELECT_ALL_CHAR\n\t\t\t+\"|\\\\\"+ExpressionKeys.SELECT_ALL_CHAR_SCALA", "var_name": "REGEX_NESTED_FIELDS_WILDCARD"}, {"original_string": "private static final Pattern PATTERN_NESTED_FIELDS = Pattern.compile(REGEX_NESTED_FIELDS);", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_NESTED_FIELDS = Pattern.compile(REGEX_NESTED_FIELDS)", "var_name": "PATTERN_NESTED_FIELDS"}, {"original_string": "private static final Pattern PATTERN_NESTED_FIELDS_WILDCARD = Pattern.compile(REGEX_NESTED_FIELDS_WILDCARD);", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_NESTED_FIELDS_WILDCARD = Pattern.compile(REGEX_NESTED_FIELDS_WILDCARD)", "var_name": "PATTERN_NESTED_FIELDS_WILDCARD"}, {"original_string": "private final PojoField[] fields;", "modifier": "private final", "type": "PojoField[]", "declarator": "fields", "var_name": "fields"}, {"original_string": "private final int totalFields;", "modifier": "private final", "type": "int", "declarator": "totalFields", "var_name": "totalFields"}], "methods": [{"identifier": "PojoTypeInfo", "parameters": "(Class<T> typeClass, List<PojoField> fields)", "modifiers": "@PublicEvolving public", "return": "", "signature": " PojoTypeInfo(Class<T> typeClass, List<PojoField> fields)", "full_signature": "@PublicEvolving public  PojoTypeInfo(Class<T> typeClass, List<PojoField> fields)", "class_method_signature": "PojoTypeInfo.PojoTypeInfo(Class<T> typeClass, List<PojoField> fields)", "testcase": false, "constructor": true}, {"identifier": "isBasicType", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "boolean", "signature": "boolean isBasicType()", "full_signature": "@Override @PublicEvolving public boolean isBasicType()", "class_method_signature": "PojoTypeInfo.isBasicType()", "testcase": false, "constructor": false}, {"identifier": "isTupleType", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "boolean", "signature": "boolean isTupleType()", "full_signature": "@Override @PublicEvolving public boolean isTupleType()", "class_method_signature": "PojoTypeInfo.isTupleType()", "testcase": false, "constructor": false}, {"identifier": "getArity", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "int", "signature": "int getArity()", "full_signature": "@Override @PublicEvolving public int getArity()", "class_method_signature": "PojoTypeInfo.getArity()", "testcase": false, "constructor": false}, {"identifier": "getTotalFields", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "int", "signature": "int getTotalFields()", "full_signature": "@Override @PublicEvolving public int getTotalFields()", "class_method_signature": "PojoTypeInfo.getTotalFields()", "testcase": false, "constructor": false}, {"identifier": "isSortKeyType", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "boolean", "signature": "boolean isSortKeyType()", "full_signature": "@Override @PublicEvolving public boolean isSortKeyType()", "class_method_signature": "PojoTypeInfo.isSortKeyType()", "testcase": false, "constructor": false}, {"identifier": "getFlatFields", "parameters": "(String fieldExpression, int offset, List<FlatFieldDescriptor> result)", "modifiers": "@Override @PublicEvolving public", "return": "void", "signature": "void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)", "full_signature": "@Override @PublicEvolving public void getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)", "class_method_signature": "PojoTypeInfo.getFlatFields(String fieldExpression, int offset, List<FlatFieldDescriptor> result)", "testcase": false, "constructor": false}, {"identifier": "getTypeAt", "parameters": "(String fieldExpression)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override @PublicEvolving public", "return": "TypeInformation<X>", "signature": "TypeInformation<X> getTypeAt(String fieldExpression)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override @PublicEvolving public TypeInformation<X> getTypeAt(String fieldExpression)", "class_method_signature": "PojoTypeInfo.getTypeAt(String fieldExpression)", "testcase": false, "constructor": false}, {"identifier": "getTypeAt", "parameters": "(int pos)", "modifiers": "@Override @PublicEvolving public", "return": "TypeInformation<X>", "signature": "TypeInformation<X> getTypeAt(int pos)", "full_signature": "@Override @PublicEvolving public TypeInformation<X> getTypeAt(int pos)", "class_method_signature": "PojoTypeInfo.getTypeAt(int pos)", "testcase": false, "constructor": false}, {"identifier": "createTypeComparatorBuilder", "parameters": "()", "modifiers": "@Override protected", "return": "TypeComparatorBuilder<T>", "signature": "TypeComparatorBuilder<T> createTypeComparatorBuilder()", "full_signature": "@Override protected TypeComparatorBuilder<T> createTypeComparatorBuilder()", "class_method_signature": "PojoTypeInfo.createTypeComparatorBuilder()", "testcase": false, "constructor": false}, {"identifier": "getPojoFieldAt", "parameters": "(int pos)", "modifiers": "@PublicEvolving public", "return": "PojoField", "signature": "PojoField getPojoFieldAt(int pos)", "full_signature": "@PublicEvolving public PojoField getPojoFieldAt(int pos)", "class_method_signature": "PojoTypeInfo.getPojoFieldAt(int pos)", "testcase": false, "constructor": false}, {"identifier": "getFieldNames", "parameters": "()", "modifiers": "@PublicEvolving public", "return": "String[]", "signature": "String[] getFieldNames()", "full_signature": "@PublicEvolving public String[] getFieldNames()", "class_method_signature": "PojoTypeInfo.getFieldNames()", "testcase": false, "constructor": false}, {"identifier": "getFieldIndex", "parameters": "(String fieldName)", "modifiers": "@Override @PublicEvolving public", "return": "int", "signature": "int getFieldIndex(String fieldName)", "full_signature": "@Override @PublicEvolving public int getFieldIndex(String fieldName)", "class_method_signature": "PojoTypeInfo.getFieldIndex(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "createSerializer", "parameters": "(ExecutionConfig config)", "modifiers": "@Override @PublicEvolving public", "return": "TypeSerializer<T>", "signature": "TypeSerializer<T> createSerializer(ExecutionConfig config)", "full_signature": "@Override @PublicEvolving public TypeSerializer<T> createSerializer(ExecutionConfig config)", "class_method_signature": "PojoTypeInfo.createSerializer(ExecutionConfig config)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "PojoTypeInfo.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PojoTypeInfo.hashCode()", "testcase": false, "constructor": false}, {"identifier": "canEqual", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canEqual(Object obj)", "full_signature": "@Override public boolean canEqual(Object obj)", "class_method_signature": "PojoTypeInfo.canEqual(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PojoTypeInfo.toString()", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/api/java/typeutils/PojoTypeInfo.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj instanceof PojoTypeInfo) {\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tPojoTypeInfo<T> pojoTypeInfo = (PojoTypeInfo<T>)obj;\n\n\t\t\treturn pojoTypeInfo.canEqual(this) &&\n\t\t\t\tsuper.equals(pojoTypeInfo) &&\n\t\t\t\tArrays.equals(fields, pojoTypeInfo.fields) &&\n\t\t\t\ttotalFields == pojoTypeInfo.totalFields;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "PojoTypeInfo.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["canEqual", "equals", "equals"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}