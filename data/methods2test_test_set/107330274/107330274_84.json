{"test_class": {"identifier": "ConcurrentHashMultimapTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MINIMUM_THREADS = 10;", "modifier": "private static final", "type": "int", "declarator": "MINIMUM_THREADS = 10", "var_name": "MINIMUM_THREADS"}, {"original_string": "private static final int MAXIMUM_THREADS = 20;", "modifier": "private static final", "type": "int", "declarator": "MAXIMUM_THREADS = 20", "var_name": "MAXIMUM_THREADS"}, {"original_string": "private static final int MAX_KEYS_PER_THREAD = 1024;", "modifier": "private static final", "type": "int", "declarator": "MAX_KEYS_PER_THREAD = 1024", "var_name": "MAX_KEYS_PER_THREAD"}, {"original_string": "private static final int MAX_ENTRIES_PER_KEY_PER_THREAD = 8192;", "modifier": "private static final", "type": "int", "declarator": "MAX_ENTRIES_PER_KEY_PER_THREAD = 8192", "var_name": "MAX_ENTRIES_PER_KEY_PER_THREAD"}, {"original_string": "private static final int POSSIBLE_RANDOM_IDS = 128;", "modifier": "private static final", "type": "int", "declarator": "POSSIBLE_RANDOM_IDS = 128", "var_name": "POSSIBLE_RANDOM_IDS"}, {"original_string": "private static final int POSSIBLE_RANDOM_VALUES = 10;", "modifier": "private static final", "type": "int", "declarator": "POSSIBLE_RANDOM_VALUES = 10", "var_name": "POSSIBLE_RANDOM_VALUES"}, {"original_string": "private ConcurrentHashMultimap<String, TestEntity> multiMap;", "modifier": "private", "type": "ConcurrentHashMultimap<String, TestEntity>", "declarator": "multiMap", "var_name": "multiMap"}], "file": "titus-common/src/test/java/com/netflix/titus/common/util/collections/ConcurrentHashMultimapTest.java"}, "test_case": {"identifier": "size", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void size() throws Exception {\n        multiMap.putAll(ImmutableListMultimap.of(\n                \"first\", new TestEntity(\"1\", \"v1\"),\n                \"second\", new TestEntity(\"2\", \"v2\"),\n                \"second\", new TestEntity(\"3\", \"v3\")\n        ));\n        assertThat(multiMap.size()).isEqualTo(3);\n    }", "signature": "void size()", "full_signature": "@Test public void size()", "class_method_signature": "ConcurrentHashMultimapTest.size()", "testcase": true, "constructor": false, "invocations": ["putAll", "of", "isEqualTo", "assertThat", "size"]}, "focal_class": {"identifier": "ConcurrentHashMultimap", "superclass": "", "interfaces": "implements Multimap<K, V>", "fields": [{"original_string": "private final ConcurrentMap<K, Map<Object, V>> entries = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<K, Map<Object, V>>", "declarator": "entries = new ConcurrentHashMap<>()", "var_name": "entries"}, {"original_string": "private final ValueIdentityExtractor<V> valueIdentityExtractor;", "modifier": "private final", "type": "ValueIdentityExtractor<V>", "declarator": "valueIdentityExtractor", "var_name": "valueIdentityExtractor"}, {"original_string": "private final ConflictResolver<V> defaultConflictResolver;", "modifier": "private final", "type": "ConflictResolver<V>", "declarator": "defaultConflictResolver", "var_name": "defaultConflictResolver"}], "methods": [{"identifier": "ConcurrentHashMultimap", "parameters": "(ValueIdentityExtractor<V> valueIdentityExtractor, ConflictResolver<V> conflictResolver)", "modifiers": "public", "return": "", "signature": " ConcurrentHashMultimap(ValueIdentityExtractor<V> valueIdentityExtractor, ConflictResolver<V> conflictResolver)", "full_signature": "public  ConcurrentHashMultimap(ValueIdentityExtractor<V> valueIdentityExtractor, ConflictResolver<V> conflictResolver)", "class_method_signature": "ConcurrentHashMultimap.ConcurrentHashMultimap(ValueIdentityExtractor<V> valueIdentityExtractor, ConflictResolver<V> conflictResolver)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(@Nullable K key, @Nullable V value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean put(@Nullable K key, @Nullable V value)", "full_signature": "@Override public boolean put(@Nullable K key, @Nullable V value)", "class_method_signature": "ConcurrentHashMultimap.put(@Nullable K key, @Nullable V value)", "testcase": false, "constructor": false}, {"identifier": "putWithConflictResolution", "parameters": "(K key, V newValue, ConflictResolver<V> conflictResolver)", "modifiers": "private", "return": "boolean", "signature": "boolean putWithConflictResolution(K key, V newValue, ConflictResolver<V> conflictResolver)", "full_signature": "private boolean putWithConflictResolution(K key, V newValue, ConflictResolver<V> conflictResolver)", "class_method_signature": "ConcurrentHashMultimap.putWithConflictResolution(K key, V newValue, ConflictResolver<V> conflictResolver)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(@Nullable Object key, @Nullable Object value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(@Nullable Object key, @Nullable Object value)", "full_signature": "@Override public boolean remove(@Nullable Object key, @Nullable Object value)", "class_method_signature": "ConcurrentHashMultimap.remove(@Nullable Object key, @Nullable Object value)", "testcase": false, "constructor": false}, {"identifier": "removeIf", "parameters": "(K key, V value, Predicate<V> match)", "modifiers": "public", "return": "boolean", "signature": "boolean removeIf(K key, V value, Predicate<V> match)", "full_signature": "public boolean removeIf(K key, V value, Predicate<V> match)", "class_method_signature": "ConcurrentHashMultimap.removeIf(K key, V value, Predicate<V> match)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(@Nullable K key, Iterable<? extends V> values)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean putAll(@Nullable K key, Iterable<? extends V> values)", "full_signature": "@Override public boolean putAll(@Nullable K key, Iterable<? extends V> values)", "class_method_signature": "ConcurrentHashMultimap.putAll(@Nullable K key, Iterable<? extends V> values)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(Multimap<? extends K, ? extends V> values)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean putAll(Multimap<? extends K, ? extends V> values)", "full_signature": "@Override public boolean putAll(Multimap<? extends K, ? extends V> values)", "class_method_signature": "ConcurrentHashMultimap.putAll(Multimap<? extends K, ? extends V> values)", "testcase": false, "constructor": false}, {"identifier": "replaceValues", "parameters": "(@Nullable K key, Iterable<? extends V> values)", "modifiers": "@Override public", "return": "Collection<V>", "signature": "Collection<V> replaceValues(@Nullable K key, Iterable<? extends V> values)", "full_signature": "@Override public Collection<V> replaceValues(@Nullable K key, Iterable<? extends V> values)", "class_method_signature": "ConcurrentHashMultimap.replaceValues(@Nullable K key, Iterable<? extends V> values)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(@Nullable Object key)", "modifiers": "@Override public", "return": "Collection<V>", "signature": "Collection<V> removeAll(@Nullable Object key)", "full_signature": "@Override public Collection<V> removeAll(@Nullable Object key)", "class_method_signature": "ConcurrentHashMultimap.removeAll(@Nullable Object key)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "ConcurrentHashMultimap.clear()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(@Nullable K key)", "modifiers": "@Override public", "return": "Collection<V>", "signature": "Collection<V> get(@Nullable K key)", "full_signature": "@Override public Collection<V> get(@Nullable K key)", "class_method_signature": "ConcurrentHashMultimap.get(@Nullable K key)", "testcase": false, "constructor": false}, {"identifier": "keySet", "parameters": "()", "modifiers": "@Override public", "return": "Set<K>", "signature": "Set<K> keySet()", "full_signature": "@Override public Set<K> keySet()", "class_method_signature": "ConcurrentHashMultimap.keySet()", "testcase": false, "constructor": false}, {"identifier": "keys", "parameters": "()", "modifiers": "@Override public", "return": "Multiset<K>", "signature": "Multiset<K> keys()", "full_signature": "@Override public Multiset<K> keys()", "class_method_signature": "ConcurrentHashMultimap.keys()", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "()", "modifiers": "@Override public", "return": "Collection<V>", "signature": "Collection<V> values()", "full_signature": "@Override public Collection<V> values()", "class_method_signature": "ConcurrentHashMultimap.values()", "testcase": false, "constructor": false}, {"identifier": "entries", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Map.Entry<K, V>>", "signature": "Collection<Map.Entry<K, V>> entries()", "full_signature": "@Override public Collection<Map.Entry<K, V>> entries()", "class_method_signature": "ConcurrentHashMultimap.entries()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "ConcurrentHashMultimap.size()", "testcase": false, "constructor": false}, {"identifier": "entryStream", "parameters": "()", "modifiers": "private", "return": "Stream<Map.Entry<K, V>>", "signature": "Stream<Map.Entry<K, V>> entryStream()", "full_signature": "private Stream<Map.Entry<K, V>> entryStream()", "class_method_signature": "ConcurrentHashMultimap.entryStream()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "ConcurrentHashMultimap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(@Nullable Object key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsKey(@Nullable Object key)", "full_signature": "@Override public boolean containsKey(@Nullable Object key)", "class_method_signature": "ConcurrentHashMultimap.containsKey(@Nullable Object key)", "testcase": false, "constructor": false}, {"identifier": "containsValue", "parameters": "(@Nullable Object value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsValue(@Nullable Object value)", "full_signature": "@Override public boolean containsValue(@Nullable Object value)", "class_method_signature": "ConcurrentHashMultimap.containsValue(@Nullable Object value)", "testcase": false, "constructor": false}, {"identifier": "containsEntry", "parameters": "(@Nullable Object key, @Nullable Object value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsEntry(@Nullable Object key, @Nullable Object value)", "full_signature": "@Override public boolean containsEntry(@Nullable Object key, @Nullable Object value)", "class_method_signature": "ConcurrentHashMultimap.containsEntry(@Nullable Object key, @Nullable Object value)", "testcase": false, "constructor": false}, {"identifier": "asMap", "parameters": "()", "modifiers": "@Override public", "return": "Map<K, Collection<V>>", "signature": "Map<K, Collection<V>> asMap()", "full_signature": "@Override public Map<K, Collection<V>> asMap()", "class_method_signature": "ConcurrentHashMultimap.asMap()", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/collections/ConcurrentHashMultimap.java"}, "focal_method": {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int size() {\n        return (int) entryStream().count();\n    }", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "ConcurrentHashMultimap.size()", "testcase": false, "constructor": false, "invocations": ["count", "entryStream"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}