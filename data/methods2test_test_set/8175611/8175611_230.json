{"test_class": {"identifier": "BasePlaceholderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@SuppressFBWarnings(value = \"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\", justification = \"Mockito rule needs no further configuration\")\n    @Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@SuppressFBWarnings(value = \"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\", justification = \"Mockito rule needs no further configuration\")\n    @Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Mock\n    private ReplacementData data;", "modifier": "@Mock\n    private", "type": "ReplacementData", "declarator": "data", "var_name": "data"}], "file": "core/src/test/java/com/tngtech/junit/dataprovider/placeholder/BasePlaceholderTest.java"}, "test_case": {"identifier": "testProcessShouldReplaceSinglePlaceholder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcessShouldReplaceSinglePlaceholder() {\n        // Given:\n        BasePlaceholder underTest = new TestPlaceholder(\"%s\", \"##foo##\");\n\n        // When:\n        String result = underTest.process(null, \"%s\");\n\n        // Then:\n        assertThat(result).isEqualTo(\"##foo##\");\n    }", "signature": "void testProcessShouldReplaceSinglePlaceholder()", "full_signature": "@Test public void testProcessShouldReplaceSinglePlaceholder()", "class_method_signature": "BasePlaceholderTest.testProcessShouldReplaceSinglePlaceholder()", "testcase": true, "constructor": false, "invocations": ["process", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "BasePlaceholder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Pattern pattern;", "modifier": "private final", "type": "Pattern", "declarator": "pattern", "var_name": "pattern"}], "methods": [{"identifier": "BasePlaceholder", "parameters": "(String placeholderRegex)", "modifiers": "public", "return": "", "signature": " BasePlaceholder(String placeholderRegex)", "full_signature": "public  BasePlaceholder(String placeholderRegex)", "class_method_signature": "BasePlaceholder.BasePlaceholder(String placeholderRegex)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(ReplacementData data, String formatPattern)", "modifiers": "public", "return": "String", "signature": "String process(ReplacementData data, String formatPattern)", "full_signature": "public String process(ReplacementData data, String formatPattern)", "class_method_signature": "BasePlaceholder.process(ReplacementData data, String formatPattern)", "testcase": false, "constructor": false}, {"identifier": "getReplacementFor", "parameters": "(String placeholder, ReplacementData data)", "modifiers": "protected abstract", "return": "String", "signature": "String getReplacementFor(String placeholder, ReplacementData data)", "full_signature": "protected abstract String getReplacementFor(String placeholder, ReplacementData data)", "class_method_signature": "BasePlaceholder.getReplacementFor(String placeholder, ReplacementData data)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/tngtech/junit/dataprovider/placeholder/BasePlaceholder.java"}, "focal_method": {"identifier": "process", "parameters": "(ReplacementData data, String formatPattern)", "modifiers": "public", "return": "String", "body": "public String process(ReplacementData data, String formatPattern) {\n        StringBuffer sb = new StringBuffer();\n\n        Matcher matcher = pattern.matcher(formatPattern);\n        while (matcher.find()) {\n            matcher.appendReplacement(sb, Matcher.quoteReplacement(getReplacementFor(matcher.group(), data)));\n        }\n        matcher.appendTail(sb);\n        return sb.toString();\n    }", "signature": "String process(ReplacementData data, String formatPattern)", "full_signature": "public String process(ReplacementData data, String formatPattern)", "class_method_signature": "BasePlaceholder.process(ReplacementData data, String formatPattern)", "testcase": false, "constructor": false, "invocations": ["matcher", "find", "appendReplacement", "quoteReplacement", "getReplacementFor", "group", "appendTail", "toString"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}