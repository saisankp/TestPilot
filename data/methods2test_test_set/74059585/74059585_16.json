{"test_class": {"identifier": "StatementInvocationHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TraceService mockTraceService = mock(TraceService.class);", "modifier": "private final", "type": "TraceService", "declarator": "mockTraceService = mock(TraceService.class)", "var_name": "mockTraceService"}, {"original_string": "private final TraceService.Span mockTraceSpan =mock(TraceService.Span.class);", "modifier": "private final", "type": "TraceService.Span", "declarator": "mockTraceSpan =mock(TraceService.Span.class)", "var_name": "mockTraceSpan"}, {"original_string": "private final Statement mockRealStatement=mock(Statement.class);", "modifier": "private final", "type": "Statement", "declarator": "mockRealStatement=mock(Statement.class)", "var_name": "mockRealStatement"}, {"original_string": "private final PreparedStatement mockRealPreparedStatement=mock(PreparedStatement.class);", "modifier": "private final", "type": "PreparedStatement", "declarator": "mockRealPreparedStatement=mock(PreparedStatement.class)", "var_name": "mockRealPreparedStatement"}, {"original_string": "private final CallableStatement mockRealCallableStatement=mock(CallableStatement.class);", "modifier": "private final", "type": "CallableStatement", "declarator": "mockRealCallableStatement=mock(CallableStatement.class)", "var_name": "mockRealCallableStatement"}, {"original_string": "private final Proxy mockProxy=mock(Proxy.class);", "modifier": "private final", "type": "Proxy", "declarator": "mockProxy=mock(Proxy.class)", "var_name": "mockProxy"}, {"original_string": "private static final TraceOptions TRACE_OPTIONS =\n      TraceOptions.builder()\n          .setEnabled(true)\n          .setSqlScrubber(\n              new Scrubbers.Scrubber() {\n                @Override\n                public Optional<String> apply(String input) {\n                  return Optional.of(\"#scrubbed SQL#\");\n                }\n              })\n          .setUrlScrubber(Scrubbers.KEEP)\n          .build();", "modifier": "private static final", "type": "TraceOptions", "declarator": "TRACE_OPTIONS =\n      TraceOptions.builder()\n          .setEnabled(true)\n          .setSqlScrubber(\n              new Scrubbers.Scrubber() {\n                @Override\n                public Optional<String> apply(String input) {\n                  return Optional.of(\"#scrubbed SQL#\");\n                }\n              })\n          .setUrlScrubber(Scrubbers.KEEP)\n          .build()", "var_name": "TRACE_OPTIONS"}], "file": "jdbc/driver-common/src/test/java/com/google/cloud/trace/jdbc/StatementInvocationHandlerTest.java"}, "test_case": {"identifier": "invoke_fails", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void invoke_fails() throws Throwable {\n    StatementInvocationHandler statementInvocationHandler =\n        new StatementInvocationHandler(\n                    mockRealStatement, TRACE_OPTIONS, mockTraceService, Optional.<String>absent());\n    Exception expectedException = new SQLException();\n    when(mockRealStatement.execute(\"some sql text\")).thenThrow(expectedException);\n\n    try {\n      statementInvocationHandler.invoke(\n              mockProxy,\n              Statement.class.getDeclaredMethod(\"execute\", String.class),\n              new Object[]{\"some sql text\"});\n    } catch (Exception actualException) {\n      assertThat(actualException).isSameAs(expectedException);\n    }\n\n    InOrder inOrder = inOrder(mockTraceService, mockTraceSpan, mockRealStatement);\n    inOrder.verify(mockTraceService).open(\"JDBC.Statement#execute\");\n    inOrder.verify(mockRealStatement).execute(\"some sql text\");\n    inOrder.verify(mockTraceSpan).close();\n  }", "signature": "void invoke_fails()", "full_signature": "@Test public void invoke_fails()", "class_method_signature": "StatementInvocationHandlerTest.invoke_fails()", "testcase": true, "constructor": false, "invocations": ["absent", "thenThrow", "when", "execute", "invoke", "getDeclaredMethod", "isSameAs", "assertThat", "inOrder", "open", "verify", "execute", "verify", "close", "verify"]}, "focal_class": {"identifier": "StatementInvocationHandler", "superclass": "", "interfaces": "implements InvocationHandler", "fields": [{"original_string": "private final Statement statement;", "modifier": "private final", "type": "Statement", "declarator": "statement", "var_name": "statement"}, {"original_string": "private final TraceOptions traceOptions;", "modifier": "private final", "type": "TraceOptions", "declarator": "traceOptions", "var_name": "traceOptions"}, {"original_string": "private final TraceService traceService;", "modifier": "private final", "type": "TraceService", "declarator": "traceService", "var_name": "traceService"}, {"original_string": "private final Optional<String> sql;", "modifier": "private final", "type": "Optional<String>", "declarator": "sql", "var_name": "sql"}], "methods": [{"identifier": "StatementInvocationHandler", "parameters": "(\n      Statement statement,\n      TraceOptions traceOptions,\n      TraceService traceService,\n      Optional<String> sql)", "modifiers": "", "return": "", "signature": " StatementInvocationHandler(\n      Statement statement,\n      TraceOptions traceOptions,\n      TraceService traceService,\n      Optional<String> sql)", "full_signature": "  StatementInvocationHandler(\n      Statement statement,\n      TraceOptions traceOptions,\n      TraceService traceService,\n      Optional<String> sql)", "class_method_signature": "StatementInvocationHandler.StatementInvocationHandler(\n      Statement statement,\n      TraceOptions traceOptions,\n      TraceService traceService,\n      Optional<String> sql)", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(Object proxy, Method method, Object[] args)", "modifiers": "@Override public", "return": "Object", "signature": "Object invoke(Object proxy, Method method, Object[] args)", "full_signature": "@Override public Object invoke(Object proxy, Method method, Object[] args)", "class_method_signature": "StatementInvocationHandler.invoke(Object proxy, Method method, Object[] args)", "testcase": false, "constructor": false}], "file": "jdbc/driver-common/src/main/java/com/google/cloud/trace/jdbc/StatementInvocationHandler.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Object proxy, Method method, Object[] args)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    checkNotNull(method);\n\n    if (!method.getName().startsWith(\"execute\")) {\n      // Intentionally not tracing this call as no statement is executed.\n      try {\n        return method.invoke(statement, args);\n      } catch (InvocationTargetException e) {\n        // Rethrow the exception from the underlying method.\n        throw e.getCause();\n      }\n    }\n\n    Optional<String> sql;\n    if (method.getParameterTypes().length > 0 && method.getParameterTypes()[0] == String.class) {\n      sql = Optional.fromNullable((String) args[0]);\n    } else if (this.sql.isPresent()) {\n      sql = this.sql;\n    } else {\n      sql = Optional.absent();\n    }\n\n    try (TraceService.Span span = traceService.open(\"JDBC.Statement#\" + method.getName())) {\n      if (sql.isPresent()) {\n        span.annotate(Label.SQL_TEXT, traceOptions.sqlScrubber().apply(sql.get()));\n      }\n\n      try {\n        return method.invoke(statement, args);\n      } catch (InvocationTargetException e) {\n        // Rethrow the exception from the underlying method.\n        throw e.getCause();\n      }\n    }\n  }", "signature": "Object invoke(Object proxy, Method method, Object[] args)", "full_signature": "@Override public Object invoke(Object proxy, Method method, Object[] args)", "class_method_signature": "StatementInvocationHandler.invoke(Object proxy, Method method, Object[] args)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "startsWith", "getName", "invoke", "getCause", "getParameterTypes", "getParameterTypes", "fromNullable", "isPresent", "absent", "open", "getName", "isPresent", "annotate", "apply", "sqlScrubber", "get", "invoke", "getCause"]}, "repository": {"repo_id": 74059585, "url": "https://github.com/GoogleCloudPlatform/cloud-trace-java-instrumentation", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 10, "size": 141, "license": "licensed"}}