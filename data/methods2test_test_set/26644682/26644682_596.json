{"test_class": {"identifier": "ApplyPreparationExportStrategyTest", "superclass": "extends ServiceBaseTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    ApplyPreparationExportStrategy applyPreparationExportStrategy;", "modifier": "@Autowired", "type": "ApplyPreparationExportStrategy", "declarator": "applyPreparationExportStrategy", "var_name": "applyPreparationExportStrategy"}], "file": "dataprep-transformation/src/test/java/org/talend/dataprep/transformation/service/export/ApplyPreparationExportStrategyTest.java"}, "test_case": {"identifier": "shouldNotAcceptNullParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotAcceptNullParameter() throws Exception {\n        // Then\n        assertFalse(applyPreparationExportStrategy.test(null));\n    }", "signature": "void shouldNotAcceptNullParameter()", "full_signature": "@Test public void shouldNotAcceptNullParameter()", "class_method_signature": "ApplyPreparationExportStrategyTest.shouldNotAcceptNullParameter()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "test"]}, "focal_class": {"identifier": "ApplyPreparationExportStrategy", "superclass": "extends BaseSampleExportStrategy", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ApplyPreparationExportStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ApplyPreparationExportStrategy.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private CacheKeyGenerator cacheKeyGenerator;", "modifier": "@Autowired\n    private", "type": "CacheKeyGenerator", "declarator": "cacheKeyGenerator", "var_name": "cacheKeyGenerator"}, {"original_string": "@Autowired\n    private DatasetClient dataSetClient;", "modifier": "@Autowired\n    private", "type": "DatasetClient", "declarator": "dataSetClient", "var_name": "dataSetClient"}, {"original_string": "private Boolean technicianIdentityReleased = true;", "modifier": "private", "type": "Boolean", "declarator": "technicianIdentityReleased = true", "var_name": "technicianIdentityReleased"}], "methods": [{"identifier": "test", "parameters": "(ExportParameters parameters)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean test(ExportParameters parameters)", "full_signature": "@Override public boolean test(ExportParameters parameters)", "class_method_signature": "ApplyPreparationExportStrategy.test(ExportParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(ExportParameters parameters)", "modifiers": "@Override public", "return": "StreamingResponseBody", "signature": "StreamingResponseBody execute(ExportParameters parameters)", "full_signature": "@Override public StreamingResponseBody execute(ExportParameters parameters)", "class_method_signature": "ApplyPreparationExportStrategy.execute(ExportParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "executeApplyPreparation", "parameters": "(ExportParameters parameters, OutputStream outputStream)", "modifiers": "private", "return": "void", "signature": "void executeApplyPreparation(ExportParameters parameters, OutputStream outputStream)", "full_signature": "private void executeApplyPreparation(ExportParameters parameters, OutputStream outputStream)", "class_method_signature": "ApplyPreparationExportStrategy.executeApplyPreparation(ExportParameters parameters, OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "executePipeline", "parameters": "(ExportParameters parameters, OutputStream outputStream, TransformationCacheKey key,\n            String preparationId, String version, DataSet dataSet)", "modifiers": "private", "return": "void", "signature": "void executePipeline(ExportParameters parameters, OutputStream outputStream, TransformationCacheKey key,\n            String preparationId, String version, DataSet dataSet)", "full_signature": "private void executePipeline(ExportParameters parameters, OutputStream outputStream, TransformationCacheKey key,\n            String preparationId, String version, DataSet dataSet)", "class_method_signature": "ApplyPreparationExportStrategy.executePipeline(ExportParameters parameters, OutputStream outputStream, TransformationCacheKey key,\n            String preparationId, String version, DataSet dataSet)", "testcase": false, "constructor": false}, {"identifier": "getDataset", "parameters": "(ExportParameters parameters, String dataSetId)", "modifiers": "private", "return": "DataSet", "signature": "DataSet getDataset(ExportParameters parameters, String dataSetId)", "full_signature": "private DataSet getDataset(ExportParameters parameters, String dataSetId)", "class_method_signature": "ApplyPreparationExportStrategy.getDataset(ExportParameters parameters, String dataSetId)", "testcase": false, "constructor": false}], "file": "dataprep-transformation/src/main/java/org/talend/dataprep/transformation/service/export/ApplyPreparationExportStrategy.java"}, "focal_method": {"identifier": "test", "parameters": "(ExportParameters parameters)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean test(ExportParameters parameters) {\n        if (parameters == null) {\n            return false;\n        }\n        // Valid if both data set and preparation are set.\n        return parameters.getContent() == null //\n                && !StringUtils.isEmpty(parameters.getDatasetId()) //\n                && !StringUtils.isEmpty(parameters.getPreparationId());\n    }", "signature": "boolean test(ExportParameters parameters)", "full_signature": "@Override public boolean test(ExportParameters parameters)", "class_method_signature": "ApplyPreparationExportStrategy.test(ExportParameters parameters)", "testcase": false, "constructor": false, "invocations": ["getContent", "isEmpty", "getDatasetId", "isEmpty", "getPreparationId"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}