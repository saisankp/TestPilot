{"test_class": {"identifier": "ClassificationEvaluationUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "core/src/test/java/com/alibaba/alink/operator/common/evaluation/ClassificationEvaluationUtilTest.java"}, "test_case": {"identifier": "predResultLabelMapException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void predResultLabelMapException() {\n        HashSet<Object> set = new HashSet <>();\n        set.add(\"0\");\n        thrown.expect(IllegalArgumentException.class);\n        thrown.expectMessage(\"The distinct label number less than 2!\");\n        ClassificationEvaluationUtil.buildLabelIndexLabelArray(set, true, null, Types.INT);\n    }", "signature": "void predResultLabelMapException()", "full_signature": "@Test public void predResultLabelMapException()", "class_method_signature": "ClassificationEvaluationUtilTest.predResultLabelMapException()", "testcase": true, "constructor": false, "invocations": ["add", "expect", "expectMessage", "buildLabelIndexLabelArray"]}, "focal_class": {"identifier": "ClassificationEvaluationUtil", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "static final String STATISTICS_OUTPUT = \"Statistics\";", "modifier": "static final", "type": "String", "declarator": "STATISTICS_OUTPUT = \"Statistics\"", "var_name": "STATISTICS_OUTPUT"}, {"original_string": "static final Tuple2<String, Integer> WINDOW = Tuple2.of(\"window\", 0);", "modifier": "static final", "type": "Tuple2<String, Integer>", "declarator": "WINDOW = Tuple2.of(\"window\", 0)", "var_name": "WINDOW"}, {"original_string": "static final Tuple2<String, Integer> ALL = Tuple2.of(\"all\", 1);", "modifier": "static final", "type": "Tuple2<String, Integer>", "declarator": "ALL = Tuple2.of(\"all\", 1)", "var_name": "ALL"}, {"original_string": "public static int DETAIL_BIN_NUMBER = 100000;", "modifier": "public static", "type": "int", "declarator": "DETAIL_BIN_NUMBER = 100000", "var_name": "DETAIL_BIN_NUMBER"}, {"original_string": "public static int TOTAL_TRUE = 2;", "modifier": "public static", "type": "int", "declarator": "TOTAL_TRUE = 2", "var_name": "TOTAL_TRUE"}, {"original_string": "public static int TOTAL_FALSE = 3;", "modifier": "public static", "type": "int", "declarator": "TOTAL_FALSE = 3", "var_name": "TOTAL_FALSE"}, {"original_string": "public static int CUR_TRUE = 0;", "modifier": "public static", "type": "int", "declarator": "CUR_TRUE = 0", "var_name": "CUR_TRUE"}, {"original_string": "public static int CUR_FALSE = 1;", "modifier": "public static", "type": "int", "declarator": "CUR_FALSE = 1", "var_name": "CUR_FALSE"}, {"original_string": "private static int TPR = 0;", "modifier": "private static", "type": "int", "declarator": "TPR = 0", "var_name": "TPR"}, {"original_string": "private static int FPR = 1;", "modifier": "private static", "type": "int", "declarator": "FPR = 1", "var_name": "FPR"}, {"original_string": "private static int PRECISION = 2;", "modifier": "private static", "type": "int", "declarator": "PRECISION = 2", "var_name": "PRECISION"}, {"original_string": "private static int POSITIVE_RATE = 3;", "modifier": "private static", "type": "int", "declarator": "POSITIVE_RATE = 3", "var_name": "POSITIVE_RATE"}, {"original_string": "public static int RECORD_LEN = 4;", "modifier": "public static", "type": "int", "declarator": "RECORD_LEN = 4", "var_name": "RECORD_LEN"}, {"original_string": "private static double PROBABILITY_ERROR = 0.001;", "modifier": "private static", "type": "double", "declarator": "PROBABILITY_ERROR = 0.001", "var_name": "PROBABILITY_ERROR"}, {"original_string": "public static int BINARY_LABEL_NUMBER = 2;", "modifier": "public static", "type": "int", "declarator": "BINARY_LABEL_NUMBER = 2", "var_name": "BINARY_LABEL_NUMBER"}, {"original_string": "public static Tuple3<Double, Boolean, Double> middlePoint = Tuple3.of(0.5, true, Double.NaN);", "modifier": "public static", "type": "Tuple3<Double, Boolean, Double>", "declarator": "middlePoint = Tuple3.of(0.5, true, Double.NaN)", "var_name": "middlePoint"}], "methods": [{"identifier": "getBinaryDetailStatistics", "parameters": "(Row row,\n                                                                            Object[] tuple,\n                                                                            TypeInformation labelType)", "modifiers": "public static", "return": "Tuple3<Double, Boolean, Double>", "signature": "Tuple3<Double, Boolean, Double> getBinaryDetailStatistics(Row row,\n                                                                            Object[] tuple,\n                                                                            TypeInformation labelType)", "full_signature": "public static Tuple3<Double, Boolean, Double> getBinaryDetailStatistics(Row row,\n                                                                            Object[] tuple,\n                                                                            TypeInformation labelType)", "class_method_signature": "ClassificationEvaluationUtil.getBinaryDetailStatistics(Row row,\n                                                                            Object[] tuple,\n                                                                            TypeInformation labelType)", "testcase": false, "constructor": false}, {"identifier": "judgeEvaluationType", "parameters": "(Params params)", "modifiers": "static", "return": "Type", "signature": "Type judgeEvaluationType(Params params)", "full_signature": "static Type judgeEvaluationType(Params params)", "class_method_signature": "ClassificationEvaluationUtil.judgeEvaluationType(Params params)", "testcase": false, "constructor": false}, {"identifier": "buildLabelIndexLabelArray", "parameters": "(HashSet<Object> set,\n                                                                                   boolean binary,\n                                                                                   String positiveValue,\n                                                                                   TypeInformation labelType)", "modifiers": "public static", "return": "Tuple2<Map<Object, Integer>, Object[]>", "signature": "Tuple2<Map<Object, Integer>, Object[]> buildLabelIndexLabelArray(HashSet<Object> set,\n                                                                                   boolean binary,\n                                                                                   String positiveValue,\n                                                                                   TypeInformation labelType)", "full_signature": "public static Tuple2<Map<Object, Integer>, Object[]> buildLabelIndexLabelArray(HashSet<Object> set,\n                                                                                   boolean binary,\n                                                                                   String positiveValue,\n                                                                                   TypeInformation labelType)", "class_method_signature": "ClassificationEvaluationUtil.buildLabelIndexLabelArray(HashSet<Object> set,\n                                                                                   boolean binary,\n                                                                                   String positiveValue,\n                                                                                   TypeInformation labelType)", "testcase": false, "constructor": false}, {"identifier": "frequencyAvgValue", "parameters": "(ClassificationMetricComputers.BaseClassificationMetricComputer computer,\n                                            ConfusionMatrix matrix)", "modifiers": "private static", "return": "double", "signature": "double frequencyAvgValue(ClassificationMetricComputers.BaseClassificationMetricComputer computer,\n                                            ConfusionMatrix matrix)", "full_signature": "private static double frequencyAvgValue(ClassificationMetricComputers.BaseClassificationMetricComputer computer,\n                                            ConfusionMatrix matrix)", "class_method_signature": "ClassificationEvaluationUtil.frequencyAvgValue(ClassificationMetricComputers.BaseClassificationMetricComputer computer,\n                                            ConfusionMatrix matrix)", "testcase": false, "constructor": false}, {"identifier": "macroAvgValue", "parameters": "(ClassificationMetricComputers.BaseClassificationMetricComputer computer,\n                                        ConfusionMatrix matrix)", "modifiers": "private static", "return": "double", "signature": "double macroAvgValue(ClassificationMetricComputers.BaseClassificationMetricComputer computer,\n                                        ConfusionMatrix matrix)", "full_signature": "private static double macroAvgValue(ClassificationMetricComputers.BaseClassificationMetricComputer computer,\n                                        ConfusionMatrix matrix)", "class_method_signature": "ClassificationEvaluationUtil.macroAvgValue(ClassificationMetricComputers.BaseClassificationMetricComputer computer,\n                                        ConfusionMatrix matrix)", "testcase": false, "constructor": false}, {"identifier": "microAvgValue", "parameters": "(ClassificationMetricComputers.BaseClassificationMetricComputer computer,\n                                        ConfusionMatrix matrix)", "modifiers": "private static", "return": "double", "signature": "double microAvgValue(ClassificationMetricComputers.BaseClassificationMetricComputer computer,\n                                        ConfusionMatrix matrix)", "full_signature": "private static double microAvgValue(ClassificationMetricComputers.BaseClassificationMetricComputer computer,\n                                        ConfusionMatrix matrix)", "class_method_signature": "ClassificationEvaluationUtil.microAvgValue(ClassificationMetricComputers.BaseClassificationMetricComputer computer,\n                                        ConfusionMatrix matrix)", "testcase": false, "constructor": false}, {"identifier": "getAllValues", "parameters": "(ClassificationMetricComputers.BaseClassificationMetricComputer computer,\n                                 ConfusionMatrix matrix)", "modifiers": "static", "return": "double[]", "signature": "double[] getAllValues(ClassificationMetricComputers.BaseClassificationMetricComputer computer,\n                                 ConfusionMatrix matrix)", "full_signature": "static double[] getAllValues(ClassificationMetricComputers.BaseClassificationMetricComputer computer,\n                                 ConfusionMatrix matrix)", "class_method_signature": "ClassificationEvaluationUtil.getAllValues(ClassificationMetricComputers.BaseClassificationMetricComputer computer,\n                                 ConfusionMatrix matrix)", "testcase": false, "constructor": false}, {"identifier": "setLoglossParams", "parameters": "(Params params, double logLoss, long total)", "modifiers": "static", "return": "void", "signature": "void setLoglossParams(Params params, double logLoss, long total)", "full_signature": "static void setLoglossParams(Params params, double logLoss, long total)", "class_method_signature": "ClassificationEvaluationUtil.setLoglossParams(Params params, double logLoss, long total)", "testcase": false, "constructor": false}, {"identifier": "setClassificationCommonParams", "parameters": "(Params params, ConfusionMatrix confusionMatrix, String[] labels)", "modifiers": "static", "return": "void", "signature": "void setClassificationCommonParams(Params params, ConfusionMatrix confusionMatrix, String[] labels)", "full_signature": "static void setClassificationCommonParams(Params params, ConfusionMatrix confusionMatrix, String[] labels)", "class_method_signature": "ClassificationEvaluationUtil.setClassificationCommonParams(Params params, ConfusionMatrix confusionMatrix, String[] labels)", "testcase": false, "constructor": false}, {"identifier": "reduceBinaryPartitionSummary", "parameters": "(List<BinaryPartitionSummary> values, int taskId)", "modifiers": "public static", "return": "Tuple2<Boolean, long[]>", "signature": "Tuple2<Boolean, long[]> reduceBinaryPartitionSummary(List<BinaryPartitionSummary> values, int taskId)", "full_signature": "public static Tuple2<Boolean, long[]> reduceBinaryPartitionSummary(List<BinaryPartitionSummary> values, int taskId)", "class_method_signature": "ClassificationEvaluationUtil.reduceBinaryPartitionSummary(List<BinaryPartitionSummary> values, int taskId)", "testcase": false, "constructor": false}, {"identifier": "isMiddlePoint", "parameters": "(Tuple3<Double, Boolean, Double> t)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMiddlePoint(Tuple3<Double, Boolean, Double> t)", "full_signature": "public static boolean isMiddlePoint(Tuple3<Double, Boolean, Double> t)", "class_method_signature": "ClassificationEvaluationUtil.isMiddlePoint(Tuple3<Double, Boolean, Double> t)", "testcase": false, "constructor": false}, {"identifier": "updateBinaryPartitionSummary", "parameters": "(BinaryPartitionSummary statistics,\n                                                    Tuple3<Double, Boolean, Double> t)", "modifiers": "public static", "return": "void", "signature": "void updateBinaryPartitionSummary(BinaryPartitionSummary statistics,\n                                                    Tuple3<Double, Boolean, Double> t)", "full_signature": "public static void updateBinaryPartitionSummary(BinaryPartitionSummary statistics,\n                                                    Tuple3<Double, Boolean, Double> t)", "class_method_signature": "ClassificationEvaluationUtil.updateBinaryPartitionSummary(BinaryPartitionSummary statistics,\n                                                    Tuple3<Double, Boolean, Double> t)", "testcase": false, "constructor": false}, {"identifier": "updateAccurateBinaryMetricsSummary", "parameters": "(Tuple3<Double, Boolean, Double> cur,\n                                                          AccurateBinaryMetricsSummary binaryMetricsSummary,\n                                                          long[] countValues,\n                                                          double[] recordValues,\n                                                          boolean first)", "modifiers": "public static", "return": "void", "signature": "void updateAccurateBinaryMetricsSummary(Tuple3<Double, Boolean, Double> cur,\n                                                          AccurateBinaryMetricsSummary binaryMetricsSummary,\n                                                          long[] countValues,\n                                                          double[] recordValues,\n                                                          boolean first)", "full_signature": "public static void updateAccurateBinaryMetricsSummary(Tuple3<Double, Boolean, Double> cur,\n                                                          AccurateBinaryMetricsSummary binaryMetricsSummary,\n                                                          long[] countValues,\n                                                          double[] recordValues,\n                                                          boolean first)", "class_method_signature": "ClassificationEvaluationUtil.updateAccurateBinaryMetricsSummary(Tuple3<Double, Boolean, Double> cur,\n                                                          AccurateBinaryMetricsSummary binaryMetricsSummary,\n                                                          long[] countValues,\n                                                          double[] recordValues,\n                                                          boolean first)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/evaluation/ClassificationEvaluationUtil.java"}, "focal_method": {"identifier": "buildLabelIndexLabelArray", "parameters": "(HashSet<Object> set,\n                                                                                   boolean binary,\n                                                                                   String positiveValue,\n                                                                                   TypeInformation labelType)", "modifiers": "public static", "return": "Tuple2<Map<Object, Integer>, Object[]>", "body": "public static Tuple2<Map<Object, Integer>, Object[]> buildLabelIndexLabelArray(HashSet<Object> set,\n                                                                                   boolean binary,\n                                                                                   String positiveValue,\n                                                                                   TypeInformation labelType) {\n        Object[] labels = set.toArray();\n        Arrays.sort(labels, Collections.reverseOrder());\n\n        Preconditions.checkArgument(labels.length >= 2, \"The distinct label number less than 2!\");\n        Preconditions.checkArgument(!binary || labels.length == BINARY_LABEL_NUMBER,\n            \"The number of labels must be equal to 2!\");\n        Map<Object, Integer> map = new HashMap<>(labels.length);\n        if (binary && null != positiveValue) {\n            if (EvaluationUtil.labelCompare(labels[1], positiveValue, labelType)) {\n                Object tmp = labels[1];\n                labels[1] = labels[0];\n                labels[0] = tmp;\n            } else if (!EvaluationUtil.labelCompare(labels[0], positiveValue, labelType)) {\n                throw new IllegalArgumentException(\"Not contain positiveValue\");\n            }\n            map.put(labels[0], 0);\n            map.put(labels[1], 1);\n        } else {\n            for (int i = 0; i < labels.length; i++) {\n                map.put(labels[i], i);\n            }\n        }\n        return Tuple2.of(map, labels);\n    }", "signature": "Tuple2<Map<Object, Integer>, Object[]> buildLabelIndexLabelArray(HashSet<Object> set,\n                                                                                   boolean binary,\n                                                                                   String positiveValue,\n                                                                                   TypeInformation labelType)", "full_signature": "public static Tuple2<Map<Object, Integer>, Object[]> buildLabelIndexLabelArray(HashSet<Object> set,\n                                                                                   boolean binary,\n                                                                                   String positiveValue,\n                                                                                   TypeInformation labelType)", "class_method_signature": "ClassificationEvaluationUtil.buildLabelIndexLabelArray(HashSet<Object> set,\n                                                                                   boolean binary,\n                                                                                   String positiveValue,\n                                                                                   TypeInformation labelType)", "testcase": false, "constructor": false, "invocations": ["toArray", "sort", "reverseOrder", "checkArgument", "checkArgument", "labelCompare", "labelCompare", "put", "put", "put", "of"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}