{"test_class": {"identifier": "TestElasticSearchSink", "superclass": "extends AbstractElasticSearchSinkTest", "interfaces": "", "fields": [{"original_string": "private ElasticSearchSink fixture;", "modifier": "private", "type": "ElasticSearchSink", "declarator": "fixture", "var_name": "fixture"}], "file": "flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchSink.java"}, "test_case": {"identifier": "shouldFailToConfigureWithInvalidSerializerClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldFailToConfigureWithInvalidSerializerClass()\n      throws Exception {\n\n    parameters.put(SERIALIZER, \"java.lang.String\");\n    try {\n      Configurables.configure(fixture, new Context(parameters));\n    } catch (ClassCastException e) {\n      // expected\n    }\n\n    parameters.put(SERIALIZER, FakeConfigurable.class.getName());\n    try {\n      Configurables.configure(fixture, new Context(parameters));\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n  }", "signature": "void shouldFailToConfigureWithInvalidSerializerClass()", "full_signature": "@Test public void shouldFailToConfigureWithInvalidSerializerClass()", "class_method_signature": "TestElasticSearchSink.shouldFailToConfigureWithInvalidSerializerClass()", "testcase": true, "constructor": false, "invocations": ["put", "configure", "put", "getName", "configure"]}, "focal_class": {"identifier": "ElasticSearchSink", "superclass": "extends AbstractSink", "interfaces": "implements Configurable, BatchSizeSupported", "fields": [{"original_string": "private static final Logger logger = LoggerFactory\n      .getLogger(ElasticSearchSink.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n      .getLogger(ElasticSearchSink.class)", "var_name": "logger"}, {"original_string": "private boolean isLocal = false;", "modifier": "private", "type": "boolean", "declarator": "isLocal = false", "var_name": "isLocal"}, {"original_string": "private final CounterGroup counterGroup = new CounterGroup();", "modifier": "private final", "type": "CounterGroup", "declarator": "counterGroup = new CounterGroup()", "var_name": "counterGroup"}, {"original_string": "private static final int defaultBatchSize = 100;", "modifier": "private static final", "type": "int", "declarator": "defaultBatchSize = 100", "var_name": "defaultBatchSize"}, {"original_string": "private int batchSize = defaultBatchSize;", "modifier": "private", "type": "int", "declarator": "batchSize = defaultBatchSize", "var_name": "batchSize"}, {"original_string": "private long ttlMs = DEFAULT_TTL;", "modifier": "private", "type": "long", "declarator": "ttlMs = DEFAULT_TTL", "var_name": "ttlMs"}, {"original_string": "private String clusterName = DEFAULT_CLUSTER_NAME;", "modifier": "private", "type": "String", "declarator": "clusterName = DEFAULT_CLUSTER_NAME", "var_name": "clusterName"}, {"original_string": "private String indexName = DEFAULT_INDEX_NAME;", "modifier": "private", "type": "String", "declarator": "indexName = DEFAULT_INDEX_NAME", "var_name": "indexName"}, {"original_string": "private String indexType = DEFAULT_INDEX_TYPE;", "modifier": "private", "type": "String", "declarator": "indexType = DEFAULT_INDEX_TYPE", "var_name": "indexType"}, {"original_string": "private String clientType = DEFAULT_CLIENT_TYPE;", "modifier": "private", "type": "String", "declarator": "clientType = DEFAULT_CLIENT_TYPE", "var_name": "clientType"}, {"original_string": "private final Pattern pattern = Pattern.compile(TTL_REGEX,\n      Pattern.CASE_INSENSITIVE);", "modifier": "private final", "type": "Pattern", "declarator": "pattern = Pattern.compile(TTL_REGEX,\n      Pattern.CASE_INSENSITIVE)", "var_name": "pattern"}, {"original_string": "private Matcher matcher = pattern.matcher(\"\");", "modifier": "private", "type": "Matcher", "declarator": "matcher = pattern.matcher(\"\")", "var_name": "matcher"}, {"original_string": "private String[] serverAddresses = null;", "modifier": "private", "type": "String[]", "declarator": "serverAddresses = null", "var_name": "serverAddresses"}, {"original_string": "private ElasticSearchClient client = null;", "modifier": "private", "type": "ElasticSearchClient", "declarator": "client = null", "var_name": "client"}, {"original_string": "private Context elasticSearchClientContext = null;", "modifier": "private", "type": "Context", "declarator": "elasticSearchClientContext = null", "var_name": "elasticSearchClientContext"}, {"original_string": "private ElasticSearchIndexRequestBuilderFactory indexRequestFactory;", "modifier": "private", "type": "ElasticSearchIndexRequestBuilderFactory", "declarator": "indexRequestFactory", "var_name": "indexRequestFactory"}, {"original_string": "private ElasticSearchEventSerializer eventSerializer;", "modifier": "private", "type": "ElasticSearchEventSerializer", "declarator": "eventSerializer", "var_name": "eventSerializer"}, {"original_string": "private IndexNameBuilder indexNameBuilder;", "modifier": "private", "type": "IndexNameBuilder", "declarator": "indexNameBuilder", "var_name": "indexNameBuilder"}, {"original_string": "private SinkCounter sinkCounter;", "modifier": "private", "type": "SinkCounter", "declarator": "sinkCounter", "var_name": "sinkCounter"}], "methods": [{"identifier": "ElasticSearchSink", "parameters": "()", "modifiers": "public", "return": "", "signature": " ElasticSearchSink()", "full_signature": "public  ElasticSearchSink()", "class_method_signature": "ElasticSearchSink.ElasticSearchSink()", "testcase": false, "constructor": true}, {"identifier": "ElasticSearchSink", "parameters": "(boolean isLocal)", "modifiers": "@VisibleForTesting", "return": "", "signature": " ElasticSearchSink(boolean isLocal)", "full_signature": "@VisibleForTesting  ElasticSearchSink(boolean isLocal)", "class_method_signature": "ElasticSearchSink.ElasticSearchSink(boolean isLocal)", "testcase": false, "constructor": true}, {"identifier": "getServerAddresses", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "String[]", "signature": "String[] getServerAddresses()", "full_signature": "@VisibleForTesting String[] getServerAddresses()", "class_method_signature": "ElasticSearchSink.getServerAddresses()", "testcase": false, "constructor": false}, {"identifier": "getClusterName", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "String", "signature": "String getClusterName()", "full_signature": "@VisibleForTesting String getClusterName()", "class_method_signature": "ElasticSearchSink.getClusterName()", "testcase": false, "constructor": false}, {"identifier": "getIndexName", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "String", "signature": "String getIndexName()", "full_signature": "@VisibleForTesting String getIndexName()", "class_method_signature": "ElasticSearchSink.getIndexName()", "testcase": false, "constructor": false}, {"identifier": "getIndexType", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "String", "signature": "String getIndexType()", "full_signature": "@VisibleForTesting String getIndexType()", "class_method_signature": "ElasticSearchSink.getIndexType()", "testcase": false, "constructor": false}, {"identifier": "getTTLMs", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "long", "signature": "long getTTLMs()", "full_signature": "@VisibleForTesting long getTTLMs()", "class_method_signature": "ElasticSearchSink.getTTLMs()", "testcase": false, "constructor": false}, {"identifier": "getEventSerializer", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "ElasticSearchEventSerializer", "signature": "ElasticSearchEventSerializer getEventSerializer()", "full_signature": "@VisibleForTesting ElasticSearchEventSerializer getEventSerializer()", "class_method_signature": "ElasticSearchSink.getEventSerializer()", "testcase": false, "constructor": false}, {"identifier": "getIndexNameBuilder", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "IndexNameBuilder", "signature": "IndexNameBuilder getIndexNameBuilder()", "full_signature": "@VisibleForTesting IndexNameBuilder getIndexNameBuilder()", "class_method_signature": "ElasticSearchSink.getIndexNameBuilder()", "testcase": false, "constructor": false}, {"identifier": "getBatchSize", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getBatchSize()", "full_signature": "@Override public long getBatchSize()", "class_method_signature": "ElasticSearchSink.getBatchSize()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "()", "modifiers": "@Override public", "return": "Status", "signature": "Status process()", "full_signature": "@Override public Status process()", "class_method_signature": "ElasticSearchSink.process()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Context context)", "full_signature": "@Override public void configure(Context context)", "class_method_signature": "ElasticSearchSink.configure(Context context)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "ElasticSearchSink.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "ElasticSearchSink.stop()", "testcase": false, "constructor": false}, {"identifier": "parseTTL", "parameters": "(String ttl)", "modifiers": "private", "return": "long", "signature": "long parseTTL(String ttl)", "full_signature": "private long parseTTL(String ttl)", "class_method_signature": "ElasticSearchSink.parseTTL(String ttl)", "testcase": false, "constructor": false}], "file": "flume-ng-sinks/flume-ng-elasticsearch-sink/src/main/java/org/apache/flume/sink/elasticsearch/ElasticSearchSink.java"}, "focal_method": {"identifier": "configure", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void configure(Context context) {\n    if (!isLocal) {\n      if (StringUtils.isNotBlank(context.getString(HOSTNAMES))) {\n        serverAddresses = StringUtils.deleteWhitespace(\n            context.getString(HOSTNAMES)).split(\",\");\n      }\n      Preconditions.checkState(serverAddresses != null\n          && serverAddresses.length > 0, \"Missing Param:\" + HOSTNAMES);\n    }\n\n    if (StringUtils.isNotBlank(context.getString(INDEX_NAME))) {\n      this.indexName = context.getString(INDEX_NAME);\n    }\n\n    if (StringUtils.isNotBlank(context.getString(INDEX_TYPE))) {\n      this.indexType = context.getString(INDEX_TYPE);\n    }\n\n    if (StringUtils.isNotBlank(context.getString(CLUSTER_NAME))) {\n      this.clusterName = context.getString(CLUSTER_NAME);\n    }\n\n    if (StringUtils.isNotBlank(context.getString(BATCH_SIZE))) {\n      this.batchSize = Integer.parseInt(context.getString(BATCH_SIZE));\n    }\n\n    if (StringUtils.isNotBlank(context.getString(TTL))) {\n      this.ttlMs = parseTTL(context.getString(TTL));\n      Preconditions.checkState(ttlMs > 0, TTL\n          + \" must be greater than 0 or not set.\");\n    }\n\n    if (StringUtils.isNotBlank(context.getString(CLIENT_TYPE))) {\n      clientType = context.getString(CLIENT_TYPE);\n    }\n\n    elasticSearchClientContext = new Context();\n    elasticSearchClientContext.putAll(context.getSubProperties(CLIENT_PREFIX));\n\n    String serializerClazz = DEFAULT_SERIALIZER_CLASS;\n    if (StringUtils.isNotBlank(context.getString(SERIALIZER))) {\n      serializerClazz = context.getString(SERIALIZER);\n    }\n\n    Context serializerContext = new Context();\n    serializerContext.putAll(context.getSubProperties(SERIALIZER_PREFIX));\n\n    try {\n      @SuppressWarnings(\"unchecked\")\n      Class<? extends Configurable> clazz = (Class<? extends Configurable>) Class\n          .forName(serializerClazz);\n      Configurable serializer = clazz.newInstance();\n\n      if (serializer instanceof ElasticSearchIndexRequestBuilderFactory) {\n        indexRequestFactory\n            = (ElasticSearchIndexRequestBuilderFactory) serializer;\n        indexRequestFactory.configure(serializerContext);\n      } else if (serializer instanceof ElasticSearchEventSerializer) {\n        eventSerializer = (ElasticSearchEventSerializer) serializer;\n        eventSerializer.configure(serializerContext);\n      } else {\n        throw new IllegalArgumentException(serializerClazz\n            + \" is not an ElasticSearchEventSerializer\");\n      }\n    } catch (Exception e) {\n      logger.error(\"Could not instantiate event serializer.\", e);\n      Throwables.propagate(e);\n    }\n\n    if (sinkCounter == null) {\n      sinkCounter = new SinkCounter(getName());\n    }\n\n    String indexNameBuilderClass = DEFAULT_INDEX_NAME_BUILDER_CLASS;\n    if (StringUtils.isNotBlank(context.getString(INDEX_NAME_BUILDER))) {\n      indexNameBuilderClass = context.getString(INDEX_NAME_BUILDER);\n    }\n\n    Context indexnameBuilderContext = new Context();\n    serializerContext.putAll(\n            context.getSubProperties(INDEX_NAME_BUILDER_PREFIX));\n\n    try {\n      @SuppressWarnings(\"unchecked\")\n      Class<? extends IndexNameBuilder> clazz\n              = (Class<? extends IndexNameBuilder>) Class\n              .forName(indexNameBuilderClass);\n      indexNameBuilder = clazz.newInstance();\n      indexnameBuilderContext.put(INDEX_NAME, indexName);\n      indexNameBuilder.configure(indexnameBuilderContext);\n    } catch (Exception e) {\n      logger.error(\"Could not instantiate index name builder.\", e);\n      Throwables.propagate(e);\n    }\n\n    if (sinkCounter == null) {\n      sinkCounter = new SinkCounter(getName());\n    }\n\n    Preconditions.checkState(StringUtils.isNotBlank(indexName),\n        \"Missing Param:\" + INDEX_NAME);\n    Preconditions.checkState(StringUtils.isNotBlank(indexType),\n        \"Missing Param:\" + INDEX_TYPE);\n    Preconditions.checkState(StringUtils.isNotBlank(clusterName),\n        \"Missing Param:\" + CLUSTER_NAME);\n    Preconditions.checkState(batchSize >= 1, BATCH_SIZE\n        + \" must be greater than 0\");\n  }", "signature": "void configure(Context context)", "full_signature": "@Override public void configure(Context context)", "class_method_signature": "ElasticSearchSink.configure(Context context)", "testcase": false, "constructor": false, "invocations": ["isNotBlank", "getString", "split", "deleteWhitespace", "getString", "checkState", "isNotBlank", "getString", "getString", "isNotBlank", "getString", "getString", "isNotBlank", "getString", "getString", "isNotBlank", "getString", "parseInt", "getString", "isNotBlank", "getString", "parseTTL", "getString", "checkState", "isNotBlank", "getString", "getString", "putAll", "getSubProperties", "isNotBlank", "getString", "getString", "putAll", "getSubProperties", "forName", "newInstance", "configure", "configure", "error", "propagate", "getName", "isNotBlank", "getString", "getString", "putAll", "getSubProperties", "forName", "newInstance", "put", "configure", "error", "propagate", "getName", "checkState", "isNotBlank", "checkState", "isNotBlank", "checkState", "isNotBlank", "checkState"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}