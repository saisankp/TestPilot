{"test_class": {"identifier": "PanZoomTest", "superclass": "extends AndroidplotTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    LayoutManager layoutManager;", "modifier": "@Mock", "type": "LayoutManager", "declarator": "layoutManager", "var_name": "layoutManager"}, {"original_string": "@Mock\n    XYPlot xyPlot;", "modifier": "@Mock", "type": "XYPlot", "declarator": "xyPlot", "var_name": "xyPlot"}, {"original_string": "@Mock\n    TypedArray typedArray;", "modifier": "@Mock", "type": "TypedArray", "declarator": "typedArray", "var_name": "typedArray"}, {"original_string": "@Mock\n    XYSeriesRegistry seriesRegistry;", "modifier": "@Mock", "type": "XYSeriesRegistry", "declarator": "seriesRegistry", "var_name": "seriesRegistry"}, {"original_string": "RectRegion bounds = new RectRegion(0, 100, 0, 100);", "modifier": "", "type": "RectRegion", "declarator": "bounds = new RectRegion(0, 100, 0, 100)", "var_name": "bounds"}], "file": "androidplot-core/src/test/java/com/androidplot/xy/PanZoomTest.java"}, "test_case": {"identifier": "testZoom", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testZoom() {\n        xyPlot = spy(new InstrumentedXYPlot(getContext()));\n        xyPlot.setDomainBoundaries(0, 100, BoundaryMode.FIXED);\n        xyPlot.setRangeBoundaries(0, 100, BoundaryMode.FIXED);\n        xyPlot.redraw();\n\n        PanZoom panZoom = spy(new PanZoom(xyPlot, PanZoom.Pan.BOTH, PanZoom.Zoom.SCALE));\n\n        // cap our pan/zoom boundaries:\n        xyPlot.getOuterLimits().set(0, 100, 0, 100);\n\n        panZoom.setFingersRect(new RectF(0, 0, 20, 20));\n\n        InOrder inOrder = inOrder(xyPlot);\n        inOrder.verify(xyPlot).setDomainBoundaries(0, 100, BoundaryMode.FIXED);\n\n        // should result in a 2x zoom on domain centerpoint:\n        panZoom.zoom(TestUtils.newPointerDownEvent(0, 0, 40, 40));\n        inOrder.verify(xyPlot).setDomainBoundaries(25f, 75f, BoundaryMode.FIXED);\n        inOrder.verify(xyPlot).setRangeBoundaries(25f, 75f, BoundaryMode.FIXED);\n        inOrder.verify(xyPlot).redraw();\n\n        // should result in another 2x zoom on domain centerpoint:\n        panZoom.zoom(TestUtils.newPointerDownEvent(0, 0, 80, 80));\n        inOrder.verify(xyPlot).setDomainBoundaries(37.5f, 62.5f, BoundaryMode.FIXED);\n        inOrder.verify(xyPlot).setRangeBoundaries(37.5f, 62.5f, BoundaryMode.FIXED);\n        inOrder.verify(xyPlot).redraw();\n\n        // should zoom out and take us back to the original bounds:\n        panZoom.zoom(TestUtils.newPointerDownEvent(0, 0, 20, 20));\n        inOrder.verify(xyPlot).setDomainBoundaries(0f, 100f, BoundaryMode.FIXED);\n        inOrder.verify(xyPlot).setRangeBoundaries(0f, 100f, BoundaryMode.FIXED);\n        inOrder.verify(xyPlot).redraw();\n\n        // zooming out past capped bounds should not result in any change:\n        panZoom.zoom(TestUtils.newPointerDownEvent(0, 0, 1, 1));\n        inOrder.verify(xyPlot).setDomainBoundaries(0f, 100f, BoundaryMode.FIXED);\n        inOrder.verify(xyPlot).setRangeBoundaries(0f, 100f, BoundaryMode.FIXED);\n        // TODO: if nothing changed, then why bother redrawing??\n        inOrder.verify(xyPlot).redraw();\n\n        // redraw should not be called again\n        inOrder.verify(xyPlot, never()).redraw();\n\n        // make sure no panning took place during these zoom ops:\n        verify(panZoom, never()).pan(any(MotionEvent.class));\n\n    }", "signature": "void testZoom()", "full_signature": "@Test public void testZoom()", "class_method_signature": "PanZoomTest.testZoom()", "testcase": true, "constructor": false, "invocations": ["spy", "getContext", "setDomainBoundaries", "setRangeBoundaries", "redraw", "spy", "set", "getOuterLimits", "setFingersRect", "inOrder", "setDomainBoundaries", "verify", "zoom", "newPointerDownEvent", "setDomainBoundaries", "verify", "setRangeBoundaries", "verify", "redraw", "verify", "zoom", "newPointerDownEvent", "setDomainBoundaries", "verify", "setRangeBoundaries", "verify", "redraw", "verify", "zoom", "newPointerDownEvent", "setDomainBoundaries", "verify", "setRangeBoundaries", "verify", "redraw", "verify", "zoom", "newPointerDownEvent", "setDomainBoundaries", "verify", "setRangeBoundaries", "verify", "redraw", "verify", "redraw", "verify", "never", "pan", "verify", "never", "any"]}, "focal_class": {"identifier": "PanZoom", "superclass": "", "interfaces": "implements View.OnTouchListener", "fields": [{"original_string": "protected static final float MIN_DIST_2_FING = 5f;", "modifier": "protected static final", "type": "float", "declarator": "MIN_DIST_2_FING = 5f", "var_name": "MIN_DIST_2_FING"}, {"original_string": "protected static final int FIRST_FINGER = 0;", "modifier": "protected static final", "type": "int", "declarator": "FIRST_FINGER = 0", "var_name": "FIRST_FINGER"}, {"original_string": "protected static final int SECOND_FINGER = 1;", "modifier": "protected static final", "type": "int", "declarator": "SECOND_FINGER = 1", "var_name": "SECOND_FINGER"}, {"original_string": "private XYPlot plot;", "modifier": "private", "type": "XYPlot", "declarator": "plot", "var_name": "plot"}, {"original_string": "private Pan pan;", "modifier": "private", "type": "Pan", "declarator": "pan", "var_name": "pan"}, {"original_string": "private Zoom zoom;", "modifier": "private", "type": "Zoom", "declarator": "zoom", "var_name": "zoom"}, {"original_string": "private ZoomLimit zoomLimit;", "modifier": "private", "type": "ZoomLimit", "declarator": "zoomLimit", "var_name": "zoomLimit"}, {"original_string": "private boolean isEnabled = true;", "modifier": "private", "type": "boolean", "declarator": "isEnabled = true", "var_name": "isEnabled"}, {"original_string": "private DragState dragState = DragState.NONE;", "modifier": "private", "type": "DragState", "declarator": "dragState = DragState.NONE", "var_name": "dragState"}, {"original_string": "private PointF firstFingerPos;", "modifier": "private", "type": "PointF", "declarator": "firstFingerPos", "var_name": "firstFingerPos"}, {"original_string": "protected RectF fingersRect;", "modifier": "protected", "type": "RectF", "declarator": "fingersRect", "var_name": "fingersRect"}, {"original_string": "private View.OnTouchListener delegate;", "modifier": "private", "type": "View.OnTouchListener", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private State state = new State();", "modifier": "private", "type": "State", "declarator": "state = new State()", "var_name": "state"}], "methods": [{"identifier": "PanZoom", "parameters": "(@NonNull XYPlot plot, Pan pan, Zoom zoom)", "modifiers": "protected", "return": "", "signature": " PanZoom(@NonNull XYPlot plot, Pan pan, Zoom zoom)", "full_signature": "protected  PanZoom(@NonNull XYPlot plot, Pan pan, Zoom zoom)", "class_method_signature": "PanZoom.PanZoom(@NonNull XYPlot plot, Pan pan, Zoom zoom)", "testcase": false, "constructor": true}, {"identifier": "PanZoom", "parameters": "(@NonNull XYPlot plot, Pan pan, Zoom zoom, ZoomLimit limit)", "modifiers": "protected", "return": "", "signature": " PanZoom(@NonNull XYPlot plot, Pan pan, Zoom zoom, ZoomLimit limit)", "full_signature": "protected  PanZoom(@NonNull XYPlot plot, Pan pan, Zoom zoom, ZoomLimit limit)", "class_method_signature": "PanZoom.PanZoom(@NonNull XYPlot plot, Pan pan, Zoom zoom, ZoomLimit limit)", "testcase": false, "constructor": true}, {"identifier": "getState", "parameters": "()", "modifiers": "public", "return": "State", "signature": "State getState()", "full_signature": "public State getState()", "class_method_signature": "PanZoom.getState()", "testcase": false, "constructor": false}, {"identifier": "setState", "parameters": "(@NonNull State state)", "modifiers": "public", "return": "void", "signature": "void setState(@NonNull State state)", "full_signature": "public void setState(@NonNull State state)", "class_method_signature": "PanZoom.setState(@NonNull State state)", "testcase": false, "constructor": false}, {"identifier": "adjustRangeBoundary", "parameters": "(Number lower, Number upper,  BoundaryMode mode)", "modifiers": "protected", "return": "void", "signature": "void adjustRangeBoundary(Number lower, Number upper,  BoundaryMode mode)", "full_signature": "protected void adjustRangeBoundary(Number lower, Number upper,  BoundaryMode mode)", "class_method_signature": "PanZoom.adjustRangeBoundary(Number lower, Number upper,  BoundaryMode mode)", "testcase": false, "constructor": false}, {"identifier": "adjustDomainBoundary", "parameters": "(Number lower, Number upper, BoundaryMode mode)", "modifiers": "protected", "return": "void", "signature": "void adjustDomainBoundary(Number lower, Number upper, BoundaryMode mode)", "full_signature": "protected void adjustDomainBoundary(Number lower, Number upper, BoundaryMode mode)", "class_method_signature": "PanZoom.adjustDomainBoundary(Number lower, Number upper, BoundaryMode mode)", "testcase": false, "constructor": false}, {"identifier": "attach", "parameters": "(@NonNull XYPlot plot)", "modifiers": "public static", "return": "PanZoom", "signature": "PanZoom attach(@NonNull XYPlot plot)", "full_signature": "public static PanZoom attach(@NonNull XYPlot plot)", "class_method_signature": "PanZoom.attach(@NonNull XYPlot plot)", "testcase": false, "constructor": false}, {"identifier": "attach", "parameters": "(@NonNull XYPlot plot, @NonNull Pan pan, @NonNull Zoom zoom)", "modifiers": "public static", "return": "PanZoom", "signature": "PanZoom attach(@NonNull XYPlot plot, @NonNull Pan pan, @NonNull Zoom zoom)", "full_signature": "public static PanZoom attach(@NonNull XYPlot plot, @NonNull Pan pan, @NonNull Zoom zoom)", "class_method_signature": "PanZoom.attach(@NonNull XYPlot plot, @NonNull Pan pan, @NonNull Zoom zoom)", "testcase": false, "constructor": false}, {"identifier": "attach", "parameters": "(@NonNull XYPlot plot, @NonNull Pan pan, @NonNull Zoom zoom, @NonNull ZoomLimit limit)", "modifiers": "public static", "return": "PanZoom", "signature": "PanZoom attach(@NonNull XYPlot plot, @NonNull Pan pan, @NonNull Zoom zoom, @NonNull ZoomLimit limit)", "full_signature": "public static PanZoom attach(@NonNull XYPlot plot, @NonNull Pan pan, @NonNull Zoom zoom, @NonNull ZoomLimit limit)", "class_method_signature": "PanZoom.attach(@NonNull XYPlot plot, @NonNull Pan pan, @NonNull Zoom zoom, @NonNull ZoomLimit limit)", "testcase": false, "constructor": false}, {"identifier": "isEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEnabled()", "full_signature": "public boolean isEnabled()", "class_method_signature": "PanZoom.isEnabled()", "testcase": false, "constructor": false}, {"identifier": "setEnabled", "parameters": "(boolean enabled)", "modifiers": "public", "return": "void", "signature": "void setEnabled(boolean enabled)", "full_signature": "public void setEnabled(boolean enabled)", "class_method_signature": "PanZoom.setEnabled(boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "onTouch", "parameters": "(final View view, final MotionEvent event)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean onTouch(final View view, final MotionEvent event)", "full_signature": "@Override public boolean onTouch(final View view, final MotionEvent event)", "class_method_signature": "PanZoom.onTouch(final View view, final MotionEvent event)", "testcase": false, "constructor": false}, {"identifier": "fingerDistance", "parameters": "(float firstFingerX, float firstFingerY, float secondFingerX, float secondFingerY)", "modifiers": "protected", "return": "RectF", "signature": "RectF fingerDistance(float firstFingerX, float firstFingerY, float secondFingerX, float secondFingerY)", "full_signature": "protected RectF fingerDistance(float firstFingerX, float firstFingerY, float secondFingerX, float secondFingerY)", "class_method_signature": "PanZoom.fingerDistance(float firstFingerX, float firstFingerY, float secondFingerX, float secondFingerY)", "testcase": false, "constructor": false}, {"identifier": "fingerDistance", "parameters": "(final MotionEvent evt)", "modifiers": "protected", "return": "RectF", "signature": "RectF fingerDistance(final MotionEvent evt)", "full_signature": "protected RectF fingerDistance(final MotionEvent evt)", "class_method_signature": "PanZoom.fingerDistance(final MotionEvent evt)", "testcase": false, "constructor": false}, {"identifier": "pan", "parameters": "(final MotionEvent motionEvent)", "modifiers": "protected", "return": "void", "signature": "void pan(final MotionEvent motionEvent)", "full_signature": "protected void pan(final MotionEvent motionEvent)", "class_method_signature": "PanZoom.pan(final MotionEvent motionEvent)", "testcase": false, "constructor": false}, {"identifier": "calculatePan", "parameters": "(final PointF oldFirstFinger, Region bounds, final boolean horizontal)", "modifiers": "protected", "return": "void", "signature": "void calculatePan(final PointF oldFirstFinger, Region bounds, final boolean horizontal)", "full_signature": "protected void calculatePan(final PointF oldFirstFinger, Region bounds, final boolean horizontal)", "class_method_signature": "PanZoom.calculatePan(final PointF oldFirstFinger, Region bounds, final boolean horizontal)", "testcase": false, "constructor": false}, {"identifier": "isValidScale", "parameters": "(float scale)", "modifiers": "protected", "return": "boolean", "signature": "boolean isValidScale(float scale)", "full_signature": "protected boolean isValidScale(float scale)", "class_method_signature": "PanZoom.isValidScale(float scale)", "testcase": false, "constructor": false}, {"identifier": "zoom", "parameters": "(final MotionEvent motionEvent)", "modifiers": "protected", "return": "void", "signature": "void zoom(final MotionEvent motionEvent)", "full_signature": "protected void zoom(final MotionEvent motionEvent)", "class_method_signature": "PanZoom.zoom(final MotionEvent motionEvent)", "testcase": false, "constructor": false}, {"identifier": "calculateZoom", "parameters": "(RectF newRect, float scale, boolean isHorizontal)", "modifiers": "protected", "return": "void", "signature": "void calculateZoom(RectF newRect, float scale, boolean isHorizontal)", "full_signature": "protected void calculateZoom(RectF newRect, float scale, boolean isHorizontal)", "class_method_signature": "PanZoom.calculateZoom(RectF newRect, float scale, boolean isHorizontal)", "testcase": false, "constructor": false}, {"identifier": "getPan", "parameters": "()", "modifiers": "public", "return": "Pan", "signature": "Pan getPan()", "full_signature": "public Pan getPan()", "class_method_signature": "PanZoom.getPan()", "testcase": false, "constructor": false}, {"identifier": "setPan", "parameters": "(Pan pan)", "modifiers": "public", "return": "void", "signature": "void setPan(Pan pan)", "full_signature": "public void setPan(Pan pan)", "class_method_signature": "PanZoom.setPan(Pan pan)", "testcase": false, "constructor": false}, {"identifier": "getZoom", "parameters": "()", "modifiers": "public", "return": "Zoom", "signature": "Zoom getZoom()", "full_signature": "public Zoom getZoom()", "class_method_signature": "PanZoom.getZoom()", "testcase": false, "constructor": false}, {"identifier": "setZoom", "parameters": "(Zoom zoom)", "modifiers": "public", "return": "void", "signature": "void setZoom(Zoom zoom)", "full_signature": "public void setZoom(Zoom zoom)", "class_method_signature": "PanZoom.setZoom(Zoom zoom)", "testcase": false, "constructor": false}, {"identifier": "getZoomLimit", "parameters": "()", "modifiers": "public", "return": "ZoomLimit", "signature": "ZoomLimit getZoomLimit()", "full_signature": "public ZoomLimit getZoomLimit()", "class_method_signature": "PanZoom.getZoomLimit()", "testcase": false, "constructor": false}, {"identifier": "setZoomLimit", "parameters": "(ZoomLimit zoomLimit)", "modifiers": "public", "return": "void", "signature": "void setZoomLimit(ZoomLimit zoomLimit)", "full_signature": "public void setZoomLimit(ZoomLimit zoomLimit)", "class_method_signature": "PanZoom.setZoomLimit(ZoomLimit zoomLimit)", "testcase": false, "constructor": false}, {"identifier": "getDelegate", "parameters": "()", "modifiers": "public", "return": "View.OnTouchListener", "signature": "View.OnTouchListener getDelegate()", "full_signature": "public View.OnTouchListener getDelegate()", "class_method_signature": "PanZoom.getDelegate()", "testcase": false, "constructor": false}, {"identifier": "setDelegate", "parameters": "(View.OnTouchListener delegate)", "modifiers": "public", "return": "void", "signature": "void setDelegate(View.OnTouchListener delegate)", "full_signature": "public void setDelegate(View.OnTouchListener delegate)", "class_method_signature": "PanZoom.setDelegate(View.OnTouchListener delegate)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "PanZoom.reset()", "testcase": false, "constructor": false}, {"identifier": "getFingersRect", "parameters": "()", "modifiers": "protected", "return": "RectF", "signature": "RectF getFingersRect()", "full_signature": "protected RectF getFingersRect()", "class_method_signature": "PanZoom.getFingersRect()", "testcase": false, "constructor": false}, {"identifier": "setFingersRect", "parameters": "(RectF fingersRect)", "modifiers": "protected", "return": "void", "signature": "void setFingersRect(RectF fingersRect)", "full_signature": "protected void setFingersRect(RectF fingersRect)", "class_method_signature": "PanZoom.setFingersRect(RectF fingersRect)", "testcase": false, "constructor": false}], "file": "androidplot-core/src/main/java/com/androidplot/xy/PanZoom.java"}, "focal_method": {"identifier": "zoom", "parameters": "(final MotionEvent motionEvent)", "modifiers": "protected", "return": "void", "body": "protected void zoom(final MotionEvent motionEvent) {\n        if (zoom == Zoom.NONE) {\n            return;\n        }\n        final RectF oldFingersRect = getFingersRect();\n        final RectF newFingersRect = fingerDistance(motionEvent);\n        setFingersRect(newFingersRect);\n        if(oldFingersRect == null || RectFUtils.areIdentical(oldFingersRect, newFingersRect)) {\n            // zooming gesture has not happened yet so skip:\n            return;\n        }\n        RectF newRect = new RectF();\n\n        float scaleX = 1;\n        float scaleY = 1;\n        switch (zoom) {\n            case STRETCH_HORIZONTAL:\n                scaleX = oldFingersRect.width() / getFingersRect().width();\n                if (!isValidScale(scaleX)) {\n                    return;\n                }\n                break;\n            case STRETCH_VERTICAL:\n                scaleY = oldFingersRect.height() / getFingersRect().height();\n                if (!isValidScale(scaleY)) {\n                    return;\n                }\n                break;\n            case STRETCH_BOTH:\n                scaleX = oldFingersRect.width() / getFingersRect().width();\n                scaleY = oldFingersRect.height() / getFingersRect().height();\n                if (!isValidScale(scaleX) || !isValidScale(scaleY)) {\n                    return;\n                }\n                break;\n            case SCALE:\n                float sc1 = (float) Math.hypot(oldFingersRect.height(), oldFingersRect.width());\n                float sc2 = (float) Math.hypot(getFingersRect().height(), getFingersRect().width());\n                float sc = sc1 / sc2;\n                scaleX = sc;\n                scaleY = sc;\n                if (!isValidScale(scaleX) || !isValidScale(scaleY)) {\n                    return;\n                }\n                break;\n        }\n\n        if (EnumSet.of(\n                Zoom.STRETCH_HORIZONTAL,\n                Zoom.STRETCH_BOTH,\n                Zoom.SCALE).contains(zoom)) {\n            calculateZoom(newRect, scaleX, true);\n            adjustDomainBoundary(newRect.left, newRect.right, BoundaryMode.FIXED);\n        }\n        if (EnumSet.of(\n                Zoom.STRETCH_VERTICAL,\n                Zoom.STRETCH_BOTH,\n                Zoom.SCALE).contains(zoom)) {\n            calculateZoom(newRect, scaleY, false);\n            adjustRangeBoundary(newRect.top, newRect.bottom, BoundaryMode.FIXED);\n        }\n        plot.redraw();\n    }", "signature": "void zoom(final MotionEvent motionEvent)", "full_signature": "protected void zoom(final MotionEvent motionEvent)", "class_method_signature": "PanZoom.zoom(final MotionEvent motionEvent)", "testcase": false, "constructor": false, "invocations": ["getFingersRect", "fingerDistance", "setFingersRect", "areIdentical", "width", "width", "getFingersRect", "isValidScale", "height", "height", "getFingersRect", "isValidScale", "width", "width", "getFingersRect", "height", "height", "getFingersRect", "isValidScale", "isValidScale", "hypot", "height", "width", "hypot", "height", "getFingersRect", "width", "getFingersRect", "isValidScale", "isValidScale", "contains", "of", "calculateZoom", "adjustDomainBoundary", "contains", "of", "calculateZoom", "adjustRangeBoundary", "redraw"]}, "repository": {"repo_id": 1424783, "url": "https://github.com/halfhp/androidplot", "language": "Java", "is_fork": false, "fork_count": 129, "stargazer_count": 369, "size": 7178, "license": "licensed"}}