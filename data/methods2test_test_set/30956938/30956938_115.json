{"test_class": {"identifier": "ExcelSpreadsheetReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SpreadsheetReader spreadsheetReader;", "modifier": "private", "type": "SpreadsheetReader", "declarator": "spreadsheetReader", "var_name": "spreadsheetReader"}, {"original_string": "private String[] testFiles = new String[] {\"/test-spreadsheet.xlsx\" , \"/test-spreadsheet.xls\"};", "modifier": "private", "type": "String[]", "declarator": "testFiles = new String[] {\"/test-spreadsheet.xlsx\" , \"/test-spreadsheet.xls\"}", "var_name": "testFiles"}], "file": "taverna-spreadsheet-import-activity/src/test/java/org/apache/taverna/activities/spreadsheet/ExcelSpreadsheetReaderTest.java"}, "test_case": {"identifier": "testIgnoreBlankRows", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIgnoreBlankRows() throws Exception {\n\t\tfor (int i = 0; i < testFiles.length; i++) {\n\t\t\tfinal List<Integer> rows = new ArrayList<Integer>(Arrays.asList(0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14));\n\t\t\tspreadsheetReader.read(getClass().getResourceAsStream(testFiles[i]), new Range(0, -1), new Range(0, 4), true,\n\t\t\t\t\tnew SpreadsheetRowProcessor() {\n\n\t\t\t\t\t\tpublic void processRow(int rowIndex, SortedMap<Integer, String> row) {\n\t\t\t\t\t\t\tassertTrue(rows.remove((Integer) rowIndex));\n\t\t\t\t\t\t\tList<Integer> columns = new ArrayList<Integer>(Arrays.asList(0, 1, 2,\n\t\t\t\t\t\t\t\t\t3, 4));\n\t\t\t\t\t\t\tfor (Entry<Integer, String> cell : row.entrySet()) {\n\t\t\t\t\t\t\t\tassertTrue(columns.remove(cell.getKey()));\n\t\t\t\t\t\t\t\tif (rowIndex == 0) {\n\t\t\t\t\t\t\t\t\tif (cell.getKey().equals(0)) {\n\t\t\t\t\t\t\t\t\t\tassertEquals(\"A\", cell.getValue());\n\t\t\t\t\t\t\t\t\t} else if (cell.getKey().equals(1)) {\n\t\t\t\t\t\t\t\t\t\tassertEquals(\"5.0\", cell.getValue());\n\t\t\t\t\t\t\t\t\t} else if (cell.getKey().equals(2)) {\n\t\t\t\t\t\t\t\t\t\tassertEquals(\"C\", cell.getValue());\n\t\t\t\t\t\t\t\t\t} else if (cell.getKey().equals(3)) {\n\t\t\t\t\t\t\t\t\t\tassertEquals(\"1.0\", cell.getValue());\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tassertNull(cell.getValue());\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (rowIndex == 1) {\n\t\t\t\t\t\t\t\t\tif (cell.getKey().equals(0)) {\n\t\t\t\t\t\t\t\t\t\tassertEquals(\"A\", cell.getValue());\n\t\t\t\t\t\t\t\t\t} else if (cell.getKey().equals(1)) {\n\t\t\t\t\t\t\t\t\t\tassertEquals(\"5.0\", cell.getValue());\n\t\t\t\t\t\t\t\t\t} else if (cell.getKey().equals(2)) {\n\t\t\t\t\t\t\t\t\t\tassertEquals(\"C\", cell.getValue());\n\t\t\t\t\t\t\t\t\t} else if (cell.getKey().equals(3)) {\n\t\t\t\t\t\t\t\t\t\tassertEquals(\"1.0\", cell.getValue());\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tassertNull(cell.getValue());\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (rowIndex == 2) {\n\t\t\t\t\t\t\t\t\tif (cell.getKey().equals(0)) {\n\t\t\t\t\t\t\t\t\t\tassertEquals(\"true\", cell.getValue());\n\t\t\t\t\t\t\t\t\t} else if (cell.getKey().equals(1)) {\n\t\t\t\t\t\t\t\t\t\tassertTrue(\"Unexpected date format: \" + cell.getValue(), cell.getValue().matches(\"Mon Jun 15 00:00:00 ....? 2009\"));\n\t\t\t\t\t\t\t\t\t} else if (cell.getKey().equals(2)) {\n\t\t\t\t\t\t\t\t\t\tassertNull(cell.getValue());\n\t\t\t\t\t\t\t\t\t} else if (cell.getKey().equals(3)) {\n\t\t\t\t\t\t\t\t\t\tassertEquals(\"2.0\", cell.getValue());\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tassertNull(cell.getValue());\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (rowIndex == 3 || rowIndex == 4) {\n\t\t\t\t\t\t\t\t\tif (cell.getKey().equals(4)) {\n\t\t\t\t\t\t\t\t\t\tassertNull(cell.getValue());\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tassertEquals(\"X\", cell.getValue());\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (rowIndex == 9 || rowIndex == 10 || rowIndex == 11\n\t\t\t\t\t\t\t\t\t\t|| rowIndex == 12 || rowIndex == 13 || rowIndex == 14) {\n\t\t\t\t\t\t\t\t\tif (cell.getKey().equals(4)) {\n\t\t\t\t\t\t\t\t\t\tassertNull(cell.getValue());\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tassertEquals(\"y\", cell.getValue());\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tassertTrue(columns.isEmpty());\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\tassertTrue(rows.isEmpty());\n\t\t}\n\t}", "signature": "void testIgnoreBlankRows()", "full_signature": "@Test public void testIgnoreBlankRows()", "class_method_signature": "ExcelSpreadsheetReaderTest.testIgnoreBlankRows()", "testcase": true, "constructor": false, "invocations": ["asList", "read", "getResourceAsStream", "getClass", "assertTrue", "remove", "asList", "entrySet", "assertTrue", "remove", "getKey", "equals", "getKey", "assertEquals", "getValue", "equals", "getKey", "assertEquals", "getValue", "equals", "getKey", "assertEquals", "getValue", "equals", "getKey", "assertEquals", "getValue", "assertNull", "getValue", "equals", "getKey", "assertEquals", "getValue", "equals", "getKey", "assertEquals", "getValue", "equals", "getKey", "assertEquals", "getValue", "equals", "getKey", "assertEquals", "getValue", "assertNull", "getValue", "equals", "getKey", "assertEquals", "getValue", "equals", "getKey", "assertTrue", "getValue", "matches", "getValue", "equals", "getKey", "assertNull", "getValue", "equals", "getKey", "assertEquals", "getValue", "assertNull", "getValue", "equals", "getKey", "assertNull", "getValue", "assertEquals", "getValue", "equals", "getKey", "assertNull", "getValue", "assertEquals", "getValue", "assertTrue", "isEmpty", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "ExcelSpreadsheetReader", "superclass": "", "interfaces": "implements SpreadsheetReader", "fields": [{"original_string": "private static Logger logger = Logger.getLogger(ExcelSpreadsheetReader.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(ExcelSpreadsheetReader.class)", "var_name": "logger"}], "methods": [{"identifier": "read", "parameters": "(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "modifiers": "public", "return": "void", "signature": "void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "full_signature": "public void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "class_method_signature": "ExcelSpreadsheetReader.read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "testcase": false, "constructor": false}, {"identifier": "getCellValue", "parameters": "(Cell cell, DataFormatter dataFormatter)", "modifiers": "private", "return": "String", "signature": "String getCellValue(Cell cell, DataFormatter dataFormatter)", "full_signature": "private String getCellValue(Cell cell, DataFormatter dataFormatter)", "class_method_signature": "ExcelSpreadsheetReader.getCellValue(Cell cell, DataFormatter dataFormatter)", "testcase": false, "constructor": false}], "file": "taverna-spreadsheet-import-activity/src/main/java/org/apache/taverna/activities/spreadsheet/ExcelSpreadsheetReader.java"}, "focal_method": {"identifier": "read", "parameters": "(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "modifiers": "public", "return": "void", "body": "public void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)\n\t\t\tthrows SpreadsheetReadException {\n\t\tWorkbook workbook;\n\t\ttry {\n\t\t\tworkbook = WorkbookFactory.create(inputStream);\n\t\t} catch (InvalidFormatException e) {\n\t\t\tthrow new SpreadsheetReadException(\n\t\t\t\t\t\"The file does not have a compatible spreadsheet format\", e);\n\t\t} catch (IOException e) {\n\t\t\tthrow new SpreadsheetReadException(\"The spreadsheet stream could not be read\", e);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new SpreadsheetReadException(\"The spreadsheet stream could not be read\", e);\n\t\t}\n\n\t\tDataFormatter dataFormatter = new DataFormatter();\n\t\t\n\t\tworkbook.setMissingCellPolicy(Row.CREATE_NULL_AS_BLANK);\n\t\tSheet sheet = workbook.getSheetAt(0);\n\n\t\tif (rowRange.getEnd() < 0) {\n\t\t\trowRange.setEnd(sheet.getLastRowNum());\n\t\t\tlogger.debug(\"No end of row range specified, setting to \" + rowRange.getEnd());\n\t\t}\n\n\t\tSortedMap<Integer, String> currentDataRow = new TreeMap<Integer, String>();\n\n\t\tfor (int rowIndex = rowRange.getStart(); rowIndex <= rowRange.getEnd(); rowIndex++) {\n\t\t\tboolean blankRow = true;\n\t\t\tif (rowRange.contains(rowIndex)) {\n\t\t\t\tRow row = sheet.getRow(rowIndex);\n\t\t\t\tfor (int columnIndex = columnRange.getStart(); columnIndex <= columnRange.getEnd(); columnIndex++) {\n\t\t\t\t\tif (columnRange.contains(columnIndex)) {\n\t\t\t\t\t\tString value = null;\n\t\t\t\t\t\tif (row != null) {\n\t\t\t\t\t\t\tCell cell = row.getCell(columnIndex);\n\t\t\t\t\t\t\tif (cell != null) {\n\t\t\t\t\t\t\t\tvalue = getCellValue(cell, dataFormatter);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\t\tblankRow = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurrentDataRow.put(columnIndex, value);\n\t\t\t\t\t\tif (columnIndex == columnRange.getEnd()) {\n\t\t\t\t\t\t\tif (!ignoreBlankRows || !blankRow) {\n\t\t\t\t\t\t\t\trowProcessor.processRow(rowIndex, currentDataRow);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcurrentDataRow = new TreeMap<Integer, String>();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}", "signature": "void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "full_signature": "public void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "class_method_signature": "ExcelSpreadsheetReader.read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "testcase": false, "constructor": false, "invocations": ["create", "setMissingCellPolicy", "getSheetAt", "getEnd", "setEnd", "getLastRowNum", "debug", "getEnd", "getStart", "getEnd", "contains", "getRow", "getStart", "getEnd", "contains", "getCell", "getCellValue", "put", "getEnd", "processRow"]}, "repository": {"repo_id": 30956938, "url": "https://github.com/apache/incubator-taverna-common-activities", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 5696, "license": "licensed"}}