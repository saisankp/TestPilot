{"test_class": {"identifier": "ZTSUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/utils/ZTSUtilsTest.java"}, "test_case": {"identifier": "testValidateCertReqDNSNamesSubdomainInvalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateCertReqDNSNamesSubdomainInvalid() throws IOException {\n        Path path = Paths.get(\"src/test/resources/subdomain_invalid.csr\");\n        String csr = new String(Files.readAllBytes(path));\n        \n        PKCS10CertificationRequest certReq = Crypto.getPKCS10CertRequest(csr);\n        boolean result = ZTSUtils.validateCertReqDNSNames(certReq, \"athenz.domain\", \"production\");\n        assertFalse(result);\n    }", "signature": "void testValidateCertReqDNSNamesSubdomainInvalid()", "full_signature": "@Test public void testValidateCertReqDNSNamesSubdomainInvalid()", "class_method_signature": "ZTSUtilsTest.testValidateCertReqDNSNamesSubdomainInvalid()", "testcase": true, "constructor": false, "invocations": ["get", "readAllBytes", "getPKCS10CertRequest", "validateCertReqDNSNames", "assertFalse"]}, "focal_class": {"identifier": "ZTSUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ZTSUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ZTSUtils.class)", "var_name": "LOGGER"}, {"original_string": "static final String ZTS_DEFAULT_EXCLUDED_CIPHER_SUITES = \"SSL_RSA_WITH_DES_CBC_SHA,\"\n            + \"SSL_DHE_RSA_WITH_DES_CBC_SHA,SSL_DHE_DSS_WITH_DES_CBC_SHA,\"\n            + \"SSL_RSA_EXPORT_WITH_RC4_40_MD5,SSL_RSA_EXPORT_WITH_DES40_CBC_SHA,\"\n            + \"SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA,SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA\";", "modifier": "static final", "type": "String", "declarator": "ZTS_DEFAULT_EXCLUDED_CIPHER_SUITES = \"SSL_RSA_WITH_DES_CBC_SHA,\"\n            + \"SSL_DHE_RSA_WITH_DES_CBC_SHA,SSL_DHE_DSS_WITH_DES_CBC_SHA,\"\n            + \"SSL_RSA_EXPORT_WITH_RC4_40_MD5,SSL_RSA_EXPORT_WITH_DES40_CBC_SHA,\"\n            + \"SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA,SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA\"", "var_name": "ZTS_DEFAULT_EXCLUDED_CIPHER_SUITES"}, {"original_string": "static final String ZTS_DEFAULT_EXCLUDED_PROTOCOLS = \"SSLv2,SSLv3\";", "modifier": "static final", "type": "String", "declarator": "ZTS_DEFAULT_EXCLUDED_PROTOCOLS = \"SSLv2,SSLv3\"", "var_name": "ZTS_DEFAULT_EXCLUDED_PROTOCOLS"}, {"original_string": "public static final String ZTS_CERT_DNS_SUFFIX =\n            System.getProperty(ZTSConsts.ZTS_PROP_CERT_DNS_SUFFIX, ZTSConsts.ZTS_CERT_DNS_SUFFIX);", "modifier": "public static final", "type": "String", "declarator": "ZTS_CERT_DNS_SUFFIX =\n            System.getProperty(ZTSConsts.ZTS_PROP_CERT_DNS_SUFFIX, ZTSConsts.ZTS_CERT_DNS_SUFFIX)", "var_name": "ZTS_CERT_DNS_SUFFIX"}, {"original_string": "private static final String ATHENZ_PROP_KEYSTORE_PASSWORD      = \"athenz.ssl_key_store_password\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_KEYSTORE_PASSWORD      = \"athenz.ssl_key_store_password\"", "var_name": "ATHENZ_PROP_KEYSTORE_PASSWORD"}, {"original_string": "private static final String ATHENZ_PROP_TRUSTSTORE_PASSWORD    = \"athenz.ssl_trust_store_password\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_TRUSTSTORE_PASSWORD    = \"athenz.ssl_trust_store_password\"", "var_name": "ATHENZ_PROP_TRUSTSTORE_PASSWORD"}, {"original_string": "private static final String ATHENZ_PROP_KEYSTORE_PATH          = \"athenz.ssl_key_store\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_KEYSTORE_PATH          = \"athenz.ssl_key_store\"", "var_name": "ATHENZ_PROP_KEYSTORE_PATH"}, {"original_string": "private static final String ATHENZ_PROP_KEYSTORE_TYPE          = \"athenz.ssl_key_store_type\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_KEYSTORE_TYPE          = \"athenz.ssl_key_store_type\"", "var_name": "ATHENZ_PROP_KEYSTORE_TYPE"}, {"original_string": "private static final String ATHENZ_PROP_TRUSTSTORE_PATH        = \"athenz.ssl_trust_store\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_TRUSTSTORE_PATH        = \"athenz.ssl_trust_store\"", "var_name": "ATHENZ_PROP_TRUSTSTORE_PATH"}, {"original_string": "private static final String ATHENZ_PROP_TRUSTSTORE_TYPE        = \"athenz.ssl_trust_store_type\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_TRUSTSTORE_TYPE        = \"athenz.ssl_trust_store_type\"", "var_name": "ATHENZ_PROP_TRUSTSTORE_TYPE"}, {"original_string": "private static final String ATHENZ_PROP_KEYSTORE_PASSWORD_APPNAME   = \"athenz.ssl_key_store_password_appname\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_KEYSTORE_PASSWORD_APPNAME   = \"athenz.ssl_key_store_password_appname\"", "var_name": "ATHENZ_PROP_KEYSTORE_PASSWORD_APPNAME"}, {"original_string": "private static final String ATHENZ_PROP_TRUSTSTORE_PASSWORD_APPNAME = \"athenz.ssl_trust_store_password_appname\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_TRUSTSTORE_PASSWORD_APPNAME = \"athenz.ssl_trust_store_password_appname\"", "var_name": "ATHENZ_PROP_TRUSTSTORE_PASSWORD_APPNAME"}, {"original_string": "private final static char[] EMPTY_PASSWORD = \"\".toCharArray();", "modifier": "private final static", "type": "char[]", "declarator": "EMPTY_PASSWORD = \"\".toCharArray()", "var_name": "EMPTY_PASSWORD"}], "methods": [{"identifier": "createSSLContextObject", "parameters": "(String[] clientProtocols)", "modifiers": "public static", "return": "SslContextFactory", "signature": "SslContextFactory createSSLContextObject(String[] clientProtocols)", "full_signature": "public static SslContextFactory createSSLContextObject(String[] clientProtocols)", "class_method_signature": "ZTSUtils.createSSLContextObject(String[] clientProtocols)", "testcase": false, "constructor": false}, {"identifier": "createSSLContextObject", "parameters": "(final String[] clientProtocols,\n            final PrivateKeyStore privateKeyStore)", "modifiers": "public static", "return": "SslContextFactory", "signature": "SslContextFactory createSSLContextObject(final String[] clientProtocols,\n            final PrivateKeyStore privateKeyStore)", "full_signature": "public static SslContextFactory createSSLContextObject(final String[] clientProtocols,\n            final PrivateKeyStore privateKeyStore)", "class_method_signature": "ZTSUtils.createSSLContextObject(final String[] clientProtocols,\n            final PrivateKeyStore privateKeyStore)", "testcase": false, "constructor": false}, {"identifier": "getApplicationSecret", "parameters": "(final PrivateKeyStore privateKeyStore,\n            final String keyStorePasswordAppName, final String keyStorePassword)", "modifiers": "static", "return": "String", "signature": "String getApplicationSecret(final PrivateKeyStore privateKeyStore,\n            final String keyStorePasswordAppName, final String keyStorePassword)", "full_signature": "static String getApplicationSecret(final PrivateKeyStore privateKeyStore,\n            final String keyStorePasswordAppName, final String keyStorePassword)", "class_method_signature": "ZTSUtils.getApplicationSecret(final PrivateKeyStore privateKeyStore,\n            final String keyStorePasswordAppName, final String keyStorePassword)", "testcase": false, "constructor": false}, {"identifier": "emitMonmetricError", "parameters": "(int errorCode, String caller,\n            String requestDomain, String principalDomain, Metric metric)", "modifiers": "public static", "return": "boolean", "signature": "boolean emitMonmetricError(int errorCode, String caller,\n            String requestDomain, String principalDomain, Metric metric)", "full_signature": "public static boolean emitMonmetricError(int errorCode, String caller,\n            String requestDomain, String principalDomain, Metric metric)", "class_method_signature": "ZTSUtils.emitMonmetricError(int errorCode, String caller,\n            String requestDomain, String principalDomain, Metric metric)", "testcase": false, "constructor": false}, {"identifier": "verifyCertificateRequest", "parameters": "(PKCS10CertificationRequest certReq,\n            final String domain, final String service, X509CertRecord certRecord)", "modifiers": "public static", "return": "boolean", "signature": "boolean verifyCertificateRequest(PKCS10CertificationRequest certReq,\n            final String domain, final String service, X509CertRecord certRecord)", "full_signature": "public static boolean verifyCertificateRequest(PKCS10CertificationRequest certReq,\n            final String domain, final String service, X509CertRecord certRecord)", "class_method_signature": "ZTSUtils.verifyCertificateRequest(PKCS10CertificationRequest certReq,\n            final String domain, final String service, X509CertRecord certRecord)", "testcase": false, "constructor": false}, {"identifier": "validateCertReqCommonName", "parameters": "(PKCS10CertificationRequest certReq, String cn)", "modifiers": "public static", "return": "boolean", "signature": "boolean validateCertReqCommonName(PKCS10CertificationRequest certReq, String cn)", "full_signature": "public static boolean validateCertReqCommonName(PKCS10CertificationRequest certReq, String cn)", "class_method_signature": "ZTSUtils.validateCertReqCommonName(PKCS10CertificationRequest certReq, String cn)", "testcase": false, "constructor": false}, {"identifier": "validateCertReqDNSNames", "parameters": "(PKCS10CertificationRequest certReq, final String domain,\n            final String service)", "modifiers": "static", "return": "boolean", "signature": "boolean validateCertReqDNSNames(PKCS10CertificationRequest certReq, final String domain,\n            final String service)", "full_signature": "static boolean validateCertReqDNSNames(PKCS10CertificationRequest certReq, final String domain,\n            final String service)", "class_method_signature": "ZTSUtils.validateCertReqDNSNames(PKCS10CertificationRequest certReq, final String domain,\n            final String service)", "testcase": false, "constructor": false}, {"identifier": "extractCertReqInstanceId", "parameters": "(PKCS10CertificationRequest certReq)", "modifiers": "public static", "return": "String", "signature": "String extractCertReqInstanceId(PKCS10CertificationRequest certReq)", "full_signature": "public static String extractCertReqInstanceId(PKCS10CertificationRequest certReq)", "class_method_signature": "ZTSUtils.extractCertReqInstanceId(PKCS10CertificationRequest certReq)", "testcase": false, "constructor": false}, {"identifier": "validateCertReqInstanceId", "parameters": "(PKCS10CertificationRequest certReq, String instanceId)", "modifiers": "static", "return": "boolean", "signature": "boolean validateCertReqInstanceId(PKCS10CertificationRequest certReq, String instanceId)", "full_signature": "static boolean validateCertReqInstanceId(PKCS10CertificationRequest certReq, String instanceId)", "class_method_signature": "ZTSUtils.validateCertReqInstanceId(PKCS10CertificationRequest certReq, String instanceId)", "testcase": false, "constructor": false}, {"identifier": "generateIdentity", "parameters": "(InstanceCertManager certManager, final String csr,\n            final String cn, final String certUsage, int expiryTime)", "modifiers": "public static", "return": "Identity", "signature": "Identity generateIdentity(InstanceCertManager certManager, final String csr,\n            final String cn, final String certUsage, int expiryTime)", "full_signature": "public static Identity generateIdentity(InstanceCertManager certManager, final String csr,\n            final String cn, final String certUsage, int expiryTime)", "class_method_signature": "ZTSUtils.generateIdentity(InstanceCertManager certManager, final String csr,\n            final String cn, final String certUsage, int expiryTime)", "testcase": false, "constructor": false}, {"identifier": "createServerClientSSLContext", "parameters": "(PrivateKeyStore privateKeyStore)", "modifiers": "public static", "return": "SSLContext", "signature": "SSLContext createServerClientSSLContext(PrivateKeyStore privateKeyStore)", "full_signature": "public static SSLContext createServerClientSSLContext(PrivateKeyStore privateKeyStore)", "class_method_signature": "ZTSUtils.createServerClientSSLContext(PrivateKeyStore privateKeyStore)", "testcase": false, "constructor": false}, {"identifier": "getPasswordChars", "parameters": "(final String password)", "modifiers": "static", "return": "char[]", "signature": "char[] getPasswordChars(final String password)", "full_signature": "static char[] getPasswordChars(final String password)", "class_method_signature": "ZTSUtils.getPasswordChars(final String password)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(final String value, int defaultValue)", "modifiers": "public static", "return": "int", "signature": "int parseInt(final String value, int defaultValue)", "full_signature": "public static int parseInt(final String value, int defaultValue)", "class_method_signature": "ZTSUtils.parseInt(final String value, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "parseBoolean", "parameters": "(final String value, boolean defaultValue)", "modifiers": "public static", "return": "boolean", "signature": "boolean parseBoolean(final String value, boolean defaultValue)", "full_signature": "public static boolean parseBoolean(final String value, boolean defaultValue)", "class_method_signature": "ZTSUtils.parseBoolean(final String value, boolean defaultValue)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/utils/ZTSUtils.java"}, "focal_method": {"identifier": "validateCertReqDNSNames", "parameters": "(PKCS10CertificationRequest certReq, final String domain,\n            final String service)", "modifiers": "static", "return": "boolean", "body": "static boolean validateCertReqDNSNames(PKCS10CertificationRequest certReq, final String domain,\n            final String service) {\n        \n        // if no dns names in the CSR then we're ok\n        \n        List<String> dnsNames = Crypto.extractX509CSRDnsNames(certReq);\n        if (dnsNames.isEmpty()) {\n            return true;\n        }\n        \n        // the only two formats we're allowed to have in the CSR are:\n        // 1) <service>.<domain-with-dashes>.<provider-dns-suffix>\n        // 2) <service>.<domain-with-dashes>.instanceid.athenz.<provider-dns-suffix>\n        \n        final String prefix = service + \".\" + domain.replace('.', '-') + \".\";\n        for (String dnsName : dnsNames) {\n            if (dnsName.startsWith(prefix) && dnsName.endsWith(ZTS_CERT_DNS_SUFFIX)) {\n                continue;\n            }\n            if (dnsName.contains(ZTSConsts.ZTS_CERT_INSTANCE_ID_DNS)) {\n                continue;\n            }\n            LOGGER.error(\"validateServiceCertReqDNSNames - Invalid dnsName SAN entry: {}\", dnsName);\n            return false;\n        }\n\n        return true;\n    }", "signature": "boolean validateCertReqDNSNames(PKCS10CertificationRequest certReq, final String domain,\n            final String service)", "full_signature": "static boolean validateCertReqDNSNames(PKCS10CertificationRequest certReq, final String domain,\n            final String service)", "class_method_signature": "ZTSUtils.validateCertReqDNSNames(PKCS10CertificationRequest certReq, final String domain,\n            final String service)", "testcase": false, "constructor": false, "invocations": ["extractX509CSRDnsNames", "isEmpty", "replace", "startsWith", "endsWith", "contains", "error"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}