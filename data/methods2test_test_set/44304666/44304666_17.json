{"test_class": {"identifier": "ProvinceInfoUtilsTest", "superclass": "extends PickViewTestSupport", "interfaces": "", "fields": [{"original_string": "private static final String VALID_RESPONSE = \"ProvinceName 0  CityName 0\";", "modifier": "private static final", "type": "String", "declarator": "VALID_RESPONSE = \"ProvinceName 0  CityName 0\"", "var_name": "VALID_RESPONSE"}, {"original_string": "private static final String EMPTY_PROVINCE_RESPONSE = \"ProvinceName 1  \u5176\u4ed6\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY_PROVINCE_RESPONSE = \"ProvinceName 1  \u5176\u4ed6\";", "var_name": "EMPTY_PROVINCE_RESPONSE"}, {"original_string": "private static final String INVALID_CITY_RESPONSE = \"ProvinceName 0  \u5176\u4ed6\";", "modifier": "private static final", "type": "String", "declarator": "INVALID_CITY_RESPONSE = \"ProvinceName 0  \u5176\u4ed6\";", "var_name": "INVALID_CITY_RESPONSE"}, {"original_string": "private static final String INVALID_RESPONSE = \"\u5176\u4ed6\u5730\u533a  \u5176\u4ed6\";", "modifier": "private static final", "type": "String", "declarator": "INVALID_RESPONSE = \"\u5176\u4ed6\u5730\u533a  \u5176\u4ed6\";", "var_name": "INVALID_RESPONSE"}], "file": "app/src/test/java/com/brucetoo/pickview/provincepick/utils/ProvinceInfoUtilsTest.java"}, "test_case": {"identifier": "testMatchAddress", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMatchAddress() throws IOException {\n        // when\n        Context contextMock = Mockito.mock(Context.class);\n        String validProvinceId = PROVINCE_ID + \"-0\";\n        String emptyProvinceId = PROVINCE_ID + \"-1\";\n        String validCityId = CITY_ID + \"-0\";\n\n        ArrayList<ProvinceModel> provinces = createProvinces();\n        provinces.add(null);\n\n        CityModel[] cities = createCities();\n\n        ProvinceModel provinceModel = provinces.get(0);\n        provinceModel.addCity(null);\n        for (CityModel city : cities) {\n            provinceModel.addCity(city);\n        }\n\n\n        // then\n        assertEquals(\n                VALID_RESPONSE,\n                ProvinceInfoUtils.matchAddress(contextMock, validProvinceId, validCityId, provinces));\n\n        assertEquals(\n                EMPTY_PROVINCE_RESPONSE,\n                ProvinceInfoUtils.matchAddress(contextMock, emptyProvinceId, validCityId, provinces));\n\n        assertEquals(\n                INVALID_RESPONSE,\n                ProvinceInfoUtils.matchAddress(contextMock, PROVINCE_ID, validCityId, provinces));\n\n        assertEquals(\n                INVALID_CITY_RESPONSE,\n                ProvinceInfoUtils.matchAddress(contextMock, validProvinceId, CITY_ID, provinces));\n\n        assertEquals(\n                INVALID_RESPONSE,\n                ProvinceInfoUtils.matchAddress(contextMock, validProvinceId, validCityId, new ArrayList<ProvinceModel>()));\n\n        assertEquals(\n                INVALID_RESPONSE,\n                ProvinceInfoUtils.matchAddress(contextMock, null, validCityId, provinces));\n\n        assertEquals(\n                INVALID_CITY_RESPONSE,\n                ProvinceInfoUtils.matchAddress(contextMock, validProvinceId, null, provinces));\n\n        assertEquals(\n                INVALID_RESPONSE,\n                ProvinceInfoUtils.matchAddress(contextMock, validProvinceId, validCityId, null));\n\n        assertEquals(\n                INVALID_RESPONSE,\n                ProvinceInfoUtils.matchAddress(contextMock, null, null, provinces));\n\n        assertEquals(\n                INVALID_RESPONSE,\n                ProvinceInfoUtils.matchAddress(contextMock, null, null, null));\n    }", "signature": "void testMatchAddress()", "full_signature": "@Test public void testMatchAddress()", "class_method_signature": "ProvinceInfoUtilsTest.testMatchAddress()", "testcase": true, "constructor": false, "invocations": ["mock", "createProvinces", "add", "createCities", "get", "addCity", "addCity", "assertEquals", "matchAddress", "assertEquals", "matchAddress", "assertEquals", "matchAddress", "assertEquals", "matchAddress", "assertEquals", "matchAddress", "assertEquals", "matchAddress", "assertEquals", "matchAddress", "assertEquals", "matchAddress", "assertEquals", "matchAddress", "assertEquals", "matchAddress"]}, "focal_class": {"identifier": "ProvinceInfoUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "matchAddress", "parameters": "(Context cxt, String provinceId, String cityId, ArrayList<ProvinceModel> provinceList)", "modifiers": "public static", "return": "String", "signature": "String matchAddress(Context cxt, String provinceId, String cityId, ArrayList<ProvinceModel> provinceList)", "full_signature": "public static String matchAddress(Context cxt, String provinceId, String cityId, ArrayList<ProvinceModel> provinceList)", "class_method_signature": "ProvinceInfoUtils.matchAddress(Context cxt, String provinceId, String cityId, ArrayList<ProvinceModel> provinceList)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/brucetoo/pickview/provincepick/utils/ProvinceInfoUtils.java"}, "focal_method": {"identifier": "matchAddress", "parameters": "(Context cxt, String provinceId, String cityId, ArrayList<ProvinceModel> provinceList)", "modifiers": "public static", "return": "String", "body": "public static String matchAddress(Context cxt, String provinceId, String cityId, ArrayList<ProvinceModel> provinceList) {\n\n\t\tint count = (null == provinceList) ? 0 : provinceList.size();\n\t\tResources res = cxt.getResources();\n\t\tString province = \"\u5176\u4ed6\u5730\u533a\";\n\t\tString city = \"\u5176\u4ed6\";\n\t\tStringBuffer sb = new StringBuffer();\n\t\tProvinceModel provinceModel = null;\n\n\t\tfor (int i = 0; i < count; i++) {\n\n\t\t\tprovinceModel = provinceList.get(i);\n\n\t\t\tif (null != provinceModel && provinceModel.id.equals(provinceId)) {\n\n\t\t\t\tint cityCount;\n\t\t\t\tCityModel cityModel = null;\n\n\t\t\t\tprovince = provinceModel.name;\n\t\t\t\tcityCount = provinceModel.getCityCount();\n\n\t\t\t\tfor (int j = 0; j < cityCount; j++) {\n\n\t\t\t\t\tcityModel = provinceModel.getCity(j);\n\n\t\t\t\t\tif (null != cityModel && cityModel.id.equals(cityId)) {\n\n\t\t\t\t\t\tcity = cityModel.name;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tsb.append(province);\n\t\tsb.append(\"  \");\n\t\tsb.append(city);\n\n\t\treturn sb.toString();\n\t}", "signature": "String matchAddress(Context cxt, String provinceId, String cityId, ArrayList<ProvinceModel> provinceList)", "full_signature": "public static String matchAddress(Context cxt, String provinceId, String cityId, ArrayList<ProvinceModel> provinceList)", "class_method_signature": "ProvinceInfoUtils.matchAddress(Context cxt, String provinceId, String cityId, ArrayList<ProvinceModel> provinceList)", "testcase": false, "constructor": false, "invocations": ["size", "getResources", "get", "equals", "getCityCount", "getCity", "equals", "append", "append", "append", "toString"]}, "repository": {"repo_id": 44304666, "url": "https://github.com/brucetoo/PickView", "language": "Java", "is_fork": false, "fork_count": 271, "stargazer_count": 1060, "size": 5789, "license": "licensed"}}