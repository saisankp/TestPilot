{"test_class": {"identifier": "GraphHopperRouterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PointList pointList = new PointList();", "modifier": "private final", "type": "PointList", "declarator": "pointList = new PointList()", "var_name": "pointList"}, {"original_string": "private final Coordinates from = Coordinates.valueOf(-Double.MIN_VALUE, Double.MIN_VALUE);", "modifier": "private final", "type": "Coordinates", "declarator": "from = Coordinates.valueOf(-Double.MIN_VALUE, Double.MIN_VALUE)", "var_name": "from"}, {"original_string": "private final Coordinates to = Coordinates.valueOf(Double.MAX_VALUE, -Double.MAX_VALUE);", "modifier": "private final", "type": "Coordinates", "declarator": "to = Coordinates.valueOf(Double.MAX_VALUE, -Double.MAX_VALUE)", "var_name": "to"}, {"original_string": "@Mock\n    private GraphHopperOSM graphHopper;", "modifier": "@Mock\n    private", "type": "GraphHopperOSM", "declarator": "graphHopper", "var_name": "graphHopper"}, {"original_string": "@Mock\n    private GHResponse ghResponse;", "modifier": "@Mock\n    private", "type": "GHResponse", "declarator": "ghResponse", "var_name": "ghResponse"}, {"original_string": "@Mock\n    private PathWrapper pathWrapper;", "modifier": "@Mock\n    private", "type": "PathWrapper", "declarator": "pathWrapper", "var_name": "pathWrapper"}, {"original_string": "@Mock\n    private GraphHopperStorage graphHopperStorage;", "modifier": "@Mock\n    private", "type": "GraphHopperStorage", "declarator": "graphHopperStorage", "var_name": "graphHopperStorage"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/routing/GraphHopperRouterTest.java"}, "test_case": {"identifier": "travel_time_should_return_graphhopper_time", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void travel_time_should_return_graphhopper_time() {\n        // arrange\n        whenRouteReturnResponse();\n        whenBestReturnPath();\n        long travelTimeMillis = 135 * 60 * 60 * 1000;\n        when(pathWrapper.getTime()).thenReturn(travelTimeMillis);\n\n        // act & assert\n        assertThat(new GraphHopperRouter(graphHopper).travelTimeMillis(from, to)).isEqualTo(travelTimeMillis);\n    }", "signature": "void travel_time_should_return_graphhopper_time()", "full_signature": "@Test void travel_time_should_return_graphhopper_time()", "class_method_signature": "GraphHopperRouterTest.travel_time_should_return_graphhopper_time()", "testcase": true, "constructor": false, "invocations": ["whenRouteReturnResponse", "whenBestReturnPath", "thenReturn", "when", "getTime", "isEqualTo", "assertThat", "travelTimeMillis"]}, "focal_class": {"identifier": "GraphHopperRouter", "superclass": "", "interfaces": "implements Router, DistanceCalculator, Region", "fields": [{"original_string": "private final GraphHopperOSM graphHopper;", "modifier": "private final", "type": "GraphHopperOSM", "declarator": "graphHopper", "var_name": "graphHopper"}], "methods": [{"identifier": "GraphHopperRouter", "parameters": "(GraphHopperOSM graphHopper)", "modifiers": "@Autowired", "return": "", "signature": " GraphHopperRouter(GraphHopperOSM graphHopper)", "full_signature": "@Autowired  GraphHopperRouter(GraphHopperOSM graphHopper)", "class_method_signature": "GraphHopperRouter.GraphHopperRouter(GraphHopperOSM graphHopper)", "testcase": false, "constructor": true}, {"identifier": "getPath", "parameters": "(Coordinates from, Coordinates to)", "modifiers": "@Override public", "return": "List<Coordinates>", "signature": "List<Coordinates> getPath(Coordinates from, Coordinates to)", "full_signature": "@Override public List<Coordinates> getPath(Coordinates from, Coordinates to)", "class_method_signature": "GraphHopperRouter.getPath(Coordinates from, Coordinates to)", "testcase": false, "constructor": false}, {"identifier": "travelTimeMillis", "parameters": "(Coordinates from, Coordinates to)", "modifiers": "@Override public", "return": "long", "signature": "long travelTimeMillis(Coordinates from, Coordinates to)", "full_signature": "@Override public long travelTimeMillis(Coordinates from, Coordinates to)", "class_method_signature": "GraphHopperRouter.travelTimeMillis(Coordinates from, Coordinates to)", "testcase": false, "constructor": false}, {"identifier": "getBounds", "parameters": "()", "modifiers": "@Override public", "return": "BoundingBox", "signature": "BoundingBox getBounds()", "full_signature": "@Override public BoundingBox getBounds()", "class_method_signature": "GraphHopperRouter.getBounds()", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/routing/GraphHopperRouter.java"}, "focal_method": {"identifier": "travelTimeMillis", "parameters": "(Coordinates from, Coordinates to)", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long travelTimeMillis(Coordinates from, Coordinates to) {\n        GHRequest ghRequest = new GHRequest(\n                from.latitude().doubleValue(),\n                from.longitude().doubleValue(),\n                to.latitude().doubleValue(),\n                to.longitude().doubleValue());\n        GHResponse ghResponse = graphHopper.route(ghRequest);\n        // TODO return wrapper that can hold both the result and error explanation instead of throwing exception\n        if (ghResponse.hasErrors()) {\n            throw new DistanceCalculationException(\"No route from \" + from + \" to \" + to, ghResponse.getErrors().get(0));\n        }\n        return ghResponse.getBest().getTime();\n    }", "signature": "long travelTimeMillis(Coordinates from, Coordinates to)", "full_signature": "@Override public long travelTimeMillis(Coordinates from, Coordinates to)", "class_method_signature": "GraphHopperRouter.travelTimeMillis(Coordinates from, Coordinates to)", "testcase": false, "constructor": false, "invocations": ["doubleValue", "latitude", "doubleValue", "longitude", "doubleValue", "latitude", "doubleValue", "longitude", "route", "hasErrors", "get", "getErrors", "getTime", "getBest"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}