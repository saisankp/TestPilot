{"test_class": {"identifier": "IObjectSimpleImplPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IObjectSimpleImplPlugin plugin;", "modifier": "private", "type": "IObjectSimpleImplPlugin", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "private IBootstrap bootstrap;", "modifier": "private", "type": "IBootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}], "file": "CoreFeatures/IObject-plugins/PluginIObjectSimpleImpl/src/test/java/info/smart_tools/smartactors/iobject_plugins/iobject_simple_impl_plugin/IObjectSimpleImplPluginTest.java"}, "test_case": {"identifier": "ShouldThrowRuntimeException_When_LambdaThrowsException", "parameters": "()", "modifiers": "@Test(expected = ActionExecuteException.class) public", "return": "void", "body": "@Test(expected = ActionExecuteException.class)\n    public void ShouldThrowRuntimeException_When_LambdaThrowsException() throws Exception {\n\n        when(Keys.getOrAdd(IObjectImpl.class.getCanonicalName())).thenThrow(new ResolutionException(\"\"));\n\n        BootstrapItem bootstrapItem = mock(BootstrapItem.class);\n        whenNew(BootstrapItem.class).withArguments(\"IObjectSimpleImplPlugin\").thenReturn(bootstrapItem);\n        when(bootstrapItem.after(anyString())).thenReturn(bootstrapItem);\n\n        plugin.load();\n\n        verifyNew(BootstrapItem.class).withArguments(\"IObjectSimpleImplPlugin\");\n\n        ArgumentCaptor<IPoorAction> actionArgumentCaptor = ArgumentCaptor.forClass(IPoorAction.class);\n        verify(bootstrapItem).process(actionArgumentCaptor.capture());\n        actionArgumentCaptor.getValue().execute();\n    }", "signature": "void ShouldThrowRuntimeException_When_LambdaThrowsException()", "full_signature": "@Test(expected = ActionExecuteException.class) public void ShouldThrowRuntimeException_When_LambdaThrowsException()", "class_method_signature": "IObjectSimpleImplPluginTest.ShouldThrowRuntimeException_When_LambdaThrowsException()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "getOrAdd", "getCanonicalName", "mock", "thenReturn", "withArguments", "whenNew", "thenReturn", "when", "after", "anyString", "load", "withArguments", "verifyNew", "forClass", "process", "verify", "capture", "execute", "getValue"]}, "focal_class": {"identifier": "IObjectSimpleImplPlugin", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private final IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private final", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "IObjectSimpleImplPlugin", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " IObjectSimpleImplPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  IObjectSimpleImplPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "IObjectSimpleImplPlugin.IObjectSimpleImplPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "IObjectSimpleImplPlugin.load()", "testcase": false, "constructor": false}], "file": "CoreFeatures/IObject-plugins/PluginIObjectSimpleImpl/src/main/java/info/smart_tools/smartactors/iobject_plugins/iobject_simple_impl_plugin/IObjectSimpleImplPlugin.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load() throws PluginException {\n        try {\n            IBootstrapItem<String> item = new BootstrapItem(\"IObjectSimpleImplPlugin\");\n            item\n                .after(\"IOC\")\n                .process(() -> {\n                    try {\n                        IKey fieldKey = Keys.getOrAdd(IObjectImpl.class.getCanonicalName());\n                        IOC.register(fieldKey, new CreateNewInstanceStrategy(\n                                (args) -> new IObjectImpl()\n                        ));\n                    } catch (ResolutionException e) {\n                        throw new ActionExecuteException(\"IObjectSimpleImpl plugin can't load: can't get IObjectSimpleImpl key\", e);\n                    } catch (InvalidArgumentException e) {\n                        throw new ActionExecuteException(\"IObjectSimpleImpl plugin can't load: can't create strategy\", e);\n                    } catch (RegistrationException e) {\n                        throw new ActionExecuteException(\"IObjectSimpleImpl plugin can't load: can't register new strategy\", e);\n                    }\n                });\n            bootstrap.add(item);\n        } catch (InvalidArgumentException e) {\n            throw new PluginException(\"Can't load IObject plugin\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "IObjectSimpleImplPlugin.load()", "testcase": false, "constructor": false, "invocations": ["process", "after", "getOrAdd", "getCanonicalName", "register", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}