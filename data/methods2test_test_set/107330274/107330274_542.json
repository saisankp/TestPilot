{"test_class": {"identifier": "SingleServiceLoadBalancerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final InstanceInfo INSTANCE_1 = newInstanceInfo(\"id1\", \"myservice\", \"1.0.0.1\", InstanceStatus.UP);", "modifier": "private static final", "type": "InstanceInfo", "declarator": "INSTANCE_1 = newInstanceInfo(\"id1\", \"myservice\", \"1.0.0.1\", InstanceStatus.UP)", "var_name": "INSTANCE_1"}, {"original_string": "private static final InstanceInfo INSTANCE_2 = newInstanceInfo(\"id2\", \"myservice\", \"1.0.0.2\", InstanceStatus.UP);", "modifier": "private static final", "type": "InstanceInfo", "declarator": "INSTANCE_2 = newInstanceInfo(\"id2\", \"myservice\", \"1.0.0.2\", InstanceStatus.UP)", "var_name": "INSTANCE_2"}, {"original_string": "private final TestClock testClock = Clocks.testWorldClock();", "modifier": "private final", "type": "TestClock", "declarator": "testClock = Clocks.testWorldClock()", "var_name": "testClock"}, {"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.test(testClock);", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.test(testClock)", "var_name": "titusRuntime"}, {"original_string": "private final EurekaServerStub eurekaServer = new EurekaServerStub();", "modifier": "private final", "type": "EurekaServerStub", "declarator": "eurekaServer = new EurekaServerStub()", "var_name": "eurekaServer"}], "file": "titus-ext/eureka/src/test/java/com/netflix/titus/ext/eureka/common/SingleServiceLoadBalancerTest.java"}, "test_case": {"identifier": "testChooseWhenFailure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testChooseWhenFailure() {\n        SingleServiceLoadBalancer singleLB = newSingleLB();\n\n        InstanceInfo first = takeNextOrFail(singleLB);\n        singleLB.recordFailure(first);\n\n        InstanceInfo healthy = first == INSTANCE_1 ? INSTANCE_2 : INSTANCE_1;\n        assertThat(asList(takeNextOrFail(singleLB), takeNextOrFail(singleLB))).contains(healthy, healthy);\n\n        // Move time past quarantine period\n        testClock.advanceTime(1, TimeUnit.HOURS);\n        assertThat(asList(takeNextOrFail(singleLB), takeNextOrFail(singleLB))).contains(INSTANCE_1, INSTANCE_2);\n    }", "signature": "void testChooseWhenFailure()", "full_signature": "@Test public void testChooseWhenFailure()", "class_method_signature": "SingleServiceLoadBalancerTest.testChooseWhenFailure()", "testcase": true, "constructor": false, "invocations": ["newSingleLB", "takeNextOrFail", "recordFailure", "contains", "assertThat", "asList", "takeNextOrFail", "takeNextOrFail", "advanceTime", "contains", "assertThat", "asList", "takeNextOrFail", "takeNextOrFail"]}, "focal_class": {"identifier": "SingleServiceLoadBalancer", "superclass": "", "interfaces": "implements Closeable, EurekaEventListener", "fields": [{"original_string": "private static final int INITIAL_DELAY_AFTER_FAILURE_MS = 100;", "modifier": "private static final", "type": "int", "declarator": "INITIAL_DELAY_AFTER_FAILURE_MS = 100", "var_name": "INITIAL_DELAY_AFTER_FAILURE_MS"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final EurekaClient eurekaClient;", "modifier": "private final", "type": "EurekaClient", "declarator": "eurekaClient", "var_name": "eurekaClient"}, {"original_string": "private final String vipAddress;", "modifier": "private final", "type": "String", "declarator": "vipAddress", "var_name": "vipAddress"}, {"original_string": "private final boolean secure;", "modifier": "private final", "type": "boolean", "declarator": "secure", "var_name": "secure"}, {"original_string": "private final AtomicReference<Map<String, EurekaInstance>> eurekaInstancesRef = new AtomicReference<>(Collections.emptyMap());", "modifier": "private final", "type": "AtomicReference<Map<String, EurekaInstance>>", "declarator": "eurekaInstancesRef = new AtomicReference<>(Collections.emptyMap())", "var_name": "eurekaInstancesRef"}], "methods": [{"identifier": "SingleServiceLoadBalancer", "parameters": "(EurekaClient eurekaClient,\n                                     String vipAddress,\n                                     boolean secure,\n                                     TitusRuntime titusRuntime)", "modifiers": "public", "return": "", "signature": " SingleServiceLoadBalancer(EurekaClient eurekaClient,\n                                     String vipAddress,\n                                     boolean secure,\n                                     TitusRuntime titusRuntime)", "full_signature": "public  SingleServiceLoadBalancer(EurekaClient eurekaClient,\n                                     String vipAddress,\n                                     boolean secure,\n                                     TitusRuntime titusRuntime)", "class_method_signature": "SingleServiceLoadBalancer.SingleServiceLoadBalancer(EurekaClient eurekaClient,\n                                     String vipAddress,\n                                     boolean secure,\n                                     TitusRuntime titusRuntime)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SingleServiceLoadBalancer.close()", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(EurekaEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(EurekaEvent event)", "full_signature": "@Override public void onEvent(EurekaEvent event)", "class_method_signature": "SingleServiceLoadBalancer.onEvent(EurekaEvent event)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refresh()", "full_signature": "private void refresh()", "class_method_signature": "SingleServiceLoadBalancer.refresh()", "testcase": false, "constructor": false}, {"identifier": "chooseNext", "parameters": "()", "modifiers": "public", "return": "Optional<InstanceInfo>", "signature": "Optional<InstanceInfo> chooseNext()", "full_signature": "public Optional<InstanceInfo> chooseNext()", "class_method_signature": "SingleServiceLoadBalancer.chooseNext()", "testcase": false, "constructor": false}, {"identifier": "chooseNextHealthy", "parameters": "(Map<String, EurekaInstance> eurekaInstances, long now)", "modifiers": "private", "return": "Optional<InstanceInfo>", "signature": "Optional<InstanceInfo> chooseNextHealthy(Map<String, EurekaInstance> eurekaInstances, long now)", "full_signature": "private Optional<InstanceInfo> chooseNextHealthy(Map<String, EurekaInstance> eurekaInstances, long now)", "class_method_signature": "SingleServiceLoadBalancer.chooseNextHealthy(Map<String, EurekaInstance> eurekaInstances, long now)", "testcase": false, "constructor": false}, {"identifier": "recordSuccess", "parameters": "(InstanceInfo instanceInfo)", "modifiers": "public", "return": "void", "signature": "void recordSuccess(InstanceInfo instanceInfo)", "full_signature": "public void recordSuccess(InstanceInfo instanceInfo)", "class_method_signature": "SingleServiceLoadBalancer.recordSuccess(InstanceInfo instanceInfo)", "testcase": false, "constructor": false}, {"identifier": "recordFailure", "parameters": "(InstanceInfo instanceInfo)", "modifiers": "public", "return": "void", "signature": "void recordFailure(InstanceInfo instanceInfo)", "full_signature": "public void recordFailure(InstanceInfo instanceInfo)", "class_method_signature": "SingleServiceLoadBalancer.recordFailure(InstanceInfo instanceInfo)", "testcase": false, "constructor": false}], "file": "titus-ext/eureka/src/main/java/com/netflix/titus/ext/eureka/common/SingleServiceLoadBalancer.java"}, "focal_method": {"identifier": "recordFailure", "parameters": "(InstanceInfo instanceInfo)", "modifiers": "public", "return": "void", "body": "public void recordFailure(InstanceInfo instanceInfo) {\n        EurekaInstance eurekaInstance = eurekaInstancesRef.get().get(instanceInfo.getId());\n        if (eurekaInstance != null) {\n            eurekaInstance.recordFailure(clock.wallTime());\n        }\n    }", "signature": "void recordFailure(InstanceInfo instanceInfo)", "full_signature": "public void recordFailure(InstanceInfo instanceInfo)", "class_method_signature": "SingleServiceLoadBalancer.recordFailure(InstanceInfo instanceInfo)", "testcase": false, "constructor": false, "invocations": ["get", "get", "getId", "recordFailure", "wallTime"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}