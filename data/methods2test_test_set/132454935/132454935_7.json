{"test_class": {"identifier": "AccountStateServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AccountStateService accountStateService;", "modifier": "private", "type": "AccountStateService", "declarator": "accountStateService", "var_name": "accountStateService"}, {"original_string": "private Accounts accounts;", "modifier": "private", "type": "Accounts", "declarator": "accounts", "var_name": "accounts"}, {"original_string": "private AccountAddress address;", "modifier": "private", "type": "AccountAddress", "declarator": "address", "var_name": "address"}], "file": "elrond-core/src/test/java/network/elrond/account/AccountStateServiceImplTest.java"}, "test_case": {"identifier": "testGetOrCreateaAccountStateWithNonExistingAddress", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetOrCreateaAccountStateWithNonExistingAddress() throws IOException, ClassNotFoundException {\n        AccountState state = accountStateService.getOrCreateAccountState(address, accounts);\n        Assert.assertNotNull(state);\n    }", "signature": "void testGetOrCreateaAccountStateWithNonExistingAddress()", "full_signature": "@Test public void testGetOrCreateaAccountStateWithNonExistingAddress()", "class_method_signature": "AccountStateServiceImplTest.testGetOrCreateaAccountStateWithNonExistingAddress()", "testcase": true, "constructor": false, "invocations": ["getOrCreateAccountState", "assertNotNull"]}, "focal_class": {"identifier": "AccountStateServiceImpl", "superclass": "", "interfaces": "implements AccountStateService", "fields": [{"original_string": "private static final Logger logger = LogManager.getLogger(AccountStateServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LogManager.getLogger(AccountStateServiceImpl.class)", "var_name": "logger"}], "methods": [{"identifier": "getOrCreateAccountState", "parameters": "(AccountAddress address, Accounts accounts)", "modifiers": "@Override public synchronized", "return": "AccountState", "signature": "AccountState getOrCreateAccountState(AccountAddress address, Accounts accounts)", "full_signature": "@Override public synchronized AccountState getOrCreateAccountState(AccountAddress address, Accounts accounts)", "class_method_signature": "AccountStateServiceImpl.getOrCreateAccountState(AccountAddress address, Accounts accounts)", "testcase": false, "constructor": false}, {"identifier": "getAccountState", "parameters": "(AccountAddress address, Accounts accounts)", "modifiers": "@Override public synchronized", "return": "AccountState", "signature": "AccountState getAccountState(AccountAddress address, Accounts accounts)", "full_signature": "@Override public synchronized AccountState getAccountState(AccountAddress address, Accounts accounts)", "class_method_signature": "AccountStateServiceImpl.getAccountState(AccountAddress address, Accounts accounts)", "testcase": false, "constructor": false}, {"identifier": "rollbackAccountStates", "parameters": "(Accounts accounts)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void rollbackAccountStates(Accounts accounts)", "full_signature": "@Override public synchronized void rollbackAccountStates(Accounts accounts)", "class_method_signature": "AccountStateServiceImpl.rollbackAccountStates(Accounts accounts)", "testcase": false, "constructor": false}, {"identifier": "commitAccountStates", "parameters": "(Accounts accounts)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void commitAccountStates(Accounts accounts)", "full_signature": "@Override public synchronized void commitAccountStates(Accounts accounts)", "class_method_signature": "AccountStateServiceImpl.commitAccountStates(Accounts accounts)", "testcase": false, "constructor": false}, {"identifier": "setAccountState", "parameters": "(AccountAddress address, AccountState state, Accounts accounts)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void setAccountState(AccountAddress address, AccountState state, Accounts accounts)", "full_signature": "@Override public synchronized void setAccountState(AccountAddress address, AccountState state, Accounts accounts)", "class_method_signature": "AccountStateServiceImpl.setAccountState(AccountAddress address, AccountState state, Accounts accounts)", "testcase": false, "constructor": false}, {"identifier": "convertAccountStateToRLP", "parameters": "(AccountState accountState)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] convertAccountStateToRLP(AccountState accountState)", "full_signature": "@Override public byte[] convertAccountStateToRLP(AccountState accountState)", "class_method_signature": "AccountStateServiceImpl.convertAccountStateToRLP(AccountState accountState)", "testcase": false, "constructor": false}, {"identifier": "convertToAccountStateFromRLP", "parameters": "(byte[] data)", "modifiers": "@Override public", "return": "AccountState", "signature": "AccountState convertToAccountStateFromRLP(byte[] data)", "full_signature": "@Override public AccountState convertToAccountStateFromRLP(byte[] data)", "class_method_signature": "AccountStateServiceImpl.convertToAccountStateFromRLP(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "initialMintingToKnownAddress", "parameters": "(Accounts accounts)", "modifiers": "@Override public", "return": "void", "signature": "void initialMintingToKnownAddress(Accounts accounts)", "full_signature": "@Override public void initialMintingToKnownAddress(Accounts accounts)", "class_method_signature": "AccountStateServiceImpl.initialMintingToKnownAddress(Accounts accounts)", "testcase": false, "constructor": false}, {"identifier": "generateGenesisBlock", "parameters": "(String initialAddress, BigInteger initialValue, AppState state, AppContext context)", "modifiers": "@Override public", "return": "Fun.Tuple2<Block, Transaction>", "signature": "Fun.Tuple2<Block, Transaction> generateGenesisBlock(String initialAddress, BigInteger initialValue, AppState state, AppContext context)", "full_signature": "@Override public Fun.Tuple2<Block, Transaction> generateGenesisBlock(String initialAddress, BigInteger initialValue, AppState state, AppContext context)", "class_method_signature": "AccountStateServiceImpl.generateGenesisBlock(String initialAddress, BigInteger initialValue, AppState state, AppContext context)", "testcase": false, "constructor": false}], "file": "elrond-core/src/main/java/network/elrond/account/AccountStateServiceImpl.java"}, "focal_method": {"identifier": "getOrCreateAccountState", "parameters": "(AccountAddress address, Accounts accounts)", "modifiers": "@Override public synchronized", "return": "AccountState", "body": "@Override\n    public synchronized AccountState getOrCreateAccountState(AccountAddress address, Accounts accounts) throws IOException, ClassNotFoundException {\n        logger.traceEntry(\"params: {} {}\", address, accounts);\n\n        Util.check(address != null, \"address!=null\");\n        Util.check(accounts != null, \"accounts!=null\");\n\n        AccountState state = getAccountState(address, accounts);\n\n        if (state != null) {\n            logger.trace(\"state not null\");\n            return logger.traceExit(state);\n        }\n\n        logger.trace(\"Create account state...\");\n        setAccountState(address, new AccountState(address), accounts);\n        return logger.traceExit(getAccountState(address, accounts));\n    }", "signature": "AccountState getOrCreateAccountState(AccountAddress address, Accounts accounts)", "full_signature": "@Override public synchronized AccountState getOrCreateAccountState(AccountAddress address, Accounts accounts)", "class_method_signature": "AccountStateServiceImpl.getOrCreateAccountState(AccountAddress address, Accounts accounts)", "testcase": false, "constructor": false, "invocations": ["traceEntry", "check", "check", "getAccountState", "trace", "traceExit", "trace", "setAccountState", "traceExit", "getAccountState"]}, "repository": {"repo_id": 132454935, "url": "https://github.com/ElrondNetwork/elrond-node-prototype", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 16635, "license": "licensed"}}