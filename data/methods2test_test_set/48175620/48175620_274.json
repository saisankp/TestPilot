{"test_class": {"identifier": "RepositoriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int INITIAL_INT_VALUE = 0;", "modifier": "private static final", "type": "int", "declarator": "INITIAL_INT_VALUE = 0", "var_name": "INITIAL_INT_VALUE"}, {"original_string": "private static final int INT_VALUE = 2;", "modifier": "private static final", "type": "int", "declarator": "INT_VALUE = 2", "var_name": "INT_VALUE"}, {"original_string": "private static final String INITIAL_STRING_VALUE = \"init\";", "modifier": "private static final", "type": "String", "declarator": "INITIAL_STRING_VALUE = \"init\"", "var_name": "INITIAL_STRING_VALUE"}, {"original_string": "private static final String STRING_VALUE = \"string\";", "modifier": "private static final", "type": "String", "declarator": "STRING_VALUE = \"string\"", "var_name": "STRING_VALUE"}, {"original_string": "private static final Result<String> RESULT_STRING_VALUE = success(STRING_VALUE);", "modifier": "private static final", "type": "Result<String>", "declarator": "RESULT_STRING_VALUE = success(STRING_VALUE)", "var_name": "RESULT_STRING_VALUE"}, {"original_string": "private static final List<Integer> INITIAL_VALUE = singletonList(1);", "modifier": "private static final", "type": "List<Integer>", "declarator": "INITIAL_VALUE = singletonList(1)", "var_name": "INITIAL_VALUE"}, {"original_string": "private static final List<Integer> LIST = asList(1, 2, 3);", "modifier": "private static final", "type": "List<Integer>", "declarator": "LIST = asList(1, 2, 3)", "var_name": "LIST"}, {"original_string": "private static final List<Integer> OTHER_LIST = asList(4, 5);", "modifier": "private static final", "type": "List<Integer>", "declarator": "OTHER_LIST = asList(4, 5)", "var_name": "OTHER_LIST"}, {"original_string": "private static final List<Integer> LIST_AND_OTHER_LIST = asList(1, 2, 3, 4, 5);", "modifier": "private static final", "type": "List<Integer>", "declarator": "LIST_AND_OTHER_LIST = asList(1, 2, 3, 4, 5)", "var_name": "LIST_AND_OTHER_LIST"}, {"original_string": "private static final List<Integer> LIST_PLUS_TWO = asList(3, 4, 5);", "modifier": "private static final", "type": "List<Integer>", "declarator": "LIST_PLUS_TWO = asList(3, 4, 5)", "var_name": "LIST_PLUS_TWO"}, {"original_string": "private MutableRepository<List<Integer>> listSource;", "modifier": "private", "type": "MutableRepository<List<Integer>>", "declarator": "listSource", "var_name": "listSource"}, {"original_string": "private MutableRepository<List<Integer>> otherListSource;", "modifier": "private", "type": "MutableRepository<List<Integer>>", "declarator": "otherListSource", "var_name": "otherListSource"}, {"original_string": "private MockUpdatable updatable;", "modifier": "private", "type": "MockUpdatable", "declarator": "updatable", "var_name": "updatable"}, {"original_string": "private UpdateDispatcher updateDispatcher;", "modifier": "private", "type": "UpdateDispatcher", "declarator": "updateDispatcher", "var_name": "updateDispatcher"}, {"original_string": "@Mock\n  private Receiver<Integer> mockIntegerReceiver;", "modifier": "@Mock\n  private", "type": "Receiver<Integer>", "declarator": "mockIntegerReceiver", "var_name": "mockIntegerReceiver"}, {"original_string": "@Mock\n  private Receiver<List<Integer>> mockIntegerListReceiver;", "modifier": "@Mock\n  private", "type": "Receiver<List<Integer>>", "declarator": "mockIntegerListReceiver", "var_name": "mockIntegerListReceiver"}, {"original_string": "@Mock\n  private Binder<List<Integer>, String> mockIntegerListStringBinder;", "modifier": "@Mock\n  private", "type": "Binder<List<Integer>, String>", "declarator": "mockIntegerListStringBinder", "var_name": "mockIntegerListStringBinder"}, {"original_string": "@Mock\n  private Supplier<List<Integer>> mockIntegerListSupplier;", "modifier": "@Mock\n  private", "type": "Supplier<List<Integer>>", "declarator": "mockIntegerListSupplier", "var_name": "mockIntegerListSupplier"}, {"original_string": "@Mock\n  private Supplier<String> mockStringSupplier;", "modifier": "@Mock\n  private", "type": "Supplier<String>", "declarator": "mockStringSupplier", "var_name": "mockStringSupplier"}, {"original_string": "@Mock\n  private Supplier<Result<String>> mockResultStringSupplier;", "modifier": "@Mock\n  private", "type": "Supplier<Result<String>>", "declarator": "mockResultStringSupplier", "var_name": "mockResultStringSupplier"}, {"original_string": "@Mock\n  private Supplier<Result<String>> mockFailedResultStringSupplier;", "modifier": "@Mock\n  private", "type": "Supplier<Result<String>>", "declarator": "mockFailedResultStringSupplier", "var_name": "mockFailedResultStringSupplier"}, {"original_string": "@Mock\n  private Function<String, Result<String>> mockResultStringFunction;", "modifier": "@Mock\n  private", "type": "Function<String, Result<String>>", "declarator": "mockResultStringFunction", "var_name": "mockResultStringFunction"}, {"original_string": "@Mock\n  private Function<String, Result<String>> mockFailedResultStringFunction;", "modifier": "@Mock\n  private", "type": "Function<String, Result<String>>", "declarator": "mockFailedResultStringFunction", "var_name": "mockFailedResultStringFunction"}, {"original_string": "@Mock\n  private Predicate<List<Integer>> mockIntegerListPredicate;", "modifier": "@Mock\n  private", "type": "Predicate<List<Integer>>", "declarator": "mockIntegerListPredicate", "var_name": "mockIntegerListPredicate"}, {"original_string": "@Mock\n  private Function<List<Integer>, Integer> mockIntegerListToIntValueFunction;", "modifier": "@Mock\n  private", "type": "Function<List<Integer>, Integer>", "declarator": "mockIntegerListToIntValueFunction", "var_name": "mockIntegerListToIntValueFunction"}, {"original_string": "@Mock\n  private Merger<String, String, Result<String>> mockResultStringMerger;", "modifier": "@Mock\n  private", "type": "Merger<String, String, Result<String>>", "declarator": "mockResultStringMerger", "var_name": "mockResultStringMerger"}, {"original_string": "@Mock\n  private Merger<String, String, Result<String>> mockFailedResultStringMerger;", "modifier": "@Mock\n  private", "type": "Merger<String, String, Result<String>>", "declarator": "mockFailedResultStringMerger", "var_name": "mockFailedResultStringMerger"}], "file": "agera/src/test/java/com/google/android/agera/RepositoriesTest.java"}, "test_case": {"identifier": "shouldUpdateOnExplicitObservable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldUpdateOnExplicitObservable() {\n    final Repository<List<Integer>> repository = repositoryWithInitialValue(INITIAL_VALUE)\n        .observe(updateDispatcher)\n        .onUpdatesPerLoop()\n        .thenGetFrom(mockIntegerListSupplier)\n        .compile();\n\n    updatable.addToObservable(repository);\n    updateDispatcher.update();\n\n    assertThat(repository, has(LIST));\n    verify(mockIntegerListSupplier, times(2)).get();\n  }", "signature": "void shouldUpdateOnExplicitObservable()", "full_signature": "@Test public void shouldUpdateOnExplicitObservable()", "class_method_signature": "RepositoriesTest.shouldUpdateOnExplicitObservable()", "testcase": true, "constructor": false, "invocations": ["compile", "thenGetFrom", "onUpdatesPerLoop", "observe", "repositoryWithInitialValue", "addToObservable", "update", "assertThat", "has", "get", "verify", "times"]}, "focal_class": {"identifier": "Repositories", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "repository", "parameters": "(@NonNull final T object)", "modifiers": "@NonNull public static", "return": "Repository<T>", "signature": "Repository<T> repository(@NonNull final T object)", "full_signature": "@NonNull public static Repository<T> repository(@NonNull final T object)", "class_method_signature": "Repositories.repository(@NonNull final T object)", "testcase": false, "constructor": false}, {"identifier": "repositoryWithInitialValue", "parameters": "(@NonNull final T initialValue)", "modifiers": "@NonNull public static", "return": "REventSource<T, T>", "signature": "REventSource<T, T> repositoryWithInitialValue(@NonNull final T initialValue)", "full_signature": "@NonNull public static REventSource<T, T> repositoryWithInitialValue(@NonNull final T initialValue)", "class_method_signature": "Repositories.repositoryWithInitialValue(@NonNull final T initialValue)", "testcase": false, "constructor": false}, {"identifier": "mutableRepository", "parameters": "(@NonNull final T object)", "modifiers": "@NonNull public static", "return": "MutableRepository<T>", "signature": "MutableRepository<T> mutableRepository(@NonNull final T object)", "full_signature": "@NonNull public static MutableRepository<T> mutableRepository(@NonNull final T object)", "class_method_signature": "Repositories.mutableRepository(@NonNull final T object)", "testcase": false, "constructor": false}, {"identifier": "Repositories", "parameters": "()", "modifiers": "private", "return": "", "signature": " Repositories()", "full_signature": "private  Repositories()", "class_method_signature": "Repositories.Repositories()", "testcase": false, "constructor": true}], "file": "agera/src/main/java/com/google/android/agera/Repositories.java"}, "focal_method": {"identifier": "repositoryWithInitialValue", "parameters": "(@NonNull final T initialValue)", "modifiers": "@NonNull public static", "return": "REventSource<T, T>", "body": "@NonNull\n  public static <T> REventSource<T, T> repositoryWithInitialValue(@NonNull final T initialValue) {\n    return RepositoryCompiler.repositoryWithInitialValue(initialValue);\n  }", "signature": "REventSource<T, T> repositoryWithInitialValue(@NonNull final T initialValue)", "full_signature": "@NonNull public static REventSource<T, T> repositoryWithInitialValue(@NonNull final T initialValue)", "class_method_signature": "Repositories.repositoryWithInitialValue(@NonNull final T initialValue)", "testcase": false, "constructor": false, "invocations": ["repositoryWithInitialValue"]}, "repository": {"repo_id": 48175620, "url": "https://github.com/google/agera", "language": "Java", "is_fork": false, "fork_count": 669, "stargazer_count": 7333, "size": 968, "license": "licensed"}}