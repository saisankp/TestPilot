{"test_class": {"identifier": "ChainedHostResolverTest", "superclass": "", "interfaces": "", "fields": [], "file": "browserup-proxy-core/src/test/java/com/browserup/bup/proxy/dns/ChainedHostResolverTest.java"}, "test_case": {"identifier": "testGetterUsesFirstResolver", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetterUsesFirstResolver() {\n        AdvancedHostResolver firstResolver = mock(AdvancedHostResolver.class);\n        AdvancedHostResolver secondResolver = mock(AdvancedHostResolver.class);\n        ChainedHostResolver chainResolver = new ChainedHostResolver(ImmutableList.of(firstResolver, secondResolver));\n\n        when(firstResolver.getOriginalHostnames(\"one\")).thenReturn(ImmutableList.of(\"originalOne\"));\n\n        Collection<String> results = chainResolver.getOriginalHostnames(\"one\");\n        assertNotNull(\"Resolver should not return null results\", results);\n        assertThat(\"Expected resolver to return a result\", results, not(empty()));\n        assertEquals(\"Resolver returned unexpected result\", \"originalOne\", Iterables.get(results, 0));\n\n        verify(secondResolver, never()).getOriginalHostnames(any(String.class));\n    }", "signature": "void testGetterUsesFirstResolver()", "full_signature": "@Test public void testGetterUsesFirstResolver()", "class_method_signature": "ChainedHostResolverTest.testGetterUsesFirstResolver()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "of", "thenReturn", "when", "getOriginalHostnames", "of", "getOriginalHostnames", "assertNotNull", "assertThat", "not", "empty", "assertEquals", "get", "getOriginalHostnames", "verify", "never", "any"]}, "focal_class": {"identifier": "ChainedHostResolver", "superclass": "", "interfaces": "implements AdvancedHostResolver", "fields": [{"original_string": "private final List<? extends AdvancedHostResolver> resolvers;", "modifier": "private final", "type": "List<? extends AdvancedHostResolver>", "declarator": "resolvers", "var_name": "resolvers"}, {"original_string": "private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReadWriteLock", "declarator": "readWriteLock = new ReentrantReadWriteLock()", "var_name": "readWriteLock"}, {"original_string": "private final Lock readLock = readWriteLock.readLock();", "modifier": "private final", "type": "Lock", "declarator": "readLock = readWriteLock.readLock()", "var_name": "readLock"}, {"original_string": "private final Lock writeLock = readWriteLock.writeLock();", "modifier": "private final", "type": "Lock", "declarator": "writeLock = readWriteLock.writeLock()", "var_name": "writeLock"}], "methods": [{"identifier": "ChainedHostResolver", "parameters": "(Collection<? extends AdvancedHostResolver> resolvers)", "modifiers": "public", "return": "", "signature": " ChainedHostResolver(Collection<? extends AdvancedHostResolver> resolvers)", "full_signature": "public  ChainedHostResolver(Collection<? extends AdvancedHostResolver> resolvers)", "class_method_signature": "ChainedHostResolver.ChainedHostResolver(Collection<? extends AdvancedHostResolver> resolvers)", "testcase": false, "constructor": true}, {"identifier": "getResolvers", "parameters": "()", "modifiers": "public", "return": "Collection<? extends AdvancedHostResolver>", "signature": "Collection<? extends AdvancedHostResolver> getResolvers()", "full_signature": "public Collection<? extends AdvancedHostResolver> getResolvers()", "class_method_signature": "ChainedHostResolver.getResolvers()", "testcase": false, "constructor": false}, {"identifier": "remapHosts", "parameters": "(Map<String, String> hostRemappings)", "modifiers": "@Override public", "return": "void", "signature": "void remapHosts(Map<String, String> hostRemappings)", "full_signature": "@Override public void remapHosts(Map<String, String> hostRemappings)", "class_method_signature": "ChainedHostResolver.remapHosts(Map<String, String> hostRemappings)", "testcase": false, "constructor": false}, {"identifier": "remapHost", "parameters": "(String originalHost, String remappedHost)", "modifiers": "@Override public", "return": "void", "signature": "void remapHost(String originalHost, String remappedHost)", "full_signature": "@Override public void remapHost(String originalHost, String remappedHost)", "class_method_signature": "ChainedHostResolver.remapHost(String originalHost, String remappedHost)", "testcase": false, "constructor": false}, {"identifier": "removeHostRemapping", "parameters": "(String originalHost)", "modifiers": "@Override public", "return": "void", "signature": "void removeHostRemapping(String originalHost)", "full_signature": "@Override public void removeHostRemapping(String originalHost)", "class_method_signature": "ChainedHostResolver.removeHostRemapping(String originalHost)", "testcase": false, "constructor": false}, {"identifier": "clearHostRemappings", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearHostRemappings()", "full_signature": "@Override public void clearHostRemappings()", "class_method_signature": "ChainedHostResolver.clearHostRemappings()", "testcase": false, "constructor": false}, {"identifier": "getHostRemappings", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getHostRemappings()", "full_signature": "@Override public Map<String, String> getHostRemappings()", "class_method_signature": "ChainedHostResolver.getHostRemappings()", "testcase": false, "constructor": false}, {"identifier": "getOriginalHostnames", "parameters": "(String remappedHost)", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> getOriginalHostnames(String remappedHost)", "full_signature": "@Override public Collection<String> getOriginalHostnames(String remappedHost)", "class_method_signature": "ChainedHostResolver.getOriginalHostnames(String remappedHost)", "testcase": false, "constructor": false}, {"identifier": "clearDNSCache", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearDNSCache()", "full_signature": "@Override public void clearDNSCache()", "class_method_signature": "ChainedHostResolver.clearDNSCache()", "testcase": false, "constructor": false}, {"identifier": "setPositiveDNSCacheTimeout", "parameters": "(int timeout, TimeUnit timeUnit)", "modifiers": "@Override public", "return": "void", "signature": "void setPositiveDNSCacheTimeout(int timeout, TimeUnit timeUnit)", "full_signature": "@Override public void setPositiveDNSCacheTimeout(int timeout, TimeUnit timeUnit)", "class_method_signature": "ChainedHostResolver.setPositiveDNSCacheTimeout(int timeout, TimeUnit timeUnit)", "testcase": false, "constructor": false}, {"identifier": "setNegativeDNSCacheTimeout", "parameters": "(int timeout, TimeUnit timeUnit)", "modifiers": "@Override public", "return": "void", "signature": "void setNegativeDNSCacheTimeout(int timeout, TimeUnit timeUnit)", "full_signature": "@Override public void setNegativeDNSCacheTimeout(int timeout, TimeUnit timeUnit)", "class_method_signature": "ChainedHostResolver.setNegativeDNSCacheTimeout(int timeout, TimeUnit timeUnit)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(String host)", "modifiers": "@Override public", "return": "Collection<InetAddress>", "signature": "Collection<InetAddress> resolve(String host)", "full_signature": "@Override public Collection<InetAddress> resolve(String host)", "class_method_signature": "ChainedHostResolver.resolve(String host)", "testcase": false, "constructor": false}], "file": "browserup-proxy-core/src/main/java/com/browserup/bup/proxy/dns/ChainedHostResolver.java"}, "focal_method": {"identifier": "getOriginalHostnames", "parameters": "(String remappedHost)", "modifiers": "@Override public", "return": "Collection<String>", "body": "@Override\n    public Collection<String> getOriginalHostnames(String remappedHost) {\n        readLock.lock();\n        try {\n            if (resolvers.isEmpty()) {\n                return emptyList();\n            } else {\n                return resolvers.get(0).getOriginalHostnames(remappedHost);\n            }\n        } finally {\n            readLock.unlock();\n        }\n    }", "signature": "Collection<String> getOriginalHostnames(String remappedHost)", "full_signature": "@Override public Collection<String> getOriginalHostnames(String remappedHost)", "class_method_signature": "ChainedHostResolver.getOriginalHostnames(String remappedHost)", "testcase": false, "constructor": false, "invocations": ["lock", "isEmpty", "emptyList", "getOriginalHostnames", "get", "unlock"]}, "repository": {"repo_id": 169301877, "url": "https://github.com/browserup/browserup-proxy", "stars": 81, "created": "2/5/2019 7:46:52 PM +00:00", "updates": "2020-01-22T23:08:46+00:00", "fork": "False", "license": "licensed"}}