{"test_class": {"identifier": "StopWatchTest", "superclass": "", "interfaces": "", "fields": [], "file": "shared/src/test/java/org/eclipse/steady/shared/util/StopWatchTest.java"}, "test_case": {"identifier": "testGetRuntimeMillis", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetRuntimeMillis() {\n    final StopWatch sw = new StopWatch(\"foo\").start();\n    sw.lap(\"bar\", false); // Should not be printed due to threshold\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException e) {\n    }\n    sw.lap(\"baz\", true);\n    sw.stop();\n    final long rt = sw.getRuntimeMillis();\n    assertTrue(rt < 50000);\n  }", "signature": "void testGetRuntimeMillis()", "full_signature": "@Test public void testGetRuntimeMillis()", "class_method_signature": "StopWatchTest.testGetRuntimeMillis()", "testcase": true, "constructor": false, "invocations": ["start", "lap", "sleep", "lap", "stop", "getRuntimeMillis", "assertTrue"]}, "focal_class": {"identifier": "StopWatch", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}, {"original_string": "private String id;", "modifier": "private", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private long startMillis = -1;", "modifier": "private", "type": "long", "declarator": "startMillis = -1", "var_name": "startMillis"}, {"original_string": "private long start = -1;", "modifier": "private", "type": "long", "declarator": "start = -1", "var_name": "start"}, {"original_string": "private long stop = -1;", "modifier": "private", "type": "long", "declarator": "stop = -1", "var_name": "stop"}, {"original_string": "private LinkedList<Long> lapTimes = new LinkedList<Long>();", "modifier": "private", "type": "LinkedList<Long>", "declarator": "lapTimes = new LinkedList<Long>()", "var_name": "lapTimes"}, {"original_string": "private LinkedList<Long> lapsTakenAt = new LinkedList<Long>();", "modifier": "private", "type": "LinkedList<Long>", "declarator": "lapsTakenAt = new LinkedList<Long>()", "var_name": "lapsTakenAt"}, {"original_string": "private ProgressTracker progressTracker = null;", "modifier": "private", "type": "ProgressTracker", "declarator": "progressTracker = null", "var_name": "progressTracker"}, {"original_string": "private String activityDescription = null;", "modifier": "private", "type": "String", "declarator": "activityDescription = null", "var_name": "activityDescription"}, {"original_string": "private long LAP_TIME_LOG_THRESHOLD = 5L * 1000L * 1000L * 1000L;", "modifier": "private", "type": "long", "declarator": "LAP_TIME_LOG_THRESHOLD = 5L * 1000L * 1000L * 1000L", "var_name": "LAP_TIME_LOG_THRESHOLD"}, {"original_string": "private double COMPLETION_RATE_LOG_THRESHOLD = 5;", "modifier": "private", "type": "double", "declarator": "COMPLETION_RATE_LOG_THRESHOLD = 5", "var_name": "COMPLETION_RATE_LOG_THRESHOLD"}, {"original_string": "private static final String FAILED = \"Failed\";", "modifier": "private static final", "type": "String", "declarator": "FAILED = \"Failed\"", "var_name": "FAILED"}], "methods": [{"identifier": "StopWatch", "parameters": "(String _descr)", "modifiers": "public", "return": "", "signature": " StopWatch(String _descr)", "full_signature": "public  StopWatch(String _descr)", "class_method_signature": "StopWatch.StopWatch(String _descr)", "testcase": false, "constructor": true}, {"identifier": "StopWatch", "parameters": "(String _descr, double _total, boolean _start)", "modifiers": "private", "return": "", "signature": " StopWatch(String _descr, double _total, boolean _start)", "full_signature": "private  StopWatch(String _descr, double _total, boolean _start)", "class_method_signature": "StopWatch.StopWatch(String _descr, double _total, boolean _start)", "testcase": false, "constructor": true}, {"identifier": "setTotal", "parameters": "(double _total)", "modifiers": "public", "return": "StopWatch", "signature": "StopWatch setTotal(double _total)", "full_signature": "public StopWatch setTotal(double _total)", "class_method_signature": "StopWatch.setTotal(double _total)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "StopWatch", "signature": "StopWatch start()", "full_signature": "public StopWatch start()", "class_method_signature": "StopWatch.start()", "testcase": false, "constructor": false}, {"identifier": "progress", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long progress()", "full_signature": "public long progress()", "class_method_signature": "StopWatch.progress()", "testcase": false, "constructor": false}, {"identifier": "progress", "parameters": "(double _by, boolean _force_log)", "modifiers": "public", "return": "long", "signature": "long progress(double _by, boolean _force_log)", "full_signature": "public long progress(double _by, boolean _force_log)", "class_method_signature": "StopWatch.progress(double _by, boolean _force_log)", "testcase": false, "constructor": false}, {"identifier": "lap", "parameters": "(String _message)", "modifiers": "public", "return": "long", "signature": "long lap(String _message)", "full_signature": "public long lap(String _message)", "class_method_signature": "StopWatch.lap(String _message)", "testcase": false, "constructor": false}, {"identifier": "getMaxLapTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMaxLapTime()", "full_signature": "public long getMaxLapTime()", "class_method_signature": "StopWatch.getMaxLapTime()", "testcase": false, "constructor": false}, {"identifier": "getAvgLapTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getAvgLapTime()", "full_signature": "public long getAvgLapTime()", "class_method_signature": "StopWatch.getAvgLapTime()", "testcase": false, "constructor": false}, {"identifier": "lap", "parameters": "(String _message, boolean _force_log)", "modifiers": "public", "return": "long", "signature": "long lap(String _message, boolean _force_log)", "full_signature": "public long lap(String _message, boolean _force_log)", "class_method_signature": "StopWatch.lap(String _message, boolean _force_log)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "StopWatch.stop()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "(Exception _e)", "modifiers": "public", "return": "void", "signature": "void stop(Exception _e)", "full_signature": "public void stop(Exception _e)", "class_method_signature": "StopWatch.stop(Exception _e)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(String _msg1, Long _lap_time, @NotNull String _msg2)", "modifiers": "private", "return": "void", "signature": "void log(String _msg1, Long _lap_time, @NotNull String _msg2)", "full_signature": "private void log(String _msg1, Long _lap_time, @NotNull String _msg2)", "class_method_signature": "StopWatch.log(String _msg1, Long _lap_time, @NotNull String _msg2)", "testcase": false, "constructor": false}, {"identifier": "getStartMillis", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getStartMillis()", "full_signature": "public long getStartMillis()", "class_method_signature": "StopWatch.getStartMillis()", "testcase": false, "constructor": false}, {"identifier": "getRuntime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getRuntime()", "full_signature": "public long getRuntime()", "class_method_signature": "StopWatch.getRuntime()", "testcase": false, "constructor": false}, {"identifier": "getRuntimeMillis", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getRuntimeMillis()", "full_signature": "public long getRuntimeMillis()", "class_method_signature": "StopWatch.getRuntimeMillis()", "testcase": false, "constructor": false}, {"identifier": "isStarted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStarted()", "full_signature": "public boolean isStarted()", "class_method_signature": "StopWatch.isStarted()", "testcase": false, "constructor": false}, {"identifier": "isRunning", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRunning()", "full_signature": "public boolean isRunning()", "class_method_signature": "StopWatch.isRunning()", "testcase": false, "constructor": false}], "file": "shared/src/main/java/org/eclipse/steady/shared/util/StopWatch.java"}, "focal_method": {"identifier": "getRuntimeMillis", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long getRuntimeMillis() {\n    final long nano = this.getRuntime();\n    return nano / 1000000L;\n  }", "signature": "long getRuntimeMillis()", "full_signature": "public long getRuntimeMillis()", "class_method_signature": "StopWatch.getRuntimeMillis()", "testcase": false, "constructor": false, "invocations": ["getRuntime"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}