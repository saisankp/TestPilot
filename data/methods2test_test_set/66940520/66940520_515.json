{"test_class": {"identifier": "DateUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dhis-2/dhis-api/src/test/java/org/hisp/dhis/util/DateUtilsTest.java"}, "test_case": {"identifier": "testMaxCollection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMaxCollection()\n    {\n        Date date1 = new DateTime( 2014, 5, 15, 3, 3 ).toDate();\n        Date date2 = new DateTime( 2014, 5, 18, 1, 1 ).toDate();\n        Date date3 = new DateTime( 2014, 6, 10, 1, 1 ).toDate();\n        Date date4 = null;\n        Date date5 = null;\n        Date date6 = null;\n\n        assertEquals( date2, DateUtils.max( Sets.newHashSet( date1, date2, date4 ) ) );\n        assertEquals( date2, DateUtils.max( Sets.newHashSet( date2, date1, date4 ) ) );\n        assertEquals( date3, DateUtils.max( Sets.newHashSet( date1, date2, date3 ) ) );\n        assertEquals( date3, DateUtils.max( Sets.newHashSet( date1, date2, date3 ) ) );\n        assertEquals( date3, DateUtils.max( Sets.newHashSet( date3, date4, date5 ) ) );\n        assertEquals( null, DateUtils.max( Sets.newHashSet( date4, date5, date6 ) ) );\n        assertEquals( date1, DateUtils.max( Sets.newHashSet( date1, date5, date4 ) ) );\n\n        assertNull( DateUtils.max( Sets.newHashSet( date4, date5, date6 ) ) );\n    }", "signature": "void testMaxCollection()", "full_signature": "@Test public void testMaxCollection()", "class_method_signature": "DateUtilsTest.testMaxCollection()", "testcase": true, "constructor": false, "invocations": ["toDate", "toDate", "toDate", "assertEquals", "max", "newHashSet", "assertEquals", "max", "newHashSet", "assertEquals", "max", "newHashSet", "assertEquals", "max", "newHashSet", "assertEquals", "max", "newHashSet", "assertEquals", "max", "newHashSet", "assertEquals", "max", "newHashSet", "assertNull", "max", "newHashSet"]}, "focal_class": {"identifier": "DateUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static DateTimeFormatter ISO8601 = DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" );", "modifier": "private static", "type": "DateTimeFormatter", "declarator": "ISO8601 = DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" )", "var_name": "ISO8601"}, {"original_string": "private static DateTimeFormatter ISO8601_NO_TZ = DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss.SSS\" );", "modifier": "private static", "type": "DateTimeFormatter", "declarator": "ISO8601_NO_TZ = DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss.SSS\" )", "var_name": "ISO8601_NO_TZ"}, {"original_string": "private static final String DEFAULT_DATE_REGEX = \"\\\\b(?<year>\\\\d{4})-(?<month>0[1-9]|1[0-2])-(?<day>0[1-9]|[1-2][0-9]|3[0-2])(?<time>.*)\\\\b\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_DATE_REGEX = \"\\\\b(?<year>\\\\d{4})-(?<month>0[1-9]|1[0-2])-(?<day>0[1-9]|[1-2][0-9]|3[0-2])(?<time>.*)\\\\b\"", "var_name": "DEFAULT_DATE_REGEX"}, {"original_string": "private static final Pattern DEFAULT_DATE_REGEX_PATTERN = Pattern.compile( DEFAULT_DATE_REGEX );", "modifier": "private static final", "type": "Pattern", "declarator": "DEFAULT_DATE_REGEX_PATTERN = Pattern.compile( DEFAULT_DATE_REGEX )", "var_name": "DEFAULT_DATE_REGEX_PATTERN"}, {"original_string": "private static final DateTimeParser[] SUPPORTED_DATE_FORMAT_PARSERS = {\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss.SSS\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ssZ\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mmZ\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HHZ\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd HH:mm:ssZ\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy\" ).getParser()\n    };", "modifier": "private static final", "type": "DateTimeParser[]", "declarator": "SUPPORTED_DATE_FORMAT_PARSERS = {\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss.SSS\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ssZ\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mmZ\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HHZ\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd HH:mm:ssZ\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy\" ).getParser()\n    }", "var_name": "SUPPORTED_DATE_FORMAT_PARSERS"}, {"original_string": "private static final DateTimeFormatter DATE_FORMATTER = new DateTimeFormatterBuilder()\n        .append( null, SUPPORTED_DATE_FORMAT_PARSERS ).toFormatter();", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "DATE_FORMATTER = new DateTimeFormatterBuilder()\n        .append( null, SUPPORTED_DATE_FORMAT_PARSERS ).toFormatter()", "var_name": "DATE_FORMATTER"}, {"original_string": "private static final DateTimeParser[] SUPPORTED_DATE_TIME_FORMAT_PARSERS = {\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ssZ\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mmZ\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm\" ).getParser()\n    };", "modifier": "private static final", "type": "DateTimeParser[]", "declarator": "SUPPORTED_DATE_TIME_FORMAT_PARSERS = {\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ssZ\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mmZ\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss\" ).getParser(),\n        DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm\" ).getParser()\n    }", "var_name": "SUPPORTED_DATE_TIME_FORMAT_PARSERS"}, {"original_string": "private static final DateTimeFormatter DATE_TIME_FORMAT = ( new DateTimeFormatterBuilder() )\n        .append( null, SUPPORTED_DATE_TIME_FORMAT_PARSERS ).toFormatter();", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "DATE_TIME_FORMAT = ( new DateTimeFormatterBuilder() )\n        .append( null, SUPPORTED_DATE_TIME_FORMAT_PARSERS ).toFormatter()", "var_name": "DATE_TIME_FORMAT"}, {"original_string": "public static final PeriodFormatter DAY_SECOND_FORMAT = new PeriodFormatterBuilder()\n        .appendDays().appendSuffix( \" d\" ).appendSeparator( \", \" )\n        .appendHours().appendSuffix( \" h\" ).appendSeparator( \", \" )\n        .appendMinutes().appendSuffix( \" m\" ).appendSeparator( \", \" )\n        .appendSeconds().appendSuffix( \" s\" ).appendSeparator( \", \" ).toFormatter();", "modifier": "public static final", "type": "PeriodFormatter", "declarator": "DAY_SECOND_FORMAT = new PeriodFormatterBuilder()\n        .appendDays().appendSuffix( \" d\" ).appendSeparator( \", \" )\n        .appendHours().appendSuffix( \" h\" ).appendSeparator( \", \" )\n        .appendMinutes().appendSuffix( \" m\" ).appendSeparator( \", \" )\n        .appendSeconds().appendSuffix( \" s\" ).appendSeparator( \", \" ).toFormatter()", "var_name": "DAY_SECOND_FORMAT"}, {"original_string": "private static final DateTimeFormatter MEDIUM_DATE_FORMAT = DateTimeFormat.forPattern( \"yyyy-MM-dd\" );", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "MEDIUM_DATE_FORMAT = DateTimeFormat.forPattern( \"yyyy-MM-dd\" )", "var_name": "MEDIUM_DATE_FORMAT"}, {"original_string": "private static final DateTimeFormatter LONG_DATE_FORMAT = DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss\" );", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "LONG_DATE_FORMAT = DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss\" )", "var_name": "LONG_DATE_FORMAT"}, {"original_string": "private static final DateTimeFormatter HTTP_DATE_FORMAT = DateTimeFormat.forPattern( \"EEE, dd MMM yyyy HH:mm:ss 'GMT'\" ).withLocale( Locale.ENGLISH );", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "HTTP_DATE_FORMAT = DateTimeFormat.forPattern( \"EEE, dd MMM yyyy HH:mm:ss 'GMT'\" ).withLocale( Locale.ENGLISH )", "var_name": "HTTP_DATE_FORMAT"}, {"original_string": "private static final DateTimeFormatter TIMESTAMP_UTC_TZ_FORMAT = DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" ).withZoneUTC();", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "TIMESTAMP_UTC_TZ_FORMAT = DateTimeFormat.forPattern( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" ).withZoneUTC()", "var_name": "TIMESTAMP_UTC_TZ_FORMAT"}, {"original_string": "public static final double DAYS_IN_YEAR = 365.0;", "modifier": "public static final", "type": "double", "declarator": "DAYS_IN_YEAR = 365.0", "var_name": "DAYS_IN_YEAR"}, {"original_string": "private static final long MS_PER_DAY = 86400000;", "modifier": "private static final", "type": "long", "declarator": "MS_PER_DAY = 86400000", "var_name": "MS_PER_DAY"}, {"original_string": "private static final long MS_PER_S = 1000;", "modifier": "private static final", "type": "long", "declarator": "MS_PER_S = 1000", "var_name": "MS_PER_S"}, {"original_string": "private static final Pattern DURATION_PATTERN = Pattern.compile( \"^(\\\\d+)(d|h|m|s)$\" );", "modifier": "private static final", "type": "Pattern", "declarator": "DURATION_PATTERN = Pattern.compile( \"^(\\\\d+)(d|h|m|s)$\" )", "var_name": "DURATION_PATTERN"}, {"original_string": "private static final Map<String, ChronoUnit> TEMPORAL_MAP = ImmutableMap.of(\n        \"d\", ChronoUnit.DAYS, \"h\", ChronoUnit.HOURS, \"m\", ChronoUnit.MINUTES, \"s\", ChronoUnit.SECONDS );", "modifier": "private static final", "type": "Map<String, ChronoUnit>", "declarator": "TEMPORAL_MAP = ImmutableMap.of(\n        \"d\", ChronoUnit.DAYS, \"h\", ChronoUnit.HOURS, \"m\", ChronoUnit.MINUTES, \"s\", ChronoUnit.SECONDS )", "var_name": "TEMPORAL_MAP"}], "methods": [{"identifier": "getIso8601", "parameters": "( Date date )", "modifiers": "public static", "return": "String", "signature": "String getIso8601( Date date )", "full_signature": "public static String getIso8601( Date date )", "class_method_signature": "DateUtils.getIso8601( Date date )", "testcase": false, "constructor": false}, {"identifier": "getIso8601NoTz", "parameters": "( Date date )", "modifiers": "public static", "return": "String", "signature": "String getIso8601NoTz( Date date )", "full_signature": "public static String getIso8601NoTz( Date date )", "class_method_signature": "DateUtils.getIso8601NoTz( Date date )", "testcase": false, "constructor": false}, {"identifier": "getLongGmtDateString", "parameters": "( Date date )", "modifiers": "public static", "return": "String", "signature": "String getLongGmtDateString( Date date )", "full_signature": "public static String getLongGmtDateString( Date date )", "class_method_signature": "DateUtils.getLongGmtDateString( Date date )", "testcase": false, "constructor": false}, {"identifier": "getLongDateString", "parameters": "( Date date )", "modifiers": "public static", "return": "String", "signature": "String getLongDateString( Date date )", "full_signature": "public static String getLongDateString( Date date )", "class_method_signature": "DateUtils.getLongDateString( Date date )", "testcase": false, "constructor": false}, {"identifier": "getLongDateString", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getLongDateString()", "full_signature": "public static String getLongDateString()", "class_method_signature": "DateUtils.getLongDateString()", "testcase": false, "constructor": false}, {"identifier": "getMediumDateString", "parameters": "( Date date )", "modifiers": "public static", "return": "String", "signature": "String getMediumDateString( Date date )", "full_signature": "public static String getMediumDateString( Date date )", "class_method_signature": "DateUtils.getMediumDateString( Date date )", "testcase": false, "constructor": false}, {"identifier": "getMediumDateString", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getMediumDateString()", "full_signature": "public static String getMediumDateString()", "class_method_signature": "DateUtils.getMediumDateString()", "testcase": false, "constructor": false}, {"identifier": "getHttpDateString", "parameters": "( Date date )", "modifiers": "public static", "return": "String", "signature": "String getHttpDateString( Date date )", "full_signature": "public static String getHttpDateString( Date date )", "class_method_signature": "DateUtils.getHttpDateString( Date date )", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "( Date date1, Date date2 )", "modifiers": "public static", "return": "Date", "signature": "Date max( Date date1, Date date2 )", "full_signature": "public static Date max( Date date1, Date date2 )", "class_method_signature": "DateUtils.max( Date date1, Date date2 )", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "( Collection<Date> dates )", "modifiers": "public static", "return": "Date", "signature": "Date max( Collection<Date> dates )", "full_signature": "public static Date max( Collection<Date> dates )", "class_method_signature": "DateUtils.max( Collection<Date> dates )", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "( Date date1, Date date2 )", "modifiers": "public static", "return": "Date", "signature": "Date min( Date date1, Date date2 )", "full_signature": "public static Date min( Date date1, Date date2 )", "class_method_signature": "DateUtils.min( Date date1, Date date2 )", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "( Collection<Date> dates )", "modifiers": "public static", "return": "Date", "signature": "Date min( Collection<Date> dates )", "full_signature": "public static Date min( Collection<Date> dates )", "class_method_signature": "DateUtils.min( Collection<Date> dates )", "testcase": false, "constructor": false}, {"identifier": "getMediumDate", "parameters": "( String string )", "modifiers": "public static", "return": "Date", "signature": "Date getMediumDate( String string )", "full_signature": "public static Date getMediumDate( String string )", "class_method_signature": "DateUtils.getMediumDate( String string )", "testcase": false, "constructor": false}, {"identifier": "between", "parameters": "( Date baseDate, Date startDate, Date endDate )", "modifiers": "public static", "return": "boolean", "signature": "boolean between( Date baseDate, Date startDate, Date endDate )", "full_signature": "public static boolean between( Date baseDate, Date startDate, Date endDate )", "class_method_signature": "DateUtils.between( Date baseDate, Date startDate, Date endDate )", "testcase": false, "constructor": false}, {"identifier": "strictlyBetween", "parameters": "( Date baseDate, Date startDate, Date endDate )", "modifiers": "public static", "return": "boolean", "signature": "boolean strictlyBetween( Date baseDate, Date startDate, Date endDate )", "full_signature": "public static boolean strictlyBetween( Date baseDate, Date startDate, Date endDate )", "class_method_signature": "DateUtils.strictlyBetween( Date baseDate, Date startDate, Date endDate )", "testcase": false, "constructor": false}, {"identifier": "getDays", "parameters": "( Date date )", "modifiers": "public static", "return": "long", "signature": "long getDays( Date date )", "full_signature": "public static long getDays( Date date )", "class_method_signature": "DateUtils.getDays( Date date )", "testcase": false, "constructor": false}, {"identifier": "getDays", "parameters": "( Date startDate, Date endDate )", "modifiers": "public static", "return": "long", "signature": "long getDays( Date startDate, Date endDate )", "full_signature": "public static long getDays( Date startDate, Date endDate )", "class_method_signature": "DateUtils.getDays( Date startDate, Date endDate )", "testcase": false, "constructor": false}, {"identifier": "getDaysInclusive", "parameters": "( Date startDate, Date endDate )", "modifiers": "public static", "return": "long", "signature": "long getDaysInclusive( Date startDate, Date endDate )", "full_signature": "public static long getDaysInclusive( Date startDate, Date endDate )", "class_method_signature": "DateUtils.getDaysInclusive( Date startDate, Date endDate )", "testcase": false, "constructor": false}, {"identifier": "daysBetween", "parameters": "( Date startDate, Date endDate )", "modifiers": "public static", "return": "int", "signature": "int daysBetween( Date startDate, Date endDate )", "full_signature": "public static int daysBetween( Date startDate, Date endDate )", "class_method_signature": "DateUtils.daysBetween( Date startDate, Date endDate )", "testcase": false, "constructor": false}, {"identifier": "isToday", "parameters": "( Date date )", "modifiers": "public static", "return": "boolean", "signature": "boolean isToday( Date date )", "full_signature": "public static boolean isToday( Date date )", "class_method_signature": "DateUtils.isToday( Date date )", "testcase": false, "constructor": false}, {"identifier": "monthsBetween", "parameters": "( Date startDate, Date endDate )", "modifiers": "public static", "return": "int", "signature": "int monthsBetween( Date startDate, Date endDate )", "full_signature": "public static int monthsBetween( Date startDate, Date endDate )", "class_method_signature": "DateUtils.monthsBetween( Date startDate, Date endDate )", "testcase": false, "constructor": false}, {"identifier": "daysSince1900", "parameters": "( Date date )", "modifiers": "public static", "return": "int", "signature": "int daysSince1900( Date date )", "full_signature": "public static int daysSince1900( Date date )", "class_method_signature": "DateUtils.daysSince1900( Date date )", "testcase": false, "constructor": false}, {"identifier": "getNextDate", "parameters": "( int hourOfDay, Date now )", "modifiers": "public static", "return": "Date", "signature": "Date getNextDate( int hourOfDay, Date now )", "full_signature": "public static Date getNextDate( int hourOfDay, Date now )", "class_method_signature": "DateUtils.getNextDate( int hourOfDay, Date now )", "testcase": false, "constructor": false}, {"identifier": "getEpoch", "parameters": "()", "modifiers": "public static", "return": "Date", "signature": "Date getEpoch()", "full_signature": "public static Date getEpoch()", "class_method_signature": "DateUtils.getEpoch()", "testcase": false, "constructor": false}, {"identifier": "getSqlDateString", "parameters": "( Date date )", "modifiers": "public static", "return": "String", "signature": "String getSqlDateString( Date date )", "full_signature": "public static String getSqlDateString( Date date )", "class_method_signature": "DateUtils.getSqlDateString( Date date )", "testcase": false, "constructor": false}, {"identifier": "dateIsValid", "parameters": "( String dateString )", "modifiers": "public static", "return": "boolean", "signature": "boolean dateIsValid( String dateString )", "full_signature": "public static boolean dateIsValid( String dateString )", "class_method_signature": "DateUtils.dateIsValid( String dateString )", "testcase": false, "constructor": false}, {"identifier": "dateIsValid", "parameters": "( org.hisp.dhis.calendar.Calendar calendar, String dateString )", "modifiers": "public static", "return": "boolean", "signature": "boolean dateIsValid( org.hisp.dhis.calendar.Calendar calendar, String dateString )", "full_signature": "public static boolean dateIsValid( org.hisp.dhis.calendar.Calendar calendar, String dateString )", "class_method_signature": "DateUtils.dateIsValid( org.hisp.dhis.calendar.Calendar calendar, String dateString )", "testcase": false, "constructor": false}, {"identifier": "dateTimeIsValid", "parameters": "( final String dateTimeString )", "modifiers": "public static", "return": "boolean", "signature": "boolean dateTimeIsValid( final String dateTimeString )", "full_signature": "public static boolean dateTimeIsValid( final String dateTimeString )", "class_method_signature": "DateUtils.dateTimeIsValid( final String dateTimeString )", "testcase": false, "constructor": false}, {"identifier": "getSecondsUntilTomorrow", "parameters": "( int hour )", "modifiers": "public static", "return": "long", "signature": "long getSecondsUntilTomorrow( int hour )", "full_signature": "public static long getSecondsUntilTomorrow( int hour )", "class_method_signature": "DateUtils.getSecondsUntilTomorrow( int hour )", "testcase": false, "constructor": false}, {"identifier": "getDateForTomorrow", "parameters": "( int hour )", "modifiers": "public static", "return": "Date", "signature": "Date getDateForTomorrow( int hour )", "full_signature": "public static Date getDateForTomorrow( int hour )", "class_method_signature": "DateUtils.getDateForTomorrow( int hour )", "testcase": false, "constructor": false}, {"identifier": "getDateAfterAddition", "parameters": "( Date date, int days )", "modifiers": "public static", "return": "Date", "signature": "Date getDateAfterAddition( Date date, int days )", "full_signature": "public static Date getDateAfterAddition( Date date, int days )", "class_method_signature": "DateUtils.getDateAfterAddition( Date date, int days )", "testcase": false, "constructor": false}, {"identifier": "calculateDateFrom", "parameters": "( final Date date, final int addend, final int chronoUnit )", "modifiers": "public static", "return": "Date", "signature": "Date calculateDateFrom( final Date date, final int addend, final int chronoUnit )", "full_signature": "public static Date calculateDateFrom( final Date date, final int addend, final int chronoUnit )", "class_method_signature": "DateUtils.calculateDateFrom( final Date date, final int addend, final int chronoUnit )", "testcase": false, "constructor": false}, {"identifier": "setNames", "parameters": "( List<Period> periods, I18nFormat format )", "modifiers": "public static", "return": "List<Period>", "signature": "List<Period> setNames( List<Period> periods, I18nFormat format )", "full_signature": "public static List<Period> setNames( List<Period> periods, I18nFormat format )", "class_method_signature": "DateUtils.setNames( List<Period> periods, I18nFormat format )", "testcase": false, "constructor": false}, {"identifier": "getPrettyInterval", "parameters": "( Date start, Date end )", "modifiers": "public static", "return": "String", "signature": "String getPrettyInterval( Date start, Date end )", "full_signature": "public static String getPrettyInterval( Date start, Date end )", "class_method_signature": "DateUtils.getPrettyInterval( Date start, Date end )", "testcase": false, "constructor": false}, {"identifier": "getPrettyInterval", "parameters": "( long ms )", "modifiers": "public static", "return": "String", "signature": "String getPrettyInterval( long ms )", "full_signature": "public static String getPrettyInterval( long ms )", "class_method_signature": "DateUtils.getPrettyInterval( long ms )", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "( final String dateString )", "modifiers": "public static", "return": "Date", "signature": "Date parseDate( final String dateString )", "full_signature": "public static Date parseDate( final String dateString )", "class_method_signature": "DateUtils.parseDate( final String dateString )", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "( LocalDateTime time )", "modifiers": "public static", "return": "Date", "signature": "Date getDate( LocalDateTime time )", "full_signature": "public static Date getDate( LocalDateTime time )", "class_method_signature": "DateUtils.getDate( LocalDateTime time )", "testcase": false, "constructor": false}, {"identifier": "nowMinusDuration", "parameters": "( String duration )", "modifiers": "public static", "return": "Date", "signature": "Date nowMinusDuration( String duration )", "full_signature": "public static Date nowMinusDuration( String duration )", "class_method_signature": "DateUtils.nowMinusDuration( String duration )", "testcase": false, "constructor": false}, {"identifier": "getDuration", "parameters": "( String duration )", "modifiers": "public static", "return": "Duration", "signature": "Duration getDuration( String duration )", "full_signature": "public static Duration getDuration( String duration )", "class_method_signature": "DateUtils.getDuration( String duration )", "testcase": false, "constructor": false}, {"identifier": "asTimestamp", "parameters": "( Date date )", "modifiers": "public static", "return": "Timestamp", "signature": "Timestamp asTimestamp( Date date )", "full_signature": "public static Timestamp asTimestamp( Date date )", "class_method_signature": "DateUtils.asTimestamp( Date date )", "testcase": false, "constructor": false}, {"identifier": "asSqlDate", "parameters": "( Date date )", "modifiers": "public static", "return": "java.sql.Date", "signature": "java.sql.Date asSqlDate( Date date )", "full_signature": "public static java.sql.Date asSqlDate( Date date )", "class_method_signature": "DateUtils.asSqlDate( Date date )", "testcase": false, "constructor": false}, {"identifier": "getLatest", "parameters": "( Date... dates )", "modifiers": "public static", "return": "Date", "signature": "Date getLatest( Date... dates )", "full_signature": "public static Date getLatest( Date... dates )", "class_method_signature": "DateUtils.getLatest( Date... dates )", "testcase": false, "constructor": false}, {"identifier": "removeTimeStamp", "parameters": "( Date date )", "modifiers": "public static", "return": "Date", "signature": "Date removeTimeStamp( Date date )", "full_signature": "public static Date removeTimeStamp( Date date )", "class_method_signature": "DateUtils.removeTimeStamp( Date date )", "testcase": false, "constructor": false}, {"identifier": "safeParseDateTime", "parameters": "( final String dateString, final DateTimeFormatter formatter )", "modifiers": "private static", "return": "Date", "signature": "Date safeParseDateTime( final String dateString, final DateTimeFormatter formatter )", "full_signature": "private static Date safeParseDateTime( final String dateString, final DateTimeFormatter formatter )", "class_method_signature": "DateUtils.safeParseDateTime( final String dateString, final DateTimeFormatter formatter )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/DateUtils.java"}, "focal_method": {"identifier": "max", "parameters": "( Date date1, Date date2 )", "modifiers": "public static", "return": "Date", "body": "public static Date max( Date date1, Date date2 )\n    {\n        if ( date1 == null )\n        {\n            return date2;\n        }\n\n        return date2 != null ? (date1.after( date2 ) ? date1 : date2) : date1;\n    }", "signature": "Date max( Date date1, Date date2 )", "full_signature": "public static Date max( Date date1, Date date2 )", "class_method_signature": "DateUtils.max( Date date1, Date date2 )", "testcase": false, "constructor": false, "invocations": ["after"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}