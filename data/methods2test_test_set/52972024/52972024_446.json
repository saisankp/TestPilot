{"test_class": {"identifier": "PagingWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PagingWriter pagingWriter;", "modifier": "private", "type": "PagingWriter", "declarator": "pagingWriter", "var_name": "pagingWriter"}, {"original_string": "private StringWriter body;", "modifier": "private", "type": "StringWriter", "declarator": "body", "var_name": "body"}, {"original_string": "private List<SQLQueryParameterSetter> setters;", "modifier": "private", "type": "List<SQLQueryParameterSetter>", "declarator": "setters", "var_name": "setters"}, {"original_string": "private QueryStatement query;", "modifier": "private", "type": "QueryStatement", "declarator": "query", "var_name": "query"}], "file": "CoreFeatures/Database-postgresql/PostgresSchema/src/test/java/info/smart_tools/smartactors/database_postgresql/postgres_schema/search/PagingWriterTest.java"}, "test_case": {"identifier": "should_WritesPAGINGClauseIntoQueryStatement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_WritesPAGINGClauseIntoQueryStatement() throws QueryBuildException, SQLException {\n        pagingWriter.write(query, 3, 8);\n        assertEquals(\"LIMIT(?)OFFSET(?)\", body.toString());\n        verify(query, times(1)).pushParameterSetter(any());\n        for (SQLQueryParameterSetter setter : setters) {\n            PreparedStatement statement = mock(PreparedStatement.class);\n            int finalIndex = setter.setParameters(statement, 1);\n            assertEquals(3, finalIndex);\n            verify(statement).setInt(eq(1), eq(8));\n            verify(statement).setInt(eq(2), eq(16));\n        }\n    }", "signature": "void should_WritesPAGINGClauseIntoQueryStatement()", "full_signature": "@Test public void should_WritesPAGINGClauseIntoQueryStatement()", "class_method_signature": "PagingWriterTest.should_WritesPAGINGClauseIntoQueryStatement()", "testcase": true, "constructor": false, "invocations": ["write", "assertEquals", "toString", "pushParameterSetter", "verify", "times", "any", "mock", "setParameters", "assertEquals", "setInt", "verify", "eq", "eq", "setInt", "verify", "eq", "eq"]}, "focal_class": {"identifier": "PagingWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAX_PAGE_SIZE = 1000;", "modifier": "private static final", "type": "int", "declarator": "MAX_PAGE_SIZE = 1000", "var_name": "MAX_PAGE_SIZE"}, {"original_string": "private static final int MIN_PAGE_SIZE = 1;", "modifier": "private static final", "type": "int", "declarator": "MIN_PAGE_SIZE = 1", "var_name": "MIN_PAGE_SIZE"}], "methods": [{"identifier": "PagingWriter", "parameters": "()", "modifiers": "public", "return": "", "signature": " PagingWriter()", "full_signature": "public  PagingWriter()", "class_method_signature": "PagingWriter.PagingWriter()", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(final QueryStatement queryStatement, final int pageNumber, final int pageSize)", "modifiers": "public", "return": "void", "signature": "void write(final QueryStatement queryStatement, final int pageNumber, final int pageSize)", "full_signature": "public void write(final QueryStatement queryStatement, final int pageNumber, final int pageSize)", "class_method_signature": "PagingWriter.write(final QueryStatement queryStatement, final int pageNumber, final int pageSize)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database-postgresql/PostgresSchema/src/main/java/info/smart_tools/smartactors/database_postgresql/postgres_schema/search/PagingWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(final QueryStatement queryStatement, final int pageNumber, final int pageSize)", "modifiers": "public", "return": "void", "body": "public void write(final QueryStatement queryStatement, final int pageNumber, final int pageSize) throws QueryBuildException {\n        try {\n            queryStatement.getBodyWriter().write(\"LIMIT(?)OFFSET(?)\");\n            queryStatement.pushParameterSetter((statement, index) -> {\n                int size = pageSize;\n                int page = pageNumber - 1;\n\n                page = (page < 0) ? 0 : page;\n                size = (size > MAX_PAGE_SIZE) ?\n                        MAX_PAGE_SIZE : ((size < MIN_PAGE_SIZE) ? MIN_PAGE_SIZE : size);\n\n                statement.setInt(index++, size);\n                statement.setInt(index++, size * page);\n                return index;\n            });\n        } catch (IOException e) {\n            throw new QueryBuildException(\"Error while writing PAGING clause of search query\", e);\n        }\n    }", "signature": "void write(final QueryStatement queryStatement, final int pageNumber, final int pageSize)", "full_signature": "public void write(final QueryStatement queryStatement, final int pageNumber, final int pageSize)", "class_method_signature": "PagingWriter.write(final QueryStatement queryStatement, final int pageNumber, final int pageSize)", "testcase": false, "constructor": false, "invocations": ["write", "getBodyWriter", "pushParameterSetter", "setInt", "setInt"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}