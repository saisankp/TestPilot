{"test_class": {"identifier": "RetryingEncryptionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RetryingEncryptionService subject;", "modifier": "private", "type": "RetryingEncryptionService", "declarator": "subject", "var_name": "subject"}, {"original_string": "private ReentrantReadWriteLock.ReadLock readLock;", "modifier": "private", "type": "ReentrantReadWriteLock.ReadLock", "declarator": "readLock", "var_name": "readLock"}, {"original_string": "private ReentrantReadWriteLock.WriteLock writeLock;", "modifier": "private", "type": "ReentrantReadWriteLock.WriteLock", "declarator": "writeLock", "var_name": "writeLock"}, {"original_string": "private LunaEncryptionService encryptionService;", "modifier": "private", "type": "LunaEncryptionService", "declarator": "encryptionService", "var_name": "encryptionService"}, {"original_string": "private UUID activeKeyUuid;", "modifier": "private", "type": "UUID", "declarator": "activeKeyUuid", "var_name": "activeKeyUuid"}, {"original_string": "private ReentrantReadWriteLock readWriteLock;", "modifier": "private", "type": "ReentrantReadWriteLock", "declarator": "readWriteLock", "var_name": "readWriteLock"}, {"original_string": "private EncryptionKeySet keySet;", "modifier": "private", "type": "EncryptionKeySet", "declarator": "keySet", "var_name": "keySet"}, {"original_string": "private EncryptionKey firstActiveKey;", "modifier": "private", "type": "EncryptionKey", "declarator": "firstActiveKey", "var_name": "firstActiveKey"}, {"original_string": "private EncryptionKey secondActiveKey;", "modifier": "private", "type": "EncryptionKey", "declarator": "secondActiveKey", "var_name": "secondActiveKey"}], "file": "components/encryption/src/test/java/org/cloudfoundry/credhub/services/RetryingEncryptionServiceTest.java"}, "test_case": {"identifier": "decrypt_whenTheEncryptionKeyCannotBeFound_throwsAnException", "parameters": "()", "modifiers": "@Test(expected = KeyNotFoundException.class) public", "return": "void", "body": "@Test(expected = KeyNotFoundException.class)\n  public void decrypt_whenTheEncryptionKeyCannotBeFound_throwsAnException() throws Exception {\n    final UUID fakeUuid = UUID.randomUUID();\n    reset(encryptionService);\n    when(keySet.get(fakeUuid)).thenReturn(null);\n    subject.decrypt(new EncryptedValue(fakeUuid, \"something we cant read\".getBytes(UTF_8), \"nonce\".getBytes(UTF_8)));\n  }", "signature": "void decrypt_whenTheEncryptionKeyCannotBeFound_throwsAnException()", "full_signature": "@Test(expected = KeyNotFoundException.class) public void decrypt_whenTheEncryptionKeyCannotBeFound_throwsAnException()", "class_method_signature": "RetryingEncryptionServiceTest.decrypt_whenTheEncryptionKeyCannotBeFound_throwsAnException()", "testcase": true, "constructor": false, "invocations": ["randomUUID", "reset", "thenReturn", "when", "get", "decrypt", "getBytes", "getBytes"]}, "focal_class": {"identifier": "RetryingEncryptionService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager.getLogger()", "var_name": "LOGGER"}, {"original_string": "private final EncryptionKeySet keySet;", "modifier": "private final", "type": "EncryptionKeySet", "declarator": "keySet", "var_name": "keySet"}, {"original_string": "private boolean needsReconnect;", "modifier": "private", "type": "boolean", "declarator": "needsReconnect", "var_name": "needsReconnect"}, {"original_string": "protected ReentrantReadWriteLock readWriteLock;", "modifier": "protected", "type": "ReentrantReadWriteLock", "declarator": "readWriteLock", "var_name": "readWriteLock"}], "methods": [{"identifier": "RetryingEncryptionService", "parameters": "(final EncryptionKeySet keySet)", "modifiers": "@Autowired public", "return": "", "signature": " RetryingEncryptionService(final EncryptionKeySet keySet)", "full_signature": "@Autowired public  RetryingEncryptionService(final EncryptionKeySet keySet)", "class_method_signature": "RetryingEncryptionService.RetryingEncryptionService(final EncryptionKeySet keySet)", "testcase": false, "constructor": true}, {"identifier": "encrypt", "parameters": "(final String value)", "modifiers": "public", "return": "EncryptedValue", "signature": "EncryptedValue encrypt(final String value)", "full_signature": "public EncryptedValue encrypt(final String value)", "class_method_signature": "RetryingEncryptionService.encrypt(final String value)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(final EncryptedValue encryptedValue)", "modifiers": "public", "return": "String", "signature": "String decrypt(final EncryptedValue encryptedValue)", "full_signature": "public String decrypt(final EncryptedValue encryptedValue)", "class_method_signature": "RetryingEncryptionService.decrypt(final EncryptedValue encryptedValue)", "testcase": false, "constructor": false}, {"identifier": "setNeedsReconnectFlag", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void setNeedsReconnectFlag()", "full_signature": "protected void setNeedsReconnectFlag()", "class_method_signature": "RetryingEncryptionService.setNeedsReconnectFlag()", "testcase": false, "constructor": false}, {"identifier": "retryOnErrorWithRemappedKey", "parameters": "(final ThrowingFunction<T> operation)", "modifiers": "private", "return": "T", "signature": "T retryOnErrorWithRemappedKey(final ThrowingFunction<T> operation)", "full_signature": "private T retryOnErrorWithRemappedKey(final ThrowingFunction<T> operation)", "class_method_signature": "RetryingEncryptionService.retryOnErrorWithRemappedKey(final ThrowingFunction<T> operation)", "testcase": false, "constructor": false}, {"identifier": "withPreventReconnectLock", "parameters": "(final ThrowingSupplier<T> operation)", "modifiers": "private", "return": "T", "signature": "T withPreventReconnectLock(final ThrowingSupplier<T> operation)", "full_signature": "private T withPreventReconnectLock(final ThrowingSupplier<T> operation)", "class_method_signature": "RetryingEncryptionService.withPreventReconnectLock(final ThrowingSupplier<T> operation)", "testcase": false, "constructor": false}, {"identifier": "withPreventCryptoLock", "parameters": "(final ThrowingRunnable runnable)", "modifiers": "private", "return": "void", "signature": "void withPreventCryptoLock(final ThrowingRunnable runnable)", "full_signature": "private void withPreventCryptoLock(final ThrowingRunnable runnable)", "class_method_signature": "RetryingEncryptionService.withPreventCryptoLock(final ThrowingRunnable runnable)", "testcase": false, "constructor": false}, {"identifier": "clearNeedsReconnectFlag", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clearNeedsReconnectFlag()", "full_signature": "private void clearNeedsReconnectFlag()", "class_method_signature": "RetryingEncryptionService.clearNeedsReconnectFlag()", "testcase": false, "constructor": false}], "file": "components/encryption/src/main/java/org/cloudfoundry/credhub/services/RetryingEncryptionService.java"}, "focal_method": {"identifier": "decrypt", "parameters": "(final EncryptedValue encryptedValue)", "modifiers": "public", "return": "String", "body": "public String decrypt(final EncryptedValue encryptedValue)\n    throws Exception {\n    LOGGER.info(\"Attempting decrypt\");\n    return retryOnErrorWithRemappedKey(() -> {\n      final EncryptionKey key = keySet.get(encryptedValue.getEncryptionKeyUuid());\n\n      if (key == null) {\n        throw new KeyNotFoundException(ErrorMessages.MISSING_ENCRYPTION_KEY);\n      }\n      return key.decrypt(encryptedValue.getEncryptedValue(), encryptedValue.getNonce());\n    });\n  }", "signature": "String decrypt(final EncryptedValue encryptedValue)", "full_signature": "public String decrypt(final EncryptedValue encryptedValue)", "class_method_signature": "RetryingEncryptionService.decrypt(final EncryptedValue encryptedValue)", "testcase": false, "constructor": false, "invocations": ["info", "retryOnErrorWithRemappedKey", "get", "getEncryptionKeyUuid", "decrypt", "getEncryptedValue", "getNonce"]}, "repository": {"repo_id": 57061988, "url": "https://github.com/cloudfoundry-incubator/credhub", "stars": 167, "created": "4/25/2016 5:30:51 PM +00:00", "updates": "2020-01-27T21:31:19+00:00", "fork": "False", "license": "licensed"}}