{"test_class": {"identifier": "OpearPackageMojoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File testOutBaseDir = new File(\"target/test-out/OpearPackageMojoTest\");", "modifier": "private final", "type": "File", "declarator": "testOutBaseDir = new File(\"target/test-out/OpearPackageMojoTest\")", "var_name": "testOutBaseDir"}, {"original_string": "private final File srcDir = new File(\"src/test/resources/OpearPackageMojoTest\");", "modifier": "private final", "type": "File", "declarator": "srcDir = new File(\"src/test/resources/OpearPackageMojoTest\")", "var_name": "srcDir"}], "file": "maven/src/test/java/net/adamcin/oakpal/maven/mojo/OpearPackageMojoTest.java"}, "test_case": {"identifier": "testRewritePlan", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRewritePlan() throws Exception {\n        final File testOutDir = new File(testOutBaseDir, \"testRewritePlan\");\n        FileUtils.deleteDirectory(testOutDir);\n        testOutDir.mkdirs();\n        final File copyTarget = new File(testOutDir, \"copied\");\n        copyTarget.mkdirs();\n\n        final String expectFilename = \"sample-plan.json\";\n        final URL samplePlanUrl = new File(srcDir, expectFilename).toURI().toURL();\n        final Result<OakpalPlan> simplePlanResult = OakpalPlan.fromJson(samplePlanUrl);\n        assertTrue(\"plan is successful\", simplePlanResult.isSuccess());\n        final OakpalPlan simplePlan = simplePlanResult.getOrDefault(null);\n\n        final String preInstallFilename = \"tmp_foo_bar.zip\";\n        final File preInstallPackage = TestPackageUtil.prepareTestPackage(preInstallFilename);\n        final URL preInstallUrl = new URL(\"oakpaltest:/target/test-packages/\" + preInstallPackage.getName());\n\n        final URL repoInitUrl1 = new URL(\"oakpaltest:/target/test-classes/OpearPackageMojoTest/repoinit1.txt\");\n        final URL repoInitUrl2 = new URL(\"oakpaltest:/target/test-classes/OpearPackageMojoTest/repoinit2.txt\");\n\n        final String rewrittenName = \"my-plan.json\";\n        final String rewrittenPreInstallName = \"my_preinstall.zip\";\n        final String rewrittenRepoInitName1 = \"repoinit1.txt\";\n        final String rewrittenRepoInitName2 = \"repoinit2.txt\";\n        final List<String> rewrittenRepoInitNames = Arrays.asList(rewrittenRepoInitName1, rewrittenRepoInitName2);\n\n        final Map<URL, String> rewrites = new HashMap<>();\n        rewrites.put(preInstallUrl, rewrittenPreInstallName);\n        rewrites.put(repoInitUrl1, rewrittenRepoInitName1);\n        rewrites.put(repoInitUrl2, rewrittenRepoInitName2);\n        OakpalPlan rewritten = OpearPackageMojo.rewritePlan(copyTarget, rewrites, simplePlan, rewrittenName);\n\n        assertEquals(\"expect new preinstall url\",\n                new File(copyTarget, rewrittenPreInstallName).getAbsoluteFile().toURI().toURL(),\n                rewritten.getPreInstallUrls().get(0));\n\n        assertEquals(\"expect relativized preinstall url\", rewrittenPreInstallName,\n                rewritten.toJson().getJsonArray(\"preInstallUrls\").getString(0));\n\n        assertEquals(\"expect new repoInitUrl1\",\n                new File(copyTarget, rewrittenRepoInitName1).getAbsoluteFile().toURI().toURL(),\n                rewritten.getRepoInitUrls().get(0));\n        assertEquals(\"expect new repoInitUrl2\",\n                new File(copyTarget, rewrittenRepoInitName2).getAbsoluteFile().toURI().toURL(),\n                rewritten.getRepoInitUrls().get(1));\n\n        assertEquals(\"expect relativized repoInitUrls\", rewrittenRepoInitNames,\n                JavaxJson.unwrapArray(rewritten.toJson().getJsonArray(\"repoInitUrls\")));\n    }", "signature": "void testRewritePlan()", "full_signature": "@Test public void testRewritePlan()", "class_method_signature": "OpearPackageMojoTest.testRewritePlan()", "testcase": true, "constructor": false, "invocations": ["deleteDirectory", "mkdirs", "mkdirs", "toURL", "toURI", "fromJson", "assertTrue", "isSuccess", "getOrDefault", "prepareTestPackage", "getName", "asList", "put", "put", "put", "rewritePlan", "assertEquals", "toURL", "toURI", "getAbsoluteFile", "get", "getPreInstallUrls", "assertEquals", "getString", "getJsonArray", "toJson", "assertEquals", "toURL", "toURI", "getAbsoluteFile", "get", "getRepoInitUrls", "assertEquals", "toURL", "toURI", "getAbsoluteFile", "get", "getRepoInitUrls", "assertEquals", "unwrapArray", "getJsonArray", "toJson"]}, "focal_class": {"identifier": "OpearPackageMojo", "superclass": "extends AbstractCommonMojo", "interfaces": "", "fields": [{"original_string": "public static final String OPEAR = \"opear\";", "modifier": "public static final", "type": "String", "declarator": "OPEAR = \"opear\"", "var_name": "OPEAR"}, {"original_string": "static final String OAKPAL_GROUP_ID = \"net.adamcin.oakpal\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_GROUP_ID = \"net.adamcin.oakpal\"", "var_name": "OAKPAL_GROUP_ID"}, {"original_string": "static final String OAKPAL_API_ARTIFACT_ID = \"oakpal-api\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_API_ARTIFACT_ID = \"oakpal-api\"", "var_name": "OAKPAL_API_ARTIFACT_ID"}, {"original_string": "static final String OAKPAL_CORE_ARTIFACT_ID = \"oakpal-core\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_CORE_ARTIFACT_ID = \"oakpal-core\"", "var_name": "OAKPAL_CORE_ARTIFACT_ID"}, {"original_string": "private static final Predicate<Artifact> TEST_IS_OAKPAL_API =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_API_ARTIFACT_ID::equals));", "modifier": "private static final", "type": "Predicate<Artifact>", "declarator": "TEST_IS_OAKPAL_API =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_API_ARTIFACT_ID::equals))", "var_name": "TEST_IS_OAKPAL_API"}, {"original_string": "private static final Predicate<Artifact> TEST_IS_OAKPAL_CORE =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_CORE_ARTIFACT_ID::equals));", "modifier": "private static final", "type": "Predicate<Artifact>", "declarator": "TEST_IS_OAKPAL_CORE =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_CORE_ARTIFACT_ID::equals))", "var_name": "TEST_IS_OAKPAL_CORE"}, {"original_string": "@Component\n    ArtifactHandlerManager artifactHandlerManager;", "modifier": "@Component", "type": "ArtifactHandlerManager", "declarator": "artifactHandlerManager", "var_name": "artifactHandlerManager"}, {"original_string": "@Parameter(defaultValue = \"${project.build.finalName}\", required = true)\n    String finalName;", "modifier": "@Parameter(defaultValue = \"${project.build.finalName}\", required = true)", "type": "String", "declarator": "finalName", "var_name": "finalName"}, {"original_string": "@Parameter(defaultValue = \"${project.build.directory}/oakpal-plugin/opear-plans/plan.json\", required = true)\n    File planFile;", "modifier": "@Parameter(defaultValue = \"${project.build.directory}/oakpal-plugin/opear-plans/plan.json\", required = true)", "type": "File", "declarator": "planFile", "var_name": "planFile"}, {"original_string": "@Parameter\n    List<File> additionalPlans = new ArrayList<>();", "modifier": "@Parameter", "type": "List<File>", "declarator": "additionalPlans = new ArrayList<>()", "var_name": "additionalPlans"}, {"original_string": "@Parameter(defaultValue = \"${project.build.directory}\", required = true)\n    File outputDirectory;", "modifier": "@Parameter(defaultValue = \"${project.build.directory}\", required = true)", "type": "File", "declarator": "outputDirectory", "var_name": "outputDirectory"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "OpearPackageMojo.execute()", "testcase": false, "constructor": false}, {"identifier": "attachArtifact", "parameters": "(final @NotNull File finalFile)", "modifiers": "", "return": "Artifact", "signature": "Artifact attachArtifact(final @NotNull File finalFile)", "full_signature": " Artifact attachArtifact(final @NotNull File finalFile)", "class_method_signature": "OpearPackageMojo.attachArtifact(final @NotNull File finalFile)", "testcase": false, "constructor": false}, {"identifier": "getOwnVersion", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getOwnVersion()", "full_signature": " String getOwnVersion()", "class_method_signature": "OpearPackageMojo.getOwnVersion()", "testcase": false, "constructor": false}, {"identifier": "getBundleSymbolicName", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getBundleSymbolicName()", "full_signature": " String getBundleSymbolicName()", "class_method_signature": "OpearPackageMojo.getBundleSymbolicName()", "testcase": false, "constructor": false}, {"identifier": "getOakpalCoreVersion", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getOakpalCoreVersion()", "full_signature": " String getOakpalCoreVersion()", "class_method_signature": "OpearPackageMojo.getOakpalCoreVersion()", "testcase": false, "constructor": false}, {"identifier": "getEmbeddedLibraries", "parameters": "()", "modifiers": "", "return": "List<File>", "signature": "List<File> getEmbeddedLibraries()", "full_signature": " List<File> getEmbeddedLibraries()", "class_method_signature": "OpearPackageMojo.getEmbeddedLibraries()", "testcase": false, "constructor": false}, {"identifier": "assembleOpear", "parameters": "()", "modifiers": "", "return": "File", "signature": "File assembleOpear()", "full_signature": " File assembleOpear()", "class_method_signature": "OpearPackageMojo.assembleOpear()", "testcase": false, "constructor": false}, {"identifier": "mapDestFileNames", "parameters": "(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "modifiers": "static", "return": "Map<String, T>", "signature": "Map<String, T> mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "full_signature": "static Map<String, T> mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "class_method_signature": "OpearPackageMojo.mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "testcase": false, "constructor": false}, {"identifier": "shrinkWrapPlans", "parameters": "(final @NotNull File toDir)", "modifiers": "", "return": "Result<List<String>>", "signature": "Result<List<String>> shrinkWrapPlans(final @NotNull File toDir)", "full_signature": " Result<List<String>> shrinkWrapPlans(final @NotNull File toDir)", "class_method_signature": "OpearPackageMojo.shrinkWrapPlans(final @NotNull File toDir)", "testcase": false, "constructor": false}, {"identifier": "rewritePlan", "parameters": "(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "modifiers": "static", "return": "OakpalPlan", "signature": "OakpalPlan rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "full_signature": "static OakpalPlan rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "class_method_signature": "OpearPackageMojo.rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "testcase": false, "constructor": false}, {"identifier": "copyPlans", "parameters": "(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "modifiers": "static", "return": "Result<Map<String, OakpalPlan>>", "signature": "Result<Map<String, OakpalPlan>> copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "full_signature": "static Result<Map<String, OakpalPlan>> copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "class_method_signature": "OpearPackageMojo.copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "testcase": false, "constructor": false}, {"identifier": "copyUrlStreams", "parameters": "(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "modifiers": "static", "return": "Result<Map<URL, String>>", "signature": "Result<Map<URL, String>> copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "full_signature": "static Result<Map<URL, String>> copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "class_method_signature": "OpearPackageMojo.copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "testcase": false, "constructor": false}], "file": "maven/src/main/java/net/adamcin/oakpal/maven/mojo/OpearPackageMojo.java"}, "focal_method": {"identifier": "rewritePlan", "parameters": "(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "modifiers": "static", "return": "OakpalPlan", "body": "static OakpalPlan rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename) {\n        return new OakpalPlan.Builder(\n                compose1(File::toURI, uncheck1(URI::toURL))\n                        .apply(new File(toDir, filename)), filename)\n                .startingWithPlan(plan)\n                .withPreInstallUrls(plan.getPreInstallUrls().stream()\n                        .map(compose1(renamed::get, uncheck1(name -> new File(toDir, name).toURI().toURL())))\n                        .collect(Collectors.toList()))\n                .withRepoInitUrls(plan.getRepoInitUrls().stream()\n                        .map(compose1(renamed::get, uncheck1(name -> new File(toDir, name).toURI().toURL())))\n                        .collect(Collectors.toList()))\n                .build();\n    }", "signature": "OakpalPlan rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "full_signature": "static OakpalPlan rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "class_method_signature": "OpearPackageMojo.rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "testcase": false, "constructor": false, "invocations": ["build", "withRepoInitUrls", "withPreInstallUrls", "startingWithPlan", "apply", "compose1", "uncheck1", "collect", "map", "stream", "getPreInstallUrls", "compose1", "uncheck1", "toURL", "toURI", "toList", "collect", "map", "stream", "getRepoInitUrls", "compose1", "uncheck1", "toURL", "toURI", "toList"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}