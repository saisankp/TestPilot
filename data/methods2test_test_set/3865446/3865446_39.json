{"test_class": {"identifier": "GenotypeUniformCrossoverReproductionOperatorTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "protected GenotypeUniformCrossoverReproductionOperator operator;", "modifier": "protected", "type": "GenotypeUniformCrossoverReproductionOperator", "declarator": "operator", "var_name": "operator"}, {"original_string": "protected RandomGenerator randomGenerator;", "modifier": "protected", "type": "RandomGenerator", "declarator": "randomGenerator", "var_name": "randomGenerator"}, {"original_string": "protected boolean[] genome1;", "modifier": "protected", "type": "boolean[]", "declarator": "genome1", "var_name": "genome1"}, {"original_string": "protected boolean[] genome2;", "modifier": "protected", "type": "boolean[]", "declarator": "genome2", "var_name": "genome2"}, {"original_string": "protected boolean[] expectedGenome1;", "modifier": "protected", "type": "boolean[]", "declarator": "expectedGenome1", "var_name": "expectedGenome1"}, {"original_string": "protected boolean[] expectedGenome2;", "modifier": "protected", "type": "boolean[]", "declarator": "expectedGenome2", "var_name": "expectedGenome2"}], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/operators/reproduction/GenotypeUniformCrossoverReproductionOperatorTest.java"}, "test_case": {"identifier": "testReproduceInternal1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReproduceInternal1() throws Exception {\n        this.operator.setCreateBothChildren(true);\n        this.operator.setCrossoverProbability(0.2);\n        SimpleBinaryRepresentation repr1 = new SimpleBinaryRepresentation(new SimpleBinaryGenomeDescriptor()){\n            @Override\n            public int getTotalLength() {\n                this.genome = genome1;\n                return super.getTotalLength();\n            }\n        };\n        repr1.getTotalLength();\n        Individual first = new SimpleIndividual(1, 0.0, repr1);\n        SimpleBinaryRepresentation repr2 = new SimpleBinaryRepresentation(new SimpleBinaryGenomeDescriptor()){\n            @Override\n            public int getTotalLength() {\n                this.genome = genome2;\n                return super.getTotalLength();\n            }\n        };\n        repr2.getTotalLength();\n        Individual second = new SimpleIndividual(1, 0.0, repr2);\n        this.operator.reproduceInternal(new Individual[]{first}, new Individual[]{second}, 1);\n        GenotypeRepresentation result1 = ((GenotypeRepresentation)first.getRepresentation());\n        GenotypeRepresentation result2 = ((GenotypeRepresentation)second.getRepresentation());\n        assertEquals(this.expectedGenome1.length, result1.getTotalLength());\n        assertEquals(this.expectedGenome2.length, result2.getTotalLength());\n        for (int i = 0; i < this.expectedGenome1.length; i++){\n            assertEquals(\"at index \" + i, expectedGenome1[i], result1.getGeneAt(i));\n        }\n        for (int i = 0; i < this.expectedGenome2.length; i++){\n            assertEquals(\"at index \" + i, expectedGenome2[i], result2.getGeneAt(i));\n        }\n    }", "signature": "void testReproduceInternal1()", "full_signature": "@Test public void testReproduceInternal1()", "class_method_signature": "GenotypeUniformCrossoverReproductionOperatorTest.testReproduceInternal1()", "testcase": true, "constructor": false, "invocations": ["setCreateBothChildren", "setCrossoverProbability", "getTotalLength", "getTotalLength", "getTotalLength", "getTotalLength", "reproduceInternal", "getRepresentation", "getRepresentation", "assertEquals", "getTotalLength", "assertEquals", "getTotalLength", "assertEquals", "getGeneAt", "assertEquals", "getGeneAt"]}, "focal_class": {"identifier": "GenotypeUniformCrossoverReproductionOperator", "superclass": "extends AbstractUniformCrossoverReproductionOperator", "interfaces": "", "fields": [], "methods": [{"identifier": "reproduceInternal", "parameters": "(Individual[] firstChildren, Individual[] secondChildren, int retSize)", "modifiers": "@Override protected", "return": "void", "signature": "void reproduceInternal(Individual[] firstChildren, Individual[] secondChildren, int retSize)", "full_signature": "@Override protected void reproduceInternal(Individual[] firstChildren, Individual[] secondChildren, int retSize)", "class_method_signature": "GenotypeUniformCrossoverReproductionOperator.reproduceInternal(Individual[] firstChildren, Individual[] secondChildren, int retSize)", "testcase": false, "constructor": false}, {"identifier": "getAcceptableType", "parameters": "()", "modifiers": "public", "return": "Class<? extends Representation>", "signature": "Class<? extends Representation> getAcceptableType()", "full_signature": "public Class<? extends Representation> getAcceptableType()", "class_method_signature": "GenotypeUniformCrossoverReproductionOperator.getAcceptableType()", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/operators/reproduction/GenotypeUniformCrossoverReproductionOperator.java"}, "focal_method": {"identifier": "reproduceInternal", "parameters": "(Individual[] firstChildren, Individual[] secondChildren, int retSize)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void reproduceInternal(Individual[] firstChildren, Individual[] secondChildren, int retSize) {\n        for (int i = 0; i < retSize; i++){\n            GenotypeRepresentation firstRepresentation = ((GenotypeRepresentation)firstChildren[i].getRepresentation());\n            GenotypeRepresentation secondRepresentation = ((GenotypeRepresentation)secondChildren[i].getRepresentation());\n\n            double parentFitness = Math.max(firstChildren[i].getFitness(), secondChildren[i].getFitness());\n            firstChildren[i].setParentFitness(parentFitness);\n            secondChildren[i].setParentFitness(parentFitness);\n            \n            // finally crossover of values\n            int totalLength = firstRepresentation.getTotalLength();\n            for (int j = 0; j < totalLength; j++){\n                // if probability is high, then swap corresponding values\n                if (this.crossoverProbability > 0.0 && this.randomGenerator.nextRandom() <= this.crossoverProbability){\n                    firstRepresentation.swapGenes(secondRepresentation, j, j+1);\n                }\n            }\n        }\n    }", "signature": "void reproduceInternal(Individual[] firstChildren, Individual[] secondChildren, int retSize)", "full_signature": "@Override protected void reproduceInternal(Individual[] firstChildren, Individual[] secondChildren, int retSize)", "class_method_signature": "GenotypeUniformCrossoverReproductionOperator.reproduceInternal(Individual[] firstChildren, Individual[] secondChildren, int retSize)", "testcase": false, "constructor": false, "invocations": ["getRepresentation", "getRepresentation", "max", "getFitness", "getFitness", "setParentFitness", "setParentFitness", "getTotalLength", "nextRandom", "swapGenes"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}