{"test_class": {"identifier": "FilePublicKeyProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "connectors/ssh/src/test/java/org/crsh/auth/FilePublicKeyProviderTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test() {\n    String pubKeyFile = Thread.currentThread().getContextClassLoader().getResource(\"test_authorized_key.pem\").getFile();\n    assertTrue(new File(pubKeyFile).exists());\n    FilePublicKeyProvider SUT = new FilePublicKeyProvider(new String[]{pubKeyFile});\n    assertTrue(SUT.loadKeys().iterator().hasNext());\n  }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "FilePublicKeyProviderTest.test()", "testcase": true, "constructor": false, "invocations": ["getFile", "getResource", "getContextClassLoader", "currentThread", "assertTrue", "exists", "assertTrue", "hasNext", "iterator", "loadKeys"]}, "focal_class": {"identifier": "FilePublicKeyProvider", "superclass": "extends AbstractKeyPairProvider", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FilePublicKeyProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FilePublicKeyProvider.class)", "var_name": "LOG"}, {"original_string": "private String[] files;", "modifier": "private", "type": "String[]", "declarator": "files", "var_name": "files"}], "methods": [{"identifier": "FilePublicKeyProvider", "parameters": "(String[] files)", "modifiers": "", "return": "", "signature": " FilePublicKeyProvider(String[] files)", "full_signature": "  FilePublicKeyProvider(String[] files)", "class_method_signature": "FilePublicKeyProvider.FilePublicKeyProvider(String[] files)", "testcase": false, "constructor": true}, {"identifier": "loadKeys", "parameters": "()", "modifiers": "public", "return": "Iterable<KeyPair>", "signature": "Iterable<KeyPair> loadKeys()", "full_signature": "public Iterable<KeyPair> loadKeys()", "class_method_signature": "FilePublicKeyProvider.loadKeys()", "testcase": false, "constructor": false}, {"identifier": "convertPemKeyPair", "parameters": "(PEMKeyPair pemKeyPair)", "modifiers": "private", "return": "KeyPair", "signature": "KeyPair convertPemKeyPair(PEMKeyPair pemKeyPair)", "full_signature": "private KeyPair convertPemKeyPair(PEMKeyPair pemKeyPair)", "class_method_signature": "FilePublicKeyProvider.convertPemKeyPair(PEMKeyPair pemKeyPair)", "testcase": false, "constructor": false}], "file": "connectors/ssh/src/main/java/org/crsh/auth/FilePublicKeyProvider.java"}, "focal_method": {"identifier": "loadKeys", "parameters": "()", "modifiers": "public", "return": "Iterable<KeyPair>", "body": "public Iterable<KeyPair> loadKeys() {\n    if (!SecurityUtils.isBouncyCastleRegistered()) {\n      throw new IllegalStateException(\"BouncyCastle must be registered as a JCE provider\");\n    }\n    List<KeyPair> keys = new ArrayList<KeyPair>();\n    for (String file : files) {\n      try {\n          Object o = KeyPairUtils.readKey(new InputStreamReader(new FileInputStream(file)));\n          if (o instanceof KeyPair) {\n            keys.add(new KeyPair(((KeyPair)o).getPublic(), null));\n          } else if (o instanceof PublicKey) {\n            keys.add(new KeyPair((PublicKey)o, null));\n          } else if (o instanceof PEMKeyPair) {\n            PEMKeyPair keyPair = (PEMKeyPair)o;\n            keys.add(convertPemKeyPair(keyPair));\n          } else if (o instanceof SubjectPublicKeyInfo) {\n            PEMKeyPair keyPair = new PEMKeyPair((SubjectPublicKeyInfo) o, null);\n            keys.add(convertPemKeyPair(keyPair));\n          } else {\n            throw new UnsupportedOperationException(String.format(\"Key type %s not supported.\", o.getClass().getName()));\n          }\n      }\n      catch (Exception e) {\n        LOG.info(\"Unable to read key {}: {}\", file, e);\n      }\n    }\n    return keys;\n  }", "signature": "Iterable<KeyPair> loadKeys()", "full_signature": "public Iterable<KeyPair> loadKeys()", "class_method_signature": "FilePublicKeyProvider.loadKeys()", "testcase": false, "constructor": false, "invocations": ["isBouncyCastleRegistered", "readKey", "add", "getPublic", "add", "add", "convertPemKeyPair", "add", "convertPemKeyPair", "format", "getName", "getClass", "info"]}, "repository": {"repo_id": 1552601, "url": "https://github.com/crashub/crash", "language": "Java", "is_fork": false, "fork_count": 168, "stargazer_count": 887, "size": 20678, "license": "licensed"}}