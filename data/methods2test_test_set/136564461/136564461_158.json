{"test_class": {"identifier": "KeyPairTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Edwards mockEdwards;", "modifier": "private", "type": "Edwards", "declarator": "mockEdwards", "var_name": "mockEdwards"}, {"original_string": "private PrivateKey mockPrivateKey;", "modifier": "private", "type": "PrivateKey", "declarator": "mockPrivateKey", "var_name": "mockPrivateKey"}, {"original_string": "private PublicKey mockPublicKey;", "modifier": "private", "type": "PublicKey", "declarator": "mockPublicKey", "var_name": "mockPublicKey"}, {"original_string": "private KeyGenerator mockGenerator;", "modifier": "private", "type": "KeyGenerator", "declarator": "mockGenerator", "var_name": "mockGenerator"}, {"original_string": "private EdKeyAnalyzer mockAnalyzer;", "modifier": "private", "type": "EdKeyAnalyzer", "declarator": "mockAnalyzer", "var_name": "mockAnalyzer"}, {"original_string": "private KeyPair mockTmpKeyPair;", "modifier": "private", "type": "KeyPair", "declarator": "mockTmpKeyPair", "var_name": "mockTmpKeyPair"}], "file": "eddsa/src/test/java/io/moatwel/crypto/KeyPairTest.java"}, "test_case": {"identifier": "success_GenerateKeyPair_from_EdDsaKeyGenerator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void success_GenerateKeyPair_from_EdDsaKeyGenerator() {\n        SchemeProvider schemeProvider = new Ed25519SchemeProvider(HashAlgorithm.KECCAK_512);\n        EdDsaKeyGenerator generator = new EdDsaKeyGenerator(schemeProvider);\n        PrivateKey privateKey = PrivateKey.newInstance(new byte[32]);\n        EdKeyAnalyzer analyzer = EdKeyAnalyzerTestFactory.generate(Curve25519.getInstance());\n\n        PublicKey checkKey = generator.derivePublicKey(privateKey);\n\n        KeyPair keyPair = new KeyPair(privateKey, generator, analyzer);\n\n        assertNotNull(keyPair);\n        assertThat(keyPair.getPublicKey().getRaw(), is(checkKey.getRaw()));\n    }", "signature": "void success_GenerateKeyPair_from_EdDsaKeyGenerator()", "full_signature": "@Test public void success_GenerateKeyPair_from_EdDsaKeyGenerator()", "class_method_signature": "KeyPairTest.success_GenerateKeyPair_from_EdDsaKeyGenerator()", "testcase": true, "constructor": false, "invocations": ["newInstance", "generate", "getInstance", "derivePublicKey", "assertNotNull", "assertThat", "getRaw", "getPublicKey", "is", "getRaw"]}, "focal_class": {"identifier": "KeyPair", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PrivateKey privateKey;", "modifier": "private final", "type": "PrivateKey", "declarator": "privateKey", "var_name": "privateKey"}, {"original_string": "private final PublicKey publicKey;", "modifier": "private final", "type": "PublicKey", "declarator": "publicKey", "var_name": "publicKey"}], "methods": [{"identifier": "KeyPair", "parameters": "(PrivateKey privateKey, KeyGenerator generator, EdKeyAnalyzer analyzer)", "modifiers": "public", "return": "", "signature": " KeyPair(PrivateKey privateKey, KeyGenerator generator, EdKeyAnalyzer analyzer)", "full_signature": "public  KeyPair(PrivateKey privateKey, KeyGenerator generator, EdKeyAnalyzer analyzer)", "class_method_signature": "KeyPair.KeyPair(PrivateKey privateKey, KeyGenerator generator, EdKeyAnalyzer analyzer)", "testcase": false, "constructor": true}, {"identifier": "KeyPair", "parameters": "(PrivateKey privateKey, PublicKey publicKey, EdKeyAnalyzer analyzer)", "modifiers": "public", "return": "", "signature": " KeyPair(PrivateKey privateKey, PublicKey publicKey, EdKeyAnalyzer analyzer)", "full_signature": "public  KeyPair(PrivateKey privateKey, PublicKey publicKey, EdKeyAnalyzer analyzer)", "class_method_signature": "KeyPair.KeyPair(PrivateKey privateKey, PublicKey publicKey, EdKeyAnalyzer analyzer)", "testcase": false, "constructor": true}, {"identifier": "getPrivateKey", "parameters": "()", "modifiers": "public", "return": "PrivateKey", "signature": "PrivateKey getPrivateKey()", "full_signature": "public PrivateKey getPrivateKey()", "class_method_signature": "KeyPair.getPrivateKey()", "testcase": false, "constructor": false}, {"identifier": "getPublicKey", "parameters": "()", "modifiers": "public", "return": "PublicKey", "signature": "PublicKey getPublicKey()", "full_signature": "public PublicKey getPublicKey()", "class_method_signature": "KeyPair.getPublicKey()", "testcase": false, "constructor": false}], "file": "eddsa/src/main/java/io/moatwel/crypto/KeyPair.java"}, "focal_method": {"identifier": "getPublicKey", "parameters": "()", "modifiers": "public", "return": "PublicKey", "body": "public PublicKey getPublicKey() {\n        return publicKey;\n    }", "signature": "PublicKey getPublicKey()", "full_signature": "public PublicKey getPublicKey()", "class_method_signature": "KeyPair.getPublicKey()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 136564461, "url": "https://github.com/halu5071/edwards", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 626, "license": "licensed"}}