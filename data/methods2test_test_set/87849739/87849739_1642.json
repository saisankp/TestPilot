{"test_class": {"identifier": "MessageCommandAdapterTest", "superclass": "", "interfaces": "implements ProtocolAdapterTest", "fields": [{"original_string": "private static final String APPLICATION_JSON = \"application/json\";", "modifier": "private static final", "type": "String", "declarator": "APPLICATION_JSON = \"application/json\"", "var_name": "APPLICATION_JSON"}, {"original_string": "private static final String APPLICATION_OCTET_STREAM = \"application/octet-stream\";", "modifier": "private static final", "type": "String", "declarator": "APPLICATION_OCTET_STREAM = \"application/octet-stream\"", "var_name": "APPLICATION_OCTET_STREAM"}, {"original_string": "private static final byte[] BINARY_PAYLOAD = \"binary payload\".getBytes(StandardCharsets.UTF_8);", "modifier": "private static final", "type": "byte[]", "declarator": "BINARY_PAYLOAD = \"binary payload\".getBytes(StandardCharsets.UTF_8)", "var_name": "BINARY_PAYLOAD"}, {"original_string": "private static final String XML_PAYLOAD = \"<xml>test</xml>\";", "modifier": "private static final", "type": "String", "declarator": "XML_PAYLOAD = \"<xml>test</xml>\"", "var_name": "XML_PAYLOAD"}, {"original_string": "private MessageCommandAdapter underTest;", "modifier": "private", "type": "MessageCommandAdapter", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Parameterized.Parameter\n    public JsonSchemaVersion version;", "modifier": "@Parameterized.Parameter\n    public", "type": "JsonSchemaVersion", "declarator": "version", "var_name": "version"}, {"original_string": "@Parameterized.Parameter(1)\n    public MessageDirection direction;", "modifier": "@Parameterized.Parameter(1)\n    public", "type": "MessageDirection", "declarator": "direction", "var_name": "direction"}, {"original_string": "@Parameterized.Parameter(2)\n    public String type;", "modifier": "@Parameterized.Parameter(2)\n    public", "type": "String", "declarator": "type", "var_name": "type"}, {"original_string": "@Parameterized.Parameter(3)\n    public TestPayload payload;", "modifier": "@Parameterized.Parameter(3)\n    public", "type": "TestPayload", "declarator": "payload", "var_name": "payload"}], "file": "protocol-adapter/src/test/java/org/eclipse/ditto/protocoladapter/things/MessageCommandAdapterTest.java"}, "test_case": {"identifier": "testMessageToAdaptable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMessageToAdaptable() {\n        final String subject = subject();\n        final String contentType = payload.contentType;\n        final JsonPointer path = path(subject);\n\n        // build expected adaptable\n        final TopicPath topicPath = TopicPath.newBuilder(TestConstants.THING_ID)\n                .live()\n                .messages()\n                .subject(subject)\n                .build();\n\n        final PayloadBuilder payloadBuilder = Payload.newBuilder(path);\n        if (payload.asJson != null) {\n            payloadBuilder.withValue(payload.asJson);\n        }\n\n        final Adaptable expectedAdaptable = Adaptable.newBuilder(topicPath)\n                .withPayload(payloadBuilder.build())\n                .withHeaders(expectedAdaptableHeaders(contentType))\n                .build();\n\n        // build the message that will be converted to an adaptable\n        final MessageHeaders messageHeaders = messageHeaders(subject, contentType);\n        final Message<Object> theMessage = message(messageHeaders, payload.asObject);\n        final DittoHeaders theHeaders = dittoHeaders();\n        final MessageCommand<?, ?> messageCommand = messageCommand(type, theMessage, theHeaders);\n\n        // test\n        final Adaptable actual = underTest.toAdaptable(messageCommand);\n        assertThat(actual).isEqualTo(expectedAdaptable);\n    }", "signature": "void testMessageToAdaptable()", "full_signature": "@Test public void testMessageToAdaptable()", "class_method_signature": "MessageCommandAdapterTest.testMessageToAdaptable()", "testcase": true, "constructor": false, "invocations": ["subject", "path", "build", "subject", "messages", "live", "newBuilder", "newBuilder", "withValue", "build", "withHeaders", "withPayload", "newBuilder", "build", "expectedAdaptableHeaders", "messageHeaders", "message", "dittoHeaders", "messageCommand", "toAdaptable", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "MessageCommandAdapter", "superclass": "extends AbstractAdapter<MessageCommand<?, ?>>", "interfaces": "implements ThingMessageAdapter<MessageCommand<?, ?>>", "fields": [{"original_string": "private static final SignalMapper<MessageCommand<?, ?>>\n            TO_ADAPTABLE_MAPPER = SignalMapperFactory.newMessageCommandSignalMapper();", "modifier": "private static final", "type": "SignalMapper<MessageCommand<?, ?>>", "declarator": "TO_ADAPTABLE_MAPPER = SignalMapperFactory.newMessageCommandSignalMapper()", "var_name": "TO_ADAPTABLE_MAPPER"}], "methods": [{"identifier": "MessageCommandAdapter", "parameters": "(final HeaderTranslator headerTranslator)", "modifiers": "private", "return": "", "signature": " MessageCommandAdapter(final HeaderTranslator headerTranslator)", "full_signature": "private  MessageCommandAdapter(final HeaderTranslator headerTranslator)", "class_method_signature": "MessageCommandAdapter.MessageCommandAdapter(final HeaderTranslator headerTranslator)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final HeaderTranslator headerTranslator)", "modifiers": "public static", "return": "MessageCommandAdapter", "signature": "MessageCommandAdapter of(final HeaderTranslator headerTranslator)", "full_signature": "public static MessageCommandAdapter of(final HeaderTranslator headerTranslator)", "class_method_signature": "MessageCommandAdapter.of(final HeaderTranslator headerTranslator)", "testcase": false, "constructor": false}, {"identifier": "toAdaptable", "parameters": "(final MessageCommand<?, ?> t)", "modifiers": "@Override public", "return": "Adaptable", "signature": "Adaptable toAdaptable(final MessageCommand<?, ?> t)", "full_signature": "@Override public Adaptable toAdaptable(final MessageCommand<?, ?> t)", "class_method_signature": "MessageCommandAdapter.toAdaptable(final MessageCommand<?, ?> t)", "testcase": false, "constructor": false}, {"identifier": "isForResponses", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isForResponses()", "full_signature": "@Override public boolean isForResponses()", "class_method_signature": "MessageCommandAdapter.isForResponses()", "testcase": false, "constructor": false}, {"identifier": "requiresSubject", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean requiresSubject()", "full_signature": "@Override public boolean requiresSubject()", "class_method_signature": "MessageCommandAdapter.requiresSubject()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(final Adaptable adaptable)", "modifiers": "@Override protected", "return": "String", "signature": "String getType(final Adaptable adaptable)", "full_signature": "@Override protected String getType(final Adaptable adaptable)", "class_method_signature": "MessageCommandAdapter.getType(final Adaptable adaptable)", "testcase": false, "constructor": false}, {"identifier": "mapSignalToAdaptable", "parameters": "(final MessageCommand<?, ?> command, final TopicPath.Channel channel)", "modifiers": "@Override public", "return": "Adaptable", "signature": "Adaptable mapSignalToAdaptable(final MessageCommand<?, ?> command, final TopicPath.Channel channel)", "full_signature": "@Override public Adaptable mapSignalToAdaptable(final MessageCommand<?, ?> command, final TopicPath.Channel channel)", "class_method_signature": "MessageCommandAdapter.mapSignalToAdaptable(final MessageCommand<?, ?> command, final TopicPath.Channel channel)", "testcase": false, "constructor": false}], "file": "protocol-adapter/src/main/java/org/eclipse/ditto/protocoladapter/things/MessageCommandAdapter.java"}, "focal_method": {"identifier": "toAdaptable", "parameters": "(final MessageCommand<?, ?> t)", "modifiers": "@Override public", "return": "Adaptable", "body": "@Override\n    public Adaptable toAdaptable(final MessageCommand<?, ?> t) {\n        return toAdaptable(t, TopicPath.Channel.LIVE);\n    }", "signature": "Adaptable toAdaptable(final MessageCommand<?, ?> t)", "full_signature": "@Override public Adaptable toAdaptable(final MessageCommand<?, ?> t)", "class_method_signature": "MessageCommandAdapter.toAdaptable(final MessageCommand<?, ?> t)", "testcase": false, "constructor": false, "invocations": ["toAdaptable"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}