{"test_class": {"identifier": "ClientCertAuthenticatorTest", "superclass": "extends BaseAuthenticatorTest", "interfaces": "", "fields": [], "file": "agent/jvm/src/test/java/org/jolokia/jvmagent/security/ClientCertAuthenticatorTest.java"}, "test_case": {"identifier": "negativeWithNoCert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void negativeWithNoCert() throws Exception {\n                ClientCertAuthenticator auth = new ClientCertAuthenticator(getConfig(\"clientPrincipal\",\"cn=roland\",\n                                                                             \"extendedClientCheck\",\"false\"));\n        Authenticator.Result result = auth.authenticate(createHttpsExchange(new Headers(),\"uid=blub,cn=roland,o=redhat,c=de\",\n                                                                            false /* no cert */, false));\n        assertTrue(result instanceof Authenticator.Failure);\n    }", "signature": "void negativeWithNoCert()", "full_signature": "@Test public void negativeWithNoCert()", "class_method_signature": "ClientCertAuthenticatorTest.negativeWithNoCert()", "testcase": true, "constructor": false, "invocations": ["getConfig", "authenticate", "createHttpsExchange", "assertTrue"]}, "focal_class": {"identifier": "ClientCertAuthenticator", "superclass": "extends Authenticator", "interfaces": "", "fields": [{"original_string": "static final String CLIENTAUTH_OID = \"1.3.6.1.5.5.7.3.2\";", "modifier": "static final", "type": "String", "declarator": "CLIENTAUTH_OID = \"1.3.6.1.5.5.7.3.2\"", "var_name": "CLIENTAUTH_OID"}, {"original_string": "private final boolean useSslClientAuthentication;", "modifier": "private final", "type": "boolean", "declarator": "useSslClientAuthentication", "var_name": "useSslClientAuthentication"}, {"original_string": "private final List<LdapName> allowedPrincipals;", "modifier": "private final", "type": "List<LdapName>", "declarator": "allowedPrincipals", "var_name": "allowedPrincipals"}, {"original_string": "private final boolean extendedClientCheck;", "modifier": "private final", "type": "boolean", "declarator": "extendedClientCheck", "var_name": "extendedClientCheck"}], "methods": [{"identifier": "ClientCertAuthenticator", "parameters": "(JolokiaServerConfig pConfig)", "modifiers": "public", "return": "", "signature": " ClientCertAuthenticator(JolokiaServerConfig pConfig)", "full_signature": "public  ClientCertAuthenticator(JolokiaServerConfig pConfig)", "class_method_signature": "ClientCertAuthenticator.ClientCertAuthenticator(JolokiaServerConfig pConfig)", "testcase": false, "constructor": true}, {"identifier": "authenticate", "parameters": "(HttpExchange httpExchange)", "modifiers": "@Override public", "return": "Result", "signature": "Result authenticate(HttpExchange httpExchange)", "full_signature": "@Override public Result authenticate(HttpExchange httpExchange)", "class_method_signature": "ClientCertAuthenticator.authenticate(HttpExchange httpExchange)", "testcase": false, "constructor": false}, {"identifier": "getClientCert", "parameters": "(HttpsExchange pHttpsExchange)", "modifiers": "private", "return": "X509Certificate", "signature": "X509Certificate getClientCert(HttpsExchange pHttpsExchange)", "full_signature": "private X509Certificate getClientCert(HttpsExchange pHttpsExchange)", "class_method_signature": "ClientCertAuthenticator.getClientCert(HttpsExchange pHttpsExchange)", "testcase": false, "constructor": false}, {"identifier": "checkCertForClientUsage", "parameters": "(X509Certificate clientCert)", "modifiers": "private", "return": "void", "signature": "void checkCertForClientUsage(X509Certificate clientCert)", "full_signature": "private void checkCertForClientUsage(X509Certificate clientCert)", "class_method_signature": "ClientCertAuthenticator.checkCertForClientUsage(X509Certificate clientCert)", "testcase": false, "constructor": false}, {"identifier": "checkCertForAllowedPrincipals", "parameters": "(HttpsExchange pHttpsExchange)", "modifiers": "private", "return": "void", "signature": "void checkCertForAllowedPrincipals(HttpsExchange pHttpsExchange)", "full_signature": "private void checkCertForAllowedPrincipals(HttpsExchange pHttpsExchange)", "class_method_signature": "ClientCertAuthenticator.checkCertForAllowedPrincipals(HttpsExchange pHttpsExchange)", "testcase": false, "constructor": false}, {"identifier": "getPrincipalRdns", "parameters": "(X500Principal principal)", "modifiers": "private", "return": "Set<Rdn>", "signature": "Set<Rdn> getPrincipalRdns(X500Principal principal)", "full_signature": "private Set<Rdn> getPrincipalRdns(X500Principal principal)", "class_method_signature": "ClientCertAuthenticator.getPrincipalRdns(X500Principal principal)", "testcase": false, "constructor": false}, {"identifier": "parseAllowedPrincipals", "parameters": "(JolokiaServerConfig pConfig)", "modifiers": "private", "return": "List<LdapName>", "signature": "List<LdapName> parseAllowedPrincipals(JolokiaServerConfig pConfig)", "full_signature": "private List<LdapName> parseAllowedPrincipals(JolokiaServerConfig pConfig)", "class_method_signature": "ClientCertAuthenticator.parseAllowedPrincipals(JolokiaServerConfig pConfig)", "testcase": false, "constructor": false}], "file": "agent/jvm/src/main/java/org/jolokia/jvmagent/security/ClientCertAuthenticator.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(HttpExchange httpExchange)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result authenticate(HttpExchange httpExchange) {\n        if( !(httpExchange instanceof HttpsExchange) ) {\n            return new Failure(500);\n        }\n        try {\n            HttpsExchange httpsExchange = (HttpsExchange) httpExchange;\n            X509Certificate certificate = getClientCert(httpsExchange);\n            if (certificate == null) {\n                return new Failure(401);\n            }\n            checkCertForClientUsage(certificate);\n            checkCertForAllowedPrincipals(httpsExchange);\n\n            String name=\"\";\n            try {\n                name = httpsExchange.getSSLSession().getPeerPrincipal().getName();\n            } catch (SSLPeerUnverifiedException ignore) {\n            }\n            return new Success(new HttpPrincipal(name, \"ssl\"));\n\n        } catch (SecurityException e) {\n            return new Failure(403);\n        }\n    }", "signature": "Result authenticate(HttpExchange httpExchange)", "full_signature": "@Override public Result authenticate(HttpExchange httpExchange)", "class_method_signature": "ClientCertAuthenticator.authenticate(HttpExchange httpExchange)", "testcase": false, "constructor": false, "invocations": ["getClientCert", "checkCertForClientUsage", "checkCertForAllowedPrincipals", "getName", "getPeerPrincipal", "getSSLSession"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}