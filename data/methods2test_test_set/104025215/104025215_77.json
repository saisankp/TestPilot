{"test_class": {"identifier": "ViewModelProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ViewModelProvider mViewModelProvider;", "modifier": "private", "type": "ViewModelProvider", "declarator": "mViewModelProvider", "var_name": "mViewModelProvider"}], "file": "lifecycle/extensions/src/test/java/android/arch/lifecycle/ViewModelProviderTest.java"}, "test_case": {"identifier": "twoViewModels", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void twoViewModels() {\n        ViewModel1 model1 = mViewModelProvider.get(ViewModel1.class);\n        ViewModel2 model2 = mViewModelProvider.get(ViewModel2.class);\n        assertThat(mViewModelProvider.get(ViewModel1.class), is(model1));\n        assertThat(mViewModelProvider.get(ViewModel2.class), is(model2));\n    }", "signature": "void twoViewModels()", "full_signature": "@Test public void twoViewModels()", "class_method_signature": "ViewModelProviderTest.twoViewModels()", "testcase": true, "constructor": false, "invocations": ["get", "get", "assertThat", "get", "is", "assertThat", "get", "is"]}, "focal_class": {"identifier": "ViewModelProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_KEY =\n            \"android.arch.lifecycle.ViewModelProvider.DefaultKey\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_KEY =\n            \"android.arch.lifecycle.ViewModelProvider.DefaultKey\"", "var_name": "DEFAULT_KEY"}, {"original_string": "private final Factory mFactory;", "modifier": "private final", "type": "Factory", "declarator": "mFactory", "var_name": "mFactory"}, {"original_string": "private final ViewModelStore mViewModelStore;", "modifier": "private final", "type": "ViewModelStore", "declarator": "mViewModelStore", "var_name": "mViewModelStore"}], "methods": [{"identifier": "ViewModelProvider", "parameters": "(@NonNull ViewModelStoreOwner owner, @NonNull Factory factory)", "modifiers": "public", "return": "", "signature": " ViewModelProvider(@NonNull ViewModelStoreOwner owner, @NonNull Factory factory)", "full_signature": "public  ViewModelProvider(@NonNull ViewModelStoreOwner owner, @NonNull Factory factory)", "class_method_signature": "ViewModelProvider.ViewModelProvider(@NonNull ViewModelStoreOwner owner, @NonNull Factory factory)", "testcase": false, "constructor": true}, {"identifier": "ViewModelProvider", "parameters": "(ViewModelStore store, Factory factory)", "modifiers": "public", "return": "", "signature": " ViewModelProvider(ViewModelStore store, Factory factory)", "full_signature": "public  ViewModelProvider(ViewModelStore store, Factory factory)", "class_method_signature": "ViewModelProvider.ViewModelProvider(ViewModelStore store, Factory factory)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(Class<T> modelClass)", "modifiers": "public", "return": "T", "signature": "T get(Class<T> modelClass)", "full_signature": "public T get(Class<T> modelClass)", "class_method_signature": "ViewModelProvider.get(Class<T> modelClass)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(@NonNull String key, @NonNull Class<T> modelClass)", "modifiers": "@NonNull @MainThread public", "return": "T", "signature": "T get(@NonNull String key, @NonNull Class<T> modelClass)", "full_signature": "@NonNull @MainThread public T get(@NonNull String key, @NonNull Class<T> modelClass)", "class_method_signature": "ViewModelProvider.get(@NonNull String key, @NonNull Class<T> modelClass)", "testcase": false, "constructor": false}], "file": "lifecycle/extensions/src/main/java/android/arch/lifecycle/ViewModelProvider.java"}, "focal_method": {"identifier": "get", "parameters": "(Class<T> modelClass)", "modifiers": "public", "return": "T", "body": "public <T extends ViewModel> T get(Class<T> modelClass) {\n        String canonicalName = modelClass.getCanonicalName();\n        if (canonicalName == null) {\n            throw new IllegalArgumentException(\"Local and anonymous classes can not be ViewModels\");\n        }\n        return get(DEFAULT_KEY + \":\" + canonicalName, modelClass);\n    }", "signature": "T get(Class<T> modelClass)", "full_signature": "public T get(Class<T> modelClass)", "class_method_signature": "ViewModelProvider.get(Class<T> modelClass)", "testcase": false, "constructor": false, "invocations": ["getCanonicalName", "get"]}, "repository": {"repo_id": 104025215, "url": "https://github.com/Rayduh/support", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 8, "size": 253405, "license": "licensed"}}