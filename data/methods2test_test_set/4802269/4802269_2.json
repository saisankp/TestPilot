{"test_class": {"identifier": "DXDataObjectTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/java/src/test/java/com/dnanexus/DXDataObjectTest.java"}, "test_case": {"identifier": "testDeserializeProjectsMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeserializeProjectsMap() throws IOException {\n        JsonNode input =\n                DXJSON.parseJson(\"{\\\"project-0000\\\": \\\"CONTRIBUTE\\\", \\\"project-1111\\\": \\\"ADMINISTER\\\"}\");\n        Map<String, AccessLevel> listProjectsResponse =\n                DXDataObject.deserializeListProjectsMap(input);\n        Map<String, AccessLevel> expected =\n                ImmutableMap.of(\"project-0000\", AccessLevel.CONTRIBUTE, \"project-1111\",\n                        AccessLevel.ADMINISTER);\n        Assert.assertEquals(expected, listProjectsResponse);\n    }", "signature": "void testDeserializeProjectsMap()", "full_signature": "@Test public void testDeserializeProjectsMap()", "class_method_signature": "DXDataObjectTest.testDeserializeProjectsMap()", "testcase": true, "constructor": false, "invocations": ["parseJson", "deserializeListProjectsMap", "of", "assertEquals"]}, "focal_class": {"identifier": "DXDataObject", "superclass": "extends DXObject", "interfaces": "", "fields": [{"original_string": "private static final ObjectReader listProjectsReader = MAPPER\n            .readerFor(new TypeReference<Map<String, AccessLevel>>() {\n                // Empty body for Jackson's TypeReference\n            });", "modifier": "private static final", "type": "ObjectReader", "declarator": "listProjectsReader = MAPPER\n            .readerFor(new TypeReference<Map<String, AccessLevel>>() {\n                // Empty body for Jackson's TypeReference\n            })", "var_name": "listProjectsReader"}, {"original_string": "private final DXContainer container;", "modifier": "private final", "type": "DXContainer", "declarator": "container", "var_name": "container"}, {"original_string": "protected final JsonNode cachedDescribe;", "modifier": "protected final", "type": "JsonNode", "declarator": "cachedDescribe", "var_name": "cachedDescribe"}], "methods": [{"identifier": "checkDXLinkFormat", "parameters": "(Map<String, Object> value)", "modifiers": "protected static", "return": "void", "signature": "void checkDXLinkFormat(Map<String, Object> value)", "full_signature": "protected static void checkDXLinkFormat(Map<String, Object> value)", "class_method_signature": "DXDataObject.checkDXLinkFormat(Map<String, Object> value)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Map<String, Object> value)", "modifiers": "@JsonCreator private static", "return": "DXDataObject", "signature": "DXDataObject create(Map<String, Object> value)", "full_signature": "@JsonCreator private static DXDataObject create(Map<String, Object> value)", "class_method_signature": "DXDataObject.create(Map<String, Object> value)", "testcase": false, "constructor": false}, {"identifier": "deserializeListProjectsMap", "parameters": "(JsonNode result)", "modifiers": "@VisibleForTesting static", "return": "Map<String, AccessLevel>", "signature": "Map<String, AccessLevel> deserializeListProjectsMap(JsonNode result)", "full_signature": "@VisibleForTesting static Map<String, AccessLevel> deserializeListProjectsMap(JsonNode result)", "class_method_signature": "DXDataObject.deserializeListProjectsMap(JsonNode result)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(String objectId)", "modifiers": "public static", "return": "DXDataObject", "signature": "DXDataObject getInstance(String objectId)", "full_signature": "public static DXDataObject getInstance(String objectId)", "class_method_signature": "DXDataObject.getInstance(String objectId)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(String objectId, DXContainer project)", "modifiers": "public static", "return": "DXDataObject", "signature": "DXDataObject getInstance(String objectId, DXContainer project)", "full_signature": "public static DXDataObject getInstance(String objectId, DXContainer project)", "class_method_signature": "DXDataObject.getInstance(String objectId, DXContainer project)", "testcase": false, "constructor": false}, {"identifier": "getInstanceWithCachedDescribe", "parameters": "(String objectId, DXContainer project,\n            DXEnvironment env, JsonNode describe)", "modifiers": "static", "return": "DXDataObject", "signature": "DXDataObject getInstanceWithCachedDescribe(String objectId, DXContainer project,\n            DXEnvironment env, JsonNode describe)", "full_signature": "static DXDataObject getInstanceWithCachedDescribe(String objectId, DXContainer project,\n            DXEnvironment env, JsonNode describe)", "class_method_signature": "DXDataObject.getInstanceWithCachedDescribe(String objectId, DXContainer project,\n            DXEnvironment env, JsonNode describe)", "testcase": false, "constructor": false}, {"identifier": "getInstanceWithEnvironment", "parameters": "(String objectId, DXContainer project,\n            DXEnvironment env)", "modifiers": "public static", "return": "DXDataObject", "signature": "DXDataObject getInstanceWithEnvironment(String objectId, DXContainer project,\n            DXEnvironment env)", "full_signature": "public static DXDataObject getInstanceWithEnvironment(String objectId, DXContainer project,\n            DXEnvironment env)", "class_method_signature": "DXDataObject.getInstanceWithEnvironment(String objectId, DXContainer project,\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "getInstanceWithEnvironment", "parameters": "(String objectId, DXEnvironment env)", "modifiers": "public static", "return": "DXDataObject", "signature": "DXDataObject getInstanceWithEnvironment(String objectId, DXEnvironment env)", "full_signature": "public static DXDataObject getInstanceWithEnvironment(String objectId, DXEnvironment env)", "class_method_signature": "DXDataObject.getInstanceWithEnvironment(String objectId, DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "DXDataObject", "parameters": "(String dxId, String className, DXContainer project, DXEnvironment env,\n            JsonNode cachedDescribe)", "modifiers": "protected", "return": "", "signature": " DXDataObject(String dxId, String className, DXContainer project, DXEnvironment env,\n            JsonNode cachedDescribe)", "full_signature": "protected  DXDataObject(String dxId, String className, DXContainer project, DXEnvironment env,\n            JsonNode cachedDescribe)", "class_method_signature": "DXDataObject.DXDataObject(String dxId, String className, DXContainer project, DXEnvironment env,\n            JsonNode cachedDescribe)", "testcase": false, "constructor": true}, {"identifier": "DXDataObject", "parameters": "(String dxId, String className, DXEnvironment env, JsonNode cachedDescribe)", "modifiers": "protected", "return": "", "signature": " DXDataObject(String dxId, String className, DXEnvironment env, JsonNode cachedDescribe)", "full_signature": "protected  DXDataObject(String dxId, String className, DXEnvironment env, JsonNode cachedDescribe)", "class_method_signature": "DXDataObject.DXDataObject(String dxId, String className, DXEnvironment env, JsonNode cachedDescribe)", "testcase": false, "constructor": true}, {"identifier": "addTags", "parameters": "(List<String> tags)", "modifiers": "public", "return": "void", "signature": "void addTags(List<String> tags)", "full_signature": "public void addTags(List<String> tags)", "class_method_signature": "DXDataObject.addTags(List<String> tags)", "testcase": false, "constructor": false}, {"identifier": "addTypes", "parameters": "(List<String> types)", "modifiers": "public", "return": "void", "signature": "void addTypes(List<String> types)", "full_signature": "public void addTypes(List<String> types)", "class_method_signature": "DXDataObject.addTypes(List<String> types)", "testcase": false, "constructor": false}, {"identifier": "checkCachedDescribeAvailable", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void checkCachedDescribeAvailable()", "full_signature": "protected void checkCachedDescribeAvailable()", "class_method_signature": "DXDataObject.checkCachedDescribeAvailable()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "DXDataObject", "signature": "DXDataObject close()", "full_signature": "public DXDataObject close()", "class_method_signature": "DXDataObject.close()", "testcase": false, "constructor": false}, {"identifier": "closeAndWait", "parameters": "()", "modifiers": "public", "return": "DXDataObject", "signature": "DXDataObject closeAndWait()", "full_signature": "public DXDataObject closeAndWait()", "class_method_signature": "DXDataObject.closeAndWait()", "testcase": false, "constructor": false}, {"identifier": "describe", "parameters": "()", "modifiers": "public", "return": "Describe", "signature": "Describe describe()", "full_signature": "public Describe describe()", "class_method_signature": "DXDataObject.describe()", "testcase": false, "constructor": false}, {"identifier": "describe", "parameters": "(DescribeOptions options)", "modifiers": "public", "return": "Describe", "signature": "Describe describe(DescribeOptions options)", "full_signature": "public Describe describe(DescribeOptions options)", "class_method_signature": "DXDataObject.describe(DescribeOptions options)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DXDataObject.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getCachedDescribe", "parameters": "()", "modifiers": "public", "return": "Describe", "signature": "Describe getCachedDescribe()", "full_signature": "public Describe getCachedDescribe()", "class_method_signature": "DXDataObject.getCachedDescribe()", "testcase": false, "constructor": false}, {"identifier": "getLinkAsJson", "parameters": "()", "modifiers": "@JsonValue public", "return": "JsonNode", "signature": "JsonNode getLinkAsJson()", "full_signature": "@JsonValue public JsonNode getLinkAsJson()", "class_method_signature": "DXDataObject.getLinkAsJson()", "testcase": false, "constructor": false}, {"identifier": "getProject", "parameters": "()", "modifiers": "public", "return": "DXContainer", "signature": "DXContainer getProject()", "full_signature": "public DXContainer getProject()", "class_method_signature": "DXDataObject.getProject()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DXDataObject.hashCode()", "testcase": false, "constructor": false}, {"identifier": "listProjects", "parameters": "()", "modifiers": "public", "return": "Map<DXContainer, AccessLevel>", "signature": "Map<DXContainer, AccessLevel> listProjects()", "full_signature": "public Map<DXContainer, AccessLevel> listProjects()", "class_method_signature": "DXDataObject.listProjects()", "testcase": false, "constructor": false}, {"identifier": "putAllProperties", "parameters": "(Map<String, String> properties)", "modifiers": "public", "return": "void", "signature": "void putAllProperties(Map<String, String> properties)", "full_signature": "public void putAllProperties(Map<String, String> properties)", "class_method_signature": "DXDataObject.putAllProperties(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "putAllProperties", "parameters": "(Map<String, String> propertiesToSet,\n            List<String> propertiesToRemove)", "modifiers": "public", "return": "void", "signature": "void putAllProperties(Map<String, String> propertiesToSet,\n            List<String> propertiesToRemove)", "full_signature": "public void putAllProperties(Map<String, String> propertiesToSet,\n            List<String> propertiesToRemove)", "class_method_signature": "DXDataObject.putAllProperties(Map<String, String> propertiesToSet,\n            List<String> propertiesToRemove)", "testcase": false, "constructor": false}, {"identifier": "putProperty", "parameters": "(String key, String value)", "modifiers": "public", "return": "void", "signature": "void putProperty(String key, String value)", "full_signature": "public void putProperty(String key, String value)", "class_method_signature": "DXDataObject.putProperty(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "removeProperty", "parameters": "(String key)", "modifiers": "public", "return": "void", "signature": "void removeProperty(String key)", "full_signature": "public void removeProperty(String key)", "class_method_signature": "DXDataObject.removeProperty(String key)", "testcase": false, "constructor": false}, {"identifier": "removeTags", "parameters": "(List<String> tags)", "modifiers": "public", "return": "void", "signature": "void removeTags(List<String> tags)", "full_signature": "public void removeTags(List<String> tags)", "class_method_signature": "DXDataObject.removeTags(List<String> tags)", "testcase": false, "constructor": false}, {"identifier": "removeTypes", "parameters": "(List<String> types)", "modifiers": "public", "return": "void", "signature": "void removeTypes(List<String> types)", "full_signature": "public void removeTypes(List<String> types)", "class_method_signature": "DXDataObject.removeTypes(List<String> types)", "testcase": false, "constructor": false}, {"identifier": "rename", "parameters": "(String newName)", "modifiers": "public", "return": "void", "signature": "void rename(String newName)", "full_signature": "public void rename(String newName)", "class_method_signature": "DXDataObject.rename(String newName)", "testcase": false, "constructor": false}, {"identifier": "setDetails", "parameters": "(Object details)", "modifiers": "public", "return": "void", "signature": "void setDetails(Object details)", "full_signature": "public void setDetails(Object details)", "class_method_signature": "DXDataObject.setDetails(Object details)", "testcase": false, "constructor": false}, {"identifier": "setVisibility", "parameters": "(boolean visible)", "modifiers": "public", "return": "void", "signature": "void setVisibility(boolean visible)", "full_signature": "public void setVisibility(boolean visible)", "class_method_signature": "DXDataObject.setVisibility(boolean visible)", "testcase": false, "constructor": false}], "file": "src/java/src/main/java/com/dnanexus/DXDataObject.java"}, "focal_method": {"identifier": "deserializeListProjectsMap", "parameters": "(JsonNode result)", "modifiers": "@VisibleForTesting static", "return": "Map<String, AccessLevel>", "body": "@VisibleForTesting\n    static Map<String, AccessLevel> deserializeListProjectsMap(JsonNode result) {\n        try {\n            return listProjectsReader.<Map<String, AccessLevel>>readValue(result);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }", "signature": "Map<String, AccessLevel> deserializeListProjectsMap(JsonNode result)", "full_signature": "@VisibleForTesting static Map<String, AccessLevel> deserializeListProjectsMap(JsonNode result)", "class_method_signature": "DXDataObject.deserializeListProjectsMap(JsonNode result)", "testcase": false, "constructor": false, "invocations": ["readValue"]}, "repository": {"repo_id": 4802269, "url": "https://github.com/dnanexus/dx-toolkit", "stars": 59, "created": "6/27/2012 12:23:47 AM +00:00", "updates": "2020-01-21T16:35:18+00:00", "fork": "False", "license": "licensed"}}