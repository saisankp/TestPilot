{"test_class": {"identifier": "StreamOperationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SiddhiManager sm;", "modifier": "private", "type": "SiddhiManager", "declarator": "sm", "var_name": "sm"}, {"original_string": "private StreamOperationService streamOperationService;", "modifier": "private", "type": "StreamOperationService", "declarator": "streamOperationService", "var_name": "streamOperationService"}, {"original_string": "private CallbackService callbackFactory;", "modifier": "private", "type": "CallbackService", "declarator": "callbackFactory", "var_name": "callbackFactory"}, {"original_string": "private StreamStatusDao streamStatusDao;", "modifier": "private", "type": "StreamStatusDao", "declarator": "streamStatusDao", "var_name": "streamStatusDao"}, {"original_string": "private ConfigurationContext configurationContext;", "modifier": "private", "type": "ConfigurationContext", "declarator": "configurationContext", "var_name": "configurationContext"}, {"original_string": "private DroolsConnectionContainer droolsConnectionContainer;", "modifier": "private", "type": "DroolsConnectionContainer", "declarator": "droolsConnectionContainer", "var_name": "droolsConnectionContainer"}, {"original_string": "private static final String STREAM_NAME_GOOD = \"goodStreamName\";", "modifier": "private static final", "type": "String", "declarator": "STREAM_NAME_GOOD = \"goodStreamName\"", "var_name": "STREAM_NAME_GOOD"}, {"original_string": "private static final String INFERRED_STREAM_GOOD = \"goodInferredStreamName\";", "modifier": "private static final", "type": "String", "declarator": "INFERRED_STREAM_GOOD = \"goodInferredStreamName\"", "var_name": "INFERRED_STREAM_GOOD"}, {"original_string": "private static final String CLUSTER_ID = \"default\";", "modifier": "private static final", "type": "String", "declarator": "CLUSTER_ID = \"default\"", "var_name": "CLUSTER_ID"}], "file": "engine/src/test/java/com/stratio/decision/service/StreamOperationServiceTest.java"}, "test_case": {"identifier": "addQueryTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addQueryTest() {\n        createBaseStream();\n\n        streamOperationService.addQuery(STREAM_NAME_GOOD, \"from \" + STREAM_NAME_GOOD + \" select * insert into \"\n                + INFERRED_STREAM_GOOD + \" for current-events\");\n\n        Mockito.verify(streamStatusDao, VerificationModeFactory.times(2)).createInferredStream(Mockito.anyString(), Mockito.anyList());\n\n        Assert.assertEquals(\"Expected value not found\", 2, sm.getStreamDefinitions().size());\n\n    }", "signature": "void addQueryTest()", "full_signature": "@Test public void addQueryTest()", "class_method_signature": "StreamOperationServiceTest.addQueryTest()", "testcase": true, "constructor": false, "invocations": ["createBaseStream", "addQuery", "createInferredStream", "verify", "times", "anyString", "anyList", "assertEquals", "size", "getStreamDefinitions"]}, "focal_class": {"identifier": "StreamOperationService", "superclass": "extends StreamOperationServiceWithoutMetrics", "interfaces": "", "fields": [], "methods": [{"identifier": "StreamOperationService", "parameters": "(SiddhiManager siddhiManager, StreamStatusDao streamStatusDao, CallbackService callbackService)", "modifiers": "public", "return": "", "signature": " StreamOperationService(SiddhiManager siddhiManager, StreamStatusDao streamStatusDao, CallbackService callbackService)", "full_signature": "public  StreamOperationService(SiddhiManager siddhiManager, StreamStatusDao streamStatusDao, CallbackService callbackService)", "class_method_signature": "StreamOperationService.StreamOperationService(SiddhiManager siddhiManager, StreamStatusDao streamStatusDao, CallbackService callbackService)", "testcase": false, "constructor": true}, {"identifier": "StreamOperationService", "parameters": "(SiddhiManager siddhiManager, StreamStatusDao streamStatusDao, CallbackService\n        callbackService, DroolsConnectionContainer droolsConnectionContainer, ConfigurationContext configurationContext)", "modifiers": "public", "return": "", "signature": " StreamOperationService(SiddhiManager siddhiManager, StreamStatusDao streamStatusDao, CallbackService\n        callbackService, DroolsConnectionContainer droolsConnectionContainer, ConfigurationContext configurationContext)", "full_signature": "public  StreamOperationService(SiddhiManager siddhiManager, StreamStatusDao streamStatusDao, CallbackService\n        callbackService, DroolsConnectionContainer droolsConnectionContainer, ConfigurationContext configurationContext)", "class_method_signature": "StreamOperationService.StreamOperationService(SiddhiManager siddhiManager, StreamStatusDao streamStatusDao, CallbackService\n        callbackService, DroolsConnectionContainer droolsConnectionContainer, ConfigurationContext configurationContext)", "testcase": false, "constructor": true}, {"identifier": "createStream", "parameters": "(String streamName, List<ColumnNameTypeValue> columns)", "modifiers": "@Override @Counted(absolute = true, name = \"streams.total.created\", monotonic = true) public", "return": "void", "signature": "void createStream(String streamName, List<ColumnNameTypeValue> columns)", "full_signature": "@Override @Counted(absolute = true, name = \"streams.total.created\", monotonic = true) public void createStream(String streamName, List<ColumnNameTypeValue> columns)", "class_method_signature": "StreamOperationService.createStream(String streamName, List<ColumnNameTypeValue> columns)", "testcase": false, "constructor": false}, {"identifier": "streamExist", "parameters": "(String streamName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean streamExist(String streamName)", "full_signature": "@Override public boolean streamExist(String streamName)", "class_method_signature": "StreamOperationService.streamExist(String streamName)", "testcase": false, "constructor": false}, {"identifier": "isUserDefined", "parameters": "(String streamName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUserDefined(String streamName)", "full_signature": "@Override public boolean isUserDefined(String streamName)", "class_method_signature": "StreamOperationService.isUserDefined(String streamName)", "testcase": false, "constructor": false}, {"identifier": "enlargeStream", "parameters": "(String streamName, List<ColumnNameTypeValue> columns)", "modifiers": "@Override @Counted(absolute = true, name = \"streams.total.altered\", monotonic = true) public", "return": "int", "signature": "int enlargeStream(String streamName, List<ColumnNameTypeValue> columns)", "full_signature": "@Override @Counted(absolute = true, name = \"streams.total.altered\", monotonic = true) public int enlargeStream(String streamName, List<ColumnNameTypeValue> columns)", "class_method_signature": "StreamOperationService.enlargeStream(String streamName, List<ColumnNameTypeValue> columns)", "testcase": false, "constructor": false}, {"identifier": "dropStream", "parameters": "(String streamName)", "modifiers": "@Override @Counted(absolute = true, name = \"streams.total.deleted\", monotonic = true) public", "return": "void", "signature": "void dropStream(String streamName)", "full_signature": "@Override @Counted(absolute = true, name = \"streams.total.deleted\", monotonic = true) public void dropStream(String streamName)", "class_method_signature": "StreamOperationService.dropStream(String streamName)", "testcase": false, "constructor": false}, {"identifier": "addQuery", "parameters": "(String streamName, String queryString)", "modifiers": "@Override @Counted(absolute = true, name = \"queries.total.added\", monotonic = true) public", "return": "String", "signature": "String addQuery(String streamName, String queryString)", "full_signature": "@Override @Counted(absolute = true, name = \"queries.total.added\", monotonic = true) public String addQuery(String streamName, String queryString)", "class_method_signature": "StreamOperationService.addQuery(String streamName, String queryString)", "testcase": false, "constructor": false}, {"identifier": "removeQuery", "parameters": "(String queryId, String streamName)", "modifiers": "@Override @Counted(absolute = true, name = \"queries.total.removed\", monotonic = true) public", "return": "void", "signature": "void removeQuery(String queryId, String streamName)", "full_signature": "@Override @Counted(absolute = true, name = \"queries.total.removed\", monotonic = true) public void removeQuery(String queryId, String streamName)", "class_method_signature": "StreamOperationService.removeQuery(String queryId, String streamName)", "testcase": false, "constructor": false}, {"identifier": "queryIdExists", "parameters": "(String streamName, String queryId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean queryIdExists(String streamName, String queryId)", "full_signature": "@Override public boolean queryIdExists(String streamName, String queryId)", "class_method_signature": "StreamOperationService.queryIdExists(String streamName, String queryId)", "testcase": false, "constructor": false}, {"identifier": "queryRawExists", "parameters": "(String streamName, String queryRaw)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean queryRawExists(String streamName, String queryRaw)", "full_signature": "@Override public boolean queryRawExists(String streamName, String queryRaw)", "class_method_signature": "StreamOperationService.queryRawExists(String streamName, String queryRaw)", "testcase": false, "constructor": false}, {"identifier": "enableAction", "parameters": "(String streamName, StreamAction action)", "modifiers": "@Override public", "return": "void", "signature": "void enableAction(String streamName, StreamAction action)", "full_signature": "@Override public void enableAction(String streamName, StreamAction action)", "class_method_signature": "StreamOperationService.enableAction(String streamName, StreamAction action)", "testcase": false, "constructor": false}, {"identifier": "disableAction", "parameters": "(String streamName, StreamAction action)", "modifiers": "@Override public", "return": "void", "signature": "void disableAction(String streamName, StreamAction action)", "full_signature": "@Override public void disableAction(String streamName, StreamAction action)", "class_method_signature": "StreamOperationService.disableAction(String streamName, StreamAction action)", "testcase": false, "constructor": false}, {"identifier": "isActionEnabled", "parameters": "(String streamName, StreamAction action)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isActionEnabled(String streamName, StreamAction action)", "full_signature": "@Override public boolean isActionEnabled(String streamName, StreamAction action)", "class_method_signature": "StreamOperationService.isActionEnabled(String streamName, StreamAction action)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "()", "modifiers": "@Override @Counted(absolute = true, name = \"streams.total.listed\", monotonic = true) public", "return": "List<StratioStreamingMessage>", "signature": "List<StratioStreamingMessage> list()", "full_signature": "@Override @Counted(absolute = true, name = \"streams.total.listed\", monotonic = true) public List<StratioStreamingMessage> list()", "class_method_signature": "StreamOperationService.list()", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(String streamName, List<ColumnNameTypeValue> columns)", "modifiers": "@Override @Timed(absolute = true, name = \"streams.send.time\") public", "return": "void", "signature": "void send(String streamName, List<ColumnNameTypeValue> columns)", "full_signature": "@Override @Timed(absolute = true, name = \"streams.send.time\") public void send(String streamName, List<ColumnNameTypeValue> columns)", "class_method_signature": "StreamOperationService.send(String streamName, List<ColumnNameTypeValue> columns)", "testcase": false, "constructor": false}, {"identifier": "enableEngineAction", "parameters": "(String streamName, EngineActionType engineActionType, Map<String, Object>\n            engineActionParams)", "modifiers": "@Override public", "return": "void", "signature": "void enableEngineAction(String streamName, EngineActionType engineActionType, Map<String, Object>\n            engineActionParams)", "full_signature": "@Override public void enableEngineAction(String streamName, EngineActionType engineActionType, Map<String, Object>\n            engineActionParams)", "class_method_signature": "StreamOperationService.enableEngineAction(String streamName, EngineActionType engineActionType, Map<String, Object>\n            engineActionParams)", "testcase": false, "constructor": false}], "file": "engine/src/main/java/com/stratio/decision/service/StreamOperationService.java"}, "focal_method": {"identifier": "addQuery", "parameters": "(String streamName, String queryString)", "modifiers": "@Override @Counted(absolute = true, name = \"queries.total.added\", monotonic = true) public", "return": "String", "body": "@Override\n    @Counted(absolute = true, name = \"queries.total.added\", monotonic = true)\n    public String addQuery(String streamName, String queryString) {\n        return super.addQuery(streamName, queryString);\n    }", "signature": "String addQuery(String streamName, String queryString)", "full_signature": "@Override @Counted(absolute = true, name = \"queries.total.added\", monotonic = true) public String addQuery(String streamName, String queryString)", "class_method_signature": "StreamOperationService.addQuery(String streamName, String queryString)", "testcase": false, "constructor": false, "invocations": ["addQuery"]}, "repository": {"repo_id": 20521495, "url": "https://github.com/Stratio/Decision", "language": "Java", "is_fork": false, "fork_count": 85, "stargazer_count": 305, "size": 41858, "license": "licensed"}}