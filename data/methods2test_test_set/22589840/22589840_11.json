{"test_class": {"identifier": "CookbookDiffTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "private CookbookDifferenceService differenceService;", "modifier": "private", "type": "CookbookDifferenceService", "declarator": "differenceService", "var_name": "differenceService"}], "file": "OLAT-LMS/src/test/java/org/olat/presentation/wiki/versioning/diff/CookbookDiffTest.java"}, "test_case": {"identifier": "testAddText", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddText() {\n        final String text1 = \"Line1\\nLine2\\nDies ist ein Text.\";\n        final String text2 = text1 + \"Text2\";\n        final List diffList = differenceService.diff(text1, text2);\n        final int i = 1;\n        for (final Iterator iter = diffList.iterator(); iter.hasNext();) {\n            final ChangeInfo changeInfo = (ChangeInfo) iter.next();\n            assertEquals(\"Type must be CHANGE\", changeInfo.getType(), ChangeInfo.CHANGE);\n            assertEquals(\"Wrong line content.\", changeInfo.getLines()[0], \"Dies ist ein Text.\");\n            assertEquals(\"Wrong line content.\", changeInfo.getLines()[1], \"Dies ist ein Text.Text2\");\n        }\n    }", "signature": "void testAddText()", "full_signature": "@Test public void testAddText()", "class_method_signature": "CookbookDiffTest.testAddText()", "testcase": true, "constructor": false, "invocations": ["diff", "iterator", "hasNext", "next", "assertEquals", "getType", "assertEquals", "getLines", "assertEquals", "getLines"]}, "focal_class": {"identifier": "CookbookDiff", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ChangeInfo last;", "modifier": "private", "type": "ChangeInfo", "declarator": "last", "var_name": "last"}, {"original_string": "private List lines = new ArrayList();", "modifier": "private", "type": "List", "declarator": "lines = new ArrayList()", "var_name": "lines"}, {"original_string": "private final int UNREAL = Integer.MAX_VALUE;", "modifier": "private final", "type": "int", "declarator": "UNREAL = Integer.MAX_VALUE", "var_name": "UNREAL"}, {"original_string": "private SourceInfo oldInfo, newInfo;", "modifier": "private", "type": "SourceInfo", "declarator": "oldInfo", "var_name": "oldInfo"}, {"original_string": "private int blocklen[];", "modifier": "private", "type": "int", "declarator": "blocklen[]", "var_name": "blocklen"}, {"original_string": "public static final int idle = 0, delete = 1, insert = 2, movenew = 3, moveold = 4, same = 5, change = 6;", "modifier": "public static final", "type": "int", "declarator": "idle = 0", "var_name": "idle"}, {"original_string": "int printstatus;", "modifier": "", "type": "int", "declarator": "printstatus", "var_name": "printstatus"}, {"original_string": "boolean anyprinted;", "modifier": "", "type": "boolean", "declarator": "anyprinted", "var_name": "anyprinted"}, {"original_string": "int printoldline, printnewline;", "modifier": "", "type": "int", "declarator": "printoldline", "var_name": "printoldline"}], "methods": [{"identifier": "diff", "parameters": "(final String oldText, final String newText)", "modifiers": "public", "return": "List", "signature": "List diff(final String oldText, final String newText)", "full_signature": "public List diff(final String oldText, final String newText)", "class_method_signature": "CookbookDiff.diff(final String oldText, final String newText)", "testcase": false, "constructor": false}, {"identifier": "inputScan", "parameters": "(final String input, final SourceInfo pinfo)", "modifiers": "", "return": "void", "signature": "void inputScan(final String input, final SourceInfo pinfo)", "full_signature": " void inputScan(final String input, final SourceInfo pinfo)", "class_method_signature": "CookbookDiff.inputScan(final String input, final SourceInfo pinfo)", "testcase": false, "constructor": false}, {"identifier": "storeLine", "parameters": "(final String linebuffer, final SourceInfo pinfo)", "modifiers": "", "return": "void", "signature": "void storeLine(final String linebuffer, final SourceInfo pinfo)", "full_signature": " void storeLine(final String linebuffer, final SourceInfo pinfo)", "class_method_signature": "CookbookDiff.storeLine(final String linebuffer, final SourceInfo pinfo)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "()", "modifiers": "", "return": "void", "signature": "void transform()", "full_signature": " void transform()", "class_method_signature": "CookbookDiff.transform()", "testcase": false, "constructor": false}, {"identifier": "scanUnique", "parameters": "()", "modifiers": "", "return": "void", "signature": "void scanUnique()", "full_signature": " void scanUnique()", "class_method_signature": "CookbookDiff.scanUnique()", "testcase": false, "constructor": false}, {"identifier": "scanAfter", "parameters": "()", "modifiers": "", "return": "void", "signature": "void scanAfter()", "full_signature": " void scanAfter()", "class_method_signature": "CookbookDiff.scanAfter()", "testcase": false, "constructor": false}, {"identifier": "scanBefore", "parameters": "()", "modifiers": "", "return": "void", "signature": "void scanBefore()", "full_signature": " void scanBefore()", "class_method_signature": "CookbookDiff.scanBefore()", "testcase": false, "constructor": false}, {"identifier": "scanBlocks", "parameters": "()", "modifiers": "", "return": "void", "signature": "void scanBlocks()", "full_signature": " void scanBlocks()", "class_method_signature": "CookbookDiff.scanBlocks()", "testcase": false, "constructor": false}, {"identifier": "printOut", "parameters": "()", "modifiers": "private", "return": "List", "signature": "List printOut()", "full_signature": "private List printOut()", "class_method_signature": "CookbookDiff.printOut()", "testcase": false, "constructor": false}, {"identifier": "setLast", "parameters": "(final ChangeInfo info, final List result)", "modifiers": "private", "return": "void", "signature": "void setLast(final ChangeInfo info, final List result)", "full_signature": "private void setLast(final ChangeInfo info, final List result)", "class_method_signature": "CookbookDiff.setLast(final ChangeInfo info, final List result)", "testcase": false, "constructor": false}, {"identifier": "setLast", "parameters": "(final List result)", "modifiers": "private", "return": "void", "signature": "void setLast(final List result)", "full_signature": "private void setLast(final List result)", "class_method_signature": "CookbookDiff.setLast(final List result)", "testcase": false, "constructor": false}, {"identifier": "newConsume", "parameters": "(final List result)", "modifiers": "private", "return": "void", "signature": "void newConsume(final List result)", "full_signature": "private void newConsume(final List result)", "class_method_signature": "CookbookDiff.newConsume(final List result)", "testcase": false, "constructor": false}, {"identifier": "oldConsume", "parameters": "(final List result)", "modifiers": "private", "return": "void", "signature": "void oldConsume(final List result)", "full_signature": "private void oldConsume(final List result)", "class_method_signature": "CookbookDiff.oldConsume(final List result)", "testcase": false, "constructor": false}, {"identifier": "showDelete", "parameters": "(final List result)", "modifiers": "private", "return": "void", "signature": "void showDelete(final List result)", "full_signature": "private void showDelete(final List result)", "class_method_signature": "CookbookDiff.showDelete(final List result)", "testcase": false, "constructor": false}, {"identifier": "showInsert", "parameters": "(final List result)", "modifiers": "private", "return": "void", "signature": "void showInsert(final List result)", "full_signature": "private void showInsert(final List result)", "class_method_signature": "CookbookDiff.showInsert(final List result)", "testcase": false, "constructor": false}, {"identifier": "showChange", "parameters": "(final List result)", "modifiers": "private", "return": "void", "signature": "void showChange(final List result)", "full_signature": "private void showChange(final List result)", "class_method_signature": "CookbookDiff.showChange(final List result)", "testcase": false, "constructor": false}, {"identifier": "skipOld", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void skipOld()", "full_signature": "private void skipOld()", "class_method_signature": "CookbookDiff.skipOld()", "testcase": false, "constructor": false}, {"identifier": "skipNew", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void skipNew()", "full_signature": "private void skipNew()", "class_method_signature": "CookbookDiff.skipNew()", "testcase": false, "constructor": false}, {"identifier": "showSame", "parameters": "(final List result)", "modifiers": "private", "return": "void", "signature": "void showSame(final List result)", "full_signature": "private void showSame(final List result)", "class_method_signature": "CookbookDiff.showSame(final List result)", "testcase": false, "constructor": false}, {"identifier": "showMove", "parameters": "(final List result)", "modifiers": "private", "return": "void", "signature": "void showMove(final List result)", "full_signature": "private void showMove(final List result)", "class_method_signature": "CookbookDiff.showMove(final List result)", "testcase": false, "constructor": false}], "file": "OLAT-LMS/src/main/java/org/olat/presentation/wiki/versioning/diff/CookbookDiff.java"}, "focal_method": {"identifier": "diff", "parameters": "(final String oldText, final String newText)", "modifiers": "public", "return": "List", "body": "public List diff(final String oldText, final String newText) {\n        Node.panchor = null;\n        oldInfo = new SourceInfo();\n        newInfo = new SourceInfo();\n        /* we don't process until we know both files really do exist. */\n\n        inputScan(oldText, oldInfo);\n        inputScan(newText, newInfo);\n\n        /*\n         * Now that we've read all the lines, allocate some arrays.\n         */\n        oldInfo.alloc();\n        newInfo.alloc();\n\n        blocklen = new int[(oldInfo.maxLine > newInfo.maxLine ? oldInfo.maxLine : newInfo.maxLine) + 2];\n\n        /* Now do the work, and print the results. */\n        transform();\n        return printOut();\n    }", "signature": "List diff(final String oldText, final String newText)", "full_signature": "public List diff(final String oldText, final String newText)", "class_method_signature": "CookbookDiff.diff(final String oldText, final String newText)", "testcase": false, "constructor": false, "invocations": ["inputScan", "inputScan", "alloc", "alloc", "transform", "printOut"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}