{"test_class": {"identifier": "SxmpParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SxmpParserTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SxmpParserTest.class)", "var_name": "logger"}], "file": "ch-sxmp/src/test/java/com/cloudhopper/sxmp/SxmpParserTest.java"}, "test_case": {"identifier": "parseUnsupportedChildElement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseUnsupportedChildElement() throws Exception {\n        StringBuilder string0 = new StringBuilder(200)\n            .append(\"<?xml version=\\\"1.0\\\"?>\\n\")\n            .append(\"<operation type=\\\"submit\\\">\\n\")\n            .append(\"  <test></test>\\n\")\n            .append(\"</operation>\\n\")\n            .append(\"\");\n\n        ByteArrayInputStream is = new ByteArrayInputStream(string0.toString().getBytes());\n        SxmpParser parser = new SxmpParser();\n\n        try {\n            Operation operation = parser.parse(is);\n            Assert.fail();\n        } catch (SxmpParsingException e) {\n            // correct behavior\n            Assert.assertEquals(SxmpErrorCode.UNSUPPORTED_ELEMENT, e.getErrorCode());\n            Assert.assertThat(e.getMessage(), CoreMatchers.containsString(\"Unsupported [test] element\"));\n            // this should also contain an operation since the root element was parsed\n            Assert.assertNotNull(e.getOperation());\n            PartialOperation partial = (PartialOperation)e.getOperation();\n            Assert.assertEquals(Operation.Type.SUBMIT, partial.getType());\n        }\n    }", "signature": "void parseUnsupportedChildElement()", "full_signature": "@Test public void parseUnsupportedChildElement()", "class_method_signature": "SxmpParserTest.parseUnsupportedChildElement()", "testcase": true, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "getBytes", "toString", "parse", "fail", "assertEquals", "getErrorCode", "assertThat", "getMessage", "containsString", "assertNotNull", "getOperation", "getOperation", "assertEquals", "getType"]}, "focal_class": {"identifier": "SxmpParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SxmpParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SxmpParser.class)", "var_name": "logger"}, {"original_string": "static protected DateTimeFormatter dateTimeFormat = ISODateTimeFormat.dateTime().withZone(DateTimeZone.UTC);", "modifier": "static protected", "type": "DateTimeFormatter", "declarator": "dateTimeFormat = ISODateTimeFormat.dateTime().withZone(DateTimeZone.UTC)", "var_name": "dateTimeFormat"}, {"original_string": "public static final String VERSION_1_0 = \"1.0\";", "modifier": "public static final", "type": "String", "declarator": "VERSION_1_0 = \"1.0\"", "var_name": "VERSION_1_0"}, {"original_string": "public static final String VERSION_1_1 = \"1.1\";", "modifier": "public static final", "type": "String", "declarator": "VERSION_1_1 = \"1.1\"", "var_name": "VERSION_1_1"}, {"original_string": "public static final String VERSION_1_2 = \"1.2\";", "modifier": "public static final", "type": "String", "declarator": "VERSION_1_2 = \"1.2\"", "var_name": "VERSION_1_2"}, {"original_string": "protected final String version;", "modifier": "protected final", "type": "String", "declarator": "version", "var_name": "version"}], "methods": [{"identifier": "SxmpParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " SxmpParser()", "full_signature": "public  SxmpParser()", "class_method_signature": "SxmpParser.SxmpParser()", "testcase": false, "constructor": true}, {"identifier": "SxmpParser", "parameters": "(final String version)", "modifiers": "public", "return": "", "signature": " SxmpParser(final String version)", "full_signature": "public  SxmpParser(final String version)", "class_method_signature": "SxmpParser.SxmpParser(final String version)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(InputStream in)", "modifiers": "public", "return": "Operation", "signature": "Operation parse(InputStream in)", "full_signature": "public Operation parse(InputStream in)", "class_method_signature": "SxmpParser.parse(InputStream in)", "testcase": false, "constructor": false}], "file": "ch-sxmp/src/main/java/com/cloudhopper/sxmp/SxmpParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(InputStream in)", "modifiers": "public", "return": "Operation", "body": "public Operation parse(InputStream in) throws SxmpParsingException, IOException, SAXException, ParserConfigurationException {\n        // create a new SAX parser\n        SAXParserFactory factory = SAXParserFactory.newInstance();\n\n        SAXParser parser = factory.newSAXParser();\n        parser.getXMLReader().setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n        parser.getXMLReader().setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\",false);\n        parser.getXMLReader().setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n        parser.getXMLReader().setFeature(\"http://xml.org/sax/features/external-parameter-entities\"\t, false);\n        parser.getXMLReader().setFeature(\"http://xml.org/sax/features/namespaces\", true);\n        parser.getXMLReader().setFeature(\"http://xml.org/sax/features/namespace-prefixes\", true);\n        parser.getXMLReader().setFeature(\"http://javax.xml.XMLConstants/feature/secure-processing\", true);\n\n        //_dtd=null;\n        Handler handler = new Handler();\n        XMLReader reader = parser.getXMLReader();\n        reader.setContentHandler(handler);\n        reader.setErrorHandler(handler);\n        reader.setEntityResolver(handler);\n\n        // try parsing (may throw an SxmpParsingException in the handler)\n        try {\n            parser.parse(new InputSource(in), handler);\n        } catch (com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException e) {\n            throw new SxmpParsingException(SxmpErrorCode.INVALID_XML, \"XML encoding mismatch\", null);\n        }\n\n        // check if there was an error\n        if (handler.error != null) {\n            throw handler.error;\n        }\n\n        // check to see if an operation was actually parsed\n        if (handler.getOperation() == null) {\n            throw new SxmpParsingException(SxmpErrorCode.MISSING_REQUIRED_ELEMENT, \"The operation type [\" + handler.operationType.getValue() + \"] requires a request element\", new PartialOperation(handler.operationType));\n        }\n\n        // if we got here, an operation was parsed -- now we need to validate it\n        // to make sure that it has all required elements\n        try {\n            handler.getOperation().validate();\n        } catch (SxmpErrorException e) {\n            throw new SxmpParsingException(e.getErrorCode(), e.getErrorMessage(), handler.getOperation());\n        }\n\n        return handler.getOperation();\n    }", "signature": "Operation parse(InputStream in)", "full_signature": "public Operation parse(InputStream in)", "class_method_signature": "SxmpParser.parse(InputStream in)", "testcase": false, "constructor": false, "invocations": ["newInstance", "newSAXParser", "setFeature", "getXMLReader", "setFeature", "getXMLReader", "setFeature", "getXMLReader", "setFeature", "getXMLReader", "setFeature", "getXMLReader", "setFeature", "getXMLReader", "setFeature", "getXMLReader", "getXMLReader", "setContentHandler", "setErrorHandler", "setEntityResolver", "parse", "getOperation", "getValue", "validate", "getOperation", "getErrorCode", "getErrorMessage", "getOperation", "getOperation"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}