{"test_class": {"identifier": "FileWatchEventCoalescorTest", "superclass": "", "interfaces": "", "fields": [], "file": "restx-common/src/test/java/restx/common/watch/FileWatchEventCoalescorTest.java"}, "test_case": {"identifier": "should_remove_consecutive_create_and_delete_events", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void should_remove_consecutive_create_and_delete_events() {\n\t\tTestFileWatchEventCoalescor watchEventCoalescor = new TestFileWatchEventCoalescor();\n\t\twatchEventCoalescor.post(\"tmp/foo\", StandardWatchEventKinds.ENTRY_CREATE);\n\t\tFileWatchEvent noise = watchEventCoalescor.post(\"tmp/bar\", StandardWatchEventKinds.ENTRY_CREATE);// just to add some noise\n\t\twatchEventCoalescor.post(\"tmp/foo\", StandardWatchEventKinds.ENTRY_DELETE);\n\n\t\tassertThat(watchEventCoalescor.removeNoise(noise)).isTrue(); // remove noisy event\n\n\t\tassertThat(watchEventCoalescor.scheduledEvents).hasSize(1);\n\t\tassertThat(watchEventCoalescor.scheduledEvents.get(0).isPresent()).isFalse();\n\t}", "signature": "void should_remove_consecutive_create_and_delete_events()", "full_signature": "@Test public void should_remove_consecutive_create_and_delete_events()", "class_method_signature": "FileWatchEventCoalescorTest.should_remove_consecutive_create_and_delete_events()", "testcase": true, "constructor": false, "invocations": ["post", "post", "post", "isTrue", "assertThat", "removeNoise", "hasSize", "assertThat", "isFalse", "assertThat", "isPresent", "get"]}, "focal_class": {"identifier": "FileWatchEventCoalescor", "superclass": "extends EventCoalescor<FileWatchEvent>", "interfaces": "", "fields": [{"original_string": "private final HashMap<FileWatchEventKey, Deque<EventReference>> queue = new HashMap<>();", "modifier": "private final", "type": "HashMap<FileWatchEventKey, Deque<EventReference>>", "declarator": "queue = new HashMap<>()", "var_name": "queue"}], "methods": [{"identifier": "create", "parameters": "(EventBus eventBus, long coalescePeriod)", "modifiers": "public static", "return": "FileWatchEventCoalescor", "signature": "FileWatchEventCoalescor create(EventBus eventBus, long coalescePeriod)", "full_signature": "public static FileWatchEventCoalescor create(EventBus eventBus, long coalescePeriod)", "class_method_signature": "FileWatchEventCoalescor.create(EventBus eventBus, long coalescePeriod)", "testcase": false, "constructor": false}, {"identifier": "FileWatchEventCoalescor", "parameters": "(EventBus eventBus, long coalescePeriod)", "modifiers": "", "return": "", "signature": " FileWatchEventCoalescor(EventBus eventBus, long coalescePeriod)", "full_signature": "  FileWatchEventCoalescor(EventBus eventBus, long coalescePeriod)", "class_method_signature": "FileWatchEventCoalescor.FileWatchEventCoalescor(EventBus eventBus, long coalescePeriod)", "testcase": false, "constructor": true}, {"identifier": "post", "parameters": "(final FileWatchEvent event)", "modifiers": "public", "return": "void", "signature": "void post(final FileWatchEvent event)", "full_signature": "public void post(final FileWatchEvent event)", "class_method_signature": "FileWatchEventCoalescor.post(final FileWatchEvent event)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(EventReference previous, FileWatchEvent current)", "modifiers": "private", "return": "boolean", "signature": "boolean merge(EventReference previous, FileWatchEvent current)", "full_signature": "private boolean merge(EventReference previous, FileWatchEvent current)", "class_method_signature": "FileWatchEventCoalescor.merge(EventReference previous, FileWatchEvent current)", "testcase": false, "constructor": false}, {"identifier": "schedulePost", "parameters": "(final EventReference event)", "modifiers": "", "return": "void", "signature": "void schedulePost(final EventReference event)", "full_signature": " void schedulePost(final EventReference event)", "class_method_signature": "FileWatchEventCoalescor.schedulePost(final EventReference event)", "testcase": false, "constructor": false}, {"identifier": "dequeue", "parameters": "(FileWatchEventKey key, EventReference event)", "modifiers": "", "return": "void", "signature": "void dequeue(FileWatchEventKey key, EventReference event)", "full_signature": " void dequeue(FileWatchEventKey key, EventReference event)", "class_method_signature": "FileWatchEventCoalescor.dequeue(FileWatchEventKey key, EventReference event)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "", "return": "void", "signature": "void clear()", "full_signature": " void clear()", "class_method_signature": "FileWatchEventCoalescor.clear()", "testcase": false, "constructor": false}], "file": "restx-common/src/main/java/restx/common/watch/FileWatchEventCoalescor.java"}, "focal_method": {"identifier": "post", "parameters": "(final FileWatchEvent event)", "modifiers": "public", "return": "void", "body": "public void post(final FileWatchEvent event) {\n\t\tsynchronized (queue) {\n\t\t\tfinal FileWatchEventKey key = FileWatchEventKey.fromEvent(event);\n\n\t\t\tDeque<EventReference> fileEvents;\n\t\t\tif ((fileEvents = queue.get(key)) == null) {\n\t\t\t\t// easy case, first event for a file, just queue it and schedule a post\n\t\t\t\tfileEvents = new ArrayDeque<>();\n\t\t\t\tqueue.put(key, fileEvents);\n\t\t\t\tEventReference reference = EventReference.of(key, event);\n\t\t\t\tfileEvents.add(reference);\n\t\t\t\tschedulePost(reference);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// more complex case, we need to analyze the last saved event for this file\n\t\t\tEventReference last = fileEvents.getLast();\n\t\t\tif (!merge(last, event)) {\n\t\t\t\t// event has not been merged, so try to add it\n\t\t\t\tEventReference reference = EventReference.of(key, event);\n\t\t\t\tfileEvents.add(reference);\n\t\t\t\tschedulePost(reference);\n\t\t\t}\n\t\t}\n\t}", "signature": "void post(final FileWatchEvent event)", "full_signature": "public void post(final FileWatchEvent event)", "class_method_signature": "FileWatchEventCoalescor.post(final FileWatchEvent event)", "testcase": false, "constructor": false, "invocations": ["fromEvent", "get", "put", "of", "add", "schedulePost", "getLast", "merge", "of", "add", "schedulePost"]}, "repository": {"repo_id": 9836833, "url": "https://github.com/restx/restx", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 433, "size": 7896, "license": "licensed"}}