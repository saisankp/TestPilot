{"test_class": {"identifier": "ReaderTGFFTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String testFile = \"specs/tgff/opendse_example.tgff\";", "modifier": "protected static final", "type": "String", "declarator": "testFile = \"specs/tgff/opendse_example.tgff\"", "var_name": "testFile"}], "file": "opendse-io/src/test/java/net/sf/opendse/io/ReaderTGFFTest.java"}, "test_case": {"identifier": "testAddDeadline", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddDeadline() {\n\n\t\tString line = \"HARD_DEADLINE d0_0 ON sink AT 0.0003\";\n\t\tString suffix = \"_0\";\n\n\t\tTask task0 = new Task(\"sink_0\");\n\n\t\tApplication<Task, Dependency> application = new Application<Task, Dependency>();\n\t\tapplication.addVertex(task0);\n\n\t\tString deadlineType = ReaderTGFF.HARD_DEADLINE;\n\n\t\tReaderTGFF reader = new ReaderTGFF();\n\t\treader.addDeadline(line, suffix, application, deadlineType);\n\n\t\tAssert.assertNotNull(application.iterator().next().getAttribute(deadlineType));\n\t\tAssert.assertEquals(0.0003, application.iterator().next().getAttribute(deadlineType));\n\t}", "signature": "void testAddDeadline()", "full_signature": "@Test public void testAddDeadline()", "class_method_signature": "ReaderTGFFTest.testAddDeadline()", "testcase": true, "constructor": false, "invocations": ["addVertex", "addDeadline", "assertNotNull", "getAttribute", "next", "iterator", "assertEquals", "getAttribute", "next", "iterator"]}, "focal_class": {"identifier": "ReaderTGFF", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TGFF_TYPE = \"TGFF_TYPE\";", "modifier": "public static final", "type": "String", "declarator": "TGFF_TYPE = \"TGFF_TYPE\"", "var_name": "TGFF_TYPE"}, {"original_string": "public static final String PERIOD = \"PERIOD\";", "modifier": "public static final", "type": "String", "declarator": "PERIOD = \"PERIOD\"", "var_name": "PERIOD"}, {"original_string": "public static final String MSG_SIZE = \"MSG_SIZE\";", "modifier": "public static final", "type": "String", "declarator": "MSG_SIZE = \"MSG_SIZE\"", "var_name": "MSG_SIZE"}, {"original_string": "public static final String RES_ATTRIBUTES = \"RES_ATTRIBUTES\";", "modifier": "public static final", "type": "String", "declarator": "RES_ATTRIBUTES = \"RES_ATTRIBUTES\"", "var_name": "RES_ATTRIBUTES"}, {"original_string": "public static final String RES_VALUES = \"RES_VALUES\";", "modifier": "public static final", "type": "String", "declarator": "RES_VALUES = \"RES_VALUES\"", "var_name": "RES_VALUES"}, {"original_string": "public static final String HARD_DEADLINE = \"HARD_DEADLINE\";", "modifier": "public static final", "type": "String", "declarator": "HARD_DEADLINE = \"HARD_DEADLINE\"", "var_name": "HARD_DEADLINE"}, {"original_string": "public static final String SOFT_DEADLINE = \"SOFT_DEADLINE\";", "modifier": "public static final", "type": "String", "declarator": "SOFT_DEADLINE = \"SOFT_DEADLINE\"", "var_name": "SOFT_DEADLINE"}, {"original_string": "public static final String WIRE = \"@WIRING\";", "modifier": "public static final", "type": "String", "declarator": "WIRE = \"@WIRING\"", "var_name": "WIRE"}, {"original_string": "protected static final String HYPERPERIOD = \"@HYPERPERIOD\";", "modifier": "protected static final", "type": "String", "declarator": "HYPERPERIOD = \"@HYPERPERIOD\"", "var_name": "HYPERPERIOD"}, {"original_string": "protected static final String TASK_GRAPH = \"@TASK_GRAPH\";", "modifier": "protected static final", "type": "String", "declarator": "TASK_GRAPH = \"@TASK_GRAPH\"", "var_name": "TASK_GRAPH"}, {"original_string": "protected static final String COMMUN_QUANT = \"@COMMUN_QUANT\";", "modifier": "protected static final", "type": "String", "declarator": "COMMUN_QUANT = \"@COMMUN_QUANT\"", "var_name": "COMMUN_QUANT"}, {"original_string": "protected static final String CORE = \"@CORE\";", "modifier": "protected static final", "type": "String", "declarator": "CORE = \"@CORE\"", "var_name": "CORE"}, {"original_string": "protected static final String CLIENT_PE = \"@CLIENT_PE\";", "modifier": "protected static final", "type": "String", "declarator": "CLIENT_PE = \"@CLIENT_PE\"", "var_name": "CLIENT_PE"}, {"original_string": "protected static final String SERVER_PE = \"@SERVER_PE\";", "modifier": "protected static final", "type": "String", "declarator": "SERVER_PE = \"@SERVER_PE\"", "var_name": "SERVER_PE"}, {"original_string": "protected static final String PROC = \"@PROC\";", "modifier": "protected static final", "type": "String", "declarator": "PROC = \"@PROC\"", "var_name": "PROC"}, {"original_string": "protected static final String LINK = \"LINK\";", "modifier": "protected static final", "type": "String", "declarator": "LINK = \"LINK\"", "var_name": "LINK"}, {"original_string": "protected static final String TASK = \"TASK\";", "modifier": "protected static final", "type": "String", "declarator": "TASK = \"TASK\"", "var_name": "TASK"}, {"original_string": "protected static final String ARC = \"ARC\";", "modifier": "protected static final", "type": "String", "declarator": "ARC = \"ARC\"", "var_name": "ARC"}, {"original_string": "protected static final String VALID = \"valid\";", "modifier": "protected static final", "type": "String", "declarator": "VALID = \"valid\"", "var_name": "VALID"}, {"original_string": "protected static final String TYPE = \"type\";", "modifier": "protected static final", "type": "String", "declarator": "TYPE = \"type\"", "var_name": "TYPE"}, {"original_string": "protected static final String CLOSING = \"}\";", "modifier": "protected static final", "type": "String", "declarator": "CLOSING = \"}\"", "var_name": "CLOSING"}, {"original_string": "protected static final String COMMENT = \"#\";", "modifier": "protected static final", "type": "String", "declarator": "COMMENT = \"#\"", "var_name": "COMMENT"}, {"original_string": "protected static final String AT = \"@\";", "modifier": "protected static final", "type": "String", "declarator": "AT = \"@\"", "var_name": "AT"}, {"original_string": "protected static final String SEPARATOR = \"\\\\s+\";", "modifier": "protected static final", "type": "String", "declarator": "SEPARATOR = \"\\\\s+\"", "var_name": "SEPARATOR"}, {"original_string": "protected static final String CONNECTOR = \"_\";", "modifier": "protected static final", "type": "String", "declarator": "CONNECTOR = \"_\"", "var_name": "CONNECTOR"}, {"original_string": "protected static final String HEADER = \"#---------\";", "modifier": "protected static final", "type": "String", "declarator": "HEADER = \"#---------\"", "var_name": "HEADER"}, {"original_string": "protected Map<String, String> properties;", "modifier": "protected", "type": "Map<String, String>", "declarator": "properties", "var_name": "properties"}, {"original_string": "protected Map<String, Double> messageSizes;", "modifier": "protected", "type": "Map<String, Double>", "declarator": "messageSizes", "var_name": "messageSizes"}, {"original_string": "protected double hyperperiod;", "modifier": "protected", "type": "double", "declarator": "hyperperiod", "var_name": "hyperperiod"}, {"original_string": "protected Map<String, List<Task>> tgffTypeMap = new HashMap<String, List<Task>>();", "modifier": "protected", "type": "Map<String, List<Task>>", "declarator": "tgffTypeMap = new HashMap<String, List<Task>>()", "var_name": "tgffTypeMap"}], "methods": [{"identifier": "read", "parameters": "(String filename)", "modifiers": "public", "return": "SpecificationTypeBased", "signature": "SpecificationTypeBased read(String filename)", "full_signature": "public SpecificationTypeBased read(String filename)", "class_method_signature": "ReaderTGFF.read(String filename)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(File file)", "modifiers": "public", "return": "SpecificationTypeBased", "signature": "SpecificationTypeBased read(File file)", "full_signature": "public SpecificationTypeBased read(File file)", "class_method_signature": "ReaderTGFF.read(File file)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(InputStream in)", "modifiers": "public", "return": "SpecificationTypeBased", "signature": "SpecificationTypeBased read(InputStream in)", "full_signature": "public SpecificationTypeBased read(InputStream in)", "class_method_signature": "ReaderTGFF.read(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "toSpecification", "parameters": "(List<String> in)", "modifiers": "public", "return": "SpecificationTypeBased", "signature": "SpecificationTypeBased toSpecification(List<String> in)", "full_signature": "public SpecificationTypeBased toSpecification(List<String> in)", "class_method_signature": "ReaderTGFF.toSpecification(List<String> in)", "testcase": false, "constructor": false}, {"identifier": "toApplication", "parameters": "(List<String> in)", "modifiers": "protected", "return": "Application<Task, Dependency>", "signature": "Application<Task, Dependency> toApplication(List<String> in)", "full_signature": "protected Application<Task, Dependency> toApplication(List<String> in)", "class_method_signature": "ReaderTGFF.toApplication(List<String> in)", "testcase": false, "constructor": false}, {"identifier": "toResourceTypes", "parameters": "(List<String> in)", "modifiers": "protected", "return": "ResourceTypes<Resource>", "signature": "ResourceTypes<Resource> toResourceTypes(List<String> in)", "full_signature": "protected ResourceTypes<Resource> toResourceTypes(List<String> in)", "class_method_signature": "ReaderTGFF.toResourceTypes(List<String> in)", "testcase": false, "constructor": false}, {"identifier": "toMappings", "parameters": "(List<String> in, ResourceTypes<Resource> resourceTypes)", "modifiers": "protected", "return": "Mappings<Task, Resource>", "signature": "Mappings<Task, Resource> toMappings(List<String> in, ResourceTypes<Resource> resourceTypes)", "full_signature": "protected Mappings<Task, Resource> toMappings(List<String> in, ResourceTypes<Resource> resourceTypes)", "class_method_signature": "ReaderTGFF.toMappings(List<String> in, ResourceTypes<Resource> resourceTypes)", "testcase": false, "constructor": false}, {"identifier": "toLinkTypes", "parameters": "(List<String> in)", "modifiers": "protected", "return": "LinkTypes<Link>", "signature": "LinkTypes<Link> toLinkTypes(List<String> in)", "full_signature": "protected LinkTypes<Link> toLinkTypes(List<String> in)", "class_method_signature": "ReaderTGFF.toLinkTypes(List<String> in)", "testcase": false, "constructor": false}, {"identifier": "importTaskGraph", "parameters": "(String name, Iterator<String> it, Application<Task, Dependency> application)", "modifiers": "protected", "return": "void", "signature": "void importTaskGraph(String name, Iterator<String> it, Application<Task, Dependency> application)", "full_signature": "protected void importTaskGraph(String name, Iterator<String> it, Application<Task, Dependency> application)", "class_method_signature": "ReaderTGFF.importTaskGraph(String name, Iterator<String> it, Application<Task, Dependency> application)", "testcase": false, "constructor": false}, {"identifier": "addTask", "parameters": "(String line, String suffix, double period, Application<Task, Dependency> application)", "modifiers": "protected", "return": "void", "signature": "void addTask(String line, String suffix, double period, Application<Task, Dependency> application)", "full_signature": "protected void addTask(String line, String suffix, double period, Application<Task, Dependency> application)", "class_method_signature": "ReaderTGFF.addTask(String line, String suffix, double period, Application<Task, Dependency> application)", "testcase": false, "constructor": false}, {"identifier": "addCommunication", "parameters": "(String line, String suffix, double period,\n\t\t\tApplication<Task, Dependency> application)", "modifiers": "protected", "return": "void", "signature": "void addCommunication(String line, String suffix, double period,\n\t\t\tApplication<Task, Dependency> application)", "full_signature": "protected void addCommunication(String line, String suffix, double period,\n\t\t\tApplication<Task, Dependency> application)", "class_method_signature": "ReaderTGFF.addCommunication(String line, String suffix, double period,\n\t\t\tApplication<Task, Dependency> application)", "testcase": false, "constructor": false}, {"identifier": "addDeadline", "parameters": "(String line, String suffix, Application<Task, Dependency> application,\n\t\t\tString deadlineType)", "modifiers": "protected", "return": "void", "signature": "void addDeadline(String line, String suffix, Application<Task, Dependency> application,\n\t\t\tString deadlineType)", "full_signature": "protected void addDeadline(String line, String suffix, Application<Task, Dependency> application,\n\t\t\tString deadlineType)", "class_method_signature": "ReaderTGFF.addDeadline(String line, String suffix, Application<Task, Dependency> application,\n\t\t\tString deadlineType)", "testcase": false, "constructor": false}, {"identifier": "importCore", "parameters": "(String name, Iterator<String> it, ResourceTypes<Resource> resourceTypes)", "modifiers": "protected", "return": "void", "signature": "void importCore(String name, Iterator<String> it, ResourceTypes<Resource> resourceTypes)", "full_signature": "protected void importCore(String name, Iterator<String> it, ResourceTypes<Resource> resourceTypes)", "class_method_signature": "ReaderTGFF.importCore(String name, Iterator<String> it, ResourceTypes<Resource> resourceTypes)", "testcase": false, "constructor": false}, {"identifier": "importMappings", "parameters": "(String name, Iterator<String> it, ResourceTypes<Resource> resourceTypes,\n\t\t\tMappings<Task, Resource> mappings)", "modifiers": "protected", "return": "void", "signature": "void importMappings(String name, Iterator<String> it, ResourceTypes<Resource> resourceTypes,\n\t\t\tMappings<Task, Resource> mappings)", "full_signature": "protected void importMappings(String name, Iterator<String> it, ResourceTypes<Resource> resourceTypes,\n\t\t\tMappings<Task, Resource> mappings)", "class_method_signature": "ReaderTGFF.importMappings(String name, Iterator<String> it, ResourceTypes<Resource> resourceTypes,\n\t\t\tMappings<Task, Resource> mappings)", "testcase": false, "constructor": false}, {"identifier": "importMessageSizes", "parameters": "(Iterator<String> it)", "modifiers": "protected", "return": "Map<String, Double>", "signature": "Map<String, Double> importMessageSizes(Iterator<String> it)", "full_signature": "protected Map<String, Double> importMessageSizes(Iterator<String> it)", "class_method_signature": "ReaderTGFF.importMessageSizes(Iterator<String> it)", "testcase": false, "constructor": false}, {"identifier": "importLink", "parameters": "(Iterator<String> it, LinkTypes<Link> linkTypes)", "modifiers": "protected", "return": "void", "signature": "void importLink(Iterator<String> it, LinkTypes<Link> linkTypes)", "full_signature": "protected void importLink(Iterator<String> it, LinkTypes<Link> linkTypes)", "class_method_signature": "ReaderTGFF.importLink(Iterator<String> it, LinkTypes<Link> linkTypes)", "testcase": false, "constructor": false}, {"identifier": "importHyperperiod", "parameters": "(String line)", "modifiers": "protected", "return": "double", "signature": "double importHyperperiod(String line)", "full_signature": "protected double importHyperperiod(String line)", "class_method_signature": "ReaderTGFF.importHyperperiod(String line)", "testcase": false, "constructor": false}, {"identifier": "isComment", "parameters": "(String line)", "modifiers": "protected", "return": "boolean", "signature": "boolean isComment(String line)", "full_signature": "protected boolean isComment(String line)", "class_method_signature": "ReaderTGFF.isComment(String line)", "testcase": false, "constructor": false}, {"identifier": "isClosing", "parameters": "(String line)", "modifiers": "protected", "return": "boolean", "signature": "boolean isClosing(String line)", "full_signature": "protected boolean isClosing(String line)", "class_method_signature": "ReaderTGFF.isClosing(String line)", "testcase": false, "constructor": false}, {"identifier": "skip", "parameters": "(String line)", "modifiers": "protected", "return": "boolean", "signature": "boolean skip(String line)", "full_signature": "protected boolean skip(String line)", "class_method_signature": "ReaderTGFF.skip(String line)", "testcase": false, "constructor": false}], "file": "opendse-io/src/main/java/net/sf/opendse/io/ReaderTGFF.java"}, "focal_method": {"identifier": "addDeadline", "parameters": "(String line, String suffix, Application<Task, Dependency> application,\n\t\t\tString deadlineType)", "modifiers": "protected", "return": "void", "body": "protected void addDeadline(String line, String suffix, Application<Task, Dependency> application,\n\t\t\tString deadlineType) {\n\n\t\tString[] entries = line.trim().split(SEPARATOR);\n\t\tassert entries.length == 6 : \"tgff-file \\\"\" + deadlineType + \"\\\": wrong number of entries\";\n\n\t\tTask t = application.getVertex(entries[3] + suffix);\n\t\tassert t != null : \"error in tgff file: task \" + entries[3]\n\t\t\t\t+ \" does not exist, so cannot be assigned a deadline.\";\n\n\t\tt.setAttribute(deadlineType, Double.parseDouble(entries[5]));\n\t}", "signature": "void addDeadline(String line, String suffix, Application<Task, Dependency> application,\n\t\t\tString deadlineType)", "full_signature": "protected void addDeadline(String line, String suffix, Application<Task, Dependency> application,\n\t\t\tString deadlineType)", "class_method_signature": "ReaderTGFF.addDeadline(String line, String suffix, Application<Task, Dependency> application,\n\t\t\tString deadlineType)", "testcase": false, "constructor": false, "invocations": ["split", "trim", "getVertex", "setAttribute", "parseDouble"]}, "repository": {"repo_id": 121694310, "url": "https://github.com/felixreimann/opendse", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 7, "size": 2024, "license": "licensed"}}