{"test_class": {"identifier": "HtmlWebViewClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HtmlWebViewClient subject;", "modifier": "private", "type": "HtmlWebViewClient", "declarator": "subject", "var_name": "subject"}, {"original_string": "private HtmlWebViewListener htmlWebViewListener;", "modifier": "private", "type": "HtmlWebViewListener", "declarator": "htmlWebViewListener", "var_name": "htmlWebViewListener"}, {"original_string": "private BaseHtmlWebView htmlWebView;", "modifier": "private", "type": "BaseHtmlWebView", "declarator": "htmlWebView", "var_name": "htmlWebView"}], "file": "MoPubAd/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java"}, "test_case": {"identifier": "shouldOverrideUrlLoading_withEmptyUrl_withoutUserClick_shouldLoadAboutBlank", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldOverrideUrlLoading_withEmptyUrl_withoutUserClick_shouldLoadAboutBlank() throws Exception {\n        stub(htmlWebView.wasClicked()).toReturn(false);\n        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);\n\n        subject.shouldOverrideUrlLoading(htmlWebView, \"\");\n\n        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();\n    }", "signature": "void shouldOverrideUrlLoading_withEmptyUrl_withoutUserClick_shouldLoadAboutBlank()", "full_signature": "@Test public void shouldOverrideUrlLoading_withEmptyUrl_withoutUserClick_shouldLoadAboutBlank()", "class_method_signature": "HtmlWebViewClientTest.shouldOverrideUrlLoading_withEmptyUrl_withoutUserClick_shouldLoadAboutBlank()", "testcase": true, "constructor": false, "invocations": ["toReturn", "stub", "wasClicked", "shouldOverrideUrlLoading", "isNull", "assertThat", "getNextStartedActivity", "getShadowApplication"]}, "focal_class": {"identifier": "HtmlWebViewClient", "superclass": "extends WebViewClient", "interfaces": "", "fields": [{"original_string": "static final String MOPUB_FINISH_LOAD = \"mopub://finishLoad\";", "modifier": "static final", "type": "String", "declarator": "MOPUB_FINISH_LOAD = \"mopub://finishLoad\"", "var_name": "MOPUB_FINISH_LOAD"}, {"original_string": "static final String MOPUB_FAIL_LOAD = \"mopub://failLoad\";", "modifier": "static final", "type": "String", "declarator": "MOPUB_FAIL_LOAD = \"mopub://failLoad\"", "var_name": "MOPUB_FAIL_LOAD"}, {"original_string": "private final Context mContext;", "modifier": "private final", "type": "Context", "declarator": "mContext", "var_name": "mContext"}, {"original_string": "private HtmlWebViewListener mHtmlWebViewListener;", "modifier": "private", "type": "HtmlWebViewListener", "declarator": "mHtmlWebViewListener", "var_name": "mHtmlWebViewListener"}, {"original_string": "private BaseHtmlWebView mHtmlWebView;", "modifier": "private", "type": "BaseHtmlWebView", "declarator": "mHtmlWebView", "var_name": "mHtmlWebView"}, {"original_string": "private final String mClickthroughUrl;", "modifier": "private final", "type": "String", "declarator": "mClickthroughUrl", "var_name": "mClickthroughUrl"}, {"original_string": "private final String mRedirectUrl;", "modifier": "private final", "type": "String", "declarator": "mRedirectUrl", "var_name": "mRedirectUrl"}], "methods": [{"identifier": "HtmlWebViewClient", "parameters": "(HtmlWebViewListener htmlWebViewListener, BaseHtmlWebView htmlWebView, String clickthrough, String redirect)", "modifiers": "", "return": "", "signature": " HtmlWebViewClient(HtmlWebViewListener htmlWebViewListener, BaseHtmlWebView htmlWebView, String clickthrough, String redirect)", "full_signature": "  HtmlWebViewClient(HtmlWebViewListener htmlWebViewListener, BaseHtmlWebView htmlWebView, String clickthrough, String redirect)", "class_method_signature": "HtmlWebViewClient.HtmlWebViewClient(HtmlWebViewListener htmlWebViewListener, BaseHtmlWebView htmlWebView, String clickthrough, String redirect)", "testcase": false, "constructor": true}, {"identifier": "shouldOverrideUrlLoading", "parameters": "(WebView view, String url)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shouldOverrideUrlLoading(WebView view, String url)", "full_signature": "@Override public boolean shouldOverrideUrlLoading(WebView view, String url)", "class_method_signature": "HtmlWebViewClient.shouldOverrideUrlLoading(WebView view, String url)", "testcase": false, "constructor": false}, {"identifier": "onPageStarted", "parameters": "(WebView view, String url, Bitmap favicon)", "modifiers": "@Override public", "return": "void", "signature": "void onPageStarted(WebView view, String url, Bitmap favicon)", "full_signature": "@Override public void onPageStarted(WebView view, String url, Bitmap favicon)", "class_method_signature": "HtmlWebViewClient.onPageStarted(WebView view, String url, Bitmap favicon)", "testcase": false, "constructor": false}, {"identifier": "isSpecialMoPubScheme", "parameters": "(String url)", "modifiers": "private", "return": "boolean", "signature": "boolean isSpecialMoPubScheme(String url)", "full_signature": "private boolean isSpecialMoPubScheme(String url)", "class_method_signature": "HtmlWebViewClient.isSpecialMoPubScheme(String url)", "testcase": false, "constructor": false}, {"identifier": "handleSpecialMoPubScheme", "parameters": "(String url)", "modifiers": "private", "return": "boolean", "signature": "boolean handleSpecialMoPubScheme(String url)", "full_signature": "private boolean handleSpecialMoPubScheme(String url)", "class_method_signature": "HtmlWebViewClient.handleSpecialMoPubScheme(String url)", "testcase": false, "constructor": false}, {"identifier": "isPhoneScheme", "parameters": "(String url)", "modifiers": "private", "return": "boolean", "signature": "boolean isPhoneScheme(String url)", "full_signature": "private boolean isPhoneScheme(String url)", "class_method_signature": "HtmlWebViewClient.isPhoneScheme(String url)", "testcase": false, "constructor": false}, {"identifier": "handlePhoneScheme", "parameters": "(String url)", "modifiers": "private", "return": "boolean", "signature": "boolean handlePhoneScheme(String url)", "full_signature": "private boolean handlePhoneScheme(String url)", "class_method_signature": "HtmlWebViewClient.handlePhoneScheme(String url)", "testcase": false, "constructor": false}, {"identifier": "isNativeBrowserScheme", "parameters": "(String url)", "modifiers": "private", "return": "boolean", "signature": "boolean isNativeBrowserScheme(String url)", "full_signature": "private boolean isNativeBrowserScheme(String url)", "class_method_signature": "HtmlWebViewClient.isNativeBrowserScheme(String url)", "testcase": false, "constructor": false}, {"identifier": "handleNativeBrowserScheme", "parameters": "(String url)", "modifiers": "private", "return": "boolean", "signature": "boolean handleNativeBrowserScheme(String url)", "full_signature": "private boolean handleNativeBrowserScheme(String url)", "class_method_signature": "HtmlWebViewClient.handleNativeBrowserScheme(String url)", "testcase": false, "constructor": false}, {"identifier": "isWebSiteUrl", "parameters": "(String url)", "modifiers": "private", "return": "boolean", "signature": "boolean isWebSiteUrl(String url)", "full_signature": "private boolean isWebSiteUrl(String url)", "class_method_signature": "HtmlWebViewClient.isWebSiteUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "launchApplicationUrl", "parameters": "(String url)", "modifiers": "private", "return": "boolean", "signature": "boolean launchApplicationUrl(String url)", "full_signature": "private boolean launchApplicationUrl(String url)", "class_method_signature": "HtmlWebViewClient.launchApplicationUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "showMoPubBrowserForUrl", "parameters": "(String url)", "modifiers": "private", "return": "void", "signature": "void showMoPubBrowserForUrl(String url)", "full_signature": "private void showMoPubBrowserForUrl(String url)", "class_method_signature": "HtmlWebViewClient.showMoPubBrowserForUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "handleCustomIntentFromUri", "parameters": "(Uri uri)", "modifiers": "private", "return": "void", "signature": "void handleCustomIntentFromUri(Uri uri)", "full_signature": "private void handleCustomIntentFromUri(Uri uri)", "class_method_signature": "HtmlWebViewClient.handleCustomIntentFromUri(Uri uri)", "testcase": false, "constructor": false}, {"identifier": "launchIntentForUserClick", "parameters": "(Context context, Intent intent, String errorMessage)", "modifiers": "", "return": "boolean", "signature": "boolean launchIntentForUserClick(Context context, Intent intent, String errorMessage)", "full_signature": " boolean launchIntentForUserClick(Context context, Intent intent, String errorMessage)", "class_method_signature": "HtmlWebViewClient.launchIntentForUserClick(Context context, Intent intent, String errorMessage)", "testcase": false, "constructor": false}], "file": "MoPubAd/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java"}, "focal_method": {"identifier": "shouldOverrideUrlLoading", "parameters": "(WebView view, String url)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean shouldOverrideUrlLoading(WebView view, String url) {\n        if (handleSpecialMoPubScheme(url) || handlePhoneScheme(url) || handleNativeBrowserScheme(url)) {\n            return true;\n        }\n\n        MoPubLog.d(\"Ad clicked. Click URL: \" + url);\n\n        // this is added because http/s can also be intercepted\n        if (!isWebSiteUrl(url) && IntentUtils.canHandleApplicationUrl(mContext, url)) {\n            if (launchApplicationUrl(url)) {\n                return true;\n            }\n        }\n\n        showMoPubBrowserForUrl(url);\n        return true;\n    }", "signature": "boolean shouldOverrideUrlLoading(WebView view, String url)", "full_signature": "@Override public boolean shouldOverrideUrlLoading(WebView view, String url)", "class_method_signature": "HtmlWebViewClient.shouldOverrideUrlLoading(WebView view, String url)", "testcase": false, "constructor": false, "invocations": ["handleSpecialMoPubScheme", "handlePhoneScheme", "handleNativeBrowserScheme", "d", "isWebSiteUrl", "canHandleApplicationUrl", "launchApplicationUrl", "showMoPubBrowserForUrl"]}, "repository": {"repo_id": 38092182, "url": "https://github.com/harshalbenake/hbworkspace2-100", "language": "Java", "is_fork": false, "fork_count": 160, "stargazer_count": 191, "size": 307516, "license": "licensed"}}