{"test_class": {"identifier": "VectorUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/common/linalg/VectorUtilTest.java"}, "test_case": {"identifier": "testParseDenseWithSpace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testParseDenseWithSpace() {\n\t\tDenseVector vec1 = VectorUtil.parseDense(\"1 2 -3\");\n\t\tDenseVector vec2 = VectorUtil.parseDense(\" 1  2  -3 \");\n\t\tDenseVector vec = new DenseVector(new double[]{1, 2, -3});\n\t\tAssert.assertArrayEquals(vec1.getData(), vec.getData(), 0);\n\t\tAssert.assertArrayEquals(vec2.getData(), vec.getData(), 0);\n\t}", "signature": "void testParseDenseWithSpace()", "full_signature": "@Test public void testParseDenseWithSpace()", "class_method_signature": "VectorUtilTest.testParseDenseWithSpace()", "testcase": true, "constructor": false, "invocations": ["parseDense", "parseDense", "assertArrayEquals", "getData", "getData", "assertArrayEquals", "getData", "getData"]}, "focal_class": {"identifier": "VectorUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char ELEMENT_DELIMITER = ' ';", "modifier": "private static final", "type": "char", "declarator": "ELEMENT_DELIMITER = ' '", "var_name": "ELEMENT_DELIMITER"}, {"original_string": "private static final char HEADER_DELIMITER = '$';", "modifier": "private static final", "type": "char", "declarator": "HEADER_DELIMITER = '$'", "var_name": "HEADER_DELIMITER"}, {"original_string": "private static final char INDEX_VALUE_DELIMITER = ':';", "modifier": "private static final", "type": "char", "declarator": "INDEX_VALUE_DELIMITER = ':'", "var_name": "INDEX_VALUE_DELIMITER"}], "methods": [{"identifier": "parse", "parameters": "(String str)", "modifiers": "private static", "return": "Vector", "signature": "Vector parse(String str)", "full_signature": "private static Vector parse(String str)", "class_method_signature": "VectorUtil.parse(String str)", "testcase": false, "constructor": false}, {"identifier": "parseDense", "parameters": "(String str)", "modifiers": "public static", "return": "DenseVector", "signature": "DenseVector parseDense(String str)", "full_signature": "public static DenseVector parseDense(String str)", "class_method_signature": "VectorUtil.parseDense(String str)", "testcase": false, "constructor": false}, {"identifier": "parseSparse", "parameters": "(String str)", "modifiers": "public static", "return": "SparseVector", "signature": "SparseVector parseSparse(String str)", "full_signature": "public static SparseVector parseSparse(String str)", "class_method_signature": "VectorUtil.parseSparse(String str)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Vector vector)", "modifiers": "public static", "return": "String", "signature": "String toString(Vector vector)", "full_signature": "public static String toString(Vector vector)", "class_method_signature": "VectorUtil.toString(Vector vector)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(SparseVector sparseVector)", "modifiers": "public static", "return": "String", "signature": "String toString(SparseVector sparseVector)", "full_signature": "public static String toString(SparseVector sparseVector)", "class_method_signature": "VectorUtil.toString(SparseVector sparseVector)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(DenseVector denseVector)", "modifiers": "public static", "return": "String", "signature": "String toString(DenseVector denseVector)", "full_signature": "public static String toString(DenseVector denseVector)", "class_method_signature": "VectorUtil.toString(DenseVector denseVector)", "testcase": false, "constructor": false}, {"identifier": "getVector", "parameters": "(Object obj)", "modifiers": "public static", "return": "Vector", "signature": "Vector getVector(Object obj)", "full_signature": "public static Vector getVector(Object obj)", "class_method_signature": "VectorUtil.getVector(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getDenseVector", "parameters": "(Object obj)", "modifiers": "public static", "return": "DenseVector", "signature": "DenseVector getDenseVector(Object obj)", "full_signature": "public static DenseVector getDenseVector(Object obj)", "class_method_signature": "VectorUtil.getDenseVector(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getSparseVector", "parameters": "(Object obj)", "modifiers": "public static", "return": "SparseVector", "signature": "SparseVector getSparseVector(Object obj)", "full_signature": "public static SparseVector getSparseVector(Object obj)", "class_method_signature": "VectorUtil.getSparseVector(Object obj)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/common/linalg/VectorUtil.java"}, "focal_method": {"identifier": "parseDense", "parameters": "(String str)", "modifiers": "public static", "return": "DenseVector", "body": "public static DenseVector parseDense(String str) {\n\t\tif (org.apache.flink.util.StringUtils.isNullOrWhitespaceOnly(str)) {\n\t\t\treturn new DenseVector();\n\t\t}\n\n\t\tint len = str.length();\n\n\t\tint inDataBuffPos = 0;\n\t\tboolean isInBuff = false;\n\n\t\tfor (int i = 0; i < len; ++i) {\n\t\t\tchar c = str.charAt(i);\n\n\t\t\tif (c == ELEMENT_DELIMITER\n\t\t\t\t// to be compatible with previous delimiter\n\t\t\t\t|| c == ',') {\n\t\t\t\tif (isInBuff) {\n\t\t\t\t\tinDataBuffPos++;\n\t\t\t\t}\n\n\t\t\t\tisInBuff = false;\n\t\t\t} else {\n\t\t\t\tisInBuff = true;\n\t\t\t}\n\t\t}\n\n\t\tif (isInBuff) {\n\t\t\tinDataBuffPos++;\n\t\t}\n\n\t\tdouble[] data = new double[inDataBuffPos];\n\t\tint lastestInCharBuffPos = 0;\n\n\t\tinDataBuffPos = 0;\n\t\tisInBuff = false;\n\n\t\tfor (int i = 0; i < len; ++i) {\n\t\t\tchar c = str.charAt(i);\n\n\t\t\tif (c == ELEMENT_DELIMITER\n\t\t\t\t// to be compatible with previous delimiter\n\t\t\t\t|| c == ',') {\n\t\t\t\tif (isInBuff) {\n\t\t\t\t\tdata[inDataBuffPos++] = Double.parseDouble(\n\t\t\t\t\t\tStringUtils.substring(str, lastestInCharBuffPos, i).trim()\n\t\t\t\t\t);\n\n\t\t\t\t\tlastestInCharBuffPos = i + 1;\n\t\t\t\t}\n\n\t\t\t\tisInBuff = false;\n\t\t\t} else {\n\t\t\t\tisInBuff = true;\n\t\t\t}\n\t\t}\n\n\t\tif (isInBuff) {\n\t\t\tdata[inDataBuffPos] = Double.valueOf(\n\t\t\t\tStringUtils.substring(str, lastestInCharBuffPos).trim()\n\t\t\t);\n\t\t}\n\n\t\treturn new DenseVector(data);\n\t}", "signature": "DenseVector parseDense(String str)", "full_signature": "public static DenseVector parseDense(String str)", "class_method_signature": "VectorUtil.parseDense(String str)", "testcase": false, "constructor": false, "invocations": ["isNullOrWhitespaceOnly", "length", "charAt", "charAt", "parseDouble", "trim", "substring", "valueOf", "trim", "substring"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}