{"test_class": {"identifier": "ModisTiePointGeoCodingTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-modis-reader/src/test/java/org/esa/s3tbx/dataio/modis/ModisTiePointGeoCodingTest.java"}, "test_case": {"identifier": "testMustRecalculateGeoCoding", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMustRecalculateGeoCoding() {\n        final ProductSubsetDef subsetDef = new ProductSubsetDef();\n\n        Assert.assertFalse(ModisTiePointGeoCoding.mustRecalculateTiePointGrids(null));\n        Assert.assertFalse(ModisTiePointGeoCoding.mustRecalculateTiePointGrids(subsetDef));\n\n        subsetDef.setSubsetRegion(new PixelSubsetRegion(0, 3, 4, 5, 0));\n        Assert.assertTrue(ModisTiePointGeoCoding.mustRecalculateTiePointGrids(subsetDef));\n    }", "signature": "void testMustRecalculateGeoCoding()", "full_signature": "@Test public void testMustRecalculateGeoCoding()", "class_method_signature": "ModisTiePointGeoCodingTest.testMustRecalculateGeoCoding()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "mustRecalculateTiePointGrids", "assertFalse", "mustRecalculateTiePointGrids", "setSubsetRegion", "assertTrue", "mustRecalculateTiePointGrids"]}, "focal_class": {"identifier": "ModisTiePointGeoCoding", "superclass": "extends AbstractGeoCoding", "interfaces": "", "fields": [{"original_string": "private final Datum datum;", "modifier": "private final", "type": "Datum", "declarator": "datum", "var_name": "datum"}, {"original_string": "private TiePointGrid latgrid;", "modifier": "private", "type": "TiePointGrid", "declarator": "latgrid", "var_name": "latgrid"}, {"original_string": "private TiePointGrid lonGrid;", "modifier": "private", "type": "TiePointGrid", "declarator": "lonGrid", "var_name": "lonGrid"}, {"original_string": "private List<GeoCoding> gcList;", "modifier": "private", "type": "List<GeoCoding>", "declarator": "gcList", "var_name": "gcList"}, {"original_string": "private boolean cross180;", "modifier": "private", "type": "boolean", "declarator": "cross180", "var_name": "cross180"}, {"original_string": "private List<PolyLine> centerLineList;", "modifier": "private", "type": "List<PolyLine>", "declarator": "centerLineList", "var_name": "centerLineList"}, {"original_string": "private int lastCenterLineIndex;", "modifier": "private", "type": "int", "declarator": "lastCenterLineIndex", "var_name": "lastCenterLineIndex"}, {"original_string": "private int smallestValidIndex;", "modifier": "private", "type": "int", "declarator": "smallestValidIndex", "var_name": "smallestValidIndex"}, {"original_string": "private int biggestValidIndex;", "modifier": "private", "type": "int", "declarator": "biggestValidIndex", "var_name": "biggestValidIndex"}, {"original_string": "private int gcStripeSceneHeight;", "modifier": "private", "type": "int", "declarator": "gcStripeSceneHeight", "var_name": "gcStripeSceneHeight"}], "methods": [{"identifier": "ModisTiePointGeoCoding", "parameters": "(TiePointGrid latGrid, TiePointGrid lonGrid)", "modifiers": "public", "return": "", "signature": " ModisTiePointGeoCoding(TiePointGrid latGrid, TiePointGrid lonGrid)", "full_signature": "public  ModisTiePointGeoCoding(TiePointGrid latGrid, TiePointGrid lonGrid)", "class_method_signature": "ModisTiePointGeoCoding.ModisTiePointGeoCoding(TiePointGrid latGrid, TiePointGrid lonGrid)", "testcase": false, "constructor": true}, {"identifier": "canGetPixelPos", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canGetPixelPos()", "full_signature": "public boolean canGetPixelPos()", "class_method_signature": "ModisTiePointGeoCoding.canGetPixelPos()", "testcase": false, "constructor": false}, {"identifier": "canGetGeoPos", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canGetGeoPos()", "full_signature": "public boolean canGetGeoPos()", "class_method_signature": "ModisTiePointGeoCoding.canGetGeoPos()", "testcase": false, "constructor": false}, {"identifier": "getPixelPos", "parameters": "(GeoPos geoPos, PixelPos pixelPos)", "modifiers": "public", "return": "PixelPos", "signature": "PixelPos getPixelPos(GeoPos geoPos, PixelPos pixelPos)", "full_signature": "public PixelPos getPixelPos(GeoPos geoPos, PixelPos pixelPos)", "class_method_signature": "ModisTiePointGeoCoding.getPixelPos(GeoPos geoPos, PixelPos pixelPos)", "testcase": false, "constructor": false}, {"identifier": "getGeoPos", "parameters": "(PixelPos pixelPos, GeoPos geoPos)", "modifiers": "public", "return": "GeoPos", "signature": "GeoPos getGeoPos(PixelPos pixelPos, GeoPos geoPos)", "full_signature": "public GeoPos getGeoPos(PixelPos pixelPos, GeoPos geoPos)", "class_method_signature": "ModisTiePointGeoCoding.getGeoPos(PixelPos pixelPos, GeoPos geoPos)", "testcase": false, "constructor": false}, {"identifier": "getDatum", "parameters": "()", "modifiers": "public", "return": "Datum", "signature": "Datum getDatum()", "full_signature": "public Datum getDatum()", "class_method_signature": "ModisTiePointGeoCoding.getDatum()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ModisTiePointGeoCoding.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ModisTiePointGeoCoding.hashCode()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "ModisTiePointGeoCoding.dispose()", "testcase": false, "constructor": false}, {"identifier": "isCrossingMeridianAt180", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCrossingMeridianAt180()", "full_signature": "public boolean isCrossingMeridianAt180()", "class_method_signature": "ModisTiePointGeoCoding.isCrossingMeridianAt180()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "ModisTiePointGeoCoding.init()", "testcase": false, "constructor": false}, {"identifier": "initSmallestAndLargestValidGeocodingIndices", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initSmallestAndLargestValidGeocodingIndices()", "full_signature": "private void initSmallestAndLargestValidGeocodingIndices()", "class_method_signature": "ModisTiePointGeoCoding.initSmallestAndLargestValidGeocodingIndices()", "testcase": false, "constructor": false}, {"identifier": "createCenterPolyLine", "parameters": "(TiePointGeoCoding geoCoding, final int sceneWidth,\n                                                 final int sceneHeight)", "modifiers": "private static", "return": "PolyLine", "signature": "PolyLine createCenterPolyLine(TiePointGeoCoding geoCoding, final int sceneWidth,\n                                                 final int sceneHeight)", "full_signature": "private static PolyLine createCenterPolyLine(TiePointGeoCoding geoCoding, final int sceneWidth,\n                                                 final int sceneHeight)", "class_method_signature": "ModisTiePointGeoCoding.createCenterPolyLine(TiePointGeoCoding geoCoding, final int sceneWidth,\n                                                 final int sceneHeight)", "testcase": false, "constructor": false}, {"identifier": "computeIndex", "parameters": "(PixelPos pixelPos)", "modifiers": "private", "return": "int", "signature": "int computeIndex(PixelPos pixelPos)", "full_signature": "private int computeIndex(PixelPos pixelPos)", "class_method_signature": "ModisTiePointGeoCoding.computeIndex(PixelPos pixelPos)", "testcase": false, "constructor": false}, {"identifier": "getGeoCodingIndexfor", "parameters": "(final GeoPos geoPos)", "modifiers": "private", "return": "int", "signature": "int getGeoCodingIndexfor(final GeoPos geoPos)", "full_signature": "private int getGeoCodingIndexfor(final GeoPos geoPos)", "class_method_signature": "ModisTiePointGeoCoding.getGeoCodingIndexfor(final GeoPos geoPos)", "testcase": false, "constructor": false}, {"identifier": "getNextCenterLineIndex", "parameters": "(int index, final int direction)", "modifiers": "private", "return": "int", "signature": "int getNextCenterLineIndex(int index, final int direction)", "full_signature": "private int getNextCenterLineIndex(int index, final int direction)", "class_method_signature": "ModisTiePointGeoCoding.getNextCenterLineIndex(int index, final int direction)", "testcase": false, "constructor": false}, {"identifier": "transferGeoCoding", "parameters": "(final Scene srcScene, final Scene destScene, final ProductSubsetDef subsetDef)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean transferGeoCoding(final Scene srcScene, final Scene destScene, final ProductSubsetDef subsetDef)", "full_signature": "@Override public boolean transferGeoCoding(final Scene srcScene, final Scene destScene, final ProductSubsetDef subsetDef)", "class_method_signature": "ModisTiePointGeoCoding.transferGeoCoding(final Scene srcScene, final Scene destScene, final ProductSubsetDef subsetDef)", "testcase": false, "constructor": false}, {"identifier": "recalculateTiePointGrids", "parameters": "(Scene srcScene, Scene destScene, ProductSubsetDef subsetDef, String latGridName, String lonGridName)", "modifiers": "private", "return": "boolean", "signature": "boolean recalculateTiePointGrids(Scene srcScene, Scene destScene, ProductSubsetDef subsetDef, String latGridName, String lonGridName)", "full_signature": "private boolean recalculateTiePointGrids(Scene srcScene, Scene destScene, ProductSubsetDef subsetDef, String latGridName, String lonGridName)", "class_method_signature": "ModisTiePointGeoCoding.recalculateTiePointGrids(Scene srcScene, Scene destScene, ProductSubsetDef subsetDef, String latGridName, String lonGridName)", "testcase": false, "constructor": false}, {"identifier": "removeTiePointGrid", "parameters": "(Scene destScene, String gridName)", "modifiers": "private", "return": "void", "signature": "void removeTiePointGrid(Scene destScene, String gridName)", "full_signature": "private void removeTiePointGrid(Scene destScene, String gridName)", "class_method_signature": "ModisTiePointGeoCoding.removeTiePointGrid(Scene destScene, String gridName)", "testcase": false, "constructor": false}, {"identifier": "createGeocoding", "parameters": "(Scene destScene)", "modifiers": "private", "return": "boolean", "signature": "boolean createGeocoding(Scene destScene)", "full_signature": "private boolean createGeocoding(Scene destScene)", "class_method_signature": "ModisTiePointGeoCoding.createGeocoding(Scene destScene)", "testcase": false, "constructor": false}, {"identifier": "mustRecalculateTiePointGrids", "parameters": "(ProductSubsetDef subsetDef)", "modifiers": "static", "return": "boolean", "signature": "boolean mustRecalculateTiePointGrids(ProductSubsetDef subsetDef)", "full_signature": "static boolean mustRecalculateTiePointGrids(ProductSubsetDef subsetDef)", "class_method_signature": "ModisTiePointGeoCoding.mustRecalculateTiePointGrids(ProductSubsetDef subsetDef)", "testcase": false, "constructor": false}, {"identifier": "isHighResolution", "parameters": "(int sceneHeight, int tpGridHeight)", "modifiers": "static", "return": "boolean", "signature": "boolean isHighResolution(int sceneHeight, int tpGridHeight)", "full_signature": "static boolean isHighResolution(int sceneHeight, int tpGridHeight)", "class_method_signature": "ModisTiePointGeoCoding.isHighResolution(int sceneHeight, int tpGridHeight)", "testcase": false, "constructor": false}, {"identifier": "calculateStartLine", "parameters": "(int scanlineHeight, Rectangle region)", "modifiers": "static", "return": "int", "signature": "int calculateStartLine(int scanlineHeight, Rectangle region)", "full_signature": "static int calculateStartLine(int scanlineHeight, Rectangle region)", "class_method_signature": "ModisTiePointGeoCoding.calculateStartLine(int scanlineHeight, Rectangle region)", "testcase": false, "constructor": false}, {"identifier": "calculateStopLine", "parameters": "(int scanlineHeight, Rectangle region)", "modifiers": "static", "return": "int", "signature": "int calculateStopLine(int scanlineHeight, Rectangle region)", "full_signature": "static int calculateStopLine(int scanlineHeight, Rectangle region)", "class_method_signature": "ModisTiePointGeoCoding.calculateStopLine(int scanlineHeight, Rectangle region)", "testcase": false, "constructor": false}], "file": "s3tbx-modis-reader/src/main/java/org/esa/s3tbx/dataio/modis/ModisTiePointGeoCoding.java"}, "focal_method": {"identifier": "mustRecalculateTiePointGrids", "parameters": "(ProductSubsetDef subsetDef)", "modifiers": "static", "return": "boolean", "body": "static boolean mustRecalculateTiePointGrids(ProductSubsetDef subsetDef) {\n        return subsetDef != null && subsetDef.getRegion() != null;\n    }", "signature": "boolean mustRecalculateTiePointGrids(ProductSubsetDef subsetDef)", "full_signature": "static boolean mustRecalculateTiePointGrids(ProductSubsetDef subsetDef)", "class_method_signature": "ModisTiePointGeoCoding.mustRecalculateTiePointGrids(ProductSubsetDef subsetDef)", "testcase": false, "constructor": false, "invocations": ["getRegion"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}