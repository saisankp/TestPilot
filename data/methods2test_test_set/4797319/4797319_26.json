{"test_class": {"identifier": "TestSparqlTranslationProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SparqlTranslationHelper helper = new SparqlTranslationHelper();", "modifier": "private final", "type": "SparqlTranslationHelper", "declarator": "helper = new SparqlTranslationHelper()", "var_name": "helper"}], "file": "recommendation-servlet/src/test/java/org/sindice/analytics/queryProcessor/TestSparqlTranslationProcessor.java"}, "test_case": {"identifier": "testConnectedObject3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConnectedObject3() throws Exception {\n    final String query = \"SELECT * { ?s ?p ?o . ?a ?POF ?p . }\";\n    final ASTQueryContainer ast = SyntaxTreeBuilder.parseQuery(query);\n    final RecommendationQuery actual = SparqlTranslationProcessor.process(null, ast);\n    final RecommendationQuery rq = new RecommendationQuery(DataGraphSummaryVocab.GRAPH_SUMMARY_GRAPH, null);\n\n    rq.addProjection(QueryProcessor.POF_RESOURCE);\n    rq.addProjection(SyntaxTreeBuilder.PointOfFocus);\n    rq.addProjection(QueryProcessor.CARDINALITY_VAR);\n    rq.edge().add(new Edge(null, \"v1\", \"s\", \"?p\", null));\n    rq.edge().add(new Edge(null, \"v2\", \"a\", \"?\" + SyntaxTreeBuilder.PointOfFocus, \"p\"));\n\n    helper.assertDGSQuery(rq, actual);\n  }", "signature": "void testConnectedObject3()", "full_signature": "@Test public void testConnectedObject3()", "class_method_signature": "TestSparqlTranslationProcessor.testConnectedObject3()", "testcase": true, "constructor": false, "invocations": ["parseQuery", "process", "addProjection", "addProjection", "addProjection", "add", "edge", "add", "edge", "assertDGSQuery"]}, "focal_class": {"identifier": "SparqlTranslationProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static IsLeaf      isLeaf = new IsLeaf();", "modifier": "private final static", "type": "IsLeaf", "declarator": "isLeaf = new IsLeaf()", "var_name": "isLeaf"}, {"original_string": "private static ASTQueryContainer astQueryContainer;", "modifier": "private static", "type": "ASTQueryContainer", "declarator": "astQueryContainer", "var_name": "astQueryContainer"}], "methods": [{"identifier": "SparqlTranslationProcessor", "parameters": "()", "modifiers": "private", "return": "", "signature": " SparqlTranslationProcessor()", "full_signature": "private  SparqlTranslationProcessor()", "class_method_signature": "SparqlTranslationProcessor.SparqlTranslationProcessor()", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(POFMetadata meta, ASTQueryContainer ast)", "modifiers": "public static", "return": "RecommendationQuery", "signature": "RecommendationQuery process(POFMetadata meta, ASTQueryContainer ast)", "full_signature": "public static RecommendationQuery process(POFMetadata meta, ASTQueryContainer ast)", "class_method_signature": "SparqlTranslationProcessor.process(POFMetadata meta, ASTQueryContainer ast)", "testcase": false, "constructor": false}, {"identifier": "changeToPofResource", "parameters": "(RecommendationQuery rq, String pofResourceName)", "modifiers": "private static", "return": "void", "signature": "void changeToPofResource(RecommendationQuery rq, String pofResourceName)", "full_signature": "private static void changeToPofResource(RecommendationQuery rq, String pofResourceName)", "class_method_signature": "SparqlTranslationProcessor.changeToPofResource(RecommendationQuery rq, String pofResourceName)", "testcase": false, "constructor": false}], "file": "recommendation-servlet/src/main/java/org/sindice/analytics/queryProcessor/SparqlTranslationProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "(POFMetadata meta, ASTQueryContainer ast)", "modifiers": "public static", "return": "RecommendationQuery", "body": "public static RecommendationQuery process(POFMetadata meta, ASTQueryContainer ast)\n  throws MalformedQueryException, VisitorException {\n    // replace any dataset URI (graph and FROM) by their second-level domain name\n    final Dataset datasets = DatasetDeclProcessor.process(ast);\n    final ASTIRI d;\n\n    astQueryContainer = ast;\n    if (datasets != null) {\n      if (!datasets.getDefaultGraphs().isEmpty() || !datasets.getNamedGraphs().isEmpty()) {\n        if (!datasets.getDefaultGraphs().isEmpty() && !datasets.getNamedGraphs().isEmpty()) {\n          throw new DGSException(\"There can be only one default/named graph\");\n        }\n        if (!datasets.getDefaultGraphs().isEmpty() && datasets.getDefaultGraphs().size() != 1) {\n          throw new DGSException(\"There can be only one default/named graph\");\n        }\n        if (!datasets.getNamedGraphs().isEmpty() && datasets.getNamedGraphs().size() != 1) {\n          throw new DGSException(\"There can be only one default/named graph\");\n        }\n      }\n      if (!datasets.getDefaultGraphs().isEmpty() && datasets.getNamedGraphs().isEmpty()) {\n        d = new ASTIRI(SyntaxTreeBuilderTreeConstants.JJTIRI);\n        final String value = datasets.getDefaultGraphs().toArray(new URI[1])[0].stringValue();\n        d.setValue(URIUtil.getSndDomainFromUrl(value));\n      } else if (datasets.getDefaultGraphs().isEmpty() && !datasets.getNamedGraphs().isEmpty()) {\n        d = new ASTIRI(SyntaxTreeBuilderTreeConstants.JJTIRI);\n        final String value = datasets.getNamedGraphs().toArray(new URI[1])[0].stringValue();\n        d.setValue(URIUtil.getSndDomainFromUrl(value));\n      } else {\n        d = null;\n      }\n    } else {\n      d = null;\n    }\n\n    String filter = null;\n    if (meta != null && meta.pofNode.getMetadata() != null) {\n      final Object keyword = meta.pofNode.getMetadata(SyntaxTreeBuilder.Keyword);\n      final Object prefix = meta.pofNode.getMetadata(SyntaxTreeBuilder.Prefix);\n      final Object qname = meta.pofNode.getMetadata(SyntaxTreeBuilder.Qname);\n\n      if (keyword != null) {\n        filter = \"regex(str(?\" + SyntaxTreeBuilder.PointOfFocus + \"), \\\"\" + keyword + \"\\\", \\\"i\\\")\";\n      } else if (prefix != null) {\n        filter = \"regex(str(?\" + SyntaxTreeBuilder.PointOfFocus + \"), \\\"^\" + prefix + \"\\\", \\\"i\\\")\";\n      } else if (qname != null) {\n        filter = \"regex(str(?\" + SyntaxTreeBuilder.PointOfFocus + \"), \\\"^\" + qname + \"\\\", \\\"i\\\")\";\n      }\n    }\n\n    final RecommendationQuery rq = new RecommendationQuery(DataGraphSummaryVocab.GRAPH_SUMMARY_GRAPH, filter);\n    final SparqlTranslationVisitor v = new SparqlTranslationVisitor(rq, d);\n\n    v.visit(ast, null);\n    // Change variable name of the POF ressource\n    changeToPofResource(rq, v.pofResourceName);\n    return rq;\n  }", "signature": "RecommendationQuery process(POFMetadata meta, ASTQueryContainer ast)", "full_signature": "public static RecommendationQuery process(POFMetadata meta, ASTQueryContainer ast)", "class_method_signature": "SparqlTranslationProcessor.process(POFMetadata meta, ASTQueryContainer ast)", "testcase": false, "constructor": false, "invocations": ["process", "isEmpty", "getDefaultGraphs", "isEmpty", "getNamedGraphs", "isEmpty", "getDefaultGraphs", "isEmpty", "getNamedGraphs", "isEmpty", "getDefaultGraphs", "size", "getDefaultGraphs", "isEmpty", "getNamedGraphs", "size", "getNamedGraphs", "isEmpty", "getDefaultGraphs", "isEmpty", "getNamedGraphs", "stringValue", "toArray", "getDefaultGraphs", "setValue", "getSndDomainFromUrl", "isEmpty", "getDefaultGraphs", "isEmpty", "getNamedGraphs", "stringValue", "toArray", "getNamedGraphs", "setValue", "getSndDomainFromUrl", "getMetadata", "getMetadata", "getMetadata", "getMetadata", "visit", "changeToPofResource"]}, "repository": {"repo_id": 4797319, "url": "https://github.com/sindice/sparqled", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 33, "size": 12885, "license": "licensed"}}