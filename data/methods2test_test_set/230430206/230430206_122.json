{"test_class": {"identifier": "ZooKeeperServerMainTest", "superclass": "extends ZKTestCase", "interfaces": "implements Watcher", "fields": [{"original_string": "protected static final Logger LOG =\n        LoggerFactory.getLogger(ZooKeeperServerMainTest.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOG =\n        LoggerFactory.getLogger(ZooKeeperServerMainTest.class)", "var_name": "LOG"}, {"original_string": "private CountDownLatch clientConnected = new CountDownLatch(1);", "modifier": "private", "type": "CountDownLatch", "declarator": "clientConnected = new CountDownLatch(1)", "var_name": "clientConnected"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java"}, "test_case": {"identifier": "testReadOnlyTxnLogDir", "parameters": "()", "modifiers": "@Test(timeout = 30000) public", "return": "void", "body": "@Test(timeout = 30000)\n    public void testReadOnlyTxnLogDir() throws Exception {\n        ClientBase.setupTestEnv();\n        final int CLIENT_PORT = PortAssignment.unique();\n\n        // Start up the ZK server to automatically create the necessary directories\n        // and capture the directory where data is stored\n        MainThread main = new MainThread(CLIENT_PORT, true, null);\n        File tmpDir = main.tmpDir;\n        main.start();\n        Assert.assertTrue(\"waiting for server being up\", ClientBase\n                .waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT,\n                        CONNECTION_TIMEOUT / 2));\n        main.shutdown();\n\n        // Make the transaction log directory read only\n        File logDir = new File(main.logDir, FileTxnSnapLog.version + FileTxnSnapLog.VERSION);\n        logDir.setWritable(false);\n\n        // Restart ZK and observe a failure\n        main = new MainThread(CLIENT_PORT, false, tmpDir, null);\n        main.start();\n\n        Assert.assertFalse(\"waiting for server being up\", ClientBase\n                .waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT,\n                        CONNECTION_TIMEOUT / 2));\n\n        main.shutdown();\n\n        logDir.setWritable(true);\n\n        main.deleteDirs();\n    }", "signature": "void testReadOnlyTxnLogDir()", "full_signature": "@Test(timeout = 30000) public void testReadOnlyTxnLogDir()", "class_method_signature": "ZooKeeperServerMainTest.testReadOnlyTxnLogDir()", "testcase": true, "constructor": false, "invocations": ["setupTestEnv", "unique", "start", "assertTrue", "waitForServerUp", "shutdown", "setWritable", "start", "assertFalse", "waitForServerUp", "shutdown", "setWritable", "deleteDirs"]}, "focal_class": {"identifier": "ZooKeeperServerMain", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG =\n        LoggerFactory.getLogger(ZooKeeperServerMain.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG =\n        LoggerFactory.getLogger(ZooKeeperServerMain.class)", "var_name": "LOG"}, {"original_string": "private static final String USAGE =\n        \"Usage: ZooKeeperServerMain configfile | port datadir [ticktime] [maxcnxns]\";", "modifier": "private static final", "type": "String", "declarator": "USAGE =\n        \"Usage: ZooKeeperServerMain configfile | port datadir [ticktime] [maxcnxns]\"", "var_name": "USAGE"}, {"original_string": "private ServerCnxnFactory cnxnFactory;", "modifier": "private", "type": "ServerCnxnFactory", "declarator": "cnxnFactory", "var_name": "cnxnFactory"}, {"original_string": "private ServerCnxnFactory secureCnxnFactory;", "modifier": "private", "type": "ServerCnxnFactory", "declarator": "secureCnxnFactory", "var_name": "secureCnxnFactory"}, {"original_string": "private ContainerManager containerManager;", "modifier": "private", "type": "ContainerManager", "declarator": "containerManager", "var_name": "containerManager"}, {"original_string": "private AdminServer adminServer;", "modifier": "private", "type": "AdminServer", "declarator": "adminServer", "var_name": "adminServer"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "ZooKeeperServerMain.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "initializeAndRun", "parameters": "(String[] args)", "modifiers": "protected", "return": "void", "signature": "void initializeAndRun(String[] args)", "full_signature": "protected void initializeAndRun(String[] args)", "class_method_signature": "ZooKeeperServerMain.initializeAndRun(String[] args)", "testcase": false, "constructor": false}, {"identifier": "runFromConfig", "parameters": "(ServerConfig config)", "modifiers": "public", "return": "void", "signature": "void runFromConfig(ServerConfig config)", "full_signature": "public void runFromConfig(ServerConfig config)", "class_method_signature": "ZooKeeperServerMain.runFromConfig(ServerConfig config)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void shutdown()", "full_signature": "protected void shutdown()", "class_method_signature": "ZooKeeperServerMain.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getCnxnFactory", "parameters": "()", "modifiers": "", "return": "ServerCnxnFactory", "signature": "ServerCnxnFactory getCnxnFactory()", "full_signature": " ServerCnxnFactory getCnxnFactory()", "class_method_signature": "ZooKeeperServerMain.getCnxnFactory()", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java"}, "focal_method": {"identifier": "shutdown", "parameters": "()", "modifiers": "protected", "return": "void", "body": "protected void shutdown() {\n        if (containerManager != null) {\n            containerManager.stop();\n        }\n        if (cnxnFactory != null) {\n            cnxnFactory.shutdown();\n        }\n        if (secureCnxnFactory != null) {\n            secureCnxnFactory.shutdown();\n        }\n        try {\n            if (adminServer != null) {\n                adminServer.shutdown();\n            }\n        } catch (AdminServerException e) {\n            LOG.warn(\"Problem stopping AdminServer\", e);\n        }\n    }", "signature": "void shutdown()", "full_signature": "protected void shutdown()", "class_method_signature": "ZooKeeperServerMain.shutdown()", "testcase": false, "constructor": false, "invocations": ["stop", "shutdown", "shutdown", "shutdown", "warn"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}