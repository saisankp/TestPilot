{"test_class": {"identifier": "OAuthCertBoundJwtAccessTokenAuthorityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ClassLoader classLoader = this.getClass().getClassLoader();", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader = this.getClass().getClassLoader()", "var_name": "classLoader"}, {"original_string": "private X509Certificate[] clientCertChain = null;", "modifier": "private", "type": "X509Certificate[]", "declarator": "clientCertChain = null", "var_name": "clientCertChain"}, {"original_string": "private String jwtPublicKey = null;", "modifier": "private", "type": "String", "declarator": "jwtPublicKey = null", "var_name": "jwtPublicKey"}, {"original_string": "private final KeyStore baseKeyStore = new KeyStore() {\n        public String getPublicKey(String domain, String service, String keyId) {\n            return jwtPublicKey;\n        }\n    };", "modifier": "private final", "type": "KeyStore", "declarator": "baseKeyStore = new KeyStore() {\n        public String getPublicKey(String domain, String service, String keyId) {\n            return jwtPublicKey;\n        }\n    }", "var_name": "baseKeyStore"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/oauth/OAuthCertBoundJwtAccessTokenAuthorityTest.java"}, "test_case": {"identifier": "testInitialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitialize() throws Exception {\n        OAuthCertBoundJwtAccessTokenAuthority authority = new OAuthCertBoundJwtAccessTokenAuthority();\n\n        // authenticateChallenge\n        Field authenticateChallengeField = authority.getClass().getDeclaredField(\"authenticateChallenge\");\n        authenticateChallengeField.setAccessible(true);\n\n        System.setProperty(\"athenz.auth.oauth.jwt.authn_challenge_realm\", \"https://realm.athenz.io\");\n        authority.initialize();\n        System.clearProperty(\"athenz.auth.oauth.jwt.authn_challenge_realm\");\n        assertEquals(authenticateChallengeField.get(authority), \"Bearer realm=\\\"https://realm.athenz.io\\\"\");\n\n        System.clearProperty(\"athenz.auth.oauth.jwt.authn_challenge_realm\");\n        authority.initialize();\n        assertEquals(authenticateChallengeField.get(authority), \"Bearer realm=\\\"https://athenz.io\\\"\");\n\n        // certificateIdentityParser\n        CertificateIdentityParser certParser = null;\n        Field excludeRoleCertificatesField = null, excludedPrincipalsField = null;\n        Field certificateIdentityParserField = authority.getClass().getDeclaredField(\"certificateIdentityParser\");\n        certificateIdentityParserField.setAccessible(true);\n\n        System.setProperty(\"athenz.auth.oauth.jwt.cert.exclude_role_certificates\", \"true\");\n        System.setProperty(\"athenz.auth.oauth.jwt.cert.excluded_principals\", \"principals_1,principals_2\");\n        authority.initialize();\n        System.clearProperty(\"athenz.auth.oauth.jwt.cert.exclude_role_certificates\");\n        System.clearProperty(\"athenz.auth.oauth.jwt.cert.excluded_principals\");\n        certParser = (CertificateIdentityParser) certificateIdentityParserField.get(authority);\n        excludeRoleCertificatesField  = certParser.getClass().getDeclaredField(\"excludeRoleCertificates\");\n        excludedPrincipalsField  = certParser.getClass().getDeclaredField(\"excludedPrincipalSet\");\n        excludeRoleCertificatesField.setAccessible(true);\n        excludedPrincipalsField.setAccessible(true);\n        assertEquals(excludeRoleCertificatesField.get(certParser), true);\n        assertEquals(excludedPrincipalsField.get(certParser), new HashSet<>(Arrays.asList(new String[]{ \"principals_1\", \"principals_2\" })));\n\n        System.clearProperty(\"athenz.auth.oauth.jwt.cert.exclude_role_certificates\");\n        System.clearProperty(\"athenz.auth.oauth.jwt.cert.excluded_principals\");\n        authority.initialize();\n        certParser = (CertificateIdentityParser) certificateIdentityParserField.get(authority);\n        excludeRoleCertificatesField  = certParser.getClass().getDeclaredField(\"excludeRoleCertificates\");\n        excludedPrincipalsField  = certParser.getClass().getDeclaredField(\"excludedPrincipalSet\");\n        excludeRoleCertificatesField.setAccessible(true);\n        excludedPrincipalsField.setAccessible(true);\n        assertEquals(excludeRoleCertificatesField.get(certParser), false);\n        assertEquals(excludedPrincipalsField.get(certParser), (Set<String>) null);\n\n        // parser\n        Field parserField = authority.getClass().getDeclaredField(\"parser\");\n        parserField.setAccessible(true);\n\n        System.setProperty(\"athenz.auth.oauth.jwt.parser_factory_class\", \"invalid_class\");\n        assertThrows(IllegalArgumentException.class, () -> authority.initialize());\n        System.clearProperty(\"athenz.auth.oauth.jwt.parser_factory_class\");\n\n        System.setProperty(\"athenz.auth.oauth.jwt.parser_factory_class\", OAuthCertBoundJwtAccessTokenAuthorityTestParserFactory.class.getName());\n        authority.initialize();\n        System.clearProperty(\"athenz.auth.oauth.jwt.parser_factory_class\");\n        assertTrue(parserField.get(authority) instanceof OAuthCertBoundJwtAccessTokenAuthorityTestParser);\n\n        System.clearProperty(\"athenz.auth.oauth.jwt.parser_factory_class\");\n        authority.initialize();\n        assertTrue(parserField.get(authority) instanceof DefaultOAuthJwtAccessTokenParser);\n\n        // shouldVerifyCertThumbprint\n        Field shouldVerifyCertThumbprintField = authority.getClass().getDeclaredField(\"shouldVerifyCertThumbprint\");\n        shouldVerifyCertThumbprintField.setAccessible(true);\n\n        System.clearProperty(\"athenz.auth.oauth.jwt.verify_cert_thumbprint\");\n        authority.initialize();\n        assertEquals(shouldVerifyCertThumbprintField.get(authority), true);\n        System.setProperty(\"athenz.auth.oauth.jwt.verify_cert_thumbprint\", \"false\");\n        authority.initialize();\n        System.clearProperty(\"athenz.auth.oauth.jwt.verify_cert_thumbprint\");\n        assertEquals(shouldVerifyCertThumbprintField.get(authority), false);\n\n        // authorizedServices & validator\n        DefaultOAuthJwtAccessTokenValidator validator = null;\n        Field trustedIssuerField = null, requiredAudiencesField = null, requiredScopesField = null, authorizedClientIdsField = null;\n        Field authorizedServicesField = authority.getClass().getDeclaredField(\"authorizedServices\");\n        authorizedServicesField.setAccessible(true);\n        Field validatorField = authority.getClass().getDeclaredField(\"validator\");\n        validatorField.setAccessible(true);\n\n        System.setProperty(\"athenz.auth.oauth.jwt.authorized_client_ids_path\", \"\");\n        System.setProperty(\"athenz.auth.oauth.jwt.claim.iss\", \"\");\n        System.setProperty(\"athenz.auth.oauth.jwt.claim.aud\", \"\");\n        System.setProperty(\"athenz.auth.oauth.jwt.claim.scope\", \"\");\n        assertThrows(IllegalArgumentException.class, () -> authority.initialize());\n        System.clearProperty(\"athenz.auth.oauth.jwt.authorized_client_ids_path\");\n        System.clearProperty(\"athenz.auth.oauth.jwt.claim.iss\");\n        System.clearProperty(\"athenz.auth.oauth.jwt.claim.aud\");\n        System.clearProperty(\"athenz.auth.oauth.jwt.claim.scope\");\n\n        Map<String, String> expectedAuthorizedServices = new HashMap<>();\n        Map<String, Set<String>> expectedAuthorizedClientIds = new HashMap<>();\n        expectedAuthorizedServices.put(\"ui.athenz.io\", \"sys.auth.ui\");\n        expectedAuthorizedClientIds.put(\"ui.athenz.io\", new HashSet<>(Arrays.asList(new String[]{\"client_id_1\",\"client_id_2\",\"ui.athenz.io\"})));\n        System.setProperty(\"athenz.auth.oauth.jwt.authorized_client_ids_path\", this.classLoader.getResource(\"authorized_client_ids.single.txt\").getPath());\n        System.setProperty(\"athenz.auth.oauth.jwt.claim.iss\", \"iss\");\n        System.setProperty(\"athenz.auth.oauth.jwt.claim.aud\", \"aud_1,aud_2\");\n        System.setProperty(\"athenz.auth.oauth.jwt.claim.scope\", \"scope_1 scope_2\");\n        authority.initialize();\n        System.clearProperty(\"athenz.auth.oauth.jwt.authorized_client_ids_path\");\n        System.clearProperty(\"athenz.auth.oauth.jwt.claim.iss\");\n        System.clearProperty(\"athenz.auth.oauth.jwt.claim.aud\");\n        System.clearProperty(\"athenz.auth.oauth.jwt.claim.scope\");\n        assertEquals(authorizedServicesField.get(authority), expectedAuthorizedServices);\n        validator = (DefaultOAuthJwtAccessTokenValidator) validatorField.get(authority);\n        trustedIssuerField = validator.getClass().getDeclaredField(\"trustedIssuer\");\n        requiredAudiencesField = validator.getClass().getDeclaredField(\"requiredAudiences\");\n        requiredScopesField = validator.getClass().getDeclaredField(\"requiredScopes\");\n        authorizedClientIdsField = validator.getClass().getDeclaredField(\"authorizedClientIds\");\n        trustedIssuerField.setAccessible(true);\n        requiredAudiencesField.setAccessible(true);\n        requiredScopesField.setAccessible(true);\n        authorizedClientIdsField.setAccessible(true);\n        assertEquals(trustedIssuerField.get(validator), \"iss\");\n        assertEquals(requiredAudiencesField.get(validator), new HashSet<>(Arrays.asList(new String[]{\"aud_1\", \"aud_2\"})));\n        assertEquals(requiredScopesField.get(validator), new HashSet<>(Arrays.asList(new String[]{\"scope_1\", \"scope_2\"})));\n        assertEquals(authorizedClientIdsField.get(validator), expectedAuthorizedClientIds);\n\n        System.clearProperty(\"athenz.auth.oauth.jwt.authorized_client_ids_path\");\n        System.clearProperty(\"athenz.auth.oauth.jwt.claim.iss\");\n        System.clearProperty(\"athenz.auth.oauth.jwt.claim.aud\");\n        System.clearProperty(\"athenz.auth.oauth.jwt.claim.scope\");\n        authority.initialize();\n        assertEquals(authorizedServicesField.get(authority), new HashMap<String, String>());\n        validator = (DefaultOAuthJwtAccessTokenValidator) validatorField.get(authority);\n        trustedIssuerField = validator.getClass().getDeclaredField(\"trustedIssuer\");\n        requiredAudiencesField = validator.getClass().getDeclaredField(\"requiredAudiences\");\n        requiredScopesField = validator.getClass().getDeclaredField(\"requiredScopes\");\n        authorizedClientIdsField = validator.getClass().getDeclaredField(\"authorizedClientIds\");\n        trustedIssuerField.setAccessible(true);\n        requiredAudiencesField.setAccessible(true);\n        requiredScopesField.setAccessible(true);\n        authorizedClientIdsField.setAccessible(true);\n        assertEquals(trustedIssuerField.get(validator), \"https://athenz.io\");\n        assertEquals(requiredAudiencesField.get(validator), new HashSet<>(Arrays.asList(new String[]{\"https://zms.athenz.io\"})));\n        assertEquals(requiredScopesField.get(validator), new HashSet<>(Arrays.asList(new String[]{\"sys.auth:role.admin\"})));\n        assertEquals(authorizedClientIdsField.get(validator), new HashMap<String, String>());\n    }", "signature": "void testInitialize()", "full_signature": "@Test public void testInitialize()", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthorityTest.testInitialize()", "testcase": true, "constructor": false, "invocations": ["getDeclaredField", "getClass", "setAccessible", "setProperty", "initialize", "clearProperty", "assertEquals", "get", "clearProperty", "initialize", "assertEquals", "get", "getDeclaredField", "getClass", "setAccessible", "setProperty", "setProperty", "initialize", "clearProperty", "clearProperty", "get", "getDeclaredField", "getClass", "getDeclaredField", "getClass", "setAccessible", "setAccessible", "assertEquals", "get", "assertEquals", "get", "asList", "clearProperty", "clearProperty", "initialize", "get", "getDeclaredField", "getClass", "getDeclaredField", "getClass", "setAccessible", "setAccessible", "assertEquals", "get", "assertEquals", "get", "getDeclaredField", "getClass", "setAccessible", "setProperty", "assertThrows", "initialize", "clearProperty", "setProperty", "getName", "initialize", "clearProperty", "assertTrue", "get", "clearProperty", "initialize", "assertTrue", "get", "getDeclaredField", "getClass", "setAccessible", "clearProperty", "initialize", "assertEquals", "get", "setProperty", "initialize", "clearProperty", "assertEquals", "get", "getDeclaredField", "getClass", "setAccessible", "getDeclaredField", "getClass", "setAccessible", "setProperty", "setProperty", "setProperty", "setProperty", "assertThrows", "initialize", "clearProperty", "clearProperty", "clearProperty", "clearProperty", "put", "put", "asList", "setProperty", "getPath", "getResource", "setProperty", "setProperty", "setProperty", "initialize", "clearProperty", "clearProperty", "clearProperty", "clearProperty", "assertEquals", "get", "get", "getDeclaredField", "getClass", "getDeclaredField", "getClass", "getDeclaredField", "getClass", "getDeclaredField", "getClass", "setAccessible", "setAccessible", "setAccessible", "setAccessible", "assertEquals", "get", "assertEquals", "get", "asList", "assertEquals", "get", "asList", "assertEquals", "get", "clearProperty", "clearProperty", "clearProperty", "clearProperty", "initialize", "assertEquals", "get", "get", "getDeclaredField", "getClass", "getDeclaredField", "getClass", "getDeclaredField", "getClass", "getDeclaredField", "getClass", "setAccessible", "setAccessible", "setAccessible", "setAccessible", "assertEquals", "get", "assertEquals", "get", "asList", "assertEquals", "get", "asList", "assertEquals", "get"]}, "focal_class": {"identifier": "OAuthCertBoundJwtAccessTokenAuthority", "superclass": "", "interfaces": "implements Authority, AuthorityKeyStore, KeyStore", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(OAuthCertBoundJwtAccessTokenAuthority.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(OAuthCertBoundJwtAccessTokenAuthority.class)", "var_name": "LOG"}, {"original_string": "private String authenticateChallenge = \"Bearer realm=\\\"athenz.io\\\"\";", "modifier": "private", "type": "String", "declarator": "authenticateChallenge = \"Bearer realm=\\\"athenz.io\\\"\"", "var_name": "authenticateChallenge"}, {"original_string": "private KeyStore keyStore = null;", "modifier": "private", "type": "KeyStore", "declarator": "keyStore = null", "var_name": "keyStore"}, {"original_string": "private CertificateIdentityParser certificateIdentityParser = null;", "modifier": "private", "type": "CertificateIdentityParser", "declarator": "certificateIdentityParser = null", "var_name": "certificateIdentityParser"}, {"original_string": "private OAuthJwtAccessTokenParser parser = null;", "modifier": "private", "type": "OAuthJwtAccessTokenParser", "declarator": "parser = null", "var_name": "parser"}, {"original_string": "private OAuthJwtAccessTokenValidator validator = null;", "modifier": "private", "type": "OAuthJwtAccessTokenValidator", "declarator": "validator = null", "var_name": "validator"}, {"original_string": "Map<String, String> authorizedServices = null;", "modifier": "", "type": "Map<String, String>", "declarator": "authorizedServices = null", "var_name": "authorizedServices"}, {"original_string": "private boolean shouldVerifyCertThumbprint = true;", "modifier": "private", "type": "boolean", "declarator": "shouldVerifyCertThumbprint = true", "var_name": "shouldVerifyCertThumbprint"}], "methods": [{"identifier": "setKeyStore", "parameters": "(KeyStore keyStore)", "modifiers": "@Override public", "return": "void", "signature": "void setKeyStore(KeyStore keyStore)", "full_signature": "@Override public void setKeyStore(KeyStore keyStore)", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.setKeyStore(KeyStore keyStore)", "testcase": false, "constructor": false}, {"identifier": "getPublicKey", "parameters": "(String domain, String service, String keyId)", "modifiers": "@Override public", "return": "String", "signature": "String getPublicKey(String domain, String service, String keyId)", "full_signature": "@Override public String getPublicKey(String domain, String service, String keyId)", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.getPublicKey(String domain, String service, String keyId)", "testcase": false, "constructor": false}, {"identifier": "getCredSource", "parameters": "()", "modifiers": "@Override public", "return": "CredSource", "signature": "CredSource getCredSource()", "full_signature": "@Override public CredSource getCredSource()", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.getCredSource()", "testcase": false, "constructor": false}, {"identifier": "getAuthenticateChallenge", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getAuthenticateChallenge()", "full_signature": "@Override public String getAuthenticateChallenge()", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.getAuthenticateChallenge()", "testcase": false, "constructor": false}, {"identifier": "getDomain", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDomain()", "full_signature": "@Override public String getDomain()", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.getDomain()", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getHeader()", "full_signature": "@Override public String getHeader()", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.getHeader()", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(String credentials, String remoteAddr, String httpMethod, StringBuilder errMsg)", "modifiers": "@Override public", "return": "Principal", "signature": "Principal authenticate(String credentials, String remoteAddr, String httpMethod, StringBuilder errMsg)", "full_signature": "@Override public Principal authenticate(String credentials, String remoteAddr, String httpMethod, StringBuilder errMsg)", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.authenticate(String credentials, String remoteAddr, String httpMethod, StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "reportError", "parameters": "(final String message, StringBuilder errMsg)", "modifiers": "private", "return": "void", "signature": "void reportError(final String message, StringBuilder errMsg)", "full_signature": "private void reportError(final String message, StringBuilder errMsg)", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.reportError(final String message, StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "processAuthorizedClientIds", "parameters": "(String authorizedClientIdsPath, Map<String, Set<String>> authorizedClientIds, Map<String, String> authorizedServices)", "modifiers": "private", "return": "void", "signature": "void processAuthorizedClientIds(String authorizedClientIdsPath, Map<String, Set<String>> authorizedClientIds, Map<String, String> authorizedServices)", "full_signature": "private void processAuthorizedClientIds(String authorizedClientIdsPath, Map<String, Set<String>> authorizedClientIds, Map<String, String> authorizedServices)", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.processAuthorizedClientIds(String authorizedClientIdsPath, Map<String, Set<String>> authorizedClientIds, Map<String, String> authorizedServices)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.initialize()", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(HttpServletRequest request, StringBuilder errMsg)", "modifiers": "@Override public", "return": "Principal", "signature": "Principal authenticate(HttpServletRequest request, StringBuilder errMsg)", "full_signature": "@Override public Principal authenticate(HttpServletRequest request, StringBuilder errMsg)", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.authenticate(HttpServletRequest request, StringBuilder errMsg)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/oauth/OAuthCertBoundJwtAccessTokenAuthority.java"}, "focal_method": {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void initialize() {\n        String authnChallengeRealm = OAuthAuthorityUtils.getProperty(OAuthAuthorityConsts.JA_PROP_AUTHN_CHALLENGE_REALM, \"https://athenz.io\");\n        this.authenticateChallenge = String.format(\"Bearer realm=\\\"%s\\\"\", authnChallengeRealm);\n\n        // no need to load user domain\n        // this.userDomain = userDomain;\n\n        // certificate parser\n        boolean excludeRoleCertificates = Boolean.valueOf(OAuthAuthorityUtils.getProperty(OAuthAuthorityConsts.JA_PROP_CERT_EXCLUDE_ROLE_CERTIFICATES, \"false\"));\n        Set<String> excludedPrincipals = OAuthAuthorityUtils.csvToSet(OAuthAuthorityUtils.getProperty(OAuthAuthorityConsts.JA_PROP_CERT_EXCLUDED_PRINCIPALS, \"\"), OAuthAuthorityConsts.CSV_DELIMITER);\n        this.certificateIdentityParser = new CertificateIdentityParser(excludedPrincipals, excludeRoleCertificates);\n\n        // JWT parser\n        String jwtParserFactoryClass = OAuthAuthorityUtils.getProperty(OAuthAuthorityConsts.JA_PROP_PARSER_FACTORY_CLASS, \"com.yahoo.athenz.auth.oauth.parser.DefaultOAuthJwtAccessTokenParserFactory\");\n        try {\n            OAuthJwtAccessTokenParserFactory jwtParserFactory = (OAuthJwtAccessTokenParserFactory) Class.forName(jwtParserFactoryClass).newInstance();\n            this.parser = jwtParserFactory.create(this);\n        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {\n            LOG.error(\"Invalid OAuthJwtAccessTokenParserFactory class: \" + jwtParserFactoryClass + \" error: \" + e.getMessage());\n            throw new IllegalArgumentException(\"Invalid JWT parser class\", e);\n        }\n\n        // JWT validator controls\n        this.shouldVerifyCertThumbprint = Boolean.valueOf(OAuthAuthorityUtils.getProperty(OAuthAuthorityConsts.JA_PROP_VERIFY_CERT_THUMBPRINT, \"true\"));\n        // JWT validator client ID mapping\n        String authorizedClientIdsPath = OAuthAuthorityUtils.getProperty(OAuthAuthorityConsts.JA_PROP_AUTHORIZED_CLIENT_IDS_PATH, \"\");\n        Map<String, Set<String>> authorizedClientIds = new HashMap<>();\n        Map<String, String> authorizedServices = new HashMap<>();\n        this.processAuthorizedClientIds(authorizedClientIdsPath, authorizedClientIds, authorizedServices);\n        this.authorizedServices = authorizedServices;\n        // JWT validator values\n        String trustedIssuer = OAuthAuthorityUtils.getProperty(OAuthAuthorityConsts.JA_PROP_CLAIM_ISS, \"https://athenz.io\");\n        Set<String> requiredAudiences = OAuthAuthorityUtils.csvToSet(OAuthAuthorityUtils.getProperty(OAuthAuthorityConsts.JA_PROP_CLAIM_AUD, \"https://zms.athenz.io\"), OAuthAuthorityConsts.CSV_DELIMITER);\n        Set<String> requiredScopes = OAuthAuthorityUtils.csvToSet(OAuthAuthorityUtils.getProperty(OAuthAuthorityConsts.JA_PROP_CLAIM_SCOPE, \"sys.auth:role.admin\"), OAuthJwtAccessToken.SCOPE_DELIMITER);\n        // JWT validator\n        this.validator = new DefaultOAuthJwtAccessTokenValidator(trustedIssuer, requiredAudiences, requiredScopes, authorizedClientIds);\n    }", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.initialize()", "testcase": false, "constructor": false, "invocations": ["getProperty", "format", "valueOf", "getProperty", "csvToSet", "getProperty", "getProperty", "newInstance", "forName", "create", "error", "getMessage", "valueOf", "getProperty", "getProperty", "processAuthorizedClientIds", "getProperty", "csvToSet", "getProperty", "csvToSet", "getProperty"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}