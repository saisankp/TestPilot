{"test_class": {"identifier": "AbstractAttributeProviderTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "protected final String id;", "modifier": "protected final", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "protected T testData;", "modifier": "protected", "type": "T", "declarator": "testData", "var_name": "testData"}, {"original_string": "protected Attribute[] baseData;", "modifier": "protected", "type": "Attribute[]", "declarator": "baseData", "var_name": "baseData"}], "file": "advanced/attributes/src/test/java/org/arakhne/afc/attrs/collection/AbstractAttributeProviderTest.java"}, "test_case": {"identifier": "getAttributeStringAttributeValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getAttributeStringAttributeValue() {\n\t\tAttributeValue defaultValue = new AttributeValueImpl();\n\t\tassertEquals(this.baseData[0],this.testData.getAttribute(\"A\",defaultValue));  //$NON-NLS-1$\n\t\tassertSame(defaultValue, this.testData.getAttribute(\"X\", defaultValue));  //$NON-NLS-1$\n\t\tassertEquals(this.baseData[1],this.testData.getAttribute(\"B\", defaultValue));  //$NON-NLS-1$\n\t\tassertSame(defaultValue, this.testData.getAttribute(\"Y\", defaultValue));  //$NON-NLS-1$\n\t\tassertEquals(this.baseData[2],this.testData.getAttribute(\"C\", defaultValue));  //$NON-NLS-1$\n\t\tassertSame(defaultValue, this.testData.getAttribute(\"Z\", defaultValue));  //$NON-NLS-1$\n\t\tassertEquals(this.baseData[3],this.testData.getAttribute(\"D\", defaultValue));  //$NON-NLS-1$\n\t\tassertSame(defaultValue, this.testData.getAttribute(\"W\", defaultValue));  //$NON-NLS-1$\n\t\tassertEquals(this.baseData[4],this.testData.getAttribute(\"E\", defaultValue));  //$NON-NLS-1$\n\t\tassertEquals(this.baseData[5],this.testData.getAttribute(\"F\", defaultValue));  //$NON-NLS-1$\n\t}", "signature": "void getAttributeStringAttributeValue()", "full_signature": "@Test public void getAttributeStringAttributeValue()", "class_method_signature": "AbstractAttributeProviderTest.getAttributeStringAttributeValue()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getAttribute", "assertSame", "getAttribute", "assertEquals", "getAttribute", "assertSame", "getAttribute", "assertEquals", "getAttribute", "assertSame", "getAttribute", "assertEquals", "getAttribute", "assertSame", "getAttribute", "assertEquals", "getAttribute", "assertEquals", "getAttribute"]}, "focal_class": {"identifier": "AbstractAttributeProvider", "superclass": "", "interfaces": "implements AttributeProvider, Iterable<Attribute>", "fields": [{"original_string": "private static final long serialVersionUID = 1219373996718945571L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1219373996718945571L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "protectNull", "parameters": "(Object rawAttributeValue, AttributeType type)", "modifiers": "protected static", "return": "Object", "signature": "Object protectNull(Object rawAttributeValue, AttributeType type)", "full_signature": "protected static Object protectNull(Object rawAttributeValue, AttributeType type)", "class_method_signature": "AbstractAttributeProvider.protectNull(Object rawAttributeValue, AttributeType type)", "testcase": false, "constructor": false}, {"identifier": "unprotectNull", "parameters": "(Object rawAttributeValue)", "modifiers": "protected static", "return": "Object", "signature": "Object unprotectNull(Object rawAttributeValue)", "full_signature": "protected static Object unprotectNull(Object rawAttributeValue)", "class_method_signature": "AbstractAttributeProvider.unprotectNull(Object rawAttributeValue)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Iterator<Attribute>", "signature": "Iterator<Attribute> iterator()", "full_signature": "@Pure @Override public Iterator<Attribute> iterator()", "class_method_signature": "AbstractAttributeProvider.iterator()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Pure @Override public", "return": "AttributeProvider", "signature": "AttributeProvider clone()", "full_signature": "@Pure @Override public AttributeProvider clone()", "class_method_signature": "AbstractAttributeProvider.clone()", "testcase": false, "constructor": false}, {"identifier": "attributes", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Iterable<Attribute>", "signature": "Iterable<Attribute> attributes()", "full_signature": "@Pure @Override public Iterable<Attribute> attributes()", "class_method_signature": "AbstractAttributeProvider.attributes()", "testcase": false, "constructor": false}, {"identifier": "getAttributeAsBool", "parameters": "(String name)", "modifiers": "@Pure @Override public", "return": "boolean", "signature": "boolean getAttributeAsBool(String name)", "full_signature": "@Pure @Override public boolean getAttributeAsBool(String name)", "class_method_signature": "AbstractAttributeProvider.getAttributeAsBool(String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeAsInt", "parameters": "(String name)", "modifiers": "@Pure @Override public", "return": "int", "signature": "int getAttributeAsInt(String name)", "full_signature": "@Pure @Override public int getAttributeAsInt(String name)", "class_method_signature": "AbstractAttributeProvider.getAttributeAsInt(String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeAsLong", "parameters": "(String name)", "modifiers": "@Pure @Override public", "return": "long", "signature": "long getAttributeAsLong(String name)", "full_signature": "@Pure @Override public long getAttributeAsLong(String name)", "class_method_signature": "AbstractAttributeProvider.getAttributeAsLong(String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeAsFloat", "parameters": "(String name)", "modifiers": "@Pure @Override public", "return": "float", "signature": "float getAttributeAsFloat(String name)", "full_signature": "@Pure @Override public float getAttributeAsFloat(String name)", "class_method_signature": "AbstractAttributeProvider.getAttributeAsFloat(String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeAsDouble", "parameters": "(String name)", "modifiers": "@Pure @Override public", "return": "double", "signature": "double getAttributeAsDouble(String name)", "full_signature": "@Pure @Override public double getAttributeAsDouble(String name)", "class_method_signature": "AbstractAttributeProvider.getAttributeAsDouble(String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeAsString", "parameters": "(String name)", "modifiers": "@Pure @Override public", "return": "String", "signature": "String getAttributeAsString(String name)", "full_signature": "@Pure @Override public String getAttributeAsString(String name)", "class_method_signature": "AbstractAttributeProvider.getAttributeAsString(String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeAsUUID", "parameters": "(String name)", "modifiers": "@Pure @Override public", "return": "UUID", "signature": "UUID getAttributeAsUUID(String name)", "full_signature": "@Pure @Override public UUID getAttributeAsUUID(String name)", "class_method_signature": "AbstractAttributeProvider.getAttributeAsUUID(String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeAsURL", "parameters": "(String name)", "modifiers": "@Pure @Override public", "return": "URL", "signature": "URL getAttributeAsURL(String name)", "full_signature": "@Pure @Override public URL getAttributeAsURL(String name)", "class_method_signature": "AbstractAttributeProvider.getAttributeAsURL(String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeAsURI", "parameters": "(String name)", "modifiers": "@Pure @Override public", "return": "URI", "signature": "URI getAttributeAsURI(String name)", "full_signature": "@Pure @Override public URI getAttributeAsURI(String name)", "class_method_signature": "AbstractAttributeProvider.getAttributeAsURI(String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeAsDate", "parameters": "(String name)", "modifiers": "@Pure @Override public", "return": "Date", "signature": "Date getAttributeAsDate(String name)", "full_signature": "@Pure @Override public Date getAttributeAsDate(String name)", "class_method_signature": "AbstractAttributeProvider.getAttributeAsDate(String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeAsInetAddress", "parameters": "(String name)", "modifiers": "@Pure @Override public", "return": "InetAddress", "signature": "InetAddress getAttributeAsInetAddress(String name)", "full_signature": "@Pure @Override public InetAddress getAttributeAsInetAddress(String name)", "class_method_signature": "AbstractAttributeProvider.getAttributeAsInetAddress(String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeAsEnumeration", "parameters": "(String name)", "modifiers": "@Pure @Override public", "return": "Enum<?>", "signature": "Enum<?> getAttributeAsEnumeration(String name)", "full_signature": "@Pure @Override public Enum<?> getAttributeAsEnumeration(String name)", "class_method_signature": "AbstractAttributeProvider.getAttributeAsEnumeration(String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeAsEnumeration", "parameters": "(String name, Class<T> type)", "modifiers": "@Pure @Override public", "return": "T", "signature": "T getAttributeAsEnumeration(String name, Class<T> type)", "full_signature": "@Pure @Override public T getAttributeAsEnumeration(String name, Class<T> type)", "class_method_signature": "AbstractAttributeProvider.getAttributeAsEnumeration(String name, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getAttributeAsJavaClass", "parameters": "(String name)", "modifiers": "@Pure @Override public", "return": "Class<?>", "signature": "Class<?> getAttributeAsJavaClass(String name)", "full_signature": "@Pure @Override public Class<?> getAttributeAsJavaClass(String name)", "class_method_signature": "AbstractAttributeProvider.getAttributeAsJavaClass(String name)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name, boolean defaultValue)", "modifiers": "@Pure @Override public", "return": "boolean", "signature": "boolean getAttribute(String name, boolean defaultValue)", "full_signature": "@Pure @Override public boolean getAttribute(String name, boolean defaultValue)", "class_method_signature": "AbstractAttributeProvider.getAttribute(String name, boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name, int defaultValue)", "modifiers": "@Pure @Override public", "return": "int", "signature": "int getAttribute(String name, int defaultValue)", "full_signature": "@Pure @Override public int getAttribute(String name, int defaultValue)", "class_method_signature": "AbstractAttributeProvider.getAttribute(String name, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name, long defaultValue)", "modifiers": "@Pure @Override public", "return": "long", "signature": "long getAttribute(String name, long defaultValue)", "full_signature": "@Pure @Override public long getAttribute(String name, long defaultValue)", "class_method_signature": "AbstractAttributeProvider.getAttribute(String name, long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name, float defaultValue)", "modifiers": "@Pure @Override public", "return": "float", "signature": "float getAttribute(String name, float defaultValue)", "full_signature": "@Pure @Override public float getAttribute(String name, float defaultValue)", "class_method_signature": "AbstractAttributeProvider.getAttribute(String name, float defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name, double defaultValue)", "modifiers": "@Pure @Override public", "return": "double", "signature": "double getAttribute(String name, double defaultValue)", "full_signature": "@Pure @Override public double getAttribute(String name, double defaultValue)", "class_method_signature": "AbstractAttributeProvider.getAttribute(String name, double defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name, String defaultValue)", "modifiers": "@Pure @Override public", "return": "String", "signature": "String getAttribute(String name, String defaultValue)", "full_signature": "@Pure @Override public String getAttribute(String name, String defaultValue)", "class_method_signature": "AbstractAttributeProvider.getAttribute(String name, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name, UUID defaultValue)", "modifiers": "@Pure @Override public", "return": "UUID", "signature": "UUID getAttribute(String name, UUID defaultValue)", "full_signature": "@Pure @Override public UUID getAttribute(String name, UUID defaultValue)", "class_method_signature": "AbstractAttributeProvider.getAttribute(String name, UUID defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name, URL defaultValue)", "modifiers": "@Pure @Override public", "return": "URL", "signature": "URL getAttribute(String name, URL defaultValue)", "full_signature": "@Pure @Override public URL getAttribute(String name, URL defaultValue)", "class_method_signature": "AbstractAttributeProvider.getAttribute(String name, URL defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name, URI defaultValue)", "modifiers": "@Pure @Override public", "return": "URI", "signature": "URI getAttribute(String name, URI defaultValue)", "full_signature": "@Pure @Override public URI getAttribute(String name, URI defaultValue)", "class_method_signature": "AbstractAttributeProvider.getAttribute(String name, URI defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name, Date defaultValue)", "modifiers": "@Pure @Override public", "return": "Date", "signature": "Date getAttribute(String name, Date defaultValue)", "full_signature": "@Pure @Override public Date getAttribute(String name, Date defaultValue)", "class_method_signature": "AbstractAttributeProvider.getAttribute(String name, Date defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name, InetAddress defaultValue)", "modifiers": "@Pure @Override public", "return": "InetAddress", "signature": "InetAddress getAttribute(String name, InetAddress defaultValue)", "full_signature": "@Pure @Override public InetAddress getAttribute(String name, InetAddress defaultValue)", "class_method_signature": "AbstractAttributeProvider.getAttribute(String name, InetAddress defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name, InetSocketAddress defaultValue)", "modifiers": "@Pure @Override public", "return": "InetAddress", "signature": "InetAddress getAttribute(String name, InetSocketAddress defaultValue)", "full_signature": "@Pure @Override public InetAddress getAttribute(String name, InetSocketAddress defaultValue)", "class_method_signature": "AbstractAttributeProvider.getAttribute(String name, InetSocketAddress defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name, T defaultValue)", "modifiers": "@Pure @Override @SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T getAttribute(String name, T defaultValue)", "full_signature": "@Pure @Override @SuppressWarnings(\"unchecked\") public T getAttribute(String name, T defaultValue)", "class_method_signature": "AbstractAttributeProvider.getAttribute(String name, T defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name, Class<?> defaultValue)", "modifiers": "@Pure @Override public", "return": "Class<?>", "signature": "Class<?> getAttribute(String name, Class<?> defaultValue)", "full_signature": "@Pure @Override public Class<?> getAttribute(String name, Class<?> defaultValue)", "class_method_signature": "AbstractAttributeProvider.getAttribute(String name, Class<?> defaultValue)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String toString()", "full_signature": "@Override public final String toString()", "class_method_signature": "AbstractAttributeProvider.toString()", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(JsonBuffer buffer)", "modifiers": "@Override public", "return": "void", "signature": "void toJson(JsonBuffer buffer)", "full_signature": "@Override public void toJson(JsonBuffer buffer)", "class_method_signature": "AbstractAttributeProvider.toJson(JsonBuffer buffer)", "testcase": false, "constructor": false}], "file": "advanced/attributes/src/main/java/org/arakhne/afc/attrs/collection/AbstractAttributeProvider.java"}, "focal_method": {"identifier": "getAttribute", "parameters": "(String name, boolean defaultValue)", "modifiers": "@Pure @Override public", "return": "boolean", "body": "@Pure\n\t@Override\n\tpublic boolean getAttribute(String name, boolean defaultValue) {\n\t\tfinal AttributeValue value = getAttribute(name);\n\t\tif (value != null) {\n\t\t\ttry {\n\t\t\t\treturn value.getBoolean();\n\t\t\t} catch (AttributeException exception) {\n\t\t\t\t//\n\t\t\t}\n\t\t}\n\t\treturn defaultValue;\n\t}", "signature": "boolean getAttribute(String name, boolean defaultValue)", "full_signature": "@Pure @Override public boolean getAttribute(String name, boolean defaultValue)", "class_method_signature": "AbstractAttributeProvider.getAttribute(String name, boolean defaultValue)", "testcase": false, "constructor": false, "invocations": ["getAttribute", "getBoolean"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}