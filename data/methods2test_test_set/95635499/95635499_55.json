{"test_class": {"identifier": "HOMERNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static HOMERNode node;", "modifier": "private static", "type": "HOMERNode", "declarator": "node", "var_name": "node"}], "file": "JAICore/jaicore-ml-meka/src/test/java/ai/libs/jaicore/ml/classification/multilabel/learner/homer/HOMERNodeTest.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testToString() {\n\t\tassertEquals(\"toString is not giving the correct result.\", \"J48(J48(1,2),5,7)\", node.toString());\n\t}", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "HOMERNodeTest.testToString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString"]}, "focal_class": {"identifier": "HOMERNode", "superclass": "extends AbstractMultiLabelClassifier", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -2634579245812714183L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2634579245812714183L", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HOMERNode.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HOMERNode.class)", "var_name": "LOGGER"}, {"original_string": "private static final boolean HIERARCHICAL_STRING = false;", "modifier": "private static final", "type": "boolean", "declarator": "HIERARCHICAL_STRING = false", "var_name": "HIERARCHICAL_STRING"}, {"original_string": "private static final double THRESHOLD = 0.5;", "modifier": "private static final", "type": "double", "declarator": "THRESHOLD = 0.5", "var_name": "THRESHOLD"}, {"original_string": "private List<HOMERNode> children;", "modifier": "private", "type": "List<HOMERNode>", "declarator": "children", "var_name": "children"}, {"original_string": "private MultiLabelClassifier baselearner;", "modifier": "private", "type": "MultiLabelClassifier", "declarator": "baselearner", "var_name": "baselearner"}, {"original_string": "private String baselearnerName;", "modifier": "private", "type": "String", "declarator": "baselearnerName", "var_name": "baselearnerName"}, {"original_string": "private boolean doThreshold = false;", "modifier": "private", "type": "boolean", "declarator": "doThreshold = false", "var_name": "doThreshold"}], "methods": [{"identifier": "HOMERNode", "parameters": "(final HOMERNode... nodes)", "modifiers": "public", "return": "", "signature": " HOMERNode(final HOMERNode... nodes)", "full_signature": "public  HOMERNode(final HOMERNode... nodes)", "class_method_signature": "HOMERNode.HOMERNode(final HOMERNode... nodes)", "testcase": false, "constructor": true}, {"identifier": "HOMERNode", "parameters": "(final List<HOMERNode> nodes)", "modifiers": "public", "return": "", "signature": " HOMERNode(final List<HOMERNode> nodes)", "full_signature": "public  HOMERNode(final List<HOMERNode> nodes)", "class_method_signature": "HOMERNode.HOMERNode(final List<HOMERNode> nodes)", "testcase": false, "constructor": true}, {"identifier": "setThreshold", "parameters": "(final boolean doThreshold)", "modifiers": "public", "return": "void", "signature": "void setThreshold(final boolean doThreshold)", "full_signature": "public void setThreshold(final boolean doThreshold)", "class_method_signature": "HOMERNode.setThreshold(final boolean doThreshold)", "testcase": false, "constructor": false}, {"identifier": "setBaselearner", "parameters": "(final MultiLabelClassifier baselearner)", "modifiers": "public", "return": "void", "signature": "void setBaselearner(final MultiLabelClassifier baselearner)", "full_signature": "public void setBaselearner(final MultiLabelClassifier baselearner)", "class_method_signature": "HOMERNode.setBaselearner(final MultiLabelClassifier baselearner)", "testcase": false, "constructor": false}, {"identifier": "getBaselearnerName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBaselearnerName()", "full_signature": "public String getBaselearnerName()", "class_method_signature": "HOMERNode.getBaselearnerName()", "testcase": false, "constructor": false}, {"identifier": "setBaselearnerName", "parameters": "(final String baselearnerName)", "modifiers": "public", "return": "void", "signature": "void setBaselearnerName(final String baselearnerName)", "full_signature": "public void setBaselearnerName(final String baselearnerName)", "class_method_signature": "HOMERNode.setBaselearnerName(final String baselearnerName)", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "public", "return": "List<HOMERNode>", "signature": "List<HOMERNode> getChildren()", "full_signature": "public List<HOMERNode> getChildren()", "class_method_signature": "HOMERNode.getChildren()", "testcase": false, "constructor": false}, {"identifier": "getLabels", "parameters": "()", "modifiers": "public", "return": "Collection<Integer>", "signature": "Collection<Integer> getLabels()", "full_signature": "public Collection<Integer> getLabels()", "class_method_signature": "HOMERNode.getLabels()", "testcase": false, "constructor": false}, {"identifier": "buildClassifier", "parameters": "(final Instances trainingSet)", "modifiers": "@Override public", "return": "void", "signature": "void buildClassifier(final Instances trainingSet)", "full_signature": "@Override public void buildClassifier(final Instances trainingSet)", "class_method_signature": "HOMERNode.buildClassifier(final Instances trainingSet)", "testcase": false, "constructor": false}, {"identifier": "distributionForInstance", "parameters": "(final Instance testInstance)", "modifiers": "@Override public", "return": "double[]", "signature": "double[] distributionForInstance(final Instance testInstance)", "full_signature": "@Override public double[] distributionForInstance(final Instance testInstance)", "class_method_signature": "HOMERNode.distributionForInstance(final Instance testInstance)", "testcase": false, "constructor": false}, {"identifier": "prepareInstances", "parameters": "(final Instances dataset)", "modifiers": "public", "return": "Instances", "signature": "Instances prepareInstances(final Instances dataset)", "full_signature": "public Instances prepareInstances(final Instances dataset)", "class_method_signature": "HOMERNode.prepareInstances(final Instances dataset)", "testcase": false, "constructor": false}, {"identifier": "isLeaf", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLeaf()", "full_signature": "public boolean isLeaf()", "class_method_signature": "HOMERNode.isLeaf()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HOMERNode.toString()", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-ml-meka/src/main/java/ai/libs/jaicore/ml/classification/multilabel/learner/homer/HOMERNode.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String toString() {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tif (!HIERARCHICAL_STRING) {\n\t\t\tString actualBaselearnerName = this.baselearner.getOptions()[1];\n\t\t\tsb.append(actualBaselearnerName.substring(actualBaselearnerName.lastIndexOf('.') + 1, actualBaselearnerName.length()));\n\t\t\tsb.append(\"(\");\n\t\t\tsb.append(this.children.stream().map(HOMERNode::toString).collect(Collectors.joining(\",\")));\n\t\t\tsb.append(\")\");\n\t\t}\n\t\treturn sb.toString();\n\t}", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HOMERNode.toString()", "testcase": false, "constructor": false, "invocations": ["getOptions", "append", "substring", "lastIndexOf", "length", "append", "append", "collect", "map", "stream", "joining", "append", "toString"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}