{"test_class": {"identifier": "ETCFork3MTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/config/blockchain/ETCFork3MTest.java"}, "test_case": {"identifier": "testEcip1010ExplosionChanges", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEcip1010ExplosionChanges() throws Exception {\n        ETCFork3M etcFork3M = new ETCFork3M(new TestBlockchainConfig());\n\n        /*\n         * Technically, a block number < 3_000_000 should result in an explosion < fixed_diff, or explosion < 28\n         *\n         * Block number 3_000_000 occurred on Jan 15, 2017. The ETCFork3M configuration was committed a day after. It\n         * is therefor not necessary to have block.number < pause_block be implemented\n         */\n        BlockHeader beforePauseBlock = new BlockHeaderBuilder(new byte[]{11, 12}, 2_500_000, 0).build();\n        int unimplementedPrePauseBlockExplosion = 28;\n        assertEquals(unimplementedPrePauseBlockExplosion, etcFork3M.getExplosion(beforePauseBlock, null));\n\n        BlockHeader endOfIceAge = new BlockHeaderBuilder(new byte[]{11, 12}, 5_000_000, 0).build();\n        assertEquals(28, etcFork3M.getExplosion(endOfIceAge, null));\n\n        BlockHeader startExplodingBlock = new BlockHeaderBuilder(new byte[]{11, 12}, 5_200_000, 0).build();\n        assertEquals(30, etcFork3M.getExplosion(startExplodingBlock, null));\n\n        startExplodingBlock = new BlockHeaderBuilder(new byte[]{11, 12}, 6_000_000, 0).build();\n        assertEquals(38, etcFork3M.getExplosion(startExplodingBlock, null));\n    }", "signature": "void testEcip1010ExplosionChanges()", "full_signature": "@Test public void testEcip1010ExplosionChanges()", "class_method_signature": "ETCFork3MTest.testEcip1010ExplosionChanges()", "testcase": true, "constructor": false, "invocations": ["build", "assertEquals", "getExplosion", "build", "assertEquals", "getExplosion", "build", "assertEquals", "getExplosion", "build", "assertEquals", "getExplosion"]}, "focal_class": {"identifier": "ETCFork3M", "superclass": "extends Eip160HFConfig", "interfaces": "", "fields": [], "methods": [{"identifier": "ETCFork3M", "parameters": "(BlockchainConfig parent)", "modifiers": "public", "return": "", "signature": " ETCFork3M(BlockchainConfig parent)", "full_signature": "public  ETCFork3M(BlockchainConfig parent)", "class_method_signature": "ETCFork3M.ETCFork3M(BlockchainConfig parent)", "testcase": false, "constructor": true}, {"identifier": "getChainId", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getChainId()", "full_signature": "@Override public Integer getChainId()", "class_method_signature": "ETCFork3M.getChainId()", "testcase": false, "constructor": false}, {"identifier": "eip161", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean eip161()", "full_signature": "@Override public boolean eip161()", "class_method_signature": "ETCFork3M.eip161()", "testcase": false, "constructor": false}, {"identifier": "calcDifficulty", "parameters": "(BlockHeader curBlock, BlockHeader parent)", "modifiers": "@Override public", "return": "BigInteger", "signature": "BigInteger calcDifficulty(BlockHeader curBlock, BlockHeader parent)", "full_signature": "@Override public BigInteger calcDifficulty(BlockHeader curBlock, BlockHeader parent)", "class_method_signature": "ETCFork3M.calcDifficulty(BlockHeader curBlock, BlockHeader parent)", "testcase": false, "constructor": false}, {"identifier": "getCalcDifficultyMultiplier", "parameters": "(BlockHeader curBlock, BlockHeader parent)", "modifiers": "@Override public", "return": "BigInteger", "signature": "BigInteger getCalcDifficultyMultiplier(BlockHeader curBlock, BlockHeader parent)", "full_signature": "@Override public BigInteger getCalcDifficultyMultiplier(BlockHeader curBlock, BlockHeader parent)", "class_method_signature": "ETCFork3M.getCalcDifficultyMultiplier(BlockHeader curBlock, BlockHeader parent)", "testcase": false, "constructor": false}, {"identifier": "getExplosion", "parameters": "(BlockHeader curBlock, BlockHeader parent)", "modifiers": "protected", "return": "int", "signature": "int getExplosion(BlockHeader curBlock, BlockHeader parent)", "full_signature": "protected int getExplosion(BlockHeader curBlock, BlockHeader parent)", "class_method_signature": "ETCFork3M.getExplosion(BlockHeader curBlock, BlockHeader parent)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/config/blockchain/ETCFork3M.java"}, "focal_method": {"identifier": "getExplosion", "parameters": "(BlockHeader curBlock, BlockHeader parent)", "modifiers": "protected", "return": "int", "body": "protected int getExplosion(BlockHeader curBlock, BlockHeader parent) {\n        int pauseBlock = 3000000;\n        int contBlock = 5000000;\n        int delay = (contBlock - pauseBlock) / 100000;\n        int fixedDiff = (pauseBlock / 100000) - 2;\n\n        if (curBlock.getNumber() < contBlock) {\n            return fixedDiff;\n        } else {\n            return (int) ((curBlock.getNumber() / 100000) - delay - 2);\n        }\n    }", "signature": "int getExplosion(BlockHeader curBlock, BlockHeader parent)", "full_signature": "protected int getExplosion(BlockHeader curBlock, BlockHeader parent)", "class_method_signature": "ETCFork3M.getExplosion(BlockHeader curBlock, BlockHeader parent)", "testcase": false, "constructor": false, "invocations": ["getNumber", "getNumber"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}