{"test_class": {"identifier": "DubboMonitorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Invoker<MonitorService> monitorInvoker = new Invoker<MonitorService>() {\n        @Override\n        public Class<MonitorService> getInterface() {\n            return MonitorService.class;\n        }\n\n        public URL getUrl() {\n            return URL.valueOf(\"dubbo://127.0.0.1:7070?interval=1000\");\n        }\n\n        @Override\n        public boolean isAvailable() {\n            return false;\n        }\n\n        @Override\n        public Result invoke(Invocation invocation) throws RpcException {\n            return null;\n        }\n\n        @Override\n        public void destroy() {\n        }\n    };", "modifier": "private final", "type": "Invoker<MonitorService>", "declarator": "monitorInvoker = new Invoker<MonitorService>() {\n        @Override\n        public Class<MonitorService> getInterface() {\n            return MonitorService.class;\n        }\n\n        public URL getUrl() {\n            return URL.valueOf(\"dubbo://127.0.0.1:7070?interval=1000\");\n        }\n\n        @Override\n        public boolean isAvailable() {\n            return false;\n        }\n\n        @Override\n        public Result invoke(Invocation invocation) throws RpcException {\n            return null;\n        }\n\n        @Override\n        public void destroy() {\n        }\n    }", "var_name": "monitorInvoker"}, {"original_string": "private volatile URL lastStatistics;", "modifier": "private volatile", "type": "URL", "declarator": "lastStatistics", "var_name": "lastStatistics"}, {"original_string": "private final MonitorService monitorService = new MonitorService() {\n\n        public void collect(URL statistics) {\n            DubboMonitorTest.this.lastStatistics = statistics;\n        }\n\n        public List<URL> lookup(URL query) {\n            return Arrays.asList(DubboMonitorTest.this.lastStatistics);\n        }\n\n    };", "modifier": "private final", "type": "MonitorService", "declarator": "monitorService = new MonitorService() {\n\n        public void collect(URL statistics) {\n            DubboMonitorTest.this.lastStatistics = statistics;\n        }\n\n        public List<URL> lookup(URL query) {\n            return Arrays.asList(DubboMonitorTest.this.lastStatistics);\n        }\n\n    }", "var_name": "monitorService"}], "file": "dubbo-monitor/dubbo-monitor-default/src/test/java/org/apache/dubbo/monitor/dubbo/DubboMonitorTest.java"}, "test_case": {"identifier": "testLookUp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLookUp() {\n        Invoker invoker = mock(Invoker.class);\n        MonitorService monitorService = mock(MonitorService.class);\n\n        URL queryUrl = URL.valueOf(\"dubbo://127.0.0.1:7070?interval=20\");\n        given(invoker.getUrl()).willReturn(queryUrl);\n        DubboMonitor dubboMonitor = new DubboMonitor(invoker, monitorService);\n\n        dubboMonitor.lookup(queryUrl);\n\n        verify(monitorService).lookup(eq(queryUrl));\n    }", "signature": "void testLookUp()", "full_signature": "@Test public void testLookUp()", "class_method_signature": "DubboMonitorTest.testLookUp()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "valueOf", "willReturn", "given", "getUrl", "lookup", "lookup", "verify", "eq"]}, "focal_class": {"identifier": "DubboMonitor", "superclass": "", "interfaces": "implements Monitor", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DubboMonitor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DubboMonitor.class)", "var_name": "logger"}, {"original_string": "private static final int LENGTH = 10;", "modifier": "private static final", "type": "int", "declarator": "LENGTH = 10", "var_name": "LENGTH"}, {"original_string": "private final ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(3, new NamedThreadFactory(\"DubboMonitorSendTimer\", true));", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "scheduledExecutorService = Executors.newScheduledThreadPool(3, new NamedThreadFactory(\"DubboMonitorSendTimer\", true))", "var_name": "scheduledExecutorService"}, {"original_string": "private final ScheduledFuture<?> sendFuture;", "modifier": "private final", "type": "ScheduledFuture<?>", "declarator": "sendFuture", "var_name": "sendFuture"}, {"original_string": "private final Invoker<MonitorService> monitorInvoker;", "modifier": "private final", "type": "Invoker<MonitorService>", "declarator": "monitorInvoker", "var_name": "monitorInvoker"}, {"original_string": "private final MonitorService monitorService;", "modifier": "private final", "type": "MonitorService", "declarator": "monitorService", "var_name": "monitorService"}, {"original_string": "private final ConcurrentMap<Statistics, AtomicReference<long[]>> statisticsMap = new ConcurrentHashMap<Statistics, AtomicReference<long[]>>();", "modifier": "private final", "type": "ConcurrentMap<Statistics, AtomicReference<long[]>>", "declarator": "statisticsMap = new ConcurrentHashMap<Statistics, AtomicReference<long[]>>()", "var_name": "statisticsMap"}], "methods": [{"identifier": "DubboMonitor", "parameters": "(Invoker<MonitorService> monitorInvoker, MonitorService monitorService)", "modifiers": "public", "return": "", "signature": " DubboMonitor(Invoker<MonitorService> monitorInvoker, MonitorService monitorService)", "full_signature": "public  DubboMonitor(Invoker<MonitorService> monitorInvoker, MonitorService monitorService)", "class_method_signature": "DubboMonitor.DubboMonitor(Invoker<MonitorService> monitorInvoker, MonitorService monitorService)", "testcase": false, "constructor": true}, {"identifier": "send", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void send()", "full_signature": "public void send()", "class_method_signature": "DubboMonitor.send()", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void collect(URL url)", "full_signature": "@Override public void collect(URL url)", "class_method_signature": "DubboMonitor.collect(URL url)", "testcase": false, "constructor": false}, {"identifier": "lookup", "parameters": "(URL query)", "modifiers": "@Override public", "return": "List<URL>", "signature": "List<URL> lookup(URL query)", "full_signature": "@Override public List<URL> lookup(URL query)", "class_method_signature": "DubboMonitor.lookup(URL query)", "testcase": false, "constructor": false}, {"identifier": "getUrl", "parameters": "()", "modifiers": "@Override public", "return": "URL", "signature": "URL getUrl()", "full_signature": "@Override public URL getUrl()", "class_method_signature": "DubboMonitor.getUrl()", "testcase": false, "constructor": false}, {"identifier": "isAvailable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAvailable()", "full_signature": "@Override public boolean isAvailable()", "class_method_signature": "DubboMonitor.isAvailable()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "DubboMonitor.destroy()", "testcase": false, "constructor": false}], "file": "dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/DubboMonitor.java"}, "focal_method": {"identifier": "lookup", "parameters": "(URL query)", "modifiers": "@Override public", "return": "List<URL>", "body": "@Override\n    public List<URL> lookup(URL query) {\n        return monitorService.lookup(query);\n    }", "signature": "List<URL> lookup(URL query)", "full_signature": "@Override public List<URL> lookup(URL query)", "class_method_signature": "DubboMonitor.lookup(URL query)", "testcase": false, "constructor": false, "invocations": ["lookup"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}