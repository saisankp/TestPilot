{"test_class": {"identifier": "AppPropertiesTest", "superclass": "", "interfaces": "", "fields": [], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/configuration/AppPropertiesTest.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToString() throws NoSuchFieldException, IllegalAccessException {\n        final String expectedSecret = \"MySuperSecretKey\";\n\n        // Create app Properties instance\n        final AppProperties appProperties = new AppProperties();\n\n        // Jump through hoops to set property\n        final Field field = appProperties.getClass().getDeclaredField(\"appKey\");\n        field.setAccessible(true);\n        field.set(appProperties, expectedSecret);\n\n        final String result = appProperties.toString();\n        assertFalse(\"Should not contain our sensitive field\", result.contains(expectedSecret));\n    }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "AppPropertiesTest.testToString()", "testcase": true, "constructor": false, "invocations": ["getDeclaredField", "getClass", "setAccessible", "set", "toString", "assertFalse", "contains"]}, "focal_class": {"identifier": "AppProperties", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Value(\"${app.name}\")\n    private String name;", "modifier": "@Value(\"${app.name}\")\n    private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "@Value(\"${app.uploadPath}\")\n    private String uploadPath;", "modifier": "@Value(\"${app.uploadPath}\")\n    private", "type": "String", "declarator": "uploadPath", "var_name": "uploadPath"}, {"original_string": "@Value(\"${app.key}\")\n    private String appKey;", "modifier": "@Value(\"${app.key}\")\n    private", "type": "String", "declarator": "appKey", "var_name": "appKey"}, {"original_string": "@Value(\"${app.multiThreadedConsumer:true}\")\n    private boolean enableMultiThreadedConsumer;", "modifier": "@Value(\"${app.multiThreadedConsumer:true}\")\n    private", "type": "boolean", "declarator": "enableMultiThreadedConsumer", "var_name": "enableMultiThreadedConsumer"}, {"original_string": "@Value(\"${app.maxConcurrentWebConsumers:32}\")\n    private Integer maxConcurrentWebConsumers = 32;", "modifier": "@Value(\"${app.maxConcurrentWebConsumers:32}\")\n    private", "type": "Integer", "declarator": "maxConcurrentWebConsumers = 32", "var_name": "maxConcurrentWebConsumers"}, {"original_string": "@Value(\"${app.maxConcurrentWebSocketConsumers:100}\")\n    private Integer maxConcurrentWebSocketConsumers = 100;", "modifier": "@Value(\"${app.maxConcurrentWebSocketConsumers:100}\")\n    private", "type": "Integer", "declarator": "maxConcurrentWebSocketConsumers = 100", "var_name": "maxConcurrentWebSocketConsumers"}, {"original_string": "@Value(\"${app.consumerIdPrefix}\")\n    private String consumerIdPrefix;", "modifier": "@Value(\"${app.consumerIdPrefix}\")\n    private", "type": "String", "declarator": "consumerIdPrefix", "var_name": "consumerIdPrefix"}, {"original_string": "@Value(\"${app.requireSsl:false}\")\n    private boolean requireSsl = false;", "modifier": "@Value(\"${app.requireSsl:false}\")\n    private", "type": "boolean", "declarator": "requireSsl = false", "var_name": "requireSsl"}, {"original_string": "@Value(\"${app.avro.includeSchema:true}\")\n    private boolean avroIncludeSchema = true;", "modifier": "@Value(\"${app.avro.includeSchema:true}\")\n    private", "type": "boolean", "declarator": "avroIncludeSchema = true", "var_name": "avroIncludeSchema"}, {"original_string": "@Value(\"${app.user.enabled:true}\")\n    private boolean userAuthEnabled = true;", "modifier": "@Value(\"${app.user.enabled:true}\")\n    private", "type": "boolean", "declarator": "userAuthEnabled = true", "var_name": "userAuthEnabled"}, {"original_string": "@Autowired\n    private LdapAppProperties ldapProperties;", "modifier": "@Autowired\n    private", "type": "LdapAppProperties", "declarator": "ldapProperties", "var_name": "ldapProperties"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "AppProperties.getName()", "testcase": false, "constructor": false}, {"identifier": "getUploadPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUploadPath()", "full_signature": "public String getUploadPath()", "class_method_signature": "AppProperties.getUploadPath()", "testcase": false, "constructor": false}, {"identifier": "getAppKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAppKey()", "full_signature": "public String getAppKey()", "class_method_signature": "AppProperties.getAppKey()", "testcase": false, "constructor": false}, {"identifier": "getMaxConcurrentWebSocketConsumers", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getMaxConcurrentWebSocketConsumers()", "full_signature": "public Integer getMaxConcurrentWebSocketConsumers()", "class_method_signature": "AppProperties.getMaxConcurrentWebSocketConsumers()", "testcase": false, "constructor": false}, {"identifier": "getConsumerIdPrefix", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getConsumerIdPrefix()", "full_signature": "public String getConsumerIdPrefix()", "class_method_signature": "AppProperties.getConsumerIdPrefix()", "testcase": false, "constructor": false}, {"identifier": "isRequireSsl", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRequireSsl()", "full_signature": "public boolean isRequireSsl()", "class_method_signature": "AppProperties.isRequireSsl()", "testcase": false, "constructor": false}, {"identifier": "isUserAuthEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUserAuthEnabled()", "full_signature": "public boolean isUserAuthEnabled()", "class_method_signature": "AppProperties.isUserAuthEnabled()", "testcase": false, "constructor": false}, {"identifier": "getLdapProperties", "parameters": "()", "modifiers": "public", "return": "LdapAppProperties", "signature": "LdapAppProperties getLdapProperties()", "full_signature": "public LdapAppProperties getLdapProperties()", "class_method_signature": "AppProperties.getLdapProperties()", "testcase": false, "constructor": false}, {"identifier": "isAvroIncludeSchema", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAvroIncludeSchema()", "full_signature": "public boolean isAvroIncludeSchema()", "class_method_signature": "AppProperties.isAvroIncludeSchema()", "testcase": false, "constructor": false}, {"identifier": "isEnableMultiThreadedConsumer", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEnableMultiThreadedConsumer()", "full_signature": "public boolean isEnableMultiThreadedConsumer()", "class_method_signature": "AppProperties.isEnableMultiThreadedConsumer()", "testcase": false, "constructor": false}, {"identifier": "getMaxConcurrentWebConsumers", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getMaxConcurrentWebConsumers()", "full_signature": "public Integer getMaxConcurrentWebConsumers()", "class_method_signature": "AppProperties.getMaxConcurrentWebConsumers()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AppProperties.toString()", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/configuration/AppProperties.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toString() {\n        return \"AppProperties{\"\n            + \"name='\" + name + '\\''\n            + \", uploadPath='\" + uploadPath + '\\''\n            + \", appKey='XXXXXX'\"\n            + \", maxConcurrentWebSocketConsumers=\" + maxConcurrentWebSocketConsumers\n            + \", consumerIdPrefix='\" + consumerIdPrefix + '\\''\n            + \", requireSsl='\" + requireSsl + '\\''\n            + \", userAuthEnabled='\" + userAuthEnabled + '\\''\n            + '}';\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AppProperties.toString()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}