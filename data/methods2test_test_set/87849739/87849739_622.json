{"test_class": {"identifier": "StreamAckTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String KNOWN_ELEMENT_ID = \"knownElementId\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_ELEMENT_ID = \"knownElementId\"", "var_name": "KNOWN_ELEMENT_ID"}], "file": "services/utils/akka/src/test/java/org/eclipse/ditto/services/utils/akka/streaming/StreamAckTest.java"}, "test_case": {"identifier": "toJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toJson() {\n        final StreamAck original = StreamAck.success(KNOWN_ELEMENT_ID);\n        final JsonValue serialized = original.toJson();\n        final StreamAck deserialized = StreamAck.fromJson(JsonFactory.newObject(serialized.toString()));\n        assertThat(deserialized)\n                .isEqualTo(original);\n    }", "signature": "void toJson()", "full_signature": "@Test public void toJson()", "class_method_signature": "StreamAckTest.toJson()", "testcase": true, "constructor": false, "invocations": ["success", "toJson", "fromJson", "newObject", "toString", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "StreamAck", "superclass": "", "interfaces": "implements Jsonifiable", "fields": [{"original_string": "private final String elementId;", "modifier": "private final", "type": "String", "declarator": "elementId", "var_name": "elementId"}, {"original_string": "private final Status status;", "modifier": "private final", "type": "Status", "declarator": "status", "var_name": "status"}], "methods": [{"identifier": "StreamAck", "parameters": "(final String elementId, final Status status)", "modifiers": "private", "return": "", "signature": " StreamAck(final String elementId, final Status status)", "full_signature": "private  StreamAck(final String elementId, final Status status)", "class_method_signature": "StreamAck.StreamAck(final String elementId, final Status status)", "testcase": false, "constructor": true}, {"identifier": "getElementId", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getElementId()", "full_signature": " String getElementId()", "class_method_signature": "StreamAck.getElementId()", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "()", "modifiers": "", "return": "Status", "signature": "Status getStatus()", "full_signature": " Status getStatus()", "class_method_signature": "StreamAck.getStatus()", "testcase": false, "constructor": false}, {"identifier": "success", "parameters": "(final String elementId)", "modifiers": "public static", "return": "StreamAck", "signature": "StreamAck success(final String elementId)", "full_signature": "public static StreamAck success(final String elementId)", "class_method_signature": "StreamAck.success(final String elementId)", "testcase": false, "constructor": false}, {"identifier": "failure", "parameters": "(final String elementId)", "modifiers": "public static", "return": "StreamAck", "signature": "StreamAck failure(final String elementId)", "full_signature": "public static StreamAck failure(final String elementId)", "class_method_signature": "StreamAck.failure(final String elementId)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final String elementId, final Status status)", "modifiers": "private static", "return": "StreamAck", "signature": "StreamAck of(final String elementId, final Status status)", "full_signature": "private static StreamAck of(final String elementId, final Status status)", "class_method_signature": "StreamAck.of(final String elementId, final Status status)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "()", "modifiers": "@Override public", "return": "JsonValue", "signature": "JsonValue toJson()", "full_signature": "@Override public JsonValue toJson()", "class_method_signature": "StreamAck.toJson()", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final JsonObject jsonObject)", "modifiers": "public static", "return": "StreamAck", "signature": "StreamAck fromJson(final JsonObject jsonObject)", "full_signature": "public static StreamAck fromJson(final JsonObject jsonObject)", "class_method_signature": "StreamAck.fromJson(final JsonObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "StreamAck.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "StreamAck.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StreamAck.toString()", "testcase": false, "constructor": false}], "file": "services/utils/akka/src/main/java/org/eclipse/ditto/services/utils/akka/streaming/StreamAck.java"}, "focal_method": {"identifier": "toJson", "parameters": "()", "modifiers": "@Override public", "return": "JsonValue", "body": "@Override\n    public JsonValue toJson() {\n        return JsonFactory.newObjectBuilder()\n                .set(JsonFields.ELEMENT_ID, elementId)\n                .set(JsonFields.STATUS, status.name())\n                .build();\n    }", "signature": "JsonValue toJson()", "full_signature": "@Override public JsonValue toJson()", "class_method_signature": "StreamAck.toJson()", "testcase": false, "constructor": false, "invocations": ["build", "set", "set", "newObjectBuilder", "name"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}