{"test_class": {"identifier": "CachedResponseTranscoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "memcached/src/test/java/com/bazaarvoice/dropwizard/caching/memcached/CachedResponseTranscoderTest.java"}, "test_case": {"identifier": "decode", "parameters": "(CachedResponse response, byte[] encoded)", "modifiers": "@Test(dataProvider = \"encodeData\") public", "return": "void", "body": "@Test(dataProvider = \"encodeData\")\n    public void decode(CachedResponse response, byte[] encoded) {\n        CachedResponse decoded = CachedResponseTranscoder.INSTANCE.decode(new CachedData(0, encoded, CachedResponseTranscoder.INSTANCE.getMaxSize()));\n        assertEquals(decoded, response);\n    }", "signature": "void decode(CachedResponse response, byte[] encoded)", "full_signature": "@Test(dataProvider = \"encodeData\") public void decode(CachedResponse response, byte[] encoded)", "class_method_signature": "CachedResponseTranscoderTest.decode(CachedResponse response, byte[] encoded)", "testcase": true, "constructor": false, "invocations": ["decode", "getMaxSize", "assertEquals"]}, "focal_class": {"identifier": "CachedResponseTranscoder", "superclass": "", "interfaces": "implements Transcoder<CachedResponse>", "fields": [{"original_string": "private static final byte[] HEADER_SEPARATOR = new byte[]{'\\r', '\\n', '\\r', '\\n'};", "modifier": "private static final", "type": "byte[]", "declarator": "HEADER_SEPARATOR = new byte[]{'\\r', '\\n', '\\r', '\\n'}", "var_name": "HEADER_SEPARATOR"}, {"original_string": "private static final Splitter STATUS_SPLITTER = Splitter.on(' ').trimResults();", "modifier": "private static final", "type": "Splitter", "declarator": "STATUS_SPLITTER = Splitter.on(' ').trimResults()", "var_name": "STATUS_SPLITTER"}, {"original_string": "private static final Splitter HEADER_SPLITTER = Splitter.on(':').trimResults().limit(2);", "modifier": "private static final", "type": "Splitter", "declarator": "HEADER_SPLITTER = Splitter.on(':').trimResults().limit(2)", "var_name": "HEADER_SPLITTER"}, {"original_string": "public static final CachedResponseTranscoder INSTANCE = new CachedResponseTranscoder();", "modifier": "public static final", "type": "CachedResponseTranscoder", "declarator": "INSTANCE = new CachedResponseTranscoder()", "var_name": "INSTANCE"}], "methods": [{"identifier": "CachedResponseTranscoder", "parameters": "()", "modifiers": "private", "return": "", "signature": " CachedResponseTranscoder()", "full_signature": "private  CachedResponseTranscoder()", "class_method_signature": "CachedResponseTranscoder.CachedResponseTranscoder()", "testcase": false, "constructor": true}, {"identifier": "asyncDecode", "parameters": "(CachedData d)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean asyncDecode(CachedData d)", "full_signature": "@Override public boolean asyncDecode(CachedData d)", "class_method_signature": "CachedResponseTranscoder.asyncDecode(CachedData d)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(CachedResponse o)", "modifiers": "@Override public", "return": "CachedData", "signature": "CachedData encode(CachedResponse o)", "full_signature": "@Override public CachedData encode(CachedResponse o)", "class_method_signature": "CachedResponseTranscoder.encode(CachedResponse o)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(CachedData d)", "modifiers": "@Override public", "return": "CachedResponse", "signature": "CachedResponse decode(CachedData d)", "full_signature": "@Override public CachedResponse decode(CachedData d)", "class_method_signature": "CachedResponseTranscoder.decode(CachedData d)", "testcase": false, "constructor": false}, {"identifier": "getMaxSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxSize()", "full_signature": "@Override public int getMaxSize()", "class_method_signature": "CachedResponseTranscoder.getMaxSize()", "testcase": false, "constructor": false}, {"identifier": "readHeaders", "parameters": "(BufferedReader reader)", "modifiers": "private static", "return": "MultivaluedMap<String, String>", "signature": "MultivaluedMap<String, String> readHeaders(BufferedReader reader)", "full_signature": "private static MultivaluedMap<String, String> readHeaders(BufferedReader reader)", "class_method_signature": "CachedResponseTranscoder.readHeaders(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "readStatusCode", "parameters": "(BufferedReader reader)", "modifiers": "private static", "return": "int", "signature": "int readStatusCode(BufferedReader reader)", "full_signature": "private static int readStatusCode(BufferedReader reader)", "class_method_signature": "CachedResponseTranscoder.readStatusCode(BufferedReader reader)", "testcase": false, "constructor": false}], "file": "memcached/src/main/java/com/bazaarvoice/dropwizard/caching/memcached/CachedResponseTranscoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(CachedData d)", "modifiers": "@Override public", "return": "CachedResponse", "body": "@Override\n    public CachedResponse decode(CachedData d) {\n        try {\n            byte[] cachedData = d.getData();\n            int headerSeparatorIndex = Bytes.indexOf(cachedData, HEADER_SEPARATOR);\n\n            if (headerSeparatorIndex < 0) {\n                return null;\n            }\n\n            BufferedReader headerReader = new BufferedReader(new InputStreamReader(\n                    new ByteArrayInputStream(cachedData, 0, headerSeparatorIndex),\n                    Charsets.US_ASCII)\n            );\n\n            int statusCode = readStatusCode(headerReader);\n            MultivaluedMap<String, String> headers = readHeaders(headerReader);\n            byte[] responseContent = Arrays.copyOfRange(cachedData, headerSeparatorIndex + HEADER_SEPARATOR.length, cachedData.length);\n\n            return new CachedResponse(statusCode, headers, responseContent);\n        } catch (IOException ex) {\n            throw new RuntimeException(\"Corrupted cache entry\", ex);\n        }\n    }", "signature": "CachedResponse decode(CachedData d)", "full_signature": "@Override public CachedResponse decode(CachedData d)", "class_method_signature": "CachedResponseTranscoder.decode(CachedData d)", "testcase": false, "constructor": false, "invocations": ["getData", "indexOf", "readStatusCode", "readHeaders", "copyOfRange"]}, "repository": {"repo_id": 21859706, "url": "https://github.com/bazaarvoice/dropwizard-caching-bundle", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 167, "license": "licensed"}}