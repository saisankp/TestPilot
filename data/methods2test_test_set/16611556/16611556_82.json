{"test_class": {"identifier": "InvalidateAssignCacheAdviceTest", "superclass": "extends AbstractCacheTest<InvalidateAssignCacheAdvice>", "interfaces": "", "fields": [{"original_string": "private static final String NS = \"TEST_NAMESPACE\";", "modifier": "private static final", "type": "String", "declarator": "NS = \"TEST_NAMESPACE\"", "var_name": "NS"}, {"original_string": "private Object expectedValue;", "modifier": "private", "type": "Object", "declarator": "expectedValue", "var_name": "expectedValue"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/aop/InvalidateAssignCacheAdviceTest.java"}, "test_case": {"identifier": "valid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void valid() throws Throwable {\n        Assume.assumeTrue(isValid);\n\n        when(pjp.proceed()).thenReturn(expectedValue);\n\n        assertEquals(expectedValue, advice.cacheInvalidateAssign(pjp));\n\n        verify(cache).delete(cacheKey);\n        verify(pjp).proceed();\n    }", "signature": "void valid()", "full_signature": "@Test public void valid()", "class_method_signature": "InvalidateAssignCacheAdviceTest.valid()", "testcase": true, "constructor": false, "invocations": ["assumeTrue", "thenReturn", "when", "proceed", "assertEquals", "cacheInvalidateAssign", "delete", "verify", "proceed", "verify"]}, "focal_class": {"identifier": "InvalidateAssignCacheAdvice", "superclass": "extends CacheAdvice", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(InvalidateAssignCacheAdvice.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(InvalidateAssignCacheAdvice.class)", "var_name": "LOG"}], "methods": [{"identifier": "invalidateAssign", "parameters": "()", "modifiers": "@Pointcut(\"@annotation(com.google.code.ssm.api.InvalidateAssignCache)\") public", "return": "void", "signature": "void invalidateAssign()", "full_signature": "@Pointcut(\"@annotation(com.google.code.ssm.api.InvalidateAssignCache)\") public void invalidateAssign()", "class_method_signature": "InvalidateAssignCacheAdvice.invalidateAssign()", "testcase": false, "constructor": false}, {"identifier": "cacheInvalidateAssign", "parameters": "(final ProceedingJoinPoint pjp)", "modifiers": "@Around(\"invalidateAssign()\") public", "return": "Object", "signature": "Object cacheInvalidateAssign(final ProceedingJoinPoint pjp)", "full_signature": "@Around(\"invalidateAssign()\") public Object cacheInvalidateAssign(final ProceedingJoinPoint pjp)", "class_method_signature": "InvalidateAssignCacheAdvice.cacheInvalidateAssign(final ProceedingJoinPoint pjp)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "@Override protected", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "@Override protected Logger getLogger()", "class_method_signature": "InvalidateAssignCacheAdvice.getLogger()", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/aop/InvalidateAssignCacheAdvice.java"}, "focal_method": {"identifier": "cacheInvalidateAssign", "parameters": "(final ProceedingJoinPoint pjp)", "modifiers": "@Around(\"invalidateAssign()\") public", "return": "Object", "body": "@Around(\"invalidateAssign()\")\n    public Object cacheInvalidateAssign(final ProceedingJoinPoint pjp) throws Throwable {\n        if (isDisabled()) {\n            getLogger().info(\"Cache disabled\");\n            return pjp.proceed();\n        }\n\n        final Object result = pjp.proceed();\n\n        // This is injected caching. If anything goes wrong in the caching, LOG\n        // the crap outta it, but do not let it surface up past the AOP injection itself.\n        String cacheKey = null;\n        try {\n            final Method methodToCache = getCacheBase().getMethodToCache(pjp, InvalidateAssignCache.class);\n            final InvalidateAssignCache annotation = methodToCache.getAnnotation(InvalidateAssignCache.class);\n            final AnnotationData data = AnnotationDataBuilder.buildAnnotationData(annotation, InvalidateAssignCache.class, methodToCache);\n\n            cacheKey = getCacheBase().getCacheKeyBuilder().getAssignCacheKey(data);\n\n            getCacheBase().getCache(data).delete(cacheKey);\n        } catch (Exception ex) {\n            warn(ex, \"Caching on method %s and key [%s] aborted due to an error.\", pjp.toShortString(), cacheKey);\n        }\n        return result;\n    }", "signature": "Object cacheInvalidateAssign(final ProceedingJoinPoint pjp)", "full_signature": "@Around(\"invalidateAssign()\") public Object cacheInvalidateAssign(final ProceedingJoinPoint pjp)", "class_method_signature": "InvalidateAssignCacheAdvice.cacheInvalidateAssign(final ProceedingJoinPoint pjp)", "testcase": false, "constructor": false, "invocations": ["isDisabled", "info", "getLogger", "proceed", "proceed", "getMethodToCache", "getCacheBase", "getAnnotation", "buildAnnotationData", "getAssignCacheKey", "getCacheKeyBuilder", "getCacheBase", "delete", "getCache", "getCacheBase", "warn", "toShortString"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}