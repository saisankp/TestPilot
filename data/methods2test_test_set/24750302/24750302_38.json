{"test_class": {"identifier": "VariableResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private VariableResolver resolver;", "modifier": "private", "type": "VariableResolver", "declarator": "resolver", "var_name": "resolver"}], "file": "alien4cloud-core/src/test/java/org/alien4cloud/tosca/variable/VariableResolverTest.java"}, "test_case": {"identifier": "resolve_list_variable", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void resolve_list_variable() throws Exception {\n        Object listVariable = resolver.resolve(\"list_variable\", Object.class);\n        assertThat(listVariable).isInstanceOf(List.class);\n        assertThat((List<String>) listVariable).containsExactly(\"item 1\", \"item 2\", \"item 3\");\n    }", "signature": "void resolve_list_variable()", "full_signature": "@Test @SuppressWarnings(\"unchecked\") public void resolve_list_variable()", "class_method_signature": "VariableResolverTest.resolve_list_variable()", "testcase": true, "constructor": false, "invocations": ["resolve", "isInstanceOf", "assertThat", "containsExactly", "assertThat"]}, "focal_class": {"identifier": "VariableResolver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String APP_VARIABLES = \"appVariables\";", "modifier": "private static final", "type": "String", "declarator": "APP_VARIABLES = \"appVariables\"", "var_name": "APP_VARIABLES"}, {"original_string": "private static final String ENV_VARIABLES = \"envVariables\";", "modifier": "private static final", "type": "String", "declarator": "ENV_VARIABLES = \"envVariables\"", "var_name": "ENV_VARIABLES"}, {"original_string": "private static final String ENV_TYPE_VARIABLES = \"envTypeVariables\";", "modifier": "private static final", "type": "String", "declarator": "ENV_TYPE_VARIABLES = \"envTypeVariables\"", "var_name": "ENV_TYPE_VARIABLES"}, {"original_string": "private PropertySourcesPropertyResolver resolver;", "modifier": "private", "type": "PropertySourcesPropertyResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private MutablePropertySources propertySources;", "modifier": "private", "type": "MutablePropertySources", "declarator": "propertySources", "var_name": "propertySources"}], "methods": [{"identifier": "VariableResolver", "parameters": "(PropertySource appVariables, PropertySource envTypeVariables, PropertySource envVariables, AlienContextVariables alienContextVariables)", "modifiers": "public", "return": "", "signature": " VariableResolver(PropertySource appVariables, PropertySource envTypeVariables, PropertySource envVariables, AlienContextVariables alienContextVariables)", "full_signature": "public  VariableResolver(PropertySource appVariables, PropertySource envTypeVariables, PropertySource envVariables, AlienContextVariables alienContextVariables)", "class_method_signature": "VariableResolver.VariableResolver(PropertySource appVariables, PropertySource envTypeVariables, PropertySource envVariables, AlienContextVariables alienContextVariables)", "testcase": false, "constructor": true}, {"identifier": "getPropertySources", "parameters": "()", "modifiers": "protected", "return": "MutablePropertySources", "signature": "MutablePropertySources getPropertySources()", "full_signature": "protected MutablePropertySources getPropertySources()", "class_method_signature": "VariableResolver.getPropertySources()", "testcase": false, "constructor": false}, {"identifier": "VariableResolver", "parameters": "(Properties appVariables, Properties envTypeVariables, Properties envVariables, AlienContextVariables alienContextVariables)", "modifiers": "public", "return": "", "signature": " VariableResolver(Properties appVariables, Properties envTypeVariables, Properties envVariables, AlienContextVariables alienContextVariables)", "full_signature": "public  VariableResolver(Properties appVariables, Properties envTypeVariables, Properties envVariables, AlienContextVariables alienContextVariables)", "class_method_signature": "VariableResolver.VariableResolver(Properties appVariables, Properties envTypeVariables, Properties envVariables, AlienContextVariables alienContextVariables)", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "(String variableName, Class<T> clazz)", "modifiers": "public", "return": "T", "signature": "T resolve(String variableName, Class<T> clazz)", "full_signature": "public T resolve(String variableName, Class<T> clazz)", "class_method_signature": "VariableResolver.resolve(String variableName, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(String variableName)", "modifiers": "public", "return": "String", "signature": "String resolve(String variableName)", "full_signature": "public String resolve(String variableName)", "class_method_signature": "VariableResolver.resolve(String variableName)", "testcase": false, "constructor": false}], "file": "alien4cloud-core/src/main/java/org/alien4cloud/tosca/variable/VariableResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(String variableName, Class<T> clazz)", "modifiers": "public", "return": "T", "body": "public <T> T resolve(String variableName, Class<T> clazz) {\n        if (!resolver.containsProperty(variableName)) {\n            throw new UnknownVariableException(variableName);\n        }\n\n        return resolver.getProperty(variableName, clazz);\n    }", "signature": "T resolve(String variableName, Class<T> clazz)", "full_signature": "public T resolve(String variableName, Class<T> clazz)", "class_method_signature": "VariableResolver.resolve(String variableName, Class<T> clazz)", "testcase": false, "constructor": false, "invocations": ["containsProperty", "getProperty"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}