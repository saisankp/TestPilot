{"test_class": {"identifier": "EventRegistrationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    EventRegistrationService eventRegistrationService;", "modifier": "@InjectMocks", "type": "EventRegistrationService", "declarator": "eventRegistrationService", "var_name": "eventRegistrationService"}, {"original_string": "@Mock\n    EventEntityService eventEntityService;", "modifier": "@Mock", "type": "EventEntityService", "declarator": "eventEntityService", "var_name": "eventEntityService"}, {"original_string": "@Mock\n    RegistrationEntityService registrationEntityService;", "modifier": "@Mock", "type": "RegistrationEntityService", "declarator": "registrationEntityService", "var_name": "registrationEntityService"}], "file": "service/src/test/java/org/coner/core/domain/service/EventRegistrationServiceTest.java"}, "test_case": {"identifier": "whenAddValid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenAddValid() throws Exception {\n        RegistrationAddPayload registrationAddPayload = new RegistrationAddPayload();\n        registrationAddPayload.setEventId(TestConstants.EVENT_ID);\n        Registration registration = mock(Registration.class);\n        when(registrationEntityService.add(registrationAddPayload)).thenReturn(registration);\n\n        Registration actual = eventRegistrationService.add(registrationAddPayload);\n\n        verify(eventEntityService).getById(TestConstants.EVENT_ID);\n        verify(registrationEntityService).add(registrationAddPayload);\n        assertThat(actual).isSameAs(registration);\n    }", "signature": "void whenAddValid()", "full_signature": "@Test public void whenAddValid()", "class_method_signature": "EventRegistrationServiceTest.whenAddValid()", "testcase": true, "constructor": false, "invocations": ["setEventId", "mock", "thenReturn", "when", "add", "add", "getById", "verify", "add", "verify", "isSameAs", "assertThat"]}, "focal_class": {"identifier": "EventRegistrationService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EventEntityService eventEntityService;", "modifier": "private final", "type": "EventEntityService", "declarator": "eventEntityService", "var_name": "eventEntityService"}, {"original_string": "private final RegistrationEntityService registrationEntityService;", "modifier": "private final", "type": "RegistrationEntityService", "declarator": "registrationEntityService", "var_name": "registrationEntityService"}], "methods": [{"identifier": "EventRegistrationService", "parameters": "(\n            EventEntityService eventEntityService,\n            RegistrationEntityService registrationEntityService\n    )", "modifiers": "@Inject public", "return": "", "signature": " EventRegistrationService(\n            EventEntityService eventEntityService,\n            RegistrationEntityService registrationEntityService\n    )", "full_signature": "@Inject public  EventRegistrationService(\n            EventEntityService eventEntityService,\n            RegistrationEntityService registrationEntityService\n    )", "class_method_signature": "EventRegistrationService.EventRegistrationService(\n            EventEntityService eventEntityService,\n            RegistrationEntityService registrationEntityService\n    )", "testcase": false, "constructor": true}, {"identifier": "getByEventIdAndRegistrationId", "parameters": "(String eventId, String registrationId)", "modifiers": "public", "return": "Registration", "signature": "Registration getByEventIdAndRegistrationId(String eventId, String registrationId)", "full_signature": "public Registration getByEventIdAndRegistrationId(String eventId, String registrationId)", "class_method_signature": "EventRegistrationService.getByEventIdAndRegistrationId(String eventId, String registrationId)", "testcase": false, "constructor": false}, {"identifier": "getAllWithEventId", "parameters": "(String eventId)", "modifiers": "public", "return": "List<Registration>", "signature": "List<Registration> getAllWithEventId(String eventId)", "full_signature": "public List<Registration> getAllWithEventId(String eventId)", "class_method_signature": "EventRegistrationService.getAllWithEventId(String eventId)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(RegistrationAddPayload addPayload)", "modifiers": "public", "return": "Registration", "signature": "Registration add(RegistrationAddPayload addPayload)", "full_signature": "public Registration add(RegistrationAddPayload addPayload)", "class_method_signature": "EventRegistrationService.add(RegistrationAddPayload addPayload)", "testcase": false, "constructor": false}], "file": "service/src/main/java/org/coner/core/domain/service/EventRegistrationService.java"}, "focal_method": {"identifier": "add", "parameters": "(RegistrationAddPayload addPayload)", "modifiers": "public", "return": "Registration", "body": "public Registration add(RegistrationAddPayload addPayload) throws AddEntityException, EntityNotFoundException {\n        addPayload.setEvent(eventEntityService.getById(addPayload.getEventId()));\n        return registrationEntityService.add(addPayload);\n    }", "signature": "Registration add(RegistrationAddPayload addPayload)", "full_signature": "public Registration add(RegistrationAddPayload addPayload)", "class_method_signature": "EventRegistrationService.add(RegistrationAddPayload addPayload)", "testcase": false, "constructor": false, "invocations": ["setEvent", "getById", "getEventId", "add"]}, "repository": {"repo_id": 28649714, "url": "https://github.com/caeos/coner-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1027, "license": "licensed"}}