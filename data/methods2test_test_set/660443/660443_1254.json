{"test_class": {"identifier": "PharmacophoreAtomTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/pcore/src/test/java/org/openscience/cdk/pharmacophore/PharmacophoreAtomTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        PharmacophoreAtom patom1 = new PharmacophoreAtom(\"[CX2]N\", \"Amine\", new Point3d(0, 0, 0));\n        patom1.setMatchingAtoms(new int[]{1, 4, 5});\n\n        PharmacophoreAtom patom2 = new PharmacophoreAtom(\"[CX2]N\", \"Amine\", new Point3d(0, 0, 0));\n        patom2.setMatchingAtoms(new int[]{1, 4, 5});\n\n        PharmacophoreAtom patom3 = new PharmacophoreAtom(\"[CX2]N\", \"Amine\", new Point3d(0, 1, 0));\n        patom3.setMatchingAtoms(new int[]{1, 4, 5});\n\n        PharmacophoreAtom patom4 = new PharmacophoreAtom(\"[CX2]N\", \"Amine\", new Point3d(0, 0, 0));\n        patom4.setMatchingAtoms(new int[]{1, 4, 6});\n\n        Assert.assertEquals(patom2, patom1);\n        Assert.assertNotSame(patom3, patom1);\n        Assert.assertNotSame(patom4, patom1);\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "PharmacophoreAtomTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["setMatchingAtoms", "setMatchingAtoms", "setMatchingAtoms", "setMatchingAtoms", "assertEquals", "assertNotSame", "assertNotSame"]}, "focal_class": {"identifier": "PharmacophoreAtom", "superclass": "extends Atom", "interfaces": "", "fields": [{"original_string": "private String smarts;", "modifier": "private", "type": "String", "declarator": "smarts", "var_name": "smarts"}, {"original_string": "private int[]  matchingAtoms;", "modifier": "private", "type": "int[]", "declarator": "matchingAtoms", "var_name": "matchingAtoms"}, {"original_string": "private String symbol;", "modifier": "private", "type": "String", "declarator": "symbol", "var_name": "symbol"}], "methods": [{"identifier": "PharmacophoreAtom", "parameters": "(String smarts, String symbol, Point3d coordinates)", "modifiers": "public", "return": "", "signature": " PharmacophoreAtom(String smarts, String symbol, Point3d coordinates)", "full_signature": "public  PharmacophoreAtom(String smarts, String symbol, Point3d coordinates)", "class_method_signature": "PharmacophoreAtom.PharmacophoreAtom(String smarts, String symbol, Point3d coordinates)", "testcase": false, "constructor": true}, {"identifier": "PharmacophoreAtom", "parameters": "(PharmacophoreAtom pharmacophoreAtom)", "modifiers": "public", "return": "", "signature": " PharmacophoreAtom(PharmacophoreAtom pharmacophoreAtom)", "full_signature": "public  PharmacophoreAtom(PharmacophoreAtom pharmacophoreAtom)", "class_method_signature": "PharmacophoreAtom.PharmacophoreAtom(PharmacophoreAtom pharmacophoreAtom)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(IAtom atom)", "modifiers": "public static", "return": "PharmacophoreAtom", "signature": "PharmacophoreAtom get(IAtom atom)", "full_signature": "public static PharmacophoreAtom get(IAtom atom)", "class_method_signature": "PharmacophoreAtom.get(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "setSmarts", "parameters": "(String smarts)", "modifiers": "public", "return": "void", "signature": "void setSmarts(String smarts)", "full_signature": "public void setSmarts(String smarts)", "class_method_signature": "PharmacophoreAtom.setSmarts(String smarts)", "testcase": false, "constructor": false}, {"identifier": "getSmarts", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSmarts()", "full_signature": "public String getSmarts()", "class_method_signature": "PharmacophoreAtom.getSmarts()", "testcase": false, "constructor": false}, {"identifier": "setSymbol", "parameters": "(String symbol)", "modifiers": "@Override public", "return": "void", "signature": "void setSymbol(String symbol)", "full_signature": "@Override public void setSymbol(String symbol)", "class_method_signature": "PharmacophoreAtom.setSymbol(String symbol)", "testcase": false, "constructor": false}, {"identifier": "getSymbol", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSymbol()", "full_signature": "@Override public String getSymbol()", "class_method_signature": "PharmacophoreAtom.getSymbol()", "testcase": false, "constructor": false}, {"identifier": "setMatchingAtoms", "parameters": "(int[] atomIndices)", "modifiers": "public", "return": "void", "signature": "void setMatchingAtoms(int[] atomIndices)", "full_signature": "public void setMatchingAtoms(int[] atomIndices)", "class_method_signature": "PharmacophoreAtom.setMatchingAtoms(int[] atomIndices)", "testcase": false, "constructor": false}, {"identifier": "getMatchingAtoms", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getMatchingAtoms()", "full_signature": "public int[] getMatchingAtoms()", "class_method_signature": "PharmacophoreAtom.getMatchingAtoms()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PharmacophoreAtom.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "PharmacophoreAtom.equals(Object o)", "testcase": false, "constructor": false}], "file": "tool/pcore/src/main/java/org/openscience/cdk/pharmacophore/PharmacophoreAtom.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object o) {\n        if (!(o instanceof PharmacophoreAtom)) return false;\n\n        PharmacophoreAtom that = (PharmacophoreAtom) o;\n        return smarts.equals(that.getSmarts()) && symbol.equals(that.getSymbol())\n                && point3d.equals(that.getPoint3d()) && Arrays.equals(this.matchingAtoms, that.matchingAtoms);\n    }", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "PharmacophoreAtom.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["equals", "getSmarts", "equals", "getSymbol", "equals", "getPoint3d", "equals"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}