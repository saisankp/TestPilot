{"test_class": {"identifier": "MarkLogicDatasetGraphTest", "superclass": "extends JenaTestBase", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory\n            .getLogger(MarkLogicDatasetGraphTest.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory\n            .getLogger(MarkLogicDatasetGraphTest.class)", "var_name": "log"}], "file": "marklogic-jena/src/test/java/com/marklogic/semantics/jena/MarkLogicDatasetGraphTest.java"}, "test_case": {"identifier": "testRIOTWrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRIOTWrite() {\n        Dataset dataSet = getMarkLogicDatasetGraph(\"testdata/smallfile.nt\")\n                .toDataset();\n        RDFDataMgr.write(System.out, dataSet, RDFFormat.TRIG_PRETTY);\n    }", "signature": "void testRIOTWrite()", "full_signature": "@Test public void testRIOTWrite()", "class_method_signature": "MarkLogicDatasetGraphTest.testRIOTWrite()", "testcase": true, "constructor": false, "invocations": ["toDataset", "getMarkLogicDatasetGraph", "write"]}, "focal_class": {"identifier": "MarkLogicDatasetGraph", "superclass": "extends DatasetGraphTriplesQuads", "interfaces": "implements\n        DatasetGraph, Transactional", "fields": [{"original_string": "public static final String DEFAULT_GRAPH_URI = \"http://marklogic.com/semantics#default-graph\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_GRAPH_URI = \"http://marklogic.com/semantics#default-graph\"", "var_name": "DEFAULT_GRAPH_URI"}, {"original_string": "private static Logger log = LoggerFactory\n            .getLogger(MarkLogicDatasetGraph.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory\n            .getLogger(MarkLogicDatasetGraph.class)", "var_name": "log"}, {"original_string": "private JenaDatabaseClient client;", "modifier": "private", "type": "JenaDatabaseClient", "declarator": "client", "var_name": "client"}, {"original_string": "private SPARQLRuleset[] rulesets;", "modifier": "private", "type": "SPARQLRuleset[]", "declarator": "rulesets", "var_name": "rulesets"}, {"original_string": "private QueryDefinition constrainingQueryDefinition;", "modifier": "private", "type": "QueryDefinition", "declarator": "constrainingQueryDefinition", "var_name": "constrainingQueryDefinition"}, {"original_string": "private GraphPermissions updatePermissions;", "modifier": "private", "type": "GraphPermissions", "declarator": "updatePermissions", "var_name": "updatePermissions"}], "methods": [{"identifier": "MarkLogicDatasetGraph", "parameters": "(JenaDatabaseClient jenaClient)", "modifiers": "public", "return": "", "signature": " MarkLogicDatasetGraph(JenaDatabaseClient jenaClient)", "full_signature": "public  MarkLogicDatasetGraph(JenaDatabaseClient jenaClient)", "class_method_signature": "MarkLogicDatasetGraph.MarkLogicDatasetGraph(JenaDatabaseClient jenaClient)", "testcase": false, "constructor": true}, {"identifier": "listGraphNodes", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Node>", "signature": "Iterator<Node> listGraphNodes()", "full_signature": "@Override public Iterator<Node> listGraphNodes()", "class_method_signature": "MarkLogicDatasetGraph.listGraphNodes()", "testcase": false, "constructor": false}, {"identifier": "getLock", "parameters": "()", "modifiers": "@Override public", "return": "Lock", "signature": "Lock getLock()", "full_signature": "@Override public Lock getLock()", "class_method_signature": "MarkLogicDatasetGraph.getLock()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "MarkLogicDatasetGraph.clear()", "testcase": false, "constructor": false}, {"identifier": "bindObject", "parameters": "(SPARQLQueryDefinition qdef,\n            String variableName, Node objectNode)", "modifiers": "public static", "return": "SPARQLQueryDefinition", "signature": "SPARQLQueryDefinition bindObject(SPARQLQueryDefinition qdef,\n            String variableName, Node objectNode)", "full_signature": "public static SPARQLQueryDefinition bindObject(SPARQLQueryDefinition qdef,\n            String variableName, Node objectNode)", "class_method_signature": "MarkLogicDatasetGraph.bindObject(SPARQLQueryDefinition qdef,\n            String variableName, Node objectNode)", "testcase": false, "constructor": false}, {"identifier": "addToDftGraph", "parameters": "(Node s, Node p, Node o)", "modifiers": "@Override protected", "return": "void", "signature": "void addToDftGraph(Node s, Node p, Node o)", "full_signature": "@Override protected void addToDftGraph(Node s, Node p, Node o)", "class_method_signature": "MarkLogicDatasetGraph.addToDftGraph(Node s, Node p, Node o)", "testcase": false, "constructor": false}, {"identifier": "skolemize", "parameters": "(Node s)", "modifiers": "private", "return": "Node", "signature": "Node skolemize(Node s)", "full_signature": "private Node skolemize(Node s)", "class_method_signature": "MarkLogicDatasetGraph.skolemize(Node s)", "testcase": false, "constructor": false}, {"identifier": "addToNamedGraph", "parameters": "(Node g, Node s, Node p, Node o)", "modifiers": "@Override protected", "return": "void", "signature": "void addToNamedGraph(Node g, Node s, Node p, Node o)", "full_signature": "@Override protected void addToNamedGraph(Node g, Node s, Node p, Node o)", "class_method_signature": "MarkLogicDatasetGraph.addToNamedGraph(Node g, Node s, Node p, Node o)", "testcase": false, "constructor": false}, {"identifier": "deleteFromDftGraph", "parameters": "(Node s, Node p, Node o)", "modifiers": "@Override protected", "return": "void", "signature": "void deleteFromDftGraph(Node s, Node p, Node o)", "full_signature": "@Override protected void deleteFromDftGraph(Node s, Node p, Node o)", "class_method_signature": "MarkLogicDatasetGraph.deleteFromDftGraph(Node s, Node p, Node o)", "testcase": false, "constructor": false}, {"identifier": "deleteFromNamedGraph", "parameters": "(Node g, Node s, Node p, Node o)", "modifiers": "@Override protected", "return": "void", "signature": "void deleteFromNamedGraph(Node g, Node s, Node p, Node o)", "full_signature": "@Override protected void deleteFromNamedGraph(Node g, Node s, Node p, Node o)", "class_method_signature": "MarkLogicDatasetGraph.deleteFromNamedGraph(Node g, Node s, Node p, Node o)", "testcase": false, "constructor": false}, {"identifier": "selectTriplesInGraph", "parameters": "(String graphName, Node s, Node p,\n            Node o)", "modifiers": "private", "return": "InputStream", "signature": "InputStream selectTriplesInGraph(String graphName, Node s, Node p,\n            Node o)", "full_signature": "private InputStream selectTriplesInGraph(String graphName, Node s, Node p,\n            Node o)", "class_method_signature": "MarkLogicDatasetGraph.selectTriplesInGraph(String graphName, Node s, Node p,\n            Node o)", "testcase": false, "constructor": false}, {"identifier": "findInDftGraph", "parameters": "(Node s, Node p, Node o)", "modifiers": "@Override protected", "return": "Iterator<Quad>", "signature": "Iterator<Quad> findInDftGraph(Node s, Node p, Node o)", "full_signature": "@Override protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o)", "class_method_signature": "MarkLogicDatasetGraph.findInDftGraph(Node s, Node p, Node o)", "testcase": false, "constructor": false}, {"identifier": "findInSpecificNamedGraph", "parameters": "(Node g, Node s, Node p,\n            Node o)", "modifiers": "@Override protected", "return": "Iterator<Quad>", "signature": "Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p,\n            Node o)", "full_signature": "@Override protected Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p,\n            Node o)", "class_method_signature": "MarkLogicDatasetGraph.findInSpecificNamedGraph(Node g, Node s, Node p,\n            Node o)", "testcase": false, "constructor": false}, {"identifier": "findInAnyNamedGraphs", "parameters": "(Node s, Node p, Node o)", "modifiers": "@Override protected", "return": "Iterator<Quad>", "signature": "Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o)", "full_signature": "@Override protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o)", "class_method_signature": "MarkLogicDatasetGraph.findInAnyNamedGraphs(Node s, Node p, Node o)", "testcase": false, "constructor": false}, {"identifier": "setDefaultGraph", "parameters": "(Graph g)", "modifiers": "@Override /** * @see org.apache.jena.sparql.core.DatasetGraph */ public", "return": "void", "signature": "void setDefaultGraph(Graph g)", "full_signature": "@Override /** * @see org.apache.jena.sparql.core.DatasetGraph */ public void setDefaultGraph(Graph g)", "class_method_signature": "MarkLogicDatasetGraph.setDefaultGraph(Graph g)", "testcase": false, "constructor": false}, {"identifier": "begin", "parameters": "(ReadWrite readWrite)", "modifiers": "@Override /** * Start a transaction. */ public", "return": "void", "signature": "void begin(ReadWrite readWrite)", "full_signature": "@Override /** * Start a transaction. */ public void begin(ReadWrite readWrite)", "class_method_signature": "MarkLogicDatasetGraph.begin(ReadWrite readWrite)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "@Override /** * Commit the current transaction. */ public", "return": "void", "signature": "void commit()", "full_signature": "@Override /** * Commit the current transaction. */ public void commit()", "class_method_signature": "MarkLogicDatasetGraph.commit()", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "()", "modifiers": "@Override /** * Abort the current transaction with a rollback operation. */ public", "return": "void", "signature": "void abort()", "full_signature": "@Override /** * Abort the current transaction with a rollback operation. */ public void abort()", "class_method_signature": "MarkLogicDatasetGraph.abort()", "testcase": false, "constructor": false}, {"identifier": "isInTransaction", "parameters": "()", "modifiers": "@Override /** * @return true if there is a multi-statement transaction in play. */ public", "return": "boolean", "signature": "boolean isInTransaction()", "full_signature": "@Override /** * @return true if there is a multi-statement transaction in play. */ public boolean isInTransaction()", "class_method_signature": "MarkLogicDatasetGraph.isInTransaction()", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "()", "modifiers": "@Override /** * Synonymous with abort(); */ public", "return": "void", "signature": "void end()", "full_signature": "@Override /** * Synonymous with abort(); */ public void end()", "class_method_signature": "MarkLogicDatasetGraph.end()", "testcase": false, "constructor": false}, {"identifier": "toDataset", "parameters": "()", "modifiers": "public", "return": "Dataset", "signature": "Dataset toDataset()", "full_signature": "public Dataset toDataset()", "class_method_signature": "MarkLogicDatasetGraph.toDataset()", "testcase": false, "constructor": false}, {"identifier": "getDefaultGraph", "parameters": "()", "modifiers": "@Override public", "return": "Graph", "signature": "Graph getDefaultGraph()", "full_signature": "@Override public Graph getDefaultGraph()", "class_method_signature": "MarkLogicDatasetGraph.getDefaultGraph()", "testcase": false, "constructor": false}, {"identifier": "getGraph", "parameters": "(Node graphNode)", "modifiers": "@Override public", "return": "Graph", "signature": "Graph getGraph(Node graphNode)", "full_signature": "@Override public Graph getGraph(Node graphNode)", "class_method_signature": "MarkLogicDatasetGraph.getGraph(Node graphNode)", "testcase": false, "constructor": false}, {"identifier": "addGraph", "parameters": "(Node graphName, Graph graph)", "modifiers": "@Override public", "return": "void", "signature": "void addGraph(Node graphName, Graph graph)", "full_signature": "@Override public void addGraph(Node graphName, Graph graph)", "class_method_signature": "MarkLogicDatasetGraph.addGraph(Node graphName, Graph graph)", "testcase": false, "constructor": false}, {"identifier": "mergeGraph", "parameters": "(Node graphName, Graph graph)", "modifiers": "public", "return": "void", "signature": "void mergeGraph(Node graphName, Graph graph)", "full_signature": "public void mergeGraph(Node graphName, Graph graph)", "class_method_signature": "MarkLogicDatasetGraph.mergeGraph(Node graphName, Graph graph)", "testcase": false, "constructor": false}, {"identifier": "removeGraph", "parameters": "(Node graphName)", "modifiers": "@Override public", "return": "void", "signature": "void removeGraph(Node graphName)", "full_signature": "@Override public void removeGraph(Node graphName)", "class_method_signature": "MarkLogicDatasetGraph.removeGraph(Node graphName)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override /** * Not supported by MarkLogicDatasetGraph. */ public", "return": "long", "signature": "long size()", "full_signature": "@Override /** * Not supported by MarkLogicDatasetGraph. */ public long size()", "class_method_signature": "MarkLogicDatasetGraph.size()", "testcase": false, "constructor": false}, {"identifier": "getPermissions", "parameters": "(Node graphName)", "modifiers": "public", "return": "GraphPermissions", "signature": "GraphPermissions getPermissions(Node graphName)", "full_signature": "public GraphPermissions getPermissions(Node graphName)", "class_method_signature": "MarkLogicDatasetGraph.getPermissions(Node graphName)", "testcase": false, "constructor": false}, {"identifier": "addPermissions", "parameters": "(Node graphName, GraphPermissions permissions)", "modifiers": "public", "return": "void", "signature": "void addPermissions(Node graphName, GraphPermissions permissions)", "full_signature": "public void addPermissions(Node graphName, GraphPermissions permissions)", "class_method_signature": "MarkLogicDatasetGraph.addPermissions(Node graphName, GraphPermissions permissions)", "testcase": false, "constructor": false}, {"identifier": "clearPermissions", "parameters": "(Node graphName)", "modifiers": "public", "return": "void", "signature": "void clearPermissions(Node graphName)", "full_signature": "public void clearPermissions(Node graphName)", "class_method_signature": "MarkLogicDatasetGraph.clearPermissions(Node graphName)", "testcase": false, "constructor": false}, {"identifier": "writePermissions", "parameters": "(Node graphName, GraphPermissions permissions)", "modifiers": "public", "return": "void", "signature": "void writePermissions(Node graphName, GraphPermissions permissions)", "full_signature": "public void writePermissions(Node graphName, GraphPermissions permissions)", "class_method_signature": "MarkLogicDatasetGraph.writePermissions(Node graphName, GraphPermissions permissions)", "testcase": false, "constructor": false}, {"identifier": "sync", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sync()", "full_signature": "public void sync()", "class_method_signature": "MarkLogicDatasetGraph.sync()", "testcase": false, "constructor": false}, {"identifier": "syncAdds", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void syncAdds()", "full_signature": "public void syncAdds()", "class_method_signature": "MarkLogicDatasetGraph.syncAdds()", "testcase": false, "constructor": false}, {"identifier": "setRulesets", "parameters": "(SPARQLRuleset... rulesets)", "modifiers": "public", "return": "void", "signature": "void setRulesets(SPARQLRuleset... rulesets)", "full_signature": "public void setRulesets(SPARQLRuleset... rulesets)", "class_method_signature": "MarkLogicDatasetGraph.setRulesets(SPARQLRuleset... rulesets)", "testcase": false, "constructor": false}, {"identifier": "getRulesets", "parameters": "()", "modifiers": "public", "return": "SPARQLRuleset[]", "signature": "SPARQLRuleset[] getRulesets()", "full_signature": "public SPARQLRuleset[] getRulesets()", "class_method_signature": "MarkLogicDatasetGraph.getRulesets()", "testcase": false, "constructor": false}, {"identifier": "withRulesets", "parameters": "(SPARQLRuleset... rulesets)", "modifiers": "public", "return": "MarkLogicDatasetGraph", "signature": "MarkLogicDatasetGraph withRulesets(SPARQLRuleset... rulesets)", "full_signature": "public MarkLogicDatasetGraph withRulesets(SPARQLRuleset... rulesets)", "class_method_signature": "MarkLogicDatasetGraph.withRulesets(SPARQLRuleset... rulesets)", "testcase": false, "constructor": false}, {"identifier": "setConstrainingQueryDefinition", "parameters": "(\n            QueryDefinition constrainingQueryDefinition)", "modifiers": "public", "return": "void", "signature": "void setConstrainingQueryDefinition(\n            QueryDefinition constrainingQueryDefinition)", "full_signature": "public void setConstrainingQueryDefinition(\n            QueryDefinition constrainingQueryDefinition)", "class_method_signature": "MarkLogicDatasetGraph.setConstrainingQueryDefinition(\n            QueryDefinition constrainingQueryDefinition)", "testcase": false, "constructor": false}, {"identifier": "getConstrainingQueryDefinition", "parameters": "()", "modifiers": "public", "return": "QueryDefinition", "signature": "QueryDefinition getConstrainingQueryDefinition()", "full_signature": "public QueryDefinition getConstrainingQueryDefinition()", "class_method_signature": "MarkLogicDatasetGraph.getConstrainingQueryDefinition()", "testcase": false, "constructor": false}, {"identifier": "getDatabaseClient", "parameters": "()", "modifiers": "public", "return": "JenaDatabaseClient", "signature": "JenaDatabaseClient getDatabaseClient()", "full_signature": "public JenaDatabaseClient getDatabaseClient()", "class_method_signature": "MarkLogicDatasetGraph.getDatabaseClient()", "testcase": false, "constructor": false}, {"identifier": "setSPARQLUpdatePermissions", "parameters": "(GraphPermissions permissions)", "modifiers": "public", "return": "void", "signature": "void setSPARQLUpdatePermissions(GraphPermissions permissions)", "full_signature": "public void setSPARQLUpdatePermissions(GraphPermissions permissions)", "class_method_signature": "MarkLogicDatasetGraph.setSPARQLUpdatePermissions(GraphPermissions permissions)", "testcase": false, "constructor": false}, {"identifier": "getSPARQLUpdatePermissions", "parameters": "()", "modifiers": "public", "return": "GraphPermissions", "signature": "GraphPermissions getSPARQLUpdatePermissions()", "full_signature": "public GraphPermissions getSPARQLUpdatePermissions()", "class_method_signature": "MarkLogicDatasetGraph.getSPARQLUpdatePermissions()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "MarkLogicDatasetGraph.close()", "testcase": false, "constructor": false}, {"identifier": "supportsTransactions", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsTransactions()", "full_signature": "@Override public boolean supportsTransactions()", "class_method_signature": "MarkLogicDatasetGraph.supportsTransactions()", "testcase": false, "constructor": false}, {"identifier": "checkIsOpen", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkIsOpen()", "full_signature": "private void checkIsOpen()", "class_method_signature": "MarkLogicDatasetGraph.checkIsOpen()", "testcase": false, "constructor": false}], "file": "marklogic-jena/src/main/java/com/marklogic/semantics/jena/MarkLogicDatasetGraph.java"}, "focal_method": {"identifier": "toDataset", "parameters": "()", "modifiers": "public", "return": "Dataset", "body": "public Dataset toDataset() {\n        checkIsOpen();\n        return DatasetFactory.wrap(this);\n    }", "signature": "Dataset toDataset()", "full_signature": "public Dataset toDataset()", "class_method_signature": "MarkLogicDatasetGraph.toDataset()", "testcase": false, "constructor": false, "invocations": ["checkIsOpen", "wrap"]}, "repository": {"repo_id": 40672250, "url": "https://github.com/marklogic/marklogic-jena", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 5, "size": 11218, "license": "licensed"}}