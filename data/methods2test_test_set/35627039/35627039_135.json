{"test_class": {"identifier": "AbstractBundleHintProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Long TEST_NAMESPACE_ID = 1L;", "modifier": "public static final", "type": "Long", "declarator": "TEST_NAMESPACE_ID = 1L", "var_name": "TEST_NAMESPACE_ID"}, {"original_string": "public static final String TEST_SERVICE_NAME = \"test\";", "modifier": "public static final", "type": "String", "declarator": "TEST_SERVICE_NAME = \"test\"", "var_name": "TEST_SERVICE_NAME"}, {"original_string": "public static final Map<String, Object> TEST_HINTS = Collections.singletonMap(\"hello\", \"world\");", "modifier": "public static final", "type": "Map<String, Object>", "declarator": "TEST_HINTS = Collections.singletonMap(\"hello\", \"world\")", "var_name": "TEST_HINTS"}, {"original_string": "private AbstractBundleHintProvider provider = new TestBundleHintProviderTest();", "modifier": "private", "type": "AbstractBundleHintProvider", "declarator": "provider = new TestBundleHintProviderTest()", "var_name": "provider"}, {"original_string": "@Mocked\n    private EnvironmentService environmentService;", "modifier": "@Mocked\n    private", "type": "EnvironmentService", "declarator": "environmentService", "var_name": "environmentService"}], "file": "streams/cluster/src/test/java/com/hortonworks/streamline/streams/cluster/bundle/AbstractBundleHintProviderTest.java"}, "test_case": {"identifier": "testProvide", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProvide() throws Exception {\n        Cluster cluster1 = createDummyCluster(1L, \"cluster1\");\n        Cluster cluster2 = createDummyCluster(2L, \"cluster2\");\n        Cluster cluster3 = createDummyCluster(3L, \"cluster3\");\n\n        List<NamespaceServiceClusterMap> testServiceClusterMappings = createDummyServiceClusterMappings(\n                Lists.newArrayList(cluster1, cluster2, cluster3));\n\n        new Expectations() {{\n            environmentService.getCluster(1L);\n            result = cluster1;\n\n            environmentService.getCluster(2L);\n            result = cluster2;\n\n            environmentService.getCluster(3L);\n            result = cluster3;\n\n            environmentService.listServiceClusterMapping(TEST_NAMESPACE_ID, TEST_SERVICE_NAME);\n            result = testServiceClusterMappings;\n        }};\n\n        Namespace namespace = new Namespace();\n        namespace.setId(TEST_NAMESPACE_ID);\n\n        Map<Long, ComponentBundleHintProvider.BundleHintsResponse> hints = provider.provide(namespace, null, null);\n        Assert.assertEquals(3, hints.size());\n        Assert.assertEquals(cluster1, hints.get(cluster1.getId()).getCluster());\n        Assert.assertEquals(TEST_HINTS, hints.get(cluster1.getId()).getHints());\n        Assert.assertEquals(cluster2, hints.get(cluster2.getId()).getCluster());\n        Assert.assertEquals(TEST_HINTS, hints.get(cluster2.getId()).getHints());\n        Assert.assertEquals(cluster3, hints.get(cluster3.getId()).getCluster());\n        Assert.assertEquals(TEST_HINTS, hints.get(cluster3.getId()).getHints());\n    }", "signature": "void testProvide()", "full_signature": "@Test public void testProvide()", "class_method_signature": "AbstractBundleHintProviderTest.testProvide()", "testcase": true, "constructor": false, "invocations": ["createDummyCluster", "createDummyCluster", "createDummyCluster", "createDummyServiceClusterMappings", "newArrayList", "getCluster", "getCluster", "getCluster", "listServiceClusterMapping", "setId", "provide", "assertEquals", "size", "assertEquals", "getCluster", "get", "getId", "assertEquals", "getHints", "get", "getId", "assertEquals", "getCluster", "get", "getId", "assertEquals", "getHints", "get", "getId", "assertEquals", "getCluster", "get", "getId", "assertEquals", "getHints", "get", "getId"]}, "focal_class": {"identifier": "AbstractBundleHintProvider", "superclass": "", "interfaces": "implements ComponentBundleHintProvider", "fields": [{"original_string": "protected EnvironmentService environmentService;", "modifier": "protected", "type": "EnvironmentService", "declarator": "environmentService", "var_name": "environmentService"}], "methods": [{"identifier": "init", "parameters": "(EnvironmentService environmentService)", "modifiers": "@Override public", "return": "void", "signature": "void init(EnvironmentService environmentService)", "full_signature": "@Override public void init(EnvironmentService environmentService)", "class_method_signature": "AbstractBundleHintProvider.init(EnvironmentService environmentService)", "testcase": false, "constructor": false}, {"identifier": "provide", "parameters": "(Namespace namespace, SecurityContext securityContext, Subject subject)", "modifiers": "@Override public", "return": "Map<Long, BundleHintsResponse>", "signature": "Map<Long, BundleHintsResponse> provide(Namespace namespace, SecurityContext securityContext, Subject subject)", "full_signature": "@Override public Map<Long, BundleHintsResponse> provide(Namespace namespace, SecurityContext securityContext, Subject subject)", "class_method_signature": "AbstractBundleHintProvider.provide(Namespace namespace, SecurityContext securityContext, Subject subject)", "testcase": false, "constructor": false}, {"identifier": "getHintsOnCluster", "parameters": "(Cluster cluster, SecurityContext securityContext, Subject subject)", "modifiers": "public abstract", "return": "Map<String, Object>", "signature": "Map<String, Object> getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject)", "full_signature": "public abstract Map<String, Object> getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject)", "class_method_signature": "AbstractBundleHintProvider.getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject)", "testcase": false, "constructor": false}, {"identifier": "getServiceName", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getServiceName()", "full_signature": "public abstract String getServiceName()", "class_method_signature": "AbstractBundleHintProvider.getServiceName()", "testcase": false, "constructor": false}], "file": "streams/cluster/src/main/java/com/hortonworks/streamline/streams/cluster/bundle/AbstractBundleHintProvider.java"}, "focal_method": {"identifier": "provide", "parameters": "(Namespace namespace, SecurityContext securityContext, Subject subject)", "modifiers": "@Override public", "return": "Map<Long, BundleHintsResponse>", "body": "@Override\n    public Map<Long, BundleHintsResponse> provide(Namespace namespace, SecurityContext securityContext, Subject subject) {\n\n        Map<Long, BundleHintsResponse> hintMap = new HashMap<>();\n        Collection<NamespaceServiceClusterMap> serviceMappings = environmentService.listServiceClusterMapping(\n                namespace.getId(), getServiceName());\n        for (NamespaceServiceClusterMap mapping : serviceMappings) {\n            Long clusterId = mapping.getClusterId();\n            Cluster cluster = environmentService.getCluster(clusterId);\n            if (cluster == null) {\n                throw new RuntimeException(new ClusterNotFoundException(clusterId));\n            }\n\n            BundleHintsResponse response = new BundleHintsResponse(cluster, getHintsOnCluster(cluster, securityContext, subject));\n            hintMap.put(clusterId, response);\n        }\n\n        return hintMap;\n    }", "signature": "Map<Long, BundleHintsResponse> provide(Namespace namespace, SecurityContext securityContext, Subject subject)", "full_signature": "@Override public Map<Long, BundleHintsResponse> provide(Namespace namespace, SecurityContext securityContext, Subject subject)", "class_method_signature": "AbstractBundleHintProvider.provide(Namespace namespace, SecurityContext securityContext, Subject subject)", "testcase": false, "constructor": false, "invocations": ["listServiceClusterMapping", "getId", "getServiceName", "getClusterId", "getCluster", "getHintsOnCluster", "put"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}