{"test_class": {"identifier": "OptionsLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic final EnvironmentVariables environmentVariables = new EnvironmentVariables();", "modifier": "@Rule\n\tpublic final", "type": "EnvironmentVariables", "declarator": "environmentVariables = new EnvironmentVariables()", "var_name": "environmentVariables"}], "file": "common/src/test/java/com/gentics/mesh/OptionsLoaderTest.java"}, "test_case": {"identifier": "testApplyEnvs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testApplyEnvs() throws Exception {\n\t\tenvironmentVariables.set(MeshOptions.MESH_DEFAULT_LANG_ENV, \"ru\");\n\t\tenvironmentVariables.set(MeshOptions.MESH_UPDATECHECK_ENV, \"false\");\n\t\tenvironmentVariables.set(HttpServerConfig.MESH_HTTP_PORT_ENV, \"8100\");\n\t\tenvironmentVariables.set(ElasticSearchOptions.MESH_ELASTICSEARCH_URL_ENV, \"https://somewhere.com\");\n\t\tenvironmentVariables.set(MeshOptions.MESH_CLUSTER_INIT_ENV, \"true\");\n\t\tenvironmentVariables.set(HttpServerConfig.MESH_HTTP_CORS_ORIGIN_PATTERN_ENV, \"*\");\n\t\tenvironmentVariables.set(HttpServerConfig.MESH_HTTP_CORS_ENABLE_ENV, \"true\");\n\t\tenvironmentVariables.set(VertxOptions.MESH_VERTX_EVENT_POOL_SIZE_ENV, \"41\");\n\t\tenvironmentVariables.set(VertxOptions.MESH_VERTX_WORKER_POOL_SIZE_ENV, \"42\");\n\t\tenvironmentVariables.set(MeshOptions.MESH_LOCK_PATH_ENV, \"dummy/1234\");\n\t\tenvironmentVariables.set(MeshUploadOptions.MESH_BINARY_DIR_ENV, \"/uploads\");\n\t\tenvironmentVariables.set(MonitoringConfig.MESH_MONITORING_HTTP_HOST_ENV, \"0.0.0.0\");\n\t\tenvironmentVariables.set(ContentConfig.MESH_CONTENT_AUTO_PURGE_ENV, \"true\");\n\t\tenvironmentVariables.set(ElasticSearchOptions.MESH_ELASTICSEARCH_MAPPING_MODE_ENV, \"STRICT\");\n\t\tenvironmentVariables.set(ImageManipulatorOptions.MESH_IMAGE_CACHE_DIRECTORY_ENV, \"data\" + File.separator +\"binaryImageCache\");\n\n\t\tMeshOptions options = OptionsLoader.createOrloadOptions();\n\t\tassertEquals(8100, options.getHttpServerOptions().getPort());\n\t\tassertEquals(\"ru\", options.getDefaultLanguage());\n\t\tassertFalse(options.isUpdateCheckEnabled());\n\t\tassertEquals(\"https://somewhere.com\", options.getSearchOptions().getUrl());\n\t\tassertTrue(options.isInitClusterMode());\n\t\tassertTrue(options.getHttpServerOptions().getEnableCors());\n\t\tassertEquals(41, options.getVertxOptions().getEventPoolSize());\n\t\tassertEquals(42, options.getVertxOptions().getWorkerPoolSize());\n\t\tassertEquals(\"*\", options.getHttpServerOptions().getCorsAllowedOriginPattern());\n\t\tassertEquals(\"dummy/1234\", options.getLockPath());\n\t\tassertEquals(\"/uploads\", options.getUploadOptions().getDirectory());\n\t\tassertEquals(\"0.0.0.0\", options.getMonitoringOptions().getHost());\n\t\tassertTrue(options.getContentOptions().isAutoPurge());\n\t\tassertEquals(MappingMode.STRICT, options.getSearchOptions().getMappingMode());\n\t\tassertEquals(\"data\" + File.separator + \"binaryImageCache\", options.getImageOptions().getImageCacheDirectory());\n\t}", "signature": "void testApplyEnvs()", "full_signature": "@Test public void testApplyEnvs()", "class_method_signature": "OptionsLoaderTest.testApplyEnvs()", "testcase": true, "constructor": false, "invocations": ["set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "createOrloadOptions", "assertEquals", "getPort", "getHttpServerOptions", "assertEquals", "getDefaultLanguage", "assertFalse", "isUpdateCheckEnabled", "assertEquals", "getUrl", "getSearchOptions", "assertTrue", "isInitClusterMode", "assertTrue", "getEnableCors", "getHttpServerOptions", "assertEquals", "getEventPoolSize", "getVertxOptions", "assertEquals", "getWorkerPoolSize", "getVertxOptions", "assertEquals", "getCorsAllowedOriginPattern", "getHttpServerOptions", "assertEquals", "getLockPath", "assertEquals", "getDirectory", "getUploadOptions", "assertEquals", "getHost", "getMonitoringOptions", "assertTrue", "isAutoPurge", "getContentOptions", "assertEquals", "getMappingMode", "getSearchOptions", "assertEquals", "getImageCacheDirectory", "getImageOptions"]}, "focal_class": {"identifier": "OptionsLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(OptionsLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(OptionsLoader.class)", "var_name": "log"}], "methods": [{"identifier": "OptionsLoader", "parameters": "()", "modifiers": "private", "return": "", "signature": " OptionsLoader()", "full_signature": "private  OptionsLoader()", "class_method_signature": "OptionsLoader.OptionsLoader()", "testcase": false, "constructor": true}, {"identifier": "createOrloadOptions", "parameters": "(String... args)", "modifiers": "public static", "return": "MeshOptions", "signature": "MeshOptions createOrloadOptions(String... args)", "full_signature": "public static MeshOptions createOrloadOptions(String... args)", "class_method_signature": "OptionsLoader.createOrloadOptions(String... args)", "testcase": false, "constructor": false}, {"identifier": "createOrloadOptions", "parameters": "(MeshOptions defaultOption, String... args)", "modifiers": "public static", "return": "MeshOptions", "signature": "MeshOptions createOrloadOptions(MeshOptions defaultOption, String... args)", "full_signature": "public static MeshOptions createOrloadOptions(MeshOptions defaultOption, String... args)", "class_method_signature": "OptionsLoader.createOrloadOptions(MeshOptions defaultOption, String... args)", "testcase": false, "constructor": false}, {"identifier": "applyNonYamlProperties", "parameters": "(MeshOptions defaultOption, MeshOptions options)", "modifiers": "private static", "return": "void", "signature": "void applyNonYamlProperties(MeshOptions defaultOption, MeshOptions options)", "full_signature": "private static void applyNonYamlProperties(MeshOptions defaultOption, MeshOptions options)", "class_method_signature": "OptionsLoader.applyNonYamlProperties(MeshOptions defaultOption, MeshOptions options)", "testcase": false, "constructor": false}, {"identifier": "applyEnvironmentVariables", "parameters": "(MeshOptions options)", "modifiers": "private static", "return": "void", "signature": "void applyEnvironmentVariables(MeshOptions options)", "full_signature": "private static void applyEnvironmentVariables(MeshOptions options)", "class_method_signature": "OptionsLoader.applyEnvironmentVariables(MeshOptions options)", "testcase": false, "constructor": false}, {"identifier": "applyCommandLineArgs", "parameters": "(MeshOptions options, String... args)", "modifiers": "private static", "return": "void", "signature": "void applyCommandLineArgs(MeshOptions options, String... args)", "full_signature": "private static void applyCommandLineArgs(MeshOptions options, String... args)", "class_method_signature": "OptionsLoader.applyCommandLineArgs(MeshOptions options, String... args)", "testcase": false, "constructor": false}, {"identifier": "loadMeshOptions", "parameters": "(MeshOptions defaultOption)", "modifiers": "private static", "return": "MeshOptions", "signature": "MeshOptions loadMeshOptions(MeshOptions defaultOption)", "full_signature": "private static MeshOptions loadMeshOptions(MeshOptions defaultOption)", "class_method_signature": "OptionsLoader.loadMeshOptions(MeshOptions defaultOption)", "testcase": false, "constructor": false}, {"identifier": "generateDefaultConfig", "parameters": "(MeshOptions defaultOption)", "modifiers": "public static", "return": "MeshOptions", "signature": "MeshOptions generateDefaultConfig(MeshOptions defaultOption)", "full_signature": "public static MeshOptions generateDefaultConfig(MeshOptions defaultOption)", "class_method_signature": "OptionsLoader.generateDefaultConfig(MeshOptions defaultOption)", "testcase": false, "constructor": false}, {"identifier": "getYAMLMapper", "parameters": "()", "modifiers": "public static", "return": "ObjectMapper", "signature": "ObjectMapper getYAMLMapper()", "full_signature": "public static ObjectMapper getYAMLMapper()", "class_method_signature": "OptionsLoader.getYAMLMapper()", "testcase": false, "constructor": false}, {"identifier": "loadConfiguration", "parameters": "(InputStream ins)", "modifiers": "private static", "return": "MeshOptions", "signature": "MeshOptions loadConfiguration(InputStream ins)", "full_signature": "private static MeshOptions loadConfiguration(InputStream ins)", "class_method_signature": "OptionsLoader.loadConfiguration(InputStream ins)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/gentics/mesh/OptionsLoader.java"}, "focal_method": {"identifier": "createOrloadOptions", "parameters": "(String... args)", "modifiers": "public static", "return": "MeshOptions", "body": "public static MeshOptions createOrloadOptions(String... args) {\n\t\treturn createOrloadOptions(null, args);\n\t}", "signature": "MeshOptions createOrloadOptions(String... args)", "full_signature": "public static MeshOptions createOrloadOptions(String... args)", "class_method_signature": "OptionsLoader.createOrloadOptions(String... args)", "testcase": false, "constructor": false, "invocations": ["createOrloadOptions"]}, "repository": {"repo_id": 67999496, "url": "https://github.com/gentics/mesh", "stars": 412, "created": "9/12/2016 10:28:41 AM +00:00", "updates": "2020-01-27T10:25:42+00:00", "fork": "False", "license": "licensed"}}