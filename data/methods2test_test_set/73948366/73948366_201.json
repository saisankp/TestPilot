{"test_class": {"identifier": "AthenzUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/util/AthenzUtilsTest.java"}, "test_case": {"identifier": "testExtractServicePrincipalInvalidEmailFormat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExtractServicePrincipalInvalidEmailFormat() throws Exception {\n        try (InputStream inStream = new FileInputStream(\"src/test/resources/invalid_email_x509.cert\")) {\n            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n            X509Certificate cert = (X509Certificate) cf.generateCertificate(inStream);\n\n            assertNull(AthenzUtils.extractServicePrincipal(cert));\n        }\n    }", "signature": "void testExtractServicePrincipalInvalidEmailFormat()", "full_signature": "@Test public void testExtractServicePrincipalInvalidEmailFormat()", "class_method_signature": "AthenzUtilsTest.testExtractServicePrincipalInvalidEmailFormat()", "testcase": true, "constructor": false, "invocations": ["getInstance", "generateCertificate", "assertNull", "extractServicePrincipal"]}, "focal_class": {"identifier": "AthenzUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "extractServicePrincipal", "parameters": "(X509Certificate x509Cert)", "modifiers": "public static", "return": "String", "signature": "String extractServicePrincipal(X509Certificate x509Cert)", "full_signature": "public static String extractServicePrincipal(X509Certificate x509Cert)", "class_method_signature": "AthenzUtils.extractServicePrincipal(X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "isRoleCertificate", "parameters": "(X509Certificate x509Cert)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRoleCertificate(X509Certificate x509Cert)", "full_signature": "public static boolean isRoleCertificate(X509Certificate x509Cert)", "class_method_signature": "AthenzUtils.isRoleCertificate(X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "extractRoleName", "parameters": "(final String roleName)", "modifiers": "public static", "return": "String", "signature": "String extractRoleName(final String roleName)", "full_signature": "public static String extractRoleName(final String roleName)", "class_method_signature": "AthenzUtils.extractRoleName(final String roleName)", "testcase": false, "constructor": false}, {"identifier": "extractRoleDomainName", "parameters": "(final String roleName)", "modifiers": "public static", "return": "String", "signature": "String extractRoleDomainName(final String roleName)", "full_signature": "public static String extractRoleDomainName(final String roleName)", "class_method_signature": "AthenzUtils.extractRoleDomainName(final String roleName)", "testcase": false, "constructor": false}, {"identifier": "extractPrincipalDomainName", "parameters": "(final String principalName)", "modifiers": "public static", "return": "String", "signature": "String extractPrincipalDomainName(final String principalName)", "full_signature": "public static String extractPrincipalDomainName(final String principalName)", "class_method_signature": "AthenzUtils.extractPrincipalDomainName(final String principalName)", "testcase": false, "constructor": false}, {"identifier": "extractPrincipalServiceName", "parameters": "(final String principalName)", "modifiers": "public static", "return": "String", "signature": "String extractPrincipalServiceName(final String principalName)", "full_signature": "public static String extractPrincipalServiceName(final String principalName)", "class_method_signature": "AthenzUtils.extractPrincipalServiceName(final String principalName)", "testcase": false, "constructor": false}, {"identifier": "splitPrincipalName", "parameters": "(String name)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitPrincipalName(String name)", "full_signature": "public static String[] splitPrincipalName(String name)", "class_method_signature": "AthenzUtils.splitPrincipalName(String name)", "testcase": false, "constructor": false}, {"identifier": "getPrincipalName", "parameters": "(String domain, String service)", "modifiers": "public static", "return": "String", "signature": "String getPrincipalName(String domain, String service)", "full_signature": "public static String getPrincipalName(String domain, String service)", "class_method_signature": "AthenzUtils.getPrincipalName(String domain, String service)", "testcase": false, "constructor": false}, {"identifier": "AthenzUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " AthenzUtils()", "full_signature": "private  AthenzUtils()", "class_method_signature": "AthenzUtils.AthenzUtils()", "testcase": false, "constructor": true}, {"identifier": "splitCommaSeperatedSystemProperty", "parameters": "(String property)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> splitCommaSeperatedSystemProperty(String property)", "full_signature": "public static List<String> splitCommaSeperatedSystemProperty(String property)", "class_method_signature": "AthenzUtils.splitCommaSeperatedSystemProperty(String property)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/AthenzUtils.java"}, "focal_method": {"identifier": "extractServicePrincipal", "parameters": "(X509Certificate x509Cert)", "modifiers": "public static", "return": "String", "body": "public static String extractServicePrincipal(X509Certificate x509Cert) {\n\n        // let's first get the common name of the certificate\n\n        String principal = Crypto.extractX509CertCommonName(x509Cert);\n        if (principal == null) {\n            return null;\n        }\n\n        // check to see if we're dealing with role certificate which\n        // has the <domain>:role.<rolename> format or service\n        // certificate which has the <domain>.<service> format\n\n        if (principal.contains(AuthorityConsts.ROLE_SEP)) {\n\n            // it's a role certificate so we're going to extract\n            // our service principal from the SAN email field\n            // verify that we must have only a single email\n            // field in the certificate\n\n            final List<String> emails = Crypto.extractX509CertEmails(x509Cert);\n            if (emails.size() != 1) {\n                return null;\n            }\n\n            // athenz always verifies that we include a valid\n            // email in the certificate\n\n            final String email = emails.get(0);\n            int idx = email.indexOf('@');\n            if (idx == -1) {\n                return null;\n            }\n\n            principal = email.substring(0, idx);\n        }\n\n        return principal;\n    }", "signature": "String extractServicePrincipal(X509Certificate x509Cert)", "full_signature": "public static String extractServicePrincipal(X509Certificate x509Cert)", "class_method_signature": "AthenzUtils.extractServicePrincipal(X509Certificate x509Cert)", "testcase": false, "constructor": false, "invocations": ["extractX509CertCommonName", "contains", "extractX509CertEmails", "size", "get", "indexOf", "substring"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}