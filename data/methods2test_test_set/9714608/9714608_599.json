{"test_class": {"identifier": "BusItineraryHaltTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "private final TestEventHandler eventHandler = new TestEventHandler();", "modifier": "private final", "type": "TestEventHandler", "declarator": "eventHandler = new TestEventHandler()", "var_name": "eventHandler"}, {"original_string": "private RoadNetwork roadNetwork;", "modifier": "private", "type": "RoadNetwork", "declarator": "roadNetwork", "var_name": "roadNetwork"}, {"original_string": "private RoadPolyline segment1;", "modifier": "private", "type": "RoadPolyline", "declarator": "segment1", "var_name": "segment1"}, {"original_string": "private RoadPolyline segment2;", "modifier": "private", "type": "RoadPolyline", "declarator": "segment2", "var_name": "segment2"}, {"original_string": "private RoadPolyline segment3;", "modifier": "private", "type": "RoadPolyline", "declarator": "segment3", "var_name": "segment3"}, {"original_string": "private BusItineraryStub itinerary;", "modifier": "private", "type": "BusItineraryStub", "declarator": "itinerary", "var_name": "itinerary"}, {"original_string": "private BusItineraryHalt halt;", "modifier": "private", "type": "BusItineraryHalt", "declarator": "halt", "var_name": "halt"}, {"original_string": "private BusStop stop;", "modifier": "private", "type": "BusStop", "declarator": "stop", "var_name": "stop"}, {"original_string": "private BusNetwork busNetwork;", "modifier": "private", "type": "BusNetwork", "declarator": "busNetwork", "var_name": "busNetwork"}], "file": "advanced/gis/gisbus/src/test/java/org/arakhne/afc/gis/bus/network/BusItineraryHaltTest.java"}, "test_case": {"identifier": "testIsStartingBusHalt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIsStartingBusHalt() {\n\t\tthis.halt = this.itinerary.addBusHalt(\"HALT1\", BusItineraryHaltType.STOP_ON_DEMAND); //$NON-NLS-1$\n\t\tassertFalse(this.halt.isStartingBusHalt());\n\n\t\tthis.itinerary.addRoadSegment(this.segment1);\n\t\tassertFalse(this.halt.isStartingBusHalt());\n\n\t\tthis.itinerary.addRoadSegment(this.segment2);\n\t\tassertFalse(this.halt.isStartingBusHalt());\n\n\t\tthis.stop.setPosition(new GeoLocationPoint(10., 10.));\n\t\tassertFalse(this.halt.isStartingBusHalt());\n\n\t\tthis.halt.setBusStop(this.stop);\n\t\tassertFalse(this.halt.isStartingBusHalt());\n\n\t\tthis.halt.setRoadSegmentIndex(0);\n\t\tthis.halt.checkPrimitiveValidity();\n\t\tassertFalse(this.halt.isStartingBusHalt());\n\n\t\tthis.halt.setPositionOnSegment(1f);\n\t\tthis.halt.checkPrimitiveValidity();\n\t\tassertFalse(this.halt.isStartingBusHalt());\n\n\t\tBusStop tmpStop = new BusStopStub(this.busNetwork, \"STOP_TMP\"); //$NON-NLS-1$\n\t\ttmpStop.setPosition(new GeoLocationPoint(-10., -10.));\n\t\tBusItineraryHalt tmpHalt = this.itinerary.addBusHalt(\"HALT_TMP\", BusItineraryHaltType.STOP_ON_DEMAND); //$NON-NLS-1$\n\t\ttmpHalt.setBusStop(tmpStop);\n\t\ttmpHalt.setRoadSegmentIndex(1);\n\t\ttmpHalt.setPositionOnSegment(1f);\n\t\ttmpHalt.checkPrimitiveValidity();\n\n\t\tassertTrue(this.halt.isStartingBusHalt());\n\t}", "signature": "void testIsStartingBusHalt()", "full_signature": "@Test public void testIsStartingBusHalt()", "class_method_signature": "BusItineraryHaltTest.testIsStartingBusHalt()", "testcase": true, "constructor": false, "invocations": ["addBusHalt", "assertFalse", "isStartingBusHalt", "addRoadSegment", "assertFalse", "isStartingBusHalt", "addRoadSegment", "assertFalse", "isStartingBusHalt", "setPosition", "assertFalse", "isStartingBusHalt", "setBusStop", "assertFalse", "isStartingBusHalt", "setRoadSegmentIndex", "checkPrimitiveValidity", "assertFalse", "isStartingBusHalt", "setPositionOnSegment", "checkPrimitiveValidity", "assertFalse", "isStartingBusHalt", "setPosition", "addBusHalt", "setBusStop", "setRoadSegmentIndex", "setPositionOnSegment", "checkPrimitiveValidity", "assertTrue", "isStartingBusHalt"]}, "focal_class": {"identifier": "BusItineraryHalt", "superclass": "extends AbstractBusPrimitive<BusItinerary>", "interfaces": "", "fields": [{"original_string": "public static final double DISTANCE_BETWEEN_HALT_AND_ROAD_BORDER = 1.;", "modifier": "public static final", "type": "double", "declarator": "DISTANCE_BETWEEN_HALT_AND_ROAD_BORDER = 1.", "var_name": "DISTANCE_BETWEEN_HALT_AND_ROAD_BORDER"}, {"original_string": "private static final long serialVersionUID = 5282365930067534990L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 5282365930067534990L", "var_name": "serialVersionUID"}, {"original_string": "private Point1d bufferPosition1D;", "modifier": "private", "type": "Point1d", "declarator": "bufferPosition1D", "var_name": "bufferPosition1D"}, {"original_string": "private int roadSegmentIndex;", "modifier": "private", "type": "int", "declarator": "roadSegmentIndex", "var_name": "roadSegmentIndex"}, {"original_string": "private double curvilineDistance;", "modifier": "private", "type": "double", "declarator": "curvilineDistance", "var_name": "curvilineDistance"}, {"original_string": "private BusItineraryHaltType type = BusItineraryHaltType.STOP_ON_DEMAND;", "modifier": "private", "type": "BusItineraryHaltType", "declarator": "type = BusItineraryHaltType.STOP_ON_DEMAND", "var_name": "type"}, {"original_string": "private WeakReference<BusStop> busStop;", "modifier": "private", "type": "WeakReference<BusStop>", "declarator": "busStop", "var_name": "busStop"}, {"original_string": "private int invalidListIndex = Integer.MAX_VALUE;", "modifier": "private", "type": "int", "declarator": "invalidListIndex = Integer.MAX_VALUE", "var_name": "invalidListIndex"}], "methods": [{"identifier": "BusItineraryHalt", "parameters": "(BusItinerary itinerary, String name, BusItineraryHaltType type)", "modifiers": "", "return": "", "signature": " BusItineraryHalt(BusItinerary itinerary, String name, BusItineraryHaltType type)", "full_signature": "  BusItineraryHalt(BusItinerary itinerary, String name, BusItineraryHaltType type)", "class_method_signature": "BusItineraryHalt.BusItineraryHalt(BusItinerary itinerary, String name, BusItineraryHaltType type)", "testcase": false, "constructor": true}, {"identifier": "BusItineraryHalt", "parameters": "(UUID id, BusItinerary itinerary, String name, BusItineraryHaltType type)", "modifiers": "", "return": "", "signature": " BusItineraryHalt(UUID id, BusItinerary itinerary, String name, BusItineraryHaltType type)", "full_signature": "  BusItineraryHalt(UUID id, BusItinerary itinerary, String name, BusItineraryHaltType type)", "class_method_signature": "BusItineraryHalt.BusItineraryHalt(UUID id, BusItinerary itinerary, String name, BusItineraryHaltType type)", "testcase": false, "constructor": true}, {"identifier": "BusItineraryHalt", "parameters": "(BusItinerary itinerary, String name, BusItineraryHaltType type, AttributeCollection attributeProvider)", "modifiers": "", "return": "", "signature": " BusItineraryHalt(BusItinerary itinerary, String name, BusItineraryHaltType type, AttributeCollection attributeProvider)", "full_signature": "  BusItineraryHalt(BusItinerary itinerary, String name, BusItineraryHaltType type, AttributeCollection attributeProvider)", "class_method_signature": "BusItineraryHalt.BusItineraryHalt(BusItinerary itinerary, String name, BusItineraryHaltType type, AttributeCollection attributeProvider)", "testcase": false, "constructor": true}, {"identifier": "BusItineraryHalt", "parameters": "(UUID id, BusItinerary itinerary, String name, BusItineraryHaltType type,\n\t\t\tAttributeCollection attributeProvider)", "modifiers": "", "return": "", "signature": " BusItineraryHalt(UUID id, BusItinerary itinerary, String name, BusItineraryHaltType type,\n\t\t\tAttributeCollection attributeProvider)", "full_signature": "  BusItineraryHalt(UUID id, BusItinerary itinerary, String name, BusItineraryHaltType type,\n\t\t\tAttributeCollection attributeProvider)", "class_method_signature": "BusItineraryHalt.BusItineraryHalt(UUID id, BusItinerary itinerary, String name, BusItineraryHaltType type,\n\t\t\tAttributeCollection attributeProvider)", "testcase": false, "constructor": true}, {"identifier": "toJson", "parameters": "(JsonBuffer buffer)", "modifiers": "@Override @Pure public", "return": "void", "signature": "void toJson(JsonBuffer buffer)", "full_signature": "@Override @Pure public void toJson(JsonBuffer buffer)", "class_method_signature": "BusItineraryHalt.toJson(JsonBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "getFirstFreeBushaltName", "parameters": "(BusItinerary busItinerary)", "modifiers": "@Pure public static", "return": "String", "signature": "String getFirstFreeBushaltName(BusItinerary busItinerary)", "full_signature": "@Pure public static String getFirstFreeBushaltName(BusItinerary busItinerary)", "class_method_signature": "BusItineraryHalt.getFirstFreeBushaltName(BusItinerary busItinerary)", "testcase": false, "constructor": false}, {"identifier": "rebuild", "parameters": "(boolean fireEvents)", "modifiers": "@Override public", "return": "void", "signature": "void rebuild(boolean fireEvents)", "full_signature": "@Override public void rebuild(boolean fireEvents)", "class_method_signature": "BusItineraryHalt.rebuild(boolean fireEvents)", "testcase": false, "constructor": false}, {"identifier": "getInvalidListIndex", "parameters": "()", "modifiers": "@Pure public", "return": "int", "signature": "int getInvalidListIndex()", "full_signature": "@Pure public int getInvalidListIndex()", "class_method_signature": "BusItineraryHalt.getInvalidListIndex()", "testcase": false, "constructor": false}, {"identifier": "setInvalidListIndex", "parameters": "(int id)", "modifiers": "", "return": "void", "signature": "void setInvalidListIndex(int id)", "full_signature": " void setInvalidListIndex(int id)", "class_method_signature": "BusItineraryHalt.setInvalidListIndex(int id)", "testcase": false, "constructor": false}, {"identifier": "checkPrimitiveValidity", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void checkPrimitiveValidity()", "full_signature": "@Override protected void checkPrimitiveValidity()", "class_method_signature": "BusItineraryHalt.checkPrimitiveValidity()", "testcase": false, "constructor": false}, {"identifier": "fireValidityChangedFor", "parameters": "(Object changedObject, int index, BusPrimitiveInvalidity oldReason,\n\t\t\tBusPrimitiveInvalidity newReason)", "modifiers": "@Override protected", "return": "void", "signature": "void fireValidityChangedFor(Object changedObject, int index, BusPrimitiveInvalidity oldReason,\n\t\t\tBusPrimitiveInvalidity newReason)", "full_signature": "@Override protected void fireValidityChangedFor(Object changedObject, int index, BusPrimitiveInvalidity oldReason,\n\t\t\tBusPrimitiveInvalidity newReason)", "class_method_signature": "BusItineraryHalt.fireValidityChangedFor(Object changedObject, int index, BusPrimitiveInvalidity oldReason,\n\t\t\tBusPrimitiveInvalidity newReason)", "testcase": false, "constructor": false}, {"identifier": "getBusNetwork", "parameters": "()", "modifiers": "@Override @Pure public", "return": "BusNetwork", "signature": "BusNetwork getBusNetwork()", "full_signature": "@Override @Pure public BusNetwork getBusNetwork()", "class_method_signature": "BusItineraryHalt.getBusNetwork()", "testcase": false, "constructor": false}, {"identifier": "getBusStop", "parameters": "()", "modifiers": "@Pure public", "return": "BusStop", "signature": "BusStop getBusStop()", "full_signature": "@Pure public BusStop getBusStop()", "class_method_signature": "BusItineraryHalt.getBusStop()", "testcase": false, "constructor": false}, {"identifier": "setBusStop", "parameters": "(BusStop busStop)", "modifiers": "public", "return": "boolean", "signature": "boolean setBusStop(BusStop busStop)", "full_signature": "public boolean setBusStop(BusStop busStop)", "class_method_signature": "BusItineraryHalt.setBusStop(BusStop busStop)", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void setName(String name)", "full_signature": "@Override public void setName(String name)", "class_method_signature": "BusItineraryHalt.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "clearPositionBuffers", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void clearPositionBuffers()", "full_signature": "protected void clearPositionBuffers()", "class_method_signature": "BusItineraryHalt.clearPositionBuffers()", "testcase": false, "constructor": false}, {"identifier": "getPosition2D", "parameters": "()", "modifiers": "@Pure public", "return": "Point2d", "signature": "Point2d getPosition2D()", "full_signature": "@Pure public Point2d getPosition2D()", "class_method_signature": "BusItineraryHalt.getPosition2D()", "testcase": false, "constructor": false}, {"identifier": "getPosition1D", "parameters": "()", "modifiers": "@Pure public", "return": "Point1d", "signature": "Point1d getPosition1D()", "full_signature": "@Pure public Point1d getPosition1D()", "class_method_signature": "BusItineraryHalt.getPosition1D()", "testcase": false, "constructor": false}, {"identifier": "getRoadSegment", "parameters": "()", "modifiers": "@Pure public", "return": "RoadSegment", "signature": "RoadSegment getRoadSegment()", "full_signature": "@Pure public RoadSegment getRoadSegment()", "class_method_signature": "BusItineraryHalt.getRoadSegment()", "testcase": false, "constructor": false}, {"identifier": "getRoadSegmentIndex", "parameters": "()", "modifiers": "@Pure public", "return": "int", "signature": "int getRoadSegmentIndex()", "full_signature": "@Pure public int getRoadSegmentIndex()", "class_method_signature": "BusItineraryHalt.getRoadSegmentIndex()", "testcase": false, "constructor": false}, {"identifier": "setRoadSegmentIndex", "parameters": "(int idx)", "modifiers": "", "return": "void", "signature": "void setRoadSegmentIndex(int idx)", "full_signature": " void setRoadSegmentIndex(int idx)", "class_method_signature": "BusItineraryHalt.setRoadSegmentIndex(int idx)", "testcase": false, "constructor": false}, {"identifier": "getPositionOnSegment", "parameters": "()", "modifiers": "@Pure public", "return": "double", "signature": "double getPositionOnSegment()", "full_signature": "@Pure public double getPositionOnSegment()", "class_method_signature": "BusItineraryHalt.getPositionOnSegment()", "testcase": false, "constructor": false}, {"identifier": "setPositionOnSegment", "parameters": "(double position)", "modifiers": "", "return": "void", "signature": "void setPositionOnSegment(double position)", "full_signature": " void setPositionOnSegment(double position)", "class_method_signature": "BusItineraryHalt.setPositionOnSegment(double position)", "testcase": false, "constructor": false}, {"identifier": "getRoadSegmentDirection", "parameters": "()", "modifiers": "@Pure public", "return": "Direction1D", "signature": "Direction1D getRoadSegmentDirection()", "full_signature": "@Pure public Direction1D getRoadSegmentDirection()", "class_method_signature": "BusItineraryHalt.getRoadSegmentDirection()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Pure public", "return": "BusItineraryHaltType", "signature": "BusItineraryHaltType getType()", "full_signature": "@Pure public BusItineraryHaltType getType()", "class_method_signature": "BusItineraryHalt.getType()", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(BusItineraryHaltType type)", "modifiers": "public", "return": "void", "signature": "void setType(BusItineraryHaltType type)", "full_signature": "public void setType(BusItineraryHaltType type)", "class_method_signature": "BusItineraryHalt.setType(BusItineraryHaltType type)", "testcase": false, "constructor": false}, {"identifier": "isTerminus", "parameters": "()", "modifiers": "@Pure public", "return": "boolean", "signature": "boolean isTerminus()", "full_signature": "@Pure public boolean isTerminus()", "class_method_signature": "BusItineraryHalt.isTerminus()", "testcase": false, "constructor": false}, {"identifier": "indexInParent", "parameters": "()", "modifiers": "@Override @Pure public", "return": "int", "signature": "int indexInParent()", "full_signature": "@Override @Pure public int indexInParent()", "class_method_signature": "BusItineraryHalt.indexInParent()", "testcase": false, "constructor": false}, {"identifier": "isStartingBusHalt", "parameters": "()", "modifiers": "@Pure public", "return": "boolean", "signature": "boolean isStartingBusHalt()", "full_signature": "@Pure public boolean isStartingBusHalt()", "class_method_signature": "BusItineraryHalt.isStartingBusHalt()", "testcase": false, "constructor": false}, {"identifier": "isEndingBusHalt", "parameters": "()", "modifiers": "@Pure public", "return": "boolean", "signature": "boolean isEndingBusHalt()", "full_signature": "@Pure public boolean isEndingBusHalt()", "class_method_signature": "BusItineraryHalt.isEndingBusHalt()", "testcase": false, "constructor": false}, {"identifier": "insideBusHub", "parameters": "()", "modifiers": "@Pure public", "return": "boolean", "signature": "boolean insideBusHub()", "full_signature": "@Pure public boolean insideBusHub()", "class_method_signature": "BusItineraryHalt.insideBusHub()", "testcase": false, "constructor": false}, {"identifier": "busHubs", "parameters": "()", "modifiers": "@Pure public", "return": "Iterable<BusHub>", "signature": "Iterable<BusHub> busHubs()", "full_signature": "@Pure public Iterable<BusHub> busHubs()", "class_method_signature": "BusItineraryHalt.busHubs()", "testcase": false, "constructor": false}, {"identifier": "busHubIterator", "parameters": "()", "modifiers": "@Pure public", "return": "Iterator<BusHub>", "signature": "Iterator<BusHub> busHubIterator()", "full_signature": "@Pure public Iterator<BusHub> busHubIterator()", "class_method_signature": "BusItineraryHalt.busHubIterator()", "testcase": false, "constructor": false}, {"identifier": "calcBounds", "parameters": "()", "modifiers": "@Override @Pure protected", "return": "Rectangle2d", "signature": "Rectangle2d calcBounds()", "full_signature": "@Override @Pure protected Rectangle2d calcBounds()", "class_method_signature": "BusItineraryHalt.calcBounds()", "testcase": false, "constructor": false}, {"identifier": "getShape", "parameters": "()", "modifiers": "@Override public", "return": "Shape2d<?>", "signature": "Shape2d<?> getShape()", "full_signature": "@Override public Shape2d<?> getShape()", "class_method_signature": "BusItineraryHalt.getShape()", "testcase": false, "constructor": false}, {"identifier": "getGeoLocation", "parameters": "()", "modifiers": "@Override @Pure public final", "return": "GeoLocation", "signature": "GeoLocation getGeoLocation()", "full_signature": "@Override @Pure public final GeoLocation getGeoLocation()", "class_method_signature": "BusItineraryHalt.getGeoLocation()", "testcase": false, "constructor": false}, {"identifier": "getGeoPosition", "parameters": "()", "modifiers": "@Pure public", "return": "GeoLocationPoint", "signature": "GeoLocationPoint getGeoPosition()", "full_signature": "@Pure public GeoLocationPoint getGeoPosition()", "class_method_signature": "BusItineraryHalt.getGeoPosition()", "testcase": false, "constructor": false}, {"identifier": "distanceToBusStop", "parameters": "()", "modifiers": "@Pure public", "return": "double", "signature": "double distanceToBusStop()", "full_signature": "@Pure public double distanceToBusStop()", "class_method_signature": "BusItineraryHalt.distanceToBusStop()", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(double x, double y)", "modifiers": "@Pure public", "return": "double", "signature": "double distance(double x, double y)", "full_signature": "@Pure public double distance(double x, double y)", "class_method_signature": "BusItineraryHalt.distance(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(Point2D<?, ?> point)", "modifiers": "@Pure public", "return": "double", "signature": "double distance(Point2D<?, ?> point)", "full_signature": "@Pure public double distance(Point2D<?, ?> point)", "class_method_signature": "BusItineraryHalt.distance(Point2D<?, ?> point)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(BusItineraryHalt halt)", "modifiers": "@Pure public", "return": "double", "signature": "double distance(BusItineraryHalt halt)", "full_signature": "@Pure public double distance(BusItineraryHalt halt)", "class_method_signature": "BusItineraryHalt.distance(BusItineraryHalt halt)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(BusStop busStop)", "modifiers": "@Pure public", "return": "double", "signature": "double distance(BusStop busStop)", "full_signature": "@Pure public double distance(BusStop busStop)", "class_method_signature": "BusItineraryHalt.distance(BusStop busStop)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(GeoLocationPoint point)", "modifiers": "@Pure public", "return": "double", "signature": "double distance(GeoLocationPoint point)", "full_signature": "@Pure public double distance(GeoLocationPoint point)", "class_method_signature": "BusItineraryHalt.distance(GeoLocationPoint point)", "testcase": false, "constructor": false}], "file": "advanced/gis/gisbus/src/main/java/org/arakhne/afc/gis/bus/network/BusItineraryHalt.java"}, "focal_method": {"identifier": "isStartingBusHalt", "parameters": "()", "modifiers": "@Pure public", "return": "boolean", "body": "@Pure\n\tpublic boolean isStartingBusHalt() {\n\t\tfinal BusItinerary itinerary = getContainer();\n\t\tif (itinerary != null && itinerary.isValidPrimitive()) {\n\t\t\ttry {\n\t\t\t\treturn itinerary.getBusHaltAt(0) == this;\n\t\t\t} catch (IndexOutOfBoundsException exception) {\n\t\t\t\t// invalid halt\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "signature": "boolean isStartingBusHalt()", "full_signature": "@Pure public boolean isStartingBusHalt()", "class_method_signature": "BusItineraryHalt.isStartingBusHalt()", "testcase": false, "constructor": false, "invocations": ["getContainer", "isValidPrimitive", "getBusHaltAt"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}