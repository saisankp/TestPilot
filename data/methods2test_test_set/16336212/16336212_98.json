{"test_class": {"identifier": "ThreadContextImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ThreadContextImpl threadContext;", "modifier": "private", "type": "ThreadContextImpl", "declarator": "threadContext", "var_name": "threadContext"}, {"original_string": "private MessageSupplier messageSupplier = mock(MessageSupplier.class);", "modifier": "private", "type": "MessageSupplier", "declarator": "messageSupplier = mock(MessageSupplier.class)", "var_name": "messageSupplier"}, {"original_string": "private QueryMessageSupplier queryMessageSupplier = mock(QueryMessageSupplier.class);", "modifier": "private", "type": "QueryMessageSupplier", "declarator": "queryMessageSupplier = mock(QueryMessageSupplier.class)", "var_name": "queryMessageSupplier"}, {"original_string": "private TimerNameImpl timerName = mock(TimerNameImpl.class);", "modifier": "private", "type": "TimerNameImpl", "declarator": "timerName = mock(TimerNameImpl.class)", "var_name": "timerName"}], "file": "agent/core/src/test/java/org/glowroot/agent/impl/ThreadContextImplTest.java"}, "test_case": {"identifier": "testStartQueryEntryWithExecutionCount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStartQueryEntryWithExecutionCount() {\n        assertThat(threadContext.startQueryEntry(null, \"text\", 1, queryMessageSupplier, timerName))\n                .isEqualTo(NopTransactionService.QUERY_ENTRY);\n        assertThat(threadContext.startQueryEntry(\"type\", null, 1, queryMessageSupplier, timerName))\n                .isEqualTo(NopTransactionService.QUERY_ENTRY);\n        assertThat(threadContext.startQueryEntry(\"type\", \"text\", 1, null, timerName))\n                .isEqualTo(NopTransactionService.QUERY_ENTRY);\n        assertThat(threadContext.startQueryEntry(\"type\", \"text\", 1, queryMessageSupplier, null))\n                .isEqualTo(NopTransactionService.QUERY_ENTRY);\n        assertThat(threadContext.startQueryEntry(\"type\", \"text\", 1, queryMessageSupplier, timerName)\n                .getClass().getName()).endsWith(\"$DummyTraceEntryOrQuery\");\n    }", "signature": "void testStartQueryEntryWithExecutionCount()", "full_signature": "@Test public void testStartQueryEntryWithExecutionCount()", "class_method_signature": "ThreadContextImplTest.testStartQueryEntryWithExecutionCount()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "startQueryEntry", "isEqualTo", "assertThat", "startQueryEntry", "isEqualTo", "assertThat", "startQueryEntry", "isEqualTo", "assertThat", "startQueryEntry", "endsWith", "assertThat", "getName", "getClass", "startQueryEntry"]}, "focal_class": {"identifier": "ThreadContextImpl", "superclass": "", "interfaces": "implements ThreadContextPlus", "fields": [{"original_string": "private static final boolean CAPTURE_AUXILIARY_THREAD_LOCATION_STACK_TRACES =\n            Boolean.getBoolean(\"glowroot.debug.captureAuxiliaryThreadLocationStackTraces\");", "modifier": "private static final", "type": "boolean", "declarator": "CAPTURE_AUXILIARY_THREAD_LOCATION_STACK_TRACES =\n            Boolean.getBoolean(\"glowroot.debug.captureAuxiliaryThreadLocationStackTraces\")", "var_name": "CAPTURE_AUXILIARY_THREAD_LOCATION_STACK_TRACES"}, {"original_string": "private static final String LIMIT_EXCEEDED_BUCKET = \"LIMIT EXCEEDED BUCKET\";", "modifier": "private static final", "type": "String", "declarator": "LIMIT_EXCEEDED_BUCKET = \"LIMIT EXCEEDED BUCKET\"", "var_name": "LIMIT_EXCEEDED_BUCKET"}, {"original_string": "private static final MessageSupplier DETACHED_MESSAGE_SUPPLIER = MessageSupplier\n            .create(\"this auxiliary thread was still running when the transaction ended\");", "modifier": "private static final", "type": "MessageSupplier", "declarator": "DETACHED_MESSAGE_SUPPLIER = MessageSupplier\n            .create(\"this auxiliary thread was still running when the transaction ended\")", "var_name": "DETACHED_MESSAGE_SUPPLIER"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(ThreadContextImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ThreadContextImpl.class)", "var_name": "logger"}, {"original_string": "private final Transaction transaction;", "modifier": "private final", "type": "Transaction", "declarator": "transaction", "var_name": "transaction"}, {"original_string": "private final @Nullable TraceEntryImpl parentTraceEntry;", "modifier": "private final @Nullable", "type": "TraceEntryImpl", "declarator": "parentTraceEntry", "var_name": "parentTraceEntry"}, {"original_string": "private final @Nullable TraceEntryImpl parentThreadContextPriorEntry;", "modifier": "private final @Nullable", "type": "TraceEntryImpl", "declarator": "parentThreadContextPriorEntry", "var_name": "parentThreadContextPriorEntry"}, {"original_string": "private final TimerImpl rootTimer;", "modifier": "private final", "type": "TimerImpl", "declarator": "rootTimer", "var_name": "rootTimer"}, {"original_string": "private @Nullable TimerImpl currentTimer;", "modifier": "private @Nullable", "type": "TimerImpl", "declarator": "currentTimer", "var_name": "currentTimer"}, {"original_string": "private int currentNestingGroupId;", "modifier": "private", "type": "int", "declarator": "currentNestingGroupId", "var_name": "currentNestingGroupId"}, {"original_string": "private int currentSuppressionKeyId;", "modifier": "private", "type": "int", "declarator": "currentSuppressionKeyId", "var_name": "currentSuppressionKeyId"}, {"original_string": "private final @Nullable ThreadStatsComponent threadStatsComponent;", "modifier": "private final @Nullable", "type": "ThreadStatsComponent", "declarator": "threadStatsComponent", "var_name": "threadStatsComponent"}, {"original_string": "private final TraceEntryComponent traceEntryComponent;", "modifier": "private final", "type": "TraceEntryComponent", "declarator": "traceEntryComponent", "var_name": "traceEntryComponent"}, {"original_string": "private boolean transactionAsyncComplete;", "modifier": "private", "type": "boolean", "declarator": "transactionAsyncComplete", "var_name": "transactionAsyncComplete"}, {"original_string": "private @MonotonicNonNull SyncQueryData headQueryData;", "modifier": "private @MonotonicNonNull", "type": "SyncQueryData", "declarator": "headQueryData", "var_name": "headQueryData"}, {"original_string": "private @MonotonicNonNull SyncQueryData headServiceCallData;", "modifier": "private @MonotonicNonNull", "type": "SyncQueryData", "declarator": "headServiceCallData", "var_name": "headServiceCallData"}, {"original_string": "private @MonotonicNonNull QueryDataMap queriesForFirstType;", "modifier": "private @MonotonicNonNull", "type": "QueryDataMap", "declarator": "queriesForFirstType", "var_name": "queriesForFirstType"}, {"original_string": "private @MonotonicNonNull Map<String, QueryDataMap> allQueryTypesMap;", "modifier": "private @MonotonicNonNull", "type": "Map<String, QueryDataMap>", "declarator": "allQueryTypesMap", "var_name": "allQueryTypesMap"}, {"original_string": "private @MonotonicNonNull QueryDataMap serviceCallsForFirstType;", "modifier": "private @MonotonicNonNull", "type": "QueryDataMap", "declarator": "serviceCallsForFirstType", "var_name": "serviceCallsForFirstType"}, {"original_string": "private @MonotonicNonNull Map<String, QueryDataMap> allServiceCallTypesMap;", "modifier": "private @MonotonicNonNull", "type": "Map<String, QueryDataMap>", "declarator": "allServiceCallTypesMap", "var_name": "allServiceCallTypesMap"}, {"original_string": "private int queryAggregateCounter;", "modifier": "private", "type": "int", "declarator": "queryAggregateCounter", "var_name": "queryAggregateCounter"}, {"original_string": "private int serviceCallAggregateCounter;", "modifier": "private", "type": "int", "declarator": "serviceCallAggregateCounter", "var_name": "serviceCallAggregateCounter"}, {"original_string": "private final int maxQueryAggregates;", "modifier": "private final", "type": "int", "declarator": "maxQueryAggregates", "var_name": "maxQueryAggregates"}, {"original_string": "private final int maxServiceCallAggregates;", "modifier": "private final", "type": "int", "declarator": "maxServiceCallAggregates", "var_name": "maxServiceCallAggregates"}, {"original_string": "private final long threadId;", "modifier": "private final", "type": "long", "declarator": "threadId", "var_name": "threadId"}, {"original_string": "private final boolean limitExceededAuxThreadContext;", "modifier": "private final", "type": "boolean", "declarator": "limitExceededAuxThreadContext", "var_name": "limitExceededAuxThreadContext"}, {"original_string": "private final Ticker ticker;", "modifier": "private final", "type": "Ticker", "declarator": "ticker", "var_name": "ticker"}, {"original_string": "private final ThreadContextThreadLocal.Holder threadContextHolder;", "modifier": "private final", "type": "ThreadContextThreadLocal.Holder", "declarator": "threadContextHolder", "var_name": "threadContextHolder"}, {"original_string": "private @Nullable ServletRequestInfo servletRequestInfo;", "modifier": "private @Nullable", "type": "ServletRequestInfo", "declarator": "servletRequestInfo", "var_name": "servletRequestInfo"}, {"original_string": "private volatile boolean mayHaveChildAuxThreadContext;", "modifier": "private volatile", "type": "boolean", "declarator": "mayHaveChildAuxThreadContext", "var_name": "mayHaveChildAuxThreadContext"}, {"original_string": "private volatile boolean detached;", "modifier": "private volatile", "type": "boolean", "declarator": "detached", "var_name": "detached"}, {"original_string": "private final @Nullable ThreadContextImpl outerTransactionThreadContext;", "modifier": "private final @Nullable", "type": "ThreadContextImpl", "declarator": "outerTransactionThreadContext", "var_name": "outerTransactionThreadContext"}, {"original_string": "private @Nullable ThreadContextImpl innerTransactionThreadContext;", "modifier": "private @Nullable", "type": "ThreadContextImpl", "declarator": "innerTransactionThreadContext", "var_name": "innerTransactionThreadContext"}], "methods": [{"identifier": "ThreadContextImpl", "parameters": "(Transaction transaction, @Nullable TraceEntryImpl parentTraceEntry,\n            @Nullable TraceEntryImpl parentThreadContextPriorEntry, MessageSupplier messageSupplier,\n            TimerName rootTimerName, long startTick, boolean captureThreadStats,\n            int maxQueryAggregates, int maxServiceCallAggregates,\n            @Nullable ThreadAllocatedBytes threadAllocatedBytes,\n            boolean limitExceededAuxThreadContext, Ticker ticker,\n            ThreadContextThreadLocal.Holder threadContextHolder,\n            @Nullable ServletRequestInfo servletRequestInfo, int rootNestingGroupId,\n            int rootSuppressionKeyId)", "modifiers": "", "return": "", "signature": " ThreadContextImpl(Transaction transaction, @Nullable TraceEntryImpl parentTraceEntry,\n            @Nullable TraceEntryImpl parentThreadContextPriorEntry, MessageSupplier messageSupplier,\n            TimerName rootTimerName, long startTick, boolean captureThreadStats,\n            int maxQueryAggregates, int maxServiceCallAggregates,\n            @Nullable ThreadAllocatedBytes threadAllocatedBytes,\n            boolean limitExceededAuxThreadContext, Ticker ticker,\n            ThreadContextThreadLocal.Holder threadContextHolder,\n            @Nullable ServletRequestInfo servletRequestInfo, int rootNestingGroupId,\n            int rootSuppressionKeyId)", "full_signature": "  ThreadContextImpl(Transaction transaction, @Nullable TraceEntryImpl parentTraceEntry,\n            @Nullable TraceEntryImpl parentThreadContextPriorEntry, MessageSupplier messageSupplier,\n            TimerName rootTimerName, long startTick, boolean captureThreadStats,\n            int maxQueryAggregates, int maxServiceCallAggregates,\n            @Nullable ThreadAllocatedBytes threadAllocatedBytes,\n            boolean limitExceededAuxThreadContext, Ticker ticker,\n            ThreadContextThreadLocal.Holder threadContextHolder,\n            @Nullable ServletRequestInfo servletRequestInfo, int rootNestingGroupId,\n            int rootSuppressionKeyId)", "class_method_signature": "ThreadContextImpl.ThreadContextImpl(Transaction transaction, @Nullable TraceEntryImpl parentTraceEntry,\n            @Nullable TraceEntryImpl parentThreadContextPriorEntry, MessageSupplier messageSupplier,\n            TimerName rootTimerName, long startTick, boolean captureThreadStats,\n            int maxQueryAggregates, int maxServiceCallAggregates,\n            @Nullable ThreadAllocatedBytes threadAllocatedBytes,\n            boolean limitExceededAuxThreadContext, Ticker ticker,\n            ThreadContextThreadLocal.Holder threadContextHolder,\n            @Nullable ServletRequestInfo servletRequestInfo, int rootNestingGroupId,\n            int rootSuppressionKeyId)", "testcase": false, "constructor": true}, {"identifier": "getTransaction", "parameters": "()", "modifiers": "public", "return": "Transaction", "signature": "Transaction getTransaction()", "full_signature": "public Transaction getTransaction()", "class_method_signature": "ThreadContextImpl.getTransaction()", "testcase": false, "constructor": false}, {"identifier": "getParentThreadContextPriorEntry", "parameters": "()", "modifiers": "@Nullable", "return": "TraceEntryImpl", "signature": "TraceEntryImpl getParentThreadContextPriorEntry()", "full_signature": "@Nullable TraceEntryImpl getParentThreadContextPriorEntry()", "class_method_signature": "ThreadContextImpl.getParentThreadContextPriorEntry()", "testcase": false, "constructor": false}, {"identifier": "getTailEntry", "parameters": "()", "modifiers": "", "return": "TraceEntryImpl", "signature": "TraceEntryImpl getTailEntry()", "full_signature": " TraceEntryImpl getTailEntry()", "class_method_signature": "ThreadContextImpl.getTailEntry()", "testcase": false, "constructor": false}, {"identifier": "getRootEntry", "parameters": "()", "modifiers": "", "return": "TraceEntryImpl", "signature": "TraceEntryImpl getRootEntry()", "full_signature": " TraceEntryImpl getRootEntry()", "class_method_signature": "ThreadContextImpl.getRootEntry()", "testcase": false, "constructor": false}, {"identifier": "getRootTimer", "parameters": "()", "modifiers": "", "return": "TimerImpl", "signature": "TimerImpl getRootTimer()", "full_signature": " TimerImpl getRootTimer()", "class_method_signature": "ThreadContextImpl.getRootTimer()", "testcase": false, "constructor": false}, {"identifier": "getThreadStats", "parameters": "()", "modifiers": "", "return": "ThreadStats", "signature": "ThreadStats getThreadStats()", "full_signature": " ThreadStats getThreadStats()", "class_method_signature": "ThreadContextImpl.getThreadStats()", "testcase": false, "constructor": false}, {"identifier": "getCpuNanos", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getCpuNanos()", "full_signature": " long getCpuNanos()", "class_method_signature": "ThreadContextImpl.getCpuNanos()", "testcase": false, "constructor": false}, {"identifier": "getThreadId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getThreadId()", "full_signature": "public long getThreadId()", "class_method_signature": "ThreadContextImpl.getThreadId()", "testcase": false, "constructor": false}, {"identifier": "isCompleted", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isCompleted()", "full_signature": " boolean isCompleted()", "class_method_signature": "ThreadContextImpl.isCompleted()", "testcase": false, "constructor": false}, {"identifier": "isActive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isActive()", "full_signature": "public boolean isActive()", "class_method_signature": "ThreadContextImpl.isActive()", "testcase": false, "constructor": false}, {"identifier": "getCurrentTimer", "parameters": "()", "modifiers": "public @Nullable", "return": "TimerImpl", "signature": "TimerImpl getCurrentTimer()", "full_signature": "public @Nullable TimerImpl getCurrentTimer()", "class_method_signature": "ThreadContextImpl.getCurrentTimer()", "testcase": false, "constructor": false}, {"identifier": "setCurrentTimer", "parameters": "(@Nullable TimerImpl currentTimer)", "modifiers": "", "return": "void", "signature": "void setCurrentTimer(@Nullable TimerImpl currentTimer)", "full_signature": " void setCurrentTimer(@Nullable TimerImpl currentTimer)", "class_method_signature": "ThreadContextImpl.setCurrentTimer(@Nullable TimerImpl currentTimer)", "testcase": false, "constructor": false}, {"identifier": "getCurrentNestingGroupId", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getCurrentNestingGroupId()", "full_signature": "@Override public int getCurrentNestingGroupId()", "class_method_signature": "ThreadContextImpl.getCurrentNestingGroupId()", "testcase": false, "constructor": false}, {"identifier": "setCurrentNestingGroupId", "parameters": "(int nestingGroupId)", "modifiers": "@Override public", "return": "void", "signature": "void setCurrentNestingGroupId(int nestingGroupId)", "full_signature": "@Override public void setCurrentNestingGroupId(int nestingGroupId)", "class_method_signature": "ThreadContextImpl.setCurrentNestingGroupId(int nestingGroupId)", "testcase": false, "constructor": false}, {"identifier": "getCurrentSuppressionKeyId", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getCurrentSuppressionKeyId()", "full_signature": "@Override public int getCurrentSuppressionKeyId()", "class_method_signature": "ThreadContextImpl.getCurrentSuppressionKeyId()", "testcase": false, "constructor": false}, {"identifier": "setCurrentSuppressionKeyId", "parameters": "(int suppressionKeyId)", "modifiers": "@Override public", "return": "void", "signature": "void setCurrentSuppressionKeyId(int suppressionKeyId)", "full_signature": "@Override public void setCurrentSuppressionKeyId(int suppressionKeyId)", "class_method_signature": "ThreadContextImpl.setCurrentSuppressionKeyId(int suppressionKeyId)", "testcase": false, "constructor": false}, {"identifier": "isMergeable", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isMergeable()", "full_signature": " boolean isMergeable()", "class_method_signature": "ThreadContextImpl.isMergeable()", "testcase": false, "constructor": false}, {"identifier": "mergeQueriesInto", "parameters": "(QueryCollector collector)", "modifiers": "", "return": "void", "signature": "void mergeQueriesInto(QueryCollector collector)", "full_signature": " void mergeQueriesInto(QueryCollector collector)", "class_method_signature": "ThreadContextImpl.mergeQueriesInto(QueryCollector collector)", "testcase": false, "constructor": false}, {"identifier": "mergeServiceCallsInto", "parameters": "(ServiceCallCollector collector)", "modifiers": "", "return": "void", "signature": "void mergeServiceCallsInto(ServiceCallCollector collector)", "full_signature": " void mergeServiceCallsInto(ServiceCallCollector collector)", "class_method_signature": "ThreadContextImpl.mergeServiceCallsInto(ServiceCallCollector collector)", "testcase": false, "constructor": false}, {"identifier": "getCaptureThreadStats", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean getCaptureThreadStats()", "full_signature": " boolean getCaptureThreadStats()", "class_method_signature": "ThreadContextImpl.getCaptureThreadStats()", "testcase": false, "constructor": false}, {"identifier": "isCompleted", "parameters": "(long captureTick)", "modifiers": "private", "return": "boolean", "signature": "boolean isCompleted(long captureTick)", "full_signature": "private boolean isCompleted(long captureTick)", "class_method_signature": "ThreadContextImpl.isCompleted(long captureTick)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateQueryData", "parameters": "(String queryType, String queryText,\n            boolean bypassLimit)", "modifiers": "private", "return": "SyncQueryData", "signature": "SyncQueryData getOrCreateQueryData(String queryType, String queryText,\n            boolean bypassLimit)", "full_signature": "private SyncQueryData getOrCreateQueryData(String queryType, String queryText,\n            boolean bypassLimit)", "class_method_signature": "ThreadContextImpl.getOrCreateQueryData(String queryType, String queryText,\n            boolean bypassLimit)", "testcase": false, "constructor": false}, {"identifier": "createQueryData", "parameters": "(QueryDataMap queriesForType, String queryType,\n            String queryText, boolean bypassLimit)", "modifiers": "private", "return": "SyncQueryData", "signature": "SyncQueryData createQueryData(QueryDataMap queriesForType, String queryType,\n            String queryText, boolean bypassLimit)", "full_signature": "private SyncQueryData createQueryData(QueryDataMap queriesForType, String queryType,\n            String queryText, boolean bypassLimit)", "class_method_signature": "ThreadContextImpl.createQueryData(QueryDataMap queriesForType, String queryType,\n            String queryText, boolean bypassLimit)", "testcase": false, "constructor": false}, {"identifier": "createQueryData", "parameters": "(QueryDataMap queriesForType, String queryType,\n            String queryText)", "modifiers": "private", "return": "SyncQueryData", "signature": "SyncQueryData createQueryData(QueryDataMap queriesForType, String queryType,\n            String queryText)", "full_signature": "private SyncQueryData createQueryData(QueryDataMap queriesForType, String queryType,\n            String queryText)", "class_method_signature": "ThreadContextImpl.createQueryData(QueryDataMap queriesForType, String queryType,\n            String queryText)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateServiceCallData", "parameters": "(String serviceCallType, String serviceCallText,\n            boolean bypassLimit)", "modifiers": "private", "return": "SyncQueryData", "signature": "SyncQueryData getOrCreateServiceCallData(String serviceCallType, String serviceCallText,\n            boolean bypassLimit)", "full_signature": "private SyncQueryData getOrCreateServiceCallData(String serviceCallType, String serviceCallText,\n            boolean bypassLimit)", "class_method_signature": "ThreadContextImpl.getOrCreateServiceCallData(String serviceCallType, String serviceCallText,\n            boolean bypassLimit)", "testcase": false, "constructor": false}, {"identifier": "createServiceCallData", "parameters": "(QueryDataMap serviceCallsForType,\n            String serviceCallType, String serviceCallText, boolean bypassLimit)", "modifiers": "private", "return": "SyncQueryData", "signature": "SyncQueryData createServiceCallData(QueryDataMap serviceCallsForType,\n            String serviceCallType, String serviceCallText, boolean bypassLimit)", "full_signature": "private SyncQueryData createServiceCallData(QueryDataMap serviceCallsForType,\n            String serviceCallType, String serviceCallText, boolean bypassLimit)", "class_method_signature": "ThreadContextImpl.createServiceCallData(QueryDataMap serviceCallsForType,\n            String serviceCallType, String serviceCallText, boolean bypassLimit)", "testcase": false, "constructor": false}, {"identifier": "createServiceCallData", "parameters": "(QueryDataMap serviceCallsForType,\n            String serviceCallType, String serviceCallText)", "modifiers": "private", "return": "SyncQueryData", "signature": "SyncQueryData createServiceCallData(QueryDataMap serviceCallsForType,\n            String serviceCallType, String serviceCallText)", "full_signature": "private SyncQueryData createServiceCallData(QueryDataMap serviceCallsForType,\n            String serviceCallType, String serviceCallText)", "class_method_signature": "ThreadContextImpl.createServiceCallData(QueryDataMap serviceCallsForType,\n            String serviceCallType, String serviceCallText)", "testcase": false, "constructor": false}, {"identifier": "allowAnotherQueryAggregate", "parameters": "(boolean bypassLimit)", "modifiers": "private", "return": "boolean", "signature": "boolean allowAnotherQueryAggregate(boolean bypassLimit)", "full_signature": "private boolean allowAnotherQueryAggregate(boolean bypassLimit)", "class_method_signature": "ThreadContextImpl.allowAnotherQueryAggregate(boolean bypassLimit)", "testcase": false, "constructor": false}, {"identifier": "allowAnotherServiceCallAggregate", "parameters": "(boolean bypassLimit)", "modifiers": "private", "return": "boolean", "signature": "boolean allowAnotherServiceCallAggregate(boolean bypassLimit)", "full_signature": "private boolean allowAnotherServiceCallAggregate(boolean bypassLimit)", "class_method_signature": "ThreadContextImpl.allowAnotherServiceCallAggregate(boolean bypassLimit)", "testcase": false, "constructor": false}, {"identifier": "addErrorEntry", "parameters": "(long startTick, long endTick, @Nullable Object messageSupplier,\n            @Nullable QueryData queryData, ErrorMessage errorMessage)", "modifiers": "", "return": "TraceEntryImpl", "signature": "TraceEntryImpl addErrorEntry(long startTick, long endTick, @Nullable Object messageSupplier,\n            @Nullable QueryData queryData, ErrorMessage errorMessage)", "full_signature": " TraceEntryImpl addErrorEntry(long startTick, long endTick, @Nullable Object messageSupplier,\n            @Nullable QueryData queryData, ErrorMessage errorMessage)", "class_method_signature": "ThreadContextImpl.addErrorEntry(long startTick, long endTick, @Nullable Object messageSupplier,\n            @Nullable QueryData queryData, ErrorMessage errorMessage)", "testcase": false, "constructor": false}, {"identifier": "startAsyncTraceEntry", "parameters": "(long startTick, MessageSupplier messageSupplier,\n            TimerImpl syncTimer, AsyncTimer asyncTimer)", "modifiers": "private", "return": "TraceEntryImpl", "signature": "TraceEntryImpl startAsyncTraceEntry(long startTick, MessageSupplier messageSupplier,\n            TimerImpl syncTimer, AsyncTimer asyncTimer)", "full_signature": "private TraceEntryImpl startAsyncTraceEntry(long startTick, MessageSupplier messageSupplier,\n            TimerImpl syncTimer, AsyncTimer asyncTimer)", "class_method_signature": "ThreadContextImpl.startAsyncTraceEntry(long startTick, MessageSupplier messageSupplier,\n            TimerImpl syncTimer, AsyncTimer asyncTimer)", "testcase": false, "constructor": false}, {"identifier": "startAsyncQueryEntry", "parameters": "(long startTick,\n            QueryMessageSupplier queryMessageSupplier, TimerImpl syncTimer,\n            AsyncTimer asyncTimer, @Nullable QueryData queryData, long queryExecutionCount)", "modifiers": "private", "return": "TraceEntryImpl", "signature": "TraceEntryImpl startAsyncQueryEntry(long startTick,\n            QueryMessageSupplier queryMessageSupplier, TimerImpl syncTimer,\n            AsyncTimer asyncTimer, @Nullable QueryData queryData, long queryExecutionCount)", "full_signature": "private TraceEntryImpl startAsyncQueryEntry(long startTick,\n            QueryMessageSupplier queryMessageSupplier, TimerImpl syncTimer,\n            AsyncTimer asyncTimer, @Nullable QueryData queryData, long queryExecutionCount)", "class_method_signature": "ThreadContextImpl.startAsyncQueryEntry(long startTick,\n            QueryMessageSupplier queryMessageSupplier, TimerImpl syncTimer,\n            AsyncTimer asyncTimer, @Nullable QueryData queryData, long queryExecutionCount)", "testcase": false, "constructor": false}, {"identifier": "startAsyncServiceCallEntry", "parameters": "(long startTick,\n            MessageSupplier messageSupplier, TimerImpl syncTimer, AsyncTimer asyncTimer,\n            @Nullable QueryData queryData)", "modifiers": "private", "return": "TraceEntryImpl", "signature": "TraceEntryImpl startAsyncServiceCallEntry(long startTick,\n            MessageSupplier messageSupplier, TimerImpl syncTimer, AsyncTimer asyncTimer,\n            @Nullable QueryData queryData)", "full_signature": "private TraceEntryImpl startAsyncServiceCallEntry(long startTick,\n            MessageSupplier messageSupplier, TimerImpl syncTimer, AsyncTimer asyncTimer,\n            @Nullable QueryData queryData)", "class_method_signature": "ThreadContextImpl.startAsyncServiceCallEntry(long startTick,\n            MessageSupplier messageSupplier, TimerImpl syncTimer, AsyncTimer asyncTimer,\n            @Nullable QueryData queryData)", "testcase": false, "constructor": false}, {"identifier": "captureStackTrace", "parameters": "(ThreadInfo threadInfo)", "modifiers": "", "return": "void", "signature": "void captureStackTrace(ThreadInfo threadInfo)", "full_signature": " void captureStackTrace(ThreadInfo threadInfo)", "class_method_signature": "ThreadContextImpl.captureStackTrace(ThreadInfo threadInfo)", "testcase": false, "constructor": false}, {"identifier": "createAuxThreadContext", "parameters": "()", "modifiers": "@Override public", "return": "AuxThreadContext", "signature": "AuxThreadContext createAuxThreadContext()", "full_signature": "@Override public AuxThreadContext createAuxThreadContext()", "class_method_signature": "ThreadContextImpl.createAuxThreadContext()", "testcase": false, "constructor": false}, {"identifier": "popEntry", "parameters": "(TraceEntryImpl entry, long endTick)", "modifiers": "", "return": "void", "signature": "void popEntry(TraceEntryImpl entry, long endTick)", "full_signature": " void popEntry(TraceEntryImpl entry, long endTick)", "class_method_signature": "ThreadContextImpl.popEntry(TraceEntryImpl entry, long endTick)", "testcase": false, "constructor": false}, {"identifier": "popNonRootEntry", "parameters": "(TraceEntryImpl entry)", "modifiers": "", "return": "void", "signature": "void popNonRootEntry(TraceEntryImpl entry)", "full_signature": " void popNonRootEntry(TraceEntryImpl entry)", "class_method_signature": "ThreadContextImpl.popNonRootEntry(TraceEntryImpl entry)", "testcase": false, "constructor": false}, {"identifier": "detach", "parameters": "()", "modifiers": "", "return": "void", "signature": "void detach()", "full_signature": " void detach()", "class_method_signature": "ThreadContextImpl.detach()", "testcase": false, "constructor": false}, {"identifier": "getOrCreateQueriesForType", "parameters": "(String queryType)", "modifiers": "private", "return": "QueryDataMap", "signature": "QueryDataMap getOrCreateQueriesForType(String queryType)", "full_signature": "private QueryDataMap getOrCreateQueriesForType(String queryType)", "class_method_signature": "ThreadContextImpl.getOrCreateQueriesForType(String queryType)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateServiceCallsForType", "parameters": "(String type)", "modifiers": "private", "return": "QueryDataMap", "signature": "QueryDataMap getOrCreateServiceCallsForType(String type)", "full_signature": "private QueryDataMap getOrCreateServiceCallsForType(String type)", "class_method_signature": "ThreadContextImpl.getOrCreateServiceCallsForType(String type)", "testcase": false, "constructor": false}, {"identifier": "isInTransaction", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInTransaction()", "full_signature": "@Override public boolean isInTransaction()", "class_method_signature": "ThreadContextImpl.isInTransaction()", "testcase": false, "constructor": false}, {"identifier": "startTransaction", "parameters": "(String transactionType, String transactionName,\n            MessageSupplier messageSupplier, TimerName timerName)", "modifiers": "@Override public", "return": "TraceEntry", "signature": "TraceEntry startTransaction(String transactionType, String transactionName,\n            MessageSupplier messageSupplier, TimerName timerName)", "full_signature": "@Override public TraceEntry startTransaction(String transactionType, String transactionName,\n            MessageSupplier messageSupplier, TimerName timerName)", "class_method_signature": "ThreadContextImpl.startTransaction(String transactionType, String transactionName,\n            MessageSupplier messageSupplier, TimerName timerName)", "testcase": false, "constructor": false}, {"identifier": "startTransaction", "parameters": "(String transactionType, String transactionName,\n            MessageSupplier messageSupplier, TimerName timerName,\n            AlreadyInTransactionBehavior alreadyInTransactionBehavior)", "modifiers": "@Override public", "return": "TraceEntry", "signature": "TraceEntry startTransaction(String transactionType, String transactionName,\n            MessageSupplier messageSupplier, TimerName timerName,\n            AlreadyInTransactionBehavior alreadyInTransactionBehavior)", "full_signature": "@Override public TraceEntry startTransaction(String transactionType, String transactionName,\n            MessageSupplier messageSupplier, TimerName timerName,\n            AlreadyInTransactionBehavior alreadyInTransactionBehavior)", "class_method_signature": "ThreadContextImpl.startTransaction(String transactionType, String transactionName,\n            MessageSupplier messageSupplier, TimerName timerName,\n            AlreadyInTransactionBehavior alreadyInTransactionBehavior)", "testcase": false, "constructor": false}, {"identifier": "startTraceEntry", "parameters": "(MessageSupplier messageSupplier, TimerName timerName)", "modifiers": "@Override public", "return": "TraceEntry", "signature": "TraceEntry startTraceEntry(MessageSupplier messageSupplier, TimerName timerName)", "full_signature": "@Override public TraceEntry startTraceEntry(MessageSupplier messageSupplier, TimerName timerName)", "class_method_signature": "ThreadContextImpl.startTraceEntry(MessageSupplier messageSupplier, TimerName timerName)", "testcase": false, "constructor": false}, {"identifier": "startAsyncTraceEntry", "parameters": "(MessageSupplier messageSupplier,\n            TimerName timerName)", "modifiers": "@Override public", "return": "AsyncTraceEntry", "signature": "AsyncTraceEntry startAsyncTraceEntry(MessageSupplier messageSupplier,\n            TimerName timerName)", "full_signature": "@Override public AsyncTraceEntry startAsyncTraceEntry(MessageSupplier messageSupplier,\n            TimerName timerName)", "class_method_signature": "ThreadContextImpl.startAsyncTraceEntry(MessageSupplier messageSupplier,\n            TimerName timerName)", "testcase": false, "constructor": false}, {"identifier": "startQueryEntry", "parameters": "(String queryType, String queryText,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName)", "modifiers": "@Override public", "return": "QueryEntry", "signature": "QueryEntry startQueryEntry(String queryType, String queryText,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName)", "full_signature": "@Override public QueryEntry startQueryEntry(String queryType, String queryText,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName)", "class_method_signature": "ThreadContextImpl.startQueryEntry(String queryType, String queryText,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName)", "testcase": false, "constructor": false}, {"identifier": "startQueryEntry", "parameters": "(String queryType, String queryText, long queryExecutionCount,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName)", "modifiers": "@Override public", "return": "QueryEntry", "signature": "QueryEntry startQueryEntry(String queryType, String queryText, long queryExecutionCount,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName)", "full_signature": "@Override public QueryEntry startQueryEntry(String queryType, String queryText, long queryExecutionCount,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName)", "class_method_signature": "ThreadContextImpl.startQueryEntry(String queryType, String queryText, long queryExecutionCount,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName)", "testcase": false, "constructor": false}, {"identifier": "startAsyncQueryEntry", "parameters": "(String queryType, String queryText,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName)", "modifiers": "@Override public", "return": "AsyncQueryEntry", "signature": "AsyncQueryEntry startAsyncQueryEntry(String queryType, String queryText,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName)", "full_signature": "@Override public AsyncQueryEntry startAsyncQueryEntry(String queryType, String queryText,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName)", "class_method_signature": "ThreadContextImpl.startAsyncQueryEntry(String queryType, String queryText,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName)", "testcase": false, "constructor": false}, {"identifier": "startServiceCallEntry", "parameters": "(String serviceCallType, String serviceCallText,\n            MessageSupplier messageSupplier, TimerName timerName)", "modifiers": "@Override public", "return": "TraceEntry", "signature": "TraceEntry startServiceCallEntry(String serviceCallType, String serviceCallText,\n            MessageSupplier messageSupplier, TimerName timerName)", "full_signature": "@Override public TraceEntry startServiceCallEntry(String serviceCallType, String serviceCallText,\n            MessageSupplier messageSupplier, TimerName timerName)", "class_method_signature": "ThreadContextImpl.startServiceCallEntry(String serviceCallType, String serviceCallText,\n            MessageSupplier messageSupplier, TimerName timerName)", "testcase": false, "constructor": false}, {"identifier": "startAsyncServiceCallEntry", "parameters": "(String serviceCallType,\n            String serviceCallText, MessageSupplier messageSupplier, TimerName timerName)", "modifiers": "@Override public", "return": "AsyncTraceEntry", "signature": "AsyncTraceEntry startAsyncServiceCallEntry(String serviceCallType,\n            String serviceCallText, MessageSupplier messageSupplier, TimerName timerName)", "full_signature": "@Override public AsyncTraceEntry startAsyncServiceCallEntry(String serviceCallType,\n            String serviceCallText, MessageSupplier messageSupplier, TimerName timerName)", "class_method_signature": "ThreadContextImpl.startAsyncServiceCallEntry(String serviceCallType,\n            String serviceCallText, MessageSupplier messageSupplier, TimerName timerName)", "testcase": false, "constructor": false}, {"identifier": "startTimer", "parameters": "(TimerName timerName)", "modifiers": "@Override public", "return": "Timer", "signature": "Timer startTimer(TimerName timerName)", "full_signature": "@Override public Timer startTimer(TimerName timerName)", "class_method_signature": "ThreadContextImpl.startTimer(TimerName timerName)", "testcase": false, "constructor": false}, {"identifier": "setTransactionAsync", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void setTransactionAsync()", "full_signature": "@Override public void setTransactionAsync()", "class_method_signature": "ThreadContextImpl.setTransactionAsync()", "testcase": false, "constructor": false}, {"identifier": "setTransactionAsyncComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void setTransactionAsyncComplete()", "full_signature": "@Override public void setTransactionAsyncComplete()", "class_method_signature": "ThreadContextImpl.setTransactionAsyncComplete()", "testcase": false, "constructor": false}, {"identifier": "setTransactionOuter", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void setTransactionOuter()", "full_signature": "@Override public void setTransactionOuter()", "class_method_signature": "ThreadContextImpl.setTransactionOuter()", "testcase": false, "constructor": false}, {"identifier": "setTransactionType", "parameters": "(@Nullable String transactionType, int priority)", "modifiers": "@Override public", "return": "void", "signature": "void setTransactionType(@Nullable String transactionType, int priority)", "full_signature": "@Override public void setTransactionType(@Nullable String transactionType, int priority)", "class_method_signature": "ThreadContextImpl.setTransactionType(@Nullable String transactionType, int priority)", "testcase": false, "constructor": false}, {"identifier": "setTransactionName", "parameters": "(@Nullable String transactionName, int priority)", "modifiers": "@Override public", "return": "void", "signature": "void setTransactionName(@Nullable String transactionName, int priority)", "full_signature": "@Override public void setTransactionName(@Nullable String transactionName, int priority)", "class_method_signature": "ThreadContextImpl.setTransactionName(@Nullable String transactionName, int priority)", "testcase": false, "constructor": false}, {"identifier": "setTransactionUser", "parameters": "(@Nullable String user, int priority)", "modifiers": "@Override public", "return": "void", "signature": "void setTransactionUser(@Nullable String user, int priority)", "full_signature": "@Override public void setTransactionUser(@Nullable String user, int priority)", "class_method_signature": "ThreadContextImpl.setTransactionUser(@Nullable String user, int priority)", "testcase": false, "constructor": false}, {"identifier": "addTransactionAttribute", "parameters": "(String name, @Nullable String value)", "modifiers": "@Override public", "return": "void", "signature": "void addTransactionAttribute(String name, @Nullable String value)", "full_signature": "@Override public void addTransactionAttribute(String name, @Nullable String value)", "class_method_signature": "ThreadContextImpl.addTransactionAttribute(String name, @Nullable String value)", "testcase": false, "constructor": false}, {"identifier": "setTransactionSlowThreshold", "parameters": "(long threshold, TimeUnit unit, int priority)", "modifiers": "@Override public", "return": "void", "signature": "void setTransactionSlowThreshold(long threshold, TimeUnit unit, int priority)", "full_signature": "@Override public void setTransactionSlowThreshold(long threshold, TimeUnit unit, int priority)", "class_method_signature": "ThreadContextImpl.setTransactionSlowThreshold(long threshold, TimeUnit unit, int priority)", "testcase": false, "constructor": false}, {"identifier": "setTransactionError", "parameters": "(Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void setTransactionError(Throwable t)", "full_signature": "@Override public void setTransactionError(Throwable t)", "class_method_signature": "ThreadContextImpl.setTransactionError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "setTransactionError", "parameters": "(@Nullable String message)", "modifiers": "@Override public", "return": "void", "signature": "void setTransactionError(@Nullable String message)", "full_signature": "@Override public void setTransactionError(@Nullable String message)", "class_method_signature": "ThreadContextImpl.setTransactionError(@Nullable String message)", "testcase": false, "constructor": false}, {"identifier": "setTransactionError", "parameters": "(@Nullable String message, @Nullable Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void setTransactionError(@Nullable String message, @Nullable Throwable t)", "full_signature": "@Override public void setTransactionError(@Nullable String message, @Nullable Throwable t)", "class_method_signature": "ThreadContextImpl.setTransactionError(@Nullable String message, @Nullable Throwable t)", "testcase": false, "constructor": false}, {"identifier": "addErrorEntry", "parameters": "(Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void addErrorEntry(Throwable t)", "full_signature": "@Override public void addErrorEntry(Throwable t)", "class_method_signature": "ThreadContextImpl.addErrorEntry(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "addErrorEntry", "parameters": "(@Nullable String message)", "modifiers": "@Override public", "return": "void", "signature": "void addErrorEntry(@Nullable String message)", "full_signature": "@Override public void addErrorEntry(@Nullable String message)", "class_method_signature": "ThreadContextImpl.addErrorEntry(@Nullable String message)", "testcase": false, "constructor": false}, {"identifier": "addErrorEntry", "parameters": "(@Nullable String message, Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void addErrorEntry(@Nullable String message, Throwable t)", "full_signature": "@Override public void addErrorEntry(@Nullable String message, Throwable t)", "class_method_signature": "ThreadContextImpl.addErrorEntry(@Nullable String message, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "trackResourceAcquired", "parameters": "(Object resource, boolean withLocationStackTrace)", "modifiers": "@Override public", "return": "void", "signature": "void trackResourceAcquired(Object resource, boolean withLocationStackTrace)", "full_signature": "@Override public void trackResourceAcquired(Object resource, boolean withLocationStackTrace)", "class_method_signature": "ThreadContextImpl.trackResourceAcquired(Object resource, boolean withLocationStackTrace)", "testcase": false, "constructor": false}, {"identifier": "trackResourceReleased", "parameters": "(Object resource)", "modifiers": "@Override public", "return": "void", "signature": "void trackResourceReleased(Object resource)", "full_signature": "@Override public void trackResourceReleased(Object resource)", "class_method_signature": "ThreadContextImpl.trackResourceReleased(Object resource)", "testcase": false, "constructor": false}, {"identifier": "getServletRequestInfo", "parameters": "()", "modifiers": "@Override public @Nullable", "return": "ServletRequestInfo", "signature": "ServletRequestInfo getServletRequestInfo()", "full_signature": "@Override public @Nullable ServletRequestInfo getServletRequestInfo()", "class_method_signature": "ThreadContextImpl.getServletRequestInfo()", "testcase": false, "constructor": false}, {"identifier": "setServletRequestInfo", "parameters": "(@Nullable ServletRequestInfo servletRequestInfo)", "modifiers": "@Override public", "return": "void", "signature": "void setServletRequestInfo(@Nullable ServletRequestInfo servletRequestInfo)", "full_signature": "@Override public void setServletRequestInfo(@Nullable ServletRequestInfo servletRequestInfo)", "class_method_signature": "ThreadContextImpl.setServletRequestInfo(@Nullable ServletRequestInfo servletRequestInfo)", "testcase": false, "constructor": false}, {"identifier": "hasTraceEntries", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean hasTraceEntries()", "full_signature": " boolean hasTraceEntries()", "class_method_signature": "ThreadContextImpl.hasTraceEntries()", "testcase": false, "constructor": false}, {"identifier": "populateParentChildMap", "parameters": "(ListMultimap<TraceEntryImpl, TraceEntryImpl> parentChildMap,\n            long captureTick,\n            ListMultimap<TraceEntryImpl, ThreadContextImpl> priorEntryAuxThreadContextMap)", "modifiers": "", "return": "void", "signature": "void populateParentChildMap(ListMultimap<TraceEntryImpl, TraceEntryImpl> parentChildMap,\n            long captureTick,\n            ListMultimap<TraceEntryImpl, ThreadContextImpl> priorEntryAuxThreadContextMap)", "full_signature": " void populateParentChildMap(ListMultimap<TraceEntryImpl, TraceEntryImpl> parentChildMap,\n            long captureTick,\n            ListMultimap<TraceEntryImpl, ThreadContextImpl> priorEntryAuxThreadContextMap)", "class_method_signature": "ThreadContextImpl.populateParentChildMap(ListMultimap<TraceEntryImpl, TraceEntryImpl> parentChildMap,\n            long captureTick,\n            ListMultimap<TraceEntryImpl, ThreadContextImpl> priorEntryAuxThreadContextMap)", "testcase": false, "constructor": false}, {"identifier": "isAuxiliary", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isAuxiliary()", "full_signature": "private boolean isAuxiliary()", "class_method_signature": "ThreadContextImpl.isAuxiliary()", "testcase": false, "constructor": false}, {"identifier": "addErrorEntryInternal", "parameters": "(@Nullable String message, @Nullable Throwable t)", "modifiers": "private", "return": "void", "signature": "void addErrorEntryInternal(@Nullable String message, @Nullable Throwable t)", "full_signature": "private void addErrorEntryInternal(@Nullable String message, @Nullable Throwable t)", "class_method_signature": "ThreadContextImpl.addErrorEntryInternal(@Nullable String message, @Nullable Throwable t)", "testcase": false, "constructor": false}, {"identifier": "startTimer", "parameters": "(TimerName timerName, long startTick)", "modifiers": "private", "return": "TimerImpl", "signature": "TimerImpl startTimer(TimerName timerName, long startTick)", "full_signature": "private TimerImpl startTimer(TimerName timerName, long startTick)", "class_method_signature": "ThreadContextImpl.startTimer(TimerName timerName, long startTick)", "testcase": false, "constructor": false}, {"identifier": "getParentThreadContextDisplay", "parameters": "()", "modifiers": "private @Nullable", "return": "Object", "signature": "Object getParentThreadContextDisplay()", "full_signature": "private @Nullable Object getParentThreadContextDisplay()", "class_method_signature": "ThreadContextImpl.getParentThreadContextDisplay()", "testcase": false, "constructor": false}, {"identifier": "getNormalizedStartIndex", "parameters": "(StackTraceElement[] locationStackTrace, String methodName,\n            int additionalMethodsToSkip)", "modifiers": "static", "return": "int", "signature": "int getNormalizedStartIndex(StackTraceElement[] locationStackTrace, String methodName,\n            int additionalMethodsToSkip)", "full_signature": "static int getNormalizedStartIndex(StackTraceElement[] locationStackTrace, String methodName,\n            int additionalMethodsToSkip)", "class_method_signature": "ThreadContextImpl.getNormalizedStartIndex(StackTraceElement[] locationStackTrace, String methodName,\n            int additionalMethodsToSkip)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/glowroot/agent/impl/ThreadContextImpl.java"}, "focal_method": {"identifier": "startQueryEntry", "parameters": "(String queryType, String queryText,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName)", "modifiers": "@Override public", "return": "QueryEntry", "body": "@Override\n    public QueryEntry startQueryEntry(String queryType, String queryText,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName) {\n        if (queryType == null) {\n            logger.error(\"startQueryEntry(): argument 'queryType' must be non-null\");\n            return NopTransactionService.QUERY_ENTRY;\n        }\n        if (queryText == null) {\n            logger.error(\"startQueryEntry(): argument 'queryText' must be non-null\");\n            return NopTransactionService.QUERY_ENTRY;\n        }\n        if (queryMessageSupplier == null) {\n            logger.error(\"startQueryEntry(): argument 'queryMessageSupplier' must be non-null\");\n            return NopTransactionService.QUERY_ENTRY;\n        }\n        if (timerName == null) {\n            logger.error(\"startQueryEntry(): argument 'timerName' must be non-null\");\n            return NopTransactionService.QUERY_ENTRY;\n        }\n        long startTick = ticker.read();\n        TimerImpl timer = startTimer(timerName, startTick);\n        if (transaction.allowAnotherEntry()) {\n            SyncQueryData queryData = getOrCreateQueryData(queryType, queryText, true);\n            return traceEntryComponent.pushEntry(startTick, queryMessageSupplier, timer, null,\n                    queryData, 1);\n        } else {\n            SyncQueryData queryData = getOrCreateQueryData(queryType, queryText, false);\n            return new DummyTraceEntryOrQuery(timer, null, startTick, queryMessageSupplier,\n                    queryData, 1);\n        }\n    }", "signature": "QueryEntry startQueryEntry(String queryType, String queryText,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName)", "full_signature": "@Override public QueryEntry startQueryEntry(String queryType, String queryText,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName)", "class_method_signature": "ThreadContextImpl.startQueryEntry(String queryType, String queryText,\n            QueryMessageSupplier queryMessageSupplier, TimerName timerName)", "testcase": false, "constructor": false, "invocations": ["error", "error", "error", "error", "read", "startTimer", "allowAnotherEntry", "getOrCreateQueryData", "pushEntry", "getOrCreateQueryData"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}