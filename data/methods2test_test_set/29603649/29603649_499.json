{"test_class": {"identifier": "RoutingServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String MSG_ID = \"msgid=\\\"00001\\\"\";", "modifier": "private static final", "type": "String", "declarator": "MSG_ID = \"msgid=\\\"00001\\\"\"", "var_name": "MSG_ID"}, {"original_string": "private OperationMode operationMode;", "modifier": "private", "type": "OperationMode", "declarator": "operationMode", "var_name": "operationMode"}, {"original_string": "private String requestBody;", "modifier": "private", "type": "String", "declarator": "requestBody", "var_name": "requestBody"}, {"original_string": "@Mock\n    private WilmaHttpRequest request;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private StubDescriptorEvaluator stubDescriptorEvaluator;", "modifier": "@Mock\n    private", "type": "StubDescriptorEvaluator", "declarator": "stubDescriptorEvaluator", "var_name": "stubDescriptorEvaluator"}, {"original_string": "@Mock\n    private StubDescriptor stubDescriptor;", "modifier": "@Mock\n    private", "type": "StubDescriptor", "declarator": "stubDescriptor", "var_name": "stubDescriptor"}, {"original_string": "@Mock\n    private ResponseDescriptorDTO responseDescriptorDTO;", "modifier": "@Mock\n    private", "type": "ResponseDescriptorDTO", "declarator": "responseDescriptorDTO", "var_name": "responseDescriptorDTO"}, {"original_string": "@Mock\n    private StubModeEvaluator stubModeEvaluator;", "modifier": "@Mock\n    private", "type": "StubModeEvaluator", "declarator": "stubModeEvaluator", "var_name": "stubModeEvaluator"}, {"original_string": "@Mock\n    private RouteEngineConfigurationAccess configurationAccess;", "modifier": "@Mock\n    private", "type": "RouteEngineConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "@Mock\n    private PropertyDTO properties;", "modifier": "@Mock\n    private", "type": "PropertyDTO", "declarator": "properties", "var_name": "properties"}, {"original_string": "private Map<String, StubDescriptor> stubDescriptors;", "modifier": "private", "type": "Map<String, StubDescriptor>", "declarator": "stubDescriptors", "var_name": "stubDescriptors"}, {"original_string": "@Mock\n    private StubDescriptorModificationCommand command;", "modifier": "@Mock\n    private", "type": "StubDescriptorModificationCommand", "declarator": "command", "var_name": "command"}, {"original_string": "@InjectMocks\n    private RoutingService underTest;", "modifier": "@InjectMocks\n    private", "type": "RoutingService", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-route-engine/src/test/java/com/epam/wilma/router/RoutingServiceTest.java"}, "test_case": {"identifier": "testGetResponseDescriptorDTOAndRemoveShouldReturnNullWhenKeyNotFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetResponseDescriptorDTOAndRemoveShouldReturnNullWhenKeyNotFound() {\n        //GIVEN\n        Map<String, ResponseDescriptor> responseDescriptorMap = new HashMap<>();\n        String key = \"key\";\n        Whitebox.setInternalState(underTest, \"responseDescriptorMap\", responseDescriptorMap);\n        //WHEN\n        ResponseDescriptorDTO actual = underTest.getResponseDescriptorDTOAndRemove(key);\n        //THEN\n        assertNull(actual);\n    }", "signature": "void testGetResponseDescriptorDTOAndRemoveShouldReturnNullWhenKeyNotFound()", "full_signature": "@Test public void testGetResponseDescriptorDTOAndRemoveShouldReturnNullWhenKeyNotFound()", "class_method_signature": "RoutingServiceTest.testGetResponseDescriptorDTOAndRemoveShouldReturnNullWhenKeyNotFound()", "testcase": true, "constructor": false, "invocations": ["setInternalState", "getResponseDescriptorDTOAndRemove", "assertNull"]}, "focal_class": {"identifier": "RoutingService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<String, ResponseDescriptorDTO> responseDescriptorMap = new HashMap<>();", "modifier": "private final", "type": "Map<String, ResponseDescriptorDTO>", "declarator": "responseDescriptorMap = new HashMap<>()", "var_name": "responseDescriptorMap"}, {"original_string": "private final Object guard = new Object();", "modifier": "private final", "type": "Object", "declarator": "guard = new Object()", "var_name": "guard"}, {"original_string": "private Map<String, StubDescriptor> stubDescriptors = new LinkedHashMap<>();", "modifier": "private", "type": "Map<String, StubDescriptor>", "declarator": "stubDescriptors = new LinkedHashMap<>()", "var_name": "stubDescriptors"}, {"original_string": "private OperationMode operationMode;", "modifier": "private", "type": "OperationMode", "declarator": "operationMode", "var_name": "operationMode"}, {"original_string": "@Autowired\n    private StubDescriptorEvaluator stubDescriptorEvaluator;", "modifier": "@Autowired\n    private", "type": "StubDescriptorEvaluator", "declarator": "stubDescriptorEvaluator", "var_name": "stubDescriptorEvaluator"}, {"original_string": "@Autowired\n    private StubModeEvaluator stubModeEvaluator;", "modifier": "@Autowired\n    private", "type": "StubModeEvaluator", "declarator": "stubModeEvaluator", "var_name": "stubModeEvaluator"}, {"original_string": "@Autowired\n    private RouteEngineConfigurationAccess configurationAccess;", "modifier": "@Autowired\n    private", "type": "RouteEngineConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}], "methods": [{"identifier": "redirectRequestToStub", "parameters": "(final WilmaHttpRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean redirectRequestToStub(final WilmaHttpRequest request)", "full_signature": "public boolean redirectRequestToStub(final WilmaHttpRequest request)", "class_method_signature": "RoutingService.redirectRequestToStub(final WilmaHttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "getResponseDescriptorDTOAndRemove", "parameters": "(final String key)", "modifiers": "public", "return": "ResponseDescriptorDTO", "signature": "ResponseDescriptorDTO getResponseDescriptorDTOAndRemove(final String key)", "full_signature": "public ResponseDescriptorDTO getResponseDescriptorDTOAndRemove(final String key)", "class_method_signature": "RoutingService.getResponseDescriptorDTOAndRemove(final String key)", "testcase": false, "constructor": false}, {"identifier": "setOperationMode", "parameters": "(final OperationMode operationMode)", "modifiers": "public", "return": "void", "signature": "void setOperationMode(final OperationMode operationMode)", "full_signature": "public void setOperationMode(final OperationMode operationMode)", "class_method_signature": "RoutingService.setOperationMode(final OperationMode operationMode)", "testcase": false, "constructor": false}, {"identifier": "getStubDescriptors", "parameters": "()", "modifiers": "public", "return": "Map<String, StubDescriptor>", "signature": "Map<String, StubDescriptor> getStubDescriptors()", "full_signature": "public Map<String, StubDescriptor> getStubDescriptors()", "class_method_signature": "RoutingService.getStubDescriptors()", "testcase": false, "constructor": false}, {"identifier": "isStubModeOn", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStubModeOn()", "full_signature": "public boolean isStubModeOn()", "class_method_signature": "RoutingService.isStubModeOn()", "testcase": false, "constructor": false}, {"identifier": "getOperationMode", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void getOperationMode()", "full_signature": "private void getOperationMode()", "class_method_signature": "RoutingService.getOperationMode()", "testcase": false, "constructor": false}, {"identifier": "saveInResponseDescriptorMap", "parameters": "(final WilmaHttpRequest request, final ResponseDescriptorDTO responseDescriptorDTO)", "modifiers": "private", "return": "void", "signature": "void saveInResponseDescriptorMap(final WilmaHttpRequest request, final ResponseDescriptorDTO responseDescriptorDTO)", "full_signature": "private void saveInResponseDescriptorMap(final WilmaHttpRequest request, final ResponseDescriptorDTO responseDescriptorDTO)", "class_method_signature": "RoutingService.saveInResponseDescriptorMap(final WilmaHttpRequest request, final ResponseDescriptorDTO responseDescriptorDTO)", "testcase": false, "constructor": false}, {"identifier": "performModification", "parameters": "(final StubDescriptorModificationCommand command)", "modifiers": "public", "return": "void", "signature": "void performModification(final StubDescriptorModificationCommand command)", "full_signature": "public void performModification(final StubDescriptorModificationCommand command)", "class_method_signature": "RoutingService.performModification(final StubDescriptorModificationCommand command)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-route-engine/src/main/java/com/epam/wilma/router/RoutingService.java"}, "focal_method": {"identifier": "getResponseDescriptorDTOAndRemove", "parameters": "(final String key)", "modifiers": "public", "return": "ResponseDescriptorDTO", "body": "public ResponseDescriptorDTO getResponseDescriptorDTOAndRemove(final String key) {\n        ResponseDescriptorDTO responseDescriptor = responseDescriptorMap.get(key);\n        if (responseDescriptor != null) {\n            responseDescriptorMap.remove(key);\n        }\n        return responseDescriptor;\n    }", "signature": "ResponseDescriptorDTO getResponseDescriptorDTOAndRemove(final String key)", "full_signature": "public ResponseDescriptorDTO getResponseDescriptorDTOAndRemove(final String key)", "class_method_signature": "RoutingService.getResponseDescriptorDTOAndRemove(final String key)", "testcase": false, "constructor": false, "invocations": ["get", "remove"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}