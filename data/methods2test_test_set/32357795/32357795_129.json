{"test_class": {"identifier": "CachedIndexTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CachedIndex index;", "modifier": "private", "type": "CachedIndex", "declarator": "index", "var_name": "index"}], "file": "ontopia-engine/src/test/java/net/ontopia/utils/CachedIndexTest.java"}, "test_case": {"identifier": "testExpand", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testExpand() {\n    index = new CachedIndex(new EmptyIndex(), 1000, 5, true);\n    \n    check(\"larsga\", \"Lars Marius Garshol\");\n    check(\"grove\", \"Geir Ove Gronmo\");\n    check(\"tine\", \"Tine Holst\");\n    check(\"sylvias\", \"Sylvia Schwab\");\n    check(\"pepper\", \"Steve Pepper\");\n    check(\"hca\", \"Hans Christian Alsos\");\n    check(\"niko\", \"Niko Schmuck\");\n    check(\"pam\", \"Pamela Gennusa\");\n    check(\"kal\", \"Kal Ahmed\");\n    check(\"murray\", \"Murray Woodman\");\n\n    lookfor(\"larsga\", \"Lars Marius Garshol\");\n    lookfor(\"grove\", \"Geir Ove Gronmo\");\n    lookfor(\"tine\", \"Tine Holst\");\n    lookfor(\"sylvias\", \"Sylvia Schwab\");\n    lookfor(\"pepper\", \"Steve Pepper\");\n    lookfor(\"hca\", \"Hans Christian Alsos\");\n    lookfor(\"niko\", \"Niko Schmuck\");\n    lookfor(\"pam\", \"Pamela Gennusa\");\n    lookfor(\"kal\", \"Kal Ahmed\");\n    lookfor(\"murray\", \"Murray Woodman\");\n\n    Assert.assertTrue(\"non-existent key found\",\n           index.get(\"dummy\") == null);\n  }", "signature": "void testExpand()", "full_signature": "@Test public void testExpand()", "class_method_signature": "CachedIndexTest.testExpand()", "testcase": true, "constructor": false, "invocations": ["check", "check", "check", "check", "check", "check", "check", "check", "check", "check", "lookfor", "lookfor", "lookfor", "lookfor", "lookfor", "lookfor", "lookfor", "lookfor", "lookfor", "lookfor", "assertTrue", "get"]}, "focal_class": {"identifier": "CachedIndex", "superclass": "", "interfaces": "implements LookupIndexIF<K, E>", "fields": [{"original_string": "private LookupIndexIF<K, E> fallback;", "modifier": "private", "type": "LookupIndexIF<K, E>", "declarator": "fallback", "var_name": "fallback"}, {"original_string": "private int           max;", "modifier": "private", "type": "int", "declarator": "max", "var_name": "max"}, {"original_string": "private int           entries;", "modifier": "private", "type": "int", "declarator": "entries", "var_name": "entries"}, {"original_string": "private int           decay;", "modifier": "private", "type": "int", "declarator": "decay", "var_name": "decay"}, {"original_string": "private Entry[]       data;", "modifier": "private", "type": "Entry[]", "declarator": "data", "var_name": "data"}, {"original_string": "private double        threshold;", "modifier": "private", "type": "double", "declarator": "threshold", "var_name": "threshold"}, {"original_string": "private boolean       nulls;", "modifier": "private", "type": "boolean", "declarator": "nulls", "var_name": "nulls"}, {"original_string": "private long          lookups;", "modifier": "private", "type": "long", "declarator": "lookups", "var_name": "lookups"}, {"original_string": "private long          hits;", "modifier": "private", "type": "long", "declarator": "hits", "var_name": "hits"}, {"original_string": "private long          rehashes;", "modifier": "private", "type": "long", "declarator": "rehashes", "var_name": "rehashes"}, {"original_string": "private long          prunings;", "modifier": "private", "type": "long", "declarator": "prunings", "var_name": "prunings"}], "methods": [{"identifier": "CachedIndex", "parameters": "(LookupIndexIF<K, E> fallback)", "modifiers": "public", "return": "", "signature": " CachedIndex(LookupIndexIF<K, E> fallback)", "full_signature": "public  CachedIndex(LookupIndexIF<K, E> fallback)", "class_method_signature": "CachedIndex.CachedIndex(LookupIndexIF<K, E> fallback)", "testcase": false, "constructor": true}, {"identifier": "CachedIndex", "parameters": "(LookupIndexIF<K, E> fallback, boolean nulls)", "modifiers": "public", "return": "", "signature": " CachedIndex(LookupIndexIF<K, E> fallback, boolean nulls)", "full_signature": "public  CachedIndex(LookupIndexIF<K, E> fallback, boolean nulls)", "class_method_signature": "CachedIndex.CachedIndex(LookupIndexIF<K, E> fallback, boolean nulls)", "testcase": false, "constructor": true}, {"identifier": "CachedIndex", "parameters": "(LookupIndexIF<K, E> fallback, int max, int size, boolean nulls)", "modifiers": "public", "return": "", "signature": " CachedIndex(LookupIndexIF<K, E> fallback, int max, int size, boolean nulls)", "full_signature": "public  CachedIndex(LookupIndexIF<K, E> fallback, int max, int size, boolean nulls)", "class_method_signature": "CachedIndex.CachedIndex(LookupIndexIF<K, E> fallback, int max, int size, boolean nulls)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(K key)", "modifiers": "@Override public", "return": "E", "signature": "E get(K key)", "full_signature": "@Override public E get(K key)", "class_method_signature": "CachedIndex.get(K key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(K key, E value)", "modifiers": "@Override public", "return": "E", "signature": "E put(K key, E value)", "full_signature": "@Override public E put(K key, E value)", "class_method_signature": "CachedIndex.put(K key, E value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(K key)", "modifiers": "@Override public", "return": "E", "signature": "E remove(K key)", "full_signature": "@Override public E remove(K key)", "class_method_signature": "CachedIndex.remove(K key)", "testcase": false, "constructor": false}, {"identifier": "getKeyNumber", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getKeyNumber()", "full_signature": "public int getKeyNumber()", "class_method_signature": "CachedIndex.getKeyNumber()", "testcase": false, "constructor": false}, {"identifier": "writeReport", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void writeReport()", "full_signature": "public void writeReport()", "class_method_signature": "CachedIndex.writeReport()", "testcase": false, "constructor": false}, {"identifier": "addEntry", "parameters": "(Entry<K, E> newEntry)", "modifiers": "private", "return": "Entry<K, E>", "signature": "Entry<K, E> addEntry(Entry<K, E> newEntry)", "full_signature": "private Entry<K, E> addEntry(Entry<K, E> newEntry)", "class_method_signature": "CachedIndex.addEntry(Entry<K, E> newEntry)", "testcase": false, "constructor": false}, {"identifier": "prune", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void prune()", "full_signature": "protected void prune()", "class_method_signature": "CachedIndex.prune()", "testcase": false, "constructor": false}, {"identifier": "rehash", "parameters": "(int size)", "modifiers": "private", "return": "void", "signature": "void rehash(int size)", "full_signature": "private void rehash(int size)", "class_method_signature": "CachedIndex.rehash(int size)", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/utils/CachedIndex.java"}, "focal_method": {"identifier": "get", "parameters": "(K key)", "modifiers": "@Override public", "return": "E", "body": "@Override\n  public E get(K key) {\n    Entry entry = data[(key.hashCode() & 0x7FFFFFFF) % data.length];\n\n    while (entry != null && !entry.key.equals(key))\n      entry = entry.next;\n\n    lookups++;\n    if (entry == null) { // not found\n      E result = fallback.get(key);\n      if (result == null && !nulls) return null; // do not store null values\n      entry = addEntry(new Entry(key, result));\n    } else {\n      hits++;\n      entry.hits++;\n    }\n\n    return (E) entry.value;\n  }", "signature": "E get(K key)", "full_signature": "@Override public E get(K key)", "class_method_signature": "CachedIndex.get(K key)", "testcase": false, "constructor": false, "invocations": ["hashCode", "equals", "get", "addEntry"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}