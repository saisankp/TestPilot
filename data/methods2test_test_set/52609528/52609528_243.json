{"test_class": {"identifier": "RequestLoggerTest", "superclass": "", "interfaces": "", "fields": [], "file": "gateleen-core/src/test/java/org/swisspush/gateleen/core/logging/RequestLoggerTest.java"}, "test_case": {"identifier": "testLogRequestResponseHeaders", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLogRequestResponseHeaders(TestContext context){\n        EventBus eventBus = Mockito.mock(EventBus .class);\n        CaseInsensitiveHeaders headers = new CaseInsensitiveHeaders();\n        headers.add(\"Content-Type\", \"application/json\");\n        headers.add(\"x-rp-unique-id\", \"123456\");\n        MockedRequest request = new MockedRequest(\"/uri/to/a/resource\", HttpMethod.PUT, headers,\n                new MockedResponse(new CaseInsensitiveHeaders()));\n        JsonObject body = new JsonObject().put(\"key_1\", \"value_2\").put(\"key_2\", 99);\n\n        CaseInsensitiveHeaders responseHeaders = new CaseInsensitiveHeaders();\n        responseHeaders.add(\"header_1\", \"value_1\");\n        responseHeaders.add(\"header_2\", \"value_2\");\n\n        RequestLogger.logRequest(eventBus, request, StatusCode.OK.getStatusCode(), Buffer.buffer(body.encode()), responseHeaders);\n\n        JsonObject expected = new JsonObject();\n        expected.put(REQUEST_URI, \"/uri/to/a/resource\");\n        expected.put(REQUEST_METHOD, \"PUT\");\n        JsonObject requestHeaders = new JsonObject().put(\"Content-Type\", \"application/json\").put(\"x-rp-unique-id\", \"123456\");\n        expected.put(REQUEST_HEADERS, requestHeaders);\n        JsonObject responseHeadersJsonObject = new JsonObject().put(\"header_1\", \"value_1\").put(\"header_2\", \"value_2\");\n        expected.put(RESPONSE_HEADERS, responseHeadersJsonObject);\n        expected.put(REQUEST_STATUS, StatusCode.OK.getStatusCode());\n        expected.put(BODY, Buffer.buffer(body.encode()).toString());\n\n        Mockito.verify(eventBus, Mockito.times(1))\n                .send(eq(Address.requestLoggingConsumerAddress()), eq(expected), any(Handler.class));\n    }", "signature": "void testLogRequestResponseHeaders(TestContext context)", "full_signature": "@Test public void testLogRequestResponseHeaders(TestContext context)", "class_method_signature": "RequestLoggerTest.testLogRequestResponseHeaders(TestContext context)", "testcase": true, "constructor": false, "invocations": ["mock", "add", "add", "put", "put", "add", "add", "logRequest", "getStatusCode", "buffer", "encode", "put", "put", "put", "put", "put", "put", "put", "put", "put", "getStatusCode", "put", "toString", "buffer", "encode", "send", "verify", "times", "eq", "requestLoggingConsumerAddress", "eq", "any"]}, "focal_class": {"identifier": "RequestLogger", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String OK = \"ok\";", "modifier": "public static final", "type": "String", "declarator": "OK = \"ok\"", "var_name": "OK"}, {"original_string": "public static final String ERROR = \"error\";", "modifier": "public static final", "type": "String", "declarator": "ERROR = \"error\"", "var_name": "ERROR"}, {"original_string": "public static final String MESSAGE = \"message\";", "modifier": "public static final", "type": "String", "declarator": "MESSAGE = \"message\"", "var_name": "MESSAGE"}, {"original_string": "public static final String STATUS = \"status\";", "modifier": "public static final", "type": "String", "declarator": "STATUS = \"status\"", "var_name": "STATUS"}, {"original_string": "public static final String REQUEST_URI = \"request_uri\";", "modifier": "public static final", "type": "String", "declarator": "REQUEST_URI = \"request_uri\"", "var_name": "REQUEST_URI"}, {"original_string": "public static final String REQUEST_METHOD = \"request_method\";", "modifier": "public static final", "type": "String", "declarator": "REQUEST_METHOD = \"request_method\"", "var_name": "REQUEST_METHOD"}, {"original_string": "public static final String REQUEST_HEADERS = \"request_headers\";", "modifier": "public static final", "type": "String", "declarator": "REQUEST_HEADERS = \"request_headers\"", "var_name": "REQUEST_HEADERS"}, {"original_string": "public static final String RESPONSE_HEADERS = \"response_headers\";", "modifier": "public static final", "type": "String", "declarator": "RESPONSE_HEADERS = \"response_headers\"", "var_name": "RESPONSE_HEADERS"}, {"original_string": "public static final String REQUEST_STATUS = \"request_status\";", "modifier": "public static final", "type": "String", "declarator": "REQUEST_STATUS = \"request_status\"", "var_name": "REQUEST_STATUS"}, {"original_string": "public static final String BODY = \"body\";", "modifier": "public static final", "type": "String", "declarator": "BODY = \"body\"", "var_name": "BODY"}], "methods": [{"identifier": "RequestLogger", "parameters": "()", "modifiers": "private", "return": "", "signature": " RequestLogger()", "full_signature": "private  RequestLogger()", "class_method_signature": "RequestLogger.RequestLogger()", "testcase": false, "constructor": true}, {"identifier": "logRequest", "parameters": "(EventBus eventBus, final HttpServerRequest request, final int status, Buffer data)", "modifiers": "public static", "return": "void", "signature": "void logRequest(EventBus eventBus, final HttpServerRequest request, final int status, Buffer data)", "full_signature": "public static void logRequest(EventBus eventBus, final HttpServerRequest request, final int status, Buffer data)", "class_method_signature": "RequestLogger.logRequest(EventBus eventBus, final HttpServerRequest request, final int status, Buffer data)", "testcase": false, "constructor": false}, {"identifier": "logRequest", "parameters": "(EventBus eventBus, final HttpServerRequest request, final int status, Buffer data, final MultiMap responseHeaders)", "modifiers": "public static", "return": "void", "signature": "void logRequest(EventBus eventBus, final HttpServerRequest request, final int status, Buffer data, final MultiMap responseHeaders)", "full_signature": "public static void logRequest(EventBus eventBus, final HttpServerRequest request, final int status, Buffer data, final MultiMap responseHeaders)", "class_method_signature": "RequestLogger.logRequest(EventBus eventBus, final HttpServerRequest request, final int status, Buffer data, final MultiMap responseHeaders)", "testcase": false, "constructor": false}], "file": "gateleen-core/src/main/java/org/swisspush/gateleen/core/logging/RequestLogger.java"}, "focal_method": {"identifier": "logRequest", "parameters": "(EventBus eventBus, final HttpServerRequest request, final int status, Buffer data)", "modifiers": "public static", "return": "void", "body": "public static void logRequest(EventBus eventBus, final HttpServerRequest request, final int status, Buffer data) {\n        logRequest(eventBus, request, status, data, request.response().headers());\n    }", "signature": "void logRequest(EventBus eventBus, final HttpServerRequest request, final int status, Buffer data)", "full_signature": "public static void logRequest(EventBus eventBus, final HttpServerRequest request, final int status, Buffer data)", "class_method_signature": "RequestLogger.logRequest(EventBus eventBus, final HttpServerRequest request, final int status, Buffer data)", "testcase": false, "constructor": false, "invocations": ["logRequest", "headers", "response"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}