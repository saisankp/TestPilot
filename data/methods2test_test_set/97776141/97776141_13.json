{"test_class": {"identifier": "UserControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String USERNAME = \"username\";", "modifier": "private static final", "type": "String", "declarator": "USERNAME = \"username\"", "var_name": "USERNAME"}, {"original_string": "private static final String PASSWORD = \"password\";", "modifier": "private static final", "type": "String", "declarator": "PASSWORD = \"password\"", "var_name": "PASSWORD"}, {"original_string": "private static final String ROLE = \"role\";", "modifier": "private static final", "type": "String", "declarator": "ROLE = \"role\"", "var_name": "ROLE"}, {"original_string": "@Mock\n    private UserService mockUserService;", "modifier": "@Mock\n    private", "type": "UserService", "declarator": "mockUserService", "var_name": "mockUserService"}, {"original_string": "@Mock\n    private AuthenticationService mockAuthenticationService;", "modifier": "@Mock\n    private", "type": "AuthenticationService", "declarator": "mockAuthenticationService", "var_name": "mockAuthenticationService"}, {"original_string": "@Mock\n    private HttpServletRequest mockHttpServletRequest;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "mockHttpServletRequest", "var_name": "mockHttpServletRequest"}, {"original_string": "@Mock\n    private HttpServletResponse mockHttpServletResponse;", "modifier": "@Mock\n    private", "type": "HttpServletResponse", "declarator": "mockHttpServletResponse", "var_name": "mockHttpServletResponse"}, {"original_string": "@Mock\n    private UserEntity mockUserEntity;", "modifier": "@Mock\n    private", "type": "UserEntity", "declarator": "mockUserEntity", "var_name": "mockUserEntity"}, {"original_string": "private UserController userController;", "modifier": "private", "type": "UserController", "declarator": "userController", "var_name": "userController"}], "file": "application/confagrid-webapp/src/test/java/com/aleggeup/confagrid/user/UserControllerTest.java"}, "test_case": {"identifier": "testValidUserWithEmptyPassword", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidUserWithEmptyPassword() {\n        Mockito.when(mockUserService.containsName(USERNAME)).thenReturn(true);\n\n        final LoginRequest loginRequest = new LoginRequest();\n        loginRequest.setName(USERNAME);\n        loginRequest.setPassword(\"\");\n\n        boolean exceptionThrown = false;\n        try {\n            userController.login(loginRequest);\n        } catch (final InvalidLoginException e) {\n            exceptionThrown = true;\n        }\n\n        assertTrue(exceptionThrown);\n\n        Mockito.verify(mockUserService).containsName(USERNAME);\n    }", "signature": "void testValidUserWithEmptyPassword()", "full_signature": "@Test public void testValidUserWithEmptyPassword()", "class_method_signature": "UserControllerTest.testValidUserWithEmptyPassword()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "containsName", "setName", "setPassword", "login", "assertTrue", "containsName", "verify"]}, "focal_class": {"identifier": "UserController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final UserService userService;", "modifier": "private final", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "private final AuthenticationService authenticationService;", "modifier": "private final", "type": "AuthenticationService", "declarator": "authenticationService", "var_name": "authenticationService"}], "methods": [{"identifier": "UserController", "parameters": "(final UserService userService, final AuthenticationService authenticationService)", "modifiers": "@Autowired", "return": "", "signature": " UserController(final UserService userService, final AuthenticationService authenticationService)", "full_signature": "@Autowired  UserController(final UserService userService, final AuthenticationService authenticationService)", "class_method_signature": "UserController.UserController(final UserService userService, final AuthenticationService authenticationService)", "testcase": false, "constructor": true}, {"identifier": "login", "parameters": "(@NonNull @RequestBody final LoginRequest login)", "modifiers": "@RequestMapping(value = \"login\", method = RequestMethod.POST) public", "return": "LoginResponse", "signature": "LoginResponse login(@NonNull @RequestBody final LoginRequest login)", "full_signature": "@RequestMapping(value = \"login\", method = RequestMethod.POST) public LoginResponse login(@NonNull @RequestBody final LoginRequest login)", "class_method_signature": "UserController.login(@NonNull @RequestBody final LoginRequest login)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(final HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"check\", method = RequestMethod.GET) public", "return": "LoginResponse", "signature": "LoginResponse check(final HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"check\", method = RequestMethod.GET) public LoginResponse check(final HttpServletResponse response)", "class_method_signature": "UserController.check(final HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "claimContainsRole", "parameters": "(@PathVariable final String role,\n        final HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"role/{role}\", method = RequestMethod.GET) public", "return": "Boolean", "signature": "Boolean claimContainsRole(@PathVariable final String role,\n        final HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"role/{role}\", method = RequestMethod.GET) public Boolean claimContainsRole(@PathVariable final String role,\n        final HttpServletRequest request)", "class_method_signature": "UserController.claimContainsRole(@PathVariable final String role,\n        final HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getRoles", "parameters": "(final Claims claims)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "List<LinkedHashMap<String, String>>", "signature": "List<LinkedHashMap<String, String>> getRoles(final Claims claims)", "full_signature": "@SuppressWarnings(\"unchecked\") private List<LinkedHashMap<String, String>> getRoles(final Claims claims)", "class_method_signature": "UserController.getRoles(final Claims claims)", "testcase": false, "constructor": false}], "file": "application/confagrid-webapp/src/main/java/com/aleggeup/confagrid/user/UserController.java"}, "focal_method": {"identifier": "login", "parameters": "(@NonNull @RequestBody final LoginRequest login)", "modifiers": "@RequestMapping(value = \"login\", method = RequestMethod.POST) public", "return": "LoginResponse", "body": "@RequestMapping(value = \"login\", method = RequestMethod.POST)\n    public LoginResponse login(@NonNull @RequestBody final LoginRequest login) throws InvalidLoginException {\n\n        if (login.getName() == null || !userService.containsName(login.getName())\n            || login.getPassword() == null || login.getPassword().isEmpty()) {\n            throw new InvalidLoginException();\n        }\n\n        if (!authenticationService.userPasswordCheck(login.getName(), login.getPassword())) {\n            throw new InvalidLoginException();\n        }\n\n        final UserEntity userEntity = userService.findByName(login.getName());\n\n        return new LoginResponse(userEntity.getId().toString(), userEntity.getName(),\n            authenticationService.authenticationToken(login.getName(), login.getPassword()));\n    }", "signature": "LoginResponse login(@NonNull @RequestBody final LoginRequest login)", "full_signature": "@RequestMapping(value = \"login\", method = RequestMethod.POST) public LoginResponse login(@NonNull @RequestBody final LoginRequest login)", "class_method_signature": "UserController.login(@NonNull @RequestBody final LoginRequest login)", "testcase": false, "constructor": false, "invocations": ["getName", "containsName", "getName", "getPassword", "isEmpty", "getPassword", "userPasswordCheck", "getName", "getPassword", "findByName", "getName", "toString", "getId", "getName", "authenticationToken", "getName", "getPassword"]}, "repository": {"repo_id": 97776141, "url": "https://github.com/ALeggeUp/confagrid", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 22043, "license": "licensed"}}