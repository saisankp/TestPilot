{"test_class": {"identifier": "DemoDumpGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BootstrapInitializer boot;", "modifier": "private", "type": "BootstrapInitializer", "declarator": "boot", "var_name": "boot"}, {"original_string": "private SearchProvider searchProvider;", "modifier": "private", "type": "SearchProvider", "declarator": "searchProvider", "var_name": "searchProvider"}, {"original_string": "private Database db;", "modifier": "private", "type": "Database", "declarator": "db", "var_name": "db"}, {"original_string": "private Mesh mesh;", "modifier": "private", "type": "Mesh", "declarator": "mesh", "var_name": "mesh"}, {"original_string": "private static DemoDumpGenerator generator = new DemoDumpGenerator();", "modifier": "private static", "type": "DemoDumpGenerator", "declarator": "generator = new DemoDumpGenerator()", "var_name": "generator"}], "file": "demo/src/test/java/com/gentics/mesh/demo/DemoDumpGeneratorTest.java"}, "test_case": {"identifier": "testSetup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSetup() throws Exception {\n\t\tgenerator.dump();\n\t\tdb.tx(tx -> {\n\t\t\tRoleDaoWrapper roleDao = tx.data().roleDao();\n\t\t\tUserDaoWrapper userDao = tx.data().userDao();\n\t\t\tGroupDaoWrapper groupDao = tx.data().groupDao();\n\t\t\tProjectDaoWrapper projectDao = tx.data().projectDao();\n\t\t\tContentDaoWrapper contentDao = tx.data().contentDao();\n\t\t\tNodeDaoWrapper nodeDao = tx.data().nodeDao();\n\n\t\t\tHibProject project = projectDao.findByName(\"demo\");\n\t\t\tassertTrue(project.getNodeRoot().computeCount() > 0);\n\t\t\tHibUser user = userDao.findByUsername(\"webclient\");\n\t\t\tassertNotNull(\"The webclient user should have been created but could not be found.\", user);\n\t\t\tassertFalse(\"The webclient user should also have at least one group assigned to it.\", !userDao.getGroups(user).iterator().hasNext());\n\t\t\tHibGroup group = userDao.getGroups(user).iterator().next();\n\t\t\tHibRole role = groupDao.getRoles(group).iterator().next();\n\t\t\tassertNotNull(\"The webclient group should also have a role assigned to it\", role);\n\n\t\t\tassertTrue(\"The webclient role has not read permission on the user.\", roleDao.hasPermission(role, InternalPermission.READ_PERM, user));\n\t\t\tassertTrue(\"The webclient user has no permission on itself.\", userDao.hasPermission(user, user, InternalPermission.READ_PERM));\n\t\t\tassertTrue(\"The webclient user has no read permission on the user root node..\", userDao.hasPermission(user, boot.meshRoot().getUserRoot(), InternalPermission.READ_PERM));\n\n\t\t\tassertTrue(\"We expected to find at least 5 nodes.\", project.getNodeRoot().computeCount() > 5);\n\n\t\t\t// Verify that the uuids have been updated\n\t\t\tassertNotNull(nodeDao.findByUuid(project, \"df8beb3922c94ea28beb3922c94ea2f6\"));\n\n\t\t\t// Verify that all documents are stored in the index\n\t\t\tfor (Node node : project.getNodeRoot().findAll()) {\n\t\t\t\tNodeGraphFieldContainer container = contentDao.getLatestDraftFieldContainer(node, \"en\");\n\t\t\t\tString languageTag = \"en\";\n\t\t\t\tString projectUuid = node.getProject().getUuid();\n\t\t\t\tString branchUuid = node.getProject().getInitialBranch().getUuid();\n\t\t\t\tString schemaContainerVersionUuid = container.getSchemaContainerVersion().getUuid();\n\t\t\t\tContainerType type = PUBLISHED;\n\t\t\t\tString indexName = ContentDaoWrapper.composeIndexName(projectUuid, branchUuid, schemaContainerVersionUuid, type);\n\t\t\t\tString documentId = ContentDaoWrapper.composeDocumentId(node.getUuid(), languageTag);\n\t\t\t\tif (searchProvider.getDocument(indexName, documentId).blockingGet() == null) {\n\t\t\t\t\tString msg = \"The search document for node {\" + node.getUuid() + \"} container {\" + languageTag\n\t\t\t\t\t\t+ \"} could not be found within index {\" + indexName + \"} - {\" + documentId + \"}\";\n\t\t\t\t\tfail(msg);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttx.success();\n\t\t});\n\t}", "signature": "void testSetup()", "full_signature": "@Test public void testSetup()", "class_method_signature": "DemoDumpGeneratorTest.testSetup()", "testcase": true, "constructor": false, "invocations": ["dump", "tx", "roleDao", "data", "userDao", "data", "groupDao", "data", "projectDao", "data", "contentDao", "data", "nodeDao", "data", "findByName", "assertTrue", "computeCount", "getNodeRoot", "findByUsername", "assertNotNull", "assertFalse", "hasNext", "iterator", "getGroups", "next", "iterator", "getGroups", "next", "iterator", "getRoles", "assertNotNull", "assertTrue", "hasPermission", "assertTrue", "hasPermission", "assertTrue", "hasPermission", "getUserRoot", "meshRoot", "assertTrue", "computeCount", "getNodeRoot", "assertNotNull", "findByUuid", "findAll", "getNodeRoot", "getLatestDraftFieldContainer", "getUuid", "getProject", "getUuid", "getInitialBranch", "getProject", "getUuid", "getSchemaContainerVersion", "composeIndexName", "composeDocumentId", "getUuid", "blockingGet", "getDocument", "getUuid", "fail", "success"]}, "focal_class": {"identifier": "DemoDumpGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MeshComponent meshInternal;", "modifier": "private", "type": "MeshComponent", "declarator": "meshInternal", "var_name": "meshInternal"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "DemoDumpGenerator.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "getMeshInternal", "parameters": "()", "modifiers": "public", "return": "MeshComponent", "signature": "MeshComponent getMeshInternal()", "full_signature": "public MeshComponent getMeshInternal()", "class_method_signature": "DemoDumpGenerator.getMeshInternal()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "DemoDumpGenerator.init()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(MeshOptions options)", "modifiers": "public", "return": "void", "signature": "void init(MeshOptions options)", "full_signature": "public void init(MeshOptions options)", "class_method_signature": "DemoDumpGenerator.init(MeshOptions options)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void dump()", "full_signature": "public void dump()", "class_method_signature": "DemoDumpGenerator.dump()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void shutdown()", "full_signature": "private void shutdown()", "class_method_signature": "DemoDumpGenerator.shutdown()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cleanup()", "full_signature": "public void cleanup()", "class_method_signature": "DemoDumpGenerator.cleanup()", "testcase": false, "constructor": false}, {"identifier": "invokeDump", "parameters": "(BootstrapInitializer boot, DemoDataProvider provider)", "modifiers": "private", "return": "void", "signature": "void invokeDump(BootstrapInitializer boot, DemoDataProvider provider)", "full_signature": "private void invokeDump(BootstrapInitializer boot, DemoDataProvider provider)", "class_method_signature": "DemoDumpGenerator.invokeDump(BootstrapInitializer boot, DemoDataProvider provider)", "testcase": false, "constructor": false}], "file": "demo/src/main/java/com/gentics/mesh/demo/DemoDumpGenerator.java"}, "focal_method": {"identifier": "dump", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void dump() throws Exception {\n\n\t\t// Initialise demo data\n\t\tBootstrapInitializer boot = meshInternal.boot();\n\t\tDemoDataProvider provider = new DemoDataProvider(meshInternal.database(), meshInternal.meshLocalClientImpl(), boot);\n\t\tinvokeDump(boot, provider);\n\n\t}", "signature": "void dump()", "full_signature": "public void dump()", "class_method_signature": "DemoDumpGenerator.dump()", "testcase": false, "constructor": false, "invocations": ["boot", "database", "meshLocalClientImpl", "invokeDump"]}, "repository": {"repo_id": 67999496, "url": "https://github.com/gentics/mesh", "stars": 412, "created": "9/12/2016 10:28:41 AM +00:00", "updates": "2020-01-27T10:25:42+00:00", "fork": "False", "license": "licensed"}}