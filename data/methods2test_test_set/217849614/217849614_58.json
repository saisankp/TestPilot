{"test_class": {"identifier": "BloomFilterHttpServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String testingFilterName = \"TestingFilter\";", "modifier": "private static final", "type": "String", "declarator": "testingFilterName = \"TestingFilter\"", "var_name": "testingFilterName"}, {"original_string": "private static final ObjectMapper mapper = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private static final GuavaBloomFilterFactory factory = new GuavaBloomFilterFactory();", "modifier": "private static final", "type": "GuavaBloomFilterFactory", "declarator": "factory = new GuavaBloomFilterFactory()", "var_name": "factory"}, {"original_string": "private BloomFilterManager<GuavaBloomFilter, ExpirableBloomFilterConfig> mockedManager;", "modifier": "private", "type": "BloomFilterManager<GuavaBloomFilter, ExpirableBloomFilterConfig>", "declarator": "mockedManager", "var_name": "mockedManager"}, {"original_string": "private BloomFilterHttpService service;", "modifier": "private", "type": "BloomFilterHttpService", "declarator": "service", "var_name": "service"}], "file": "filter-service-core/src/test/java/cn/leancloud/filter/service/BloomFilterHttpServiceTest.java"}, "test_case": {"identifier": "testMultiCheckAndSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultiCheckAndSet() throws Exception {\n        final GuavaBloomFilter testingFilter = factory.createFilter(new ExpirableBloomFilterConfig());\n        when(mockedManager.ensureGetValidFilter(testingFilterName)).thenReturn(testingFilter);\n        final ArrayNode values = mapper.createArrayNode();\n        values.add(\"testing-value1\");\n        values.add(\"testing-value2\");\n        values.add(\"testing-value2\");\n        final ObjectNode param = mapper.createObjectNode();\n        param.set(\"values\", values);\n        final JsonNode res = service.multiCheck(testingFilterName, param);\n        for (final JsonNode node : res) {\n            assertThat(node.asBoolean()).isFalse();\n        }\n    }", "signature": "void testMultiCheckAndSet()", "full_signature": "@Test public void testMultiCheckAndSet()", "class_method_signature": "BloomFilterHttpServiceTest.testMultiCheckAndSet()", "testcase": true, "constructor": false, "invocations": ["createFilter", "thenReturn", "when", "ensureGetValidFilter", "createArrayNode", "add", "add", "add", "createObjectNode", "set", "multiCheck", "isFalse", "assertThat", "asBoolean"]}, "focal_class": {"identifier": "BloomFilterHttpService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper MAPPER = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = new ObjectMapper()", "var_name": "MAPPER"}, {"original_string": "private final BloomFilterManager<?, ? super ExpirableBloomFilterConfig> bloomFilterManager;", "modifier": "private final", "type": "BloomFilterManager<?, ? super ExpirableBloomFilterConfig>", "declarator": "bloomFilterManager", "var_name": "bloomFilterManager"}], "methods": [{"identifier": "BloomFilterHttpService", "parameters": "(BloomFilterManager<?, ? super ExpirableBloomFilterConfig> bloomFilterManager)", "modifiers": "public", "return": "", "signature": " BloomFilterHttpService(BloomFilterManager<?, ? super ExpirableBloomFilterConfig> bloomFilterManager)", "full_signature": "public  BloomFilterHttpService(BloomFilterManager<?, ? super ExpirableBloomFilterConfig> bloomFilterManager)", "class_method_signature": "BloomFilterHttpService.BloomFilterHttpService(BloomFilterManager<?, ? super ExpirableBloomFilterConfig> bloomFilterManager)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(@Param String name,\n                               @RequestObject JsonNode req)", "modifiers": "@Put(\"/{name}\") public", "return": "HttpResponse", "signature": "HttpResponse create(@Param String name,\n                               @RequestObject JsonNode req)", "full_signature": "@Put(\"/{name}\") public HttpResponse create(@Param String name,\n                               @RequestObject JsonNode req)", "class_method_signature": "BloomFilterHttpService.create(@Param String name,\n                               @RequestObject JsonNode req)", "testcase": false, "constructor": false}, {"identifier": "getFilterInfo", "parameters": "(@Param String name)", "modifiers": "@Get(\"/{name}\") public", "return": "JsonNode", "signature": "JsonNode getFilterInfo(@Param String name)", "full_signature": "@Get(\"/{name}\") public JsonNode getFilterInfo(@Param String name)", "class_method_signature": "BloomFilterHttpService.getFilterInfo(@Param String name)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "()", "modifiers": "@Get(\"/list\") public", "return": "JsonNode", "signature": "JsonNode list()", "full_signature": "@Get(\"/list\") public JsonNode list()", "class_method_signature": "BloomFilterHttpService.list()", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(@Param String name,\n                          @RequestObject JsonNode req)", "modifiers": "@Post(\"/{name}/check\") public", "return": "JsonNode", "signature": "JsonNode check(@Param String name,\n                          @RequestObject JsonNode req)", "full_signature": "@Post(\"/{name}/check\") public JsonNode check(@Param String name,\n                          @RequestObject JsonNode req)", "class_method_signature": "BloomFilterHttpService.check(@Param String name,\n                          @RequestObject JsonNode req)", "testcase": false, "constructor": false}, {"identifier": "multiCheck", "parameters": "(@Param String name,\n                               @RequestObject JsonNode req)", "modifiers": "@Post(\"/{name}/multi-check\") public", "return": "JsonNode", "signature": "JsonNode multiCheck(@Param String name,\n                               @RequestObject JsonNode req)", "full_signature": "@Post(\"/{name}/multi-check\") public JsonNode multiCheck(@Param String name,\n                               @RequestObject JsonNode req)", "class_method_signature": "BloomFilterHttpService.multiCheck(@Param String name,\n                               @RequestObject JsonNode req)", "testcase": false, "constructor": false}, {"identifier": "checkAndSet", "parameters": "(@Param String name,\n                                @RequestObject JsonNode req)", "modifiers": "@Post(\"/{name}/check-and-set\") public", "return": "JsonNode", "signature": "JsonNode checkAndSet(@Param String name,\n                                @RequestObject JsonNode req)", "full_signature": "@Post(\"/{name}/check-and-set\") public JsonNode checkAndSet(@Param String name,\n                                @RequestObject JsonNode req)", "class_method_signature": "BloomFilterHttpService.checkAndSet(@Param String name,\n                                @RequestObject JsonNode req)", "testcase": false, "constructor": false}, {"identifier": "multiCheckAndSet", "parameters": "(@Param String name,\n                                     @RequestObject JsonNode req)", "modifiers": "@Post(\"/{name}/multi-check-and-set\") public", "return": "JsonNode", "signature": "JsonNode multiCheckAndSet(@Param String name,\n                                     @RequestObject JsonNode req)", "full_signature": "@Post(\"/{name}/multi-check-and-set\") public JsonNode multiCheckAndSet(@Param String name,\n                                     @RequestObject JsonNode req)", "class_method_signature": "BloomFilterHttpService.multiCheckAndSet(@Param String name,\n                                     @RequestObject JsonNode req)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(@Param String name)", "modifiers": "@Delete(\"/{name}\") public", "return": "HttpResponse", "signature": "HttpResponse remove(@Param String name)", "full_signature": "@Delete(\"/{name}\") public HttpResponse remove(@Param String name)", "class_method_signature": "BloomFilterHttpService.remove(@Param String name)", "testcase": false, "constructor": false}], "file": "filter-service-core/src/main/java/cn/leancloud/filter/service/BloomFilterHttpService.java"}, "focal_method": {"identifier": "multiCheckAndSet", "parameters": "(@Param String name,\n                                     @RequestObject JsonNode req)", "modifiers": "@Post(\"/{name}/multi-check-and-set\") public", "return": "JsonNode", "body": "@Post(\"/{name}/multi-check-and-set\")\n    public JsonNode multiCheckAndSet(@Param String name,\n                                     @RequestObject JsonNode req)\n            throws FilterNotFoundException {\n        final JsonNode values = checkNotNull(\"values\", req.get(\"values\"));\n        checkParameter(\"values\", values.isArray(), \"expect Json array\");\n\n        final BloomFilter filter = bloomFilterManager.ensureGetValidFilter(name);\n        final ArrayNode response = MAPPER.createArrayNode();\n        for (final JsonNode value : values) {\n            if (value.isTextual()) {\n                response.add(BooleanNode.valueOf(!filter.set(value.textValue())));\n            } else {\n                response.add(BooleanNode.FALSE);\n            }\n        }\n        return response;\n    }", "signature": "JsonNode multiCheckAndSet(@Param String name,\n                                     @RequestObject JsonNode req)", "full_signature": "@Post(\"/{name}/multi-check-and-set\") public JsonNode multiCheckAndSet(@Param String name,\n                                     @RequestObject JsonNode req)", "class_method_signature": "BloomFilterHttpService.multiCheckAndSet(@Param String name,\n                                     @RequestObject JsonNode req)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "get", "checkParameter", "isArray", "ensureGetValidFilter", "createArrayNode", "isTextual", "add", "valueOf", "set", "textValue", "add"]}, "repository": {"repo_id": 217849614, "url": "https://github.com/leancloud/filter-service", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 2797, "license": "licensed"}}