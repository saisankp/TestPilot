{"test_class": {"identifier": "TrackFileReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/com/platypii/baseline/tracks/TrackFileReaderTest.java"}, "test_case": {"identifier": "readTwice", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void readTwice() throws IOException {\n        final TrackFileReader reader = new TrackFileReader(FileUtil.makeFile(\"millis,sensor,lat,lon,alt\\n1,gps,2,3,4\"));\n        assertEquals(1, reader.read().size());\n        assertEquals(1, reader.read().size());\n    }", "signature": "void readTwice()", "full_signature": "@Test public void readTwice()", "class_method_signature": "TrackFileReaderTest.readTwice()", "testcase": true, "constructor": false, "invocations": ["makeFile", "assertEquals", "size", "read", "assertEquals", "size", "read"]}, "focal_class": {"identifier": "TrackFileReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"TrackFileReader\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"TrackFileReader\"", "var_name": "TAG"}, {"original_string": "@NonNull\n    private final File trackFile;", "modifier": "@NonNull\n    private final", "type": "File", "declarator": "trackFile", "var_name": "trackFile"}], "methods": [{"identifier": "TrackFileReader", "parameters": "(@NonNull File trackFile)", "modifiers": "", "return": "", "signature": " TrackFileReader(@NonNull File trackFile)", "full_signature": "  TrackFileReader(@NonNull File trackFile)", "class_method_signature": "TrackFileReader.TrackFileReader(@NonNull File trackFile)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "()", "modifiers": "@NonNull", "return": "List<MLocation>", "signature": "List<MLocation> read()", "full_signature": "@NonNull List<MLocation> read()", "class_method_signature": "TrackFileReader.read()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(@NonNull BufferedReader br)", "modifiers": "@NonNull private", "return": "List<MLocation>", "signature": "List<MLocation> parse(@NonNull BufferedReader br)", "full_signature": "@NonNull private List<MLocation> parse(@NonNull BufferedReader br)", "class_method_signature": "TrackFileReader.parse(@NonNull BufferedReader br)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/platypii/baseline/tracks/TrackFileReader.java"}, "focal_method": {"identifier": "read", "parameters": "()", "modifiers": "@NonNull", "return": "List<MLocation>", "body": "@NonNull\n    List<MLocation> read() {\n        // Read file line by line\n        if (trackFile.getName().endsWith(\".gz\")) {\n            // GZipped track file\n            try (BufferedReader br = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(trackFile)), StandardCharsets.UTF_8))) {\n                return parse(br);\n            } catch (EOFException e) {\n                // Still error but less verbose\n                Log.e(TAG, \"Premature end of gzip track file \" + trackFile + \"\\n\" + e);\n            } catch (IOException e) {\n                Log.e(TAG, \"Error reading track data from \" + trackFile, e);\n            }\n        } else {\n            // Uncompressed CSV file\n            try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(trackFile), StandardCharsets.UTF_8))) {\n                return parse(br);\n            } catch (IOException e) {\n                Log.e(TAG, \"Error reading track data from \" + trackFile, e);\n            }\n        }\n        return new ArrayList<>();\n    }", "signature": "List<MLocation> read()", "full_signature": "@NonNull List<MLocation> read()", "class_method_signature": "TrackFileReader.read()", "testcase": false, "constructor": false, "invocations": ["endsWith", "getName", "parse", "e", "e", "parse", "e"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}