{"test_class": {"identifier": "URISignatureHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final String validURI_NoPlaceholders = \"http://sysmo-db.org/sops/\";", "modifier": "final", "type": "String", "declarator": "validURI_NoPlaceholders = \"http://sysmo-db.org/sops/\"", "var_name": "validURI_NoPlaceholders"}, {"original_string": "final String validURI_PlaceholdersInMainPartOfURIOnly = \"http://sysmo-db.org/sops/{sop_id}/experimental_conditions/{cond_id}\";", "modifier": "final", "type": "String", "declarator": "validURI_PlaceholdersInMainPartOfURIOnly = \"http://sysmo-db.org/sops/{sop_id}/experimental_conditions/{cond_id}\"", "var_name": "validURI_PlaceholdersInMainPartOfURIOnly"}, {"original_string": "final String validURI_PlaceholdersInQueryStringOnly = \"http://sandbox.myexperiment.org/user.xml?id={user_id}&verbose=true\";", "modifier": "final", "type": "String", "declarator": "validURI_PlaceholdersInQueryStringOnly = \"http://sandbox.myexperiment.org/user.xml?id={user_id}&verbose=true\"", "var_name": "validURI_PlaceholdersInQueryStringOnly"}, {"original_string": "final String validURI_3MixedPlaceholders = \"http://sysmo-db.org/sops/{sop_id}/experimental_conditions/{cond_id}?condition_unit={unit}\";", "modifier": "final", "type": "String", "declarator": "validURI_3MixedPlaceholders = \"http://sysmo-db.org/sops/{sop_id}/experimental_conditions/{cond_id}?condition_unit={unit}\"", "var_name": "validURI_3MixedPlaceholders"}, {"original_string": "final String badURI_nullURI = null;", "modifier": "final", "type": "String", "declarator": "badURI_nullURI = null", "var_name": "badURI_nullURI"}, {"original_string": "final String badURI_emptyURI = \"\";", "modifier": "final", "type": "String", "declarator": "badURI_emptyURI = \"\"", "var_name": "badURI_emptyURI"}, {"original_string": "final String badURI_SingleOpeningSymbolNoClosingSymbol = \"http://sysmo-db.org/sops/{sop_id/experimental_conditions\";", "modifier": "final", "type": "String", "declarator": "badURI_SingleOpeningSymbolNoClosingSymbol = \"http://sysmo-db.org/sops/{sop_id/experimental_conditions\"", "var_name": "badURI_SingleOpeningSymbolNoClosingSymbol"}, {"original_string": "final String badURI_SingleClosingSymbolNoOpeningSymbol = \"http://sysmo-db.org/sops/sop_id}/experimental_conditions\";", "modifier": "final", "type": "String", "declarator": "badURI_SingleClosingSymbolNoOpeningSymbol = \"http://sysmo-db.org/sops/sop_id}/experimental_conditions\"", "var_name": "badURI_SingleClosingSymbolNoOpeningSymbol"}, {"original_string": "final String badURI_DoubleOpeningSymbolsNoClosingSymbol = \"http://sysmo-db.org/sops/{{sop_id/experimental_conditions\";", "modifier": "final", "type": "String", "declarator": "badURI_DoubleOpeningSymbolsNoClosingSymbol = \"http://sysmo-db.org/sops/{{sop_id/experimental_conditions\"", "var_name": "badURI_DoubleOpeningSymbolsNoClosingSymbol"}, {"original_string": "final String badURI_DoubleOpeningSymbols = \"http://sysmo-db.org/sops/{{sop_id}/experimental_conditions\";", "modifier": "final", "type": "String", "declarator": "badURI_DoubleOpeningSymbols = \"http://sysmo-db.org/sops/{{sop_id}/experimental_conditions\"", "var_name": "badURI_DoubleOpeningSymbols"}, {"original_string": "final String badURI_DoubleOpeningSymbolsSpaced = \"http://sysmo-db.org/sops/{sop_{id}/experimental_conditions\";", "modifier": "final", "type": "String", "declarator": "badURI_DoubleOpeningSymbolsSpaced = \"http://sysmo-db.org/sops/{sop_{id}/experimental_conditions\"", "var_name": "badURI_DoubleOpeningSymbolsSpaced"}, {"original_string": "final String badURI_DoubleClosingSymbols = \"http://sysmo-db.org/sops/{sop_id}}/experimental_conditions\";", "modifier": "final", "type": "String", "declarator": "badURI_DoubleClosingSymbols = \"http://sysmo-db.org/sops/{sop_id}}/experimental_conditions\"", "var_name": "badURI_DoubleClosingSymbols"}, {"original_string": "final String badURI_DoubleClosingSymbolsSpaced = \"http://sysmo-db.org/sops/{sop}_id}/experimental_conditions\";", "modifier": "final", "type": "String", "declarator": "badURI_DoubleClosingSymbolsSpaced = \"http://sysmo-db.org/sops/{sop}_id}/experimental_conditions\"", "var_name": "badURI_DoubleClosingSymbolsSpaced"}, {"original_string": "final String badURI_NestedPlaceholders = \"http://sandbox.myexperiment.org/user.xml?id={user_{id}}&verbose=true\";", "modifier": "final", "type": "String", "declarator": "badURI_NestedPlaceholders = \"http://sandbox.myexperiment.org/user.xml?id={user_{id}}&verbose=true\"", "var_name": "badURI_NestedPlaceholders"}, {"original_string": "final String badURI_NestedPlaceholdersSpaced = \"http://sandbox.myexperiment.org/user.xml?id={us{er}_id}&verbose=true\";", "modifier": "final", "type": "String", "declarator": "badURI_NestedPlaceholdersSpaced = \"http://sandbox.myexperiment.org/user.xml?id={us{er}_id}&verbose=true\"", "var_name": "badURI_NestedPlaceholdersSpaced"}, {"original_string": "final String badURI_DuplicatePlaceholders = \"http://sandbox.myexperiment.org/user.xml?id={user_id}&verbose={user_id}\";", "modifier": "final", "type": "String", "declarator": "badURI_DuplicatePlaceholders = \"http://sandbox.myexperiment.org/user.xml?id={user_id}&verbose={user_id}\"", "var_name": "badURI_DuplicatePlaceholders"}, {"original_string": "final String badURI_DuplicatePlaceholdersWithOthers = \"http://sysmo-db.org/sops/{unit}/experimental_conditions/{cond_id}?condition_unit={unit}\";", "modifier": "final", "type": "String", "declarator": "badURI_DuplicatePlaceholdersWithOthers = \"http://sysmo-db.org/sops/{unit}/experimental_conditions/{cond_id}?condition_unit={unit}\"", "var_name": "badURI_DuplicatePlaceholdersWithOthers"}, {"original_string": "final String validURI_MultipleQueryString =\n            \"http://dr-site.esrin.esa.int/{catalogue}/genesi/ASA_IMS_1P/rdf/?count={count?}&startPage={startPage?}&startIndex={startIndex?}&q={searchTerms?}\";", "modifier": "final", "type": "String", "declarator": "validURI_MultipleQueryString =\n            \"http://dr-site.esrin.esa.int/{catalogue}/genesi/ASA_IMS_1P/rdf/?count={count?}&startPage={startPage?}&startIndex={startIndex?}&q={searchTerms?}\"", "var_name": "validURI_MultipleQueryString"}], "file": "taverna-rest-activity/src/test/java/org/apache/taverna/activities/rest/URISignatureHandlerTest.java"}, "test_case": {"identifier": "generateCompleteURI_successfulURIGeneration_noURLParameterEscaping", "parameters": "()", "modifiers": "@SuppressWarnings(\"serial\") @Test public", "return": "void", "body": "@SuppressWarnings(\"serial\")\n\t@Test\n\tpublic void generateCompleteURI_successfulURIGeneration_noURLParameterEscaping() {\n\t\tString uriSignature = \"http://sysmo-db.org/sops/{sop_id}/experimental_conditions/{cond_id}?condition_unit={unit}\";\n\t\tMap<String, String> parameters = new HashMap<String, String>() {\n\t\t\t{\n\t\t\t\tput(\"sop_id\", \"1 11\");\n\t\t\t\tput(\"unit\", \"3;3\");\n\t\t\t\tput(\"cond_id\", \"2/2$2&2:\");\n\t\t\t}\n\t\t};\n\n\t\tString completeURI = URISignatureHandler.generateCompleteURI(\n\t\t\t\turiSignature, parameters, false);\n\t\tassertEquals(\n\t\t\t\t\"http://sysmo-db.org/sops/1 11/experimental_conditions/2/2$2&2:?condition_unit=3;3\",\n\t\t\t\tcompleteURI);\n\t}", "signature": "void generateCompleteURI_successfulURIGeneration_noURLParameterEscaping()", "full_signature": "@SuppressWarnings(\"serial\") @Test public void generateCompleteURI_successfulURIGeneration_noURLParameterEscaping()", "class_method_signature": "URISignatureHandlerTest.generateCompleteURI_successfulURIGeneration_noURLParameterEscaping()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "generateCompleteURI", "assertEquals"]}, "focal_class": {"identifier": "URISignatureHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger(URISignatureHandler.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(URISignatureHandler.class)", "var_name": "logger"}, {"original_string": "public static final char PLACEHOLDER_START_SYMBOL = '{';", "modifier": "public static final", "type": "char", "declarator": "PLACEHOLDER_START_SYMBOL = '{'", "var_name": "PLACEHOLDER_START_SYMBOL"}, {"original_string": "public static final char PLACEHOLDER_END_SYMBOL = '}';", "modifier": "public static final", "type": "char", "declarator": "PLACEHOLDER_END_SYMBOL = '}'", "var_name": "PLACEHOLDER_END_SYMBOL"}], "methods": [{"identifier": "extractPlaceholdersWithPositions", "parameters": "(\n\t\t\tString uriSignature)", "modifiers": "public static", "return": "LinkedHashMap<String, Integer>", "signature": "LinkedHashMap<String, Integer> extractPlaceholdersWithPositions(\n\t\t\tString uriSignature)", "full_signature": "public static LinkedHashMap<String, Integer> extractPlaceholdersWithPositions(\n\t\t\tString uriSignature)", "class_method_signature": "URISignatureHandler.extractPlaceholdersWithPositions(\n\t\t\tString uriSignature)", "testcase": false, "constructor": false}, {"identifier": "extractPlaceholders", "parameters": "(String uriSignature)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> extractPlaceholders(String uriSignature)", "full_signature": "public static List<String> extractPlaceholders(String uriSignature)", "class_method_signature": "URISignatureHandler.extractPlaceholders(String uriSignature)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(String uriSignature)", "modifiers": "public static", "return": "void", "signature": "void validate(String uriSignature)", "full_signature": "public static void validate(String uriSignature)", "class_method_signature": "URISignatureHandler.validate(String uriSignature)", "testcase": false, "constructor": false}, {"identifier": "checkForUnsafeCharacters", "parameters": "(String candidateURLSignature)", "modifiers": "public static", "return": "void", "signature": "void checkForUnsafeCharacters(String candidateURLSignature)", "full_signature": "public static void checkForUnsafeCharacters(String candidateURLSignature)", "class_method_signature": "URISignatureHandler.checkForUnsafeCharacters(String candidateURLSignature)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(String uriSignature)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValid(String uriSignature)", "full_signature": "public static boolean isValid(String uriSignature)", "class_method_signature": "URISignatureHandler.isValid(String uriSignature)", "testcase": false, "constructor": false}, {"identifier": "generateCompleteURI", "parameters": "(String uriSignature,\n\t\t\tMap<String, String> specifiedParameters, boolean escapeParameters)", "modifiers": "public static", "return": "String", "signature": "String generateCompleteURI(String uriSignature,\n\t\t\tMap<String, String> specifiedParameters, boolean escapeParameters)", "full_signature": "public static String generateCompleteURI(String uriSignature,\n\t\t\tMap<String, String> specifiedParameters, boolean escapeParameters)", "class_method_signature": "URISignatureHandler.generateCompleteURI(String uriSignature,\n\t\t\tMap<String, String> specifiedParameters, boolean escapeParameters)", "testcase": false, "constructor": false}, {"identifier": "urlEncodeQuery", "parameters": "(String query)", "modifiers": "public static", "return": "String", "signature": "String urlEncodeQuery(String query)", "full_signature": "public static String urlEncodeQuery(String query)", "class_method_signature": "URISignatureHandler.urlEncodeQuery(String query)", "testcase": false, "constructor": false}], "file": "taverna-rest-activity/src/main/java/org/apache/taverna/activities/rest/URISignatureHandler.java"}, "focal_method": {"identifier": "generateCompleteURI", "parameters": "(String uriSignature,\n\t\t\tMap<String, String> specifiedParameters, boolean escapeParameters)", "modifiers": "public static", "return": "String", "body": "public static String generateCompleteURI(String uriSignature,\n\t\t\tMap<String, String> specifiedParameters, boolean escapeParameters)\n\t\t\tthrows URISignatureParsingException,\n\t\t\tURIGenerationFromSignatureException {\n\t\tStringBuilder completeURI = new StringBuilder(uriSignature);\n\n\t\t// no need to make any checks on the uriSignature - it is\n\t\t// already handled by extractPlaceholdersWithPositions() --\n\t\t// if something goes wrong a runtime exception will be thrown\n\t\t// during placeholder extraction\n\t\tLinkedHashMap<String, Integer> placeholdersWithPositions = extractPlaceholdersWithPositions(uriSignature);\n\n\t\t// check that the URI signature contains some placeholders\n\t\tif (placeholdersWithPositions.keySet().size() > 0) {\n\t\t\tMap<String, String> parameters;\n\t\t\t// some work will actually have to be done to replace placeholders\n\t\t\t// with real values;\n\t\t\t// check that the parameter map contains some values\n\t\t\tif (specifiedParameters == null || specifiedParameters.isEmpty()) {\n\t\t\t\tparameters = Collections.emptyMap();\n\t\t\t} else {\n\t\t\t\tparameters = specifiedParameters;\n\t\t\t}\n\n\t\t\t// the 'placeholders' linked list is guaranteed to be in the order\n\t\t\t// of occurrence of placeholders in the URI signature;\n\t\t\t// this will allow to traverse the URI signature and replace the\n\t\t\t// placeholders in the reverse order --\n\t\t\t// this way it is possible to use the indices of placeholders that\n\t\t\t// were already found during their extraction to\n\t\t\t// improve performance\n\t\t\tLinkedList<String> placeholders = new LinkedList<String>(\n\t\t\t\t\tplaceholdersWithPositions.keySet());\n\t\t\tCollections.reverse(placeholders);\n\t\t\tIterator<String> placeholdersIterator = placeholders.iterator();\n\n\t\t\twhile (placeholdersIterator.hasNext()) {\n\t\t\t\tString placeholder = placeholdersIterator.next();\n\t\t\t\tint placeholderStartPos = placeholdersWithPositions\n\t\t\t\t\t\t.get(placeholder) - 1;\n\t\t\t\tint placeholderEndPos = placeholderStartPos\n\t\t\t\t\t\t+ placeholder.length() + 2;\n\t\t\t\tif (parameters.containsKey(placeholder)) {\n\t\t\t\t\tif (escapeParameters) {\n\t\t\t\t\t\tcompleteURI.replace(placeholderStartPos,\n\t\t\t\t\t\t\t\tplaceholderEndPos, urlEncodeQuery(parameters\n\t\t\t\t\t\t\t\t\t\t.get(placeholder)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcompleteURI.replace(placeholderStartPos,\n\t\t\t\t\t\t\t\tplaceholderEndPos, parameters.get(placeholder));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tint qnPos = completeURI.lastIndexOf(\"?\", placeholderStartPos);\n \t\t\t\t\tint ampPos = completeURI.lastIndexOf(\"&\", placeholderStartPos);\n \t\t\t\t\tint slashPos = completeURI.lastIndexOf(\"/\", placeholderStartPos);\n \t\t\t\t\tint startParamPos = Math.max(qnPos, ampPos);\n\t\t\t\t\tif (startParamPos > -1 && startParamPos > slashPos) {\n \t\t\t\t\t\t// We found an optional parameter, so delete all of it\n \t\t\t\t\t\tif (qnPos > ampPos) {\n \t\t\t\t\t\t\t// It might be the first or only parameter so delete carefully\n \t\t\t\t\t\t\tif (placeholderEndPos >= (completeURI.length() - 1)) {\n \t\t\t\t\t\t\t\t// No parameters\n \t\t\t\t\t\t\t\tcompleteURI.replace(startParamPos, placeholderEndPos, \"\");\n \t\t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t\t// Remove the & from the following parameter, not the ? that starts\n \t\t\t\t\t\t\t\tcompleteURI.replace(startParamPos + 1, placeholderEndPos + 1, \"\");\n \t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t// Just delete the optional parameter in total\n\t\t\t\t\t\t\tcompleteURI.replace(startParamPos, placeholderEndPos, \"\");\n \t\t\t\t\t\t}\n \t\t\t\t\t} else {\n \t\t\t\t\t\tthrow new URIGenerationFromSignatureException(\n \t\t\t\t\t\t\t\t\"Parameter map does not contain a key/value for \\\"\"\n \t\t\t\t\t\t\t\t\t\t+ placeholder + \"\\\" mandatory placeholder\");\n \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/*\n\t\t * else { NO PLACEHOLDERS, SO NOTHING TO REPLACE WITH REAL VALUES - JUST\n\t\t * RETURN THE ORIGINAL 'uriSignature' }\n\t\t */\n\n\t\treturn (completeURI.toString());\n\t}", "signature": "String generateCompleteURI(String uriSignature,\n\t\t\tMap<String, String> specifiedParameters, boolean escapeParameters)", "full_signature": "public static String generateCompleteURI(String uriSignature,\n\t\t\tMap<String, String> specifiedParameters, boolean escapeParameters)", "class_method_signature": "URISignatureHandler.generateCompleteURI(String uriSignature,\n\t\t\tMap<String, String> specifiedParameters, boolean escapeParameters)", "testcase": false, "constructor": false, "invocations": ["extractPlaceholdersWithPositions", "size", "keySet", "isEmpty", "emptyMap", "keySet", "reverse", "iterator", "hasNext", "next", "get", "length", "containsKey", "replace", "urlEncodeQuery", "get", "replace", "get", "lastIndexOf", "lastIndexOf", "lastIndexOf", "max", "length", "replace", "replace", "replace", "toString"]}, "repository": {"repo_id": 30956938, "url": "https://github.com/apache/incubator-taverna-common-activities", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 5696, "license": "licensed"}}