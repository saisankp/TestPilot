{"test_class": {"identifier": "ResourceBundleClassLoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/common/osgi/ResourceBundleClassLoaderTest.java"}, "test_case": {"identifier": "testName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testName() throws Exception {\n        Path tmp = Files.createTempDirectory(\"tmp\");\n        URL hostPropertiesURL = createTmpTestPropetiesFile(tmp, \"host/OH-INF/i18n/test.properties\");\n        URL fragmentPropertiesURL = createTmpTestPropetiesFile(tmp, \"fragment/OH-INF/i18n/test.properties\");\n\n        Bundle bundleMock = mock(Bundle.class);\n        when(bundleMock.findEntries(any(), any(), anyBoolean()))\n                .thenAnswer(answer -> Collections.enumeration(List.of(hostPropertiesURL, fragmentPropertiesURL)));\n        when(bundleMock.getEntry(any())).thenReturn(hostPropertiesURL);\n\n        ResourceBundleClassLoader classloader = new ResourceBundleClassLoader(bundleMock, \"/OH-INF/i18n\",\n                \"*.properties\");\n\n        List<URL> propertiesURLs = Collections.list(bundleMock.findEntries(\"/OH-INF/i18n\", \"*.properties\", true));\n\n        assertEquals(2, propertiesURLs.size());\n        assertTrue(propertiesURLs.contains(hostPropertiesURL));\n        assertTrue(propertiesURLs.contains(fragmentPropertiesURL));\n\n        assertEquals(hostPropertiesURL, bundleMock.getEntry(null));\n        assertEquals(hostPropertiesURL, bundleMock.getEntry(\"always-return-hostPropertiesURL\"));\n\n        URL resource = classloader.getResource(\"test.properties\");\n        assertEquals(fragmentPropertiesURL, resource);\n    }", "signature": "void testName()", "full_signature": "@Test public void testName()", "class_method_signature": "ResourceBundleClassLoaderTest.testName()", "testcase": true, "constructor": false, "invocations": ["createTempDirectory", "createTmpTestPropetiesFile", "createTmpTestPropetiesFile", "mock", "thenAnswer", "when", "findEntries", "any", "any", "anyBoolean", "enumeration", "of", "thenReturn", "when", "getEntry", "any", "list", "findEntries", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertEquals", "getEntry", "assertEquals", "getEntry", "getResource", "assertEquals"]}, "focal_class": {"identifier": "ResourceBundleClassLoader", "superclass": "extends ClassLoader", "interfaces": "", "fields": [{"original_string": "private Bundle bundle;", "modifier": "private", "type": "Bundle", "declarator": "bundle", "var_name": "bundle"}, {"original_string": "private String path;", "modifier": "private", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private String filePattern;", "modifier": "private", "type": "String", "declarator": "filePattern", "var_name": "filePattern"}], "methods": [{"identifier": "ResourceBundleClassLoader", "parameters": "(Bundle bundle, String path, String filePattern)", "modifiers": "public", "return": "", "signature": " ResourceBundleClassLoader(Bundle bundle, String path, String filePattern)", "full_signature": "public  ResourceBundleClassLoader(Bundle bundle, String path, String filePattern)", "class_method_signature": "ResourceBundleClassLoader.ResourceBundleClassLoader(Bundle bundle, String path, String filePattern)", "testcase": false, "constructor": true}, {"identifier": "getResource", "parameters": "(String name)", "modifiers": "@Override public", "return": "URL", "signature": "URL getResource(String name)", "full_signature": "@Override public URL getResource(String name)", "class_method_signature": "ResourceBundleClassLoader.getResource(String name)", "testcase": false, "constructor": false}, {"identifier": "getResourceAsStream", "parameters": "(String name)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getResourceAsStream(String name)", "full_signature": "@Override public InputStream getResourceAsStream(String name)", "class_method_signature": "ResourceBundleClassLoader.getResourceAsStream(String name)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/common/osgi/ResourceBundleClassLoader.java"}, "focal_method": {"identifier": "getResource", "parameters": "(String name)", "modifiers": "@Override public", "return": "URL", "body": "@Override\n    public URL getResource(String name) {\n        Enumeration<URL> resourceFiles = this.bundle.findEntries(this.path, this.filePattern, true);\n\n        List<URL> allResources = new LinkedList<>();\n        if (resourceFiles != null) {\n            while (resourceFiles.hasMoreElements()) {\n                URL resourceURL = resourceFiles.nextElement();\n                String resourcePath = resourceURL.getFile();\n                File resourceFile = new File(resourcePath);\n                String resourceFileName = resourceFile.getName();\n\n                if (resourceFileName.equals(name)) {\n                    allResources.add(resourceURL);\n                }\n            }\n        }\n\n        if (allResources.isEmpty()) {\n            return null;\n        }\n\n        if (allResources.size() == 1) {\n            return allResources.get(0);\n        }\n\n        // handle fragment resources. return first one.\n        for (URL url : allResources) {\n            boolean isHostResource = bundle.getEntry(url.getPath()) != null\n                    && bundle.getEntry(url.getPath()).equals(url);\n            if (isHostResource) {\n                continue;\n            }\n            return url;\n        }\n\n        return null;\n    }", "signature": "URL getResource(String name)", "full_signature": "@Override public URL getResource(String name)", "class_method_signature": "ResourceBundleClassLoader.getResource(String name)", "testcase": false, "constructor": false, "invocations": ["findEntries", "hasMoreElements", "nextElement", "getFile", "getName", "equals", "add", "isEmpty", "size", "get", "getEntry", "getPath", "equals", "getEntry", "getPath"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}