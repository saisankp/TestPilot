{"test_class": {"identifier": "TagsTest", "superclass": "", "interfaces": "", "fields": [], "file": "karate-core/src/test/java/com/intuit/karate/core/TagsTest.java"}, "test_case": {"identifier": "testCucumberOptionsTagsConversion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCucumberOptionsTagsConversion() {\n        assertEquals(\"anyOf('@foo')\", Tags.fromKarateOptionsTags(\"@foo\"));\n        assertEquals(\"anyOf('@foo','@bar')\", Tags.fromKarateOptionsTags(\"@foo,@bar\"));\n        assertEquals(\"anyOf('@foo') && anyOf('@bar')\", Tags.fromKarateOptionsTags(\"@foo\", \"@bar\"));\n        assertEquals(\"anyOf('@foo') && not('@bar')\", Tags.fromKarateOptionsTags(\"@foo\", \"~@bar\"));\n        // detect new syntax and use as-is\n        assertEquals(\"anyOf('@foo')\", Tags.fromKarateOptionsTags(\"anyOf('@foo')\"));\n    }", "signature": "void testCucumberOptionsTagsConversion()", "full_signature": "@Test public void testCucumberOptionsTagsConversion()", "class_method_signature": "TagsTest.testCucumberOptionsTagsConversion()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "fromKarateOptionsTags", "assertEquals", "fromKarateOptionsTags", "assertEquals", "fromKarateOptionsTags", "assertEquals", "fromKarateOptionsTags", "assertEquals", "fromKarateOptionsTags"]}, "focal_class": {"identifier": "Tags", "superclass": "", "interfaces": "implements Iterable<Tag>", "fields": [{"original_string": "public static final Tags EMPTY = new Tags(Collections.EMPTY_LIST);", "modifier": "public static final", "type": "Tags", "declarator": "EMPTY = new Tags(Collections.EMPTY_LIST)", "var_name": "EMPTY"}, {"original_string": "private final Collection<Tag> original;", "modifier": "private final", "type": "Collection<Tag>", "declarator": "original", "var_name": "original"}, {"original_string": "private final List<String> tags;", "modifier": "private final", "type": "List<String>", "declarator": "tags", "var_name": "tags"}, {"original_string": "private Map<String, List<String>> tagValues;", "modifier": "private", "type": "Map<String, List<String>>", "declarator": "tagValues", "var_name": "tagValues"}, {"original_string": "private final Bindings bindings;", "modifier": "private final", "type": "Bindings", "declarator": "bindings", "var_name": "bindings"}], "methods": [{"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Tag>", "signature": "Iterator<Tag> iterator()", "full_signature": "@Override public Iterator<Tag> iterator()", "class_method_signature": "Tags.iterator()", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(List<Tag>... lists)", "modifiers": "public static", "return": "Tags", "signature": "Tags merge(List<Tag>... lists)", "full_signature": "public static Tags merge(List<Tag>... lists)", "class_method_signature": "Tags.merge(List<Tag>... lists)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(String tagSelector)", "modifiers": "public", "return": "boolean", "signature": "boolean evaluate(String tagSelector)", "full_signature": "public boolean evaluate(String tagSelector)", "class_method_signature": "Tags.evaluate(String tagSelector)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String tagText)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(String tagText)", "full_signature": "public boolean contains(String tagText)", "class_method_signature": "Tags.contains(String tagText)", "testcase": false, "constructor": false}, {"identifier": "getTags", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getTags()", "full_signature": "public List<String> getTags()", "class_method_signature": "Tags.getTags()", "testcase": false, "constructor": false}, {"identifier": "getTagKeys", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getTagKeys()", "full_signature": "public Collection<String> getTagKeys()", "class_method_signature": "Tags.getTagKeys()", "testcase": false, "constructor": false}, {"identifier": "getTagValues", "parameters": "()", "modifiers": "public", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> getTagValues()", "full_signature": "public Map<String, List<String>> getTagValues()", "class_method_signature": "Tags.getTagValues()", "testcase": false, "constructor": false}, {"identifier": "getOriginal", "parameters": "()", "modifiers": "public", "return": "Collection<Tag>", "signature": "Collection<Tag> getOriginal()", "full_signature": "public Collection<Tag> getOriginal()", "class_method_signature": "Tags.getOriginal()", "testcase": false, "constructor": false}, {"identifier": "Tags", "parameters": "(Collection<Tag> in)", "modifiers": "public", "return": "", "signature": " Tags(Collection<Tag> in)", "full_signature": "public  Tags(Collection<Tag> in)", "class_method_signature": "Tags.Tags(Collection<Tag> in)", "testcase": false, "constructor": true}, {"identifier": "removeTagPrefix", "parameters": "(String s)", "modifiers": "private static", "return": "String", "signature": "String removeTagPrefix(String s)", "full_signature": "private static String removeTagPrefix(String s)", "class_method_signature": "Tags.removeTagPrefix(String s)", "testcase": false, "constructor": false}, {"identifier": "removeTagPrefix", "parameters": "(Collection<Object> c)", "modifiers": "private static", "return": "Collection<String>", "signature": "Collection<String> removeTagPrefix(Collection<Object> c)", "full_signature": "private static Collection<String> removeTagPrefix(Collection<Object> c)", "class_method_signature": "Tags.removeTagPrefix(Collection<Object> c)", "testcase": false, "constructor": false}, {"identifier": "anyOf", "parameters": "(ScriptObjectMirror som)", "modifiers": "public", "return": "boolean", "signature": "boolean anyOf(ScriptObjectMirror som)", "full_signature": "public boolean anyOf(ScriptObjectMirror som)", "class_method_signature": "Tags.anyOf(ScriptObjectMirror som)", "testcase": false, "constructor": false}, {"identifier": "allOf", "parameters": "(ScriptObjectMirror som)", "modifiers": "public", "return": "boolean", "signature": "boolean allOf(ScriptObjectMirror som)", "full_signature": "public boolean allOf(ScriptObjectMirror som)", "class_method_signature": "Tags.allOf(ScriptObjectMirror som)", "testcase": false, "constructor": false}, {"identifier": "not", "parameters": "(ScriptObjectMirror som)", "modifiers": "public", "return": "boolean", "signature": "boolean not(ScriptObjectMirror som)", "full_signature": "public boolean not(ScriptObjectMirror som)", "class_method_signature": "Tags.not(ScriptObjectMirror som)", "testcase": false, "constructor": false}, {"identifier": "valuesFor", "parameters": "(String name)", "modifiers": "public", "return": "Values", "signature": "Values valuesFor(String name)", "full_signature": "public Values valuesFor(String name)", "class_method_signature": "Tags.valuesFor(String name)", "testcase": false, "constructor": false}, {"identifier": "toResultList", "parameters": "(List<Tag> tags)", "modifiers": "public static", "return": "List<Map>", "signature": "List<Map> toResultList(List<Tag> tags)", "full_signature": "public static List<Map> toResultList(List<Tag> tags)", "class_method_signature": "Tags.toResultList(List<Tag> tags)", "testcase": false, "constructor": false}, {"identifier": "fromKarateOptionsTags", "parameters": "(List<String> tags)", "modifiers": "public static", "return": "String", "signature": "String fromKarateOptionsTags(List<String> tags)", "full_signature": "public static String fromKarateOptionsTags(List<String> tags)", "class_method_signature": "Tags.fromKarateOptionsTags(List<String> tags)", "testcase": false, "constructor": false}, {"identifier": "fromKarateOptionsTags", "parameters": "(String... tags)", "modifiers": "public static", "return": "String", "signature": "String fromKarateOptionsTags(String... tags)", "full_signature": "public static String fromKarateOptionsTags(String... tags)", "class_method_signature": "Tags.fromKarateOptionsTags(String... tags)", "testcase": false, "constructor": false}], "file": "karate-core/src/main/java/com/intuit/karate/core/Tags.java"}, "focal_method": {"identifier": "fromKarateOptionsTags", "parameters": "(List<String> tags)", "modifiers": "public static", "return": "String", "body": "public static String fromKarateOptionsTags(List<String> tags) {\n        if (tags == null || tags.isEmpty()) {\n            return null;\n        }\n        return fromKarateOptionsTags(tags.toArray(new String[]{}));\n    }", "signature": "String fromKarateOptionsTags(List<String> tags)", "full_signature": "public static String fromKarateOptionsTags(List<String> tags)", "class_method_signature": "Tags.fromKarateOptionsTags(List<String> tags)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "fromKarateOptionsTags", "toArray"]}, "repository": {"repo_id": 81226206, "url": "https://github.com/intuit/karate", "stars": 2712, "created": "2/7/2017 3:59:17 PM +00:00", "updates": "2020-01-27T21:00:57+00:00", "fork": "False", "license": "licensed"}}