{"test_class": {"identifier": "WilmaBootstrapTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String WILMA_CANNOT_BE_STARTED_ERROR_MSG = \"Wilma cannot be started. \";", "modifier": "private static final", "type": "String", "declarator": "WILMA_CANNOT_BE_STARTED_ERROR_MSG = \"Wilma cannot be started. \"", "var_name": "WILMA_CANNOT_BE_STARTED_ERROR_MSG"}, {"original_string": "private ApplicationContextFactory applicationContextFactory;", "modifier": "private", "type": "ApplicationContextFactory", "declarator": "applicationContextFactory", "var_name": "applicationContextFactory"}, {"original_string": "@Mock\n    private ClassPathXmlApplicationContext applicationContext;", "modifier": "@Mock\n    private", "type": "ClassPathXmlApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "@Mock\n    private MutablePropertySources propertyResources;", "modifier": "@Mock\n    private", "type": "MutablePropertySources", "declarator": "propertyResources", "var_name": "propertyResources"}, {"original_string": "@Mock\n    private WilmaEngine wilmaEngine;", "modifier": "@Mock\n    private", "type": "WilmaEngine", "declarator": "wilmaEngine", "var_name": "wilmaEngine"}, {"original_string": "@Mock\n    private WilmaServiceListener wilmaServiceListener;", "modifier": "@Mock\n    private", "type": "WilmaServiceListener", "declarator": "wilmaServiceListener", "var_name": "wilmaServiceListener"}, {"original_string": "@Mock\n    private SchedulingCannotBeStartedException schedulingCannotBeStartedException;", "modifier": "@Mock\n    private", "type": "SchedulingCannotBeStartedException", "declarator": "schedulingCannotBeStartedException", "var_name": "schedulingCannotBeStartedException"}, {"original_string": "@Mock\n    private InvalidPropertyException invalidPropertyException;", "modifier": "@Mock\n    private", "type": "InvalidPropertyException", "declarator": "invalidPropertyException", "var_name": "invalidPropertyException"}, {"original_string": "@Mock\n    private PropertiesNotAvailableException propertiesNotAvailableException;", "modifier": "@Mock\n    private", "type": "PropertiesNotAvailableException", "declarator": "propertiesNotAvailableException", "var_name": "propertiesNotAvailableException"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Mock\n    private SystemExceptionSelector systemExceptionSelector;", "modifier": "@Mock\n    private", "type": "SystemExceptionSelector", "declarator": "systemExceptionSelector", "var_name": "systemExceptionSelector"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private BeanCreationException beanCreationException;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private", "type": "BeanCreationException", "declarator": "beanCreationException", "var_name": "beanCreationException"}, {"original_string": "@InjectMocks\n    private WilmaBootstrap underTest;", "modifier": "@InjectMocks\n    private", "type": "WilmaBootstrap", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-engine/src/test/java/com/epam/wilma/engine/bootstrap/WilmaBootstrapTest.java"}, "test_case": {"identifier": "testBootstrapWhenThrowsSchedulingCannotBeStartedExceptionShouldLogException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBootstrapWhenThrowsSchedulingCannotBeStartedExceptionShouldLogException() {\n        //GIVEN\n        given(applicationContext.getBean(WilmaEngine.class)).willThrow(beanCreationException);\n        given(beanCreationException.getMostSpecificCause()).willReturn(schedulingCannotBeStartedException);\n        given(beanCreationException.contains(SchedulingCannotBeStartedException.class)).willReturn(true);\n        given(beanCreationException.getCause()).willReturn(schedulingCannotBeStartedException);\n        given(systemExceptionSelector.getSystemException(beanCreationException)).willReturn(schedulingCannotBeStartedException);\n        //WHEN\n        underTest.bootstrap();\n        //THEN\n        verify(systemExceptionSelector).getSystemException(beanCreationException);\n        verify(logger).error(WILMA_CANNOT_BE_STARTED_ERROR_MSG + beanCreationException.getMostSpecificCause().getMessage(),\n                schedulingCannotBeStartedException);\n    }", "signature": "void testBootstrapWhenThrowsSchedulingCannotBeStartedExceptionShouldLogException()", "full_signature": "@Test public void testBootstrapWhenThrowsSchedulingCannotBeStartedExceptionShouldLogException()", "class_method_signature": "WilmaBootstrapTest.testBootstrapWhenThrowsSchedulingCannotBeStartedExceptionShouldLogException()", "testcase": true, "constructor": false, "invocations": ["willThrow", "given", "getBean", "willReturn", "given", "getMostSpecificCause", "willReturn", "given", "contains", "willReturn", "given", "getCause", "willReturn", "given", "getSystemException", "bootstrap", "getSystemException", "verify", "error", "verify", "getMessage", "getMostSpecificCause"]}, "focal_class": {"identifier": "WilmaBootstrap", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SPRING_APP_CONTEXT_PATH = \"conf/spring/engine-application-context.xml\";", "modifier": "private static final", "type": "String", "declarator": "SPRING_APP_CONTEXT_PATH = \"conf/spring/engine-application-context.xml\"", "var_name": "SPRING_APP_CONTEXT_PATH"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(WilmaBootstrap.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(WilmaBootstrap.class)", "var_name": "logger"}, {"original_string": "private final ApplicationContextFactory applicationContextFactory;", "modifier": "private final", "type": "ApplicationContextFactory", "declarator": "applicationContextFactory", "var_name": "applicationContextFactory"}, {"original_string": "private final SystemExceptionSelector systemExceptionSelector;", "modifier": "private final", "type": "SystemExceptionSelector", "declarator": "systemExceptionSelector", "var_name": "systemExceptionSelector"}], "methods": [{"identifier": "WilmaBootstrap", "parameters": "(final ApplicationContextFactory applicationContextFactory)", "modifiers": "public", "return": "", "signature": " WilmaBootstrap(final ApplicationContextFactory applicationContextFactory)", "full_signature": "public  WilmaBootstrap(final ApplicationContextFactory applicationContextFactory)", "class_method_signature": "WilmaBootstrap.WilmaBootstrap(final ApplicationContextFactory applicationContextFactory)", "testcase": false, "constructor": true}, {"identifier": "bootstrap", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void bootstrap()", "full_signature": "public void bootstrap()", "class_method_signature": "WilmaBootstrap.bootstrap()", "testcase": false, "constructor": false}, {"identifier": "getApplicationContext", "parameters": "()", "modifiers": "", "return": "ClassPathXmlApplicationContext", "signature": "ClassPathXmlApplicationContext getApplicationContext()", "full_signature": " ClassPathXmlApplicationContext getApplicationContext()", "class_method_signature": "WilmaBootstrap.getApplicationContext()", "testcase": false, "constructor": false}, {"identifier": "closeApplicationContext", "parameters": "(final ClassPathXmlApplicationContext applicationContext)", "modifiers": "private", "return": "void", "signature": "void closeApplicationContext(final ClassPathXmlApplicationContext applicationContext)", "full_signature": "private void closeApplicationContext(final ClassPathXmlApplicationContext applicationContext)", "class_method_signature": "WilmaBootstrap.closeApplicationContext(final ClassPathXmlApplicationContext applicationContext)", "testcase": false, "constructor": false}, {"identifier": "logErrorByTypeOfException", "parameters": "(final Exception e)", "modifiers": "private", "return": "void", "signature": "void logErrorByTypeOfException(final Exception e)", "full_signature": "private void logErrorByTypeOfException(final Exception e)", "class_method_signature": "WilmaBootstrap.logErrorByTypeOfException(final Exception e)", "testcase": false, "constructor": false}, {"identifier": "logError", "parameters": "(final String message, final Exception e)", "modifiers": "private", "return": "void", "signature": "void logError(final String message, final Exception e)", "full_signature": "private void logError(final String message, final Exception e)", "class_method_signature": "WilmaBootstrap.logError(final String message, final Exception e)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-engine/src/main/java/com/epam/wilma/engine/bootstrap/WilmaBootstrap.java"}, "focal_method": {"identifier": "bootstrap", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void bootstrap() {\n        ClassPathXmlApplicationContext applicationContext = null;\n        try {\n            applicationContext = getApplicationContext();\n            WilmaEngine wilmaEngine = applicationContext.getBean(WilmaEngine.class);\n            WilmaServiceListener wilmaServiceListener = applicationContext.getBean(WilmaServiceListener.class);\n            wilmaEngine.addListener(wilmaServiceListener, MoreExecutors.directExecutor());\n            wilmaEngine.start();\n        } catch (Exception e) {\n            logErrorByTypeOfException(e);\n            closeApplicationContext(applicationContext);\n        }\n    }", "signature": "void bootstrap()", "full_signature": "public void bootstrap()", "class_method_signature": "WilmaBootstrap.bootstrap()", "testcase": false, "constructor": false, "invocations": ["getApplicationContext", "getBean", "getBean", "addListener", "directExecutor", "start", "logErrorByTypeOfException", "closeApplicationContext"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}