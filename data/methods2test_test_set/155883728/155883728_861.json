{"test_class": {"identifier": "PackageGraphTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PackageId container1 = PackageId.fromString(\"container1\");", "modifier": "private final", "type": "PackageId", "declarator": "container1 = PackageId.fromString(\"container1\")", "var_name": "container1"}, {"original_string": "private final PackageId cont1sub1 = PackageId.fromString(\"cont1sub1\");", "modifier": "private final", "type": "PackageId", "declarator": "cont1sub1 = PackageId.fromString(\"cont1sub1\")", "var_name": "cont1sub1"}, {"original_string": "private final PackageId cont1emb1 = PackageId.fromString(\"cont1emb1\");", "modifier": "private final", "type": "PackageId", "declarator": "cont1emb1 = PackageId.fromString(\"cont1emb1\")", "var_name": "cont1emb1"}, {"original_string": "private final EmbeddedPackageInstallable installable1 = new EmbeddedPackageInstallable(container1, \"\", cont1emb1);", "modifier": "private final", "type": "EmbeddedPackageInstallable", "declarator": "installable1 = new EmbeddedPackageInstallable(container1, \"\", cont1emb1)", "var_name": "installable1"}, {"original_string": "private final PackageId container2 = PackageId.fromString(\"container2\");", "modifier": "private final", "type": "PackageId", "declarator": "container2 = PackageId.fromString(\"container2\")", "var_name": "container2"}, {"original_string": "private final PackageId cont2sub1 = PackageId.fromString(\"cont2sub1\");", "modifier": "private final", "type": "PackageId", "declarator": "cont2sub1 = PackageId.fromString(\"cont2sub1\")", "var_name": "cont2sub1"}, {"original_string": "private final PackageId cont2emb1 = PackageId.fromString(\"cont2emb1\");", "modifier": "private final", "type": "PackageId", "declarator": "cont2emb1 = PackageId.fromString(\"cont2emb1\")", "var_name": "cont2emb1"}, {"original_string": "private final EmbeddedPackageInstallable installable2 = new EmbeddedPackageInstallable(container2, \"\", cont2emb1);", "modifier": "private final", "type": "EmbeddedPackageInstallable", "declarator": "installable2 = new EmbeddedPackageInstallable(container2, \"\", cont2emb1)", "var_name": "installable2"}, {"original_string": "private final PackageGraph graph = new PackageGraph();", "modifier": "private final", "type": "PackageGraph", "declarator": "graph = new PackageGraph()", "var_name": "graph"}, {"original_string": "private final Set<PackageId> scan1 = Stream.of(container1, cont1sub1, cont1emb1).collect(Collectors.toSet());", "modifier": "private final", "type": "Set<PackageId>", "declarator": "scan1 = Stream.of(container1, cont1sub1, cont1emb1).collect(Collectors.toSet())", "var_name": "scan1"}, {"original_string": "private final Set<PackageId> scan2 = Stream.of(container2, cont2sub1, cont2emb1).collect(Collectors.toSet());", "modifier": "private final", "type": "Set<PackageId>", "declarator": "scan2 = Stream.of(container2, cont2sub1, cont2emb1).collect(Collectors.toSet())", "var_name": "scan2"}], "file": "core/src/test/java/net/adamcin/oakpal/core/checks/PackageGraphTest.java"}, "test_case": {"identifier": "testIdentifyEmbeddedPackage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIdentifyEmbeddedPackage() {\n        graph.startedScan();\n        assertNull(\"expect last identified is null\", graph.getLastIdentified());\n        assertFalse(\"expect not identified \" + cont2emb1, graph.isIdentified(cont2emb1));\n        graph.identifyEmbeddedPackage(cont2emb1, null,\n                new EmbeddedPackageInstallable(container2, \"\", cont2emb1));\n        assertTrue(\"expect identified \" + cont2emb1, graph.isIdentified(cont2emb1));\n        assertEquals(\"expect cont2emb1 is last identified\",\n                cont2emb1, graph.getLastIdentified());\n        assertFalse(\"expect not identified \" + cont1emb1, graph.isIdentified(cont1emb1));\n        graph.identifyEmbeddedPackage(cont1emb1, container1, null);\n        assertTrue(\"expect identified \" + cont1emb1, graph.isIdentified(cont1emb1));\n        assertEquals(\"expect cont1emb1 is last identified\",\n                cont1emb1, graph.getLastIdentified());\n    }", "signature": "void testIdentifyEmbeddedPackage()", "full_signature": "@Test public void testIdentifyEmbeddedPackage()", "class_method_signature": "PackageGraphTest.testIdentifyEmbeddedPackage()", "testcase": true, "constructor": false, "invocations": ["startedScan", "assertNull", "getLastIdentified", "assertFalse", "isIdentified", "identifyEmbeddedPackage", "assertTrue", "isIdentified", "assertEquals", "getLastIdentified", "assertFalse", "isIdentified", "identifyEmbeddedPackage", "assertTrue", "isIdentified", "assertEquals", "getLastIdentified"]}, "focal_class": {"identifier": "PackageGraph", "superclass": "", "interfaces": "implements ProgressCheck", "fields": [{"original_string": "final LinkedList<PackageId> identified = new LinkedList<>();", "modifier": "final", "type": "LinkedList<PackageId>", "declarator": "identified = new LinkedList<>()", "var_name": "identified"}, {"original_string": "final Map<PackageId, PackageGraphNode> nodes = new HashMap<>();", "modifier": "final", "type": "Map<PackageId, PackageGraphNode>", "declarator": "nodes = new HashMap<>()", "var_name": "nodes"}], "methods": [{"identifier": "getOrCreateNode", "parameters": "(final @NotNull PackageId packageId)", "modifiers": "private", "return": "PackageGraphNode", "signature": "PackageGraphNode getOrCreateNode(final @NotNull PackageId packageId)", "full_signature": "private PackageGraphNode getOrCreateNode(final @NotNull PackageId packageId)", "class_method_signature": "PackageGraph.getOrCreateNode(final @NotNull PackageId packageId)", "testcase": false, "constructor": false}, {"identifier": "getReportedViolations", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Violation>", "signature": "Collection<Violation> getReportedViolations()", "full_signature": "@Override public Collection<Violation> getReportedViolations()", "class_method_signature": "PackageGraph.getReportedViolations()", "testcase": false, "constructor": false}, {"identifier": "startedScan", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startedScan()", "full_signature": "@Override public void startedScan()", "class_method_signature": "PackageGraph.startedScan()", "testcase": false, "constructor": false}, {"identifier": "identifyPackage", "parameters": "(final PackageId packageId, final File file)", "modifiers": "@Override public", "return": "void", "signature": "void identifyPackage(final PackageId packageId, final File file)", "full_signature": "@Override public void identifyPackage(final PackageId packageId, final File file)", "class_method_signature": "PackageGraph.identifyPackage(final PackageId packageId, final File file)", "testcase": false, "constructor": false}, {"identifier": "identifySubpackage", "parameters": "(final PackageId packageId, final PackageId parentId)", "modifiers": "@Override public", "return": "void", "signature": "void identifySubpackage(final PackageId packageId, final PackageId parentId)", "full_signature": "@Override public void identifySubpackage(final PackageId packageId, final PackageId parentId)", "class_method_signature": "PackageGraph.identifySubpackage(final PackageId packageId, final PackageId parentId)", "testcase": false, "constructor": false}, {"identifier": "identifyEmbeddedPackage", "parameters": "(final PackageId packageId, final PackageId parentId,\n                                        final EmbeddedPackageInstallable slingInstallable)", "modifiers": "@Override public", "return": "void", "signature": "void identifyEmbeddedPackage(final PackageId packageId, final PackageId parentId,\n                                        final EmbeddedPackageInstallable slingInstallable)", "full_signature": "@Override public void identifyEmbeddedPackage(final PackageId packageId, final PackageId parentId,\n                                        final EmbeddedPackageInstallable slingInstallable)", "class_method_signature": "PackageGraph.identifyEmbeddedPackage(final PackageId packageId, final PackageId parentId,\n                                        final EmbeddedPackageInstallable slingInstallable)", "testcase": false, "constructor": false}, {"identifier": "isIdentified", "parameters": "(final @NotNull PackageId packageId)", "modifiers": "public", "return": "boolean", "signature": "boolean isIdentified(final @NotNull PackageId packageId)", "full_signature": "public boolean isIdentified(final @NotNull PackageId packageId)", "class_method_signature": "PackageGraph.isIdentified(final @NotNull PackageId packageId)", "testcase": false, "constructor": false}, {"identifier": "getLastIdentified", "parameters": "()", "modifiers": "public @Nullable", "return": "PackageId", "signature": "PackageId getLastIdentified()", "full_signature": "public @Nullable PackageId getLastIdentified()", "class_method_signature": "PackageGraph.getLastIdentified()", "testcase": false, "constructor": false}, {"identifier": "isRoot", "parameters": "(final @NotNull PackageId packageId)", "modifiers": "public", "return": "boolean", "signature": "boolean isRoot(final @NotNull PackageId packageId)", "full_signature": "public boolean isRoot(final @NotNull PackageId packageId)", "class_method_signature": "PackageGraph.isRoot(final @NotNull PackageId packageId)", "testcase": false, "constructor": false}, {"identifier": "isLeftDescendantOfRight", "parameters": "(final @NotNull PackageId left, final @NotNull PackageId right)", "modifiers": "public", "return": "boolean", "signature": "boolean isLeftDescendantOfRight(final @NotNull PackageId left, final @NotNull PackageId right)", "full_signature": "public boolean isLeftDescendantOfRight(final @NotNull PackageId left, final @NotNull PackageId right)", "class_method_signature": "PackageGraph.isLeftDescendantOfRight(final @NotNull PackageId left, final @NotNull PackageId right)", "testcase": false, "constructor": false}, {"identifier": "internalGetSelfAndAncestors", "parameters": "(final @NotNull PackageId self)", "modifiers": "private", "return": "Stream<PackageId>", "signature": "Stream<PackageId> internalGetSelfAndAncestors(final @NotNull PackageId self)", "full_signature": "private Stream<PackageId> internalGetSelfAndAncestors(final @NotNull PackageId self)", "class_method_signature": "PackageGraph.internalGetSelfAndAncestors(final @NotNull PackageId self)", "testcase": false, "constructor": false}, {"identifier": "getSelfAndAncestors", "parameters": "(final @NotNull PackageId self)", "modifiers": "public", "return": "Collection<PackageId>", "signature": "Collection<PackageId> getSelfAndAncestors(final @NotNull PackageId self)", "full_signature": "public Collection<PackageId> getSelfAndAncestors(final @NotNull PackageId self)", "class_method_signature": "PackageGraph.getSelfAndAncestors(final @NotNull PackageId self)", "testcase": false, "constructor": false}, {"identifier": "internalGetSelfAndDescendents", "parameters": "(final @NotNull PackageId self)", "modifiers": "private", "return": "Stream<PackageId>", "signature": "Stream<PackageId> internalGetSelfAndDescendents(final @NotNull PackageId self)", "full_signature": "private Stream<PackageId> internalGetSelfAndDescendents(final @NotNull PackageId self)", "class_method_signature": "PackageGraph.internalGetSelfAndDescendents(final @NotNull PackageId self)", "testcase": false, "constructor": false}, {"identifier": "getSelfAndDescendants", "parameters": "(final @NotNull PackageId self)", "modifiers": "public", "return": "Collection<PackageId>", "signature": "Collection<PackageId> getSelfAndDescendants(final @NotNull PackageId self)", "full_signature": "public Collection<PackageId> getSelfAndDescendants(final @NotNull PackageId self)", "class_method_signature": "PackageGraph.getSelfAndDescendants(final @NotNull PackageId self)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/checks/PackageGraph.java"}, "focal_method": {"identifier": "identifyEmbeddedPackage", "parameters": "(final PackageId packageId, final PackageId parentId,\n                                        final EmbeddedPackageInstallable slingInstallable)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void identifyEmbeddedPackage(final PackageId packageId, final PackageId parentId,\n                                        final EmbeddedPackageInstallable slingInstallable) {\n        final PackageId self = Optional.ofNullable(slingInstallable).map(EmbeddedPackageInstallable::getEmbeddedId).orElse(packageId);\n        final PackageId parent = Optional.ofNullable(slingInstallable).map(EmbeddedPackageInstallable::getParentId).orElse(parentId);\n        if (self != null && parent != null) {\n            identified.add(self);\n            getOrCreateNode(self).setParent(getOrCreateNode(parent));\n        }\n    }", "signature": "void identifyEmbeddedPackage(final PackageId packageId, final PackageId parentId,\n                                        final EmbeddedPackageInstallable slingInstallable)", "full_signature": "@Override public void identifyEmbeddedPackage(final PackageId packageId, final PackageId parentId,\n                                        final EmbeddedPackageInstallable slingInstallable)", "class_method_signature": "PackageGraph.identifyEmbeddedPackage(final PackageId packageId, final PackageId parentId,\n                                        final EmbeddedPackageInstallable slingInstallable)", "testcase": false, "constructor": false, "invocations": ["orElse", "map", "ofNullable", "orElse", "map", "ofNullable", "add", "setParent", "getOrCreateNode", "getOrCreateNode"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}