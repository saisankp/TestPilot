{"test_class": {"identifier": "BpfProgramTest", "superclass": "", "interfaces": "", "fields": [], "file": "pcap4j-core/src/test/java/org/pcap4j/core/BpfProgramTest.java"}, "test_case": {"identifier": "testOpenLive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testOpenLive() throws Exception {\n    PcapHandle ph = Pcaps.openOffline(\"src/test/resources/org/pcap4j/core/udp_tcp_icmp.pcap\");\n    BpfProgram prog =\n        ph.compileFilter(\"icmp\", BpfCompileMode.OPTIMIZE, PcapHandle.PCAP_NETMASK_UNKNOWN);\n\n    Packet udp = ph.getNextPacket();\n    assertFalse(prog.applyFilter(udp));\n\n    Packet tcp = ph.getNextPacket();\n    assertFalse(prog.applyFilter(tcp.getRawData()));\n\n    byte[] icmp = ph.getNextPacket().getRawData();\n    byte[] icmpArr = new byte[icmp.length + 20];\n    System.arraycopy(icmp, 0, icmpArr, 0, icmp.length);\n    assertTrue(prog.applyFilter(icmpArr, icmp.length, icmp.length));\n  }", "signature": "void testOpenLive()", "full_signature": "@Test public void testOpenLive()", "class_method_signature": "BpfProgramTest.testOpenLive()", "testcase": true, "constructor": false, "invocations": ["openOffline", "compileFilter", "getNextPacket", "assertFalse", "applyFilter", "getNextPacket", "assertFalse", "applyFilter", "getRawData", "getRawData", "getNextPacket", "arraycopy", "assertTrue", "applyFilter"]}, "focal_class": {"identifier": "BpfProgram", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final bpf_program program;", "modifier": "private final", "type": "bpf_program", "declarator": "program", "var_name": "program"}, {"original_string": "private final String expression;", "modifier": "private final", "type": "String", "declarator": "expression", "var_name": "expression"}, {"original_string": "private volatile boolean freed = false;", "modifier": "private volatile", "type": "boolean", "declarator": "freed = false", "var_name": "freed"}, {"original_string": "private final Object lock = new Object();", "modifier": "private final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}], "methods": [{"identifier": "BpfProgram", "parameters": "(bpf_program program, String expression)", "modifiers": "", "return": "", "signature": " BpfProgram(bpf_program program, String expression)", "full_signature": "  BpfProgram(bpf_program program, String expression)", "class_method_signature": "BpfProgram.BpfProgram(bpf_program program, String expression)", "testcase": false, "constructor": true}, {"identifier": "getProgram", "parameters": "()", "modifiers": "", "return": "bpf_program", "signature": "bpf_program getProgram()", "full_signature": " bpf_program getProgram()", "class_method_signature": "BpfProgram.getProgram()", "testcase": false, "constructor": false}, {"identifier": "getExpression", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getExpression()", "full_signature": "public String getExpression()", "class_method_signature": "BpfProgram.getExpression()", "testcase": false, "constructor": false}, {"identifier": "applyFilter", "parameters": "(Packet packet)", "modifiers": "public", "return": "boolean", "signature": "boolean applyFilter(Packet packet)", "full_signature": "public boolean applyFilter(Packet packet)", "class_method_signature": "BpfProgram.applyFilter(Packet packet)", "testcase": false, "constructor": false}, {"identifier": "applyFilter", "parameters": "(byte[] packet)", "modifiers": "public", "return": "boolean", "signature": "boolean applyFilter(byte[] packet)", "full_signature": "public boolean applyFilter(byte[] packet)", "class_method_signature": "BpfProgram.applyFilter(byte[] packet)", "testcase": false, "constructor": false}, {"identifier": "applyFilter", "parameters": "(byte[] packet, int orgPacketLen, int packetLen)", "modifiers": "public", "return": "boolean", "signature": "boolean applyFilter(byte[] packet, int orgPacketLen, int packetLen)", "full_signature": "public boolean applyFilter(byte[] packet, int orgPacketLen, int packetLen)", "class_method_signature": "BpfProgram.applyFilter(byte[] packet, int orgPacketLen, int packetLen)", "testcase": false, "constructor": false}, {"identifier": "isFreed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFreed()", "full_signature": "public boolean isFreed()", "class_method_signature": "BpfProgram.isFreed()", "testcase": false, "constructor": false}, {"identifier": "free", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void free()", "full_signature": "public void free()", "class_method_signature": "BpfProgram.free()", "testcase": false, "constructor": false}], "file": "pcap4j-core/src/main/java/org/pcap4j/core/BpfProgram.java"}, "focal_method": {"identifier": "applyFilter", "parameters": "(Packet packet)", "modifiers": "public", "return": "boolean", "body": "public boolean applyFilter(Packet packet) {\n    return applyFilter(packet.getRawData());\n  }", "signature": "boolean applyFilter(Packet packet)", "full_signature": "public boolean applyFilter(Packet packet)", "class_method_signature": "BpfProgram.applyFilter(Packet packet)", "testcase": false, "constructor": false, "invocations": ["applyFilter", "getRawData"]}, "repository": {"repo_id": 3005042, "url": "https://github.com/kaitoy/pcap4j", "language": "Java", "is_fork": false, "fork_count": 247, "stargazer_count": 779, "size": 15246, "license": "licensed"}}