{"test_class": {"identifier": "WeakConcurrentMapTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "WeakConcurrentMap<TestKey, Object> map = new WeakConcurrentMap<>();", "modifier": "", "type": "WeakConcurrentMap<TestKey, Object>", "declarator": "map = new WeakConcurrentMap<>()", "var_name": "map"}, {"original_string": "TestKey key = new TestKey(\"a\");", "modifier": "", "type": "TestKey", "declarator": "key = new TestKey(\"a\")", "var_name": "key"}], "file": "brave/src/test/java/brave/internal/collect/WeakConcurrentMapTest.java"}, "test_case": {"identifier": "getOrCreate_whenSomeReferencesAreCleared", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void getOrCreate_whenSomeReferencesAreCleared() {\n    map.putIfProbablyAbsent(key, \"1\");\n    pretendGCHappened();\n    map.putIfProbablyAbsent(key, \"1\");\n\n    // we'd expect two distinct entries..\n    assertThat(map.target.keySet())\n      .extracting(WeakReference::get)\n      .containsExactlyInAnyOrder(null, key);\n  }", "signature": "void getOrCreate_whenSomeReferencesAreCleared()", "full_signature": "@Test public void getOrCreate_whenSomeReferencesAreCleared()", "class_method_signature": "WeakConcurrentMapTest.getOrCreate_whenSomeReferencesAreCleared()", "testcase": true, "constructor": false, "invocations": ["putIfProbablyAbsent", "pretendGCHappened", "putIfProbablyAbsent", "containsExactlyInAnyOrder", "extracting", "assertThat", "keySet"]}, "focal_class": {"identifier": "WeakConcurrentMap", "superclass": "extends ReferenceQueue<K>", "interfaces": "", "fields": [{"original_string": "final ConcurrentMap<WeakKey<K>, V> target = new ConcurrentHashMap<>();", "modifier": "final", "type": "ConcurrentMap<WeakKey<K>, V>", "declarator": "target = new ConcurrentHashMap<>()", "var_name": "target"}], "methods": [{"identifier": "getIfPresent", "parameters": "(K key)", "modifiers": "@Nullable public", "return": "V", "signature": "V getIfPresent(K key)", "full_signature": "@Nullable public V getIfPresent(K key)", "class_method_signature": "WeakConcurrentMap.getIfPresent(K key)", "testcase": false, "constructor": false}, {"identifier": "putIfProbablyAbsent", "parameters": "(K key, V value)", "modifiers": "@Nullable public", "return": "V", "signature": "V putIfProbablyAbsent(K key, V value)", "full_signature": "@Nullable public V putIfProbablyAbsent(K key, V value)", "class_method_signature": "WeakConcurrentMap.putIfProbablyAbsent(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(K key)", "modifiers": "@Nullable public", "return": "V", "signature": "V remove(K key)", "full_signature": "@Nullable public V remove(K key)", "class_method_signature": "WeakConcurrentMap.remove(K key)", "testcase": false, "constructor": false}, {"identifier": "expungeStaleEntries", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void expungeStaleEntries()", "full_signature": "protected void expungeStaleEntries()", "class_method_signature": "WeakConcurrentMap.expungeStaleEntries()", "testcase": false, "constructor": false}, {"identifier": "removeStaleEntry", "parameters": "(Reference<?> reference)", "modifiers": "protected", "return": "V", "signature": "V removeStaleEntry(Reference<?> reference)", "full_signature": "protected V removeStaleEntry(Reference<?> reference)", "class_method_signature": "WeakConcurrentMap.removeStaleEntry(Reference<?> reference)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "WeakConcurrentMap.toString()", "testcase": false, "constructor": false}, {"identifier": "equal", "parameters": "(@Nullable Object a, @Nullable Object b)", "modifiers": "static", "return": "boolean", "signature": "boolean equal(@Nullable Object a, @Nullable Object b)", "full_signature": "static boolean equal(@Nullable Object a, @Nullable Object b)", "class_method_signature": "WeakConcurrentMap.equal(@Nullable Object a, @Nullable Object b)", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/internal/collect/WeakConcurrentMap.java"}, "focal_method": {"identifier": "putIfProbablyAbsent", "parameters": "(K key, V value)", "modifiers": "@Nullable public", "return": "V", "body": "@Nullable public V putIfProbablyAbsent(K key, V value) {\n    if (key == null) throw new NullPointerException(\"key == null\");\n    if (value == null) throw new NullPointerException(\"value == null\");\n    expungeStaleEntries();\n\n    return target.putIfAbsent(new WeakKey<>(key, this), value);\n  }", "signature": "V putIfProbablyAbsent(K key, V value)", "full_signature": "@Nullable public V putIfProbablyAbsent(K key, V value)", "class_method_signature": "WeakConcurrentMap.putIfProbablyAbsent(K key, V value)", "testcase": false, "constructor": false, "invocations": ["expungeStaleEntries", "putIfAbsent"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}