{"test_class": {"identifier": "MemoryInstanceDetailsViewTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FakeTimer myTimer = new FakeTimer();", "modifier": "private final", "type": "FakeTimer", "declarator": "myTimer = new FakeTimer()", "var_name": "myTimer"}, {"original_string": "@Rule\n  public FakeGrpcChannel myGrpcChannel =\n    new FakeGrpcChannel(\"MEMORY_TEST_CHANNEL\", new FakeTransportService(myTimer), new FakeProfilerService(myTimer),\n                        new FakeMemoryService());", "modifier": "@Rule\n  public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel =\n    new FakeGrpcChannel(\"MEMORY_TEST_CHANNEL\", new FakeTransportService(myTimer), new FakeProfilerService(myTimer),\n                        new FakeMemoryService())", "var_name": "myGrpcChannel"}, {"original_string": "private MemoryProfilerStage myStage;", "modifier": "private", "type": "MemoryProfilerStage", "declarator": "myStage", "var_name": "myStage"}, {"original_string": "private MemoryInstanceDetailsView myDetailsView;", "modifier": "private", "type": "MemoryInstanceDetailsView", "declarator": "myDetailsView", "var_name": "myDetailsView"}, {"original_string": "private FakeIdeProfilerComponents myFakeIdeProfilerComponents;", "modifier": "private", "type": "FakeIdeProfilerComponents", "declarator": "myFakeIdeProfilerComponents", "var_name": "myFakeIdeProfilerComponents"}, {"original_string": "private FakeCaptureObject myFakeCaptureObject;", "modifier": "private", "type": "FakeCaptureObject", "declarator": "myFakeCaptureObject", "var_name": "myFakeCaptureObject"}], "file": "profilers-ui/testSrc/com/android/tools/profilers/memory/MemoryInstanceDetailsViewTest.java"}, "test_case": {"identifier": "buildTreeTest", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n  @Test\n  public void buildTreeTest() throws Exception {\n    // Setup mock reference hierarchy:\n    // MockRoot\n    // -> Ref1\n    // --> Ref2\n    // --> Ref3\n    // ---> Ref4\n    // -> Ref5\n    FakeInstanceObject fakeInstance1 =\n      new FakeInstanceObject.Builder(myFakeCaptureObject, 1, \"DUMMY_CLASS\").setName(\"fake1\").setFields(Collections.singletonList(\"mField\"))\n        .build();\n    FakeInstanceObject fakeInstance2 =\n      new FakeInstanceObject.Builder(myFakeCaptureObject, 1, \"DUMMY_CLASS\").setName(\"fake2\").setFields(Collections.singletonList(\"mField\"))\n        .build();\n    FakeInstanceObject fakeInstance3 =\n      new FakeInstanceObject.Builder(myFakeCaptureObject, 1, \"DUMMY_CLASS\").setName(\"fake3\").setFields(Collections.singletonList(\"mField\"))\n        .build();\n    FakeInstanceObject fakeInstance4 =\n      new FakeInstanceObject.Builder(myFakeCaptureObject, 1, \"DUMMY_CLASS\").setName(\"fake4\").setFields(Collections.singletonList(\"mField\"))\n        .build();\n    FakeInstanceObject fakeInstance5 =\n      new FakeInstanceObject.Builder(myFakeCaptureObject, 1, \"DUMMY_CLASS\").setName(\"fake5\").setFields(Collections.singletonList(\"mField\"))\n        .build();\n    FakeInstanceObject fakeRootObject =\n      new FakeInstanceObject.Builder(myFakeCaptureObject, 2, \"DUMMY_ROOT\").setName(\"FakeRoot\").build();\n\n    fakeInstance1.setFieldValue(\"mField\", OBJECT, fakeRootObject);\n    fakeInstance2.setFieldValue(\"mField\", OBJECT, fakeInstance1);\n    fakeInstance3.setFieldValue(\"mField\", OBJECT, fakeInstance1);\n    fakeInstance4.setFieldValue(\"mField\", OBJECT, fakeInstance3);\n    fakeInstance5.setFieldValue(\"mField\", OBJECT, fakeRootObject);\n\n    myFakeCaptureObject\n      .addInstanceObjects(ImmutableSet.of(fakeInstance1, fakeInstance2, fakeInstance3, fakeInstance4, fakeInstance5, fakeRootObject));\n\n    myStage.selectCaptureDuration(\n      new CaptureDurationData<>(1, false, false, new CaptureEntry<CaptureObject>(new Object(), () -> myFakeCaptureObject)),\n      null);\n    JTree tree = myDetailsView.buildTree(fakeRootObject);\n    DefaultTreeModel treeModel = (DefaultTreeModel)tree.getModel();\n    assertNotNull(treeModel);\n    MemoryObjectTreeNode<ValueObject> treeRoot = (MemoryObjectTreeNode<ValueObject>)treeModel.getRoot();\n    assertNotNull(treeRoot);\n\n    // Check the initialize tree structure is correctly populated\n    assertEquals(fakeRootObject, treeRoot.getAdapter());\n    assertEquals(2, treeRoot.getChildCount());\n    MemoryObjectTreeNode ref1 = treeRoot.getChildren().stream().filter(child -> child.getAdapter() instanceof ReferenceObject &&\n                                                                                \"fake1\".equals(((ReferenceObject)child.getAdapter())\n                                                                                                 .getReferenceInstance().getName()))\n      .findFirst().orElse(null);\n    assertNotNull(ref1);\n    assertEquals(fakeInstance1, ((ReferenceObject)ref1.getAdapter()).getReferenceInstance());\n    MemoryObjectTreeNode ref5 = treeRoot.getChildren().stream().filter(child -> child.getAdapter() instanceof ReferenceObject &&\n                                                                                \"fake5\".equals(((ReferenceObject)child.getAdapter())\n                                                                                                 .getReferenceInstance().getName()))\n      .findFirst().orElse(null);\n    assertNotNull(ref5);\n    assertEquals(fakeInstance5, ((ReferenceObject)ref5.getAdapter()).getReferenceInstance());\n\n    assertEquals(2, ref1.getChildCount());\n    assertEquals(0, ref5.getChildCount());\n\n    MemoryObjectTreeNode<ReferenceObject> ref2 = (MemoryObjectTreeNode<ReferenceObject>)ref1.getChildAt(0);\n    MemoryObjectTreeNode<ReferenceObject> ref3 = (MemoryObjectTreeNode<ReferenceObject>)ref1.getChildAt(1);\n    assertEquals(fakeInstance2, ref2.getAdapter().getReferenceInstance());\n    assertEquals(fakeInstance3, ref3.getAdapter().getReferenceInstance());\n\n    TreePath path = new TreePath(new Object[]{treeRoot, ref1});\n    tree.expandPath(path);\n    assertEquals(0, ref2.getChildCount());\n    assertEquals(1, ref3.getChildCount());\n    assertEquals(fakeInstance4, ((MemoryObjectTreeNode<ReferenceObject>)ref3.getChildAt(0)).getAdapter().getReferenceInstance());\n  }", "signature": "void buildTreeTest()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void buildTreeTest()", "class_method_signature": "MemoryInstanceDetailsViewTest.buildTreeTest()", "testcase": true, "constructor": false, "invocations": ["build", "setFields", "setName", "singletonList", "build", "setFields", "setName", "singletonList", "build", "setFields", "setName", "singletonList", "build", "setFields", "setName", "singletonList", "build", "setFields", "setName", "singletonList", "build", "setName", "setFieldValue", "setFieldValue", "setFieldValue", "setFieldValue", "setFieldValue", "addInstanceObjects", "of", "selectCaptureDuration", "buildTree", "getModel", "assertNotNull", "getRoot", "assertNotNull", "assertEquals", "getAdapter", "assertEquals", "getChildCount", "orElse", "findFirst", "filter", "stream", "getChildren", "getAdapter", "equals", "getName", "getReferenceInstance", "getAdapter", "assertNotNull", "assertEquals", "getReferenceInstance", "getAdapter", "orElse", "findFirst", "filter", "stream", "getChildren", "getAdapter", "equals", "getName", "getReferenceInstance", "getAdapter", "assertNotNull", "assertEquals", "getReferenceInstance", "getAdapter", "assertEquals", "getChildCount", "assertEquals", "getChildCount", "getChildAt", "getChildAt", "assertEquals", "getReferenceInstance", "getAdapter", "assertEquals", "getReferenceInstance", "getAdapter", "expandPath", "assertEquals", "getChildCount", "assertEquals", "getChildCount", "assertEquals", "getReferenceInstance", "getAdapter", "getChildAt"]}, "focal_class": {"identifier": "MemoryInstanceDetailsView", "superclass": "extends AspectObserver", "interfaces": "", "fields": [{"original_string": "private static final String TITLE_TAB_REFERENCES = \"References\";", "modifier": "private static final", "type": "String", "declarator": "TITLE_TAB_REFERENCES = \"References\"", "var_name": "TITLE_TAB_REFERENCES"}, {"original_string": "private static final String TITLE_TAB_ALLOCATION_CALLSTACK = \"Allocation Call Stack\";", "modifier": "private static final", "type": "String", "declarator": "TITLE_TAB_ALLOCATION_CALLSTACK = \"Allocation Call Stack\"", "var_name": "TITLE_TAB_ALLOCATION_CALLSTACK"}, {"original_string": "private static final String TITLE_TAB_DEALLOCATION_CALLSTACK = \"Deallocation Call Stack\";", "modifier": "private static final", "type": "String", "declarator": "TITLE_TAB_DEALLOCATION_CALLSTACK = \"Deallocation Call Stack\"", "var_name": "TITLE_TAB_DEALLOCATION_CALLSTACK"}, {"original_string": "private static final int LABEL_COLUMN_WIDTH = 500;", "modifier": "private static final", "type": "int", "declarator": "LABEL_COLUMN_WIDTH = 500", "var_name": "LABEL_COLUMN_WIDTH"}, {"original_string": "private static final int DEFAULT_COLUMN_WIDTH = 80;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_COLUMN_WIDTH = 80", "var_name": "DEFAULT_COLUMN_WIDTH"}, {"original_string": "@NotNull private final MemoryProfilerStage myStage;", "modifier": "@NotNull private final", "type": "MemoryProfilerStage", "declarator": "myStage", "var_name": "myStage"}, {"original_string": "@NotNull private final StreamingTimeline myTimeline;", "modifier": "@NotNull private final", "type": "StreamingTimeline", "declarator": "myTimeline", "var_name": "myTimeline"}, {"original_string": "@NotNull private final IdeProfilerComponents myIdeProfilerComponents;", "modifier": "@NotNull private final", "type": "IdeProfilerComponents", "declarator": "myIdeProfilerComponents", "var_name": "myIdeProfilerComponents"}, {"original_string": "@NotNull private final JTabbedPane myTabsPanel;", "modifier": "@NotNull private final", "type": "JTabbedPane", "declarator": "myTabsPanel", "var_name": "myTabsPanel"}, {"original_string": "@NotNull private final StackTraceView myAllocationStackTraceView;", "modifier": "@NotNull private final", "type": "StackTraceView", "declarator": "myAllocationStackTraceView", "var_name": "myAllocationStackTraceView"}, {"original_string": "@NotNull private final StackTraceView myDeallocationStackTraceView;", "modifier": "@NotNull private final", "type": "StackTraceView", "declarator": "myDeallocationStackTraceView", "var_name": "myDeallocationStackTraceView"}, {"original_string": "@Nullable private JComponent myReferenceColumnTree;", "modifier": "@Nullable private", "type": "JComponent", "declarator": "myReferenceColumnTree", "var_name": "myReferenceColumnTree"}, {"original_string": "@Nullable private JTree myReferenceTree;", "modifier": "@Nullable private", "type": "JTree", "declarator": "myReferenceTree", "var_name": "myReferenceTree"}, {"original_string": "@NotNull private final Map<InstanceAttribute, AttributeColumn> myAttributeColumns = new HashMap<>();", "modifier": "@NotNull private final", "type": "Map<InstanceAttribute, AttributeColumn>", "declarator": "myAttributeColumns = new HashMap<>()", "var_name": "myAttributeColumns"}, {"original_string": "@NotNull private final List<InstanceViewer> myInstanceViewers = new ArrayList<>();", "modifier": "@NotNull private final", "type": "List<InstanceViewer>", "declarator": "myInstanceViewers = new ArrayList<>()", "var_name": "myInstanceViewers"}], "methods": [{"identifier": "MemoryInstanceDetailsView", "parameters": "(@NotNull MemoryProfilerStage stage, @NotNull IdeProfilerComponents ideProfilerComponents)", "modifiers": "", "return": "", "signature": " MemoryInstanceDetailsView(@NotNull MemoryProfilerStage stage, @NotNull IdeProfilerComponents ideProfilerComponents)", "full_signature": "  MemoryInstanceDetailsView(@NotNull MemoryProfilerStage stage, @NotNull IdeProfilerComponents ideProfilerComponents)", "class_method_signature": "MemoryInstanceDetailsView.MemoryInstanceDetailsView(@NotNull MemoryProfilerStage stage, @NotNull IdeProfilerComponents ideProfilerComponents)", "testcase": false, "constructor": true}, {"identifier": "trackActiveTab", "parameters": "(ChangeEvent event)", "modifiers": "private", "return": "void", "signature": "void trackActiveTab(ChangeEvent event)", "full_signature": "private void trackActiveTab(ChangeEvent event)", "class_method_signature": "MemoryInstanceDetailsView.trackActiveTab(ChangeEvent event)", "testcase": false, "constructor": false}, {"identifier": "getComponent", "parameters": "()", "modifiers": "@NotNull", "return": "JComponent", "signature": "JComponent getComponent()", "full_signature": "@NotNull JComponent getComponent()", "class_method_signature": "MemoryInstanceDetailsView.getComponent()", "testcase": false, "constructor": false}, {"identifier": "getReferenceTree", "parameters": "()", "modifiers": "@VisibleForTesting @Nullable", "return": "JTree", "signature": "JTree getReferenceTree()", "full_signature": "@VisibleForTesting @Nullable JTree getReferenceTree()", "class_method_signature": "MemoryInstanceDetailsView.getReferenceTree()", "testcase": false, "constructor": false}, {"identifier": "getReferenceColumnTree", "parameters": "()", "modifiers": "@VisibleForTesting @Nullable", "return": "JComponent", "signature": "JComponent getReferenceColumnTree()", "full_signature": "@VisibleForTesting @Nullable JComponent getReferenceColumnTree()", "class_method_signature": "MemoryInstanceDetailsView.getReferenceColumnTree()", "testcase": false, "constructor": false}, {"identifier": "instanceChanged", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void instanceChanged()", "full_signature": "private void instanceChanged()", "class_method_signature": "MemoryInstanceDetailsView.instanceChanged()", "testcase": false, "constructor": false}, {"identifier": "buildReferenceColumnTree", "parameters": "(@NotNull CaptureObject captureObject, @NotNull InstanceObject instance)", "modifiers": "@Nullable private", "return": "JComponent", "signature": "JComponent buildReferenceColumnTree(@NotNull CaptureObject captureObject, @NotNull InstanceObject instance)", "full_signature": "@Nullable private JComponent buildReferenceColumnTree(@NotNull CaptureObject captureObject, @NotNull InstanceObject instance)", "class_method_signature": "MemoryInstanceDetailsView.buildReferenceColumnTree(@NotNull CaptureObject captureObject, @NotNull InstanceObject instance)", "testcase": false, "constructor": false}, {"identifier": "buildTree", "parameters": "(@NotNull InstanceObject instance)", "modifiers": "@VisibleForTesting @NotNull", "return": "JTree", "signature": "JTree buildTree(@NotNull InstanceObject instance)", "full_signature": "@VisibleForTesting @NotNull JTree buildTree(@NotNull InstanceObject instance)", "class_method_signature": "MemoryInstanceDetailsView.buildTree(@NotNull InstanceObject instance)", "testcase": false, "constructor": false}], "file": "profilers-ui/src/com/android/tools/profilers/memory/MemoryInstanceDetailsView.java"}, "focal_method": {"identifier": "buildTree", "parameters": "(@NotNull InstanceObject instance)", "modifiers": "@VisibleForTesting @NotNull", "return": "JTree", "body": "@VisibleForTesting\n  @NotNull\n  JTree buildTree(@NotNull InstanceObject instance) {\n    Comparator<MemoryObjectTreeNode<ValueObject>> comparator = null;\n    if (myReferenceTree != null && myReferenceTree.getModel() != null && myReferenceTree.getModel().getRoot() != null) {\n      Object root = myReferenceTree.getModel().getRoot();\n      if (root instanceof ReferenceTreeNode) {\n        comparator = ((ReferenceTreeNode)root).getComparator();\n      }\n    }\n\n    final ReferenceTreeNode treeRoot = new ReferenceTreeNode(instance);\n    treeRoot.expandNode();\n\n    if (comparator != null) {\n      treeRoot.sort(comparator);\n    }\n\n    final DefaultTreeModel treeModel = new DefaultTreeModel(treeRoot);\n    // Use JTree instead of IJ's tree, because IJ's tree does not happen border's Insets.\n    final JTree tree = new JTree(treeModel);\n    int defaultFontHeight = tree.getFontMetrics(tree.getFont()).getHeight();\n    tree.setRowHeight(defaultFontHeight + ROW_HEIGHT_PADDING);\n    tree.setBorder(TABLE_ROW_BORDER);\n    tree.setRootVisible(true);\n    tree.setShowsRootHandles(true);\n    tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);\n    // Not all nodes have been populated during buildReferenceColumnTree. Here we capture the TreeExpansionEvent to check whether any children\n    // under the expanded node need to be populated.\n    tree.addTreeExpansionListener(new TreeExpansionListener() {\n      @Override\n      public void treeExpanded(TreeExpansionEvent event) {\n        TreePath path = event.getPath();\n\n        assert path.getLastPathComponent() instanceof MemoryObjectTreeNode;\n        ReferenceTreeNode treeNode = (ReferenceTreeNode)path.getLastPathComponent();\n        treeNode.expandNode();\n        treeModel.nodeStructureChanged(treeNode);\n      }\n\n      @Override\n      public void treeCollapsed(TreeExpansionEvent event) {\n      }\n    });\n\n    ContextMenuInstaller contextMenuInstaller = myIdeProfilerComponents.createContextMenuInstaller();\n    contextMenuInstaller.installNavigationContextMenu(tree, myStage.getStudioProfilers().getIdeServices().getCodeNavigator(), () -> {\n      TreePath selection = tree.getSelectionPath();\n      if (selection == null) {\n        return null;\n      }\n\n      MemoryObject memoryObject = ((MemoryObjectTreeNode)selection.getLastPathComponent()).getAdapter();\n      if (memoryObject instanceof InstanceObject) {\n        return new CodeLocation.Builder(((InstanceObject)memoryObject).getClassEntry().getClassName()).build();\n      }\n      else {\n        assert memoryObject instanceof ReferenceObject;\n        return new CodeLocation.Builder(((ReferenceObject)memoryObject).getReferenceInstance().getClassEntry().getClassName()).build();\n      }\n    });\n\n    contextMenuInstaller.installGenericContextMenu(tree, new ContextMenuItem() {\n      @NotNull\n      @Override\n      public String getText() {\n        return \"Go to Instance\";\n      }\n\n      @Nullable\n      @Override\n      public Icon getIcon() {\n        return null;\n      }\n\n      @Override\n      public boolean isEnabled() {\n        return tree.getSelectionPath() != null;\n      }\n\n      @Override\n      public void run() {\n        CaptureObject captureObject = myStage.getSelectedCapture();\n        TreePath selection = tree.getSelectionPath();\n        assert captureObject != null && selection != null;\n        MemoryObject memoryObject = ((MemoryObjectTreeNode)selection.getLastPathComponent()).getAdapter();\n        if (memoryObject instanceof InstanceObject) {\n          assert memoryObject == myStage.getSelectedInstanceObject();\n          // don't do anything because the only instance object in the tree is the one already selected\n        }\n        else {\n          assert memoryObject instanceof ReferenceObject;\n          InstanceObject targetInstance = ((ReferenceObject)memoryObject).getReferenceInstance();\n          HeapSet heapSet = captureObject.getHeapSet(targetInstance.getHeapId());\n          assert heapSet != null;\n          myStage.selectHeapSet(heapSet);\n          ClassifierSet classifierSet = heapSet.findContainingClassifierSet(targetInstance);\n          assert classifierSet instanceof ClassSet;\n          myStage.selectClassSet((ClassSet)classifierSet);\n          myStage.selectInstanceObject(targetInstance);\n        }\n      }\n    });\n\n    tree.addFocusListener(new FocusAdapter() {\n      @Override\n      public void focusGained(FocusEvent e) {\n        if (tree.getSelectionCount() == 0 && tree.getRowCount() != 0) {\n          tree.setSelectionRow(0);\n        }\n      }\n    });\n\n    return tree;\n  }", "signature": "JTree buildTree(@NotNull InstanceObject instance)", "full_signature": "@VisibleForTesting @NotNull JTree buildTree(@NotNull InstanceObject instance)", "class_method_signature": "MemoryInstanceDetailsView.buildTree(@NotNull InstanceObject instance)", "testcase": false, "constructor": false, "invocations": ["getModel", "getRoot", "getModel", "getRoot", "getModel", "getComparator", "expandNode", "sort", "getHeight", "getFontMetrics", "getFont", "setRowHeight", "setBorder", "setRootVisible", "setShowsRootHandles", "setSelectionMode", "getSelectionModel", "addTreeExpansionListener", "getPath", "getLastPathComponent", "getLastPathComponent", "expandNode", "nodeStructureChanged", "createContextMenuInstaller", "installNavigationContextMenu", "getCodeNavigator", "getIdeServices", "getStudioProfilers", "getSelectionPath", "getAdapter", "getLastPathComponent", "build", "getClassName", "getClassEntry", "build", "getClassName", "getClassEntry", "getReferenceInstance", "installGenericContextMenu", "getSelectionPath", "getSelectedCapture", "getSelectionPath", "getAdapter", "getLastPathComponent", "getSelectedInstanceObject", "getReferenceInstance", "getHeapSet", "getHeapId", "selectHeapSet", "findContainingClassifierSet", "selectClassSet", "selectInstanceObject", "addFocusListener", "getSelectionCount", "getRowCount", "setSelectionRow"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}