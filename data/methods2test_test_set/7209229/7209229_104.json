{"test_class": {"identifier": "TestDatabusRelayMain", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static Logger LOG = Logger.getLogger(TestDatabusRelayMain.class);", "modifier": "public final static", "type": "Logger", "declarator": "LOG = Logger.getLogger(TestDatabusRelayMain.class)", "var_name": "LOG"}, {"original_string": "public static final String SCHEMA_REGISTRY_DIR = \"TestDatabusRelayMain_schemas\";", "modifier": "public static final", "type": "String", "declarator": "SCHEMA_REGISTRY_DIR = \"TestDatabusRelayMain_schemas\"", "var_name": "SCHEMA_REGISTRY_DIR"}], "file": "databus2-relay/databus2-relay-impl/src/test/java/com/linkedin/databus2/relay/TestDatabusRelayMain.java"}, "test_case": {"identifier": "testClientNoEventsResetConnection", "parameters": "()", "modifiers": "@Test /** * test resetting connection when there is no events for some period of time * @throws InterruptedException * @throws InvalidConfigException */ public", "return": "void", "body": "@Test\n\t/**\n\t * test resetting connection when there is no events for some period of time\n\t * @throws InterruptedException\n\t * @throws InvalidConfigException\n\t */\n  public void testClientNoEventsResetConnection() throws InterruptedException, InvalidConfigException\n  {\n\t  LOG.setLevel(Level.ALL);\n    DatabusRelayTestUtil.RelayRunner r1=null;\n    ClientRunner cr = null;\n    try\n    {\n      String srcName = \"com.linkedin.events.example.Settings\";\n\n      // create main relay with random generator\n      int eventRatePerSec = 10;\n      PhysicalSourceConfig srcConfig = DatabusRelayTestUtil.createPhysicalConfigBuilder(\n            (short) 1, DatabusRelayTestUtil.getPhysicalSrcName(srcName), \"mock\",\n            500, eventRatePerSec, new String[] {srcName});\n\n      int relayPort = 11995;\n      DatabusRelayMain relay = DatabusRelayTestUtil.createDatabusRelayWithSchemaReg(1001, relayPort,\n          10 * 1024 * 1024, new PhysicalSourceConfig[] {srcConfig},SCHEMA_REGISTRY_DIR);\n      Assert.assertNotEquals(relay, null);\n      r1 = new DatabusRelayTestUtil.RelayRunner(relay);\n\n      // async starts\n      r1.start();\n      DbusEventsTotalStats stats = relay.getInboundEventStatisticsCollector().getTotalStats();\n\n      // start client in parallel\n      String srcSubscriptionString = srcName;\n      String serverName = \"localhost:\" + relayPort;\n      ResetsCountingConsumer countingConsumer = new ResetsCountingConsumer();\n      DatabusSourcesConnection clientConn = RelayEventProducer\n      .createDatabusSourcesConnection(\"testProducer\", serverName,\n    \t\t  srcSubscriptionString, countingConsumer,\n    \t\t  1 * 1024 * 1024, 50000, 30 * 1000, 100, 15 * 1000,\n    \t\t  1, true);\n\n      cr = new ClientRunner(clientConn);\n      cr.start();\n      TestUtil.sleep(1000); // generate some events\n\n      // pause event generator\n      // and wait untill all the events are consumed\n      // but since it is less then timeout the connection should NOT reset\n      LOG.info(\"Sending pause to relay!\");\n      r1.pause();\n      TestUtil.sleep(4000);\n\n      LOG.info(\"no events, time less then threshold. Events=\" + countingConsumer.getNumDataEvents() +\n    \t\t  \"; resets = \" + countingConsumer.getNumResets());\n      Assert.assertEquals(countingConsumer.getNumResets(), 0);\n\n      // generate more events, more time elapsed then the threshold, but since there are\n      // events - NO reset\n      r1.unpause();\n      Thread.sleep(8000);\n      LOG.info(\"some events, more time then timeout. Events=\" + countingConsumer.getNumDataEvents() +\n    \t\t  \"; resets = \" + countingConsumer.getNumResets());\n      Assert.assertEquals(countingConsumer.getNumResets(), 0);\n\n      r1.pause(); // stop events\n      //set threshold to 0 completely disabling the feature\n      clientConn.getRelayPullThread().setNoEventsConnectionResetTimeSec(0);\n      Thread.sleep(8000);\n      LOG.info(\"no events, more time then timeout, but feature disabled. Events=\" +\n    \t\t  countingConsumer.getNumDataEvents() + \"; resets = \" + countingConsumer.getNumResets());\n      Assert.assertEquals(countingConsumer.getNumResets(), 0);\n\n\n      // enable the feature, and sleep for timeout\n      clientConn.getRelayPullThread().setNoEventsConnectionResetTimeSec(5);\n      // now wait with no events\n      LOG.info(\"pause the producer. sleep for 6 sec, should reset\");\n      TestUtil.sleep(6000);\n\n      LOG.info(\"Client stats=\" + countingConsumer);\n      LOG.info(\"Num resets=\" + countingConsumer.getNumResets());\n      LOG.info(\"Event windows generated=\" + stats.getNumSysEvents());\n      Assert.assertEquals(countingConsumer.getNumResets(), 0, \"0 resets\");\n      Assert.assertEquals(countingConsumer.getNumDataEvents(), stats.getNumDataEvents());\n\n      boolean stopped = r1.shutdown(2000);\n      Assert.assertTrue(stopped);\n      LOG.info(\"Relay r1 stopped\");\n      cr.shutdown();\n      LOG.info(\"Client cr stopped\");\n      Assert.assertEquals(countingConsumer.getNumDataEvents(), stats\n    \t\t  .getNumDataEvents());\n    }\n    finally\n    {\n      cleanup ( new DatabusRelayTestUtil.RelayRunner[] {r1} , cr);\n    }\n\n  }", "signature": "void testClientNoEventsResetConnection()", "full_signature": "@Test /** * test resetting connection when there is no events for some period of time * @throws InterruptedException * @throws InvalidConfigException */ public void testClientNoEventsResetConnection()", "class_method_signature": "TestDatabusRelayMain.testClientNoEventsResetConnection()", "testcase": true, "constructor": false, "invocations": ["setLevel", "createPhysicalConfigBuilder", "getPhysicalSrcName", "createDatabusRelayWithSchemaReg", "assertNotEquals", "start", "getTotalStats", "getInboundEventStatisticsCollector", "createDatabusSourcesConnection", "start", "sleep", "info", "pause", "sleep", "info", "getNumDataEvents", "getNumResets", "assertEquals", "getNumResets", "unpause", "sleep", "info", "getNumDataEvents", "getNumResets", "assertEquals", "getNumResets", "pause", "setNoEventsConnectionResetTimeSec", "getRelayPullThread", "sleep", "info", "getNumDataEvents", "getNumResets", "assertEquals", "getNumResets", "setNoEventsConnectionResetTimeSec", "getRelayPullThread", "info", "sleep", "info", "info", "getNumResets", "info", "getNumSysEvents", "assertEquals", "getNumResets", "assertEquals", "getNumDataEvents", "getNumDataEvents", "shutdown", "assertTrue", "info", "shutdown", "info", "assertEquals", "getNumDataEvents", "getNumDataEvents", "cleanup"]}, "focal_class": {"identifier": "DatabusRelayMain", "superclass": "extends HttpRelay", "interfaces": "", "fields": [{"original_string": "public static final Logger LOG = Logger.getLogger(DatabusRelayMain.class\n\t\t\t.getName());", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(DatabusRelayMain.class\n\t\t\t.getName())", "var_name": "LOG"}, {"original_string": "public static final String DB_RELAY_CONFIG_FILE_OPT_NAME = \"db_relay_config\";", "modifier": "public static final", "type": "String", "declarator": "DB_RELAY_CONFIG_FILE_OPT_NAME = \"db_relay_config\"", "var_name": "DB_RELAY_CONFIG_FILE_OPT_NAME"}, {"original_string": "private final RelayEventProducersRegistry _producersRegistry = RelayEventProducersRegistry.getInstance();", "modifier": "private final", "type": "RelayEventProducersRegistry", "declarator": "_producersRegistry = RelayEventProducersRegistry.getInstance()", "var_name": "_producersRegistry"}, {"original_string": "MultiServerSequenceNumberHandler _maxScnReaderWriters;", "modifier": "", "type": "MultiServerSequenceNumberHandler", "declarator": "_maxScnReaderWriters", "var_name": "_maxScnReaderWriters"}, {"original_string": "protected Map<PhysicalPartition, EventProducer> _producers;", "modifier": "protected", "type": "Map<PhysicalPartition, EventProducer>", "declarator": "_producers", "var_name": "_producers"}, {"original_string": "Map<PhysicalPartition, MonitoringEventProducer> _monitoringProducers;", "modifier": "", "type": "Map<PhysicalPartition, MonitoringEventProducer>", "declarator": "_monitoringProducers", "var_name": "_monitoringProducers"}, {"original_string": "ControlSourceEventsRequestProcessor _csEventRequestProcessor;", "modifier": "", "type": "ControlSourceEventsRequestProcessor", "declarator": "_csEventRequestProcessor", "var_name": "_csEventRequestProcessor"}, {"original_string": "private boolean _dbPullerStart = false;", "modifier": "private", "type": "boolean", "declarator": "_dbPullerStart = false", "var_name": "_dbPullerStart"}], "methods": [{"identifier": "DatabusRelayMain", "parameters": "()", "modifiers": "public", "return": "", "signature": " DatabusRelayMain()", "full_signature": "public  DatabusRelayMain()", "class_method_signature": "DatabusRelayMain.DatabusRelayMain()", "testcase": false, "constructor": true}, {"identifier": "DatabusRelayMain", "parameters": "(HttpRelay.Config config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "modifiers": "public", "return": "", "signature": " DatabusRelayMain(HttpRelay.Config config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "full_signature": "public  DatabusRelayMain(HttpRelay.Config config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "class_method_signature": "DatabusRelayMain.DatabusRelayMain(HttpRelay.Config config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "testcase": false, "constructor": true}, {"identifier": "DatabusRelayMain", "parameters": "(HttpRelay.StaticConfig config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "modifiers": "public", "return": "", "signature": " DatabusRelayMain(HttpRelay.StaticConfig config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "full_signature": "public  DatabusRelayMain(HttpRelay.StaticConfig config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "class_method_signature": "DatabusRelayMain.DatabusRelayMain(HttpRelay.StaticConfig config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "testcase": false, "constructor": true}, {"identifier": "setDbPullerStart", "parameters": "(boolean s)", "modifiers": "public", "return": "void", "signature": "void setDbPullerStart(boolean s)", "full_signature": "public void setDbPullerStart(boolean s)", "class_method_signature": "DatabusRelayMain.setDbPullerStart(boolean s)", "testcase": false, "constructor": false}, {"identifier": "getDbPullerStart", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getDbPullerStart()", "full_signature": "public boolean getDbPullerStart()", "class_method_signature": "DatabusRelayMain.getDbPullerStart()", "testcase": false, "constructor": false}, {"identifier": "removeOneProducer", "parameters": "(PhysicalSourceStaticConfig pConfig)", "modifiers": "@Override public", "return": "void", "signature": "void removeOneProducer(PhysicalSourceStaticConfig pConfig)", "full_signature": "@Override public void removeOneProducer(PhysicalSourceStaticConfig pConfig)", "class_method_signature": "DatabusRelayMain.removeOneProducer(PhysicalSourceStaticConfig pConfig)", "testcase": false, "constructor": false}, {"identifier": "addOneProducer", "parameters": "(PhysicalSourceStaticConfig pConfig)", "modifiers": "@Override public", "return": "void", "signature": "void addOneProducer(PhysicalSourceStaticConfig pConfig)", "full_signature": "@Override public void addOneProducer(PhysicalSourceStaticConfig pConfig)", "class_method_signature": "DatabusRelayMain.addOneProducer(PhysicalSourceStaticConfig pConfig)", "testcase": false, "constructor": false}, {"identifier": "initProducers", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initProducers()", "full_signature": "public void initProducers()", "class_method_signature": "DatabusRelayMain.initProducers()", "testcase": false, "constructor": false}, {"identifier": "getMaxSCNReaderWriter", "parameters": "(PhysicalSourceStaticConfig pConfig)", "modifiers": "public", "return": "MaxSCNReaderWriter", "signature": "MaxSCNReaderWriter getMaxSCNReaderWriter(PhysicalSourceStaticConfig pConfig)", "full_signature": "public MaxSCNReaderWriter getMaxSCNReaderWriter(PhysicalSourceStaticConfig pConfig)", "class_method_signature": "DatabusRelayMain.getMaxSCNReaderWriter(PhysicalSourceStaticConfig pConfig)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "DatabusRelayMain.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "doStart", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doStart()", "full_signature": "@Override protected void doStart()", "class_method_signature": "DatabusRelayMain.doStart()", "testcase": false, "constructor": false}, {"identifier": "pause", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void pause()", "full_signature": "@Override public void pause()", "class_method_signature": "DatabusRelayMain.pause()", "testcase": false, "constructor": false}, {"identifier": "resume", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void resume()", "full_signature": "@Override public void resume()", "class_method_signature": "DatabusRelayMain.resume()", "testcase": false, "constructor": false}, {"identifier": "doShutdown", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doShutdown()", "full_signature": "@Override protected void doShutdown()", "class_method_signature": "DatabusRelayMain.doShutdown()", "testcase": false, "constructor": false}, {"identifier": "getProducers", "parameters": "()", "modifiers": "public", "return": "EventProducer[]", "signature": "EventProducer[] getProducers()", "full_signature": "public EventProducer[] getProducers()", "class_method_signature": "DatabusRelayMain.getProducers()", "testcase": false, "constructor": false}, {"identifier": "getMonitoringProducers", "parameters": "()", "modifiers": "public", "return": "MonitoringEventProducer[]", "signature": "MonitoringEventProducer[] getMonitoringProducers()", "full_signature": "public MonitoringEventProducer[] getMonitoringProducers()", "class_method_signature": "DatabusRelayMain.getMonitoringProducers()", "testcase": false, "constructor": false}, {"identifier": "awaitShutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void awaitShutdown()", "full_signature": "@Override public void awaitShutdown()", "class_method_signature": "DatabusRelayMain.awaitShutdown()", "testcase": false, "constructor": false}], "file": "databus2-relay/databus2-relay-impl/src/main/java/com/linkedin/databus2/relay/DatabusRelayMain.java"}, "focal_method": {"identifier": "pause", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void pause() {\n\t\tfor (Entry<PhysicalPartition, EventProducer> entry : _producers\n\t\t\t\t.entrySet()) {\n\t\t\tEventProducer producer = entry.getValue();\n\n\t\t\tif (null != producer) {\n\t\t\t\tif (producer.isRunning()) {\n\t\t\t\t\tproducer.pause();\n\t\t\t\t\tLOG.info(\"EventProducer :\" + producer.getName()\n\t\t\t\t\t\t\t+ \"  pause sent\");\n\t\t\t\t} else if (producer.isPaused()) {\n\t\t\t\t\tLOG.info(\"EventProducer :\" + producer.getName()\n\t\t\t\t\t\t\t+ \"  already paused\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "signature": "void pause()", "full_signature": "@Override public void pause()", "class_method_signature": "DatabusRelayMain.pause()", "testcase": false, "constructor": false, "invocations": ["entrySet", "getValue", "isRunning", "pause", "info", "getName", "isPaused", "info", "getName"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}