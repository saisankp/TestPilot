{"test_class": {"identifier": "AgentRuleUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "opentracing-specialagent-api/src/test/java/io/opentracing/contrib/specialagent/AgentRuleUtilTest.java"}, "test_case": {"identifier": "testSubArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSubArray() {\n    try {\n      AgentRuleUtil.subArray(null, 0);\n      fail(\"Expected NullPointerException\");\n    }\n    catch (final NullPointerException e) {\n    }\n\n    try {\n      AgentRuleUtil.subArray(new String[] {\"\"}, 0, -1);\n      fail(\"Expected IllegalArgumentException\");\n    }\n    catch (final IllegalArgumentException e) {\n    }\n\n    final Integer[] array = {0, 1, 2, 3, 4, 5, 6, 7, 8};\n    assertArrayEquals(new Integer[] {2, 3}, AgentRuleUtil.subArray(array, 2, 4));\n    assertArrayEquals(new Integer[] {6, 7, 8}, AgentRuleUtil.subArray(array, 6));\n  }", "signature": "void testSubArray()", "full_signature": "@Test public void testSubArray()", "class_method_signature": "AgentRuleUtilTest.testSubArray()", "testcase": true, "constructor": false, "invocations": ["subArray", "fail", "subArray", "fail", "assertArrayEquals", "subArray", "assertArrayEquals", "subArray"]}, "focal_class": {"identifier": "AgentRuleUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getNameId", "parameters": "(final Object obj)", "modifiers": "public static", "return": "String", "signature": "String getNameId(final Object obj)", "full_signature": "public static String getNameId(final Object obj)", "class_method_signature": "AgentRuleUtil.getNameId(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "getSimpleNameId", "parameters": "(final Object obj)", "modifiers": "public static", "return": "String", "signature": "String getSimpleNameId(final Object obj)", "full_signature": "public static String getSimpleNameId(final Object obj)", "class_method_signature": "AgentRuleUtil.getSimpleNameId(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "subArray", "parameters": "(final T[] array, final int beginIndex, final int endIndex)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T[]", "signature": "T[] subArray(final T[] array, final int beginIndex, final int endIndex)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T[] subArray(final T[] array, final int beginIndex, final int endIndex)", "class_method_signature": "AgentRuleUtil.subArray(final T[] array, final int beginIndex, final int endIndex)", "testcase": false, "constructor": false}, {"identifier": "subArray", "parameters": "(final T[] array, final int beginIndex)", "modifiers": "public static", "return": "T[]", "signature": "T[] subArray(final T[] array, final int beginIndex)", "full_signature": "public static T[] subArray(final T[] array, final int beginIndex)", "class_method_signature": "AgentRuleUtil.subArray(final T[] array, final int beginIndex)", "testcase": false, "constructor": false}, {"identifier": "getExecutionStack", "parameters": "()", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getExecutionStack()", "full_signature": "public static Class<?>[] getExecutionStack()", "class_method_signature": "AgentRuleUtil.getExecutionStack()", "testcase": false, "constructor": false}, {"identifier": "getCallStack", "parameters": "()", "modifiers": "public static", "return": "StackTraceElement[]", "signature": "StackTraceElement[] getCallStack()", "full_signature": "public static StackTraceElement[] getCallStack()", "class_method_signature": "AgentRuleUtil.getCallStack()", "testcase": false, "constructor": false}, {"identifier": "callerEquals", "parameters": "(int frameIndex, final String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean callerEquals(int frameIndex, final String name)", "full_signature": "public static boolean callerEquals(int frameIndex, final String name)", "class_method_signature": "AgentRuleUtil.callerEquals(int frameIndex, final String name)", "testcase": false, "constructor": false}, {"identifier": "callerEquals", "parameters": "(int startFrame, int endFrame, final String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean callerEquals(int startFrame, int endFrame, final String name)", "full_signature": "public static boolean callerEquals(int startFrame, int endFrame, final String name)", "class_method_signature": "AgentRuleUtil.callerEquals(int startFrame, int endFrame, final String name)", "testcase": false, "constructor": false}, {"identifier": "callerEquals", "parameters": "(int frameIndex, final String ... names)", "modifiers": "public static", "return": "boolean", "signature": "boolean callerEquals(int frameIndex, final String ... names)", "full_signature": "public static boolean callerEquals(int frameIndex, final String ... names)", "class_method_signature": "AgentRuleUtil.callerEquals(int frameIndex, final String ... names)", "testcase": false, "constructor": false}, {"identifier": "callerEquals", "parameters": "(int startFrame, int endFrame, final String ...  names)", "modifiers": "public static", "return": "boolean", "signature": "boolean callerEquals(int startFrame, int endFrame, final String ...  names)", "full_signature": "public static boolean callerEquals(int startFrame, int endFrame, final String ...  names)", "class_method_signature": "AgentRuleUtil.callerEquals(int startFrame, int endFrame, final String ...  names)", "testcase": false, "constructor": false}, {"identifier": "hasMethodNamed", "parameters": "(TypeDefinition typeDefinition, final String methodName)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasMethodNamed(TypeDefinition typeDefinition, final String methodName)", "full_signature": "public static boolean hasMethodNamed(TypeDefinition typeDefinition, final String methodName)", "class_method_signature": "AgentRuleUtil.hasMethodNamed(TypeDefinition typeDefinition, final String methodName)", "testcase": false, "constructor": false}, {"identifier": "getFieldInBootstrapClass", "parameters": "(final Class<?> cls, final String fieldName)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T getFieldInBootstrapClass(final Class<?> cls, final String fieldName)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T getFieldInBootstrapClass(final Class<?> cls, final String fieldName)", "class_method_signature": "AgentRuleUtil.getFieldInBootstrapClass(final Class<?> cls, final String fieldName)", "testcase": false, "constructor": false}, {"identifier": "isFromClassLoader", "parameters": "(final Class<?>[] callStack, final ClassLoader classLoader)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFromClassLoader(final Class<?>[] callStack, final ClassLoader classLoader)", "full_signature": "public static boolean isFromClassLoader(final Class<?>[] callStack, final ClassLoader classLoader)", "class_method_signature": "AgentRuleUtil.isFromClassLoader(final Class<?>[] callStack, final ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "classPathToURLs", "parameters": "(final String classpath)", "modifiers": "public static", "return": "URL[]", "signature": "URL[] classPathToURLs(final String classpath)", "full_signature": "public static URL[] classPathToURLs(final String classpath)", "class_method_signature": "AgentRuleUtil.classPathToURLs(final String classpath)", "testcase": false, "constructor": false}, {"identifier": "AgentRuleUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " AgentRuleUtil()", "full_signature": "private  AgentRuleUtil()", "class_method_signature": "AgentRuleUtil.AgentRuleUtil()", "testcase": false, "constructor": true}], "file": "opentracing-specialagent-api/src/main/java/io/opentracing/contrib/specialagent/AgentRuleUtil.java"}, "focal_method": {"identifier": "subArray", "parameters": "(final T[] array, final int beginIndex, final int endIndex)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T[]", "body": "@SuppressWarnings(\"unchecked\")\n  public static <T>T[] subArray(final T[] array, final int beginIndex, final int endIndex) {\n    if (endIndex < beginIndex)\n      throw new IllegalArgumentException(\"endIndex (\" + endIndex + \") < beginIndex (\" + beginIndex + \")\");\n\n    final Class<?> componentType = array.getClass().getComponentType();\n    final T[] subArray = (T[])Array.newInstance(componentType, endIndex - beginIndex);\n    if (beginIndex == endIndex)\n      return subArray;\n\n    System.arraycopy(array, beginIndex, subArray, 0, endIndex - beginIndex);\n    return subArray;\n  }", "signature": "T[] subArray(final T[] array, final int beginIndex, final int endIndex)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T[] subArray(final T[] array, final int beginIndex, final int endIndex)", "class_method_signature": "AgentRuleUtil.subArray(final T[] array, final int beginIndex, final int endIndex)", "testcase": false, "constructor": false, "invocations": ["getComponentType", "getClass", "newInstance", "arraycopy"]}, "repository": {"repo_id": 155277206, "url": "https://github.com/opentracing-contrib/java-specialagent", "stars": 88, "created": "10/29/2018 8:31:40 PM +00:00", "updates": "2020-01-27T16:00:44+00:00", "fork": "False", "license": "licensed"}}