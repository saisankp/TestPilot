{"test_class": {"identifier": "StateMachineTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/util/src/test/java/hera/server/StateMachineTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@Test\n  @SuppressWarnings(\"unchecked\")\n  public void testExecute() {\n    final String s1 = randomUUID().toString();\n    final String success = randomUUID().toString();\n    final String failure = randomUUID().toString();\n\n    final Callable<Void> callable1 = new Callable<Void>() {\n      @Override\n      public Void call() throws Exception {\n        logger.trace(\"Success\");\n        return null;\n      }\n    };\n    final Callable<Void> callable2 = new Callable<Void>() {\n      @Override\n      public Void call() throws Exception {\n        throw new IllegalArgumentException();\n      }\n    };\n    final StateChangeListener<String> listener = mock(StateChangeListener.class);\n    final StateMachine<String> stateMachine = new StateMachine<String>(s1);\n    stateMachine.addListener(listener);\n    stateMachine.execute(callable1, success, failure);\n    assertEquals(success, stateMachine.getState());\n    stateMachine.execute(callable2, success, failure);\n    assertEquals(failure, stateMachine.getState());\n    stateMachine.removeListener(listener);\n  }", "signature": "void testExecute()", "full_signature": "@Test @SuppressWarnings(\"unchecked\") public void testExecute()", "class_method_signature": "StateMachineTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "toString", "randomUUID", "toString", "randomUUID", "trace", "mock", "addListener", "execute", "assertEquals", "getState", "execute", "assertEquals", "getState", "removeListener"]}, "focal_class": {"identifier": "StateMachine", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final Logger logger = getLogger(getClass());", "modifier": "protected final", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "protected ReentrantReadWriteLock lock = new ReentrantReadWriteLock();", "modifier": "protected", "type": "ReentrantReadWriteLock", "declarator": "lock = new ReentrantReadWriteLock()", "var_name": "lock"}, {"original_string": "protected Collection<StateChangeListener<StateT>> listeners =\n      new LinkedHashSet<StateChangeListener<StateT>>();", "modifier": "protected", "type": "Collection<StateChangeListener<StateT>>", "declarator": "listeners =\n      new LinkedHashSet<StateChangeListener<StateT>>()", "var_name": "listeners"}, {"original_string": "protected StateT state;", "modifier": "protected", "type": "StateT", "declarator": "state", "var_name": "state"}, {"original_string": "protected Object[] args;", "modifier": "protected", "type": "Object[]", "declarator": "args", "var_name": "args"}], "methods": [{"identifier": "StateMachine", "parameters": "(final StateT initialState)", "modifiers": "public", "return": "", "signature": " StateMachine(final StateT initialState)", "full_signature": "public  StateMachine(final StateT initialState)", "class_method_signature": "StateMachine.StateMachine(final StateT initialState)", "testcase": false, "constructor": true}, {"identifier": "getLock", "parameters": "()", "modifiers": "public", "return": "ReadWriteLock", "signature": "ReadWriteLock getLock()", "full_signature": "public ReadWriteLock getLock()", "class_method_signature": "StateMachine.getLock()", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(final StateChangeListener<StateT> listener)", "modifiers": "public", "return": "void", "signature": "void addListener(final StateChangeListener<StateT> listener)", "full_signature": "public void addListener(final StateChangeListener<StateT> listener)", "class_method_signature": "StateMachine.addListener(final StateChangeListener<StateT> listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(final StateChangeListener<StateT> listener)", "modifiers": "public", "return": "void", "signature": "void removeListener(final StateChangeListener<StateT> listener)", "full_signature": "public void removeListener(final StateChangeListener<StateT> listener)", "class_method_signature": "StateMachine.removeListener(final StateChangeListener<StateT> listener)", "testcase": false, "constructor": false}, {"identifier": "isState", "parameters": "(final StateT... states)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "boolean", "signature": "boolean isState(final StateT... states)", "full_signature": "@SuppressWarnings(\"unchecked\") public boolean isState(final StateT... states)", "class_method_signature": "StateMachine.isState(final StateT... states)", "testcase": false, "constructor": false}, {"identifier": "waitState", "parameters": "(final StateT... states)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void waitState(final StateT... states)", "full_signature": "@SuppressWarnings(\"unchecked\") public void waitState(final StateT... states)", "class_method_signature": "StateMachine.waitState(final StateT... states)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "public", "return": "StateT", "signature": "StateT getState()", "full_signature": "public StateT getState()", "class_method_signature": "StateMachine.getState()", "testcase": false, "constructor": false}, {"identifier": "getArguments", "parameters": "()", "modifiers": "public", "return": "Object[]", "signature": "Object[] getArguments()", "full_signature": "public Object[] getArguments()", "class_method_signature": "StateMachine.getArguments()", "testcase": false, "constructor": false}, {"identifier": "changeState", "parameters": "(final StateT state, final Object... args)", "modifiers": "public", "return": "void", "signature": "void changeState(final StateT state, final Object... args)", "full_signature": "public void changeState(final StateT state, final Object... args)", "class_method_signature": "StateMachine.changeState(final StateT state, final Object... args)", "testcase": false, "constructor": false}, {"identifier": "changeState", "parameters": "(final StateT state, final StateCondition<StateT> condition,\n      final Object... args)", "modifiers": "public", "return": "boolean", "signature": "boolean changeState(final StateT state, final StateCondition<StateT> condition,\n      final Object... args)", "full_signature": "public boolean changeState(final StateT state, final StateCondition<StateT> condition,\n      final Object... args)", "class_method_signature": "StateMachine.changeState(final StateT state, final StateCondition<StateT> condition,\n      final Object... args)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final Callable<Void> process, final StateT success, final StateT fail)", "modifiers": "public", "return": "void", "signature": "void execute(final Callable<Void> process, final StateT success, final StateT fail)", "full_signature": "public void execute(final Callable<Void> process, final StateT success, final StateT fail)", "class_method_signature": "StateMachine.execute(final Callable<Void> process, final StateT success, final StateT fail)", "testcase": false, "constructor": false}, {"identifier": "fireChangeEvent", "parameters": "(final StateT from, final StateT to, final Object... args)", "modifiers": "protected", "return": "void", "signature": "void fireChangeEvent(final StateT from, final StateT to, final Object... args)", "full_signature": "protected void fireChangeEvent(final StateT from, final StateT to, final Object... args)", "class_method_signature": "StateMachine.fireChangeEvent(final StateT from, final StateT to, final Object... args)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StateMachine.toString()", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/hera/server/StateMachine.java"}, "focal_method": {"identifier": "execute", "parameters": "(final Callable<Void> process, final StateT success, final StateT fail)", "modifiers": "public", "return": "void", "body": "public void execute(final Callable<Void> process, final StateT success, final StateT fail) {\n    lock.writeLock().lock();\n    try {\n      process.call();\n      logger.trace(\"Success to execute {}\", process);\n      if (null != success) {\n        changeState(success);\n      }\n    } catch (Throwable th) {\n      if (null != fail) {\n        logger.trace(\"Fail to execute {}\", process);\n        changeState(fail);\n      }\n    } finally {\n      lock.writeLock().unlock();\n    }\n  }", "signature": "void execute(final Callable<Void> process, final StateT success, final StateT fail)", "full_signature": "public void execute(final Callable<Void> process, final StateT success, final StateT fail)", "class_method_signature": "StateMachine.execute(final Callable<Void> process, final StateT success, final StateT fail)", "testcase": false, "constructor": false, "invocations": ["lock", "writeLock", "call", "trace", "changeState", "trace", "changeState", "unlock", "writeLock"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}