{"test_class": {"identifier": "LengthOverBreadthDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/LengthOverBreadthDescriptorTest.java"}, "test_case": {"identifier": "testLOBDescriptorCyclohexane", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLOBDescriptorCyclohexane() throws Exception {\n        String filename = \"data/mdl/lobtest.sdf\";\n        InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename);\n        ISimpleChemObjectReader reader = new MDLV2000Reader(ins);\n        ChemFile content = (ChemFile) reader.read(new ChemFile());\n        List cList = ChemFileManipulator.getAllAtomContainers(content);\n        IAtomContainer ac = (IAtomContainer) cList.get(1);\n        Isotopes.getInstance().configureAtoms(ac);\n\n        DoubleArrayResult result = (DoubleArrayResult) descriptor.calculate(ac).getValue();\n\n        Assert.assertEquals(1.1476784, result.get(0), 0.01);\n        Assert.assertEquals(1.0936984, result.get(1), 0.01);\n    }", "signature": "void testLOBDescriptorCyclohexane()", "full_signature": "@Test public void testLOBDescriptorCyclohexane()", "class_method_signature": "LengthOverBreadthDescriptorTest.testLOBDescriptorCyclohexane()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "read", "getAllAtomContainers", "get", "configureAtoms", "getInstance", "getValue", "calculate", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "LengthOverBreadthDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static ILoggingTool   logger = LoggingToolFactory.createLoggingTool(LengthOverBreadthDescriptor.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(LengthOverBreadthDescriptor.class)", "var_name": "logger"}, {"original_string": "private static final String[] NAMES  = {\"LOBMAX\", \"LOBMIN\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES  = {\"LOBMAX\", \"LOBMIN\"}", "var_name": "NAMES"}], "methods": [{"identifier": "LengthOverBreadthDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " LengthOverBreadthDescriptor()", "full_signature": "public  LengthOverBreadthDescriptor()", "class_method_signature": "LengthOverBreadthDescriptor.LengthOverBreadthDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "LengthOverBreadthDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "LengthOverBreadthDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "LengthOverBreadthDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "LengthOverBreadthDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "LengthOverBreadthDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "LengthOverBreadthDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "LengthOverBreadthDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "rotateZ", "parameters": "(double[][] coords, double theta)", "modifiers": "private", "return": "void", "signature": "void rotateZ(double[][] coords, double theta)", "full_signature": "private void rotateZ(double[][] coords, double theta)", "class_method_signature": "LengthOverBreadthDescriptor.rotateZ(double[][] coords, double theta)", "testcase": false, "constructor": false}, {"identifier": "extents", "parameters": "(IAtomContainer atomContainer, double[][] coords, boolean withRadii)", "modifiers": "private", "return": "double[]", "signature": "double[] extents(IAtomContainer atomContainer, double[][] coords, boolean withRadii)", "full_signature": "private double[] extents(IAtomContainer atomContainer, double[][] coords, boolean withRadii)", "class_method_signature": "LengthOverBreadthDescriptor.extents(IAtomContainer atomContainer, double[][] coords, boolean withRadii)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "LengthOverBreadthDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "LengthOverBreadthDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/LengthOverBreadthDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer atomContainer) {\n        if (!GeometryUtil.has3DCoordinates(atomContainer))\n            return getDummyDescriptorValue(new CDKException(\"Molecule must have 3D coordinates\"));\n\n        double angle = 10.0;\n        double maxLOB = 0;\n        double minArea = 1e6;\n        double mmLOB = 0;\n\n        double lob, bol, area;\n        double[] xyzRanges;\n\n        double[][] coords = new double[atomContainer.getAtomCount()][3];\n        for (int i = 0; i < atomContainer.getAtomCount(); i++) {\n            coords[i][0] = atomContainer.getAtom(i).getPoint3d().x;\n            coords[i][1] = atomContainer.getAtom(i).getPoint3d().y;\n            coords[i][2] = atomContainer.getAtom(i).getPoint3d().z;\n        }\n\n        // get the com\n        Point3d com = GeometryUtil.get3DCentreOfMass(atomContainer);\n        if (com == null) \n            return getDummyDescriptorValue(new CDKException(\"Error in center of mass calculation, has exact mass been set on all atoms?\"));\n\n        // translate everything to COM\n        for (int i = 0; i < coords.length; i++) {\n            coords[i][0] -= com.x;\n            coords[i][1] -= com.y;\n            coords[i][2] -= com.z;\n        }\n\n        int nangle = (int) (90 / angle);\n        for (int i = 0; i < nangle; i++) {\n            rotateZ(coords, Math.PI / 180.0 * angle);\n            try {\n                xyzRanges = extents(atomContainer, coords, true);\n            } catch (CDKException e) {\n                return getDummyDescriptorValue(e);\n            }\n            lob = xyzRanges[0] / xyzRanges[1];\n            bol = 1.0 / lob;\n            if (lob < bol) {\n                double tmp = lob;\n                lob = bol;\n                bol = tmp;\n            }\n            area = xyzRanges[0] * xyzRanges[1];\n            if (lob > maxLOB) maxLOB = lob;\n            if (area < minArea) {\n                minArea = area;\n                mmLOB = lob;\n            }\n        }\n\n        DoubleArrayResult result = new DoubleArrayResult(2);\n        result.add(maxLOB);\n        result.add(mmLOB);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), result,\n                getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "LengthOverBreadthDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["has3DCoordinates", "getDummyDescriptorValue", "getAtomCount", "getAtomCount", "getPoint3d", "getAtom", "getPoint3d", "getAtom", "getPoint3d", "getAtom", "get3DCentreOfMass", "getDummyDescriptorValue", "rotateZ", "extents", "getDummyDescriptorValue", "add", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}