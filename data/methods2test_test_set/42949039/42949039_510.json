{"test_class": {"identifier": "AttributeDaoHelperTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private AttributeDaoHelper attributeDaoHelper;", "modifier": "@InjectMocks\n    private", "type": "AttributeDaoHelper", "declarator": "attributeDaoHelper", "var_name": "attributeDaoHelper"}, {"original_string": "@Mock\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Mock\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/AttributeDaoHelperTest.java"}, "test_case": {"identifier": "testValidateAttributesAgainstBusinessObjectDataAttributeDefinitionsRequiredAttributeIsMissing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateAttributesAgainstBusinessObjectDataAttributeDefinitionsRequiredAttributeIsMissing()\n    {\n        // Create a business object data attribute definition for a required attribute.\n        BusinessObjectDataAttributeDefinitionEntity businessObjectDataAttributeDefinitionEntity = new BusinessObjectDataAttributeDefinitionEntity();\n        businessObjectDataAttributeDefinitionEntity.setName(ATTRIBUTE_NAME);\n\n        // Try to call the method under test.\n        try\n        {\n            attributeDaoHelper\n                .validateAttributesAgainstBusinessObjectDataAttributeDefinitions(NO_ATTRIBUTES, Arrays.asList(businessObjectDataAttributeDefinitionEntity));\n            fail();\n        }\n        catch (IllegalArgumentException e)\n        {\n            assertEquals(String\n                .format(\"The business object format has a required attribute \\\"%s\\\" which was not specified or has a value which is blank.\", ATTRIBUTE_NAME),\n                e.getMessage());\n        }\n\n        // Verify the external calls.\n        verifyNoMoreInteractionsHelper();\n    }", "signature": "void testValidateAttributesAgainstBusinessObjectDataAttributeDefinitionsRequiredAttributeIsMissing()", "full_signature": "@Test public void testValidateAttributesAgainstBusinessObjectDataAttributeDefinitionsRequiredAttributeIsMissing()", "class_method_signature": "AttributeDaoHelperTest.testValidateAttributesAgainstBusinessObjectDataAttributeDefinitionsRequiredAttributeIsMissing()", "testcase": true, "constructor": false, "invocations": ["setName", "validateAttributesAgainstBusinessObjectDataAttributeDefinitions", "asList", "fail", "assertEquals", "format", "getMessage", "verifyNoMoreInteractionsHelper"]}, "focal_class": {"identifier": "AttributeDaoHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}], "methods": [{"identifier": "updateBusinessObjectDataAttributes", "parameters": "(BusinessObjectDataEntity businessObjectDataEntity, final List<Attribute> attributes)", "modifiers": "public", "return": "void", "signature": "void updateBusinessObjectDataAttributes(BusinessObjectDataEntity businessObjectDataEntity, final List<Attribute> attributes)", "full_signature": "public void updateBusinessObjectDataAttributes(BusinessObjectDataEntity businessObjectDataEntity, final List<Attribute> attributes)", "class_method_signature": "AttributeDaoHelper.updateBusinessObjectDataAttributes(BusinessObjectDataEntity businessObjectDataEntity, final List<Attribute> attributes)", "testcase": false, "constructor": false}, {"identifier": "validateAttributesAgainstBusinessObjectDataAttributeDefinitions", "parameters": "(final List<Attribute> attributes,\n        final Collection<BusinessObjectDataAttributeDefinitionEntity> businessObjectDataAttributeDefinitionEntities)", "modifiers": "public", "return": "void", "signature": "void validateAttributesAgainstBusinessObjectDataAttributeDefinitions(final List<Attribute> attributes,\n        final Collection<BusinessObjectDataAttributeDefinitionEntity> businessObjectDataAttributeDefinitionEntities)", "full_signature": "public void validateAttributesAgainstBusinessObjectDataAttributeDefinitions(final List<Attribute> attributes,\n        final Collection<BusinessObjectDataAttributeDefinitionEntity> businessObjectDataAttributeDefinitionEntities)", "class_method_signature": "AttributeDaoHelper.validateAttributesAgainstBusinessObjectDataAttributeDefinitions(final List<Attribute> attributes,\n        final Collection<BusinessObjectDataAttributeDefinitionEntity> businessObjectDataAttributeDefinitionEntities)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/AttributeDaoHelper.java"}, "focal_method": {"identifier": "validateAttributesAgainstBusinessObjectDataAttributeDefinitions", "parameters": "(final List<Attribute> attributes,\n        final Collection<BusinessObjectDataAttributeDefinitionEntity> businessObjectDataAttributeDefinitionEntities)", "modifiers": "public", "return": "void", "body": "public void validateAttributesAgainstBusinessObjectDataAttributeDefinitions(final List<Attribute> attributes,\n        final Collection<BusinessObjectDataAttributeDefinitionEntity> businessObjectDataAttributeDefinitionEntities)\n    {\n        // Build a map of the specified attributes in the request where the key is lower case for case insensitive checks.\n        Map<String, String> attributeMap = new HashMap<>();\n        if (!CollectionUtils.isEmpty(attributes))\n        {\n            for (Attribute attribute : attributes)\n            {\n                attributeMap.put(attribute.getName().toLowerCase(), attribute.getValue());\n            }\n        }\n\n        // Loop through each attribute definition (i.e. the required attributes) and verify that each attribute\n        // definition was specified in the list of attributes and that the specified value has non-blank data.\n        for (BusinessObjectDataAttributeDefinitionEntity attributeDefinitionEntity : businessObjectDataAttributeDefinitionEntities)\n        {\n            String attributeDefinitionName = attributeDefinitionEntity.getName().toLowerCase();\n            if (!attributeMap.containsKey(attributeDefinitionName) || StringUtils.isBlank(attributeMap.get(attributeDefinitionName)))\n            {\n                throw new IllegalArgumentException(String\n                    .format(\"The business object format has a required attribute \\\"%s\\\" which was not specified or has a value which is blank.\",\n                        attributeDefinitionEntity.getName()));\n            }\n        }\n    }", "signature": "void validateAttributesAgainstBusinessObjectDataAttributeDefinitions(final List<Attribute> attributes,\n        final Collection<BusinessObjectDataAttributeDefinitionEntity> businessObjectDataAttributeDefinitionEntities)", "full_signature": "public void validateAttributesAgainstBusinessObjectDataAttributeDefinitions(final List<Attribute> attributes,\n        final Collection<BusinessObjectDataAttributeDefinitionEntity> businessObjectDataAttributeDefinitionEntities)", "class_method_signature": "AttributeDaoHelper.validateAttributesAgainstBusinessObjectDataAttributeDefinitions(final List<Attribute> attributes,\n        final Collection<BusinessObjectDataAttributeDefinitionEntity> businessObjectDataAttributeDefinitionEntities)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "put", "toLowerCase", "getName", "getValue", "toLowerCase", "getName", "containsKey", "isBlank", "get", "format", "getName"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}