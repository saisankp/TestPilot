{"test_class": {"identifier": "FreemarkerUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "tiles-request-freemarker/src/test/java/org/apache/tiles/request/freemarker/autotag/FreemarkerUtilTest.java"}, "test_case": {"identifier": "testGetAsObjectException", "parameters": "()", "modifiers": "@Test(expected = FreemarkerAutotagException.class) public", "return": "void", "body": "@Test(expected = FreemarkerAutotagException.class)\n    public void testGetAsObjectException() throws TemplateModelException {\n        TemplateNumberModel model = createMock(TemplateNumberModel.class);\n        Template template = createMock(Template.class);\n        TemplateHashModel rootDataModel = createMock(TemplateHashModel.class);\n        Writer out = createMock(Writer.class);\n\n        expect(model.getAsNumber()).andThrow(new TemplateModelException());\n        expect(template.getMacros()).andReturn(new HashMap<String, Macro>());\n\n        replay(template, rootDataModel, out);\n        new Environment(template, rootDataModel, out);\n\n        replay(model);\n        try {\n            assertEquals(new Integer(42), FreemarkerUtil.getAsObject(model, Integer.class, new Integer(1)));\n        } finally {\n            verify(template, rootDataModel, out, model);\n        }\n    }", "signature": "void testGetAsObjectException()", "full_signature": "@Test(expected = FreemarkerAutotagException.class) public void testGetAsObjectException()", "class_method_signature": "FreemarkerUtilTest.testGetAsObjectException()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "createMock", "andThrow", "expect", "getAsNumber", "andReturn", "expect", "getMacros", "replay", "replay", "assertEquals", "getAsObject", "verify"]}, "focal_class": {"identifier": "FreemarkerUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "FreemarkerUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " FreemarkerUtil()", "full_signature": "private  FreemarkerUtil()", "class_method_signature": "FreemarkerUtil.FreemarkerUtil()", "testcase": false, "constructor": true}, {"identifier": "getAsObject", "parameters": "(TemplateModel model, Class<T> type, T defaultValue)", "modifiers": "public static", "return": "T", "signature": "T getAsObject(TemplateModel model, Class<T> type, T defaultValue)", "full_signature": "public static T getAsObject(TemplateModel model, Class<T> type, T defaultValue)", "class_method_signature": "FreemarkerUtil.getAsObject(TemplateModel model, Class<T> type, T defaultValue)", "testcase": false, "constructor": false}], "file": "tiles-request-freemarker/src/main/java/org/apache/tiles/request/freemarker/autotag/FreemarkerUtil.java"}, "focal_method": {"identifier": "getAsObject", "parameters": "(TemplateModel model, Class<T> type, T defaultValue)", "modifiers": "public static", "return": "T", "body": "public static <T> T getAsObject(TemplateModel model, Class<T> type, T defaultValue) {\n        try {\n            T retValue = defaultValue;\n            if (model != null) {\n                @SuppressWarnings(\"unchecked\")\n                T value = (T) DeepUnwrap.unwrap(model);\n                if (value != null) {\n                    retValue = value;\n                }\n            }\n            return retValue;\n        } catch (TemplateModelException e) {\n            throw new FreemarkerAutotagException(\"Cannot unwrap a model\", e);\n        }\n    }", "signature": "T getAsObject(TemplateModel model, Class<T> type, T defaultValue)", "full_signature": "public static T getAsObject(TemplateModel model, Class<T> type, T defaultValue)", "class_method_signature": "FreemarkerUtil.getAsObject(TemplateModel model, Class<T> type, T defaultValue)", "testcase": false, "constructor": false, "invocations": ["unwrap"]}, "repository": {"repo_id": 4269155, "url": "https://github.com/apache/tiles-request", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 865, "license": "licensed"}}