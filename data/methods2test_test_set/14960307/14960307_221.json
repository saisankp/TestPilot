{"test_class": {"identifier": "BeanUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(BeanUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(BeanUtilTest.class)", "var_name": "logger"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/BeanUtilTest.java"}, "test_case": {"identifier": "getBeanProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getBeanProperty() throws Exception {\n        InternetPerson person = new InternetPerson();\n        \n        // assert default properties\n        Assert.assertNull(person.getFirstName());\n        Assert.assertNull(person.getLastName());\n        Assert.assertEquals(-1, person.getId());\n        // use utility class to get the \"bean\" property\n        BeanProperty beanProperty = BeanUtil.findBeanProperty(InternetPerson.class, \"firstName\", true);\n        Assert.assertEquals(Person.class.getDeclaredField(\"firstName\"), beanProperty.getField());\n        //Assert.assertEquals(Person.class.getDeclaredMethod(\"getFirstName\"), beanProperty.getGetMethod());\n        //Assert.assertEquals(Person.class.getDeclaredMethod(\"setFirstName\", String.class), beanProperty.getSetMethod());\n        Assert.assertEquals(String.class, beanProperty.getType());\n        Assert.assertEquals(\"firstName\", beanProperty.getName());\n        // use getter/setter (should use underlying getter and setter methods)\n        beanProperty.set(person, \"Joe\");\n        Assert.assertEquals(\"Joe\", beanProperty.get(person));\n        Assert.assertEquals(\"Joe\", person.getFirstName());\n\n        // now let's test the usage of underlying field for all access\n        BeanProperty beanProperty2 = BeanUtil.findBeanProperty(InternetPerson.class, \"extraInfo\", true);\n        Assert.assertEquals(null, beanProperty2.get(person));\n        beanProperty2.set(person, \"MoreInfoHere\");\n        Assert.assertEquals(\"MoreInfoHere\", beanProperty2.get(person));\n\n        // test properties that throw exceptions\n        ServerConfig config = new ServerConfig();\n        BeanProperty beanProperty3 = BeanUtil.findBeanProperty(config.getClass(), \"port\", true);\n        \n        // this an int property, let's try a string\n        try {\n            beanProperty3.set(config, \"80\");\n            Assert.fail(\"String arg should have thrown exception\");\n        } catch (IllegalArgumentException e) {\n            // this is expected behavior\n        }\n\n        try {\n            beanProperty3.set(config, -80);\n            Assert.fail(\"negative port arg should have thrown exception\");\n        } catch (InvocationTargetException e) {\n            Assert.assertEquals(ServerConfigException.class, e.getCause().getClass());\n        }\n\n        // the \"set\" method for port throws an exception if <= 0\n        beanProperty3.set(config, 80);\n        Assert.assertEquals(80, beanProperty3.get(config));\n    }", "signature": "void getBeanProperty()", "full_signature": "@Test public void getBeanProperty()", "class_method_signature": "BeanUtilTest.getBeanProperty()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getFirstName", "assertNull", "getLastName", "assertEquals", "getId", "findBeanProperty", "assertEquals", "getDeclaredField", "getField", "assertEquals", "getType", "assertEquals", "getName", "set", "assertEquals", "get", "assertEquals", "getFirstName", "findBeanProperty", "assertEquals", "get", "set", "assertEquals", "get", "findBeanProperty", "getClass", "set", "fail", "set", "fail", "assertEquals", "getClass", "getCause", "set", "assertEquals", "get"]}, "focal_class": {"identifier": "BeanUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(BeanUtil.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(BeanUtil.class)", "var_name": "logger"}], "methods": [{"identifier": "findBeanProperty", "parameters": "(Class type, String propertyName, boolean caseSensitive)", "modifiers": "public static", "return": "BeanProperty", "signature": "BeanProperty findBeanProperty(Class type, String propertyName, boolean caseSensitive)", "full_signature": "public static BeanProperty findBeanProperty(Class type, String propertyName, boolean caseSensitive)", "class_method_signature": "BeanUtil.findBeanProperty(Class type, String propertyName, boolean caseSensitive)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/BeanUtil.java"}, "focal_method": {"identifier": "findBeanProperty", "parameters": "(Class type, String propertyName, boolean caseSensitive)", "modifiers": "public static", "return": "BeanProperty", "body": "public static BeanProperty findBeanProperty(Class type, String propertyName, boolean caseSensitive) throws IllegalAccessException {\n        // bean property we'd return if found\n        BeanProperty beanProperty = null;\n\n        // class we'll start our search from\n        Class classType = type;\n\n        //\n        // search for field first - loop thru all classes\n        //\n        while (classType != null && !classType.equals(Object.class)) {\n            // search all declared fields\n            for (Field f : classType.getDeclaredFields()) {\n                // grab this field's name\n                String fieldName = f.getName();\n                // check if its the property we're searching for\n                if ((!caseSensitive && fieldName.equalsIgnoreCase(propertyName)) || (caseSensitive && fieldName.equals(propertyName))) {\n                    // success, we found the method we're looking for\n                    Class fieldType = f.getType();\n                    // make sure its accessible\n                    f.setAccessible(true);\n                    // create the BeanProperty we're going to use\n                    beanProperty = new BeanProperty(propertyName, fieldType, f);\n                    // done with this loop, break out of it\n                    break;\n                }\n            }\n            // move onto the superclass\n            classType = classType.getSuperclass();\n        }\n\n        String capitalizedName = StringUtil.capitalize(propertyName);\n        String getMethodName = \"get\" + capitalizedName;\n        String setMethodName = \"set\" + capitalizedName;\n        String addMethodName = \"add\" + capitalizedName;\n\n        \n        // if we get here and the beanProperty does not exist, then we need\n        // to search thru the hierarchy of classes for a setter or getter\n        // method that matches the name\n        if (beanProperty == null) {\n            // class we'll start our search from\n            classType = type;\n            while (classType != null && !classType.equals(Object.class)) {\n                // search all declared fields\n                for (Method m : classType.getDeclaredMethods()) {\n                    // grab this methods's name\n                    String methodName = m.getName();\n                    // is this a getter we've been looking for?\n                    if ((!caseSensitive && methodName.equalsIgnoreCase(getMethodName)) || (caseSensitive && methodName.equals(getMethodName))) {\n                        // check to make sure this accepts no arguments\n                        if (m.getParameterTypes().length == 0) {\n                            // success, we found the getter method\n                            beanProperty = new BeanProperty(propertyName, m.getReturnType(), null);\n                            m.setAccessible(true);\n                            beanProperty.getMethod = m;\n                            break;\n                        }\n                    // is this a setter we've been looking for?\n                    } else if ((!caseSensitive && methodName.equalsIgnoreCase(setMethodName)) || (caseSensitive && methodName.equals(setMethodName))) {\n                        // check to make sure this accepts 1 argument\n                        if (m.getParameterTypes().length == 1) {\n                            // success, we found the setter method\n                            beanProperty = new BeanProperty(propertyName, m.getParameterTypes()[0], null);\n                            m.setAccessible(true);\n                            beanProperty.setMethod = m;\n                            break;\n                        }\n                    // is this a adder we've been looking for?\n                    } else if ((!caseSensitive && methodName.equalsIgnoreCase(addMethodName)) || (caseSensitive && methodName.equals(addMethodName))) {\n                        // check to make sure this accepts 1 argument\n                        if (m.getParameterTypes().length == 1) {\n                            // success, we found the adder method\n                            beanProperty = new BeanProperty(propertyName, m.getParameterTypes()[0], null);\n                            m.setAccessible(true);\n                            beanProperty.addMethod = m;\n                            break;\n                        }\n                    }\n                }\n                // move onto the superclass\n                classType = classType.getSuperclass();\n            }\n        }\n\n        // if we get here and beanProperty exists, then we need to search for\n        // whether its getter/setter methods also exist\n        if (beanProperty != null) {\n            if (beanProperty.getMethod == null) {\n                try {\n                    // look for a \"getter\" method\n                    Method getMethod = ClassUtil.getMethod(type, getMethodName, beanProperty.getType(), null, caseSensitive);\n                    // set to accessible?\n                    getMethod.setAccessible(true);\n                    beanProperty.getMethod = getMethod;\n                } catch (NoSuchMethodException e) {\n                    // its okay if this happens, ignore\n                }\n            }\n\n            if (beanProperty.setMethod == null) {\n                try {\n                    // look for a \"setter\" method\n                    Method setMethod = ClassUtil.getMethod(type, setMethodName, null, beanProperty.getType(), caseSensitive);\n                    // set to accessible?\n                    setMethod.setAccessible(true);\n                    beanProperty.setMethod = setMethod;\n                } catch (NoSuchMethodException e) {\n                    // its okay if this happens, ignore\n                }\n            }\n\n            if (beanProperty.addMethod == null) {\n                try {\n                    // look for a \"adder\" method\n                    Method addMethod = ClassUtil.getMethod(type, addMethodName, null, beanProperty.getType(), caseSensitive);\n                    // set to accessible?\n                    addMethod.setAccessible(true);\n                    beanProperty.addMethod = addMethod;\n                } catch (NoSuchMethodException e) {\n                    // its okay if this happens, ignore\n                }\n            }\n        }\n\n        return beanProperty;\n    }", "signature": "BeanProperty findBeanProperty(Class type, String propertyName, boolean caseSensitive)", "full_signature": "public static BeanProperty findBeanProperty(Class type, String propertyName, boolean caseSensitive)", "class_method_signature": "BeanUtil.findBeanProperty(Class type, String propertyName, boolean caseSensitive)", "testcase": false, "constructor": false, "invocations": ["equals", "getDeclaredFields", "getName", "equalsIgnoreCase", "equals", "getType", "setAccessible", "getSuperclass", "capitalize", "equals", "getDeclaredMethods", "getName", "equalsIgnoreCase", "equals", "getParameterTypes", "getReturnType", "setAccessible", "equalsIgnoreCase", "equals", "getParameterTypes", "getParameterTypes", "setAccessible", "equalsIgnoreCase", "equals", "getParameterTypes", "getParameterTypes", "setAccessible", "getSuperclass", "getMethod", "getType", "setAccessible", "getMethod", "getType", "setAccessible", "getMethod", "getType", "setAccessible"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}