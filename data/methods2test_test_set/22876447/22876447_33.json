{"test_class": {"identifier": "XmlExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private XmlExtractor xmlExtractor;", "modifier": "private", "type": "XmlExtractor", "declarator": "xmlExtractor", "var_name": "xmlExtractor"}, {"original_string": "private InputStream inputStreamMock;", "modifier": "private", "type": "InputStream", "declarator": "inputStreamMock", "var_name": "inputStreamMock"}, {"original_string": "private XPathExpression xPathExpressionMock;", "modifier": "private", "type": "XPathExpression", "declarator": "xPathExpressionMock", "var_name": "xPathExpressionMock"}], "file": "link-move/src/test/java/com/nhl/link/move/runtime/xml/XmlExtractorTest.java"}, "test_case": {"identifier": "testGetReader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetReader() throws Exception {\n\t\tRowReader reader = xmlExtractor.getReader(new HashMap<>());\n\t\tverify(xPathExpressionMock).evaluate(argThat(new ArgumentMatcher<InputSource>() {\n\t\t\t@Override\n\t\t\tpublic boolean matches(Object argument) {\n\t\t\t\treturn ((InputSource) argument).getByteStream() == inputStreamMock;\n\t\t\t}\n\t\t}), eq(XPathConstants.NODESET));\n\t\tassertNotNull(reader);\n\t}", "signature": "void testGetReader()", "full_signature": "@Test public void testGetReader()", "class_method_signature": "XmlExtractorTest.testGetReader()", "testcase": true, "constructor": false, "invocations": ["getReader", "evaluate", "verify", "argThat", "getByteStream", "eq", "assertNotNull"]}, "focal_class": {"identifier": "XmlExtractor", "superclass": "", "interfaces": "implements Extractor", "fields": [{"original_string": "private final StreamConnector connector;", "modifier": "private final", "type": "StreamConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "private final XmlRowAttribute[] rowHeader;", "modifier": "private final", "type": "XmlRowAttribute[]", "declarator": "rowHeader", "var_name": "rowHeader"}, {"original_string": "private final XPathExpression expression;", "modifier": "private final", "type": "XPathExpression", "declarator": "expression", "var_name": "expression"}], "methods": [{"identifier": "XmlExtractor", "parameters": "(StreamConnector connector, XmlRowAttribute[] rowHeader, XPathExpression expression)", "modifiers": "public", "return": "", "signature": " XmlExtractor(StreamConnector connector, XmlRowAttribute[] rowHeader, XPathExpression expression)", "full_signature": "public  XmlExtractor(StreamConnector connector, XmlRowAttribute[] rowHeader, XPathExpression expression)", "class_method_signature": "XmlExtractor.XmlExtractor(StreamConnector connector, XmlRowAttribute[] rowHeader, XPathExpression expression)", "testcase": false, "constructor": true}, {"identifier": "getReader", "parameters": "(Map<String, ?> parameters)", "modifiers": "@Override public", "return": "RowReader", "signature": "RowReader getReader(Map<String, ?> parameters)", "full_signature": "@Override public RowReader getReader(Map<String, ?> parameters)", "class_method_signature": "XmlExtractor.getReader(Map<String, ?> parameters)", "testcase": false, "constructor": false}], "file": "link-move/src/main/java/com/nhl/link/move/runtime/xml/XmlExtractor.java"}, "focal_method": {"identifier": "getReader", "parameters": "(Map<String, ?> parameters)", "modifiers": "@Override public", "return": "RowReader", "body": "@Override\n\tpublic RowReader getReader(Map<String, ?> parameters) {\n\t\ttry {\n\t\t\tInputSource inputSource = new InputSource(connector.getInputStream(parameters));\n\t\t\tNodeList nodes = (NodeList) expression.evaluate(inputSource, XPathConstants.NODESET);\n\t\t\treturn new XmlRowReader(rowHeader, nodes);\n\t\t} catch (IOException | XPathExpressionException e) {\n\t\t\tthrow new LmRuntimeException(e);\n\t\t}\n\t}", "signature": "RowReader getReader(Map<String, ?> parameters)", "full_signature": "@Override public RowReader getReader(Map<String, ?> parameters)", "class_method_signature": "XmlExtractor.getReader(Map<String, ?> parameters)", "testcase": false, "constructor": false, "invocations": ["getInputStream", "evaluate"]}, "repository": {"repo_id": 22876447, "url": "https://github.com/nhl/link-move", "stars": 25, "created": "8/12/2014 12:27:10 PM +00:00", "updates": "2019-12-01T17:30:35+00:00", "fork": "False", "license": "licensed"}}