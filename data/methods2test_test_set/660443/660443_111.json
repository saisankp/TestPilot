{"test_class": {"identifier": "RendererModelTest", "superclass": "", "interfaces": "", "fields": [], "file": "display/render/src/test/java/org/openscience/cdk/renderer/RendererModelTest.java"}, "test_case": {"identifier": "testMerge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMerge() {\n        RendererModel model = new RendererModel();\n        Assert.assertNotNull(model.getMerge());\n        // any further testing I can do here?\n    }", "signature": "void testMerge()", "full_signature": "@Test public void testMerge()", "class_method_signature": "RendererModelTest.testMerge()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "getMerge"]}, "focal_class": {"identifier": "RendererModel", "superclass": "", "interfaces": "implements Serializable, Cloneable", "fields": [{"original_string": "private static final long                  serialVersionUID     = -4420308906715213445L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID     = -4420308906715213445L", "var_name": "serialVersionUID"}, {"original_string": "private boolean                            notification         = true;", "modifier": "private", "type": "boolean", "declarator": "notification         = true", "var_name": "notification"}, {"original_string": "private transient List<ICDKChangeListener> listeners            = new ArrayList<ICDKChangeListener>();", "modifier": "private transient", "type": "List<ICDKChangeListener>", "declarator": "listeners            = new ArrayList<ICDKChangeListener>()", "var_name": "listeners"}, {"original_string": "private Map<IAtom, String>                 toolTipTextMap       = new HashMap<IAtom, String>();", "modifier": "private", "type": "Map<IAtom, String>", "declarator": "toolTipTextMap       = new HashMap<IAtom, String>()", "var_name": "toolTipTextMap"}, {"original_string": "private IAtom                              highlightedAtom      = null;", "modifier": "private", "type": "IAtom", "declarator": "highlightedAtom      = null", "var_name": "highlightedAtom"}, {"original_string": "private IBond                              highlightedBond      = null;", "modifier": "private", "type": "IBond", "declarator": "highlightedBond      = null", "var_name": "highlightedBond"}, {"original_string": "private IAtomContainer                     externalSelectedPart = null;", "modifier": "private", "type": "IAtomContainer", "declarator": "externalSelectedPart = null", "var_name": "externalSelectedPart"}, {"original_string": "private IAtomContainer                     clipboardContent     = null;", "modifier": "private", "type": "IAtomContainer", "declarator": "clipboardContent     = null", "var_name": "clipboardContent"}, {"original_string": "private IChemObjectSelection               selection;", "modifier": "private", "type": "IChemObjectSelection", "declarator": "selection", "var_name": "selection"}, {"original_string": "private Map<IAtom, IAtom>                  merge                = new HashMap<IAtom, IAtom>();", "modifier": "private", "type": "Map<IAtom, IAtom>", "declarator": "merge                = new HashMap<IAtom, IAtom>()", "var_name": "merge"}, {"original_string": "private IGeneratorParameter<Color> externalHighlightColor = new ExternalHighlightColor();", "modifier": "private", "type": "IGeneratorParameter<Color>", "declarator": "externalHighlightColor = new ExternalHighlightColor()", "var_name": "externalHighlightColor"}, {"original_string": "private IGeneratorParameter<Map<IChemObject, Color>> colorHash           = new ColorHash();", "modifier": "private", "type": "IGeneratorParameter<Map<IChemObject, Color>>", "declarator": "colorHash           = new ColorHash()", "var_name": "colorHash"}, {"original_string": "private Map<String, IGeneratorParameter<?>>          renderingParameters = new HashMap<String, IGeneratorParameter<?>>();", "modifier": "private", "type": "Map<String, IGeneratorParameter<?>>", "declarator": "renderingParameters = new HashMap<String, IGeneratorParameter<?>>()", "var_name": "renderingParameters"}], "methods": [{"identifier": "RendererModel", "parameters": "()", "modifiers": "public", "return": "", "signature": " RendererModel()", "full_signature": "public  RendererModel()", "class_method_signature": "RendererModel.RendererModel()", "testcase": false, "constructor": true}, {"identifier": "getRenderingParameters", "parameters": "()", "modifiers": "public", "return": "List<IGeneratorParameter<?>>", "signature": "List<IGeneratorParameter<?>> getRenderingParameters()", "full_signature": "public List<IGeneratorParameter<?>> getRenderingParameters()", "class_method_signature": "RendererModel.getRenderingParameters()", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "(Class<T> param)", "modifiers": "public", "return": "T", "signature": "T getParameter(Class<T> param)", "full_signature": "public T getParameter(Class<T> param)", "class_method_signature": "RendererModel.getParameter(Class<T> param)", "testcase": false, "constructor": false}, {"identifier": "getDefault", "parameters": "(Class<T> param)", "modifiers": "public", "return": "S", "signature": "S getDefault(Class<T> param)", "full_signature": "public S getDefault(Class<T> param)", "class_method_signature": "RendererModel.getDefault(Class<T> param)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(Class<T> paramType, U value)", "modifiers": "public", "return": "void", "signature": "void set(Class<T> paramType, U value)", "full_signature": "public void set(Class<T> paramType, U value)", "class_method_signature": "RendererModel.set(Class<T> paramType, U value)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Class<T> paramType)", "modifiers": "public", "return": "S", "signature": "S get(Class<T> paramType)", "full_signature": "public S get(Class<T> paramType)", "class_method_signature": "RendererModel.get(Class<T> paramType)", "testcase": false, "constructor": false}, {"identifier": "registerParameters", "parameters": "(IGenerator<? extends IChemObject> generator)", "modifiers": "public", "return": "void", "signature": "void registerParameters(IGenerator<? extends IChemObject> generator)", "full_signature": "public void registerParameters(IGenerator<? extends IChemObject> generator)", "class_method_signature": "RendererModel.registerParameters(IGenerator<? extends IChemObject> generator)", "testcase": false, "constructor": false}, {"identifier": "setSelection", "parameters": "(IChemObjectSelection selection)", "modifiers": "public", "return": "void", "signature": "void setSelection(IChemObjectSelection selection)", "full_signature": "public void setSelection(IChemObjectSelection selection)", "class_method_signature": "RendererModel.setSelection(IChemObjectSelection selection)", "testcase": false, "constructor": false}, {"identifier": "getSelection", "parameters": "()", "modifiers": "public", "return": "IChemObjectSelection", "signature": "IChemObjectSelection getSelection()", "full_signature": "public IChemObjectSelection getSelection()", "class_method_signature": "RendererModel.getSelection()", "testcase": false, "constructor": false}, {"identifier": "getMerge", "parameters": "()", "modifiers": "public", "return": "Map<IAtom, IAtom>", "signature": "Map<IAtom, IAtom> getMerge()", "full_signature": "public Map<IAtom, IAtom> getMerge()", "class_method_signature": "RendererModel.getMerge()", "testcase": false, "constructor": false}, {"identifier": "getHighlightedAtom", "parameters": "()", "modifiers": "public", "return": "IAtom", "signature": "IAtom getHighlightedAtom()", "full_signature": "public IAtom getHighlightedAtom()", "class_method_signature": "RendererModel.getHighlightedAtom()", "testcase": false, "constructor": false}, {"identifier": "setHighlightedAtom", "parameters": "(IAtom highlightedAtom)", "modifiers": "public", "return": "void", "signature": "void setHighlightedAtom(IAtom highlightedAtom)", "full_signature": "public void setHighlightedAtom(IAtom highlightedAtom)", "class_method_signature": "RendererModel.setHighlightedAtom(IAtom highlightedAtom)", "testcase": false, "constructor": false}, {"identifier": "getHighlightedBond", "parameters": "()", "modifiers": "public", "return": "IBond", "signature": "IBond getHighlightedBond()", "full_signature": "public IBond getHighlightedBond()", "class_method_signature": "RendererModel.getHighlightedBond()", "testcase": false, "constructor": false}, {"identifier": "setHighlightedBond", "parameters": "(IBond highlightedBond)", "modifiers": "public", "return": "void", "signature": "void setHighlightedBond(IBond highlightedBond)", "full_signature": "public void setHighlightedBond(IBond highlightedBond)", "class_method_signature": "RendererModel.setHighlightedBond(IBond highlightedBond)", "testcase": false, "constructor": false}, {"identifier": "getClipboardContent", "parameters": "()", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer getClipboardContent()", "full_signature": "public IAtomContainer getClipboardContent()", "class_method_signature": "RendererModel.getClipboardContent()", "testcase": false, "constructor": false}, {"identifier": "setClipboardContent", "parameters": "(IAtomContainer content)", "modifiers": "public", "return": "void", "signature": "void setClipboardContent(IAtomContainer content)", "full_signature": "public void setClipboardContent(IAtomContainer content)", "class_method_signature": "RendererModel.setClipboardContent(IAtomContainer content)", "testcase": false, "constructor": false}, {"identifier": "addCDKChangeListener", "parameters": "(ICDKChangeListener listener)", "modifiers": "public", "return": "void", "signature": "void addCDKChangeListener(ICDKChangeListener listener)", "full_signature": "public void addCDKChangeListener(ICDKChangeListener listener)", "class_method_signature": "RendererModel.addCDKChangeListener(ICDKChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeCDKChangeListener", "parameters": "(ICDKChangeListener listener)", "modifiers": "public", "return": "void", "signature": "void removeCDKChangeListener(ICDKChangeListener listener)", "full_signature": "public void removeCDKChangeListener(ICDKChangeListener listener)", "class_method_signature": "RendererModel.removeCDKChangeListener(ICDKChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "fireChange", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void fireChange()", "full_signature": "public void fireChange()", "class_method_signature": "RendererModel.fireChange()", "testcase": false, "constructor": false}, {"identifier": "getToolTipText", "parameters": "(IAtom atom)", "modifiers": "public", "return": "String", "signature": "String getToolTipText(IAtom atom)", "full_signature": "public String getToolTipText(IAtom atom)", "class_method_signature": "RendererModel.getToolTipText(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "setToolTipTextMap", "parameters": "(Map<IAtom, String> map)", "modifiers": "public", "return": "void", "signature": "void setToolTipTextMap(Map<IAtom, String> map)", "full_signature": "public void setToolTipTextMap(Map<IAtom, String> map)", "class_method_signature": "RendererModel.setToolTipTextMap(Map<IAtom, String> map)", "testcase": false, "constructor": false}, {"identifier": "getToolTipTextMap", "parameters": "()", "modifiers": "public", "return": "Map<IAtom, String>", "signature": "Map<IAtom, String> getToolTipTextMap()", "full_signature": "public Map<IAtom, String> getToolTipTextMap()", "class_method_signature": "RendererModel.getToolTipTextMap()", "testcase": false, "constructor": false}, {"identifier": "getExternalSelectedPart", "parameters": "()", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer getExternalSelectedPart()", "full_signature": "public IAtomContainer getExternalSelectedPart()", "class_method_signature": "RendererModel.getExternalSelectedPart()", "testcase": false, "constructor": false}, {"identifier": "setExternalSelectedPart", "parameters": "(IAtomContainer externalSelectedPart)", "modifiers": "public", "return": "void", "signature": "void setExternalSelectedPart(IAtomContainer externalSelectedPart)", "full_signature": "public void setExternalSelectedPart(IAtomContainer externalSelectedPart)", "class_method_signature": "RendererModel.setExternalSelectedPart(IAtomContainer externalSelectedPart)", "testcase": false, "constructor": false}, {"identifier": "getNotification", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getNotification()", "full_signature": "public boolean getNotification()", "class_method_signature": "RendererModel.getNotification()", "testcase": false, "constructor": false}, {"identifier": "hasParameter", "parameters": "(Class<T> param)", "modifiers": "public", "return": "boolean", "signature": "boolean hasParameter(Class<T> param)", "full_signature": "public boolean hasParameter(Class<T> param)", "class_method_signature": "RendererModel.hasParameter(Class<T> param)", "testcase": false, "constructor": false}, {"identifier": "setNotification", "parameters": "(boolean notification)", "modifiers": "public", "return": "void", "signature": "void setNotification(boolean notification)", "full_signature": "public void setNotification(boolean notification)", "class_method_signature": "RendererModel.setNotification(boolean notification)", "testcase": false, "constructor": false}], "file": "display/render/src/main/java/org/openscience/cdk/renderer/RendererModel.java"}, "focal_method": {"identifier": "getMerge", "parameters": "()", "modifiers": "public", "return": "Map<IAtom, IAtom>", "body": "public Map<IAtom, IAtom> getMerge() {\n        return merge;\n    }", "signature": "Map<IAtom, IAtom> getMerge()", "full_signature": "public Map<IAtom, IAtom> getMerge()", "class_method_signature": "RendererModel.getMerge()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}