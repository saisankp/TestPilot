{"test_class": {"identifier": "RangesHeaderDelegateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RangesHeaderDelegate rangesHeaderDelegate;", "modifier": "private", "type": "RangesHeaderDelegate", "declarator": "rangesHeaderDelegate", "var_name": "rangesHeaderDelegate"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/header/RangesHeaderDelegateTest.java"}, "test_case": {"identifier": "throwsExceptionWhenByteRangesHeaderIsNull", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void throwsExceptionWhenByteRangesHeaderIsNull() throws Exception {\n        rangesHeaderDelegate.fromString(null);\n    }", "signature": "void throwsExceptionWhenByteRangesHeaderIsNull()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void throwsExceptionWhenByteRangesHeaderIsNull()", "class_method_signature": "RangesHeaderDelegateTest.throwsExceptionWhenByteRangesHeaderIsNull()", "testcase": true, "constructor": false, "invocations": ["fromString"]}, "focal_class": {"identifier": "RangesHeaderDelegate", "superclass": "", "interfaces": "implements RuntimeDelegate.HeaderDelegate<Ranges>", "fields": [], "methods": [{"identifier": "fromString", "parameters": "(String value)", "modifiers": "@Override public", "return": "Ranges", "signature": "Ranges fromString(String value)", "full_signature": "@Override public Ranges fromString(String value)", "class_method_signature": "RangesHeaderDelegate.fromString(String value)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Ranges value)", "modifiers": "@Override public", "return": "String", "signature": "String toString(Ranges value)", "full_signature": "@Override public String toString(Ranges value)", "class_method_signature": "RangesHeaderDelegate.toString(Ranges value)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/header/RangesHeaderDelegate.java"}, "focal_method": {"identifier": "fromString", "parameters": "(String value)", "modifiers": "@Override public", "return": "Ranges", "body": "@Override\n    public Ranges fromString(String value) throws IllegalArgumentException {\n        if (value == null) {\n            throw new IllegalArgumentException();\n        }\n\n        if (!value.startsWith(\"bytes\")) {\n            throw new IllegalArgumentException(String.format(\"Invalid byte range: %s\", value));\n        }\n\n        int eq = scan(value, '=');\n        if (charAtIsNot(value, eq, '=')) {\n            throw new IllegalArgumentException(String.format(\"Invalid byte range: %s\", value));\n        }\n\n        value = value.substring(eq + 1);\n\n        String[] tokens = value.split(\",\");\n        List<Range> ranges = new ArrayList<>();\n        for (String token : tokens) {\n            long start = 0;\n            long end = -1L;\n            token = token.trim();\n            int dash = scan(token, '-');\n            if (charAtIsNot(token, dash, '-')) {\n                throw new IllegalArgumentException(\"Invalid byte range.\");\n            } else if (dash == 0) {\n                start = Long.parseLong(token);\n            } else if (dash > 0) {\n                start = Long.parseLong(token.substring(0, dash).trim());\n                if (dash < token.length() - 1) {\n                    end = Long.parseLong(token.substring(dash + 1, token.length()).trim());\n                }\n            }\n            ranges.add(new Range(start, end));\n        }\n        return new Ranges(ranges);\n    }", "signature": "Ranges fromString(String value)", "full_signature": "@Override public Ranges fromString(String value)", "class_method_signature": "RangesHeaderDelegate.fromString(String value)", "testcase": false, "constructor": false, "invocations": ["startsWith", "format", "scan", "charAtIsNot", "format", "substring", "split", "trim", "scan", "charAtIsNot", "parseLong", "parseLong", "trim", "substring", "length", "parseLong", "trim", "substring", "length", "add"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}