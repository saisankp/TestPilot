{"test_class": {"identifier": "ParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Parser<String> parser = spy(new StubResolver(new StubEnvironment<>()));", "modifier": "", "type": "Parser<String>", "declarator": "parser = spy(new StubResolver(new StubEnvironment<>()))", "var_name": "parser"}], "file": "scribe/core/src/test/java/com/karuslabs/scribe/core/parsers/ParserTest.java"}, "test_case": {"identifier": "check", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void check() {\n        var set = mock(Set.class);\n        \n        parser.check(set);\n        verifyNoInteractions(set);\n    }", "signature": "void check()", "full_signature": "@Test void check()", "class_method_signature": "ParserTest.check()", "testcase": true, "constructor": false, "invocations": ["mock", "check", "verifyNoInteractions"]}, "focal_class": {"identifier": "Parser", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Pattern COMMAND = Pattern.compile(\"(.*\\\\s+.*)\");", "modifier": "public static final", "type": "Pattern", "declarator": "COMMAND = Pattern.compile(\"(.*\\\\s+.*)\")", "var_name": "COMMAND"}, {"original_string": "public static final Pattern PERMISSION = Pattern.compile(\"\\\\w+(\\\\.\\\\w+)*(.\\\\*)?\");", "modifier": "public static final", "type": "Pattern", "declarator": "PERMISSION = Pattern.compile(\"\\\\w+(\\\\.\\\\w+)*(.\\\\*)?\")", "var_name": "PERMISSION"}, {"original_string": "public static final Pattern VERSIONING = Pattern.compile(\"(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(-[a-zA-Z\\\\d][-a-zA-Z.\\\\d]*)?(\\\\+[a-zA-Z\\\\d][-a-zA-Z.\\\\d]*)?$\");", "modifier": "public static final", "type": "Pattern", "declarator": "VERSIONING = Pattern.compile(\"(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(-[a-zA-Z\\\\d][-a-zA-Z.\\\\d]*)?(\\\\+[a-zA-Z\\\\d][-a-zA-Z.\\\\d]*)?$\")", "var_name": "VERSIONING"}, {"original_string": "public static final Pattern URL = Pattern.compile(\"(?i)\\\\b((?:https?:(?:/{1,3}|[a-z0-9%])|[a-z0-9.\\\\-]+[.](?:com|net|org|edu|gov|mil|aero|asia|biz|cat|coop|info|int|jobs|mobi|museum|name|post|pro|tel|travel|xxx|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|Ja|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)/)(?:[^\\\\s()<>{}\\\\[\\\\]]+|\\\\([^\\\\s()]*?\\\\([^\\\\s()]+\\\\)[^\\\\s()]*?\\\\)|\\\\([^\\\\s]+?\\\\))+(?:\\\\([^\\\\s()]*?\\\\([^\\\\s()]+\\\\)[^\\\\s()]*?\\\\)|\\\\([^\\\\s]+?\\\\)|[^\\\\s`!()\\\\[\\\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019])|(?:(?<!@)[a-z0-9]+(?:[.\\\\-][a-z0-9]+)*[.](?:com|net|org|edu|gov|mil|aero|asia|biz|cat|coop|info|int|jobs|mobi|museum|name|post|pro|tel|travel|xxx|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|Ja|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)\\\\b/?(?!@)))\");", "modifier": "public static final", "type": "Pattern", "declarator": "URL = Pattern.compile(\"(?i)\\\\b((?:https?:(?:/{1,3}|[a-z0-9%])|[a-z0-9.\\\\-]+[.](?:com|net|org|edu|gov|mil|aero|asia|biz|cat|coop|info|int|jobs|mobi|museum|name|post|pro|tel|travel|xxx|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|Ja|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)/)(?:[^\\\\s()<>{}\\\\[\\\\]]+|\\\\([^\\\\s()]*?\\\\([^\\\\s()]+\\\\)[^\\\\s()]*?\\\\)|\\\\([^\\\\s]+?\\\\))+(?:\\\\([^\\\\s()]*?\\\\([^\\\\s()]+\\\\)[^\\\\s()]*?\\\\)|\\\\([^\\\\s]+?\\\\)|[^\\\\s`!()\\\\[\\\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019])|(?:(?<!@)[a-z0-9]+(?:[.\\\\-][a-z0-9]+)*[.](?:com|net|org|edu|gov|mil|aero|asia|biz|cat|coop|info|int|jobs|mobi|museum|name|post|pro|tel|travel|xxx|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|Ja|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)\\\\b/?(?!@)))\");", "var_name": "URL"}, {"original_string": "public static final Pattern WORD = Pattern.compile(\"\\\\w+\");", "modifier": "public static final", "type": "Pattern", "declarator": "WORD = Pattern.compile(\"\\\\w+\")", "var_name": "WORD"}, {"original_string": "protected Environment<T> environment;", "modifier": "protected", "type": "Environment<T>", "declarator": "environment", "var_name": "environment"}, {"original_string": "protected @Immutable Set<Class<? extends Annotation>> annotations;", "modifier": "protected @Immutable", "type": "Set<Class<? extends Annotation>>", "declarator": "annotations", "var_name": "annotations"}], "methods": [{"identifier": "Parser", "parameters": "(Environment<T> environment, @Immutable Set<Class<? extends Annotation>> annotations)", "modifiers": "public", "return": "", "signature": " Parser(Environment<T> environment, @Immutable Set<Class<? extends Annotation>> annotations)", "full_signature": "public  Parser(Environment<T> environment, @Immutable Set<Class<? extends Annotation>> annotations)", "class_method_signature": "Parser.Parser(Environment<T> environment, @Immutable Set<Class<? extends Annotation>> annotations)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(Set<T> types)", "modifiers": "public", "return": "void", "signature": "void parse(Set<T> types)", "full_signature": "public void parse(Set<T> types)", "class_method_signature": "Parser.parse(Set<T> types)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(Set<T> types)", "modifiers": "@VisibleForOverride protected", "return": "void", "signature": "void check(Set<T> types)", "full_signature": "@VisibleForOverride protected void check(Set<T> types)", "class_method_signature": "Parser.check(Set<T> types)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(T type)", "modifiers": "protected abstract", "return": "void", "signature": "void parse(T type)", "full_signature": "protected abstract void parse(T type)", "class_method_signature": "Parser.parse(T type)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@VisibleForOverride protected", "return": "void", "signature": "void clear()", "full_signature": "@VisibleForOverride protected void clear()", "class_method_signature": "Parser.clear()", "testcase": false, "constructor": false}, {"identifier": "annotations", "parameters": "()", "modifiers": "public", "return": "Set<Class<? extends Annotation>>", "signature": "Set<Class<? extends Annotation>> annotations()", "full_signature": "public Set<Class<? extends Annotation>> annotations()", "class_method_signature": "Parser.annotations()", "testcase": false, "constructor": false}], "file": "scribe/core/src/main/java/com/karuslabs/scribe/core/parsers/Parser.java"}, "focal_method": {"identifier": "check", "parameters": "(Set<T> types)", "modifiers": "@VisibleForOverride protected", "return": "void", "body": "@VisibleForOverride\n    protected void check(Set<T> types) {}", "signature": "void check(Set<T> types)", "full_signature": "@VisibleForOverride protected void check(Set<T> types)", "class_method_signature": "Parser.check(Set<T> types)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}