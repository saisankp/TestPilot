{"test_class": {"identifier": "ImmutableThingPlaceholderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NAME = \"ditto\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"ditto\"", "var_name": "NAME"}, {"original_string": "private static final String NAMESPACE = \"eclipse\";", "modifier": "private static final", "type": "String", "declarator": "NAMESPACE = \"eclipse\"", "var_name": "NAMESPACE"}, {"original_string": "private static final ThingId THING_ID = ThingId.of(NAMESPACE, NAME);", "modifier": "private static final", "type": "ThingId", "declarator": "THING_ID = ThingId.of(NAMESPACE, NAME)", "var_name": "THING_ID"}, {"original_string": "private static final ThingPlaceholder UNDER_TEST = ImmutableThingPlaceholder.INSTANCE;", "modifier": "private static final", "type": "ThingPlaceholder", "declarator": "UNDER_TEST = ImmutableThingPlaceholder.INSTANCE", "var_name": "UNDER_TEST"}], "file": "model/placeholders/src/test/java/org/eclipse/ditto/model/placeholders/ImmutableThingPlaceholderTest.java"}, "test_case": {"identifier": "testUnknownPlaceholderReturnsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnknownPlaceholderReturnsEmpty() {\n        assertThat(UNDER_TEST.resolve(THING_ID, \"thing_id\")).isEmpty();\n    }", "signature": "void testUnknownPlaceholderReturnsEmpty()", "full_signature": "@Test public void testUnknownPlaceholderReturnsEmpty()", "class_method_signature": "ImmutableThingPlaceholderTest.testUnknownPlaceholderReturnsEmpty()", "testcase": true, "constructor": false, "invocations": ["isEmpty", "assertThat", "resolve"]}, "focal_class": {"identifier": "ImmutableThingPlaceholder", "superclass": "extends AbstractEntityPlaceholder<ThingId>", "interfaces": "implements ThingPlaceholder", "fields": [{"original_string": "static final ImmutableThingPlaceholder INSTANCE = new ImmutableThingPlaceholder();", "modifier": "static final", "type": "ImmutableThingPlaceholder", "declarator": "INSTANCE = new ImmutableThingPlaceholder()", "var_name": "INSTANCE"}], "methods": [{"identifier": "getPrefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPrefix()", "full_signature": "@Override public String getPrefix()", "class_method_signature": "ImmutableThingPlaceholder.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final CharSequence thingId, final String placeholder)", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> resolve(final CharSequence thingId, final String placeholder)", "full_signature": "@Override public Optional<String> resolve(final CharSequence thingId, final String placeholder)", "class_method_signature": "ImmutableThingPlaceholder.resolve(final CharSequence thingId, final String placeholder)", "testcase": false, "constructor": false}], "file": "model/placeholders/src/main/java/org/eclipse/ditto/model/placeholders/ImmutableThingPlaceholder.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final CharSequence thingId, final String placeholder)", "modifiers": "@Override public", "return": "Optional<String>", "body": "@Override\n    public Optional<String> resolve(final CharSequence thingId, final String placeholder) {\n        argumentNotEmpty(placeholder, \"placeholder\");\n        checkNotNull(thingId, \"Thing ID\");\n        if (thingId instanceof ThingId) {\n            return doResolve(((ThingId) thingId), placeholder);\n        } else {\n            return Optional.empty();\n        }\n    }", "signature": "Optional<String> resolve(final CharSequence thingId, final String placeholder)", "full_signature": "@Override public Optional<String> resolve(final CharSequence thingId, final String placeholder)", "class_method_signature": "ImmutableThingPlaceholder.resolve(final CharSequence thingId, final String placeholder)", "testcase": false, "constructor": false, "invocations": ["argumentNotEmpty", "checkNotNull", "doResolve", "empty"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}