{"test_class": {"identifier": "TinkConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/config/TinkConfigTest.java"}, "test_case": {"identifier": "aaaTestInitialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void aaaTestInitialization() throws Exception {\n    try {\n      Registry.getCatalogue(\"tinkmac\");\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"no catalogue found\");\n      assertThat(e.toString()).contains(\"MacConfig.register()\");\n    }\n    try {\n      Registry.getCatalogue(\"tinkaead\");\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"no catalogue found\");\n      assertThat(e.toString()).contains(\"AeadConfig.register()\");\n    }\n    try {\n      Registry.getCatalogue(\"tinkhybriddecrypt\");\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"no catalogue found\");\n      assertThat(e.toString()).contains(\"HybridConfig.register()\");\n    }\n    try {\n      Registry.getCatalogue(\"tinkhybridencrypt\");\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"no catalogue found\");\n      assertThat(e.toString()).contains(\"HybridConfig.register()\");\n    }\n    try {\n      Registry.getCatalogue(\"tinkpublickeysign\");\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"no catalogue found\");\n      assertThat(e.toString()).contains(\"SignatureConfig.register()\");\n    }\n    try {\n      Registry.getCatalogue(\"tinkpublickeyverify\");\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"no catalogue found\");\n      assertThat(e.toString()).contains(\"SignatureConfig.register()\");\n    }\n\n    String macTypeUrl = \"type.googleapis.com/google.crypto.tink.HmacKey\";\n    String aeadTypeUrl = \"type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey\";\n    String daeadTypeUrl = \"type.googleapis.com/google.crypto.tink.AesSivKey\";\n    String hybridTypeUrl = \"type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey\";\n    String signTypeUrl = \"type.googleapis.com/google.crypto.tink.EcdsaPrivateKey\";\n    String streamingAeadTypeUrl = \"type.googleapis.com/google.crypto.tink.AesCtrHmacStreamingKey\";\n    try {\n      Registry.getUntypedKeyManager(macTypeUrl);\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"No key manager found\");\n    }\n    try {\n      Registry.getUntypedKeyManager(aeadTypeUrl);\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"No key manager found\");\n    }\n    try {\n      Registry.getUntypedKeyManager(daeadTypeUrl);\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"No key manager found\");\n    }\n    try {\n      Registry.getUntypedKeyManager(hybridTypeUrl);\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"No key manager found\");\n    }\n    try {\n      Registry.getUntypedKeyManager(signTypeUrl);\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"No key manager found\");\n    }\n    try {\n      Registry.getUntypedKeyManager(streamingAeadTypeUrl);\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"No key manager found\");\n    }\n\n    // Initialize the config.\n    TinkConfig.register();\n\n    // After registration the key managers should be present.\n    Config.register(TinkConfig.TINK_1_1_0);\n    Registry.getUntypedKeyManager(macTypeUrl);\n    Registry.getUntypedKeyManager(aeadTypeUrl);\n    Registry.getUntypedKeyManager(daeadTypeUrl);\n    Registry.getUntypedKeyManager(hybridTypeUrl);\n    Registry.getUntypedKeyManager(signTypeUrl);\n    Registry.getUntypedKeyManager(streamingAeadTypeUrl);\n  }", "signature": "void aaaTestInitialization()", "full_signature": "@Test public void aaaTestInitialization()", "class_method_signature": "TinkConfigTest.aaaTestInitialization()", "testcase": true, "constructor": false, "invocations": ["getCatalogue", "fail", "contains", "assertThat", "toString", "contains", "assertThat", "toString", "getCatalogue", "fail", "contains", "assertThat", "toString", "contains", "assertThat", "toString", "getCatalogue", "fail", "contains", "assertThat", "toString", "contains", "assertThat", "toString", "getCatalogue", "fail", "contains", "assertThat", "toString", "contains", "assertThat", "toString", "getCatalogue", "fail", "contains", "assertThat", "toString", "contains", "assertThat", "toString", "getCatalogue", "fail", "contains", "assertThat", "toString", "contains", "assertThat", "toString", "getUntypedKeyManager", "fail", "contains", "assertThat", "toString", "getUntypedKeyManager", "fail", "contains", "assertThat", "toString", "getUntypedKeyManager", "fail", "contains", "assertThat", "toString", "getUntypedKeyManager", "fail", "contains", "assertThat", "toString", "getUntypedKeyManager", "fail", "contains", "assertThat", "toString", "getUntypedKeyManager", "fail", "contains", "assertThat", "toString", "register", "register", "getUntypedKeyManager", "getUntypedKeyManager", "getUntypedKeyManager", "getUntypedKeyManager", "getUntypedKeyManager", "getUntypedKeyManager"]}, "focal_class": {"identifier": "TinkConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Deprecated\n  public static final RegistryConfig TINK_1_0_0 =\n      RegistryConfig.newBuilder()\n          .mergeFrom(\n              HybridConfig.TINK_1_0_0) // include AeadConfig.TINK_1_0_0 and MacConfig.TINK_1_0_0\n          .mergeFrom(SignatureConfig.TINK_1_0_0)\n          .setConfigName(\"TINK_1_0_0\")\n          .build();", "modifier": "@Deprecated\n  public static final", "type": "RegistryConfig", "declarator": "TINK_1_0_0 =\n      RegistryConfig.newBuilder()\n          .mergeFrom(\n              HybridConfig.TINK_1_0_0) // include AeadConfig.TINK_1_0_0 and MacConfig.TINK_1_0_0\n          .mergeFrom(SignatureConfig.TINK_1_0_0)\n          .setConfigName(\"TINK_1_0_0\")\n          .build()", "var_name": "TINK_1_0_0"}, {"original_string": "@Deprecated\n  public static final RegistryConfig TINK_1_1_0 =\n      RegistryConfig.newBuilder()\n          .mergeFrom(\n              HybridConfig.TINK_1_1_0) // include AeadConfig.TINK_1_0_0 and MacConfig.TINK_1_0_0\n          .mergeFrom(SignatureConfig.TINK_1_1_0)\n          .mergeFrom(DeterministicAeadConfig.TINK_1_1_0)\n          .mergeFrom(StreamingAeadConfig.TINK_1_1_0)\n          .setConfigName(\"TINK_1_1_0\")\n          .build();", "modifier": "@Deprecated\n  public static final", "type": "RegistryConfig", "declarator": "TINK_1_1_0 =\n      RegistryConfig.newBuilder()\n          .mergeFrom(\n              HybridConfig.TINK_1_1_0) // include AeadConfig.TINK_1_0_0 and MacConfig.TINK_1_0_0\n          .mergeFrom(SignatureConfig.TINK_1_1_0)\n          .mergeFrom(DeterministicAeadConfig.TINK_1_1_0)\n          .mergeFrom(StreamingAeadConfig.TINK_1_1_0)\n          .setConfigName(\"TINK_1_1_0\")\n          .build()", "var_name": "TINK_1_1_0"}, {"original_string": "@Deprecated\n  public static final RegistryConfig LATEST =\n      RegistryConfig.newBuilder()\n          .mergeFrom(HybridConfig.LATEST) // include AeadConfig.LATEST and MacConfig.LATEST\n          .mergeFrom(SignatureConfig.LATEST)\n          .mergeFrom(DeterministicAeadConfig.LATEST)\n          .mergeFrom(StreamingAeadConfig.LATEST)\n          .setConfigName(\"TINK\")\n          .build();", "modifier": "@Deprecated\n  public static final", "type": "RegistryConfig", "declarator": "LATEST =\n      RegistryConfig.newBuilder()\n          .mergeFrom(HybridConfig.LATEST) // include AeadConfig.LATEST and MacConfig.LATEST\n          .mergeFrom(SignatureConfig.LATEST)\n          .mergeFrom(DeterministicAeadConfig.LATEST)\n          .mergeFrom(StreamingAeadConfig.LATEST)\n          .setConfigName(\"TINK\")\n          .build()", "var_name": "LATEST"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@Deprecated public static", "return": "void", "signature": "void init()", "full_signature": "@Deprecated public static void init()", "class_method_signature": "TinkConfig.init()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void register()", "full_signature": "public static void register()", "class_method_signature": "TinkConfig.register()", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/config/TinkConfig.java"}, "focal_method": {"identifier": "register", "parameters": "()", "modifiers": "public static", "return": "void", "body": "public static void register() throws GeneralSecurityException {\n    DeterministicAeadConfig.register();\n    HybridConfig.register(); // includes Aead and Mac\n    PrfConfig.register();\n    SignatureConfig.register();\n    StreamingAeadConfig.register();\n  }", "signature": "void register()", "full_signature": "public static void register()", "class_method_signature": "TinkConfig.register()", "testcase": false, "constructor": false, "invocations": ["register", "register", "register", "register", "register"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}