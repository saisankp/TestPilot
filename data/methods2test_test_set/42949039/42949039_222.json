{"test_class": {"identifier": "RelationalTableRegistrationHelperTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "private static final String COLUMN_DEFAULT_VALUE = \"0\";", "modifier": "private static final", "type": "String", "declarator": "COLUMN_DEFAULT_VALUE = \"0\"", "var_name": "COLUMN_DEFAULT_VALUE"}, {"original_string": "private static final String COLUMN_SIZE = \"16\";", "modifier": "private static final", "type": "String", "declarator": "COLUMN_SIZE = \"16\"", "var_name": "COLUMN_SIZE"}, {"original_string": "private static final String DECIMAL_DIGITS = \"2\";", "modifier": "private static final", "type": "String", "declarator": "DECIMAL_DIGITS = \"2\"", "var_name": "DECIMAL_DIGITS"}, {"original_string": "private static final int NOT_NULLABLE = 0;", "modifier": "private static final", "type": "int", "declarator": "NOT_NULLABLE = 0", "var_name": "NOT_NULLABLE"}, {"original_string": "private static final String NUMERIC_TYPE_NAME = \"NUMERIC\";", "modifier": "private static final", "type": "String", "declarator": "NUMERIC_TYPE_NAME = \"NUMERIC\"", "var_name": "NUMERIC_TYPE_NAME"}, {"original_string": "private static final boolean REQUIRED = true;", "modifier": "private static final", "type": "boolean", "declarator": "REQUIRED = true", "var_name": "REQUIRED"}, {"original_string": "private static final String SCHEMA_COLUMNS_SIZE = COLUMN_SIZE + \",\" + DECIMAL_DIGITS;", "modifier": "private static final", "type": "String", "declarator": "SCHEMA_COLUMNS_SIZE = COLUMN_SIZE + \",\" + DECIMAL_DIGITS", "var_name": "SCHEMA_COLUMNS_SIZE"}, {"original_string": "private static final String VARCHAR_TYPE_NAME = \"VARCHAR\";", "modifier": "private static final", "type": "String", "declarator": "VARCHAR_TYPE_NAME = \"VARCHAR\"", "var_name": "VARCHAR_TYPE_NAME"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/RelationalTableRegistrationHelperTest.java"}, "test_case": {"identifier": "testGetSchemaColumnsNoDecimalDigits", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSchemaColumnsNoDecimalDigits() throws SQLException\n    {\n        // Create a mock result set.\n        ResultSet resultSetMock = mock(ResultSet.class);\n\n        // Setup the mock results.\n        when(resultSetMock.next()).thenReturn(true).thenReturn(false);\n        when(resultSetMock.getString(\"COLUMN_NAME\")).thenReturn(COLUMN_NAME);\n        when(resultSetMock.getString(\"TYPE_NAME\")).thenReturn(NUMERIC_TYPE_NAME);\n        when(resultSetMock.getString(\"COLUMN_SIZE\")).thenReturn(COLUMN_SIZE);\n        when(resultSetMock.getInt(\"NULLABLE\")).thenReturn(NOT_NULLABLE);\n        when(resultSetMock.getString(\"COLUMN_DEF\")).thenReturn(COLUMN_DEFAULT_VALUE);\n\n        // Call the method under test.\n        List<SchemaColumn> schemaColumns = relationalTableRegistrationHelper.getSchemaColumns(resultSetMock);\n\n        // Verify the test results.\n        assertThat(\"The list size is not correct.\", schemaColumns.size(), is(equalTo(1)));\n        assertThat(\"The column name is not correct.\", schemaColumns.get(0).getName(), is(equalTo(COLUMN_NAME)));\n        assertThat(\"The column type is not correct.\", schemaColumns.get(0).getType(), is(equalTo(NUMERIC_TYPE_NAME)));\n        assertThat(\"The column size is not correct.\", schemaColumns.get(0).getSize(), is(equalTo(COLUMN_SIZE)));\n        assertThat(\"The required column is not correct.\", schemaColumns.get(0).isRequired(), is(equalTo(REQUIRED)));\n        assertThat(\"The column default value is not correct.\", schemaColumns.get(0).getDefaultValue(), is(equalTo(COLUMN_DEFAULT_VALUE)));\n\n        // Validate the mock calls.\n        verify(resultSetMock, times(2)).next();\n        verify(resultSetMock).getString(\"COLUMN_NAME\");\n        verify(resultSetMock, times(2)).getString(\"TYPE_NAME\");\n        verify(resultSetMock).getString(\"COLUMN_SIZE\");\n        verify(resultSetMock).getString(\"DECIMAL_DIGITS\");\n        verify(resultSetMock).getInt(\"NULLABLE\");\n        verify(resultSetMock).getString(\"COLUMN_DEF\");\n        verifyNoMoreInteractions(resultSetMock);\n    }", "signature": "void testGetSchemaColumnsNoDecimalDigits()", "full_signature": "@Test public void testGetSchemaColumnsNoDecimalDigits()", "class_method_signature": "RelationalTableRegistrationHelperTest.testGetSchemaColumnsNoDecimalDigits()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "thenReturn", "when", "next", "thenReturn", "when", "getString", "thenReturn", "when", "getString", "thenReturn", "when", "getString", "thenReturn", "when", "getInt", "thenReturn", "when", "getString", "getSchemaColumns", "assertThat", "size", "is", "equalTo", "assertThat", "getName", "get", "is", "equalTo", "assertThat", "getType", "get", "is", "equalTo", "assertThat", "getSize", "get", "is", "equalTo", "assertThat", "isRequired", "get", "is", "equalTo", "assertThat", "getDefaultValue", "get", "is", "equalTo", "next", "verify", "times", "getString", "verify", "getString", "verify", "times", "getString", "verify", "getString", "verify", "getInt", "verify", "getString", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "RelationalTableRegistrationHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getSchemaColumns", "parameters": "(final ResultSet resultSet)", "modifiers": "public", "return": "List<SchemaColumn>", "signature": "List<SchemaColumn> getSchemaColumns(final ResultSet resultSet)", "full_signature": "public List<SchemaColumn> getSchemaColumns(final ResultSet resultSet)", "class_method_signature": "RelationalTableRegistrationHelper.getSchemaColumns(final ResultSet resultSet)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/RelationalTableRegistrationHelper.java"}, "focal_method": {"identifier": "getSchemaColumns", "parameters": "(final ResultSet resultSet)", "modifiers": "public", "return": "List<SchemaColumn>", "body": "public List<SchemaColumn> getSchemaColumns(final ResultSet resultSet) throws SQLException\n    {\n        // Create an empty schema columns list.\n        List<SchemaColumn> schemaColumns = new ArrayList<>();\n\n        // While there are further results in the result set create a new schema column and add it to the list.\n        while (resultSet.next())\n        {\n            SchemaColumn schemaColumn = new SchemaColumn();\n            schemaColumn.setName(resultSet.getString(\"COLUMN_NAME\"));\n            schemaColumn.setType(resultSet.getString(\"TYPE_NAME\"));\n\n            // If this is a numeric column then include the decimal digits as part of the size.\n            if (resultSet.getString(\"TYPE_NAME\").equalsIgnoreCase(\"NUMERIC\")\n                && StringUtils.isNotEmpty(resultSet.getString(\"DECIMAL_DIGITS\")))\n            {\n                schemaColumn.setSize(resultSet.getString(\"COLUMN_SIZE\") + \",\" + resultSet.getString(\"DECIMAL_DIGITS\"));\n            }\n            else\n            {\n                schemaColumn.setSize(resultSet.getString(\"COLUMN_SIZE\"));\n            }\n\n            schemaColumn.setRequired(resultSet.getInt(\"NULLABLE\") == 0);\n            schemaColumn.setDefaultValue(resultSet.getString(\"COLUMN_DEF\"));\n            schemaColumns.add(schemaColumn);\n        }\n\n        return schemaColumns;\n    }", "signature": "List<SchemaColumn> getSchemaColumns(final ResultSet resultSet)", "full_signature": "public List<SchemaColumn> getSchemaColumns(final ResultSet resultSet)", "class_method_signature": "RelationalTableRegistrationHelper.getSchemaColumns(final ResultSet resultSet)", "testcase": false, "constructor": false, "invocations": ["next", "setName", "getString", "setType", "getString", "equalsIgnoreCase", "getString", "isNotEmpty", "getString", "setSize", "getString", "getString", "setSize", "getString", "setRequired", "getInt", "setDefaultValue", "getString", "add"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}