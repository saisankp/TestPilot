{"test_class": {"identifier": "RestxRoutingTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final StdRoute ROUTE = new StdRoute(\"R1\", new StdRestxRequestMatcher(\"GET\", \"/test\")) {\n        @Override\n        public void handle(RestxRequestMatch match, RestxRequest req, RestxResponse resp, RestxContext ctx) throws IOException {\n        }\n\n        public String getName() {\n            return \"ROUTE\";\n        }\n    };", "modifier": "public static final", "type": "StdRoute", "declarator": "ROUTE = new StdRoute(\"R1\", new StdRestxRequestMatcher(\"GET\", \"/test\")) {\n        @Override\n        public void handle(RestxRequestMatch match, RestxRequest req, RestxResponse resp, RestxContext ctx) throws IOException {\n        }\n\n        public String getName() {\n            return \"ROUTE\";\n        }\n    }", "var_name": "ROUTE"}], "file": "restx-core/src/test/java/restx/RestxRoutingTest.java"}, "test_case": {"identifier": "should_match_with_filters_in_order", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_match_with_filters_in_order() throws Exception {\n        RestxRouting routing = new RestxRouting(\n                ImmutableList.of(\n                        NamedComponent.of(RestxFilter.class, \"F1\", 0, new TestFilter(\"F1\"))),\n                ImmutableList.of(\n                        NamedComponent.of(RestxRouteFilter.class, \"RF1\", -10, new TestRouteFilter(\"RF1\")),\n                        NamedComponent.of(RestxRouteFilter.class, \"RF2\", 10, new TestRouteFilter(\"RF2\"))\n                ),\n                ImmutableList.<RestxRoute>of(ROUTE)\n        );\n\n        Optional<Match> m = routing.match(StdRequest.builder()\n                .setHttpMethod(\"GET\").setRestxPath(\"/test\").setBaseUri(\"http://localhost/api\").build());\n\n        assertThat(m.isPresent()).isTrue();\n        assertThat(m.get().getMatches()).extracting(\"handler.name\")\n                .containsExactly(\"RF1\", \"F1\", \"RF2\", \"ROUTE\");\n    }", "signature": "void should_match_with_filters_in_order()", "full_signature": "@Test public void should_match_with_filters_in_order()", "class_method_signature": "RestxRoutingTest.should_match_with_filters_in_order()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "of", "of", "match", "build", "setBaseUri", "setRestxPath", "setHttpMethod", "builder", "isTrue", "assertThat", "isPresent", "containsExactly", "extracting", "assertThat", "getMatches", "get"]}, "focal_class": {"identifier": "RestxRouting", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ImmutableList<NamedComponent<RestxFilter>> filters;", "modifier": "private final", "type": "ImmutableList<NamedComponent<RestxFilter>>", "declarator": "filters", "var_name": "filters"}, {"original_string": "private final ImmutableMultimap<RestxRoute, NamedComponent<RestxHandlerMatch>> routeFilters;", "modifier": "private final", "type": "ImmutableMultimap<RestxRoute, NamedComponent<RestxHandlerMatch>>", "declarator": "routeFilters", "var_name": "routeFilters"}, {"original_string": "private final ImmutableList<RestxRoute> routes;", "modifier": "private final", "type": "ImmutableList<RestxRoute>", "declarator": "routes", "var_name": "routes"}], "methods": [{"identifier": "RestxRouting", "parameters": "(ImmutableList<NamedComponent<RestxFilter>> filters,\n                        ImmutableList<NamedComponent<RestxRouteFilter>> routeFilters,\n                        ImmutableList<RestxRoute> routes)", "modifiers": "public", "return": "", "signature": " RestxRouting(ImmutableList<NamedComponent<RestxFilter>> filters,\n                        ImmutableList<NamedComponent<RestxRouteFilter>> routeFilters,\n                        ImmutableList<RestxRoute> routes)", "full_signature": "public  RestxRouting(ImmutableList<NamedComponent<RestxFilter>> filters,\n                        ImmutableList<NamedComponent<RestxRouteFilter>> routeFilters,\n                        ImmutableList<RestxRoute> routes)", "class_method_signature": "RestxRouting.RestxRouting(ImmutableList<NamedComponent<RestxFilter>> filters,\n                        ImmutableList<NamedComponent<RestxRouteFilter>> routeFilters,\n                        ImmutableList<RestxRoute> routes)", "testcase": false, "constructor": true}, {"identifier": "getFilters", "parameters": "()", "modifiers": "public", "return": "ImmutableList<RestxFilter>", "signature": "ImmutableList<RestxFilter> getFilters()", "full_signature": "public ImmutableList<RestxFilter> getFilters()", "class_method_signature": "RestxRouting.getFilters()", "testcase": false, "constructor": false}, {"identifier": "getRouteFilters", "parameters": "(RestxRoute route)", "modifiers": "public", "return": "ImmutableCollection<? extends RestxHandlerMatch>", "signature": "ImmutableCollection<? extends RestxHandlerMatch> getRouteFilters(RestxRoute route)", "full_signature": "public ImmutableCollection<? extends RestxHandlerMatch> getRouteFilters(RestxRoute route)", "class_method_signature": "RestxRouting.getRouteFilters(RestxRoute route)", "testcase": false, "constructor": false}, {"identifier": "getRoutes", "parameters": "()", "modifiers": "public", "return": "ImmutableList<RestxRoute>", "signature": "ImmutableList<RestxRoute> getRoutes()", "full_signature": "public ImmutableList<RestxRoute> getRoutes()", "class_method_signature": "RestxRouting.getRoutes()", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(RestxRequest restxRequest)", "modifiers": "public", "return": "Optional<Match>", "signature": "Optional<Match> match(RestxRequest restxRequest)", "full_signature": "public Optional<Match> match(RestxRequest restxRequest)", "class_method_signature": "RestxRouting.match(RestxRequest restxRequest)", "testcase": false, "constructor": false}], "file": "restx-core/src/main/java/restx/RestxRouting.java"}, "focal_method": {"identifier": "match", "parameters": "(RestxRequest restxRequest)", "modifiers": "public", "return": "Optional<Match>", "body": "public Optional<Match> match(RestxRequest restxRequest) {\n        for (RestxRoute route : routes) {\n            Optional<? extends RestxHandlerMatch> match = route.match(restxRequest);\n            if (match.isPresent()) {\n                // here we need to:\n                // - check which filters apply\n                // - order all filters (route filters and regular filters) by priority\n                // so we put all matches as NamedComponents (to preserve the filter priority) in a list,\n                // and finally sort the list by priority before returning it as a Match\n                ImmutableCollection<NamedComponent<RestxHandlerMatch>> routeFilters = this.routeFilters.get(route);\n\n                List<NamedComponent<RestxHandlerMatch>> matches = Lists.newArrayListWithCapacity(\n                        filters.size() + routeFilters.size() + 1);\n                matches.addAll(routeFilters);\n\n                for (NamedComponent<RestxFilter> filter : filters) {\n                    Optional<? extends RestxHandlerMatch> filterMatch = filter.getComponent().match(restxRequest);\n                    if (filterMatch.isPresent()) {\n                        matches.add(NamedComponent.of(\n                                RestxHandlerMatch.class, filter.getName().getName(),\n                                filter.getPriority(), filterMatch.get()));\n                    }\n                }\n\n                return Optional.of(new Match(\n                        ImmutableList.<RestxHandlerMatch>builder()\n                                .addAll(\n                                        transform(Ordering.from(Factory.NAMED_COMPONENT_COMPARATOR).sortedCopy(matches),\n                                                NamedComponent.<RestxHandlerMatch>toComponent()))\n                                .add(match.get())\n                                .build(),\n                        match));\n            }\n        }\n        return Optional.absent();\n    }", "signature": "Optional<Match> match(RestxRequest restxRequest)", "full_signature": "public Optional<Match> match(RestxRequest restxRequest)", "class_method_signature": "RestxRouting.match(RestxRequest restxRequest)", "testcase": false, "constructor": false, "invocations": ["match", "isPresent", "get", "newArrayListWithCapacity", "size", "size", "addAll", "match", "getComponent", "isPresent", "add", "of", "getName", "getName", "getPriority", "get", "of", "build", "add", "addAll", "builder", "transform", "sortedCopy", "from", "toComponent", "get", "absent"]}, "repository": {"repo_id": 9836833, "url": "https://github.com/restx/restx", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 433, "size": 7896, "license": "licensed"}}