{"test_class": {"identifier": "PairTest", "superclass": "", "interfaces": "", "fields": [], "file": "OcavaCore/src/test/java/com/ocadotechnology/wrappers/PairTest.java"}, "test_case": {"identifier": "mapA", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mapA() {\n        Pair<Double, String> expectedResult = Pair.of(2.5, \"a\");\n        Optional<Pair<Integer, String>> boxedPair = Optional.of(Pair.of(1, \"a\"));\n\n        Pair<Double, String> result = boxedPair.map(Pair.mapA(a -> a + 1.5)).get();\n\n        assertEquals(expectedResult, result);\n    }", "signature": "void mapA()", "full_signature": "@Test public void mapA()", "class_method_signature": "PairTest.mapA()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "get", "map", "mapA", "assertEquals"]}, "focal_class": {"identifier": "Pair", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "public final A a;", "modifier": "public final", "type": "A", "declarator": "a", "var_name": "a"}, {"original_string": "public final B b;", "modifier": "public final", "type": "B", "declarator": "b", "var_name": "b"}], "methods": [{"identifier": "Pair", "parameters": "(A a, B b)", "modifiers": "private", "return": "", "signature": " Pair(A a, B b)", "full_signature": "private  Pair(A a, B b)", "class_method_signature": "Pair.Pair(A a, B b)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(A a, B b)", "modifiers": "public static", "return": "Pair<A, B>", "signature": "Pair<A, B> of(A a, B b)", "full_signature": "public static Pair<A, B> of(A a, B b)", "class_method_signature": "Pair.of(A a, B b)", "testcase": false, "constructor": false}, {"identifier": "fromEntry", "parameters": "(Map.Entry<A, B> entry)", "modifiers": "public static", "return": "Pair<A, B>", "signature": "Pair<A, B> fromEntry(Map.Entry<A, B> entry)", "full_signature": "public static Pair<A, B> fromEntry(Map.Entry<A, B> entry)", "class_method_signature": "Pair.fromEntry(Map.Entry<A, B> entry)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(BiFunction<A, B, C> f)", "modifiers": "public static", "return": "Function<Pair<A, B>, C>", "signature": "Function<Pair<A, B>, C> map(BiFunction<A, B, C> f)", "full_signature": "public static Function<Pair<A, B>, C> map(BiFunction<A, B, C> f)", "class_method_signature": "Pair.map(BiFunction<A, B, C> f)", "testcase": false, "constructor": false}, {"identifier": "mapA", "parameters": "(Function<A, C> f)", "modifiers": "public static", "return": "Function<Pair<A, B>, Pair<C, B>>", "signature": "Function<Pair<A, B>, Pair<C, B>> mapA(Function<A, C> f)", "full_signature": "public static Function<Pair<A, B>, Pair<C, B>> mapA(Function<A, C> f)", "class_method_signature": "Pair.mapA(Function<A, C> f)", "testcase": false, "constructor": false}, {"identifier": "mapB", "parameters": "(Function<B, C> f)", "modifiers": "public static", "return": "Function<Pair<A, B>, Pair<A, C>>", "signature": "Function<Pair<A, B>, Pair<A, C>> mapB(Function<B, C> f)", "full_signature": "public static Function<Pair<A, B>, Pair<A, C>> mapB(Function<B, C> f)", "class_method_signature": "Pair.mapB(Function<B, C> f)", "testcase": false, "constructor": false}, {"identifier": "a", "parameters": "()", "modifiers": "public", "return": "A", "signature": "A a()", "full_signature": "public A a()", "class_method_signature": "Pair.a()", "testcase": false, "constructor": false}, {"identifier": "b", "parameters": "()", "modifiers": "public", "return": "B", "signature": "B b()", "full_signature": "public B b()", "class_method_signature": "Pair.b()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Pair.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Pair.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Pair.toString()", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/wrappers/Pair.java"}, "focal_method": {"identifier": "mapA", "parameters": "(Function<A, C> f)", "modifiers": "public static", "return": "Function<Pair<A, B>, Pair<C, B>>", "body": "public static <A, B, C> Function<Pair<A, B>, Pair<C, B>> mapA(Function<A, C> f) {\n        return p -> Pair.of(f.apply(p.a), p.b);\n    }", "signature": "Function<Pair<A, B>, Pair<C, B>> mapA(Function<A, C> f)", "full_signature": "public static Function<Pair<A, B>, Pair<C, B>> mapA(Function<A, C> f)", "class_method_signature": "Pair.mapA(Function<A, C> f)", "testcase": false, "constructor": false, "invocations": ["of", "apply"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}