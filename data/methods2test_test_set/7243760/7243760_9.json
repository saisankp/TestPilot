{"test_class": {"identifier": "TradingWeekImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String TEST = \"TEST\";", "modifier": "private final", "type": "String", "declarator": "TEST = \"TEST\"", "var_name": "TEST"}, {"original_string": "private final String TEST3 = \"TEST3\";", "modifier": "private final", "type": "String", "declarator": "TEST3 = \"TEST3\"", "var_name": "TEST3"}, {"original_string": "private static Properties DEFAULT_PROPS;", "modifier": "private static", "type": "Properties", "declarator": "DEFAULT_PROPS", "var_name": "DEFAULT_PROPS"}, {"original_string": "public static TradingWeek DEFAULT;", "modifier": "public static", "type": "TradingWeek", "declarator": "DEFAULT", "var_name": "DEFAULT"}], "file": "series/src/test/java/com/barchart/feed/series/TradingWeekImplTest.java"}, "test_case": {"identifier": "testGetPreviousSessionDate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPreviousSessionDate() {\n        //Test recession to preceding week\n        DateTime testDate = new DateTime(2009, 5, 5, 0, 0, 0, 999);//Tuesday, May 5th\n        TradingWeek tradingWeek = getTestTradingWeek(TEST3); //Trading Week includes only Tue, Wed, Thur\n        Period tu = new Period(PeriodType.DAY, 1);\n        DateTime previousDate = tradingWeek.getPreviousSessionDate(testDate, tu);\n        assertEquals(\"2009-04-30T15:30:00.000\", noZone(previousDate.toString()));\n        \n        testDate = new DateTime(2009, 5, 4, 0, 0, 0, 999);//Monday, May 4th\n        previousDate = tradingWeek.getPreviousSessionDate(testDate, tu);\n        assertEquals(\"2009-04-30T15:30:00.000\", noZone(previousDate.toString()));\n        \n        testDate = new DateTime(2009, 5, 3, 0, 0, 0, 999);//Sunday, May 3rd\n        previousDate = tradingWeek.getPreviousSessionDate(testDate, tu);\n        assertEquals(\"2009-04-30T15:30:00.000\", noZone(previousDate.toString()));\n        \n        testDate = new DateTime(2009, 5, 2, 0, 0, 0, 999);//Saturday, May 2nd\n        previousDate = tradingWeek.getPreviousSessionDate(testDate, tu);\n        assertEquals(\"2009-04-30T15:30:00.000\", noZone(previousDate.toString()));\n        \n        testDate = new DateTime(2009, 5, 1, 0, 0, 0, 999);//Friday, May 1st\n        previousDate = tradingWeek.getPreviousSessionDate(testDate, tu);\n        //Due to the test date being midnight, the last session of 04-30 doesn't contain\n        //the time and so the previous session to that is returned. As opposed to the\n        //test below which tests for an actual valid session time.\n        assertEquals(\"2009-04-29T15:30:00.000\", noZone(previousDate.toString()));\n        \n        //Adjustment which correlates to the discussion above\n        testDate = new DateTime(2009, 5, 1, 12, 0, 0, 999);//Friday, May 1st\n        previousDate = tradingWeek.getPreviousSessionDate(testDate, tu);\n        assertEquals(\"2009-04-30T15:30:00.000\", noZone(previousDate.toString()));\n        \n        ///////////////////////////////////////////////////\n        \n        tradingWeek = getTestTradingWeek(TEST);\n        \n        testDate = new DateTime(2009, 5, 1, 12, 0, 0, 999);//Friday, May 1st\n        \n        tu = new Period(PeriodType.YEAR, 1);\n        previousDate = tradingWeek.getPreviousSessionDate(testDate, tu);\n        assertEquals(\"2008-12-31T15:30:00.000\", noZone(previousDate.toString()));\n        \n        tu = new Period(PeriodType.QUARTER, 1);\n        previousDate = tradingWeek.getPreviousSessionDate(testDate, tu);\n        assertEquals(\"2009-03-31T15:30:00.000\", noZone(previousDate.toString()));\n        \n        tu = new Period(PeriodType.MONTH, 1);\n        previousDate = tradingWeek.getPreviousSessionDate(testDate, tu);\n        assertEquals(\"2009-04-30T15:30:00.000\", noZone(previousDate.toString()));\n        \n        tu = new Period(PeriodType.WEEK, 1);\n        previousDate = tradingWeek.getPreviousSessionDate(testDate, tu);\n        //Advances to the end of the week so not 04-24\n        assertEquals(\"2009-04-25T15:30:00.000\", noZone(previousDate.toString()));\n        \n        tu = new Period(PeriodType.DAY, 1);\n        previousDate = tradingWeek.getPreviousSessionDate(testDate, tu);\n        assertEquals(\"2009-04-30T15:30:00.000\", noZone(previousDate.toString()));\n        \n        testDate = new DateTime(2009, 5, 1, 8, 30, 0, 999);\n        tu = new Period(PeriodType.HOUR, 1);\n        previousDate = tradingWeek.getPreviousSessionDate(testDate, tu);\n        //Tests rollunder\n        assertEquals(\"2009-04-30T15:30:00.000\", noZone(previousDate.toString()));\n        \n        testDate = new DateTime(2009, 5, 1, 9, 30, 0, 999);\n        tu = new Period(PeriodType.HOUR, 1);\n        previousDate = tradingWeek.getPreviousSessionDate(testDate, tu);\n        assertEquals(\"2009-05-01T08:30:00.000\", noZone(previousDate.toString()));\n        \n        tu = new Period(PeriodType.MINUTE, 1);\n        previousDate = tradingWeek.getPreviousSessionDate(testDate, tu);\n        assertEquals(\"2009-05-01T09:29:00.000\", noZone(previousDate.toString()));\n        \n        tu = new Period(PeriodType.SECOND, 1);\n        previousDate = tradingWeek.getPreviousSessionDate(testDate, tu);\n        assertEquals(\"2009-05-01T09:29:59.000\", noZone(previousDate.toString()));\n        \n        //Test recession to preceding week\n        testDate = new DateTime(2009, 5, 1, 12, 0, 0, 999);//Friday, May 1st\n        tradingWeek = getTestTradingWeek(TEST3); //Trading Week includes only Tue, Wed, Thur\n        tu = new Period(PeriodType.DAY, 1);\n        previousDate = tradingWeek.getPreviousSessionDate(testDate, tu);\n        assertEquals(\"2009-04-30T15:30:00.000\", noZone(previousDate.toString()));\n    }", "signature": "void testGetPreviousSessionDate()", "full_signature": "@Test public void testGetPreviousSessionDate()", "class_method_signature": "TradingWeekImplTest.testGetPreviousSessionDate()", "testcase": true, "constructor": false, "invocations": ["getTestTradingWeek", "getPreviousSessionDate", "assertEquals", "noZone", "toString", "getPreviousSessionDate", "assertEquals", "noZone", "toString", "getPreviousSessionDate", "assertEquals", "noZone", "toString", "getPreviousSessionDate", "assertEquals", "noZone", "toString", "getPreviousSessionDate", "assertEquals", "noZone", "toString", "getPreviousSessionDate", "assertEquals", "noZone", "toString", "getTestTradingWeek", "getPreviousSessionDate", "assertEquals", "noZone", "toString", "getPreviousSessionDate", "assertEquals", "noZone", "toString", "getPreviousSessionDate", "assertEquals", "noZone", "toString", "getPreviousSessionDate", "assertEquals", "noZone", "toString", "getPreviousSessionDate", "assertEquals", "noZone", "toString", "getPreviousSessionDate", "assertEquals", "noZone", "toString", "getPreviousSessionDate", "assertEquals", "noZone", "toString", "getPreviousSessionDate", "assertEquals", "noZone", "toString", "getPreviousSessionDate", "assertEquals", "noZone", "toString", "getTestTradingWeek", "getPreviousSessionDate", "assertEquals", "noZone", "toString"]}, "focal_class": {"identifier": "TradingWeekImpl", "superclass": "extends JodaWorkingWeek", "interfaces": "implements TradingWeek", "fields": [{"original_string": "private long weekMillis = -1;", "modifier": "private", "type": "long", "declarator": "weekMillis = -1", "var_name": "weekMillis"}, {"original_string": "private List<TradingSessionImpl> sessions = new ArrayList<TradingSessionImpl>();", "modifier": "private", "type": "List<TradingSessionImpl>", "declarator": "sessions = new ArrayList<TradingSessionImpl>()", "var_name": "sessions"}, {"original_string": "private DateCalculator<LocalDate> calculator;", "modifier": "private", "type": "DateCalculator<LocalDate>", "declarator": "calculator", "var_name": "calculator"}, {"original_string": "public static final TradingWeek DEFAULT;", "modifier": "public static final", "type": "TradingWeek", "declarator": "DEFAULT", "var_name": "DEFAULT"}, {"original_string": "private static final Properties DEFAULT_PROPS;", "modifier": "private static final", "type": "Properties", "declarator": "DEFAULT_PROPS", "var_name": "DEFAULT_PROPS"}], "methods": [{"identifier": "TradingWeekImpl", "parameters": "(byte tradingDays)", "modifiers": "private", "return": "", "signature": " TradingWeekImpl(byte tradingDays)", "full_signature": "private  TradingWeekImpl(byte tradingDays)", "class_method_signature": "TradingWeekImpl.TradingWeekImpl(byte tradingDays)", "testcase": false, "constructor": true}, {"identifier": "configBuilder", "parameters": "(\n        String propertiesFilePath, String calendarName, String tradingWeekName)", "modifiers": "public static", "return": "Builder", "signature": "Builder configBuilder(\n        String propertiesFilePath, String calendarName, String tradingWeekName)", "full_signature": "public static Builder configBuilder(\n        String propertiesFilePath, String calendarName, String tradingWeekName)", "class_method_signature": "TradingWeekImpl.configBuilder(\n        String propertiesFilePath, String calendarName, String tradingWeekName)", "testcase": false, "constructor": false}, {"identifier": "configBuilder", "parameters": "(\n        Properties properties, String calendarName, String tradingWeekName)", "modifiers": "public static", "return": "Builder", "signature": "Builder configBuilder(\n        Properties properties, String calendarName, String tradingWeekName)", "full_signature": "public static Builder configBuilder(\n        Properties properties, String calendarName, String tradingWeekName)", "class_method_signature": "TradingWeekImpl.configBuilder(\n        Properties properties, String calendarName, String tradingWeekName)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int length()", "full_signature": "@Override public int length()", "class_method_signature": "TradingWeekImpl.length()", "testcase": false, "constructor": false}, {"identifier": "addTradingSession", "parameters": "(TradingSession session)", "modifiers": "@Override public", "return": "void", "signature": "void addTradingSession(TradingSession session)", "full_signature": "@Override public void addTradingSession(TradingSession session)", "class_method_signature": "TradingWeekImpl.addTradingSession(TradingSession session)", "testcase": false, "constructor": false}, {"identifier": "getStartSession", "parameters": "()", "modifiers": "@Override public", "return": "TradingSession", "signature": "TradingSession getStartSession()", "full_signature": "@Override public TradingSession getStartSession()", "class_method_signature": "TradingWeekImpl.getStartSession()", "testcase": false, "constructor": false}, {"identifier": "getEndSession", "parameters": "()", "modifiers": "@Override public", "return": "TradingSession", "signature": "TradingSession getEndSession()", "full_signature": "@Override public TradingSession getEndSession()", "class_method_signature": "TradingWeekImpl.getEndSession()", "testcase": false, "constructor": false}, {"identifier": "getTradingDaysInMonth", "parameters": "(DateTime dt)", "modifiers": "@Override public", "return": "int", "signature": "int getTradingDaysInMonth(DateTime dt)", "full_signature": "@Override public int getTradingDaysInMonth(DateTime dt)", "class_method_signature": "TradingWeekImpl.getTradingDaysInMonth(DateTime dt)", "testcase": false, "constructor": false}, {"identifier": "isTradingDay", "parameters": "(DateTime dt)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isTradingDay(DateTime dt)", "full_signature": "@Override public boolean isTradingDay(DateTime dt)", "class_method_signature": "TradingWeekImpl.isTradingDay(DateTime dt)", "testcase": false, "constructor": false}, {"identifier": "getSessionTradingDate", "parameters": "(DateTime dt)", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime getSessionTradingDate(DateTime dt)", "full_signature": "@Override public DateTime getSessionTradingDate(DateTime dt)", "class_method_signature": "TradingWeekImpl.getSessionTradingDate(DateTime dt)", "testcase": false, "constructor": false}, {"identifier": "setWeekMillis", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setWeekMillis()", "full_signature": "private void setWeekMillis()", "class_method_signature": "TradingWeekImpl.setWeekMillis()", "testcase": false, "constructor": false}, {"identifier": "getWeekMillis", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getWeekMillis()", "full_signature": "@Override public long getWeekMillis()", "class_method_signature": "TradingWeekImpl.getWeekMillis()", "testcase": false, "constructor": false}, {"identifier": "getSessionMillisBetween", "parameters": "(DateTime dt1, DateTime dt2)", "modifiers": "@Override public", "return": "long", "signature": "long getSessionMillisBetween(DateTime dt1, DateTime dt2)", "full_signature": "@Override public long getSessionMillisBetween(DateTime dt1, DateTime dt2)", "class_method_signature": "TradingWeekImpl.getSessionMillisBetween(DateTime dt1, DateTime dt2)", "testcase": false, "constructor": false}, {"identifier": "getTradingSessionOnOrBefore", "parameters": "(DateTime date)", "modifiers": "public", "return": "TradingSession", "signature": "TradingSession getTradingSessionOnOrBefore(DateTime date)", "full_signature": "public TradingSession getTradingSessionOnOrBefore(DateTime date)", "class_method_signature": "TradingWeekImpl.getTradingSessionOnOrBefore(DateTime date)", "testcase": false, "constructor": false}, {"identifier": "getPreviousSessionDate", "parameters": "(DateTime dt, Period period)", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime getPreviousSessionDate(DateTime dt, Period period)", "full_signature": "@Override public DateTime getPreviousSessionDate(DateTime dt, Period period)", "class_method_signature": "TradingWeekImpl.getPreviousSessionDate(DateTime dt, Period period)", "testcase": false, "constructor": false}, {"identifier": "getTradingSessionOnOrAfter", "parameters": "(DateTime date)", "modifiers": "@Override public", "return": "TradingSession", "signature": "TradingSession getTradingSessionOnOrAfter(DateTime date)", "full_signature": "@Override public TradingSession getTradingSessionOnOrAfter(DateTime date)", "class_method_signature": "TradingWeekImpl.getTradingSessionOnOrAfter(DateTime date)", "testcase": false, "constructor": false}, {"identifier": "getNextSessionDate", "parameters": "(DateTime dt, Period period)", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime getNextSessionDate(DateTime dt, Period period)", "full_signature": "@Override public DateTime getNextSessionDate(DateTime dt, Period period)", "class_method_signature": "TradingWeekImpl.getNextSessionDate(DateTime dt, Period period)", "testcase": false, "constructor": false}, {"identifier": "loadDefaultTradingWeek", "parameters": "()", "modifiers": "public static", "return": "TradingWeek", "signature": "TradingWeek loadDefaultTradingWeek()", "full_signature": "public static TradingWeek loadDefaultTradingWeek()", "class_method_signature": "TradingWeekImpl.loadDefaultTradingWeek()", "testcase": false, "constructor": false}, {"identifier": "isWorkingDay", "parameters": "(LocalDate date)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWorkingDay(LocalDate date)", "full_signature": "@Override public boolean isWorkingDay(LocalDate date)", "class_method_signature": "TradingWeekImpl.isWorkingDay(LocalDate date)", "testcase": false, "constructor": false}, {"identifier": "naturalDaysBetween", "parameters": "(int startDay, int endDay)", "modifiers": "public static", "return": "int", "signature": "int naturalDaysBetween(int startDay, int endDay)", "full_signature": "public static int naturalDaysBetween(int startDay, int endDay)", "class_method_signature": "TradingWeekImpl.naturalDaysBetween(int startDay, int endDay)", "testcase": false, "constructor": false}, {"identifier": "dayToString", "parameters": "(int day)", "modifiers": "public static", "return": "String", "signature": "String dayToString(int day)", "full_signature": "public static String dayToString(int day)", "class_method_signature": "TradingWeekImpl.dayToString(int day)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TradingWeekImpl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "TradingWeekImpl.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equalSessions", "parameters": "(List<TradingSessionImpl> l)", "modifiers": "private", "return": "boolean", "signature": "boolean equalSessions(List<TradingSessionImpl> l)", "full_signature": "private boolean equalSessions(List<TradingSessionImpl> l)", "class_method_signature": "TradingWeekImpl.equalSessions(List<TradingSessionImpl> l)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TradingWeekImpl.toString()", "testcase": false, "constructor": false}], "file": "series/src/main/java/com/barchart/feed/series/TradingWeekImpl.java"}, "focal_method": {"identifier": "getPreviousSessionDate", "parameters": "(DateTime dt, Period period)", "modifiers": "@Override public", "return": "DateTime", "body": "@Override\n    public DateTime getPreviousSessionDate(DateTime dt, Period period) {\n        if(dt == null) {\n            return null;\n        }\n        int interval = period.size();\n        PeriodType periodType = period.getPeriodType();\n        dt = dt.millisOfSecond().withMinimumValue();\n        TradingSession tradingSession = getTradingSessionOnOrBefore(dt);\n        boolean skip = false;\n        switch(periodType) {\n            case YEAR: {\n                dt = dt.minusYears(interval).monthOfYear().withMaximumValue();\n                dt = dt.dayOfMonth().withMaximumValue();\n                skip = true;\n            }\n            case QUARTER: {\n                if(!skip) {\n                \tLocalTime lt = dt.toLocalTime();\n                    dt = ExtendedChronology.withPeriodEnd(dt).minusMonths(3 * interval).dayOfMonth().withMaximumValue();\n                    dt = dt.withHourOfDay(lt.getHourOfDay()).withMinuteOfHour(lt.getMinuteOfHour()).\n                    \twithSecondOfMinute(lt.getSecondOfMinute());\n                    skip = true;\n                }\n            }\n            case MONTH: {\n                if(!skip) {\n                \tdt = dt.minusMonths(interval);\n                    dt = dt.dayOfMonth().withMaximumValue();\n                    skip = true;\n                }\n            }\n            case WEEK: {\n                if(!skip) {\n                \tdt = dt.minusWeeks(interval);\n                    dt = dt.withDayOfWeek(getEndSession().day());\n                    skip = true;\n                }\n            }\n            case DAY: {\n                if(periodType != PeriodType.WEEK) {\n                    dt = skip ? dt :  dt.minusDays(interval);\n                    tradingSession = getTradingSessionOnOrBefore(dt);\n                    if(tradingSession.day() > dt.getDayOfWeek()) {\n                        dt = dt.minusDays((DateTimeConstants.SUNDAY - dt.getDayOfWeek()) + 1);\n                    }\n                    dt = dt.withDayOfWeek(tradingSession.day());\n                    skip = true;\n                }\n            }\n            case HOUR: {\n                if(skip) {\n                    LocalTime lt = tradingSession.end();\n                    dt = dt.withHourOfDay(lt.getHourOfDay());\n                }else{\n                    dt = dt.minusHours(interval);\n                    tradingSession = getTradingSessionOnOrBefore(dt);\n                    if(!tradingSession.contains(dt)) {\n                        if(tradingSession.day() > dt.getDayOfWeek()) {\n                            dt = dt.minusDays((DateTimeConstants.SUNDAY - dt.getDayOfWeek()) + 1);\n                        }\n                        dt = dt.withDayOfWeek(tradingSession.day());\n                        dt = dt.withHourOfDay(tradingSession.end().getHourOfDay());\n                    }\n                    skip = true;\n                }\n            }\n            case MINUTE: {\n                if(skip) {\n                    LocalTime lt = tradingSession.end();\n                    dt = dt.withMinuteOfHour(lt.getMinuteOfHour());\n                }else{\n                    dt = dt.minusMinutes(interval);\n                    tradingSession = getTradingSessionOnOrBefore(dt);\n                    if(!tradingSession.contains(dt)) {\n                        if(tradingSession.day() > dt.getDayOfWeek()) {\n                            dt = dt.minusDays((DateTimeConstants.SUNDAY - dt.getDayOfWeek()) + 1);\n                        }\n                        dt = dt.withDayOfWeek(tradingSession.day());\n                        LocalTime lt = tradingSession.end();\n                        dt = dt.withHourOfDay(lt.getHourOfDay()).withMinuteOfHour(lt.getMinuteOfHour());\n                    }\n                    skip = true;\n                }\n            }\n            case SECOND: {\n                if(skip) {\n                    dt = dt.withSecondOfMinute(0);\n                }else{\n                    dt = dt.minusSeconds(interval);\n                    tradingSession = getTradingSessionOnOrBefore(dt);\n                    if(!tradingSession.contains(dt)) {\n                        if(tradingSession.day() > dt.getDayOfWeek()) {\n                            dt = dt.plusDays((DateTimeConstants.SUNDAY - dt.getDayOfWeek()) + 1);\n                        }\n                        dt = dt.withDayOfWeek(tradingSession.day());\n                        LocalTime lt = tradingSession.end();\n                        dt = dt.withHourOfDay(lt.getHourOfDay()).withMinuteOfHour(lt.getMinuteOfHour());\n                        dt = dt.withSecondOfMinute(0);\n                    }\n                }\n                \n                // Guarantee new date is aligned to a business date.\n                calculator.setStartDate(dt.toLocalDate());\n                LocalDate ldt = calculator.getCurrentBusinessDate();\n                if(!ldt.isEqual(dt.toLocalDate())) {\n                    tradingSession = getTradingSessionOnOrBefore(ldt.toDateTime(dt.toLocalTime()));\n                    if(tradingSession.day() > dt.getDayOfWeek()) {\n                        dt = dt.minusDays((DateTimeConstants.SUNDAY - dt.getDayOfWeek()) + 1);\n                    }\n                    dt = dt.withDayOfWeek(tradingSession.day());\n                    LocalTime lt = tradingSession.end();\n                    dt = dt.withHourOfDay(lt.getHourOfDay()).withMinuteOfHour(lt.getMinuteOfHour()).withSecondOfMinute(0);\n                }\n                break;\n            }\n            case TICK: {\n                if(!tradingSession.contains(dt)) {\n                    tradingSession = getTradingSessionOnOrBefore(dt);\n                    if(tradingSession.day() > dt.getDayOfWeek()) {\n                        dt = dt.plusDays((DateTimeConstants.SUNDAY - dt.getDayOfWeek()) + 1);\n                    }\n                    dt = dt.withDayOfWeek(tradingSession.day());\n                    LocalTime lt = tradingSession.end();\n                    dt = dt.withHourOfDay(lt.getHourOfDay()).withMinuteOfHour(lt.getMinuteOfHour());\n                    dt = dt.withSecondOfMinute(lt.getSecondOfMinute()).withMillisOfSecond(0);\n                }\n            }\n            \n            \n        }\n        return dt;\n    }", "signature": "DateTime getPreviousSessionDate(DateTime dt, Period period)", "full_signature": "@Override public DateTime getPreviousSessionDate(DateTime dt, Period period)", "class_method_signature": "TradingWeekImpl.getPreviousSessionDate(DateTime dt, Period period)", "testcase": false, "constructor": false, "invocations": ["size", "getPeriodType", "withMinimumValue", "millisOfSecond", "getTradingSessionOnOrBefore", "withMaximumValue", "monthOfYear", "minusYears", "withMaximumValue", "dayOfMonth", "toLocalTime", "withMaximumValue", "dayOfMonth", "minusMonths", "withPeriodEnd", "withSecondOfMinute", "withMinuteOfHour", "withHourOfDay", "getHourOfDay", "getMinuteOfHour", "getSecondOfMinute", "minusMonths", "withMaximumValue", "dayOfMonth", "minusWeeks", "withDayOfWeek", "day", "getEndSession", "minusDays", "getTradingSessionOnOrBefore", "day", "getDayOfWeek", "minusDays", "getDayOfWeek", "withDayOfWeek", "day", "end", "withHourOfDay", "getHourOfDay", "minusHours", "getTradingSessionOnOrBefore", "contains", "day", "getDayOfWeek", "minusDays", "getDayOfWeek", "withDayOfWeek", "day", "withHourOfDay", "getHourOfDay", "end", "end", "withMinuteOfHour", "getMinuteOfHour", "minusMinutes", "getTradingSessionOnOrBefore", "contains", "day", "getDayOfWeek", "minusDays", "getDayOfWeek", "withDayOfWeek", "day", "end", "withMinuteOfHour", "withHourOfDay", "getHourOfDay", "getMinuteOfHour", "withSecondOfMinute", "minusSeconds", "getTradingSessionOnOrBefore", "contains", "day", "getDayOfWeek", "plusDays", "getDayOfWeek", "withDayOfWeek", "day", "end", "withMinuteOfHour", "withHourOfDay", "getHourOfDay", "getMinuteOfHour", "withSecondOfMinute", "setStartDate", "toLocalDate", "getCurrentBusinessDate", "isEqual", "toLocalDate", "getTradingSessionOnOrBefore", "toDateTime", "toLocalTime", "day", "getDayOfWeek", "minusDays", "getDayOfWeek", "withDayOfWeek", "day", "end", "withSecondOfMinute", "withMinuteOfHour", "withHourOfDay", "getHourOfDay", "getMinuteOfHour", "contains", "getTradingSessionOnOrBefore", "day", "getDayOfWeek", "plusDays", "getDayOfWeek", "withDayOfWeek", "day", "end", "withMinuteOfHour", "withHourOfDay", "getHourOfDay", "getMinuteOfHour", "withMillisOfSecond", "withSecondOfMinute", "getSecondOfMinute"]}, "repository": {"repo_id": 7243760, "url": "https://github.com/barchart/barchart-feed", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 64172, "license": "licensed"}}