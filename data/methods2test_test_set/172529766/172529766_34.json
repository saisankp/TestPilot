{"test_class": {"identifier": "PlaylistServiceTest", "superclass": "extends PrimeTimeTest", "interfaces": "", "fields": [{"original_string": "private PageService pageService;", "modifier": "private", "type": "PageService", "declarator": "pageService", "var_name": "pageService"}, {"original_string": "private PlaylistService playlistService;", "modifier": "private", "type": "PlaylistService", "declarator": "playlistService", "var_name": "playlistService"}, {"original_string": "private ScreenService screenService;", "modifier": "private", "type": "ScreenService", "declarator": "screenService", "var_name": "screenService"}, {"original_string": "private FileService fileService;", "modifier": "private", "type": "FileService", "declarator": "fileService", "var_name": "fileService"}], "file": "common/app/src/test/java/com/sap/primetime/api/PlaylistServiceTest.java"}, "test_case": {"identifier": "testAddPlaylist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddPlaylist() throws Exception {\n\t\tPage page1 = pageService.createPage(new Page(\"p1\"));\n\t\tPage page2 = pageService.createPage(new Page(\"p2\"));\n\t\tPage page3 = pageService.createPage(new Page(\"p3\"));\n\n\t\tPlaylist playlist1 = new Playlist(\"d1\");\n\t\tplaylist1.addPageReference(new PageReference(page1));\n\t\tplaylist1 = playlistService.createPlaylist(playlist1);\n\t\tassertEquals(1, playlistService.getPlaylist(playlist1.getId(), false, false, true).getPageReferences().size());\n\n\t\tPlaylist playlist2 = new Playlist(\"d2\");\n\t\tplaylist2.addPageReference(new PageReference(page2));\n\t\tplaylist2.addPageReference(new PageReference(page3));\n\t\tplaylist2 = playlistService.createPlaylist(playlist2);\n\t\tassertEquals(2, playlistService.getPlaylist(playlist2.getId(), false, false, true).getPageReferences().size());\n\n\t\tplaylist1 = playlistService.addPlaylist(playlist1.getId(), playlist2);\n\n\t\tList<PageReference> pageReferences = getPlaylist(playlist1.getId()).getPageReferences();\n\t\tassertEquals(2, pageReferences.size());\n\t\tassertEquals(PageRefType.PAGE, pageReferences.get(0).getRefType());\n\t\tassertEquals(PageRefType.PLAYLIST, pageReferences.get(1).getRefType());\n\n\t\t// expand must return all pages\n\t\tpageReferences = playlistService.getPlaylist(playlist1.getId(), false, true, true).getPageReferences();\n\t\tassertEquals(3, pageReferences.size());\n\n\t\tplaylist1 = playlistService.addPlaylist(playlist1.getId(), playlist2);\n\t\tpageReferences = playlistService.getPlaylist(playlist1.getId(), false, true, true).getPageReferences();\n\t\tassertEquals(5, pageReferences.size());\n\n\t\t// recursion must be detected\n\t\tPlaylist playlist3 = new Playlist(\"d3\");\n\t\tplaylist3.addPageReference(new PageReference(playlist1));\n\t\tplaylist3 = playlistService.createPlaylist(playlist3);\n\n\t\tplaylist1 = playlistService.addPlaylist(playlist1.getId(), playlist3);\n\t\tpageReferences = playlistService.getPlaylist(playlist1.getId(), false, true, true).getPageReferences();\n\t\tassertEquals(5, pageReferences.size());\n\t\tassertEquals(\"p1\", pageReferences.get(0).getPage().getName());\n\t\tassertEquals(\"p2\", pageReferences.get(1).getPage().getName());\n\t\tassertEquals(\"p3\", pageReferences.get(2).getPage().getName());\n\t\tassertEquals(\"p2\", pageReferences.get(3).getPage().getName());\n\t\tassertEquals(\"p3\", pageReferences.get(4).getPage().getName());\n\n\t\t// make sure playlist overview can expand\n\t\tList<Playlist> playlists = getPlaylists(false);\n\t\tassertEquals(4, playlists.get(0).getPageReferences().size());\n\t\tassertEquals(2, playlists.get(1).getPageReferences().size());\n\t\tassertEquals(1, playlists.get(2).getPageReferences().size());\n\n\t\tplaylists = getPlaylists(true);\n\t\tassertEquals(5, playlists.get(0).getPageReferences().size());\n\t\tassertEquals(2, playlists.get(1).getPageReferences().size());\n\t\tassertEquals(5, playlists.get(2).getPageReferences().size());\n\n\t\t// make sure screen API always expands\n\t\tScreen screen = new Screen(\"s1\", playlist1);\n\t\tscreen.setKey(\"sk1\");\n\t\tscreen = screenService.createScreen(screen);\n\t\tassertEquals(5, screen.getPlaylist().getPageReferences().size());\n\t\tassertEquals(5, screenService.getScreen(screen.getId(), false, false).getPlaylist().getPageReferences().size());\n\t\tassertEquals(5, screenService.getScreenByKey(\"sk1\", false, false, false, null).getPlaylist().getPageReferences()\n\t\t\t\t.size());\n\t\tassertEquals(5, screenService.getScreens(null).get(0).getPlaylist().getPageReferences().size());\n\n\t\t// make sure update afterward expanding is not broken\n\t\tscreen = screenService.addOwners(screen.getId(), new Owner[] { new Owner(new User(\"i1\")) });\n\t\tassertEquals(5, screenService.getScreen(screen.getId(), false, false).getPlaylist().getPageReferences().size());\n\t}", "signature": "void testAddPlaylist()", "full_signature": "@Test public void testAddPlaylist()", "class_method_signature": "PlaylistServiceTest.testAddPlaylist()", "testcase": true, "constructor": false, "invocations": ["createPage", "createPage", "createPage", "addPageReference", "createPlaylist", "assertEquals", "size", "getPageReferences", "getPlaylist", "getId", "addPageReference", "addPageReference", "createPlaylist", "assertEquals", "size", "getPageReferences", "getPlaylist", "getId", "addPlaylist", "getId", "getPageReferences", "getPlaylist", "getId", "assertEquals", "size", "assertEquals", "getRefType", "get", "assertEquals", "getRefType", "get", "getPageReferences", "getPlaylist", "getId", "assertEquals", "size", "addPlaylist", "getId", "getPageReferences", "getPlaylist", "getId", "assertEquals", "size", "addPageReference", "createPlaylist", "addPlaylist", "getId", "getPageReferences", "getPlaylist", "getId", "assertEquals", "size", "assertEquals", "getName", "getPage", "get", "assertEquals", "getName", "getPage", "get", "assertEquals", "getName", "getPage", "get", "assertEquals", "getName", "getPage", "get", "assertEquals", "getName", "getPage", "get", "getPlaylists", "assertEquals", "size", "getPageReferences", "get", "assertEquals", "size", "getPageReferences", "get", "assertEquals", "size", "getPageReferences", "get", "getPlaylists", "assertEquals", "size", "getPageReferences", "get", "assertEquals", "size", "getPageReferences", "get", "assertEquals", "size", "getPageReferences", "get", "setKey", "createScreen", "assertEquals", "size", "getPageReferences", "getPlaylist", "assertEquals", "size", "getPageReferences", "getPlaylist", "getScreen", "getId", "assertEquals", "size", "getPageReferences", "getPlaylist", "getScreenByKey", "assertEquals", "size", "getPageReferences", "getPlaylist", "get", "getScreens", "addOwners", "getId", "assertEquals", "size", "getPageReferences", "getPlaylist", "getScreen", "getId"]}, "focal_class": {"identifier": "PlaylistService", "superclass": "extends BasicService", "interfaces": "implements OwnerAPISupport<Playlist>", "fields": [], "methods": [{"identifier": "getPlaylists", "parameters": "(@DefaultValue(\"false\") @QueryParam(\"expand\") boolean expand,\n\t\t\t@QueryParam(\"userId\") String userId)", "modifiers": "@GET @Path(\"/playlists\") @Produces(MediaType.APPLICATION_JSON) public", "return": "List<Playlist>", "signature": "List<Playlist> getPlaylists(@DefaultValue(\"false\") @QueryParam(\"expand\") boolean expand,\n\t\t\t@QueryParam(\"userId\") String userId)", "full_signature": "@GET @Path(\"/playlists\") @Produces(MediaType.APPLICATION_JSON) public List<Playlist> getPlaylists(@DefaultValue(\"false\") @QueryParam(\"expand\") boolean expand,\n\t\t\t@QueryParam(\"userId\") String userId)", "class_method_signature": "PlaylistService.getPlaylists(@DefaultValue(\"false\") @QueryParam(\"expand\") boolean expand,\n\t\t\t@QueryParam(\"userId\") String userId)", "testcase": false, "constructor": false}, {"identifier": "getPlaylistCatalog", "parameters": "(@DefaultValue(\"0\") @QueryParam(\"exclude\") long excludeId)", "modifiers": "@GET @Path(\"/catalog\") @Produces(MediaType.APPLICATION_JSON) public", "return": "List<Playlist>", "signature": "List<Playlist> getPlaylistCatalog(@DefaultValue(\"0\") @QueryParam(\"exclude\") long excludeId)", "full_signature": "@GET @Path(\"/catalog\") @Produces(MediaType.APPLICATION_JSON) public List<Playlist> getPlaylistCatalog(@DefaultValue(\"0\") @QueryParam(\"exclude\") long excludeId)", "class_method_signature": "PlaylistService.getPlaylistCatalog(@DefaultValue(\"0\") @QueryParam(\"exclude\") long excludeId)", "testcase": false, "constructor": false}, {"identifier": "getPlaylist", "parameters": "(@PathParam(\"playlistId\") long playlistId,\n\t\t\t@DefaultValue(\"false\") @QueryParam(\"visibleOnly\") boolean visibleOnly,\n\t\t\t@DefaultValue(\"false\") @QueryParam(\"expand\") boolean expand,\n\t\t\t@DefaultValue(\"true\") @QueryParam(\"includeMetrics\") boolean includeMetrics)", "modifiers": "@GET @Path(\"/playlists/{playlistId}\") @Produces(MediaType.APPLICATION_JSON) public", "return": "Playlist", "signature": "Playlist getPlaylist(@PathParam(\"playlistId\") long playlistId,\n\t\t\t@DefaultValue(\"false\") @QueryParam(\"visibleOnly\") boolean visibleOnly,\n\t\t\t@DefaultValue(\"false\") @QueryParam(\"expand\") boolean expand,\n\t\t\t@DefaultValue(\"true\") @QueryParam(\"includeMetrics\") boolean includeMetrics)", "full_signature": "@GET @Path(\"/playlists/{playlistId}\") @Produces(MediaType.APPLICATION_JSON) public Playlist getPlaylist(@PathParam(\"playlistId\") long playlistId,\n\t\t\t@DefaultValue(\"false\") @QueryParam(\"visibleOnly\") boolean visibleOnly,\n\t\t\t@DefaultValue(\"false\") @QueryParam(\"expand\") boolean expand,\n\t\t\t@DefaultValue(\"true\") @QueryParam(\"includeMetrics\") boolean includeMetrics)", "class_method_signature": "PlaylistService.getPlaylist(@PathParam(\"playlistId\") long playlistId,\n\t\t\t@DefaultValue(\"false\") @QueryParam(\"visibleOnly\") boolean visibleOnly,\n\t\t\t@DefaultValue(\"false\") @QueryParam(\"expand\") boolean expand,\n\t\t\t@DefaultValue(\"true\") @QueryParam(\"includeMetrics\") boolean includeMetrics)", "testcase": false, "constructor": false}, {"identifier": "updatePlaylist", "parameters": "(@PathParam(\"playlistId\") long playlistId, Playlist playlistData)", "modifiers": "@PUT @Path(\"/playlists/{playlistId}\") @Produces(MediaType.APPLICATION_JSON) public", "return": "Playlist", "signature": "Playlist updatePlaylist(@PathParam(\"playlistId\") long playlistId, Playlist playlistData)", "full_signature": "@PUT @Path(\"/playlists/{playlistId}\") @Produces(MediaType.APPLICATION_JSON) public Playlist updatePlaylist(@PathParam(\"playlistId\") long playlistId, Playlist playlistData)", "class_method_signature": "PlaylistService.updatePlaylist(@PathParam(\"playlistId\") long playlistId, Playlist playlistData)", "testcase": false, "constructor": false}, {"identifier": "createPlaylist", "parameters": "(Playlist playlist)", "modifiers": "@POST @Path(\"/playlists\") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public", "return": "Playlist", "signature": "Playlist createPlaylist(Playlist playlist)", "full_signature": "@POST @Path(\"/playlists\") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Playlist createPlaylist(Playlist playlist)", "class_method_signature": "PlaylistService.createPlaylist(Playlist playlist)", "testcase": false, "constructor": false}, {"identifier": "addPage", "parameters": "(@PathParam(\"playlistId\") long playlistId, Page page)", "modifiers": "@POST @Path(\"/playlists/{playlistId}/pages\") @Consumes(MediaType.APPLICATION_JSON) public", "return": "Playlist", "signature": "Playlist addPage(@PathParam(\"playlistId\") long playlistId, Page page)", "full_signature": "@POST @Path(\"/playlists/{playlistId}/pages\") @Consumes(MediaType.APPLICATION_JSON) public Playlist addPage(@PathParam(\"playlistId\") long playlistId, Page page)", "class_method_signature": "PlaylistService.addPage(@PathParam(\"playlistId\") long playlistId, Page page)", "testcase": false, "constructor": false}, {"identifier": "addPlaylist", "parameters": "(@PathParam(\"playlistId\") long playlistId, Playlist playlist)", "modifiers": "@POST @Path(\"/playlists/{playlistId}/playlists\") @Consumes(MediaType.APPLICATION_JSON) public", "return": "Playlist", "signature": "Playlist addPlaylist(@PathParam(\"playlistId\") long playlistId, Playlist playlist)", "full_signature": "@POST @Path(\"/playlists/{playlistId}/playlists\") @Consumes(MediaType.APPLICATION_JSON) public Playlist addPlaylist(@PathParam(\"playlistId\") long playlistId, Playlist playlist)", "class_method_signature": "PlaylistService.addPlaylist(@PathParam(\"playlistId\") long playlistId, Playlist playlist)", "testcase": false, "constructor": false}, {"identifier": "addFile", "parameters": "(@PathParam(\"playlistId\") long playlistId, File file)", "modifiers": "@POST @Path(\"/playlists/{playlistId}/files\") @Consumes(MediaType.APPLICATION_JSON) public", "return": "Playlist", "signature": "Playlist addFile(@PathParam(\"playlistId\") long playlistId, File file)", "full_signature": "@POST @Path(\"/playlists/{playlistId}/files\") @Consumes(MediaType.APPLICATION_JSON) public Playlist addFile(@PathParam(\"playlistId\") long playlistId, File file)", "class_method_signature": "PlaylistService.addFile(@PathParam(\"playlistId\") long playlistId, File file)", "testcase": false, "constructor": false}, {"identifier": "updatePageReference", "parameters": "(@PathParam(\"pageRefId\") long pageRefId, PageReference pageRef)", "modifiers": "@PUT @Path(\"/playlists/{playlistId}/pagereferences/{pageRefId}\") @Produces(MediaType.APPLICATION_JSON) public", "return": "PageReference", "signature": "PageReference updatePageReference(@PathParam(\"pageRefId\") long pageRefId, PageReference pageRef)", "full_signature": "@PUT @Path(\"/playlists/{playlistId}/pagereferences/{pageRefId}\") @Produces(MediaType.APPLICATION_JSON) public PageReference updatePageReference(@PathParam(\"pageRefId\") long pageRefId, PageReference pageRef)", "class_method_signature": "PlaylistService.updatePageReference(@PathParam(\"pageRefId\") long pageRefId, PageReference pageRef)", "testcase": false, "constructor": false}, {"identifier": "copyPlaylist", "parameters": "(@PathParam(\"playlistId\") long playlistId, Playlist newPlaylist)", "modifiers": "@POST @Path(\"/playlists/{playlistId}/copy\") @Consumes(MediaType.APPLICATION_JSON) public", "return": "Playlist", "signature": "Playlist copyPlaylist(@PathParam(\"playlistId\") long playlistId, Playlist newPlaylist)", "full_signature": "@POST @Path(\"/playlists/{playlistId}/copy\") @Consumes(MediaType.APPLICATION_JSON) public Playlist copyPlaylist(@PathParam(\"playlistId\") long playlistId, Playlist newPlaylist)", "class_method_signature": "PlaylistService.copyPlaylist(@PathParam(\"playlistId\") long playlistId, Playlist newPlaylist)", "testcase": false, "constructor": false}, {"identifier": "deletePlaylist", "parameters": "(@PathParam(\"playlistId\") long playlistId)", "modifiers": "@DELETE @Path(\"/playlists/{playlistId}\") public", "return": "Response", "signature": "Response deletePlaylist(@PathParam(\"playlistId\") long playlistId)", "full_signature": "@DELETE @Path(\"/playlists/{playlistId}\") public Response deletePlaylist(@PathParam(\"playlistId\") long playlistId)", "class_method_signature": "PlaylistService.deletePlaylist(@PathParam(\"playlistId\") long playlistId)", "testcase": false, "constructor": false}, {"identifier": "deletePage", "parameters": "(@PathParam(\"playlistId\") long playlistId,\n\t\t\t@PathParam(\"pageReferenceId\") long pageReferenceId)", "modifiers": "@DELETE @Path(\"/playlists/{playlistId}/pagereferences/{pageReferenceId}\") @Produces(MediaType.APPLICATION_JSON) public", "return": "Playlist", "signature": "Playlist deletePage(@PathParam(\"playlistId\") long playlistId,\n\t\t\t@PathParam(\"pageReferenceId\") long pageReferenceId)", "full_signature": "@DELETE @Path(\"/playlists/{playlistId}/pagereferences/{pageReferenceId}\") @Produces(MediaType.APPLICATION_JSON) public Playlist deletePage(@PathParam(\"playlistId\") long playlistId,\n\t\t\t@PathParam(\"pageReferenceId\") long pageReferenceId)", "class_method_signature": "PlaylistService.deletePage(@PathParam(\"playlistId\") long playlistId,\n\t\t\t@PathParam(\"pageReferenceId\") long pageReferenceId)", "testcase": false, "constructor": false}, {"identifier": "movePage", "parameters": "(@PathParam(\"playlistId\") long playlistId,\n\t\t\t@PathParam(\"pageReferenceId\") long pageReferenceId, @PathParam(\"idx\") int newPosition)", "modifiers": "@POST @Path(\"/playlists/{playlistId}/pagereferences/{pageReferenceId}/moveto/{idx}\") @Produces(MediaType.APPLICATION_JSON) public", "return": "Playlist", "signature": "Playlist movePage(@PathParam(\"playlistId\") long playlistId,\n\t\t\t@PathParam(\"pageReferenceId\") long pageReferenceId, @PathParam(\"idx\") int newPosition)", "full_signature": "@POST @Path(\"/playlists/{playlistId}/pagereferences/{pageReferenceId}/moveto/{idx}\") @Produces(MediaType.APPLICATION_JSON) public Playlist movePage(@PathParam(\"playlistId\") long playlistId,\n\t\t\t@PathParam(\"pageReferenceId\") long pageReferenceId, @PathParam(\"idx\") int newPosition)", "class_method_signature": "PlaylistService.movePage(@PathParam(\"playlistId\") long playlistId,\n\t\t\t@PathParam(\"pageReferenceId\") long pageReferenceId, @PathParam(\"idx\") int newPosition)", "testcase": false, "constructor": false}, {"identifier": "getReferences", "parameters": "(@PathParam(\"playlistId\") long playlistId)", "modifiers": "@GET @Path(\"/playlists/{playlistId}/references\") @Produces(MediaType.APPLICATION_JSON) public", "return": "PlaylistReferences", "signature": "PlaylistReferences getReferences(@PathParam(\"playlistId\") long playlistId)", "full_signature": "@GET @Path(\"/playlists/{playlistId}/references\") @Produces(MediaType.APPLICATION_JSON) public PlaylistReferences getReferences(@PathParam(\"playlistId\") long playlistId)", "class_method_signature": "PlaylistService.getReferences(@PathParam(\"playlistId\") long playlistId)", "testcase": false, "constructor": false}, {"identifier": "addOwners", "parameters": "(@PathParam(\"playlistId\") long playlistId, Owner[] ownerData)", "modifiers": "@Override @POST @Path(\"/playlists/{playlistId}/owners\") @Consumes(MediaType.APPLICATION_JSON) public", "return": "Playlist", "signature": "Playlist addOwners(@PathParam(\"playlistId\") long playlistId, Owner[] ownerData)", "full_signature": "@Override @POST @Path(\"/playlists/{playlistId}/owners\") @Consumes(MediaType.APPLICATION_JSON) public Playlist addOwners(@PathParam(\"playlistId\") long playlistId, Owner[] ownerData)", "class_method_signature": "PlaylistService.addOwners(@PathParam(\"playlistId\") long playlistId, Owner[] ownerData)", "testcase": false, "constructor": false}, {"identifier": "deleteOwner", "parameters": "(@PathParam(\"playlistId\") long playlistId, @PathParam(\"ownerId\") long ownerId)", "modifiers": "@Override @DELETE @Path(\"/playlists/{playlistId}/owners/{ownerId}\") @Produces(MediaType.APPLICATION_JSON) public", "return": "Playlist", "signature": "Playlist deleteOwner(@PathParam(\"playlistId\") long playlistId, @PathParam(\"ownerId\") long ownerId)", "full_signature": "@Override @DELETE @Path(\"/playlists/{playlistId}/owners/{ownerId}\") @Produces(MediaType.APPLICATION_JSON) public Playlist deleteOwner(@PathParam(\"playlistId\") long playlistId, @PathParam(\"ownerId\") long ownerId)", "class_method_signature": "PlaylistService.deleteOwner(@PathParam(\"playlistId\") long playlistId, @PathParam(\"ownerId\") long ownerId)", "testcase": false, "constructor": false}], "file": "common/app/src/main/java/com/sap/primetime/api/PlaylistService.java"}, "focal_method": {"identifier": "addPlaylist", "parameters": "(@PathParam(\"playlistId\") long playlistId, Playlist playlist)", "modifiers": "@POST @Path(\"/playlists/{playlistId}/playlists\") @Consumes(MediaType.APPLICATION_JSON) public", "return": "Playlist", "body": "@POST\n\t@Path(\"/playlists/{playlistId}/playlists\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\tpublic Playlist addPlaylist(@PathParam(\"playlistId\") long playlistId, Playlist playlist) {\n\t\tPlaylist existingPlaylist = getExistingPlaylist(playlistId, true);\n\t\tPlaylist existingPlaylist2 = getExistingPlaylist(playlist.getId(), false);\n\n\t\texistingPlaylist.addPageReference(new PageReference(existingPlaylist2));\n\n\t\treturn PlaylistDAO.save(existingPlaylist);\n\t}", "signature": "Playlist addPlaylist(@PathParam(\"playlistId\") long playlistId, Playlist playlist)", "full_signature": "@POST @Path(\"/playlists/{playlistId}/playlists\") @Consumes(MediaType.APPLICATION_JSON) public Playlist addPlaylist(@PathParam(\"playlistId\") long playlistId, Playlist playlist)", "class_method_signature": "PlaylistService.addPlaylist(@PathParam(\"playlistId\") long playlistId, Playlist playlist)", "testcase": false, "constructor": false, "invocations": ["getExistingPlaylist", "getExistingPlaylist", "getId", "addPageReference", "save"]}, "repository": {"repo_id": 172529766, "url": "https://github.com/SAP/cloud-primetime", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 25, "size": 7529, "license": "licensed"}}