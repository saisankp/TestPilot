{"test_class": {"identifier": "ZkCoordinatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private DynamicBrokersReader reader;", "modifier": "@Mock\n    private", "type": "DynamicBrokersReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "@Mock\n    private DynamicPartitionConnections dynamicPartitionConnections;", "modifier": "@Mock\n    private", "type": "DynamicPartitionConnections", "declarator": "dynamicPartitionConnections", "var_name": "dynamicPartitionConnections"}, {"original_string": "private KafkaTestBroker broker = new KafkaTestBroker();", "modifier": "private", "type": "KafkaTestBroker", "declarator": "broker = new KafkaTestBroker()", "var_name": "broker"}, {"original_string": "private TestingServer server;", "modifier": "private", "type": "TestingServer", "declarator": "server", "var_name": "server"}, {"original_string": "private Map stormConf = new HashMap();", "modifier": "private", "type": "Map", "declarator": "stormConf = new HashMap()", "var_name": "stormConf"}, {"original_string": "private SpoutConfig spoutConfig;", "modifier": "private", "type": "SpoutConfig", "declarator": "spoutConfig", "var_name": "spoutConfig"}, {"original_string": "private ZkState state;", "modifier": "private", "type": "ZkState", "declarator": "state", "var_name": "state"}, {"original_string": "private SimpleConsumer simpleConsumer;", "modifier": "private", "type": "SimpleConsumer", "declarator": "simpleConsumer", "var_name": "simpleConsumer"}], "file": "storm/storm-app/src/test/java/storm/kafka/ZkCoordinatorTest.java"}, "test_case": {"identifier": "testOnePartitionPerTask", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnePartitionPerTask() throws Exception {\n        int totalTasks = 64;\n        int partitionsPerTask = 1;\n        List<ZkCoordinator> coordinatorList = buildCoordinators(totalTasks / partitionsPerTask);\n        when(reader.getBrokerInfo()).thenReturn(TestUtils.buildPartitionInfo(totalTasks));\n        for (ZkCoordinator coordinator : coordinatorList) {\n            List<PartitionManager> myManagedPartitions = coordinator.getMyManagedPartitions();\n            assertEquals(partitionsPerTask, myManagedPartitions.size());\n            assertEquals(coordinator._taskIndex, myManagedPartitions.get(0).getPartition().partition);\n        }\n    }", "signature": "void testOnePartitionPerTask()", "full_signature": "@Test public void testOnePartitionPerTask()", "class_method_signature": "ZkCoordinatorTest.testOnePartitionPerTask()", "testcase": true, "constructor": false, "invocations": ["buildCoordinators", "thenReturn", "when", "getBrokerInfo", "buildPartitionInfo", "getMyManagedPartitions", "assertEquals", "size", "assertEquals", "getPartition", "get"]}, "focal_class": {"identifier": "ZkCoordinator", "superclass": "", "interfaces": "implements PartitionCoordinator", "fields": [{"original_string": "public static final Logger LOG = LoggerFactory.getLogger(ZkCoordinator.class);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ZkCoordinator.class)", "var_name": "LOG"}, {"original_string": "SpoutConfig _spoutConfig;", "modifier": "", "type": "SpoutConfig", "declarator": "_spoutConfig", "var_name": "_spoutConfig"}, {"original_string": "int _taskIndex;", "modifier": "", "type": "int", "declarator": "_taskIndex", "var_name": "_taskIndex"}, {"original_string": "int _totalTasks;", "modifier": "", "type": "int", "declarator": "_totalTasks", "var_name": "_totalTasks"}, {"original_string": "String _topologyInstanceId;", "modifier": "", "type": "String", "declarator": "_topologyInstanceId", "var_name": "_topologyInstanceId"}, {"original_string": "Map<Partition, PartitionManager> _managers = new HashMap();", "modifier": "", "type": "Map<Partition, PartitionManager>", "declarator": "_managers = new HashMap()", "var_name": "_managers"}, {"original_string": "List<PartitionManager> _cachedList;", "modifier": "", "type": "List<PartitionManager>", "declarator": "_cachedList", "var_name": "_cachedList"}, {"original_string": "Long _lastRefreshTime = null;", "modifier": "", "type": "Long", "declarator": "_lastRefreshTime = null", "var_name": "_lastRefreshTime"}, {"original_string": "int _refreshFreqMs;", "modifier": "", "type": "int", "declarator": "_refreshFreqMs", "var_name": "_refreshFreqMs"}, {"original_string": "DynamicPartitionConnections _connections;", "modifier": "", "type": "DynamicPartitionConnections", "declarator": "_connections", "var_name": "_connections"}, {"original_string": "DynamicBrokersReader _reader;", "modifier": "", "type": "DynamicBrokersReader", "declarator": "_reader", "var_name": "_reader"}, {"original_string": "ZkState _state;", "modifier": "", "type": "ZkState", "declarator": "_state", "var_name": "_state"}, {"original_string": "Map _stormConf;", "modifier": "", "type": "Map", "declarator": "_stormConf", "var_name": "_stormConf"}], "methods": [{"identifier": "ZkCoordinator", "parameters": "(DynamicPartitionConnections connections, Map stormConf, SpoutConfig spoutConfig, ZkState state, int taskIndex, int totalTasks, String topologyInstanceId)", "modifiers": "public", "return": "", "signature": " ZkCoordinator(DynamicPartitionConnections connections, Map stormConf, SpoutConfig spoutConfig, ZkState state, int taskIndex, int totalTasks, String topologyInstanceId)", "full_signature": "public  ZkCoordinator(DynamicPartitionConnections connections, Map stormConf, SpoutConfig spoutConfig, ZkState state, int taskIndex, int totalTasks, String topologyInstanceId)", "class_method_signature": "ZkCoordinator.ZkCoordinator(DynamicPartitionConnections connections, Map stormConf, SpoutConfig spoutConfig, ZkState state, int taskIndex, int totalTasks, String topologyInstanceId)", "testcase": false, "constructor": true}, {"identifier": "ZkCoordinator", "parameters": "(DynamicPartitionConnections connections, Map stormConf, SpoutConfig spoutConfig, ZkState state, int taskIndex, int totalTasks, String topologyInstanceId, DynamicBrokersReader reader)", "modifiers": "public", "return": "", "signature": " ZkCoordinator(DynamicPartitionConnections connections, Map stormConf, SpoutConfig spoutConfig, ZkState state, int taskIndex, int totalTasks, String topologyInstanceId, DynamicBrokersReader reader)", "full_signature": "public  ZkCoordinator(DynamicPartitionConnections connections, Map stormConf, SpoutConfig spoutConfig, ZkState state, int taskIndex, int totalTasks, String topologyInstanceId, DynamicBrokersReader reader)", "class_method_signature": "ZkCoordinator.ZkCoordinator(DynamicPartitionConnections connections, Map stormConf, SpoutConfig spoutConfig, ZkState state, int taskIndex, int totalTasks, String topologyInstanceId, DynamicBrokersReader reader)", "testcase": false, "constructor": true}, {"identifier": "buildReader", "parameters": "(Map stormConf, SpoutConfig spoutConfig)", "modifiers": "private static", "return": "DynamicBrokersReader", "signature": "DynamicBrokersReader buildReader(Map stormConf, SpoutConfig spoutConfig)", "full_signature": "private static DynamicBrokersReader buildReader(Map stormConf, SpoutConfig spoutConfig)", "class_method_signature": "ZkCoordinator.buildReader(Map stormConf, SpoutConfig spoutConfig)", "testcase": false, "constructor": false}, {"identifier": "getMyManagedPartitions", "parameters": "()", "modifiers": "@Override public", "return": "List<PartitionManager>", "signature": "List<PartitionManager> getMyManagedPartitions()", "full_signature": "@Override public List<PartitionManager> getMyManagedPartitions()", "class_method_signature": "ZkCoordinator.getMyManagedPartitions()", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void refresh()", "full_signature": "@Override public void refresh()", "class_method_signature": "ZkCoordinator.refresh()", "testcase": false, "constructor": false}, {"identifier": "getManager", "parameters": "(Partition partition)", "modifiers": "@Override public", "return": "PartitionManager", "signature": "PartitionManager getManager(Partition partition)", "full_signature": "@Override public PartitionManager getManager(Partition partition)", "class_method_signature": "ZkCoordinator.getManager(Partition partition)", "testcase": false, "constructor": false}], "file": "storm/storm-app/src/main/java/storm/kafka/ZkCoordinator.java"}, "focal_method": {"identifier": "getMyManagedPartitions", "parameters": "()", "modifiers": "@Override public", "return": "List<PartitionManager>", "body": "@Override\n    public List<PartitionManager> getMyManagedPartitions() {\n        if (_lastRefreshTime == null || (System.currentTimeMillis() - _lastRefreshTime) > _refreshFreqMs) {\n            refresh();\n            _lastRefreshTime = System.currentTimeMillis();\n        }\n        return _cachedList;\n    }", "signature": "List<PartitionManager> getMyManagedPartitions()", "full_signature": "@Override public List<PartitionManager> getMyManagedPartitions()", "class_method_signature": "ZkCoordinator.getMyManagedPartitions()", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "refresh", "currentTimeMillis"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}