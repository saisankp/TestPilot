{"test_class": {"identifier": "ActiveLimitFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static volatile int count = 0;", "modifier": "private static volatile", "type": "int", "declarator": "count = 0", "var_name": "count"}, {"original_string": "Filter activeLimitFilter = new ActiveLimitFilter();", "modifier": "", "type": "Filter", "declarator": "activeLimitFilter = new ActiveLimitFilter()", "var_name": "activeLimitFilter"}], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/com/alibaba/dubbo/rpc/filter/ActiveLimitFilterTest.java"}, "test_case": {"identifier": "testInvokeGreaterActives", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvokeGreaterActives() {\n        URL url = URL.valueOf(\"test://test:11/test?accesslog=true&group=dubbo&version=1.1&actives=1&timeout=1\");\n        final Invoker<ActiveLimitFilterTest> invoker = new BlockMyInvoker<ActiveLimitFilterTest>(url, 100);\n        final Invocation invocation = new MockInvocation();\n        final CountDownLatch latch = new CountDownLatch(1);\n        for (int i = 0; i < 100; i++) {\n            Thread thread = new Thread(new Runnable() {\n\n                public void run() {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                    for (int i = 0; i < 100; i++) {\n                        try {\n                            activeLimitFilter.invoke(invoker, invocation);\n                        } catch (RpcException expected) {\n                            count++;\n                        }\n                    }\n                }\n            });\n            thread.start();\n        }\n        latch.countDown();\n\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        assertNotSame(0, count);\n    }", "signature": "void testInvokeGreaterActives()", "full_signature": "@Test public void testInvokeGreaterActives()", "class_method_signature": "ActiveLimitFilterTest.testInvokeGreaterActives()", "testcase": true, "constructor": false, "invocations": ["valueOf", "await", "printStackTrace", "invoke", "start", "countDown", "sleep", "printStackTrace", "assertNotSame"]}, "focal_class": {"identifier": "ActiveLimitFilter", "superclass": "", "interfaces": "implements Filter", "fields": [], "methods": [{"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ActiveLimitFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/filter/ActiveLimitFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        URL url = invoker.getUrl();\n        String methodName = invocation.getMethodName();\n        int max = invoker.getUrl().getMethodParameter(methodName, Constants.ACTIVES_KEY, 0);\n        RpcStatus count = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName());\n        if (max > 0) {\n            long timeout = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.TIMEOUT_KEY, 0);\n            long start = System.currentTimeMillis();\n            long remain = timeout;\n            int active = count.getActive();\n            if (active >= max) {\n                synchronized (count) {\n                    while ((active = count.getActive()) >= max) {\n                        try {\n                            count.wait(remain);\n                        } catch (InterruptedException e) {\n                        }\n                        long elapsed = System.currentTimeMillis() - start;\n                        remain = timeout - elapsed;\n                        if (remain <= 0) {\n                            throw new RpcException(\"Waiting concurrent invoke timeout in client-side for service:  \"\n                                    + invoker.getInterface().getName() + \", method: \"\n                                    + invocation.getMethodName() + \", elapsed: \" + elapsed\n                                    + \", timeout: \" + timeout + \". concurrent invokes: \" + active\n                                    + \". max concurrent invoke limit: \" + max);\n                        }\n                    }\n                }\n            }\n        }\n        try {\n            long begin = System.currentTimeMillis();\n            RpcStatus.beginCount(url, methodName);\n            try {\n                Result result = invoker.invoke(invocation);\n                RpcStatus.endCount(url, methodName, System.currentTimeMillis() - begin, true);\n                return result;\n            } catch (RuntimeException t) {\n                RpcStatus.endCount(url, methodName, System.currentTimeMillis() - begin, false);\n                throw t;\n            }\n        } finally {\n            if (max > 0) {\n                synchronized (count) {\n                    count.notify();\n                }\n            }\n        }\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ActiveLimitFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["getUrl", "getMethodName", "getMethodParameter", "getUrl", "getStatus", "getUrl", "getMethodName", "getMethodParameter", "getUrl", "getMethodName", "currentTimeMillis", "getActive", "getActive", "wait", "currentTimeMillis", "getName", "getInterface", "getMethodName", "currentTimeMillis", "beginCount", "invoke", "endCount", "currentTimeMillis", "endCount", "currentTimeMillis", "notify"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}