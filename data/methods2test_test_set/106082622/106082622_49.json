{"test_class": {"identifier": "KafkaAdminFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static SharedKafkaTestResource sharedKafkaTestResource = new SharedKafkaTestResource();", "modifier": "@ClassRule\n    public static", "type": "SharedKafkaTestResource", "declarator": "sharedKafkaTestResource = new SharedKafkaTestResource()", "var_name": "sharedKafkaTestResource"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/kafka/KafkaAdminFactoryTest.java"}, "test_case": {"identifier": "testCreateNonSslConsumer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateNonSslConsumer() {\n        // Create Cluster config\n        final ClusterConfig clusterConfig = ClusterConfig.newBuilder()\n            .withBrokerHosts(sharedKafkaTestResource.getKafkaConnectString())\n            .build();\n\n        // Create a topic\n        final String topicName = \"MyRandomTopic\";\n        sharedKafkaTestResource.getKafkaTestUtils().createTopic(topicName, 1, (short) 1);\n\n        final KafkaAdminFactory kafkaAdminFactory = new KafkaAdminFactory(new KafkaClientConfigUtil(\"NotUsed\", \"Prefix\"));\n\n        // Create instance\n        try (final KafkaConsumer<String, String> consumerClient = kafkaAdminFactory.createConsumer(clusterConfig, \"MyClientId\")) {\n\n            // Call method to validate things work as expected\n            final Map<String, List<PartitionInfo>> results = consumerClient.listTopics();\n            assertNotNull(results);\n            assertTrue(results.containsKey(topicName), \"Should have our topic.\");\n        }\n    }", "signature": "void testCreateNonSslConsumer()", "full_signature": "@Test public void testCreateNonSslConsumer()", "class_method_signature": "KafkaAdminFactoryTest.testCreateNonSslConsumer()", "testcase": true, "constructor": false, "invocations": ["build", "withBrokerHosts", "newBuilder", "getKafkaConnectString", "createTopic", "getKafkaTestUtils", "createConsumer", "listTopics", "assertNotNull", "assertTrue", "containsKey"]}, "focal_class": {"identifier": "KafkaAdminFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final KafkaClientConfigUtil configUtil;", "modifier": "private final", "type": "KafkaClientConfigUtil", "declarator": "configUtil", "var_name": "configUtil"}], "methods": [{"identifier": "KafkaAdminFactory", "parameters": "(final KafkaClientConfigUtil configUtil)", "modifiers": "public", "return": "", "signature": " KafkaAdminFactory(final KafkaClientConfigUtil configUtil)", "full_signature": "public  KafkaAdminFactory(final KafkaClientConfigUtil configUtil)", "class_method_signature": "KafkaAdminFactory.KafkaAdminFactory(final KafkaClientConfigUtil configUtil)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(final ClusterConfig clusterConfig, final String clientId)", "modifiers": "public", "return": "AdminClient", "signature": "AdminClient create(final ClusterConfig clusterConfig, final String clientId)", "full_signature": "public AdminClient create(final ClusterConfig clusterConfig, final String clientId)", "class_method_signature": "KafkaAdminFactory.create(final ClusterConfig clusterConfig, final String clientId)", "testcase": false, "constructor": false}, {"identifier": "createConsumer", "parameters": "(final ClusterConfig clusterConfig, final String clientId)", "modifiers": "public", "return": "KafkaConsumer<String, String>", "signature": "KafkaConsumer<String, String> createConsumer(final ClusterConfig clusterConfig, final String clientId)", "full_signature": "public KafkaConsumer<String, String> createConsumer(final ClusterConfig clusterConfig, final String clientId)", "class_method_signature": "KafkaAdminFactory.createConsumer(final ClusterConfig clusterConfig, final String clientId)", "testcase": false, "constructor": false}, {"identifier": "getConsumerConfig", "parameters": "(final ClusterConfig clusterConfig, final String clientId)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getConsumerConfig(final ClusterConfig clusterConfig, final String clientId)", "full_signature": "public Map<String, Object> getConsumerConfig(final ClusterConfig clusterConfig, final String clientId)", "class_method_signature": "KafkaAdminFactory.getConsumerConfig(final ClusterConfig clusterConfig, final String clientId)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/kafka/KafkaAdminFactory.java"}, "focal_method": {"identifier": "createConsumer", "parameters": "(final ClusterConfig clusterConfig, final String clientId)", "modifiers": "public", "return": "KafkaConsumer<String, String>", "body": "public KafkaConsumer<String, String> createConsumer(final ClusterConfig clusterConfig, final String clientId) {\n        // Create config\n        final Map<String, Object> config = getConsumerConfig(clusterConfig, clientId);\n\n        // Create consumer\n        return new KafkaConsumer<>(config);\n    }", "signature": "KafkaConsumer<String, String> createConsumer(final ClusterConfig clusterConfig, final String clientId)", "full_signature": "public KafkaConsumer<String, String> createConsumer(final ClusterConfig clusterConfig, final String clientId)", "class_method_signature": "KafkaAdminFactory.createConsumer(final ClusterConfig clusterConfig, final String clientId)", "testcase": false, "constructor": false, "invocations": ["getConsumerConfig"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}