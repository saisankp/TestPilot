{"test_class": {"identifier": "EntropySketchTest", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/stream/entropy/EntropySketchTest.java"}, "test_case": {"identifier": "testEntropy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEntropy() {\n        System.out.println(\"entropy\");\n        EntropySketch sketch = new EntropySketch(10);\n        EntropyExact exact = new EntropyExact();\n        \n        String s = \"hello\";\n        \n        sketch.push(s.getBytes(), 1);\n        exact.push(s.getBytes(), 1);\n        \n        System.out.println(\"Estimate: \" + sketch.entropy());\n        System.out.println(\"Exact: \" + exact.entropy());\n    }", "signature": "void testEntropy()", "full_signature": "@Test public void testEntropy()", "class_method_signature": "EntropySketchTest.testEntropy()", "testcase": true, "constructor": false, "invocations": ["println", "push", "getBytes", "push", "getBytes", "println", "entropy", "println", "entropy"]}, "focal_class": {"identifier": "EntropySketch", "superclass": "", "interfaces": "implements IEntropy", "fields": [{"original_string": "private int count;", "modifier": "private", "type": "int", "declarator": "count", "var_name": "count"}, {"original_string": "private double[] data;", "modifier": "private", "type": "double[]", "declarator": "data", "var_name": "data"}, {"original_string": "private final Hash hasher;", "modifier": "private final", "type": "Hash", "declarator": "hasher", "var_name": "hasher"}, {"original_string": "private long seed;", "modifier": "private", "type": "long", "declarator": "seed", "var_name": "seed"}], "methods": [{"identifier": "EntropySketch", "parameters": "(int k)", "modifiers": "public", "return": "", "signature": " EntropySketch(int k)", "full_signature": "public  EntropySketch(int k)", "class_method_signature": "EntropySketch.EntropySketch(int k)", "testcase": false, "constructor": true}, {"identifier": "EntropySketch", "parameters": "(int k, long seed)", "modifiers": "public", "return": "", "signature": " EntropySketch(int k, long seed)", "full_signature": "public  EntropySketch(int k, long seed)", "class_method_signature": "EntropySketch.EntropySketch(int k, long seed)", "testcase": false, "constructor": true}, {"identifier": "EntropySketch", "parameters": "(int k, long seed, Hash hasher)", "modifiers": "public", "return": "", "signature": " EntropySketch(int k, long seed, Hash hasher)", "full_signature": "public  EntropySketch(int k, long seed, Hash hasher)", "class_method_signature": "EntropySketch.EntropySketch(int k, long seed, Hash hasher)", "testcase": false, "constructor": true}, {"identifier": "push", "parameters": "(byte[] b, int inc)", "modifiers": "public", "return": "void", "signature": "void push(byte[] b, int inc)", "full_signature": "public void push(byte[] b, int inc)", "class_method_signature": "EntropySketch.push(byte[] b, int inc)", "testcase": false, "constructor": false}, {"identifier": "entropy", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double entropy()", "full_signature": "public double entropy()", "class_method_signature": "EntropySketch.entropy()", "testcase": false, "constructor": false}, {"identifier": "maxSkew", "parameters": "(RandomGenerator r)", "modifiers": "private", "return": "double", "signature": "double maxSkew(RandomGenerator r)", "full_signature": "private double maxSkew(RandomGenerator r)", "class_method_signature": "EntropySketch.maxSkew(RandomGenerator r)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/entropy/EntropySketch.java"}, "focal_method": {"identifier": "entropy", "parameters": "()", "modifiers": "public", "return": "double", "body": "public double entropy() {\n        double sum = 0.0;\n        \n        for (double d : data) {\n            double tmp = d / (double)count;\n            sum += Math.exp(tmp);\n        }\n        \n        return -(Math.log(sum / (double)data.length) / Math.log(2));\n    }", "signature": "double entropy()", "full_signature": "public double entropy()", "class_method_signature": "EntropySketch.entropy()", "testcase": false, "constructor": false, "invocations": ["exp", "log", "log"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}