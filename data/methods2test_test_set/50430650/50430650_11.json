{"test_class": {"identifier": "SubStepDefinitionParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final boolean FAIL_ON_DUPLICATE_SUBSTEPS = true;", "modifier": "private static final", "type": "boolean", "declarator": "FAIL_ON_DUPLICATE_SUBSTEPS = true", "var_name": "FAIL_ON_DUPLICATE_SUBSTEPS"}, {"original_string": "private static final boolean DO_NOT_FAIL_ON_DUPLICATE_SUBSTEPS = !FAIL_ON_DUPLICATE_SUBSTEPS;", "modifier": "private static final", "type": "boolean", "declarator": "DO_NOT_FAIL_ON_DUPLICATE_SUBSTEPS = !FAIL_ON_DUPLICATE_SUBSTEPS", "var_name": "DO_NOT_FAIL_ON_DUPLICATE_SUBSTEPS"}, {"original_string": "private SyntaxErrorReporter errorReporter;", "modifier": "private", "type": "SyntaxErrorReporter", "declarator": "errorReporter", "var_name": "errorReporter"}, {"original_string": "private SubStepDefinitionParser parser;", "modifier": "private", "type": "SubStepDefinitionParser", "declarator": "parser", "var_name": "parser"}], "file": "core/src/test/java/com/technophobia/substeps/runner/syntax/SubStepDefinitionParserTest.java"}, "test_case": {"identifier": "testCommentOnEol", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCommentOnEol() {\n\n        this.parser = new SubStepDefinitionParser(FAIL_ON_DUPLICATE_SUBSTEPS, this.errorReporter);\n\n        final PatternMap<ParentStep> substepDefs = this.parser.loadSubSteps(new File(\n                \"./target/test-classes/com/technophobia/substeps/runner/syntax/eol-comment.substeps\"));\n\n        Assert.assertNotNull(substepDefs);\n\n        final String def1 = \"something else\";\n\n        List<ParentStep> list = substepDefs.get(def1);\n\n        Assert.assertThat(list, hasSize(1));\n\n        ParentStep parentStep = list.get(0);\n\n        String line = parentStep.getParent().getLine();\n\n        Assert.assertThat(line, is(def1));\n\n        final String def2 = \"and something different\";\n\n        list = substepDefs.get(def2);\n\n        Assert.assertThat(list, hasSize(1));\n\n        parentStep = list.get(0);\n\n        line = parentStep.getParent().getLine();\n\n        Assert.assertThat(line, is(def2));\n\n        final String commentedDefine = \"a normal comment\";\n\n        list = substepDefs.get(commentedDefine);\n        Assert.assertThat(list, empty());\n    }", "signature": "void testCommentOnEol()", "full_signature": "@Test public void testCommentOnEol()", "class_method_signature": "SubStepDefinitionParserTest.testCommentOnEol()", "testcase": true, "constructor": false, "invocations": ["loadSubSteps", "assertNotNull", "get", "assertThat", "hasSize", "get", "getLine", "getParent", "assertThat", "is", "get", "assertThat", "hasSize", "get", "getLine", "getParent", "assertThat", "is", "get", "assertThat", "empty"]}, "focal_class": {"identifier": "SubStepDefinitionParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(SubStepDefinitionParser.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SubStepDefinitionParser.class)", "var_name": "log"}, {"original_string": "private ParentStep currentParentStep;", "modifier": "private", "type": "ParentStep", "declarator": "currentParentStep", "var_name": "currentParentStep"}, {"original_string": "private final PatternMap<ParentStep> parentMap = new PatternMap<ParentStep>();", "modifier": "private final", "type": "PatternMap<ParentStep>", "declarator": "parentMap = new PatternMap<ParentStep>()", "var_name": "parentMap"}, {"original_string": "private final boolean failOnDuplicateSubsteps;", "modifier": "private final", "type": "boolean", "declarator": "failOnDuplicateSubsteps", "var_name": "failOnDuplicateSubsteps"}, {"original_string": "private final SyntaxErrorReporter syntaxErrorReporter;", "modifier": "private final", "type": "SyntaxErrorReporter", "declarator": "syntaxErrorReporter", "var_name": "syntaxErrorReporter"}, {"original_string": "private Directive currentDirective = null;", "modifier": "private", "type": "Directive", "declarator": "currentDirective = null", "var_name": "currentDirective"}], "methods": [{"identifier": "SubStepDefinitionParser", "parameters": "(final SyntaxErrorReporter syntaxErrorReporter)", "modifiers": "public", "return": "", "signature": " SubStepDefinitionParser(final SyntaxErrorReporter syntaxErrorReporter)", "full_signature": "public  SubStepDefinitionParser(final SyntaxErrorReporter syntaxErrorReporter)", "class_method_signature": "SubStepDefinitionParser.SubStepDefinitionParser(final SyntaxErrorReporter syntaxErrorReporter)", "testcase": false, "constructor": true}, {"identifier": "SubStepDefinitionParser", "parameters": "(final boolean failOnDuplicateSubsteps, final SyntaxErrorReporter syntaxErrorReporter)", "modifiers": "public", "return": "", "signature": " SubStepDefinitionParser(final boolean failOnDuplicateSubsteps, final SyntaxErrorReporter syntaxErrorReporter)", "full_signature": "public  SubStepDefinitionParser(final boolean failOnDuplicateSubsteps, final SyntaxErrorReporter syntaxErrorReporter)", "class_method_signature": "SubStepDefinitionParser.SubStepDefinitionParser(final boolean failOnDuplicateSubsteps, final SyntaxErrorReporter syntaxErrorReporter)", "testcase": false, "constructor": true}, {"identifier": "parseSubStepFile", "parameters": "(final File substepFile)", "modifiers": "", "return": "void", "signature": "void parseSubStepFile(final File substepFile)", "full_signature": " void parseSubStepFile(final File substepFile)", "class_method_signature": "SubStepDefinitionParser.parseSubStepFile(final File substepFile)", "testcase": false, "constructor": false}, {"identifier": "parseSubstepFileContents", "parameters": "(FileContents currentFileContents)", "modifiers": "public", "return": "PatternMap<ParentStep>", "signature": "PatternMap<ParentStep> parseSubstepFileContents(FileContents currentFileContents)", "full_signature": "public PatternMap<ParentStep> parseSubstepFileContents(FileContents currentFileContents)", "class_method_signature": "SubStepDefinitionParser.parseSubstepFileContents(FileContents currentFileContents)", "testcase": false, "constructor": false}, {"identifier": "loadSubSteps", "parameters": "(final File definitions)", "modifiers": "public", "return": "PatternMap<ParentStep>", "signature": "PatternMap<ParentStep> loadSubSteps(final File definitions)", "full_signature": "public PatternMap<ParentStep> loadSubSteps(final File definitions)", "class_method_signature": "SubStepDefinitionParser.loadSubSteps(final File definitions)", "testcase": false, "constructor": false}, {"identifier": "processLine", "parameters": "(final int lineNumberIdx, final String line, final FileContents currentFileContents)", "modifiers": "private", "return": "void", "signature": "void processLine(final int lineNumberIdx, final String line, final FileContents currentFileContents)", "full_signature": "private void processLine(final int lineNumberIdx, final String line, final FileContents currentFileContents)", "class_method_signature": "SubStepDefinitionParser.processLine(final int lineNumberIdx, final String line, final FileContents currentFileContents)", "testcase": false, "constructor": false}, {"identifier": "processTrimmedLine", "parameters": "(final String trimmed, final int lineNumberIdx, FileContents currentFileContents)", "modifiers": "private", "return": "void", "signature": "void processTrimmedLine(final String trimmed, final int lineNumberIdx, FileContents currentFileContents)", "full_signature": "private void processTrimmedLine(final String trimmed, final int lineNumberIdx, FileContents currentFileContents)", "class_method_signature": "SubStepDefinitionParser.processTrimmedLine(final String trimmed, final int lineNumberIdx, FileContents currentFileContents)", "testcase": false, "constructor": false}, {"identifier": "processDirective", "parameters": "(final Directive d, final String remainder, final int lineNumberIdx, FileContents currentFileContents)", "modifiers": "private", "return": "void", "signature": "void processDirective(final Directive d, final String remainder, final int lineNumberIdx, FileContents currentFileContents)", "full_signature": "private void processDirective(final Directive d, final String remainder, final int lineNumberIdx, FileContents currentFileContents)", "class_method_signature": "SubStepDefinitionParser.processDirective(final Directive d, final String remainder, final int lineNumberIdx, FileContents currentFileContents)", "testcase": false, "constructor": false}, {"identifier": "storeForPatternOrThrowException", "parameters": "(final String newPattern, final ParentStep parentStep)", "modifiers": "private", "return": "void", "signature": "void storeForPatternOrThrowException(final String newPattern, final ParentStep parentStep)", "full_signature": "private void storeForPatternOrThrowException(final String newPattern, final ParentStep parentStep)", "class_method_signature": "SubStepDefinitionParser.storeForPatternOrThrowException(final String newPattern, final ParentStep parentStep)", "testcase": false, "constructor": false}, {"identifier": "isDirective", "parameters": "(final String word)", "modifiers": "private static", "return": "Directive", "signature": "Directive isDirective(final String word)", "full_signature": "private static Directive isDirective(final String word)", "class_method_signature": "SubStepDefinitionParser.isDirective(final String word)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/technophobia/substeps/runner/syntax/SubStepDefinitionParser.java"}, "focal_method": {"identifier": "loadSubSteps", "parameters": "(final File definitions)", "modifiers": "public", "return": "PatternMap<ParentStep>", "body": "public PatternMap<ParentStep> loadSubSteps(final File definitions) {\n\n        final Collection<File> substepsFiles = FileUtils.getFiles(definitions, \"substeps\");\n\n        for (final File f : substepsFiles) {\n            parseSubStepFile(f);\n        }\n\n        return this.parentMap;\n    }", "signature": "PatternMap<ParentStep> loadSubSteps(final File definitions)", "full_signature": "public PatternMap<ParentStep> loadSubSteps(final File definitions)", "class_method_signature": "SubStepDefinitionParser.loadSubSteps(final File definitions)", "testcase": false, "constructor": false, "invocations": ["getFiles", "parseSubStepFile"]}, "repository": {"repo_id": 50430650, "url": "https://github.com/Substeps/substeps-framework", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 2783, "license": "licensed"}}