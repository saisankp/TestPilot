{"test_class": {"identifier": "ObjectiveTest", "superclass": "", "interfaces": "", "fields": [], "file": "opt4j-core/src/test/java/org/opt4j/core/ObjectiveTest.java"}, "test_case": {"identifier": "equalsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void equalsTest() {\n\t\tObjective o1 = new Objective(\"obj1\", Sign.MAX);\n\t\tObjective o11 = new Objective(\"obj1\", Sign.MAX);\n\t\tObjective o2 = new Objective(\"obj2\", Sign.MAX);\n\t\tObjective o3 = new Objective(\"obj1\", Sign.MIN);\n\t\tObjective o4 = new Objective(null, Sign.MAX);\n\t\tObjective o5 = new Objective(null, Sign.MAX);\n\n\t\tAssert.assertEquals(o1, o1);\n\t\tAssert.assertEquals(o1, o11);\n\t\tAssert.assertEquals(o4, o5);\n\t\tAssert.assertNotEquals(o1, null);\n\t\tAssert.assertNotEquals(o1, \"something else\");\n\t\tAssert.assertNotEquals(o1, o2);\n\t\tAssert.assertNotEquals(o1, o3);\n\t\tAssert.assertNotEquals(o4, o3);\n\t}", "signature": "void equalsTest()", "full_signature": "@Test public void equalsTest()", "class_method_signature": "ObjectiveTest.equalsTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "assertEquals", "assertEquals", "assertNotEquals", "assertNotEquals", "assertNotEquals", "assertNotEquals", "assertNotEquals"]}, "focal_class": {"identifier": "Objective", "superclass": "", "interfaces": "implements Comparable<Objective>", "fields": [{"original_string": "public static final Value<?> INFEASIBLE = null;", "modifier": "public static final", "type": "Value<?>", "declarator": "INFEASIBLE = null", "var_name": "INFEASIBLE"}, {"original_string": "protected final Sign sign;", "modifier": "protected final", "type": "Sign", "declarator": "sign", "var_name": "sign"}, {"original_string": "protected final String name;", "modifier": "protected final", "type": "String", "declarator": "name", "var_name": "name"}], "methods": [{"identifier": "Objective", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " Objective(String name)", "full_signature": "public  Objective(String name)", "class_method_signature": "Objective.Objective(String name)", "testcase": false, "constructor": true}, {"identifier": "Objective", "parameters": "(String name, Sign sign)", "modifiers": "public", "return": "", "signature": " Objective(String name, Sign sign)", "full_signature": "public  Objective(String name, Sign sign)", "class_method_signature": "Objective.Objective(String name, Sign sign)", "testcase": false, "constructor": true}, {"identifier": "getSign", "parameters": "()", "modifiers": "public", "return": "Sign", "signature": "Sign getSign()", "full_signature": "public Sign getSign()", "class_method_signature": "Objective.getSign()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "Objective.getName()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Objective other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(Objective other)", "full_signature": "@Override public int compareTo(Objective other)", "class_method_signature": "Objective.compareTo(Objective other)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Objective.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Objective.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Objective.equals(Object obj)", "testcase": false, "constructor": false}], "file": "opt4j-core/src/main/java/org/opt4j/core/Objective.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tObjective other = (Objective) obj;\n\t\tif (name == null) {\n\t\t\tif (other.name != null)\n\t\t\t\treturn false;\n\t\t} else if (!name.equals(other.name))\n\t\t\treturn false;\n\t\treturn sign == other.sign;\n\t}", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Objective.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "equals"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}