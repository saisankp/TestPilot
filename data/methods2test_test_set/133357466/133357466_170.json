{"test_class": {"identifier": "TransactionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final NetworkParameters UNITTEST = UnitTestParams.get();", "modifier": "private static final", "type": "NetworkParameters", "declarator": "UNITTEST = UnitTestParams.get()", "var_name": "UNITTEST"}, {"original_string": "private static final Address ADDRESS = LegacyAddress.fromKey(UNITTEST, new ECKey());", "modifier": "private static final", "type": "Address", "declarator": "ADDRESS = LegacyAddress.fromKey(UNITTEST, new ECKey())", "var_name": "ADDRESS"}, {"original_string": "private Transaction tx;", "modifier": "private", "type": "Transaction", "declarator": "tx", "var_name": "tx"}], "file": "core/src/test/java/org/ulordj/core/TransactionTest.java"}, "test_case": {"identifier": "testCoinbaseHeightCheck", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCoinbaseHeightCheck() throws VerificationException {\n        // Coinbase transaction from block 300,000\n        final byte[] transactionBytes = HEX.decode(\n                \"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4803e09304062f503253482f0403c86d53087ceca141295a00002e522cfabe6d6d7561cf262313da1144026c8f7a43e3899c44f6145f39a36507d36679a8b7006104000000000000000000000001c8704095000000001976a91480ad90d403581fa3bf46086a91b2d9d4125db6c188ac00000000\");\n        final int height = 300000;\n        final Transaction transaction = UNITTEST.getDefaultSerializer().makeTransaction(transactionBytes);\n        transaction.checkCoinBaseHeight(height);\n    }", "signature": "void testCoinbaseHeightCheck()", "full_signature": "@Test public void testCoinbaseHeightCheck()", "class_method_signature": "TransactionTest.testCoinbaseHeightCheck()", "testcase": true, "constructor": false, "invocations": ["decode", "makeTransaction", "getDefaultSerializer", "checkCoinBaseHeight"]}, "focal_class": {"identifier": "Transaction", "superclass": "extends ChildMessage", "interfaces": "", "fields": [{"original_string": "public static final Comparator<Transaction> SORT_TX_BY_UPDATE_TIME = new Comparator<Transaction>() {\n        @Override\n        public int compare(final Transaction tx1, final Transaction tx2) {\n            final long time1 = tx1.getUpdateTime().getTime();\n            final long time2 = tx2.getUpdateTime().getTime();\n            final int updateTimeComparison = -(Longs.compare(time1, time2));\n            //If time1==time2, compare by tx hash to make comparator consistent with equals\n            return updateTimeComparison != 0 ? updateTimeComparison : tx1.getHash().compareTo(tx2.getHash());\n        }\n    };", "modifier": "public static final", "type": "Comparator<Transaction>", "declarator": "SORT_TX_BY_UPDATE_TIME = new Comparator<Transaction>() {\n        @Override\n        public int compare(final Transaction tx1, final Transaction tx2) {\n            final long time1 = tx1.getUpdateTime().getTime();\n            final long time2 = tx2.getUpdateTime().getTime();\n            final int updateTimeComparison = -(Longs.compare(time1, time2));\n            //If time1==time2, compare by tx hash to make comparator consistent with equals\n            return updateTimeComparison != 0 ? updateTimeComparison : tx1.getHash().compareTo(tx2.getHash());\n        }\n    }", "var_name": "SORT_TX_BY_UPDATE_TIME"}, {"original_string": "public static final Comparator<Transaction> SORT_TX_BY_HEIGHT = new Comparator<Transaction>() {\n        @Override\n        public int compare(final Transaction tx1, final Transaction tx2) {\n            final TransactionConfidence confidence1 = tx1.getConfidence();\n            final int height1 = confidence1.getConfidenceType() == ConfidenceType.BUILDING\n                    ? confidence1.getAppearedAtChainHeight() : Block.BLOCK_HEIGHT_UNKNOWN;\n            final TransactionConfidence confidence2 = tx2.getConfidence();\n            final int height2 = confidence2.getConfidenceType() == ConfidenceType.BUILDING\n                    ? confidence2.getAppearedAtChainHeight() : Block.BLOCK_HEIGHT_UNKNOWN;\n            final int heightComparison = -(Ints.compare(height1, height2));\n            //If height1==height2, compare by tx hash to make comparator consistent with equals\n            return heightComparison != 0 ? heightComparison : tx1.getHash().compareTo(tx2.getHash());\n        }\n    };", "modifier": "public static final", "type": "Comparator<Transaction>", "declarator": "SORT_TX_BY_HEIGHT = new Comparator<Transaction>() {\n        @Override\n        public int compare(final Transaction tx1, final Transaction tx2) {\n            final TransactionConfidence confidence1 = tx1.getConfidence();\n            final int height1 = confidence1.getConfidenceType() == ConfidenceType.BUILDING\n                    ? confidence1.getAppearedAtChainHeight() : Block.BLOCK_HEIGHT_UNKNOWN;\n            final TransactionConfidence confidence2 = tx2.getConfidence();\n            final int height2 = confidence2.getConfidenceType() == ConfidenceType.BUILDING\n                    ? confidence2.getAppearedAtChainHeight() : Block.BLOCK_HEIGHT_UNKNOWN;\n            final int heightComparison = -(Ints.compare(height1, height2));\n            //If height1==height2, compare by tx hash to make comparator consistent with equals\n            return heightComparison != 0 ? heightComparison : tx1.getHash().compareTo(tx2.getHash());\n        }\n    }", "var_name": "SORT_TX_BY_HEIGHT"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(Transaction.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Transaction.class)", "var_name": "log"}, {"original_string": "public static final int LOCKTIME_THRESHOLD = 500000000;", "modifier": "public static final", "type": "int", "declarator": "LOCKTIME_THRESHOLD = 500000000", "var_name": "LOCKTIME_THRESHOLD"}, {"original_string": "public static final BigInteger LOCKTIME_THRESHOLD_BIG = BigInteger.valueOf(LOCKTIME_THRESHOLD);", "modifier": "public static final", "type": "BigInteger", "declarator": "LOCKTIME_THRESHOLD_BIG = BigInteger.valueOf(LOCKTIME_THRESHOLD)", "var_name": "LOCKTIME_THRESHOLD_BIG"}, {"original_string": "public static final int MAX_STANDARD_TX_SIZE = 100000;", "modifier": "public static final", "type": "int", "declarator": "MAX_STANDARD_TX_SIZE = 100000", "var_name": "MAX_STANDARD_TX_SIZE"}, {"original_string": "public static final Coin REFERENCE_DEFAULT_MIN_TX_FEE = Coin.valueOf(5000);", "modifier": "public static final", "type": "Coin", "declarator": "REFERENCE_DEFAULT_MIN_TX_FEE = Coin.valueOf(5000)", "var_name": "REFERENCE_DEFAULT_MIN_TX_FEE"}, {"original_string": "public static final Coin DEFAULT_TX_FEE = Coin.valueOf(50000);", "modifier": "public static final", "type": "Coin", "declarator": "DEFAULT_TX_FEE = Coin.valueOf(50000)", "var_name": "DEFAULT_TX_FEE"}, {"original_string": "public static final Coin MIN_NONDUST_OUTPUT = Coin.valueOf(2730);", "modifier": "public static final", "type": "Coin", "declarator": "MIN_NONDUST_OUTPUT = Coin.valueOf(2730)", "var_name": "MIN_NONDUST_OUTPUT"}, {"original_string": "public static final int MAX_INITIAL_INPUTS_OUTPUTS_SIZE = 20;", "modifier": "public static final", "type": "int", "declarator": "MAX_INITIAL_INPUTS_OUTPUTS_SIZE = 20", "var_name": "MAX_INITIAL_INPUTS_OUTPUTS_SIZE"}, {"original_string": "private long version;", "modifier": "private", "type": "long", "declarator": "version", "var_name": "version"}, {"original_string": "private ArrayList<TransactionInput> inputs;", "modifier": "private", "type": "ArrayList<TransactionInput>", "declarator": "inputs", "var_name": "inputs"}, {"original_string": "private ArrayList<TransactionOutput> outputs;", "modifier": "private", "type": "ArrayList<TransactionOutput>", "declarator": "outputs", "var_name": "outputs"}, {"original_string": "private long lockTime;", "modifier": "private", "type": "long", "declarator": "lockTime", "var_name": "lockTime"}, {"original_string": "private Date updatedAt;", "modifier": "private", "type": "Date", "declarator": "updatedAt", "var_name": "updatedAt"}, {"original_string": "private Sha256Hash hash;", "modifier": "private", "type": "Sha256Hash", "declarator": "hash", "var_name": "hash"}, {"original_string": "@Nullable private TransactionConfidence confidence;", "modifier": "@Nullable private", "type": "TransactionConfidence", "declarator": "confidence", "var_name": "confidence"}, {"original_string": "private Map<Sha256Hash, Integer> appearsInHashes;", "modifier": "private", "type": "Map<Sha256Hash, Integer>", "declarator": "appearsInHashes", "var_name": "appearsInHashes"}, {"original_string": "private int optimalEncodingMessageSize;", "modifier": "private", "type": "int", "declarator": "optimalEncodingMessageSize", "var_name": "optimalEncodingMessageSize"}, {"original_string": "private Purpose purpose = Purpose.UNKNOWN;", "modifier": "private", "type": "Purpose", "declarator": "purpose = Purpose.UNKNOWN", "var_name": "purpose"}, {"original_string": "@Nullable\n    private ExchangeRate exchangeRate;", "modifier": "@Nullable\n    private", "type": "ExchangeRate", "declarator": "exchangeRate", "var_name": "exchangeRate"}, {"original_string": "@Nullable\n    private String memo;", "modifier": "@Nullable\n    private", "type": "String", "declarator": "memo", "var_name": "memo"}, {"original_string": "@Nullable private Coin cachedValue;", "modifier": "@Nullable private", "type": "Coin", "declarator": "cachedValue", "var_name": "cachedValue"}, {"original_string": "@Nullable private TransactionBag cachedForBag;", "modifier": "@Nullable private", "type": "TransactionBag", "declarator": "cachedForBag", "var_name": "cachedForBag"}, {"original_string": "public static final byte SIGHASH_ANYONECANPAY_VALUE = (byte) 0x80;", "modifier": "public static final", "type": "byte", "declarator": "SIGHASH_ANYONECANPAY_VALUE = (byte) 0x80", "var_name": "SIGHASH_ANYONECANPAY_VALUE"}], "methods": [{"identifier": "Transaction", "parameters": "(NetworkParameters params)", "modifiers": "public", "return": "", "signature": " Transaction(NetworkParameters params)", "full_signature": "public  Transaction(NetworkParameters params)", "class_method_signature": "Transaction.Transaction(NetworkParameters params)", "testcase": false, "constructor": true}, {"identifier": "Transaction", "parameters": "(NetworkParameters params, byte[] payloadBytes)", "modifiers": "public", "return": "", "signature": " Transaction(NetworkParameters params, byte[] payloadBytes)", "full_signature": "public  Transaction(NetworkParameters params, byte[] payloadBytes)", "class_method_signature": "Transaction.Transaction(NetworkParameters params, byte[] payloadBytes)", "testcase": false, "constructor": true}, {"identifier": "Transaction", "parameters": "(NetworkParameters params, byte[] payload, int offset)", "modifiers": "public", "return": "", "signature": " Transaction(NetworkParameters params, byte[] payload, int offset)", "full_signature": "public  Transaction(NetworkParameters params, byte[] payload, int offset)", "class_method_signature": "Transaction.Transaction(NetworkParameters params, byte[] payload, int offset)", "testcase": false, "constructor": true}, {"identifier": "Transaction", "parameters": "(NetworkParameters params, byte[] payload, int offset, @Nullable Message parent, MessageSerializer setSerializer, int length)", "modifiers": "public", "return": "", "signature": " Transaction(NetworkParameters params, byte[] payload, int offset, @Nullable Message parent, MessageSerializer setSerializer, int length)", "full_signature": "public  Transaction(NetworkParameters params, byte[] payload, int offset, @Nullable Message parent, MessageSerializer setSerializer, int length)", "class_method_signature": "Transaction.Transaction(NetworkParameters params, byte[] payload, int offset, @Nullable Message parent, MessageSerializer setSerializer, int length)", "testcase": false, "constructor": true}, {"identifier": "Transaction", "parameters": "(NetworkParameters params, byte[] payload, @Nullable Message parent, MessageSerializer setSerializer, int length)", "modifiers": "public", "return": "", "signature": " Transaction(NetworkParameters params, byte[] payload, @Nullable Message parent, MessageSerializer setSerializer, int length)", "full_signature": "public  Transaction(NetworkParameters params, byte[] payload, @Nullable Message parent, MessageSerializer setSerializer, int length)", "class_method_signature": "Transaction.Transaction(NetworkParameters params, byte[] payload, @Nullable Message parent, MessageSerializer setSerializer, int length)", "testcase": false, "constructor": true}, {"identifier": "getHash", "parameters": "()", "modifiers": "@Override public", "return": "Sha256Hash", "signature": "Sha256Hash getHash()", "full_signature": "@Override public Sha256Hash getHash()", "class_method_signature": "Transaction.getHash()", "testcase": false, "constructor": false}, {"identifier": "setHash", "parameters": "(Sha256Hash hash)", "modifiers": "", "return": "void", "signature": "void setHash(Sha256Hash hash)", "full_signature": " void setHash(Sha256Hash hash)", "class_method_signature": "Transaction.setHash(Sha256Hash hash)", "testcase": false, "constructor": false}, {"identifier": "getHashAsString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHashAsString()", "full_signature": "public String getHashAsString()", "class_method_signature": "Transaction.getHashAsString()", "testcase": false, "constructor": false}, {"identifier": "getInputSum", "parameters": "()", "modifiers": "public", "return": "Coin", "signature": "Coin getInputSum()", "full_signature": "public Coin getInputSum()", "class_method_signature": "Transaction.getInputSum()", "testcase": false, "constructor": false}, {"identifier": "getValueSentToMe", "parameters": "(TransactionBag transactionBag)", "modifiers": "public", "return": "Coin", "signature": "Coin getValueSentToMe(TransactionBag transactionBag)", "full_signature": "public Coin getValueSentToMe(TransactionBag transactionBag)", "class_method_signature": "Transaction.getValueSentToMe(TransactionBag transactionBag)", "testcase": false, "constructor": false}, {"identifier": "getAppearsInHashes", "parameters": "()", "modifiers": "@Nullable public", "return": "Map<Sha256Hash, Integer>", "signature": "Map<Sha256Hash, Integer> getAppearsInHashes()", "full_signature": "@Nullable public Map<Sha256Hash, Integer> getAppearsInHashes()", "class_method_signature": "Transaction.getAppearsInHashes()", "testcase": false, "constructor": false}, {"identifier": "isPending", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPending()", "full_signature": "public boolean isPending()", "class_method_signature": "Transaction.isPending()", "testcase": false, "constructor": false}, {"identifier": "setBlockAppearance", "parameters": "(StoredBlock block, boolean bestChain, int relativityOffset)", "modifiers": "public", "return": "void", "signature": "void setBlockAppearance(StoredBlock block, boolean bestChain, int relativityOffset)", "full_signature": "public void setBlockAppearance(StoredBlock block, boolean bestChain, int relativityOffset)", "class_method_signature": "Transaction.setBlockAppearance(StoredBlock block, boolean bestChain, int relativityOffset)", "testcase": false, "constructor": false}, {"identifier": "addBlockAppearance", "parameters": "(final Sha256Hash blockHash, int relativityOffset)", "modifiers": "public", "return": "void", "signature": "void addBlockAppearance(final Sha256Hash blockHash, int relativityOffset)", "full_signature": "public void addBlockAppearance(final Sha256Hash blockHash, int relativityOffset)", "class_method_signature": "Transaction.addBlockAppearance(final Sha256Hash blockHash, int relativityOffset)", "testcase": false, "constructor": false}, {"identifier": "getValueSentFromMe", "parameters": "(TransactionBag wallet)", "modifiers": "public", "return": "Coin", "signature": "Coin getValueSentFromMe(TransactionBag wallet)", "full_signature": "public Coin getValueSentFromMe(TransactionBag wallet)", "class_method_signature": "Transaction.getValueSentFromMe(TransactionBag wallet)", "testcase": false, "constructor": false}, {"identifier": "getOutputSum", "parameters": "()", "modifiers": "public", "return": "Coin", "signature": "Coin getOutputSum()", "full_signature": "public Coin getOutputSum()", "class_method_signature": "Transaction.getOutputSum()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(TransactionBag wallet)", "modifiers": "public", "return": "Coin", "signature": "Coin getValue(TransactionBag wallet)", "full_signature": "public Coin getValue(TransactionBag wallet)", "class_method_signature": "Transaction.getValue(TransactionBag wallet)", "testcase": false, "constructor": false}, {"identifier": "getFee", "parameters": "()", "modifiers": "public", "return": "Coin", "signature": "Coin getFee()", "full_signature": "public Coin getFee()", "class_method_signature": "Transaction.getFee()", "testcase": false, "constructor": false}, {"identifier": "isAnyOutputSpent", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAnyOutputSpent()", "full_signature": "public boolean isAnyOutputSpent()", "class_method_signature": "Transaction.isAnyOutputSpent()", "testcase": false, "constructor": false}, {"identifier": "isEveryOwnedOutputSpent", "parameters": "(TransactionBag transactionBag)", "modifiers": "public", "return": "boolean", "signature": "boolean isEveryOwnedOutputSpent(TransactionBag transactionBag)", "full_signature": "public boolean isEveryOwnedOutputSpent(TransactionBag transactionBag)", "class_method_signature": "Transaction.isEveryOwnedOutputSpent(TransactionBag transactionBag)", "testcase": false, "constructor": false}, {"identifier": "getUpdateTime", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getUpdateTime()", "full_signature": "public Date getUpdateTime()", "class_method_signature": "Transaction.getUpdateTime()", "testcase": false, "constructor": false}, {"identifier": "setUpdateTime", "parameters": "(Date updatedAt)", "modifiers": "public", "return": "void", "signature": "void setUpdateTime(Date updatedAt)", "full_signature": "public void setUpdateTime(Date updatedAt)", "class_method_signature": "Transaction.setUpdateTime(Date updatedAt)", "testcase": false, "constructor": false}, {"identifier": "unCache", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void unCache()", "full_signature": "@Override protected void unCache()", "class_method_signature": "Transaction.unCache()", "testcase": false, "constructor": false}, {"identifier": "calcLength", "parameters": "(byte[] buf, int offset)", "modifiers": "protected static", "return": "int", "signature": "int calcLength(byte[] buf, int offset)", "full_signature": "protected static int calcLength(byte[] buf, int offset)", "class_method_signature": "Transaction.calcLength(byte[] buf, int offset)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void parse()", "full_signature": "@Override protected void parse()", "class_method_signature": "Transaction.parse()", "testcase": false, "constructor": false}, {"identifier": "parseInputs", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void parseInputs()", "full_signature": "private void parseInputs()", "class_method_signature": "Transaction.parseInputs()", "testcase": false, "constructor": false}, {"identifier": "parseOutputs", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void parseOutputs()", "full_signature": "private void parseOutputs()", "class_method_signature": "Transaction.parseOutputs()", "testcase": false, "constructor": false}, {"identifier": "parseWitnesses", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void parseWitnesses()", "full_signature": "private void parseWitnesses()", "class_method_signature": "Transaction.parseWitnesses()", "testcase": false, "constructor": false}, {"identifier": "hasWitnesses", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasWitnesses()", "full_signature": "public boolean hasWitnesses()", "class_method_signature": "Transaction.hasWitnesses()", "testcase": false, "constructor": false}, {"identifier": "getOptimalEncodingMessageSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getOptimalEncodingMessageSize()", "full_signature": "public int getOptimalEncodingMessageSize()", "class_method_signature": "Transaction.getOptimalEncodingMessageSize()", "testcase": false, "constructor": false}, {"identifier": "getMessageSizeForPriorityCalc", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMessageSizeForPriorityCalc()", "full_signature": "public int getMessageSizeForPriorityCalc()", "class_method_signature": "Transaction.getMessageSizeForPriorityCalc()", "testcase": false, "constructor": false}, {"identifier": "isCoinBase", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCoinBase()", "full_signature": "public boolean isCoinBase()", "class_method_signature": "Transaction.isCoinBase()", "testcase": false, "constructor": false}, {"identifier": "isMature", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMature()", "full_signature": "public boolean isMature()", "class_method_signature": "Transaction.isMature()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Transaction.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(@Nullable AbstractBlockChain chain)", "modifiers": "public", "return": "String", "signature": "String toString(@Nullable AbstractBlockChain chain)", "full_signature": "public String toString(@Nullable AbstractBlockChain chain)", "class_method_signature": "Transaction.toString(@Nullable AbstractBlockChain chain)", "testcase": false, "constructor": false}, {"identifier": "clearInputs", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearInputs()", "full_signature": "public void clearInputs()", "class_method_signature": "Transaction.clearInputs()", "testcase": false, "constructor": false}, {"identifier": "addInput", "parameters": "(TransactionOutput from)", "modifiers": "public", "return": "TransactionInput", "signature": "TransactionInput addInput(TransactionOutput from)", "full_signature": "public TransactionInput addInput(TransactionOutput from)", "class_method_signature": "Transaction.addInput(TransactionOutput from)", "testcase": false, "constructor": false}, {"identifier": "addInput", "parameters": "(TransactionInput input)", "modifiers": "public", "return": "TransactionInput", "signature": "TransactionInput addInput(TransactionInput input)", "full_signature": "public TransactionInput addInput(TransactionInput input)", "class_method_signature": "Transaction.addInput(TransactionInput input)", "testcase": false, "constructor": false}, {"identifier": "addInput", "parameters": "(Sha256Hash spendTxHash, long outputIndex, Script script)", "modifiers": "public", "return": "TransactionInput", "signature": "TransactionInput addInput(Sha256Hash spendTxHash, long outputIndex, Script script)", "full_signature": "public TransactionInput addInput(Sha256Hash spendTxHash, long outputIndex, Script script)", "class_method_signature": "Transaction.addInput(Sha256Hash spendTxHash, long outputIndex, Script script)", "testcase": false, "constructor": false}, {"identifier": "addSignedInput", "parameters": "(TransactionOutPoint prevOut, Script scriptPubKey, ECKey sigKey,\n                                           SigHash sigHash, boolean anyoneCanPay)", "modifiers": "public", "return": "TransactionInput", "signature": "TransactionInput addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, ECKey sigKey,\n                                           SigHash sigHash, boolean anyoneCanPay)", "full_signature": "public TransactionInput addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, ECKey sigKey,\n                                           SigHash sigHash, boolean anyoneCanPay)", "class_method_signature": "Transaction.addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, ECKey sigKey,\n                                           SigHash sigHash, boolean anyoneCanPay)", "testcase": false, "constructor": false}, {"identifier": "addSignedInput", "parameters": "(TransactionOutPoint prevOut, Script scriptPubKey, ECKey sigKey)", "modifiers": "public", "return": "TransactionInput", "signature": "TransactionInput addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, ECKey sigKey)", "full_signature": "public TransactionInput addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, ECKey sigKey)", "class_method_signature": "Transaction.addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, ECKey sigKey)", "testcase": false, "constructor": false}, {"identifier": "addSignedInput", "parameters": "(TransactionOutput output, ECKey signingKey)", "modifiers": "public", "return": "TransactionInput", "signature": "TransactionInput addSignedInput(TransactionOutput output, ECKey signingKey)", "full_signature": "public TransactionInput addSignedInput(TransactionOutput output, ECKey signingKey)", "class_method_signature": "Transaction.addSignedInput(TransactionOutput output, ECKey signingKey)", "testcase": false, "constructor": false}, {"identifier": "addSignedInput", "parameters": "(TransactionOutput output, ECKey signingKey, SigHash sigHash, boolean anyoneCanPay)", "modifiers": "public", "return": "TransactionInput", "signature": "TransactionInput addSignedInput(TransactionOutput output, ECKey signingKey, SigHash sigHash, boolean anyoneCanPay)", "full_signature": "public TransactionInput addSignedInput(TransactionOutput output, ECKey signingKey, SigHash sigHash, boolean anyoneCanPay)", "class_method_signature": "Transaction.addSignedInput(TransactionOutput output, ECKey signingKey, SigHash sigHash, boolean anyoneCanPay)", "testcase": false, "constructor": false}, {"identifier": "clearOutputs", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearOutputs()", "full_signature": "public void clearOutputs()", "class_method_signature": "Transaction.clearOutputs()", "testcase": false, "constructor": false}, {"identifier": "addOutput", "parameters": "(TransactionOutput to)", "modifiers": "public", "return": "TransactionOutput", "signature": "TransactionOutput addOutput(TransactionOutput to)", "full_signature": "public TransactionOutput addOutput(TransactionOutput to)", "class_method_signature": "Transaction.addOutput(TransactionOutput to)", "testcase": false, "constructor": false}, {"identifier": "addOutput", "parameters": "(Coin value, Address address)", "modifiers": "public", "return": "TransactionOutput", "signature": "TransactionOutput addOutput(Coin value, Address address)", "full_signature": "public TransactionOutput addOutput(Coin value, Address address)", "class_method_signature": "Transaction.addOutput(Coin value, Address address)", "testcase": false, "constructor": false}, {"identifier": "addOutput", "parameters": "(Coin value, ECKey pubkey)", "modifiers": "public", "return": "TransactionOutput", "signature": "TransactionOutput addOutput(Coin value, ECKey pubkey)", "full_signature": "public TransactionOutput addOutput(Coin value, ECKey pubkey)", "class_method_signature": "Transaction.addOutput(Coin value, ECKey pubkey)", "testcase": false, "constructor": false}, {"identifier": "addOutput", "parameters": "(Coin value, Script script)", "modifiers": "public", "return": "TransactionOutput", "signature": "TransactionOutput addOutput(Coin value, Script script)", "full_signature": "public TransactionOutput addOutput(Coin value, Script script)", "class_method_signature": "Transaction.addOutput(Coin value, Script script)", "testcase": false, "constructor": false}, {"identifier": "calculateSignature", "parameters": "(int inputIndex, ECKey key,\n                                                                byte[] redeemScript,\n                                                                SigHash hashType, boolean anyoneCanPay)", "modifiers": "public", "return": "TransactionSignature", "signature": "TransactionSignature calculateSignature(int inputIndex, ECKey key,\n                                                                byte[] redeemScript,\n                                                                SigHash hashType, boolean anyoneCanPay)", "full_signature": "public TransactionSignature calculateSignature(int inputIndex, ECKey key,\n                                                                byte[] redeemScript,\n                                                                SigHash hashType, boolean anyoneCanPay)", "class_method_signature": "Transaction.calculateSignature(int inputIndex, ECKey key,\n                                                                byte[] redeemScript,\n                                                                SigHash hashType, boolean anyoneCanPay)", "testcase": false, "constructor": false}, {"identifier": "calculateSignature", "parameters": "(int inputIndex, ECKey key,\n                                                                 Script redeemScript,\n                                                                 SigHash hashType, boolean anyoneCanPay)", "modifiers": "public", "return": "TransactionSignature", "signature": "TransactionSignature calculateSignature(int inputIndex, ECKey key,\n                                                                 Script redeemScript,\n                                                                 SigHash hashType, boolean anyoneCanPay)", "full_signature": "public TransactionSignature calculateSignature(int inputIndex, ECKey key,\n                                                                 Script redeemScript,\n                                                                 SigHash hashType, boolean anyoneCanPay)", "class_method_signature": "Transaction.calculateSignature(int inputIndex, ECKey key,\n                                                                 Script redeemScript,\n                                                                 SigHash hashType, boolean anyoneCanPay)", "testcase": false, "constructor": false}, {"identifier": "calculateSignature", "parameters": "(int inputIndex, ECKey key,\n                                                   @Nullable KeyParameter aesKey,\n                                                   byte[] redeemScript,\n                                                   SigHash hashType, boolean anyoneCanPay)", "modifiers": "public", "return": "TransactionSignature", "signature": "TransactionSignature calculateSignature(int inputIndex, ECKey key,\n                                                   @Nullable KeyParameter aesKey,\n                                                   byte[] redeemScript,\n                                                   SigHash hashType, boolean anyoneCanPay)", "full_signature": "public TransactionSignature calculateSignature(int inputIndex, ECKey key,\n                                                   @Nullable KeyParameter aesKey,\n                                                   byte[] redeemScript,\n                                                   SigHash hashType, boolean anyoneCanPay)", "class_method_signature": "Transaction.calculateSignature(int inputIndex, ECKey key,\n                                                   @Nullable KeyParameter aesKey,\n                                                   byte[] redeemScript,\n                                                   SigHash hashType, boolean anyoneCanPay)", "testcase": false, "constructor": false}, {"identifier": "calculateSignature", "parameters": "(int inputIndex, ECKey key,\n                                                   @Nullable KeyParameter aesKey,\n                                                   Script redeemScript,\n                                                   SigHash hashType, boolean anyoneCanPay)", "modifiers": "public", "return": "TransactionSignature", "signature": "TransactionSignature calculateSignature(int inputIndex, ECKey key,\n                                                   @Nullable KeyParameter aesKey,\n                                                   Script redeemScript,\n                                                   SigHash hashType, boolean anyoneCanPay)", "full_signature": "public TransactionSignature calculateSignature(int inputIndex, ECKey key,\n                                                   @Nullable KeyParameter aesKey,\n                                                   Script redeemScript,\n                                                   SigHash hashType, boolean anyoneCanPay)", "class_method_signature": "Transaction.calculateSignature(int inputIndex, ECKey key,\n                                                   @Nullable KeyParameter aesKey,\n                                                   Script redeemScript,\n                                                   SigHash hashType, boolean anyoneCanPay)", "testcase": false, "constructor": false}, {"identifier": "hashForSignature", "parameters": "(int inputIndex, byte[] redeemScript,\n                                                    SigHash type, boolean anyoneCanPay)", "modifiers": "public", "return": "Sha256Hash", "signature": "Sha256Hash hashForSignature(int inputIndex, byte[] redeemScript,\n                                                    SigHash type, boolean anyoneCanPay)", "full_signature": "public Sha256Hash hashForSignature(int inputIndex, byte[] redeemScript,\n                                                    SigHash type, boolean anyoneCanPay)", "class_method_signature": "Transaction.hashForSignature(int inputIndex, byte[] redeemScript,\n                                                    SigHash type, boolean anyoneCanPay)", "testcase": false, "constructor": false}, {"identifier": "hashForSignature", "parameters": "(int inputIndex, Script redeemScript,\n                                                    SigHash type, boolean anyoneCanPay)", "modifiers": "public", "return": "Sha256Hash", "signature": "Sha256Hash hashForSignature(int inputIndex, Script redeemScript,\n                                                    SigHash type, boolean anyoneCanPay)", "full_signature": "public Sha256Hash hashForSignature(int inputIndex, Script redeemScript,\n                                                    SigHash type, boolean anyoneCanPay)", "class_method_signature": "Transaction.hashForSignature(int inputIndex, Script redeemScript,\n                                                    SigHash type, boolean anyoneCanPay)", "testcase": false, "constructor": false}, {"identifier": "hashForSignature", "parameters": "(int inputIndex, byte[] connectedScript, byte sigHashType)", "modifiers": "public", "return": "Sha256Hash", "signature": "Sha256Hash hashForSignature(int inputIndex, byte[] connectedScript, byte sigHashType)", "full_signature": "public Sha256Hash hashForSignature(int inputIndex, byte[] connectedScript, byte sigHashType)", "class_method_signature": "Transaction.hashForSignature(int inputIndex, byte[] connectedScript, byte sigHashType)", "testcase": false, "constructor": false}, {"identifier": "bitcoinSerializeToStream", "parameters": "(OutputStream stream)", "modifiers": "@Override protected", "return": "void", "signature": "void bitcoinSerializeToStream(OutputStream stream)", "full_signature": "@Override protected void bitcoinSerializeToStream(OutputStream stream)", "class_method_signature": "Transaction.bitcoinSerializeToStream(OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "bitcoinSerializeToStream", "parameters": "(OutputStream stream, boolean useSegwit)", "modifiers": "protected", "return": "void", "signature": "void bitcoinSerializeToStream(OutputStream stream, boolean useSegwit)", "full_signature": "protected void bitcoinSerializeToStream(OutputStream stream, boolean useSegwit)", "class_method_signature": "Transaction.bitcoinSerializeToStream(OutputStream stream, boolean useSegwit)", "testcase": false, "constructor": false}, {"identifier": "getLockTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLockTime()", "full_signature": "public long getLockTime()", "class_method_signature": "Transaction.getLockTime()", "testcase": false, "constructor": false}, {"identifier": "setLockTime", "parameters": "(long lockTime)", "modifiers": "public", "return": "void", "signature": "void setLockTime(long lockTime)", "full_signature": "public void setLockTime(long lockTime)", "class_method_signature": "Transaction.setLockTime(long lockTime)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getVersion()", "full_signature": "public long getVersion()", "class_method_signature": "Transaction.getVersion()", "testcase": false, "constructor": false}, {"identifier": "setVersion", "parameters": "(int version)", "modifiers": "public", "return": "void", "signature": "void setVersion(int version)", "full_signature": "public void setVersion(int version)", "class_method_signature": "Transaction.setVersion(int version)", "testcase": false, "constructor": false}, {"identifier": "getInputs", "parameters": "()", "modifiers": "public", "return": "List<TransactionInput>", "signature": "List<TransactionInput> getInputs()", "full_signature": "public List<TransactionInput> getInputs()", "class_method_signature": "Transaction.getInputs()", "testcase": false, "constructor": false}, {"identifier": "getOutputs", "parameters": "()", "modifiers": "public", "return": "List<TransactionOutput>", "signature": "List<TransactionOutput> getOutputs()", "full_signature": "public List<TransactionOutput> getOutputs()", "class_method_signature": "Transaction.getOutputs()", "testcase": false, "constructor": false}, {"identifier": "getWalletOutputs", "parameters": "(TransactionBag transactionBag)", "modifiers": "public", "return": "List<TransactionOutput>", "signature": "List<TransactionOutput> getWalletOutputs(TransactionBag transactionBag)", "full_signature": "public List<TransactionOutput> getWalletOutputs(TransactionBag transactionBag)", "class_method_signature": "Transaction.getWalletOutputs(TransactionBag transactionBag)", "testcase": false, "constructor": false}, {"identifier": "shuffleOutputs", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shuffleOutputs()", "full_signature": "public void shuffleOutputs()", "class_method_signature": "Transaction.shuffleOutputs()", "testcase": false, "constructor": false}, {"identifier": "getInput", "parameters": "(long index)", "modifiers": "public", "return": "TransactionInput", "signature": "TransactionInput getInput(long index)", "full_signature": "public TransactionInput getInput(long index)", "class_method_signature": "Transaction.getInput(long index)", "testcase": false, "constructor": false}, {"identifier": "getOutput", "parameters": "(long index)", "modifiers": "public", "return": "TransactionOutput", "signature": "TransactionOutput getOutput(long index)", "full_signature": "public TransactionOutput getOutput(long index)", "class_method_signature": "Transaction.getOutput(long index)", "testcase": false, "constructor": false}, {"identifier": "getConfidence", "parameters": "()", "modifiers": "public", "return": "TransactionConfidence", "signature": "TransactionConfidence getConfidence()", "full_signature": "public TransactionConfidence getConfidence()", "class_method_signature": "Transaction.getConfidence()", "testcase": false, "constructor": false}, {"identifier": "getConfidence", "parameters": "(Context context)", "modifiers": "public", "return": "TransactionConfidence", "signature": "TransactionConfidence getConfidence(Context context)", "full_signature": "public TransactionConfidence getConfidence(Context context)", "class_method_signature": "Transaction.getConfidence(Context context)", "testcase": false, "constructor": false}, {"identifier": "getConfidence", "parameters": "(TxConfidenceTable table)", "modifiers": "public", "return": "TransactionConfidence", "signature": "TransactionConfidence getConfidence(TxConfidenceTable table)", "full_signature": "public TransactionConfidence getConfidence(TxConfidenceTable table)", "class_method_signature": "Transaction.getConfidence(TxConfidenceTable table)", "testcase": false, "constructor": false}, {"identifier": "hasConfidence", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasConfidence()", "full_signature": "public boolean hasConfidence()", "class_method_signature": "Transaction.hasConfidence()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Transaction.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Transaction.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getSigOpCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSigOpCount()", "full_signature": "public int getSigOpCount()", "class_method_signature": "Transaction.getSigOpCount()", "testcase": false, "constructor": false}, {"identifier": "checkCoinBaseHeight", "parameters": "(final int height)", "modifiers": "public", "return": "void", "signature": "void checkCoinBaseHeight(final int height)", "full_signature": "public void checkCoinBaseHeight(final int height)", "class_method_signature": "Transaction.checkCoinBaseHeight(final int height)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void verify()", "full_signature": "public void verify()", "class_method_signature": "Transaction.verify()", "testcase": false, "constructor": false}, {"identifier": "isTimeLocked", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTimeLocked()", "full_signature": "public boolean isTimeLocked()", "class_method_signature": "Transaction.isTimeLocked()", "testcase": false, "constructor": false}, {"identifier": "hasRelativeLockTime", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasRelativeLockTime()", "full_signature": "public boolean hasRelativeLockTime()", "class_method_signature": "Transaction.hasRelativeLockTime()", "testcase": false, "constructor": false}, {"identifier": "isOptInFullRBF", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOptInFullRBF()", "full_signature": "public boolean isOptInFullRBF()", "class_method_signature": "Transaction.isOptInFullRBF()", "testcase": false, "constructor": false}, {"identifier": "isFinal", "parameters": "(int height, long blockTimeSeconds)", "modifiers": "public", "return": "boolean", "signature": "boolean isFinal(int height, long blockTimeSeconds)", "full_signature": "public boolean isFinal(int height, long blockTimeSeconds)", "class_method_signature": "Transaction.isFinal(int height, long blockTimeSeconds)", "testcase": false, "constructor": false}, {"identifier": "estimateLockTime", "parameters": "(AbstractBlockChain chain)", "modifiers": "public", "return": "Date", "signature": "Date estimateLockTime(AbstractBlockChain chain)", "full_signature": "public Date estimateLockTime(AbstractBlockChain chain)", "class_method_signature": "Transaction.estimateLockTime(AbstractBlockChain chain)", "testcase": false, "constructor": false}, {"identifier": "getPurpose", "parameters": "()", "modifiers": "public", "return": "Purpose", "signature": "Purpose getPurpose()", "full_signature": "public Purpose getPurpose()", "class_method_signature": "Transaction.getPurpose()", "testcase": false, "constructor": false}, {"identifier": "setPurpose", "parameters": "(Purpose purpose)", "modifiers": "public", "return": "void", "signature": "void setPurpose(Purpose purpose)", "full_signature": "public void setPurpose(Purpose purpose)", "class_method_signature": "Transaction.setPurpose(Purpose purpose)", "testcase": false, "constructor": false}, {"identifier": "getExchangeRate", "parameters": "()", "modifiers": "@Nullable public", "return": "ExchangeRate", "signature": "ExchangeRate getExchangeRate()", "full_signature": "@Nullable public ExchangeRate getExchangeRate()", "class_method_signature": "Transaction.getExchangeRate()", "testcase": false, "constructor": false}, {"identifier": "setExchangeRate", "parameters": "(ExchangeRate exchangeRate)", "modifiers": "public", "return": "void", "signature": "void setExchangeRate(ExchangeRate exchangeRate)", "full_signature": "public void setExchangeRate(ExchangeRate exchangeRate)", "class_method_signature": "Transaction.setExchangeRate(ExchangeRate exchangeRate)", "testcase": false, "constructor": false}, {"identifier": "getMemo", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMemo()", "full_signature": "public String getMemo()", "class_method_signature": "Transaction.getMemo()", "testcase": false, "constructor": false}, {"identifier": "setMemo", "parameters": "(String memo)", "modifiers": "public", "return": "void", "signature": "void setMemo(String memo)", "full_signature": "public void setMemo(String memo)", "class_method_signature": "Transaction.setMemo(String memo)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ulordj/core/Transaction.java"}, "focal_method": {"identifier": "checkCoinBaseHeight", "parameters": "(final int height)", "modifiers": "public", "return": "void", "body": "public void checkCoinBaseHeight(final int height)\n            throws VerificationException {\n        checkArgument(height >= Block.BLOCK_HEIGHT_GENESIS);\n        checkState(isCoinBase());\n\n        // Check block height is in coinbase input script\n        final TransactionInput in = this.getInputs().get(0);\n        final ScriptBuilder builder = new ScriptBuilder();\n        builder.number(height);\n        final byte[] expected = builder.build().getProgram();\n        final byte[] actual = in.getScriptBytes();\n        if (actual.length < expected.length) {\n            throw new VerificationException.CoinbaseHeightMismatch(\"Block height mismatch in coinbase.\");\n        }\n        for (int scriptIdx = 0; scriptIdx < expected.length; scriptIdx++) {\n            if (actual[scriptIdx] != expected[scriptIdx]) {\n                throw new VerificationException.CoinbaseHeightMismatch(\"Block height mismatch in coinbase.\");\n            }\n        }\n    }", "signature": "void checkCoinBaseHeight(final int height)", "full_signature": "public void checkCoinBaseHeight(final int height)", "class_method_signature": "Transaction.checkCoinBaseHeight(final int height)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "checkState", "isCoinBase", "get", "getInputs", "number", "getProgram", "build", "getScriptBytes"]}, "repository": {"repo_id": 133357466, "url": "https://github.com/UlordChain/ulordj", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 23, "size": 7129, "license": "licensed"}}