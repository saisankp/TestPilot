{"test_class": {"identifier": "CompletableFutureFlowTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int POOL_SIZE = 4;", "modifier": "public static final", "type": "int", "declarator": "POOL_SIZE = 4", "var_name": "POOL_SIZE"}, {"original_string": "private ExecutorService pool;", "modifier": "private", "type": "ExecutorService", "declarator": "pool", "var_name": "pool"}], "file": "blog-code/src/test/java/pl/ciruk/blog/flow/CompletableFutureFlowTest.java"}, "test_case": {"identifier": "testFlowWithCustomForkJoinPool", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFlowWithCustomForkJoinPool() throws Exception {\n        pool = new ForkJoinPool(POOL_SIZE);\n\n        List<CompletableFuture<Integer>> futures = new ArrayList<>();\n\n        for (int i = 0; i < 20; i++) {\n            futures.add(\n                    CompletableFutureFlow.flowWithId(i, pool));\n        }\n\n        futures.forEach(CompletableFutureFlow::getFuture);\n    }", "signature": "void testFlowWithCustomForkJoinPool()", "full_signature": "@Test public void testFlowWithCustomForkJoinPool()", "class_method_signature": "CompletableFutureFlowTest.testFlowWithCustomForkJoinPool()", "testcase": true, "constructor": false, "invocations": ["add", "flowWithId", "forEach"]}, "focal_class": {"identifier": "CompletableFutureFlow", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "flowWithId", "parameters": "(int id, ExecutorService pool)", "modifiers": "static", "return": "CompletableFuture<Integer>", "signature": "CompletableFuture<Integer> flowWithId(int id, ExecutorService pool)", "full_signature": "static CompletableFuture<Integer> flowWithId(int id, ExecutorService pool)", "class_method_signature": "CompletableFutureFlow.flowWithId(int id, ExecutorService pool)", "testcase": false, "constructor": false}, {"identifier": "firstOperation", "parameters": "(int id, ExecutorService pool)", "modifiers": "private static", "return": "CompletableFuture<Integer>", "signature": "CompletableFuture<Integer> firstOperation(int id, ExecutorService pool)", "full_signature": "private static CompletableFuture<Integer> firstOperation(int id, ExecutorService pool)", "class_method_signature": "CompletableFutureFlow.firstOperation(int id, ExecutorService pool)", "testcase": false, "constructor": false}, {"identifier": "slowOperationAsync", "parameters": "(int flow, int step, ExecutorService pool)", "modifiers": "private static", "return": "CompletableFuture<Integer>", "signature": "CompletableFuture<Integer> slowOperationAsync(int flow, int step, ExecutorService pool)", "full_signature": "private static CompletableFuture<Integer> slowOperationAsync(int flow, int step, ExecutorService pool)", "class_method_signature": "CompletableFutureFlow.slowOperationAsync(int flow, int step, ExecutorService pool)", "testcase": false, "constructor": false}, {"identifier": "slowOperation", "parameters": "(int flow, int step)", "modifiers": "private static", "return": "int", "signature": "int slowOperation(int flow, int step)", "full_signature": "private static int slowOperation(int flow, int step)", "class_method_signature": "CompletableFutureFlow.slowOperation(int flow, int step)", "testcase": false, "constructor": false}, {"identifier": "secondOperation", "parameters": "(int id, ExecutorService pool)", "modifiers": "private static", "return": "CompletableFuture<Integer>", "signature": "CompletableFuture<Integer> secondOperation(int id, ExecutorService pool)", "full_signature": "private static CompletableFuture<Integer> secondOperation(int id, ExecutorService pool)", "class_method_signature": "CompletableFutureFlow.secondOperation(int id, ExecutorService pool)", "testcase": false, "constructor": false}, {"identifier": "thirdOperation", "parameters": "(int id, ExecutorService pool)", "modifiers": "private static", "return": "CompletableFuture<Integer>", "signature": "CompletableFuture<Integer> thirdOperation(int id, ExecutorService pool)", "full_signature": "private static CompletableFuture<Integer> thirdOperation(int id, ExecutorService pool)", "class_method_signature": "CompletableFutureFlow.thirdOperation(int id, ExecutorService pool)", "testcase": false, "constructor": false}, {"identifier": "getFuture", "parameters": "(CompletableFuture<Integer> future)", "modifiers": "static", "return": "void", "signature": "void getFuture(CompletableFuture<Integer> future)", "full_signature": "static void getFuture(CompletableFuture<Integer> future)", "class_method_signature": "CompletableFutureFlow.getFuture(CompletableFuture<Integer> future)", "testcase": false, "constructor": false}], "file": "blog-code/src/main/java/pl/ciruk/blog/flow/CompletableFutureFlow.java"}, "focal_method": {"identifier": "flowWithId", "parameters": "(int id, ExecutorService pool)", "modifiers": "static", "return": "CompletableFuture<Integer>", "body": "static CompletableFuture<Integer> flowWithId(int id, ExecutorService pool) {\n        return firstOperation(id, pool)\n                .thenCompose(__ -> secondOperation(id, pool))\n                .thenCompose(__ -> thirdOperation(id, pool));\n    }", "signature": "CompletableFuture<Integer> flowWithId(int id, ExecutorService pool)", "full_signature": "static CompletableFuture<Integer> flowWithId(int id, ExecutorService pool)", "class_method_signature": "CompletableFutureFlow.flowWithId(int id, ExecutorService pool)", "testcase": false, "constructor": false, "invocations": ["thenCompose", "thenCompose", "firstOperation", "secondOperation", "thirdOperation"]}, "repository": {"repo_id": 16896558, "url": "https://github.com/cpiotr/blog", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 7, "size": 49, "license": "licensed"}}