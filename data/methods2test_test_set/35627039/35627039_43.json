{"test_class": {"identifier": "StormEventCorrelationInjectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_COMPONENT_NAME = \"1-testComponent\";", "modifier": "private static final", "type": "String", "declarator": "TEST_COMPONENT_NAME = \"1-testComponent\"", "var_name": "TEST_COMPONENT_NAME"}, {"original_string": "private StormEventCorrelationInjector sut = new StormEventCorrelationInjector();", "modifier": "private", "type": "StormEventCorrelationInjector", "declarator": "sut = new StormEventCorrelationInjector()", "var_name": "sut"}, {"original_string": "private EventCorrelationInjector eventCorrelationInjector = new EventCorrelationInjector();", "modifier": "private", "type": "EventCorrelationInjector", "declarator": "eventCorrelationInjector = new EventCorrelationInjector()", "var_name": "eventCorrelationInjector"}, {"original_string": "@Injectable\n    private TopologyContext mockedTopologyContext;", "modifier": "@Injectable\n    private", "type": "TopologyContext", "declarator": "mockedTopologyContext", "var_name": "mockedTopologyContext"}, {"original_string": "public static final StreamlineEventImpl INPUT_STREAMLINE_EVENT = StreamlineEventImpl.builder()\n            .fieldsAndValues(new HashMap<String, Object>() {{\n                put(\"illuminance\", 70);\n                put(\"temp\", 104);\n                put(\"foo\", 100);\n                put(\"humidity\", \"40h\");\n            }})\n            .dataSourceId(\"ds-\" + System.currentTimeMillis())\n            .header(Collections.singletonMap(\"A\", 1))\n            .build();", "modifier": "public static final", "type": "StreamlineEventImpl", "declarator": "INPUT_STREAMLINE_EVENT = StreamlineEventImpl.builder()\n            .fieldsAndValues(new HashMap<String, Object>() {{\n                put(\"illuminance\", 70);\n                put(\"temp\", 104);\n                put(\"foo\", 100);\n                put(\"humidity\", \"40h\");\n            }})\n            .dataSourceId(\"ds-\" + System.currentTimeMillis())\n            .header(Collections.singletonMap(\"A\", 1))\n            .build()", "var_name": "INPUT_STREAMLINE_EVENT"}], "file": "streams/runners/storm/runtime/src/test/java/com/hortonworks/streamline/streams/runtime/storm/event/correlation/StormEventCorrelationInjectorTest.java"}, "test_case": {"identifier": "tupleArgsTestWithAParentWhichIsRootEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void tupleArgsTestWithAParentWhichIsRootEvent() throws Exception {\n        StreamlineEvent parentEvent = copyEventWithNewID();\n\n        // use same component name for parent and ancestor for easy testing\n        parentEvent = eventCorrelationInjector.injectCorrelationInformation(parentEvent, Collections.emptyList(), TEST_COMPONENT_NAME);\n\n        int parentTaskId = 1;\n        String parentComponentName = \"1-parentComponent\";\n\n        new Expectations() {{\n            mockedTopologyContext.getComponentId(parentTaskId);\n            result = parentComponentName;\n\n            mockedTopologyContext.getComponentOutputFields(parentComponentName, INPUT_STREAMLINE_EVENT.getSourceStream());\n            result = new Fields(StreamlineEvent.STREAMLINE_EVENT);\n        }};\n\n        Tuple parentTuple = new TupleImpl(mockedTopologyContext, new Values(parentEvent), parentTaskId,\n                INPUT_STREAMLINE_EVENT.getSourceStream());\n\n        StreamlineEvent injectedEvent = sut.injectCorrelationInformation(\n                new Values(INPUT_STREAMLINE_EVENT), Collections.singletonList(parentTuple), TEST_COMPONENT_NAME);\n\n        StreamlineEventTestUtil.assertEventIsProperlyCopied(injectedEvent, INPUT_STREAMLINE_EVENT);\n\n        // added headers\n        assertEquals(Collections.singleton(parentEvent.getId()), EventCorrelationInjector.getRootIds(injectedEvent));\n        assertEquals(Collections.singleton(parentEvent.getId()), EventCorrelationInjector.getParentIds(injectedEvent));\n        assertEquals(StormTopologyUtil.extractStreamlineComponentName(TEST_COMPONENT_NAME), EventCorrelationInjector.getSourceComponentName(injectedEvent));\n    }", "signature": "void tupleArgsTestWithAParentWhichIsRootEvent()", "full_signature": "@Test public void tupleArgsTestWithAParentWhichIsRootEvent()", "class_method_signature": "StormEventCorrelationInjectorTest.tupleArgsTestWithAParentWhichIsRootEvent()", "testcase": true, "constructor": false, "invocations": ["copyEventWithNewID", "injectCorrelationInformation", "emptyList", "getComponentId", "getComponentOutputFields", "getSourceStream", "getSourceStream", "injectCorrelationInformation", "singletonList", "assertEventIsProperlyCopied", "assertEquals", "singleton", "getId", "getRootIds", "assertEquals", "singleton", "getId", "getParentIds", "assertEquals", "extractStreamlineComponentName", "getSourceComponentName"]}, "focal_class": {"identifier": "StormEventCorrelationInjector", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "injectCorrelationInformation", "parameters": "(List<Object> tuple, List<Tuple> parentTuples, String componentName)", "modifiers": "public", "return": "StreamlineEvent", "signature": "StreamlineEvent injectCorrelationInformation(List<Object> tuple, List<Tuple> parentTuples, String componentName)", "full_signature": "public StreamlineEvent injectCorrelationInformation(List<Object> tuple, List<Tuple> parentTuples, String componentName)", "class_method_signature": "StormEventCorrelationInjector.injectCorrelationInformation(List<Object> tuple, List<Tuple> parentTuples, String componentName)", "testcase": false, "constructor": false}, {"identifier": "getStreamlineEventFromTuple", "parameters": "(Tuple tuple)", "modifiers": "private", "return": "StreamlineEvent", "signature": "StreamlineEvent getStreamlineEventFromTuple(Tuple tuple)", "full_signature": "private StreamlineEvent getStreamlineEventFromTuple(Tuple tuple)", "class_method_signature": "StormEventCorrelationInjector.getStreamlineEventFromTuple(Tuple tuple)", "testcase": false, "constructor": false}, {"identifier": "getStreamlineEventFromValues", "parameters": "(List<Object> tuple)", "modifiers": "private", "return": "StreamlineEvent", "signature": "StreamlineEvent getStreamlineEventFromValues(List<Object> tuple)", "full_signature": "private StreamlineEvent getStreamlineEventFromValues(List<Object> tuple)", "class_method_signature": "StormEventCorrelationInjector.getStreamlineEventFromValues(List<Object> tuple)", "testcase": false, "constructor": false}], "file": "streams/runners/storm/runtime/src/main/java/com/hortonworks/streamline/streams/runtime/storm/event/correlation/StormEventCorrelationInjector.java"}, "focal_method": {"identifier": "injectCorrelationInformation", "parameters": "(List<Object> tuple, List<Tuple> parentTuples, String componentName)", "modifiers": "public", "return": "StreamlineEvent", "body": "public StreamlineEvent injectCorrelationInformation(List<Object> tuple, List<Tuple> parentTuples, String componentName) {\n        EventCorrelationInjector eventCorrelationInjector = new EventCorrelationInjector();\n        return eventCorrelationInjector.injectCorrelationInformation(\n                getStreamlineEventFromValues(tuple),\n                parentTuples.stream().map(this::getStreamlineEventFromTuple).collect(Collectors.toList()),\n                StormTopologyUtil.extractStreamlineComponentName(componentName));\n    }", "signature": "StreamlineEvent injectCorrelationInformation(List<Object> tuple, List<Tuple> parentTuples, String componentName)", "full_signature": "public StreamlineEvent injectCorrelationInformation(List<Object> tuple, List<Tuple> parentTuples, String componentName)", "class_method_signature": "StormEventCorrelationInjector.injectCorrelationInformation(List<Object> tuple, List<Tuple> parentTuples, String componentName)", "testcase": false, "constructor": false, "invocations": ["injectCorrelationInformation", "getStreamlineEventFromValues", "collect", "map", "stream", "toList", "extractStreamlineComponentName"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}