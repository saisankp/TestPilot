{"test_class": {"identifier": "RedisRealmTest", "superclass": "extends Assert", "interfaces": "", "fields": [], "file": "fathom-security-redis/src/test/java/fathom/realm/redis/RedisRealmTest.java"}, "test_case": {"identifier": "basicTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void basicTest() {\n        RedisRealm realm = getRealm();\n        Account account = null;\n\n        // Phineas\n        account = realm.authenticate(\"phineas\", \"fail\");\n        assertNull(account);\n        account = realm.authenticate(\"phineas\", \"iKnowWhatWereGonnaDoToday\");\n        assertNotNull(account);\n        assertEquals(\"phineas\", account.getUsername());\n        assertEquals(\"Phineas Flynn\", account.getName());\n        assertTrue(account.getEmailAddresses().contains(\"phineas.flynn@disney.com\"));\n        assertTrue(account.hasRole(\"inventor\"));\n        assertTrue(account.isPermitted(\"secure:view\"));\n\n        // Ferb\n        account = realm.authenticate(\"ferb\", \"fail\");\n        assertNull(account);\n        account = realm.authenticate(\"ferb\", \"ferb\");\n        assertNotNull(account);\n        assertEquals(\"ferb\", account.getUsername());\n        assertEquals(\"Ferb Fletcher\", account.getName());\n        assertTrue(account.getEmailAddresses().contains(\"ferb.fletcher@disney.com\"));\n        assertTrue(account.hasRole(\"inventor\"));\n        assertTrue(account.isPermitted(\"secure:view\"));\n\n        // Candace\n        account = realm.authenticate(\"candace\", \"fail\");\n        assertNull(account);\n        account = realm.authenticate(\"candace\", \"ilovejeremy\");\n        assertNotNull(account);\n        assertEquals(\"candace\", account.getUsername());\n        assertEquals(\"Candace Flynn\", account.getName());\n        assertTrue(account.getEmailAddresses().contains(\"candace.flynn@disney.com\"));\n        assertFalse(account.hasRole(\"inventor\"));\n        assertTrue(account.isPermitted(\"secure:view\"));\n\n        // Linda\n        account = realm.authenticate(\"linda\", \"fail\");\n        assertNull(account);\n        account = realm.authenticate(\"linda\", \"imLindanaAndIWannaHaveFun\");\n        assertNotNull(account);\n        assertEquals(\"linda\", account.getUsername());\n        assertEquals(\"Linda Flynn-Fletcher\", account.getName());\n        assertTrue(account.getEmailAddresses().contains(\"linda.fletcher@disney.com\"));\n        assertFalse(account.hasRole(\"inventor\"));\n        assertFalse(account.isPermitted(\"secure:view\"));\n\n        // Doofenshmirtz\n        account = realm.authenticate(\"heinz\", \"CurseYouPerryThePlatypus\");\n        assertNull(account);\n\n    }", "signature": "void basicTest()", "full_signature": "@Test public void basicTest()", "class_method_signature": "RedisRealmTest.basicTest()", "testcase": true, "constructor": false, "invocations": ["getRealm", "authenticate", "assertNull", "authenticate", "assertNotNull", "assertEquals", "getUsername", "assertEquals", "getName", "assertTrue", "contains", "getEmailAddresses", "assertTrue", "hasRole", "assertTrue", "isPermitted", "authenticate", "assertNull", "authenticate", "assertNotNull", "assertEquals", "getUsername", "assertEquals", "getName", "assertTrue", "contains", "getEmailAddresses", "assertTrue", "hasRole", "assertTrue", "isPermitted", "authenticate", "assertNull", "authenticate", "assertNotNull", "assertEquals", "getUsername", "assertEquals", "getName", "assertTrue", "contains", "getEmailAddresses", "assertFalse", "hasRole", "assertTrue", "isPermitted", "authenticate", "assertNull", "authenticate", "assertNotNull", "assertEquals", "getUsername", "assertEquals", "getName", "assertTrue", "contains", "getEmailAddresses", "assertFalse", "hasRole", "assertFalse", "isPermitted", "authenticate", "assertNull"]}, "focal_class": {"identifier": "RedisRealm", "superclass": "extends CachingRealm", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(RedisRealm.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RedisRealm.class)", "var_name": "log"}, {"original_string": "private JedisPool pool;", "modifier": "private", "type": "JedisPool", "declarator": "pool", "var_name": "pool"}, {"original_string": "private String redisUrl;", "modifier": "private", "type": "String", "declarator": "redisUrl", "var_name": "redisUrl"}, {"original_string": "private String redisPassword;", "modifier": "private", "type": "String", "declarator": "redisPassword", "var_name": "redisPassword"}, {"original_string": "private String passwordMapping;", "modifier": "private", "type": "String", "declarator": "passwordMapping", "var_name": "passwordMapping"}, {"original_string": "private String nameMapping;", "modifier": "private", "type": "String", "declarator": "nameMapping", "var_name": "nameMapping"}, {"original_string": "private String emailMapping;", "modifier": "private", "type": "String", "declarator": "emailMapping", "var_name": "emailMapping"}, {"original_string": "private String roleMapping;", "modifier": "private", "type": "String", "declarator": "roleMapping", "var_name": "roleMapping"}, {"original_string": "private String permissionMapping;", "modifier": "private", "type": "String", "declarator": "permissionMapping", "var_name": "permissionMapping"}, {"original_string": "private String startScript;", "modifier": "private", "type": "String", "declarator": "startScript", "var_name": "startScript"}, {"original_string": "private String stopScript;", "modifier": "private", "type": "String", "declarator": "stopScript", "var_name": "stopScript"}], "methods": [{"identifier": "RedisRealm", "parameters": "()", "modifiers": "public", "return": "", "signature": " RedisRealm()", "full_signature": "public  RedisRealm()", "class_method_signature": "RedisRealm.RedisRealm()", "testcase": false, "constructor": true}, {"identifier": "setup", "parameters": "(Config config)", "modifiers": "@Override public", "return": "void", "signature": "void setup(Config config)", "full_signature": "@Override public void setup(Config config)", "class_method_signature": "RedisRealm.setup(Config config)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "RedisRealm.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "RedisRealm.stop()", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(StandardCredentials requestCredentials)", "modifiers": "@Override public", "return": "Account", "signature": "Account authenticate(StandardCredentials requestCredentials)", "full_signature": "@Override public Account authenticate(StandardCredentials requestCredentials)", "class_method_signature": "RedisRealm.authenticate(StandardCredentials requestCredentials)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(final String username, final String password)", "modifiers": "@Override public", "return": "Account", "signature": "Account authenticate(final String username, final String password)", "full_signature": "@Override public Account authenticate(final String username, final String password)", "class_method_signature": "RedisRealm.authenticate(final String username, final String password)", "testcase": false, "constructor": false}, {"identifier": "key", "parameters": "(String username, String pattern)", "modifiers": "private", "return": "String", "signature": "String key(String username, String pattern)", "full_signature": "private String key(String username, String pattern)", "class_method_signature": "RedisRealm.key(String username, String pattern)", "testcase": false, "constructor": false}, {"identifier": "asNull", "parameters": "(String value)", "modifiers": "private", "return": "String", "signature": "String asNull(String value)", "full_signature": "private String asNull(String value)", "class_method_signature": "RedisRealm.asNull(String value)", "testcase": false, "constructor": false}, {"identifier": "asArray", "parameters": "(Collection<String> strings)", "modifiers": "private", "return": "String[]", "signature": "String[] asArray(Collection<String> strings)", "full_signature": "private String[] asArray(Collection<String> strings)", "class_method_signature": "RedisRealm.asArray(Collection<String> strings)", "testcase": false, "constructor": false}, {"identifier": "unwrapQuotes", "parameters": "(String value)", "modifiers": "private", "return": "String", "signature": "String unwrapQuotes(String value)", "full_signature": "private String unwrapQuotes(String value)", "class_method_signature": "RedisRealm.unwrapQuotes(String value)", "testcase": false, "constructor": false}, {"identifier": "executeScript", "parameters": "(String scriptPath)", "modifiers": "protected", "return": "void", "signature": "void executeScript(String scriptPath)", "full_signature": "protected void executeScript(String scriptPath)", "class_method_signature": "RedisRealm.executeScript(String scriptPath)", "testcase": false, "constructor": false}, {"identifier": "executeScript", "parameters": "(URL scriptUrl)", "modifiers": "protected", "return": "void", "signature": "void executeScript(URL scriptUrl)", "full_signature": "protected void executeScript(URL scriptUrl)", "class_method_signature": "RedisRealm.executeScript(URL scriptUrl)", "testcase": false, "constructor": false}], "file": "fathom-security-redis/src/main/java/fathom/realm/redis/RedisRealm.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(StandardCredentials requestCredentials)", "modifiers": "@Override public", "return": "Account", "body": "@Override\n    public Account authenticate(StandardCredentials requestCredentials) {\n\n        final String username = requestCredentials.getUsername();\n        final String password = requestCredentials.getPassword();\n\n        if (hasAccount(username)) {\n            // account is cached, authenticate against the cache\n            return super.authenticate(requestCredentials);\n        }\n\n        return authenticate(username, password);\n    }", "signature": "Account authenticate(StandardCredentials requestCredentials)", "full_signature": "@Override public Account authenticate(StandardCredentials requestCredentials)", "class_method_signature": "RedisRealm.authenticate(StandardCredentials requestCredentials)", "testcase": false, "constructor": false, "invocations": ["getUsername", "getPassword", "hasAccount", "authenticate", "authenticate"]}, "repository": {"repo_id": 35689778, "url": "https://github.com/gitblit/fathom", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 1076, "license": "licensed"}}