{"test_class": {"identifier": "SpikeInterpolationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final double[] useAr = {-2, 1.3, 1.7, 2, 2.9, 3};", "modifier": "private final", "type": "double[]", "declarator": "useAr = {-2, 1.3, 1.7, 2, 2.9, 3}", "var_name": "useAr"}], "file": "s3tbx-olci-radiometry/src/test/java/org/esa/s3tbx/olci/radiometry/rayleigh/SpikeInterpolationTest.java"}, "test_case": {"identifier": "testClosestToLowerBound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClosestToLowerBound() {\n        assertEquals(1.3, SpikeInterpolation.getLowerBound(useAr, 1.4), 1e-8);\n        assertEquals(1.3, SpikeInterpolation.getLowerBound(useAr, 1.5), 1e-8);\n        assertEquals(1.7, SpikeInterpolation.getLowerBound(useAr, 1.9), 1e-8);\n        assertEquals(2.0, SpikeInterpolation.getLowerBound(useAr, 2.1), 1e-8);\n        assertEquals(3, SpikeInterpolation.getLowerBound(useAr, 3), 1e-8);\n        assertEquals(3, SpikeInterpolation.getLowerBound(useAr, 4), 1e-8);\n        assertEquals(3, SpikeInterpolation.getLowerBound(useAr, 30), 1e-8);\n    }", "signature": "void testClosestToLowerBound()", "full_signature": "@Test public void testClosestToLowerBound()", "class_method_signature": "SpikeInterpolationTest.testClosestToLowerBound()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getLowerBound", "assertEquals", "getLowerBound", "assertEquals", "getLowerBound", "assertEquals", "getLowerBound", "assertEquals", "getLowerBound", "assertEquals", "getLowerBound", "assertEquals", "getLowerBound"]}, "focal_class": {"identifier": "SpikeInterpolation", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "interpolate2D", "parameters": "(double[][] doubles2D, double[] xCoordinate, double[] yCoordinate,\n                                double x, double y)", "modifiers": "static", "return": "double", "signature": "double interpolate2D(double[][] doubles2D, double[] xCoordinate, double[] yCoordinate,\n                                double x, double y)", "full_signature": "static double interpolate2D(double[][] doubles2D, double[] xCoordinate, double[] yCoordinate,\n                                double x, double y)", "class_method_signature": "SpikeInterpolation.interpolate2D(double[][] doubles2D, double[] xCoordinate, double[] yCoordinate,\n                                double x, double y)", "testcase": false, "constructor": false}, {"identifier": "interBetween", "parameters": "(double lowerY, double upperY, double upperX, double lowerX, double position)", "modifiers": "static", "return": "double", "signature": "double interBetween(double lowerY, double upperY, double upperX, double lowerX, double position)", "full_signature": "static double interBetween(double lowerY, double upperY, double upperX, double lowerX, double position)", "class_method_signature": "SpikeInterpolation.interBetween(double lowerY, double upperY, double upperX, double lowerX, double position)", "testcase": false, "constructor": false}, {"identifier": "arrayIndex", "parameters": "(double[] values, double val)", "modifiers": "static", "return": "int", "signature": "int arrayIndex(double[] values, double val)", "full_signature": "static int arrayIndex(double[] values, double val)", "class_method_signature": "SpikeInterpolation.arrayIndex(double[] values, double val)", "testcase": false, "constructor": false}, {"identifier": "getUpperValue", "parameters": "(double[] doubles, double val)", "modifiers": "static", "return": "double", "signature": "double getUpperValue(double[] doubles, double val)", "full_signature": "static double getUpperValue(double[] doubles, double val)", "class_method_signature": "SpikeInterpolation.getUpperValue(double[] doubles, double val)", "testcase": false, "constructor": false}, {"identifier": "getLowerBound", "parameters": "(double[] doubles, double val)", "modifiers": "static", "return": "double", "signature": "double getLowerBound(double[] doubles, double val)", "full_signature": "static double getLowerBound(double[] doubles, double val)", "class_method_signature": "SpikeInterpolation.getLowerBound(double[] doubles, double val)", "testcase": false, "constructor": false}], "file": "s3tbx-olci-radiometry/src/main/java/org/esa/s3tbx/olci/radiometry/rayleigh/SpikeInterpolation.java"}, "focal_method": {"identifier": "getLowerBound", "parameters": "(double[] doubles, double val)", "modifiers": "static", "return": "double", "body": "static double getLowerBound(double[] doubles, double val) {\n        double xMin = Double.MAX_VALUE;\n\n        for (double current : doubles) {\n            xMin = current <= val ? current : xMin;\n        }\n        if (xMin > val) {\n            throw new IllegalArgumentException(\"Can't find the closest min value of \" + val);\n        }\n\n        return xMin;\n    }", "signature": "double getLowerBound(double[] doubles, double val)", "full_signature": "static double getLowerBound(double[] doubles, double val)", "class_method_signature": "SpikeInterpolation.getLowerBound(double[] doubles, double val)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}