{"test_class": {"identifier": "GroovyExpressionTest", "superclass": "", "interfaces": "", "fields": [], "file": "streams/runtime/src/test/java/com/hortonworks/streamline/streams/runtime/rule/condition/expression/GroovyExpressionTest.java"}, "test_case": {"identifier": "testArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testArray() throws Exception {\n        Condition condition = new Condition();\n        condition.setExpression(new BinaryExpression(Operator.LESS_THAN, new ArrayFieldExpression(getVariable(\"arr\"), 100),\n                                                     getVariable(\"b\")));\n        GroovyExpression expr = new GroovyExpression(condition);\n        Assert.assertEquals(\"arr[100] < b\", expr.asString());\n    }", "signature": "void testArray()", "full_signature": "@Test public void testArray()", "class_method_signature": "GroovyExpressionTest.testArray()", "testcase": true, "constructor": false, "invocations": ["setExpression", "getVariable", "getVariable", "assertEquals", "asString"]}, "focal_class": {"identifier": "GroovyExpression", "superclass": "extends ExpressionRuntime", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(GroovyExpression.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(GroovyExpression.class)", "var_name": "LOG"}], "methods": [{"identifier": "GroovyExpression", "parameters": "(Condition condition)", "modifiers": "public", "return": "", "signature": " GroovyExpression(Condition condition)", "full_signature": "public  GroovyExpression(Condition condition)", "class_method_signature": "GroovyExpression.GroovyExpression(Condition condition)", "testcase": false, "constructor": true}, {"identifier": "asString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String asString()", "full_signature": "@Override public String asString()", "class_method_signature": "GroovyExpression.asString()", "testcase": false, "constructor": false}], "file": "streams/runtime/src/main/java/com/hortonworks/streamline/streams/runtime/rule/condition/expression/GroovyExpression.java"}, "focal_method": {"identifier": "asString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String asString() {\n        if (expression == null) {           // Builds and caches the expression string the first time it is called\n            GroovyExpressionTranslator expressionTranslator = new GroovyExpressionTranslator();\n            condition.getExpression().accept(expressionTranslator);\n            expression = expressionTranslator.getTranslatedExpression();\n        }\n        return expression;\n    }", "signature": "String asString()", "full_signature": "@Override public String asString()", "class_method_signature": "GroovyExpression.asString()", "testcase": false, "constructor": false, "invocations": ["accept", "getExpression", "getTranslatedExpression"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}