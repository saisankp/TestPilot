{"test_class": {"identifier": "DataTypeGrammarParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int TYPE = 1984;", "modifier": "private final", "type": "int", "declarator": "TYPE = 1984", "var_name": "TYPE"}, {"original_string": "private DataTypeGrammarParser parser;", "modifier": "private", "type": "DataTypeGrammarParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private DataTypePattern pattern;", "modifier": "private", "type": "DataTypePattern", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "private DataType type;", "modifier": "private", "type": "DataType", "declarator": "type", "var_name": "type"}], "file": "debezium-core/src/test/java/io/debezium/relational/ddl/DataTypeGrammarParserTest.java"}, "test_case": {"identifier": "shouldParseGrammarWithOneRequiredTokenAndLength", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldParseGrammarWithOneRequiredTokenAndLength() {\n        pattern = parser.parse(TYPE, \"BIT(L)\");\n        assertThat(pattern).isNotNull();\n        type = pattern.match(text(\"BIT(3)\"));\n        assertThat(type.arrayDimensions()).isNull();\n        assertThat(type.length()).isEqualTo(3);\n        assertThat(type.scale()).isEqualTo(-1);\n        assertThat(type.name()).isEqualTo(\"BIT\");\n        assertThat(type.expression()).isEqualTo(\"BIT(3)\");\n        assertThat(type.jdbcType()).isEqualTo(TYPE);\n    }", "signature": "void shouldParseGrammarWithOneRequiredTokenAndLength()", "full_signature": "@Test public void shouldParseGrammarWithOneRequiredTokenAndLength()", "class_method_signature": "DataTypeGrammarParserTest.shouldParseGrammarWithOneRequiredTokenAndLength()", "testcase": true, "constructor": false, "invocations": ["parse", "isNotNull", "assertThat", "match", "text", "isNull", "assertThat", "arrayDimensions", "isEqualTo", "assertThat", "length", "isEqualTo", "assertThat", "scale", "isEqualTo", "assertThat", "name", "isEqualTo", "assertThat", "expression", "isEqualTo", "assertThat", "jdbcType"]}, "focal_class": {"identifier": "DataTypeGrammarParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DdlTokenizer tokenizer = new DdlTokenizer(true);", "modifier": "private final", "type": "DdlTokenizer", "declarator": "tokenizer = new DdlTokenizer(true)", "var_name": "tokenizer"}], "methods": [{"identifier": "DataTypeGrammarParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " DataTypeGrammarParser()", "full_signature": "public  DataTypeGrammarParser()", "class_method_signature": "DataTypeGrammarParser.DataTypeGrammarParser()", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(int jdbcType, String dataTypeDefn)", "modifiers": "public", "return": "DataTypePattern", "signature": "DataTypePattern parse(int jdbcType, String dataTypeDefn)", "full_signature": "public DataTypePattern parse(int jdbcType, String dataTypeDefn)", "class_method_signature": "DataTypeGrammarParser.parse(int jdbcType, String dataTypeDefn)", "testcase": false, "constructor": false}, {"identifier": "parseMultiple", "parameters": "(TokenStream stream)", "modifiers": "protected", "return": "Pattern", "signature": "Pattern parseMultiple(TokenStream stream)", "full_signature": "protected Pattern parseMultiple(TokenStream stream)", "class_method_signature": "DataTypeGrammarParser.parseMultiple(TokenStream stream)", "testcase": false, "constructor": false}, {"identifier": "parsePattern", "parameters": "(TokenStream stream)", "modifiers": "protected", "return": "Pattern", "signature": "Pattern parsePattern(TokenStream stream)", "full_signature": "protected Pattern parsePattern(TokenStream stream)", "class_method_signature": "DataTypeGrammarParser.parsePattern(TokenStream stream)", "testcase": false, "constructor": false}, {"identifier": "parseOptional", "parameters": "(TokenStream stream, Function<TokenStream, Pattern> inside)", "modifiers": "protected", "return": "Pattern", "signature": "Pattern parseOptional(TokenStream stream, Function<TokenStream, Pattern> inside)", "full_signature": "protected Pattern parseOptional(TokenStream stream, Function<TokenStream, Pattern> inside)", "class_method_signature": "DataTypeGrammarParser.parseOptional(TokenStream stream, Function<TokenStream, Pattern> inside)", "testcase": false, "constructor": false}, {"identifier": "parseArrayDimensions", "parameters": "(TokenStream stream)", "modifiers": "protected", "return": "Pattern", "signature": "Pattern parseArrayDimensions(TokenStream stream)", "full_signature": "protected Pattern parseArrayDimensions(TokenStream stream)", "class_method_signature": "DataTypeGrammarParser.parseArrayDimensions(TokenStream stream)", "testcase": false, "constructor": false}, {"identifier": "parseLength", "parameters": "(TokenStream stream)", "modifiers": "protected", "return": "Pattern", "signature": "Pattern parseLength(TokenStream stream)", "full_signature": "protected Pattern parseLength(TokenStream stream)", "class_method_signature": "DataTypeGrammarParser.parseLength(TokenStream stream)", "testcase": false, "constructor": false}, {"identifier": "parseScale", "parameters": "(TokenStream stream)", "modifiers": "protected", "return": "Pattern", "signature": "Pattern parseScale(TokenStream stream)", "full_signature": "protected Pattern parseScale(TokenStream stream)", "class_method_signature": "DataTypeGrammarParser.parseScale(TokenStream stream)", "testcase": false, "constructor": false}, {"identifier": "parseLengthLiteral", "parameters": "(TokenStream stream)", "modifiers": "protected", "return": "Pattern", "signature": "Pattern parseLengthLiteral(TokenStream stream)", "full_signature": "protected Pattern parseLengthLiteral(TokenStream stream)", "class_method_signature": "DataTypeGrammarParser.parseLengthLiteral(TokenStream stream)", "testcase": false, "constructor": false}, {"identifier": "parseScaleLiteral", "parameters": "(TokenStream stream)", "modifiers": "protected", "return": "Pattern", "signature": "Pattern parseScaleLiteral(TokenStream stream)", "full_signature": "protected Pattern parseScaleLiteral(TokenStream stream)", "class_method_signature": "DataTypeGrammarParser.parseScaleLiteral(TokenStream stream)", "testcase": false, "constructor": false}], "file": "debezium-core/src/main/java/io/debezium/relational/ddl/DataTypeGrammarParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(int jdbcType, String dataTypeDefn)", "modifiers": "public", "return": "DataTypePattern", "body": "public DataTypePattern parse(int jdbcType, String dataTypeDefn) throws ParsingException {\n        TokenStream stream = new TokenStream(dataTypeDefn, tokenizer, false);\n        stream.start();\n        Pattern pattern = parseMultiple(stream);\n        return pattern != null ? new DataTypePattern(pattern, jdbcType) : null;\n    }", "signature": "DataTypePattern parse(int jdbcType, String dataTypeDefn)", "full_signature": "public DataTypePattern parse(int jdbcType, String dataTypeDefn)", "class_method_signature": "DataTypeGrammarParser.parse(int jdbcType, String dataTypeDefn)", "testcase": false, "constructor": false, "invocations": ["start", "parseMultiple"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}