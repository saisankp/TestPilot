{"test_class": {"identifier": "ActorsPresenterTest", "superclass": "extends UnitTest", "interfaces": "", "fields": [{"original_string": "@Mock private ActorsPresenter.View view;", "modifier": "@Mock private", "type": "ActorsPresenter.View", "declarator": "view", "var_name": "view"}, {"original_string": "@Mock private GetActorsByQuery useCaseGetActorsByQueryMock;", "modifier": "@Mock private", "type": "GetActorsByQuery", "declarator": "useCaseGetActorsByQueryMock", "var_name": "useCaseGetActorsByQueryMock"}, {"original_string": "private ActorsPresenter presenter;", "modifier": "private", "type": "ActorsPresenter", "declarator": "presenter", "var_name": "presenter"}], "file": "app/src/test/java/com/ru/devit/mediateka/presentation/actorlist/ActorsPresenterTest.java"}, "test_case": {"identifier": "shouldUseCaseDisposeWhenPresenterDestroy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUseCaseDisposeWhenPresenterDestroy(){\n        presenter.onDestroy();\n\n        verify(useCaseGetActorsByQueryMock).removeActions();\n        verify(useCaseGetActorsByQueryMock).dispose();\n    }", "signature": "void shouldUseCaseDisposeWhenPresenterDestroy()", "full_signature": "@Test public void shouldUseCaseDisposeWhenPresenterDestroy()", "class_method_signature": "ActorsPresenterTest.shouldUseCaseDisposeWhenPresenterDestroy()", "testcase": true, "constructor": false, "invocations": ["onDestroy", "removeActions", "verify", "dispose", "verify"]}, "focal_class": {"identifier": "ActorsPresenter", "superclass": "extends BasePresenter<ActorsPresenter.View>", "interfaces": "", "fields": [{"original_string": "private List<Actor> actors;", "modifier": "private", "type": "List<Actor>", "declarator": "actors", "var_name": "actors"}, {"original_string": "private final GetActorsByQuery getActorsByQuery;", "modifier": "private final", "type": "GetActorsByQuery", "declarator": "getActorsByQuery", "var_name": "getActorsByQuery"}], "methods": [{"identifier": "ActorsPresenter", "parameters": "(GetActorsByQuery getActorsByQuery)", "modifiers": "public", "return": "", "signature": " ActorsPresenter(GetActorsByQuery getActorsByQuery)", "full_signature": "public  ActorsPresenter(GetActorsByQuery getActorsByQuery)", "class_method_signature": "ActorsPresenter.ActorsPresenter(GetActorsByQuery getActorsByQuery)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "ActorsPresenter.initialize()", "testcase": false, "constructor": false}, {"identifier": "setActors", "parameters": "(List<Actor> actors)", "modifiers": "public", "return": "void", "signature": "void setActors(List<Actor> actors)", "full_signature": "public void setActors(List<Actor> actors)", "class_method_signature": "ActorsPresenter.setActors(List<Actor> actors)", "testcase": false, "constructor": false}, {"identifier": "onGetTextFromSearchField", "parameters": "(String query)", "modifiers": "public", "return": "void", "signature": "void onGetTextFromSearchField(String query)", "full_signature": "public void onGetTextFromSearchField(String query)", "class_method_signature": "ActorsPresenter.onGetTextFromSearchField(String query)", "testcase": false, "constructor": false}, {"identifier": "onActorClicked", "parameters": "(int actorId , int viewHolderPosition)", "modifiers": "public", "return": "void", "signature": "void onActorClicked(int actorId , int viewHolderPosition)", "full_signature": "public void onActorClicked(int actorId , int viewHolderPosition)", "class_method_signature": "ActorsPresenter.onActorClicked(int actorId , int viewHolderPosition)", "testcase": false, "constructor": false}, {"identifier": "showActors", "parameters": "(List<Actor> actors)", "modifiers": "private", "return": "void", "signature": "void showActors(List<Actor> actors)", "full_signature": "private void showActors(List<Actor> actors)", "class_method_signature": "ActorsPresenter.showActors(List<Actor> actors)", "testcase": false, "constructor": false}, {"identifier": "onDestroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void onDestroy()", "full_signature": "public void onDestroy()", "class_method_signature": "ActorsPresenter.onDestroy()", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/ru/devit/mediateka/presentation/actorlist/ActorsPresenter.java"}, "focal_method": {"identifier": "onDestroy", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void onDestroy() {\n        getActorsByQuery.removeActions();\n        getActorsByQuery.dispose();\n        setView(null);\n    }", "signature": "void onDestroy()", "full_signature": "public void onDestroy()", "class_method_signature": "ActorsPresenter.onDestroy()", "testcase": false, "constructor": false, "invocations": ["removeActions", "dispose", "setView"]}, "repository": {"repo_id": 132759831, "url": "https://github.com/Devit951/Mediateka", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 33, "size": 679, "license": "licensed"}}