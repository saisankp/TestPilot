{"test_class": {"identifier": "StreamSourceTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-model/src/test/java/org/sejda/model/input/StreamSourceTest.java"}, "test_case": {"identifier": "testNullName", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testNullName() {\n        InputStream stream = mock(InputStream.class);\n        StreamSource.newInstance(stream, null);\n    }", "signature": "void testNullName()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testNullName()", "class_method_signature": "StreamSourceTest.testNullName()", "testcase": true, "constructor": false, "invocations": ["mock", "newInstance"]}, "focal_class": {"identifier": "StreamSource", "superclass": "extends AbstractSource<InputStream>", "interfaces": "", "fields": [{"original_string": "@NotNull\n    private final InputStream stream;", "modifier": "@NotNull\n    private final", "type": "InputStream", "declarator": "stream", "var_name": "stream"}], "methods": [{"identifier": "StreamSource", "parameters": "(InputStream stream, String name)", "modifiers": "private", "return": "", "signature": " StreamSource(InputStream stream, String name)", "full_signature": "private  StreamSource(InputStream stream, String name)", "class_method_signature": "StreamSource.StreamSource(InputStream stream, String name)", "testcase": false, "constructor": true}, {"identifier": "getSource", "parameters": "()", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getSource()", "full_signature": "@Override public InputStream getSource()", "class_method_signature": "StreamSource.getSource()", "testcase": false, "constructor": false}, {"identifier": "dispatch", "parameters": "(SourceDispatcher<R> dispatcher)", "modifiers": "@Override public", "return": "R", "signature": "R dispatch(SourceDispatcher<R> dispatcher)", "full_signature": "@Override public R dispatch(SourceDispatcher<R> dispatcher)", "class_method_signature": "StreamSource.dispatch(SourceDispatcher<R> dispatcher)", "testcase": false, "constructor": false}, {"identifier": "initializeSeekableSource", "parameters": "()", "modifiers": "@Override public", "return": "SeekableSource", "signature": "SeekableSource initializeSeekableSource()", "full_signature": "@Override public SeekableSource initializeSeekableSource()", "class_method_signature": "StreamSource.initializeSeekableSource()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(InputStream stream, String name)", "modifiers": "public static", "return": "StreamSource", "signature": "StreamSource newInstance(InputStream stream, String name)", "full_signature": "public static StreamSource newInstance(InputStream stream, String name)", "class_method_signature": "StreamSource.newInstance(InputStream stream, String name)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/model/input/StreamSource.java"}, "focal_method": {"identifier": "newInstance", "parameters": "(InputStream stream, String name)", "modifiers": "public static", "return": "StreamSource", "body": "public static StreamSource newInstance(InputStream stream, String name) {\n        if (stream == null) {\n            throw new IllegalArgumentException(\"A not null stream instance and a not blank name are expected.\");\n        }\n        return new StreamSource(stream, name);\n    }", "signature": "StreamSource newInstance(InputStream stream, String name)", "full_signature": "public static StreamSource newInstance(InputStream stream, String name)", "class_method_signature": "StreamSource.newInstance(InputStream stream, String name)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}