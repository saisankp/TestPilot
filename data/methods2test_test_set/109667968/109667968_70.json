{"test_class": {"identifier": "FeatureFilterTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [], "file": "library/src/test/java/io/ona/kujaku/utils/FeatureFilterTest.java"}, "test_case": {"identifier": "filterShouldReturnEmptyFeatureCollectionWhenGivenEmptyFeatureCollection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void filterShouldReturnEmptyFeatureCollectionWhenGivenEmptyFeatureCollection() {\n        int expectedFeaturesLen = 0;\n        ArrayList<Feature> featuresList = new ArrayList<>();\n        FeatureCollection actualFeatureCollection = new FeatureFilter.Builder(FeatureCollection.fromFeatures(featuresList))\n                .build()\n                .filter();\n\n        Assert.assertEquals(expectedFeaturesLen, actualFeatureCollection.features().size());\n    }", "signature": "void filterShouldReturnEmptyFeatureCollectionWhenGivenEmptyFeatureCollection()", "full_signature": "@Test public void filterShouldReturnEmptyFeatureCollectionWhenGivenEmptyFeatureCollection()", "class_method_signature": "FeatureFilterTest.filterShouldReturnEmptyFeatureCollectionWhenGivenEmptyFeatureCollection()", "testcase": true, "constructor": false, "invocations": ["filter", "build", "fromFeatures", "assertEquals", "size", "features"]}, "focal_class": {"identifier": "FeatureFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Builder builder;", "modifier": "private", "type": "Builder", "declarator": "builder", "var_name": "builder"}], "methods": [{"identifier": "FeatureFilter", "parameters": "(@NonNull Builder builder)", "modifiers": "private", "return": "", "signature": " FeatureFilter(@NonNull Builder builder)", "full_signature": "private  FeatureFilter(@NonNull Builder builder)", "class_method_signature": "FeatureFilter.FeatureFilter(@NonNull Builder builder)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "()", "modifiers": "public", "return": "FeatureCollection", "signature": "FeatureCollection filter()", "full_signature": "public FeatureCollection filter()", "class_method_signature": "FeatureFilter.filter()", "testcase": false, "constructor": false}, {"identifier": "getFeatureCollection", "parameters": "()", "modifiers": "public", "return": "FeatureCollection", "signature": "FeatureCollection getFeatureCollection()", "full_signature": "public FeatureCollection getFeatureCollection()", "class_method_signature": "FeatureFilter.getFeatureCollection()", "testcase": false, "constructor": false}], "file": "library/src/main/java/io/ona/kujaku/utils/FeatureFilter.java"}, "focal_method": {"identifier": "filter", "parameters": "()", "modifiers": "public", "return": "FeatureCollection", "body": "public FeatureCollection filter() {\n        List<Feature> featuresList = builder.getFeatureCollection().features();\n        ArrayList<Feature> filteredFeatures = new ArrayList<>();\n\n        HashMap<String, Comparison> comparisons = new HashMap<>();\n\n        EqualToComparison equalToComparison = new EqualToComparison();\n        RegexComparison regexComparison = new RegexComparison();\n\n        comparisons.put(equalToComparison.getFunctionName(), equalToComparison);\n        comparisons.put(regexComparison.getFunctionName(), regexComparison);\n\n        if (featuresList != null) {\n            ArrayList<FilterCondition> filterConditions = builder.getFilterConditions();\n\n            if (filterConditions.size() > 0) {\n                for (Feature feature : featuresList) {\n                    boolean skipFeature = false;\n                    if (builder.getSortProperty() != null\n                            && !feature.hasProperty(builder.getSortProperty())) {\n                        continue;\n                    }\n\n                    for (FilterCondition filterCondition : filterConditions) {\n                        String propertyName = filterCondition.getPropertyName();\n                        if (feature.hasProperty(propertyName)) {\n                            Comparison comparison = comparisons.get(filterCondition.getComparisionType());\n                            if (comparison != null && !comparison.compare(\n                                    feature.getStringProperty(propertyName),\n                                    filterCondition.getValueType(),\n                                    (String) filterCondition.getValue())) {\n                                skipFeature = true;\n                                break;\n                            }\n                        } else {\n                            skipFeature = true;\n                        }\n                    }\n\n                    if (!skipFeature) {\n                        filteredFeatures.add(feature);\n                    }\n                }\n            } else {\n                filteredFeatures = new ArrayList<>(featuresList);\n            }\n        }\n\n        return FeatureCollection.fromFeatures(filteredFeatures);\n    }", "signature": "FeatureCollection filter()", "full_signature": "public FeatureCollection filter()", "class_method_signature": "FeatureFilter.filter()", "testcase": false, "constructor": false, "invocations": ["features", "getFeatureCollection", "put", "getFunctionName", "put", "getFunctionName", "getFilterConditions", "size", "getSortProperty", "hasProperty", "getSortProperty", "getPropertyName", "hasProperty", "get", "getComparisionType", "compare", "getStringProperty", "getValueType", "getValue", "add", "fromFeatures"]}, "repository": {"repo_id": 109667968, "url": "https://github.com/onaio/kujaku", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 4778, "license": "licensed"}}