{"test_class": {"identifier": "SpanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public SpanContextRule spanContextRule = new SpanContextRule();", "modifier": "@Rule\n    public", "type": "SpanContextRule", "declarator": "spanContextRule = new SpanContextRule()", "var_name": "spanContextRule"}], "file": "telemetry-lib/src/test/java/com/yammer/telemetry/tracing/SpanTest.java"}, "test_case": {"identifier": "testSpansClosedInIncorrectOrderClearsContextButDoesNotLogUnclosedSpans", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSpansClosedInIncorrectOrderClearsContextButDoesNotLogUnclosedSpans() {\n        final SpanSink sink = mock(SpanSink.class);\n        SpanSinkRegistry.register(sink);\n\n        Span trace = SpanHelper.startTrace(\"The Trace\");\n\n        // These are deliberately not closed\n        SpanHelper.startSpan(\"one\");\n        SpanHelper.startSpan(\"two\");\n\n        trace.end();\n\n        assertTrue(SpanHelper.captureSpans().isEmpty());\n\n        verify(sink).record(trace);\n        verifyZeroInteractions(sink);\n    }", "signature": "void testSpansClosedInIncorrectOrderClearsContextButDoesNotLogUnclosedSpans()", "full_signature": "@Test public void testSpansClosedInIncorrectOrderClearsContextButDoesNotLogUnclosedSpans()", "class_method_signature": "SpanTest.testSpansClosedInIncorrectOrderClearsContextButDoesNotLogUnclosedSpans()", "testcase": true, "constructor": false, "invocations": ["mock", "register", "startTrace", "startSpan", "startSpan", "end", "assertTrue", "isEmpty", "captureSpans", "record", "verify", "verifyZeroInteractions"]}, "focal_class": {"identifier": "Span", "superclass": "", "interfaces": "implements AutoCloseable, SpanData", "fields": [{"original_string": "private final BigInteger traceId;", "modifier": "private final", "type": "BigInteger", "declarator": "traceId", "var_name": "traceId"}, {"original_string": "private final Optional<BigInteger> parentSpanId;", "modifier": "private final", "type": "Optional<BigInteger>", "declarator": "parentSpanId", "var_name": "parentSpanId"}, {"original_string": "private final BigInteger spanId;", "modifier": "private final", "type": "BigInteger", "declarator": "spanId", "var_name": "spanId"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final String host;", "modifier": "private final", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "private final Integer pid;", "modifier": "private final", "type": "Integer", "declarator": "pid", "var_name": "pid"}, {"original_string": "private final TraceLevel traceLevel;", "modifier": "private final", "type": "TraceLevel", "declarator": "traceLevel", "var_name": "traceLevel"}, {"original_string": "private final long startTime;", "modifier": "private final", "type": "long", "declarator": "startTime", "var_name": "startTime"}, {"original_string": "protected final List<AnnotationData> annotations;", "modifier": "protected final", "type": "List<AnnotationData>", "declarator": "annotations", "var_name": "annotations"}, {"original_string": "private final UUID guid;", "modifier": "private final", "type": "UUID", "declarator": "guid", "var_name": "guid"}, {"original_string": "private long duration;", "modifier": "private", "type": "long", "declarator": "duration", "var_name": "duration"}], "methods": [{"identifier": "Span", "parameters": "(Optional<BigInteger> parentSpanId, BigInteger spanId, String name, BigInteger traceId, long startTime, long startNanos, TraceLevel traceLevel)", "modifiers": "protected", "return": "", "signature": " Span(Optional<BigInteger> parentSpanId, BigInteger spanId, String name, BigInteger traceId, long startTime, long startNanos, TraceLevel traceLevel)", "full_signature": "protected  Span(Optional<BigInteger> parentSpanId, BigInteger spanId, String name, BigInteger traceId, long startTime, long startNanos, TraceLevel traceLevel)", "class_method_signature": "Span.Span(Optional<BigInteger> parentSpanId, BigInteger spanId, String name, BigInteger traceId, long startTime, long startNanos, TraceLevel traceLevel)", "testcase": false, "constructor": true}, {"identifier": "addAnnotation", "parameters": "(String name)", "modifiers": "public abstract", "return": "void", "signature": "void addAnnotation(String name)", "full_signature": "public abstract void addAnnotation(String name)", "class_method_signature": "Span.addAnnotation(String name)", "testcase": false, "constructor": false}, {"identifier": "addAnnotation", "parameters": "(String name, String message)", "modifiers": "public abstract", "return": "void", "signature": "void addAnnotation(String name, String message)", "full_signature": "public abstract void addAnnotation(String name, String message)", "class_method_signature": "Span.addAnnotation(String name, String message)", "testcase": false, "constructor": false}, {"identifier": "afterClose", "parameters": "()", "modifiers": "protected abstract", "return": "void", "signature": "void afterClose()", "full_signature": "protected abstract void afterClose()", "class_method_signature": "Span.afterClose()", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void end()", "full_signature": "public final void end()", "class_method_signature": "Span.end()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void close()", "full_signature": "@Override public final void close()", "class_method_signature": "Span.close()", "testcase": false, "constructor": false}, {"identifier": "getTraceId", "parameters": "()", "modifiers": "public final", "return": "BigInteger", "signature": "BigInteger getTraceId()", "full_signature": "public final BigInteger getTraceId()", "class_method_signature": "Span.getTraceId()", "testcase": false, "constructor": false}, {"identifier": "getSpanId", "parameters": "()", "modifiers": "public final", "return": "BigInteger", "signature": "BigInteger getSpanId()", "full_signature": "public final BigInteger getSpanId()", "class_method_signature": "Span.getSpanId()", "testcase": false, "constructor": false}, {"identifier": "getParentSpanId", "parameters": "()", "modifiers": "public final", "return": "Optional<BigInteger>", "signature": "Optional<BigInteger> getParentSpanId()", "full_signature": "public final Optional<BigInteger> getParentSpanId()", "class_method_signature": "Span.getParentSpanId()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getName()", "full_signature": "public final String getName()", "class_method_signature": "Span.getName()", "testcase": false, "constructor": false}, {"identifier": "getHost", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getHost()", "full_signature": "public final String getHost()", "class_method_signature": "Span.getHost()", "testcase": false, "constructor": false}, {"identifier": "getPid", "parameters": "()", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") public final", "return": "Integer", "signature": "Integer getPid()", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") public final Integer getPid()", "class_method_signature": "Span.getPid()", "testcase": false, "constructor": false}, {"identifier": "getStartTime", "parameters": "()", "modifiers": "@Override public final", "return": "long", "signature": "long getStartTime()", "full_signature": "@Override public final long getStartTime()", "class_method_signature": "Span.getStartTime()", "testcase": false, "constructor": false}, {"identifier": "getDuration", "parameters": "()", "modifiers": "@Override public final", "return": "long", "signature": "long getDuration()", "full_signature": "@Override public final long getDuration()", "class_method_signature": "Span.getDuration()", "testcase": false, "constructor": false}, {"identifier": "getAnnotations", "parameters": "()", "modifiers": "@Override public final", "return": "List<AnnotationData>", "signature": "List<AnnotationData> getAnnotations()", "full_signature": "@Override public final List<AnnotationData> getAnnotations()", "class_method_signature": "Span.getAnnotations()", "testcase": false, "constructor": false}, {"identifier": "getTraceLevel", "parameters": "()", "modifiers": "final", "return": "TraceLevel", "signature": "TraceLevel getTraceLevel()", "full_signature": "final TraceLevel getTraceLevel()", "class_method_signature": "Span.getTraceLevel()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Span.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Span.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Span.hashCode()", "testcase": false, "constructor": false}], "file": "telemetry-lib/src/main/java/com/yammer/telemetry/tracing/Span.java"}, "focal_method": {"identifier": "end", "parameters": "()", "modifiers": "public final", "return": "void", "body": "public final void end() {\n        duration = System.nanoTime() - duration;\n\n        // we need to ensure this span context is ended even if it's not being logged,\n        // otherwise we risk pollution of the context for subsequent operations.\n        Optional<SpanContext> context = SpanHelper.currentContext();\n        if (context.isPresent()) {\n            context.get().endSpan(this);\n            afterClose();\n        } else {\n            throw new IllegalStateException(\"Span.end() from a detached span.\");\n        }\n    }", "signature": "void end()", "full_signature": "public final void end()", "class_method_signature": "Span.end()", "testcase": false, "constructor": false, "invocations": ["nanoTime", "currentContext", "isPresent", "endSpan", "get", "afterClose"]}, "repository": {"repo_id": 11585818, "url": "https://github.com/yammer/telemetry", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 20, "size": 990, "license": "licensed"}}