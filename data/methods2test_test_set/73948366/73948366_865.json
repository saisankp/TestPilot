{"test_class": {"identifier": "KeyStoreCertSignerFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BooleanSupplier sysPropRestoreFunc = null;", "modifier": "private", "type": "BooleanSupplier", "declarator": "sysPropRestoreFunc = null", "var_name": "sysPropRestoreFunc"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/KeyStoreCertSignerFactoryTest.java"}, "test_case": {"identifier": "testCreateEmptyPath", "parameters": "()", "modifiers": "@Test(expectedExceptions = { IllegalArgumentException.class }, expectedExceptionsMessageRegExp = \"Failed to get keyStorePassword from athenz.zts.keystore_signer.keystore_password property.\") public", "return": "void", "body": "@Test(expectedExceptions = { IllegalArgumentException.class }, expectedExceptionsMessageRegExp = \"Failed to get keyStorePassword from athenz.zts.keystore_signer.keystore_password property.\")\n    public void testCreateEmptyPath() {\n        final BooleanSupplier sysPropRestoreFunc = this.getSysPropRestoreLambda(\n            \"athenz.zts.keystore_signer.keystore_password\"\n        );\n\n        // test main\n        System.clearProperty(\"athenz.zts.keystore_signer.keystore_password\");\n        try (KeyStoreCertSigner keyStoreCertSigner = (KeyStoreCertSigner) new KeyStoreCertSignerFactory().create()) {\n        } finally {\n            sysPropRestoreFunc.getAsBoolean();\n        }\n    }", "signature": "void testCreateEmptyPath()", "full_signature": "@Test(expectedExceptions = { IllegalArgumentException.class }, expectedExceptionsMessageRegExp = \"Failed to get keyStorePassword from athenz.zts.keystore_signer.keystore_password property.\") public void testCreateEmptyPath()", "class_method_signature": "KeyStoreCertSignerFactoryTest.testCreateEmptyPath()", "testcase": true, "constructor": false, "invocations": ["getSysPropRestoreLambda", "clearProperty", "create", "getAsBoolean"]}, "focal_class": {"identifier": "KeyStoreCertSignerFactory", "superclass": "", "interfaces": "implements CertSignerFactory", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(KeyStoreCertSignerFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(KeyStoreCertSignerFactory.class)", "var_name": "LOG"}, {"original_string": "private static final String ZTS_PROP_CERT_SIGNER_KEYSTORE_PASSWORD = \"athenz.zts.keystore_signer.keystore_password\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_PROP_CERT_SIGNER_KEYSTORE_PASSWORD = \"athenz.zts.keystore_signer.keystore_password\"", "var_name": "ZTS_PROP_CERT_SIGNER_KEYSTORE_PASSWORD"}, {"original_string": "private static final String ZTS_PROP_CERT_SIGNER_KEYSTORE_PATH = \"athenz.zts.keystore_signer.keystore_path\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_PROP_CERT_SIGNER_KEYSTORE_PATH = \"athenz.zts.keystore_signer.keystore_path\"", "var_name": "ZTS_PROP_CERT_SIGNER_KEYSTORE_PATH"}, {"original_string": "private static final String ZTS_PROP_CERT_SIGNER_KEYSTORE_TYPE = \"athenz.zts.keystore_signer.keystore_type\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_PROP_CERT_SIGNER_KEYSTORE_TYPE = \"athenz.zts.keystore_signer.keystore_type\"", "var_name": "ZTS_PROP_CERT_SIGNER_KEYSTORE_TYPE"}, {"original_string": "private static final String ZTS_PROP_CERT_SIGNER_CA_ALIAS = \"athenz.zts.keystore_signer.keystore_ca_alias\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_PROP_CERT_SIGNER_CA_ALIAS = \"athenz.zts.keystore_signer.keystore_ca_alias\"", "var_name": "ZTS_PROP_CERT_SIGNER_CA_ALIAS"}, {"original_string": "private static final BiFunction<String, String, RuntimeException> CREATE_ILLEGAL_ARGUMENT_EXCEPTION = (variableName, propertyName) -> {\n        String message = String.format(\"Failed to get %s from %s property.\", variableName, propertyName);\n        LOG.error(message);\n        return new IllegalArgumentException(message);\n    };", "modifier": "private static final", "type": "BiFunction<String, String, RuntimeException>", "declarator": "CREATE_ILLEGAL_ARGUMENT_EXCEPTION = (variableName, propertyName) -> {\n        String message = String.format(\"Failed to get %s from %s property.\", variableName, propertyName);\n        LOG.error(message);\n        return new IllegalArgumentException(message);\n    }", "var_name": "CREATE_ILLEGAL_ARGUMENT_EXCEPTION"}], "methods": [{"identifier": "create", "parameters": "()", "modifiers": "@Override public", "return": "CertSigner", "signature": "CertSigner create()", "full_signature": "@Override public CertSigner create()", "class_method_signature": "KeyStoreCertSignerFactory.create()", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/KeyStoreCertSignerFactory.java"}, "focal_method": {"identifier": "create", "parameters": "()", "modifiers": "@Override public", "return": "CertSigner", "body": "@Override\n    public CertSigner create() {\n        final String keyStorePassword = System.getProperty(ZTS_PROP_CERT_SIGNER_KEYSTORE_PASSWORD);\n        final String keyStorePath = System.getProperty(ZTS_PROP_CERT_SIGNER_KEYSTORE_PATH);\n        final String keyStoreType = System.getProperty(ZTS_PROP_CERT_SIGNER_KEYSTORE_TYPE, \"PKCS12\");\n        final String caAlias = System.getProperty(ZTS_PROP_CERT_SIGNER_CA_ALIAS, \"1\");\n        final int maxCertExpiryTimeMins = Integer.parseInt(System.getProperty(ZTSConsts.ZTS_PROP_CERTSIGN_MAX_EXPIRY_TIME, \"43200\"));\n\n        // check null or empty\n        if (keyStorePassword == null || keyStorePassword.isEmpty()) {\n            throw CREATE_ILLEGAL_ARGUMENT_EXCEPTION.apply(\"keyStorePassword\", ZTS_PROP_CERT_SIGNER_KEYSTORE_PASSWORD);\n        }\n        if (keyStorePath == null || keyStorePath.isEmpty()) {\n            throw CREATE_ILLEGAL_ARGUMENT_EXCEPTION.apply(\"keyStorePath\", ZTS_PROP_CERT_SIGNER_KEYSTORE_PATH);\n        }\n\n        try (FileInputStream fis = new FileInputStream(keyStorePath)) {\n            // read ca certificate and key\n            KeyStore ks = KeyStore.getInstance(keyStoreType);\n            ks.load(fis, keyStorePassword.toCharArray());\n            PrivateKey caPrivateKey = (PrivateKey) ks.getKey(caAlias, keyStorePassword.toCharArray());\n            X509Certificate caCertificate = (X509Certificate) ks.getCertificate(caAlias);\n\n            if (caPrivateKey == null || caCertificate == null) {\n                throw CREATE_ILLEGAL_ARGUMENT_EXCEPTION.apply(\"caPrivateKey/caCertificate\", ZTS_PROP_CERT_SIGNER_CA_ALIAS);\n            }\n\n            return new KeyStoreCertSigner(caCertificate, caPrivateKey, maxCertExpiryTimeMins);\n        } catch (Exception ex) {\n            throw new RuntimeException(ex);\n        }\n    }", "signature": "CertSigner create()", "full_signature": "@Override public CertSigner create()", "class_method_signature": "KeyStoreCertSignerFactory.create()", "testcase": false, "constructor": false, "invocations": ["getProperty", "getProperty", "getProperty", "getProperty", "parseInt", "getProperty", "isEmpty", "apply", "isEmpty", "apply", "getInstance", "load", "toCharArray", "getKey", "toCharArray", "getCertificate", "apply"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}