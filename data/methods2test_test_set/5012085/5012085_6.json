{"test_class": {"identifier": "StringValuePredicateTest", "superclass": "", "interfaces": "", "fields": [], "file": "netflix-infix/src/test/java/com/netflix/infix/StringValuePredicateTest.java"}, "test_case": {"identifier": "testValueComparison", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testValueComparison() throws Exception {\n\t\tObject[][] inputs = {\n\t\t\t{\"abc\", \"abc\", true},\n\t\t\t{\"\", \"\", true}, \n\t\t\t{\"AB\", \"A\", false},\n\t\t\t{null, null, true},\n\t\t\t{null, \"\", false},\n\t\t\t{\"\", null, false}\n\t\t};\n\t\t\n\t\tfor(Object[] input : inputs){\n\t\t\tString value = (String)input[0];\n\t\t\tString inputValue = (String)input[1];\n\t\t\tboolean expected = ((Boolean)input[2]).booleanValue();\n\t\t\t\n\t\t\tStringValuePredicate pred = new StringValuePredicate(value);\n\t\t\n\t\t\tassertEquals(String.format(\"Given value = %s, and input = %s\", value, inputValue), expected, pred.apply(inputValue));\n\t\t}\n\t\t\n\t}", "signature": "void testValueComparison()", "full_signature": "@Test public void testValueComparison()", "class_method_signature": "StringValuePredicateTest.testValueComparison()", "testcase": true, "constructor": false, "invocations": ["booleanValue", "assertEquals", "format", "apply"]}, "focal_class": {"identifier": "StringValuePredicate", "superclass": "", "interfaces": "implements ValuePredicate<Object>", "fields": [{"original_string": "private String value;", "modifier": "private", "type": "String", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "StringValuePredicate", "parameters": "(@Nullable String value)", "modifiers": "public", "return": "", "signature": " StringValuePredicate(@Nullable String value)", "full_signature": "public  StringValuePredicate(@Nullable String value)", "class_method_signature": "StringValuePredicate.StringValuePredicate(@Nullable String value)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(@Nullable Object input)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean apply(@Nullable Object input)", "full_signature": "@Override public boolean apply(@Nullable Object input)", "class_method_signature": "StringValuePredicate.apply(@Nullable Object input)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getValue()", "full_signature": " String getValue()", "class_method_signature": "StringValuePredicate.getValue()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StringValuePredicate.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "StringValuePredicate.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "StringValuePredicate.equals(Object obj)", "testcase": false, "constructor": false}], "file": "netflix-infix/src/main/java/com/netflix/infix/StringValuePredicate.java"}, "focal_method": {"identifier": "apply", "parameters": "(@Nullable Object input)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean apply(@Nullable Object input) {\n\t    return Objects.equal(value, input);\n    }", "signature": "boolean apply(@Nullable Object input)", "full_signature": "@Override public boolean apply(@Nullable Object input)", "class_method_signature": "StringValuePredicate.apply(@Nullable Object input)", "testcase": false, "constructor": false, "invocations": ["equal"]}, "repository": {"repo_id": 5012085, "url": "https://github.com/Netflix/netflix-commons", "language": "Java", "is_fork": false, "fork_count": 74, "stargazer_count": 145, "size": 404, "license": "licensed"}}