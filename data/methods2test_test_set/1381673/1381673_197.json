{"test_class": {"identifier": "LambdaIntrospectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-mvel/src/test/java/org/drools/mvel/asm/LambdaIntrospectorTest.java"}, "test_case": {"identifier": "testLambdaFingerprint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLambdaFingerprint() {\n        LambdaIntrospector lambdaIntrospector = new LambdaIntrospector();\n        Predicate1<Person> predicate1 = p -> p.getAge() > 35;\n        String fingerprint = lambdaIntrospector.apply(predicate1);\n\n        assertTrue(fingerprint.contains(\"ALOAD 0\"));\n        assertTrue(fingerprint.contains(\"INVOKEVIRTUAL org/drools/mvel/compiler/Person.getAge()I\"));\n    }", "signature": "void testLambdaFingerprint()", "full_signature": "@Test public void testLambdaFingerprint()", "class_method_signature": "LambdaIntrospectorTest.testLambdaFingerprint()", "testcase": true, "constructor": false, "invocations": ["getAge", "apply", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "LambdaIntrospector", "superclass": "", "interfaces": "implements Function<Object, String>", "fields": [{"original_string": "public static final String LAMBDA_INTROSPECTOR_CACHE_SIZE = \"drools.lambda.introspector.cache.size\";", "modifier": "public static final", "type": "String", "declarator": "LAMBDA_INTROSPECTOR_CACHE_SIZE = \"drools.lambda.introspector.cache.size\"", "var_name": "LAMBDA_INTROSPECTOR_CACHE_SIZE"}, {"original_string": "private static final int CACHE_SIZE = Integer.parseInt(System.getProperty(LAMBDA_INTROSPECTOR_CACHE_SIZE, \"32\"));", "modifier": "private static final", "type": "int", "declarator": "CACHE_SIZE = Integer.parseInt(System.getProperty(LAMBDA_INTROSPECTOR_CACHE_SIZE, \"32\"))", "var_name": "CACHE_SIZE"}, {"original_string": "private static final Map<ClassLoader, Map<String, Map<String, String>>> methodFingerprintsMapPerClassLoader = new WeakHashMap<>();", "modifier": "private static final", "type": "Map<ClassLoader, Map<String, Map<String, String>>>", "declarator": "methodFingerprintsMapPerClassLoader = new WeakHashMap<>()", "var_name": "methodFingerprintsMapPerClassLoader"}], "methods": [{"identifier": "getMethodFingerprintsMapPerClassLoader", "parameters": "()", "modifiers": "static", "return": "Map<ClassLoader, Map<String, Map<String, String>>>", "signature": "Map<ClassLoader, Map<String, Map<String, String>>> getMethodFingerprintsMapPerClassLoader()", "full_signature": "static Map<ClassLoader, Map<String, Map<String, String>>> getMethodFingerprintsMapPerClassLoader()", "class_method_signature": "LambdaIntrospector.getMethodFingerprintsMapPerClassLoader()", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(Object lambda)", "modifiers": "@Override public", "return": "String", "signature": "String apply(Object lambda)", "full_signature": "@Override public String apply(Object lambda)", "class_method_signature": "LambdaIntrospector.apply(Object lambda)", "testcase": false, "constructor": false}, {"identifier": "getExpressionHash", "parameters": "(Object lambda)", "modifiers": "private static", "return": "String", "signature": "String getExpressionHash(Object lambda)", "full_signature": "private static String getExpressionHash(Object lambda)", "class_method_signature": "LambdaIntrospector.getExpressionHash(Object lambda)", "testcase": false, "constructor": false}, {"identifier": "extractLambda", "parameters": "( Serializable lambda )", "modifiers": "private static", "return": "SerializedLambda", "signature": "SerializedLambda extractLambda( Serializable lambda )", "full_signature": "private static SerializedLambda extractLambda( Serializable lambda )", "class_method_signature": "LambdaIntrospector.extractLambda( Serializable lambda )", "testcase": false, "constructor": false}, {"identifier": "getFingerprintsForClass", "parameters": "(Object lambda, SerializedLambda extracted)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> getFingerprintsForClass(Object lambda, SerializedLambda extracted)", "full_signature": "private static Map<String, String> getFingerprintsForClass(Object lambda, SerializedLambda extracted)", "class_method_signature": "LambdaIntrospector.getFingerprintsForClass(Object lambda, SerializedLambda extracted)", "testcase": false, "constructor": false}, {"identifier": "getFingerPrints", "parameters": "(ClassLoader lambdaClassLoader, String className)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> getFingerPrints(ClassLoader lambdaClassLoader, String className)", "full_signature": "private static Map<String, String> getFingerPrints(ClassLoader lambdaClassLoader, String className)", "class_method_signature": "LambdaIntrospector.getFingerPrints(ClassLoader lambdaClassLoader, String className)", "testcase": false, "constructor": false}], "file": "drools-mvel/src/main/java/org/drools/mvel/asm/LambdaIntrospector.java"}, "focal_method": {"identifier": "apply", "parameters": "(Object lambda)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String apply(Object lambda) {\n        if (lambda.toString().equals(\"INSTANCE\")) { // Materialized lambda\n            return getExpressionHash(lambda);\n        }\n\n        if (lambda instanceof Supplier) {\n            lambda = (( Supplier ) lambda).get();\n        }\n        SerializedLambda extracted = extractLambda( (Serializable) lambda );\n        String result = getFingerprintsForClass( lambda, extracted ).get( extracted.getImplMethodName() );\n        if (result == null) {\n            if ( !extracted.getCapturingClass().equals( extracted.getImplClass() ) ) {\n                // the lambda is a method reference\n                result = extracted.getCapturingClass().replace( '/', '.' ) + \"::\" + extracted.getImplMethodName();\n            } else {\n                throw new UnsupportedOperationException( \"Unable to introspect lambda \" + lambda );\n            }\n        }\n        return result;\n    }", "signature": "String apply(Object lambda)", "full_signature": "@Override public String apply(Object lambda)", "class_method_signature": "LambdaIntrospector.apply(Object lambda)", "testcase": false, "constructor": false, "invocations": ["equals", "toString", "getExpressionHash", "get", "extractLambda", "get", "getFingerprintsForClass", "getImplMethodName", "equals", "getCapturingClass", "getImplClass", "replace", "getCapturingClass", "getImplMethodName"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}