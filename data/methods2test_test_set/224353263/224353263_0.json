{"test_class": {"identifier": "LocalReactiveServiceCallerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LocalReactiveServiceCallerImpl serviceCaller = new LocalReactiveServiceCallerImpl();", "modifier": "private", "type": "LocalReactiveServiceCallerImpl", "declarator": "serviceCaller = new LocalReactiveServiceCallerImpl()", "var_name": "serviceCaller"}], "file": "alibaba-rsocket-core/src/test/java/com/alibaba/rsocket/rpc/LocalReactiveServiceCallerImplTest.java"}, "test_case": {"identifier": "testAddServiceInterface", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddServiceInterface() {\n        ReactiveServiceInterface serviceInterface = serviceCaller.createReactiveServiceInterface(\"group1\", \"1.0.0\",\n                \"com.alibaba.rsocket.rpc.DemoReactiveService\", DemoReactiveService.class);\n        System.out.println(\"=======Reactive Service Interface=====\");\n        System.out.println(serviceInterface.getNamespace());\n        System.out.println(serviceInterface.getName());\n        System.out.println(\"===============Operations=====================\");\n        List<ReactiveOperation> operations = serviceInterface.getOperations();\n        for (ReactiveOperation operation : operations) {\n            System.out.println(operation.getName());\n            System.out.println(operation.getReturnType());\n            System.out.println(operation.getReturnInferredType());\n            System.out.println(\"deprecated: \" + operation.isDeprecated());\n            if (!operation.getParameters().isEmpty()) {\n                System.out.println(\"===============Parameters=====================\");\n            }\n            for (OperationParameter parameter : operation.getParameters()) {\n                System.out.println(parameter.getName());\n                System.out.println(parameter.getType());\n                System.out.println(parameter.getInferredType());\n            }\n            System.out.println(\"================================\");\n        }\n    }", "signature": "void testAddServiceInterface()", "full_signature": "@Test public void testAddServiceInterface()", "class_method_signature": "LocalReactiveServiceCallerImplTest.testAddServiceInterface()", "testcase": true, "constructor": false, "invocations": ["createReactiveServiceInterface", "println", "println", "getNamespace", "println", "getName", "println", "getOperations", "println", "getName", "println", "getReturnType", "println", "getReturnInferredType", "println", "isDeprecated", "isEmpty", "getParameters", "println", "getParameters", "println", "getName", "println", "getType", "println", "getInferredType", "println"]}, "focal_class": {"identifier": "LocalReactiveServiceCallerImpl", "superclass": "", "interfaces": "implements LocalReactiveServiceCaller, ReactiveServiceDiscovery", "fields": [{"original_string": "private Map<String, Object> rsocketServices = new HashMap<>();", "modifier": "private", "type": "Map<String, Object>", "declarator": "rsocketServices = new HashMap<>()", "var_name": "rsocketServices"}, {"original_string": "private Map<String, ReactiveServiceInterface> reactiveServiceInterfaces = new HashMap<>();", "modifier": "private", "type": "Map<String, ReactiveServiceInterface>", "declarator": "reactiveServiceInterfaces = new HashMap<>()", "var_name": "reactiveServiceInterfaces"}, {"original_string": "private Map<Integer, Object> rsocketHashCodeServices = new HashMap<>();", "modifier": "private", "type": "Map<Integer, Object>", "declarator": "rsocketHashCodeServices = new HashMap<>()", "var_name": "rsocketHashCodeServices"}, {"original_string": "private Map<String, ReactiveMethodHandler> methodInvokeEntrances = new HashMap<>();", "modifier": "private", "type": "Map<String, ReactiveMethodHandler>", "declarator": "methodInvokeEntrances = new HashMap<>()", "var_name": "methodInvokeEntrances"}, {"original_string": "private Map<Integer, ReactiveMethodHandler> methodHashCodeInvokeEntrances = new HashMap<>();", "modifier": "private", "type": "Map<Integer, ReactiveMethodHandler>", "declarator": "methodHashCodeInvokeEntrances = new HashMap<>()", "var_name": "methodHashCodeInvokeEntrances"}], "methods": [{"identifier": "LocalReactiveServiceCallerImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " LocalReactiveServiceCallerImpl()", "full_signature": "public  LocalReactiveServiceCallerImpl()", "class_method_signature": "LocalReactiveServiceCallerImpl.LocalReactiveServiceCallerImpl()", "testcase": false, "constructor": true}, {"identifier": "contains", "parameters": "(String serviceName, String rpc)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(String serviceName, String rpc)", "full_signature": "@Override public boolean contains(String serviceName, String rpc)", "class_method_signature": "LocalReactiveServiceCallerImpl.contains(String serviceName, String rpc)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Integer serviceId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Integer serviceId)", "full_signature": "@Override public boolean contains(Integer serviceId)", "class_method_signature": "LocalReactiveServiceCallerImpl.contains(Integer serviceId)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String serviceName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(String serviceName)", "full_signature": "@Override public boolean contains(String serviceName)", "class_method_signature": "LocalReactiveServiceCallerImpl.contains(String serviceName)", "testcase": false, "constructor": false}, {"identifier": "findAllServices", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> findAllServices()", "full_signature": "@Override public Set<String> findAllServices()", "class_method_signature": "LocalReactiveServiceCallerImpl.findAllServices()", "testcase": false, "constructor": false}, {"identifier": "addProvider", "parameters": "(@NotNull String group, String serviceName, @NotNull String version, Class<?> serviceInterface, Object handler)", "modifiers": "public", "return": "void", "signature": "void addProvider(@NotNull String group, String serviceName, @NotNull String version, Class<?> serviceInterface, Object handler)", "full_signature": "public void addProvider(@NotNull String group, String serviceName, @NotNull String version, Class<?> serviceInterface, Object handler)", "class_method_signature": "LocalReactiveServiceCallerImpl.addProvider(@NotNull String group, String serviceName, @NotNull String version, Class<?> serviceInterface, Object handler)", "testcase": false, "constructor": false}, {"identifier": "getInvokeMethod", "parameters": "(String serviceName, String method)", "modifiers": "@Override public @Nullable", "return": "ReactiveMethodHandler", "signature": "ReactiveMethodHandler getInvokeMethod(String serviceName, String method)", "full_signature": "@Override public @Nullable ReactiveMethodHandler getInvokeMethod(String serviceName, String method)", "class_method_signature": "LocalReactiveServiceCallerImpl.getInvokeMethod(String serviceName, String method)", "testcase": false, "constructor": false}, {"identifier": "getInvokeMethod", "parameters": "(Integer handlerId)", "modifiers": "@Override public @Nullable", "return": "ReactiveMethodHandler", "signature": "ReactiveMethodHandler getInvokeMethod(Integer handlerId)", "full_signature": "@Override public @Nullable ReactiveMethodHandler getInvokeMethod(Integer handlerId)", "class_method_signature": "LocalReactiveServiceCallerImpl.getInvokeMethod(Integer handlerId)", "testcase": false, "constructor": false}, {"identifier": "containsHandler", "parameters": "(Integer handlerId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsHandler(Integer handlerId)", "full_signature": "@Override public boolean containsHandler(Integer handlerId)", "class_method_signature": "LocalReactiveServiceCallerImpl.containsHandler(Integer handlerId)", "testcase": false, "constructor": false}, {"identifier": "createReactiveServiceInterface", "parameters": "(String group, String version,\n                                                                   String serviceFullName, Class<?> javaInterface)", "modifiers": "public", "return": "ReactiveServiceInterface", "signature": "ReactiveServiceInterface createReactiveServiceInterface(String group, String version,\n                                                                   String serviceFullName, Class<?> javaInterface)", "full_signature": "public ReactiveServiceInterface createReactiveServiceInterface(String group, String version,\n                                                                   String serviceFullName, Class<?> javaInterface)", "class_method_signature": "LocalReactiveServiceCallerImpl.createReactiveServiceInterface(String group, String version,\n                                                                   String serviceFullName, Class<?> javaInterface)", "testcase": false, "constructor": false}, {"identifier": "findServiceByFullName", "parameters": "(String serviceFullName)", "modifiers": "@Override public", "return": "ReactiveServiceInterface", "signature": "ReactiveServiceInterface findServiceByFullName(String serviceFullName)", "full_signature": "@Override public ReactiveServiceInterface findServiceByFullName(String serviceFullName)", "class_method_signature": "LocalReactiveServiceCallerImpl.findServiceByFullName(String serviceFullName)", "testcase": false, "constructor": false}], "file": "alibaba-rsocket-core/src/main/java/com/alibaba/rsocket/rpc/LocalReactiveServiceCallerImpl.java"}, "focal_method": {"identifier": "createReactiveServiceInterface", "parameters": "(String group, String version,\n                                                                   String serviceFullName, Class<?> javaInterface)", "modifiers": "public", "return": "ReactiveServiceInterface", "body": "public ReactiveServiceInterface createReactiveServiceInterface(String group, String version,\n                                                                   String serviceFullName, Class<?> javaInterface) {\n        ReactiveServiceInterface serviceInterface = new ReactiveServiceInterface();\n        serviceInterface.setGroup(group);\n        serviceInterface.setVersion(version);\n        serviceInterface.setNamespace(javaInterface.getPackage().getName());\n        serviceInterface.setName(javaInterface.getSimpleName());\n        Deprecated interfaceDeprecated = javaInterface.getAnnotation(Deprecated.class);\n        if (interfaceDeprecated != null) {\n            serviceInterface.setDeprecated(true);\n        }\n        for (Method method : javaInterface.getMethods()) {\n            if (!method.isDefault()) {\n                String handlerName = method.getName();\n                ReactiveOperation operation = new ReactiveOperation();\n                Deprecated methodDeprecated = method.getAnnotation(Deprecated.class);\n                if (methodDeprecated != null) {\n                    operation.setDeprecated(true);\n                }\n                serviceInterface.addOperation(operation);\n                operation.setName(handlerName);\n                operation.setReturnType(method.getReturnType().getCanonicalName());\n                operation.setReturnInferredType(ReactiveMethodSupport.parseInferredClass(method.getGenericReturnType()).getCanonicalName());\n                for (Parameter parameter : method.getParameters()) {\n                    OperationParameter param = new OperationParameter();\n                    operation.addParameter(param);\n                    param.setName(parameter.getName());\n                    param.setType(parameter.getType().getCanonicalName());\n                    String inferredType = ReactiveMethodSupport.parseInferredClass(parameter.getParameterizedType()).getCanonicalName();\n                    if (!param.getType().equals(inferredType)) {\n                        param.setInferredType(inferredType);\n                    }\n                }\n            }\n        }\n        return serviceInterface;\n    }", "signature": "ReactiveServiceInterface createReactiveServiceInterface(String group, String version,\n                                                                   String serviceFullName, Class<?> javaInterface)", "full_signature": "public ReactiveServiceInterface createReactiveServiceInterface(String group, String version,\n                                                                   String serviceFullName, Class<?> javaInterface)", "class_method_signature": "LocalReactiveServiceCallerImpl.createReactiveServiceInterface(String group, String version,\n                                                                   String serviceFullName, Class<?> javaInterface)", "testcase": false, "constructor": false, "invocations": ["setGroup", "setVersion", "setNamespace", "getName", "getPackage", "setName", "getSimpleName", "getAnnotation", "setDeprecated", "getMethods", "isDefault", "getName", "getAnnotation", "setDeprecated", "addOperation", "setName", "setReturnType", "getCanonicalName", "getReturnType", "setReturnInferredType", "getCanonicalName", "parseInferredClass", "getGenericReturnType", "getParameters", "addParameter", "setName", "getName", "setType", "getCanonicalName", "getType", "getCanonicalName", "parseInferredClass", "getParameterizedType", "equals", "getType", "setInferredType"]}, "repository": {"repo_id": 224353263, "url": "https://github.com/alibaba/alibaba-rsocket-broker", "stars": 208, "created": "11/27/2019 5:42:01 AM +00:00", "updates": "2020-01-27T22:23:55+00:00", "fork": "False", "license": "licensed"}}