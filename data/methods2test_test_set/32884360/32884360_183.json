{"test_class": {"identifier": "TypeValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final TypesRegistry typesRegistry =\n        TypesRegistryServiceImpl.createRegistryService().getTypesRegistry();", "modifier": "final", "type": "TypesRegistry", "declarator": "typesRegistry =\n        TypesRegistryServiceImpl.createRegistryService().getTypesRegistry()", "var_name": "typesRegistry"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/server/types/common/types/TypeValidatorTest.java"}, "test_case": {"identifier": "testTypesCanBeJoined", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTypesCanBeJoined() throws Exception {\n        // Every time can be joined to itself\n        for(TClass t : typesRegistry.getTypeClasses()) {\n            assertTrue(t.toString(), TypeValidator.isSupportedForJoin(t, t));\n        }\n        // All int types can be joined together except bigint unsigned\n        final String intTypeNames[] = {\"tinyint\", \"smallint\", \"int\", \"mediumint\", \"bigint\"};\n        for(String t1 : intTypeNames) {\n            String t1U = t1 + \" unsigned\";\n            for(String t2 : intTypeNames) {\n                String t2U = t2 + \" unsigned\";\n                boolean t1UIsBigint = \"bigint unsigned\".equals(t1U);\n                boolean t2UIsBigint = \"bigint unsigned\".equals(t2U);\n                assertTrue(t1+\"->\"+t2, canTypesBeJoined(\"MCOMPAT\", t1, \"MCOMPAT\", t2));\n                assertEquals(t1U + \"->\" + t2, !t1UIsBigint, canTypesBeJoined(\"MCOMPAT\", t1U, \"MCOMPAT\", t2));\n                assertEquals(t1 + \"->\" + t2U, !t2UIsBigint, canTypesBeJoined(\"MCOMPAT\", t1, \"MCOMPAT\", t2U));\n                assertEquals(t1U+\"->\"+t2U, (t1UIsBigint == t2UIsBigint), canTypesBeJoined(\"MCOMPAT\", t1U, \"MCOMPAT\", t2U));\n            }\n        }\n        // Check a few that cannot be\n        assertFalse(canTypesBeJoined(\"MCOMPAT\", \"int\", \"MCOMPAT\", \"varchar\"));\n        assertFalse(canTypesBeJoined(\"MCOMPAT\", \"int\", \"MCOMPAT\", \"timestamp\"));\n        assertFalse(canTypesBeJoined(\"MCOMPAT\", \"int\", \"MCOMPAT\", \"decimal\"));\n        assertFalse(canTypesBeJoined(\"MCOMPAT\", \"int\", \"MCOMPAT\", \"double\"));\n        assertFalse(canTypesBeJoined(\"MCOMPAT\", \"char\", \"MCOMPAT\", \"binary\"));\n    }", "signature": "void testTypesCanBeJoined()", "full_signature": "@Test public void testTypesCanBeJoined()", "class_method_signature": "TypeValidatorTest.testTypesCanBeJoined()", "testcase": true, "constructor": false, "invocations": ["getTypeClasses", "assertTrue", "toString", "isSupportedForJoin", "equals", "equals", "assertTrue", "canTypesBeJoined", "assertEquals", "canTypesBeJoined", "assertEquals", "canTypesBeJoined", "assertEquals", "canTypesBeJoined", "assertFalse", "canTypesBeJoined", "assertFalse", "canTypesBeJoined", "assertFalse", "canTypesBeJoined", "assertFalse", "canTypesBeJoined", "assertFalse", "canTypesBeJoined"]}, "focal_class": {"identifier": "TypeValidator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "TypeValidator", "parameters": "()", "modifiers": "private", "return": "", "signature": " TypeValidator()", "full_signature": "private  TypeValidator()", "class_method_signature": "TypeValidator.TypeValidator()", "testcase": false, "constructor": true}, {"identifier": "isSupportedForColumn", "parameters": "(TInstance type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSupportedForColumn(TInstance type)", "full_signature": "public static boolean isSupportedForColumn(TInstance type)", "class_method_signature": "TypeValidator.isSupportedForColumn(TInstance type)", "testcase": false, "constructor": false}, {"identifier": "isSupportedForColumn", "parameters": "(TClass type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSupportedForColumn(TClass type)", "full_signature": "public static boolean isSupportedForColumn(TClass type)", "class_method_signature": "TypeValidator.isSupportedForColumn(TClass type)", "testcase": false, "constructor": false}, {"identifier": "isSupportedForIndex", "parameters": "(TInstance type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSupportedForIndex(TInstance type)", "full_signature": "public static boolean isSupportedForIndex(TInstance type)", "class_method_signature": "TypeValidator.isSupportedForIndex(TInstance type)", "testcase": false, "constructor": false}, {"identifier": "isSupportedForNonPointSpatialIndex", "parameters": "(TInstance type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSupportedForNonPointSpatialIndex(TInstance type)", "full_signature": "public static boolean isSupportedForNonPointSpatialIndex(TInstance type)", "class_method_signature": "TypeValidator.isSupportedForNonPointSpatialIndex(TInstance type)", "testcase": false, "constructor": false}, {"identifier": "isSupportedForIndex", "parameters": "(TClass type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSupportedForIndex(TClass type)", "full_signature": "public static boolean isSupportedForIndex(TClass type)", "class_method_signature": "TypeValidator.isSupportedForIndex(TClass type)", "testcase": false, "constructor": false}, {"identifier": "isSupportedForJoin", "parameters": "(TInstance type1, TInstance type2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSupportedForJoin(TInstance type1, TInstance type2)", "full_signature": "public static boolean isSupportedForJoin(TInstance type1, TInstance type2)", "class_method_signature": "TypeValidator.isSupportedForJoin(TInstance type1, TInstance type2)", "testcase": false, "constructor": false}, {"identifier": "isSupportedForJoin", "parameters": "(TClass tclass1, TClass tclass2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSupportedForJoin(TClass tclass1, TClass tclass2)", "full_signature": "public static boolean isSupportedForJoin(TClass tclass1, TClass tclass2)", "class_method_signature": "TypeValidator.isSupportedForJoin(TClass tclass1, TClass tclass2)", "testcase": false, "constructor": false}, {"identifier": "isSupportedForGenerator", "parameters": "(TInstance instance)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSupportedForGenerator(TInstance instance)", "full_signature": "public static boolean isSupportedForGenerator(TInstance instance)", "class_method_signature": "TypeValidator.isSupportedForGenerator(TInstance instance)", "testcase": false, "constructor": false}, {"identifier": "baseJoinType", "parameters": "(TClass tclass)", "modifiers": "protected static", "return": "int", "signature": "int baseJoinType(TClass tclass)", "full_signature": "protected static int baseJoinType(TClass tclass)", "class_method_signature": "TypeValidator.baseJoinType(TClass tclass)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/server/types/common/types/TypeValidator.java"}, "focal_method": {"identifier": "isSupportedForJoin", "parameters": "(TInstance type1, TInstance type2)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isSupportedForJoin(TInstance type1, TInstance type2) {\n        TClass tclass1 = TInstance.tClass(type1);\n        TClass tclass2 = TInstance.tClass(type2);\n        return ((tclass1 != null) && (tclass2 != null) &&\n                isSupportedForJoin(tclass1, tclass2));\n    }", "signature": "boolean isSupportedForJoin(TInstance type1, TInstance type2)", "full_signature": "public static boolean isSupportedForJoin(TInstance type1, TInstance type2)", "class_method_signature": "TypeValidator.isSupportedForJoin(TInstance type1, TInstance type2)", "testcase": false, "constructor": false, "invocations": ["tClass", "tClass", "isSupportedForJoin"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}