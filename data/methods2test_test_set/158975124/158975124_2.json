{"test_class": {"identifier": "TSFHiveRecordReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TSFHiveRecordReader tsfHiveRecordReader;", "modifier": "private", "type": "TSFHiveRecordReader", "declarator": "tsfHiveRecordReader", "var_name": "tsfHiveRecordReader"}, {"original_string": "private String filePath = TestConstant.BASE_OUTPUT_PATH.concat(\"test.tsfile\");", "modifier": "private", "type": "String", "declarator": "filePath = TestConstant.BASE_OUTPUT_PATH.concat(\"test.tsfile\")", "var_name": "filePath"}], "file": "hive-connector/src/test/java/org/apache/iotdb/hive/TSFHiveRecordReaderTest.java"}, "test_case": {"identifier": "testNext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNext() {\n    NullWritable key = tsfHiveRecordReader.createKey();\n    MapWritable value = tsfHiveRecordReader.createValue();\n    try {\n      assertTrue(tsfHiveRecordReader.next(key, value));\n      assertEquals(1L, ((LongWritable)value.get(new Text(\"time_stamp\"))).get());\n      assertEquals(\"device_1\", value.get(new Text(\"device_id\")).toString());\n      assertEquals(1000000L, ((LongWritable)value.get(new Text(\"sensor_1\"))).get());\n      assertEquals(1000000L, ((LongWritable)value.get(new Text(\"sensor_2\"))).get());\n      assertEquals(1000000L, ((LongWritable)value.get(new Text(\"sensor_3\"))).get());\n      assertEquals(1000000L, ((LongWritable)value.get(new Text(\"sensor_4\"))).get());\n      assertEquals(1000000L, ((LongWritable)value.get(new Text(\"sensor_5\"))).get());\n      assertEquals(1000000L, ((LongWritable)value.get(new Text(\"sensor_6\"))).get());\n      assertEquals(1000000L, ((LongWritable)value.get(new Text(\"sensor_7\"))).get());\n      assertEquals(1000000L, ((LongWritable)value.get(new Text(\"sensor_8\"))).get());\n      assertEquals(1000000L, ((LongWritable)value.get(new Text(\"sensor_9\"))).get());\n      assertEquals(1000000L, ((LongWritable)value.get(new Text(\"sensor_10\"))).get());\n\n      for (int i = 0; i < 100; i++) {\n        assertTrue(tsfHiveRecordReader.next(key, value));\n      }\n\n      assertEquals(101L, ((LongWritable)value.get(new Text(\"time_stamp\"))).get());\n      assertEquals(\"device_1\", value.get(new Text(\"device_id\")).toString());\n      assertEquals(1000100L, ((LongWritable)value.get(new Text(\"sensor_1\"))).get());\n      assertEquals(1000100L, ((LongWritable)value.get(new Text(\"sensor_2\"))).get());\n      assertEquals(1000100L, ((LongWritable)value.get(new Text(\"sensor_3\"))).get());\n      assertEquals(1000100L, ((LongWritable)value.get(new Text(\"sensor_4\"))).get());\n      assertEquals(1000100L, ((LongWritable)value.get(new Text(\"sensor_5\"))).get());\n      assertEquals(1000100L, ((LongWritable)value.get(new Text(\"sensor_6\"))).get());\n      assertEquals(1000100L, ((LongWritable)value.get(new Text(\"sensor_7\"))).get());\n      assertEquals(1000100L, ((LongWritable)value.get(new Text(\"sensor_8\"))).get());\n      assertEquals(1000100L, ((LongWritable)value.get(new Text(\"sensor_9\"))).get());\n      assertEquals(1000100L, ((LongWritable)value.get(new Text(\"sensor_10\"))).get());\n\n      for (int i = 0; i < 999899; i++) {\n        assertTrue(tsfHiveRecordReader.next(key, value));\n      }\n\n      assertEquals(1000000L, ((LongWritable)value.get(new Text(\"time_stamp\"))).get());\n      assertEquals(\"device_1\", value.get(new Text(\"device_id\")).toString());\n      assertEquals(1999999L, ((LongWritable)value.get(new Text(\"sensor_1\"))).get());\n      assertEquals(1999999L, ((LongWritable)value.get(new Text(\"sensor_2\"))).get());\n      assertEquals(1999999L, ((LongWritable)value.get(new Text(\"sensor_3\"))).get());\n      assertEquals(1999999L, ((LongWritable)value.get(new Text(\"sensor_4\"))).get());\n      assertEquals(1999999L, ((LongWritable)value.get(new Text(\"sensor_5\"))).get());\n      assertEquals(1999999L, ((LongWritable)value.get(new Text(\"sensor_6\"))).get());\n      assertEquals(1999999L, ((LongWritable)value.get(new Text(\"sensor_7\"))).get());\n      assertEquals(1999999L, ((LongWritable)value.get(new Text(\"sensor_8\"))).get());\n      assertEquals(1999999L, ((LongWritable)value.get(new Text(\"sensor_9\"))).get());\n      assertEquals(1999999L, ((LongWritable)value.get(new Text(\"sensor_10\"))).get());\n\n      // reach the end of the file\n      assertFalse(tsfHiveRecordReader.next(key, value));\n    } catch (IOException e) {\n      e.printStackTrace();\n      fail();\n    }\n  }", "signature": "void testNext()", "full_signature": "@Test public void testNext()", "class_method_signature": "TSFHiveRecordReaderTest.testNext()", "testcase": true, "constructor": false, "invocations": ["createKey", "createValue", "assertTrue", "next", "assertEquals", "get", "get", "assertEquals", "toString", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertTrue", "next", "assertEquals", "get", "get", "assertEquals", "toString", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertTrue", "next", "assertEquals", "get", "get", "assertEquals", "toString", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertFalse", "next", "printStackTrace", "fail"]}, "focal_class": {"identifier": "TSFHiveRecordReader", "superclass": "", "interfaces": "implements RecordReader<NullWritable, MapWritable>, IReaderSet", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TSFHiveRecordReader.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TSFHiveRecordReader.class)", "var_name": "logger"}, {"original_string": "private List<QueryDataSet> dataSetList = new ArrayList<>();", "modifier": "private", "type": "List<QueryDataSet>", "declarator": "dataSetList = new ArrayList<>()", "var_name": "dataSetList"}, {"original_string": "private List<String> deviceIdList = new ArrayList<>();", "modifier": "private", "type": "List<String>", "declarator": "deviceIdList = new ArrayList<>()", "var_name": "deviceIdList"}, {"original_string": "private int currentIndex = 0;", "modifier": "private", "type": "int", "declarator": "currentIndex = 0", "var_name": "currentIndex"}, {"original_string": "private boolean isReadDeviceId;", "modifier": "private", "type": "boolean", "declarator": "isReadDeviceId", "var_name": "isReadDeviceId"}, {"original_string": "private boolean isReadTime;", "modifier": "private", "type": "boolean", "declarator": "isReadTime", "var_name": "isReadTime"}, {"original_string": "private TsFileSequenceReader reader;", "modifier": "private", "type": "TsFileSequenceReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private List<String> measurementIds;", "modifier": "private", "type": "List<String>", "declarator": "measurementIds", "var_name": "measurementIds"}], "methods": [{"identifier": "next", "parameters": "(NullWritable key, MapWritable value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean next(NullWritable key, MapWritable value)", "full_signature": "@Override public boolean next(NullWritable key, MapWritable value)", "class_method_signature": "TSFHiveRecordReader.next(NullWritable key, MapWritable value)", "testcase": false, "constructor": false}, {"identifier": "createKey", "parameters": "()", "modifiers": "@Override public", "return": "NullWritable", "signature": "NullWritable createKey()", "full_signature": "@Override public NullWritable createKey()", "class_method_signature": "TSFHiveRecordReader.createKey()", "testcase": false, "constructor": false}, {"identifier": "createValue", "parameters": "()", "modifiers": "@Override public", "return": "MapWritable", "signature": "MapWritable createValue()", "full_signature": "@Override public MapWritable createValue()", "class_method_signature": "TSFHiveRecordReader.createValue()", "testcase": false, "constructor": false}, {"identifier": "getPos", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getPos()", "full_signature": "@Override public long getPos()", "class_method_signature": "TSFHiveRecordReader.getPos()", "testcase": false, "constructor": false}, {"identifier": "TSFHiveRecordReader", "parameters": "(InputSplit split, JobConf job)", "modifiers": "public", "return": "", "signature": " TSFHiveRecordReader(InputSplit split, JobConf job)", "full_signature": "public  TSFHiveRecordReader(InputSplit split, JobConf job)", "class_method_signature": "TSFHiveRecordReader.TSFHiveRecordReader(InputSplit split, JobConf job)", "testcase": false, "constructor": true}, {"identifier": "getProgress", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float getProgress()", "full_signature": "@Override public float getProgress()", "class_method_signature": "TSFHiveRecordReader.getProgress()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "TSFHiveRecordReader.close()", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(TsFileSequenceReader reader)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(TsFileSequenceReader reader)", "full_signature": "@Override public void setReader(TsFileSequenceReader reader)", "class_method_signature": "TSFHiveRecordReader.setReader(TsFileSequenceReader reader)", "testcase": false, "constructor": false}, {"identifier": "setMeasurementIds", "parameters": "(List<String> measurementIds)", "modifiers": "@Override public", "return": "void", "signature": "void setMeasurementIds(List<String> measurementIds)", "full_signature": "@Override public void setMeasurementIds(List<String> measurementIds)", "class_method_signature": "TSFHiveRecordReader.setMeasurementIds(List<String> measurementIds)", "testcase": false, "constructor": false}, {"identifier": "setReadDeviceId", "parameters": "(boolean isReadDeviceId)", "modifiers": "@Override public", "return": "void", "signature": "void setReadDeviceId(boolean isReadDeviceId)", "full_signature": "@Override public void setReadDeviceId(boolean isReadDeviceId)", "class_method_signature": "TSFHiveRecordReader.setReadDeviceId(boolean isReadDeviceId)", "testcase": false, "constructor": false}, {"identifier": "setReadTime", "parameters": "(boolean isReadTime)", "modifiers": "@Override public", "return": "void", "signature": "void setReadTime(boolean isReadTime)", "full_signature": "@Override public void setReadTime(boolean isReadTime)", "class_method_signature": "TSFHiveRecordReader.setReadTime(boolean isReadTime)", "testcase": false, "constructor": false}], "file": "hive-connector/src/main/java/org/apache/iotdb/hive/TSFHiveRecordReader.java"}, "focal_method": {"identifier": "next", "parameters": "(NullWritable key, MapWritable value)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean next(NullWritable key, MapWritable value) throws IOException {\n    while (currentIndex < dataSetList.size()) {\n      if (!dataSetList.get(currentIndex).hasNext()) {\n        currentIndex++;\n      }\n      else {\n        RowRecord rowRecord = dataSetList.get(currentIndex).next();\n        List<Field> fields = rowRecord.getFields();\n        long timestamp = rowRecord.getTimestamp();\n\n        try {\n          MapWritable res = new MapWritable();\n          getCurrentValue(deviceIdList, currentIndex, timestamp, isReadTime, isReadDeviceId, fields, measurementIds)\n                  .forEach((k, v) -> res.put(new Text(k.toString().toLowerCase()), v));\n          value.putAll(res);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          throw new IOException(e.getMessage());\n        }\n\n        return true;\n      }\n    }\n    return false;\n  }", "signature": "boolean next(NullWritable key, MapWritable value)", "full_signature": "@Override public boolean next(NullWritable key, MapWritable value)", "class_method_signature": "TSFHiveRecordReader.next(NullWritable key, MapWritable value)", "testcase": false, "constructor": false, "invocations": ["size", "hasNext", "get", "next", "get", "getFields", "getTimestamp", "forEach", "getCurrentValue", "put", "toLowerCase", "toString", "putAll", "interrupt", "currentThread", "getMessage"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}