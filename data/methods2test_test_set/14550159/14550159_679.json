{"test_class": {"identifier": "ContextParameterResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Parameter                parameter;", "modifier": "private", "type": "Parameter", "declarator": "parameter", "var_name": "parameter"}, {"original_string": "private ApplicationContext       applicationContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private EnvironmentContext       environmentContext;", "modifier": "private", "type": "EnvironmentContext", "declarator": "environmentContext", "var_name": "environmentContext"}, {"original_string": "private ContextParameterResolver contextParameterResolver;", "modifier": "private", "type": "ContextParameterResolver", "declarator": "contextParameterResolver", "var_name": "contextParameterResolver"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/method/ContextParameterResolverTest.java"}, "test_case": {"identifier": "resolvesHttpHeaders", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void resolvesHttpHeaders() throws Exception {\n        HttpHeaders httpHeaders = mock(HttpHeaders.class);\n        when(applicationContext.getHttpHeaders()).thenReturn(httpHeaders);\n        when(parameter.getParameterClass()).thenReturn((Class)HttpHeaders.class);\n\n        assertSame(httpHeaders, contextParameterResolver.resolve(parameter, applicationContext));\n        verify(environmentContext, never()).get(any(Class.class));\n    }", "signature": "void resolvesHttpHeaders()", "full_signature": "@Test public void resolvesHttpHeaders()", "class_method_signature": "ContextParameterResolverTest.resolvesHttpHeaders()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getHttpHeaders", "thenReturn", "when", "getParameterClass", "assertSame", "resolve", "get", "verify", "never", "any"]}, "focal_class": {"identifier": "ContextParameterResolver", "superclass": "", "interfaces": "implements ParameterResolver<Context>", "fields": [], "methods": [{"identifier": "resolve", "parameters": "(org.everrest.core.Parameter parameter, ApplicationContext context)", "modifiers": "@Override public", "return": "Object", "signature": "Object resolve(org.everrest.core.Parameter parameter, ApplicationContext context)", "full_signature": "@Override public Object resolve(org.everrest.core.Parameter parameter, ApplicationContext context)", "class_method_signature": "ContextParameterResolver.resolve(org.everrest.core.Parameter parameter, ApplicationContext context)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/method/ContextParameterResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(org.everrest.core.Parameter parameter, ApplicationContext context)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object resolve(org.everrest.core.Parameter parameter, ApplicationContext context) throws Exception {\n        Class<?> parameterClass = parameter.getParameterClass();\n        if (parameterClass == HttpHeaders.class) {\n            return context.getHttpHeaders();\n        } else if (parameterClass == SecurityContext.class) {\n            return context.getSecurityContext();\n        } else if (parameterClass == Request.class) {\n            return context.getRequest();\n        } else if (parameterClass == UriInfo.class) {\n            return context.getUriInfo();\n        } else if (parameterClass == Providers.class) {\n            return context.getProviders();\n        } else if (parameterClass == Application.class) {\n            return context.getApplication();\n        } else if (parameterClass == InitialProperties.class) {\n            return context.getInitialProperties();\n        }\n        return EnvironmentContext.getCurrent().get(parameter.getParameterClass());\n    }", "signature": "Object resolve(org.everrest.core.Parameter parameter, ApplicationContext context)", "full_signature": "@Override public Object resolve(org.everrest.core.Parameter parameter, ApplicationContext context)", "class_method_signature": "ContextParameterResolver.resolve(org.everrest.core.Parameter parameter, ApplicationContext context)", "testcase": false, "constructor": false, "invocations": ["getParameterClass", "getHttpHeaders", "getSecurityContext", "getRequest", "getUriInfo", "getProviders", "getApplication", "getInitialProperties", "get", "getCurrent", "getParameterClass"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}