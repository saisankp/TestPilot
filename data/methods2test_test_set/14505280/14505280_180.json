{"test_class": {"identifier": "AutomaticDispatcherUrlServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String X_FORWARD_HOST_HEADER = \"X-Forwarded-Host\";", "modifier": "private static final", "type": "String", "declarator": "X_FORWARD_HOST_HEADER = \"X-Forwarded-Host\"", "var_name": "X_FORWARD_HOST_HEADER"}, {"original_string": "private static final String X_GWT_MODULE_HEADER = \"X-GWT-Module-Base\";", "modifier": "private static final", "type": "String", "declarator": "X_GWT_MODULE_HEADER = \"X-GWT-Module-Base\"", "var_name": "X_GWT_MODULE_HEADER"}], "file": "common-servlet/src/test/java/org/geomajas/servlet/AutomaticDispatcherUrlServiceTest.java"}, "test_case": {"identifier": "testReverseProxyWithModuleBase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testReverseProxyWithModuleBase() {\n\t\tAutomaticDispatcherUrlService adus = new AutomaticDispatcherUrlService();\n\n\t\t// set mock request in context holder\n\t\tMockHttpServletRequest mockRequest = new MockHttpServletRequest();\n\t\tmockRequest.setScheme(\"http\");\n\t\tmockRequest.setServerName(\"myhost\");\n\t\tmockRequest.setServerPort(80);\n\t\tmockRequest.setContextPath(\"/test\");\n\t\tmockRequest.addHeader(X_FORWARD_HOST_HEADER, \"geomajas.org\");\n\t\tmockRequest.addHeader(X_GWT_MODULE_HEADER, \"http://geomajas.org/app/Module\");\n\t\tServletRequestAttributes attributes = new ServletRequestAttributes(mockRequest);\n\t\tRequestContextHolder.setRequestAttributes(attributes);\n\t\tAssert.assertEquals(\"http://geomajas.org/app/d/\", adus.getDispatcherUrl());\n\n\t\t// clean up\n\t\tRequestContextHolder.setRequestAttributes(null);\n\t}", "signature": "void testReverseProxyWithModuleBase()", "full_signature": "@Test public void testReverseProxyWithModuleBase()", "class_method_signature": "AutomaticDispatcherUrlServiceTest.testReverseProxyWithModuleBase()", "testcase": true, "constructor": false, "invocations": ["setScheme", "setServerName", "setServerPort", "setContextPath", "addHeader", "addHeader", "setRequestAttributes", "assertEquals", "getDispatcherUrl", "setRequestAttributes"]}, "focal_class": {"identifier": "AutomaticDispatcherUrlService", "superclass": "", "interfaces": "implements DispatcherUrlService", "fields": [{"original_string": "private static final long serialVersionUID = 110L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 110L", "var_name": "serialVersionUID"}, {"original_string": "private static final String X_FORWARD_HOST_HEADER = \"X-Forwarded-Host\";", "modifier": "private static final", "type": "String", "declarator": "X_FORWARD_HOST_HEADER = \"X-Forwarded-Host\"", "var_name": "X_FORWARD_HOST_HEADER"}, {"original_string": "private static final String X_GWT_MODULE_HEADER = \"X-GWT-Module-Base\";", "modifier": "private static final", "type": "String", "declarator": "X_GWT_MODULE_HEADER = \"X-GWT-Module-Base\"", "var_name": "X_GWT_MODULE_HEADER"}, {"original_string": "private final Logger log = LoggerFactory.getLogger(AutomaticDispatcherUrlService.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AutomaticDispatcherUrlService.class)", "var_name": "log"}, {"original_string": "private String localDispatcherUrl;", "modifier": "private", "type": "String", "declarator": "localDispatcherUrl", "var_name": "localDispatcherUrl"}], "methods": [{"identifier": "getDispatcherUrl", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDispatcherUrl()", "full_signature": "@Override public String getDispatcherUrl()", "class_method_signature": "AutomaticDispatcherUrlService.getDispatcherUrl()", "testcase": false, "constructor": false}, {"identifier": "getLocalDispatcherUrl", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLocalDispatcherUrl()", "full_signature": "@Override public String getLocalDispatcherUrl()", "class_method_signature": "AutomaticDispatcherUrlService.getLocalDispatcherUrl()", "testcase": false, "constructor": false}, {"identifier": "setLocalDispatcherUrl", "parameters": "(String localDispatcherUrl)", "modifiers": "@Api public", "return": "void", "signature": "void setLocalDispatcherUrl(String localDispatcherUrl)", "full_signature": "@Api public void setLocalDispatcherUrl(String localDispatcherUrl)", "class_method_signature": "AutomaticDispatcherUrlService.setLocalDispatcherUrl(String localDispatcherUrl)", "testcase": false, "constructor": false}, {"identifier": "localize", "parameters": "(String externalUrl)", "modifiers": "@Override public", "return": "String", "signature": "String localize(String externalUrl)", "full_signature": "@Override public String localize(String externalUrl)", "class_method_signature": "AutomaticDispatcherUrlService.localize(String externalUrl)", "testcase": false, "constructor": false}, {"identifier": "getBasePathForHostNamePort", "parameters": "(HttpServletRequest request, String hostName, int port)", "modifiers": "private", "return": "String", "signature": "String getBasePathForHostNamePort(HttpServletRequest request, String hostName, int port)", "full_signature": "private String getBasePathForHostNamePort(HttpServletRequest request, String hostName, int port)", "class_method_signature": "AutomaticDispatcherUrlService.getBasePathForHostNamePort(HttpServletRequest request, String hostName, int port)", "testcase": false, "constructor": false}], "file": "common-servlet/src/main/java/org/geomajas/servlet/AutomaticDispatcherUrlService.java"}, "focal_method": {"identifier": "getDispatcherUrl", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String getDispatcherUrl() {\n\t\tRequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();\n\t\tif (null == requestAttributes || !(requestAttributes instanceof ServletRequestAttributes)) {\n\t\t\tlog.warn(\"Trying to automatically get the dispatcher URL, but not running inside a servlet request. \" +\n\t\t\t\t\t\"You are recommended to use StaticDispatcherUrlService\");\n\t\t\treturn \"./d/\"; // use relative URL as back-up, will fail in many cases\n\t\t}\n\n\t\tHttpServletRequest request = ((ServletRequestAttributes) requestAttributes).getRequest();\n\n\t\tString serverName = request.getServerName();\n\n\t\t// X-Forwarded-Host if behind a reverse proxy, fallback to general method.\n\t\t// Alternative we could use the gwt module url to guess the real URL.\n\t\tif (null != request.getHeader(X_FORWARD_HOST_HEADER)) {\n\t\t\tlog.warn(\"AutomaticDispatcherService detected a X-Forwarded-Host header which means the server is \" +\n\t\t\t\t\t\"accessed using a reverse proxy server. This might cause problems in some cases. You are \" +\n\t\t\t\t\t\"recommended to configure your tomcat connector to be aware of the original url. \" +\n\t\t\t\t\t\"(see http://tomcat.apache.org/tomcat-6.0-doc/proxy-howto.html )\");\n\t\t\tString gwtModuleBase = request.getHeader(X_GWT_MODULE_HEADER);\n\t\t\tif (null != gwtModuleBase) {\n\t\t\t\t// Get last slash in the gwtModuleBase, ignoring the trailing slash.\n\t\t\t\tint contextEndIndex = gwtModuleBase.lastIndexOf(\"/\", gwtModuleBase.length() - 2);\n\t\t\t\tif (contextEndIndex > -1) {\n\t\t\t\t\treturn gwtModuleBase.substring(0, contextEndIndex) + \"/d/\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// else get the information from the X-forwarded-host header and default to the standard behaviour \n\t\t\t\tserverName = request.getHeader(X_FORWARD_HOST_HEADER);\n\t\t\t}\n\t\t}\n\n\t\treturn getBasePathForHostNamePort(request, serverName, request.getServerPort());\n\t}", "signature": "String getDispatcherUrl()", "full_signature": "@Override public String getDispatcherUrl()", "class_method_signature": "AutomaticDispatcherUrlService.getDispatcherUrl()", "testcase": false, "constructor": false, "invocations": ["getRequestAttributes", "warn", "getRequest", "getServerName", "getHeader", "warn", "getHeader", "lastIndexOf", "length", "substring", "getHeader", "getBasePathForHostNamePort", "getServerPort"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}