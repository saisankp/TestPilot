{"test_class": {"identifier": "TestTimeLineAuditDBHelper", "superclass": "extends AuditDBUtil", "interfaces": "", "fields": [{"original_string": "protected Date fromDate = new Date(1388534400000l);", "modifier": "protected", "type": "Date", "declarator": "fromDate = new Date(1388534400000l)", "var_name": "fromDate"}, {"original_string": "protected Date toDate = new Date(1391212800000l);", "modifier": "protected", "type": "Date", "declarator": "toDate = new Date(1391212800000l)", "var_name": "toDate"}, {"original_string": "protected Date dateInbetween = new Date(1388534460000l);", "modifier": "protected", "type": "Date", "declarator": "dateInbetween = new Date(1388534460000l)", "var_name": "dateInbetween"}, {"original_string": "protected Date dateInbetweenDifferntDay = new Date(1388620860000l);", "modifier": "protected", "type": "Date", "declarator": "dateInbetweenDifferntDay = new Date(1388620860000l)", "var_name": "dateInbetweenDifferntDay"}, {"original_string": "private Tuple t1;", "modifier": "private", "type": "Tuple", "declarator": "t1", "var_name": "t1"}, {"original_string": "private Tuple t2;", "modifier": "private", "type": "Tuple", "declarator": "t2", "var_name": "t2"}, {"original_string": "private Tuple t3;", "modifier": "private", "type": "Tuple", "declarator": "t3", "var_name": "t3"}, {"original_string": "private Set<Tuple> tupleSet = new HashSet<Tuple>();", "modifier": "private", "type": "Set<Tuple>", "declarator": "tupleSet = new HashSet<Tuple>()", "var_name": "tupleSet"}], "file": "conduit-audit/src/test/java/com/inmobi/conduit/audit/util/TestTimeLineAuditDBHelper.java"}, "test_case": {"identifier": "testTimeGroup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTimeGroup() {\n    ClientConfig conf =\n        ClientConfig.loadFromClasspath(AuditDBConstants.FEEDER_CONF_FILE);\n\n    //TimeRange of query < 3 days\n    TimeLineAuditDBHelper helper = new TimeLineAuditDBHelper(conf,\n        \"01-01-2014-00:00\", \"03-01-2014-00:00\");\n    Assert.assertEquals(60 * 60000, helper.getTimeGroup());\n\n    //TimeRange of query > 3 days but < 1 week\n    helper = new TimeLineAuditDBHelper(conf, \"01-01-2014-00:00\",\n        \"06-01-2014-00:00\");\n    Assert.assertEquals(120 * 60000, helper.getTimeGroup());\n\n    //TimeRange of query > 1 week but < 2 week\n    helper = new TimeLineAuditDBHelper(conf, \"01-01-2014-00:00\",\n        \"13-01-2014-00:00\");\n    Assert.assertEquals(240 * 60000, helper.getTimeGroup());\n\n    //TimeRange of query > 2 weeks but < 3 weeks\n    helper = new TimeLineAuditDBHelper(conf, \"01-01-2014-00:00\",\n        \"20-01-2014-00:00\");\n    Assert.assertEquals(360 * 60000, helper.getTimeGroup());\n\n    //TimeRange of query > 3 weeks but < 4 weeks\n    helper = new TimeLineAuditDBHelper(conf, \"01-01-2014-00:00\",\n        \"27-01-2014-00:00\");\n    Assert.assertEquals(480 * 60000, helper.getTimeGroup());\n\n    //TimeRange of query > 4 weeks but < 8 weeks\n    helper = new TimeLineAuditDBHelper(conf, \"01-01-2014-00:00\",\n        \"15-02-2014-00:00\");\n    Assert.assertEquals(720 * 60000, helper.getTimeGroup());\n\n    //TimeRange of query > 8 weeks\n    helper = new TimeLineAuditDBHelper(conf, \"01-01-2014-00:00\",\n        \"03-03-2014-00:00\");\n    Assert.assertEquals(1440 * 60000, helper.getTimeGroup());\n\n    //Default time is less than timeinterval bucket set in conf\n    conf.set(TimeLineAuditDBHelper.TIMEBUCKET, \"180\");\n    helper = new TimeLineAuditDBHelper(conf, \"01-01-2014-00:00\",\n        \"06-01-2014-00:00\");\n    Assert.assertEquals(180 * 60000, helper.getTimeGroup());\n\n    //Default time is greater than timeinterval bucket set in conf\n    helper = new TimeLineAuditDBHelper(conf, \"01-01-2014-00:00\",\n        \"23-01-2014-00:00\");\n    Assert.assertEquals(480 * 60000, helper.getTimeGroup());\n\n    //Pass date of wrong format\n    conf.set(TimeLineAuditDBHelper.TIMEBUCKET, \"60\");\n    helper = new TimeLineAuditDBHelper(conf, \"01/01/2014-00:00\",\n        \"23-01-2014-00:00\");\n    Assert.assertNotNull(helper.getTimeGroup());\n    Assert.assertEquals(60 * 60000, helper.getTimeGroup());\n  }", "signature": "void testTimeGroup()", "full_signature": "@Test public void testTimeGroup()", "class_method_signature": "TestTimeLineAuditDBHelper.testTimeGroup()", "testcase": true, "constructor": false, "invocations": ["loadFromClasspath", "assertEquals", "getTimeGroup", "assertEquals", "getTimeGroup", "assertEquals", "getTimeGroup", "assertEquals", "getTimeGroup", "assertEquals", "getTimeGroup", "assertEquals", "getTimeGroup", "assertEquals", "getTimeGroup", "set", "assertEquals", "getTimeGroup", "assertEquals", "getTimeGroup", "set", "assertNotNull", "getTimeGroup", "assertEquals", "getTimeGroup"]}, "focal_class": {"identifier": "TimeLineAuditDBHelper", "superclass": "extends AuditDBHelper", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(TimeLineAuditDBHelper.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(TimeLineAuditDBHelper.class)", "var_name": "LOG"}, {"original_string": "public static final String TIMEBUCKET = \"visualization.timebucket\";", "modifier": "public static final", "type": "String", "declarator": "TIMEBUCKET = \"visualization.timebucket\"", "var_name": "TIMEBUCKET"}, {"original_string": "private static final long ONE_DAY_IN_MILLISECONDS = 24 * 60 * 60 * 1000;", "modifier": "private static final", "type": "long", "declarator": "ONE_DAY_IN_MILLISECONDS = 24 * 60 * 60 * 1000", "var_name": "ONE_DAY_IN_MILLISECONDS"}, {"original_string": "private static final long THREE_DAY_LIMIT = 3 * ONE_DAY_IN_MILLISECONDS;", "modifier": "private static final", "type": "long", "declarator": "THREE_DAY_LIMIT = 3 * ONE_DAY_IN_MILLISECONDS", "var_name": "THREE_DAY_LIMIT"}, {"original_string": "private static final long WEEK_LIMIT = 7 * ONE_DAY_IN_MILLISECONDS;", "modifier": "private static final", "type": "long", "declarator": "WEEK_LIMIT = 7 * ONE_DAY_IN_MILLISECONDS", "var_name": "WEEK_LIMIT"}, {"original_string": "private static final long TWO_WEEK_LIMIT = 14 * ONE_DAY_IN_MILLISECONDS;", "modifier": "private static final", "type": "long", "declarator": "TWO_WEEK_LIMIT = 14 * ONE_DAY_IN_MILLISECONDS", "var_name": "TWO_WEEK_LIMIT"}, {"original_string": "private static final long THREE_WEEK_LIMIT = 21 * ONE_DAY_IN_MILLISECONDS;", "modifier": "private static final", "type": "long", "declarator": "THREE_WEEK_LIMIT = 21 * ONE_DAY_IN_MILLISECONDS", "var_name": "THREE_WEEK_LIMIT"}, {"original_string": "private static final long MONTH_LIMIT = 30 * ONE_DAY_IN_MILLISECONDS;", "modifier": "private static final", "type": "long", "declarator": "MONTH_LIMIT = 30 * ONE_DAY_IN_MILLISECONDS", "var_name": "MONTH_LIMIT"}, {"original_string": "private static final long TWO_MONTH_LIMIT = 2 * 30 * ONE_DAY_IN_MILLISECONDS;", "modifier": "private static final", "type": "long", "declarator": "TWO_MONTH_LIMIT = 2 * 30 * ONE_DAY_IN_MILLISECONDS", "var_name": "TWO_MONTH_LIMIT"}, {"original_string": "public static final SimpleDateFormat auditDateFormatter = new\n      SimpleDateFormat(AuditUtil.DATE_FORMAT);", "modifier": "public static final", "type": "SimpleDateFormat", "declarator": "auditDateFormatter = new\n      SimpleDateFormat(AuditUtil.DATE_FORMAT)", "var_name": "auditDateFormatter"}, {"original_string": "private int timeGroup;", "modifier": "private", "type": "int", "declarator": "timeGroup", "var_name": "timeGroup"}], "methods": [{"identifier": "TimeLineAuditDBHelper", "parameters": "(ClientConfig config, String startTime,\n                               String endTime)", "modifiers": "public", "return": "", "signature": " TimeLineAuditDBHelper(ClientConfig config, String startTime,\n                               String endTime)", "full_signature": "public  TimeLineAuditDBHelper(ClientConfig config, String startTime,\n                               String endTime)", "class_method_signature": "TimeLineAuditDBHelper.TimeLineAuditDBHelper(ClientConfig config, String startTime,\n                               String endTime)", "testcase": false, "constructor": true}, {"identifier": "setTimeGroupBasedOnTimeRange", "parameters": "(int timebucketConfig,\n                                            String startTime, String endTime)", "modifiers": "private", "return": "void", "signature": "void setTimeGroupBasedOnTimeRange(int timebucketConfig,\n                                            String startTime, String endTime)", "full_signature": "private void setTimeGroupBasedOnTimeRange(int timebucketConfig,\n                                            String startTime, String endTime)", "class_method_signature": "TimeLineAuditDBHelper.setTimeGroupBasedOnTimeRange(int timebucketConfig,\n                                            String startTime, String endTime)", "testcase": false, "constructor": false}, {"identifier": "getSelectStmtForRetrieve", "parameters": "(Filter filter, GroupBy groupBy)", "modifiers": "@Override public", "return": "String", "signature": "String getSelectStmtForRetrieve(Filter filter, GroupBy groupBy)", "full_signature": "@Override public String getSelectStmtForRetrieve(Filter filter, GroupBy groupBy)", "class_method_signature": "TimeLineAuditDBHelper.getSelectStmtForRetrieve(Filter filter, GroupBy groupBy)", "testcase": false, "constructor": false}, {"identifier": "getTimeGroup", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTimeGroup()", "full_signature": "public int getTimeGroup()", "class_method_signature": "TimeLineAuditDBHelper.getTimeGroup()", "testcase": false, "constructor": false}], "file": "conduit-audit/src/main/java/com/inmobi/conduit/audit/util/TimeLineAuditDBHelper.java"}, "focal_method": {"identifier": "getTimeGroup", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int getTimeGroup() {\n    return timeGroup;\n  }", "signature": "int getTimeGroup()", "full_signature": "public int getTimeGroup()", "class_method_signature": "TimeLineAuditDBHelper.getTimeGroup()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 7218024, "url": "https://github.com/InMobi/conduit", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 49400, "license": "licensed"}}