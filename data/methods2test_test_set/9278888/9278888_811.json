{"test_class": {"identifier": "TracingTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TestSpanHandler spans = new TestSpanHandler();", "modifier": "", "type": "TestSpanHandler", "declarator": "spans = new TestSpanHandler()", "var_name": "spans"}], "file": "brave/src/test/java/brave/TracingTest.java"}, "test_case": {"identifier": "spanHandlers_clearAndAdd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void spanHandlers_clearAndAdd() {\n    SpanHandler one = mock(SpanHandler.class);\n    SpanHandler two = mock(SpanHandler.class);\n    SpanHandler three = mock(SpanHandler.class);\n\n    Tracing.Builder builder = Tracing.newBuilder()\n        .addSpanHandler(one)\n        .addSpanHandler(two)\n        .addSpanHandler(three);\n\n    Set<SpanHandler> spanHandlers = builder.spanHandlers();\n\n    builder.clearSpanHandlers();\n\n    spanHandlers.forEach(builder::addSpanHandler);\n\n    assertThat(builder)\n        .usingRecursiveComparison()\n        .isEqualTo(Tracing.newBuilder()\n            .addSpanHandler(one)\n            .addSpanHandler(two)\n            .addSpanHandler(three));\n  }", "signature": "void spanHandlers_clearAndAdd()", "full_signature": "@Test public void spanHandlers_clearAndAdd()", "class_method_signature": "TracingTest.spanHandlers_clearAndAdd()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "addSpanHandler", "addSpanHandler", "addSpanHandler", "newBuilder", "spanHandlers", "clearSpanHandlers", "forEach", "isEqualTo", "usingRecursiveComparison", "assertThat", "addSpanHandler", "addSpanHandler", "addSpanHandler", "newBuilder"]}, "focal_class": {"identifier": "Tracing", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "static final AtomicReference<Tracing> CURRENT = new AtomicReference<>();", "modifier": "static final", "type": "AtomicReference<Tracing>", "declarator": "CURRENT = new AtomicReference<>()", "var_name": "CURRENT"}], "methods": [{"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder()", "full_signature": "public static Builder newBuilder()", "class_method_signature": "Tracing.newBuilder()", "testcase": false, "constructor": false}, {"identifier": "tracer", "parameters": "()", "modifiers": "abstract public", "return": "Tracer", "signature": "Tracer tracer()", "full_signature": "abstract public Tracer tracer()", "class_method_signature": "Tracing.tracer()", "testcase": false, "constructor": false}, {"identifier": "propagation", "parameters": "()", "modifiers": "public abstract", "return": "Propagation<String>", "signature": "Propagation<String> propagation()", "full_signature": "public abstract Propagation<String> propagation()", "class_method_signature": "Tracing.propagation()", "testcase": false, "constructor": false}, {"identifier": "propagationFactory", "parameters": "()", "modifiers": "@Deprecated public abstract", "return": "Propagation.Factory", "signature": "Propagation.Factory propagationFactory()", "full_signature": "@Deprecated public abstract Propagation.Factory propagationFactory()", "class_method_signature": "Tracing.propagationFactory()", "testcase": false, "constructor": false}, {"identifier": "sampler", "parameters": "()", "modifiers": "abstract public", "return": "Sampler", "signature": "Sampler sampler()", "full_signature": "abstract public Sampler sampler()", "class_method_signature": "Tracing.sampler()", "testcase": false, "constructor": false}, {"identifier": "currentTraceContext", "parameters": "()", "modifiers": "abstract public", "return": "CurrentTraceContext", "signature": "CurrentTraceContext currentTraceContext()", "full_signature": "abstract public CurrentTraceContext currentTraceContext()", "class_method_signature": "Tracing.currentTraceContext()", "testcase": false, "constructor": false}, {"identifier": "clock", "parameters": "(TraceContext context)", "modifiers": "public final", "return": "Clock", "signature": "Clock clock(TraceContext context)", "full_signature": "public final Clock clock(TraceContext context)", "class_method_signature": "Tracing.clock(TraceContext context)", "testcase": false, "constructor": false}, {"identifier": "errorParser", "parameters": "()", "modifiers": "@Deprecated public abstract", "return": "ErrorParser", "signature": "ErrorParser errorParser()", "full_signature": "@Deprecated public abstract ErrorParser errorParser()", "class_method_signature": "Tracing.errorParser()", "testcase": false, "constructor": false}, {"identifier": "current", "parameters": "()", "modifiers": "@Nullable public static", "return": "Tracing", "signature": "Tracing current()", "full_signature": "@Nullable public static Tracing current()", "class_method_signature": "Tracing.current()", "testcase": false, "constructor": false}, {"identifier": "currentTracer", "parameters": "()", "modifiers": "@Nullable public static", "return": "Tracer", "signature": "Tracer currentTracer()", "full_signature": "@Nullable public static Tracer currentTracer()", "class_method_signature": "Tracing.currentTracer()", "testcase": false, "constructor": false}, {"identifier": "isNoop", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isNoop()", "full_signature": "public abstract boolean isNoop()", "class_method_signature": "Tracing.isNoop()", "testcase": false, "constructor": false}, {"identifier": "setNoop", "parameters": "(boolean noop)", "modifiers": "public abstract", "return": "void", "signature": "void setNoop(boolean noop)", "full_signature": "public abstract void setNoop(boolean noop)", "class_method_signature": "Tracing.setNoop(boolean noop)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override abstract public", "return": "void", "signature": "void close()", "full_signature": "@Override abstract public void close()", "class_method_signature": "Tracing.close()", "testcase": false, "constructor": false}, {"identifier": "Tracing", "parameters": "()", "modifiers": "", "return": "", "signature": " Tracing()", "full_signature": "  Tracing()", "class_method_signature": "Tracing.Tracing()", "testcase": false, "constructor": true}], "file": "brave/src/main/java/brave/Tracing.java"}, "focal_method": {"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder", "body": "public static Builder newBuilder() {\n    return new Builder();\n  }", "signature": "Builder newBuilder()", "full_signature": "public static Builder newBuilder()", "class_method_signature": "Tracing.newBuilder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}