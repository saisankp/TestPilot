{"test_class": {"identifier": "DateTimePeriodTest", "superclass": "", "interfaces": "", "fields": [], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/time/DateTimePeriodTest.java"}, "test_case": {"identifier": "createHour", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createHour() throws Exception {\n        // test all 3 ways to create an hour\n        DateTimePeriod period0 = DateTimePeriod.createHour(2009, 2, 1, 9, DateTimeZone.UTC);\n        DateTimePeriod period1 = DateTimePeriod.createHour(new DateTime(2009,2,1,9,0,0,0,DateTimeZone.UTC));\n        DateTimePeriod period2 = DateTimePeriod.create(DateTimeDuration.HOUR, new DateTime(2009,2,1,9,0,0,0,DateTimeZone.UTC));\n\n        DateTime correctStart = new DateTime(2009,2,1,9,0,0,0,DateTimeZone.UTC);\n        DateTime correctEnd = new DateTime(2009,2,1,10,0,0,0,DateTimeZone.UTC);\n        Assert.assertEquals(correctStart, period0.getStart());\n        Assert.assertEquals(correctEnd, period0.getEnd());\n        Assert.assertEquals(DateTimeDuration.HOUR, period0.getDuration());\n        Assert.assertEquals(\"2009-02-01-09\", period0.getKey());\n        Assert.assertEquals(\"February 1, 2009 09:00\", period0.getLongName());\n        Assert.assertEquals(\"09:00\", period0.getShortName());\n        Assert.assertEquals(\"09\", period0.getIndexName());\n\n        Assert.assertEquals(correctStart, period1.getStart());\n        Assert.assertEquals(correctEnd, period1.getEnd());\n        Assert.assertEquals(DateTimeDuration.HOUR, period1.getDuration());\n        Assert.assertEquals(\"2009-02-01-09\", period1.getKey());\n        Assert.assertEquals(\"February 1, 2009 09:00\", period0.getLongName());\n        Assert.assertEquals(\"09:00\", period0.getShortName());\n        Assert.assertEquals(\"09\", period0.getIndexName());\n\n        Assert.assertEquals(correctStart, period2.getStart());\n        Assert.assertEquals(correctEnd, period2.getEnd());\n        Assert.assertEquals(DateTimeDuration.HOUR, period2.getDuration());\n        Assert.assertEquals(\"2009-02-01-09\", period2.getKey());\n        Assert.assertEquals(\"February 1, 2009 09:00\", period0.getLongName());\n        Assert.assertEquals(\"09:00\", period0.getShortName());\n        Assert.assertEquals(\"09\", period0.getIndexName());\n    }", "signature": "void createHour()", "full_signature": "@Test public void createHour()", "class_method_signature": "DateTimePeriodTest.createHour()", "testcase": true, "constructor": false, "invocations": ["createHour", "createHour", "create", "assertEquals", "getStart", "assertEquals", "getEnd", "assertEquals", "getDuration", "assertEquals", "getKey", "assertEquals", "getLongName", "assertEquals", "getShortName", "assertEquals", "getIndexName", "assertEquals", "getStart", "assertEquals", "getEnd", "assertEquals", "getDuration", "assertEquals", "getKey", "assertEquals", "getLongName", "assertEquals", "getShortName", "assertEquals", "getIndexName", "assertEquals", "getStart", "assertEquals", "getEnd", "assertEquals", "getDuration", "assertEquals", "getKey", "assertEquals", "getLongName", "assertEquals", "getShortName", "assertEquals", "getIndexName"]}, "focal_class": {"identifier": "DateTimePeriod", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DateTime start;", "modifier": "private final", "type": "DateTime", "declarator": "start", "var_name": "start"}, {"original_string": "private final DateTime end;", "modifier": "private final", "type": "DateTime", "declarator": "end", "var_name": "end"}, {"original_string": "private final DateTimeDuration duration;", "modifier": "private final", "type": "DateTimeDuration", "declarator": "duration", "var_name": "duration"}, {"original_string": "private final String key;", "modifier": "private final", "type": "String", "declarator": "key", "var_name": "key"}, {"original_string": "private final String longName;", "modifier": "private final", "type": "String", "declarator": "longName", "var_name": "longName"}, {"original_string": "private final String shortName;", "modifier": "private final", "type": "String", "declarator": "shortName", "var_name": "shortName"}, {"original_string": "private final String indexName;", "modifier": "private final", "type": "String", "declarator": "indexName", "var_name": "indexName"}], "methods": [{"identifier": "DateTimePeriod", "parameters": "(DateTime start, DateTime end, DateTimeDuration duration, String keyPattern,\n            String longNamePattern, String shortNamePattern, String indexNamePattern)", "modifiers": "protected", "return": "", "signature": " DateTimePeriod(DateTime start, DateTime end, DateTimeDuration duration, String keyPattern,\n            String longNamePattern, String shortNamePattern, String indexNamePattern)", "full_signature": "protected  DateTimePeriod(DateTime start, DateTime end, DateTimeDuration duration, String keyPattern,\n            String longNamePattern, String shortNamePattern, String indexNamePattern)", "class_method_signature": "DateTimePeriod.DateTimePeriod(DateTime start, DateTime end, DateTimeDuration duration, String keyPattern,\n            String longNamePattern, String shortNamePattern, String indexNamePattern)", "testcase": false, "constructor": true}, {"identifier": "getStart", "parameters": "()", "modifiers": "public", "return": "DateTime", "signature": "DateTime getStart()", "full_signature": "public DateTime getStart()", "class_method_signature": "DateTimePeriod.getStart()", "testcase": false, "constructor": false}, {"identifier": "getEnd", "parameters": "()", "modifiers": "public", "return": "DateTime", "signature": "DateTime getEnd()", "full_signature": "public DateTime getEnd()", "class_method_signature": "DateTimePeriod.getEnd()", "testcase": false, "constructor": false}, {"identifier": "getDuration", "parameters": "()", "modifiers": "public", "return": "DateTimeDuration", "signature": "DateTimeDuration getDuration()", "full_signature": "public DateTimeDuration getDuration()", "class_method_signature": "DateTimePeriod.getDuration()", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getKey()", "full_signature": "public String getKey()", "class_method_signature": "DateTimePeriod.getKey()", "testcase": false, "constructor": false}, {"identifier": "getLongName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLongName()", "full_signature": "public String getLongName()", "class_method_signature": "DateTimePeriod.getLongName()", "testcase": false, "constructor": false}, {"identifier": "getShortName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getShortName()", "full_signature": "public String getShortName()", "class_method_signature": "DateTimePeriod.getShortName()", "testcase": false, "constructor": false}, {"identifier": "getIndexName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getIndexName()", "full_signature": "public String getIndexName()", "class_method_signature": "DateTimePeriod.getIndexName()", "testcase": false, "constructor": false}, {"identifier": "getNext", "parameters": "()", "modifiers": "public abstract", "return": "DateTimePeriod", "signature": "DateTimePeriod getNext()", "full_signature": "public abstract DateTimePeriod getNext()", "class_method_signature": "DateTimePeriod.getNext()", "testcase": false, "constructor": false}, {"identifier": "getPrevious", "parameters": "()", "modifiers": "public abstract", "return": "DateTimePeriod", "signature": "DateTimePeriod getPrevious()", "full_signature": "public abstract DateTimePeriod getPrevious()", "class_method_signature": "DateTimePeriod.getPrevious()", "testcase": false, "constructor": false}, {"identifier": "getDefaultSubDuration", "parameters": "()", "modifiers": "public abstract", "return": "DateTimeDuration", "signature": "DateTimeDuration getDefaultSubDuration()", "full_signature": "public abstract DateTimeDuration getDefaultSubDuration()", "class_method_signature": "DateTimePeriod.getDefaultSubDuration()", "testcase": false, "constructor": false}, {"identifier": "toPeriods", "parameters": "(DateTimeDuration duration)", "modifiers": "public", "return": "List<DateTimePeriod>", "signature": "List<DateTimePeriod> toPeriods(DateTimeDuration duration)", "full_signature": "public List<DateTimePeriod> toPeriods(DateTimeDuration duration)", "class_method_signature": "DateTimePeriod.toPeriods(DateTimeDuration duration)", "testcase": false, "constructor": false}, {"identifier": "toFiveMinutes", "parameters": "()", "modifiers": "public", "return": "List<DateTimePeriod>", "signature": "List<DateTimePeriod> toFiveMinutes()", "full_signature": "public List<DateTimePeriod> toFiveMinutes()", "class_method_signature": "DateTimePeriod.toFiveMinutes()", "testcase": false, "constructor": false}, {"identifier": "toHours", "parameters": "()", "modifiers": "public", "return": "List<DateTimePeriod>", "signature": "List<DateTimePeriod> toHours()", "full_signature": "public List<DateTimePeriod> toHours()", "class_method_signature": "DateTimePeriod.toHours()", "testcase": false, "constructor": false}, {"identifier": "toDays", "parameters": "()", "modifiers": "public", "return": "List<DateTimePeriod>", "signature": "List<DateTimePeriod> toDays()", "full_signature": "public List<DateTimePeriod> toDays()", "class_method_signature": "DateTimePeriod.toDays()", "testcase": false, "constructor": false}, {"identifier": "toMonths", "parameters": "()", "modifiers": "public", "return": "List<DateTimePeriod>", "signature": "List<DateTimePeriod> toMonths()", "full_signature": "public List<DateTimePeriod> toMonths()", "class_method_signature": "DateTimePeriod.toMonths()", "testcase": false, "constructor": false}, {"identifier": "toYears", "parameters": "()", "modifiers": "public", "return": "List<DateTimePeriod>", "signature": "List<DateTimePeriod> toYears()", "full_signature": "public List<DateTimePeriod> toYears()", "class_method_signature": "DateTimePeriod.toYears()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object object)", "full_signature": "@Override public boolean equals(Object object)", "class_method_signature": "DateTimePeriod.equals(Object object)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DateTimePeriod.hashCode()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(DateTimeDuration duration, DateTime start)", "modifiers": "static public", "return": "DateTimePeriod", "signature": "DateTimePeriod create(DateTimeDuration duration, DateTime start)", "full_signature": "static public DateTimePeriod create(DateTimeDuration duration, DateTime start)", "class_method_signature": "DateTimePeriod.create(DateTimeDuration duration, DateTime start)", "testcase": false, "constructor": false}, {"identifier": "createYear", "parameters": "(int year, DateTimeZone zone)", "modifiers": "static public", "return": "DateTimePeriod", "signature": "DateTimePeriod createYear(int year, DateTimeZone zone)", "full_signature": "static public DateTimePeriod createYear(int year, DateTimeZone zone)", "class_method_signature": "DateTimePeriod.createYear(int year, DateTimeZone zone)", "testcase": false, "constructor": false}, {"identifier": "createYear", "parameters": "(DateTime start)", "modifiers": "static public", "return": "DateTimePeriod", "signature": "DateTimePeriod createYear(DateTime start)", "full_signature": "static public DateTimePeriod createYear(DateTime start)", "class_method_signature": "DateTimePeriod.createYear(DateTime start)", "testcase": false, "constructor": false}, {"identifier": "createMonth", "parameters": "(int year, int month, DateTimeZone zone)", "modifiers": "static public", "return": "DateTimePeriod", "signature": "DateTimePeriod createMonth(int year, int month, DateTimeZone zone)", "full_signature": "static public DateTimePeriod createMonth(int year, int month, DateTimeZone zone)", "class_method_signature": "DateTimePeriod.createMonth(int year, int month, DateTimeZone zone)", "testcase": false, "constructor": false}, {"identifier": "createMonth", "parameters": "(DateTime start)", "modifiers": "static public", "return": "DateTimePeriod", "signature": "DateTimePeriod createMonth(DateTime start)", "full_signature": "static public DateTimePeriod createMonth(DateTime start)", "class_method_signature": "DateTimePeriod.createMonth(DateTime start)", "testcase": false, "constructor": false}, {"identifier": "createDay", "parameters": "(int year, int month, int day, DateTimeZone zone)", "modifiers": "static public", "return": "DateTimePeriod", "signature": "DateTimePeriod createDay(int year, int month, int day, DateTimeZone zone)", "full_signature": "static public DateTimePeriod createDay(int year, int month, int day, DateTimeZone zone)", "class_method_signature": "DateTimePeriod.createDay(int year, int month, int day, DateTimeZone zone)", "testcase": false, "constructor": false}, {"identifier": "createDay", "parameters": "(DateTime start)", "modifiers": "static public", "return": "DateTimePeriod", "signature": "DateTimePeriod createDay(DateTime start)", "full_signature": "static public DateTimePeriod createDay(DateTime start)", "class_method_signature": "DateTimePeriod.createDay(DateTime start)", "testcase": false, "constructor": false}, {"identifier": "createHour", "parameters": "(int year, int month, int day, int hour, DateTimeZone zone)", "modifiers": "static public", "return": "DateTimePeriod", "signature": "DateTimePeriod createHour(int year, int month, int day, int hour, DateTimeZone zone)", "full_signature": "static public DateTimePeriod createHour(int year, int month, int day, int hour, DateTimeZone zone)", "class_method_signature": "DateTimePeriod.createHour(int year, int month, int day, int hour, DateTimeZone zone)", "testcase": false, "constructor": false}, {"identifier": "createHour", "parameters": "(DateTime start)", "modifiers": "static public", "return": "DateTimePeriod", "signature": "DateTimePeriod createHour(DateTime start)", "full_signature": "static public DateTimePeriod createHour(DateTime start)", "class_method_signature": "DateTimePeriod.createHour(DateTime start)", "testcase": false, "constructor": false}, {"identifier": "createFiveMinutes", "parameters": "(int year, int month, int day, int hour, int minute, DateTimeZone zone)", "modifiers": "static public", "return": "DateTimePeriod", "signature": "DateTimePeriod createFiveMinutes(int year, int month, int day, int hour, int minute, DateTimeZone zone)", "full_signature": "static public DateTimePeriod createFiveMinutes(int year, int month, int day, int hour, int minute, DateTimeZone zone)", "class_method_signature": "DateTimePeriod.createFiveMinutes(int year, int month, int day, int hour, int minute, DateTimeZone zone)", "testcase": false, "constructor": false}, {"identifier": "createFiveMinutes", "parameters": "(DateTime start)", "modifiers": "static public", "return": "DateTimePeriod", "signature": "DateTimePeriod createFiveMinutes(DateTime start)", "full_signature": "static public DateTimePeriod createFiveMinutes(DateTime start)", "class_method_signature": "DateTimePeriod.createFiveMinutes(DateTime start)", "testcase": false, "constructor": false}, {"identifier": "createLastYearMonths", "parameters": "(DateTimeZone zone)", "modifiers": "static public", "return": "List<DateTimePeriod>", "signature": "List<DateTimePeriod> createLastYearMonths(DateTimeZone zone)", "full_signature": "static public List<DateTimePeriod> createLastYearMonths(DateTimeZone zone)", "class_method_signature": "DateTimePeriod.createLastYearMonths(DateTimeZone zone)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/time/DateTimePeriod.java"}, "focal_method": {"identifier": "createHour", "parameters": "(int year, int month, int day, int hour, DateTimeZone zone)", "modifiers": "static public", "return": "DateTimePeriod", "body": "static public DateTimePeriod createHour(int year, int month, int day, int hour, DateTimeZone zone) {\n        // year-month-day hour:00:00.000\n        DateTime start = new DateTime(year, month, day, hour, 0, 0, 0, zone);\n        return createHour(start);\n    }", "signature": "DateTimePeriod createHour(int year, int month, int day, int hour, DateTimeZone zone)", "full_signature": "static public DateTimePeriod createHour(int year, int month, int day, int hour, DateTimeZone zone)", "class_method_signature": "DateTimePeriod.createHour(int year, int month, int day, int hour, DateTimeZone zone)", "testcase": false, "constructor": false, "invocations": ["createHour"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}