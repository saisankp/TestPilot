{"test_class": {"identifier": "HeaderParameterParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HeaderParameterParser headerParameterParser;", "modifier": "private", "type": "HeaderParameterParser", "declarator": "headerParameterParser", "var_name": "headerParameterParser"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/header/HeaderParameterParserTest.java"}, "test_case": {"identifier": "throwsExceptionWhenStringContainsIllegalCharacter", "parameters": "()", "modifiers": "@Test(expected = ParseException.class) public", "return": "void", "body": "@Test(expected = ParseException.class)\n    public void throwsExceptionWhenStringContainsIllegalCharacter() throws Exception {\n        headerParameterParser.parse(\"text/plain;fo[o=\\\"bar\\\"\");\n    }", "signature": "void throwsExceptionWhenStringContainsIllegalCharacter()", "full_signature": "@Test(expected = ParseException.class) public void throwsExceptionWhenStringContainsIllegalCharacter()", "class_method_signature": "HeaderParameterParserTest.throwsExceptionWhenStringContainsIllegalCharacter()", "testcase": true, "constructor": false, "invocations": ["parse"]}, "focal_class": {"identifier": "HeaderParameterParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char   PARAMS_SEPARATOR  = ';';", "modifier": "private static final", "type": "char", "declarator": "PARAMS_SEPARATOR  = ';'", "var_name": "PARAMS_SEPARATOR"}, {"original_string": "private static final String NAME_TERMINATORS  = \"=;\";", "modifier": "private static final", "type": "String", "declarator": "NAME_TERMINATORS  = \"=;\"", "var_name": "NAME_TERMINATORS"}, {"original_string": "private static final String VALUE_TERMINATORS = \";\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_TERMINATORS = \";\"", "var_name": "VALUE_TERMINATORS"}, {"original_string": "private int pos;", "modifier": "private", "type": "int", "declarator": "pos", "var_name": "pos"}, {"original_string": "private String source;", "modifier": "private", "type": "String", "declarator": "source", "var_name": "source"}, {"original_string": "private int sourceLength;", "modifier": "private", "type": "int", "declarator": "sourceLength", "var_name": "sourceLength"}], "methods": [{"identifier": "parse", "parameters": "(String header)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> parse(String header)", "full_signature": "public Map<String, String> parse(String header)", "class_method_signature": "HeaderParameterParser.parse(String header)", "testcase": false, "constructor": false}, {"identifier": "hasRemainingChars", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean hasRemainingChars()", "full_signature": "private boolean hasRemainingChars()", "class_method_signature": "HeaderParameterParser.hasRemainingChars()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(String header)", "modifiers": "private", "return": "void", "signature": "void init(String header)", "full_signature": "private void init(String header)", "class_method_signature": "HeaderParameterParser.init(String header)", "testcase": false, "constructor": false}, {"identifier": "readQuotedString", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String readQuotedString()", "full_signature": "private String readQuotedString()", "class_method_signature": "HeaderParameterParser.readQuotedString()", "testcase": false, "constructor": false}, {"identifier": "readToken", "parameters": "(String terminators)", "modifiers": "private", "return": "String", "signature": "String readToken(String terminators)", "full_signature": "private String readToken(String terminators)", "class_method_signature": "HeaderParameterParser.readToken(String terminators)", "testcase": false, "constructor": false}, {"identifier": "readToken", "parameters": "(int startOfToken, int endOfToken)", "modifiers": "private", "return": "String", "signature": "String readToken(int startOfToken, int endOfToken)", "full_signature": "private String readToken(int startOfToken, int endOfToken)", "class_method_signature": "HeaderParameterParser.readToken(int startOfToken, int endOfToken)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/header/HeaderParameterParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String header)", "modifiers": "public", "return": "Map<String, String>", "body": "public Map<String, String> parse(String header) throws ParseException {\n        init(header);\n\n        Map<String, String> parameters = new HashMap<>();\n\n        pos++; // skip first ';'\n        while (hasRemainingChars()) {\n            String name = readToken(NAME_TERMINATORS);\n            String value = null;\n            if (charAtIs(source, pos, '=')) {\n                pos++; // skip '='\n                if (charAtIs(source, pos, '\"')) {\n                    value = readQuotedString();\n                } else if (hasRemainingChars()) {\n                    value = readToken(VALUE_TERMINATORS);\n                }\n            }\n\n            if (charAtIs(source, pos, PARAMS_SEPARATOR)) {\n                pos++; // skip ';'\n            }\n\n            if (!isNullOrEmpty(name)) {\n                parameters.put(name, value);\n            }\n\n        }\n        return parameters;\n    }", "signature": "Map<String, String> parse(String header)", "full_signature": "public Map<String, String> parse(String header)", "class_method_signature": "HeaderParameterParser.parse(String header)", "testcase": false, "constructor": false, "invocations": ["init", "hasRemainingChars", "readToken", "charAtIs", "charAtIs", "readQuotedString", "hasRemainingChars", "readToken", "charAtIs", "isNullOrEmpty", "put"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}