{"test_class": {"identifier": "SW360MetaDataUpdaterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_FILE_CONTENT = \"This is a test file\";", "modifier": "private static final", "type": "String", "declarator": "TEST_FILE_CONTENT = \"This is a test file\"", "var_name": "TEST_FILE_CONTENT"}, {"original_string": "private static final String TEST_FILE_SHA1 = \"91b7b0b1e27bfbf7bc646946f35fa972c47c2d32\";", "modifier": "private static final", "type": "String", "declarator": "TEST_FILE_SHA1 = \"91b7b0b1e27bfbf7bc646946f35fa972c47c2d32\"", "var_name": "TEST_FILE_SHA1"}, {"original_string": "private static final String RELEASE_NAME = \"testRelease\";", "modifier": "private static final", "type": "String", "declarator": "RELEASE_NAME = \"testRelease\"", "var_name": "RELEASE_NAME"}, {"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private SW360MetaDataUpdater metaDataUpdater;", "modifier": "private", "type": "SW360MetaDataUpdater", "declarator": "metaDataUpdater", "var_name": "metaDataUpdater"}, {"original_string": "private final SW360Connection connection = mock(SW360Connection.class);", "modifier": "private final", "type": "SW360Connection", "declarator": "connection = mock(SW360Connection.class)", "var_name": "connection"}, {"original_string": "private final SW360ProjectClientAdapter projectClientAdapter = mock(SW360ProjectClientAdapter.class);", "modifier": "private final", "type": "SW360ProjectClientAdapter", "declarator": "projectClientAdapter = mock(SW360ProjectClientAdapter.class)", "var_name": "projectClientAdapter"}, {"original_string": "private final SW360LicenseClientAdapter licenseClientAdapter = mock(SW360LicenseClientAdapter.class);", "modifier": "private final", "type": "SW360LicenseClientAdapter", "declarator": "licenseClientAdapter = mock(SW360LicenseClientAdapter.class)", "var_name": "licenseClientAdapter"}, {"original_string": "private final SW360ReleaseClientAdapter releaseClientAdapter = mock(SW360ReleaseClientAdapter.class);", "modifier": "private final", "type": "SW360ReleaseClientAdapter", "declarator": "releaseClientAdapter = mock(SW360ReleaseClientAdapter.class)", "var_name": "releaseClientAdapter"}], "file": "modules/sw360/sw360-workflow/src/test/java/org/eclipse/sw360/antenna/sw360/SW360MetaDataUpdaterTest.java"}, "test_case": {"identifier": "testCreateProjectWithProjectPresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateProjectWithProjectPresent() {\n        final String projectName = \"projectName\";\n        final String projectVersion = \"projectVersion\";\n        final String projectId = \"12345\";\n        SW360Project project = new SW360Project();\n        project.getLinks().setSelf(new Self(\"https://sw360.org/projects/\" + projectId));\n        when(projectClientAdapter.getProjectByNameAndVersion(projectName, projectVersion))\n                .thenReturn(Optional.of(project));\n\n        metaDataUpdater.createProject(projectName, projectVersion, Collections.emptySet());\n\n        verify(projectClientAdapter, never()).createProject(any());\n        verify(projectClientAdapter, times(1)).addSW360ReleasesToSW360Project(projectId, Collections.emptySet());\n    }", "signature": "void testCreateProjectWithProjectPresent()", "full_signature": "@Test public void testCreateProjectWithProjectPresent()", "class_method_signature": "SW360MetaDataUpdaterTest.testCreateProjectWithProjectPresent()", "testcase": true, "constructor": false, "invocations": ["setSelf", "getLinks", "thenReturn", "when", "getProjectByNameAndVersion", "of", "createProject", "emptySet", "createProject", "verify", "never", "any", "addSW360ReleasesToSW360Project", "verify", "times", "emptySet"]}, "focal_class": {"identifier": "SW360MetaDataUpdater", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SW360MetaDataUpdater.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SW360MetaDataUpdater.class)", "var_name": "LOGGER"}, {"original_string": "private final SW360ProjectClientAdapter projectClientAdapter;", "modifier": "private final", "type": "SW360ProjectClientAdapter", "declarator": "projectClientAdapter", "var_name": "projectClientAdapter"}, {"original_string": "private final SW360LicenseClientAdapter licenseClientAdapter;", "modifier": "private final", "type": "SW360LicenseClientAdapter", "declarator": "licenseClientAdapter", "var_name": "licenseClientAdapter"}, {"original_string": "private final SW360ReleaseClientAdapter releaseClientAdapter;", "modifier": "private final", "type": "SW360ReleaseClientAdapter", "declarator": "releaseClientAdapter", "var_name": "releaseClientAdapter"}, {"original_string": "private final AtomicReference<Set<String>> knownSW360LicenseIds;", "modifier": "private final", "type": "AtomicReference<Set<String>>", "declarator": "knownSW360LicenseIds", "var_name": "knownSW360LicenseIds"}], "methods": [{"identifier": "SW360MetaDataUpdater", "parameters": "(SW360Connection connection)", "modifiers": "public", "return": "", "signature": " SW360MetaDataUpdater(SW360Connection connection)", "full_signature": "public  SW360MetaDataUpdater(SW360Connection connection)", "class_method_signature": "SW360MetaDataUpdater.SW360MetaDataUpdater(SW360Connection connection)", "testcase": false, "constructor": true}, {"identifier": "getLicenses", "parameters": "(Collection<License> licenses)", "modifiers": "public", "return": "Set<SW360License>", "signature": "Set<SW360License> getLicenses(Collection<License> licenses)", "full_signature": "public Set<SW360License> getLicenses(Collection<License> licenses)", "class_method_signature": "SW360MetaDataUpdater.getLicenses(Collection<License> licenses)", "testcase": false, "constructor": false}, {"identifier": "isLicenseInSW360", "parameters": "(License license)", "modifiers": "private", "return": "boolean", "signature": "boolean isLicenseInSW360(License license)", "full_signature": "private boolean isLicenseInSW360(License license)", "class_method_signature": "SW360MetaDataUpdater.isLicenseInSW360(License license)", "testcase": false, "constructor": false}, {"identifier": "getSW360Licenses", "parameters": "()", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getSW360Licenses()", "full_signature": "private Set<String> getSW360Licenses()", "class_method_signature": "SW360MetaDataUpdater.getSW360Licenses()", "testcase": false, "constructor": false}, {"identifier": "loadLicensesFromSW360", "parameters": "()", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> loadLicensesFromSW360()", "full_signature": "private Set<String> loadLicensesFromSW360()", "class_method_signature": "SW360MetaDataUpdater.loadLicensesFromSW360()", "testcase": false, "constructor": false}, {"identifier": "getOrCreateRelease", "parameters": "(SW360Release sw360ReleaseFromArtifact, boolean updateExisting)", "modifiers": "public", "return": "SW360Release", "signature": "SW360Release getOrCreateRelease(SW360Release sw360ReleaseFromArtifact, boolean updateExisting)", "full_signature": "public SW360Release getOrCreateRelease(SW360Release sw360ReleaseFromArtifact, boolean updateExisting)", "class_method_signature": "SW360MetaDataUpdater.getOrCreateRelease(SW360Release sw360ReleaseFromArtifact, boolean updateExisting)", "testcase": false, "constructor": false}, {"identifier": "createProject", "parameters": "(String projectName, String projectVersion, Collection<SW360Release> releases)", "modifiers": "public", "return": "void", "signature": "void createProject(String projectName, String projectVersion, Collection<SW360Release> releases)", "full_signature": "public void createProject(String projectName, String projectVersion, Collection<SW360Release> releases)", "class_method_signature": "SW360MetaDataUpdater.createProject(String projectName, String projectVersion, Collection<SW360Release> releases)", "testcase": false, "constructor": false}, {"identifier": "uploadAttachments", "parameters": "(SW360Release sw360Release,\n                                                                  Map<Path, SW360AttachmentType> attachments,\n                                                                  boolean force)", "modifiers": "public", "return": "AttachmentUploadResult<SW360Release>", "signature": "AttachmentUploadResult<SW360Release> uploadAttachments(SW360Release sw360Release,\n                                                                  Map<Path, SW360AttachmentType> attachments,\n                                                                  boolean force)", "full_signature": "public AttachmentUploadResult<SW360Release> uploadAttachments(SW360Release sw360Release,\n                                                                  Map<Path, SW360AttachmentType> attachments,\n                                                                  boolean force)", "class_method_signature": "SW360MetaDataUpdater.uploadAttachments(SW360Release sw360Release,\n                                                                  Map<Path, SW360AttachmentType> attachments,\n                                                                  boolean force)", "testcase": false, "constructor": false}, {"identifier": "deleteSourceAttachments", "parameters": "(SW360Release release)", "modifiers": "public", "return": "SW360Release", "signature": "SW360Release deleteSourceAttachments(SW360Release release)", "full_signature": "public SW360Release deleteSourceAttachments(SW360Release release)", "class_method_signature": "SW360MetaDataUpdater.deleteSourceAttachments(SW360Release release)", "testcase": false, "constructor": false}, {"identifier": "deleteAttachments", "parameters": "(SW360Release release, Predicate<SW360SparseAttachment> filter)", "modifiers": "public", "return": "SW360Release", "signature": "SW360Release deleteAttachments(SW360Release release, Predicate<SW360SparseAttachment> filter)", "full_signature": "public SW360Release deleteAttachments(SW360Release release, Predicate<SW360SparseAttachment> filter)", "class_method_signature": "SW360MetaDataUpdater.deleteAttachments(SW360Release release, Predicate<SW360SparseAttachment> filter)", "testcase": false, "constructor": false}, {"identifier": "calculateAttachmentHash", "parameters": "(Path path)", "modifiers": "", "return": "String", "signature": "String calculateAttachmentHash(Path path)", "full_signature": " String calculateAttachmentHash(Path path)", "class_method_signature": "SW360MetaDataUpdater.calculateAttachmentHash(Path path)", "testcase": false, "constructor": false}, {"identifier": "checkAttachmentContentUpToDate", "parameters": "(Path path, SW360SparseAttachment attachment)", "modifiers": "private", "return": "boolean", "signature": "boolean checkAttachmentContentUpToDate(Path path, SW360SparseAttachment attachment)", "full_signature": "private boolean checkAttachmentContentUpToDate(Path path, SW360SparseAttachment attachment)", "class_method_signature": "SW360MetaDataUpdater.checkAttachmentContentUpToDate(Path path, SW360SparseAttachment attachment)", "testcase": false, "constructor": false}, {"identifier": "deleteConflictingAttachments", "parameters": "(SW360Release sw360Release, Set<String> attachmentsToDelete)", "modifiers": "private", "return": "void", "signature": "void deleteConflictingAttachments(SW360Release sw360Release, Set<String> attachmentsToDelete)", "full_signature": "private void deleteConflictingAttachments(SW360Release sw360Release, Set<String> attachmentsToDelete)", "class_method_signature": "SW360MetaDataUpdater.deleteConflictingAttachments(SW360Release sw360Release, Set<String> attachmentsToDelete)", "testcase": false, "constructor": false}, {"identifier": "prepareNewProject", "parameters": "(String projectName, String projectVersion)", "modifiers": "private static", "return": "SW360Project", "signature": "SW360Project prepareNewProject(String projectName, String projectVersion)", "full_signature": "private static SW360Project prepareNewProject(String projectName, String projectVersion)", "class_method_signature": "SW360MetaDataUpdater.prepareNewProject(String projectName, String projectVersion)", "testcase": false, "constructor": false}, {"identifier": "checkUploadCriteria", "parameters": "(Path path, SW360SparseAttachment attachment,\n                                        Set<String> attachmentsToDelete,\n                                        Map<AttachmentUploadRequest.Item, Throwable> conflictFailures, boolean force)", "modifiers": "private", "return": "boolean", "signature": "boolean checkUploadCriteria(Path path, SW360SparseAttachment attachment,\n                                        Set<String> attachmentsToDelete,\n                                        Map<AttachmentUploadRequest.Item, Throwable> conflictFailures, boolean force)", "full_signature": "private boolean checkUploadCriteria(Path path, SW360SparseAttachment attachment,\n                                        Set<String> attachmentsToDelete,\n                                        Map<AttachmentUploadRequest.Item, Throwable> conflictFailures, boolean force)", "class_method_signature": "SW360MetaDataUpdater.checkUploadCriteria(Path path, SW360SparseAttachment attachment,\n                                        Set<String> attachmentsToDelete,\n                                        Map<AttachmentUploadRequest.Item, Throwable> conflictFailures, boolean force)", "testcase": false, "constructor": false}, {"identifier": "findAttachmentByFileName", "parameters": "(SW360Release sw360Release,\n                                                                            String fileName)", "modifiers": "private static", "return": "Optional<SW360SparseAttachment>", "signature": "Optional<SW360SparseAttachment> findAttachmentByFileName(SW360Release sw360Release,\n                                                                            String fileName)", "full_signature": "private static Optional<SW360SparseAttachment> findAttachmentByFileName(SW360Release sw360Release,\n                                                                            String fileName)", "class_method_signature": "SW360MetaDataUpdater.findAttachmentByFileName(SW360Release sw360Release,\n                                                                            String fileName)", "testcase": false, "constructor": false}, {"identifier": "appendFailures", "parameters": "(AttachmentUploadResult<SW360Release> orgResult,\n                   Map<AttachmentUploadRequest.Item, Throwable> moreFailures)", "modifiers": "private static", "return": "AttachmentUploadResult<SW360Release>", "signature": "AttachmentUploadResult<SW360Release> appendFailures(AttachmentUploadResult<SW360Release> orgResult,\n                   Map<AttachmentUploadRequest.Item, Throwable> moreFailures)", "full_signature": "private static AttachmentUploadResult<SW360Release> appendFailures(AttachmentUploadResult<SW360Release> orgResult,\n                   Map<AttachmentUploadRequest.Item, Throwable> moreFailures)", "class_method_signature": "SW360MetaDataUpdater.appendFailures(AttachmentUploadResult<SW360Release> orgResult,\n                   Map<AttachmentUploadRequest.Item, Throwable> moreFailures)", "testcase": false, "constructor": false}], "file": "modules/sw360/sw360-workflow/src/main/java/org/eclipse/sw360/antenna/sw360/SW360MetaDataUpdater.java"}, "focal_method": {"identifier": "createProject", "parameters": "(String projectName, String projectVersion, Collection<SW360Release> releases)", "modifiers": "public", "return": "void", "body": "public void createProject(String projectName, String projectVersion, Collection<SW360Release> releases) {\n        Optional<String> projectId =\n                projectClientAdapter.getProjectByNameAndVersion(projectName, projectVersion)\n                        .map(SW360HalResource::getId);\n\n        String id = projectId.orElseGet(() ->\n                projectClientAdapter.createProject(prepareNewProject(projectName, projectVersion)).getId());\n        projectClientAdapter.addSW360ReleasesToSW360Project(id, releases);\n    }", "signature": "void createProject(String projectName, String projectVersion, Collection<SW360Release> releases)", "full_signature": "public void createProject(String projectName, String projectVersion, Collection<SW360Release> releases)", "class_method_signature": "SW360MetaDataUpdater.createProject(String projectName, String projectVersion, Collection<SW360Release> releases)", "testcase": false, "constructor": false, "invocations": ["map", "getProjectByNameAndVersion", "orElseGet", "getId", "createProject", "prepareNewProject", "addSW360ReleasesToSW360Project"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}