{"test_class": {"identifier": "CfsTest", "superclass": "", "interfaces": "", "fields": [], "file": "aula29-composing-monads/src/test/java/org/javasync/idioms/CfsTest.java"}, "test_case": {"identifier": "testCf4ForTwoFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testCf4ForTwoFiles() throws IOException {\n        Cfs\n            .countLines(METAMORPHOSIS, DISCOURSE_ON_THE_METHOD, DIVINE_COMEDY) // CF<Integer>\n            .thenAccept(n -> assertEquals(10423, n.intValue()))  // CF<Void>\n            .join();\n    }", "signature": "void testCf4ForTwoFiles()", "full_signature": "@Test public void testCf4ForTwoFiles()", "class_method_signature": "CfsTest.testCf4ForTwoFiles()", "testcase": true, "constructor": false, "invocations": ["join", "thenAccept", "countLines", "assertEquals", "intValue"]}, "focal_class": {"identifier": "Cfs", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "countLines", "parameters": "(String...paths)", "modifiers": "public static", "return": "CompletableFuture<Integer>", "signature": "CompletableFuture<Integer> countLines(String...paths)", "full_signature": "public static CompletableFuture<Integer> countLines(String...paths)", "class_method_signature": "Cfs.countLines(String...paths)", "testcase": false, "constructor": false}], "file": "aula29-composing-monads/src/main/java/org/javasync/idioms/Cfs.java"}, "focal_method": {"identifier": "countLines", "parameters": "(String...paths)", "modifiers": "public static", "return": "CompletableFuture<Integer>", "body": "public static CompletableFuture<Integer> countLines(String...paths) {\n        CompletableFuture[] cfs = Stream\n            .of(paths) // Stream<String>\n            .map(p ->  // Stream<Cf<Integer>>\n                AsyncFiles.readAll(p).thenApply(body -> body.split(\"\\n\").length))         //Stream<Cf<Integer>>>\n            .toArray(size -> new CompletableFuture[size]);\n\n        return CompletableFuture\n            .allOf(cfs)\n            .thenApply(__ -> Stream\n                .of(cfs)\n                .mapToInt(cf -> (int) cf.join())\n                .sum());\n    }", "signature": "CompletableFuture<Integer> countLines(String...paths)", "full_signature": "public static CompletableFuture<Integer> countLines(String...paths)", "class_method_signature": "Cfs.countLines(String...paths)", "testcase": false, "constructor": false, "invocations": ["toArray", "map", "of", "thenApply", "readAll", "split", "thenApply", "allOf", "sum", "mapToInt", "of", "join"]}, "repository": {"repo_id": 171326919, "url": "https://github.com/isel-leic-mpd/mpd-2019-i41n", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 13, "size": 404, "license": "licensed"}}