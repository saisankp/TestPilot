{"test_class": {"identifier": "DinnerPermsResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DinnerPermsResolver resolver;", "modifier": "private", "type": "DinnerPermsResolver", "declarator": "resolver", "var_name": "resolver"}], "file": "worldedit-bukkit/src/test/java/com/sk89q/wepif/DinnerPermsResolverTest.java"}, "test_case": {"identifier": "testInGroup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInGroup() {\n        final TestOfflinePermissible permissible = new TestOfflinePermissible();\n        permissible.setPermission(\"group.a\", true);\n        permissible.setPermission(\"group.b\", true);\n        assertTrue(resolver.inGroup(permissible, \"a\"));\n        assertTrue(resolver.inGroup(permissible, \"b\"));\n        assertFalse(resolver.inGroup(permissible, \"c\"));\n    }", "signature": "void testInGroup()", "full_signature": "@Test public void testInGroup()", "class_method_signature": "DinnerPermsResolverTest.testInGroup()", "testcase": true, "constructor": false, "invocations": ["setPermission", "setPermission", "assertTrue", "inGroup", "assertTrue", "inGroup", "assertFalse", "inGroup"]}, "focal_class": {"identifier": "DinnerPermsResolver", "superclass": "", "interfaces": "implements PermissionsResolver", "fields": [{"original_string": "public static final String GROUP_PREFIX = \"group.\";", "modifier": "public static final", "type": "String", "declarator": "GROUP_PREFIX = \"group.\"", "var_name": "GROUP_PREFIX"}, {"original_string": "protected final Server server;", "modifier": "protected final", "type": "Server", "declarator": "server", "var_name": "server"}], "methods": [{"identifier": "DinnerPermsResolver", "parameters": "(Server server)", "modifiers": "public", "return": "", "signature": " DinnerPermsResolver(Server server)", "full_signature": "public  DinnerPermsResolver(Server server)", "class_method_signature": "DinnerPermsResolver.DinnerPermsResolver(Server server)", "testcase": false, "constructor": true}, {"identifier": "factory", "parameters": "(Server server, YAMLProcessor config)", "modifiers": "public static", "return": "PermissionsResolver", "signature": "PermissionsResolver factory(Server server, YAMLProcessor config)", "full_signature": "public static PermissionsResolver factory(Server server, YAMLProcessor config)", "class_method_signature": "DinnerPermsResolver.factory(Server server, YAMLProcessor config)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "DinnerPermsResolver.load()", "testcase": false, "constructor": false}, {"identifier": "hasPermission", "parameters": "(String name, String permission)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPermission(String name, String permission)", "full_signature": "@Override public boolean hasPermission(String name, String permission)", "class_method_signature": "DinnerPermsResolver.hasPermission(String name, String permission)", "testcase": false, "constructor": false}, {"identifier": "hasPermission", "parameters": "(String worldName, String name, String permission)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPermission(String worldName, String name, String permission)", "full_signature": "@Override public boolean hasPermission(String worldName, String name, String permission)", "class_method_signature": "DinnerPermsResolver.hasPermission(String worldName, String name, String permission)", "testcase": false, "constructor": false}, {"identifier": "inGroup", "parameters": "(String name, String group)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean inGroup(String name, String group)", "full_signature": "@Override public boolean inGroup(String name, String group)", "class_method_signature": "DinnerPermsResolver.inGroup(String name, String group)", "testcase": false, "constructor": false}, {"identifier": "getGroups", "parameters": "(String name)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getGroups(String name)", "full_signature": "@Override public String[] getGroups(String name)", "class_method_signature": "DinnerPermsResolver.getGroups(String name)", "testcase": false, "constructor": false}, {"identifier": "hasPermission", "parameters": "(OfflinePlayer player, String permission)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPermission(OfflinePlayer player, String permission)", "full_signature": "@Override public boolean hasPermission(OfflinePlayer player, String permission)", "class_method_signature": "DinnerPermsResolver.hasPermission(OfflinePlayer player, String permission)", "testcase": false, "constructor": false}, {"identifier": "hasPermission", "parameters": "(String worldName, OfflinePlayer player, String permission)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPermission(String worldName, OfflinePlayer player, String permission)", "full_signature": "@Override public boolean hasPermission(String worldName, OfflinePlayer player, String permission)", "class_method_signature": "DinnerPermsResolver.hasPermission(String worldName, OfflinePlayer player, String permission)", "testcase": false, "constructor": false}, {"identifier": "inGroup", "parameters": "(OfflinePlayer player, String group)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean inGroup(OfflinePlayer player, String group)", "full_signature": "@Override public boolean inGroup(OfflinePlayer player, String group)", "class_method_signature": "DinnerPermsResolver.inGroup(OfflinePlayer player, String group)", "testcase": false, "constructor": false}, {"identifier": "getGroups", "parameters": "(OfflinePlayer player)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getGroups(OfflinePlayer player)", "full_signature": "@Override public String[] getGroups(OfflinePlayer player)", "class_method_signature": "DinnerPermsResolver.getGroups(OfflinePlayer player)", "testcase": false, "constructor": false}, {"identifier": "getPermissible", "parameters": "(OfflinePlayer offline)", "modifiers": "public", "return": "Permissible", "signature": "Permissible getPermissible(OfflinePlayer offline)", "full_signature": "public Permissible getPermissible(OfflinePlayer offline)", "class_method_signature": "DinnerPermsResolver.getPermissible(OfflinePlayer offline)", "testcase": false, "constructor": false}, {"identifier": "internalHasPermission", "parameters": "(Permissible perms, String permission)", "modifiers": "public", "return": "int", "signature": "int internalHasPermission(Permissible perms, String permission)", "full_signature": "public int internalHasPermission(Permissible perms, String permission)", "class_method_signature": "DinnerPermsResolver.internalHasPermission(Permissible perms, String permission)", "testcase": false, "constructor": false}, {"identifier": "getDetectionMessage", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDetectionMessage()", "full_signature": "@Override public String getDetectionMessage()", "class_method_signature": "DinnerPermsResolver.getDetectionMessage()", "testcase": false, "constructor": false}], "file": "worldedit-bukkit/src/main/java/com/sk89q/wepif/DinnerPermsResolver.java"}, "focal_method": {"identifier": "inGroup", "parameters": "(String name, String group)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean inGroup(String name, String group) {\n        return inGroup(server.getOfflinePlayer(name), group);\n    }", "signature": "boolean inGroup(String name, String group)", "full_signature": "@Override public boolean inGroup(String name, String group)", "class_method_signature": "DinnerPermsResolver.inGroup(String name, String group)", "testcase": false, "constructor": false, "invocations": ["inGroup", "getOfflinePlayer"]}, "repository": {"repo_id": 162610309, "url": "https://github.com/IntellectualSites/FastAsyncWorldEdit-1.13", "stars": 52, "created": "12/20/2018 5:22:31 PM +00:00", "updates": "2020-01-26T18:10:28+00:00", "fork": "False", "license": "licensed"}}