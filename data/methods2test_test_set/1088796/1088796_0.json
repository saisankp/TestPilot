{"test_class": {"identifier": "RepublishMessageRecovererTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Message message = new Message(\"\".getBytes(), new MessageProperties());", "modifier": "private final", "type": "Message", "declarator": "message = new Message(\"\".getBytes(), new MessageProperties())", "var_name": "message"}, {"original_string": "private final Throwable cause = new Exception(new Exception(\"I am Error. When all else fails use fire.\"));", "modifier": "private final", "type": "Throwable", "declarator": "cause = new Exception(new Exception(\"I am Error. When all else fails use fire.\"))", "var_name": "cause"}, {"original_string": "@Mock\n\tprivate AmqpTemplate amqpTemplate;", "modifier": "@Mock\n\tprivate", "type": "AmqpTemplate", "declarator": "amqpTemplate", "var_name": "amqpTemplate"}, {"original_string": "private RepublishMessageRecoverer recoverer;", "modifier": "private", "type": "RepublishMessageRecoverer", "declarator": "recoverer", "var_name": "recoverer"}], "file": "spring-rabbit/src/test/java/org/springframework/amqp/rabbit/retry/RepublishMessageRecovererTest.java"}, "test_case": {"identifier": "shouldPublishWithRoutingKeyPrefixedWithErrorWhenExchangeIsNotSet", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n\tvoid shouldPublishWithRoutingKeyPrefixedWithErrorWhenExchangeIsNotSet() {\n\t\trecoverer = new RepublishMessageRecoverer(amqpTemplate);\n\t\trecoverer.recover(message, cause);\n\n\t\tverify(amqpTemplate).send(\"error.some.key\", message);\n\t}", "signature": "void shouldPublishWithRoutingKeyPrefixedWithErrorWhenExchangeIsNotSet()", "full_signature": "@Test void shouldPublishWithRoutingKeyPrefixedWithErrorWhenExchangeIsNotSet()", "class_method_signature": "RepublishMessageRecovererTest.shouldPublishWithRoutingKeyPrefixedWithErrorWhenExchangeIsNotSet()", "testcase": true, "constructor": false, "invocations": ["recover", "send", "verify"]}, "focal_class": {"identifier": "RepublishMessageRecoverer", "superclass": "", "interfaces": "implements MessageRecoverer", "fields": [{"original_string": "private static final int ELLIPSIS_LENGTH = 3;", "modifier": "private static final", "type": "int", "declarator": "ELLIPSIS_LENGTH = 3", "var_name": "ELLIPSIS_LENGTH"}, {"original_string": "public static final String X_EXCEPTION_STACKTRACE = \"x-exception-stacktrace\";", "modifier": "public static final", "type": "String", "declarator": "X_EXCEPTION_STACKTRACE = \"x-exception-stacktrace\"", "var_name": "X_EXCEPTION_STACKTRACE"}, {"original_string": "public static final String X_EXCEPTION_MESSAGE = \"x-exception-message\";", "modifier": "public static final", "type": "String", "declarator": "X_EXCEPTION_MESSAGE = \"x-exception-message\"", "var_name": "X_EXCEPTION_MESSAGE"}, {"original_string": "public static final String X_ORIGINAL_EXCHANGE = \"x-original-exchange\";", "modifier": "public static final", "type": "String", "declarator": "X_ORIGINAL_EXCHANGE = \"x-original-exchange\"", "var_name": "X_ORIGINAL_EXCHANGE"}, {"original_string": "public static final String X_ORIGINAL_ROUTING_KEY = \"x-original-routingKey\";", "modifier": "public static final", "type": "String", "declarator": "X_ORIGINAL_ROUTING_KEY = \"x-original-routingKey\"", "var_name": "X_ORIGINAL_ROUTING_KEY"}, {"original_string": "public static final int DEFAULT_FRAME_MAX_HEADROOM = 20_000;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_FRAME_MAX_HEADROOM = 20_000", "var_name": "DEFAULT_FRAME_MAX_HEADROOM"}, {"original_string": "private static final int MAX_EXCEPTION_MESSAGE_SIZE_IN_TRACE = 100 - ELLIPSIS_LENGTH;", "modifier": "private static final", "type": "int", "declarator": "MAX_EXCEPTION_MESSAGE_SIZE_IN_TRACE = 100 - ELLIPSIS_LENGTH", "var_name": "MAX_EXCEPTION_MESSAGE_SIZE_IN_TRACE"}, {"original_string": "protected final Log logger = LogFactory.getLog(getClass());", "modifier": "protected final", "type": "Log", "declarator": "logger = LogFactory.getLog(getClass())", "var_name": "logger"}, {"original_string": "protected final AmqpTemplate errorTemplate;", "modifier": "protected final", "type": "AmqpTemplate", "declarator": "errorTemplate", "var_name": "errorTemplate"}, {"original_string": "protected final String errorRoutingKey;", "modifier": "protected final", "type": "String", "declarator": "errorRoutingKey", "var_name": "errorRoutingKey"}, {"original_string": "protected final String errorExchangeName;", "modifier": "protected final", "type": "String", "declarator": "errorExchangeName", "var_name": "errorExchangeName"}, {"original_string": "private String errorRoutingKeyPrefix = \"error.\";", "modifier": "private", "type": "String", "declarator": "errorRoutingKeyPrefix = \"error.\"", "var_name": "errorRoutingKeyPrefix"}, {"original_string": "private int frameMaxHeadroom = DEFAULT_FRAME_MAX_HEADROOM;", "modifier": "private", "type": "int", "declarator": "frameMaxHeadroom = DEFAULT_FRAME_MAX_HEADROOM", "var_name": "frameMaxHeadroom"}, {"original_string": "private volatile Integer maxStackTraceLength = -1;", "modifier": "private volatile", "type": "Integer", "declarator": "maxStackTraceLength = -1", "var_name": "maxStackTraceLength"}, {"original_string": "private MessageDeliveryMode deliveryMode = MessageDeliveryMode.PERSISTENT;", "modifier": "private", "type": "MessageDeliveryMode", "declarator": "deliveryMode = MessageDeliveryMode.PERSISTENT", "var_name": "deliveryMode"}], "methods": [{"identifier": "RepublishMessageRecoverer", "parameters": "(AmqpTemplate errorTemplate)", "modifiers": "public", "return": "", "signature": " RepublishMessageRecoverer(AmqpTemplate errorTemplate)", "full_signature": "public  RepublishMessageRecoverer(AmqpTemplate errorTemplate)", "class_method_signature": "RepublishMessageRecoverer.RepublishMessageRecoverer(AmqpTemplate errorTemplate)", "testcase": false, "constructor": true}, {"identifier": "RepublishMessageRecoverer", "parameters": "(AmqpTemplate errorTemplate, String errorExchange)", "modifiers": "public", "return": "", "signature": " RepublishMessageRecoverer(AmqpTemplate errorTemplate, String errorExchange)", "full_signature": "public  RepublishMessageRecoverer(AmqpTemplate errorTemplate, String errorExchange)", "class_method_signature": "RepublishMessageRecoverer.RepublishMessageRecoverer(AmqpTemplate errorTemplate, String errorExchange)", "testcase": false, "constructor": true}, {"identifier": "RepublishMessageRecoverer", "parameters": "(AmqpTemplate errorTemplate, String errorExchange, String errorRoutingKey)", "modifiers": "public", "return": "", "signature": " RepublishMessageRecoverer(AmqpTemplate errorTemplate, String errorExchange, String errorRoutingKey)", "full_signature": "public  RepublishMessageRecoverer(AmqpTemplate errorTemplate, String errorExchange, String errorRoutingKey)", "class_method_signature": "RepublishMessageRecoverer.RepublishMessageRecoverer(AmqpTemplate errorTemplate, String errorExchange, String errorRoutingKey)", "testcase": false, "constructor": true}, {"identifier": "errorRoutingKeyPrefix", "parameters": "(String errorRoutingKeyPrefix)", "modifiers": "public", "return": "RepublishMessageRecoverer", "signature": "RepublishMessageRecoverer errorRoutingKeyPrefix(String errorRoutingKeyPrefix)", "full_signature": "public RepublishMessageRecoverer errorRoutingKeyPrefix(String errorRoutingKeyPrefix)", "class_method_signature": "RepublishMessageRecoverer.errorRoutingKeyPrefix(String errorRoutingKeyPrefix)", "testcase": false, "constructor": false}, {"identifier": "frameMaxHeadroom", "parameters": "(int headroom)", "modifiers": "public", "return": "RepublishMessageRecoverer", "signature": "RepublishMessageRecoverer frameMaxHeadroom(int headroom)", "full_signature": "public RepublishMessageRecoverer frameMaxHeadroom(int headroom)", "class_method_signature": "RepublishMessageRecoverer.frameMaxHeadroom(int headroom)", "testcase": false, "constructor": false}, {"identifier": "setErrorRoutingKeyPrefix", "parameters": "(String errorRoutingKeyPrefix)", "modifiers": "public", "return": "void", "signature": "void setErrorRoutingKeyPrefix(String errorRoutingKeyPrefix)", "full_signature": "public void setErrorRoutingKeyPrefix(String errorRoutingKeyPrefix)", "class_method_signature": "RepublishMessageRecoverer.setErrorRoutingKeyPrefix(String errorRoutingKeyPrefix)", "testcase": false, "constructor": false}, {"identifier": "getErrorRoutingKeyPrefix", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getErrorRoutingKeyPrefix()", "full_signature": "protected String getErrorRoutingKeyPrefix()", "class_method_signature": "RepublishMessageRecoverer.getErrorRoutingKeyPrefix()", "testcase": false, "constructor": false}, {"identifier": "setDeliveryMode", "parameters": "(MessageDeliveryMode deliveryMode)", "modifiers": "public", "return": "void", "signature": "void setDeliveryMode(MessageDeliveryMode deliveryMode)", "full_signature": "public void setDeliveryMode(MessageDeliveryMode deliveryMode)", "class_method_signature": "RepublishMessageRecoverer.setDeliveryMode(MessageDeliveryMode deliveryMode)", "testcase": false, "constructor": false}, {"identifier": "getDeliveryMode", "parameters": "()", "modifiers": "protected", "return": "MessageDeliveryMode", "signature": "MessageDeliveryMode getDeliveryMode()", "full_signature": "protected MessageDeliveryMode getDeliveryMode()", "class_method_signature": "RepublishMessageRecoverer.getDeliveryMode()", "testcase": false, "constructor": false}, {"identifier": "recover", "parameters": "(Message message, Throwable cause)", "modifiers": "@Override public", "return": "void", "signature": "void recover(Message message, Throwable cause)", "full_signature": "@Override public void recover(Message message, Throwable cause)", "class_method_signature": "RepublishMessageRecoverer.recover(Message message, Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "processStackTrace", "parameters": "(Throwable cause, String exceptionMessage)", "modifiers": "private", "return": "String[]", "signature": "String[] processStackTrace(Throwable cause, String exceptionMessage)", "full_signature": "private String[] processStackTrace(Throwable cause, String exceptionMessage)", "class_method_signature": "RepublishMessageRecoverer.processStackTrace(Throwable cause, String exceptionMessage)", "testcase": false, "constructor": false}, {"identifier": "truncateIfNecessary", "parameters": "(Throwable cause, String exception, String stackTrace)", "modifiers": "private", "return": "String[]", "signature": "String[] truncateIfNecessary(Throwable cause, String exception, String stackTrace)", "full_signature": "private String[] truncateIfNecessary(Throwable cause, String exception, String stackTrace)", "class_method_signature": "RepublishMessageRecoverer.truncateIfNecessary(Throwable cause, String exception, String stackTrace)", "testcase": false, "constructor": false}, {"identifier": "additionalHeaders", "parameters": "(Message message, Throwable cause)", "modifiers": "protected", "return": "Map<? extends String, ?>", "signature": "Map<? extends String, ?> additionalHeaders(Message message, Throwable cause)", "full_signature": "protected Map<? extends String, ?> additionalHeaders(Message message, Throwable cause)", "class_method_signature": "RepublishMessageRecoverer.additionalHeaders(Message message, Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "prefixedOriginalRoutingKey", "parameters": "(Message message)", "modifiers": "private", "return": "String", "signature": "String prefixedOriginalRoutingKey(Message message)", "full_signature": "private String prefixedOriginalRoutingKey(Message message)", "class_method_signature": "RepublishMessageRecoverer.prefixedOriginalRoutingKey(Message message)", "testcase": false, "constructor": false}, {"identifier": "getStackTraceAsString", "parameters": "(Throwable cause)", "modifiers": "private", "return": "String", "signature": "String getStackTraceAsString(Throwable cause)", "full_signature": "private String getStackTraceAsString(Throwable cause)", "class_method_signature": "RepublishMessageRecoverer.getStackTraceAsString(Throwable cause)", "testcase": false, "constructor": false}], "file": "spring-rabbit/src/main/java/org/springframework/amqp/rabbit/retry/RepublishMessageRecoverer.java"}, "focal_method": {"identifier": "recover", "parameters": "(Message message, Throwable cause)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void recover(Message message, Throwable cause) {\n\t\tMessageProperties messageProperties = message.getMessageProperties();\n\t\tMap<String, Object> headers = messageProperties.getHeaders();\n\t\tString exceptionMessage = cause.getCause() != null ? cause.getCause().getMessage() : cause.getMessage();\n\t\tString[] processed = processStackTrace(cause, exceptionMessage);\n\t\tString stackTraceAsString = processed[0];\n\t\tString truncatedExceptionMessage = processed[1];\n\t\tif (truncatedExceptionMessage != null) {\n\t\t\texceptionMessage = truncatedExceptionMessage;\n\t\t}\n\t\theaders.put(X_EXCEPTION_STACKTRACE, stackTraceAsString);\n\t\theaders.put(X_EXCEPTION_MESSAGE, exceptionMessage);\n\t\theaders.put(X_ORIGINAL_EXCHANGE, messageProperties.getReceivedExchange());\n\t\theaders.put(X_ORIGINAL_ROUTING_KEY, messageProperties.getReceivedRoutingKey());\n\t\tMap<? extends String, ?> additionalHeaders = additionalHeaders(message, cause);\n\t\tif (additionalHeaders != null) {\n\t\t\theaders.putAll(additionalHeaders);\n\t\t}\n\n\t\tif (messageProperties.getDeliveryMode() == null) {\n\t\t\tmessageProperties.setDeliveryMode(this.deliveryMode);\n\t\t}\n\n\t\tif (null != this.errorExchangeName) {\n\t\t\tString routingKey = this.errorRoutingKey != null ? this.errorRoutingKey\n\t\t\t\t\t: this.prefixedOriginalRoutingKey(message);\n\t\t\tthis.errorTemplate.send(this.errorExchangeName, routingKey, message);\n\t\t\tif (this.logger.isWarnEnabled()) {\n\t\t\t\tthis.logger.warn(\"Republishing failed message to exchange '\" + this.errorExchangeName\n\t\t\t\t\t\t+ \"' with routing key \" + routingKey);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfinal String routingKey = this.prefixedOriginalRoutingKey(message);\n\t\t\tthis.errorTemplate.send(routingKey, message);\n\t\t\tif (this.logger.isWarnEnabled()) {\n\t\t\t\tthis.logger.warn(\"Republishing failed message to the template's default exchange with routing key \"\n\t\t\t\t\t\t+ routingKey);\n\t\t\t}\n\t\t}\n\t}", "signature": "void recover(Message message, Throwable cause)", "full_signature": "@Override public void recover(Message message, Throwable cause)", "class_method_signature": "RepublishMessageRecoverer.recover(Message message, Throwable cause)", "testcase": false, "constructor": false, "invocations": ["getMessageProperties", "getHeaders", "getCause", "getMessage", "getCause", "getMessage", "processStackTrace", "put", "put", "put", "getReceivedExchange", "put", "getReceivedRoutingKey", "additionalHeaders", "putAll", "getDeliveryMode", "setDeliveryMode", "prefixedOriginalRoutingKey", "send", "isWarnEnabled", "warn", "prefixedOriginalRoutingKey", "send", "isWarnEnabled", "warn"]}, "repository": {"repo_id": 1088796, "url": "https://github.com/spring-projects/spring-amqp", "stars": 555, "created": "11/17/2010 3:50:16 PM +00:00", "updates": "2020-01-27T20:49:10+00:00", "fork": "False", "license": "licensed"}}