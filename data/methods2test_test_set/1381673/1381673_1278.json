{"test_class": {"identifier": "KiePMMLScorecardModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String MODEL_NAME = \"SCORE_MODEL\";", "modifier": "private static final", "type": "String", "declarator": "MODEL_NAME = \"SCORE_MODEL\"", "var_name": "MODEL_NAME"}, {"original_string": "private KiePMMLScorecardModel model;", "modifier": "private", "type": "KiePMMLScorecardModel", "declarator": "model", "var_name": "model"}, {"original_string": "private List<KiePMMLOutputField> outputFields;", "modifier": "private", "type": "List<KiePMMLOutputField>", "declarator": "outputFields", "var_name": "outputFields"}, {"original_string": "private Map<String, Object> outputFieldsMap;", "modifier": "private", "type": "Map<String, Object>", "declarator": "outputFieldsMap", "var_name": "outputFieldsMap"}], "file": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-model/src/test/java/org/kie/pmml/models/drools/scorecard/model/KiePMMLScorecardModelTest.java"}, "test_case": {"identifier": "populateWithOutputFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void populateWithOutputFields() {\n        model = KiePMMLScorecardModel.builder(MODEL_NAME, Collections.emptyList(), MINING_FUNCTION.REGRESSION)\n                .withOutputFields(outputFields)\n                .withOutputFieldsMap(outputFieldsMap)\n                .build();\n        PMML4Result toPopulate = new PMML4Result();\n        model.populateWithOutputFields(toPopulate);\n        assertFalse(toPopulate.getResultVariables().isEmpty());\n        for (int i = outputFields.size() -1; i == 0; i --) {\n            KiePMMLOutputField outputField = outputFields.get(i);\n            assertTrue(toPopulate.getResultVariables().containsKey(outputField.getName()));\n            // This test works as it is because relationship outputFields rank and outputFieldsMap is made in reverse order\n            assertEquals(\"REASON_CODE_\" + i, toPopulate.getResultVariables().get(outputField.getName()));\n        }\n    }", "signature": "void populateWithOutputFields()", "full_signature": "@Test public void populateWithOutputFields()", "class_method_signature": "KiePMMLScorecardModelTest.populateWithOutputFields()", "testcase": true, "constructor": false, "invocations": ["build", "withOutputFieldsMap", "withOutputFields", "builder", "emptyList", "populateWithOutputFields", "assertFalse", "isEmpty", "getResultVariables", "size", "get", "assertTrue", "containsKey", "getResultVariables", "getName", "assertEquals", "get", "getResultVariables", "getName"]}, "focal_class": {"identifier": "KiePMMLScorecardModel", "superclass": "extends KiePMMLDroolsModel", "interfaces": "", "fields": [{"original_string": "public static final PMML_MODEL PMML_MODEL_TYPE = PMML_MODEL.SCORECARD_MODEL;", "modifier": "public static final", "type": "PMML_MODEL", "declarator": "PMML_MODEL_TYPE = PMML_MODEL.SCORECARD_MODEL", "var_name": "PMML_MODEL_TYPE"}], "methods": [{"identifier": "KiePMMLScorecardModel", "parameters": "(String modelName, List<KiePMMLExtension> extensions)", "modifiers": "protected", "return": "", "signature": " KiePMMLScorecardModel(String modelName, List<KiePMMLExtension> extensions)", "full_signature": "protected  KiePMMLScorecardModel(String modelName, List<KiePMMLExtension> extensions)", "class_method_signature": "KiePMMLScorecardModel.KiePMMLScorecardModel(String modelName, List<KiePMMLExtension> extensions)", "testcase": false, "constructor": true}, {"identifier": "builder", "parameters": "(String name, List<KiePMMLExtension> extensions, MINING_FUNCTION miningFunction)", "modifiers": "public static", "return": "Builder", "signature": "Builder builder(String name, List<KiePMMLExtension> extensions, MINING_FUNCTION miningFunction)", "full_signature": "public static Builder builder(String name, List<KiePMMLExtension> extensions, MINING_FUNCTION miningFunction)", "class_method_signature": "KiePMMLScorecardModel.builder(String name, List<KiePMMLExtension> extensions, MINING_FUNCTION miningFunction)", "testcase": false, "constructor": false}, {"identifier": "getPmmlModelType", "parameters": "()", "modifiers": "public static", "return": "PMML_MODEL", "signature": "PMML_MODEL getPmmlModelType()", "full_signature": "public static PMML_MODEL getPmmlModelType()", "class_method_signature": "KiePMMLScorecardModel.getPmmlModelType()", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(final Object knowledgeBase, Map<String, Object> requestData)", "modifiers": "@Override public", "return": "Object", "signature": "Object evaluate(final Object knowledgeBase, Map<String, Object> requestData)", "full_signature": "@Override public Object evaluate(final Object knowledgeBase, Map<String, Object> requestData)", "class_method_signature": "KiePMMLScorecardModel.evaluate(final Object knowledgeBase, Map<String, Object> requestData)", "testcase": false, "constructor": false}, {"identifier": "populateWithOutputFields", "parameters": "(PMML4Result toPopulate)", "modifiers": "protected", "return": "void", "signature": "void populateWithOutputFields(PMML4Result toPopulate)", "full_signature": "protected void populateWithOutputFields(PMML4Result toPopulate)", "class_method_signature": "KiePMMLScorecardModel.populateWithOutputFields(PMML4Result toPopulate)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-model/src/main/java/org/kie/pmml/models/drools/scorecard/model/KiePMMLScorecardModel.java"}, "focal_method": {"identifier": "populateWithOutputFields", "parameters": "(PMML4Result toPopulate)", "modifiers": "protected", "return": "void", "body": "protected void populateWithOutputFields(PMML4Result toPopulate) {\n        if (outputFields != null) {\n            final Map<String, Double> sortedByValue\n                    = outputFieldsMap.entrySet()\n                    .stream()\n                    .filter(entry -> entry.getValue() instanceof Double && (Double) entry.getValue() > 0) // TODO: check removal of negative values\n                    .map((Function<Map.Entry<String, Object>, Map.Entry<String, Double>>) entry -> new AbstractMap.SimpleEntry<>(entry.getKey(), (Double) entry.getValue()))\n                    .sorted(Map.Entry.<String, Double>comparingByValue().reversed())\n                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));\n            final List<String> orderedReasonCodes = new ArrayList<>(sortedByValue.keySet());\n            for (KiePMMLOutputField outputField : outputFields) {\n                switch (outputField.getResultFeature()) {\n                    case REASON_CODE:\n                        if (outputField.getRank() != null) {\n                            int index = outputField.getRank() - 1;\n                            String resultCode = null;\n                            String resultVariableName = outputField.getName();\n                            if (index < orderedReasonCodes.size()) {\n                                resultCode = orderedReasonCodes.get(index);\n                            }\n                            toPopulate.updateResultVariable(resultVariableName, resultCode);\n                        }\n                        break;\n                    default:\n                        // not managed, yet\n                }\n            }\n        }\n    }", "signature": "void populateWithOutputFields(PMML4Result toPopulate)", "full_signature": "protected void populateWithOutputFields(PMML4Result toPopulate)", "class_method_signature": "KiePMMLScorecardModel.populateWithOutputFields(PMML4Result toPopulate)", "testcase": false, "constructor": false, "invocations": ["collect", "sorted", "map", "filter", "stream", "entrySet", "getValue", "getValue", "getKey", "getValue", "reversed", "comparingByValue", "toMap", "keySet", "getResultFeature", "getRank", "getRank", "getName", "size", "get", "updateResultVariable"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}