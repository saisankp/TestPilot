{"test_class": {"identifier": "LingoFingerprinterTest", "superclass": "extends AbstractFingerprinterTest", "interfaces": "", "fields": [{"original_string": "boolean standAlone = false;", "modifier": "", "type": "boolean", "declarator": "standAlone = false", "var_name": "standAlone"}], "file": "storage/smiles/src/test/java/org/openscience/cdk/fingerprint/LingoFingerprinterTest.java"}, "test_case": {"identifier": "testGetCountFingerprint", "parameters": "()", "modifiers": "@Test @Override public", "return": "void", "body": "@Test\n    @Override\n    public void testGetCountFingerprint() throws Exception {\n        LingoFingerprinter fpr = new LingoFingerprinter(4);\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"Oc1ccccc1\");\n        ICountFingerprint fp = fpr.getCountFingerprint(mol);\n        assertThat(fp.getCountForHash(\"cccc\".hashCode()), is(2));\n        assertThat(fp.getCountForHash(\"Oc0c\".hashCode()), is(1));\n        assertThat(fp.getCountForHash(\"c0cc\".hashCode()), is(1));\n        assertThat(fp.getCountForHash(\"0ccc\".hashCode()), is(1));\n        assertThat(fp.getCountForHash(\"ccc0\".hashCode()), is(1));\n    }", "signature": "void testGetCountFingerprint()", "full_signature": "@Test @Override public void testGetCountFingerprint()", "class_method_signature": "LingoFingerprinterTest.testGetCountFingerprint()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "getCountFingerprint", "assertThat", "getCountForHash", "hashCode", "is", "assertThat", "getCountForHash", "hashCode", "is", "assertThat", "getCountForHash", "hashCode", "is", "assertThat", "getCountForHash", "hashCode", "is", "assertThat", "getCountForHash", "hashCode", "is"]}, "focal_class": {"identifier": "LingoFingerprinter", "superclass": "extends AbstractFingerprinter", "interfaces": "implements IFingerprinter", "fields": [{"original_string": "private final int n;", "modifier": "private final", "type": "int", "declarator": "n", "var_name": "n"}, {"original_string": "private final SmilesGenerator gen    = SmilesGenerator.unique().aromatic();", "modifier": "private final", "type": "SmilesGenerator", "declarator": "gen    = SmilesGenerator.unique().aromatic()", "var_name": "gen"}, {"original_string": "private final Pattern         DIGITS = Pattern.compile(\"[0-9]+\");", "modifier": "private final", "type": "Pattern", "declarator": "DIGITS = Pattern.compile(\"[0-9]+\")", "var_name": "DIGITS"}, {"original_string": "private final Aromaticity aromaticity = new Aromaticity(ElectronDonation.daylight(),\n                                                            or(all(), relevant()));", "modifier": "private final", "type": "Aromaticity", "declarator": "aromaticity = new Aromaticity(ElectronDonation.daylight(),\n                                                            or(all(), relevant()))", "var_name": "aromaticity"}], "methods": [{"identifier": "LingoFingerprinter", "parameters": "()", "modifiers": "public", "return": "", "signature": " LingoFingerprinter()", "full_signature": "public  LingoFingerprinter()", "class_method_signature": "LingoFingerprinter.LingoFingerprinter()", "testcase": false, "constructor": true}, {"identifier": "LingoFingerprinter", "parameters": "(int n)", "modifiers": "public", "return": "", "signature": " LingoFingerprinter(int n)", "full_signature": "public  LingoFingerprinter(int n)", "class_method_signature": "LingoFingerprinter.LingoFingerprinter(int n)", "testcase": false, "constructor": true}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override protected", "return": "List<Map.Entry<String, String>>", "signature": "List<Map.Entry<String, String>> getParameters()", "full_signature": "@Override protected List<Map.Entry<String, String>> getParameters()", "class_method_signature": "LingoFingerprinter.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer iAtomContainer)", "modifiers": "@Override public", "return": "IBitFingerprint", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer iAtomContainer)", "full_signature": "@Override public IBitFingerprint getBitFingerprint(IAtomContainer iAtomContainer)", "class_method_signature": "LingoFingerprinter.getBitFingerprint(IAtomContainer iAtomContainer)", "testcase": false, "constructor": false}, {"identifier": "getRawFingerprint", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getRawFingerprint(IAtomContainer atomContainer)", "full_signature": "@Override public Map<String, Integer> getRawFingerprint(IAtomContainer atomContainer)", "class_method_signature": "LingoFingerprinter.getRawFingerprint(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSize()", "full_signature": "@Override public int getSize()", "class_method_signature": "LingoFingerprinter.getSize()", "testcase": false, "constructor": false}, {"identifier": "replaceDigits", "parameters": "(String smiles)", "modifiers": "private", "return": "String", "signature": "String replaceDigits(String smiles)", "full_signature": "private String replaceDigits(String smiles)", "class_method_signature": "LingoFingerprinter.replaceDigits(String smiles)", "testcase": false, "constructor": false}, {"identifier": "getCountFingerprint", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "ICountFingerprint", "signature": "ICountFingerprint getCountFingerprint(IAtomContainer container)", "full_signature": "@Override public ICountFingerprint getCountFingerprint(IAtomContainer container)", "class_method_signature": "LingoFingerprinter.getCountFingerprint(IAtomContainer container)", "testcase": false, "constructor": false}], "file": "storage/smiles/src/main/java/org/openscience/cdk/fingerprint/LingoFingerprinter.java"}, "focal_method": {"identifier": "getCountFingerprint", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "ICountFingerprint", "body": "@Override\n    public ICountFingerprint getCountFingerprint(IAtomContainer container) throws CDKException {\n        return FingerprinterTool.makeCountFingerprint(getRawFingerprint(container));\n    }", "signature": "ICountFingerprint getCountFingerprint(IAtomContainer container)", "full_signature": "@Override public ICountFingerprint getCountFingerprint(IAtomContainer container)", "class_method_signature": "LingoFingerprinter.getCountFingerprint(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["makeCountFingerprint", "getRawFingerprint"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}