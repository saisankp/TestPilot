{"test_class": {"identifier": "EncryCredentialAuthenticationHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EncryCredentialAuthenticationHandler handler;", "modifier": "private", "type": "EncryCredentialAuthenticationHandler", "declarator": "handler", "var_name": "handler"}], "file": "ki4so-core/src/test/java/com/github/ebnew/ki4so/core/authentication/handlers/EncryCredentialAuthenticationHandlerTest.java"}, "test_case": {"identifier": "testDoAuthentication", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDoAuthentication() {\n\t\t\n\t\t/**\n\t\t * \u6d4b\u8bd5\u5f02\u5e38\u8f93\u5165\u60c5\u51b5\u3002\n\t\t */\n\t\tAssert.assertFalse(handler.authenticate(null));\n\t\tCredential credential = Mockito.mock(Credential.class);\n\t\tAssert.assertFalse(handler.authenticate(credential));\n\t\t\n\t\t/**\n\t\t * \u6d4b\u8bd5\u89e3\u5bc6\u5931\u8d25\u629b\u51fa\u5f02\u5e38\u7684\u60c5\u51b5\u3002\n\t\t */\n\t\tEncryCredential encryCredential = new EncryCredential(\"sssddaf\");\n\t\tEncryCredentialManager encryCredentialManager = Mockito.mock(EncryCredentialManager.class);\n\t\tthis.handler.setEncryCredentialManager(encryCredentialManager);\n\t\tMockito.when(encryCredentialManager.decrypt(encryCredential)).thenThrow(InvalidEncryCredentialException.INSTANCE);\n\t\tAssert.assertFalse(handler.authenticate(encryCredential));\n\t\t\n\t\t/**\n\t\t * \u6d4b\u8bd5\u89e3\u5bc6\u8fd4\u56denull\u7684\u60c5\u51b5\u3002\n\t\t */\n\t\tMockito.reset(encryCredentialManager);\n\t\tMockito.when(encryCredentialManager.decrypt(encryCredential)).thenReturn(null);\n\t\tAssert.assertFalse(handler.authenticate(encryCredential));\n\t\t\n\t\t/**\n\t\t * \u6d4b\u8bd5\u89e3\u5bc6\u6210\u529f\uff0c\u4f46\u662f\u51ed\u636e\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\u3002\n\t\t */\n\t\tMockito.reset(encryCredentialManager);\n\t\tEncryCredentialInfo encryCredentialInfo = new EncryCredentialInfo();\n\t\tMockito.when(encryCredentialManager.decrypt(encryCredential)).thenReturn(encryCredentialInfo);\n\t\tAssert.assertFalse(handler.authenticate(encryCredential));\n\t\t\n\t\t\n\t\t/**\n\t\t * \u6d4b\u8bd5\u89e3\u5bc6\u6210\u529f\uff0c\u4f46\u662f\u51ed\u636e\u5408\u6cd5\u7684\u60c5\u51b5\u3002\n\t\t */\n\t\tMockito.reset(encryCredentialManager);\n\t\tencryCredentialInfo = new EncryCredentialInfo();\n\t\tMockito.when(encryCredentialManager.decrypt(encryCredential)).thenReturn(encryCredentialInfo);\n\t\tMockito.when(encryCredentialManager.checkEncryCredentialInfo(encryCredentialInfo)).thenReturn(true);\n\t\tAssert.assertTrue(handler.authenticate(encryCredential));\n\t}", "signature": "void testDoAuthentication()", "full_signature": "@Test public void testDoAuthentication()", "class_method_signature": "EncryCredentialAuthenticationHandlerTest.testDoAuthentication()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "authenticate", "mock", "assertFalse", "authenticate", "mock", "setEncryCredentialManager", "thenThrow", "when", "decrypt", "assertFalse", "authenticate", "reset", "thenReturn", "when", "decrypt", "assertFalse", "authenticate", "reset", "thenReturn", "when", "decrypt", "assertFalse", "authenticate", "reset", "thenReturn", "when", "decrypt", "thenReturn", "when", "checkEncryCredentialInfo", "assertTrue", "authenticate"]}, "focal_class": {"identifier": "EncryCredentialAuthenticationHandler", "superclass": "extends\n\t\tAbstractPreAndPostProcessingAuthenticationHandler", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate EncryCredentialManager encryCredentialManager;", "modifier": "@Autowired\n\tprivate", "type": "EncryCredentialManager", "declarator": "encryCredentialManager", "var_name": "encryCredentialManager"}, {"original_string": "private static final Class<EncryCredential> DEFAULT_CLASS = EncryCredential.class;", "modifier": "private static final", "type": "Class<EncryCredential>", "declarator": "DEFAULT_CLASS = EncryCredential.class", "var_name": "DEFAULT_CLASS"}], "methods": [{"identifier": "setEncryCredentialManager", "parameters": "(\n\t\t\tEncryCredentialManager encryCredentialManager)", "modifiers": "public", "return": "void", "signature": "void setEncryCredentialManager(\n\t\t\tEncryCredentialManager encryCredentialManager)", "full_signature": "public void setEncryCredentialManager(\n\t\t\tEncryCredentialManager encryCredentialManager)", "class_method_signature": "EncryCredentialAuthenticationHandler.setEncryCredentialManager(\n\t\t\tEncryCredentialManager encryCredentialManager)", "testcase": false, "constructor": false}, {"identifier": "supports", "parameters": "(final Credential credential)", "modifiers": "public final", "return": "boolean", "signature": "boolean supports(final Credential credential)", "full_signature": "public final boolean supports(final Credential credential)", "class_method_signature": "EncryCredentialAuthenticationHandler.supports(final Credential credential)", "testcase": false, "constructor": false}, {"identifier": "doAuthentication", "parameters": "(Credential credential)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean doAuthentication(Credential credential)", "full_signature": "@Override protected boolean doAuthentication(Credential credential)", "class_method_signature": "EncryCredentialAuthenticationHandler.doAuthentication(Credential credential)", "testcase": false, "constructor": false}], "file": "ki4so-core/src/main/java/com/github/ebnew/ki4so/core/authentication/handlers/EncryCredentialAuthenticationHandler.java"}, "focal_method": {"identifier": "doAuthentication", "parameters": "(Credential credential)", "modifiers": "@Override protected", "return": "boolean", "body": "@Override\n\tprotected boolean doAuthentication(Credential credential)\n\t\t\tthrows AuthenticationException {\n\t\t//\u4e0d\u652f\u6301\u7684\u51ed\u636e\u76f4\u63a5\u8fd4\u56defalse.\n\t\tif(!this.supports(credential)){\n\t\t\treturn false;\n\t\t}\n\t\tif(credential!=null && credential instanceof EncryCredential){\n\t\t\tEncryCredential encryCredential = (EncryCredential)credential;\n\t\t\ttry{\n\t\t\t\t//\u89e3\u5bc6\u51ed\u636e\u4fe1\u606f\u3002\n\t\t\t\tEncryCredentialInfo encryCredentialInfo = this.encryCredentialManager.decrypt(encryCredential);\n\t\t\t\t//\u8bbe\u7f6e\u51ed\u636e\u4fe1\u606f\u7684\u5173\u8054\u6027\u3002\n\t\t\t\tif(encryCredentialInfo!=null){\n\t\t\t\t\tencryCredential.setEncryCredentialInfo(encryCredentialInfo);\n\t\t\t\t\t//\u68c0\u67e5\u52a0\u5bc6\u51ed\u636e\u7684\u5408\u6cd5\u6027\u3002\n\t\t\t\t\treturn this.encryCredentialManager.checkEncryCredentialInfo(encryCredentialInfo);\n\t\t\t\t}\n\t\t\t}catch (InvalidEncryCredentialException e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "signature": "boolean doAuthentication(Credential credential)", "full_signature": "@Override protected boolean doAuthentication(Credential credential)", "class_method_signature": "EncryCredentialAuthenticationHandler.doAuthentication(Credential credential)", "testcase": false, "constructor": false, "invocations": ["supports", "decrypt", "setEncryCredentialInfo", "checkEncryCredentialInfo"]}, "repository": {"repo_id": 9836604, "url": "https://github.com/ebnew/ki4so", "language": "Java", "is_fork": false, "fork_count": 84, "stargazer_count": 100, "size": 4421, "license": "licensed"}}