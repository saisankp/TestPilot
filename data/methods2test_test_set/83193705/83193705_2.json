{"test_class": {"identifier": "BlueTapeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    View view;", "modifier": "@Mock", "type": "View", "declarator": "view", "var_name": "view"}, {"original_string": "@Mock\n    BlueTape.Factory factory;", "modifier": "@Mock", "type": "BlueTape.Factory", "declarator": "factory", "var_name": "factory"}, {"original_string": "@Mock\n    BindingFunction bindingFunction;", "modifier": "@Mock", "type": "BindingFunction", "declarator": "bindingFunction", "var_name": "bindingFunction"}, {"original_string": "BlueTape testee;", "modifier": "", "type": "BlueTape", "declarator": "testee", "var_name": "testee"}], "file": "library/src/test/java/com/github/bluetape/BlueTapeTest.java"}, "test_case": {"identifier": "create_WithActivity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void create_WithActivity() throws Exception {\n        // Given\n        Activity activity = mock(Activity.class);\n\n        given(activity.findViewById(android.R.id.content))\n                .willReturn(view);\n\n        // When\n        BlueTape blueTape = BlueTape\n                .with(factory)\n                .into(activity);\n\n        // Then\n        assertSame(factory, blueTape.factory);\n        assertSame(view, blueTape.view);\n    }", "signature": "void create_WithActivity()", "full_signature": "@Test public void create_WithActivity()", "class_method_signature": "BlueTapeTest.create_WithActivity()", "testcase": true, "constructor": false, "invocations": ["mock", "willReturn", "given", "findViewById", "into", "with", "assertSame", "assertSame"]}, "focal_class": {"identifier": "BlueTape", "superclass": "", "interfaces": "", "fields": [{"original_string": "final View view;", "modifier": "final", "type": "View", "declarator": "view", "var_name": "view"}, {"original_string": "final Factory factory;", "modifier": "final", "type": "Factory", "declarator": "factory", "var_name": "factory"}], "methods": [{"identifier": "BlueTape", "parameters": "(View view, Factory factory)", "modifiers": "private", "return": "", "signature": " BlueTape(View view, Factory factory)", "full_signature": "private  BlueTape(View view, Factory factory)", "class_method_signature": "BlueTape.BlueTape(View view, Factory factory)", "testcase": false, "constructor": true}, {"identifier": "with", "parameters": "(Factory factory)", "modifiers": "public static", "return": "ViewSelector", "signature": "ViewSelector with(Factory factory)", "full_signature": "public static ViewSelector with(Factory factory)", "class_method_signature": "BlueTape.with(Factory factory)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void update()", "full_signature": "public void update()", "class_method_signature": "BlueTape.update()", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/github/bluetape/BlueTape.java"}, "focal_method": {"identifier": "with", "parameters": "(Factory factory)", "modifiers": "public static", "return": "ViewSelector", "body": "public static ViewSelector with(Factory factory) {\n        return new ViewSelector(factory);\n    }", "signature": "ViewSelector with(Factory factory)", "full_signature": "public static ViewSelector with(Factory factory)", "class_method_signature": "BlueTape.with(Factory factory)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 83193705, "url": "https://github.com/dmitry-zaitsev/BlueTape", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 170, "license": "licensed"}}