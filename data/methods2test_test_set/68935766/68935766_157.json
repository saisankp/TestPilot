{"test_class": {"identifier": "ConsoleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Log log = mock(Log.class);", "modifier": "", "type": "Log", "declarator": "log = mock(Log.class)", "var_name": "log"}], "file": "scribe/maven-plugin/src/test/java/com/karuslabs/scribe/maven/plugin/ConsoleTest.java"}, "test_case": {"identifier": "log_empty", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void log_empty() {\n        Console.ERRORS.log(log, List.of());\n        \n        verifyNoInteractions(log);\n    }", "signature": "void log_empty()", "full_signature": "@Test void log_empty()", "class_method_signature": "ConsoleTest.log_empty()", "testcase": true, "constructor": false, "invocations": ["log", "of", "verifyNoInteractions"]}, "focal_class": {"identifier": "Console", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Console WARNINGS = new Console((log, message) -> log.warn(message), \"WARNING\", \"warning\");", "modifier": "public static final", "type": "Console", "declarator": "WARNINGS = new Console((log, message) -> log.warn(message), \"WARNING\", \"warning\")", "var_name": "WARNINGS"}, {"original_string": "public static final Console ERRORS = new Console((log, message) -> log.error(message), \"FAILURE\", \"error\");", "modifier": "public static final", "type": "Console", "declarator": "ERRORS = new Console((log, message) -> log.error(message), \"FAILURE\", \"error\")", "var_name": "ERRORS"}, {"original_string": "BiConsumer<Log, String> consumer;", "modifier": "", "type": "BiConsumer<Log, String>", "declarator": "consumer", "var_name": "consumer"}, {"original_string": "String header;", "modifier": "", "type": "String", "declarator": "header", "var_name": "header"}, {"original_string": "String count;", "modifier": "", "type": "String", "declarator": "count", "var_name": "count"}], "methods": [{"identifier": "Console", "parameters": "(BiConsumer<Log, String> consumer, String header, String count)", "modifiers": "", "return": "", "signature": " Console(BiConsumer<Log, String> consumer, String header, String count)", "full_signature": "  Console(BiConsumer<Log, String> consumer, String header, String count)", "class_method_signature": "Console.Console(BiConsumer<Log, String> consumer, String header, String count)", "testcase": false, "constructor": true}, {"identifier": "log", "parameters": "(Log logger, List<Entry<Class<?>, String>> messages)", "modifiers": "public", "return": "void", "signature": "void log(Log logger, List<Entry<Class<?>, String>> messages)", "full_signature": "public void log(Log logger, List<Entry<Class<?>, String>> messages)", "class_method_signature": "Console.log(Log logger, List<Entry<Class<?>, String>> messages)", "testcase": false, "constructor": false}], "file": "scribe/maven-plugin/src/main/java/com/karuslabs/scribe/maven/plugin/Console.java"}, "focal_method": {"identifier": "log", "parameters": "(Log logger, List<Entry<Class<?>, String>> messages)", "modifiers": "public", "return": "void", "body": "public void log(Log logger, List<Entry<Class<?>, String>> messages) {\n        if (messages.isEmpty()) {\n            return;\n        }\n        \n        logger.info(\"-------------------------------------------------------------\");\n        consumer.accept(logger, \"RESOLUTION \" + header + \":\");\n        logger.info(\"-------------------------------------------------------------\");\n        for (var message : messages) {\n            if (message.getKey() != null) {\n                consumer.accept(logger, message.getKey().getName() + \": \" + message.getValue());\n                \n            } else {\n                consumer.accept(logger, message.getValue());\n            }\n        }\n        logger.info(messages.size() + \" \" + (messages.size() == 1 ? count : count + \"s\"));\n        logger.info(\"-------------------------------------------------------------\");\n    }", "signature": "void log(Log logger, List<Entry<Class<?>, String>> messages)", "full_signature": "public void log(Log logger, List<Entry<Class<?>, String>> messages)", "class_method_signature": "Console.log(Log logger, List<Entry<Class<?>, String>> messages)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "info", "accept", "info", "getKey", "accept", "getName", "getKey", "getValue", "accept", "getValue", "info", "size", "size", "info"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}