{"test_class": {"identifier": "NumbersUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "utils/src/test/java/com/cloud/utils/NumbersUtilTest.java"}, "test_case": {"identifier": "toReadableSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toReadableSize() {\n        Locale.setDefault(Locale.US); // Fixed locale for the test\n        assertEquals(\"1.0000 TB\", NumbersUtil.toReadableSize((1024l * 1024l * 1024l * 1024l)));\n        assertEquals(\"1.00 GB\", NumbersUtil.toReadableSize(1024 * 1024 * 1024));\n        assertEquals(\"1.00 MB\", NumbersUtil.toReadableSize(1024 * 1024));\n        assertEquals(\"1.00 KB\", NumbersUtil.toReadableSize((1024)));\n        assertEquals(\"1023 bytes\", NumbersUtil.toReadableSize((1023)));\n    }", "signature": "void toReadableSize()", "full_signature": "@Test public void toReadableSize()", "class_method_signature": "NumbersUtilTest.toReadableSize()", "testcase": true, "constructor": false, "invocations": ["setDefault", "assertEquals", "toReadableSize", "assertEquals", "toReadableSize", "assertEquals", "toReadableSize", "assertEquals", "toReadableSize", "assertEquals", "toReadableSize"]}, "focal_class": {"identifier": "NumbersUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final long KB = 1024;", "modifier": "protected static final", "type": "long", "declarator": "KB = 1024", "var_name": "KB"}, {"original_string": "protected static final long MB = 1024 * KB;", "modifier": "protected static final", "type": "long", "declarator": "MB = 1024 * KB", "var_name": "MB"}, {"original_string": "protected static final long GB = 1024 * MB;", "modifier": "protected static final", "type": "long", "declarator": "GB = 1024 * MB", "var_name": "GB"}, {"original_string": "protected static final long TB = 1024 * GB;", "modifier": "protected static final", "type": "long", "declarator": "TB = 1024 * GB", "var_name": "TB"}], "methods": [{"identifier": "parseLong", "parameters": "(String s, long defaultValue)", "modifiers": "public static", "return": "long", "signature": "long parseLong(String s, long defaultValue)", "full_signature": "public static long parseLong(String s, long defaultValue)", "class_method_signature": "NumbersUtil.parseLong(String s, long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(String s, int defaultValue)", "modifiers": "public static", "return": "int", "signature": "int parseInt(String s, int defaultValue)", "full_signature": "public static int parseInt(String s, int defaultValue)", "class_method_signature": "NumbersUtil.parseInt(String s, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "parseFloat", "parameters": "(String s, float defaultValue)", "modifiers": "public static", "return": "float", "signature": "float parseFloat(String s, float defaultValue)", "full_signature": "public static float parseFloat(String s, float defaultValue)", "class_method_signature": "NumbersUtil.parseFloat(String s, float defaultValue)", "testcase": false, "constructor": false}, {"identifier": "bytesToLong", "parameters": "(byte b[])", "modifiers": "public static", "return": "long", "signature": "long bytesToLong(byte b[])", "full_signature": "public static long bytesToLong(byte b[])", "class_method_signature": "NumbersUtil.bytesToLong(byte b[])", "testcase": false, "constructor": false}, {"identifier": "bytesToLong", "parameters": "(byte b[], int pos)", "modifiers": "public static", "return": "long", "signature": "long bytesToLong(byte b[], int pos)", "full_signature": "public static long bytesToLong(byte b[], int pos)", "class_method_signature": "NumbersUtil.bytesToLong(byte b[], int pos)", "testcase": false, "constructor": false}, {"identifier": "bytesToString", "parameters": "(byte[] data, int start, int end)", "modifiers": "public static", "return": "String", "signature": "String bytesToString(byte[] data, int start, int end)", "full_signature": "public static String bytesToString(byte[] data, int start, int end)", "class_method_signature": "NumbersUtil.bytesToString(byte[] data, int start, int end)", "testcase": false, "constructor": false}, {"identifier": "toReadableSize", "parameters": "(long bytes)", "modifiers": "public static", "return": "String", "signature": "String toReadableSize(long bytes)", "full_signature": "public static String toReadableSize(long bytes)", "class_method_signature": "NumbersUtil.toReadableSize(long bytes)", "testcase": false, "constructor": false}, {"identifier": "parseInterval", "parameters": "(String str, long defaultValue)", "modifiers": "public static", "return": "long", "signature": "long parseInterval(String str, long defaultValue)", "full_signature": "public static long parseInterval(String str, long defaultValue)", "class_method_signature": "NumbersUtil.parseInterval(String str, long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(long value)", "modifiers": "public static", "return": "int", "signature": "int hash(long value)", "full_signature": "public static int hash(long value)", "class_method_signature": "NumbersUtil.hash(long value)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/com/cloud/utils/NumbersUtil.java"}, "focal_method": {"identifier": "toReadableSize", "parameters": "(long bytes)", "modifiers": "public static", "return": "String", "body": "public static String toReadableSize(long bytes) {\n        if (bytes < KB && bytes >= 0) {\n            return Long.toString(bytes) + \" bytes\";\n        }\n        StringBuilder builder = new StringBuilder();\n        Formatter format = new Formatter(builder, Locale.getDefault());\n        if (bytes < MB) {\n            format.format(\"%.2f KB\", (float)bytes / (float)KB);\n        } else if (bytes < GB) {\n            format.format(\"%.2f MB\", (float)bytes / (float)MB);\n        } else if (bytes < TB) {\n            format.format(\"%.2f GB\", (float)bytes / (float)GB);\n        } else {\n            format.format(\"%.4f TB\", (float)bytes / (float)TB);\n        }\n        format.close();\n        return builder.toString();\n    }", "signature": "String toReadableSize(long bytes)", "full_signature": "public static String toReadableSize(long bytes)", "class_method_signature": "NumbersUtil.toReadableSize(long bytes)", "testcase": false, "constructor": false, "invocations": ["toString", "getDefault", "format", "format", "format", "format", "close", "toString"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}