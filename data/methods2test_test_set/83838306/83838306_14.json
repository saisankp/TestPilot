{"test_class": {"identifier": "UlidTest", "superclass": "", "interfaces": "", "fields": [], "file": "outland-feature-server/src/test/java/outland/feature/server/features/UlidTest.java"}, "test_case": {"identifier": "testLowerCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testLowerCase() {\n    for(int i=0; i< 100; ++i) {\n      final String ulid = Ulid.random();\n      assertEquals(ulid, ulid.toLowerCase());\n    }\n  }", "signature": "void testLowerCase()", "full_signature": "@Test public void testLowerCase()", "class_method_signature": "UlidTest.testLowerCase()", "testcase": true, "constructor": false, "invocations": ["random", "assertEquals", "toLowerCase"]}, "focal_class": {"identifier": "Ulid", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int ULID_LENGTH = 26;", "modifier": "public static final", "type": "int", "declarator": "ULID_LENGTH = 26", "var_name": "ULID_LENGTH"}, {"original_string": "public static final long MIN_TIME = 0x0L;", "modifier": "public static final", "type": "long", "declarator": "MIN_TIME = 0x0L", "var_name": "MIN_TIME"}, {"original_string": "public static final long MAX_TIME = 0x0000ffffffffffffL;", "modifier": "public static final", "type": "long", "declarator": "MAX_TIME = 0x0000ffffffffffffL", "var_name": "MAX_TIME"}, {"original_string": "private static final char[] C = new char[] { //\n      0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, //\n      0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, //\n      0x67, 0x68, 0x6a, 0x6b, 0x6d, 0x6e, 0x70, 0x71, //\n      0x72, 0x73, 0x74, 0x76, 0x77, 0x78, 0x79, 0x7a};", "modifier": "private static final", "type": "char[]", "declarator": "C = new char[] { //\n      0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, //\n      0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, //\n      0x67, 0x68, 0x6a, 0x6b, 0x6d, 0x6e, 0x70, 0x71, //\n      0x72, 0x73, 0x74, 0x76, 0x77, 0x78, 0x79, 0x7a}", "var_name": "C"}, {"original_string": "private static final byte[] V = new byte[] { //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03, //\n      (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, //\n      (byte) 0x08, (byte) 0x09, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0x0a, (byte) 0x0b, (byte) 0x0c, //\n      (byte) 0x0d, (byte) 0x0e, (byte) 0x0f, (byte) 0x10, //\n      (byte) 0x11, (byte) 0xff, (byte) 0x12, (byte) 0x13, //\n      (byte) 0xff, (byte) 0x14, (byte) 0x15, (byte) 0xff, //\n      (byte) 0x16, (byte) 0x17, (byte) 0x18, (byte) 0x19, //\n      (byte) 0x1a, (byte) 0xff, (byte) 0x1b, (byte) 0x1c, //\n      (byte) 0x1d, (byte) 0x1e, (byte) 0x1f, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0x0a, (byte) 0x0b, (byte) 0x0c, //\n      (byte) 0x0d, (byte) 0x0e, (byte) 0x0f, (byte) 0x10, //\n      (byte) 0x11, (byte) 0xff, (byte) 0x12, (byte) 0x13, //\n      (byte) 0xff, (byte) 0x14, (byte) 0x15, (byte) 0xff, //\n      (byte) 0x16, (byte) 0x17, (byte) 0x18, (byte) 0x19, //\n      (byte) 0x1a, (byte) 0xff, (byte) 0x1b, (byte) 0x1c, //\n      (byte) 0x1d, (byte) 0x1e, (byte) 0x1f, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff //\n  };", "modifier": "private static final", "type": "byte[]", "declarator": "V = new byte[] { //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03, //\n      (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, //\n      (byte) 0x08, (byte) 0x09, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0x0a, (byte) 0x0b, (byte) 0x0c, //\n      (byte) 0x0d, (byte) 0x0e, (byte) 0x0f, (byte) 0x10, //\n      (byte) 0x11, (byte) 0xff, (byte) 0x12, (byte) 0x13, //\n      (byte) 0xff, (byte) 0x14, (byte) 0x15, (byte) 0xff, //\n      (byte) 0x16, (byte) 0x17, (byte) 0x18, (byte) 0x19, //\n      (byte) 0x1a, (byte) 0xff, (byte) 0x1b, (byte) 0x1c, //\n      (byte) 0x1d, (byte) 0x1e, (byte) 0x1f, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0x0a, (byte) 0x0b, (byte) 0x0c, //\n      (byte) 0x0d, (byte) 0x0e, (byte) 0x0f, (byte) 0x10, //\n      (byte) 0x11, (byte) 0xff, (byte) 0x12, (byte) 0x13, //\n      (byte) 0xff, (byte) 0x14, (byte) 0x15, (byte) 0xff, //\n      (byte) 0x16, (byte) 0x17, (byte) 0x18, (byte) 0x19, //\n      (byte) 0x1a, (byte) 0xff, (byte) 0x1b, (byte) 0x1c, //\n      (byte) 0x1d, (byte) 0x1e, (byte) 0x1f, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, //\n      (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff //\n  }", "var_name": "V"}], "methods": [{"identifier": "random", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String random()", "full_signature": "public static String random()", "class_method_signature": "Ulid.random()", "testcase": false, "constructor": false}, {"identifier": "random", "parameters": "(long millis)", "modifiers": "public static", "return": "String", "signature": "String random(long millis)", "full_signature": "public static String random(long millis)", "class_method_signature": "Ulid.random(long millis)", "testcase": false, "constructor": false}, {"identifier": "random", "parameters": "(Random random)", "modifiers": "public static", "return": "String", "signature": "String random(Random random)", "full_signature": "public static String random(Random random)", "class_method_signature": "Ulid.random(Random random)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(long time, byte[] entropy)", "modifiers": "public static", "return": "String", "signature": "String generate(long time, byte[] entropy)", "full_signature": "public static String generate(long time, byte[] entropy)", "class_method_signature": "Ulid.generate(long time, byte[] entropy)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(CharSequence ulid)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValid(CharSequence ulid)", "full_signature": "public static boolean isValid(CharSequence ulid)", "class_method_signature": "Ulid.isValid(CharSequence ulid)", "testcase": false, "constructor": false}, {"identifier": "getTimestamp", "parameters": "(CharSequence ulid)", "modifiers": "public static", "return": "long", "signature": "long getTimestamp(CharSequence ulid)", "full_signature": "public static long getTimestamp(CharSequence ulid)", "class_method_signature": "Ulid.getTimestamp(CharSequence ulid)", "testcase": false, "constructor": false}, {"identifier": "getEntropy", "parameters": "(CharSequence ulid)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getEntropy(CharSequence ulid)", "full_signature": "public static byte[] getEntropy(CharSequence ulid)", "class_method_signature": "Ulid.getEntropy(CharSequence ulid)", "testcase": false, "constructor": false}], "file": "outland-feature-server/src/main/java/outland/feature/server/features/Ulid.java"}, "focal_method": {"identifier": "random", "parameters": "()", "modifiers": "public static", "return": "String", "body": "public static String random() {\n    return random(System.currentTimeMillis());\n  }", "signature": "String random()", "full_signature": "public static String random()", "class_method_signature": "Ulid.random()", "testcase": false, "constructor": false, "invocations": ["random", "currentTimeMillis"]}, "repository": {"repo_id": 83838306, "url": "https://github.com/dehora/outland", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 944, "license": "licensed"}}