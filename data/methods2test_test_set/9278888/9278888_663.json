{"test_class": {"identifier": "ExtraFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "BasicMapExtra.Factory factory = new BasicMapExtra.FactoryBuilder()\n      .addInitialKey(\"1\")\n      .addInitialKey(\"2\")\n      .build();", "modifier": "", "type": "BasicMapExtra.Factory", "declarator": "factory = new BasicMapExtra.FactoryBuilder()\n      .addInitialKey(\"1\")\n      .addInitialKey(\"2\")\n      .build()", "var_name": "factory"}, {"original_string": "Propagation.Factory propagationFactory = new Propagation.Factory() {\n    @Deprecated @Override public <K> Propagation<K> create(Propagation.KeyFactory<K> keyFactory) {\n      return B3Propagation.FACTORY.create(keyFactory);\n    }\n\n    @Override public TraceContext decorate(TraceContext context) {\n      return factory.decorate(context);\n    }\n  };", "modifier": "", "type": "Propagation.Factory", "declarator": "propagationFactory = new Propagation.Factory() {\n    @Deprecated @Override public <K> Propagation<K> create(Propagation.KeyFactory<K> keyFactory) {\n      return B3Propagation.FACTORY.create(keyFactory);\n    }\n\n    @Override public TraceContext decorate(TraceContext context) {\n      return factory.decorate(context);\n    }\n  }", "var_name": "propagationFactory"}, {"original_string": "TraceContext context = TraceContext.newBuilder().traceId(1L).spanId(2L).sampled(true).build();", "modifier": "", "type": "TraceContext", "declarator": "context = TraceContext.newBuilder().traceId(1L).spanId(2L).sampled(true).build()", "var_name": "context"}, {"original_string": "TraceContext context2 = context.toBuilder().parentId(2L).spanId(3L).build();", "modifier": "", "type": "TraceContext", "declarator": "context2 = context.toBuilder().parentId(2L).spanId(3L).build()", "var_name": "context2"}], "file": "brave/src/test/java/brave/internal/extra/ExtraFactoryTest.java"}, "test_case": {"identifier": "decorate_parent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void decorate_parent() {\n    TraceContext decorated = propagationFactory.decorate(context);\n    BasicMapExtra extra1 = decorated.findExtra(BasicMapExtra.class);\n    extra1.put(\"1\", \"one\");\n\n    context2 = propagationFactory.decorate(context2.toBuilder().addExtra(extra1).build());\n    BasicMapExtra extra2 = context2.findExtra(BasicMapExtra.class);\n    assertThat(context2.extra()).containsExactly(extra2); // didn't duplicate\n\n    assertThat(extra2.get(\"1\")).isEqualTo(\"one\");\n\n    assertExtraClaimed(context2);\n  }", "signature": "void decorate_parent()", "full_signature": "@Test public void decorate_parent()", "class_method_signature": "ExtraFactoryTest.decorate_parent()", "testcase": true, "constructor": false, "invocations": ["decorate", "findExtra", "put", "decorate", "build", "addExtra", "toBuilder", "findExtra", "containsExactly", "assertThat", "extra", "isEqualTo", "assertThat", "get", "assertExtraClaimed"]}, "focal_class": {"identifier": "ExtraFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "final Object initialState;", "modifier": "final", "type": "Object", "declarator": "initialState", "var_name": "initialState"}], "methods": [{"identifier": "ExtraFactory", "parameters": "(Object initialState)", "modifiers": "protected", "return": "", "signature": " ExtraFactory(Object initialState)", "full_signature": "protected  ExtraFactory(Object initialState)", "class_method_signature": "ExtraFactory.ExtraFactory(Object initialState)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "()", "modifiers": "protected abstract", "return": "E", "signature": "E create()", "full_signature": "protected abstract E create()", "class_method_signature": "ExtraFactory.create()", "testcase": false, "constructor": false}, {"identifier": "decorate", "parameters": "(TraceContext context)", "modifiers": "public final", "return": "TraceContext", "signature": "TraceContext decorate(TraceContext context)", "full_signature": "public final TraceContext decorate(TraceContext context)", "class_method_signature": "ExtraFactory.decorate(TraceContext context)", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/internal/extra/ExtraFactory.java"}, "focal_method": {"identifier": "decorate", "parameters": "(TraceContext context)", "modifiers": "public final", "return": "TraceContext", "body": "public final TraceContext decorate(TraceContext context) {\n    long traceId = context.traceId(), spanId = context.spanId();\n\n    E claimed = null;\n    int existingIndex = -1, extraLength = context.extra().size();\n    for (int i = 0; i < extraLength; i++) {\n      Object next = context.extra().get(i);\n      if (next instanceof Extra) {\n        Extra nextExtra = (Extra) next;\n        // Don't interfere with other instances or subtypes\n        if (nextExtra.factory != this) continue;\n\n        if (claimed == null && nextExtra.tryToClaim(traceId, spanId)) {\n          claimed = (E) nextExtra;\n          continue;\n        }\n\n        if (existingIndex == -1) {\n          existingIndex = i;\n        } else {\n          Platform.get().log(\"BUG: something added redundant extra instances %s\", context, null);\n          return context;\n        }\n      }\n    }\n\n    // Easiest when there is neither existing state to assign, nor need to change context.extra()\n    if (claimed != null && existingIndex == -1) {\n      return context;\n    }\n\n    // If context.extra() didn't have an unclaimed extra instance, create one for this context.\n    if (claimed == null) {\n      claimed = create();\n      if (claimed == null) {\n        Platform.get().log(\"BUG: create() returned null\", null);\n        return context;\n      }\n      claimed.tryToClaim(traceId, spanId);\n    }\n\n    TraceContext.Builder builder = context.toBuilder().clearExtra().addExtra(claimed);\n\n    for (int i = 0; i < extraLength; i++) {\n      Object next = context.extra().get(i);\n      if (i == existingIndex) {\n        E existing = (E) next;\n        // If the claimed extra instance was new or had no changes, simply assign existing to it\n        if (claimed.state == initialState) {\n          claimed.state = existing.state;\n        } else if (existing.state != initialState) {\n          claimed.mergeStateKeepingOursOnConflict(existing);\n        }\n      } else if (!next.equals(claimed)) {\n        builder.addExtra(next);\n      }\n    }\n\n    return builder.build();\n  }", "signature": "TraceContext decorate(TraceContext context)", "full_signature": "public final TraceContext decorate(TraceContext context)", "class_method_signature": "ExtraFactory.decorate(TraceContext context)", "testcase": false, "constructor": false, "invocations": ["traceId", "spanId", "size", "extra", "get", "extra", "tryToClaim", "log", "get", "create", "log", "get", "tryToClaim", "addExtra", "clearExtra", "toBuilder", "get", "extra", "mergeStateKeepingOursOnConflict", "equals", "addExtra", "build"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}