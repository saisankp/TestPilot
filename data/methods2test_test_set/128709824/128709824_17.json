{"test_class": {"identifier": "SofaRpcMetricsTest", "superclass": "", "interfaces": "", "fields": [], "file": "metrics/metrics-micrometer/src/test/java/com/alipay/sofa/rpc/metrics/micrometer/SofaRpcMetricsTest.java"}, "test_case": {"identifier": "testMicrometerMetrics", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMicrometerMetrics() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n\n        SimpleMeterRegistry registry = new SimpleMeterRegistry();\n        try (SofaRpcMetrics metrics = new SofaRpcMetrics()) {\n            metrics.bindTo(registry);\n\n            Method handleEvent = EventBus.class.getDeclaredMethod(\n                \"handleEvent\", Subscriber.class, Event.class);\n            handleEvent.setAccessible(true);\n            SofaRequest request = buildRequest();\n            SofaResponse response = buildResponse();\n            RpcInternalContext.getContext()\n                .setAttachment(RpcConstants.INTERNAL_KEY_CLIENT_ELAPSE, 100)\n                .setAttachment(RpcConstants.INTERNAL_KEY_IMPL_ELAPSE, 10)\n                .setAttachment(RpcConstants.INTERNAL_KEY_REQ_SIZE, 3)\n                .setAttachment(RpcConstants.INTERNAL_KEY_RESP_SIZE, 4);\n\n            handleEvent.invoke(EventBus.class, metrics, new ClientEndInvokeEvent(request, response, null));\n            handleEvent.invoke(EventBus.class, metrics, new ServerSendEvent(request, response, null));\n            ServerConfig serverConfig = new ServerConfig();\n            handleEvent.invoke(EventBus.class, metrics, new ServerStartedEvent(serverConfig, new ThreadPoolExecutor(1, 1,\n                0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>())));\n            handleEvent.invoke(EventBus.class, metrics, new ServerStoppedEvent(serverConfig));\n            handleEvent.invoke(EventBus.class, metrics, new ProviderPubEvent(new ProviderConfig<>()));\n            handleEvent.invoke(EventBus.class, metrics, new ConsumerSubEvent(new ConsumerConfig<>()));\n\n            Assert.assertEquals(12, registry.getMeters().size());\n        }\n    }", "signature": "void testMicrometerMetrics()", "full_signature": "@Test public void testMicrometerMetrics()", "class_method_signature": "SofaRpcMetricsTest.testMicrometerMetrics()", "testcase": true, "constructor": false, "invocations": ["bindTo", "getDeclaredMethod", "setAccessible", "buildRequest", "buildResponse", "setAttachment", "setAttachment", "setAttachment", "setAttachment", "getContext", "invoke", "invoke", "invoke", "invoke", "invoke", "invoke", "assertEquals", "size", "getMeters"]}, "focal_class": {"identifier": "SofaRpcMetrics", "superclass": "extends Subscriber", "interfaces": "implements MeterBinder, AutoCloseable", "fields": [{"original_string": "private final AtomicReference<MeterRegistry> initialed = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<MeterRegistry>", "declarator": "initialed = new AtomicReference<>()", "var_name": "initialed"}, {"original_string": "private final Function<Tags, Timer> clientTotal = tags -> Timer.builder(\"sofa.client.total\")\n        .tags(tags)\n        .register(initialed.get());", "modifier": "private final", "type": "Function<Tags, Timer>", "declarator": "clientTotal = tags -> Timer.builder(\"sofa.client.total\")\n        .tags(tags)\n        .register(initialed.get())", "var_name": "clientTotal"}, {"original_string": "private final Function<Tags, Timer> clientFail = tags -> Timer.builder(\"sofa.client.fail\")\n        .tags(tags)\n        .register(initialed.get());", "modifier": "private final", "type": "Function<Tags, Timer>", "declarator": "clientFail = tags -> Timer.builder(\"sofa.client.fail\")\n        .tags(tags)\n        .register(initialed.get())", "var_name": "clientFail"}, {"original_string": "private final Function<Tags, Timer> serverTotal = tags -> Timer.builder(\"sofa.server.total\")\n        .tags(tags)\n        .register(initialed.get());", "modifier": "private final", "type": "Function<Tags, Timer>", "declarator": "serverTotal = tags -> Timer.builder(\"sofa.server.total\")\n        .tags(tags)\n        .register(initialed.get())", "var_name": "serverTotal"}, {"original_string": "private final Function<Tags, Timer> serverFail = tags -> Timer.builder(\"sofa.server.fail\")\n        .tags(tags)\n        .register(initialed.get());", "modifier": "private final", "type": "Function<Tags, Timer>", "declarator": "serverFail = tags -> Timer.builder(\"sofa.server.fail\")\n        .tags(tags)\n        .register(initialed.get())", "var_name": "serverFail"}, {"original_string": "private final Function<Tags, DistributionSummary> requestSize = tags -> DistributionSummary.builder(\"sofa.request.size\")\n        .tags(tags)\n        .baseUnit(BaseUnits.BYTES)\n        .register(initialed.get());", "modifier": "private final", "type": "Function<Tags, DistributionSummary>", "declarator": "requestSize = tags -> DistributionSummary.builder(\"sofa.request.size\")\n        .tags(tags)\n        .baseUnit(BaseUnits.BYTES)\n        .register(initialed.get())", "var_name": "requestSize"}, {"original_string": "private final Function<Tags, DistributionSummary> responseSize = tags -> DistributionSummary.builder(\"sofa.response.size\")\n        .tags(tags)\n        .baseUnit(BaseUnits.BYTES)\n        .register(initialed.get());", "modifier": "private final", "type": "Function<Tags, DistributionSummary>", "declarator": "responseSize = tags -> DistributionSummary.builder(\"sofa.response.size\")\n        .tags(tags)\n        .baseUnit(BaseUnits.BYTES)\n        .register(initialed.get())", "var_name": "responseSize"}, {"original_string": "private Counter provider;", "modifier": "private", "type": "Counter", "declarator": "provider", "var_name": "provider"}, {"original_string": "private Counter consumer;", "modifier": "private", "type": "Counter", "declarator": "consumer", "var_name": "consumer"}, {"original_string": "private final Tags common;", "modifier": "private final", "type": "Tags", "declarator": "common", "var_name": "common"}, {"original_string": "private final AtomicReference<ServerConfig> serverConfig = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<ServerConfig>", "declarator": "serverConfig = new AtomicReference<>()", "var_name": "serverConfig"}, {"original_string": "private final AtomicReference<ThreadPoolExecutor> executor = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<ThreadPoolExecutor>", "declarator": "executor = new AtomicReference<>()", "var_name": "executor"}], "methods": [{"identifier": "SofaRpcMetrics", "parameters": "()", "modifiers": "public", "return": "", "signature": " SofaRpcMetrics()", "full_signature": "public  SofaRpcMetrics()", "class_method_signature": "SofaRpcMetrics.SofaRpcMetrics()", "testcase": false, "constructor": true}, {"identifier": "SofaRpcMetrics", "parameters": "(Iterable<Tag> common)", "modifiers": "public", "return": "", "signature": " SofaRpcMetrics(Iterable<Tag> common)", "full_signature": "public  SofaRpcMetrics(Iterable<Tag> common)", "class_method_signature": "SofaRpcMetrics.SofaRpcMetrics(Iterable<Tag> common)", "testcase": false, "constructor": true}, {"identifier": "bindTo", "parameters": "(MeterRegistry registry)", "modifiers": "@Override public", "return": "void", "signature": "void bindTo(MeterRegistry registry)", "full_signature": "@Override public void bindTo(MeterRegistry registry)", "class_method_signature": "SofaRpcMetrics.bindTo(MeterRegistry registry)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void register()", "full_signature": "private void register()", "class_method_signature": "SofaRpcMetrics.register()", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(Event event)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(Event event)", "full_signature": "@Override public void onEvent(Event event)", "class_method_signature": "SofaRpcMetrics.onEvent(Event event)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(ClientEndInvokeEvent event)", "modifiers": "private", "return": "void", "signature": "void onEvent(ClientEndInvokeEvent event)", "full_signature": "private void onEvent(ClientEndInvokeEvent event)", "class_method_signature": "SofaRpcMetrics.onEvent(ClientEndInvokeEvent event)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(ServerSendEvent event)", "modifiers": "private", "return": "void", "signature": "void onEvent(ServerSendEvent event)", "full_signature": "private void onEvent(ServerSendEvent event)", "class_method_signature": "SofaRpcMetrics.onEvent(ServerSendEvent event)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(ServerStartedEvent event)", "modifiers": "private", "return": "void", "signature": "void onEvent(ServerStartedEvent event)", "full_signature": "private void onEvent(ServerStartedEvent event)", "class_method_signature": "SofaRpcMetrics.onEvent(ServerStartedEvent event)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(ServerStoppedEvent event)", "modifiers": "private", "return": "void", "signature": "void onEvent(ServerStoppedEvent event)", "full_signature": "private void onEvent(ServerStoppedEvent event)", "class_method_signature": "SofaRpcMetrics.onEvent(ServerStoppedEvent event)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(ProviderPubEvent event)", "modifiers": "private", "return": "void", "signature": "void onEvent(ProviderPubEvent event)", "full_signature": "private void onEvent(ProviderPubEvent event)", "class_method_signature": "SofaRpcMetrics.onEvent(ProviderPubEvent event)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(ConsumerSubEvent event)", "modifiers": "private", "return": "void", "signature": "void onEvent(ConsumerSubEvent event)", "full_signature": "private void onEvent(ConsumerSubEvent event)", "class_method_signature": "SofaRpcMetrics.onEvent(ConsumerSubEvent event)", "testcase": false, "constructor": false}, {"identifier": "getLongAvoidNull", "parameters": "(Object object)", "modifiers": "private static", "return": "Long", "signature": "Long getLongAvoidNull(Object object)", "full_signature": "private static Long getLongAvoidNull(Object object)", "class_method_signature": "SofaRpcMetrics.getLongAvoidNull(Object object)", "testcase": false, "constructor": false}, {"identifier": "getStringAvoidNull", "parameters": "(Object object)", "modifiers": "private static", "return": "String", "signature": "String getStringAvoidNull(Object object)", "full_signature": "private static String getStringAvoidNull(Object object)", "class_method_signature": "SofaRpcMetrics.getStringAvoidNull(Object object)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SofaRpcMetrics.close()", "testcase": false, "constructor": false}], "file": "metrics/metrics-micrometer/src/main/java/com/alipay/sofa/rpc/metrics/micrometer/SofaRpcMetrics.java"}, "focal_method": {"identifier": "bindTo", "parameters": "(MeterRegistry registry)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void bindTo(MeterRegistry registry) {\n        Gauge.builder(\"sofa.threadpool.config.core\", () -> Optional.of(serverConfig)\n            .map(AtomicReference::get)\n            .map(ServerConfig::getCoreThreads)\n            .orElse(0))\n            .tags(common)\n            .baseUnit(BaseUnits.THREADS)\n            .register(registry);\n        Gauge.builder(\"sofa.threadpool.config.max\", () -> Optional.of(serverConfig)\n            .map(AtomicReference::get)\n            .map(ServerConfig::getMaxThreads)\n            .orElse(0))\n            .tags(common)\n            .baseUnit(BaseUnits.THREADS)\n            .register(registry);\n        Gauge.builder(\"sofa.threadpool.config.queue\", () -> Optional.of(serverConfig)\n            .map(AtomicReference::get)\n            .map(ServerConfig::getQueues)\n            .orElse(0))\n            .tags(common)\n            .baseUnit(BaseUnits.TASKS)\n            .register(registry);\n        Gauge.builder(\"sofa.threadpool.active\", () -> Optional.of(executor)\n            .map(AtomicReference::get)\n            .map(ThreadPoolExecutor::getActiveCount)\n            .orElse(0))\n            .tags(common)\n            .baseUnit(BaseUnits.THREADS)\n            .register(registry);\n        Gauge.builder(\"sofa.threadpool.idle\", () -> Optional.of(executor)\n            .map(AtomicReference::get)\n            .map(e -> e.getPoolSize() - e.getActiveCount())\n            .orElse(0))\n            .tags(common)\n            .baseUnit(BaseUnits.THREADS)\n            .register(registry);\n        Gauge.builder(\"sofa.threadpool.queue.size\", () -> Optional.of(executor)\n            .map(AtomicReference::get)\n            .map(ThreadPoolExecutor::getQueue)\n            .map(Collection::size)\n            .orElse(0))\n            .tags(common)\n            .baseUnit(BaseUnits.TASKS)\n            .register(registry);\n        provider = Counter.builder(\"sofa.provider\")\n            .tags(common)\n            .register(registry);\n        consumer = Counter.builder(\"sofa.consumer\")\n            .tags(common)\n            .register(registry);\n\n        initialed.set(registry);\n    }", "signature": "void bindTo(MeterRegistry registry)", "full_signature": "@Override public void bindTo(MeterRegistry registry)", "class_method_signature": "SofaRpcMetrics.bindTo(MeterRegistry registry)", "testcase": false, "constructor": false, "invocations": ["register", "baseUnit", "tags", "builder", "orElse", "map", "map", "of", "register", "baseUnit", "tags", "builder", "orElse", "map", "map", "of", "register", "baseUnit", "tags", "builder", "orElse", "map", "map", "of", "register", "baseUnit", "tags", "builder", "orElse", "map", "map", "of", "register", "baseUnit", "tags", "builder", "orElse", "map", "map", "of", "getPoolSize", "getActiveCount", "register", "baseUnit", "tags", "builder", "orElse", "map", "map", "map", "of", "register", "tags", "builder", "register", "tags", "builder", "set"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}