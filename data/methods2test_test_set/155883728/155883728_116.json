{"test_class": {"identifier": "WebsterNodetypesTargetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final File testOutDir = new File(\"target/test-out/WebsterNodetypesTargetTest\");", "modifier": "final", "type": "File", "declarator": "testOutDir = new File(\"target/test-out/WebsterNodetypesTargetTest\")", "var_name": "testOutDir"}], "file": "webster/src/test/java/net/adamcin/oakpal/webster/targets/WebsterNodetypesTargetTest.java"}, "test_case": {"identifier": "testFromJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromJson() throws Exception {\n        final File targetFile = new File(testOutDir, \"testFromJson.cnd\");\n        final File writeBack = new File(testOutDir, \"testFromJson_writeback\");\n        if (targetFile.exists()) {\n            targetFile.delete();\n        }\n        if (writeBack.exists()) {\n            FileUtils.deleteDirectory(writeBack);\n        }\n        OakMachine.Builder builder = TestUtil.fromPlan(obj().get());\n        WebsterNodetypesTarget target = WebsterNodetypesTarget.fromJson(targetFile, obj().get());\n        target.setArchive(new FileArchive(new File(\"src/test/resources/filevault/noReferences\")), writeBack);\n        builder.build().initAndInspect(target::perform);\n    }", "signature": "void testFromJson()", "full_signature": "@Test public void testFromJson()", "class_method_signature": "WebsterNodetypesTargetTest.testFromJson()", "testcase": true, "constructor": false, "invocations": ["exists", "delete", "exists", "deleteDirectory", "fromPlan", "get", "obj", "fromJson", "get", "obj", "setArchive", "initAndInspect", "build"]}, "focal_class": {"identifier": "WebsterNodetypesTarget", "superclass": "", "interfaces": "implements WebsterTarget, ArchiveAware", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(WebsterNodetypesTarget.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(WebsterNodetypesTarget.class)", "var_name": "LOGGER"}, {"original_string": "static final String KEY_SCOPE_EXPORT_NAMES = \"scopeExportNames\";", "modifier": "static final", "type": "String", "declarator": "KEY_SCOPE_EXPORT_NAMES = \"scopeExportNames\"", "var_name": "KEY_SCOPE_EXPORT_NAMES"}, {"original_string": "static final String KEY_SCOPE_REPLACE_NAMES = \"scopeReplaceNames\";", "modifier": "static final", "type": "String", "declarator": "KEY_SCOPE_REPLACE_NAMES = \"scopeReplaceNames\"", "var_name": "KEY_SCOPE_REPLACE_NAMES"}, {"original_string": "static final String KEY_INCLUDE_BUILTINS = \"includeBuiltins\";", "modifier": "static final", "type": "String", "declarator": "KEY_INCLUDE_BUILTINS = \"includeBuiltins\"", "var_name": "KEY_INCLUDE_BUILTINS"}, {"original_string": "private final File targetFile;", "modifier": "private final", "type": "File", "declarator": "targetFile", "var_name": "targetFile"}, {"original_string": "private final CndExporter exporter;", "modifier": "private final", "type": "CndExporter", "declarator": "exporter", "var_name": "exporter"}, {"original_string": "private Archive archive;", "modifier": "private", "type": "Archive", "declarator": "archive", "var_name": "archive"}, {"original_string": "private File writeBackDir;", "modifier": "private", "type": "File", "declarator": "writeBackDir", "var_name": "writeBackDir"}], "methods": [{"identifier": "WebsterNodetypesTarget", "parameters": "(final File targetFile, final CndExporter exporter)", "modifiers": "private", "return": "", "signature": " WebsterNodetypesTarget(final File targetFile, final CndExporter exporter)", "full_signature": "private  WebsterNodetypesTarget(final File targetFile, final CndExporter exporter)", "class_method_signature": "WebsterNodetypesTarget.WebsterNodetypesTarget(final File targetFile, final CndExporter exporter)", "testcase": false, "constructor": true}, {"identifier": "setArchive", "parameters": "(final Archive archive, final File writeBackDir)", "modifiers": "@Override public", "return": "void", "signature": "void setArchive(final Archive archive, final File writeBackDir)", "full_signature": "@Override public void setArchive(final Archive archive, final File writeBackDir)", "class_method_signature": "WebsterNodetypesTarget.setArchive(final Archive archive, final File writeBackDir)", "testcase": false, "constructor": false}, {"identifier": "perform", "parameters": "(final Session session)", "modifiers": "@Override public", "return": "void", "signature": "void perform(final Session session)", "full_signature": "@Override public void perform(final Session session)", "class_method_signature": "WebsterNodetypesTarget.perform(final Session session)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final File target, final JsonObject config)", "modifiers": "static", "return": "WebsterNodetypesTarget", "signature": "WebsterNodetypesTarget fromJson(final File target, final JsonObject config)", "full_signature": "static WebsterNodetypesTarget fromJson(final File target, final JsonObject config)", "class_method_signature": "WebsterNodetypesTarget.fromJson(final File target, final JsonObject config)", "testcase": false, "constructor": false}], "file": "webster/src/main/java/net/adamcin/oakpal/webster/targets/WebsterNodetypesTarget.java"}, "focal_method": {"identifier": "fromJson", "parameters": "(final File target, final JsonObject config)", "modifiers": "static", "return": "WebsterNodetypesTarget", "body": "static WebsterNodetypesTarget fromJson(final File target, final JsonObject config) {\n        LOGGER.debug(\"[fromJson] fromJson: {}\", config.toString());\n\n        CndExporter.Builder builder = new CndExporter.Builder();\n\n        if (config.containsKey(KEY_SCOPE_EXPORT_NAMES)) {\n            List<Rule> scopeExportNames = Rules.fromJsonArray(config.getJsonArray(KEY_SCOPE_EXPORT_NAMES));\n            builder.withScopeExportNames(scopeExportNames);\n        }\n\n        if (config.containsKey(KEY_SCOPE_REPLACE_NAMES)) {\n            List<Rule> scopeReplaceNames = Rules.fromJsonArray(config.getJsonArray(KEY_SCOPE_REPLACE_NAMES));\n            builder.withScopeReplaceNames(scopeReplaceNames);\n        }\n\n        if (config.containsKey(KEY_INCLUDE_BUILTINS)) {\n            builder.withIncludeBuiltins(config.getBoolean(KEY_INCLUDE_BUILTINS, false));\n        }\n\n        return new WebsterNodetypesTarget(target, builder.build());\n\n    }", "signature": "WebsterNodetypesTarget fromJson(final File target, final JsonObject config)", "full_signature": "static WebsterNodetypesTarget fromJson(final File target, final JsonObject config)", "class_method_signature": "WebsterNodetypesTarget.fromJson(final File target, final JsonObject config)", "testcase": false, "constructor": false, "invocations": ["debug", "toString", "containsKey", "fromJsonArray", "getJsonArray", "withScopeExportNames", "containsKey", "fromJsonArray", "getJsonArray", "withScopeReplaceNames", "containsKey", "withIncludeBuiltins", "getBoolean", "build"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}