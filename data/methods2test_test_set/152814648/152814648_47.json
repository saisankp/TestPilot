{"test_class": {"identifier": "QualityGateEvaluatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "plugin/src/test/java/io/jenkins/plugins/analysis/core/util/QualityGateEvaluatorTest.java"}, "test_case": {"identifier": "shouldBeInactiveIfGatesAreEmpty", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldBeInactiveIfGatesAreEmpty() {\n        Logger logger = new Logger();\n        IssuesStatisticsBuilder builder = new IssuesStatisticsBuilder();\n\n        QualityGateEvaluator qualityGate = new QualityGateEvaluator();\n\n        assertThat(qualityGate.evaluate(builder.build(), logger)).isEqualTo(QualityGateStatus.INACTIVE);\n\n        assertThat(logger.getMessages()).containsExactly(\n                \"-> INACTIVE - No quality gate defined\");\n    }", "signature": "void shouldBeInactiveIfGatesAreEmpty()", "full_signature": "@Test void shouldBeInactiveIfGatesAreEmpty()", "class_method_signature": "QualityGateEvaluatorTest.shouldBeInactiveIfGatesAreEmpty()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "evaluate", "build", "containsExactly", "assertThat", "getMessages"]}, "focal_class": {"identifier": "QualityGateEvaluator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<QualityGate> qualityGates = new ArrayList<>();", "modifier": "private final", "type": "List<QualityGate>", "declarator": "qualityGates = new ArrayList<>()", "var_name": "qualityGates"}], "methods": [{"identifier": "evaluate", "parameters": "(final IssuesStatistics report, final FormattedLogger logger)", "modifiers": "public", "return": "QualityGateStatus", "signature": "QualityGateStatus evaluate(final IssuesStatistics report, final FormattedLogger logger)", "full_signature": "public QualityGateStatus evaluate(final IssuesStatistics report, final FormattedLogger logger)", "class_method_signature": "QualityGateEvaluator.evaluate(final IssuesStatistics report, final FormattedLogger logger)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final int size, final QualityGateType type, final QualityGateResult strength)", "modifiers": "public", "return": "void", "signature": "void add(final int size, final QualityGateType type, final QualityGateResult strength)", "full_signature": "public void add(final int size, final QualityGateType type, final QualityGateResult strength)", "class_method_signature": "QualityGateEvaluator.add(final int size, final QualityGateType type, final QualityGateResult strength)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(final Collection<? extends QualityGate> additionalQualityGates)", "modifiers": "public", "return": "void", "signature": "void addAll(final Collection<? extends QualityGate> additionalQualityGates)", "full_signature": "public void addAll(final Collection<? extends QualityGate> additionalQualityGates)", "class_method_signature": "QualityGateEvaluator.addAll(final Collection<? extends QualityGate> additionalQualityGates)", "testcase": false, "constructor": false}, {"identifier": "isEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEnabled()", "full_signature": "public boolean isEnabled()", "class_method_signature": "QualityGateEvaluator.isEnabled()", "testcase": false, "constructor": false}], "file": "plugin/src/main/java/io/jenkins/plugins/analysis/core/util/QualityGateEvaluator.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(final IssuesStatistics report, final FormattedLogger logger)", "modifiers": "public", "return": "QualityGateStatus", "body": "public QualityGateStatus evaluate(final IssuesStatistics report, final FormattedLogger logger) {\n        if (qualityGates.isEmpty()) {\n            logger.print(\"-> INACTIVE - No quality gate defined\");\n\n            return QualityGateStatus.INACTIVE;\n        }\n\n        QualityGateStatus status = QualityGateStatus.PASSED;\n\n        for (QualityGate qualityGate : qualityGates) {\n            int actualSize = qualityGate.getActualSizeMethodReference().apply(report);\n            if (actualSize >= qualityGate.getThreshold()) {\n                logger.print(\"-> %s - %s: %d - Quality QualityGate: %d\",\n                        qualityGate.getStatus(), qualityGate.getName(), actualSize, qualityGate.getThreshold());\n                if (qualityGate.getStatus().isWorseThan(status)) {\n                    status = qualityGate.getStatus();\n                }\n            }\n            else {\n                logger.print(\"-> PASSED - %s: %d - Quality QualityGate: %d\",\n                        qualityGate.getName(), actualSize, qualityGate.getThreshold());\n            }\n        }\n\n        return status;\n    }", "signature": "QualityGateStatus evaluate(final IssuesStatistics report, final FormattedLogger logger)", "full_signature": "public QualityGateStatus evaluate(final IssuesStatistics report, final FormattedLogger logger)", "class_method_signature": "QualityGateEvaluator.evaluate(final IssuesStatistics report, final FormattedLogger logger)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "print", "apply", "getActualSizeMethodReference", "getThreshold", "print", "getStatus", "getName", "getThreshold", "isWorseThan", "getStatus", "getStatus", "print", "getName", "getThreshold"]}, "repository": {"repo_id": 152814648, "url": "https://github.com/jenkinsci/warnings-ng-plugin", "stars": 158, "created": "10/12/2018 10:41:36 PM +00:00", "updates": "2020-01-27T14:00:03+00:00", "fork": "False", "license": "licensed"}}