{"test_class": {"identifier": "TestSchedule", "superclass": "", "interfaces": "", "fields": [], "file": "CodeSmells/src/reggie/TestSchedule.java"}, "test_case": {"identifier": "testOfferingCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testOfferingCreate() throws Exception {\n\t\tCourse c = Course.create(\"CS202\", 2);\n\t\tOffering offering = Offering.create(c, \"M10\");\n\t\tassertNotNull(offering);\n\t}", "signature": "void testOfferingCreate()", "full_signature": "@Test public void testOfferingCreate()", "class_method_signature": "TestSchedule.testOfferingCreate()", "testcase": true, "constructor": false, "invocations": ["create", "create", "assertNotNull"]}, "focal_class": {"identifier": "Schedule", "superclass": "", "interfaces": "", "fields": [{"original_string": "String name;", "modifier": "", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "int credits = 0;", "modifier": "", "type": "int", "declarator": "credits = 0", "var_name": "credits"}, {"original_string": "static final int minCredits = 12;", "modifier": "static final", "type": "int", "declarator": "minCredits = 12", "var_name": "minCredits"}, {"original_string": "static final int maxCredits = 18;", "modifier": "static final", "type": "int", "declarator": "maxCredits = 18", "var_name": "maxCredits"}, {"original_string": "boolean overloadAuthorized = false;", "modifier": "", "type": "boolean", "declarator": "overloadAuthorized = false", "var_name": "overloadAuthorized"}, {"original_string": "ArrayList<Offering> schedule = new ArrayList<Offering>();", "modifier": "", "type": "ArrayList<Offering>", "declarator": "schedule = new ArrayList<Offering>()", "var_name": "schedule"}, {"original_string": "static String url = \"jdbc:odbc:Reggie\";", "modifier": "static", "type": "String", "declarator": "url = \"jdbc:odbc:Reggie\"", "var_name": "url"}], "methods": [{"identifier": "deleteAll", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void deleteAll()", "full_signature": "public static void deleteAll()", "class_method_signature": "Schedule.deleteAll()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name)", "modifiers": "public static", "return": "Schedule", "signature": "Schedule create(String name)", "full_signature": "public static Schedule create(String name)", "class_method_signature": "Schedule.create(String name)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(String name)", "modifiers": "public static", "return": "Schedule", "signature": "Schedule find(String name)", "full_signature": "public static Schedule find(String name)", "class_method_signature": "Schedule.find(String name)", "testcase": false, "constructor": false}, {"identifier": "all", "parameters": "()", "modifiers": "public static", "return": "Collection<Schedule>", "signature": "Collection<Schedule> all()", "full_signature": "public static Collection<Schedule> all()", "class_method_signature": "Schedule.all()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void update()", "full_signature": "public void update()", "class_method_signature": "Schedule.update()", "testcase": false, "constructor": false}, {"identifier": "Schedule", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " Schedule(String name)", "full_signature": "public  Schedule(String name)", "class_method_signature": "Schedule.Schedule(String name)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(Offering offering)", "modifiers": "public", "return": "void", "signature": "void add(Offering offering)", "full_signature": "public void add(Offering offering)", "class_method_signature": "Schedule.add(Offering offering)", "testcase": false, "constructor": false}, {"identifier": "authorizeOverload", "parameters": "(boolean authorized)", "modifiers": "public", "return": "void", "signature": "void authorizeOverload(boolean authorized)", "full_signature": "public void authorizeOverload(boolean authorized)", "class_method_signature": "Schedule.authorizeOverload(boolean authorized)", "testcase": false, "constructor": false}, {"identifier": "analysis", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> analysis()", "full_signature": "public List<String> analysis()", "class_method_signature": "Schedule.analysis()", "testcase": false, "constructor": false}, {"identifier": "checkDuplicateCourses", "parameters": "(ArrayList<String> analysis)", "modifiers": "public", "return": "void", "signature": "void checkDuplicateCourses(ArrayList<String> analysis)", "full_signature": "public void checkDuplicateCourses(ArrayList<String> analysis)", "class_method_signature": "Schedule.checkDuplicateCourses(ArrayList<String> analysis)", "testcase": false, "constructor": false}, {"identifier": "checkOverlap", "parameters": "(ArrayList<String> analysis)", "modifiers": "public", "return": "void", "signature": "void checkOverlap(ArrayList<String> analysis)", "full_signature": "public void checkOverlap(ArrayList<String> analysis)", "class_method_signature": "Schedule.checkOverlap(ArrayList<String> analysis)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Schedule.toString()", "testcase": false, "constructor": false}], "file": "CodeSmells/src/reggie/Schedule.java"}, "focal_method": {"identifier": "create", "parameters": "(String name)", "modifiers": "public static", "return": "Schedule", "body": "public static Schedule create(String name) throws Exception {\n        Connection conn = null;\n\n        try {\n            conn = DriverManager.getConnection(url, \"\", \"\");\n            Statement statement = conn.createStatement();\n\n            statement.executeUpdate(\n\t\t\"DELETE FROM schedule WHERE name = '\" + name + \"';\");\n            return new Schedule(name);\n        } finally {\n            try { conn.close(); } catch (Exception ignored) {}\n        }\n    }", "signature": "Schedule create(String name)", "full_signature": "public static Schedule create(String name)", "class_method_signature": "Schedule.create(String name)", "testcase": false, "constructor": false, "invocations": ["getConnection", "createStatement", "executeUpdate", "close"]}, "repository": {"repo_id": 643499, "url": "https://github.com/unclebob/Welc", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 210, "license": "licensed"}}