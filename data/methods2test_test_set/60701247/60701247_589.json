{"test_class": {"identifier": "StateChartTest", "superclass": "", "interfaces": "", "fields": [], "file": "adt-ui/src/test/java/com/android/tools/adtui/chart/statechart/StateChartTest.java"}, "test_case": {"identifier": "testStateChartWithDefaultTextConverterUsesToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testStateChartWithDefaultTextConverterUsesToString() {\n    StateChartModel<ToStringTestClass> model = new StateChartModel<>();\n    DataSeries<ToStringTestClass> dataSeries = (range) -> ImmutableList.of(\n      new SeriesData<>(0, new ToStringTestClass(\"Test\")),\n      new SeriesData<>(1000, new ToStringTestClass(\"Test2\")));\n\n    model.addSeries(new RangedSeries<>(new Range(0, 100), dataSeries));\n    StateChart<ToStringTestClass> stateChart = new StateChart<>(model, new StateChartColorProvider<ToStringTestClass>() {\n      @NotNull\n      @Override\n      public Color getColor(boolean isMouseOver, @NotNull ToStringTestClass value) {\n        return Color.BLACK;\n      }\n    });\n    stateChart.setSize(100, 100);\n    stateChart.setRenderMode(StateChart.RenderMode.TEXT);\n\n    Graphics2D fakeGraphics = mock(Graphics2D.class);\n    when(fakeGraphics.create()).thenReturn(fakeGraphics);\n    stateChart.paint(fakeGraphics);\n    verify(fakeGraphics, times(1)).drawString(eq(\"Test\"), anyFloat(), anyFloat());\n  }", "signature": "void testStateChartWithDefaultTextConverterUsesToString()", "full_signature": "@Test public void testStateChartWithDefaultTextConverterUsesToString()", "class_method_signature": "StateChartTest.testStateChartWithDefaultTextConverterUsesToString()", "testcase": true, "constructor": false, "invocations": ["of", "addSeries", "setSize", "setRenderMode", "mock", "thenReturn", "when", "create", "paint", "drawString", "verify", "times", "eq", "anyFloat", "anyFloat"]}, "focal_class": {"identifier": "StateChart", "superclass": "extends AnimatedComponent", "interfaces": "", "fields": [{"original_string": "private static final int INVALID_INDEX = -1;", "modifier": "private static final", "type": "int", "declarator": "INVALID_INDEX = -1", "var_name": "INVALID_INDEX"}, {"original_string": "private static final int TEXT_PADDING = 3;", "modifier": "private static final", "type": "int", "declarator": "TEXT_PADDING = 3", "var_name": "TEXT_PADDING"}, {"original_string": "private StateChartModel<T> myModel;", "modifier": "private", "type": "StateChartModel<T>", "declarator": "myModel", "var_name": "myModel"}, {"original_string": "@NotNull\n  private final StateChartColorProvider<T> myColorProvider;", "modifier": "@NotNull\n  private final", "type": "StateChartColorProvider<T>", "declarator": "myColorProvider", "var_name": "myColorProvider"}, {"original_string": "private float myHeightGap;", "modifier": "private", "type": "float", "declarator": "myHeightGap", "var_name": "myHeightGap"}, {"original_string": "@NotNull\n  private RenderMode myRenderMode;", "modifier": "@NotNull\n  private", "type": "RenderMode", "declarator": "myRenderMode", "var_name": "myRenderMode"}, {"original_string": "@NotNull\n  private final StateChartConfig<T> myConfig;", "modifier": "@NotNull\n  private final", "type": "StateChartConfig<T>", "declarator": "myConfig", "var_name": "myConfig"}, {"original_string": "private boolean myNeedsTransformToViewSpace;", "modifier": "private", "type": "boolean", "declarator": "myNeedsTransformToViewSpace", "var_name": "myNeedsTransformToViewSpace"}, {"original_string": "@NotNull\n  private final StateChartTextConverter<T> myTextConverter;", "modifier": "@NotNull\n  private final", "type": "StateChartTextConverter<T>", "declarator": "myTextConverter", "var_name": "myTextConverter"}, {"original_string": "private final List<Rectangle2D.Float> myRectangles = new ArrayList<>();", "modifier": "private final", "type": "List<Rectangle2D.Float>", "declarator": "myRectangles = new ArrayList<>()", "var_name": "myRectangles"}, {"original_string": "private final List<T> myRectangleValues = new ArrayList<>();", "modifier": "private final", "type": "List<T>", "declarator": "myRectangleValues = new ArrayList<>()", "var_name": "myRectangleValues"}, {"original_string": "@Nullable\n  private Object myMouseEventSource = null;", "modifier": "@Nullable\n  private", "type": "Object", "declarator": "myMouseEventSource = null", "var_name": "myMouseEventSource"}, {"original_string": "@Nullable\n  private Point myMousePoint = null;", "modifier": "@Nullable\n  private", "type": "Point", "declarator": "myMousePoint = null", "var_name": "myMousePoint"}, {"original_string": "@Nullable\n  private Point myRowPoint = null;", "modifier": "@Nullable\n  private", "type": "Point", "declarator": "myRowPoint = null", "var_name": "myRowPoint"}, {"original_string": "private int myRowIndex = INVALID_INDEX;", "modifier": "private", "type": "int", "declarator": "myRowIndex = INVALID_INDEX", "var_name": "myRowIndex"}], "methods": [{"identifier": "StateChart", "parameters": "(@NotNull StateChartModel<T> model, @NotNull Map<T, Color> colors)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " StateChart(@NotNull StateChartModel<T> model, @NotNull Map<T, Color> colors)", "full_signature": "@VisibleForTesting public  StateChart(@NotNull StateChartModel<T> model, @NotNull Map<T, Color> colors)", "class_method_signature": "StateChart.StateChart(@NotNull StateChartModel<T> model, @NotNull Map<T, Color> colors)", "testcase": false, "constructor": true}, {"identifier": "StateChart", "parameters": "(@NotNull StateChartModel<T> model, @NotNull StateChartColorProvider<T> colorMapping)", "modifiers": "public", "return": "", "signature": " StateChart(@NotNull StateChartModel<T> model, @NotNull StateChartColorProvider<T> colorMapping)", "full_signature": "public  StateChart(@NotNull StateChartModel<T> model, @NotNull StateChartColorProvider<T> colorMapping)", "class_method_signature": "StateChart.StateChart(@NotNull StateChartModel<T> model, @NotNull StateChartColorProvider<T> colorMapping)", "testcase": false, "constructor": true}, {"identifier": "StateChart", "parameters": "(@NotNull StateChartModel<T> model,\n                    @NotNull StateChartColorProvider<T> colorMapping,\n                    StateChartTextConverter<T> textConverter)", "modifiers": "public", "return": "", "signature": " StateChart(@NotNull StateChartModel<T> model,\n                    @NotNull StateChartColorProvider<T> colorMapping,\n                    StateChartTextConverter<T> textConverter)", "full_signature": "public  StateChart(@NotNull StateChartModel<T> model,\n                    @NotNull StateChartColorProvider<T> colorMapping,\n                    StateChartTextConverter<T> textConverter)", "class_method_signature": "StateChart.StateChart(@NotNull StateChartModel<T> model,\n                    @NotNull StateChartColorProvider<T> colorMapping,\n                    StateChartTextConverter<T> textConverter)", "testcase": false, "constructor": true}, {"identifier": "StateChart", "parameters": "(@NotNull StateChartModel<T> model,\n                    @NotNull StateChartConfig<T> config,\n                    @NotNull StateChartColorProvider<T> colorMapping)", "modifiers": "public", "return": "", "signature": " StateChart(@NotNull StateChartModel<T> model,\n                    @NotNull StateChartConfig<T> config,\n                    @NotNull StateChartColorProvider<T> colorMapping)", "full_signature": "public  StateChart(@NotNull StateChartModel<T> model,\n                    @NotNull StateChartConfig<T> config,\n                    @NotNull StateChartColorProvider<T> colorMapping)", "class_method_signature": "StateChart.StateChart(@NotNull StateChartModel<T> model,\n                    @NotNull StateChartConfig<T> config,\n                    @NotNull StateChartColorProvider<T> colorMapping)", "testcase": false, "constructor": true}, {"identifier": "StateChart", "parameters": "(@NotNull StateChartModel<T> model,\n                    @NotNull StateChartConfig<T> config,\n                    @NotNull StateChartColorProvider<T> colorMapping,\n                    @NotNull StateChartTextConverter<T> textConverter)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " StateChart(@NotNull StateChartModel<T> model,\n                    @NotNull StateChartConfig<T> config,\n                    @NotNull StateChartColorProvider<T> colorMapping,\n                    @NotNull StateChartTextConverter<T> textConverter)", "full_signature": "@VisibleForTesting public  StateChart(@NotNull StateChartModel<T> model,\n                    @NotNull StateChartConfig<T> config,\n                    @NotNull StateChartColorProvider<T> colorMapping,\n                    @NotNull StateChartTextConverter<T> textConverter)", "class_method_signature": "StateChart.StateChart(@NotNull StateChartModel<T> model,\n                    @NotNull StateChartConfig<T> config,\n                    @NotNull StateChartColorProvider<T> colorMapping,\n                    @NotNull StateChartTextConverter<T> textConverter)", "testcase": false, "constructor": true}, {"identifier": "setModel", "parameters": "(@NotNull StateChartModel<T> model)", "modifiers": "public", "return": "void", "signature": "void setModel(@NotNull StateChartModel<T> model)", "full_signature": "public void setModel(@NotNull StateChartModel<T> model)", "class_method_signature": "StateChart.setModel(@NotNull StateChartModel<T> model)", "testcase": false, "constructor": false}, {"identifier": "modelChanged", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void modelChanged()", "full_signature": "private void modelChanged()", "class_method_signature": "StateChart.modelChanged()", "testcase": false, "constructor": false}, {"identifier": "setRenderMode", "parameters": "(@NotNull RenderMode mode)", "modifiers": "public", "return": "void", "signature": "void setRenderMode(@NotNull RenderMode mode)", "full_signature": "public void setRenderMode(@NotNull RenderMode mode)", "class_method_signature": "StateChart.setRenderMode(@NotNull RenderMode mode)", "testcase": false, "constructor": false}, {"identifier": "setHeightGap", "parameters": "(float gap)", "modifiers": "public", "return": "void", "signature": "void setHeightGap(float gap)", "full_signature": "public void setHeightGap(float gap)", "class_method_signature": "StateChart.setHeightGap(float gap)", "testcase": false, "constructor": false}, {"identifier": "clearRectangles", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clearRectangles()", "full_signature": "private void clearRectangles()", "class_method_signature": "StateChart.clearRectangles()", "testcase": false, "constructor": false}, {"identifier": "addRectangleDelta", "parameters": "(@NotNull T value,\n                                 double previousX,\n                                 double currentX,\n                                 double minX,\n                                 double invRange,\n                                 float rectY,\n                                 float height)", "modifiers": "private", "return": "void", "signature": "void addRectangleDelta(@NotNull T value,\n                                 double previousX,\n                                 double currentX,\n                                 double minX,\n                                 double invRange,\n                                 float rectY,\n                                 float height)", "full_signature": "private void addRectangleDelta(@NotNull T value,\n                                 double previousX,\n                                 double currentX,\n                                 double minX,\n                                 double invRange,\n                                 float rectY,\n                                 float height)", "class_method_signature": "StateChart.addRectangleDelta(@NotNull T value,\n                                 double previousX,\n                                 double currentX,\n                                 double minX,\n                                 double invRange,\n                                 float rectY,\n                                 float height)", "testcase": false, "constructor": false}, {"identifier": "transformToViewSpace", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void transformToViewSpace()", "full_signature": "private void transformToViewSpace()", "class_method_signature": "StateChart.transformToViewSpace()", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2d, Dimension dim)", "modifiers": "@Override protected", "return": "void", "signature": "void draw(Graphics2D g2d, Dimension dim)", "full_signature": "@Override protected void draw(Graphics2D g2d, Dimension dim)", "class_method_signature": "StateChart.draw(Graphics2D g2d, Dimension dim)", "testcase": false, "constructor": false}, {"identifier": "registerMouseEvents", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerMouseEvents()", "full_signature": "private void registerMouseEvents()", "class_method_signature": "StateChart.registerMouseEvents()", "testcase": false, "constructor": false}, {"identifier": "renderUnion", "parameters": "(@NotNull Point containerOffset)", "modifiers": "private", "return": "void", "signature": "void renderUnion(@NotNull Point containerOffset)", "full_signature": "private void renderUnion(@NotNull Point containerOffset)", "class_method_signature": "StateChart.renderUnion(@NotNull Point containerOffset)", "testcase": false, "constructor": false}, {"identifier": "getMouseRectanglesUnion", "parameters": "(@NotNull Point mousePoint)", "modifiers": "@Nullable private", "return": "Rectangle2D.Float", "signature": "Rectangle2D.Float getMouseRectanglesUnion(@NotNull Point mousePoint)", "full_signature": "@Nullable private Rectangle2D.Float getMouseRectanglesUnion(@NotNull Point mousePoint)", "class_method_signature": "StateChart.getMouseRectanglesUnion(@NotNull Point mousePoint)", "testcase": false, "constructor": false}], "file": "adt-ui/src/main/java/com/android/tools/adtui/chart/statechart/StateChart.java"}, "focal_method": {"identifier": "setRenderMode", "parameters": "(@NotNull RenderMode mode)", "modifiers": "public", "return": "void", "body": "public void setRenderMode(@NotNull RenderMode mode) {\n    myRenderMode = mode;\n  }", "signature": "void setRenderMode(@NotNull RenderMode mode)", "full_signature": "public void setRenderMode(@NotNull RenderMode mode)", "class_method_signature": "StateChart.setRenderMode(@NotNull RenderMode mode)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}