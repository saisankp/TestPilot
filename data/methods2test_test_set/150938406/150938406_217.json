{"test_class": {"identifier": "ModelConverterUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ParamInfo<String> SOME_PARAM = ParamInfoFactory\n        .createParamInfo(\"key\", String.class)\n        .build();", "modifier": "private static final", "type": "ParamInfo<String>", "declarator": "SOME_PARAM = ParamInfoFactory\n        .createParamInfo(\"key\", String.class)\n        .build()", "var_name": "SOME_PARAM"}], "file": "core/src/test/java/com/alibaba/alink/common/model/ModelConverterUtilsTest.java"}, "test_case": {"identifier": "testAppendDataRows", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAppendDataRows() throws Exception {\n        List<String> stringList = new ArrayList<>();\n        stringList.add(\"apple\");\n        stringList.add(\"banana\");\n        MockCollector collector = new MockCollector();\n        ModelConverterUtils.appendDataRows(stringList, collector, 2);\n        Row row1 = collector.buffer.get(0);\n        Assert.assertEquals(row1.getArity(), 2);\n        Assert.assertEquals(row1.getField(0), ModelConverterUtils.MAX_NUM_SLICES);\n        Assert.assertEquals(row1.getField(1), \"apple\");\n        Row row2 = collector.buffer.get(1);\n        Assert.assertEquals(row2.getArity(), 2);\n        Assert.assertEquals(row2.getField(0), 2 * ModelConverterUtils.MAX_NUM_SLICES);\n        Assert.assertEquals(row2.getField(1), \"banana\");\n    }", "signature": "void testAppendDataRows()", "full_signature": "@Test public void testAppendDataRows()", "class_method_signature": "ModelConverterUtilsTest.testAppendDataRows()", "testcase": true, "constructor": false, "invocations": ["add", "add", "appendDataRows", "get", "assertEquals", "getArity", "assertEquals", "getField", "assertEquals", "getField", "get", "assertEquals", "getArity", "assertEquals", "getField", "assertEquals", "getField"]}, "focal_class": {"identifier": "ModelConverterUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int SEGMENT_SIZE = 32 * 1024;", "modifier": "static final", "type": "int", "declarator": "SEGMENT_SIZE = 32 * 1024", "var_name": "SEGMENT_SIZE"}, {"original_string": "static final long MAX_NUM_SLICES = 1024L * 1024L;", "modifier": "static final", "type": "long", "declarator": "MAX_NUM_SLICES = 1024L * 1024L", "var_name": "MAX_NUM_SLICES"}], "methods": [{"identifier": "appendMetaRow", "parameters": "(Params meta, Collector<Row> collector, final int numFields)", "modifiers": "static", "return": "void", "signature": "void appendMetaRow(Params meta, Collector<Row> collector, final int numFields)", "full_signature": "static void appendMetaRow(Params meta, Collector<Row> collector, final int numFields)", "class_method_signature": "ModelConverterUtils.appendMetaRow(Params meta, Collector<Row> collector, final int numFields)", "testcase": false, "constructor": false}, {"identifier": "appendDataRows", "parameters": "(Iterable<String> data, Collector<Row> collector, final int numFields)", "modifiers": "static", "return": "void", "signature": "void appendDataRows(Iterable<String> data, Collector<Row> collector, final int numFields)", "full_signature": "static void appendDataRows(Iterable<String> data, Collector<Row> collector, final int numFields)", "class_method_signature": "ModelConverterUtils.appendDataRows(Iterable<String> data, Collector<Row> collector, final int numFields)", "testcase": false, "constructor": false}, {"identifier": "appendAuxiliaryData", "parameters": "(Iterable<T> auxData, Collector<Row> collector, final int numFields)", "modifiers": "static", "return": "void", "signature": "void appendAuxiliaryData(Iterable<T> auxData, Collector<Row> collector, final int numFields)", "full_signature": "static void appendAuxiliaryData(Iterable<T> auxData, Collector<Row> collector, final int numFields)", "class_method_signature": "ModelConverterUtils.appendAuxiliaryData(Iterable<T> auxData, Collector<Row> collector, final int numFields)", "testcase": false, "constructor": false}, {"identifier": "extractModelMetaAndData", "parameters": "(List<Row> rows)", "modifiers": "static", "return": "Tuple2<Params, Iterable<String>>", "signature": "Tuple2<Params, Iterable<String>> extractModelMetaAndData(List<Row> rows)", "full_signature": "static Tuple2<Params, Iterable<String>> extractModelMetaAndData(List<Row> rows)", "class_method_signature": "ModelConverterUtils.extractModelMetaAndData(List<Row> rows)", "testcase": false, "constructor": false}, {"identifier": "extractAuxiliaryData", "parameters": "(List<Row> rows, boolean isLabel)", "modifiers": "static", "return": "Iterable<T>", "signature": "Iterable<T> extractAuxiliaryData(List<Row> rows, boolean isLabel)", "full_signature": "static Iterable<T> extractAuxiliaryData(List<Row> rows, boolean isLabel)", "class_method_signature": "ModelConverterUtils.extractAuxiliaryData(List<Row> rows, boolean isLabel)", "testcase": false, "constructor": false}, {"identifier": "appendStringData", "parameters": "(String data, Collector<Row> collector,\n                                         final int numFields, int pos)", "modifiers": "private static", "return": "void", "signature": "void appendStringData(String data, Collector<Row> collector,\n                                         final int numFields, int pos)", "full_signature": "private static void appendStringData(String data, Collector<Row> collector,\n                                         final int numFields, int pos)", "class_method_signature": "ModelConverterUtils.appendStringData(String data, Collector<Row> collector,\n                                         final int numFields, int pos)", "testcase": false, "constructor": false}, {"identifier": "getModelId", "parameters": "(int stringIndex, int sliceIndex)", "modifiers": "private static", "return": "long", "signature": "long getModelId(int stringIndex, int sliceIndex)", "full_signature": "private static long getModelId(int stringIndex, int sliceIndex)", "class_method_signature": "ModelConverterUtils.getModelId(int stringIndex, int sliceIndex)", "testcase": false, "constructor": false}, {"identifier": "getStringIndex", "parameters": "(long modelId)", "modifiers": "private static", "return": "int", "signature": "int getStringIndex(long modelId)", "full_signature": "private static int getStringIndex(long modelId)", "class_method_signature": "ModelConverterUtils.getStringIndex(long modelId)", "testcase": false, "constructor": false}, {"identifier": "orderModelRows", "parameters": "(List<Row> rows)", "modifiers": "private static", "return": "Integer[]", "signature": "Integer[] orderModelRows(List<Row> rows)", "full_signature": "private static Integer[] orderModelRows(List<Row> rows)", "class_method_signature": "ModelConverterUtils.orderModelRows(List<Row> rows)", "testcase": false, "constructor": false}, {"identifier": "mergeString", "parameters": "(List<String> strings)", "modifiers": "private static", "return": "String", "signature": "String mergeString(List<String> strings)", "full_signature": "private static String mergeString(List<String> strings)", "class_method_signature": "ModelConverterUtils.mergeString(List<String> strings)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/common/model/ModelConverterUtils.java"}, "focal_method": {"identifier": "appendDataRows", "parameters": "(Iterable<String> data, Collector<Row> collector, final int numFields)", "modifiers": "static", "return": "void", "body": "static void appendDataRows(Iterable<String> data, Collector<Row> collector, final int numFields) {\n        if (data != null) {\n            int index = 0;\n            for (String s : data) {\n                appendStringData(s, collector, numFields, index + 1);\n                index++;\n            }\n        }\n    }", "signature": "void appendDataRows(Iterable<String> data, Collector<Row> collector, final int numFields)", "full_signature": "static void appendDataRows(Iterable<String> data, Collector<Row> collector, final int numFields)", "class_method_signature": "ModelConverterUtils.appendDataRows(Iterable<String> data, Collector<Row> collector, final int numFields)", "testcase": false, "constructor": false, "invocations": ["appendStringData"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}