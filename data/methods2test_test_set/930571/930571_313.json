{"test_class": {"identifier": "SingletonRuntimeManagerTest", "superclass": "extends AbstractBaseTest", "interfaces": "", "fields": [{"original_string": "private PoolingDataSourceWrapper pds;", "modifier": "private", "type": "PoolingDataSourceWrapper", "declarator": "pds", "var_name": "pds"}, {"original_string": "private UserGroupCallback userGroupCallback;", "modifier": "private", "type": "UserGroupCallback", "declarator": "userGroupCallback", "var_name": "userGroupCallback"}, {"original_string": "private RuntimeManager manager;", "modifier": "private", "type": "RuntimeManager", "declarator": "manager", "var_name": "manager"}], "file": "jbpm-runtime-manager/src/test/java/org/jbpm/runtime/manager/impl/SingletonRuntimeManagerTest.java"}, "test_case": {"identifier": "testCreationOfDuplicatedManagers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreationOfDuplicatedManagers() {\n        RuntimeEnvironment environment = RuntimeEnvironmentBuilder.Factory.get()\n    \t\t\t.newDefaultBuilder()\n                .userGroupCallback(userGroupCallback)\n                .addAsset(ResourceFactory.newClassPathResource(\"BPMN2-ScriptTask.bpmn2\"), ResourceType.BPMN2)\n                .get();\n        \n        manager = RuntimeManagerFactory.Factory.get().newSingletonRuntimeManager(environment);        \n        assertNotNull(manager);\n        try {\n            RuntimeManagerFactory.Factory.get().newSingletonRuntimeManager(environment);\n            fail(\"Should fail as it's not allowed to have singleton manager with same identifier\");\n        } catch (IllegalStateException e) {\n            \n        }\n        manager.close();\n        \n        // now it is possible to load the manager again\n        manager = RuntimeManagerFactory.Factory.get().newSingletonRuntimeManager(environment);        \n        assertNotNull(manager);\n    }", "signature": "void testCreationOfDuplicatedManagers()", "full_signature": "@Test public void testCreationOfDuplicatedManagers()", "class_method_signature": "SingletonRuntimeManagerTest.testCreationOfDuplicatedManagers()", "testcase": true, "constructor": false, "invocations": ["get", "addAsset", "userGroupCallback", "newDefaultBuilder", "get", "newClassPathResource", "newSingletonRuntimeManager", "get", "assertNotNull", "newSingletonRuntimeManager", "get", "fail", "close", "newSingletonRuntimeManager", "get", "assertNotNull"]}, "focal_class": {"identifier": "SingletonRuntimeManager", "superclass": "extends AbstractRuntimeManager", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SingletonRuntimeManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SingletonRuntimeManager.class)", "var_name": "logger"}, {"original_string": "private RuntimeEngine singleton;", "modifier": "private", "type": "RuntimeEngine", "declarator": "singleton", "var_name": "singleton"}, {"original_string": "private SessionFactory factory;", "modifier": "private", "type": "SessionFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private TaskServiceFactory taskServiceFactory;", "modifier": "private", "type": "TaskServiceFactory", "declarator": "taskServiceFactory", "var_name": "taskServiceFactory"}], "methods": [{"identifier": "SingletonRuntimeManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " SingletonRuntimeManager()", "full_signature": "public  SingletonRuntimeManager()", "class_method_signature": "SingletonRuntimeManager.SingletonRuntimeManager()", "testcase": false, "constructor": true}, {"identifier": "SingletonRuntimeManager", "parameters": "(RuntimeEnvironment environment, SessionFactory factory, TaskServiceFactory taskServiceFactory, String identifier)", "modifiers": "public", "return": "", "signature": " SingletonRuntimeManager(RuntimeEnvironment environment, SessionFactory factory, TaskServiceFactory taskServiceFactory, String identifier)", "full_signature": "public  SingletonRuntimeManager(RuntimeEnvironment environment, SessionFactory factory, TaskServiceFactory taskServiceFactory, String identifier)", "class_method_signature": "SingletonRuntimeManager.SingletonRuntimeManager(RuntimeEnvironment environment, SessionFactory factory, TaskServiceFactory taskServiceFactory, String identifier)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "SingletonRuntimeManager.init()", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void activate()", "full_signature": "@Override public void activate()", "class_method_signature": "SingletonRuntimeManager.activate()", "testcase": false, "constructor": false}, {"identifier": "deactivate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void deactivate()", "full_signature": "@Override public void deactivate()", "class_method_signature": "SingletonRuntimeManager.deactivate()", "testcase": false, "constructor": false}, {"identifier": "getRuntimeEngine", "parameters": "(Context context)", "modifiers": "@SuppressWarnings(\"rawtypes\") @Override public", "return": "RuntimeEngine", "signature": "RuntimeEngine getRuntimeEngine(Context context)", "full_signature": "@SuppressWarnings(\"rawtypes\") @Override public RuntimeEngine getRuntimeEngine(Context context)", "class_method_signature": "SingletonRuntimeManager.getRuntimeEngine(Context context)", "testcase": false, "constructor": false}, {"identifier": "signalEvent", "parameters": "(String type, Object event)", "modifiers": "@Override public", "return": "void", "signature": "void signalEvent(String type, Object event)", "full_signature": "@Override public void signalEvent(String type, Object event)", "class_method_signature": "SingletonRuntimeManager.signalEvent(String type, Object event)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(KieSession ksession, Context<?> context)", "modifiers": "@Override public", "return": "void", "signature": "void validate(KieSession ksession, Context<?> context)", "full_signature": "@Override public void validate(KieSession ksession, Context<?> context)", "class_method_signature": "SingletonRuntimeManager.validate(KieSession ksession, Context<?> context)", "testcase": false, "constructor": false}, {"identifier": "disposeRuntimeEngine", "parameters": "(RuntimeEngine runtime)", "modifiers": "@Override public", "return": "void", "signature": "void disposeRuntimeEngine(RuntimeEngine runtime)", "full_signature": "@Override public void disposeRuntimeEngine(RuntimeEngine runtime)", "class_method_signature": "SingletonRuntimeManager.disposeRuntimeEngine(RuntimeEngine runtime)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SingletonRuntimeManager.close()", "testcase": false, "constructor": false}, {"identifier": "getPersistedFile", "parameters": "(String location, String identifier)", "modifiers": "private", "return": "File", "signature": "File getPersistedFile(String location, String identifier)", "full_signature": "private File getPersistedFile(String location, String identifier)", "class_method_signature": "SingletonRuntimeManager.getPersistedFile(String location, String identifier)", "testcase": false, "constructor": false}, {"identifier": "getPersistedSessionId", "parameters": "(String location, String identifier)", "modifiers": "protected", "return": "Long", "signature": "Long getPersistedSessionId(String location, String identifier)", "full_signature": "protected Long getPersistedSessionId(String location, String identifier)", "class_method_signature": "SingletonRuntimeManager.getPersistedSessionId(String location, String identifier)", "testcase": false, "constructor": false}, {"identifier": "persistSessionId", "parameters": "(String location, String identifier, Long ksessionId)", "modifiers": "protected", "return": "void", "signature": "void persistSessionId(String location, String identifier, Long ksessionId)", "full_signature": "protected void persistSessionId(String location, String identifier, Long ksessionId)", "class_method_signature": "SingletonRuntimeManager.persistSessionId(String location, String identifier, Long ksessionId)", "testcase": false, "constructor": false}, {"identifier": "getLocation", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getLocation()", "full_signature": "protected String getLocation()", "class_method_signature": "SingletonRuntimeManager.getLocation()", "testcase": false, "constructor": false}, {"identifier": "getFactory", "parameters": "()", "modifiers": "public", "return": "SessionFactory", "signature": "SessionFactory getFactory()", "full_signature": "public SessionFactory getFactory()", "class_method_signature": "SingletonRuntimeManager.getFactory()", "testcase": false, "constructor": false}, {"identifier": "setFactory", "parameters": "(SessionFactory factory)", "modifiers": "public", "return": "void", "signature": "void setFactory(SessionFactory factory)", "full_signature": "public void setFactory(SessionFactory factory)", "class_method_signature": "SingletonRuntimeManager.setFactory(SessionFactory factory)", "testcase": false, "constructor": false}, {"identifier": "getTaskServiceFactory", "parameters": "()", "modifiers": "public", "return": "TaskServiceFactory", "signature": "TaskServiceFactory getTaskServiceFactory()", "full_signature": "public TaskServiceFactory getTaskServiceFactory()", "class_method_signature": "SingletonRuntimeManager.getTaskServiceFactory()", "testcase": false, "constructor": false}, {"identifier": "setTaskServiceFactory", "parameters": "(TaskServiceFactory taskServiceFactory)", "modifiers": "public", "return": "void", "signature": "void setTaskServiceFactory(TaskServiceFactory taskServiceFactory)", "full_signature": "public void setTaskServiceFactory(TaskServiceFactory taskServiceFactory)", "class_method_signature": "SingletonRuntimeManager.setTaskServiceFactory(TaskServiceFactory taskServiceFactory)", "testcase": false, "constructor": false}], "file": "jbpm-runtime-manager/src/main/java/org/jbpm/runtime/manager/impl/SingletonRuntimeManager.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void close() {\n        if (singleton == null) {\n            return;\n        }\n        super.close();\n        // dispose singleton session only when manager is closing\n        try {\n        \tremoveRuntimeFromTaskService();\n        } catch (UnsupportedOperationException e) {\n        \tlogger.debug(\"Exception while closing task service, was it initialized? {}\", e.getMessage());\n        }\n        if (this.singleton instanceof Disposable) {\n            ((Disposable) this.singleton).dispose();\n        }\n        factory.close();\n        this.singleton = null;   \n    }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SingletonRuntimeManager.close()", "testcase": false, "constructor": false, "invocations": ["close", "removeRuntimeFromTaskService", "debug", "getMessage", "dispose", "close"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}