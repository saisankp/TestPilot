{"test_class": {"identifier": "OuterJoinOperatorBaseTest", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private final FlatJoinFunction<String, String, String> joiner = new FlatJoinFunction<String, String, String>() {\n\t\t@Override\n\t\tpublic void join(String first, String second, Collector<String> out) throws Exception {\n\t\t\tout.collect(Joiner.on(',').join(String.valueOf(first), String.valueOf(second)));\n\t\t}\n\t};", "modifier": "private final", "type": "FlatJoinFunction<String, String, String>", "declarator": "joiner = new FlatJoinFunction<String, String, String>() {\n\t\t@Override\n\t\tpublic void join(String first, String second, Collector<String> out) throws Exception {\n\t\t\tout.collect(Joiner.on(',').join(String.valueOf(first), String.valueOf(second)));\n\t\t}\n\t}", "var_name": "joiner"}, {"original_string": "@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n\tprivate final OuterJoinOperatorBase<String, String, String, FlatJoinFunction<String, String, String>> baseOperator =\n\t\t\tnew OuterJoinOperatorBase(joiner,\n\t\t\t\t\tnew BinaryOperatorInformation(BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO,\n\t\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO), new int[0], new int[0], \"TestJoiner\", null);", "modifier": "@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n\tprivate final", "type": "OuterJoinOperatorBase<String, String, String, FlatJoinFunction<String, String, String>>", "declarator": "baseOperator =\n\t\t\tnew OuterJoinOperatorBase(joiner,\n\t\t\t\t\tnew BinaryOperatorInformation(BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO,\n\t\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO), new int[0], new int[0], \"TestJoiner\", null)", "var_name": "baseOperator"}], "file": "flink-core/src/test/java/org/apache/flink/api/common/operators/base/OuterJoinOperatorBaseTest.java"}, "test_case": {"identifier": "testRightOuterJoin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRightOuterJoin() throws Exception {\n\t\tfinal List<String> leftInput = Arrays.asList(\"foo\", \"foo\", \"foo\", \"bar\",\"bar\", \"foobar\", \"foobar\");\n\t\tfinal List<String> rightInput = Arrays.asList(\"foo\", \"foo\", \"bar\", \"bar\", \"bar\", \"barfoo\", \"barfoo\");\n\t\tbaseOperator.setOuterJoinType(OuterJoinOperatorBase.OuterJoinType.RIGHT);\n\t\tList<String> expected = Arrays.asList(\"bar,bar\", \"bar,bar\", \"bar,bar\", \"bar,bar\", \"bar,bar\", \"bar,bar\",\n\t\t\t\t\"null,barfoo\", \"null,barfoo\", \"foo,foo\", \"foo,foo\", \"foo,foo\", \"foo,foo\", \"foo,foo\", \"foo,foo\");\n\t\ttestOuterJoin(leftInput, rightInput, expected);\n\t}", "signature": "void testRightOuterJoin()", "full_signature": "@Test public void testRightOuterJoin()", "class_method_signature": "OuterJoinOperatorBaseTest.testRightOuterJoin()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "setOuterJoinType", "asList", "testOuterJoin"]}, "focal_class": {"identifier": "OuterJoinOperatorBase", "superclass": "extends JoinOperatorBase<IN1, IN2, OUT, FT>", "interfaces": "", "fields": [{"original_string": "private OuterJoinType outerJoinType;", "modifier": "private", "type": "OuterJoinType", "declarator": "outerJoinType", "var_name": "outerJoinType"}], "methods": [{"identifier": "OuterJoinOperatorBase", "parameters": "(UserCodeWrapper<FT> udf, BinaryOperatorInformation<IN1, IN2, OUT> operatorInfo,\n\t\t\tint[] keyPositions1, int[] keyPositions2, String name, OuterJoinType outerJoinType)", "modifiers": "public", "return": "", "signature": " OuterJoinOperatorBase(UserCodeWrapper<FT> udf, BinaryOperatorInformation<IN1, IN2, OUT> operatorInfo,\n\t\t\tint[] keyPositions1, int[] keyPositions2, String name, OuterJoinType outerJoinType)", "full_signature": "public  OuterJoinOperatorBase(UserCodeWrapper<FT> udf, BinaryOperatorInformation<IN1, IN2, OUT> operatorInfo,\n\t\t\tint[] keyPositions1, int[] keyPositions2, String name, OuterJoinType outerJoinType)", "class_method_signature": "OuterJoinOperatorBase.OuterJoinOperatorBase(UserCodeWrapper<FT> udf, BinaryOperatorInformation<IN1, IN2, OUT> operatorInfo,\n\t\t\tint[] keyPositions1, int[] keyPositions2, String name, OuterJoinType outerJoinType)", "testcase": false, "constructor": true}, {"identifier": "OuterJoinOperatorBase", "parameters": "(FT udf, BinaryOperatorInformation<IN1, IN2, OUT> operatorInfo,\n\t\t\tint[] keyPositions1, int[] keyPositions2, String name, OuterJoinType outerJoinType)", "modifiers": "public", "return": "", "signature": " OuterJoinOperatorBase(FT udf, BinaryOperatorInformation<IN1, IN2, OUT> operatorInfo,\n\t\t\tint[] keyPositions1, int[] keyPositions2, String name, OuterJoinType outerJoinType)", "full_signature": "public  OuterJoinOperatorBase(FT udf, BinaryOperatorInformation<IN1, IN2, OUT> operatorInfo,\n\t\t\tint[] keyPositions1, int[] keyPositions2, String name, OuterJoinType outerJoinType)", "class_method_signature": "OuterJoinOperatorBase.OuterJoinOperatorBase(FT udf, BinaryOperatorInformation<IN1, IN2, OUT> operatorInfo,\n\t\t\tint[] keyPositions1, int[] keyPositions2, String name, OuterJoinType outerJoinType)", "testcase": false, "constructor": true}, {"identifier": "OuterJoinOperatorBase", "parameters": "(Class<? extends FT> udf, BinaryOperatorInformation<IN1, IN2, OUT> operatorInfo,\n\t\t\tint[] keyPositions1, int[] keyPositions2, String name, OuterJoinType outerJoinType)", "modifiers": "public", "return": "", "signature": " OuterJoinOperatorBase(Class<? extends FT> udf, BinaryOperatorInformation<IN1, IN2, OUT> operatorInfo,\n\t\t\tint[] keyPositions1, int[] keyPositions2, String name, OuterJoinType outerJoinType)", "full_signature": "public  OuterJoinOperatorBase(Class<? extends FT> udf, BinaryOperatorInformation<IN1, IN2, OUT> operatorInfo,\n\t\t\tint[] keyPositions1, int[] keyPositions2, String name, OuterJoinType outerJoinType)", "class_method_signature": "OuterJoinOperatorBase.OuterJoinOperatorBase(Class<? extends FT> udf, BinaryOperatorInformation<IN1, IN2, OUT> operatorInfo,\n\t\t\tint[] keyPositions1, int[] keyPositions2, String name, OuterJoinType outerJoinType)", "testcase": false, "constructor": true}, {"identifier": "setOuterJoinType", "parameters": "(OuterJoinType outerJoinType)", "modifiers": "public", "return": "void", "signature": "void setOuterJoinType(OuterJoinType outerJoinType)", "full_signature": "public void setOuterJoinType(OuterJoinType outerJoinType)", "class_method_signature": "OuterJoinOperatorBase.setOuterJoinType(OuterJoinType outerJoinType)", "testcase": false, "constructor": false}, {"identifier": "getOuterJoinType", "parameters": "()", "modifiers": "public", "return": "OuterJoinType", "signature": "OuterJoinType getOuterJoinType()", "full_signature": "public OuterJoinType getOuterJoinType()", "class_method_signature": "OuterJoinOperatorBase.getOuterJoinType()", "testcase": false, "constructor": false}, {"identifier": "executeOnCollections", "parameters": "(List<IN1> leftInput, List<IN2> rightInput, RuntimeContext runtimeContext, ExecutionConfig executionConfig)", "modifiers": "@Override protected", "return": "List<OUT>", "signature": "List<OUT> executeOnCollections(List<IN1> leftInput, List<IN2> rightInput, RuntimeContext runtimeContext, ExecutionConfig executionConfig)", "full_signature": "@Override protected List<OUT> executeOnCollections(List<IN1> leftInput, List<IN2> rightInput, RuntimeContext runtimeContext, ExecutionConfig executionConfig)", "class_method_signature": "OuterJoinOperatorBase.executeOnCollections(List<IN1> leftInput, List<IN2> rightInput, RuntimeContext runtimeContext, ExecutionConfig executionConfig)", "testcase": false, "constructor": false}, {"identifier": "buildComparatorFor", "parameters": "(int input, ExecutionConfig executionConfig, TypeInformation<T> typeInformation)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "TypeComparator<T>", "signature": "TypeComparator<T> buildComparatorFor(int input, ExecutionConfig executionConfig, TypeInformation<T> typeInformation)", "full_signature": "@SuppressWarnings(\"unchecked\") private TypeComparator<T> buildComparatorFor(int input, ExecutionConfig executionConfig, TypeInformation<T> typeInformation)", "class_method_signature": "OuterJoinOperatorBase.buildComparatorFor(int input, ExecutionConfig executionConfig, TypeInformation<T> typeInformation)", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/api/common/operators/base/OuterJoinOperatorBase.java"}, "focal_method": {"identifier": "setOuterJoinType", "parameters": "(OuterJoinType outerJoinType)", "modifiers": "public", "return": "void", "body": "public void setOuterJoinType(OuterJoinType outerJoinType) {\n\t\tthis.outerJoinType = outerJoinType;\n\t}", "signature": "void setOuterJoinType(OuterJoinType outerJoinType)", "full_signature": "public void setOuterJoinType(OuterJoinType outerJoinType)", "class_method_signature": "OuterJoinOperatorBase.setOuterJoinType(OuterJoinType outerJoinType)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}