{"test_class": {"identifier": "RepositoryBookmarkServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String USER_ID = \"user\";", "modifier": "private final", "type": "String", "declarator": "USER_ID = \"user\"", "var_name": "USER_ID"}, {"original_string": "@Mock\n    UserRepository userRepository;", "modifier": "@Mock", "type": "UserRepository", "declarator": "userRepository", "var_name": "userRepository"}, {"original_string": "@Mock\n    Project projectMock;", "modifier": "@Mock", "type": "Project", "declarator": "projectMock", "var_name": "projectMock"}, {"original_string": "@Mock\n    User userMock;", "modifier": "@Mock", "type": "User", "declarator": "userMock", "var_name": "userMock"}, {"original_string": "RepositoryBookmarkService bookmarkService;", "modifier": "", "type": "RepositoryBookmarkService", "declarator": "bookmarkService", "var_name": "bookmarkService"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/ad/user/RepositoryBookmarkServiceTest.java"}, "test_case": {"identifier": "addBookmarkToUserAddsBookmark", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addBookmarkToUserAddsBookmark() {\n        // given\n\n        // when\n        Project actualProject = bookmarkService.addBookmarkToUser(userMock, projectMock);\n\n        // then\n        assertThat(actualProject).isEqualTo(projectMock);\n\n        verify(userMock).addBookmark(projectMock);\n        verify(userRepository).save(userMock);\n    }", "signature": "void addBookmarkToUserAddsBookmark()", "full_signature": "@Test public void addBookmarkToUserAddsBookmark()", "class_method_signature": "RepositoryBookmarkServiceTest.addBookmarkToUserAddsBookmark()", "testcase": true, "constructor": false, "invocations": ["addBookmarkToUser", "isEqualTo", "assertThat", "addBookmark", "verify", "save", "verify"]}, "focal_class": {"identifier": "RepositoryBookmarkService", "superclass": "", "interfaces": "implements BookmarkService", "fields": [{"original_string": "private final UserRepository userRepo;", "modifier": "private final", "type": "UserRepository", "declarator": "userRepo", "var_name": "userRepo"}], "methods": [{"identifier": "RepositoryBookmarkService", "parameters": "(UserRepository userRepo)", "modifiers": "@Autowired public", "return": "", "signature": " RepositoryBookmarkService(UserRepository userRepo)", "full_signature": "@Autowired public  RepositoryBookmarkService(UserRepository userRepo)", "class_method_signature": "RepositoryBookmarkService.RepositoryBookmarkService(UserRepository userRepo)", "testcase": false, "constructor": true}, {"identifier": "addBookmarkToUser", "parameters": "(User user, Project project)", "modifiers": "@Override public", "return": "Project", "signature": "Project addBookmarkToUser(User user, Project project)", "full_signature": "@Override public Project addBookmarkToUser(User user, Project project)", "class_method_signature": "RepositoryBookmarkService.addBookmarkToUser(User user, Project project)", "testcase": false, "constructor": false}, {"identifier": "removeBookmarkOfUser", "parameters": "(User user, Project project)", "modifiers": "@Override public", "return": "void", "signature": "void removeBookmarkOfUser(User user, Project project)", "full_signature": "@Override public void removeBookmarkOfUser(User user, Project project)", "class_method_signature": "RepositoryBookmarkService.removeBookmarkOfUser(User user, Project project)", "testcase": false, "constructor": false}, {"identifier": "getBookmarksOfUser", "parameters": "(User user)", "modifiers": "@Override @Transactional(readOnly = true) public", "return": "List<Project>", "signature": "List<Project> getBookmarksOfUser(User user)", "full_signature": "@Override @Transactional(readOnly = true) public List<Project> getBookmarksOfUser(User user)", "class_method_signature": "RepositoryBookmarkService.getBookmarksOfUser(User user)", "testcase": false, "constructor": false}, {"identifier": "userHasBookmark", "parameters": "(User user, Project project)", "modifiers": "@Override @Transactional(readOnly = true) public", "return": "boolean", "signature": "boolean userHasBookmark(User user, Project project)", "full_signature": "@Override @Transactional(readOnly = true) public boolean userHasBookmark(User user, Project project)", "class_method_signature": "RepositoryBookmarkService.userHasBookmark(User user, Project project)", "testcase": false, "constructor": false}, {"identifier": "removeAllBookmarksOfUser", "parameters": "(User user)", "modifiers": "@Override public", "return": "void", "signature": "void removeAllBookmarksOfUser(User user)", "full_signature": "@Override public void removeAllBookmarksOfUser(User user)", "class_method_signature": "RepositoryBookmarkService.removeAllBookmarksOfUser(User user)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/ad/user/RepositoryBookmarkService.java"}, "focal_method": {"identifier": "addBookmarkToUser", "parameters": "(User user, Project project)", "modifiers": "@Override public", "return": "Project", "body": "@Override\n    public Project addBookmarkToUser(User user, Project project) {\n        // add the project and persist the entity\n        user.addBookmark(project);\n        userRepo.save(user);\n\n        return project;\n    }", "signature": "Project addBookmarkToUser(User user, Project project)", "full_signature": "@Override public Project addBookmarkToUser(User user, Project project)", "class_method_signature": "RepositoryBookmarkService.addBookmarkToUser(User user, Project project)", "testcase": false, "constructor": false, "invocations": ["addBookmark", "save"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}