{"test_class": {"identifier": "VersionedOffHeapCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  CacheLoader<String, String> cacheLoader;", "modifier": "@Mock", "type": "CacheLoader<String, String>", "declarator": "cacheLoader", "var_name": "cacheLoader"}, {"original_string": "@Mock\n  EvictionListener<String, String> evictionListener;", "modifier": "@Mock", "type": "EvictionListener<String, String>", "declarator": "evictionListener", "var_name": "evictionListener"}, {"original_string": "@Mock\n  IndexHandler<String, String> indexHandler;", "modifier": "@Mock", "type": "IndexHandler<String, String>", "declarator": "indexHandler", "var_name": "indexHandler"}, {"original_string": "VersionedOffHeapCache<String, String> cache;", "modifier": "", "type": "VersionedOffHeapCache<String, String>", "declarator": "cache", "var_name": "cache"}, {"original_string": "Serializer<String> serializer = new Serializer<String>() {\n\n    @Override\n    public byte[] serialize(String value) {\n      return value.getBytes();\n    }\n\n    @Override\n    public String deserialize(byte[] payload) {\n      return new String(payload);\n    }\n  };", "modifier": "", "type": "Serializer<String>", "declarator": "serializer = new Serializer<String>() {\n\n    @Override\n    public byte[] serialize(String value) {\n      return value.getBytes();\n    }\n\n    @Override\n    public String deserialize(byte[] payload) {\n      return new String(payload);\n    }\n  }", "var_name": "serializer"}, {"original_string": "@Spy\n  OffHeapByteBufferStore bufferStore = new OffHeapByteBufferStore(1000, 2);", "modifier": "@Spy", "type": "OffHeapByteBufferStore", "declarator": "bufferStore = new OffHeapByteBufferStore(1000, 2)", "var_name": "bufferStore"}], "file": "imcache-offheap/src/test/java/com/cetsoft/imcache/offheap/VersionedOffHeapCacheTest.java"}, "test_case": {"identifier": "putVersionAreNotSame", "parameters": "()", "modifiers": "@Test(expected = StaleItemException.class) public", "return": "void", "body": "@Test(expected = StaleItemException.class)\n  public void putVersionAreNotSame() {\n    final String key = \"key2\", value = \"valueA\";\n\n    cache.put(key, new SimpleItem(2, value));\n    cache.put(key, new SimpleItem(value));\n  }", "signature": "void putVersionAreNotSame()", "full_signature": "@Test(expected = StaleItemException.class) public void putVersionAreNotSame()", "class_method_signature": "VersionedOffHeapCacheTest.putVersionAreNotSame()", "testcase": true, "constructor": false, "invocations": ["put", "put"]}, "focal_class": {"identifier": "VersionedOffHeapCache", "superclass": "", "interfaces": "implements SearchableCache<K, VersionedItem<V>>", "fields": [{"original_string": "protected OffHeapCache<K, VersionedItem<V>> offHeapCache;", "modifier": "protected", "type": "OffHeapCache<K, VersionedItem<V>>", "declarator": "offHeapCache", "var_name": "offHeapCache"}, {"original_string": "private StripedReadWriteLock readWriteLock;", "modifier": "private", "type": "StripedReadWriteLock", "declarator": "readWriteLock", "var_name": "readWriteLock"}], "methods": [{"identifier": "VersionedOffHeapCache", "parameters": "(final String name, final Serializer<VersionedItem<V>> serializer,\n      final OffHeapByteBufferStore byteBufferStore,\n      final CacheLoader<K, VersionedItem<V>> cacheLoader,\n      final EvictionListener<K, VersionedItem<V>> evictionListener,\n      final IndexHandler<K, VersionedItem<V>> indexHandler,\n      final long bufferCleanerPeriod, final float bufferCleanerThreshold,\n      final int concurrencyLevel, final long evictionPeriod)", "modifiers": "public", "return": "", "signature": " VersionedOffHeapCache(final String name, final Serializer<VersionedItem<V>> serializer,\n      final OffHeapByteBufferStore byteBufferStore,\n      final CacheLoader<K, VersionedItem<V>> cacheLoader,\n      final EvictionListener<K, VersionedItem<V>> evictionListener,\n      final IndexHandler<K, VersionedItem<V>> indexHandler,\n      final long bufferCleanerPeriod, final float bufferCleanerThreshold,\n      final int concurrencyLevel, final long evictionPeriod)", "full_signature": "public  VersionedOffHeapCache(final String name, final Serializer<VersionedItem<V>> serializer,\n      final OffHeapByteBufferStore byteBufferStore,\n      final CacheLoader<K, VersionedItem<V>> cacheLoader,\n      final EvictionListener<K, VersionedItem<V>> evictionListener,\n      final IndexHandler<K, VersionedItem<V>> indexHandler,\n      final long bufferCleanerPeriod, final float bufferCleanerThreshold,\n      final int concurrencyLevel, final long evictionPeriod)", "class_method_signature": "VersionedOffHeapCache.VersionedOffHeapCache(final String name, final Serializer<VersionedItem<V>> serializer,\n      final OffHeapByteBufferStore byteBufferStore,\n      final CacheLoader<K, VersionedItem<V>> cacheLoader,\n      final EvictionListener<K, VersionedItem<V>> evictionListener,\n      final IndexHandler<K, VersionedItem<V>> indexHandler,\n      final long bufferCleanerPeriod, final float bufferCleanerThreshold,\n      final int concurrencyLevel, final long evictionPeriod)", "testcase": false, "constructor": true}, {"identifier": "VersionedOffHeapCache", "parameters": "(final String name, final OffHeapByteBufferStore byteBufferStore,\n      final Serializer<V> serializer, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener, final IndexHandler<K, V> indexHandler,\n      final long bufferCleanerPeriod, final float bufferCleanerThreshold,\n      final int concurrencyLevel,\n      final long evictionPeriod)", "modifiers": "public", "return": "", "signature": " VersionedOffHeapCache(final String name, final OffHeapByteBufferStore byteBufferStore,\n      final Serializer<V> serializer, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener, final IndexHandler<K, V> indexHandler,\n      final long bufferCleanerPeriod, final float bufferCleanerThreshold,\n      final int concurrencyLevel,\n      final long evictionPeriod)", "full_signature": "public  VersionedOffHeapCache(final String name, final OffHeapByteBufferStore byteBufferStore,\n      final Serializer<V> serializer, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener, final IndexHandler<K, V> indexHandler,\n      final long bufferCleanerPeriod, final float bufferCleanerThreshold,\n      final int concurrencyLevel,\n      final long evictionPeriod)", "class_method_signature": "VersionedOffHeapCache.VersionedOffHeapCache(final String name, final OffHeapByteBufferStore byteBufferStore,\n      final Serializer<V> serializer, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener, final IndexHandler<K, V> indexHandler,\n      final long bufferCleanerPeriod, final float bufferCleanerThreshold,\n      final int concurrencyLevel,\n      final long evictionPeriod)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(K key, VersionedItem<V> value)", "modifiers": "public", "return": "void", "signature": "void put(K key, VersionedItem<V> value)", "full_signature": "public void put(K key, VersionedItem<V> value)", "class_method_signature": "VersionedOffHeapCache.put(K key, VersionedItem<V> value)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(final K key, VersionedItem<V> value, final TimeUnit timeUnit,\n      final long duration)", "modifiers": "@Override public", "return": "void", "signature": "void put(final K key, VersionedItem<V> value, final TimeUnit timeUnit,\n      final long duration)", "full_signature": "@Override public void put(final K key, VersionedItem<V> value, final TimeUnit timeUnit,\n      final long duration)", "class_method_signature": "VersionedOffHeapCache.put(final K key, VersionedItem<V> value, final TimeUnit timeUnit,\n      final long duration)", "testcase": false, "constructor": false}, {"identifier": "putInternal", "parameters": "(final K key, final VersionedItem<V> value,\n      final PutOperation<V> putOperation)", "modifiers": "protected", "return": "void", "signature": "void putInternal(final K key, final VersionedItem<V> value,\n      final PutOperation<V> putOperation)", "full_signature": "protected void putInternal(final K key, final VersionedItem<V> value,\n      final PutOperation<V> putOperation)", "class_method_signature": "VersionedOffHeapCache.putInternal(final K key, final VersionedItem<V> value,\n      final PutOperation<V> putOperation)", "testcase": false, "constructor": false}, {"identifier": "writeLock", "parameters": "(K key)", "modifiers": "protected", "return": "void", "signature": "void writeLock(K key)", "full_signature": "protected void writeLock(K key)", "class_method_signature": "VersionedOffHeapCache.writeLock(K key)", "testcase": false, "constructor": false}, {"identifier": "writeUnlock", "parameters": "(K key)", "modifiers": "protected", "return": "void", "signature": "void writeUnlock(K key)", "full_signature": "protected void writeUnlock(K key)", "class_method_signature": "VersionedOffHeapCache.writeUnlock(K key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(K key)", "modifiers": "public", "return": "VersionedItem<V>", "signature": "VersionedItem<V> get(K key)", "full_signature": "public VersionedItem<V> get(K key)", "class_method_signature": "VersionedOffHeapCache.get(K key)", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(K key)", "modifiers": "public", "return": "VersionedItem<V>", "signature": "VersionedItem<V> invalidate(K key)", "full_signature": "public VersionedItem<V> invalidate(K key)", "class_method_signature": "VersionedOffHeapCache.invalidate(K key)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(K key)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(K key)", "full_signature": "public boolean contains(K key)", "class_method_signature": "VersionedOffHeapCache.contains(K key)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "VersionedOffHeapCache.clear()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long size()", "full_signature": "public long size()", "class_method_signature": "VersionedOffHeapCache.size()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Query query)", "modifiers": "public", "return": "List<VersionedItem<V>>", "signature": "List<VersionedItem<V>> execute(Query query)", "full_signature": "public List<VersionedItem<V>> execute(Query query)", "class_method_signature": "VersionedOffHeapCache.execute(Query query)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "VersionedOffHeapCache.getName()", "testcase": false, "constructor": false}, {"identifier": "stats", "parameters": "()", "modifiers": "@Override public", "return": "CacheStats", "signature": "CacheStats stats()", "full_signature": "@Override public CacheStats stats()", "class_method_signature": "VersionedOffHeapCache.stats()", "testcase": false, "constructor": false}], "file": "imcache-offheap/src/main/java/com/cetsoft/imcache/offheap/VersionedOffHeapCache.java"}, "focal_method": {"identifier": "put", "parameters": "(K key, VersionedItem<V> value)", "modifiers": "public", "return": "void", "body": "public void put(K key, VersionedItem<V> value) {\n    putInternal(key, value, versionedItem -> offHeapCache.put(key, versionedItem));\n  }", "signature": "void put(K key, VersionedItem<V> value)", "full_signature": "public void put(K key, VersionedItem<V> value)", "class_method_signature": "VersionedOffHeapCache.put(K key, VersionedItem<V> value)", "testcase": false, "constructor": false, "invocations": ["putInternal", "put"]}, "repository": {"repo_id": 12849994, "url": "https://github.com/Cetsoft/imcache", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 121, "size": 1599, "license": "licensed"}}