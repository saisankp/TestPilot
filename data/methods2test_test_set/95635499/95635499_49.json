{"test_class": {"identifier": "ShotgunEnsembleClassifierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ShotgunEnsembleLearnerAlgorithm algorithm;", "modifier": "", "type": "ShotgunEnsembleLearnerAlgorithm", "declarator": "algorithm", "var_name": "algorithm"}, {"original_string": "ShotgunEnsembleClassifier shotgunEnsembleClassifier;", "modifier": "", "type": "ShotgunEnsembleClassifier", "declarator": "shotgunEnsembleClassifier", "var_name": "shotgunEnsembleClassifier"}, {"original_string": "private int minWindowLength = 3;", "modifier": "private", "type": "int", "declarator": "minWindowLength = 3", "var_name": "minWindowLength"}, {"original_string": "private int maxWindowLength = 6;", "modifier": "private", "type": "int", "declarator": "maxWindowLength = 6", "var_name": "maxWindowLength"}, {"original_string": "private boolean meanNormalization = true;", "modifier": "private", "type": "boolean", "declarator": "meanNormalization = true", "var_name": "meanNormalization"}], "file": "JAICore/jaicore-ml/src/test/java/ai/libs/jaicore/ml/classification/singlelabel/timeseries/learner/neighbors/ShotgunEnsembleClassifierTest.java"}, "test_case": {"identifier": "testMostFrequentLabelFromWindowLengthPredicitons", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMostFrequentLabelFromWindowLengthPredicitons() {\n\t\tMap<Integer, Integer> windowLengthPredicitions = new HashMap<>();\n\t\twindowLengthPredicitions.put(2, 1);\n\t\twindowLengthPredicitions.put(3, 2);\n\t\twindowLengthPredicitions.put(4, 2);\n\t\twindowLengthPredicitions.put(5, 2);\n\t\twindowLengthPredicitions.put(6, 1);\n\t\twindowLengthPredicitions.put(7, 2);\n\t\twindowLengthPredicitions.put(8, 3);\n\t\twindowLengthPredicitions.put(9, 3);\n\t\tint mostFrequentlabel = this.shotgunEnsembleClassifier.mostFrequentLabelFromWindowLengthPredicitions(windowLengthPredicitions);\n\t\tint expectation = 2;\n\t\tassertEquals(expectation, mostFrequentlabel);\n\t}", "signature": "void testMostFrequentLabelFromWindowLengthPredicitons()", "full_signature": "@Test public void testMostFrequentLabelFromWindowLengthPredicitons()", "class_method_signature": "ShotgunEnsembleClassifierTest.testMostFrequentLabelFromWindowLengthPredicitons()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "put", "put", "put", "mostFrequentLabelFromWindowLengthPredicitions", "assertEquals"]}, "focal_class": {"identifier": "ShotgunEnsembleClassifier", "superclass": "extends ASimplifiedTSClassifier<Integer>", "interfaces": "", "fields": [{"original_string": "protected double factor;", "modifier": "protected", "type": "double", "declarator": "factor", "var_name": "factor"}, {"original_string": "protected double[][] values;", "modifier": "protected", "type": "double[][]", "declarator": "values", "var_name": "values"}, {"original_string": "protected int[] targets;", "modifier": "protected", "type": "int[]", "declarator": "targets", "var_name": "targets"}, {"original_string": "protected NearestNeighborClassifier nearestNeighborClassifier;", "modifier": "protected", "type": "NearestNeighborClassifier", "declarator": "nearestNeighborClassifier", "var_name": "nearestNeighborClassifier"}, {"original_string": "protected ShotgunDistance shotgunDistance;", "modifier": "protected", "type": "ShotgunDistance", "declarator": "shotgunDistance", "var_name": "shotgunDistance"}, {"original_string": "protected ArrayList<Pair<Integer, Integer>> windows;", "modifier": "protected", "type": "ArrayList<Pair<Integer, Integer>>", "declarator": "windows", "var_name": "windows"}, {"original_string": "protected int bestScore;", "modifier": "protected", "type": "int", "declarator": "bestScore", "var_name": "bestScore"}, {"original_string": "private final IShotgunEnsembleLearnerConfig config;", "modifier": "private final", "type": "IShotgunEnsembleLearnerConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "ShotgunEnsembleClassifier", "parameters": "(final int minWindowLength, final int maxWindowLength, final boolean meanNormalization, final double factor)", "modifiers": "public", "return": "", "signature": " ShotgunEnsembleClassifier(final int minWindowLength, final int maxWindowLength, final boolean meanNormalization, final double factor)", "full_signature": "public  ShotgunEnsembleClassifier(final int minWindowLength, final int maxWindowLength, final boolean meanNormalization, final double factor)", "class_method_signature": "ShotgunEnsembleClassifier.ShotgunEnsembleClassifier(final int minWindowLength, final int maxWindowLength, final boolean meanNormalization, final double factor)", "testcase": false, "constructor": true}, {"identifier": "calculateWindowLengthPredictions", "parameters": "(final double[] testInstance)", "modifiers": "protected", "return": "Map<Integer, Integer>", "signature": "Map<Integer, Integer> calculateWindowLengthPredictions(final double[] testInstance)", "full_signature": "protected Map<Integer, Integer> calculateWindowLengthPredictions(final double[] testInstance)", "class_method_signature": "ShotgunEnsembleClassifier.calculateWindowLengthPredictions(final double[] testInstance)", "testcase": false, "constructor": false}, {"identifier": "mostFrequentLabelFromWindowLengthPredicitions", "parameters": "(final Map<Integer, Integer> windowLengthPredicitions)", "modifiers": "protected", "return": "Integer", "signature": "Integer mostFrequentLabelFromWindowLengthPredicitions(final Map<Integer, Integer> windowLengthPredicitions)", "full_signature": "protected Integer mostFrequentLabelFromWindowLengthPredicitions(final Map<Integer, Integer> windowLengthPredicitions)", "class_method_signature": "ShotgunEnsembleClassifier.mostFrequentLabelFromWindowLengthPredicitions(final Map<Integer, Integer> windowLengthPredicitions)", "testcase": false, "constructor": false}, {"identifier": "calculateWindowLengthPredictions", "parameters": "(final TimeSeriesDataset2 dataset)", "modifiers": "protected", "return": "Map<Integer, List<Integer>>", "signature": "Map<Integer, List<Integer>> calculateWindowLengthPredictions(final TimeSeriesDataset2 dataset)", "full_signature": "protected Map<Integer, List<Integer>> calculateWindowLengthPredictions(final TimeSeriesDataset2 dataset)", "class_method_signature": "ShotgunEnsembleClassifier.calculateWindowLengthPredictions(final TimeSeriesDataset2 dataset)", "testcase": false, "constructor": false}, {"identifier": "mostFrequentLabelsFromWindowLengthPredicitions", "parameters": "(final Map<Integer, List<Integer>> windowLengthPredicitions)", "modifiers": "protected", "return": "List<Integer>", "signature": "List<Integer> mostFrequentLabelsFromWindowLengthPredicitions(final Map<Integer, List<Integer>> windowLengthPredicitions)", "full_signature": "protected List<Integer> mostFrequentLabelsFromWindowLengthPredicitions(final Map<Integer, List<Integer>> windowLengthPredicitions)", "class_method_signature": "ShotgunEnsembleClassifier.mostFrequentLabelsFromWindowLengthPredicitions(final Map<Integer, List<Integer>> windowLengthPredicitions)", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "(final double[] univInstance)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer predict(final double[] univInstance)", "full_signature": "@Override public Integer predict(final double[] univInstance)", "class_method_signature": "ShotgunEnsembleClassifier.predict(final double[] univInstance)", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "(final TimeSeriesDataset2 dataset)", "modifiers": "@Override public", "return": "List<Integer>", "signature": "List<Integer> predict(final TimeSeriesDataset2 dataset)", "full_signature": "@Override public List<Integer> predict(final TimeSeriesDataset2 dataset)", "class_method_signature": "ShotgunEnsembleClassifier.predict(final TimeSeriesDataset2 dataset)", "testcase": false, "constructor": false}, {"identifier": "setValues", "parameters": "(final double[][] values)", "modifiers": "protected", "return": "void", "signature": "void setValues(final double[][] values)", "full_signature": "protected void setValues(final double[][] values)", "class_method_signature": "ShotgunEnsembleClassifier.setValues(final double[][] values)", "testcase": false, "constructor": false}, {"identifier": "setTargets", "parameters": "(final int[] targets)", "modifiers": "protected", "return": "void", "signature": "void setTargets(final int[] targets)", "full_signature": "protected void setTargets(final int[] targets)", "class_method_signature": "ShotgunEnsembleClassifier.setTargets(final int[] targets)", "testcase": false, "constructor": false}, {"identifier": "setWindows", "parameters": "(final ArrayList<Pair<Integer, Integer>> windows)", "modifiers": "protected", "return": "void", "signature": "void setWindows(final ArrayList<Pair<Integer, Integer>> windows)", "full_signature": "protected void setWindows(final ArrayList<Pair<Integer, Integer>> windows)", "class_method_signature": "ShotgunEnsembleClassifier.setWindows(final ArrayList<Pair<Integer, Integer>> windows)", "testcase": false, "constructor": false}, {"identifier": "setNearestNeighborClassifier", "parameters": "(final NearestNeighborClassifier nearestNeighborClassifier)", "modifiers": "protected", "return": "void", "signature": "void setNearestNeighborClassifier(final NearestNeighborClassifier nearestNeighborClassifier)", "full_signature": "protected void setNearestNeighborClassifier(final NearestNeighborClassifier nearestNeighborClassifier)", "class_method_signature": "ShotgunEnsembleClassifier.setNearestNeighborClassifier(final NearestNeighborClassifier nearestNeighborClassifier)", "testcase": false, "constructor": false}, {"identifier": "getLearningAlgorithm", "parameters": "(final TimeSeriesDataset2 dataset)", "modifiers": "@Override public", "return": "ShotgunEnsembleLearnerAlgorithm", "signature": "ShotgunEnsembleLearnerAlgorithm getLearningAlgorithm(final TimeSeriesDataset2 dataset)", "full_signature": "@Override public ShotgunEnsembleLearnerAlgorithm getLearningAlgorithm(final TimeSeriesDataset2 dataset)", "class_method_signature": "ShotgunEnsembleClassifier.getLearningAlgorithm(final TimeSeriesDataset2 dataset)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-ml/src/main/java/ai/libs/jaicore/ml/classification/singlelabel/timeseries/learner/neighbors/ShotgunEnsembleClassifier.java"}, "focal_method": {"identifier": "mostFrequentLabelFromWindowLengthPredicitions", "parameters": "(final Map<Integer, Integer> windowLengthPredicitions)", "modifiers": "protected", "return": "Integer", "body": "protected Integer mostFrequentLabelFromWindowLengthPredicitions(final Map<Integer, Integer> windowLengthPredicitions) {\n\t\t// Count frequency for labels.\n\t\tMap<Integer, Integer> labelFrequencyMap = new HashMap<>();\n\t\tfor (Integer label : windowLengthPredicitions.values()) {\n\t\t\tif (labelFrequencyMap.containsKey(label)) {\n\t\t\t\tlabelFrequencyMap.put(label, labelFrequencyMap.get(label) + 1);\n\t\t\t} else {\n\t\t\t\tlabelFrequencyMap.put(label, 1);\n\t\t\t}\n\t\t}\n\t\t// Return most frequent label.\n\t\tint topFrequency = -1;\n\t\tint mostFrequentLabel = 0;\n\t\tfor (Entry<Integer, Integer> entry : labelFrequencyMap.entrySet()) {\n\t\t\tint label = entry.getKey();\n\t\t\tint labelFrequency = entry.getValue();\n\t\t\tif (labelFrequency > topFrequency) {\n\t\t\t\ttopFrequency = labelFrequency;\n\t\t\t\tmostFrequentLabel = label;\n\t\t\t}\n\t\t}\n\t\treturn mostFrequentLabel;\n\t}", "signature": "Integer mostFrequentLabelFromWindowLengthPredicitions(final Map<Integer, Integer> windowLengthPredicitions)", "full_signature": "protected Integer mostFrequentLabelFromWindowLengthPredicitions(final Map<Integer, Integer> windowLengthPredicitions)", "class_method_signature": "ShotgunEnsembleClassifier.mostFrequentLabelFromWindowLengthPredicitions(final Map<Integer, Integer> windowLengthPredicitions)", "testcase": false, "constructor": false, "invocations": ["values", "containsKey", "put", "get", "put", "entrySet", "getKey", "getValue"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}