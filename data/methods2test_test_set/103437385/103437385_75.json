{"test_class": {"identifier": "JDBCUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    Connection connection;", "modifier": "@Mock", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock\n    Statement statement;", "modifier": "@Mock", "type": "Statement", "declarator": "statement", "var_name": "statement"}, {"original_string": "@Mock\n    ResultSet resultSet;", "modifier": "@Mock", "type": "ResultSet", "declarator": "resultSet", "var_name": "resultSet"}, {"original_string": "@Mock\n    ResultSetMetaData metaData;", "modifier": "@Mock", "type": "ResultSetMetaData", "declarator": "metaData", "var_name": "metaData"}, {"original_string": "@Mock\n    Clob clob;", "modifier": "@Mock", "type": "Clob", "declarator": "clob", "var_name": "clob"}], "file": "kie-soup-dataset/kie-soup-dataset-sql/src/test/java/org/dashbuilder/dataprovider/sql/JDBCUtilsTest.java"}, "test_case": {"identifier": "testFixSQLCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFixSQLCase() throws Exception {\n        String sql = \"SELECT \\\"ID\\\" FROM TABLE\";\n        String fix = JDBCUtils.changeCaseExcludeQuotes(sql, false);\n        assertEquals(fix, \"select \\\"ID\\\" from table\");\n    }", "signature": "void testFixSQLCase()", "full_signature": "@Test public void testFixSQLCase()", "class_method_signature": "JDBCUtilsTest.testFixSQLCase()", "testcase": true, "constructor": false, "invocations": ["changeCaseExcludeQuotes", "assertEquals"]}, "focal_class": {"identifier": "JDBCUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Dialect DEFAULT = new DefaultDialect();", "modifier": "public static final", "type": "Dialect", "declarator": "DEFAULT = new DefaultDialect()", "var_name": "DEFAULT"}, {"original_string": "public static final Dialect H2 = new H2Dialect();", "modifier": "public static final", "type": "Dialect", "declarator": "H2 = new H2Dialect()", "var_name": "H2"}, {"original_string": "public static final Dialect MYSQL = new MySQLDialect();", "modifier": "public static final", "type": "Dialect", "declarator": "MYSQL = new MySQLDialect()", "var_name": "MYSQL"}, {"original_string": "public static final Dialect POSTGRES = new PostgresDialect();", "modifier": "public static final", "type": "Dialect", "declarator": "POSTGRES = new PostgresDialect()", "var_name": "POSTGRES"}, {"original_string": "public static final Dialect ORACLE = new OracleDialect();", "modifier": "public static final", "type": "Dialect", "declarator": "ORACLE = new OracleDialect()", "var_name": "ORACLE"}, {"original_string": "public static final Dialect ORACLE_LEGACY = new OracleLegacyDialect();", "modifier": "public static final", "type": "Dialect", "declarator": "ORACLE_LEGACY = new OracleLegacyDialect()", "var_name": "ORACLE_LEGACY"}, {"original_string": "public static final Dialect SQLSERVER = new SQLServerDialect();", "modifier": "public static final", "type": "Dialect", "declarator": "SQLSERVER = new SQLServerDialect()", "var_name": "SQLSERVER"}, {"original_string": "public static final Dialect DB2 = new DB2Dialect();", "modifier": "public static final", "type": "Dialect", "declarator": "DB2 = new DB2Dialect()", "var_name": "DB2"}, {"original_string": "public static final Dialect SYBASE_ASE = new SybaseASEDialect();", "modifier": "public static final", "type": "Dialect", "declarator": "SYBASE_ASE = new SybaseASEDialect()", "var_name": "SYBASE_ASE"}, {"original_string": "public static final Dialect MONETDB = new MonetDBDialect();", "modifier": "public static final", "type": "Dialect", "declarator": "MONETDB = new MonetDBDialect()", "var_name": "MONETDB"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(JDBCUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(JDBCUtils.class)", "var_name": "log"}, {"original_string": "public static final String[] QUOTES = new String[]{\"\\\"\", \"'\", \"`\", \"\u00b4\"};", "modifier": "public static final", "type": "String[]", "declarator": "QUOTES = new String[]{\"\\\"\", \"'\", \"`\", \"\u00b4\"};", "var_name": "QUOTES"}], "methods": [{"identifier": "listDatasourceDefs", "parameters": "()", "modifiers": "public static", "return": "List<SQLDataSourceDef>", "signature": "List<SQLDataSourceDef> listDatasourceDefs()", "full_signature": "public static List<SQLDataSourceDef> listDatasourceDefs()", "class_method_signature": "JDBCUtils.listDatasourceDefs()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Connection connection, String sql)", "modifiers": "public static", "return": "void", "signature": "void execute(Connection connection, String sql)", "full_signature": "public static void execute(Connection connection, String sql)", "class_method_signature": "JDBCUtils.execute(Connection connection, String sql)", "testcase": false, "constructor": false}, {"identifier": "metadata", "parameters": "(Connection connection, String sql, Function<ResultSetMetaData, T> callback)", "modifiers": "public static", "return": "T", "signature": "T metadata(Connection connection, String sql, Function<ResultSetMetaData, T> callback)", "full_signature": "public static T metadata(Connection connection, String sql, Function<ResultSetMetaData, T> callback)", "class_method_signature": "JDBCUtils.metadata(Connection connection, String sql, Function<ResultSetMetaData, T> callback)", "testcase": false, "constructor": false}, {"identifier": "executeQuery", "parameters": "(Connection connection, String sql)", "modifiers": "public static", "return": "ResultSetHandler", "signature": "ResultSetHandler executeQuery(Connection connection, String sql)", "full_signature": "public static ResultSetHandler executeQuery(Connection connection, String sql)", "class_method_signature": "JDBCUtils.executeQuery(Connection connection, String sql)", "testcase": false, "constructor": false}, {"identifier": "dialect", "parameters": "(Connection connection)", "modifiers": "public static", "return": "Dialect", "signature": "Dialect dialect(Connection connection)", "full_signature": "public static Dialect dialect(Connection connection)", "class_method_signature": "JDBCUtils.dialect(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "dialect", "parameters": "(String url, int majorVersion)", "modifiers": "public static", "return": "Dialect", "signature": "Dialect dialect(String url, int majorVersion)", "full_signature": "public static Dialect dialect(String url, int majorVersion)", "class_method_signature": "JDBCUtils.dialect(String url, int majorVersion)", "testcase": false, "constructor": false}, {"identifier": "dialect", "parameters": "(String dbName)", "modifiers": "public static", "return": "Dialect", "signature": "Dialect dialect(String dbName)", "full_signature": "public static Dialect dialect(String dbName)", "class_method_signature": "JDBCUtils.dialect(String dbName)", "testcase": false, "constructor": false}, {"identifier": "getColumns", "parameters": "(ResultSet resultSet, String[] exclude)", "modifiers": "public static", "return": "List<Column>", "signature": "List<Column> getColumns(ResultSet resultSet, String[] exclude)", "full_signature": "public static List<Column> getColumns(ResultSet resultSet, String[] exclude)", "class_method_signature": "JDBCUtils.getColumns(ResultSet resultSet, String[] exclude)", "testcase": false, "constructor": false}, {"identifier": "fixCase", "parameters": "(Connection connection, String id)", "modifiers": "public static", "return": "String", "signature": "String fixCase(Connection connection, String id)", "full_signature": "public static String fixCase(Connection connection, String id)", "class_method_signature": "JDBCUtils.fixCase(Connection connection, String id)", "testcase": false, "constructor": false}, {"identifier": "getWordsBetweenQuotes", "parameters": "(String s)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getWordsBetweenQuotes(String s)", "full_signature": "public static List<String> getWordsBetweenQuotes(String s)", "class_method_signature": "JDBCUtils.getWordsBetweenQuotes(String s)", "testcase": false, "constructor": false}, {"identifier": "changeCaseExcludeQuotes", "parameters": "(String s, boolean upper)", "modifiers": "public static", "return": "String", "signature": "String changeCaseExcludeQuotes(String s, boolean upper)", "full_signature": "public static String changeCaseExcludeQuotes(String s, boolean upper)", "class_method_signature": "JDBCUtils.changeCaseExcludeQuotes(String s, boolean upper)", "testcase": false, "constructor": false}, {"identifier": "calculateType", "parameters": "(int sqlDataType)", "modifiers": "public static", "return": "ColumnType", "signature": "ColumnType calculateType(int sqlDataType)", "full_signature": "public static ColumnType calculateType(int sqlDataType)", "class_method_signature": "JDBCUtils.calculateType(int sqlDataType)", "testcase": false, "constructor": false}, {"identifier": "clobToString", "parameters": "(Clob value)", "modifiers": "public static", "return": "String", "signature": "String clobToString(Clob value)", "full_signature": "public static String clobToString(Clob value)", "class_method_signature": "JDBCUtils.clobToString(Clob value)", "testcase": false, "constructor": false}], "file": "kie-soup-dataset/kie-soup-dataset-sql/src/main/java/org/dashbuilder/dataprovider/sql/JDBCUtils.java"}, "focal_method": {"identifier": "changeCaseExcludeQuotes", "parameters": "(String s, boolean upper)", "modifiers": "public static", "return": "String", "body": "public static String changeCaseExcludeQuotes(String s, boolean upper) {\n        List<String> keepList = getWordsBetweenQuotes(s);\n        String tmpStr = upper ? s.toUpperCase() : s.toLowerCase();\n        for (String word : keepList) {\n            String tmpWord = upper ? word.toUpperCase() : word.toLowerCase();\n            for (int i = 0; i < QUOTES.length; i++) {\n                String quote = QUOTES[i];\n                tmpStr = StringUtils.replace(tmpStr, quote + tmpWord + quote, quote + word + quote);\n            }\n        }\n        return tmpStr;\n    }", "signature": "String changeCaseExcludeQuotes(String s, boolean upper)", "full_signature": "public static String changeCaseExcludeQuotes(String s, boolean upper)", "class_method_signature": "JDBCUtils.changeCaseExcludeQuotes(String s, boolean upper)", "testcase": false, "constructor": false, "invocations": ["getWordsBetweenQuotes", "toUpperCase", "toLowerCase", "toUpperCase", "toLowerCase", "replace"]}, "repository": {"repo_id": 103437385, "url": "https://github.com/kiegroup/kie-soup", "stars": 11, "created": "9/13/2017 6:41:37 PM +00:00", "updates": "2020-01-21T13:07:53+00:00", "fork": "False", "license": "licensed"}}