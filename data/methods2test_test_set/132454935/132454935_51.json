{"test_class": {"identifier": "AppStateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AppState appState;", "modifier": "private", "type": "AppState", "declarator": "appState", "var_name": "appState"}], "file": "elrond-core/src/test/java/network/elrond/application/AppStateTest.java"}, "test_case": {"identifier": "testAddChannelWithNullChannelShouldThrowException", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testAddChannelWithNullChannelShouldThrowException(){\n        appState.addChannel((P2PBroadcastChannel) null);\n    }", "signature": "void testAddChannelWithNullChannelShouldThrowException()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testAddChannelWithNullChannelShouldThrowException()", "class_method_signature": "AppStateTest.testAddChannelWithNullChannelShouldThrowException()", "testcase": true, "constructor": false, "invocations": ["addChannel"]}, "focal_class": {"identifier": "AppState", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final Logger logger = LogManager.getLogger(AppState.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LogManager.getLogger(AppState.class)", "var_name": "logger"}, {"original_string": "private boolean stillRunning = true;", "modifier": "private", "type": "boolean", "declarator": "stillRunning = true", "var_name": "stillRunning"}, {"original_string": "public Object lockerSyncPropose = new Object();", "modifier": "public", "type": "Object", "declarator": "lockerSyncPropose = new Object()", "var_name": "lockerSyncPropose"}, {"original_string": "private Shard shard;", "modifier": "private", "type": "Shard", "declarator": "shard", "var_name": "shard"}, {"original_string": "private Accounts accounts;", "modifier": "private", "type": "Accounts", "declarator": "accounts", "var_name": "accounts"}, {"original_string": "private Blockchain blockchain;", "modifier": "private", "type": "Blockchain", "declarator": "blockchain", "var_name": "blockchain"}, {"original_string": "private PublicKey publicKey;", "modifier": "private", "type": "PublicKey", "declarator": "publicKey", "var_name": "publicKey"}, {"original_string": "private PrivateKey privateKey;", "modifier": "private", "type": "PrivateKey", "declarator": "privateKey", "var_name": "privateKey"}, {"original_string": "private NTPClient ntpClient;", "modifier": "private", "type": "NTPClient", "declarator": "ntpClient", "var_name": "ntpClient"}, {"original_string": "private P2PConnection connection;", "modifier": "private", "type": "P2PConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private Map<P2PBroadcastChannelName, P2PBroadcastChannel> broadcastChannels = new HashMap<>();", "modifier": "private", "type": "Map<P2PBroadcastChannelName, P2PBroadcastChannel>", "declarator": "broadcastChannels = new HashMap<>()", "var_name": "broadcastChannels"}, {"original_string": "private Map<P2PRequestChannelName, P2PRequestChannel> requestChannels = new HashMap<>();", "modifier": "private", "type": "Map<P2PRequestChannelName, P2PRequestChannel>", "declarator": "requestChannels = new HashMap<>()", "var_name": "requestChannels"}, {"original_string": "private ConsensusData consensusData = new ConsensusData();", "modifier": "private", "type": "ConsensusData", "declarator": "consensusData = new ConsensusData()", "var_name": "consensusData"}, {"original_string": "private StatisticsManager statisticsManagers;", "modifier": "private", "type": "StatisticsManager", "declarator": "statisticsManagers", "var_name": "statisticsManagers"}], "methods": [{"identifier": "getChannel", "parameters": "(P2PRequestChannelName channelName)", "modifiers": "public", "return": "P2PRequestChannel", "signature": "P2PRequestChannel getChannel(P2PRequestChannelName channelName)", "full_signature": "public P2PRequestChannel getChannel(P2PRequestChannelName channelName)", "class_method_signature": "AppState.getChannel(P2PRequestChannelName channelName)", "testcase": false, "constructor": false}, {"identifier": "addChannel", "parameters": "(P2PRequestChannel requestChanel)", "modifiers": "public", "return": "void", "signature": "void addChannel(P2PRequestChannel requestChanel)", "full_signature": "public void addChannel(P2PRequestChannel requestChanel)", "class_method_signature": "AppState.addChannel(P2PRequestChannel requestChanel)", "testcase": false, "constructor": false}, {"identifier": "getChannel", "parameters": "(P2PBroadcastChannelName channelName)", "modifiers": "public", "return": "P2PBroadcastChannel", "signature": "P2PBroadcastChannel getChannel(P2PBroadcastChannelName channelName)", "full_signature": "public P2PBroadcastChannel getChannel(P2PBroadcastChannelName channelName)", "class_method_signature": "AppState.getChannel(P2PBroadcastChannelName channelName)", "testcase": false, "constructor": false}, {"identifier": "addChannel", "parameters": "(P2PBroadcastChannel broadcastChannel)", "modifiers": "public", "return": "void", "signature": "void addChannel(P2PBroadcastChannel broadcastChannel)", "full_signature": "public void addChannel(P2PBroadcastChannel broadcastChannel)", "class_method_signature": "AppState.addChannel(P2PBroadcastChannel broadcastChannel)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "public", "return": "P2PConnection", "signature": "P2PConnection getConnection()", "full_signature": "public P2PConnection getConnection()", "class_method_signature": "AppState.getConnection()", "testcase": false, "constructor": false}, {"identifier": "setConnection", "parameters": "(P2PConnection connection)", "modifiers": "public", "return": "void", "signature": "void setConnection(P2PConnection connection)", "full_signature": "public void setConnection(P2PConnection connection)", "class_method_signature": "AppState.setConnection(P2PConnection connection)", "testcase": false, "constructor": false}, {"identifier": "isStillRunning", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStillRunning()", "full_signature": "public boolean isStillRunning()", "class_method_signature": "AppState.isStillRunning()", "testcase": false, "constructor": false}, {"identifier": "setStillRunning", "parameters": "(boolean stillRunning)", "modifiers": "public", "return": "void", "signature": "void setStillRunning(boolean stillRunning)", "full_signature": "public void setStillRunning(boolean stillRunning)", "class_method_signature": "AppState.setStillRunning(boolean stillRunning)", "testcase": false, "constructor": false}, {"identifier": "setBlockchain", "parameters": "(Blockchain blockchain)", "modifiers": "public", "return": "void", "signature": "void setBlockchain(Blockchain blockchain)", "full_signature": "public void setBlockchain(Blockchain blockchain)", "class_method_signature": "AppState.setBlockchain(Blockchain blockchain)", "testcase": false, "constructor": false}, {"identifier": "getBlockchain", "parameters": "()", "modifiers": "public", "return": "Blockchain", "signature": "Blockchain getBlockchain()", "full_signature": "public Blockchain getBlockchain()", "class_method_signature": "AppState.getBlockchain()", "testcase": false, "constructor": false}, {"identifier": "getAccounts", "parameters": "()", "modifiers": "public", "return": "Accounts", "signature": "Accounts getAccounts()", "full_signature": "public Accounts getAccounts()", "class_method_signature": "AppState.getAccounts()", "testcase": false, "constructor": false}, {"identifier": "setAccounts", "parameters": "(Accounts accounts)", "modifiers": "public", "return": "void", "signature": "void setAccounts(Accounts accounts)", "full_signature": "public void setAccounts(Accounts accounts)", "class_method_signature": "AppState.setAccounts(Accounts accounts)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "AppState.shutdown()", "testcase": false, "constructor": false}, {"identifier": "setPrivateKey", "parameters": "(PrivateKey privateKey)", "modifiers": "public", "return": "void", "signature": "void setPrivateKey(PrivateKey privateKey)", "full_signature": "public void setPrivateKey(PrivateKey privateKey)", "class_method_signature": "AppState.setPrivateKey(PrivateKey privateKey)", "testcase": false, "constructor": false}, {"identifier": "getPrivateKey", "parameters": "()", "modifiers": "public", "return": "PrivateKey", "signature": "PrivateKey getPrivateKey()", "full_signature": "public PrivateKey getPrivateKey()", "class_method_signature": "AppState.getPrivateKey()", "testcase": false, "constructor": false}, {"identifier": "getPublicKey", "parameters": "()", "modifiers": "public", "return": "PublicKey", "signature": "PublicKey getPublicKey()", "full_signature": "public PublicKey getPublicKey()", "class_method_signature": "AppState.getPublicKey()", "testcase": false, "constructor": false}, {"identifier": "getNtpClient", "parameters": "()", "modifiers": "public", "return": "NTPClient", "signature": "NTPClient getNtpClient()", "full_signature": "public NTPClient getNtpClient()", "class_method_signature": "AppState.getNtpClient()", "testcase": false, "constructor": false}, {"identifier": "setNtpClient", "parameters": "(NTPClient ntpClient)", "modifiers": "public", "return": "void", "signature": "void setNtpClient(NTPClient ntpClient)", "full_signature": "public void setNtpClient(NTPClient ntpClient)", "class_method_signature": "AppState.setNtpClient(NTPClient ntpClient)", "testcase": false, "constructor": false}, {"identifier": "getConsensusData", "parameters": "()", "modifiers": "public", "return": "ConsensusData", "signature": "ConsensusData getConsensusData()", "full_signature": "public ConsensusData getConsensusData()", "class_method_signature": "AppState.getConsensusData()", "testcase": false, "constructor": false}, {"identifier": "getShard", "parameters": "()", "modifiers": "public", "return": "Shard", "signature": "Shard getShard()", "full_signature": "public Shard getShard()", "class_method_signature": "AppState.getShard()", "testcase": false, "constructor": false}, {"identifier": "setShard", "parameters": "(Shard shard)", "modifiers": "public", "return": "void", "signature": "void setShard(Shard shard)", "full_signature": "public void setShard(Shard shard)", "class_method_signature": "AppState.setShard(Shard shard)", "testcase": false, "constructor": false}, {"identifier": "getStatisticsManager", "parameters": "()", "modifiers": "public", "return": "StatisticsManager", "signature": "StatisticsManager getStatisticsManager()", "full_signature": "public StatisticsManager getStatisticsManager()", "class_method_signature": "AppState.getStatisticsManager()", "testcase": false, "constructor": false}, {"identifier": "getPool", "parameters": "()", "modifiers": "public", "return": "TransactionsPool", "signature": "TransactionsPool getPool()", "full_signature": "public TransactionsPool getPool()", "class_method_signature": "AppState.getPool()", "testcase": false, "constructor": false}], "file": "elrond-core/src/main/java/network/elrond/application/AppState.java"}, "focal_method": {"identifier": "addChannel", "parameters": "(P2PRequestChannel requestChanel)", "modifiers": "public", "return": "void", "body": "public void addChannel(P2PRequestChannel requestChanel) {\n        logger.traceEntry(\"params: {}\", requestChanel);\n        Util.check(requestChanel != null, \"requestChanel!=null\");\n        this.requestChannels.put(requestChanel.getName(), requestChanel);\n        logger.traceExit();\n    }", "signature": "void addChannel(P2PRequestChannel requestChanel)", "full_signature": "public void addChannel(P2PRequestChannel requestChanel)", "class_method_signature": "AppState.addChannel(P2PRequestChannel requestChanel)", "testcase": false, "constructor": false, "invocations": ["traceEntry", "check", "put", "getName", "traceExit"]}, "repository": {"repo_id": 132454935, "url": "https://github.com/ElrondNetwork/elrond-node-prototype", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 16635, "license": "licensed"}}