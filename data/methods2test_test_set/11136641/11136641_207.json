{"test_class": {"identifier": "NameAwareAttributeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/springframework/ldap/core/NameAwareAttributeTest.java"}, "test_case": {"identifier": "testEqualsWithIdNotSame", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEqualsWithIdNotSame() {\n        NameAwareAttribute attr1 = new NameAwareAttribute(\"someAttribute\");\n        NameAwareAttribute attr2 = new NameAwareAttribute(\"someOtherAttribute\");\n\n        assertThat(attr1.equals(attr2)).isFalse();\n    }", "signature": "void testEqualsWithIdNotSame()", "full_signature": "@Test public void testEqualsWithIdNotSame()", "class_method_signature": "NameAwareAttributeTest.testEqualsWithIdNotSame()", "testcase": true, "constructor": false, "invocations": ["isFalse", "assertThat", "equals"]}, "focal_class": {"identifier": "NameAwareAttribute", "superclass": "", "interfaces": "implements Attribute, Iterable<Object>", "fields": [{"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private final boolean orderMatters;", "modifier": "private final", "type": "boolean", "declarator": "orderMatters", "var_name": "orderMatters"}, {"original_string": "private final Set<Object> values = new LinkedHashSet<Object>();", "modifier": "private final", "type": "Set<Object>", "declarator": "values = new LinkedHashSet<Object>()", "var_name": "values"}, {"original_string": "private Map<Name, String> valuesAsNames = new HashMap<Name, String>();", "modifier": "private", "type": "Map<Name, String>", "declarator": "valuesAsNames = new HashMap<Name, String>()", "var_name": "valuesAsNames"}], "methods": [{"identifier": "NameAwareAttribute", "parameters": "(String id, Object value)", "modifiers": "public", "return": "", "signature": " NameAwareAttribute(String id, Object value)", "full_signature": "public  NameAwareAttribute(String id, Object value)", "class_method_signature": "NameAwareAttribute.NameAwareAttribute(String id, Object value)", "testcase": false, "constructor": true}, {"identifier": "NameAwareAttribute", "parameters": "(Attribute attribute)", "modifiers": "public", "return": "", "signature": " NameAwareAttribute(Attribute attribute)", "full_signature": "public  NameAwareAttribute(Attribute attribute)", "class_method_signature": "NameAwareAttribute.NameAwareAttribute(Attribute attribute)", "testcase": false, "constructor": true}, {"identifier": "NameAwareAttribute", "parameters": "(String id)", "modifiers": "public", "return": "", "signature": " NameAwareAttribute(String id)", "full_signature": "public  NameAwareAttribute(String id)", "class_method_signature": "NameAwareAttribute.NameAwareAttribute(String id)", "testcase": false, "constructor": true}, {"identifier": "NameAwareAttribute", "parameters": "(String id, boolean orderMatters)", "modifiers": "public", "return": "", "signature": " NameAwareAttribute(String id, boolean orderMatters)", "full_signature": "public  NameAwareAttribute(String id, boolean orderMatters)", "class_method_signature": "NameAwareAttribute.NameAwareAttribute(String id, boolean orderMatters)", "testcase": false, "constructor": true}, {"identifier": "getAll", "parameters": "()", "modifiers": "@Override public", "return": "NamingEnumeration<?>", "signature": "NamingEnumeration<?> getAll()", "full_signature": "@Override public NamingEnumeration<?> getAll()", "class_method_signature": "NameAwareAttribute.getAll()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object get()", "full_signature": "@Override public Object get()", "class_method_signature": "NameAwareAttribute.get()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "NameAwareAttribute.size()", "testcase": false, "constructor": false}, {"identifier": "getID", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getID()", "full_signature": "@Override public String getID()", "class_method_signature": "NameAwareAttribute.getID()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object attrVal)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Object attrVal)", "full_signature": "@Override public boolean contains(Object attrVal)", "class_method_signature": "NameAwareAttribute.contains(Object attrVal)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Object attrVal)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(Object attrVal)", "full_signature": "@Override public boolean add(Object attrVal)", "class_method_signature": "NameAwareAttribute.add(Object attrVal)", "testcase": false, "constructor": false}, {"identifier": "initValuesAsNames", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initValuesAsNames()", "full_signature": "public void initValuesAsNames()", "class_method_signature": "NameAwareAttribute.initValuesAsNames()", "testcase": false, "constructor": false}, {"identifier": "hasValuesAsNames", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasValuesAsNames()", "full_signature": "public boolean hasValuesAsNames()", "class_method_signature": "NameAwareAttribute.hasValuesAsNames()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object attrval)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(Object attrval)", "full_signature": "@Override public boolean remove(Object attrval)", "class_method_signature": "NameAwareAttribute.remove(Object attrval)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "NameAwareAttribute.clear()", "testcase": false, "constructor": false}, {"identifier": "getAttributeSyntaxDefinition", "parameters": "()", "modifiers": "@Override public", "return": "DirContext", "signature": "DirContext getAttributeSyntaxDefinition()", "full_signature": "@Override public DirContext getAttributeSyntaxDefinition()", "class_method_signature": "NameAwareAttribute.getAttributeSyntaxDefinition()", "testcase": false, "constructor": false}, {"identifier": "getAttributeDefinition", "parameters": "()", "modifiers": "@Override public", "return": "DirContext", "signature": "DirContext getAttributeDefinition()", "full_signature": "@Override public DirContext getAttributeDefinition()", "class_method_signature": "NameAwareAttribute.getAttributeDefinition()", "testcase": false, "constructor": false}, {"identifier": "isOrdered", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isOrdered()", "full_signature": "@Override public boolean isOrdered()", "class_method_signature": "NameAwareAttribute.isOrdered()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int ix)", "modifiers": "@Override public", "return": "Object", "signature": "Object get(int ix)", "full_signature": "@Override public Object get(int ix)", "class_method_signature": "NameAwareAttribute.get(int ix)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int ix)", "modifiers": "@Override public", "return": "Object", "signature": "Object remove(int ix)", "full_signature": "@Override public Object remove(int ix)", "class_method_signature": "NameAwareAttribute.remove(int ix)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int ix, Object attrVal)", "modifiers": "@Override public", "return": "void", "signature": "void add(int ix, Object attrVal)", "full_signature": "@Override public void add(int ix, Object attrVal)", "class_method_signature": "NameAwareAttribute.add(int ix, Object attrVal)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int ix, Object attrVal)", "modifiers": "@Override public", "return": "Object", "signature": "Object set(int ix, Object attrVal)", "full_signature": "@Override public Object set(int ix, Object attrVal)", "class_method_signature": "NameAwareAttribute.set(int ix, Object attrVal)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "NameAwareAttribute.clone()", "testcase": false, "constructor": false}, {"identifier": "populateValuesAsNames", "parameters": "(NameAwareAttribute from, NameAwareAttribute to)", "modifiers": "private", "return": "void", "signature": "void populateValuesAsNames(NameAwareAttribute from, NameAwareAttribute to)", "full_signature": "private void populateValuesAsNames(NameAwareAttribute from, NameAwareAttribute to)", "class_method_signature": "NameAwareAttribute.populateValuesAsNames(NameAwareAttribute from, NameAwareAttribute to)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "NameAwareAttribute.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "NameAwareAttribute.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "NameAwareAttribute.toString()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Object>", "signature": "Iterator<Object> iterator()", "full_signature": "@Override public Iterator<Object> iterator()", "class_method_signature": "NameAwareAttribute.iterator()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/core/NameAwareAttribute.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        NameAwareAttribute that = (NameAwareAttribute) o;\n\n        if (id != null ? !id.equals(that.id) : that.id != null) return false;\n        if(this.values.size() != that.values.size()) {\n            return false;\n        }\n\n        if(this.orderMatters != that.orderMatters || this.size() != that.size()) {\n            return false;\n        }\n\n        if(this.hasValuesAsNames() != that.hasValuesAsNames()) {\n            return false;\n        }\n\n        Set<?> myValues = this.values;\n        Set<?> theirValues = that.values;\n        if(this.hasValuesAsNames()) {\n            // We have Name values - compare these to get\n            // syntactically correct comparison of the values\n\n            myValues = this.valuesAsNames.keySet();\n            theirValues = that.valuesAsNames.keySet();\n        }\n\n        if(orderMatters) {\n            Iterator<?> thisIterator = myValues.iterator();\n            Iterator<?> thatIterator = theirValues.iterator();\n            while(thisIterator.hasNext()) {\n                if(!ObjectUtils.nullSafeEquals(thisIterator.next(), thatIterator.next())) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else {\n            for (Object value : myValues) {\n                if(!CollectionUtils.contains(theirValues.iterator(), value)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    }", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "NameAwareAttribute.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "equals", "size", "size", "size", "size", "hasValuesAsNames", "hasValuesAsNames", "hasValuesAsNames", "keySet", "keySet", "iterator", "iterator", "hasNext", "nullSafeEquals", "next", "next", "contains", "iterator"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}