{"test_class": {"identifier": "NonPlanarBondsTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/sdg/src/test/java/org/openscience/cdk/layout/NonPlanarBondsTest.java"}, "test_case": {"identifier": "dontCrossEtheneDoubleBond", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void dontCrossEtheneDoubleBond() {\n        IAtomContainer m = new AtomContainer();\n        m.addAtom(atom(\"C\", 2, 0.000, 0.000));\n        m.addAtom(atom(\"C\", 2, 1.299, -0.750));\n        m.addBond(0, 1, IBond.Order.DOUBLE);\n        NonplanarBonds.assign(m);\n        assertThat(m.getBond(0).getStereo(), is(IBond.Stereo.NONE));\n    }", "signature": "void dontCrossEtheneDoubleBond()", "full_signature": "@Test public void dontCrossEtheneDoubleBond()", "class_method_signature": "NonPlanarBondsTest.dontCrossEtheneDoubleBond()", "testcase": true, "constructor": false, "invocations": ["addAtom", "atom", "addAtom", "atom", "addBond", "assign", "assertThat", "getStereo", "getBond", "is"]}, "focal_class": {"identifier": "NonplanarBonds", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final IAtomContainer container;", "modifier": "private final", "type": "IAtomContainer", "declarator": "container", "var_name": "container"}, {"original_string": "private final int[][] graph;", "modifier": "private final", "type": "int[][]", "declarator": "graph", "var_name": "graph"}, {"original_string": "private final RingSearch ringSearch;", "modifier": "private final", "type": "RingSearch", "declarator": "ringSearch", "var_name": "ringSearch"}, {"original_string": "private final ITetrahedralChirality[] tetrahedralElements;", "modifier": "private final", "type": "ITetrahedralChirality[]", "declarator": "tetrahedralElements", "var_name": "tetrahedralElements"}, {"original_string": "private final IDoubleBondStereochemistry[] doubleBondElements;", "modifier": "private final", "type": "IDoubleBondStereochemistry[]", "declarator": "doubleBondElements", "var_name": "doubleBondElements"}, {"original_string": "private final Map<IAtom, Integer> atomToIndex;", "modifier": "private final", "type": "Map<IAtom, Integer>", "declarator": "atomToIndex", "var_name": "atomToIndex"}, {"original_string": "private final GraphUtil.EdgeToBondMap edgeToBond;", "modifier": "private final", "type": "GraphUtil.EdgeToBondMap", "declarator": "edgeToBond", "var_name": "edgeToBond"}], "methods": [{"identifier": "assign", "parameters": "(final IAtomContainer container)", "modifiers": "public static", "return": "IAtomContainer", "signature": "IAtomContainer assign(final IAtomContainer container)", "full_signature": "public static IAtomContainer assign(final IAtomContainer container)", "class_method_signature": "NonplanarBonds.assign(final IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "NonplanarBonds", "parameters": "(final IAtomContainer container, final int[][] g, final GraphUtil.EdgeToBondMap edgeToBond)", "modifiers": "", "return": "", "signature": " NonplanarBonds(final IAtomContainer container, final int[][] g, final GraphUtil.EdgeToBondMap edgeToBond)", "full_signature": "  NonplanarBonds(final IAtomContainer container, final int[][] g, final GraphUtil.EdgeToBondMap edgeToBond)", "class_method_signature": "NonplanarBonds.NonplanarBonds(final IAtomContainer container, final int[][] g, final GraphUtil.EdgeToBondMap edgeToBond)", "testcase": false, "constructor": true}, {"identifier": "rotate", "parameters": "(Point2d p, Point2d pivot, double cos, double sin)", "modifiers": "private", "return": "void", "signature": "void rotate(Point2d p, Point2d pivot, double cos, double sin)", "full_signature": "private void rotate(Point2d p, Point2d pivot, double cos, double sin)", "class_method_signature": "NonplanarBonds.rotate(Point2d p, Point2d pivot, double cos, double sin)", "testcase": false, "constructor": false}, {"identifier": "getRotated", "parameters": "(Point2d org, Point2d piviot, double theta)", "modifiers": "private", "return": "Point2d", "signature": "Point2d getRotated(Point2d org, Point2d piviot, double theta)", "full_signature": "private Point2d getRotated(Point2d org, Point2d piviot, double theta)", "class_method_signature": "NonplanarBonds.getRotated(Point2d org, Point2d piviot, double theta)", "testcase": false, "constructor": false}, {"identifier": "snapBondToPosition", "parameters": "(IAtom beg, IBond bond, Point2d tP)", "modifiers": "private", "return": "void", "signature": "void snapBondToPosition(IAtom beg, IBond bond, Point2d tP)", "full_signature": "private void snapBondToPosition(IAtom beg, IBond bond, Point2d tP)", "class_method_signature": "NonplanarBonds.snapBondToPosition(IAtom beg, IBond bond, Point2d tP)", "testcase": false, "constructor": false}, {"identifier": "modifyAndLabel", "parameters": "(SquarePlanar se)", "modifiers": "private", "return": "void", "signature": "void modifyAndLabel(SquarePlanar se)", "full_signature": "private void modifyAndLabel(SquarePlanar se)", "class_method_signature": "NonplanarBonds.modifyAndLabel(SquarePlanar se)", "testcase": false, "constructor": false}, {"identifier": "doMirror", "parameters": "(List<IAtom> atoms)", "modifiers": "private", "return": "boolean", "signature": "boolean doMirror(List<IAtom> atoms)", "full_signature": "private boolean doMirror(List<IAtom> atoms)", "class_method_signature": "NonplanarBonds.doMirror(List<IAtom> atoms)", "testcase": false, "constructor": false}, {"identifier": "modifyAndLabel", "parameters": "(TrigonalBipyramidal se)", "modifiers": "private", "return": "void", "signature": "void modifyAndLabel(TrigonalBipyramidal se)", "full_signature": "private void modifyAndLabel(TrigonalBipyramidal se)", "class_method_signature": "NonplanarBonds.modifyAndLabel(TrigonalBipyramidal se)", "testcase": false, "constructor": false}, {"identifier": "modifyAndLabel", "parameters": "(Octahedral oc)", "modifiers": "private", "return": "void", "signature": "void modifyAndLabel(Octahedral oc)", "full_signature": "private void modifyAndLabel(Octahedral oc)", "class_method_signature": "NonplanarBonds.modifyAndLabel(Octahedral oc)", "testcase": false, "constructor": false}, {"identifier": "flip", "parameters": "(IBond.Stereo disp)", "modifiers": "private", "return": "IBond.Stereo", "signature": "IBond.Stereo flip(IBond.Stereo disp)", "full_signature": "private IBond.Stereo flip(IBond.Stereo disp)", "class_method_signature": "NonplanarBonds.flip(IBond.Stereo disp)", "testcase": false, "constructor": false}, {"identifier": "setBondDisplay", "parameters": "(IBond bond, IAtom focus, IBond.Stereo display)", "modifiers": "private", "return": "void", "signature": "void setBondDisplay(IBond bond, IAtom focus, IBond.Stereo display)", "full_signature": "private void setBondDisplay(IBond bond, IAtom focus, IBond.Stereo display)", "class_method_signature": "NonplanarBonds.setBondDisplay(IBond bond, IAtom focus, IBond.Stereo display)", "testcase": false, "constructor": false}, {"identifier": "findBond", "parameters": "(IAtom beg1, IAtom beg2, IAtom end)", "modifiers": "private", "return": "IBond", "signature": "IBond findBond(IAtom beg1, IAtom beg2, IAtom end)", "full_signature": "private IBond findBond(IAtom beg1, IAtom beg2, IAtom end)", "class_method_signature": "NonplanarBonds.findBond(IAtom beg1, IAtom beg2, IAtom end)", "testcase": false, "constructor": false}, {"identifier": "setWedge", "parameters": "(IBond bond, IAtom end, IBond.Stereo style)", "modifiers": "private", "return": "void", "signature": "void setWedge(IBond bond, IAtom end, IBond.Stereo style)", "full_signature": "private void setWedge(IBond bond, IAtom end, IBond.Stereo style)", "class_method_signature": "NonplanarBonds.setWedge(IBond bond, IAtom end, IBond.Stereo style)", "testcase": false, "constructor": false}, {"identifier": "label", "parameters": "(final ExtendedTetrahedral element)", "modifiers": "private", "return": "void", "signature": "void label(final ExtendedTetrahedral element)", "full_signature": "private void label(final ExtendedTetrahedral element)", "class_method_signature": "NonplanarBonds.label(final ExtendedTetrahedral element)", "testcase": false, "constructor": false}, {"identifier": "label", "parameters": "(final Atropisomeric element)", "modifiers": "private", "return": "void", "signature": "void label(final Atropisomeric element)", "full_signature": "private void label(final Atropisomeric element)", "class_method_signature": "NonplanarBonds.label(final Atropisomeric element)", "testcase": false, "constructor": false}, {"identifier": "label", "parameters": "(final ITetrahedralChirality element)", "modifiers": "private", "return": "void", "signature": "void label(final ITetrahedralChirality element)", "full_signature": "private void label(final ITetrahedralChirality element)", "class_method_signature": "NonplanarBonds.label(final ITetrahedralChirality element)", "testcase": false, "constructor": false}, {"identifier": "assignTwoLabels", "parameters": "(IBond[] bonds, IBond.Stereo[] labels)", "modifiers": "private", "return": "boolean", "signature": "boolean assignTwoLabels(IBond[] bonds, IBond.Stereo[] labels)", "full_signature": "private boolean assignTwoLabels(IBond[] bonds, IBond.Stereo[] labels)", "class_method_signature": "NonplanarBonds.assignTwoLabels(IBond[] bonds, IBond.Stereo[] labels)", "testcase": false, "constructor": false}, {"identifier": "countRingBonds", "parameters": "(IBond[] bonds)", "modifiers": "private", "return": "int", "signature": "int countRingBonds(IBond[] bonds)", "full_signature": "private int countRingBonds(IBond[] bonds)", "class_method_signature": "NonplanarBonds.countRingBonds(IBond[] bonds)", "testcase": false, "constructor": false}, {"identifier": "indexParity", "parameters": "(int x)", "modifiers": "private", "return": "int", "signature": "int indexParity(int x)", "full_signature": "private int indexParity(int x)", "class_method_signature": "NonplanarBonds.indexParity(int x)", "testcase": false, "constructor": false}, {"identifier": "parity", "parameters": "(ITetrahedralChirality.Stereo stereo)", "modifiers": "private", "return": "int", "signature": "int parity(ITetrahedralChirality.Stereo stereo)", "full_signature": "private int parity(ITetrahedralChirality.Stereo stereo)", "class_method_signature": "NonplanarBonds.parity(ITetrahedralChirality.Stereo stereo)", "testcase": false, "constructor": false}, {"identifier": "nAdjacentCentres", "parameters": "(int i)", "modifiers": "private", "return": "int", "signature": "int nAdjacentCentres(int i)", "full_signature": "private int nAdjacentCentres(int i)", "class_method_signature": "NonplanarBonds.nAdjacentCentres(int i)", "testcase": false, "constructor": false}, {"identifier": "priority", "parameters": "(int focus, IAtom[] atoms, int n)", "modifiers": "private", "return": "int[]", "signature": "int[] priority(int focus, IAtom[] atoms, int n)", "full_signature": "private int[] priority(int focus, IAtom[] atoms, int n)", "class_method_signature": "NonplanarBonds.priority(int focus, IAtom[] atoms, int n)", "testcase": false, "constructor": false}, {"identifier": "isSp3Carbon", "parameters": "(IAtom atom, int deg)", "modifiers": "private", "return": "boolean", "signature": "boolean isSp3Carbon(IAtom atom, int deg)", "full_signature": "private boolean isSp3Carbon(IAtom atom, int deg)", "class_method_signature": "NonplanarBonds.isSp3Carbon(IAtom atom, int deg)", "testcase": false, "constructor": false}, {"identifier": "hasPriority", "parameters": "(int focus, int i, int j)", "modifiers": "", "return": "boolean", "signature": "boolean hasPriority(int focus, int i, int j)", "full_signature": " boolean hasPriority(int focus, int i, int j)", "class_method_signature": "NonplanarBonds.hasPriority(int focus, int i, int j)", "testcase": false, "constructor": false}, {"identifier": "sortClockwise", "parameters": "(int[] indices, IAtom focus, IAtom[] atoms, int n)", "modifiers": "private", "return": "int", "signature": "int sortClockwise(int[] indices, IAtom focus, IAtom[] atoms, int n)", "full_signature": "private int sortClockwise(int[] indices, IAtom focus, IAtom[] atoms, int n)", "class_method_signature": "NonplanarBonds.sortClockwise(int[] indices, IAtom focus, IAtom[] atoms, int n)", "testcase": false, "constructor": false}, {"identifier": "less", "parameters": "(int i, int j, IAtom[] atoms, Point2d center)", "modifiers": "static", "return": "boolean", "signature": "boolean less(int i, int j, IAtom[] atoms, Point2d center)", "full_signature": "static boolean less(int i, int j, IAtom[] atoms, Point2d center)", "class_method_signature": "NonplanarBonds.less(int i, int j, IAtom[] atoms, Point2d center)", "testcase": false, "constructor": false}, {"identifier": "labelUnspecified", "parameters": "(IBond doubleBond)", "modifiers": "private", "return": "void", "signature": "void labelUnspecified(IBond doubleBond)", "full_signature": "private void labelUnspecified(IBond doubleBond)", "class_method_signature": "NonplanarBonds.labelUnspecified(IBond doubleBond)", "testcase": false, "constructor": false}, {"identifier": "isCisTransEndPoint", "parameters": "(int idx)", "modifiers": "private", "return": "boolean", "signature": "boolean isCisTransEndPoint(int idx)", "full_signature": "private boolean isCisTransEndPoint(int idx)", "class_method_signature": "NonplanarBonds.isCisTransEndPoint(int idx)", "testcase": false, "constructor": false}, {"identifier": "getBondTypes", "parameters": "(int idx)", "modifiers": "private", "return": "int", "signature": "int getBondTypes(int idx)", "full_signature": "private int getBondTypes(int idx)", "class_method_signature": "NonplanarBonds.getBondTypes(int idx)", "testcase": false, "constructor": false}, {"identifier": "findUnspecifiedDoubleBonds", "parameters": "(int[][] adjList)", "modifiers": "private", "return": "List<IBond>", "signature": "List<IBond> findUnspecifiedDoubleBonds(int[][] adjList)", "full_signature": "private List<IBond> findUnspecifiedDoubleBonds(int[][] adjList)", "class_method_signature": "NonplanarBonds.findUnspecifiedDoubleBonds(int[][] adjList)", "testcase": false, "constructor": false}, {"identifier": "hasLinearEqualPaths", "parameters": "(int[][] adjList, int start, int prev)", "modifiers": "private", "return": "boolean", "signature": "boolean hasLinearEqualPaths(int[][] adjList, int start, int prev)", "full_signature": "private boolean hasLinearEqualPaths(int[][] adjList, int start, int prev)", "class_method_signature": "NonplanarBonds.hasLinearEqualPaths(int[][] adjList, int start, int prev)", "testcase": false, "constructor": false}, {"identifier": "notEqual", "parameters": "(Integer a, Integer b)", "modifiers": "private", "return": "boolean", "signature": "boolean notEqual(Integer a, Integer b)", "full_signature": "private boolean notEqual(Integer a, Integer b)", "class_method_signature": "NonplanarBonds.notEqual(Integer a, Integer b)", "testcase": false, "constructor": false}, {"identifier": "hasOnlyPlainBonds", "parameters": "(int v, IBond allowedDoubleBond)", "modifiers": "private", "return": "boolean", "signature": "boolean hasOnlyPlainBonds(int v, IBond allowedDoubleBond)", "full_signature": "private boolean hasOnlyPlainBonds(int v, IBond allowedDoubleBond)", "class_method_signature": "NonplanarBonds.hasOnlyPlainBonds(int v, IBond allowedDoubleBond)", "testcase": false, "constructor": false}], "file": "tool/sdg/src/main/java/org/openscience/cdk/layout/NonplanarBonds.java"}, "focal_method": {"identifier": "assign", "parameters": "(final IAtomContainer container)", "modifiers": "public static", "return": "IAtomContainer", "body": "public static IAtomContainer assign(final IAtomContainer container) {\n        GraphUtil.EdgeToBondMap edgeToBond = GraphUtil.EdgeToBondMap.withSpaceFor(container);\n        new NonplanarBonds(container, GraphUtil.toAdjList(container, edgeToBond), edgeToBond);\n        return container;\n    }", "signature": "IAtomContainer assign(final IAtomContainer container)", "full_signature": "public static IAtomContainer assign(final IAtomContainer container)", "class_method_signature": "NonplanarBonds.assign(final IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["withSpaceFor", "toAdjList"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}