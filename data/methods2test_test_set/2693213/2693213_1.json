{"test_class": {"identifier": "SoapCallFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger log = LoggerFactory.getLogger(SoapCallFactoryTest.class);", "modifier": "private final static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SoapCallFactoryTest.class)", "var_name": "log"}, {"original_string": "private SoapCallFactory soapCallFactory;", "modifier": "private", "type": "SoapCallFactory", "declarator": "soapCallFactory", "var_name": "soapCallFactory"}], "file": "connector/src/test/java/net/magja/soap/SoapCallFactoryTest.java"}, "test_case": {"identifier": "createCallList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void createCallList() {\n    List<Serializable> args = ImmutableList.of(2, ImmutableMap.of(\"name\", \"Bandana\", \"description\", \"Bandana keren untuk penampilan Anda\"));\n    OMElement element = soapCallFactory.createCall(\"abc\", \"catalog_category.create\", args);\n    log.info(\"createCallList {}\", element);\n    assertNotNull(element);\n    assertEquals(3, Iterators.size(element.getChildElements()));\n  }", "signature": "void createCallList()", "full_signature": "@Test public void createCallList()", "class_method_signature": "SoapCallFactoryTest.createCallList()", "testcase": true, "constructor": false, "invocations": ["of", "of", "createCall", "info", "assertNotNull", "assertEquals", "size", "getChildElements"]}, "focal_class": {"identifier": "SoapCallFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CORE_LOGIN = \"login\";", "modifier": "private static final", "type": "String", "declarator": "CORE_LOGIN = \"login\"", "var_name": "CORE_LOGIN"}, {"original_string": "private static final String CORE_CALL = \"call\";", "modifier": "private static final", "type": "String", "declarator": "CORE_CALL = \"call\"", "var_name": "CORE_CALL"}, {"original_string": "private static final String CORE_MULTI_CALL = \"multiCall\";", "modifier": "private static final", "type": "String", "declarator": "CORE_MULTI_CALL = \"multiCall\"", "var_name": "CORE_MULTI_CALL"}, {"original_string": "private static final String CORE_LOGOUT = \"endSession\";", "modifier": "private static final", "type": "String", "declarator": "CORE_LOGOUT = \"endSession\"", "var_name": "CORE_LOGOUT"}, {"original_string": "private static final String SESSION_ID = \"sessionId\";", "modifier": "private static final", "type": "String", "declarator": "SESSION_ID = \"sessionId\"", "var_name": "SESSION_ID"}, {"original_string": "private static final String RESOURCE_PATH = \"resourcePath\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE_PATH = \"resourcePath\"", "var_name": "RESOURCE_PATH"}, {"original_string": "private static final String ARGUMENTS = \"args\";", "modifier": "private static final", "type": "String", "declarator": "ARGUMENTS = \"args\"", "var_name": "ARGUMENTS"}, {"original_string": "private static final String MULTI_CALLS = \"calls\";", "modifier": "private static final", "type": "String", "declarator": "MULTI_CALLS = \"calls\"", "var_name": "MULTI_CALLS"}, {"original_string": "private static final String MULTI_CALL_OPTIONS = \"options\";", "modifier": "private static final", "type": "String", "declarator": "MULTI_CALL_OPTIONS = \"options\"", "var_name": "MULTI_CALL_OPTIONS"}, {"original_string": "private OMFactory fac;", "modifier": "private", "type": "OMFactory", "declarator": "fac", "var_name": "fac"}, {"original_string": "private OMNamespace noNs;", "modifier": "private", "type": "OMNamespace", "declarator": "noNs", "var_name": "noNs"}, {"original_string": "private OMNamespace mag;", "modifier": "private", "type": "OMNamespace", "declarator": "mag", "var_name": "mag"}, {"original_string": "private OMNamespace soapEnc;", "modifier": "private", "type": "OMNamespace", "declarator": "soapEnc", "var_name": "soapEnc"}, {"original_string": "private OMNamespace soapXml;", "modifier": "private", "type": "OMNamespace", "declarator": "soapXml", "var_name": "soapXml"}, {"original_string": "private OMNamespace xsi;", "modifier": "private", "type": "OMNamespace", "declarator": "xsi", "var_name": "xsi"}, {"original_string": "private OMNamespace xsd;", "modifier": "private", "type": "OMNamespace", "declarator": "xsd", "var_name": "xsd"}], "methods": [{"identifier": "SoapCallFactory", "parameters": "(OMMetaFactory omMetaFactory)", "modifiers": "public", "return": "", "signature": " SoapCallFactory(OMMetaFactory omMetaFactory)", "full_signature": "public  SoapCallFactory(OMMetaFactory omMetaFactory)", "class_method_signature": "SoapCallFactory.SoapCallFactory(OMMetaFactory omMetaFactory)", "testcase": false, "constructor": true}, {"identifier": "SoapCallFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " SoapCallFactory()", "full_signature": "public  SoapCallFactory()", "class_method_signature": "SoapCallFactory.SoapCallFactory()", "testcase": false, "constructor": true}, {"identifier": "createLoginCall", "parameters": "(String user, String password)", "modifiers": "public", "return": "OMElement", "signature": "OMElement createLoginCall(String user, String password)", "full_signature": "public OMElement createLoginCall(String user, String password)", "class_method_signature": "SoapCallFactory.createLoginCall(String user, String password)", "testcase": false, "constructor": false}, {"identifier": "createLogoutCall", "parameters": "(String sessionId)", "modifiers": "public", "return": "OMElement", "signature": "OMElement createLogoutCall(String sessionId)", "full_signature": "public OMElement createLogoutCall(String sessionId)", "class_method_signature": "SoapCallFactory.createLogoutCall(String sessionId)", "testcase": false, "constructor": false}, {"identifier": "createCall", "parameters": "(String sessionId, String methodPath, Object arg)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "OMElement", "signature": "OMElement createCall(String sessionId, String methodPath, Object arg)", "full_signature": "@SuppressWarnings(\"unchecked\") public OMElement createCall(String sessionId, String methodPath, Object arg)", "class_method_signature": "SoapCallFactory.createCall(String sessionId, String methodPath, Object arg)", "testcase": false, "constructor": false}, {"identifier": "typedElement", "parameters": "(OMNamespace elementNs, String name, Object value)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "OMElement", "signature": "OMElement typedElement(OMNamespace elementNs, String name, Object value)", "full_signature": "@SuppressWarnings(\"unchecked\") private OMElement typedElement(OMNamespace elementNs, String name, Object value)", "class_method_signature": "SoapCallFactory.typedElement(OMNamespace elementNs, String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "typedElement", "parameters": "(OMNamespace elementNs, String name, String value, String valueType)", "modifiers": "private", "return": "OMElement", "signature": "OMElement typedElement(OMNamespace elementNs, String name, String value, String valueType)", "full_signature": "private OMElement typedElement(OMNamespace elementNs, String name, String value, String valueType)", "class_method_signature": "SoapCallFactory.typedElement(OMNamespace elementNs, String name, String value, String valueType)", "testcase": false, "constructor": false}, {"identifier": "keyValue", "parameters": "(Object key, Object value)", "modifiers": "private", "return": "OMElement", "signature": "OMElement keyValue(Object key, Object value)", "full_signature": "private OMElement keyValue(Object key, Object value)", "class_method_signature": "SoapCallFactory.keyValue(Object key, Object value)", "testcase": false, "constructor": false}], "file": "connector/src/main/java/net/magja/soap/SoapCallFactory.java"}, "focal_method": {"identifier": "createCall", "parameters": "(String sessionId, String methodPath, Object arg)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "OMElement", "body": "@SuppressWarnings(\"unchecked\")\n  public OMElement createCall(String sessionId, String methodPath, Object arg) {\n    OMElement method = fac.createOMElement(CORE_CALL, mag);\n\n    // Register XML namespaces in method\n    method.declareNamespace(soapEnc);\n    method.declareNamespace(soapXml);\n    method.declareNamespace(xsi);\n    method.declareNamespace(xsd);\n\n    OMElement paramSession = fac.createOMElement(SESSION_ID, noNs);\n    paramSession.addChild(fac.createOMText(paramSession, sessionId));\n    method.addChild(paramSession);\n\n    OMElement resourcePath = fac.createOMElement(RESOURCE_PATH, noNs);\n    resourcePath.addChild(fac.createOMText(resourcePath, methodPath));\n    method.addChild(resourcePath);\n\n    OMElement paramArgs;\n    if (arg instanceof Iterable) {\n      Iterable<Object> args = (Iterable<Object>) arg;\n      paramArgs = fac.createOMElement(ARGUMENTS, noNs);\n      paramArgs.addAttribute(\"arrayType\", xsd.getPrefix() + \":ur-type[\" + Iterables.size(args) + \"]\", soapEnc);\n      paramArgs.addAttribute(\"type\", soapEnc.getPrefix() + \":Array\", xsi);\n\n      for (Object argument : args) {\n        paramArgs.addChild(typedElement(noNs, \"item\", argument));\n      }\n    } else if (arg instanceof Map) {\n      Map<String, Object> args = (Map<String, Object>) arg;\n      paramArgs = typedElement(noNs, ARGUMENTS, arg);\n      paramArgs.addAttribute(\"arrayType\", xsd.getPrefix() + \":Map[\" + args.size() + \"]\", soapEnc);\n      paramArgs.addAttribute(\"type\", soapEnc.getPrefix() + \":Array\", xsi);\n    } else if (arg != null && (arg.getClass().isArray() || arg.getClass().getName().equals(\"sun.org.mozilla.javascript.internal.NativeArray\"))) {\n      Object[] args = (Object[]) arg;\n      paramArgs = fac.createOMElement(ARGUMENTS, noNs);\n      paramArgs.addAttribute(\"arrayType\", xsd.getPrefix() + \":ur-type[\" + args.length + \"]\", soapEnc);\n      paramArgs.addAttribute(\"type\", soapEnc.getPrefix() + \":Array\", xsi);\n\n      for (Object argument : args) {\n        paramArgs.addChild(typedElement(noNs, \"item\", argument));\n      }\n    } else {\n      paramArgs = typedElement(noNs, ARGUMENTS, arg);\n    }\n    method.addChild(paramArgs);\n\n    return method;\n  }", "signature": "OMElement createCall(String sessionId, String methodPath, Object arg)", "full_signature": "@SuppressWarnings(\"unchecked\") public OMElement createCall(String sessionId, String methodPath, Object arg)", "class_method_signature": "SoapCallFactory.createCall(String sessionId, String methodPath, Object arg)", "testcase": false, "constructor": false, "invocations": ["createOMElement", "declareNamespace", "declareNamespace", "declareNamespace", "declareNamespace", "createOMElement", "addChild", "createOMText", "addChild", "createOMElement", "addChild", "createOMText", "addChild", "createOMElement", "addAttribute", "getPrefix", "size", "addAttribute", "getPrefix", "addChild", "typedElement", "typedElement", "addAttribute", "getPrefix", "size", "addAttribute", "getPrefix", "isArray", "getClass", "equals", "getName", "getClass", "createOMElement", "addAttribute", "getPrefix", "addAttribute", "getPrefix", "addChild", "typedElement", "typedElement", "addChild"]}, "repository": {"repo_id": 2693213, "url": "https://github.com/magja/magja", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 44, "size": 1462, "license": "licensed"}}