{"test_class": {"identifier": "TimedAnnotationNameStrategyTest", "superclass": "extends AbstractStrategyTest", "interfaces": "", "fields": [{"original_string": "private TimedAnnotationNameStrategy timedAnnotationNameStrategy = new TimedAnnotationNameStrategy();", "modifier": "private", "type": "TimedAnnotationNameStrategy", "declarator": "timedAnnotationNameStrategy = new TimedAnnotationNameStrategy()", "var_name": "timedAnnotationNameStrategy"}], "file": "metrics-jdbi3/src/test/java/com/codahale/metrics/jdbi3/strategies/TimedAnnotationNameStrategyTest.java"}, "test_case": {"identifier": "testAnnotationOnMethodWithCustomName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAnnotationOnMethodWithCustomName() throws Exception {\n        when(ctx.getExtensionMethod()).thenReturn(new ExtensionMethod(Foo.class, Foo.class.getMethod(\"customUpdate\")));\n        assertThat(timedAnnotationNameStrategy.getStatementName(ctx))\n                .isEqualTo(\"com.codahale.metrics.jdbi3.strategies.TimedAnnotationNameStrategyTest$Foo.custom-update\");\n    }", "signature": "void testAnnotationOnMethodWithCustomName()", "full_signature": "@Test public void testAnnotationOnMethodWithCustomName()", "class_method_signature": "TimedAnnotationNameStrategyTest.testAnnotationOnMethodWithCustomName()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getExtensionMethod", "getMethod", "isEqualTo", "assertThat", "getStatementName"]}, "focal_class": {"identifier": "TimedAnnotationNameStrategy", "superclass": "", "interfaces": "implements StatementNameStrategy", "fields": [], "methods": [{"identifier": "getStatementName", "parameters": "(StatementContext statementContext)", "modifiers": "@Override public", "return": "String", "signature": "String getStatementName(StatementContext statementContext)", "full_signature": "@Override public String getStatementName(StatementContext statementContext)", "class_method_signature": "TimedAnnotationNameStrategy.getStatementName(StatementContext statementContext)", "testcase": false, "constructor": false}], "file": "metrics-jdbi3/src/main/java/com/codahale/metrics/jdbi3/strategies/TimedAnnotationNameStrategy.java"}, "focal_method": {"identifier": "getStatementName", "parameters": "(StatementContext statementContext)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getStatementName(StatementContext statementContext) {\n        final ExtensionMethod extensionMethod = statementContext.getExtensionMethod();\n        if (extensionMethod == null) {\n            return null;\n        }\n\n        final Class<?> clazz = extensionMethod.getType();\n        final Timed classTimed = clazz.getAnnotation(Timed.class);\n        final Method method = extensionMethod.getMethod();\n        final Timed methodTimed = method.getAnnotation(Timed.class);\n\n        // If the method is timed, figure out the name\n        if (methodTimed != null) {\n            String methodName = methodTimed.name().isEmpty() ? method.getName() : methodTimed.name();\n            if (methodTimed.absolute()) {\n                return methodName;\n            } else {\n                // We need to check if the class has a custom timer name\n                return classTimed == null || classTimed.name().isEmpty() ?\n                        MetricRegistry.name(clazz, methodName) :\n                        MetricRegistry.name(classTimed.name(), methodName);\n            }\n        } else if (classTimed != null) {\n            // Maybe the class is timed?\n            return classTimed.name().isEmpty() ? MetricRegistry.name(clazz, method.getName()) :\n                    MetricRegistry.name(classTimed.name(), method.getName());\n        } else {\n            // No timers neither on the method or the class\n            return null;\n        }\n    }", "signature": "String getStatementName(StatementContext statementContext)", "full_signature": "@Override public String getStatementName(StatementContext statementContext)", "class_method_signature": "TimedAnnotationNameStrategy.getStatementName(StatementContext statementContext)", "testcase": false, "constructor": false, "invocations": ["getExtensionMethod", "getType", "getAnnotation", "getMethod", "getAnnotation", "isEmpty", "name", "getName", "name", "absolute", "isEmpty", "name", "name", "name", "name", "isEmpty", "name", "name", "getName", "name", "name", "getName"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}