{"test_class": {"identifier": "RangeImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/runtime/impl/RangeImplTest.java"}, "test_case": {"identifier": "hashCodeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void hashCodeTest() {\n        final RangeImpl rangeImpl = new RangeImpl(Range.RangeBoundary.OPEN, 10, 15, Range.RangeBoundary.OPEN);\n        Assert.assertEquals(rangeImpl.hashCode(), rangeImpl.hashCode());\n\n        RangeImpl rangeImpl2 = new RangeImpl(Range.RangeBoundary.OPEN, 10, 15, Range.RangeBoundary.OPEN);\n        Assert.assertEquals(rangeImpl.hashCode(), rangeImpl2.hashCode());\n\n        rangeImpl2 = new RangeImpl(Range.RangeBoundary.OPEN, 10, 15, Range.RangeBoundary.CLOSED);\n        Assert.assertNotEquals(rangeImpl.hashCode(), rangeImpl2.hashCode());\n        rangeImpl2 = new RangeImpl(Range.RangeBoundary.CLOSED, 10, 15, Range.RangeBoundary.OPEN);\n        Assert.assertNotEquals(rangeImpl.hashCode(), rangeImpl2.hashCode());\n        rangeImpl2 = new RangeImpl(Range.RangeBoundary.CLOSED, 10, 15, Range.RangeBoundary.CLOSED);\n        Assert.assertNotEquals(rangeImpl.hashCode(), rangeImpl2.hashCode());\n        rangeImpl2 = new RangeImpl(Range.RangeBoundary.CLOSED, 12, 15, Range.RangeBoundary.CLOSED);\n        Assert.assertNotEquals(rangeImpl.hashCode(), rangeImpl2.hashCode());\n        rangeImpl2 = new RangeImpl(Range.RangeBoundary.CLOSED, 12, 17, Range.RangeBoundary.CLOSED);\n        Assert.assertNotEquals(rangeImpl.hashCode(), rangeImpl2.hashCode());\n    }", "signature": "void hashCodeTest()", "full_signature": "@Test public void hashCodeTest()", "class_method_signature": "RangeImplTest.hashCodeTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "hashCode", "hashCode", "assertEquals", "hashCode", "hashCode", "assertNotEquals", "hashCode", "hashCode", "assertNotEquals", "hashCode", "hashCode", "assertNotEquals", "hashCode", "hashCode", "assertNotEquals", "hashCode", "hashCode", "assertNotEquals", "hashCode", "hashCode"]}, "focal_class": {"identifier": "RangeImpl", "superclass": "", "interfaces": "implements Range", "fields": [{"original_string": "private RangeBoundary lowBoundary;", "modifier": "private", "type": "RangeBoundary", "declarator": "lowBoundary", "var_name": "lowBoundary"}, {"original_string": "private RangeBoundary highBoundary;", "modifier": "private", "type": "RangeBoundary", "declarator": "highBoundary", "var_name": "highBoundary"}, {"original_string": "private Comparable    lowEndPoint;", "modifier": "private", "type": "Comparable", "declarator": "lowEndPoint", "var_name": "lowEndPoint"}, {"original_string": "private Comparable    highEndPoint;", "modifier": "private", "type": "Comparable", "declarator": "highEndPoint", "var_name": "highEndPoint"}], "methods": [{"identifier": "RangeImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " RangeImpl()", "full_signature": "public  RangeImpl()", "class_method_signature": "RangeImpl.RangeImpl()", "testcase": false, "constructor": true}, {"identifier": "RangeImpl", "parameters": "(RangeBoundary lowBoundary, Comparable lowEndPoint, Comparable highEndPoint, RangeBoundary highBoundary)", "modifiers": "public", "return": "", "signature": " RangeImpl(RangeBoundary lowBoundary, Comparable lowEndPoint, Comparable highEndPoint, RangeBoundary highBoundary)", "full_signature": "public  RangeImpl(RangeBoundary lowBoundary, Comparable lowEndPoint, Comparable highEndPoint, RangeBoundary highBoundary)", "class_method_signature": "RangeImpl.RangeImpl(RangeBoundary lowBoundary, Comparable lowEndPoint, Comparable highEndPoint, RangeBoundary highBoundary)", "testcase": false, "constructor": true}, {"identifier": "getLowBoundary", "parameters": "()", "modifiers": "@Override public", "return": "RangeBoundary", "signature": "RangeBoundary getLowBoundary()", "full_signature": "@Override public RangeBoundary getLowBoundary()", "class_method_signature": "RangeImpl.getLowBoundary()", "testcase": false, "constructor": false}, {"identifier": "getLowEndPoint", "parameters": "()", "modifiers": "@Override public", "return": "Comparable", "signature": "Comparable getLowEndPoint()", "full_signature": "@Override public Comparable getLowEndPoint()", "class_method_signature": "RangeImpl.getLowEndPoint()", "testcase": false, "constructor": false}, {"identifier": "getHighEndPoint", "parameters": "()", "modifiers": "@Override public", "return": "Comparable", "signature": "Comparable getHighEndPoint()", "full_signature": "@Override public Comparable getHighEndPoint()", "class_method_signature": "RangeImpl.getHighEndPoint()", "testcase": false, "constructor": false}, {"identifier": "getHighBoundary", "parameters": "()", "modifiers": "@Override public", "return": "RangeBoundary", "signature": "RangeBoundary getHighBoundary()", "full_signature": "@Override public RangeBoundary getHighBoundary()", "class_method_signature": "RangeImpl.getHighBoundary()", "testcase": false, "constructor": false}, {"identifier": "includes", "parameters": "(Object param)", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean includes(Object param)", "full_signature": "@Override public Boolean includes(Object param)", "class_method_signature": "RangeImpl.includes(Object param)", "testcase": false, "constructor": false}, {"identifier": "finiteRangeIncludes", "parameters": "(Object param)", "modifiers": "private", "return": "Boolean", "signature": "Boolean finiteRangeIncludes(Object param)", "full_signature": "private Boolean finiteRangeIncludes(Object param)", "class_method_signature": "RangeImpl.finiteRangeIncludes(Object param)", "testcase": false, "constructor": false}, {"identifier": "posInfRangeIncludes", "parameters": "(Object param)", "modifiers": "private", "return": "Boolean", "signature": "Boolean posInfRangeIncludes(Object param)", "full_signature": "private Boolean posInfRangeIncludes(Object param)", "class_method_signature": "RangeImpl.posInfRangeIncludes(Object param)", "testcase": false, "constructor": false}, {"identifier": "negInfRangeIncludes", "parameters": "(Object param)", "modifiers": "private", "return": "Boolean", "signature": "Boolean negInfRangeIncludes(Object param)", "full_signature": "private Boolean negInfRangeIncludes(Object param)", "class_method_signature": "RangeImpl.negInfRangeIncludes(Object param)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "RangeImpl.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RangeImpl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RangeImpl.toString()", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/impl/RangeImpl.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int hashCode() {\n        int result = lowBoundary != null ? lowBoundary.hashCode() : 0;\n        result = 31 * result + (highBoundary != null ? highBoundary.hashCode() : 0);\n        result = 31 * result + (lowEndPoint != null ? lowEndPoint.hashCode() : 0);\n        result = 31 * result + (highEndPoint != null ? highEndPoint.hashCode() : 0);\n        return result;\n    }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RangeImpl.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode", "hashCode", "hashCode", "hashCode"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}