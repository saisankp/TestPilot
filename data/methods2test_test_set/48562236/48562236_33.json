{"test_class": {"identifier": "ShortUUIDTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/util/ShortUUIDTest.java"}, "test_case": {"identifier": "testDecoding", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecoding() {\n        String[][] tests = getTests();\n        for (String[] test : tests) {\n            assertEquals(test[0], ShortUUID.decode(test[1]));\n        }\n    }", "signature": "void testDecoding()", "full_signature": "@Test public void testDecoding()", "class_method_signature": "ShortUUIDTest.testDecoding()", "testcase": true, "constructor": false, "invocations": ["getTests", "assertEquals", "decode"]}, "focal_class": {"identifier": "ShortUUID", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char[] ALPHABET     = \"23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\".toCharArray();", "modifier": "private static final", "type": "char[]", "declarator": "ALPHABET     = \"23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\".toCharArray()", "var_name": "ALPHABET"}, {"original_string": "private static final int    ALPHABET_LEN = ALPHABET.length;", "modifier": "private static final", "type": "int", "declarator": "ALPHABET_LEN = ALPHABET.length", "var_name": "ALPHABET_LEN"}], "methods": [{"identifier": "randomUUID", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String randomUUID()", "full_signature": "public static String randomUUID()", "class_method_signature": "ShortUUID.randomUUID()", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(String longUUID)", "modifiers": "public static", "return": "String", "signature": "String encode(String longUUID)", "full_signature": "public static String encode(String longUUID)", "class_method_signature": "ShortUUID.encode(String longUUID)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String shortUUID)", "modifiers": "public static", "return": "String", "signature": "String decode(String shortUUID)", "full_signature": "public static String decode(String shortUUID)", "class_method_signature": "ShortUUID.decode(String shortUUID)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(final BigInteger bigInt, final char[] alphabet, final int padToLen)", "modifiers": "private static", "return": "String", "signature": "String encode(final BigInteger bigInt, final char[] alphabet, final int padToLen)", "full_signature": "private static String encode(final BigInteger bigInt, final char[] alphabet, final int padToLen)", "class_method_signature": "ShortUUID.encode(final BigInteger bigInt, final char[] alphabet, final int padToLen)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(final char[] encoded, final char[] alphabet)", "modifiers": "private static", "return": "String", "signature": "String decode(final char[] encoded, final char[] alphabet)", "full_signature": "private static String decode(final char[] encoded, final char[] alphabet)", "class_method_signature": "ShortUUID.decode(final char[] encoded, final char[] alphabet)", "testcase": false, "constructor": false}], "file": "base/lang/src/main/java/leap/lang/util/ShortUUID.java"}, "focal_method": {"identifier": "decode", "parameters": "(String shortUUID)", "modifiers": "public static", "return": "String", "body": "public static String decode(String shortUUID) {\n        return decode(shortUUID.toCharArray(), ALPHABET);\n    }", "signature": "String decode(String shortUUID)", "full_signature": "public static String decode(String shortUUID)", "class_method_signature": "ShortUUID.decode(String shortUUID)", "testcase": false, "constructor": false, "invocations": ["decode", "toCharArray"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}