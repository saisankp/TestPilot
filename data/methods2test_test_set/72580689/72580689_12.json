{"test_class": {"identifier": "TextLayoutBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST = \"TEST\";", "modifier": "private static final", "type": "String", "declarator": "TEST = \"TEST\"", "var_name": "TEST"}, {"original_string": "private static final String LONG_TEXT =\n      \"Lorem ipsum dolor sit amet test \\n\"\n          + \"Lorem ipsum dolor sit amet test \\n\"\n          + \"Lorem ipsum dolor sit amet test \\n\"\n          + \"Lorem ipsum dolor sit amet test \\n\";", "modifier": "private static final", "type": "String", "declarator": "LONG_TEXT =\n      \"Lorem ipsum dolor sit amet test \\n\"\n          + \"Lorem ipsum dolor sit amet test \\n\"\n          + \"Lorem ipsum dolor sit amet test \\n\"\n          + \"Lorem ipsum dolor sit amet test \\n\"", "var_name": "LONG_TEXT"}, {"original_string": "private TextLayoutBuilder mBuilder;", "modifier": "private", "type": "TextLayoutBuilder", "declarator": "mBuilder", "var_name": "mBuilder"}, {"original_string": "private Layout mLayout;", "modifier": "private", "type": "Layout", "declarator": "mLayout", "var_name": "mLayout"}], "file": "library/src/test/java/com/facebook/fbui/textlayoutbuilder/TextLayoutBuilderTest.java"}, "test_case": {"identifier": "testSetTextSpacingMultiplier", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSetTextSpacingMultiplier() {\n    mLayout = mBuilder.setTextSpacingMultiplier(1.5f).build();\n    assertEquals(mBuilder.getTextSpacingMultiplier(), 1.5f, 0.0f);\n    assertEquals(mLayout.getSpacingMultiplier(), 1.5f, 0.0f);\n  }", "signature": "void testSetTextSpacingMultiplier()", "full_signature": "@Test public void testSetTextSpacingMultiplier()", "class_method_signature": "TextLayoutBuilderTest.testSetTextSpacingMultiplier()", "testcase": true, "constructor": false, "invocations": ["build", "setTextSpacingMultiplier", "assertEquals", "getTextSpacingMultiplier", "assertEquals", "getSpacingMultiplier"]}, "focal_class": {"identifier": "TextLayoutBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MEASURE_MODE_UNSPECIFIED = 0;", "modifier": "public static final", "type": "int", "declarator": "MEASURE_MODE_UNSPECIFIED = 0", "var_name": "MEASURE_MODE_UNSPECIFIED"}, {"original_string": "public static final int MEASURE_MODE_EXACTLY = 1;", "modifier": "public static final", "type": "int", "declarator": "MEASURE_MODE_EXACTLY = 1", "var_name": "MEASURE_MODE_EXACTLY"}, {"original_string": "public static final int MEASURE_MODE_AT_MOST = 2;", "modifier": "public static final", "type": "int", "declarator": "MEASURE_MODE_AT_MOST = 2", "var_name": "MEASURE_MODE_AT_MOST"}, {"original_string": "public static final int DEFAULT_MAX_LINES = Integer.MAX_VALUE;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_MAX_LINES = Integer.MAX_VALUE", "var_name": "DEFAULT_MAX_LINES"}, {"original_string": "private static final float DEFAULT_SPACING_ADD = 0.0f;", "modifier": "private static final", "type": "float", "declarator": "DEFAULT_SPACING_ADD = 0.0f", "var_name": "DEFAULT_SPACING_ADD"}, {"original_string": "private static final float DEFAULT_SPACING_MULT = 1.0f;", "modifier": "private static final", "type": "float", "declarator": "DEFAULT_SPACING_MULT = 1.0f", "var_name": "DEFAULT_SPACING_MULT"}, {"original_string": "private static final float DEFAULT_LINE_HEIGHT = Float.MAX_VALUE;", "modifier": "private static final", "type": "float", "declarator": "DEFAULT_LINE_HEIGHT = Float.MAX_VALUE", "var_name": "DEFAULT_LINE_HEIGHT"}, {"original_string": "private static final int EMS = 1;", "modifier": "private static final", "type": "int", "declarator": "EMS = 1", "var_name": "EMS"}, {"original_string": "private static final int PIXELS = 2;", "modifier": "private static final", "type": "int", "declarator": "PIXELS = 2", "var_name": "PIXELS"}, {"original_string": "private int mMinWidth = 0;", "modifier": "private", "type": "int", "declarator": "mMinWidth = 0", "var_name": "mMinWidth"}, {"original_string": "private int mMinWidthMode = PIXELS;", "modifier": "private", "type": "int", "declarator": "mMinWidthMode = PIXELS", "var_name": "mMinWidthMode"}, {"original_string": "private int mMaxWidth = Integer.MAX_VALUE;", "modifier": "private", "type": "int", "declarator": "mMaxWidth = Integer.MAX_VALUE", "var_name": "mMaxWidth"}, {"original_string": "private int mMaxWidthMode = PIXELS;", "modifier": "private", "type": "int", "declarator": "mMaxWidthMode = PIXELS", "var_name": "mMaxWidthMode"}, {"original_string": "@VisibleForTesting static final LruCache<Integer, Layout> sCache = new LruCache<>(100);", "modifier": "@VisibleForTesting static final", "type": "LruCache<Integer, Layout>", "declarator": "sCache = new LruCache<>(100)", "var_name": "sCache"}, {"original_string": "@VisibleForTesting final Params mParams = new Params();", "modifier": "@VisibleForTesting final", "type": "Params", "declarator": "mParams = new Params()", "var_name": "mParams"}, {"original_string": "private @Nullable Layout mSavedLayout = null;", "modifier": "private @Nullable", "type": "Layout", "declarator": "mSavedLayout = null", "var_name": "mSavedLayout"}, {"original_string": "private GlyphWarmer mGlyphWarmer;", "modifier": "private", "type": "GlyphWarmer", "declarator": "mGlyphWarmer", "var_name": "mGlyphWarmer"}, {"original_string": "private boolean mShouldCacheLayout = true;", "modifier": "private", "type": "boolean", "declarator": "mShouldCacheLayout = true", "var_name": "mShouldCacheLayout"}, {"original_string": "private boolean mShouldWarmText = false;", "modifier": "private", "type": "boolean", "declarator": "mShouldWarmText = false", "var_name": "mShouldWarmText"}], "methods": [{"identifier": "setWidth", "parameters": "(@Px int width)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setWidth(@Px int width)", "full_signature": "public TextLayoutBuilder setWidth(@Px int width)", "class_method_signature": "TextLayoutBuilder.setWidth(@Px int width)", "testcase": false, "constructor": false}, {"identifier": "setWidth", "parameters": "(@Px int width, @MeasureMode int measureMode)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setWidth(@Px int width, @MeasureMode int measureMode)", "full_signature": "public TextLayoutBuilder setWidth(@Px int width, @MeasureMode int measureMode)", "class_method_signature": "TextLayoutBuilder.setWidth(@Px int width, @MeasureMode int measureMode)", "testcase": false, "constructor": false}, {"identifier": "getText", "parameters": "()", "modifiers": "public", "return": "CharSequence", "signature": "CharSequence getText()", "full_signature": "public CharSequence getText()", "class_method_signature": "TextLayoutBuilder.getText()", "testcase": false, "constructor": false}, {"identifier": "setText", "parameters": "(CharSequence text)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setText(CharSequence text)", "full_signature": "public TextLayoutBuilder setText(CharSequence text)", "class_method_signature": "TextLayoutBuilder.setText(CharSequence text)", "testcase": false, "constructor": false}, {"identifier": "getTextSize", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getTextSize()", "full_signature": "public float getTextSize()", "class_method_signature": "TextLayoutBuilder.getTextSize()", "testcase": false, "constructor": false}, {"identifier": "setTextSize", "parameters": "(int size)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setTextSize(int size)", "full_signature": "public TextLayoutBuilder setTextSize(int size)", "class_method_signature": "TextLayoutBuilder.setTextSize(int size)", "testcase": false, "constructor": false}, {"identifier": "getTextColor", "parameters": "()", "modifiers": "@ColorInt public", "return": "int", "signature": "int getTextColor()", "full_signature": "@ColorInt public int getTextColor()", "class_method_signature": "TextLayoutBuilder.getTextColor()", "testcase": false, "constructor": false}, {"identifier": "setTextColor", "parameters": "(@ColorInt int color)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setTextColor(@ColorInt int color)", "full_signature": "public TextLayoutBuilder setTextColor(@ColorInt int color)", "class_method_signature": "TextLayoutBuilder.setTextColor(@ColorInt int color)", "testcase": false, "constructor": false}, {"identifier": "setTextColor", "parameters": "(ColorStateList colorStateList)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setTextColor(ColorStateList colorStateList)", "full_signature": "public TextLayoutBuilder setTextColor(ColorStateList colorStateList)", "class_method_signature": "TextLayoutBuilder.setTextColor(ColorStateList colorStateList)", "testcase": false, "constructor": false}, {"identifier": "getLinkColor", "parameters": "()", "modifiers": "@ColorInt public", "return": "int", "signature": "int getLinkColor()", "full_signature": "@ColorInt public int getLinkColor()", "class_method_signature": "TextLayoutBuilder.getLinkColor()", "testcase": false, "constructor": false}, {"identifier": "setLinkColor", "parameters": "(@ColorInt int linkColor)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setLinkColor(@ColorInt int linkColor)", "full_signature": "public TextLayoutBuilder setLinkColor(@ColorInt int linkColor)", "class_method_signature": "TextLayoutBuilder.setLinkColor(@ColorInt int linkColor)", "testcase": false, "constructor": false}, {"identifier": "getTextSpacingExtra", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getTextSpacingExtra()", "full_signature": "public float getTextSpacingExtra()", "class_method_signature": "TextLayoutBuilder.getTextSpacingExtra()", "testcase": false, "constructor": false}, {"identifier": "setTextSpacingExtra", "parameters": "(float spacingExtra)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setTextSpacingExtra(float spacingExtra)", "full_signature": "public TextLayoutBuilder setTextSpacingExtra(float spacingExtra)", "class_method_signature": "TextLayoutBuilder.setTextSpacingExtra(float spacingExtra)", "testcase": false, "constructor": false}, {"identifier": "getTextSpacingMultiplier", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getTextSpacingMultiplier()", "full_signature": "public float getTextSpacingMultiplier()", "class_method_signature": "TextLayoutBuilder.getTextSpacingMultiplier()", "testcase": false, "constructor": false}, {"identifier": "setTextSpacingMultiplier", "parameters": "(float spacingMultiplier)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setTextSpacingMultiplier(float spacingMultiplier)", "full_signature": "public TextLayoutBuilder setTextSpacingMultiplier(float spacingMultiplier)", "class_method_signature": "TextLayoutBuilder.setTextSpacingMultiplier(float spacingMultiplier)", "testcase": false, "constructor": false}, {"identifier": "getLineHeight", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getLineHeight()", "full_signature": "public float getLineHeight()", "class_method_signature": "TextLayoutBuilder.getLineHeight()", "testcase": false, "constructor": false}, {"identifier": "setLineHeight", "parameters": "(float lineHeight)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setLineHeight(float lineHeight)", "full_signature": "public TextLayoutBuilder setLineHeight(float lineHeight)", "class_method_signature": "TextLayoutBuilder.setLineHeight(float lineHeight)", "testcase": false, "constructor": false}, {"identifier": "getLetterSpacing", "parameters": "()", "modifiers": "@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP) public", "return": "float", "signature": "float getLetterSpacing()", "full_signature": "@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP) public float getLetterSpacing()", "class_method_signature": "TextLayoutBuilder.getLetterSpacing()", "testcase": false, "constructor": false}, {"identifier": "setLetterSpacing", "parameters": "(float letterSpacing)", "modifiers": "@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP) public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setLetterSpacing(float letterSpacing)", "full_signature": "@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP) public TextLayoutBuilder setLetterSpacing(float letterSpacing)", "class_method_signature": "TextLayoutBuilder.setLetterSpacing(float letterSpacing)", "testcase": false, "constructor": false}, {"identifier": "getIncludeFontPadding", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getIncludeFontPadding()", "full_signature": "public boolean getIncludeFontPadding()", "class_method_signature": "TextLayoutBuilder.getIncludeFontPadding()", "testcase": false, "constructor": false}, {"identifier": "setIncludeFontPadding", "parameters": "(boolean shouldInclude)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setIncludeFontPadding(boolean shouldInclude)", "full_signature": "public TextLayoutBuilder setIncludeFontPadding(boolean shouldInclude)", "class_method_signature": "TextLayoutBuilder.setIncludeFontPadding(boolean shouldInclude)", "testcase": false, "constructor": false}, {"identifier": "getAlignment", "parameters": "()", "modifiers": "public", "return": "Alignment", "signature": "Alignment getAlignment()", "full_signature": "public Alignment getAlignment()", "class_method_signature": "TextLayoutBuilder.getAlignment()", "testcase": false, "constructor": false}, {"identifier": "setAlignment", "parameters": "(Alignment alignment)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setAlignment(Alignment alignment)", "full_signature": "public TextLayoutBuilder setAlignment(Alignment alignment)", "class_method_signature": "TextLayoutBuilder.setAlignment(Alignment alignment)", "testcase": false, "constructor": false}, {"identifier": "getTextDirection", "parameters": "()", "modifiers": "public", "return": "TextDirectionHeuristicCompat", "signature": "TextDirectionHeuristicCompat getTextDirection()", "full_signature": "public TextDirectionHeuristicCompat getTextDirection()", "class_method_signature": "TextLayoutBuilder.getTextDirection()", "testcase": false, "constructor": false}, {"identifier": "setTextDirection", "parameters": "(TextDirectionHeuristicCompat textDirection)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setTextDirection(TextDirectionHeuristicCompat textDirection)", "full_signature": "public TextLayoutBuilder setTextDirection(TextDirectionHeuristicCompat textDirection)", "class_method_signature": "TextLayoutBuilder.setTextDirection(TextDirectionHeuristicCompat textDirection)", "testcase": false, "constructor": false}, {"identifier": "setShadowLayer", "parameters": "(float radius, float dx, float dy, @ColorInt int color)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setShadowLayer(float radius, float dx, float dy, @ColorInt int color)", "full_signature": "public TextLayoutBuilder setShadowLayer(float radius, float dx, float dy, @ColorInt int color)", "class_method_signature": "TextLayoutBuilder.setShadowLayer(float radius, float dx, float dy, @ColorInt int color)", "testcase": false, "constructor": false}, {"identifier": "setTextStyle", "parameters": "(int style)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setTextStyle(int style)", "full_signature": "public TextLayoutBuilder setTextStyle(int style)", "class_method_signature": "TextLayoutBuilder.setTextStyle(int style)", "testcase": false, "constructor": false}, {"identifier": "getTypeface", "parameters": "()", "modifiers": "public", "return": "Typeface", "signature": "Typeface getTypeface()", "full_signature": "public Typeface getTypeface()", "class_method_signature": "TextLayoutBuilder.getTypeface()", "testcase": false, "constructor": false}, {"identifier": "setTypeface", "parameters": "(Typeface typeface)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setTypeface(Typeface typeface)", "full_signature": "public TextLayoutBuilder setTypeface(Typeface typeface)", "class_method_signature": "TextLayoutBuilder.setTypeface(Typeface typeface)", "testcase": false, "constructor": false}, {"identifier": "getDrawableState", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getDrawableState()", "full_signature": "public int[] getDrawableState()", "class_method_signature": "TextLayoutBuilder.getDrawableState()", "testcase": false, "constructor": false}, {"identifier": "setDrawableState", "parameters": "(int[] drawableState)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setDrawableState(int[] drawableState)", "full_signature": "public TextLayoutBuilder setDrawableState(int[] drawableState)", "class_method_signature": "TextLayoutBuilder.setDrawableState(int[] drawableState)", "testcase": false, "constructor": false}, {"identifier": "getEllipsize", "parameters": "()", "modifiers": "public", "return": "TextUtils.TruncateAt", "signature": "TextUtils.TruncateAt getEllipsize()", "full_signature": "public TextUtils.TruncateAt getEllipsize()", "class_method_signature": "TextLayoutBuilder.getEllipsize()", "testcase": false, "constructor": false}, {"identifier": "setEllipsize", "parameters": "(TextUtils.TruncateAt ellipsize)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setEllipsize(TextUtils.TruncateAt ellipsize)", "full_signature": "public TextLayoutBuilder setEllipsize(TextUtils.TruncateAt ellipsize)", "class_method_signature": "TextLayoutBuilder.setEllipsize(TextUtils.TruncateAt ellipsize)", "testcase": false, "constructor": false}, {"identifier": "setUseLineSpacingFromFallbacks", "parameters": "(boolean status)", "modifiers": "@RequiresApi(api = 28) public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setUseLineSpacingFromFallbacks(boolean status)", "full_signature": "@RequiresApi(api = 28) public TextLayoutBuilder setUseLineSpacingFromFallbacks(boolean status)", "class_method_signature": "TextLayoutBuilder.setUseLineSpacingFromFallbacks(boolean status)", "testcase": false, "constructor": false}, {"identifier": "getUseLineSpacingFromFallbacks", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getUseLineSpacingFromFallbacks()", "full_signature": "public boolean getUseLineSpacingFromFallbacks()", "class_method_signature": "TextLayoutBuilder.getUseLineSpacingFromFallbacks()", "testcase": false, "constructor": false}, {"identifier": "getSingleLine", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getSingleLine()", "full_signature": "public boolean getSingleLine()", "class_method_signature": "TextLayoutBuilder.getSingleLine()", "testcase": false, "constructor": false}, {"identifier": "setSingleLine", "parameters": "(boolean singleLine)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setSingleLine(boolean singleLine)", "full_signature": "public TextLayoutBuilder setSingleLine(boolean singleLine)", "class_method_signature": "TextLayoutBuilder.setSingleLine(boolean singleLine)", "testcase": false, "constructor": false}, {"identifier": "getMaxLines", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxLines()", "full_signature": "public int getMaxLines()", "class_method_signature": "TextLayoutBuilder.getMaxLines()", "testcase": false, "constructor": false}, {"identifier": "setMaxLines", "parameters": "(int maxLines)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setMaxLines(int maxLines)", "full_signature": "public TextLayoutBuilder setMaxLines(int maxLines)", "class_method_signature": "TextLayoutBuilder.setMaxLines(int maxLines)", "testcase": false, "constructor": false}, {"identifier": "getBreakStrategy", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBreakStrategy()", "full_signature": "public int getBreakStrategy()", "class_method_signature": "TextLayoutBuilder.getBreakStrategy()", "testcase": false, "constructor": false}, {"identifier": "setBreakStrategy", "parameters": "(int breakStrategy)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setBreakStrategy(int breakStrategy)", "full_signature": "public TextLayoutBuilder setBreakStrategy(int breakStrategy)", "class_method_signature": "TextLayoutBuilder.setBreakStrategy(int breakStrategy)", "testcase": false, "constructor": false}, {"identifier": "getHyphenationFrequency", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getHyphenationFrequency()", "full_signature": "public int getHyphenationFrequency()", "class_method_signature": "TextLayoutBuilder.getHyphenationFrequency()", "testcase": false, "constructor": false}, {"identifier": "setHyphenationFrequency", "parameters": "(int hyphenationFrequency)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setHyphenationFrequency(int hyphenationFrequency)", "full_signature": "public TextLayoutBuilder setHyphenationFrequency(int hyphenationFrequency)", "class_method_signature": "TextLayoutBuilder.setHyphenationFrequency(int hyphenationFrequency)", "testcase": false, "constructor": false}, {"identifier": "getLeftIndents", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getLeftIndents()", "full_signature": "public int[] getLeftIndents()", "class_method_signature": "TextLayoutBuilder.getLeftIndents()", "testcase": false, "constructor": false}, {"identifier": "getRightIndents", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getRightIndents()", "full_signature": "public int[] getRightIndents()", "class_method_signature": "TextLayoutBuilder.getRightIndents()", "testcase": false, "constructor": false}, {"identifier": "setIndents", "parameters": "(int[] leftIndents, int[] rightIndents)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setIndents(int[] leftIndents, int[] rightIndents)", "full_signature": "public TextLayoutBuilder setIndents(int[] leftIndents, int[] rightIndents)", "class_method_signature": "TextLayoutBuilder.setIndents(int[] leftIndents, int[] rightIndents)", "testcase": false, "constructor": false}, {"identifier": "getShouldCacheLayout", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getShouldCacheLayout()", "full_signature": "public boolean getShouldCacheLayout()", "class_method_signature": "TextLayoutBuilder.getShouldCacheLayout()", "testcase": false, "constructor": false}, {"identifier": "setShouldCacheLayout", "parameters": "(boolean shouldCacheLayout)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setShouldCacheLayout(boolean shouldCacheLayout)", "full_signature": "public TextLayoutBuilder setShouldCacheLayout(boolean shouldCacheLayout)", "class_method_signature": "TextLayoutBuilder.setShouldCacheLayout(boolean shouldCacheLayout)", "testcase": false, "constructor": false}, {"identifier": "getShouldWarmText", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getShouldWarmText()", "full_signature": "public boolean getShouldWarmText()", "class_method_signature": "TextLayoutBuilder.getShouldWarmText()", "testcase": false, "constructor": false}, {"identifier": "setShouldWarmText", "parameters": "(boolean shouldWarmText)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setShouldWarmText(boolean shouldWarmText)", "full_signature": "public TextLayoutBuilder setShouldWarmText(boolean shouldWarmText)", "class_method_signature": "TextLayoutBuilder.setShouldWarmText(boolean shouldWarmText)", "testcase": false, "constructor": false}, {"identifier": "getGlyphWarmer", "parameters": "()", "modifiers": "public", "return": "GlyphWarmer", "signature": "GlyphWarmer getGlyphWarmer()", "full_signature": "public GlyphWarmer getGlyphWarmer()", "class_method_signature": "TextLayoutBuilder.getGlyphWarmer()", "testcase": false, "constructor": false}, {"identifier": "setGlyphWarmer", "parameters": "(GlyphWarmer glyphWarmer)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setGlyphWarmer(GlyphWarmer glyphWarmer)", "full_signature": "public TextLayoutBuilder setGlyphWarmer(GlyphWarmer glyphWarmer)", "class_method_signature": "TextLayoutBuilder.setGlyphWarmer(GlyphWarmer glyphWarmer)", "testcase": false, "constructor": false}, {"identifier": "getMinEms", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMinEms()", "full_signature": "public int getMinEms()", "class_method_signature": "TextLayoutBuilder.getMinEms()", "testcase": false, "constructor": false}, {"identifier": "setMinEms", "parameters": "(int minEms)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setMinEms(int minEms)", "full_signature": "public TextLayoutBuilder setMinEms(int minEms)", "class_method_signature": "TextLayoutBuilder.setMinEms(int minEms)", "testcase": false, "constructor": false}, {"identifier": "getMinWidth", "parameters": "()", "modifiers": "@Px public", "return": "int", "signature": "int getMinWidth()", "full_signature": "@Px public int getMinWidth()", "class_method_signature": "TextLayoutBuilder.getMinWidth()", "testcase": false, "constructor": false}, {"identifier": "setMinWidth", "parameters": "(@Px int minWidth)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setMinWidth(@Px int minWidth)", "full_signature": "public TextLayoutBuilder setMinWidth(@Px int minWidth)", "class_method_signature": "TextLayoutBuilder.setMinWidth(@Px int minWidth)", "testcase": false, "constructor": false}, {"identifier": "getMaxEms", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxEms()", "full_signature": "public int getMaxEms()", "class_method_signature": "TextLayoutBuilder.getMaxEms()", "testcase": false, "constructor": false}, {"identifier": "setMaxEms", "parameters": "(int maxEms)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setMaxEms(int maxEms)", "full_signature": "public TextLayoutBuilder setMaxEms(int maxEms)", "class_method_signature": "TextLayoutBuilder.setMaxEms(int maxEms)", "testcase": false, "constructor": false}, {"identifier": "getMaxWidth", "parameters": "()", "modifiers": "@Px public", "return": "int", "signature": "int getMaxWidth()", "full_signature": "@Px public int getMaxWidth()", "class_method_signature": "TextLayoutBuilder.getMaxWidth()", "testcase": false, "constructor": false}, {"identifier": "setMaxWidth", "parameters": "(@Px int maxWidth)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setMaxWidth(@Px int maxWidth)", "full_signature": "public TextLayoutBuilder setMaxWidth(@Px int maxWidth)", "class_method_signature": "TextLayoutBuilder.setMaxWidth(@Px int maxWidth)", "testcase": false, "constructor": false}, {"identifier": "getDensity", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getDensity()", "full_signature": "public float getDensity()", "class_method_signature": "TextLayoutBuilder.getDensity()", "testcase": false, "constructor": false}, {"identifier": "setDensity", "parameters": "(float density)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setDensity(float density)", "full_signature": "public TextLayoutBuilder setDensity(float density)", "class_method_signature": "TextLayoutBuilder.setDensity(float density)", "testcase": false, "constructor": false}, {"identifier": "getJustificationMode", "parameters": "()", "modifiers": "@RequiresApi(api = Build.VERSION_CODES.O) public", "return": "int", "signature": "int getJustificationMode()", "full_signature": "@RequiresApi(api = Build.VERSION_CODES.O) public int getJustificationMode()", "class_method_signature": "TextLayoutBuilder.getJustificationMode()", "testcase": false, "constructor": false}, {"identifier": "setJustificationMode", "parameters": "(int justificationMode)", "modifiers": "@RequiresApi(api = Build.VERSION_CODES.O) public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setJustificationMode(int justificationMode)", "full_signature": "@RequiresApi(api = Build.VERSION_CODES.O) public TextLayoutBuilder setJustificationMode(int justificationMode)", "class_method_signature": "TextLayoutBuilder.setJustificationMode(int justificationMode)", "testcase": false, "constructor": false}, {"identifier": "setShouldLayoutZeroLengthText", "parameters": "(boolean shouldLayoutZeroLengthText)", "modifiers": "public", "return": "TextLayoutBuilder", "signature": "TextLayoutBuilder setShouldLayoutZeroLengthText(boolean shouldLayoutZeroLengthText)", "full_signature": "public TextLayoutBuilder setShouldLayoutZeroLengthText(boolean shouldLayoutZeroLengthText)", "class_method_signature": "TextLayoutBuilder.setShouldLayoutZeroLengthText(boolean shouldLayoutZeroLengthText)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "@Nullable public", "return": "Layout", "signature": "Layout build()", "full_signature": "@Nullable public Layout build()", "class_method_signature": "TextLayoutBuilder.build()", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/facebook/fbui/textlayoutbuilder/TextLayoutBuilder.java"}, "focal_method": {"identifier": "setTextSpacingMultiplier", "parameters": "(float spacingMultiplier)", "modifiers": "public", "return": "TextLayoutBuilder", "body": "public TextLayoutBuilder setTextSpacingMultiplier(float spacingMultiplier) {\n    if (mParams.lineHeight == DEFAULT_LINE_HEIGHT && mParams.spacingMult != spacingMultiplier) {\n      mParams.spacingMult = spacingMultiplier;\n      mSavedLayout = null;\n    }\n    return this;\n  }", "signature": "TextLayoutBuilder setTextSpacingMultiplier(float spacingMultiplier)", "full_signature": "public TextLayoutBuilder setTextSpacingMultiplier(float spacingMultiplier)", "class_method_signature": "TextLayoutBuilder.setTextSpacingMultiplier(float spacingMultiplier)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 72580689, "url": "https://github.com/facebook/TextLayoutBuilder", "language": "Java", "is_fork": false, "fork_count": 123, "stargazer_count": 1404, "size": 436, "license": "licensed"}}