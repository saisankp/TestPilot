{"test_class": {"identifier": "OlciProductFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-sentinel3-reader/src/test/java/org/esa/s3tbx/dataio/s3/olci/OlciProductFactoryTest.java"}, "test_case": {"identifier": "testGetForwardAndInverseKeys_pixelCoding_forwardCoding", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetForwardAndInverseKeys_pixelCoding_forwardCoding() {\n        final String forwardKey = System.getProperty(SYSPROP_OLCI_PIXEL_CODING_FORWARD);\n        try {\n            System.setProperty(SYSPROP_OLCI_PIXEL_CODING_FORWARD, \"hoppla\");\n\n            final String[] codingKeys = OlciProductFactory.getForwardAndInverseKeys_pixelCoding();\n            assertEquals(\"hoppla\", codingKeys[0]);\n            assertEquals(\"INV_PIXEL_QUAD_TREE\", codingKeys[1]);\n\n        } finally {\n            if (forwardKey != null) {\n                System.setProperty(SYSPROP_OLCI_PIXEL_CODING_FORWARD, forwardKey);\n            } else {\n                System.clearProperty(SYSPROP_OLCI_PIXEL_CODING_FORWARD);\n            }\n        }\n    }", "signature": "void testGetForwardAndInverseKeys_pixelCoding_forwardCoding()", "full_signature": "@Test public void testGetForwardAndInverseKeys_pixelCoding_forwardCoding()", "class_method_signature": "OlciProductFactoryTest.testGetForwardAndInverseKeys_pixelCoding_forwardCoding()", "testcase": true, "constructor": false, "invocations": ["getProperty", "setProperty", "getForwardAndInverseKeys_pixelCoding", "assertEquals", "assertEquals", "setProperty", "clearProperty"]}, "focal_class": {"identifier": "OlciProductFactory", "superclass": "extends AbstractProductFactory", "interfaces": "", "fields": [{"original_string": "private final static String[] excludedIDs = new String[]{\"removedPixelsData\"};", "modifier": "private final static", "type": "String[]", "declarator": "excludedIDs = new String[]{\"removedPixelsData\"}", "var_name": "excludedIDs"}, {"original_string": "private Map<String, Float> nameToWavelengthMap;", "modifier": "private", "type": "Map<String, Float>", "declarator": "nameToWavelengthMap", "var_name": "nameToWavelengthMap"}, {"original_string": "private Map<String, Float> nameToBandwidthMap;", "modifier": "private", "type": "Map<String, Float>", "declarator": "nameToBandwidthMap", "var_name": "nameToBandwidthMap"}, {"original_string": "private Map<String, Integer> nameToIndexMap;", "modifier": "private", "type": "Map<String, Integer>", "declarator": "nameToIndexMap", "var_name": "nameToIndexMap"}, {"original_string": "private int subSamplingX;", "modifier": "private", "type": "int", "declarator": "subSamplingX", "var_name": "subSamplingX"}, {"original_string": "private int subSamplingY;", "modifier": "private", "type": "int", "declarator": "subSamplingY", "var_name": "subSamplingY"}, {"original_string": "public final static String OLCI_USE_PIXELGEOCODING = \"s3tbx.reader.olci.pixelGeoCoding\";", "modifier": "public final static", "type": "String", "declarator": "OLCI_USE_PIXELGEOCODING = \"s3tbx.reader.olci.pixelGeoCoding\"", "var_name": "OLCI_USE_PIXELGEOCODING"}, {"original_string": "final static String SYSPROP_OLCI_USE_FRACTIONAL_ACCURACY = \"s3tbx.reader.olci.fractionAccuracy\";", "modifier": "final static", "type": "String", "declarator": "SYSPROP_OLCI_USE_FRACTIONAL_ACCURACY = \"s3tbx.reader.olci.fractionAccuracy\"", "var_name": "SYSPROP_OLCI_USE_FRACTIONAL_ACCURACY"}, {"original_string": "final static String SYSPROP_OLCI_PIXEL_CODING_FORWARD = \"s3tbx.reader.olci.pixelGeoCoding.forward\";", "modifier": "final static", "type": "String", "declarator": "SYSPROP_OLCI_PIXEL_CODING_FORWARD = \"s3tbx.reader.olci.pixelGeoCoding.forward\"", "var_name": "SYSPROP_OLCI_PIXEL_CODING_FORWARD"}, {"original_string": "final static String SYSPROP_OLCI_PIXEL_CODING_INVERSE = \"s3tbx.reader.olci.pixelGeoCoding.inverse\";", "modifier": "final static", "type": "String", "declarator": "SYSPROP_OLCI_PIXEL_CODING_INVERSE = \"s3tbx.reader.olci.pixelGeoCoding.inverse\"", "var_name": "SYSPROP_OLCI_PIXEL_CODING_INVERSE"}, {"original_string": "final static String SYSPROP_OLCI_TIE_POINT_CODING_FORWARD = \"s3tbx.reader.olci.tiePointGeoCoding.forward\";", "modifier": "final static", "type": "String", "declarator": "SYSPROP_OLCI_TIE_POINT_CODING_FORWARD = \"s3tbx.reader.olci.tiePointGeoCoding.forward\"", "var_name": "SYSPROP_OLCI_TIE_POINT_CODING_FORWARD"}], "methods": [{"identifier": "OlciProductFactory", "parameters": "(Sentinel3ProductReader productReader)", "modifiers": "", "return": "", "signature": " OlciProductFactory(Sentinel3ProductReader productReader)", "full_signature": "  OlciProductFactory(Sentinel3ProductReader productReader)", "class_method_signature": "OlciProductFactory.OlciProductFactory(Sentinel3ProductReader productReader)", "testcase": false, "constructor": true}, {"identifier": "getFileNames", "parameters": "(Manifest manifest)", "modifiers": "@Override protected", "return": "List<String>", "signature": "List<String> getFileNames(Manifest manifest)", "full_signature": "@Override protected List<String> getFileNames(Manifest manifest)", "class_method_signature": "OlciProductFactory.getFileNames(Manifest manifest)", "testcase": false, "constructor": false}, {"identifier": "processProductSpecificMetadata", "parameters": "(MetadataElement metadataElement)", "modifiers": "@Override protected", "return": "void", "signature": "void processProductSpecificMetadata(MetadataElement metadataElement)", "full_signature": "@Override protected void processProductSpecificMetadata(MetadataElement metadataElement)", "class_method_signature": "OlciProductFactory.processProductSpecificMetadata(MetadataElement metadataElement)", "testcase": false, "constructor": false}, {"identifier": "getWavelength", "parameters": "(String name)", "modifiers": "private", "return": "float", "signature": "float getWavelength(String name)", "full_signature": "private float getWavelength(String name)", "class_method_signature": "OlciProductFactory.getWavelength(String name)", "testcase": false, "constructor": false}, {"identifier": "getBandwidth", "parameters": "(String name)", "modifiers": "private", "return": "float", "signature": "float getBandwidth(String name)", "full_signature": "private float getBandwidth(String name)", "class_method_signature": "OlciProductFactory.getBandwidth(String name)", "testcase": false, "constructor": false}, {"identifier": "getBandindex", "parameters": "(String name)", "modifiers": "private", "return": "int", "signature": "int getBandindex(String name)", "full_signature": "private int getBandindex(String name)", "class_method_signature": "OlciProductFactory.getBandindex(String name)", "testcase": false, "constructor": false}, {"identifier": "addSpecialNode", "parameters": "(Product masterProduct, Band sourceBand, Product targetProduct)", "modifiers": "@Override protected", "return": "RasterDataNode", "signature": "RasterDataNode addSpecialNode(Product masterProduct, Band sourceBand, Product targetProduct)", "full_signature": "@Override protected RasterDataNode addSpecialNode(Product masterProduct, Band sourceBand, Product targetProduct)", "class_method_signature": "OlciProductFactory.addSpecialNode(Product masterProduct, Band sourceBand, Product targetProduct)", "testcase": false, "constructor": false}, {"identifier": "setGeoCoding", "parameters": "(Product targetProduct)", "modifiers": "@Override protected", "return": "void", "signature": "void setGeoCoding(Product targetProduct)", "full_signature": "@Override protected void setGeoCoding(Product targetProduct)", "class_method_signature": "OlciProductFactory.setGeoCoding(Product targetProduct)", "testcase": false, "constructor": false}, {"identifier": "setPixelGeoCoding", "parameters": "(Product targetProduct)", "modifiers": "private", "return": "void", "signature": "void setPixelGeoCoding(Product targetProduct)", "full_signature": "private void setPixelGeoCoding(Product targetProduct)", "class_method_signature": "OlciProductFactory.setPixelGeoCoding(Product targetProduct)", "testcase": false, "constructor": false}, {"identifier": "setTiePointGeoCoding", "parameters": "(Product targetProduct)", "modifiers": "private", "return": "void", "signature": "void setTiePointGeoCoding(Product targetProduct)", "full_signature": "private void setTiePointGeoCoding(Product targetProduct)", "class_method_signature": "OlciProductFactory.setTiePointGeoCoding(Product targetProduct)", "testcase": false, "constructor": false}, {"identifier": "configureTargetNode", "parameters": "(Band sourceBand, RasterDataNode targetNode)", "modifiers": "@Override protected", "return": "void", "signature": "void configureTargetNode(Band sourceBand, RasterDataNode targetNode)", "full_signature": "@Override protected void configureTargetNode(Band sourceBand, RasterDataNode targetNode)", "class_method_signature": "OlciProductFactory.configureTargetNode(Band sourceBand, RasterDataNode targetNode)", "testcase": false, "constructor": false}, {"identifier": "applyCustomCalibration", "parameters": "(Band targetBand)", "modifiers": "protected", "return": "void", "signature": "void applyCustomCalibration(Band targetBand)", "full_signature": "protected void applyCustomCalibration(Band targetBand)", "class_method_signature": "OlciProductFactory.applyCustomCalibration(Band targetBand)", "testcase": false, "constructor": false}, {"identifier": "getValidExpression", "parameters": "()", "modifiers": "protected abstract", "return": "String", "signature": "String getValidExpression()", "full_signature": "protected abstract String getValidExpression()", "class_method_signature": "OlciProductFactory.getValidExpression()", "testcase": false, "constructor": false}, {"identifier": "readProduct", "parameters": "(String fileName, Manifest manifest)", "modifiers": "@Override protected", "return": "Product", "signature": "Product readProduct(String fileName, Manifest manifest)", "full_signature": "@Override protected Product readProduct(String fileName, Manifest manifest)", "class_method_signature": "OlciProductFactory.readProduct(String fileName, Manifest manifest)", "testcase": false, "constructor": false}, {"identifier": "getResolutionInKm", "parameters": "(String productType)", "modifiers": "static", "return": "double", "signature": "double getResolutionInKm(String productType)", "full_signature": "static double getResolutionInKm(String productType)", "class_method_signature": "OlciProductFactory.getResolutionInKm(String productType)", "testcase": false, "constructor": false}, {"identifier": "getForwardAndInverseKeys_pixelCoding", "parameters": "()", "modifiers": "static", "return": "String[]", "signature": "String[] getForwardAndInverseKeys_pixelCoding()", "full_signature": "static String[] getForwardAndInverseKeys_pixelCoding()", "class_method_signature": "OlciProductFactory.getForwardAndInverseKeys_pixelCoding()", "testcase": false, "constructor": false}, {"identifier": "getForwardAndInverseKeys_tiePointCoding", "parameters": "()", "modifiers": "static", "return": "String[]", "signature": "String[] getForwardAndInverseKeys_tiePointCoding()", "full_signature": "static String[] getForwardAndInverseKeys_tiePointCoding()", "class_method_signature": "OlciProductFactory.getForwardAndInverseKeys_tiePointCoding()", "testcase": false, "constructor": false}, {"identifier": "loadTiePointData", "parameters": "(String tpgName)", "modifiers": "protected", "return": "double[]", "signature": "double[] loadTiePointData(String tpgName)", "full_signature": "protected double[] loadTiePointData(String tpgName)", "class_method_signature": "OlciProductFactory.loadTiePointData(String tpgName)", "testcase": false, "constructor": false}], "file": "s3tbx-sentinel3-reader/src/main/java/org/esa/s3tbx/dataio/s3/olci/OlciProductFactory.java"}, "focal_method": {"identifier": "getForwardAndInverseKeys_pixelCoding", "parameters": "()", "modifiers": "static", "return": "String[]", "body": "static String[] getForwardAndInverseKeys_pixelCoding() {\n        final String[] codingNames = new String[2];\n\n        final Preferences preferences = Config.instance(\"s3tbx\").preferences();\n        final boolean useFractAccuracy = preferences.getBoolean(SYSPROP_OLCI_USE_FRACTIONAL_ACCURACY, false);\n        if (useFractAccuracy) {\n            codingNames[0] = PixelInterpolatingForward.KEY;\n        } else {\n            codingNames[0] = preferences.get(SYSPROP_OLCI_PIXEL_CODING_FORWARD, PixelForward.KEY);\n        }\n        codingNames[1] = preferences.get(SYSPROP_OLCI_PIXEL_CODING_INVERSE, PixelQuadTreeInverse.KEY);\n\n        return codingNames;\n    }", "signature": "String[] getForwardAndInverseKeys_pixelCoding()", "full_signature": "static String[] getForwardAndInverseKeys_pixelCoding()", "class_method_signature": "OlciProductFactory.getForwardAndInverseKeys_pixelCoding()", "testcase": false, "constructor": false, "invocations": ["preferences", "instance", "getBoolean", "get", "get"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}