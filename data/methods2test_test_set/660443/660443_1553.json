{"test_class": {"identifier": "WienerNumbersDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/WienerNumbersDescriptorTest.java"}, "test_case": {"identifier": "testWithExplicitHydrogens", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithExplicitHydrogens() throws Exception {\n        double[] testResult = {18, 2};\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"[H]C([H])([H])C([H])([H])C(=O)O\");\n        DoubleArrayResult retval = (DoubleArrayResult) descriptor.calculate(mol).getValue();\n        Assert.assertEquals(testResult[0], retval.get(0), 0.0001);\n        Assert.assertEquals(testResult[1], retval.get(1), 0.0001);\n    }", "signature": "void testWithExplicitHydrogens()", "full_signature": "@Test public void testWithExplicitHydrogens()", "class_method_signature": "WienerNumbersDescriptorTest.testWithExplicitHydrogens()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "getValue", "calculate", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "WienerNumbersDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static final String[] NAMES            = {\"WPATH\", \"WPOL\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES            = {\"WPATH\", \"WPOL\"}", "var_name": "NAMES"}, {"original_string": "double[][]                    matr             = null;", "modifier": "", "type": "double[][]", "declarator": "matr             = null", "var_name": "matr"}, {"original_string": "DoubleArrayResult             wienerNumbers    = null;", "modifier": "", "type": "DoubleArrayResult", "declarator": "wienerNumbers    = null", "var_name": "wienerNumbers"}, {"original_string": "ConnectionMatrix              connectionMatrix = new ConnectionMatrix();", "modifier": "", "type": "ConnectionMatrix", "declarator": "connectionMatrix = new ConnectionMatrix()", "var_name": "connectionMatrix"}, {"original_string": "AtomContainerManipulator      atm              = new AtomContainerManipulator();", "modifier": "", "type": "AtomContainerManipulator", "declarator": "atm              = new AtomContainerManipulator()", "var_name": "atm"}], "methods": [{"identifier": "WienerNumbersDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " WienerNumbersDescriptor()", "full_signature": "public  WienerNumbersDescriptor()", "class_method_signature": "WienerNumbersDescriptor.WienerNumbersDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "WienerNumbersDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "WienerNumbersDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "WienerNumbersDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "WienerNumbersDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "WienerNumbersDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "WienerNumbersDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "WienerNumbersDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "WienerNumbersDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/WienerNumbersDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer atomContainer) {\n        wienerNumbers = new DoubleArrayResult(2);\n        double wienerPathNumber = 0; //wienerPath\n        double wienerPolarityNumber = 0; //wienerPol\n\n        matr = ConnectionMatrix.getMatrix(AtomContainerManipulator.removeHydrogens(atomContainer));\n        int[][] distances = PathTools.computeFloydAPSP(matr);\n\n        int partial;\n        for (int i = 0; i < distances.length; i++) {\n            for (int j = 0; j < distances.length; j++) {\n                partial = distances[i][j];\n                wienerPathNumber += partial;\n                if (partial == 3) {\n                    wienerPolarityNumber += 1;\n                }\n            }\n        }\n        wienerPathNumber = wienerPathNumber / 2;\n        wienerPolarityNumber = wienerPolarityNumber / 2;\n\n        wienerNumbers.add(wienerPathNumber);\n        wienerNumbers.add(wienerPolarityNumber);\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), wienerNumbers,\n                getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "WienerNumbersDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["getMatrix", "removeHydrogens", "computeFloydAPSP", "add", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}