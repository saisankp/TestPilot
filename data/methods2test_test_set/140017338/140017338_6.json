{"test_class": {"identifier": "WrappedMavenProjectTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}], "file": "modules/maven/src/test/java/org/eclipse/sw360/antenna/maven/WrappedMavenProjectTest.java"}, "test_case": {"identifier": "testWrappedMavenProject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWrappedMavenProject() throws IOException {\n        String artifactId = \"test\";\n        String version = \"x.x.x\";\n        File pomFile = folder.newFile(\"pom.xml\");\n        String outputDir = folder.newFolder(\"outputdir\").getName();\n\n        Build build = new Build();\n        build.setOutputDirectory(outputDir);\n\n        MavenProject mavenProject = new MavenProject();\n        mavenProject.setArtifactId(artifactId);\n        mavenProject.setVersion(version);\n        mavenProject.setFile(pomFile);\n        mavenProject.setBuild(build);\n\n        WrappedMavenProject wrappedMavenProject = new WrappedMavenProject(mavenProject);\n\n        assertThat(wrappedMavenProject.getBuildDirectory()).isEqualTo(outputDir);\n        assertThat(wrappedMavenProject.getConfigFile()).isEqualTo(pomFile);\n        assertThat(wrappedMavenProject.getRawProject()).isEqualTo(mavenProject);\n        assertThat(wrappedMavenProject.getProjectId()).isEqualTo(artifactId);\n        assertThat(wrappedMavenProject.getVersion()).isEqualTo(version);\n    }", "signature": "void testWrappedMavenProject()", "full_signature": "@Test public void testWrappedMavenProject()", "class_method_signature": "WrappedMavenProjectTest.testWrappedMavenProject()", "testcase": true, "constructor": false, "invocations": ["newFile", "getName", "newFolder", "setOutputDirectory", "setArtifactId", "setVersion", "setFile", "setBuild", "isEqualTo", "assertThat", "getBuildDirectory", "isEqualTo", "assertThat", "getConfigFile", "isEqualTo", "assertThat", "getRawProject", "isEqualTo", "assertThat", "getProjectId", "isEqualTo", "assertThat", "getVersion"]}, "focal_class": {"identifier": "WrappedMavenProject", "superclass": "", "interfaces": "implements IProject", "fields": [{"original_string": "private final MavenProject innerProject;", "modifier": "private final", "type": "MavenProject", "declarator": "innerProject", "var_name": "innerProject"}], "methods": [{"identifier": "WrappedMavenProject", "parameters": "(MavenProject innerProject)", "modifiers": "public", "return": "", "signature": " WrappedMavenProject(MavenProject innerProject)", "full_signature": "public  WrappedMavenProject(MavenProject innerProject)", "class_method_signature": "WrappedMavenProject.WrappedMavenProject(MavenProject innerProject)", "testcase": false, "constructor": true}, {"identifier": "getRawProject", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getRawProject()", "full_signature": "@Override public Object getRawProject()", "class_method_signature": "WrappedMavenProject.getRawProject()", "testcase": false, "constructor": false}, {"identifier": "getProjectId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getProjectId()", "full_signature": "@Override public String getProjectId()", "class_method_signature": "WrappedMavenProject.getProjectId()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getVersion()", "full_signature": "@Override public String getVersion()", "class_method_signature": "WrappedMavenProject.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getBuildDirectory", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getBuildDirectory()", "full_signature": "@Override public String getBuildDirectory()", "class_method_signature": "WrappedMavenProject.getBuildDirectory()", "testcase": false, "constructor": false}, {"identifier": "getConfigFile", "parameters": "()", "modifiers": "@Override public", "return": "File", "signature": "File getConfigFile()", "full_signature": "@Override public File getConfigFile()", "class_method_signature": "WrappedMavenProject.getConfigFile()", "testcase": false, "constructor": false}], "file": "modules/maven/src/main/java/org/eclipse/sw360/antenna/maven/WrappedMavenProject.java"}, "focal_method": {"identifier": "WrappedMavenProject", "parameters": "(MavenProject innerProject)", "modifiers": "public", "return": "", "body": "public WrappedMavenProject(MavenProject innerProject) {\n        this.innerProject = innerProject;\n    }", "signature": " WrappedMavenProject(MavenProject innerProject)", "full_signature": "public  WrappedMavenProject(MavenProject innerProject)", "class_method_signature": "WrappedMavenProject.WrappedMavenProject(MavenProject innerProject)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}