{"test_class": {"identifier": "CheckEqualSizePreprocessorTest", "superclass": "", "interfaces": "", "fields": [], "file": "photohawk-image-evaluator/src/test/java/at/ac/tuwien/photohawk/evaluation/preprocessing/CheckEqualSizePreprocessorTest.java"}, "test_case": {"identifier": "executeTest_diffWidth_diffHeight", "parameters": "()", "modifiers": "@Test(expected = PreprocessingException.class) public", "return": "void", "body": "@Test(expected = PreprocessingException.class)\n    public void executeTest_diffWidth_diffHeight() {\n        BufferedImage img1 = BufferedImageHelper.createSolidImage(new Color(0, 0, 0), 200, 500);\n        BufferedImage img2 = BufferedImageHelper.createSolidImage(new Color(0, 0, 0), 500, 200);\n        CheckEqualSizePreprocessor pp = new CheckEqualSizePreprocessor(img1, img2);\n        pp.process();\n    }", "signature": "void executeTest_diffWidth_diffHeight()", "full_signature": "@Test(expected = PreprocessingException.class) public void executeTest_diffWidth_diffHeight()", "class_method_signature": "CheckEqualSizePreprocessorTest.executeTest_diffWidth_diffHeight()", "testcase": true, "constructor": false, "invocations": ["createSolidImage", "createSolidImage", "process"]}, "focal_class": {"identifier": "CheckEqualSizePreprocessor", "superclass": "", "interfaces": "implements Preprocessor", "fields": [{"original_string": "private static final Logger LOGGER = LogManager.getLogger(CheckEqualSizePreprocessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager.getLogger(CheckEqualSizePreprocessor.class)", "var_name": "LOGGER"}, {"original_string": "private BufferedImage img1;", "modifier": "private", "type": "BufferedImage", "declarator": "img1", "var_name": "img1"}, {"original_string": "private BufferedImage img2;", "modifier": "private", "type": "BufferedImage", "declarator": "img2", "var_name": "img2"}], "methods": [{"identifier": "CheckEqualSizePreprocessor", "parameters": "(final BufferedImage img1, final BufferedImage img2)", "modifiers": "public", "return": "", "signature": " CheckEqualSizePreprocessor(final BufferedImage img1, final BufferedImage img2)", "full_signature": "public  CheckEqualSizePreprocessor(final BufferedImage img1, final BufferedImage img2)", "class_method_signature": "CheckEqualSizePreprocessor.CheckEqualSizePreprocessor(final BufferedImage img1, final BufferedImage img2)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void process()", "full_signature": "@Override public void process()", "class_method_signature": "CheckEqualSizePreprocessor.process()", "testcase": false, "constructor": false}, {"identifier": "getResult1", "parameters": "()", "modifiers": "@Override public", "return": "BufferedImage", "signature": "BufferedImage getResult1()", "full_signature": "@Override public BufferedImage getResult1()", "class_method_signature": "CheckEqualSizePreprocessor.getResult1()", "testcase": false, "constructor": false}, {"identifier": "getResult2", "parameters": "()", "modifiers": "@Override public", "return": "BufferedImage", "signature": "BufferedImage getResult2()", "full_signature": "@Override public BufferedImage getResult2()", "class_method_signature": "CheckEqualSizePreprocessor.getResult2()", "testcase": false, "constructor": false}], "file": "photohawk-image-evaluator/src/main/java/at/ac/tuwien/photohawk/evaluation/preprocessing/CheckEqualSizePreprocessor.java"}, "focal_method": {"identifier": "process", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void process() {\n        if (img1.getWidth() != img2.getWidth() || img1.getHeight() != img2.getHeight()) {\n            throw new PreprocessingException(\"Image size does not match\");\n        }\n        LOGGER.debug(\"Images have the same widht [{}] and height [{}]\", img1.getWidth(), img1.getHeight());\n    }", "signature": "void process()", "full_signature": "@Override public void process()", "class_method_signature": "CheckEqualSizePreprocessor.process()", "testcase": false, "constructor": false, "invocations": ["getWidth", "getWidth", "getHeight", "getHeight", "debug", "getWidth", "getHeight"]}, "repository": {"repo_id": 11614244, "url": "https://github.com/datascience/photohawk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 6, "size": 4209, "license": "licensed"}}