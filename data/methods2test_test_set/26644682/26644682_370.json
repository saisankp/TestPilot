{"test_class": {"identifier": "SeparatorAnalyzerTest", "superclass": "", "interfaces": "", "fields": [], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/schema/csv/SeparatorAnalyzerTest.java"}, "test_case": {"identifier": "should_set_default_score", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_set_default_score() {\n        SeparatorAnalyzer analyzer = new SeparatorAnalyzer(100, Arrays.asList(\"first\", \"last\"));\n        Separator sep = new Separator('|');\n        analyzer.accept(sep);\n        assertEquals(Double.MAX_VALUE, sep.getScore(), 0.000000001);\n    }", "signature": "void should_set_default_score()", "full_signature": "@Test public void should_set_default_score()", "class_method_signature": "SeparatorAnalyzerTest.should_set_default_score()", "testcase": true, "constructor": false, "invocations": ["asList", "accept", "assertEquals", "getScore"]}, "focal_class": {"identifier": "SeparatorAnalyzer", "superclass": "", "interfaces": "implements Consumer<Separator>", "fields": [{"original_string": "private final int numberOfLines;", "modifier": "private final", "type": "int", "declarator": "numberOfLines", "var_name": "numberOfLines"}, {"original_string": "private final List<String> sampleLines;", "modifier": "private final", "type": "List<String>", "declarator": "sampleLines", "var_name": "sampleLines"}, {"original_string": "private final SeparatorComparator comparator;", "modifier": "private final", "type": "SeparatorComparator", "declarator": "comparator", "var_name": "comparator"}, {"original_string": "private final List<Character> priority = Arrays.asList(';', ',', '\\t', ' ', '|');", "modifier": "private final", "type": "List<Character>", "declarator": "priority = Arrays.asList(';', ',', '\\t', ' ', '|')", "var_name": "priority"}], "methods": [{"identifier": "SeparatorAnalyzer", "parameters": "(int numberOfLines, List<String> sampleLines)", "modifiers": "public", "return": "", "signature": " SeparatorAnalyzer(int numberOfLines, List<String> sampleLines)", "full_signature": "public  SeparatorAnalyzer(int numberOfLines, List<String> sampleLines)", "class_method_signature": "SeparatorAnalyzer.SeparatorAnalyzer(int numberOfLines, List<String> sampleLines)", "testcase": false, "constructor": true}, {"identifier": "prio", "parameters": "(char c1, char c2)", "modifiers": "private", "return": "int", "signature": "int prio(char c1, char c2)", "full_signature": "private int prio(char c1, char c2)", "class_method_signature": "SeparatorAnalyzer.prio(char c1, char c2)", "testcase": false, "constructor": false}, {"identifier": "consistencyLevel", "parameters": "(Separator s)", "modifiers": "private", "return": "int", "signature": "int consistencyLevel(Separator s)", "full_signature": "private int consistencyLevel(Separator s)", "class_method_signature": "SeparatorAnalyzer.consistencyLevel(Separator s)", "testcase": false, "constructor": false}, {"identifier": "countFrequency", "parameters": "(Separator separator)", "modifiers": "private", "return": "Collection<Double>", "signature": "Collection<Double> countFrequency(Separator separator)", "full_signature": "private Collection<Double> countFrequency(Separator separator)", "class_method_signature": "SeparatorAnalyzer.countFrequency(Separator separator)", "testcase": false, "constructor": false}, {"identifier": "computeEntropy", "parameters": "(Separator separator)", "modifiers": "private", "return": "double", "signature": "double computeEntropy(Separator separator)", "full_signature": "private double computeEntropy(Separator separator)", "class_method_signature": "SeparatorAnalyzer.computeEntropy(Separator separator)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(Separator separator)", "modifiers": "@Override public", "return": "void", "signature": "void accept(Separator separator)", "full_signature": "@Override public void accept(Separator separator)", "class_method_signature": "SeparatorAnalyzer.accept(Separator separator)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Separator s1, Separator s2)", "modifiers": "public", "return": "int", "signature": "int compare(Separator s1, Separator s2)", "full_signature": "public int compare(Separator s1, Separator s2)", "class_method_signature": "SeparatorAnalyzer.compare(Separator s1, Separator s2)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/schema/csv/SeparatorAnalyzer.java"}, "focal_method": {"identifier": "accept", "parameters": "(Separator separator)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void accept(Separator separator) {\n        separator.setScore(computeEntropy(separator));\n        CSVFastHeaderAndTypeAnalyzer csvFastHeaderAndTypeAnalyzer =\n                new CSVFastHeaderAndTypeAnalyzer(sampleLines, separator);\n        csvFastHeaderAndTypeAnalyzer.analyze();\n        separator.setFirstLineAHeader(csvFastHeaderAndTypeAnalyzer.isFirstLineAHeader());\n        separator.setHeaderInfoReliable(csvFastHeaderAndTypeAnalyzer.isHeaderInfoReliable());\n        separator.setHeaders(csvFastHeaderAndTypeAnalyzer.getHeaders());\n    }", "signature": "void accept(Separator separator)", "full_signature": "@Override public void accept(Separator separator)", "class_method_signature": "SeparatorAnalyzer.accept(Separator separator)", "testcase": false, "constructor": false, "invocations": ["setScore", "computeEntropy", "analyze", "setFirstLineAHeader", "isFirstLineAHeader", "setHeaderInfoReliable", "isHeaderInfoReliable", "setHeaders", "getHeaders"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}