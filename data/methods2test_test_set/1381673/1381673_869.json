{"test_class": {"identifier": "JunctionTreeBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-beliefs/src/test/java/org/drools/beliefs/bayes/JunctionTreeBuilderTest.java"}, "test_case": {"identifier": "testJunctionWithPruning3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testJunctionWithPruning3() {\n        Graph<BayesVariable> graph = new BayesNetwork();\n        GraphNode x0 = addNode(graph);\n        GraphNode x1 = addNode(graph);\n        GraphNode x2 = addNode(graph);\n        GraphNode x3 = addNode(graph);\n        GraphNode x4 = addNode(graph);\n        GraphNode x5 = addNode(graph);\n        GraphNode x6 = addNode(graph);\n        GraphNode x7 = addNode(graph);\n\n        List<OpenBitSet> list = new ArrayList<OpenBitSet>();\n        OpenBitSet OpenBitSet1 = bitSet(\"00001111\");\n        OpenBitSet OpenBitSet2 = bitSet(\"00011110\");\n        OpenBitSet OpenBitSet3 = bitSet(\"11100000\");\n        OpenBitSet OpenBitSet4 = bitSet(\"01100001\");\n\n        OpenBitSet intersect1And2 = ((OpenBitSet)OpenBitSet2.clone());\n        intersect1And2.and(OpenBitSet1);\n\n        OpenBitSet intersect2And3 = ((OpenBitSet)OpenBitSet2.clone());\n        intersect2And3.and(OpenBitSet3);\n\n        OpenBitSet intersect1And4 = ((OpenBitSet)OpenBitSet1.clone());\n        intersect1And4.and(OpenBitSet4);\n\n        OpenBitSet intersect3And4 = ((OpenBitSet)OpenBitSet3.clone());\n        intersect3And4.and(OpenBitSet4);\n\n        list.add(OpenBitSet1);\n        list.add(OpenBitSet2);\n        list.add(OpenBitSet3);\n        list.add(OpenBitSet4);\n\n        JunctionTreeBuilder jtBuilder = new JunctionTreeBuilder( graph );\n        JunctionTreeClique jtNode = jtBuilder.junctionTree(list, false).getRoot();;\n        JunctionTreeClique root = jtNode;\n\n        assertEquals( OpenBitSet1, root.getBitSet() );\n        assertEquals( 2,  root.getChildren().size() );\n        JunctionTreeSeparator sep =  root.getChildren().get(0);\n        assertEquals( OpenBitSet1, sep.getParent().getBitSet() );\n        assertEquals( OpenBitSet2, sep.getChild().getBitSet() );\n        assertEquals(0, sep.getChild().getChildren().size());\n\n        sep =  root.getChildren().get(1);\n        assertEquals( OpenBitSet1, sep.getParent().getBitSet() );\n        assertEquals( OpenBitSet4, sep.getChild().getBitSet() );\n        assertEquals( intersect1And4, sep.getBitSet() );\n        assertEquals( 1, sep.getChild().getChildren().size() );\n\n        jtNode = sep.getChild();\n        assertEquals( OpenBitSet4, jtNode.getBitSet() );\n        assertEquals( 1,  jtNode.getChildren().size() );\n        sep =   jtNode.getChildren().get(0);\n        assertEquals( OpenBitSet4, sep.getParent().getBitSet() );\n        assertEquals( OpenBitSet3, sep.getChild().getBitSet() );\n        assertEquals( intersect3And4, sep.getBitSet() );\n        assertEquals( 0, sep.getChild().getChildren().size() );\n    }", "signature": "void testJunctionWithPruning3()", "full_signature": "@Test public void testJunctionWithPruning3()", "class_method_signature": "JunctionTreeBuilderTest.testJunctionWithPruning3()", "testcase": true, "constructor": false, "invocations": ["addNode", "addNode", "addNode", "addNode", "addNode", "addNode", "addNode", "addNode", "bitSet", "bitSet", "bitSet", "bitSet", "clone", "and", "clone", "and", "clone", "and", "clone", "and", "add", "add", "add", "add", "getRoot", "junctionTree", "assertEquals", "getBitSet", "assertEquals", "size", "getChildren", "get", "getChildren", "assertEquals", "getBitSet", "getParent", "assertEquals", "getBitSet", "getChild", "assertEquals", "size", "getChildren", "getChild", "get", "getChildren", "assertEquals", "getBitSet", "getParent", "assertEquals", "getBitSet", "getChild", "assertEquals", "getBitSet", "assertEquals", "size", "getChildren", "getChild", "getChild", "assertEquals", "getBitSet", "assertEquals", "size", "getChildren", "get", "getChildren", "assertEquals", "getBitSet", "getParent", "assertEquals", "getBitSet", "getChild", "assertEquals", "getBitSet", "assertEquals", "size", "getChildren", "getChild"]}, "focal_class": {"identifier": "JunctionTreeBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Graph<BayesVariable> graph;", "modifier": "private", "type": "Graph<BayesVariable>", "declarator": "graph", "var_name": "graph"}, {"original_string": "private boolean[][]          adjacencyMatrix;", "modifier": "private", "type": "boolean[][]", "declarator": "adjacencyMatrix", "var_name": "adjacencyMatrix"}], "methods": [{"identifier": "getGraph", "parameters": "()", "modifiers": "public", "return": "Graph<BayesVariable>", "signature": "Graph<BayesVariable> getGraph()", "full_signature": "public Graph<BayesVariable> getGraph()", "class_method_signature": "JunctionTreeBuilder.getGraph()", "testcase": false, "constructor": false}, {"identifier": "JunctionTreeBuilder", "parameters": "(Graph<BayesVariable> graph)", "modifiers": "public", "return": "", "signature": " JunctionTreeBuilder(Graph<BayesVariable> graph)", "full_signature": "public  JunctionTreeBuilder(Graph<BayesVariable> graph)", "class_method_signature": "JunctionTreeBuilder.JunctionTreeBuilder(Graph<BayesVariable> graph)", "testcase": false, "constructor": true}, {"identifier": "build", "parameters": "()", "modifiers": "public", "return": "JunctionTree", "signature": "JunctionTree build()", "full_signature": "public JunctionTree build()", "class_method_signature": "JunctionTreeBuilder.build()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(boolean init)", "modifiers": "public", "return": "JunctionTree", "signature": "JunctionTree build(boolean init)", "full_signature": "public JunctionTree build(boolean init)", "class_method_signature": "JunctionTreeBuilder.build(boolean init)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(Resource resource, String namespace, String name)", "modifiers": "public", "return": "JunctionTree", "signature": "JunctionTree build(Resource resource, String namespace, String name)", "full_signature": "public JunctionTree build(Resource resource, String namespace, String name)", "class_method_signature": "JunctionTreeBuilder.build(Resource resource, String namespace, String name)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(Resource resource, String namespace, String name, boolean init)", "modifiers": "public", "return": "JunctionTree", "signature": "JunctionTree build(Resource resource, String namespace, String name, boolean init)", "full_signature": "public JunctionTree build(Resource resource, String namespace, String name, boolean init)", "class_method_signature": "JunctionTreeBuilder.build(Resource resource, String namespace, String name, boolean init)", "testcase": false, "constructor": false}, {"identifier": "moralize", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void moralize()", "full_signature": "public void moralize()", "class_method_signature": "JunctionTreeBuilder.moralize()", "testcase": false, "constructor": false}, {"identifier": "moralize", "parameters": "(GraphNode<BayesVariable> v, GraphNode v1)", "modifiers": "public", "return": "void", "signature": "void moralize(GraphNode<BayesVariable> v, GraphNode v1)", "full_signature": "public void moralize(GraphNode<BayesVariable> v, GraphNode v1)", "class_method_signature": "JunctionTreeBuilder.moralize(GraphNode<BayesVariable> v, GraphNode v1)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(boolean[][] adjMatrix, int v1, int v2)", "modifiers": "public static", "return": "void", "signature": "void connect(boolean[][] adjMatrix, int v1, int v2)", "full_signature": "public static void connect(boolean[][] adjMatrix, int v1, int v2)", "class_method_signature": "JunctionTreeBuilder.connect(boolean[][] adjMatrix, int v1, int v2)", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "(boolean[][] adjMatrix, int v1, int v2)", "modifiers": "public static", "return": "void", "signature": "void disconnect(boolean[][] adjMatrix, int v1, int v2)", "full_signature": "public static void disconnect(boolean[][] adjMatrix, int v1, int v2)", "class_method_signature": "JunctionTreeBuilder.disconnect(boolean[][] adjMatrix, int v1, int v2)", "testcase": false, "constructor": false}, {"identifier": "triangulate", "parameters": "()", "modifiers": "public", "return": "List<OpenBitSet>", "signature": "List<OpenBitSet> triangulate()", "full_signature": "public List<OpenBitSet> triangulate()", "class_method_signature": "JunctionTreeBuilder.triangulate()", "testcase": false, "constructor": false}, {"identifier": "eliminateVertex", "parameters": "(PriorityQueue<EliminationCandidate> p, Map<Integer, EliminationCandidate> elmVertMap, boolean[][] clonedAdjMatrix, boolean[] adjList, Set<Integer> verticesToUpdate, EliminationCandidate v)", "modifiers": "public", "return": "void", "signature": "void eliminateVertex(PriorityQueue<EliminationCandidate> p, Map<Integer, EliminationCandidate> elmVertMap, boolean[][] clonedAdjMatrix, boolean[] adjList, Set<Integer> verticesToUpdate, EliminationCandidate v)", "full_signature": "public void eliminateVertex(PriorityQueue<EliminationCandidate> p, Map<Integer, EliminationCandidate> elmVertMap, boolean[][] clonedAdjMatrix, boolean[] adjList, Set<Integer> verticesToUpdate, EliminationCandidate v)", "class_method_signature": "JunctionTreeBuilder.eliminateVertex(PriorityQueue<EliminationCandidate> p, Map<Integer, EliminationCandidate> elmVertMap, boolean[][] clonedAdjMatrix, boolean[] adjList, Set<Integer> verticesToUpdate, EliminationCandidate v)", "testcase": false, "constructor": false}, {"identifier": "createClique", "parameters": "(int v, boolean[][] clonedAdjMatrix, Set<Integer> verticesToUpdate, boolean[] adjList)", "modifiers": "public", "return": "void", "signature": "void createClique(int v, boolean[][] clonedAdjMatrix, Set<Integer> verticesToUpdate, boolean[] adjList)", "full_signature": "public void createClique(int v, boolean[][] clonedAdjMatrix, Set<Integer> verticesToUpdate, boolean[] adjList)", "class_method_signature": "JunctionTreeBuilder.createClique(int v, boolean[][] clonedAdjMatrix, Set<Integer> verticesToUpdate, boolean[] adjList)", "testcase": false, "constructor": false}, {"identifier": "getRelatedVerticesToUpdate", "parameters": "(int v, boolean[][] clonedAdjMatrix, Set<Integer> verticesToUpdate, int i)", "modifiers": "private", "return": "void", "signature": "void getRelatedVerticesToUpdate(int v, boolean[][] clonedAdjMatrix, Set<Integer> verticesToUpdate, int i)", "full_signature": "private void getRelatedVerticesToUpdate(int v, boolean[][] clonedAdjMatrix, Set<Integer> verticesToUpdate, int i)", "class_method_signature": "JunctionTreeBuilder.getRelatedVerticesToUpdate(int v, boolean[][] clonedAdjMatrix, Set<Integer> verticesToUpdate, int i)", "testcase": false, "constructor": false}, {"identifier": "updateCliques", "parameters": "(List<OpenBitSet> cliques, OpenBitSet newClique)", "modifiers": "public static", "return": "void", "signature": "void updateCliques(List<OpenBitSet> cliques, OpenBitSet newClique)", "full_signature": "public static void updateCliques(List<OpenBitSet> cliques, OpenBitSet newClique)", "class_method_signature": "JunctionTreeBuilder.updateCliques(List<OpenBitSet> cliques, OpenBitSet newClique)", "testcase": false, "constructor": false}, {"identifier": "getAdjacencyMatrix", "parameters": "()", "modifiers": "public", "return": "boolean[][]", "signature": "boolean[][] getAdjacencyMatrix()", "full_signature": "public boolean[][] getAdjacencyMatrix()", "class_method_signature": "JunctionTreeBuilder.getAdjacencyMatrix()", "testcase": false, "constructor": false}, {"identifier": "cloneAdjacencyMarix", "parameters": "(boolean[][] src)", "modifiers": "public static", "return": "boolean[][]", "signature": "boolean[][] cloneAdjacencyMarix(boolean[][] src)", "full_signature": "public static boolean[][] cloneAdjacencyMarix(boolean[][] src)", "class_method_signature": "JunctionTreeBuilder.cloneAdjacencyMarix(boolean[][] src)", "testcase": false, "constructor": false}, {"identifier": "junctionTree", "parameters": "(List<OpenBitSet> cliques, boolean init)", "modifiers": "public", "return": "JunctionTree", "signature": "JunctionTree junctionTree(List<OpenBitSet> cliques, boolean init)", "full_signature": "public JunctionTree junctionTree(List<OpenBitSet> cliques, boolean init)", "class_method_signature": "JunctionTreeBuilder.junctionTree(List<OpenBitSet> cliques, boolean init)", "testcase": false, "constructor": false}, {"identifier": "junctionTree", "parameters": "(Resource resource, String namespace, String name, List<OpenBitSet> cliques, boolean init)", "modifiers": "public", "return": "JunctionTree", "signature": "JunctionTree junctionTree(Resource resource, String namespace, String name, List<OpenBitSet> cliques, boolean init)", "full_signature": "public JunctionTree junctionTree(Resource resource, String namespace, String name, List<OpenBitSet> cliques, boolean init)", "class_method_signature": "JunctionTreeBuilder.junctionTree(Resource resource, String namespace, String name, List<OpenBitSet> cliques, boolean init)", "testcase": false, "constructor": false}, {"identifier": "mergeGraphs", "parameters": "(SeparatorSet[][][] graphs, SeparatorSet separatorSet)", "modifiers": "public", "return": "void", "signature": "void mergeGraphs(SeparatorSet[][][] graphs, SeparatorSet separatorSet)", "full_signature": "public void mergeGraphs(SeparatorSet[][][] graphs, SeparatorSet separatorSet)", "class_method_signature": "JunctionTreeBuilder.mergeGraphs(SeparatorSet[][][] graphs, SeparatorSet separatorSet)", "testcase": false, "constructor": false}, {"identifier": "createJunctionTreeGraph", "parameters": "(SeparatorSet[][] sepGraph, JunctionTreeClique parent, JunctionTreeClique[] jtNodes, JunctionTreeSeparator[] jtSeps, int i)", "modifiers": "public", "return": "int", "signature": "int createJunctionTreeGraph(SeparatorSet[][] sepGraph, JunctionTreeClique parent, JunctionTreeClique[] jtNodes, JunctionTreeSeparator[] jtSeps, int i)", "full_signature": "public int createJunctionTreeGraph(SeparatorSet[][] sepGraph, JunctionTreeClique parent, JunctionTreeClique[] jtNodes, JunctionTreeSeparator[] jtSeps, int i)", "class_method_signature": "JunctionTreeBuilder.createJunctionTreeGraph(SeparatorSet[][] sepGraph, JunctionTreeClique parent, JunctionTreeClique[] jtNodes, JunctionTreeSeparator[] jtSeps, int i)", "testcase": false, "constructor": false}, {"identifier": "mapNodeToCliqueFamily", "parameters": "(OpenBitSet[] varNodeToCliques, JunctionTreeClique[] jtNodes)", "modifiers": "public", "return": "void", "signature": "void mapNodeToCliqueFamily(OpenBitSet[] varNodeToCliques, JunctionTreeClique[] jtNodes)", "full_signature": "public void mapNodeToCliqueFamily(OpenBitSet[] varNodeToCliques, JunctionTreeClique[] jtNodes)", "class_method_signature": "JunctionTreeBuilder.mapNodeToCliqueFamily(OpenBitSet[] varNodeToCliques, JunctionTreeClique[] jtNodes)", "testcase": false, "constructor": false}, {"identifier": "mapVarNodeToCliques", "parameters": "(OpenBitSet[] nodeToCliques, int id, OpenBitSet clique)", "modifiers": "public", "return": "void", "signature": "void mapVarNodeToCliques(OpenBitSet[] nodeToCliques, int id, OpenBitSet clique)", "full_signature": "public void mapVarNodeToCliques(OpenBitSet[] nodeToCliques, int id, OpenBitSet clique)", "class_method_signature": "JunctionTreeBuilder.mapVarNodeToCliques(OpenBitSet[] nodeToCliques, int id, OpenBitSet clique)", "testcase": false, "constructor": false}, {"identifier": "getAdjacentVertices", "parameters": "(boolean[][] adjacencyMatrix, int i)", "modifiers": "public static", "return": "List<Integer>", "signature": "List<Integer> getAdjacentVertices(boolean[][] adjacencyMatrix, int i)", "full_signature": "public static List<Integer> getAdjacentVertices(boolean[][] adjacencyMatrix, int i)", "class_method_signature": "JunctionTreeBuilder.getAdjacentVertices(boolean[][] adjacencyMatrix, int i)", "testcase": false, "constructor": false}], "file": "drools-beliefs/src/main/java/org/drools/beliefs/bayes/JunctionTreeBuilder.java"}, "focal_method": {"identifier": "junctionTree", "parameters": "(List<OpenBitSet> cliques, boolean init)", "modifiers": "public", "return": "JunctionTree", "body": "public JunctionTree junctionTree(List<OpenBitSet> cliques, boolean init) {\n        return junctionTree(null, null, null, cliques, init);\n    }", "signature": "JunctionTree junctionTree(List<OpenBitSet> cliques, boolean init)", "full_signature": "public JunctionTree junctionTree(List<OpenBitSet> cliques, boolean init)", "class_method_signature": "JunctionTreeBuilder.junctionTree(List<OpenBitSet> cliques, boolean init)", "testcase": false, "constructor": false, "invocations": ["junctionTree"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}