{"test_class": {"identifier": "DistributedShardFrontendTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DOMDataTreeIdentifier ROOT =\n            new DOMDataTreeIdentifier(LogicalDatastoreType.CONFIGURATION, YangInstanceIdentifier.empty());", "modifier": "private static final", "type": "DOMDataTreeIdentifier", "declarator": "ROOT =\n            new DOMDataTreeIdentifier(LogicalDatastoreType.CONFIGURATION, YangInstanceIdentifier.empty())", "var_name": "ROOT"}, {"original_string": "private static final ListenableFuture<Object> SUCCESS_FUTURE = Futures.immediateFuture(null);", "modifier": "private static final", "type": "ListenableFuture<Object>", "declarator": "SUCCESS_FUTURE = Futures.immediateFuture(null)", "var_name": "SUCCESS_FUTURE"}, {"original_string": "private ShardedDOMDataTree shardedDOMDataTree;", "modifier": "private", "type": "ShardedDOMDataTree", "declarator": "shardedDOMDataTree", "var_name": "shardedDOMDataTree"}, {"original_string": "private DataStoreClient client;", "modifier": "private", "type": "DataStoreClient", "declarator": "client", "var_name": "client"}, {"original_string": "private ClientLocalHistory clientHistory;", "modifier": "private", "type": "ClientLocalHistory", "declarator": "clientHistory", "var_name": "clientHistory"}, {"original_string": "private ClientTransaction clientTransaction;", "modifier": "private", "type": "ClientTransaction", "declarator": "clientTransaction", "var_name": "clientTransaction"}, {"original_string": "private DOMDataTreeWriteCursor cursor;", "modifier": "private", "type": "DOMDataTreeWriteCursor", "declarator": "cursor", "var_name": "cursor"}, {"original_string": "private static final YangInstanceIdentifier OUTER_LIST_YID = TestModel.OUTER_LIST_PATH.node(\n            NodeIdentifierWithPredicates.of(TestModel.OUTER_LIST_QNAME, TestModel.ID_QNAME, 1));", "modifier": "private static final", "type": "YangInstanceIdentifier", "declarator": "OUTER_LIST_YID = TestModel.OUTER_LIST_PATH.node(\n            NodeIdentifierWithPredicates.of(TestModel.OUTER_LIST_QNAME, TestModel.ID_QNAME, 1))", "var_name": "OUTER_LIST_YID"}, {"original_string": "private static final DOMDataTreeIdentifier OUTER_LIST_ID =\n            new DOMDataTreeIdentifier(LogicalDatastoreType.CONFIGURATION, OUTER_LIST_YID);", "modifier": "private static final", "type": "DOMDataTreeIdentifier", "declarator": "OUTER_LIST_ID =\n            new DOMDataTreeIdentifier(LogicalDatastoreType.CONFIGURATION, OUTER_LIST_YID)", "var_name": "OUTER_LIST_ID"}, {"original_string": "@Captor\n    private ArgumentCaptor<PathArgument> pathArgumentCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<PathArgument>", "declarator": "pathArgumentCaptor", "var_name": "pathArgumentCaptor"}, {"original_string": "@Captor\n    private ArgumentCaptor<NormalizedNode<?, ?>> nodeCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<NormalizedNode<?, ?>>", "declarator": "nodeCaptor", "var_name": "nodeCaptor"}, {"original_string": "private DOMStoreThreePhaseCommitCohort commitCohort;", "modifier": "private", "type": "DOMStoreThreePhaseCommitCohort", "declarator": "commitCohort", "var_name": "commitCohort"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/sharding/DistributedShardFrontendTest.java"}, "test_case": {"identifier": "testClientTransaction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClientTransaction() throws Exception {\n        final DistributedDataStore distributedDataStore = mock(DistributedDataStore.class);\n        final ActorUtils context = mock(ActorUtils.class);\n        doReturn(context).when(distributedDataStore).getActorUtils();\n        doReturn(SchemaContextHelper.full()).when(context).getSchemaContext();\n\n        final DistributedShardFrontend rootShard = new DistributedShardFrontend(distributedDataStore, client, ROOT);\n\n        try (DOMDataTreeProducer producer = shardedDOMDataTree.createProducer(Collections.singletonList(ROOT))) {\n            shardedDOMDataTree.registerDataTreeShard(ROOT, rootShard, producer);\n        }\n\n        final DataStoreClient outerListClient = mock(DataStoreClient.class);\n        final ClientTransaction outerListClientTransaction = mock(ClientTransaction.class);\n        final ClientLocalHistory outerListClientHistory = mock(ClientLocalHistory.class);\n        final DOMDataTreeWriteCursor outerListCursor = mock(DOMDataTreeWriteCursor.class);\n\n        doNothing().when(outerListCursor).close();\n        doNothing().when(outerListCursor).write(any(), any());\n        doNothing().when(outerListCursor).merge(any(), any());\n        doNothing().when(outerListCursor).delete(any());\n\n        doReturn(outerListCursor).when(outerListClientTransaction).openCursor();\n        doReturn(outerListClientTransaction).when(outerListClient).createTransaction();\n        doReturn(outerListClientHistory).when(outerListClient).createLocalHistory();\n        doReturn(outerListClientTransaction).when(outerListClientHistory).createTransaction();\n\n        doReturn(commitCohort).when(outerListClientTransaction).ready();\n\n        doNothing().when(outerListClientHistory).close();\n        doNothing().when(outerListClient).close();\n\n        final DistributedShardFrontend outerListShard = new DistributedShardFrontend(\n                distributedDataStore, outerListClient, OUTER_LIST_ID);\n        try (DOMDataTreeProducer producer =\n                     shardedDOMDataTree.createProducer(Collections.singletonList(OUTER_LIST_ID))) {\n            shardedDOMDataTree.registerDataTreeShard(OUTER_LIST_ID, outerListShard, producer);\n        }\n\n        final DOMDataTreeProducer producer = shardedDOMDataTree.createProducer(Collections.singletonList(ROOT));\n        final DOMDataTreeCursorAwareTransaction tx = producer.createTransaction(false);\n        final DOMDataTreeWriteCursor txCursor = tx.createCursor(ROOT);\n\n        assertNotNull(txCursor);\n        txCursor.write(TestModel.TEST_PATH.getLastPathArgument(), createCrossShardContainer());\n\n        //check the lower shard got the correct modification\n        verify(outerListCursor, times(2)).write(pathArgumentCaptor.capture(), nodeCaptor.capture());\n\n        final List<PathArgument> capturedArgs = pathArgumentCaptor.getAllValues();\n        assertEquals(2, capturedArgs.size());\n        assertThat(capturedArgs,\n            hasItems(new NodeIdentifier(TestModel.ID_QNAME), new NodeIdentifier(TestModel.INNER_LIST_QNAME)));\n\n        final List<NormalizedNode<?, ?>> capturedValues = nodeCaptor.getAllValues();\n        assertEquals(2, capturedValues.size());\n        assertThat(capturedValues,\n            hasItems(ImmutableNodes.leafNode(TestModel.ID_QNAME, 1), createInnerMapNode(1)));\n\n        txCursor.close();\n        tx.commit().get();\n\n        verify(commitCohort, times(2)).canCommit();\n        verify(commitCohort, times(2)).preCommit();\n        verify(commitCohort, times(2)).commit();\n    }", "signature": "void testClientTransaction()", "full_signature": "@Test public void testClientTransaction()", "class_method_signature": "DistributedShardFrontendTest.testClientTransaction()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "getActorUtils", "when", "doReturn", "getSchemaContext", "when", "doReturn", "full", "createProducer", "singletonList", "registerDataTreeShard", "mock", "mock", "mock", "mock", "close", "when", "doNothing", "write", "when", "doNothing", "any", "any", "merge", "when", "doNothing", "any", "any", "delete", "when", "doNothing", "any", "openCursor", "when", "doReturn", "createTransaction", "when", "doReturn", "createLocalHistory", "when", "doReturn", "createTransaction", "when", "doReturn", "ready", "when", "doReturn", "close", "when", "doNothing", "close", "when", "doNothing", "createProducer", "singletonList", "registerDataTreeShard", "createProducer", "singletonList", "createTransaction", "createCursor", "assertNotNull", "write", "getLastPathArgument", "createCrossShardContainer", "write", "verify", "times", "capture", "capture", "getAllValues", "assertEquals", "size", "assertThat", "hasItems", "getAllValues", "assertEquals", "size", "assertThat", "hasItems", "leafNode", "createInnerMapNode", "close", "get", "commit", "canCommit", "verify", "times", "preCommit", "verify", "times", "commit", "verify", "times"]}, "focal_class": {"identifier": "DistributedShardFrontend", "superclass": "", "interfaces": "implements ReadableWriteableDOMDataTreeShard", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DistributedShardFrontend.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DistributedShardFrontend.class)", "var_name": "LOG"}, {"original_string": "private final DataStoreClient client;", "modifier": "private final", "type": "DataStoreClient", "declarator": "client", "var_name": "client"}, {"original_string": "private final DOMDataTreeIdentifier shardRoot;", "modifier": "private final", "type": "DOMDataTreeIdentifier", "declarator": "shardRoot", "var_name": "shardRoot"}, {"original_string": "@GuardedBy(\"this\")\n    private final Map<DOMDataTreeIdentifier, ChildShardContext> childShards = new HashMap<>();", "modifier": "@GuardedBy(\"this\")\n    private final", "type": "Map<DOMDataTreeIdentifier, ChildShardContext>", "declarator": "childShards = new HashMap<>()", "var_name": "childShards"}, {"original_string": "@GuardedBy(\"this\")\n    private final List<ShardProxyProducer> producers = new ArrayList<>();", "modifier": "@GuardedBy(\"this\")\n    private final", "type": "List<ShardProxyProducer>", "declarator": "producers = new ArrayList<>()", "var_name": "producers"}, {"original_string": "private final DistributedShardChangePublisher publisher;", "modifier": "private final", "type": "DistributedShardChangePublisher", "declarator": "publisher", "var_name": "publisher"}], "methods": [{"identifier": "DistributedShardFrontend", "parameters": "(final DistributedDataStoreInterface distributedDataStore,\n                             final DataStoreClient client,\n                             final DOMDataTreeIdentifier shardRoot)", "modifiers": "", "return": "", "signature": " DistributedShardFrontend(final DistributedDataStoreInterface distributedDataStore,\n                             final DataStoreClient client,\n                             final DOMDataTreeIdentifier shardRoot)", "full_signature": "  DistributedShardFrontend(final DistributedDataStoreInterface distributedDataStore,\n                             final DataStoreClient client,\n                             final DOMDataTreeIdentifier shardRoot)", "class_method_signature": "DistributedShardFrontend.DistributedShardFrontend(final DistributedDataStoreInterface distributedDataStore,\n                             final DataStoreClient client,\n                             final DOMDataTreeIdentifier shardRoot)", "testcase": false, "constructor": true}, {"identifier": "createProducer", "parameters": "(final Collection<DOMDataTreeIdentifier> paths)", "modifiers": "@Override public synchronized", "return": "DOMDataTreeShardProducer", "signature": "DOMDataTreeShardProducer createProducer(final Collection<DOMDataTreeIdentifier> paths)", "full_signature": "@Override public synchronized DOMDataTreeShardProducer createProducer(final Collection<DOMDataTreeIdentifier> paths)", "class_method_signature": "DistributedShardFrontend.createProducer(final Collection<DOMDataTreeIdentifier> paths)", "testcase": false, "constructor": false}, {"identifier": "onChildAttached", "parameters": "(final DOMDataTreeIdentifier prefix, final DOMDataTreeShard child)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void onChildAttached(final DOMDataTreeIdentifier prefix, final DOMDataTreeShard child)", "full_signature": "@Override public synchronized void onChildAttached(final DOMDataTreeIdentifier prefix, final DOMDataTreeShard child)", "class_method_signature": "DistributedShardFrontend.onChildAttached(final DOMDataTreeIdentifier prefix, final DOMDataTreeShard child)", "testcase": false, "constructor": false}, {"identifier": "onChildDetached", "parameters": "(final DOMDataTreeIdentifier prefix, final DOMDataTreeShard child)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void onChildDetached(final DOMDataTreeIdentifier prefix, final DOMDataTreeShard child)", "full_signature": "@Override public synchronized void onChildDetached(final DOMDataTreeIdentifier prefix, final DOMDataTreeShard child)", "class_method_signature": "DistributedShardFrontend.onChildDetached(final DOMDataTreeIdentifier prefix, final DOMDataTreeShard child)", "testcase": false, "constructor": false}, {"identifier": "addChildShard", "parameters": "(final DOMDataTreeIdentifier prefix, final DOMDataTreeShard child)", "modifiers": "private", "return": "void", "signature": "void addChildShard(final DOMDataTreeIdentifier prefix, final DOMDataTreeShard child)", "full_signature": "private void addChildShard(final DOMDataTreeIdentifier prefix, final DOMDataTreeShard child)", "class_method_signature": "DistributedShardFrontend.addChildShard(final DOMDataTreeIdentifier prefix, final DOMDataTreeShard child)", "testcase": false, "constructor": false}, {"identifier": "createModificationFactory", "parameters": "(final Collection<DOMDataTreeIdentifier> prefixes)", "modifiers": "", "return": "DistributedShardModificationFactory", "signature": "DistributedShardModificationFactory createModificationFactory(final Collection<DOMDataTreeIdentifier> prefixes)", "full_signature": " DistributedShardModificationFactory createModificationFactory(final Collection<DOMDataTreeIdentifier> prefixes)", "class_method_signature": "DistributedShardFrontend.createModificationFactory(final Collection<DOMDataTreeIdentifier> prefixes)", "testcase": false, "constructor": false}, {"identifier": "updateProducers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateProducers()", "full_signature": "private void updateProducers()", "class_method_signature": "DistributedShardFrontend.updateProducers()", "testcase": false, "constructor": false}, {"identifier": "registerTreeChangeListener", "parameters": "(\n            final YangInstanceIdentifier treeId, final L listener)", "modifiers": "@Override public", "return": "ListenerRegistration<L>", "signature": "ListenerRegistration<L> registerTreeChangeListener(\n            final YangInstanceIdentifier treeId, final L listener)", "full_signature": "@Override public ListenerRegistration<L> registerTreeChangeListener(\n            final YangInstanceIdentifier treeId, final L listener)", "class_method_signature": "DistributedShardFrontend.registerTreeChangeListener(\n            final YangInstanceIdentifier treeId, final L listener)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/sharding/DistributedShardFrontend.java"}, "focal_method": {"identifier": "createProducer", "parameters": "(final Collection<DOMDataTreeIdentifier> paths)", "modifiers": "@Override public synchronized", "return": "DOMDataTreeShardProducer", "body": "@Override\n    public synchronized DOMDataTreeShardProducer createProducer(final Collection<DOMDataTreeIdentifier> paths) {\n        for (final DOMDataTreeIdentifier prodPrefix : paths) {\n            checkArgument(shardRoot.contains(prodPrefix), \"Prefix %s is not contained under shard root\", prodPrefix,\n                paths);\n        }\n\n        final ShardProxyProducer ret =\n                new ShardProxyProducer(shardRoot, paths, client, createModificationFactory(paths));\n        producers.add(ret);\n        return ret;\n    }", "signature": "DOMDataTreeShardProducer createProducer(final Collection<DOMDataTreeIdentifier> paths)", "full_signature": "@Override public synchronized DOMDataTreeShardProducer createProducer(final Collection<DOMDataTreeIdentifier> paths)", "class_method_signature": "DistributedShardFrontend.createProducer(final Collection<DOMDataTreeIdentifier> paths)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "contains", "createModificationFactory", "add"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}