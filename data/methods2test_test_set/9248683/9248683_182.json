{"test_class": {"identifier": "HqlQueryTranslatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HibernatePropertyResolver resolver = new MockHibernatePropertyResolver();", "modifier": "private final", "type": "HibernatePropertyResolver", "declarator": "resolver = new MockHibernatePropertyResolver()", "var_name": "resolver"}, {"original_string": "private final BoxMaker boxMaker = new SimpleBoxMaker();", "modifier": "private final", "type": "BoxMaker", "declarator": "boxMaker = new SimpleBoxMaker()", "var_name": "boxMaker"}, {"original_string": "private final ContainsExpressionHandler<String> containsExpressionHandler = new ContainsExpressionNonHandler<String>();", "modifier": "private final", "type": "ContainsExpressionHandler<String>", "declarator": "containsExpressionHandler = new ContainsExpressionNonHandler<String>()", "var_name": "containsExpressionHandler"}, {"original_string": "private final HqlQueryTranslator translator = new HqlQueryTranslator(resolver, boxMaker, containsExpressionHandler);", "modifier": "private final", "type": "HqlQueryTranslator", "declarator": "translator = new HqlQueryTranslator(resolver, boxMaker, containsExpressionHandler)", "var_name": "translator"}, {"original_string": "private final String property = \"propertyName\";", "modifier": "private final", "type": "String", "declarator": "property = \"propertyName\"", "var_name": "property"}, {"original_string": "private final String value = \"test property value\";", "modifier": "private final", "type": "String", "declarator": "value = \"test property value\"", "var_name": "value"}, {"original_string": "private final Integer from = 1;", "modifier": "private final", "type": "Integer", "declarator": "from = 1", "var_name": "from"}, {"original_string": "private final Integer to = 10;", "modifier": "private final", "type": "Integer", "declarator": "to = 10", "var_name": "to"}, {"original_string": "private final String[] values = { \"test\", \"value\", \"array\" };", "modifier": "private final", "type": "String[]", "declarator": "values = { \"test\", \"value\", \"array\" }", "var_name": "values"}, {"original_string": "private final Box<Integer> box = new Box<Integer>(new Point<Integer>(0, 0),\n            new Point<Integer>(1, 1));", "modifier": "private final", "type": "Box<Integer>", "declarator": "box = new Box<Integer>(new Point<Integer>(0, 0),\n            new Point<Integer>(1, 1))", "var_name": "box"}], "file": "seeking-hibernate/src/test/java/com/eharmony/matching/seeking/translator/hibernate/HqlQueryTranslatorTest.java"}, "test_case": {"identifier": "between", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void between() {\n        assertEquals(\n                join(property, HibernateOperator.BETWEEN, from,\n                        HibernateOperator.AND, to), translator.between(\n                        property, from, to));\n    }", "signature": "void between()", "full_signature": "@Test public void between()", "class_method_signature": "HqlQueryTranslatorTest.between()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "join", "between"]}, "focal_class": {"identifier": "HqlQueryTranslator", "superclass": "extends\n        AbstractHibernateQueryTranslator<String, String, String>", "interfaces": "implements\n        QueryTranslator<String, String, String>", "fields": [{"original_string": "public static final String TIMESTAMP_FORMAT = \"yyyy-MM-dd HH:mm:ss\";", "modifier": "public static final", "type": "String", "declarator": "TIMESTAMP_FORMAT = \"yyyy-MM-dd HH:mm:ss\"", "var_name": "TIMESTAMP_FORMAT"}, {"original_string": "private final Function<Object, String> toString = new Function<Object, String>() {\n        @Override\n        public String apply(Object o) {\n            return string(o);\n        }\n    };", "modifier": "private final", "type": "Function<Object, String>", "declarator": "toString = new Function<Object, String>() {\n        @Override\n        public String apply(Object o) {\n            return string(o);\n        }\n    }", "var_name": "toString"}, {"original_string": "private final DateFormat dateFormat = new SimpleDateFormat(TIMESTAMP_FORMAT);", "modifier": "private final", "type": "DateFormat", "declarator": "dateFormat = new SimpleDateFormat(TIMESTAMP_FORMAT)", "var_name": "dateFormat"}], "methods": [{"identifier": "HqlQueryTranslator", "parameters": "(HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker,\n            ContainsExpressionHandler<String> containsExpressionHandler)", "modifiers": "public", "return": "", "signature": " HqlQueryTranslator(HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker,\n            ContainsExpressionHandler<String> containsExpressionHandler)", "full_signature": "public  HqlQueryTranslator(HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker,\n            ContainsExpressionHandler<String> containsExpressionHandler)", "class_method_signature": "HqlQueryTranslator.HqlQueryTranslator(HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker,\n            ContainsExpressionHandler<String> containsExpressionHandler)", "testcase": false, "constructor": true}, {"identifier": "HqlQueryTranslator", "parameters": "(HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker)", "modifiers": "public", "return": "", "signature": " HqlQueryTranslator(HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker)", "full_signature": "public  HqlQueryTranslator(HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker)", "class_method_signature": "HqlQueryTranslator.HqlQueryTranslator(HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker)", "testcase": false, "constructor": true}, {"identifier": "HqlQueryTranslator", "parameters": "(HibernatePropertyResolver propertyResolver)", "modifiers": "public", "return": "", "signature": " HqlQueryTranslator(HibernatePropertyResolver propertyResolver)", "full_signature": "public  HqlQueryTranslator(HibernatePropertyResolver propertyResolver)", "class_method_signature": "HqlQueryTranslator.HqlQueryTranslator(HibernatePropertyResolver propertyResolver)", "testcase": false, "constructor": true}, {"identifier": "string", "parameters": "(Object o)", "modifiers": "protected", "return": "String", "signature": "String string(Object o)", "full_signature": "protected String string(Object o)", "class_method_signature": "HqlQueryTranslator.string(Object o)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(String fieldName, Object... parts)", "modifiers": "protected", "return": "String", "signature": "String join(String fieldName, Object... parts)", "full_signature": "protected String join(String fieldName, Object... parts)", "class_method_signature": "HqlQueryTranslator.join(String fieldName, Object... parts)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(NativeExpression e, Class<T> entityClass)", "modifiers": "@Override protected", "return": "String", "signature": "String translate(NativeExpression e, Class<T> entityClass)", "full_signature": "@Override protected String translate(NativeExpression e, Class<T> entityClass)", "class_method_signature": "HqlQueryTranslator.translate(NativeExpression e, Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "eq", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "String", "signature": "String eq(String fieldName, Object value)", "full_signature": "@Override public String eq(String fieldName, Object value)", "class_method_signature": "HqlQueryTranslator.eq(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "ne", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "String", "signature": "String ne(String fieldName, Object value)", "full_signature": "@Override public String ne(String fieldName, Object value)", "class_method_signature": "HqlQueryTranslator.ne(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "lt", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "String", "signature": "String lt(String fieldName, Object value)", "full_signature": "@Override public String lt(String fieldName, Object value)", "class_method_signature": "HqlQueryTranslator.lt(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "lte", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "String", "signature": "String lte(String fieldName, Object value)", "full_signature": "@Override public String lte(String fieldName, Object value)", "class_method_signature": "HqlQueryTranslator.lte(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "gt", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "String", "signature": "String gt(String fieldName, Object value)", "full_signature": "@Override public String gt(String fieldName, Object value)", "class_method_signature": "HqlQueryTranslator.gt(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "gte", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "String", "signature": "String gte(String fieldName, Object value)", "full_signature": "@Override public String gte(String fieldName, Object value)", "class_method_signature": "HqlQueryTranslator.gte(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "between", "parameters": "(String fieldName, Object from, Object to)", "modifiers": "@Override public", "return": "String", "signature": "String between(String fieldName, Object from, Object to)", "full_signature": "@Override public String between(String fieldName, Object from, Object to)", "class_method_signature": "HqlQueryTranslator.between(String fieldName, Object from, Object to)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "(String fieldName, Object[] values)", "modifiers": "@Override public", "return": "String", "signature": "String in(String fieldName, Object[] values)", "full_signature": "@Override public String in(String fieldName, Object[] values)", "class_method_signature": "HqlQueryTranslator.in(String fieldName, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "notIn", "parameters": "(String fieldName, Object[] values)", "modifiers": "@Override public", "return": "String", "signature": "String notIn(String fieldName, Object[] values)", "full_signature": "@Override public String notIn(String fieldName, Object[] values)", "class_method_signature": "HqlQueryTranslator.notIn(String fieldName, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "(String fieldName)", "modifiers": "@Override public", "return": "String", "signature": "String isNull(String fieldName)", "full_signature": "@Override public String isNull(String fieldName)", "class_method_signature": "HqlQueryTranslator.isNull(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "notNull", "parameters": "(String fieldName)", "modifiers": "@Override public", "return": "String", "signature": "String notNull(String fieldName)", "full_signature": "@Override public String notNull(String fieldName)", "class_method_signature": "HqlQueryTranslator.notNull(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String fieldName)", "modifiers": "@Override public", "return": "String", "signature": "String isEmpty(String fieldName)", "full_signature": "@Override public String isEmpty(String fieldName)", "class_method_signature": "HqlQueryTranslator.isEmpty(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(String fieldName)", "modifiers": "@Override public", "return": "String", "signature": "String notEmpty(String fieldName)", "full_signature": "@Override public String notEmpty(String fieldName)", "class_method_signature": "HqlQueryTranslator.notEmpty(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "within", "parameters": "(String xFieldName,\n            String yFieldName, Box<N> box)", "modifiers": "@Override public", "return": "String", "signature": "String within(String xFieldName,\n            String yFieldName, Box<N> box)", "full_signature": "@Override public String within(String xFieldName,\n            String yFieldName, Box<N> box)", "class_method_signature": "HqlQueryTranslator.within(String xFieldName,\n            String yFieldName, Box<N> box)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(String... subqueries)", "modifiers": "@Override public", "return": "String", "signature": "String and(String... subqueries)", "full_signature": "@Override public String and(String... subqueries)", "class_method_signature": "HqlQueryTranslator.and(String... subqueries)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(String... subqueries)", "modifiers": "@Override public", "return": "String", "signature": "String or(String... subqueries)", "full_signature": "@Override public String or(String... subqueries)", "class_method_signature": "HqlQueryTranslator.or(String... subqueries)", "testcase": false, "constructor": false}, {"identifier": "junction", "parameters": "(HibernateOperator operator, String... subqueries)", "modifiers": "protected", "return": "String", "signature": "String junction(HibernateOperator operator, String... subqueries)", "full_signature": "protected String junction(HibernateOperator operator, String... subqueries)", "class_method_signature": "HqlQueryTranslator.junction(HibernateOperator operator, String... subqueries)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "(String fieldName, Order o)", "modifiers": "@Override public", "return": "String", "signature": "String order(String fieldName, Order o)", "full_signature": "@Override public String order(String fieldName, Order o)", "class_method_signature": "HqlQueryTranslator.order(String fieldName, Order o)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "(String... orders)", "modifiers": "@Override public", "return": "String", "signature": "String order(String... orders)", "full_signature": "@Override public String order(String... orders)", "class_method_signature": "HqlQueryTranslator.order(String... orders)", "testcase": false, "constructor": false}, {"identifier": "translateProjection", "parameters": "(Query<T, R> query)", "modifiers": "@Override public", "return": "String", "signature": "String translateProjection(Query<T, R> query)", "full_signature": "@Override public String translateProjection(Query<T, R> query)", "class_method_signature": "HqlQueryTranslator.translateProjection(Query<T, R> query)", "testcase": false, "constructor": false}], "file": "seeking-hibernate/src/main/java/com/eharmony/matching/seeking/translator/hibernate/HqlQueryTranslator.java"}, "focal_method": {"identifier": "between", "parameters": "(String fieldName, Object from, Object to)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String between(String fieldName, Object from, Object to) {\n        return join(fieldName, HibernateOperator.BETWEEN, from,\n                HibernateOperator.AND, to);\n    }", "signature": "String between(String fieldName, Object from, Object to)", "full_signature": "@Override public String between(String fieldName, Object from, Object to)", "class_method_signature": "HqlQueryTranslator.between(String fieldName, Object from, Object to)", "testcase": false, "constructor": false, "invocations": ["join"]}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}