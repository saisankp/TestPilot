{"test_class": {"identifier": "SpnegoAuthenticatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static FakeKDC fakeKDC;", "modifier": "private static", "type": "FakeKDC", "declarator": "fakeKDC", "var_name": "fakeKDC"}, {"original_string": "private static final String REALM = \"EXAMPLE.COM\";", "modifier": "private static final", "type": "String", "declarator": "REALM = \"EXAMPLE.COM\"", "var_name": "REALM"}, {"original_string": "private static final String BROKER_HOST = \"testhost\";", "modifier": "private static final", "type": "String", "declarator": "BROKER_HOST = \"testhost\"", "var_name": "BROKER_HOST"}, {"original_string": "private static final String BROKER = \"broker/\" + BROKER_HOST + \"@\" + REALM;", "modifier": "private static final", "type": "String", "declarator": "BROKER = \"broker/\" + BROKER_HOST + \"@\" + REALM", "var_name": "BROKER"}, {"original_string": "private static final String ALICE = \"alice@\" + REALM;", "modifier": "private static final", "type": "String", "declarator": "ALICE = \"alice@\" + REALM", "var_name": "ALICE"}], "file": "code/core/src/test/java/com/google/cloud/broker/authentication/backends/SpnegoAuthenticatorTest.java"}, "test_case": {"identifier": "testMissingValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMissingValue() throws Exception {\n        List<List<Map<String, String>>> configs = List.of(\n            List.of(Map.of(\"keytab\", \"bar\")),    // Missing principal\n            List.of(Map.of(\"principal\", \"bar\"))  // Missing keytab\n        );\n        for (List<Map<String, String>> config: configs) {\n            try (SettingsOverride override = SettingsOverride.apply(Map.of(AppSettings.KEYTABS, config))) {\n                try {\n                    SpnegoAuthenticator auth = new SpnegoAuthenticator();\n                    auth.authenticateUser();\n                    fail();\n                } catch (IllegalArgumentException e) {\n                    assertTrue(e.getMessage().startsWith(\"Invalid `authentication.spnego.keytabs` setting -- Error: hardcoded value: No configuration setting found for key\"));\n                }\n            }\n        }\n    }", "signature": "void testMissingValue()", "full_signature": "@Test public void testMissingValue()", "class_method_signature": "SpnegoAuthenticatorTest.testMissingValue()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "of", "apply", "of", "authenticateUser", "fail", "assertTrue", "startsWith", "getMessage"]}, "focal_class": {"identifier": "SpnegoAuthenticator", "superclass": "extends AbstractAuthenticationBackend", "interfaces": "", "fields": [{"original_string": "private ArrayList<Subject> logins = new ArrayList<Subject>();", "modifier": "private", "type": "ArrayList<Subject>", "declarator": "logins = new ArrayList<Subject>()", "var_name": "logins"}, {"original_string": "private final static String INVALID_SETTING = \"Invalid `\" + AppSettings.KEYTABS + \"` setting\";", "modifier": "private final static", "type": "String", "declarator": "INVALID_SETTING = \"Invalid `\" + AppSettings.KEYTABS + \"` setting\"", "var_name": "INVALID_SETTING"}], "methods": [{"identifier": "initLogin", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initLogin()", "full_signature": "private void initLogin()", "class_method_signature": "SpnegoAuthenticator.initLogin()", "testcase": false, "constructor": false}, {"identifier": "principalLogin", "parameters": "(String principal, File keytabFile)", "modifiers": "private", "return": "Subject", "signature": "Subject principalLogin(String principal, File keytabFile)", "full_signature": "private Subject principalLogin(String principal, File keytabFile)", "class_method_signature": "SpnegoAuthenticator.principalLogin(String principal, File keytabFile)", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "(String principal, File keytabFile)", "modifiers": "private static", "return": "Configuration", "signature": "Configuration getConfiguration(String principal, File keytabFile)", "full_signature": "private static Configuration getConfiguration(String principal, File keytabFile)", "class_method_signature": "SpnegoAuthenticator.getConfiguration(String principal, File keytabFile)", "testcase": false, "constructor": false}, {"identifier": "authenticateUser", "parameters": "(String authorizationHeader)", "modifiers": "public", "return": "String", "signature": "String authenticateUser(String authorizationHeader)", "full_signature": "public String authenticateUser(String authorizationHeader)", "class_method_signature": "SpnegoAuthenticator.authenticateUser(String authorizationHeader)", "testcase": false, "constructor": false}], "file": "code/core/src/main/java/com/google/cloud/broker/authentication/backends/SpnegoAuthenticator.java"}, "focal_method": {"identifier": "authenticateUser", "parameters": "(String authorizationHeader)", "modifiers": "public", "return": "String", "body": "public String authenticateUser(String authorizationHeader) {\n        if (logins.isEmpty()) {\n            initLogin();\n        }\n\n        if (! authorizationHeader.startsWith(\"Negotiate \")) {\n            throw Status.UNAUTHENTICATED.withDescription(\"Use \\\"authorization: Negotiate <token>\\\" metadata to authenticate\").asRuntimeException();\n        }\n\n        String spnegoToken = authorizationHeader.split(\"\\\\s\")[1];\n\n        String authenticatedUser = null;\n\n        for (Subject login : logins) {\n            authenticatedUser = Subject.doAs(login, (PrivilegedAction<String>) () -> {\n                try {\n                    GSSManager manager = GSSManager.getInstance();\n                    Oid spnegoOid = new Oid(\"1.3.6.1.5.5.2\");\n                    GSSCredential serverCredential = manager.createCredential(null,\n                        GSSCredential.DEFAULT_LIFETIME,\n                        spnegoOid,\n                        GSSCredential.ACCEPT_ONLY);\n                    GSSContext context = manager.createContext(serverCredential);\n                    byte[] tokenBytes = Base64.getDecoder().decode(spnegoToken.getBytes());\n                    context.acceptSecContext(tokenBytes, 0, tokenBytes.length);\n                    return context.getSrcName().toString();\n                } catch (GSSException e) {\n                    return null;\n                }\n            });\n            if (authenticatedUser != null) {\n                return authenticatedUser;\n            }\n        }\n\n        throw Status.UNAUTHENTICATED.withDescription(\"SPNEGO authentication failed\").asRuntimeException();\n    }", "signature": "String authenticateUser(String authorizationHeader)", "full_signature": "public String authenticateUser(String authorizationHeader)", "class_method_signature": "SpnegoAuthenticator.authenticateUser(String authorizationHeader)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "initLogin", "startsWith", "asRuntimeException", "withDescription", "split", "doAs", "getInstance", "createCredential", "createContext", "decode", "getDecoder", "getBytes", "acceptSecContext", "toString", "getSrcName", "asRuntimeException", "withDescription"]}, "repository": {"repo_id": 176837289, "url": "https://github.com/GoogleCloudPlatform/gcp-token-broker", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 27, "size": 1700, "license": "licensed"}}