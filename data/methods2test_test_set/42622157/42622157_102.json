{"test_class": {"identifier": "AuthorizationTreeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AuthorizationTree authorizationTree;", "modifier": "private", "type": "AuthorizationTree", "declarator": "authorizationTree", "var_name": "authorizationTree"}], "file": "org.eclipse.winery.accountability/src/test/java/org/eclipse/winery/accountability/model/authorization/AuthorizationTreeTest.java"}, "test_case": {"identifier": "getServiceOwner", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getServiceOwner() {\n        assertTrue(this.authorizationTree.getServiceOwnerBlockchainAddress().isPresent());\n        assertEquals(\"0x1111\", this.authorizationTree.getServiceOwnerBlockchainAddress().get());\n    }", "signature": "void getServiceOwner()", "full_signature": "@Test public void getServiceOwner()", "class_method_signature": "AuthorizationTreeTest.getServiceOwner()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isPresent", "getServiceOwnerBlockchainAddress", "assertEquals", "get", "getServiceOwnerBlockchainAddress"]}, "focal_class": {"identifier": "AuthorizationTree", "superclass": "", "interfaces": "implements AuthorizationInfo", "fields": [{"original_string": "private static final String SERVICE_OWNER_IDENTITY = \"Service Owner\";", "modifier": "private static final", "type": "String", "declarator": "SERVICE_OWNER_IDENTITY = \"Service Owner\"", "var_name": "SERVICE_OWNER_IDENTITY"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(AuthorizationTree.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AuthorizationTree.class)", "var_name": "log"}, {"original_string": "private Tree<AuthorizationNode> tree;", "modifier": "private", "type": "Tree<AuthorizationNode>", "declarator": "tree", "var_name": "tree"}], "methods": [{"identifier": "AuthorizationTree", "parameters": "(List<AuthorizationElement> allAuthorizationElements)", "modifiers": "public", "return": "", "signature": " AuthorizationTree(List<AuthorizationElement> allAuthorizationElements)", "full_signature": "public  AuthorizationTree(List<AuthorizationElement> allAuthorizationElements)", "class_method_signature": "AuthorizationTree.AuthorizationTree(List<AuthorizationElement> allAuthorizationElements)", "testcase": false, "constructor": true}, {"identifier": "isAuthorized", "parameters": "(String blockchainAddress)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAuthorized(String blockchainAddress)", "full_signature": "@Override public boolean isAuthorized(String blockchainAddress)", "class_method_signature": "AuthorizationTree.isAuthorized(String blockchainAddress)", "testcase": false, "constructor": false}, {"identifier": "getServiceOwnerBlockchainAddress", "parameters": "()", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> getServiceOwnerBlockchainAddress()", "full_signature": "@Override public Optional<String> getServiceOwnerBlockchainAddress()", "class_method_signature": "AuthorizationTree.getServiceOwnerBlockchainAddress()", "testcase": false, "constructor": false}, {"identifier": "getRealWorldIdentity", "parameters": "(String blockchainAddress)", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> getRealWorldIdentity(String blockchainAddress)", "full_signature": "@Override public Optional<String> getRealWorldIdentity(String blockchainAddress)", "class_method_signature": "AuthorizationTree.getRealWorldIdentity(String blockchainAddress)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizationLineage", "parameters": "(String blockchainAddress)", "modifiers": "@Override public", "return": "Optional<List<AuthorizationNode>>", "signature": "Optional<List<AuthorizationNode>> getAuthorizationLineage(String blockchainAddress)", "full_signature": "@Override public Optional<List<AuthorizationNode>> getAuthorizationLineage(String blockchainAddress)", "class_method_signature": "AuthorizationTree.getAuthorizationLineage(String blockchainAddress)", "testcase": false, "constructor": false}, {"identifier": "buildTree", "parameters": "(List<AuthorizationElement> elements)", "modifiers": "private", "return": "Tree<AuthorizationNode>", "signature": "Tree<AuthorizationNode> buildTree(List<AuthorizationElement> elements)", "full_signature": "private Tree<AuthorizationNode> buildTree(List<AuthorizationElement> elements)", "class_method_signature": "AuthorizationTree.buildTree(List<AuthorizationElement> elements)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AuthorizationTree.toString()", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.accountability/src/main/java/org/eclipse/winery/accountability/model/authorization/AuthorizationTree.java"}, "focal_method": {"identifier": "getServiceOwnerBlockchainAddress", "parameters": "()", "modifiers": "@Override public", "return": "Optional<String>", "body": "@Override\n    public Optional<String> getServiceOwnerBlockchainAddress() {\n        final Optional<AuthorizationNode> root = tree.depthFirstStream().findFirst();\n        // convert Optional<AuthorizationNode> to Optional<String>\n        return root.map(AuthorizationNode::getAddress);\n    }", "signature": "Optional<String> getServiceOwnerBlockchainAddress()", "full_signature": "@Override public Optional<String> getServiceOwnerBlockchainAddress()", "class_method_signature": "AuthorizationTree.getServiceOwnerBlockchainAddress()", "testcase": false, "constructor": false, "invocations": ["findFirst", "depthFirstStream", "map"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}