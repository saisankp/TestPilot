{"test_class": {"identifier": "PackagedProgramTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-clients/src/test/java/org/apache/flink/client/program/PackagedProgramTest.java"}, "test_case": {"identifier": "testGetPreviewPlan", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetPreviewPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prog = new PackagedProgram(new File(CliFrontendTestUtils.getTestJarPath()));\n\t\t\t\n\t\t\tfinal PrintStream out = System.out;\n\t\t\tfinal PrintStream err = System.err;\n\t\t\ttry {\n\t\t\t\tSystem.setOut(new PrintStream(new NullOutputStream()));\n\t\t\t\tSystem.setErr(new PrintStream(new NullOutputStream()));\n\t\t\t\t\n\t\t\t\tAssert.assertNotNull(prog.getPreviewPlan());\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tSystem.setOut(out);\n\t\t\t\tSystem.setErr(err);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tSystem.err.println(e.getMessage());\n\t\t\te.printStackTrace();\n\t\t\tAssert.fail(\"Test is erroneous: \" + e.getMessage());\n\t\t}\n\t}", "signature": "void testGetPreviewPlan()", "full_signature": "@Test public void testGetPreviewPlan()", "class_method_signature": "PackagedProgramTest.testGetPreviewPlan()", "testcase": true, "constructor": false, "invocations": ["getTestJarPath", "setOut", "setErr", "assertNotNull", "getPreviewPlan", "setOut", "setErr", "println", "getMessage", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "PackagedProgram", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String MANIFEST_ATTRIBUTE_ASSEMBLER_CLASS = \"program-class\";", "modifier": "public static final", "type": "String", "declarator": "MANIFEST_ATTRIBUTE_ASSEMBLER_CLASS = \"program-class\"", "var_name": "MANIFEST_ATTRIBUTE_ASSEMBLER_CLASS"}, {"original_string": "public static final String MANIFEST_ATTRIBUTE_MAIN_CLASS = \"Main-Class\";", "modifier": "public static final", "type": "String", "declarator": "MANIFEST_ATTRIBUTE_MAIN_CLASS = \"Main-Class\"", "var_name": "MANIFEST_ATTRIBUTE_MAIN_CLASS"}, {"original_string": "private final URL jarFile;", "modifier": "private final", "type": "URL", "declarator": "jarFile", "var_name": "jarFile"}, {"original_string": "private final String[] args;", "modifier": "private final", "type": "String[]", "declarator": "args", "var_name": "args"}, {"original_string": "private final Program program;", "modifier": "private final", "type": "Program", "declarator": "program", "var_name": "program"}, {"original_string": "private final Class<?> mainClass;", "modifier": "private final", "type": "Class<?>", "declarator": "mainClass", "var_name": "mainClass"}, {"original_string": "private final List<File> extractedTempLibraries;", "modifier": "private final", "type": "List<File>", "declarator": "extractedTempLibraries", "var_name": "extractedTempLibraries"}, {"original_string": "private final List<URL> classpaths;", "modifier": "private final", "type": "List<URL>", "declarator": "classpaths", "var_name": "classpaths"}, {"original_string": "private ClassLoader userCodeClassLoader;", "modifier": "private", "type": "ClassLoader", "declarator": "userCodeClassLoader", "var_name": "userCodeClassLoader"}, {"original_string": "private Plan plan;", "modifier": "private", "type": "Plan", "declarator": "plan", "var_name": "plan"}, {"original_string": "private String savepointPath;", "modifier": "private", "type": "String", "declarator": "savepointPath", "var_name": "savepointPath"}], "methods": [{"identifier": "PackagedProgram", "parameters": "(File jarFile, String... args)", "modifiers": "public", "return": "", "signature": " PackagedProgram(File jarFile, String... args)", "full_signature": "public  PackagedProgram(File jarFile, String... args)", "class_method_signature": "PackagedProgram.PackagedProgram(File jarFile, String... args)", "testcase": false, "constructor": true}, {"identifier": "PackagedProgram", "parameters": "(File jarFile, List<URL> classpaths, String... args)", "modifiers": "public", "return": "", "signature": " PackagedProgram(File jarFile, List<URL> classpaths, String... args)", "full_signature": "public  PackagedProgram(File jarFile, List<URL> classpaths, String... args)", "class_method_signature": "PackagedProgram.PackagedProgram(File jarFile, List<URL> classpaths, String... args)", "testcase": false, "constructor": true}, {"identifier": "PackagedProgram", "parameters": "(File jarFile, String entryPointClassName, String... args)", "modifiers": "public", "return": "", "signature": " PackagedProgram(File jarFile, String entryPointClassName, String... args)", "full_signature": "public  PackagedProgram(File jarFile, String entryPointClassName, String... args)", "class_method_signature": "PackagedProgram.PackagedProgram(File jarFile, String entryPointClassName, String... args)", "testcase": false, "constructor": true}, {"identifier": "PackagedProgram", "parameters": "(File jarFile, List<URL> classpaths, String entryPointClassName, String... args)", "modifiers": "public", "return": "", "signature": " PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args)", "full_signature": "public  PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args)", "class_method_signature": "PackagedProgram.PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args)", "testcase": false, "constructor": true}, {"identifier": "PackagedProgram", "parameters": "(Class<?> entryPointClass, String... args)", "modifiers": "", "return": "", "signature": " PackagedProgram(Class<?> entryPointClass, String... args)", "full_signature": "  PackagedProgram(Class<?> entryPointClass, String... args)", "class_method_signature": "PackagedProgram.PackagedProgram(Class<?> entryPointClass, String... args)", "testcase": false, "constructor": true}, {"identifier": "setSavepointPath", "parameters": "(String savepointPath)", "modifiers": "public", "return": "void", "signature": "void setSavepointPath(String savepointPath)", "full_signature": "public void setSavepointPath(String savepointPath)", "class_method_signature": "PackagedProgram.setSavepointPath(String savepointPath)", "testcase": false, "constructor": false}, {"identifier": "getSavepointPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSavepointPath()", "full_signature": "public String getSavepointPath()", "class_method_signature": "PackagedProgram.getSavepointPath()", "testcase": false, "constructor": false}, {"identifier": "getArguments", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getArguments()", "full_signature": "public String[] getArguments()", "class_method_signature": "PackagedProgram.getArguments()", "testcase": false, "constructor": false}, {"identifier": "getMainClassName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMainClassName()", "full_signature": "public String getMainClassName()", "class_method_signature": "PackagedProgram.getMainClassName()", "testcase": false, "constructor": false}, {"identifier": "isUsingInteractiveMode", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUsingInteractiveMode()", "full_signature": "public boolean isUsingInteractiveMode()", "class_method_signature": "PackagedProgram.isUsingInteractiveMode()", "testcase": false, "constructor": false}, {"identifier": "isUsingProgramEntryPoint", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUsingProgramEntryPoint()", "full_signature": "public boolean isUsingProgramEntryPoint()", "class_method_signature": "PackagedProgram.isUsingProgramEntryPoint()", "testcase": false, "constructor": false}, {"identifier": "getPlanWithJars", "parameters": "()", "modifiers": "public", "return": "JobWithJars", "signature": "JobWithJars getPlanWithJars()", "full_signature": "public JobWithJars getPlanWithJars()", "class_method_signature": "PackagedProgram.getPlanWithJars()", "testcase": false, "constructor": false}, {"identifier": "getPreviewPlan", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPreviewPlan()", "full_signature": "public String getPreviewPlan()", "class_method_signature": "PackagedProgram.getPreviewPlan()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDescription()", "full_signature": "public String getDescription()", "class_method_signature": "PackagedProgram.getDescription()", "testcase": false, "constructor": false}, {"identifier": "invokeInteractiveModeForExecution", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void invokeInteractiveModeForExecution()", "full_signature": "public void invokeInteractiveModeForExecution()", "class_method_signature": "PackagedProgram.invokeInteractiveModeForExecution()", "testcase": false, "constructor": false}, {"identifier": "getClasspaths", "parameters": "()", "modifiers": "public", "return": "List<URL>", "signature": "List<URL> getClasspaths()", "full_signature": "public List<URL> getClasspaths()", "class_method_signature": "PackagedProgram.getClasspaths()", "testcase": false, "constructor": false}, {"identifier": "getUserCodeClassLoader", "parameters": "()", "modifiers": "public", "return": "ClassLoader", "signature": "ClassLoader getUserCodeClassLoader()", "full_signature": "public ClassLoader getUserCodeClassLoader()", "class_method_signature": "PackagedProgram.getUserCodeClassLoader()", "testcase": false, "constructor": false}, {"identifier": "getAllLibraries", "parameters": "()", "modifiers": "public", "return": "List<URL>", "signature": "List<URL> getAllLibraries()", "full_signature": "public List<URL> getAllLibraries()", "class_method_signature": "PackagedProgram.getAllLibraries()", "testcase": false, "constructor": false}, {"identifier": "deleteExtractedLibraries", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deleteExtractedLibraries()", "full_signature": "public void deleteExtractedLibraries()", "class_method_signature": "PackagedProgram.deleteExtractedLibraries()", "testcase": false, "constructor": false}, {"identifier": "getPlan", "parameters": "()", "modifiers": "private", "return": "Plan", "signature": "Plan getPlan()", "full_signature": "private Plan getPlan()", "class_method_signature": "PackagedProgram.getPlan()", "testcase": false, "constructor": false}, {"identifier": "hasMainMethod", "parameters": "(Class<?> entryClass)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasMainMethod(Class<?> entryClass)", "full_signature": "private static boolean hasMainMethod(Class<?> entryClass)", "class_method_signature": "PackagedProgram.hasMainMethod(Class<?> entryClass)", "testcase": false, "constructor": false}, {"identifier": "callMainMethod", "parameters": "(Class<?> entryClass, String[] args)", "modifiers": "private static", "return": "void", "signature": "void callMainMethod(Class<?> entryClass, String[] args)", "full_signature": "private static void callMainMethod(Class<?> entryClass, String[] args)", "class_method_signature": "PackagedProgram.callMainMethod(Class<?> entryClass, String[] args)", "testcase": false, "constructor": false}, {"identifier": "getEntryPointClassNameFromJar", "parameters": "(URL jarFile)", "modifiers": "private static", "return": "String", "signature": "String getEntryPointClassNameFromJar(URL jarFile)", "full_signature": "private static String getEntryPointClassNameFromJar(URL jarFile)", "class_method_signature": "PackagedProgram.getEntryPointClassNameFromJar(URL jarFile)", "testcase": false, "constructor": false}, {"identifier": "loadMainClass", "parameters": "(String className, ClassLoader cl)", "modifiers": "private static", "return": "Class<?>", "signature": "Class<?> loadMainClass(String className, ClassLoader cl)", "full_signature": "private static Class<?> loadMainClass(String className, ClassLoader cl)", "class_method_signature": "PackagedProgram.loadMainClass(String className, ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "createPlanFromProgram", "parameters": "(Program program, String[] options)", "modifiers": "private static", "return": "Plan", "signature": "Plan createPlanFromProgram(Program program, String[] options)", "full_signature": "private static Plan createPlanFromProgram(Program program, String[] options)", "class_method_signature": "PackagedProgram.createPlanFromProgram(Program program, String[] options)", "testcase": false, "constructor": false}, {"identifier": "extractContainedLibaries", "parameters": "(URL jarFile)", "modifiers": "private static", "return": "List<File>", "signature": "List<File> extractContainedLibaries(URL jarFile)", "full_signature": "private static List<File> extractContainedLibaries(URL jarFile)", "class_method_signature": "PackagedProgram.extractContainedLibaries(URL jarFile)", "testcase": false, "constructor": false}, {"identifier": "deleteExtractedLibraries", "parameters": "(List<File> tempLibraries)", "modifiers": "private static", "return": "void", "signature": "void deleteExtractedLibraries(List<File> tempLibraries)", "full_signature": "private static void deleteExtractedLibraries(List<File> tempLibraries)", "class_method_signature": "PackagedProgram.deleteExtractedLibraries(List<File> tempLibraries)", "testcase": false, "constructor": false}, {"identifier": "checkJarFile", "parameters": "(URL jarfile)", "modifiers": "private static", "return": "void", "signature": "void checkJarFile(URL jarfile)", "full_signature": "private static void checkJarFile(URL jarfile)", "class_method_signature": "PackagedProgram.checkJarFile(URL jarfile)", "testcase": false, "constructor": false}], "file": "flink-clients/src/main/java/org/apache/flink/client/program/PackagedProgram.java"}, "focal_method": {"identifier": "getPreviewPlan", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getPreviewPlan() throws ProgramInvocationException {\n\t\tThread.currentThread().setContextClassLoader(this.getUserCodeClassLoader());\n\t\tList<DataSinkNode> previewPlan;\n\t\t\n\t\tif (isUsingProgramEntryPoint()) {\n\t\t\tpreviewPlan = Optimizer.createPreOptimizedPlan(getPlan());\n\t\t}\n\t\telse if (isUsingInteractiveMode()) {\n\t\t\t// temporary hack to support the web client\n\t\t\tPreviewPlanEnvironment env = new PreviewPlanEnvironment();\n\t\t\tenv.setAsContext();\n\t\t\ttry {\n\t\t\t\tinvokeInteractiveModeForExecution();\n\t\t\t}\n\t\t\tcatch (ProgramInvocationException e) {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\tcatch (Throwable t) {\n\t\t\t\t// the invocation gets aborted with the preview plan\n\t\t\t\tif (env.previewPlan != null) {\n\t\t\t\t\tpreviewPlan = env.previewPlan;\n\t\t\t\t} else if (env.preview != null) {\n\t\t\t\t\treturn env.preview;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new ProgramInvocationException(\"The program caused an error: \", t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tenv.unsetAsContext();\n\t\t\t}\n\t\t\t\n\t\t\tif (env.previewPlan != null) {\n\t\t\t\tpreviewPlan =  env.previewPlan;\n\t\t\t} else {\n\t\t\t\tthrow new ProgramInvocationException(\n\t\t\t\t\t\t\"The program plan could not be fetched. The program silently swallowed the control flow exceptions.\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow new RuntimeException();\n\t\t}\n\n\t\tPlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator();\n\t\tStringWriter string = new StringWriter(1024);\n\t\ttry (PrintWriter pw = new PrintWriter(string)) {\n\t\t\tjsonGen.dumpPactPlanAsJSON(previewPlan, pw);\n\t\t}\n\t\treturn string.toString();\n\n\t}", "signature": "String getPreviewPlan()", "full_signature": "public String getPreviewPlan()", "class_method_signature": "PackagedProgram.getPreviewPlan()", "testcase": false, "constructor": false, "invocations": ["setContextClassLoader", "currentThread", "getUserCodeClassLoader", "isUsingProgramEntryPoint", "createPreOptimizedPlan", "getPlan", "isUsingInteractiveMode", "setAsContext", "invokeInteractiveModeForExecution", "unsetAsContext", "dumpPactPlanAsJSON", "toString"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}