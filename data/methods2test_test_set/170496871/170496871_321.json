{"test_class": {"identifier": "SimpleStepFunctionCompressorTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/tree/impurity/util/SimpleStepFunctionCompressorTest.java"}, "test_case": {"identifier": "testCompressIncreasingFunction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompressIncreasingFunction() {\n        StepFunction<TestImpurityMeasure> function = new StepFunction<>(\n            new double[]{1, 2, 3, 4, 5},\n            TestImpurityMeasure.asTestImpurityMeasures(1, 2, 3, 4, 5)\n        );\n\n        SimpleStepFunctionCompressor<TestImpurityMeasure> compressor = new SimpleStepFunctionCompressor<>(1, 0.4, 0);\n\n        StepFunction<TestImpurityMeasure> resFunction = compressor.compress(function);\n\n        assertArrayEquals(new double[]{1, 3, 5}, resFunction.getX(), 1e-10);\n        assertArrayEquals(TestImpurityMeasure.asTestImpurityMeasures(1, 3, 5), resFunction.getY());\n    }", "signature": "void testCompressIncreasingFunction()", "full_signature": "@Test public void testCompressIncreasingFunction()", "class_method_signature": "SimpleStepFunctionCompressorTest.testCompressIncreasingFunction()", "testcase": true, "constructor": false, "invocations": ["asTestImpurityMeasures", "compress", "assertArrayEquals", "getX", "assertArrayEquals", "asTestImpurityMeasures", "getY"]}, "focal_class": {"identifier": "SimpleStepFunctionCompressor", "superclass": "", "interfaces": "implements StepFunctionCompressor<T>", "fields": [{"original_string": "private static final long serialVersionUID = -3231787633598409157L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -3231787633598409157L", "var_name": "serialVersionUID"}, {"original_string": "private final int minSizeToBeCompressed;", "modifier": "private final", "type": "int", "declarator": "minSizeToBeCompressed", "var_name": "minSizeToBeCompressed"}, {"original_string": "private final double minImpurityIncreaseForRecord;", "modifier": "private final", "type": "double", "declarator": "minImpurityIncreaseForRecord", "var_name": "minImpurityIncreaseForRecord"}, {"original_string": "private final double minImpurityDecreaseForRecord;", "modifier": "private final", "type": "double", "declarator": "minImpurityDecreaseForRecord", "var_name": "minImpurityDecreaseForRecord"}], "methods": [{"identifier": "SimpleStepFunctionCompressor", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimpleStepFunctionCompressor()", "full_signature": "public  SimpleStepFunctionCompressor()", "class_method_signature": "SimpleStepFunctionCompressor.SimpleStepFunctionCompressor()", "testcase": false, "constructor": true}, {"identifier": "SimpleStepFunctionCompressor", "parameters": "(int minSizeToBeCompressed, double minImpurityIncreaseForRecord,\n        double minImpurityDecreaseForRecord)", "modifiers": "public", "return": "", "signature": " SimpleStepFunctionCompressor(int minSizeToBeCompressed, double minImpurityIncreaseForRecord,\n        double minImpurityDecreaseForRecord)", "full_signature": "public  SimpleStepFunctionCompressor(int minSizeToBeCompressed, double minImpurityIncreaseForRecord,\n        double minImpurityDecreaseForRecord)", "class_method_signature": "SimpleStepFunctionCompressor.SimpleStepFunctionCompressor(int minSizeToBeCompressed, double minImpurityIncreaseForRecord,\n        double minImpurityDecreaseForRecord)", "testcase": false, "constructor": true}, {"identifier": "compress", "parameters": "(StepFunction<T> function)", "modifiers": "@Override public", "return": "StepFunction<T>", "signature": "StepFunction<T> compress(StepFunction<T> function)", "full_signature": "@Override public StepFunction<T> compress(StepFunction<T> function)", "class_method_signature": "SimpleStepFunctionCompressor.compress(StepFunction<T> function)", "testcase": false, "constructor": false}, {"identifier": "compress", "parameters": "(List<StepFunctionPoint> points)", "modifiers": "private", "return": "List<StepFunctionPoint>", "signature": "List<StepFunctionPoint> compress(List<StepFunctionPoint> points)", "full_signature": "private List<StepFunctionPoint> compress(List<StepFunctionPoint> points)", "class_method_signature": "SimpleStepFunctionCompressor.compress(List<StepFunctionPoint> points)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/tree/impurity/util/SimpleStepFunctionCompressor.java"}, "focal_method": {"identifier": "compress", "parameters": "(StepFunction<T> function)", "modifiers": "@Override public", "return": "StepFunction<T>", "body": "@Override public StepFunction<T> compress(StepFunction<T> function) {\n        double[] arguments = function.getX();\n        T[] values = function.getY();\n\n        if (arguments.length >= minSizeToBeCompressed) {\n            List<StepFunctionPoint> points = new ArrayList<>();\n\n            for (int i = 0; i < arguments.length; i++)\n                points.add(new StepFunctionPoint(arguments[i], values[i]));\n\n            points = compress(points);\n\n            double[] resX = new double[points.size()];\n            T[] resY = Arrays.copyOf(values, points.size());\n\n            for (int i = 0; i < points.size(); i++) {\n                StepFunctionPoint pnt = points.get(i);\n                resX[i] = pnt.x;\n                resY[i] = pnt.y;\n            }\n\n            return new StepFunction<>(resX, resY);\n        }\n\n        return function;\n    }", "signature": "StepFunction<T> compress(StepFunction<T> function)", "full_signature": "@Override public StepFunction<T> compress(StepFunction<T> function)", "class_method_signature": "SimpleStepFunctionCompressor.compress(StepFunction<T> function)", "testcase": false, "constructor": false, "invocations": ["getX", "getY", "add", "compress", "size", "copyOf", "size", "size", "get"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}