{"test_class": {"identifier": "UniformSnapshotTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Snapshot snapshot = new UniformSnapshot(new long[]{5, 1, 2, 3, 4});", "modifier": "private final", "type": "Snapshot", "declarator": "snapshot = new UniformSnapshot(new long[]{5, 1, 2, 3, 4})", "var_name": "snapshot"}], "file": "metrics-core/src/test/java/com/codahale/metrics/UniformSnapshotTest.java"}, "test_case": {"identifier": "disallowsNegativeQuantile", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void disallowsNegativeQuantile() {\n        snapshot.getValue(-0.5);\n    }", "signature": "void disallowsNegativeQuantile()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void disallowsNegativeQuantile()", "class_method_signature": "UniformSnapshotTest.disallowsNegativeQuantile()", "testcase": true, "constructor": false, "invocations": ["getValue"]}, "focal_class": {"identifier": "UniformSnapshot", "superclass": "extends Snapshot", "interfaces": "", "fields": [{"original_string": "private final long[] values;", "modifier": "private final", "type": "long[]", "declarator": "values", "var_name": "values"}], "methods": [{"identifier": "UniformSnapshot", "parameters": "(Collection<Long> values)", "modifiers": "public", "return": "", "signature": " UniformSnapshot(Collection<Long> values)", "full_signature": "public  UniformSnapshot(Collection<Long> values)", "class_method_signature": "UniformSnapshot.UniformSnapshot(Collection<Long> values)", "testcase": false, "constructor": true}, {"identifier": "UniformSnapshot", "parameters": "(long[] values)", "modifiers": "public", "return": "", "signature": " UniformSnapshot(long[] values)", "full_signature": "public  UniformSnapshot(long[] values)", "class_method_signature": "UniformSnapshot.UniformSnapshot(long[] values)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "(double quantile)", "modifiers": "@Override public", "return": "double", "signature": "double getValue(double quantile)", "full_signature": "@Override public double getValue(double quantile)", "class_method_signature": "UniformSnapshot.getValue(double quantile)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "UniformSnapshot.size()", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "@Override public", "return": "long[]", "signature": "long[] getValues()", "full_signature": "@Override public long[] getValues()", "class_method_signature": "UniformSnapshot.getValues()", "testcase": false, "constructor": false}, {"identifier": "getMax", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getMax()", "full_signature": "@Override public long getMax()", "class_method_signature": "UniformSnapshot.getMax()", "testcase": false, "constructor": false}, {"identifier": "getMin", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getMin()", "full_signature": "@Override public long getMin()", "class_method_signature": "UniformSnapshot.getMin()", "testcase": false, "constructor": false}, {"identifier": "getMean", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getMean()", "full_signature": "@Override public double getMean()", "class_method_signature": "UniformSnapshot.getMean()", "testcase": false, "constructor": false}, {"identifier": "getStdDev", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getStdDev()", "full_signature": "@Override public double getStdDev()", "class_method_signature": "UniformSnapshot.getStdDev()", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(OutputStream output)", "modifiers": "@Override public", "return": "void", "signature": "void dump(OutputStream output)", "full_signature": "@Override public void dump(OutputStream output)", "class_method_signature": "UniformSnapshot.dump(OutputStream output)", "testcase": false, "constructor": false}], "file": "metrics-core/src/main/java/com/codahale/metrics/UniformSnapshot.java"}, "focal_method": {"identifier": "getValue", "parameters": "(double quantile)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double getValue(double quantile) {\n        if (quantile < 0.0 || quantile > 1.0 || Double.isNaN(quantile)) {\n            throw new IllegalArgumentException(quantile + \" is not in [0..1]\");\n        }\n\n        if (values.length == 0) {\n            return 0.0;\n        }\n\n        final double pos = quantile * (values.length + 1);\n        final int index = (int) pos;\n\n        if (index < 1) {\n            return values[0];\n        }\n\n        if (index >= values.length) {\n            return values[values.length - 1];\n        }\n\n        final double lower = values[index - 1];\n        final double upper = values[index];\n        return lower + (pos - floor(pos)) * (upper - lower);\n    }", "signature": "double getValue(double quantile)", "full_signature": "@Override public double getValue(double quantile)", "class_method_signature": "UniformSnapshot.getValue(double quantile)", "testcase": false, "constructor": false, "invocations": ["isNaN", "floor"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}