{"test_class": {"identifier": "UBL20InvoiceHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger (UBL20InvoiceHelperTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger (UBL20InvoiceHelperTest.class)", "var_name": "LOGGER"}], "file": "ph-ubl20/src/test/java/com/helger/ubl20/helper/UBL20InvoiceHelperTest.java"}, "test_case": {"identifier": "testComvertBackAndForth", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testComvertBackAndForth ()\n  {\n    for (final String sFilename : MockUBL20TestDocuments.getUBL20TestDocuments (EUBL20DocumentType.INVOICE))\n    {\n      LOGGER.info (sFilename);\n\n      // Read\n      final Document aDoc = DOMReader.readXMLDOM (new ClassPathResource (sFilename),\n                                                  new DOMReaderSettings ().setSchema (EUBL20DocumentType.INVOICE.getSchema ()));\n      assertNotNull (sFilename, aDoc);\n      final InvoiceType aUBLObject = UBL20Reader.invoice ().read (aDoc);\n      assertNotNull (sFilename, aUBLObject);\n\n      // Convert Invoice to CreditNote\n      final CreditNoteType aCreditNote = new CreditNoteType ();\n      UBL20InvoiceHelper.cloneInvoiceToCreditNote (aUBLObject, aCreditNote);\n\n      // Validate CreditNote\n      IErrorList aErrors = UBL20Validator.creditNote ().validate (aCreditNote);\n      assertNotNull (sFilename, aErrors);\n      assertFalse (sFilename, aErrors.containsAtLeastOneError ());\n\n      // Convert CreditNote back to Invoice\n      final InvoiceType aInvoice2 = new InvoiceType ();\n      UBL20CreditNoteHelper.cloneCreditNoteToInvoice (aCreditNote, aInvoice2);\n\n      // Validate Invoice again\n      aErrors = UBL20Validator.invoice ().validate (aInvoice2);\n      assertNotNull (sFilename, aErrors);\n      assertFalse (sFilename, aErrors.containsAtLeastOneError ());\n    }\n  }", "signature": "void testComvertBackAndForth()", "full_signature": "@Test public void testComvertBackAndForth()", "class_method_signature": "UBL20InvoiceHelperTest.testComvertBackAndForth()", "testcase": true, "constructor": false, "invocations": ["getUBL20TestDocuments", "info", "readXMLDOM", "setSchema", "getSchema", "assertNotNull", "read", "invoice", "assertNotNull", "cloneInvoiceToCreditNote", "validate", "creditNote", "assertNotNull", "assertFalse", "containsAtLeastOneError", "cloneCreditNoteToInvoice", "validate", "invoice", "assertNotNull", "assertFalse", "containsAtLeastOneError"]}, "focal_class": {"identifier": "UBL20InvoiceHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "UBL20InvoiceHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " UBL20InvoiceHelper()", "full_signature": "private  UBL20InvoiceHelper()", "class_method_signature": "UBL20InvoiceHelper.UBL20InvoiceHelper()", "testcase": false, "constructor": true}, {"identifier": "cloneToCreditedQuantity", "parameters": "(@Nonnull final InvoicedQuantityType aSrc)", "modifiers": "@Nonnull public static", "return": "CreditedQuantityType", "signature": "CreditedQuantityType cloneToCreditedQuantity(@Nonnull final InvoicedQuantityType aSrc)", "full_signature": "@Nonnull public static CreditedQuantityType cloneToCreditedQuantity(@Nonnull final InvoicedQuantityType aSrc)", "class_method_signature": "UBL20InvoiceHelper.cloneToCreditedQuantity(@Nonnull final InvoicedQuantityType aSrc)", "testcase": false, "constructor": false}, {"identifier": "cloneToCreditNoteLine", "parameters": "(@Nonnull final InvoiceLineType aSrc, @Nonnull final CreditNoteLineType aDst)", "modifiers": "public static", "return": "void", "signature": "void cloneToCreditNoteLine(@Nonnull final InvoiceLineType aSrc, @Nonnull final CreditNoteLineType aDst)", "full_signature": "public static void cloneToCreditNoteLine(@Nonnull final InvoiceLineType aSrc, @Nonnull final CreditNoteLineType aDst)", "class_method_signature": "UBL20InvoiceHelper.cloneToCreditNoteLine(@Nonnull final InvoiceLineType aSrc, @Nonnull final CreditNoteLineType aDst)", "testcase": false, "constructor": false}, {"identifier": "cloneInvoiceToCreditNote", "parameters": "(@Nonnull final InvoiceType aSrc, @Nonnull final CreditNoteType aDst)", "modifiers": "public static", "return": "void", "signature": "void cloneInvoiceToCreditNote(@Nonnull final InvoiceType aSrc, @Nonnull final CreditNoteType aDst)", "full_signature": "public static void cloneInvoiceToCreditNote(@Nonnull final InvoiceType aSrc, @Nonnull final CreditNoteType aDst)", "class_method_signature": "UBL20InvoiceHelper.cloneInvoiceToCreditNote(@Nonnull final InvoiceType aSrc, @Nonnull final CreditNoteType aDst)", "testcase": false, "constructor": false}], "file": "ph-ubl20/src/main/java/com/helger/ubl20/helper/UBL20InvoiceHelper.java"}, "focal_method": {"identifier": "cloneInvoiceToCreditNote", "parameters": "(@Nonnull final InvoiceType aSrc, @Nonnull final CreditNoteType aDst)", "modifiers": "public static", "return": "void", "body": "public static void cloneInvoiceToCreditNote (@Nonnull final InvoiceType aSrc, @Nonnull final CreditNoteType aDst)\n  {\n    aDst.setAccountingCost (aSrc.getAccountingCost () == null ? null : aSrc.getAccountingCost ().clone ());\n    aDst.setAccountingCostCode (aSrc.getAccountingCostCode () == null ? null : aSrc.getAccountingCostCode ().clone ());\n    aDst.setAccountingCustomerParty (aSrc.getAccountingCustomerParty () == null ? null : aSrc.getAccountingCustomerParty ().clone ());\n    aDst.setAccountingSupplierParty (aSrc.getAccountingSupplierParty () == null ? null : aSrc.getAccountingSupplierParty ().clone ());\n    {\n      final List <DocumentReferenceType> retAdditionalDocumentReference = new ArrayList <> ();\n      for (final DocumentReferenceType aItem : aSrc.getAdditionalDocumentReference ())\n        retAdditionalDocumentReference.add (aItem == null ? null : aItem.clone ());\n      aDst.setAdditionalDocumentReference (retAdditionalDocumentReference);\n    }\n    {\n      final List <AllowanceChargeType> retAllowanceCharge = new ArrayList <> ();\n      for (final AllowanceChargeType aItem : aSrc.getAllowanceCharge ())\n        retAllowanceCharge.add (aItem == null ? null : aItem.clone ());\n      aDst.setAllowanceCharge (retAllowanceCharge);\n    }\n    {\n      final List <BillingReferenceType> retBillingReference = new ArrayList <> ();\n      for (final BillingReferenceType aItem : aSrc.getBillingReference ())\n        retBillingReference.add (aItem == null ? null : aItem.clone ());\n      aDst.setBillingReference (retBillingReference);\n    }\n    // Not present\n    /*\n     * ret.setBuyerCustomerParty (src.getBuyerCustomerParty () == null ? null :\n     * src.getBuyerCustomerParty ().clone ());\n     */\n    {\n      final List <DocumentReferenceType> retContractDocumentReference = new ArrayList <> ();\n      for (final DocumentReferenceType aItem : aSrc.getContractDocumentReference ())\n        retContractDocumentReference.add (aItem == null ? null : aItem.clone ());\n      aDst.setContractDocumentReference (retContractDocumentReference);\n    }\n    aDst.setCopyIndicator (aSrc.getCopyIndicator () == null ? null : aSrc.getCopyIndicator ().clone ());\n    aDst.setCustomizationID (aSrc.getCustomizationID () == null ? null : aSrc.getCustomizationID ().clone ());\n    // Not present\n    /*\n     * { final List <DeliveryType> retDelivery = new ArrayList <> (); for (final\n     * DeliveryType aItem : src.getDelivery ()) retDelivery.add (aItem == null ?\n     * null : aItem.clone ()); ret.setDelivery (retDelivery); }\n     */\n    // Not present\n    /*\n     * ret.setDeliveryTerms (src.getDeliveryTerms () == null ? null :\n     * src.getDeliveryTerms ().clone ());\u00b4\n     */\n    {\n      final List <DocumentReferenceType> retDespatchDocumentReference = new ArrayList <> ();\n      for (final DocumentReferenceType aItem : aSrc.getDespatchDocumentReference ())\n        retDespatchDocumentReference.add (aItem == null ? null : aItem.clone ());\n      aDst.setDespatchDocumentReference (retDespatchDocumentReference);\n    }\n    // DiscrepancyResponse is not present in Invoice\n    aDst.setDocumentCurrencyCode (aSrc.getDocumentCurrencyCode () == null ? null : aSrc.getDocumentCurrencyCode ().clone ());\n    aDst.setID (aSrc.getID () == null ? null : aSrc.getID ().clone ());\n    // Name change\n    {\n      final List <CreditNoteLineType> retInvoiceLine = new ArrayList <> ();\n      for (final InvoiceLineType aItem : aSrc.getInvoiceLine ())\n        if (aItem == null)\n          retInvoiceLine.add (null);\n        else\n        {\n          final CreditNoteLineType aNewLine = new CreditNoteLineType ();\n          cloneToCreditNoteLine (aItem, aNewLine);\n          retInvoiceLine.add (aNewLine);\n        }\n      aDst.setCreditNoteLine (retInvoiceLine);\n    }\n    {\n      final List <PeriodType> retInvoicePeriod = new ArrayList <> ();\n      for (final PeriodType aItem : aSrc.getInvoicePeriod ())\n      {\n        retInvoicePeriod.add (aItem == null ? null : aItem.clone ());\n      }\n      aDst.setInvoicePeriod (retInvoicePeriod);\n    }\n    // Not present\n    /*\n     * ret.setInvoiceTypeCode (src.getInvoiceTypeCode () == null ? null :\n     * src.getInvoiceTypeCode ().clone ());\n     */\n    aDst.setIssueDate (aSrc.getIssueDate () == null ? null : aSrc.getIssueDate ().clone ());\n    aDst.setIssueTime (aSrc.getIssueTime () == null ? null : aSrc.getIssueTime ().clone ());\n    aDst.setLegalMonetaryTotal (aSrc.getLegalMonetaryTotal () == null ? null : aSrc.getLegalMonetaryTotal ().clone ());\n    aDst.setLineCountNumeric (aSrc.getLineCountNumeric () == null ? null : aSrc.getLineCountNumeric ().clone ());\n    {\n      final List <NoteType> retNote = new ArrayList <> ();\n      for (final NoteType aItem : aSrc.getNote ())\n        retNote.add (aItem == null ? null : aItem.clone ());\n      aDst.setNote (retNote);\n    }\n    aDst.setOrderReference (aSrc.getOrderReference () == null ? null : aSrc.getOrderReference ().clone ());\n    // Not present\n    /*\n     * { final List <DocumentReferenceType> retOriginatorDocumentReference = new\n     * ArrayList <> (); for (final DocumentReferenceType aItem :\n     * src.getOriginatorDocumentReference ()) retOriginatorDocumentReference.add\n     * (aItem == null ? null : aItem.clone ());\n     * ret.setOriginatorDocumentReference (retOriginatorDocumentReference); }\n     */\n    aDst.setPayeeParty (aSrc.getPayeeParty () == null ? null : aSrc.getPayeeParty ().clone ());\n    aDst.setPaymentAlternativeCurrencyCode (aSrc.getPaymentAlternativeCurrencyCode () == null ? null\n                                                                                              : aSrc.getPaymentAlternativeCurrencyCode ()\n                                                                                                    .clone ());\n    aDst.setPaymentAlternativeExchangeRate (aSrc.getPaymentAlternativeExchangeRate () == null ? null\n                                                                                              : aSrc.getPaymentAlternativeExchangeRate ()\n                                                                                                    .clone ());\n    aDst.setPaymentCurrencyCode (aSrc.getPaymentCurrencyCode () == null ? null : aSrc.getPaymentCurrencyCode ().clone ());\n    aDst.setPaymentExchangeRate (aSrc.getPaymentExchangeRate () == null ? null : aSrc.getPaymentExchangeRate ().clone ());\n    // Not present\n    /*\n     * { final List <PaymentMeansType> retPaymentMeans = new ArrayList <> ();\n     * for (final PaymentMeansType aItem : src.getPaymentMeans ())\n     * retPaymentMeans.add (aItem == null ? null : aItem.clone ());\n     * ret.setPaymentMeans (retPaymentMeans); }\n     */\n    // Not present\n    /*\n     * { final List <PaymentTermsType> retPaymentTerms = new ArrayList <> ();\n     * for (final PaymentTermsType aItem : src.getPaymentTerms ())\n     * retPaymentTerms.add (aItem == null ? null : aItem.clone ());\n     * ret.setPaymentTerms (retPaymentTerms); }\n     */\n    // Not present\n    /*\n     * { final List <PaymentType> retPrepaidPayment = new ArrayList <> (); for\n     * (final PaymentType aItem : src.getPrepaidPayment ())\n     * retPrepaidPayment.add (aItem == null ? null : aItem.clone ());\n     * ret.setPrepaidPayment (retPrepaidPayment); }\n     */\n    aDst.setPricingCurrencyCode (aSrc.getPricingCurrencyCode () == null ? null : aSrc.getPricingCurrencyCode ().clone ());\n    aDst.setPricingExchangeRate (aSrc.getPricingExchangeRate () == null ? null : aSrc.getPricingExchangeRate ().clone ());\n    aDst.setProfileID (aSrc.getProfileID () == null ? null : aSrc.getProfileID ().clone ());\n    {\n      final List <DocumentReferenceType> retReceiptDocumentReference = new ArrayList <> ();\n      for (final DocumentReferenceType aItem : aSrc.getReceiptDocumentReference ())\n        retReceiptDocumentReference.add (aItem == null ? null : aItem.clone ());\n      aDst.setReceiptDocumentReference (retReceiptDocumentReference);\n    }\n    // Not present\n    /*\n     * ret.setSellerSupplierParty (src.getSellerSupplierParty () == null ? null\n     * : src.getSellerSupplierParty ().clone ());\n     */\n    {\n      final List <SignatureType> retSignature = new ArrayList <> ();\n      for (final SignatureType aItem : aSrc.getSignature ())\n        retSignature.add (aItem == null ? null : aItem.clone ());\n      aDst.setSignature (retSignature);\n    }\n    aDst.setTaxCurrencyCode (aSrc.getTaxCurrencyCode () == null ? null : aSrc.getTaxCurrencyCode ().clone ());\n    aDst.setTaxExchangeRate (aSrc.getTaxExchangeRate () == null ? null : aSrc.getTaxExchangeRate ().clone ());\n    aDst.setTaxPointDate (aSrc.getTaxPointDate () == null ? null : aSrc.getTaxPointDate ().clone ());\n    aDst.setTaxRepresentativeParty (aSrc.getTaxRepresentativeParty () == null ? null : aSrc.getTaxRepresentativeParty ().clone ());\n    {\n      final List <TaxTotalType> retTaxTotal = new ArrayList <> ();\n      for (final TaxTotalType aItem : aSrc.getTaxTotal ())\n        retTaxTotal.add (aItem == null ? null : aItem.clone ());\n      aDst.setTaxTotal (retTaxTotal);\n    }\n    aDst.setUBLExtensions (aSrc.getUBLExtensions () == null ? null : aSrc.getUBLExtensions ().clone ());\n    aDst.setUBLVersionID (aSrc.getUBLVersionID () == null ? null : aSrc.getUBLVersionID ().clone ());\n    aDst.setUUID (aSrc.getUUID () == null ? null : aSrc.getUUID ().clone ());\n  }", "signature": "void cloneInvoiceToCreditNote(@Nonnull final InvoiceType aSrc, @Nonnull final CreditNoteType aDst)", "full_signature": "public static void cloneInvoiceToCreditNote(@Nonnull final InvoiceType aSrc, @Nonnull final CreditNoteType aDst)", "class_method_signature": "UBL20InvoiceHelper.cloneInvoiceToCreditNote(@Nonnull final InvoiceType aSrc, @Nonnull final CreditNoteType aDst)", "testcase": false, "constructor": false, "invocations": ["setAccountingCost", "getAccountingCost", "clone", "getAccountingCost", "setAccountingCostCode", "getAccountingCostCode", "clone", "getAccountingCostCode", "setAccountingCustomerParty", "getAccountingCustomerParty", "clone", "getAccountingCustomerParty", "setAccountingSupplierParty", "getAccountingSupplierParty", "clone", "getAccountingSupplierParty", "getAdditionalDocumentReference", "add", "clone", "setAdditionalDocumentReference", "getAllowanceCharge", "add", "clone", "setAllowanceCharge", "getBillingReference", "add", "clone", "setBillingReference", "getContractDocumentReference", "add", "clone", "setContractDocumentReference", "setCopyIndicator", "getCopyIndicator", "clone", "getCopyIndicator", "setCustomizationID", "getCustomizationID", "clone", "getCustomizationID", "getDespatchDocumentReference", "add", "clone", "setDespatchDocumentReference", "setDocumentCurrencyCode", "getDocumentCurrencyCode", "clone", "getDocumentCurrencyCode", "setID", "getID", "clone", "getID", "getInvoiceLine", "add", "cloneToCreditNoteLine", "add", "setCreditNoteLine", "getInvoicePeriod", "add", "clone", "setInvoicePeriod", "setIssueDate", "getIssueDate", "clone", "getIssueDate", "setIssueTime", "getIssueTime", "clone", "getIssueTime", "setLegalMonetaryTotal", "getLegalMonetaryTotal", "clone", "getLegalMonetaryTotal", "setLineCountNumeric", "getLineCountNumeric", "clone", "getLineCountNumeric", "getNote", "add", "clone", "setNote", "setOrderReference", "getOrderReference", "clone", "getOrderReference", "setPayeeParty", "getPayeeParty", "clone", "getPayeeParty", "setPaymentAlternativeCurrencyCode", "getPaymentAlternativeCurrencyCode", "clone", "getPaymentAlternativeCurrencyCode", "setPaymentAlternativeExchangeRate", "getPaymentAlternativeExchangeRate", "clone", "getPaymentAlternativeExchangeRate", "setPaymentCurrencyCode", "getPaymentCurrencyCode", "clone", "getPaymentCurrencyCode", "setPaymentExchangeRate", "getPaymentExchangeRate", "clone", "getPaymentExchangeRate", "setPricingCurrencyCode", "getPricingCurrencyCode", "clone", "getPricingCurrencyCode", "setPricingExchangeRate", "getPricingExchangeRate", "clone", "getPricingExchangeRate", "setProfileID", "getProfileID", "clone", "getProfileID", "getReceiptDocumentReference", "add", "clone", "setReceiptDocumentReference", "getSignature", "add", "clone", "setSignature", "setTaxCurrencyCode", "getTaxCurrencyCode", "clone", "getTaxCurrencyCode", "setTaxExchangeRate", "getTaxExchangeRate", "clone", "getTaxExchangeRate", "setTaxPointDate", "getTaxPointDate", "clone", "getTaxPointDate", "setTaxRepresentativeParty", "getTaxRepresentativeParty", "clone", "getTaxRepresentativeParty", "getTaxTotal", "add", "clone", "setTaxTotal", "setUBLExtensions", "getUBLExtensions", "clone", "getUBLExtensions", "setUBLVersionID", "getUBLVersionID", "clone", "getUBLVersionID", "setUUID", "getUUID", "clone", "getUUID"]}, "repository": {"repo_id": 23310687, "url": "https://github.com/phax/ph-ubl", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 53, "size": 410878, "license": "licensed"}}