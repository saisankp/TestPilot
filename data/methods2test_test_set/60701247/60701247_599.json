{"test_class": {"identifier": "TextPropertyTest", "superclass": "", "interfaces": "", "fields": [], "file": "observable-ui/testSrc/com/android/tools/idea/observable/ui/TextPropertyTest.java"}, "test_case": {"identifier": "textPropertyCanWrapLabel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void textPropertyCanWrapLabel() {\n    JLabel label = new JLabel(\"New Label\");\n    TextProperty textProperty = new TextProperty(label);\n    CountListener listener = new CountListener();\n    textProperty.addListener(listener);\n\n    assertThat(textProperty.get()).isEqualTo(\"New Label\");\n    assertThat(listener.getCount()).isEqualTo(0);\n\n    label.setText(\"Label text updated directly\");\n    assertThat(textProperty.get()).isEqualTo(\"Label text updated directly\");\n    assertThat(listener.getCount()).isEqualTo(1);\n\n    textProperty.set(\"Label text updated via property\");\n    assertThat(label.getText()).isEqualTo(\"Label text updated via property\");\n    assertThat(listener.getCount()).isEqualTo(2);\n  }", "signature": "void textPropertyCanWrapLabel()", "full_signature": "@Test public void textPropertyCanWrapLabel()", "class_method_signature": "TextPropertyTest.textPropertyCanWrapLabel()", "testcase": true, "constructor": false, "invocations": ["addListener", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "getCount", "setText", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "getCount", "set", "isEqualTo", "assertThat", "getText", "isEqualTo", "assertThat", "getCount"]}, "focal_class": {"identifier": "TextProperty", "superclass": "extends StringProperty", "interfaces": "implements DocumentListener, PropertyChangeListener,\n                                                                  com.intellij.openapi.editor.event.DocumentListener", "fields": [{"original_string": "@NotNull private final JComponent myComponent;", "modifier": "@NotNull private final", "type": "JComponent", "declarator": "myComponent", "var_name": "myComponent"}], "methods": [{"identifier": "TextProperty", "parameters": "(@NotNull JTextComponent textComponent)", "modifiers": "public", "return": "", "signature": " TextProperty(@NotNull JTextComponent textComponent)", "full_signature": "public  TextProperty(@NotNull JTextComponent textComponent)", "class_method_signature": "TextProperty.TextProperty(@NotNull JTextComponent textComponent)", "testcase": false, "constructor": true}, {"identifier": "TextProperty", "parameters": "(@NotNull AbstractButton button)", "modifiers": "public", "return": "", "signature": " TextProperty(@NotNull AbstractButton button)", "full_signature": "public  TextProperty(@NotNull AbstractButton button)", "class_method_signature": "TextProperty.TextProperty(@NotNull AbstractButton button)", "testcase": false, "constructor": true}, {"identifier": "TextProperty", "parameters": "(@NotNull JLabel label)", "modifiers": "public", "return": "", "signature": " TextProperty(@NotNull JLabel label)", "full_signature": "public  TextProperty(@NotNull JLabel label)", "class_method_signature": "TextProperty.TextProperty(@NotNull JLabel label)", "testcase": false, "constructor": true}, {"identifier": "TextProperty", "parameters": "(@NotNull LabelWithEditButton editLabel)", "modifiers": "public", "return": "", "signature": " TextProperty(@NotNull LabelWithEditButton editLabel)", "full_signature": "public  TextProperty(@NotNull LabelWithEditButton editLabel)", "class_method_signature": "TextProperty.TextProperty(@NotNull LabelWithEditButton editLabel)", "testcase": false, "constructor": true}, {"identifier": "TextProperty", "parameters": "(@NotNull EditorComboBox editorComboBox)", "modifiers": "public", "return": "", "signature": " TextProperty(@NotNull EditorComboBox editorComboBox)", "full_signature": "public  TextProperty(@NotNull EditorComboBox editorComboBox)", "class_method_signature": "TextProperty.TextProperty(@NotNull EditorComboBox editorComboBox)", "testcase": false, "constructor": true}, {"identifier": "TextProperty", "parameters": "(@NotNull EditorTextField editorTextField)", "modifiers": "public", "return": "", "signature": " TextProperty(@NotNull EditorTextField editorTextField)", "full_signature": "public  TextProperty(@NotNull EditorTextField editorTextField)", "class_method_signature": "TextProperty.TextProperty(@NotNull EditorTextField editorTextField)", "testcase": false, "constructor": true}, {"identifier": "insertUpdate", "parameters": "(DocumentEvent documentEvent)", "modifiers": "@Override public", "return": "void", "signature": "void insertUpdate(DocumentEvent documentEvent)", "full_signature": "@Override public void insertUpdate(DocumentEvent documentEvent)", "class_method_signature": "TextProperty.insertUpdate(DocumentEvent documentEvent)", "testcase": false, "constructor": false}, {"identifier": "removeUpdate", "parameters": "(DocumentEvent documentEvent)", "modifiers": "@Override public", "return": "void", "signature": "void removeUpdate(DocumentEvent documentEvent)", "full_signature": "@Override public void removeUpdate(DocumentEvent documentEvent)", "class_method_signature": "TextProperty.removeUpdate(DocumentEvent documentEvent)", "testcase": false, "constructor": false}, {"identifier": "changedUpdate", "parameters": "(DocumentEvent documentEvent)", "modifiers": "@Override public", "return": "void", "signature": "void changedUpdate(DocumentEvent documentEvent)", "full_signature": "@Override public void changedUpdate(DocumentEvent documentEvent)", "class_method_signature": "TextProperty.changedUpdate(DocumentEvent documentEvent)", "testcase": false, "constructor": false}, {"identifier": "propertyChange", "parameters": "(PropertyChangeEvent propertyChangeEvent)", "modifiers": "@Override public", "return": "void", "signature": "void propertyChange(PropertyChangeEvent propertyChangeEvent)", "full_signature": "@Override public void propertyChange(PropertyChangeEvent propertyChangeEvent)", "class_method_signature": "TextProperty.propertyChange(PropertyChangeEvent propertyChangeEvent)", "testcase": false, "constructor": false}, {"identifier": "beforeDocumentChange", "parameters": "(@NotNull com.intellij.openapi.editor.event.DocumentEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void beforeDocumentChange(@NotNull com.intellij.openapi.editor.event.DocumentEvent event)", "full_signature": "@Override public void beforeDocumentChange(@NotNull com.intellij.openapi.editor.event.DocumentEvent event)", "class_method_signature": "TextProperty.beforeDocumentChange(@NotNull com.intellij.openapi.editor.event.DocumentEvent event)", "testcase": false, "constructor": false}, {"identifier": "documentChanged", "parameters": "(@NotNull com.intellij.openapi.editor.event.DocumentEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void documentChanged(@NotNull com.intellij.openapi.editor.event.DocumentEvent event)", "full_signature": "@Override public void documentChanged(@NotNull com.intellij.openapi.editor.event.DocumentEvent event)", "class_method_signature": "TextProperty.documentChanged(@NotNull com.intellij.openapi.editor.event.DocumentEvent event)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String get()", "full_signature": "@NotNull @Override public String get()", "class_method_signature": "TextProperty.get()", "testcase": false, "constructor": false}, {"identifier": "setDirectly", "parameters": "(@NotNull String value)", "modifiers": "@Override protected", "return": "void", "signature": "void setDirectly(@NotNull String value)", "full_signature": "@Override protected void setDirectly(@NotNull String value)", "class_method_signature": "TextProperty.setDirectly(@NotNull String value)", "testcase": false, "constructor": false}], "file": "observable-ui/src/com/android/tools/idea/observable/ui/TextProperty.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "body": "@NotNull\n  @Override\n  public String get() {\n    if (myComponent instanceof JTextComponent) {\n      return ((JTextComponent)myComponent).getText();\n    }\n    else if (myComponent instanceof AbstractButton) {\n      return ((AbstractButton)myComponent).getText();\n    }\n    else if (myComponent instanceof JLabel) {\n      return ((JLabel)myComponent).getText();\n    }\n    else if (myComponent instanceof LabelWithEditButton) {\n      return ((LabelWithEditButton)myComponent).getText();\n    }\n    else if (myComponent instanceof EditorComboBox) {\n      return ((EditorComboBox)myComponent).getText();\n    }\n    else if (myComponent instanceof EditorTextField) {\n      return ((EditorTextField)myComponent).getText();\n    }\n    else {\n      throw new IllegalStateException(\"Unexpected text component type: \" + myComponent.getClass().getSimpleName());\n    }\n  }", "signature": "String get()", "full_signature": "@NotNull @Override public String get()", "class_method_signature": "TextProperty.get()", "testcase": false, "constructor": false, "invocations": ["getText", "getText", "getText", "getText", "getText", "getText", "getSimpleName", "getClass"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}