{"test_class": {"identifier": "FlowInfoTest", "superclass": "", "interfaces": "", "fields": [], "file": "commons/flow/src/test/java/org/openehealth/ipf/commons/flow/transfer/FlowInfoTest.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testToString() {\n\t    // TODO: implement\n\t}", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "FlowInfoTest.testToString()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "FlowInfo", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "public static final int ACK_COUNT_EXPECTED_UNDEFINED = -1;", "modifier": "public static final", "type": "int", "declarator": "ACK_COUNT_EXPECTED_UNDEFINED = -1", "var_name": "ACK_COUNT_EXPECTED_UNDEFINED"}, {"original_string": "private static final long serialVersionUID = -2604969744637192040L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2604969744637192040L", "var_name": "serialVersionUID"}, {"original_string": "@XmlElement(required=true)\n    private Long identifier;", "modifier": "@XmlElement(required=true)\n    private", "type": "Long", "declarator": "identifier", "var_name": "identifier"}, {"original_string": "@XmlElement\n    private String status;", "modifier": "@XmlElement\n    private", "type": "String", "declarator": "status", "var_name": "status"}, {"original_string": "@XmlElement\n    private String application;", "modifier": "@XmlElement\n    private", "type": "String", "declarator": "application", "var_name": "application"}, {"original_string": "@XmlElement\n    private Date creationTime;", "modifier": "@XmlElement\n    private", "type": "Date", "declarator": "creationTime", "var_name": "creationTime"}, {"original_string": "@XmlElement(type=Boolean.class)\n    private boolean replayable;", "modifier": "@XmlElement(type=Boolean.class)\n    private", "type": "boolean", "declarator": "replayable", "var_name": "replayable"}, {"original_string": "@XmlElement\n    private Date replayTime;", "modifier": "@XmlElement\n    private", "type": "Date", "declarator": "replayTime", "var_name": "replayTime"}, {"original_string": "@XmlElement(type=Integer.class)\n    private int replayCount;", "modifier": "@XmlElement(type=Integer.class)\n    private", "type": "int", "declarator": "replayCount", "var_name": "replayCount"}, {"original_string": "@XmlElement(type=Integer.class)\n    private int ackCount;", "modifier": "@XmlElement(type=Integer.class)\n    private", "type": "int", "declarator": "ackCount", "var_name": "ackCount"}, {"original_string": "@XmlElement(type=Integer.class)\n    private int ackCountExpected;", "modifier": "@XmlElement(type=Integer.class)\n    private", "type": "int", "declarator": "ackCountExpected", "var_name": "ackCountExpected"}, {"original_string": "@XmlElement(type=Integer.class)\n    private int nakCount;", "modifier": "@XmlElement(type=Integer.class)\n    private", "type": "int", "declarator": "nakCount", "var_name": "nakCount"}, {"original_string": "@XmlElement\n    private String text;", "modifier": "@XmlElement\n    private", "type": "String", "declarator": "text", "var_name": "text"}, {"original_string": "@XmlElementRef(name=\"flow-part-infos\")\n    private final Set<FlowPartInfo> partInfos;", "modifier": "@XmlElementRef(name=\"flow-part-infos\")\n    private final", "type": "Set<FlowPartInfo>", "declarator": "partInfos", "var_name": "partInfos"}], "methods": [{"identifier": "FlowInfo", "parameters": "()", "modifiers": "public", "return": "", "signature": " FlowInfo()", "full_signature": "public  FlowInfo()", "class_method_signature": "FlowInfo.FlowInfo()", "testcase": false, "constructor": true}, {"identifier": "getStatus", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStatus()", "full_signature": "public String getStatus()", "class_method_signature": "FlowInfo.getStatus()", "testcase": false, "constructor": false}, {"identifier": "setStatus", "parameters": "(String status)", "modifiers": "public", "return": "void", "signature": "void setStatus(String status)", "full_signature": "public void setStatus(String status)", "class_method_signature": "FlowInfo.setStatus(String status)", "testcase": false, "constructor": false}, {"identifier": "getApplication", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getApplication()", "full_signature": "public String getApplication()", "class_method_signature": "FlowInfo.getApplication()", "testcase": false, "constructor": false}, {"identifier": "setApplication", "parameters": "(String application)", "modifiers": "public", "return": "void", "signature": "void setApplication(String application)", "full_signature": "public void setApplication(String application)", "class_method_signature": "FlowInfo.setApplication(String application)", "testcase": false, "constructor": false}, {"identifier": "getAckCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAckCount()", "full_signature": "public int getAckCount()", "class_method_signature": "FlowInfo.getAckCount()", "testcase": false, "constructor": false}, {"identifier": "setAckCount", "parameters": "(int ackCount)", "modifiers": "public", "return": "void", "signature": "void setAckCount(int ackCount)", "full_signature": "public void setAckCount(int ackCount)", "class_method_signature": "FlowInfo.setAckCount(int ackCount)", "testcase": false, "constructor": false}, {"identifier": "getAckCountExpected", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAckCountExpected()", "full_signature": "public int getAckCountExpected()", "class_method_signature": "FlowInfo.getAckCountExpected()", "testcase": false, "constructor": false}, {"identifier": "setAckCountExpected", "parameters": "(int ackCountExpected)", "modifiers": "public", "return": "void", "signature": "void setAckCountExpected(int ackCountExpected)", "full_signature": "public void setAckCountExpected(int ackCountExpected)", "class_method_signature": "FlowInfo.setAckCountExpected(int ackCountExpected)", "testcase": false, "constructor": false}, {"identifier": "getCreationTime", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getCreationTime()", "full_signature": "public Date getCreationTime()", "class_method_signature": "FlowInfo.getCreationTime()", "testcase": false, "constructor": false}, {"identifier": "setCreationTime", "parameters": "(Date creationTime)", "modifiers": "public", "return": "void", "signature": "void setCreationTime(Date creationTime)", "full_signature": "public void setCreationTime(Date creationTime)", "class_method_signature": "FlowInfo.setCreationTime(Date creationTime)", "testcase": false, "constructor": false}, {"identifier": "getIdentifier", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getIdentifier()", "full_signature": "public Long getIdentifier()", "class_method_signature": "FlowInfo.getIdentifier()", "testcase": false, "constructor": false}, {"identifier": "setIdentifier", "parameters": "(Long identifier)", "modifiers": "public", "return": "void", "signature": "void setIdentifier(Long identifier)", "full_signature": "public void setIdentifier(Long identifier)", "class_method_signature": "FlowInfo.setIdentifier(Long identifier)", "testcase": false, "constructor": false}, {"identifier": "getNakCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNakCount()", "full_signature": "public int getNakCount()", "class_method_signature": "FlowInfo.getNakCount()", "testcase": false, "constructor": false}, {"identifier": "setNakCount", "parameters": "(int nakCount)", "modifiers": "public", "return": "void", "signature": "void setNakCount(int nakCount)", "full_signature": "public void setNakCount(int nakCount)", "class_method_signature": "FlowInfo.setNakCount(int nakCount)", "testcase": false, "constructor": false}, {"identifier": "isReplayable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isReplayable()", "full_signature": "public boolean isReplayable()", "class_method_signature": "FlowInfo.isReplayable()", "testcase": false, "constructor": false}, {"identifier": "setReplayable", "parameters": "(boolean replayable)", "modifiers": "public", "return": "void", "signature": "void setReplayable(boolean replayable)", "full_signature": "public void setReplayable(boolean replayable)", "class_method_signature": "FlowInfo.setReplayable(boolean replayable)", "testcase": false, "constructor": false}, {"identifier": "getReplayCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getReplayCount()", "full_signature": "public int getReplayCount()", "class_method_signature": "FlowInfo.getReplayCount()", "testcase": false, "constructor": false}, {"identifier": "setReplayCount", "parameters": "(int replayCount)", "modifiers": "public", "return": "void", "signature": "void setReplayCount(int replayCount)", "full_signature": "public void setReplayCount(int replayCount)", "class_method_signature": "FlowInfo.setReplayCount(int replayCount)", "testcase": false, "constructor": false}, {"identifier": "getReplayTime", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getReplayTime()", "full_signature": "public Date getReplayTime()", "class_method_signature": "FlowInfo.getReplayTime()", "testcase": false, "constructor": false}, {"identifier": "setReplayTime", "parameters": "(Date replayTime)", "modifiers": "public", "return": "void", "signature": "void setReplayTime(Date replayTime)", "full_signature": "public void setReplayTime(Date replayTime)", "class_method_signature": "FlowInfo.setReplayTime(Date replayTime)", "testcase": false, "constructor": false}, {"identifier": "getPartInfos", "parameters": "()", "modifiers": "public", "return": "Set<FlowPartInfo>", "signature": "Set<FlowPartInfo> getPartInfos()", "full_signature": "public Set<FlowPartInfo> getPartInfos()", "class_method_signature": "FlowInfo.getPartInfos()", "testcase": false, "constructor": false}, {"identifier": "getText", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getText()", "full_signature": "public String getText()", "class_method_signature": "FlowInfo.getText()", "testcase": false, "constructor": false}, {"identifier": "setText", "parameters": "(String text)", "modifiers": "public", "return": "void", "signature": "void setText(String text)", "full_signature": "public void setText(String text)", "class_method_signature": "FlowInfo.setText(String text)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FlowInfo.toString()", "testcase": false, "constructor": false}], "file": "commons/flow/src/main/java/org/openehealth/ipf/commons/flow/transfer/FlowInfo.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toString() {\n        StringBuffer buf = new StringBuffer();\n        buf.append(\"Flow (id = \").append(identifier).append(\")\").append(NEWLINE);\n        buf.append(\"- overall status       = \").append(status).append(NEWLINE);\n        buf.append(\"- application          = \").append(application).append(NEWLINE);\n        buf.append(\"- create time          = \").append(dateString(creationTime)).append(NEWLINE);\n        buf.append(\"- replayable           = \").append(replayable).append(NEWLINE);\n        buf.append(\"- replay time          = \").append(dateString(replayTime)).append(NEWLINE);\n        buf.append(\"- replay count         = \").append(replayCount).append(NEWLINE);\n        buf.append(\"- ACK count (expected) = \").append(ackCountExpected).append(NEWLINE);\n        buf.append(\"- ACK count (actual)   = \").append(ackCount).append(NEWLINE);\n        buf.append(\"- NAK count            = \").append(nakCount).append(NEWLINE);\n        buf.append(\"- text                 = \").append(textString(text)).append(NEWLINE);\n        for (FlowPartInfo partInfo : getPartInfos()) {\n            buf.append(partInfo.toString());\n        }\n        return buf.toString();\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FlowInfo.toString()", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "dateString", "append", "append", "append", "append", "append", "append", "dateString", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "textString", "getPartInfos", "append", "toString", "toString"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}