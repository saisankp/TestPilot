{"test_class": {"identifier": "TileCodeComparatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Random rg = new Random(342);", "modifier": "", "type": "Random", "declarator": "rg = new Random(342)", "var_name": "rg"}], "file": "impl/src/test/java/org/geomajas/internal/layer/tile/TileCodeComparatorTest.java"}, "test_case": {"identifier": "testTileCodeComparatorSymmetry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testTileCodeComparatorSymmetry() {\n\t\tList<TileCode> list = createTileCodes(0, 0, 3, 3); \n\t\tTileCodeComparator comp = new TileCodeComparator(1, 1);\n\t\tfor (TileCode code1 : list) {\n\t\t\tfor (TileCode code2 : list) {\n\t\t\t\tint left = comp.compare(code1, code2);\n\t\t\t\tint right = - comp.compare(code2, code1);\n\t\t\t\tif (left != right) {\n\t\t\t\t\tSystem.out.println(code1 + \" \" + code2);\n\t\t\t\t}\n\t\t\t\tAssert.assertEquals(left, right);\n\t\t\t}\n\t\t}\n\t}", "signature": "void testTileCodeComparatorSymmetry()", "full_signature": "@Test public void testTileCodeComparatorSymmetry()", "class_method_signature": "TileCodeComparatorTest.testTileCodeComparatorSymmetry()", "testcase": true, "constructor": false, "invocations": ["createTileCodes", "compare", "compare", "println", "assertEquals"]}, "focal_class": {"identifier": "TileCodeComparator", "superclass": "", "interfaces": "implements Comparator<TileCode>", "fields": [{"original_string": "private int offsetX;", "modifier": "private", "type": "int", "declarator": "offsetX", "var_name": "offsetX"}, {"original_string": "private int offsetY;", "modifier": "private", "type": "int", "declarator": "offsetY", "var_name": "offsetY"}], "methods": [{"identifier": "TileCodeComparator", "parameters": "(int offsetX, int offsetY)", "modifiers": "public", "return": "", "signature": " TileCodeComparator(int offsetX, int offsetY)", "full_signature": "public  TileCodeComparator(int offsetX, int offsetY)", "class_method_signature": "TileCodeComparator.TileCodeComparator(int offsetX, int offsetY)", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(TileCode o1, TileCode o2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(TileCode o1, TileCode o2)", "full_signature": "@Override public int compare(TileCode o1, TileCode o2)", "class_method_signature": "TileCodeComparator.compare(TileCode o1, TileCode o2)", "testcase": false, "constructor": false}], "file": "impl/src/main/java/org/geomajas/internal/layer/tile/TileCodeComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(TileCode o1, TileCode o2)", "modifiers": "@Override public", "return": "int", "body": "@Override\n\tpublic int compare(TileCode o1, TileCode o2) {\n\t\t// -1: o1 is closer to center\n\t\t//  0: same distance to center\n\t\t//  1: o2 is closer to center\n\t\tint x1 = o1.getX() - offsetX;\n\t\tint x2 = o2.getX() - offsetX;\n\t\tint y1 = o1.getY() - offsetY;\n\t\tint y2 = o2.getY() - offsetY;\n\n\t\tint o1d = Math.max(Math.abs(x1), Math.abs(y1));\n\t\tint o2d = Math.max(Math.abs(x2), Math.abs(y2));\n\n\t\tif (x1 == x2 && y1 == y2) { // points same position\n\t\t\treturn 0;\n\t\t} else if (o1d != o2d) { // points on different sphere\n\t\t\treturn (o1d < o2d) ? -1 : 1;\n\t\t} else { // points on same sphere\n\t\t\tif (y1 == o1d) { // Case: o1 on top row\n\t\t\t\tif (y1 == y2) {\n\t\t\t\t\treturn (x1 < x2) ? -1 : 1;\n\t\t\t\t} else {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} else if (x1 == o1d) { // Case: o1 on right column\n\t\t\t\tif (y2 == o1d) {\n\t\t\t\t\treturn 1;\n\t\t\t\t} else if (x1 == x2) {\n\t\t\t\t\treturn (y1 > y2) ? -1 : 1;\n\t\t\t\t} else {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} else if (y1 == -1 * o1d) { // Case: o1 on bottom row\n\t\t\t\tif (y2 == o1d || x2 == o1d) {\n\t\t\t\t\treturn 1;\n\t\t\t\t} else if (y1 == y2) {\n\t\t\t\t\treturn (x1 > x2) ? -1 : 1;\n\t\t\t\t} else {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} else if (x1 == -1 * o1d) { // Case: o1 on left column\n\t\t\t\tif (y2 == o1d || x2 == o1d || y2 == -1 * o1d) {\n\t\t\t\t\treturn 1;\n\t\t\t\t} else {\n\t\t\t\t\treturn (y1 < y2) ? -1 : 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0; // Should not reach this\n\t\t}\n\t}", "signature": "int compare(TileCode o1, TileCode o2)", "full_signature": "@Override public int compare(TileCode o1, TileCode o2)", "class_method_signature": "TileCodeComparator.compare(TileCode o1, TileCode o2)", "testcase": false, "constructor": false, "invocations": ["getX", "getX", "getY", "getY", "max", "abs", "abs", "max", "abs", "abs"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}