{"test_class": {"identifier": "MMFF94BasedParameterSetReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/forcefield/src/test/java/org/openscience/cdk/modeling/builder3d/MMFF94BasedParameterSetReaderTest.java"}, "test_case": {"identifier": "testreadParameterSets", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testreadParameterSets() throws Exception {\n        MMFF94BasedParameterSetReader mmff94bpsr = new MMFF94BasedParameterSetReader();\n        mmff94bpsr.readParameterSets(DefaultChemObjectBuilder.getInstance());\n        Map<String, Object> parameterSet = new Hashtable<String, Object>();\n        parameterSet = mmff94bpsr.getParamterSet();\n\n        //test atom type\n        List<IAtomType> atomtypes = mmff94bpsr.getAtomTypes();\n        IAtomType atomtype = atomtypes.get(0);\n        String sid = \"C\";\n        assertEquals(sid, atomtype.getAtomTypeName());\n        String rootType = \"C\";\n        assertEquals(rootType, atomtype.getSymbol());\n        String smaxbond = \"4\";\n        assertEquals(Integer.parseInt(smaxbond), (int) atomtype.getFormalNeighbourCount());\n        String satomNr = \"6\";\n        assertEquals(Integer.parseInt(satomNr), (int) atomtype.getAtomicNumber());\n\n        //atom\n        //TODO testing\n\n        //bond\n        //\t\tString scode = \"0\";\n        String sid1 = \"C\";\n        String sid2 = \"C\";\n        String slen = \"1.508\";\n        String sk2 = \"306.432\";\n        String sk3 = \"-612.865\";\n        String sk4 = \"715.009\";\n        String sbci = \"0.0000\";\n        String bondkey = \"bond\" + sid1 + \";\" + sid2;\n        List<Double> bonddata = new ArrayList<Double>();\n        bonddata.add((Double) (new Double(slen).doubleValue()));\n        bonddata.add((Double) (new Double(sk2).doubleValue()));\n        bonddata.add((Double) (new Double(sk3).doubleValue()));\n        bonddata.add((Double) (new Double(sk4).doubleValue()));\n        bonddata.add((Double) (new Double(sbci).doubleValue()));\n\n        //strbnd\n        //\t\tscode = \"0\";\n        sid1 = \"C\";\n        sid2 = \"C\";\n        String sid3 = \"C\";\n        String value1 = \"14.82507\";\n        String value2 = \"14.82507\";\n        String strbndkey = \"strbnd\" + sid1 + \";\" + sid2 + \";\" + sid3;\n        List<Double> strbnddata = new ArrayList<Double>();\n        strbnddata.add((Double) (new Double(value1).doubleValue()));\n        strbnddata.add((Double) (new Double(value2).doubleValue()));\n\n        //angle\n        //      scode = \"0\";\n        sid1 = \"C=\";\n        sid2 = \"C\";\n        sid3 = \"N\";\n        value1 = \"105.837\";\n        value2 = \"86.1429\";\n        String value3 = \"-34.5494\";\n        String value4 = \"0\";\n        String anglekey = \"angle\" + sid1 + \";\" + sid2 + \";\" + sid3;\n        List<Double> angledata = new ArrayList<Double>();\n        angledata.add((Double) (new Double(value1).doubleValue()));\n        angledata.add((Double) (new Double(value2).doubleValue()));\n        angledata.add((Double) (new Double(value3).doubleValue()));\n        angledata.add((Double) (new Double(value4).doubleValue()));\n\n        //torsion\n        //\t    scode = \"0\";\n        sid1 = \"HC\";\n        sid2 = \"C\";\n        sid3 = \"C\";\n        String sid4 = \"HC\";\n        value1 = \"0.142\";\n        value2 = \"0.693\";\n        value3 = \"0.157\";\n        value4 = \"0.000\";\n        String value5 = \"0.000\";\n        String torsionkey = \"torsion\" + \";\" + sid1 + \";\" + sid2 + \";\" + sid3 + \";\" + sid4;\n        List<Double> torsiondata = new ArrayList<Double>();\n        torsiondata.add((Double) (new Double(value1).doubleValue()));\n        torsiondata.add((Double) (new Double(value2).doubleValue()));\n        torsiondata.add((Double) (new Double(value3).doubleValue()));\n        torsiondata.add((Double) (new Double(value4).doubleValue()));\n        torsiondata.add((Double) (new Double(value5).doubleValue()));\n\n        //opbend\n        //      scode = \"0\";\n        sid1 = \"O=\";\n        sid2 = \"C=\";\n        sid3 = \"CR4R\";\n        sid4 = \"CR4R\";\n        value1 = \"10.86681780\";\n        String opbendkey = \"opbend\" + \";\" + sid1 + \";\" + sid2 + \";\" + sid3 + \";\" + sid4;\n        List<Double> opbenddata = new ArrayList<Double>();\n        opbenddata.add((Double) (new Double(value1).doubleValue()));\n\n        //TODO data lines testing\n\n        for (Entry<String, Object> e : parameterSet.entrySet()) {\n            if (e.getKey().equals(bondkey))\n                assertEquals(bonddata, e.getValue());\n            else if (e.getKey().equals(strbndkey))\n                assertEquals(strbnddata, e.getValue());\n            else if (e.getKey().equals(anglekey))\n                assertEquals(angledata, e.getValue());\n            else if (e.getKey().equals(torsionkey))\n                assertEquals(torsiondata, e.getValue());\n            else if (e.getKey().equals(opbendkey)) assertEquals(opbenddata, e.getValue());\n        }\n    }", "signature": "void testreadParameterSets()", "full_signature": "@Test public void testreadParameterSets()", "class_method_signature": "MMFF94BasedParameterSetReaderTest.testreadParameterSets()", "testcase": true, "constructor": false, "invocations": ["readParameterSets", "getInstance", "getParamterSet", "getAtomTypes", "get", "assertEquals", "getAtomTypeName", "assertEquals", "getSymbol", "assertEquals", "parseInt", "getFormalNeighbourCount", "assertEquals", "parseInt", "getAtomicNumber", "add", "doubleValue", "add", "doubleValue", "add", "doubleValue", "add", "doubleValue", "add", "doubleValue", "add", "doubleValue", "add", "doubleValue", "add", "doubleValue", "add", "doubleValue", "add", "doubleValue", "add", "doubleValue", "add", "doubleValue", "add", "doubleValue", "add", "doubleValue", "add", "doubleValue", "add", "doubleValue", "add", "doubleValue", "entrySet", "equals", "getKey", "assertEquals", "getValue", "equals", "getKey", "assertEquals", "getValue", "equals", "getKey", "assertEquals", "getValue", "equals", "getKey", "assertEquals", "getValue", "equals", "getKey", "assertEquals", "getValue"]}, "focal_class": {"identifier": "MMFF94BasedParameterSetReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ILoggingTool  LOG            = LoggingToolFactory\n                                                       .createLoggingTool(MMFF94BasedParameterSetReader.class);", "modifier": "private final", "type": "ILoggingTool", "declarator": "LOG            = LoggingToolFactory\n                                                       .createLoggingTool(MMFF94BasedParameterSetReader.class)", "var_name": "LOG"}, {"original_string": "private String              configFile     = \"org/openscience/cdk/modeling/forcefield/data/mmff94.prm\";", "modifier": "private", "type": "String", "declarator": "configFile     = \"org/openscience/cdk/modeling/forcefield/data/mmff94.prm\"", "var_name": "configFile"}, {"original_string": "private InputStream         ins            = null;", "modifier": "private", "type": "InputStream", "declarator": "ins            = null", "var_name": "ins"}, {"original_string": "private Map<String, Object> parameterSet;", "modifier": "private", "type": "Map<String, Object>", "declarator": "parameterSet", "var_name": "parameterSet"}, {"original_string": "private List<IAtomType>     atomTypes;", "modifier": "private", "type": "List<IAtomType>", "declarator": "atomTypes", "var_name": "atomTypes"}, {"original_string": "private StringTokenizer     st;", "modifier": "private", "type": "StringTokenizer", "declarator": "st", "var_name": "st"}, {"original_string": "private String              key            = \"\";", "modifier": "private", "type": "String", "declarator": "key            = \"\"", "var_name": "key"}, {"original_string": "private String              sid;", "modifier": "private", "type": "String", "declarator": "sid", "var_name": "sid"}, {"original_string": "private String              configFilevdW  = \"org/openscience/cdk/modeling/forcefield/data/mmffvdw.prm\";", "modifier": "private", "type": "String", "declarator": "configFilevdW  = \"org/openscience/cdk/modeling/forcefield/data/mmffvdw.prm\"", "var_name": "configFilevdW"}, {"original_string": "private InputStream         insvdW         = null;", "modifier": "private", "type": "InputStream", "declarator": "insvdW         = null", "var_name": "insvdW"}, {"original_string": "private StringTokenizer     stvdW;", "modifier": "private", "type": "StringTokenizer", "declarator": "stvdW", "var_name": "stvdW"}, {"original_string": "private String              sidvdW;", "modifier": "private", "type": "String", "declarator": "sidvdW", "var_name": "sidvdW"}, {"original_string": "private String              configFileDFSB = \"org/openscience/cdk/modeling/forcefield/data/mmffdfsb.par\";", "modifier": "private", "type": "String", "declarator": "configFileDFSB = \"org/openscience/cdk/modeling/forcefield/data/mmffdfsb.par\"", "var_name": "configFileDFSB"}, {"original_string": "private InputStream         insDFSB;", "modifier": "private", "type": "InputStream", "declarator": "insDFSB", "var_name": "insDFSB"}, {"original_string": "private StringTokenizer     stDFSB;", "modifier": "private", "type": "StringTokenizer", "declarator": "stDFSB", "var_name": "stDFSB"}], "methods": [{"identifier": "MMFF94BasedParameterSetReader", "parameters": "()", "modifiers": "public", "return": "", "signature": " MMFF94BasedParameterSetReader()", "full_signature": "public  MMFF94BasedParameterSetReader()", "class_method_signature": "MMFF94BasedParameterSetReader.MMFF94BasedParameterSetReader()", "testcase": false, "constructor": true}, {"identifier": "getParamterSet", "parameters": "()", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getParamterSet()", "full_signature": "public Map<String, Object> getParamterSet()", "class_method_signature": "MMFF94BasedParameterSetReader.getParamterSet()", "testcase": false, "constructor": false}, {"identifier": "getAtomTypes", "parameters": "()", "modifiers": "public", "return": "List<IAtomType>", "signature": "List<IAtomType> getAtomTypes()", "full_signature": "public List<IAtomType> getAtomTypes()", "class_method_signature": "MMFF94BasedParameterSetReader.getAtomTypes()", "testcase": false, "constructor": false}, {"identifier": "setInputStream", "parameters": "(InputStream ins)", "modifiers": "public", "return": "void", "signature": "void setInputStream(InputStream ins)", "full_signature": "public void setInputStream(InputStream ins)", "class_method_signature": "MMFF94BasedParameterSetReader.setInputStream(InputStream ins)", "testcase": false, "constructor": false}, {"identifier": "setAtomTypeData", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setAtomTypeData()", "full_signature": "private void setAtomTypeData()", "class_method_signature": "MMFF94BasedParameterSetReader.setAtomTypeData()", "testcase": false, "constructor": false}, {"identifier": "setAtomTypes", "parameters": "(IChemObjectBuilder builder)", "modifiers": "private", "return": "void", "signature": "void setAtomTypes(IChemObjectBuilder builder)", "full_signature": "private void setAtomTypes(IChemObjectBuilder builder)", "class_method_signature": "MMFF94BasedParameterSetReader.setAtomTypes(IChemObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "setBond", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setBond()", "full_signature": "private void setBond()", "class_method_signature": "MMFF94BasedParameterSetReader.setBond()", "testcase": false, "constructor": false}, {"identifier": "setAngle", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setAngle()", "full_signature": "private void setAngle()", "class_method_signature": "MMFF94BasedParameterSetReader.setAngle()", "testcase": false, "constructor": false}, {"identifier": "setStrBnd", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setStrBnd()", "full_signature": "private void setStrBnd()", "class_method_signature": "MMFF94BasedParameterSetReader.setStrBnd()", "testcase": false, "constructor": false}, {"identifier": "setTorsion", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setTorsion()", "full_signature": "private void setTorsion()", "class_method_signature": "MMFF94BasedParameterSetReader.setTorsion()", "testcase": false, "constructor": false}, {"identifier": "setOpBend", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setOpBend()", "full_signature": "private void setOpBend()", "class_method_signature": "MMFF94BasedParameterSetReader.setOpBend()", "testcase": false, "constructor": false}, {"identifier": "setDefaultStrBnd", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setDefaultStrBnd()", "full_signature": "private void setDefaultStrBnd()", "class_method_signature": "MMFF94BasedParameterSetReader.setDefaultStrBnd()", "testcase": false, "constructor": false}, {"identifier": "readParameterSets", "parameters": "(IChemObjectBuilder builder)", "modifiers": "public", "return": "void", "signature": "void readParameterSets(IChemObjectBuilder builder)", "full_signature": "public void readParameterSets(IChemObjectBuilder builder)", "class_method_signature": "MMFF94BasedParameterSetReader.readParameterSets(IChemObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "massNumber", "parameters": "(int atomicNumber, double exactMass)", "modifiers": "private", "return": "Integer", "signature": "Integer massNumber(int atomicNumber, double exactMass)", "full_signature": "private Integer massNumber(int atomicNumber, double exactMass)", "class_method_signature": "MMFF94BasedParameterSetReader.massNumber(int atomicNumber, double exactMass)", "testcase": false, "constructor": false}], "file": "tool/forcefield/src/main/java/org/openscience/cdk/modeling/builder3d/MMFF94BasedParameterSetReader.java"}, "focal_method": {"identifier": "readParameterSets", "parameters": "(IChemObjectBuilder builder)", "modifiers": "public", "return": "void", "body": "public void readParameterSets(IChemObjectBuilder builder) throws Exception {\n        //vdW,bond,angle,strbond,opbend,torsion,data\n        LOG.debug(\"------ Read MMFF94 ParameterSets ------\");\n\n        if (ins == null) {\n            ClassLoader loader = this.getClass().getClassLoader();\n            ins = loader.getResourceAsStream(configFile);\n        }\n        if (ins == null) {\n            throw new IOException(\"There was a problem getting the default stream: \" + configFile);\n        }\n\n        BufferedReader r = new BufferedReader(new InputStreamReader(ins), 1024);\n        String s;\n        int[] a = {0, 0, 0, 0, 0, 0, 0, 0};\n\n        if (insvdW == null) {\n            insvdW = this.getClass().getClassLoader().getResourceAsStream(configFilevdW);\n        }\n        if (insvdW == null) {\n            throw new IOException(\"There was a problem getting the default stream: \" + configFilevdW);\n        }\n\n        BufferedReader rvdW = new BufferedReader(new InputStreamReader(insvdW), 1024);\n        String svdW;\n        int ntvdW;\n\n        if (insDFSB == null) {\n            insDFSB = this.getClass().getClassLoader().getResourceAsStream(configFileDFSB);\n        }\n        if (insDFSB == null) {\n            throw new IOException(\"There was a problem getting the default stream: \" + configFileDFSB);\n        }\n\n        BufferedReader rDFSB = new BufferedReader(new InputStreamReader(insDFSB), 1024);\n        String sDFSB;\n        int ntDFSB;\n\n        try {\n            while (true) {\n                s = r.readLine();\n                if (s == null) {\n                    break;\n                }\n                st = new StringTokenizer(s, \"\\t; \");\n                int nt = st.countTokens();\n                if (s.startsWith(\"atom\") & nt <= 8) {\n                    setAtomTypes(builder);\n                    a[0]++;\n                } else if (s.startsWith(\"bond\") & nt == 9) {\n                    setBond();\n                    a[1]++;\n                } else if (s.startsWith(\"angle\") & nt <= 10) {\n                    setAngle();\n                    a[2]++;\n                } else if (s.startsWith(\"strbnd\") & nt == 7) {\n                    setStrBnd();\n                    a[3]++;\n                } else if (s.startsWith(\"torsion\") & nt == 11) {\n                    setTorsion();\n                    a[4]++;\n                } else if (s.startsWith(\"opbend\") & nt == 6) {\n                    setOpBend();\n                    a[5]++;\n                } else if (s.startsWith(\"data\") & nt == 10) {\n                    readatmmffvdw: while (true) {\n                        svdW = rvdW.readLine();\n                        if (svdW == null) {\n                            break;\n                        }\n                        stvdW = new StringTokenizer(svdW, \"\\t; \");\n                        ntvdW = stvdW.countTokens();\n                        LOG.debug(\"ntvdW : \" + ntvdW);\n                        if (svdW.startsWith(\"vdw\") & ntvdW == 9) {\n                            st.nextToken();\n                            sid = st.nextToken();\n                            stvdW.nextToken();\n                            sidvdW = stvdW.nextToken();\n                            if (sid.equals(sidvdW)) {\n                                setAtomTypeData();\n                                a[6]++;\n                            }\n                            break readatmmffvdw;\n                        }\n                    }// end while\n                }\n            }// end while\n\n            ins.close();\n            insvdW.close();\n        } catch (IOException e) {\n            throw new IOException(\"There was a problem parsing the mmff94 forcefield\");\n        }\n\n        try {\n            LOG.debug(\"Parses the Default Stretch-Bend Parameters\");\n            while (true) {\n                sDFSB = rDFSB.readLine();\n                LOG.debug(\"sDFSB = \" + sDFSB);\n                if (sDFSB == null) {\n                    LOG.debug(\"sDFSB == null, break\");\n                    break;\n                }\n                stDFSB = new StringTokenizer(sDFSB, \"\\t; \");\n                ntDFSB = stDFSB.countTokens();\n                LOG.debug(\"ntDFSB : \" + ntDFSB);\n                if (sDFSB.startsWith(\"DFSB\") & ntDFSB == 6) {\n                    setDefaultStrBnd();\n                }\n            }\n            insDFSB.close();\n            LOG.debug(\"insDFSB closed\");\n        } catch (IOException e) {\n            throw new IOException(\"There was a problem parsing the Default Stretch-Bend Parameters (mmffdfsb.par)\");\n        }\n    }", "signature": "void readParameterSets(IChemObjectBuilder builder)", "full_signature": "public void readParameterSets(IChemObjectBuilder builder)", "class_method_signature": "MMFF94BasedParameterSetReader.readParameterSets(IChemObjectBuilder builder)", "testcase": false, "constructor": false, "invocations": ["debug", "getClassLoader", "getClass", "getResourceAsStream", "getResourceAsStream", "getClassLoader", "getClass", "getResourceAsStream", "getClassLoader", "getClass", "readLine", "countTokens", "startsWith", "setAtomTypes", "startsWith", "setBond", "startsWith", "setAngle", "startsWith", "setStrBnd", "startsWith", "setTorsion", "startsWith", "setOpBend", "startsWith", "readLine", "countTokens", "debug", "startsWith", "nextToken", "nextToken", "nextToken", "nextToken", "equals", "setAtomTypeData", "close", "close", "debug", "readLine", "debug", "debug", "countTokens", "debug", "startsWith", "setDefaultStrBnd", "close", "debug"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}