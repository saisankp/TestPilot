{"test_class": {"identifier": "CustomDescriptionStepParserTest", "superclass": "extends AbstractStepParserTest", "interfaces": "", "fields": [{"original_string": "DynamicJsonObjectResolver resolver;", "modifier": "", "type": "DynamicJsonObjectResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "Function function = null;", "modifier": "", "type": "Function", "declarator": "function = null", "var_name": "function"}], "file": "step-plans/step-plans-parser/src/test/java/step/repositories/parser/CustomDescriptionStepParserTest.java"}, "test_case": {"identifier": "testMultipleSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMultipleSet() throws Exception {\n\t\tList<AbstractStep> steps = new ArrayList<>();\n\t\tsteps.add(step(\"Set a='b'\\t c=\\\"d\\\"\\u00A0e = 'f'\\n\"));\n\t\t\n\t\tList<AbstractArtefact> children = getChildren(parse(steps));\n\t\t\n\t\tSet set = (Set) children.get(0);\n\t\tAssert.assertEquals(\"a\",set.getKey().getValue());\n\t\tAssert.assertEquals(\"'b'\",set.getValue().getExpression());\n\t\t\n\t\tset = (Set) children.get(1);\n\t\tAssert.assertEquals(\"c\",set.getKey().getValue());\n\t\tAssert.assertEquals(\"\\\"d\\\"\",set.getValue().getExpression());\n\t\t\n\t\tset = (Set) children.get(2);\n\t\tAssert.assertEquals(\"e\",set.getKey().getValue());\n\t\tAssert.assertEquals(\"'f'\",set.getValue().getExpression());\n\t}", "signature": "void testMultipleSet()", "full_signature": "@Test public void testMultipleSet()", "class_method_signature": "CustomDescriptionStepParserTest.testMultipleSet()", "testcase": true, "constructor": false, "invocations": ["add", "step", "getChildren", "parse", "get", "assertEquals", "getValue", "getKey", "assertEquals", "getExpression", "getValue", "get", "assertEquals", "getValue", "getKey", "assertEquals", "getExpression", "getValue", "get", "assertEquals", "getValue", "getKey", "assertEquals", "getExpression", "getValue"]}, "focal_class": {"identifier": "CustomDescriptionStepParser", "superclass": "", "interfaces": "implements StepParser<DescriptionStep>", "fields": [], "methods": [{"identifier": "getParserScoreForStep", "parameters": "(AbstractStep step)", "modifiers": "@Override public", "return": "int", "signature": "int getParserScoreForStep(AbstractStep step)", "full_signature": "@Override public int getParserScoreForStep(AbstractStep step)", "class_method_signature": "CustomDescriptionStepParser.getParserScoreForStep(AbstractStep step)", "testcase": false, "constructor": false}, {"identifier": "parseStep", "parameters": "(ParsingContext parsingContext, DescriptionStep step)", "modifiers": "@Override public", "return": "void", "signature": "void parseStep(ParsingContext parsingContext, DescriptionStep step)", "full_signature": "@Override public void parseStep(ParsingContext parsingContext, DescriptionStep step)", "class_method_signature": "CustomDescriptionStepParser.parseStep(ParsingContext parsingContext, DescriptionStep step)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String expression)", "modifiers": "private", "return": "ParseContext", "signature": "ParseContext parse(String expression)", "full_signature": "private ParseContext parse(String expression)", "class_method_signature": "CustomDescriptionStepParser.parse(String expression)", "testcase": false, "constructor": false}], "file": "step-plans/step-plans-parser/src/main/java/step/repositories/parser/CustomDescriptionStepParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String expression)", "modifiers": "private", "return": "ParseContext", "body": "private ParseContext parse(String expression) {\n\t\tBaseErrorListener baseErrorListener = new BaseErrorListener() {\n\t\t\t@Override\n\t\t\tpublic void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line,\n\t\t\t\t\tint charPositionInLine, String msg, RecognitionException e) {\n\t\t\t\tthrow new IllegalStateException(msg, e);\n\t\t\t}\n\t\t};\n\n\t\tDescriptionStepLexer lexer = new DescriptionStepLexer(new ANTLRInputStream(expression));\n\t\tlexer.addErrorListener(baseErrorListener);\n\t\tDescriptionStepParser parser = new DescriptionStepParser(new CommonTokenStream(lexer));\n\t\tparser.addErrorListener(baseErrorListener);\n\t\treturn parser.parse();\n\t}", "signature": "ParseContext parse(String expression)", "full_signature": "private ParseContext parse(String expression)", "class_method_signature": "CustomDescriptionStepParser.parse(String expression)", "testcase": false, "constructor": false, "invocations": ["addErrorListener", "addErrorListener", "parse"]}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}