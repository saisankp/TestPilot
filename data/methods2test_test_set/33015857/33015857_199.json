{"test_class": {"identifier": "SetsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Class<String> string = String.class;", "modifier": "", "type": "Class<String>", "declarator": "string = String.class", "var_name": "string"}], "file": "reflekt/src/test/java/io/advantageous/boon/core/SetsTest.java"}, "test_case": {"identifier": "copyTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void copyTest() {\n        Set<String> set = set( \"apple\", \"pear\", \"orange\" );\n\n        Set<String> set2;\n\n        set2 = set( copy( set ) );\n        assertEquals(\n                set, set2\n        );\n\n        set2 = set( copy( sortedSet( set ) ) );\n        assertEquals(\n                set, set2\n        );\n\n\n        set2 = set( copy( safeSet( set ) ) );\n        assertEquals(\n                set, set2\n        );\n\n\n        set2 = set( copy( safeSortedSet( set ) ) );\n        assertEquals(\n                set, set2\n        );\n\n\n    }", "signature": "void copyTest()", "full_signature": "@Test public void copyTest()", "class_method_signature": "SetsTest.copyTest()", "testcase": true, "constructor": false, "invocations": ["set", "set", "copy", "assertEquals", "set", "copy", "sortedSet", "assertEquals", "set", "copy", "safeSet", "assertEquals", "set", "copy", "safeSortedSet", "assertEquals"]}, "focal_class": {"identifier": "Sets", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "set", "parameters": "( Collection<V> collection )", "modifiers": "public static", "return": "Set<V>", "signature": "Set<V> set( Collection<V> collection )", "full_signature": "public static Set<V> set( Collection<V> collection )", "class_method_signature": "Sets.set( Collection<V> collection )", "testcase": false, "constructor": false}, {"identifier": "enumeration", "parameters": "( final Set<V> set )", "modifiers": "public static", "return": "Enumeration<V>", "signature": "Enumeration<V> enumeration( final Set<V> set )", "full_signature": "public static Enumeration<V> enumeration( final Set<V> set )", "class_method_signature": "Sets.enumeration( final Set<V> set )", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "( Class<V> clazz )", "modifiers": "public static", "return": "Set<V>", "signature": "Set<V> set( Class<V> clazz )", "full_signature": "public static Set<V> set( Class<V> clazz )", "class_method_signature": "Sets.set( Class<V> clazz )", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "( Iterable<V> iterable )", "modifiers": "public static", "return": "Set<V>", "signature": "Set<V> set( Iterable<V> iterable )", "full_signature": "public static Set<V> set( Iterable<V> iterable )", "class_method_signature": "Sets.set( Iterable<V> iterable )", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "( Enumeration<V> enumeration )", "modifiers": "public static", "return": "Set<V>", "signature": "Set<V> set( Enumeration<V> enumeration )", "full_signature": "public static Set<V> set( Enumeration<V> enumeration )", "class_method_signature": "Sets.set( Enumeration<V> enumeration )", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "( Iterator<V> iterator )", "modifiers": "public static", "return": "Set<V>", "signature": "Set<V> set( Iterator<V> iterator )", "full_signature": "public static Set<V> set( Iterator<V> iterator )", "class_method_signature": "Sets.set( Iterator<V> iterator )", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "( final V... array )", "modifiers": "@SafeVarargs public static", "return": "Set<V>", "signature": "Set<V> set( final V... array )", "full_signature": "@SafeVarargs public static Set<V> set( final V... array )", "class_method_signature": "Sets.set( final V... array )", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "( int size, final V... array  )", "modifiers": "@SafeVarargs public static", "return": "Set<V>", "signature": "Set<V> set( int size, final V... array  )", "full_signature": "@SafeVarargs public static Set<V> set( int size, final V... array  )", "class_method_signature": "Sets.set( int size, final V... array  )", "testcase": false, "constructor": false}, {"identifier": "sortedSet", "parameters": "( Iterator<V> iterator )", "modifiers": "public static", "return": "NavigableSet<V>", "signature": "NavigableSet<V> sortedSet( Iterator<V> iterator )", "full_signature": "public static NavigableSet<V> sortedSet( Iterator<V> iterator )", "class_method_signature": "Sets.sortedSet( Iterator<V> iterator )", "testcase": false, "constructor": false}, {"identifier": "sortedSet", "parameters": "( Class<V> clazz )", "modifiers": "public static", "return": "NavigableSet<V>", "signature": "NavigableSet<V> sortedSet( Class<V> clazz )", "full_signature": "public static NavigableSet<V> sortedSet( Class<V> clazz )", "class_method_signature": "Sets.sortedSet( Class<V> clazz )", "testcase": false, "constructor": false}, {"identifier": "sortedSet", "parameters": "( Iterable<V> iterable )", "modifiers": "public static", "return": "NavigableSet<V>", "signature": "NavigableSet<V> sortedSet( Iterable<V> iterable )", "full_signature": "public static NavigableSet<V> sortedSet( Iterable<V> iterable )", "class_method_signature": "Sets.sortedSet( Iterable<V> iterable )", "testcase": false, "constructor": false}, {"identifier": "sortedSet", "parameters": "( Enumeration<V> enumeration )", "modifiers": "public static", "return": "NavigableSet<V>", "signature": "NavigableSet<V> sortedSet( Enumeration<V> enumeration )", "full_signature": "public static NavigableSet<V> sortedSet( Enumeration<V> enumeration )", "class_method_signature": "Sets.sortedSet( Enumeration<V> enumeration )", "testcase": false, "constructor": false}, {"identifier": "sortedSet", "parameters": "( final V... array )", "modifiers": "@SafeVarargs public static", "return": "NavigableSet<V>", "signature": "NavigableSet<V> sortedSet( final V... array )", "full_signature": "@SafeVarargs public static NavigableSet<V> sortedSet( final V... array )", "class_method_signature": "Sets.sortedSet( final V... array )", "testcase": false, "constructor": false}, {"identifier": "sortedSet", "parameters": "( Collection<V> collection )", "modifiers": "public static", "return": "NavigableSet<V>", "signature": "NavigableSet<V> sortedSet( Collection<V> collection )", "full_signature": "public static NavigableSet<V> sortedSet( Collection<V> collection )", "class_method_signature": "Sets.sortedSet( Collection<V> collection )", "testcase": false, "constructor": false}, {"identifier": "safeSortedSet", "parameters": "( Iterator<V> iterator )", "modifiers": "public static", "return": "NavigableSet<V>", "signature": "NavigableSet<V> safeSortedSet( Iterator<V> iterator )", "full_signature": "public static NavigableSet<V> safeSortedSet( Iterator<V> iterator )", "class_method_signature": "Sets.safeSortedSet( Iterator<V> iterator )", "testcase": false, "constructor": false}, {"identifier": "safeSortedSet", "parameters": "( Class<V> clazz )", "modifiers": "public static", "return": "NavigableSet<V>", "signature": "NavigableSet<V> safeSortedSet( Class<V> clazz )", "full_signature": "public static NavigableSet<V> safeSortedSet( Class<V> clazz )", "class_method_signature": "Sets.safeSortedSet( Class<V> clazz )", "testcase": false, "constructor": false}, {"identifier": "safeSortedSet", "parameters": "( Iterable<V> iterable )", "modifiers": "public static", "return": "NavigableSet<V>", "signature": "NavigableSet<V> safeSortedSet( Iterable<V> iterable )", "full_signature": "public static NavigableSet<V> safeSortedSet( Iterable<V> iterable )", "class_method_signature": "Sets.safeSortedSet( Iterable<V> iterable )", "testcase": false, "constructor": false}, {"identifier": "safeSortedSet", "parameters": "( Enumeration<V> enumeration )", "modifiers": "public static", "return": "NavigableSet<V>", "signature": "NavigableSet<V> safeSortedSet( Enumeration<V> enumeration )", "full_signature": "public static NavigableSet<V> safeSortedSet( Enumeration<V> enumeration )", "class_method_signature": "Sets.safeSortedSet( Enumeration<V> enumeration )", "testcase": false, "constructor": false}, {"identifier": "safeSortedSet", "parameters": "( final V... array )", "modifiers": "@SafeVarargs public static", "return": "NavigableSet<V>", "signature": "NavigableSet<V> safeSortedSet( final V... array )", "full_signature": "@SafeVarargs public static NavigableSet<V> safeSortedSet( final V... array )", "class_method_signature": "Sets.safeSortedSet( final V... array )", "testcase": false, "constructor": false}, {"identifier": "safeSortedSet", "parameters": "( Collection<V> collection )", "modifiers": "public static", "return": "NavigableSet<V>", "signature": "NavigableSet<V> safeSortedSet( Collection<V> collection )", "full_signature": "public static NavigableSet<V> safeSortedSet( Collection<V> collection )", "class_method_signature": "Sets.safeSortedSet( Collection<V> collection )", "testcase": false, "constructor": false}, {"identifier": "safeSet", "parameters": "( Class<V> clazz )", "modifiers": "public static", "return": "Set<V>", "signature": "Set<V> safeSet( Class<V> clazz )", "full_signature": "public static Set<V> safeSet( Class<V> clazz )", "class_method_signature": "Sets.safeSet( Class<V> clazz )", "testcase": false, "constructor": false}, {"identifier": "safeSet", "parameters": "( Iterable<V> iterable )", "modifiers": "public static", "return": "Set<V>", "signature": "Set<V> safeSet( Iterable<V> iterable )", "full_signature": "public static Set<V> safeSet( Iterable<V> iterable )", "class_method_signature": "Sets.safeSet( Iterable<V> iterable )", "testcase": false, "constructor": false}, {"identifier": "safeSet", "parameters": "( Enumeration<V> enumeration )", "modifiers": "public static", "return": "Set<V>", "signature": "Set<V> safeSet( Enumeration<V> enumeration )", "full_signature": "public static Set<V> safeSet( Enumeration<V> enumeration )", "class_method_signature": "Sets.safeSet( Enumeration<V> enumeration )", "testcase": false, "constructor": false}, {"identifier": "safeSet", "parameters": "( Iterator<V> iterator )", "modifiers": "public static", "return": "Set<V>", "signature": "Set<V> safeSet( Iterator<V> iterator )", "full_signature": "public static Set<V> safeSet( Iterator<V> iterator )", "class_method_signature": "Sets.safeSet( Iterator<V> iterator )", "testcase": false, "constructor": false}, {"identifier": "safeSet", "parameters": "( final V... array )", "modifiers": "@SafeVarargs public static", "return": "Set<V>", "signature": "Set<V> safeSet( final V... array )", "full_signature": "@SafeVarargs public static Set<V> safeSet( final V... array )", "class_method_signature": "Sets.safeSet( final V... array )", "testcase": false, "constructor": false}, {"identifier": "safeSet", "parameters": "( Collection<V> collection )", "modifiers": "public static", "return": "Set<V>", "signature": "Set<V> safeSet( Collection<V> collection )", "full_signature": "public static Set<V> safeSet( Collection<V> collection )", "class_method_signature": "Sets.safeSet( Collection<V> collection )", "testcase": false, "constructor": false}, {"identifier": "len", "parameters": "( Set<?> set )", "modifiers": "public static", "return": "int", "signature": "int len( Set<?> set )", "full_signature": "public static int len( Set<?> set )", "class_method_signature": "Sets.len( Set<?> set )", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "( V value, Set<?> set )", "modifiers": "public static", "return": "boolean", "signature": "boolean in( V value, Set<?> set )", "full_signature": "public static boolean in( V value, Set<?> set )", "class_method_signature": "Sets.in( V value, Set<?> set )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( Set<V> set, V value )", "modifiers": "public static", "return": "void", "signature": "void add( Set<V> set, V value )", "full_signature": "public static void add( Set<V> set, V value )", "class_method_signature": "Sets.add( Set<V> set, V value )", "testcase": false, "constructor": false}, {"identifier": "idx", "parameters": "( NavigableSet<T> set, final T index )", "modifiers": "public static", "return": "T", "signature": "T idx( NavigableSet<T> set, final T index )", "full_signature": "public static T idx( NavigableSet<T> set, final T index )", "class_method_signature": "Sets.idx( NavigableSet<T> set, final T index )", "testcase": false, "constructor": false}, {"identifier": "idx", "parameters": "( Set<T> set, final T index )", "modifiers": "public static", "return": "T", "signature": "T idx( Set<T> set, final T index )", "full_signature": "public static T idx( Set<T> set, final T index )", "class_method_signature": "Sets.idx( Set<T> set, final T index )", "testcase": false, "constructor": false}, {"identifier": "after", "parameters": "( NavigableSet<T> set, final T index )", "modifiers": "public static", "return": "T", "signature": "T after( NavigableSet<T> set, final T index )", "full_signature": "public static T after( NavigableSet<T> set, final T index )", "class_method_signature": "Sets.after( NavigableSet<T> set, final T index )", "testcase": false, "constructor": false}, {"identifier": "before", "parameters": "( NavigableSet<T> set, final T index )", "modifiers": "public static", "return": "T", "signature": "T before( NavigableSet<T> set, final T index )", "full_signature": "public static T before( NavigableSet<T> set, final T index )", "class_method_signature": "Sets.before( NavigableSet<T> set, final T index )", "testcase": false, "constructor": false}, {"identifier": "slc", "parameters": "( NavigableSet<V> set, V startIndex, V endIndex )", "modifiers": "public static", "return": "SortedSet<V>", "signature": "SortedSet<V> slc( NavigableSet<V> set, V startIndex, V endIndex )", "full_signature": "public static SortedSet<V> slc( NavigableSet<V> set, V startIndex, V endIndex )", "class_method_signature": "Sets.slc( NavigableSet<V> set, V startIndex, V endIndex )", "testcase": false, "constructor": false}, {"identifier": "slcEnd", "parameters": "( NavigableSet<V> set, V fromIndex )", "modifiers": "public static", "return": "SortedSet<V>", "signature": "SortedSet<V> slcEnd( NavigableSet<V> set, V fromIndex )", "full_signature": "public static SortedSet<V> slcEnd( NavigableSet<V> set, V fromIndex )", "class_method_signature": "Sets.slcEnd( NavigableSet<V> set, V fromIndex )", "testcase": false, "constructor": false}, {"identifier": "slc", "parameters": "( NavigableSet<V> set, V toIndex )", "modifiers": "public static", "return": "SortedSet<V>", "signature": "SortedSet<V> slc( NavigableSet<V> set, V toIndex )", "full_signature": "public static SortedSet<V> slc( NavigableSet<V> set, V toIndex )", "class_method_signature": "Sets.slc( NavigableSet<V> set, V toIndex )", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( HashSet<V> collection )", "modifiers": "public static", "return": "Set<V>", "signature": "Set<V> copy( HashSet<V> collection )", "full_signature": "public static Set<V> copy( HashSet<V> collection )", "class_method_signature": "Sets.copy( HashSet<V> collection )", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( TreeSet<V> collection )", "modifiers": "public static", "return": "NavigableSet<V>", "signature": "NavigableSet<V> copy( TreeSet<V> collection )", "full_signature": "public static NavigableSet<V> copy( TreeSet<V> collection )", "class_method_signature": "Sets.copy( TreeSet<V> collection )", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( CopyOnWriteArraySet<V> collection )", "modifiers": "public static", "return": "Set<V>", "signature": "Set<V> copy( CopyOnWriteArraySet<V> collection )", "full_signature": "public static Set<V> copy( CopyOnWriteArraySet<V> collection )", "class_method_signature": "Sets.copy( CopyOnWriteArraySet<V> collection )", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( ConcurrentSkipListSet<V> collection )", "modifiers": "public static", "return": "NavigableSet<V>", "signature": "NavigableSet<V> copy( ConcurrentSkipListSet<V> collection )", "full_signature": "public static NavigableSet<V> copy( ConcurrentSkipListSet<V> collection )", "class_method_signature": "Sets.copy( ConcurrentSkipListSet<V> collection )", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( NavigableSet<V> collection )", "modifiers": "public static", "return": "NavigableSet<V>", "signature": "NavigableSet<V> copy( NavigableSet<V> collection )", "full_signature": "public static NavigableSet<V> copy( NavigableSet<V> collection )", "class_method_signature": "Sets.copy( NavigableSet<V> collection )", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( Set<V> collection )", "modifiers": "public static", "return": "Set<V>", "signature": "Set<V> copy( Set<V> collection )", "full_signature": "public static Set<V> copy( Set<V> collection )", "class_method_signature": "Sets.copy( Set<V> collection )", "testcase": false, "constructor": false}, {"identifier": "deepCopy", "parameters": "( Collection<V> collection )", "modifiers": "public static", "return": "Set<V>", "signature": "Set<V> deepCopy( Collection<V> collection )", "full_signature": "public static Set<V> deepCopy( Collection<V> collection )", "class_method_signature": "Sets.deepCopy( Collection<V> collection )", "testcase": false, "constructor": false}, {"identifier": "deepCopyToSet", "parameters": "( Collection<V> src,  Set<V> dst)", "modifiers": "public static", "return": "Set<V>", "signature": "Set<V> deepCopyToSet( Collection<V> src,  Set<V> dst)", "full_signature": "public static Set<V> deepCopyToSet( Collection<V> src,  Set<V> dst)", "class_method_signature": "Sets.deepCopyToSet( Collection<V> src,  Set<V> dst)", "testcase": false, "constructor": false}, {"identifier": "deepCopy", "parameters": "( Collection<V> src, Class<T> dest  )", "modifiers": "public static", "return": "List<T>", "signature": "List<T> deepCopy( Collection<V> src, Class<T> dest  )", "full_signature": "public static List<T> deepCopy( Collection<V> src, Class<T> dest  )", "class_method_signature": "Sets.deepCopy( Collection<V> src, Class<T> dest  )", "testcase": false, "constructor": false}, {"identifier": "deepCopy", "parameters": "( Set<V> set )", "modifiers": "public static", "return": "Set<V>", "signature": "Set<V> deepCopy( Set<V> set )", "full_signature": "public static Set<V> deepCopy( Set<V> set )", "class_method_signature": "Sets.deepCopy( Set<V> set )", "testcase": false, "constructor": false}, {"identifier": "toListOfMaps", "parameters": "( Set<?> set )", "modifiers": "public static", "return": "List<Map<String, Object>>", "signature": "List<Map<String, Object>> toListOfMaps( Set<?> set )", "full_signature": "public static List<Map<String, Object>> toListOfMaps( Set<?> set )", "class_method_signature": "Sets.toListOfMaps( Set<?> set )", "testcase": false, "constructor": false}, {"identifier": "setFromProperty", "parameters": "( Class<T> propertyType, String propertyPath, Collection<?> list )", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> setFromProperty( Class<T> propertyType, String propertyPath, Collection<?> list )", "full_signature": "public static Set<T> setFromProperty( Class<T> propertyType, String propertyPath, Collection<?> list )", "class_method_signature": "Sets.setFromProperty( Class<T> propertyType, String propertyPath, Collection<?> list )", "testcase": false, "constructor": false}, {"identifier": "setFromProperty", "parameters": "( Class<T> propertyType, String propertyPath, Iterable<?> list )", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> setFromProperty( Class<T> propertyType, String propertyPath, Iterable<?> list )", "full_signature": "public static Set<T> setFromProperty( Class<T> propertyType, String propertyPath, Iterable<?> list )", "class_method_signature": "Sets.setFromProperty( Class<T> propertyType, String propertyPath, Iterable<?> list )", "testcase": false, "constructor": false}, {"identifier": "toPrettyJson", "parameters": "(Set set)", "modifiers": "public static", "return": "String", "signature": "String toPrettyJson(Set set)", "full_signature": "public static String toPrettyJson(Set set)", "class_method_signature": "Sets.toPrettyJson(Set set)", "testcase": false, "constructor": false}], "file": "reflekt/src/main/java/io/advantageous/boon/core/Sets.java"}, "focal_method": {"identifier": "copy", "parameters": "( HashSet<V> collection )", "modifiers": "public static", "return": "Set<V>", "body": "public static <V> Set<V> copy( HashSet<V> collection ) {\n        return new LinkedHashSet<>( collection );\n    }", "signature": "Set<V> copy( HashSet<V> collection )", "full_signature": "public static Set<V> copy( HashSet<V> collection )", "class_method_signature": "Sets.copy( HashSet<V> collection )", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 33015857, "url": "https://github.com/advantageous/boon", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 18, "size": 6174, "license": "licensed"}}