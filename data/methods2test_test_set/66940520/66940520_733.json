{"test_class": {"identifier": "TextUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String STRING = \"abcdefghij\";", "modifier": "private static final", "type": "String", "declarator": "STRING = \"abcdefghij\"", "var_name": "STRING"}], "file": "dhis-2/dhis-support/dhis-support-commons/src/test/java/org/hisp/dhis/commons/util/TextUtilsTest.java"}, "test_case": {"identifier": "testRemoveLastComma", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveLastComma()\n    {\n        assertEquals( null, TextUtils.removeLastComma( null ) );\n        assertEquals( \"\", TextUtils.removeLastComma( \"\" ) );\n        assertEquals( \"tom,john\", TextUtils.removeLastComma( \"tom,john,\" ) );\n        assertEquals( \"tom, john\", TextUtils.removeLastComma( \"tom, john, \" ) );\n        assertEquals( \"tom, john\", TextUtils.removeLastComma( \"tom, john,  \" ) );\n    }", "signature": "void testRemoveLastComma()", "full_signature": "@Test public void testRemoveLastComma()", "class_method_signature": "TextUtilsTest.testRemoveLastComma()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "removeLastComma", "assertEquals", "removeLastComma", "assertEquals", "removeLastComma", "assertEquals", "removeLastComma", "assertEquals", "removeLastComma"]}, "focal_class": {"identifier": "TextUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final TextUtils INSTANCE = new TextUtils();", "modifier": "public static final", "type": "TextUtils", "declarator": "INSTANCE = new TextUtils()", "var_name": "INSTANCE"}, {"original_string": "public static final String EMPTY = \"\";", "modifier": "public static final", "type": "String", "declarator": "EMPTY = \"\"", "var_name": "EMPTY"}, {"original_string": "public static final String SPACE = \" \";", "modifier": "public static final", "type": "String", "declarator": "SPACE = \" \"", "var_name": "SPACE"}, {"original_string": "public static final String SEP = \"-\";", "modifier": "public static final", "type": "String", "declarator": "SEP = \"-\"", "var_name": "SEP"}, {"original_string": "public static final String LN = System.getProperty( \"line.separator\" );", "modifier": "public static final", "type": "String", "declarator": "LN = System.getProperty( \"line.separator\" )", "var_name": "LN"}, {"original_string": "public static final String SEMICOLON = \";\";", "modifier": "public static final", "type": "String", "declarator": "SEMICOLON = \";\"", "var_name": "SEMICOLON"}, {"original_string": "private static final Pattern LINK_PATTERN = Pattern.compile( \"((http://|https://|www\\\\.).+?)($|\\\\n|\\\\r|\\\\r\\\\n| )\" );", "modifier": "private static final", "type": "Pattern", "declarator": "LINK_PATTERN = Pattern.compile( \"((http://|https://|www\\\\.).+?)($|\\\\n|\\\\r|\\\\r\\\\n| )\" )", "var_name": "LINK_PATTERN"}, {"original_string": "private static final String DELIMITER = \", \";", "modifier": "private static final", "type": "String", "declarator": "DELIMITER = \", \"", "var_name": "DELIMITER"}, {"original_string": "private static final String OPTION_SEP = \";\";", "modifier": "private static final", "type": "String", "declarator": "OPTION_SEP = \";\"", "var_name": "OPTION_SEP"}], "methods": [{"identifier": "htmlify", "parameters": "( String text )", "modifiers": "public static", "return": "String", "signature": "String htmlify( String text )", "full_signature": "public static String htmlify( String text )", "class_method_signature": "TextUtils.htmlify( String text )", "testcase": false, "constructor": false}, {"identifier": "htmlLinks", "parameters": "( String text )", "modifiers": "public static", "return": "String", "signature": "String htmlLinks( String text )", "full_signature": "public static String htmlLinks( String text )", "class_method_signature": "TextUtils.htmlLinks( String text )", "testcase": false, "constructor": false}, {"identifier": "htmlNewline", "parameters": "( String text )", "modifiers": "public static", "return": "String", "signature": "String htmlNewline( String text )", "full_signature": "public static String htmlNewline( String text )", "class_method_signature": "TextUtils.htmlNewline( String text )", "testcase": false, "constructor": false}, {"identifier": "getTokens", "parameters": "( String string )", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getTokens( String string )", "full_signature": "public static List<String> getTokens( String string )", "class_method_signature": "TextUtils.getTokens( String string )", "testcase": false, "constructor": false}, {"identifier": "subString", "parameters": "( String string, int beginIndex, int length )", "modifiers": "public static", "return": "String", "signature": "String subString( String string, int beginIndex, int length )", "full_signature": "public static String subString( String string, int beginIndex, int length )", "class_method_signature": "TextUtils.subString( String string, int beginIndex, int length )", "testcase": false, "constructor": false}, {"identifier": "removeLastOr", "parameters": "( String string )", "modifiers": "public static", "return": "String", "signature": "String removeLastOr( String string )", "full_signature": "public static String removeLastOr( String string )", "class_method_signature": "TextUtils.removeLastOr( String string )", "testcase": false, "constructor": false}, {"identifier": "removeLastAnd", "parameters": "( String string )", "modifiers": "public static", "return": "String", "signature": "String removeLastAnd( String string )", "full_signature": "public static String removeLastAnd( String string )", "class_method_signature": "TextUtils.removeLastAnd( String string )", "testcase": false, "constructor": false}, {"identifier": "removeLastComma", "parameters": "( String string )", "modifiers": "public static", "return": "String", "signature": "String removeLastComma( String string )", "full_signature": "public static String removeLastComma( String string )", "class_method_signature": "TextUtils.removeLastComma( String string )", "testcase": false, "constructor": false}, {"identifier": "removeLast", "parameters": "( String string, String remove )", "modifiers": "public static", "return": "String", "signature": "String removeLast( String string, String remove )", "full_signature": "public static String removeLast( String string, String remove )", "class_method_signature": "TextUtils.removeLast( String string, String remove )", "testcase": false, "constructor": false}, {"identifier": "removeNewlines", "parameters": "( String string )", "modifiers": "public static", "return": "String", "signature": "String removeNewlines( String string )", "full_signature": "public static String removeNewlines( String string )", "class_method_signature": "TextUtils.removeNewlines( String string )", "testcase": false, "constructor": false}, {"identifier": "trimEnd", "parameters": "( String value, int length )", "modifiers": "public static", "return": "String", "signature": "String trimEnd( String value, int length )", "full_signature": "public static String trimEnd( String value, int length )", "class_method_signature": "TextUtils.trimEnd( String value, int length )", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "( String string, boolean emptyString )", "modifiers": "public static", "return": "String", "signature": "String getString( String string, boolean emptyString )", "full_signature": "public static String getString( String string, boolean emptyString )", "class_method_signature": "TextUtils.getString( String string, boolean emptyString )", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "( List<T> list, String separator, T nullReplacement )", "modifiers": "public static", "return": "String", "signature": "String join( List<T> list, String separator, T nullReplacement )", "full_signature": "public static String join( List<T> list, String separator, T nullReplacement )", "class_method_signature": "TextUtils.join( List<T> list, String separator, T nullReplacement )", "testcase": false, "constructor": false}, {"identifier": "joinHyphen", "parameters": "( T... elements )", "modifiers": "@SafeVarargs public static", "return": "String", "signature": "String joinHyphen( T... elements )", "full_signature": "@SafeVarargs public static String joinHyphen( T... elements )", "class_method_signature": "TextUtils.joinHyphen( T... elements )", "testcase": false, "constructor": false}, {"identifier": "getCommaDelimitedString", "parameters": "( Collection<?> elements )", "modifiers": "public static", "return": "String", "signature": "String getCommaDelimitedString( Collection<?> elements )", "full_signature": "public static String getCommaDelimitedString( Collection<?> elements )", "class_method_signature": "TextUtils.getCommaDelimitedString( Collection<?> elements )", "testcase": false, "constructor": false}, {"identifier": "getCommaDelimitedString", "parameters": "( Collection<?> elements, boolean delimitPrefix, boolean delimitSuffix )", "modifiers": "public static", "return": "String", "signature": "String getCommaDelimitedString( Collection<?> elements, boolean delimitPrefix, boolean delimitSuffix )", "full_signature": "public static String getCommaDelimitedString( Collection<?> elements, boolean delimitPrefix, boolean delimitSuffix )", "class_method_signature": "TextUtils.getCommaDelimitedString( Collection<?> elements, boolean delimitPrefix, boolean delimitSuffix )", "testcase": false, "constructor": false}, {"identifier": "getQuotedCommaDelimitedString", "parameters": "( Collection<? extends Object> elements )", "modifiers": "public static", "return": "String", "signature": "String getQuotedCommaDelimitedString( Collection<? extends Object> elements )", "full_signature": "public static String getQuotedCommaDelimitedString( Collection<? extends Object> elements )", "class_method_signature": "TextUtils.getQuotedCommaDelimitedString( Collection<? extends Object> elements )", "testcase": false, "constructor": false}, {"identifier": "equalsNullSafe", "parameters": "( String s1, String s2 )", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsNullSafe( String s1, String s2 )", "full_signature": "public static boolean equalsNullSafe( String s1, String s2 )", "class_method_signature": "TextUtils.equalsNullSafe( String s1, String s2 )", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "( Boolean value )", "modifiers": "public static", "return": "String", "signature": "String valueOf( Boolean value )", "full_signature": "public static String valueOf( Boolean value )", "class_method_signature": "TextUtils.valueOf( Boolean value )", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "( String value )", "modifiers": "public static", "return": "Boolean", "signature": "Boolean valueOf( String value )", "full_signature": "public static Boolean valueOf( String value )", "class_method_signature": "TextUtils.valueOf( String value )", "testcase": false, "constructor": false}, {"identifier": "lower", "parameters": "( String string )", "modifiers": "public static", "return": "String", "signature": "String lower( String string )", "full_signature": "public static String lower( String string )", "class_method_signature": "TextUtils.lower( String string )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "( String[] array, String separator )", "modifiers": "public static", "return": "String", "signature": "String toString( String[] array, String separator )", "full_signature": "public static String toString( String[] array, String separator )", "class_method_signature": "TextUtils.toString( String[] array, String separator )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "( Object object )", "modifiers": "public static", "return": "String", "signature": "String toString( Object object )", "full_signature": "public static String toString( Object object )", "class_method_signature": "TextUtils.toString( Object object )", "testcase": false, "constructor": false}, {"identifier": "emptyIfEqual", "parameters": "( String string, String test )", "modifiers": "public static", "return": "String", "signature": "String emptyIfEqual( String string, String test )", "full_signature": "public static String emptyIfEqual( String string, String test )", "class_method_signature": "TextUtils.emptyIfEqual( String string, String test )", "testcase": false, "constructor": false}, {"identifier": "emptyIfFalse", "parameters": "( String string, boolean test )", "modifiers": "public static", "return": "String", "signature": "String emptyIfFalse( String string, boolean test )", "full_signature": "public static String emptyIfFalse( String string, boolean test )", "class_method_signature": "TextUtils.emptyIfFalse( String string, boolean test )", "testcase": false, "constructor": false}, {"identifier": "appendTail", "parameters": "( Matcher matcher, StringBuffer sb )", "modifiers": "public static", "return": "String", "signature": "String appendTail( Matcher matcher, StringBuffer sb )", "full_signature": "public static String appendTail( Matcher matcher, StringBuffer sb )", "class_method_signature": "TextUtils.appendTail( Matcher matcher, StringBuffer sb )", "testcase": false, "constructor": false}, {"identifier": "getPrettyClassName", "parameters": "( Class<?> clazz )", "modifiers": "public static", "return": "String", "signature": "String getPrettyClassName( Class<?> clazz )", "full_signature": "public static String getPrettyClassName( Class<?> clazz )", "class_method_signature": "TextUtils.getPrettyClassName( Class<?> clazz )", "testcase": false, "constructor": false}, {"identifier": "getPrettyEnumName", "parameters": "( Enum<?> enumeration )", "modifiers": "public static", "return": "String", "signature": "String getPrettyEnumName( Enum<?> enumeration )", "full_signature": "public static String getPrettyEnumName( Enum<?> enumeration )", "class_method_signature": "TextUtils.getPrettyEnumName( Enum<?> enumeration )", "testcase": false, "constructor": false}, {"identifier": "getPrettyPropertyName", "parameters": "( String property )", "modifiers": "public static", "return": "String", "signature": "String getPrettyPropertyName( String property )", "full_signature": "public static String getPrettyPropertyName( String property )", "class_method_signature": "TextUtils.getPrettyPropertyName( String property )", "testcase": false, "constructor": false}, {"identifier": "splitSafe", "parameters": "( String string, String separator, int index )", "modifiers": "public static", "return": "String", "signature": "String splitSafe( String string, String separator, int index )", "full_signature": "public static String splitSafe( String string, String separator, int index )", "class_method_signature": "TextUtils.splitSafe( String string, String separator, int index )", "testcase": false, "constructor": false}, {"identifier": "containsAnyIgnoreCase", "parameters": "( String string, Collection<String> searchStrings )", "modifiers": "public static", "return": "boolean", "signature": "boolean containsAnyIgnoreCase( String string, Collection<String> searchStrings )", "full_signature": "public static boolean containsAnyIgnoreCase( String string, Collection<String> searchStrings )", "class_method_signature": "TextUtils.containsAnyIgnoreCase( String string, Collection<String> searchStrings )", "testcase": false, "constructor": false}, {"identifier": "splitToArray", "parameters": "( String value, String separator )", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> splitToArray( String value, String separator )", "full_signature": "public static Set<String> splitToArray( String value, String separator )", "class_method_signature": "TextUtils.splitToArray( String value, String separator )", "testcase": false, "constructor": false}, {"identifier": "replaceFirst", "parameters": "( String string, final String regex, final String replacement, final int occurrences )", "modifiers": "public static", "return": "String", "signature": "String replaceFirst( String string, final String regex, final String replacement, final int occurrences )", "full_signature": "public static String replaceFirst( String string, final String regex, final String replacement, final int occurrences )", "class_method_signature": "TextUtils.replaceFirst( String string, final String regex, final String replacement, final int occurrences )", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "( String string, String... symbolReplacementPairs )", "modifiers": "public static", "return": "String", "signature": "String replace( String string, String... symbolReplacementPairs )", "full_signature": "public static String replace( String string, String... symbolReplacementPairs )", "class_method_signature": "TextUtils.replace( String string, String... symbolReplacementPairs )", "testcase": false, "constructor": false}, {"identifier": "getOptions", "parameters": "( String param )", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getOptions( String param )", "full_signature": "public static List<String> getOptions( String param )", "class_method_signature": "TextUtils.getOptions( String param )", "testcase": false, "constructor": false}, {"identifier": "createRegexFromGlob", "parameters": "( String glob )", "modifiers": "public static", "return": "String", "signature": "String createRegexFromGlob( String glob )", "full_signature": "public static String createRegexFromGlob( String glob )", "class_method_signature": "TextUtils.createRegexFromGlob( String glob )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-support/dhis-support-commons/src/main/java/org/hisp/dhis/commons/util/TextUtils.java"}, "focal_method": {"identifier": "removeLastComma", "parameters": "( String string )", "modifiers": "public static", "return": "String", "body": "public static String removeLastComma( String string )\n    {\n        string = StringUtils.stripEnd( string, \" \" );\n\n        return StringUtils.removeEndIgnoreCase( string, \",\" );\n    }", "signature": "String removeLastComma( String string )", "full_signature": "public static String removeLastComma( String string )", "class_method_signature": "TextUtils.removeLastComma( String string )", "testcase": false, "constructor": false, "invocations": ["stripEnd", "removeEndIgnoreCase"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}