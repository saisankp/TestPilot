{"test_class": {"identifier": "DetectInstrumentTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-fu-operator/src/test/java/org/esa/s3tbx/fu/DetectInstrumentTest.java"}, "test_case": {"identifier": "testOLCI", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOLCI() {\n        Product product = new Product(\"dummy\", \"dummy\", 2, 2);\n        product.addBand(\"Oa01_reflectance\", ProductData.TYPE_INT8);\n        product.addBand(\"Oa02_reflectance\", ProductData.TYPE_INT8);\n        product.addBand(\"Oa03_reflectance\", ProductData.TYPE_INT8);\n        product.addBand(\"Oa04_reflectance\", ProductData.TYPE_INT8);\n        product.addBand(\"Oa05_reflectance\", ProductData.TYPE_INT8);\n        product.addBand(\"Oa06_reflectance\", ProductData.TYPE_INT8);\n        product.addBand(\"Oa07_reflectance\", ProductData.TYPE_INT8);\n        assertEquals(Instrument.OLCI, DetectInstrument.getInstrument(product));\n    }", "signature": "void testOLCI()", "full_signature": "@Test public void testOLCI()", "class_method_signature": "DetectInstrumentTest.testOLCI()", "testcase": true, "constructor": false, "invocations": ["addBand", "addBand", "addBand", "addBand", "addBand", "addBand", "addBand", "assertEquals", "getInstrument"]}, "focal_class": {"identifier": "DetectInstrument", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String GLOBAL_ATTRIBUTES = \"Global_Attributes\";", "modifier": "private static final", "type": "String", "declarator": "GLOBAL_ATTRIBUTES = \"Global_Attributes\"", "var_name": "GLOBAL_ATTRIBUTES"}, {"original_string": "private static final String SEAWIFS_TITLE = \"SeaWiFS Level-2 Data\";", "modifier": "private static final", "type": "String", "declarator": "SEAWIFS_TITLE = \"SeaWiFS Level-2 Data\"", "var_name": "SEAWIFS_TITLE"}, {"original_string": "private static final String CZCS_TITLE = \"CZCS Level-2 Data\";", "modifier": "private static final", "type": "String", "declarator": "CZCS_TITLE = \"CZCS Level-2 Data\"", "var_name": "CZCS_TITLE"}, {"original_string": "private static final String MODIS_TITLE_VALUE = \"HMODISA Level-2 Data\";", "modifier": "private static final", "type": "String", "declarator": "MODIS_TITLE_VALUE = \"HMODISA Level-2 Data\"", "var_name": "MODIS_TITLE_VALUE"}, {"original_string": "private static final String MODIS_1KM_RESOLUTION_VALUE = \"1 km\";", "modifier": "private static final", "type": "String", "declarator": "MODIS_1KM_RESOLUTION_VALUE = \"1 km\"", "var_name": "MODIS_1KM_RESOLUTION_VALUE"}, {"original_string": "private static final String OLCI_PRODUCT_TYPE_START = \"OL_2\";", "modifier": "private static final", "type": "String", "declarator": "OLCI_PRODUCT_TYPE_START = \"OL_2\"", "var_name": "OLCI_PRODUCT_TYPE_START"}, {"original_string": "private static final String OLCI_L2_BANDNAME_PATTERN = \"Oa\\\\d+_reflectance\";", "modifier": "private static final", "type": "String", "declarator": "OLCI_L2_BANDNAME_PATTERN = \"Oa\\\\d+_reflectance\"", "var_name": "OLCI_L2_BANDNAME_PATTERN"}, {"original_string": "private static final String MERIS_L2_TYPE_PATTER = \"MER_..._2P\";", "modifier": "private static final", "type": "String", "declarator": "MERIS_L2_TYPE_PATTER = \"MER_..._2P\"", "var_name": "MERIS_L2_TYPE_PATTER"}], "methods": [{"identifier": "getInstrument", "parameters": "(Product product)", "modifiers": "static", "return": "Instrument", "signature": "Instrument getInstrument(Product product)", "full_signature": "static Instrument getInstrument(Product product)", "class_method_signature": "DetectInstrument.getInstrument(Product product)", "testcase": false, "constructor": false}, {"identifier": "meris", "parameters": "(Product product)", "modifiers": "private static", "return": "boolean", "signature": "boolean meris(Product product)", "full_signature": "private static boolean meris(Product product)", "class_method_signature": "DetectInstrument.meris(Product product)", "testcase": false, "constructor": false}, {"identifier": "modis1km", "parameters": "(Product product)", "modifiers": "private static", "return": "boolean", "signature": "boolean modis1km(Product product)", "full_signature": "private static boolean modis1km(Product product)", "class_method_signature": "DetectInstrument.modis1km(Product product)", "testcase": false, "constructor": false}, {"identifier": "modis500m", "parameters": "(Product product)", "modifiers": "private static", "return": "boolean", "signature": "boolean modis500m(Product product)", "full_signature": "private static boolean modis500m(Product product)", "class_method_signature": "DetectInstrument.modis500m(Product product)", "testcase": false, "constructor": false}, {"identifier": "hasModisResultion", "parameters": "(MetadataElement globalAttributes, String modis500mResolutionValue)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasModisResultion(MetadataElement globalAttributes, String modis500mResolutionValue)", "full_signature": "private static boolean hasModisResultion(MetadataElement globalAttributes, String modis500mResolutionValue)", "class_method_signature": "DetectInstrument.hasModisResultion(MetadataElement globalAttributes, String modis500mResolutionValue)", "testcase": false, "constructor": false}, {"identifier": "isModis", "parameters": "(MetadataElement globalAttributes)", "modifiers": "private static", "return": "boolean", "signature": "boolean isModis(MetadataElement globalAttributes)", "full_signature": "private static boolean isModis(MetadataElement globalAttributes)", "class_method_signature": "DetectInstrument.isModis(MetadataElement globalAttributes)", "testcase": false, "constructor": false}, {"identifier": "olci", "parameters": "(Product product)", "modifiers": "private static", "return": "boolean", "signature": "boolean olci(Product product)", "full_signature": "private static boolean olci(Product product)", "class_method_signature": "DetectInstrument.olci(Product product)", "testcase": false, "constructor": false}, {"identifier": "s2msi", "parameters": "(Product product)", "modifiers": "private static", "return": "boolean", "signature": "boolean s2msi(Product product)", "full_signature": "private static boolean s2msi(Product product)", "class_method_signature": "DetectInstrument.s2msi(Product product)", "testcase": false, "constructor": false}, {"identifier": "seawifs", "parameters": "(Product product)", "modifiers": "private static", "return": "boolean", "signature": "boolean seawifs(Product product)", "full_signature": "private static boolean seawifs(Product product)", "class_method_signature": "DetectInstrument.seawifs(Product product)", "testcase": false, "constructor": false}, {"identifier": "czcs", "parameters": "(Product product)", "modifiers": "private static", "return": "boolean", "signature": "boolean czcs(Product product)", "full_signature": "private static boolean czcs(Product product)", "class_method_signature": "DetectInstrument.czcs(Product product)", "testcase": false, "constructor": false}], "file": "s3tbx-fu-operator/src/main/java/org/esa/s3tbx/fu/DetectInstrument.java"}, "focal_method": {"identifier": "olci", "parameters": "(Product product)", "modifiers": "private static", "return": "boolean", "body": "private static boolean olci(Product product) {\n        boolean isOLCI = false;\n        List<Band> collect = Stream.of(product.getBands()).filter(p -> p.getName().matches(OLCI_L2_BANDNAME_PATTERN)).collect(Collectors.toList());\n        boolean checkByType = product.getProductType().contains(OLCI_PRODUCT_TYPE_START);\n        if (collect.size() > 0 || checkByType) {\n            isOLCI = true;\n        }\n        return isOLCI;\n    }", "signature": "boolean olci(Product product)", "full_signature": "private static boolean olci(Product product)", "class_method_signature": "DetectInstrument.olci(Product product)", "testcase": false, "constructor": false, "invocations": ["collect", "filter", "of", "getBands", "matches", "getName", "toList", "contains", "getProductType", "size"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}