{"test_class": {"identifier": "AuthenticationDataValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final AuthenticationDataValidator target = new AuthenticationDataValidator();", "modifier": "private final", "type": "AuthenticationDataValidator", "declarator": "target = new AuthenticationDataValidator()", "var_name": "target"}], "file": "webauthn4j-core/src/test/java/com/webauthn4j/validator/AuthenticationDataValidatorTest.java"}, "test_case": {"identifier": "validateAuthenticatorData_with_non_null_AttestedCredentialData", "parameters": "(@Mock AuthenticatorData<AuthenticationExtensionAuthenticatorOutput> authenticatorData)", "modifiers": "@Test", "return": "void", "body": "@Test\n    void validateAuthenticatorData_with_non_null_AttestedCredentialData(@Mock AuthenticatorData<AuthenticationExtensionAuthenticatorOutput> authenticatorData) {\n        AttestedCredentialData attestedCredentialData = mock(AttestedCredentialData.class);\n        when(authenticatorData.getAttestedCredentialData()).thenReturn(attestedCredentialData);\n        assertThatThrownBy(() -> target.validateAuthenticatorData(authenticatorData)).isInstanceOf(ConstraintViolationException.class);\n    }", "signature": "void validateAuthenticatorData_with_non_null_AttestedCredentialData(@Mock AuthenticatorData<AuthenticationExtensionAuthenticatorOutput> authenticatorData)", "full_signature": "@Test void validateAuthenticatorData_with_non_null_AttestedCredentialData(@Mock AuthenticatorData<AuthenticationExtensionAuthenticatorOutput> authenticatorData)", "class_method_signature": "AuthenticationDataValidatorTest.validateAuthenticatorData_with_non_null_AttestedCredentialData(@Mock AuthenticatorData<AuthenticationExtensionAuthenticatorOutput> authenticatorData)", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getAttestedCredentialData", "isInstanceOf", "assertThatThrownBy", "validateAuthenticatorData"]}, "focal_class": {"identifier": "AuthenticationDataValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ChallengeValidator challengeValidator = new ChallengeValidator();", "modifier": "private final", "type": "ChallengeValidator", "declarator": "challengeValidator = new ChallengeValidator()", "var_name": "challengeValidator"}, {"original_string": "private final OriginValidator originValidator = new OriginValidator();", "modifier": "private final", "type": "OriginValidator", "declarator": "originValidator = new OriginValidator()", "var_name": "originValidator"}, {"original_string": "private final TokenBindingValidator tokenBindingValidator = new TokenBindingValidator();", "modifier": "private final", "type": "TokenBindingValidator", "declarator": "tokenBindingValidator = new TokenBindingValidator()", "var_name": "tokenBindingValidator"}, {"original_string": "private final RpIdHashValidator rpIdHashValidator = new RpIdHashValidator();", "modifier": "private final", "type": "RpIdHashValidator", "declarator": "rpIdHashValidator = new RpIdHashValidator()", "var_name": "rpIdHashValidator"}, {"original_string": "private final AssertionSignatureValidator assertionSignatureValidator = new AssertionSignatureValidator();", "modifier": "private final", "type": "AssertionSignatureValidator", "declarator": "assertionSignatureValidator = new AssertionSignatureValidator()", "var_name": "assertionSignatureValidator"}, {"original_string": "private final ClientExtensionValidator clientExtensionValidator = new ClientExtensionValidator();", "modifier": "private final", "type": "ClientExtensionValidator", "declarator": "clientExtensionValidator = new ClientExtensionValidator()", "var_name": "clientExtensionValidator"}, {"original_string": "private final AuthenticatorExtensionValidator authenticatorExtensionValidator = new AuthenticatorExtensionValidator();", "modifier": "private final", "type": "AuthenticatorExtensionValidator", "declarator": "authenticatorExtensionValidator = new AuthenticatorExtensionValidator()", "var_name": "authenticatorExtensionValidator"}, {"original_string": "private final List<CustomAuthenticationValidator> customAuthenticationValidators;", "modifier": "private final", "type": "List<CustomAuthenticationValidator>", "declarator": "customAuthenticationValidators", "var_name": "customAuthenticationValidators"}, {"original_string": "private CoreMaliciousCounterValueHandler maliciousCounterValueHandler = new DefaultCoreMaliciousCounterValueHandler();", "modifier": "private", "type": "CoreMaliciousCounterValueHandler", "declarator": "maliciousCounterValueHandler = new DefaultCoreMaliciousCounterValueHandler()", "var_name": "maliciousCounterValueHandler"}], "methods": [{"identifier": "AuthenticationDataValidator", "parameters": "(List<CustomAuthenticationValidator> customAuthenticationValidators)", "modifiers": "public", "return": "", "signature": " AuthenticationDataValidator(List<CustomAuthenticationValidator> customAuthenticationValidators)", "full_signature": "public  AuthenticationDataValidator(List<CustomAuthenticationValidator> customAuthenticationValidators)", "class_method_signature": "AuthenticationDataValidator.AuthenticationDataValidator(List<CustomAuthenticationValidator> customAuthenticationValidators)", "testcase": false, "constructor": true}, {"identifier": "AuthenticationDataValidator", "parameters": "()", "modifiers": "public", "return": "", "signature": " AuthenticationDataValidator()", "full_signature": "public  AuthenticationDataValidator()", "class_method_signature": "AuthenticationDataValidator.AuthenticationDataValidator()", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(AuthenticationData authenticationData, AuthenticationParameters authenticationParameters)", "modifiers": "@SuppressWarnings(\"deprecation\") public", "return": "void", "signature": "void validate(AuthenticationData authenticationData, AuthenticationParameters authenticationParameters)", "full_signature": "@SuppressWarnings(\"deprecation\") public void validate(AuthenticationData authenticationData, AuthenticationParameters authenticationParameters)", "class_method_signature": "AuthenticationDataValidator.validate(AuthenticationData authenticationData, AuthenticationParameters authenticationParameters)", "testcase": false, "constructor": false}, {"identifier": "validateAuthenticatorData", "parameters": "(AuthenticatorData<AuthenticationExtensionAuthenticatorOutput> authenticatorData)", "modifiers": "", "return": "void", "signature": "void validateAuthenticatorData(AuthenticatorData<AuthenticationExtensionAuthenticatorOutput> authenticatorData)", "full_signature": " void validateAuthenticatorData(AuthenticatorData<AuthenticationExtensionAuthenticatorOutput> authenticatorData)", "class_method_signature": "AuthenticationDataValidator.validateAuthenticatorData(AuthenticatorData<AuthenticationExtensionAuthenticatorOutput> authenticatorData)", "testcase": false, "constructor": false}, {"identifier": "getMaliciousCounterValueHandler", "parameters": "()", "modifiers": "public", "return": "CoreMaliciousCounterValueHandler", "signature": "CoreMaliciousCounterValueHandler getMaliciousCounterValueHandler()", "full_signature": "public CoreMaliciousCounterValueHandler getMaliciousCounterValueHandler()", "class_method_signature": "AuthenticationDataValidator.getMaliciousCounterValueHandler()", "testcase": false, "constructor": false}, {"identifier": "setMaliciousCounterValueHandler", "parameters": "(CoreMaliciousCounterValueHandler maliciousCounterValueHandler)", "modifiers": "public", "return": "void", "signature": "void setMaliciousCounterValueHandler(CoreMaliciousCounterValueHandler maliciousCounterValueHandler)", "full_signature": "public void setMaliciousCounterValueHandler(CoreMaliciousCounterValueHandler maliciousCounterValueHandler)", "class_method_signature": "AuthenticationDataValidator.setMaliciousCounterValueHandler(CoreMaliciousCounterValueHandler maliciousCounterValueHandler)", "testcase": false, "constructor": false}, {"identifier": "getCustomAuthenticationValidators", "parameters": "()", "modifiers": "public", "return": "List<CustomAuthenticationValidator>", "signature": "List<CustomAuthenticationValidator> getCustomAuthenticationValidators()", "full_signature": "public List<CustomAuthenticationValidator> getCustomAuthenticationValidators()", "class_method_signature": "AuthenticationDataValidator.getCustomAuthenticationValidators()", "testcase": false, "constructor": false}], "file": "webauthn4j-core/src/main/java/com/webauthn4j/validator/AuthenticationDataValidator.java"}, "focal_method": {"identifier": "validateAuthenticatorData", "parameters": "(AuthenticatorData<AuthenticationExtensionAuthenticatorOutput> authenticatorData)", "modifiers": "", "return": "void", "body": "void validateAuthenticatorData(AuthenticatorData<AuthenticationExtensionAuthenticatorOutput> authenticatorData) {\n        if (authenticatorData.getAttestedCredentialData() != null) {\n            throw new ConstraintViolationException(\"attestedCredentialData must be null on authentication\");\n        }\n    }", "signature": "void validateAuthenticatorData(AuthenticatorData<AuthenticationExtensionAuthenticatorOutput> authenticatorData)", "full_signature": " void validateAuthenticatorData(AuthenticatorData<AuthenticationExtensionAuthenticatorOutput> authenticatorData)", "class_method_signature": "AuthenticationDataValidator.validateAuthenticatorData(AuthenticatorData<AuthenticationExtensionAuthenticatorOutput> authenticatorData)", "testcase": false, "constructor": false, "invocations": ["getAttestedCredentialData"]}, "repository": {"repo_id": 134147639, "url": "https://github.com/webauthn4j/webauthn4j", "stars": 101, "created": "5/20/2018 12:14:36 PM +00:00", "updates": "2020-01-27T13:01:46+00:00", "fork": "False", "license": "licensed"}}