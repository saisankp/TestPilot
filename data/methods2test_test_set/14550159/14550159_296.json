{"test_class": {"identifier": "IOHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private byte[] testContent;", "modifier": "private", "type": "byte[]", "declarator": "testContent", "var_name": "testContent"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/IOHelperTest.java"}, "test_case": {"identifier": "buffersGivenInputStreamInMemoryWhenLengthExceedsThreshold", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void buffersGivenInputStreamInMemoryWhenLengthExceedsThreshold() throws Exception {\n        InputStream inputStream = new ByteArrayInputStream(testContent);\n        InputStream bufferedStream = IOHelper.bufferStream(inputStream, testContent.length - 1);\n\n        assertTrue(bufferedStream instanceof FileInputStream);\n        try {\n            assertArrayEquals(testContent, ByteStreams.toByteArray(bufferedStream));\n        } finally {\n            bufferedStream.close();\n        }\n    }", "signature": "void buffersGivenInputStreamInMemoryWhenLengthExceedsThreshold()", "full_signature": "@Test public void buffersGivenInputStreamInMemoryWhenLengthExceedsThreshold()", "class_method_signature": "IOHelperTest.buffersGivenInputStreamInMemoryWhenLengthExceedsThreshold()", "testcase": true, "constructor": false, "invocations": ["bufferStream", "assertTrue", "assertArrayEquals", "toByteArray", "close"]}, "focal_class": {"identifier": "IOHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Deprecated\n    private static final String DEFAULT_CHARSET_NAME = \"UTF-8\";", "modifier": "@Deprecated\n    private static final", "type": "String", "declarator": "DEFAULT_CHARSET_NAME = \"UTF-8\"", "var_name": "DEFAULT_CHARSET_NAME"}, {"original_string": "@Deprecated\n    private static final Charset DEFAULT_CHARSET = Charset.forName(DEFAULT_CHARSET_NAME);", "modifier": "@Deprecated\n    private static final", "type": "Charset", "declarator": "DEFAULT_CHARSET = Charset.forName(DEFAULT_CHARSET_NAME)", "var_name": "DEFAULT_CHARSET"}], "methods": [{"identifier": "IOHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " IOHelper()", "full_signature": "private  IOHelper()", "class_method_signature": "IOHelper.IOHelper()", "testcase": false, "constructor": true}, {"identifier": "readString", "parameters": "(InputStream in, String cs)", "modifiers": "@Deprecated // Guava used instead in everrest-core, in other modules will be replaced with Guava also public static", "return": "String", "signature": "String readString(InputStream in, String cs)", "full_signature": "@Deprecated // Guava used instead in everrest-core, in other modules will be replaced with Guava also public static String readString(InputStream in, String cs)", "class_method_signature": "IOHelper.readString(InputStream in, String cs)", "testcase": false, "constructor": false}, {"identifier": "writeString", "parameters": "(String s, OutputStream out, String cs)", "modifiers": "@Deprecated // Guava used instead in everrest-core, in other modules will be replaced with Guava also public static", "return": "void", "signature": "void writeString(String s, OutputStream out, String cs)", "full_signature": "@Deprecated // Guava used instead in everrest-core, in other modules will be replaced with Guava also public static void writeString(String s, OutputStream out, String cs)", "class_method_signature": "IOHelper.writeString(String s, OutputStream out, String cs)", "testcase": false, "constructor": false}, {"identifier": "bufferStream", "parameters": "(InputStream in, int maxMemSize)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream bufferStream(InputStream in, int maxMemSize)", "full_signature": "public static InputStream bufferStream(InputStream in, int maxMemSize)", "class_method_signature": "IOHelper.bufferStream(InputStream in, int maxMemSize)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/IOHelper.java"}, "focal_method": {"identifier": "bufferStream", "parameters": "(InputStream in, int maxMemSize)", "modifiers": "public static", "return": "InputStream", "body": "public static InputStream bufferStream(InputStream in, int maxMemSize) throws IOException {\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        byte[] buffer = new byte[8192];\n        int bytesNum;\n        boolean overflow = false;\n        while ((!overflow) && (bytesNum = in.read(buffer)) != -1) {\n            bos.write(buffer, 0, bytesNum);\n            overflow = bos.size() > maxMemSize;\n        }\n\n        if (overflow) {\n            File file = FileCollector.getInstance().createFile();\n            try (FileOutputStream fos = new FileOutputStream(file)) {\n                bos.writeTo(fos);\n                while ((bytesNum = in.read(buffer)) != -1) {\n                    fos.write(buffer, 0, bytesNum);\n                }\n            }\n            return new DeleteOnCloseFIS(file);\n        }\n        return new ByteArrayInputStream(bos.toByteArray());\n    }", "signature": "InputStream bufferStream(InputStream in, int maxMemSize)", "full_signature": "public static InputStream bufferStream(InputStream in, int maxMemSize)", "class_method_signature": "IOHelper.bufferStream(InputStream in, int maxMemSize)", "testcase": false, "constructor": false, "invocations": ["read", "write", "size", "createFile", "getInstance", "writeTo", "read", "write", "toByteArray"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}