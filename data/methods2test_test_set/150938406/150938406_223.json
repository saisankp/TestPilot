{"test_class": {"identifier": "VectorUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/common/linalg/VectorUtilTest.java"}, "test_case": {"identifier": "testParseSparse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testParseSparse() {\n\t\tSparseVector vec1 = VectorUtil.parseSparse(\"0:1 2:-3\");\n\t\tSparseVector vec3 = VectorUtil.parseSparse(\"$4$0:1 2:-3\");\n\t\tSparseVector vec4 = VectorUtil.parseSparse(\"$4$\");\n\t\tSparseVector vec5 = VectorUtil.parseSparse(\"\");\n\t\tAssert.assertEquals(vec1.get(0), 1., 0.);\n\t\tAssert.assertEquals(vec1.get(2), -3., 0.);\n\t\tAssert.assertArrayEquals(vec3.toDenseVector().getData(), new double[]{1, 0, -3, 0}, 0);\n\t\tAssert.assertEquals(vec3.size(), 4);\n\t\tAssert.assertArrayEquals(vec4.toDenseVector().getData(), new double[]{0, 0, 0, 0}, 0);\n\t\tAssert.assertEquals(vec4.size(), 4);\n\t\tAssert.assertEquals(vec5.size(), -1);\n\t}", "signature": "void testParseSparse()", "full_signature": "@Test public void testParseSparse()", "class_method_signature": "VectorUtilTest.testParseSparse()", "testcase": true, "constructor": false, "invocations": ["parseSparse", "parseSparse", "parseSparse", "parseSparse", "assertEquals", "get", "assertEquals", "get", "assertArrayEquals", "getData", "toDenseVector", "assertEquals", "size", "assertArrayEquals", "getData", "toDenseVector", "assertEquals", "size", "assertEquals", "size"]}, "focal_class": {"identifier": "VectorUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char ELEMENT_DELIMITER = ' ';", "modifier": "private static final", "type": "char", "declarator": "ELEMENT_DELIMITER = ' '", "var_name": "ELEMENT_DELIMITER"}, {"original_string": "private static final char HEADER_DELIMITER = '$';", "modifier": "private static final", "type": "char", "declarator": "HEADER_DELIMITER = '$'", "var_name": "HEADER_DELIMITER"}, {"original_string": "private static final char INDEX_VALUE_DELIMITER = ':';", "modifier": "private static final", "type": "char", "declarator": "INDEX_VALUE_DELIMITER = ':'", "var_name": "INDEX_VALUE_DELIMITER"}], "methods": [{"identifier": "parse", "parameters": "(String str)", "modifiers": "private static", "return": "Vector", "signature": "Vector parse(String str)", "full_signature": "private static Vector parse(String str)", "class_method_signature": "VectorUtil.parse(String str)", "testcase": false, "constructor": false}, {"identifier": "parseDense", "parameters": "(String str)", "modifiers": "public static", "return": "DenseVector", "signature": "DenseVector parseDense(String str)", "full_signature": "public static DenseVector parseDense(String str)", "class_method_signature": "VectorUtil.parseDense(String str)", "testcase": false, "constructor": false}, {"identifier": "parseSparse", "parameters": "(String str)", "modifiers": "public static", "return": "SparseVector", "signature": "SparseVector parseSparse(String str)", "full_signature": "public static SparseVector parseSparse(String str)", "class_method_signature": "VectorUtil.parseSparse(String str)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Vector vector)", "modifiers": "public static", "return": "String", "signature": "String toString(Vector vector)", "full_signature": "public static String toString(Vector vector)", "class_method_signature": "VectorUtil.toString(Vector vector)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(SparseVector sparseVector)", "modifiers": "public static", "return": "String", "signature": "String toString(SparseVector sparseVector)", "full_signature": "public static String toString(SparseVector sparseVector)", "class_method_signature": "VectorUtil.toString(SparseVector sparseVector)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(DenseVector denseVector)", "modifiers": "public static", "return": "String", "signature": "String toString(DenseVector denseVector)", "full_signature": "public static String toString(DenseVector denseVector)", "class_method_signature": "VectorUtil.toString(DenseVector denseVector)", "testcase": false, "constructor": false}, {"identifier": "getVector", "parameters": "(Object obj)", "modifiers": "public static", "return": "Vector", "signature": "Vector getVector(Object obj)", "full_signature": "public static Vector getVector(Object obj)", "class_method_signature": "VectorUtil.getVector(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getDenseVector", "parameters": "(Object obj)", "modifiers": "public static", "return": "DenseVector", "signature": "DenseVector getDenseVector(Object obj)", "full_signature": "public static DenseVector getDenseVector(Object obj)", "class_method_signature": "VectorUtil.getDenseVector(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getSparseVector", "parameters": "(Object obj)", "modifiers": "public static", "return": "SparseVector", "signature": "SparseVector getSparseVector(Object obj)", "full_signature": "public static SparseVector getSparseVector(Object obj)", "class_method_signature": "VectorUtil.getSparseVector(Object obj)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/common/linalg/VectorUtil.java"}, "focal_method": {"identifier": "parseSparse", "parameters": "(String str)", "modifiers": "public static", "return": "SparseVector", "body": "public static SparseVector parseSparse(String str) {\n\t\ttry {\n\t\t\tif (org.apache.flink.util.StringUtils.isNullOrWhitespaceOnly(str)) {\n\t\t\t\treturn new SparseVector();\n\t\t\t}\n\n\t\t\tint n = -1;\n\t\t\tint firstDollarPos = str.indexOf(HEADER_DELIMITER);\n\t\t\tint lastDollarPos = -1;\n\t\t\tif (firstDollarPos >= 0) {\n\t\t\t\tlastDollarPos = StringUtils.lastIndexOf(str, HEADER_DELIMITER);\n\t\t\t\tString sizeStr = StringUtils.substring(str, firstDollarPos + 1, lastDollarPos);\n\t\t\t\tn = Integer.valueOf(sizeStr);\n\t\t\t\tif (lastDollarPos == str.length() - 1) {\n\t\t\t\t\treturn new SparseVector(n);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint numValues = StringUtils.countMatches(str, String.valueOf(INDEX_VALUE_DELIMITER));\n\t\t\tdouble[] data = new double[numValues];\n\t\t\tint[] indices = new int[numValues];\n\t\t\tint startPos = lastDollarPos + 1;\n\t\t\tint endPos;\n\t\t\tfor (int i = 0; i < numValues; i++) {\n\t\t\t\tint colonPos = StringUtils.indexOf(str, INDEX_VALUE_DELIMITER, startPos);\n\t\t\t\tif (colonPos < 0) {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Format error.\");\n\t\t\t\t}\n\t\t\t\tendPos = StringUtils.indexOf(str, ELEMENT_DELIMITER, colonPos);\n\n\t\t\t\t//to be compatible with previous delimiter\n\t\t\t\tif (endPos == -1) {\n\t\t\t\t\tendPos = StringUtils.indexOf(str, \",\", colonPos);\n\t\t\t\t}\n\n\t\t\t\tif (endPos == -1) {\n\t\t\t\t\tendPos = str.length();\n\t\t\t\t}\n\t\t\t\tindices[i] = Integer.valueOf(str.substring(startPos, colonPos).trim());\n\t\t\t\tdata[i] = Double.valueOf(str.substring(colonPos + 1, endPos).trim());\n\t\t\t\tstartPos = endPos + 1;\n\t\t\t}\n\t\t\treturn new SparseVector(n, indices, data);\n\t\t} catch (Exception e) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\tString.format(\"Fail to getVector sparse vector from string: \\\"%s\\\".\", str),\n\t\t\t\te);\n\t\t}\n\t}", "signature": "SparseVector parseSparse(String str)", "full_signature": "public static SparseVector parseSparse(String str)", "class_method_signature": "VectorUtil.parseSparse(String str)", "testcase": false, "constructor": false, "invocations": ["isNullOrWhitespaceOnly", "indexOf", "lastIndexOf", "substring", "valueOf", "length", "countMatches", "valueOf", "indexOf", "indexOf", "indexOf", "length", "valueOf", "trim", "substring", "valueOf", "trim", "substring", "format"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}