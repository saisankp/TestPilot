{"test_class": {"identifier": "SliceResourceFieldProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n\tprivate Resource resource;", "modifier": "@Mock\n\tprivate", "type": "Resource", "declarator": "resource", "var_name": "resource"}, {"original_string": "private SliceResourceFieldProcessor processor;", "modifier": "private", "type": "SliceResourceFieldProcessor", "declarator": "processor", "var_name": "processor"}], "file": "slice-mapper/src/test/java/com/cognifide/slice/mapper/impl/processor/SliceResourceFieldProcessorTest.java"}, "test_case": {"identifier": "testAcceptAnnotated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAcceptAnnotated() throws SecurityException, NoSuchFieldException {\n\t\tField field = TestObject.class.getDeclaredField(\"annotatedField\");\n\t\tboolean result = processor.accepts(resource, field);\n\t\tAssert.assertTrue(\"Annotated field should be acceptable\", result);\n\t}", "signature": "void testAcceptAnnotated()", "full_signature": "@Test public void testAcceptAnnotated()", "class_method_signature": "SliceResourceFieldProcessorTest.testAcceptAnnotated()", "testcase": true, "constructor": false, "invocations": ["getDeclaredField", "accepts", "assertTrue"]}, "focal_class": {"identifier": "SliceResourceFieldProcessor", "superclass": "", "interfaces": "implements FieldProcessor", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SliceResourceFieldProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SliceResourceFieldProcessor.class)", "var_name": "LOG"}, {"original_string": "@Inject\n\tprivate ModelProvider modelProvider;", "modifier": "@Inject\n\tprivate", "type": "ModelProvider", "declarator": "modelProvider", "var_name": "modelProvider"}], "methods": [{"identifier": "accepts", "parameters": "(Resource resource, Field field)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accepts(Resource resource, Field field)", "full_signature": "@Override public boolean accepts(Resource resource, Field field)", "class_method_signature": "SliceResourceFieldProcessor.accepts(Resource resource, Field field)", "testcase": false, "constructor": false}, {"identifier": "mapResourceToField", "parameters": "(Resource resource, ValueMap valueMap, Field field, String propertyName)", "modifiers": "@Override public", "return": "Object", "signature": "Object mapResourceToField(Resource resource, ValueMap valueMap, Field field, String propertyName)", "full_signature": "@Override public Object mapResourceToField(Resource resource, ValueMap valueMap, Field field, String propertyName)", "class_method_signature": "SliceResourceFieldProcessor.mapResourceToField(Resource resource, ValueMap valueMap, Field field, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "mapChildResourceToField", "parameters": "(Resource resource, Field field, String propertyName)", "modifiers": "private", "return": "Object", "signature": "Object mapChildResourceToField(Resource resource, Field field, String propertyName)", "full_signature": "private Object mapChildResourceToField(Resource resource, Field field, String propertyName)", "class_method_signature": "SliceResourceFieldProcessor.mapChildResourceToField(Resource resource, Field field, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "mapFollowUpResourceToField", "parameters": "(Resource resource, ValueMap valueMap, Field field,\n\t\t\tString propertyName)", "modifiers": "private", "return": "Object", "signature": "Object mapFollowUpResourceToField(Resource resource, ValueMap valueMap, Field field,\n\t\t\tString propertyName)", "full_signature": "private Object mapFollowUpResourceToField(Resource resource, ValueMap valueMap, Field field,\n\t\t\tString propertyName)", "class_method_signature": "SliceResourceFieldProcessor.mapFollowUpResourceToField(Resource resource, ValueMap valueMap, Field field,\n\t\t\tString propertyName)", "testcase": false, "constructor": false}], "file": "slice-mapper/src/main/java/com/cognifide/slice/mapper/impl/processor/SliceResourceFieldProcessor.java"}, "focal_method": {"identifier": "accepts", "parameters": "(Resource resource, Field field)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean accepts(Resource resource, Field field) {\n\t\tClass<?> type = field.getType();\n\t\t// additional checks of type for performance sake\n\t\treturn type != String.class && !type.isPrimitive() && type.isAnnotationPresent(SliceResource.class);\n\t}", "signature": "boolean accepts(Resource resource, Field field)", "full_signature": "@Override public boolean accepts(Resource resource, Field field)", "class_method_signature": "SliceResourceFieldProcessor.accepts(Resource resource, Field field)", "testcase": false, "constructor": false, "invocations": ["getType", "isPrimitive", "isAnnotationPresent"]}, "repository": {"repo_id": 5900702, "url": "https://github.com/Cognifide/Slice", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 61, "size": 11367, "license": "licensed"}}