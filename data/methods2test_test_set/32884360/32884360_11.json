{"test_class": {"identifier": "ColumnMaxAndPrefixSizesMatchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String SCHEMA = \"test\";", "modifier": "private final static", "type": "String", "declarator": "SCHEMA = \"test\"", "var_name": "SCHEMA"}, {"original_string": "private final static String TABLE = \"t\";", "modifier": "private final static", "type": "String", "declarator": "TABLE = \"t\"", "var_name": "TABLE"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/ais/model/validation/ColumnMaxAndPrefixSizesMatchTest.java"}, "test_case": {"identifier": "correct", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void correct() {\n        validate(createAIS(8L, 0));\n    }", "signature": "void correct()", "full_signature": "@Test public void correct()", "class_method_signature": "ColumnMaxAndPrefixSizesMatchTest.correct()", "testcase": true, "constructor": false, "invocations": ["validate", "createAIS"]}, "focal_class": {"identifier": "ColumnMaxAndPrefixSizesMatch", "superclass": "", "interfaces": "implements AISValidation", "fields": [], "methods": [{"identifier": "validate", "parameters": "(AkibanInformationSchema ais, AISValidationOutput output)", "modifiers": "@Override public", "return": "void", "signature": "void validate(AkibanInformationSchema ais, AISValidationOutput output)", "full_signature": "@Override public void validate(AkibanInformationSchema ais, AISValidationOutput output)", "class_method_signature": "ColumnMaxAndPrefixSizesMatch.validate(AkibanInformationSchema ais, AISValidationOutput output)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/ais/model/validation/ColumnMaxAndPrefixSizesMatch.java"}, "focal_method": {"identifier": "validate", "parameters": "(AkibanInformationSchema ais, AISValidationOutput output)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(AkibanInformationSchema ais, AISValidationOutput output) {\n        for(Table table : ais.getTables().values()) {\n            for(Column column : table.getColumnsIncludingInternal()) {\n                Long maxStorage = column.getMaxStorageSize();\n                Long computedMaxStorage = column.computeStorageSize(false);\n                Integer prefix = column.getPrefixSize();\n                Integer computedPrefix = column.computePrefixSize();\n                if((maxStorage != null) && !maxStorage.equals(computedMaxStorage)) {\n                    output.reportFailure(new AISValidationFailure(\n                            new ColumnSizeMismatchException(table.getName(), column.getName(),\n                                                            \"maxStorageSize\", maxStorage, computedMaxStorage)\n                    ));\n                }\n                if((prefix != null) && !prefix.equals(computedPrefix)) {\n                    output.reportFailure(new AISValidationFailure(\n                            new ColumnSizeMismatchException(table.getName(), column.getName(),\n                                                            \"prefixSize\", prefix, computedPrefix)\n                    ));\n                }\n            }\n        }\n    }", "signature": "void validate(AkibanInformationSchema ais, AISValidationOutput output)", "full_signature": "@Override public void validate(AkibanInformationSchema ais, AISValidationOutput output)", "class_method_signature": "ColumnMaxAndPrefixSizesMatch.validate(AkibanInformationSchema ais, AISValidationOutput output)", "testcase": false, "constructor": false, "invocations": ["values", "getTables", "getColumnsIncludingInternal", "getMaxStorageSize", "computeStorageSize", "getPrefixSize", "computePrefixSize", "equals", "reportFailure", "getName", "getName", "equals", "reportFailure", "getName", "getName"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}