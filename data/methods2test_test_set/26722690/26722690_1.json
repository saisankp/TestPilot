{"test_class": {"identifier": "MetricsInstrumentationInterceptorTest", "superclass": "", "interfaces": "", "fields": [], "file": "mongodb/src/test/java/org/restheart/mongodb/handlers/metrics/MetricsInstrumentationInterceptorTest.java"}, "test_case": {"identifier": "testAddMetrics", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"deprecation\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"deprecation\")\n    public void testAddMetrics() throws Exception {\n        MongoServiceConfiguration config = mock(MongoServiceConfiguration.class);\n        when(config.gatheringAboveOrEqualToLevel(MongoServiceConfiguration.METRICS_GATHERING_LEVEL.ROOT)).thenReturn(true);\n        when(config.gatheringAboveOrEqualToLevel(MongoServiceConfiguration.METRICS_GATHERING_LEVEL.DATABASE)).thenReturn(true);\n        when(config.gatheringAboveOrEqualToLevel(MongoServiceConfiguration.METRICS_GATHERING_LEVEL.COLLECTION)).thenReturn(true);\n\n        MetricRegistry registry = new MetricRegistry();\n        MetricRegistry registryDb = new MetricRegistry();\n        MetricRegistry registryColl = new MetricRegistry();\n        SharedMetricRegistryProxy proxy = new SharedMetricRegistryProxy() {\n            @Override\n            public MetricRegistry registry() {\n                return registry;\n            }\n\n            @Override\n            public MetricRegistry registry(String dbName) {\n                return registryDb;\n            }\n\n            @Override\n            public MetricRegistry registry(String dbName, String collectionName) {\n                return registryColl;\n            }\n        };\n\n        MetricsInstrumentationInterceptor mih = new MetricsInstrumentationInterceptor();\n        mih.configuration = config;\n        mih.metrics = proxy;\n        \n        HttpServerExchange httpServerExchange = mock(HttpServerExchange.class);\n        when(httpServerExchange.getStatusCode()).thenReturn(200);\n        when(httpServerExchange.getRequestMethod()).thenReturn(Methods.GET);\n        when(httpServerExchange.getRequestPath()).thenReturn(\"/foo/bar\");\n        \n        var request = MongoRequest.init(httpServerExchange, \"foo\", \"bar\");\n        \n        when(httpServerExchange.getAttachment(anyObject())).thenReturn(request);\n\n        mih.addMetrics(0, httpServerExchange);\n\n        mih.addMetrics(0, httpServerExchange);\n\n        assertEquals(3, registry.getTimers().size());\n        assertEquals(3, registryDb.getTimers().size());\n        assertEquals(3, registryColl.getTimers().size());\n    }", "signature": "void testAddMetrics()", "full_signature": "@Test @SuppressWarnings(\"deprecation\") public void testAddMetrics()", "class_method_signature": "MetricsInstrumentationInterceptorTest.testAddMetrics()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "gatheringAboveOrEqualToLevel", "thenReturn", "when", "gatheringAboveOrEqualToLevel", "thenReturn", "when", "gatheringAboveOrEqualToLevel", "mock", "thenReturn", "when", "getStatusCode", "thenReturn", "when", "getRequestMethod", "thenReturn", "when", "getRequestPath", "init", "thenReturn", "when", "getAttachment", "anyObject", "addMetrics", "addMetrics", "assertEquals", "size", "getTimers", "assertEquals", "size", "getTimers", "assertEquals", "size", "getTimers"]}, "focal_class": {"identifier": "MetricsInstrumentationInterceptor", "superclass": "", "interfaces": "implements MongoInterceptor", "fields": [{"original_string": "@VisibleForTesting\n    MongoServiceConfiguration configuration = null;", "modifier": "@VisibleForTesting", "type": "MongoServiceConfiguration", "declarator": "configuration = null", "var_name": "configuration"}, {"original_string": "@VisibleForTesting\n    SharedMetricRegistryProxy metrics = new SharedMetricRegistryProxy();", "modifier": "@VisibleForTesting", "type": "SharedMetricRegistryProxy", "declarator": "metrics = new SharedMetricRegistryProxy()", "var_name": "metrics"}], "methods": [{"identifier": "isFilledAndNotMetrics", "parameters": "(String dbOrCollectionName)", "modifiers": "@VisibleForTesting static", "return": "boolean", "signature": "boolean isFilledAndNotMetrics(String dbOrCollectionName)", "full_signature": "@VisibleForTesting static boolean isFilledAndNotMetrics(String dbOrCollectionName)", "class_method_signature": "MetricsInstrumentationInterceptor.isFilledAndNotMetrics(String dbOrCollectionName)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(MongoRequest request, MongoResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void handle(MongoRequest request, MongoResponse response)", "full_signature": "@Override public void handle(MongoRequest request, MongoResponse response)", "class_method_signature": "MetricsInstrumentationInterceptor.handle(MongoRequest request, MongoResponse response)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(MongoRequest request, MongoResponse response)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean resolve(MongoRequest request, MongoResponse response)", "full_signature": "@Override public boolean resolve(MongoRequest request, MongoResponse response)", "class_method_signature": "MetricsInstrumentationInterceptor.resolve(MongoRequest request, MongoResponse response)", "testcase": false, "constructor": false}, {"identifier": "addDefaultMetrics", "parameters": "(MetricRegistry registry, long duration, HttpServerExchange exchange)", "modifiers": "private", "return": "void", "signature": "void addDefaultMetrics(MetricRegistry registry, long duration, HttpServerExchange exchange)", "full_signature": "private void addDefaultMetrics(MetricRegistry registry, long duration, HttpServerExchange exchange)", "class_method_signature": "MetricsInstrumentationInterceptor.addDefaultMetrics(MetricRegistry registry, long duration, HttpServerExchange exchange)", "testcase": false, "constructor": false}, {"identifier": "addMetrics", "parameters": "(long startTime, HttpServerExchange exchange)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void addMetrics(long startTime, HttpServerExchange exchange)", "full_signature": "@VisibleForTesting void addMetrics(long startTime, HttpServerExchange exchange)", "class_method_signature": "MetricsInstrumentationInterceptor.addMetrics(long startTime, HttpServerExchange exchange)", "testcase": false, "constructor": false}], "file": "mongodb/src/main/java/org/restheart/mongodb/handlers/metrics/MetricsInstrumentationInterceptor.java"}, "focal_method": {"identifier": "addMetrics", "parameters": "(long startTime, HttpServerExchange exchange)", "modifiers": "@VisibleForTesting", "return": "void", "body": "@VisibleForTesting\n    void addMetrics(long startTime, HttpServerExchange exchange) {\n        if (configuration.gatheringAboveOrEqualToLevel(ROOT)) {\n            var request = MongoRequest.of(exchange);\n            \n            long endTime = System.currentTimeMillis();\n            long duration = endTime - startTime;\n\n            addDefaultMetrics(metrics.registry(), duration, exchange);\n\n            if (isFilledAndNotMetrics(request.getDBName()) && configuration.gatheringAboveOrEqualToLevel(DATABASE)) {\n                final MetricRegistry dbRegistry = metrics.registry(request.getDBName());\n                addDefaultMetrics(dbRegistry, duration, exchange);\n\n                if (isFilledAndNotMetrics(request.getCollectionName()) && configuration.gatheringAboveOrEqualToLevel(COLLECTION)) {\n                    final MetricRegistry collectionRegistry = metrics.registry(request.getDBName(), request.getCollectionName());\n                    addDefaultMetrics(collectionRegistry, duration, exchange);\n                }\n            }\n        }\n    }", "signature": "void addMetrics(long startTime, HttpServerExchange exchange)", "full_signature": "@VisibleForTesting void addMetrics(long startTime, HttpServerExchange exchange)", "class_method_signature": "MetricsInstrumentationInterceptor.addMetrics(long startTime, HttpServerExchange exchange)", "testcase": false, "constructor": false, "invocations": ["gatheringAboveOrEqualToLevel", "of", "currentTimeMillis", "addDefaultMetrics", "registry", "isFilledAndNotMetrics", "getDBName", "gatheringAboveOrEqualToLevel", "registry", "getDBName", "addDefaultMetrics", "isFilledAndNotMetrics", "getCollectionName", "gatheringAboveOrEqualToLevel", "registry", "getDBName", "getCollectionName", "addDefaultMetrics"]}, "repository": {"repo_id": 26722690, "url": "https://github.com/SoftInstigate/restheart", "stars": 582, "created": "11/16/2014 6:01:01 PM +00:00", "updates": "2020-01-18T15:31:59+00:00", "fork": "False", "license": "licensed"}}