{"test_class": {"identifier": "BlockingOperatorNextTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/internal/operators/BlockingOperatorNextTest.java"}, "test_case": {"identifier": "testNoBufferingOrBlockingOfSequence", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoBufferingOrBlockingOfSequence() throws Throwable {\n        final CountDownLatch finished = new CountDownLatch(1);\n        final int COUNT = 30;\n        final CountDownLatch timeHasPassed = new CountDownLatch(COUNT);\n        final AtomicBoolean running = new AtomicBoolean(true);\n        final AtomicInteger count = new AtomicInteger(0);\n        final Observable<Integer> obs = Observable.create(new Observable.OnSubscribe<Integer>() {\n\n            @Override\n            public void call(final Subscriber<? super Integer> o) {\n                new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            while (running.get()) {\n                                o.onNext(count.incrementAndGet());\n                                timeHasPassed.countDown();\n                            }\n                            o.onCompleted();\n                        } catch (Throwable e) {\n                            o.onError(e);\n                        } finally {\n                            finished.countDown();\n                        }\n                    }\n                }).start();\n            }\n\n        });\n\n        Iterator<Integer> it = next(obs).iterator();\n\n        assertTrue(it.hasNext());\n        int a = it.next();\n        assertTrue(it.hasNext());\n        int b = it.next();\n        // we should have a different value\n        assertTrue(\"a and b should be different\", a != b);\n\n        // wait for some time (if times out we are blocked somewhere so fail ... set very high for very slow, constrained machines)\n        timeHasPassed.await(8000, TimeUnit.MILLISECONDS);\n\n        assertTrue(it.hasNext());\n        int c = it.next();\n\n        assertTrue(\"c should not just be the next in sequence\", c != (b + 1));\n        assertTrue(\"expected that c [\" + c + \"] is higher than or equal to \" + COUNT, c >= COUNT);\n\n        assertTrue(it.hasNext());\n        int d = it.next();\n        assertTrue(d > c);\n\n        // shut down the thread\n        running.set(false);\n\n        finished.await();\n\n        assertFalse(it.hasNext());\n\n        System.out.println(\"a: \" + a + \" b: \" + b + \" c: \" + c);\n    }", "signature": "void testNoBufferingOrBlockingOfSequence()", "full_signature": "@Test public void testNoBufferingOrBlockingOfSequence()", "class_method_signature": "BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence()", "testcase": true, "constructor": false, "invocations": ["create", "start", "get", "onNext", "incrementAndGet", "countDown", "onCompleted", "onError", "countDown", "iterator", "next", "assertTrue", "hasNext", "next", "assertTrue", "hasNext", "next", "assertTrue", "await", "assertTrue", "hasNext", "next", "assertTrue", "assertTrue", "assertTrue", "hasNext", "next", "assertTrue", "set", "await", "assertFalse", "hasNext", "println"]}, "focal_class": {"identifier": "BlockingOperatorNext", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "BlockingOperatorNext", "parameters": "()", "modifiers": "private", "return": "", "signature": " BlockingOperatorNext()", "full_signature": "private  BlockingOperatorNext()", "class_method_signature": "BlockingOperatorNext.BlockingOperatorNext()", "testcase": false, "constructor": true}, {"identifier": "next", "parameters": "(final Observable<? extends T> items)", "modifiers": "public static", "return": "Iterable<T>", "signature": "Iterable<T> next(final Observable<? extends T> items)", "full_signature": "public static Iterable<T> next(final Observable<? extends T> items)", "class_method_signature": "BlockingOperatorNext.next(final Observable<? extends T> items)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/internal/operators/BlockingOperatorNext.java"}, "focal_method": {"identifier": "next", "parameters": "(final Observable<? extends T> items)", "modifiers": "public static", "return": "Iterable<T>", "body": "public static <T> Iterable<T> next(final Observable<? extends T> items) {\n        return new Iterable<T>() {\n            @Override\n            public Iterator<T> iterator() {\n                NextObserver<T> nextObserver = new NextObserver<T>();\n                return new NextIterator<T>(items, nextObserver);\n            }\n        };\n\n    }", "signature": "Iterable<T> next(final Observable<? extends T> items)", "full_signature": "public static Iterable<T> next(final Observable<? extends T> items)", "class_method_signature": "BlockingOperatorNext.next(final Observable<? extends T> items)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}