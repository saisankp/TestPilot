{"test_class": {"identifier": "LoadParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String[] EMPTY = new String[0];", "modifier": "static final", "type": "String[]", "declarator": "EMPTY = new String[0]", "var_name": "EMPTY"}, {"original_string": "Environment<Class<?>> environment = StubEnvironment.of(Project.EMPTY);", "modifier": "", "type": "Environment<Class<?>>", "declarator": "environment = StubEnvironment.of(Project.EMPTY)", "var_name": "environment"}, {"original_string": "LoadParser<Class<?>> parser = new LoadParser<>(environment);", "modifier": "", "type": "LoadParser<Class<?>>", "declarator": "parser = new LoadParser<>(environment)", "var_name": "parser"}], "file": "scribe/core/src/test/java/com/karuslabs/scribe/core/parsers/LoadParserTest.java"}, "test_case": {"identifier": "check_errors", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void check_errors() {\n        parser.check(LoadParserTest.class, new String[] {\"a1\", \"hey!\", \"sp ace\"});\n        \n        verify(environment).error(LoadParserTest.class, \"\\\"hey!\\\" is not a valid plugin name, should contain only alphanumeric characters and \\\"_\\\"\");\n        verify(environment).error(LoadParserTest.class, \"\\\"sp ace\\\" is not a valid plugin name, should contain only alphanumeric characters and \\\"_\\\"\");\n    }", "signature": "void check_errors()", "full_signature": "@Test void check_errors()", "class_method_signature": "LoadParserTest.check_errors()", "testcase": true, "constructor": false, "invocations": ["check", "error", "verify", "error", "verify"]}, "focal_class": {"identifier": "LoadParser", "superclass": "extends SingleParser<T>", "interfaces": "", "fields": [{"original_string": "private Matcher matcher;", "modifier": "private", "type": "Matcher", "declarator": "matcher", "var_name": "matcher"}], "methods": [{"identifier": "LoadParser", "parameters": "(Environment<T> environment)", "modifiers": "public", "return": "", "signature": " LoadParser(Environment<T> environment)", "full_signature": "public  LoadParser(Environment<T> environment)", "class_method_signature": "LoadParser.LoadParser(Environment<T> environment)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(T type)", "modifiers": "@Override protected", "return": "void", "signature": "void parse(T type)", "full_signature": "@Override protected void parse(T type)", "class_method_signature": "LoadParser.parse(T type)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(T type, String[] names)", "modifiers": "protected", "return": "void", "signature": "void check(T type, String[] names)", "full_signature": "protected void check(T type, String[] names)", "class_method_signature": "LoadParser.check(T type, String[] names)", "testcase": false, "constructor": false}], "file": "scribe/core/src/main/java/com/karuslabs/scribe/core/parsers/LoadParser.java"}, "focal_method": {"identifier": "check", "parameters": "(T type, String[] names)", "modifiers": "protected", "return": "void", "body": "protected void check(T type, String[] names) {\n        for (var name : names) {\n            if (!matcher.reset(name).matches()) {\n                environment.error(type, format(name, \"is not a valid plugin name, should contain only alphanumeric characters and \\\"_\\\"\"));\n            }\n        }\n    }", "signature": "void check(T type, String[] names)", "full_signature": "protected void check(T type, String[] names)", "class_method_signature": "LoadParser.check(T type, String[] names)", "testcase": false, "constructor": false, "invocations": ["matches", "reset", "error", "format"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}