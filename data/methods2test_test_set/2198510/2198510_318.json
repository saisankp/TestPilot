{"test_class": {"identifier": "TestDefaultSinkFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SinkFactory sinkFactory;", "modifier": "private", "type": "SinkFactory", "declarator": "sinkFactory", "var_name": "sinkFactory"}], "file": "flume-ng-core/src/test/java/org/apache/flume/sink/TestDefaultSinkFactory.java"}, "test_case": {"identifier": "testDuplicateCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDuplicateCreate() {\n\n    Sink avroSink1 = sinkFactory.create(\"avroSink1\", \"avro\");\n    Sink avroSink2 = sinkFactory.create(\"avroSink2\", \"avro\");\n\n    Assert.assertNotNull(avroSink1);\n    Assert.assertNotNull(avroSink2);\n    Assert.assertNotSame(avroSink1, avroSink2);\n    Assert.assertTrue(avroSink1 instanceof AvroSink);\n    Assert.assertTrue(avroSink2 instanceof AvroSink);\n\n    Sink s1 = sinkFactory.create(\"avroSink1\", \"avro\");\n    Sink s2 = sinkFactory.create(\"avroSink2\", \"avro\");\n\n    Assert.assertNotSame(avroSink1, s1);\n    Assert.assertNotSame(avroSink2, s2);\n  }", "signature": "void testDuplicateCreate()", "full_signature": "@Test public void testDuplicateCreate()", "class_method_signature": "TestDefaultSinkFactory.testDuplicateCreate()", "testcase": true, "constructor": false, "invocations": ["create", "create", "assertNotNull", "assertNotNull", "assertNotSame", "assertTrue", "assertTrue", "create", "create", "assertNotSame", "assertNotSame"]}, "focal_class": {"identifier": "DefaultSinkFactory", "superclass": "", "interfaces": "implements SinkFactory", "fields": [{"original_string": "private static final Logger logger = LoggerFactory\n      .getLogger(DefaultSinkFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n      .getLogger(DefaultSinkFactory.class)", "var_name": "logger"}], "methods": [{"identifier": "create", "parameters": "(String name, String type)", "modifiers": "@Override public", "return": "Sink", "signature": "Sink create(String name, String type)", "full_signature": "@Override public Sink create(String name, String type)", "class_method_signature": "DefaultSinkFactory.create(String name, String type)", "testcase": false, "constructor": false}, {"identifier": "getClass", "parameters": "(String type)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Class<? extends Sink>", "signature": "Class<? extends Sink> getClass(String type)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Class<? extends Sink> getClass(String type)", "class_method_signature": "DefaultSinkFactory.getClass(String type)", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/sink/DefaultSinkFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(String name, String type)", "modifiers": "@Override public", "return": "Sink", "body": "@Override\n  public Sink create(String name, String type) throws FlumeException {\n    Preconditions.checkNotNull(name, \"name\");\n    Preconditions.checkNotNull(type, \"type\");\n    logger.info(\"Creating instance of sink: {}, type: {}\", name, type);\n    Class<? extends Sink> sinkClass = getClass(type);\n    try {\n      Sink sink = sinkClass.newInstance();\n      sink.setName(name);\n      return sink;\n    } catch (Exception ex) {\n      throw new FlumeException(\"Unable to create sink: \" + name\n          + \", type: \" + type + \", class: \" + sinkClass.getName(), ex);\n    }\n  }", "signature": "Sink create(String name, String type)", "full_signature": "@Override public Sink create(String name, String type)", "class_method_signature": "DefaultSinkFactory.create(String name, String type)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "info", "getClass", "newInstance", "setName", "getName"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}