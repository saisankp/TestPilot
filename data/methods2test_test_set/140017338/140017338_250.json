{"test_class": {"identifier": "SW360ConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}], "file": "assembly/compliance-tool/src/test/java/org/eclipse/sw360/antenna/frontend/compliancetool/sw360/SW360ConfigurationTest.java"}, "test_case": {"identifier": "testConnection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConnection() {\n        SW360ConnectionConfigurationFactory conFactory = mock(SW360ConnectionConfigurationFactory.class);\n        ServiceFactory svcFactory = mock(ServiceFactory.class);\n        SW360Connection connection = mock(SW360Connection.class);\n        HttpClient httpClient = mock(HttpClient.class);\n        when(svcFactory.createHttpClient(true, \"proxy.net\", 8080))\n                .thenReturn(httpClient);\n        when(conFactory.createConnection(any(), eq(httpClient), eq(ServiceFactory.getObjectMapper())))\n                .thenReturn(connection);\n        File propertiesFile = configFile(\"config-with-proxy.properties\");\n\n        SW360Configuration configuration = new SW360Configuration(propertiesFile, conFactory, svcFactory);\n        assertThat(configuration.getConnection()).isEqualTo(connection);\n    }", "signature": "void testConnection()", "full_signature": "@Test public void testConnection()", "class_method_signature": "SW360ConfigurationTest.testConnection()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "thenReturn", "when", "createHttpClient", "thenReturn", "when", "createConnection", "any", "eq", "eq", "getObjectMapper", "configFile", "isEqualTo", "assertThat", "getConnection"]}, "focal_class": {"identifier": "SW360Configuration", "superclass": "extends ConfigurableWorkflowItem", "interfaces": "", "fields": [{"original_string": "private final SW360ConnectionConfigurationFactory connectionFactory;", "modifier": "private final", "type": "SW360ConnectionConfigurationFactory", "declarator": "connectionFactory", "var_name": "connectionFactory"}, {"original_string": "private final Map<String, String> properties;", "modifier": "private final", "type": "Map<String, String>", "declarator": "properties", "var_name": "properties"}, {"original_string": "private final Path csvFilePath;", "modifier": "private final", "type": "Path", "declarator": "csvFilePath", "var_name": "csvFilePath"}, {"original_string": "private final SW360Connection connection;", "modifier": "private final", "type": "SW360Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private final Path sourcesPath;", "modifier": "private final", "type": "Path", "declarator": "sourcesPath", "var_name": "sourcesPath"}, {"original_string": "private final Path baseDir;", "modifier": "private final", "type": "Path", "declarator": "baseDir", "var_name": "baseDir"}, {"original_string": "private final ServiceFactory serviceFactory;", "modifier": "private final", "type": "ServiceFactory", "declarator": "serviceFactory", "var_name": "serviceFactory"}], "methods": [{"identifier": "SW360Configuration", "parameters": "(File propertiesFile)", "modifiers": "public", "return": "", "signature": " SW360Configuration(File propertiesFile)", "full_signature": "public  SW360Configuration(File propertiesFile)", "class_method_signature": "SW360Configuration.SW360Configuration(File propertiesFile)", "testcase": false, "constructor": true}, {"identifier": "SW360Configuration", "parameters": "(File propertiesFile, SW360ConnectionConfigurationFactory factory,\n                       ServiceFactory serviceFactory)", "modifiers": "", "return": "", "signature": " SW360Configuration(File propertiesFile, SW360ConnectionConfigurationFactory factory,\n                       ServiceFactory serviceFactory)", "full_signature": "  SW360Configuration(File propertiesFile, SW360ConnectionConfigurationFactory factory,\n                       ServiceFactory serviceFactory)", "class_method_signature": "SW360Configuration.SW360Configuration(File propertiesFile, SW360ConnectionConfigurationFactory factory,\n                       ServiceFactory serviceFactory)", "testcase": false, "constructor": true}, {"identifier": "makeConnection", "parameters": "()", "modifiers": "private", "return": "SW360Connection", "signature": "SW360Connection makeConnection()", "full_signature": "private SW360Connection makeConnection()", "class_method_signature": "SW360Configuration.makeConnection()", "testcase": false, "constructor": false}, {"identifier": "getBaseDir", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getBaseDir()", "full_signature": "public Path getBaseDir()", "class_method_signature": "SW360Configuration.getBaseDir()", "testcase": false, "constructor": false}, {"identifier": "getSourcesPath", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getSourcesPath()", "full_signature": "public Path getSourcesPath()", "class_method_signature": "SW360Configuration.getSourcesPath()", "testcase": false, "constructor": false}, {"identifier": "getCsvFilePath", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getCsvFilePath()", "full_signature": "public Path getCsvFilePath()", "class_method_signature": "SW360Configuration.getCsvFilePath()", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String key)", "modifiers": "public", "return": "String", "signature": "String getProperty(String key)", "full_signature": "public String getProperty(String key)", "class_method_signature": "SW360Configuration.getProperty(String key)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "public", "return": "SW360Connection", "signature": "SW360Connection getConnection()", "full_signature": "public SW360Connection getConnection()", "class_method_signature": "SW360Configuration.getConnection()", "testcase": false, "constructor": false}, {"identifier": "getBooleanConfigValue", "parameters": "(String key)", "modifiers": "public", "return": "Boolean", "signature": "Boolean getBooleanConfigValue(String key)", "full_signature": "public Boolean getBooleanConfigValue(String key)", "class_method_signature": "SW360Configuration.getBooleanConfigValue(String key)", "testcase": false, "constructor": false}, {"identifier": "logConfiguration", "parameters": "(Logger logger)", "modifiers": "public", "return": "void", "signature": "void logConfiguration(Logger logger)", "full_signature": "public void logConfiguration(Logger logger)", "class_method_signature": "SW360Configuration.logConfiguration(Logger logger)", "testcase": false, "constructor": false}, {"identifier": "getConnectionFactory", "parameters": "()", "modifiers": "", "return": "SW360ConnectionConfigurationFactory", "signature": "SW360ConnectionConfigurationFactory getConnectionFactory()", "full_signature": " SW360ConnectionConfigurationFactory getConnectionFactory()", "class_method_signature": "SW360Configuration.getConnectionFactory()", "testcase": false, "constructor": false}, {"identifier": "getServiceFactory", "parameters": "()", "modifiers": "", "return": "ServiceFactory", "signature": "ServiceFactory getServiceFactory()", "full_signature": " ServiceFactory getServiceFactory()", "class_method_signature": "SW360Configuration.getServiceFactory()", "testcase": false, "constructor": false}], "file": "assembly/compliance-tool/src/main/java/org/eclipse/sw360/antenna/frontend/compliancetool/sw360/SW360Configuration.java"}, "focal_method": {"identifier": "getConnection", "parameters": "()", "modifiers": "public", "return": "SW360Connection", "body": "public SW360Connection getConnection() {\n        return connection;\n    }", "signature": "SW360Connection getConnection()", "full_signature": "public SW360Connection getConnection()", "class_method_signature": "SW360Configuration.getConnection()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}