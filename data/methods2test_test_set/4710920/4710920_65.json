{"test_class": {"identifier": "AccessKeyAuthenticatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-plugin/dubbo-auth/src/test/java/org/apache/dubbo/auth/AccessKeyAuthenticatorTest.java"}, "test_case": {"identifier": "testGetAccessKeyPairFailed", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testGetAccessKeyPairFailed() {\n        URL url = URL.valueOf(\"dubbo://10.10.10.10:2181\")\n                .addParameter(Constants.ACCESS_KEY_ID_KEY, \"ak\");\n        AccessKeyAuthenticator helper = new AccessKeyAuthenticator();\n        Invocation invocation = mock(Invocation.class);\n        assertThrows(RuntimeException.class, () -> helper.getAccessKeyPair(invocation, url));\n    }", "signature": "void testGetAccessKeyPairFailed()", "full_signature": "@Test void testGetAccessKeyPairFailed()", "class_method_signature": "AccessKeyAuthenticatorTest.testGetAccessKeyPairFailed()", "testcase": true, "constructor": false, "invocations": ["addParameter", "valueOf", "mock", "assertThrows", "getAccessKeyPair"]}, "focal_class": {"identifier": "AccessKeyAuthenticator", "superclass": "", "interfaces": "implements Authenticator", "fields": [], "methods": [{"identifier": "sign", "parameters": "(Invocation invocation, URL url)", "modifiers": "@Override public", "return": "void", "signature": "void sign(Invocation invocation, URL url)", "full_signature": "@Override public void sign(Invocation invocation, URL url)", "class_method_signature": "AccessKeyAuthenticator.sign(Invocation invocation, URL url)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(Invocation invocation, URL url)", "modifiers": "@Override public", "return": "void", "signature": "void authenticate(Invocation invocation, URL url)", "full_signature": "@Override public void authenticate(Invocation invocation, URL url)", "class_method_signature": "AccessKeyAuthenticator.authenticate(Invocation invocation, URL url)", "testcase": false, "constructor": false}, {"identifier": "getAccessKeyPair", "parameters": "(Invocation invocation, URL url)", "modifiers": "", "return": "AccessKeyPair", "signature": "AccessKeyPair getAccessKeyPair(Invocation invocation, URL url)", "full_signature": " AccessKeyPair getAccessKeyPair(Invocation invocation, URL url)", "class_method_signature": "AccessKeyAuthenticator.getAccessKeyPair(Invocation invocation, URL url)", "testcase": false, "constructor": false}, {"identifier": "getSignature", "parameters": "(URL url, Invocation invocation, String secretKey, String time)", "modifiers": "", "return": "String", "signature": "String getSignature(URL url, Invocation invocation, String secretKey, String time)", "full_signature": " String getSignature(URL url, Invocation invocation, String secretKey, String time)", "class_method_signature": "AccessKeyAuthenticator.getSignature(URL url, Invocation invocation, String secretKey, String time)", "testcase": false, "constructor": false}], "file": "dubbo-plugin/dubbo-auth/src/main/java/org/apache/dubbo/auth/AccessKeyAuthenticator.java"}, "focal_method": {"identifier": "getAccessKeyPair", "parameters": "(Invocation invocation, URL url)", "modifiers": "", "return": "AccessKeyPair", "body": "AccessKeyPair getAccessKeyPair(Invocation invocation, URL url) {\n        AccessKeyStorage accessKeyStorage = ExtensionLoader.getExtensionLoader(AccessKeyStorage.class)\n                .getExtension(url.getParameter(Constants.ACCESS_KEY_STORAGE_KEY, Constants.DEFAULT_ACCESS_KEY_STORAGE));\n\n        AccessKeyPair accessKeyPair = null;\n        try {\n            accessKeyPair = accessKeyStorage.getAccessKey(url, invocation);\n            if (accessKeyPair == null || StringUtils.isEmpty(accessKeyPair.getAccessKey()) || StringUtils.isEmpty(accessKeyPair.getSecretKey())) {\n                throw new AccessKeyNotFoundException(\"AccessKeyId or secretAccessKey not found\");\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"Can't load the AccessKeyPair from accessKeyStorage\", e);\n        }\n        return accessKeyPair;\n    }", "signature": "AccessKeyPair getAccessKeyPair(Invocation invocation, URL url)", "full_signature": " AccessKeyPair getAccessKeyPair(Invocation invocation, URL url)", "class_method_signature": "AccessKeyAuthenticator.getAccessKeyPair(Invocation invocation, URL url)", "testcase": false, "constructor": false, "invocations": ["getExtension", "getExtensionLoader", "getParameter", "getAccessKey", "isEmpty", "getAccessKey", "isEmpty", "getSecretKey"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}