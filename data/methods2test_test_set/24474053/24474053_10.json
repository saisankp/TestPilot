{"test_class": {"identifier": "NGramAutomatonTest", "superclass": "extends RandomizedTest", "interfaces": "", "fields": [], "file": "extra/src/test/java/org/wikimedia/search/extra/regex/ngram/NGramAutomatonTest.java"}, "test_case": {"identifier": "randomAutomaton", "parameters": "()", "modifiers": "@Test @Repeat(iterations = 100) public", "return": "void", "body": "@Test\n    @Repeat(iterations = 100)\n    public void randomAutomaton() {\n        Automaton automaton = AutomatonTestUtil.randomAutomaton(getRandom());\n        NGramAutomaton ngramAutomaton;\n        try {\n            ngramAutomaton = new NGramAutomaton(automaton, between(2, 7), 4, 10000, 500, new KeywordAnalyzer());\n        } catch (AutomatonTooComplexException e) {\n            // This is fine - some automata are genuinely too complex to ngramify.\n            return;\n        }\n        Expression<String> expression = ngramAutomaton.expression();\n        expression = expression.simplify();\n    }", "signature": "void randomAutomaton()", "full_signature": "@Test @Repeat(iterations = 100) public void randomAutomaton()", "class_method_signature": "NGramAutomatonTest.randomAutomaton()", "testcase": true, "constructor": false, "invocations": ["randomAutomaton", "getRandom", "between", "expression", "simplify"]}, "focal_class": {"identifier": "NGramAutomaton", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Automaton source;", "modifier": "private final", "type": "Automaton", "declarator": "source", "var_name": "source"}, {"original_string": "private final int gramSize;", "modifier": "private final", "type": "int", "declarator": "gramSize", "var_name": "gramSize"}, {"original_string": "private final int maxExpand;", "modifier": "private final", "type": "int", "declarator": "maxExpand", "var_name": "maxExpand"}, {"original_string": "private final int maxStatesTraced;", "modifier": "private final", "type": "int", "declarator": "maxStatesTraced", "var_name": "maxStatesTraced"}, {"original_string": "private final int maxTransitions;", "modifier": "private final", "type": "int", "declarator": "maxTransitions", "var_name": "maxTransitions"}, {"original_string": "private final List<NGramState> initialStates = new ArrayList<>();", "modifier": "private final", "type": "List<NGramState>", "declarator": "initialStates = new ArrayList<>()", "var_name": "initialStates"}, {"original_string": "private final List<NGramState> acceptStates = new ArrayList<>();", "modifier": "private final", "type": "List<NGramState>", "declarator": "acceptStates = new ArrayList<>()", "var_name": "acceptStates"}, {"original_string": "private final Map<NGramState, NGramState> states = new HashMap<>();", "modifier": "private final", "type": "Map<NGramState, NGramState>", "declarator": "states = new HashMap<>()", "var_name": "states"}, {"original_string": "private final Analyzer ngramAnalyzer;", "modifier": "private final", "type": "Analyzer", "declarator": "ngramAnalyzer", "var_name": "ngramAnalyzer"}], "methods": [{"identifier": "NGramAutomaton", "parameters": "(Automaton source, int gramSize, int maxExpand, int maxStatesTraced, int maxTransitions, Analyzer ngramAnalyzer)", "modifiers": "public", "return": "", "signature": " NGramAutomaton(Automaton source, int gramSize, int maxExpand, int maxStatesTraced, int maxTransitions, Analyzer ngramAnalyzer)", "full_signature": "public  NGramAutomaton(Automaton source, int gramSize, int maxExpand, int maxStatesTraced, int maxTransitions, Analyzer ngramAnalyzer)", "class_method_signature": "NGramAutomaton.NGramAutomaton(Automaton source, int gramSize, int maxExpand, int maxStatesTraced, int maxTransitions, Analyzer ngramAnalyzer)", "testcase": false, "constructor": true}, {"identifier": "toDot", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toDot()", "full_signature": "public String toDot()", "class_method_signature": "NGramAutomaton.toDot()", "testcase": false, "constructor": false}, {"identifier": "expression", "parameters": "()", "modifiers": "public", "return": "Expression<String>", "signature": "Expression<String> expression()", "full_signature": "public Expression<String> expression()", "class_method_signature": "NGramAutomaton.expression()", "testcase": false, "constructor": false}, {"identifier": "buildInitial", "parameters": "(int[] codePoints, int offset, int currentState)", "modifiers": "private", "return": "boolean", "signature": "boolean buildInitial(int[] codePoints, int offset, int currentState)", "full_signature": "private boolean buildInitial(int[] codePoints, int offset, int currentState)", "class_method_signature": "NGramAutomaton.buildInitial(int[] codePoints, int offset, int currentState)", "testcase": false, "constructor": false}, {"identifier": "traceRemainingStates", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void traceRemainingStates()", "full_signature": "private void traceRemainingStates()", "class_method_signature": "NGramAutomaton.traceRemainingStates()", "testcase": false, "constructor": false}, {"identifier": "analyze", "parameters": "(@Nullable String ngram)", "modifiers": "@Nullable private", "return": "String", "signature": "String analyze(@Nullable String ngram)", "full_signature": "@Nullable private String analyze(@Nullable String ngram)", "class_method_signature": "NGramAutomaton.analyze(@Nullable String ngram)", "testcase": false, "constructor": false}, {"identifier": "buildOrFind", "parameters": "(LinkedList<NGramState> leftToProcess, int sourceState, String prefix)", "modifiers": "private", "return": "NGramState", "signature": "NGramState buildOrFind(LinkedList<NGramState> leftToProcess, int sourceState, String prefix)", "full_signature": "private NGramState buildOrFind(LinkedList<NGramState> leftToProcess, int sourceState, String prefix)", "class_method_signature": "NGramAutomaton.buildOrFind(LinkedList<NGramState> leftToProcess, int sourceState, String prefix)", "testcase": false, "constructor": false}], "file": "extra/src/main/java/org/wikimedia/search/extra/regex/ngram/NGramAutomaton.java"}, "focal_method": {"identifier": "expression", "parameters": "()", "modifiers": "public", "return": "Expression<String>", "body": "public Expression<String> expression() {\n        return Or.fromExpressionSources(acceptStates);\n    }", "signature": "Expression<String> expression()", "full_signature": "public Expression<String> expression()", "class_method_signature": "NGramAutomaton.expression()", "testcase": false, "constructor": false, "invocations": ["fromExpressionSources"]}, "repository": {"repo_id": 24474053, "url": "https://github.com/wikimedia/search-extra", "stars": 37, "created": "9/25/2014 8:26:03 PM +00:00", "updates": "2019-12-06T15:10:34+00:00", "fork": "False", "license": "licensed"}}