{"test_class": {"identifier": "ConsumerOffsetManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "rocketmq-src/RocketMQ-3.4.6/rocketmq-broker/src/test/java/com/alibaba/rocketmq/broker/offset/ConsumerOffsetManagerTest.java"}, "test_case": {"identifier": "test_flushConsumerOffset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_flushConsumerOffset() throws Exception {\n        BrokerController brokerController = new BrokerController(//\n            new BrokerConfig(), //\n            new NettyServerConfig(), //\n            new NettyClientConfig(), //\n            new MessageStoreConfig());\n        boolean initResult = brokerController.initialize();\n        System.out.println(\"initialize \" + initResult);\n        brokerController.start();\n\n        ConsumerOffsetManager consumerOffsetManager = new ConsumerOffsetManager(brokerController);\n\n        Random random = new Random();\n\n        for (int i = 0; i < 100; i++) {\n            String group = \"DIANPU_GROUP_\" + i;\n            for (int id = 0; id < 16; id++) {\n                consumerOffsetManager.commitOffset(group, \"TOPIC_A\", id,\n                    random.nextLong() % 1024 * 1024 * 1024);\n                consumerOffsetManager.commitOffset(group, \"TOPIC_B\", id,\n                    random.nextLong() % 1024 * 1024 * 1024);\n                consumerOffsetManager.commitOffset(group, \"TOPIC_C\", id,\n                    random.nextLong() % 1024 * 1024 * 1024);\n            }\n        }\n\n        consumerOffsetManager.persist();\n\n        brokerController.shutdown();\n    }", "signature": "void test_flushConsumerOffset()", "full_signature": "@Test public void test_flushConsumerOffset()", "class_method_signature": "ConsumerOffsetManagerTest.test_flushConsumerOffset()", "testcase": true, "constructor": false, "invocations": ["initialize", "println", "start", "commitOffset", "nextLong", "commitOffset", "nextLong", "commitOffset", "nextLong", "persist", "shutdown"]}, "focal_class": {"identifier": "ConsumerOffsetManager", "superclass": "extends ConfigManager", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(LoggerName.BrokerLoggerName);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LoggerName.BrokerLoggerName)", "var_name": "log"}, {"original_string": "private static final String TOPIC_GROUP_SEPARATOR = \"@\";", "modifier": "private static final", "type": "String", "declarator": "TOPIC_GROUP_SEPARATOR = \"@\"", "var_name": "TOPIC_GROUP_SEPARATOR"}, {"original_string": "private ConcurrentHashMap<String/* topic@group */, ConcurrentHashMap<Integer /*queueid */, Long /*consumeoffset*/>> offsetTable =\n            new ConcurrentHashMap<String, ConcurrentHashMap<Integer, Long>>(512);", "modifier": "private", "type": "ConcurrentHashMap<String/* topic@group */, ConcurrentHashMap<Integer /*queueid */, Long /*consumeoffset*/>>", "declarator": "offsetTable =\n            new ConcurrentHashMap<String, ConcurrentHashMap<Integer, Long>>(512)", "var_name": "offsetTable"}, {"original_string": "private transient BrokerController brokerController;", "modifier": "private transient", "type": "BrokerController", "declarator": "brokerController", "var_name": "brokerController"}], "methods": [{"identifier": "ConsumerOffsetManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " ConsumerOffsetManager()", "full_signature": "public  ConsumerOffsetManager()", "class_method_signature": "ConsumerOffsetManager.ConsumerOffsetManager()", "testcase": false, "constructor": true}, {"identifier": "ConsumerOffsetManager", "parameters": "(BrokerController brokerController)", "modifiers": "public", "return": "", "signature": " ConsumerOffsetManager(BrokerController brokerController)", "full_signature": "public  ConsumerOffsetManager(BrokerController brokerController)", "class_method_signature": "ConsumerOffsetManager.ConsumerOffsetManager(BrokerController brokerController)", "testcase": false, "constructor": true}, {"identifier": "scanUnsubscribedTopic", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void scanUnsubscribedTopic()", "full_signature": "public void scanUnsubscribedTopic()", "class_method_signature": "ConsumerOffsetManager.scanUnsubscribedTopic()", "testcase": false, "constructor": false}, {"identifier": "offsetBehindMuchThanData", "parameters": "(final String topic, ConcurrentHashMap<Integer, Long> table)", "modifiers": "private", "return": "boolean", "signature": "boolean offsetBehindMuchThanData(final String topic, ConcurrentHashMap<Integer, Long> table)", "full_signature": "private boolean offsetBehindMuchThanData(final String topic, ConcurrentHashMap<Integer, Long> table)", "class_method_signature": "ConsumerOffsetManager.offsetBehindMuchThanData(final String topic, ConcurrentHashMap<Integer, Long> table)", "testcase": false, "constructor": false}, {"identifier": "whichTopicByConsumer", "parameters": "(final String group)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> whichTopicByConsumer(final String group)", "full_signature": "public Set<String> whichTopicByConsumer(final String group)", "class_method_signature": "ConsumerOffsetManager.whichTopicByConsumer(final String group)", "testcase": false, "constructor": false}, {"identifier": "whichGroupByTopic", "parameters": "(final String topic)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> whichGroupByTopic(final String topic)", "full_signature": "public Set<String> whichGroupByTopic(final String topic)", "class_method_signature": "ConsumerOffsetManager.whichGroupByTopic(final String topic)", "testcase": false, "constructor": false}, {"identifier": "commitOffset", "parameters": "(final String group, final String topic, final int queueId, final long offset)", "modifiers": "public", "return": "void", "signature": "void commitOffset(final String group, final String topic, final int queueId, final long offset)", "full_signature": "public void commitOffset(final String group, final String topic, final int queueId, final long offset)", "class_method_signature": "ConsumerOffsetManager.commitOffset(final String group, final String topic, final int queueId, final long offset)", "testcase": false, "constructor": false}, {"identifier": "queryOffset", "parameters": "(final String group, final String topic, final int queueId)", "modifiers": "public", "return": "long", "signature": "long queryOffset(final String group, final String topic, final int queueId)", "full_signature": "public long queryOffset(final String group, final String topic, final int queueId)", "class_method_signature": "ConsumerOffsetManager.queryOffset(final String group, final String topic, final int queueId)", "testcase": false, "constructor": false}, {"identifier": "commitOffset", "parameters": "(final String key, final int queueId, final long offset)", "modifiers": "private", "return": "void", "signature": "void commitOffset(final String key, final int queueId, final long offset)", "full_signature": "private void commitOffset(final String key, final int queueId, final long offset)", "class_method_signature": "ConsumerOffsetManager.commitOffset(final String key, final int queueId, final long offset)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String encode()", "full_signature": "public String encode()", "class_method_signature": "ConsumerOffsetManager.encode()", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(final boolean prettyFormat)", "modifiers": "public", "return": "String", "signature": "String encode(final boolean prettyFormat)", "full_signature": "public String encode(final boolean prettyFormat)", "class_method_signature": "ConsumerOffsetManager.encode(final boolean prettyFormat)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String jsonString)", "modifiers": "@Override //\u628a\u4ece /root/store/config/consumerOffset.json \u89e3\u6790\u7684\u914d\u7f6e\u5185\u5bb9\u5e8f\u5217\u5316\u5230 ConsumerOffsetManager.offsetTable public", "return": "void", "signature": "void decode(String jsonString)", "full_signature": "@Override //\u628a\u4ece /root/store/config/consumerOffset.json \u89e3\u6790\u7684\u914d\u7f6e\u5185\u5bb9\u5e8f\u5217\u5316\u5230 ConsumerOffsetManager.offsetTable public void decode(String jsonString)", "class_method_signature": "ConsumerOffsetManager.decode(String jsonString)", "testcase": false, "constructor": false}, {"identifier": "configFilePath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String configFilePath()", "full_signature": "@Override public String configFilePath()", "class_method_signature": "ConsumerOffsetManager.configFilePath()", "testcase": false, "constructor": false}, {"identifier": "getOffsetTable", "parameters": "()", "modifiers": "public", "return": "ConcurrentHashMap<String, ConcurrentHashMap<Integer, Long>>", "signature": "ConcurrentHashMap<String, ConcurrentHashMap<Integer, Long>> getOffsetTable()", "full_signature": "public ConcurrentHashMap<String, ConcurrentHashMap<Integer, Long>> getOffsetTable()", "class_method_signature": "ConsumerOffsetManager.getOffsetTable()", "testcase": false, "constructor": false}, {"identifier": "setOffsetTable", "parameters": "(ConcurrentHashMap<String, ConcurrentHashMap<Integer, Long>> offsetTable)", "modifiers": "public", "return": "void", "signature": "void setOffsetTable(ConcurrentHashMap<String, ConcurrentHashMap<Integer, Long>> offsetTable)", "full_signature": "public void setOffsetTable(ConcurrentHashMap<String, ConcurrentHashMap<Integer, Long>> offsetTable)", "class_method_signature": "ConsumerOffsetManager.setOffsetTable(ConcurrentHashMap<String, ConcurrentHashMap<Integer, Long>> offsetTable)", "testcase": false, "constructor": false}, {"identifier": "queryMinOffsetInAllGroup", "parameters": "(final String topic, final String filterGroups)", "modifiers": "public", "return": "Map<Integer, Long>", "signature": "Map<Integer, Long> queryMinOffsetInAllGroup(final String topic, final String filterGroups)", "full_signature": "public Map<Integer, Long> queryMinOffsetInAllGroup(final String topic, final String filterGroups)", "class_method_signature": "ConsumerOffsetManager.queryMinOffsetInAllGroup(final String topic, final String filterGroups)", "testcase": false, "constructor": false}, {"identifier": "queryOffset", "parameters": "(final String group, final String topic)", "modifiers": "public", "return": "Map<Integer, Long>", "signature": "Map<Integer, Long> queryOffset(final String group, final String topic)", "full_signature": "public Map<Integer, Long> queryOffset(final String group, final String topic)", "class_method_signature": "ConsumerOffsetManager.queryOffset(final String group, final String topic)", "testcase": false, "constructor": false}, {"identifier": "cloneOffset", "parameters": "(final String srcGroup, final String destGroup, final String topic)", "modifiers": "public", "return": "void", "signature": "void cloneOffset(final String srcGroup, final String destGroup, final String topic)", "full_signature": "public void cloneOffset(final String srcGroup, final String destGroup, final String topic)", "class_method_signature": "ConsumerOffsetManager.cloneOffset(final String srcGroup, final String destGroup, final String topic)", "testcase": false, "constructor": false}], "file": "rocketmq-src/RocketMQ-3.4.6/rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/offset/ConsumerOffsetManager.java"}, "focal_method": {"identifier": "commitOffset", "parameters": "(final String group, final String topic, final int queueId, final long offset)", "modifiers": "public", "return": "void", "body": "public void commitOffset(final String group, final String topic, final int queueId, final long offset) {\n        // topic@group\n        String key = topic + TOPIC_GROUP_SEPARATOR + group;\n        this.commitOffset(key, queueId, offset);\n    }", "signature": "void commitOffset(final String group, final String topic, final int queueId, final long offset)", "full_signature": "public void commitOffset(final String group, final String topic, final int queueId, final long offset)", "class_method_signature": "ConsumerOffsetManager.commitOffset(final String group, final String topic, final int queueId, final long offset)", "testcase": false, "constructor": false, "invocations": ["commitOffset"]}, "repository": {"repo_id": 88115454, "url": "https://github.com/y123456yz/reading-and-annotate-rocketmq-3.4.6", "language": "Java", "is_fork": false, "fork_count": 84, "stargazer_count": 147, "size": 3527, "license": "licensed"}}