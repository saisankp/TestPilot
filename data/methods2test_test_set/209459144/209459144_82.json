{"test_class": {"identifier": "ClusterRestApiTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ClusterServer mockClusterServer;", "modifier": "private static", "type": "ClusterServer", "declarator": "mockClusterServer", "var_name": "mockClusterServer"}, {"original_string": "private static ClusterRestApi clusterRestApi;", "modifier": "private static", "type": "ClusterRestApi", "declarator": "clusterRestApi", "var_name": "clusterRestApi"}, {"original_string": "private static final GsonBuilder gsonBuilder = new GsonBuilder();", "modifier": "private static final", "type": "GsonBuilder", "declarator": "gsonBuilder = new GsonBuilder()", "var_name": "gsonBuilder"}, {"original_string": "private static Gson gson = gsonBuilder.setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();", "modifier": "private static", "type": "Gson", "declarator": "gson = gsonBuilder.setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create()", "var_name": "gson"}, {"original_string": "private static HashMap<String, HashMap<String, Object>> clusterMetas = new HashMap<>();", "modifier": "private static", "type": "HashMap<String, HashMap<String, Object>>", "declarator": "clusterMetas = new HashMap<>()", "var_name": "clusterMetas"}, {"original_string": "private static HashMap<String, Object> meta1 = new HashMap<>();", "modifier": "private static", "type": "HashMap<String, Object>", "declarator": "meta1 = new HashMap<>()", "var_name": "meta1"}, {"original_string": "private static HashMap<String, Object> meta2 = new HashMap<>();", "modifier": "private static", "type": "HashMap<String, Object>", "declarator": "meta2 = new HashMap<>()", "var_name": "meta2"}, {"original_string": "private static String nodeName1 = \"dummy\";", "modifier": "private static", "type": "String", "declarator": "nodeName1 = \"dummy\"", "var_name": "nodeName1"}, {"original_string": "private static LocalDateTime SERVER_START_TIME1 = LocalDateTime.now();", "modifier": "private static", "type": "LocalDateTime", "declarator": "SERVER_START_TIME1 = LocalDateTime.now()", "var_name": "SERVER_START_TIME1"}, {"original_string": "private static LocalDateTime INTP_START_TIME = LocalDateTime.now();", "modifier": "private static", "type": "LocalDateTime", "declarator": "INTP_START_TIME = LocalDateTime.now()", "var_name": "INTP_START_TIME"}, {"original_string": "private static LocalDateTime LATEST_HEARTBEAT = LocalDateTime.now();", "modifier": "private static", "type": "LocalDateTime", "declarator": "LATEST_HEARTBEAT = LocalDateTime.now()", "var_name": "LATEST_HEARTBEAT"}, {"original_string": "private static long cpuUsed1 = 20;", "modifier": "private static", "type": "long", "declarator": "cpuUsed1 = 20", "var_name": "cpuUsed1"}, {"original_string": "private static long cpuCapacity1 = 40;", "modifier": "private static", "type": "long", "declarator": "cpuCapacity1 = 40", "var_name": "cpuCapacity1"}, {"original_string": "private static long memoryUsed1 = 536870912;", "modifier": "private static", "type": "long", "declarator": "memoryUsed1 = 536870912", "var_name": "memoryUsed1"}, {"original_string": "private static long memoryCapacity1 = 1073741824;", "modifier": "private static", "type": "long", "declarator": "memoryCapacity1 = 1073741824", "var_name": "memoryCapacity1"}, {"original_string": "private static LocalDateTime SERVER_START_TIME2 = LocalDateTime.now();", "modifier": "private static", "type": "LocalDateTime", "declarator": "SERVER_START_TIME2 = LocalDateTime.now()", "var_name": "SERVER_START_TIME2"}, {"original_string": "private static long cpuUsed2 = 25;", "modifier": "private static", "type": "long", "declarator": "cpuUsed2 = 25", "var_name": "cpuUsed2"}, {"original_string": "private static long cpuCapacity2 = 40;", "modifier": "private static", "type": "long", "declarator": "cpuCapacity2 = 40", "var_name": "cpuCapacity2"}, {"original_string": "private static long memoryUsed2 = 268435456;", "modifier": "private static", "type": "long", "declarator": "memoryUsed2 = 268435456", "var_name": "memoryUsed2"}, {"original_string": "private static long memoryCapacity2 = 1073741824;", "modifier": "private static", "type": "long", "declarator": "memoryCapacity2 = 1073741824", "var_name": "memoryCapacity2"}, {"original_string": "private static String nodeName2 = \"dummydummy\";", "modifier": "private static", "type": "String", "declarator": "nodeName2 = \"dummydummy\"", "var_name": "nodeName2"}], "file": "submarine-server/server-core/src/test/java/org/apache/submarine/server/rest/ClusterRestApiTest.java"}, "test_case": {"identifier": "testGetClusterNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetClusterNode() {\n    when(mockClusterServer.getClusterMeta(ClusterMetaType.INTP_PROCESS_META, \"\")).thenReturn(clusterMetas);\n    Response response = clusterRestApi.getClusterNode(nodeName1, \"\");\n    ArrayList<HashMap<String, Object>> result = getResultListFromResponse(response);\n    Map<String, Object> properties = (LinkedTreeMap) result.get(0).get(ClusterMeta.PROPERTIES);\n\n    assertEquals(clusterMetas.get(nodeName1).get(ClusterMeta.NODE_NAME),\n        result.get(0).get(ClusterMeta.NODE_NAME));\n    assertEquals(\"ONLINE\", properties.get(\"STATUS\"));\n    assertEquals(INTP_START_TIME.toString(), properties.get(\"INTP_START_TIME\"));\n    assertEquals(LATEST_HEARTBEAT.toString(), properties.get(\"LATEST_HEARTBEAT\"));\n  }", "signature": "void testGetClusterNode()", "full_signature": "@Test public void testGetClusterNode()", "class_method_signature": "ClusterRestApiTest.testGetClusterNode()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getClusterMeta", "getClusterNode", "getResultListFromResponse", "get", "get", "assertEquals", "get", "get", "get", "get", "assertEquals", "get", "assertEquals", "toString", "get", "assertEquals", "toString", "get"]}, "focal_class": {"identifier": "ClusterRestApi", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ClusterRestApi.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ClusterRestApi.class)", "var_name": "LOG"}, {"original_string": "Gson gson = new Gson();", "modifier": "", "type": "Gson", "declarator": "gson = new Gson()", "var_name": "gson"}, {"original_string": "private ClusterServer clusterServer = ClusterServer.getInstance();", "modifier": "private", "type": "ClusterServer", "declarator": "clusterServer = ClusterServer.getInstance()", "var_name": "clusterServer"}], "methods": [{"identifier": "setClusterServer", "parameters": "(ClusterServer clusterServer)", "modifiers": "@VisibleForTesting public", "return": "void", "signature": "void setClusterServer(ClusterServer clusterServer)", "full_signature": "@VisibleForTesting public void setClusterServer(ClusterServer clusterServer)", "class_method_signature": "ClusterRestApi.setClusterServer(ClusterServer clusterServer)", "testcase": false, "constructor": false}, {"identifier": "getClusterAddress", "parameters": "()", "modifiers": "@GET @Path(\"/\" + RestConstants.ADDRESS) @SubmarineApi public", "return": "Response", "signature": "Response getClusterAddress()", "full_signature": "@GET @Path(\"/\" + RestConstants.ADDRESS) @SubmarineApi public Response getClusterAddress()", "class_method_signature": "ClusterRestApi.getClusterAddress()", "testcase": false, "constructor": false}, {"identifier": "getClusterNodes", "parameters": "()", "modifiers": "@GET @Path(\"/\" + RestConstants.NODES) @SubmarineApi public", "return": "Response", "signature": "Response getClusterNodes()", "full_signature": "@GET @Path(\"/\" + RestConstants.NODES) @SubmarineApi public Response getClusterNodes()", "class_method_signature": "ClusterRestApi.getClusterNodes()", "testcase": false, "constructor": false}, {"identifier": "getClusterNode", "parameters": "(@PathParam(\"nodeName\") String nodeName,\n                                 @PathParam(\"intpName\") String intpName)", "modifiers": "@GET @Path(\"/\" + RestConstants.NODE + \"/{nodeName}/{intpName}\") @SubmarineApi public", "return": "Response", "signature": "Response getClusterNode(@PathParam(\"nodeName\") String nodeName,\n                                 @PathParam(\"intpName\") String intpName)", "full_signature": "@GET @Path(\"/\" + RestConstants.NODE + \"/{nodeName}/{intpName}\") @SubmarineApi public Response getClusterNode(@PathParam(\"nodeName\") String nodeName,\n                                 @PathParam(\"intpName\") String intpName)", "class_method_signature": "ClusterRestApi.getClusterNode(@PathParam(\"nodeName\") String nodeName,\n                                 @PathParam(\"intpName\") String intpName)", "testcase": false, "constructor": false}, {"identifier": "formatLocalDateTime", "parameters": "(LocalDateTime localDateTime)", "modifiers": "private", "return": "String", "signature": "String formatLocalDateTime(LocalDateTime localDateTime)", "full_signature": "private String formatLocalDateTime(LocalDateTime localDateTime)", "class_method_signature": "ClusterRestApi.formatLocalDateTime(LocalDateTime localDateTime)", "testcase": false, "constructor": false}], "file": "submarine-server/server-core/src/main/java/org/apache/submarine/server/rest/ClusterRestApi.java"}, "focal_method": {"identifier": "getClusterNode", "parameters": "(@PathParam(\"nodeName\") String nodeName,\n                                 @PathParam(\"intpName\") String intpName)", "modifiers": "@GET @Path(\"/\" + RestConstants.NODE + \"/{nodeName}/{intpName}\") @SubmarineApi public", "return": "Response", "body": "@GET\n  @Path(\"/\" + RestConstants.NODE + \"/{nodeName}/{intpName}\")\n  @SubmarineApi\n  public Response getClusterNode(@PathParam(\"nodeName\") String nodeName,\n                                 @PathParam(\"intpName\") String intpName){\n    ArrayList<HashMap<String, Object>> intpProcesses = new ArrayList<>();\n\n    Map<String, HashMap<String, Object>> intpMeta = null;\n    intpMeta = clusterServer.getClusterMeta(ClusterMetaType.INTP_PROCESS_META, \"\");\n\n    // Number of calculation processes\n    for (Map.Entry<String, HashMap<String, Object>> intpMetaEntity : intpMeta.entrySet()) {\n      String intpNodeName = (String) intpMetaEntity.getValue().get(ClusterMeta.NODE_NAME);\n\n      if (null != intpNodeName && intpNodeName.equals(nodeName)) {\n        HashMap<String, Object> node = new HashMap<String, Object>();\n        node.put(ClusterMeta.NODE_NAME, intpNodeName);\n        node.put(ClusterMeta.PROPERTIES, intpMetaEntity.getValue());\n\n        // format LocalDateTime\n        HashMap<String, Object> properties = intpMetaEntity.getValue();\n        if (properties.containsKey(ClusterMeta.INTP_START_TIME)) {\n          Object intpStartTime = properties.get(ClusterMeta.INTP_START_TIME);\n          if (intpStartTime instanceof LocalDateTime) {\n            LocalDateTime localDateTime = (LocalDateTime) intpStartTime;\n            String dateTime = formatLocalDateTime(localDateTime);\n            properties.put(ClusterMeta.INTP_START_TIME, dateTime);\n          } else {\n            properties.put(ClusterMeta.INTP_START_TIME, \"Wrong time type!\");\n          }\n        }\n        if (properties.containsKey(ClusterMeta.LATEST_HEARTBEAT)) {\n          Object latestHeartbeat = properties.get(ClusterMeta.LATEST_HEARTBEAT);\n          if (latestHeartbeat instanceof LocalDateTime) {\n            LocalDateTime localDateTime = (LocalDateTime) latestHeartbeat;\n            String dateTime = formatLocalDateTime(localDateTime);\n            properties.put(ClusterMeta.LATEST_HEARTBEAT, dateTime);\n          } else {\n            properties.put(ClusterMeta.LATEST_HEARTBEAT, \"Wrong time type!\");\n          }\n        }\n\n        intpProcesses.add(node);\n      }\n    }\n\n    return new JsonResponse.Builder<ArrayList<HashMap<String, Object>>>(Response.Status.OK)\n        .success(true).result(intpProcesses).build();\n  }", "signature": "Response getClusterNode(@PathParam(\"nodeName\") String nodeName,\n                                 @PathParam(\"intpName\") String intpName)", "full_signature": "@GET @Path(\"/\" + RestConstants.NODE + \"/{nodeName}/{intpName}\") @SubmarineApi public Response getClusterNode(@PathParam(\"nodeName\") String nodeName,\n                                 @PathParam(\"intpName\") String intpName)", "class_method_signature": "ClusterRestApi.getClusterNode(@PathParam(\"nodeName\") String nodeName,\n                                 @PathParam(\"intpName\") String intpName)", "testcase": false, "constructor": false, "invocations": ["getClusterMeta", "entrySet", "get", "getValue", "equals", "put", "put", "getValue", "getValue", "containsKey", "get", "formatLocalDateTime", "put", "put", "containsKey", "get", "formatLocalDateTime", "put", "put", "add", "build", "result", "success"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}