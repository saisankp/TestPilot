{"test_class": {"identifier": "ValueResolutionTest", "superclass": "", "interfaces": "", "fields": [], "file": "geoclient-service/src/test/java/gov/nyc/doitt/gis/geoclient/service/search/ValueResolutionTest.java"}, "test_case": {"identifier": "testAdd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdd() {\n        ValueResolution res = new ValueResolution();\n        assertThat(res.totalCount()).isEqualTo(0);\n        assertThat(res.resolvedCount()).isEqualTo(0);\n        assertThat(res.unresolvedCount()).isEqualTo(0);\n        assertTrue(res.resolved().isEmpty());\n        InputValue inputResolved = new InputValue(TokenType.AND, \"and\");\n        assertTrue(inputResolved.isResolved());\n        InputValue inputUnresolved = new InputValue(new Token(TokenType.BETWEEN, \"bet\", 0, 3), null);\n        assertFalse(inputUnresolved.isResolved());\n        res.add(inputResolved);\n        assertThat(res.totalCount()).isEqualTo(1);\n        assertThat(res.resolvedCount()).isEqualTo(1);\n        assertThat(res.unresolvedCount()).isEqualTo(0);\n        assertTrue(res.resolved().contains(inputResolved));\n        res.add(inputUnresolved);\n        assertThat(res.totalCount()).isEqualTo(2);\n        assertThat(res.resolvedCount()).isEqualTo(1);\n        assertThat(res.unresolvedCount()).isEqualTo(1);\n        assertTrue(res.resolved().contains(inputResolved));\n        assertFalse(res.resolved().contains(inputUnresolved));\n        assertThat(res.resolvedValue(0)).isSameAs(inputResolved);\n        assertThat(res.unresolvedValue(0)).isSameAs(inputUnresolved);\n    }", "signature": "void testAdd()", "full_signature": "@Test public void testAdd()", "class_method_signature": "ValueResolutionTest.testAdd()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "totalCount", "isEqualTo", "assertThat", "resolvedCount", "isEqualTo", "assertThat", "unresolvedCount", "assertTrue", "isEmpty", "resolved", "assertTrue", "isResolved", "assertFalse", "isResolved", "add", "isEqualTo", "assertThat", "totalCount", "isEqualTo", "assertThat", "resolvedCount", "isEqualTo", "assertThat", "unresolvedCount", "assertTrue", "contains", "resolved", "add", "isEqualTo", "assertThat", "totalCount", "isEqualTo", "assertThat", "resolvedCount", "isEqualTo", "assertThat", "unresolvedCount", "assertTrue", "contains", "resolved", "assertFalse", "contains", "resolved", "isSameAs", "assertThat", "resolvedValue", "isSameAs", "assertThat", "unresolvedValue"]}, "focal_class": {"identifier": "ValueResolution", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<InputValue> resolved = new ArrayList<>();", "modifier": "private final", "type": "List<InputValue>", "declarator": "resolved = new ArrayList<>()", "var_name": "resolved"}, {"original_string": "private final List<InputValue> unresolved = new ArrayList<>();", "modifier": "private final", "type": "List<InputValue>", "declarator": "unresolved = new ArrayList<>()", "var_name": "unresolved"}], "methods": [{"identifier": "add", "parameters": "(InputValue inputValue)", "modifiers": "public", "return": "void", "signature": "void add(InputValue inputValue)", "full_signature": "public void add(InputValue inputValue)", "class_method_signature": "ValueResolution.add(InputValue inputValue)", "testcase": false, "constructor": false}, {"identifier": "resolved", "parameters": "()", "modifiers": "public", "return": "List<InputValue>", "signature": "List<InputValue> resolved()", "full_signature": "public List<InputValue> resolved()", "class_method_signature": "ValueResolution.resolved()", "testcase": false, "constructor": false}, {"identifier": "resolvedValue", "parameters": "(int index)", "modifiers": "public", "return": "InputValue", "signature": "InputValue resolvedValue(int index)", "full_signature": "public InputValue resolvedValue(int index)", "class_method_signature": "ValueResolution.resolvedValue(int index)", "testcase": false, "constructor": false}, {"identifier": "unresolvedValue", "parameters": "(int index)", "modifiers": "public", "return": "InputValue", "signature": "InputValue unresolvedValue(int index)", "full_signature": "public InputValue unresolvedValue(int index)", "class_method_signature": "ValueResolution.unresolvedValue(int index)", "testcase": false, "constructor": false}, {"identifier": "resolvedCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int resolvedCount()", "full_signature": "public int resolvedCount()", "class_method_signature": "ValueResolution.resolvedCount()", "testcase": false, "constructor": false}, {"identifier": "unresolvedCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int unresolvedCount()", "full_signature": "public int unresolvedCount()", "class_method_signature": "ValueResolution.unresolvedCount()", "testcase": false, "constructor": false}, {"identifier": "totalCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int totalCount()", "full_signature": "public int totalCount()", "class_method_signature": "ValueResolution.totalCount()", "testcase": false, "constructor": false}], "file": "geoclient-service/src/main/java/gov/nyc/doitt/gis/geoclient/service/search/ValueResolution.java"}, "focal_method": {"identifier": "add", "parameters": "(InputValue inputValue)", "modifiers": "public", "return": "void", "body": "public void add(InputValue inputValue)\n    {\n        if (inputValue.isResolved())\n        {\n            resolved.add(inputValue);\n        } else\n        {\n            unresolved.add(inputValue);\n        }\n    }", "signature": "void add(InputValue inputValue)", "full_signature": "public void add(InputValue inputValue)", "class_method_signature": "ValueResolution.add(InputValue inputValue)", "testcase": false, "constructor": false, "invocations": ["isResolved", "add", "add"]}, "repository": {"repo_id": 49475567, "url": "https://github.com/CityOfNewYork/geoclient", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 42, "size": 9801, "license": "licensed"}}