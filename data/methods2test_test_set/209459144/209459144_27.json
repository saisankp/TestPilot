{"test_class": {"identifier": "ClassPathUtilitiesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CLASSPATH_KEY = \"java.class.path\";", "modifier": "private static final", "type": "String", "declarator": "CLASSPATH_KEY = \"java.class.path\"", "var_name": "CLASSPATH_KEY"}, {"original_string": "private FileUtilitiesForTests fileUtils = new FileUtilitiesForTests();", "modifier": "private", "type": "FileUtilitiesForTests", "declarator": "fileUtils = new FileUtilitiesForTests()", "var_name": "fileUtils"}, {"original_string": "private static String originalClasspath;", "modifier": "private static", "type": "String", "declarator": "originalClasspath", "var_name": "originalClasspath"}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/test/java/org/apache/submarine/server/submitter/yarnservice/utils/ClassPathUtilitiesTest.java"}, "test_case": {"identifier": "findFileOnClasspath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void findFileOnClasspath() throws Exception {\n    File testFile = fileUtils.createFileInTempDir(\"testFile\");\n\n    addFileToClasspath(testFile);\n    File resultFile = ClassPathUtilities.findFileOnClassPath(\"testFile\");\n\n    assertNotNull(resultFile);\n    assertEquals(testFile.getAbsolutePath(), resultFile.getAbsolutePath());\n  }", "signature": "void findFileOnClasspath()", "full_signature": "@Test public void findFileOnClasspath()", "class_method_signature": "ClassPathUtilitiesTest.findFileOnClasspath()", "testcase": true, "constructor": false, "invocations": ["createFileInTempDir", "addFileToClasspath", "findFileOnClassPath", "assertNotNull", "assertEquals", "getAbsolutePath", "getAbsolutePath"]}, "focal_class": {"identifier": "ClassPathUtilities", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ClassPathUtilities", "parameters": "()", "modifiers": "private", "return": "", "signature": " ClassPathUtilities()", "full_signature": "private  ClassPathUtilities()", "class_method_signature": "ClassPathUtilities.ClassPathUtilities()", "testcase": false, "constructor": true}, {"identifier": "findFileOnClassPath", "parameters": "(final String fileName)", "modifiers": "public static", "return": "File", "signature": "File findFileOnClassPath(final String fileName)", "full_signature": "public static File findFileOnClassPath(final String fileName)", "class_method_signature": "ClassPathUtilities.findFileOnClassPath(final String fileName)", "testcase": false, "constructor": false}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/main/java/org/apache/submarine/server/submitter/yarnservice/utils/ClassPathUtilities.java"}, "focal_method": {"identifier": "findFileOnClassPath", "parameters": "(final String fileName)", "modifiers": "public static", "return": "File", "body": "public static File findFileOnClassPath(final String fileName) {\n    final String classpath = System.getProperty(\"java.class.path\");\n    final String pathSeparator = System.getProperty(\"path.separator\");\n    final StringTokenizer tokenizer = new StringTokenizer(classpath,\n        pathSeparator);\n\n    while (tokenizer.hasMoreTokens()) {\n      final String pathElement = tokenizer.nextToken();\n      final File directoryOrJar = new File(pathElement);\n      final File absoluteDirectoryOrJar = directoryOrJar.getAbsoluteFile();\n      if (absoluteDirectoryOrJar.isFile()) {\n        final File target =\n            new File(absoluteDirectoryOrJar.getParent(), fileName);\n        if (target.exists()) {\n          return target;\n        }\n      } else {\n        final File target = new File(directoryOrJar, fileName);\n        if (target.exists()) {\n          return target;\n        }\n      }\n    }\n\n    return null;\n  }", "signature": "File findFileOnClassPath(final String fileName)", "full_signature": "public static File findFileOnClassPath(final String fileName)", "class_method_signature": "ClassPathUtilities.findFileOnClassPath(final String fileName)", "testcase": false, "constructor": false, "invocations": ["getProperty", "getProperty", "hasMoreTokens", "nextToken", "getAbsoluteFile", "isFile", "getParent", "exists", "exists"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}