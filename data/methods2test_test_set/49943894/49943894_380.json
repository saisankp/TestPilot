{"test_class": {"identifier": "VirtualNetworkApplianceManagerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ClusterDao _clusterDao;", "modifier": "@Mock\n    private", "type": "ClusterDao", "declarator": "_clusterDao", "var_name": "_clusterDao"}, {"original_string": "@Mock\n    private ConfigurationDao _configDao;", "modifier": "@Mock\n    private", "type": "ConfigurationDao", "declarator": "_configDao", "var_name": "_configDao"}, {"original_string": "@Mock\n    private DataCenterDao _dcDao;", "modifier": "@Mock\n    private", "type": "DataCenterDao", "declarator": "_dcDao", "var_name": "_dcDao"}, {"original_string": "@Mock\n    private GuestOSDao _guestOSDao;", "modifier": "@Mock\n    private", "type": "GuestOSDao", "declarator": "_guestOSDao", "var_name": "_guestOSDao"}, {"original_string": "@Mock\n    private HostDao _hostDao;", "modifier": "@Mock\n    private", "type": "HostDao", "declarator": "_hostDao", "var_name": "_hostDao"}, {"original_string": "@Mock\n    private IPAddressDao _ipAddressDao;", "modifier": "@Mock\n    private", "type": "IPAddressDao", "declarator": "_ipAddressDao", "var_name": "_ipAddressDao"}, {"original_string": "@Mock\n    private UserIpv6AddressDao _ipv6Dao;", "modifier": "@Mock\n    private", "type": "UserIpv6AddressDao", "declarator": "_ipv6Dao", "var_name": "_ipv6Dao"}, {"original_string": "@Mock\n    private LoadBalancerDao _loadBalancerDao;", "modifier": "@Mock\n    private", "type": "LoadBalancerDao", "declarator": "_loadBalancerDao", "var_name": "_loadBalancerDao"}, {"original_string": "@Mock\n    private LoadBalancerVMMapDao _loadBalancerVMMapDao;", "modifier": "@Mock\n    private", "type": "LoadBalancerVMMapDao", "declarator": "_loadBalancerVMMapDao", "var_name": "_loadBalancerVMMapDao"}, {"original_string": "@Mock\n    private MonitoringServiceDao _monitorServiceDao;", "modifier": "@Mock\n    private", "type": "MonitoringServiceDao", "declarator": "_monitorServiceDao", "var_name": "_monitorServiceDao"}, {"original_string": "@Mock\n    private ManagementServerHostDao _msHostDao;", "modifier": "@Mock\n    private", "type": "ManagementServerHostDao", "declarator": "_msHostDao", "var_name": "_msHostDao"}, {"original_string": "@Mock\n    private NetworkDao _networkDao;", "modifier": "@Mock\n    private", "type": "NetworkDao", "declarator": "_networkDao", "var_name": "_networkDao"}, {"original_string": "@Mock\n    private NetworkOfferingDao _networkOfferingDao;", "modifier": "@Mock\n    private", "type": "NetworkOfferingDao", "declarator": "_networkOfferingDao", "var_name": "_networkOfferingDao"}, {"original_string": "@Mock\n    private NicDao _nicDao;", "modifier": "@Mock\n    private", "type": "NicDao", "declarator": "_nicDao", "var_name": "_nicDao"}, {"original_string": "@Mock\n    private NicIpAliasDao _nicIpAliasDao;", "modifier": "@Mock\n    private", "type": "NicIpAliasDao", "declarator": "_nicIpAliasDao", "var_name": "_nicIpAliasDao"}, {"original_string": "@Mock\n    private OpRouterMonitorServiceDao _opRouterMonitorServiceDao;", "modifier": "@Mock\n    private", "type": "OpRouterMonitorServiceDao", "declarator": "_opRouterMonitorServiceDao", "var_name": "_opRouterMonitorServiceDao"}, {"original_string": "@Mock\n    private PortForwardingRulesDao _pfRulesDao;", "modifier": "@Mock\n    private", "type": "PortForwardingRulesDao", "declarator": "_pfRulesDao", "var_name": "_pfRulesDao"}, {"original_string": "@Mock\n    private PhysicalNetworkServiceProviderDao _physicalProviderDao;", "modifier": "@Mock\n    private", "type": "PhysicalNetworkServiceProviderDao", "declarator": "_physicalProviderDao", "var_name": "_physicalProviderDao"}, {"original_string": "@Mock\n    private HostPodDao _podDao;", "modifier": "@Mock\n    private", "type": "HostPodDao", "declarator": "_podDao", "var_name": "_podDao"}, {"original_string": "@Mock\n    private DomainRouterDao _routerDao;", "modifier": "@Mock\n    private", "type": "DomainRouterDao", "declarator": "_routerDao", "var_name": "_routerDao"}, {"original_string": "@Mock\n    private FirewallRulesDao _rulesDao;", "modifier": "@Mock\n    private", "type": "FirewallRulesDao", "declarator": "_rulesDao", "var_name": "_rulesDao"}, {"original_string": "@Mock\n    private Site2SiteCustomerGatewayDao _s2sCustomerGatewayDao;", "modifier": "@Mock\n    private", "type": "Site2SiteCustomerGatewayDao", "declarator": "_s2sCustomerGatewayDao", "var_name": "_s2sCustomerGatewayDao"}, {"original_string": "@Mock\n    private Site2SiteVpnConnectionDao _s2sVpnConnectionDao;", "modifier": "@Mock\n    private", "type": "Site2SiteVpnConnectionDao", "declarator": "_s2sVpnConnectionDao", "var_name": "_s2sVpnConnectionDao"}, {"original_string": "@Mock\n    private Site2SiteVpnGatewayDao _s2sVpnGatewayDao;", "modifier": "@Mock\n    private", "type": "Site2SiteVpnGatewayDao", "declarator": "_s2sVpnGatewayDao", "var_name": "_s2sVpnGatewayDao"}, {"original_string": "@Mock\n    private ServiceOfferingDao _serviceOfferingDao;", "modifier": "@Mock\n    private", "type": "ServiceOfferingDao", "declarator": "_serviceOfferingDao", "var_name": "_serviceOfferingDao"}, {"original_string": "@Mock\n    private VMTemplateDao _templateDao;", "modifier": "@Mock\n    private", "type": "VMTemplateDao", "declarator": "_templateDao", "var_name": "_templateDao"}, {"original_string": "@Mock\n    private UserDao _userDao;", "modifier": "@Mock\n    private", "type": "UserDao", "declarator": "_userDao", "var_name": "_userDao"}, {"original_string": "@Mock\n    private UserStatisticsDao _userStatsDao;", "modifier": "@Mock\n    private", "type": "UserStatisticsDao", "declarator": "_userStatsDao", "var_name": "_userStatsDao"}, {"original_string": "@Mock\n    private UserStatsLogDao _userStatsLogDao;", "modifier": "@Mock\n    private", "type": "UserStatsLogDao", "declarator": "_userStatsLogDao", "var_name": "_userStatsLogDao"}, {"original_string": "@Mock\n    private UserVmDao _userVmDao;", "modifier": "@Mock\n    private", "type": "UserVmDao", "declarator": "_userVmDao", "var_name": "_userVmDao"}, {"original_string": "@Mock\n    private VlanDao _vlanDao;", "modifier": "@Mock\n    private", "type": "VlanDao", "declarator": "_vlanDao", "var_name": "_vlanDao"}, {"original_string": "@Mock\n    private VMInstanceDao _vmDao;", "modifier": "@Mock\n    private", "type": "VMInstanceDao", "declarator": "_vmDao", "var_name": "_vmDao"}, {"original_string": "@Mock\n    private UserVmDetailsDao _vmDetailsDao;", "modifier": "@Mock\n    private", "type": "UserVmDetailsDao", "declarator": "_vmDetailsDao", "var_name": "_vmDetailsDao"}, {"original_string": "@Mock\n    private VolumeDao _volumeDao;", "modifier": "@Mock\n    private", "type": "VolumeDao", "declarator": "_volumeDao", "var_name": "_volumeDao"}, {"original_string": "@Mock\n    private RemoteAccessVpnDao _vpnDao;", "modifier": "@Mock\n    private", "type": "RemoteAccessVpnDao", "declarator": "_vpnDao", "var_name": "_vpnDao"}, {"original_string": "@Mock\n    private VpnUserDao _vpnUsersDao;", "modifier": "@Mock\n    private", "type": "VpnUserDao", "declarator": "_vpnUsersDao", "var_name": "_vpnUsersDao"}, {"original_string": "@Mock\n    private VirtualRouterProviderDao _vrProviderDao;", "modifier": "@Mock\n    private", "type": "VirtualRouterProviderDao", "declarator": "_vrProviderDao", "var_name": "_vrProviderDao"}, {"original_string": "@Mock private VirtualMachineManager _itMgr;", "modifier": "@Mock private", "type": "VirtualMachineManager", "declarator": "_itMgr", "var_name": "_itMgr"}], "file": "server/src/test/java/com/cloud/network/router/VirtualNetworkApplianceManagerImplTest.java"}, "test_case": {"identifier": "testDestroyRouter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDestroyRouter() throws Exception {\n        //        VirtualRouter r = new DomainRouterVO(1L, 0L, 0L, \"router\", 0L, HypervisorType.Any, 0L, 0L,\n        //                1L, false, 0, false, RedundantState.UNKNOWN, false, false, null);\n        //        when(_routerDao.findById(1L)).thenReturn((DomainRouterVO)r);\n        //        VirtualRouter vr = virtualNetworkApplianceManagerImpl.destroyRouter(1L, new AccountVO(1L), 0L);\n        //        assertNotEquals(vr, null);\n    }", "signature": "void testDestroyRouter()", "full_signature": "@Test public void testDestroyRouter()", "class_method_signature": "VirtualNetworkApplianceManagerImplTest.testDestroyRouter()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "VirtualNetworkApplianceManagerImpl", "superclass": "extends ManagerBase", "interfaces": "implements VirtualNetworkApplianceManager, VirtualNetworkApplianceService, VirtualMachineGuru, Listener,\n        Configurable, StateListener<VirtualMachine.State, VirtualMachine.Event, VirtualMachine>", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(VirtualNetworkApplianceManagerImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(VirtualNetworkApplianceManagerImpl.class)", "var_name": "s_logger"}, {"original_string": "@Inject\n    EntityManager _entityMgr;", "modifier": "@Inject", "type": "EntityManager", "declarator": "_entityMgr", "var_name": "_entityMgr"}, {"original_string": "@Inject\n    DataCenterDao _dcDao = null;", "modifier": "@Inject", "type": "DataCenterDao", "declarator": "_dcDao = null", "var_name": "_dcDao"}, {"original_string": "@Inject\n    VlanDao _vlanDao = null;", "modifier": "@Inject", "type": "VlanDao", "declarator": "_vlanDao = null", "var_name": "_vlanDao"}, {"original_string": "@Inject\n    FirewallRulesDao _rulesDao = null;", "modifier": "@Inject", "type": "FirewallRulesDao", "declarator": "_rulesDao = null", "var_name": "_rulesDao"}, {"original_string": "@Inject\n    LoadBalancerDao _loadBalancerDao = null;", "modifier": "@Inject", "type": "LoadBalancerDao", "declarator": "_loadBalancerDao = null", "var_name": "_loadBalancerDao"}, {"original_string": "@Inject\n    LoadBalancerVMMapDao _loadBalancerVMMapDao = null;", "modifier": "@Inject", "type": "LoadBalancerVMMapDao", "declarator": "_loadBalancerVMMapDao = null", "var_name": "_loadBalancerVMMapDao"}, {"original_string": "@Inject\n    IPAddressDao _ipAddressDao = null;", "modifier": "@Inject", "type": "IPAddressDao", "declarator": "_ipAddressDao = null", "var_name": "_ipAddressDao"}, {"original_string": "@Inject\n    VMTemplateDao _templateDao = null;", "modifier": "@Inject", "type": "VMTemplateDao", "declarator": "_templateDao = null", "var_name": "_templateDao"}, {"original_string": "@Inject\n    DomainRouterDao _routerDao = null;", "modifier": "@Inject", "type": "DomainRouterDao", "declarator": "_routerDao = null", "var_name": "_routerDao"}, {"original_string": "@Inject\n    UserDao _userDao = null;", "modifier": "@Inject", "type": "UserDao", "declarator": "_userDao = null", "var_name": "_userDao"}, {"original_string": "@Inject\n    UserStatisticsDao _userStatsDao = null;", "modifier": "@Inject", "type": "UserStatisticsDao", "declarator": "_userStatsDao = null", "var_name": "_userStatsDao"}, {"original_string": "@Inject\n    HostDao _hostDao = null;", "modifier": "@Inject", "type": "HostDao", "declarator": "_hostDao = null", "var_name": "_hostDao"}, {"original_string": "@Inject\n    ConfigurationDao _configDao;", "modifier": "@Inject", "type": "ConfigurationDao", "declarator": "_configDao", "var_name": "_configDao"}, {"original_string": "@Inject\n    HostPodDao _podDao = null;", "modifier": "@Inject", "type": "HostPodDao", "declarator": "_podDao = null", "var_name": "_podDao"}, {"original_string": "@Inject\n    UserStatsLogDao _userStatsLogDao = null;", "modifier": "@Inject", "type": "UserStatsLogDao", "declarator": "_userStatsLogDao = null", "var_name": "_userStatsLogDao"}, {"original_string": "@Inject\n    AgentManager _agentMgr;", "modifier": "@Inject", "type": "AgentManager", "declarator": "_agentMgr", "var_name": "_agentMgr"}, {"original_string": "@Inject\n    AlertManager _alertMgr;", "modifier": "@Inject", "type": "AlertManager", "declarator": "_alertMgr", "var_name": "_alertMgr"}, {"original_string": "@Inject\n    AccountManager _accountMgr;", "modifier": "@Inject", "type": "AccountManager", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Inject\n    ConfigurationManager _configMgr;", "modifier": "@Inject", "type": "ConfigurationManager", "declarator": "_configMgr", "var_name": "_configMgr"}, {"original_string": "@Inject\n    ConfigurationServer _configServer;", "modifier": "@Inject", "type": "ConfigurationServer", "declarator": "_configServer", "var_name": "_configServer"}, {"original_string": "@Inject\n    ServiceOfferingDao _serviceOfferingDao = null;", "modifier": "@Inject", "type": "ServiceOfferingDao", "declarator": "_serviceOfferingDao = null", "var_name": "_serviceOfferingDao"}, {"original_string": "@Inject\n    UserVmDao _userVmDao;", "modifier": "@Inject", "type": "UserVmDao", "declarator": "_userVmDao", "var_name": "_userVmDao"}, {"original_string": "@Inject\n    VMInstanceDao _vmDao;", "modifier": "@Inject", "type": "VMInstanceDao", "declarator": "_vmDao", "var_name": "_vmDao"}, {"original_string": "@Inject\n    NetworkOfferingDao _networkOfferingDao = null;", "modifier": "@Inject", "type": "NetworkOfferingDao", "declarator": "_networkOfferingDao = null", "var_name": "_networkOfferingDao"}, {"original_string": "@Inject\n    GuestOSDao _guestOSDao = null;", "modifier": "@Inject", "type": "GuestOSDao", "declarator": "_guestOSDao = null", "var_name": "_guestOSDao"}, {"original_string": "@Inject\n    NetworkOrchestrationService _networkMgr;", "modifier": "@Inject", "type": "NetworkOrchestrationService", "declarator": "_networkMgr", "var_name": "_networkMgr"}, {"original_string": "@Inject\n    NetworkModel _networkModel;", "modifier": "@Inject", "type": "NetworkModel", "declarator": "_networkModel", "var_name": "_networkModel"}, {"original_string": "@Inject\n    VirtualMachineManager _itMgr;", "modifier": "@Inject", "type": "VirtualMachineManager", "declarator": "_itMgr", "var_name": "_itMgr"}, {"original_string": "@Inject\n    VpnUserDao _vpnUsersDao;", "modifier": "@Inject", "type": "VpnUserDao", "declarator": "_vpnUsersDao", "var_name": "_vpnUsersDao"}, {"original_string": "@Inject\n    RulesManager _rulesMgr;", "modifier": "@Inject", "type": "RulesManager", "declarator": "_rulesMgr", "var_name": "_rulesMgr"}, {"original_string": "@Inject\n    NetworkDao _networkDao;", "modifier": "@Inject", "type": "NetworkDao", "declarator": "_networkDao", "var_name": "_networkDao"}, {"original_string": "@Inject\n    LoadBalancingRulesManager _lbMgr;", "modifier": "@Inject", "type": "LoadBalancingRulesManager", "declarator": "_lbMgr", "var_name": "_lbMgr"}, {"original_string": "@Inject\n    PortForwardingRulesDao _pfRulesDao;", "modifier": "@Inject", "type": "PortForwardingRulesDao", "declarator": "_pfRulesDao", "var_name": "_pfRulesDao"}, {"original_string": "@Inject\n    RemoteAccessVpnDao _vpnDao;", "modifier": "@Inject", "type": "RemoteAccessVpnDao", "declarator": "_vpnDao", "var_name": "_vpnDao"}, {"original_string": "@Inject\n    NicDao _nicDao;", "modifier": "@Inject", "type": "NicDao", "declarator": "_nicDao", "var_name": "_nicDao"}, {"original_string": "@Inject\n    NicIpAliasDao _nicIpAliasDao;", "modifier": "@Inject", "type": "NicIpAliasDao", "declarator": "_nicIpAliasDao", "var_name": "_nicIpAliasDao"}, {"original_string": "@Inject\n    VolumeDao _volumeDao = null;", "modifier": "@Inject", "type": "VolumeDao", "declarator": "_volumeDao = null", "var_name": "_volumeDao"}, {"original_string": "@Inject\n    UserVmDetailsDao _vmDetailsDao;", "modifier": "@Inject", "type": "UserVmDetailsDao", "declarator": "_vmDetailsDao", "var_name": "_vmDetailsDao"}, {"original_string": "@Inject\n    ClusterDao _clusterDao;", "modifier": "@Inject", "type": "ClusterDao", "declarator": "_clusterDao", "var_name": "_clusterDao"}, {"original_string": "@Inject\n    ResourceManager _resourceMgr;", "modifier": "@Inject", "type": "ResourceManager", "declarator": "_resourceMgr", "var_name": "_resourceMgr"}, {"original_string": "@Inject\n    PhysicalNetworkServiceProviderDao _physicalProviderDao;", "modifier": "@Inject", "type": "PhysicalNetworkServiceProviderDao", "declarator": "_physicalProviderDao", "var_name": "_physicalProviderDao"}, {"original_string": "@Inject\n    VirtualRouterProviderDao _vrProviderDao;", "modifier": "@Inject", "type": "VirtualRouterProviderDao", "declarator": "_vrProviderDao", "var_name": "_vrProviderDao"}, {"original_string": "@Inject\n    ManagementServerHostDao _msHostDao;", "modifier": "@Inject", "type": "ManagementServerHostDao", "declarator": "_msHostDao", "var_name": "_msHostDao"}, {"original_string": "@Inject\n    Site2SiteCustomerGatewayDao _s2sCustomerGatewayDao;", "modifier": "@Inject", "type": "Site2SiteCustomerGatewayDao", "declarator": "_s2sCustomerGatewayDao", "var_name": "_s2sCustomerGatewayDao"}, {"original_string": "@Inject\n    Site2SiteVpnGatewayDao _s2sVpnGatewayDao;", "modifier": "@Inject", "type": "Site2SiteVpnGatewayDao", "declarator": "_s2sVpnGatewayDao", "var_name": "_s2sVpnGatewayDao"}, {"original_string": "@Inject\n    Site2SiteVpnConnectionDao _s2sVpnConnectionDao;", "modifier": "@Inject", "type": "Site2SiteVpnConnectionDao", "declarator": "_s2sVpnConnectionDao", "var_name": "_s2sVpnConnectionDao"}, {"original_string": "@Inject\n    Site2SiteVpnManager _s2sVpnMgr;", "modifier": "@Inject", "type": "Site2SiteVpnManager", "declarator": "_s2sVpnMgr", "var_name": "_s2sVpnMgr"}, {"original_string": "@Inject\n    UserIpv6AddressDao _ipv6Dao;", "modifier": "@Inject", "type": "UserIpv6AddressDao", "declarator": "_ipv6Dao", "var_name": "_ipv6Dao"}, {"original_string": "@Inject\n    NetworkService _networkSvc;", "modifier": "@Inject", "type": "NetworkService", "declarator": "_networkSvc", "var_name": "_networkSvc"}, {"original_string": "@Inject\n    IpAddressManager _ipAddrMgr;", "modifier": "@Inject", "type": "IpAddressManager", "declarator": "_ipAddrMgr", "var_name": "_ipAddrMgr"}, {"original_string": "@Inject\n    ConfigDepot _configDepot;", "modifier": "@Inject", "type": "ConfigDepot", "declarator": "_configDepot", "var_name": "_configDepot"}, {"original_string": "@Inject\n    MonitoringServiceDao _monitorServiceDao;", "modifier": "@Inject", "type": "MonitoringServiceDao", "declarator": "_monitorServiceDao", "var_name": "_monitorServiceDao"}, {"original_string": "@Inject\n    AsyncJobManager _asyncMgr;", "modifier": "@Inject", "type": "AsyncJobManager", "declarator": "_asyncMgr", "var_name": "_asyncMgr"}, {"original_string": "@Inject\n    protected VpcDao _vpcDao;", "modifier": "@Inject\n    protected", "type": "VpcDao", "declarator": "_vpcDao", "var_name": "_vpcDao"}, {"original_string": "@Inject\n    protected ApiAsyncJobDispatcher _asyncDispatcher;", "modifier": "@Inject\n    protected", "type": "ApiAsyncJobDispatcher", "declarator": "_asyncDispatcher", "var_name": "_asyncDispatcher"}, {"original_string": "@Inject\n    OpRouterMonitorServiceDao _opRouterMonitorServiceDao;", "modifier": "@Inject", "type": "OpRouterMonitorServiceDao", "declarator": "_opRouterMonitorServiceDao", "var_name": "_opRouterMonitorServiceDao"}, {"original_string": "@Inject\n    protected NetworkTopologyContext _networkTopologyContext;", "modifier": "@Inject\n    protected", "type": "NetworkTopologyContext", "declarator": "_networkTopologyContext", "var_name": "_networkTopologyContext"}, {"original_string": "@Autowired\n    @Qualifier(\"networkHelper\")\n    protected NetworkHelper _nwHelper;", "modifier": "@Autowired\n    @Qualifier(\"networkHelper\")\n    protected", "type": "NetworkHelper", "declarator": "_nwHelper", "var_name": "_nwHelper"}, {"original_string": "@Inject\n    protected RouterControlHelper _routerControlHelper;", "modifier": "@Inject\n    protected", "type": "RouterControlHelper", "declarator": "_routerControlHelper", "var_name": "_routerControlHelper"}, {"original_string": "@Inject\n    protected CommandSetupHelper _commandSetupHelper;", "modifier": "@Inject\n    protected", "type": "CommandSetupHelper", "declarator": "_commandSetupHelper", "var_name": "_commandSetupHelper"}, {"original_string": "@Inject\n    protected RouterDeploymentDefinitionBuilder _routerDeploymentManagerBuilder;", "modifier": "@Inject\n    protected", "type": "RouterDeploymentDefinitionBuilder", "declarator": "_routerDeploymentManagerBuilder", "var_name": "_routerDeploymentManagerBuilder"}, {"original_string": "int _routerRamSize;", "modifier": "", "type": "int", "declarator": "_routerRamSize", "var_name": "_routerRamSize"}, {"original_string": "int _routerCpuMHz;", "modifier": "", "type": "int", "declarator": "_routerCpuMHz", "var_name": "_routerCpuMHz"}, {"original_string": "int _retry = 2;", "modifier": "", "type": "int", "declarator": "_retry = 2", "var_name": "_retry"}, {"original_string": "String _mgmtCidr;", "modifier": "", "type": "String", "declarator": "_mgmtCidr", "var_name": "_mgmtCidr"}, {"original_string": "int _routerStatsInterval = 300;", "modifier": "", "type": "int", "declarator": "_routerStatsInterval = 300", "var_name": "_routerStatsInterval"}, {"original_string": "int _routerCheckInterval = 30;", "modifier": "", "type": "int", "declarator": "_routerCheckInterval = 30", "var_name": "_routerCheckInterval"}, {"original_string": "int _rvrStatusUpdatePoolSize = 10;", "modifier": "", "type": "int", "declarator": "_rvrStatusUpdatePoolSize = 10", "var_name": "_rvrStatusUpdatePoolSize"}, {"original_string": "private String _dnsBasicZoneUpdates = \"all\";", "modifier": "private", "type": "String", "declarator": "_dnsBasicZoneUpdates = \"all\"", "var_name": "_dnsBasicZoneUpdates"}, {"original_string": "private final Set<String> _guestOSNeedGatewayOnNonDefaultNetwork = new HashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "_guestOSNeedGatewayOnNonDefaultNetwork = new HashSet<>()", "var_name": "_guestOSNeedGatewayOnNonDefaultNetwork"}, {"original_string": "private boolean _disableRpFilter = false;", "modifier": "private", "type": "boolean", "declarator": "_disableRpFilter = false", "var_name": "_disableRpFilter"}, {"original_string": "int _routerExtraPublicNics = 2;", "modifier": "", "type": "int", "declarator": "_routerExtraPublicNics = 2", "var_name": "_routerExtraPublicNics"}, {"original_string": "private int _usageAggregationRange = 1440;", "modifier": "private", "type": "int", "declarator": "_usageAggregationRange = 1440", "var_name": "_usageAggregationRange"}, {"original_string": "private String _usageTimeZone = \"GMT\";", "modifier": "private", "type": "String", "declarator": "_usageTimeZone = \"GMT\"", "var_name": "_usageTimeZone"}, {"original_string": "private final long mgmtSrvrId = MacAddress.getMacAddress().toLong();", "modifier": "private final", "type": "long", "declarator": "mgmtSrvrId = MacAddress.getMacAddress().toLong()", "var_name": "mgmtSrvrId"}, {"original_string": "private static final int ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_COOPERATION = 5;", "modifier": "private static final", "type": "int", "declarator": "ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_COOPERATION = 5", "var_name": "ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_COOPERATION"}, {"original_string": "private boolean _dailyOrHourly = false;", "modifier": "private", "type": "boolean", "declarator": "_dailyOrHourly = false", "var_name": "_dailyOrHourly"}, {"original_string": "ScheduledExecutorService _executor;", "modifier": "", "type": "ScheduledExecutorService", "declarator": "_executor", "var_name": "_executor"}, {"original_string": "ScheduledExecutorService _checkExecutor;", "modifier": "", "type": "ScheduledExecutorService", "declarator": "_checkExecutor", "var_name": "_checkExecutor"}, {"original_string": "ScheduledExecutorService _networkStatsUpdateExecutor;", "modifier": "", "type": "ScheduledExecutorService", "declarator": "_networkStatsUpdateExecutor", "var_name": "_networkStatsUpdateExecutor"}, {"original_string": "ExecutorService _rvrStatusUpdateExecutor;", "modifier": "", "type": "ExecutorService", "declarator": "_rvrStatusUpdateExecutor", "var_name": "_rvrStatusUpdateExecutor"}, {"original_string": "BlockingQueue<Long> _vrUpdateQueue = null;", "modifier": "", "type": "BlockingQueue<Long>", "declarator": "_vrUpdateQueue = null", "var_name": "_vrUpdateQueue"}, {"original_string": "static final ConfigKey<Boolean> UseExternalDnsServers = new ConfigKey<>(Boolean.class, \"use.external.dns\", \"Advanced\", \"false\",\n            \"Bypass internal dns, use external dns1 and dns2\", true, ConfigKey.Scope.Zone, null);", "modifier": "static final", "type": "ConfigKey<Boolean>", "declarator": "UseExternalDnsServers = new ConfigKey<>(Boolean.class, \"use.external.dns\", \"Advanced\", \"false\",\n            \"Bypass internal dns, use external dns1 and dns2\", true, ConfigKey.Scope.Zone, null)", "var_name": "UseExternalDnsServers"}, {"original_string": "static final ConfigKey<Boolean> routerVersionCheckEnabled = new ConfigKey<>(\"Advanced\", Boolean.class, \"router.version.check\", \"true\",\n            \"If true, router minimum required version is checked before sending command\", false);", "modifier": "static final", "type": "ConfigKey<Boolean>", "declarator": "routerVersionCheckEnabled = new ConfigKey<>(\"Advanced\", Boolean.class, \"router.version.check\", \"true\",\n            \"If true, router minimum required version is checked before sending command\", false)", "var_name": "routerVersionCheckEnabled"}], "methods": [{"identifier": "destroyRouter", "parameters": "(final long routerId, final Account caller, final Long callerUserId)", "modifiers": "@Override public", "return": "VirtualRouter", "signature": "VirtualRouter destroyRouter(final long routerId, final Account caller, final Long callerUserId)", "full_signature": "@Override public VirtualRouter destroyRouter(final long routerId, final Account caller, final Long callerUserId)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.destroyRouter(final long routerId, final Account caller, final Long callerUserId)", "testcase": false, "constructor": false}, {"identifier": "upgradeRouter", "parameters": "(final UpgradeRouterCmd cmd)", "modifiers": "@Override @DB public", "return": "VirtualRouter", "signature": "VirtualRouter upgradeRouter(final UpgradeRouterCmd cmd)", "full_signature": "@Override @DB public VirtualRouter upgradeRouter(final UpgradeRouterCmd cmd)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.upgradeRouter(final UpgradeRouterCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "stopRouter", "parameters": "(final long routerId, final boolean forced)", "modifiers": "@ActionEvent(eventType = EventTypes.EVENT_ROUTER_STOP, eventDescription = \"stopping router Vm\", async = true) @Override public", "return": "VirtualRouter", "signature": "VirtualRouter stopRouter(final long routerId, final boolean forced)", "full_signature": "@ActionEvent(eventType = EventTypes.EVENT_ROUTER_STOP, eventDescription = \"stopping router Vm\", async = true) @Override public VirtualRouter stopRouter(final long routerId, final boolean forced)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.stopRouter(final long routerId, final boolean forced)", "testcase": false, "constructor": false}, {"identifier": "processStopOrRebootAnswer", "parameters": "(final DomainRouterVO router, final Answer answer)", "modifiers": "@DB public", "return": "void", "signature": "void processStopOrRebootAnswer(final DomainRouterVO router, final Answer answer)", "full_signature": "@DB public void processStopOrRebootAnswer(final DomainRouterVO router, final Answer answer)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.processStopOrRebootAnswer(final DomainRouterVO router, final Answer answer)", "testcase": false, "constructor": false}, {"identifier": "rebootRouter", "parameters": "(final long routerId, final boolean reprogramNetwork)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_ROUTER_REBOOT, eventDescription = \"rebooting router Vm\", async = true) public", "return": "VirtualRouter", "signature": "VirtualRouter rebootRouter(final long routerId, final boolean reprogramNetwork)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_ROUTER_REBOOT, eventDescription = \"rebooting router Vm\", async = true) public VirtualRouter rebootRouter(final long routerId, final boolean reprogramNetwork)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.rebootRouter(final long routerId, final boolean reprogramNetwork)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(final String name, final Map<String, Object> params)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean configure(final String name, final Map<String, Object> params)", "full_signature": "@Override public boolean configure(final String name, final Map<String, Object> params)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.configure(final String name, final Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start()", "full_signature": "@Override public boolean start()", "class_method_signature": "VirtualNetworkApplianceManagerImpl.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stop()", "full_signature": "@Override public boolean stop()", "class_method_signature": "VirtualNetworkApplianceManagerImpl.stop()", "testcase": false, "constructor": false}, {"identifier": "VirtualNetworkApplianceManagerImpl", "parameters": "()", "modifiers": "protected", "return": "", "signature": " VirtualNetworkApplianceManagerImpl()", "full_signature": "protected  VirtualNetworkApplianceManagerImpl()", "class_method_signature": "VirtualNetworkApplianceManagerImpl.VirtualNetworkApplianceManagerImpl()", "testcase": false, "constructor": true}, {"identifier": "updateSite2SiteVpnConnectionState", "parameters": "(final List<DomainRouterVO> routers)", "modifiers": "@DB protected", "return": "void", "signature": "void updateSite2SiteVpnConnectionState(final List<DomainRouterVO> routers)", "full_signature": "@DB protected void updateSite2SiteVpnConnectionState(final List<DomainRouterVO> routers)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.updateSite2SiteVpnConnectionState(final List<DomainRouterVO> routers)", "testcase": false, "constructor": false}, {"identifier": "updateRoutersRedundantState", "parameters": "(final List<DomainRouterVO> routers)", "modifiers": "protected", "return": "void", "signature": "void updateRoutersRedundantState(final List<DomainRouterVO> routers)", "full_signature": "protected void updateRoutersRedundantState(final List<DomainRouterVO> routers)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.updateRoutersRedundantState(final List<DomainRouterVO> routers)", "testcase": false, "constructor": false}, {"identifier": "recoverRedundantNetwork", "parameters": "(final DomainRouterVO masterRouter, final DomainRouterVO backupRouter)", "modifiers": "protected", "return": "void", "signature": "void recoverRedundantNetwork(final DomainRouterVO masterRouter, final DomainRouterVO backupRouter)", "full_signature": "protected void recoverRedundantNetwork(final DomainRouterVO masterRouter, final DomainRouterVO backupRouter)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.recoverRedundantNetwork(final DomainRouterVO masterRouter, final DomainRouterVO backupRouter)", "testcase": false, "constructor": false}, {"identifier": "getRouterAlerts", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void getRouterAlerts()", "full_signature": "protected void getRouterAlerts()", "class_method_signature": "VirtualNetworkApplianceManagerImpl.getRouterAlerts()", "testcase": false, "constructor": false}, {"identifier": "finalizeVirtualMachineProfile", "parameters": "(final VirtualMachineProfile profile, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean finalizeVirtualMachineProfile(final VirtualMachineProfile profile, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override public boolean finalizeVirtualMachineProfile(final VirtualMachineProfile profile, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.finalizeVirtualMachineProfile(final VirtualMachineProfile profile, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "createGuestBootLoadArgs", "parameters": "(final NicProfile guestNic, final String defaultDns1, final String defaultDns2, final DomainRouterVO router)", "modifiers": "protected", "return": "StringBuilder", "signature": "StringBuilder createGuestBootLoadArgs(final NicProfile guestNic, final String defaultDns1, final String defaultDns2, final DomainRouterVO router)", "full_signature": "protected StringBuilder createGuestBootLoadArgs(final NicProfile guestNic, final String defaultDns1, final String defaultDns2, final DomainRouterVO router)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.createGuestBootLoadArgs(final NicProfile guestNic, final String defaultDns1, final String defaultDns2, final DomainRouterVO router)", "testcase": false, "constructor": false}, {"identifier": "createRedundantRouterArgs", "parameters": "(final NicProfile nic, final DomainRouterVO router)", "modifiers": "protected", "return": "StringBuilder", "signature": "StringBuilder createRedundantRouterArgs(final NicProfile nic, final DomainRouterVO router)", "full_signature": "protected StringBuilder createRedundantRouterArgs(final NicProfile nic, final DomainRouterVO router)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.createRedundantRouterArgs(final NicProfile nic, final DomainRouterVO router)", "testcase": false, "constructor": false}, {"identifier": "finalizeDeployment", "parameters": "(final Commands cmds, final VirtualMachineProfile profile, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean finalizeDeployment(final Commands cmds, final VirtualMachineProfile profile, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override public boolean finalizeDeployment(final Commands cmds, final VirtualMachineProfile profile, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.finalizeDeployment(final Commands cmds, final VirtualMachineProfile profile, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "finalizeCommandsOnStart", "parameters": "(final Commands cmds, final VirtualMachineProfile profile)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean finalizeCommandsOnStart(final Commands cmds, final VirtualMachineProfile profile)", "full_signature": "@Override public boolean finalizeCommandsOnStart(final Commands cmds, final VirtualMachineProfile profile)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.finalizeCommandsOnStart(final Commands cmds, final VirtualMachineProfile profile)", "testcase": false, "constructor": false}, {"identifier": "finalizeMonitorServiceOnStrat", "parameters": "(final Commands cmds, final VirtualMachineProfile profile, final DomainRouterVO router, final Provider provider,\n                                               final long networkId, final Boolean add)", "modifiers": "private", "return": "void", "signature": "void finalizeMonitorServiceOnStrat(final Commands cmds, final VirtualMachineProfile profile, final DomainRouterVO router, final Provider provider,\n                                               final long networkId, final Boolean add)", "full_signature": "private void finalizeMonitorServiceOnStrat(final Commands cmds, final VirtualMachineProfile profile, final DomainRouterVO router, final Provider provider,\n                                               final long networkId, final Boolean add)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.finalizeMonitorServiceOnStrat(final Commands cmds, final VirtualMachineProfile profile, final DomainRouterVO router, final Provider provider,\n                                               final long networkId, final Boolean add)", "testcase": false, "constructor": false}, {"identifier": "getControlNic", "parameters": "(final VirtualMachineProfile profile)", "modifiers": "protected", "return": "NicProfile", "signature": "NicProfile getControlNic(final VirtualMachineProfile profile)", "full_signature": "protected NicProfile getControlNic(final VirtualMachineProfile profile)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.getControlNic(final VirtualMachineProfile profile)", "testcase": false, "constructor": false}, {"identifier": "finalizeSshAndVersionAndNetworkUsageOnStart", "parameters": "(final Commands cmds, final VirtualMachineProfile profile, final DomainRouterVO router, final NicProfile controlNic)", "modifiers": "protected", "return": "void", "signature": "void finalizeSshAndVersionAndNetworkUsageOnStart(final Commands cmds, final VirtualMachineProfile profile, final DomainRouterVO router, final NicProfile controlNic)", "full_signature": "protected void finalizeSshAndVersionAndNetworkUsageOnStart(final Commands cmds, final VirtualMachineProfile profile, final DomainRouterVO router, final NicProfile controlNic)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.finalizeSshAndVersionAndNetworkUsageOnStart(final Commands cmds, final VirtualMachineProfile profile, final DomainRouterVO router, final NicProfile controlNic)", "testcase": false, "constructor": false}, {"identifier": "finalizeUserDataAndDhcpOnStart", "parameters": "(final Commands cmds, final DomainRouterVO router, final Provider provider, final Long guestNetworkId)", "modifiers": "protected", "return": "void", "signature": "void finalizeUserDataAndDhcpOnStart(final Commands cmds, final DomainRouterVO router, final Provider provider, final Long guestNetworkId)", "full_signature": "protected void finalizeUserDataAndDhcpOnStart(final Commands cmds, final DomainRouterVO router, final Provider provider, final Long guestNetworkId)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.finalizeUserDataAndDhcpOnStart(final Commands cmds, final DomainRouterVO router, final Provider provider, final Long guestNetworkId)", "testcase": false, "constructor": false}, {"identifier": "finalizeNetworkRulesForNetwork", "parameters": "(final Commands cmds, final DomainRouterVO router, final Provider provider, final Long guestNetworkId)", "modifiers": "protected", "return": "void", "signature": "void finalizeNetworkRulesForNetwork(final Commands cmds, final DomainRouterVO router, final Provider provider, final Long guestNetworkId)", "full_signature": "protected void finalizeNetworkRulesForNetwork(final Commands cmds, final DomainRouterVO router, final Provider provider, final Long guestNetworkId)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.finalizeNetworkRulesForNetwork(final Commands cmds, final DomainRouterVO router, final Provider provider, final Long guestNetworkId)", "testcase": false, "constructor": false}, {"identifier": "createDefaultEgressFirewallRule", "parameters": "(final List<FirewallRule> rules, final long networkId)", "modifiers": "private", "return": "void", "signature": "void createDefaultEgressFirewallRule(final List<FirewallRule> rules, final long networkId)", "full_signature": "private void createDefaultEgressFirewallRule(final List<FirewallRule> rules, final long networkId)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.createDefaultEgressFirewallRule(final List<FirewallRule> rules, final long networkId)", "testcase": false, "constructor": false}, {"identifier": "removeRevokedIpAliasFromDb", "parameters": "(final List<NicIpAliasVO> revokedIpAliasVOs)", "modifiers": "private", "return": "void", "signature": "void removeRevokedIpAliasFromDb(final List<NicIpAliasVO> revokedIpAliasVOs)", "full_signature": "private void removeRevokedIpAliasFromDb(final List<NicIpAliasVO> revokedIpAliasVOs)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.removeRevokedIpAliasFromDb(final List<NicIpAliasVO> revokedIpAliasVOs)", "testcase": false, "constructor": false}, {"identifier": "finalizeIpAssocForNetwork", "parameters": "(final Commands cmds, final VirtualRouter router, final Provider provider, final Long guestNetworkId,\n                                             final Map<String, String> vlanMacAddress)", "modifiers": "protected", "return": "void", "signature": "void finalizeIpAssocForNetwork(final Commands cmds, final VirtualRouter router, final Provider provider, final Long guestNetworkId,\n                                             final Map<String, String> vlanMacAddress)", "full_signature": "protected void finalizeIpAssocForNetwork(final Commands cmds, final VirtualRouter router, final Provider provider, final Long guestNetworkId,\n                                             final Map<String, String> vlanMacAddress)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.finalizeIpAssocForNetwork(final Commands cmds, final VirtualRouter router, final Provider provider, final Long guestNetworkId,\n                                             final Map<String, String> vlanMacAddress)", "testcase": false, "constructor": false}, {"identifier": "getPublicIpsToApply", "parameters": "(final VirtualRouter router, final Provider provider, final Long guestNetworkId,\n                                                                       final com.cloud.network.IpAddress.State... skipInStates)", "modifiers": "protected", "return": "ArrayList<? extends PublicIpAddress>", "signature": "ArrayList<? extends PublicIpAddress> getPublicIpsToApply(final VirtualRouter router, final Provider provider, final Long guestNetworkId,\n                                                                       final com.cloud.network.IpAddress.State... skipInStates)", "full_signature": "protected ArrayList<? extends PublicIpAddress> getPublicIpsToApply(final VirtualRouter router, final Provider provider, final Long guestNetworkId,\n                                                                       final com.cloud.network.IpAddress.State... skipInStates)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.getPublicIpsToApply(final VirtualRouter router, final Provider provider, final Long guestNetworkId,\n                                                                       final com.cloud.network.IpAddress.State... skipInStates)", "testcase": false, "constructor": false}, {"identifier": "finalizeStart", "parameters": "(final VirtualMachineProfile profile, final long hostId, final Commands cmds, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean finalizeStart(final VirtualMachineProfile profile, final long hostId, final Commands cmds, final ReservationContext context)", "full_signature": "@Override public boolean finalizeStart(final VirtualMachineProfile profile, final long hostId, final Commands cmds, final ReservationContext context)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.finalizeStart(final VirtualMachineProfile profile, final long hostId, final Commands cmds, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "finalizeStop", "parameters": "(final VirtualMachineProfile profile, final Answer answer)", "modifiers": "@Override public", "return": "void", "signature": "void finalizeStop(final VirtualMachineProfile profile, final Answer answer)", "full_signature": "@Override public void finalizeStop(final VirtualMachineProfile profile, final Answer answer)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.finalizeStop(final VirtualMachineProfile profile, final Answer answer)", "testcase": false, "constructor": false}, {"identifier": "finalizeExpunge", "parameters": "(final VirtualMachine vm)", "modifiers": "@Override public", "return": "void", "signature": "void finalizeExpunge(final VirtualMachine vm)", "full_signature": "@Override public void finalizeExpunge(final VirtualMachine vm)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.finalizeExpunge(final VirtualMachine vm)", "testcase": false, "constructor": false}, {"identifier": "startRemoteAccessVpn", "parameters": "(final Network network, final RemoteAccessVpn vpn, final List<? extends VirtualRouter> routers)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean startRemoteAccessVpn(final Network network, final RemoteAccessVpn vpn, final List<? extends VirtualRouter> routers)", "full_signature": "@Override public boolean startRemoteAccessVpn(final Network network, final RemoteAccessVpn vpn, final List<? extends VirtualRouter> routers)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.startRemoteAccessVpn(final Network network, final RemoteAccessVpn vpn, final List<? extends VirtualRouter> routers)", "testcase": false, "constructor": false}, {"identifier": "deleteRemoteAccessVpn", "parameters": "(final Network network, final RemoteAccessVpn vpn, final List<? extends VirtualRouter> routers)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteRemoteAccessVpn(final Network network, final RemoteAccessVpn vpn, final List<? extends VirtualRouter> routers)", "full_signature": "@Override public boolean deleteRemoteAccessVpn(final Network network, final RemoteAccessVpn vpn, final List<? extends VirtualRouter> routers)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.deleteRemoteAccessVpn(final Network network, final RemoteAccessVpn vpn, final List<? extends VirtualRouter> routers)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "(final VirtualRouter router, final boolean forced, final User user, final Account caller)", "modifiers": "@Override public", "return": "DomainRouterVO", "signature": "DomainRouterVO stop(final VirtualRouter router, final boolean forced, final User user, final Account caller)", "full_signature": "@Override public DomainRouterVO stop(final VirtualRouter router, final boolean forced, final User user, final Account caller)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.stop(final VirtualRouter router, final boolean forced, final User user, final Account caller)", "testcase": false, "constructor": false}, {"identifier": "removeDhcpSupportForSubnet", "parameters": "(final Network network, final List<DomainRouterVO> routers)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeDhcpSupportForSubnet(final Network network, final List<DomainRouterVO> routers)", "full_signature": "@Override public boolean removeDhcpSupportForSubnet(final Network network, final List<DomainRouterVO> routers)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.removeDhcpSupportForSubnet(final Network network, final List<DomainRouterVO> routers)", "testcase": false, "constructor": false}, {"identifier": "startRouter", "parameters": "(final long id)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_ROUTER_START, eventDescription = \"starting router Vm\", async = true) public", "return": "VirtualRouter", "signature": "VirtualRouter startRouter(final long id)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_ROUTER_START, eventDescription = \"starting router Vm\", async = true) public VirtualRouter startRouter(final long id)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.startRouter(final long id)", "testcase": false, "constructor": false}, {"identifier": "startRouter", "parameters": "(final long routerId, final boolean reprogramNetwork)", "modifiers": "@Override public", "return": "VirtualRouter", "signature": "VirtualRouter startRouter(final long routerId, final boolean reprogramNetwork)", "full_signature": "@Override public VirtualRouter startRouter(final long routerId, final boolean reprogramNetwork)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.startRouter(final long routerId, final boolean reprogramNetwork)", "testcase": false, "constructor": false}, {"identifier": "getRoutersForNetwork", "parameters": "(final long networkId)", "modifiers": "@Override public", "return": "List<VirtualRouter>", "signature": "List<VirtualRouter> getRoutersForNetwork(final long networkId)", "full_signature": "@Override public List<VirtualRouter> getRoutersForNetwork(final long networkId)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.getRoutersForNetwork(final long networkId)", "testcase": false, "constructor": false}, {"identifier": "getDnsBasicZoneUpdate", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDnsBasicZoneUpdate()", "full_signature": "@Override public String getDnsBasicZoneUpdate()", "class_method_signature": "VirtualNetworkApplianceManagerImpl.getDnsBasicZoneUpdate()", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getTimeout()", "full_signature": "@Override public int getTimeout()", "class_method_signature": "VirtualNetworkApplianceManagerImpl.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "isRecurring", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRecurring()", "full_signature": "@Override public boolean isRecurring()", "class_method_signature": "VirtualNetworkApplianceManagerImpl.isRecurring()", "testcase": false, "constructor": false}, {"identifier": "processAnswers", "parameters": "(final long agentId, final long seq, final Answer[] answers)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean processAnswers(final long agentId, final long seq, final Answer[] answers)", "full_signature": "@Override public boolean processAnswers(final long agentId, final long seq, final Answer[] answers)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.processAnswers(final long agentId, final long seq, final Answer[] answers)", "testcase": false, "constructor": false}, {"identifier": "processCommands", "parameters": "(final long agentId, final long seq, final Command[] commands)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean processCommands(final long agentId, final long seq, final Command[] commands)", "full_signature": "@Override public boolean processCommands(final long agentId, final long seq, final Command[] commands)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.processCommands(final long agentId, final long seq, final Command[] commands)", "testcase": false, "constructor": false}, {"identifier": "processConnect", "parameters": "(final Host host, final StartupCommand cmd, final boolean forRebalance)", "modifiers": "@Override public", "return": "void", "signature": "void processConnect(final Host host, final StartupCommand cmd, final boolean forRebalance)", "full_signature": "@Override public void processConnect(final Host host, final StartupCommand cmd, final boolean forRebalance)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.processConnect(final Host host, final StartupCommand cmd, final boolean forRebalance)", "testcase": false, "constructor": false}, {"identifier": "processControlCommand", "parameters": "(final long agentId, final AgentControlCommand cmd)", "modifiers": "@Override public", "return": "AgentControlAnswer", "signature": "AgentControlAnswer processControlCommand(final long agentId, final AgentControlCommand cmd)", "full_signature": "@Override public AgentControlAnswer processControlCommand(final long agentId, final AgentControlCommand cmd)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.processControlCommand(final long agentId, final AgentControlCommand cmd)", "testcase": false, "constructor": false}, {"identifier": "processDisconnect", "parameters": "(final long agentId, final Status state)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean processDisconnect(final long agentId, final Status state)", "full_signature": "@Override public boolean processDisconnect(final long agentId, final Status state)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.processDisconnect(final long agentId, final Status state)", "testcase": false, "constructor": false}, {"identifier": "processTimeout", "parameters": "(final long agentId, final long seq)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean processTimeout(final long agentId, final long seq)", "full_signature": "@Override public boolean processTimeout(final long agentId, final long seq)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.processTimeout(final long agentId, final long seq)", "testcase": false, "constructor": false}, {"identifier": "prepareStop", "parameters": "(final VirtualMachineProfile profile)", "modifiers": "@Override public", "return": "void", "signature": "void prepareStop(final VirtualMachineProfile profile)", "full_signature": "@Override public void prepareStop(final VirtualMachineProfile profile)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.prepareStop(final VirtualMachineProfile profile)", "testcase": false, "constructor": false}, {"identifier": "findRouter", "parameters": "(final long routerId)", "modifiers": "@Override public", "return": "VirtualRouter", "signature": "VirtualRouter findRouter(final long routerId)", "full_signature": "@Override public VirtualRouter findRouter(final long routerId)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.findRouter(final long routerId)", "testcase": false, "constructor": false}, {"identifier": "upgradeRouterTemplate", "parameters": "(final UpgradeRouterTemplateCmd cmd)", "modifiers": "@Override public", "return": "List<Long>", "signature": "List<Long> upgradeRouterTemplate(final UpgradeRouterTemplateCmd cmd)", "full_signature": "@Override public List<Long> upgradeRouterTemplate(final UpgradeRouterTemplateCmd cmd)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.upgradeRouterTemplate(final UpgradeRouterTemplateCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "rebootRouters", "parameters": "(final List<DomainRouterVO> routers)", "modifiers": "private", "return": "List<Long>", "signature": "List<Long> rebootRouters(final List<DomainRouterVO> routers)", "full_signature": "private List<Long> rebootRouters(final List<DomainRouterVO> routers)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.rebootRouters(final List<DomainRouterVO> routers)", "testcase": false, "constructor": false}, {"identifier": "getConfigComponentName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getConfigComponentName()", "full_signature": "@Override public String getConfigComponentName()", "class_method_signature": "VirtualNetworkApplianceManagerImpl.getConfigComponentName()", "testcase": false, "constructor": false}, {"identifier": "getConfigKeys", "parameters": "()", "modifiers": "@Override public", "return": "ConfigKey<?>[]", "signature": "ConfigKey<?>[] getConfigKeys()", "full_signature": "@Override public ConfigKey<?>[] getConfigKeys()", "class_method_signature": "VirtualNetworkApplianceManagerImpl.getConfigKeys()", "testcase": false, "constructor": false}, {"identifier": "preStateTransitionEvent", "parameters": "(final VirtualMachine.State oldState, final VirtualMachine.Event event, final VirtualMachine.State newState, final VirtualMachine vo, final boolean status,\n                                           final Object opaque)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean preStateTransitionEvent(final VirtualMachine.State oldState, final VirtualMachine.Event event, final VirtualMachine.State newState, final VirtualMachine vo, final boolean status,\n                                           final Object opaque)", "full_signature": "@Override public boolean preStateTransitionEvent(final VirtualMachine.State oldState, final VirtualMachine.Event event, final VirtualMachine.State newState, final VirtualMachine vo, final boolean status,\n                                           final Object opaque)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.preStateTransitionEvent(final VirtualMachine.State oldState, final VirtualMachine.Event event, final VirtualMachine.State newState, final VirtualMachine vo, final boolean status,\n                                           final Object opaque)", "testcase": false, "constructor": false}, {"identifier": "postStateTransitionEvent", "parameters": "(final StateMachine2.Transition<VirtualMachine.State, VirtualMachine.Event> transition, final VirtualMachine vo, final boolean status, final Object opaque)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean postStateTransitionEvent(final StateMachine2.Transition<VirtualMachine.State, VirtualMachine.Event> transition, final VirtualMachine vo, final boolean status, final Object opaque)", "full_signature": "@Override public boolean postStateTransitionEvent(final StateMachine2.Transition<VirtualMachine.State, VirtualMachine.Event> transition, final VirtualMachine vo, final boolean status, final Object opaque)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.postStateTransitionEvent(final StateMachine2.Transition<VirtualMachine.State, VirtualMachine.Event> transition, final VirtualMachine vo, final boolean status, final Object opaque)", "testcase": false, "constructor": false}, {"identifier": "isOutOfBandMigrated", "parameters": "(final Object opaque)", "modifiers": "private", "return": "boolean", "signature": "boolean isOutOfBandMigrated(final Object opaque)", "full_signature": "private boolean isOutOfBandMigrated(final Object opaque)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.isOutOfBandMigrated(final Object opaque)", "testcase": false, "constructor": false}, {"identifier": "aggregationExecution", "parameters": "(final AggregationControlCommand.Action action, final Network network, final List<DomainRouterVO> routers)", "modifiers": "protected", "return": "boolean", "signature": "boolean aggregationExecution(final AggregationControlCommand.Action action, final Network network, final List<DomainRouterVO> routers)", "full_signature": "protected boolean aggregationExecution(final AggregationControlCommand.Action action, final Network network, final List<DomainRouterVO> routers)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.aggregationExecution(final AggregationControlCommand.Action action, final Network network, final List<DomainRouterVO> routers)", "testcase": false, "constructor": false}, {"identifier": "prepareAggregatedExecution", "parameters": "(final Network network, final List<DomainRouterVO> routers)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean prepareAggregatedExecution(final Network network, final List<DomainRouterVO> routers)", "full_signature": "@Override public boolean prepareAggregatedExecution(final Network network, final List<DomainRouterVO> routers)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.prepareAggregatedExecution(final Network network, final List<DomainRouterVO> routers)", "testcase": false, "constructor": false}, {"identifier": "completeAggregatedExecution", "parameters": "(final Network network, final List<DomainRouterVO> routers)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean completeAggregatedExecution(final Network network, final List<DomainRouterVO> routers)", "full_signature": "@Override public boolean completeAggregatedExecution(final Network network, final List<DomainRouterVO> routers)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.completeAggregatedExecution(final Network network, final List<DomainRouterVO> routers)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java"}, "focal_method": {"identifier": "destroyRouter", "parameters": "(final long routerId, final Account caller, final Long callerUserId)", "modifiers": "@Override public", "return": "VirtualRouter", "body": "@Override\n    public VirtualRouter destroyRouter(final long routerId, final Account caller, final Long callerUserId) throws ResourceUnavailableException, ConcurrentOperationException {\n        return _nwHelper.destroyRouter(routerId, caller, callerUserId);\n    }", "signature": "VirtualRouter destroyRouter(final long routerId, final Account caller, final Long callerUserId)", "full_signature": "@Override public VirtualRouter destroyRouter(final long routerId, final Account caller, final Long callerUserId)", "class_method_signature": "VirtualNetworkApplianceManagerImpl.destroyRouter(final long routerId, final Account caller, final Long callerUserId)", "testcase": false, "constructor": false, "invocations": ["destroyRouter"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}