{"test_class": {"identifier": "EurekaContainerHealthServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.test();", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.test()", "var_name": "titusRuntime"}, {"original_string": "private final EurekaServerStub eurekaServer = new EurekaServerStub();", "modifier": "private final", "type": "EurekaServerStub", "declarator": "eurekaServer = new EurekaServerStub()", "var_name": "eurekaServer"}, {"original_string": "private final JobComponentStub jobManagerStub = new JobComponentStub(titusRuntime);", "modifier": "private final", "type": "JobComponentStub", "declarator": "jobManagerStub = new JobComponentStub(titusRuntime)", "var_name": "jobManagerStub"}, {"original_string": "private final ReadOnlyJobOperations jobOperations = jobManagerStub.getJobOperations();", "modifier": "private final", "type": "ReadOnlyJobOperations", "declarator": "jobOperations = jobManagerStub.getJobOperations()", "var_name": "jobOperations"}, {"original_string": "private final EurekaContainerHealthService healthService = new EurekaContainerHealthService(\n            jobOperations, eurekaServer.getEurekaClient(), titusRuntime\n    );", "modifier": "private final", "type": "EurekaContainerHealthService", "declarator": "healthService = new EurekaContainerHealthService(\n            jobOperations, eurekaServer.getEurekaClient(), titusRuntime\n    )", "var_name": "healthService"}, {"original_string": "private Job job1;", "modifier": "private", "type": "Job", "declarator": "job1", "var_name": "job1"}, {"original_string": "private Task task1;", "modifier": "private", "type": "Task", "declarator": "task1", "var_name": "task1"}, {"original_string": "private String taskId1;", "modifier": "private", "type": "String", "declarator": "taskId1", "var_name": "taskId1"}], "file": "titus-ext/eureka/src/test/java/com/netflix/titus/ext/eureka/containerhealth/EurekaContainerHealthServiceTest.java"}, "test_case": {"identifier": "testJobManagerUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testJobManagerUpdate() {\n        StepVerifier.create(healthService.events(false))\n                // Task launched, but not in Eureka yet.\n                .then(() -> jobManagerStub.moveTaskToState(taskId1, TaskState.Launched))\n                .assertNext(event -> assertContainerHealthAndEvent(event, healthService.getHealthStatus(taskId1), taskId1, ContainerHealthState.Unknown))\n\n                // Task started and registered with Eureka\n                .then(() -> {\n                    eurekaServer.register(newInstanceInfo(taskId1, InstanceStatus.UP));\n                    jobManagerStub.moveTaskToState(taskId1, TaskState.Started);\n                })\n                .assertNext(event -> assertContainerHealthAndEvent(event, healthService.getHealthStatus(taskId1), taskId1, ContainerHealthState.Healthy))\n\n                // Task terminated\n                .then(() -> jobManagerStub.moveTaskToState(task1, TaskState.Finished))\n                .assertNext(event -> assertContainerHealthAndEvent(event, healthService.getHealthStatus(taskId1), taskId1, ContainerHealthState.Terminated))\n\n                .thenCancel()\n                .verify(Duration.ofSeconds(5));\n    }", "signature": "void testJobManagerUpdate()", "full_signature": "@Test public void testJobManagerUpdate()", "class_method_signature": "EurekaContainerHealthServiceTest.testJobManagerUpdate()", "testcase": true, "constructor": false, "invocations": ["verify", "thenCancel", "assertNext", "then", "assertNext", "then", "assertNext", "then", "create", "events", "moveTaskToState", "assertContainerHealthAndEvent", "getHealthStatus", "register", "newInstanceInfo", "moveTaskToState", "assertContainerHealthAndEvent", "getHealthStatus", "moveTaskToState", "assertContainerHealthAndEvent", "getHealthStatus", "ofSeconds"]}, "focal_class": {"identifier": "EurekaContainerHealthService", "superclass": "", "interfaces": "implements ContainerHealthService", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(EurekaContainerHealthService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(EurekaContainerHealthService.class)", "var_name": "logger"}, {"original_string": "public static final String NAME = \"eureka\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"eureka\"", "var_name": "NAME"}, {"original_string": "private static final Duration RETRY_INTERVAL = Duration.ofSeconds(5);", "modifier": "private static final", "type": "Duration", "declarator": "RETRY_INTERVAL = Duration.ofSeconds(5)", "var_name": "RETRY_INTERVAL"}, {"original_string": "private final ReadOnlyJobOperations jobOperations;", "modifier": "private final", "type": "ReadOnlyJobOperations", "declarator": "jobOperations", "var_name": "jobOperations"}, {"original_string": "private final EurekaClient eurekaClient;", "modifier": "private final", "type": "EurekaClient", "declarator": "eurekaClient", "var_name": "eurekaClient"}, {"original_string": "private final TitusRuntime titusRuntime;", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime", "var_name": "titusRuntime"}, {"original_string": "private final Flux<ContainerHealthEvent> healthStatuses;", "modifier": "private final", "type": "Flux<ContainerHealthEvent>", "declarator": "healthStatuses", "var_name": "healthStatuses"}, {"original_string": "private Disposable eventLoggerDisposable;", "modifier": "private", "type": "Disposable", "declarator": "eventLoggerDisposable", "var_name": "eventLoggerDisposable"}], "methods": [{"identifier": "EurekaContainerHealthService", "parameters": "(ReadOnlyJobOperations jobOperations, EurekaClient eurekaClient, TitusRuntime titusRuntime)", "modifiers": "@Inject public", "return": "", "signature": " EurekaContainerHealthService(ReadOnlyJobOperations jobOperations, EurekaClient eurekaClient, TitusRuntime titusRuntime)", "full_signature": "@Inject public  EurekaContainerHealthService(ReadOnlyJobOperations jobOperations, EurekaClient eurekaClient, TitusRuntime titusRuntime)", "class_method_signature": "EurekaContainerHealthService.EurekaContainerHealthService(ReadOnlyJobOperations jobOperations, EurekaClient eurekaClient, TitusRuntime titusRuntime)", "testcase": false, "constructor": true}, {"identifier": "activate", "parameters": "()", "modifiers": "@Activator public", "return": "void", "signature": "void activate()", "full_signature": "@Activator public void activate()", "class_method_signature": "EurekaContainerHealthService.activate()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@PreDestroy public", "return": "void", "signature": "void shutdown()", "full_signature": "@PreDestroy public void shutdown()", "class_method_signature": "EurekaContainerHealthService.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "EurekaContainerHealthService.getName()", "testcase": false, "constructor": false}, {"identifier": "findHealthStatus", "parameters": "(String taskId)", "modifiers": "@Override public", "return": "Optional<ContainerHealthStatus>", "signature": "Optional<ContainerHealthStatus> findHealthStatus(String taskId)", "full_signature": "@Override public Optional<ContainerHealthStatus> findHealthStatus(String taskId)", "class_method_signature": "EurekaContainerHealthService.findHealthStatus(String taskId)", "testcase": false, "constructor": false}, {"identifier": "events", "parameters": "(boolean snapshot)", "modifiers": "@Override public", "return": "Flux<ContainerHealthEvent>", "signature": "Flux<ContainerHealthEvent> events(boolean snapshot)", "full_signature": "@Override public Flux<ContainerHealthEvent> events(boolean snapshot)", "class_method_signature": "EurekaContainerHealthService.events(boolean snapshot)", "testcase": false, "constructor": false}, {"identifier": "buildHealthStatus", "parameters": "(Job<?> job, Task task)", "modifiers": "private", "return": "ContainerHealthStatus", "signature": "ContainerHealthStatus buildHealthStatus(Job<?> job, Task task)", "full_signature": "private ContainerHealthStatus buildHealthStatus(Job<?> job, Task task)", "class_method_signature": "EurekaContainerHealthService.buildHealthStatus(Job<?> job, Task task)", "testcase": false, "constructor": false}, {"identifier": "buildHealthStatus", "parameters": "(Task task, ContainerHealthState state, String reason)", "modifiers": "private", "return": "ContainerHealthStatus", "signature": "ContainerHealthStatus buildHealthStatus(Task task, ContainerHealthState state, String reason)", "full_signature": "private ContainerHealthStatus buildHealthStatus(Task task, ContainerHealthState state, String reason)", "class_method_signature": "EurekaContainerHealthService.buildHealthStatus(Task task, ContainerHealthState state, String reason)", "testcase": false, "constructor": false}, {"identifier": "takeStateOf", "parameters": "(Job<?> job, Task task)", "modifiers": "private", "return": "ContainerHealthState", "signature": "ContainerHealthState takeStateOf(Job<?> job, Task task)", "full_signature": "private ContainerHealthState takeStateOf(Job<?> job, Task task)", "class_method_signature": "EurekaContainerHealthService.takeStateOf(Job<?> job, Task task)", "testcase": false, "constructor": false}, {"identifier": "takeStateReasonOf", "parameters": "(Job<?> job, Task task)", "modifiers": "private", "return": "String", "signature": "String takeStateReasonOf(Job<?> job, Task task)", "full_signature": "private String takeStateReasonOf(Job<?> job, Task task)", "class_method_signature": "EurekaContainerHealthService.takeStateReasonOf(Job<?> job, Task task)", "testcase": false, "constructor": false}, {"identifier": "handleJobManagerOrEurekaStatusUpdate", "parameters": "(Object event, ConcurrentMap<String, ContainerHealthEvent> state)", "modifiers": "private", "return": "Flux<ContainerHealthEvent>", "signature": "Flux<ContainerHealthEvent> handleJobManagerOrEurekaStatusUpdate(Object event, ConcurrentMap<String, ContainerHealthEvent> state)", "full_signature": "private Flux<ContainerHealthEvent> handleJobManagerOrEurekaStatusUpdate(Object event, ConcurrentMap<String, ContainerHealthEvent> state)", "class_method_signature": "EurekaContainerHealthService.handleJobManagerOrEurekaStatusUpdate(Object event, ConcurrentMap<String, ContainerHealthEvent> state)", "testcase": false, "constructor": false}, {"identifier": "handleJobManagerEvent", "parameters": "(JobManagerEvent event, ConcurrentMap<String, ContainerHealthEvent> state)", "modifiers": "private", "return": "Flux<ContainerHealthEvent>", "signature": "Flux<ContainerHealthEvent> handleJobManagerEvent(JobManagerEvent event, ConcurrentMap<String, ContainerHealthEvent> state)", "full_signature": "private Flux<ContainerHealthEvent> handleJobManagerEvent(JobManagerEvent event, ConcurrentMap<String, ContainerHealthEvent> state)", "class_method_signature": "EurekaContainerHealthService.handleJobManagerEvent(JobManagerEvent event, ConcurrentMap<String, ContainerHealthEvent> state)", "testcase": false, "constructor": false}, {"identifier": "handleEurekaEvent", "parameters": "(EurekaEvent event, ConcurrentMap<String, ContainerHealthEvent> state)", "modifiers": "private", "return": "Flux<ContainerHealthEvent>", "signature": "Flux<ContainerHealthEvent> handleEurekaEvent(EurekaEvent event, ConcurrentMap<String, ContainerHealthEvent> state)", "full_signature": "private Flux<ContainerHealthEvent> handleEurekaEvent(EurekaEvent event, ConcurrentMap<String, ContainerHealthEvent> state)", "class_method_signature": "EurekaContainerHealthService.handleEurekaEvent(EurekaEvent event, ConcurrentMap<String, ContainerHealthEvent> state)", "testcase": false, "constructor": false}, {"identifier": "handleJobEnabledStatusUpdate", "parameters": "(Job current, Job previous, ConcurrentMap<String, ContainerHealthEvent> state)", "modifiers": "private", "return": "Flux<ContainerHealthEvent>", "signature": "Flux<ContainerHealthEvent> handleJobEnabledStatusUpdate(Job current, Job previous, ConcurrentMap<String, ContainerHealthEvent> state)", "full_signature": "private Flux<ContainerHealthEvent> handleJobEnabledStatusUpdate(Job current, Job previous, ConcurrentMap<String, ContainerHealthEvent> state)", "class_method_signature": "EurekaContainerHealthService.handleJobEnabledStatusUpdate(Job current, Job previous, ConcurrentMap<String, ContainerHealthEvent> state)", "testcase": false, "constructor": false}, {"identifier": "handleTaskStateUpdate", "parameters": "(Job<?> job, Task task, ConcurrentMap<String, ContainerHealthEvent> state)", "modifiers": "private", "return": "Optional<ContainerHealthEvent>", "signature": "Optional<ContainerHealthEvent> handleTaskStateUpdate(Job<?> job, Task task, ConcurrentMap<String, ContainerHealthEvent> state)", "full_signature": "private Optional<ContainerHealthEvent> handleTaskStateUpdate(Job<?> job, Task task, ConcurrentMap<String, ContainerHealthEvent> state)", "class_method_signature": "EurekaContainerHealthService.handleTaskStateUpdate(Job<?> job, Task task, ConcurrentMap<String, ContainerHealthEvent> state)", "testcase": false, "constructor": false}, {"identifier": "recordNewState", "parameters": "(ConcurrentMap<String, ContainerHealthEvent> state, Task task, ContainerHealthUpdateEvent newEvent)", "modifiers": "private", "return": "ContainerHealthUpdateEvent", "signature": "ContainerHealthUpdateEvent recordNewState(ConcurrentMap<String, ContainerHealthEvent> state, Task task, ContainerHealthUpdateEvent newEvent)", "full_signature": "private ContainerHealthUpdateEvent recordNewState(ConcurrentMap<String, ContainerHealthEvent> state, Task task, ContainerHealthUpdateEvent newEvent)", "class_method_signature": "EurekaContainerHealthService.recordNewState(ConcurrentMap<String, ContainerHealthEvent> state, Task task, ContainerHealthUpdateEvent newEvent)", "testcase": false, "constructor": false}], "file": "titus-ext/eureka/src/main/java/com/netflix/titus/ext/eureka/containerhealth/EurekaContainerHealthService.java"}, "focal_method": {"identifier": "events", "parameters": "(boolean snapshot)", "modifiers": "@Override public", "return": "Flux<ContainerHealthEvent>", "body": "@Override\n    public Flux<ContainerHealthEvent> events(boolean snapshot) {\n        Preconditions.checkArgument(!snapshot, \"Snapshot state is generated by AggregatingContainerHealthService\");\n        return healthStatuses;\n    }", "signature": "Flux<ContainerHealthEvent> events(boolean snapshot)", "full_signature": "@Override public Flux<ContainerHealthEvent> events(boolean snapshot)", "class_method_signature": "EurekaContainerHealthService.events(boolean snapshot)", "testcase": false, "constructor": false, "invocations": ["checkArgument"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}