{"test_class": {"identifier": "MainDispatchTest", "superclass": "", "interfaces": "", "fields": [], "file": "module/com.sandpolis.core.instance/src/test/java/com/sandpolis/core/instance/MainDispatchTest.java"}, "test_case": {"identifier": "dispatch_2", "parameters": "()", "modifiers": "@Test @DisplayName(\"Dispatch a class that is successful\")", "return": "void", "body": "@Test\n\t@DisplayName(\"Dispatch a class that is successful\")\n\tvoid dispatch_2() {\n\t\tMainDispatch.dispatch(SuccessTest.class, new String[] { \"37434\" }, InstanceType.CHARCOAL, InstanceFlavor.NONE);\n\t}", "signature": "void dispatch_2()", "full_signature": "@Test @DisplayName(\"Dispatch a class that is successful\") void dispatch_2()", "class_method_signature": "MainDispatchTest.dispatch_2()", "testcase": true, "constructor": false, "invocations": ["dispatch"]}, "focal_class": {"identifier": "MainDispatch", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static List<Task> tasks = new ArrayList<>();", "modifier": "private static", "type": "List<Task>", "declarator": "tasks = new ArrayList<>()", "var_name": "tasks"}, {"original_string": "private static List<Task> shutdown = new LinkedList<>();", "modifier": "private static", "type": "List<Task>", "declarator": "shutdown = new LinkedList<>()", "var_name": "shutdown"}, {"original_string": "private static IdleLoop idle;", "modifier": "private static", "type": "IdleLoop", "declarator": "idle", "var_name": "idle"}, {"original_string": "private static Class<?> main;", "modifier": "private static", "type": "Class<?>", "declarator": "main", "var_name": "main"}, {"original_string": "private static InstanceType instance;", "modifier": "private static", "type": "InstanceType", "declarator": "instance", "var_name": "instance"}, {"original_string": "private static InstanceFlavor flavor;", "modifier": "private static", "type": "InstanceFlavor", "declarator": "flavor", "var_name": "flavor"}], "methods": [{"identifier": "getMain", "parameters": "()", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getMain()", "full_signature": "public static Class<?> getMain()", "class_method_signature": "MainDispatch.getMain()", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "InstanceType", "signature": "InstanceType getInstance()", "full_signature": "public static InstanceType getInstance()", "class_method_signature": "MainDispatch.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getInstanceFlavor", "parameters": "()", "modifiers": "public static", "return": "InstanceFlavor", "signature": "InstanceFlavor getInstanceFlavor()", "full_signature": "public static InstanceFlavor getInstanceFlavor()", "class_method_signature": "MainDispatch.getInstanceFlavor()", "testcase": false, "constructor": false}, {"identifier": "getIdleLoop", "parameters": "()", "modifiers": "public static", "return": "IdleLoop", "signature": "IdleLoop getIdleLoop()", "full_signature": "public static IdleLoop getIdleLoop()", "class_method_signature": "MainDispatch.getIdleLoop()", "testcase": false, "constructor": false}, {"identifier": "dispatch", "parameters": "(Class<?> main, String[] args, InstanceType instance, InstanceFlavor flavor)", "modifiers": "public static", "return": "void", "signature": "void dispatch(Class<?> main, String[] args, InstanceType instance, InstanceFlavor flavor)", "full_signature": "public static void dispatch(Class<?> main, String[] args, InstanceType instance, InstanceFlavor flavor)", "class_method_signature": "MainDispatch.dispatch(Class<?> main, String[] args, InstanceType instance, InstanceFlavor flavor)", "testcase": false, "constructor": false}, {"identifier": "logTaskSummary", "parameters": "(Logger log)", "modifiers": "private static", "return": "void", "signature": "void logTaskSummary(Logger log)", "full_signature": "private static void logTaskSummary(Logger log)", "class_method_signature": "MainDispatch.logTaskSummary(Logger log)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(IdleLoop idle)", "modifiers": "public static", "return": "void", "signature": "void register(IdleLoop idle)", "full_signature": "public static void register(IdleLoop idle)", "class_method_signature": "MainDispatch.register(IdleLoop idle)", "testcase": false, "constructor": false}, {"identifier": "registerIdle", "parameters": "(Supplier<Boolean> task)", "modifiers": "public static", "return": "void", "signature": "void registerIdle(Supplier<Boolean> task)", "full_signature": "public static void registerIdle(Supplier<Boolean> task)", "class_method_signature": "MainDispatch.registerIdle(Supplier<Boolean> task)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Task task)", "modifiers": "public static", "return": "void", "signature": "void register(Task task)", "full_signature": "public static void register(Task task)", "class_method_signature": "MainDispatch.register(Task task)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Class<?> c)", "modifiers": "public static", "return": "void", "signature": "void register(Class<?> c)", "full_signature": "public static void register(Class<?> c)", "class_method_signature": "MainDispatch.register(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "MainDispatch", "parameters": "()", "modifiers": "private", "return": "", "signature": " MainDispatch()", "full_signature": "private  MainDispatch()", "class_method_signature": "MainDispatch.MainDispatch()", "testcase": false, "constructor": true}], "file": "module/com.sandpolis.core.instance/src/main/java/com/sandpolis/core/instance/MainDispatch.java"}, "focal_method": {"identifier": "dispatch", "parameters": "(Class<?> main, String[] args, InstanceType instance, InstanceFlavor flavor)", "modifiers": "public static", "return": "void", "body": "public static void dispatch(Class<?> main, String[] args, InstanceType instance, InstanceFlavor flavor) {\n\t\tif (MainDispatch.main != null)\n\t\t\tthrow new IllegalStateException(\"Dispatch cannot be called more than once\");\n\n\t\tMainDispatch.main = Objects.requireNonNull(main);\n\t\tMainDispatch.instance = Objects.requireNonNull(instance);\n\t\tMainDispatch.flavor = Objects.requireNonNull(flavor);\n\n\t\tfinal long timestamp = System.currentTimeMillis();\n\n\t\t// The logger must be initialized after setting the main class\n\t\tfinal Logger log = LoggerFactory.getLogger(MainDispatch.class);\n\n\t\t// Setup exception handler\n\t\tThread.setDefaultUncaughtExceptionHandler((thread, throwable) -> {\n\t\t\tlog.error(\"An unexpected exception has occurred\", throwable);\n\t\t});\n\n\t\t// Setup shutdown hook\n\t\tRuntime.getRuntime().addShutdownHook(new Thread(() -> {\n\t\t\tshutdown.forEach(task -> {\n\t\t\t\ttry {\n\t\t\t\t\ttask.execute(new TaskOutcome(task.toString()));\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlog.error(\"Failed to execute shutdown task\", e);\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\n\t\t// Invoke the main method\n\t\ttry {\n\t\t\tmain.getDeclaredMethod(\"main\", String[].class).invoke(null, (Object) args);\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(\"Failed to invoke main method in class: \" + main.getName(), e);\n\t\t}\n\n\t\t// Execute tasks\n\t\tfor (Task task : tasks) {\n\t\t\tif (task.initMetadata == null)\n\t\t\t\tthrow new RuntimeException(\"Unregistered initialization task class\");\n\n\t\t\tTaskOutcome outcome = new TaskOutcome(task.initMetadata.name());\n\n\t\t\ttry {\n\t\t\t\ttask.outcome = task.execute(outcome);\n\t\t\t} catch (Exception e) {\n\t\t\t\ttask.outcome = outcome.failure(e);\n\t\t\t}\n\n\t\t\tif (!task.outcome.isSkipped() && !outcome.getOutcome().getResult() && task.initMetadata.fatal()) {\n\t\t\t\tlogTaskSummary(log);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t}\n\n\t\t// Print task summary if any task failed\n\t\tif (tasks.stream().filter(t -> !t.outcome.getOutcome().getResult()).count() != 0)\n\t\t\tlogTaskSummary(log);\n\n\t\t// Print task summary if required\n\t\telse if (Config.STARTUP_SUMMARY.value().orElse(true))\n\t\t\tlogTaskSummary(log);\n\n\t\t// Launch idle loop\n\t\tif (idle != null)\n\t\t\tidle.start();\n\n\t\t// Cleanup\n\t\ttasks = null;\n\n\t\tlog.info(\"Initialization completed in {} ms\", System.currentTimeMillis() - timestamp);\n\t}", "signature": "void dispatch(Class<?> main, String[] args, InstanceType instance, InstanceFlavor flavor)", "full_signature": "public static void dispatch(Class<?> main, String[] args, InstanceType instance, InstanceFlavor flavor)", "class_method_signature": "MainDispatch.dispatch(Class<?> main, String[] args, InstanceType instance, InstanceFlavor flavor)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "requireNonNull", "currentTimeMillis", "getLogger", "setDefaultUncaughtExceptionHandler", "error", "addShutdownHook", "getRuntime", "forEach", "execute", "toString", "error", "invoke", "getDeclaredMethod", "getName", "name", "execute", "failure", "isSkipped", "getResult", "getOutcome", "fatal", "logTaskSummary", "exit", "count", "filter", "stream", "getResult", "getOutcome", "logTaskSummary", "orElse", "value", "logTaskSummary", "start", "info", "currentTimeMillis"]}, "repository": {"repo_id": 100069523, "url": "https://github.com/Subterranean-Security/Sandpolis", "stars": 25, "created": "8/11/2017 8:55:30 PM +00:00", "updates": "2020-01-27T01:41:01+00:00", "fork": "False", "license": "licensed"}}