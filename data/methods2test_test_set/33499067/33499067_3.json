{"test_class": {"identifier": "FirmwareImageTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "byte[] rawImageData_valid = intArrayToByteArray(new int[] {\n\n            // Header data (first and only block)\n            0x2B, 0x65,                // CRC\n            0xFF, 0xFF,                // CRC Shadow\n            0x64, 0x00,                // Version\n            0x00, 0x7C,                // Length\n            0x41, 0x41, 0x41, 0x41,    // AAAA\n            0xFF, 0xFF, 0xFF, 0xFF     // Reserved\n    });", "modifier": "", "type": "byte[]", "declarator": "rawImageData_valid = intArrayToByteArray(new int[] {\n\n            // Header data (first and only block)\n            0x2B, 0x65,                // CRC\n            0xFF, 0xFF,                // CRC Shadow\n            0x64, 0x00,                // Version\n            0x00, 0x7C,                // Length\n            0x41, 0x41, 0x41, 0x41,    // AAAA\n            0xFF, 0xFF, 0xFF, 0xFF     // Reserved\n    })", "var_name": "rawImageData_valid"}, {"original_string": "byte[] rawImageData_tooShort = intArrayToByteArray(new int[] {\n            0x2B, 0x65, 0xFF, 0xFF,\n    });", "modifier": "", "type": "byte[]", "declarator": "rawImageData_tooShort = intArrayToByteArray(new int[] {\n            0x2B, 0x65, 0xFF, 0xFF,\n    })", "var_name": "rawImageData_tooShort"}, {"original_string": "byte[] rawImageData_invalid = intArrayToByteArray(new int[] {\n\n            // Valid header - 16 bytes data\n            0x2B, 0x65,                // CRC\n            0xFF, 0xFF,                // CRC Shadow\n            0x64, 0x00,                // Version\n            0x00, 0x7C,                // Length\n            0x41, 0x41, 0x41, 0x41,    // AAAA\n            0xFF, 0xFF, 0xFF, 0xFF,     // Reserved\n\n            // Valid block - 16 bytes of image data\n            0xFF, 0xFF,\n            0xFF, 0xFF,\n            0xFF, 0xFF,\n            0xFF, 0xFF,\n            0xFF, 0xFF, 0xFF, 0xFF,\n            0xFF, 0xFF, 0xFF, 0xFF,\n\n            // Invalid block - only 10 bytes of image data\n            0xFF, 0xFF,\n            0xFF, 0xFF,\n            0xFF, 0xFF,\n            0xFF, 0xFF,\n            0xFF, 0xFF\n\n    });", "modifier": "", "type": "byte[]", "declarator": "rawImageData_invalid = intArrayToByteArray(new int[] {\n\n            // Valid header - 16 bytes data\n            0x2B, 0x65,                // CRC\n            0xFF, 0xFF,                // CRC Shadow\n            0x64, 0x00,                // Version\n            0x00, 0x7C,                // Length\n            0x41, 0x41, 0x41, 0x41,    // AAAA\n            0xFF, 0xFF, 0xFF, 0xFF,     // Reserved\n\n            // Valid block - 16 bytes of image data\n            0xFF, 0xFF,\n            0xFF, 0xFF,\n            0xFF, 0xFF,\n            0xFF, 0xFF,\n            0xFF, 0xFF, 0xFF, 0xFF,\n            0xFF, 0xFF, 0xFF, 0xFF,\n\n            // Invalid block - only 10 bytes of image data\n            0xFF, 0xFF,\n            0xFF, 0xFF,\n            0xFF, 0xFF,\n            0xFF, 0xFF,\n            0xFF, 0xFF\n\n    })", "var_name": "rawImageData_invalid"}], "file": "sdk/src/test/java/com/punchthrough/bean/sdk/upload/FirmwareImageTest.java"}, "test_case": {"identifier": "testMetadata", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMetadata() throws ImageParsingException {\n        FirmwareImage image = new FirmwareImage(rawImageData_valid, \"\");\n        assertThat(image.metadata()).isEqualTo(intArrayToByteArray(new int[] {\n                0x64, 0x00,                // Version\n                0x00, 0x7C,                // Length\n                0x41, 0x41, 0x41, 0x41,    // AAAA\n                0xFF, 0xFF, 0xFF, 0xFF     // Reserved\n        }));\n\n    }", "signature": "void testMetadata()", "full_signature": "@Test public void testMetadata()", "class_method_signature": "FirmwareImageTest.testMetadata()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "metadata", "intArrayToByteArray"]}, "focal_class": {"identifier": "FirmwareImage", "superclass": "", "interfaces": "implements Chunk.Chunkable", "fields": [{"original_string": "private static final int FW_BLOCK_SIZE = 16;", "modifier": "private static final", "type": "int", "declarator": "FW_BLOCK_SIZE = 16", "var_name": "FW_BLOCK_SIZE"}, {"original_string": "private byte[] rawData;", "modifier": "private", "type": "byte[]", "declarator": "rawData", "var_name": "rawData"}, {"original_string": "private String filename;", "modifier": "private", "type": "String", "declarator": "filename", "var_name": "filename"}], "methods": [{"identifier": "FirmwareImage", "parameters": "(byte[] rawData, String filename)", "modifiers": "public", "return": "", "signature": " FirmwareImage(byte[] rawData, String filename)", "full_signature": "public  FirmwareImage(byte[] rawData, String filename)", "class_method_signature": "FirmwareImage.FirmwareImage(byte[] rawData, String filename)", "testcase": false, "constructor": true}, {"identifier": "uint16FromData", "parameters": "(int offset)", "modifiers": "private", "return": "int", "signature": "int uint16FromData(int offset)", "full_signature": "private int uint16FromData(int offset)", "class_method_signature": "FirmwareImage.uint16FromData(int offset)", "testcase": false, "constructor": false}, {"identifier": "uint8_4FromData", "parameters": "(int offset)", "modifiers": "private", "return": "byte[]", "signature": "byte[] uint8_4FromData(int offset)", "full_signature": "private byte[] uint8_4FromData(int offset)", "class_method_signature": "FirmwareImage.uint8_4FromData(int offset)", "testcase": false, "constructor": false}, {"identifier": "data", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] data()", "full_signature": "public byte[] data()", "class_method_signature": "FirmwareImage.data()", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String name()", "full_signature": "public String name()", "class_method_signature": "FirmwareImage.name()", "testcase": false, "constructor": false}, {"identifier": "sizeBytes", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int sizeBytes()", "full_signature": "public int sizeBytes()", "class_method_signature": "FirmwareImage.sizeBytes()", "testcase": false, "constructor": false}, {"identifier": "version", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long version()", "full_signature": "public long version()", "class_method_signature": "FirmwareImage.version()", "testcase": false, "constructor": false}, {"identifier": "getChunkableData", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getChunkableData()", "full_signature": "@Override public byte[] getChunkableData()", "class_method_signature": "FirmwareImage.getChunkableData()", "testcase": false, "constructor": false}, {"identifier": "crc", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int crc()", "full_signature": "public int crc()", "class_method_signature": "FirmwareImage.crc()", "testcase": false, "constructor": false}, {"identifier": "crcShadow", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int crcShadow()", "full_signature": "public int crcShadow()", "class_method_signature": "FirmwareImage.crcShadow()", "testcase": false, "constructor": false}, {"identifier": "intVersion", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int intVersion()", "full_signature": "public int intVersion()", "class_method_signature": "FirmwareImage.intVersion()", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int length()", "full_signature": "public int length()", "class_method_signature": "FirmwareImage.length()", "testcase": false, "constructor": false}, {"identifier": "uniqueID", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] uniqueID()", "full_signature": "public byte[] uniqueID()", "class_method_signature": "FirmwareImage.uniqueID()", "testcase": false, "constructor": false}, {"identifier": "reserved", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] reserved()", "full_signature": "public byte[] reserved()", "class_method_signature": "FirmwareImage.reserved()", "testcase": false, "constructor": false}, {"identifier": "metadata", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] metadata()", "full_signature": "public byte[] metadata()", "class_method_signature": "FirmwareImage.metadata()", "testcase": false, "constructor": false}, {"identifier": "blockCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int blockCount()", "full_signature": "public int blockCount()", "class_method_signature": "FirmwareImage.blockCount()", "testcase": false, "constructor": false}, {"identifier": "block", "parameters": "(int index)", "modifiers": "public", "return": "byte[]", "signature": "byte[] block(int index)", "full_signature": "public byte[] block(int index)", "class_method_signature": "FirmwareImage.block(int index)", "testcase": false, "constructor": false}], "file": "sdk/src/main/java/com/punchthrough/bean/sdk/upload/FirmwareImage.java"}, "focal_method": {"identifier": "metadata", "parameters": "()", "modifiers": "public", "return": "byte[]", "body": "public byte[] metadata() {\n        ByteBuffer buffer = ByteBuffer.allocate(12);\n        buffer.put(intToTwoBytes(intVersion(), Constants.CC2540_BYTE_ORDER));\n        buffer.put(intToTwoBytes(length(), Constants.CC2540_BYTE_ORDER));\n        buffer.put(uniqueID());\n        buffer.put(reserved());\n        return buffer.array();\n    }", "signature": "byte[] metadata()", "full_signature": "public byte[] metadata()", "class_method_signature": "FirmwareImage.metadata()", "testcase": false, "constructor": false, "invocations": ["allocate", "put", "intToTwoBytes", "intVersion", "put", "intToTwoBytes", "length", "put", "uniqueID", "put", "reserved", "array"]}, "repository": {"repo_id": 33499067, "url": "https://github.com/PunchThrough/bean-sdk-android", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 55, "size": 2818, "license": "licensed"}}