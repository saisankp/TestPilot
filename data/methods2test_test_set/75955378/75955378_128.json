{"test_class": {"identifier": "S3TransportBufferTest", "superclass": "", "interfaces": "", "fields": [], "file": "transporters/src/test/java/com/nextdoor/bender/ipc/s3/S3TransportBufferTest.java"}, "test_case": {"identifier": "testDoubleClose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDoubleClose() throws IOException, TransportException {\n    S3TransportSerializer serializer = mock(S3TransportSerializer.class);\n    S3TransportBuffer buffer = new S3TransportBuffer(5, false, serializer);\n\n    buffer.close();\n    buffer.close();\n  }", "signature": "void testDoubleClose()", "full_signature": "@Test public void testDoubleClose()", "class_method_signature": "S3TransportBufferTest.testDoubleClose()", "testcase": true, "constructor": false, "invocations": ["mock", "close", "close"]}, "focal_class": {"identifier": "S3TransportBuffer", "superclass": "", "interfaces": "implements TransportBuffer", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(S3TransportBuffer.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(S3TransportBuffer.class)", "var_name": "logger"}, {"original_string": "private S3TransportSerializer serializer;", "modifier": "private", "type": "S3TransportSerializer", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "private long maxBytes;", "modifier": "private", "type": "long", "declarator": "maxBytes", "var_name": "maxBytes"}, {"original_string": "private CountingOutputStream cos;", "modifier": "private", "type": "CountingOutputStream", "declarator": "cos", "var_name": "cos"}, {"original_string": "private ByteArrayOutputStream baos;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "baos", "var_name": "baos"}, {"original_string": "private OutputStream os;", "modifier": "private", "type": "OutputStream", "declarator": "os", "var_name": "os"}, {"original_string": "private boolean isCompressed;", "modifier": "private", "type": "boolean", "declarator": "isCompressed", "var_name": "isCompressed"}], "methods": [{"identifier": "S3TransportBuffer", "parameters": "(long maxBytes, boolean useCompression, S3TransportSerializer serializer)", "modifiers": "public", "return": "", "signature": " S3TransportBuffer(long maxBytes, boolean useCompression, S3TransportSerializer serializer)", "full_signature": "public  S3TransportBuffer(long maxBytes, boolean useCompression, S3TransportSerializer serializer)", "class_method_signature": "S3TransportBuffer.S3TransportBuffer(long maxBytes, boolean useCompression, S3TransportSerializer serializer)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(InternalEvent ievent)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(InternalEvent ievent)", "full_signature": "@Override public boolean add(InternalEvent ievent)", "class_method_signature": "S3TransportBuffer.add(InternalEvent ievent)", "testcase": false, "constructor": false}, {"identifier": "getInternalBuffer", "parameters": "()", "modifiers": "@Override public", "return": "ByteArrayOutputStream", "signature": "ByteArrayOutputStream getInternalBuffer()", "full_signature": "@Override public ByteArrayOutputStream getInternalBuffer()", "class_method_signature": "S3TransportBuffer.getInternalBuffer()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "S3TransportBuffer.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "S3TransportBuffer.close()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "S3TransportBuffer.clear()", "testcase": false, "constructor": false}, {"identifier": "isCompressed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCompressed()", "full_signature": "public boolean isCompressed()", "class_method_signature": "S3TransportBuffer.isCompressed()", "testcase": false, "constructor": false}], "file": "transporters/src/main/java/com/nextdoor/bender/ipc/s3/S3TransportBuffer.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void close() {\n    if (this.os != this.cos) {\n      try {\n        this.os.flush();\n      } catch (IOException e) {\n        logger.warn(\"unable to flush os\");\n      }\n      try {\n        this.os.close();\n      } catch (IOException e) {\n        logger.warn(\"unable to close os\");\n      }\n    }\n\n    try {\n      this.cos.flush();\n    } catch (IOException e) {\n      logger.warn(\"unable to flush cos\");\n    }\n\n    try {\n      this.cos.close();\n    } catch (IOException e) {\n      logger.warn(\"unable to close cos\");\n    }\n  }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "S3TransportBuffer.close()", "testcase": false, "constructor": false, "invocations": ["flush", "warn", "close", "warn", "flush", "warn", "close", "warn"]}, "repository": {"repo_id": 75955378, "url": "https://github.com/Nextdoor/bender", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 163, "size": 1503, "license": "licensed"}}