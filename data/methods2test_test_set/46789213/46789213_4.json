{"test_class": {"identifier": "TestTinyTablesTriple", "superclass": "", "interfaces": "", "fields": [], "file": "suite/tinytables/src/test/java/dk/alexandra/fresco/suite/tinytables/datatypes/TestTinyTablesTriple.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToString() {\n    TinyTablesElement e = TinyTablesElement.getInstance(true);\n    TinyTablesTriple trip = TinyTablesTriple.fromShares(e.getShare(), e.getShare(), e.getShare());\n    assertThat(trip.toString(), is(\"TinyTablesTriple[\" + e + \",\" + e + \",\" + e + \"]\"));\n  }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "TestTinyTablesTriple.testToString()", "testcase": true, "constructor": false, "invocations": ["getInstance", "fromShares", "getShare", "getShare", "getShare", "assertThat", "toString", "is"]}, "focal_class": {"identifier": "TinyTablesTriple", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 7661693903147118861L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 7661693903147118861L", "var_name": "serialVersionUID"}, {"original_string": "private static final TinyTablesTriple trip0 = new TinyTablesTriple(false, false, false);", "modifier": "private static final", "type": "TinyTablesTriple", "declarator": "trip0 = new TinyTablesTriple(false, false, false)", "var_name": "trip0"}, {"original_string": "private static final TinyTablesTriple trip1 = new TinyTablesTriple(false, false, true);", "modifier": "private static final", "type": "TinyTablesTriple", "declarator": "trip1 = new TinyTablesTriple(false, false, true)", "var_name": "trip1"}, {"original_string": "private static final TinyTablesTriple trip2 = new TinyTablesTriple(false, true, false);", "modifier": "private static final", "type": "TinyTablesTriple", "declarator": "trip2 = new TinyTablesTriple(false, true, false)", "var_name": "trip2"}, {"original_string": "private static final TinyTablesTriple trip3 = new TinyTablesTriple(false, true, true);", "modifier": "private static final", "type": "TinyTablesTriple", "declarator": "trip3 = new TinyTablesTriple(false, true, true)", "var_name": "trip3"}, {"original_string": "private static final TinyTablesTriple trip4 = new TinyTablesTriple(true, false, false);", "modifier": "private static final", "type": "TinyTablesTriple", "declarator": "trip4 = new TinyTablesTriple(true, false, false)", "var_name": "trip4"}, {"original_string": "private static final TinyTablesTriple trip5 = new TinyTablesTriple(true, false, true);", "modifier": "private static final", "type": "TinyTablesTriple", "declarator": "trip5 = new TinyTablesTriple(true, false, true)", "var_name": "trip5"}, {"original_string": "private static final TinyTablesTriple trip6 = new TinyTablesTriple(true, true, false);", "modifier": "private static final", "type": "TinyTablesTriple", "declarator": "trip6 = new TinyTablesTriple(true, true, false)", "var_name": "trip6"}, {"original_string": "private static final TinyTablesTriple trip7 = new TinyTablesTriple(true, true, true);", "modifier": "private static final", "type": "TinyTablesTriple", "declarator": "trip7 = new TinyTablesTriple(true, true, true)", "var_name": "trip7"}, {"original_string": "private static final TinyTablesTriple[] trips = new TinyTablesTriple[] {\n      trip0,\n      trip1,\n      trip2,\n      trip3,\n      trip4,\n      trip5,\n      trip6,\n      trip7\n  };", "modifier": "private static final", "type": "TinyTablesTriple[]", "declarator": "trips = new TinyTablesTriple[] {\n      trip0,\n      trip1,\n      trip2,\n      trip3,\n      trip4,\n      trip5,\n      trip6,\n      trip7\n  }", "var_name": "trips"}, {"original_string": "private final TinyTablesElement elementA;", "modifier": "private final", "type": "TinyTablesElement", "declarator": "elementA", "var_name": "elementA"}, {"original_string": "private final TinyTablesElement elementB;", "modifier": "private final", "type": "TinyTablesElement", "declarator": "elementB", "var_name": "elementB"}, {"original_string": "private final TinyTablesElement elementC;", "modifier": "private final", "type": "TinyTablesElement", "declarator": "elementC", "var_name": "elementC"}], "methods": [{"identifier": "fromShares", "parameters": "(boolean shareA, boolean shareB, boolean shareC)", "modifiers": "public static", "return": "TinyTablesTriple", "signature": "TinyTablesTriple fromShares(boolean shareA, boolean shareB, boolean shareC)", "full_signature": "public static TinyTablesTriple fromShares(boolean shareA, boolean shareB, boolean shareC)", "class_method_signature": "TinyTablesTriple.fromShares(boolean shareA, boolean shareB, boolean shareC)", "testcase": false, "constructor": false}, {"identifier": "TinyTablesTriple", "parameters": "(TinyTablesElement a, TinyTablesElement b, TinyTablesElement c)", "modifiers": "private", "return": "", "signature": " TinyTablesTriple(TinyTablesElement a, TinyTablesElement b, TinyTablesElement c)", "full_signature": "private  TinyTablesTriple(TinyTablesElement a, TinyTablesElement b, TinyTablesElement c)", "class_method_signature": "TinyTablesTriple.TinyTablesTriple(TinyTablesElement a, TinyTablesElement b, TinyTablesElement c)", "testcase": false, "constructor": true}, {"identifier": "TinyTablesTriple", "parameters": "(boolean a, boolean b, boolean c)", "modifiers": "private", "return": "", "signature": " TinyTablesTriple(boolean a, boolean b, boolean c)", "full_signature": "private  TinyTablesTriple(boolean a, boolean b, boolean c)", "class_method_signature": "TinyTablesTriple.TinyTablesTriple(boolean a, boolean b, boolean c)", "testcase": false, "constructor": true}, {"identifier": "getA", "parameters": "()", "modifiers": "public", "return": "TinyTablesElement", "signature": "TinyTablesElement getA()", "full_signature": "public TinyTablesElement getA()", "class_method_signature": "TinyTablesTriple.getA()", "testcase": false, "constructor": false}, {"identifier": "getB", "parameters": "()", "modifiers": "public", "return": "TinyTablesElement", "signature": "TinyTablesElement getB()", "full_signature": "public TinyTablesElement getB()", "class_method_signature": "TinyTablesTriple.getB()", "testcase": false, "constructor": false}, {"identifier": "getC", "parameters": "()", "modifiers": "public", "return": "TinyTablesElement", "signature": "TinyTablesElement getC()", "full_signature": "public TinyTablesElement getC()", "class_method_signature": "TinyTablesTriple.getC()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TinyTablesTriple.toString()", "testcase": false, "constructor": false}], "file": "suite/tinytables/src/main/java/dk/alexandra/fresco/suite/tinytables/datatypes/TinyTablesTriple.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String toString() {\n    return \"TinyTablesTriple[\" + elementA + \",\" + elementB + \",\" + elementC + \"]\";\n  }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TinyTablesTriple.toString()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}