{"test_class": {"identifier": "MergeSortTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Comparator<Integer> ascOrderComparator = new Comparator<Integer>() {\n\t\t@Override\n\t\tpublic int compare(Integer a, Integer b) {\n\t\t\treturn a - b;\n\t\t}\n\t};", "modifier": "private final", "type": "Comparator<Integer>", "declarator": "ascOrderComparator = new Comparator<Integer>() {\n\t\t@Override\n\t\tpublic int compare(Integer a, Integer b) {\n\t\t\treturn a - b;\n\t\t}\n\t}", "var_name": "ascOrderComparator"}, {"original_string": "private final Comparator<Integer> descOrderComparator = new Comparator<Integer>() {\n\t\t@Override\n\t\tpublic int compare(Integer a, Integer b) {\n\t\t\treturn b - a;\n\t\t}\n\t};", "modifier": "private final", "type": "Comparator<Integer>", "declarator": "descOrderComparator = new Comparator<Integer>() {\n\t\t@Override\n\t\tpublic int compare(Integer a, Integer b) {\n\t\t\treturn b - a;\n\t\t}\n\t}", "var_name": "descOrderComparator"}], "file": "algs/src/test/java/com/github/kowshik/bigo/sorting/MergeSortTest.java"}, "test_case": {"identifier": "descendingOrderSort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void descendingOrderSort() {\n\t\tInteger[] array = { 1, 2, 3, 4, 5 };\n\t\tInteger[] sorted = MergeSort.mergeSort(Integer.class, array,\n\t\t\t\tdescOrderComparator);\n\t\tassertArrayEquals(\"Failure => Array returned is not sorted.\", sorted,\n\t\t\t\tnew Integer[] { 5, 4, 3, 2, 1 });\n\t}", "signature": "void descendingOrderSort()", "full_signature": "@Test public void descendingOrderSort()", "class_method_signature": "MergeSortTest.descendingOrderSort()", "testcase": true, "constructor": false, "invocations": ["mergeSort", "assertArrayEquals"]}, "focal_class": {"identifier": "MergeSort", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "mergeSort", "parameters": "(Class<T> type, T[] array,\n\t\t\tComparator<T> comparator)", "modifiers": "public static", "return": "T[]", "signature": "T[] mergeSort(Class<T> type, T[] array,\n\t\t\tComparator<T> comparator)", "full_signature": "public static T[] mergeSort(Class<T> type, T[] array,\n\t\t\tComparator<T> comparator)", "class_method_signature": "MergeSort.mergeSort(Class<T> type, T[] array,\n\t\t\tComparator<T> comparator)", "testcase": false, "constructor": false}, {"identifier": "mergeSort", "parameters": "(Class<T> type, T[] array, int start,\n\t\t\tint end, Comparator<T> comparator)", "modifiers": "private static", "return": "T[]", "signature": "T[] mergeSort(Class<T> type, T[] array, int start,\n\t\t\tint end, Comparator<T> comparator)", "full_signature": "private static T[] mergeSort(Class<T> type, T[] array, int start,\n\t\t\tint end, Comparator<T> comparator)", "class_method_signature": "MergeSort.mergeSort(Class<T> type, T[] array, int start,\n\t\t\tint end, Comparator<T> comparator)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(Class<T> type, T[] foo, T[] bar,\n\t\t\tComparator<T> comparator)", "modifiers": "public static", "return": "T[]", "signature": "T[] merge(Class<T> type, T[] foo, T[] bar,\n\t\t\tComparator<T> comparator)", "full_signature": "public static T[] merge(Class<T> type, T[] foo, T[] bar,\n\t\t\tComparator<T> comparator)", "class_method_signature": "MergeSort.merge(Class<T> type, T[] foo, T[] bar,\n\t\t\tComparator<T> comparator)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/kowshik/bigo/sorting/MergeSort.java"}, "focal_method": {"identifier": "mergeSort", "parameters": "(Class<T> type, T[] array,\n\t\t\tComparator<T> comparator)", "modifiers": "public static", "return": "T[]", "body": "public static <T> T[] mergeSort(Class<T> type, T[] array,\n\t\t\tComparator<T> comparator) {\n\t\tif (array.length == 0) {\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tT[] toReturn = (T[]) Array.newInstance(type, 0);\n\t\t\treturn toReturn;\n\t\t}\n\n\t\tT[] sorted = mergeSort(type, array, 0, array.length - 1, comparator);\n\t\tfor (int index = 0; index < array.length; index++) {\n\t\t\tarray[index] = sorted[index];\n\t\t}\n\n\t\treturn sorted;\n\t}", "signature": "T[] mergeSort(Class<T> type, T[] array,\n\t\t\tComparator<T> comparator)", "full_signature": "public static T[] mergeSort(Class<T> type, T[] array,\n\t\t\tComparator<T> comparator)", "class_method_signature": "MergeSort.mergeSort(Class<T> type, T[] array,\n\t\t\tComparator<T> comparator)", "testcase": false, "constructor": false, "invocations": ["newInstance", "mergeSort"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}