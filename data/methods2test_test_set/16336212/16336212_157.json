{"test_class": {"identifier": "HttpServerHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "ui/src/test/java/org/glowroot/ui/HttpServerHandlerTest.java"}, "test_case": {"identifier": "shouldStripContextPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldStripContextPath() {\n        assertThat(HttpServerHandler.stripContextPath(\"/one\", \"/\")).isEqualTo(\"/one\");\n        assertThat(HttpServerHandler.stripContextPath(\"/\", \"/\")).isEqualTo(\"/\");\n        assertThat(HttpServerHandler.stripContextPath(\"/one\", \"/one\")).isEqualTo(\"/\");\n        assertThat(HttpServerHandler.stripContextPath(\"/one/\", \"/one\")).isEqualTo(\"/\");\n        assertThat(HttpServerHandler.stripContextPath(\"/one/two\", \"/one\")).isEqualTo(\"/two\");\n        assertThat(HttpServerHandler.stripContextPath(\"/one/two/\", \"/one\")).isEqualTo(\"/two/\");\n    }", "signature": "void shouldStripContextPath()", "full_signature": "@Test public void shouldStripContextPath()", "class_method_signature": "HttpServerHandlerTest.shouldStripContextPath()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "stripContextPath", "isEqualTo", "assertThat", "stripContextPath", "isEqualTo", "assertThat", "stripContextPath", "isEqualTo", "assertThat", "stripContextPath", "isEqualTo", "assertThat", "stripContextPath", "isEqualTo", "assertThat", "stripContextPath"]}, "focal_class": {"identifier": "HttpServerHandler", "superclass": "extends ChannelInboundHandlerAdapter", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(HttpServerHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HttpServerHandler.class)", "var_name": "logger"}, {"original_string": "private static final ThreadLocal</*@Nullable*/ Channel> currentChannel =\n            new ThreadLocal</*@Nullable*/ Channel>();", "modifier": "private static final", "type": "ThreadLocal</*@Nullable*/ Channel>", "declarator": "currentChannel =\n            new ThreadLocal</*@Nullable*/ Channel>()", "var_name": "currentChannel"}, {"original_string": "private final ChannelGroup allChannels;", "modifier": "private final", "type": "ChannelGroup", "declarator": "allChannels", "var_name": "allChannels"}, {"original_string": "private final Supplier<String> contextPathSupplier;", "modifier": "private final", "type": "Supplier<String>", "declarator": "contextPathSupplier", "var_name": "contextPathSupplier"}, {"original_string": "private final CommonHandler commonHandler;", "modifier": "private final", "type": "CommonHandler", "declarator": "commonHandler", "var_name": "commonHandler"}], "methods": [{"identifier": "HttpServerHandler", "parameters": "(Supplier<String> contextPathSupplier, CommonHandler commonHandler)", "modifiers": "", "return": "", "signature": " HttpServerHandler(Supplier<String> contextPathSupplier, CommonHandler commonHandler)", "full_signature": "  HttpServerHandler(Supplier<String> contextPathSupplier, CommonHandler commonHandler)", "class_method_signature": "HttpServerHandler.HttpServerHandler(Supplier<String> contextPathSupplier, CommonHandler commonHandler)", "testcase": false, "constructor": true}, {"identifier": "channelActive", "parameters": "(ChannelHandlerContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void channelActive(ChannelHandlerContext ctx)", "full_signature": "@Override public void channelActive(ChannelHandlerContext ctx)", "class_method_signature": "HttpServerHandler.channelActive(ChannelHandlerContext ctx)", "testcase": false, "constructor": false}, {"identifier": "closeAllButCurrent", "parameters": "()", "modifiers": "", "return": "void", "signature": "void closeAllButCurrent()", "full_signature": " void closeAllButCurrent()", "class_method_signature": "HttpServerHandler.closeAllButCurrent()", "testcase": false, "constructor": false}, {"identifier": "channelReadComplete", "parameters": "(ChannelHandlerContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void channelReadComplete(ChannelHandlerContext ctx)", "full_signature": "@Override public void channelReadComplete(ChannelHandlerContext ctx)", "class_method_signature": "HttpServerHandler.channelReadComplete(ChannelHandlerContext ctx)", "testcase": false, "constructor": false}, {"identifier": "channelRead", "parameters": "(ChannelHandlerContext ctx, Object msg)", "modifiers": "@Override public", "return": "void", "signature": "void channelRead(ChannelHandlerContext ctx, Object msg)", "full_signature": "@Override public void channelRead(ChannelHandlerContext ctx, Object msg)", "class_method_signature": "HttpServerHandler.channelRead(ChannelHandlerContext ctx, Object msg)", "testcase": false, "constructor": false}, {"identifier": "sendResponse", "parameters": "(ChannelHandlerContext ctx, FullHttpRequest request,\n            CommonResponse response, boolean keepAlive)", "modifiers": "private static", "return": "void", "signature": "void sendResponse(ChannelHandlerContext ctx, FullHttpRequest request,\n            CommonResponse response, boolean keepAlive)", "full_signature": "private static void sendResponse(ChannelHandlerContext ctx, FullHttpRequest request,\n            CommonResponse response, boolean keepAlive)", "class_method_signature": "HttpServerHandler.sendResponse(ChannelHandlerContext ctx, FullHttpRequest request,\n            CommonResponse response, boolean keepAlive)", "testcase": false, "constructor": false}, {"identifier": "sendFullResponse", "parameters": "(ChannelHandlerContext ctx, FullHttpRequest request,\n            FullHttpResponse response, boolean keepAlive)", "modifiers": "@SuppressWarnings(\"argument.type.incompatible\") private static", "return": "void", "signature": "void sendFullResponse(ChannelHandlerContext ctx, FullHttpRequest request,\n            FullHttpResponse response, boolean keepAlive)", "full_signature": "@SuppressWarnings(\"argument.type.incompatible\") private static void sendFullResponse(ChannelHandlerContext ctx, FullHttpRequest request,\n            FullHttpResponse response, boolean keepAlive)", "class_method_signature": "HttpServerHandler.sendFullResponse(ChannelHandlerContext ctx, FullHttpRequest request,\n            FullHttpResponse response, boolean keepAlive)", "testcase": false, "constructor": false}, {"identifier": "exceptionCaught", "parameters": "(ChannelHandlerContext ctx, Throwable cause)", "modifiers": "@Override public", "return": "void", "signature": "void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)", "full_signature": "@Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)", "class_method_signature": "HttpServerHandler.exceptionCaught(ChannelHandlerContext ctx, Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "stripContextPath", "parameters": "(String path, String contextPath)", "modifiers": "@VisibleForTesting static", "return": "String", "signature": "String stripContextPath(String path, String contextPath)", "full_signature": "@VisibleForTesting static String stripContextPath(String path, String contextPath)", "class_method_signature": "HttpServerHandler.stripContextPath(String path, String contextPath)", "testcase": false, "constructor": false}], "file": "ui/src/main/java/org/glowroot/ui/HttpServerHandler.java"}, "focal_method": {"identifier": "stripContextPath", "parameters": "(String path, String contextPath)", "modifiers": "@VisibleForTesting static", "return": "String", "body": "@VisibleForTesting\n    static String stripContextPath(String path, String contextPath) {\n        if (contextPath.equals(\"/\")) {\n            return path;\n        }\n        if (path.equals(contextPath)) {\n            return \"/\";\n        }\n        return path.substring(contextPath.length());\n    }", "signature": "String stripContextPath(String path, String contextPath)", "full_signature": "@VisibleForTesting static String stripContextPath(String path, String contextPath)", "class_method_signature": "HttpServerHandler.stripContextPath(String path, String contextPath)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "substring", "length"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}