{"test_class": {"identifier": "EntityUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static TemporaryFolder testFolder = new TemporaryFolder();", "modifier": "@ClassRule\n    public static", "type": "TemporaryFolder", "declarator": "testFolder = new TemporaryFolder()", "var_name": "testFolder"}, {"original_string": "private JCodeModel jCodeModel = new JCodeModel();", "modifier": "private", "type": "JCodeModel", "declarator": "jCodeModel = new JCodeModel()", "var_name": "jCodeModel"}], "file": "neo4j/src/test/java/eu/drus/jpa/unit/neo4j/dataset/EntityUtilsTest.java"}, "test_case": {"identifier": "testGetEntityClassFromNodeLabelsHavingTheLabelDeclaredByTheClassNameWithSingleTableInheritance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetEntityClassFromNodeLabelsHavingTheLabelDeclaredByTheClassNameWithSingleTableInheritance() throws Exception {\n        final String simpleClassNameBase = \"EntityClass\";\n        final String simpleClassNameA = \"SubEntityClassA\";\n        final String simpleClassNameB = \"SubEntityClassB\";\n\n        final JPackage jp = jCodeModel.rootPackage();\n        final JDefinedClass jBaseClass = jp._class(JMod.PUBLIC, simpleClassNameBase);\n        jBaseClass.annotate(Entity.class);\n        jBaseClass.annotate(Inheritance.class).param(\"strategy\", InheritanceType.SINGLE_TABLE);\n        jBaseClass.annotate(DiscriminatorColumn.class).param(\"name\", \"TYPE\");\n\n        final JDefinedClass jSubclassA = jp._class(JMod.PUBLIC, simpleClassNameA)._extends(jBaseClass);\n        jSubclassA.annotate(Entity.class);\n        jSubclassA.annotate(DiscriminatorValue.class).param(\"value\", \"A\");\n\n        final JDefinedClass jSubclassB = jp._class(JMod.PUBLIC, simpleClassNameB)._extends(jBaseClass);\n        jSubclassB.annotate(Entity.class);\n        jSubclassB.annotate(DiscriminatorValue.class).param(\"value\", \"B\");\n\n        buildModel(testFolder.getRoot(), jCodeModel);\n\n        compileModel(testFolder.getRoot());\n\n        final Class<?> baseClass = loadClass(testFolder.getRoot(), jBaseClass.name());\n        final Class<?> subClassA = loadClass(testFolder.getRoot(), jSubclassA.name());\n        final Class<?> subClassB = loadClass(testFolder.getRoot(), jSubclassB.name());\n\n        final Class<?> clazz = EntityUtils.getEntityClassFromNodeLabels(Arrays.asList(simpleClassNameBase),\n                Arrays.asList(baseClass, subClassA, subClassB));\n\n        assertThat(clazz, equalTo(baseClass));\n    }", "signature": "void testGetEntityClassFromNodeLabelsHavingTheLabelDeclaredByTheClassNameWithSingleTableInheritance()", "full_signature": "@Test public void testGetEntityClassFromNodeLabelsHavingTheLabelDeclaredByTheClassNameWithSingleTableInheritance()", "class_method_signature": "EntityUtilsTest.testGetEntityClassFromNodeLabelsHavingTheLabelDeclaredByTheClassNameWithSingleTableInheritance()", "testcase": true, "constructor": false, "invocations": ["rootPackage", "_class", "annotate", "param", "annotate", "param", "annotate", "_extends", "_class", "annotate", "param", "annotate", "_extends", "_class", "annotate", "param", "annotate", "buildModel", "getRoot", "compileModel", "getRoot", "loadClass", "getRoot", "name", "loadClass", "getRoot", "name", "loadClass", "getRoot", "name", "getEntityClassFromNodeLabels", "asList", "asList", "assertThat", "equalTo"]}, "focal_class": {"identifier": "EntityUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "EntityUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " EntityUtils()", "full_signature": "private  EntityUtils()", "class_method_signature": "EntityUtils.EntityUtils()", "testcase": false, "constructor": true}, {"identifier": "getNamesOfIdProperties", "parameters": "(final Class<?> clazz)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getNamesOfIdProperties(final Class<?> clazz)", "full_signature": "public static List<String> getNamesOfIdProperties(final Class<?> clazz)", "class_method_signature": "EntityUtils.getNamesOfIdProperties(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "collectIdNamesFromMethods", "parameters": "(final List<String> idList, final Class<?> c)", "modifiers": "private static", "return": "void", "signature": "void collectIdNamesFromMethods(final List<String> idList, final Class<?> c)", "full_signature": "private static void collectIdNamesFromMethods(final List<String> idList, final Class<?> c)", "class_method_signature": "EntityUtils.collectIdNamesFromMethods(final List<String> idList, final Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "collectIdNamesFromFields", "parameters": "(final List<String> idList, final Class<?> clazz)", "modifiers": "private static", "return": "void", "signature": "void collectIdNamesFromFields(final List<String> idList, final Class<?> clazz)", "full_signature": "private static void collectIdNamesFromFields(final List<String> idList, final Class<?> clazz)", "class_method_signature": "EntityUtils.collectIdNamesFromFields(final List<String> idList, final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getPropertyName", "parameters": "(final Field field)", "modifiers": "private static", "return": "String", "signature": "String getPropertyName(final Field field)", "full_signature": "private static String getPropertyName(final Field field)", "class_method_signature": "EntityUtils.getPropertyName(final Field field)", "testcase": false, "constructor": false}, {"identifier": "getEntityClassFromNodeLabels", "parameters": "(final List<String> labels, final List<Class<?>> classes)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getEntityClassFromNodeLabels(final List<String> labels, final List<Class<?>> classes)", "full_signature": "public static Class<?> getEntityClassFromNodeLabels(final List<String> labels, final List<Class<?>> classes)", "class_method_signature": "EntityUtils.getEntityClassFromNodeLabels(final List<String> labels, final List<Class<?>> classes)", "testcase": false, "constructor": false}], "file": "neo4j/src/main/java/eu/drus/jpa/unit/neo4j/dataset/EntityUtils.java"}, "focal_method": {"identifier": "getEntityClassFromNodeLabels", "parameters": "(final List<String> labels, final List<Class<?>> classes)", "modifiers": "public static", "return": "Class<?>", "body": "public static Class<?> getEntityClassFromNodeLabels(final List<String> labels, final List<Class<?>> classes)\n            throws NoSuchClassException {\n        for (final String label : labels) {\n            final Optional<Class<?>> classHit = classes.stream().filter(c -> {\n                // try to find the class based on its name\n                if (c.getName().endsWith(label)) {\n                    return true;\n                } else {\n                    // try to find the class based on the @Table(name) settings\n                    final Table annotation = c.getAnnotation(Table.class);\n                    return annotation != null && annotation.name().equals(label);\n                }\n            }).findFirst();\n\n            if (classHit.isPresent()) {\n                return classHit.get();\n            }\n        }\n\n        throw new NoSuchClassException(\"could not find class for a node with \" + labels + \" labels.\");\n    }", "signature": "Class<?> getEntityClassFromNodeLabels(final List<String> labels, final List<Class<?>> classes)", "full_signature": "public static Class<?> getEntityClassFromNodeLabels(final List<String> labels, final List<Class<?>> classes)", "class_method_signature": "EntityUtils.getEntityClassFromNodeLabels(final List<String> labels, final List<Class<?>> classes)", "testcase": false, "constructor": false, "invocations": ["findFirst", "filter", "stream", "endsWith", "getName", "getAnnotation", "equals", "name", "isPresent", "get"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}