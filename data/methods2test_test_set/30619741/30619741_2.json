{"test_class": {"identifier": "HystrixMethodHandlerTest", "superclass": "extends HystrixTestBase", "interfaces": "", "fields": [{"original_string": "private static final String SERVICE_NAME = \"TestingMicroservice\";", "modifier": "private static final", "type": "String", "declarator": "SERVICE_NAME = \"TestingMicroservice\"", "var_name": "SERVICE_NAME"}, {"original_string": "private static final String BEAN_NAME = \"TestingBean\";", "modifier": "private static final", "type": "String", "declarator": "BEAN_NAME = \"TestingBean\"", "var_name": "BEAN_NAME"}, {"original_string": "private static final String FIELD_NAME = \"testingField\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_NAME = \"testingField\"", "var_name": "FIELD_NAME"}, {"original_string": "private MicroserviceProxyBean microserviceProxyBean;", "modifier": "private", "type": "MicroserviceProxyBean", "declarator": "microserviceProxyBean", "var_name": "microserviceProxyBean"}, {"original_string": "private MicroserviceMethodHandler parentMethodHandler;", "modifier": "private", "type": "MicroserviceMethodHandler", "declarator": "parentMethodHandler", "var_name": "parentMethodHandler"}], "file": "hystrix-microservice-provider/src/test/java/io/silverware/microservices/providers/hystrix/execution/HystrixMethodHandlerTest.java"}, "test_case": {"identifier": "testGetProxyBean", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testGetProxyBean() {\n      HystrixMethodHandler hystrixMethodHandler = new HystrixMethodHandler(parentMethodHandler, null);\n      Assertions.assertThat(hystrixMethodHandler.getProxyBean()).isEqualTo(microserviceProxyBean);\n   }", "signature": "void testGetProxyBean()", "full_signature": "@Test public void testGetProxyBean()", "class_method_signature": "HystrixMethodHandlerTest.testGetProxyBean()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getProxyBean"]}, "focal_class": {"identifier": "HystrixMethodHandler", "superclass": "extends MicroserviceMethodHandler", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LogManager.getLogger(HystrixMethodHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LogManager.getLogger(HystrixMethodHandler.class)", "var_name": "log"}, {"original_string": "private final MicroserviceMethodHandler methodHandler;", "modifier": "private final", "type": "MicroserviceMethodHandler", "declarator": "methodHandler", "var_name": "methodHandler"}, {"original_string": "private final ServiceConfig serviceConfig;", "modifier": "private final", "type": "ServiceConfig", "declarator": "serviceConfig", "var_name": "serviceConfig"}, {"original_string": "private final Object fallbackService;", "modifier": "private final", "type": "Object", "declarator": "fallbackService", "var_name": "fallbackService"}], "methods": [{"identifier": "HystrixMethodHandler", "parameters": "(final MicroserviceMethodHandler methodHandler)", "modifiers": "public", "return": "", "signature": " HystrixMethodHandler(final MicroserviceMethodHandler methodHandler)", "full_signature": "public  HystrixMethodHandler(final MicroserviceMethodHandler methodHandler)", "class_method_signature": "HystrixMethodHandler.HystrixMethodHandler(final MicroserviceMethodHandler methodHandler)", "testcase": false, "constructor": true}, {"identifier": "HystrixMethodHandler", "parameters": "(final MicroserviceMethodHandler methodHandler, final ServiceConfig serviceConfig)", "modifiers": "", "return": "", "signature": " HystrixMethodHandler(final MicroserviceMethodHandler methodHandler, final ServiceConfig serviceConfig)", "full_signature": "  HystrixMethodHandler(final MicroserviceMethodHandler methodHandler, final ServiceConfig serviceConfig)", "class_method_signature": "HystrixMethodHandler.HystrixMethodHandler(final MicroserviceMethodHandler methodHandler, final ServiceConfig serviceConfig)", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(final Method method, final Object... args)", "modifiers": "@Override public", "return": "Object", "signature": "Object invoke(final Method method, final Object... args)", "full_signature": "@Override public Object invoke(final Method method, final Object... args)", "class_method_signature": "HystrixMethodHandler.invoke(final Method method, final Object... args)", "testcase": false, "constructor": false}, {"identifier": "getProxyBean", "parameters": "()", "modifiers": "@Override public", "return": "MicroserviceProxyBean", "signature": "MicroserviceProxyBean getProxyBean()", "full_signature": "@Override public MicroserviceProxyBean getProxyBean()", "class_method_signature": "HystrixMethodHandler.getProxyBean()", "testcase": false, "constructor": false}, {"identifier": "getInjectionPoint", "parameters": "()", "modifiers": "@Override public", "return": "InjectionPoint", "signature": "InjectionPoint getInjectionPoint()", "full_signature": "@Override public InjectionPoint getInjectionPoint()", "class_method_signature": "HystrixMethodHandler.getInjectionPoint()", "testcase": false, "constructor": false}, {"identifier": "createCacheKey", "parameters": "(final String serviceName, final String methodName, final MethodConfig methodConfig, final Object... args)", "modifiers": "private static", "return": "String", "signature": "String createCacheKey(final String serviceName, final String methodName, final MethodConfig methodConfig, final Object... args)", "full_signature": "private static String createCacheKey(final String serviceName, final String methodName, final MethodConfig methodConfig, final Object... args)", "class_method_signature": "HystrixMethodHandler.createCacheKey(final String serviceName, final String methodName, final MethodConfig methodConfig, final Object... args)", "testcase": false, "constructor": false}, {"identifier": "lookUpFallbackService", "parameters": "()", "modifiers": "private", "return": "Object", "signature": "Object lookUpFallbackService()", "full_signature": "private Object lookUpFallbackService()", "class_method_signature": "HystrixMethodHandler.lookUpFallbackService()", "testcase": false, "constructor": false}, {"identifier": "unwrapException", "parameters": "(HystrixBadRequestException hystrixException)", "modifiers": "private", "return": "Exception", "signature": "Exception unwrapException(HystrixBadRequestException hystrixException)", "full_signature": "private Exception unwrapException(HystrixBadRequestException hystrixException)", "class_method_signature": "HystrixMethodHandler.unwrapException(HystrixBadRequestException hystrixException)", "testcase": false, "constructor": false}], "file": "hystrix-microservice-provider/src/main/java/io/silverware/microservices/providers/hystrix/execution/HystrixMethodHandler.java"}, "focal_method": {"identifier": "getProxyBean", "parameters": "()", "modifiers": "@Override public", "return": "MicroserviceProxyBean", "body": "@Override\n   public MicroserviceProxyBean getProxyBean() {\n      return methodHandler.getProxyBean();\n   }", "signature": "MicroserviceProxyBean getProxyBean()", "full_signature": "@Override public MicroserviceProxyBean getProxyBean()", "class_method_signature": "HystrixMethodHandler.getProxyBean()", "testcase": false, "constructor": false, "invocations": ["getProxyBean"]}, "repository": {"repo_id": 30619741, "url": "https://github.com/SilverThings/SilverWare", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 21, "size": 3333, "license": "licensed"}}