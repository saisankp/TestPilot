{"test_class": {"identifier": "JAboutDialogTest", "superclass": "extends GraphicsTestBase<Dialog>", "interfaces": "", "fields": [{"original_string": "private static final String DIALOG_TITLE = \"About dialog test\";", "modifier": "private static final", "type": "String", "declarator": "DIALOG_TITLE = \"About dialog test\"", "var_name": "DIALOG_TITLE"}, {"original_string": "private static final String APP_INFO = \"GeoFoo: mapping Foos in real time\";", "modifier": "private static final", "type": "String", "declarator": "APP_INFO = \"GeoFoo: mapping Foos in real time\"", "var_name": "APP_INFO"}, {"original_string": "private boolean showAppInfo;", "modifier": "private", "type": "boolean", "declarator": "showAppInfo", "var_name": "showAppInfo"}], "file": "modules/unsupported/swing/src/test/java/org/geotools/swing/dialog/JAboutDialogTest.java"}, "test_case": {"identifier": "copyToClipboard", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void copyToClipboard() throws Exception {\n        createAndShow(true);\n        \n        \n        JButtonFixture button = windowFixture.button(new GenericTypeMatcher<JButton>(JButton.class) {\n            @Override\n            protected boolean isMatching(JButton component) {\n                return \"Copy to clipboard\".equals(component.getText());\n            }\n        });\n        \n        assertNotNull(button);\n        \n        windowFixture.list().clickItem(JAboutDialog.Category.ALL.toString());\n        windowFixture.robot.waitForIdle();\n        button.click();\n        windowFixture.robot.waitForIdle();\n        \n        Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();\n        String clipText = (String) clip.getData(DataFlavor.stringFlavor);\n        \n        String expected = getDialogTextArea().text();\n        assertEquals(expected, clipText);\n    }", "signature": "void copyToClipboard()", "full_signature": "@Test public void copyToClipboard()", "class_method_signature": "JAboutDialogTest.copyToClipboard()", "testcase": true, "constructor": false, "invocations": ["createAndShow", "button", "equals", "getText", "assertNotNull", "clickItem", "list", "toString", "waitForIdle", "click", "waitForIdle", "getSystemClipboard", "getDefaultToolkit", "getData", "text", "getDialogTextArea", "assertEquals"]}, "focal_class": {"identifier": "JAboutDialog", "superclass": "extends AbstractSimpleDialog", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_HEIGHT = 400;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_HEIGHT = 400", "var_name": "DEFAULT_HEIGHT"}, {"original_string": "private static final int LIST_WIDTH = 150;", "modifier": "private static final", "type": "int", "declarator": "LIST_WIDTH = 150", "var_name": "LIST_WIDTH"}, {"original_string": "private static final int TEXT_AREA_WIDTH = 450;", "modifier": "private static final", "type": "int", "declarator": "TEXT_AREA_WIDTH = 450", "var_name": "TEXT_AREA_WIDTH"}, {"original_string": "private final String applicationInfo;", "modifier": "private final", "type": "String", "declarator": "applicationInfo", "var_name": "applicationInfo"}, {"original_string": "private final boolean hasApplicationInfo;", "modifier": "private final", "type": "boolean", "declarator": "hasApplicationInfo", "var_name": "hasApplicationInfo"}, {"original_string": "private JList categoryList;", "modifier": "private", "type": "JList", "declarator": "categoryList", "var_name": "categoryList"}, {"original_string": "private JTextArea textArea;", "modifier": "private", "type": "JTextArea", "declarator": "textArea", "var_name": "textArea"}], "methods": [{"identifier": "JAboutDialog", "parameters": "()", "modifiers": "public", "return": "", "signature": " JAboutDialog()", "full_signature": "public  JAboutDialog()", "class_method_signature": "JAboutDialog.JAboutDialog()", "testcase": false, "constructor": true}, {"identifier": "JAboutDialog", "parameters": "(String title)", "modifiers": "public", "return": "", "signature": " JAboutDialog(String title)", "full_signature": "public  JAboutDialog(String title)", "class_method_signature": "JAboutDialog.JAboutDialog(String title)", "testcase": false, "constructor": true}, {"identifier": "JAboutDialog", "parameters": "(String title, String applicationInfo)", "modifiers": "public", "return": "", "signature": " JAboutDialog(String title, String applicationInfo)", "full_signature": "public  JAboutDialog(String title, String applicationInfo)", "class_method_signature": "JAboutDialog.JAboutDialog(String title, String applicationInfo)", "testcase": false, "constructor": true}, {"identifier": "createControlPanel", "parameters": "()", "modifiers": "@Override public", "return": "JPanel", "signature": "JPanel createControlPanel()", "full_signature": "@Override public JPanel createControlPanel()", "class_method_signature": "JAboutDialog.createControlPanel()", "testcase": false, "constructor": false}, {"identifier": "onOK", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onOK()", "full_signature": "@Override public void onOK()", "class_method_signature": "JAboutDialog.onOK()", "testcase": false, "constructor": false}, {"identifier": "createButtonPanel", "parameters": "()", "modifiers": "@Override protected", "return": "JPanel", "signature": "JPanel createButtonPanel()", "full_signature": "@Override protected JPanel createButtonPanel()", "class_method_signature": "JAboutDialog.createButtonPanel()", "testcase": false, "constructor": false}, {"identifier": "showInfo", "parameters": "(int index)", "modifiers": "private", "return": "void", "signature": "void showInfo(int index)", "full_signature": "private void showInfo(int index)", "class_method_signature": "JAboutDialog.showInfo(int index)", "testcase": false, "constructor": false}, {"identifier": "showApplicationInfo", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void showApplicationInfo()", "full_signature": "private void showApplicationInfo()", "class_method_signature": "JAboutDialog.showApplicationInfo()", "testcase": false, "constructor": false}, {"identifier": "showEnvironmentInfo", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void showEnvironmentInfo()", "full_signature": "private void showEnvironmentInfo()", "class_method_signature": "JAboutDialog.showEnvironmentInfo()", "testcase": false, "constructor": false}, {"identifier": "showLicenceInfo", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void showLicenceInfo()", "full_signature": "private void showLicenceInfo()", "class_method_signature": "JAboutDialog.showLicenceInfo()", "testcase": false, "constructor": false}, {"identifier": "showJarInfo", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void showJarInfo()", "full_signature": "private void showJarInfo()", "class_method_signature": "JAboutDialog.showJarInfo()", "testcase": false, "constructor": false}, {"identifier": "showAllInfo", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void showAllInfo()", "full_signature": "private void showAllInfo()", "class_method_signature": "JAboutDialog.showAllInfo()", "testcase": false, "constructor": false}, {"identifier": "copyToClipboard", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void copyToClipboard()", "full_signature": "private void copyToClipboard()", "class_method_signature": "JAboutDialog.copyToClipboard()", "testcase": false, "constructor": false}], "file": "modules/unsupported/swing/src/main/java/org/geotools/swing/dialog/JAboutDialog.java"}, "focal_method": {"identifier": "copyToClipboard", "parameters": "()", "modifiers": "private", "return": "void", "body": "private void copyToClipboard() {\n        StringSelection sel = new StringSelection(textArea.getText());\n        Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();\n        clip.setContents(sel, sel);\n    }", "signature": "void copyToClipboard()", "full_signature": "private void copyToClipboard()", "class_method_signature": "JAboutDialog.copyToClipboard()", "testcase": false, "constructor": false, "invocations": ["getText", "getSystemClipboard", "getDefaultToolkit", "setContents"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}