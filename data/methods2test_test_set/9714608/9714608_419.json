{"test_class": {"identifier": "AbstractShapeFileReaderTest", "superclass": "extends AbstractIoShapeTest", "interfaces": "", "fields": [{"original_string": "private static final String SHP_TEST_FILE = \"org/arakhne/afc/io/shape/test.shp\";", "modifier": "private static final", "type": "String", "declarator": "SHP_TEST_FILE = \"org/arakhne/afc/io/shape/test.shp\"", "var_name": "SHP_TEST_FILE"}, {"original_string": "private static final String SHX_TEST_FILE = \"org/arakhne/afc/io/shape/test.shx\";", "modifier": "private static final", "type": "String", "declarator": "SHX_TEST_FILE = \"org/arakhne/afc/io/shape/test.shx\"", "var_name": "SHX_TEST_FILE"}, {"original_string": "private URL shpResource;", "modifier": "private", "type": "URL", "declarator": "shpResource", "var_name": "shpResource"}, {"original_string": "private URL shxResource;", "modifier": "private", "type": "URL", "declarator": "shxResource", "var_name": "shxResource"}], "file": "advanced/shapefile/src/test/java/org/arakhne/afc/io/shape/AbstractShapeFileReaderTest.java"}, "test_case": {"identifier": "testSeek_shx", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSeek_shx() throws Exception {\n\t\tAbstractShapeFileReader<Integer> reader = createShx();\n\t\t\n\t\treader.seek(0);\n\t\tassertEquals(Integer.valueOf(5), reader.read());\n\n\t\treader.seek(1);\n\t\tassertEquals(Integer.valueOf(8), reader.read());\n\n\t\treader.seek(2);\n\t\tassertEquals(Integer.valueOf(5), reader.read());\n\n\t\ttry {\n\t\t\treader.seek(1000);\n\t\t\tfail(\"EOFException was expected\"); //$NON-NLS-1$\n\t\t}\n\t\tcatch(EOFException exception) {\n\t\t\t//Expected exception\n\t\t}\n\t}", "signature": "void testSeek_shx()", "full_signature": "@Test public void testSeek_shx()", "class_method_signature": "AbstractShapeFileReaderTest.testSeek_shx()", "testcase": true, "constructor": false, "invocations": ["createShx", "seek", "assertEquals", "valueOf", "read", "seek", "assertEquals", "valueOf", "read", "seek", "assertEquals", "valueOf", "read", "seek", "fail"]}, "focal_class": {"identifier": "AbstractShapeFileReader", "superclass": "extends AbstractCommonShapeFileReader<E>", "interfaces": "", "fields": [{"original_string": "public static final double DEFAULT_FUSION_DISTANCE = 0.01;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_FUSION_DISTANCE = 0.01", "var_name": "DEFAULT_FUSION_DISTANCE"}, {"original_string": "private final DBaseFileReader dbfReader;", "modifier": "private final", "type": "DBaseFileReader", "declarator": "dbfReader", "var_name": "dbfReader"}, {"original_string": "private final ShapeFileIndexReader shxReader;", "modifier": "private final", "type": "ShapeFileIndexReader", "declarator": "shxReader", "var_name": "shxReader"}], "methods": [{"identifier": "AbstractShapeFileReader", "parameters": "(ReadableByteChannel inputStream, DBaseFileReader dbase_importer,\n\t\t\tShapeFileIndexReader shxReader)", "modifiers": "public", "return": "", "signature": " AbstractShapeFileReader(ReadableByteChannel inputStream, DBaseFileReader dbase_importer,\n\t\t\tShapeFileIndexReader shxReader)", "full_signature": "public  AbstractShapeFileReader(ReadableByteChannel inputStream, DBaseFileReader dbase_importer,\n\t\t\tShapeFileIndexReader shxReader)", "class_method_signature": "AbstractShapeFileReader.AbstractShapeFileReader(ReadableByteChannel inputStream, DBaseFileReader dbase_importer,\n\t\t\tShapeFileIndexReader shxReader)", "testcase": false, "constructor": true}, {"identifier": "AbstractShapeFileReader", "parameters": "(InputStream inputStream, DBaseFileReader dbase_importer, ShapeFileIndexReader shxReader)", "modifiers": "public", "return": "", "signature": " AbstractShapeFileReader(InputStream inputStream, DBaseFileReader dbase_importer, ShapeFileIndexReader shxReader)", "full_signature": "public  AbstractShapeFileReader(InputStream inputStream, DBaseFileReader dbase_importer, ShapeFileIndexReader shxReader)", "class_method_signature": "AbstractShapeFileReader.AbstractShapeFileReader(InputStream inputStream, DBaseFileReader dbase_importer, ShapeFileIndexReader shxReader)", "testcase": false, "constructor": true}, {"identifier": "AbstractShapeFileReader", "parameters": "(File file, DBaseFileReader dbase_importer, ShapeFileIndexReader shxReader)", "modifiers": "public", "return": "", "signature": " AbstractShapeFileReader(File file, DBaseFileReader dbase_importer, ShapeFileIndexReader shxReader)", "full_signature": "public  AbstractShapeFileReader(File file, DBaseFileReader dbase_importer, ShapeFileIndexReader shxReader)", "class_method_signature": "AbstractShapeFileReader.AbstractShapeFileReader(File file, DBaseFileReader dbase_importer, ShapeFileIndexReader shxReader)", "testcase": false, "constructor": true}, {"identifier": "AbstractShapeFileReader", "parameters": "(URL inputStream, DBaseFileReader dbase_importer,\n\t\t\tShapeFileIndexReader shxReader)", "modifiers": "public", "return": "", "signature": " AbstractShapeFileReader(URL inputStream, DBaseFileReader dbase_importer,\n\t\t\tShapeFileIndexReader shxReader)", "full_signature": "public  AbstractShapeFileReader(URL inputStream, DBaseFileReader dbase_importer,\n\t\t\tShapeFileIndexReader shxReader)", "class_method_signature": "AbstractShapeFileReader.AbstractShapeFileReader(URL inputStream, DBaseFileReader dbase_importer,\n\t\t\tShapeFileIndexReader shxReader)", "testcase": false, "constructor": true}, {"identifier": "postHeaderReadingStage", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void postHeaderReadingStage()", "full_signature": "@Override protected void postHeaderReadingStage()", "class_method_signature": "AbstractShapeFileReader.postHeaderReadingStage()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AbstractShapeFileReader.close()", "testcase": false, "constructor": false}, {"identifier": "readRecord", "parameters": "(int recordIndex)", "modifiers": "@Override @SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\"}) protected", "return": "E", "signature": "E readRecord(int recordIndex)", "full_signature": "@Override @SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\"}) protected E readRecord(int recordIndex)", "class_method_signature": "AbstractShapeFileReader.readRecord(int recordIndex)", "testcase": false, "constructor": false}, {"identifier": "postAttributeReadingStage", "parameters": "(E element_representation)", "modifiers": "protected", "return": "boolean", "signature": "boolean postAttributeReadingStage(E element_representation)", "full_signature": "protected boolean postAttributeReadingStage(E element_representation)", "class_method_signature": "AbstractShapeFileReader.postAttributeReadingStage(E element_representation)", "testcase": false, "constructor": false}, {"identifier": "postShapeReadingStage", "parameters": "(E element_representation)", "modifiers": "protected", "return": "boolean", "signature": "boolean postShapeReadingStage(E element_representation)", "full_signature": "protected boolean postShapeReadingStage(E element_representation)", "class_method_signature": "AbstractShapeFileReader.postShapeReadingStage(E element_representation)", "testcase": false, "constructor": false}, {"identifier": "readNullShape", "parameters": "(int elementIndex)", "modifiers": "private", "return": "E", "signature": "E readNullShape(int elementIndex)", "full_signature": "private E readNullShape(int elementIndex)", "class_method_signature": "AbstractShapeFileReader.readNullShape(int elementIndex)", "testcase": false, "constructor": false}, {"identifier": "readPoint", "parameters": "(int elementIndex, ShapeElementType type)", "modifiers": "private", "return": "E", "signature": "E readPoint(int elementIndex, ShapeElementType type)", "full_signature": "private E readPoint(int elementIndex, ShapeElementType type)", "class_method_signature": "AbstractShapeFileReader.readPoint(int elementIndex, ShapeElementType type)", "testcase": false, "constructor": false}, {"identifier": "createPoint", "parameters": "(AttributeCollection provider, int shape_index, ESRIPoint point)", "modifiers": "protected abstract", "return": "E", "signature": "E createPoint(AttributeCollection provider, int shape_index, ESRIPoint point)", "full_signature": "protected abstract E createPoint(AttributeCollection provider, int shape_index, ESRIPoint point)", "class_method_signature": "AbstractShapeFileReader.createPoint(AttributeCollection provider, int shape_index, ESRIPoint point)", "testcase": false, "constructor": false}, {"identifier": "readPolyElement", "parameters": "(int elementIndex, ShapeElementType type)", "modifiers": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\"}) private", "return": "E", "signature": "E readPolyElement(int elementIndex, ShapeElementType type)", "full_signature": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\"}) private E readPolyElement(int elementIndex, ShapeElementType type)", "class_method_signature": "AbstractShapeFileReader.readPolyElement(int elementIndex, ShapeElementType type)", "testcase": false, "constructor": false}, {"identifier": "readMultiPatch", "parameters": "(int elementIndex, ShapeElementType type)", "modifiers": "private", "return": "E", "signature": "E readMultiPatch(int elementIndex, ShapeElementType type)", "full_signature": "private E readMultiPatch(int elementIndex, ShapeElementType type)", "class_method_signature": "AbstractShapeFileReader.readMultiPatch(int elementIndex, ShapeElementType type)", "testcase": false, "constructor": false}, {"identifier": "createPolyline", "parameters": "(AttributeCollection provider, int shapeIndex,\n\t\t\tint[] parts, ESRIPoint[] points, boolean hasZ)", "modifiers": "protected abstract", "return": "E", "signature": "E createPolyline(AttributeCollection provider, int shapeIndex,\n\t\t\tint[] parts, ESRIPoint[] points, boolean hasZ)", "full_signature": "protected abstract E createPolyline(AttributeCollection provider, int shapeIndex,\n\t\t\tint[] parts, ESRIPoint[] points, boolean hasZ)", "class_method_signature": "AbstractShapeFileReader.createPolyline(AttributeCollection provider, int shapeIndex,\n\t\t\tint[] parts, ESRIPoint[] points, boolean hasZ)", "testcase": false, "constructor": false}, {"identifier": "createPolygon", "parameters": "(AttributeCollection provider, int shapeIndex,\n\t\t\tint[] parts, ESRIPoint[] points, boolean hasZ)", "modifiers": "protected abstract", "return": "E", "signature": "E createPolygon(AttributeCollection provider, int shapeIndex,\n\t\t\tint[] parts, ESRIPoint[] points, boolean hasZ)", "full_signature": "protected abstract E createPolygon(AttributeCollection provider, int shapeIndex,\n\t\t\tint[] parts, ESRIPoint[] points, boolean hasZ)", "class_method_signature": "AbstractShapeFileReader.createPolygon(AttributeCollection provider, int shapeIndex,\n\t\t\tint[] parts, ESRIPoint[] points, boolean hasZ)", "testcase": false, "constructor": false}, {"identifier": "createMultiPoint", "parameters": "(AttributeCollection provider, int shapeIndex,\n\t\t\tESRIPoint[] points, boolean hasZ)", "modifiers": "protected abstract", "return": "E", "signature": "E createMultiPoint(AttributeCollection provider, int shapeIndex,\n\t\t\tESRIPoint[] points, boolean hasZ)", "full_signature": "protected abstract E createMultiPoint(AttributeCollection provider, int shapeIndex,\n\t\t\tESRIPoint[] points, boolean hasZ)", "class_method_signature": "AbstractShapeFileReader.createMultiPoint(AttributeCollection provider, int shapeIndex,\n\t\t\tESRIPoint[] points, boolean hasZ)", "testcase": false, "constructor": false}, {"identifier": "createMultiPatch", "parameters": "(AttributeCollection provider, int shapeIndex,\n\t\t\tint[] parts, ShapeMultiPatchType[] partTypes, ESRIPoint[] points)", "modifiers": "protected abstract", "return": "E", "signature": "E createMultiPatch(AttributeCollection provider, int shapeIndex,\n\t\t\tint[] parts, ShapeMultiPatchType[] partTypes, ESRIPoint[] points)", "full_signature": "protected abstract E createMultiPatch(AttributeCollection provider, int shapeIndex,\n\t\t\tint[] parts, ShapeMultiPatchType[] partTypes, ESRIPoint[] points)", "class_method_signature": "AbstractShapeFileReader.createMultiPatch(AttributeCollection provider, int shapeIndex,\n\t\t\tint[] parts, ShapeMultiPatchType[] partTypes, ESRIPoint[] points)", "testcase": false, "constructor": false}, {"identifier": "readAttributesFromDBaseFile", "parameters": "(E created_element)", "modifiers": "private", "return": "void", "signature": "void readAttributesFromDBaseFile(E created_element)", "full_signature": "private void readAttributesFromDBaseFile(E created_element)", "class_method_signature": "AbstractShapeFileReader.readAttributesFromDBaseFile(E created_element)", "testcase": false, "constructor": false}, {"identifier": "putAttributeIn", "parameters": "(E element, String attributeName, AttributeValue value)", "modifiers": "protected abstract", "return": "void", "signature": "void putAttributeIn(E element, String attributeName, AttributeValue value)", "full_signature": "protected abstract void putAttributeIn(E element, String attributeName, AttributeValue value)", "class_method_signature": "AbstractShapeFileReader.putAttributeIn(E element, String attributeName, AttributeValue value)", "testcase": false, "constructor": false}, {"identifier": "skipAttributesFromDBaseFile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void skipAttributesFromDBaseFile()", "full_signature": "private void skipAttributesFromDBaseFile()", "class_method_signature": "AbstractShapeFileReader.skipAttributesFromDBaseFile()", "testcase": false, "constructor": false}, {"identifier": "createAttributeCollection", "parameters": "(int elementIndex)", "modifiers": "protected abstract", "return": "AttributeCollection", "signature": "AttributeCollection createAttributeCollection(int elementIndex)", "full_signature": "protected abstract AttributeCollection createAttributeCollection(int elementIndex)", "class_method_signature": "AbstractShapeFileReader.createAttributeCollection(int elementIndex)", "testcase": false, "constructor": false}, {"identifier": "seek", "parameters": "(int recordIndex)", "modifiers": "@Override public", "return": "void", "signature": "void seek(int recordIndex)", "full_signature": "@Override public void seek(int recordIndex)", "class_method_signature": "AbstractShapeFileReader.seek(int recordIndex)", "testcase": false, "constructor": false}, {"identifier": "isSeekEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSeekEnabled()", "full_signature": "@Override public boolean isSeekEnabled()", "class_method_signature": "AbstractShapeFileReader.isSeekEnabled()", "testcase": false, "constructor": false}], "file": "advanced/shapefile/src/main/java/org/arakhne/afc/io/shape/AbstractShapeFileReader.java"}, "focal_method": {"identifier": "seek", "parameters": "(int recordIndex)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void seek(int recordIndex) throws IOException {\n\t\tif (this.shxReader != null) {\n\t\t\tthis.shxReader.seek(recordIndex);\n\t\t\tfinal ShapeFileIndexRecord shxRecord = this.shxReader.read();\n\t\t\tif (shxRecord != null) {\n\t\t\t\tassert shxRecord.getRecordIndex() == recordIndex;\n\t\t\t\treadHeader();\n\t\t\t\tsetReadingPosition(\n\t\t\t\t\t\trecordIndex,\n\t\t\t\t\t\tshxRecord.getOffsetInContent());\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthrow new SeekOperationDisabledException(\"Unspecified Shape File Index\"); //$NON-NLS-1$\n\t}", "signature": "void seek(int recordIndex)", "full_signature": "@Override public void seek(int recordIndex)", "class_method_signature": "AbstractShapeFileReader.seek(int recordIndex)", "testcase": false, "constructor": false, "invocations": ["seek", "read", "getRecordIndex", "readHeader", "setReadingPosition", "getOffsetInContent"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}