{"test_class": {"identifier": "FutureSubscriberTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "FutureSubscriber<Integer> fs;", "modifier": "", "type": "FutureSubscriber<Integer>", "declarator": "fs", "var_name": "fs"}], "file": "rxjava/src/test/java/io/reactivex/internal/subscribers/FutureSubscriberTest.java"}, "test_case": {"identifier": "onError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onError() throws Exception {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n\n        try {\n            fs.onError(new TestException(\"One\"));\n\n            fs.onError(new TestException(\"Two\"));\n\n            try {\n                fs.get(5, TimeUnit.MILLISECONDS);\n            } catch (ExecutionException ex) {\n                assertTrue(ex.toString(), ex.getCause() instanceof TestException);\n                assertEquals(\"One\", ex.getCause().getMessage());\n            }\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"Two\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }", "signature": "void onError()", "full_signature": "@Test public void onError()", "class_method_signature": "FutureSubscriberTest.onError()", "testcase": true, "constructor": false, "invocations": ["trackPluginErrors", "onError", "onError", "get", "assertTrue", "toString", "getCause", "assertEquals", "getMessage", "getCause", "assertUndeliverable", "reset"]}, "focal_class": {"identifier": "FutureSubscriber", "superclass": "extends CountDownLatch", "interfaces": "implements FlowableSubscriber<T>, Future<T>, Subscription", "fields": [{"original_string": "T value;", "modifier": "", "type": "T", "declarator": "value", "var_name": "value"}, {"original_string": "Throwable error;", "modifier": "", "type": "Throwable", "declarator": "error", "var_name": "error"}, {"original_string": "final AtomicReference<Subscription> s;", "modifier": "final", "type": "AtomicReference<Subscription>", "declarator": "s", "var_name": "s"}], "methods": [{"identifier": "FutureSubscriber", "parameters": "()", "modifiers": "public", "return": "", "signature": " FutureSubscriber()", "full_signature": "public  FutureSubscriber()", "class_method_signature": "FutureSubscriber.FutureSubscriber()", "testcase": false, "constructor": true}, {"identifier": "cancel", "parameters": "(boolean mayInterruptIfRunning)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean cancel(boolean mayInterruptIfRunning)", "full_signature": "@Override public boolean cancel(boolean mayInterruptIfRunning)", "class_method_signature": "FutureSubscriber.cancel(boolean mayInterruptIfRunning)", "testcase": false, "constructor": false}, {"identifier": "isCancelled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCancelled()", "full_signature": "@Override public boolean isCancelled()", "class_method_signature": "FutureSubscriber.isCancelled()", "testcase": false, "constructor": false}, {"identifier": "isDone", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDone()", "full_signature": "@Override public boolean isDone()", "class_method_signature": "FutureSubscriber.isDone()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T get()", "full_signature": "@Override public T get()", "class_method_signature": "FutureSubscriber.get()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "T", "signature": "T get(long timeout, TimeUnit unit)", "full_signature": "@Override public T get(long timeout, TimeUnit unit)", "class_method_signature": "FutureSubscriber.get(long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(Subscription s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Subscription s)", "full_signature": "@Override public void onSubscribe(Subscription s)", "class_method_signature": "FutureSubscriber.onSubscribe(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "FutureSubscriber.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t)", "full_signature": "@Override public void onError(Throwable t)", "class_method_signature": "FutureSubscriber.onError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "FutureSubscriber.onComplete()", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "FutureSubscriber.cancel()", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(long n)", "modifiers": "@Override public", "return": "void", "signature": "void request(long n)", "full_signature": "@Override public void request(long n)", "class_method_signature": "FutureSubscriber.request(long n)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/subscribers/FutureSubscriber.java"}, "focal_method": {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onError(Throwable t) {\n        for (;;) {\n            Subscription a = s.get();\n            if (a == this || a == SubscriptionHelper.CANCELLED) {\n                RxJavaPlugins.onError(t);\n                return;\n            }\n            error = t;\n            if (s.compareAndSet(a, this)) {\n                countDown();\n                return;\n            }\n        }\n    }", "signature": "void onError(Throwable t)", "full_signature": "@Override public void onError(Throwable t)", "class_method_signature": "FutureSubscriber.onError(Throwable t)", "testcase": false, "constructor": false, "invocations": ["get", "onError", "compareAndSet", "countDown"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}