{"test_class": {"identifier": "RelationshipControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private static final String TEI_ID = \"TEI_ID\";", "modifier": "private static final", "type": "String", "declarator": "TEI_ID = \"TEI_ID\"", "var_name": "TEI_ID"}, {"original_string": "private static final String EVENT_ID = \"EVENT_ID\";", "modifier": "private static final", "type": "String", "declarator": "EVENT_ID = \"EVENT_ID\"", "var_name": "EVENT_ID"}, {"original_string": "private static final String ENROLLMENT_ID = \"ENROLLMENT_ID\";", "modifier": "private static final", "type": "String", "declarator": "ENROLLMENT_ID = \"ENROLLMENT_ID\"", "var_name": "ENROLLMENT_ID"}, {"original_string": "private static final String REL_ID = \"REL_ID\";", "modifier": "private static final", "type": "String", "declarator": "REL_ID = \"REL_ID\"", "var_name": "REL_ID"}, {"original_string": "private TrackedEntityInstance tei = new TrackedEntityInstance();", "modifier": "private", "type": "TrackedEntityInstance", "declarator": "tei = new TrackedEntityInstance()", "var_name": "tei"}, {"original_string": "private ProgramInstance enrollment = new ProgramInstance();", "modifier": "private", "type": "ProgramInstance", "declarator": "enrollment = new ProgramInstance()", "var_name": "enrollment"}, {"original_string": "private ProgramStageInstance event = new ProgramStageInstance();", "modifier": "private", "type": "ProgramStageInstance", "declarator": "event = new ProgramStageInstance()", "var_name": "event"}, {"original_string": "private Relationship relationship = new Relationship();", "modifier": "private", "type": "Relationship", "declarator": "relationship = new Relationship()", "var_name": "relationship"}, {"original_string": "@Mock\n    private RelationshipService relationshipService;", "modifier": "@Mock\n    private", "type": "RelationshipService", "declarator": "relationshipService", "var_name": "relationshipService"}, {"original_string": "@Mock\n    private TrackedEntityInstanceService trackedEntityInstanceService;", "modifier": "@Mock\n    private", "type": "TrackedEntityInstanceService", "declarator": "trackedEntityInstanceService", "var_name": "trackedEntityInstanceService"}, {"original_string": "@Mock\n    private ProgramInstanceService programInstanceService;", "modifier": "@Mock\n    private", "type": "ProgramInstanceService", "declarator": "programInstanceService", "var_name": "programInstanceService"}, {"original_string": "@Mock\n    private ProgramStageInstanceService programStageInstanceService;", "modifier": "@Mock\n    private", "type": "ProgramStageInstanceService", "declarator": "programStageInstanceService", "var_name": "programStageInstanceService"}, {"original_string": "@InjectMocks\n    private RelationshipController relationshipController;", "modifier": "@InjectMocks\n    private", "type": "RelationshipController", "declarator": "relationshipController", "var_name": "relationshipController"}, {"original_string": "private final static String ENDPOINT = \"/relationships\";", "modifier": "private final static", "type": "String", "declarator": "ENDPOINT = \"/relationships\"", "var_name": "ENDPOINT"}], "file": "dhis-2/dhis-web/dhis-web-api/src/test/java/org/hisp/dhis/webapi/controller/event/RelationshipControllerTest.java"}, "test_case": {"identifier": "testGetRelationship", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRelationship()\n        throws Exception\n    {\n        when( relationshipService.getRelationshipByUid( REL_ID ) ).thenReturn( relationship );\n        mockMvc.perform( get( ENDPOINT + \"/\" + REL_ID )).andExpect( status().isOk() );\n    }", "signature": "void testGetRelationship()", "full_signature": "@Test public void testGetRelationship()", "class_method_signature": "RelationshipControllerTest.testGetRelationship()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getRelationshipByUid", "andExpect", "perform", "get", "isOk", "status"]}, "focal_class": {"identifier": "RelationshipController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final RelationshipService relationshipService;", "modifier": "private final", "type": "RelationshipService", "declarator": "relationshipService", "var_name": "relationshipService"}, {"original_string": "private final TrackedEntityInstanceService trackedEntityInstanceService;", "modifier": "private final", "type": "TrackedEntityInstanceService", "declarator": "trackedEntityInstanceService", "var_name": "trackedEntityInstanceService"}, {"original_string": "private final ProgramInstanceService programInstanceService;", "modifier": "private final", "type": "ProgramInstanceService", "declarator": "programInstanceService", "var_name": "programInstanceService"}, {"original_string": "private final ProgramStageInstanceService programStageInstanceService;", "modifier": "private final", "type": "ProgramStageInstanceService", "declarator": "programStageInstanceService", "var_name": "programStageInstanceService"}, {"original_string": "private final WebMessageService webMessageService;", "modifier": "private final", "type": "WebMessageService", "declarator": "webMessageService", "var_name": "webMessageService"}], "methods": [{"identifier": "RelationshipController", "parameters": "( RelationshipService relationshipService,\n        TrackedEntityInstanceService trackedEntityInstanceService, ProgramInstanceService programInstanceService,\n        ProgramStageInstanceService programStageInstanceService, WebMessageService webMessageService )", "modifiers": "public", "return": "", "signature": " RelationshipController( RelationshipService relationshipService,\n        TrackedEntityInstanceService trackedEntityInstanceService, ProgramInstanceService programInstanceService,\n        ProgramStageInstanceService programStageInstanceService, WebMessageService webMessageService )", "full_signature": "public  RelationshipController( RelationshipService relationshipService,\n        TrackedEntityInstanceService trackedEntityInstanceService, ProgramInstanceService programInstanceService,\n        ProgramStageInstanceService programStageInstanceService, WebMessageService webMessageService )", "class_method_signature": "RelationshipController.RelationshipController( RelationshipService relationshipService,\n        TrackedEntityInstanceService trackedEntityInstanceService, ProgramInstanceService programInstanceService,\n        ProgramStageInstanceService programStageInstanceService, WebMessageService webMessageService )", "testcase": false, "constructor": true}, {"identifier": "getRelationships", "parameters": "(\n        @RequestParam( required = false ) String tei,\n        @RequestParam( required = false ) String enrollment,\n        @RequestParam( required = false ) String event\n    )", "modifiers": "@GetMapping public", "return": "List<Relationship>", "signature": "List<Relationship> getRelationships(\n        @RequestParam( required = false ) String tei,\n        @RequestParam( required = false ) String enrollment,\n        @RequestParam( required = false ) String event\n    )", "full_signature": "@GetMapping public List<Relationship> getRelationships(\n        @RequestParam( required = false ) String tei,\n        @RequestParam( required = false ) String enrollment,\n        @RequestParam( required = false ) String event\n    )", "class_method_signature": "RelationshipController.getRelationships(\n        @RequestParam( required = false ) String tei,\n        @RequestParam( required = false ) String enrollment,\n        @RequestParam( required = false ) String event\n    )", "testcase": false, "constructor": false}, {"identifier": "getRelationship", "parameters": "(\n        @PathVariable String id\n    )", "modifiers": "@GetMapping( \"/{id}\" ) public", "return": "Relationship", "signature": "Relationship getRelationship(\n        @PathVariable String id\n    )", "full_signature": "@GetMapping( \"/{id}\" ) public Relationship getRelationship(\n        @PathVariable String id\n    )", "class_method_signature": "RelationshipController.getRelationship(\n        @PathVariable String id\n    )", "testcase": false, "constructor": false}, {"identifier": "postRelationshipJson", "parameters": "(\n        @RequestParam( defaultValue = \"CREATE_AND_UPDATE\" ) ImportStrategy strategy,\n        ImportOptions importOptions,\n        HttpServletRequest request, HttpServletResponse response\n    )", "modifiers": "@PostMapping( value = \"\", consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE ) public", "return": "void", "signature": "void postRelationshipJson(\n        @RequestParam( defaultValue = \"CREATE_AND_UPDATE\" ) ImportStrategy strategy,\n        ImportOptions importOptions,\n        HttpServletRequest request, HttpServletResponse response\n    )", "full_signature": "@PostMapping( value = \"\", consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE ) public void postRelationshipJson(\n        @RequestParam( defaultValue = \"CREATE_AND_UPDATE\" ) ImportStrategy strategy,\n        ImportOptions importOptions,\n        HttpServletRequest request, HttpServletResponse response\n    )", "class_method_signature": "RelationshipController.postRelationshipJson(\n        @RequestParam( defaultValue = \"CREATE_AND_UPDATE\" ) ImportStrategy strategy,\n        ImportOptions importOptions,\n        HttpServletRequest request, HttpServletResponse response\n    )", "testcase": false, "constructor": false}, {"identifier": "postRelationshipXml", "parameters": "(\n        @RequestParam( defaultValue = \"CREATE_AND_UPDATE\" ) ImportStrategy strategy,\n        ImportOptions importOptions,\n        HttpServletRequest request, HttpServletResponse response\n    )", "modifiers": "@PostMapping( value = \"\", consumes = APPLICATION_XML_VALUE, produces = APPLICATION_XML_VALUE ) public", "return": "void", "signature": "void postRelationshipXml(\n        @RequestParam( defaultValue = \"CREATE_AND_UPDATE\" ) ImportStrategy strategy,\n        ImportOptions importOptions,\n        HttpServletRequest request, HttpServletResponse response\n    )", "full_signature": "@PostMapping( value = \"\", consumes = APPLICATION_XML_VALUE, produces = APPLICATION_XML_VALUE ) public void postRelationshipXml(\n        @RequestParam( defaultValue = \"CREATE_AND_UPDATE\" ) ImportStrategy strategy,\n        ImportOptions importOptions,\n        HttpServletRequest request, HttpServletResponse response\n    )", "class_method_signature": "RelationshipController.postRelationshipXml(\n        @RequestParam( defaultValue = \"CREATE_AND_UPDATE\" ) ImportStrategy strategy,\n        ImportOptions importOptions,\n        HttpServletRequest request, HttpServletResponse response\n    )", "testcase": false, "constructor": false}, {"identifier": "updateRelationshipJson", "parameters": "(\n        @PathVariable String id,\n        ImportOptions importOptions,\n        HttpServletRequest request, HttpServletResponse response\n    )", "modifiers": "@PutMapping( path = \"/{id}\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE ) public", "return": "void", "signature": "void updateRelationshipJson(\n        @PathVariable String id,\n        ImportOptions importOptions,\n        HttpServletRequest request, HttpServletResponse response\n    )", "full_signature": "@PutMapping( path = \"/{id}\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE ) public void updateRelationshipJson(\n        @PathVariable String id,\n        ImportOptions importOptions,\n        HttpServletRequest request, HttpServletResponse response\n    )", "class_method_signature": "RelationshipController.updateRelationshipJson(\n        @PathVariable String id,\n        ImportOptions importOptions,\n        HttpServletRequest request, HttpServletResponse response\n    )", "testcase": false, "constructor": false}, {"identifier": "updateRelationshipXml", "parameters": "(\n        @PathVariable String id,\n        ImportOptions importOptions,\n        HttpServletRequest request\n    )", "modifiers": "@PutMapping( path = \"/{id}\", consumes = MediaType.APPLICATION_XML_VALUE, produces = APPLICATION_XML_VALUE ) public", "return": "ImportSummary", "signature": "ImportSummary updateRelationshipXml(\n        @PathVariable String id,\n        ImportOptions importOptions,\n        HttpServletRequest request\n    )", "full_signature": "@PutMapping( path = \"/{id}\", consumes = MediaType.APPLICATION_XML_VALUE, produces = APPLICATION_XML_VALUE ) public ImportSummary updateRelationshipXml(\n        @PathVariable String id,\n        ImportOptions importOptions,\n        HttpServletRequest request\n    )", "class_method_signature": "RelationshipController.updateRelationshipXml(\n        @PathVariable String id,\n        ImportOptions importOptions,\n        HttpServletRequest request\n    )", "testcase": false, "constructor": false}, {"identifier": "deleteRelationship", "parameters": "( @PathVariable String id, HttpServletRequest request, HttpServletResponse response\n    )", "modifiers": "@DeleteMapping( value = \"/{id}\" ) public", "return": "void", "signature": "void deleteRelationship( @PathVariable String id, HttpServletRequest request, HttpServletResponse response\n    )", "full_signature": "@DeleteMapping( value = \"/{id}\" ) public void deleteRelationship( @PathVariable String id, HttpServletRequest request, HttpServletResponse response\n    )", "class_method_signature": "RelationshipController.deleteRelationship( @PathVariable String id, HttpServletRequest request, HttpServletResponse response\n    )", "testcase": false, "constructor": false}, {"identifier": "filterImportSummary", "parameters": "( ImportOptions importOptions )", "modifiers": "private", "return": "Predicate<ImportSummary>", "signature": "Predicate<ImportSummary> filterImportSummary( ImportOptions importOptions )", "full_signature": "private Predicate<ImportSummary> filterImportSummary( ImportOptions importOptions )", "class_method_signature": "RelationshipController.filterImportSummary( ImportOptions importOptions )", "testcase": false, "constructor": false}, {"identifier": "setImportSummaryHref", "parameters": "( HttpServletRequest request )", "modifiers": "private", "return": "Consumer<ImportSummary>", "signature": "Consumer<ImportSummary> setImportSummaryHref( HttpServletRequest request )", "full_signature": "private Consumer<ImportSummary> setImportSummaryHref( HttpServletRequest request )", "class_method_signature": "RelationshipController.setImportSummaryHref( HttpServletRequest request )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/RelationshipController.java"}, "focal_method": {"identifier": "getRelationship", "parameters": "(\n        @PathVariable String id\n    )", "modifiers": "@GetMapping( \"/{id}\" ) public", "return": "Relationship", "body": "@GetMapping( \"/{id}\" )\n    public Relationship getRelationship(\n        @PathVariable String id\n    )\n        throws WebMessageException\n    {\n        Relationship relationship = relationshipService.getRelationshipByUid( id );\n\n        if ( relationship == null )\n        {\n            throw new WebMessageException( notFound( \"No relationship with id '\" + id + \"' was found.\" ) );\n        }\n\n        return relationship;\n    }", "signature": "Relationship getRelationship(\n        @PathVariable String id\n    )", "full_signature": "@GetMapping( \"/{id}\" ) public Relationship getRelationship(\n        @PathVariable String id\n    )", "class_method_signature": "RelationshipController.getRelationship(\n        @PathVariable String id\n    )", "testcase": false, "constructor": false, "invocations": ["getRelationshipByUid", "notFound"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}