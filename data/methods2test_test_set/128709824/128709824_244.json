{"test_class": {"identifier": "BeanUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/utils/BeanUtilsTest.java"}, "test_case": {"identifier": "testGetModifiedFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetModifiedFields() throws Exception {\n        TestBean cg0 = new TestBean();\n\n        TestBean cg1 = new TestBean();\n        cg1.setAlias(\"aaa:1.0.0\");\n        cg1.setHeartbeat(2222);\n        cg1.setRegister(true);\n\n        TestBean cg2 = new TestBean();\n        cg2.setAlias(\"aaa:1.0.0\");\n        cg2.setHeartbeat(2222);\n        cg2.setRegister(false);\n        cg2.setSubBeans(new ArrayList<TestSubBean>());\n\n        Assert.assertTrue(BeanUtils.getModifiedFields(cg0, cg1).size() == 3);\n        Assert.assertTrue(BeanUtils.getModifiedFields(cg0, cg2).size() == 3);\n        Assert.assertTrue(BeanUtils.getModifiedFields(cg1, cg2).size() == 2);\n    }", "signature": "void testGetModifiedFields()", "full_signature": "@Test public void testGetModifiedFields()", "class_method_signature": "BeanUtilsTest.testGetModifiedFields()", "testcase": true, "constructor": false, "invocations": ["setAlias", "setHeartbeat", "setRegister", "setAlias", "setHeartbeat", "setRegister", "setSubBeans", "assertTrue", "size", "getModifiedFields", "assertTrue", "size", "getModifiedFields", "assertTrue", "size", "getModifiedFields"]}, "focal_class": {"identifier": "BeanUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "setProperty", "parameters": "(Object bean, String name, Class<T> clazz, T value)", "modifiers": "public static", "return": "void", "signature": "void setProperty(Object bean, String name, Class<T> clazz, T value)", "full_signature": "public static void setProperty(Object bean, String name, Class<T> clazz, T value)", "class_method_signature": "BeanUtils.setProperty(Object bean, String name, Class<T> clazz, T value)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(Object bean, String name, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T getProperty(Object bean, String name, Class<T> clazz)", "full_signature": "public static T getProperty(Object bean, String name, Class<T> clazz)", "class_method_signature": "BeanUtils.getProperty(Object bean, String name, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "copyPropertiesToMap", "parameters": "(Object bean, String prefix, Map<String, Object> map)", "modifiers": "public static", "return": "void", "signature": "void copyPropertiesToMap(Object bean, String prefix, Map<String, Object> map)", "full_signature": "public static void copyPropertiesToMap(Object bean, String prefix, Map<String, Object> map)", "class_method_signature": "BeanUtils.copyPropertiesToMap(Object bean, String prefix, Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "copyProperties", "parameters": "(Object src, Object dst, String... ignoreFields)", "modifiers": "public static", "return": "void", "signature": "void copyProperties(Object src, Object dst, String... ignoreFields)", "full_signature": "public static void copyProperties(Object src, Object dst, String... ignoreFields)", "class_method_signature": "BeanUtils.copyProperties(Object src, Object dst, String... ignoreFields)", "testcase": false, "constructor": false}, {"identifier": "getModifiedFields", "parameters": "(T src, T dst, String... ignoreFields)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getModifiedFields(T src, T dst, String... ignoreFields)", "full_signature": "public static List<String> getModifiedFields(T src, T dst, String... ignoreFields)", "class_method_signature": "BeanUtils.getModifiedFields(T src, T dst, String... ignoreFields)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/utils/BeanUtils.java"}, "focal_method": {"identifier": "getModifiedFields", "parameters": "(T src, T dst, String... ignoreFields)", "modifiers": "public static", "return": "List<String>", "body": "public static <T> List<String> getModifiedFields(T src, T dst, String... ignoreFields) {\n        Class clazz = src.getClass();\n        Method[] methods = clazz.getMethods();\n        List<String> ignoreFiledList = Arrays.asList(ignoreFields);\n        List<String> modifiedFields = new ArrayList<String>();\n        for (Method getterMethod : methods) { // \u904d\u5386\u76ee\u6807\u5bf9\u8c61\u7684\u65b9\u6cd5\n            if (Modifier.isStatic(getterMethod.getModifiers())\n                || !ReflectUtils.isBeanPropertyReadMethod(getterMethod)) {\n                // \u4e0d\u662fstatic\u65b9\u6cd5\uff0c \u662fgetter\u65b9\u6cd5\n                continue;\n            }\n            String propertyName = ReflectUtils.getPropertyNameFromBeanReadMethod(getterMethod);\n            if (ignoreFiledList.contains(propertyName)) {\n                // \u5ffd\u7565\u5b57\u6bb5\n                continue;\n            }\n            Class returnType = getterMethod.getReturnType();\n            try { // \u540c\u65f6\u76ee\u6807\u5b57\u6bb5\u8fd8\u9700\u8981\u6709set\u65b9\u6cd5\n                Method setterMethod = ReflectUtils.getPropertySetterMethod(clazz, propertyName, returnType);\n                if (setterMethod != null) {\n                    Object srcVal = getterMethod.invoke(src); // \u539f\u59cb\u503c\n                    Object dstVal = getterMethod.invoke(dst); // \u4fee\u6539\u540e\u503c\n                    if (srcVal == null) { // \u5de6\u8fb9\u4e3a\u7a7a\n                        if (dstVal != null) {\n                            modifiedFields.add(propertyName);\n                        }\n                    } else {\n                        if (dstVal == null) { // \u53f3\u8fb9\u4e3a\u7a7a\n                            modifiedFields.add(propertyName);\n                        } else {\n                            if (!srcVal.equals(dstVal)) { // \u90fd\u4e0d\u4e3a\u7a7a\u4e14\u4e0d\u540c\n                                modifiedFields.add(propertyName);\n                            }\n                        }\n                    }\n                }\n            } catch (Exception ignore) {\n                // ignore \u4e0b\u4e00\u5faa\u73af\n            }\n        }\n        return modifiedFields;\n    }", "signature": "List<String> getModifiedFields(T src, T dst, String... ignoreFields)", "full_signature": "public static List<String> getModifiedFields(T src, T dst, String... ignoreFields)", "class_method_signature": "BeanUtils.getModifiedFields(T src, T dst, String... ignoreFields)", "testcase": false, "constructor": false, "invocations": ["getClass", "getMethods", "asList", "isStatic", "getModifiers", "isBeanPropertyReadMethod", "getPropertyNameFromBeanReadMethod", "contains", "getReturnType", "getPropertySetterMethod", "invoke", "invoke", "add", "add", "equals", "add"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}