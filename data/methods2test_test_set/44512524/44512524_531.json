{"test_class": {"identifier": "BJKSTTest", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/stream/cardinality/BJKSTTest.java"}, "test_case": {"identifier": "testOffer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOffer() {\n        System.out.println(\"offer\");\n        BJKST instance = new BJKST(1024, 64, 0.3);\n        \n        long cardinality = 500L;\n        \n        System.out.println(\"First batch:\");\n        for (long i = 0; i < cardinality; i++) {\n            instance.offer(Long.valueOf(i));\n            if (i % 50 == 0) {\n                System.out.println(\"actual: \" + i + \", estimated: \" + instance.cardinality());\n            }\n        }\n        \n        System.out.println(\"Second batch:\");\n        for (long i = 0; i < cardinality; i++) {\n            instance.offer(Long.valueOf(i));\n            if (i % 50 == 0) {\n                System.out.println(\"actual: \" + i + \", estimated: \" + instance.cardinality());\n            }\n        }\n\n        System.out.println(\"actual: \" + cardinality + \", estimated: \" + instance.cardinality());\n        \n        assertEquals(cardinality, instance.cardinality(), 100);\n    }", "signature": "void testOffer()", "full_signature": "@Test public void testOffer()", "class_method_signature": "BJKSTTest.testOffer()", "testcase": true, "constructor": false, "invocations": ["println", "println", "offer", "valueOf", "println", "cardinality", "println", "offer", "valueOf", "println", "cardinality", "println", "cardinality", "assertEquals", "cardinality"]}, "focal_class": {"identifier": "BJKST", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -2032575802259420762L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2032575802259420762L", "var_name": "serialVersionUID"}, {"original_string": "private int numMedians=25;", "modifier": "private", "type": "int", "declarator": "numMedians=25", "var_name": "numMedians"}, {"original_string": "private int sizeOfMedianSet;", "modifier": "private", "type": "int", "declarator": "sizeOfMedianSet", "var_name": "sizeOfMedianSet"}, {"original_string": "private double error = 0.02f;", "modifier": "private", "type": "double", "declarator": "error = 0.02f", "var_name": "error"}, {"original_string": "private List<Integer> limits;", "modifier": "private", "type": "List<Integer>", "declarator": "limits", "var_name": "limits"}, {"original_string": "private int bufferSize = 100;", "modifier": "private", "type": "int", "declarator": "bufferSize = 100", "var_name": "bufferSize"}, {"original_string": "private List<HashSet<String>> buffers;", "modifier": "private", "type": "List<HashSet<String>>", "declarator": "buffers", "var_name": "buffers"}, {"original_string": "private List<HashFunction<Object>> hHashers;", "modifier": "private", "type": "List<HashFunction<Object>>", "declarator": "hHashers", "var_name": "hHashers"}, {"original_string": "private List<HashFunction<Object>> gHashers;", "modifier": "private", "type": "List<HashFunction<Object>>", "declarator": "gHashers", "var_name": "gHashers"}, {"original_string": "private int intLength = Integer.toString(Integer.MAX_VALUE).length();", "modifier": "private", "type": "int", "declarator": "intLength = Integer.toString(Integer.MAX_VALUE).length()", "var_name": "intLength"}, {"original_string": "private String lengthOfIntegerRepresentation = null;", "modifier": "private", "type": "String", "declarator": "lengthOfIntegerRepresentation = null", "var_name": "lengthOfIntegerRepresentation"}], "methods": [{"identifier": "BJKST", "parameters": "(int numberOfMedianAttempts, int sizeOfEachMedianSet)", "modifiers": "public", "return": "", "signature": " BJKST(int numberOfMedianAttempts, int sizeOfEachMedianSet)", "full_signature": "public  BJKST(int numberOfMedianAttempts, int sizeOfEachMedianSet)", "class_method_signature": "BJKST.BJKST(int numberOfMedianAttempts, int sizeOfEachMedianSet)", "testcase": false, "constructor": true}, {"identifier": "BJKST", "parameters": "(int numberOfMedianAttempts, int sizeOfEachMedianSet, double allowedError)", "modifiers": "public", "return": "", "signature": " BJKST(int numberOfMedianAttempts, int sizeOfEachMedianSet, double allowedError)", "full_signature": "public  BJKST(int numberOfMedianAttempts, int sizeOfEachMedianSet, double allowedError)", "class_method_signature": "BJKST.BJKST(int numberOfMedianAttempts, int sizeOfEachMedianSet, double allowedError)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "BJKST.init()", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(Object o)", "modifiers": "public", "return": "void", "signature": "void offer(Object o)", "full_signature": "public void offer(Object o)", "class_method_signature": "BJKST.offer(Object o)", "testcase": false, "constructor": false}, {"identifier": "cardinality", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long cardinality()", "full_signature": "public long cardinality()", "class_method_signature": "BJKST.cardinality()", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/cardinality/BJKST.java"}, "focal_method": {"identifier": "offer", "parameters": "(Object o)", "modifiers": "public", "return": "void", "body": "public void offer(Object o) {\n        for ( int i =0 ; i < numMedians; i++) {\n            String binaryRepr = Long.toBinaryString(hHashers.get(i).hash(o));\n            \n            int zereosP = binaryRepr.length() - binaryRepr.lastIndexOf('1');\n            int currentZ = limits.get(i);\n            \n            if (zereosP >= currentZ) {\n                HashSet<String> currentBuffer = buffers.get(i);\n                \n                currentBuffer.add(String.format(lengthOfIntegerRepresentation, gHashers.get(i).hash(o)) +\n                            String.format(lengthOfIntegerRepresentation, zereosP));\n\n                while (currentBuffer.size() > bufferSize) {\n                    currentZ = currentZ + 1;\n                    for (Iterator<String> itr = currentBuffer.iterator(); itr.hasNext();) {\n                        String element = itr.next();\n                        long zeroesOld = Long.parseLong(element.substring(intLength));\n                        if (zeroesOld < currentZ) {\n                            itr.remove();\n                        }\n                    }\n                }\n            }\n        }\n    }", "signature": "void offer(Object o)", "full_signature": "public void offer(Object o)", "class_method_signature": "BJKST.offer(Object o)", "testcase": false, "constructor": false, "invocations": ["toBinaryString", "hash", "get", "length", "lastIndexOf", "get", "get", "add", "format", "hash", "get", "format", "size", "iterator", "hasNext", "next", "parseLong", "substring", "remove"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}