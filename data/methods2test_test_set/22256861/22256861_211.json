{"test_class": {"identifier": "CameraImageMosaicTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-sentinel3-reader/src/test/java/org/esa/s3tbx/dataio/s3/synergy/CameraImageMosaicTest.java"}, "test_case": {"identifier": "testCreateMosaicMultiLevelImage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateMosaicMultiLevelImage() throws Exception {\n        final MultiLevelImage image1 = createMultiLevelImage(1, 2);\n        final MultiLevelImage image2 = createMultiLevelImage(2, 2);\n        final MultiLevelImage image3 = createMultiLevelImage(3, 2);\n        final MultiLevelImage image4 = createMultiLevelImage(4, 2);\n        final MultiLevelImage image5 = createMultiLevelImage(5, 2);\n\n        final MultiLevelImage mosaicImage = CameraImageMosaic.create(image1, image2, image3, image4, image5);\n\n        assertNotNull(mosaicImage);\n        assertEquals(50, mosaicImage.getWidth());\n        assertEquals(100, mosaicImage.getHeight());\n        assertEquals(2, mosaicImage.getModel().getLevelCount());\n\n        final Raster dataL0 = mosaicImage.getImage(0).getData();\n        for (int x = 0; x < mosaicImage.getImage(0).getWidth(); x++) {\n            assertEquals(x / 10 + 1, dataL0.getSample(x, 0, 0));\n        }\n        final Raster dataL1 = mosaicImage.getImage(1).getData();\n        for (int x = 0; x < mosaicImage.getImage(1).getWidth(); x++) {\n            assertEquals(x / 5 + 1, dataL1.getSample(x, 0, 0));\n        }\n    }", "signature": "void testCreateMosaicMultiLevelImage()", "full_signature": "@Test public void testCreateMosaicMultiLevelImage()", "class_method_signature": "CameraImageMosaicTest.testCreateMosaicMultiLevelImage()", "testcase": true, "constructor": false, "invocations": ["createMultiLevelImage", "createMultiLevelImage", "createMultiLevelImage", "createMultiLevelImage", "createMultiLevelImage", "create", "assertNotNull", "assertEquals", "getWidth", "assertEquals", "getHeight", "assertEquals", "getLevelCount", "getModel", "getData", "getImage", "getWidth", "getImage", "assertEquals", "getSample", "getData", "getImage", "getWidth", "getImage", "assertEquals", "getSample"]}, "focal_class": {"identifier": "CameraImageMosaic", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Interpolation INTERPOLATION = Interpolation.getInstance(Interpolation.INTERP_NEAREST);", "modifier": "private static final", "type": "Interpolation", "declarator": "INTERPOLATION = Interpolation.getInstance(Interpolation.INTERP_NEAREST)", "var_name": "INTERPOLATION"}], "methods": [{"identifier": "create", "parameters": "(RenderedImage... sourceImages)", "modifiers": "static", "return": "RenderedImage", "signature": "RenderedImage create(RenderedImage... sourceImages)", "full_signature": "static RenderedImage create(RenderedImage... sourceImages)", "class_method_signature": "CameraImageMosaic.create(RenderedImage... sourceImages)", "testcase": false, "constructor": false}, {"identifier": "determineSourceThreshold", "parameters": "(RenderedImage image)", "modifiers": "private static", "return": "double", "signature": "double determineSourceThreshold(RenderedImage image)", "full_signature": "private static double determineSourceThreshold(RenderedImage image)", "class_method_signature": "CameraImageMosaic.determineSourceThreshold(RenderedImage image)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final MultiLevelImage... sourceImages)", "modifiers": "public static", "return": "MultiLevelImage", "signature": "MultiLevelImage create(final MultiLevelImage... sourceImages)", "full_signature": "public static MultiLevelImage create(final MultiLevelImage... sourceImages)", "class_method_signature": "CameraImageMosaic.create(final MultiLevelImage... sourceImages)", "testcase": false, "constructor": false}, {"identifier": "mosaicWidth", "parameters": "(MultiLevelImage[] sourceImages)", "modifiers": "private static", "return": "int", "signature": "int mosaicWidth(MultiLevelImage[] sourceImages)", "full_signature": "private static int mosaicWidth(MultiLevelImage[] sourceImages)", "class_method_signature": "CameraImageMosaic.mosaicWidth(MultiLevelImage[] sourceImages)", "testcase": false, "constructor": false}], "file": "s3tbx-sentinel3-reader/src/main/java/org/esa/s3tbx/dataio/s3/synergy/CameraImageMosaic.java"}, "focal_method": {"identifier": "create", "parameters": "(RenderedImage... sourceImages)", "modifiers": "static", "return": "RenderedImage", "body": "static RenderedImage create(RenderedImage... sourceImages) {\n        double[][] sourceThresholds = new double[sourceImages.length][1];\n        sourceThresholds[0][0] = determineSourceThreshold(sourceImages[0]);\n        int t = 0;\n        for (int i = 1; i < sourceImages.length; i++) {\n            t += sourceImages[i - 1].getWidth();\n            sourceImages[i] = TranslateDescriptor.create(sourceImages[i], (float) t, 0.0f, INTERPOLATION, null);\n            sourceThresholds[i][0] = determineSourceThreshold(sourceImages[i]);\n        }\n        return MosaicDescriptor.create(sourceImages, MosaicDescriptor.MOSAIC_TYPE_OVERLAY, null, null,\n                                       sourceThresholds, null, null);\n    }", "signature": "RenderedImage create(RenderedImage... sourceImages)", "full_signature": "static RenderedImage create(RenderedImage... sourceImages)", "class_method_signature": "CameraImageMosaic.create(RenderedImage... sourceImages)", "testcase": false, "constructor": false, "invocations": ["determineSourceThreshold", "getWidth", "create", "determineSourceThreshold", "create"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}