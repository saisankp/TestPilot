{"test_class": {"identifier": "SlstrProductFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-sentinel3-reader/src/test/java/org/esa/s3tbx/dataio/s3/slstr/SlstrProductFactoryTest.java"}, "test_case": {"identifier": "testGetGridIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetGridIndex() {\n        assertEquals(\"in\", SlstrProductFactory.getGridIndex(\"a_name_ending_in_in\"));\n        assertEquals(\"io\", SlstrProductFactory.getGridIndex(\"a_name_ending_in_io\"));\n        assertEquals(\"fn\", SlstrProductFactory.getGridIndex(\"a_name_ending_in_fn\"));\n        assertEquals(\"tx\", SlstrProductFactory.getGridIndex(\"a_name_ending_in_tx\"));\n        assertEquals(\"in\", SlstrProductFactory.getGridIndex(\"a_name_ending_in_in_lsb\"));\n        assertEquals(\"io\", SlstrProductFactory.getGridIndex(\"a_name_ending_in_io_msb\"));\n        assertEquals(\"y\", SlstrProductFactory.getGridIndex(\"y\"));\n        assertEquals(\"th\", SlstrProductFactory.getGridIndex(\"th_fetrzgh\"));\n        assertEquals(\"gh\", SlstrProductFactory.getGridIndex(\"the_fetrzgh\"));\n        assertEquals(\"f\", SlstrProductFactory.getGridIndex(\"thtcfzghj_f\"));\n        assertEquals(\"-f\", SlstrProductFactory.getGridIndex(\"thtcfzghj-f\"));\n        assertEquals(\"ao\", SlstrProductFactory.getGridIndex(\"S1_exception_ao_no_parameters\"));\n    }", "signature": "void testGetGridIndex()", "full_signature": "@Test public void testGetGridIndex()", "class_method_signature": "SlstrProductFactoryTest.testGetGridIndex()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getGridIndex", "assertEquals", "getGridIndex", "assertEquals", "getGridIndex", "assertEquals", "getGridIndex", "assertEquals", "getGridIndex", "assertEquals", "getGridIndex", "assertEquals", "getGridIndex", "assertEquals", "getGridIndex", "assertEquals", "getGridIndex", "assertEquals", "getGridIndex", "assertEquals", "getGridIndex", "assertEquals", "getGridIndex"]}, "focal_class": {"identifier": "SlstrProductFactory", "superclass": "extends AbstractProductFactory", "interfaces": "", "fields": [{"original_string": "private double referenceStartOffset;", "modifier": "private", "type": "double", "declarator": "referenceStartOffset", "var_name": "referenceStartOffset"}, {"original_string": "private double referenceTrackOffset;", "modifier": "private", "type": "double", "declarator": "referenceTrackOffset", "var_name": "referenceTrackOffset"}, {"original_string": "private short[] referenceResolutions;", "modifier": "private", "type": "short[]", "declarator": "referenceResolutions", "var_name": "referenceResolutions"}, {"original_string": "private final static String SYSPROP_SLSTR_PIXEL_TIE_POINT_FORWARD = \"s3tbx.reader.slstr.tiePointGeoCoding.forward\";", "modifier": "private final static", "type": "String", "declarator": "SYSPROP_SLSTR_PIXEL_TIE_POINT_FORWARD = \"s3tbx.reader.slstr.tiePointGeoCoding.forward\"", "var_name": "SYSPROP_SLSTR_PIXEL_TIE_POINT_FORWARD"}, {"original_string": "private static final String[] SLSTR_GRID_INDEXES = new String[]{\n            \"an\", \"ao\", \"bn\", \"bo\", \"cn\", \"co\", \"in\", \"io\", \"fn\", \"fo\", \"tn\", \"to\", \"tx\"\n    };", "modifier": "private static final", "type": "String[]", "declarator": "SLSTR_GRID_INDEXES = new String[]{\n            \"an\", \"ao\", \"bn\", \"bo\", \"cn\", \"co\", \"in\", \"io\", \"fn\", \"fo\", \"tn\", \"to\", \"tx\"\n    }", "var_name": "SLSTR_GRID_INDEXES"}], "methods": [{"identifier": "SlstrProductFactory", "parameters": "(Sentinel3ProductReader productReader)", "modifiers": "", "return": "", "signature": " SlstrProductFactory(Sentinel3ProductReader productReader)", "full_signature": "  SlstrProductFactory(Sentinel3ProductReader productReader)", "class_method_signature": "SlstrProductFactory.SlstrProductFactory(Sentinel3ProductReader productReader)", "testcase": false, "constructor": true}, {"identifier": "getGridIndex", "parameters": "(String bandName)", "modifiers": "static", "return": "String", "signature": "String getGridIndex(String bandName)", "full_signature": "static String getGridIndex(String bandName)", "class_method_signature": "SlstrProductFactory.getGridIndex(String bandName)", "testcase": false, "constructor": false}, {"identifier": "getStartOffset", "parameters": "(String gridIndex)", "modifiers": "protected abstract", "return": "Double", "signature": "Double getStartOffset(String gridIndex)", "full_signature": "protected abstract Double getStartOffset(String gridIndex)", "class_method_signature": "SlstrProductFactory.getStartOffset(String gridIndex)", "testcase": false, "constructor": false}, {"identifier": "getTrackOffset", "parameters": "(String gridIndex)", "modifiers": "protected abstract", "return": "Double", "signature": "Double getTrackOffset(String gridIndex)", "full_signature": "protected abstract Double getTrackOffset(String gridIndex)", "class_method_signature": "SlstrProductFactory.getTrackOffset(String gridIndex)", "testcase": false, "constructor": false}, {"identifier": "getResolutions", "parameters": "(String gridIndex)", "modifiers": "protected", "return": "short[]", "signature": "short[] getResolutions(String gridIndex)", "full_signature": "protected short[] getResolutions(String gridIndex)", "class_method_signature": "SlstrProductFactory.getResolutions(String gridIndex)", "testcase": false, "constructor": false}, {"identifier": "setReferenceStartOffset", "parameters": "(double startOffset)", "modifiers": "", "return": "void", "signature": "void setReferenceStartOffset(double startOffset)", "full_signature": " void setReferenceStartOffset(double startOffset)", "class_method_signature": "SlstrProductFactory.setReferenceStartOffset(double startOffset)", "testcase": false, "constructor": false}, {"identifier": "setReferenceTrackOffset", "parameters": "(double trackOffset)", "modifiers": "", "return": "void", "signature": "void setReferenceTrackOffset(double trackOffset)", "full_signature": " void setReferenceTrackOffset(double trackOffset)", "class_method_signature": "SlstrProductFactory.setReferenceTrackOffset(double trackOffset)", "testcase": false, "constructor": false}, {"identifier": "setReferenceResolutions", "parameters": "(short[] resolutions)", "modifiers": "", "return": "void", "signature": "void setReferenceResolutions(short[] resolutions)", "full_signature": " void setReferenceResolutions(short[] resolutions)", "class_method_signature": "SlstrProductFactory.setReferenceResolutions(short[] resolutions)", "testcase": false, "constructor": false}, {"identifier": "getReferenceResolutions", "parameters": "()", "modifiers": "protected", "return": "short[]", "signature": "short[] getReferenceResolutions()", "full_signature": "protected short[] getReferenceResolutions()", "class_method_signature": "SlstrProductFactory.getReferenceResolutions()", "testcase": false, "constructor": false}, {"identifier": "isNodeSpecial", "parameters": "(Band sourceBand, Product targetProduct)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isNodeSpecial(Band sourceBand, Product targetProduct)", "full_signature": "@Override protected boolean isNodeSpecial(Band sourceBand, Product targetProduct)", "class_method_signature": "SlstrProductFactory.isNodeSpecial(Band sourceBand, Product targetProduct)", "testcase": false, "constructor": false}, {"identifier": "createSourceImage", "parameters": "(Product masterProduct, Band sourceBand, float[] offsets,\n                                    Band targetBand, short[] sourceResolutions)", "modifiers": "", "return": "RenderedImage", "signature": "RenderedImage createSourceImage(Product masterProduct, Band sourceBand, float[] offsets,\n                                    Band targetBand, short[] sourceResolutions)", "full_signature": " RenderedImage createSourceImage(Product masterProduct, Band sourceBand, float[] offsets,\n                                    Band targetBand, short[] sourceResolutions)", "class_method_signature": "SlstrProductFactory.createSourceImage(Product masterProduct, Band sourceBand, float[] offsets,\n                                    Band targetBand, short[] sourceResolutions)", "testcase": false, "constructor": false}, {"identifier": "getOffsets", "parameters": "(double sourceStartOffset, double sourceTrackOffset, short[] sourceResolutions)", "modifiers": "", "return": "float[]", "signature": "float[] getOffsets(double sourceStartOffset, double sourceTrackOffset, short[] sourceResolutions)", "full_signature": " float[] getOffsets(double sourceStartOffset, double sourceTrackOffset, short[] sourceResolutions)", "class_method_signature": "SlstrProductFactory.getOffsets(double sourceStartOffset, double sourceTrackOffset, short[] sourceResolutions)", "testcase": false, "constructor": false}, {"identifier": "copyTiePointGrid", "parameters": "(Band sourceBand, Product targetProduct, double sourceStartOffset,\n                                    double sourceTrackOffset, short[] sourceResolutions)", "modifiers": "", "return": "RasterDataNode", "signature": "RasterDataNode copyTiePointGrid(Band sourceBand, Product targetProduct, double sourceStartOffset,\n                                    double sourceTrackOffset, short[] sourceResolutions)", "full_signature": " RasterDataNode copyTiePointGrid(Band sourceBand, Product targetProduct, double sourceStartOffset,\n                                    double sourceTrackOffset, short[] sourceResolutions)", "class_method_signature": "SlstrProductFactory.copyTiePointGrid(Band sourceBand, Product targetProduct, double sourceStartOffset,\n                                    double sourceTrackOffset, short[] sourceResolutions)", "testcase": false, "constructor": false}, {"identifier": "getTiePointGridOffsets", "parameters": "(double sourceStartOffset, double sourceTrackOffset,\n                                           int subSamplingX, int subSamplingY)", "modifiers": "private", "return": "float[]", "signature": "float[] getTiePointGridOffsets(double sourceStartOffset, double sourceTrackOffset,\n                                           int subSamplingX, int subSamplingY)", "full_signature": "private float[] getTiePointGridOffsets(double sourceStartOffset, double sourceTrackOffset,\n                                           int subSamplingX, int subSamplingY)", "class_method_signature": "SlstrProductFactory.getTiePointGridOffsets(double sourceStartOffset, double sourceTrackOffset,\n                                           int subSamplingX, int subSamplingY)", "testcase": false, "constructor": false}, {"identifier": "setGeoCoding", "parameters": "(Product targetProduct)", "modifiers": "@Override protected", "return": "void", "signature": "void setGeoCoding(Product targetProduct)", "full_signature": "@Override protected void setGeoCoding(Product targetProduct)", "class_method_signature": "SlstrProductFactory.setGeoCoding(Product targetProduct)", "testcase": false, "constructor": false}, {"identifier": "setAutoGrouping", "parameters": "(Product[] sourceProducts, Product targetProduct)", "modifiers": "@Override protected", "return": "void", "signature": "void setAutoGrouping(Product[] sourceProducts, Product targetProduct)", "full_signature": "@Override protected void setAutoGrouping(Product[] sourceProducts, Product targetProduct)", "class_method_signature": "SlstrProductFactory.setAutoGrouping(Product[] sourceProducts, Product targetProduct)", "testcase": false, "constructor": false}, {"identifier": "getAutoGroupingString", "parameters": "(Product[] sourceProducts)", "modifiers": "protected", "return": "String", "signature": "String getAutoGroupingString(Product[] sourceProducts)", "full_signature": "protected String getAutoGroupingString(Product[] sourceProducts)", "class_method_signature": "SlstrProductFactory.getAutoGroupingString(Product[] sourceProducts)", "testcase": false, "constructor": false}, {"identifier": "readProduct", "parameters": "(String fileName, Manifest manifest)", "modifiers": "@Override protected", "return": "Product", "signature": "Product readProduct(String fileName, Manifest manifest)", "full_signature": "@Override protected Product readProduct(String fileName, Manifest manifest)", "class_method_signature": "SlstrProductFactory.readProduct(String fileName, Manifest manifest)", "testcase": false, "constructor": false}, {"identifier": "loadTiePointData", "parameters": "(String tpgName)", "modifiers": "protected", "return": "double[]", "signature": "double[] loadTiePointData(String tpgName)", "full_signature": "protected double[] loadTiePointData(String tpgName)", "class_method_signature": "SlstrProductFactory.loadTiePointData(String tpgName)", "testcase": false, "constructor": false}], "file": "s3tbx-sentinel3-reader/src/main/java/org/esa/s3tbx/dataio/s3/slstr/SlstrProductFactory.java"}, "focal_method": {"identifier": "getGridIndex", "parameters": "(String bandName)", "modifiers": "static", "return": "String", "body": "static String getGridIndex(String bandName) {\n        String[] nameParts = bandName.split(\"_\");\n        int lastPartIndex = nameParts.length - 1;\n        int index = lastPartIndex;\n        int firstIndexOfPartWithTwoLetters = -1;\n        while (index >= 0) {\n            if (ArrayUtils.isMemberOf(nameParts[index], SLSTR_GRID_INDEXES)) {\n                return nameParts[index];\n            } else if (firstIndexOfPartWithTwoLetters < 0 && nameParts[index].length() == 2) {\n                firstIndexOfPartWithTwoLetters = index;\n            }\n            index--;\n        }\n        if (firstIndexOfPartWithTwoLetters >= 0) {\n            return nameParts[firstIndexOfPartWithTwoLetters];\n        }\n        if (nameParts[lastPartIndex].length() > 1) {\n            return nameParts[lastPartIndex].substring(nameParts[lastPartIndex].length() - 2);\n        }\n        return nameParts[lastPartIndex];\n    }", "signature": "String getGridIndex(String bandName)", "full_signature": "static String getGridIndex(String bandName)", "class_method_signature": "SlstrProductFactory.getGridIndex(String bandName)", "testcase": false, "constructor": false, "invocations": ["split", "isMemberOf", "length", "length", "substring", "length"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}