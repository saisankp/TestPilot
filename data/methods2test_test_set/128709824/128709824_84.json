{"test_class": {"identifier": "RegistryFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/api/src/test/java/com/alipay/sofa/rpc/registry/RegistryFactoryTest.java"}, "test_case": {"identifier": "getRegistry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getRegistry() {\n        try {\n            RegistryConfig registryConfig = new RegistryConfig().setProtocol(\"test111\");\n            Registry registry = RegistryFactory.getRegistry(registryConfig);\n            Assert.fail();\n        } catch (Exception e) {\n            Assert.assertTrue(e instanceof SofaRpcRuntimeException);\n        }\n        {\n            RegistryConfig registryConfig = new RegistryConfig().setProtocol(\"test\");\n            Registry registry = RegistryFactory.getRegistry(registryConfig);\n            Assert.assertTrue(registry instanceof TestRegistry);\n\n            registry.destroy(new Destroyable.DestroyHook() {\n                @Override\n                public void preDestroy() {\n\n                }\n\n                @Override\n                public void postDestroy() {\n\n                }\n            });\n        }\n\n        for (int i = 0; i < 3; i++) {\n            RegistryConfig registryConfig = new RegistryConfig().setProtocol(\"test\").setTimeout(1000 + i);\n            Registry registry = RegistryFactory.getRegistry(registryConfig);\n            Assert.assertTrue(registry instanceof TestRegistry);\n        }\n\n        Assert.assertTrue(RegistryFactory.getRegistries().size() == 4);\n\n        RegistryFactory.destroyAll();\n    }", "signature": "void getRegistry()", "full_signature": "@Test public void getRegistry()", "class_method_signature": "RegistryFactoryTest.getRegistry()", "testcase": true, "constructor": false, "invocations": ["setProtocol", "getRegistry", "fail", "assertTrue", "setProtocol", "getRegistry", "assertTrue", "destroy", "setTimeout", "setProtocol", "getRegistry", "assertTrue", "assertTrue", "size", "getRegistries", "destroyAll"]}, "focal_class": {"identifier": "RegistryFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static ConcurrentMap<RegistryConfig, Registry> ALL_REGISTRIES = new ConcurrentHashMap<RegistryConfig, Registry>();", "modifier": "private final static", "type": "ConcurrentMap<RegistryConfig, Registry>", "declarator": "ALL_REGISTRIES = new ConcurrentHashMap<RegistryConfig, Registry>()", "var_name": "ALL_REGISTRIES"}, {"original_string": "private final static Logger                                  LOGGER         = LoggerFactory\n                                                                                    .getLogger(RegistryFactory.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER         = LoggerFactory\n                                                                                    .getLogger(RegistryFactory.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "getRegistry", "parameters": "(RegistryConfig registryConfig)", "modifiers": "public static synchronized", "return": "Registry", "signature": "Registry getRegistry(RegistryConfig registryConfig)", "full_signature": "public static synchronized Registry getRegistry(RegistryConfig registryConfig)", "class_method_signature": "RegistryFactory.getRegistry(RegistryConfig registryConfig)", "testcase": false, "constructor": false}, {"identifier": "getRegistryConfigs", "parameters": "()", "modifiers": "public static", "return": "List<RegistryConfig>", "signature": "List<RegistryConfig> getRegistryConfigs()", "full_signature": "public static List<RegistryConfig> getRegistryConfigs()", "class_method_signature": "RegistryFactory.getRegistryConfigs()", "testcase": false, "constructor": false}, {"identifier": "getRegistries", "parameters": "()", "modifiers": "public static", "return": "List<Registry>", "signature": "List<Registry> getRegistries()", "full_signature": "public static List<Registry> getRegistries()", "class_method_signature": "RegistryFactory.getRegistries()", "testcase": false, "constructor": false}, {"identifier": "destroyAll", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void destroyAll()", "full_signature": "public static void destroyAll()", "class_method_signature": "RegistryFactory.destroyAll()", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/registry/RegistryFactory.java"}, "focal_method": {"identifier": "getRegistry", "parameters": "(RegistryConfig registryConfig)", "modifiers": "public static synchronized", "return": "Registry", "body": "public static synchronized Registry getRegistry(RegistryConfig registryConfig) {\n        if (ALL_REGISTRIES.size() > 3) { // \u8d85\u8fc73\u6b21 \u662f\u4e0d\u662f\u914d\u9519\u4e86\uff1f\n            if (LOGGER.isWarnEnabled()) {\n                LOGGER.warn(\"Size of registry is greater than 3, Please check it!\");\n            }\n        }\n        String protocol = null;\n        try {\n            // \u6ce8\u610f\uff1aRegistryConfig\u91cd\u5199\u4e86equals\u65b9\u6cd5\uff0c\u5982\u679c\u591a\u4e2aRegistryConfig\u5c5e\u6027\u4e00\u6837\uff0c\u5219\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5bf9\u8c61\n            Registry registry = ALL_REGISTRIES.get(registryConfig);\n            if (registry == null) {\n                protocol = registryConfig.getProtocol();\n                ExtensionClass<Registry> ext = ExtensionLoaderFactory.getExtensionLoader(Registry.class)\n                    .getExtensionClass(protocol);\n                if (ext == null) {\n                    throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_LOAD_EXT, \"Registry\", protocol));\n                }\n                registry = ext.getExtInstance(new Class[] { RegistryConfig.class }, new Object[] { registryConfig });\n                ALL_REGISTRIES.put(registryConfig, registry);\n            }\n            return registry;\n        } catch (SofaRpcRuntimeException e) {\n            throw e;\n        } catch (Throwable e) {\n            throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_LOAD_EXT, \"Registry\", protocol));\n        }\n    }", "signature": "Registry getRegistry(RegistryConfig registryConfig)", "full_signature": "public static synchronized Registry getRegistry(RegistryConfig registryConfig)", "class_method_signature": "RegistryFactory.getRegistry(RegistryConfig registryConfig)", "testcase": false, "constructor": false, "invocations": ["size", "isWarnEnabled", "warn", "get", "getProtocol", "getExtensionClass", "getExtensionLoader", "getLog", "getExtInstance", "put", "getLog"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}