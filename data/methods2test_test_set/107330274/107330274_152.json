{"test_class": {"identifier": "StdValueSanitizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-common/src/test/java/com/netflix/titus/common/model/sanitizer/internal/StdValueSanitizerTest.java"}, "test_case": {"identifier": "testSanitizationOfNullNestedObjects", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSanitizationOfNullNestedObjects() {\n        Root root = new Root(\n                \"  root1   \",\n                null,\n                null\n        );\n\n        Optional<Object> sanitizedOpt = new StdValueSanitizer(type -> true).apply(root);\n        assertThat(sanitizedOpt).isPresent();\n\n        Root sanitized = (Root) sanitizedOpt.get();\n        assertThat(sanitized.getName()).isEqualTo(\"root1\");\n    }", "signature": "void testSanitizationOfNullNestedObjects()", "full_signature": "@Test public void testSanitizationOfNullNestedObjects()", "class_method_signature": "StdValueSanitizerTest.testSanitizationOfNullNestedObjects()", "testcase": true, "constructor": false, "invocations": ["apply", "isPresent", "assertThat", "get", "isEqualTo", "assertThat", "getName"]}, "focal_class": {"identifier": "StdValueSanitizer", "superclass": "extends AbstractFieldSanitizer<Object>", "interfaces": "", "fields": [{"original_string": "private final Function<Class<?>, Boolean> innerEntityPredicate;", "modifier": "private final", "type": "Function<Class<?>, Boolean>", "declarator": "innerEntityPredicate", "var_name": "innerEntityPredicate"}], "methods": [{"identifier": "StdValueSanitizer", "parameters": "(Function<Class<?>, Boolean> innerEntityPredicate)", "modifiers": "public", "return": "", "signature": " StdValueSanitizer(Function<Class<?>, Boolean> innerEntityPredicate)", "full_signature": "public  StdValueSanitizer(Function<Class<?>, Boolean> innerEntityPredicate)", "class_method_signature": "StdValueSanitizer.StdValueSanitizer(Function<Class<?>, Boolean> innerEntityPredicate)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(Object entity)", "modifiers": "@Override public", "return": "Optional<Object>", "signature": "Optional<Object> apply(Object entity)", "full_signature": "@Override public Optional<Object> apply(Object entity)", "class_method_signature": "StdValueSanitizer.apply(Object entity)", "testcase": false, "constructor": false}, {"identifier": "sanitizeFieldValue", "parameters": "(Field field, Object fieldValue, Object context)", "modifiers": "@Override protected", "return": "Optional<Object>", "signature": "Optional<Object> sanitizeFieldValue(Field field, Object fieldValue, Object context)", "full_signature": "@Override protected Optional<Object> sanitizeFieldValue(Field field, Object fieldValue, Object context)", "class_method_signature": "StdValueSanitizer.sanitizeFieldValue(Field field, Object fieldValue, Object context)", "testcase": false, "constructor": false}, {"identifier": "doStringCleanup", "parameters": "(String value)", "modifiers": "private", "return": "Optional<Object>", "signature": "Optional<Object> doStringCleanup(String value)", "full_signature": "private Optional<Object> doStringCleanup(String value)", "class_method_signature": "StdValueSanitizer.doStringCleanup(String value)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/model/sanitizer/internal/StdValueSanitizer.java"}, "focal_method": {"identifier": "apply", "parameters": "(Object entity)", "modifiers": "@Override public", "return": "Optional<Object>", "body": "@Override\n    public Optional<Object> apply(Object entity) {\n        return apply(entity, NOTHING);\n    }", "signature": "Optional<Object> apply(Object entity)", "full_signature": "@Override public Optional<Object> apply(Object entity)", "class_method_signature": "StdValueSanitizer.apply(Object entity)", "testcase": false, "constructor": false, "invocations": ["apply"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}