{"test_class": {"identifier": "DefaultPartitionerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private byte[] keyBytes = \"key\".getBytes();", "modifier": "private", "type": "byte[]", "declarator": "keyBytes = \"key\".getBytes()", "var_name": "keyBytes"}, {"original_string": "private Partitioner partitioner = new DefaultPartitioner();", "modifier": "private", "type": "Partitioner", "declarator": "partitioner = new DefaultPartitioner()", "var_name": "partitioner"}, {"original_string": "private Node node0 = new Node(0, \"localhost\", 99);", "modifier": "private", "type": "Node", "declarator": "node0 = new Node(0, \"localhost\", 99)", "var_name": "node0"}, {"original_string": "private Node node1 = new Node(1, \"localhost\", 100);", "modifier": "private", "type": "Node", "declarator": "node1 = new Node(1, \"localhost\", 100)", "var_name": "node1"}, {"original_string": "private Node node2 = new Node(2, \"localhost\", 101);", "modifier": "private", "type": "Node", "declarator": "node2 = new Node(2, \"localhost\", 101)", "var_name": "node2"}, {"original_string": "private Node[] nodes = new Node[] {node0, node1, node2};", "modifier": "private", "type": "Node[]", "declarator": "nodes = new Node[] {node0, node1, node2}", "var_name": "nodes"}, {"original_string": "private String topic = \"test\";", "modifier": "private", "type": "String", "declarator": "topic = \"test\"", "var_name": "topic"}, {"original_string": "private List<PartitionInfo> partitions = asList(new PartitionInfo(topic, 1, null, nodes, nodes),\n                                                    new PartitionInfo(topic, 2, node1, nodes, nodes),\n                                                    new PartitionInfo(topic, 0, node0, nodes, nodes));", "modifier": "private", "type": "List<PartitionInfo>", "declarator": "partitions = asList(new PartitionInfo(topic, 1, null, nodes, nodes),\n                                                    new PartitionInfo(topic, 2, node1, nodes, nodes),\n                                                    new PartitionInfo(topic, 0, node0, nodes, nodes))", "var_name": "partitions"}, {"original_string": "private Cluster cluster = new Cluster(asList(node0, node1, node2), partitions, Collections.<String>emptySet());", "modifier": "private", "type": "Cluster", "declarator": "cluster = new Cluster(asList(node0, node1, node2), partitions, Collections.<String>emptySet())", "var_name": "cluster"}], "file": "clients/src/test/java/org/apache/kafka/clients/producer/internals/DefaultPartitionerTest.java"}, "test_case": {"identifier": "testKeyPartitionIsStable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testKeyPartitionIsStable() {\n        int partition = partitioner.partition(\"test\",  null, keyBytes, null, null, cluster);\n        assertEquals(\"Same key should yield same partition\", partition, partitioner.partition(\"test\", null, keyBytes, null, null, cluster));\n    }", "signature": "void testKeyPartitionIsStable()", "full_signature": "@Test public void testKeyPartitionIsStable()", "class_method_signature": "DefaultPartitionerTest.testKeyPartitionIsStable()", "testcase": true, "constructor": false, "invocations": ["partition", "assertEquals", "partition"]}, "focal_class": {"identifier": "DefaultPartitioner", "superclass": "", "interfaces": "implements Partitioner", "fields": [{"original_string": "private final AtomicInteger counter = new AtomicInteger(new Random().nextInt());", "modifier": "private final", "type": "AtomicInteger", "declarator": "counter = new AtomicInteger(new Random().nextInt())", "var_name": "counter"}], "methods": [{"identifier": "toPositive", "parameters": "(int number)", "modifiers": "private static", "return": "int", "signature": "int toPositive(int number)", "full_signature": "private static int toPositive(int number)", "class_method_signature": "DefaultPartitioner.toPositive(int number)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "DefaultPartitioner.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Map<String, ?> configs)", "modifiers": "public", "return": "void", "signature": "void configure(Map<String, ?> configs)", "full_signature": "public void configure(Map<String, ?> configs)", "class_method_signature": "DefaultPartitioner.configure(Map<String, ?> configs)", "testcase": false, "constructor": false}, {"identifier": "partition", "parameters": "(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster)", "modifiers": "public", "return": "int", "signature": "int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster)", "full_signature": "public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster)", "class_method_signature": "DefaultPartitioner.partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "DefaultPartitioner.close()", "testcase": false, "constructor": false}], "file": "clients/src/main/java/org/apache/kafka/clients/producer/internals/DefaultPartitioner.java"}, "focal_method": {"identifier": "partition", "parameters": "(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster)", "modifiers": "public", "return": "int", "body": "public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) {\n        List<PartitionInfo> partitions = cluster.partitionsForTopic(topic);// \u5148\u4ece\u96c6\u7fa4\u4e2d\u53d6\u51fa\u6240\u6709\u5206\u533a\n        int numPartitions = partitions.size();\n        if (keyBytes == null) {            // \u6ca1\u6709key\u7684\u60c5\u51b5\u8d70\u8fd9\u4e2a\u5206\u652f\n            int nextValue = counter.getAndIncrement(); // \u8ba1\u6570\u670d\u52a1+1\n            List<PartitionInfo> availablePartitions = cluster.availablePartitionsForTopic(topic);// \u53d6\u51fa\u53ef\u7528\u7684\u5206\u533a\n            if (availablePartitions.size() > 0) {\n                int part = DefaultPartitioner.toPositive(nextValue) % availablePartitions.size();\n                return availablePartitions.get(part)\n                                          .partition();\n            } else {\n                // no partitions are available, give a non-available partition\n                // \u6ca1\u6709\u53ef\u7528\u7684\u5206\u533a\uff0c\u53ea\u80fd\u8fd4\u56de\u4e00\u4e2a\u4e0d\u53ef\u7528\u7684\u5206\u533a\n                return DefaultPartitioner.toPositive(nextValue) % numPartitions;\n            }\n        } else {\n            // hash the keyBytes to choose a partition\n            return DefaultPartitioner.toPositive(Utils.murmur2(keyBytes)) % numPartitions;\n        }\n    }", "signature": "int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster)", "full_signature": "public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster)", "class_method_signature": "DefaultPartitioner.partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster)", "testcase": false, "constructor": false, "invocations": ["partitionsForTopic", "size", "getAndIncrement", "availablePartitionsForTopic", "size", "toPositive", "size", "partition", "get", "toPositive", "toPositive", "murmur2"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}