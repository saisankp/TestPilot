{"test_class": {"identifier": "TagDaoHelperTest", "superclass": "extends AbstractDaoTest", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private TagDaoHelper tagDaoHelper;", "modifier": "@InjectMocks\n    private", "type": "TagDaoHelper", "declarator": "tagDaoHelper", "var_name": "tagDaoHelper"}, {"original_string": "@Mock\n    private ConfigurationHelper configurationHelper;", "modifier": "@Mock\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Mock\n    private TagDao tagDao;", "modifier": "@Mock\n    private", "type": "TagDao", "declarator": "tagDao", "var_name": "tagDao"}], "file": "herd-code/herd-dao/src/test/java/org/finra/herd/dao/helper/TagDaoHelperTest.java"}, "test_case": {"identifier": "testValidateParentTagEntity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateParentTagEntity()\n    {\n        // Create a tag type entity\n        TagTypeEntity tagTypeEntity = new TagTypeEntity();\n        tagTypeEntity.setCode(TAG_TYPE_CODE);\n\n        // Create a tag entity\n        TagEntity tagEntity = new TagEntity();\n        tagEntity.setTagType(tagTypeEntity);\n        tagEntity.setTagCode(TAG_CODE);\n        tagEntity.setDisplayName(TAG_DISPLAY_NAME);\n\n        // Create a parent tag entity\n        TagEntity parentTagEntity = new TagEntity();\n        parentTagEntity.setTagType(tagTypeEntity);\n        parentTagEntity.setTagCode(TAG_CODE_2);\n        parentTagEntity.setDisplayName(TAG_DISPLAY_NAME_2);\n        parentTagEntity.setChildrenTagEntities(Lists.newArrayList(tagEntity));\n\n        // Set the parent tag entity on the child tag entity\n        tagEntity.setParentTagEntity(parentTagEntity);\n\n        // Setup when clauses\n        when(configurationHelper.getProperty(ConfigurationValue.MAX_ALLOWED_TAG_NESTING, Integer.class)).thenReturn(1);\n\n        // Call the method under test\n        tagDaoHelper.validateParentTagEntity(tagEntity, parentTagEntity);\n\n        // Setup verify clauses\n        verify(configurationHelper).getProperty(ConfigurationValue.MAX_ALLOWED_TAG_NESTING, Integer.class);\n        verifyNoMoreInteractions(configurationHelper, tagDao);\n    }", "signature": "void testValidateParentTagEntity()", "full_signature": "@Test public void testValidateParentTagEntity()", "class_method_signature": "TagDaoHelperTest.testValidateParentTagEntity()", "testcase": true, "constructor": false, "invocations": ["setCode", "setTagType", "setTagCode", "setDisplayName", "setTagType", "setTagCode", "setDisplayName", "setChildrenTagEntities", "newArrayList", "setParentTagEntity", "thenReturn", "when", "getProperty", "validateParentTagEntity", "getProperty", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "TagDaoHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private TagDao tagDao;", "modifier": "@Autowired\n    private", "type": "TagDao", "declarator": "tagDao", "var_name": "tagDao"}], "methods": [{"identifier": "assertDisplayNameDoesNotExistForTag", "parameters": "(String tagCode, String displayName)", "modifiers": "public", "return": "void", "signature": "void assertDisplayNameDoesNotExistForTag(String tagCode, String displayName)", "full_signature": "public void assertDisplayNameDoesNotExistForTag(String tagCode, String displayName)", "class_method_signature": "TagDaoHelper.assertDisplayNameDoesNotExistForTag(String tagCode, String displayName)", "testcase": false, "constructor": false}, {"identifier": "getTagChildrenEntities", "parameters": "(TagEntity parentTagEntity)", "modifiers": "public", "return": "List<TagEntity>", "signature": "List<TagEntity> getTagChildrenEntities(TagEntity parentTagEntity)", "full_signature": "public List<TagEntity> getTagChildrenEntities(TagEntity parentTagEntity)", "class_method_signature": "TagDaoHelper.getTagChildrenEntities(TagEntity parentTagEntity)", "testcase": false, "constructor": false}, {"identifier": "getTagEntity", "parameters": "(TagKey tagKey)", "modifiers": "public", "return": "TagEntity", "signature": "TagEntity getTagEntity(TagKey tagKey)", "full_signature": "public TagEntity getTagEntity(TagKey tagKey)", "class_method_signature": "TagDaoHelper.getTagEntity(TagKey tagKey)", "testcase": false, "constructor": false}, {"identifier": "validateParentTagEntity", "parameters": "(TagEntity tagEntity, TagEntity parentTagEntity)", "modifiers": "public", "return": "void", "signature": "void validateParentTagEntity(TagEntity tagEntity, TagEntity parentTagEntity)", "full_signature": "public void validateParentTagEntity(TagEntity tagEntity, TagEntity parentTagEntity)", "class_method_signature": "TagDaoHelper.validateParentTagEntity(TagEntity tagEntity, TagEntity parentTagEntity)", "testcase": false, "constructor": false}, {"identifier": "validateParentTagType", "parameters": "(String tagTypeCode, String parentTagTypeCode)", "modifiers": "public", "return": "void", "signature": "void validateParentTagType(String tagTypeCode, String parentTagTypeCode)", "full_signature": "public void validateParentTagType(String tagTypeCode, String parentTagTypeCode)", "class_method_signature": "TagDaoHelper.validateParentTagType(String tagTypeCode, String parentTagTypeCode)", "testcase": false, "constructor": false}], "file": "herd-code/herd-dao/src/main/java/org/finra/herd/dao/helper/TagDaoHelper.java"}, "focal_method": {"identifier": "validateParentTagEntity", "parameters": "(TagEntity tagEntity, TagEntity parentTagEntity)", "modifiers": "public", "return": "void", "body": "public void validateParentTagEntity(TagEntity tagEntity, TagEntity parentTagEntity)\n    {\n        Integer maxAllowedTagNesting = configurationHelper.getProperty(ConfigurationValue.MAX_ALLOWED_TAG_NESTING, Integer.class);\n\n        TagEntity localParentTagEntity = parentTagEntity;\n        int level = 0;\n        while (localParentTagEntity != null)\n        {\n            Assert.isTrue(!tagEntity.equals(localParentTagEntity), \"Parent tag key cannot be the requested tag key or any of its children\u2019s tag keys.\");\n            localParentTagEntity = localParentTagEntity.getParentTagEntity();\n            if (level++ >= maxAllowedTagNesting)\n            {\n                throw new IllegalArgumentException(\"Exceeds maximum allowed tag nesting level of \" + maxAllowedTagNesting);\n            }\n        }\n    }", "signature": "void validateParentTagEntity(TagEntity tagEntity, TagEntity parentTagEntity)", "full_signature": "public void validateParentTagEntity(TagEntity tagEntity, TagEntity parentTagEntity)", "class_method_signature": "TagDaoHelper.validateParentTagEntity(TagEntity tagEntity, TagEntity parentTagEntity)", "testcase": false, "constructor": false, "invocations": ["getProperty", "isTrue", "equals", "getParentTagEntity"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}