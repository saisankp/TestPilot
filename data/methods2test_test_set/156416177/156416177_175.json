{"test_class": {"identifier": "SvLoadLogRecordTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HEADER = \"79007013DE31A75F00001A\";", "modifier": "private static final", "type": "String", "declarator": "HEADER = \"79007013DE31A75F00001A\"", "var_name": "HEADER"}, {"original_string": "private static final String AMOUNT_STR = \"FFFFFE\";", "modifier": "private static final", "type": "String", "declarator": "AMOUNT_STR = \"FFFFFE\"", "var_name": "AMOUNT_STR"}, {"original_string": "private static final String DATE_STR = \"1234\";", "modifier": "private static final", "type": "String", "declarator": "DATE_STR = \"1234\"", "var_name": "DATE_STR"}, {"original_string": "private static final String TIME_STR = \"5678\";", "modifier": "private static final", "type": "String", "declarator": "TIME_STR = \"5678\"", "var_name": "TIME_STR"}, {"original_string": "private static final String FREE1_STR = \"41\";", "modifier": "private static final", "type": "String", "declarator": "FREE1_STR = \"41\"", "var_name": "FREE1_STR"}, {"original_string": "private static final String FREE2_STR = \"42\";", "modifier": "private static final", "type": "String", "declarator": "FREE2_STR = \"42\"", "var_name": "FREE2_STR"}, {"original_string": "private static final String FREE = \"AB\";", "modifier": "private static final", "type": "String", "declarator": "FREE = \"AB\"", "var_name": "FREE"}, {"original_string": "private static final String KVC_STR = \"90\";", "modifier": "private static final", "type": "String", "declarator": "KVC_STR = \"90\"", "var_name": "KVC_STR"}, {"original_string": "private static final String SAMID_STR = \"AABBCCDD\";", "modifier": "private static final", "type": "String", "declarator": "SAMID_STR = \"AABBCCDD\"", "var_name": "SAMID_STR"}, {"original_string": "private static final String SAM_TNUM_STR = \"112233\";", "modifier": "private static final", "type": "String", "declarator": "SAM_TNUM_STR = \"112233\"", "var_name": "SAM_TNUM_STR"}, {"original_string": "private static final String BALANCE_STR = \"445566\";", "modifier": "private static final", "type": "String", "declarator": "BALANCE_STR = \"445566\"", "var_name": "BALANCE_STR"}, {"original_string": "private static final String SV_TNUM_STR = \"7788\";", "modifier": "private static final", "type": "String", "declarator": "SV_TNUM_STR = \"7788\"", "var_name": "SV_TNUM_STR"}, {"original_string": "private static final int AMOUNT = -2;", "modifier": "private static final", "type": "int", "declarator": "AMOUNT = -2", "var_name": "AMOUNT"}, {"original_string": "private static final int DATE = 0x1234;", "modifier": "private static final", "type": "int", "declarator": "DATE = 0x1234", "var_name": "DATE"}, {"original_string": "private static final byte[] DATE_BYTES = ByteArrayUtil.fromHex(DATE_STR);", "modifier": "private static final", "type": "byte[]", "declarator": "DATE_BYTES = ByteArrayUtil.fromHex(DATE_STR)", "var_name": "DATE_BYTES"}, {"original_string": "private static final int TIME = 0x5678;", "modifier": "private static final", "type": "int", "declarator": "TIME = 0x5678", "var_name": "TIME"}, {"original_string": "private static final byte[] TIME_BYTES = ByteArrayUtil.fromHex(TIME_STR);", "modifier": "private static final", "type": "byte[]", "declarator": "TIME_BYTES = ByteArrayUtil.fromHex(TIME_STR)", "var_name": "TIME_BYTES"}, {"original_string": "private static final byte[] FREE_BYTES = ByteArrayUtil.fromHex(FREE1_STR + FREE2_STR);", "modifier": "private static final", "type": "byte[]", "declarator": "FREE_BYTES = ByteArrayUtil.fromHex(FREE1_STR + FREE2_STR)", "var_name": "FREE_BYTES"}, {"original_string": "private static final byte KVC = (byte) 0x90;", "modifier": "private static final", "type": "byte", "declarator": "KVC = (byte) 0x90", "var_name": "KVC"}, {"original_string": "private static final int SAMID = 0xAABBCCDD;", "modifier": "private static final", "type": "int", "declarator": "SAMID = 0xAABBCCDD", "var_name": "SAMID"}, {"original_string": "private static final byte[] SAMID_BYTES = ByteArrayUtil.fromHex(SAMID_STR);", "modifier": "private static final", "type": "byte[]", "declarator": "SAMID_BYTES = ByteArrayUtil.fromHex(SAMID_STR)", "var_name": "SAMID_BYTES"}, {"original_string": "private static final int SAM_TNUM = 0x112233;", "modifier": "private static final", "type": "int", "declarator": "SAM_TNUM = 0x112233", "var_name": "SAM_TNUM"}, {"original_string": "private static final byte[] SAM_TNUM_BYTES = ByteArrayUtil.fromHex(SAM_TNUM_STR);", "modifier": "private static final", "type": "byte[]", "declarator": "SAM_TNUM_BYTES = ByteArrayUtil.fromHex(SAM_TNUM_STR)", "var_name": "SAM_TNUM_BYTES"}, {"original_string": "private static final int BALANCE = 0x445566;", "modifier": "private static final", "type": "int", "declarator": "BALANCE = 0x445566", "var_name": "BALANCE"}, {"original_string": "private static final int SV_TNUM = 0x7788;", "modifier": "private static final", "type": "int", "declarator": "SV_TNUM = 0x7788", "var_name": "SV_TNUM"}, {"original_string": "private static final byte[] SV_TNUM_BYTES = ByteArrayUtil.fromHex(SV_TNUM_STR);", "modifier": "private static final", "type": "byte[]", "declarator": "SV_TNUM_BYTES = ByteArrayUtil.fromHex(SV_TNUM_STR)", "var_name": "SV_TNUM_BYTES"}], "file": "java/component/keyple-calypso/src/test/java/org/eclipse/keyple/calypso/transaction/SvLoadLogRecordTest.java"}, "test_case": {"identifier": "svLoadLogRecord", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void svLoadLogRecord() {\n    byte[] svGetLoadData =\n        ByteArrayUtil.fromHex(\n            HEADER\n                + DATE_STR\n                + FREE1_STR\n                + KVC_STR\n                + FREE2_STR\n                + BALANCE_STR\n                + AMOUNT_STR\n                + TIME_STR\n                + SAMID_STR\n                + SAM_TNUM_STR\n                + SV_TNUM_STR);\n    SvLoadLogRecord svLoadLogRecord = new SvLoadLogRecord(svGetLoadData, HEADER.length() / 2);\n    assertThat(svLoadLogRecord.getAmount()).isEqualTo(AMOUNT);\n    assertThat(svLoadLogRecord.getBalance()).isEqualTo(BALANCE);\n    assertThat(svLoadLogRecord.getLoadDate()).isEqualTo(DATE);\n    assertThat(svLoadLogRecord.getLoadDateBytes()).isEqualTo(DATE_BYTES);\n    assertThat(svLoadLogRecord.getLoadTime()).isEqualTo(TIME);\n    assertThat(svLoadLogRecord.getLoadTimeBytes()).isEqualTo(TIME_BYTES);\n    assertThat(svLoadLogRecord.getLoadTime()).isEqualTo(TIME);\n    assertThat(svLoadLogRecord.getFreeByte()).isEqualTo(FREE);\n    assertThat(svLoadLogRecord.getFreeByteBytes()).isEqualTo(FREE_BYTES);\n    assertThat(svLoadLogRecord.getKvc()).isEqualTo(KVC);\n    assertThat(svLoadLogRecord.getSamId()).isEqualTo(SAMID);\n    assertThat(svLoadLogRecord.getSamIdBytes()).isEqualTo(SAMID_BYTES);\n    assertThat(svLoadLogRecord.getSamTNum()).isEqualTo(SAM_TNUM);\n    assertThat(svLoadLogRecord.getSamTNumBytes()).isEqualTo(SAM_TNUM_BYTES);\n    assertThat(svLoadLogRecord.getSvTNum()).isEqualTo(SV_TNUM);\n    assertThat(svLoadLogRecord.getSvTNumBytes()).isEqualTo(SV_TNUM_BYTES);\n    assertThat(svLoadLogRecord.toString()).contains(SAMID_STR);\n  }", "signature": "void svLoadLogRecord()", "full_signature": "@Test public void svLoadLogRecord()", "class_method_signature": "SvLoadLogRecordTest.svLoadLogRecord()", "testcase": true, "constructor": false, "invocations": ["fromHex", "length", "isEqualTo", "assertThat", "getAmount", "isEqualTo", "assertThat", "getBalance", "isEqualTo", "assertThat", "getLoadDate", "isEqualTo", "assertThat", "getLoadDateBytes", "isEqualTo", "assertThat", "getLoadTime", "isEqualTo", "assertThat", "getLoadTimeBytes", "isEqualTo", "assertThat", "getLoadTime", "isEqualTo", "assertThat", "getFreeByte", "isEqualTo", "assertThat", "getFreeByteBytes", "isEqualTo", "assertThat", "getKvc", "isEqualTo", "assertThat", "getSamId", "isEqualTo", "assertThat", "getSamIdBytes", "isEqualTo", "assertThat", "getSamTNum", "isEqualTo", "assertThat", "getSamTNumBytes", "isEqualTo", "assertThat", "getSvTNum", "isEqualTo", "assertThat", "getSvTNumBytes", "contains", "assertThat", "toString"]}, "focal_class": {"identifier": "SvLoadLogRecord", "superclass": "", "interfaces": "", "fields": [{"original_string": "final int offset;", "modifier": "final", "type": "int", "declarator": "offset", "var_name": "offset"}, {"original_string": "final byte[] poResponse;", "modifier": "final", "type": "byte[]", "declarator": "poResponse", "var_name": "poResponse"}], "methods": [{"identifier": "SvLoadLogRecord", "parameters": "(byte[] poResponse, int offset)", "modifiers": "public", "return": "", "signature": " SvLoadLogRecord(byte[] poResponse, int offset)", "full_signature": "public  SvLoadLogRecord(byte[] poResponse, int offset)", "class_method_signature": "SvLoadLogRecord.SvLoadLogRecord(byte[] poResponse, int offset)", "testcase": false, "constructor": true}, {"identifier": "getAmount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAmount()", "full_signature": "public int getAmount()", "class_method_signature": "SvLoadLogRecord.getAmount()", "testcase": false, "constructor": false}, {"identifier": "getBalance", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBalance()", "full_signature": "public int getBalance()", "class_method_signature": "SvLoadLogRecord.getBalance()", "testcase": false, "constructor": false}, {"identifier": "getLoadTime", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLoadTime()", "full_signature": "public int getLoadTime()", "class_method_signature": "SvLoadLogRecord.getLoadTime()", "testcase": false, "constructor": false}, {"identifier": "getLoadTimeBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getLoadTimeBytes()", "full_signature": "public byte[] getLoadTimeBytes()", "class_method_signature": "SvLoadLogRecord.getLoadTimeBytes()", "testcase": false, "constructor": false}, {"identifier": "getLoadDate", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLoadDate()", "full_signature": "public int getLoadDate()", "class_method_signature": "SvLoadLogRecord.getLoadDate()", "testcase": false, "constructor": false}, {"identifier": "getLoadDateBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getLoadDateBytes()", "full_signature": "public byte[] getLoadDateBytes()", "class_method_signature": "SvLoadLogRecord.getLoadDateBytes()", "testcase": false, "constructor": false}, {"identifier": "getFreeByte", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFreeByte()", "full_signature": "public String getFreeByte()", "class_method_signature": "SvLoadLogRecord.getFreeByte()", "testcase": false, "constructor": false}, {"identifier": "getFreeByteBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getFreeByteBytes()", "full_signature": "public byte[] getFreeByteBytes()", "class_method_signature": "SvLoadLogRecord.getFreeByteBytes()", "testcase": false, "constructor": false}, {"identifier": "getKvc", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte getKvc()", "full_signature": "public byte getKvc()", "class_method_signature": "SvLoadLogRecord.getKvc()", "testcase": false, "constructor": false}, {"identifier": "getSamId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSamId()", "full_signature": "public long getSamId()", "class_method_signature": "SvLoadLogRecord.getSamId()", "testcase": false, "constructor": false}, {"identifier": "getSamIdBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getSamIdBytes()", "full_signature": "public byte[] getSamIdBytes()", "class_method_signature": "SvLoadLogRecord.getSamIdBytes()", "testcase": false, "constructor": false}, {"identifier": "getSvTNum", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSvTNum()", "full_signature": "public int getSvTNum()", "class_method_signature": "SvLoadLogRecord.getSvTNum()", "testcase": false, "constructor": false}, {"identifier": "getSvTNumBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getSvTNumBytes()", "full_signature": "public byte[] getSvTNumBytes()", "class_method_signature": "SvLoadLogRecord.getSvTNumBytes()", "testcase": false, "constructor": false}, {"identifier": "getSamTNum", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSamTNum()", "full_signature": "public int getSamTNum()", "class_method_signature": "SvLoadLogRecord.getSamTNum()", "testcase": false, "constructor": false}, {"identifier": "getSamTNumBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getSamTNumBytes()", "full_signature": "public byte[] getSamTNumBytes()", "class_method_signature": "SvLoadLogRecord.getSamTNumBytes()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SvLoadLogRecord.toString()", "testcase": false, "constructor": false}], "file": "java/component/keyple-calypso/src/main/java/org/eclipse/keyple/calypso/transaction/SvLoadLogRecord.java"}, "focal_method": {"identifier": "SvLoadLogRecord", "parameters": "(byte[] poResponse, int offset)", "modifiers": "public", "return": "", "body": "public SvLoadLogRecord(byte[] poResponse, int offset) {\n    this.poResponse = poResponse;\n    this.offset = offset;\n  }", "signature": " SvLoadLogRecord(byte[] poResponse, int offset)", "full_signature": "public  SvLoadLogRecord(byte[] poResponse, int offset)", "class_method_signature": "SvLoadLogRecord.SvLoadLogRecord(byte[] poResponse, int offset)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 156416177, "url": "https://github.com/eclipse/keyple-java", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 10325, "license": "licensed"}}