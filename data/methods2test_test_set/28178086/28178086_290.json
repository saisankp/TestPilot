{"test_class": {"identifier": "LowerTriangularMatrixTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/maths/matrices/LowerTriangularMatrixTest.java"}, "test_case": {"identifier": "testlsolve", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testlsolve() {\n        Matrix M=Matrix.square(20);\n        M.randomize(0);\n        M.toLower();\n        DataBlock B0=new DataBlock(M.getColumnsCount());\n        B0.randomize(1);\n        DataBlock B1=B0.deepClone();\n        \n        LowerTriangularMatrix.lsolve(M, B0);\n        LowerTriangularMatrix.lsolve2(M, B1);\n        assertTrue(B0.distance(B1)<1e-9);\n    }", "signature": "void testlsolve()", "full_signature": "@Test public void testlsolve()", "class_method_signature": "LowerTriangularMatrixTest.testlsolve()", "testcase": true, "constructor": false, "invocations": ["square", "randomize", "toLower", "getColumnsCount", "randomize", "deepClone", "lsolve", "lsolve2", "assertTrue", "distance"]}, "focal_class": {"identifier": "LowerTriangularMatrix", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "inverse", "parameters": "(final Matrix L)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix inverse(final Matrix L)", "full_signature": "public static Matrix inverse(final Matrix L)", "class_method_signature": "LowerTriangularMatrix.inverse(final Matrix L)", "testcase": false, "constructor": false}, {"identifier": "lmul", "parameters": "(final Matrix L, final DataBlock left)", "modifiers": "public static", "return": "void", "signature": "void lmul(final Matrix L, final DataBlock left)", "full_signature": "public static void lmul(final Matrix L, final DataBlock left)", "class_method_signature": "LowerTriangularMatrix.lmul(final Matrix L, final DataBlock left)", "testcase": false, "constructor": false}, {"identifier": "lmul2", "parameters": "(final Matrix L, final DataBlock left)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void lmul2(final Matrix L, final DataBlock left)", "full_signature": "@Deprecated public static void lmul2(final Matrix L, final DataBlock left)", "class_method_signature": "LowerTriangularMatrix.lmul2(final Matrix L, final DataBlock left)", "testcase": false, "constructor": false}, {"identifier": "lmul", "parameters": "(final Matrix L, final double[] left)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void lmul(final Matrix L, final double[] left)", "full_signature": "@Deprecated public static void lmul(final Matrix L, final double[] left)", "class_method_signature": "LowerTriangularMatrix.lmul(final Matrix L, final double[] left)", "testcase": false, "constructor": false}, {"identifier": "lmul", "parameters": "(final Matrix L, final SubMatrix left)", "modifiers": "public static", "return": "void", "signature": "void lmul(final Matrix L, final SubMatrix left)", "full_signature": "public static void lmul(final Matrix L, final SubMatrix left)", "class_method_signature": "LowerTriangularMatrix.lmul(final Matrix L, final SubMatrix left)", "testcase": false, "constructor": false}, {"identifier": "lsolve", "parameters": "(final Matrix L, final DataBlock b)", "modifiers": "public static", "return": "void", "signature": "void lsolve(final Matrix L, final DataBlock b)", "full_signature": "public static void lsolve(final Matrix L, final DataBlock b)", "class_method_signature": "LowerTriangularMatrix.lsolve(final Matrix L, final DataBlock b)", "testcase": false, "constructor": false}, {"identifier": "lsolve2", "parameters": "(final Matrix L, final DataBlock b)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void lsolve2(final Matrix L, final DataBlock b)", "full_signature": "@Deprecated public static void lsolve2(final Matrix L, final DataBlock b)", "class_method_signature": "LowerTriangularMatrix.lsolve2(final Matrix L, final DataBlock b)", "testcase": false, "constructor": false}, {"identifier": "lsolve", "parameters": "(final Matrix L, final DataBlock b, double zero)", "modifiers": "public static", "return": "void", "signature": "void lsolve(final Matrix L, final DataBlock b, double zero)", "full_signature": "public static void lsolve(final Matrix L, final DataBlock b, double zero)", "class_method_signature": "LowerTriangularMatrix.lsolve(final Matrix L, final DataBlock b, double zero)", "testcase": false, "constructor": false}, {"identifier": "lsolve2", "parameters": "(final Matrix L, final DataBlock b, double zero)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void lsolve2(final Matrix L, final DataBlock b, double zero)", "full_signature": "@Deprecated public static void lsolve2(final Matrix L, final DataBlock b, double zero)", "class_method_signature": "LowerTriangularMatrix.lsolve2(final Matrix L, final DataBlock b, double zero)", "testcase": false, "constructor": false}, {"identifier": "lsolve", "parameters": "(final Matrix L, final double[] b)", "modifiers": "public static", "return": "void", "signature": "void lsolve(final Matrix L, final double[] b)", "full_signature": "public static void lsolve(final Matrix L, final double[] b)", "class_method_signature": "LowerTriangularMatrix.lsolve(final Matrix L, final double[] b)", "testcase": false, "constructor": false}, {"identifier": "lsolve", "parameters": "(final Matrix L, final SubMatrix B, double zero)", "modifiers": "public static", "return": "void", "signature": "void lsolve(final Matrix L, final SubMatrix B, double zero)", "full_signature": "public static void lsolve(final Matrix L, final SubMatrix B, double zero)", "class_method_signature": "LowerTriangularMatrix.lsolve(final Matrix L, final SubMatrix B, double zero)", "testcase": false, "constructor": false}, {"identifier": "lsolve", "parameters": "(final Matrix L, final SubMatrix B)", "modifiers": "public static", "return": "void", "signature": "void lsolve(final Matrix L, final SubMatrix B)", "full_signature": "public static void lsolve(final Matrix L, final SubMatrix B)", "class_method_signature": "LowerTriangularMatrix.lsolve(final Matrix L, final SubMatrix B)", "testcase": false, "constructor": false}, {"identifier": "rmul2", "parameters": "(final Matrix L, final DataBlock r)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void rmul2(final Matrix L, final DataBlock r)", "full_signature": "@Deprecated public static void rmul2(final Matrix L, final DataBlock r)", "class_method_signature": "LowerTriangularMatrix.rmul2(final Matrix L, final DataBlock r)", "testcase": false, "constructor": false}, {"identifier": "rmul", "parameters": "(final Matrix L, final DataBlock r)", "modifiers": "public static", "return": "void", "signature": "void rmul(final Matrix L, final DataBlock r)", "full_signature": "public static void rmul(final Matrix L, final DataBlock r)", "class_method_signature": "LowerTriangularMatrix.rmul(final Matrix L, final DataBlock r)", "testcase": false, "constructor": false}, {"identifier": "rmul", "parameters": "(final Matrix L, final double[] r)", "modifiers": "public static", "return": "void", "signature": "void rmul(final Matrix L, final double[] r)", "full_signature": "public static void rmul(final Matrix L, final double[] r)", "class_method_signature": "LowerTriangularMatrix.rmul(final Matrix L, final double[] r)", "testcase": false, "constructor": false}, {"identifier": "rmul", "parameters": "(final Matrix L, final SubMatrix R)", "modifiers": "public static", "return": "void", "signature": "void rmul(final Matrix L, final SubMatrix R)", "full_signature": "public static void rmul(final Matrix L, final SubMatrix R)", "class_method_signature": "LowerTriangularMatrix.rmul(final Matrix L, final SubMatrix R)", "testcase": false, "constructor": false}, {"identifier": "rsolve2", "parameters": "(final Matrix L, final DataBlock b, double zero)", "modifiers": "public static", "return": "void", "signature": "void rsolve2(final Matrix L, final DataBlock b, double zero)", "full_signature": "public static void rsolve2(final Matrix L, final DataBlock b, double zero)", "class_method_signature": "LowerTriangularMatrix.rsolve2(final Matrix L, final DataBlock b, double zero)", "testcase": false, "constructor": false}, {"identifier": "rsolve", "parameters": "(final Matrix L, final DataBlock b)", "modifiers": "public static", "return": "void", "signature": "void rsolve(final Matrix L, final DataBlock b)", "full_signature": "public static void rsolve(final Matrix L, final DataBlock b)", "class_method_signature": "LowerTriangularMatrix.rsolve(final Matrix L, final DataBlock b)", "testcase": false, "constructor": false}, {"identifier": "rsolve2", "parameters": "(final Matrix L, final DataBlock b)", "modifiers": "public static", "return": "void", "signature": "void rsolve2(final Matrix L, final DataBlock b)", "full_signature": "public static void rsolve2(final Matrix L, final DataBlock b)", "class_method_signature": "LowerTriangularMatrix.rsolve2(final Matrix L, final DataBlock b)", "testcase": false, "constructor": false}, {"identifier": "rsolve", "parameters": "(final Matrix L, final DataBlock b, double zero)", "modifiers": "public static", "return": "void", "signature": "void rsolve(final Matrix L, final DataBlock b, double zero)", "full_signature": "public static void rsolve(final Matrix L, final DataBlock b, double zero)", "class_method_signature": "LowerTriangularMatrix.rsolve(final Matrix L, final DataBlock b, double zero)", "testcase": false, "constructor": false}, {"identifier": "rsolve", "parameters": "(final Matrix lower, final double[] b)", "modifiers": "public static", "return": "void", "signature": "void rsolve(final Matrix lower, final double[] b)", "full_signature": "public static void rsolve(final Matrix lower, final double[] b)", "class_method_signature": "LowerTriangularMatrix.rsolve(final Matrix lower, final double[] b)", "testcase": false, "constructor": false}, {"identifier": "rsolve", "parameters": "(final Matrix L, final SubMatrix B)", "modifiers": "public static", "return": "void", "signature": "void rsolve(final Matrix L, final SubMatrix B)", "full_signature": "public static void rsolve(final Matrix L, final SubMatrix B)", "class_method_signature": "LowerTriangularMatrix.rsolve(final Matrix L, final SubMatrix B)", "testcase": false, "constructor": false}, {"identifier": "rsolve", "parameters": "(final Matrix L, final SubMatrix B, final double zero)", "modifiers": "public static", "return": "void", "signature": "void rsolve(final Matrix L, final SubMatrix B, final double zero)", "full_signature": "public static void rsolve(final Matrix L, final SubMatrix B, final double zero)", "class_method_signature": "LowerTriangularMatrix.rsolve(final Matrix L, final SubMatrix B, final double zero)", "testcase": false, "constructor": false}, {"identifier": "addXaXt", "parameters": "(Matrix S, double a, DataBlock x)", "modifiers": "public static", "return": "void", "signature": "void addXaXt(Matrix S, double a, DataBlock x)", "full_signature": "public static void addXaXt(Matrix S, double a, DataBlock x)", "class_method_signature": "LowerTriangularMatrix.addXaXt(Matrix S, double a, DataBlock x)", "testcase": false, "constructor": false}, {"identifier": "LowerTriangularMatrix", "parameters": "()", "modifiers": "private", "return": "", "signature": " LowerTriangularMatrix()", "full_signature": "private  LowerTriangularMatrix()", "class_method_signature": "LowerTriangularMatrix.LowerTriangularMatrix()", "testcase": false, "constructor": true}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/maths/matrices/LowerTriangularMatrix.java"}, "focal_method": {"identifier": "lsolve", "parameters": "(final Matrix L, final DataBlock b)", "modifiers": "public static", "return": "void", "body": "public static void lsolve(final Matrix L, final DataBlock b)\n            throws MatrixException {\n        lsolve(L, b, 0);\n    }", "signature": "void lsolve(final Matrix L, final DataBlock b)", "full_signature": "public static void lsolve(final Matrix L, final DataBlock b)", "class_method_signature": "LowerTriangularMatrix.lsolve(final Matrix L, final DataBlock b)", "testcase": false, "constructor": false, "invocations": ["lsolve"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}