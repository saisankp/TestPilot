{"test_class": {"identifier": "WrappedPropertySourceTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/spi-support/src/test/java/org/apache/tamaya/spisupport/propertysource/WrappedPropertySourceTest.java"}, "test_case": {"identifier": "testGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGet() {\n        WrappedPropertySource instance = WrappedPropertySource.of(new MockedWrappablePropertySource());\n        PropertyValue result = instance.get(\"thisKey\");\n        assertThat(result.getValue()).isEqualTo(\"valueFromMockedWrappablePropertySource\");\n    }", "signature": "void testGet()", "full_signature": "@Test public void testGet()", "class_method_signature": "WrappedPropertySourceTest.testGet()", "testcase": true, "constructor": false, "invocations": ["of", "get", "isEqualTo", "assertThat", "getValue"]}, "focal_class": {"identifier": "WrappedPropertySource", "superclass": "", "interfaces": "implements PropertySource", "fields": [{"original_string": "private Integer ordinal;", "modifier": "private", "type": "Integer", "declarator": "ordinal", "var_name": "ordinal"}, {"original_string": "private PropertySource delegate;", "modifier": "private", "type": "PropertySource", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private long loaded = System.currentTimeMillis();", "modifier": "private", "type": "long", "declarator": "loaded = System.currentTimeMillis()", "var_name": "loaded"}], "methods": [{"identifier": "WrappedPropertySource", "parameters": "(PropertySource delegate)", "modifiers": "private", "return": "", "signature": " WrappedPropertySource(PropertySource delegate)", "full_signature": "private  WrappedPropertySource(PropertySource delegate)", "class_method_signature": "WrappedPropertySource.WrappedPropertySource(PropertySource delegate)", "testcase": false, "constructor": true}, {"identifier": "WrappedPropertySource", "parameters": "(PropertySource delegate, Integer ordinal)", "modifiers": "private", "return": "", "signature": " WrappedPropertySource(PropertySource delegate, Integer ordinal)", "full_signature": "private  WrappedPropertySource(PropertySource delegate, Integer ordinal)", "class_method_signature": "WrappedPropertySource.WrappedPropertySource(PropertySource delegate, Integer ordinal)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(PropertySource ps)", "modifiers": "public static", "return": "WrappedPropertySource", "signature": "WrappedPropertySource of(PropertySource ps)", "full_signature": "public static WrappedPropertySource of(PropertySource ps)", "class_method_signature": "WrappedPropertySource.of(PropertySource ps)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(PropertySource ps, Integer ordinal)", "modifiers": "public static", "return": "WrappedPropertySource", "signature": "WrappedPropertySource of(PropertySource ps, Integer ordinal)", "full_signature": "public static WrappedPropertySource of(PropertySource ps, Integer ordinal)", "class_method_signature": "WrappedPropertySource.of(PropertySource ps, Integer ordinal)", "testcase": false, "constructor": false}, {"identifier": "getOrdinal", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getOrdinal()", "full_signature": "public int getOrdinal()", "class_method_signature": "WrappedPropertySource.getOrdinal()", "testcase": false, "constructor": false}, {"identifier": "setOrdinal", "parameters": "(Integer ordinal)", "modifiers": "public", "return": "void", "signature": "void setOrdinal(Integer ordinal)", "full_signature": "public void setOrdinal(Integer ordinal)", "class_method_signature": "WrappedPropertySource.setOrdinal(Integer ordinal)", "testcase": false, "constructor": false}, {"identifier": "setDelegate", "parameters": "(PropertySource delegate)", "modifiers": "public", "return": "void", "signature": "void setDelegate(PropertySource delegate)", "full_signature": "public void setDelegate(PropertySource delegate)", "class_method_signature": "WrappedPropertySource.setDelegate(PropertySource delegate)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "WrappedPropertySource.getName()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "@Override public", "return": "PropertyValue", "signature": "PropertyValue get(String key)", "full_signature": "@Override public PropertyValue get(String key)", "class_method_signature": "WrappedPropertySource.get(String key)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, PropertyValue>", "signature": "Map<String, PropertyValue> getProperties()", "full_signature": "@Override public Map<String, PropertyValue> getProperties()", "class_method_signature": "WrappedPropertySource.getProperties()", "testcase": false, "constructor": false}, {"identifier": "isScannable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isScannable()", "full_signature": "@Override public boolean isScannable()", "class_method_signature": "WrappedPropertySource.isScannable()", "testcase": false, "constructor": false}, {"identifier": "getChangeSupport", "parameters": "()", "modifiers": "@Override public", "return": "ChangeSupport", "signature": "ChangeSupport getChangeSupport()", "full_signature": "@Override public ChangeSupport getChangeSupport()", "class_method_signature": "WrappedPropertySource.getChangeSupport()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getVersion()", "full_signature": "@Override public String getVersion()", "class_method_signature": "WrappedPropertySource.getVersion()", "testcase": false, "constructor": false}, {"identifier": "addChangeListener", "parameters": "(BiConsumer<Set<String>, PropertySource> l)", "modifiers": "@Override public", "return": "void", "signature": "void addChangeListener(BiConsumer<Set<String>, PropertySource> l)", "full_signature": "@Override public void addChangeListener(BiConsumer<Set<String>, PropertySource> l)", "class_method_signature": "WrappedPropertySource.addChangeListener(BiConsumer<Set<String>, PropertySource> l)", "testcase": false, "constructor": false}, {"identifier": "removeChangeListener", "parameters": "(BiConsumer<Set<String>, PropertySource> l)", "modifiers": "@Override public", "return": "void", "signature": "void removeChangeListener(BiConsumer<Set<String>, PropertySource> l)", "full_signature": "@Override public void removeChangeListener(BiConsumer<Set<String>, PropertySource> l)", "class_method_signature": "WrappedPropertySource.removeChangeListener(BiConsumer<Set<String>, PropertySource> l)", "testcase": false, "constructor": false}, {"identifier": "removeAllChangeListeners", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void removeAllChangeListeners()", "full_signature": "@Override public void removeAllChangeListeners()", "class_method_signature": "WrappedPropertySource.removeAllChangeListeners()", "testcase": false, "constructor": false}, {"identifier": "getDelegate", "parameters": "()", "modifiers": "public", "return": "PropertySource", "signature": "PropertySource getDelegate()", "full_signature": "public PropertySource getDelegate()", "class_method_signature": "WrappedPropertySource.getDelegate()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "WrappedPropertySource.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "WrappedPropertySource.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "WrappedPropertySource.toString()", "testcase": false, "constructor": false}], "file": "code/spi-support/src/main/java/org/apache/tamaya/spisupport/propertysource/WrappedPropertySource.java"}, "focal_method": {"identifier": "get", "parameters": "(String key)", "modifiers": "@Override public", "return": "PropertyValue", "body": "@Override\n    public PropertyValue get(String key) {\n        return delegate.get(key);\n    }", "signature": "PropertyValue get(String key)", "full_signature": "@Override public PropertyValue get(String key)", "class_method_signature": "WrappedPropertySource.get(String key)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 26951044, "url": "https://github.com/apache/incubator-tamaya", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 44, "size": 7630, "license": "licensed"}}