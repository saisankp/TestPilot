{"test_class": {"identifier": "IncomingUrlServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FileDownloaderService downloaderService;", "modifier": "private", "type": "FileDownloaderService", "declarator": "downloaderService", "var_name": "downloaderService"}, {"original_string": "private RobotsRepository robotsRepository;", "modifier": "private", "type": "RobotsRepository", "declarator": "robotsRepository", "var_name": "robotsRepository"}, {"original_string": "private IncomingUrlService consumerService;", "modifier": "private", "type": "IncomingUrlService", "declarator": "consumerService", "var_name": "consumerService"}, {"original_string": "private RedisUrlRepository redisUrlRepository;", "modifier": "private", "type": "RedisUrlRepository", "declarator": "redisUrlRepository", "var_name": "redisUrlRepository"}], "file": "downloader/src/test/java/com/fooock/robotstxt/downloader/service/IncomingUrlServiceTest.java"}, "test_case": {"identifier": "testUrlExistsAndNeedsToBeUpdated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUrlExistsAndNeedsToBeUpdated() throws Exception {\n        String url = \"http://test.example.com/hello\";\n        Entry entry = createEntry(url, 2880); // two days\n        when(robotsRepository.findByHost(anyString())).thenReturn(entry);\n        when(redisUrlRepository.exists(anyString())).thenReturn(false);\n\n        consumerService.receiveUrl(url);\n\n        String baseHost = DomainUtils.base(new URI(url));\n        String robotUrl = String.format(\"%s/robots.txt\", baseHost);\n        verify(downloaderService, times(1)).download(eq(baseHost), eq(robotUrl));\n    }", "signature": "void testUrlExistsAndNeedsToBeUpdated()", "full_signature": "@Test public void testUrlExistsAndNeedsToBeUpdated()", "class_method_signature": "IncomingUrlServiceTest.testUrlExistsAndNeedsToBeUpdated()", "testcase": true, "constructor": false, "invocations": ["createEntry", "thenReturn", "when", "findByHost", "anyString", "thenReturn", "when", "exists", "anyString", "receiveUrl", "base", "format", "download", "verify", "times", "eq", "eq"]}, "focal_class": {"identifier": "IncomingUrlService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final RobotsRepository robotsRepository;", "modifier": "private final", "type": "RobotsRepository", "declarator": "robotsRepository", "var_name": "robotsRepository"}, {"original_string": "private final FileDownloaderService downloaderService;", "modifier": "private final", "type": "FileDownloaderService", "declarator": "downloaderService", "var_name": "downloaderService"}, {"original_string": "private final RedisUrlRepository redisUrlRepository;", "modifier": "private final", "type": "RedisUrlRepository", "declarator": "redisUrlRepository", "var_name": "redisUrlRepository"}], "methods": [{"identifier": "receiveUrl", "parameters": "(String url)", "modifiers": "public", "return": "void", "signature": "void receiveUrl(String url)", "full_signature": "public void receiveUrl(String url)", "class_method_signature": "IncomingUrlService.receiveUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "checkHost", "parameters": "(String host)", "modifiers": "private", "return": "void", "signature": "void checkHost(String host)", "full_signature": "private void checkHost(String host)", "class_method_signature": "IncomingUrlService.checkHost(String host)", "testcase": false, "constructor": false}, {"identifier": "downloadRules", "parameters": "(String host)", "modifiers": "private", "return": "void", "signature": "void downloadRules(String host)", "full_signature": "private void downloadRules(String host)", "class_method_signature": "IncomingUrlService.downloadRules(String host)", "testcase": false, "constructor": false}], "file": "downloader/src/main/java/com/fooock/robotstxt/downloader/service/IncomingUrlService.java"}, "focal_method": {"identifier": "receiveUrl", "parameters": "(String url)", "modifiers": "public", "return": "void", "body": "public void receiveUrl(String url) {\n        // Check if url is a valid http or https resource\n        if (!UrlUtils.isValid(url)) {\n            log.error(\"Url {} is not valid\", url);\n            return;\n        }\n        log.info(\"Received url {}, prepared to fetch robots.txt file for it\", url);\n        try {\n            // Extract base url to create robots.txt url\n            URI uri = new URI(url);\n            String baseHost = DomainUtils.base(uri);\n\n            log.debug(\"Validated url to base host: {}\", baseHost);\n            checkHost(baseHost);\n\n        } catch (URISyntaxException e) {\n            log.error(\"Can't create URI using url {}\", url, e);\n        }\n    }", "signature": "void receiveUrl(String url)", "full_signature": "public void receiveUrl(String url)", "class_method_signature": "IncomingUrlService.receiveUrl(String url)", "testcase": false, "constructor": false, "invocations": ["isValid", "error", "info", "base", "debug", "checkHost", "error"]}, "repository": {"repo_id": 192201753, "url": "https://github.com/fooock/robots.txt", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 2005, "license": "licensed"}}