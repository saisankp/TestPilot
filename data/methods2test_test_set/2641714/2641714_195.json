{"test_class": {"identifier": "TilesDecorationFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FilterConfig config;", "modifier": "private", "type": "FilterConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private ServletContext servletContext;", "modifier": "private", "type": "ServletContext", "declarator": "servletContext", "var_name": "servletContext"}, {"original_string": "private TilesDecorationFilter filter;", "modifier": "private", "type": "TilesDecorationFilter", "declarator": "filter", "var_name": "filter"}], "file": "tiles-servlet/src/test/java/org/apache/tiles/web/util/TilesDecorationFilterTest.java"}, "test_case": {"identifier": "testDoFilter", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testDoFilter() throws IOException, ServletException {\n        HttpServletRequest request = createMock(HttpServletRequest.class);\n        HttpServletResponse response = createMock(HttpServletResponse.class);\n        FilterChain chain = createMock(FilterChain.class);\n        ApplicationContext applicationContext = createMock(ApplicationContext.class);\n        Map<String, Object> applicationScope = createMock(Map.class);\n        TilesContainer container = createMock(TilesContainer.class);\n        AttributeContext attributeContext = createMock(AttributeContext.class);\n\n        expect(request.getAttribute(\"org.apache.tiles.decoration.PREVENT:tokenKey\")).andReturn(null);\n        expect(servletContext.getAttribute(ApplicationAccess.APPLICATION_CONTEXT_ATTRIBUTE))\n                .andReturn(applicationContext);\n        expect(applicationContext.getApplicationScope()).andReturn(applicationScope);\n        expect(applicationScope.get(\"key\")).andReturn(container);\n        expect(container.getAttributeContext(isA(ServletRequest.class))).andReturn(attributeContext);\n        request.setAttribute(\"org.apache.tiles.decoration.PREVENT:tokenKey\", true);\n        expect(request.getAttribute(\"javax.servlet.include.servlet_path\")).andReturn(null);\n        expect(request.getServletPath()).andReturn(\"/tiles\");\n        container.render(eq(\"definitionKey\"), isA(ServletRequest.class));\n        chain.doFilter(request, response);\n\n        replay(servletContext, request, response, chain, applicationContext,\n                applicationScope, container, attributeContext);\n        filter.doFilter(request, response, chain);\n        verify(request, response, chain, applicationContext, applicationScope, container, attributeContext);\n    }", "signature": "void testDoFilter()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testDoFilter()", "class_method_signature": "TilesDecorationFilterTest.testDoFilter()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "createMock", "createMock", "createMock", "createMock", "andReturn", "expect", "getAttribute", "andReturn", "expect", "getAttribute", "andReturn", "expect", "getApplicationScope", "andReturn", "expect", "get", "andReturn", "expect", "getAttributeContext", "isA", "setAttribute", "andReturn", "expect", "getAttribute", "andReturn", "expect", "getServletPath", "render", "eq", "isA", "doFilter", "replay", "doFilter", "verify"]}, "focal_class": {"identifier": "TilesDecorationFilter", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "public static final String CONTAINER_KEY_INIT_PARAMETER =\n        \"org.apache.tiles.web.util.TilesDecorationFilter.CONTAINER_KEY\";", "modifier": "public static final", "type": "String", "declarator": "CONTAINER_KEY_INIT_PARAMETER =\n        \"org.apache.tiles.web.util.TilesDecorationFilter.CONTAINER_KEY\"", "var_name": "CONTAINER_KEY_INIT_PARAMETER"}, {"original_string": "private Logger log = LoggerFactory.getLogger(TilesDecorationFilter.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TilesDecorationFilter.class)", "var_name": "log"}, {"original_string": "private FilterConfig filterConfig;", "modifier": "private", "type": "FilterConfig", "declarator": "filterConfig", "var_name": "filterConfig"}, {"original_string": "private String containerKey;", "modifier": "private", "type": "String", "declarator": "containerKey", "var_name": "containerKey"}, {"original_string": "private String definitionAttributeName = \"content\";", "modifier": "private", "type": "String", "declarator": "definitionAttributeName = \"content\"", "var_name": "definitionAttributeName"}, {"original_string": "private String definitionName = \"layout\";", "modifier": "private", "type": "String", "declarator": "definitionName = \"layout\"", "var_name": "definitionName"}, {"original_string": "private String preventDecorationToken;", "modifier": "private", "type": "String", "declarator": "preventDecorationToken", "var_name": "preventDecorationToken"}, {"original_string": "private Map<String, String> alternateDefinitions;", "modifier": "private", "type": "Map<String, String>", "declarator": "alternateDefinitions", "var_name": "alternateDefinitions"}, {"original_string": "private AttributeContextMutator mutator = null;", "modifier": "private", "type": "AttributeContextMutator", "declarator": "mutator = null", "var_name": "mutator"}, {"original_string": "private ServletContext servletContext;", "modifier": "private", "type": "ServletContext", "declarator": "servletContext", "var_name": "servletContext"}], "methods": [{"identifier": "init", "parameters": "(FilterConfig config)", "modifiers": "public", "return": "void", "signature": "void init(FilterConfig config)", "full_signature": "public void init(FilterConfig config)", "class_method_signature": "TilesDecorationFilter.init(FilterConfig config)", "testcase": false, "constructor": false}, {"identifier": "parseAlternateDefinitions", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "Map<String, String>", "signature": "Map<String, String> parseAlternateDefinitions()", "full_signature": "@SuppressWarnings(\"unchecked\") protected Map<String, String> parseAlternateDefinitions()", "class_method_signature": "TilesDecorationFilter.parseAlternateDefinitions()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "TilesDecorationFilter.destroy()", "testcase": false, "constructor": false}, {"identifier": "doFilter", "parameters": "(javax.servlet.ServletRequest req, ServletResponse res, FilterChain filterChain)", "modifiers": "public", "return": "void", "signature": "void doFilter(javax.servlet.ServletRequest req, ServletResponse res, FilterChain filterChain)", "full_signature": "public void doFilter(javax.servlet.ServletRequest req, ServletResponse res, FilterChain filterChain)", "class_method_signature": "TilesDecorationFilter.doFilter(javax.servlet.ServletRequest req, ServletResponse res, FilterChain filterChain)", "testcase": false, "constructor": false}, {"identifier": "getDefinitionForRequest", "parameters": "(javax.servlet.ServletRequest request)", "modifiers": "private", "return": "String", "signature": "String getDefinitionForRequest(javax.servlet.ServletRequest request)", "full_signature": "private String getDefinitionForRequest(javax.servlet.ServletRequest request)", "class_method_signature": "TilesDecorationFilter.getDefinitionForRequest(javax.servlet.ServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getRequestBase", "parameters": "(javax.servlet.ServletRequest request)", "modifiers": "private", "return": "String", "signature": "String getRequestBase(javax.servlet.ServletRequest request)", "full_signature": "private String getRequestBase(javax.servlet.ServletRequest request)", "class_method_signature": "TilesDecorationFilter.getRequestBase(javax.servlet.ServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "isPreventTokenPresent", "parameters": "(javax.servlet.ServletRequest request)", "modifiers": "private", "return": "boolean", "signature": "boolean isPreventTokenPresent(javax.servlet.ServletRequest request)", "full_signature": "private boolean isPreventTokenPresent(javax.servlet.ServletRequest request)", "class_method_signature": "TilesDecorationFilter.isPreventTokenPresent(javax.servlet.ServletRequest request)", "testcase": false, "constructor": false}], "file": "tiles-servlet/src/main/java/org/apache/tiles/web/util/TilesDecorationFilter.java"}, "focal_method": {"identifier": "doFilter", "parameters": "(javax.servlet.ServletRequest req, ServletResponse res, FilterChain filterChain)", "modifiers": "public", "return": "void", "body": "public void doFilter(javax.servlet.ServletRequest req, ServletResponse res, FilterChain filterChain)\n            throws IOException, ServletException {\n        // If the request contains the prevent token, we must not reapply the definition.\n        // This is used to ensure that filters mapped to wild cards do not infinately\n        // loop.\n        if (!isPreventTokenPresent(req)) {\n            ApplicationContext applicationContext = org.apache.tiles.request.servlet.ServletUtil\n                    .getApplicationContext(servletContext);\n            Request request = new ServletRequest(applicationContext,\n                    (HttpServletRequest) req, (HttpServletResponse) res);\n            TilesContainer container = TilesAccess.getContainer(applicationContext,\n                    containerKey);\n            mutator.mutate(container.getAttributeContext(request), req);\n            if (preventDecorationToken != null) {\n                req.setAttribute(preventDecorationToken, Boolean.TRUE);\n            }\n            String definitionName = getDefinitionForRequest(req);\n            container.render(definitionName, request);\n        }\n        filterChain.doFilter(req, res);\n    }", "signature": "void doFilter(javax.servlet.ServletRequest req, ServletResponse res, FilterChain filterChain)", "full_signature": "public void doFilter(javax.servlet.ServletRequest req, ServletResponse res, FilterChain filterChain)", "class_method_signature": "TilesDecorationFilter.doFilter(javax.servlet.ServletRequest req, ServletResponse res, FilterChain filterChain)", "testcase": false, "constructor": false, "invocations": ["isPreventTokenPresent", "getApplicationContext", "getContainer", "mutate", "getAttributeContext", "setAttribute", "getDefinitionForRequest", "render", "doFilter"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}