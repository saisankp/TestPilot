{"test_class": {"identifier": "ClassHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/ClassHelperTest.java"}, "test_case": {"identifier": "testForName2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testForName2() throws Exception {\n        assertThat(forName(\"byte\") == byte.class, is(true));\n        assertThat(forName(\"java.lang.String[]\") == String[].class, is(true));\n        assertThat(forName(\"[Ljava.lang.String;\") == String[].class, is(true));\n    }", "signature": "void testForName2()", "full_signature": "@Test public void testForName2()", "class_method_signature": "ClassHelperTest.testForName2()", "testcase": true, "constructor": false, "invocations": ["assertThat", "forName", "is", "assertThat", "forName", "is", "assertThat", "forName", "is"]}, "focal_class": {"identifier": "ClassHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String ARRAY_SUFFIX = \"[]\";", "modifier": "public static final", "type": "String", "declarator": "ARRAY_SUFFIX = \"[]\"", "var_name": "ARRAY_SUFFIX"}, {"original_string": "private static final String INTERNAL_ARRAY_PREFIX = \"[L\";", "modifier": "private static final", "type": "String", "declarator": "INTERNAL_ARRAY_PREFIX = \"[L\"", "var_name": "INTERNAL_ARRAY_PREFIX"}, {"original_string": "private static final Map<String, Class<?>> primitiveTypeNameMap = new HashMap<String, Class<?>>(16);", "modifier": "private static final", "type": "Map<String, Class<?>>", "declarator": "primitiveTypeNameMap = new HashMap<String, Class<?>>(16)", "var_name": "primitiveTypeNameMap"}, {"original_string": "private static final Map<Class<?>, Class<?>> primitiveWrapperTypeMap = new HashMap<Class<?>, Class<?>>(8);", "modifier": "private static final", "type": "Map<Class<?>, Class<?>>", "declarator": "primitiveWrapperTypeMap = new HashMap<Class<?>, Class<?>>(8)", "var_name": "primitiveWrapperTypeMap"}], "methods": [{"identifier": "forNameWithThreadContextClassLoader", "parameters": "(String name)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> forNameWithThreadContextClassLoader(String name)", "full_signature": "public static Class<?> forNameWithThreadContextClassLoader(String name)", "class_method_signature": "ClassHelper.forNameWithThreadContextClassLoader(String name)", "testcase": false, "constructor": false}, {"identifier": "forNameWithCallerClassLoader", "parameters": "(String name, Class<?> caller)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> forNameWithCallerClassLoader(String name, Class<?> caller)", "full_signature": "public static Class<?> forNameWithCallerClassLoader(String name, Class<?> caller)", "class_method_signature": "ClassHelper.forNameWithCallerClassLoader(String name, Class<?> caller)", "testcase": false, "constructor": false}, {"identifier": "getCallerClassLoader", "parameters": "(Class<?> caller)", "modifiers": "public static", "return": "ClassLoader", "signature": "ClassLoader getCallerClassLoader(Class<?> caller)", "full_signature": "public static ClassLoader getCallerClassLoader(Class<?> caller)", "class_method_signature": "ClassHelper.getCallerClassLoader(Class<?> caller)", "testcase": false, "constructor": false}, {"identifier": "getClassLoader", "parameters": "(Class<?> cls)", "modifiers": "public static", "return": "ClassLoader", "signature": "ClassLoader getClassLoader(Class<?> cls)", "full_signature": "public static ClassLoader getClassLoader(Class<?> cls)", "class_method_signature": "ClassHelper.getClassLoader(Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "getClassLoader", "parameters": "()", "modifiers": "public static", "return": "ClassLoader", "signature": "ClassLoader getClassLoader()", "full_signature": "public static ClassLoader getClassLoader()", "class_method_signature": "ClassHelper.getClassLoader()", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String name)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> forName(String name)", "full_signature": "public static Class<?> forName(String name)", "class_method_signature": "ClassHelper.forName(String name)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String name, ClassLoader classLoader)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> forName(String name, ClassLoader classLoader)", "full_signature": "public static Class<?> forName(String name, ClassLoader classLoader)", "class_method_signature": "ClassHelper.forName(String name, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "resolvePrimitiveClassName", "parameters": "(String name)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> resolvePrimitiveClassName(String name)", "full_signature": "public static Class<?> resolvePrimitiveClassName(String name)", "class_method_signature": "ClassHelper.resolvePrimitiveClassName(String name)", "testcase": false, "constructor": false}, {"identifier": "toShortString", "parameters": "(Object obj)", "modifiers": "public static", "return": "String", "signature": "String toShortString(Object obj)", "full_signature": "public static String toShortString(Object obj)", "class_method_signature": "ClassHelper.toShortString(Object obj)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/ClassHelper.java"}, "focal_method": {"identifier": "forName", "parameters": "(String name)", "modifiers": "public static", "return": "Class<?>", "body": "public static Class<?> forName(String name) throws ClassNotFoundException {\n        return forName(name, getClassLoader());\n    }", "signature": "Class<?> forName(String name)", "full_signature": "public static Class<?> forName(String name)", "class_method_signature": "ClassHelper.forName(String name)", "testcase": false, "constructor": false, "invocations": ["forName", "getClassLoader"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}