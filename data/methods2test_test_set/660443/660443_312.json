{"test_class": {"identifier": "DeduceBondSystemToolTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private static DeduceBondSystemTool dbst;", "modifier": "private static", "type": "DeduceBondSystemTool", "declarator": "dbst", "var_name": "dbst"}], "file": "legacy/src/test/java/org/openscience/cdk/smiles/DeduceBondSystemToolTest.java"}, "test_case": {"identifier": "testPyrrole", "parameters": "()", "modifiers": "@Test(timeout = 1000) public", "return": "void", "body": "@Test(timeout = 1000)\n    public void testPyrrole() throws Exception {\n        String smiles = \"c2ccc3n([H])c1ccccc1c3(c2)\";\n        SmilesParser smilesParser = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        smilesParser.kekulise(false);\n        IAtomContainer molecule = smilesParser.parseSmiles(smiles);\n        AtomContainerManipulator.setSingleOrDoubleFlags(molecule);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n\n        molecule = dbst.fixAromaticBondOrders(molecule);\n        Assert.assertNotNull(molecule);\n\n        molecule = AtomContainerManipulator.removeHydrogens(molecule);\n        int doubleBondCount = 0;\n        for (int i = 0; i < molecule.getBondCount(); i++) {\n            IBond bond = molecule.getBond(i);\n            Assert.assertTrue(bond.getFlag(CDKConstants.ISAROMATIC));\n            if (bond.getOrder() == Order.DOUBLE) doubleBondCount++;\n        }\n        Assert.assertEquals(6, doubleBondCount);\n    }", "signature": "void testPyrrole()", "full_signature": "@Test(timeout = 1000) public void testPyrrole()", "class_method_signature": "DeduceBondSystemToolTest.testPyrrole()", "testcase": true, "constructor": false, "invocations": ["getInstance", "kekulise", "parseSmiles", "setSingleOrDoubleFlags", "percieveAtomTypesAndConfigureAtoms", "fixAromaticBondOrders", "assertNotNull", "removeHydrogens", "getBondCount", "getBond", "assertTrue", "getFlag", "getOrder", "assertEquals"]}, "focal_class": {"identifier": "DeduceBondSystemTool", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AllRingsFinder      allRingsFinder;", "modifier": "private", "type": "AllRingsFinder", "declarator": "allRingsFinder", "var_name": "allRingsFinder"}, {"original_string": "private static ILoggingTool logger      = LoggingToolFactory.createLoggingTool(DeduceBondSystemTool.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger      = LoggingToolFactory.createLoggingTool(DeduceBondSystemTool.class)", "var_name": "logger"}, {"original_string": "private List<Integer[]>     listOfRings = null;", "modifier": "private", "type": "List<Integer[]>", "declarator": "listOfRings = null", "var_name": "listOfRings"}, {"original_string": "private boolean             interrupted;", "modifier": "private", "type": "boolean", "declarator": "interrupted", "var_name": "interrupted"}], "methods": [{"identifier": "DeduceBondSystemTool", "parameters": "()", "modifiers": "public", "return": "", "signature": " DeduceBondSystemTool()", "full_signature": "public  DeduceBondSystemTool()", "class_method_signature": "DeduceBondSystemTool.DeduceBondSystemTool()", "testcase": false, "constructor": true}, {"identifier": "DeduceBondSystemTool", "parameters": "(AllRingsFinder ringFinder)", "modifiers": "public", "return": "", "signature": " DeduceBondSystemTool(AllRingsFinder ringFinder)", "full_signature": "public  DeduceBondSystemTool(AllRingsFinder ringFinder)", "class_method_signature": "DeduceBondSystemTool.DeduceBondSystemTool(AllRingsFinder ringFinder)", "testcase": false, "constructor": true}, {"identifier": "isOK", "parameters": "(IAtomContainer m)", "modifiers": "public", "return": "boolean", "signature": "boolean isOK(IAtomContainer m)", "full_signature": "public boolean isOK(IAtomContainer m)", "class_method_signature": "DeduceBondSystemTool.isOK(IAtomContainer m)", "testcase": false, "constructor": false}, {"identifier": "fixAromaticBondOrders", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer fixAromaticBondOrders(IAtomContainer atomContainer)", "full_signature": "public IAtomContainer fixAromaticBondOrders(IAtomContainer atomContainer)", "class_method_signature": "DeduceBondSystemTool.fixAromaticBondOrders(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "FixPyridineNOxides", "parameters": "(IAtomContainer atomContainer, IRingSet ringSet)", "modifiers": "private", "return": "void", "signature": "void FixPyridineNOxides(IAtomContainer atomContainer, IRingSet ringSet)", "full_signature": "private void FixPyridineNOxides(IAtomContainer atomContainer, IRingSet ringSet)", "class_method_signature": "DeduceBondSystemTool.FixPyridineNOxides(IAtomContainer atomContainer, IRingSet ringSet)", "testcase": false, "constructor": false}, {"identifier": "applyBonds", "parameters": "(IAtomContainer m, List<String> al)", "modifiers": "private", "return": "void", "signature": "void applyBonds(IAtomContainer m, List<String> al)", "full_signature": "private void applyBonds(IAtomContainer m, List<String> al)", "class_method_signature": "DeduceBondSystemTool.applyBonds(IAtomContainer m, List<String> al)", "testcase": false, "constructor": false}, {"identifier": "fiveMemberedRingPossibilities", "parameters": "(IAtomContainer m, IRing r, List<List<List<String>>> MasterList)", "modifiers": "private", "return": "void", "signature": "void fiveMemberedRingPossibilities(IAtomContainer m, IRing r, List<List<List<String>>> MasterList)", "full_signature": "private void fiveMemberedRingPossibilities(IAtomContainer m, IRing r, List<List<List<String>>> MasterList)", "class_method_signature": "DeduceBondSystemTool.fiveMemberedRingPossibilities(IAtomContainer m, IRing r, List<List<List<String>>> MasterList)", "testcase": false, "constructor": false}, {"identifier": "sixMemberedRingPossibilities", "parameters": "(IAtomContainer m, IRing r, List<List<List<String>>> MasterList)", "modifiers": "private", "return": "void", "signature": "void sixMemberedRingPossibilities(IAtomContainer m, IRing r, List<List<List<String>>> MasterList)", "full_signature": "private void sixMemberedRingPossibilities(IAtomContainer m, IRing r, List<List<List<String>>> MasterList)", "class_method_signature": "DeduceBondSystemTool.sixMemberedRingPossibilities(IAtomContainer m, IRing r, List<List<List<String>>> MasterList)", "testcase": false, "constructor": false}, {"identifier": "sevenMemberedRingPossibilities", "parameters": "(IAtomContainer m, IRing r, List<List<List<String>>> MasterList)", "modifiers": "private", "return": "void", "signature": "void sevenMemberedRingPossibilities(IAtomContainer m, IRing r, List<List<List<String>>> MasterList)", "full_signature": "private void sevenMemberedRingPossibilities(IAtomContainer m, IRing r, List<List<List<String>>> MasterList)", "class_method_signature": "DeduceBondSystemTool.sevenMemberedRingPossibilities(IAtomContainer m, IRing r, List<List<List<String>>> MasterList)", "testcase": false, "constructor": false}, {"identifier": "getBadCount", "parameters": "(IAtomContainer atomContainer, IRingSet ringSet)", "modifiers": "private", "return": "int", "signature": "int getBadCount(IAtomContainer atomContainer, IRingSet ringSet)", "full_signature": "private int getBadCount(IAtomContainer atomContainer, IRingSet ringSet)", "class_method_signature": "DeduceBondSystemTool.getBadCount(IAtomContainer atomContainer, IRingSet ringSet)", "testcase": false, "constructor": false}, {"identifier": "inRingSet", "parameters": "(IAtom atom, IRingSet ringSet)", "modifiers": "private", "return": "boolean", "signature": "boolean inRingSet(IAtom atom, IRingSet ringSet)", "full_signature": "private boolean inRingSet(IAtom atom, IRingSet ringSet)", "class_method_signature": "DeduceBondSystemTool.inRingSet(IAtom atom, IRingSet ringSet)", "testcase": false, "constructor": false}, {"identifier": "loop", "parameters": "(long starttime, IAtomContainer atomContainer, int index,\n            List<List<List<String>>> MasterList, int[] choices, IAtomContainerSet som)", "modifiers": "private", "return": "IAtomContainer", "signature": "IAtomContainer loop(long starttime, IAtomContainer atomContainer, int index,\n            List<List<List<String>>> MasterList, int[] choices, IAtomContainerSet som)", "full_signature": "private IAtomContainer loop(long starttime, IAtomContainer atomContainer, int index,\n            List<List<List<String>>> MasterList, int[] choices, IAtomContainerSet som)", "class_method_signature": "DeduceBondSystemTool.loop(long starttime, IAtomContainer atomContainer, int index,\n            List<List<List<String>>> MasterList, int[] choices, IAtomContainerSet som)", "testcase": false, "constructor": false}, {"identifier": "isStructureOK", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "boolean", "signature": "boolean isStructureOK(IAtomContainer atomContainer)", "full_signature": "private boolean isStructureOK(IAtomContainer atomContainer)", "class_method_signature": "DeduceBondSystemTool.isStructureOK(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "removeExtraRings", "parameters": "(IAtomContainer m)", "modifiers": "private", "return": "IRingSet", "signature": "IRingSet removeExtraRings(IAtomContainer m)", "full_signature": "private IRingSet removeExtraRings(IAtomContainer m)", "class_method_signature": "DeduceBondSystemTool.removeExtraRings(IAtomContainer m)", "testcase": false, "constructor": false}, {"identifier": "findRingsToCheck", "parameters": "(IRingSet rs)", "modifiers": "private", "return": "boolean[]", "signature": "boolean[] findRingsToCheck(IRingSet rs)", "full_signature": "private boolean[] findRingsToCheck(IRingSet rs)", "class_method_signature": "DeduceBondSystemTool.findRingsToCheck(IRingSet rs)", "testcase": false, "constructor": false}, {"identifier": "storeRingSystem", "parameters": "(IAtomContainer mol, IRingSet ringSet)", "modifiers": "private", "return": "void", "signature": "void storeRingSystem(IAtomContainer mol, IRingSet ringSet)", "full_signature": "private void storeRingSystem(IAtomContainer mol, IRingSet ringSet)", "class_method_signature": "DeduceBondSystemTool.storeRingSystem(IAtomContainer mol, IRingSet ringSet)", "testcase": false, "constructor": false}, {"identifier": "recoverRingSystem", "parameters": "(IAtomContainer mol)", "modifiers": "private", "return": "IRingSet", "signature": "IRingSet recoverRingSystem(IAtomContainer mol)", "full_signature": "private IRingSet recoverRingSystem(IAtomContainer mol)", "class_method_signature": "DeduceBondSystemTool.recoverRingSystem(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "setInterrupted", "parameters": "(boolean interrupted)", "modifiers": "public", "return": "void", "signature": "void setInterrupted(boolean interrupted)", "full_signature": "public void setInterrupted(boolean interrupted)", "class_method_signature": "DeduceBondSystemTool.setInterrupted(boolean interrupted)", "testcase": false, "constructor": false}, {"identifier": "isInterrupted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInterrupted()", "full_signature": "public boolean isInterrupted()", "class_method_signature": "DeduceBondSystemTool.isInterrupted()", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/smiles/DeduceBondSystemTool.java"}, "focal_method": {"identifier": "fixAromaticBondOrders", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public", "return": "IAtomContainer", "body": "public IAtomContainer fixAromaticBondOrders(IAtomContainer atomContainer) throws CDKException {\n\n        // preset all bond orders to single\n        for (IBond bond : atomContainer.bonds()) {\n            if (bond.isAromatic() && bond.getOrder() == IBond.Order.UNSET)\n                bond.setOrder(IBond.Order.SINGLE);\n        }\n\n        // OK, we take advantage here from the fact that this class does not take\n        // into account rings larger than 7 atoms. See fixAromaticBondOrders().\n        IRingSet rs = allRingsFinder.findAllRings(atomContainer, 7);\n        storeRingSystem(atomContainer, rs);\n\n        IRingSet ringSet;\n\n        // TODO remove rings with nonsp2 carbons(?) and rings larger than 7 atoms\n        ringSet = removeExtraRings(atomContainer);\n\n        if (ringSet == null) throw new CDKException(\"failure in AllRingsFinder.findAllRings\");\n\n        List<List<List<String>>> MasterList = new ArrayList<List<List<String>>>();\n\n        //this.counter=0;// counter which keeps track of all current possibilities for placing double bonds\n\n        this.FixPyridineNOxides(atomContainer, ringSet);\n\n        for (int i = 0; i <= ringSet.getAtomContainerCount() - 1; i++) {\n\n            IRing ring = (IRing) ringSet.getAtomContainer(i);\n\n            // only takes into account rings up to 7 atoms... if that changes,\n            // make sure to update the findAllRings() calls too!\n            if (ring.getAtomCount() == 5) {\n                fiveMemberedRingPossibilities(atomContainer, ring, MasterList);\n            } else if (ring.getAtomCount() == 6) {\n                sixMemberedRingPossibilities(atomContainer, ring, MasterList);\n            } else if (ring.getAtomCount() == 7) {\n                sevenMemberedRingPossibilities(atomContainer, ring, MasterList);\n                //TODO- add code for all 7 membered aromatic ring possibilities not just 3 bonds\n            } else {\n                //TODO: what about other rings systems?\n                logger.debug(\"Found ring of size: \" + ring.getAtomCount());\n            }\n        }\n\n        IAtomContainerSet som = atomContainer.getBuilder().newInstance(IAtomContainerSet.class);\n\n        //\t\tint number=1; // total number of possibilities\n        //\n        //\t\tfor (int ii=0;ii<=MasterList.size()-1;ii++) {\n        //\t\tArrayList ringlist=(ArrayList)MasterList.get(ii);\n        //\t\tnumber*=ringlist.size();\n        //\t\t}\n        //\t\tlogger.debug(\"number= \"+number);\n\n        int[] choices;\n\n        //if (number> 1000000) return null;\n\n        choices = new int[MasterList.size()];\n\n        if (MasterList.size() > 0) {\n            IAtomContainer iAtomContainer = loop(System.currentTimeMillis(), atomContainer, 0, MasterList, choices, som);\n            if (iAtomContainer != null) return iAtomContainer;\n        }\n\n        int mincount = 99999999;\n\n        int best = -1; // one with minimum number of bad atoms\n\n        // minimize number of potentially bad nitrogens among AtomContainers in the set\n\n        for (int i = 0; i <= som.getAtomContainerCount() - 1; i++) {\n\n            IAtomContainer mol = som.getAtomContainer(i);\n\n            ringSet = removeExtraRings(mol);\n\n            if (ringSet == null) continue;\n\n            int count = getBadCount(mol, ringSet);\n\n            //logger.debug(i + \"\\t\" + count);\n\n            if (count < mincount) {\n                mincount = count;\n                best = i;\n            }\n\n        }\n\n        if (som.getAtomContainerCount() > 0) return som.getAtomContainer(best);\n        return atomContainer;\n    }", "signature": "IAtomContainer fixAromaticBondOrders(IAtomContainer atomContainer)", "full_signature": "public IAtomContainer fixAromaticBondOrders(IAtomContainer atomContainer)", "class_method_signature": "DeduceBondSystemTool.fixAromaticBondOrders(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["bonds", "isAromatic", "getOrder", "setOrder", "findAllRings", "storeRingSystem", "removeExtraRings", "FixPyridineNOxides", "getAtomContainerCount", "getAtomContainer", "getAtomCount", "fiveMemberedRingPossibilities", "getAtomCount", "sixMemberedRingPossibilities", "getAtomCount", "sevenMemberedRingPossibilities", "debug", "getAtomCount", "newInstance", "getBuilder", "size", "size", "loop", "currentTimeMillis", "getAtomContainerCount", "getAtomContainer", "removeExtraRings", "getBadCount", "getAtomContainerCount", "getAtomContainer"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}