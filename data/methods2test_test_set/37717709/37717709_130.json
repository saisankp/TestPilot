{"test_class": {"identifier": "TestDigitsGrammarCreator", "superclass": "", "interfaces": "", "fields": [], "file": "org.jvoicexml/src/test/java/org/jvoicexml/documentserver/schemestrategy/builtin/TestDigitsGrammarCreator.java"}, "test_case": {"identifier": "testCreateGrammarIllegalParamterCombination", "parameters": "()", "modifiers": "@Test(expected = BadFetchError.class) public", "return": "void", "body": "@Test(expected = BadFetchError.class)\n    public void testCreateGrammarIllegalParamterCombination()\n        throws Exception, BadFetchError {\n        final GrammarCreator creator = new DigitsGrammarCreator();\n\n        final URI dtmfUri = new URI(\n                \"builtin:dtmf/digits?minlength=2;maxlength=4&length=3\");\n        creator.createGrammar(dtmfUri);\n    }", "signature": "void testCreateGrammarIllegalParamterCombination()", "full_signature": "@Test(expected = BadFetchError.class) public void testCreateGrammarIllegalParamterCombination()", "class_method_signature": "TestDigitsGrammarCreator.testCreateGrammarIllegalParamterCombination()", "testcase": true, "constructor": false, "invocations": ["createGrammar"]}, "focal_class": {"identifier": "DigitsGrammarCreator", "superclass": "extends AbstractGrammarCreator", "interfaces": "implements GrammarCreator", "fields": [{"original_string": "private static final int MAX_DIGIT = 10;", "modifier": "private static final", "type": "int", "declarator": "MAX_DIGIT = 10", "var_name": "MAX_DIGIT"}, {"original_string": "public static final String TYPE_NAME = \"digits\";", "modifier": "public static final", "type": "String", "declarator": "TYPE_NAME = \"digits\"", "var_name": "TYPE_NAME"}], "methods": [{"identifier": "createGrammar", "parameters": "(final URI uri)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] createGrammar(final URI uri)", "full_signature": "@Override public byte[] createGrammar(final URI uri)", "class_method_signature": "DigitsGrammarCreator.createGrammar(final URI uri)", "testcase": false, "constructor": false}, {"identifier": "getIntParameter", "parameters": "(final Map<String, String> parameters,\n            final String name, final int defValue)", "modifiers": "private", "return": "int", "signature": "int getIntParameter(final Map<String, String> parameters,\n            final String name, final int defValue)", "full_signature": "private int getIntParameter(final Map<String, String> parameters,\n            final String name, final int defValue)", "class_method_signature": "DigitsGrammarCreator.getIntParameter(final Map<String, String> parameters,\n            final String name, final int defValue)", "testcase": false, "constructor": false}, {"identifier": "getTypeName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTypeName()", "full_signature": "@Override public String getTypeName()", "class_method_signature": "DigitsGrammarCreator.getTypeName()", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/documentserver/schemestrategy/builtin/DigitsGrammarCreator.java"}, "focal_method": {"identifier": "createGrammar", "parameters": "(final URI uri)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n    public byte[] createGrammar(final URI uri)\n        throws BadFetchError, IOException {\n        final ModeType mode = getMode(uri);\n        final Map<String, String> parameters = getParameters(uri);\n        final SrgsXmlDocument document;\n        try {\n            document = new SrgsXmlDocument();\n        } catch (ParserConfigurationException e) {\n            throw new BadFetchError(e.getMessage(), e);\n        }\n        final Grammar grammar = document.getGrammar();\n        grammar.setMode(mode);\n        if (mode == ModeType.VOICE) {\n            grammar.setAttribute(\"xml:lang\", \"en\");\n        }\n        grammar.setType(GrammarType.SRGS_XML);\n        final Rule digit = grammar.appendChild(Rule.class);\n        digit.setId(\"digit\");\n        final OneOf oneof = digit.appendChild(OneOf.class);\n        for (int i = 0; i < MAX_DIGIT; i++) {\n            final Item item = oneof.appendChild(Item.class);\n            item.addText(Integer.toString(i));\n        }\n        final Rule digits = grammar.appendChild(Rule.class);\n        digits.makePublic();\n        digits.setId(\"digits\");\n        final Item digitsItem = digits.appendChild(Item.class);\n        final int length = getIntParameter(parameters, \"length\", -1);\n        if (length < 0) {\n            final int min = getIntParameter(parameters, \"minlength\", 1);\n            final int max = getIntParameter(parameters, \"maxlength\", -1);\n            try {\n                digitsItem.setRepeat(min, max);\n            } catch (IllegalArgumentException e) {\n                throw new BadFetchError(e.getMessage(), e);\n            }\n        } else {\n            try {\n                digitsItem.setRepeat(length);\n            } catch (IllegalArgumentException e) {\n                throw new BadFetchError(e.getMessage(), e);\n            }\n        }\n        final Ruleref ref = digitsItem.appendChild(Ruleref.class);\n        ref.setUri(digit);\n        grammar.setRoot(digits);\n        return getBytes(document);\n    }", "signature": "byte[] createGrammar(final URI uri)", "full_signature": "@Override public byte[] createGrammar(final URI uri)", "class_method_signature": "DigitsGrammarCreator.createGrammar(final URI uri)", "testcase": false, "constructor": false, "invocations": ["getMode", "getParameters", "getMessage", "getGrammar", "setMode", "setAttribute", "setType", "appendChild", "setId", "appendChild", "appendChild", "addText", "toString", "appendChild", "makePublic", "setId", "appendChild", "getIntParameter", "getIntParameter", "getIntParameter", "setRepeat", "getMessage", "setRepeat", "getMessage", "appendChild", "setUri", "setRoot", "getBytes"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}