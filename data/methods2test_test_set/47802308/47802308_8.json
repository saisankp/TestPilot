{"test_class": {"identifier": "CUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/modules/common/src/test/java/org/onetwo/common/utils/CUtilsTest.java"}, "test_case": {"identifier": "testAsArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAsArray(){\n\t\tString[] strs = new String[]{\"aa\", \"bb\"};\n\t\tObject[] objs = new Object[]{\"aa\", \"bb\"};\n\t\t\n\t\tString[] fields = (String[])CUtils.asArray(strs);\n\t\tAssert.assertTrue(strs==fields);\n\t\t\n\t\ttry {\n\t\t\tfields = (String[])CUtils.asArray(objs);\n\t\t\tAssert.fail();\n\t\t} catch (Exception e) {\n\t\t\tAssert.assertTrue(ClassCastException.class==e.getClass());\n\t\t}\n\t\t\n\t\tfields = CUtils.asStringArray(strs);\n\t\tAssert.assertTrue(strs==fields);\n\t\t\n\t\tfields = CUtils.asStringArray(objs);\n\t\tAssert.assertTrue(strs!=fields);\n\t\tAssert.assertEquals(strs[0], fields[0]);\n\t\tAssert.assertEquals(strs[1], fields[1]);\n\t\t\n\n\t\tfields = CUtils.asStringArray(\"aa\");\n\t\tAssert.assertEquals(strs[0], fields[0]);\n\n\t\tSet<String> formats = CUtils.asSet(\"yyyy-MM-dd HH:mm:ss\", \"yyyy-MM-dd\", \"HH:mm:ss\", \"yyyy-MM-dd HH:mm\");\n\t\tAssert.assertEquals(formats.size(), 4);\n\t}", "signature": "void testAsArray()", "full_signature": "@Test public void testAsArray()", "class_method_signature": "CUtilsTest.testAsArray()", "testcase": true, "constructor": false, "invocations": ["asArray", "assertTrue", "asArray", "fail", "assertTrue", "getClass", "asStringArray", "assertTrue", "asStringArray", "assertTrue", "assertEquals", "assertEquals", "asStringArray", "assertEquals", "asSet", "assertEquals", "size"]}, "focal_class": {"identifier": "CUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static NullOrEmtpyPredicate NullOrEmptyTrue = new NullOrEmtpyPredicate(true);", "modifier": "public static", "type": "NullOrEmtpyPredicate", "declarator": "NullOrEmptyTrue = new NullOrEmtpyPredicate(true)", "var_name": "NullOrEmptyTrue"}, {"original_string": "public static NullOrEmtpyPredicate NullOrEmptyFalse = new NullOrEmtpyPredicate(false);", "modifier": "public static", "type": "NullOrEmtpyPredicate", "declarator": "NullOrEmptyFalse = new NullOrEmtpyPredicate(false)", "var_name": "NullOrEmptyFalse"}, {"original_string": "public static final List NULL_LIST = new NullList();", "modifier": "public static final", "type": "List", "declarator": "NULL_LIST = new NullList()", "var_name": "NULL_LIST"}], "methods": [{"identifier": "emptyIfNull", "parameters": "(Collection<T> col)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> emptyIfNull(Collection<T> col)", "full_signature": "public static Collection<T> emptyIfNull(Collection<T> col)", "class_method_signature": "CUtils.emptyIfNull(Collection<T> col)", "testcase": false, "constructor": false}, {"identifier": "emptyListIfNull", "parameters": "(List<T> col)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> emptyListIfNull(List<T> col)", "full_signature": "public static List<T> emptyListIfNull(List<T> col)", "class_method_signature": "CUtils.emptyListIfNull(List<T> col)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(Map<K, V> first, Map<K, V> map)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> subtract(Map<K, V> first, Map<K, V> map)", "full_signature": "public static Map<K, V> subtract(Map<K, V> first, Map<K, V> map)", "class_method_signature": "CUtils.subtract(Map<K, V> first, Map<K, V> map)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(Map<K, V> first, Map<K, V> map, boolean modifyFirst)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> subtract(Map<K, V> first, Map<K, V> map, boolean modifyFirst)", "full_signature": "public static Map<K, V> subtract(Map<K, V> first, Map<K, V> map, boolean modifyFirst)", "class_method_signature": "CUtils.subtract(Map<K, V> first, Map<K, V> map, boolean modifyFirst)", "testcase": false, "constructor": false}, {"identifier": "arrayIntoMap", "parameters": "(Class mapClass, Object... params)", "modifiers": "public static", "return": "Map", "signature": "Map arrayIntoMap(Class mapClass, Object... params)", "full_signature": "public static Map arrayIntoMap(Class mapClass, Object... params)", "class_method_signature": "CUtils.arrayIntoMap(Class mapClass, Object... params)", "testcase": false, "constructor": false}, {"identifier": "newMap", "parameters": "(Class<? extends Map> clazz)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> newMap(Class<? extends Map> clazz)", "full_signature": "public static Map<K, V> newMap(Class<? extends Map> clazz)", "class_method_signature": "CUtils.newMap(Class<? extends Map> clazz)", "testcase": false, "constructor": false}, {"identifier": "asMap", "parameters": "(Object... params)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> asMap(Object... params)", "full_signature": "public static Map<K, V> asMap(Object... params)", "class_method_signature": "CUtils.asMap(Object... params)", "testcase": false, "constructor": false}, {"identifier": "typeMap", "parameters": "(T... params)", "modifiers": "public static", "return": "Map<T, T>", "signature": "Map<T, T> typeMap(T... params)", "full_signature": "public static Map<T, T> typeMap(T... params)", "class_method_signature": "CUtils.typeMap(T... params)", "testcase": false, "constructor": false}, {"identifier": "fromProperties", "parameters": "(Object obj)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> fromProperties(Object obj)", "full_signature": "public static Map<String, Object> fromProperties(Object obj)", "class_method_signature": "CUtils.fromProperties(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toBase", "parameters": "(Map map)", "modifiers": "public static", "return": "BaseMap", "signature": "BaseMap toBase(Map map)", "full_signature": "public static BaseMap toBase(Map map)", "class_method_signature": "CUtils.toBase(Map map)", "testcase": false, "constructor": false}, {"identifier": "arrayIntoMap", "parameters": "(T properties, Object... params)", "modifiers": "public static", "return": "T", "signature": "T arrayIntoMap(T properties, Object... params)", "full_signature": "public static T arrayIntoMap(T properties, Object... params)", "class_method_signature": "CUtils.arrayIntoMap(T properties, Object... params)", "testcase": false, "constructor": false}, {"identifier": "asLinkedMap", "parameters": "(Object...params)", "modifiers": "public static", "return": "LinkedHashMap<K, V>", "signature": "LinkedHashMap<K, V> asLinkedMap(Object...params)", "full_signature": "public static LinkedHashMap<K, V> asLinkedMap(Object...params)", "class_method_signature": "CUtils.asLinkedMap(Object...params)", "testcase": false, "constructor": false}, {"identifier": "newArrayList", "parameters": "()", "modifiers": "public static", "return": "List<T>", "signature": "List<T> newArrayList()", "full_signature": "public static List<T> newArrayList()", "class_method_signature": "CUtils.newArrayList()", "testcase": false, "constructor": false}, {"identifier": "newArrayList", "parameters": "(int size)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> newArrayList(int size)", "full_signature": "public static List<T> newArrayList(int size)", "class_method_signature": "CUtils.newArrayList(int size)", "testcase": false, "constructor": false}, {"identifier": "newList", "parameters": "(T...objs)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> newList(T...objs)", "full_signature": "public static List<T> newList(T...objs)", "class_method_signature": "CUtils.newList(T...objs)", "testcase": false, "constructor": false}, {"identifier": "newArray", "parameters": "(T...objs)", "modifiers": "public static", "return": "T[]", "signature": "T[] newArray(T...objs)", "full_signature": "public static T[] newArray(T...objs)", "class_method_signature": "CUtils.newArray(T...objs)", "testcase": false, "constructor": false}, {"identifier": "newHashSet", "parameters": "()", "modifiers": "public static", "return": "HashSet<T>", "signature": "HashSet<T> newHashSet()", "full_signature": "public static HashSet<T> newHashSet()", "class_method_signature": "CUtils.newHashSet()", "testcase": false, "constructor": false}, {"identifier": "asSet", "parameters": "(T...objs)", "modifiers": "public static", "return": "HashSet<T>", "signature": "HashSet<T> asSet(T...objs)", "full_signature": "public static HashSet<T> asSet(T...objs)", "class_method_signature": "CUtils.asSet(T...objs)", "testcase": false, "constructor": false}, {"identifier": "newHashSet", "parameters": "(int size)", "modifiers": "public static", "return": "HashSet<T>", "signature": "HashSet<T> newHashSet(int size)", "full_signature": "public static HashSet<T> newHashSet(int size)", "class_method_signature": "CUtils.newHashSet(int size)", "testcase": false, "constructor": false}, {"identifier": "newTreeSet", "parameters": "()", "modifiers": "public static", "return": "TreeSet<T>", "signature": "TreeSet<T> newTreeSet()", "full_signature": "public static TreeSet<T> newTreeSet()", "class_method_signature": "CUtils.newTreeSet()", "testcase": false, "constructor": false}, {"identifier": "newMap", "parameters": "()", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> newMap()", "full_signature": "public static Map<K, V> newMap()", "class_method_signature": "CUtils.newMap()", "testcase": false, "constructor": false}, {"identifier": "newHashMap", "parameters": "(int size)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> newHashMap(int size)", "full_signature": "public static Map<K, V> newHashMap(int size)", "class_method_signature": "CUtils.newHashMap(int size)", "testcase": false, "constructor": false}, {"identifier": "newListMap", "parameters": "(int size)", "modifiers": "public static", "return": "CollectionMap<K, V>", "signature": "CollectionMap<K, V> newListMap(int size)", "full_signature": "public static CollectionMap<K, V> newListMap(int size)", "class_method_signature": "CUtils.newListMap(int size)", "testcase": false, "constructor": false}, {"identifier": "newLinkedHashMap", "parameters": "(int size)", "modifiers": "public static", "return": "LinkedHashMap<K, V>", "signature": "LinkedHashMap<K, V> newLinkedHashMap(int size)", "full_signature": "public static LinkedHashMap<K, V> newLinkedHashMap(int size)", "class_method_signature": "CUtils.newLinkedHashMap(int size)", "testcase": false, "constructor": false}, {"identifier": "newLinkedHashMap", "parameters": "()", "modifiers": "public static", "return": "LinkedHashMap<K, V>", "signature": "LinkedHashMap<K, V> newLinkedHashMap()", "full_signature": "public static LinkedHashMap<K, V> newLinkedHashMap()", "class_method_signature": "CUtils.newLinkedHashMap()", "testcase": false, "constructor": false}, {"identifier": "trimAsList", "parameters": "(T... array)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> trimAsList(T... array)", "full_signature": "public static List<T> trimAsList(T... array)", "class_method_signature": "CUtils.trimAsList(T... array)", "testcase": false, "constructor": false}, {"identifier": "asList", "parameters": "(T... array)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> asList(T... array)", "full_signature": "public static List<T> asList(T... array)", "class_method_signature": "CUtils.asList(T... array)", "testcase": false, "constructor": false}, {"identifier": "tolist", "parameters": "(Object object, boolean trimNull)", "modifiers": "public static", "return": "List", "signature": "List tolist(Object object, boolean trimNull)", "full_signature": "public static List tolist(Object object, boolean trimNull)", "class_method_signature": "CUtils.tolist(Object object, boolean trimNull)", "testcase": false, "constructor": false}, {"identifier": "newCollections", "parameters": "(Class<? extends Collection> clazz)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> newCollections(Class<? extends Collection> clazz)", "full_signature": "public static Collection<T> newCollections(Class<? extends Collection> clazz)", "class_method_signature": "CUtils.newCollections(Class<? extends Collection> clazz)", "testcase": false, "constructor": false}, {"identifier": "newCollections", "parameters": "(Class<? extends Collection> clazz, Integer size)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> newCollections(Class<? extends Collection> clazz, Integer size)", "full_signature": "public static Collection<T> newCollections(Class<? extends Collection> clazz, Integer size)", "class_method_signature": "CUtils.newCollections(Class<? extends Collection> clazz, Integer size)", "testcase": false, "constructor": false}, {"identifier": "toCollection", "parameters": "(Object object)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> toCollection(Object object)", "full_signature": "public static Collection<T> toCollection(Object object)", "class_method_signature": "CUtils.toCollection(Object object)", "testcase": false, "constructor": false}, {"identifier": "tolist", "parameters": "(Object object, boolean trimNull, List def)", "modifiers": "public static", "return": "List", "signature": "List tolist(Object object, boolean trimNull, List def)", "full_signature": "public static List tolist(Object object, boolean trimNull, List def)", "class_method_signature": "CUtils.tolist(Object object, boolean trimNull, List def)", "testcase": false, "constructor": false}, {"identifier": "appendToList", "parameters": "(Object object, List list)", "modifiers": "public static", "return": "void", "signature": "void appendToList(Object object, List list)", "full_signature": "public static void appendToList(Object object, List list)", "class_method_signature": "CUtils.appendToList(Object object, List list)", "testcase": false, "constructor": false}, {"identifier": "stripNull", "parameters": "(Collection collection)", "modifiers": "public static", "return": "Collection", "signature": "Collection stripNull(Collection collection)", "full_signature": "public static Collection stripNull(Collection collection)", "class_method_signature": "CUtils.stripNull(Collection collection)", "testcase": false, "constructor": false}, {"identifier": "trimAndexcludeTheClassElement", "parameters": "(boolean trimNull, Object array, Object... excludeClasses)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> trimAndexcludeTheClassElement(boolean trimNull, Object array, Object... excludeClasses)", "full_signature": "public static List<T> trimAndexcludeTheClassElement(boolean trimNull, Object array, Object... excludeClasses)", "class_method_signature": "CUtils.trimAndexcludeTheClassElement(boolean trimNull, Object array, Object... excludeClasses)", "testcase": false, "constructor": false}, {"identifier": "strip", "parameters": "(Collection<?> collection, final Object... stripValue)", "modifiers": "public static", "return": "Collection", "signature": "Collection strip(Collection<?> collection, final Object... stripValue)", "full_signature": "public static Collection strip(Collection<?> collection, final Object... stripValue)", "class_method_signature": "CUtils.strip(Collection<?> collection, final Object... stripValue)", "testcase": false, "constructor": false}, {"identifier": "asArray", "parameters": "(Object obj)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] asArray(Object obj)", "full_signature": "public static Object[] asArray(Object obj)", "class_method_signature": "CUtils.asArray(Object obj)", "testcase": false, "constructor": false}, {"identifier": "asStringArray", "parameters": "(Object obj)", "modifiers": "public static", "return": "String[]", "signature": "String[] asStringArray(Object obj)", "full_signature": "public static String[] asStringArray(Object obj)", "class_method_signature": "CUtils.asStringArray(Object obj)", "testcase": false, "constructor": false}, {"identifier": "map2Array", "parameters": "(Map<?, ?> map)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] map2Array(Map<?, ?> map)", "full_signature": "public static Object[] map2Array(Map<?, ?> map)", "class_method_signature": "CUtils.map2Array(Map<?, ?> map)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(Collection<V> datas, ReturnableClosure<V, K> block)", "modifiers": "public static", "return": "Map<K, Collection<V>>", "signature": "Map<K, Collection<V>> groupBy(Collection<V> datas, ReturnableClosure<V, K> block)", "full_signature": "public static Map<K, Collection<V>> groupBy(Collection<V> datas, ReturnableClosure<V, K> block)", "class_method_signature": "CUtils.groupBy(Collection<V> datas, ReturnableClosure<V, K> block)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(Collection<T> collection, Predicate<T> predicate)", "modifiers": "public static", "return": "void", "signature": "void filter(Collection<T> collection, Predicate<T> predicate)", "full_signature": "public static void filter(Collection<T> collection, Predicate<T> predicate)", "class_method_signature": "CUtils.filter(Collection<T> collection, Predicate<T> predicate)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(Map<K, V> map, Predicate<Entry<K, V>> predicate)", "modifiers": "public static", "return": "void", "signature": "void filter(Map<K, V> map, Predicate<Entry<K, V>> predicate)", "full_signature": "public static void filter(Map<K, V> map, Predicate<Entry<K, V>> predicate)", "class_method_signature": "CUtils.filter(Map<K, V> map, Predicate<Entry<K, V>> predicate)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(List<T> list1, List<T> list2, NotInPredicate<T> notInPredicate)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> difference(List<T> list1, List<T> list2, NotInPredicate<T> notInPredicate)", "full_signature": "public static List<T> difference(List<T> list1, List<T> list2, NotInPredicate<T> notInPredicate)", "class_method_signature": "CUtils.difference(List<T> list1, List<T> list2, NotInPredicate<T> notInPredicate)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(List<T> list1, List<T> list2, final String...properties)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> difference(List<T> list1, List<T> list2, final String...properties)", "full_signature": "public static List<T> difference(List<T> list1, List<T> list2, final String...properties)", "class_method_signature": "CUtils.difference(List<T> list1, List<T> list2, final String...properties)", "testcase": false, "constructor": false}, {"identifier": "containsAnyOne", "parameters": "(Collection<T> c, T...elements)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsAnyOne(Collection<T> c, T...elements)", "full_signature": "public static boolean containsAnyOne(Collection<T> c, T...elements)", "class_method_signature": "CUtils.containsAnyOne(Collection<T> c, T...elements)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Collection<T> c, T element, EqualsPredicate<T> equalsPredicate)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(Collection<T> c, T element, EqualsPredicate<T> equalsPredicate)", "full_signature": "public static boolean contains(Collection<T> c, T element, EqualsPredicate<T> equalsPredicate)", "class_method_signature": "CUtils.contains(Collection<T> c, T element, EqualsPredicate<T> equalsPredicate)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Collection<T> c, T element, final String...properties)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(Collection<T> c, T element, final String...properties)", "full_signature": "public static boolean contains(Collection<T> c, T element, final String...properties)", "class_method_signature": "CUtils.contains(Collection<T> c, T element, final String...properties)", "testcase": false, "constructor": false}, {"identifier": "isEquals", "parameters": "(T e1, T e2, EqualsPredicate<T> equalsPredicate)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEquals(T e1, T e2, EqualsPredicate<T> equalsPredicate)", "full_signature": "public static boolean isEquals(T e1, T e2, EqualsPredicate<T> equalsPredicate)", "class_method_signature": "CUtils.isEquals(T e1, T e2, EqualsPredicate<T> equalsPredicate)", "testcase": false, "constructor": false}, {"identifier": "isEquals", "parameters": "(final T e1, final T e2, final String...properties)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEquals(final T e1, final T e2, final String...properties)", "full_signature": "public static boolean isEquals(final T e1, final T e2, final String...properties)", "class_method_signature": "CUtils.isEquals(final T e1, final T e2, final String...properties)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "(List<?> list)", "modifiers": "public static", "return": "Map<Integer, Object>", "signature": "Map<Integer, Object> toMap(List<?> list)", "full_signature": "public static Map<Integer, Object> toMap(List<?> list)", "class_method_signature": "CUtils.toMap(List<?> list)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "(List<?> list, IndexableReturnableClosure<Object, K> keyMap)", "modifiers": "public static", "return": "Map<K, Object>", "signature": "Map<K, Object> toMap(List<?> list, IndexableReturnableClosure<Object, K> keyMap)", "full_signature": "public static Map<K, Object> toMap(List<?> list, IndexableReturnableClosure<Object, K> keyMap)", "class_method_signature": "CUtils.toMap(List<?> list, IndexableReturnableClosure<Object, K> keyMap)", "testcase": false, "constructor": false}, {"identifier": "toList", "parameters": "(Map<?, ?> map)", "modifiers": "public static", "return": "List<Object>", "signature": "List<Object> toList(Map<?, ?> map)", "full_signature": "public static List<Object> toList(Map<?, ?> map)", "class_method_signature": "CUtils.toList(Map<?, ?> map)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(Collection<T> list, Function<? super T, ? extends R> mapper)", "modifiers": "public static", "return": "List<R>", "signature": "List<R> map(Collection<T> list, Function<? super T, ? extends R> mapper)", "full_signature": "public static List<R> map(Collection<T> list, Function<? super T, ? extends R> mapper)", "class_method_signature": "CUtils.map(Collection<T> list, Function<? super T, ? extends R> mapper)", "testcase": false, "constructor": false}, {"identifier": "iterableToList", "parameters": "(Iterable<T> it)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> iterableToList(Iterable<T> it)", "full_signature": "public static List<T> iterableToList(Iterable<T> it)", "class_method_signature": "CUtils.iterableToList(Iterable<T> it)", "testcase": false, "constructor": false}, {"identifier": "findByClass", "parameters": "(List<?> list, Class<T> targetClass)", "modifiers": "public static", "return": "Optional<Pair<Integer, T>>", "signature": "Optional<Pair<Integer, T>> findByClass(List<?> list, Class<T> targetClass)", "full_signature": "public static Optional<Pair<Integer, T>> findByClass(List<?> list, Class<T> targetClass)", "class_method_signature": "CUtils.findByClass(List<?> list, Class<T> targetClass)", "testcase": false, "constructor": false}, {"identifier": "replaceOrAdd", "parameters": "(List list, Class targetClass, Object element)", "modifiers": "public static", "return": "void", "signature": "void replaceOrAdd(List list, Class targetClass, Object element)", "full_signature": "public static void replaceOrAdd(List list, Class targetClass, Object element)", "class_method_signature": "CUtils.replaceOrAdd(List list, Class targetClass, Object element)", "testcase": false, "constructor": false}, {"identifier": "removeByClass", "parameters": "(List<?> list, Class<?> targetClass)", "modifiers": "public static", "return": "void", "signature": "void removeByClass(List<?> list, Class<?> targetClass)", "full_signature": "public static void removeByClass(List<?> list, Class<?> targetClass)", "class_method_signature": "CUtils.removeByClass(List<?> list, Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "CUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " CUtils()", "full_signature": "private  CUtils()", "class_method_signature": "CUtils.CUtils()", "testcase": false, "constructor": true}], "file": "core/modules/common/src/main/java/org/onetwo/common/utils/CUtils.java"}, "focal_method": {"identifier": "asArray", "parameters": "(Object obj)", "modifiers": "public static", "return": "Object[]", "body": "public static Object[] asArray(Object obj) {\n\t\tif(obj.getClass().isArray()){\n\t\t\treturn (Object[]) obj;\n\t\t}else if(Collection.class.isAssignableFrom(obj.getClass())){\n\t\t\tCollection col = (Collection) obj;\n\t\t\tObject[] array = new Object[col.size()];\n\t\t\tint i = 0;\n\t\t\tfor (Object o : col) {\n\t\t\t\tarray[i++] = o;\n\t\t\t}\n\t\t\treturn array;\n\t\t}else{\n\t\t\treturn new Object[]{obj};\n\t\t}\n\t}", "signature": "Object[] asArray(Object obj)", "full_signature": "public static Object[] asArray(Object obj)", "class_method_signature": "CUtils.asArray(Object obj)", "testcase": false, "constructor": false, "invocations": ["isArray", "getClass", "isAssignableFrom", "getClass", "size"]}, "repository": {"repo_id": 47802308, "url": "https://github.com/wayshall/onetwo", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 16, "size": 57582, "license": "licensed"}}