{"test_class": {"identifier": "StringTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StringType type = new StringType();", "modifier": "private", "type": "StringType", "declarator": "type = new StringType()", "var_name": "type"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/types/string/StringTypeTest.java"}, "test_case": {"identifier": "testConvert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvert() {\n\n        // przypadki testowe: [argument][oczekiwana wartosc holdera]\n        Object[][] testCases = {\n            {new Integer(17), \"17\"},\n            {new Float(1. / 3), \"0.33333334\"},\n            {(byte) 100, \"100\"},\n            {null, null},\n            {\"123\", \"123\"},};\n\n        // wykonanie testow\n        for (Object[] testCase : testCases) {\n            Object obj = testCase[0];\n            String expectedValue = (String) testCase[1];\n\n            StringHolder holder = type.convert(obj);\n            assertEquals(expectedValue, holder.getValue());\n        }\n    }", "signature": "void testConvert()", "full_signature": "@Test public void testConvert()", "class_method_signature": "StringTypeTest.testConvert()", "testcase": true, "constructor": false, "invocations": ["convert", "assertEquals", "getValue"]}, "focal_class": {"identifier": "StringType", "superclass": "", "interfaces": "implements Type<StringHolder>", "fields": [{"original_string": "public static final String TYPE_NAME = \"string\";", "modifier": "public static final", "type": "String", "declarator": "TYPE_NAME = \"string\"", "var_name": "TYPE_NAME"}], "methods": [{"identifier": "encode", "parameters": "(StringHolder holder)", "modifiers": "@Override public", "return": "String", "signature": "String encode(StringHolder holder)", "full_signature": "@Override public String encode(StringHolder holder)", "class_method_signature": "StringType.encode(StringHolder holder)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String text)", "modifiers": "@Override public", "return": "StringHolder", "signature": "StringHolder decode(String text)", "full_signature": "@Override public StringHolder decode(String text)", "class_method_signature": "StringType.decode(String text)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "StringHolder", "signature": "StringHolder convert(Object obj)", "full_signature": "@Override public StringHolder convert(Object obj)", "class_method_signature": "StringType.convert(Object obj)", "testcase": false, "constructor": false}, {"identifier": "newArray", "parameters": "(int size)", "modifiers": "@Override public", "return": "StringHolder[]", "signature": "StringHolder[] newArray(int size)", "full_signature": "@Override public StringHolder[] newArray(int size)", "class_method_signature": "StringType.newArray(int size)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/types/string/StringType.java"}, "focal_method": {"identifier": "convert", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "StringHolder", "body": "@Override\n    public StringHolder convert(Object obj) {\n        return new StringHolder(obj != null ? obj.toString() : null);\n    }", "signature": "StringHolder convert(Object obj)", "full_signature": "@Override public StringHolder convert(Object obj)", "class_method_signature": "StringType.convert(Object obj)", "testcase": false, "constructor": false, "invocations": ["toString"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}