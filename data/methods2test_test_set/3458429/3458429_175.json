{"test_class": {"identifier": "TestQuotedStringTokenizer", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-common/src/test/java/com/fireflysource/common/string/TestQuotedStringTokenizer.java"}, "test_case": {"identifier": "testQuote", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testQuote() {\n        StringBuilder buf = new StringBuilder();\n\n        buf.setLength(0);\n        QuotedStringTokenizer.quote(buf, \"abc \\n efg\");\n        assertEquals(\"\\\"abc \\\\n efg\\\"\", buf.toString());\n\n        buf.setLength(0);\n        QuotedStringTokenizer.quote(buf, \"abcefg\");\n        assertEquals(\"\\\"abcefg\\\"\", buf.toString());\n\n        buf.setLength(0);\n        QuotedStringTokenizer.quote(buf, \"abcefg\\\"\");\n        assertEquals(\"\\\"abcefg\\\\\\\"\\\"\", buf.toString());\n\n    }", "signature": "void testQuote()", "full_signature": "@Test void testQuote()", "class_method_signature": "TestQuotedStringTokenizer.testQuote()", "testcase": true, "constructor": false, "invocations": ["setLength", "quote", "assertEquals", "toString", "setLength", "quote", "assertEquals", "toString", "setLength", "quote", "assertEquals", "toString"]}, "focal_class": {"identifier": "QuotedStringTokenizer", "superclass": "extends StringTokenizer", "interfaces": "", "fields": [{"original_string": "private final static String DEFAULT_DELIMITER = \"\\t\\n\\r\";", "modifier": "private final static", "type": "String", "declarator": "DEFAULT_DELIMITER = \"\\t\\n\\r\"", "var_name": "DEFAULT_DELIMITER"}, {"original_string": "private static final char[] escapes = new char[32];", "modifier": "private static final", "type": "char[]", "declarator": "escapes = new char[32]", "var_name": "escapes"}, {"original_string": "private String string;", "modifier": "private", "type": "String", "declarator": "string", "var_name": "string"}, {"original_string": "private String delimiter = DEFAULT_DELIMITER;", "modifier": "private", "type": "String", "declarator": "delimiter = DEFAULT_DELIMITER", "var_name": "delimiter"}, {"original_string": "private boolean returnQuotes;", "modifier": "private", "type": "boolean", "declarator": "returnQuotes", "var_name": "returnQuotes"}, {"original_string": "private boolean returnDelimiters;", "modifier": "private", "type": "boolean", "declarator": "returnDelimiters", "var_name": "returnDelimiters"}, {"original_string": "private StringBuilder token;", "modifier": "private", "type": "StringBuilder", "declarator": "token", "var_name": "token"}, {"original_string": "private boolean hasToken = false;", "modifier": "private", "type": "boolean", "declarator": "hasToken = false", "var_name": "hasToken"}, {"original_string": "private int index = 0;", "modifier": "private", "type": "int", "declarator": "index = 0", "var_name": "index"}, {"original_string": "private int lastStart = 0;", "modifier": "private", "type": "int", "declarator": "lastStart = 0", "var_name": "lastStart"}, {"original_string": "private boolean isDouble = true;", "modifier": "private", "type": "boolean", "declarator": "isDouble = true", "var_name": "isDouble"}, {"original_string": "private boolean isSingle = true;", "modifier": "private", "type": "boolean", "declarator": "isSingle = true", "var_name": "isSingle"}], "methods": [{"identifier": "QuotedStringTokenizer", "parameters": "(String str, String delimiter, boolean returnDelimiters, boolean returnQuotes)", "modifiers": "public", "return": "", "signature": " QuotedStringTokenizer(String str, String delimiter, boolean returnDelimiters, boolean returnQuotes)", "full_signature": "public  QuotedStringTokenizer(String str, String delimiter, boolean returnDelimiters, boolean returnQuotes)", "class_method_signature": "QuotedStringTokenizer.QuotedStringTokenizer(String str, String delimiter, boolean returnDelimiters, boolean returnQuotes)", "testcase": false, "constructor": true}, {"identifier": "QuotedStringTokenizer", "parameters": "(String str, String delimiter, boolean returnDelimiters)", "modifiers": "public", "return": "", "signature": " QuotedStringTokenizer(String str, String delimiter, boolean returnDelimiters)", "full_signature": "public  QuotedStringTokenizer(String str, String delimiter, boolean returnDelimiters)", "class_method_signature": "QuotedStringTokenizer.QuotedStringTokenizer(String str, String delimiter, boolean returnDelimiters)", "testcase": false, "constructor": true}, {"identifier": "QuotedStringTokenizer", "parameters": "(String str, String delimiter)", "modifiers": "public", "return": "", "signature": " QuotedStringTokenizer(String str, String delimiter)", "full_signature": "public  QuotedStringTokenizer(String str, String delimiter)", "class_method_signature": "QuotedStringTokenizer.QuotedStringTokenizer(String str, String delimiter)", "testcase": false, "constructor": true}, {"identifier": "QuotedStringTokenizer", "parameters": "(String str)", "modifiers": "public", "return": "", "signature": " QuotedStringTokenizer(String str)", "full_signature": "public  QuotedStringTokenizer(String str)", "class_method_signature": "QuotedStringTokenizer.QuotedStringTokenizer(String str)", "testcase": false, "constructor": true}, {"identifier": "quoteIfNeeded", "parameters": "(String s, String delim)", "modifiers": "public static", "return": "String", "signature": "String quoteIfNeeded(String s, String delim)", "full_signature": "public static String quoteIfNeeded(String s, String delim)", "class_method_signature": "QuotedStringTokenizer.quoteIfNeeded(String s, String delim)", "testcase": false, "constructor": false}, {"identifier": "quote", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String quote(String s)", "full_signature": "public static String quote(String s)", "class_method_signature": "QuotedStringTokenizer.quote(String s)", "testcase": false, "constructor": false}, {"identifier": "quoteOnly", "parameters": "(Appendable buffer, String input)", "modifiers": "public static", "return": "void", "signature": "void quoteOnly(Appendable buffer, String input)", "full_signature": "public static void quoteOnly(Appendable buffer, String input)", "class_method_signature": "QuotedStringTokenizer.quoteOnly(Appendable buffer, String input)", "testcase": false, "constructor": false}, {"identifier": "quote", "parameters": "(Appendable buffer, String input)", "modifiers": "public static", "return": "void", "signature": "void quote(Appendable buffer, String input)", "full_signature": "public static void quote(Appendable buffer, String input)", "class_method_signature": "QuotedStringTokenizer.quote(Appendable buffer, String input)", "testcase": false, "constructor": false}, {"identifier": "unquoteOnly", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String unquoteOnly(String s)", "full_signature": "public static String unquoteOnly(String s)", "class_method_signature": "QuotedStringTokenizer.unquoteOnly(String s)", "testcase": false, "constructor": false}, {"identifier": "unquoteOnly", "parameters": "(String s, boolean lenient)", "modifiers": "public static", "return": "String", "signature": "String unquoteOnly(String s, boolean lenient)", "full_signature": "public static String unquoteOnly(String s, boolean lenient)", "class_method_signature": "QuotedStringTokenizer.unquoteOnly(String s, boolean lenient)", "testcase": false, "constructor": false}, {"identifier": "unquote", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String unquote(String s)", "full_signature": "public static String unquote(String s)", "class_method_signature": "QuotedStringTokenizer.unquote(String s)", "testcase": false, "constructor": false}, {"identifier": "unquote", "parameters": "(String s, boolean lenient)", "modifiers": "public static", "return": "String", "signature": "String unquote(String s, boolean lenient)", "full_signature": "public static String unquote(String s, boolean lenient)", "class_method_signature": "QuotedStringTokenizer.unquote(String s, boolean lenient)", "testcase": false, "constructor": false}, {"identifier": "isValidEscaping", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidEscaping(char c)", "full_signature": "private static boolean isValidEscaping(char c)", "class_method_signature": "QuotedStringTokenizer.isValidEscaping(char c)", "testcase": false, "constructor": false}, {"identifier": "isQuoted", "parameters": "(String s)", "modifiers": "public static", "return": "boolean", "signature": "boolean isQuoted(String s)", "full_signature": "public static boolean isQuoted(String s)", "class_method_signature": "QuotedStringTokenizer.isQuoted(String s)", "testcase": false, "constructor": false}, {"identifier": "hasMoreTokens", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasMoreTokens()", "full_signature": "@Override public boolean hasMoreTokens()", "class_method_signature": "QuotedStringTokenizer.hasMoreTokens()", "testcase": false, "constructor": false}, {"identifier": "nextToken", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String nextToken()", "full_signature": "@Override public String nextToken()", "class_method_signature": "QuotedStringTokenizer.nextToken()", "testcase": false, "constructor": false}, {"identifier": "nextToken", "parameters": "(String delim)", "modifiers": "@Override public", "return": "String", "signature": "String nextToken(String delim)", "full_signature": "@Override public String nextToken(String delim)", "class_method_signature": "QuotedStringTokenizer.nextToken(String delim)", "testcase": false, "constructor": false}, {"identifier": "hasMoreElements", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasMoreElements()", "full_signature": "@Override public boolean hasMoreElements()", "class_method_signature": "QuotedStringTokenizer.hasMoreElements()", "testcase": false, "constructor": false}, {"identifier": "nextElement", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object nextElement()", "full_signature": "@Override public Object nextElement()", "class_method_signature": "QuotedStringTokenizer.nextElement()", "testcase": false, "constructor": false}, {"identifier": "countTokens", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int countTokens()", "full_signature": "@Override public int countTokens()", "class_method_signature": "QuotedStringTokenizer.countTokens()", "testcase": false, "constructor": false}, {"identifier": "getDouble", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getDouble()", "full_signature": "public boolean getDouble()", "class_method_signature": "QuotedStringTokenizer.getDouble()", "testcase": false, "constructor": false}, {"identifier": "setDouble", "parameters": "(boolean d)", "modifiers": "public", "return": "void", "signature": "void setDouble(boolean d)", "full_signature": "public void setDouble(boolean d)", "class_method_signature": "QuotedStringTokenizer.setDouble(boolean d)", "testcase": false, "constructor": false}, {"identifier": "getSingle", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getSingle()", "full_signature": "public boolean getSingle()", "class_method_signature": "QuotedStringTokenizer.getSingle()", "testcase": false, "constructor": false}, {"identifier": "setSingle", "parameters": "(boolean single)", "modifiers": "public", "return": "void", "signature": "void setSingle(boolean single)", "full_signature": "public void setSingle(boolean single)", "class_method_signature": "QuotedStringTokenizer.setSingle(boolean single)", "testcase": false, "constructor": false}], "file": "firefly-common/src/main/java/com/fireflysource/common/string/QuotedStringTokenizer.java"}, "focal_method": {"identifier": "quote", "parameters": "(String s)", "modifiers": "public static", "return": "String", "body": "public static String quote(String s) {\n        if (s == null)\n            return null;\n        if (s.length() == 0)\n            return \"\\\"\\\"\";\n\n        StringBuilder b = new StringBuilder(s.length() + 8);\n        quote(b, s);\n        return b.toString();\n\n    }", "signature": "String quote(String s)", "full_signature": "public static String quote(String s)", "class_method_signature": "QuotedStringTokenizer.quote(String s)", "testcase": false, "constructor": false, "invocations": ["length", "length", "quote", "toString"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}