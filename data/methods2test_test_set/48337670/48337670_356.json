{"test_class": {"identifier": "HSBTypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/library/types/HSBTypeTest.java"}, "test_case": {"identifier": "testConversionToPointType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConversionToPointType() {\n        // should not be possible => null\n        assertEquals(null, new HSBType(\"100,100,100\").as(PointType.class));\n    }", "signature": "void testConversionToPointType()", "full_signature": "@Test public void testConversionToPointType()", "class_method_signature": "HSBTypeTest.testConversionToPointType()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "as"]}, "focal_class": {"identifier": "HSBType", "superclass": "extends PercentType", "interfaces": "implements ComplexType, State, Command", "fields": [{"original_string": "private static final long serialVersionUID = 322902950356613226L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 322902950356613226L", "var_name": "serialVersionUID"}, {"original_string": "public static final String KEY_HUE = \"h\";", "modifier": "public static final", "type": "String", "declarator": "KEY_HUE = \"h\"", "var_name": "KEY_HUE"}, {"original_string": "public static final String KEY_SATURATION = \"s\";", "modifier": "public static final", "type": "String", "declarator": "KEY_SATURATION = \"s\"", "var_name": "KEY_SATURATION"}, {"original_string": "public static final String KEY_BRIGHTNESS = \"b\";", "modifier": "public static final", "type": "String", "declarator": "KEY_BRIGHTNESS = \"b\"", "var_name": "KEY_BRIGHTNESS"}, {"original_string": "public static final HSBType BLACK = new HSBType(\"0,0,0\");", "modifier": "public static final", "type": "HSBType", "declarator": "BLACK = new HSBType(\"0,0,0\")", "var_name": "BLACK"}, {"original_string": "public static final HSBType WHITE = new HSBType(\"0,0,100\");", "modifier": "public static final", "type": "HSBType", "declarator": "WHITE = new HSBType(\"0,0,100\")", "var_name": "WHITE"}, {"original_string": "public static final HSBType RED = new HSBType(\"0,100,100\");", "modifier": "public static final", "type": "HSBType", "declarator": "RED = new HSBType(\"0,100,100\")", "var_name": "RED"}, {"original_string": "public static final HSBType GREEN = new HSBType(\"120,100,100\");", "modifier": "public static final", "type": "HSBType", "declarator": "GREEN = new HSBType(\"120,100,100\")", "var_name": "GREEN"}, {"original_string": "public static final HSBType BLUE = new HSBType(\"240,100,100\");", "modifier": "public static final", "type": "HSBType", "declarator": "BLUE = new HSBType(\"240,100,100\")", "var_name": "BLUE"}, {"original_string": "private static final float XY2RGB[][] = { { 3.2406f, -1.5372f, -0.4986f }, { -0.9689f, 1.8758f, 0.0415f },\n            { 0.0557f, -0.2040f, 1.0570f } };", "modifier": "private static final", "type": "float", "declarator": "XY2RGB[][] = { { 3.2406f, -1.5372f, -0.4986f }, { -0.9689f, 1.8758f, 0.0415f },\n            { 0.0557f, -0.2040f, 1.0570f } }", "var_name": "XY2RGB"}, {"original_string": "private static final float RGB2XY[][] = { { 0.4124f, 0.3576f, 0.1805f }, { 0.2126f, 0.7152f, 0.0722f },\n            { 0.0193f, 0.1192f, 0.9505f } };", "modifier": "private static final", "type": "float", "declarator": "RGB2XY[][] = { { 0.4124f, 0.3576f, 0.1805f }, { 0.2126f, 0.7152f, 0.0722f },\n            { 0.0193f, 0.1192f, 0.9505f } }", "var_name": "RGB2XY"}, {"original_string": "protected BigDecimal hue;", "modifier": "protected", "type": "BigDecimal", "declarator": "hue", "var_name": "hue"}, {"original_string": "protected BigDecimal saturation;", "modifier": "protected", "type": "BigDecimal", "declarator": "saturation", "var_name": "saturation"}], "methods": [{"identifier": "HSBType", "parameters": "()", "modifiers": "public", "return": "", "signature": " HSBType()", "full_signature": "public  HSBType()", "class_method_signature": "HSBType.HSBType()", "testcase": false, "constructor": true}, {"identifier": "HSBType", "parameters": "(DecimalType h, PercentType s, PercentType b)", "modifiers": "public", "return": "", "signature": " HSBType(DecimalType h, PercentType s, PercentType b)", "full_signature": "public  HSBType(DecimalType h, PercentType s, PercentType b)", "class_method_signature": "HSBType.HSBType(DecimalType h, PercentType s, PercentType b)", "testcase": false, "constructor": true}, {"identifier": "HSBType", "parameters": "(String value)", "modifiers": "public", "return": "", "signature": " HSBType(String value)", "full_signature": "public  HSBType(String value)", "class_method_signature": "HSBType.HSBType(String value)", "testcase": false, "constructor": true}, {"identifier": "validateValue", "parameters": "(BigDecimal hue, BigDecimal saturation, BigDecimal value)", "modifiers": "private", "return": "void", "signature": "void validateValue(BigDecimal hue, BigDecimal saturation, BigDecimal value)", "full_signature": "private void validateValue(BigDecimal hue, BigDecimal saturation, BigDecimal value)", "class_method_signature": "HSBType.validateValue(BigDecimal hue, BigDecimal saturation, BigDecimal value)", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(String value)", "modifiers": "public static", "return": "HSBType", "signature": "HSBType valueOf(String value)", "full_signature": "public static HSBType valueOf(String value)", "class_method_signature": "HSBType.valueOf(String value)", "testcase": false, "constructor": false}, {"identifier": "fromRGB", "parameters": "(int r, int g, int b)", "modifiers": "public static", "return": "HSBType", "signature": "HSBType fromRGB(int r, int g, int b)", "full_signature": "public static HSBType fromRGB(int r, int g, int b)", "class_method_signature": "HSBType.fromRGB(int r, int g, int b)", "testcase": false, "constructor": false}, {"identifier": "fromXY", "parameters": "(float x, float y)", "modifiers": "public static", "return": "HSBType", "signature": "HSBType fromXY(float x, float y)", "full_signature": "public static HSBType fromXY(float x, float y)", "class_method_signature": "HSBType.fromXY(float x, float y)", "testcase": false, "constructor": false}, {"identifier": "getConstituents", "parameters": "()", "modifiers": "@Override public", "return": "SortedMap<String, PrimitiveType>", "signature": "SortedMap<String, PrimitiveType> getConstituents()", "full_signature": "@Override public SortedMap<String, PrimitiveType> getConstituents()", "class_method_signature": "HSBType.getConstituents()", "testcase": false, "constructor": false}, {"identifier": "getHue", "parameters": "()", "modifiers": "public", "return": "DecimalType", "signature": "DecimalType getHue()", "full_signature": "public DecimalType getHue()", "class_method_signature": "HSBType.getHue()", "testcase": false, "constructor": false}, {"identifier": "getSaturation", "parameters": "()", "modifiers": "public", "return": "PercentType", "signature": "PercentType getSaturation()", "full_signature": "public PercentType getSaturation()", "class_method_signature": "HSBType.getSaturation()", "testcase": false, "constructor": false}, {"identifier": "getBrightness", "parameters": "()", "modifiers": "public", "return": "PercentType", "signature": "PercentType getBrightness()", "full_signature": "public PercentType getBrightness()", "class_method_signature": "HSBType.getBrightness()", "testcase": false, "constructor": false}, {"identifier": "getRed", "parameters": "()", "modifiers": "public", "return": "PercentType", "signature": "PercentType getRed()", "full_signature": "public PercentType getRed()", "class_method_signature": "HSBType.getRed()", "testcase": false, "constructor": false}, {"identifier": "getGreen", "parameters": "()", "modifiers": "public", "return": "PercentType", "signature": "PercentType getGreen()", "full_signature": "public PercentType getGreen()", "class_method_signature": "HSBType.getGreen()", "testcase": false, "constructor": false}, {"identifier": "getBlue", "parameters": "()", "modifiers": "public", "return": "PercentType", "signature": "PercentType getBlue()", "full_signature": "public PercentType getBlue()", "class_method_signature": "HSBType.getBlue()", "testcase": false, "constructor": false}, {"identifier": "getRGB", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRGB()", "full_signature": "public int getRGB()", "class_method_signature": "HSBType.getRGB()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HSBType.toString()", "testcase": false, "constructor": false}, {"identifier": "toFullString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toFullString()", "full_signature": "@Override public String toFullString()", "class_method_signature": "HSBType.toFullString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "HSBType.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(@Nullable Object obj)", "full_signature": "@Override public boolean equals(@Nullable Object obj)", "class_method_signature": "HSBType.equals(@Nullable Object obj)", "testcase": false, "constructor": false}, {"identifier": "toRGB", "parameters": "()", "modifiers": "public", "return": "PercentType[]", "signature": "PercentType[] toRGB()", "full_signature": "public PercentType[] toRGB()", "class_method_signature": "HSBType.toRGB()", "testcase": false, "constructor": false}, {"identifier": "gammaCompress", "parameters": "(float c)", "modifiers": "private static", "return": "float", "signature": "float gammaCompress(float c)", "full_signature": "private static float gammaCompress(float c)", "class_method_signature": "HSBType.gammaCompress(float c)", "testcase": false, "constructor": false}, {"identifier": "gammaDecompress", "parameters": "(float c)", "modifiers": "private static", "return": "float", "signature": "float gammaDecompress(float c)", "full_signature": "private static float gammaDecompress(float c)", "class_method_signature": "HSBType.gammaDecompress(float c)", "testcase": false, "constructor": false}, {"identifier": "toXY", "parameters": "()", "modifiers": "public", "return": "PercentType[]", "signature": "PercentType[] toXY()", "full_signature": "public PercentType[] toXY()", "class_method_signature": "HSBType.toXY()", "testcase": false, "constructor": false}, {"identifier": "convertPercentToByte", "parameters": "(PercentType percent)", "modifiers": "private", "return": "int", "signature": "int convertPercentToByte(PercentType percent)", "full_signature": "private int convertPercentToByte(PercentType percent)", "class_method_signature": "HSBType.convertPercentToByte(PercentType percent)", "testcase": false, "constructor": false}, {"identifier": "as", "parameters": "(@Nullable Class<T> target)", "modifiers": "@Override public", "return": "T", "signature": "T as(@Nullable Class<T> target)", "full_signature": "@Override public T as(@Nullable Class<T> target)", "class_method_signature": "HSBType.as(@Nullable Class<T> target)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/library/types/HSBType.java"}, "focal_method": {"identifier": "as", "parameters": "(@Nullable Class<T> target)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T extends State> @Nullable T as(@Nullable Class<T> target) {\n        if (target == OnOffType.class) {\n            // if brightness is not completely off, we consider the state to be on\n            return target.cast(PercentType.ZERO.equals(getBrightness()) ? OnOffType.OFF : OnOffType.ON);\n        } else if (target == DecimalType.class) {\n            return target.cast(new DecimalType(\n                    getBrightness().toBigDecimal().divide(BigDecimal.valueOf(100), 8, RoundingMode.UP)));\n        } else if (target == PercentType.class) {\n            return target.cast(new PercentType(getBrightness().toBigDecimal()));\n        } else {\n            return defaultConversion(target);\n        }\n    }", "signature": "T as(@Nullable Class<T> target)", "full_signature": "@Override public T as(@Nullable Class<T> target)", "class_method_signature": "HSBType.as(@Nullable Class<T> target)", "testcase": false, "constructor": false, "invocations": ["cast", "equals", "getBrightness", "cast", "divide", "toBigDecimal", "getBrightness", "valueOf", "cast", "toBigDecimal", "getBrightness", "defaultConversion"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}