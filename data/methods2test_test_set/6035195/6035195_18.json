{"test_class": {"identifier": "CheckProcessesEndedTest", "superclass": "extends CheckProcessesTest", "interfaces": "", "fields": [{"original_string": "private static final String PROCESS_IDS = \"process_ids\";", "modifier": "private static final", "type": "String", "declarator": "PROCESS_IDS = \"process_ids\"", "var_name": "PROCESS_IDS"}, {"original_string": "private static final String RESULT = \"result\";", "modifier": "private static final", "type": "String", "declarator": "RESULT = \"result\"", "var_name": "RESULT"}], "file": "core/src/test/java/com/axemblr/provisionr/core/activities/CheckProcessesEndedTest.java"}, "test_case": {"identifier": "testWithOneEndedAndOneStillRunning", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithOneEndedAndOneStillRunning() throws Exception {\n        DelegateExecution execution = mock(DelegateExecution.class);\n        when(execution.getVariable(eq(PROCESS_IDS))).thenReturn(Lists.newArrayList(\"1\", \"2\"));\n\n        ProcessVariablesCollector collector = new ProcessVariablesCollector();\n        collector.install(execution);\n\n        RuntimeService runtimeService = mockRuntimeService(ImmutableMap.of(\n            \"1\", mockProcessInstance(/* ended= */ true),\n            \"2\", mockProcessInstance(/* ended= */ false)\n        ));\n\n        JavaDelegate delegate = new CheckProcessesEnded(runtimeService, PROCESS_IDS, RESULT);\n        delegate.execute(execution);\n\n        assertThat((Boolean) collector.getVariable(RESULT)).isFalse();\n    }", "signature": "void testWithOneEndedAndOneStillRunning()", "full_signature": "@Test public void testWithOneEndedAndOneStillRunning()", "class_method_signature": "CheckProcessesEndedTest.testWithOneEndedAndOneStillRunning()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getVariable", "eq", "newArrayList", "install", "mockRuntimeService", "of", "mockProcessInstance", "mockProcessInstance", "execute", "isFalse", "assertThat", "getVariable"]}, "focal_class": {"identifier": "CheckProcessesEnded", "superclass": "", "interfaces": "implements JavaDelegate", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(CheckProcessesEnded.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CheckProcessesEnded.class)", "var_name": "LOG"}, {"original_string": "private final RuntimeService runtimeService;", "modifier": "private final", "type": "RuntimeService", "declarator": "runtimeService", "var_name": "runtimeService"}, {"original_string": "private final String variableWithProcessIds;", "modifier": "private final", "type": "String", "declarator": "variableWithProcessIds", "var_name": "variableWithProcessIds"}, {"original_string": "private final String resultVariable;", "modifier": "private final", "type": "String", "declarator": "resultVariable", "var_name": "resultVariable"}], "methods": [{"identifier": "CheckProcessesEnded", "parameters": "(RuntimeService runtimeService, String variableWithProcessIds,\n                               String resultVariable)", "modifiers": "public", "return": "", "signature": " CheckProcessesEnded(RuntimeService runtimeService, String variableWithProcessIds,\n                               String resultVariable)", "full_signature": "public  CheckProcessesEnded(RuntimeService runtimeService, String variableWithProcessIds,\n                               String resultVariable)", "class_method_signature": "CheckProcessesEnded.CheckProcessesEnded(RuntimeService runtimeService, String variableWithProcessIds,\n                               String resultVariable)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(DelegateExecution execution)", "modifiers": "@Override public", "return": "void", "signature": "void execute(DelegateExecution execution)", "full_signature": "@Override public void execute(DelegateExecution execution)", "class_method_signature": "CheckProcessesEnded.execute(DelegateExecution execution)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/axemblr/provisionr/core/activities/CheckProcessesEnded.java"}, "focal_method": {"identifier": "execute", "parameters": "(DelegateExecution execution)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(DelegateExecution execution) throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        List<String> processIds = (List<String>) execution.getVariable(variableWithProcessIds);\n\n        List<String> ended = Lists.newArrayList(Iterables.filter(processIds, new Predicate<String>() {\n            @Override\n            public boolean apply(String processInstanceId) {\n                ProcessInstance instance = runtimeService.createProcessInstanceQuery()\n                    .processInstanceId(processInstanceId).singleResult();\n\n                return instance == null || instance.isEnded();\n            }\n        }));\n\n        boolean done = (processIds.size() == ended.size());\n        execution.setVariable(resultVariable, done);\n\n        if (done) {\n            LOG.info(\"All background processes ENDED: {}\", processIds);\n        } else {\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Still waiting for: {}\", Sets.difference(ImmutableSet.copyOf(processIds),\n                    ImmutableSet.copyOf(ended)));\n            }\n        }\n    }", "signature": "void execute(DelegateExecution execution)", "full_signature": "@Override public void execute(DelegateExecution execution)", "class_method_signature": "CheckProcessesEnded.execute(DelegateExecution execution)", "testcase": false, "constructor": false, "invocations": ["getVariable", "newArrayList", "filter", "singleResult", "processInstanceId", "createProcessInstanceQuery", "isEnded", "size", "size", "setVariable", "info", "isInfoEnabled", "info", "difference", "copyOf", "copyOf"]}, "repository": {"repo_id": 6035195, "url": "https://github.com/axemblr/axemblr-provisionr", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 30, "size": 3329, "license": "licensed"}}