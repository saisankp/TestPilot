{"test_class": {"identifier": "AbstractZookeeperTransporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestingServer zkServer;", "modifier": "private", "type": "TestingServer", "declarator": "zkServer", "var_name": "zkServer"}, {"original_string": "private ZookeeperClient zookeeperClient;", "modifier": "private", "type": "ZookeeperClient", "declarator": "zookeeperClient", "var_name": "zookeeperClient"}, {"original_string": "private AbstractZookeeperTransporter abstractZookeeperTransporter;", "modifier": "private", "type": "AbstractZookeeperTransporter", "declarator": "abstractZookeeperTransporter", "var_name": "abstractZookeeperTransporter"}, {"original_string": "private int zkServerPort;", "modifier": "private", "type": "int", "declarator": "zkServerPort", "var_name": "zkServerPort"}], "file": "dubbo-remoting/dubbo-remoting-zookeeper/src/test/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporterTest.java"}, "test_case": {"identifier": "testSameHostWithDifferentUser", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSameHostWithDifferentUser() throws Exception {\n        int zkPort1 = NetUtils.getAvailablePort();\n        int zkPort2 = NetUtils.getAvailablePort();\n        try (TestingServer zkServer1 = new TestingServer(zkPort1, true)) {\n            try (TestingServer zkServer2 = new TestingServer(zkPort2, true)) {\n                URL url1 = URL.valueOf(\"zookeeper://us1:pw1@127.0.0.1:\" + zkPort1 + \"/path1\");\n                URL url2 = URL.valueOf(\"zookeeper://us2:pw2@127.0.0.1:\" + zkPort1 + \"/path2\");\n\n                ZookeeperClient client1 = abstractZookeeperTransporter.connect(url1);\n                ZookeeperClient client2 = abstractZookeeperTransporter.connect(url2);\n\n                assertThat(client1, not(client2));\n            }\n        }\n    }", "signature": "void testSameHostWithDifferentUser()", "full_signature": "@Test public void testSameHostWithDifferentUser()", "class_method_signature": "AbstractZookeeperTransporterTest.testSameHostWithDifferentUser()", "testcase": true, "constructor": false, "invocations": ["getAvailablePort", "getAvailablePort", "valueOf", "valueOf", "connect", "connect", "assertThat", "not"]}, "focal_class": {"identifier": "AbstractZookeeperTransporter", "superclass": "", "interfaces": "implements ZookeeperTransporter", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ZookeeperTransporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ZookeeperTransporter.class)", "var_name": "logger"}, {"original_string": "private final Map<String, ZookeeperClient> zookeeperClientMap = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, ZookeeperClient>", "declarator": "zookeeperClientMap = new ConcurrentHashMap<>()", "var_name": "zookeeperClientMap"}], "methods": [{"identifier": "connect", "parameters": "(URL url)", "modifiers": "@Override public", "return": "ZookeeperClient", "signature": "ZookeeperClient connect(URL url)", "full_signature": "@Override public ZookeeperClient connect(URL url)", "class_method_signature": "AbstractZookeeperTransporter.connect(URL url)", "testcase": false, "constructor": false}, {"identifier": "createZookeeperClient", "parameters": "(URL url)", "modifiers": "protected abstract", "return": "ZookeeperClient", "signature": "ZookeeperClient createZookeeperClient(URL url)", "full_signature": "protected abstract ZookeeperClient createZookeeperClient(URL url)", "class_method_signature": "AbstractZookeeperTransporter.createZookeeperClient(URL url)", "testcase": false, "constructor": false}, {"identifier": "fetchAndUpdateZookeeperClientCache", "parameters": "(List<String> addressList)", "modifiers": "", "return": "ZookeeperClient", "signature": "ZookeeperClient fetchAndUpdateZookeeperClientCache(List<String> addressList)", "full_signature": " ZookeeperClient fetchAndUpdateZookeeperClientCache(List<String> addressList)", "class_method_signature": "AbstractZookeeperTransporter.fetchAndUpdateZookeeperClientCache(List<String> addressList)", "testcase": false, "constructor": false}, {"identifier": "getURLBackupAddress", "parameters": "(URL url)", "modifiers": "", "return": "List<String>", "signature": "List<String> getURLBackupAddress(URL url)", "full_signature": " List<String> getURLBackupAddress(URL url)", "class_method_signature": "AbstractZookeeperTransporter.getURLBackupAddress(URL url)", "testcase": false, "constructor": false}, {"identifier": "writeToClientMap", "parameters": "(List<String> addressList, ZookeeperClient zookeeperClient)", "modifiers": "", "return": "void", "signature": "void writeToClientMap(List<String> addressList, ZookeeperClient zookeeperClient)", "full_signature": " void writeToClientMap(List<String> addressList, ZookeeperClient zookeeperClient)", "class_method_signature": "AbstractZookeeperTransporter.writeToClientMap(List<String> addressList, ZookeeperClient zookeeperClient)", "testcase": false, "constructor": false}, {"identifier": "toClientURL", "parameters": "(URL url)", "modifiers": "", "return": "URL", "signature": "URL toClientURL(URL url)", "full_signature": " URL toClientURL(URL url)", "class_method_signature": "AbstractZookeeperTransporter.toClientURL(URL url)", "testcase": false, "constructor": false}, {"identifier": "getZookeeperClientMap", "parameters": "()", "modifiers": "", "return": "Map<String, ZookeeperClient>", "signature": "Map<String, ZookeeperClient> getZookeeperClientMap()", "full_signature": " Map<String, ZookeeperClient> getZookeeperClientMap()", "class_method_signature": "AbstractZookeeperTransporter.getZookeeperClientMap()", "testcase": false, "constructor": false}], "file": "dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporter.java"}, "focal_method": {"identifier": "connect", "parameters": "(URL url)", "modifiers": "@Override public", "return": "ZookeeperClient", "body": "@Override\n    public ZookeeperClient connect(URL url) {\n        ZookeeperClient zookeeperClient;\n        // address format: {[username:password@]address}\n        List<String> addressList = getURLBackupAddress(url);\n        // The field define the zookeeper server , including protocol, host, port, username, password\n        if ((zookeeperClient = fetchAndUpdateZookeeperClientCache(addressList)) != null && zookeeperClient.isConnected()) {\n            logger.info(\"find valid zookeeper client from the cache for address: \" + url);\n            return zookeeperClient;\n        }\n        // avoid creating too many connections\uff0c so add lock\n        synchronized (zookeeperClientMap) {\n            if ((zookeeperClient = fetchAndUpdateZookeeperClientCache(addressList)) != null && zookeeperClient.isConnected()) {\n                logger.info(\"find valid zookeeper client from the cache for address: \" + url);\n                return zookeeperClient;\n            }\n\n            zookeeperClient = createZookeeperClient(url);\n            logger.info(\"No valid zookeeper client found from cache, therefore create a new client for url. \" + url);\n            writeToClientMap(addressList, zookeeperClient);\n        }\n        return zookeeperClient;\n    }", "signature": "ZookeeperClient connect(URL url)", "full_signature": "@Override public ZookeeperClient connect(URL url)", "class_method_signature": "AbstractZookeeperTransporter.connect(URL url)", "testcase": false, "constructor": false, "invocations": ["getURLBackupAddress", "fetchAndUpdateZookeeperClientCache", "isConnected", "info", "fetchAndUpdateZookeeperClientCache", "isConnected", "info", "createZookeeperClient", "info", "writeToClientMap"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}