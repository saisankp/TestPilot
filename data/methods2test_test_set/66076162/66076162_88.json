{"test_class": {"identifier": "PermissionDataProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PermissionActionProvider permissionActionProvider;", "modifier": "private", "type": "PermissionActionProvider", "declarator": "permissionActionProvider", "var_name": "permissionActionProvider"}, {"original_string": "@Mock private AndroidPermissionChecker mockAndroidPermissionChecker;", "modifier": "@Mock private", "type": "AndroidPermissionChecker", "declarator": "mockAndroidPermissionChecker", "var_name": "mockAndroidPermissionChecker"}, {"original_string": "@Mock private PermissionEntityDataMapper mockPermissionEntityDataMapper;", "modifier": "@Mock private", "type": "PermissionEntityDataMapper", "declarator": "mockPermissionEntityDataMapper", "var_name": "mockPermissionEntityDataMapper"}], "file": "infrastructure/src/test/java/com/remotecraft/app/infrastructure/provider/PermissionDataProviderTest.java"}, "test_case": {"identifier": "shouldNotifyPermissionIsGrantedWhenItsActuallyGranted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldNotifyPermissionIsGrantedWhenItsActuallyGranted() throws Exception {\n    Permission permission = getPermission();\n    PermissionEntity permissionEntity = getPermissionEntity();\n    when(mockPermissionEntityDataMapper.transformInverse(permission)).thenReturn(permissionEntity);\n    when(mockAndroidPermissionChecker.checkSelfPermission(any(Context.class),\n        same(permissionEntity))).thenReturn(0);\n    when(mockAndroidPermissionChecker.isGranted(0)).thenReturn(true);\n\n    Single<Boolean> isGranted = permissionActionProvider.isGranted(permission);\n\n    assertThat(isGranted).isNotNull();\n    TestObserver<Boolean> testObserver = isGranted.test();\n    testObserver.assertNoErrors();\n    List<Boolean> streamValues = testObserver.values();\n    assertThat(streamValues).isNotNull();\n    assertThat(streamValues.size()).isEqualTo(1);\n    assertThat(streamValues.get(0)).isTrue();\n  }", "signature": "void shouldNotifyPermissionIsGrantedWhenItsActuallyGranted()", "full_signature": "@Test public void shouldNotifyPermissionIsGrantedWhenItsActuallyGranted()", "class_method_signature": "PermissionDataProviderTest.shouldNotifyPermissionIsGrantedWhenItsActuallyGranted()", "testcase": true, "constructor": false, "invocations": ["getPermission", "getPermissionEntity", "thenReturn", "when", "transformInverse", "thenReturn", "when", "checkSelfPermission", "any", "same", "thenReturn", "when", "isGranted", "isGranted", "isNotNull", "assertThat", "test", "assertNoErrors", "values", "isNotNull", "assertThat", "isEqualTo", "assertThat", "size", "isTrue", "assertThat", "get"]}, "focal_class": {"identifier": "PermissionDataProvider", "superclass": "", "interfaces": "implements PermissionActionProvider", "fields": [{"original_string": "@Inject Context context;", "modifier": "@Inject", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "@Inject Activity activity;", "modifier": "@Inject", "type": "Activity", "declarator": "activity", "var_name": "activity"}, {"original_string": "private final PermissionChecker permissionChecker;", "modifier": "private final", "type": "PermissionChecker", "declarator": "permissionChecker", "var_name": "permissionChecker"}, {"original_string": "private final PermissionEntityDataMapper permissionEntityDataMapper;", "modifier": "private final", "type": "PermissionEntityDataMapper", "declarator": "permissionEntityDataMapper", "var_name": "permissionEntityDataMapper"}], "methods": [{"identifier": "PermissionDataProvider", "parameters": "(AndroidPermissionChecker androidPermissionChecker,\n      PermissionEntityDataMapper permissionEntityDataMapper)", "modifiers": "@Inject public", "return": "", "signature": " PermissionDataProvider(AndroidPermissionChecker androidPermissionChecker,\n      PermissionEntityDataMapper permissionEntityDataMapper)", "full_signature": "@Inject public  PermissionDataProvider(AndroidPermissionChecker androidPermissionChecker,\n      PermissionEntityDataMapper permissionEntityDataMapper)", "class_method_signature": "PermissionDataProvider.PermissionDataProvider(AndroidPermissionChecker androidPermissionChecker,\n      PermissionEntityDataMapper permissionEntityDataMapper)", "testcase": false, "constructor": true}, {"identifier": "isGranted", "parameters": "(Permission permission)", "modifiers": "@Override public", "return": "Single<Boolean>", "signature": "Single<Boolean> isGranted(Permission permission)", "full_signature": "@Override public Single<Boolean> isGranted(Permission permission)", "class_method_signature": "PermissionDataProvider.isGranted(Permission permission)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(Permission permission)", "modifiers": "@Override public", "return": "Single<Boolean>", "signature": "Single<Boolean> request(Permission permission)", "full_signature": "@Override public Single<Boolean> request(Permission permission)", "class_method_signature": "PermissionDataProvider.request(Permission permission)", "testcase": false, "constructor": false}, {"identifier": "getPermissionDeniedListener", "parameters": "(Activity activity,\n      PermissionEntity permissionEntity)", "modifiers": "private", "return": "PermissionListener", "signature": "PermissionListener getPermissionDeniedListener(Activity activity,\n      PermissionEntity permissionEntity)", "full_signature": "private PermissionListener getPermissionDeniedListener(Activity activity,\n      PermissionEntity permissionEntity)", "class_method_signature": "PermissionDataProvider.getPermissionDeniedListener(Activity activity,\n      PermissionEntity permissionEntity)", "testcase": false, "constructor": false}, {"identifier": "getPermissionRequestListener", "parameters": "(PermissionEntity permissionEntity,\n      ObservableEmitter<Boolean> emitter)", "modifiers": "private", "return": "PermissionListener", "signature": "PermissionListener getPermissionRequestListener(PermissionEntity permissionEntity,\n      ObservableEmitter<Boolean> emitter)", "full_signature": "private PermissionListener getPermissionRequestListener(PermissionEntity permissionEntity,\n      ObservableEmitter<Boolean> emitter)", "class_method_signature": "PermissionDataProvider.getPermissionRequestListener(PermissionEntity permissionEntity,\n      ObservableEmitter<Boolean> emitter)", "testcase": false, "constructor": false}], "file": "infrastructure/src/main/java/com/remotecraft/app/infrastructure/provider/PermissionDataProvider.java"}, "focal_method": {"identifier": "isGranted", "parameters": "(Permission permission)", "modifiers": "@Override public", "return": "Single<Boolean>", "body": "@Override\n  public Single<Boolean> isGranted(Permission permission) {\n    PermissionEntity permissionEntity = permissionEntityDataMapper.transformInverse(permission);\n\n    return Single.just(permissionChecker.checkSelfPermission(context, permissionEntity))\n        .map(permissionChecker::isGranted);\n  }", "signature": "Single<Boolean> isGranted(Permission permission)", "full_signature": "@Override public Single<Boolean> isGranted(Permission permission)", "class_method_signature": "PermissionDataProvider.isGranted(Permission permission)", "testcase": false, "constructor": false, "invocations": ["transformInverse", "map", "just", "checkSelfPermission"]}, "repository": {"repo_id": 66076162, "url": "https://github.com/RemotecraftProject/RemotecraftApp", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 2502, "license": "licensed"}}