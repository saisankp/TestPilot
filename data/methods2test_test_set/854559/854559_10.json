{"test_class": {"identifier": "PortfolioManagementUserListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CommandGateway commandGateway = mock(CommandGateway.class);", "modifier": "private final", "type": "CommandGateway", "declarator": "commandGateway = mock(CommandGateway.class)", "var_name": "commandGateway"}, {"original_string": "private final PortfolioManagementUserListener listener = new PortfolioManagementUserListener(commandGateway);", "modifier": "private final", "type": "PortfolioManagementUserListener", "declarator": "listener = new PortfolioManagementUserListener(commandGateway)", "var_name": "listener"}], "file": "orders/src/test/java/org/axonframework/samples/trader/orders/command/PortfolioManagementUserListenerTest.java"}, "test_case": {"identifier": "checkPortfolioCreationAfterUserCreated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkPortfolioCreationAfterUserCreated() {\n        UserId userId = new UserId();\n\n        listener.on(new UserCreatedEvent(userId, \"Test\", \"testuser\", \"testpassword\"));\n\n        verify(commandGateway).send(argThat(new CreatePortfolioCommandMatcher(userId)));\n    }", "signature": "void checkPortfolioCreationAfterUserCreated()", "full_signature": "@Test public void checkPortfolioCreationAfterUserCreated()", "class_method_signature": "PortfolioManagementUserListenerTest.checkPortfolioCreationAfterUserCreated()", "testcase": true, "constructor": false, "invocations": ["on", "send", "verify", "argThat"]}, "focal_class": {"identifier": "PortfolioManagementUserListener", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(PortfolioManagementUserListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PortfolioManagementUserListener.class)", "var_name": "logger"}, {"original_string": "private final CommandGateway commandGateway;", "modifier": "private final", "type": "CommandGateway", "declarator": "commandGateway", "var_name": "commandGateway"}], "methods": [{"identifier": "PortfolioManagementUserListener", "parameters": "(CommandGateway commandGateway)", "modifiers": "@Autowired public", "return": "", "signature": " PortfolioManagementUserListener(CommandGateway commandGateway)", "full_signature": "@Autowired public  PortfolioManagementUserListener(CommandGateway commandGateway)", "class_method_signature": "PortfolioManagementUserListener.PortfolioManagementUserListener(CommandGateway commandGateway)", "testcase": false, "constructor": true}, {"identifier": "on", "parameters": "(UserCreatedEvent event)", "modifiers": "@EventHandler public", "return": "void", "signature": "void on(UserCreatedEvent event)", "full_signature": "@EventHandler public void on(UserCreatedEvent event)", "class_method_signature": "PortfolioManagementUserListener.on(UserCreatedEvent event)", "testcase": false, "constructor": false}], "file": "orders/src/main/java/org/axonframework/samples/trader/orders/command/PortfolioManagementUserListener.java"}, "focal_method": {"identifier": "on", "parameters": "(UserCreatedEvent event)", "modifiers": "@EventHandler public", "return": "void", "body": "@EventHandler\n    public void on(UserCreatedEvent event) {\n        logger.debug(\"About to dispatch a new command to create a Portfolio for the new user {}\", event.getUserId());\n        commandGateway.send(new CreatePortfolioCommand(new PortfolioId(), event.getUserId()));\n    }", "signature": "void on(UserCreatedEvent event)", "full_signature": "@EventHandler public void on(UserCreatedEvent event)", "class_method_signature": "PortfolioManagementUserListener.on(UserCreatedEvent event)", "testcase": false, "constructor": false, "invocations": ["debug", "getUserId", "send", "getUserId"]}, "repository": {"repo_id": 854559, "url": "https://github.com/AxonFramework/Axon-trader", "language": "Java", "is_fork": false, "fork_count": 178, "stargazer_count": 356, "size": 1455, "license": "licensed"}}