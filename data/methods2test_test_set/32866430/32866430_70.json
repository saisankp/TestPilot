{"test_class": {"identifier": "SessionLogoutResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject ObjectMapper mapper;", "modifier": "@Inject", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "@Inject GCMEncryptor GCMEncryptor;", "modifier": "@Inject", "type": "GCMEncryptor", "declarator": "GCMEncryptor", "var_name": "GCMEncryptor"}, {"original_string": "@Inject @SessionCookie CookieConfig sessionCookieConfig;", "modifier": "@Inject @SessionCookie", "type": "CookieConfig", "declarator": "sessionCookieConfig", "var_name": "sessionCookieConfig"}, {"original_string": "Clock clock = Clock.fixed(Instant.now(), ZoneId.of(\"UTC\"));", "modifier": "", "type": "Clock", "declarator": "clock = Clock.fixed(Instant.now(), ZoneId.of(\"UTC\"))", "var_name": "clock"}, {"original_string": "AuthenticatedEncryptedCookieFactory cookieFactory;", "modifier": "", "type": "AuthenticatedEncryptedCookieFactory", "declarator": "cookieFactory", "var_name": "cookieFactory"}, {"original_string": "CookieAuthenticator cookieAuthenticator;", "modifier": "", "type": "CookieAuthenticator", "declarator": "cookieAuthenticator", "var_name": "cookieAuthenticator"}, {"original_string": "SessionLogoutResource sessionLogoutResource;", "modifier": "", "type": "SessionLogoutResource", "declarator": "sessionLogoutResource", "var_name": "sessionLogoutResource"}], "file": "server/src/test/java/keywhiz/service/resources/admin/SessionLogoutResourceTest.java"}, "test_case": {"identifier": "logoutResourceDeletesSessionCookie", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void logoutResourceDeletesSessionCookie() throws Exception {\n    NewCookie cookie = cookieFactory.getSessionCookie(User.named(\"Me\"), ZonedDateTime.now(clock).plusDays(1));\n    Response response = sessionLogoutResource.logout(cookie);\n\n    assertThat(response.getStatus()).isEqualTo(200);\n\n    String resultCookie = response.getMetadata().getFirst(\"Set-Cookie\").toString();\n    assertThat(resultCookie)\n        .contains(\"HttpOnly\")\n        .contains(\"Secure\")\n        .contains(\"Path=/admin;\")\n        .contains(\"session=expired;\");\n  }", "signature": "void logoutResourceDeletesSessionCookie()", "full_signature": "@Test public void logoutResourceDeletesSessionCookie()", "class_method_signature": "SessionLogoutResourceTest.logoutResourceDeletesSessionCookie()", "testcase": true, "constructor": false, "invocations": ["getSessionCookie", "named", "plusDays", "now", "logout", "isEqualTo", "assertThat", "getStatus", "toString", "getFirst", "getMetadata", "contains", "contains", "contains", "contains", "assertThat"]}, "focal_class": {"identifier": "SessionLogoutResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SessionLogoutResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SessionLogoutResource.class)", "var_name": "logger"}, {"original_string": "private final CookieAuthenticator cookieAuthenticator;", "modifier": "private final", "type": "CookieAuthenticator", "declarator": "cookieAuthenticator", "var_name": "cookieAuthenticator"}, {"original_string": "private final AuthenticatedEncryptedCookieFactory cookieFactory;", "modifier": "private final", "type": "AuthenticatedEncryptedCookieFactory", "declarator": "cookieFactory", "var_name": "cookieFactory"}], "methods": [{"identifier": "SessionLogoutResource", "parameters": "(CookieAuthenticator cookieAuthenticator,\n      AuthenticatedEncryptedCookieFactory cookieFactory)", "modifiers": "@Inject public", "return": "", "signature": " SessionLogoutResource(CookieAuthenticator cookieAuthenticator,\n      AuthenticatedEncryptedCookieFactory cookieFactory)", "full_signature": "@Inject public  SessionLogoutResource(CookieAuthenticator cookieAuthenticator,\n      AuthenticatedEncryptedCookieFactory cookieFactory)", "class_method_signature": "SessionLogoutResource.SessionLogoutResource(CookieAuthenticator cookieAuthenticator,\n      AuthenticatedEncryptedCookieFactory cookieFactory)", "testcase": false, "constructor": true}, {"identifier": "logout", "parameters": "(@Nullable @CookieParam(value = \"session\") Cookie sessionCookie)", "modifiers": "@Timed @ExceptionMetered @POST @Produces(APPLICATION_JSON) public", "return": "Response", "signature": "Response logout(@Nullable @CookieParam(value = \"session\") Cookie sessionCookie)", "full_signature": "@Timed @ExceptionMetered @POST @Produces(APPLICATION_JSON) public Response logout(@Nullable @CookieParam(value = \"session\") Cookie sessionCookie)", "class_method_signature": "SessionLogoutResource.logout(@Nullable @CookieParam(value = \"session\") Cookie sessionCookie)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/resources/admin/SessionLogoutResource.java"}, "focal_method": {"identifier": "logout", "parameters": "(@Nullable @CookieParam(value = \"session\") Cookie sessionCookie)", "modifiers": "@Timed @ExceptionMetered @POST @Produces(APPLICATION_JSON) public", "return": "Response", "body": "@Timed @ExceptionMetered\n  @POST\n  @Produces(APPLICATION_JSON)\n  public Response logout(@Nullable @CookieParam(value = \"session\") Cookie sessionCookie) {\n    if (sessionCookie != null) {\n      Optional<User> user = cookieAuthenticator.authenticate(sessionCookie);\n\n      if (user.isPresent()) {\n        logger.info(\"User logged out: {}\", user.get().getName());\n      } else {\n        logger.warn(\"Invalid user cookie on logout.\");\n      }\n    }\n\n    NewCookie expiredCookie = cookieFactory.getExpiredSessionCookie();\n\n    return Response.ok()\n        .header(HttpHeaders.SET_COOKIE, expiredCookie.toString())\n        .build();\n  }", "signature": "Response logout(@Nullable @CookieParam(value = \"session\") Cookie sessionCookie)", "full_signature": "@Timed @ExceptionMetered @POST @Produces(APPLICATION_JSON) public Response logout(@Nullable @CookieParam(value = \"session\") Cookie sessionCookie)", "class_method_signature": "SessionLogoutResource.logout(@Nullable @CookieParam(value = \"session\") Cookie sessionCookie)", "testcase": false, "constructor": false, "invocations": ["authenticate", "isPresent", "info", "getName", "get", "warn", "getExpiredSessionCookie", "build", "header", "ok", "toString"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}