{"test_class": {"identifier": "HeartBeatTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private URL url = URL.valueOf(\"dubbo://localhost:20880\");", "modifier": "private", "type": "URL", "declarator": "url = URL.valueOf(\"dubbo://localhost:20880\")", "var_name": "url"}, {"original_string": "private MockChannel channel;", "modifier": "private", "type": "MockChannel", "declarator": "channel", "var_name": "channel"}, {"original_string": "private HeartBeatTask task;", "modifier": "private", "type": "HeartBeatTask", "declarator": "task", "var_name": "task"}], "file": "dubbo-remoting/dubbo-remoting-api/src/test/java/com/alibaba/dubbo/remoting/exchange/support/header/HeartBeatTaskTest.java"}, "test_case": {"identifier": "testHeartBeat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHeartBeat() throws Exception {\n        url = url.addParameter(Constants.DUBBO_VERSION_KEY, \"2.1.1\");\n        channel.setAttribute(\n                HeaderExchangeHandler.KEY_READ_TIMESTAMP, System.currentTimeMillis());\n        channel.setAttribute(\n                HeaderExchangeHandler.KEY_WRITE_TIMESTAMP, System.currentTimeMillis());\n        Thread.sleep(2000L);\n        task.run();\n        List<Object> objects = channel.getSentObjects();\n        Assert.assertTrue(objects.size() > 0);\n        Object obj = objects.get(0);\n        Assert.assertTrue(obj instanceof Request);\n        Request request = (Request) obj;\n        Assert.assertTrue(request.isHeartbeat());\n    }", "signature": "void testHeartBeat()", "full_signature": "@Test public void testHeartBeat()", "class_method_signature": "HeartBeatTaskTest.testHeartBeat()", "testcase": true, "constructor": false, "invocations": ["addParameter", "setAttribute", "currentTimeMillis", "setAttribute", "currentTimeMillis", "sleep", "run", "getSentObjects", "assertTrue", "size", "get", "assertTrue", "assertTrue", "isHeartbeat"]}, "focal_class": {"identifier": "HeartBeatTask", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(HeartBeatTask.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HeartBeatTask.class)", "var_name": "logger"}, {"original_string": "private ChannelProvider channelProvider;", "modifier": "private", "type": "ChannelProvider", "declarator": "channelProvider", "var_name": "channelProvider"}, {"original_string": "private int heartbeat;", "modifier": "private", "type": "int", "declarator": "heartbeat", "var_name": "heartbeat"}, {"original_string": "private int heartbeatTimeout;", "modifier": "private", "type": "int", "declarator": "heartbeatTimeout", "var_name": "heartbeatTimeout"}], "methods": [{"identifier": "HeartBeatTask", "parameters": "(ChannelProvider provider, int heartbeat, int heartbeatTimeout)", "modifiers": "", "return": "", "signature": " HeartBeatTask(ChannelProvider provider, int heartbeat, int heartbeatTimeout)", "full_signature": "  HeartBeatTask(ChannelProvider provider, int heartbeat, int heartbeatTimeout)", "class_method_signature": "HeartBeatTask.HeartBeatTask(ChannelProvider provider, int heartbeat, int heartbeatTimeout)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "HeartBeatTask.run()", "testcase": false, "constructor": false}], "file": "dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/exchange/support/header/HeartBeatTask.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() {\n        try {\n            long now = System.currentTimeMillis();\n            for (Channel channel : channelProvider.getChannels()) {\n                if (channel.isClosed()) {\n                    continue;\n                }\n                try {\n                    Long lastRead = (Long) channel.getAttribute(\n                            HeaderExchangeHandler.KEY_READ_TIMESTAMP);\n                    Long lastWrite = (Long) channel.getAttribute(\n                            HeaderExchangeHandler.KEY_WRITE_TIMESTAMP);\n                    if ((lastRead != null && now - lastRead > heartbeat)\n                            || (lastWrite != null && now - lastWrite > heartbeat)) {\n                        Request req = new Request();\n                        req.setVersion(Version.getProtocolVersion());\n                        req.setTwoWay(true);\n                        req.setEvent(Request.HEARTBEAT_EVENT);\n                        channel.send(req);\n                        if (logger.isDebugEnabled()) {\n                            logger.debug(\"Send heartbeat to remote channel \" + channel.getRemoteAddress()\n                                    + \", cause: The channel has no data-transmission exceeds a heartbeat period: \" + heartbeat + \"ms\");\n                        }\n                    }\n                    if (lastRead != null && now - lastRead > heartbeatTimeout) {\n                        logger.warn(\"Close channel \" + channel\n                                + \", because heartbeat read idle time out: \" + heartbeatTimeout + \"ms\");\n                        if (channel instanceof Client) {\n                            try {\n                                ((Client) channel).reconnect();\n                            } catch (Exception e) {\n                                //do nothing\n                            }\n                        } else {\n                            channel.close();\n                        }\n                    }\n                } catch (Throwable t) {\n                    logger.warn(\"Exception when heartbeat to remote channel \" + channel.getRemoteAddress(), t);\n                }\n            }\n        } catch (Throwable t) {\n            logger.warn(\"Unhandled exception when heartbeat, cause: \" + t.getMessage(), t);\n        }\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "HeartBeatTask.run()", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "getChannels", "isClosed", "getAttribute", "getAttribute", "setVersion", "getProtocolVersion", "setTwoWay", "setEvent", "send", "isDebugEnabled", "debug", "getRemoteAddress", "warn", "reconnect", "close", "warn", "getRemoteAddress", "warn", "getMessage"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}