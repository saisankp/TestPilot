{"test_class": {"identifier": "RecommendationTrainerTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/recommendation/RecommendationTrainerTest.java"}, "test_case": {"identifier": "testFit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFit() {\n        int size = 100;\n        Random rnd = new Random(0L);\n        Double[][] ratings = new Double[size][size];\n        // Quadrant I contains \"0\", quadrant II contains \"1\", quadrant III contains \"0\", quadrant IV contains \"1\".\n        for (int i = 0; i < size; i++) {\n            for (int j = 0; j < size; j++) {\n                if (rnd.nextBoolean())\n                    ratings[i][j] = ((i > size / 2) ^ (j > size / 2)) ? 1.0 : 0.0;\n            }\n        }\n\n        int seq = 0;\n        Map<Integer, ObjectSubjectRatingTriplet<Integer, Integer>> data = new HashMap<>();\n        for (ObjectSubjectRatingTriplet<Integer, Integer> triplet : toList(ratings))\n            data.put(seq++, triplet);\n\n        RecommendationTrainer trainer = new RecommendationTrainer()\n            .withLearningRate(50.0)\n            .withBatchSize(10)\n            .withK(2)\n            .withMaxIterations(-1)\n            .withMinMdlImprovement(0.5)\n            .withLearningEnvironmentBuilder(LearningEnvironmentBuilder.defaultBuilder().withRNGSeed(1))\n            .withTrainerEnvironment(LearningEnvironmentBuilder.defaultBuilder().withRNGSeed(1).buildForTrainer());\n\n        RecommendationModel<Integer, Integer> mdl = trainer.fit(new LocalDatasetBuilder<>(data, 10));\n\n        int incorrect = 0;\n        for (ObjectSubjectRatingTriplet<Integer, Integer> triplet : toList(ratings)) {\n            double prediction = Math.round(mdl.predict(triplet));\n            if (Math.abs(prediction - triplet.getRating()) >= 1e-5) incorrect++;\n        }\n\n        assertEquals(0, incorrect);\n    }", "signature": "void testFit()", "full_signature": "@Test public void testFit()", "class_method_signature": "RecommendationTrainerTest.testFit()", "testcase": true, "constructor": false, "invocations": ["nextBoolean", "toList", "put", "withTrainerEnvironment", "withLearningEnvironmentBuilder", "withMinMdlImprovement", "withMaxIterations", "withK", "withBatchSize", "withLearningRate", "withRNGSeed", "defaultBuilder", "buildForTrainer", "withRNGSeed", "defaultBuilder", "fit", "toList", "round", "predict", "abs", "getRating", "assertEquals"]}, "focal_class": {"identifier": "RecommendationTrainer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LearningEnvironmentBuilder environmentBuilder = LearningEnvironmentBuilder.defaultBuilder();", "modifier": "private", "type": "LearningEnvironmentBuilder", "declarator": "environmentBuilder = LearningEnvironmentBuilder.defaultBuilder()", "var_name": "environmentBuilder"}, {"original_string": "private LearningEnvironment trainerEnvironment = environmentBuilder.buildForTrainer();", "modifier": "private", "type": "LearningEnvironment", "declarator": "trainerEnvironment = environmentBuilder.buildForTrainer()", "var_name": "trainerEnvironment"}, {"original_string": "private int batchSize = 1000;", "modifier": "private", "type": "int", "declarator": "batchSize = 1000", "var_name": "batchSize"}, {"original_string": "private double regParam = 0.0;", "modifier": "private", "type": "double", "declarator": "regParam = 0.0", "var_name": "regParam"}, {"original_string": "private double learningRate = 10.0;", "modifier": "private", "type": "double", "declarator": "learningRate = 10.0", "var_name": "learningRate"}, {"original_string": "private int maxIterations = 1000;", "modifier": "private", "type": "int", "declarator": "maxIterations = 1000", "var_name": "maxIterations"}, {"original_string": "private double minMdlImprovement = 0.0;", "modifier": "private", "type": "double", "declarator": "minMdlImprovement = 0.0", "var_name": "minMdlImprovement"}, {"original_string": "private int k = 10;", "modifier": "private", "type": "int", "declarator": "k = 10", "var_name": "k"}], "methods": [{"identifier": "fit", "parameters": "(DatasetBuilder<Object, BinaryObject> datasetBuilder,\n        String objFieldName, String subjFieldName, String ratingFieldName)", "modifiers": "public", "return": "RecommendationModel<Serializable, Serializable>", "signature": "RecommendationModel<Serializable, Serializable> fit(DatasetBuilder<Object, BinaryObject> datasetBuilder,\n        String objFieldName, String subjFieldName, String ratingFieldName)", "full_signature": "public RecommendationModel<Serializable, Serializable> fit(DatasetBuilder<Object, BinaryObject> datasetBuilder,\n        String objFieldName, String subjFieldName, String ratingFieldName)", "class_method_signature": "RecommendationTrainer.fit(DatasetBuilder<Object, BinaryObject> datasetBuilder,\n        String objFieldName, String subjFieldName, String ratingFieldName)", "testcase": false, "constructor": false}, {"identifier": "fit", "parameters": "(\n        DatasetBuilder<K, ? extends ObjectSubjectRatingTriplet<O, S>> datasetBuilder)", "modifiers": "public", "return": "RecommendationModel<O, S>", "signature": "RecommendationModel<O, S> fit(\n        DatasetBuilder<K, ? extends ObjectSubjectRatingTriplet<O, S>> datasetBuilder)", "full_signature": "public RecommendationModel<O, S> fit(\n        DatasetBuilder<K, ? extends ObjectSubjectRatingTriplet<O, S>> datasetBuilder)", "class_method_signature": "RecommendationTrainer.fit(\n        DatasetBuilder<K, ? extends ObjectSubjectRatingTriplet<O, S>> datasetBuilder)", "testcase": false, "constructor": false}, {"identifier": "train", "parameters": "(\n        Dataset<EmptyContext, RecommendationDatasetData<O, S>> dataset)", "modifiers": "private", "return": "RecommendationModel<O, S>", "signature": "RecommendationModel<O, S> train(\n        Dataset<EmptyContext, RecommendationDatasetData<O, S>> dataset)", "full_signature": "private RecommendationModel<O, S> train(\n        Dataset<EmptyContext, RecommendationDatasetData<O, S>> dataset)", "class_method_signature": "RecommendationTrainer.train(\n        Dataset<EmptyContext, RecommendationDatasetData<O, S>> dataset)", "testcase": false, "constructor": false}, {"identifier": "calculateImprovement", "parameters": "(MatrixFactorizationGradient<O, S> grad)", "modifiers": "private", "return": "double", "signature": "double calculateImprovement(MatrixFactorizationGradient<O, S> grad)", "full_signature": "private double calculateImprovement(MatrixFactorizationGradient<O, S> grad)", "class_method_signature": "RecommendationTrainer.calculateImprovement(MatrixFactorizationGradient<O, S> grad)", "testcase": false, "constructor": false}, {"identifier": "generateRandomVectorForEach", "parameters": "(Collection<T> objects, Random rnd)", "modifiers": "private", "return": "Map<T, Vector>", "signature": "Map<T, Vector> generateRandomVectorForEach(Collection<T> objects, Random rnd)", "full_signature": "private Map<T, Vector> generateRandomVectorForEach(Collection<T> objects, Random rnd)", "class_method_signature": "RecommendationTrainer.generateRandomVectorForEach(Collection<T> objects, Random rnd)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Set<T> a, Set<T> b)", "modifiers": "private static", "return": "Set<T>", "signature": "Set<T> join(Set<T> a, Set<T> b)", "full_signature": "private static Set<T> join(Set<T> a, Set<T> b)", "class_method_signature": "RecommendationTrainer.join(Set<T> a, Set<T> b)", "testcase": false, "constructor": false}, {"identifier": "withLearningEnvironmentBuilder", "parameters": "(LearningEnvironmentBuilder environmentBuilder)", "modifiers": "public", "return": "RecommendationTrainer", "signature": "RecommendationTrainer withLearningEnvironmentBuilder(LearningEnvironmentBuilder environmentBuilder)", "full_signature": "public RecommendationTrainer withLearningEnvironmentBuilder(LearningEnvironmentBuilder environmentBuilder)", "class_method_signature": "RecommendationTrainer.withLearningEnvironmentBuilder(LearningEnvironmentBuilder environmentBuilder)", "testcase": false, "constructor": false}, {"identifier": "withTrainerEnvironment", "parameters": "(LearningEnvironment trainerEnvironment)", "modifiers": "public", "return": "RecommendationTrainer", "signature": "RecommendationTrainer withTrainerEnvironment(LearningEnvironment trainerEnvironment)", "full_signature": "public RecommendationTrainer withTrainerEnvironment(LearningEnvironment trainerEnvironment)", "class_method_signature": "RecommendationTrainer.withTrainerEnvironment(LearningEnvironment trainerEnvironment)", "testcase": false, "constructor": false}, {"identifier": "withBatchSize", "parameters": "(int batchSize)", "modifiers": "public", "return": "RecommendationTrainer", "signature": "RecommendationTrainer withBatchSize(int batchSize)", "full_signature": "public RecommendationTrainer withBatchSize(int batchSize)", "class_method_signature": "RecommendationTrainer.withBatchSize(int batchSize)", "testcase": false, "constructor": false}, {"identifier": "withRegularizer", "parameters": "(double regParam)", "modifiers": "public", "return": "RecommendationTrainer", "signature": "RecommendationTrainer withRegularizer(double regParam)", "full_signature": "public RecommendationTrainer withRegularizer(double regParam)", "class_method_signature": "RecommendationTrainer.withRegularizer(double regParam)", "testcase": false, "constructor": false}, {"identifier": "withLearningRate", "parameters": "(double learningRate)", "modifiers": "public", "return": "RecommendationTrainer", "signature": "RecommendationTrainer withLearningRate(double learningRate)", "full_signature": "public RecommendationTrainer withLearningRate(double learningRate)", "class_method_signature": "RecommendationTrainer.withLearningRate(double learningRate)", "testcase": false, "constructor": false}, {"identifier": "withMaxIterations", "parameters": "(int maxIterations)", "modifiers": "public", "return": "RecommendationTrainer", "signature": "RecommendationTrainer withMaxIterations(int maxIterations)", "full_signature": "public RecommendationTrainer withMaxIterations(int maxIterations)", "class_method_signature": "RecommendationTrainer.withMaxIterations(int maxIterations)", "testcase": false, "constructor": false}, {"identifier": "withMinMdlImprovement", "parameters": "(double minMdlImprovement)", "modifiers": "public", "return": "RecommendationTrainer", "signature": "RecommendationTrainer withMinMdlImprovement(double minMdlImprovement)", "full_signature": "public RecommendationTrainer withMinMdlImprovement(double minMdlImprovement)", "class_method_signature": "RecommendationTrainer.withMinMdlImprovement(double minMdlImprovement)", "testcase": false, "constructor": false}, {"identifier": "withK", "parameters": "(int k)", "modifiers": "public", "return": "RecommendationTrainer", "signature": "RecommendationTrainer withK(int k)", "full_signature": "public RecommendationTrainer withK(int k)", "class_method_signature": "RecommendationTrainer.withK(int k)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(\n        MatrixFactorizationGradient<O, S> a,\n        MatrixFactorizationGradient<O, S> b)", "modifiers": "private static", "return": "MatrixFactorizationGradient<O, S>", "signature": "MatrixFactorizationGradient<O, S> sum(\n        MatrixFactorizationGradient<O, S> a,\n        MatrixFactorizationGradient<O, S> b)", "full_signature": "private static MatrixFactorizationGradient<O, S> sum(\n        MatrixFactorizationGradient<O, S> a,\n        MatrixFactorizationGradient<O, S> b)", "class_method_signature": "RecommendationTrainer.sum(\n        MatrixFactorizationGradient<O, S> a,\n        MatrixFactorizationGradient<O, S> b)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(Map<T, Vector> a, Map<T, Vector> b)", "modifiers": "private static", "return": "Map<T, Vector>", "signature": "Map<T, Vector> sum(Map<T, Vector> a, Map<T, Vector> b)", "full_signature": "private static Map<T, Vector> sum(Map<T, Vector> a, Map<T, Vector> b)", "class_method_signature": "RecommendationTrainer.sum(Map<T, Vector> a, Map<T, Vector> b)", "testcase": false, "constructor": false}, {"identifier": "randomVector", "parameters": "(int k, Random rnd)", "modifiers": "private static", "return": "Vector", "signature": "Vector randomVector(int k, Random rnd)", "full_signature": "private static Vector randomVector(int k, Random rnd)", "class_method_signature": "RecommendationTrainer.randomVector(int k, Random rnd)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/recommendation/RecommendationTrainer.java"}, "focal_method": {"identifier": "fit", "parameters": "(DatasetBuilder<Object, BinaryObject> datasetBuilder,\n        String objFieldName, String subjFieldName, String ratingFieldName)", "modifiers": "public", "return": "RecommendationModel<Serializable, Serializable>", "body": "public RecommendationModel<Serializable, Serializable> fit(DatasetBuilder<Object, BinaryObject> datasetBuilder,\n        String objFieldName, String subjFieldName, String ratingFieldName) {\n        try (Dataset<EmptyContext, RecommendationDatasetData<Serializable, Serializable>> dataset = datasetBuilder.build(\n            environmentBuilder,\n            new EmptyContextBuilder<>(),\n            new RecommendationBinaryDatasetDataBuilder(objFieldName, subjFieldName, ratingFieldName),\n            trainerEnvironment\n        )) {\n            return train(dataset);\n        }\n        catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }", "signature": "RecommendationModel<Serializable, Serializable> fit(DatasetBuilder<Object, BinaryObject> datasetBuilder,\n        String objFieldName, String subjFieldName, String ratingFieldName)", "full_signature": "public RecommendationModel<Serializable, Serializable> fit(DatasetBuilder<Object, BinaryObject> datasetBuilder,\n        String objFieldName, String subjFieldName, String ratingFieldName)", "class_method_signature": "RecommendationTrainer.fit(DatasetBuilder<Object, BinaryObject> datasetBuilder,\n        String objFieldName, String subjFieldName, String ratingFieldName)", "testcase": false, "constructor": false, "invocations": ["build", "train"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}