{"test_class": {"identifier": "EmptyBeanConvenienceTest", "superclass": "", "interfaces": "", "fields": [], "file": "examples/basic/src/test/java/net/zerobuilder/examples/beans/EmptyBeanConvenienceTest.java"}, "test_case": {"identifier": "getThings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getThings() throws Exception {\n    EmptyBeanConvenience empty = emptyBeanConvenienceBuilder()\n        .collection(emptyList())\n        .iterables(emptyList())\n        .sets(emptySet())\n        .strings(emptyList())\n        .things(emptyList());\n    EmptyBeanConvenience notEmpty = emptyBeanConvenienceUpdater(empty)\n        .strings(singletonList(\"\"))\n        .things(singletonList(\"\"))\n        .collection(singletonList(singletonList(\"\")))\n        .iterables(emptyList())\n        .sets(emptySet())\n        .done();\n    assertThat(empty.getStrings().size(), is(0));\n    assertThat(empty.getThings().size(), is(0));\n    assertThat(empty.getCollection().size(), is(0));\n    assertThat(empty.getSets().size(), is(0));\n    assertThat(empty.getIterables().iterator().hasNext(), is(false));\n    assertThat(notEmpty.getStrings().size(), is(1));\n    assertThat(notEmpty.getThings().size(), is(1));\n    assertThat(notEmpty.getCollection().size(), is(1));\n    assertThat(notEmpty.getSets().size(), is(0));\n    assertThat(notEmpty.getIterables().iterator().hasNext(), is(false));\n  }", "signature": "void getThings()", "full_signature": "@Test public void getThings()", "class_method_signature": "EmptyBeanConvenienceTest.getThings()", "testcase": true, "constructor": false, "invocations": ["things", "strings", "sets", "iterables", "collection", "emptyBeanConvenienceBuilder", "emptyList", "emptyList", "emptySet", "emptyList", "emptyList", "done", "sets", "iterables", "collection", "things", "strings", "emptyBeanConvenienceUpdater", "singletonList", "singletonList", "singletonList", "singletonList", "emptyList", "emptySet", "assertThat", "size", "getStrings", "is", "assertThat", "size", "getThings", "is", "assertThat", "size", "getCollection", "is", "assertThat", "size", "getSets", "is", "assertThat", "hasNext", "iterator", "getIterables", "is", "assertThat", "size", "getStrings", "is", "assertThat", "size", "getThings", "is", "assertThat", "size", "getCollection", "is", "assertThat", "size", "getSets", "is", "assertThat", "hasNext", "iterator", "getIterables", "is"]}, "focal_class": {"identifier": "EmptyBeanConvenience", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List things;", "modifier": "private", "type": "List", "declarator": "things", "var_name": "things"}, {"original_string": "private List<String> strings;", "modifier": "private", "type": "List<String>", "declarator": "strings", "var_name": "strings"}, {"original_string": "private Collection<List<String>> collection;", "modifier": "private", "type": "Collection<List<String>>", "declarator": "collection", "var_name": "collection"}, {"original_string": "private Iterable<Collection<List<String>>> iterables;", "modifier": "private", "type": "Iterable<Collection<List<String>>>", "declarator": "iterables", "var_name": "iterables"}, {"original_string": "private Set<Iterable<Collection<List<String>>>> sets;", "modifier": "private", "type": "Set<Iterable<Collection<List<String>>>>", "declarator": "sets", "var_name": "sets"}], "methods": [{"identifier": "getThings", "parameters": "()", "modifiers": "public", "return": "List", "signature": "List getThings()", "full_signature": "public List getThings()", "class_method_signature": "EmptyBeanConvenience.getThings()", "testcase": false, "constructor": false}, {"identifier": "setThings", "parameters": "(List things)", "modifiers": "public", "return": "void", "signature": "void setThings(List things)", "full_signature": "public void setThings(List things)", "class_method_signature": "EmptyBeanConvenience.setThings(List things)", "testcase": false, "constructor": false}, {"identifier": "getStrings", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getStrings()", "full_signature": "public List<String> getStrings()", "class_method_signature": "EmptyBeanConvenience.getStrings()", "testcase": false, "constructor": false}, {"identifier": "setStrings", "parameters": "(List<String> strings)", "modifiers": "public", "return": "void", "signature": "void setStrings(List<String> strings)", "full_signature": "public void setStrings(List<String> strings)", "class_method_signature": "EmptyBeanConvenience.setStrings(List<String> strings)", "testcase": false, "constructor": false}, {"identifier": "getCollection", "parameters": "()", "modifiers": "public", "return": "Collection<List<String>>", "signature": "Collection<List<String>> getCollection()", "full_signature": "public Collection<List<String>> getCollection()", "class_method_signature": "EmptyBeanConvenience.getCollection()", "testcase": false, "constructor": false}, {"identifier": "setCollection", "parameters": "(Collection<List<String>> collection)", "modifiers": "public", "return": "void", "signature": "void setCollection(Collection<List<String>> collection)", "full_signature": "public void setCollection(Collection<List<String>> collection)", "class_method_signature": "EmptyBeanConvenience.setCollection(Collection<List<String>> collection)", "testcase": false, "constructor": false}, {"identifier": "getIterables", "parameters": "()", "modifiers": "public", "return": "Iterable<Collection<List<String>>>", "signature": "Iterable<Collection<List<String>>> getIterables()", "full_signature": "public Iterable<Collection<List<String>>> getIterables()", "class_method_signature": "EmptyBeanConvenience.getIterables()", "testcase": false, "constructor": false}, {"identifier": "setIterables", "parameters": "(Iterable<Collection<List<String>>> iterables)", "modifiers": "public", "return": "void", "signature": "void setIterables(Iterable<Collection<List<String>>> iterables)", "full_signature": "public void setIterables(Iterable<Collection<List<String>>> iterables)", "class_method_signature": "EmptyBeanConvenience.setIterables(Iterable<Collection<List<String>>> iterables)", "testcase": false, "constructor": false}, {"identifier": "getSets", "parameters": "()", "modifiers": "public", "return": "Set<Iterable<Collection<List<String>>>>", "signature": "Set<Iterable<Collection<List<String>>>> getSets()", "full_signature": "public Set<Iterable<Collection<List<String>>>> getSets()", "class_method_signature": "EmptyBeanConvenience.getSets()", "testcase": false, "constructor": false}, {"identifier": "setSets", "parameters": "(Set<Iterable<Collection<List<String>>>> sets)", "modifiers": "public", "return": "void", "signature": "void setSets(Set<Iterable<Collection<List<String>>>> sets)", "full_signature": "public void setSets(Set<Iterable<Collection<List<String>>>> sets)", "class_method_signature": "EmptyBeanConvenience.setSets(Set<Iterable<Collection<List<String>>>> sets)", "testcase": false, "constructor": false}], "file": "examples/basic/src/main/java/net/zerobuilder/examples/beans/EmptyBeanConvenience.java"}, "focal_method": {"identifier": "getThings", "parameters": "()", "modifiers": "public", "return": "List", "body": "public List getThings() {\n    return things;\n  }", "signature": "List getThings()", "full_signature": "public List getThings()", "class_method_signature": "EmptyBeanConvenience.getThings()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 66055507, "url": "https://github.com/h908714124/zerobuilder", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 19, "size": 1962, "license": "licensed"}}