{"test_class": {"identifier": "BookControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate MockMvc mockMvc;", "modifier": "@Autowired\n\tprivate", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@MockBean\n\tprivate BookService bookService;", "modifier": "@MockBean\n\tprivate", "type": "BookService", "declarator": "bookService", "var_name": "bookService"}], "file": "ch06/recipe_6_2_i/src/test/java/com/apress/springbootrecipes/library/rest/BookControllerTest.java"}, "test_case": {"identifier": "shouldReturnListOfBooks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldReturnListOfBooks() throws Exception {\n\n\t\twhen(bookService.findAll()).thenReturn(Arrays.asList(\n\t\t\t\tnew Book(\"123\", \"Spring 5 Recipes\", \"Marten Deinum\", \"Josh Long\"),\n\t\t\t\tnew Book(\"321\", \"Pro Spring MVC\", \"Marten Deinum\", \"Colin Yates\")));\n\n\t\tmockMvc.perform(get(\"/templates/books\"))\n\t\t\t\t.andExpect(status().isOk())\n\t\t\t\t.andExpect(MockMvcResultMatchers.jsonPath(\"$\", Matchers.hasSize(2)))\n\t\t\t\t.andExpect(MockMvcResultMatchers.jsonPath(\"$[*].isbn\", Matchers.containsInAnyOrder(\"123\", \"321\")))\n\t\t\t\t.andExpect(MockMvcResultMatchers.jsonPath(\"$[*].title\", Matchers.containsInAnyOrder(\"Spring 5 Recipes\", \"Pro Spring MVC\")));\n\t}", "signature": "void shouldReturnListOfBooks()", "full_signature": "@Test public void shouldReturnListOfBooks()", "class_method_signature": "BookControllerTest.shouldReturnListOfBooks()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findAll", "asList", "andExpect", "andExpect", "andExpect", "andExpect", "perform", "get", "isOk", "status", "jsonPath", "hasSize", "jsonPath", "containsInAnyOrder", "jsonPath", "containsInAnyOrder"]}, "focal_class": {"identifier": "BookController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final BookService bookService;", "modifier": "private final", "type": "BookService", "declarator": "bookService", "var_name": "bookService"}], "methods": [{"identifier": "BookController", "parameters": "(BookService bookService)", "modifiers": "public", "return": "", "signature": " BookController(BookService bookService)", "full_signature": "public  BookController(BookService bookService)", "class_method_signature": "BookController.BookController(BookService bookService)", "testcase": false, "constructor": true}, {"identifier": "all", "parameters": "()", "modifiers": "@GetMapping @ResponseBody public", "return": "Iterable<Book>", "signature": "Iterable<Book> all()", "full_signature": "@GetMapping @ResponseBody public Iterable<Book> all()", "class_method_signature": "BookController.all()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(@PathVariable(\"isbn\") String isbn)", "modifiers": "@GetMapping(\"/{isbn}\") public", "return": "ResponseEntity<Book>", "signature": "ResponseEntity<Book> get(@PathVariable(\"isbn\") String isbn)", "full_signature": "@GetMapping(\"/{isbn}\") public ResponseEntity<Book> get(@PathVariable(\"isbn\") String isbn)", "class_method_signature": "BookController.get(@PathVariable(\"isbn\") String isbn)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(@RequestBody Book book,\n                                     UriComponentsBuilder uriBuilder)", "modifiers": "@PostMapping public", "return": "ResponseEntity<Book>", "signature": "ResponseEntity<Book> create(@RequestBody Book book,\n                                     UriComponentsBuilder uriBuilder)", "full_signature": "@PostMapping public ResponseEntity<Book> create(@RequestBody Book book,\n                                     UriComponentsBuilder uriBuilder)", "class_method_signature": "BookController.create(@RequestBody Book book,\n                                     UriComponentsBuilder uriBuilder)", "testcase": false, "constructor": false}, {"identifier": "all", "parameters": "(Model model)", "modifiers": "@GetMapping(produces = MediaType.TEXT_HTML_VALUE) public", "return": "String", "signature": "String all(Model model)", "full_signature": "@GetMapping(produces = MediaType.TEXT_HTML_VALUE) public String all(Model model)", "class_method_signature": "BookController.all(Model model)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(@RequestParam(\"isbn\") String isbn, Model model)", "modifiers": "@GetMapping(params = \"isbn\", produces = MediaType.TEXT_HTML_VALUE) public", "return": "String", "signature": "String get(@RequestParam(\"isbn\") String isbn, Model model)", "full_signature": "@GetMapping(params = \"isbn\", produces = MediaType.TEXT_HTML_VALUE) public String get(@RequestParam(\"isbn\") String isbn, Model model)", "class_method_signature": "BookController.get(@RequestParam(\"isbn\") String isbn, Model model)", "testcase": false, "constructor": false}], "file": "ch06/recipe_6_2_i/src/main/java/com/apress/springbootrecipes/library/rest/BookController.java"}, "focal_method": {"identifier": "get", "parameters": "(@PathVariable(\"isbn\") String isbn)", "modifiers": "@GetMapping(\"/{isbn}\") public", "return": "ResponseEntity<Book>", "body": "@GetMapping(\"/{isbn}\")\n\tpublic ResponseEntity<Book> get(@PathVariable(\"isbn\") String isbn) {\n\t\treturn bookService.find(isbn)\n\t\t\t\t.map(ResponseEntity::ok)\n\t\t\t\t.orElse(ResponseEntity.notFound().build());\n\n\t}", "signature": "ResponseEntity<Book> get(@PathVariable(\"isbn\") String isbn)", "full_signature": "@GetMapping(\"/{isbn}\") public ResponseEntity<Book> get(@PathVariable(\"isbn\") String isbn)", "class_method_signature": "BookController.get(@PathVariable(\"isbn\") String isbn)", "testcase": false, "constructor": false, "invocations": ["orElse", "map", "find", "build", "notFound"]}, "repository": {"repo_id": 158588129, "url": "https://github.com/Apress/spring-boot-2-recipes", "language": "Java", "is_fork": false, "fork_count": 34, "stargazer_count": 24, "size": 202, "license": "licensed"}}