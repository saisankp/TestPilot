{"test_class": {"identifier": "ProjectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "mercator-core/src/test/java/org/lendingclub/mercator/core/ProjectorTest.java"}, "test_case": {"identifier": "testBuilderCannotConnect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testBuilderCannotConnect() {\n\n\t\ttry {\n\t\t\tProjector p = new Projector.Builder().withUrl(\"bolt://localhost:12345\").build();\n\n\t\t\tp.getNeoRxClient().execCypher(\"match (a) return a limit 10\").blockingForEach(it -> {\n\t\t\t\tSystem.out.println(it);\n\t\t\t});\n\t\t\tAssertions.failBecauseExceptionWasNotThrown(NeoRxException.class);\n\t\t} catch (RuntimeException e) {\n\t\t\t// This is a problem with NeoRx...we really want it to wrap the underlying driver exception in NeoRxException for consistency\n\t\t\t\n\t\t\t//Assertions.assertThat(e).isInstanceOf(NeoRxException.class);\n\t\t}\n\t}", "signature": "void testBuilderCannotConnect()", "full_signature": "@Test public void testBuilderCannotConnect()", "class_method_signature": "ProjectorTest.testBuilderCannotConnect()", "testcase": true, "constructor": false, "invocations": ["build", "withUrl", "blockingForEach", "execCypher", "getNeoRxClient", "println", "failBecauseExceptionWasNotThrown"]}, "focal_class": {"identifier": "Projector", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getNeoRxClient", "parameters": "()", "modifiers": "public abstract", "return": "NeoRxClient", "signature": "NeoRxClient getNeoRxClient()", "full_signature": "public abstract NeoRxClient getNeoRxClient()", "class_method_signature": "Projector.getNeoRxClient()", "testcase": false, "constructor": false}, {"identifier": "createBuilder", "parameters": "(Class<T> clazz)", "modifiers": "public abstract", "return": "T", "signature": "T createBuilder(Class<T> clazz)", "full_signature": "public abstract T createBuilder(Class<T> clazz)", "class_method_signature": "Projector.createBuilder(Class<T> clazz)", "testcase": false, "constructor": false}], "file": "mercator-core/src/main/java/org/lendingclub/mercator/core/Projector.java"}, "focal_method": {"identifier": "getNeoRxClient", "parameters": "()", "modifiers": "public abstract", "return": "NeoRxClient", "body": "public abstract NeoRxClient getNeoRxClient();", "signature": "NeoRxClient getNeoRxClient()", "full_signature": "public abstract NeoRxClient getNeoRxClient()", "class_method_signature": "Projector.getNeoRxClient()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 80497637, "url": "https://github.com/LendingClub/mercator", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 64, "size": 646, "license": "licensed"}}