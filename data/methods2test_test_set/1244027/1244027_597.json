{"test_class": {"identifier": "LocalNamespaceRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NamespaceRegistry local;", "modifier": "private", "type": "NamespaceRegistry", "declarator": "local", "var_name": "local"}, {"original_string": "private NamespaceRegistry delegate;", "modifier": "private", "type": "NamespaceRegistry", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private String uri;", "modifier": "private", "type": "String", "declarator": "uri", "var_name": "uri"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistryTest.java"}, "test_case": {"identifier": "shouldAllowLocalRegistryToChangeDefaultNamespace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAllowLocalRegistryToChangeDefaultNamespace() {\n        local.register(\"\", uri);\n        assertNamespaces(delegate, \"\");\n        assertNamespaces(local, \"=\" + uri);\n    }", "signature": "void shouldAllowLocalRegistryToChangeDefaultNamespace()", "full_signature": "@Test public void shouldAllowLocalRegistryToChangeDefaultNamespace()", "class_method_signature": "LocalNamespaceRegistryTest.shouldAllowLocalRegistryToChangeDefaultNamespace()", "testcase": true, "constructor": false, "invocations": ["register", "assertNamespaces", "assertNamespaces"]}, "focal_class": {"identifier": "LocalNamespaceRegistry", "superclass": "extends SimpleNamespaceRegistry", "interfaces": "", "fields": [{"original_string": "private final NamespaceRegistry delegate;", "modifier": "private final", "type": "NamespaceRegistry", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "LocalNamespaceRegistry", "parameters": "( NamespaceRegistry delegate )", "modifiers": "public", "return": "", "signature": " LocalNamespaceRegistry( NamespaceRegistry delegate )", "full_signature": "public  LocalNamespaceRegistry( NamespaceRegistry delegate )", "class_method_signature": "LocalNamespaceRegistry.LocalNamespaceRegistry( NamespaceRegistry delegate )", "testcase": false, "constructor": true}, {"identifier": "LocalNamespaceRegistry", "parameters": "( NamespaceRegistry delegate,\n                                   final String defaultNamespaceUri )", "modifiers": "public", "return": "", "signature": " LocalNamespaceRegistry( NamespaceRegistry delegate,\n                                   final String defaultNamespaceUri )", "full_signature": "public  LocalNamespaceRegistry( NamespaceRegistry delegate,\n                                   final String defaultNamespaceUri )", "class_method_signature": "LocalNamespaceRegistry.LocalNamespaceRegistry( NamespaceRegistry delegate,\n                                   final String defaultNamespaceUri )", "testcase": false, "constructor": true}, {"identifier": "getDefaultNamespaceUri", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDefaultNamespaceUri()", "full_signature": "@Override public String getDefaultNamespaceUri()", "class_method_signature": "LocalNamespaceRegistry.getDefaultNamespaceUri()", "testcase": false, "constructor": false}, {"identifier": "getNamespaceForPrefix", "parameters": "( String prefix )", "modifiers": "@Override public", "return": "String", "signature": "String getNamespaceForPrefix( String prefix )", "full_signature": "@Override public String getNamespaceForPrefix( String prefix )", "class_method_signature": "LocalNamespaceRegistry.getNamespaceForPrefix( String prefix )", "testcase": false, "constructor": false}, {"identifier": "getNamespaces", "parameters": "()", "modifiers": "@Override public", "return": "Set<Namespace>", "signature": "Set<Namespace> getNamespaces()", "full_signature": "@Override public Set<Namespace> getNamespaces()", "class_method_signature": "LocalNamespaceRegistry.getNamespaces()", "testcase": false, "constructor": false}, {"identifier": "getLocalNamespaces", "parameters": "()", "modifiers": "public", "return": "Set<Namespace>", "signature": "Set<Namespace> getLocalNamespaces()", "full_signature": "public Set<Namespace> getLocalNamespaces()", "class_method_signature": "LocalNamespaceRegistry.getLocalNamespaces()", "testcase": false, "constructor": false}, {"identifier": "getPrefixForNamespaceUri", "parameters": "( String namespaceUri,\n                                            boolean generateIfMissing )", "modifiers": "@Override public", "return": "String", "signature": "String getPrefixForNamespaceUri( String namespaceUri,\n                                            boolean generateIfMissing )", "full_signature": "@Override public String getPrefixForNamespaceUri( String namespaceUri,\n                                            boolean generateIfMissing )", "class_method_signature": "LocalNamespaceRegistry.getPrefixForNamespaceUri( String namespaceUri,\n                                            boolean generateIfMissing )", "testcase": false, "constructor": false}, {"identifier": "getRegisteredNamespaceUris", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getRegisteredNamespaceUris()", "full_signature": "@Override public Set<String> getRegisteredNamespaceUris()", "class_method_signature": "LocalNamespaceRegistry.getRegisteredNamespaceUris()", "testcase": false, "constructor": false}, {"identifier": "isRegisteredNamespaceUri", "parameters": "( String namespaceUri )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRegisteredNamespaceUri( String namespaceUri )", "full_signature": "@Override public boolean isRegisteredNamespaceUri( String namespaceUri )", "class_method_signature": "LocalNamespaceRegistry.isRegisteredNamespaceUri( String namespaceUri )", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "( String prefix,\n                            String namespaceUri )", "modifiers": "@Override public", "return": "String", "signature": "String register( String prefix,\n                            String namespaceUri )", "full_signature": "@Override public String register( String prefix,\n                            String namespaceUri )", "class_method_signature": "LocalNamespaceRegistry.register( String prefix,\n                            String namespaceUri )", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "( String namespaceUri )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean unregister( String namespaceUri )", "full_signature": "@Override public boolean unregister( String namespaceUri )", "class_method_signature": "LocalNamespaceRegistry.unregister( String namespaceUri )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java"}, "focal_method": {"identifier": "register", "parameters": "( String prefix,\n                            String namespaceUri )", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String register( String prefix,\n                            String namespaceUri ) {\n        // Just register the namespace locally ...\n        String previous = super.register(prefix, namespaceUri);\n        // But check whether there is a \"previous\" from the delegate ...\n        if (previous == null && delegate != null) previous = delegate.getPrefixForNamespaceUri(namespaceUri, false);\n        return previous;\n    }", "signature": "String register( String prefix,\n                            String namespaceUri )", "full_signature": "@Override public String register( String prefix,\n                            String namespaceUri )", "class_method_signature": "LocalNamespaceRegistry.register( String prefix,\n                            String namespaceUri )", "testcase": false, "constructor": false, "invocations": ["register", "getPrefixForNamespaceUri"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}