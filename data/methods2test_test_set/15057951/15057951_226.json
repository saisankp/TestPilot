{"test_class": {"identifier": "DateTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DateType type;", "modifier": "", "type": "DateType", "declarator": "type", "var_name": "type"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/types/date/DateTypeTest.java"}, "test_case": {"identifier": "testConvert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvert() {\n\n        // przykladowa data\n        Date d = d(\"27-04-2012\");\n        Date d2 = dlong(\"27-04-2012 16:45:55\");\n\n        // przypadki testowe: [argument (Object)][oczekiwana wartosc holdera (Date)]\n        Object[][] testCases = {\n            {d(\"27-04-2012\"), d},\n            {dlong(\"27-04-2012 16:45:55\"), d2},\n            {new Timestamp(d.getTime()), d},\n            {new java.sql.Date(d.getTime()), d},\n            {new GregorianCalendar(2012, 4-1, 27), d},\n            {\"2012/04/27\", d},\n            {\"27.04.2012\", d},\n            {\"  \", null},\n            {null, null}\n        };\n\n        // wykonanie testow\n        for (Object[] testCase : testCases) {\n            Object obj = testCase[0];\n            Date expectedValue = (Date) testCase[1];\n\n            assertEquals(expectedValue, type.convert(obj).getDate());\n        }\n    }", "signature": "void testConvert()", "full_signature": "@Test public void testConvert()", "class_method_signature": "DateTypeTest.testConvert()", "testcase": true, "constructor": false, "invocations": ["d", "dlong", "d", "dlong", "getTime", "getTime", "assertEquals", "getDate", "convert"]}, "focal_class": {"identifier": "DateType", "superclass": "", "interfaces": "implements Type<DateHolder>", "fields": [{"original_string": "public static final String TYPE_NAME = \"date\";", "modifier": "public static final", "type": "String", "declarator": "TYPE_NAME = \"date\"", "var_name": "TYPE_NAME"}, {"original_string": "private static String defaultOutputPattern = \"yyyy-MM-dd\";", "modifier": "private static", "type": "String", "declarator": "defaultOutputPattern = \"yyyy-MM-dd\"", "var_name": "defaultOutputPattern"}, {"original_string": "private static final int IX2 = 2;", "modifier": "private static final", "type": "int", "declarator": "IX2 = 2", "var_name": "IX2"}, {"original_string": "private static final int IX5 = 5;", "modifier": "private static final", "type": "int", "declarator": "IX5 = 5", "var_name": "IX5"}, {"original_string": "private static final int IX4 = 4;", "modifier": "private static final", "type": "int", "declarator": "IX4 = 4", "var_name": "IX4"}, {"original_string": "private static final int IX7 = 7;", "modifier": "private static final", "type": "int", "declarator": "IX7 = 7", "var_name": "IX7"}, {"original_string": "private static final int DATESTR_LENGTH = 10;", "modifier": "private static final", "type": "int", "declarator": "DATESTR_LENGTH = 10", "var_name": "DATESTR_LENGTH"}], "methods": [{"identifier": "encode", "parameters": "(DateHolder holder)", "modifiers": "@Override public", "return": "String", "signature": "String encode(DateHolder holder)", "full_signature": "@Override public String encode(DateHolder holder)", "class_method_signature": "DateType.encode(DateHolder holder)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String text)", "modifiers": "@Override public", "return": "DateHolder", "signature": "DateHolder decode(String text)", "full_signature": "@Override public DateHolder decode(String text)", "class_method_signature": "DateType.decode(String text)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "DateHolder", "signature": "DateHolder convert(Object obj)", "full_signature": "@Override public DateHolder convert(Object obj)", "class_method_signature": "DateType.convert(Object obj)", "testcase": false, "constructor": false}, {"identifier": "newArray", "parameters": "(int size)", "modifiers": "@Override public", "return": "DateHolder[]", "signature": "DateHolder[] newArray(int size)", "full_signature": "@Override public DateHolder[] newArray(int size)", "class_method_signature": "DateType.newArray(int size)", "testcase": false, "constructor": false}, {"identifier": "guess", "parameters": "(String text)", "modifiers": "private", "return": "Date", "signature": "Date guess(String text)", "full_signature": "private Date guess(String text)", "class_method_signature": "DateType.guess(String text)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String dateStr, String pattern)", "modifiers": "private", "return": "Date", "signature": "Date parse(String dateStr, String pattern)", "full_signature": "private Date parse(String dateStr, String pattern)", "class_method_signature": "DateType.parse(String dateStr, String pattern)", "testcase": false, "constructor": false}, {"identifier": "bothEqualTo", "parameters": "(char c1, char c2, char expected)", "modifiers": "private", "return": "boolean", "signature": "boolean bothEqualTo(char c1, char c2, char expected)", "full_signature": "private boolean bothEqualTo(char c1, char c2, char expected)", "class_method_signature": "DateType.bothEqualTo(char c1, char c2, char expected)", "testcase": false, "constructor": false}, {"identifier": "setDefaultOutputPattern", "parameters": "(String pattern)", "modifiers": "public static", "return": "void", "signature": "void setDefaultOutputPattern(String pattern)", "full_signature": "public static void setDefaultOutputPattern(String pattern)", "class_method_signature": "DateType.setDefaultOutputPattern(String pattern)", "testcase": false, "constructor": false}, {"identifier": "getDefaultOutputPattern", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getDefaultOutputPattern()", "full_signature": "public static String getDefaultOutputPattern()", "class_method_signature": "DateType.getDefaultOutputPattern()", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/types/date/DateType.java"}, "focal_method": {"identifier": "convert", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "DateHolder", "body": "@Override\n    public DateHolder convert(Object obj) {\n        if (obj instanceof Date) {\n            return new DateHolder((Date) obj);\n        }\n\n        if (obj instanceof Calendar) {\n            Calendar cal = (Calendar) obj;\n            return new DateHolder(cal.getTime());\n        }\n\n        if (obj == null) {\n            return new DateHolder(null);\n        }\n\n        if (obj instanceof String) {\n            return decode((String) obj);\n        }\n\n        throw new IllegalArgumentException(\"conversion not supported for: \" + obj.getClass());\n    }", "signature": "DateHolder convert(Object obj)", "full_signature": "@Override public DateHolder convert(Object obj)", "class_method_signature": "DateType.convert(Object obj)", "testcase": false, "constructor": false, "invocations": ["getTime", "decode", "getClass"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}