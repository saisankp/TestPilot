{"test_class": {"identifier": "WrapperCreatorReceiverDecoratorTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IResolveDependencyStrategy wrapperResolutionStrategyMock;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "wrapperResolutionStrategyMock", "var_name": "wrapperResolutionStrategyMock"}, {"original_string": "private IResolveDependencyStrategy wrapperResolutionStrategyResolutionStrategyMock;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "wrapperResolutionStrategyResolutionStrategyMock", "var_name": "wrapperResolutionStrategyResolutionStrategyMock"}, {"original_string": "private IMessageProcessor messageProcessorMock;", "modifier": "private", "type": "IMessageProcessor", "declarator": "messageProcessorMock", "var_name": "messageProcessorMock"}, {"original_string": "private IMessageProcessingSequence sequenceMock;", "modifier": "private", "type": "IMessageProcessingSequence", "declarator": "sequenceMock", "var_name": "sequenceMock"}, {"original_string": "private IObject envMock, wrapperMock, stepConfMock, wrapperConfMock;", "modifier": "private", "type": "IObject", "declarator": "envMock", "var_name": "envMock"}, {"original_string": "private Map<Object, IResolveDependencyStrategy> map;", "modifier": "private", "type": "Map<Object, IResolveDependencyStrategy>", "declarator": "map", "var_name": "map"}, {"original_string": "private IMessageReceiver receiverMock;", "modifier": "private", "type": "IMessageReceiver", "declarator": "receiverMock", "var_name": "receiverMock"}], "file": "CoreFeatures/MessageProcessing/WrapperCreatorReceiverDecorator/src/test/java/info/smart_tools/smartactors/message_processing/wrapper_creator_receiver_decorator/WrapperCreatorReceiverDecoratorTest.java"}, "test_case": {"identifier": "Should_resolveWrapperAndPushAsEnvironment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_resolveWrapperAndPushAsEnvironment()\n            throws Exception {\n        IMessageReceiver decorator = new WrapperCreatorReceiverDecorator(\n                receiverMock, map, \"the wrapper resolution strategy resolution strategy\");\n\n        decorator.receive(messageProcessorMock);\n\n        verify(messageProcessorMock, times(1)).pushEnvironment(same(wrapperMock));\n        verify(wrapperResolutionStrategyResolutionStrategyMock, times(1)).resolve(same(wrapperConfMock));\n        assertSame(wrapperResolutionStrategyMock, map.get(stepConfMock));\n        decorator.receive(messageProcessorMock);\n\n        verify(messageProcessorMock, times(2)).pushEnvironment(same(wrapperMock));\n        verify(wrapperResolutionStrategyResolutionStrategyMock, times(1)).resolve(same(wrapperConfMock));\n        assertSame(wrapperResolutionStrategyMock, map.get(stepConfMock));\n    }", "signature": "void Should_resolveWrapperAndPushAsEnvironment()", "full_signature": "@Test public void Should_resolveWrapperAndPushAsEnvironment()", "class_method_signature": "WrapperCreatorReceiverDecoratorTest.Should_resolveWrapperAndPushAsEnvironment()", "testcase": true, "constructor": false, "invocations": ["receive", "pushEnvironment", "verify", "times", "same", "resolve", "verify", "times", "same", "assertSame", "get", "receive", "pushEnvironment", "verify", "times", "same", "resolve", "verify", "times", "same", "assertSame", "get"]}, "focal_class": {"identifier": "WrapperCreatorReceiverDecorator", "superclass": "", "interfaces": "implements IMessageReceiver", "fields": [{"original_string": "private final IMessageReceiver underlyingReceiver;", "modifier": "private final", "type": "IMessageReceiver", "declarator": "underlyingReceiver", "var_name": "underlyingReceiver"}, {"original_string": "private final IFieldName wrapperFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "wrapperFieldName", "var_name": "wrapperFieldName"}, {"original_string": "private final Map<Object, IResolveDependencyStrategy> wrapperStrategies;", "modifier": "private final", "type": "Map<Object, IResolveDependencyStrategy>", "declarator": "wrapperStrategies", "var_name": "wrapperStrategies"}, {"original_string": "private final IKey strategyDependencyKey;", "modifier": "private final", "type": "IKey", "declarator": "strategyDependencyKey", "var_name": "strategyDependencyKey"}], "methods": [{"identifier": "WrapperCreatorReceiverDecorator", "parameters": "(\n            final IMessageReceiver underlyingReceiver,\n            final Map<Object, IResolveDependencyStrategy> wrapperStrategiesMap,\n            final String strategyDependencyName)", "modifiers": "public", "return": "", "signature": " WrapperCreatorReceiverDecorator(\n            final IMessageReceiver underlyingReceiver,\n            final Map<Object, IResolveDependencyStrategy> wrapperStrategiesMap,\n            final String strategyDependencyName)", "full_signature": "public  WrapperCreatorReceiverDecorator(\n            final IMessageReceiver underlyingReceiver,\n            final Map<Object, IResolveDependencyStrategy> wrapperStrategiesMap,\n            final String strategyDependencyName)", "class_method_signature": "WrapperCreatorReceiverDecorator.WrapperCreatorReceiverDecorator(\n            final IMessageReceiver underlyingReceiver,\n            final Map<Object, IResolveDependencyStrategy> wrapperStrategiesMap,\n            final String strategyDependencyName)", "testcase": false, "constructor": true}, {"identifier": "receive", "parameters": "(final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "signature": "void receive(final IMessageProcessor processor)", "full_signature": "@Override public void receive(final IMessageProcessor processor)", "class_method_signature": "WrapperCreatorReceiverDecorator.receive(final IMessageProcessor processor)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/WrapperCreatorReceiverDecorator/src/main/java/info/smart_tools/smartactors/message_processing/wrapper_creator_receiver_decorator/WrapperCreatorReceiverDecorator.java"}, "focal_method": {"identifier": "receive", "parameters": "(final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void receive(final IMessageProcessor processor)\n            throws MessageReceiveException, AsynchronousOperationException {\n        try {\n            IObject stepArgs = processor.getSequence().getCurrentReceiverArguments();\n            IObject wrapperConfigObject = (IObject) stepArgs.getValue(wrapperFieldName);\n\n            if (null != wrapperConfigObject) {\n                // stepArgs object is used as key for strategy cache as if the wrapperConfigObject was used the entry would not be ever\n                // garbage-collected (even if wrapperStrategies stores keys by weak references): wrapper resolution strategy has a strong\n                // reference to configuration object\n                IResolveDependencyStrategy conf = wrapperStrategies.get(stepArgs);\n\n                if (null == conf) {\n                    conf = IOC.resolve(strategyDependencyKey, wrapperConfigObject);\n                    wrapperStrategies.put(stepArgs, conf);\n                }\n\n                processor.pushEnvironment(conf.resolve(processor.getEnvironment()));\n            }\n\n            underlyingReceiver.receive(processor);\n        } catch (ReadValueException | InvalidArgumentException | ResolutionException | ResolveDependencyStrategyException e) {\n            throw new MessageReceiveException(e);\n        }\n    }", "signature": "void receive(final IMessageProcessor processor)", "full_signature": "@Override public void receive(final IMessageProcessor processor)", "class_method_signature": "WrapperCreatorReceiverDecorator.receive(final IMessageProcessor processor)", "testcase": false, "constructor": false, "invocations": ["getCurrentReceiverArguments", "getSequence", "getValue", "get", "resolve", "put", "pushEnvironment", "resolve", "getEnvironment", "receive"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}