{"test_class": {"identifier": "CalendarServiceTest", "superclass": "", "interfaces": "", "fields": [], "file": "insurance-common/src/test/java/org/lab/insurance/common/services/calendar/CalendarServiceTest.java"}, "test_case": {"identifier": "test01", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test01() {\n\t\tCalendarService service = new CalendarService();\n\t\tDateTime dt = new DateTime(2017, 10, 16, 0, 0, 0);\n\t\tDate result = service.getNextLaboralDay(dt.toDate(), 2, null);\n\t\tDateTime dtResult = new DateTime(result);\n\n\t\tAssert.assertEquals(2017, dtResult.getYear());\n\t\tAssert.assertEquals(10, dtResult.getMonthOfYear());\n\t\tAssert.assertEquals(18, dtResult.getDayOfMonth());\n\t}", "signature": "void test01()", "full_signature": "@Test public void test01()", "class_method_signature": "CalendarServiceTest.test01()", "testcase": true, "constructor": false, "invocations": ["getNextLaboralDay", "toDate", "assertEquals", "getYear", "assertEquals", "getMonthOfYear", "assertEquals", "getDayOfMonth"]}, "focal_class": {"identifier": "CalendarService", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getNextLaboralDay", "parameters": "(final Date date, final int days, final HolidayCalendar calendar)", "modifiers": "public", "return": "Date", "signature": "Date getNextLaboralDay(final Date date, final int days, final HolidayCalendar calendar)", "full_signature": "public Date getNextLaboralDay(final Date date, final int days, final HolidayCalendar calendar)", "class_method_signature": "CalendarService.getNextLaboralDay(final Date date, final int days, final HolidayCalendar calendar)", "testcase": false, "constructor": false}, {"identifier": "isLaboralDay", "parameters": "(Date date, HolidayCalendar calendar)", "modifiers": "public", "return": "boolean", "signature": "boolean isLaboralDay(Date date, HolidayCalendar calendar)", "full_signature": "public boolean isLaboralDay(Date date, HolidayCalendar calendar)", "class_method_signature": "CalendarService.isLaboralDay(Date date, HolidayCalendar calendar)", "testcase": false, "constructor": false}], "file": "insurance-common/src/main/java/org/lab/insurance/common/services/calendar/CalendarService.java"}, "focal_method": {"identifier": "getNextLaboralDay", "parameters": "(final Date date, final int days, final HolidayCalendar calendar)", "modifiers": "public", "return": "Date", "body": "public Date getNextLaboralDay(final Date date, final int days, final HolidayCalendar calendar) {\n\t\tDateTime tmp = new DateTime(date);\n\t\t// Note: in the case of previous dates we want to have an offset\n\t\tint check = days < 0 ? Math.abs(days) - 1 : days;\n\t\tint count = 0;\n\t\tint increment = days < 0 ? -1 : 1;\n\t\tdo {\n\t\t\tif (!isLaboralDay(tmp.toDate(), calendar)) {\n\t\t\t\ttmp = tmp.plusDays(increment);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\ttmp = tmp.plusDays(increment);\n\t\t\tcount++;\n\t\t}\n\t\twhile (count < check);\n\t\treturn tmp.toDate();\n\t}", "signature": "Date getNextLaboralDay(final Date date, final int days, final HolidayCalendar calendar)", "full_signature": "public Date getNextLaboralDay(final Date date, final int days, final HolidayCalendar calendar)", "class_method_signature": "CalendarService.getNextLaboralDay(final Date date, final int days, final HolidayCalendar calendar)", "testcase": false, "constructor": false, "invocations": ["abs", "isLaboralDay", "toDate", "plusDays", "plusDays", "toDate"]}, "repository": {"repo_id": 47182929, "url": "https://github.com/labcabrera/lab-insurance", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 1306, "license": "licensed"}}