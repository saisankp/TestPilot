{"test_class": {"identifier": "DBaseFileWriterTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "private static final String TEST_FILENAME = \"org/arakhne/afc/io/dbase/test.dbf\";", "modifier": "private static final", "type": "String", "declarator": "TEST_FILENAME = \"org/arakhne/afc/io/dbase/test.dbf\"", "var_name": "TEST_FILENAME"}, {"original_string": "private List<AttributeProvider> list;", "modifier": "private", "type": "List<AttributeProvider>", "declarator": "list", "var_name": "list"}], "file": "advanced/dbasefile/src/test/java/org/arakhne/afc/io/dbase/DBaseFileWriterTest.java"}, "test_case": {"identifier": "testWrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testWrite() throws Exception {\n\t\tassertTestingInputStream(this.list);\n\t\t\n\t\tFile tmpFile = File.createTempFile(\"dbfwriter\", \".dbf\");  //$NON-NLS-1$//$NON-NLS-2$\n\t\ttmpFile.deleteOnExit();\n\t\t\n\t\ttry {\n\t\t\t// Write the file\n\t\t\tDBaseFileWriter writer = new DBaseFileWriter(tmpFile);\n\t\t\twriter.write(ArrayUtil.toArray(this.list, AttributeProvider.class));\n\t\t\twriter.close();\n\t\t\t\n\t\t\t// Read the content of the just written file\n\t\t\tList<AttributeProvider>  newContent = readFile(new FileInputStream(tmpFile));\n\t\t\t\n\t\t\t// Compare the two lists of attributes\n\t\t\tboolean found;\n\t\t\tfor(AttributeProvider provider : this.list) {\n\t\t\t\t// Search for the provider\n\t\t\t\tfound = false;\n\t\t\t\tfor(AttributeProvider provider2 : newContent) {\n\t\t\t\t\tif (sameProvider(provider,provider2)) {\n\t\t\t\t\t\tnewContent.remove(provider2);\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!found)\n\t\t\t\t\tfail(\"some data was not correctly written\"); //$NON-NLS-1$\n\t\t\t}\n\t\t\t\n\t\t\tif (!newContent.isEmpty())\n\t\t\t\tfail(\"the written content has more data than the source\"); //$NON-NLS-1$\n\t\t}\n\t\tfinally {\n\t\t\ttmpFile.delete();\n\t\t}\n\t}", "signature": "void testWrite()", "full_signature": "@Test public void testWrite()", "class_method_signature": "DBaseFileWriterTest.testWrite()", "testcase": true, "constructor": false, "invocations": ["assertTestingInputStream", "createTempFile", "deleteOnExit", "write", "toArray", "close", "readFile", "sameProvider", "remove", "fail", "isEmpty", "fail", "delete"]}, "focal_class": {"identifier": "DBaseFileWriter", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private LittleEndianDataOutputStream stream;", "modifier": "private", "type": "LittleEndianDataOutputStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "private List<DBaseFileField> columns;", "modifier": "private", "type": "List<DBaseFileField>", "declarator": "columns", "var_name": "columns"}, {"original_string": "private DBaseCodePage language = DBaseCodePage.WINDOWS_STANDARD;", "modifier": "private", "type": "DBaseCodePage", "declarator": "language = DBaseCodePage.WINDOWS_STANDARD", "var_name": "language"}], "methods": [{"identifier": "DBaseFileWriter", "parameters": "(File stream)", "modifiers": "@SuppressWarnings(\"resource\") public", "return": "", "signature": " DBaseFileWriter(File stream)", "full_signature": "@SuppressWarnings(\"resource\") public  DBaseFileWriter(File stream)", "class_method_signature": "DBaseFileWriter.DBaseFileWriter(File stream)", "testcase": false, "constructor": true}, {"identifier": "DBaseFileWriter", "parameters": "(URL stream)", "modifiers": "public", "return": "", "signature": " DBaseFileWriter(URL stream)", "full_signature": "public  DBaseFileWriter(URL stream)", "class_method_signature": "DBaseFileWriter.DBaseFileWriter(URL stream)", "testcase": false, "constructor": true}, {"identifier": "DBaseFileWriter", "parameters": "(WritableByteChannel channel)", "modifiers": "public", "return": "", "signature": " DBaseFileWriter(WritableByteChannel channel)", "full_signature": "public  DBaseFileWriter(WritableByteChannel channel)", "class_method_signature": "DBaseFileWriter.DBaseFileWriter(WritableByteChannel channel)", "testcase": false, "constructor": true}, {"identifier": "DBaseFileWriter", "parameters": "(OutputStream dbfStream)", "modifiers": "public", "return": "", "signature": " DBaseFileWriter(OutputStream dbfStream)", "full_signature": "public  DBaseFileWriter(OutputStream dbfStream)", "class_method_signature": "DBaseFileWriter.DBaseFileWriter(OutputStream dbfStream)", "testcase": false, "constructor": true}, {"identifier": "getCodePage", "parameters": "()", "modifiers": "public", "return": "DBaseCodePage", "signature": "DBaseCodePage getCodePage()", "full_signature": "public DBaseCodePage getCodePage()", "class_method_signature": "DBaseFileWriter.getCodePage()", "testcase": false, "constructor": false}, {"identifier": "setCodePage", "parameters": "(DBaseCodePage code)", "modifiers": "public", "return": "void", "signature": "void setCodePage(DBaseCodePage code)", "full_signature": "public void setCodePage(DBaseCodePage code)", "class_method_signature": "DBaseFileWriter.setCodePage(DBaseCodePage code)", "testcase": false, "constructor": false}, {"identifier": "writeDBFString", "parameters": "(String str, int size, byte fillingChar)", "modifiers": "private", "return": "void", "signature": "void writeDBFString(String str, int size, byte fillingChar)", "full_signature": "private void writeDBFString(String str, int size, byte fillingChar)", "class_method_signature": "DBaseFileWriter.writeDBFString(String str, int size, byte fillingChar)", "testcase": false, "constructor": false}, {"identifier": "writeDBFNumber", "parameters": "(double number, int numberLength, int decimalLength)", "modifiers": "private", "return": "void", "signature": "void writeDBFNumber(double number, int numberLength, int decimalLength)", "full_signature": "private void writeDBFNumber(double number, int numberLength, int decimalLength)", "class_method_signature": "DBaseFileWriter.writeDBFNumber(double number, int numberLength, int decimalLength)", "testcase": false, "constructor": false}, {"identifier": "writeDBFNumber", "parameters": "(long number, int numberLength, int decimalLength)", "modifiers": "private", "return": "void", "signature": "void writeDBFNumber(long number, int numberLength, int decimalLength)", "full_signature": "private void writeDBFNumber(long number, int numberLength, int decimalLength)", "class_method_signature": "DBaseFileWriter.writeDBFNumber(long number, int numberLength, int decimalLength)", "testcase": false, "constructor": false}, {"identifier": "writeDBFBoolean", "parameters": "(boolean bool)", "modifiers": "private", "return": "void", "signature": "void writeDBFBoolean(boolean bool)", "full_signature": "private void writeDBFBoolean(boolean bool)", "class_method_signature": "DBaseFileWriter.writeDBFBoolean(boolean bool)", "testcase": false, "constructor": false}, {"identifier": "writeDBFDate", "parameters": "(Date date)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private", "return": "void", "signature": "void writeDBFDate(Date date)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private void writeDBFDate(Date date)", "class_method_signature": "DBaseFileWriter.writeDBFDate(Date date)", "testcase": false, "constructor": false}, {"identifier": "writeDBFInteger", "parameters": "(short value)", "modifiers": "private", "return": "void", "signature": "void writeDBFInteger(short value)", "full_signature": "private void writeDBFInteger(short value)", "class_method_signature": "DBaseFileWriter.writeDBFInteger(short value)", "testcase": false, "constructor": false}, {"identifier": "writeDBFLong", "parameters": "(int value)", "modifiers": "private", "return": "void", "signature": "void writeDBFLong(int value)", "full_signature": "private void writeDBFLong(int value)", "class_method_signature": "DBaseFileWriter.writeDBFLong(int value)", "testcase": false, "constructor": false}, {"identifier": "writeDBFDouble", "parameters": "(double value)", "modifiers": "private", "return": "void", "signature": "void writeDBFDouble(double value)", "full_signature": "private void writeDBFDouble(double value)", "class_method_signature": "DBaseFileWriter.writeDBFDouble(double value)", "testcase": false, "constructor": false}, {"identifier": "computeFieldSize", "parameters": "(AttributeValue value)", "modifiers": "private static", "return": "int", "signature": "int computeFieldSize(AttributeValue value)", "full_signature": "private static int computeFieldSize(AttributeValue value)", "class_method_signature": "DBaseFileWriter.computeFieldSize(AttributeValue value)", "testcase": false, "constructor": false}, {"identifier": "computeDecimalSize", "parameters": "(AttributeValue value)", "modifiers": "private static", "return": "int", "signature": "int computeDecimalSize(AttributeValue value)", "full_signature": "private static int computeDecimalSize(AttributeValue value)", "class_method_signature": "DBaseFileWriter.computeDecimalSize(AttributeValue value)", "testcase": false, "constructor": false}, {"identifier": "isSupportedType", "parameters": "(DBaseFieldType type)", "modifiers": "@Pure public static", "return": "boolean", "signature": "boolean isSupportedType(DBaseFieldType type)", "full_signature": "@Pure public static boolean isSupportedType(DBaseFieldType type)", "class_method_signature": "DBaseFileWriter.isSupportedType(DBaseFieldType type)", "testcase": false, "constructor": false}, {"identifier": "extractColumns", "parameters": "(List<? extends AttributeProvider> providers)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private", "return": "List<DBaseFileField>", "signature": "List<DBaseFileField> extractColumns(List<? extends AttributeProvider> providers)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private List<DBaseFileField> extractColumns(List<? extends AttributeProvider> providers)", "class_method_signature": "DBaseFileWriter.extractColumns(List<? extends AttributeProvider> providers)", "testcase": false, "constructor": false}, {"identifier": "columnsSkipped", "parameters": "(Set<String> skippedColumns)", "modifiers": "protected", "return": "void", "signature": "void columnsSkipped(Set<String> skippedColumns)", "full_signature": "protected void columnsSkipped(Set<String> skippedColumns)", "class_method_signature": "DBaseFileWriter.columnsSkipped(Set<String> skippedColumns)", "testcase": false, "constructor": false}, {"identifier": "writeDescriptionHeader", "parameters": "(int recordCount)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private", "return": "void", "signature": "void writeDescriptionHeader(int recordCount)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private void writeDescriptionHeader(int recordCount)", "class_method_signature": "DBaseFileWriter.writeDescriptionHeader(int recordCount)", "testcase": false, "constructor": false}, {"identifier": "writeColumns", "parameters": "()", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private", "return": "void", "signature": "void writeColumns()", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private void writeColumns()", "class_method_signature": "DBaseFileWriter.writeColumns()", "testcase": false, "constructor": false}, {"identifier": "writeHeader", "parameters": "(AttributeProvider... providers)", "modifiers": "public", "return": "void", "signature": "void writeHeader(AttributeProvider... providers)", "full_signature": "public void writeHeader(AttributeProvider... providers)", "class_method_signature": "DBaseFileWriter.writeHeader(AttributeProvider... providers)", "testcase": false, "constructor": false}, {"identifier": "writeHeader", "parameters": "(List<? extends AttributeProvider> providers)", "modifiers": "public", "return": "void", "signature": "void writeHeader(List<? extends AttributeProvider> providers)", "full_signature": "public void writeHeader(List<? extends AttributeProvider> providers)", "class_method_signature": "DBaseFileWriter.writeHeader(List<? extends AttributeProvider> providers)", "testcase": false, "constructor": false}, {"identifier": "writeRecord", "parameters": "(AttributeProvider element)", "modifiers": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:magicnumber\"}) public", "return": "void", "signature": "void writeRecord(AttributeProvider element)", "full_signature": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:magicnumber\"}) public void writeRecord(AttributeProvider element)", "class_method_signature": "DBaseFileWriter.writeRecord(AttributeProvider element)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(AttributeProvider... providers)", "modifiers": "public", "return": "void", "signature": "void write(AttributeProvider... providers)", "full_signature": "public void write(AttributeProvider... providers)", "class_method_signature": "DBaseFileWriter.write(AttributeProvider... providers)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(List<? extends AttributeProvider> providers)", "modifiers": "public", "return": "void", "signature": "void write(List<? extends AttributeProvider> providers)", "full_signature": "public void write(List<? extends AttributeProvider> providers)", "class_method_signature": "DBaseFileWriter.write(List<? extends AttributeProvider> providers)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override @SuppressWarnings(\"checkstyle:magicnumber\") public", "return": "void", "signature": "void close()", "full_signature": "@Override @SuppressWarnings(\"checkstyle:magicnumber\") public void close()", "class_method_signature": "DBaseFileWriter.close()", "testcase": false, "constructor": false}], "file": "advanced/dbasefile/src/main/java/org/arakhne/afc/io/dbase/DBaseFileWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(AttributeProvider... providers)", "modifiers": "public", "return": "void", "body": "public void write(AttributeProvider... providers) throws IOException, AttributeException {\n\t\twriteHeader(providers);\n\n\t\tfor (final AttributeProvider provider : providers) {\n\t\t\twriteRecord(provider);\n\t\t}\n\n\t\tclose();\n\t}", "signature": "void write(AttributeProvider... providers)", "full_signature": "public void write(AttributeProvider... providers)", "class_method_signature": "DBaseFileWriter.write(AttributeProvider... providers)", "testcase": false, "constructor": false, "invocations": ["writeHeader", "writeRecord", "close"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}