{"test_class": {"identifier": "LonLatMultiLevelSourceTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-sentinel3-reader/src/test/java/org/esa/s3tbx/dataio/s3/LonLatMultiLevelSourceTest.java"}, "test_case": {"identifier": "testCreate_WithIncompatibleSources", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate_WithIncompatibleSources() {\n        final MultiLevelSource lonSource = new TestMultiLevelSource(10, 10);\n        final MultiLevelSource latSource = new TestMultiLevelSource(11, 11);\n        final LonLatFunction function = new TestLonLatFunction();\n        try {\n            LonLatMultiLevelSource.create(lonSource, latSource, function, DataBuffer.TYPE_BYTE);\n            fail();\n        } catch (IllegalArgumentException ignored) {\n        }\n    }", "signature": "void testCreate_WithIncompatibleSources()", "full_signature": "@Test public void testCreate_WithIncompatibleSources()", "class_method_signature": "LonLatMultiLevelSourceTest.testCreate_WithIncompatibleSources()", "testcase": true, "constructor": false, "invocations": ["create", "fail"]}, "focal_class": {"identifier": "LonLatMultiLevelSource", "superclass": "extends GenericMultiLevelSource", "interfaces": "", "fields": [{"original_string": "private final LonLatFunction function;", "modifier": "private final", "type": "LonLatFunction", "declarator": "function", "var_name": "function"}, {"original_string": "private final int targetDataType;", "modifier": "private final", "type": "int", "declarator": "targetDataType", "var_name": "targetDataType"}], "methods": [{"identifier": "create", "parameters": "(MultiLevelSource lonSource, MultiLevelSource latSource,\n                                          LonLatFunction function, int targetDataType)", "modifiers": "public static", "return": "MultiLevelSource", "signature": "MultiLevelSource create(MultiLevelSource lonSource, MultiLevelSource latSource,\n                                          LonLatFunction function, int targetDataType)", "full_signature": "public static MultiLevelSource create(MultiLevelSource lonSource, MultiLevelSource latSource,\n                                          LonLatFunction function, int targetDataType)", "class_method_signature": "LonLatMultiLevelSource.create(MultiLevelSource lonSource, MultiLevelSource latSource,\n                                          LonLatFunction function, int targetDataType)", "testcase": false, "constructor": false}, {"identifier": "LonLatMultiLevelSource", "parameters": "(MultiLevelSource lonSource, MultiLevelSource latSource, LonLatFunction function,\n                                   int targetDataType)", "modifiers": "private", "return": "", "signature": " LonLatMultiLevelSource(MultiLevelSource lonSource, MultiLevelSource latSource, LonLatFunction function,\n                                   int targetDataType)", "full_signature": "private  LonLatMultiLevelSource(MultiLevelSource lonSource, MultiLevelSource latSource, LonLatFunction function,\n                                   int targetDataType)", "class_method_signature": "LonLatMultiLevelSource.LonLatMultiLevelSource(MultiLevelSource lonSource, MultiLevelSource latSource, LonLatFunction function,\n                                   int targetDataType)", "testcase": false, "constructor": true}, {"identifier": "createImage", "parameters": "(RenderedImage[] sourceImages, int level)", "modifiers": "@Override protected", "return": "RenderedImage", "signature": "RenderedImage createImage(RenderedImage[] sourceImages, int level)", "full_signature": "@Override protected RenderedImage createImage(RenderedImage[] sourceImages, int level)", "class_method_signature": "LonLatMultiLevelSource.createImage(RenderedImage[] sourceImages, int level)", "testcase": false, "constructor": false}], "file": "s3tbx-sentinel3-reader/src/main/java/org/esa/s3tbx/dataio/s3/LonLatMultiLevelSource.java"}, "focal_method": {"identifier": "create", "parameters": "(MultiLevelSource lonSource, MultiLevelSource latSource,\n                                          LonLatFunction function, int targetDataType)", "modifiers": "public static", "return": "MultiLevelSource", "body": "public static MultiLevelSource create(MultiLevelSource lonSource, MultiLevelSource latSource,\n                                          LonLatFunction function, int targetDataType) {\n        Assert.argument(lonSource != null, \"lonSource != null\");\n        Assert.argument(latSource != null, \"latSource != null\");\n        Assert.argument(function != null, \"function != null\");\n        Rectangle2D lonModelBounds = lonSource.getModel().getModelBounds();\n        Rectangle2D latModelBounds = latSource.getModel().getModelBounds();\n        Assert.argument(Objects.equals(lonModelBounds, latModelBounds), \"Model bounds of lat and lon source must be equal\");\n        return new LonLatMultiLevelSource(lonSource, latSource, function, targetDataType);\n    }", "signature": "MultiLevelSource create(MultiLevelSource lonSource, MultiLevelSource latSource,\n                                          LonLatFunction function, int targetDataType)", "full_signature": "public static MultiLevelSource create(MultiLevelSource lonSource, MultiLevelSource latSource,\n                                          LonLatFunction function, int targetDataType)", "class_method_signature": "LonLatMultiLevelSource.create(MultiLevelSource lonSource, MultiLevelSource latSource,\n                                          LonLatFunction function, int targetDataType)", "testcase": false, "constructor": false, "invocations": ["argument", "argument", "argument", "getModelBounds", "getModel", "getModelBounds", "getModel", "argument", "equals"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}