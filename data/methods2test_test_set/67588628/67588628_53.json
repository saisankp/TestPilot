{"test_class": {"identifier": "ClassConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    private ClassConverter classConverter;", "modifier": "@Inject\n    private", "type": "ClassConverter", "declarator": "classConverter", "var_name": "classConverter"}], "file": "artemis-core/src/test/java/org/jnosql/artemis/reflection/ClassConverterTest.java"}, "test_case": {"identifier": "shouldReturnErrorWhenThereIsNotConstructor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnErrorWhenThereIsNotConstructor() {\n        Assertions.assertThrows(ConstructorException.class, () -> classConverter.create(Animal.class));\n    }", "signature": "void shouldReturnErrorWhenThereIsNotConstructor()", "full_signature": "@Test public void shouldReturnErrorWhenThereIsNotConstructor()", "class_method_signature": "ClassConverterTest.shouldReturnErrorWhenThereIsNotConstructor()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "create"]}, "focal_class": {"identifier": "ClassConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(ClassConverter.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(ClassConverter.class.getName())", "var_name": "LOGGER"}, {"original_string": "private Reflections reflections;", "modifier": "private", "type": "Reflections", "declarator": "reflections", "var_name": "reflections"}, {"original_string": "private FieldWriterFactory writerFactory;", "modifier": "private", "type": "FieldWriterFactory", "declarator": "writerFactory", "var_name": "writerFactory"}, {"original_string": "private FieldReaderFactory readerFactory;", "modifier": "private", "type": "FieldReaderFactory", "declarator": "readerFactory", "var_name": "readerFactory"}, {"original_string": "private InstanceSupplierFactory instanceSupplierFactory;", "modifier": "private", "type": "InstanceSupplierFactory", "declarator": "instanceSupplierFactory", "var_name": "instanceSupplierFactory"}], "methods": [{"identifier": "ClassConverter", "parameters": "(Reflections reflections)", "modifiers": "@Inject", "return": "", "signature": " ClassConverter(Reflections reflections)", "full_signature": "@Inject  ClassConverter(Reflections reflections)", "class_method_signature": "ClassConverter.ClassConverter(Reflections reflections)", "testcase": false, "constructor": true}, {"identifier": "ClassConverter", "parameters": "()", "modifiers": "", "return": "", "signature": " ClassConverter()", "full_signature": "  ClassConverter()", "class_method_signature": "ClassConverter.ClassConverter()", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(Class<?> entityClass)", "modifiers": "public", "return": "ClassMapping", "signature": "ClassMapping create(Class<?> entityClass)", "full_signature": "public ClassMapping create(Class<?> entityClass)", "class_method_signature": "ClassConverter.create(Class<?> entityClass)", "testcase": false, "constructor": false}, {"identifier": "getNativeFieldGroupByJavaField", "parameters": "(List<FieldMapping> fields,\n                                                                      String javaField, String nativeField)", "modifiers": "private", "return": "Map<String, NativeMapping>", "signature": "Map<String, NativeMapping> getNativeFieldGroupByJavaField(List<FieldMapping> fields,\n                                                                      String javaField, String nativeField)", "full_signature": "private Map<String, NativeMapping> getNativeFieldGroupByJavaField(List<FieldMapping> fields,\n                                                                      String javaField, String nativeField)", "class_method_signature": "ClassConverter.getNativeFieldGroupByJavaField(List<FieldMapping> fields,\n                                                                      String javaField, String nativeField)", "testcase": false, "constructor": false}, {"identifier": "appendValue", "parameters": "(Map<String, NativeMapping> nativeFieldGroupByJavaField, FieldMapping field,\n                             String javaField, String nativeField)", "modifiers": "private", "return": "void", "signature": "void appendValue(Map<String, NativeMapping> nativeFieldGroupByJavaField, FieldMapping field,\n                             String javaField, String nativeField)", "full_signature": "private void appendValue(Map<String, NativeMapping> nativeFieldGroupByJavaField, FieldMapping field,\n                             String javaField, String nativeField)", "class_method_signature": "ClassConverter.appendValue(Map<String, NativeMapping> nativeFieldGroupByJavaField, FieldMapping field,\n                             String javaField, String nativeField)", "testcase": false, "constructor": false}, {"identifier": "appendDefaultField", "parameters": "(Map<String, NativeMapping> nativeFieldGroupByJavaField,\n                                    FieldMapping field, String javaField, String nativeField)", "modifiers": "private", "return": "void", "signature": "void appendDefaultField(Map<String, NativeMapping> nativeFieldGroupByJavaField,\n                                    FieldMapping field, String javaField, String nativeField)", "full_signature": "private void appendDefaultField(Map<String, NativeMapping> nativeFieldGroupByJavaField,\n                                    FieldMapping field, String javaField, String nativeField)", "class_method_signature": "ClassConverter.appendDefaultField(Map<String, NativeMapping> nativeFieldGroupByJavaField,\n                                    FieldMapping field, String javaField, String nativeField)", "testcase": false, "constructor": false}, {"identifier": "appendFields", "parameters": "(Map<String, NativeMapping> nativeFieldGroupByJavaField,\n                              FieldMapping field,\n                              String javaField, String nativeField)", "modifiers": "private", "return": "void", "signature": "void appendFields(Map<String, NativeMapping> nativeFieldGroupByJavaField,\n                              FieldMapping field,\n                              String javaField, String nativeField)", "full_signature": "private void appendFields(Map<String, NativeMapping> nativeFieldGroupByJavaField,\n                              FieldMapping field,\n                              String javaField, String nativeField)", "class_method_signature": "ClassConverter.appendFields(Map<String, NativeMapping> nativeFieldGroupByJavaField,\n                              FieldMapping field,\n                              String javaField, String nativeField)", "testcase": false, "constructor": false}, {"identifier": "appendFields", "parameters": "(Map<String, NativeMapping> nativeFieldGroupByJavaField,\n                              FieldMapping field, String javaField, String nativeField,\n                              Class<?> entityClass)", "modifiers": "private", "return": "void", "signature": "void appendFields(Map<String, NativeMapping> nativeFieldGroupByJavaField,\n                              FieldMapping field, String javaField, String nativeField,\n                              Class<?> entityClass)", "full_signature": "private void appendFields(Map<String, NativeMapping> nativeFieldGroupByJavaField,\n                              FieldMapping field, String javaField, String nativeField,\n                              Class<?> entityClass)", "class_method_signature": "ClassConverter.appendFields(Map<String, NativeMapping> nativeFieldGroupByJavaField,\n                              FieldMapping field, String javaField, String nativeField,\n                              Class<?> entityClass)", "testcase": false, "constructor": false}, {"identifier": "appendPreparePrefix", "parameters": "(String prefix, String field)", "modifiers": "private", "return": "String", "signature": "String appendPreparePrefix(String prefix, String field)", "full_signature": "private String appendPreparePrefix(String prefix, String field)", "class_method_signature": "ClassConverter.appendPreparePrefix(String prefix, String field)", "testcase": false, "constructor": false}, {"identifier": "appendPrefix", "parameters": "(String prefix, String field)", "modifiers": "private", "return": "String", "signature": "String appendPrefix(String prefix, String field)", "full_signature": "private String appendPrefix(String prefix, String field)", "class_method_signature": "ClassConverter.appendPrefix(String prefix, String field)", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "(Field field)", "modifiers": "private", "return": "FieldMapping", "signature": "FieldMapping to(Field field)", "full_signature": "private FieldMapping to(Field field)", "class_method_signature": "ClassConverter.to(Field field)", "testcase": false, "constructor": false}], "file": "artemis-core/src/main/java/org/jnosql/artemis/reflection/ClassConverter.java"}, "focal_method": {"identifier": "create", "parameters": "(Class<?> entityClass)", "modifiers": "public", "return": "ClassMapping", "body": "public ClassMapping create(Class<?> entityClass) {\n\n        long start = System.currentTimeMillis();\n        String entityName = reflections.getEntityName(entityClass);\n\n        List<FieldMapping> fields = reflections.getFields(entityClass)\n                .stream().map(this::to).collect(toList());\n\n        List<String> fieldsName = fields.stream().map(FieldMapping::getName).collect(toList());\n\n        Map<String, NativeMapping> nativeFieldGroupByJavaField =\n                getNativeFieldGroupByJavaField(fields, \"\", \"\");\n\n        Map<String, FieldMapping> fieldsGroupedByName = fields.stream()\n                .collect(collectingAndThen(toMap(FieldMapping::getName,\n                        Function.identity()), Collections::unmodifiableMap));\n\n        InstanceSupplier instanceSupplier = instanceSupplierFactory.apply(reflections.makeAccessible(entityClass));\n\n        ClassMapping mapping = DefaultClassMapping.builder().withName(entityName)\n                .withClassInstance(entityClass)\n                .withFields(fields)\n                .withFieldsName(fieldsName)\n                .withInstanceSupplier(instanceSupplier)\n                .withJavaFieldGroupedByColumn(nativeFieldGroupByJavaField)\n                .withFieldsGroupedByName(fieldsGroupedByName)\n                .build();\n\n        long end = System.currentTimeMillis() - start;\n        LOGGER.info(String.format(\"Scanned %s loaded with time %d ms\", entityClass.getName(), end));\n        return mapping;\n    }", "signature": "ClassMapping create(Class<?> entityClass)", "full_signature": "public ClassMapping create(Class<?> entityClass)", "class_method_signature": "ClassConverter.create(Class<?> entityClass)", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "getEntityName", "collect", "map", "stream", "getFields", "toList", "collect", "map", "stream", "toList", "getNativeFieldGroupByJavaField", "collect", "stream", "collectingAndThen", "toMap", "identity", "apply", "makeAccessible", "build", "withFieldsGroupedByName", "withJavaFieldGroupedByColumn", "withInstanceSupplier", "withFieldsName", "withFields", "withClassInstance", "withName", "builder", "currentTimeMillis", "info", "format", "getName"]}, "repository": {"repo_id": 67588628, "url": "https://github.com/eclipse/jnosql-artemis", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 2612, "license": "licensed"}}