{"test_class": {"identifier": "ServiceBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/ServiceBuilderTest.java"}, "test_case": {"identifier": "build", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void build() {\n        MethodConfig method = new MethodConfig();\n        ProviderConfig provider = new ProviderConfig();\n\n        ServiceBuilder builder = new ServiceBuilder();\n        builder.path(\"path\").addMethod(method).provider(provider).providerIds(\"providerIds\")\n                .generic(GENERIC_SERIALIZATION_DEFAULT);\n\n        ServiceConfig config = builder.build();\n        ServiceConfig config2 = builder.build();\n\n        assertThat(config.getGeneric(), equalTo(GENERIC_SERIALIZATION_DEFAULT));\n        Assertions.assertEquals(\"path\", config.getPath());\n        Assertions.assertEquals(\"providerIds\", config.getProviderIds());\n        Assertions.assertSame(provider, config.getProvider());\n        Assertions.assertTrue(config.getMethods().contains(method));\n        Assertions.assertEquals(1, config.getMethods().size());\n        Assertions.assertNotSame(config, config2);\n    }", "signature": "void build()", "full_signature": "@Test void build()", "class_method_signature": "ServiceBuilderTest.build()", "testcase": true, "constructor": false, "invocations": ["generic", "providerIds", "provider", "addMethod", "path", "build", "build", "assertThat", "getGeneric", "equalTo", "assertEquals", "getPath", "assertEquals", "getProviderIds", "assertSame", "getProvider", "assertTrue", "contains", "getMethods", "assertEquals", "size", "getMethods", "assertNotSame"]}, "focal_class": {"identifier": "ServiceBuilder", "superclass": "extends AbstractServiceBuilder<ServiceConfig, ServiceBuilder<U>>", "interfaces": "", "fields": [{"original_string": "private String interfaceName;", "modifier": "private", "type": "String", "declarator": "interfaceName", "var_name": "interfaceName"}, {"original_string": "private Class<?> interfaceClass;", "modifier": "private", "type": "Class<?>", "declarator": "interfaceClass", "var_name": "interfaceClass"}, {"original_string": "private U ref;", "modifier": "private", "type": "U", "declarator": "ref", "var_name": "ref"}, {"original_string": "private String path;", "modifier": "private", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private List<MethodConfig> methods;", "modifier": "private", "type": "List<MethodConfig>", "declarator": "methods", "var_name": "methods"}, {"original_string": "private ProviderConfig provider;", "modifier": "private", "type": "ProviderConfig", "declarator": "provider", "var_name": "provider"}, {"original_string": "private String providerIds;", "modifier": "private", "type": "String", "declarator": "providerIds", "var_name": "providerIds"}, {"original_string": "private String generic;", "modifier": "private", "type": "String", "declarator": "generic", "var_name": "generic"}], "methods": [{"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "ServiceBuilder", "signature": "ServiceBuilder newBuilder()", "full_signature": "public static ServiceBuilder newBuilder()", "class_method_signature": "ServiceBuilder.newBuilder()", "testcase": false, "constructor": false}, {"identifier": "id", "parameters": "(String id)", "modifiers": "public", "return": "ServiceBuilder", "signature": "ServiceBuilder id(String id)", "full_signature": "public ServiceBuilder id(String id)", "class_method_signature": "ServiceBuilder.id(String id)", "testcase": false, "constructor": false}, {"identifier": "interfaceName", "parameters": "(String interfaceName)", "modifiers": "public", "return": "ServiceBuilder<U>", "signature": "ServiceBuilder<U> interfaceName(String interfaceName)", "full_signature": "public ServiceBuilder<U> interfaceName(String interfaceName)", "class_method_signature": "ServiceBuilder.interfaceName(String interfaceName)", "testcase": false, "constructor": false}, {"identifier": "interfaceClass", "parameters": "(Class<?> interfaceClass)", "modifiers": "public", "return": "ServiceBuilder<U>", "signature": "ServiceBuilder<U> interfaceClass(Class<?> interfaceClass)", "full_signature": "public ServiceBuilder<U> interfaceClass(Class<?> interfaceClass)", "class_method_signature": "ServiceBuilder.interfaceClass(Class<?> interfaceClass)", "testcase": false, "constructor": false}, {"identifier": "ref", "parameters": "(U ref)", "modifiers": "public", "return": "ServiceBuilder<U>", "signature": "ServiceBuilder<U> ref(U ref)", "full_signature": "public ServiceBuilder<U> ref(U ref)", "class_method_signature": "ServiceBuilder.ref(U ref)", "testcase": false, "constructor": false}, {"identifier": "path", "parameters": "(String path)", "modifiers": "public", "return": "ServiceBuilder<U>", "signature": "ServiceBuilder<U> path(String path)", "full_signature": "public ServiceBuilder<U> path(String path)", "class_method_signature": "ServiceBuilder.path(String path)", "testcase": false, "constructor": false}, {"identifier": "addMethod", "parameters": "(MethodConfig method)", "modifiers": "public", "return": "ServiceBuilder<U>", "signature": "ServiceBuilder<U> addMethod(MethodConfig method)", "full_signature": "public ServiceBuilder<U> addMethod(MethodConfig method)", "class_method_signature": "ServiceBuilder.addMethod(MethodConfig method)", "testcase": false, "constructor": false}, {"identifier": "addMethods", "parameters": "(List<? extends MethodConfig> methods)", "modifiers": "public", "return": "ServiceBuilder<U>", "signature": "ServiceBuilder<U> addMethods(List<? extends MethodConfig> methods)", "full_signature": "public ServiceBuilder<U> addMethods(List<? extends MethodConfig> methods)", "class_method_signature": "ServiceBuilder.addMethods(List<? extends MethodConfig> methods)", "testcase": false, "constructor": false}, {"identifier": "provider", "parameters": "(ProviderConfig provider)", "modifiers": "public", "return": "ServiceBuilder<U>", "signature": "ServiceBuilder<U> provider(ProviderConfig provider)", "full_signature": "public ServiceBuilder<U> provider(ProviderConfig provider)", "class_method_signature": "ServiceBuilder.provider(ProviderConfig provider)", "testcase": false, "constructor": false}, {"identifier": "providerIds", "parameters": "(String providerIds)", "modifiers": "public", "return": "ServiceBuilder<U>", "signature": "ServiceBuilder<U> providerIds(String providerIds)", "full_signature": "public ServiceBuilder<U> providerIds(String providerIds)", "class_method_signature": "ServiceBuilder.providerIds(String providerIds)", "testcase": false, "constructor": false}, {"identifier": "generic", "parameters": "(String generic)", "modifiers": "public", "return": "ServiceBuilder<U>", "signature": "ServiceBuilder<U> generic(String generic)", "full_signature": "public ServiceBuilder<U> generic(String generic)", "class_method_signature": "ServiceBuilder.generic(String generic)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "public", "return": "ServiceConfig<U>", "signature": "ServiceConfig<U> build()", "full_signature": "public ServiceConfig<U> build()", "class_method_signature": "ServiceBuilder.build()", "testcase": false, "constructor": false}, {"identifier": "getThis", "parameters": "()", "modifiers": "@Override protected", "return": "ServiceBuilder<U>", "signature": "ServiceBuilder<U> getThis()", "full_signature": "@Override protected ServiceBuilder<U> getThis()", "class_method_signature": "ServiceBuilder.getThis()", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/builders/ServiceBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "()", "modifiers": "public", "return": "ServiceConfig<U>", "body": "public ServiceConfig<U> build() {\n        ServiceConfig<U> serviceConfig = new ServiceConfig<>();\n        super.build(serviceConfig);\n\n        serviceConfig.setInterface(interfaceName);\n        serviceConfig.setInterface(interfaceClass);\n        serviceConfig.setRef(ref);\n        serviceConfig.setPath(path);\n        serviceConfig.setMethods(methods);\n        serviceConfig.setProvider(provider);\n        serviceConfig.setProviderIds(providerIds);\n        serviceConfig.setGeneric(generic);\n\n        return serviceConfig;\n    }", "signature": "ServiceConfig<U> build()", "full_signature": "public ServiceConfig<U> build()", "class_method_signature": "ServiceBuilder.build()", "testcase": false, "constructor": false, "invocations": ["build", "setInterface", "setInterface", "setRef", "setPath", "setMethods", "setProvider", "setProviderIds", "setGeneric"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}