{"test_class": {"identifier": "NakadiClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public final", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private MockServer server;", "modifier": "private", "type": "MockServer", "declarator": "server", "var_name": "server"}, {"original_string": "private NakadiClient client;", "modifier": "private", "type": "NakadiClient", "declarator": "client", "var_name": "client"}], "file": "fahrschein/src/test/java/org/zalando/fahrschein/NakadiClientTest.java"}, "test_case": {"identifier": "shouldDeleteSubscription", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldDeleteSubscription() throws IOException {\n        server.expectRequestTo(\"http://example.com/subscriptions/123\", \"DELETE\")\n                .andRespondWith(204).setup();\n\n        client.deleteSubscription(\"123\");\n\n        server.verify();\n    }", "signature": "void shouldDeleteSubscription()", "full_signature": "@Test public void shouldDeleteSubscription()", "class_method_signature": "NakadiClientTest.shouldDeleteSubscription()", "testcase": true, "constructor": false, "invocations": ["setup", "andRespondWith", "expectRequestTo", "deleteSubscription", "verify"]}, "focal_class": {"identifier": "NakadiClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(NakadiClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(NakadiClient.class)", "var_name": "LOG"}, {"original_string": "private static final TypeReference<List<Partition>> LIST_OF_PARTITIONS = new TypeReference<List<Partition>>() {\n    };", "modifier": "private static final", "type": "TypeReference<List<Partition>>", "declarator": "LIST_OF_PARTITIONS = new TypeReference<List<Partition>>() {\n    }", "var_name": "LIST_OF_PARTITIONS"}, {"original_string": "private final URI baseUri;", "modifier": "private final", "type": "URI", "declarator": "baseUri", "var_name": "baseUri"}, {"original_string": "private final RequestFactory clientHttpRequestFactory;", "modifier": "private final", "type": "RequestFactory", "declarator": "clientHttpRequestFactory", "var_name": "clientHttpRequestFactory"}, {"original_string": "private final ObjectMapper internalObjectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "internalObjectMapper", "var_name": "internalObjectMapper"}, {"original_string": "private final ObjectMapper objectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "private final CursorManager cursorManager;", "modifier": "private final", "type": "CursorManager", "declarator": "cursorManager", "var_name": "cursorManager"}], "methods": [{"identifier": "builder", "parameters": "(URI baseUri)", "modifiers": "public static", "return": "NakadiClientBuilder", "signature": "NakadiClientBuilder builder(URI baseUri)", "full_signature": "public static NakadiClientBuilder builder(URI baseUri)", "class_method_signature": "NakadiClient.builder(URI baseUri)", "testcase": false, "constructor": false}, {"identifier": "NakadiClient", "parameters": "(URI baseUri, RequestFactory clientHttpRequestFactory, ObjectMapper objectMapper, CursorManager cursorManager)", "modifiers": "", "return": "", "signature": " NakadiClient(URI baseUri, RequestFactory clientHttpRequestFactory, ObjectMapper objectMapper, CursorManager cursorManager)", "full_signature": "  NakadiClient(URI baseUri, RequestFactory clientHttpRequestFactory, ObjectMapper objectMapper, CursorManager cursorManager)", "class_method_signature": "NakadiClient.NakadiClient(URI baseUri, RequestFactory clientHttpRequestFactory, ObjectMapper objectMapper, CursorManager cursorManager)", "testcase": false, "constructor": true}, {"identifier": "getPartitions", "parameters": "(String eventName)", "modifiers": "public", "return": "List<Partition>", "signature": "List<Partition> getPartitions(String eventName)", "full_signature": "public List<Partition> getPartitions(String eventName)", "class_method_signature": "NakadiClient.getPartitions(String eventName)", "testcase": false, "constructor": false}, {"identifier": "publish", "parameters": "(String eventName, List<T> events)", "modifiers": "public", "return": "void", "signature": "void publish(String eventName, List<T> events)", "full_signature": "public void publish(String eventName, List<T> events)", "class_method_signature": "NakadiClient.publish(String eventName, List<T> events)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(String applicationName, String eventName, String consumerGroup)", "modifiers": "@Deprecated public", "return": "Subscription", "signature": "Subscription subscribe(String applicationName, String eventName, String consumerGroup)", "full_signature": "@Deprecated public Subscription subscribe(String applicationName, String eventName, String consumerGroup)", "class_method_signature": "NakadiClient.subscribe(String applicationName, String eventName, String consumerGroup)", "testcase": false, "constructor": false}, {"identifier": "subscription", "parameters": "(String applicationName, String eventName)", "modifiers": "public", "return": "SubscriptionBuilder", "signature": "SubscriptionBuilder subscription(String applicationName, String eventName)", "full_signature": "public SubscriptionBuilder subscription(String applicationName, String eventName)", "class_method_signature": "NakadiClient.subscription(String applicationName, String eventName)", "testcase": false, "constructor": false}, {"identifier": "subscription", "parameters": "(String applicationName, Set<String> eventNames)", "modifiers": "public", "return": "SubscriptionBuilder", "signature": "SubscriptionBuilder subscription(String applicationName, Set<String> eventNames)", "full_signature": "public SubscriptionBuilder subscription(String applicationName, Set<String> eventNames)", "class_method_signature": "NakadiClient.subscription(String applicationName, Set<String> eventNames)", "testcase": false, "constructor": false}, {"identifier": "deleteSubscription", "parameters": "(String subscriptionId)", "modifiers": "public", "return": "void", "signature": "void deleteSubscription(String subscriptionId)", "full_signature": "public void deleteSubscription(String subscriptionId)", "class_method_signature": "NakadiClient.deleteSubscription(String subscriptionId)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(String applicationName, Set<String> eventNames, String consumerGroup, SubscriptionRequest.Position readFrom, @Nullable List<Cursor> initialCursors, @Nullable Authorization authorization)", "modifiers": "", "return": "Subscription", "signature": "Subscription subscribe(String applicationName, Set<String> eventNames, String consumerGroup, SubscriptionRequest.Position readFrom, @Nullable List<Cursor> initialCursors, @Nullable Authorization authorization)", "full_signature": " Subscription subscribe(String applicationName, Set<String> eventNames, String consumerGroup, SubscriptionRequest.Position readFrom, @Nullable List<Cursor> initialCursors, @Nullable Authorization authorization)", "class_method_signature": "NakadiClient.subscribe(String applicationName, Set<String> eventNames, String consumerGroup, SubscriptionRequest.Position readFrom, @Nullable List<Cursor> initialCursors, @Nullable Authorization authorization)", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "(Subscription subscription)", "modifiers": "public", "return": "StreamBuilder.SubscriptionStreamBuilder", "signature": "StreamBuilder.SubscriptionStreamBuilder stream(Subscription subscription)", "full_signature": "public StreamBuilder.SubscriptionStreamBuilder stream(Subscription subscription)", "class_method_signature": "NakadiClient.stream(Subscription subscription)", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "(String eventName)", "modifiers": "public", "return": "StreamBuilder.LowLevelStreamBuilder", "signature": "StreamBuilder.LowLevelStreamBuilder stream(String eventName)", "full_signature": "public StreamBuilder.LowLevelStreamBuilder stream(String eventName)", "class_method_signature": "NakadiClient.stream(String eventName)", "testcase": false, "constructor": false}], "file": "fahrschein/src/main/java/org/zalando/fahrschein/NakadiClient.java"}, "focal_method": {"identifier": "deleteSubscription", "parameters": "(String subscriptionId)", "modifiers": "public", "return": "void", "body": "public void deleteSubscription(String subscriptionId) throws IOException {\n        checkArgument(!subscriptionId.isEmpty(), \"Subscription ID cannot be empty.\");\n\n        final URI uri = baseUri.resolve(String.format(\"/subscriptions/%s\", subscriptionId));\n        final Request request = clientHttpRequestFactory.createRequest(uri, \"DELETE\");\n\n        request.getHeaders().setContentType(ContentType.APPLICATION_JSON);\n\n        try (final Response response = request.execute()) {\n\n            final int status = response.getStatusCode();\n            if (status == 204) {\n                LOG.debug(\"Successfully deleted subscription [{}]\", subscriptionId);\n            }\n        }\n\n    }", "signature": "void deleteSubscription(String subscriptionId)", "full_signature": "public void deleteSubscription(String subscriptionId)", "class_method_signature": "NakadiClient.deleteSubscription(String subscriptionId)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "isEmpty", "resolve", "format", "createRequest", "setContentType", "getHeaders", "execute", "getStatusCode", "debug"]}, "repository": {"repo_id": 60344998, "url": "https://github.com/zalando-nakadi/fahrschein", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 17, "size": 776, "license": "licensed"}}