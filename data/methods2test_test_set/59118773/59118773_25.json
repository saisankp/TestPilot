{"test_class": {"identifier": "AbstractExcelSheetTest", "superclass": "", "interfaces": "", "fields": [], "file": "persistence/src/test/java/org/devgateway/toolkit/persistence/excel/AbstractExcelSheetTest.java"}, "test_case": {"identifier": "writeCell", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writeCell() throws Exception {\n        final Workbook workbook = new XSSFWorkbook();\n        final ExcelSheet excelSheet = new MockExcelSheet(workbook);\n        final Sheet sheet = workbook.createSheet(\"sheet\");\n        final Row row = sheet.createRow(0);\n\n        excelSheet.writeCell(null, row, 0);\n        excelSheet.writeCell(Boolean.TRUE, row, 1);\n        excelSheet.writeCell(\"text\", row, 2);\n        excelSheet.writeCell(1, row, 3);\n\n        Assert.assertEquals(CellType.BLANK, row.getCell(0).getCellType());\n        Assert.assertEquals(\"Yes\", row.getCell(1).getStringCellValue());\n        Assert.assertEquals(CellType.STRING, row.getCell(2).getCellType());\n        Assert.assertEquals(CellType.NUMERIC, row.getCell(3).getCellType());\n    }", "signature": "void writeCell()", "full_signature": "@Test public void writeCell()", "class_method_signature": "AbstractExcelSheetTest.writeCell()", "testcase": true, "constructor": false, "invocations": ["createSheet", "createRow", "writeCell", "writeCell", "writeCell", "writeCell", "assertEquals", "getCellType", "getCell", "assertEquals", "getStringCellValue", "getCell", "assertEquals", "getCellType", "getCell", "assertEquals", "getCellType", "getCell"]}, "focal_class": {"identifier": "AbstractExcelSheet", "superclass": "", "interfaces": "implements ExcelSheet", "fields": [{"original_string": "protected final Workbook workbook;", "modifier": "protected final", "type": "Workbook", "declarator": "workbook", "var_name": "workbook"}, {"original_string": "private Font dataFont;", "modifier": "private", "type": "Font", "declarator": "dataFont", "var_name": "dataFont"}, {"original_string": "private Font headerFont;", "modifier": "private", "type": "Font", "declarator": "headerFont", "var_name": "headerFont"}, {"original_string": "private Font linkFont;", "modifier": "private", "type": "Font", "declarator": "linkFont", "var_name": "linkFont"}, {"original_string": "private final CellStyle dataStyleCell;", "modifier": "private final", "type": "CellStyle", "declarator": "dataStyleCell", "var_name": "dataStyleCell"}, {"original_string": "private final CellStyle headerStyleCell;", "modifier": "private final", "type": "CellStyle", "declarator": "headerStyleCell", "var_name": "headerStyleCell"}, {"original_string": "private final CellStyle linkStyleCell;", "modifier": "private final", "type": "CellStyle", "declarator": "linkStyleCell", "var_name": "linkStyleCell"}, {"original_string": "private final CreationHelper createHelper;", "modifier": "private final", "type": "CreationHelper", "declarator": "createHelper", "var_name": "createHelper"}, {"original_string": "private Cell cell;", "modifier": "private", "type": "Cell", "declarator": "cell", "var_name": "cell"}], "methods": [{"identifier": "AbstractExcelSheet", "parameters": "(final Workbook workbook)", "modifiers": "public", "return": "", "signature": " AbstractExcelSheet(final Workbook workbook)", "full_signature": "public  AbstractExcelSheet(final Workbook workbook)", "class_method_signature": "AbstractExcelSheet.AbstractExcelSheet(final Workbook workbook)", "testcase": false, "constructor": true}, {"identifier": "writeCell", "parameters": "(final Object value, final Row row, final int column)", "modifiers": "@Override public", "return": "void", "signature": "void writeCell(final Object value, final Row row, final int column)", "full_signature": "@Override public void writeCell(final Object value, final Row row, final int column)", "class_method_signature": "AbstractExcelSheet.writeCell(final Object value, final Row row, final int column)", "testcase": false, "constructor": false}, {"identifier": "writeHeaderCell", "parameters": "(final Object value, final Row row, final int column)", "modifiers": "protected", "return": "void", "signature": "void writeHeaderCell(final Object value, final Row row, final int column)", "full_signature": "protected void writeHeaderCell(final Object value, final Row row, final int column)", "class_method_signature": "AbstractExcelSheet.writeHeaderCell(final Object value, final Row row, final int column)", "testcase": false, "constructor": false}, {"identifier": "writeCellLink", "parameters": "(final Object value, final Row row, final int column,\n                              final String sheetName, final int rowNumber)", "modifiers": "public", "return": "void", "signature": "void writeCellLink(final Object value, final Row row, final int column,\n                              final String sheetName, final int rowNumber)", "full_signature": "public void writeCellLink(final Object value, final Row row, final int column,\n                              final String sheetName, final int rowNumber)", "class_method_signature": "AbstractExcelSheet.writeCellLink(final Object value, final Row row, final int column,\n                              final String sheetName, final int rowNumber)", "testcase": false, "constructor": false}, {"identifier": "createRow", "parameters": "(final Sheet sheet, final int rowNumber)", "modifiers": "protected", "return": "Row", "signature": "Row createRow(final Sheet sheet, final int rowNumber)", "full_signature": "protected Row createRow(final Sheet sheet, final int rowNumber)", "class_method_signature": "AbstractExcelSheet.createRow(final Sheet sheet, final int rowNumber)", "testcase": false, "constructor": false}, {"identifier": "getFreeColl", "parameters": "(final Row row)", "modifiers": "protected", "return": "int", "signature": "int getFreeColl(final Row row)", "full_signature": "protected int getFreeColl(final Row row)", "class_method_signature": "AbstractExcelSheet.getFreeColl(final Row row)", "testcase": false, "constructor": false}], "file": "persistence/src/main/java/org/devgateway/toolkit/persistence/excel/AbstractExcelSheet.java"}, "focal_method": {"identifier": "writeCell", "parameters": "(final Object value, final Row row, final int column)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void writeCell(final Object value, final Row row, final int column) {\n        // try to determine the cell type based on the object value\n        // if nothing matches then use 'CellType.STRING' as type and call the object toString() function.\n        //      * don't create any cell if the value is null (Cell.CELL_TYPE_BLANK)\n        //      * do nothing if we have an empty List/Set instead of display empty brackets like [ ]\n        if (value != null && !((value instanceof List || value instanceof Set) && ((Collection) value).isEmpty())) {\n            if (value instanceof String) {\n                cell = row.createCell(column, CellType.STRING);\n                cell.setCellValue((String) value);\n            } else {\n                if (value instanceof Integer) {\n                    cell = row.createCell(column, CellType.NUMERIC);\n                    cell.setCellValue((Integer) value);\n                } else {\n                    if (value instanceof BigDecimal) {\n                        cell = row.createCell(column, CellType.NUMERIC);\n                        cell.setCellValue(((BigDecimal) value).doubleValue());\n                    } else {\n                        if (value instanceof Boolean) {\n                            cell = row.createCell(column, CellType.BOOLEAN);\n                            cell.setCellValue(((Boolean) value) ? \"Yes\" : \"No\");\n                        } else {\n                            if (value instanceof Date) {\n                                final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n\n                                cell = row.createCell(column);\n                                cell.setCellValue(sdf.format((Date) value));\n                            } else {\n                                cell = row.createCell(column, CellType.STRING);\n                                cell.setCellValue(value.toString());\n                            }\n                        }\n                    }\n                }\n            }\n\n            cell.setCellStyle(dataStyleCell);\n        } else {\n            // create a CellType.BLANK\n            row.createCell(column);\n        }\n    }", "signature": "void writeCell(final Object value, final Row row, final int column)", "full_signature": "@Override public void writeCell(final Object value, final Row row, final int column)", "class_method_signature": "AbstractExcelSheet.writeCell(final Object value, final Row row, final int column)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "createCell", "setCellValue", "createCell", "setCellValue", "createCell", "setCellValue", "doubleValue", "createCell", "setCellValue", "createCell", "setCellValue", "format", "createCell", "setCellValue", "toString", "setCellStyle", "createCell"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}