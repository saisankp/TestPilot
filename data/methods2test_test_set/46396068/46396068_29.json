{"test_class": {"identifier": "AssignTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "hbase0.98/hbase-manager-0.98/src/test/java/com/kakao/hbase/manager/command/AssignTest.java"}, "test_case": {"identifier": "testExportImport", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExportImport() throws Exception {\n        ArrayList<ServerName> serverNameList;\n        List<HRegionInfo> regionInfoList;\n        ServerName rs1, rs2;\n        List<String> assignmentList;\n\n        String expFileName = \"export_test.exp\";\n\n        splitTable(\"a\".getBytes());\n        splitTable(\"b\".getBytes());\n\n        serverNameList = getServerNameList();\n        rs1 = serverNameList.get(0);\n        rs2 = serverNameList.get(1);\n\n        // move all regions to rs1\n        regionInfoList = getRegionInfoList(tableName);\n        for (HRegionInfo hRegionInfo : regionInfoList)\n            move(hRegionInfo, rs1);\n        assertEquals(regionInfoList.size(), getRegionInfoList(rs1, tableName).size());\n\n        boolean balancerRunning = false;\n        try {\n            String[] argsParam;\n            Args args;\n            Assign command;\n\n            // export\n            balancerRunning = admin.setBalancerRunning(false, true);\n            argsParam = new String[]{\"zookeeper\", \"export\", expFileName};\n            args = new ManagerArgs(argsParam);\n            command = new Assign(admin, args);\n            command.run();\n\n            assignmentList = readExportFile(expFileName);\n            assertEquals(AssignAction.getProcessedCount(), assignmentList.size());\n\n            // modify exported file\n            try (PrintWriter writer = new PrintWriter(expFileName, Constant.CHARSET.name())) {\n                int i = 0, j = 0;\n                for (String assignment : assignmentList) {\n                    if (i == 0) {\n                        // add an invalid region\n                        writer.println(assignment.replaceAll(\"/.*/\", \"/nonono/\"));\n                    }\n\n                    // add a not existing table\n                    if (j == 0 && assignment.endsWith(tableName)) {\n                        writer.println(assignment.replaceAll(\"/\" + tableName, \"/\" + tableName + \"_INVALID\"));\n                        j++;\n                    }\n\n                    if (i == 2) {\n                        // modify region server timestamp\n                        int index1 = assignment.indexOf(\",\");\n                        int index2 = assignment.indexOf(\",\", index1 + 1);\n                        int index3 = assignment.indexOf(AssignAction.DELIMITER, index2 + 1);\n                        String rsTimestamp = assignment.substring(index2 + 1, index3);\n\n                        writer.println(assignment.replaceAll(rsTimestamp, String.valueOf(System.currentTimeMillis())));\n                    } else {\n                        writer.println(assignment);\n                    }\n\n                    i++;\n                }\n            }\n            assignmentList = readExportFile(expFileName);\n            assertEquals(AssignAction.getProcessedCount() + 2, assignmentList.size());\n\n            // remember region count of rs1\n            int regionCountRS1 = getRegionInfoList(rs1, tableName).size();\n\n            // move all regions to rs2\n            regionInfoList = getRegionInfoList(tableName);\n            for (HRegionInfo hRegionInfo : regionInfoList)\n                move(hRegionInfo, rs2);\n            assertEquals(0, getRegionInfoList(rs1, tableName).size());\n            assertEquals(regionInfoList.size(), getRegionInfoList(rs2, tableName).size());\n\n            // import\n            balancerRunning = admin.setBalancerRunning(false, true);\n            argsParam = new String[]{\"zookeeper\", \"import\", expFileName, \"--force-proceed\"};\n            args = new ManagerArgs(argsParam);\n            command = new Assign(admin, args);\n            command.run();\n\n            // verify\n            assertEquals(regionCountRS1, getRegionInfoList(rs1, tableName).size());\n            assertEquals(regionInfoList.size(), getRegionInfoList(tableName).size());\n        } finally {\n            if (balancerRunning)\n                admin.setBalancerRunning(true, true);\n            Files.delete(Paths.get(expFileName));\n        }\n    }", "signature": "void testExportImport()", "full_signature": "@Test public void testExportImport()", "class_method_signature": "AssignTest.testExportImport()", "testcase": true, "constructor": false, "invocations": ["splitTable", "getBytes", "splitTable", "getBytes", "getServerNameList", "get", "get", "getRegionInfoList", "move", "assertEquals", "size", "size", "getRegionInfoList", "setBalancerRunning", "run", "readExportFile", "assertEquals", "getProcessedCount", "size", "name", "println", "replaceAll", "endsWith", "println", "replaceAll", "indexOf", "indexOf", "indexOf", "substring", "println", "replaceAll", "valueOf", "currentTimeMillis", "println", "readExportFile", "assertEquals", "getProcessedCount", "size", "size", "getRegionInfoList", "getRegionInfoList", "move", "assertEquals", "size", "getRegionInfoList", "assertEquals", "size", "size", "getRegionInfoList", "setBalancerRunning", "run", "assertEquals", "size", "getRegionInfoList", "assertEquals", "size", "size", "getRegionInfoList", "setBalancerRunning", "delete", "get"]}, "focal_class": {"identifier": "Assign", "superclass": "", "interfaces": "implements Command", "fields": [{"original_string": "private final HBaseAdmin admin;", "modifier": "private final", "type": "HBaseAdmin", "declarator": "admin", "var_name": "admin"}, {"original_string": "private final Args args;", "modifier": "private final", "type": "Args", "declarator": "args", "var_name": "args"}], "methods": [{"identifier": "Assign", "parameters": "(HBaseAdmin admin, Args args)", "modifiers": "public", "return": "", "signature": " Assign(HBaseAdmin admin, Args args)", "full_signature": "public  Assign(HBaseAdmin admin, Args args)", "class_method_signature": "Assign.Assign(HBaseAdmin admin, Args args)", "testcase": false, "constructor": true}, {"identifier": "usage", "parameters": "()", "modifiers": "@SuppressWarnings(\"unused\") public static", "return": "String", "signature": "String usage()", "full_signature": "@SuppressWarnings(\"unused\") public static String usage()", "class_method_signature": "Assign.usage()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "Assign.run()", "testcase": false, "constructor": false}], "file": "hbase0.98/hbase-manager-0.98/src/main/java/com/kakao/hbase/manager/command/Assign.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() throws Exception {\n        String actionStr = ((String) args.getOptionSet().nonOptionArguments().get(1)).toUpperCase();\n        AssignAction assignAction = AssignAction.valueOf(actionStr);\n        assignAction.run(admin, args);\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "Assign.run()", "testcase": false, "constructor": false, "invocations": ["toUpperCase", "get", "nonOptionArguments", "getOptionSet", "valueOf", "run"]}, "repository": {"repo_id": 46396068, "url": "https://github.com/kakao/hbase-tools", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 49, "size": 1758, "license": "licensed"}}