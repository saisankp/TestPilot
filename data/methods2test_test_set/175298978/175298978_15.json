{"test_class": {"identifier": "BranchQueryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String SELECT_HEAD = \"select head\";", "modifier": "public static final", "type": "String", "declarator": "SELECT_HEAD = \"select head\"", "var_name": "SELECT_HEAD"}, {"original_string": "private final int projectId = 1;", "modifier": "private final", "type": "int", "declarator": "projectId = 1", "var_name": "projectId"}, {"original_string": "private Persistence persistence;", "modifier": "private", "type": "Persistence", "declarator": "persistence", "var_name": "persistence"}, {"original_string": "private BranchQueries branchQueries;", "modifier": "private", "type": "BranchQueries", "declarator": "branchQueries", "var_name": "branchQueries"}, {"original_string": "private CommitQueries commitQueries;", "modifier": "private", "type": "CommitQueries", "declarator": "commitQueries", "var_name": "commitQueries"}, {"original_string": "private Repository repository;", "modifier": "private", "type": "Repository", "declarator": "repository", "var_name": "repository"}], "file": "SmellTracker/src/test/java/fr/inria/sniffer/tracker/analysis/query/branch/BranchQueryTest.java"}, "test_case": {"identifier": "testMergeIsLastBranchCommit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMergeIsLastBranchCommit() throws QueryException, IOException {\n        Commit A = new Commit(\"a\", 1);\n        Commit B = new Commit(\"b\", 2, Collections.singletonList(A));\n        Commit C = new Commit(\"c\", 3, Collections.singletonList(B));\n        Commit D = new Commit(\"d\", 5, Arrays.asList(B, C));\n        Commit E = new Commit(\"e\", 4, Arrays.asList(B, D));\n        Commit F = new Commit(\"f\", 6, Arrays.asList(A, E));\n\n        initializeHead(F);\n        initializeMocks(A, B, C, D, E, F);\n\n        getQuery().query();\n        debugBranchCommitInsertions();\n\n        verify(persistence, times(10)).addStatements(any());\n        verify(branchQueries).branchInsertionStatement(projectId, 0, null, null);\n        verify(branchQueries).branchCommitInsertionQuery(projectId, 0, A.sha, 0);\n        verify(branchQueries).branchCommitInsertionQuery(projectId, 0, F.sha, 1);\n\n        verify(branchQueries).branchInsertionStatement(projectId, 1, A, F);\n        verify(branchQueries).branchCommitInsertionQuery(projectId, 1, B.sha, 0);\n        verify(branchQueries).branchCommitInsertionQuery(projectId, 1, E.sha, 1);\n\n        verify(branchQueries).branchInsertionStatement(projectId, 2, B, E);\n        verify(branchQueries).branchCommitInsertionQuery(projectId, 2, D.sha, 0);\n\n        verify(branchQueries).branchInsertionStatement(projectId, 3, B, D);\n        verify(branchQueries).branchCommitInsertionQuery(projectId, 3, C.sha, 0);\n    }", "signature": "void testMergeIsLastBranchCommit()", "full_signature": "@Test public void testMergeIsLastBranchCommit()", "class_method_signature": "BranchQueryTest.testMergeIsLastBranchCommit()", "testcase": true, "constructor": false, "invocations": ["singletonList", "singletonList", "asList", "asList", "asList", "initializeHead", "initializeMocks", "query", "getQuery", "debugBranchCommitInsertions", "addStatements", "verify", "times", "any", "branchInsertionStatement", "verify", "branchCommitInsertionQuery", "verify", "branchCommitInsertionQuery", "verify", "branchInsertionStatement", "verify", "branchCommitInsertionQuery", "verify", "branchCommitInsertionQuery", "verify", "branchInsertionStatement", "verify", "branchCommitInsertionQuery", "verify", "branchInsertionStatement", "verify", "branchCommitInsertionQuery", "verify"]}, "focal_class": {"identifier": "BranchQuery", "superclass": "extends PersistenceAnalyzer", "interfaces": "implements Query", "fields": [{"original_string": "private final Repository repository;", "modifier": "private final", "type": "Repository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private final BranchQueries branchQueries;", "modifier": "private final", "type": "BranchQueries", "declarator": "branchQueries", "var_name": "branchQueries"}, {"original_string": "private int branchCounter;", "modifier": "private", "type": "int", "declarator": "branchCounter", "var_name": "branchCounter"}], "methods": [{"identifier": "BranchQuery", "parameters": "(int projectId, Repository repository,\n                       Persistence persistence, CommitQueries commitQueries, BranchQueries branchQueries)", "modifiers": "public", "return": "", "signature": " BranchQuery(int projectId, Repository repository,\n                       Persistence persistence, CommitQueries commitQueries, BranchQueries branchQueries)", "full_signature": "public  BranchQuery(int projectId, Repository repository,\n                       Persistence persistence, CommitQueries commitQueries, BranchQueries branchQueries)", "class_method_signature": "BranchQuery.BranchQuery(int projectId, Repository repository,\n                       Persistence persistence, CommitQueries commitQueries, BranchQueries branchQueries)", "testcase": false, "constructor": true}, {"identifier": "query", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void query()", "full_signature": "@Override public void query()", "class_method_signature": "BranchQuery.query()", "testcase": false, "constructor": false}, {"identifier": "retrieveHeadCommit", "parameters": "()", "modifiers": "private", "return": "Commit", "signature": "Commit retrieveHeadCommit()", "full_signature": "private Commit retrieveHeadCommit()", "class_method_signature": "BranchQuery.retrieveHeadCommit()", "testcase": false, "constructor": false}, {"identifier": "persistBranch", "parameters": "(Branch branch)", "modifiers": "private", "return": "void", "signature": "void persistBranch(Branch branch)", "full_signature": "private void persistBranch(Branch branch)", "class_method_signature": "BranchQuery.persistBranch(Branch branch)", "testcase": false, "constructor": false}, {"identifier": "reverse_ordinal", "parameters": "(List<Commit> commits)", "modifiers": "private", "return": "void", "signature": "void reverse_ordinal(List<Commit> commits)", "full_signature": "private void reverse_ordinal(List<Commit> commits)", "class_method_signature": "BranchQuery.reverse_ordinal(List<Commit> commits)", "testcase": false, "constructor": false}, {"identifier": "buildBranchTree", "parameters": "(Branch mother, Commit start)", "modifiers": "private", "return": "List<Branch>", "signature": "List<Branch> buildBranchTree(Branch mother, Commit start)", "full_signature": "private List<Branch> buildBranchTree(Branch mother, Commit start)", "class_method_signature": "BranchQuery.buildBranchTree(Branch mother, Commit start)", "testcase": false, "constructor": false}, {"identifier": "buildBranch", "parameters": "(Branch mother, Commit start)", "modifiers": "private", "return": "Branch", "signature": "Branch buildBranch(Branch mother, Commit start)", "full_signature": "private Branch buildBranch(Branch mother, Commit start)", "class_method_signature": "BranchQuery.buildBranch(Branch mother, Commit start)", "testcase": false, "constructor": false}, {"identifier": "retrieveParentCommit", "parameters": "(Commit commit, int position)", "modifiers": "private", "return": "Commit", "signature": "Commit retrieveParentCommit(Commit commit, int position)", "full_signature": "private Commit retrieveParentCommit(Commit commit, int position)", "class_method_signature": "BranchQuery.retrieveParentCommit(Commit commit, int position)", "testcase": false, "constructor": false}, {"identifier": "nextStillInBranch", "parameters": "(Commit commit, Branch mother)", "modifiers": "private", "return": "boolean", "signature": "boolean nextStillInBranch(Commit commit, Branch mother)", "full_signature": "private boolean nextStillInBranch(Commit commit, Branch mother)", "class_method_signature": "BranchQuery.nextStillInBranch(Commit commit, Branch mother)", "testcase": false, "constructor": false}, {"identifier": "isProjectFirstCommit", "parameters": "(Commit commit)", "modifiers": "private", "return": "boolean", "signature": "boolean isProjectFirstCommit(Commit commit)", "full_signature": "private boolean isProjectFirstCommit(Commit commit)", "class_method_signature": "BranchQuery.isProjectFirstCommit(Commit commit)", "testcase": false, "constructor": false}, {"identifier": "isInBranch", "parameters": "(Branch branch, Commit commit)", "modifiers": "private", "return": "boolean", "signature": "boolean isInBranch(Branch branch, Commit commit)", "full_signature": "private boolean isInBranch(Branch branch, Commit commit)", "class_method_signature": "BranchQuery.isInBranch(Branch branch, Commit commit)", "testcase": false, "constructor": false}], "file": "SmellTracker/src/main/java/fr/inria/sniffer/tracker/analysis/query/branch/BranchQuery.java"}, "focal_method": {"identifier": "query", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void query() throws QueryException {\n        logger.info(\"[\" + projectId + \"] Starting Branches insertion\");\n        Commit commit = retrieveHeadCommit();\n\n        List<Branch> branches = buildBranchTree(null, commit);\n        for (Branch branch : branches) {\n            persistBranch(branch);\n        }\n        persistence.commit();\n    }", "signature": "void query()", "full_signature": "@Override public void query()", "class_method_signature": "BranchQuery.query()", "testcase": false, "constructor": false, "invocations": ["info", "retrieveHeadCommit", "buildBranchTree", "persistBranch", "commit"]}, "repository": {"repo_id": 175298978, "url": "https://github.com/HabchiSarra/Sniffer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 587, "license": "licensed"}}