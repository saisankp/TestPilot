{"test_class": {"identifier": "ScalarSubscriptionTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/subscriptions/ScalarSubscriptionTest.java"}, "test_case": {"identifier": "badRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void badRequest() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(0L);\n\n        ScalarSubscription<Integer> sc = new ScalarSubscription<Integer>(ts, 1);\n\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            sc.request(-99);\n\n            TestHelper.assertError(errors, 0, IllegalArgumentException.class, \"n > 0 required but it was -99\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }", "signature": "void badRequest()", "full_signature": "@Test public void badRequest()", "class_method_signature": "ScalarSubscriptionTest.badRequest()", "testcase": true, "constructor": false, "invocations": ["trackPluginErrors", "request", "assertError", "reset"]}, "focal_class": {"identifier": "ScalarSubscription", "superclass": "extends AtomicInteger", "interfaces": "implements QueueSubscription<T>", "fields": [{"original_string": "private static final long serialVersionUID = -3830916580126663321L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -3830916580126663321L", "var_name": "serialVersionUID"}, {"original_string": "final T value;", "modifier": "final", "type": "T", "declarator": "value", "var_name": "value"}, {"original_string": "final Subscriber<? super T> subscriber;", "modifier": "final", "type": "Subscriber<? super T>", "declarator": "subscriber", "var_name": "subscriber"}, {"original_string": "static final int NO_REQUEST = 0;", "modifier": "static final", "type": "int", "declarator": "NO_REQUEST = 0", "var_name": "NO_REQUEST"}, {"original_string": "static final int REQUESTED = 1;", "modifier": "static final", "type": "int", "declarator": "REQUESTED = 1", "var_name": "REQUESTED"}, {"original_string": "static final int CANCELLED = 2;", "modifier": "static final", "type": "int", "declarator": "CANCELLED = 2", "var_name": "CANCELLED"}], "methods": [{"identifier": "ScalarSubscription", "parameters": "(Subscriber<? super T> subscriber, T value)", "modifiers": "public", "return": "", "signature": " ScalarSubscription(Subscriber<? super T> subscriber, T value)", "full_signature": "public  ScalarSubscription(Subscriber<? super T> subscriber, T value)", "class_method_signature": "ScalarSubscription.ScalarSubscription(Subscriber<? super T> subscriber, T value)", "testcase": false, "constructor": true}, {"identifier": "request", "parameters": "(long n)", "modifiers": "@Override public", "return": "void", "signature": "void request(long n)", "full_signature": "@Override public void request(long n)", "class_method_signature": "ScalarSubscription.request(long n)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "ScalarSubscription.cancel()", "testcase": false, "constructor": false}, {"identifier": "isCancelled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCancelled()", "full_signature": "public boolean isCancelled()", "class_method_signature": "ScalarSubscription.isCancelled()", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(T e)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offer(T e)", "full_signature": "@Override public boolean offer(T e)", "class_method_signature": "ScalarSubscription.offer(T e)", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(T v1, T v2)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offer(T v1, T v2)", "full_signature": "@Override public boolean offer(T v1, T v2)", "class_method_signature": "ScalarSubscription.offer(T v1, T v2)", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "T", "signature": "T poll()", "full_signature": "@Nullable @Override public T poll()", "class_method_signature": "ScalarSubscription.poll()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "ScalarSubscription.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "ScalarSubscription.clear()", "testcase": false, "constructor": false}, {"identifier": "requestFusion", "parameters": "(int mode)", "modifiers": "@Override public", "return": "int", "signature": "int requestFusion(int mode)", "full_signature": "@Override public int requestFusion(int mode)", "class_method_signature": "ScalarSubscription.requestFusion(int mode)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/subscriptions/ScalarSubscription.java"}, "focal_method": {"identifier": "request", "parameters": "(long n)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void request(long n) {\n        if (!SubscriptionHelper.validate(n)) {\n            return;\n        }\n        if (compareAndSet(NO_REQUEST, REQUESTED)) {\n            Subscriber<? super T> s = subscriber;\n\n            s.onNext(value);\n            if (get() != CANCELLED) {\n                s.onComplete();\n            }\n        }\n\n    }", "signature": "void request(long n)", "full_signature": "@Override public void request(long n)", "class_method_signature": "ScalarSubscription.request(long n)", "testcase": false, "constructor": false, "invocations": ["validate", "compareAndSet", "onNext", "get", "onComplete"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}