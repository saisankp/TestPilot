{"test_class": {"identifier": "GitHubPullRequestSenderTest", "superclass": "", "interfaces": "", "fields": [], "file": "dockerfile-image-update/src/test/java/com/salesforce/dockerfileimageupdate/process/GitHubPullRequestSenderTest.java"}, "test_case": {"identifier": "testDoNotForkReposWhichDoNotQualify", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoNotForkReposWhichDoNotQualify() throws Exception {\n        DockerfileGitHubUtil dockerfileGitHubUtil = mock(DockerfileGitHubUtil.class);\n\n        GHRepository contentRepo1 = mock(GHRepository.class);\n        when(contentRepo1.getFullName()).thenReturn(\"1\");\n\n        GHContent content1 = mock(GHContent.class);\n        when(content1.getOwner()).thenReturn(contentRepo1);\n        when(contentRepo1.isFork()).thenReturn(true);\n\n        PagedSearchIterable<GHContent> contentsWithImage = mock(PagedSearchIterable.class);\n\n        PagedIterator<GHContent> contentsWithImageIterator = mock(PagedIterator.class);\n        when(contentsWithImageIterator.hasNext()).thenReturn(true, false);\n        when(contentsWithImageIterator.next()).thenReturn(content1, null);\n        when(contentsWithImage.iterator()).thenReturn(contentsWithImageIterator);\n\n        when(dockerfileGitHubUtil.getRepo(any())).thenReturn(contentRepo1);\n\n        ForkableRepoValidator forkableRepoValidator = mock(ForkableRepoValidator.class);\n        when(forkableRepoValidator.shouldFork(any(), any(), any())).thenReturn(ShouldForkResult.shouldNotForkResult(\"\"));\n\n        GitHubPullRequestSender pullRequestSender = new GitHubPullRequestSender(dockerfileGitHubUtil, forkableRepoValidator);\n        Multimap<String, GitHubContentToProcess> repoMap =\n                pullRequestSender.forkRepositoriesFoundAndGetPathToDockerfiles(contentsWithImage, null);\n\n        verify(dockerfileGitHubUtil, never()).getOrCreateFork(any());\n        assertEquals(repoMap.size(), 0);\n    }", "signature": "void testDoNotForkReposWhichDoNotQualify()", "full_signature": "@Test public void testDoNotForkReposWhichDoNotQualify()", "class_method_signature": "GitHubPullRequestSenderTest.testDoNotForkReposWhichDoNotQualify()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getFullName", "mock", "thenReturn", "when", "getOwner", "thenReturn", "when", "isFork", "mock", "mock", "thenReturn", "when", "hasNext", "thenReturn", "when", "next", "thenReturn", "when", "iterator", "thenReturn", "when", "getRepo", "any", "mock", "thenReturn", "when", "shouldFork", "any", "any", "any", "shouldNotForkResult", "forkRepositoriesFoundAndGetPathToDockerfiles", "getOrCreateFork", "verify", "never", "any", "assertEquals", "size"]}, "focal_class": {"identifier": "GitHubPullRequestSender", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(GitHubPullRequestSender.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(GitHubPullRequestSender.class)", "var_name": "log"}, {"original_string": "public static final String REPO_IS_FORK = \"it's a fork already. Sending a PR to a fork is unsupported at the moment.\";", "modifier": "public static final", "type": "String", "declarator": "REPO_IS_FORK = \"it's a fork already. Sending a PR to a fork is unsupported at the moment.\"", "var_name": "REPO_IS_FORK"}, {"original_string": "private final DockerfileGitHubUtil dockerfileGitHubUtil;", "modifier": "private final", "type": "DockerfileGitHubUtil", "declarator": "dockerfileGitHubUtil", "var_name": "dockerfileGitHubUtil"}, {"original_string": "private final ForkableRepoValidator forkableRepoValidator;", "modifier": "private final", "type": "ForkableRepoValidator", "declarator": "forkableRepoValidator", "var_name": "forkableRepoValidator"}], "methods": [{"identifier": "GitHubPullRequestSender", "parameters": "(DockerfileGitHubUtil dockerfileGitHubUtil, ForkableRepoValidator forkableRepoValidator)", "modifiers": "public", "return": "", "signature": " GitHubPullRequestSender(DockerfileGitHubUtil dockerfileGitHubUtil, ForkableRepoValidator forkableRepoValidator)", "full_signature": "public  GitHubPullRequestSender(DockerfileGitHubUtil dockerfileGitHubUtil, ForkableRepoValidator forkableRepoValidator)", "class_method_signature": "GitHubPullRequestSender.GitHubPullRequestSender(DockerfileGitHubUtil dockerfileGitHubUtil, ForkableRepoValidator forkableRepoValidator)", "testcase": false, "constructor": true}, {"identifier": "forkRepositoriesFoundAndGetPathToDockerfiles", "parameters": "(\n            PagedSearchIterable<GHContent> contentsWithImage,\n            GitForkBranch gitForkBranch)", "modifiers": "public", "return": "Multimap<String, GitHubContentToProcess>", "signature": "Multimap<String, GitHubContentToProcess> forkRepositoriesFoundAndGetPathToDockerfiles(\n            PagedSearchIterable<GHContent> contentsWithImage,\n            GitForkBranch gitForkBranch)", "full_signature": "public Multimap<String, GitHubContentToProcess> forkRepositoriesFoundAndGetPathToDockerfiles(\n            PagedSearchIterable<GHContent> contentsWithImage,\n            GitForkBranch gitForkBranch)", "class_method_signature": "GitHubPullRequestSender.forkRepositoriesFoundAndGetPathToDockerfiles(\n            PagedSearchIterable<GHContent> contentsWithImage,\n            GitForkBranch gitForkBranch)", "testcase": false, "constructor": false}, {"identifier": "ensureForkedAndAddToListForProcessing", "parameters": "(Multimap<String, GitHubContentToProcess> pathToDockerfilesInParentRepo,\n                                                       GHRepository parent,\n                                                       String parentRepoName,\n                                                       GHContent ghContent)", "modifiers": "private", "return": "void", "signature": "void ensureForkedAndAddToListForProcessing(Multimap<String, GitHubContentToProcess> pathToDockerfilesInParentRepo,\n                                                       GHRepository parent,\n                                                       String parentRepoName,\n                                                       GHContent ghContent)", "full_signature": "private void ensureForkedAndAddToListForProcessing(Multimap<String, GitHubContentToProcess> pathToDockerfilesInParentRepo,\n                                                       GHRepository parent,\n                                                       String parentRepoName,\n                                                       GHContent ghContent)", "class_method_signature": "GitHubPullRequestSender.ensureForkedAndAddToListForProcessing(Multimap<String, GitHubContentToProcess> pathToDockerfilesInParentRepo,\n                                                       GHRepository parent,\n                                                       String parentRepoName,\n                                                       GHContent ghContent)", "testcase": false, "constructor": false}, {"identifier": "getForkFromExistingRecordToProcess", "parameters": "(Multimap<String, GitHubContentToProcess> pathToDockerfilesInParentRepo,\n                                                            String parentRepoName)", "modifiers": "protected", "return": "GHRepository", "signature": "GHRepository getForkFromExistingRecordToProcess(Multimap<String, GitHubContentToProcess> pathToDockerfilesInParentRepo,\n                                                            String parentRepoName)", "full_signature": "protected GHRepository getForkFromExistingRecordToProcess(Multimap<String, GitHubContentToProcess> pathToDockerfilesInParentRepo,\n                                                            String parentRepoName)", "class_method_signature": "GitHubPullRequestSender.getForkFromExistingRecordToProcess(Multimap<String, GitHubContentToProcess> pathToDockerfilesInParentRepo,\n                                                            String parentRepoName)", "testcase": false, "constructor": false}], "file": "dockerfile-image-update/src/main/java/com/salesforce/dockerfileimageupdate/process/GitHubPullRequestSender.java"}, "focal_method": {"identifier": "forkRepositoriesFoundAndGetPathToDockerfiles", "parameters": "(\n            PagedSearchIterable<GHContent> contentsWithImage,\n            GitForkBranch gitForkBranch)", "modifiers": "public", "return": "Multimap<String, GitHubContentToProcess>", "body": "public Multimap<String, GitHubContentToProcess> forkRepositoriesFoundAndGetPathToDockerfiles(\n            PagedSearchIterable<GHContent> contentsWithImage,\n            GitForkBranch gitForkBranch) {\n        log.info(\"Forking repositories...\");\n        Multimap<String, GitHubContentToProcess> pathToDockerfilesInParentRepo = HashMultimap.create();\n        GHRepository parent;\n        String parentRepoName;\n        int totalContentsFound = 0;\n        int contentsShouldFork = 0;\n        for (GHContent ghContent : contentsWithImage) {\n            /* Kohsuke's GitHub API library, when retrieving the forked repository, looks at the name of the parent to\n             * retrieve. The issue with that is: GitHub, when forking two or more repositories with the same name,\n             * automatically fixes the names to be unique (by appending \"-#\" to the end). Because of this edge case, we\n             * cannot save the forks and iterate over the repositories; else, we end up missing/not updating the\n             * repositories that were automatically fixed by GitHub. Instead, we save the names of the parent repos\n             * in the map above, find the list of repositories under the authorized user, and iterate through that list.\n             */\n            totalContentsFound++;\n            parent = ghContent.getOwner();\n            parentRepoName = parent.getFullName();\n            // Refresh the repo to ensure that the object has full details\n            try {\n                parent = dockerfileGitHubUtil.getRepo(parentRepoName);\n                ShouldForkResult shouldForkResult = forkableRepoValidator.shouldFork(parent, ghContent, gitForkBranch);\n                if (shouldForkResult.isForkable()) {\n                    contentsShouldFork++;\n                    // fork the parent if not already forked\n                    ensureForkedAndAddToListForProcessing(pathToDockerfilesInParentRepo, parent, parentRepoName, ghContent);\n                } else {\n                    log.warn(\"Skipping {} because {}\", parentRepoName, shouldForkResult.getReason());\n                }\n            } catch (IOException exception) {\n                log.warn(\"Could not refresh details of {}\", parentRepoName);\n            }\n        }\n\n        log.info(\"Out of {} content search results processed, {} were deemed eligible for forking to yield {} repositories to fork.\",\n                totalContentsFound, contentsShouldFork, pathToDockerfilesInParentRepo.keys().size());\n        log.info(\"Path to Dockerfiles in repos: {}\", pathToDockerfilesInParentRepo);\n\n        return pathToDockerfilesInParentRepo;\n    }", "signature": "Multimap<String, GitHubContentToProcess> forkRepositoriesFoundAndGetPathToDockerfiles(\n            PagedSearchIterable<GHContent> contentsWithImage,\n            GitForkBranch gitForkBranch)", "full_signature": "public Multimap<String, GitHubContentToProcess> forkRepositoriesFoundAndGetPathToDockerfiles(\n            PagedSearchIterable<GHContent> contentsWithImage,\n            GitForkBranch gitForkBranch)", "class_method_signature": "GitHubPullRequestSender.forkRepositoriesFoundAndGetPathToDockerfiles(\n            PagedSearchIterable<GHContent> contentsWithImage,\n            GitForkBranch gitForkBranch)", "testcase": false, "constructor": false, "invocations": ["info", "create", "getOwner", "getFullName", "getRepo", "shouldFork", "isForkable", "ensureForkedAndAddToListForProcessing", "warn", "getReason", "warn", "info", "size", "keys", "info"]}, "repository": {"repo_id": 104787715, "url": "https://github.com/salesforce/dockerfile-image-update", "stars": 62, "created": "9/25/2017 6:38:13 PM +00:00", "updates": "2020-01-23T07:15:59+00:00", "fork": "False", "license": "licensed"}}