{"test_class": {"identifier": "TestByteArrayHelper", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestByteArrayHelper.java"}, "test_case": {"identifier": "testSetBit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSetBit() {\n    // Set a true bit to false\n    byte[] byteArray = new byte[] { (byte) 0x54, (byte) 0x04 };\n    ByteArrayHelper.setBit(byteArray, 13, false);\n    byte[] expected = new byte[] { (byte) 0x54, (byte) 0x00 };\n    for (int i = 0; i < byteArray.length; i++) {\n      assertEquals(expected[i], byteArray[i]);\n    }\n    // Set a false bit to true\n    byteArray = new byte[] { (byte) 0x54, (byte) 0x04 };\n    ByteArrayHelper.setBit(byteArray, 15, true);\n    expected = new byte[] { (byte) 0x54, (byte) 0x05 };\n    for (int i = 0; i < byteArray.length; i++) {\n      assertEquals(expected[i], byteArray[i]);\n    }\n    // Set a false bit to false\n    byteArray = new byte[] { (byte) 0x54, (byte) 0x04 };\n    ByteArrayHelper.setBit(byteArray, 2, false);\n    expected = new byte[] { (byte) 0x54, (byte) 0x04 };\n    for (int i = 0; i < byteArray.length; i++) {\n      assertEquals(expected[i], byteArray[i]);\n    }\n    // Set a true bit to true\n    byteArray = new byte[] { (byte) 0x54, (byte) 0x04 };\n    ByteArrayHelper.setBit(byteArray, 3, true);\n    expected = new byte[] { (byte) 0x54, (byte) 0x04 };\n    for (int i = 0; i < byteArray.length; i++) {\n      assertEquals(expected[i], byteArray[i]);\n    }\n  }", "signature": "void testSetBit()", "full_signature": "@Test public void testSetBit()", "class_method_signature": "TestByteArrayHelper.testSetBit()", "testcase": true, "constructor": false, "invocations": ["setBit", "assertEquals", "setBit", "assertEquals", "setBit", "assertEquals", "setBit", "assertEquals"]}, "focal_class": {"identifier": "ByteArrayHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ByteArrayHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " ByteArrayHelper()", "full_signature": "private  ByteArrayHelper()", "class_method_signature": "ByteArrayHelper.ByteArrayHelper()", "testcase": false, "constructor": true}, {"identifier": "getBit", "parameters": "(byte[] input, int index)", "modifiers": "public static", "return": "boolean", "signature": "boolean getBit(byte[] input, int index)", "full_signature": "public static boolean getBit(byte[] input, int index)", "class_method_signature": "ByteArrayHelper.getBit(byte[] input, int index)", "testcase": false, "constructor": false}, {"identifier": "setBit", "parameters": "(byte[] input, int index, boolean choice)", "modifiers": "public static", "return": "void", "signature": "void setBit(byte[] input, int index, boolean choice)", "full_signature": "public static void setBit(byte[] input, int index, boolean choice)", "class_method_signature": "ByteArrayHelper.setBit(byte[] input, int index, boolean choice)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(List<byte[]> vector1, List<byte[]> vector2)", "modifiers": "public static", "return": "void", "signature": "void xor(List<byte[]> vector1, List<byte[]> vector2)", "full_signature": "public static void xor(List<byte[]> vector1, List<byte[]> vector2)", "class_method_signature": "ByteArrayHelper.xor(List<byte[]> vector1, List<byte[]> vector2)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(byte[] arr1, byte[] arr2)", "modifiers": "public static", "return": "void", "signature": "void xor(byte[] arr1, byte[] arr2)", "full_signature": "public static void xor(byte[] arr1, byte[] arr2)", "class_method_signature": "ByteArrayHelper.xor(byte[] arr1, byte[] arr2)", "testcase": false, "constructor": false}, {"identifier": "shiftArray", "parameters": "(byte[] input, byte[] output, int positions)", "modifiers": "public static", "return": "void", "signature": "void shiftArray(byte[] input, byte[] output, int positions)", "full_signature": "public static void shiftArray(byte[] input, byte[] output, int positions)", "class_method_signature": "ByteArrayHelper.shiftArray(byte[] input, byte[] output, int positions)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/ByteArrayHelper.java"}, "focal_method": {"identifier": "setBit", "parameters": "(byte[] input, int index, boolean choice)", "modifiers": "public static", "return": "void", "body": "public static void setBit(byte[] input, int index, boolean choice) {\n    if (index < 0) {\n      throw new IllegalAccessError(\"Bit index must not be negative.\");\n    }\n    if (choice) {\n      // We read bits from left to right, hence the 7 - x.\n      // Put a 1 in the correct position of a\n      // zero-byte and OR it into the correct byte to ensure that the position\n      // becomes 1 no matter whether it is currently set or not.\n      input[index / 8] |= ((byte) 0x01) << (7 - (index % 8));\n    } else {\n      // Construct an all 1-byte, then construct a byte like above, where only\n      // the correct position is set to 1. We XOR these bytes to get a byte\n      // which is all 1's except in the correct position. We AND this into the\n      // correct byte to ensure that only the correct positions gets set to 0.\n      input[index / 8] &= 0xFF ^ ((byte) 0x01) << (7 - (index % 8));\n    }\n  }", "signature": "void setBit(byte[] input, int index, boolean choice)", "full_signature": "public static void setBit(byte[] input, int index, boolean choice)", "class_method_signature": "ByteArrayHelper.setBit(byte[] input, int index, boolean choice)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}