{"test_class": {"identifier": "TestThemisScanner", "superclass": "extends ClientTestBase", "interfaces": "", "fields": [], "file": "themis-client/src/test/java/org/apache/hadoop/hbase/themis/TestThemisScanner.java"}, "test_case": {"identifier": "testScanOneRow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testScanOneRow() throws Exception {\n    // null result\n    ColumnCoordinate[] columns = new ColumnCoordinate[]{COLUMN};\n    ThemisScanner scanner = prepareScanner(columns);\n    checkAndCloseScanner(scanner);\n    // only one column written\n    columns = new ColumnCoordinate[]{COLUMN};\n    prepareScanData(columns);\n    scanner = prepareScanner(columns);\n    Result result = scanner.next();\n    checkScanRow(columns, result);\n    checkAndCloseScanner(scanner);\n    // one row with multi-columns\n    columns = new ColumnCoordinate[]{COLUMN, COLUMN_WITH_ANOTHER_FAMILY, COLUMN_WITH_ANOTHER_QUALIFIER};\n    prepareScanData(columns);\n    scanner = prepareScanner(columns);\n    result = scanner.next();\n    checkScanRow(columns, result);\n    checkAndCloseScanner(scanner);\n    \n    // test scan family\n    scanner = transaction.getScanner(TABLENAME, new ThemisScan().addFamily(FAMILY));\n    result = scanner.next();\n    checkScanRow(new ColumnCoordinate[]{COLUMN, COLUMN_WITH_ANOTHER_QUALIFIER}, result);\n    checkAndCloseScanner(scanner);\n    \n    // test scan entire row\n    scanner = transaction.getScanner(TABLENAME, new ThemisScan());\n    result = scanner.next();\n    checkScanRow(columns, result);\n    checkAndCloseScanner(scanner);\n    \n    // test scan family together with column\n    scanner = transaction.getScanner(TABLENAME, new ThemisScan().addFamily(ANOTHER_FAMILY)\n        .addColumn(FAMILY, QUALIFIER));\n    result = scanner.next();\n    checkScanRow(new ColumnCoordinate[]{COLUMN_WITH_ANOTHER_FAMILY, COLUMN}, result);\n    checkAndCloseScanner(scanner);\n  }", "signature": "void testScanOneRow()", "full_signature": "@Test public void testScanOneRow()", "class_method_signature": "TestThemisScanner.testScanOneRow()", "testcase": true, "constructor": false, "invocations": ["prepareScanner", "checkAndCloseScanner", "prepareScanData", "prepareScanner", "next", "checkScanRow", "checkAndCloseScanner", "prepareScanData", "prepareScanner", "next", "checkScanRow", "checkAndCloseScanner", "getScanner", "addFamily", "next", "checkScanRow", "checkAndCloseScanner", "getScanner", "next", "checkScanRow", "checkAndCloseScanner", "getScanner", "addColumn", "addFamily", "next", "checkScanRow", "checkAndCloseScanner"]}, "focal_class": {"identifier": "ThemisScanner", "superclass": "extends AbstractClientScanner", "interfaces": "", "fields": [{"original_string": "protected final ResultScanner scanner;", "modifier": "protected final", "type": "ResultScanner", "declarator": "scanner", "var_name": "scanner"}, {"original_string": "protected final byte[] tableName;", "modifier": "protected final", "type": "byte[]", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "protected Transaction transaction;", "modifier": "protected", "type": "Transaction", "declarator": "transaction", "var_name": "transaction"}, {"original_string": "protected final Scan scan;", "modifier": "protected final", "type": "Scan", "declarator": "scan", "var_name": "scan"}], "methods": [{"identifier": "ThemisScanner", "parameters": "(final byte[] tableName, final Scan scan, final Transaction transaction)", "modifiers": "public", "return": "", "signature": " ThemisScanner(final byte[] tableName, final Scan scan, final Transaction transaction)", "full_signature": "public  ThemisScanner(final byte[] tableName, final Scan scan, final Transaction transaction)", "class_method_signature": "ThemisScanner.ThemisScanner(final byte[] tableName, final Scan scan, final Transaction transaction)", "testcase": false, "constructor": true}, {"identifier": "setStartTsToScan", "parameters": "(Scan scan, long startTs)", "modifiers": "protected static", "return": "void", "signature": "void setStartTsToScan(Scan scan, long startTs)", "full_signature": "protected static void setStartTsToScan(Scan scan, long startTs)", "class_method_signature": "ThemisScanner.setStartTsToScan(Scan scan, long startTs)", "testcase": false, "constructor": false}, {"identifier": "createGetFromScan", "parameters": "(Scan scan, byte[] rowkey)", "modifiers": "public static", "return": "Get", "signature": "Get createGetFromScan(Scan scan, byte[] rowkey)", "full_signature": "public static Get createGetFromScan(Scan scan, byte[] rowkey)", "class_method_signature": "ThemisScanner.createGetFromScan(Scan scan, byte[] rowkey)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "Result", "signature": "Result next()", "full_signature": "public Result next()", "class_method_signature": "ThemisScanner.next()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ThemisScanner.close()", "testcase": false, "constructor": false}, {"identifier": "getScan", "parameters": "()", "modifiers": "protected", "return": "Scan", "signature": "Scan getScan()", "full_signature": "protected Scan getScan()", "class_method_signature": "ThemisScanner.getScan()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(int nbRows)", "modifiers": "@Override public", "return": "Result[]", "signature": "Result[] next(int nbRows)", "full_signature": "@Override public Result[] next(int nbRows)", "class_method_signature": "ThemisScanner.next(int nbRows)", "testcase": false, "constructor": false}], "file": "themis-client/src/main/java/org/apache/hadoop/hbase/themis/ThemisScanner.java"}, "focal_method": {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "Result", "body": "public Result next() throws IOException {\n    long beginTs = System.nanoTime();\n    Result pResult = null;\n    boolean lockClean = false;\n    try {\n      pResult = this.scanner.next();\n      if (pResult == null) {\n        return null;\n      }\n\n      // if we encounter conflict locks, we need to clean lock for this row and read again\n      if (ThemisCpUtil.isLockResult(pResult)) {\n        lockClean = true;\n        Get rowGet = createGetFromScan(scan, pResult.getRow());\n        pResult = transaction.tryToCleanLockAndGetAgain(tableName, rowGet, pResult.list());\n        // empty result indicates the current row has been erased, we should get next row\n        if (pResult.isEmpty()) {\n          return next();\n        } else {\n          return pResult;\n        }\n      }\n      return pResult;\n    } finally {\n      ThemisStatistics.updateLatency(ThemisStatistics.getStatistics().nextLatency, beginTs);\n      ThemisStatistics.logSlowOperation(\"themisNext\", beginTs, \"row=\" + pResult + \", lockClean=\" + lockClean);\n    }\n  }", "signature": "Result next()", "full_signature": "public Result next()", "class_method_signature": "ThemisScanner.next()", "testcase": false, "constructor": false, "invocations": ["nanoTime", "next", "isLockResult", "createGetFromScan", "getRow", "tryToCleanLockAndGetAgain", "list", "isEmpty", "next", "updateLatency", "getStatistics", "logSlowOperation"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}