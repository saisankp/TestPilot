{"test_class": {"identifier": "ByteArrayUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HEXSTRING_ODD = \"0102030\";", "modifier": "private static final", "type": "String", "declarator": "HEXSTRING_ODD = \"0102030\"", "var_name": "HEXSTRING_ODD"}, {"original_string": "private static final String HEXSTRING_BAD = \"010203ABGH80\";", "modifier": "private static final", "type": "String", "declarator": "HEXSTRING_BAD = \"010203ABGH80\"", "var_name": "HEXSTRING_BAD"}, {"original_string": "private static final String HEXSTRING_GOOD = \"1234567890ABCDEFFEDCBA0987654321\";", "modifier": "private static final", "type": "String", "declarator": "HEXSTRING_GOOD = \"1234567890ABCDEFFEDCBA0987654321\"", "var_name": "HEXSTRING_GOOD"}, {"original_string": "private static final byte[] BYTEARRAY_GOOD =\n      new byte[] {\n        (byte) 0x12,\n        (byte) 0x34,\n        (byte) 0x56,\n        (byte) 0x78,\n        (byte) 0x90,\n        (byte) 0xAB,\n        (byte) 0xCD,\n        (byte) 0xEF,\n        (byte) 0xFE,\n        (byte) 0xDC,\n        (byte) 0xBA,\n        (byte) 0x09,\n        (byte) 0x87,\n        (byte) 0x65,\n        (byte) 0x43,\n        (byte) 0x21\n      };", "modifier": "private static final", "type": "byte[]", "declarator": "BYTEARRAY_GOOD =\n      new byte[] {\n        (byte) 0x12,\n        (byte) 0x34,\n        (byte) 0x56,\n        (byte) 0x78,\n        (byte) 0x90,\n        (byte) 0xAB,\n        (byte) 0xCD,\n        (byte) 0xEF,\n        (byte) 0xFE,\n        (byte) 0xDC,\n        (byte) 0xBA,\n        (byte) 0x09,\n        (byte) 0x87,\n        (byte) 0x65,\n        (byte) 0x43,\n        (byte) 0x21\n      }", "var_name": "BYTEARRAY_GOOD"}, {"original_string": "private static final byte[] BYTEARRAY_LEN_2 = new byte[] {(byte) 0x12, (byte) 0x34};", "modifier": "private static final", "type": "byte[]", "declarator": "BYTEARRAY_LEN_2 = new byte[] {(byte) 0x12, (byte) 0x34}", "var_name": "BYTEARRAY_LEN_2"}, {"original_string": "private static final byte[] BYTEARRAY_LEN_3 = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56};", "modifier": "private static final", "type": "byte[]", "declarator": "BYTEARRAY_LEN_3 = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56}", "var_name": "BYTEARRAY_LEN_3"}], "file": "java/component/keyple-core/src/test/java/org/eclipse/keyple/core/util/ByteArrayUtilTest.java"}, "test_case": {"identifier": "threeBytesToInt_buffer_ok_5", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void threeBytesToInt_buffer_ok_5() {\n    int value = ByteArrayUtil.threeBytesToInt(BYTEARRAY_GOOD, 13);\n    assertThat(value).isEqualTo(0x654321);\n  }", "signature": "void threeBytesToInt_buffer_ok_5()", "full_signature": "@Test public void threeBytesToInt_buffer_ok_5()", "class_method_signature": "ByteArrayUtilTest.threeBytesToInt_buffer_ok_5()", "testcase": true, "constructor": false, "invocations": ["threeBytesToInt", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ByteArrayUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[] byteToHex =\n      new String[] {\n        \"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"0A\", \"0B\", \"0C\", \"0D\", \"0E\",\n        \"0F\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"1A\", \"1B\", \"1C\", \"1D\",\n        \"1E\", \"1F\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"2A\", \"2B\", \"2C\",\n        \"2D\", \"2E\", \"2F\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"3A\", \"3B\",\n        \"3C\", \"3D\", \"3E\", \"3F\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"4A\",\n        \"4B\", \"4C\", \"4D\", \"4E\", \"4F\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\",\n        \"5A\", \"5B\", \"5C\", \"5D\", \"5E\", \"5F\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\",\n        \"69\", \"6A\", \"6B\", \"6C\", \"6D\", \"6E\", \"6F\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\",\n        \"78\", \"79\", \"7A\", \"7B\", \"7C\", \"7D\", \"7E\", \"7F\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\",\n        \"87\", \"88\", \"89\", \"8A\", \"8B\", \"8C\", \"8D\", \"8E\", \"8F\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\",\n        \"96\", \"97\", \"98\", \"99\", \"9A\", \"9B\", \"9C\", \"9D\", \"9E\", \"9F\", \"A0\", \"A1\", \"A2\", \"A3\", \"A4\",\n        \"A5\", \"A6\", \"A7\", \"A8\", \"A9\", \"AA\", \"AB\", \"AC\", \"AD\", \"AE\", \"AF\", \"B0\", \"B1\", \"B2\", \"B3\",\n        \"B4\", \"B5\", \"B6\", \"B7\", \"B8\", \"B9\", \"BA\", \"BB\", \"BC\", \"BD\", \"BE\", \"BF\", \"C0\", \"C1\", \"C2\",\n        \"C3\", \"C4\", \"C5\", \"C6\", \"C7\", \"C8\", \"C9\", \"CA\", \"CB\", \"CC\", \"CD\", \"CE\", \"CF\", \"D0\", \"D1\",\n        \"D2\", \"D3\", \"D4\", \"D5\", \"D6\", \"D7\", \"D8\", \"D9\", \"DA\", \"DB\", \"DC\", \"DD\", \"DE\", \"DF\", \"E0\",\n        \"E1\", \"E2\", \"E3\", \"E4\", \"E5\", \"E6\", \"E7\", \"E8\", \"E9\", \"EA\", \"EB\", \"EC\", \"ED\", \"EE\", \"EF\",\n        \"F0\", \"F1\", \"F2\", \"F3\", \"F4\", \"F5\", \"F6\", \"F7\", \"F8\", \"F9\", \"FA\", \"FB\", \"FC\", \"FD\", \"FE\",\n        \"FF\"\n      };", "modifier": "private static final", "type": "String[]", "declarator": "byteToHex =\n      new String[] {\n        \"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"0A\", \"0B\", \"0C\", \"0D\", \"0E\",\n        \"0F\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"1A\", \"1B\", \"1C\", \"1D\",\n        \"1E\", \"1F\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"2A\", \"2B\", \"2C\",\n        \"2D\", \"2E\", \"2F\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"3A\", \"3B\",\n        \"3C\", \"3D\", \"3E\", \"3F\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"4A\",\n        \"4B\", \"4C\", \"4D\", \"4E\", \"4F\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\",\n        \"5A\", \"5B\", \"5C\", \"5D\", \"5E\", \"5F\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\",\n        \"69\", \"6A\", \"6B\", \"6C\", \"6D\", \"6E\", \"6F\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\",\n        \"78\", \"79\", \"7A\", \"7B\", \"7C\", \"7D\", \"7E\", \"7F\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\",\n        \"87\", \"88\", \"89\", \"8A\", \"8B\", \"8C\", \"8D\", \"8E\", \"8F\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\",\n        \"96\", \"97\", \"98\", \"99\", \"9A\", \"9B\", \"9C\", \"9D\", \"9E\", \"9F\", \"A0\", \"A1\", \"A2\", \"A3\", \"A4\",\n        \"A5\", \"A6\", \"A7\", \"A8\", \"A9\", \"AA\", \"AB\", \"AC\", \"AD\", \"AE\", \"AF\", \"B0\", \"B1\", \"B2\", \"B3\",\n        \"B4\", \"B5\", \"B6\", \"B7\", \"B8\", \"B9\", \"BA\", \"BB\", \"BC\", \"BD\", \"BE\", \"BF\", \"C0\", \"C1\", \"C2\",\n        \"C3\", \"C4\", \"C5\", \"C6\", \"C7\", \"C8\", \"C9\", \"CA\", \"CB\", \"CC\", \"CD\", \"CE\", \"CF\", \"D0\", \"D1\",\n        \"D2\", \"D3\", \"D4\", \"D5\", \"D6\", \"D7\", \"D8\", \"D9\", \"DA\", \"DB\", \"DC\", \"DD\", \"DE\", \"DF\", \"E0\",\n        \"E1\", \"E2\", \"E3\", \"E4\", \"E5\", \"E6\", \"E7\", \"E8\", \"E9\", \"EA\", \"EB\", \"EC\", \"ED\", \"EE\", \"EF\",\n        \"F0\", \"F1\", \"F2\", \"F3\", \"F4\", \"F5\", \"F6\", \"F7\", \"F8\", \"F9\", \"FA\", \"FB\", \"FC\", \"FD\", \"FE\",\n        \"FF\"\n      }", "var_name": "byteToHex"}, {"original_string": "private static final Pattern HEX_IGNORED_CHARS = Pattern.compile(\" |h\");", "modifier": "private static final", "type": "Pattern", "declarator": "HEX_IGNORED_CHARS = Pattern.compile(\" |h\")", "var_name": "HEX_IGNORED_CHARS"}], "methods": [{"identifier": "ByteArrayUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ByteArrayUtil()", "full_signature": "private  ByteArrayUtil()", "class_method_signature": "ByteArrayUtil.ByteArrayUtil()", "testcase": false, "constructor": true}, {"identifier": "fromHex", "parameters": "(String hex)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] fromHex(String hex)", "full_signature": "public static byte[] fromHex(String hex)", "class_method_signature": "ByteArrayUtil.fromHex(String hex)", "testcase": false, "constructor": false}, {"identifier": "toHex", "parameters": "(byte[] byteArray)", "modifiers": "public static", "return": "String", "signature": "String toHex(byte[] byteArray)", "full_signature": "public static String toHex(byte[] byteArray)", "class_method_signature": "ByteArrayUtil.toHex(byte[] byteArray)", "testcase": false, "constructor": false}, {"identifier": "twoBytesToInt", "parameters": "(byte[] bytes, int offset)", "modifiers": "public static", "return": "int", "signature": "int twoBytesToInt(byte[] bytes, int offset)", "full_signature": "public static int twoBytesToInt(byte[] bytes, int offset)", "class_method_signature": "ByteArrayUtil.twoBytesToInt(byte[] bytes, int offset)", "testcase": false, "constructor": false}, {"identifier": "twoBytesSignedToInt", "parameters": "(byte[] bytes, int offset)", "modifiers": "public static", "return": "int", "signature": "int twoBytesSignedToInt(byte[] bytes, int offset)", "full_signature": "public static int twoBytesSignedToInt(byte[] bytes, int offset)", "class_method_signature": "ByteArrayUtil.twoBytesSignedToInt(byte[] bytes, int offset)", "testcase": false, "constructor": false}, {"identifier": "threeBytesToInt", "parameters": "(byte[] bytes, int offset)", "modifiers": "public static", "return": "int", "signature": "int threeBytesToInt(byte[] bytes, int offset)", "full_signature": "public static int threeBytesToInt(byte[] bytes, int offset)", "class_method_signature": "ByteArrayUtil.threeBytesToInt(byte[] bytes, int offset)", "testcase": false, "constructor": false}, {"identifier": "threeBytesSignedToInt", "parameters": "(byte[] bytes, int offset)", "modifiers": "public static", "return": "int", "signature": "int threeBytesSignedToInt(byte[] bytes, int offset)", "full_signature": "public static int threeBytesSignedToInt(byte[] bytes, int offset)", "class_method_signature": "ByteArrayUtil.threeBytesSignedToInt(byte[] bytes, int offset)", "testcase": false, "constructor": false}, {"identifier": "fourBytesToInt", "parameters": "(byte[] bytes, int offset)", "modifiers": "public static", "return": "int", "signature": "int fourBytesToInt(byte[] bytes, int offset)", "full_signature": "public static int fourBytesToInt(byte[] bytes, int offset)", "class_method_signature": "ByteArrayUtil.fourBytesToInt(byte[] bytes, int offset)", "testcase": false, "constructor": false}], "file": "java/component/keyple-core/src/main/java/org/eclipse/keyple/core/util/ByteArrayUtil.java"}, "focal_method": {"identifier": "threeBytesToInt", "parameters": "(byte[] bytes, int offset)", "modifiers": "public static", "return": "int", "body": "public static int threeBytesToInt(byte[] bytes, int offset) {\n    if (bytes == null || bytes.length < offset + 3 || offset < 0) {\n      throw new IllegalArgumentException(\"Bad data for converting 3-byte integers.\");\n    }\n    return (bytes[offset] & 0xFF) << 16\n        | (bytes[offset + 1] & 0xFF) << 8\n        | (bytes[offset + 2] & 0xFF);\n  }", "signature": "int threeBytesToInt(byte[] bytes, int offset)", "full_signature": "public static int threeBytesToInt(byte[] bytes, int offset)", "class_method_signature": "ByteArrayUtil.threeBytesToInt(byte[] bytes, int offset)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 156416177, "url": "https://github.com/eclipse/keyple-java", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 10325, "license": "licensed"}}