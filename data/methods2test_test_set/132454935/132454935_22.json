{"test_class": {"identifier": "AccountsManagerTest", "superclass": "extends ExpectedExceptionTest", "interfaces": "", "fields": [{"original_string": "AccountsManager accountsManager = null;", "modifier": "", "type": "AccountsManager", "declarator": "accountsManager = null", "var_name": "accountsManager"}, {"original_string": "Accounts accounts = null;", "modifier": "", "type": "Accounts", "declarator": "accounts = null", "var_name": "accounts"}, {"original_string": "ShardOperation operation = null;", "modifier": "", "type": "ShardOperation", "declarator": "operation = null", "var_name": "operation"}], "file": "elrond-core/src/test/java/network/elrond/account/AccountsManagerTest.java"}, "test_case": {"identifier": "testTransferFunds", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTransferFunds() throws IOException, ClassNotFoundException {\n        AccountAddress senderAddress = AccountAddress.fromHexString(\"Sender\");\n        AccountState senderAccountState = AppServiceProvider.getAccountStateService().getOrCreateAccountState(senderAddress, accounts);\n        AccountAddress receiverAddress = AccountAddress.fromHexString(\"Receiver\");\n        senderAccountState.setBalance(BigInteger.TEN);\n        AppServiceProvider.getAccountStateService().setAccountState(senderAddress, senderAccountState, accounts);\n        accountsManager.transferFunds(accounts, \"Sender\", \"Receiver\", BigInteger.ONE, BigInteger.ZERO, operation);\n        senderAccountState = AppServiceProvider.getAccountStateService().getOrCreateAccountState(senderAddress, accounts);\n        Assert.assertTrue(senderAccountState.getBalance().longValue() == 9);\n        AccountState receiverAccountState = AppServiceProvider.getAccountStateService().getOrCreateAccountState(receiverAddress, accounts);\n        Assert.assertTrue(receiverAccountState.getBalance().longValue() == 1);\n        Assert.assertTrue(senderAccountState.getNonce().longValue() == 1);\n    }", "signature": "void testTransferFunds()", "full_signature": "@Test public void testTransferFunds()", "class_method_signature": "AccountsManagerTest.testTransferFunds()", "testcase": true, "constructor": false, "invocations": ["fromHexString", "getOrCreateAccountState", "getAccountStateService", "fromHexString", "setBalance", "setAccountState", "getAccountStateService", "transferFunds", "getOrCreateAccountState", "getAccountStateService", "assertTrue", "longValue", "getBalance", "getOrCreateAccountState", "getAccountStateService", "assertTrue", "longValue", "getBalance", "assertTrue", "longValue", "getNonce"]}, "focal_class": {"identifier": "AccountsManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LogManager.getLogger(AccountsManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LogManager.getLogger(AccountsManager.class)", "var_name": "logger"}, {"original_string": "private static AccountsManager instance = new AccountsManager();", "modifier": "private static", "type": "AccountsManager", "declarator": "instance = new AccountsManager()", "var_name": "instance"}], "methods": [{"identifier": "instance", "parameters": "()", "modifiers": "public static", "return": "AccountsManager", "signature": "AccountsManager instance()", "full_signature": "public static AccountsManager instance()", "class_method_signature": "AccountsManager.instance()", "testcase": false, "constructor": false}, {"identifier": "hasFunds", "parameters": "(Accounts accounts, String addressString, BigInteger value)", "modifiers": "public", "return": "Boolean", "signature": "Boolean hasFunds(Accounts accounts, String addressString, BigInteger value)", "full_signature": "public Boolean hasFunds(Accounts accounts, String addressString, BigInteger value)", "class_method_signature": "AccountsManager.hasFunds(Accounts accounts, String addressString, BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "hasCorrectNonce", "parameters": "(Accounts accounts, String addressString, BigInteger nonce)", "modifiers": "public", "return": "Boolean", "signature": "Boolean hasCorrectNonce(Accounts accounts, String addressString, BigInteger nonce)", "full_signature": "public Boolean hasCorrectNonce(Accounts accounts, String addressString, BigInteger nonce)", "class_method_signature": "AccountsManager.hasCorrectNonce(Accounts accounts, String addressString, BigInteger nonce)", "testcase": false, "constructor": false}, {"identifier": "transferFunds", "parameters": "(Accounts accounts, String senderAddress, String receiverAddress, BigInteger value, BigInteger nonce, ShardOperation operation)", "modifiers": "public", "return": "void", "signature": "void transferFunds(Accounts accounts, String senderAddress, String receiverAddress, BigInteger value, BigInteger nonce, ShardOperation operation)", "full_signature": "public void transferFunds(Accounts accounts, String senderAddress, String receiverAddress, BigInteger value, BigInteger nonce, ShardOperation operation)", "class_method_signature": "AccountsManager.transferFunds(Accounts accounts, String senderAddress, String receiverAddress, BigInteger value, BigInteger nonce, ShardOperation operation)", "testcase": false, "constructor": false}], "file": "elrond-core/src/main/java/network/elrond/account/AccountsManager.java"}, "focal_method": {"identifier": "transferFunds", "parameters": "(Accounts accounts, String senderAddress, String receiverAddress, BigInteger value, BigInteger nonce, ShardOperation operation)", "modifiers": "public", "return": "void", "body": "public void transferFunds(Accounts accounts, String senderAddress, String receiverAddress, BigInteger value, BigInteger nonce, ShardOperation operation) throws IOException, ClassNotFoundException {\n\n        logger.traceEntry(\"params: {} {} {} {} {}\", accounts, senderAddress, receiverAddress, value, nonce);\n        Util.check(accounts != null, \"accounts!=null\");\n        Util.check(!(senderAddress == null || senderAddress.isEmpty()), \"senderAddress!=null\");\n        Util.check(!(receiverAddress == null || receiverAddress.isEmpty()), \"receiverAddress!=null\");\n        Util.check(value.compareTo(BigInteger.ZERO) >= 0, \"value>=0\");\n        Util.check(nonce.compareTo(BigInteger.ZERO) >= 0, \"nonce>=0\");\n\n        if (operation.isCheckSource()) {\n            if (!(hasFunds(accounts, senderAddress, value) && hasCorrectNonce(accounts, senderAddress, nonce))) {\n                IllegalArgumentException ex = new IllegalArgumentException(\"Validation of Sender Account failed!\");\n                logger.throwing(ex);\n                throw ex;\n            }\n        }\n\n\n        if (operation.isCheckTarget()) {\n\n            AccountAddress receiver = AccountAddress.fromHexString(receiverAddress);\n            AccountState receiverAccountState = AppServiceProvider.getAccountStateService().getOrCreateAccountState(receiver, accounts);\n\n\n            logger.trace(\"Transfer asset > adding\");\n            receiverAccountState.setBalance(receiverAccountState.getBalance().add(value));\n            AppServiceProvider.getAccountStateService().setAccountState(receiver, receiverAccountState, accounts); // PMS\n\n        }\n\n        if (operation.isCheckSource()) {\n\n            AccountAddress sender = AccountAddress.fromHexString(senderAddress);\n            AccountState senderAccountState = AppServiceProvider.getAccountStateService().getOrCreateAccountState(sender, accounts);\n\n            logger.trace(\"Transfer asset > substracting\");\n            senderAccountState.setBalance(senderAccountState.getBalance().subtract(value));\n\n\n            //increase sender nonce\n            logger.trace(\"Transfer asset > increasing sender nonce\");\n            senderAccountState.setNonce(senderAccountState.getNonce().add(BigInteger.ONE));\n\n\n            logger.trace(\"Transfer asset > saving\");\n            AppServiceProvider.getAccountStateService().setAccountState(sender, senderAccountState, accounts); // PMS\n        }\n\n\n        logger.traceExit();\n    }", "signature": "void transferFunds(Accounts accounts, String senderAddress, String receiverAddress, BigInteger value, BigInteger nonce, ShardOperation operation)", "full_signature": "public void transferFunds(Accounts accounts, String senderAddress, String receiverAddress, BigInteger value, BigInteger nonce, ShardOperation operation)", "class_method_signature": "AccountsManager.transferFunds(Accounts accounts, String senderAddress, String receiverAddress, BigInteger value, BigInteger nonce, ShardOperation operation)", "testcase": false, "constructor": false, "invocations": ["traceEntry", "check", "check", "isEmpty", "check", "isEmpty", "check", "compareTo", "check", "compareTo", "isCheckSource", "hasFunds", "hasCorrectNonce", "throwing", "isCheckTarget", "fromHexString", "getOrCreateAccountState", "getAccountStateService", "trace", "setBalance", "add", "getBalance", "setAccountState", "getAccountStateService", "isCheckSource", "fromHexString", "getOrCreateAccountState", "getAccountStateService", "trace", "setBalance", "subtract", "getBalance", "trace", "setNonce", "add", "getNonce", "trace", "setAccountState", "getAccountStateService", "traceExit"]}, "repository": {"repo_id": 132454935, "url": "https://github.com/ElrondNetwork/elrond-node-prototype", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 16635, "license": "licensed"}}