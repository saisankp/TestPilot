{"test_class": {"identifier": "GitHubTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String repoName = \"some-repo-name\";", "modifier": "", "type": "String", "declarator": "repoName = \"some-repo-name\"", "var_name": "repoName"}, {"original_string": "@Mock\n    GHRepository gitHubRepository;", "modifier": "@Mock", "type": "GHRepository", "declarator": "gitHubRepository", "var_name": "gitHubRepository"}], "file": "dockerfile-image-update/src/test/java/com/salesforce/dockerfileimageupdate/repository/GitHubTest.java"}, "test_case": {"identifier": "testShouldNotProcessBecauseDidNotFindDockerfiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShouldNotProcessBecauseDidNotFindDockerfiles() {\n        gitHubRepository = mock(GHRepository.class);\n        when(gitHubRepository.getFullName()).thenReturn(repoName);\n        Multimap<String, String> multimap = HashMultimap.create();\n        assertTrue(GitHub.shouldNotProcessDockerfilesInRepo(multimap, gitHubRepository));\n    }", "signature": "void testShouldNotProcessBecauseDidNotFindDockerfiles()", "full_signature": "@Test public void testShouldNotProcessBecauseDidNotFindDockerfiles()", "class_method_signature": "GitHubTest.testShouldNotProcessBecauseDidNotFindDockerfiles()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getFullName", "create", "assertTrue", "shouldNotProcessDockerfilesInRepo"]}, "focal_class": {"identifier": "GitHub", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(GitHub.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(GitHub.class)", "var_name": "log"}], "methods": [{"identifier": "shouldNotProcessDockerfilesInRepo", "parameters": "(Multimap<String, String> pathToDockerfilesInParentRepo, GHRepository parent)", "modifiers": "public static", "return": "boolean", "signature": "boolean shouldNotProcessDockerfilesInRepo(Multimap<String, String> pathToDockerfilesInParentRepo, GHRepository parent)", "full_signature": "public static boolean shouldNotProcessDockerfilesInRepo(Multimap<String, String> pathToDockerfilesInParentRepo, GHRepository parent)", "class_method_signature": "GitHub.shouldNotProcessDockerfilesInRepo(Multimap<String, String> pathToDockerfilesInParentRepo, GHRepository parent)", "testcase": false, "constructor": false}], "file": "dockerfile-image-update/src/main/java/com/salesforce/dockerfileimageupdate/repository/GitHub.java"}, "focal_method": {"identifier": "shouldNotProcessDockerfilesInRepo", "parameters": "(Multimap<String, String> pathToDockerfilesInParentRepo, GHRepository parent)", "modifiers": "public static", "return": "boolean", "body": "public static boolean shouldNotProcessDockerfilesInRepo(Multimap<String, String> pathToDockerfilesInParentRepo, GHRepository parent) {\n        if (parent == null || !pathToDockerfilesInParentRepo.containsKey(parent.getFullName()) || parent.isArchived()) {\n            if (parent != null && parent.isArchived()) {\n                log.info(\"Skipping archived repo: {}\", parent.getFullName());\n            }\n            return true;\n        }\n        return false;\n    }", "signature": "boolean shouldNotProcessDockerfilesInRepo(Multimap<String, String> pathToDockerfilesInParentRepo, GHRepository parent)", "full_signature": "public static boolean shouldNotProcessDockerfilesInRepo(Multimap<String, String> pathToDockerfilesInParentRepo, GHRepository parent)", "class_method_signature": "GitHub.shouldNotProcessDockerfilesInRepo(Multimap<String, String> pathToDockerfilesInParentRepo, GHRepository parent)", "testcase": false, "constructor": false, "invocations": ["containsKey", "getFullName", "isArchived", "isArchived", "info", "getFullName"]}, "repository": {"repo_id": 104787715, "url": "https://github.com/salesforce/dockerfile-image-update", "stars": 62, "created": "9/25/2017 6:38:13 PM +00:00", "updates": "2020-01-23T07:15:59+00:00", "fork": "False", "license": "licensed"}}