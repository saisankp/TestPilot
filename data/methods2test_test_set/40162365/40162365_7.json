{"test_class": {"identifier": "PcmWavConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PcmWavConverter.WaveHeader waveHeader;", "modifier": "private", "type": "PcmWavConverter.WaveHeader", "declarator": "waveHeader", "var_name": "waveHeader"}, {"original_string": "private short[] pcmDataSample=new short[]{8,7,1,2,5,6};", "modifier": "private", "type": "short[]", "declarator": "pcmDataSample=new short[]{8,7,1,2,5,6}", "var_name": "pcmDataSample"}, {"original_string": "private static final String TEST_DIRECTORY_PATH=Environment.getExternalStorageDirectory().getAbsolutePath()+File.separator+\"Test\";", "modifier": "private static final", "type": "String", "declarator": "TEST_DIRECTORY_PATH=Environment.getExternalStorageDirectory().getAbsolutePath()+File.separator+\"Test\"", "var_name": "TEST_DIRECTORY_PATH"}], "file": "library/src/test/java/com/github/republicofgavin/pauseresumeaudiorecorder/conversion/PcmWavConverterTest.java"}, "test_case": {"identifier": "testPcmWavConversion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPcmWavConversion()throws IOException{\n        final String pcmFilePath=Environment.getExternalStorageDirectory().getAbsolutePath()+File.separator+\"Test\"+ File.separator+\"Test.pcm\";\n        createPCMFile(pcmFilePath);\n        final String wavFilePath=pcmFilePath.replace(\".pcm\", \".wav\");\n\n        PcmWavConverter.convertPCMToWav(waveHeader, pcmFilePath, wavFilePath);\n\n        final DataInputStream dataInputStream=new DataInputStream(new BufferedInputStream(new FileInputStream(wavFilePath)));\n\n        //header\n        byte[] expectedByteArray=new byte[\"RIFF\".getBytes().length];\n        dataInputStream.read(expectedByteArray);\n        assertArrayEquals(\"RIFF is not there or in correct position.\", \"RIFF\".getBytes(), expectedByteArray);\n\n        Assert.assertEquals(\"File length is not there or in correct position\", Integer.reverseBytes(36 + (int) new File(pcmFilePath).length()), dataInputStream.readInt());\n\n        expectedByteArray=new byte[\"WAVE\".getBytes().length];\n        dataInputStream.read(expectedByteArray);\n        assertArrayEquals(\"WAVE is not there or in correct position.\", \"WAVE\".getBytes(), expectedByteArray);\n\n        expectedByteArray=new byte[\"fmt \".getBytes().length];\n        dataInputStream.read(expectedByteArray);\n        assertArrayEquals(\"fmt  is not there or in correct position.\", \"fmt \".getBytes(), expectedByteArray);\n\n        Assert.assertEquals(\"16 is not there or in correct position.\", Integer.reverseBytes(16), dataInputStream.readInt());\n        Assert.assertEquals(\"PCM format is not there or in correct position.\", Short.reverseBytes((short) 1), dataInputStream.readShort());\n        Assert.assertEquals(\"Channel num is not there or in correct position.\", Short.reverseBytes(waveHeader.getChannelNum()), dataInputStream.readShort());\n        Assert.assertEquals(\"Sample rate is not there or in correct position.\",Integer.reverseBytes(waveHeader.getSampleRateInHertz()),dataInputStream.readInt());\n        Assert.assertEquals(\"Data calculation is not there or in correct position.\",Integer.reverseBytes(waveHeader.getChannelNum() * waveHeader.getSampleRateInHertz() * waveHeader.getBitRate() / 8),dataInputStream.readInt());\n        Assert.assertEquals(\"Channel num and bit rate calculation is not there or in correct position.\", Short.reverseBytes((short) (waveHeader.getChannelNum() * waveHeader.getBitRate() / 8)),dataInputStream.readShort());\n        Assert.assertEquals(\"Bit rate is not there or in correct position\",Short.reverseBytes(waveHeader.getBitRate()),dataInputStream.readShort());\n\n        expectedByteArray=new byte[\"data\".getBytes().length];\n        dataInputStream.read(expectedByteArray);\n        assertArrayEquals(\"data is not there or in correct position.\", \"data\".getBytes(), expectedByteArray);\n\n        Assert.assertEquals(\"File size is not there or in correct position.\",Integer.reverseBytes((int) new File(pcmFilePath).length()),dataInputStream.readInt());\n        //PCM data\n        int i=0;\n        while (dataInputStream.available()>0) {\n            ByteBuffer bb = ByteBuffer.allocate(2);\n            bb.order(ByteOrder.LITTLE_ENDIAN);\n            bb.put(dataInputStream.readByte());\n            bb.put(dataInputStream.readByte());\n            Assert.assertEquals(pcmDataSample[i++],bb.getShort(0));\n        }\n    }", "signature": "void testPcmWavConversion()", "full_signature": "@Test public void testPcmWavConversion()", "class_method_signature": "PcmWavConverterTest.testPcmWavConversion()", "testcase": true, "constructor": false, "invocations": ["getAbsolutePath", "getExternalStorageDirectory", "createPCMFile", "replace", "convertPCMToWav", "getBytes", "read", "assertArrayEquals", "getBytes", "assertEquals", "reverseBytes", "length", "readInt", "getBytes", "read", "assertArrayEquals", "getBytes", "getBytes", "read", "assertArrayEquals", "getBytes", "assertEquals", "reverseBytes", "readInt", "assertEquals", "reverseBytes", "readShort", "assertEquals", "reverseBytes", "getChannelNum", "readShort", "assertEquals", "reverseBytes", "getSampleRateInHertz", "readInt", "assertEquals", "reverseBytes", "getChannelNum", "getSampleRateInHertz", "getBitRate", "readInt", "assertEquals", "reverseBytes", "getChannelNum", "getBitRate", "readShort", "assertEquals", "reverseBytes", "getBitRate", "readShort", "getBytes", "read", "assertArrayEquals", "getBytes", "assertEquals", "reverseBytes", "length", "readInt", "available", "allocate", "order", "put", "readByte", "put", "readByte", "assertEquals", "getShort"]}, "focal_class": {"identifier": "PcmWavConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final short PCM_FORMAT=1;", "modifier": "private static final", "type": "short", "declarator": "PCM_FORMAT=1", "var_name": "PCM_FORMAT"}, {"original_string": "public static final long MAX_TIME_WAV_FILE_MILLIS=1000*24479;", "modifier": "public static final", "type": "long", "declarator": "MAX_TIME_WAV_FILE_MILLIS=1000*24479", "var_name": "MAX_TIME_WAV_FILE_MILLIS"}, {"original_string": "public static final long MAX_SIZE_WAV_FILE_BYTES=2L*1073741824L;", "modifier": "public static final", "type": "long", "declarator": "MAX_SIZE_WAV_FILE_BYTES=2L*1073741824L", "var_name": "MAX_SIZE_WAV_FILE_BYTES"}], "methods": [{"identifier": "addWavHeader", "parameters": "(WaveHeader waveHeader,final String wavFilePath)", "modifiers": "public static", "return": "void", "signature": "void addWavHeader(WaveHeader waveHeader,final String wavFilePath)", "full_signature": "public static void addWavHeader(WaveHeader waveHeader,final String wavFilePath)", "class_method_signature": "PcmWavConverter.addWavHeader(WaveHeader waveHeader,final String wavFilePath)", "testcase": false, "constructor": false}, {"identifier": "convertPCMToWav", "parameters": "(WaveHeader waveHeader,final String pcmFilePath, final String wavFilePath)", "modifiers": "public static", "return": "void", "signature": "void convertPCMToWav(WaveHeader waveHeader,final String pcmFilePath, final String wavFilePath)", "full_signature": "public static void convertPCMToWav(WaveHeader waveHeader,final String pcmFilePath, final String wavFilePath)", "class_method_signature": "PcmWavConverter.convertPCMToWav(WaveHeader waveHeader,final String pcmFilePath, final String wavFilePath)", "testcase": false, "constructor": false}, {"identifier": "writeWavHeader", "parameters": "(final WaveHeader waveHeader,final DataOutput dataOutputStream,final File pcmFile)", "modifiers": "private static", "return": "void", "signature": "void writeWavHeader(final WaveHeader waveHeader,final DataOutput dataOutputStream,final File pcmFile)", "full_signature": "private static void writeWavHeader(final WaveHeader waveHeader,final DataOutput dataOutputStream,final File pcmFile)", "class_method_signature": "PcmWavConverter.writeWavHeader(final WaveHeader waveHeader,final DataOutput dataOutputStream,final File pcmFile)", "testcase": false, "constructor": false}, {"identifier": "writePCMData", "parameters": "(final DataOutputStream out, final DataInputStream in)", "modifiers": "private static", "return": "void", "signature": "void writePCMData(final DataOutputStream out, final DataInputStream in)", "full_signature": "private static void writePCMData(final DataOutputStream out, final DataInputStream in)", "class_method_signature": "PcmWavConverter.writePCMData(final DataOutputStream out, final DataInputStream in)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/github/republicofgavin/pauseresumeaudiorecorder/conversion/PcmWavConverter.java"}, "focal_method": {"identifier": "convertPCMToWav", "parameters": "(WaveHeader waveHeader,final String pcmFilePath, final String wavFilePath)", "modifiers": "public static", "return": "void", "body": "public static void convertPCMToWav(WaveHeader waveHeader,final String pcmFilePath, final String wavFilePath)throws IOException{\n        if (waveHeader ==null){\n            throw new IllegalArgumentException(\"waveHeader cannot be null\");\n        }\n\n        if (pcmFilePath==null || pcmFilePath.trim().isEmpty()){\n            throw new IllegalArgumentException(\"pcmFilePath cannot be null, empty, blank\");\n        }\n        final File pcmFile=new File(pcmFilePath);\n\n        if (wavFilePath==null || wavFilePath.trim().isEmpty()){\n            throw new IllegalArgumentException(\"wavFilePath cannot be null, empty, blank\");\n        }\n        final DataOutputStream dataOutputStream = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(wavFilePath)));\n        final DataInputStream dataInputStream=new DataInputStream(new BufferedInputStream(new FileInputStream(pcmFile)));\n        try {\n            writeWavHeader(waveHeader,dataOutputStream,new File(pcmFilePath));\n            writePCMData(dataOutputStream, dataInputStream);\n        }\n        finally {\n            dataOutputStream.flush();\n            dataOutputStream.close();\n            dataInputStream.close();\n        }\n        final File partWavFile=new File(wavFilePath);\n        if (!partWavFile.renameTo(new File(wavFilePath))){\n            throw new IOException(\"Unable to rename file to:\"+wavFilePath);\n        }\n    }", "signature": "void convertPCMToWav(WaveHeader waveHeader,final String pcmFilePath, final String wavFilePath)", "full_signature": "public static void convertPCMToWav(WaveHeader waveHeader,final String pcmFilePath, final String wavFilePath)", "class_method_signature": "PcmWavConverter.convertPCMToWav(WaveHeader waveHeader,final String pcmFilePath, final String wavFilePath)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "trim", "isEmpty", "trim", "writeWavHeader", "writePCMData", "flush", "close", "close", "renameTo"]}, "repository": {"repo_id": 40162365, "url": "https://github.com/republicofgavin/PauseResumeAudioRecorder", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 16, "size": 105, "license": "Apache License 2.0"}}