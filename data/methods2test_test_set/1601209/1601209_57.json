{"test_class": {"identifier": "UtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "unirest/src/test/java/kong/unirest/apache/UtilTest.java"}, "test_case": {"identifier": "canCastAAsyncClient", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void canCastAAsyncClient() {\n        HttpAsyncClient build = HttpAsyncClientBuilder.create().build();\n\n        assertEquals(true, Util.tryCast(build, CloseableHttpAsyncClient.class).isPresent());\n    }", "signature": "void canCastAAsyncClient()", "full_signature": "@Test public void canCastAAsyncClient()", "class_method_signature": "UtilTest.canCastAAsyncClient()", "testcase": true, "constructor": false, "invocations": ["build", "create", "assertEquals", "isPresent", "tryCast"]}, "focal_class": {"identifier": "Util", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "tryCast", "parameters": "(T original, Class<M> too)", "modifiers": "static", "return": "Optional<M>", "signature": "Optional<M> tryCast(T original, Class<M> too)", "full_signature": "static Optional<M> tryCast(T original, Class<M> too)", "class_method_signature": "Util.tryCast(T original, Class<M> too)", "testcase": false, "constructor": false}, {"identifier": "collectExceptions", "parameters": "(Optional<Exception>... ex)", "modifiers": "static", "return": "Stream<Exception>", "signature": "Stream<Exception> collectExceptions(Optional<Exception>... ex)", "full_signature": "static Stream<Exception> collectExceptions(Optional<Exception>... ex)", "class_method_signature": "Util.collectExceptions(Optional<Exception>... ex)", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "(Optional<T> opt)", "modifiers": "static", "return": "Stream<T>", "signature": "Stream<T> stream(Optional<T> opt)", "full_signature": "static Stream<T> stream(Optional<T> opt)", "class_method_signature": "Util.stream(Optional<T> opt)", "testcase": false, "constructor": false}, {"identifier": "tryDo", "parameters": "(T c, ExConsumer<T> consumer)", "modifiers": "static", "return": "Optional<Exception>", "signature": "Optional<Exception> tryDo(T c, ExConsumer<T> consumer)", "full_signature": "static Optional<Exception> tryDo(T c, ExConsumer<T> consumer)", "class_method_signature": "Util.tryDo(T c, ExConsumer<T> consumer)", "testcase": false, "constructor": false}, {"identifier": "isNullOrEmpty", "parameters": "(String s)", "modifiers": "static", "return": "boolean", "signature": "boolean isNullOrEmpty(String s)", "full_signature": "static boolean isNullOrEmpty(String s)", "class_method_signature": "Util.isNullOrEmpty(String s)", "testcase": false, "constructor": false}], "file": "unirest/src/main/java/kong/unirest/apache/Util.java"}, "focal_method": {"identifier": "tryCast", "parameters": "(T original, Class<M> too)", "modifiers": "static", "return": "Optional<M>", "body": "static <T, M extends T> Optional<M> tryCast(T original, Class<M> too) {\n        if (original != null && too.isAssignableFrom(original.getClass())) {\n            return Optional.of((M) original);\n        }\n        return Optional.empty();\n    }", "signature": "Optional<M> tryCast(T original, Class<M> too)", "full_signature": "static Optional<M> tryCast(T original, Class<M> too)", "class_method_signature": "Util.tryCast(T original, Class<M> too)", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom", "getClass", "of", "empty"]}, "repository": {"repo_id": 1601209, "url": "https://github.com/Kong/unirest-java", "stars": 1855, "created": "4/11/2011 9:19:53 PM +00:00", "updates": "2020-01-25T12:07:58+00:00", "fork": "False", "license": "licensed"}}