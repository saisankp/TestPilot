{"test_class": {"identifier": "UpdaterTreeNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private SdkUpdaterConfigurable myConfigurable;", "modifier": "@Mock private", "type": "SdkUpdaterConfigurable", "declarator": "myConfigurable", "var_name": "myConfigurable"}], "file": "sdk-updates/testSrc/com/android/tools/idea/updater/configure/UpdaterTreeNodeTest.java"}, "test_case": {"identifier": "testMultiVersionTreeNodeState", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMultiVersionTreeNodeState() throws Exception {\n    // Some children are installed and some not. The latest version has an update available.\n    // Cycling causes the latest to be installed, everything to be uninstalled, and back.\n    List<DetailsTreeNode> children = getMultiVersionChildren();\n    MultiVersionTreeNode node = new MultiVersionTreeNode(children);\n    children.forEach(node::add);\n    validateState(node, MIXED, MIXED, ImmutableList.of(NOT_INSTALLED, INSTALLED, INSTALLED, MIXED));\n    node.cycleState();\n    validateState(node, INSTALLED, MIXED, ImmutableList.of(NOT_INSTALLED, INSTALLED, INSTALLED, INSTALLED));\n    node.cycleState();\n    validateState(node, NOT_INSTALLED, MIXED, ImmutableList.of(NOT_INSTALLED, NOT_INSTALLED, NOT_INSTALLED, NOT_INSTALLED));\n    node.cycleState();\n    validateState(node, MIXED, MIXED, ImmutableList.of(NOT_INSTALLED, INSTALLED, INSTALLED, MIXED));\n\n    // Some children are installed and some not. The latest version is not installed.\n    // Cycling causes the latest to be installed, everything to be uninstalled, and back.\n    children = getMultiVersionChildren();\n    children.add(createMultiVersionChild(false, true, \"3.0\"));\n    node = new MultiVersionTreeNode(children);\n    children.forEach(node::add);\n    validateState(node, MIXED, MIXED, ImmutableList.of(NOT_INSTALLED, INSTALLED, INSTALLED, MIXED, NOT_INSTALLED));\n    node.cycleState();\n    validateState(node, INSTALLED, MIXED, ImmutableList.of(NOT_INSTALLED, INSTALLED, INSTALLED, MIXED, INSTALLED));\n    node.cycleState();\n    validateState(node, NOT_INSTALLED, MIXED, ImmutableList.of(NOT_INSTALLED, NOT_INSTALLED, NOT_INSTALLED, NOT_INSTALLED, NOT_INSTALLED));\n    node.cycleState();\n    validateState(node, MIXED, MIXED, ImmutableList.of(NOT_INSTALLED, INSTALLED, INSTALLED, MIXED, NOT_INSTALLED));\n\n    // Some children are installed and some not. The latest version is installed.\n    // Cycling causes everything to be uninstalled and back.\n    children = getMultiVersionChildren();\n    children.add(createMultiVersionChild(true, false,\"3.0\"));\n    node = new MultiVersionTreeNode(children);\n    children.forEach(node::add);\n    validateState(node, INSTALLED, INSTALLED, ImmutableList.of(NOT_INSTALLED, INSTALLED, INSTALLED, MIXED, INSTALLED));\n    node.cycleState();\n    validateState(node, NOT_INSTALLED, INSTALLED,\n                  ImmutableList.of(NOT_INSTALLED, NOT_INSTALLED, NOT_INSTALLED, NOT_INSTALLED, NOT_INSTALLED));\n    node.cycleState();\n    validateState(node, INSTALLED, INSTALLED, ImmutableList.of(NOT_INSTALLED, INSTALLED, INSTALLED, MIXED, INSTALLED));\n\n    // All children are uninstalled. Cycling causes the latest to be installed and back.\n    children = Lists.newArrayList(createMultiVersionChild(false, true, \"1.0\"),\n                                  createMultiVersionChild(false, true, \"2.0\"));\n    node = new MultiVersionTreeNode(children);\n    children.forEach(node::add);\n    validateState(node, NOT_INSTALLED, NOT_INSTALLED, ImmutableList.of(NOT_INSTALLED, NOT_INSTALLED));\n    node.cycleState();\n    validateState(node, INSTALLED, NOT_INSTALLED, ImmutableList.of(NOT_INSTALLED, INSTALLED));\n    node.cycleState();\n    validateState(node, NOT_INSTALLED, NOT_INSTALLED, ImmutableList.of(NOT_INSTALLED, NOT_INSTALLED));\n  }", "signature": "void testMultiVersionTreeNodeState()", "full_signature": "@Test public void testMultiVersionTreeNodeState()", "class_method_signature": "UpdaterTreeNodeTest.testMultiVersionTreeNodeState()", "testcase": true, "constructor": false, "invocations": ["getMultiVersionChildren", "forEach", "validateState", "of", "cycleState", "validateState", "of", "cycleState", "validateState", "of", "cycleState", "validateState", "of", "getMultiVersionChildren", "add", "createMultiVersionChild", "forEach", "validateState", "of", "cycleState", "validateState", "of", "cycleState", "validateState", "of", "cycleState", "validateState", "of", "getMultiVersionChildren", "add", "createMultiVersionChild", "forEach", "validateState", "of", "cycleState", "validateState", "of", "cycleState", "validateState", "of", "newArrayList", "createMultiVersionChild", "createMultiVersionChild", "forEach", "validateState", "of", "cycleState", "validateState", "of", "cycleState", "validateState", "of"]}, "focal_class": {"identifier": "UpdaterTreeNode", "superclass": "extends DefaultMutableTreeNode", "interfaces": "implements Comparable<UpdaterTreeNode>, SdkUpdaterConfigPanel.MultiStateRow", "fields": [], "methods": [{"identifier": "getInitialState", "parameters": "()", "modifiers": "abstract public", "return": "PackageNodeModel.SelectedState", "signature": "PackageNodeModel.SelectedState getInitialState()", "full_signature": "abstract public PackageNodeModel.SelectedState getInitialState()", "class_method_signature": "UpdaterTreeNode.getInitialState()", "testcase": false, "constructor": false}, {"identifier": "getCurrentState", "parameters": "()", "modifiers": "abstract public", "return": "PackageNodeModel.SelectedState", "signature": "PackageNodeModel.SelectedState getCurrentState()", "full_signature": "abstract public PackageNodeModel.SelectedState getCurrentState()", "class_method_signature": "UpdaterTreeNode.getCurrentState()", "testcase": false, "constructor": false}, {"identifier": "setState", "parameters": "(PackageNodeModel.SelectedState state)", "modifiers": "abstract protected", "return": "void", "signature": "void setState(PackageNodeModel.SelectedState state)", "full_signature": "abstract protected void setState(PackageNodeModel.SelectedState state)", "class_method_signature": "UpdaterTreeNode.setState(PackageNodeModel.SelectedState state)", "testcase": false, "constructor": false}, {"identifier": "resetState", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void resetState()", "full_signature": "public final void resetState()", "class_method_signature": "UpdaterTreeNode.resetState()", "testcase": false, "constructor": false}, {"identifier": "includeInSummary", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean includeInSummary()", "full_signature": "public boolean includeInSummary()", "class_method_signature": "UpdaterTreeNode.includeInSummary()", "testcase": false, "constructor": false}, {"identifier": "isPrimary", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPrimary()", "full_signature": "public boolean isPrimary()", "class_method_signature": "UpdaterTreeNode.isPrimary()", "testcase": false, "constructor": false}, {"identifier": "cycleState", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void cycleState()", "full_signature": "@Override public final void cycleState()", "class_method_signature": "UpdaterTreeNode.cycleState()", "testcase": false, "constructor": false}, {"identifier": "canHaveMixedState", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean canHaveMixedState()", "full_signature": "protected boolean canHaveMixedState()", "class_method_signature": "UpdaterTreeNode.canHaveMixedState()", "testcase": false, "constructor": false}, {"identifier": "getStatusString", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getStatusString()", "full_signature": "@NotNull public String getStatusString()", "class_method_signature": "UpdaterTreeNode.getStatusString()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(@NotNull UpdaterTreeNode o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(@NotNull UpdaterTreeNode o)", "full_signature": "@Override public int compareTo(@NotNull UpdaterTreeNode o)", "class_method_signature": "UpdaterTreeNode.compareTo(@NotNull UpdaterTreeNode o)", "testcase": false, "constructor": false}, {"identifier": "customizeRenderer", "parameters": "(Renderer renderer,\n                                JTree tree,\n                                boolean selected,\n                                boolean expanded,\n                                boolean leaf,\n                                int row,\n                                boolean hasFocus)", "modifiers": "public", "return": "void", "signature": "void customizeRenderer(Renderer renderer,\n                                JTree tree,\n                                boolean selected,\n                                boolean expanded,\n                                boolean leaf,\n                                int row,\n                                boolean hasFocus)", "full_signature": "public void customizeRenderer(Renderer renderer,\n                                JTree tree,\n                                boolean selected,\n                                boolean expanded,\n                                boolean leaf,\n                                int row,\n                                boolean hasFocus)", "class_method_signature": "UpdaterTreeNode.customizeRenderer(Renderer renderer,\n                                JTree tree,\n                                boolean selected,\n                                boolean expanded,\n                                boolean leaf,\n                                int row,\n                                boolean hasFocus)", "testcase": false, "constructor": false}], "file": "sdk-updates/src/com/android/tools/idea/updater/configure/UpdaterTreeNode.java"}, "focal_method": {"identifier": "cycleState", "parameters": "()", "modifiers": "@Override public final", "return": "void", "body": "@Override\n  public final void cycleState() {\n    if (getCurrentState() == null) {\n      return;\n    }\n    if (getCurrentState() == PackageNodeModel.SelectedState.NOT_INSTALLED) {\n      if (canHaveMixedState()) {\n        setState(PackageNodeModel.SelectedState.MIXED);\n      }\n      else {\n        setState(PackageNodeModel.SelectedState.INSTALLED);\n      }\n    }\n    else if (getCurrentState() == PackageNodeModel.SelectedState.INSTALLED) {\n      setState(PackageNodeModel.SelectedState.NOT_INSTALLED);\n    }\n    else {\n      setState(PackageNodeModel.SelectedState.INSTALLED);\n    }\n  }", "signature": "void cycleState()", "full_signature": "@Override public final void cycleState()", "class_method_signature": "UpdaterTreeNode.cycleState()", "testcase": false, "constructor": false, "invocations": ["getCurrentState", "getCurrentState", "canHaveMixedState", "setState", "setState", "getCurrentState", "setState", "setState"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}