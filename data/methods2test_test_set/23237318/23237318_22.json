{"test_class": {"identifier": "TopNWindowedMapGaugeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Clock clock = mock(Clock.class);", "modifier": "private final", "type": "Clock", "declarator": "clock = mock(Clock.class)", "var_name": "clock"}], "file": "core/src/test/java/com/quantiply/samza/metrics/TopNWindowedMapGaugeTest.java"}, "test_case": {"identifier": "testTopN", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTopN() throws Exception {\n        final long windowMs = 60000L;\n        when(clock.currentTimeMillis()).thenReturn(0L);\n\n        WindowedMapGauge<Long> gauge = new TopNWindowedMapGauge<>(\"wtf\", windowMs, Long::max, 3, clock);\n        gauge.update(\"key1\", 1L);\n        gauge.update(\"key2\", 2L);\n        gauge.update(\"key3\", 3L);\n        gauge.update(\"key4\", 4L);\n        gauge.update(\"key5\", 5L);\n\n        //Previous is still empty\n        assertEquals(0, ((Map) gauge.getValue().get(\"data\")).size());\n        //Jump one window ahead\n        when(clock.currentTimeMillis()).thenReturn(windowMs);\n        //Reporter is ahead by one\n        assertEquals(0, ((Map) gauge.getValue().get(\"data\")).size());\n        //This will align the state\n        gauge.update(\"key1\", 20L);\n        //Report is now aligned\n        assertEquals(3, ((Map<String, Long>) gauge.getValue().get(\"data\")).size());\n        //Make sure that largest 3 were kept\n        assertEquals(\n                new HashSet<String>(Arrays.asList(\"key3\", \"key4\", \"key5\")),\n                ((Map<String, Long>) gauge.getValue().get(\"data\")).keySet());\n    }", "signature": "void testTopN()", "full_signature": "@Test public void testTopN()", "class_method_signature": "TopNWindowedMapGaugeTest.testTopN()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "currentTimeMillis", "update", "update", "update", "update", "update", "assertEquals", "size", "get", "getValue", "thenReturn", "when", "currentTimeMillis", "assertEquals", "size", "get", "getValue", "update", "assertEquals", "size", "get", "getValue", "assertEquals", "asList", "keySet", "get", "getValue"]}, "focal_class": {"identifier": "TopNWindowedMapGauge", "superclass": "extends WindowedMapGauge<V>", "interfaces": "", "fields": [{"original_string": "private int n;", "modifier": "private", "type": "int", "declarator": "n", "var_name": "n"}], "methods": [{"identifier": "TopNWindowedMapGauge", "parameters": "(String name, long windowDurationMs, BiFunction<V, V, V> mergeFunc, int n)", "modifiers": "public", "return": "", "signature": " TopNWindowedMapGauge(String name, long windowDurationMs, BiFunction<V, V, V> mergeFunc, int n)", "full_signature": "public  TopNWindowedMapGauge(String name, long windowDurationMs, BiFunction<V, V, V> mergeFunc, int n)", "class_method_signature": "TopNWindowedMapGauge.TopNWindowedMapGauge(String name, long windowDurationMs, BiFunction<V, V, V> mergeFunc, int n)", "testcase": false, "constructor": true}, {"identifier": "TopNWindowedMapGauge", "parameters": "(String name, long windowDurationMs, BiFunction<V, V, V> mergeFunc, int n, Clock clock)", "modifiers": "public", "return": "", "signature": " TopNWindowedMapGauge(String name, long windowDurationMs, BiFunction<V, V, V> mergeFunc, int n, Clock clock)", "full_signature": "public  TopNWindowedMapGauge(String name, long windowDurationMs, BiFunction<V, V, V> mergeFunc, int n, Clock clock)", "class_method_signature": "TopNWindowedMapGauge.TopNWindowedMapGauge(String name, long windowDurationMs, BiFunction<V, V, V> mergeFunc, int n, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "getSnapshot", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, V>", "signature": "Map<String, V> getSnapshot()", "full_signature": "@Override public Map<String, V> getSnapshot()", "class_method_signature": "TopNWindowedMapGauge.getSnapshot()", "testcase": false, "constructor": false}, {"identifier": "topN", "parameters": "(Map<String, V> map)", "modifiers": "protected", "return": "Map<String, V>", "signature": "Map<String, V> topN(Map<String, V> map)", "full_signature": "protected Map<String, V> topN(Map<String, V> map)", "class_method_signature": "TopNWindowedMapGauge.topN(Map<String, V> map)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/quantiply/samza/metrics/TopNWindowedMapGauge.java"}, "focal_method": {"identifier": "topN", "parameters": "(Map<String, V> map)", "modifiers": "protected", "return": "Map<String, V>", "body": "protected Map<String, V> topN(Map<String, V> map)\n    {\n        Map<String,V> result = new HashMap<>();\n        Stream<Map.Entry<String,V>> st = map.entrySet().stream();\n\n        Comparator<Map.Entry<String,V>> comparator = Comparator.comparing(\n                (Map.Entry<String, V> e) -> e.getValue())\n                .reversed();\n        st\n                .sorted(comparator)\n                .limit(n)\n                .forEach(e -> result.put(e.getKey(), e.getValue()));\n        return result;\n    }", "signature": "Map<String, V> topN(Map<String, V> map)", "full_signature": "protected Map<String, V> topN(Map<String, V> map)", "class_method_signature": "TopNWindowedMapGauge.topN(Map<String, V> map)", "testcase": false, "constructor": false, "invocations": ["stream", "entrySet", "reversed", "comparing", "getValue", "forEach", "limit", "sorted", "put", "getKey", "getValue"]}, "repository": {"repo_id": 23237318, "url": "https://github.com/quantiply/rico", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 5128, "license": "licensed"}}