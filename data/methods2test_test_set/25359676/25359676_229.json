{"test_class": {"identifier": "LookupCriteriaGeneratorImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock DataDictionary dataDictionary;", "modifier": "@Mock", "type": "DataDictionary", "declarator": "dataDictionary", "var_name": "dataDictionary"}, {"original_string": "@Mock DataDictionaryService dataDictionaryService;", "modifier": "@Mock", "type": "DataDictionaryService", "declarator": "dataDictionaryService", "var_name": "dataDictionaryService"}, {"original_string": "@Mock DataObjectService dataObjectService;", "modifier": "@Mock", "type": "DataObjectService", "declarator": "dataObjectService", "var_name": "dataObjectService"}, {"original_string": "@Mock ReferenceLinker referenceLinker;", "modifier": "@Mock", "type": "ReferenceLinker", "declarator": "referenceLinker", "var_name": "referenceLinker"}, {"original_string": "@Mock DateTimeService dateTimeService;", "modifier": "@Mock", "type": "DateTimeService", "declarator": "dateTimeService", "var_name": "dateTimeService"}, {"original_string": "@InjectMocks private LookupCriteriaGeneratorImpl generator = new LookupCriteriaGeneratorImpl();", "modifier": "@InjectMocks private", "type": "LookupCriteriaGeneratorImpl", "declarator": "generator = new LookupCriteriaGeneratorImpl()", "var_name": "generator"}, {"original_string": "private static final DateTimeFormatter formatter = new DateTimeFormatterFactory(\"mm/dd/yyyy\").createDateTimeFormatter();", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "formatter = new DateTimeFormatterFactory(\"mm/dd/yyyy\").createDateTimeFormatter()", "var_name": "formatter"}], "file": "rice-framework/krad-service-impl/src/test/java/org/kuali/rice/krad/service/impl/LookupCriteriaGeneratorImplTest.java"}, "test_case": {"identifier": "testGenerateCriteria_MultipleOr", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateCriteria_MultipleOr() throws Exception {\n        Map<String, String> mapCriteria = new HashMap<String, String>();\n        mapCriteria.put(\"prop1\", \"a|b\");\n        mapCriteria.put(\"prop2\", \"c\");\n        mapCriteria.put(\"prop3\", \"d\");\n\n        QueryByCriteria.Builder qbcBuilder = generator.generateCriteria(TestClass.class, mapCriteria, false);\n        assertNotNull(\"build should not have been null\", qbcBuilder);\n        QueryByCriteria qbc = qbcBuilder.build();\n\n        // now walk the tree, it should come out as:\n        // and(\n        //   or(\n        //     likeIgnoreCase(prop1, \"a\"),\n        //    \u00a0likeIgnoreCase(prop1, \"b\"),\n        //   ),\n        //\u00a0  like(prop2, \"c\"),\n        //\u00a0  likeIgnoreCase(prop3, \"d\")\n        // )\n\n        Predicate and = qbc.getPredicate();\n        assertTrue(\"top level predicate type incorrect.  Was: \" + and, and instanceof AndPredicate);\n        Set<Predicate> predicates = ((AndPredicate) and).getPredicates();\n\n        assertEquals(\"Wrong number of top-level predicates\", 3, predicates.size());\n\n        boolean foundProp1 = false;\n        boolean foundProp2 = false;\n        boolean foundProp3 = false;\n        for (Predicate predicate : predicates) {\n            if (predicate instanceof LikePredicate) {\n            \tLikePredicate like = (LikePredicate)predicate;\n                if (like.getPropertyPath().equals(\"prop2\")) {\n                    assertEquals(\"prop2 had wrong value\", \"c\", like.getValue().getValue());\n                    foundProp2 = true;\n                } else {\n                    fail(\"Invalid like predicate encountered: \" + predicate);\n                }\n            } else if (predicate instanceof LikeIgnoreCasePredicate) {\n            \tLikeIgnoreCasePredicate like = (LikeIgnoreCasePredicate)predicate;\n                if (like.getPropertyPath().equals(\"prop3\")) {\n                    assertEquals(\"prop3 had wrong value\", \"d\", like.getValue().getValue());\n                    foundProp3 = true;\n                } else {\n                    fail(\"Invalid likeIgnoreCase predicate encountered: \" + predicate);\n                }\n            } else if (predicate instanceof OrPredicate) {\n                foundProp1 = true;\n                // under the or predicate we should have 2 likes, one for each component of the OR\n                OrPredicate orPredicate = (OrPredicate)predicate;\n                assertEquals(\"wrong number of predicates in the internal OR predicate\",2, orPredicate.getPredicates().size());\n                for (Predicate orSubPredicate : orPredicate.getPredicates()) {\n                    if (orSubPredicate instanceof LikeIgnoreCasePredicate) {\n                        LikeIgnoreCasePredicate likeInternal = (LikeIgnoreCasePredicate)orSubPredicate;\n                        if (likeInternal.getPropertyPath().equals(\"prop1\")) {\n                            assertTrue(\"prop1 had wrong value\", \"a\".equals(likeInternal.getValue().getValue()) ||\n                                    \"b\".equals(likeInternal.getValue().getValue()));\n                        } else {\n                            fail(\"Invalid predicate, does not have a propertypath of prop1:\" + predicate);\n                        }\n                    } else {\n                        fail(\"Unexpected predicate: \" + orSubPredicate);\n                    }\n                }\n            } else {\n                fail(\"Unexpected predicate: \" + predicate);\n            }\n        }\n        assertTrue(\"prop1 predicate missing\", foundProp1);\n        assertTrue(\"prop2 predicate missing\", foundProp2);\n        assertTrue(\"prop3 predicate missing\", foundProp3);\n    }", "signature": "void testGenerateCriteria_MultipleOr()", "full_signature": "@Test public void testGenerateCriteria_MultipleOr()", "class_method_signature": "LookupCriteriaGeneratorImplTest.testGenerateCriteria_MultipleOr()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "generateCriteria", "assertNotNull", "build", "getPredicate", "assertTrue", "getPredicates", "assertEquals", "size", "equals", "getPropertyPath", "assertEquals", "getValue", "getValue", "fail", "equals", "getPropertyPath", "assertEquals", "getValue", "getValue", "fail", "assertEquals", "size", "getPredicates", "getPredicates", "equals", "getPropertyPath", "assertTrue", "equals", "getValue", "getValue", "equals", "getValue", "getValue", "fail", "fail", "fail", "assertTrue", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "LookupCriteriaGeneratorImpl", "superclass": "", "interfaces": "implements LookupCriteriaGenerator", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(LookupCriteriaGeneratorImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(LookupCriteriaGeneratorImpl.class)", "var_name": "LOG"}, {"original_string": "private DateTimeService dateTimeService;", "modifier": "private", "type": "DateTimeService", "declarator": "dateTimeService", "var_name": "dateTimeService"}, {"original_string": "private DataDictionaryService dataDictionaryService;", "modifier": "private", "type": "DataDictionaryService", "declarator": "dataDictionaryService", "var_name": "dataDictionaryService"}, {"original_string": "private DatabasePlatform dbPlatform;", "modifier": "private", "type": "DatabasePlatform", "declarator": "dbPlatform", "var_name": "dbPlatform"}, {"original_string": "private DataObjectService dataObjectService;", "modifier": "private", "type": "DataObjectService", "declarator": "dataObjectService", "var_name": "dataObjectService"}], "methods": [{"identifier": "getDateTimeService", "parameters": "()", "modifiers": "public", "return": "DateTimeService", "signature": "DateTimeService getDateTimeService()", "full_signature": "public DateTimeService getDateTimeService()", "class_method_signature": "LookupCriteriaGeneratorImpl.getDateTimeService()", "testcase": false, "constructor": false}, {"identifier": "setDateTimeService", "parameters": "(DateTimeService dateTimeService)", "modifiers": "public", "return": "void", "signature": "void setDateTimeService(DateTimeService dateTimeService)", "full_signature": "public void setDateTimeService(DateTimeService dateTimeService)", "class_method_signature": "LookupCriteriaGeneratorImpl.setDateTimeService(DateTimeService dateTimeService)", "testcase": false, "constructor": false}, {"identifier": "getDataDictionaryService", "parameters": "()", "modifiers": "public", "return": "DataDictionaryService", "signature": "DataDictionaryService getDataDictionaryService()", "full_signature": "public DataDictionaryService getDataDictionaryService()", "class_method_signature": "LookupCriteriaGeneratorImpl.getDataDictionaryService()", "testcase": false, "constructor": false}, {"identifier": "setDataDictionaryService", "parameters": "(DataDictionaryService dataDictionaryService)", "modifiers": "public", "return": "void", "signature": "void setDataDictionaryService(DataDictionaryService dataDictionaryService)", "full_signature": "public void setDataDictionaryService(DataDictionaryService dataDictionaryService)", "class_method_signature": "LookupCriteriaGeneratorImpl.setDataDictionaryService(DataDictionaryService dataDictionaryService)", "testcase": false, "constructor": false}, {"identifier": "getDbPlatform", "parameters": "()", "modifiers": "public", "return": "DatabasePlatform", "signature": "DatabasePlatform getDbPlatform()", "full_signature": "public DatabasePlatform getDbPlatform()", "class_method_signature": "LookupCriteriaGeneratorImpl.getDbPlatform()", "testcase": false, "constructor": false}, {"identifier": "setDbPlatform", "parameters": "(DatabasePlatform dbPlatform)", "modifiers": "public", "return": "void", "signature": "void setDbPlatform(DatabasePlatform dbPlatform)", "full_signature": "public void setDbPlatform(DatabasePlatform dbPlatform)", "class_method_signature": "LookupCriteriaGeneratorImpl.setDbPlatform(DatabasePlatform dbPlatform)", "testcase": false, "constructor": false}, {"identifier": "getDataObjectService", "parameters": "()", "modifiers": "public", "return": "DataObjectService", "signature": "DataObjectService getDataObjectService()", "full_signature": "public DataObjectService getDataObjectService()", "class_method_signature": "LookupCriteriaGeneratorImpl.getDataObjectService()", "testcase": false, "constructor": false}, {"identifier": "setDataObjectService", "parameters": "(DataObjectService dataObjectService)", "modifiers": "public", "return": "void", "signature": "void setDataObjectService(DataObjectService dataObjectService)", "full_signature": "public void setDataObjectService(DataObjectService dataObjectService)", "class_method_signature": "LookupCriteriaGeneratorImpl.setDataObjectService(DataObjectService dataObjectService)", "testcase": false, "constructor": false}, {"identifier": "generateCriteria", "parameters": "(Class<?> type, Map<String, String> formProps, boolean usePrimaryKeysOnly)", "modifiers": "@Override @Deprecated public", "return": "QueryByCriteria.Builder", "signature": "QueryByCriteria.Builder generateCriteria(Class<?> type, Map<String, String> formProps, boolean usePrimaryKeysOnly)", "full_signature": "@Override @Deprecated public QueryByCriteria.Builder generateCriteria(Class<?> type, Map<String, String> formProps, boolean usePrimaryKeysOnly)", "class_method_signature": "LookupCriteriaGeneratorImpl.generateCriteria(Class<?> type, Map<String, String> formProps, boolean usePrimaryKeysOnly)", "testcase": false, "constructor": false}, {"identifier": "generateCriteria", "parameters": "(Class<?> type, Map<String, String> formProps,\n            List<String> wildcardAsLiteralPropertyNames, boolean usePrimaryKeysOnly)", "modifiers": "@Override public", "return": "QueryByCriteria.Builder", "signature": "QueryByCriteria.Builder generateCriteria(Class<?> type, Map<String, String> formProps,\n            List<String> wildcardAsLiteralPropertyNames, boolean usePrimaryKeysOnly)", "full_signature": "@Override public QueryByCriteria.Builder generateCriteria(Class<?> type, Map<String, String> formProps,\n            List<String> wildcardAsLiteralPropertyNames, boolean usePrimaryKeysOnly)", "class_method_signature": "LookupCriteriaGeneratorImpl.generateCriteria(Class<?> type, Map<String, String> formProps,\n            List<String> wildcardAsLiteralPropertyNames, boolean usePrimaryKeysOnly)", "testcase": false, "constructor": false}, {"identifier": "createObjectCriteriaFromMap", "parameters": "(Object example, Map<String, String> formProps)", "modifiers": "@Override public", "return": "QueryByCriteria.Builder", "signature": "QueryByCriteria.Builder createObjectCriteriaFromMap(Object example, Map<String, String> formProps)", "full_signature": "@Override public QueryByCriteria.Builder createObjectCriteriaFromMap(Object example, Map<String, String> formProps)", "class_method_signature": "LookupCriteriaGeneratorImpl.createObjectCriteriaFromMap(Object example, Map<String, String> formProps)", "testcase": false, "constructor": false}, {"identifier": "instantiateLookupDataObject", "parameters": "(Class<?> type)", "modifiers": "protected", "return": "Object", "signature": "Object instantiateLookupDataObject(Class<?> type)", "full_signature": "protected Object instantiateLookupDataObject(Class<?> type)", "class_method_signature": "LookupCriteriaGeneratorImpl.instantiateLookupDataObject(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "createCriteria", "parameters": "(Object example, String searchValue, String propertyName, Predicates criteria)", "modifiers": "protected", "return": "boolean", "signature": "boolean createCriteria(Object example, String searchValue, String propertyName, Predicates criteria)", "full_signature": "protected boolean createCriteria(Object example, String searchValue, String propertyName, Predicates criteria)", "class_method_signature": "LookupCriteriaGeneratorImpl.createCriteria(Object example, String searchValue, String propertyName, Predicates criteria)", "testcase": false, "constructor": false}, {"identifier": "createCriteria", "parameters": "(Object example, String searchValue, String propertyName, boolean caseInsensitive, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria)", "modifiers": "public", "return": "boolean", "signature": "boolean createCriteria(Object example, String searchValue, String propertyName, boolean caseInsensitive, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria)", "full_signature": "public boolean createCriteria(Object example, String searchValue, String propertyName, boolean caseInsensitive, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria)", "class_method_signature": "LookupCriteriaGeneratorImpl.createCriteria(Object example, String searchValue, String propertyName, boolean caseInsensitive, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria)", "testcase": false, "constructor": false}, {"identifier": "createCriteria", "parameters": "(Object example, String searchValue, String propertyName, boolean caseInsensitive, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria, Map<String, String> searchValues)", "modifiers": "@Deprecated protected", "return": "boolean", "signature": "boolean createCriteria(Object example, String searchValue, String propertyName, boolean caseInsensitive, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria, Map<String, String> searchValues)", "full_signature": "@Deprecated protected boolean createCriteria(Object example, String searchValue, String propertyName, boolean caseInsensitive, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria, Map<String, String> searchValues)", "class_method_signature": "LookupCriteriaGeneratorImpl.createCriteria(Object example, String searchValue, String propertyName, boolean caseInsensitive, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria, Map<String, String> searchValues)", "testcase": false, "constructor": false}, {"identifier": "getCollectionCriteriaFromMap", "parameters": "(Class<?> type, Object example, Map<String, String> formProps)", "modifiers": "@Deprecated protected", "return": "Predicates", "signature": "Predicates getCollectionCriteriaFromMap(Class<?> type, Object example, Map<String, String> formProps)", "full_signature": "@Deprecated protected Predicates getCollectionCriteriaFromMap(Class<?> type, Object example, Map<String, String> formProps)", "class_method_signature": "LookupCriteriaGeneratorImpl.getCollectionCriteriaFromMap(Class<?> type, Object example, Map<String, String> formProps)", "testcase": false, "constructor": false}, {"identifier": "getCollectionCriteriaFromMap", "parameters": "(Class<?> type, Object example, Map<String, String> formProps, List<String> wildcardAsLiteralPropertyNames)", "modifiers": "protected", "return": "Predicates", "signature": "Predicates getCollectionCriteriaFromMap(Class<?> type, Object example, Map<String, String> formProps, List<String> wildcardAsLiteralPropertyNames)", "full_signature": "protected Predicates getCollectionCriteriaFromMap(Class<?> type, Object example, Map<String, String> formProps, List<String> wildcardAsLiteralPropertyNames)", "class_method_signature": "LookupCriteriaGeneratorImpl.getCollectionCriteriaFromMap(Class<?> type, Object example, Map<String, String> formProps, List<String> wildcardAsLiteralPropertyNames)", "testcase": false, "constructor": false}, {"identifier": "determineIfAttributeSearchShouldBeCaseInsensitive", "parameters": "(Class<?> type, String propertyName)", "modifiers": "protected", "return": "boolean", "signature": "boolean determineIfAttributeSearchShouldBeCaseInsensitive(Class<?> type, String propertyName)", "full_signature": "protected boolean determineIfAttributeSearchShouldBeCaseInsensitive(Class<?> type, String propertyName)", "class_method_signature": "LookupCriteriaGeneratorImpl.determineIfAttributeSearchShouldBeCaseInsensitive(Class<?> type, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "addCriteriaForPropertyValues", "parameters": "(Object example, String propertyName, boolean caseInsensitive, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria, Map formProps, String... searchValues)", "modifiers": "protected", "return": "boolean", "signature": "boolean addCriteriaForPropertyValues(Object example, String propertyName, boolean caseInsensitive, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria, Map formProps, String... searchValues)", "full_signature": "protected boolean addCriteriaForPropertyValues(Object example, String propertyName, boolean caseInsensitive, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria, Map formProps, String... searchValues)", "class_method_signature": "LookupCriteriaGeneratorImpl.addCriteriaForPropertyValues(Object example, String propertyName, boolean caseInsensitive, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria, Map formProps, String... searchValues)", "testcase": false, "constructor": false}, {"identifier": "getCollectionCriteriaFromMapUsingPrimaryKeysOnly", "parameters": "(Class<?> type, Object dataObject, Map<String, String> formProps)", "modifiers": "@Deprecated protected", "return": "Predicates", "signature": "Predicates getCollectionCriteriaFromMapUsingPrimaryKeysOnly(Class<?> type, Object dataObject, Map<String, String> formProps)", "full_signature": "@Deprecated protected Predicates getCollectionCriteriaFromMapUsingPrimaryKeysOnly(Class<?> type, Object dataObject, Map<String, String> formProps)", "class_method_signature": "LookupCriteriaGeneratorImpl.getCollectionCriteriaFromMapUsingPrimaryKeysOnly(Class<?> type, Object dataObject, Map<String, String> formProps)", "testcase": false, "constructor": false}, {"identifier": "getCollectionCriteriaFromMapUsingPrimaryKeysOnly", "parameters": "(Class<?> type, Object dataObject, Map<String, String> formProps, List<String> wildcardAsLiteralPropertyNames)", "modifiers": "protected", "return": "Predicates", "signature": "Predicates getCollectionCriteriaFromMapUsingPrimaryKeysOnly(Class<?> type, Object dataObject, Map<String, String> formProps, List<String> wildcardAsLiteralPropertyNames)", "full_signature": "protected Predicates getCollectionCriteriaFromMapUsingPrimaryKeysOnly(Class<?> type, Object dataObject, Map<String, String> formProps, List<String> wildcardAsLiteralPropertyNames)", "class_method_signature": "LookupCriteriaGeneratorImpl.getCollectionCriteriaFromMapUsingPrimaryKeysOnly(Class<?> type, Object dataObject, Map<String, String> formProps, List<String> wildcardAsLiteralPropertyNames)", "testcase": false, "constructor": false}, {"identifier": "doesLookupFieldTreatWildcardsAndOperatorsAsLiteral", "parameters": "(Class<?> type, String fieldName)", "modifiers": "@Deprecated protected", "return": "boolean", "signature": "boolean doesLookupFieldTreatWildcardsAndOperatorsAsLiteral(Class<?> type, String fieldName)", "full_signature": "@Deprecated protected boolean doesLookupFieldTreatWildcardsAndOperatorsAsLiteral(Class<?> type, String fieldName)", "class_method_signature": "LookupCriteriaGeneratorImpl.doesLookupFieldTreatWildcardsAndOperatorsAsLiteral(Class<?> type, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "cleanNumeric", "parameters": "(String value, Class<?> propertyType)", "modifiers": "protected", "return": "Number", "signature": "Number cleanNumeric(String value, Class<?> propertyType)", "full_signature": "protected Number cleanNumeric(String value, Class<?> propertyType)", "class_method_signature": "LookupCriteriaGeneratorImpl.cleanNumeric(String value, Class<?> propertyType)", "testcase": false, "constructor": false}, {"identifier": "addOrCriteria", "parameters": "(String propertyName, String propertyValue, Class propertyType, boolean caseInsensitive, Predicates criteria)", "modifiers": "protected", "return": "void", "signature": "void addOrCriteria(String propertyName, String propertyValue, Class propertyType, boolean caseInsensitive, Predicates criteria)", "full_signature": "protected void addOrCriteria(String propertyName, String propertyValue, Class propertyType, boolean caseInsensitive, Predicates criteria)", "class_method_signature": "LookupCriteriaGeneratorImpl.addOrCriteria(String propertyName, String propertyValue, Class propertyType, boolean caseInsensitive, Predicates criteria)", "testcase": false, "constructor": false}, {"identifier": "addAndCriteria", "parameters": "(String propertyName, String propertyValue, Class propertyType, boolean caseInsensitive, Predicates criteria)", "modifiers": "protected", "return": "void", "signature": "void addAndCriteria(String propertyName, String propertyValue, Class propertyType, boolean caseInsensitive, Predicates criteria)", "full_signature": "protected void addAndCriteria(String propertyName, String propertyValue, Class propertyType, boolean caseInsensitive, Predicates criteria)", "class_method_signature": "LookupCriteriaGeneratorImpl.addAndCriteria(String propertyName, String propertyValue, Class propertyType, boolean caseInsensitive, Predicates criteria)", "testcase": false, "constructor": false}, {"identifier": "addCriteria", "parameters": "(String propertyName, String propertyValue, Class<?> propertyType, boolean caseInsensitive, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria)", "modifiers": "protected", "return": "void", "signature": "void addCriteria(String propertyName, String propertyValue, Class<?> propertyType, boolean caseInsensitive, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria)", "full_signature": "protected void addCriteria(String propertyName, String propertyValue, Class<?> propertyType, boolean caseInsensitive, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria)", "class_method_signature": "LookupCriteriaGeneratorImpl.addCriteria(String propertyName, String propertyValue, Class<?> propertyType, boolean caseInsensitive, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria)", "testcase": false, "constructor": false}, {"identifier": "addNotCriteria", "parameters": "(String propertyName, String propertyValue, Class propertyType, boolean caseInsensitive, Predicates criteria)", "modifiers": "protected", "return": "void", "signature": "void addNotCriteria(String propertyName, String propertyValue, Class propertyType, boolean caseInsensitive, Predicates criteria)", "full_signature": "protected void addNotCriteria(String propertyName, String propertyValue, Class propertyType, boolean caseInsensitive, Predicates criteria)", "class_method_signature": "LookupCriteriaGeneratorImpl.addNotCriteria(String propertyName, String propertyValue, Class propertyType, boolean caseInsensitive, Predicates criteria)", "testcase": false, "constructor": false}, {"identifier": "addDateRangeCriteria", "parameters": "(String propertyName, String propertyValue, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria)", "modifiers": "protected", "return": "void", "signature": "void addDateRangeCriteria(String propertyName, String propertyValue, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria)", "full_signature": "protected void addDateRangeCriteria(String propertyName, String propertyValue, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria)", "class_method_signature": "LookupCriteriaGeneratorImpl.addDateRangeCriteria(String propertyName, String propertyValue, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria)", "testcase": false, "constructor": false}, {"identifier": "addNumericRangeCriteria", "parameters": "(String propertyName, String propertyValue, Class<?> propertyType, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria)", "modifiers": "protected", "return": "void", "signature": "void addNumericRangeCriteria(String propertyName, String propertyValue, Class<?> propertyType, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria)", "full_signature": "protected void addNumericRangeCriteria(String propertyName, String propertyValue, Class<?> propertyType, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria)", "class_method_signature": "LookupCriteriaGeneratorImpl.addNumericRangeCriteria(String propertyName, String propertyValue, Class<?> propertyType, boolean treatWildcardsAndOperatorsAsLiteral, Predicates criteria)", "testcase": false, "constructor": false}, {"identifier": "addStringRangeCriteria", "parameters": "(String propertyName, String propertyValue, boolean caseInsensitive, Predicates criteria)", "modifiers": "protected", "return": "void", "signature": "void addStringRangeCriteria(String propertyName, String propertyValue, boolean caseInsensitive, Predicates criteria)", "full_signature": "protected void addStringRangeCriteria(String propertyName, String propertyValue, boolean caseInsensitive, Predicates criteria)", "class_method_signature": "LookupCriteriaGeneratorImpl.addStringRangeCriteria(String propertyName, String propertyValue, boolean caseInsensitive, Predicates criteria)", "testcase": false, "constructor": false}, {"identifier": "addInactivateableFromToActiveCriteria", "parameters": "(Object example, String activeSearchValue, Predicates criteria, Map<String, String> searchValues)", "modifiers": "protected", "return": "void", "signature": "void addInactivateableFromToActiveCriteria(Object example, String activeSearchValue, Predicates criteria, Map<String, String> searchValues)", "full_signature": "protected void addInactivateableFromToActiveCriteria(Object example, String activeSearchValue, Predicates criteria, Map<String, String> searchValues)", "class_method_signature": "LookupCriteriaGeneratorImpl.addInactivateableFromToActiveCriteria(Object example, String activeSearchValue, Predicates criteria, Map<String, String> searchValues)", "testcase": false, "constructor": false}, {"identifier": "addLogicalOperatorCriteria", "parameters": "(String propertyName, String propertyValue, Class<?> propertyType, boolean caseInsensitive, Predicates criteria, String splitValue)", "modifiers": "protected", "return": "void", "signature": "void addLogicalOperatorCriteria(String propertyName, String propertyValue, Class<?> propertyType, boolean caseInsensitive, Predicates criteria, String splitValue)", "full_signature": "protected void addLogicalOperatorCriteria(String propertyName, String propertyValue, Class<?> propertyType, boolean caseInsensitive, Predicates criteria, String splitValue)", "class_method_signature": "LookupCriteriaGeneratorImpl.addLogicalOperatorCriteria(String propertyName, String propertyValue, Class<?> propertyType, boolean caseInsensitive, Predicates criteria, String splitValue)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(String dateString)", "modifiers": "protected", "return": "java.sql.Date", "signature": "java.sql.Date parseDate(String dateString)", "full_signature": "protected java.sql.Date parseDate(String dateString)", "class_method_signature": "LookupCriteriaGeneratorImpl.parseDate(String dateString)", "testcase": false, "constructor": false}, {"identifier": "parseDateUpperBound", "parameters": "(String dateString)", "modifiers": "protected", "return": "java.sql.Date", "signature": "java.sql.Date parseDateUpperBound(String dateString)", "full_signature": "protected java.sql.Date parseDateUpperBound(String dateString)", "class_method_signature": "LookupCriteriaGeneratorImpl.parseDateUpperBound(String dateString)", "testcase": false, "constructor": false}, {"identifier": "listPrimaryKeyFieldNames", "parameters": "(Class<?> type)", "modifiers": "protected", "return": "List<String>", "signature": "List<String> listPrimaryKeyFieldNames(Class<?> type)", "full_signature": "protected List<String> listPrimaryKeyFieldNames(Class<?> type)", "class_method_signature": "LookupCriteriaGeneratorImpl.listPrimaryKeyFieldNames(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getPropertyType", "parameters": "(Object example, String propertyName)", "modifiers": "protected", "return": "Class<?>", "signature": "Class<?> getPropertyType(Object example, String propertyName)", "full_signature": "protected Class<?> getPropertyType(Object example, String propertyName)", "class_method_signature": "LookupCriteriaGeneratorImpl.getPropertyType(Object example, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "isWriteable", "parameters": "(Object o, String p)", "modifiers": "protected", "return": "boolean", "signature": "boolean isWriteable(Object o, String p)", "full_signature": "protected boolean isWriteable(Object o, String p)", "class_method_signature": "LookupCriteriaGeneratorImpl.isWriteable(Object o, String p)", "testcase": false, "constructor": false}, {"identifier": "addEqualNumeric", "parameters": "(Predicates criteria, String propertyName, Class<?> propertyClass, String searchValue)", "modifiers": "protected", "return": "void", "signature": "void addEqualNumeric(Predicates criteria, String propertyName, Class<?> propertyClass, String searchValue)", "full_signature": "protected void addEqualNumeric(Predicates criteria, String propertyName, Class<?> propertyClass, String searchValue)", "class_method_signature": "LookupCriteriaGeneratorImpl.addEqualNumeric(Predicates criteria, String propertyName, Class<?> propertyClass, String searchValue)", "testcase": false, "constructor": false}, {"identifier": "addEqualTemporal", "parameters": "(Predicates criteria, String propertyName, String searchValue)", "modifiers": "protected", "return": "void", "signature": "void addEqualTemporal(Predicates criteria, String propertyName, String searchValue)", "full_signature": "protected void addEqualTemporal(Predicates criteria, String propertyName, String searchValue)", "class_method_signature": "LookupCriteriaGeneratorImpl.addEqualTemporal(Predicates criteria, String propertyName, String searchValue)", "testcase": false, "constructor": false}, {"identifier": "addEqual", "parameters": "(Predicates criteria, String propertyName, Object searchValue)", "modifiers": "protected", "return": "void", "signature": "void addEqual(Predicates criteria, String propertyName, Object searchValue)", "full_signature": "protected void addEqual(Predicates criteria, String propertyName, Object searchValue)", "class_method_signature": "LookupCriteriaGeneratorImpl.addEqual(Predicates criteria, String propertyName, Object searchValue)", "testcase": false, "constructor": false}, {"identifier": "addIsNull", "parameters": "(Predicates criteria, String propertyName)", "modifiers": "protected", "return": "void", "signature": "void addIsNull(Predicates criteria, String propertyName)", "full_signature": "protected void addIsNull(Predicates criteria, String propertyName)", "class_method_signature": "LookupCriteriaGeneratorImpl.addIsNull(Predicates criteria, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "addIsNotNull", "parameters": "(Predicates criteria, String propertyName)", "modifiers": "protected", "return": "void", "signature": "void addIsNotNull(Predicates criteria, String propertyName)", "full_signature": "protected void addIsNotNull(Predicates criteria, String propertyName)", "class_method_signature": "LookupCriteriaGeneratorImpl.addIsNotNull(Predicates criteria, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "addLike", "parameters": "(Predicates criteria, String propertyName, String propertyValue)", "modifiers": "protected", "return": "void", "signature": "void addLike(Predicates criteria, String propertyName, String propertyValue)", "full_signature": "protected void addLike(Predicates criteria, String propertyName, String propertyValue)", "class_method_signature": "LookupCriteriaGeneratorImpl.addLike(Predicates criteria, String propertyName, String propertyValue)", "testcase": false, "constructor": false}, {"identifier": "addNotLike", "parameters": "(Predicates criteria, String propertyName, String propertyValue)", "modifiers": "protected", "return": "void", "signature": "void addNotLike(Predicates criteria, String propertyName, String propertyValue)", "full_signature": "protected void addNotLike(Predicates criteria, String propertyName, String propertyValue)", "class_method_signature": "LookupCriteriaGeneratorImpl.addNotLike(Predicates criteria, String propertyName, String propertyValue)", "testcase": false, "constructor": false}, {"identifier": "addEqualToBoolean", "parameters": "(Predicates criteria, String propertyName, String propertyValue)", "modifiers": "protected", "return": "void", "signature": "void addEqualToBoolean(Predicates criteria, String propertyName, String propertyValue)", "full_signature": "protected void addEqualToBoolean(Predicates criteria, String propertyName, String propertyValue)", "class_method_signature": "LookupCriteriaGeneratorImpl.addEqualToBoolean(Predicates criteria, String propertyName, String propertyValue)", "testcase": false, "constructor": false}, {"identifier": "uppercasePropertyName", "parameters": "(String propertyName)", "modifiers": "protected", "return": "String", "signature": "String uppercasePropertyName(String propertyName)", "full_signature": "protected String uppercasePropertyName(String propertyName)", "class_method_signature": "LookupCriteriaGeneratorImpl.uppercasePropertyName(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "addAnd", "parameters": "(Predicates criteria, Predicates criteria2)", "modifiers": "protected", "return": "void", "signature": "void addAnd(Predicates criteria, Predicates criteria2)", "full_signature": "protected void addAnd(Predicates criteria, Predicates criteria2)", "class_method_signature": "LookupCriteriaGeneratorImpl.addAnd(Predicates criteria, Predicates criteria2)", "testcase": false, "constructor": false}, {"identifier": "addLessThan", "parameters": "(Predicates criteria, String propertyName, Object propertyValue)", "modifiers": "protected", "return": "void", "signature": "void addLessThan(Predicates criteria, String propertyName, Object propertyValue)", "full_signature": "protected void addLessThan(Predicates criteria, String propertyName, Object propertyValue)", "class_method_signature": "LookupCriteriaGeneratorImpl.addLessThan(Predicates criteria, String propertyName, Object propertyValue)", "testcase": false, "constructor": false}, {"identifier": "addLessThanOrEqual", "parameters": "(Predicates criteria, String propertyName, Object propertyValue)", "modifiers": "protected", "return": "void", "signature": "void addLessThanOrEqual(Predicates criteria, String propertyName, Object propertyValue)", "full_signature": "protected void addLessThanOrEqual(Predicates criteria, String propertyName, Object propertyValue)", "class_method_signature": "LookupCriteriaGeneratorImpl.addLessThanOrEqual(Predicates criteria, String propertyName, Object propertyValue)", "testcase": false, "constructor": false}, {"identifier": "addGreaterThan", "parameters": "(Predicates criteria, String propertyName, Object propertyValue)", "modifiers": "protected", "return": "void", "signature": "void addGreaterThan(Predicates criteria, String propertyName, Object propertyValue)", "full_signature": "protected void addGreaterThan(Predicates criteria, String propertyName, Object propertyValue)", "class_method_signature": "LookupCriteriaGeneratorImpl.addGreaterThan(Predicates criteria, String propertyName, Object propertyValue)", "testcase": false, "constructor": false}, {"identifier": "addGreaterThanOrEqual", "parameters": "(Predicates criteria, String propertyName, Object propertyValue)", "modifiers": "protected", "return": "void", "signature": "void addGreaterThanOrEqual(Predicates criteria, String propertyName, Object propertyValue)", "full_signature": "protected void addGreaterThanOrEqual(Predicates criteria, String propertyName, Object propertyValue)", "class_method_signature": "LookupCriteriaGeneratorImpl.addGreaterThanOrEqual(Predicates criteria, String propertyName, Object propertyValue)", "testcase": false, "constructor": false}, {"identifier": "addBetween", "parameters": "(Predicates criteria, String propertyName, Object value1, Object value2)", "modifiers": "protected", "return": "void", "signature": "void addBetween(Predicates criteria, String propertyName, Object value1, Object value2)", "full_signature": "protected void addBetween(Predicates criteria, String propertyName, Object value1, Object value2)", "class_method_signature": "LookupCriteriaGeneratorImpl.addBetween(Predicates criteria, String propertyName, Object value1, Object value2)", "testcase": false, "constructor": false}, {"identifier": "addOr", "parameters": "(Predicates criteria, Predicates criteria2)", "modifiers": "protected", "return": "void", "signature": "void addOr(Predicates criteria, Predicates criteria2)", "full_signature": "protected void addOr(Predicates criteria, Predicates criteria2)", "class_method_signature": "LookupCriteriaGeneratorImpl.addOr(Predicates criteria, Predicates criteria2)", "testcase": false, "constructor": false}, {"identifier": "addEqual", "parameters": "(Predicates criteria, String propertyName, String searchValue, boolean caseInsensitive)", "modifiers": "protected", "return": "void", "signature": "void addEqual(Predicates criteria, String propertyName, String searchValue, boolean caseInsensitive)", "full_signature": "protected void addEqual(Predicates criteria, String propertyName, String searchValue, boolean caseInsensitive)", "class_method_signature": "LookupCriteriaGeneratorImpl.addEqual(Predicates criteria, String propertyName, String searchValue, boolean caseInsensitive)", "testcase": false, "constructor": false}, {"identifier": "addGreaterThan", "parameters": "(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "modifiers": "protected", "return": "void", "signature": "void addGreaterThan(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "full_signature": "protected void addGreaterThan(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "class_method_signature": "LookupCriteriaGeneratorImpl.addGreaterThan(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "testcase": false, "constructor": false}, {"identifier": "addGreaterThanOrEqual", "parameters": "(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "modifiers": "protected", "return": "void", "signature": "void addGreaterThanOrEqual(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "full_signature": "protected void addGreaterThanOrEqual(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "class_method_signature": "LookupCriteriaGeneratorImpl.addGreaterThanOrEqual(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "testcase": false, "constructor": false}, {"identifier": "addLessThan", "parameters": "(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "modifiers": "protected", "return": "void", "signature": "void addLessThan(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "full_signature": "protected void addLessThan(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "class_method_signature": "LookupCriteriaGeneratorImpl.addLessThan(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "testcase": false, "constructor": false}, {"identifier": "addLessThanOrEqual", "parameters": "(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "modifiers": "protected", "return": "void", "signature": "void addLessThanOrEqual(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "full_signature": "protected void addLessThanOrEqual(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "class_method_signature": "LookupCriteriaGeneratorImpl.addLessThanOrEqual(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "testcase": false, "constructor": false}, {"identifier": "addLike", "parameters": "(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "modifiers": "protected", "return": "void", "signature": "void addLike(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "full_signature": "protected void addLike(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "class_method_signature": "LookupCriteriaGeneratorImpl.addLike(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "testcase": false, "constructor": false}, {"identifier": "addBetween", "parameters": "(Predicates criteria, String propertyName, String value1, String value2, boolean caseInsensitive)", "modifiers": "protected", "return": "void", "signature": "void addBetween(Predicates criteria, String propertyName, String value1, String value2, boolean caseInsensitive)", "full_signature": "protected void addBetween(Predicates criteria, String propertyName, String value1, String value2, boolean caseInsensitive)", "class_method_signature": "LookupCriteriaGeneratorImpl.addBetween(Predicates criteria, String propertyName, String value1, String value2, boolean caseInsensitive)", "testcase": false, "constructor": false}, {"identifier": "addNotLike", "parameters": "(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "modifiers": "protected", "return": "void", "signature": "void addNotLike(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "full_signature": "protected void addNotLike(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "class_method_signature": "LookupCriteriaGeneratorImpl.addNotLike(Predicates criteria, String propertyName, String propertyValue, boolean caseInsensitive)", "testcase": false, "constructor": false}, {"identifier": "parsePropertyName", "parameters": "(Predicates criteria, String fullyQualifiedPropertyName)", "modifiers": "protected", "return": "String", "signature": "String parsePropertyName(Predicates criteria, String fullyQualifiedPropertyName)", "full_signature": "protected String parsePropertyName(Predicates criteria, String fullyQualifiedPropertyName)", "class_method_signature": "LookupCriteriaGeneratorImpl.parsePropertyName(Predicates criteria, String fullyQualifiedPropertyName)", "testcase": false, "constructor": false}, {"identifier": "addInactivateableFromToCurrentCriteria", "parameters": "(Object example, String currentSearchValue, Predicates criteria, Map searchValues)", "modifiers": "protected", "return": "void", "signature": "void addInactivateableFromToCurrentCriteria(Object example, String currentSearchValue, Predicates criteria, Map searchValues)", "full_signature": "protected void addInactivateableFromToCurrentCriteria(Object example, String currentSearchValue, Predicates criteria, Map searchValues)", "class_method_signature": "LookupCriteriaGeneratorImpl.addInactivateableFromToCurrentCriteria(Object example, String currentSearchValue, Predicates criteria, Map searchValues)", "testcase": false, "constructor": false}], "file": "rice-framework/krad-service-impl/src/main/java/org/kuali/rice/krad/service/impl/LookupCriteriaGeneratorImpl.java"}, "focal_method": {"identifier": "generateCriteria", "parameters": "(Class<?> type, Map<String, String> formProps, boolean usePrimaryKeysOnly)", "modifiers": "@Override @Deprecated public", "return": "QueryByCriteria.Builder", "body": "@Override\n    @Deprecated\n    public QueryByCriteria.Builder generateCriteria(Class<?> type, Map<String, String> formProps, boolean usePrimaryKeysOnly) {\n        if (usePrimaryKeysOnly) {\n            return getCollectionCriteriaFromMapUsingPrimaryKeysOnly(type, instantiateLookupDataObject(type), formProps).toQueryBuilder();\n        } else {\n            return getCollectionCriteriaFromMap(type, instantiateLookupDataObject(type), formProps).toQueryBuilder();\n        }\n    }", "signature": "QueryByCriteria.Builder generateCriteria(Class<?> type, Map<String, String> formProps, boolean usePrimaryKeysOnly)", "full_signature": "@Override @Deprecated public QueryByCriteria.Builder generateCriteria(Class<?> type, Map<String, String> formProps, boolean usePrimaryKeysOnly)", "class_method_signature": "LookupCriteriaGeneratorImpl.generateCriteria(Class<?> type, Map<String, String> formProps, boolean usePrimaryKeysOnly)", "testcase": false, "constructor": false, "invocations": ["toQueryBuilder", "getCollectionCriteriaFromMapUsingPrimaryKeysOnly", "instantiateLookupDataObject", "toQueryBuilder", "getCollectionCriteriaFromMap", "instantiateLookupDataObject"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}