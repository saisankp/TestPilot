{"test_class": {"identifier": "IgniteDistributedModelBuilderTest", "superclass": "extends GridCommonAbstractTest", "interfaces": "", "fields": [{"original_string": "private static final int NODE_COUNT = 3;", "modifier": "private static final", "type": "int", "declarator": "NODE_COUNT = 3", "var_name": "NODE_COUNT"}, {"original_string": "private Ignite ignite;", "modifier": "private", "type": "Ignite", "declarator": "ignite", "var_name": "ignite"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/inference/builder/IgniteDistributedModelBuilderTest.java"}, "test_case": {"identifier": "testBuild", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuild() {\n        AsyncModelBuilder mdlBuilder = new IgniteDistributedModelBuilder(ignite, 1, 1);\n\n        Model<Integer, Future<Integer>> infMdl = mdlBuilder.build(\n            ModelBuilderTestUtil.getReader(),\n            ModelBuilderTestUtil.getParser()\n        );\n\n        // TODO: IGNITE-10250: Test hangs sometimes because of Ignite queue issue.\n        // for (int i = 0; i < 100; i++)\n        //    assertEquals(Integer.valueOf(i), infMdl.predict(i).get());\n    }", "signature": "void testBuild()", "full_signature": "@Test public void testBuild()", "class_method_signature": "IgniteDistributedModelBuilderTest.testBuild()", "testcase": true, "constructor": false, "invocations": ["build", "getReader", "getParser"]}, "focal_class": {"identifier": "IgniteDistributedModelBuilder", "superclass": "", "interfaces": "implements AsyncModelBuilder", "fields": [{"original_string": "private static final String INFERENCE_SERVICE_NAME_PATTERN = \"inference_service_%s\";", "modifier": "private static final", "type": "String", "declarator": "INFERENCE_SERVICE_NAME_PATTERN = \"inference_service_%s\"", "var_name": "INFERENCE_SERVICE_NAME_PATTERN"}, {"original_string": "private static final String INFERENCE_REQUEST_QUEUE_NAME_PATTERN = \"inference_queue_req_%s\";", "modifier": "private static final", "type": "String", "declarator": "INFERENCE_REQUEST_QUEUE_NAME_PATTERN = \"inference_queue_req_%s\"", "var_name": "INFERENCE_REQUEST_QUEUE_NAME_PATTERN"}, {"original_string": "private static final String INFERENCE_RESPONSE_QUEUE_NAME_PATTERN = \"inference_queue_res_%s\";", "modifier": "private static final", "type": "String", "declarator": "INFERENCE_RESPONSE_QUEUE_NAME_PATTERN = \"inference_queue_res_%s\"", "var_name": "INFERENCE_RESPONSE_QUEUE_NAME_PATTERN"}, {"original_string": "private static final int QUEUE_CAPACITY = 100;", "modifier": "private static final", "type": "int", "declarator": "QUEUE_CAPACITY = 100", "var_name": "QUEUE_CAPACITY"}, {"original_string": "private static final CollectionConfiguration queueCfg = new CollectionConfiguration();", "modifier": "private static final", "type": "CollectionConfiguration", "declarator": "queueCfg = new CollectionConfiguration()", "var_name": "queueCfg"}, {"original_string": "private final Ignite ignite;", "modifier": "private final", "type": "Ignite", "declarator": "ignite", "var_name": "ignite"}, {"original_string": "private final int instances;", "modifier": "private final", "type": "int", "declarator": "instances", "var_name": "instances"}, {"original_string": "private final int maxPerNode;", "modifier": "private final", "type": "int", "declarator": "maxPerNode", "var_name": "maxPerNode"}], "methods": [{"identifier": "IgniteDistributedModelBuilder", "parameters": "(Ignite ignite, int instances, int maxPerNode)", "modifiers": "public", "return": "", "signature": " IgniteDistributedModelBuilder(Ignite ignite, int instances, int maxPerNode)", "full_signature": "public  IgniteDistributedModelBuilder(Ignite ignite, int instances, int maxPerNode)", "class_method_signature": "IgniteDistributedModelBuilder.IgniteDistributedModelBuilder(Ignite ignite, int instances, int maxPerNode)", "testcase": false, "constructor": true}, {"identifier": "build", "parameters": "(\n        ModelReader reader, ModelParser<I, O, ?> parser)", "modifiers": "@Override public", "return": "Model<I, Future<O>>", "signature": "Model<I, Future<O>> build(\n        ModelReader reader, ModelParser<I, O, ?> parser)", "full_signature": "@Override public Model<I, Future<O>> build(\n        ModelReader reader, ModelParser<I, O, ?> parser)", "class_method_signature": "IgniteDistributedModelBuilder.build(\n        ModelReader reader, ModelParser<I, O, ?> parser)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/inference/builder/IgniteDistributedModelBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "(\n        ModelReader reader, ModelParser<I, O, ?> parser)", "modifiers": "@Override public", "return": "Model<I, Future<O>>", "body": "@Override public <I extends Serializable, O extends Serializable> Model<I, Future<O>> build(\n        ModelReader reader, ModelParser<I, O, ?> parser) {\n        return new DistributedInfModel<>(ignite, UUID.randomUUID().toString(), reader, parser, instances, maxPerNode);\n    }", "signature": "Model<I, Future<O>> build(\n        ModelReader reader, ModelParser<I, O, ?> parser)", "full_signature": "@Override public Model<I, Future<O>> build(\n        ModelReader reader, ModelParser<I, O, ?> parser)", "class_method_signature": "IgniteDistributedModelBuilder.build(\n        ModelReader reader, ModelParser<I, O, ?> parser)", "testcase": false, "constructor": false, "invocations": ["toString", "randomUUID"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}