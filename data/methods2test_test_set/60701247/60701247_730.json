{"test_class": {"identifier": "BottomUpNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static double EPS = 1e-5;", "modifier": "private final static", "type": "double", "declarator": "EPS = 1e-5", "var_name": "EPS"}], "file": "profilers/testSrc/com/android/tools/profilers/cpu/capturedetails/BottomUpNodeTest.java"}, "test_case": {"identifier": "testPartialRangeWithMixedTwoMethods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPartialRangeWithMixedTwoMethods() {\n    CaptureNode root = newNode(\"main\", 0, 100);\n\n    addChainSubtree(root, newNode(\"A\", 0, 100), newNode(\"A\", 0, 40),\n                    newNode(\"A\", 0, 20));\n    addChainSubtree(root.getChildren().get(0), newNode(\"B\", 45, 100), newNode(\"A\", 50, 70),\n                    newNode(\"B\", 55, 65));\n    addChainSubtree(root.getChildren().get(0).getChildren().get(0), newNode(\"B\", 21, 40),\n                    newNode(\"A\", 25, 28));\n\n    BottomUpNode node = new BottomUpNode(root);\n\n    BottomUpNode nodeA = node.getChildren().stream().filter(n -> n.getId().equals(\"A\")).findAny().orElseThrow(AssertionError::new);\n    nodeA.update(new Range(0, 100));\n    assertEquals(100, nodeA.getGlobalTotal(), EPS);\n    assertEquals(61, nodeA.getGlobalChildrenTotal(), EPS);\n\n    nodeA.update(new Range(21, 40));\n    assertEquals(19, nodeA.getGlobalTotal(), EPS);\n    assertEquals(16, nodeA.getGlobalChildrenTotal(), EPS);\n\n    nodeA.update(new Range(66, 71));\n    assertEquals(5, nodeA.getGlobalTotal(), EPS);\n    assertEquals(1, nodeA.getGlobalChildrenTotal(), EPS);\n  }", "signature": "void testPartialRangeWithMixedTwoMethods()", "full_signature": "@Test public void testPartialRangeWithMixedTwoMethods()", "class_method_signature": "BottomUpNodeTest.testPartialRangeWithMixedTwoMethods()", "testcase": true, "constructor": false, "invocations": ["newNode", "addChainSubtree", "newNode", "newNode", "newNode", "addChainSubtree", "get", "getChildren", "newNode", "newNode", "newNode", "addChainSubtree", "get", "getChildren", "get", "getChildren", "newNode", "newNode", "orElseThrow", "findAny", "filter", "stream", "getChildren", "equals", "getId", "update", "assertEquals", "getGlobalTotal", "assertEquals", "getGlobalChildrenTotal", "update", "assertEquals", "getGlobalTotal", "assertEquals", "getGlobalChildrenTotal", "update", "assertEquals", "getGlobalTotal", "assertEquals", "getGlobalChildrenTotal"]}, "focal_class": {"identifier": "BottomUpNode", "superclass": "extends CpuTreeNode<BottomUpNode>", "interfaces": "", "fields": [{"original_string": "private final List<CaptureNode> myPathNodes = new ArrayList<>();", "modifier": "private final", "type": "List<CaptureNode>", "declarator": "myPathNodes = new ArrayList<>()", "var_name": "myPathNodes"}, {"original_string": "private final boolean myIsRoot;", "modifier": "private final", "type": "boolean", "declarator": "myIsRoot", "var_name": "myIsRoot"}, {"original_string": "private boolean myChildrenBuilt;", "modifier": "private", "type": "boolean", "declarator": "myChildrenBuilt", "var_name": "myChildrenBuilt"}], "methods": [{"identifier": "BottomUpNode", "parameters": "(String id)", "modifiers": "private", "return": "", "signature": " BottomUpNode(String id)", "full_signature": "private  BottomUpNode(String id)", "class_method_signature": "BottomUpNode.BottomUpNode(String id)", "testcase": false, "constructor": true}, {"identifier": "BottomUpNode", "parameters": "(@NotNull CaptureNode node)", "modifiers": "public", "return": "", "signature": " BottomUpNode(@NotNull CaptureNode node)", "full_signature": "public  BottomUpNode(@NotNull CaptureNode node)", "class_method_signature": "BottomUpNode.BottomUpNode(@NotNull CaptureNode node)", "testcase": false, "constructor": true}, {"identifier": "addPathNode", "parameters": "(@NotNull CaptureNode node)", "modifiers": "private", "return": "void", "signature": "void addPathNode(@NotNull CaptureNode node)", "full_signature": "private void addPathNode(@NotNull CaptureNode node)", "class_method_signature": "BottomUpNode.addPathNode(@NotNull CaptureNode node)", "testcase": false, "constructor": false}, {"identifier": "buildChildren", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean buildChildren()", "full_signature": "public boolean buildChildren()", "class_method_signature": "BottomUpNode.buildChildren()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@NotNull Range range)", "modifiers": "@Override public", "return": "void", "signature": "void update(@NotNull Range range)", "full_signature": "@Override public void update(@NotNull Range range)", "class_method_signature": "BottomUpNode.update(@NotNull Range range)", "testcase": false, "constructor": false}, {"identifier": "findRootNode", "parameters": "(@NotNull CaptureNode node)", "modifiers": "@NotNull private static", "return": "CaptureNode", "signature": "CaptureNode findRootNode(@NotNull CaptureNode node)", "full_signature": "@NotNull private static CaptureNode findRootNode(@NotNull CaptureNode node)", "class_method_signature": "BottomUpNode.findRootNode(@NotNull CaptureNode node)", "testcase": false, "constructor": false}, {"identifier": "getMethodModel", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "CaptureNodeModel", "signature": "CaptureNodeModel getMethodModel()", "full_signature": "@NotNull @Override public CaptureNodeModel getMethodModel()", "class_method_signature": "BottomUpNode.getMethodModel()", "testcase": false, "constructor": false}, {"identifier": "getFilterType", "parameters": "()", "modifiers": "@Override public", "return": "CaptureNode.FilterType", "signature": "CaptureNode.FilterType getFilterType()", "full_signature": "@Override public CaptureNode.FilterType getFilterType()", "class_method_signature": "BottomUpNode.getFilterType()", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/cpu/capturedetails/BottomUpNode.java"}, "focal_method": {"identifier": "update", "parameters": "(@NotNull Range range)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void update(@NotNull Range range) {\n    // how much time was spent in this call stack path, and in the functions it called\n    myGlobalTotal = 0;\n    // how much time was spent doing work directly in this call stack path\n    double self = 0;\n\n    // The node that is at the top of the call stack, e.g if the call stack looks like B [0..30] -> B [1..20],\n    // then the second method can't be outerSoFarByParent.\n    // It's used to exclude nodes which aren't at the top of the\n    // call stack from the total time calculation.\n    // When multiple threads with the same ID are selected, the nodes are merged. When this happens nodes may be interlaced between\n    // each of the threads. As such we keep a mapping of outer so far by parents to keep the book keeping done properly.\n    HashMap<CaptureNode, CaptureNode> outerSoFarByParent = new HashMap<>();\n\n    // myNodes is sorted by CaptureNode#getStart() in increasing order,\n    // if they are equal then ancestor comes first\n    for (CaptureNode node : myNodes) {\n      // We use the root node to distinguish if two nodes share the same tree. In the event of multi-select we want to compute the bottom\n      // up calculation independently for each tree then sum them after the fact.\n      CaptureNode root = findRootNode(node);\n      CaptureNode outerSoFar = outerSoFarByParent.getOrDefault(root, null);\n      if (outerSoFar == null || node.getEnd() > outerSoFar.getEnd()) {\n        if (outerSoFar != null) {\n          // |outerSoFarByParent| is at the top of the call stack\n          myGlobalTotal += getIntersection(range, outerSoFar, ClockType.GLOBAL);\n        }\n        outerSoFarByParent.put(root, node);\n      }\n\n      self += getIntersection(range, node, ClockType.GLOBAL);\n      for (CaptureNode child : node.getChildren()) {\n        self -= getIntersection(range, child, ClockType.GLOBAL);\n      }\n    }\n\n    for(CaptureNode outerSoFar : outerSoFarByParent.values()) {\n      // |outerSoFarByParent| is at the top of the call stack\n      myGlobalTotal += getIntersection(range, outerSoFar, ClockType.GLOBAL);\n    }\n    myGlobalChildrenTotal = myGlobalTotal - self;\n  }", "signature": "void update(@NotNull Range range)", "full_signature": "@Override public void update(@NotNull Range range)", "class_method_signature": "BottomUpNode.update(@NotNull Range range)", "testcase": false, "constructor": false, "invocations": ["findRootNode", "getOrDefault", "getEnd", "getEnd", "getIntersection", "put", "getIntersection", "getChildren", "getIntersection", "values", "getIntersection"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}