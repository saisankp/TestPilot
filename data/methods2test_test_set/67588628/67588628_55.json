{"test_class": {"identifier": "JavaCompilerFieldWriterFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final JavaCompilerFacade compilerFacade = new JavaCompilerFacade(\n            JavaCompilerBeanPropertyReaderFactory.class.getClassLoader());", "modifier": "private final", "type": "JavaCompilerFacade", "declarator": "compilerFacade = new JavaCompilerFacade(\n            JavaCompilerBeanPropertyReaderFactory.class.getClassLoader())", "var_name": "compilerFacade"}, {"original_string": "private final Reflections reflections = new DefaultReflections();", "modifier": "private final", "type": "Reflections", "declarator": "reflections = new DefaultReflections()", "var_name": "reflections"}, {"original_string": "private FieldWriterFactory fallback = new ReflectionFieldWriterFactory(reflections);", "modifier": "private", "type": "FieldWriterFactory", "declarator": "fallback = new ReflectionFieldWriterFactory(reflections)", "var_name": "fallback"}, {"original_string": "private FieldWriterFactory factory = new JavaCompilerFieldWriterFactory(compilerFacade, reflections, fallback);", "modifier": "private", "type": "FieldWriterFactory", "declarator": "factory = new JavaCompilerFieldWriterFactory(compilerFacade, reflections, fallback)", "var_name": "factory"}], "file": "artemis-core/src/test/java/org/jnosql/artemis/reflection/JavaCompilerFieldWriterFactoryTest.java"}, "test_case": {"identifier": "shouldCreateFieldWriter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateFieldWriter() {\n        Foo foo = new Foo();\n        foo.setBar(\"bar\");\n        FieldWriter writer = factory.apply(Foo.class.getDeclaredFields()[0]);\n        Assertions.assertNotNull(writer);\n        writer.write(foo, \"bar\");\n        Assertions.assertEquals(\"bar\", foo.getBar());\n    }", "signature": "void shouldCreateFieldWriter()", "full_signature": "@Test public void shouldCreateFieldWriter()", "class_method_signature": "JavaCompilerFieldWriterFactoryTest.shouldCreateFieldWriter()", "testcase": true, "constructor": false, "invocations": ["setBar", "apply", "getDeclaredFields", "assertNotNull", "write", "assertEquals", "getBar"]}, "focal_class": {"identifier": "JavaCompilerFieldWriterFactory", "superclass": "", "interfaces": "implements FieldWriterFactory", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(JavaCompilerFieldWriterFactory.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(JavaCompilerFieldWriterFactory.class.getName())", "var_name": "LOGGER"}, {"original_string": "private static final String TEMPLATE_FILE = \"FieldWriter.template\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_FILE = \"FieldWriter.template\"", "var_name": "TEMPLATE_FILE"}, {"original_string": "private static final String TEMPLATE = TemplateReader.INSTANCE.apply(TEMPLATE_FILE);", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE = TemplateReader.INSTANCE.apply(TEMPLATE_FILE)", "var_name": "TEMPLATE"}, {"original_string": "private final JavaCompilerFacade compilerFacade;", "modifier": "private final", "type": "JavaCompilerFacade", "declarator": "compilerFacade", "var_name": "compilerFacade"}, {"original_string": "private final Reflections reflections;", "modifier": "private final", "type": "Reflections", "declarator": "reflections", "var_name": "reflections"}, {"original_string": "private final FieldWriterFactory fallback;", "modifier": "private final", "type": "FieldWriterFactory", "declarator": "fallback", "var_name": "fallback"}], "methods": [{"identifier": "JavaCompilerFieldWriterFactory", "parameters": "(JavaCompilerFacade compilerFacade, Reflections reflections, FieldWriterFactory fallback)", "modifiers": "", "return": "", "signature": " JavaCompilerFieldWriterFactory(JavaCompilerFacade compilerFacade, Reflections reflections, FieldWriterFactory fallback)", "full_signature": "  JavaCompilerFieldWriterFactory(JavaCompilerFacade compilerFacade, Reflections reflections, FieldWriterFactory fallback)", "class_method_signature": "JavaCompilerFieldWriterFactory.JavaCompilerFieldWriterFactory(JavaCompilerFacade compilerFacade, Reflections reflections, FieldWriterFactory fallback)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(Field field)", "modifiers": "@Override public", "return": "FieldWriter", "signature": "FieldWriter apply(Field field)", "full_signature": "@Override public FieldWriter apply(Field field)", "class_method_signature": "JavaCompilerFieldWriterFactory.apply(Field field)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(Class<?> declaringClass, Class<?> type)", "modifiers": "private", "return": "Function<String, FieldWriter>", "signature": "Function<String, FieldWriter> compile(Class<?> declaringClass, Class<?> type)", "full_signature": "private Function<String, FieldWriter> compile(Class<?> declaringClass, Class<?> type)", "class_method_signature": "JavaCompilerFieldWriterFactory.compile(Class<?> declaringClass, Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getMethodName", "parameters": "(Class<?> declaringClass, Field field)", "modifiers": "private", "return": "Optional<String>", "signature": "Optional<String> getMethodName(Class<?> declaringClass, Field field)", "full_signature": "private Optional<String> getMethodName(Class<?> declaringClass, Field field)", "class_method_signature": "JavaCompilerFieldWriterFactory.getMethodName(Class<?> declaringClass, Field field)", "testcase": false, "constructor": false}], "file": "artemis-core/src/main/java/org/jnosql/artemis/reflection/JavaCompilerFieldWriterFactory.java"}, "focal_method": {"identifier": "apply", "parameters": "(Field field)", "modifiers": "@Override public", "return": "FieldWriter", "body": "@Override\n    public FieldWriter apply(Field field) {\n\n        Class<?> declaringClass = field.getDeclaringClass();\n        Optional<String> methodName = getMethodName(declaringClass, field);\n\n        FieldWriter fieldWriter = methodName.map(compile(declaringClass, field.getType()))\n                .orElseGet(() -> fallback.apply(field));\n\n        return fieldWriter;\n    }", "signature": "FieldWriter apply(Field field)", "full_signature": "@Override public FieldWriter apply(Field field)", "class_method_signature": "JavaCompilerFieldWriterFactory.apply(Field field)", "testcase": false, "constructor": false, "invocations": ["getDeclaringClass", "getMethodName", "orElseGet", "map", "compile", "getType", "apply"]}, "repository": {"repo_id": 67588628, "url": "https://github.com/eclipse/jnosql-artemis", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 2612, "license": "licensed"}}