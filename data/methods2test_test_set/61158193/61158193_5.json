{"test_class": {"identifier": "GenericDAOTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static RethinkDB r = RethinkDB.r;", "modifier": "private static", "type": "RethinkDB", "declarator": "r = RethinkDB.r", "var_name": "r"}, {"original_string": "private GenericDAO<TestModel, String> dao;", "modifier": "private", "type": "GenericDAO<TestModel, String>", "declarator": "dao", "var_name": "dao"}], "file": "rethinkdb-orm/src/test/java/de/jakobjarosch/rethinkdb/orm/dao/GenericDAOTest.java"}, "test_case": {"identifier": "delete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void delete() {\n        TestModel model = new TestModel(\"1\");\n        dao.create(model);\n\n        dao.delete(\"1\");\n\n        assertThat(dao.read(\"1\")).isNotPresent();\n    }", "signature": "void delete()", "full_signature": "@Test public void delete()", "class_method_signature": "GenericDAOTest.delete()", "testcase": true, "constructor": false, "invocations": ["create", "delete", "isNotPresent", "assertThat", "read"]}, "focal_class": {"identifier": "GenericDAO", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final RethinkDB R = RethinkDB.r;", "modifier": "private static final", "type": "RethinkDB", "declarator": "R = RethinkDB.r", "var_name": "R"}, {"original_string": "private static final ModelMapper MAPPER = new ModelMapper();", "modifier": "private static final", "type": "ModelMapper", "declarator": "MAPPER = new ModelMapper()", "var_name": "MAPPER"}, {"original_string": "private final Provider<Connection> connectionProvider;", "modifier": "private final", "type": "Provider<Connection>", "declarator": "connectionProvider", "var_name": "connectionProvider"}, {"original_string": "private final Class<T> clazz;", "modifier": "private final", "type": "Class<T>", "declarator": "clazz", "var_name": "clazz"}, {"original_string": "private final String tableName;", "modifier": "private final", "type": "String", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "private final String primaryKey;", "modifier": "private final", "type": "String", "declarator": "primaryKey", "var_name": "primaryKey"}, {"original_string": "private final Set<IndexModel> indices = new HashSet<>();", "modifier": "private final", "type": "Set<IndexModel>", "declarator": "indices = new HashSet<>()", "var_name": "indices"}], "methods": [{"identifier": "GenericDAO", "parameters": "(Provider<Connection> connection, Class<T> clazz, String tableName, String primaryKey)", "modifiers": "public", "return": "", "signature": " GenericDAO(Provider<Connection> connection, Class<T> clazz, String tableName, String primaryKey)", "full_signature": "public  GenericDAO(Provider<Connection> connection, Class<T> clazz, String tableName, String primaryKey)", "class_method_signature": "GenericDAO.GenericDAO(Provider<Connection> connection, Class<T> clazz, String tableName, String primaryKey)", "testcase": false, "constructor": true}, {"identifier": "addIndex", "parameters": "(boolean geo, String fields)", "modifiers": "protected", "return": "void", "signature": "void addIndex(boolean geo, String fields)", "full_signature": "protected void addIndex(boolean geo, String fields)", "class_method_signature": "GenericDAO.addIndex(boolean geo, String fields)", "testcase": false, "constructor": false}, {"identifier": "initTable", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initTable()", "full_signature": "public void initTable()", "class_method_signature": "GenericDAO.initTable()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(T model)", "modifiers": "public", "return": "void", "signature": "void create(T model)", "full_signature": "public void create(T model)", "class_method_signature": "GenericDAO.create(T model)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(PK id)", "modifiers": "public", "return": "Optional<T>", "signature": "Optional<T> read(PK id)", "full_signature": "public Optional<T> read(PK id)", "class_method_signature": "GenericDAO.read(PK id)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "()", "modifiers": "public", "return": "DAOIterator<T>", "signature": "DAOIterator<T> read()", "full_signature": "public DAOIterator<T> read()", "class_method_signature": "GenericDAO.read()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(Function<Table, ReqlExpr> filter)", "modifiers": "public", "return": "DAOIterator<T>", "signature": "DAOIterator<T> read(Function<Table, ReqlExpr> filter)", "full_signature": "public DAOIterator<T> read(Function<Table, ReqlExpr> filter)", "class_method_signature": "GenericDAO.read(Function<Table, ReqlExpr> filter)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(PK id, T model)", "modifiers": "public", "return": "void", "signature": "void update(PK id, T model)", "full_signature": "public void update(PK id, T model)", "class_method_signature": "GenericDAO.update(PK id, T model)", "testcase": false, "constructor": false}, {"identifier": "updateNonAtomic", "parameters": "(PK id, T model)", "modifiers": "public", "return": "void", "signature": "void updateNonAtomic(PK id, T model)", "full_signature": "public void updateNonAtomic(PK id, T model)", "class_method_signature": "GenericDAO.updateNonAtomic(PK id, T model)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(PK id)", "modifiers": "public", "return": "void", "signature": "void delete(PK id)", "full_signature": "public void delete(PK id)", "class_method_signature": "GenericDAO.delete(PK id)", "testcase": false, "constructor": false}, {"identifier": "changes", "parameters": "()", "modifiers": "public", "return": "Observable<ChangeFeedElement<T>>", "signature": "Observable<ChangeFeedElement<T>> changes()", "full_signature": "public Observable<ChangeFeedElement<T>> changes()", "class_method_signature": "GenericDAO.changes()", "testcase": false, "constructor": false}, {"identifier": "changes", "parameters": "(Function<Table, ReqlExpr> filter)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Observable<ChangeFeedElement<T>>", "signature": "Observable<ChangeFeedElement<T>> changes(Function<Table, ReqlExpr> filter)", "full_signature": "@SuppressWarnings(\"unchecked\") public Observable<ChangeFeedElement<T>> changes(Function<Table, ReqlExpr> filter)", "class_method_signature": "GenericDAO.changes(Function<Table, ReqlExpr> filter)", "testcase": false, "constructor": false}, {"identifier": "hasTable", "parameters": "(Connection connection, String table)", "modifiers": "private", "return": "boolean", "signature": "boolean hasTable(Connection connection, String table)", "full_signature": "private boolean hasTable(Connection connection, String table)", "class_method_signature": "GenericDAO.hasTable(Connection connection, String table)", "testcase": false, "constructor": false}, {"identifier": "hasIndex", "parameters": "(Connection connection, String indexName)", "modifiers": "private", "return": "boolean", "signature": "boolean hasIndex(Connection connection, String indexName)", "full_signature": "private boolean hasIndex(Connection connection, String indexName)", "class_method_signature": "GenericDAO.hasIndex(Connection connection, String indexName)", "testcase": false, "constructor": false}, {"identifier": "indexFieldsToReQL", "parameters": "(ReqlExpr row, String[] fields)", "modifiers": "private", "return": "List", "signature": "List indexFieldsToReQL(ReqlExpr row, String[] fields)", "full_signature": "private List indexFieldsToReQL(ReqlExpr row, String[] fields)", "class_method_signature": "GenericDAO.indexFieldsToReQL(ReqlExpr row, String[] fields)", "testcase": false, "constructor": false}, {"identifier": "mapChangeFeedElement", "parameters": "(Map<?, Map<?, ?>> map)", "modifiers": "private", "return": "ChangeFeedElement<T>", "signature": "ChangeFeedElement<T> mapChangeFeedElement(Map<?, Map<?, ?>> map)", "full_signature": "private ChangeFeedElement<T> mapChangeFeedElement(Map<?, Map<?, ?>> map)", "class_method_signature": "GenericDAO.mapChangeFeedElement(Map<?, Map<?, ?>> map)", "testcase": false, "constructor": false}], "file": "rethinkdb-orm/src/main/java/de/jakobjarosch/rethinkdb/orm/dao/GenericDAO.java"}, "focal_method": {"identifier": "delete", "parameters": "(PK id)", "modifiers": "public", "return": "void", "body": "public void delete(PK id) {\n        try (Connection connection = connectionProvider.get()) {\n            R.table(tableName).get(id).delete().run(connection);\n        }\n    }", "signature": "void delete(PK id)", "full_signature": "public void delete(PK id)", "class_method_signature": "GenericDAO.delete(PK id)", "testcase": false, "constructor": false, "invocations": ["get", "run", "delete", "get", "table"]}, "repository": {"repo_id": 61158193, "url": "https://github.com/foxylion/rethinkdb-orm-java", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 107, "license": "licensed"}}