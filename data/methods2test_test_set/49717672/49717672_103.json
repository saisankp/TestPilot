{"test_class": {"identifier": "PersistentHighTest", "superclass": "extends RobolectricTestWithConfig", "interfaces": "", "fields": [{"original_string": "private static long START_TIME = JoH.tsl() - Constants.HOUR_IN_MS * 4;", "modifier": "private static", "type": "long", "declarator": "START_TIME = JoH.tsl() - Constants.HOUR_IN_MS * 4", "var_name": "START_TIME"}, {"original_string": "private static final double HIGH_MARK = 170;", "modifier": "private static final", "type": "double", "declarator": "HIGH_MARK = 170", "var_name": "HIGH_MARK"}], "file": "app/src/test/java/com/eveningoutpost/dexdrip/evaluators/PersistentHighTest.java"}, "test_case": {"identifier": "dataQualityCheckTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void dataQualityCheckTest() {\n\n        assertWithMessage(\"No sensor invalid time should fail\").that(PersistentHigh.dataQualityCheck(1000, HIGH_MARK)).isFalse();\n        assertWithMessage(\"No sensor ok time should fail\").that(PersistentHigh.dataQualityCheck(START_TIME, HIGH_MARK)).isFalse();\n        assertWithMessage(\"No sensor ok time should fail 2\").that(PersistentHigh.dataQualityCheck(JoH.tsl(), HIGH_MARK)).isFalse();\n        Sensor.create(1005);\n        assertWithMessage(\"Predating sensor should fail\").that(PersistentHigh.dataQualityCheck(1000, HIGH_MARK)).isFalse();\n        assertWithMessage(\"Post sensor start no data should fail\").that(PersistentHigh.dataQualityCheck(JoH.tsl(), HIGH_MARK)).isFalse();\n\n        Sensor.create(START_TIME);\n        // various all high time slices\n        for (int i = 0; i < (12 * 4); i++) {\n            final long timestamp = START_TIME + Constants.MINUTE_IN_MS * 5 * i;\n            final BgReading bgr = BgReading.bgReadingInsertFromG5(400, timestamp);\n            assertWithMessage(\"Test result A: \" + i + \" \" + JoH.dateTimeText(timestamp) + \" different to expected\")\n                    .that(PersistentHigh.dataQualityCheck(START_TIME + Constants.MINUTE_IN_MS * 10, HIGH_MARK))\n                    .isEqualTo(i > 16);\n        }\n\n        START_TIME++;\n        Sensor.create(START_TIME);\n        // single dipped point in sequence after a point we might have succeeded\n        for (int i = 0; i < (12 * 4); i++) {\n            final long timestamp = START_TIME + Constants.MINUTE_IN_MS * 5 * i;\n            final BgReading bgr = BgReading.bgReadingInsertFromG5(i == 20 ? 100 : 400, timestamp);\n            assertWithMessage(\"Test result C: \" + i + \" \" + JoH.dateTimeText(timestamp) + \" different to expected\")\n                    .that(PersistentHigh.dataQualityCheck(START_TIME + Constants.MINUTE_IN_MS * 10, HIGH_MARK))\n                    .isEqualTo(i > 16 && i < 20);\n        }\n\n        START_TIME++;\n        Sensor.create(START_TIME);\n        // single dipped point in sequence before we would succeed\n        for (int i = 0; i < (12 * 4); i++) {\n            final long timestamp = START_TIME + Constants.MINUTE_IN_MS * 5 * i;\n            final BgReading bgr = BgReading.bgReadingInsertFromG5(i == 8 ? 100 : 400, timestamp);\n            assertWithMessage(\"Test result D: \" + i + \" \" + JoH.dateTimeText(timestamp) + \" different to expected\")\n                    .that(PersistentHigh.dataQualityCheck(START_TIME + Constants.MINUTE_IN_MS * 10, HIGH_MARK))\n                    .isFalse();\n        }\n\n        // Extract all log messages for tag\n        List<String> logMessages = ShadowLog.getLogsForTag(\"PersistentHigh\").stream()\n                .map(log -> log.msg)\n                .collect(Collectors.toList());\n\n        // Assert on log output\n        assertThat(logMessages).contains(\"Cannot raise persistent high alert as readings frequency is: 3 hours\");\n\n        // Print all logs\n        printLogs(\"PersistentHigh\");\n    }", "signature": "void dataQualityCheckTest()", "full_signature": "@Test public void dataQualityCheckTest()", "class_method_signature": "PersistentHighTest.dataQualityCheckTest()", "testcase": true, "constructor": false, "invocations": ["isFalse", "that", "assertWithMessage", "dataQualityCheck", "isFalse", "that", "assertWithMessage", "dataQualityCheck", "isFalse", "that", "assertWithMessage", "dataQualityCheck", "tsl", "create", "isFalse", "that", "assertWithMessage", "dataQualityCheck", "isFalse", "that", "assertWithMessage", "dataQualityCheck", "tsl", "create", "bgReadingInsertFromG5", "isEqualTo", "that", "assertWithMessage", "dateTimeText", "dataQualityCheck", "create", "bgReadingInsertFromG5", "isEqualTo", "that", "assertWithMessage", "dateTimeText", "dataQualityCheck", "create", "bgReadingInsertFromG5", "isFalse", "that", "assertWithMessage", "dateTimeText", "dataQualityCheck", "collect", "map", "stream", "getLogsForTag", "toList", "contains", "assertThat", "printLogs"]}, "focal_class": {"identifier": "PersistentHigh", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = PersistentHigh.class.getSimpleName();", "modifier": "private static final", "type": "String", "declarator": "TAG = PersistentHigh.class.getSimpleName()", "var_name": "TAG"}, {"original_string": "private static final String PERSISTENT_HIGH_SINCE = \"persistent_high_since\";", "modifier": "private static final", "type": "String", "declarator": "PERSISTENT_HIGH_SINCE = \"persistent_high_since\"", "var_name": "PERSISTENT_HIGH_SINCE"}], "methods": [{"identifier": "checkForPersistentHigh", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean checkForPersistentHigh()", "full_signature": "public static boolean checkForPersistentHigh()", "class_method_signature": "PersistentHigh.checkForPersistentHigh()", "testcase": false, "constructor": false}, {"identifier": "dataQualityCheck", "parameters": "(final long since, final double highMarkMgDl)", "modifiers": "public static", "return": "boolean", "signature": "boolean dataQualityCheck(final long since, final double highMarkMgDl)", "full_signature": "public static boolean dataQualityCheck(final long since, final double highMarkMgDl)", "class_method_signature": "PersistentHigh.dataQualityCheck(final long since, final double highMarkMgDl)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/eveningoutpost/dexdrip/evaluators/PersistentHigh.java"}, "focal_method": {"identifier": "dataQualityCheck", "parameters": "(final long since, final double highMarkMgDl)", "modifiers": "public static", "return": "boolean", "body": "public static boolean dataQualityCheck(final long since, final double highMarkMgDl) {\n\n        final Sensor sensor = Sensor.currentSensor();\n        if (sensor == null) {\n            Log.e(TAG, \"Cannot raise persistent high alert as no active sensor!\");\n            return false;\n        }\n        if (since < sensor.started_at) {\n            Log.e(TAG, \"Cannot raise persistent high alert as high time pre-dates sensor start\");\n            return false;\n        }\n        final long duration = msSince(since);\n        if (duration > Constants.DAY_IN_MS || duration < 0) {\n            Log.e(TAG, \"Cannot raise persistent high alert as duration doesn't make sense: \" + JoH.niceTimeScalar(duration));\n            return false;\n        }\n\n        final List<BgReading> readings = BgReading.latestForSensorAsc(2000, since, JoH.tsl(), Home.get_follower());\n        if (readings == null) {\n            Log.e(TAG, \"Cannot raise persistent high alert as there are no readings for this sensor!\");\n            return false;\n        }\n\n        final int numberOfReadings = readings.size();\n\n        if (numberOfReadings == 0) {\n            Log.e(TAG, \"Cannot raise persistent high alert as there are 0 readings for this sensor!\");\n            return false;\n        }\n\n        final long frequency = duration / numberOfReadings;\n        //Log.d(TAG, \"Frequency Calculated as: \" + frequency);\n        if (frequency > MINUTE_IN_MS * 15) {\n            Log.e(TAG, \"Cannot raise persistent high alert as readings frequency is: \" + niceTimeScalar(frequency));\n            return false;\n        }\n\n        for (final BgReading bgr : readings) {\n            if (bgr.getDg_mgdl() < highMarkMgDl) {\n                Log.e(TAG, \"High not persistent as reading at: \" + JoH.dateTimeText(bgr.timestamp) + \" does not exceed \" + JoH.qs(highMarkMgDl) + \" mgdl / high mark\");\n                return false;\n            }\n        }\n\n        return true;\n\n    }", "signature": "boolean dataQualityCheck(final long since, final double highMarkMgDl)", "full_signature": "public static boolean dataQualityCheck(final long since, final double highMarkMgDl)", "class_method_signature": "PersistentHigh.dataQualityCheck(final long since, final double highMarkMgDl)", "testcase": false, "constructor": false, "invocations": ["currentSensor", "e", "e", "msSince", "e", "niceTimeScalar", "latestForSensorAsc", "tsl", "get_follower", "e", "size", "e", "e", "niceTimeScalar", "getDg_mgdl", "e", "dateTimeText", "qs"]}, "repository": {"repo_id": 49717672, "url": "https://github.com/jamorham/xDrip-plus", "stars": 199, "created": "1/15/2016 12:31:22 PM +00:00", "updates": "2020-01-26T20:46:33+00:00", "fork": "False", "license": "licensed"}}