{"test_class": {"identifier": "TestExecutorServiceUtils", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-common/src/test/java/com/fireflysource/common/concurrent/TestExecutorServiceUtils.java"}, "test_case": {"identifier": "testShutdownAndAwaitTermination", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testShutdownAndAwaitTermination() {\n        int threadNum = 2;\n        int count = 10;\n        long taskTime = 500L;\n        long maxTime = taskTime * count / threadNum;\n\n        ExecutorService pool = Executors.newFixedThreadPool(threadNum);\n        AtomicInteger maxTask = new AtomicInteger(count);\n        for (int i = 0; i < count; i++) {\n            pool.submit(() -> {\n                try {\n                    Thread.sleep(taskTime);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(\"task complete. \" + maxTask.getAndDecrement());\n            });\n        }\n        shutdownAndAwaitTermination(pool, maxTime + 100, TimeUnit.MILLISECONDS);\n        assertEquals(0, maxTask.get());\n    }", "signature": "void testShutdownAndAwaitTermination()", "full_signature": "@Test void testShutdownAndAwaitTermination()", "class_method_signature": "TestExecutorServiceUtils.testShutdownAndAwaitTermination()", "testcase": true, "constructor": false, "invocations": ["newFixedThreadPool", "submit", "sleep", "printStackTrace", "println", "getAndDecrement", "shutdownAndAwaitTermination", "assertEquals", "get"]}, "focal_class": {"identifier": "ExecutorServiceUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "shutdownAndAwaitTermination", "parameters": "(ExecutorService pool, long timeout, TimeUnit unit)", "modifiers": "public static", "return": "void", "signature": "void shutdownAndAwaitTermination(ExecutorService pool, long timeout, TimeUnit unit)", "full_signature": "public static void shutdownAndAwaitTermination(ExecutorService pool, long timeout, TimeUnit unit)", "class_method_signature": "ExecutorServiceUtils.shutdownAndAwaitTermination(ExecutorService pool, long timeout, TimeUnit unit)", "testcase": false, "constructor": false}], "file": "firefly-common/src/main/java/com/fireflysource/common/concurrent/ExecutorServiceUtils.java"}, "focal_method": {"identifier": "shutdownAndAwaitTermination", "parameters": "(ExecutorService pool, long timeout, TimeUnit unit)", "modifiers": "public static", "return": "void", "body": "public static void shutdownAndAwaitTermination(ExecutorService pool, long timeout, TimeUnit unit) {\n        pool.shutdown(); // Disable new tasks from being submitted\n        try {\n            // Wait a while for existing tasks to terminate\n            if (!pool.awaitTermination(timeout, unit)) {\n                pool.shutdownNow(); // Cancel currently executing tasks\n                // Wait a while for tasks to respond to being cancelled\n                if (!pool.awaitTermination(timeout, unit))\n                    System.err.println(\"Pool did not terminate\");\n            }\n        } catch (InterruptedException ie) {\n            // (Re-)Cancel if current thread also interrupted\n            pool.shutdownNow();\n            // Preserve interrupt status\n            Thread.currentThread().interrupt();\n        }\n    }", "signature": "void shutdownAndAwaitTermination(ExecutorService pool, long timeout, TimeUnit unit)", "full_signature": "public static void shutdownAndAwaitTermination(ExecutorService pool, long timeout, TimeUnit unit)", "class_method_signature": "ExecutorServiceUtils.shutdownAndAwaitTermination(ExecutorService pool, long timeout, TimeUnit unit)", "testcase": false, "constructor": false, "invocations": ["shutdown", "awaitTermination", "shutdownNow", "awaitTermination", "println", "shutdownNow", "interrupt", "currentThread"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}