{"test_class": {"identifier": "SimpleTokenManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "SimpleTokenManager manager;", "modifier": "", "type": "SimpleTokenManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "static final String MOBI_TOKEN = \"mobi\";", "modifier": "static final", "type": "String", "declarator": "MOBI_TOKEN = \"mobi\"", "var_name": "MOBI_TOKEN"}, {"original_string": "static final String OTHER_TOKEN = \"other\";", "modifier": "static final", "type": "String", "declarator": "OTHER_TOKEN = \"other\"", "var_name": "OTHER_TOKEN"}, {"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "@Mock\n    private MobiTokenVerifier mobiTokenVerifier;", "modifier": "@Mock\n    private", "type": "MobiTokenVerifier", "declarator": "mobiTokenVerifier", "var_name": "mobiTokenVerifier"}, {"original_string": "@Mock\n    private TokenVerifier otherVerifier;", "modifier": "@Mock\n    private", "type": "TokenVerifier", "declarator": "otherVerifier", "var_name": "otherVerifier"}, {"original_string": "@Mock\n    private SignedJWT jwt;", "modifier": "@Mock\n    private", "type": "SignedJWT", "declarator": "jwt", "var_name": "jwt"}, {"original_string": "@Mock\n    private ContainerRequestContext requestContext;", "modifier": "@Mock\n    private", "type": "ContainerRequestContext", "declarator": "requestContext", "var_name": "requestContext"}, {"original_string": "@Mock\n    private HttpServletRequest servletRequest;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "servletRequest", "var_name": "servletRequest"}, {"original_string": "@Mock\n    private Cookie servletCookie;", "modifier": "@Mock\n    private", "type": "Cookie", "declarator": "servletCookie", "var_name": "servletCookie"}, {"original_string": "@Mock\n    private javax.ws.rs.core.Cookie cookie;", "modifier": "@Mock\n    private", "type": "javax.ws.rs.core.Cookie", "declarator": "cookie", "var_name": "cookie"}], "file": "com.mobi.jaas/src/test/java/com/mobi/jaas/token/SimpleTokenManagerTest.java"}, "test_case": {"identifier": "createSecureTokenCookieTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createSecureTokenCookieTest() {\n        Cookie result = manager.createSecureTokenCookie(jwt);\n        assertEquals(SimpleTokenManager.TOKEN_NAME, result.getName());\n        assertEquals(MOBI_TOKEN, result.getValue());\n        assertTrue(result.getSecure());\n        assertEquals(\"/\", result.getPath());\n    }", "signature": "void createSecureTokenCookieTest()", "full_signature": "@Test public void createSecureTokenCookieTest()", "class_method_signature": "SimpleTokenManagerTest.createSecureTokenCookieTest()", "testcase": true, "constructor": false, "invocations": ["createSecureTokenCookie", "assertEquals", "getName", "assertEquals", "getValue", "assertTrue", "getSecure", "assertEquals", "getPath"]}, "focal_class": {"identifier": "SimpleTokenManager", "superclass": "", "interfaces": "implements TokenManager", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SimpleTokenManager.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SimpleTokenManager.class.getName())", "var_name": "LOG"}, {"original_string": "static final String TOKEN_NAME = \"mobi_web_token\";", "modifier": "static final", "type": "String", "declarator": "TOKEN_NAME = \"mobi_web_token\"", "var_name": "TOKEN_NAME"}, {"original_string": "static final String COMPONENT_NAME = \"com.mobi.jaas.SimpleTokenManager\";", "modifier": "static final", "type": "String", "declarator": "COMPONENT_NAME = \"com.mobi.jaas.SimpleTokenManager\"", "var_name": "COMPONENT_NAME"}, {"original_string": "private static final long ONE_DAY_SEC = 24 * 60 * 60;", "modifier": "private static final", "type": "long", "declarator": "ONE_DAY_SEC = 24 * 60 * 60", "var_name": "ONE_DAY_SEC"}, {"original_string": "private static final long ONE_DAY_MS = ONE_DAY_SEC * 1000;", "modifier": "private static final", "type": "long", "declarator": "ONE_DAY_MS = ONE_DAY_SEC * 1000", "var_name": "ONE_DAY_MS"}, {"original_string": "private long tokenDuration;", "modifier": "private", "type": "long", "declarator": "tokenDuration", "var_name": "tokenDuration"}, {"original_string": "static final String ISSUER = \"http://mobi.com/\";", "modifier": "static final", "type": "String", "declarator": "ISSUER = \"http://mobi.com/\"", "var_name": "ISSUER"}, {"original_string": "static final String ANON_SCOPE = \"self anon\";", "modifier": "static final", "type": "String", "declarator": "ANON_SCOPE = \"self anon\"", "var_name": "ANON_SCOPE"}, {"original_string": "static final String AUTH_SCOPE = \"self /*\";", "modifier": "static final", "type": "String", "declarator": "AUTH_SCOPE = \"self /*\"", "var_name": "AUTH_SCOPE"}, {"original_string": "private MobiTokenVerifier mobiTokenVerifier;", "modifier": "private", "type": "MobiTokenVerifier", "declarator": "mobiTokenVerifier", "var_name": "mobiTokenVerifier"}, {"original_string": "private Map<String, TokenVerifier> verifiers = new HashMap<>();", "modifier": "private", "type": "Map<String, TokenVerifier>", "declarator": "verifiers = new HashMap<>()", "var_name": "verifiers"}], "methods": [{"identifier": "setMobiTokenVerifier", "parameters": "(MobiTokenVerifier mobiTokenVerifier)", "modifiers": "@Reference", "return": "void", "signature": "void setMobiTokenVerifier(MobiTokenVerifier mobiTokenVerifier)", "full_signature": "@Reference void setMobiTokenVerifier(MobiTokenVerifier mobiTokenVerifier)", "class_method_signature": "SimpleTokenManager.setMobiTokenVerifier(MobiTokenVerifier mobiTokenVerifier)", "testcase": false, "constructor": false}, {"identifier": "addVerifier", "parameters": "(TokenVerifier verifier)", "modifiers": "@Reference(type = '*', dynamic = true)", "return": "void", "signature": "void addVerifier(TokenVerifier verifier)", "full_signature": "@Reference(type = '*', dynamic = true) void addVerifier(TokenVerifier verifier)", "class_method_signature": "SimpleTokenManager.addVerifier(TokenVerifier verifier)", "testcase": false, "constructor": false}, {"identifier": "removeVerifier", "parameters": "(TokenVerifier verifier)", "modifiers": "", "return": "void", "signature": "void removeVerifier(TokenVerifier verifier)", "full_signature": " void removeVerifier(TokenVerifier verifier)", "class_method_signature": "SimpleTokenManager.removeVerifier(TokenVerifier verifier)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(Map<String, Object> props)", "modifiers": "@Activate public", "return": "void", "signature": "void start(Map<String, Object> props)", "full_signature": "@Activate public void start(Map<String, Object> props)", "class_method_signature": "SimpleTokenManager.start(Map<String, Object> props)", "testcase": false, "constructor": false}, {"identifier": "modified", "parameters": "(Map<String, Object> props)", "modifiers": "@Modified public", "return": "void", "signature": "void modified(Map<String, Object> props)", "full_signature": "@Modified public void modified(Map<String, Object> props)", "class_method_signature": "SimpleTokenManager.modified(Map<String, Object> props)", "testcase": false, "constructor": false}, {"identifier": "verifyToken", "parameters": "(String tokenString)", "modifiers": "@Override public", "return": "Optional<SignedJWT>", "signature": "Optional<SignedJWT> verifyToken(String tokenString)", "full_signature": "@Override public Optional<SignedJWT> verifyToken(String tokenString)", "class_method_signature": "SimpleTokenManager.verifyToken(String tokenString)", "testcase": false, "constructor": false}, {"identifier": "generateUnauthToken", "parameters": "()", "modifiers": "@Override public", "return": "SignedJWT", "signature": "SignedJWT generateUnauthToken()", "full_signature": "@Override public SignedJWT generateUnauthToken()", "class_method_signature": "SimpleTokenManager.generateUnauthToken()", "testcase": false, "constructor": false}, {"identifier": "generateAuthToken", "parameters": "(String username)", "modifiers": "@Override public", "return": "SignedJWT", "signature": "SignedJWT generateAuthToken(String username)", "full_signature": "@Override public SignedJWT generateAuthToken(String username)", "class_method_signature": "SimpleTokenManager.generateAuthToken(String username)", "testcase": false, "constructor": false}, {"identifier": "getTokenString", "parameters": "(ContainerRequestContext requestContext)", "modifiers": "@Override public", "return": "String", "signature": "String getTokenString(ContainerRequestContext requestContext)", "full_signature": "@Override public String getTokenString(ContainerRequestContext requestContext)", "class_method_signature": "SimpleTokenManager.getTokenString(ContainerRequestContext requestContext)", "testcase": false, "constructor": false}, {"identifier": "getTokenString", "parameters": "(HttpServletRequest servletRequest)", "modifiers": "@Override public", "return": "String", "signature": "String getTokenString(HttpServletRequest servletRequest)", "full_signature": "@Override public String getTokenString(HttpServletRequest servletRequest)", "class_method_signature": "SimpleTokenManager.getTokenString(HttpServletRequest servletRequest)", "testcase": false, "constructor": false}, {"identifier": "createSecureTokenCookie", "parameters": "(SignedJWT token)", "modifiers": "@Override public", "return": "Cookie", "signature": "Cookie createSecureTokenCookie(SignedJWT token)", "full_signature": "@Override public Cookie createSecureTokenCookie(SignedJWT token)", "class_method_signature": "SimpleTokenManager.createSecureTokenCookie(SignedJWT token)", "testcase": false, "constructor": false}, {"identifier": "createSecureTokenNewCookie", "parameters": "(SignedJWT token)", "modifiers": "@Override public", "return": "NewCookie", "signature": "NewCookie createSecureTokenNewCookie(SignedJWT token)", "full_signature": "@Override public NewCookie createSecureTokenNewCookie(SignedJWT token)", "class_method_signature": "SimpleTokenManager.createSecureTokenNewCookie(SignedJWT token)", "testcase": false, "constructor": false}], "file": "com.mobi.jaas/src/main/java/com/mobi/jaas/token/SimpleTokenManager.java"}, "focal_method": {"identifier": "createSecureTokenCookie", "parameters": "(SignedJWT token)", "modifiers": "@Override public", "return": "Cookie", "body": "@Override\n    public Cookie createSecureTokenCookie(SignedJWT token) {\n        Cookie cookie = new Cookie(TOKEN_NAME, token.serialize());\n        cookie.setSecure(true);\n        cookie.setPath(\"/\");\n        cookie.setMaxAge((int) (tokenDuration / 1000));\n\n        return cookie;\n    }", "signature": "Cookie createSecureTokenCookie(SignedJWT token)", "full_signature": "@Override public Cookie createSecureTokenCookie(SignedJWT token)", "class_method_signature": "SimpleTokenManager.createSecureTokenCookie(SignedJWT token)", "testcase": false, "constructor": false, "invocations": ["serialize", "setSecure", "setPath", "setMaxAge"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}