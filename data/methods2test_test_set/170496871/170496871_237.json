{"test_class": {"identifier": "NormalizationPreprocessorTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/preprocessing/normalization/NormalizationPreprocessorTest.java"}, "test_case": {"identifier": "testApply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testApply() {\n        double[][] data = new double[][]{\n            {1, 2, 1},\n            {1, 1, 1},\n            {1, 0, 0},\n        };\n\n        Vectorizer<Integer, double[], Integer, Double> vectorizer = new DoubleArrayVectorizer<>(0, 1, 2);\n\n        NormalizationPreprocessor<Integer, double[]> preprocessor = new NormalizationPreprocessor<>(\n            1,\n            vectorizer\n        );\n\n        double[][] postProcessedData = new double[][]{\n            {0.25, 0.5, 0.25},\n            {0.33, 0.33, 0.33},\n            {1, 0, 0}\n        };\n\n       for (int i = 0; i < data.length; i++)\n           assertArrayEquals(postProcessedData[i], preprocessor.apply(i, data[i]).features().asArray(), 1e-2);\n    }", "signature": "void testApply()", "full_signature": "@Test public void testApply()", "class_method_signature": "NormalizationPreprocessorTest.testApply()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "asArray", "features", "apply"]}, "focal_class": {"identifier": "NormalizationPreprocessor", "superclass": "", "interfaces": "implements Preprocessor<K, V>, DeployableObject", "fields": [{"original_string": "private static final long serialVersionUID = 6873438115778921295L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 6873438115778921295L", "var_name": "serialVersionUID"}, {"original_string": "private int p;", "modifier": "private", "type": "int", "declarator": "p", "var_name": "p"}, {"original_string": "private final Preprocessor<K, V> basePreprocessor;", "modifier": "private final", "type": "Preprocessor<K, V>", "declarator": "basePreprocessor", "var_name": "basePreprocessor"}], "methods": [{"identifier": "NormalizationPreprocessor", "parameters": "(int p, Preprocessor<K, V> basePreprocessor)", "modifiers": "public", "return": "", "signature": " NormalizationPreprocessor(int p, Preprocessor<K, V> basePreprocessor)", "full_signature": "public  NormalizationPreprocessor(int p, Preprocessor<K, V> basePreprocessor)", "class_method_signature": "NormalizationPreprocessor.NormalizationPreprocessor(int p, Preprocessor<K, V> basePreprocessor)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(K k, V v)", "modifiers": "@Override public", "return": "LabeledVector", "signature": "LabeledVector apply(K k, V v)", "full_signature": "@Override public LabeledVector apply(K k, V v)", "class_method_signature": "NormalizationPreprocessor.apply(K k, V v)", "testcase": false, "constructor": false}, {"identifier": "foldMap", "parameters": "(Vector vec, IgniteBiFunction<Double,Double,Double> foldFun, IgniteDoubleFunction<Double> mapFun, double zero)", "modifiers": "private", "return": "double", "signature": "double foldMap(Vector vec, IgniteBiFunction<Double,Double,Double> foldFun, IgniteDoubleFunction<Double> mapFun, double zero)", "full_signature": "private double foldMap(Vector vec, IgniteBiFunction<Double,Double,Double> foldFun, IgniteDoubleFunction<Double> mapFun, double zero)", "class_method_signature": "NormalizationPreprocessor.foldMap(Vector vec, IgniteBiFunction<Double,Double,Double> foldFun, IgniteDoubleFunction<Double> mapFun, double zero)", "testcase": false, "constructor": false}, {"identifier": "p", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double p()", "full_signature": "public double p()", "class_method_signature": "NormalizationPreprocessor.p()", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "()", "modifiers": "@Override public", "return": "List<Object>", "signature": "List<Object> getDependencies()", "full_signature": "@Override public List<Object> getDependencies()", "class_method_signature": "NormalizationPreprocessor.getDependencies()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/preprocessing/normalization/NormalizationPreprocessor.java"}, "focal_method": {"identifier": "apply", "parameters": "(K k, V v)", "modifiers": "@Override public", "return": "LabeledVector", "body": "@Override public LabeledVector apply(K k, V v) {\n        LabeledVector res = basePreprocessor.apply(k, v);\n\n        double pNorm = Math.pow(foldMap(res.features(), Functions.PLUS, Functions.pow(p), 0d), 1.0 / p);\n\n        for (int i = 0; i < res.size(); i++)\n            res.set(i, res.get(i) / pNorm);\n\n        return res;\n    }", "signature": "LabeledVector apply(K k, V v)", "full_signature": "@Override public LabeledVector apply(K k, V v)", "class_method_signature": "NormalizationPreprocessor.apply(K k, V v)", "testcase": false, "constructor": false, "invocations": ["apply", "pow", "foldMap", "features", "pow", "size", "set", "get"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}