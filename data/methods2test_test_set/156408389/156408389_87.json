{"test_class": {"identifier": "KeyPairTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SEED = \"1123740522f11bfef6b3671f51e159ccf589ccf8965262dd5f97d1721d383dd4\";", "modifier": "private static final", "type": "String", "declarator": "SEED = \"1123740522f11bfef6b3671f51e159ccf589ccf8965262dd5f97d1721d383dd4\"", "var_name": "SEED"}], "file": "kin-sdk/kin-base/src/test/java/kin/base/KeyPairTest.java"}, "test_case": {"identifier": "testFromSecretSeed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromSecretSeed() throws Exception {\n        Map<String, String> keypairs = new HashMap<String, String>();\n        keypairs.put(\"SDJHRQF4GCMIIKAAAQ6IHY42X73FQFLHUULAPSKKD4DFDM7UXWWCRHBE\", \"GCZHXL5HXQX5ABDM26LHYRCQZ5OJFHLOPLZX47WEBP3V2PF5AVFK2A5D\");\n        keypairs.put(\"SDTQN6XUC3D2Z6TIG3XLUTJIMHOSON2FMSKCTM2OHKKH2UX56RQ7R5Y4\", \"GDEAOZWTVHQZGGJY6KG4NAGJQ6DXATXAJO3AMW7C4IXLKMPWWB4FDNFZ\");\n        keypairs.put(\"SDIREFASXYQVEI6RWCQW7F37E6YNXECQJ4SPIOFMMMJRU5CMDQVW32L5\", \"GD2EVR7DGDLNKWEG366FIKXO2KCUAIE3HBUQP4RNY7LEZR5LDKBYHMM6\");\n        keypairs.put(\"SDAPE6RHEJ7745VQEKCI2LMYKZB3H6H366I33A42DG7XKV57673XLCC2\", \"GDLXVH2BTLCLZM53GF7ELZFF4BW4MHH2WXEA4Z5Z3O6DPNZNR44A56UJ\");\n        keypairs.put(\"SDYZ5IYOML3LTWJ6WIAC2YWORKVO7GJRTPPGGNJQERH72I6ZCQHDAJZN\", \"GABXJTV7ELEB2TQZKJYEGXBUIG6QODJULKJDI65KZMIZZG2EACJU5EA7\");\n\n        for (String seed : keypairs.keySet()) {\n            String accountId = keypairs.get(seed);\n            KeyPair keypair = KeyPair.fromSecretSeed(seed);\n            assertEquals(accountId, keypair.getAccountId());\n            assertEquals(seed, String.valueOf(keypair.getSecretSeed()));\n        }\n    }", "signature": "void testFromSecretSeed()", "full_signature": "@Test public void testFromSecretSeed()", "class_method_signature": "KeyPairTest.testFromSecretSeed()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "keySet", "get", "fromSecretSeed", "assertEquals", "getAccountId", "assertEquals", "valueOf", "getSecretSeed"]}, "focal_class": {"identifier": "KeyPair", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final EdDSANamedCurveSpec ed25519 = EdDSANamedCurveTable.ED_25519_CURVE_SPEC;", "modifier": "private static final", "type": "EdDSANamedCurveSpec", "declarator": "ed25519 = EdDSANamedCurveTable.ED_25519_CURVE_SPEC", "var_name": "ed25519"}, {"original_string": "private final EdDSAPublicKey mPublicKey;", "modifier": "private final", "type": "EdDSAPublicKey", "declarator": "mPublicKey", "var_name": "mPublicKey"}, {"original_string": "private final EdDSAPrivateKey mPrivateKey;", "modifier": "private final", "type": "EdDSAPrivateKey", "declarator": "mPrivateKey", "var_name": "mPrivateKey"}], "methods": [{"identifier": "KeyPair", "parameters": "(EdDSAPublicKey publicKey)", "modifiers": "public", "return": "", "signature": " KeyPair(EdDSAPublicKey publicKey)", "full_signature": "public  KeyPair(EdDSAPublicKey publicKey)", "class_method_signature": "KeyPair.KeyPair(EdDSAPublicKey publicKey)", "testcase": false, "constructor": true}, {"identifier": "KeyPair", "parameters": "(EdDSAPublicKey publicKey, EdDSAPrivateKey privateKey)", "modifiers": "public", "return": "", "signature": " KeyPair(EdDSAPublicKey publicKey, EdDSAPrivateKey privateKey)", "full_signature": "public  KeyPair(EdDSAPublicKey publicKey, EdDSAPrivateKey privateKey)", "class_method_signature": "KeyPair.KeyPair(EdDSAPublicKey publicKey, EdDSAPrivateKey privateKey)", "testcase": false, "constructor": true}, {"identifier": "canSign", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canSign()", "full_signature": "public boolean canSign()", "class_method_signature": "KeyPair.canSign()", "testcase": false, "constructor": false}, {"identifier": "fromSecretSeed", "parameters": "(char[] seed)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair fromSecretSeed(char[] seed)", "full_signature": "public static KeyPair fromSecretSeed(char[] seed)", "class_method_signature": "KeyPair.fromSecretSeed(char[] seed)", "testcase": false, "constructor": false}, {"identifier": "fromSecretSeed", "parameters": "(String seed)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair fromSecretSeed(String seed)", "full_signature": "public static KeyPair fromSecretSeed(String seed)", "class_method_signature": "KeyPair.fromSecretSeed(String seed)", "testcase": false, "constructor": false}, {"identifier": "fromSecretSeed", "parameters": "(byte[] seed)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair fromSecretSeed(byte[] seed)", "full_signature": "public static KeyPair fromSecretSeed(byte[] seed)", "class_method_signature": "KeyPair.fromSecretSeed(byte[] seed)", "testcase": false, "constructor": false}, {"identifier": "fromAccountId", "parameters": "(String accountId)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair fromAccountId(String accountId)", "full_signature": "public static KeyPair fromAccountId(String accountId)", "class_method_signature": "KeyPair.fromAccountId(String accountId)", "testcase": false, "constructor": false}, {"identifier": "fromPublicKey", "parameters": "(byte[] publicKey)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair fromPublicKey(byte[] publicKey)", "full_signature": "public static KeyPair fromPublicKey(byte[] publicKey)", "class_method_signature": "KeyPair.fromPublicKey(byte[] publicKey)", "testcase": false, "constructor": false}, {"identifier": "random", "parameters": "()", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair random()", "full_signature": "public static KeyPair random()", "class_method_signature": "KeyPair.random()", "testcase": false, "constructor": false}, {"identifier": "getAccountId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAccountId()", "full_signature": "public String getAccountId()", "class_method_signature": "KeyPair.getAccountId()", "testcase": false, "constructor": false}, {"identifier": "getSecretSeed", "parameters": "()", "modifiers": "public", "return": "char[]", "signature": "char[] getSecretSeed()", "full_signature": "public char[] getSecretSeed()", "class_method_signature": "KeyPair.getSecretSeed()", "testcase": false, "constructor": false}, {"identifier": "getRawSecretSeed", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getRawSecretSeed()", "full_signature": "public byte[] getRawSecretSeed()", "class_method_signature": "KeyPair.getRawSecretSeed()", "testcase": false, "constructor": false}, {"identifier": "getPublicKey", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getPublicKey()", "full_signature": "public byte[] getPublicKey()", "class_method_signature": "KeyPair.getPublicKey()", "testcase": false, "constructor": false}, {"identifier": "getSignatureHint", "parameters": "()", "modifiers": "public", "return": "SignatureHint", "signature": "SignatureHint getSignatureHint()", "full_signature": "public SignatureHint getSignatureHint()", "class_method_signature": "KeyPair.getSignatureHint()", "testcase": false, "constructor": false}, {"identifier": "getXdrPublicKey", "parameters": "()", "modifiers": "public", "return": "PublicKey", "signature": "PublicKey getXdrPublicKey()", "full_signature": "public PublicKey getXdrPublicKey()", "class_method_signature": "KeyPair.getXdrPublicKey()", "testcase": false, "constructor": false}, {"identifier": "getXdrSignerKey", "parameters": "()", "modifiers": "public", "return": "SignerKey", "signature": "SignerKey getXdrSignerKey()", "full_signature": "public SignerKey getXdrSignerKey()", "class_method_signature": "KeyPair.getXdrSignerKey()", "testcase": false, "constructor": false}, {"identifier": "fromXdrPublicKey", "parameters": "(PublicKey key)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair fromXdrPublicKey(PublicKey key)", "full_signature": "public static KeyPair fromXdrPublicKey(PublicKey key)", "class_method_signature": "KeyPair.fromXdrPublicKey(PublicKey key)", "testcase": false, "constructor": false}, {"identifier": "fromXdrSignerKey", "parameters": "(SignerKey key)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair fromXdrSignerKey(SignerKey key)", "full_signature": "public static KeyPair fromXdrSignerKey(SignerKey key)", "class_method_signature": "KeyPair.fromXdrSignerKey(SignerKey key)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(byte[] data)", "modifiers": "public", "return": "byte[]", "signature": "byte[] sign(byte[] data)", "full_signature": "public byte[] sign(byte[] data)", "class_method_signature": "KeyPair.sign(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "signDecorated", "parameters": "(byte[] data)", "modifiers": "public", "return": "DecoratedSignature", "signature": "DecoratedSignature signDecorated(byte[] data)", "full_signature": "public DecoratedSignature signDecorated(byte[] data)", "class_method_signature": "KeyPair.signDecorated(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(byte[] data, byte[] signature)", "modifiers": "public", "return": "boolean", "signature": "boolean verify(byte[] data, byte[] signature)", "full_signature": "public boolean verify(byte[] data, byte[] signature)", "class_method_signature": "KeyPair.verify(byte[] data, byte[] signature)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "KeyPair.equals(Object obj)", "testcase": false, "constructor": false}], "file": "kin-sdk/kin-base/src/main/java/kin/base/KeyPair.java"}, "focal_method": {"identifier": "fromSecretSeed", "parameters": "(char[] seed)", "modifiers": "public static", "return": "KeyPair", "body": "public static KeyPair fromSecretSeed(char[] seed) {\n        byte[] decoded = StrKey.decodeStellarSecretSeed(seed);\n        KeyPair keypair = fromSecretSeed(decoded);\n        Arrays.fill(decoded, (byte) 0);\n        return keypair;\n    }", "signature": "KeyPair fromSecretSeed(char[] seed)", "full_signature": "public static KeyPair fromSecretSeed(char[] seed)", "class_method_signature": "KeyPair.fromSecretSeed(char[] seed)", "testcase": false, "constructor": false, "invocations": ["decodeStellarSecretSeed", "fromSecretSeed", "fill"]}, "repository": {"repo_id": 156408389, "url": "https://github.com/kinecosystem/kin-sdk-android", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 3232, "license": "licensed"}}