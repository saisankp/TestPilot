{"test_class": {"identifier": "RegArimaSpecificationTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/modelling/arima/x13/RegArimaSpecificationTest.java"}, "test_case": {"identifier": "testSetArima", "parameters": "()", "modifiers": "@Test (expected = java.lang.IllegalArgumentException.class) public", "return": "void", "body": "@Test (expected = java.lang.IllegalArgumentException.class)\n    public void testSetArima(){\n        RegArimaSpecification expected = new RegArimaSpecification();\n        expected.setArima(null);\n    }", "signature": "void testSetArima()", "full_signature": "@Test (expected = java.lang.IllegalArgumentException.class) public void testSetArima()", "class_method_signature": "RegArimaSpecificationTest.testSetArima()", "testcase": true, "constructor": false, "invocations": ["setArima"]}, "focal_class": {"identifier": "RegArimaSpecification", "superclass": "", "interfaces": "implements IRegArimaSpecification, Cloneable", "fields": [{"original_string": "public static final RegArimaSpecification RGDISABLED, RG0, RG1, RG2, RG3, RG4, RG5;", "modifier": "public static final", "type": "RegArimaSpecification", "declarator": "RGDISABLED", "var_name": "RGDISABLED"}, {"original_string": "public static final String BASIC = \"basic\", TRANSFORM = \"transform\",\n            AUTOMDL = \"automdl\", ARIMA = \"arima\",\n            REGRESSION = \"regression\", OUTLIER = \"outlier\", ESTIMATE = \"esimate\";", "modifier": "public static final", "type": "String", "declarator": "BASIC = \"basic\"", "var_name": "BASIC"}, {"original_string": "private static final String SMETHOD = \"RG\";", "modifier": "private static final", "type": "String", "declarator": "SMETHOD = \"RG\"", "var_name": "SMETHOD"}, {"original_string": "static final LevelShiftFactory LFAC;", "modifier": "static final", "type": "LevelShiftFactory", "declarator": "LFAC", "var_name": "LFAC"}, {"original_string": "static final TransitoryChangeFactory TFAC;", "modifier": "static final", "type": "TransitoryChangeFactory", "declarator": "TFAC", "var_name": "TFAC"}, {"original_string": "static final AdditiveOutlierFactory AFAC;", "modifier": "static final", "type": "AdditiveOutlierFactory", "declarator": "AFAC", "var_name": "AFAC"}, {"original_string": "static final SeasonalOutlierFactory SFAC;", "modifier": "static final", "type": "SeasonalOutlierFactory", "declarator": "SFAC", "var_name": "SFAC"}, {"original_string": "private BasicSpec basic_;", "modifier": "private", "type": "BasicSpec", "declarator": "basic_", "var_name": "basic_"}, {"original_string": "private TransformSpec transform_;", "modifier": "private", "type": "TransformSpec", "declarator": "transform_", "var_name": "transform_"}, {"original_string": "private RegressionSpec regression_;", "modifier": "private", "type": "RegressionSpec", "declarator": "regression_", "var_name": "regression_"}, {"original_string": "private OutlierSpec outliers_;", "modifier": "private", "type": "OutlierSpec", "declarator": "outliers_", "var_name": "outliers_"}, {"original_string": "private AutoModelSpec automdl_;", "modifier": "private", "type": "AutoModelSpec", "declarator": "automdl_", "var_name": "automdl_"}, {"original_string": "private ArimaSpec arima_;", "modifier": "private", "type": "ArimaSpec", "declarator": "arima_", "var_name": "arima_"}, {"original_string": "private EstimateSpec estimate_;", "modifier": "private", "type": "EstimateSpec", "declarator": "estimate_", "var_name": "estimate_"}], "methods": [{"identifier": "fillDictionary", "parameters": "(String prefix, Map<String, Class> dic)", "modifiers": "public static", "return": "void", "signature": "void fillDictionary(String prefix, Map<String, Class> dic)", "full_signature": "public static void fillDictionary(String prefix, Map<String, Class> dic)", "class_method_signature": "RegArimaSpecification.fillDictionary(String prefix, Map<String, Class> dic)", "testcase": false, "constructor": false}, {"identifier": "allSpecifications", "parameters": "()", "modifiers": "public static final", "return": "RegArimaSpecification[]", "signature": "RegArimaSpecification[] allSpecifications()", "full_signature": "public static final RegArimaSpecification[] allSpecifications()", "class_method_signature": "RegArimaSpecification.allSpecifications()", "testcase": false, "constructor": false}, {"identifier": "RegArimaSpecification", "parameters": "()", "modifiers": "public", "return": "", "signature": " RegArimaSpecification()", "full_signature": "public  RegArimaSpecification()", "class_method_signature": "RegArimaSpecification.RegArimaSpecification()", "testcase": false, "constructor": true}, {"identifier": "getBasic", "parameters": "()", "modifiers": "public", "return": "BasicSpec", "signature": "BasicSpec getBasic()", "full_signature": "public BasicSpec getBasic()", "class_method_signature": "RegArimaSpecification.getBasic()", "testcase": false, "constructor": false}, {"identifier": "getOutliers", "parameters": "()", "modifiers": "public", "return": "OutlierSpec", "signature": "OutlierSpec getOutliers()", "full_signature": "public OutlierSpec getOutliers()", "class_method_signature": "RegArimaSpecification.getOutliers()", "testcase": false, "constructor": false}, {"identifier": "getOutliersFactory", "parameters": "()", "modifiers": "public", "return": "OutliersFactory", "signature": "OutliersFactory getOutliersFactory()", "full_signature": "public OutliersFactory getOutliersFactory()", "class_method_signature": "RegArimaSpecification.getOutliersFactory()", "testcase": false, "constructor": false}, {"identifier": "setOutliers", "parameters": "(OutlierSpec value)", "modifiers": "public", "return": "void", "signature": "void setOutliers(OutlierSpec value)", "full_signature": "public void setOutliers(OutlierSpec value)", "class_method_signature": "RegArimaSpecification.setOutliers(OutlierSpec value)", "testcase": false, "constructor": false}, {"identifier": "getAutoModel", "parameters": "()", "modifiers": "public", "return": "AutoModelSpec", "signature": "AutoModelSpec getAutoModel()", "full_signature": "public AutoModelSpec getAutoModel()", "class_method_signature": "RegArimaSpecification.getAutoModel()", "testcase": false, "constructor": false}, {"identifier": "setAutoModel", "parameters": "(AutoModelSpec automdl)", "modifiers": "public", "return": "void", "signature": "void setAutoModel(AutoModelSpec automdl)", "full_signature": "public void setAutoModel(AutoModelSpec automdl)", "class_method_signature": "RegArimaSpecification.setAutoModel(AutoModelSpec automdl)", "testcase": false, "constructor": false}, {"identifier": "getArima", "parameters": "()", "modifiers": "public", "return": "ArimaSpec", "signature": "ArimaSpec getArima()", "full_signature": "public ArimaSpec getArima()", "class_method_signature": "RegArimaSpecification.getArima()", "testcase": false, "constructor": false}, {"identifier": "setArima", "parameters": "(ArimaSpec arima)", "modifiers": "public", "return": "void", "signature": "void setArima(ArimaSpec arima)", "full_signature": "public void setArima(ArimaSpec arima)", "class_method_signature": "RegArimaSpecification.setArima(ArimaSpec arima)", "testcase": false, "constructor": false}, {"identifier": "getTransform", "parameters": "()", "modifiers": "public", "return": "TransformSpec", "signature": "TransformSpec getTransform()", "full_signature": "public TransformSpec getTransform()", "class_method_signature": "RegArimaSpecification.getTransform()", "testcase": false, "constructor": false}, {"identifier": "setTransform", "parameters": "(TransformSpec value)", "modifiers": "public", "return": "void", "signature": "void setTransform(TransformSpec value)", "full_signature": "public void setTransform(TransformSpec value)", "class_method_signature": "RegArimaSpecification.setTransform(TransformSpec value)", "testcase": false, "constructor": false}, {"identifier": "getRegression", "parameters": "()", "modifiers": "public", "return": "RegressionSpec", "signature": "RegressionSpec getRegression()", "full_signature": "public RegressionSpec getRegression()", "class_method_signature": "RegArimaSpecification.getRegression()", "testcase": false, "constructor": false}, {"identifier": "setRegression", "parameters": "(RegressionSpec value)", "modifiers": "public", "return": "void", "signature": "void setRegression(RegressionSpec value)", "full_signature": "public void setRegression(RegressionSpec value)", "class_method_signature": "RegArimaSpecification.setRegression(RegressionSpec value)", "testcase": false, "constructor": false}, {"identifier": "getEstimate", "parameters": "()", "modifiers": "public", "return": "EstimateSpec", "signature": "EstimateSpec getEstimate()", "full_signature": "public EstimateSpec getEstimate()", "class_method_signature": "RegArimaSpecification.getEstimate()", "testcase": false, "constructor": false}, {"identifier": "setEstimate", "parameters": "(EstimateSpec value)", "modifiers": "public", "return": "void", "signature": "void setEstimate(EstimateSpec value)", "full_signature": "public void setEstimate(EstimateSpec value)", "class_method_signature": "RegArimaSpecification.setEstimate(EstimateSpec value)", "testcase": false, "constructor": false}, {"identifier": "isUsingAutoModel", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUsingAutoModel()", "full_signature": "public boolean isUsingAutoModel()", "class_method_signature": "RegArimaSpecification.isUsingAutoModel()", "testcase": false, "constructor": false}, {"identifier": "setUsingAutoModel", "parameters": "(boolean enableAutoModel)", "modifiers": "public", "return": "void", "signature": "void setUsingAutoModel(boolean enableAutoModel)", "full_signature": "public void setUsingAutoModel(boolean enableAutoModel)", "class_method_signature": "RegArimaSpecification.setUsingAutoModel(boolean enableAutoModel)", "testcase": false, "constructor": false}, {"identifier": "makeTd", "parameters": "(RegressionSpec m_regression)", "modifiers": "private", "return": "IPreprocessingModule", "signature": "IPreprocessingModule makeTd(RegressionSpec m_regression)", "full_signature": "private IPreprocessingModule makeTd(RegressionSpec m_regression)", "class_method_signature": "RegArimaSpecification.makeTd(RegressionSpec m_regression)", "testcase": false, "constructor": false}, {"identifier": "makeEaster", "parameters": "(RegressionSpec m_regression)", "modifiers": "private", "return": "IPreprocessingModule", "signature": "IPreprocessingModule makeEaster(RegressionSpec m_regression)", "full_signature": "private IPreprocessingModule makeEaster(RegressionSpec m_regression)", "class_method_signature": "RegArimaSpecification.makeEaster(RegressionSpec m_regression)", "testcase": false, "constructor": false}, {"identifier": "defaultPreprocessor", "parameters": "(Default option)", "modifiers": "public static", "return": "IPreprocessor", "signature": "IPreprocessor defaultPreprocessor(Default option)", "full_signature": "public static IPreprocessor defaultPreprocessor(Default option)", "class_method_signature": "RegArimaSpecification.defaultPreprocessor(Default option)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "RegArimaSpecification", "signature": "RegArimaSpecification clone()", "full_signature": "@Override public RegArimaSpecification clone()", "class_method_signature": "RegArimaSpecification.clone()", "testcase": false, "constructor": false}, {"identifier": "makeLogLevel", "parameters": "(TransformSpec transform_)", "modifiers": "private", "return": "IPreprocessingModule", "signature": "IPreprocessingModule makeLogLevel(TransformSpec transform_)", "full_signature": "private IPreprocessingModule makeLogLevel(TransformSpec transform_)", "class_method_signature": "RegArimaSpecification.makeLogLevel(TransformSpec transform_)", "testcase": false, "constructor": false}, {"identifier": "makeOutliers", "parameters": "(OutlierSpec o)", "modifiers": "private", "return": "IOutliersDetectionModule", "signature": "IOutliersDetectionModule makeOutliers(OutlierSpec o)", "full_signature": "private IOutliersDetectionModule makeOutliers(OutlierSpec o)", "class_method_signature": "RegArimaSpecification.makeOutliers(OutlierSpec o)", "testcase": false, "constructor": false}, {"identifier": "makeFinalEstimator", "parameters": "(EstimateSpec estimate_)", "modifiers": "private", "return": "IModelEstimator", "signature": "IModelEstimator makeFinalEstimator(EstimateSpec estimate_)", "full_signature": "private IModelEstimator makeFinalEstimator(EstimateSpec estimate_)", "class_method_signature": "RegArimaSpecification.makeFinalEstimator(EstimateSpec estimate_)", "testcase": false, "constructor": false}, {"identifier": "makeAutoModelling", "parameters": "(X13Preprocessor x13, AutoModelSpec automdl)", "modifiers": "private", "return": "void", "signature": "void makeAutoModelling(X13Preprocessor x13, AutoModelSpec automdl)", "full_signature": "private void makeAutoModelling(X13Preprocessor x13, AutoModelSpec automdl)", "class_method_signature": "RegArimaSpecification.makeAutoModelling(X13Preprocessor x13, AutoModelSpec automdl)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "public", "return": "IPreprocessor", "signature": "IPreprocessor build()", "full_signature": "public IPreprocessor build()", "class_method_signature": "RegArimaSpecification.build()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(ProcessingContext context)", "modifiers": "public", "return": "IPreprocessor", "signature": "IPreprocessor build(ProcessingContext context)", "full_signature": "public IPreprocessor build(ProcessingContext context)", "class_method_signature": "RegArimaSpecification.build(ProcessingContext context)", "testcase": false, "constructor": false}, {"identifier": "isSystem", "parameters": "(RegArimaSpecification spec)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSystem(RegArimaSpecification spec)", "full_signature": "public static boolean isSystem(RegArimaSpecification spec)", "class_method_signature": "RegArimaSpecification.isSystem(RegArimaSpecification spec)", "testcase": false, "constructor": false}, {"identifier": "matchSystem", "parameters": "(RegArimaSpecification spec)", "modifiers": "public static", "return": "RegArimaSpecification", "signature": "RegArimaSpecification matchSystem(RegArimaSpecification spec)", "full_signature": "public static RegArimaSpecification matchSystem(RegArimaSpecification spec)", "class_method_signature": "RegArimaSpecification.matchSystem(RegArimaSpecification spec)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "RegArimaSpecification.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(RegArimaSpecification spec)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(RegArimaSpecification spec)", "full_signature": "private boolean equals(RegArimaSpecification spec)", "class_method_signature": "RegArimaSpecification.equals(RegArimaSpecification spec)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RegArimaSpecification.hashCode()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(boolean verbose)", "modifiers": "@Override public", "return": "InformationSet", "signature": "InformationSet write(boolean verbose)", "full_signature": "@Override public InformationSet write(boolean verbose)", "class_method_signature": "RegArimaSpecification.write(boolean verbose)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(InformationSet info)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean read(InformationSet info)", "full_signature": "@Override public boolean read(InformationSet info)", "class_method_signature": "RegArimaSpecification.read(InformationSet info)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RegArimaSpecification.toString()", "testcase": false, "constructor": false}, {"identifier": "toLongString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toLongString()", "full_signature": "public String toLongString()", "class_method_signature": "RegArimaSpecification.toLongString()", "testcase": false, "constructor": false}, {"identifier": "fromString", "parameters": "(String name)", "modifiers": "public static", "return": "RegArimaSpecification", "signature": "RegArimaSpecification fromString(String name)", "full_signature": "public static RegArimaSpecification fromString(String name)", "class_method_signature": "RegArimaSpecification.fromString(String name)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/modelling/arima/x13/RegArimaSpecification.java"}, "focal_method": {"identifier": "setArima", "parameters": "(ArimaSpec arima)", "modifiers": "public", "return": "void", "body": "public void setArima(ArimaSpec arima) {\n        if (arima == null) {\n            throw new java.lang.IllegalArgumentException(ARIMA);\n        }\n        arima_ = arima;\n        automdl_.setEnabled(false);\n    }", "signature": "void setArima(ArimaSpec arima)", "full_signature": "public void setArima(ArimaSpec arima)", "class_method_signature": "RegArimaSpecification.setArima(ArimaSpec arima)", "testcase": false, "constructor": false, "invocations": ["setEnabled"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}