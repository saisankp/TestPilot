{"test_class": {"identifier": "ExecutorBizImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public XxlJobExecutor xxlJobExecutor = null;", "modifier": "public", "type": "XxlJobExecutor", "declarator": "xxlJobExecutor = null", "var_name": "xxlJobExecutor"}, {"original_string": "public ExecutorBiz executorBiz = null;", "modifier": "public", "type": "ExecutorBiz", "declarator": "executorBiz = null", "var_name": "executorBiz"}], "file": "T4Cloud-XXL-Job/T4Cloud-XXL-Core/src/test/java/com/xxl/job/core/biz/impl/ExecutorBizImplTest.java"}, "test_case": {"identifier": "run", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void run(){\n        // trigger data\n        final TriggerParam triggerParam = new TriggerParam();\n        triggerParam.setJobId(1);\n        triggerParam.setExecutorHandler(\"demoJobHandler\");\n        triggerParam.setExecutorParams(null);\n        triggerParam.setExecutorBlockStrategy(ExecutorBlockStrategyEnum.COVER_EARLY.name());\n        triggerParam.setGlueType(GlueTypeEnum.BEAN.name());\n        triggerParam.setGlueSource(null);\n        triggerParam.setGlueUpdatetime(System.currentTimeMillis());\n        triggerParam.setLogId(1);\n        triggerParam.setLogDateTime(System.currentTimeMillis());\n\n        // Act\n        final ReturnT<String> retval = executorBiz.run(triggerParam);\n\n        // Assert result\n        Assert.assertNotNull(retval);\n    }", "signature": "void run()", "full_signature": "@Test public void run()", "class_method_signature": "ExecutorBizImplTest.run()", "testcase": true, "constructor": false, "invocations": ["setJobId", "setExecutorHandler", "setExecutorParams", "setExecutorBlockStrategy", "name", "setGlueType", "name", "setGlueSource", "setGlueUpdatetime", "currentTimeMillis", "setLogId", "setLogDateTime", "currentTimeMillis", "run", "assertNotNull"]}, "focal_class": {"identifier": "ExecutorBizImpl", "superclass": "", "interfaces": "implements ExecutorBiz", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(ExecutorBizImpl.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ExecutorBizImpl.class)", "var_name": "logger"}], "methods": [{"identifier": "beat", "parameters": "()", "modifiers": "@Override public", "return": "ReturnT<String>", "signature": "ReturnT<String> beat()", "full_signature": "@Override public ReturnT<String> beat()", "class_method_signature": "ExecutorBizImpl.beat()", "testcase": false, "constructor": false}, {"identifier": "idleBeat", "parameters": "(int jobId)", "modifiers": "@Override public", "return": "ReturnT<String>", "signature": "ReturnT<String> idleBeat(int jobId)", "full_signature": "@Override public ReturnT<String> idleBeat(int jobId)", "class_method_signature": "ExecutorBizImpl.idleBeat(int jobId)", "testcase": false, "constructor": false}, {"identifier": "kill", "parameters": "(int jobId)", "modifiers": "@Override public", "return": "ReturnT<String>", "signature": "ReturnT<String> kill(int jobId)", "full_signature": "@Override public ReturnT<String> kill(int jobId)", "class_method_signature": "ExecutorBizImpl.kill(int jobId)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(long logDateTim, long logId, int fromLineNum)", "modifiers": "@Override public", "return": "ReturnT<LogResult>", "signature": "ReturnT<LogResult> log(long logDateTim, long logId, int fromLineNum)", "full_signature": "@Override public ReturnT<LogResult> log(long logDateTim, long logId, int fromLineNum)", "class_method_signature": "ExecutorBizImpl.log(long logDateTim, long logId, int fromLineNum)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(TriggerParam triggerParam)", "modifiers": "@Override public", "return": "ReturnT<String>", "signature": "ReturnT<String> run(TriggerParam triggerParam)", "full_signature": "@Override public ReturnT<String> run(TriggerParam triggerParam)", "class_method_signature": "ExecutorBizImpl.run(TriggerParam triggerParam)", "testcase": false, "constructor": false}], "file": "T4Cloud-XXL-Job/T4Cloud-XXL-Core/src/main/java/com/xxl/job/core/biz/impl/ExecutorBizImpl.java"}, "focal_method": {"identifier": "run", "parameters": "(TriggerParam triggerParam)", "modifiers": "@Override public", "return": "ReturnT<String>", "body": "@Override\n    public ReturnT<String> run(TriggerParam triggerParam) {\n        // load old\uff1ajobHandler + jobThread\n        JobThread jobThread = XxlJobExecutor.loadJobThread(triggerParam.getJobId());\n        IJobHandler jobHandler = jobThread!=null?jobThread.getHandler():null;\n        String removeOldReason = null;\n\n        // valid\uff1ajobHandler + jobThread\n        GlueTypeEnum glueTypeEnum = GlueTypeEnum.match(triggerParam.getGlueType());\n        if (GlueTypeEnum.BEAN == glueTypeEnum) {\n\n            // new jobhandler\n            IJobHandler newJobHandler = XxlJobExecutor.loadJobHandler(triggerParam.getExecutorHandler());\n\n            // valid old jobThread\n            if (jobThread!=null && jobHandler != newJobHandler) {\n                // change handler, need kill old thread\n                removeOldReason = \"change jobhandler or glue type, and terminate the old job thread.\";\n\n                jobThread = null;\n                jobHandler = null;\n            }\n\n            // valid handler\n            if (jobHandler == null) {\n                jobHandler = newJobHandler;\n                if (jobHandler == null) {\n                    return new ReturnT<String>(ReturnT.FAIL_CODE, \"job handler [\" + triggerParam.getExecutorHandler() + \"] not found.\");\n                }\n            }\n\n        } else if (GlueTypeEnum.GLUE_GROOVY == glueTypeEnum) {\n\n            // valid old jobThread\n            if (jobThread != null &&\n                    !(jobThread.getHandler() instanceof GlueJobHandler\n                        && ((GlueJobHandler) jobThread.getHandler()).getGlueUpdatetime()==triggerParam.getGlueUpdatetime() )) {\n                // change handler or gluesource updated, need kill old thread\n                removeOldReason = \"change job source or glue type, and terminate the old job thread.\";\n\n                jobThread = null;\n                jobHandler = null;\n            }\n\n            // valid handler\n            if (jobHandler == null) {\n                try {\n                    IJobHandler originJobHandler = GlueFactory.getInstance().loadNewInstance(triggerParam.getGlueSource());\n                    jobHandler = new GlueJobHandler(originJobHandler, triggerParam.getGlueUpdatetime());\n                } catch (Exception e) {\n                    logger.error(e.getMessage(), e);\n                    return new ReturnT<String>(ReturnT.FAIL_CODE, e.getMessage());\n                }\n            }\n        } else if (glueTypeEnum!=null && glueTypeEnum.isScript()) {\n\n            // valid old jobThread\n            if (jobThread != null &&\n                    !(jobThread.getHandler() instanceof ScriptJobHandler\n                            && ((ScriptJobHandler) jobThread.getHandler()).getGlueUpdatetime()==triggerParam.getGlueUpdatetime() )) {\n                // change script or gluesource updated, need kill old thread\n                removeOldReason = \"change job source or glue type, and terminate the old job thread.\";\n\n                jobThread = null;\n                jobHandler = null;\n            }\n\n            // valid handler\n            if (jobHandler == null) {\n                jobHandler = new ScriptJobHandler(triggerParam.getJobId(), triggerParam.getGlueUpdatetime(), triggerParam.getGlueSource(), GlueTypeEnum.match(triggerParam.getGlueType()));\n            }\n        } else {\n            return new ReturnT<String>(ReturnT.FAIL_CODE, \"glueType[\" + triggerParam.getGlueType() + \"] is not valid.\");\n        }\n\n        // executor block strategy\n        if (jobThread != null) {\n            ExecutorBlockStrategyEnum blockStrategy = ExecutorBlockStrategyEnum.match(triggerParam.getExecutorBlockStrategy(), null);\n            if (ExecutorBlockStrategyEnum.DISCARD_LATER == blockStrategy) {\n                // discard when running\n                if (jobThread.isRunningOrHasQueue()) {\n                    return new ReturnT<String>(ReturnT.FAIL_CODE, \"block strategy effect\uff1a\"+ExecutorBlockStrategyEnum.DISCARD_LATER.getTitle());\n                }\n            } else if (ExecutorBlockStrategyEnum.COVER_EARLY == blockStrategy) {\n                // kill running jobThread\n                if (jobThread.isRunningOrHasQueue()) {\n                    removeOldReason = \"block strategy effect\uff1a\" + ExecutorBlockStrategyEnum.COVER_EARLY.getTitle();\n\n                    jobThread = null;\n                }\n            } else {\n                // just queue trigger\n            }\n        }\n\n        // replace thread (new or exists invalid)\n        if (jobThread == null) {\n            jobThread = XxlJobExecutor.registJobThread(triggerParam.getJobId(), jobHandler, removeOldReason);\n        }\n\n        // push data to queue\n        ReturnT<String> pushResult = jobThread.pushTriggerQueue(triggerParam);\n        return pushResult;\n    }", "signature": "ReturnT<String> run(TriggerParam triggerParam)", "full_signature": "@Override public ReturnT<String> run(TriggerParam triggerParam)", "class_method_signature": "ExecutorBizImpl.run(TriggerParam triggerParam)", "testcase": false, "constructor": false, "invocations": ["loadJobThread", "getJobId", "getHandler", "match", "getGlueType", "loadJobHandler", "getExecutorHandler", "getExecutorHandler", "getHandler", "getGlueUpdatetime", "getHandler", "getGlueUpdatetime", "loadNewInstance", "getInstance", "getGlueSource", "getGlueUpdatetime", "error", "getMessage", "getMessage", "isScript", "getHandler", "getGlueUpdatetime", "getHandler", "getGlueUpdatetime", "getJobId", "getGlueUpdatetime", "getGlueSource", "match", "getGlueType", "getGlueType", "match", "getExecutorBlockStrategy", "isRunningOrHasQueue", "tTitle()", "isRunningOrHasQueue", "tTitle()", "registJobThread", "getJobId", "pushTriggerQueue"]}, "repository": {"repo_id": 234031371, "url": "https://github.com/TeaR7/T4CLOUD", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 85544, "license": "licensed"}}