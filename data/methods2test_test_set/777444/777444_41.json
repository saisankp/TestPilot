{"test_class": {"identifier": "VirtualMachineHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "VirtualMachineHandler vmHandler;", "modifier": "", "type": "VirtualMachineHandler", "declarator": "vmHandler", "var_name": "vmHandler"}], "file": "agent/jvm/src/test/java/org/jolokia/jvmagent/client/util/VirtualMachineHandlerTest.java"}, "test_case": {"identifier": "listAndAttach", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void listAndAttach() throws Exception, NoSuchMethodException, IllegalAccessException {\n        List<ProcessDescription> procs = vmHandler.listProcesses();\n        assertTrue(procs.size() > 0);\n        boolean foundAtLeastOne = false;\n        for (ProcessDescription p : procs) {\n            try {\n                foundAtLeastOne |= tryAttach(p.getId());\n            } catch (Exception exp) {\n                System.err.println(\"ERROR: \" + p.getId() + \" \" + p.getDisplay() + \": \" + exp);\n            }\n        }\n        assertTrue(foundAtLeastOne);\n    }", "signature": "void listAndAttach()", "full_signature": "@Test public void listAndAttach()", "class_method_signature": "VirtualMachineHandlerTest.listAndAttach()", "testcase": true, "constructor": false, "invocations": ["listProcesses", "assertTrue", "size", "tryAttach", "getId", "println", "getId", "getDisplay", "assertTrue"]}, "focal_class": {"identifier": "VirtualMachineHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OptionsAndArgs options;", "modifier": "private", "type": "OptionsAndArgs", "declarator": "options", "var_name": "options"}], "methods": [{"identifier": "VirtualMachineHandler", "parameters": "(OptionsAndArgs pOptions)", "modifiers": "public", "return": "", "signature": " VirtualMachineHandler(OptionsAndArgs pOptions)", "full_signature": "public  VirtualMachineHandler(OptionsAndArgs pOptions)", "class_method_signature": "VirtualMachineHandler.VirtualMachineHandler(OptionsAndArgs pOptions)", "testcase": false, "constructor": true}, {"identifier": "attachVirtualMachine", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object attachVirtualMachine()", "full_signature": "public Object attachVirtualMachine()", "class_method_signature": "VirtualMachineHandler.attachVirtualMachine()", "testcase": false, "constructor": false}, {"identifier": "getPidErrorMesssage", "parameters": "(String pid, String label, Class vmClass)", "modifiers": "private", "return": "String", "signature": "String getPidErrorMesssage(String pid, String label, Class vmClass)", "full_signature": "private String getPidErrorMesssage(String pid, String label, Class vmClass)", "class_method_signature": "VirtualMachineHandler.getPidErrorMesssage(String pid, String label, Class vmClass)", "testcase": false, "constructor": false}, {"identifier": "detachAgent", "parameters": "(Object pVm)", "modifiers": "public", "return": "void", "signature": "void detachAgent(Object pVm)", "full_signature": "public void detachAgent(Object pVm)", "class_method_signature": "VirtualMachineHandler.detachAgent(Object pVm)", "testcase": false, "constructor": false}, {"identifier": "listProcesses", "parameters": "()", "modifiers": "public", "return": "List<ProcessDescription>", "signature": "List<ProcessDescription> listProcesses()", "full_signature": "public List<ProcessDescription> listProcesses()", "class_method_signature": "VirtualMachineHandler.listProcesses()", "testcase": false, "constructor": false}, {"identifier": "findProcess", "parameters": "(Pattern pPattern)", "modifiers": "public", "return": "ProcessDescription", "signature": "ProcessDescription findProcess(Pattern pPattern)", "full_signature": "public ProcessDescription findProcess(Pattern pPattern)", "class_method_signature": "VirtualMachineHandler.findProcess(Pattern pPattern)", "testcase": false, "constructor": false}, {"identifier": "getProcessId", "parameters": "(OptionsAndArgs pOpts)", "modifiers": "private", "return": "String", "signature": "String getProcessId(OptionsAndArgs pOpts)", "full_signature": "private String getProcessId(OptionsAndArgs pOpts)", "class_method_signature": "VirtualMachineHandler.getProcessId(OptionsAndArgs pOpts)", "testcase": false, "constructor": false}, {"identifier": "getOwnProcessId", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getOwnProcessId()", "full_signature": "private String getOwnProcessId()", "class_method_signature": "VirtualMachineHandler.getOwnProcessId()", "testcase": false, "constructor": false}, {"identifier": "lookupVirtualMachineClass", "parameters": "()", "modifiers": "private", "return": "Class", "signature": "Class lookupVirtualMachineClass()", "full_signature": "private Class lookupVirtualMachineClass()", "class_method_signature": "VirtualMachineHandler.lookupVirtualMachineClass()", "testcase": false, "constructor": false}], "file": "agent/jvm/src/main/java/org/jolokia/jvmagent/client/util/VirtualMachineHandler.java"}, "focal_method": {"identifier": "listProcesses", "parameters": "()", "modifiers": "public", "return": "List<ProcessDescription>", "body": "public List<ProcessDescription> listProcesses() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        List<ProcessDescription> ret = new ArrayList<ProcessDescription>();\n        Class vmClass = lookupVirtualMachineClass();\n        Method method = vmClass.getMethod(\"list\");\n        List vmDescriptors = (List) method.invoke(null);\n        for (Object descriptor : vmDescriptors) {\n            Method idMethod = descriptor.getClass().getMethod(\"id\");\n            String id = (String) idMethod.invoke(descriptor);\n            Method displayMethod = descriptor.getClass().getMethod(\"displayName\");\n            String display = (String) displayMethod.invoke(descriptor);\n            ret.add(new ProcessDescription(id, display));\n        }\n        return ret;\n    }", "signature": "List<ProcessDescription> listProcesses()", "full_signature": "public List<ProcessDescription> listProcesses()", "class_method_signature": "VirtualMachineHandler.listProcesses()", "testcase": false, "constructor": false, "invocations": ["lookupVirtualMachineClass", "getMethod", "invoke", "getMethod", "getClass", "invoke", "getMethod", "getClass", "invoke", "add"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}