{"test_class": {"identifier": "GetConfigurationCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DOUBLE_TOLERANCE = .0000000001;", "modifier": "private static final", "type": "double", "declarator": "DOUBLE_TOLERANCE = .0000000001", "var_name": "DOUBLE_TOLERANCE"}, {"original_string": "private static final String APP_ID = \"simplevectors\";", "modifier": "private static final", "type": "String", "declarator": "APP_ID = \"simplevectors\"", "var_name": "APP_ID"}, {"original_string": "@Autowired\n\tprivate ConfigurationService configurationService;", "modifier": "@Autowired\n\tprivate", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "@Autowired\n\tprivate CommandDispatcher dispatcher;", "modifier": "@Autowired\n\tprivate", "type": "CommandDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}], "file": "command/src/test/java/org/geomajas/command/configuration/GetConfigurationCommandTest.java"}, "test_case": {"identifier": "testServerSideOnlyInfo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testServerSideOnlyInfo() throws Exception {\n\t\tGetConfigurationRequest request = new GetConfigurationRequest();\n\t\trequest.setApplicationId(\"appServerSideOnly\");\n\t\tGetConfigurationResponse response = (GetConfigurationResponse) dispatcher.execute(\n\t\t\t\tGetConfigurationRequest.COMMAND, request, null, \"en\");\n\t\tif (response.isError()) {\n\t\t\tresponse.getErrors().get(0).printStackTrace();\n\t\t}\n\t\tAssert.assertFalse(response.isError());\n\t\tClientApplicationInfo appInfo = response.getApplication();\n\t\tAssert.assertNotNull(appInfo);\n\n\t\t// user data\n\t\tAssert.assertNull(appInfo.getUserData());\n\n\t\t// widget data\n\t\tAssert.assertNotNull(appInfo.getWidgetInfo());\n\t\tAssert.assertNull(appInfo.getWidgetInfo(\"appDummy\")); // not present\n\t\tAssert.assertNotNull(appInfo.getWidgetInfo(\"mapSelect\")); // present\n\t\tAssert.assertNull(appInfo.getWidgetInfo(\"mapDummy\")); // filtered because ServerSideOnlyInfo\n\n\t\t// map data\n\t\tClientMapInfo mapInfo = appInfo.getMaps().get(0);\n\t\tAssert.assertNull(mapInfo.getUserData());\n\t\tAssert.assertNotNull(mapInfo);\n\t\tAssert.assertNotNull(mapInfo.getWidgetInfo());\n\t\tAssert.assertNull(mapInfo.getWidgetInfo(\"appDummy\")); // not present\n\t\tAssert.assertNotNull(mapInfo.getWidgetInfo(\"layerTree\")); // present\n\t\tAssert.assertNull(mapInfo.getWidgetInfo(\"mapDummy\")); // filtered because ServerSideOnlyInfo\n\t}", "signature": "void testServerSideOnlyInfo()", "full_signature": "@Test public void testServerSideOnlyInfo()", "class_method_signature": "GetConfigurationCommandTest.testServerSideOnlyInfo()", "testcase": true, "constructor": false, "invocations": ["setApplicationId", "execute", "isError", "printStackTrace", "get", "getErrors", "assertFalse", "isError", "getApplication", "assertNotNull", "assertNull", "getUserData", "assertNotNull", "getWidgetInfo", "assertNull", "getWidgetInfo", "assertNotNull", "getWidgetInfo", "assertNull", "getWidgetInfo", "get", "getMaps", "assertNull", "getUserData", "assertNotNull", "assertNotNull", "getWidgetInfo", "assertNull", "getWidgetInfo", "assertNotNull", "getWidgetInfo", "assertNull", "getWidgetInfo"]}, "focal_class": {"identifier": "GetConfigurationCommand", "superclass": "", "interfaces": "implements CommandHasRequest<GetConfigurationRequest, GetConfigurationResponse>", "fields": [{"original_string": "@Autowired\n\tprivate ApplicationContext context;", "modifier": "@Autowired\n\tprivate", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Autowired\n\tprivate GetMapConfigurationCommand mapConfigurationCommand;", "modifier": "@Autowired\n\tprivate", "type": "GetMapConfigurationCommand", "declarator": "mapConfigurationCommand", "var_name": "mapConfigurationCommand"}], "methods": [{"identifier": "getEmptyCommandRequest", "parameters": "()", "modifiers": "@Override public", "return": "GetConfigurationRequest", "signature": "GetConfigurationRequest getEmptyCommandRequest()", "full_signature": "@Override public GetConfigurationRequest getEmptyCommandRequest()", "class_method_signature": "GetConfigurationCommand.getEmptyCommandRequest()", "testcase": false, "constructor": false}, {"identifier": "getEmptyCommandResponse", "parameters": "()", "modifiers": "@Override public", "return": "GetConfigurationResponse", "signature": "GetConfigurationResponse getEmptyCommandResponse()", "full_signature": "@Override public GetConfigurationResponse getEmptyCommandResponse()", "class_method_signature": "GetConfigurationCommand.getEmptyCommandResponse()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(GetConfigurationRequest request, GetConfigurationResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void execute(GetConfigurationRequest request, GetConfigurationResponse response)", "full_signature": "@Override public void execute(GetConfigurationRequest request, GetConfigurationResponse response)", "class_method_signature": "GetConfigurationCommand.execute(GetConfigurationRequest request, GetConfigurationResponse response)", "testcase": false, "constructor": false}], "file": "command/src/main/java/org/geomajas/command/configuration/GetConfigurationCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(GetConfigurationRequest request, GetConfigurationResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(GetConfigurationRequest request, GetConfigurationResponse response) throws Exception {\n\t\tif (null == request.getApplicationId()) {\n\t\t\tthrow new GeomajasException(ExceptionCode.PARAMETER_MISSING, \"applicationId\");\n\t\t}\n\n\t\t// the data is explicitly copied as this assures the security is considered when copying.\n\t\tClientApplicationInfo original = context.getBean(request.getApplicationId(), ClientApplicationInfo.class);\n\t\tif (original == null) {\n\t\t\tthrow new GeomajasException(ExceptionCode.APPLICATION_NOT_FOUND, request.getApplicationId());\n\t\t}\n\t\tClientApplicationInfo client = new ClientApplicationInfo();\n\t\tclient.setId(original.getId());\n\t\tif (!(original.getUserData() instanceof ServerSideOnlyInfo)) {\n\t\t\tclient.setUserData(original.getUserData());\n\t\t}\n\t\tclient.setWidgetInfo(mapConfigurationCommand.securityClone(original.getWidgetInfo()));\n\t\tclient.setScreenDpi(original.getScreenDpi());\n\t\tList<ClientMapInfo> maps = new ArrayList<ClientMapInfo>();\n\t\tclient.setMaps(maps);\n\t\tfor (ClientMapInfo map : original.getMaps()) {\n\t\t\tmaps.add(mapConfigurationCommand.securityClone(map));\n\t\t}\n\t\tresponse.setApplication(client);\n\t}", "signature": "void execute(GetConfigurationRequest request, GetConfigurationResponse response)", "full_signature": "@Override public void execute(GetConfigurationRequest request, GetConfigurationResponse response)", "class_method_signature": "GetConfigurationCommand.execute(GetConfigurationRequest request, GetConfigurationResponse response)", "testcase": false, "constructor": false, "invocations": ["getApplicationId", "getBean", "getApplicationId", "getApplicationId", "setId", "getId", "getUserData", "setUserData", "getUserData", "setWidgetInfo", "securityClone", "getWidgetInfo", "setScreenDpi", "getScreenDpi", "setMaps", "getMaps", "add", "securityClone", "setApplication"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}