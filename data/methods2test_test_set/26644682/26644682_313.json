{"test_class": {"identifier": "CommandHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ObjectMapper mapper = new ObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/command/CommandHelperTest.java"}, "test_case": {"identifier": "testCommandToAsync", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCommandToAsync() throws Exception {\n        GenericCommand<InputStream> command = new CommandHelperTestCommand();\n\n        final ResponseEntity<?> responseEntity = CommandHelper.async(command);\n        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    }", "signature": "void testCommandToAsync()", "full_signature": "@Test public void testCommandToAsync()", "class_method_signature": "CommandHelperTest.testCommandToAsync()", "testcase": true, "constructor": false, "invocations": ["async", "assertEquals", "getStatusCode"]}, "focal_class": {"identifier": "CommandHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CommandHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CommandHelper.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "CommandHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " CommandHelper()", "full_signature": "private  CommandHelper()", "class_method_signature": "CommandHelper.CommandHelper()", "testcase": false, "constructor": true}, {"identifier": "toStreaming", "parameters": "(final HystrixCommand<InputStream> command)", "modifiers": "public static", "return": "StreamingResponseBody", "signature": "StreamingResponseBody toStreaming(final HystrixCommand<InputStream> command)", "full_signature": "public static StreamingResponseBody toStreaming(final HystrixCommand<InputStream> command)", "class_method_signature": "CommandHelper.toStreaming(final HystrixCommand<InputStream> command)", "testcase": false, "constructor": false}, {"identifier": "async", "parameters": "(final GenericCommand<?> command)", "modifiers": "public static", "return": "ResponseEntity<Void>", "signature": "ResponseEntity<Void> async(final GenericCommand<?> command)", "full_signature": "public static ResponseEntity<Void> async(final GenericCommand<?> command)", "class_method_signature": "CommandHelper.async(final GenericCommand<?> command)", "testcase": false, "constructor": false}, {"identifier": "toStreaming", "parameters": "(final GenericCommand<InputStream> command)", "modifiers": "public static", "return": "ResponseEntity<StreamingResponseBody>", "signature": "ResponseEntity<StreamingResponseBody> toStreaming(final GenericCommand<InputStream> command)", "full_signature": "public static ResponseEntity<StreamingResponseBody> toStreaming(final GenericCommand<InputStream> command)", "class_method_signature": "CommandHelper.toStreaming(final GenericCommand<InputStream> command)", "testcase": false, "constructor": false}, {"identifier": "toPublisher", "parameters": "(final Class<T> clazz, final ObjectMapper mapper,\n            final HystrixCommand<InputStream> command)", "modifiers": "public static", "return": "Publisher<T>", "signature": "Publisher<T> toPublisher(final Class<T> clazz, final ObjectMapper mapper,\n            final HystrixCommand<InputStream> command)", "full_signature": "public static Publisher<T> toPublisher(final Class<T> clazz, final ObjectMapper mapper,\n            final HystrixCommand<InputStream> command)", "class_method_signature": "CommandHelper.toPublisher(final Class<T> clazz, final ObjectMapper mapper,\n            final HystrixCommand<InputStream> command)", "testcase": false, "constructor": false}, {"identifier": "toStream", "parameters": "(Class<T> clazz, ObjectMapper mapper, HystrixCommand<InputStream> command)", "modifiers": "public static", "return": "Stream<T>", "signature": "Stream<T> toStream(Class<T> clazz, ObjectMapper mapper, HystrixCommand<InputStream> command)", "full_signature": "public static Stream<T> toStream(Class<T> clazz, ObjectMapper mapper, HystrixCommand<InputStream> command)", "class_method_signature": "CommandHelper.toStream(Class<T> clazz, ObjectMapper mapper, HystrixCommand<InputStream> command)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/command/CommandHelper.java"}, "focal_method": {"identifier": "async", "parameters": "(final GenericCommand<?> command)", "modifiers": "public static", "return": "ResponseEntity<Void>", "body": "public static ResponseEntity<Void> async(final GenericCommand<?> command) {\n        final Observable<?> stream = command.toObservable();\n        return stream.map(is -> {\n            // copy all headers from the command response so that the mime-type is correctly forwarded. Command has\n            // the correct headers due to call to toBlocking() below.\n            final MultiValueMap<String, String> headers = new HttpHeaders();\n            HttpStatus status = command.getStatus();\n            for (Header header : command.getCommandResponseHeaders()) {\n                headers.put(header.getName(), Collections.singletonList(header.getValue()));\n            }\n            return new ResponseEntity<Void>(null, headers, status);\n        }).toBlocking().first();\n    }", "signature": "ResponseEntity<Void> async(final GenericCommand<?> command)", "full_signature": "public static ResponseEntity<Void> async(final GenericCommand<?> command)", "class_method_signature": "CommandHelper.async(final GenericCommand<?> command)", "testcase": false, "constructor": false, "invocations": ["toObservable", "first", "toBlocking", "map", "getStatus", "getCommandResponseHeaders", "put", "getName", "singletonList", "getValue"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}