{"test_class": {"identifier": "PackedLocalTimeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/tech/tablesaw/columns/times/PackedLocalTimeTest.java"}, "test_case": {"identifier": "testGetMinuteOfDay", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetMinuteOfDay() {\n    LocalTime now = LocalTime.now();\n    assertEquals(now.get(ChronoField.MINUTE_OF_DAY), getMinuteOfDay(pack(now)), 0.0001);\n  }", "signature": "void testGetMinuteOfDay()", "full_signature": "@Test public void testGetMinuteOfDay()", "class_method_signature": "PackedLocalTimeTest.testGetMinuteOfDay()", "testcase": true, "constructor": false, "invocations": ["now", "assertEquals", "get", "getMinuteOfDay", "pack"]}, "focal_class": {"identifier": "PackedLocalTime", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MIDNIGHT = pack(LocalTime.MIDNIGHT);", "modifier": "private static final", "type": "int", "declarator": "MIDNIGHT = pack(LocalTime.MIDNIGHT)", "var_name": "MIDNIGHT"}, {"original_string": "private static final int NOON = pack(LocalTime.NOON);", "modifier": "private static final", "type": "int", "declarator": "NOON = pack(LocalTime.NOON)", "var_name": "NOON"}, {"original_string": "private static final int HOURS_PER_DAY = 24;", "modifier": "private static final", "type": "int", "declarator": "HOURS_PER_DAY = 24", "var_name": "HOURS_PER_DAY"}, {"original_string": "private static final int MINUTES_PER_HOUR = 60;", "modifier": "private static final", "type": "int", "declarator": "MINUTES_PER_HOUR = 60", "var_name": "MINUTES_PER_HOUR"}, {"original_string": "private static final int MINUTES_PER_DAY = MINUTES_PER_HOUR * HOURS_PER_DAY;", "modifier": "private static final", "type": "int", "declarator": "MINUTES_PER_DAY = MINUTES_PER_HOUR * HOURS_PER_DAY", "var_name": "MINUTES_PER_DAY"}, {"original_string": "private static final int SECONDS_PER_MINUTE = 60;", "modifier": "private static final", "type": "int", "declarator": "SECONDS_PER_MINUTE = 60", "var_name": "SECONDS_PER_MINUTE"}, {"original_string": "private static final int SECONDS_PER_HOUR = SECONDS_PER_MINUTE * MINUTES_PER_HOUR;", "modifier": "private static final", "type": "int", "declarator": "SECONDS_PER_HOUR = SECONDS_PER_MINUTE * MINUTES_PER_HOUR", "var_name": "SECONDS_PER_HOUR"}, {"original_string": "private static final int SECONDS_PER_DAY = SECONDS_PER_HOUR * HOURS_PER_DAY;", "modifier": "private static final", "type": "int", "declarator": "SECONDS_PER_DAY = SECONDS_PER_HOUR * HOURS_PER_DAY", "var_name": "SECONDS_PER_DAY"}, {"original_string": "private static final int MILLIS_PER_DAY = SECONDS_PER_DAY * 1000;", "modifier": "private static final", "type": "int", "declarator": "MILLIS_PER_DAY = SECONDS_PER_DAY * 1000", "var_name": "MILLIS_PER_DAY"}, {"original_string": "private static final long NANOS_PER_SECOND = 1000_000_000L;", "modifier": "private static final", "type": "long", "declarator": "NANOS_PER_SECOND = 1000_000_000L", "var_name": "NANOS_PER_SECOND"}, {"original_string": "private static final long NANOS_PER_MINUTE = NANOS_PER_SECOND * SECONDS_PER_MINUTE;", "modifier": "private static final", "type": "long", "declarator": "NANOS_PER_MINUTE = NANOS_PER_SECOND * SECONDS_PER_MINUTE", "var_name": "NANOS_PER_MINUTE"}, {"original_string": "private static final long NANOS_PER_HOUR = NANOS_PER_MINUTE * MINUTES_PER_HOUR;", "modifier": "private static final", "type": "long", "declarator": "NANOS_PER_HOUR = NANOS_PER_MINUTE * MINUTES_PER_HOUR", "var_name": "NANOS_PER_HOUR"}, {"original_string": "private static final long NANOS_PER_DAY = NANOS_PER_HOUR * HOURS_PER_DAY;", "modifier": "private static final", "type": "long", "declarator": "NANOS_PER_DAY = NANOS_PER_HOUR * HOURS_PER_DAY", "var_name": "NANOS_PER_DAY"}], "methods": [{"identifier": "getHour", "parameters": "(int time)", "modifiers": "public static", "return": "byte", "signature": "byte getHour(int time)", "full_signature": "public static byte getHour(int time)", "class_method_signature": "PackedLocalTime.getHour(int time)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(int hour, int minute)", "modifiers": "public static", "return": "int", "signature": "int of(int hour, int minute)", "full_signature": "public static int of(int hour, int minute)", "class_method_signature": "PackedLocalTime.of(int hour, int minute)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(int hour, int minute, int second)", "modifiers": "public static", "return": "int", "signature": "int of(int hour, int minute, int second)", "full_signature": "public static int of(int hour, int minute, int second)", "class_method_signature": "PackedLocalTime.of(int hour, int minute, int second)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(int hour, int minute, int second, int millis)", "modifiers": "public static", "return": "int", "signature": "int of(int hour, int minute, int second, int millis)", "full_signature": "public static int of(int hour, int minute, int second, int millis)", "class_method_signature": "PackedLocalTime.of(int hour, int minute, int second, int millis)", "testcase": false, "constructor": false}, {"identifier": "truncatedTo", "parameters": "(TemporalUnit unit, int packedTime)", "modifiers": "public static", "return": "int", "signature": "int truncatedTo(TemporalUnit unit, int packedTime)", "full_signature": "public static int truncatedTo(TemporalUnit unit, int packedTime)", "class_method_signature": "PackedLocalTime.truncatedTo(TemporalUnit unit, int packedTime)", "testcase": false, "constructor": false}, {"identifier": "plusHours", "parameters": "(int hoursToAdd, int packedTime)", "modifiers": "public static", "return": "int", "signature": "int plusHours(int hoursToAdd, int packedTime)", "full_signature": "public static int plusHours(int hoursToAdd, int packedTime)", "class_method_signature": "PackedLocalTime.plusHours(int hoursToAdd, int packedTime)", "testcase": false, "constructor": false}, {"identifier": "plusMinutes", "parameters": "(int minutesToAdd, int packedTime)", "modifiers": "public static", "return": "int", "signature": "int plusMinutes(int minutesToAdd, int packedTime)", "full_signature": "public static int plusMinutes(int minutesToAdd, int packedTime)", "class_method_signature": "PackedLocalTime.plusMinutes(int minutesToAdd, int packedTime)", "testcase": false, "constructor": false}, {"identifier": "plusSeconds", "parameters": "(int secondsToAdd, int packedTime)", "modifiers": "public static", "return": "int", "signature": "int plusSeconds(int secondsToAdd, int packedTime)", "full_signature": "public static int plusSeconds(int secondsToAdd, int packedTime)", "class_method_signature": "PackedLocalTime.plusSeconds(int secondsToAdd, int packedTime)", "testcase": false, "constructor": false}, {"identifier": "plusMilliseconds", "parameters": "(int msToAdd, int packedTime)", "modifiers": "public static", "return": "int", "signature": "int plusMilliseconds(int msToAdd, int packedTime)", "full_signature": "public static int plusMilliseconds(int msToAdd, int packedTime)", "class_method_signature": "PackedLocalTime.plusMilliseconds(int msToAdd, int packedTime)", "testcase": false, "constructor": false}, {"identifier": "minusHours", "parameters": "(int hoursToSubtract, int packedTime)", "modifiers": "public static", "return": "int", "signature": "int minusHours(int hoursToSubtract, int packedTime)", "full_signature": "public static int minusHours(int hoursToSubtract, int packedTime)", "class_method_signature": "PackedLocalTime.minusHours(int hoursToSubtract, int packedTime)", "testcase": false, "constructor": false}, {"identifier": "minusMinutes", "parameters": "(int minutesToSubtract, int packedTime)", "modifiers": "public static", "return": "int", "signature": "int minusMinutes(int minutesToSubtract, int packedTime)", "full_signature": "public static int minusMinutes(int minutesToSubtract, int packedTime)", "class_method_signature": "PackedLocalTime.minusMinutes(int minutesToSubtract, int packedTime)", "testcase": false, "constructor": false}, {"identifier": "minusSeconds", "parameters": "(int secondsToSubtract, int packedTime)", "modifiers": "public static", "return": "int", "signature": "int minusSeconds(int secondsToSubtract, int packedTime)", "full_signature": "public static int minusSeconds(int secondsToSubtract, int packedTime)", "class_method_signature": "PackedLocalTime.minusSeconds(int secondsToSubtract, int packedTime)", "testcase": false, "constructor": false}, {"identifier": "minusMilliseconds", "parameters": "(int millisToSubtract, int packedTime)", "modifiers": "public static", "return": "int", "signature": "int minusMilliseconds(int millisToSubtract, int packedTime)", "full_signature": "public static int minusMilliseconds(int millisToSubtract, int packedTime)", "class_method_signature": "PackedLocalTime.minusMilliseconds(int millisToSubtract, int packedTime)", "testcase": false, "constructor": false}, {"identifier": "withHour", "parameters": "(int hour, int packedTime)", "modifiers": "public static", "return": "int", "signature": "int withHour(int hour, int packedTime)", "full_signature": "public static int withHour(int hour, int packedTime)", "class_method_signature": "PackedLocalTime.withHour(int hour, int packedTime)", "testcase": false, "constructor": false}, {"identifier": "withMinute", "parameters": "(int minute, int packedTime)", "modifiers": "public static", "return": "int", "signature": "int withMinute(int minute, int packedTime)", "full_signature": "public static int withMinute(int minute, int packedTime)", "class_method_signature": "PackedLocalTime.withMinute(int minute, int packedTime)", "testcase": false, "constructor": false}, {"identifier": "withSecond", "parameters": "(int second, int packedTime)", "modifiers": "public static", "return": "int", "signature": "int withSecond(int second, int packedTime)", "full_signature": "public static int withSecond(int second, int packedTime)", "class_method_signature": "PackedLocalTime.withSecond(int second, int packedTime)", "testcase": false, "constructor": false}, {"identifier": "withMillisecond", "parameters": "(int milliseconds, int packedTime)", "modifiers": "public static", "return": "int", "signature": "int withMillisecond(int milliseconds, int packedTime)", "full_signature": "public static int withMillisecond(int milliseconds, int packedTime)", "class_method_signature": "PackedLocalTime.withMillisecond(int milliseconds, int packedTime)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(int hour, int minute, int second, int millis)", "modifiers": "private static", "return": "int", "signature": "int create(int hour, int minute, int second, int millis)", "full_signature": "private static int create(int hour, int minute, int second, int millis)", "class_method_signature": "PackedLocalTime.create(int hour, int minute, int second, int millis)", "testcase": false, "constructor": false}, {"identifier": "getMillisecondOfMinute", "parameters": "(int time)", "modifiers": "public static", "return": "char", "signature": "char getMillisecondOfMinute(int time)", "full_signature": "public static char getMillisecondOfMinute(int time)", "class_method_signature": "PackedLocalTime.getMillisecondOfMinute(int time)", "testcase": false, "constructor": false}, {"identifier": "getNano", "parameters": "(int time)", "modifiers": "public static", "return": "int", "signature": "int getNano(int time)", "full_signature": "public static int getNano(int time)", "class_method_signature": "PackedLocalTime.getNano(int time)", "testcase": false, "constructor": false}, {"identifier": "getMilliseconds", "parameters": "(int time)", "modifiers": "public static", "return": "int", "signature": "int getMilliseconds(int time)", "full_signature": "public static int getMilliseconds(int time)", "class_method_signature": "PackedLocalTime.getMilliseconds(int time)", "testcase": false, "constructor": false}, {"identifier": "toNanoOfDay", "parameters": "(int time)", "modifiers": "public static", "return": "long", "signature": "long toNanoOfDay(int time)", "full_signature": "public static long toNanoOfDay(int time)", "class_method_signature": "PackedLocalTime.toNanoOfDay(int time)", "testcase": false, "constructor": false}, {"identifier": "asLocalTime", "parameters": "(int time)", "modifiers": "public static", "return": "LocalTime", "signature": "LocalTime asLocalTime(int time)", "full_signature": "public static LocalTime asLocalTime(int time)", "class_method_signature": "PackedLocalTime.asLocalTime(int time)", "testcase": false, "constructor": false}, {"identifier": "getMinute", "parameters": "(int time)", "modifiers": "public static", "return": "byte", "signature": "byte getMinute(int time)", "full_signature": "public static byte getMinute(int time)", "class_method_signature": "PackedLocalTime.getMinute(int time)", "testcase": false, "constructor": false}, {"identifier": "pack", "parameters": "(LocalTime time)", "modifiers": "public static", "return": "int", "signature": "int pack(LocalTime time)", "full_signature": "public static int pack(LocalTime time)", "class_method_signature": "PackedLocalTime.pack(LocalTime time)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(byte hour, byte minute, char millis)", "modifiers": "private static", "return": "int", "signature": "int create(byte hour, byte minute, char millis)", "full_signature": "private static int create(byte hour, byte minute, char millis)", "class_method_signature": "PackedLocalTime.create(byte hour, byte minute, char millis)", "testcase": false, "constructor": false}, {"identifier": "getSecond", "parameters": "(int packedLocalTime)", "modifiers": "public static", "return": "byte", "signature": "byte getSecond(int packedLocalTime)", "full_signature": "public static byte getSecond(int packedLocalTime)", "class_method_signature": "PackedLocalTime.getSecond(int packedLocalTime)", "testcase": false, "constructor": false}, {"identifier": "getMinuteOfDay", "parameters": "(int packedLocalTime)", "modifiers": "public static", "return": "int", "signature": "int getMinuteOfDay(int packedLocalTime)", "full_signature": "public static int getMinuteOfDay(int packedLocalTime)", "class_method_signature": "PackedLocalTime.getMinuteOfDay(int packedLocalTime)", "testcase": false, "constructor": false}, {"identifier": "getSecondOfDay", "parameters": "(int packedLocalTime)", "modifiers": "public static", "return": "int", "signature": "int getSecondOfDay(int packedLocalTime)", "full_signature": "public static int getSecondOfDay(int packedLocalTime)", "class_method_signature": "PackedLocalTime.getSecondOfDay(int packedLocalTime)", "testcase": false, "constructor": false}, {"identifier": "getMillisecondOfDay", "parameters": "(int packedLocalTime)", "modifiers": "public static", "return": "int", "signature": "int getMillisecondOfDay(int packedLocalTime)", "full_signature": "public static int getMillisecondOfDay(int packedLocalTime)", "class_method_signature": "PackedLocalTime.getMillisecondOfDay(int packedLocalTime)", "testcase": false, "constructor": false}, {"identifier": "toShortTimeString", "parameters": "(int time)", "modifiers": "public static", "return": "String", "signature": "String toShortTimeString(int time)", "full_signature": "public static String toShortTimeString(int time)", "class_method_signature": "PackedLocalTime.toShortTimeString(int time)", "testcase": false, "constructor": false}, {"identifier": "isMidnight", "parameters": "(int packedTime)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMidnight(int packedTime)", "full_signature": "public static boolean isMidnight(int packedTime)", "class_method_signature": "PackedLocalTime.isMidnight(int packedTime)", "testcase": false, "constructor": false}, {"identifier": "isNoon", "parameters": "(int packedTime)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNoon(int packedTime)", "full_signature": "public static boolean isNoon(int packedTime)", "class_method_signature": "PackedLocalTime.isNoon(int packedTime)", "testcase": false, "constructor": false}, {"identifier": "isAfter", "parameters": "(int packedTime, int otherPackedTime)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAfter(int packedTime, int otherPackedTime)", "full_signature": "public static boolean isAfter(int packedTime, int otherPackedTime)", "class_method_signature": "PackedLocalTime.isAfter(int packedTime, int otherPackedTime)", "testcase": false, "constructor": false}, {"identifier": "isOnOrAfter", "parameters": "(int packedTime, int otherPackedTime)", "modifiers": "public static", "return": "boolean", "signature": "boolean isOnOrAfter(int packedTime, int otherPackedTime)", "full_signature": "public static boolean isOnOrAfter(int packedTime, int otherPackedTime)", "class_method_signature": "PackedLocalTime.isOnOrAfter(int packedTime, int otherPackedTime)", "testcase": false, "constructor": false}, {"identifier": "isBefore", "parameters": "(int packedTime, int otherPackedTime)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBefore(int packedTime, int otherPackedTime)", "full_signature": "public static boolean isBefore(int packedTime, int otherPackedTime)", "class_method_signature": "PackedLocalTime.isBefore(int packedTime, int otherPackedTime)", "testcase": false, "constructor": false}, {"identifier": "isOnOrBefore", "parameters": "(int packedTime, int otherPackedTime)", "modifiers": "public static", "return": "boolean", "signature": "boolean isOnOrBefore(int packedTime, int otherPackedTime)", "full_signature": "public static boolean isOnOrBefore(int packedTime, int otherPackedTime)", "class_method_signature": "PackedLocalTime.isOnOrBefore(int packedTime, int otherPackedTime)", "testcase": false, "constructor": false}, {"identifier": "isEqualTo", "parameters": "(int packedTime, int otherPackedTime)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEqualTo(int packedTime, int otherPackedTime)", "full_signature": "public static boolean isEqualTo(int packedTime, int otherPackedTime)", "class_method_signature": "PackedLocalTime.isEqualTo(int packedTime, int otherPackedTime)", "testcase": false, "constructor": false}, {"identifier": "AM", "parameters": "(int packedTime)", "modifiers": "public static", "return": "boolean", "signature": "boolean AM(int packedTime)", "full_signature": "public static boolean AM(int packedTime)", "class_method_signature": "PackedLocalTime.AM(int packedTime)", "testcase": false, "constructor": false}, {"identifier": "PM", "parameters": "(int packedTime)", "modifiers": "public static", "return": "boolean", "signature": "boolean PM(int packedTime)", "full_signature": "public static boolean PM(int packedTime)", "class_method_signature": "PackedLocalTime.PM(int packedTime)", "testcase": false, "constructor": false}, {"identifier": "hoursUntil", "parameters": "(int packedTimeEnd, int packedTimeStart)", "modifiers": "public static", "return": "int", "signature": "int hoursUntil(int packedTimeEnd, int packedTimeStart)", "full_signature": "public static int hoursUntil(int packedTimeEnd, int packedTimeStart)", "class_method_signature": "PackedLocalTime.hoursUntil(int packedTimeEnd, int packedTimeStart)", "testcase": false, "constructor": false}, {"identifier": "minutesUntil", "parameters": "(int packedTimeEnd, int packedTimeStart)", "modifiers": "public static", "return": "int", "signature": "int minutesUntil(int packedTimeEnd, int packedTimeStart)", "full_signature": "public static int minutesUntil(int packedTimeEnd, int packedTimeStart)", "class_method_signature": "PackedLocalTime.minutesUntil(int packedTimeEnd, int packedTimeStart)", "testcase": false, "constructor": false}, {"identifier": "secondsUntil", "parameters": "(int packedTimeEnd, int packedTimeStart)", "modifiers": "public static", "return": "int", "signature": "int secondsUntil(int packedTimeEnd, int packedTimeStart)", "full_signature": "public static int secondsUntil(int packedTimeEnd, int packedTimeStart)", "class_method_signature": "PackedLocalTime.secondsUntil(int packedTimeEnd, int packedTimeStart)", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/columns/times/PackedLocalTime.java"}, "focal_method": {"identifier": "getMinuteOfDay", "parameters": "(int packedLocalTime)", "modifiers": "public static", "return": "int", "body": "public static int getMinuteOfDay(int packedLocalTime) {\n    if (packedLocalTime == TimeColumnType.missingValueIndicator()) {\n      return IntColumnType.missingValueIndicator();\n    }\n    return getHour(packedLocalTime) * 60 + getMinute(packedLocalTime);\n  }", "signature": "int getMinuteOfDay(int packedLocalTime)", "full_signature": "public static int getMinuteOfDay(int packedLocalTime)", "class_method_signature": "PackedLocalTime.getMinuteOfDay(int packedLocalTime)", "testcase": false, "constructor": false, "invocations": ["missingValueIndicator", "missingValueIndicator", "getHour", "getMinute"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}