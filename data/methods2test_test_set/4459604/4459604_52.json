{"test_class": {"identifier": "HighConcurrencyTemplateCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "handlebars/src/test/java/com/github/jknack/handlebars/cache/HighConcurrencyTemplateCacheTest.java"}, "test_case": {"identifier": "errorShouldBeReThrow", "parameters": "()", "modifiers": "@Test(expected = Error.class) @SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@Test(expected = Error.class)\n  @SuppressWarnings(\"unchecked\")\n  public void errorShouldBeReThrow() throws Exception {\n    ConcurrentMap<TemplateSource, Future<Pair<TemplateSource, Template>>> cache = createMock(\n        ConcurrentHashMap.class);\n\n    TemplateSource source = new URLTemplateSource(\"/template.hbs\", getClass().getResource(\n        \"/template.hbs\"));\n\n    Future<Pair<TemplateSource, Template>> future = createMock(Future.class);\n    // 1st try interrupt thread\n    expect(cache.get(source)).andReturn(future);\n    expect(future.get()).andThrow(new Error());\n\n    // 2nd success\n    Template template = createMock(Template.class);\n    Pair<TemplateSource, Template> pair = createMock(Pair.class);\n    expect(pair.getLeft()).andReturn(source);\n    expect(pair.getValue()).andReturn(template);\n    expect(cache.get(source)).andReturn(future);\n    expect(future.get()).andReturn(pair).times(2);\n\n    Parser parser = createMock(Parser.class);\n\n    replay(parser, template, cache, future, pair);\n\n    // 1st call, parse must be call it\n    assertEquals(template, new HighConcurrencyTemplateCache(cache).get(source, parser));\n\n    verify(parser, template, cache, future, pair);\n  }", "signature": "void errorShouldBeReThrow()", "full_signature": "@Test(expected = Error.class) @SuppressWarnings(\"unchecked\") public void errorShouldBeReThrow()", "class_method_signature": "HighConcurrencyTemplateCacheTest.errorShouldBeReThrow()", "testcase": true, "constructor": false, "invocations": ["createMock", "getResource", "getClass", "createMock", "andReturn", "expect", "get", "andThrow", "expect", "get", "createMock", "createMock", "andReturn", "expect", "getLeft", "andReturn", "expect", "getValue", "andReturn", "expect", "get", "times", "andReturn", "expect", "get", "createMock", "replay", "assertEquals", "get", "verify"]}, "focal_class": {"identifier": "HighConcurrencyTemplateCache", "superclass": "", "interfaces": "implements TemplateCache", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private final ConcurrentMap<TemplateSource, Future<Pair<TemplateSource, Template>>> cache;", "modifier": "private final", "type": "ConcurrentMap<TemplateSource, Future<Pair<TemplateSource, Template>>>", "declarator": "cache", "var_name": "cache"}, {"original_string": "private boolean reload;", "modifier": "private", "type": "boolean", "declarator": "reload", "var_name": "reload"}], "methods": [{"identifier": "HighConcurrencyTemplateCache", "parameters": "(\n      final ConcurrentMap<TemplateSource, Future<Pair<TemplateSource, Template>>> cache)", "modifiers": "protected", "return": "", "signature": " HighConcurrencyTemplateCache(\n      final ConcurrentMap<TemplateSource, Future<Pair<TemplateSource, Template>>> cache)", "full_signature": "protected  HighConcurrencyTemplateCache(\n      final ConcurrentMap<TemplateSource, Future<Pair<TemplateSource, Template>>> cache)", "class_method_signature": "HighConcurrencyTemplateCache.HighConcurrencyTemplateCache(\n      final ConcurrentMap<TemplateSource, Future<Pair<TemplateSource, Template>>> cache)", "testcase": false, "constructor": true}, {"identifier": "HighConcurrencyTemplateCache", "parameters": "()", "modifiers": "public", "return": "", "signature": " HighConcurrencyTemplateCache()", "full_signature": "public  HighConcurrencyTemplateCache()", "class_method_signature": "HighConcurrencyTemplateCache.HighConcurrencyTemplateCache()", "testcase": false, "constructor": true}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "HighConcurrencyTemplateCache.clear()", "testcase": false, "constructor": false}, {"identifier": "evict", "parameters": "(final TemplateSource source)", "modifiers": "@Override public", "return": "void", "signature": "void evict(final TemplateSource source)", "full_signature": "@Override public void evict(final TemplateSource source)", "class_method_signature": "HighConcurrencyTemplateCache.evict(final TemplateSource source)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final TemplateSource source, final Parser parser)", "modifiers": "@Override public", "return": "Template", "signature": "Template get(final TemplateSource source, final Parser parser)", "full_signature": "@Override public Template get(final TemplateSource source, final Parser parser)", "class_method_signature": "HighConcurrencyTemplateCache.get(final TemplateSource source, final Parser parser)", "testcase": false, "constructor": false}, {"identifier": "setReload", "parameters": "(final boolean reload)", "modifiers": "@Override public", "return": "HighConcurrencyTemplateCache", "signature": "HighConcurrencyTemplateCache setReload(final boolean reload)", "full_signature": "@Override public HighConcurrencyTemplateCache setReload(final boolean reload)", "class_method_signature": "HighConcurrencyTemplateCache.setReload(final boolean reload)", "testcase": false, "constructor": false}, {"identifier": "cacheGet", "parameters": "(final TemplateSource source, final Parser parser)", "modifiers": "private", "return": "Template", "signature": "Template cacheGet(final TemplateSource source, final Parser parser)", "full_signature": "private Template cacheGet(final TemplateSource source, final Parser parser)", "class_method_signature": "HighConcurrencyTemplateCache.cacheGet(final TemplateSource source, final Parser parser)", "testcase": false, "constructor": false}, {"identifier": "newTask", "parameters": "(final TemplateSource source,\n      final Parser parser)", "modifiers": "private", "return": "FutureTask<Pair<TemplateSource, Template>>", "signature": "FutureTask<Pair<TemplateSource, Template>> newTask(final TemplateSource source,\n      final Parser parser)", "full_signature": "private FutureTask<Pair<TemplateSource, Template>> newTask(final TemplateSource source,\n      final Parser parser)", "class_method_signature": "HighConcurrencyTemplateCache.newTask(final TemplateSource source,\n      final Parser parser)", "testcase": false, "constructor": false}, {"identifier": "putIfAbsent", "parameters": "(final TemplateSource source,\n      final FutureTask<Pair<TemplateSource, Template>> futureTask)", "modifiers": "private", "return": "Future<Pair<TemplateSource, Template>>", "signature": "Future<Pair<TemplateSource, Template>> putIfAbsent(final TemplateSource source,\n      final FutureTask<Pair<TemplateSource, Template>> futureTask)", "full_signature": "private Future<Pair<TemplateSource, Template>> putIfAbsent(final TemplateSource source,\n      final FutureTask<Pair<TemplateSource, Template>> futureTask)", "class_method_signature": "HighConcurrencyTemplateCache.putIfAbsent(final TemplateSource source,\n      final FutureTask<Pair<TemplateSource, Template>> futureTask)", "testcase": false, "constructor": false}, {"identifier": "launderThrowable", "parameters": "(final TemplateSource source, final Throwable cause)", "modifiers": "private", "return": "RuntimeException", "signature": "RuntimeException launderThrowable(final TemplateSource source, final Throwable cause)", "full_signature": "private RuntimeException launderThrowable(final TemplateSource source, final Throwable cause)", "class_method_signature": "HighConcurrencyTemplateCache.launderThrowable(final TemplateSource source, final Throwable cause)", "testcase": false, "constructor": false}], "file": "handlebars/src/main/java/com/github/jknack/handlebars/cache/HighConcurrencyTemplateCache.java"}, "focal_method": {"identifier": "get", "parameters": "(final TemplateSource source, final Parser parser)", "modifiers": "@Override public", "return": "Template", "body": "@Override\n  public Template get(final TemplateSource source, final Parser parser) throws IOException {\n    notNull(source, \"The source is required.\");\n    notNull(parser, \"The parser is required.\");\n\n    /**\n     * Don't keep duplicated entries, remove old templates if a change is detected.\n     */\n    return cacheGet(source, parser);\n  }", "signature": "Template get(final TemplateSource source, final Parser parser)", "full_signature": "@Override public Template get(final TemplateSource source, final Parser parser)", "class_method_signature": "HighConcurrencyTemplateCache.get(final TemplateSource source, final Parser parser)", "testcase": false, "constructor": false, "invocations": ["notNull", "notNull", "cacheGet"]}, "repository": {"repo_id": 4459604, "url": "https://github.com/jknack/handlebars.java", "stars": 1107, "created": "5/27/2012 3:22:22 AM +00:00", "updates": "2020-01-24T06:58:31+00:00", "fork": "False", "license": "licensed"}}