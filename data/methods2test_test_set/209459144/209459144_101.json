{"test_class": {"identifier": "ProjectServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ProjectServiceTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ProjectServiceTest.class)", "var_name": "LOG"}, {"original_string": "ProjectService projectService = new ProjectService();", "modifier": "", "type": "ProjectService", "declarator": "projectService = new ProjectService()", "var_name": "projectService"}], "file": "submarine-server/server-core/src/test/java/org/apache/submarine/server/workbench/database/service/ProjectServiceTest.java"}, "test_case": {"identifier": "updateByPrimaryKeySelective", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void updateByPrimaryKeySelective() throws Exception {\n    ProjectFiles projectFiles = new ProjectFiles();\n    projectFiles.setFileContent(\"ProjectServiceTest-FileContent\");\n    projectFiles.setFileName(\"ProjectServiceTest-FileName\");\n    projectFiles.setCreateBy(\"ProjectServiceTest-UserName\");\n\n    Project project = new Project();\n    project.setDescription(\"ProjectServiceTest-Description\");\n    project.setName(\"ProjectServiceTest-ProjectName\");\n    project.setType(\"PROJECT_TYPE_NOTEBOOK\");\n    project.setUserName(\"ProjectServiceTest-UserName\");\n    project.setVisibility(\"PROJECT_VISIBILITY_PRIVATE\");\n    project.setCreateBy(\"ProjectServiceTest-UserName\");\n    List list = new ArrayList<ProjectFiles>();\n    list.add(projectFiles);\n    project.setProjectFilesList(list);\n\n    Boolean ret = projectService.add(project);\n    assertTrue(ret);\n\n    project.setName(\"update_projectName\");\n    project.setDescription(\"update_description\");\n    project.setVisibility(\"PROJECT_VISIBILITY_PUBLIC\");\n    project.setUpdateBy(\"project_updateBy\");\n    ProjectFiles projectFilesUpdate = new ProjectFiles();\n    projectFilesUpdate.setFileContent(\"ProjectServiceTest-FileContent2\");\n    projectFilesUpdate.setFileName(\"ProjectServiceTest-FileName2\");\n    projectFilesUpdate.setCreateBy(\"ProjectServiceTest-UserName2\");\n    list.add(projectFilesUpdate);\n    projectFiles.setFileName(\"update_fileName\");\n    projectFiles.setFileContent(\"update_fileContent\");\n    projectFiles.setUpdateBy(\"projectFiles_updateby\");\n    boolean editRet = projectService.updateByPrimaryKeySelective(project);\n    assertTrue(editRet);\n    List<Project> projectList = projectService.queryPageList(\"ProjectServiceTest-UserName\",\n        \"create_time\", \"desc\", 0, 100);\n    assertEquals(projectList.size(), 1);\n\n    Project projectDb = projectList.get(0);\n    assertEquals(project.getName(), projectDb.getName());\n    assertEquals(project.getDescription(), projectDb.getDescription());\n    assertEquals(project.getVisibility(), projectDb.getVisibility());\n    assertEquals(project.getUpdateBy(), projectDb.getUpdateBy());\n    LOG.info(\"update_time:{}\", projectDb.getUpdateTime());\n\n    List<ProjectFiles> projectFilesList = projectDb.getProjectFilesList();\n    for (ProjectFiles files : projectFilesList) {\n      if (!files.getFileContent().equals(\"ProjectServiceTest-FileContent2\")) {\n        assertEquals(files.getFileName(), projectFiles.getFileName());\n        assertEquals(files.getFileContent(), projectFiles.getFileContent());\n        assertEquals(files.getUpdateBy(), projectFiles.getUpdateBy());\n      }\n    }\n    assertEquals(projectFilesList.size(), 2);\n  }", "signature": "void updateByPrimaryKeySelective()", "full_signature": "@Test public void updateByPrimaryKeySelective()", "class_method_signature": "ProjectServiceTest.updateByPrimaryKeySelective()", "testcase": true, "constructor": false, "invocations": ["setFileContent", "setFileName", "setCreateBy", "setDescription", "setName", "setType", "setUserName", "setVisibility", "setCreateBy", "add", "setProjectFilesList", "add", "assertTrue", "setName", "setDescription", "setVisibility", "setUpdateBy", "setFileContent", "setFileName", "setCreateBy", "add", "setFileName", "setFileContent", "setUpdateBy", "updateByPrimaryKeySelective", "assertTrue", "queryPageList", "assertEquals", "size", "get", "assertEquals", "getName", "getName", "assertEquals", "getDescription", "getDescription", "assertEquals", "getVisibility", "getVisibility", "assertEquals", "getUpdateBy", "getUpdateBy", "info", "getUpdateTime", "getProjectFilesList", "equals", "getFileContent", "assertEquals", "getFileName", "getFileName", "assertEquals", "getFileContent", "getFileContent", "assertEquals", "getUpdateBy", "getUpdateBy", "assertEquals", "size"]}, "focal_class": {"identifier": "ProjectService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ProjectService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ProjectService.class)", "var_name": "LOG"}], "methods": [{"identifier": "queryPageList", "parameters": "(String userName,\n                                     String column,\n                                     String order,\n                                     int pageNo,\n                                     int pageSize)", "modifiers": "public", "return": "List<Project>", "signature": "List<Project> queryPageList(String userName,\n                                     String column,\n                                     String order,\n                                     int pageNo,\n                                     int pageSize)", "full_signature": "public List<Project> queryPageList(String userName,\n                                     String column,\n                                     String order,\n                                     int pageNo,\n                                     int pageSize)", "class_method_signature": "ProjectService.queryPageList(String userName,\n                                     String column,\n                                     String order,\n                                     int pageNo,\n                                     int pageSize)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Project project)", "modifiers": "public", "return": "boolean", "signature": "boolean add(Project project)", "full_signature": "public boolean add(Project project)", "class_method_signature": "ProjectService.add(Project project)", "testcase": false, "constructor": false}, {"identifier": "updateByPrimaryKeySelective", "parameters": "(Project project)", "modifiers": "public", "return": "boolean", "signature": "boolean updateByPrimaryKeySelective(Project project)", "full_signature": "public boolean updateByPrimaryKeySelective(Project project)", "class_method_signature": "ProjectService.updateByPrimaryKeySelective(Project project)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String id)", "modifiers": "public", "return": "boolean", "signature": "boolean delete(String id)", "full_signature": "public boolean delete(String id)", "class_method_signature": "ProjectService.delete(String id)", "testcase": false, "constructor": false}], "file": "submarine-server/server-core/src/main/java/org/apache/submarine/server/workbench/database/service/ProjectService.java"}, "focal_method": {"identifier": "updateByPrimaryKeySelective", "parameters": "(Project project)", "modifiers": "public", "return": "boolean", "body": "public boolean updateByPrimaryKeySelective(Project project) throws Exception {\n    LOG.info(\"updateByPrimaryKeySelective({})\", project.toString());\n    try (SqlSession sqlSession = MyBatisUtil.getSqlSession()) {\n      ProjectMapper projectMapper = sqlSession.getMapper(ProjectMapper.class);\n      projectMapper.updateByPrimaryKeySelective(project);\n\n      ProjectFilesMapper projectFilesMapper = sqlSession.getMapper(ProjectFilesMapper.class);\n      Map<String, Object> where = new HashMap<>();\n      where.put(\"projectId\", project.getId());\n      // Take two lists of difference\n      List<ProjectFiles> oldProjectFiles = projectFilesMapper.selectAll(where);\n      List<String> oldProjectFilesId = new ArrayList<>();\n      for (ProjectFiles oldProjectFile : oldProjectFiles) {\n        oldProjectFilesId.add(oldProjectFile.getId());\n      }\n      List<ProjectFiles> currProjectFiles = project.getProjectFilesList();\n      List<String> currProjectFilesId = new ArrayList<>();\n      for (ProjectFiles currProjectFile : currProjectFiles) {\n        currProjectFilesId.add(currProjectFile.getId());\n      }\n\n      for (ProjectFiles old : oldProjectFiles) {\n        if (!currProjectFilesId.contains(old.getId())) {\n          projectFilesMapper.deleteByPrimaryKey(old.getId());\n        } else {\n          for (ProjectFiles currProjectFile : currProjectFiles) {\n            if (currProjectFile.getId() != null && currProjectFile.getId().equals(old.getId())) {\n              projectFilesMapper.updateByPrimaryKeySelective(currProjectFile);\n            }\n          }\n        }\n      }\n      for (ProjectFiles curr : currProjectFiles) {\n        if (curr.getId() == null) {\n          // TODO(zhulinhao)\uff1aThe front desk should pass the projectId\n          curr.setProjectId(project.getId());\n          projectFilesMapper.insert(curr);\n        }\n      }\n\n      sqlSession.commit();\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      throw new Exception(e);\n    }\n    return true;\n  }", "signature": "boolean updateByPrimaryKeySelective(Project project)", "full_signature": "public boolean updateByPrimaryKeySelective(Project project)", "class_method_signature": "ProjectService.updateByPrimaryKeySelective(Project project)", "testcase": false, "constructor": false, "invocations": ["info", "toString", "getSqlSession", "getMapper", "updateByPrimaryKeySelective", "getMapper", "put", "getId", "selectAll", "add", "getId", "getProjectFilesList", "add", "getId", "contains", "getId", "deleteByPrimaryKey", "getId", "getId", "equals", "getId", "getId", "updateByPrimaryKeySelective", "getId", "setProjectId", "getId", "insert", "commit", "error", "getMessage"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}