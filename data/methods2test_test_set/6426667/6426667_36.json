{"test_class": {"identifier": "ThreadSafetyCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final ExpectedException thrown = ExpectedException.none().handleAssertionErrors();", "modifier": "@Rule\n    public final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none().handleAssertionErrors()", "var_name": "thrown"}, {"original_string": "private final ThreadSafetyChecker checker = new ThreadSafetyChecker();", "modifier": "private final", "type": "ThreadSafetyChecker", "declarator": "checker = new ThreadSafetyChecker()", "var_name": "checker"}], "file": "thread-safety-agent/src/test/java/fi/jumi/threadsafetyagent/ThreadSafetyCheckerTest.java"}, "test_case": {"identifier": "fails_at_most_once_per_thread", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fails_at_most_once_per_thread() throws Throwable {\n        runInNewThread(\"T1\", checker::checkCurrentThread);\n        try {\n            checker.checkCurrentThread();\n        } catch (AssertionError e) {\n            // ignore first failure\n        }\n\n        // should not throw an exception\n        checker.checkCurrentThread();\n    }", "signature": "void fails_at_most_once_per_thread()", "full_signature": "@Test public void fails_at_most_once_per_thread()", "class_method_signature": "ThreadSafetyCheckerTest.fails_at_most_once_per_thread()", "testcase": true, "constructor": false, "invocations": ["runInNewThread", "checkCurrentThread", "checkCurrentThread"]}, "focal_class": {"identifier": "ThreadSafetyChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Thread lastThread = null;", "modifier": "private", "type": "Thread", "declarator": "lastThread = null", "var_name": "lastThread"}, {"original_string": "private final Set<Thread> calledFromThreads = new HashSet<>(1, 1);", "modifier": "private final", "type": "Set<Thread>", "declarator": "calledFromThreads = new HashSet<>(1, 1)", "var_name": "calledFromThreads"}, {"original_string": "private CallLocation callLocations = null;", "modifier": "private", "type": "CallLocation", "declarator": "callLocations = null", "var_name": "callLocations"}], "methods": [{"identifier": "checkCurrentThread", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void checkCurrentThread()", "full_signature": "public void checkCurrentThread()", "class_method_signature": "ThreadSafetyChecker.checkCurrentThread()", "testcase": false, "constructor": false}, {"identifier": "fullCheck", "parameters": "(Thread currentThread)", "modifiers": "private synchronized", "return": "void", "signature": "void fullCheck(Thread currentThread)", "full_signature": "private synchronized void fullCheck(Thread currentThread)", "class_method_signature": "ThreadSafetyChecker.fullCheck(Thread currentThread)", "testcase": false, "constructor": false}, {"identifier": "threadNames", "parameters": "(Set<Thread> threads)", "modifiers": "private static", "return": "String", "signature": "String threadNames(Set<Thread> threads)", "full_signature": "private static String threadNames(Set<Thread> threads)", "class_method_signature": "ThreadSafetyChecker.threadNames(Set<Thread> threads)", "testcase": false, "constructor": false}], "file": "thread-safety-agent/src/main/java/fi/jumi/threadsafetyagent/ThreadSafetyChecker.java"}, "focal_method": {"identifier": "checkCurrentThread", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void checkCurrentThread() {\n        Thread currentThread = Thread.currentThread();\n\n        // TODO: measure the usefulness of this optimization later, in a scenario which is not dominated by class loading overhead \n        // Performance optimization: avoid checking a thread twice\n        // when called repeatedly from the same thread, which is the most common case.\n        if (currentThread == lastThread) {\n            return;\n        }\n        lastThread = currentThread;\n\n        fullCheck(currentThread);\n    }", "signature": "void checkCurrentThread()", "full_signature": "public void checkCurrentThread()", "class_method_signature": "ThreadSafetyChecker.checkCurrentThread()", "testcase": false, "constructor": false, "invocations": ["currentThread", "fullCheck"]}, "repository": {"repo_id": 6426667, "url": "https://github.com/luontola/jumi-actors", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 78, "size": 2989, "license": "licensed"}}