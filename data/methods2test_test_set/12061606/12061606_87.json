{"test_class": {"identifier": "ArbitraryMatchingTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/uk/ac/ebi/beam/ArbitraryMatchingTest.java"}, "test_case": {"identifier": "benzene", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void benzene() throws Exception {\n        Graph g = Graph.fromSmiles(\"c1ccccc1\");\n        Matching m = Matching.empty(g);\n        ArbitraryMatching.initial(g,\n                                  m,\n                                  allOf(0, 1, 2, 3, 4, 5));\n        assertThat(m.matches(),\n                   IsIterableWithSize.<Tuple>iterableWithSize(3));\n        assertThat(m.matches(),\n                   hasItems(Tuple.of(0, 1),\n                            Tuple.of(2, 3),\n                            Tuple.of(4, 5)));\n    }", "signature": "void benzene()", "full_signature": "@Test public void benzene()", "class_method_signature": "ArbitraryMatchingTest.benzene()", "testcase": true, "constructor": false, "invocations": ["fromSmiles", "empty", "initial", "allOf", "assertThat", "matches", "iterableWithSize", "assertThat", "matches", "hasItems", "of", "of", "of"]}, "focal_class": {"identifier": "ArbitraryMatching", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "initial", "parameters": "(final Graph g, Matching m, final BitSet s)", "modifiers": "static", "return": "int", "signature": "int initial(final Graph g, Matching m, final BitSet s)", "full_signature": "static int initial(final Graph g, Matching m, final BitSet s)", "class_method_signature": "ArbitraryMatching.initial(final Graph g, Matching m, final BitSet s)", "testcase": false, "constructor": false}, {"identifier": "dfs", "parameters": "(final Graph g, Matching m, final BitSet s)", "modifiers": "static", "return": "int", "signature": "int dfs(final Graph g, Matching m, final BitSet s)", "full_signature": "static int dfs(final Graph g, Matching m, final BitSet s)", "class_method_signature": "ArbitraryMatching.dfs(final Graph g, Matching m, final BitSet s)", "testcase": false, "constructor": false}, {"identifier": "dfsVisit", "parameters": "(final Graph g, final int v, Matching m, final BitSet unvisited, boolean match)", "modifiers": "static", "return": "int", "signature": "int dfsVisit(final Graph g, final int v, Matching m, final BitSet unvisited, boolean match)", "full_signature": "static int dfsVisit(final Graph g, final int v, Matching m, final BitSet unvisited, boolean match)", "class_method_signature": "ArbitraryMatching.dfsVisit(final Graph g, final int v, Matching m, final BitSet unvisited, boolean match)", "testcase": false, "constructor": false}, {"identifier": "augmentOnce", "parameters": "(final Graph g, final Matching m, int nMatched, final BitSet s)", "modifiers": "static", "return": "int", "signature": "int augmentOnce(final Graph g, final Matching m, int nMatched, final BitSet s)", "full_signature": "static int augmentOnce(final Graph g, final Matching m, int nMatched, final BitSet s)", "class_method_signature": "ArbitraryMatching.augmentOnce(final Graph g, final Matching m, int nMatched, final BitSet s)", "testcase": false, "constructor": false}, {"identifier": "findPath", "parameters": "(Graph g, int v, int end, BitSet unvisited, int[] path, int len, Matching m, boolean matchNeeded)", "modifiers": "static", "return": "int", "signature": "int findPath(Graph g, int v, int end, BitSet unvisited, int[] path, int len, Matching m, boolean matchNeeded)", "full_signature": "static int findPath(Graph g, int v, int end, BitSet unvisited, int[] path, int len, Matching m, boolean matchNeeded)", "class_method_signature": "ArbitraryMatching.findPath(Graph g, int v, int end, BitSet unvisited, int[] path, int len, Matching m, boolean matchNeeded)", "testcase": false, "constructor": false}], "file": "core/src/main/java/uk/ac/ebi/beam/ArbitraryMatching.java"}, "focal_method": {"identifier": "initial", "parameters": "(final Graph g, Matching m, final BitSet s)", "modifiers": "static", "return": "int", "body": "static int initial(final Graph g, Matching m, final BitSet s) {\n\n        int nMatched = 0;\n\n        for (int v = s.nextSetBit(0); v >= 0; v = s.nextSetBit(v + 1)) {\n\n            // skip if already matched\n            if (m.matched(v))\n                continue;\n\n            // find a single edge which is not matched and match it\n            int d = g.degree(v);\n            for (int j = 0; j < d; ++j) {\n                Edge e = g.edgeAt(v, j);\n                int w = e.other(v);\n                if ((e.bond() != Bond.SINGLE) && m.unmatched(w) && s.get(w)) {\n                    m.match(v, w);\n                    nMatched += 2;\n                    break;\n                }\n            }\n        }\n\n        return nMatched;\n    }", "signature": "int initial(final Graph g, Matching m, final BitSet s)", "full_signature": "static int initial(final Graph g, Matching m, final BitSet s)", "class_method_signature": "ArbitraryMatching.initial(final Graph g, Matching m, final BitSet s)", "testcase": false, "constructor": false, "invocations": ["nextSetBit", "nextSetBit", "matched", "degree", "edgeAt", "other", "bond", "unmatched", "get", "match"]}, "repository": {"repo_id": 12061606, "url": "https://github.com/johnmay/beam", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 19, "size": 825, "license": "licensed"}}