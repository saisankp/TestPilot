{"test_class": {"identifier": "BundleFinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n\tprivate BundleContext bundleContext;", "modifier": "@Mock\n\tprivate", "type": "BundleContext", "declarator": "bundleContext", "var_name": "bundleContext"}, {"original_string": "@Mock\n\tprivate Bundle matchingBundle;", "modifier": "@Mock\n\tprivate", "type": "Bundle", "declarator": "matchingBundle", "var_name": "matchingBundle"}, {"original_string": "@Mock\n\tprivate Bundle notMatchingBundle;", "modifier": "@Mock\n\tprivate", "type": "Bundle", "declarator": "notMatchingBundle", "var_name": "notMatchingBundle"}, {"original_string": "private BundleInfo bundleInfo;", "modifier": "private", "type": "BundleInfo", "declarator": "bundleInfo", "var_name": "bundleInfo"}], "file": "slice-core/src/test/java/com/cognifide/slice/core/internal/scanner/BundleFinderTest.java"}, "test_case": {"identifier": "testFindBundles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFindBundles() throws Exception {\n\t\tBundleFinder bundleFinder = new BundleFinder(bundleInfo, bundleContext);\n\t\tList<Bundle> bundles = bundleFinder.findBundles();\n\t\tAssert.assertEquals(bundles.size(), 1);\n\t\tAssert.assertEquals(bundles.get(0), matchingBundle);\n\n\t}", "signature": "void testFindBundles()", "full_signature": "@Test public void testFindBundles()", "class_method_signature": "BundleFinderTest.testFindBundles()", "testcase": true, "constructor": false, "invocations": ["findBundles", "assertEquals", "size", "assertEquals", "get"]}, "focal_class": {"identifier": "BundleFinder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(BundleFinder.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BundleFinder.class)", "var_name": "LOG"}, {"original_string": "private final BundleMatcher matcher;", "modifier": "private final", "type": "BundleMatcher", "declarator": "matcher", "var_name": "matcher"}, {"original_string": "private final BundleContext bundleContext;", "modifier": "private final", "type": "BundleContext", "declarator": "bundleContext", "var_name": "bundleContext"}], "methods": [{"identifier": "BundleFinder", "parameters": "(BundleInfo bundleInfo, BundleContext bundleContext)", "modifiers": "public", "return": "", "signature": " BundleFinder(BundleInfo bundleInfo, BundleContext bundleContext)", "full_signature": "public  BundleFinder(BundleInfo bundleInfo, BundleContext bundleContext)", "class_method_signature": "BundleFinder.BundleFinder(BundleInfo bundleInfo, BundleContext bundleContext)", "testcase": false, "constructor": true}, {"identifier": "findBundles", "parameters": "()", "modifiers": "public", "return": "List<Bundle>", "signature": "List<Bundle> findBundles()", "full_signature": "public List<Bundle> findBundles()", "class_method_signature": "BundleFinder.findBundles()", "testcase": false, "constructor": false}], "file": "slice-core/src/main/java/com/cognifide/slice/core/internal/scanner/BundleFinder.java"}, "focal_method": {"identifier": "findBundles", "parameters": "()", "modifiers": "public", "return": "List<Bundle>", "body": "public List<Bundle> findBundles() {\n\t\tList<Bundle> bundles = new ArrayList<Bundle>();\n\t\tfor (Bundle bundle : bundleContext.getBundles()) {\n\t\t\tString symbolicName = bundle.getSymbolicName();\n\t\t\tif (matcher.matches(symbolicName)) {\n\t\t\t\tLOG.debug(\"Bundle {} has been found.\", symbolicName);\n\t\t\t\tbundles.add(bundle);\n\t\t\t}\n\t\t}\n\t\treturn bundles;\n\t}", "signature": "List<Bundle> findBundles()", "full_signature": "public List<Bundle> findBundles()", "class_method_signature": "BundleFinder.findBundles()", "testcase": false, "constructor": false, "invocations": ["getBundles", "getSymbolicName", "matches", "debug", "add"]}, "repository": {"repo_id": 5900702, "url": "https://github.com/Cognifide/Slice", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 61, "size": 11367, "license": "licensed"}}