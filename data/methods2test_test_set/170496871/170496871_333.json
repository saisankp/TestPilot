{"test_class": {"identifier": "MSEImpurityMeasureTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/tree/impurity/mse/MSEImpurityMeasureTest.java"}, "test_case": {"identifier": "testImpurityLeftPart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testImpurityLeftPart() {\n        // Test on left part [1, 2, 2, 1, 1, 1].\n        MSEImpurityMeasure impurity = new MSEImpurityMeasure(8, 12, 6, 0, 0, 0);\n\n        assertEquals(1.333, impurity.impurity(), 1e-3);\n    }", "signature": "void testImpurityLeftPart()", "full_signature": "@Test public void testImpurityLeftPart()", "class_method_signature": "MSEImpurityMeasureTest.testImpurityLeftPart()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "impurity"]}, "focal_class": {"identifier": "MSEImpurityMeasure", "superclass": "", "interfaces": "implements ImpurityMeasure<MSEImpurityMeasure>", "fields": [{"original_string": "private static final long serialVersionUID = 4536394578628409689L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 4536394578628409689L", "var_name": "serialVersionUID"}, {"original_string": "private final double leftY;", "modifier": "private final", "type": "double", "declarator": "leftY", "var_name": "leftY"}, {"original_string": "private final double leftY2;", "modifier": "private final", "type": "double", "declarator": "leftY2", "var_name": "leftY2"}, {"original_string": "private final long leftCnt;", "modifier": "private final", "type": "long", "declarator": "leftCnt", "var_name": "leftCnt"}, {"original_string": "private final double rightY;", "modifier": "private final", "type": "double", "declarator": "rightY", "var_name": "rightY"}, {"original_string": "private final double rightY2;", "modifier": "private final", "type": "double", "declarator": "rightY2", "var_name": "rightY2"}, {"original_string": "private final long rightCnt;", "modifier": "private final", "type": "long", "declarator": "rightCnt", "var_name": "rightCnt"}], "methods": [{"identifier": "MSEImpurityMeasure", "parameters": "(double leftY, double leftY2, long leftCnt, double rightY, double rightY2, long rightCnt)", "modifiers": "public", "return": "", "signature": " MSEImpurityMeasure(double leftY, double leftY2, long leftCnt, double rightY, double rightY2, long rightCnt)", "full_signature": "public  MSEImpurityMeasure(double leftY, double leftY2, long leftCnt, double rightY, double rightY2, long rightCnt)", "class_method_signature": "MSEImpurityMeasure.MSEImpurityMeasure(double leftY, double leftY2, long leftCnt, double rightY, double rightY2, long rightCnt)", "testcase": false, "constructor": true}, {"identifier": "impurity", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double impurity()", "full_signature": "@Override public double impurity()", "class_method_signature": "MSEImpurityMeasure.impurity()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(MSEImpurityMeasure b)", "modifiers": "@Override public", "return": "MSEImpurityMeasure", "signature": "MSEImpurityMeasure add(MSEImpurityMeasure b)", "full_signature": "@Override public MSEImpurityMeasure add(MSEImpurityMeasure b)", "class_method_signature": "MSEImpurityMeasure.add(MSEImpurityMeasure b)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(MSEImpurityMeasure b)", "modifiers": "@Override public", "return": "MSEImpurityMeasure", "signature": "MSEImpurityMeasure subtract(MSEImpurityMeasure b)", "full_signature": "@Override public MSEImpurityMeasure subtract(MSEImpurityMeasure b)", "class_method_signature": "MSEImpurityMeasure.subtract(MSEImpurityMeasure b)", "testcase": false, "constructor": false}, {"identifier": "getLeftY", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getLeftY()", "full_signature": "public double getLeftY()", "class_method_signature": "MSEImpurityMeasure.getLeftY()", "testcase": false, "constructor": false}, {"identifier": "getLeftY2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getLeftY2()", "full_signature": "public double getLeftY2()", "class_method_signature": "MSEImpurityMeasure.getLeftY2()", "testcase": false, "constructor": false}, {"identifier": "getLeftCnt", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLeftCnt()", "full_signature": "public long getLeftCnt()", "class_method_signature": "MSEImpurityMeasure.getLeftCnt()", "testcase": false, "constructor": false}, {"identifier": "getRightY", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRightY()", "full_signature": "public double getRightY()", "class_method_signature": "MSEImpurityMeasure.getRightY()", "testcase": false, "constructor": false}, {"identifier": "getRightY2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRightY2()", "full_signature": "public double getRightY2()", "class_method_signature": "MSEImpurityMeasure.getRightY2()", "testcase": false, "constructor": false}, {"identifier": "getRightCnt", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getRightCnt()", "full_signature": "public long getRightCnt()", "class_method_signature": "MSEImpurityMeasure.getRightCnt()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/tree/impurity/mse/MSEImpurityMeasure.java"}, "focal_method": {"identifier": "impurity", "parameters": "()", "modifiers": "@Override public", "return": "double", "body": "@Override public double impurity() {\n        double impurity = 0;\n\n        if (leftCnt > 0)\n            impurity += leftY2 - 2.0 * leftY / leftCnt * leftY + Math.pow(leftY / leftCnt, 2) * leftCnt;\n\n        if (rightCnt > 0)\n            impurity += rightY2 - 2.0 * rightY / rightCnt * rightY + Math.pow(rightY / rightCnt, 2) * rightCnt;\n\n        return impurity;\n    }", "signature": "double impurity()", "full_signature": "@Override public double impurity()", "class_method_signature": "MSEImpurityMeasure.impurity()", "testcase": false, "constructor": false, "invocations": ["pow", "pow"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}