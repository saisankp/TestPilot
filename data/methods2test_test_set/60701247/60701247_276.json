{"test_class": {"identifier": "AsyncDevicesGetterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final AndroidProjectRule myRule = AndroidProjectRule.inMemory();", "modifier": "@Rule\n  public final", "type": "AndroidProjectRule", "declarator": "myRule = AndroidProjectRule.inMemory()", "var_name": "myRule"}, {"original_string": "private Function<ConnectedDevice, String> myGetName;", "modifier": "private", "type": "Function<ConnectedDevice, String>", "declarator": "myGetName", "var_name": "myGetName"}, {"original_string": "private AsyncDevicesGetter myGetter;", "modifier": "private", "type": "AsyncDevicesGetter", "declarator": "myGetter", "var_name": "myGetter"}], "file": "android/testSrc/com/android/tools/idea/run/deployment/AsyncDevicesGetterTest.java"}, "test_case": {"identifier": "getImpl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getImpl() {\n    // Arrange\n    AndroidDevice pixel2ApiQAndroidDevice = Mockito.mock(AndroidDevice.class);\n\n    VirtualDevice pixel2ApiQVirtualDevice = new VirtualDevice.Builder()\n      .setName(\"Pixel 2 API Q\")\n      .setKey(new Key(\"Pixel_2_API_Q\"))\n      .setAndroidDevice(pixel2ApiQAndroidDevice)\n      .build();\n\n    VirtualDevice pixel3ApiQVirtualDevice = new VirtualDevice.Builder()\n      .setName(\"Pixel 3 API Q\")\n      .setKey(new Key(\"Pixel_3_API_Q\"))\n      .setAndroidDevice(Mockito.mock(AndroidDevice.class))\n      .build();\n\n    AndroidDevice googlePixel3AndroidDevice = Mockito.mock(AndroidDevice.class);\n\n    ConnectedDevice googlePixel3ConnectedDevice = new ConnectedDevice.Builder()\n      .setName(\"Physical Device\")\n      .setKey(new Key(\"86UX00F4R\"))\n      .setAndroidDevice(googlePixel3AndroidDevice)\n      .build();\n\n    Mockito.when(myGetName.apply(googlePixel3ConnectedDevice)).thenReturn(\"Google Pixel 3\");\n\n    AndroidDevice pixel3ApiQAndroidDevice = Mockito.mock(AndroidDevice.class);\n    Mockito.when(pixel3ApiQAndroidDevice.isVirtual()).thenReturn(true);\n\n    ConnectedDevice pixel3ApiQConnectedDevice = new ConnectedDevice.Builder()\n      .setName(\"Virtual Device\")\n      .setKey(new Key(\"Pixel_3_API_Q\"))\n      .setAndroidDevice(pixel3ApiQAndroidDevice)\n      .build();\n\n    // Act\n    Object actualDevices = myGetter.getImpl(\n      Arrays.asList(pixel2ApiQVirtualDevice, pixel3ApiQVirtualDevice),\n      Arrays.asList(googlePixel3ConnectedDevice, pixel3ApiQConnectedDevice));\n\n    // Assert\n    Object expectedPixel3ApiQDevice = new VirtualDevice.Builder()\n      .setName(\"Pixel 3 API Q\")\n      .setKey(new Key(\"Pixel_3_API_Q\"))\n      .setConnectionTime(Instant.parse(\"2018-11-28T01:15:27.000Z\"))\n      .setAndroidDevice(pixel3ApiQAndroidDevice)\n      .build();\n\n    Object expectedGooglePixel3Device = new PhysicalDevice.Builder()\n      .setName(\"Google Pixel 3\")\n      .setKey(new Key(\"86UX00F4R\"))\n      .setConnectionTime(Instant.parse(\"2018-11-28T01:15:27.000Z\"))\n      .setAndroidDevice(googlePixel3AndroidDevice)\n      .build();\n\n    Object expectedPixel2ApiQDevice = new VirtualDevice.Builder()\n      .setName(\"Pixel 2 API Q\")\n      .setKey(new Key(\"Pixel_2_API_Q\"))\n      .setAndroidDevice(pixel2ApiQAndroidDevice)\n      .build();\n\n    assertEquals(Arrays.asList(expectedPixel3ApiQDevice, expectedGooglePixel3Device, expectedPixel2ApiQDevice), actualDevices);\n  }", "signature": "void getImpl()", "full_signature": "@Test public void getImpl()", "class_method_signature": "AsyncDevicesGetterTest.getImpl()", "testcase": true, "constructor": false, "invocations": ["mock", "build", "setAndroidDevice", "setKey", "setName", "build", "setAndroidDevice", "setKey", "setName", "mock", "mock", "build", "setAndroidDevice", "setKey", "setName", "thenReturn", "when", "apply", "mock", "thenReturn", "when", "isVirtual", "build", "setAndroidDevice", "setKey", "setName", "getImpl", "asList", "asList", "build", "setAndroidDevice", "setConnectionTime", "setKey", "setName", "parse", "build", "setAndroidDevice", "setConnectionTime", "setKey", "setName", "parse", "build", "setAndroidDevice", "setKey", "setName", "assertEquals", "asList"]}, "focal_class": {"identifier": "AsyncDevicesGetter", "superclass": "", "interfaces": "", "fields": [{"original_string": "@NotNull\n  private final Project myProject;", "modifier": "@NotNull\n  private final", "type": "Project", "declarator": "myProject", "var_name": "myProject"}, {"original_string": "@NotNull\n  private final BooleanSupplier mySelectDeviceSnapshotComboBoxSnapshotsEnabled;", "modifier": "@NotNull\n  private final", "type": "BooleanSupplier", "declarator": "mySelectDeviceSnapshotComboBoxSnapshotsEnabled", "var_name": "mySelectDeviceSnapshotComboBoxSnapshotsEnabled"}, {"original_string": "@NotNull\n  private final Worker<Collection<VirtualDevice>> myVirtualDevicesWorker;", "modifier": "@NotNull\n  private final", "type": "Worker<Collection<VirtualDevice>>", "declarator": "myVirtualDevicesWorker", "var_name": "myVirtualDevicesWorker"}, {"original_string": "@NotNull\n  private final Worker<List<ConnectedDevice>> myConnectedDevicesWorker;", "modifier": "@NotNull\n  private final", "type": "Worker<List<ConnectedDevice>>", "declarator": "myConnectedDevicesWorker", "var_name": "myConnectedDevicesWorker"}, {"original_string": "@NotNull\n  private final KeyToConnectionTimeMap myMap;", "modifier": "@NotNull\n  private final", "type": "KeyToConnectionTimeMap", "declarator": "myMap", "var_name": "myMap"}, {"original_string": "@NotNull\n  private final Function<ConnectedDevice, String> myGetName;", "modifier": "@NotNull\n  private final", "type": "Function<ConnectedDevice, String>", "declarator": "myGetName", "var_name": "myGetName"}, {"original_string": "@Nullable\n  private LaunchCompatibilityChecker myChecker;", "modifier": "@Nullable\n  private", "type": "LaunchCompatibilityChecker", "declarator": "myChecker", "var_name": "myChecker"}], "methods": [{"identifier": "AsyncDevicesGetter", "parameters": "(@NotNull Project project)", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "", "signature": " AsyncDevicesGetter(@NotNull Project project)", "full_signature": "@SuppressWarnings(\"unused\") private  AsyncDevicesGetter(@NotNull Project project)", "class_method_signature": "AsyncDevicesGetter.AsyncDevicesGetter(@NotNull Project project)", "testcase": false, "constructor": true}, {"identifier": "AsyncDevicesGetter", "parameters": "(@NotNull Project project,\n                     @NotNull BooleanSupplier selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                     @NotNull KeyToConnectionTimeMap map,\n                     @NotNull Function<ConnectedDevice, String> getName)", "modifiers": "@NonInjectable @VisibleForTesting", "return": "", "signature": " AsyncDevicesGetter(@NotNull Project project,\n                     @NotNull BooleanSupplier selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                     @NotNull KeyToConnectionTimeMap map,\n                     @NotNull Function<ConnectedDevice, String> getName)", "full_signature": "@NonInjectable @VisibleForTesting  AsyncDevicesGetter(@NotNull Project project,\n                     @NotNull BooleanSupplier selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                     @NotNull KeyToConnectionTimeMap map,\n                     @NotNull Function<ConnectedDevice, String> getName)", "class_method_signature": "AsyncDevicesGetter.AsyncDevicesGetter(@NotNull Project project,\n                     @NotNull BooleanSupplier selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                     @NotNull KeyToConnectionTimeMap map,\n                     @NotNull Function<ConnectedDevice, String> getName)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@NotNull", "return": "List<Device>", "signature": "List<Device> get()", "full_signature": "@NotNull List<Device> get()", "class_method_signature": "AsyncDevicesGetter.get()", "testcase": false, "constructor": false}, {"identifier": "getImpl", "parameters": "(@NotNull Collection<VirtualDevice> virtualDevices, @NotNull Collection<ConnectedDevice> connectedDevices)", "modifiers": "@NotNull @VisibleForTesting", "return": "List<Device>", "signature": "List<Device> getImpl(@NotNull Collection<VirtualDevice> virtualDevices, @NotNull Collection<ConnectedDevice> connectedDevices)", "full_signature": "@NotNull @VisibleForTesting List<Device> getImpl(@NotNull Collection<VirtualDevice> virtualDevices, @NotNull Collection<ConnectedDevice> connectedDevices)", "class_method_signature": "AsyncDevicesGetter.getImpl(@NotNull Collection<VirtualDevice> virtualDevices, @NotNull Collection<ConnectedDevice> connectedDevices)", "testcase": false, "constructor": false}, {"identifier": "connectedVirtualDeviceStream", "parameters": "(@NotNull Collection<ConnectedDevice> connectedDevices,\n                                                             @NotNull Collection<VirtualDevice> virtualDevices)", "modifiers": "@NotNull private", "return": "Stream<VirtualDevice>", "signature": "Stream<VirtualDevice> connectedVirtualDeviceStream(@NotNull Collection<ConnectedDevice> connectedDevices,\n                                                             @NotNull Collection<VirtualDevice> virtualDevices)", "full_signature": "@NotNull private Stream<VirtualDevice> connectedVirtualDeviceStream(@NotNull Collection<ConnectedDevice> connectedDevices,\n                                                             @NotNull Collection<VirtualDevice> virtualDevices)", "class_method_signature": "AsyncDevicesGetter.connectedVirtualDeviceStream(@NotNull Collection<ConnectedDevice> connectedDevices,\n                                                             @NotNull Collection<VirtualDevice> virtualDevices)", "testcase": false, "constructor": false}, {"identifier": "physicalDeviceStream", "parameters": "(@NotNull Collection<ConnectedDevice> connectedDevices)", "modifiers": "@NotNull private", "return": "Stream<PhysicalDevice>", "signature": "Stream<PhysicalDevice> physicalDeviceStream(@NotNull Collection<ConnectedDevice> connectedDevices)", "full_signature": "@NotNull private Stream<PhysicalDevice> physicalDeviceStream(@NotNull Collection<ConnectedDevice> connectedDevices)", "class_method_signature": "AsyncDevicesGetter.physicalDeviceStream(@NotNull Collection<ConnectedDevice> connectedDevices)", "testcase": false, "constructor": false}, {"identifier": "disconnectedVirtualDeviceStream", "parameters": "(@NotNull Collection<VirtualDevice> virtualDevices,\n                                                                       @NotNull Collection<ConnectedDevice> connectedDevices)", "modifiers": "@NotNull private static", "return": "Stream<VirtualDevice>", "signature": "Stream<VirtualDevice> disconnectedVirtualDeviceStream(@NotNull Collection<VirtualDevice> virtualDevices,\n                                                                       @NotNull Collection<ConnectedDevice> connectedDevices)", "full_signature": "@NotNull private static Stream<VirtualDevice> disconnectedVirtualDeviceStream(@NotNull Collection<VirtualDevice> virtualDevices,\n                                                                       @NotNull Collection<ConnectedDevice> connectedDevices)", "class_method_signature": "AsyncDevicesGetter.disconnectedVirtualDeviceStream(@NotNull Collection<VirtualDevice> virtualDevices,\n                                                                       @NotNull Collection<ConnectedDevice> connectedDevices)", "testcase": false, "constructor": false}, {"identifier": "initChecker", "parameters": "(@Nullable RunnerAndConfigurationSettings configurationAndSettings,\n                         @NotNull Function<Module, AndroidFacet> facetGetter)", "modifiers": "@VisibleForTesting final", "return": "void", "signature": "void initChecker(@Nullable RunnerAndConfigurationSettings configurationAndSettings,\n                         @NotNull Function<Module, AndroidFacet> facetGetter)", "full_signature": "@VisibleForTesting final void initChecker(@Nullable RunnerAndConfigurationSettings configurationAndSettings,\n                         @NotNull Function<Module, AndroidFacet> facetGetter)", "class_method_signature": "AsyncDevicesGetter.initChecker(@Nullable RunnerAndConfigurationSettings configurationAndSettings,\n                         @NotNull Function<Module, AndroidFacet> facetGetter)", "testcase": false, "constructor": false}, {"identifier": "getChecker", "parameters": "()", "modifiers": "@VisibleForTesting final", "return": "Object", "signature": "Object getChecker()", "full_signature": "@VisibleForTesting final Object getChecker()", "class_method_signature": "AsyncDevicesGetter.getChecker()", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/run/deployment/AsyncDevicesGetter.java"}, "focal_method": {"identifier": "getImpl", "parameters": "(@NotNull Collection<VirtualDevice> virtualDevices, @NotNull Collection<ConnectedDevice> connectedDevices)", "modifiers": "@NotNull @VisibleForTesting", "return": "List<Device>", "body": "@NotNull\n  @VisibleForTesting\n  List<Device> getImpl(@NotNull Collection<VirtualDevice> virtualDevices, @NotNull Collection<ConnectedDevice> connectedDevices) {\n    @SuppressWarnings(\"UnstableApiUsage\")\n    Stream<Device> deviceStream = Streams.concat(\n      connectedVirtualDeviceStream(connectedDevices, virtualDevices),\n      physicalDeviceStream(connectedDevices),\n      disconnectedVirtualDeviceStream(virtualDevices, connectedDevices));\n\n    List<Device> devices = deviceStream.collect(Collectors.toList());\n\n    Collection<Key> keys = devices.stream()\n      .filter(Device::isConnected)\n      .map(Device::getKey)\n      .collect(Collectors.toList());\n\n    myMap.retainAll(keys);\n    return devices;\n  }", "signature": "List<Device> getImpl(@NotNull Collection<VirtualDevice> virtualDevices, @NotNull Collection<ConnectedDevice> connectedDevices)", "full_signature": "@NotNull @VisibleForTesting List<Device> getImpl(@NotNull Collection<VirtualDevice> virtualDevices, @NotNull Collection<ConnectedDevice> connectedDevices)", "class_method_signature": "AsyncDevicesGetter.getImpl(@NotNull Collection<VirtualDevice> virtualDevices, @NotNull Collection<ConnectedDevice> connectedDevices)", "testcase": false, "constructor": false, "invocations": ["concat", "connectedVirtualDeviceStream", "physicalDeviceStream", "disconnectedVirtualDeviceStream", "collect", "toList", "collect", "map", "filter", "stream", "toList", "retainAll"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}