{"test_class": {"identifier": "MedianOfMedianConvergenceCheckerTest", "superclass": "extends ConvergenceCheckerTest", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/composition/boosting/convergence/median/MedianOfMedianConvergenceCheckerTest.java"}, "test_case": {"identifier": "testConvergenceChecking", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvergenceChecking() {\n        data.put(666, VectorUtils.of(10, 11).labeled(100000.0));\n        LocalDatasetBuilder<Integer, LabeledVector<Double>> datasetBuilder = new LocalDatasetBuilder<>(data, 1);\n\n        ConvergenceChecker<Integer, LabeledVector<Double>> checker = createChecker(\n            new MedianOfMedianConvergenceCheckerFactory(0.1), datasetBuilder);\n\n        double error = checker.computeError(VectorUtils.of(1, 2), 4.0, notConvergedMdl);\n        Assert.assertEquals(1.9, error, 0.01);\n\n        LearningEnvironmentBuilder envBuilder = TestUtils.testEnvBuilder();\n\n        Assert.assertFalse(checker.isConverged(envBuilder, datasetBuilder, notConvergedMdl));\n        Assert.assertTrue(checker.isConverged(envBuilder, datasetBuilder, convergedMdl));\n\n        try (LocalDataset<EmptyContext, FeatureMatrixWithLabelsOnHeapData> dataset = datasetBuilder.build(\n            envBuilder,\n            new EmptyContextBuilder<>(), new FeatureMatrixWithLabelsOnHeapDataBuilder<>(vectorizer),\n            TestUtils.testEnvBuilder().buildForTrainer())) {\n\n            double onDSError = checker.computeMeanErrorOnDataset(dataset, notConvergedMdl);\n            Assert.assertEquals(1.6, onDSError, 0.01);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }", "signature": "void testConvergenceChecking()", "full_signature": "@Test public void testConvergenceChecking()", "class_method_signature": "MedianOfMedianConvergenceCheckerTest.testConvergenceChecking()", "testcase": true, "constructor": false, "invocations": ["put", "labeled", "of", "createChecker", "computeError", "of", "assertEquals", "testEnvBuilder", "assertFalse", "isConverged", "assertTrue", "isConverged", "build", "buildForTrainer", "testEnvBuilder", "computeMeanErrorOnDataset", "assertEquals"]}, "focal_class": {"identifier": "MedianOfMedianConvergenceChecker", "superclass": "extends ConvergenceChecker<K, V>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 4902502002933415287L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 4902502002933415287L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "MedianOfMedianConvergenceChecker", "parameters": "(long sampleSize, IgniteFunction<Double, Double> lblMapping, Loss loss,\n        DatasetBuilder<K, V> datasetBuilder, Preprocessor<K, V> preprocessor, double precision)", "modifiers": "public", "return": "", "signature": " MedianOfMedianConvergenceChecker(long sampleSize, IgniteFunction<Double, Double> lblMapping, Loss loss,\n        DatasetBuilder<K, V> datasetBuilder, Preprocessor<K, V> preprocessor, double precision)", "full_signature": "public  MedianOfMedianConvergenceChecker(long sampleSize, IgniteFunction<Double, Double> lblMapping, Loss loss,\n        DatasetBuilder<K, V> datasetBuilder, Preprocessor<K, V> preprocessor, double precision)", "class_method_signature": "MedianOfMedianConvergenceChecker.MedianOfMedianConvergenceChecker(long sampleSize, IgniteFunction<Double, Double> lblMapping, Loss loss,\n        DatasetBuilder<K, V> datasetBuilder, Preprocessor<K, V> preprocessor, double precision)", "testcase": false, "constructor": true}, {"identifier": "computeMeanErrorOnDataset", "parameters": "(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl)", "modifiers": "@Override public", "return": "Double", "signature": "Double computeMeanErrorOnDataset(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl)", "full_signature": "@Override public Double computeMeanErrorOnDataset(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl)", "class_method_signature": "MedianOfMedianConvergenceChecker.computeMeanErrorOnDataset(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl)", "testcase": false, "constructor": false}, {"identifier": "computeMedian", "parameters": "(ModelsComposition mdl, FeatureMatrixWithLabelsOnHeapData data)", "modifiers": "private", "return": "double[]", "signature": "double[] computeMedian(ModelsComposition mdl, FeatureMatrixWithLabelsOnHeapData data)", "full_signature": "private double[] computeMedian(ModelsComposition mdl, FeatureMatrixWithLabelsOnHeapData data)", "class_method_signature": "MedianOfMedianConvergenceChecker.computeMedian(ModelsComposition mdl, FeatureMatrixWithLabelsOnHeapData data)", "testcase": false, "constructor": false}, {"identifier": "getMedian", "parameters": "(double[] errors)", "modifiers": "private", "return": "double", "signature": "double getMedian(double[] errors)", "full_signature": "private double getMedian(double[] errors)", "class_method_signature": "MedianOfMedianConvergenceChecker.getMedian(double[] errors)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(double[] left, double[] right)", "modifiers": "private", "return": "double[]", "signature": "double[] reduce(double[] left, double[] right)", "full_signature": "private double[] reduce(double[] left, double[] right)", "class_method_signature": "MedianOfMedianConvergenceChecker.reduce(double[] left, double[] right)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/composition/boosting/convergence/median/MedianOfMedianConvergenceChecker.java"}, "focal_method": {"identifier": "computeMeanErrorOnDataset", "parameters": "(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl)", "modifiers": "@Override public", "return": "Double", "body": "@Override public Double computeMeanErrorOnDataset(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl) {\n\n        double[] medians = dataset.compute(\n            data -> computeMedian(mdl, data),\n            this::reduce\n        );\n\n        if (medians == null)\n            return Double.POSITIVE_INFINITY;\n        return getMedian(medians);\n    }", "signature": "Double computeMeanErrorOnDataset(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl)", "full_signature": "@Override public Double computeMeanErrorOnDataset(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl)", "class_method_signature": "MedianOfMedianConvergenceChecker.computeMeanErrorOnDataset(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl)", "testcase": false, "constructor": false, "invocations": ["compute", "computeMedian", "getMedian"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}