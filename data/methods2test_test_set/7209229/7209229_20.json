{"test_class": {"identifier": "TestBootstrapPullThread", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger LOG = Logger.getLogger(\"TestBootstrapPullThread\");", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(\"TestBootstrapPullThread\")", "var_name": "LOG"}, {"original_string": "public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse(\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"LiarJobRelay\\\",\\\"namespace\\\":\\\"com.linkedin.events.liar.jobrelay\\\",\\\"fields\\\":[{\\\"name\\\":\\\"txn\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=TXN;dbFieldPosition=0;\\\"},{\\\"name\\\":\\\"key\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=KEY;dbFieldPosition=1;\\\"},{\\\"name\\\":\\\"eventId\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=EVENT_ID;dbFieldPosition=2;\\\"},{\\\"name\\\":\\\"isDelete\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=IS_DELETE;dbFieldPosition=3;\\\"},{\\\"name\\\":\\\"state\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=STATE;dbFieldPosition=4;\\\"}],\\\"meta\\\":\\\"dbFieldName=SY$LIAR_JOB_RELAY_1;\\\"}\");", "modifier": "public static final", "type": "org.apache.avro.Schema", "declarator": "SCHEMA$ = org.apache.avro.Schema.parse(\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"LiarJobRelay\\\",\\\"namespace\\\":\\\"com.linkedin.events.liar.jobrelay\\\",\\\"fields\\\":[{\\\"name\\\":\\\"txn\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=TXN;dbFieldPosition=0;\\\"},{\\\"name\\\":\\\"key\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=KEY;dbFieldPosition=1;\\\"},{\\\"name\\\":\\\"eventId\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=EVENT_ID;dbFieldPosition=2;\\\"},{\\\"name\\\":\\\"isDelete\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=IS_DELETE;dbFieldPosition=3;\\\"},{\\\"name\\\":\\\"state\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=STATE;dbFieldPosition=4;\\\"}],\\\"meta\\\":\\\"dbFieldName=SY$LIAR_JOB_RELAY_1;\\\"}\")", "var_name": "SCHEMA"}, {"original_string": "public static int _port = -1;", "modifier": "public static", "type": "int", "declarator": "_port = -1", "var_name": "_port"}, {"original_string": "public static String _host = null;", "modifier": "public static", "type": "String", "declarator": "_host = null", "var_name": "_host"}, {"original_string": "public static String _serverInfoName = null;", "modifier": "public static", "type": "String", "declarator": "_serverInfoName = null", "var_name": "_serverInfoName"}, {"original_string": "public static ServerInfo _serverInfo = null;", "modifier": "public static", "type": "ServerInfo", "declarator": "_serverInfo = null", "var_name": "_serverInfo"}, {"original_string": "private static final BootstrapCheckpointHandler _ckptHandlerSource1 =\n      new BootstrapCheckpointHandler(\"source1\");", "modifier": "private static final", "type": "BootstrapCheckpointHandler", "declarator": "_ckptHandlerSource1 =\n      new BootstrapCheckpointHandler(\"source1\")", "var_name": "_ckptHandlerSource1"}, {"original_string": "private static final BootstrapCheckpointHandler _ckptHandlerTwoSources =\n      new BootstrapCheckpointHandler(\"source1\", \"source2\");", "modifier": "private static final", "type": "BootstrapCheckpointHandler", "declarator": "_ckptHandlerTwoSources =\n      new BootstrapCheckpointHandler(\"source1\", \"source2\")", "var_name": "_ckptHandlerTwoSources"}, {"original_string": "private static final Set<ServerInfo> EXP_SERVERINFO_1 = new TreeSet<ServerInfo>(Arrays.asList(\n          new ServerInfo(\"bs1\", \"ONLINE\", new InetSocketAddress(\"localhost\",10001),\"source1\"),\n          new ServerInfo(\"bs2\",\"ONLINE\",  new InetSocketAddress(\"localhost\",10002),\"source1\"),\n          new ServerInfo(\"bs3\",\"ONLINE\", new InetSocketAddress(\"localhost\",10003),\"source1\")\n          ));", "modifier": "private static final", "type": "Set<ServerInfo>", "declarator": "EXP_SERVERINFO_1 = new TreeSet<ServerInfo>(Arrays.asList(\n          new ServerInfo(\"bs1\", \"ONLINE\", new InetSocketAddress(\"localhost\",10001),\"source1\"),\n          new ServerInfo(\"bs2\",\"ONLINE\",  new InetSocketAddress(\"localhost\",10002),\"source1\"),\n          new ServerInfo(\"bs3\",\"ONLINE\", new InetSocketAddress(\"localhost\",10003),\"source1\")\n          ))", "var_name": "EXP_SERVERINFO_1"}, {"original_string": "private static final Set<ServerInfo> EXP_SERVERINFO_2 = new TreeSet<ServerInfo>(EXP_SERVERINFO_1);", "modifier": "private static final", "type": "Set<ServerInfo>", "declarator": "EXP_SERVERINFO_2 = new TreeSet<ServerInfo>(EXP_SERVERINFO_1)", "var_name": "EXP_SERVERINFO_2"}, {"original_string": "private static final Set<ServerInfo> EXP_SERVERINFO_3 = new TreeSet<ServerInfo>(Arrays.asList(\n          new ServerInfo(\"bs4\",\"ONLINE\", new InetSocketAddress(\"localhost\",10000),\"source1\")\n          ));", "modifier": "private static final", "type": "Set<ServerInfo>", "declarator": "EXP_SERVERINFO_3 = new TreeSet<ServerInfo>(Arrays.asList(\n          new ServerInfo(\"bs4\",\"ONLINE\", new InetSocketAddress(\"localhost\",10000),\"source1\")\n          ))", "var_name": "EXP_SERVERINFO_3"}], "file": "databus-client/databus-client-http/src/test/java/com/linkedin/databus/client/TestBootstrapPullThread.java"}, "test_case": {"identifier": "testTransition_RestartDueToServerInfoErrors", "parameters": "()", "modifiers": "@Test /** Test BOOTSTRAP transition - Bootstrap Restart since current errors in current serverInfo */ public", "return": "void", "body": "@Test\n  /** Test BOOTSTRAP transition - Bootstrap Restart since current errors in current serverInfo */\n  public void testTransition_RestartDueToServerInfoErrors() throws Exception\n  {\n    final String dummyHost = \"NonExistantHost\";\n    final String dummyServerInfoName = dummyHost + \":\" + _port;\n\n    BootstrapPullThread bsPuller = createBootstrapPullThread(false, false, false);\n    Checkpoint cp = _ckptHandlerSource1.createInitialBootstrapCheckpoint(null, 50L);\n    //TODO remove\n    //cp.setConsumptionMode(DbusClientMode.BOOTSTRAP_SNAPSHOT);\n    //cp.setBootstrapSinceScn(900L);\n    cp.setBootstrapStartScn(1111L);\n    cp.setBootstrapServerInfo(dummyServerInfoName);\n\n    bsPuller.getComponentStatus().start();\n    ConnectionState connState = bsPuller.getConnectionState();\n    connState.switchToBootstrap(cp);\n    testTransitionCase(bsPuller, StateId.BOOTSTRAP, StateId.REQUEST_START_SCN, cp);\n    Assert.assertEquals(cp.getBootstrapStartScn().longValue(),\n                        Checkpoint.UNSET_BOOTSTRAP_START_SCN, \"Cleared Bootstrap StartSCN\");\n    Assert.assertEquals(cp.getBootstrapSinceScn().longValue(), 50L, \"Cleared Bootstrap SinceSCN\");\n    int numRetries = bsPuller.getRetriesBeforeCkptCleanup().getRemainingRetriesNum();\n    Assert.assertEquals(numRetries, 1000, \"NumRetries Check\");\n  }", "signature": "void testTransition_RestartDueToServerInfoErrors()", "full_signature": "@Test /** Test BOOTSTRAP transition - Bootstrap Restart since current errors in current serverInfo */ public void testTransition_RestartDueToServerInfoErrors()", "class_method_signature": "TestBootstrapPullThread.testTransition_RestartDueToServerInfoErrors()", "testcase": true, "constructor": false, "invocations": ["createBootstrapPullThread", "createInitialBootstrapCheckpoint", "setBootstrapStartScn", "setBootstrapServerInfo", "start", "getComponentStatus", "getConnectionState", "switchToBootstrap", "testTransitionCase", "assertEquals", "longValue", "getBootstrapStartScn", "assertEquals", "longValue", "getBootstrapSinceScn", "getRemainingRetriesNum", "getRetriesBeforeCkptCleanup", "assertEquals"]}, "focal_class": {"identifier": "BootstrapPullThread", "superclass": "extends BasePullThread", "interfaces": "", "fields": [{"original_string": "public static final Short START_OF_SNAPSHOT_SRCID = (short)(DbusEventInternalWritable.PRIVATE_RANGE_MAX_SRCID - 1);", "modifier": "public static final", "type": "Short", "declarator": "START_OF_SNAPSHOT_SRCID = (short)(DbusEventInternalWritable.PRIVATE_RANGE_MAX_SRCID - 1)", "var_name": "START_OF_SNAPSHOT_SRCID"}, {"original_string": "public static final Short START_OF_CATCHUP_SRCID = (short)(DbusEventInternalWritable.PRIVATE_RANGE_MAX_SRCID - 2);", "modifier": "public static final", "type": "Short", "declarator": "START_OF_CATCHUP_SRCID = (short)(DbusEventInternalWritable.PRIVATE_RANGE_MAX_SRCID - 2)", "var_name": "START_OF_CATCHUP_SRCID"}, {"original_string": "public static final Short END_OF_BOOTSTRAP_SRCID = (short)(DbusEventInternalWritable.PRIVATE_RANGE_MAX_SRCID - 3);", "modifier": "public static final", "type": "Short", "declarator": "END_OF_BOOTSTRAP_SRCID = (short)(DbusEventInternalWritable.PRIVATE_RANGE_MAX_SRCID - 3)", "var_name": "END_OF_BOOTSTRAP_SRCID"}, {"original_string": "private static final EnumSet<ConnectionState.StateId> SHOULD_TEAR_CONNECTION =\n      EnumSet.of(ConnectionState.StateId.START_SCN_REQUEST_SENT,\n                 ConnectionState.StateId.START_SCN_RESPONSE_SUCCESS,\n                 ConnectionState.StateId.START_SCN_REQUEST_ERROR,\n                 ConnectionState.StateId.START_SCN_RESPONSE_ERROR,\n                 ConnectionState.StateId.TARGET_SCN_REQUEST_SENT,\n                 ConnectionState.StateId.TARGET_SCN_RESPONSE_SUCCESS,\n                 ConnectionState.StateId.TARGET_SCN_REQUEST_ERROR,\n                 ConnectionState.StateId.TARGET_SCN_RESPONSE_ERROR,\n                 ConnectionState.StateId.STREAM_REQUEST_SENT,\n                 ConnectionState.StateId.STREAM_REQUEST_SUCCESS,\n                 ConnectionState.StateId.STREAM_REQUEST_ERROR,\n                 ConnectionState.StateId.STREAM_RESPONSE_ERROR,\n                 ConnectionState.StateId.BOOTSTRAP_DONE\n                 );", "modifier": "private static final", "type": "EnumSet<ConnectionState.StateId>", "declarator": "SHOULD_TEAR_CONNECTION =\n      EnumSet.of(ConnectionState.StateId.START_SCN_REQUEST_SENT,\n                 ConnectionState.StateId.START_SCN_RESPONSE_SUCCESS,\n                 ConnectionState.StateId.START_SCN_REQUEST_ERROR,\n                 ConnectionState.StateId.START_SCN_RESPONSE_ERROR,\n                 ConnectionState.StateId.TARGET_SCN_REQUEST_SENT,\n                 ConnectionState.StateId.TARGET_SCN_RESPONSE_SUCCESS,\n                 ConnectionState.StateId.TARGET_SCN_REQUEST_ERROR,\n                 ConnectionState.StateId.TARGET_SCN_RESPONSE_ERROR,\n                 ConnectionState.StateId.STREAM_REQUEST_SENT,\n                 ConnectionState.StateId.STREAM_REQUEST_SUCCESS,\n                 ConnectionState.StateId.STREAM_REQUEST_ERROR,\n                 ConnectionState.StateId.STREAM_RESPONSE_ERROR,\n                 ConnectionState.StateId.BOOTSTRAP_DONE\n                 )", "var_name": "SHOULD_TEAR_CONNECTION"}, {"original_string": "private Checkpoint _resumeCkpt;", "modifier": "private", "type": "Checkpoint", "declarator": "_resumeCkpt", "var_name": "_resumeCkpt"}, {"original_string": "private final RemoteExceptionHandler _remoteExceptionHandler;", "modifier": "private final", "type": "RemoteExceptionHandler", "declarator": "_remoteExceptionHandler", "var_name": "_remoteExceptionHandler"}, {"original_string": "private  DbusKeyCompositeFilter _bootstrapFilter;", "modifier": "private", "type": "DbusKeyCompositeFilter", "declarator": "_bootstrapFilter", "var_name": "_bootstrapFilter"}, {"original_string": "private final List<DbusKeyCompositeFilterConfig> _bootstrapFilterConfigs;", "modifier": "private final", "type": "List<DbusKeyCompositeFilterConfig>", "declarator": "_bootstrapFilterConfigs", "var_name": "_bootstrapFilterConfigs"}, {"original_string": "private long numEventsInCurrentState = 0;", "modifier": "private", "type": "long", "declarator": "numEventsInCurrentState = 0", "var_name": "numEventsInCurrentState"}, {"original_string": "private final double _pullerBufferUtilizationPct;", "modifier": "private final", "type": "double", "declarator": "_pullerBufferUtilizationPct", "var_name": "_pullerBufferUtilizationPct"}, {"original_string": "private DatabusBootstrapConnection _lastOpenConnection;", "modifier": "private", "type": "DatabusBootstrapConnection", "declarator": "_lastOpenConnection", "var_name": "_lastOpenConnection"}, {"original_string": "private final BackoffTimer _retriesBeforeCkptCleanup;", "modifier": "private final", "type": "BackoffTimer", "declarator": "_retriesBeforeCkptCleanup", "var_name": "_retriesBeforeCkptCleanup"}, {"original_string": "private ReentrantLock _v3BootstrapLock = null;", "modifier": "private", "type": "ReentrantLock", "declarator": "_v3BootstrapLock = null", "var_name": "_v3BootstrapLock"}], "methods": [{"identifier": "BootstrapPullThread", "parameters": "(String name,\n      DatabusSourcesConnection sourcesConn,\n      DbusEventBuffer dbusEventBuffer,\n      ConnectionStateFactory connStateFactory,\n      Set<ServerInfo> bootstrapServers,\n      List<DbusKeyCompositeFilterConfig> bootstrapFilterConfigs,\n      double pullerBufferUtilPct,\n      MBeanServer mbeanServer,\n      DbusEventFactory eventFactory\n      )", "modifiers": "public", "return": "", "signature": " BootstrapPullThread(String name,\n      DatabusSourcesConnection sourcesConn,\n      DbusEventBuffer dbusEventBuffer,\n      ConnectionStateFactory connStateFactory,\n      Set<ServerInfo> bootstrapServers,\n      List<DbusKeyCompositeFilterConfig> bootstrapFilterConfigs,\n      double pullerBufferUtilPct,\n      MBeanServer mbeanServer,\n      DbusEventFactory eventFactory\n      )", "full_signature": "public  BootstrapPullThread(String name,\n      DatabusSourcesConnection sourcesConn,\n      DbusEventBuffer dbusEventBuffer,\n      ConnectionStateFactory connStateFactory,\n      Set<ServerInfo> bootstrapServers,\n      List<DbusKeyCompositeFilterConfig> bootstrapFilterConfigs,\n      double pullerBufferUtilPct,\n      MBeanServer mbeanServer,\n      DbusEventFactory eventFactory\n      )", "class_method_signature": "BootstrapPullThread.BootstrapPullThread(String name,\n      DatabusSourcesConnection sourcesConn,\n      DbusEventBuffer dbusEventBuffer,\n      ConnectionStateFactory connStateFactory,\n      Set<ServerInfo> bootstrapServers,\n      List<DbusKeyCompositeFilterConfig> bootstrapFilterConfigs,\n      double pullerBufferUtilPct,\n      MBeanServer mbeanServer,\n      DbusEventFactory eventFactory\n      )", "testcase": false, "constructor": true}, {"identifier": "BootstrapPullThread", "parameters": "(String name,\n                             DatabusSourcesConnection sourcesConn,\n                             DbusEventBuffer dbusEventBuffer,\n                             ConnectionStateFactory connStateFactory,\n                             Set<ServerInfo> bootstrapServers,\n                             List<DbusKeyCompositeFilterConfig> bootstrapFilterConfigs,\n                             double pullerBufferUtilPct,\n                             MBeanServer mbeanServer,\n                             DbusEventFactory eventFactory,\n                             ReentrantLock v3BootstrapLock,\n                             Logger log)", "modifiers": "public", "return": "", "signature": " BootstrapPullThread(String name,\n                             DatabusSourcesConnection sourcesConn,\n                             DbusEventBuffer dbusEventBuffer,\n                             ConnectionStateFactory connStateFactory,\n                             Set<ServerInfo> bootstrapServers,\n                             List<DbusKeyCompositeFilterConfig> bootstrapFilterConfigs,\n                             double pullerBufferUtilPct,\n                             MBeanServer mbeanServer,\n                             DbusEventFactory eventFactory,\n                             ReentrantLock v3BootstrapLock,\n                             Logger log)", "full_signature": "public  BootstrapPullThread(String name,\n                             DatabusSourcesConnection sourcesConn,\n                             DbusEventBuffer dbusEventBuffer,\n                             ConnectionStateFactory connStateFactory,\n                             Set<ServerInfo> bootstrapServers,\n                             List<DbusKeyCompositeFilterConfig> bootstrapFilterConfigs,\n                             double pullerBufferUtilPct,\n                             MBeanServer mbeanServer,\n                             DbusEventFactory eventFactory,\n                             ReentrantLock v3BootstrapLock,\n                             Logger log)", "class_method_signature": "BootstrapPullThread.BootstrapPullThread(String name,\n                             DatabusSourcesConnection sourcesConn,\n                             DbusEventBuffer dbusEventBuffer,\n                             ConnectionStateFactory connStateFactory,\n                             Set<ServerInfo> bootstrapServers,\n                             List<DbusKeyCompositeFilterConfig> bootstrapFilterConfigs,\n                             double pullerBufferUtilPct,\n                             MBeanServer mbeanServer,\n                             DbusEventFactory eventFactory,\n                             ReentrantLock v3BootstrapLock,\n                             Logger log)", "testcase": false, "constructor": true}, {"identifier": "shouldDelayTearConnection", "parameters": "(StateId stateId)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean shouldDelayTearConnection(StateId stateId)", "full_signature": "@Override protected boolean shouldDelayTearConnection(StateId stateId)", "class_method_signature": "BootstrapPullThread.shouldDelayTearConnection(StateId stateId)", "testcase": false, "constructor": false}, {"identifier": "executeAndChangeState", "parameters": "(Object message)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean executeAndChangeState(Object message)", "full_signature": "@Override protected boolean executeAndChangeState(Object message)", "class_method_signature": "BootstrapPullThread.executeAndChangeState(Object message)", "testcase": false, "constructor": false}, {"identifier": "doSetSourcesSchemas", "parameters": "(SourcesMessage sourcesMessage)", "modifiers": "private", "return": "void", "signature": "void doSetSourcesSchemas(SourcesMessage sourcesMessage)", "full_signature": "private void doSetSourcesSchemas(SourcesMessage sourcesMessage)", "class_method_signature": "BootstrapPullThread.doSetSourcesSchemas(SourcesMessage sourcesMessage)", "testcase": false, "constructor": false}, {"identifier": "doSetSourcesIds", "parameters": "(SourcesMessage sourcesMessage)", "modifiers": "private", "return": "void", "signature": "void doSetSourcesIds(SourcesMessage sourcesMessage)", "full_signature": "private void doSetSourcesIds(SourcesMessage sourcesMessage)", "class_method_signature": "BootstrapPullThread.doSetSourcesIds(SourcesMessage sourcesMessage)", "testcase": false, "constructor": false}, {"identifier": "doSetResumeCheckpoint", "parameters": "(CheckpointMessage cpMessage)", "modifiers": "private", "return": "void", "signature": "void doSetResumeCheckpoint(CheckpointMessage cpMessage)", "full_signature": "private void doSetResumeCheckpoint(CheckpointMessage cpMessage)", "class_method_signature": "BootstrapPullThread.doSetResumeCheckpoint(CheckpointMessage cpMessage)", "testcase": false, "constructor": false}, {"identifier": "doStart", "parameters": "(LifecycleMessage lcMessage)", "modifiers": "@Override protected", "return": "void", "signature": "void doStart(LifecycleMessage lcMessage)", "full_signature": "@Override protected void doStart(LifecycleMessage lcMessage)", "class_method_signature": "BootstrapPullThread.doStart(LifecycleMessage lcMessage)", "testcase": false, "constructor": false}, {"identifier": "doResume", "parameters": "(LifecycleMessage lcMessage)", "modifiers": "@Override protected", "return": "void", "signature": "void doResume(LifecycleMessage lcMessage)", "full_signature": "@Override protected void doResume(LifecycleMessage lcMessage)", "class_method_signature": "BootstrapPullThread.doResume(LifecycleMessage lcMessage)", "testcase": false, "constructor": false}, {"identifier": "onShutdown", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onShutdown()", "full_signature": "@Override protected void onShutdown()", "class_method_signature": "BootstrapPullThread.onShutdown()", "testcase": false, "constructor": false}, {"identifier": "doPause", "parameters": "(LifecycleMessage lcMessage)", "modifiers": "@Override protected", "return": "void", "signature": "void doPause(LifecycleMessage lcMessage)", "full_signature": "@Override protected void doPause(LifecycleMessage lcMessage)", "class_method_signature": "BootstrapPullThread.doPause(LifecycleMessage lcMessage)", "testcase": false, "constructor": false}, {"identifier": "doSuspendOnError", "parameters": "(LifecycleMessage lcMessage)", "modifiers": "@Override protected", "return": "void", "signature": "void doSuspendOnError(LifecycleMessage lcMessage)", "full_signature": "@Override protected void doSuspendOnError(LifecycleMessage lcMessage)", "class_method_signature": "BootstrapPullThread.doSuspendOnError(LifecycleMessage lcMessage)", "testcase": false, "constructor": false}, {"identifier": "onResume", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onResume()", "full_signature": "@Override protected void onResume()", "class_method_signature": "BootstrapPullThread.onResume()", "testcase": false, "constructor": false}, {"identifier": "doPickBootstrapServer", "parameters": "(ConnectionState curState)", "modifiers": "protected", "return": "void", "signature": "void doPickBootstrapServer(ConnectionState curState)", "full_signature": "protected void doPickBootstrapServer(ConnectionState curState)", "class_method_signature": "BootstrapPullThread.doPickBootstrapServer(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "doRequestTargetScn", "parameters": "(ConnectionState curState)", "modifiers": "private", "return": "void", "signature": "void doRequestTargetScn(ConnectionState curState)", "full_signature": "private void doRequestTargetScn(ConnectionState curState)", "class_method_signature": "BootstrapPullThread.doRequestTargetScn(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "doTargetScnResponseSuccess", "parameters": "(ConnectionState curState)", "modifiers": "protected", "return": "void", "signature": "void doTargetScnResponseSuccess(ConnectionState curState)", "full_signature": "protected void doTargetScnResponseSuccess(ConnectionState curState)", "class_method_signature": "BootstrapPullThread.doTargetScnResponseSuccess(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "doRequestStartScn", "parameters": "(ConnectionState curState)", "modifiers": "private", "return": "void", "signature": "void doRequestStartScn(ConnectionState curState)", "full_signature": "private void doRequestStartScn(ConnectionState curState)", "class_method_signature": "BootstrapPullThread.doRequestStartScn(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "doStartScnResponseSuccess", "parameters": "(ConnectionState curState)", "modifiers": "private", "return": "void", "signature": "void doStartScnResponseSuccess(ConnectionState curState)", "full_signature": "private void doStartScnResponseSuccess(ConnectionState curState)", "class_method_signature": "BootstrapPullThread.doStartScnResponseSuccess(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "doRequestBootstrapStream", "parameters": "(ConnectionState curState)", "modifiers": "protected", "return": "void", "signature": "void doRequestBootstrapStream(ConnectionState curState)", "full_signature": "protected void doRequestBootstrapStream(ConnectionState curState)", "class_method_signature": "BootstrapPullThread.doRequestBootstrapStream(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "doReadBootstrapEvents", "parameters": "(ConnectionState curState)", "modifiers": "protected", "return": "void", "signature": "void doReadBootstrapEvents(ConnectionState curState)", "full_signature": "protected void doReadBootstrapEvents(ConnectionState curState)", "class_method_signature": "BootstrapPullThread.doReadBootstrapEvents(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "doStreamResponseDone", "parameters": "(ConnectionState curState)", "modifiers": "protected", "return": "void", "signature": "void doStreamResponseDone(ConnectionState curState)", "full_signature": "protected void doStreamResponseDone(ConnectionState curState)", "class_method_signature": "BootstrapPullThread.doStreamResponseDone(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "processBootstrapComplete", "parameters": "(Checkpoint cp, ConnectionState curState)", "modifiers": "protected", "return": "void", "signature": "void processBootstrapComplete(Checkpoint cp, ConnectionState curState)", "full_signature": "protected void processBootstrapComplete(Checkpoint cp, ConnectionState curState)", "class_method_signature": "BootstrapPullThread.processBootstrapComplete(Checkpoint cp, ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "sendErrorEventToDispatcher", "parameters": "(ConnectionState curState)", "modifiers": "protected", "return": "void", "signature": "void sendErrorEventToDispatcher(ConnectionState curState)", "full_signature": "protected void sendErrorEventToDispatcher(ConnectionState curState)", "class_method_signature": "BootstrapPullThread.sendErrorEventToDispatcher(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "logBootstrapPhase", "parameters": "(DbusClientMode mode, int snapshotSrcId, int catchupSrcId)", "modifiers": "private", "return": "void", "signature": "void logBootstrapPhase(DbusClientMode mode, int snapshotSrcId, int catchupSrcId)", "full_signature": "private void logBootstrapPhase(DbusClientMode mode, int snapshotSrcId, int catchupSrcId)", "class_method_signature": "BootstrapPullThread.logBootstrapPhase(DbusClientMode mode, int snapshotSrcId, int catchupSrcId)", "testcase": false, "constructor": false}, {"identifier": "processStreamRequestError", "parameters": "(ConnectionState state)", "modifiers": "private", "return": "void", "signature": "void processStreamRequestError(ConnectionState state)", "full_signature": "private void processStreamRequestError(ConnectionState state)", "class_method_signature": "BootstrapPullThread.processStreamRequestError(ConnectionState state)", "testcase": false, "constructor": false}, {"identifier": "processStreamResponseError", "parameters": "(ConnectionState state)", "modifiers": "private", "return": "void", "signature": "void processStreamResponseError(ConnectionState state)", "full_signature": "private void processStreamResponseError(ConnectionState state)", "class_method_signature": "BootstrapPullThread.processStreamResponseError(ConnectionState state)", "testcase": false, "constructor": false}, {"identifier": "processTargetScnResponseError", "parameters": "(ConnectionState currentState)", "modifiers": "private", "return": "void", "signature": "void processTargetScnResponseError(ConnectionState currentState)", "full_signature": "private void processTargetScnResponseError(ConnectionState currentState)", "class_method_signature": "BootstrapPullThread.processTargetScnResponseError(ConnectionState currentState)", "testcase": false, "constructor": false}, {"identifier": "processTargetScnRequestError", "parameters": "(ConnectionState currentState)", "modifiers": "private", "return": "void", "signature": "void processTargetScnRequestError(ConnectionState currentState)", "full_signature": "private void processTargetScnRequestError(ConnectionState currentState)", "class_method_signature": "BootstrapPullThread.processTargetScnRequestError(ConnectionState currentState)", "testcase": false, "constructor": false}, {"identifier": "processStartScnResponseError", "parameters": "(ConnectionState currentState)", "modifiers": "private", "return": "void", "signature": "void processStartScnResponseError(ConnectionState currentState)", "full_signature": "private void processStartScnResponseError(ConnectionState currentState)", "class_method_signature": "BootstrapPullThread.processStartScnResponseError(ConnectionState currentState)", "testcase": false, "constructor": false}, {"identifier": "processStartScnRequestError", "parameters": "(ConnectionState currentState)", "modifiers": "private", "return": "void", "signature": "void processStartScnRequestError(ConnectionState currentState)", "full_signature": "private void processStartScnRequestError(ConnectionState currentState)", "class_method_signature": "BootstrapPullThread.processStartScnRequestError(ConnectionState currentState)", "testcase": false, "constructor": false}, {"identifier": "resetConnection", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void resetConnection()", "full_signature": "@Override protected void resetConnection()", "class_method_signature": "BootstrapPullThread.resetConnection()", "testcase": false, "constructor": false}, {"identifier": "getRetriesBeforeCkptCleanup", "parameters": "()", "modifiers": "protected", "return": "BackoffTimer", "signature": "BackoffTimer getRetriesBeforeCkptCleanup()", "full_signature": "protected BackoffTimer getRetriesBeforeCkptCleanup()", "class_method_signature": "BootstrapPullThread.getRetriesBeforeCkptCleanup()", "testcase": false, "constructor": false}, {"identifier": "determineNextStateFromCheckpoint", "parameters": "(ConnectionState curState)", "modifiers": "private", "return": "void", "signature": "void determineNextStateFromCheckpoint(ConnectionState curState)", "full_signature": "private void determineNextStateFromCheckpoint(ConnectionState curState)", "class_method_signature": "BootstrapPullThread.determineNextStateFromCheckpoint(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "determineNextStateFromSnapshotCheckpoint", "parameters": "(Checkpoint cp,\n                                                        BootstrapCheckpointHandler cpHandler,\n                                                        ConnectionState curState)", "modifiers": "private", "return": "void", "signature": "void determineNextStateFromSnapshotCheckpoint(Checkpoint cp,\n                                                        BootstrapCheckpointHandler cpHandler,\n                                                        ConnectionState curState)", "full_signature": "private void determineNextStateFromSnapshotCheckpoint(Checkpoint cp,\n                                                        BootstrapCheckpointHandler cpHandler,\n                                                        ConnectionState curState)", "class_method_signature": "BootstrapPullThread.determineNextStateFromSnapshotCheckpoint(Checkpoint cp,\n                                                        BootstrapCheckpointHandler cpHandler,\n                                                        ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "determineNextStateFromCatchupCheckpoint", "parameters": "(Checkpoint cp,\n                                                       BootstrapCheckpointHandler cpHandler,\n                                                       ConnectionState curState)", "modifiers": "private", "return": "void", "signature": "void determineNextStateFromCatchupCheckpoint(Checkpoint cp,\n                                                       BootstrapCheckpointHandler cpHandler,\n                                                       ConnectionState curState)", "full_signature": "private void determineNextStateFromCatchupCheckpoint(Checkpoint cp,\n                                                       BootstrapCheckpointHandler cpHandler,\n                                                       ConnectionState curState)", "class_method_signature": "BootstrapPullThread.determineNextStateFromCatchupCheckpoint(Checkpoint cp,\n                                                       BootstrapCheckpointHandler cpHandler,\n                                                       ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "lockV3Bootstrap", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void lockV3Bootstrap()", "full_signature": "private void lockV3Bootstrap()", "class_method_signature": "BootstrapPullThread.lockV3Bootstrap()", "testcase": false, "constructor": false}, {"identifier": "unlockV3Bootstrap", "parameters": "(boolean shutdownCase)", "modifiers": "private", "return": "void", "signature": "void unlockV3Bootstrap(boolean shutdownCase)", "full_signature": "private void unlockV3Bootstrap(boolean shutdownCase)", "class_method_signature": "BootstrapPullThread.unlockV3Bootstrap(boolean shutdownCase)", "testcase": false, "constructor": false}, {"identifier": "unlockV3Bootstrap", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void unlockV3Bootstrap()", "full_signature": "private void unlockV3Bootstrap()", "class_method_signature": "BootstrapPullThread.unlockV3Bootstrap()", "testcase": false, "constructor": false}, {"identifier": "getV3BootstrapLock", "parameters": "()", "modifiers": "protected", "return": "ReentrantLock", "signature": "ReentrantLock getV3BootstrapLock()", "full_signature": "protected ReentrantLock getV3BootstrapLock()", "class_method_signature": "BootstrapPullThread.getV3BootstrapLock()", "testcase": false, "constructor": false}], "file": "databus-client/databus-client-http/src/main/java/com/linkedin/databus/client/BootstrapPullThread.java"}, "focal_method": {"identifier": "getRetriesBeforeCkptCleanup", "parameters": "()", "modifiers": "protected", "return": "BackoffTimer", "body": "protected BackoffTimer getRetriesBeforeCkptCleanup()\n  {\n    return _retriesBeforeCkptCleanup;\n  }", "signature": "BackoffTimer getRetriesBeforeCkptCleanup()", "full_signature": "protected BackoffTimer getRetriesBeforeCkptCleanup()", "class_method_signature": "BootstrapPullThread.getRetriesBeforeCkptCleanup()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}