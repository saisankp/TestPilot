{"test_class": {"identifier": "JsonSchemaGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java"}, "test_case": {"identifier": "testSimpleSchemaGenerator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSimpleSchemaGenerator() throws IOException {\n        Collection<GeneratedFile> files =\n                new JsonSchemaGenerator.SimpleBuilder(Thread.currentThread().getContextClassLoader())\n                        .addSchemaName(PersonInputParams.class.getName(), \"org.jbpm.test\", \"test\")\n                        .addSchemaName(PersonOutputParams.class.getName(), \"org.jbpm.test\", \"test\")\n                        .build()\n                        .generate();\n\n        assertEquals(1, files.size());\n        GeneratedFile file = files.iterator().next();\n        assertEquals(\"org#jbpm#test_test.json\", file.relativePath());\n        assertSchema(file, SchemaVersion.DRAFT_7);\n\n        Collection<GeneratedFile> filesFromClasses =\n                new JsonSchemaGenerator.ClassBuilder(\n                        Stream.of(PersonInputParams.class, PersonOutputParams.class, IgnoredClass.class))\n                        .build().generate();\n        assertEquals(1, filesFromClasses.size());\n        GeneratedFile fileFromClasses = filesFromClasses.iterator().next();\n\n        assertEquals(fileFromClasses.relativePath(), file.relativePath(),\n                     \"must have the same path of a class-based generator\");\n        assertArrayEquals(fileFromClasses.contents(), file.contents(),\n                     \"must have the same contents of a class-based generator\");\n    }", "signature": "void testSimpleSchemaGenerator()", "full_signature": "@Test public void testSimpleSchemaGenerator()", "class_method_signature": "JsonSchemaGeneratorTest.testSimpleSchemaGenerator()", "testcase": true, "constructor": false, "invocations": ["generate", "build", "addSchemaName", "addSchemaName", "getContextClassLoader", "currentThread", "getName", "getName", "assertEquals", "size", "next", "iterator", "assertEquals", "relativePath", "assertSchema", "generate", "build", "of", "assertEquals", "size", "next", "iterator", "assertEquals", "relativePath", "relativePath", "assertArrayEquals", "contents", "contents"]}, "focal_class": {"identifier": "JsonSchemaGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger logger = LoggerFactory.getLogger(JsonSchemaGenerator.class);", "modifier": "public static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JsonSchemaGenerator.class)", "var_name": "logger"}, {"original_string": "public static final SchemaVersion DEFAULT_SCHEMA_VERSION = SchemaVersion.DRAFT_7;", "modifier": "public static final", "type": "SchemaVersion", "declarator": "DEFAULT_SCHEMA_VERSION = SchemaVersion.DRAFT_7", "var_name": "DEFAULT_SCHEMA_VERSION"}, {"original_string": "private final Map<String, List<Class<?>>> map;", "modifier": "private final", "type": "Map<String, List<Class<?>>>", "declarator": "map", "var_name": "map"}, {"original_string": "private final SchemaVersion schemaVersion;", "modifier": "private final", "type": "SchemaVersion", "declarator": "schemaVersion", "var_name": "schemaVersion"}], "methods": [{"identifier": "JsonSchemaGenerator", "parameters": "(Map<String, List<Class<?>>> map, SchemaVersion schemaVersion)", "modifiers": "private", "return": "", "signature": " JsonSchemaGenerator(Map<String, List<Class<?>>> map, SchemaVersion schemaVersion)", "full_signature": "private  JsonSchemaGenerator(Map<String, List<Class<?>>> map, SchemaVersion schemaVersion)", "class_method_signature": "JsonSchemaGenerator.JsonSchemaGenerator(Map<String, List<Class<?>>> map, SchemaVersion schemaVersion)", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "()", "modifiers": "public", "return": "Collection<GeneratedFile>", "signature": "Collection<GeneratedFile> generate()", "full_signature": "public Collection<GeneratedFile> generate()", "class_method_signature": "JsonSchemaGenerator.generate()", "testcase": false, "constructor": false}, {"identifier": "getInputOutput", "parameters": "(FieldScope f, SchemaGenerationContext context)", "modifiers": "private", "return": "CustomPropertyDefinition", "signature": "CustomPropertyDefinition getInputOutput(FieldScope f, SchemaGenerationContext context)", "full_signature": "private CustomPropertyDefinition getInputOutput(FieldScope f, SchemaGenerationContext context)", "class_method_signature": "JsonSchemaGenerator.getInputOutput(FieldScope f, SchemaGenerationContext context)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "(Class<?> c)", "modifiers": "private static", "return": "String", "signature": "String getKey(Class<?> c)", "full_signature": "private static String getKey(Class<?> c)", "class_method_signature": "JsonSchemaGenerator.getKey(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "isUserTaskClass", "parameters": "(Class<?> c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isUserTaskClass(Class<?> c)", "full_signature": "private static boolean isUserTaskClass(Class<?> c)", "class_method_signature": "JsonSchemaGenerator.isUserTaskClass(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "isNotUserTaskParam", "parameters": "(FieldScope fieldScope)", "modifiers": "private static", "return": "boolean", "signature": "boolean isNotUserTaskParam(FieldScope fieldScope)", "full_signature": "private static boolean isNotUserTaskParam(FieldScope fieldScope)", "class_method_signature": "JsonSchemaGenerator.isNotUserTaskParam(FieldScope fieldScope)", "testcase": false, "constructor": false}], "file": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "()", "modifiers": "public", "return": "Collection<GeneratedFile>", "body": "public Collection<GeneratedFile> generate() throws IOException {\n        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(schemaVersion, OptionPreset.PLAIN_JSON);\n        builder.forTypesInGeneral().withStringFormatResolver(target -> target.getSimpleTypeDescription().equals(\"Date\") ? \"date-time\" : null);\n        builder.forFields().withIgnoreCheck(JsonSchemaGenerator::isNotUserTaskParam).withCustomDefinitionProvider(this::getInputOutput);\n        SchemaGenerator generator = new SchemaGenerator(builder.build());\n        ObjectWriter writer = new ObjectMapper().writer();\n\n        Collection<GeneratedFile> files = new ArrayList<>();\n        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n            ObjectNode merged = null;\n            for (Class<?> c : entry.getValue()) {\n                ObjectNode read = generator.generateSchema(c);\n                if (merged == null) {\n                    merged = read;\n                } else {\n                    JsonUtils.merge(read, merged);\n                }\n            }\n            try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\n                writer.writeValue(outputStream, merged);\n                files.add(new GeneratedFile(Type.JSON_SCHEMA, JsonSchemaUtil.getFileName(entry.getKey()), outputStream.toByteArray()));\n            }\n        }\n        return files;\n    }", "signature": "Collection<GeneratedFile> generate()", "full_signature": "public Collection<GeneratedFile> generate()", "class_method_signature": "JsonSchemaGenerator.generate()", "testcase": false, "constructor": false, "invocations": ["withStringFormatResolver", "forTypesInGeneral", "equals", "getSimpleTypeDescription", "withCustomDefinitionProvider", "withIgnoreCheck", "forFields", "build", "writer", "entrySet", "getValue", "generateSchema", "merge", "writeValue", "add", "getFileName", "getKey", "toByteArray"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}