{"test_class": {"identifier": "TryListBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "dexlib2/src/test/java/org/jf/dexlib2/writer/util/TryListBuilderTest.java"}, "test_case": {"identifier": "testHandlerMerge_Catchall_Catchall_DifferentAddress", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHandlerMerge_Catchall_Catchall_DifferentAddress() {\n        TryListBuilder tlb = new TryListBuilder();\n\n        tlb.addHandler(5, 10, new ImmutableExceptionHandler(null, 5));\n        try {\n            tlb.addHandler(0, 15, new ImmutableExceptionHandler(null, 6));\n        } catch (TryListBuilder.InvalidTryException ex) {\n            return;\n        }\n        Assert.fail();\n    }", "signature": "void testHandlerMerge_Catchall_Catchall_DifferentAddress()", "full_signature": "@Test public void testHandlerMerge_Catchall_Catchall_DifferentAddress()", "class_method_signature": "TryListBuilderTest.testHandlerMerge_Catchall_Catchall_DifferentAddress()", "testcase": true, "constructor": false, "invocations": ["addHandler", "addHandler", "fail"]}, "focal_class": {"identifier": "TryListBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MutableTryBlock<EH> listStart;", "modifier": "private final", "type": "MutableTryBlock<EH>", "declarator": "listStart", "var_name": "listStart"}, {"original_string": "private final MutableTryBlock<EH> listEnd;", "modifier": "private final", "type": "MutableTryBlock<EH>", "declarator": "listEnd", "var_name": "listEnd"}], "methods": [{"identifier": "TryListBuilder", "parameters": "()", "modifiers": "public", "return": "", "signature": " TryListBuilder()", "full_signature": "public  TryListBuilder()", "class_method_signature": "TryListBuilder.TryListBuilder()", "testcase": false, "constructor": true}, {"identifier": "massageTryBlocks", "parameters": "(\n            List<? extends TryBlock<? extends EH>> tryBlocks)", "modifiers": "public static", "return": "List<TryBlock<EH>>", "signature": "List<TryBlock<EH>> massageTryBlocks(\n            List<? extends TryBlock<? extends EH>> tryBlocks)", "full_signature": "public static List<TryBlock<EH>> massageTryBlocks(\n            List<? extends TryBlock<? extends EH>> tryBlocks)", "class_method_signature": "TryListBuilder.massageTryBlocks(\n            List<? extends TryBlock<? extends EH>> tryBlocks)", "testcase": false, "constructor": false}, {"identifier": "getBoundingRanges", "parameters": "(int startAddress, int endAddress)", "modifiers": "private", "return": "TryBounds<EH>", "signature": "TryBounds<EH> getBoundingRanges(int startAddress, int endAddress)", "full_signature": "private TryBounds<EH> getBoundingRanges(int startAddress, int endAddress)", "class_method_signature": "TryListBuilder.getBoundingRanges(int startAddress, int endAddress)", "testcase": false, "constructor": false}, {"identifier": "addHandler", "parameters": "(int startAddress, int endAddress, EH handler)", "modifiers": "public", "return": "void", "signature": "void addHandler(int startAddress, int endAddress, EH handler)", "full_signature": "public void addHandler(int startAddress, int endAddress, EH handler)", "class_method_signature": "TryListBuilder.addHandler(int startAddress, int endAddress, EH handler)", "testcase": false, "constructor": false}, {"identifier": "getTryBlocks", "parameters": "()", "modifiers": "public", "return": "List<TryBlock<EH>>", "signature": "List<TryBlock<EH>> getTryBlocks()", "full_signature": "public List<TryBlock<EH>> getTryBlocks()", "class_method_signature": "TryListBuilder.getTryBlocks()", "testcase": false, "constructor": false}], "file": "dexlib2/src/main/java/org/jf/dexlib2/writer/util/TryListBuilder.java"}, "focal_method": {"identifier": "addHandler", "parameters": "(int startAddress, int endAddress, EH handler)", "modifiers": "public", "return": "void", "body": "public void addHandler(int startAddress, int endAddress, EH handler) {\n        TryBounds<EH> bounds = getBoundingRanges(startAddress, endAddress);\n\n        MutableTryBlock<EH> startBlock = bounds.start;\n        MutableTryBlock<EH> endBlock = bounds.end;\n\n        int previousEnd = startAddress;\n        MutableTryBlock<EH> tryBlock = startBlock;\n\n        /*Now we have the start and end ranges that exactly match the start and end\n        of the range being added. We need to iterate over all the ranges from the start\n        to end range inclusively, and append the handler to the end of each range's handler\n        list. We also need to create a new range for any \"holes\" in the existing ranges*/\n        do\n        {\n            //is there a hole? If so, add a new range to fill the hole\n            if (tryBlock.startCodeAddress > previousEnd) {\n                MutableTryBlock<EH> newBlock = new MutableTryBlock<EH>(previousEnd, tryBlock.startCodeAddress);\n                tryBlock.prepend(newBlock);\n                tryBlock = newBlock;\n            }\n\n            tryBlock.addHandler(handler);\n            previousEnd = tryBlock.endCodeAddress;\n            tryBlock = tryBlock.next;\n        } while (tryBlock.prev != endBlock);\n    }", "signature": "void addHandler(int startAddress, int endAddress, EH handler)", "full_signature": "public void addHandler(int startAddress, int endAddress, EH handler)", "class_method_signature": "TryListBuilder.addHandler(int startAddress, int endAddress, EH handler)", "testcase": false, "constructor": false, "invocations": ["getBoundingRanges", "prepend", "addHandler"]}, "repository": {"repo_id": 5925560, "url": "https://github.com/JesusFreke/smali", "language": "Java", "is_fork": false, "fork_count": 875, "stargazer_count": 4465, "size": 9375, "license": "licensed"}}