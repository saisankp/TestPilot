{"test_class": {"identifier": "DataProviderMethodResolverHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@SuppressFBWarnings(value = \"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\", justification = \"Mockito rule needs no further configuration\")\n    @Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@SuppressFBWarnings(value = \"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\", justification = \"Mockito rule needs no further configuration\")\n    @Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Mock\n    private DataProviderResolverContext context;", "modifier": "@Mock\n    private", "type": "DataProviderResolverContext", "declarator": "context", "var_name": "context"}], "file": "core/src/test/java/com/tngtech/junit/dataprovider/resolver/DataProviderMethodResolverHelperTest.java"}, "test_case": {"identifier": "testFindDataProviderMethodsShouldThrowIllegalArgumentExceptionIfResolverClassHasNoDefaultConstructorExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindDataProviderMethodsShouldThrowIllegalArgumentExceptionIfResolverClassHasNoDefaultConstructorExists() {\n        // Given:\n        @SuppressWarnings(\"unchecked\")\n        final List<Class<? extends DataProviderMethodResolver>> resolverClasses =\n                Collections.<Class<? extends DataProviderMethodResolver>>singletonList(NoDefaultConstructor.class);\n\n        when(context.getResolverClasses()).thenReturn(resolverClasses);\n\n        expectedException.expect(IllegalArgumentException.class);\n        expectedException.expectMessage(\"Could not find default constructor to instantiate\");\n\n        // When:\n        DataProviderMethodResolverHelper.findDataProviderMethods(context);\n\n        // Then: expect exception\n    }", "signature": "void testFindDataProviderMethodsShouldThrowIllegalArgumentExceptionIfResolverClassHasNoDefaultConstructorExists()", "full_signature": "@Test public void testFindDataProviderMethodsShouldThrowIllegalArgumentExceptionIfResolverClassHasNoDefaultConstructorExists()", "class_method_signature": "DataProviderMethodResolverHelperTest.testFindDataProviderMethodsShouldThrowIllegalArgumentExceptionIfResolverClassHasNoDefaultConstructorExists()", "testcase": true, "constructor": false, "invocations": ["singletonList", "thenReturn", "when", "getResolverClasses", "expect", "expectMessage", "findDataProviderMethods"]}, "focal_class": {"identifier": "DataProviderMethodResolverHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "findDataProviderMethods", "parameters": "(DataProviderResolverContext context)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> findDataProviderMethods(DataProviderResolverContext context)", "full_signature": "public static List<Method> findDataProviderMethods(DataProviderResolverContext context)", "class_method_signature": "DataProviderMethodResolverHelper.findDataProviderMethods(DataProviderResolverContext context)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Class<T> clazz)", "modifiers": "private static", "return": "T", "signature": "T newInstance(Class<T> clazz)", "full_signature": "private static T newInstance(Class<T> clazz)", "class_method_signature": "DataProviderMethodResolverHelper.newInstance(Class<T> clazz)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/tngtech/junit/dataprovider/resolver/DataProviderMethodResolverHelper.java"}, "focal_method": {"identifier": "findDataProviderMethods", "parameters": "(DataProviderResolverContext context)", "modifiers": "public static", "return": "List<Method>", "body": "public static List<Method> findDataProviderMethods(DataProviderResolverContext context) {\n        checkNotNull(context, \"'context' must not be null\");\n\n        List<Method> result = new ArrayList<Method>();\n        for (Class<? extends DataProviderMethodResolver> resolverClass : context.getResolverClasses()) {\n            DataProviderMethodResolver resolver = newInstance(resolverClass);\n\n            List<Method> dataProviderMethods = resolver.resolve(context);\n            if (context.getResolveStrategy() == ResolveStrategy.UNTIL_FIRST_MATCH && !dataProviderMethods.isEmpty()) {\n                result.addAll(dataProviderMethods);\n                break;\n\n            } else if (context.getResolveStrategy() == ResolveStrategy.AGGREGATE_ALL_MATCHES) {\n                result.addAll(dataProviderMethods);\n            }\n        }\n        return result;\n    }", "signature": "List<Method> findDataProviderMethods(DataProviderResolverContext context)", "full_signature": "public static List<Method> findDataProviderMethods(DataProviderResolverContext context)", "class_method_signature": "DataProviderMethodResolverHelper.findDataProviderMethods(DataProviderResolverContext context)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "getResolverClasses", "newInstance", "resolve", "getResolveStrategy", "isEmpty", "addAll", "getResolveStrategy", "addAll"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}