{"test_class": {"identifier": "ModuleHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/src/test/java/org/axway/grapes/server/core/ModuleHandlerTest.java"}, "test_case": {"identifier": "getAModuleThatDoesNotExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAModuleThatDoesNotExist(){\n        final RepositoryHandler repositoryHandler = mock(RepositoryHandler.class);\n        final ModuleHandler handler = new ModuleHandler(repositoryHandler);\n\n        WebApplicationException exception = null;\n\n        try{\n            handler.getModule(\"doesNotExist\");\n        }\n        catch (WebApplicationException e){\n            exception = e;\n        }\n\n        assertNotNull(exception);\n        assertEquals(javax.ws.rs.core.Response.Status.NOT_FOUND.getStatusCode(), exception.getResponse().getStatus());\n    }", "signature": "void getAModuleThatDoesNotExist()", "full_signature": "@Test public void getAModuleThatDoesNotExist()", "class_method_signature": "ModuleHandlerTest.getAModuleThatDoesNotExist()", "testcase": true, "constructor": false, "invocations": ["mock", "getModule", "assertNotNull", "assertEquals", "getStatusCode", "getStatus", "getResponse"]}, "focal_class": {"identifier": "ModuleHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ModuleHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ModuleHandler.class)", "var_name": "LOG"}, {"original_string": "private final RepositoryHandler repositoryHandler;", "modifier": "private final", "type": "RepositoryHandler", "declarator": "repositoryHandler", "var_name": "repositoryHandler"}, {"original_string": "private CacheAccess<String, PromotionReportView> cache = null;", "modifier": "private", "type": "CacheAccess<String, PromotionReportView>", "declarator": "cache = null", "var_name": "cache"}, {"original_string": "private CacheUtils cacheUtils = new CacheUtils();", "modifier": "private", "type": "CacheUtils", "declarator": "cacheUtils = new CacheUtils()", "var_name": "cacheUtils"}, {"original_string": "private LicenseMatcher licenseMatcher;", "modifier": "private", "type": "LicenseMatcher", "declarator": "licenseMatcher", "var_name": "licenseMatcher"}], "methods": [{"identifier": "ModuleHandler", "parameters": "(final RepositoryHandler repositoryHandler)", "modifiers": "public", "return": "", "signature": " ModuleHandler(final RepositoryHandler repositoryHandler)", "full_signature": "public  ModuleHandler(final RepositoryHandler repositoryHandler)", "class_method_signature": "ModuleHandler.ModuleHandler(final RepositoryHandler repositoryHandler)", "testcase": false, "constructor": true}, {"identifier": "store", "parameters": "(final DbModule dbModule)", "modifiers": "public", "return": "void", "signature": "void store(final DbModule dbModule)", "full_signature": "public void store(final DbModule dbModule)", "class_method_signature": "ModuleHandler.store(final DbModule dbModule)", "testcase": false, "constructor": false}, {"identifier": "getModuleNames", "parameters": "(final FiltersHolder filters)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getModuleNames(final FiltersHolder filters)", "full_signature": "public List<String> getModuleNames(final FiltersHolder filters)", "class_method_signature": "ModuleHandler.getModuleNames(final FiltersHolder filters)", "testcase": false, "constructor": false}, {"identifier": "getModuleVersions", "parameters": "(final String name, final FiltersHolder filters)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getModuleVersions(final String name, final FiltersHolder filters)", "full_signature": "public List<String> getModuleVersions(final String name, final FiltersHolder filters)", "class_method_signature": "ModuleHandler.getModuleVersions(final String name, final FiltersHolder filters)", "testcase": false, "constructor": false}, {"identifier": "getModule", "parameters": "(final String moduleId)", "modifiers": "public", "return": "DbModule", "signature": "DbModule getModule(final String moduleId)", "full_signature": "public DbModule getModule(final String moduleId)", "class_method_signature": "ModuleHandler.getModule(final String moduleId)", "testcase": false, "constructor": false}, {"identifier": "deleteModule", "parameters": "(final String moduleId)", "modifiers": "public", "return": "void", "signature": "void deleteModule(final String moduleId)", "full_signature": "public void deleteModule(final String moduleId)", "class_method_signature": "ModuleHandler.deleteModule(final String moduleId)", "testcase": false, "constructor": false}, {"identifier": "getModuleLicenses", "parameters": "(final String moduleId,\n                                             final LicenseMatcher licenseMatcher)", "modifiers": "public", "return": "List<DbLicense>", "signature": "List<DbLicense> getModuleLicenses(final String moduleId,\n                                             final LicenseMatcher licenseMatcher)", "full_signature": "public List<DbLicense> getModuleLicenses(final String moduleId,\n                                             final LicenseMatcher licenseMatcher)", "class_method_signature": "ModuleHandler.getModuleLicenses(final String moduleId,\n                                             final LicenseMatcher licenseMatcher)", "testcase": false, "constructor": false}, {"identifier": "promoteModule", "parameters": "(final String moduleId)", "modifiers": "public", "return": "void", "signature": "void promoteModule(final String moduleId)", "full_signature": "public void promoteModule(final String moduleId)", "class_method_signature": "ModuleHandler.promoteModule(final String moduleId)", "testcase": false, "constructor": false}, {"identifier": "getPromotionReport", "parameters": "(final String moduleId)", "modifiers": "public", "return": "PromotionReportView", "signature": "PromotionReportView getPromotionReport(final String moduleId)", "full_signature": "public PromotionReportView getPromotionReport(final String moduleId)", "class_method_signature": "ModuleHandler.getPromotionReport(final String moduleId)", "testcase": false, "constructor": false}, {"identifier": "removeDuplicates", "parameters": "(List<Dependency> deps)", "modifiers": "private", "return": "void", "signature": "void removeDuplicates(List<Dependency> deps)", "full_signature": "private void removeDuplicates(List<Dependency> deps)", "class_method_signature": "ModuleHandler.removeDuplicates(List<Dependency> deps)", "testcase": false, "constructor": false}, {"identifier": "getOrganization", "parameters": "(final DbModule module)", "modifiers": "public", "return": "DbOrganization", "signature": "DbOrganization getOrganization(final DbModule module)", "full_signature": "public DbOrganization getOrganization(final DbModule module)", "class_method_signature": "ModuleHandler.getOrganization(final DbModule module)", "testcase": false, "constructor": false}, {"identifier": "getModules", "parameters": "(final FiltersHolder filters)", "modifiers": "public", "return": "List<DbModule>", "signature": "List<DbModule> getModules(final FiltersHolder filters)", "full_signature": "public List<DbModule> getModules(final FiltersHolder filters)", "class_method_signature": "ModuleHandler.getModules(final FiltersHolder filters)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/axway/grapes/server/core/ModuleHandler.java"}, "focal_method": {"identifier": "getModule", "parameters": "(final String moduleId)", "modifiers": "public", "return": "DbModule", "body": "public DbModule getModule(final String moduleId) {\n        final DbModule dbModule = repositoryHandler.getModule(moduleId);\n\n        if (dbModule == null) {\n            throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND)\n                    .entity(\"Module \" + moduleId + \" does not exist.\").build());\n        }\n\n        return dbModule;\n    }", "signature": "DbModule getModule(final String moduleId)", "full_signature": "public DbModule getModule(final String moduleId)", "class_method_signature": "ModuleHandler.getModule(final String moduleId)", "testcase": false, "constructor": false, "invocations": ["getModule", "build", "entity", "status"]}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}