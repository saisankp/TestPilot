{"test_class": {"identifier": "DeserializeStrategyGetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "FullHttpRequest httpRequest;", "modifier": "", "type": "FullHttpRequest", "declarator": "httpRequest", "var_name": "httpRequest"}, {"original_string": "IObject emptyIObject;", "modifier": "", "type": "IObject", "declarator": "emptyIObject", "var_name": "emptyIObject"}, {"original_string": "IParseTree parseTree;", "modifier": "", "type": "IParseTree", "declarator": "parseTree", "var_name": "parseTree"}, {"original_string": "QueryStringDecoder decoder;", "modifier": "", "type": "QueryStringDecoder", "declarator": "decoder", "var_name": "decoder"}], "file": "CoreFeatures/HttpEndpoint/DeserializeStrategyGet/src/test/java/info/smart_tools/smartactors/http_endpoint/deserialize_strategy_get/DeserializeStrategyGetTest.java"}, "test_case": {"identifier": "testUriWithEmptyArgs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUriWithEmptyArgs() throws DeserializationException, ResolutionException, InvalidArgumentException, RegistrationException, ChangeValueException, AddRequestParametersToIObjectException {\n        IOC.register(Keys.getOrAdd(\"EmptyIObject\"), new SingletonStrategy(\n                        emptyIObject\n                )\n        );\n\n        IFieldName fieldName = new FieldName(\"messageMapId\");\n\n        String arg = \"/hello\";\n        when(decoder.uri()).thenReturn(arg);\n        when(decoder.parameters()).thenReturn(new HashMap<>());\n\n        Map<String, String> outputMap = new HashMap<>();\n        outputMap.put(\"messageMapId\", \"hello\");\n        when(parseTree.match(arg)).thenReturn(outputMap);\n\n        String testUri = \"www.www.ru/hello\";\n        httpRequest = mock(FullHttpRequest.class);\n        when(httpRequest.uri()).thenReturn(testUri);\n        DeserializeStrategyGet deserializeStrategyGet = new DeserializeStrategyGet(new ArrayList<>());\n        deserializeStrategyGet.extract(emptyIObject, httpRequest);\n        verify(emptyIObject).setValue(fieldName, \"hello\");\n    }", "signature": "void testUriWithEmptyArgs()", "full_signature": "@Test public void testUriWithEmptyArgs()", "class_method_signature": "DeserializeStrategyGetTest.testUriWithEmptyArgs()", "testcase": true, "constructor": false, "invocations": ["register", "getOrAdd", "thenReturn", "when", "uri", "thenReturn", "when", "parameters", "put", "thenReturn", "when", "match", "mock", "thenReturn", "when", "uri", "extract", "setValue", "verify"]}, "focal_class": {"identifier": "DeserializeStrategyGet", "superclass": "", "interfaces": "implements IAddRequestParametersToIObject", "fields": [{"original_string": "private final IParseTree tree;", "modifier": "private final", "type": "IParseTree", "declarator": "tree", "var_name": "tree"}], "methods": [{"identifier": "DeserializeStrategyGet", "parameters": "(final List<String> templates)", "modifiers": "public", "return": "", "signature": " DeserializeStrategyGet(final List<String> templates)", "full_signature": "public  DeserializeStrategyGet(final List<String> templates)", "class_method_signature": "DeserializeStrategyGet.DeserializeStrategyGet(final List<String> templates)", "testcase": false, "constructor": true}, {"identifier": "extract", "parameters": "(final IObject message, final Object requestObject)", "modifiers": "@Override public", "return": "void", "signature": "void extract(final IObject message, final Object requestObject)", "full_signature": "@Override public void extract(final IObject message, final Object requestObject)", "class_method_signature": "DeserializeStrategyGet.extract(final IObject message, final Object requestObject)", "testcase": false, "constructor": false}], "file": "CoreFeatures/HttpEndpoint/DeserializeStrategyGet/src/main/java/info/smart_tools/smartactors/http_endpoint/deserialize_strategy_get/DeserializeStrategyGet.java"}, "focal_method": {"identifier": "extract", "parameters": "(final IObject message, final Object requestObject)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void extract(final IObject message, final Object requestObject) throws AddRequestParametersToIObjectException {\n        FullHttpRequest request = (FullHttpRequest) requestObject;\n        if (!request.uri().contains(\"/\")) {\n            return;\n        }\n        QueryStringDecoder decoder = new QueryStringDecoder(\n                request.uri().substring(request.uri().indexOf(\"/\")));\n        decoder.parameters().forEach(\n                (k, v) -> {\n                    try {\n                        IFieldName fieldName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), k);\n                        message.setValue(fieldName, v.get(0));\n                    } catch (ResolutionException | ChangeValueException | InvalidArgumentException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n        );\n        Map<String, String> parameters = tree.match(decoder.path());\n        parameters.forEach(\n                (k, v) -> {\n                    try {\n                        IFieldName fieldName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), k);\n                        message.setValue(fieldName, v);\n                    } catch (ResolutionException | ChangeValueException | InvalidArgumentException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n        );\n        return;\n    }", "signature": "void extract(final IObject message, final Object requestObject)", "full_signature": "@Override public void extract(final IObject message, final Object requestObject)", "class_method_signature": "DeserializeStrategyGet.extract(final IObject message, final Object requestObject)", "testcase": false, "constructor": false, "invocations": ["contains", "uri", "substring", "uri", "indexOf", "uri", "forEach", "parameters", "resolve", "getOrAdd", "setValue", "get", "match", "path", "forEach", "resolve", "getOrAdd", "setValue"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}