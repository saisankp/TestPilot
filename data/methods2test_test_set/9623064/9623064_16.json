{"test_class": {"identifier": "HttpClientDownloaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PAGE_ALWAYS_NOT_EXISTS = \"http://localhost:13423/404\";", "modifier": "public static final", "type": "String", "declarator": "PAGE_ALWAYS_NOT_EXISTS = \"http://localhost:13423/404\"", "var_name": "PAGE_ALWAYS_NOT_EXISTS"}], "file": "webmagic-core/src/test/java/us/codecraft/webmagic/downloader/HttpClientDownloaderTest.java"}, "test_case": {"identifier": "test_disableCookieManagement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_disableCookieManagement() throws Exception {\n        HttpServer server = httpServer(13423);\n        server.get(not(eq(cookie(\"cookie\"), \"cookie-webmagic\"))).response(\"ok\");\n        Runner.running(server, new Runnable() {\n            @Override\n            public void run() throws Exception {\n                HttpClientDownloader httpClientDownloader = new HttpClientDownloader();\n                Request request = new Request();\n                request.setUrl(\"http://127.0.0.1:13423\");\n                request.addCookie(\"cookie\",\"cookie-webmagic\");\n                Page page = httpClientDownloader.download(request, Site.me().setDisableCookieManagement(true).toTask());\n                assertThat(page.getRawText()).isEqualTo(\"ok\");\n            }\n        });\n    }", "signature": "void test_disableCookieManagement()", "full_signature": "@Test public void test_disableCookieManagement()", "class_method_signature": "HttpClientDownloaderTest.test_disableCookieManagement()", "testcase": true, "constructor": false, "invocations": ["httpServer", "response", "get", "not", "eq", "cookie", "running", "setUrl", "addCookie", "download", "toTask", "setDisableCookieManagement", "me", "isEqualTo", "assertThat", "getRawText"]}, "focal_class": {"identifier": "HttpClientDownloader", "superclass": "extends AbstractDownloader", "interfaces": "", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private final Map<String, CloseableHttpClient> httpClients = new HashMap<String, CloseableHttpClient>();", "modifier": "private final", "type": "Map<String, CloseableHttpClient>", "declarator": "httpClients = new HashMap<String, CloseableHttpClient>()", "var_name": "httpClients"}, {"original_string": "private HttpClientGenerator httpClientGenerator = new HttpClientGenerator();", "modifier": "private", "type": "HttpClientGenerator", "declarator": "httpClientGenerator = new HttpClientGenerator()", "var_name": "httpClientGenerator"}, {"original_string": "private HttpUriRequestConverter httpUriRequestConverter = new HttpUriRequestConverter();", "modifier": "private", "type": "HttpUriRequestConverter", "declarator": "httpUriRequestConverter = new HttpUriRequestConverter()", "var_name": "httpUriRequestConverter"}, {"original_string": "private ProxyProvider proxyProvider;", "modifier": "private", "type": "ProxyProvider", "declarator": "proxyProvider", "var_name": "proxyProvider"}, {"original_string": "private boolean responseHeader = true;", "modifier": "private", "type": "boolean", "declarator": "responseHeader = true", "var_name": "responseHeader"}], "methods": [{"identifier": "setHttpUriRequestConverter", "parameters": "(HttpUriRequestConverter httpUriRequestConverter)", "modifiers": "public", "return": "void", "signature": "void setHttpUriRequestConverter(HttpUriRequestConverter httpUriRequestConverter)", "full_signature": "public void setHttpUriRequestConverter(HttpUriRequestConverter httpUriRequestConverter)", "class_method_signature": "HttpClientDownloader.setHttpUriRequestConverter(HttpUriRequestConverter httpUriRequestConverter)", "testcase": false, "constructor": false}, {"identifier": "setProxyProvider", "parameters": "(ProxyProvider proxyProvider)", "modifiers": "public", "return": "void", "signature": "void setProxyProvider(ProxyProvider proxyProvider)", "full_signature": "public void setProxyProvider(ProxyProvider proxyProvider)", "class_method_signature": "HttpClientDownloader.setProxyProvider(ProxyProvider proxyProvider)", "testcase": false, "constructor": false}, {"identifier": "getHttpClient", "parameters": "(Site site)", "modifiers": "private", "return": "CloseableHttpClient", "signature": "CloseableHttpClient getHttpClient(Site site)", "full_signature": "private CloseableHttpClient getHttpClient(Site site)", "class_method_signature": "HttpClientDownloader.getHttpClient(Site site)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(Request request, Task task)", "modifiers": "@Override public", "return": "Page", "signature": "Page download(Request request, Task task)", "full_signature": "@Override public Page download(Request request, Task task)", "class_method_signature": "HttpClientDownloader.download(Request request, Task task)", "testcase": false, "constructor": false}, {"identifier": "setThread", "parameters": "(int thread)", "modifiers": "@Override public", "return": "void", "signature": "void setThread(int thread)", "full_signature": "@Override public void setThread(int thread)", "class_method_signature": "HttpClientDownloader.setThread(int thread)", "testcase": false, "constructor": false}, {"identifier": "handleResponse", "parameters": "(Request request, String charset, HttpResponse httpResponse, Task task)", "modifiers": "protected", "return": "Page", "signature": "Page handleResponse(Request request, String charset, HttpResponse httpResponse, Task task)", "full_signature": "protected Page handleResponse(Request request, String charset, HttpResponse httpResponse, Task task)", "class_method_signature": "HttpClientDownloader.handleResponse(Request request, String charset, HttpResponse httpResponse, Task task)", "testcase": false, "constructor": false}, {"identifier": "getHtmlCharset", "parameters": "(String contentType, byte[] contentBytes)", "modifiers": "private", "return": "String", "signature": "String getHtmlCharset(String contentType, byte[] contentBytes)", "full_signature": "private String getHtmlCharset(String contentType, byte[] contentBytes)", "class_method_signature": "HttpClientDownloader.getHtmlCharset(String contentType, byte[] contentBytes)", "testcase": false, "constructor": false}], "file": "webmagic-core/src/main/java/us/codecraft/webmagic/downloader/HttpClientDownloader.java"}, "focal_method": {"identifier": "download", "parameters": "(Request request, Task task)", "modifiers": "@Override public", "return": "Page", "body": "@Override\n    public Page download(Request request, Task task) {\n        if (task == null || task.getSite() == null) {\n            throw new NullPointerException(\"task or site can not be null\");\n        }\n        CloseableHttpResponse httpResponse = null;\n        CloseableHttpClient httpClient = getHttpClient(task.getSite());\n        Proxy proxy = proxyProvider != null ? proxyProvider.getProxy(task) : null;\n        HttpClientRequestContext requestContext = httpUriRequestConverter.convert(request, task.getSite(), proxy);\n        Page page = Page.fail();\n        try {\n            httpResponse = httpClient.execute(requestContext.getHttpUriRequest(), requestContext.getHttpClientContext());\n            page = handleResponse(request, request.getCharset() != null ? request.getCharset() : task.getSite().getCharset(), httpResponse, task);\n            onSuccess(request);\n            logger.info(\"downloading page success {}\", request.getUrl());\n            return page;\n        } catch (IOException e) {\n            logger.warn(\"download page {} error\", request.getUrl(), e);\n            onError(request);\n            return page;\n        } finally {\n            if (httpResponse != null) {\n                //ensure the connection is released back to pool\n                EntityUtils.consumeQuietly(httpResponse.getEntity());\n            }\n            if (proxyProvider != null && proxy != null) {\n                proxyProvider.returnProxy(proxy, page, task);\n            }\n        }\n    }", "signature": "Page download(Request request, Task task)", "full_signature": "@Override public Page download(Request request, Task task)", "class_method_signature": "HttpClientDownloader.download(Request request, Task task)", "testcase": false, "constructor": false, "invocations": ["getSite", "getHttpClient", "getSite", "getProxy", "convert", "getSite", "fail", "execute", "getHttpUriRequest", "getHttpClientContext", "handleResponse", "getCharset", "getCharset", "getCharset", "getSite", "onSuccess", "info", "getUrl", "warn", "getUrl", "onError", "consumeQuietly", "getEntity", "returnProxy"]}, "repository": {"repo_id": 9623064, "url": "https://github.com/code4craft/webmagic", "language": "Java", "is_fork": false, "fork_count": 3804, "stargazer_count": 9136, "size": 17041, "license": "licensed"}}