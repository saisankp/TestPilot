{"test_class": {"identifier": "BufferTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static String lng = \"Really long string that is easy to split into parts!\";", "modifier": "static", "type": "String", "declarator": "lng = \"Really long string that is easy to split into parts!\"", "var_name": "lng"}], "file": "strings/src/test/java/com/dukescript/presenters/strings/BufferTest.java"}, "test_case": {"identifier": "splitAndRandomize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void splitAndRandomize() {\n        long seed = System.currentTimeMillis();\n        \n        Buffer b = new Buffer(lng, 3, seed);\n        \n        for (int i = 0; i < lng.length(); i++) {\n            for (int j = i; j < lng.length(); j++) {\n                CharSequence mangled = b.subSequence(i, j);\n                CharSequence real = lng.subSequence(i, j);\n                \n                assertEquals(mangled.toString(), real.toString(), \"At seed \" + seed + \" subSequence(\" + i + \", \" + j + \") are the same\");\n            }\n        }\n    }", "signature": "void splitAndRandomize()", "full_signature": "@Test public void splitAndRandomize()", "class_method_signature": "BufferTest.splitAndRandomize()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "length", "length", "subSequence", "subSequence", "assertEquals", "toString", "toString"]}, "focal_class": {"identifier": "Buffer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int segmentLen;", "modifier": "private final", "type": "int", "declarator": "segmentLen", "var_name": "segmentLen"}, {"original_string": "private final int[] begins;", "modifier": "private final", "type": "int[]", "declarator": "begins", "var_name": "begins"}, {"original_string": "final StringBuilder buf;", "modifier": "final", "type": "StringBuilder", "declarator": "buf", "var_name": "buf"}], "methods": [{"identifier": "Buffer", "parameters": "(CharSequence sb, int segmentLen, long seed)", "modifiers": "", "return": "", "signature": " Buffer(CharSequence sb, int segmentLen, long seed)", "full_signature": "  Buffer(CharSequence sb, int segmentLen, long seed)", "class_method_signature": "Buffer.Buffer(CharSequence sb, int segmentLen, long seed)", "testcase": false, "constructor": true}, {"identifier": "charAt", "parameters": "(int pos)", "modifiers": "", "return": "char", "signature": "char charAt(int pos)", "full_signature": " char charAt(int pos)", "class_method_signature": "Buffer.charAt(int pos)", "testcase": false, "constructor": false}, {"identifier": "segments", "parameters": "(int from, int end)", "modifiers": "", "return": "List<Integer>", "signature": "List<Integer> segments(int from, int end)", "full_signature": " List<Integer> segments(int from, int end)", "class_method_signature": "Buffer.segments(int from, int end)", "testcase": false, "constructor": false}, {"identifier": "subSequence", "parameters": "(int from, int end)", "modifiers": "", "return": "CharSequence", "signature": "CharSequence subSequence(int from, int end)", "full_signature": " CharSequence subSequence(int from, int end)", "class_method_signature": "Buffer.subSequence(int from, int end)", "testcase": false, "constructor": false}], "file": "strings/src/main/java/com/dukescript/presenters/strings/Buffer.java"}, "focal_method": {"identifier": "subSequence", "parameters": "(int from, int end)", "modifiers": "", "return": "CharSequence", "body": "CharSequence subSequence(int from, int end) {\n        StringBuilder sb = new StringBuilder();\n        Integer frm = null;\n        final List<Integer> sgmnts = segments(from, end);\n        for (Integer i1 : sgmnts) {\n            if (frm == null) {\n                frm = i1;\n                continue;\n            }\n            sb.append(buf.subSequence(frm, i1));\n            frm = null;\n        }\n        return sb;\n    }", "signature": "CharSequence subSequence(int from, int end)", "full_signature": " CharSequence subSequence(int from, int end)", "class_method_signature": "Buffer.subSequence(int from, int end)", "testcase": false, "constructor": false, "invocations": ["segments", "append", "subSequence"]}, "repository": {"repo_id": 77110232, "url": "https://github.com/dukescript/dukescript-presenters", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 715, "license": "licensed"}}