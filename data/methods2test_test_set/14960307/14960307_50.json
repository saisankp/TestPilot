{"test_class": {"identifier": "GsmUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(GsmUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(GsmUtilTest.class)", "var_name": "logger"}], "file": "ch-commons-gsm/src/test/java/com/cloudhopper/commons/gsm/GsmUtilTest.java"}, "test_case": {"identifier": "toBcdWithString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toBcdWithString() {\n        byte[] bytes0 = GsmUtil.toBcd(\"13135554272\");\n        Assert.assertArrayEquals(HexUtil.toByteArray(\"3131554572f2\"), bytes0);\n        byte[] bytes1 = GsmUtil.toBcd(\"10950\");\n        Assert.assertArrayEquals(HexUtil.toByteArray(\"0159f0\"), bytes1);\n    }", "signature": "void toBcdWithString()", "full_signature": "@Test public void toBcdWithString()", "class_method_signature": "GsmUtilTest.toBcdWithString()", "testcase": true, "constructor": false, "invocations": ["toBcd", "assertArrayEquals", "toByteArray", "toBcd", "assertArrayEquals", "toByteArray"]}, "focal_class": {"identifier": "GsmUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toBcd", "parameters": "(String address)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toBcd(String address)", "full_signature": "public static byte[] toBcd(String address)", "class_method_signature": "GsmUtil.toBcd(String address)", "testcase": false, "constructor": false}, {"identifier": "toSubmitInfo", "parameters": "(boolean replyPath, boolean udhIndicator,\n            boolean deliveryReceipt, int validityPeriodFormat, boolean rejectDuplicates)", "modifiers": "public static", "return": "byte", "signature": "byte toSubmitInfo(boolean replyPath, boolean udhIndicator,\n            boolean deliveryReceipt, int validityPeriodFormat, boolean rejectDuplicates)", "full_signature": "public static byte toSubmitInfo(boolean replyPath, boolean udhIndicator,\n            boolean deliveryReceipt, int validityPeriodFormat, boolean rejectDuplicates)", "class_method_signature": "GsmUtil.toSubmitInfo(boolean replyPath, boolean udhIndicator,\n            boolean deliveryReceipt, int validityPeriodFormat, boolean rejectDuplicates)", "testcase": false, "constructor": false}, {"identifier": "removeUserDataHeader", "parameters": "(byte[] shortMessage)", "modifiers": "static public", "return": "byte[]", "signature": "byte[] removeUserDataHeader(byte[] shortMessage)", "full_signature": "static public byte[] removeUserDataHeader(byte[] shortMessage)", "class_method_signature": "GsmUtil.removeUserDataHeader(byte[] shortMessage)", "testcase": false, "constructor": false}, {"identifier": "getShortMessageUserData", "parameters": "(byte[] shortMessage)", "modifiers": "static public", "return": "byte[]", "signature": "byte[] getShortMessageUserData(byte[] shortMessage)", "full_signature": "static public byte[] getShortMessageUserData(byte[] shortMessage)", "class_method_signature": "GsmUtil.getShortMessageUserData(byte[] shortMessage)", "testcase": false, "constructor": false}, {"identifier": "getShortMessageUserDataHeader", "parameters": "(byte[] shortMessage)", "modifiers": "static public", "return": "byte[]", "signature": "byte[] getShortMessageUserDataHeader(byte[] shortMessage)", "full_signature": "static public byte[] getShortMessageUserDataHeader(byte[] shortMessage)", "class_method_signature": "GsmUtil.getShortMessageUserDataHeader(byte[] shortMessage)", "testcase": false, "constructor": false}, {"identifier": "createConcatenatedBinaryShortMessages", "parameters": "(byte[] binaryShortMessage, byte referenceNum)", "modifiers": "static public", "return": "byte[][]", "signature": "byte[][] createConcatenatedBinaryShortMessages(byte[] binaryShortMessage, byte referenceNum)", "full_signature": "static public byte[][] createConcatenatedBinaryShortMessages(byte[] binaryShortMessage, byte referenceNum)", "class_method_signature": "GsmUtil.createConcatenatedBinaryShortMessages(byte[] binaryShortMessage, byte referenceNum)", "testcase": false, "constructor": false}], "file": "ch-commons-gsm/src/main/java/com/cloudhopper/commons/gsm/GsmUtil.java"}, "focal_method": {"identifier": "toBcd", "parameters": "(String address)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] toBcd(String address) throws NullPointerException, IllegalArgumentException {\n        if (address == null) {\n            throw new NullPointerException(\"Address cannot be null for BCD encoding\");\n        }\n\n        if (!StringUtil.containsOnlyDigits(address)) {\n            throw new IllegalArgumentException(\"Address must only contain digits\");\n        }\n\n        // make sure this address is always an even length\n        if (address.length() % 2 != 0) {\n            // add an extra F onto the end\n            address = address + \"F\";\n        }\n\n        // calculate length of final byte[]\n        int bytes_len = address.length() / 2;\n        byte[] bcd = new byte[bytes_len];\n\n        for (int i = 0; i < bytes_len; i++) {\n            StringBuilder chunk = new StringBuilder(address.substring(i * 2, (i * 2) + 2));\n            // reverse the digits since its BCD encoded\n            chunk.reverse();\n            // get the byte\n            byte[] bytes = HexUtil.toByteArray(chunk.toString());\n            //byte[] bytes = ByteUtil.decodeHex(chunk.toString(), 2);\n            // add this byte onto our total\n            bcd[i] = bytes[0];\n        }\n\n        return bcd;\n    }", "signature": "byte[] toBcd(String address)", "full_signature": "public static byte[] toBcd(String address)", "class_method_signature": "GsmUtil.toBcd(String address)", "testcase": false, "constructor": false, "invocations": ["containsOnlyDigits", "length", "length", "substring", "reverse", "toByteArray", "toString"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}