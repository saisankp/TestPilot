{"test_class": {"identifier": "InternalThreadLocalTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int THREADS = 10;", "modifier": "private static final", "type": "int", "declarator": "THREADS = 10", "var_name": "THREADS"}, {"original_string": "private static final int PERFORMANCE_THREAD_COUNT = 1000;", "modifier": "private static final", "type": "int", "declarator": "PERFORMANCE_THREAD_COUNT = 1000", "var_name": "PERFORMANCE_THREAD_COUNT"}, {"original_string": "private static final int GET_COUNT = 1000000;", "modifier": "private static final", "type": "int", "declarator": "GET_COUNT = 1000000", "var_name": "GET_COUNT"}], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/threadlocal/InternalThreadLocalTest.java"}, "test_case": {"identifier": "testInternalThreadLocal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInternalThreadLocal() throws InterruptedException {\n        final AtomicInteger index = new AtomicInteger(0);\n\n        final InternalThreadLocal<Integer> internalThreadLocal = new InternalThreadLocal<Integer>() {\n\n            @Override\n            protected Integer initialValue() throws Exception {\n                Integer v = index.getAndIncrement();\n                System.out.println(\"thread : \" + Thread.currentThread().getName() + \" init value : \" + v);\n                return v;\n            }\n        };\n\n        for (int i = 0; i < THREADS; i++) {\n            Thread t = new Thread(internalThreadLocal::get);\n            t.start();\n        }\n\n        Thread.sleep(2000);\n    }", "signature": "void testInternalThreadLocal()", "full_signature": "@Test public void testInternalThreadLocal()", "class_method_signature": "InternalThreadLocalTest.testInternalThreadLocal()", "testcase": true, "constructor": false, "invocations": ["getAndIncrement", "println", "getName", "currentThread", "start", "sleep"]}, "focal_class": {"identifier": "InternalThreadLocal", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int VARIABLES_TO_REMOVE_INDEX = InternalThreadLocalMap.nextVariableIndex();", "modifier": "private static final", "type": "int", "declarator": "VARIABLES_TO_REMOVE_INDEX = InternalThreadLocalMap.nextVariableIndex()", "var_name": "VARIABLES_TO_REMOVE_INDEX"}, {"original_string": "private final int index;", "modifier": "private final", "type": "int", "declarator": "index", "var_name": "index"}], "methods": [{"identifier": "InternalThreadLocal", "parameters": "()", "modifiers": "public", "return": "", "signature": " InternalThreadLocal()", "full_signature": "public  InternalThreadLocal()", "class_method_signature": "InternalThreadLocal.InternalThreadLocal()", "testcase": false, "constructor": true}, {"identifier": "removeAll", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "void", "signature": "void removeAll()", "full_signature": "@SuppressWarnings(\"unchecked\") public static void removeAll()", "class_method_signature": "InternalThreadLocal.removeAll()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int size()", "full_signature": "public static int size()", "class_method_signature": "InternalThreadLocal.size()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void destroy()", "full_signature": "public static void destroy()", "class_method_signature": "InternalThreadLocal.destroy()", "testcase": false, "constructor": false}, {"identifier": "addToVariablesToRemove", "parameters": "(InternalThreadLocalMap threadLocalMap, InternalThreadLocal<?> variable)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "void", "signature": "void addToVariablesToRemove(InternalThreadLocalMap threadLocalMap, InternalThreadLocal<?> variable)", "full_signature": "@SuppressWarnings(\"unchecked\") private static void addToVariablesToRemove(InternalThreadLocalMap threadLocalMap, InternalThreadLocal<?> variable)", "class_method_signature": "InternalThreadLocal.addToVariablesToRemove(InternalThreadLocalMap threadLocalMap, InternalThreadLocal<?> variable)", "testcase": false, "constructor": false}, {"identifier": "removeFromVariablesToRemove", "parameters": "(InternalThreadLocalMap threadLocalMap, InternalThreadLocal<?> variable)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "void", "signature": "void removeFromVariablesToRemove(InternalThreadLocalMap threadLocalMap, InternalThreadLocal<?> variable)", "full_signature": "@SuppressWarnings(\"unchecked\") private static void removeFromVariablesToRemove(InternalThreadLocalMap threadLocalMap, InternalThreadLocal<?> variable)", "class_method_signature": "InternalThreadLocal.removeFromVariablesToRemove(InternalThreadLocalMap threadLocalMap, InternalThreadLocal<?> variable)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public final", "return": "V", "signature": "V get()", "full_signature": "@SuppressWarnings(\"unchecked\") public final V get()", "class_method_signature": "InternalThreadLocal.get()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(InternalThreadLocalMap threadLocalMap)", "modifiers": "private", "return": "V", "signature": "V initialize(InternalThreadLocalMap threadLocalMap)", "full_signature": "private V initialize(InternalThreadLocalMap threadLocalMap)", "class_method_signature": "InternalThreadLocal.initialize(InternalThreadLocalMap threadLocalMap)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(V value)", "modifiers": "public final", "return": "void", "signature": "void set(V value)", "full_signature": "public final void set(V value)", "class_method_signature": "InternalThreadLocal.set(V value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public final", "return": "void", "signature": "void remove()", "full_signature": "@SuppressWarnings(\"unchecked\") public final void remove()", "class_method_signature": "InternalThreadLocal.remove()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(InternalThreadLocalMap threadLocalMap)", "modifiers": "@SuppressWarnings(\"unchecked\") public final", "return": "void", "signature": "void remove(InternalThreadLocalMap threadLocalMap)", "full_signature": "@SuppressWarnings(\"unchecked\") public final void remove(InternalThreadLocalMap threadLocalMap)", "class_method_signature": "InternalThreadLocal.remove(InternalThreadLocalMap threadLocalMap)", "testcase": false, "constructor": false}, {"identifier": "initialValue", "parameters": "()", "modifiers": "protected", "return": "V", "signature": "V initialValue()", "full_signature": "protected V initialValue()", "class_method_signature": "InternalThreadLocal.initialValue()", "testcase": false, "constructor": false}, {"identifier": "onRemoval", "parameters": "(@SuppressWarnings(\"unused\") V value)", "modifiers": "protected", "return": "void", "signature": "void onRemoval(@SuppressWarnings(\"unused\") V value)", "full_signature": "protected void onRemoval(@SuppressWarnings(\"unused\") V value)", "class_method_signature": "InternalThreadLocal.onRemoval(@SuppressWarnings(\"unused\") V value)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/threadlocal/InternalThreadLocal.java"}, "focal_method": {"identifier": "InternalThreadLocal", "parameters": "()", "modifiers": "public", "return": "", "body": "public InternalThreadLocal() {\n        index = InternalThreadLocalMap.nextVariableIndex();\n    }", "signature": " InternalThreadLocal()", "full_signature": "public  InternalThreadLocal()", "class_method_signature": "InternalThreadLocal.InternalThreadLocal()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}