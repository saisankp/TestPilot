{"test_class": {"identifier": "HystrixRollingPercentileTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int timeInMilliseconds = 60000;", "modifier": "private static final", "type": "int", "declarator": "timeInMilliseconds = 60000", "var_name": "timeInMilliseconds"}, {"original_string": "private static final int numberOfBuckets = 12;", "modifier": "private static final", "type": "int", "declarator": "numberOfBuckets = 12", "var_name": "numberOfBuckets"}, {"original_string": "private static final int bucketDataLength = 1000;", "modifier": "private static final", "type": "int", "declarator": "bucketDataLength = 1000", "var_name": "bucketDataLength"}, {"original_string": "private static final HystrixProperty<Boolean> enabled = HystrixProperty.Factory.asProperty(true);", "modifier": "private static final", "type": "HystrixProperty<Boolean>", "declarator": "enabled = HystrixProperty.Factory.asProperty(true)", "var_name": "enabled"}, {"original_string": "private static ExecutorService threadPool;", "modifier": "private static", "type": "ExecutorService", "declarator": "threadPool", "var_name": "threadPool"}], "file": "hystrix-core/src/test/java/com/netflix/hystrix/util/HystrixRollingPercentileTest.java"}, "test_case": {"identifier": "testPercentileAlgorithm_Percentiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPercentileAlgorithm_Percentiles() {\n        PercentileSnapshot p = getPercentileForValues(10, 30, 20, 40);\n        Assert.assertEquals(22, p.getPercentile(30), 1.0e-5);\n        Assert.assertEquals(20, p.getPercentile(25), 1.0e-5);\n        Assert.assertEquals(40, p.getPercentile(75), 1.0e-5);\n        Assert.assertEquals(30, p.getPercentile(50), 1.0e-5);\n\n        // invalid percentiles\n        Assert.assertEquals(10, p.getPercentile(-1));\n        Assert.assertEquals(40, p.getPercentile(101));\n    }", "signature": "void testPercentileAlgorithm_Percentiles()", "full_signature": "@Test public void testPercentileAlgorithm_Percentiles()", "class_method_signature": "HystrixRollingPercentileTest.testPercentileAlgorithm_Percentiles()", "testcase": true, "constructor": false, "invocations": ["getPercentileForValues", "assertEquals", "getPercentile", "assertEquals", "getPercentile", "assertEquals", "getPercentile", "assertEquals", "getPercentile", "assertEquals", "getPercentile", "assertEquals", "getPercentile"]}, "focal_class": {"identifier": "HystrixRollingPercentile", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(HystrixRollingPercentile.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HystrixRollingPercentile.class)", "var_name": "logger"}, {"original_string": "private static final Time ACTUAL_TIME = new ActualTime();", "modifier": "private static final", "type": "Time", "declarator": "ACTUAL_TIME = new ActualTime()", "var_name": "ACTUAL_TIME"}, {"original_string": "private final Time time;", "modifier": "private final", "type": "Time", "declarator": "time", "var_name": "time"}, {"original_string": "final BucketCircularArray buckets;", "modifier": "final", "type": "BucketCircularArray", "declarator": "buckets", "var_name": "buckets"}, {"original_string": "private final int timeInMilliseconds;", "modifier": "private final", "type": "int", "declarator": "timeInMilliseconds", "var_name": "timeInMilliseconds"}, {"original_string": "private final int numberOfBuckets;", "modifier": "private final", "type": "int", "declarator": "numberOfBuckets", "var_name": "numberOfBuckets"}, {"original_string": "private final int bucketDataLength;", "modifier": "private final", "type": "int", "declarator": "bucketDataLength", "var_name": "bucketDataLength"}, {"original_string": "private final int bucketSizeInMilliseconds;", "modifier": "private final", "type": "int", "declarator": "bucketSizeInMilliseconds", "var_name": "bucketSizeInMilliseconds"}, {"original_string": "private final HystrixProperty<Boolean> enabled;", "modifier": "private final", "type": "HystrixProperty<Boolean>", "declarator": "enabled", "var_name": "enabled"}, {"original_string": "volatile PercentileSnapshot currentPercentileSnapshot = new PercentileSnapshot(0);", "modifier": "volatile", "type": "PercentileSnapshot", "declarator": "currentPercentileSnapshot = new PercentileSnapshot(0)", "var_name": "currentPercentileSnapshot"}, {"original_string": "private ReentrantLock newBucketLock = new ReentrantLock();", "modifier": "private", "type": "ReentrantLock", "declarator": "newBucketLock = new ReentrantLock()", "var_name": "newBucketLock"}], "methods": [{"identifier": "HystrixRollingPercentile", "parameters": "(HystrixProperty<Integer> timeInMilliseconds, HystrixProperty<Integer> numberOfBuckets, HystrixProperty<Integer> bucketDataLength, HystrixProperty<Boolean> enabled)", "modifiers": "@Deprecated public", "return": "", "signature": " HystrixRollingPercentile(HystrixProperty<Integer> timeInMilliseconds, HystrixProperty<Integer> numberOfBuckets, HystrixProperty<Integer> bucketDataLength, HystrixProperty<Boolean> enabled)", "full_signature": "@Deprecated public  HystrixRollingPercentile(HystrixProperty<Integer> timeInMilliseconds, HystrixProperty<Integer> numberOfBuckets, HystrixProperty<Integer> bucketDataLength, HystrixProperty<Boolean> enabled)", "class_method_signature": "HystrixRollingPercentile.HystrixRollingPercentile(HystrixProperty<Integer> timeInMilliseconds, HystrixProperty<Integer> numberOfBuckets, HystrixProperty<Integer> bucketDataLength, HystrixProperty<Boolean> enabled)", "testcase": false, "constructor": true}, {"identifier": "HystrixRollingPercentile", "parameters": "(int timeInMilliseconds, int numberOfBuckets, int bucketDataLength, HystrixProperty<Boolean> enabled)", "modifiers": "public", "return": "", "signature": " HystrixRollingPercentile(int timeInMilliseconds, int numberOfBuckets, int bucketDataLength, HystrixProperty<Boolean> enabled)", "full_signature": "public  HystrixRollingPercentile(int timeInMilliseconds, int numberOfBuckets, int bucketDataLength, HystrixProperty<Boolean> enabled)", "class_method_signature": "HystrixRollingPercentile.HystrixRollingPercentile(int timeInMilliseconds, int numberOfBuckets, int bucketDataLength, HystrixProperty<Boolean> enabled)", "testcase": false, "constructor": true}, {"identifier": "HystrixRollingPercentile", "parameters": "(Time time, int timeInMilliseconds, int numberOfBuckets, int bucketDataLength, HystrixProperty<Boolean> enabled)", "modifiers": "", "return": "", "signature": " HystrixRollingPercentile(Time time, int timeInMilliseconds, int numberOfBuckets, int bucketDataLength, HystrixProperty<Boolean> enabled)", "full_signature": "  HystrixRollingPercentile(Time time, int timeInMilliseconds, int numberOfBuckets, int bucketDataLength, HystrixProperty<Boolean> enabled)", "class_method_signature": "HystrixRollingPercentile.HystrixRollingPercentile(Time time, int timeInMilliseconds, int numberOfBuckets, int bucketDataLength, HystrixProperty<Boolean> enabled)", "testcase": false, "constructor": true}, {"identifier": "addValue", "parameters": "(int... value)", "modifiers": "public", "return": "void", "signature": "void addValue(int... value)", "full_signature": "public void addValue(int... value)", "class_method_signature": "HystrixRollingPercentile.addValue(int... value)", "testcase": false, "constructor": false}, {"identifier": "getPercentile", "parameters": "(double percentile)", "modifiers": "public", "return": "int", "signature": "int getPercentile(double percentile)", "full_signature": "public int getPercentile(double percentile)", "class_method_signature": "HystrixRollingPercentile.getPercentile(double percentile)", "testcase": false, "constructor": false}, {"identifier": "getMean", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMean()", "full_signature": "public int getMean()", "class_method_signature": "HystrixRollingPercentile.getMean()", "testcase": false, "constructor": false}, {"identifier": "getCurrentPercentileSnapshot", "parameters": "()", "modifiers": "private", "return": "PercentileSnapshot", "signature": "PercentileSnapshot getCurrentPercentileSnapshot()", "full_signature": "private PercentileSnapshot getCurrentPercentileSnapshot()", "class_method_signature": "HystrixRollingPercentile.getCurrentPercentileSnapshot()", "testcase": false, "constructor": false}, {"identifier": "getCurrentBucket", "parameters": "()", "modifiers": "private", "return": "Bucket", "signature": "Bucket getCurrentBucket()", "full_signature": "private Bucket getCurrentBucket()", "class_method_signature": "HystrixRollingPercentile.getCurrentBucket()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "HystrixRollingPercentile.reset()", "testcase": false, "constructor": false}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/util/HystrixRollingPercentile.java"}, "focal_method": {"identifier": "getPercentile", "parameters": "(double percentile)", "modifiers": "public", "return": "int", "body": "public int getPercentile(double percentile) {\n        /* no-op if disabled */\n        if (!enabled.get())\n            return -1;\n\n        // force logic to move buckets forward in case other requests aren't making it happen\n        getCurrentBucket();\n        // fetch the current snapshot\n        return getCurrentPercentileSnapshot().getPercentile(percentile);\n    }", "signature": "int getPercentile(double percentile)", "full_signature": "public int getPercentile(double percentile)", "class_method_signature": "HystrixRollingPercentile.getPercentile(double percentile)", "testcase": false, "constructor": false, "invocations": ["get", "getCurrentBucket", "getPercentile", "getCurrentPercentileSnapshot"]}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}