{"test_class": {"identifier": "BasicPathTest", "superclass": "extends XPathTester", "interfaces": "", "fields": [], "file": "jdollarx/src/test/java/com/github/loyada/jdollarx/BasicPathTest.java"}, "test_case": {"identifier": "andTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void andTest() {\n        Path el = div.that(hasClass(\"a\")).and(hasText(\"xyz\"));\n        NodeList nodes = findAllByXpath(\"<div>ab</div><div>xabc</div><div class='container'><div class='a dfdsf'>xyz<div class='a.a'></div></div><span class='b'/></div><div>c</div><div></div><span class='abc'></span>\", el);\n        assertThat(nodes.getLength(), is(1));\n        assertThat(getText(nodes.item(0)), equalTo(\"xyz\"));\n        assertThat(getCssClass(nodes.item(0)), equalTo(\"a dfdsf\"));\n        assertThat(el.toString(), is(equalTo(\"div, that has class a, and has the text \\\"xyz\\\"\")));\n    }", "signature": "void andTest()", "full_signature": "@Test public void andTest()", "class_method_signature": "BasicPathTest.andTest()", "testcase": true, "constructor": false, "invocations": ["and", "that", "hasClass", "hasText", "findAllByXpath", "assertThat", "getLength", "is", "assertThat", "getText", "item", "equalTo", "assertThat", "getCssClass", "item", "equalTo", "assertThat", "toString", "is", "equalTo"]}, "focal_class": {"identifier": "BasicPath", "superclass": "", "interfaces": "implements Path", "fields": [{"original_string": "private Optional<String> insideXpath = Optional.empty();", "modifier": "private", "type": "Optional<String>", "declarator": "insideXpath = Optional.empty()", "var_name": "insideXpath"}, {"original_string": "private final Optional<String> xpath;", "modifier": "private final", "type": "Optional<String>", "declarator": "xpath", "var_name": "xpath"}, {"original_string": "private final Optional<String> alternateXpath;", "modifier": "private final", "type": "Optional<String>", "declarator": "alternateXpath", "var_name": "alternateXpath"}, {"original_string": "private final Optional<String> xpathExplanation;", "modifier": "private final", "type": "Optional<String>", "declarator": "xpathExplanation", "var_name": "xpathExplanation"}, {"original_string": "private final Optional<String> describedBy;", "modifier": "private final", "type": "Optional<String>", "declarator": "describedBy", "var_name": "describedBy"}, {"original_string": "private final Optional<WebElement> underlying;", "modifier": "private final", "type": "Optional<WebElement>", "declarator": "underlying", "var_name": "underlying"}, {"original_string": "private final ImmutableList<ElementProperty> elementProperties;", "modifier": "private final", "type": "ImmutableList<ElementProperty>", "declarator": "elementProperties", "var_name": "elementProperties"}, {"original_string": "public static final BasicPath element = builder().withXpath(\"*\").withXpathExplanation(\"any element\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "element = builder().withXpath(\"*\").withXpathExplanation(\"any element\").build()", "var_name": "element"}, {"original_string": "public static final BasicPath div = builder().withXpath(\"div\").withXpathExplanation(\"div\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "div = builder().withXpath(\"div\").withXpathExplanation(\"div\").build()", "var_name": "div"}, {"original_string": "public static final BasicPath span = builder().withXpath(\"span\").withXpathExplanation(\"span\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "span = builder().withXpath(\"span\").withXpathExplanation(\"span\").build()", "var_name": "span"}, {"original_string": "public static final BasicPath image = builder().withXpath(\"img\").withXpathExplanation(\"image\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "image = builder().withXpath(\"img\").withXpathExplanation(\"image\").build()", "var_name": "image"}, {"original_string": "public static final BasicPath listItem = builder().withXpath(\"li\").withXpathExplanation(\"list item\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "listItem = builder().withXpath(\"li\").withXpathExplanation(\"list item\").build()", "var_name": "listItem"}, {"original_string": "public static final BasicPath button = builder().withXpath(\"button\").withXpathExplanation(\"button\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "button = builder().withXpath(\"button\").withXpathExplanation(\"button\").build()", "var_name": "button"}, {"original_string": "public static final BasicPath unorderedList = builder().withXpath(\"ul\").withXpathExplanation(\"unordered list\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "unorderedList = builder().withXpath(\"ul\").withXpathExplanation(\"unordered list\").build()", "var_name": "unorderedList"}, {"original_string": "public static final BasicPath input = builder().withXpath(\"input\").withXpathExplanation(\"input\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "input = builder().withXpath(\"input\").withXpathExplanation(\"input\").build()", "var_name": "input"}, {"original_string": "public static final BasicPath anchor = builder().withXpath(\"a\").withXpathExplanation(\"anchor\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "anchor = builder().withXpath(\"a\").withXpathExplanation(\"anchor\").build()", "var_name": "anchor"}, {"original_string": "public static final BasicPath form = builder().withXpath(\"form\").withXpathExplanation(\"form\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "form = builder().withXpath(\"form\").withXpathExplanation(\"form\").build()", "var_name": "form"}, {"original_string": "public static final BasicPath iframe = builder().withXpath(\"iframe\").withXpathExplanation(\"iframe\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "iframe = builder().withXpath(\"iframe\").withXpathExplanation(\"iframe\").build()", "var_name": "iframe"}, {"original_string": "public static final BasicPath html = builder().withXpath(\"html\").withXpathExplanation(\"document\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "html = builder().withXpath(\"html\").withXpathExplanation(\"document\").build()", "var_name": "html"}, {"original_string": "public static final BasicPath body = builder().withXpath(\"body\").withXpathExplanation(\"document body\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "body = builder().withXpath(\"body\").withXpathExplanation(\"document body\").build()", "var_name": "body"}, {"original_string": "public static final BasicPath header1 = builder().withXpath(\"h1\").withXpathExplanation(\"header-1\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "header1 = builder().withXpath(\"h1\").withXpathExplanation(\"header-1\").build()", "var_name": "header1"}, {"original_string": "public static final BasicPath header2 = builder().withXpath(\"h2\").withXpathExplanation(\"header-2\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "header2 = builder().withXpath(\"h2\").withXpathExplanation(\"header-2\").build()", "var_name": "header2"}, {"original_string": "public static final BasicPath header3 = builder().withXpath(\"h3\").withXpathExplanation(\"header-3\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "header3 = builder().withXpath(\"h3\").withXpathExplanation(\"header-3\").build()", "var_name": "header3"}, {"original_string": "public static final BasicPath header4 = builder().withXpath(\"h4\").withXpathExplanation(\"header-4\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "header4 = builder().withXpath(\"h4\").withXpathExplanation(\"header-4\").build()", "var_name": "header4"}, {"original_string": "public static final BasicPath header5 = builder().withXpath(\"h5\").withXpathExplanation(\"header-5\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "header5 = builder().withXpath(\"h5\").withXpathExplanation(\"header-5\").build()", "var_name": "header5"}, {"original_string": "public static final BasicPath header6 = builder().withXpath(\"h6\").withXpathExplanation(\"header-6\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "header6 = builder().withXpath(\"h6\").withXpathExplanation(\"header-6\").build()", "var_name": "header6"}, {"original_string": "public static final BasicPath header = (BasicPath) header1.or(header2).or(header3).or(header4).or(header5).or(header6);", "modifier": "public static final", "type": "BasicPath", "declarator": "header = (BasicPath) header1.or(header2).or(header3).or(header4).or(header5).or(header6)", "var_name": "header"}, {"original_string": "public static final BasicPath title = builder().withXpath(\"title\").withXpathExplanation(\"title\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "title = builder().withXpath(\"title\").withXpathExplanation(\"title\").build()", "var_name": "title"}, {"original_string": "public static final BasicPath tr = builder().withXpath(\"tr\").withXpathExplanation(\"table row\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "tr = builder().withXpath(\"tr\").withXpathExplanation(\"table row\").build()", "var_name": "tr"}, {"original_string": "public static final BasicPath td = builder().withXpath(\"td\").withXpathExplanation(\"table cell\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "td = builder().withXpath(\"td\").withXpathExplanation(\"table cell\").build()", "var_name": "td"}, {"original_string": "public static final BasicPath th = builder().withXpath(\"th\").withXpathExplanation(\"table header cell\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "th = builder().withXpath(\"th\").withXpathExplanation(\"table header cell\").build()", "var_name": "th"}, {"original_string": "public static final BasicPath table = customElement(\"table\");", "modifier": "public static final", "type": "BasicPath", "declarator": "table = customElement(\"table\")", "var_name": "table"}, {"original_string": "public static final BasicPath select = builder().withXpath(\"select\").withXpathExplanation(\"selection menu\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "select = builder().withXpath(\"select\").withXpathExplanation(\"selection menu\").build()", "var_name": "select"}, {"original_string": "public static final BasicPath option = customElement(\"option\");", "modifier": "public static final", "type": "BasicPath", "declarator": "option = customElement(\"option\")", "var_name": "option"}, {"original_string": "public static final BasicPath label = customElement(\"label\");", "modifier": "public static final", "type": "BasicPath", "declarator": "label = customElement(\"label\")", "var_name": "label"}, {"original_string": "public static final BasicPath section = customElement(\"section\");", "modifier": "public static final", "type": "BasicPath", "declarator": "section = customElement(\"section\")", "var_name": "section"}, {"original_string": "public static final BasicPath canvas = customElement(\"canvas\");", "modifier": "public static final", "type": "BasicPath", "declarator": "canvas = customElement(\"canvas\")", "var_name": "canvas"}, {"original_string": "public static final BasicPath textarea = builder().withXpath(\"textarea\").withXpathExplanation(\"text area\").build();", "modifier": "public static final", "type": "BasicPath", "declarator": "textarea = builder().withXpath(\"textarea\").withXpathExplanation(\"text area\").build()", "var_name": "textarea"}, {"original_string": "public static final BasicPath svg = customNameSpaceElement(\"svg\");", "modifier": "public static final", "type": "BasicPath", "declarator": "svg = customNameSpaceElement(\"svg\")", "var_name": "svg"}], "methods": [{"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "PathBuilder", "signature": "PathBuilder builder()", "full_signature": "public static PathBuilder builder()", "class_method_signature": "BasicPath.builder()", "testcase": false, "constructor": false}, {"identifier": "BasicPath", "parameters": "(Optional<WebElement> underlying,\n                      Optional<String> xpath,\n                      List<ElementProperty> elementProperties,\n                      Optional<String> xpathExplanation,\n                      Optional<String> describedBy,\n                      Optional<String> insideXpath,\n                      Optional<String> alternateXpath\n    )", "modifiers": "private", "return": "", "signature": " BasicPath(Optional<WebElement> underlying,\n                      Optional<String> xpath,\n                      List<ElementProperty> elementProperties,\n                      Optional<String> xpathExplanation,\n                      Optional<String> describedBy,\n                      Optional<String> insideXpath,\n                      Optional<String> alternateXpath\n    )", "full_signature": "private  BasicPath(Optional<WebElement> underlying,\n                      Optional<String> xpath,\n                      List<ElementProperty> elementProperties,\n                      Optional<String> xpathExplanation,\n                      Optional<String> describedBy,\n                      Optional<String> insideXpath,\n                      Optional<String> alternateXpath\n    )", "class_method_signature": "BasicPath.BasicPath(Optional<WebElement> underlying,\n                      Optional<String> xpath,\n                      List<ElementProperty> elementProperties,\n                      Optional<String> xpathExplanation,\n                      Optional<String> describedBy,\n                      Optional<String> insideXpath,\n                      Optional<String> alternateXpath\n    )", "testcase": false, "constructor": true}, {"identifier": "textNode", "parameters": "(String text)", "modifiers": "public static", "return": "Path", "signature": "Path textNode(String text)", "full_signature": "public static Path textNode(String text)", "class_method_signature": "BasicPath.textNode(String text)", "testcase": false, "constructor": false}, {"identifier": "customElement", "parameters": "(String el)", "modifiers": "public static", "return": "BasicPath", "signature": "BasicPath customElement(String el)", "full_signature": "public static BasicPath customElement(String el)", "class_method_signature": "BasicPath.customElement(String el)", "testcase": false, "constructor": false}, {"identifier": "customNameSpaceElement", "parameters": "(String el)", "modifiers": "public static", "return": "BasicPath", "signature": "BasicPath customNameSpaceElement(String el)", "full_signature": "public static BasicPath customNameSpaceElement(String el)", "class_method_signature": "BasicPath.customNameSpaceElement(String el)", "testcase": false, "constructor": false}, {"identifier": "childNumber", "parameters": "(Integer n)", "modifiers": "public static", "return": "ChildNumber", "signature": "ChildNumber childNumber(Integer n)", "full_signature": "public static ChildNumber childNumber(Integer n)", "class_method_signature": "BasicPath.childNumber(Integer n)", "testcase": false, "constructor": false}, {"identifier": "occurrenceNumber", "parameters": "(Integer n)", "modifiers": "public static", "return": "GlobalOccurrenceNumber", "signature": "GlobalOccurrenceNumber occurrenceNumber(Integer n)", "full_signature": "public static GlobalOccurrenceNumber occurrenceNumber(Integer n)", "class_method_signature": "BasicPath.occurrenceNumber(Integer n)", "testcase": false, "constructor": false}, {"identifier": "firstOccurrenceOf", "parameters": "(Path path)", "modifiers": "public static", "return": "Path", "signature": "Path firstOccurrenceOf(Path path)", "full_signature": "public static Path firstOccurrenceOf(Path path)", "class_method_signature": "BasicPath.firstOccurrenceOf(Path path)", "testcase": false, "constructor": false}, {"identifier": "lastOccurrenceOf", "parameters": "(Path path)", "modifiers": "public static", "return": "Path", "signature": "Path lastOccurrenceOf(Path path)", "full_signature": "public static Path lastOccurrenceOf(Path path)", "class_method_signature": "BasicPath.lastOccurrenceOf(Path path)", "testcase": false, "constructor": false}, {"identifier": "getXPath", "parameters": "()", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> getXPath()", "full_signature": "@Override public Optional<String> getXPath()", "class_method_signature": "BasicPath.getXPath()", "testcase": false, "constructor": false}, {"identifier": "getAlternateXPath", "parameters": "()", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> getAlternateXPath()", "full_signature": "@Override public Optional<String> getAlternateXPath()", "class_method_signature": "BasicPath.getAlternateXPath()", "testcase": false, "constructor": false}, {"identifier": "getXPathWithoutInsideClause", "parameters": "()", "modifiers": "private", "return": "Optional<String>", "signature": "Optional<String> getXPathWithoutInsideClause()", "full_signature": "private Optional<String> getXPathWithoutInsideClause()", "class_method_signature": "BasicPath.getXPathWithoutInsideClause()", "testcase": false, "constructor": false}, {"identifier": "getUnderlyingSource", "parameters": "()", "modifiers": "@Override public", "return": "Optional<WebElement>", "signature": "Optional<WebElement> getUnderlyingSource()", "full_signature": "@Override public Optional<WebElement> getUnderlyingSource()", "class_method_signature": "BasicPath.getUnderlyingSource()", "testcase": false, "constructor": false}, {"identifier": "getXpathExplanation", "parameters": "()", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> getXpathExplanation()", "full_signature": "@Override public Optional<String> getXpathExplanation()", "class_method_signature": "BasicPath.getXpathExplanation()", "testcase": false, "constructor": false}, {"identifier": "getDescribedBy", "parameters": "()", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> getDescribedBy()", "full_signature": "@Override public Optional<String> getDescribedBy()", "class_method_signature": "BasicPath.getDescribedBy()", "testcase": false, "constructor": false}, {"identifier": "getElementProperties", "parameters": "()", "modifiers": "@Override public", "return": "List<ElementProperty>", "signature": "List<ElementProperty> getElementProperties()", "full_signature": "@Override public List<ElementProperty> getElementProperties()", "class_method_signature": "BasicPath.getElementProperties()", "testcase": false, "constructor": false}, {"identifier": "describedBy", "parameters": "(String description)", "modifiers": "@Override public", "return": "Path", "signature": "Path describedBy(String description)", "full_signature": "@Override public Path describedBy(String description)", "class_method_signature": "BasicPath.describedBy(String description)", "testcase": false, "constructor": false}, {"identifier": "verifyRelationBetweenElements", "parameters": "(Path path)", "modifiers": "private", "return": "void", "signature": "void verifyRelationBetweenElements(Path path)", "full_signature": "private void verifyRelationBetweenElements(Path path)", "class_method_signature": "BasicPath.verifyRelationBetweenElements(Path path)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(Path path)", "modifiers": "@Override public", "return": "Path", "signature": "Path or(Path path)", "full_signature": "@Override public Path or(Path path)", "class_method_signature": "BasicPath.or(Path path)", "testcase": false, "constructor": false}, {"identifier": "that", "parameters": "(ElementProperty... prop)", "modifiers": "@Override public", "return": "Path", "signature": "Path that(ElementProperty... prop)", "full_signature": "@Override public Path that(ElementProperty... prop)", "class_method_signature": "BasicPath.that(ElementProperty... prop)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(ElementProperty... prop)", "modifiers": "@Override public", "return": "Path", "signature": "Path and(ElementProperty... prop)", "full_signature": "@Override public Path and(ElementProperty... prop)", "class_method_signature": "BasicPath.and(ElementProperty... prop)", "testcase": false, "constructor": false}, {"identifier": "withText", "parameters": "(String txt)", "modifiers": "@Override public", "return": "Path", "signature": "Path withText(String txt)", "full_signature": "@Override public Path withText(String txt)", "class_method_signature": "BasicPath.withText(String txt)", "testcase": false, "constructor": false}, {"identifier": "inside", "parameters": "(final Path path)", "modifiers": "@Override public", "return": "Path", "signature": "Path inside(final Path path)", "full_signature": "@Override public Path inside(final Path path)", "class_method_signature": "BasicPath.inside(final Path path)", "testcase": false, "constructor": false}, {"identifier": "insideTopLevel", "parameters": "()", "modifiers": "@Override public", "return": "Path", "signature": "Path insideTopLevel()", "full_signature": "@Override public Path insideTopLevel()", "class_method_signature": "BasicPath.insideTopLevel()", "testcase": false, "constructor": false}, {"identifier": "afterSibling", "parameters": "(Path path)", "modifiers": "@Override public", "return": "Path", "signature": "Path afterSibling(Path path)", "full_signature": "@Override public Path afterSibling(Path path)", "class_method_signature": "BasicPath.afterSibling(Path path)", "testcase": false, "constructor": false}, {"identifier": "immediatelyAfterSibling", "parameters": "(Path path)", "modifiers": "@Override public", "return": "Path", "signature": "Path immediatelyAfterSibling(Path path)", "full_signature": "@Override public Path immediatelyAfterSibling(Path path)", "class_method_signature": "BasicPath.immediatelyAfterSibling(Path path)", "testcase": false, "constructor": false}, {"identifier": "after", "parameters": "(Path path)", "modifiers": "@Override public", "return": "Path", "signature": "Path after(Path path)", "full_signature": "@Override public Path after(Path path)", "class_method_signature": "BasicPath.after(Path path)", "testcase": false, "constructor": false}, {"identifier": "beforeSibling", "parameters": "(Path path)", "modifiers": "@Override public", "return": "Path", "signature": "Path beforeSibling(Path path)", "full_signature": "@Override public Path beforeSibling(Path path)", "class_method_signature": "BasicPath.beforeSibling(Path path)", "testcase": false, "constructor": false}, {"identifier": "immediatelyBeforeSibling", "parameters": "(Path path)", "modifiers": "@Override public", "return": "Path", "signature": "Path immediatelyBeforeSibling(Path path)", "full_signature": "@Override public Path immediatelyBeforeSibling(Path path)", "class_method_signature": "BasicPath.immediatelyBeforeSibling(Path path)", "testcase": false, "constructor": false}, {"identifier": "before", "parameters": "(Path path)", "modifiers": "@Override public", "return": "Path", "signature": "Path before(Path path)", "full_signature": "@Override public Path before(Path path)", "class_method_signature": "BasicPath.before(Path path)", "testcase": false, "constructor": false}, {"identifier": "childOf", "parameters": "(Path path)", "modifiers": "@Override public", "return": "Path", "signature": "Path childOf(Path path)", "full_signature": "@Override public Path childOf(Path path)", "class_method_signature": "BasicPath.childOf(Path path)", "testcase": false, "constructor": false}, {"identifier": "parentOf", "parameters": "(Path path)", "modifiers": "@Override public", "return": "Path", "signature": "Path parentOf(Path path)", "full_signature": "@Override public Path parentOf(Path path)", "class_method_signature": "BasicPath.parentOf(Path path)", "testcase": false, "constructor": false}, {"identifier": "containing", "parameters": "(Path path)", "modifiers": "@Override public", "return": "Path", "signature": "Path containing(Path path)", "full_signature": "@Override public Path containing(Path path)", "class_method_signature": "BasicPath.containing(Path path)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Path path)", "modifiers": "@Override public", "return": "Path", "signature": "Path contains(Path path)", "full_signature": "@Override public Path contains(Path path)", "class_method_signature": "BasicPath.contains(Path path)", "testcase": false, "constructor": false}, {"identifier": "ancestorOf", "parameters": "(Path path)", "modifiers": "@Override public", "return": "Path", "signature": "Path ancestorOf(Path path)", "full_signature": "@Override public Path ancestorOf(Path path)", "class_method_signature": "BasicPath.ancestorOf(Path path)", "testcase": false, "constructor": false}, {"identifier": "descendantOf", "parameters": "(Path path)", "modifiers": "@Override public", "return": "Path", "signature": "Path descendantOf(Path path)", "full_signature": "@Override public Path descendantOf(Path path)", "class_method_signature": "BasicPath.descendantOf(Path path)", "testcase": false, "constructor": false}, {"identifier": "withGlobalIndex", "parameters": "(Integer n)", "modifiers": "@Override public", "return": "Path", "signature": "Path withGlobalIndex(Integer n)", "full_signature": "@Override public Path withGlobalIndex(Integer n)", "class_method_signature": "BasicPath.withGlobalIndex(Integer n)", "testcase": false, "constructor": false}, {"identifier": "withClass", "parameters": "(String cssClass)", "modifiers": "@Override public", "return": "Path", "signature": "Path withClass(String cssClass)", "full_signature": "@Override public Path withClass(String cssClass)", "class_method_signature": "BasicPath.withClass(String cssClass)", "testcase": false, "constructor": false}, {"identifier": "withClasses", "parameters": "(String... cssClasses)", "modifiers": "@Override public", "return": "Path", "signature": "Path withClasses(String... cssClasses)", "full_signature": "@Override public Path withClasses(String... cssClasses)", "class_method_signature": "BasicPath.withClasses(String... cssClasses)", "testcase": false, "constructor": false}, {"identifier": "withTextContaining", "parameters": "(String txt)", "modifiers": "@Override public", "return": "Path", "signature": "Path withTextContaining(String txt)", "full_signature": "@Override public Path withTextContaining(String txt)", "class_method_signature": "BasicPath.withTextContaining(String txt)", "testcase": false, "constructor": false}, {"identifier": "getXpathExplanationForToString", "parameters": "()", "modifiers": "private", "return": "Optional<String>", "signature": "Optional<String> getXpathExplanationForToString()", "full_signature": "private Optional<String> getXpathExplanationForToString()", "class_method_signature": "BasicPath.getXpathExplanationForToString()", "testcase": false, "constructor": false}, {"identifier": "getPropertiesToStringForLength1", "parameters": "()", "modifiers": "private", "return": "Optional<String>", "signature": "Optional<String> getPropertiesToStringForLength1()", "full_signature": "private Optional<String> getPropertiesToStringForLength1()", "class_method_signature": "BasicPath.getPropertiesToStringForLength1()", "testcase": false, "constructor": false}, {"identifier": "getPropertiesToStringForLengthLargerThan2", "parameters": "()", "modifiers": "private", "return": "Optional<String>", "signature": "Optional<String> getPropertiesToStringForLengthLargerThan2()", "full_signature": "private Optional<String> getPropertiesToStringForLengthLargerThan2()", "class_method_signature": "BasicPath.getPropertiesToStringForLengthLargerThan2()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BasicPath.toString()", "testcase": false, "constructor": false}, {"identifier": "createWithSimpleRelation", "parameters": "(Path path, String relation)", "modifiers": "private", "return": "BasicPath", "signature": "BasicPath createWithSimpleRelation(Path path, String relation)", "full_signature": "private BasicPath createWithSimpleRelation(Path path, String relation)", "class_method_signature": "BasicPath.createWithSimpleRelation(Path path, String relation)", "testcase": false, "constructor": false}, {"identifier": "wrapIfNeeded", "parameters": "(Path path)", "modifiers": "private", "return": "String", "signature": "String wrapIfNeeded(Path path)", "full_signature": "private String wrapIfNeeded(Path path)", "class_method_signature": "BasicPath.wrapIfNeeded(Path path)", "testcase": false, "constructor": false}, {"identifier": "createWithHumanReadableRelation", "parameters": "(Path path, String xpathRelation, String humanReadableRelation)", "modifiers": "private", "return": "BasicPath", "signature": "BasicPath createWithHumanReadableRelation(Path path, String xpathRelation, String humanReadableRelation)", "full_signature": "private BasicPath createWithHumanReadableRelation(Path path, String xpathRelation, String humanReadableRelation)", "class_method_signature": "BasicPath.createWithHumanReadableRelation(Path path, String xpathRelation, String humanReadableRelation)", "testcase": false, "constructor": false}, {"identifier": "createNewWithAdditionalProperty", "parameters": "(ElementProperty prop)", "modifiers": "private", "return": "BasicPath", "signature": "BasicPath createNewWithAdditionalProperty(ElementProperty prop)", "full_signature": "private BasicPath createNewWithAdditionalProperty(ElementProperty prop)", "class_method_signature": "BasicPath.createNewWithAdditionalProperty(ElementProperty prop)", "testcase": false, "constructor": false}], "file": "jdollarx/src/main/java/com/github/loyada/jdollarx/BasicPath.java"}, "focal_method": {"identifier": "and", "parameters": "(ElementProperty... prop)", "modifiers": "@Override public", "return": "Path", "body": "@Override\n    public Path and(ElementProperty... prop) {\n        return that(prop);\n    }", "signature": "Path and(ElementProperty... prop)", "full_signature": "@Override public Path and(ElementProperty... prop)", "class_method_signature": "BasicPath.and(ElementProperty... prop)", "testcase": false, "constructor": false, "invocations": ["that"]}, "repository": {"repo_id": 37208641, "url": "https://github.com/loyada/dollarx", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 10, "size": 19585, "license": "licensed"}}