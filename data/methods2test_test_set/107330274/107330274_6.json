{"test_class": {"identifier": "PaginationEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Page FIRST_PAGE = Page.newBuilder().withPageSize(10).build();", "modifier": "private static final", "type": "Page", "declarator": "FIRST_PAGE = Page.newBuilder().withPageSize(10).build()", "var_name": "FIRST_PAGE"}], "file": "titus-common-api/src/test/java/com/netflix/titus/api/model/PaginationEvaluatorTest.java"}, "test_case": {"identifier": "testPaginationWithPageSizeZero", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPaginationWithPageSizeZero() {\n        PageResult<PaginableItem> pageResult = PAGINATION_EVALUATOR.takePage(Page.empty(), PaginableItems.items(2));\n        assertThat(pageResult.getPagination().getTotalItems()).isEqualTo(2);\n        assertThat(pageResult.getItems()).isEmpty();\n    }", "signature": "void testPaginationWithPageSizeZero()", "full_signature": "@Test public void testPaginationWithPageSizeZero()", "class_method_signature": "PaginationEvaluatorTest.testPaginationWithPageSizeZero()", "testcase": true, "constructor": false, "invocations": ["takePage", "empty", "items", "isEqualTo", "assertThat", "getTotalItems", "getPagination", "isEmpty", "assertThat", "getItems"]}, "focal_class": {"identifier": "PaginationEvaluator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern CURSOR_RE = Pattern.compile(\"(.*)@(\\\\d+)\");", "modifier": "private static final", "type": "Pattern", "declarator": "CURSOR_RE = Pattern.compile(\"(.*)@(\\\\d+)\")", "var_name": "CURSOR_RE"}, {"original_string": "private final Function<T, String> idExtractor;", "modifier": "private final", "type": "Function<T, String>", "declarator": "idExtractor", "var_name": "idExtractor"}, {"original_string": "private final Function<T, Long> timestampExtractor;", "modifier": "private final", "type": "Function<T, Long>", "declarator": "timestampExtractor", "var_name": "timestampExtractor"}, {"original_string": "private final Comparator<T> dataComparator;", "modifier": "private final", "type": "Comparator<T>", "declarator": "dataComparator", "var_name": "dataComparator"}], "methods": [{"identifier": "PaginationEvaluator", "parameters": "(Function<T, String> idExtractor, Function<T, Long> timestampExtractor)", "modifiers": "public", "return": "", "signature": " PaginationEvaluator(Function<T, String> idExtractor, Function<T, Long> timestampExtractor)", "full_signature": "public  PaginationEvaluator(Function<T, String> idExtractor, Function<T, Long> timestampExtractor)", "class_method_signature": "PaginationEvaluator.PaginationEvaluator(Function<T, String> idExtractor, Function<T, Long> timestampExtractor)", "testcase": false, "constructor": true}, {"identifier": "takePage", "parameters": "(Page page, List<T> items)", "modifiers": "public", "return": "PageResult<T>", "signature": "PageResult<T> takePage(Page page, List<T> items)", "full_signature": "public PageResult<T> takePage(Page page, List<T> items)", "class_method_signature": "PaginationEvaluator.takePage(Page page, List<T> items)", "testcase": false, "constructor": false}, {"identifier": "takeEmptyPage", "parameters": "(Page page, List<T> items)", "modifiers": "private", "return": "PageResult<T>", "signature": "PageResult<T> takeEmptyPage(Page page, List<T> items)", "full_signature": "private PageResult<T> takeEmptyPage(Page page, List<T> items)", "class_method_signature": "PaginationEvaluator.takeEmptyPage(Page page, List<T> items)", "testcase": false, "constructor": false}, {"identifier": "takePageWithoutCursor", "parameters": "(Page page, List<T> items)", "modifiers": "private", "return": "PageResult<T>", "signature": "PageResult<T> takePageWithoutCursor(Page page, List<T> items)", "full_signature": "private PageResult<T> takePageWithoutCursor(Page page, List<T> items)", "class_method_signature": "PaginationEvaluator.takePageWithoutCursor(Page page, List<T> items)", "testcase": false, "constructor": false}, {"identifier": "takePageWithCursor", "parameters": "(Page page, List<T> itemsCopy, String cursorId, long cursorTimestamp)", "modifiers": "private", "return": "PageResult<T>", "signature": "PageResult<T> takePageWithCursor(Page page, List<T> itemsCopy, String cursorId, long cursorTimestamp)", "full_signature": "private PageResult<T> takePageWithCursor(Page page, List<T> itemsCopy, String cursorId, long cursorTimestamp)", "class_method_signature": "PaginationEvaluator.takePageWithCursor(Page page, List<T> itemsCopy, String cursorId, long cursorTimestamp)", "testcase": false, "constructor": false}, {"identifier": "getOffset", "parameters": "(List<T> itemsCopy, String cursorId, long cursorTimestamp)", "modifiers": "private", "return": "int", "signature": "int getOffset(List<T> itemsCopy, String cursorId, long cursorTimestamp)", "full_signature": "private int getOffset(List<T> itemsCopy, String cursorId, long cursorTimestamp)", "class_method_signature": "PaginationEvaluator.getOffset(List<T> itemsCopy, String cursorId, long cursorTimestamp)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(T value)", "modifiers": "@VisibleForTesting", "return": "String", "signature": "String encode(T value)", "full_signature": "@VisibleForTesting String encode(T value)", "class_method_signature": "PaginationEvaluator.encode(T value)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String encoded)", "modifiers": "private static", "return": "Pair<String, Long>", "signature": "Pair<String, Long> decode(String encoded)", "full_signature": "private static Pair<String, Long> decode(String encoded)", "class_method_signature": "PaginationEvaluator.decode(String encoded)", "testcase": false, "constructor": false}, {"identifier": "numberOfPages", "parameters": "(Page page, int totalItems)", "modifiers": "private static", "return": "int", "signature": "int numberOfPages(Page page, int totalItems)", "full_signature": "private static int numberOfPages(Page page, int totalItems)", "class_method_signature": "PaginationEvaluator.numberOfPages(Page page, int totalItems)", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder<T>", "signature": "Builder<T> newBuilder()", "full_signature": "public static Builder<T> newBuilder()", "class_method_signature": "PaginationEvaluator.newBuilder()", "testcase": false, "constructor": false}], "file": "titus-common-api/src/main/java/com/netflix/titus/api/model/PaginationEvaluator.java"}, "focal_method": {"identifier": "takePage", "parameters": "(Page page, List<T> items)", "modifiers": "public", "return": "PageResult<T>", "body": "public PageResult<T> takePage(Page page, List<T> items) {\n        if (page.getPageSize() < 0) {\n            throw PaginationException.badPageSize(page.getPageSize());\n        }\n\n        if (page.getPageSize() == 0) {\n            return takeEmptyPage(page, items);\n        }\n\n        List<T> itemsCopy = new ArrayList<>(items);\n        itemsCopy.sort(dataComparator);\n\n        if (StringExt.isEmpty(page.getCursor())) {\n            return takePageWithoutCursor(page, itemsCopy);\n        }\n\n        Pair<String, Long> decodedCursor = decode(page.getCursor());\n        return takePageWithCursor(page, itemsCopy, decodedCursor.getLeft(), decodedCursor.getRight());\n    }", "signature": "PageResult<T> takePage(Page page, List<T> items)", "full_signature": "public PageResult<T> takePage(Page page, List<T> items)", "class_method_signature": "PaginationEvaluator.takePage(Page page, List<T> items)", "testcase": false, "constructor": false, "invocations": ["getPageSize", "badPageSize", "getPageSize", "getPageSize", "takeEmptyPage", "sort", "isEmpty", "getCursor", "takePageWithoutCursor", "decode", "getCursor", "takePageWithCursor", "getLeft", "getRight"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}