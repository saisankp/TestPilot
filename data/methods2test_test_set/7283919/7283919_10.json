{"test_class": {"identifier": "TeradataTimestampPeriodTest", "superclass": "", "interfaces": "", "fields": [], "file": "dbfit-java/teradata/src/test/java/dbfit/environment/TeradataTimestampPeriodTest.java"}, "test_case": {"identifier": "notEqualsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void notEqualsTest() {\n\n        String fromStr = \"2012-11-11 01:23:45\";\n        String toStr = \"2014-06-02 12:13:14\";\n\n        java.sql.Timestamp F = null;\n        java.sql.Timestamp T = null;\n\n        try {\n            F = (java.sql.Timestamp) SqlTimestampParseDelegate.parse(fromStr);\n            T = (java.sql.Timestamp) SqlTimestampParseDelegate.parse(toStr);\n        }\n        catch (Exception e) {\n            throw new Error(\"Parsing timestamp literals\");\n        }\n\n        Object[] range = { F, T };\n        TeradataTimestampPeriod tdp = new TeradataTimestampPeriod(range);\n        Object[] range2 = { F, F };\n        TeradataTimestampPeriod tdp2 = new TeradataTimestampPeriod(range2);\n        assertFalse(\"Timestamp periods are equal\", tdp.equals(tdp2));\n    }", "signature": "void notEqualsTest()", "full_signature": "@Test public void notEqualsTest()", "class_method_signature": "TeradataTimestampPeriodTest.notEqualsTest()", "testcase": true, "constructor": false, "invocations": ["parse", "parse", "assertFalse", "equals"]}, "focal_class": {"identifier": "TeradataTimestampPeriod", "superclass": "extends DbStruct", "interfaces": "", "fields": [], "methods": [{"identifier": "TeradataTimestampPeriod", "parameters": "(Object[] dates)", "modifiers": "public", "return": "", "signature": " TeradataTimestampPeriod(Object[] dates)", "full_signature": "public  TeradataTimestampPeriod(Object[] dates)", "class_method_signature": "TeradataTimestampPeriod.TeradataTimestampPeriod(Object[] dates)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TeradataTimestampPeriod.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "TeradataTimestampPeriod.equals(Object other)", "testcase": false, "constructor": false}], "file": "dbfit-java/teradata/src/main/java/dbfit/environment/TeradataTimestampPeriod.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object other) {\n\n        if (other == null)\n            return false;\n\n        if (!(other instanceof TeradataTimestampPeriod))\n            return false;\n\n        TeradataTimestampPeriod odp = (TeradataTimestampPeriod)other;\n\n        Object[] thisAtts = null;\n        Object[] otherAtts = null;\n\n        try {\n            otherAtts = odp.getAttributes();\n            thisAtts = this.getAttributes();\n        }\n        catch (SQLException e) {\n            System.out.println(\"TeradataTimestampPeriod: equals: caught exception\");\n        }\n\n        if (!(thisAtts[0].equals(otherAtts[0])))\n            return false;\n\n        if (!(thisAtts[1].equals(otherAtts[1])))\n            return false;\n\n        return true;\n    }", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "TeradataTimestampPeriod.equals(Object other)", "testcase": false, "constructor": false, "invocations": ["getAttributes", "getAttributes", "println", "equals", "equals"]}, "repository": {"repo_id": 7283919, "url": "https://github.com/dbfit/dbfit", "language": "Java", "is_fork": false, "fork_count": 83, "stargazer_count": 181, "size": 6978, "license": "licensed"}}