{"test_class": {"identifier": "TestCoinTossing", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CoinTossing ctOne;", "modifier": "private", "type": "CoinTossing", "declarator": "ctOne", "var_name": "ctOne"}, {"original_string": "private CoinTossing ctTwo;", "modifier": "private", "type": "CoinTossing", "declarator": "ctTwo", "var_name": "ctTwo"}, {"original_string": "private RuntimeForTests testRuntime;", "modifier": "private", "type": "RuntimeForTests", "declarator": "testRuntime", "var_name": "testRuntime"}, {"original_string": "private Network netOne;", "modifier": "private", "type": "Network", "declarator": "netOne", "var_name": "netOne"}, {"original_string": "private Network netTwo;", "modifier": "private", "type": "Network", "declarator": "netTwo", "var_name": "netTwo"}], "file": "tools/ot/src/test/java/dk/alexandra/fresco/tools/cointossing/TestCoinTossing.java"}, "test_case": {"identifier": "testNotInitialized", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNotInitialized() {\n    boolean thrown = false;\n    try {\n      ctOne.toss(128);\n    } catch (IllegalStateException e) {\n      assertEquals(\"Not initialized\", e.getMessage());\n      thrown = true;\n    }\n    assertEquals(true, thrown);\n  }", "signature": "void testNotInitialized()", "full_signature": "@Test public void testNotInitialized()", "class_method_signature": "TestCoinTossing.testNotInitialized()", "testcase": true, "constructor": false, "invocations": ["toss", "assertEquals", "getMessage", "assertEquals"]}, "focal_class": {"identifier": "CoinTossing", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int otherId;", "modifier": "private final", "type": "int", "declarator": "otherId", "var_name": "otherId"}, {"original_string": "private final int myId;", "modifier": "private final", "type": "int", "declarator": "myId", "var_name": "myId"}, {"original_string": "private final Drbg rand;", "modifier": "private final", "type": "Drbg", "declarator": "rand", "var_name": "rand"}, {"original_string": "private final ByteSerializer<HashBasedCommitment> serializer;", "modifier": "private final", "type": "ByteSerializer<HashBasedCommitment>", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "private boolean initialized = false;", "modifier": "private", "type": "boolean", "declarator": "initialized = false", "var_name": "initialized"}, {"original_string": "private Drbg coinTossingPrg;", "modifier": "private", "type": "Drbg", "declarator": "coinTossingPrg", "var_name": "coinTossingPrg"}], "methods": [{"identifier": "CoinTossing", "parameters": "(int myId, int otherId, Drbg rand)", "modifiers": "public", "return": "", "signature": " CoinTossing(int myId, int otherId, Drbg rand)", "full_signature": "public  CoinTossing(int myId, int otherId, Drbg rand)", "class_method_signature": "CoinTossing.CoinTossing(int myId, int otherId, Drbg rand)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "(Network network)", "modifiers": "public", "return": "void", "signature": "void initialize(Network network)", "full_signature": "public void initialize(Network network)", "class_method_signature": "CoinTossing.initialize(Network network)", "testcase": false, "constructor": false}, {"identifier": "toss", "parameters": "(int size)", "modifiers": "public", "return": "StrictBitVector", "signature": "StrictBitVector toss(int size)", "full_signature": "public StrictBitVector toss(int size)", "class_method_signature": "CoinTossing.toss(int size)", "testcase": false, "constructor": false}, {"identifier": "exchangeSeeds", "parameters": "(byte[] seed, Network network)", "modifiers": "private", "return": "byte[]", "signature": "byte[] exchangeSeeds(byte[] seed, Network network)", "full_signature": "private byte[] exchangeSeeds(byte[] seed, Network network)", "class_method_signature": "CoinTossing.exchangeSeeds(byte[] seed, Network network)", "testcase": false, "constructor": false}], "file": "tools/ot/src/main/java/dk/alexandra/fresco/tools/cointossing/CoinTossing.java"}, "focal_method": {"identifier": "toss", "parameters": "(int size)", "modifiers": "public", "return": "StrictBitVector", "body": "public StrictBitVector toss(int size) {\n    if (!initialized) {\n      throw new IllegalStateException(\"Not initialized\");\n    }\n    // Construct byte array with enough space by rounding up the amount of bytes\n    // required to store the tosses\n    byte[] res = new byte[(size + 8 - 1) / 8];\n    coinTossingPrg.nextBytes(res);\n    return new StrictBitVector(res);\n  }", "signature": "StrictBitVector toss(int size)", "full_signature": "public StrictBitVector toss(int size)", "class_method_signature": "CoinTossing.toss(int size)", "testcase": false, "constructor": false, "invocations": ["nextBytes"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}