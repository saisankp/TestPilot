{"test_class": {"identifier": "StaticResourceServletTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "File rootDirectory;", "modifier": "", "type": "File", "declarator": "rootDirectory", "var_name": "rootDirectory"}], "file": "server/src/test/java/com/cloud/servlet/StaticResourceServletTest.java"}, "test_case": {"identifier": "testNoSuchFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoSuchFile() throws ServletException, IOException {\n        final StaticResourceServlet servlet = Mockito\n                .mock(StaticResourceServlet.class);\n        Mockito.doCallRealMethod()\n                .when(servlet)\n                .doGet(Matchers.any(HttpServletRequest.class),\n                        Matchers.any(HttpServletResponse.class));\n        final ServletContext servletContext = Mockito\n                .mock(ServletContext.class);\n        Mockito.when(servletContext.getRealPath(\"notexisting.css\")).thenReturn(\n                new File(rootDirectory, \"notexisting.css\").getAbsolutePath());\n        Mockito.when(servlet.getServletContext()).thenReturn(servletContext);\n\n        final HttpServletRequest request = Mockito\n                .mock(HttpServletRequest.class);\n        Mockito.when(request.getServletPath()).thenReturn(\"notexisting.css\");\n        final HttpServletResponse response = Mockito\n                .mock(HttpServletResponse.class);\n        servlet.doGet(request, response);\n        Mockito.verify(response).setStatus(HttpServletResponse.SC_NOT_FOUND);\n    }", "signature": "void testNoSuchFile()", "full_signature": "@Test public void testNoSuchFile()", "class_method_signature": "StaticResourceServletTest.testNoSuchFile()", "testcase": true, "constructor": false, "invocations": ["mock", "doGet", "when", "doCallRealMethod", "any", "any", "mock", "thenReturn", "when", "getRealPath", "getAbsolutePath", "thenReturn", "when", "getServletContext", "mock", "thenReturn", "when", "getServletPath", "mock", "doGet", "setStatus", "verify"]}, "focal_class": {"identifier": "StaticResourceServlet", "superclass": "extends HttpServlet", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -8833228931973461812L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -8833228931973461812L", "var_name": "serialVersionUID"}, {"original_string": "@SuppressWarnings(\"serial\")\n    static final Map<String, String> contentTypes = Collections\n            .unmodifiableMap(new HashMap<String, String>() {\n                {\n                    put(\"css\", \"text/css\");\n                    put(\"svg\", \"image/svg+xml\");\n                    put(\"js\", \"application/javascript\");\n                    put(\"htm\", \"text/html\");\n                    put(\"html\", \"text/html\");\n                    put(\"txt\", \"text/plain\");\n                    put(\"xml\", \"text/xml\");\n                }\n            });", "modifier": "@SuppressWarnings(\"serial\")\n    static final", "type": "Map<String, String>", "declarator": "contentTypes = Collections\n            .unmodifiableMap(new HashMap<String, String>() {\n                {\n                    put(\"css\", \"text/css\");\n                    put(\"svg\", \"image/svg+xml\");\n                    put(\"js\", \"application/javascript\");\n                    put(\"htm\", \"text/html\");\n                    put(\"html\", \"text/html\");\n                    put(\"txt\", \"text/plain\");\n                    put(\"xml\", \"text/xml\");\n                }\n            })", "var_name": "contentTypes"}], "methods": [{"identifier": "getRequestedFile", "parameters": "(final HttpServletRequest req)", "modifiers": "private", "return": "File", "signature": "File getRequestedFile(final HttpServletRequest req)", "full_signature": "private File getRequestedFile(final HttpServletRequest req)", "class_method_signature": "StaticResourceServlet.getRequestedFile(final HttpServletRequest req)", "testcase": false, "constructor": false}, {"identifier": "doGet", "parameters": "(final HttpServletRequest req,\n            final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(final HttpServletRequest req,\n            final HttpServletResponse resp)", "full_signature": "@Override protected void doGet(final HttpServletRequest req,\n            final HttpServletResponse resp)", "class_method_signature": "StaticResourceServlet.doGet(final HttpServletRequest req,\n            final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "getContentType", "parameters": "(final String fileName)", "modifiers": "static", "return": "String", "signature": "String getContentType(final String fileName)", "full_signature": "static String getContentType(final String fileName)", "class_method_signature": "StaticResourceServlet.getContentType(final String fileName)", "testcase": false, "constructor": false}, {"identifier": "getCompressedVersion", "parameters": "(final File requestedFile)", "modifiers": "static", "return": "File", "signature": "File getCompressedVersion(final File requestedFile)", "full_signature": "static File getCompressedVersion(final File requestedFile)", "class_method_signature": "StaticResourceServlet.getCompressedVersion(final File requestedFile)", "testcase": false, "constructor": false}, {"identifier": "isClientCompressionSupported", "parameters": "(final HttpServletRequest req)", "modifiers": "static", "return": "boolean", "signature": "boolean isClientCompressionSupported(final HttpServletRequest req)", "full_signature": "static boolean isClientCompressionSupported(final HttpServletRequest req)", "class_method_signature": "StaticResourceServlet.isClientCompressionSupported(final HttpServletRequest req)", "testcase": false, "constructor": false}, {"identifier": "getEtag", "parameters": "(final File resource)", "modifiers": "static", "return": "String", "signature": "String getEtag(final File resource)", "full_signature": "static String getEtag(final File resource)", "class_method_signature": "StaticResourceServlet.getEtag(final File resource)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/servlet/StaticResourceServlet.java"}, "focal_method": {"identifier": "doGet", "parameters": "(final HttpServletRequest req,\n            final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void doGet(final HttpServletRequest req,\n            final HttpServletResponse resp) throws ServletException,\n            IOException {\n        final File requestedFile = getRequestedFile(req);\n        if (!requestedFile.exists() || !requestedFile.isFile()) {\n            resp.setStatus(HttpServletResponse.SC_NOT_FOUND);\n            return;\n        }\n        final String etag = getEtag(requestedFile);\n        if (etag.equals(req.getHeader(\"If-None-Match\"))) {\n            resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n            return;\n        }\n        // have to send data, either compressed or the original\n        final File compressedStatic = getCompressedVersion(requestedFile);\n        InputStream fileContent = null;\n        try {\n            resp.setContentType(getContentType(requestedFile.getName()));\n            resp.setHeader(\"ETag\", etag);\n            resp.setStatus(HttpServletResponse.SC_OK);\n            if (isClientCompressionSupported(req) && compressedStatic.exists()) {\n                // gzip compressed\n                resp.setHeader(\"Content-Encoding\", \"gzip\");\n                resp.setContentLength((int) compressedStatic.length());\n                fileContent = new FileInputStream(compressedStatic);\n            } else {\n                // uncompressed\n                resp.setContentLength((int) requestedFile.length());\n                fileContent = new FileInputStream(requestedFile);\n            }\n            IOUtils.copy(fileContent, resp.getOutputStream());\n        } finally {\n            IOUtils.closeQuietly(fileContent);\n        }\n    }", "signature": "void doGet(final HttpServletRequest req,\n            final HttpServletResponse resp)", "full_signature": "@Override protected void doGet(final HttpServletRequest req,\n            final HttpServletResponse resp)", "class_method_signature": "StaticResourceServlet.doGet(final HttpServletRequest req,\n            final HttpServletResponse resp)", "testcase": false, "constructor": false, "invocations": ["getRequestedFile", "exists", "isFile", "setStatus", "getEtag", "equals", "getHeader", "setStatus", "getCompressedVersion", "setContentType", "getContentType", "getName", "setHeader", "setStatus", "isClientCompressionSupported", "exists", "setHeader", "setContentLength", "length", "setContentLength", "length", "copy", "getOutputStream", "closeQuietly"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}