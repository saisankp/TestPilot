{"test_class": {"identifier": "ConvertTest", "superclass": "", "interfaces": "", "fields": [], "file": "util/src/test/java/org/coniks/util/ConvertTest.java"}, "test_case": {"identifier": "testBitsBytesConvert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBitsBytesConvert() {\n\n        Random r = new Random();\n\n        boolean[] bits = new boolean[32];\n        for (int i = 0; i < bits.length; i++) {\n            bits[i] = r.nextBoolean();\n        }\n\n        // convert bits to byte array\n        byte[] bytes = new byte[4];\n        for (int i = 0;i < bits.length; i++) {\n            if (bits[i]) {\n                bytes[i/8] |= (1 << 7) >> (i%8);\n            }\n        }\n\n        for (int i = 0; i < bits.length; i++) {\n            if (Convert.getNthBit(bytes, i) != bits[i]) {\n                fail(\"Conversion of bytes to bits failed at bit \"+i);\n            }\n        }\n\n    }", "signature": "void testBitsBytesConvert()", "full_signature": "@Test public void testBitsBytesConvert()", "class_method_signature": "ConvertTest.testBitsBytesConvert()", "testcase": true, "constructor": false, "invocations": ["nextBoolean", "getNthBit", "fail"]}, "focal_class": {"identifier": "Convert", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char[] hexArray = \"0123456789ABCDEF\".toCharArray();", "modifier": "private static final", "type": "char[]", "declarator": "hexArray = \"0123456789ABCDEF\".toCharArray()", "var_name": "hexArray"}], "methods": [{"identifier": "bytesToHex", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String bytesToHex(byte[] bytes)", "full_signature": "public static String bytesToHex(byte[] bytes)", "class_method_signature": "Convert.bytesToHex(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "strToBytes", "parameters": "(String str)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] strToBytes(String str)", "full_signature": "public static byte[] strToBytes(String str)", "class_method_signature": "Convert.strToBytes(String str)", "testcase": false, "constructor": false}, {"identifier": "longToBytes", "parameters": "(long val)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] longToBytes(long val)", "full_signature": "public static byte[] longToBytes(long val)", "class_method_signature": "Convert.longToBytes(long val)", "testcase": false, "constructor": false}, {"identifier": "getNthBit", "parameters": "(byte[] arr, int offset)", "modifiers": "public static", "return": "boolean", "signature": "boolean getNthBit(byte[] arr, int offset)", "full_signature": "public static boolean getNthBit(byte[] arr, int offset)", "class_method_signature": "Convert.getNthBit(byte[] arr, int offset)", "testcase": false, "constructor": false}, {"identifier": "getPrefixBytes", "parameters": "(byte[] arr)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getPrefixBytes(byte[] arr)", "full_signature": "public static byte[] getPrefixBytes(byte[] arr)", "class_method_signature": "Convert.getPrefixBytes(byte[] arr)", "testcase": false, "constructor": false}], "file": "util/src/main/java/org/coniks/util/Convert.java"}, "focal_method": {"identifier": "getNthBit", "parameters": "(byte[] arr, int offset)", "modifiers": "public static", "return": "boolean", "body": "public static boolean getNthBit(byte[] arr, int offset){\n        int arrayOffset = offset / 8;\n        int bitOfByte = offset % 8;\n        int maskedBit = arr[arrayOffset] & (1 << (7 - bitOfByte));\n        return (maskedBit != 0);\n    }", "signature": "boolean getNthBit(byte[] arr, int offset)", "full_signature": "public static boolean getNthBit(byte[] arr, int offset)", "class_method_signature": "Convert.getNthBit(byte[] arr, int offset)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 34706545, "url": "https://github.com/coniks-sys/coniks-java", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 60, "size": 2990, "license": "licensed"}}