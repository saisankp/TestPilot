{"test_class": {"identifier": "ZkBasedTreeNodeResourceTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ZkBasedTreeNodeResourceTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ZkBasedTreeNodeResourceTest.class)", "var_name": "logger"}], "file": "core/src/test/java/com/github/phantomthief/zookeeper/ZkBasedTreeNodeResourceTest.java"}, "test_case": {"identifier": "testClose", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testClose() {\n        ZkBasedTreeNodeResource<Map<String, String>> tree = ZkBasedTreeNodeResource\n                .<Map<String, String>> newBuilder()\n                .curator(curatorFramework)\n                .path(\"/test\")\n                .factory(p -> p.entrySet().stream()\n                        .collect(toMap(Entry::getKey, e -> new String(e.getValue().getData()))))\n                .build();\n        System.out.println(tree.get());\n        tree.close();\n        assertThrows(IllegalStateException.class, tree::get);\n    }", "signature": "void testClose()", "full_signature": "@Test void testClose()", "class_method_signature": "ZkBasedTreeNodeResourceTest.testClose()", "testcase": true, "constructor": false, "invocations": ["build", "factory", "path", "curator", "newBuilder", "collect", "stream", "entrySet", "toMap", "getData", "getValue", "println", "get", "close", "assertThrows"]}, "focal_class": {"identifier": "ZkBasedTreeNodeResource", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final Logger logger = getLogger(ZkBasedTreeNodeResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = getLogger(ZkBasedTreeNodeResource.class)", "var_name": "logger"}, {"original_string": "private final Object lock = new Object();", "modifier": "private final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}, {"original_string": "private final ThrowableFunction<Map<String, ChildData>, T, Exception> factory;", "modifier": "private final", "type": "ThrowableFunction<Map<String, ChildData>, T, Exception>", "declarator": "factory", "var_name": "factory"}, {"original_string": "private final Predicate<T> cleanup;", "modifier": "private final", "type": "Predicate<T>", "declarator": "cleanup", "var_name": "cleanup"}, {"original_string": "private final long waitStopPeriod;", "modifier": "private final", "type": "long", "declarator": "waitStopPeriod", "var_name": "waitStopPeriod"}, {"original_string": "private final BiConsumer<T, T> onResourceChange;", "modifier": "private final", "type": "BiConsumer<T, T>", "declarator": "onResourceChange", "var_name": "onResourceChange"}, {"original_string": "private final Supplier<CuratorFramework> curatorFrameworkFactory;", "modifier": "private final", "type": "Supplier<CuratorFramework>", "declarator": "curatorFrameworkFactory", "var_name": "curatorFrameworkFactory"}, {"original_string": "private final String path;", "modifier": "private final", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "@GuardedBy(\"lock\")\n    private volatile TreeCache treeCache;", "modifier": "@GuardedBy(\"lock\")\n    private volatile", "type": "TreeCache", "declarator": "treeCache", "var_name": "treeCache"}, {"original_string": "@GuardedBy(\"lock\")\n    private volatile T resource;", "modifier": "@GuardedBy(\"lock\")\n    private volatile", "type": "T", "declarator": "resource", "var_name": "resource"}, {"original_string": "@GuardedBy(\"lock\")\n    private volatile boolean closed;", "modifier": "@GuardedBy(\"lock\")\n    private volatile", "type": "boolean", "declarator": "closed", "var_name": "closed"}], "methods": [{"identifier": "ZkBasedTreeNodeResource", "parameters": "(Builder<T> builder)", "modifiers": "private", "return": "", "signature": " ZkBasedTreeNodeResource(Builder<T> builder)", "full_signature": "private  ZkBasedTreeNodeResource(Builder<T> builder)", "class_method_signature": "ZkBasedTreeNodeResource.ZkBasedTreeNodeResource(Builder<T> builder)", "testcase": false, "constructor": true}, {"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder<T>", "signature": "Builder<T> newBuilder()", "full_signature": "public static Builder<T> newBuilder()", "class_method_signature": "ZkBasedTreeNodeResource.newBuilder()", "testcase": false, "constructor": false}, {"identifier": "ensureTreeCacheReady", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureTreeCacheReady()", "full_signature": "private void ensureTreeCacheReady()", "class_method_signature": "ZkBasedTreeNodeResource.ensureTreeCacheReady()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T get()", "full_signature": "public T get()", "class_method_signature": "ZkBasedTreeNodeResource.get()", "testcase": false, "constructor": false}, {"identifier": "checkClosed", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkClosed()", "full_signature": "private void checkClosed()", "class_method_signature": "ZkBasedTreeNodeResource.checkClosed()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "(T currentResource, T oldResource)", "modifiers": "private", "return": "void", "signature": "void cleanup(T currentResource, T oldResource)", "full_signature": "private void cleanup(T currentResource, T oldResource)", "class_method_signature": "ZkBasedTreeNodeResource.cleanup(T currentResource, T oldResource)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ZkBasedTreeNodeResource.close()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "public boolean isClosed()", "class_method_signature": "ZkBasedTreeNodeResource.isClosed()", "testcase": false, "constructor": false}, {"identifier": "doFactory", "parameters": "()", "modifiers": "private", "return": "T", "signature": "T doFactory()", "full_signature": "private T doFactory()", "class_method_signature": "ZkBasedTreeNodeResource.doFactory()", "testcase": false, "constructor": false}, {"identifier": "generateFullTree", "parameters": "(Map<String, ChildData> map, TreeCache cache, String rootPath)", "modifiers": "private", "return": "void", "signature": "void generateFullTree(Map<String, ChildData> map, TreeCache cache, String rootPath)", "full_signature": "private void generateFullTree(Map<String, ChildData> map, TreeCache cache, String rootPath)", "class_method_signature": "ZkBasedTreeNodeResource.generateFullTree(Map<String, ChildData> map, TreeCache cache, String rootPath)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/phantomthief/zookeeper/ZkBasedTreeNodeResource.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void close() {\n        synchronized (lock) {\n            if (resource != null && cleanup != null) {\n                cleanup.test(resource);\n            }\n            if (treeCache != null) {\n                treeCache.close();\n            }\n            closed = true;\n        }\n    }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ZkBasedTreeNodeResource.close()", "testcase": false, "constructor": false, "invocations": ["test", "close"]}, "repository": {"repo_id": 27187107, "url": "https://github.com/PhantomThief/zkconfig-resources", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 11, "size": 312, "license": "licensed"}}