{"test_class": {"identifier": "SimpleTextReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String curDir = getProperty(\"user.dir\");", "modifier": "private static", "type": "String", "declarator": "curDir = getProperty(\"user.dir\")", "var_name": "curDir"}], "file": "jhelper/src/test/java/com/hwangjr/jhelper/SimpleTextReaderTest.java"}, "test_case": {"identifier": "lineIteratorTest2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void lineIteratorTest2() throws IOException {\n        LineIterator li = new SimpleTextReader(\"test/multi_line_text_file.txt\").getLineIterator();\n        while (li.hasNext())\n            out.println(li.next().toUpperCase());\n        IOs.closeSilently(li);\n\n    }", "signature": "void lineIteratorTest2()", "full_signature": "@Test public void lineIteratorTest2()", "class_method_signature": "SimpleTextReaderTest.lineIteratorTest2()", "testcase": true, "constructor": false, "invocations": ["getLineIterator", "hasNext", "println", "toUpperCase", "next", "closeSilently"]}, "focal_class": {"identifier": "SimpleTextReader", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private final InputStream is;", "modifier": "private final", "type": "InputStream", "declarator": "is", "var_name": "is"}, {"original_string": "private final String encoding;", "modifier": "private final", "type": "String", "declarator": "encoding", "var_name": "encoding"}, {"original_string": "private Filter filters[] = new Filter[0];", "modifier": "private", "type": "Filter", "declarator": "filters[] = new Filter[0]", "var_name": "filters"}, {"original_string": "private boolean trim = false;", "modifier": "private", "type": "boolean", "declarator": "trim = false", "var_name": "trim"}, {"original_string": "private Template template;", "modifier": "private", "type": "Template", "declarator": "template", "var_name": "template"}], "methods": [{"identifier": "SimpleTextReader", "parameters": "(InputStream is, Template template)", "modifiers": "", "return": "", "signature": " SimpleTextReader(InputStream is, Template template)", "full_signature": "  SimpleTextReader(InputStream is, Template template)", "class_method_signature": "SimpleTextReader.SimpleTextReader(InputStream is, Template template)", "testcase": false, "constructor": true}, {"identifier": "SimpleTextReader", "parameters": "(File file)", "modifiers": "public", "return": "", "signature": " SimpleTextReader(File file)", "full_signature": "public  SimpleTextReader(File file)", "class_method_signature": "SimpleTextReader.SimpleTextReader(File file)", "testcase": false, "constructor": true}, {"identifier": "SimpleTextReader", "parameters": "(File file, String encoding)", "modifiers": "public", "return": "", "signature": " SimpleTextReader(File file, String encoding)", "full_signature": "public  SimpleTextReader(File file, String encoding)", "class_method_signature": "SimpleTextReader.SimpleTextReader(File file, String encoding)", "testcase": false, "constructor": true}, {"identifier": "SimpleTextReader", "parameters": "(String fileName)", "modifiers": "public", "return": "", "signature": " SimpleTextReader(String fileName)", "full_signature": "public  SimpleTextReader(String fileName)", "class_method_signature": "SimpleTextReader.SimpleTextReader(String fileName)", "testcase": false, "constructor": true}, {"identifier": "SimpleTextReader", "parameters": "(String fileName, String encoding)", "modifiers": "public", "return": "", "signature": " SimpleTextReader(String fileName, String encoding)", "full_signature": "public  SimpleTextReader(String fileName, String encoding)", "class_method_signature": "SimpleTextReader.SimpleTextReader(String fileName, String encoding)", "testcase": false, "constructor": true}, {"identifier": "SimpleTextReader", "parameters": "(InputStream is)", "modifiers": "public", "return": "", "signature": " SimpleTextReader(InputStream is)", "full_signature": "public  SimpleTextReader(InputStream is)", "class_method_signature": "SimpleTextReader.SimpleTextReader(InputStream is)", "testcase": false, "constructor": true}, {"identifier": "SimpleTextReader", "parameters": "(InputStream is, String encoding)", "modifiers": "public", "return": "", "signature": " SimpleTextReader(InputStream is, String encoding)", "full_signature": "public  SimpleTextReader(InputStream is, String encoding)", "class_method_signature": "SimpleTextReader.SimpleTextReader(InputStream is, String encoding)", "testcase": false, "constructor": true}, {"identifier": "trimmingUTF8Reader", "parameters": "(File file)", "modifiers": "public static", "return": "SimpleTextReader", "signature": "SimpleTextReader trimmingUTF8Reader(File file)", "full_signature": "public static SimpleTextReader trimmingUTF8Reader(File file)", "class_method_signature": "SimpleTextReader.trimmingUTF8Reader(File file)", "testcase": false, "constructor": false}, {"identifier": "trimmingUTF8LineIterator", "parameters": "(File file)", "modifiers": "public static", "return": "LineIterator", "signature": "LineIterator trimmingUTF8LineIterator(File file)", "full_signature": "public static LineIterator trimmingUTF8LineIterator(File file)", "class_method_signature": "SimpleTextReader.trimmingUTF8LineIterator(File file)", "testcase": false, "constructor": false}, {"identifier": "trimmingUTF8IterableLineReader", "parameters": "(File file)", "modifiers": "public static", "return": "IterableLineReader", "signature": "IterableLineReader trimmingUTF8IterableLineReader(File file)", "full_signature": "public static IterableLineReader trimmingUTF8IterableLineReader(File file)", "class_method_signature": "SimpleTextReader.trimmingUTF8IterableLineReader(File file)", "testcase": false, "constructor": false}, {"identifier": "trimmingReader", "parameters": "(InputStream is, String encoding)", "modifiers": "public static", "return": "SimpleTextReader", "signature": "SimpleTextReader trimmingReader(InputStream is, String encoding)", "full_signature": "public static SimpleTextReader trimmingReader(InputStream is, String encoding)", "class_method_signature": "SimpleTextReader.trimmingReader(InputStream is, String encoding)", "testcase": false, "constructor": false}, {"identifier": "trimmingLineIterator", "parameters": "(InputStream is, String encoding)", "modifiers": "public static", "return": "LineIterator", "signature": "LineIterator trimmingLineIterator(InputStream is, String encoding)", "full_signature": "public static LineIterator trimmingLineIterator(InputStream is, String encoding)", "class_method_signature": "SimpleTextReader.trimmingLineIterator(InputStream is, String encoding)", "testcase": false, "constructor": false}, {"identifier": "trimmingIterableLineReader", "parameters": "(InputStream is, String encoding)", "modifiers": "public static", "return": "IterableLineReader", "signature": "IterableLineReader trimmingIterableLineReader(InputStream is, String encoding)", "full_signature": "public static IterableLineReader trimmingIterableLineReader(InputStream is, String encoding)", "class_method_signature": "SimpleTextReader.trimmingIterableLineReader(InputStream is, String encoding)", "testcase": false, "constructor": false}, {"identifier": "getEncoding", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEncoding()", "full_signature": "public String getEncoding()", "class_method_signature": "SimpleTextReader.getEncoding()", "testcase": false, "constructor": false}, {"identifier": "cloneForStream", "parameters": "(InputStream is)", "modifiers": "public", "return": "SimpleTextReader", "signature": "SimpleTextReader cloneForStream(InputStream is)", "full_signature": "public SimpleTextReader cloneForStream(InputStream is)", "class_method_signature": "SimpleTextReader.cloneForStream(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "cloneForFile", "parameters": "(File file)", "modifiers": "public", "return": "SimpleTextReader", "signature": "SimpleTextReader cloneForFile(File file)", "full_signature": "public SimpleTextReader cloneForFile(File file)", "class_method_signature": "SimpleTextReader.cloneForFile(File file)", "testcase": false, "constructor": false}, {"identifier": "asByteArray", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] asByteArray()", "full_signature": "public byte[] asByteArray()", "class_method_signature": "SimpleTextReader.asByteArray()", "testcase": false, "constructor": false}, {"identifier": "asString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String asString()", "full_signature": "public String asString()", "class_method_signature": "SimpleTextReader.asString()", "testcase": false, "constructor": false}, {"identifier": "asStringList", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> asStringList()", "full_signature": "public List<String> asStringList()", "class_method_signature": "SimpleTextReader.asStringList()", "testcase": false, "constructor": false}, {"identifier": "getReader", "parameters": "()", "modifiers": "", "return": "BufferedReader", "signature": "BufferedReader getReader()", "full_signature": " BufferedReader getReader()", "class_method_signature": "SimpleTextReader.getReader()", "testcase": false, "constructor": false}, {"identifier": "getIterableReader", "parameters": "()", "modifiers": "public", "return": "IterableLineReader", "signature": "IterableLineReader getIterableReader()", "full_signature": "public IterableLineReader getIterableReader()", "class_method_signature": "SimpleTextReader.getIterableReader()", "testcase": false, "constructor": false}, {"identifier": "getLineIterator", "parameters": "()", "modifiers": "public", "return": "LineIterator", "signature": "LineIterator getLineIterator()", "full_signature": "public LineIterator getLineIterator()", "class_method_signature": "SimpleTextReader.getLineIterator()", "testcase": false, "constructor": false}, {"identifier": "countLines", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long countLines()", "full_signature": "public long countLines()", "class_method_signature": "SimpleTextReader.countLines()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "SimpleTextReader.close()", "testcase": false, "constructor": false}], "file": "jhelper/src/main/java/com/hwangjr/jhelper/SimpleTextReader.java"}, "focal_method": {"identifier": "getLineIterator", "parameters": "()", "modifiers": "public", "return": "LineIterator", "body": "public LineIterator getLineIterator() throws IOException {\n        return new LineIterator(getReader(), trim, filters);\n    }", "signature": "LineIterator getLineIterator()", "full_signature": "public LineIterator getLineIterator()", "class_method_signature": "SimpleTextReader.getLineIterator()", "testcase": false, "constructor": false, "invocations": ["getReader"]}, "repository": {"repo_id": 49483698, "url": "https://github.com/AndroidKnife/RecordHelper", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 10, "size": 185, "license": "licensed"}}