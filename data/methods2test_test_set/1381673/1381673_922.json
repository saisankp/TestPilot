{"test_class": {"identifier": "ExternalSpreadsheetCompilerTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-decisiontables/src/test/java/org/drools/decisiontable/ExternalSpreadsheetCompilerTest.java"}, "test_case": {"identifier": "testLoadBasicWithMergedCells", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadBasicWithMergedCells() {\n        final ExternalSpreadsheetCompiler converter = new ExternalSpreadsheetCompiler();\n        final String drl = converter.compile( \"/data/BasicWorkbook.xls\",\n                                              \"/templates/test_template3.drl\",\n                                              InputType.XLS,\n                                              10,\n                                              2 );\n\n        final String drl1 = converter.compile( \"/data/BasicWorkbook.xls\",\n                                               \"/templates/test_template3.drl\",\n                                               InputType.XLS,\n                                               21,\n                                               2 );\n\n        assertNotNull( drl );\n\n        Pattern p = Pattern.compile( \".*setIsValid\\\\(Y\\\\).*setIsValid\\\\(Y\\\\).*setIsValid\\\\(Y\\\\).*\",\n                                     Pattern.DOTALL | Pattern.MULTILINE );\n        Matcher m = p.matcher( drl );\n        assertTrue( m.matches() );\n\n        assertTrue( drl.indexOf( \"This is a function block\" ) > -1 );\n        assertTrue( drl.indexOf( \"global Class1 obj1;\" ) > -1 );\n        assertTrue( drl1.indexOf( \"myObject.setIsValid(10-Jul-1974)\" ) > -1 );\n        assertTrue( drl.indexOf( \"myObject.getColour().equals(blue)\" ) > -1 );\n        assertTrue( drl.indexOf( \"Foo(myObject.getColour().equals(red), myObject.size() > 12\\\")\" ) > -1 );\n\n        assertTrue( drl.indexOf( \"b: Bar()\\n        eval(myObject.size() < 3)\" ) > -1 );\n        assertTrue( drl.indexOf( \"b: Bar()\\n        eval(myObject.size() < 9)\" ) > -1 );\n\n        assertTrue( drl.indexOf( \"Foo(myObject.getColour().equals(red), myObject.size() > 1)\" ) < drl.indexOf( \"b: Bar()\\n        eval(myObject.size() < 3)\" ) );\n\n    }", "signature": "void testLoadBasicWithMergedCells()", "full_signature": "@Test public void testLoadBasicWithMergedCells()", "class_method_signature": "ExternalSpreadsheetCompilerTest.testLoadBasicWithMergedCells()", "testcase": true, "constructor": false, "invocations": ["compile", "compile", "assertNotNull", "compile", "matcher", "assertTrue", "matches", "assertTrue", "indexOf", "assertTrue", "indexOf", "assertTrue", "indexOf", "assertTrue", "indexOf", "assertTrue", "indexOf", "assertTrue", "indexOf", "assertTrue", "indexOf", "assertTrue", "indexOf", "indexOf"]}, "focal_class": {"identifier": "ExternalSpreadsheetCompiler", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final transient Logger logger = LoggerFactory.getLogger(ExternalSpreadsheetCompiler.class);", "modifier": "protected static final transient", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ExternalSpreadsheetCompiler.class)", "var_name": "logger"}], "methods": [{"identifier": "compile", "parameters": "(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol)", "modifiers": "public", "return": "String", "signature": "String compile(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol)", "full_signature": "public String compile(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final String xls,\n                          final String template,\n                          InputType type,\n                          int startRow,\n                          int startCol)", "modifiers": "public", "return": "String", "signature": "String compile(final String xls,\n                          final String template,\n                          InputType type,\n                          int startRow,\n                          int startCol)", "full_signature": "public String compile(final String xls,\n                          final String template,\n                          InputType type,\n                          int startRow,\n                          int startCol)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final String xls,\n                          final String template,\n                          InputType type,\n                          int startRow,\n                          int startCol)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final String xls,\n                          final String worksheetName,\n                          final String template,\n                          int startRow,\n                          int startCol)", "modifiers": "public", "return": "String", "signature": "String compile(final String xls,\n                          final String worksheetName,\n                          final String template,\n                          int startRow,\n                          int startCol)", "full_signature": "public String compile(final String xls,\n                          final String worksheetName,\n                          final String template,\n                          int startRow,\n                          int startCol)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final String xls,\n                          final String worksheetName,\n                          final String template,\n                          int startRow,\n                          int startCol)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final InputStream xlsStream,\n                          final InputStream templateStream,\n                          int startRow,\n                          int startCol)", "modifiers": "public", "return": "String", "signature": "String compile(final InputStream xlsStream,\n                          final InputStream templateStream,\n                          int startRow,\n                          int startCol)", "full_signature": "public String compile(final InputStream xlsStream,\n                          final InputStream templateStream,\n                          int startRow,\n                          int startCol)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final InputStream xlsStream,\n                          final InputStream templateStream,\n                          int startRow,\n                          int startCol)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final InputStream xlsStream,\n                          final InputStream templateStream,\n                          InputType type,\n                          int startRow,\n                          int startCol)", "modifiers": "public", "return": "String", "signature": "String compile(final InputStream xlsStream,\n                          final InputStream templateStream,\n                          InputType type,\n                          int startRow,\n                          int startCol)", "full_signature": "public String compile(final InputStream xlsStream,\n                          final InputStream templateStream,\n                          InputType type,\n                          int startRow,\n                          int startCol)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final InputStream xlsStream,\n                          final InputStream templateStream,\n                          InputType type,\n                          int startRow,\n                          int startCol)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final InputStream xlsStream,\n                          final String worksheetName,\n                          final InputStream templateStream,\n                          int startRow,\n                          int startCol)", "modifiers": "public", "return": "String", "signature": "String compile(final InputStream xlsStream,\n                          final String worksheetName,\n                          final InputStream templateStream,\n                          int startRow,\n                          int startCol)", "full_signature": "public String compile(final InputStream xlsStream,\n                          final String worksheetName,\n                          final InputStream templateStream,\n                          int startRow,\n                          int startCol)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final InputStream xlsStream,\n                          final String worksheetName,\n                          final InputStream templateStream,\n                          int startRow,\n                          int startCol)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final String xls,\n                        InputType type,\n                        final List<DataListener> listeners)", "modifiers": "public", "return": "void", "signature": "void compile(final String xls,\n                        InputType type,\n                        final List<DataListener> listeners)", "full_signature": "public void compile(final String xls,\n                        InputType type,\n                        final List<DataListener> listeners)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final String xls,\n                        InputType type,\n                        final List<DataListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final String xls,\n                        final Map<String, List<DataListener>> listeners)", "modifiers": "public", "return": "void", "signature": "void compile(final String xls,\n                        final Map<String, List<DataListener>> listeners)", "full_signature": "public void compile(final String xls,\n                        final Map<String, List<DataListener>> listeners)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final String xls,\n                        final Map<String, List<DataListener>> listeners)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final InputStream xlsStream,\n                        InputType type,\n                        final List<DataListener> listeners)", "modifiers": "public", "return": "void", "signature": "void compile(final InputStream xlsStream,\n                        InputType type,\n                        final List<DataListener> listeners)", "full_signature": "public void compile(final InputStream xlsStream,\n                        InputType type,\n                        final List<DataListener> listeners)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final InputStream xlsStream,\n                        InputType type,\n                        final List<DataListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final InputStream xlsStream,\n                        final Map<String, List<DataListener>> listeners)", "modifiers": "public", "return": "void", "signature": "void compile(final InputStream xlsStream,\n                        final Map<String, List<DataListener>> listeners)", "full_signature": "public void compile(final InputStream xlsStream,\n                        final Map<String, List<DataListener>> listeners)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final InputStream xlsStream,\n                        final Map<String, List<DataListener>> listeners)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final InputStream xlsStream,\n                          final InputType type,\n                          final TemplateDataListener listener)", "modifiers": "public", "return": "String", "signature": "String compile(final InputStream xlsStream,\n                          final InputType type,\n                          final TemplateDataListener listener)", "full_signature": "public String compile(final InputStream xlsStream,\n                          final InputType type,\n                          final TemplateDataListener listener)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final InputStream xlsStream,\n                          final InputType type,\n                          final TemplateDataListener listener)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final InputStream xlsStream,\n                          final String worksheetName,\n                          final TemplateDataListener listener)", "modifiers": "public", "return": "String", "signature": "String compile(final InputStream xlsStream,\n                          final String worksheetName,\n                          final TemplateDataListener listener)", "full_signature": "public String compile(final InputStream xlsStream,\n                          final String worksheetName,\n                          final TemplateDataListener listener)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final InputStream xlsStream,\n                          final String worksheetName,\n                          final TemplateDataListener listener)", "testcase": false, "constructor": false}, {"identifier": "closeStream", "parameters": "(final InputStream stream)", "modifiers": "private", "return": "void", "signature": "void closeStream(final InputStream stream)", "full_signature": "private void closeStream(final InputStream stream)", "class_method_signature": "ExternalSpreadsheetCompiler.closeStream(final InputStream stream)", "testcase": false, "constructor": false}], "file": "drools-decisiontables/src/main/java/org/drools/decisiontable/ExternalSpreadsheetCompiler.java"}, "focal_method": {"identifier": "compile", "parameters": "(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol)", "modifiers": "public", "return": "String", "body": "public String compile(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol) {\n        return compile( xls,\n                        template,\n                        InputType.XLS,\n                        startRow,\n                        startCol );\n\n    }", "signature": "String compile(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol)", "full_signature": "public String compile(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol)", "testcase": false, "constructor": false, "invocations": ["compile"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}