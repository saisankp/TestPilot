{"test_class": {"identifier": "HexUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(HexUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HexUtilTest.class)", "var_name": "logger"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/HexUtilTest.java"}, "test_case": {"identifier": "hexCharToIntValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void hexCharToIntValue() throws Exception {\n        Assert.assertEquals(0, HexUtil.hexCharToIntValue('0'));\n        Assert.assertEquals(1, HexUtil.hexCharToIntValue('1'));\n        Assert.assertEquals(2, HexUtil.hexCharToIntValue('2'));\n        Assert.assertEquals(3, HexUtil.hexCharToIntValue('3'));\n        Assert.assertEquals(4, HexUtil.hexCharToIntValue('4'));\n        Assert.assertEquals(5, HexUtil.hexCharToIntValue('5'));\n        Assert.assertEquals(6, HexUtil.hexCharToIntValue('6'));\n        Assert.assertEquals(7, HexUtil.hexCharToIntValue('7'));\n        Assert.assertEquals(8, HexUtil.hexCharToIntValue('8'));\n        Assert.assertEquals(9, HexUtil.hexCharToIntValue('9'));\n        Assert.assertEquals(10, HexUtil.hexCharToIntValue('A'));\n        Assert.assertEquals(11, HexUtil.hexCharToIntValue('B'));\n        Assert.assertEquals(12, HexUtil.hexCharToIntValue('C'));\n        Assert.assertEquals(13, HexUtil.hexCharToIntValue('D'));\n        Assert.assertEquals(14, HexUtil.hexCharToIntValue('E'));\n        Assert.assertEquals(15, HexUtil.hexCharToIntValue('F'));\n        Assert.assertEquals(10, HexUtil.hexCharToIntValue('a'));\n        Assert.assertEquals(11, HexUtil.hexCharToIntValue('b'));\n        Assert.assertEquals(12, HexUtil.hexCharToIntValue('c'));\n        Assert.assertEquals(13, HexUtil.hexCharToIntValue('d'));\n        Assert.assertEquals(14, HexUtil.hexCharToIntValue('e'));\n        Assert.assertEquals(15, HexUtil.hexCharToIntValue('f'));\n\n        try {\n            Assert.assertEquals(15, HexUtil.hexCharToIntValue('g'));\n            Assert.fail();\n        } catch (IllegalArgumentException e) {\n            // correct behavior\n        }\n    }", "signature": "void hexCharToIntValue()", "full_signature": "@Test public void hexCharToIntValue()", "class_method_signature": "HexUtilTest.hexCharToIntValue()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "assertEquals", "hexCharToIntValue", "fail"]}, "focal_class": {"identifier": "HexUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static char[] HEX_TABLE = {\n        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'\n    };", "modifier": "public static", "type": "char[]", "declarator": "HEX_TABLE = {\n        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'\n    }", "var_name": "HEX_TABLE"}], "methods": [{"identifier": "toHexString", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String toHexString(byte[] bytes)", "full_signature": "public static String toHexString(byte[] bytes)", "class_method_signature": "HexUtil.toHexString(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(byte[] bytes, int offset, int length)", "modifiers": "public static", "return": "String", "signature": "String toHexString(byte[] bytes, int offset, int length)", "full_signature": "public static String toHexString(byte[] bytes, int offset, int length)", "class_method_signature": "HexUtil.toHexString(byte[] bytes, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "appendHexString", "parameters": "(StringBuilder buffer, byte[] bytes)", "modifiers": "public static", "return": "void", "signature": "void appendHexString(StringBuilder buffer, byte[] bytes)", "full_signature": "public static void appendHexString(StringBuilder buffer, byte[] bytes)", "class_method_signature": "HexUtil.appendHexString(StringBuilder buffer, byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "appendHexString", "parameters": "(StringBuilder buffer, byte[] bytes, int offset, int length)", "modifiers": "static public", "return": "void", "signature": "void appendHexString(StringBuilder buffer, byte[] bytes, int offset, int length)", "full_signature": "static public void appendHexString(StringBuilder buffer, byte[] bytes, int offset, int length)", "class_method_signature": "HexUtil.appendHexString(StringBuilder buffer, byte[] bytes, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(byte value)", "modifiers": "static public", "return": "String", "signature": "String toHexString(byte value)", "full_signature": "static public String toHexString(byte value)", "class_method_signature": "HexUtil.toHexString(byte value)", "testcase": false, "constructor": false}, {"identifier": "appendHexString", "parameters": "(StringBuilder buffer, byte value)", "modifiers": "static public", "return": "void", "signature": "void appendHexString(StringBuilder buffer, byte value)", "full_signature": "static public void appendHexString(StringBuilder buffer, byte value)", "class_method_signature": "HexUtil.appendHexString(StringBuilder buffer, byte value)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(short value)", "modifiers": "static public", "return": "String", "signature": "String toHexString(short value)", "full_signature": "static public String toHexString(short value)", "class_method_signature": "HexUtil.toHexString(short value)", "testcase": false, "constructor": false}, {"identifier": "appendHexString", "parameters": "(StringBuilder buffer, short value)", "modifiers": "static public", "return": "void", "signature": "void appendHexString(StringBuilder buffer, short value)", "full_signature": "static public void appendHexString(StringBuilder buffer, short value)", "class_method_signature": "HexUtil.appendHexString(StringBuilder buffer, short value)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(int value)", "modifiers": "static public", "return": "String", "signature": "String toHexString(int value)", "full_signature": "static public String toHexString(int value)", "class_method_signature": "HexUtil.toHexString(int value)", "testcase": false, "constructor": false}, {"identifier": "appendHexString", "parameters": "(StringBuilder buffer, int value)", "modifiers": "static public", "return": "void", "signature": "void appendHexString(StringBuilder buffer, int value)", "full_signature": "static public void appendHexString(StringBuilder buffer, int value)", "class_method_signature": "HexUtil.appendHexString(StringBuilder buffer, int value)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(long value)", "modifiers": "static public", "return": "String", "signature": "String toHexString(long value)", "full_signature": "static public String toHexString(long value)", "class_method_signature": "HexUtil.toHexString(long value)", "testcase": false, "constructor": false}, {"identifier": "appendHexString", "parameters": "(StringBuilder buffer, long value)", "modifiers": "static public", "return": "void", "signature": "void appendHexString(StringBuilder buffer, long value)", "full_signature": "static public void appendHexString(StringBuilder buffer, long value)", "class_method_signature": "HexUtil.appendHexString(StringBuilder buffer, long value)", "testcase": false, "constructor": false}, {"identifier": "assertNotNull", "parameters": "(StringBuilder buffer)", "modifiers": "static private", "return": "void", "signature": "void assertNotNull(StringBuilder buffer)", "full_signature": "static private void assertNotNull(StringBuilder buffer)", "class_method_signature": "HexUtil.assertNotNull(StringBuilder buffer)", "testcase": false, "constructor": false}, {"identifier": "assertOffsetLengthValid", "parameters": "(int offset, int length, int arrayLength)", "modifiers": "static private", "return": "void", "signature": "void assertOffsetLengthValid(int offset, int length, int arrayLength)", "full_signature": "static private void assertOffsetLengthValid(int offset, int length, int arrayLength)", "class_method_signature": "HexUtil.assertOffsetLengthValid(int offset, int length, int arrayLength)", "testcase": false, "constructor": false}, {"identifier": "hexCharToIntValue", "parameters": "(char c)", "modifiers": "static public", "return": "int", "signature": "int hexCharToIntValue(char c)", "full_signature": "static public int hexCharToIntValue(char c)", "class_method_signature": "HexUtil.hexCharToIntValue(char c)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(CharSequence hexString)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(CharSequence hexString)", "full_signature": "public static byte[] toByteArray(CharSequence hexString)", "class_method_signature": "HexUtil.toByteArray(CharSequence hexString)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(CharSequence hexString, int offset, int length)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(CharSequence hexString, int offset, int length)", "full_signature": "public static byte[] toByteArray(CharSequence hexString, int offset, int length)", "class_method_signature": "HexUtil.toByteArray(CharSequence hexString, int offset, int length)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/HexUtil.java"}, "focal_method": {"identifier": "hexCharToIntValue", "parameters": "(char c)", "modifiers": "static public", "return": "int", "body": "static public int hexCharToIntValue(char c) {\n        if (c == '0') {\n            return 0;\n        } else if (c == '1') {\n            return 1;\n        } else if (c == '2') {\n            return 2;\n        } else if (c == '3') {\n            return 3;\n        } else if (c == '4') {\n            return 4;\n        } else if (c == '5') {\n            return 5;\n        } else if (c == '6') {\n            return 6;\n        } else if (c == '7') {\n            return 7;\n        } else if (c == '8') {\n            return 8;\n        } else if (c == '9') {\n            return 9;\n        } else if (c == 'A' || c == 'a') {\n            return 10;\n        } else if (c == 'B' || c == 'b') {\n            return 11;\n        } else if (c == 'C' || c == 'c') {\n            return 12;\n        } else if (c == 'D' || c == 'd') {\n            return 13;\n        } else if (c == 'E' || c == 'e') {\n            return 14;\n        } else if (c == 'F' || c == 'f') {\n            return 15;\n        } else {\n            throw new IllegalArgumentException(\"The character [\" + c + \"] does not represent a valid hex digit\");\n        }\n    }", "signature": "int hexCharToIntValue(char c)", "full_signature": "static public int hexCharToIntValue(char c)", "class_method_signature": "HexUtil.hexCharToIntValue(char c)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}