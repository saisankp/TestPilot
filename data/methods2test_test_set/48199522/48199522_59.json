{"test_class": {"identifier": "KalmanScalarFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(KalmanScalarFilterTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(KalmanScalarFilterTest.class)", "var_name": "log"}], "file": "contrib/src/test/java/macrobase/analysis/stats/kalmanfilter/KalmanScalarFilterTest.java"}, "test_case": {"identifier": "reduceToVectorKalmanFilterTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reduceToVectorKalmanFilterTest() throws Exception {\n        MacroBaseConf conf = new MacroBaseConf()\n                .set(MacroBaseConf.RANDOM_SEED, 4)\n                .set(MacroBaseConf.DATA_LOADER_TYPE, \"CSV_LOADER\")\n                .set(MacroBaseConf.CSV_COMPRESSION, CSVIngester.Compression.GZIP)\n                .set(MacroBaseConf.CSV_INPUT_FILE, \"src/test/resources/data/2gaussians-500points.csv.gz\")\n                .set(MacroBaseConf.METRICS, \"XX, YY\")\n                .set(MacroBaseConf.ATTRIBUTES, \"\");\n        List<Datum> data = Drainer.drainIngest(conf);\n        assertEquals(500, data.size());\n\n        double qSacle = 1e-6;\n\n        KalmanVectorFilter vf = new KalmanVectorFilter(new ArrayRealVector(1), qSacle);\n        KalmanScalarFilter sf = new KalmanScalarFilter(0, qSacle);\n\n        List<Datum> oneCluster = data.subList(201, 500);\n        List<RealVector> vectorFiltered = oneCluster.stream().map(d -> vf.step(d.metrics().getSubVector(0, 1), 1)).collect(Collectors.toList());\n        List<Double> scalarFiltered = oneCluster.stream()\n                .map(d -> sf.step(d.metrics().getEntry(0), 1))\n                .collect(Collectors.toList());\n\n        for (int i=0; i<10; i++) {\n            int ri = conf.getRandom().nextInt(300);\n            assertEquals(vectorFiltered.get(ri).getEntry(0), scalarFiltered.get(ri));\n        }\n    }", "signature": "void reduceToVectorKalmanFilterTest()", "full_signature": "@Test public void reduceToVectorKalmanFilterTest()", "class_method_signature": "KalmanScalarFilterTest.reduceToVectorKalmanFilterTest()", "testcase": true, "constructor": false, "invocations": ["set", "set", "set", "set", "set", "set", "drainIngest", "assertEquals", "size", "subList", "collect", "map", "stream", "step", "getSubVector", "metrics", "toList", "collect", "map", "stream", "step", "getEntry", "metrics", "toList", "nextInt", "getRandom", "assertEquals", "getEntry", "get", "get"]}, "focal_class": {"identifier": "KalmanScalarFilter", "superclass": "extends KalmanVectorFilter", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(KalmanScalarFilter.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(KalmanScalarFilter.class)", "var_name": "log"}], "methods": [{"identifier": "toVector", "parameters": "(double x)", "modifiers": "private static", "return": "RealVector", "signature": "RealVector toVector(double x)", "full_signature": "private static RealVector toVector(double x)", "class_method_signature": "KalmanScalarFilter.toVector(double x)", "testcase": false, "constructor": false}, {"identifier": "KalmanScalarFilter", "parameters": "(double startLoc, double qScale)", "modifiers": "public", "return": "", "signature": " KalmanScalarFilter(double startLoc, double qScale)", "full_signature": "public  KalmanScalarFilter(double startLoc, double qScale)", "class_method_signature": "KalmanScalarFilter.KalmanScalarFilter(double startLoc, double qScale)", "testcase": false, "constructor": true}, {"identifier": "step", "parameters": "(double observation, int time)", "modifiers": "public", "return": "double", "signature": "double step(double observation, int time)", "full_signature": "public double step(double observation, int time)", "class_method_signature": "KalmanScalarFilter.step(double observation, int time)", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/stats/kalmanfilter/KalmanScalarFilter.java"}, "focal_method": {"identifier": "step", "parameters": "(double observation, int time)", "modifiers": "public", "return": "double", "body": "public double step(double observation, int time) {\n        RealVector v = super.step(toVector(observation), time);\n        return v.getEntry(0);\n    }", "signature": "double step(double observation, int time)", "full_signature": "public double step(double observation, int time)", "class_method_signature": "KalmanScalarFilter.step(double observation, int time)", "testcase": false, "constructor": false, "invocations": ["step", "toVector", "getEntry"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}