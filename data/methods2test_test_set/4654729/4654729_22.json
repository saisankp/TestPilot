{"test_class": {"identifier": "DefaultTypeDeterminatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DefaultTypeDeterminator defaultTypeDeterminator;", "modifier": "", "type": "DefaultTypeDeterminator", "declarator": "defaultTypeDeterminator", "var_name": "defaultTypeDeterminator"}, {"original_string": "Class<CharSequence> type;", "modifier": "", "type": "Class<CharSequence>", "declarator": "type", "var_name": "type"}, {"original_string": "Class<? extends CharSequence>[] candidates;", "modifier": "", "type": "Class<? extends CharSequence>[]", "declarator": "candidates", "var_name": "candidates"}, {"original_string": "Annotation qualifier;", "modifier": "", "type": "Annotation", "declarator": "qualifier", "var_name": "qualifier"}, {"original_string": "ClassLoader classLoader = Thread.currentThread().getContextClassLoader();", "modifier": "", "type": "ClassLoader", "declarator": "classLoader = Thread.currentThread().getContextClassLoader()", "var_name": "classLoader"}, {"original_string": "Single anno = new Single() {\n        \n        @Override\n        public Class<? extends Annotation> annotationType() {\n            return Single.class;\n        }\n        \n    };", "modifier": "", "type": "Single", "declarator": "anno = new Single() {\n        \n        @Override\n        public Class<? extends Annotation> annotationType() {\n            return Single.class;\n        }\n        \n    }", "var_name": "anno"}], "file": "core/src/test/java/com/github/jsr330/instance/DefaultTypeDeterminatorTest.java"}, "test_case": {"identifier": "determineClass_WithQualifier_MultiCandidate", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void determineClass_WithQualifier_MultiCandidate() {\n        candidates = new Class[] { SingleBean.class, MultiBean.class };\n        assertEquals(SingleBean.class, defaultTypeDeterminator.determineClass(type, candidates, anno, classLoader));\n    }", "signature": "void determineClass_WithQualifier_MultiCandidate()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void determineClass_WithQualifier_MultiCandidate()", "class_method_signature": "DefaultTypeDeterminatorTest.determineClass_WithQualifier_MultiCandidate()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "determineClass"]}, "focal_class": {"identifier": "DefaultTypeDeterminator", "superclass": "", "interfaces": "implements TypeDeterminator", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DefaultTypeDeterminator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DefaultTypeDeterminator.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "determineClass", "parameters": "(Class<T> type, Class<? extends T>[] candidates, Annotation qualifier, ClassLoader classLoader)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Class<T>", "signature": "Class<T> determineClass(Class<T> type, Class<? extends T>[] candidates, Annotation qualifier, ClassLoader classLoader)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Class<T> determineClass(Class<T> type, Class<? extends T>[] candidates, Annotation qualifier, ClassLoader classLoader)", "class_method_signature": "DefaultTypeDeterminator.determineClass(Class<T> type, Class<? extends T>[] candidates, Annotation qualifier, ClassLoader classLoader)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/jsr330/instance/DefaultTypeDeterminator.java"}, "focal_method": {"identifier": "determineClass", "parameters": "(Class<T> type, Class<? extends T>[] candidates, Annotation qualifier, ClassLoader classLoader)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Class<T>", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public <T> Class<T> determineClass(Class<T> type, Class<? extends T>[] candidates, Annotation qualifier, ClassLoader classLoader) {\n        String namePrefix = \"\";\n        \n        if (qualifier != null) {\n            if (qualifier instanceof Named) {\n                namePrefix = ((Named) qualifier).value();\n            } else {\n                namePrefix = qualifier.annotationType().getSimpleName();\n            }\n            \n            if (candidates != null) {\n                for (Class<? extends T> candidate : candidates) {\n                    if (candidate.getSimpleName().toLowerCase().startsWith(namePrefix.toLowerCase())) {\n                        LOGGER.debug(\"determineClass - returning decent {} for {}\", candidate, type);\n                        return (Class<T>) candidate;\n                    }\n                }\n            }\n        }\n        \n        LOGGER.debug(\"determineClass - returning {} for {}\", type, type);\n        return type;\n    }", "signature": "Class<T> determineClass(Class<T> type, Class<? extends T>[] candidates, Annotation qualifier, ClassLoader classLoader)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Class<T> determineClass(Class<T> type, Class<? extends T>[] candidates, Annotation qualifier, ClassLoader classLoader)", "class_method_signature": "DefaultTypeDeterminator.determineClass(Class<T> type, Class<? extends T>[] candidates, Annotation qualifier, ClassLoader classLoader)", "testcase": false, "constructor": false, "invocations": ["value", "getSimpleName", "annotationType", "startsWith", "toLowerCase", "getSimpleName", "toLowerCase", "debug", "debug"]}, "repository": {"repo_id": 4654729, "url": "https://github.com/rstiller/JSR-330", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 10, "size": 747, "license": "licensed"}}