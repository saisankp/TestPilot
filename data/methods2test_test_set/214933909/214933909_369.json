{"test_class": {"identifier": "GroupDaoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    GroupDao groupDao;", "modifier": "@Autowired", "type": "GroupDao", "declarator": "groupDao", "var_name": "groupDao"}, {"original_string": "DasGroup group;", "modifier": "", "type": "DasGroup", "declarator": "group", "var_name": "group"}, {"original_string": "DasGroup dasGroupModel;", "modifier": "", "type": "DasGroup", "declarator": "dasGroupModel", "var_name": "dasGroupModel"}, {"original_string": "Paging<DasGroup> paging;", "modifier": "", "type": "Paging<DasGroup>", "declarator": "paging", "var_name": "paging"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/dao/GroupDaoTest.java"}, "test_case": {"identifier": "deleteDalGroup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void deleteDalGroup() throws Exception {\n        int count = groupDao.deleteDalGroup(62L);\n        System.out.println(\"deleteDalGroup :-------> \" + count);\n        Assert.assertTrue(count > 0);\n    }", "signature": "void deleteDalGroup()", "full_signature": "@Test public void deleteDalGroup()", "class_method_signature": "GroupDaoTest.deleteDalGroup()", "testcase": true, "constructor": false, "invocations": ["deleteDalGroup", "println", "assertTrue"]}, "focal_class": {"identifier": "GroupDao", "superclass": "extends BaseDao", "interfaces": "", "fields": [], "methods": [{"identifier": "insertDasGroup", "parameters": "(DasGroup group)", "modifiers": "public", "return": "Long", "signature": "Long insertDasGroup(DasGroup group)", "full_signature": "public Long insertDasGroup(DasGroup group)", "class_method_signature": "GroupDao.insertDasGroup(DasGroup group)", "testcase": false, "constructor": false}, {"identifier": "initAdminGroup", "parameters": "(DasGroup group)", "modifiers": "public", "return": "int", "signature": "int initAdminGroup(DasGroup group)", "full_signature": "public int initAdminGroup(DasGroup group)", "class_method_signature": "GroupDao.initAdminGroup(DasGroup group)", "testcase": false, "constructor": false}, {"identifier": "updateDalGroup", "parameters": "(DasGroup group)", "modifiers": "public", "return": "int", "signature": "int updateDalGroup(DasGroup group)", "full_signature": "public int updateDalGroup(DasGroup group)", "class_method_signature": "GroupDao.updateDalGroup(DasGroup group)", "testcase": false, "constructor": false}, {"identifier": "deleteDalGroup", "parameters": "(Long groupId)", "modifiers": "public", "return": "int", "signature": "int deleteDalGroup(Long groupId)", "full_signature": "public int deleteDalGroup(Long groupId)", "class_method_signature": "GroupDao.deleteDalGroup(Long groupId)", "testcase": false, "constructor": false}, {"identifier": "getCountByName", "parameters": "(String name)", "modifiers": "public", "return": "Long", "signature": "Long getCountByName(String name)", "full_signature": "public Long getCountByName(String name)", "class_method_signature": "GroupDao.getCountByName(String name)", "testcase": false, "constructor": false}, {"identifier": "getCountByIdAndName", "parameters": "(Long id, String name)", "modifiers": "public", "return": "Long", "signature": "Long getCountByIdAndName(Long id, String name)", "full_signature": "public Long getCountByIdAndName(Long id, String name)", "class_method_signature": "GroupDao.getCountByIdAndName(Long id, String name)", "testcase": false, "constructor": false}, {"identifier": "getGroupsByUserId", "parameters": "(Long user_id)", "modifiers": "public", "return": "List<DasGroup>", "signature": "List<DasGroup> getGroupsByUserId(Long user_id)", "full_signature": "public List<DasGroup> getGroupsByUserId(Long user_id)", "class_method_signature": "GroupDao.getGroupsByUserId(Long user_id)", "testcase": false, "constructor": false}, {"identifier": "getGroupsByDbSetId", "parameters": "(Long dbsetId)", "modifiers": "public", "return": "DasGroup", "signature": "DasGroup getGroupsByDbSetId(Long dbsetId)", "full_signature": "public DasGroup getGroupsByDbSetId(Long dbsetId)", "class_method_signature": "GroupDao.getGroupsByDbSetId(Long dbsetId)", "testcase": false, "constructor": false}, {"identifier": "getDalGroupById", "parameters": "(Long id)", "modifiers": "public", "return": "DasGroup", "signature": "DasGroup getDalGroupById(Long id)", "full_signature": "public DasGroup getDalGroupById(Long id)", "class_method_signature": "GroupDao.getDalGroupById(Long id)", "testcase": false, "constructor": false}, {"identifier": "getGroupByName", "parameters": "(String name)", "modifiers": "public", "return": "DasGroup", "signature": "DasGroup getGroupByName(String name)", "full_signature": "public DasGroup getGroupByName(String name)", "class_method_signature": "GroupDao.getGroupByName(String name)", "testcase": false, "constructor": false}, {"identifier": "getAllGroups", "parameters": "()", "modifiers": "public", "return": "List<DasGroup>", "signature": "List<DasGroup> getAllGroups()", "full_signature": "public List<DasGroup> getAllGroups()", "class_method_signature": "GroupDao.getAllGroups()", "testcase": false, "constructor": false}, {"identifier": "getAllGroupsByAppoid", "parameters": "(String appid)", "modifiers": "public", "return": "List<DasGroup>", "signature": "List<DasGroup> getAllGroupsByAppoid(String appid)", "full_signature": "public List<DasGroup> getAllGroupsByAppoid(String appid)", "class_method_signature": "GroupDao.getAllGroupsByAppoid(String appid)", "testcase": false, "constructor": false}, {"identifier": "getAllGroupsWithNotAdmin", "parameters": "()", "modifiers": "public", "return": "List<DasGroup>", "signature": "List<DasGroup> getAllGroupsWithNotAdmin()", "full_signature": "public List<DasGroup> getAllGroupsWithNotAdmin()", "class_method_signature": "GroupDao.getAllGroupsWithNotAdmin()", "testcase": false, "constructor": false}, {"identifier": "getTotalCount", "parameters": "(Paging<DasGroup> paging)", "modifiers": "public", "return": "Long", "signature": "Long getTotalCount(Paging<DasGroup> paging)", "full_signature": "public Long getTotalCount(Paging<DasGroup> paging)", "class_method_signature": "GroupDao.getTotalCount(Paging<DasGroup> paging)", "testcase": false, "constructor": false}, {"identifier": "findGroupPageList", "parameters": "(Paging<DasGroup> paging)", "modifiers": "public", "return": "List<DalGroupView>", "signature": "List<DalGroupView> findGroupPageList(Paging<DasGroup> paging)", "full_signature": "public List<DalGroupView> findGroupPageList(Paging<DasGroup> paging)", "class_method_signature": "GroupDao.findGroupPageList(Paging<DasGroup> paging)", "testcase": false, "constructor": false}, {"identifier": "appenWhere", "parameters": "(Paging<DasGroup> paging)", "modifiers": "private", "return": "String", "signature": "String appenWhere(Paging<DasGroup> paging)", "full_signature": "private String appenWhere(Paging<DasGroup> paging)", "class_method_signature": "GroupDao.appenWhere(Paging<DasGroup> paging)", "testcase": false, "constructor": false}, {"identifier": "appenCondition", "parameters": "(Paging<DasGroup> paging)", "modifiers": "private", "return": "String", "signature": "String appenCondition(Paging<DasGroup> paging)", "full_signature": "private String appenCondition(Paging<DasGroup> paging)", "class_method_signature": "GroupDao.appenCondition(Paging<DasGroup> paging)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/dao/GroupDao.java"}, "focal_method": {"identifier": "deleteDalGroup", "parameters": "(Long groupId)", "modifiers": "public", "return": "int", "body": "public int deleteDalGroup(Long groupId) throws SQLException {\n        DasGroup group = new DasGroup();\n        group.setId(groupId);\n        return this.getDasClient().deleteByPk(group);\n    }", "signature": "int deleteDalGroup(Long groupId)", "full_signature": "public int deleteDalGroup(Long groupId)", "class_method_signature": "GroupDao.deleteDalGroup(Long groupId)", "testcase": false, "constructor": false, "invocations": ["setId", "deleteByPk", "getDasClient"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}