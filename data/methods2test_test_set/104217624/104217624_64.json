{"test_class": {"identifier": "ValidationRunCleanupServiceTest", "superclass": "extends GenericStorageTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TrustAnchorsFactory factory;", "modifier": "@Autowired\n    private", "type": "TrustAnchorsFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "@Autowired\n    private ValidationRunCleanupService subject;", "modifier": "@Autowired\n    private", "type": "ValidationRunCleanupService", "declarator": "subject", "var_name": "subject"}, {"original_string": "private TrustAnchor testTA1;", "modifier": "private", "type": "TrustAnchor", "declarator": "testTA1", "var_name": "testTA1"}, {"original_string": "private Ref<TrustAnchor> testTARef1;", "modifier": "private", "type": "Ref<TrustAnchor>", "declarator": "testTARef1", "var_name": "testTARef1"}, {"original_string": "private List<RoaPrefix> roaPrefixes1 = Collections.singletonList(RoaPrefix.of(IpRange.parse(\"127.0.0.0/8\"), null, Asn.parse(\"123\"),\n            DateTime.now().toInstant().getMillis(),\n            DateTime.now().plusYears(1).toInstant().getMillis(),\n            TrustAnchorsFactory.nextSerial()));", "modifier": "private", "type": "List<RoaPrefix>", "declarator": "roaPrefixes1 = Collections.singletonList(RoaPrefix.of(IpRange.parse(\"127.0.0.0/8\"), null, Asn.parse(\"123\"),\n            DateTime.now().toInstant().getMillis(),\n            DateTime.now().plusYears(1).toInstant().getMillis(),\n            TrustAnchorsFactory.nextSerial()))", "var_name": "roaPrefixes1"}, {"original_string": "private List<RoaPrefix> roaPrefixes2 = Collections.singletonList(RoaPrefix.of(IpRange.parse(\"128.0.0.0/8\"), null, Asn.parse(\"124\"),\n            DateTime.now().toInstant().getMillis(),\n            DateTime.now().plusYears(1).toInstant().getMillis(),\n            TrustAnchorsFactory.nextSerial()));", "modifier": "private", "type": "List<RoaPrefix>", "declarator": "roaPrefixes2 = Collections.singletonList(RoaPrefix.of(IpRange.parse(\"128.0.0.0/8\"), null, Asn.parse(\"124\"),\n            DateTime.now().toInstant().getMillis(),\n            DateTime.now().plusYears(1).toInstant().getMillis(),\n            TrustAnchorsFactory.nextSerial()))", "var_name": "roaPrefixes2"}], "file": "rpki-validator/src/test/java/net/ripe/rpki/validator3/domain/cleanup/ValidationRunCleanupServiceTest.java"}, "test_case": {"identifier": "shouldCleanUpOrphanedAssociationWithObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCleanUpOrphanedAssociationWithObject() {\n\n        // Create validation run\n        RsyncRepositoryValidationRun orphanValidationRun = wtx(tx -> new RsyncRepositoryValidationRun());\n        wtx0(tx -> getValidationRuns().add(tx, orphanValidationRun));\n\n        // Create RPKI Object\n        RpkiObject associatedAndDeletedObject = new RpkiObject(\n                new X509ResourceCertificateBuilder()\n                        .withResources(IpResourceSet.parse(\"10.0.0.0/8\"))\n                        .withIssuerDN(testTA1.getCertificate().getSubject())\n                        .withSubjectDN(new X500Principal(\"CN=orphan\"))\n                        .withSerial(TrustAnchorsFactory.nextSerial())\n                        .withPublicKey(KEY_PAIR_FACTORY.generate().getPublic())\n                        .withSigningKeyPair(KEY_PAIR_FACTORY.generate())\n                        .withValidityPeriod(new ValidityPeriod(DateTime.now(), DateTime.now().plusYears(1)))\n                        .build()\n        );\n        wtx0(tx -> getRpkiObjects().put(tx, associatedAndDeletedObject));\n\n        // Associate validation run with object\n        wtx0(tx -> getValidationRuns().associate(tx, orphanValidationRun, associatedAndDeletedObject));\n\n        // Delete object, validation run becomes orphan.\n        wtx0(tx -> getRpkiObjects().delete(tx, associatedAndDeletedObject));\n\n        // It should then be deleted.\n        AtomicInteger orphanCount = subject.cleanupValidationRuns().getRight();\n        assertThat(orphanCount.get()).isEqualTo(1);\n    }", "signature": "void shouldCleanUpOrphanedAssociationWithObject()", "full_signature": "@Test public void shouldCleanUpOrphanedAssociationWithObject()", "class_method_signature": "ValidationRunCleanupServiceTest.shouldCleanUpOrphanedAssociationWithObject()", "testcase": true, "constructor": false, "invocations": ["wtx", "wtx0", "add", "getValidationRuns", "build", "withValidityPeriod", "withSigningKeyPair", "withPublicKey", "withSerial", "withSubjectDN", "withIssuerDN", "withResources", "parse", "getSubject", "getCertificate", "nextSerial", "getPublic", "generate", "generate", "now", "plusYears", "now", "wtx0", "put", "getRpkiObjects", "wtx0", "associate", "getValidationRuns", "wtx0", "delete", "getRpkiObjects", "getRight", "cleanupValidationRuns", "isEqualTo", "assertThat", "get"]}, "focal_class": {"identifier": "ValidationRunCleanupService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ValidationRuns validationRuns;", "modifier": "@Autowired\n    private", "type": "ValidationRuns", "declarator": "validationRuns", "var_name": "validationRuns"}, {"original_string": "private final Duration cleanupGraceDuration;", "modifier": "private final", "type": "Duration", "declarator": "cleanupGraceDuration", "var_name": "cleanupGraceDuration"}, {"original_string": "private final Storage storage;", "modifier": "private final", "type": "Storage", "declarator": "storage", "var_name": "storage"}], "methods": [{"identifier": "ValidationRunCleanupService", "parameters": "(@Value(\"${rpki.validator.validation.run.cleanup.grace.duration}\") String cleanupGraceDuration,\n                                       Storage storage)", "modifiers": "public", "return": "", "signature": " ValidationRunCleanupService(@Value(\"${rpki.validator.validation.run.cleanup.grace.duration}\") String cleanupGraceDuration,\n                                       Storage storage)", "full_signature": "public  ValidationRunCleanupService(@Value(\"${rpki.validator.validation.run.cleanup.grace.duration}\") String cleanupGraceDuration,\n                                       Storage storage)", "class_method_signature": "ValidationRunCleanupService.ValidationRunCleanupService(@Value(\"${rpki.validator.validation.run.cleanup.grace.duration}\") String cleanupGraceDuration,\n                                       Storage storage)", "testcase": false, "constructor": true}, {"identifier": "cleanupValidationRuns", "parameters": "()", "modifiers": "public", "return": "Pair<AtomicInteger, AtomicInteger>", "signature": "Pair<AtomicInteger, AtomicInteger> cleanupValidationRuns()", "full_signature": "public Pair<AtomicInteger, AtomicInteger> cleanupValidationRuns()", "class_method_signature": "ValidationRunCleanupService.cleanupValidationRuns()", "testcase": false, "constructor": false}], "file": "rpki-validator/src/main/java/net/ripe/rpki/validator3/domain/cleanup/ValidationRunCleanupService.java"}, "focal_method": {"identifier": "cleanupValidationRuns", "parameters": "()", "modifiers": "public", "return": "Pair<AtomicInteger, AtomicInteger>", "body": "public Pair<AtomicInteger, AtomicInteger> cleanupValidationRuns() {\n        AtomicInteger oldCount = new AtomicInteger();\n        AtomicInteger orphanCount = new AtomicInteger();\n        InstantWithoutNanos completedBefore = InstantWithoutNanos.now().minus(cleanupGraceDuration);\n        Long t = Time.timed(() -> {\n            // Delete all validation runs older than `cleanupGraceDuration` that have a later validation run.\n            oldCount.set(storage.writeTx(tx -> validationRuns.removeOldValidationRuns(tx, completedBefore)));\n            orphanCount.set(storage.writeTx(tx -> validationRuns.removeOrphanValidationRunAssociations(tx)));\n        });\n        log.info(\"Removed {} old validation runs and {} orphans in {}ms\", oldCount.get(), orphanCount.get(), t);\n        storage.gc();\n        return Pair.of(oldCount, orphanCount);\n    }", "signature": "Pair<AtomicInteger, AtomicInteger> cleanupValidationRuns()", "full_signature": "public Pair<AtomicInteger, AtomicInteger> cleanupValidationRuns()", "class_method_signature": "ValidationRunCleanupService.cleanupValidationRuns()", "testcase": false, "constructor": false, "invocations": ["minus", "now", "timed", "set", "writeTx", "removeOldValidationRuns", "set", "writeTx", "removeOrphanValidationRunAssociations", "info", "get", "get", "gc", "of"]}, "repository": {"repo_id": 104217624, "url": "https://github.com/RIPE-NCC/rpki-validator-3", "stars": 32, "created": "9/20/2017 1:15:05 PM +00:00", "updates": "2020-01-27T10:48:38+00:00", "fork": "False", "license": "licensed"}}