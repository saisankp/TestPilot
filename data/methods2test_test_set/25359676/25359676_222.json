{"test_class": {"identifier": "CaseConstraintProcessorTest", "superclass": "extends BaseConstraintProcessorTest<CaseConstraintProcessor>", "interfaces": "", "fields": [{"original_string": "private Address londonAddress = new Address(\"812 Maiden Lane\", \"\", \"London\", \"\", \"\", \"UK\", null);", "modifier": "private", "type": "Address", "declarator": "londonAddress = new Address(\"812 Maiden Lane\", \"\", \"London\", \"\", \"\", \"UK\", null)", "var_name": "londonAddress"}, {"original_string": "private Address noStateAddress = new Address(\"893 Presidential Ave\", \"Suite 800\", \"Washington\", \"\", \"92342\", \"USA\", null);", "modifier": "private", "type": "Address", "declarator": "noStateAddress = new Address(\"893 Presidential Ave\", \"Suite 800\", \"Washington\", \"\", \"92342\", \"USA\", null)", "var_name": "noStateAddress"}], "file": "rice-framework/krad-web-framework/src/test/java/org/kuali/rice/krad/datadictionary/validation/processor/CaseConstraintProcessorTest.java"}, "test_case": {"identifier": "testCaseConstraintInvoked", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCaseConstraintInvoked() {\n\t\tProcessorResult processorResult = processRaw(noStateAddress, \"country\", countryIsUSACaseConstraint);\n\n\t\tList<Constraint> constraints = processorResult.getConstraints();\n\n\t\tAssert.assertNotNull(constraints);\n\t\tAssert.assertEquals(1, constraints.size());\n\n\t\tConstraint constraint = constraints.get(0);\n\n\t\tAssert.assertTrue(constraint instanceof PrerequisiteConstraint);\n\n\t\tPrerequisiteConstraint prerequisiteConstraint = (PrerequisiteConstraint)constraint;\n\n\t\tAssert.assertEquals(\"state\", prerequisiteConstraint.getPropertyName());\n\n\t\tConstraintValidationResult result = processorResult.getFirstConstraintValidationResult();\n\t\tAssert.assertEquals(0, dictionaryValidationResult.getNumberOfWarnings());\n\t\tAssert.assertEquals(0, dictionaryValidationResult.getNumberOfErrors());\n\t\tAssert.assertEquals(ErrorLevel.OK, result.getStatus());\n\t\tAssert.assertEquals(new CaseConstraintProcessor().getName(), result.getConstraintName());\n\t}", "signature": "void testCaseConstraintInvoked()", "full_signature": "@Test public void testCaseConstraintInvoked()", "class_method_signature": "CaseConstraintProcessorTest.testCaseConstraintInvoked()", "testcase": true, "constructor": false, "invocations": ["processRaw", "getConstraints", "assertNotNull", "assertEquals", "size", "get", "assertTrue", "assertEquals", "getPropertyName", "getFirstConstraintValidationResult", "assertEquals", "getNumberOfWarnings", "assertEquals", "getNumberOfErrors", "assertEquals", "getStatus", "assertEquals", "getName", "getConstraintName"]}, "focal_class": {"identifier": "CaseConstraintProcessor", "superclass": "extends MandatoryElementConstraintProcessor<CaseConstraint>", "interfaces": "", "fields": [{"original_string": "private static final String CONSTRAINT_NAME = \"case constraint\";", "modifier": "private static final", "type": "String", "declarator": "CONSTRAINT_NAME = \"case constraint\"", "var_name": "CONSTRAINT_NAME"}], "methods": [{"identifier": "process", "parameters": "(DictionaryValidationResult result, Object value, CaseConstraint caseConstraint,\n            AttributeValueReader attributeValueReader)", "modifiers": "@Override public", "return": "ProcessorResult", "signature": "ProcessorResult process(DictionaryValidationResult result, Object value, CaseConstraint caseConstraint,\n            AttributeValueReader attributeValueReader)", "full_signature": "@Override public ProcessorResult process(DictionaryValidationResult result, Object value, CaseConstraint caseConstraint,\n            AttributeValueReader attributeValueReader)", "class_method_signature": "CaseConstraintProcessor.process(DictionaryValidationResult result, Object value, CaseConstraint caseConstraint,\n            AttributeValueReader attributeValueReader)", "testcase": false, "constructor": false}, {"identifier": "evaluateWhenConstraint", "parameters": "(Object fieldValue, DataType fieldDataType, String operator,\n            CaseConstraint caseConstraint, WhenConstraint wc, AttributeValueReader attributeValueReader,\n            List<Constraint> constraints)", "modifiers": "private", "return": "void", "signature": "void evaluateWhenConstraint(Object fieldValue, DataType fieldDataType, String operator,\n            CaseConstraint caseConstraint, WhenConstraint wc, AttributeValueReader attributeValueReader,\n            List<Constraint> constraints)", "full_signature": "private void evaluateWhenConstraint(Object fieldValue, DataType fieldDataType, String operator,\n            CaseConstraint caseConstraint, WhenConstraint wc, AttributeValueReader attributeValueReader,\n            List<Constraint> constraints)", "class_method_signature": "CaseConstraintProcessor.evaluateWhenConstraint(Object fieldValue, DataType fieldDataType, String operator,\n            CaseConstraint caseConstraint, WhenConstraint wc, AttributeValueReader attributeValueReader,\n            List<Constraint> constraints)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "CaseConstraintProcessor.getName()", "testcase": false, "constructor": false}, {"identifier": "getConstraintType", "parameters": "()", "modifiers": "@Override public", "return": "Class<? extends Constraint>", "signature": "Class<? extends Constraint> getConstraintType()", "full_signature": "@Override public Class<? extends Constraint> getConstraintType()", "class_method_signature": "CaseConstraintProcessor.getConstraintType()", "testcase": false, "constructor": false}, {"identifier": "getChildAttributeValueReader", "parameters": "(String key,\n            AttributeValueReader attributeValueReader)", "modifiers": "private", "return": "AttributeValueReader", "signature": "AttributeValueReader getChildAttributeValueReader(String key,\n            AttributeValueReader attributeValueReader)", "full_signature": "private AttributeValueReader getChildAttributeValueReader(String key,\n            AttributeValueReader attributeValueReader)", "class_method_signature": "CaseConstraintProcessor.getChildAttributeValueReader(String key,\n            AttributeValueReader attributeValueReader)", "testcase": false, "constructor": false}], "file": "rice-framework/krad-web-framework/src/main/java/org/kuali/rice/krad/datadictionary/validation/processor/CaseConstraintProcessor.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getName() {\n        return CONSTRAINT_NAME;\n    }", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "CaseConstraintProcessor.getName()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}