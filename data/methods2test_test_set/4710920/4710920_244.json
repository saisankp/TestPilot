{"test_class": {"identifier": "ServiceInstancesChangedListenerTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/event/listener/ServiceInstancesChangedListenerTest.java"}, "test_case": {"identifier": "testOnEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnEvent() {\n\n    }", "signature": "void testOnEvent()", "full_signature": "@Test public void testOnEvent()", "class_method_signature": "ServiceInstancesChangedListenerTest.testOnEvent()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "ServiceInstancesChangedListener", "superclass": "", "interfaces": "implements ConditionalEventListener<ServiceInstancesChangedEvent>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ServiceInstancesChangedListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ServiceInstancesChangedListener.class)", "var_name": "logger"}, {"original_string": "private final Set<String> serviceNames;", "modifier": "private final", "type": "Set<String>", "declarator": "serviceNames", "var_name": "serviceNames"}, {"original_string": "private final ServiceDiscovery serviceDiscovery;", "modifier": "private final", "type": "ServiceDiscovery", "declarator": "serviceDiscovery", "var_name": "serviceDiscovery"}, {"original_string": "private URL url;", "modifier": "private", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "private Map<String, NotifyListener> listeners;", "modifier": "private", "type": "Map<String, NotifyListener>", "declarator": "listeners", "var_name": "listeners"}, {"original_string": "private Map<String, List<ServiceInstance>> allInstances;", "modifier": "private", "type": "Map<String, List<ServiceInstance>>", "declarator": "allInstances", "var_name": "allInstances"}, {"original_string": "private Map<String, List<URL>> serviceUrls;", "modifier": "private", "type": "Map<String, List<URL>>", "declarator": "serviceUrls", "var_name": "serviceUrls"}, {"original_string": "private Map<String, MetadataInfo> revisionToMetadata;", "modifier": "private", "type": "Map<String, MetadataInfo>", "declarator": "revisionToMetadata", "var_name": "revisionToMetadata"}], "methods": [{"identifier": "ServiceInstancesChangedListener", "parameters": "(Set<String> serviceNames, ServiceDiscovery serviceDiscovery)", "modifiers": "public", "return": "", "signature": " ServiceInstancesChangedListener(Set<String> serviceNames, ServiceDiscovery serviceDiscovery)", "full_signature": "public  ServiceInstancesChangedListener(Set<String> serviceNames, ServiceDiscovery serviceDiscovery)", "class_method_signature": "ServiceInstancesChangedListener.ServiceInstancesChangedListener(Set<String> serviceNames, ServiceDiscovery serviceDiscovery)", "testcase": false, "constructor": true}, {"identifier": "onEvent", "parameters": "(ServiceInstancesChangedEvent event)", "modifiers": "public synchronized", "return": "void", "signature": "void onEvent(ServiceInstancesChangedEvent event)", "full_signature": "public synchronized void onEvent(ServiceInstancesChangedEvent event)", "class_method_signature": "ServiceInstancesChangedListener.onEvent(ServiceInstancesChangedEvent event)", "testcase": false, "constructor": false}, {"identifier": "parseMetadata", "parameters": "(String revision, MetadataInfo metadata, Map<String, Set<String>> localServiceToRevisions)", "modifiers": "private", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> parseMetadata(String revision, MetadataInfo metadata, Map<String, Set<String>> localServiceToRevisions)", "full_signature": "private Map<String, Set<String>> parseMetadata(String revision, MetadataInfo metadata, Map<String, Set<String>> localServiceToRevisions)", "class_method_signature": "ServiceInstancesChangedListener.parseMetadata(String revision, MetadataInfo metadata, Map<String, Set<String>> localServiceToRevisions)", "testcase": false, "constructor": false}, {"identifier": "getMetadataInfo", "parameters": "(ServiceInstance instance)", "modifiers": "private", "return": "MetadataInfo", "signature": "MetadataInfo getMetadataInfo(ServiceInstance instance)", "full_signature": "private MetadataInfo getMetadataInfo(ServiceInstance instance)", "class_method_signature": "ServiceInstancesChangedListener.getMetadataInfo(ServiceInstance instance)", "testcase": false, "constructor": false}, {"identifier": "notifyAddressChanged", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void notifyAddressChanged()", "full_signature": "private void notifyAddressChanged()", "class_method_signature": "ServiceInstancesChangedListener.notifyAddressChanged()", "testcase": false, "constructor": false}, {"identifier": "toUrlsWithEmpty", "parameters": "(List<URL> urls)", "modifiers": "private", "return": "List<URL>", "signature": "List<URL> toUrlsWithEmpty(List<URL> urls)", "full_signature": "private List<URL> toUrlsWithEmpty(List<URL> urls)", "class_method_signature": "ServiceInstancesChangedListener.toUrlsWithEmpty(List<URL> urls)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(String serviceKey, NotifyListener listener)", "modifiers": "public", "return": "void", "signature": "void addListener(String serviceKey, NotifyListener listener)", "full_signature": "public void addListener(String serviceKey, NotifyListener listener)", "class_method_signature": "ServiceInstancesChangedListener.addListener(String serviceKey, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "getUrls", "parameters": "(String serviceKey)", "modifiers": "public", "return": "List<URL>", "signature": "List<URL> getUrls(String serviceKey)", "full_signature": "public List<URL> getUrls(String serviceKey)", "class_method_signature": "ServiceInstancesChangedListener.getUrls(String serviceKey)", "testcase": false, "constructor": false}, {"identifier": "getServiceNames", "parameters": "()", "modifiers": "public final", "return": "Set<String>", "signature": "Set<String> getServiceNames()", "full_signature": "public final Set<String> getServiceNames()", "class_method_signature": "ServiceInstancesChangedListener.getServiceNames()", "testcase": false, "constructor": false}, {"identifier": "setUrl", "parameters": "(URL url)", "modifiers": "public", "return": "void", "signature": "void setUrl(URL url)", "full_signature": "public void setUrl(URL url)", "class_method_signature": "ServiceInstancesChangedListener.setUrl(URL url)", "testcase": false, "constructor": false}, {"identifier": "getUrl", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL getUrl()", "full_signature": "public URL getUrl()", "class_method_signature": "ServiceInstancesChangedListener.getUrl()", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(ServiceInstancesChangedEvent event)", "modifiers": "public final", "return": "boolean", "signature": "boolean accept(ServiceInstancesChangedEvent event)", "full_signature": "public final boolean accept(ServiceInstancesChangedEvent event)", "class_method_signature": "ServiceInstancesChangedListener.accept(ServiceInstancesChangedEvent event)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ServiceInstancesChangedListener.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ServiceInstancesChangedListener.hashCode()", "testcase": false, "constructor": false}], "file": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/event/listener/ServiceInstancesChangedListener.java"}, "focal_method": {"identifier": "onEvent", "parameters": "(ServiceInstancesChangedEvent event)", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void onEvent(ServiceInstancesChangedEvent event) {\n        logger.info(\"Received instance notification, serviceName: \" + event.getServiceName() + \", instances: \" + event.getServiceInstances().size());\n        String appName = event.getServiceName();\n        allInstances.put(appName, event.getServiceInstances());\n\n        Map<String, List<ServiceInstance>> revisionToInstances = new HashMap<>();\n        Map<String, Set<String>> localServiceToRevisions = new HashMap<>();\n        Map<Set<String>, List<URL>> revisionsToUrls = new HashMap();\n        for (Map.Entry<String, List<ServiceInstance>> entry : allInstances.entrySet()) {\n            List<ServiceInstance> instances = entry.getValue();\n            for (ServiceInstance instance : instances) {\n                String revision = getExportedServicesRevision(instance);\n                if (DEFAULT_REVISION.equals(revision)) {\n                    logger.info(\"Find instance without valid service metadata: \" + instance.getAddress());\n                    continue;\n                }\n                List<ServiceInstance> subInstances = revisionToInstances.computeIfAbsent(revision, r -> new LinkedList<>());\n                subInstances.add(instance);\n\n                MetadataInfo metadata = revisionToMetadata.get(revision);\n                if (metadata == null) {\n                    metadata = getMetadataInfo(instance);\n                    logger.info(\"MetadataInfo for instance \" + instance.getAddress() + \"?revision=\" + revision + \" is \" + metadata);\n                    if (metadata != null) {\n                        revisionToMetadata.put(revision, getMetadataInfo(instance));\n                    } else {\n\n                    }\n                }\n\n                if (metadata != null) {\n                    parseMetadata(revision, metadata, localServiceToRevisions);\n                    ((DefaultServiceInstance) instance).setServiceMetadata(metadata);\n                }\n//                else {\n//                    logger.error(\"Failed to load service metadata for instance \" + instance);\n//                    Set<String> set = localServiceToRevisions.computeIfAbsent(url.getServiceKey(), k -> new TreeSet<>());\n//                    set.add(revision);\n//                }\n\n                localServiceToRevisions.forEach((serviceKey, revisions) -> {\n                    List<URL> urls = revisionsToUrls.get(revisions);\n                    if (urls != null) {\n                        serviceUrls.put(serviceKey, urls);\n                    } else {\n                        urls = new ArrayList<>();\n                        for (String r : revisions) {\n                            for (ServiceInstance i : revisionToInstances.get(r)) {\n                                urls.add(i.toURL());\n                            }\n                        }\n                        revisionsToUrls.put(revisions, urls);\n                        serviceUrls.put(serviceKey, urls);\n                    }\n                });\n            }\n        }\n\n        this.notifyAddressChanged();\n    }", "signature": "void onEvent(ServiceInstancesChangedEvent event)", "full_signature": "public synchronized void onEvent(ServiceInstancesChangedEvent event)", "class_method_signature": "ServiceInstancesChangedListener.onEvent(ServiceInstancesChangedEvent event)", "testcase": false, "constructor": false, "invocations": ["info", "getServiceName", "size", "getServiceInstances", "getServiceName", "put", "getServiceInstances", "entrySet", "getValue", "getExportedServicesRevision", "equals", "info", "getAddress", "computeIfAbsent", "add", "get", "getMetadataInfo", "info", "getAddress", "put", "getMetadataInfo", "parseMetadata", "setServiceMetadata", "forEach", "get", "put", "get", "add", "toURL", "put", "put", "notifyAddressChanged"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}