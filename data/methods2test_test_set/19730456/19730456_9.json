{"test_class": {"identifier": "ECIESCoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/crypto/ECIESCoderTest.java"}, "test_case": {"identifier": "test1", "parameters": "()", "modifiers": "@Test // decrypt cpp data public", "return": "void", "body": "@Test // decrypt cpp data\n    public void test1(){\n        BigInteger privKey = new BigInteger(\"5e173f6ac3c669587538e7727cf19b782a4f2fda07c1eaa662c593e5e85e3051\", 16);\n        byte[] cipher = Hex.decode(\"049934a7b2d7f9af8fd9db941d9da281ac9381b5740e1f64f7092f3588d4f87f5ce55191a6653e5e80c1c5dd538169aa123e70dc6ffc5af1827e546c0e958e42dad355bcc1fcb9cdf2cf47ff524d2ad98cbf275e661bf4cf00960e74b5956b799771334f426df007350b46049adb21a6e78ab1408d5e6ccde6fb5e69f0f4c92bb9c725c02f99fa72b9cdc8dd53cff089e0e73317f61cc5abf6152513cb7d833f09d2851603919bf0fbe44d79a09245c6e8338eb502083dc84b846f2fee1cc310d2cc8b1b9334728f97220bb799376233e113\");\n\n        byte[] payload = new byte[0];\n        try {\n            payload = ECIESCoder.decrypt(privKey, cipher);\n        } catch (Throwable e) {e.printStackTrace();}\n\n        Assert.assertEquals(\"802b052f8b066640bba94a4fc39d63815c377fced6fcb84d27f791c9921ddf3e9bf0108e298f490812847109cbd778fae393e80323fd643209841a3b7f110397f37ec61d84cea03dcc5e8385db93248584e8af4b4d1c832d8c7453c0089687a700\",\n                Hex.toHexString(payload));\n    }", "signature": "void test1()", "full_signature": "@Test // decrypt cpp data public void test1()", "class_method_signature": "ECIESCoderTest.test1()", "testcase": true, "constructor": false, "invocations": ["decode", "decrypt", "printStackTrace", "assertEquals", "toHexString"]}, "focal_class": {"identifier": "ECIESCoder", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int KEY_SIZE = 128;", "modifier": "public static final", "type": "int", "declarator": "KEY_SIZE = 128", "var_name": "KEY_SIZE"}], "methods": [{"identifier": "decrypt", "parameters": "(BigInteger privKey, byte[] cipher)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decrypt(BigInteger privKey, byte[] cipher)", "full_signature": "public static byte[] decrypt(BigInteger privKey, byte[] cipher)", "class_method_signature": "ECIESCoder.decrypt(BigInteger privKey, byte[] cipher)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(BigInteger privKey, byte[] cipher, byte[] macData)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decrypt(BigInteger privKey, byte[] cipher, byte[] macData)", "full_signature": "public static byte[] decrypt(BigInteger privKey, byte[] cipher, byte[] macData)", "class_method_signature": "ECIESCoder.decrypt(BigInteger privKey, byte[] cipher, byte[] macData)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(ECPoint ephem, BigInteger prv, byte[] IV, byte[] cipher, byte[] macData)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decrypt(ECPoint ephem, BigInteger prv, byte[] IV, byte[] cipher, byte[] macData)", "full_signature": "public static byte[] decrypt(ECPoint ephem, BigInteger prv, byte[] IV, byte[] cipher, byte[] macData)", "class_method_signature": "ECIESCoder.decrypt(ECPoint ephem, BigInteger prv, byte[] IV, byte[] cipher, byte[] macData)", "testcase": false, "constructor": false}, {"identifier": "decryptSimple", "parameters": "(BigInteger privKey, byte[] cipher)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decryptSimple(BigInteger privKey, byte[] cipher)", "full_signature": "public static byte[] decryptSimple(BigInteger privKey, byte[] cipher)", "class_method_signature": "ECIESCoder.decryptSimple(BigInteger privKey, byte[] cipher)", "testcase": false, "constructor": false}, {"identifier": "encrypt", "parameters": "(ECPoint toPub, byte[] plaintext)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encrypt(ECPoint toPub, byte[] plaintext)", "full_signature": "public static byte[] encrypt(ECPoint toPub, byte[] plaintext)", "class_method_signature": "ECIESCoder.encrypt(ECPoint toPub, byte[] plaintext)", "testcase": false, "constructor": false}, {"identifier": "encrypt", "parameters": "(ECPoint toPub, byte[] plaintext, byte[] macData)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encrypt(ECPoint toPub, byte[] plaintext, byte[] macData)", "full_signature": "public static byte[] encrypt(ECPoint toPub, byte[] plaintext, byte[] macData)", "class_method_signature": "ECIESCoder.encrypt(ECPoint toPub, byte[] plaintext, byte[] macData)", "testcase": false, "constructor": false}, {"identifier": "encryptSimple", "parameters": "(ECPoint pub, byte[] plaintext)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encryptSimple(ECPoint pub, byte[] plaintext)", "full_signature": "public static byte[] encryptSimple(ECPoint pub, byte[] plaintext)", "class_method_signature": "ECIESCoder.encryptSimple(ECPoint pub, byte[] plaintext)", "testcase": false, "constructor": false}, {"identifier": "makeIESEngine", "parameters": "(boolean isEncrypt, ECPoint pub, BigInteger prv, byte[] IV)", "modifiers": "private static", "return": "EthereumIESEngine", "signature": "EthereumIESEngine makeIESEngine(boolean isEncrypt, ECPoint pub, BigInteger prv, byte[] IV)", "full_signature": "private static EthereumIESEngine makeIESEngine(boolean isEncrypt, ECPoint pub, BigInteger prv, byte[] IV)", "class_method_signature": "ECIESCoder.makeIESEngine(boolean isEncrypt, ECPoint pub, BigInteger prv, byte[] IV)", "testcase": false, "constructor": false}, {"identifier": "getOverhead", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getOverhead()", "full_signature": "public static int getOverhead()", "class_method_signature": "ECIESCoder.getOverhead()", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/crypto/ECIESCoder.java"}, "focal_method": {"identifier": "decrypt", "parameters": "(BigInteger privKey, byte[] cipher)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] decrypt(BigInteger privKey, byte[] cipher) throws IOException, InvalidCipherTextException {\n        return decrypt(privKey, cipher, null);\n    }", "signature": "byte[] decrypt(BigInteger privKey, byte[] cipher)", "full_signature": "public static byte[] decrypt(BigInteger privKey, byte[] cipher)", "class_method_signature": "ECIESCoder.decrypt(BigInteger privKey, byte[] cipher)", "testcase": false, "constructor": false, "invocations": ["decrypt"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}