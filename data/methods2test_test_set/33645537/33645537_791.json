{"test_class": {"identifier": "BlockingOperatorMostRecentTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/internal/operators/BlockingOperatorMostRecentTest.java"}, "test_case": {"identifier": "testSingleSourceManyIterators", "parameters": "()", "modifiers": "@Test(timeout = 1000) public", "return": "void", "body": "@Test(timeout = 1000)\n    public void testSingleSourceManyIterators() {\n        TestScheduler scheduler = new TestScheduler();\n        BlockingObservable<Long> source = Observable.interval(1, TimeUnit.SECONDS, scheduler).take(10).toBlocking();\n\n        Iterable<Long> iter = source.mostRecent(-1L);\n\n        for (int j = 0; j < 3; j++) {\n            Iterator<Long> it = iter.iterator();\n\n            Assert.assertEquals(Long.valueOf(-1), it.next());\n\n            for (int i = 0; i < 9; i++) {\n                scheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n                Assert.assertEquals(true, it.hasNext());\n                Assert.assertEquals(Long.valueOf(i), it.next());\n            }\n            scheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n            Assert.assertEquals(false, it.hasNext());\n        }\n\n    }", "signature": "void testSingleSourceManyIterators()", "full_signature": "@Test(timeout = 1000) public void testSingleSourceManyIterators()", "class_method_signature": "BlockingOperatorMostRecentTest.testSingleSourceManyIterators()", "testcase": true, "constructor": false, "invocations": ["toBlocking", "take", "interval", "mostRecent", "iterator", "assertEquals", "valueOf", "next", "advanceTimeBy", "assertEquals", "hasNext", "assertEquals", "valueOf", "next", "advanceTimeBy", "assertEquals", "hasNext"]}, "focal_class": {"identifier": "BlockingOperatorMostRecent", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "BlockingOperatorMostRecent", "parameters": "()", "modifiers": "private", "return": "", "signature": " BlockingOperatorMostRecent()", "full_signature": "private  BlockingOperatorMostRecent()", "class_method_signature": "BlockingOperatorMostRecent.BlockingOperatorMostRecent()", "testcase": false, "constructor": true}, {"identifier": "mostRecent", "parameters": "(final Observable<? extends T> source, final T initialValue)", "modifiers": "public static", "return": "Iterable<T>", "signature": "Iterable<T> mostRecent(final Observable<? extends T> source, final T initialValue)", "full_signature": "public static Iterable<T> mostRecent(final Observable<? extends T> source, final T initialValue)", "class_method_signature": "BlockingOperatorMostRecent.mostRecent(final Observable<? extends T> source, final T initialValue)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/internal/operators/BlockingOperatorMostRecent.java"}, "focal_method": {"identifier": "mostRecent", "parameters": "(final Observable<? extends T> source, final T initialValue)", "modifiers": "public static", "return": "Iterable<T>", "body": "public static <T> Iterable<T> mostRecent(final Observable<? extends T> source, final T initialValue) {\n        return new Iterable<T>() {\n            @Override\n            public Iterator<T> iterator() {\n                MostRecentObserver<T> mostRecentObserver = new MostRecentObserver<T>(initialValue);\n\n                /**\n                 * Subscribe instead of unsafeSubscribe since this is the final subscribe in the chain\n                 * since it is for BlockingObservable.\n                 */\n                source.subscribe(mostRecentObserver);\n\n                return mostRecentObserver.getIterable();\n            }\n        };\n    }", "signature": "Iterable<T> mostRecent(final Observable<? extends T> source, final T initialValue)", "full_signature": "public static Iterable<T> mostRecent(final Observable<? extends T> source, final T initialValue)", "class_method_signature": "BlockingOperatorMostRecent.mostRecent(final Observable<? extends T> source, final T initialValue)", "testcase": false, "constructor": false, "invocations": ["subscribe", "getIterable"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}