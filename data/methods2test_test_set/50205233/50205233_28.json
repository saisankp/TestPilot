{"test_class": {"identifier": "SourceInfoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String REPLICA_SET_NAME = \"myReplicaSet\";", "modifier": "private static", "type": "String", "declarator": "REPLICA_SET_NAME = \"myReplicaSet\"", "var_name": "REPLICA_SET_NAME"}, {"original_string": "private SourceInfo source;", "modifier": "private", "type": "SourceInfo", "declarator": "source", "var_name": "source"}, {"original_string": "private Map<String, String> partition;", "modifier": "private", "type": "Map<String, String>", "declarator": "partition", "var_name": "partition"}], "file": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/SourceInfoTest.java"}, "test_case": {"identifier": "connectorIsPresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void connectorIsPresent() {\n        final Document event = new Document().append(\"ts\", new BsonTimestamp(100, 2))\n                .append(\"h\", Long.valueOf(1987654321))\n                .append(\"ns\", \"dbA.collectA\");\n        source.opLogEvent(\"rs\", event);\n        assertThat(source.struct().getString(SourceInfo.DEBEZIUM_CONNECTOR_KEY)).isEqualTo(Module.name());\n    }", "signature": "void connectorIsPresent()", "full_signature": "@Test public void connectorIsPresent()", "class_method_signature": "SourceInfoTest.connectorIsPresent()", "testcase": true, "constructor": false, "invocations": ["append", "append", "append", "valueOf", "opLogEvent", "isEqualTo", "assertThat", "getString", "struct", "name"]}, "focal_class": {"identifier": "SourceInfo", "superclass": "extends BaseSourceInfo", "interfaces": "", "fields": [{"original_string": "public static final int SCHEMA_VERSION = 1;", "modifier": "public static final", "type": "int", "declarator": "SCHEMA_VERSION = 1", "var_name": "SCHEMA_VERSION"}, {"original_string": "public static final String SERVER_ID_KEY = \"server_id\";", "modifier": "public static final", "type": "String", "declarator": "SERVER_ID_KEY = \"server_id\"", "var_name": "SERVER_ID_KEY"}, {"original_string": "public static final String REPLICA_SET_NAME = \"rs\";", "modifier": "public static final", "type": "String", "declarator": "REPLICA_SET_NAME = \"rs\"", "var_name": "REPLICA_SET_NAME"}, {"original_string": "public static final String NAMESPACE = \"ns\";", "modifier": "public static final", "type": "String", "declarator": "NAMESPACE = \"ns\"", "var_name": "NAMESPACE"}, {"original_string": "public static final String TIMESTAMP = \"sec\";", "modifier": "public static final", "type": "String", "declarator": "TIMESTAMP = \"sec\"", "var_name": "TIMESTAMP"}, {"original_string": "public static final String ORDER = \"ord\";", "modifier": "public static final", "type": "String", "declarator": "ORDER = \"ord\"", "var_name": "ORDER"}, {"original_string": "public static final String OPERATION_ID = \"h\";", "modifier": "public static final", "type": "String", "declarator": "OPERATION_ID = \"h\"", "var_name": "OPERATION_ID"}, {"original_string": "public static final String TX_ORD = \"tord\";", "modifier": "public static final", "type": "String", "declarator": "TX_ORD = \"tord\"", "var_name": "TX_ORD"}, {"original_string": "public static final String SESSION_TXN_ID = \"stxnid\";", "modifier": "public static final", "type": "String", "declarator": "SESSION_TXN_ID = \"stxnid\"", "var_name": "SESSION_TXN_ID"}, {"original_string": "public static final String INITIAL_SYNC = \"initsync\";", "modifier": "public static final", "type": "String", "declarator": "INITIAL_SYNC = \"initsync\"", "var_name": "INITIAL_SYNC"}, {"original_string": "public static final String COLLECTION = \"collection\";", "modifier": "public static final", "type": "String", "declarator": "COLLECTION = \"collection\"", "var_name": "COLLECTION"}, {"original_string": "private static final BsonTimestamp INITIAL_TIMESTAMP = new BsonTimestamp();", "modifier": "private static final", "type": "BsonTimestamp", "declarator": "INITIAL_TIMESTAMP = new BsonTimestamp()", "var_name": "INITIAL_TIMESTAMP"}, {"original_string": "private static final Position INITIAL_POSITION = new Position(INITIAL_TIMESTAMP, null, 0, null);", "modifier": "private static final", "type": "Position", "declarator": "INITIAL_POSITION = new Position(INITIAL_TIMESTAMP, null, 0, null)", "var_name": "INITIAL_POSITION"}, {"original_string": "private final ConcurrentMap<String, Map<String, String>> sourcePartitionsByReplicaSetName = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<String, Map<String, String>>", "declarator": "sourcePartitionsByReplicaSetName = new ConcurrentHashMap<>()", "var_name": "sourcePartitionsByReplicaSetName"}, {"original_string": "private final ConcurrentMap<String, Position> positionsByReplicaSetName = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<String, Position>", "declarator": "positionsByReplicaSetName = new ConcurrentHashMap<>()", "var_name": "positionsByReplicaSetName"}, {"original_string": "private final Set<String> initialSyncReplicaSets = Collections.newSetFromMap(new ConcurrentHashMap<>());", "modifier": "private final", "type": "Set<String>", "declarator": "initialSyncReplicaSets = Collections.newSetFromMap(new ConcurrentHashMap<>())", "var_name": "initialSyncReplicaSets"}, {"original_string": "private String replicaSetName;", "modifier": "private", "type": "String", "declarator": "replicaSetName", "var_name": "replicaSetName"}, {"original_string": "private CollectionId collectionId;", "modifier": "private", "type": "CollectionId", "declarator": "collectionId", "var_name": "collectionId"}, {"original_string": "private Position position;", "modifier": "private", "type": "Position", "declarator": "position", "var_name": "position"}], "methods": [{"identifier": "replicaSetNameForPartition", "parameters": "(Map<String, ?> partition)", "modifiers": "public static", "return": "String", "signature": "String replicaSetNameForPartition(Map<String, ?> partition)", "full_signature": "public static String replicaSetNameForPartition(Map<String, ?> partition)", "class_method_signature": "SourceInfo.replicaSetNameForPartition(Map<String, ?> partition)", "testcase": false, "constructor": false}, {"identifier": "SourceInfo", "parameters": "(MongoDbConnectorConfig connectorConfig)", "modifiers": "public", "return": "", "signature": " SourceInfo(MongoDbConnectorConfig connectorConfig)", "full_signature": "public  SourceInfo(MongoDbConnectorConfig connectorConfig)", "class_method_signature": "SourceInfo.SourceInfo(MongoDbConnectorConfig connectorConfig)", "testcase": false, "constructor": true}, {"identifier": "collectionId", "parameters": "()", "modifiers": "", "return": "CollectionId", "signature": "CollectionId collectionId()", "full_signature": " CollectionId collectionId()", "class_method_signature": "SourceInfo.collectionId()", "testcase": false, "constructor": false}, {"identifier": "position", "parameters": "()", "modifiers": "", "return": "Position", "signature": "Position position()", "full_signature": " Position position()", "class_method_signature": "SourceInfo.position()", "testcase": false, "constructor": false}, {"identifier": "partition", "parameters": "(String replicaSetName)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> partition(String replicaSetName)", "full_signature": "public Map<String, String> partition(String replicaSetName)", "class_method_signature": "SourceInfo.partition(String replicaSetName)", "testcase": false, "constructor": false}, {"identifier": "lastOffsetTimestamp", "parameters": "(String replicaSetName)", "modifiers": "public", "return": "BsonTimestamp", "signature": "BsonTimestamp lastOffsetTimestamp(String replicaSetName)", "full_signature": "public BsonTimestamp lastOffsetTimestamp(String replicaSetName)", "class_method_signature": "SourceInfo.lastOffsetTimestamp(String replicaSetName)", "testcase": false, "constructor": false}, {"identifier": "lastOffsetTxOrder", "parameters": "(String replicaSetName)", "modifiers": "public", "return": "OptionalLong", "signature": "OptionalLong lastOffsetTxOrder(String replicaSetName)", "full_signature": "public OptionalLong lastOffsetTxOrder(String replicaSetName)", "class_method_signature": "SourceInfo.lastOffsetTxOrder(String replicaSetName)", "testcase": false, "constructor": false}, {"identifier": "lastOffset", "parameters": "(String replicaSetName)", "modifiers": "public", "return": "Map<String, ?>", "signature": "Map<String, ?> lastOffset(String replicaSetName)", "full_signature": "public Map<String, ?> lastOffset(String replicaSetName)", "class_method_signature": "SourceInfo.lastOffset(String replicaSetName)", "testcase": false, "constructor": false}, {"identifier": "collectionEvent", "parameters": "(String replicaSetName, CollectionId collectionId)", "modifiers": "public", "return": "void", "signature": "void collectionEvent(String replicaSetName, CollectionId collectionId)", "full_signature": "public void collectionEvent(String replicaSetName, CollectionId collectionId)", "class_method_signature": "SourceInfo.collectionEvent(String replicaSetName, CollectionId collectionId)", "testcase": false, "constructor": false}, {"identifier": "opLogEvent", "parameters": "(String replicaSetName, Document oplogEvent, Document masterEvent, long orderInTx)", "modifiers": "public", "return": "void", "signature": "void opLogEvent(String replicaSetName, Document oplogEvent, Document masterEvent, long orderInTx)", "full_signature": "public void opLogEvent(String replicaSetName, Document oplogEvent, Document masterEvent, long orderInTx)", "class_method_signature": "SourceInfo.opLogEvent(String replicaSetName, Document oplogEvent, Document masterEvent, long orderInTx)", "testcase": false, "constructor": false}, {"identifier": "opLogEvent", "parameters": "(String replicaSetName, Document oplogEvent)", "modifiers": "public", "return": "void", "signature": "void opLogEvent(String replicaSetName, Document oplogEvent)", "full_signature": "public void opLogEvent(String replicaSetName, Document oplogEvent)", "class_method_signature": "SourceInfo.opLogEvent(String replicaSetName, Document oplogEvent)", "testcase": false, "constructor": false}, {"identifier": "extractEventTimestamp", "parameters": "(Document oplogEvent)", "modifiers": "protected static", "return": "BsonTimestamp", "signature": "BsonTimestamp extractEventTimestamp(Document oplogEvent)", "full_signature": "protected static BsonTimestamp extractEventTimestamp(Document oplogEvent)", "class_method_signature": "SourceInfo.extractEventTimestamp(Document oplogEvent)", "testcase": false, "constructor": false}, {"identifier": "extractSessionTxnId", "parameters": "(Document oplogEvent)", "modifiers": "protected static", "return": "String", "signature": "String extractSessionTxnId(Document oplogEvent)", "full_signature": "protected static String extractSessionTxnId(Document oplogEvent)", "class_method_signature": "SourceInfo.extractSessionTxnId(Document oplogEvent)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(String replicaSetName, CollectionId collectionId, Position position)", "modifiers": "private", "return": "void", "signature": "void onEvent(String replicaSetName, CollectionId collectionId, Position position)", "full_signature": "private void onEvent(String replicaSetName, CollectionId collectionId, Position position)", "class_method_signature": "SourceInfo.onEvent(String replicaSetName, CollectionId collectionId, Position position)", "testcase": false, "constructor": false}, {"identifier": "hasOffset", "parameters": "(String replicaSetName)", "modifiers": "public", "return": "boolean", "signature": "boolean hasOffset(String replicaSetName)", "full_signature": "public boolean hasOffset(String replicaSetName)", "class_method_signature": "SourceInfo.hasOffset(String replicaSetName)", "testcase": false, "constructor": false}, {"identifier": "setOffsetFor", "parameters": "(String replicaSetName, Map<String, ?> sourceOffset)", "modifiers": "public", "return": "boolean", "signature": "boolean setOffsetFor(String replicaSetName, Map<String, ?> sourceOffset)", "full_signature": "public boolean setOffsetFor(String replicaSetName, Map<String, ?> sourceOffset)", "class_method_signature": "SourceInfo.setOffsetFor(String replicaSetName, Map<String, ?> sourceOffset)", "testcase": false, "constructor": false}, {"identifier": "setOffsetFor", "parameters": "(Map<String, String> partition, Map<String, ?> sourceOffset)", "modifiers": "public", "return": "boolean", "signature": "boolean setOffsetFor(Map<String, String> partition, Map<String, ?> sourceOffset)", "full_signature": "public boolean setOffsetFor(Map<String, String> partition, Map<String, ?> sourceOffset)", "class_method_signature": "SourceInfo.setOffsetFor(Map<String, String> partition, Map<String, ?> sourceOffset)", "testcase": false, "constructor": false}, {"identifier": "startInitialSync", "parameters": "(String replicaSetName)", "modifiers": "public", "return": "void", "signature": "void startInitialSync(String replicaSetName)", "full_signature": "public void startInitialSync(String replicaSetName)", "class_method_signature": "SourceInfo.startInitialSync(String replicaSetName)", "testcase": false, "constructor": false}, {"identifier": "stopInitialSync", "parameters": "(String replicaSetName)", "modifiers": "public", "return": "void", "signature": "void stopInitialSync(String replicaSetName)", "full_signature": "public void stopInitialSync(String replicaSetName)", "class_method_signature": "SourceInfo.stopInitialSync(String replicaSetName)", "testcase": false, "constructor": false}, {"identifier": "isInitialSyncOngoing", "parameters": "(String replicaSetName)", "modifiers": "public", "return": "boolean", "signature": "boolean isInitialSyncOngoing(String replicaSetName)", "full_signature": "public boolean isInitialSyncOngoing(String replicaSetName)", "class_method_signature": "SourceInfo.isInitialSyncOngoing(String replicaSetName)", "testcase": false, "constructor": false}, {"identifier": "isSnapshotRunning", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSnapshotRunning()", "full_signature": "public boolean isSnapshotRunning()", "class_method_signature": "SourceInfo.isSnapshotRunning()", "testcase": false, "constructor": false}, {"identifier": "intOffsetValue", "parameters": "(Map<String, ?> values, String key)", "modifiers": "private static", "return": "int", "signature": "int intOffsetValue(Map<String, ?> values, String key)", "full_signature": "private static int intOffsetValue(Map<String, ?> values, String key)", "class_method_signature": "SourceInfo.intOffsetValue(Map<String, ?> values, String key)", "testcase": false, "constructor": false}, {"identifier": "longOffsetValue", "parameters": "(Map<String, ?> values, String key)", "modifiers": "private static", "return": "long", "signature": "long longOffsetValue(Map<String, ?> values, String key)", "full_signature": "private static long longOffsetValue(Map<String, ?> values, String key)", "class_method_signature": "SourceInfo.longOffsetValue(Map<String, ?> values, String key)", "testcase": false, "constructor": false}, {"identifier": "stringOffsetValue", "parameters": "(Map<String, ?> values, String key)", "modifiers": "private static", "return": "String", "signature": "String stringOffsetValue(Map<String, ?> values, String key)", "full_signature": "private static String stringOffsetValue(Map<String, ?> values, String key)", "class_method_signature": "SourceInfo.stringOffsetValue(Map<String, ?> values, String key)", "testcase": false, "constructor": false}, {"identifier": "booleanOffsetValue", "parameters": "(Map<String, ?> values, String key)", "modifiers": "private static", "return": "boolean", "signature": "boolean booleanOffsetValue(Map<String, ?> values, String key)", "full_signature": "private static boolean booleanOffsetValue(Map<String, ?> values, String key)", "class_method_signature": "SourceInfo.booleanOffsetValue(Map<String, ?> values, String key)", "testcase": false, "constructor": false}, {"identifier": "timestamp", "parameters": "()", "modifiers": "@Override protected", "return": "Instant", "signature": "Instant timestamp()", "full_signature": "@Override protected Instant timestamp()", "class_method_signature": "SourceInfo.timestamp()", "testcase": false, "constructor": false}, {"identifier": "snapshot", "parameters": "()", "modifiers": "@Override protected", "return": "SnapshotRecord", "signature": "SnapshotRecord snapshot()", "full_signature": "@Override protected SnapshotRecord snapshot()", "class_method_signature": "SourceInfo.snapshot()", "testcase": false, "constructor": false}, {"identifier": "database", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String database()", "full_signature": "@Override protected String database()", "class_method_signature": "SourceInfo.database()", "testcase": false, "constructor": false}, {"identifier": "replicaSetName", "parameters": "()", "modifiers": "", "return": "String", "signature": "String replicaSetName()", "full_signature": " String replicaSetName()", "class_method_signature": "SourceInfo.replicaSetName()", "testcase": false, "constructor": false}, {"identifier": "transactionPosition", "parameters": "()", "modifiers": "protected", "return": "OptionalLong", "signature": "OptionalLong transactionPosition()", "full_signature": "protected OptionalLong transactionPosition()", "class_method_signature": "SourceInfo.transactionPosition()", "testcase": false, "constructor": false}], "file": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/SourceInfo.java"}, "focal_method": {"identifier": "opLogEvent", "parameters": "(String replicaSetName, Document oplogEvent, Document masterEvent, long orderInTx)", "modifiers": "public", "return": "void", "body": "public void opLogEvent(String replicaSetName, Document oplogEvent, Document masterEvent, long orderInTx) {\n        Position position = INITIAL_POSITION;\n        String namespace = \"\";\n        if (oplogEvent != null) {\n            BsonTimestamp ts = extractEventTimestamp(masterEvent);\n            Long opId = masterEvent.getLong(\"h\");\n            String sessionTxnId = extractSessionTxnId(masterEvent);\n            position = new Position(ts, opId, orderInTx, sessionTxnId);\n            namespace = oplogEvent.getString(\"ns\");\n        }\n        positionsByReplicaSetName.put(replicaSetName, position);\n\n        onEvent(replicaSetName, CollectionId.parse(replicaSetName, namespace), position);\n    }", "signature": "void opLogEvent(String replicaSetName, Document oplogEvent, Document masterEvent, long orderInTx)", "full_signature": "public void opLogEvent(String replicaSetName, Document oplogEvent, Document masterEvent, long orderInTx)", "class_method_signature": "SourceInfo.opLogEvent(String replicaSetName, Document oplogEvent, Document masterEvent, long orderInTx)", "testcase": false, "constructor": false, "invocations": ["extractEventTimestamp", "getLong", "extractSessionTxnId", "getString", "put", "onEvent", "parse"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}