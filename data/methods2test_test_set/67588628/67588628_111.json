{"test_class": {"identifier": "DefaultVertexTraversalTest", "superclass": "extends AbstractTraversalTest", "interfaces": "", "fields": [], "file": "artemis-graph/src/test/java/org/jnosql/artemis/graph/DefaultVertexTraversalTest.java"}, "test_case": {"identifier": "shouldDefineLimit2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldDefineLimit2() {\n        List<Person> people = graphTemplate.getTraversalVertex(otavio.getId(), poliana.getId(), paulo.getId()).\n                <Person>next(2)\n                .collect(toList());\n\n        assertEquals(2, people.size());\n        assertThat(people, containsInAnyOrder(otavio, poliana));\n    }", "signature": "void shouldDefineLimit2()", "full_signature": "@Test public void shouldDefineLimit2()", "class_method_signature": "DefaultVertexTraversalTest.shouldDefineLimit2()", "testcase": true, "constructor": false, "invocations": ["collect", "next", "getTraversalVertex", "getId", "getId", "getId", "toList", "assertEquals", "size", "assertThat", "containsInAnyOrder"]}, "focal_class": {"identifier": "DefaultVertexTraversal", "superclass": "extends AbstractVertexTraversal", "interfaces": "implements VertexTraversal", "fields": [{"original_string": "private static final Predicate<String> IS_EMPTY = String::isEmpty;", "modifier": "private static final", "type": "Predicate<String>", "declarator": "IS_EMPTY = String::isEmpty", "var_name": "IS_EMPTY"}, {"original_string": "private static final Predicate<String> NOT_EMPTY = IS_EMPTY.negate();", "modifier": "private static final", "type": "Predicate<String>", "declarator": "NOT_EMPTY = IS_EMPTY.negate()", "var_name": "NOT_EMPTY"}], "methods": [{"identifier": "DefaultVertexTraversal", "parameters": "(Supplier<GraphTraversal<?, ?>> supplier,\n                           Function<GraphTraversal<?, ?>, GraphTraversal<Vertex, Vertex>> flow,\n                           GraphConverter converter)", "modifiers": "", "return": "", "signature": " DefaultVertexTraversal(Supplier<GraphTraversal<?, ?>> supplier,\n                           Function<GraphTraversal<?, ?>, GraphTraversal<Vertex, Vertex>> flow,\n                           GraphConverter converter)", "full_signature": "  DefaultVertexTraversal(Supplier<GraphTraversal<?, ?>> supplier,\n                           Function<GraphTraversal<?, ?>, GraphTraversal<Vertex, Vertex>> flow,\n                           GraphConverter converter)", "class_method_signature": "DefaultVertexTraversal.DefaultVertexTraversal(Supplier<GraphTraversal<?, ?>> supplier,\n                           Function<GraphTraversal<?, ?>, GraphTraversal<Vertex, Vertex>> flow,\n                           GraphConverter converter)", "testcase": false, "constructor": true}, {"identifier": "has", "parameters": "(String propertyKey, Object value)", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal has(String propertyKey, Object value)", "full_signature": "@Override public VertexTraversal has(String propertyKey, Object value)", "class_method_signature": "DefaultVertexTraversal.has(String propertyKey, Object value)", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(String propertyKey)", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal has(String propertyKey)", "full_signature": "@Override public VertexTraversal has(String propertyKey)", "class_method_signature": "DefaultVertexTraversal.has(String propertyKey)", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(String propertyKey, P<?> predicate)", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal has(String propertyKey, P<?> predicate)", "full_signature": "@Override public VertexTraversal has(String propertyKey, P<?> predicate)", "class_method_signature": "DefaultVertexTraversal.has(String propertyKey, P<?> predicate)", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(T accessor, Object value)", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal has(T accessor, Object value)", "full_signature": "@Override public VertexTraversal has(T accessor, Object value)", "class_method_signature": "DefaultVertexTraversal.has(T accessor, Object value)", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(T accessor, P<?> predicate)", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal has(T accessor, P<?> predicate)", "full_signature": "@Override public VertexTraversal has(T accessor, P<?> predicate)", "class_method_signature": "DefaultVertexTraversal.has(T accessor, P<?> predicate)", "testcase": false, "constructor": false}, {"identifier": "out", "parameters": "(String... labels)", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal out(String... labels)", "full_signature": "@Override public VertexTraversal out(String... labels)", "class_method_signature": "DefaultVertexTraversal.out(String... labels)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(Predicate<T> predicate)", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal filter(Predicate<T> predicate)", "full_signature": "@Override public VertexTraversal filter(Predicate<T> predicate)", "class_method_signature": "DefaultVertexTraversal.filter(Predicate<T> predicate)", "testcase": false, "constructor": false}, {"identifier": "outE", "parameters": "(String... edgeLabels)", "modifiers": "@Override public", "return": "EdgeTraversal", "signature": "EdgeTraversal outE(String... edgeLabels)", "full_signature": "@Override public EdgeTraversal outE(String... edgeLabels)", "class_method_signature": "DefaultVertexTraversal.outE(String... edgeLabels)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "(String... labels)", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal in(String... labels)", "full_signature": "@Override public VertexTraversal in(String... labels)", "class_method_signature": "DefaultVertexTraversal.in(String... labels)", "testcase": false, "constructor": false}, {"identifier": "inE", "parameters": "(String... edgeLabels)", "modifiers": "@Override public", "return": "EdgeTraversal", "signature": "EdgeTraversal inE(String... edgeLabels)", "full_signature": "@Override public EdgeTraversal inE(String... edgeLabels)", "class_method_signature": "DefaultVertexTraversal.inE(String... edgeLabels)", "testcase": false, "constructor": false}, {"identifier": "both", "parameters": "(String... labels)", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal both(String... labels)", "full_signature": "@Override public VertexTraversal both(String... labels)", "class_method_signature": "DefaultVertexTraversal.both(String... labels)", "testcase": false, "constructor": false}, {"identifier": "bothE", "parameters": "(String... edgeLabels)", "modifiers": "@Override public", "return": "EdgeTraversal", "signature": "EdgeTraversal bothE(String... edgeLabels)", "full_signature": "@Override public EdgeTraversal bothE(String... edgeLabels)", "class_method_signature": "DefaultVertexTraversal.bothE(String... edgeLabels)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "()", "modifiers": "@Override public", "return": "VertexRepeatTraversal", "signature": "VertexRepeatTraversal repeat()", "full_signature": "@Override public VertexRepeatTraversal repeat()", "class_method_signature": "DefaultVertexTraversal.repeat()", "testcase": false, "constructor": false}, {"identifier": "limit", "parameters": "(long limit)", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal limit(long limit)", "full_signature": "@Override public VertexTraversal limit(long limit)", "class_method_signature": "DefaultVertexTraversal.limit(long limit)", "testcase": false, "constructor": false}, {"identifier": "range", "parameters": "(long start, long end)", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal range(long start, long end)", "full_signature": "@Override public VertexTraversal range(long start, long end)", "class_method_signature": "DefaultVertexTraversal.range(long start, long end)", "testcase": false, "constructor": false}, {"identifier": "hasLabel", "parameters": "(String label)", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal hasLabel(String label)", "full_signature": "@Override public VertexTraversal hasLabel(String label)", "class_method_signature": "DefaultVertexTraversal.hasLabel(String label)", "testcase": false, "constructor": false}, {"identifier": "hasLabel", "parameters": "(Class<T> entityClass)", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal hasLabel(Class<T> entityClass)", "full_signature": "@Override public VertexTraversal hasLabel(Class<T> entityClass)", "class_method_signature": "DefaultVertexTraversal.hasLabel(Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "hasLabel", "parameters": "(P<String> predicate)", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal hasLabel(P<String> predicate)", "full_signature": "@Override public VertexTraversal hasLabel(P<String> predicate)", "class_method_signature": "DefaultVertexTraversal.hasLabel(P<String> predicate)", "testcase": false, "constructor": false}, {"identifier": "hasNot", "parameters": "(String propertyKey)", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal hasNot(String propertyKey)", "full_signature": "@Override public VertexTraversal hasNot(String propertyKey)", "class_method_signature": "DefaultVertexTraversal.hasNot(String propertyKey)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "Optional<T>", "signature": "Optional<T> next()", "full_signature": "@Override public Optional<T> next()", "class_method_signature": "DefaultVertexTraversal.next()", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "()", "modifiers": "@Override public", "return": "Stream<T>", "signature": "Stream<T> stream()", "full_signature": "@Override public Stream<T> stream()", "class_method_signature": "DefaultVertexTraversal.stream()", "testcase": false, "constructor": false}, {"identifier": "getSingleResult", "parameters": "()", "modifiers": "@Override public", "return": "Optional<T>", "signature": "Optional<T> getSingleResult()", "full_signature": "@Override public Optional<T> getSingleResult()", "class_method_signature": "DefaultVertexTraversal.getSingleResult()", "testcase": false, "constructor": false}, {"identifier": "getResultList", "parameters": "()", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> getResultList()", "full_signature": "@Override public List<T> getResultList()", "class_method_signature": "DefaultVertexTraversal.getResultList()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(int limit)", "modifiers": "@Override public", "return": "Stream<T>", "signature": "Stream<T> next(int limit)", "full_signature": "@Override public Stream<T> next(int limit)", "class_method_signature": "DefaultVertexTraversal.next(int limit)", "testcase": false, "constructor": false}, {"identifier": "valueMap", "parameters": "(String... propertyKeys)", "modifiers": "@Override public", "return": "ValueMapTraversal", "signature": "ValueMapTraversal valueMap(String... propertyKeys)", "full_signature": "@Override public ValueMapTraversal valueMap(String... propertyKeys)", "class_method_signature": "DefaultVertexTraversal.valueMap(String... propertyKeys)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long count()", "full_signature": "@Override public long count()", "class_method_signature": "DefaultVertexTraversal.count()", "testcase": false, "constructor": false}, {"identifier": "orderBy", "parameters": "(String property)", "modifiers": "@Override public", "return": "VertexTraversalOrder", "signature": "VertexTraversalOrder orderBy(String property)", "full_signature": "@Override public VertexTraversalOrder orderBy(String property)", "class_method_signature": "DefaultVertexTraversal.orderBy(String property)", "testcase": false, "constructor": false}], "file": "artemis-graph/src/main/java/org/jnosql/artemis/graph/DefaultVertexTraversal.java"}, "focal_method": {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "Optional<T>", "body": "@Override\n    public <T> Optional<T> next() {\n        Optional<Vertex> vertex = flow.apply(supplier.get()).tryNext();\n        return vertex.map(converter::toEntity);\n    }", "signature": "Optional<T> next()", "full_signature": "@Override public Optional<T> next()", "class_method_signature": "DefaultVertexTraversal.next()", "testcase": false, "constructor": false, "invocations": ["tryNext", "apply", "get", "map"]}, "repository": {"repo_id": 67588628, "url": "https://github.com/eclipse/jnosql-artemis", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 2612, "license": "licensed"}}