{"test_class": {"identifier": "BundleTest", "superclass": "extends AbstractDSpaceObjectTest", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(BundleTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(BundleTest.class)", "var_name": "log"}, {"original_string": "private Bundle b;", "modifier": "private", "type": "Bundle", "declarator": "b", "var_name": "b"}, {"original_string": "private Item item;", "modifier": "private", "type": "Item", "declarator": "item", "var_name": "item"}, {"original_string": "private Collection collection;", "modifier": "private", "type": "Collection", "declarator": "collection", "var_name": "collection"}, {"original_string": "private Community owningCommunity;", "modifier": "private", "type": "Community", "declarator": "owningCommunity", "var_name": "owningCommunity"}], "file": "dspace-api/src/test/java/org/dspace/content/BundleTest.java"}, "test_case": {"identifier": "testSetPrimaryBitstreamID", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetPrimaryBitstreamID() throws SQLException, AuthorizeException, IOException\n    {\n        new NonStrictExpectations(authorizeService.getClass())\n        {\n            {\n                // Allow Bundle ADD perms\n                authorizeService.authorizeAction((Context) any, (Bundle) any,\n                        Constants.ADD);\n                authorizeService.authorizeAction((Context) any, (Bitstream) any,\n                        Constants.WRITE);\n                result = null;\n        }};\n        File f = new File(testProps.get(\"test.bitstream\").toString());\n        Bitstream bs = bitstreamService.create(context, new FileInputStream(f));\n        bundleService.addBitstream(context, b, bs);\n        b.setPrimaryBitstreamID(bs);\n        assertThat(\"testSetPrimaryBitstreamID 0\", b.getPrimaryBitstream(), equalTo(bs));\n    }", "signature": "void testSetPrimaryBitstreamID()", "full_signature": "@Test public void testSetPrimaryBitstreamID()", "class_method_signature": "BundleTest.testSetPrimaryBitstreamID()", "testcase": true, "constructor": false, "invocations": ["getClass", "authorizeAction", "authorizeAction", "toString", "get", "create", "addBitstream", "setPrimaryBitstreamID", "assertThat", "getPrimaryBitstream", "equalTo"]}, "focal_class": {"identifier": "Bundle", "superclass": "extends DSpaceObject", "interfaces": "implements DSpaceObjectLegacySupport", "fields": [{"original_string": "@Column(name=\"bundle_id\", insertable = false, updatable = false)\n    private Integer legacyId;", "modifier": "@Column(name=\"bundle_id\", insertable = false, updatable = false)\n    private", "type": "Integer", "declarator": "legacyId", "var_name": "legacyId"}, {"original_string": "@OneToOne\n    @JoinColumn(name = \"primary_bitstream_id\")\n    private Bitstream primaryBitstream;", "modifier": "@OneToOne\n    @JoinColumn(name = \"primary_bitstream_id\")\n    private", "type": "Bitstream", "declarator": "primaryBitstream", "var_name": "primaryBitstream"}, {"original_string": "@ManyToMany(fetch = FetchType.LAZY)\n    @JoinTable(\n            name=\"bundle2bitstream\",\n            joinColumns={@JoinColumn(name=\"bundle_id\") },\n            inverseJoinColumns={@JoinColumn(name=\"bitstream_id\") }\n    )\n    @OrderColumn(name=\"bitstream_order\")\n    private final List<Bitstream> bitstreams = new ArrayList<>();", "modifier": "@ManyToMany(fetch = FetchType.LAZY)\n    @JoinTable(\n            name=\"bundle2bitstream\",\n            joinColumns={@JoinColumn(name=\"bundle_id\") },\n            inverseJoinColumns={@JoinColumn(name=\"bitstream_id\") }\n    )\n    @OrderColumn(name=\"bitstream_order\")\n    private final", "type": "List<Bitstream>", "declarator": "bitstreams = new ArrayList<>()", "var_name": "bitstreams"}, {"original_string": "@ManyToMany(fetch = FetchType.LAZY)\n    @JoinTable(\n            name = \"item2bundle\",\n            joinColumns = {@JoinColumn(name = \"bundle_id\", referencedColumnName = \"uuid\") },\n            inverseJoinColumns = {@JoinColumn(name = \"item_id\", referencedColumnName = \"uuid\") }\n    )\n    private final List<Item> items = new ArrayList<>();", "modifier": "@ManyToMany(fetch = FetchType.LAZY)\n    @JoinTable(\n            name = \"item2bundle\",\n            joinColumns = {@JoinColumn(name = \"bundle_id\", referencedColumnName = \"uuid\") },\n            inverseJoinColumns = {@JoinColumn(name = \"item_id\", referencedColumnName = \"uuid\") }\n    )\n    private final", "type": "List<Item>", "declarator": "items = new ArrayList<>()", "var_name": "items"}, {"original_string": "@Transient\n    protected transient BundleService bundleService;", "modifier": "@Transient\n    protected transient", "type": "BundleService", "declarator": "bundleService", "var_name": "bundleService"}], "methods": [{"identifier": "Bundle", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Bundle()", "full_signature": "protected  Bundle()", "class_method_signature": "Bundle.Bundle()", "testcase": false, "constructor": true}, {"identifier": "getLegacyId", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getLegacyId()", "full_signature": "@Override public Integer getLegacyId()", "class_method_signature": "Bundle.getLegacyId()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "Bundle.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(Context context, String name)", "modifiers": "public", "return": "void", "signature": "void setName(Context context, String name)", "full_signature": "public void setName(Context context, String name)", "class_method_signature": "Bundle.setName(Context context, String name)", "testcase": false, "constructor": false}, {"identifier": "getPrimaryBitstream", "parameters": "()", "modifiers": "public", "return": "Bitstream", "signature": "Bitstream getPrimaryBitstream()", "full_signature": "public Bitstream getPrimaryBitstream()", "class_method_signature": "Bundle.getPrimaryBitstream()", "testcase": false, "constructor": false}, {"identifier": "setPrimaryBitstreamID", "parameters": "(Bitstream bitstream)", "modifiers": "public", "return": "void", "signature": "void setPrimaryBitstreamID(Bitstream bitstream)", "full_signature": "public void setPrimaryBitstreamID(Bitstream bitstream)", "class_method_signature": "Bundle.setPrimaryBitstreamID(Bitstream bitstream)", "testcase": false, "constructor": false}, {"identifier": "unsetPrimaryBitstreamID", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unsetPrimaryBitstreamID()", "full_signature": "public void unsetPrimaryBitstreamID()", "class_method_signature": "Bundle.unsetPrimaryBitstreamID()", "testcase": false, "constructor": false}, {"identifier": "getBitstreams", "parameters": "()", "modifiers": "public", "return": "List<Bitstream>", "signature": "List<Bitstream> getBitstreams()", "full_signature": "public List<Bitstream> getBitstreams()", "class_method_signature": "Bundle.getBitstreams()", "testcase": false, "constructor": false}, {"identifier": "addBitstream", "parameters": "(Bitstream bitstream)", "modifiers": "", "return": "void", "signature": "void addBitstream(Bitstream bitstream)", "full_signature": " void addBitstream(Bitstream bitstream)", "class_method_signature": "Bundle.addBitstream(Bitstream bitstream)", "testcase": false, "constructor": false}, {"identifier": "clearBitstreams", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearBitstreams()", "full_signature": "public void clearBitstreams()", "class_method_signature": "Bundle.clearBitstreams()", "testcase": false, "constructor": false}, {"identifier": "removeBitstream", "parameters": "(Bitstream bitstream)", "modifiers": "public", "return": "void", "signature": "void removeBitstream(Bitstream bitstream)", "full_signature": "public void removeBitstream(Bitstream bitstream)", "class_method_signature": "Bundle.removeBitstream(Bitstream bitstream)", "testcase": false, "constructor": false}, {"identifier": "getItems", "parameters": "()", "modifiers": "public", "return": "List<Item>", "signature": "List<Item> getItems()", "full_signature": "public List<Item> getItems()", "class_method_signature": "Bundle.getItems()", "testcase": false, "constructor": false}, {"identifier": "removeItem", "parameters": "(Item item)", "modifiers": "", "return": "void", "signature": "void removeItem(Item item)", "full_signature": " void removeItem(Item item)", "class_method_signature": "Bundle.removeItem(Item item)", "testcase": false, "constructor": false}, {"identifier": "addItem", "parameters": "(Item item)", "modifiers": "", "return": "void", "signature": "void addItem(Item item)", "full_signature": " void addItem(Item item)", "class_method_signature": "Bundle.addItem(Item item)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Bundle.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Bundle.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getType()", "full_signature": "@Override public int getType()", "class_method_signature": "Bundle.getType()", "testcase": false, "constructor": false}, {"identifier": "getBundleService", "parameters": "()", "modifiers": "private", "return": "BundleService", "signature": "BundleService getBundleService()", "full_signature": "private BundleService getBundleService()", "class_method_signature": "Bundle.getBundleService()", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/content/Bundle.java"}, "focal_method": {"identifier": "setPrimaryBitstreamID", "parameters": "(Bitstream bitstream)", "modifiers": "public", "return": "void", "body": "public void setPrimaryBitstreamID(Bitstream bitstream)\n    {\n        primaryBitstream = bitstream;\n        setModified();\n    }", "signature": "void setPrimaryBitstreamID(Bitstream bitstream)", "full_signature": "public void setPrimaryBitstreamID(Bitstream bitstream)", "class_method_signature": "Bundle.setPrimaryBitstreamID(Bitstream bitstream)", "testcase": false, "constructor": false, "invocations": ["setModified"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}