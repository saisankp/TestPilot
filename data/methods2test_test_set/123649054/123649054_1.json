{"test_class": {"identifier": "SQSPollerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Instant NOW = Instant.now();", "modifier": "private static final", "type": "Instant", "declarator": "NOW = Instant.now()", "var_name": "NOW"}, {"original_string": "@Mock\n    private SQSProxy sqsProxy;", "modifier": "@Mock\n    private", "type": "SQSProxy", "declarator": "sqsProxy", "var_name": "sqsProxy"}, {"original_string": "@Mock\n    private MessageDispatcher messageDispatcher;", "modifier": "@Mock\n    private", "type": "MessageDispatcher", "declarator": "messageDispatcher", "var_name": "messageDispatcher"}, {"original_string": "private SQSPoller poller;", "modifier": "private", "type": "SQSPoller", "declarator": "poller", "var_name": "poller"}], "file": "aws-serverless-sqs-event-source-app/src/test/java/com/amazonaws/serverless/sqseventsource/SQSPollerTest.java"}, "test_case": {"identifier": "poll_messagesReceived", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void poll_messagesReceived() throws Exception {\n        when(messageDispatcher.getEstimatedCapacity(any()))\n                .thenReturn(4)\n                .thenReturn(2)\n                .thenReturn(0);\n        List<Message> messages = Lists.newArrayList(mock(Message.class), mock(Message.class));\n        when(sqsProxy.receiveMessages(anyInt())).thenReturn(messages);\n\n        poller.poll(SQSPoller.TIMEOUT_BUFFER_IN_MILLIS * 2);\n\n        Instant expectedCutoff = NOW.plusMillis(SQSPoller.TIMEOUT_BUFFER_IN_MILLIS);\n        InOrder inOrder = inOrder(messageDispatcher, sqsProxy);\n        inOrder.verify(messageDispatcher).reset();\n        inOrder.verify(messageDispatcher).getEstimatedCapacity(expectedCutoff);\n        inOrder.verify(sqsProxy).receiveMessages(4);\n        inOrder.verify(messageDispatcher).dispatch(messages);\n        inOrder.verify(messageDispatcher).getEstimatedCapacity(expectedCutoff);\n        inOrder.verify(sqsProxy).receiveMessages(2);\n        inOrder.verify(messageDispatcher).dispatch(messages);\n        inOrder.verify(messageDispatcher).getEstimatedCapacity(expectedCutoff);\n\n        verifyNoMoreInteractions(sqsProxy, messageDispatcher);\n    }", "signature": "void poll_messagesReceived()", "full_signature": "@Test public void poll_messagesReceived()", "class_method_signature": "SQSPollerTest.poll_messagesReceived()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "thenReturn", "thenReturn", "when", "getEstimatedCapacity", "any", "newArrayList", "mock", "mock", "thenReturn", "when", "receiveMessages", "anyInt", "poll", "plusMillis", "inOrder", "reset", "verify", "getEstimatedCapacity", "verify", "receiveMessages", "verify", "dispatch", "verify", "getEstimatedCapacity", "verify", "receiveMessages", "verify", "dispatch", "verify", "getEstimatedCapacity", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "SQSPoller", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int TIMEOUT_BUFFER_IN_MILLIS = 5000;", "modifier": "static final", "type": "int", "declarator": "TIMEOUT_BUFFER_IN_MILLIS = 5000", "var_name": "TIMEOUT_BUFFER_IN_MILLIS"}, {"original_string": "@NonNull\n    private final SQSProxy sqsProxy;", "modifier": "@NonNull\n    private final", "type": "SQSProxy", "declarator": "sqsProxy", "var_name": "sqsProxy"}, {"original_string": "@NonNull\n    private final MessageDispatcher messageDispatcher;", "modifier": "@NonNull\n    private final", "type": "MessageDispatcher", "declarator": "messageDispatcher", "var_name": "messageDispatcher"}, {"original_string": "@NonNull\n    private final Clock clock;", "modifier": "@NonNull\n    private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "SQSPoller", "parameters": "(final SQSProxy sqsProxy, final MessageDispatcher messageDispatcher)", "modifiers": "public", "return": "", "signature": " SQSPoller(final SQSProxy sqsProxy, final MessageDispatcher messageDispatcher)", "full_signature": "public  SQSPoller(final SQSProxy sqsProxy, final MessageDispatcher messageDispatcher)", "class_method_signature": "SQSPoller.SQSPoller(final SQSProxy sqsProxy, final MessageDispatcher messageDispatcher)", "testcase": false, "constructor": true}, {"identifier": "poll", "parameters": "(final int remainingTimeInMillis)", "modifiers": "public", "return": "void", "signature": "void poll(final int remainingTimeInMillis)", "full_signature": "public void poll(final int remainingTimeInMillis)", "class_method_signature": "SQSPoller.poll(final int remainingTimeInMillis)", "testcase": false, "constructor": false}], "file": "aws-serverless-sqs-event-source-app/src/main/java/com/amazonaws/serverless/sqseventsource/SQSPoller.java"}, "focal_method": {"identifier": "poll", "parameters": "(final int remainingTimeInMillis)", "modifiers": "public", "return": "void", "body": "public void poll(final int remainingTimeInMillis) {\n        Instant cutoff = Instant.now(clock)\n                .plusMillis(remainingTimeInMillis)\n                .minusMillis(TIMEOUT_BUFFER_IN_MILLIS);\n        messageDispatcher.reset();\n        int estimatedCapacity;\n        while ((estimatedCapacity = messageDispatcher.getEstimatedCapacity(cutoff)) > 0) {\n            List<Message> toProcess = sqsProxy.receiveMessages(estimatedCapacity);\n\n            if (toProcess.isEmpty()) {\n                log.info(\"No messages received from queue. Returning until next polling cycle to save cost.\");\n                return;\n            }\n\n            messageDispatcher.dispatch(toProcess);\n        }\n    }", "signature": "void poll(final int remainingTimeInMillis)", "full_signature": "public void poll(final int remainingTimeInMillis)", "class_method_signature": "SQSPoller.poll(final int remainingTimeInMillis)", "testcase": false, "constructor": false, "invocations": ["minusMillis", "plusMillis", "now", "reset", "getEstimatedCapacity", "receiveMessages", "isEmpty", "info", "dispatch"]}, "repository": {"repo_id": 123649054, "url": "https://github.com/awslabs/aws-serverless-sqs-event-source", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 33, "size": 79, "license": "licensed"}}