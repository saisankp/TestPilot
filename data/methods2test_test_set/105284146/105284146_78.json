{"test_class": {"identifier": "ZipFileDataSourceTest", "superclass": "extends AbstractDataSourceTest", "interfaces": "", "fields": [], "file": "commons/src/test/java/com/powsybl/commons/datasource/ZipFileDataSourceTest.java"}, "test_case": {"identifier": "fakeZipTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fakeZipTest() throws IOException {\n        Files.createFile(testDir.resolve(\"fake.zip\"));\n        assertFalse(new ZipFileDataSource(testDir, \"fake\").exists(\"e\"));\n    }", "signature": "void fakeZipTest()", "full_signature": "@Test public void fakeZipTest()", "class_method_signature": "ZipFileDataSourceTest.fakeZipTest()", "testcase": true, "constructor": false, "invocations": ["createFile", "resolve", "assertFalse", "exists"]}, "focal_class": {"identifier": "ZipFileDataSource", "superclass": "", "interfaces": "implements DataSource", "fields": [{"original_string": "private final Path directory;", "modifier": "private final", "type": "Path", "declarator": "directory", "var_name": "directory"}, {"original_string": "private final String zipFileName;", "modifier": "private final", "type": "String", "declarator": "zipFileName", "var_name": "zipFileName"}, {"original_string": "private final String baseName;", "modifier": "private final", "type": "String", "declarator": "baseName", "var_name": "baseName"}, {"original_string": "private final DataSourceObserver observer;", "modifier": "private final", "type": "DataSourceObserver", "declarator": "observer", "var_name": "observer"}], "methods": [{"identifier": "ZipFileDataSource", "parameters": "(Path directory, String zipFileName, String baseName, DataSourceObserver observer)", "modifiers": "public", "return": "", "signature": " ZipFileDataSource(Path directory, String zipFileName, String baseName, DataSourceObserver observer)", "full_signature": "public  ZipFileDataSource(Path directory, String zipFileName, String baseName, DataSourceObserver observer)", "class_method_signature": "ZipFileDataSource.ZipFileDataSource(Path directory, String zipFileName, String baseName, DataSourceObserver observer)", "testcase": false, "constructor": true}, {"identifier": "ZipFileDataSource", "parameters": "(Path directory, String zipFileName, String baseName)", "modifiers": "public", "return": "", "signature": " ZipFileDataSource(Path directory, String zipFileName, String baseName)", "full_signature": "public  ZipFileDataSource(Path directory, String zipFileName, String baseName)", "class_method_signature": "ZipFileDataSource.ZipFileDataSource(Path directory, String zipFileName, String baseName)", "testcase": false, "constructor": true}, {"identifier": "ZipFileDataSource", "parameters": "(Path directory, String baseName)", "modifiers": "public", "return": "", "signature": " ZipFileDataSource(Path directory, String baseName)", "full_signature": "public  ZipFileDataSource(Path directory, String baseName)", "class_method_signature": "ZipFileDataSource.ZipFileDataSource(Path directory, String baseName)", "testcase": false, "constructor": true}, {"identifier": "ZipFileDataSource", "parameters": "(Path directory, String baseName, DataSourceObserver observer)", "modifiers": "public", "return": "", "signature": " ZipFileDataSource(Path directory, String baseName, DataSourceObserver observer)", "full_signature": "public  ZipFileDataSource(Path directory, String baseName, DataSourceObserver observer)", "class_method_signature": "ZipFileDataSource.ZipFileDataSource(Path directory, String baseName, DataSourceObserver observer)", "testcase": false, "constructor": true}, {"identifier": "ZipFileDataSource", "parameters": "(Path zipFile)", "modifiers": "public", "return": "", "signature": " ZipFileDataSource(Path zipFile)", "full_signature": "public  ZipFileDataSource(Path zipFile)", "class_method_signature": "ZipFileDataSource.ZipFileDataSource(Path zipFile)", "testcase": false, "constructor": true}, {"identifier": "getBaseName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getBaseName()", "full_signature": "@Override public String getBaseName()", "class_method_signature": "ZipFileDataSource.getBaseName()", "testcase": false, "constructor": false}, {"identifier": "getZipFilePath", "parameters": "()", "modifiers": "private", "return": "Path", "signature": "Path getZipFilePath()", "full_signature": "private Path getZipFilePath()", "class_method_signature": "ZipFileDataSource.getZipFilePath()", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(String suffix, String ext)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(String suffix, String ext)", "full_signature": "@Override public boolean exists(String suffix, String ext)", "class_method_signature": "ZipFileDataSource.exists(String suffix, String ext)", "testcase": false, "constructor": false}, {"identifier": "entryExists", "parameters": "(Path zipFilePath, String fileName)", "modifiers": "private static", "return": "boolean", "signature": "boolean entryExists(Path zipFilePath, String fileName)", "full_signature": "private static boolean entryExists(Path zipFilePath, String fileName)", "class_method_signature": "ZipFileDataSource.entryExists(Path zipFilePath, String fileName)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(String fileName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(String fileName)", "full_signature": "@Override public boolean exists(String fileName)", "class_method_signature": "ZipFileDataSource.exists(String fileName)", "testcase": false, "constructor": false}, {"identifier": "newInputStream", "parameters": "(String suffix, String ext)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream newInputStream(String suffix, String ext)", "full_signature": "@Override public InputStream newInputStream(String suffix, String ext)", "class_method_signature": "ZipFileDataSource.newInputStream(String suffix, String ext)", "testcase": false, "constructor": false}, {"identifier": "newInputStream", "parameters": "(String fileName)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream newInputStream(String fileName)", "full_signature": "@Override public InputStream newInputStream(String fileName)", "class_method_signature": "ZipFileDataSource.newInputStream(String fileName)", "testcase": false, "constructor": false}, {"identifier": "newOutputStream", "parameters": "(String fileName, boolean append)", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream newOutputStream(String fileName, boolean append)", "full_signature": "@Override public OutputStream newOutputStream(String fileName, boolean append)", "class_method_signature": "ZipFileDataSource.newOutputStream(String fileName, boolean append)", "testcase": false, "constructor": false}, {"identifier": "newOutputStream", "parameters": "(String suffix, String ext, boolean append)", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream newOutputStream(String suffix, String ext, boolean append)", "full_signature": "@Override public OutputStream newOutputStream(String suffix, String ext, boolean append)", "class_method_signature": "ZipFileDataSource.newOutputStream(String suffix, String ext, boolean append)", "testcase": false, "constructor": false}, {"identifier": "listNames", "parameters": "(String regex)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> listNames(String regex)", "full_signature": "@Override public Set<String> listNames(String regex)", "class_method_signature": "ZipFileDataSource.listNames(String regex)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/powsybl/commons/datasource/ZipFileDataSource.java"}, "focal_method": {"identifier": "exists", "parameters": "(String suffix, String ext)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean exists(String suffix, String ext) throws IOException {\n        return exists(DataSourceUtil.getFileName(baseName, suffix, ext));\n    }", "signature": "boolean exists(String suffix, String ext)", "full_signature": "@Override public boolean exists(String suffix, String ext)", "class_method_signature": "ZipFileDataSource.exists(String suffix, String ext)", "testcase": false, "constructor": false, "invocations": ["exists", "getFileName"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}