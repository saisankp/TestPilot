{"test_class": {"identifier": "CommandApduTest", "superclass": "", "interfaces": "", "fields": [], "file": "library/src/test/java/com/github/devnied/emvnfccard/utils/CommandApduTest.java"}, "test_case": {"identifier": "testToByte", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testToByte() {\n\t\tAssertions.assertThat(BytesUtils.bytesToString(new CommandApdu(CommandEnum.GPO, 0x01, 0x02, 0x01).toBytes())).isEqualTo(\n\t\t\t\t\"80 A8 01 02 01\");\n\t\tAssertions.assertThat(BytesUtils.bytesToString(new CommandApdu(CommandEnum.GPO, new byte[] {}, 0x01).toBytes()))\n\t\t\t\t.isEqualTo(\"80 A8 00 00 01\");\n\t\tAssertions.assertThat(BytesUtils.bytesToString(new CommandApdu(CommandEnum.GPO, null, 0x01).toBytes())).isEqualTo(\n\t\t\t\t\"80 A8 00 00 01\");\n\t\tAssertions.assertThat(BytesUtils.bytesToString(new CommandApdu(CommandEnum.GPO, 0x01, 0x02).toBytes())).isEqualTo(\n\t\t\t\t\"80 A8 01 02\");\n\t}", "signature": "void testToByte()", "full_signature": "@Test public void testToByte()", "class_method_signature": "CommandApduTest.testToByte()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "bytesToString", "toBytes", "isEqualTo", "assertThat", "bytesToString", "toBytes", "isEqualTo", "assertThat", "bytesToString", "toBytes", "isEqualTo", "assertThat", "bytesToString", "toBytes"]}, "focal_class": {"identifier": "CommandApdu", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected int mCla = 0x00;", "modifier": "protected", "type": "int", "declarator": "mCla = 0x00", "var_name": "mCla"}, {"original_string": "protected int mIns = 0x00;", "modifier": "protected", "type": "int", "declarator": "mIns = 0x00", "var_name": "mIns"}, {"original_string": "protected int mP1 = 0x00;", "modifier": "protected", "type": "int", "declarator": "mP1 = 0x00", "var_name": "mP1"}, {"original_string": "protected int mP2 = 0x00;", "modifier": "protected", "type": "int", "declarator": "mP2 = 0x00", "var_name": "mP2"}, {"original_string": "protected int mLc = 0x00;", "modifier": "protected", "type": "int", "declarator": "mLc = 0x00", "var_name": "mLc"}, {"original_string": "protected byte[] mData = new byte[0];", "modifier": "protected", "type": "byte[]", "declarator": "mData = new byte[0]", "var_name": "mData"}, {"original_string": "protected int mLe = 0x00;", "modifier": "protected", "type": "int", "declarator": "mLe = 0x00", "var_name": "mLe"}, {"original_string": "protected boolean mLeUsed = false;", "modifier": "protected", "type": "boolean", "declarator": "mLeUsed = false", "var_name": "mLeUsed"}], "methods": [{"identifier": "CommandApdu", "parameters": "(final CommandEnum pEnum, final byte[] data, final int le)", "modifiers": "public", "return": "", "signature": " CommandApdu(final CommandEnum pEnum, final byte[] data, final int le)", "full_signature": "public  CommandApdu(final CommandEnum pEnum, final byte[] data, final int le)", "class_method_signature": "CommandApdu.CommandApdu(final CommandEnum pEnum, final byte[] data, final int le)", "testcase": false, "constructor": true}, {"identifier": "CommandApdu", "parameters": "(final CommandEnum pEnum, final int p1, final int p2, final int le)", "modifiers": "public", "return": "", "signature": " CommandApdu(final CommandEnum pEnum, final int p1, final int p2, final int le)", "full_signature": "public  CommandApdu(final CommandEnum pEnum, final int p1, final int p2, final int le)", "class_method_signature": "CommandApdu.CommandApdu(final CommandEnum pEnum, final int p1, final int p2, final int le)", "testcase": false, "constructor": true}, {"identifier": "CommandApdu", "parameters": "(final CommandEnum pEnum, final int p1, final int p2)", "modifiers": "public", "return": "", "signature": " CommandApdu(final CommandEnum pEnum, final int p1, final int p2)", "full_signature": "public  CommandApdu(final CommandEnum pEnum, final int p1, final int p2)", "class_method_signature": "CommandApdu.CommandApdu(final CommandEnum pEnum, final int p1, final int p2)", "testcase": false, "constructor": true}, {"identifier": "CommandApdu", "parameters": "(final CommandEnum pEnum, final int p1, final int p2, final byte[] data, final int le)", "modifiers": "public", "return": "", "signature": " CommandApdu(final CommandEnum pEnum, final int p1, final int p2, final byte[] data, final int le)", "full_signature": "public  CommandApdu(final CommandEnum pEnum, final int p1, final int p2, final byte[] data, final int le)", "class_method_signature": "CommandApdu.CommandApdu(final CommandEnum pEnum, final int p1, final int p2, final byte[] data, final int le)", "testcase": false, "constructor": true}, {"identifier": "toBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] toBytes()", "full_signature": "public byte[] toBytes()", "class_method_signature": "CommandApdu.toBytes()", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/github/devnied/emvnfccard/utils/CommandApdu.java"}, "focal_method": {"identifier": "toBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "body": "public byte[] toBytes() {\n\t\tint length = 4; // CLA, INS, P1, P2\n\t\tif (mData != null && mData.length != 0) {\n\t\t\tlength += 1; // LC\n\t\t\tlength += mData.length; // DATA\n\t\t}\n\t\tif (mLeUsed) {\n\t\t\tlength += 1; // LE\n\t\t}\n\n\t\tbyte[] apdu = new byte[length];\n\n\t\tint index = 0;\n\t\tapdu[index] = (byte) mCla;\n\t\tindex++;\n\t\tapdu[index] = (byte) mIns;\n\t\tindex++;\n\t\tapdu[index] = (byte) mP1;\n\t\tindex++;\n\t\tapdu[index] = (byte) mP2;\n\t\tindex++;\n\t\tif (mData != null && mData.length != 0) {\n\t\t\tapdu[index] = (byte) mLc;\n\t\t\tindex++;\n\t\t\tSystem.arraycopy(mData, 0, apdu, index, mData.length);\n\t\t\tindex += mData.length;\n\t\t}\n\t\tif (mLeUsed) {\n\t\t\tapdu[index] += (byte) mLe; // LE\n\t\t}\n\n\t\treturn apdu;\n\t}", "signature": "byte[] toBytes()", "full_signature": "public byte[] toBytes()", "class_method_signature": "CommandApdu.toBytes()", "testcase": false, "constructor": false, "invocations": ["arraycopy"]}, "repository": {"repo_id": 18467626, "url": "https://github.com/devnied/EMV-NFC-Paycard-Enrollment", "language": "Java", "is_fork": false, "fork_count": 425, "stargazer_count": 934, "size": 4233, "license": "licensed"}}