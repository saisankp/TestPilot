{"test_class": {"identifier": "PropertiesPluginDescriptorFinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private VersionManager versionManager;", "modifier": "private", "type": "VersionManager", "declarator": "versionManager", "var_name": "versionManager"}, {"original_string": "@TempDir\n    Path pluginsPath;", "modifier": "@TempDir", "type": "Path", "declarator": "pluginsPath", "var_name": "pluginsPath"}], "file": "pf4j/src/test/java/org/pf4j/PropertiesPluginDescriptorFinderTest.java"}, "test_case": {"identifier": "testFind", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFind() throws Exception {\n        PluginDescriptorFinder descriptorFinder = new PropertiesPluginDescriptorFinder();\n\n        PluginDescriptor plugin1 = descriptorFinder.find(pluginsPath.resolve(\"test-plugin-1\"));\n        PluginDescriptor plugin2 = descriptorFinder.find(pluginsPath.resolve(\"test-plugin-2\"));\n\n        assertEquals(\"test-plugin-1\", plugin1.getPluginId());\n        assertEquals(\"Test Plugin 1\", plugin1.getPluginDescription());\n        assertEquals(TestPlugin.class.getName(), plugin1.getPluginClass());\n        assertEquals(\"0.0.1\", plugin1.getVersion());\n        assertEquals(\"Decebal Suiu\", plugin1.getProvider());\n        assertEquals(2, plugin1.getDependencies().size());\n        assertEquals(\"test-plugin-2\", plugin1.getDependencies().get(0).getPluginId());\n        assertEquals(\"test-plugin-3\", plugin1.getDependencies().get(1).getPluginId());\n        assertEquals(\"~1.0\", plugin1.getDependencies().get(1).getPluginVersionSupport());\n        assertEquals(\"Apache-2.0\", plugin1.getLicense());\n        assertEquals(\">=1\", plugin1.getRequires());\n        assertTrue(versionManager.checkVersionConstraint(\"1.0.0\", plugin1.getRequires()));\n        assertFalse(versionManager.checkVersionConstraint(\"0.1.0\", plugin1.getRequires()));\n\n        assertEquals(\"test-plugin-2\", plugin2.getPluginId());\n        assertEquals(\"\", plugin2.getPluginDescription());\n        assertEquals(TestPlugin.class.getName(), plugin2.getPluginClass());\n        assertEquals(\"0.0.1\", plugin2.getVersion());\n        assertEquals(\"Decebal Suiu\", plugin2.getProvider());\n        assertEquals(0, plugin2.getDependencies().size());\n        assertEquals(\"*\", plugin2.getRequires()); // Default is *\n        assertTrue(versionManager.checkVersionConstraint(\"1.0.0\", plugin2.getRequires()));\n    }", "signature": "void testFind()", "full_signature": "@Test public void testFind()", "class_method_signature": "PropertiesPluginDescriptorFinderTest.testFind()", "testcase": true, "constructor": false, "invocations": ["find", "resolve", "find", "resolve", "assertEquals", "getPluginId", "assertEquals", "getPluginDescription", "assertEquals", "getName", "getPluginClass", "assertEquals", "getVersion", "assertEquals", "getProvider", "assertEquals", "size", "getDependencies", "assertEquals", "getPluginId", "get", "getDependencies", "assertEquals", "getPluginId", "get", "getDependencies", "assertEquals", "getPluginVersionSupport", "get", "getDependencies", "assertEquals", "getLicense", "assertEquals", "getRequires", "assertTrue", "checkVersionConstraint", "getRequires", "assertFalse", "checkVersionConstraint", "getRequires", "assertEquals", "getPluginId", "assertEquals", "getPluginDescription", "assertEquals", "getName", "getPluginClass", "assertEquals", "getVersion", "assertEquals", "getProvider", "assertEquals", "size", "getDependencies", "assertEquals", "getRequires", "assertTrue", "checkVersionConstraint", "getRequires"]}, "focal_class": {"identifier": "PropertiesPluginDescriptorFinder", "superclass": "", "interfaces": "implements PluginDescriptorFinder", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(PropertiesPluginDescriptorFinder.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(PropertiesPluginDescriptorFinder.class)", "var_name": "log"}, {"original_string": "public static final String DEFAULT_PROPERTIES_FILE_NAME = \"plugin.properties\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_PROPERTIES_FILE_NAME = \"plugin.properties\"", "var_name": "DEFAULT_PROPERTIES_FILE_NAME"}, {"original_string": "public static final String PLUGIN_ID = \"plugin.id\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_ID = \"plugin.id\"", "var_name": "PLUGIN_ID"}, {"original_string": "public static final String PLUGIN_DESCRIPTION = \"plugin.description\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_DESCRIPTION = \"plugin.description\"", "var_name": "PLUGIN_DESCRIPTION"}, {"original_string": "public static final String PLUGIN_CLASS = \"plugin.class\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_CLASS = \"plugin.class\"", "var_name": "PLUGIN_CLASS"}, {"original_string": "public static final String PLUGIN_VERSION = \"plugin.version\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_VERSION = \"plugin.version\"", "var_name": "PLUGIN_VERSION"}, {"original_string": "public static final String PLUGIN_PROVIDER = \"plugin.provider\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_PROVIDER = \"plugin.provider\"", "var_name": "PLUGIN_PROVIDER"}, {"original_string": "public static final String PLUGIN_DEPENDENCIES = \"plugin.dependencies\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_DEPENDENCIES = \"plugin.dependencies\"", "var_name": "PLUGIN_DEPENDENCIES"}, {"original_string": "public static final String PLUGIN_REQUIRES = \"plugin.requires\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_REQUIRES = \"plugin.requires\"", "var_name": "PLUGIN_REQUIRES"}, {"original_string": "public static final String PLUGIN_LICENSE = \"plugin.license\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_LICENSE = \"plugin.license\"", "var_name": "PLUGIN_LICENSE"}, {"original_string": "protected String propertiesFileName;", "modifier": "protected", "type": "String", "declarator": "propertiesFileName", "var_name": "propertiesFileName"}], "methods": [{"identifier": "PropertiesPluginDescriptorFinder", "parameters": "()", "modifiers": "public", "return": "", "signature": " PropertiesPluginDescriptorFinder()", "full_signature": "public  PropertiesPluginDescriptorFinder()", "class_method_signature": "PropertiesPluginDescriptorFinder.PropertiesPluginDescriptorFinder()", "testcase": false, "constructor": true}, {"identifier": "PropertiesPluginDescriptorFinder", "parameters": "(String propertiesFileName)", "modifiers": "public", "return": "", "signature": " PropertiesPluginDescriptorFinder(String propertiesFileName)", "full_signature": "public  PropertiesPluginDescriptorFinder(String propertiesFileName)", "class_method_signature": "PropertiesPluginDescriptorFinder.PropertiesPluginDescriptorFinder(String propertiesFileName)", "testcase": false, "constructor": true}, {"identifier": "isApplicable", "parameters": "(Path pluginPath)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isApplicable(Path pluginPath)", "full_signature": "@Override public boolean isApplicable(Path pluginPath)", "class_method_signature": "PropertiesPluginDescriptorFinder.isApplicable(Path pluginPath)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(Path pluginPath)", "modifiers": "@Override public", "return": "PluginDescriptor", "signature": "PluginDescriptor find(Path pluginPath)", "full_signature": "@Override public PluginDescriptor find(Path pluginPath)", "class_method_signature": "PropertiesPluginDescriptorFinder.find(Path pluginPath)", "testcase": false, "constructor": false}, {"identifier": "readProperties", "parameters": "(Path pluginPath)", "modifiers": "protected", "return": "Properties", "signature": "Properties readProperties(Path pluginPath)", "full_signature": "protected Properties readProperties(Path pluginPath)", "class_method_signature": "PropertiesPluginDescriptorFinder.readProperties(Path pluginPath)", "testcase": false, "constructor": false}, {"identifier": "getPropertiesPath", "parameters": "(Path pluginPath, String propertiesFileName)", "modifiers": "protected", "return": "Path", "signature": "Path getPropertiesPath(Path pluginPath, String propertiesFileName)", "full_signature": "protected Path getPropertiesPath(Path pluginPath, String propertiesFileName)", "class_method_signature": "PropertiesPluginDescriptorFinder.getPropertiesPath(Path pluginPath, String propertiesFileName)", "testcase": false, "constructor": false}, {"identifier": "createPluginDescriptor", "parameters": "(Properties properties)", "modifiers": "protected", "return": "PluginDescriptor", "signature": "PluginDescriptor createPluginDescriptor(Properties properties)", "full_signature": "protected PluginDescriptor createPluginDescriptor(Properties properties)", "class_method_signature": "PropertiesPluginDescriptorFinder.createPluginDescriptor(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "createPluginDescriptorInstance", "parameters": "()", "modifiers": "protected", "return": "DefaultPluginDescriptor", "signature": "DefaultPluginDescriptor createPluginDescriptorInstance()", "full_signature": "protected DefaultPluginDescriptor createPluginDescriptorInstance()", "class_method_signature": "PropertiesPluginDescriptorFinder.createPluginDescriptorInstance()", "testcase": false, "constructor": false}], "file": "pf4j/src/main/java/org/pf4j/PropertiesPluginDescriptorFinder.java"}, "focal_method": {"identifier": "find", "parameters": "(Path pluginPath)", "modifiers": "@Override public", "return": "PluginDescriptor", "body": "@Override\n    public PluginDescriptor find(Path pluginPath) {\n        Properties properties = readProperties(pluginPath);\n\n        return createPluginDescriptor(properties);\n    }", "signature": "PluginDescriptor find(Path pluginPath)", "full_signature": "@Override public PluginDescriptor find(Path pluginPath)", "class_method_signature": "PropertiesPluginDescriptorFinder.find(Path pluginPath)", "testcase": false, "constructor": false, "invocations": ["readProperties", "createPluginDescriptor"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}