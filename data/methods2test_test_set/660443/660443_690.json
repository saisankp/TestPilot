{"test_class": {"identifier": "CDKMCSTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "boolean standAlone = false;", "modifier": "", "type": "boolean", "declarator": "standAlone = false", "var_name": "standAlone"}], "file": "legacy/src/test/java/org/openscience/cdk/smsd/algorithm/rgraph/CDKMCSTest.java"}, "test_case": {"identifier": "testItself", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testItself() throws Exception {\n        String smiles = \"C1CCCCCCC1CC\";\n        QueryAtomContainer query = QueryAtomContainerCreator.createAnyAtomContainer(new SmilesParser(\n                DefaultChemObjectBuilder.getInstance()).parseSmiles(smiles), true);\n        IAtomContainer ac = new SmilesParser(DefaultChemObjectBuilder.getInstance()).parseSmiles(smiles);\n        if (standAlone) {\n            System.out.println(\"AtomCount of query: \" + query.getAtomCount());\n            System.out.println(\"AtomCount of target: \" + ac.getAtomCount());\n\n        }\n\n        boolean matched = CDKMCS.isSubgraph(ac, query, true);\n        if (standAlone) {\n            System.out.println(\"QueryAtomContainer matched: \" + matched);\n        }\n        if (!standAlone) {\n            Assert.assertTrue(matched);\n        }\n    }", "signature": "void testItself()", "full_signature": "@Test public void testItself()", "class_method_signature": "CDKMCSTest.testItself()", "testcase": true, "constructor": false, "invocations": ["createAnyAtomContainer", "parseSmiles", "getInstance", "parseSmiles", "getInstance", "println", "getAtomCount", "println", "getAtomCount", "isSubgraph", "println", "assertTrue"]}, "focal_class": {"identifier": "CDKMCS", "superclass": "", "interfaces": "", "fields": [{"original_string": "final static int           ID1         = 0;", "modifier": "final static", "type": "int", "declarator": "ID1         = 0", "var_name": "ID1"}, {"original_string": "final static int           ID2         = 1;", "modifier": "final static", "type": "int", "declarator": "ID2         = 1", "var_name": "ID2"}, {"original_string": "private static TimeManager timeManager = null;", "modifier": "private static", "type": "TimeManager", "declarator": "timeManager = null", "var_name": "timeManager"}], "methods": [{"identifier": "isIsomorph", "parameters": "(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIsomorph(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)", "full_signature": "public static boolean isIsomorph(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)", "class_method_signature": "CDKMCS.isIsomorph(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "getIsomorphMap", "parameters": "(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "modifiers": "public static", "return": "List<CDKRMap>", "signature": "List<CDKRMap> getIsomorphMap(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "full_signature": "public static List<CDKRMap> getIsomorphMap(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "class_method_signature": "CDKMCS.getIsomorphMap(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "getIsomorphAtomsMap", "parameters": "(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "modifiers": "public static", "return": "List<CDKRMap>", "signature": "List<CDKRMap> getIsomorphAtomsMap(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "full_signature": "public static List<CDKRMap> getIsomorphAtomsMap(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "class_method_signature": "CDKMCS.getIsomorphAtomsMap(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "getIsomorphMaps", "parameters": "(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "modifiers": "public static", "return": "List<List<CDKRMap>>", "signature": "List<List<CDKRMap>> getIsomorphMaps(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "full_signature": "public static List<List<CDKRMap>> getIsomorphMaps(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "class_method_signature": "CDKMCS.getIsomorphMaps(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "getSubgraphMaps", "parameters": "(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "modifiers": "public static", "return": "List<List<CDKRMap>>", "signature": "List<List<CDKRMap>> getSubgraphMaps(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "full_signature": "public static List<List<CDKRMap>> getSubgraphMaps(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "class_method_signature": "CDKMCS.getSubgraphMaps(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "getSubgraphMap", "parameters": "(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "modifiers": "public static", "return": "List<CDKRMap>", "signature": "List<CDKRMap> getSubgraphMap(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "full_signature": "public static List<CDKRMap> getSubgraphMap(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "class_method_signature": "CDKMCS.getSubgraphMap(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "getSubgraphAtomsMaps", "parameters": "(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "modifiers": "public static", "return": "List<List<CDKRMap>>", "signature": "List<List<CDKRMap>> getSubgraphAtomsMaps(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "full_signature": "public static List<List<CDKRMap>> getSubgraphAtomsMaps(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "class_method_signature": "CDKMCS.getSubgraphAtomsMaps(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "getSubgraphAtomsMap", "parameters": "(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "modifiers": "public static", "return": "List<CDKRMap>", "signature": "List<CDKRMap> getSubgraphAtomsMap(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "full_signature": "public static List<CDKRMap> getSubgraphAtomsMap(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "class_method_signature": "CDKMCS.getSubgraphAtomsMap(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "isSubgraph", "parameters": "(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSubgraph(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)", "full_signature": "public static boolean isSubgraph(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)", "class_method_signature": "CDKMCS.isSubgraph(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "getOverlaps", "parameters": "(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "modifiers": "public static", "return": "List<IAtomContainer>", "signature": "List<IAtomContainer> getOverlaps(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "full_signature": "public static List<IAtomContainer> getOverlaps(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "class_method_signature": "CDKMCS.getOverlaps(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "getBitSet", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public static", "return": "BitSet", "signature": "BitSet getBitSet(IAtomContainer atomContainer)", "full_signature": "public static BitSet getBitSet(IAtomContainer atomContainer)", "class_method_signature": "CDKMCS.getBitSet(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "buildRGraph", "parameters": "(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)", "modifiers": "public static", "return": "CDKRGraph", "signature": "CDKRGraph buildRGraph(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)", "full_signature": "public static CDKRGraph buildRGraph(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)", "class_method_signature": "CDKMCS.buildRGraph(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            BitSet sourceBitSet, BitSet targetBitSet, boolean findAllStructure, boolean findAllMap,\n            boolean shouldMatchBonds)", "modifiers": "public static", "return": "List<List<CDKRMap>>", "signature": "List<List<CDKRMap>> search(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            BitSet sourceBitSet, BitSet targetBitSet, boolean findAllStructure, boolean findAllMap,\n            boolean shouldMatchBonds)", "full_signature": "public static List<List<CDKRMap>> search(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            BitSet sourceBitSet, BitSet targetBitSet, boolean findAllStructure, boolean findAllMap,\n            boolean shouldMatchBonds)", "class_method_signature": "CDKMCS.search(IAtomContainer sourceGraph, IAtomContainer targetGraph,\n            BitSet sourceBitSet, BitSet targetBitSet, boolean findAllStructure, boolean findAllMap,\n            boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "project", "parameters": "(List<CDKRMap> rMapList, IAtomContainer graph, int key)", "modifiers": "public static", "return": "IAtomContainer", "signature": "IAtomContainer project(List<CDKRMap> rMapList, IAtomContainer graph, int key)", "full_signature": "public static IAtomContainer project(List<CDKRMap> rMapList, IAtomContainer graph, int key)", "class_method_signature": "CDKMCS.project(List<CDKRMap> rMapList, IAtomContainer graph, int key)", "testcase": false, "constructor": false}, {"identifier": "projectList", "parameters": "(List<List<CDKRMap>> rMapsList, IAtomContainer graph, int key)", "modifiers": "public static", "return": "ArrayList<IAtomContainer>", "signature": "ArrayList<IAtomContainer> projectList(List<List<CDKRMap>> rMapsList, IAtomContainer graph, int key)", "full_signature": "public static ArrayList<IAtomContainer> projectList(List<List<CDKRMap>> rMapsList, IAtomContainer graph, int key)", "class_method_signature": "CDKMCS.projectList(List<List<CDKRMap>> rMapsList, IAtomContainer graph, int key)", "testcase": false, "constructor": false}, {"identifier": "getMaximum", "parameters": "(ArrayList<IAtomContainer> graphList, boolean shouldMatchBonds)", "modifiers": "private static", "return": "List<IAtomContainer>", "signature": "List<IAtomContainer> getMaximum(ArrayList<IAtomContainer> graphList, boolean shouldMatchBonds)", "full_signature": "private static List<IAtomContainer> getMaximum(ArrayList<IAtomContainer> graphList, boolean shouldMatchBonds)", "class_method_signature": "CDKMCS.getMaximum(ArrayList<IAtomContainer> graphList, boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "checkSingleAtomCases", "parameters": "(IAtomContainer sourceGraph, IAtomContainer targetGraph)", "modifiers": "public static", "return": "List<CDKRMap>", "signature": "List<CDKRMap> checkSingleAtomCases(IAtomContainer sourceGraph, IAtomContainer targetGraph)", "full_signature": "public static List<CDKRMap> checkSingleAtomCases(IAtomContainer sourceGraph, IAtomContainer targetGraph)", "class_method_signature": "CDKMCS.checkSingleAtomCases(IAtomContainer sourceGraph, IAtomContainer targetGraph)", "testcase": false, "constructor": false}, {"identifier": "makeAtomsMapsOfBondsMaps", "parameters": "(List<List<CDKRMap>> list, IAtomContainer sourceGraph,\n            IAtomContainer targetGraph)", "modifiers": "public static", "return": "List<List<CDKRMap>>", "signature": "List<List<CDKRMap>> makeAtomsMapsOfBondsMaps(List<List<CDKRMap>> list, IAtomContainer sourceGraph,\n            IAtomContainer targetGraph)", "full_signature": "public static List<List<CDKRMap>> makeAtomsMapsOfBondsMaps(List<List<CDKRMap>> list, IAtomContainer sourceGraph,\n            IAtomContainer targetGraph)", "class_method_signature": "CDKMCS.makeAtomsMapsOfBondsMaps(List<List<CDKRMap>> list, IAtomContainer sourceGraph,\n            IAtomContainer targetGraph)", "testcase": false, "constructor": false}, {"identifier": "makeAtomsMapOfBondsMap", "parameters": "(List<CDKRMap> list, IAtomContainer sourceGraph,\n            IAtomContainer targetGraph)", "modifiers": "public static", "return": "List<CDKRMap>", "signature": "List<CDKRMap> makeAtomsMapOfBondsMap(List<CDKRMap> list, IAtomContainer sourceGraph,\n            IAtomContainer targetGraph)", "full_signature": "public static List<CDKRMap> makeAtomsMapOfBondsMap(List<CDKRMap> list, IAtomContainer sourceGraph,\n            IAtomContainer targetGraph)", "class_method_signature": "CDKMCS.makeAtomsMapOfBondsMap(List<CDKRMap> list, IAtomContainer sourceGraph,\n            IAtomContainer targetGraph)", "testcase": false, "constructor": false}, {"identifier": "nodeConstructor", "parameters": "(CDKRGraph graph, IAtomContainer ac1, IAtomContainer ac2,\n            boolean shouldMatchBonds)", "modifiers": "private static", "return": "void", "signature": "void nodeConstructor(CDKRGraph graph, IAtomContainer ac1, IAtomContainer ac2,\n            boolean shouldMatchBonds)", "full_signature": "private static void nodeConstructor(CDKRGraph graph, IAtomContainer ac1, IAtomContainer ac2,\n            boolean shouldMatchBonds)", "class_method_signature": "CDKMCS.nodeConstructor(CDKRGraph graph, IAtomContainer ac1, IAtomContainer ac2,\n            boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "isMatchFeasible", "parameters": "(IAtomContainer ac1, IBond bondA1, IAtomContainer ac2, IBond bondA2,\n            boolean shouldMatchBonds)", "modifiers": "private static", "return": "boolean", "signature": "boolean isMatchFeasible(IAtomContainer ac1, IBond bondA1, IAtomContainer ac2, IBond bondA2,\n            boolean shouldMatchBonds)", "full_signature": "private static boolean isMatchFeasible(IAtomContainer ac1, IBond bondA1, IAtomContainer ac2, IBond bondA2,\n            boolean shouldMatchBonds)", "class_method_signature": "CDKMCS.isMatchFeasible(IAtomContainer ac1, IBond bondA1, IAtomContainer ac2, IBond bondA2,\n            boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "arcConstructor", "parameters": "(CDKRGraph graph, IAtomContainer ac1, IAtomContainer ac2)", "modifiers": "private static", "return": "void", "signature": "void arcConstructor(CDKRGraph graph, IAtomContainer ac1, IAtomContainer ac2)", "full_signature": "private static void arcConstructor(CDKRGraph graph, IAtomContainer ac1, IAtomContainer ac2)", "class_method_signature": "CDKMCS.arcConstructor(CDKRGraph graph, IAtomContainer ac1, IAtomContainer ac2)", "testcase": false, "constructor": false}, {"identifier": "hasCommonAtom", "parameters": "(IBond bondA, IBond bondB)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasCommonAtom(IBond bondA, IBond bondB)", "full_signature": "private static boolean hasCommonAtom(IBond bondA, IBond bondB)", "class_method_signature": "CDKMCS.hasCommonAtom(IBond bondA, IBond bondB)", "testcase": false, "constructor": false}, {"identifier": "getCommonSymbol", "parameters": "(IBond bondA, IBond bondB)", "modifiers": "private static", "return": "String", "signature": "String getCommonSymbol(IBond bondA, IBond bondB)", "full_signature": "private static String getCommonSymbol(IBond bondA, IBond bondB)", "class_method_signature": "CDKMCS.getCommonSymbol(IBond bondA, IBond bondB)", "testcase": false, "constructor": false}, {"identifier": "queryAdjacency", "parameters": "(IBond bondA1, IBond bondB1, IBond bondA2, IBond bondB2)", "modifiers": "private static", "return": "boolean", "signature": "boolean queryAdjacency(IBond bondA1, IBond bondB1, IBond bondA2, IBond bondB2)", "full_signature": "private static boolean queryAdjacency(IBond bondA1, IBond bondB1, IBond bondA2, IBond bondB2)", "class_method_signature": "CDKMCS.queryAdjacency(IBond bondA1, IBond bondB1, IBond bondA2, IBond bondB2)", "testcase": false, "constructor": false}, {"identifier": "queryAdjacencyAndOrder", "parameters": "(IBond bond1, IBond bond2, IBond queryBond1, IBond queryBond2)", "modifiers": "private static", "return": "boolean", "signature": "boolean queryAdjacencyAndOrder(IBond bond1, IBond bond2, IBond queryBond1, IBond queryBond2)", "full_signature": "private static boolean queryAdjacencyAndOrder(IBond bond1, IBond bond2, IBond queryBond1, IBond queryBond2)", "class_method_signature": "CDKMCS.queryAdjacencyAndOrder(IBond bond1, IBond bond2, IBond queryBond1, IBond queryBond2)", "testcase": false, "constructor": false}, {"identifier": "testSubgraphHeuristics", "parameters": "(IAtomContainer ac1, IAtomContainer ac2)", "modifiers": "private static", "return": "boolean", "signature": "boolean testSubgraphHeuristics(IAtomContainer ac1, IAtomContainer ac2)", "full_signature": "private static boolean testSubgraphHeuristics(IAtomContainer ac1, IAtomContainer ac2)", "class_method_signature": "CDKMCS.testSubgraphHeuristics(IAtomContainer ac1, IAtomContainer ac2)", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "protected synchronized static", "return": "double", "signature": "double getTimeout()", "full_signature": "protected synchronized static double getTimeout()", "class_method_signature": "CDKMCS.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "getTimeManager", "parameters": "()", "modifiers": "protected synchronized static", "return": "TimeManager", "signature": "TimeManager getTimeManager()", "full_signature": "protected synchronized static TimeManager getTimeManager()", "class_method_signature": "CDKMCS.getTimeManager()", "testcase": false, "constructor": false}, {"identifier": "setTimeManager", "parameters": "(TimeManager aTimeManager)", "modifiers": "protected synchronized static", "return": "void", "signature": "void setTimeManager(TimeManager aTimeManager)", "full_signature": "protected synchronized static void setTimeManager(TimeManager aTimeManager)", "class_method_signature": "CDKMCS.setTimeManager(TimeManager aTimeManager)", "testcase": false, "constructor": false}, {"identifier": "isTimeOut", "parameters": "()", "modifiers": "public synchronized static", "return": "boolean", "signature": "boolean isTimeOut()", "full_signature": "public synchronized static boolean isTimeOut()", "class_method_signature": "CDKMCS.isTimeOut()", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/smsd/algorithm/rgraph/CDKMCS.java"}, "focal_method": {"identifier": "isSubgraph", "parameters": "(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isSubgraph(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)\n            throws CDKException {\n        if (sourceGraph instanceof IQueryAtomContainer) {\n            throw new CDKException(\"The first IAtomContainer must not be an IQueryAtomContainer\");\n        }\n\n        if (targetGraph.getAtomCount() > sourceGraph.getAtomCount()) {\n            return false;\n        }\n        // test for single atom case\n        if (targetGraph.getAtomCount() == 1) {\n            IAtom atom = targetGraph.getAtom(0);\n            for (int i = 0; i < sourceGraph.getAtomCount(); i++) {\n                IAtom atom2 = sourceGraph.getAtom(i);\n                if (atom instanceof IQueryAtom) {\n                    IQueryAtom qAtom = (IQueryAtom) atom;\n                    if (qAtom.matches(atom2)) {\n                        return true;\n                    }\n                } else if (atom2 instanceof IQueryAtom) {\n                    IQueryAtom qAtom = (IQueryAtom) atom2;\n                    if (qAtom.matches(atom)) {\n                        return true;\n                    }\n                } else {\n                    if (atom2.getSymbol().equals(atom.getSymbol())) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        if (!testSubgraphHeuristics(sourceGraph, targetGraph)) {\n            return false;\n        }\n        return (getSubgraphMap(sourceGraph, targetGraph, shouldMatchBonds) != null);\n    }", "signature": "boolean isSubgraph(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)", "full_signature": "public static boolean isSubgraph(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)", "class_method_signature": "CDKMCS.isSubgraph(IAtomContainer sourceGraph, IAtomContainer targetGraph, boolean shouldMatchBonds)", "testcase": false, "constructor": false, "invocations": ["getAtomCount", "getAtomCount", "getAtomCount", "getAtom", "getAtomCount", "getAtom", "matches", "matches", "equals", "getSymbol", "getSymbol", "testSubgraphHeuristics", "getSubgraphMap"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}