{"test_class": {"identifier": "KafkaConsumerFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static SharedKafkaTestResource sharedKafkaTestResource = new SharedKafkaTestResource();", "modifier": "@ClassRule\n    public static", "type": "SharedKafkaTestResource", "declarator": "sharedKafkaTestResource = new SharedKafkaTestResource()", "var_name": "sharedKafkaTestResource"}, {"original_string": "private final KafkaConsumerFactory kafkaConsumerFactory = new KafkaConsumerFactory(\n        new KafkaClientConfigUtil(\n            \"not/used\",\n            \"TestPrefix\"\n        )\n    );", "modifier": "private final", "type": "KafkaConsumerFactory", "declarator": "kafkaConsumerFactory = new KafkaConsumerFactory(\n        new KafkaClientConfigUtil(\n            \"not/used\",\n            \"TestPrefix\"\n        )\n    )", "var_name": "kafkaConsumerFactory"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/kafka/KafkaConsumerFactoryTest.java"}, "test_case": {"identifier": "testBasicConsumerExcludePartitions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBasicConsumerExcludePartitions() {\n        final int maxRecordsPerPoll = 10;\n\n        // Create a topic with 2 partitions, (partitionId 0, 1)\n        final String topicName = \"TestTopic\";\n        sharedKafkaTestResource\n            .getKafkaTestUtils()\n            .createTopic(topicName, 2, (short) 1);\n\n        // Produce 10 records into partition 0 of topic.\n        sharedKafkaTestResource\n            .getKafkaTestUtils()\n            .produceRecords(maxRecordsPerPoll, topicName, 0);\n\n        // Produce 10 records into partition 1 of topic.\n        sharedKafkaTestResource\n            .getKafkaTestUtils()\n            .produceRecords(maxRecordsPerPoll, topicName, 1);\n\n        // Create cluster Config\n        final ClusterConfig clusterConfig = ClusterConfig.newBuilder()\n            .withBrokerHosts(sharedKafkaTestResource.getKafkaConnectString())\n            .build();\n\n        // Create Deserializer Config\n        final DeserializerConfig deserializerConfig = DeserializerConfig.newBuilder()\n            .withKeyDeserializerClass(StringDeserializer.class)\n            .withValueDeserializerClass(StringDeserializer.class)\n            .build();\n\n        // Create Topic Config\n        final TopicConfig topicConfig = new TopicConfig(clusterConfig, deserializerConfig, topicName);\n\n        // Create ClientConfig\n        final ClientConfig clientConfig = ClientConfig.newBuilder()\n            .withConsumerId(\"MyConsumerId\")\n            .withNoFilters()\n            .withPartition(1)\n            .withMaxResultsPerPartition(maxRecordsPerPoll)\n            .withTopicConfig(topicConfig)\n            .build();\n\n        // Create consumer\n        try (final KafkaConsumer<String, String> consumer = kafkaConsumerFactory.createConsumerAndSubscribe(clientConfig)) {\n            // Attempt to consume, should pull first 10\n            ConsumerRecords<String, String> records = consumer.poll(Duration.ofSeconds(2));\n            assertEquals(\"Should have found \" + maxRecordsPerPoll + \" records\", maxRecordsPerPoll, records.count());\n\n            for (final ConsumerRecord<String, String> record: records) {\n                assertEquals(\"Should be from parittion 1 only\", 1, record.partition());\n            }\n\n            // Attempt to consume, should come up empty\n            records = consumer.poll(Duration.ofSeconds(2));\n            assertTrue(\"Should be empty\", records.isEmpty());\n        }\n    }", "signature": "void testBasicConsumerExcludePartitions()", "full_signature": "@Test public void testBasicConsumerExcludePartitions()", "class_method_signature": "KafkaConsumerFactoryTest.testBasicConsumerExcludePartitions()", "testcase": true, "constructor": false, "invocations": ["createTopic", "getKafkaTestUtils", "produceRecords", "getKafkaTestUtils", "produceRecords", "getKafkaTestUtils", "build", "withBrokerHosts", "newBuilder", "getKafkaConnectString", "build", "withValueDeserializerClass", "withKeyDeserializerClass", "newBuilder", "build", "withTopicConfig", "withMaxResultsPerPartition", "withPartition", "withNoFilters", "withConsumerId", "newBuilder", "createConsumerAndSubscribe", "poll", "ofSeconds", "assertEquals", "count", "assertEquals", "partition", "poll", "ofSeconds", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "KafkaConsumerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final KafkaClientConfigUtil configUtil;", "modifier": "private final", "type": "KafkaClientConfigUtil", "declarator": "configUtil", "var_name": "configUtil"}], "methods": [{"identifier": "KafkaConsumerFactory", "parameters": "(final KafkaClientConfigUtil configUtil)", "modifiers": "public", "return": "", "signature": " KafkaConsumerFactory(final KafkaClientConfigUtil configUtil)", "full_signature": "public  KafkaConsumerFactory(final KafkaClientConfigUtil configUtil)", "class_method_signature": "KafkaConsumerFactory.KafkaConsumerFactory(final KafkaClientConfigUtil configUtil)", "testcase": false, "constructor": true}, {"identifier": "createConsumer", "parameters": "(final ClientConfig clientConfig)", "modifiers": "public", "return": "KafkaConsumer", "signature": "KafkaConsumer createConsumer(final ClientConfig clientConfig)", "full_signature": "public KafkaConsumer createConsumer(final ClientConfig clientConfig)", "class_method_signature": "KafkaConsumerFactory.createConsumer(final ClientConfig clientConfig)", "testcase": false, "constructor": false}, {"identifier": "createConsumerAndSubscribe", "parameters": "(final ClientConfig clientConfig)", "modifiers": "public", "return": "KafkaConsumer", "signature": "KafkaConsumer createConsumerAndSubscribe(final ClientConfig clientConfig)", "full_signature": "public KafkaConsumer createConsumerAndSubscribe(final ClientConfig clientConfig)", "class_method_signature": "KafkaConsumerFactory.createConsumerAndSubscribe(final ClientConfig clientConfig)", "testcase": false, "constructor": false}, {"identifier": "buildConsumerConfig", "parameters": "(final ClientConfig clientConfig)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> buildConsumerConfig(final ClientConfig clientConfig)", "full_signature": "private Map<String, Object> buildConsumerConfig(final ClientConfig clientConfig)", "class_method_signature": "KafkaConsumerFactory.buildConsumerConfig(final ClientConfig clientConfig)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/kafka/KafkaConsumerFactory.java"}, "focal_method": {"identifier": "createConsumerAndSubscribe", "parameters": "(final ClientConfig clientConfig)", "modifiers": "public", "return": "KafkaConsumer", "body": "public KafkaConsumer createConsumerAndSubscribe(final ClientConfig clientConfig) {\n        final KafkaConsumer kafkaConsumer = createConsumer(clientConfig);\n\n        // Determine which partitions to subscribe to, for now do all\n        final List<PartitionInfo> partitionInfos = kafkaConsumer.partitionsFor(clientConfig.getTopicConfig().getTopicName());\n\n        // Pull out partitions, convert to topic partitions\n        final Collection<TopicPartition> topicPartitions = new ArrayList<>();\n        for (final PartitionInfo partitionInfo: partitionInfos) {\n            // Skip filtered partitions\n            if (!clientConfig.isPartitionFiltered(partitionInfo.partition())) {\n                topicPartitions.add(new TopicPartition(partitionInfo.topic(), partitionInfo.partition()));\n            }\n        }\n\n        // Assign them.\n        kafkaConsumer.assign(topicPartitions);\n\n        // Return the kafka consumer.\n        return kafkaConsumer;\n    }", "signature": "KafkaConsumer createConsumerAndSubscribe(final ClientConfig clientConfig)", "full_signature": "public KafkaConsumer createConsumerAndSubscribe(final ClientConfig clientConfig)", "class_method_signature": "KafkaConsumerFactory.createConsumerAndSubscribe(final ClientConfig clientConfig)", "testcase": false, "constructor": false, "invocations": ["createConsumer", "partitionsFor", "getTopicName", "getTopicConfig", "isPartitionFiltered", "partition", "add", "topic", "partition", "assign"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}