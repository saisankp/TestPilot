{"test_class": {"identifier": "AgentLaunchGuardConstraintTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SchedulerConfiguration schedulerConfiguration = mock(SchedulerConfiguration.class);", "modifier": "private final", "type": "SchedulerConfiguration", "declarator": "schedulerConfiguration = mock(SchedulerConfiguration.class)", "var_name": "schedulerConfiguration"}, {"original_string": "private final V3JobOperations jobOperations = mock(V3JobOperations.class);", "modifier": "private final", "type": "V3JobOperations", "declarator": "jobOperations = mock(V3JobOperations.class)", "var_name": "jobOperations"}, {"original_string": "private final AgentLaunchGuardConstraint agentLaunchGuardConstraint = new AgentLaunchGuardConstraint(schedulerConfiguration, jobOperations);", "modifier": "private final", "type": "AgentLaunchGuardConstraint", "declarator": "agentLaunchGuardConstraint = new AgentLaunchGuardConstraint(schedulerConfiguration, jobOperations)", "var_name": "agentLaunchGuardConstraint"}, {"original_string": "private final TaskTrackerState taskTrackerState = mock(TaskTrackerState.class);", "modifier": "private final", "type": "TaskTrackerState", "declarator": "taskTrackerState = mock(TaskTrackerState.class)", "var_name": "taskTrackerState"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/scheduler/constraint/AgentLaunchGuardConstraintTest.java"}, "test_case": {"identifier": "agentHasLessThanConcurrentLaunchesLimit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void agentHasLessThanConcurrentLaunchesLimit() {\n        Result result = agentLaunchGuardConstraint.evaluate(\n                createTaskRequest(TASK_ID),\n                createVirtualMachineCurrentStateMock(INSTANCE_ID, Collections.emptyList(), Collections.emptyList()),\n                taskTrackerState);\n        assertThat(result.isSuccessful()).isTrue();\n    }", "signature": "void agentHasLessThanConcurrentLaunchesLimit()", "full_signature": "@Test public void agentHasLessThanConcurrentLaunchesLimit()", "class_method_signature": "AgentLaunchGuardConstraintTest.agentHasLessThanConcurrentLaunchesLimit()", "testcase": true, "constructor": false, "invocations": ["evaluate", "createTaskRequest", "createVirtualMachineCurrentStateMock", "emptyList", "emptyList", "isTrue", "assertThat", "isSuccessful"]}, "focal_class": {"identifier": "AgentLaunchGuardConstraint", "superclass": "", "interfaces": "implements SystemConstraint", "fields": [{"original_string": "public static final String NAME = \"AgentLaunchGuardConstraint\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"AgentLaunchGuardConstraint\"", "var_name": "NAME"}, {"original_string": "private static final Result VALID = new Result(true, null);", "modifier": "private static final", "type": "Result", "declarator": "VALID = new Result(true, null)", "var_name": "VALID"}, {"original_string": "private static final Result INVALID = new Result(false, \"The agent has reached the launch guard limit\");", "modifier": "private static final", "type": "Result", "declarator": "INVALID = new Result(false, \"The agent has reached the launch guard limit\")", "var_name": "INVALID"}, {"original_string": "private final SchedulerConfiguration schedulerConfiguration;", "modifier": "private final", "type": "SchedulerConfiguration", "declarator": "schedulerConfiguration", "var_name": "schedulerConfiguration"}, {"original_string": "private final V3JobOperations v3JobOperations;", "modifier": "private final", "type": "V3JobOperations", "declarator": "v3JobOperations", "var_name": "v3JobOperations"}, {"original_string": "private final AtomicReference<Map<String, Task>> taskIdMapRef = new AtomicReference<>(Collections.emptyMap());", "modifier": "private final", "type": "AtomicReference<Map<String, Task>>", "declarator": "taskIdMapRef = new AtomicReference<>(Collections.emptyMap())", "var_name": "taskIdMapRef"}], "methods": [{"identifier": "AgentLaunchGuardConstraint", "parameters": "(SchedulerConfiguration schedulerConfiguration,\n                                      V3JobOperations v3JobOperations)", "modifiers": "@Inject public", "return": "", "signature": " AgentLaunchGuardConstraint(SchedulerConfiguration schedulerConfiguration,\n                                      V3JobOperations v3JobOperations)", "full_signature": "@Inject public  AgentLaunchGuardConstraint(SchedulerConfiguration schedulerConfiguration,\n                                      V3JobOperations v3JobOperations)", "class_method_signature": "AgentLaunchGuardConstraint.AgentLaunchGuardConstraint(SchedulerConfiguration schedulerConfiguration,\n                                      V3JobOperations v3JobOperations)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "AgentLaunchGuardConstraint.getName()", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void prepare()", "full_signature": "@Override public void prepare()", "class_method_signature": "AgentLaunchGuardConstraint.prepare()", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "modifiers": "@Override public", "return": "Result", "signature": "Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "full_signature": "@Override public Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "class_method_signature": "AgentLaunchGuardConstraint.evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "testcase": false, "constructor": false}, {"identifier": "isAgentLaunchGuardConstraintReason", "parameters": "(String reason)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAgentLaunchGuardConstraintReason(String reason)", "full_signature": "public static boolean isAgentLaunchGuardConstraintReason(String reason)", "class_method_signature": "AgentLaunchGuardConstraint.isAgentLaunchGuardConstraintReason(String reason)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/scheduler/constraint/AgentLaunchGuardConstraint.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState) {\n        if (!schedulerConfiguration.isGlobalTaskLaunchingConstraintEvaluatorEnabled()) {\n            return VALID;\n        }\n\n        int maxLaunchingTasksPerMachine = schedulerConfiguration.getMaxLaunchingTasksPerMachine();\n\n        int assigned = targetVM.getTasksCurrentlyAssigned().size();\n        if (assigned >= maxLaunchingTasksPerMachine) {\n            return INVALID;\n        }\n        int remaining = Math.max(maxLaunchingTasksPerMachine - assigned, 0);\n\n        return isLaunchingLessThanNumberOfTasks(taskIdMapRef.get(), targetVM, remaining) ? VALID : INVALID;\n    }", "signature": "Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "full_signature": "@Override public Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "class_method_signature": "AgentLaunchGuardConstraint.evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "testcase": false, "constructor": false, "invocations": ["isGlobalTaskLaunchingConstraintEvaluatorEnabled", "getMaxLaunchingTasksPerMachine", "size", "getTasksCurrentlyAssigned", "max", "isLaunchingLessThanNumberOfTasks", "get"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}