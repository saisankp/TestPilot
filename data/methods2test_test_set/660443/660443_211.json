{"test_class": {"identifier": "StandardAtomGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Font                  font          = new Font(\"Verdana\", Font.PLAIN, 12);", "modifier": "private final", "type": "Font", "declarator": "font          = new Font(\"Verdana\", Font.PLAIN, 12)", "var_name": "font"}, {"original_string": "private final TextOutline           element       = new TextOutline(\"N\", font);", "modifier": "private final", "type": "TextOutline", "declarator": "element       = new TextOutline(\"N\", font)", "var_name": "element"}, {"original_string": "private final TextOutline           hydrogen      = new TextOutline(\"H\", font);", "modifier": "private final", "type": "TextOutline", "declarator": "hydrogen      = new TextOutline(\"H\", font)", "var_name": "hydrogen"}, {"original_string": "private final StandardAtomGenerator atomGenerator = new StandardAtomGenerator(font);", "modifier": "private final", "type": "StandardAtomGenerator", "declarator": "atomGenerator = new StandardAtomGenerator(font)", "var_name": "atomGenerator"}], "file": "display/renderbasic/src/test/java/org/openscience/cdk/renderer/generators/standard/StandardAtomGeneratorTest.java"}, "test_case": {"identifier": "RgroupSymbolPrime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void RgroupSymbolPrime() {\n        AtomSymbol atomSymbol = atomGenerator.generatePseudoSymbol(\"R'\", HydrogenPosition.Right, null);\n        List<Shape> shapes = atomSymbol.getOutlines();\n        assertThat(shapes.size(), is(2));\n    }", "signature": "void RgroupSymbolPrime()", "full_signature": "@Test public void RgroupSymbolPrime()", "class_method_signature": "StandardAtomGeneratorTest.RgroupSymbolPrime()", "testcase": true, "constructor": false, "invocations": ["generatePseudoSymbol", "getOutlines", "assertThat", "size", "is"]}, "focal_class": {"identifier": "StandardAtomGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static double DEFAULT_ADJUNCT_SPACING_RATIO = 0.15d;", "modifier": "private final static", "type": "double", "declarator": "DEFAULT_ADJUNCT_SPACING_RATIO = 0.15d", "var_name": "DEFAULT_ADJUNCT_SPACING_RATIO"}, {"original_string": "private final static double DEFAULT_SUBSCRIPT_SIZE        = 0.6d;", "modifier": "private final static", "type": "double", "declarator": "DEFAULT_SUBSCRIPT_SIZE        = 0.6d", "var_name": "DEFAULT_SUBSCRIPT_SIZE"}, {"original_string": "private final Font font;", "modifier": "private final", "type": "Font", "declarator": "font", "var_name": "font"}, {"original_string": "private final double scriptSize;", "modifier": "private final", "type": "double", "declarator": "scriptSize", "var_name": "scriptSize"}, {"original_string": "private final double padding;", "modifier": "private final", "type": "double", "declarator": "padding", "var_name": "padding"}, {"original_string": "private final TextOutline defaultHydrogenLabel;", "modifier": "private final", "type": "TextOutline", "declarator": "defaultHydrogenLabel", "var_name": "defaultHydrogenLabel"}, {"original_string": "private static final char BULLET = '\u2022', // '\\u2022'\n            PLUS                     = '+', MINUS = '\u2212'; /", "modifier": "private static final", "type": "char", "declarator": "BULLET = '\u2022', ", "var_name": "BULLET"}], "methods": [{"identifier": "StandardAtomGenerator", "parameters": "(Font font)", "modifiers": "", "return": "", "signature": " StandardAtomGenerator(Font font)", "full_signature": "  StandardAtomGenerator(Font font)", "class_method_signature": "StandardAtomGenerator.StandardAtomGenerator(Font font)", "testcase": false, "constructor": true}, {"identifier": "StandardAtomGenerator", "parameters": "(Font font, double adjunctSpacing, double scriptSize)", "modifiers": "private", "return": "", "signature": " StandardAtomGenerator(Font font, double adjunctSpacing, double scriptSize)", "full_signature": "private  StandardAtomGenerator(Font font, double adjunctSpacing, double scriptSize)", "class_method_signature": "StandardAtomGenerator.StandardAtomGenerator(Font font, double adjunctSpacing, double scriptSize)", "testcase": false, "constructor": true}, {"identifier": "generateSymbol", "parameters": "(IAtomContainer container, IAtom atom, HydrogenPosition position, RendererModel model)", "modifiers": "", "return": "AtomSymbol", "signature": "AtomSymbol generateSymbol(IAtomContainer container, IAtom atom, HydrogenPosition position, RendererModel model)", "full_signature": " AtomSymbol generateSymbol(IAtomContainer container, IAtom atom, HydrogenPosition position, RendererModel model)", "class_method_signature": "StandardAtomGenerator.generateSymbol(IAtomContainer container, IAtom atom, HydrogenPosition position, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "generatePseudoSymbol", "parameters": "(String label, HydrogenPosition position, RendererModel model)", "modifiers": "", "return": "AtomSymbol", "signature": "AtomSymbol generatePseudoSymbol(String label, HydrogenPosition position, RendererModel model)", "full_signature": " AtomSymbol generatePseudoSymbol(String label, HydrogenPosition position, RendererModel model)", "class_method_signature": "StandardAtomGenerator.generatePseudoSymbol(String label, HydrogenPosition position, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "isUpperCase", "parameters": "(char c)", "modifiers": "private", "return": "boolean", "signature": "boolean isUpperCase(char c)", "full_signature": "private boolean isUpperCase(char c)", "class_method_signature": "StandardAtomGenerator.isUpperCase(char c)", "testcase": false, "constructor": false}, {"identifier": "isLowerCase", "parameters": "(char c)", "modifiers": "private", "return": "boolean", "signature": "boolean isLowerCase(char c)", "full_signature": "private boolean isLowerCase(char c)", "class_method_signature": "StandardAtomGenerator.isLowerCase(char c)", "testcase": false, "constructor": false}, {"identifier": "isDigit", "parameters": "(char c)", "modifiers": "private", "return": "boolean", "signature": "boolean isDigit(char c)", "full_signature": "private boolean isDigit(char c)", "class_method_signature": "StandardAtomGenerator.isDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "generateAbbreviatedSymbol", "parameters": "(String label, HydrogenPosition position)", "modifiers": "", "return": "AtomSymbol", "signature": "AtomSymbol generateAbbreviatedSymbol(String label, HydrogenPosition position)", "full_signature": " AtomSymbol generateAbbreviatedSymbol(String label, HydrogenPosition position)", "class_method_signature": "StandardAtomGenerator.generateAbbreviatedSymbol(String label, HydrogenPosition position)", "testcase": false, "constructor": false}, {"identifier": "generateAbbreviationSymbol", "parameters": "(List<String> tokens, HydrogenPosition position)", "modifiers": "", "return": "AtomSymbol", "signature": "AtomSymbol generateAbbreviationSymbol(List<String> tokens, HydrogenPosition position)", "full_signature": " AtomSymbol generateAbbreviationSymbol(List<String> tokens, HydrogenPosition position)", "class_method_signature": "StandardAtomGenerator.generateAbbreviationSymbol(List<String> tokens, HydrogenPosition position)", "testcase": false, "constructor": false}, {"identifier": "generatePeriodicSymbol", "parameters": "(final int number, final int hydrogens, int mass, final int charge,\n                                      final int unpaired, HydrogenPosition position,\n                                      RendererModel opts)", "modifiers": "", "return": "AtomSymbol", "signature": "AtomSymbol generatePeriodicSymbol(final int number, final int hydrogens, int mass, final int charge,\n                                      final int unpaired, HydrogenPosition position,\n                                      RendererModel opts)", "full_signature": " AtomSymbol generatePeriodicSymbol(final int number, final int hydrogens, int mass, final int charge,\n                                      final int unpaired, HydrogenPosition position,\n                                      RendererModel opts)", "class_method_signature": "StandardAtomGenerator.generatePeriodicSymbol(final int number, final int hydrogens, int mass, final int charge,\n                                      final int unpaired, HydrogenPosition position,\n                                      RendererModel opts)", "testcase": false, "constructor": false}, {"identifier": "positionHydrogenLabel", "parameters": "(HydrogenPosition position, TextOutline element, TextOutline hydrogen)", "modifiers": "", "return": "TextOutline", "signature": "TextOutline positionHydrogenLabel(HydrogenPosition position, TextOutline element, TextOutline hydrogen)", "full_signature": " TextOutline positionHydrogenLabel(HydrogenPosition position, TextOutline element, TextOutline hydrogen)", "class_method_signature": "StandardAtomGenerator.positionHydrogenLabel(HydrogenPosition position, TextOutline element, TextOutline hydrogen)", "testcase": false, "constructor": false}, {"identifier": "positionSubscript", "parameters": "(TextOutline label, TextOutline subscript)", "modifiers": "", "return": "TextOutline", "signature": "TextOutline positionSubscript(TextOutline label, TextOutline subscript)", "full_signature": " TextOutline positionSubscript(TextOutline label, TextOutline subscript)", "class_method_signature": "StandardAtomGenerator.positionSubscript(TextOutline label, TextOutline subscript)", "testcase": false, "constructor": false}, {"identifier": "positionSuperscript", "parameters": "(TextOutline label, TextOutline superscript)", "modifiers": "", "return": "TextOutline", "signature": "TextOutline positionSuperscript(TextOutline label, TextOutline superscript)", "full_signature": " TextOutline positionSuperscript(TextOutline label, TextOutline superscript)", "class_method_signature": "StandardAtomGenerator.positionSuperscript(TextOutline label, TextOutline superscript)", "testcase": false, "constructor": false}, {"identifier": "positionAfter", "parameters": "(TextOutline before, TextOutline after)", "modifiers": "", "return": "TextOutline", "signature": "TextOutline positionAfter(TextOutline before, TextOutline after)", "full_signature": " TextOutline positionAfter(TextOutline before, TextOutline after)", "class_method_signature": "StandardAtomGenerator.positionAfter(TextOutline before, TextOutline after)", "testcase": false, "constructor": false}, {"identifier": "positionChargeLabel", "parameters": "(int hydrogens,\n                                    HydrogenPosition position,\n                                    TextOutline charge,\n                                    TextOutline element,\n                                    TextOutline hydrogen)", "modifiers": "", "return": "TextOutline", "signature": "TextOutline positionChargeLabel(int hydrogens,\n                                    HydrogenPosition position,\n                                    TextOutline charge,\n                                    TextOutline element,\n                                    TextOutline hydrogen)", "full_signature": " TextOutline positionChargeLabel(int hydrogens,\n                                    HydrogenPosition position,\n                                    TextOutline charge,\n                                    TextOutline element,\n                                    TextOutline hydrogen)", "class_method_signature": "StandardAtomGenerator.positionChargeLabel(int hydrogens,\n                                    HydrogenPosition position,\n                                    TextOutline charge,\n                                    TextOutline element,\n                                    TextOutline hydrogen)", "testcase": false, "constructor": false}, {"identifier": "positionMassLabel", "parameters": "(TextOutline massLabel, TextOutline elementLabel)", "modifiers": "", "return": "TextOutline", "signature": "TextOutline positionMassLabel(TextOutline massLabel, TextOutline elementLabel)", "full_signature": " TextOutline positionMassLabel(TextOutline massLabel, TextOutline elementLabel)", "class_method_signature": "StandardAtomGenerator.positionMassLabel(TextOutline massLabel, TextOutline elementLabel)", "testcase": false, "constructor": false}, {"identifier": "hydrogenXDodge", "parameters": "(int hydrogens, int mass, TextOutline elementLabel, TextOutline hydrogenLabel,\n                                  TextOutline hydrogenCount, TextOutline massLabel)", "modifiers": "private", "return": "double", "signature": "double hydrogenXDodge(int hydrogens, int mass, TextOutline elementLabel, TextOutline hydrogenLabel,\n                                  TextOutline hydrogenCount, TextOutline massLabel)", "full_signature": "private double hydrogenXDodge(int hydrogens, int mass, TextOutline elementLabel, TextOutline hydrogenLabel,\n                                  TextOutline hydrogenCount, TextOutline massLabel)", "class_method_signature": "StandardAtomGenerator.hydrogenXDodge(int hydrogens, int mass, TextOutline elementLabel, TextOutline hydrogenLabel,\n                                  TextOutline hydrogenCount, TextOutline massLabel)", "testcase": false, "constructor": false}, {"identifier": "isMajorIsotope", "parameters": "(int number, int mass)", "modifiers": "private", "return": "boolean", "signature": "boolean isMajorIsotope(int number, int mass)", "full_signature": "private boolean isMajorIsotope(int number, int mass)", "class_method_signature": "StandardAtomGenerator.isMajorIsotope(int number, int mass)", "testcase": false, "constructor": false}, {"identifier": "unboxSafely", "parameters": "(Integer value, int defaultValue)", "modifiers": "private static", "return": "int", "signature": "int unboxSafely(Integer value, int defaultValue)", "full_signature": "private static int unboxSafely(Integer value, int defaultValue)", "class_method_signature": "StandardAtomGenerator.unboxSafely(Integer value, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "chargeAdjunctText", "parameters": "(final int charge, final int unpaired)", "modifiers": "static", "return": "String", "signature": "String chargeAdjunctText(final int charge, final int unpaired)", "full_signature": "static String chargeAdjunctText(final int charge, final int unpaired)", "class_method_signature": "StandardAtomGenerator.chargeAdjunctText(final int charge, final int unpaired)", "testcase": false, "constructor": false}, {"identifier": "accessPseudoLabel", "parameters": "(IPseudoAtom atom, String defaultLabel)", "modifiers": "static", "return": "String", "signature": "String accessPseudoLabel(IPseudoAtom atom, String defaultLabel)", "full_signature": "static String accessPseudoLabel(IPseudoAtom atom, String defaultLabel)", "class_method_signature": "StandardAtomGenerator.accessPseudoLabel(IPseudoAtom atom, String defaultLabel)", "testcase": false, "constructor": false}], "file": "display/renderbasic/src/main/java/org/openscience/cdk/renderer/generators/standard/StandardAtomGenerator.java"}, "focal_method": {"identifier": "generatePseudoSymbol", "parameters": "(String label, HydrogenPosition position, RendererModel model)", "modifiers": "", "return": "AtomSymbol", "body": "AtomSymbol generatePseudoSymbol(String label, HydrogenPosition position, RendererModel model) {\n\n        final Font stylisedFont;\n        if (model != null && model.get(PseudoFontStyle.class) != 0) {\n            Integer style = model.get(PseudoFontStyle.class);\n            stylisedFont = font.deriveFont(style);\n        } else {\n            stylisedFont = font;\n        }\n\n        List<TextOutline> outlines = new ArrayList<>(3);\n\n        int beg = 0;\n        int pos = 0;\n        int len = label.length();\n\n        // upper case followed by lower case\n        while (pos < len && isUpperCase(label.charAt(pos)))\n            pos++;\n        if (label.charAt(0) != 'R') // Ar is not A^r but 'Ra' is R^a etc\n            while (pos < len && isLowerCase(label.charAt(pos)))\n                pos++;\n\n        if (pos > beg) {\n            outlines.add(new TextOutline(label.substring(beg, pos), stylisedFont));\n            beg = pos;\n            // 2a etc.\n            while (pos < len && isDigit(label.charAt(pos)))\n                pos++;\n            while (pos < len && isLowerCase(label.charAt(pos)))\n                pos++;\n\n            if (pos > beg) {\n                TextOutline outline = new TextOutline(label.substring(beg, pos), stylisedFont);\n                outline = outline.resize(scriptSize, scriptSize);\n                outline = positionSuperscript(outlines.get(0), outline);\n                outlines.add(outline);\n            }\n\n            int numPrimes = 0;\n            PRIMES:\n            while (pos < len) {\n                switch (label.charAt(pos)) {\n                    case '\\'': numPrimes++; break;\n                    case '`': numPrimes++;  break;\n                    case '\u2018': numPrimes++;  break;\n                    case '\u2019': numPrimes++;  break;\n                    case '\u201b': numPrimes++;  break;\n                    case '\u201c': numPrimes+=2; break;\n                    case '\u201d': numPrimes+=2; break;\n                    case '\u2032': numPrimes++;  break;\n                    case '\u2033': numPrimes+=2; break;\n                    case '\u2034': numPrimes+=3; break;\n                    case '\u2057': numPrimes+=4; break;\n                    case '\u2035': numPrimes++;  break;\n                    case '\u2036': numPrimes+=2; break;\n                    case '\u2037': numPrimes+=3; break;\n                    case '\u00b4': numPrimes++;  break;\n                    case '\u02ca': numPrimes++;  break;\n                    case '\u0301': numPrimes++;  break;\n                    case '\u02dd': numPrimes+=2; break;\n                    case '\u030b': numPrimes+=2; break;\n                    default: break PRIMES;\n                }\n                pos++;\n            }\n\n            if (pos < len) {\n                return new AtomSymbol(new TextOutline(label, stylisedFont), Collections.<TextOutline>emptyList());\n            } else {\n                TextOutline outline = null;\n                TextOutline ref = outlines.get(outlines.size()-1);\n                switch (numPrimes) {\n                    case 0: break;\n                    case 1: outline = new TextOutline(\"\u2032\", font); break;\n                    case 2: outline = new TextOutline(\"\u2033\", font); break;\n                    case 3: outline = new TextOutline(\"\u2034\", font); break;\n                    default:\n                        String lab = \"\";\n                        while (numPrimes-->0)\n                            lab += \"\u2032\";\n                        outline = new TextOutline(lab, font);\n                        break;\n                }\n                if (outline != null) {\n                    if (outlines.size() > 1)\n                        outline = outline.resize(scriptSize, scriptSize);\n                    outline = positionSuperscript(ref, outline);\n                    outlines.add(outline);\n                }\n            }\n\n            // line up text\n            for (int i = 1; i < outlines.size(); i++) {\n                TextOutline ref = outlines.get(i - 1);\n                TextOutline curr = outlines.get(i);\n                outlines.set(i, positionAfter(ref, curr));\n            }\n\n            return new AtomSymbol(outlines.get(0),\n                                  outlines.subList(1, outlines.size()));\n        } else {\n            return new AtomSymbol(new TextOutline(label, stylisedFont), Collections.<TextOutline>emptyList());\n        }\n    }", "signature": "AtomSymbol generatePseudoSymbol(String label, HydrogenPosition position, RendererModel model)", "full_signature": " AtomSymbol generatePseudoSymbol(String label, HydrogenPosition position, RendererModel model)", "class_method_signature": "StandardAtomGenerator.generatePseudoSymbol(String label, HydrogenPosition position, RendererModel model)", "testcase": false, "constructor": false, "invocations": ["get", "get", "deriveFont", "length", "isUpperCase", "charAt", "charAt", "isLowerCase", "charAt", "add", "substring", "isDigit", "charAt", "isLowerCase", "charAt", "substring", "resize", "positionSuperscript", "get", "add", "charAt", "emptyList", "get", "size", "size", "resize", "positionSuperscript", "add", "size", "get", "get", "set", "positionAfter", "get", "subList", "size", "emptyList"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}