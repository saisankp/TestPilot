{"test_class": {"identifier": "ExtractorModuleTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [], "file": "omicron-core/src/test/java/com/lyndir/omicron/api/ExtractorModuleTest.java"}, "test_case": {"identifier": "testOnNewTurn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnNewTurn()\n            throws Exception {\n\n        // Create an extractor unit on a tile with fuel.\n        ExtractorModule extractorModule = ExtractorModule.createWithStandardResourceCost().resourceType( ResourceType.FUEL ).speed( 5 );\n        ContainerModule unconnectedContainerModule = ContainerModule.createWithStandardResourceCost()\n                                                                    .resourceType( ResourceType.FUEL )\n                                                                    .capacity( 3 );\n        createUnit( testUnitType( \"Extractor\", extractorModule ), 0, 0 );\n        createUnit( testUnitType( \"Unconnected Container\", unconnectedContainerModule ), 3, 0 );\n        extractorModule.getGameObject().getLocation().get().setResourceQuantity( ResourceType.FUEL, 10 );\n\n        // There is no connected container yet, mining should fail.\n        assertEquals( (int) extractorModule.getGameObject().getLocation().get().getResourceQuantity( ResourceType.FUEL ).get(), 10 );\n        extractorModule.onNewTurn();\n        assertEquals( (int) extractorModule.getGameObject().getLocation().get().getResourceQuantity( ResourceType.FUEL ).get(), 10 );\n\n        // Create a connected container unit.\n        ContainerModule smallConnectedContainerModule = ContainerModule.createWithStandardResourceCost()\n                                                                       .resourceType( ResourceType.FUEL )\n                                                                       .capacity( 3 );\n        createUnit( testUnitType( \"Small Connected Container\", smallConnectedContainerModule ), 1, 0 );\n\n        // Now we should be able to mine enough to fill the container.\n        assertEquals( smallConnectedContainerModule.getAvailable(), 3 );\n        extractorModule.onNewTurn();\n        assertEquals( (int) extractorModule.getGameObject().getLocation().get().getResourceQuantity( ResourceType.FUEL ).get(), 7 );\n        assertEquals( smallConnectedContainerModule.getAvailable(), 0 );\n        extractorModule.onNewTurn();\n        assertEquals( (int) extractorModule.getGameObject().getLocation().get().getResourceQuantity( ResourceType.FUEL ).get(), 7 );\n        assertEquals( smallConnectedContainerModule.getAvailable(), 0 );\n\n        // Create a bigger connected container unit.\n        ContainerModule bigConnectedContainerModule = ContainerModule.createWithStandardResourceCost()\n                                                                     .resourceType( ResourceType.FUEL )\n                                                                     .capacity( 15 );\n        createUnit( testUnitType( \"Big Connected Container\", bigConnectedContainerModule ), 0, 1 );\n\n        // Now we should be able to mine enough to max out the extractor's speed and then empty the tile.\n        assertEquals( smallConnectedContainerModule.getAvailable(), 0 );\n        assertEquals( bigConnectedContainerModule.getAvailable(), 15 );\n        extractorModule.onNewTurn();\n        assertEquals( (int) extractorModule.getGameObject().getLocation().get().getResourceQuantity( ResourceType.FUEL ).get(), 2 );\n        assertEquals( bigConnectedContainerModule.getAvailable(), 10 );\n        extractorModule.onNewTurn();\n        assertFalse( extractorModule.getGameObject().getLocation().get().getResourceQuantity( ResourceType.FUEL ).isPresent() );\n        assertEquals( bigConnectedContainerModule.getAvailable(), 8 );\n        assertEquals( bigConnectedContainerModule.getStock(), 7 );\n    }", "signature": "void testOnNewTurn()", "full_signature": "@Test public void testOnNewTurn()", "class_method_signature": "ExtractorModuleTest.testOnNewTurn()", "testcase": true, "constructor": false, "invocations": ["speed", "resourceType", "createWithStandardResourceCost", "capacity", "resourceType", "createWithStandardResourceCost", "createUnit", "testUnitType", "createUnit", "testUnitType", "setResourceQuantity", "get", "getLocation", "getGameObject", "assertEquals", "get", "getResourceQuantity", "get", "getLocation", "getGameObject", "onNewTurn", "assertEquals", "get", "getResourceQuantity", "get", "getLocation", "getGameObject", "capacity", "resourceType", "createWithStandardResourceCost", "createUnit", "testUnitType", "assertEquals", "getAvailable", "onNewTurn", "assertEquals", "get", "getResourceQuantity", "get", "getLocation", "getGameObject", "assertEquals", "getAvailable", "onNewTurn", "assertEquals", "get", "getResourceQuantity", "get", "getLocation", "getGameObject", "assertEquals", "getAvailable", "capacity", "resourceType", "createWithStandardResourceCost", "createUnit", "testUnitType", "assertEquals", "getAvailable", "assertEquals", "getAvailable", "onNewTurn", "assertEquals", "get", "getResourceQuantity", "get", "getLocation", "getGameObject", "assertEquals", "getAvailable", "onNewTurn", "assertFalse", "isPresent", "getResourceQuantity", "get", "getLocation", "getGameObject", "assertEquals", "getAvailable", "assertEquals", "getStock"]}, "focal_class": {"identifier": "ExtractorModule", "superclass": "extends Module", "interfaces": "implements IExtractorModule, IExtractorModuleController", "fields": [{"original_string": "@SuppressWarnings(\"UnusedDeclaration\")\n    private static final Logger logger = Logger.get( ExtractorModule.class );", "modifier": "@SuppressWarnings(\"UnusedDeclaration\")\n    private static final", "type": "Logger", "declarator": "logger = Logger.get( ExtractorModule.class )", "var_name": "logger"}, {"original_string": "private final ResourceType resourceType;", "modifier": "private final", "type": "ResourceType", "declarator": "resourceType", "var_name": "resourceType"}, {"original_string": "private final int          speed;", "modifier": "private final", "type": "int", "declarator": "speed", "var_name": "speed"}], "methods": [{"identifier": "ExtractorModule", "parameters": "(final ImmutableResourceCost resourceCost, final ResourceType resourceType, final int speed)", "modifiers": "protected", "return": "", "signature": " ExtractorModule(final ImmutableResourceCost resourceCost, final ResourceType resourceType, final int speed)", "full_signature": "protected  ExtractorModule(final ImmutableResourceCost resourceCost, final ResourceType resourceType, final int speed)", "class_method_signature": "ExtractorModule.ExtractorModule(final ImmutableResourceCost resourceCost, final ResourceType resourceType, final int speed)", "testcase": false, "constructor": true}, {"identifier": "createWithStandardResourceCost", "parameters": "()", "modifiers": "static", "return": "Builder0", "signature": "Builder0 createWithStandardResourceCost()", "full_signature": "static Builder0 createWithStandardResourceCost()", "class_method_signature": "ExtractorModule.createWithStandardResourceCost()", "testcase": false, "constructor": false}, {"identifier": "createWithExtraResourceCost", "parameters": "(final ImmutableResourceCost resourceCost)", "modifiers": "static", "return": "Builder0", "signature": "Builder0 createWithExtraResourceCost(final ImmutableResourceCost resourceCost)", "full_signature": "static Builder0 createWithExtraResourceCost(final ImmutableResourceCost resourceCost)", "class_method_signature": "ExtractorModule.createWithExtraResourceCost(final ImmutableResourceCost resourceCost)", "testcase": false, "constructor": false}, {"identifier": "getResourceType", "parameters": "()", "modifiers": "@Override public", "return": "ResourceType", "signature": "ResourceType getResourceType()", "full_signature": "@Override public ResourceType getResourceType()", "class_method_signature": "ExtractorModule.getResourceType()", "testcase": false, "constructor": false}, {"identifier": "getSpeed", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSpeed()", "full_signature": "@Override public int getSpeed()", "class_method_signature": "ExtractorModule.getSpeed()", "testcase": false, "constructor": false}, {"identifier": "onReset", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onReset()", "full_signature": "@Override protected void onReset()", "class_method_signature": "ExtractorModule.onReset()", "testcase": false, "constructor": false}, {"identifier": "onNewTurn", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onNewTurn()", "full_signature": "@Override protected void onNewTurn()", "class_method_signature": "ExtractorModule.onNewTurn()", "testcase": false, "constructor": false}, {"identifier": "getController", "parameters": "()", "modifiers": "@Override public", "return": "IExtractorModuleController", "signature": "IExtractorModuleController getController()", "full_signature": "@Override public IExtractorModuleController getController()", "class_method_signature": "ExtractorModule.getController()", "testcase": false, "constructor": false}, {"identifier": "getModule", "parameters": "()", "modifiers": "@Override public", "return": "IExtractorModule", "signature": "IExtractorModule getModule()", "full_signature": "@Override public IExtractorModule getModule()", "class_method_signature": "ExtractorModule.getModule()", "testcase": false, "constructor": false}], "file": "omicron-core/src/main/java/com/lyndir/omicron/api/ExtractorModule.java"}, "focal_method": {"identifier": "onNewTurn", "parameters": "()", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void onNewTurn() {\n        // Mine some resources.\n        Tile location = getGameObject().getLocation().get();\n        Maybe<Integer> availableResources = location.getResourceQuantity( resourceType );\n        if (!availableResources.isPresent())\n            // No resources left to mine.\n            return;\n\n        int newAvailableResources = Math.max( 0, availableResources.get() - speed );\n        int minedResources = availableResources.get() - newAvailableResources;\n        if (!availableResources.isPresent())\n            // No speed left for mining.\n            return;\n\n        // Initialize path finding functions.\n        PredicateNN<IGameObject> foundFunction = gameObject -> {\n            for (final ContainerModule containerModule : gameObject.getModules( ModuleType.CONTAINER ))\n                if (containerModule.getAvailable() > 0)\n                    return true;\n\n            return false;\n        };\n        NNFunctionNN<PathUtils.Step<IGameObject>, Double> costFunction = gameObjectStep -> 1d;\n        NNFunctionNN<IGameObject, Stream<? extends IGameObject>> neighboursFunction = neighbour -> //\n                neighbour.getLocation().get().neighbours().stream() //\n                        .map( new Function<ITile, IGameObject>() {\n                            @Override\n                            public IGameObject apply(final ITile tile) {\n                                return tile.getContents().orNull();\n                            }\n                        } ).filter( gameObject -> gameObject != null );\n\n        // Find paths to containers and deposit mined resources.\n        while (minedResources > 0) {\n            Optional<PathUtils.Path<IGameObject>> path = PathUtils.find( getGameObject(), foundFunction, costFunction,\n                                                                         Constants.MAX_DISTANCE_TO_CONTAINER, neighboursFunction );\n            if (!path.isPresent())\n                // No more containers with available capacity.\n                break;\n\n            for (final ContainerModule containerModule : path.get().getTarget().getModules( ModuleType.CONTAINER ))\n                minedResources -= containerModule.addStock( minedResources );\n        }\n\n        // If we have minedResources left that we weren't able to stock, put them back in the tile (ie. don't extract them).\n        newAvailableResources += minedResources;\n\n        // Update the amount of resources left in the tile after this turn's extraction.\n        location.setResourceQuantity( resourceType, newAvailableResources );\n        logger.trc( \"unstocked resources: %d %s, left in tile: %d\", minedResources, resourceType, newAvailableResources );\n    }", "signature": "void onNewTurn()", "full_signature": "@Override protected void onNewTurn()", "class_method_signature": "ExtractorModule.onNewTurn()", "testcase": false, "constructor": false, "invocations": ["get", "getLocation", "getGameObject", "getResourceQuantity", "isPresent", "max", "get", "get", "isPresent", "getModules", "getAvailable", "filter", "map", "stream", "neighbours", "get", "getLocation", "orNull", "getContents", "find", "getGameObject", "isPresent", "getModules", "getTarget", "get", "addStock", "setResourceQuantity", "trc"]}, "repository": {"repo_id": 5915204, "url": "https://github.com/Lyndir/Omicron", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 3199, "license": "licensed"}}