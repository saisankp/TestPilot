{"test_class": {"identifier": "ExpiryCheckHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HTTP_HEADER_X_EXPIRE_AFTER = \"X-Expire-After\";", "modifier": "private static final", "type": "String", "declarator": "HTTP_HEADER_X_EXPIRE_AFTER = \"X-Expire-After\"", "var_name": "HTTP_HEADER_X_EXPIRE_AFTER"}, {"original_string": "private static final String HTTP_HEADER_X_QUEUE_EXPIRE_AFTER = \"X-Queue-Expire-After\";", "modifier": "private static final", "type": "String", "declarator": "HTTP_HEADER_X_QUEUE_EXPIRE_AFTER = \"X-Queue-Expire-After\"", "var_name": "HTTP_HEADER_X_QUEUE_EXPIRE_AFTER"}], "file": "gateleen-queue/src/test/java/org/swisspush/gateleen/queue/expiry/ExpiryCheckHandlerTest.java"}, "test_case": {"identifier": "getExpireAfter_returnsNullWhenHeaderIsMinusOne", "parameters": "(TestContext testContext)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getExpireAfter_returnsNullWhenHeaderIsMinusOne(TestContext testContext) {\n        // Mock\n        final String headerValue = \"-1\";\n        final MultiMap headers = createHeaderReturningSimpleValue(HTTP_HEADER_X_EXPIRE_AFTER, headerValue);\n\n        // Trigger work\n        final Integer returnedExpireValue = ExpiryCheckHandler.getExpireAfter(headers);\n\n        // Assert\n        testContext.assertNull(returnedExpireValue);\n    }", "signature": "void getExpireAfter_returnsNullWhenHeaderIsMinusOne(TestContext testContext)", "full_signature": "@Test public void getExpireAfter_returnsNullWhenHeaderIsMinusOne(TestContext testContext)", "class_method_signature": "ExpiryCheckHandlerTest.getExpireAfter_returnsNullWhenHeaderIsMinusOne(TestContext testContext)", "testcase": true, "constructor": false, "invocations": ["createHeaderReturningSimpleValue", "getExpireAfter", "assertNull"]}, "focal_class": {"identifier": "ExpiryCheckHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String SERVER_TIMESTAMP_HEADER = \"X-Server-Timestamp\";", "modifier": "public static final", "type": "String", "declarator": "SERVER_TIMESTAMP_HEADER = \"X-Server-Timestamp\"", "var_name": "SERVER_TIMESTAMP_HEADER"}, {"original_string": "public static final String EXPIRE_AFTER_HEADER = \"X-Expire-After\";", "modifier": "public static final", "type": "String", "declarator": "EXPIRE_AFTER_HEADER = \"X-Expire-After\"", "var_name": "EXPIRE_AFTER_HEADER"}, {"original_string": "public static final String QUEUE_EXPIRE_AFTER_HEADER = \"x-queue-expire-after\";", "modifier": "public static final", "type": "String", "declarator": "QUEUE_EXPIRE_AFTER_HEADER = \"x-queue-expire-after\"", "var_name": "QUEUE_EXPIRE_AFTER_HEADER"}, {"original_string": "private static Logger log = LoggerFactory.getLogger(ExpiryCheckHandler.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ExpiryCheckHandler.class)", "var_name": "log"}, {"original_string": "private static DateTimeFormatter dfISO8601 = ISODateTimeFormat.dateTime().withZone(DateTimeZone.forID(\"Europe/Zurich\"));", "modifier": "private static", "type": "DateTimeFormatter", "declarator": "dfISO8601 = ISODateTimeFormat.dateTime().withZone(DateTimeZone.forID(\"Europe/Zurich\"))", "var_name": "dfISO8601"}, {"original_string": "private static DateTimeFormatter dfISO8601Parser = ISODateTimeFormat.dateTimeParser().withZone(DateTimeZone.forID(\"Europe/Zurich\"));", "modifier": "private static", "type": "DateTimeFormatter", "declarator": "dfISO8601Parser = ISODateTimeFormat.dateTimeParser().withZone(DateTimeZone.forID(\"Europe/Zurich\"))", "var_name": "dfISO8601Parser"}], "methods": [{"identifier": "ExpiryCheckHandler", "parameters": "()", "modifiers": "private", "return": "", "signature": " ExpiryCheckHandler()", "full_signature": "private  ExpiryCheckHandler()", "class_method_signature": "ExpiryCheckHandler.ExpiryCheckHandler()", "testcase": false, "constructor": true}, {"identifier": "updateServerTimestampHeader", "parameters": "(HttpRequest request)", "modifiers": "public static", "return": "void", "signature": "void updateServerTimestampHeader(HttpRequest request)", "full_signature": "public static void updateServerTimestampHeader(HttpRequest request)", "class_method_signature": "ExpiryCheckHandler.updateServerTimestampHeader(HttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "updateServerTimestampHeader", "parameters": "(MultiMap headers)", "modifiers": "public static", "return": "void", "signature": "void updateServerTimestampHeader(MultiMap headers)", "full_signature": "public static void updateServerTimestampHeader(MultiMap headers)", "class_method_signature": "ExpiryCheckHandler.updateServerTimestampHeader(MultiMap headers)", "testcase": false, "constructor": false}, {"identifier": "getExpireAfter", "parameters": "(MultiMap headers)", "modifiers": "public static", "return": "Integer", "signature": "Integer getExpireAfter(MultiMap headers)", "full_signature": "public static Integer getExpireAfter(MultiMap headers)", "class_method_signature": "ExpiryCheckHandler.getExpireAfter(MultiMap headers)", "testcase": false, "constructor": false}, {"identifier": "getExpireAfterConcerningCaseOfCorruptHeaderAndInfinite", "parameters": "(MultiMap headers)", "modifiers": "public static", "return": "Optional<Integer>", "signature": "Optional<Integer> getExpireAfterConcerningCaseOfCorruptHeaderAndInfinite(MultiMap headers)", "full_signature": "public static Optional<Integer> getExpireAfterConcerningCaseOfCorruptHeaderAndInfinite(MultiMap headers)", "class_method_signature": "ExpiryCheckHandler.getExpireAfterConcerningCaseOfCorruptHeaderAndInfinite(MultiMap headers)", "testcase": false, "constructor": false}, {"identifier": "getQueueExpireAfter", "parameters": "(MultiMap headers)", "modifiers": "public static", "return": "Integer", "signature": "Integer getQueueExpireAfter(MultiMap headers)", "full_signature": "public static Integer getQueueExpireAfter(MultiMap headers)", "class_method_signature": "ExpiryCheckHandler.getQueueExpireAfter(MultiMap headers)", "testcase": false, "constructor": false}, {"identifier": "getExpireValue", "parameters": "( final String expirationTimeout )", "modifiers": "private static", "return": "Integer", "signature": "Integer getExpireValue( final String expirationTimeout )", "full_signature": "private static Integer getExpireValue( final String expirationTimeout )", "class_method_signature": "ExpiryCheckHandler.getExpireValue( final String expirationTimeout )", "testcase": false, "constructor": false}, {"identifier": "isExpired", "parameters": "(MultiMap headers, Long timestamp)", "modifiers": "public static", "return": "boolean", "signature": "boolean isExpired(MultiMap headers, Long timestamp)", "full_signature": "public static boolean isExpired(MultiMap headers, Long timestamp)", "class_method_signature": "ExpiryCheckHandler.isExpired(MultiMap headers, Long timestamp)", "testcase": false, "constructor": false}, {"identifier": "getExpirationTime", "parameters": "(int expireAfter)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime getExpirationTime(int expireAfter)", "full_signature": "public static DateTime getExpirationTime(int expireAfter)", "class_method_signature": "ExpiryCheckHandler.getExpirationTime(int expireAfter)", "testcase": false, "constructor": false}, {"identifier": "getExpirationTimeAsString", "parameters": "(int expireAfter)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> getExpirationTimeAsString(int expireAfter)", "full_signature": "public static Optional<String> getExpirationTimeAsString(int expireAfter)", "class_method_signature": "ExpiryCheckHandler.getExpirationTimeAsString(int expireAfter)", "testcase": false, "constructor": false}, {"identifier": "parseDateTime", "parameters": "(String datetime)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime parseDateTime(String datetime)", "full_signature": "public static DateTime parseDateTime(String datetime)", "class_method_signature": "ExpiryCheckHandler.parseDateTime(String datetime)", "testcase": false, "constructor": false}, {"identifier": "printDateTime", "parameters": "(DateTime datetime)", "modifiers": "public static", "return": "String", "signature": "String printDateTime(DateTime datetime)", "full_signature": "public static String printDateTime(DateTime datetime)", "class_method_signature": "ExpiryCheckHandler.printDateTime(DateTime datetime)", "testcase": false, "constructor": false}, {"identifier": "getExpirationTime", "parameters": "(DateTime timestamp, int expireAfter)", "modifiers": "private static", "return": "DateTime", "signature": "DateTime getExpirationTime(DateTime timestamp, int expireAfter)", "full_signature": "private static DateTime getExpirationTime(DateTime timestamp, int expireAfter)", "class_method_signature": "ExpiryCheckHandler.getExpirationTime(DateTime timestamp, int expireAfter)", "testcase": false, "constructor": false}, {"identifier": "setExpireAfter", "parameters": "(HttpServerRequest request, int expireAfter)", "modifiers": "public static", "return": "void", "signature": "void setExpireAfter(HttpServerRequest request, int expireAfter)", "full_signature": "public static void setExpireAfter(HttpServerRequest request, int expireAfter)", "class_method_signature": "ExpiryCheckHandler.setExpireAfter(HttpServerRequest request, int expireAfter)", "testcase": false, "constructor": false}, {"identifier": "setQueueExpireAfter", "parameters": "(MultiMap headers, int queueExpireAfter)", "modifiers": "public static", "return": "void", "signature": "void setQueueExpireAfter(MultiMap headers, int queueExpireAfter)", "full_signature": "public static void setQueueExpireAfter(MultiMap headers, int queueExpireAfter)", "class_method_signature": "ExpiryCheckHandler.setQueueExpireAfter(MultiMap headers, int queueExpireAfter)", "testcase": false, "constructor": false}, {"identifier": "setFieldValue", "parameters": "( MultiMap headers, String field, int expireValue )", "modifiers": "private static", "return": "void", "signature": "void setFieldValue( MultiMap headers, String field, int expireValue )", "full_signature": "private static void setFieldValue( MultiMap headers, String field, int expireValue )", "class_method_signature": "ExpiryCheckHandler.setFieldValue( MultiMap headers, String field, int expireValue )", "testcase": false, "constructor": false}], "file": "gateleen-queue/src/main/java/org/swisspush/gateleen/queue/expiry/ExpiryCheckHandler.java"}, "focal_method": {"identifier": "getExpireAfter", "parameters": "(MultiMap headers)", "modifiers": "public static", "return": "Integer", "body": "public static Integer getExpireAfter(MultiMap headers) {\n        try {\n            Integer ans = getExpireValue(headers.get(EXPIRE_AFTER_HEADER));\n            // Convert -1 to null\n            return (ans != null && ans == -1) ? null : ans;\n        } catch (NumberFormatException e) {\n            // Treat corrupt header same as it were not set at all.\n            // This is to keep backward compatibility to previous version of getExpireValue(MultiMap,String).\n            return null;\n        }\n    }", "signature": "Integer getExpireAfter(MultiMap headers)", "full_signature": "public static Integer getExpireAfter(MultiMap headers)", "class_method_signature": "ExpiryCheckHandler.getExpireAfter(MultiMap headers)", "testcase": false, "constructor": false, "invocations": ["getExpireValue", "get"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}