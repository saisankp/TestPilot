{"test_class": {"identifier": "JcrNodeTest", "superclass": "extends MultiUseAbstractTest", "interfaces": "", "fields": [{"original_string": "private AbstractJcrNode hybrid;", "modifier": "private", "type": "AbstractJcrNode", "declarator": "hybrid", "var_name": "hybrid"}, {"original_string": "private AbstractJcrNode altima;", "modifier": "private", "type": "AbstractJcrNode", "declarator": "altima", "var_name": "altima"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/JcrNodeTest.java"}, "test_case": {"identifier": "shouldRetrieveReferenceProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldRetrieveReferenceProperties() throws Exception {\n        Node referenceableNode = session.getRootNode().addNode(\"referenceable\");\n        referenceableNode.addMixin(JcrMixLexicon.REFERENCEABLE.toString());\n\n        Node node1 = session.getRootNode().addNode(\"node1\");\n        Property prop1 = node1.setProperty(\"prop1\", session.getValueFactory().createValue(referenceableNode, false));\n        Property prop2 = node1.setProperty(\"prop2\", session.getValueFactory().createValue(referenceableNode, true));\n\n        Node node2 = session.getRootNode().addNode(\"node2\");\n        Property prop3 = node2.setProperty(\"prop3\", session.getValueFactory().createValue(referenceableNode, false));\n        Property prop4 = node2.setProperty(\"prop4\", session.getValueFactory().createValue(referenceableNode, true));\n\n        session.save();\n\n        try {\n            // check all strong references\n            PropertyIterator propertyIterator = referenceableNode.getReferences();\n            assertEquals(2, propertyIterator.getSize());\n            Set<String> propertyNames = new HashSet<String>(2);\n            while (propertyIterator.hasNext()) {\n                propertyNames.add(propertyIterator.nextProperty().getName());\n            }\n            assertTrue(propertyNames.contains(prop1.getName()) && propertyNames.contains(prop3.getName()));\n\n            propertyIterator = referenceableNode.getReferences(\"prop1\");\n            assertEquals(1, propertyIterator.getSize());\n            assertEquals(prop1.getName(), propertyIterator.nextProperty().getName());\n\n            propertyIterator = referenceableNode.getReferences(\"unknown\");\n            assertEquals(0, propertyIterator.getSize());\n\n            // check all weak references\n            propertyIterator = referenceableNode.getWeakReferences();\n            assertEquals(2, propertyIterator.getSize());\n            propertyNames = new HashSet<String>(2);\n            while (propertyIterator.hasNext()) {\n                propertyNames.add(propertyIterator.nextProperty().getName());\n            }\n            assertTrue(propertyNames.contains(prop2.getName()) && propertyNames.contains(prop4.getName()));\n\n            propertyIterator = referenceableNode.getWeakReferences(\"prop4\");\n            assertEquals(1, propertyIterator.getSize());\n            assertEquals(prop4.getName(), propertyIterator.nextProperty().getName());\n\n            propertyIterator = referenceableNode.getWeakReferences(\"unknown\");\n            assertEquals(0, propertyIterator.getSize());\n        } finally {\n            node1.remove();\n            node2.remove();\n            referenceableNode.remove();\n            session.save();\n        }\n    }", "signature": "void shouldRetrieveReferenceProperties()", "full_signature": "@Test public void shouldRetrieveReferenceProperties()", "class_method_signature": "JcrNodeTest.shouldRetrieveReferenceProperties()", "testcase": true, "constructor": false, "invocations": ["addNode", "getRootNode", "addMixin", "toString", "addNode", "getRootNode", "setProperty", "createValue", "getValueFactory", "setProperty", "createValue", "getValueFactory", "addNode", "getRootNode", "setProperty", "createValue", "getValueFactory", "setProperty", "createValue", "getValueFactory", "save", "getReferences", "assertEquals", "getSize", "hasNext", "add", "getName", "nextProperty", "assertTrue", "contains", "getName", "contains", "getName", "getReferences", "assertEquals", "getSize", "assertEquals", "getName", "getName", "nextProperty", "getReferences", "assertEquals", "getSize", "getWeakReferences", "assertEquals", "getSize", "hasNext", "add", "getName", "nextProperty", "assertTrue", "contains", "getName", "contains", "getName", "getWeakReferences", "assertEquals", "getSize", "assertEquals", "getName", "getName", "nextProperty", "getWeakReferences", "assertEquals", "getSize", "remove", "remove", "remove", "save"]}, "focal_class": {"identifier": "JcrNode", "superclass": "extends AbstractJcrNode", "interfaces": "", "fields": [], "methods": [{"identifier": "JcrNode", "parameters": "( JcrSession session,\n             NodeKey nodeKey )", "modifiers": "", "return": "", "signature": " JcrNode( JcrSession session,\n             NodeKey nodeKey )", "full_signature": "  JcrNode( JcrSession session,\n             NodeKey nodeKey )", "class_method_signature": "JcrNode.JcrNode( JcrSession session,\n             NodeKey nodeKey )", "testcase": false, "constructor": true}, {"identifier": "isRoot", "parameters": "()", "modifiers": "@Override final", "return": "boolean", "signature": "boolean isRoot()", "full_signature": "@Override final boolean isRoot()", "class_method_signature": "JcrNode.isRoot()", "testcase": false, "constructor": false}, {"identifier": "type", "parameters": "()", "modifiers": "@Override", "return": "Type", "signature": "Type type()", "full_signature": "@Override Type type()", "class_method_signature": "JcrNode.type()", "testcase": false, "constructor": false}, {"identifier": "getIndex", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getIndex()", "full_signature": "@Override public int getIndex()", "class_method_signature": "JcrNode.getIndex()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "JcrNode.getName()", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "@Override public", "return": "AbstractJcrNode", "signature": "AbstractJcrNode getParent()", "full_signature": "@Override public AbstractJcrNode getParent()", "class_method_signature": "JcrNode.getParent()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPath()", "full_signature": "@Override public String getPath()", "class_method_signature": "JcrNode.getPath()", "testcase": false, "constructor": false}, {"identifier": "isShared", "parameters": "()", "modifiers": "@Override", "return": "boolean", "signature": "boolean isShared()", "full_signature": "@Override boolean isShared()", "class_method_signature": "JcrNode.isShared()", "testcase": false, "constructor": false}, {"identifier": "doRemove", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doRemove()", "full_signature": "@Override protected void doRemove()", "class_method_signature": "JcrNode.doRemove()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/JcrNode.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getName() throws RepositoryException {\n        return segment().getName().getString(namespaces());\n    }", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "JcrNode.getName()", "testcase": false, "constructor": false, "invocations": ["getString", "getName", "segment", "namespaces"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}