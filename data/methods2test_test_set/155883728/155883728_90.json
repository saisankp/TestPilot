{"test_class": {"identifier": "PrivilegeXmlExporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final File testBaseDir = new File(\"target/repos/PrivilegeXmlExporterTest\");", "modifier": "final", "type": "File", "declarator": "testBaseDir = new File(\"target/repos/PrivilegeXmlExporterTest\")", "var_name": "testBaseDir"}], "file": "webster/src/test/java/net/adamcin/oakpal/webster/PrivilegeXmlExporterTest.java"}, "test_case": {"identifier": "testWritePrivileges_defaults", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWritePrivileges_defaults() throws Exception {\n        final File tempDir = new File(testBaseDir, \"testWritePrivileges_defaults\");\n        final File fromRepoDir = new File(tempDir, \"fromRepo/segmentstore\");\n        final File toRepoDir = new File(tempDir, \"toRepo/segmentstore\");\n        final File exportedXml = new File(tempDir, \"exported.xml\");\n\n        TestUtil.prepareRepo(fromRepoDir, session -> {\n            final URL aemPrivileges = getClass().getResource(\"/aem_privileges.xml\");\n            TestUtil.installPrivilegesFromURL(session, aemPrivileges);\n        });\n\n        if (exportedXml.exists()) {\n            exportedXml.delete();\n        }\n\n        TestUtil.withReadOnlyFixture(fromRepoDir, session -> {\n            final Workspace workspace = session.getWorkspace();\n            final PrivilegeManager privilegeManager = ((JackrabbitWorkspace) workspace).getPrivilegeManager();\n\n            assertNotNull(\"crx:replicate should be imported\",\n                    privilegeManager.getPrivilege(\"crx:replicate\"));\n            assertNotNull(\"cq:storeUGC should be imported\",\n                    privilegeManager.getPrivilege(\"cq:storeUGC\"));\n\n            PrivilegeXmlExporter.writePrivileges(() -> new OutputStreamWriter(\n                            new FileOutputStream(exportedXml)),\n                    session, null, true);\n        });\n\n        TestUtil.prepareRepo(toRepoDir, session -> {\n            final URL exportedUrl = exportedXml.toURL();\n            resultNothing1((URL url) -> TestUtil.installPrivilegesWithIndivResults(session, url)).apply(exportedUrl);\n        });\n\n        TestUtil.withReadOnlyFixture(toRepoDir, session -> {\n            final Workspace workspace = session.getWorkspace();\n            final PrivilegeManager privilegeManager = ((JackrabbitWorkspace) workspace).getPrivilegeManager();\n\n            assertNotNull(\"crx:replicate should be imported\",\n                    privilegeManager.getPrivilege(\"crx:replicate\"));\n        });\n    }", "signature": "void testWritePrivileges_defaults()", "full_signature": "@Test public void testWritePrivileges_defaults()", "class_method_signature": "PrivilegeXmlExporterTest.testWritePrivileges_defaults()", "testcase": true, "constructor": false, "invocations": ["prepareRepo", "getResource", "getClass", "installPrivilegesFromURL", "exists", "delete", "withReadOnlyFixture", "getWorkspace", "getPrivilegeManager", "assertNotNull", "getPrivilege", "assertNotNull", "getPrivilege", "writePrivileges", "prepareRepo", "toURL", "apply", "resultNothing1", "installPrivilegesWithIndivResults", "withReadOnlyFixture", "getWorkspace", "getPrivilegeManager", "assertNotNull", "getPrivilege"]}, "focal_class": {"identifier": "PrivilegeXmlExporter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "PrivilegeXmlExporter", "parameters": "()", "modifiers": "private", "return": "", "signature": " PrivilegeXmlExporter()", "full_signature": "private  PrivilegeXmlExporter()", "class_method_signature": "PrivilegeXmlExporter.PrivilegeXmlExporter()", "testcase": false, "constructor": true}, {"identifier": "writePrivileges", "parameters": "(final WriterOpener writerOpener,\n                                       final Session session,\n                                       final List<String> onlyNames,\n                                       final boolean includeBuiltins)", "modifiers": "public static", "return": "void", "signature": "void writePrivileges(final WriterOpener writerOpener,\n                                       final Session session,\n                                       final List<String> onlyNames,\n                                       final boolean includeBuiltins)", "full_signature": "public static void writePrivileges(final WriterOpener writerOpener,\n                                       final Session session,\n                                       final List<String> onlyNames,\n                                       final boolean includeBuiltins)", "class_method_signature": "PrivilegeXmlExporter.writePrivileges(final WriterOpener writerOpener,\n                                       final Session session,\n                                       final List<String> onlyNames,\n                                       final boolean includeBuiltins)", "testcase": false, "constructor": false}], "file": "webster/src/main/java/net/adamcin/oakpal/webster/PrivilegeXmlExporter.java"}, "focal_method": {"identifier": "writePrivileges", "parameters": "(final WriterOpener writerOpener,\n                                       final Session session,\n                                       final List<String> onlyNames,\n                                       final boolean includeBuiltins)", "modifiers": "public static", "return": "void", "body": "public static void writePrivileges(final WriterOpener writerOpener,\n                                       final Session session,\n                                       final List<String> onlyNames,\n                                       final boolean includeBuiltins)\n            throws RepositoryException, IOException {\n\n        final Workspace workspace = session.getWorkspace();\n        if (!(workspace instanceof JackrabbitWorkspace)) {\n            throw new RepositoryException(\"Workspace must be instance of JackrabbitWorkspace, but isn't. type: \" +\n                    workspace.getClass().getName());\n        }\n\n        // get a name mapper function\n        final NamePathResolver resolver = new DefaultNamePathResolver(session);\n        final Function<String, Name> mapper = Fun.tryOrDefault1(resolver::getQName, null);\n        // first resolve the builtins to qualified Names\n        final Set<Name> builtinPrivileges = JsonCnd.BUILTIN_PRIVILEGES.stream()\n                .map(mapper).filter(Objects::nonNull).collect(toSet());\n        // create the builtinFilter for reuse\n        final Predicate<Name> builtinFilter = includeBuiltins\n                ? name -> true\n                : ((Predicate<Name>) builtinPrivileges::contains).negate();\n        // construct the desiredPrivileges set based on the names argument, filtering by the above builtinFilter\n        final Set<Name> explicitNames = (onlyNames != null)\n                ? onlyNames.stream().map(mapper).filter(Objects::nonNull).filter(builtinFilter).collect(toSet())\n                : Collections.emptySet();\n        // finally construct the privilegeFilter, which either includes only the desired\n        final Predicate<Name> shouldInclude = !explicitNames.isEmpty()\n                ? explicitNames::contains\n                : builtinFilter;\n\n        final PrivilegeManager privilegeManager = ((JackrabbitWorkspace) workspace).getPrivilegeManager();\n        final List<PrivilegeDefinition> privilegeDefinitions = new ArrayList<>();\n        for (Privilege privilege : privilegeManager.getRegisteredPrivileges()) {\n            if (!shouldInclude.test(mapper.apply(privilege.getName()))) {\n                continue;\n            }\n            final PrivilegeDefinitionImpl privilegeDefinition =\n                    new PrivilegeDefinitionImpl(\n                            mapper.apply(privilege.getName()),\n                            privilege.isAbstract(),\n                            Stream.of(privilege.getDeclaredAggregatePrivileges())\n                                    .map(Privilege::getName)\n                                    .map(mapper)\n                                    .filter(Objects::nonNull)\n                                    .collect(toSet()));\n            privilegeDefinitions.add(privilegeDefinition);\n        }\n\n        // identify only those namespaces referenced by included privilege names or their aggregate members\n        final Set<String> uris = privilegeDefinitions.stream()\n                .flatMap(def -> Stream.concat(Stream.of(def.getName()), def.getDeclaredAggregateNames().stream()))\n                .map(Name::getNamespaceURI).collect(toSet());\n\n        final Map<String, String> namespaces = uris.stream()\n                .collect(toMap(Fun.tryOrDefault1(session::getNamespacePrefix, null),\n                        Function.identity()));\n\n        PrivilegeDefinitionWriter pdWriter = new PrivilegeDefinitionWriter(\"text/xml\");\n        try (Writer writer = writerOpener.open()) {\n            pdWriter.writeDefinitions(writer, privilegeDefinitions.toArray(new PrivilegeDefinition[0]), namespaces);\n        }\n    }", "signature": "void writePrivileges(final WriterOpener writerOpener,\n                                       final Session session,\n                                       final List<String> onlyNames,\n                                       final boolean includeBuiltins)", "full_signature": "public static void writePrivileges(final WriterOpener writerOpener,\n                                       final Session session,\n                                       final List<String> onlyNames,\n                                       final boolean includeBuiltins)", "class_method_signature": "PrivilegeXmlExporter.writePrivileges(final WriterOpener writerOpener,\n                                       final Session session,\n                                       final List<String> onlyNames,\n                                       final boolean includeBuiltins)", "testcase": false, "constructor": false, "invocations": ["getWorkspace", "getName", "getClass", "tryOrDefault1", "collect", "filter", "map", "stream", "toSet", "negate", "collect", "filter", "filter", "map", "stream", "toSet", "emptySet", "isEmpty", "getPrivilegeManager", "getRegisteredPrivileges", "test", "apply", "getName", "apply", "getName", "isAbstract", "collect", "filter", "map", "map", "of", "getDeclaredAggregatePrivileges", "toSet", "add", "collect", "map", "flatMap", "stream", "concat", "of", "getName", "stream", "getDeclaredAggregateNames", "toSet", "collect", "stream", "toMap", "tryOrDefault1", "identity", "open", "writeDefinitions", "toArray"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}