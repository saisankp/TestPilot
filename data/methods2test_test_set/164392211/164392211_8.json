{"test_class": {"identifier": "DbTableMetadataTest", "superclass": "", "interfaces": "", "fields": [], "file": "dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/DbTableMetadataTest.java"}, "test_case": {"identifier": "testGetColumn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetColumn() {\n        DbColumnMetadata c1 = new DbColumnMetadata(\"c1\", Types.INTEGER, false, false);\n        DbColumnMetadata c2 = new DbColumnMetadata(\"c2\", Types.VARCHAR, false, false);\n\n        DbTableMetadata md = new DbTableMetadata(TableFQName.forName(\"x\"), new DbColumnMetadata[]{c1, c2});\n        assertSame(c1, md.getColumn(\"c1\"));\n        assertSame(c2, md.getColumn(\"c2\"));\n    }", "signature": "void testGetColumn()", "full_signature": "@Test public void testGetColumn()", "class_method_signature": "DbTableMetadataTest.testGetColumn()", "testcase": true, "constructor": false, "invocations": ["forName", "assertSame", "getColumn", "assertSame", "getColumn"]}, "focal_class": {"identifier": "DbTableMetadata", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TableFQName name;", "modifier": "private", "type": "TableFQName", "declarator": "name", "var_name": "name"}, {"original_string": "private DbColumnMetadata[] columns;", "modifier": "private", "type": "DbColumnMetadata[]", "declarator": "columns", "var_name": "columns"}, {"original_string": "private Map<String, DbColumnMetadata> columnsByName;", "modifier": "private", "type": "Map<String, DbColumnMetadata>", "declarator": "columnsByName", "var_name": "columnsByName"}, {"original_string": "private DbColumnMetadata[] pk;", "modifier": "private", "type": "DbColumnMetadata[]", "declarator": "pk", "var_name": "pk"}], "methods": [{"identifier": "DbTableMetadata", "parameters": "(TableFQName name, DbColumnMetadata[] columns)", "modifiers": "public", "return": "", "signature": " DbTableMetadata(TableFQName name, DbColumnMetadata[] columns)", "full_signature": "public  DbTableMetadata(TableFQName name, DbColumnMetadata[] columns)", "class_method_signature": "DbTableMetadata.DbTableMetadata(TableFQName name, DbColumnMetadata[] columns)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "TableFQName", "signature": "TableFQName getName()", "full_signature": "public TableFQName getName()", "class_method_signature": "DbTableMetadata.getName()", "testcase": false, "constructor": false}, {"identifier": "getColumns", "parameters": "()", "modifiers": "public", "return": "DbColumnMetadata[]", "signature": "DbColumnMetadata[] getColumns()", "full_signature": "public DbColumnMetadata[] getColumns()", "class_method_signature": "DbTableMetadata.getColumns()", "testcase": false, "constructor": false}, {"identifier": "getColumnNames", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getColumnNames()", "full_signature": "public String[] getColumnNames()", "class_method_signature": "DbTableMetadata.getColumnNames()", "testcase": false, "constructor": false}, {"identifier": "getPkColumns", "parameters": "()", "modifiers": "public", "return": "DbColumnMetadata[]", "signature": "DbColumnMetadata[] getPkColumns()", "full_signature": "public DbColumnMetadata[] getPkColumns()", "class_method_signature": "DbTableMetadata.getPkColumns()", "testcase": false, "constructor": false}, {"identifier": "hasColumn", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean hasColumn(String name)", "full_signature": "public boolean hasColumn(String name)", "class_method_signature": "DbTableMetadata.hasColumn(String name)", "testcase": false, "constructor": false}, {"identifier": "getColumn", "parameters": "(String name)", "modifiers": "public", "return": "DbColumnMetadata", "signature": "DbColumnMetadata getColumn(String name)", "full_signature": "public DbColumnMetadata getColumn(String name)", "class_method_signature": "DbTableMetadata.getColumn(String name)", "testcase": false, "constructor": false}, {"identifier": "findPk", "parameters": "()", "modifiers": "private", "return": "DbColumnMetadata[]", "signature": "DbColumnMetadata[] findPk()", "full_signature": "private DbColumnMetadata[] findPk()", "class_method_signature": "DbTableMetadata.findPk()", "testcase": false, "constructor": false}], "file": "dflib-jdbc/src/main/java/com/nhl/dflib/jdbc/connector/metadata/DbTableMetadata.java"}, "focal_method": {"identifier": "getColumn", "parameters": "(String name)", "modifiers": "public", "return": "DbColumnMetadata", "body": "public DbColumnMetadata getColumn(String name) {\n\n        DbColumnMetadata column = columnsByName.get(name);\n        if (column == null) {\n            throw new IllegalArgumentException(\"Column named '\" + name + \"' does not exist in table '\" + this.name + \"'\");\n        }\n\n        return column;\n    }", "signature": "DbColumnMetadata getColumn(String name)", "full_signature": "public DbColumnMetadata getColumn(String name)", "class_method_signature": "DbTableMetadata.getColumn(String name)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}