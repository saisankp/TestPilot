{"test_class": {"identifier": "ImportStrategyAccumulatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ImportStrategyAccumulator accumulator;", "modifier": "private", "type": "ImportStrategyAccumulator", "declarator": "accumulator", "var_name": "accumulator"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/ImportStrategyAccumulatorTest.java"}, "test_case": {"identifier": "verifyDeleteOnly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyDeleteOnly()\n    {\n        List<Event> events = createEvents( 5 );\n\n        accumulator.partitionEvents( events, ImportStrategy.DELETE, existingEventsFromEvents( events ) );\n\n        assertAccumulator( 0, 0, 5 );\n\n        reset();\n\n        events = createEvents( 5 );\n\n        accumulator.partitionEvents( events, ImportStrategy.DELETES, existingEventsFromEvents( events ) );\n\n        assertAccumulator( 0, 0, 5 );\n    }", "signature": "void verifyDeleteOnly()", "full_signature": "@Test public void verifyDeleteOnly()", "class_method_signature": "ImportStrategyAccumulatorTest.verifyDeleteOnly()", "testcase": true, "constructor": false, "invocations": ["createEvents", "partitionEvents", "existingEventsFromEvents", "assertAccumulator", "reset", "createEvents", "partitionEvents", "existingEventsFromEvents", "assertAccumulator"]}, "focal_class": {"identifier": "ImportStrategyAccumulator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<Event> create = new ArrayList<>();", "modifier": "private final", "type": "List<Event>", "declarator": "create = new ArrayList<>()", "var_name": "create"}, {"original_string": "private final List<Event> update = new ArrayList<>();", "modifier": "private final", "type": "List<Event>", "declarator": "update = new ArrayList<>()", "var_name": "update"}, {"original_string": "private final List<Event> delete = new ArrayList<>();", "modifier": "private final", "type": "List<Event>", "declarator": "delete = new ArrayList<>()", "var_name": "delete"}], "methods": [{"identifier": "partitionEvents", "parameters": "( List<Event> events, ImportStrategy importStrategy,\n        Map<String, ProgramStageInstance> existingEvents )", "modifiers": "public", "return": "ImportStrategyAccumulator", "signature": "ImportStrategyAccumulator partitionEvents( List<Event> events, ImportStrategy importStrategy,\n        Map<String, ProgramStageInstance> existingEvents )", "full_signature": "public ImportStrategyAccumulator partitionEvents( List<Event> events, ImportStrategy importStrategy,\n        Map<String, ProgramStageInstance> existingEvents )", "class_method_signature": "ImportStrategyAccumulator.partitionEvents( List<Event> events, ImportStrategy importStrategy,\n        Map<String, ProgramStageInstance> existingEvents )", "testcase": false, "constructor": false}, {"identifier": "sortCreatesAndUpdates", "parameters": "( Event event, List<Event> create, List<Event> update,\n        Map<String, ProgramStageInstance> existingEvents )", "modifiers": "private", "return": "void", "signature": "void sortCreatesAndUpdates( Event event, List<Event> create, List<Event> update,\n        Map<String, ProgramStageInstance> existingEvents )", "full_signature": "private void sortCreatesAndUpdates( Event event, List<Event> create, List<Event> update,\n        Map<String, ProgramStageInstance> existingEvents )", "class_method_signature": "ImportStrategyAccumulator.sortCreatesAndUpdates( Event event, List<Event> create, List<Event> update,\n        Map<String, ProgramStageInstance> existingEvents )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ImportStrategyAccumulator.java"}, "focal_method": {"identifier": "partitionEvents", "parameters": "( List<Event> events, ImportStrategy importStrategy,\n        Map<String, ProgramStageInstance> existingEvents )", "modifiers": "public", "return": "ImportStrategyAccumulator", "body": "public ImportStrategyAccumulator partitionEvents( List<Event> events, ImportStrategy importStrategy,\n        Map<String, ProgramStageInstance> existingEvents )\n    {\n        if ( importStrategy.isCreate() )\n        {\n            create.addAll( events );\n        }\n        else if ( importStrategy.isCreateAndUpdate() )\n        {\n            for ( Event event : events )\n            {\n                sortCreatesAndUpdates( event, create, update, existingEvents );\n            }\n        }\n        else if ( importStrategy.isUpdate() )\n        {\n            update.addAll( events );\n        }\n        else if ( importStrategy.isDelete() )\n        {\n            final Set<String> existingEventKeys = existingEvents.keySet();\n            delete.addAll( events.stream()\n                .filter( event -> existingEventKeys.contains( event.getUid() ) )\n                .collect( Collectors.toSet() ) );\n        }\n        else if ( importStrategy.isSync() )\n        {\n            for ( Event event : events )\n            {\n                if ( event.isDeleted() )\n                {\n                    delete.add( event );\n                }\n                else\n                {\n                    sortCreatesAndUpdates( event, create, update, existingEvents );\n                }\n            }\n        }\n        return this;\n    }", "signature": "ImportStrategyAccumulator partitionEvents( List<Event> events, ImportStrategy importStrategy,\n        Map<String, ProgramStageInstance> existingEvents )", "full_signature": "public ImportStrategyAccumulator partitionEvents( List<Event> events, ImportStrategy importStrategy,\n        Map<String, ProgramStageInstance> existingEvents )", "class_method_signature": "ImportStrategyAccumulator.partitionEvents( List<Event> events, ImportStrategy importStrategy,\n        Map<String, ProgramStageInstance> existingEvents )", "testcase": false, "constructor": false, "invocations": ["isCreate", "addAll", "isCreateAndUpdate", "sortCreatesAndUpdates", "isUpdate", "addAll", "isDelete", "keySet", "addAll", "collect", "filter", "stream", "contains", "getUid", "toSet", "isSync", "isDeleted", "add", "sortCreatesAndUpdates"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}