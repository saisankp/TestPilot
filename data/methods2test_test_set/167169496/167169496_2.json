{"test_class": {"identifier": "ClassLoaderInjectionTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/ji/core/ClassLoaderInjectionTest.java"}, "test_case": {"identifier": "should_inject_nothing_with_non_existed_class", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_inject_nothing_with_non_existed_class() {\n        final Instrumentation inst = ByteBuddyAgent.install();\n        final ClassInjector injector = UsingInstrumentation.of(new File(\"target\"), BOOTSTRAP, inst);\n        final Iterable<Class<?>> injected = new ClassLoaderInjection(injector).inject(singleton(\"non.existed\"));\n        assertTrue(List.iterableList(injected).isEmpty());\n    }", "signature": "void should_inject_nothing_with_non_existed_class()", "full_signature": "@Test public void should_inject_nothing_with_non_existed_class()", "class_method_signature": "ClassLoaderInjectionTest.should_inject_nothing_with_non_existed_class()", "testcase": true, "constructor": false, "invocations": ["install", "of", "inject", "singleton", "assertTrue", "isEmpty", "iterableList"]}, "focal_class": {"identifier": "ClassLoaderInjection", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ClassInjector injector;", "modifier": "private final", "type": "ClassInjector", "declarator": "injector", "var_name": "injector"}], "methods": [{"identifier": "ClassLoaderInjection", "parameters": "(ClassInjector injector)", "modifiers": "", "return": "", "signature": " ClassLoaderInjection(ClassInjector injector)", "full_signature": "  ClassLoaderInjection(ClassInjector injector)", "class_method_signature": "ClassLoaderInjection.ClassLoaderInjection(ClassInjector injector)", "testcase": false, "constructor": true}, {"identifier": "inject", "parameters": "(Iterable<String> names)", "modifiers": "", "return": "Iterable<Class<?>>", "signature": "Iterable<Class<?>> inject(Iterable<String> names)", "full_signature": " Iterable<Class<?>> inject(Iterable<String> names)", "class_method_signature": "ClassLoaderInjection.inject(Iterable<String> names)", "testcase": false, "constructor": false}, {"identifier": "types", "parameters": "(Iterable<String> names)", "modifiers": "private", "return": "Map<String, byte[]>", "signature": "Map<String, byte[]> types(Iterable<String> names)", "full_signature": "private Map<String, byte[]> types(Iterable<String> names)", "class_method_signature": "ClassLoaderInjection.types(Iterable<String> names)", "testcase": false, "constructor": false}], "file": "core/src/main/java/ji/core/ClassLoaderInjection.java"}, "focal_method": {"identifier": "inject", "parameters": "(Iterable<String> names)", "modifiers": "", "return": "Iterable<Class<?>>", "body": "Iterable<Class<?>> inject(Iterable<String> names) {\n        return injector.injectRaw(types(names)).values();\n    }", "signature": "Iterable<Class<?>> inject(Iterable<String> names)", "full_signature": " Iterable<Class<?>> inject(Iterable<String> names)", "class_method_signature": "ClassLoaderInjection.inject(Iterable<String> names)", "testcase": false, "constructor": false, "invocations": ["values", "injectRaw", "types"]}, "repository": {"repo_id": 167169496, "url": "https://github.com/jiboard/ji", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 109, "license": "licensed"}}