{"test_class": {"identifier": "SocketInternetObservingStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int INITIAL_INTERVAL_IN_MS = 0;", "modifier": "private static final", "type": "int", "declarator": "INITIAL_INTERVAL_IN_MS = 0", "var_name": "INITIAL_INTERVAL_IN_MS"}, {"original_string": "private static final int INTERVAL_IN_MS = 2000;", "modifier": "private static final", "type": "int", "declarator": "INTERVAL_IN_MS = 2000", "var_name": "INTERVAL_IN_MS"}, {"original_string": "private static final int PORT = 80;", "modifier": "private static final", "type": "int", "declarator": "PORT = 80", "var_name": "PORT"}, {"original_string": "private static final int TIMEOUT_IN_MS = 30;", "modifier": "private static final", "type": "int", "declarator": "TIMEOUT_IN_MS = 30", "var_name": "TIMEOUT_IN_MS"}, {"original_string": "private static final int HTTP_RESPONSE = 204;", "modifier": "private static final", "type": "int", "declarator": "HTTP_RESPONSE = 204", "var_name": "HTTP_RESPONSE"}, {"original_string": "private static final String HOST_WITH_HTTP = \"http://www.website.com\";", "modifier": "private static final", "type": "String", "declarator": "HOST_WITH_HTTP = \"http://www.website.com\"", "var_name": "HOST_WITH_HTTP"}, {"original_string": "private static final String HOST_WITHOUT_HTTP = \"www.website.com\";", "modifier": "private static final", "type": "String", "declarator": "HOST_WITHOUT_HTTP = \"www.website.com\"", "var_name": "HOST_WITHOUT_HTTP"}, {"original_string": "@Rule public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}, {"original_string": "@Spy private SocketInternetObservingStrategy strategy;", "modifier": "@Spy private", "type": "SocketInternetObservingStrategy", "declarator": "strategy", "var_name": "strategy"}, {"original_string": "@Mock private ErrorHandler errorHandler;", "modifier": "@Mock private", "type": "ErrorHandler", "declarator": "errorHandler", "var_name": "errorHandler"}, {"original_string": "@Mock private Socket socket;", "modifier": "@Mock private", "type": "Socket", "declarator": "socket", "var_name": "socket"}], "file": "library/src/test/java/com/github/pwittchen/reactivenetwork/library/rx2/internet/observing/strategy/SocketInternetObservingStrategyTest.java"}, "test_case": {"identifier": "shouldHandleAnExceptionThrownDuringClosingTheSocket", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldHandleAnExceptionThrownDuringClosingTheSocket() throws IOException {\n    // given\n    final String errorMsg = \"Could not close the socket\";\n    final IOException givenException = new IOException(errorMsg);\n    doThrow(givenException).when(socket).close();\n\n    // when\n    strategy.isConnected(socket, getHost(), PORT, TIMEOUT_IN_MS, errorHandler);\n\n    // then\n    verify(errorHandler, times(1)).handleError(givenException, errorMsg);\n  }", "signature": "void shouldHandleAnExceptionThrownDuringClosingTheSocket()", "full_signature": "@Test public void shouldHandleAnExceptionThrownDuringClosingTheSocket()", "class_method_signature": "SocketInternetObservingStrategyTest.shouldHandleAnExceptionThrownDuringClosingTheSocket()", "testcase": true, "constructor": false, "invocations": ["close", "when", "doThrow", "isConnected", "getHost", "handleError", "verify", "times"]}, "focal_class": {"identifier": "SocketInternetObservingStrategy", "superclass": "", "interfaces": "implements InternetObservingStrategy", "fields": [{"original_string": "private static final String EMPTY_STRING = \"\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY_STRING = \"\"", "var_name": "EMPTY_STRING"}, {"original_string": "private static final String DEFAULT_HOST = \"www.google.com\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_HOST = \"www.google.com\"", "var_name": "DEFAULT_HOST"}, {"original_string": "private static final String HTTP_PROTOCOL = \"http://\";", "modifier": "private static final", "type": "String", "declarator": "HTTP_PROTOCOL = \"http://\"", "var_name": "HTTP_PROTOCOL"}, {"original_string": "private static final String HTTPS_PROTOCOL = \"https://\";", "modifier": "private static final", "type": "String", "declarator": "HTTPS_PROTOCOL = \"https://\"", "var_name": "HTTPS_PROTOCOL"}], "methods": [{"identifier": "getDefaultPingHost", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDefaultPingHost()", "full_signature": "@Override public String getDefaultPingHost()", "class_method_signature": "SocketInternetObservingStrategy.getDefaultPingHost()", "testcase": false, "constructor": false}, {"identifier": "observeInternetConnectivity", "parameters": "(final int initialIntervalInMs,\n      final int intervalInMs, final String host, final int port, final int timeoutInMs,\n      final int httpResponse, final ErrorHandler errorHandler)", "modifiers": "@Override public", "return": "Observable<Boolean>", "signature": "Observable<Boolean> observeInternetConnectivity(final int initialIntervalInMs,\n      final int intervalInMs, final String host, final int port, final int timeoutInMs,\n      final int httpResponse, final ErrorHandler errorHandler)", "full_signature": "@Override public Observable<Boolean> observeInternetConnectivity(final int initialIntervalInMs,\n      final int intervalInMs, final String host, final int port, final int timeoutInMs,\n      final int httpResponse, final ErrorHandler errorHandler)", "class_method_signature": "SocketInternetObservingStrategy.observeInternetConnectivity(final int initialIntervalInMs,\n      final int intervalInMs, final String host, final int port, final int timeoutInMs,\n      final int httpResponse, final ErrorHandler errorHandler)", "testcase": false, "constructor": false}, {"identifier": "checkInternetConnectivity", "parameters": "(final String host, final int port,\n      final int timeoutInMs, final int httpResponse, final ErrorHandler errorHandler)", "modifiers": "@Override public", "return": "Single<Boolean>", "signature": "Single<Boolean> checkInternetConnectivity(final String host, final int port,\n      final int timeoutInMs, final int httpResponse, final ErrorHandler errorHandler)", "full_signature": "@Override public Single<Boolean> checkInternetConnectivity(final String host, final int port,\n      final int timeoutInMs, final int httpResponse, final ErrorHandler errorHandler)", "class_method_signature": "SocketInternetObservingStrategy.checkInternetConnectivity(final String host, final int port,\n      final int timeoutInMs, final int httpResponse, final ErrorHandler errorHandler)", "testcase": false, "constructor": false}, {"identifier": "adjustHost", "parameters": "(final String host)", "modifiers": "protected", "return": "String", "signature": "String adjustHost(final String host)", "full_signature": "protected String adjustHost(final String host)", "class_method_signature": "SocketInternetObservingStrategy.adjustHost(final String host)", "testcase": false, "constructor": false}, {"identifier": "checkGeneralPreconditions", "parameters": "(String host, int port, int timeoutInMs,\n      ErrorHandler errorHandler)", "modifiers": "private", "return": "void", "signature": "void checkGeneralPreconditions(String host, int port, int timeoutInMs,\n      ErrorHandler errorHandler)", "full_signature": "private void checkGeneralPreconditions(String host, int port, int timeoutInMs,\n      ErrorHandler errorHandler)", "class_method_signature": "SocketInternetObservingStrategy.checkGeneralPreconditions(String host, int port, int timeoutInMs,\n      ErrorHandler errorHandler)", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "(final String host, final int port, final int timeoutInMs,\n      final ErrorHandler errorHandler)", "modifiers": "protected", "return": "boolean", "signature": "boolean isConnected(final String host, final int port, final int timeoutInMs,\n      final ErrorHandler errorHandler)", "full_signature": "protected boolean isConnected(final String host, final int port, final int timeoutInMs,\n      final ErrorHandler errorHandler)", "class_method_signature": "SocketInternetObservingStrategy.isConnected(final String host, final int port, final int timeoutInMs,\n      final ErrorHandler errorHandler)", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "(final Socket socket, final String host, final int port,\n      final int timeoutInMs, final ErrorHandler errorHandler)", "modifiers": "protected", "return": "boolean", "signature": "boolean isConnected(final Socket socket, final String host, final int port,\n      final int timeoutInMs, final ErrorHandler errorHandler)", "full_signature": "protected boolean isConnected(final Socket socket, final String host, final int port,\n      final int timeoutInMs, final ErrorHandler errorHandler)", "class_method_signature": "SocketInternetObservingStrategy.isConnected(final Socket socket, final String host, final int port,\n      final int timeoutInMs, final ErrorHandler errorHandler)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/internet/observing/strategy/SocketInternetObservingStrategy.java"}, "focal_method": {"identifier": "isConnected", "parameters": "(final String host, final int port, final int timeoutInMs,\n      final ErrorHandler errorHandler)", "modifiers": "protected", "return": "boolean", "body": "protected boolean isConnected(final String host, final int port, final int timeoutInMs,\n      final ErrorHandler errorHandler) {\n    final Socket socket = new Socket();\n    return isConnected(socket, host, port, timeoutInMs, errorHandler);\n  }", "signature": "boolean isConnected(final String host, final int port, final int timeoutInMs,\n      final ErrorHandler errorHandler)", "full_signature": "protected boolean isConnected(final String host, final int port, final int timeoutInMs,\n      final ErrorHandler errorHandler)", "class_method_signature": "SocketInternetObservingStrategy.isConnected(final String host, final int port, final int timeoutInMs,\n      final ErrorHandler errorHandler)", "testcase": false, "constructor": false, "invocations": ["isConnected"]}, "repository": {"repo_id": 40492118, "url": "https://github.com/pwittchen/ReactiveNetwork", "stars": 2282, "created": "8/10/2015 4:06:58 PM +00:00", "updates": "2020-01-26T20:59:17+00:00", "fork": "False", "license": "licensed"}}