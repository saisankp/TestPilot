{"test_class": {"identifier": "RuleFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<String, Object> properties;", "modifier": "private", "type": "Map<String, Object>", "declarator": "properties", "var_name": "properties"}, {"original_string": "private String routingRulesSchema;", "modifier": "private", "type": "String", "declarator": "routingRulesSchema", "var_name": "routingRulesSchema"}, {"original_string": "@org.junit.Rule\n    public ExpectedException thrown= ExpectedException.none();", "modifier": "@org.junit.Rule\n    public", "type": "ExpectedException", "declarator": "thrown= ExpectedException.none()", "var_name": "thrown"}], "file": "gateleen-routing/src/test/java/org/swisspush/gateleen/routing/RuleFactoryTest.java"}, "test_case": {"identifier": "testAdditionalPropertyNotAllowed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdditionalPropertyNotAllowed() throws ValidationException {\n        thrown.expect( ValidationException.class );\n        thrown.expectMessage(\"Validation failed\");\n\n        String rules = \"{\" +\n                \" \\\"/gateleen/rule/1\\\": {\" +\n                \"  \\\"description\\\": \\\"Test Rule 1\\\",\" +\n                \"  \\\"path\\\": \\\"/${gateleen.test.prop.1}/gateleen/rule/1\\\",\" +\n                \"  \\\"storageExpand\\\": true,\" +\n                \"  \\\"storage\\\": \\\"main\\\"\" +\n                \" },\" +\n                \" \\\"/gateleen/rule/2\\\": {\" +\n                \"  \\\"description\\\": \\\"Test Rule 2\\\",\" +\n                \"  \\\"path\\\": \\\"/${gateleen.test.prop.1}/gateleen/rule/2\\\",\" +\n                \"  \\\"storageExpand\\\": false,\" +\n                \"  \\\"storage\\\": \\\"main\\\"\" +\n                \" },\" +\n                \" \\\"/gateleen/rule/3\\\": {\" +\n                \"  \\\"description\\\": \\\"Test Rule 3\\\",\" +\n                \"  \\\"path\\\": \\\"/${gateleen.test.prop.1}/gateleen/rule/3\\\",\" +\n                \"  \\\"anAdditionalPropetyThatsNotAllowed\\\": 123456,\" +\n                \"  \\\"storage\\\": \\\"main\\\"\" +\n                \" }\" +\n                \"}\";\n\n        properties.put(\"gateleen.test.prop.1\", \"http://someserver1/\");\n        new RuleFactory(properties, routingRulesSchema).parseRules(Buffer.buffer(rules));\n    }", "signature": "void testAdditionalPropertyNotAllowed()", "full_signature": "@Test public void testAdditionalPropertyNotAllowed()", "class_method_signature": "RuleFactoryTest.testAdditionalPropertyNotAllowed()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "put", "parseRules", "buffer"]}, "focal_class": {"identifier": "RuleFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger log = LoggerFactory.getLogger(RuleFactory.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RuleFactory.class)", "var_name": "log"}, {"original_string": "private Pattern urlParsePattern = Pattern.compile(\"^(?<scheme>https?)://(?<host>[^/:]+)(:(?<port>\\\\$?[0-9]+))?(?<path>/.*)$\");", "modifier": "private", "type": "Pattern", "declarator": "urlParsePattern = Pattern.compile(\"^(?<scheme>https?)://(?<host>[^/:]+)(:(?<port>\\\\$?[0-9]+))?(?<path>/.*)$\")", "var_name": "urlParsePattern"}, {"original_string": "private final Map<String, Object> properties;", "modifier": "private final", "type": "Map<String, Object>", "declarator": "properties", "var_name": "properties"}, {"original_string": "private String routingRulesSchema;", "modifier": "private", "type": "String", "declarator": "routingRulesSchema", "var_name": "routingRulesSchema"}], "methods": [{"identifier": "RuleFactory", "parameters": "(Map<String, Object> properties, String routingRulesSchema)", "modifiers": "public", "return": "", "signature": " RuleFactory(Map<String, Object> properties, String routingRulesSchema)", "full_signature": "public  RuleFactory(Map<String, Object> properties, String routingRulesSchema)", "class_method_signature": "RuleFactory.RuleFactory(Map<String, Object> properties, String routingRulesSchema)", "testcase": false, "constructor": true}, {"identifier": "parseRules", "parameters": "(Buffer buffer)", "modifiers": "public", "return": "List<Rule>", "signature": "List<Rule> parseRules(Buffer buffer)", "full_signature": "public List<Rule> parseRules(Buffer buffer)", "class_method_signature": "RuleFactory.parseRules(Buffer buffer)", "testcase": false, "constructor": false}, {"identifier": "createRules", "parameters": "(JsonObject rules)", "modifiers": "public", "return": "List<Rule>", "signature": "List<Rule> createRules(JsonObject rules)", "full_signature": "public List<Rule> createRules(JsonObject rules)", "class_method_signature": "RuleFactory.createRules(JsonObject rules)", "testcase": false, "constructor": false}, {"identifier": "setStorage", "parameters": "(Rule ruleObj, JsonObject rule, String path)", "modifiers": "private", "return": "void", "signature": "void setStorage(Rule ruleObj, JsonObject rule, String path)", "full_signature": "private void setStorage(Rule ruleObj, JsonObject rule, String path)", "class_method_signature": "RuleFactory.setStorage(Rule ruleObj, JsonObject rule, String path)", "testcase": false, "constructor": false}, {"identifier": "setTranslateStatus", "parameters": "(Rule ruleObj, JsonObject rule)", "modifiers": "private", "return": "void", "signature": "void setTranslateStatus(Rule ruleObj, JsonObject rule)", "full_signature": "private void setTranslateStatus(Rule ruleObj, JsonObject rule)", "class_method_signature": "RuleFactory.setTranslateStatus(Rule ruleObj, JsonObject rule)", "testcase": false, "constructor": false}, {"identifier": "setProxyOptions", "parameters": "(Rule ruleObj, JsonObject rule)", "modifiers": "private", "return": "void", "signature": "void setProxyOptions(Rule ruleObj, JsonObject rule)", "full_signature": "private void setProxyOptions(Rule ruleObj, JsonObject rule)", "class_method_signature": "RuleFactory.setProxyOptions(Rule ruleObj, JsonObject rule)", "testcase": false, "constructor": false}, {"identifier": "setStaticHeaders", "parameters": "(Rule ruleObj, JsonObject rule)", "modifiers": "@Deprecated private", "return": "void", "signature": "void setStaticHeaders(Rule ruleObj, JsonObject rule)", "full_signature": "@Deprecated private void setStaticHeaders(Rule ruleObj, JsonObject rule)", "class_method_signature": "RuleFactory.setStaticHeaders(Rule ruleObj, JsonObject rule)", "testcase": false, "constructor": false}, {"identifier": "prepareUrl", "parameters": "(String urlPattern, Rule ruleObj, String targetUrl, String path)", "modifiers": "private", "return": "void", "signature": "void prepareUrl(String urlPattern, Rule ruleObj, String targetUrl, String path)", "full_signature": "private void prepareUrl(String urlPattern, Rule ruleObj, String targetUrl, String path)", "class_method_signature": "RuleFactory.prepareUrl(String urlPattern, Rule ruleObj, String targetUrl, String path)", "testcase": false, "constructor": false}], "file": "gateleen-routing/src/main/java/org/swisspush/gateleen/routing/RuleFactory.java"}, "focal_method": {"identifier": "parseRules", "parameters": "(Buffer buffer)", "modifiers": "public", "return": "List<Rule>", "body": "public List<Rule> parseRules(Buffer buffer) throws ValidationException {\n        String replacedConfig;\n        try {\n            replacedConfig = StringUtils.replaceWildcardConfigs(buffer.toString(\"UTF-8\"), properties);\n        } catch (Exception e) {\n            throw new ValidationException(e);\n        }\n        ValidationResult validationResult = Validator.validateStatic(Buffer.buffer(replacedConfig), routingRulesSchema, log);\n        if (validationResult.isSuccess()) {\n            return createRules(new JsonObject(replacedConfig));\n        } else {\n            throw new ValidationException(validationResult);\n        }\n    }", "signature": "List<Rule> parseRules(Buffer buffer)", "full_signature": "public List<Rule> parseRules(Buffer buffer)", "class_method_signature": "RuleFactory.parseRules(Buffer buffer)", "testcase": false, "constructor": false, "invocations": ["replaceWildcardConfigs", "toString", "validateStatic", "buffer", "isSuccess", "createRules"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}