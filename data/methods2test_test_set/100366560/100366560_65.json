{"test_class": {"identifier": "ObjectToStringConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ObjectToStringConverter converter = new ObjectToStringConverter();", "modifier": "", "type": "ObjectToStringConverter", "declarator": "converter = new ObjectToStringConverter()", "var_name": "converter"}], "file": "beanmother-core/src/test/java/io/beanmother/core/converter/std/ObjectToStringConverterTest.java"}, "test_case": {"identifier": "testConvert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvert() throws ParseException {\n        assertEquals(\"1\", converter.convert(1l, TypeToken.of(String.class)));\n        assertEquals(\"test\", converter.convert(\"test\", TypeToken.of(String.class)));\n        assertEquals(\"true\", converter.convert(true, TypeToken.of(String.class)));\n    }", "signature": "void testConvert()", "full_signature": "@Test public void testConvert()", "class_method_signature": "ObjectToStringConverterTest.testConvert()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "convert", "of", "assertEquals", "convert", "of", "assertEquals", "convert", "of"]}, "focal_class": {"identifier": "ObjectToStringConverter", "superclass": "extends AbstractConverter", "interfaces": "", "fields": [], "methods": [{"identifier": "ObjectToStringConverter", "parameters": "()", "modifiers": "public", "return": "", "signature": " ObjectToStringConverter()", "full_signature": "public  ObjectToStringConverter()", "class_method_signature": "ObjectToStringConverter.ObjectToStringConverter()", "testcase": false, "constructor": true}, {"identifier": "ObjectToStringConverter", "parameters": "(int priority)", "modifiers": "public", "return": "", "signature": " ObjectToStringConverter(int priority)", "full_signature": "public  ObjectToStringConverter(int priority)", "class_method_signature": "ObjectToStringConverter.ObjectToStringConverter(int priority)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(Object source, TypeToken<?> targetTypeToken)", "modifiers": "@Override public", "return": "Object", "signature": "Object convert(Object source, TypeToken<?> targetTypeToken)", "full_signature": "@Override public Object convert(Object source, TypeToken<?> targetTypeToken)", "class_method_signature": "ObjectToStringConverter.convert(Object source, TypeToken<?> targetTypeToken)", "testcase": false, "constructor": false}, {"identifier": "canHandle", "parameters": "(Object source, TypeToken<?> targetTypeToken)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canHandle(Object source, TypeToken<?> targetTypeToken)", "full_signature": "@Override public boolean canHandle(Object source, TypeToken<?> targetTypeToken)", "class_method_signature": "ObjectToStringConverter.canHandle(Object source, TypeToken<?> targetTypeToken)", "testcase": false, "constructor": false}], "file": "beanmother-core/src/main/java/io/beanmother/core/converter/std/ObjectToStringConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(Object source, TypeToken<?> targetTypeToken)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object convert(Object source, TypeToken<?> targetTypeToken) {\n        return String.valueOf(source);\n    }", "signature": "Object convert(Object source, TypeToken<?> targetTypeToken)", "full_signature": "@Override public Object convert(Object source, TypeToken<?> targetTypeToken)", "class_method_signature": "ObjectToStringConverter.convert(Object source, TypeToken<?> targetTypeToken)", "testcase": false, "constructor": false, "invocations": ["valueOf"]}, "repository": {"repo_id": 100366560, "url": "https://github.com/keepcosmos/beanmother", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 95, "size": 688, "license": "licensed"}}