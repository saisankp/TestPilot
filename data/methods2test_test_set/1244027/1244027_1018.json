{"test_class": {"identifier": "JcrWorkspaceTest", "superclass": "extends SingleUseAbstractTest", "interfaces": "", "fields": [{"original_string": "private JcrWorkspace workspace;", "modifier": "private", "type": "JcrWorkspace", "declarator": "workspace", "var_name": "workspace"}, {"original_string": "private String workspaceName;", "modifier": "private", "type": "String", "declarator": "workspaceName", "var_name": "workspaceName"}, {"original_string": "private JcrSession otherSession;", "modifier": "private", "type": "JcrSession", "declarator": "otherSession", "var_name": "otherSession"}, {"original_string": "private JcrWorkspace otherWorkspace;", "modifier": "private", "type": "JcrWorkspace", "declarator": "otherWorkspace", "var_name": "otherWorkspace"}, {"original_string": "private String otherWorkspaceName;", "modifier": "private", "type": "String", "declarator": "otherWorkspaceName", "var_name": "otherWorkspaceName"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/JcrWorkspaceTest.java"}, "test_case": {"identifier": "shouldProvideName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldProvideName() throws Exception {\n        assertThat(workspace.getName(), is(workspaceName));\n    }", "signature": "void shouldProvideName()", "full_signature": "@Test public void shouldProvideName()", "class_method_signature": "JcrWorkspaceTest.shouldProvideName()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getName", "is"]}, "focal_class": {"identifier": "JcrWorkspace", "superclass": "", "interfaces": "implements org.modeshape.jcr.api.Workspace", "fields": [{"original_string": "private final JcrSession session;", "modifier": "private final", "type": "JcrSession", "declarator": "session", "var_name": "session"}, {"original_string": "private final String workspaceName;", "modifier": "private final", "type": "String", "declarator": "workspaceName", "var_name": "workspaceName"}, {"original_string": "private final Lock lock = new ReentrantLock();", "modifier": "private final", "type": "Lock", "declarator": "lock = new ReentrantLock()", "var_name": "lock"}, {"original_string": "private JcrNodeTypeManager nodeTypeManager;", "modifier": "private", "type": "JcrNodeTypeManager", "declarator": "nodeTypeManager", "var_name": "nodeTypeManager"}, {"original_string": "private JcrLockManager lockManager;", "modifier": "private", "type": "JcrLockManager", "declarator": "lockManager", "var_name": "lockManager"}, {"original_string": "private JcrNamespaceRegistry workspaceRegistry;", "modifier": "private", "type": "JcrNamespaceRegistry", "declarator": "workspaceRegistry", "var_name": "workspaceRegistry"}, {"original_string": "private JcrVersionManager versionManager;", "modifier": "private", "type": "JcrVersionManager", "declarator": "versionManager", "var_name": "versionManager"}, {"original_string": "private JcrQueryManager queryManager;", "modifier": "private", "type": "JcrQueryManager", "declarator": "queryManager", "var_name": "queryManager"}, {"original_string": "private JcrObservationManager observationManager;", "modifier": "private", "type": "JcrObservationManager", "declarator": "observationManager", "var_name": "observationManager"}, {"original_string": "private JcrRepositoryManager repositoryManager;", "modifier": "private", "type": "JcrRepositoryManager", "declarator": "repositoryManager", "var_name": "repositoryManager"}, {"original_string": "private ModeShapeFederationManager federationManager;", "modifier": "private", "type": "ModeShapeFederationManager", "declarator": "federationManager", "var_name": "federationManager"}], "methods": [{"identifier": "JcrWorkspace", "parameters": "( JcrSession session,\n                  String workspaceName )", "modifiers": "", "return": "", "signature": " JcrWorkspace( JcrSession session,\n                  String workspaceName )", "full_signature": "  JcrWorkspace( JcrSession session,\n                  String workspaceName )", "class_method_signature": "JcrWorkspace.JcrWorkspace( JcrSession session,\n                  String workspaceName )", "testcase": false, "constructor": true}, {"identifier": "repository", "parameters": "()", "modifiers": "final", "return": "JcrRepository", "signature": "JcrRepository repository()", "full_signature": "final JcrRepository repository()", "class_method_signature": "JcrWorkspace.repository()", "testcase": false, "constructor": false}, {"identifier": "context", "parameters": "()", "modifiers": "final", "return": "ExecutionContext", "signature": "ExecutionContext context()", "full_signature": "final ExecutionContext context()", "class_method_signature": "JcrWorkspace.context()", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "()", "modifiers": "@Override public final", "return": "JcrSession", "signature": "JcrSession getSession()", "full_signature": "@Override public final JcrSession getSession()", "class_method_signature": "JcrWorkspace.getSession()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String getName()", "full_signature": "@Override public final String getName()", "class_method_signature": "JcrWorkspace.getName()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( String srcAbsPath,\n                      String destAbsPath )", "modifiers": "@Override public", "return": "void", "signature": "void copy( String srcAbsPath,\n                      String destAbsPath )", "full_signature": "@Override public void copy( String srcAbsPath,\n                      String destAbsPath )", "class_method_signature": "JcrWorkspace.copy( String srcAbsPath,\n                      String destAbsPath )", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( String srcWorkspace,\n                      String srcAbsPath,\n                      String destAbsPath )", "modifiers": "@Override public", "return": "void", "signature": "void copy( String srcWorkspace,\n                      String srcAbsPath,\n                      String destAbsPath )", "full_signature": "@Override public void copy( String srcWorkspace,\n                      String srcAbsPath,\n                      String destAbsPath )", "class_method_signature": "JcrWorkspace.copy( String srcWorkspace,\n                      String srcAbsPath,\n                      String destAbsPath )", "testcase": false, "constructor": false}, {"identifier": "validateCopyForExternalNode", "parameters": "( AbstractJcrNode sourceNode,\n                                              AbstractJcrNode destParentNode )", "modifiers": "private", "return": "void", "signature": "void validateCopyForExternalNode( AbstractJcrNode sourceNode,\n                                              AbstractJcrNode destParentNode )", "full_signature": "private void validateCopyForExternalNode( AbstractJcrNode sourceNode,\n                                              AbstractJcrNode destParentNode )", "class_method_signature": "JcrWorkspace.validateCopyForExternalNode( AbstractJcrNode sourceNode,\n                                              AbstractJcrNode destParentNode )", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "( String srcWorkspace,\n                       String srcAbsPath,\n                       String destAbsPath,\n                       boolean removeExisting )", "modifiers": "@Override public", "return": "void", "signature": "void clone( String srcWorkspace,\n                       String srcAbsPath,\n                       String destAbsPath,\n                       boolean removeExisting )", "full_signature": "@Override public void clone( String srcWorkspace,\n                       String srcAbsPath,\n                       String destAbsPath,\n                       boolean removeExisting )", "class_method_signature": "JcrWorkspace.clone( String srcWorkspace,\n                       String srcAbsPath,\n                       String destAbsPath,\n                       boolean removeExisting )", "testcase": false, "constructor": false}, {"identifier": "internalClone", "parameters": "( String srcWorkspace,\n                        String srcAbsPath,\n                        String destAbsPath,\n                        boolean removeExisting,\n                        boolean skipVersioningValidation )", "modifiers": "", "return": "void", "signature": "void internalClone( String srcWorkspace,\n                        String srcAbsPath,\n                        String destAbsPath,\n                        boolean removeExisting,\n                        boolean skipVersioningValidation )", "full_signature": " void internalClone( String srcWorkspace,\n                        String srcAbsPath,\n                        String destAbsPath,\n                        boolean removeExisting,\n                        boolean skipVersioningValidation )", "class_method_signature": "JcrWorkspace.internalClone( String srcWorkspace,\n                        String srcAbsPath,\n                        String destAbsPath,\n                        boolean removeExisting,\n                        boolean skipVersioningValidation )", "testcase": false, "constructor": false}, {"identifier": "validateCloneForExternalNodes", "parameters": "( boolean sameWorkspace,\n                                                JcrSession sourceSession,\n                                                AbstractJcrNode sourceNode,\n                                                AbstractJcrNode parentNode )", "modifiers": "private", "return": "void", "signature": "void validateCloneForExternalNodes( boolean sameWorkspace,\n                                                JcrSession sourceSession,\n                                                AbstractJcrNode sourceNode,\n                                                AbstractJcrNode parentNode )", "full_signature": "private void validateCloneForExternalNodes( boolean sameWorkspace,\n                                                JcrSession sourceSession,\n                                                AbstractJcrNode sourceNode,\n                                                AbstractJcrNode parentNode )", "class_method_signature": "JcrWorkspace.validateCloneForExternalNodes( boolean sameWorkspace,\n                                                JcrSession sourceSession,\n                                                AbstractJcrNode sourceNode,\n                                                AbstractJcrNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "filterNodeKeysForClone", "parameters": "( Set<NodeKey> sourceKeys,\n                                                 SessionCache sourceCache )", "modifiers": "private", "return": "Set<NodeKey>", "signature": "Set<NodeKey> filterNodeKeysForClone( Set<NodeKey> sourceKeys,\n                                                 SessionCache sourceCache )", "full_signature": "private Set<NodeKey> filterNodeKeysForClone( Set<NodeKey> sourceKeys,\n                                                 SessionCache sourceCache )", "class_method_signature": "JcrWorkspace.filterNodeKeysForClone( Set<NodeKey> sourceKeys,\n                                                 SessionCache sourceCache )", "testcase": false, "constructor": false}, {"identifier": "validateCrossWorkspaceAction", "parameters": "( String srcWorkspace )", "modifiers": "protected", "return": "void", "signature": "void validateCrossWorkspaceAction( String srcWorkspace )", "full_signature": "protected void validateCrossWorkspaceAction( String srcWorkspace )", "class_method_signature": "JcrWorkspace.validateCrossWorkspaceAction( String srcWorkspace )", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "( String srcAbsPath,\n                      String destAbsPath )", "modifiers": "@Override public", "return": "void", "signature": "void move( String srcAbsPath,\n                      String destAbsPath )", "full_signature": "@Override public void move( String srcAbsPath,\n                      String destAbsPath )", "class_method_signature": "JcrWorkspace.move( String srcAbsPath,\n                      String destAbsPath )", "testcase": false, "constructor": false}, {"identifier": "restore", "parameters": "( Version[] versions,\n                         boolean removeExisting )", "modifiers": "@Override @SuppressWarnings(\"deprecation\") public", "return": "void", "signature": "void restore( Version[] versions,\n                         boolean removeExisting )", "full_signature": "@Override @SuppressWarnings(\"deprecation\") public void restore( Version[] versions,\n                         boolean removeExisting )", "class_method_signature": "JcrWorkspace.restore( Version[] versions,\n                         boolean removeExisting )", "testcase": false, "constructor": false}, {"identifier": "getLockManager", "parameters": "()", "modifiers": "@Override public", "return": "JcrLockManager", "signature": "JcrLockManager getLockManager()", "full_signature": "@Override public JcrLockManager getLockManager()", "class_method_signature": "JcrWorkspace.getLockManager()", "testcase": false, "constructor": false}, {"identifier": "lockManager", "parameters": "()", "modifiers": "final", "return": "JcrLockManager", "signature": "JcrLockManager lockManager()", "full_signature": "final JcrLockManager lockManager()", "class_method_signature": "JcrWorkspace.lockManager()", "testcase": false, "constructor": false}, {"identifier": "getQueryManager", "parameters": "()", "modifiers": "@Override public", "return": "JcrQueryManager", "signature": "JcrQueryManager getQueryManager()", "full_signature": "@Override public JcrQueryManager getQueryManager()", "class_method_signature": "JcrWorkspace.getQueryManager()", "testcase": false, "constructor": false}, {"identifier": "getNamespaceRegistry", "parameters": "()", "modifiers": "@Override public", "return": "javax.jcr.NamespaceRegistry", "signature": "javax.jcr.NamespaceRegistry getNamespaceRegistry()", "full_signature": "@Override public javax.jcr.NamespaceRegistry getNamespaceRegistry()", "class_method_signature": "JcrWorkspace.getNamespaceRegistry()", "testcase": false, "constructor": false}, {"identifier": "getIndexManager", "parameters": "()", "modifiers": "@Override public", "return": "IndexManager", "signature": "IndexManager getIndexManager()", "full_signature": "@Override public IndexManager getIndexManager()", "class_method_signature": "JcrWorkspace.getIndexManager()", "testcase": false, "constructor": false}, {"identifier": "getNodeTypeManager", "parameters": "()", "modifiers": "@Override public", "return": "JcrNodeTypeManager", "signature": "JcrNodeTypeManager getNodeTypeManager()", "full_signature": "@Override public JcrNodeTypeManager getNodeTypeManager()", "class_method_signature": "JcrWorkspace.getNodeTypeManager()", "testcase": false, "constructor": false}, {"identifier": "nodeTypeManager", "parameters": "()", "modifiers": "final", "return": "JcrNodeTypeManager", "signature": "JcrNodeTypeManager nodeTypeManager()", "full_signature": "final JcrNodeTypeManager nodeTypeManager()", "class_method_signature": "JcrWorkspace.nodeTypeManager()", "testcase": false, "constructor": false}, {"identifier": "getObservationManager", "parameters": "()", "modifiers": "@Override public", "return": "ObservationManager", "signature": "ObservationManager getObservationManager()", "full_signature": "@Override public ObservationManager getObservationManager()", "class_method_signature": "JcrWorkspace.getObservationManager()", "testcase": false, "constructor": false}, {"identifier": "observationManager", "parameters": "()", "modifiers": "final", "return": "JcrObservationManager", "signature": "JcrObservationManager observationManager()", "full_signature": "final JcrObservationManager observationManager()", "class_method_signature": "JcrWorkspace.observationManager()", "testcase": false, "constructor": false}, {"identifier": "getVersionManager", "parameters": "()", "modifiers": "@Override public", "return": "JcrVersionManager", "signature": "JcrVersionManager getVersionManager()", "full_signature": "@Override public JcrVersionManager getVersionManager()", "class_method_signature": "JcrWorkspace.getVersionManager()", "testcase": false, "constructor": false}, {"identifier": "versionManager", "parameters": "()", "modifiers": "final", "return": "JcrVersionManager", "signature": "JcrVersionManager versionManager()", "full_signature": "final JcrVersionManager versionManager()", "class_method_signature": "JcrWorkspace.versionManager()", "testcase": false, "constructor": false}, {"identifier": "getRepositoryManager", "parameters": "()", "modifiers": "@Override public", "return": "JcrRepositoryManager", "signature": "JcrRepositoryManager getRepositoryManager()", "full_signature": "@Override public JcrRepositoryManager getRepositoryManager()", "class_method_signature": "JcrWorkspace.getRepositoryManager()", "testcase": false, "constructor": false}, {"identifier": "repositoryManager", "parameters": "()", "modifiers": "final", "return": "JcrRepositoryManager", "signature": "JcrRepositoryManager repositoryManager()", "full_signature": "final JcrRepositoryManager repositoryManager()", "class_method_signature": "JcrWorkspace.repositoryManager()", "testcase": false, "constructor": false}, {"identifier": "getImportContentHandler", "parameters": "( String parentAbsPath,\n                                                   int uuidBehavior )", "modifiers": "@Override public", "return": "ContentHandler", "signature": "ContentHandler getImportContentHandler( String parentAbsPath,\n                                                   int uuidBehavior )", "full_signature": "@Override public ContentHandler getImportContentHandler( String parentAbsPath,\n                                                   int uuidBehavior )", "class_method_signature": "JcrWorkspace.getImportContentHandler( String parentAbsPath,\n                                                   int uuidBehavior )", "testcase": false, "constructor": false}, {"identifier": "importXML", "parameters": "( String parentAbsPath,\n                           InputStream in,\n                           int uuidBehavior )", "modifiers": "@Override public", "return": "void", "signature": "void importXML( String parentAbsPath,\n                           InputStream in,\n                           int uuidBehavior )", "full_signature": "@Override public void importXML( String parentAbsPath,\n                           InputStream in,\n                           int uuidBehavior )", "class_method_signature": "JcrWorkspace.importXML( String parentAbsPath,\n                           InputStream in,\n                           int uuidBehavior )", "testcase": false, "constructor": false}, {"identifier": "getAccessibleWorkspaceNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getAccessibleWorkspaceNames()", "full_signature": "@Override public String[] getAccessibleWorkspaceNames()", "class_method_signature": "JcrWorkspace.getAccessibleWorkspaceNames()", "testcase": false, "constructor": false}, {"identifier": "createWorkspace", "parameters": "( String name )", "modifiers": "@Override public", "return": "void", "signature": "void createWorkspace( String name )", "full_signature": "@Override public void createWorkspace( String name )", "class_method_signature": "JcrWorkspace.createWorkspace( String name )", "testcase": false, "constructor": false}, {"identifier": "createWorkspace", "parameters": "( String name,\n                                 String srcWorkspace )", "modifiers": "@Override public", "return": "void", "signature": "void createWorkspace( String name,\n                                 String srcWorkspace )", "full_signature": "@Override public void createWorkspace( String name,\n                                 String srcWorkspace )", "class_method_signature": "JcrWorkspace.createWorkspace( String name,\n                                 String srcWorkspace )", "testcase": false, "constructor": false}, {"identifier": "deepClone", "parameters": "( JcrSession sourceSession,\n                              NodeKey sourceNodeKey,\n                              JcrSession cloneSession,\n                              NodeKey cloneNodeKey )", "modifiers": "protected", "return": "void", "signature": "void deepClone( JcrSession sourceSession,\n                              NodeKey sourceNodeKey,\n                              JcrSession cloneSession,\n                              NodeKey cloneNodeKey )", "full_signature": "protected void deepClone( JcrSession sourceSession,\n                              NodeKey sourceNodeKey,\n                              JcrSession cloneSession,\n                              NodeKey cloneNodeKey )", "class_method_signature": "JcrWorkspace.deepClone( JcrSession sourceSession,\n                              NodeKey sourceNodeKey,\n                              JcrSession cloneSession,\n                              NodeKey cloneNodeKey )", "testcase": false, "constructor": false}, {"identifier": "deleteWorkspace", "parameters": "( String name )", "modifiers": "@Override public", "return": "void", "signature": "void deleteWorkspace( String name )", "full_signature": "@Override public void deleteWorkspace( String name )", "class_method_signature": "JcrWorkspace.deleteWorkspace( String name )", "testcase": false, "constructor": false}, {"identifier": "reindex", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reindex()", "full_signature": "@Override public void reindex()", "class_method_signature": "JcrWorkspace.reindex()", "testcase": false, "constructor": false}, {"identifier": "reindex", "parameters": "( String pathStr )", "modifiers": "@Override public", "return": "void", "signature": "void reindex( String pathStr )", "full_signature": "@Override public void reindex( String pathStr )", "class_method_signature": "JcrWorkspace.reindex( String pathStr )", "testcase": false, "constructor": false}, {"identifier": "reindexSince", "parameters": "( long timestamp )", "modifiers": "@Override public", "return": "void", "signature": "void reindexSince( long timestamp )", "full_signature": "@Override public void reindexSince( long timestamp )", "class_method_signature": "JcrWorkspace.reindexSince( long timestamp )", "testcase": false, "constructor": false}, {"identifier": "reindexSinceAsync", "parameters": "( long timestamp )", "modifiers": "@Override public", "return": "Future<Boolean>", "signature": "Future<Boolean> reindexSinceAsync( long timestamp )", "full_signature": "@Override public Future<Boolean> reindexSinceAsync( long timestamp )", "class_method_signature": "JcrWorkspace.reindexSinceAsync( long timestamp )", "testcase": false, "constructor": false}, {"identifier": "reindexAsync", "parameters": "()", "modifiers": "@Override public", "return": "Future<Boolean>", "signature": "Future<Boolean> reindexAsync()", "full_signature": "@Override public Future<Boolean> reindexAsync()", "class_method_signature": "JcrWorkspace.reindexAsync()", "testcase": false, "constructor": false}, {"identifier": "reindexAsync", "parameters": "( String pathStr )", "modifiers": "@Override public", "return": "Future<Boolean>", "signature": "Future<Boolean> reindexAsync( String pathStr )", "full_signature": "@Override public Future<Boolean> reindexAsync( String pathStr )", "class_method_signature": "JcrWorkspace.reindexAsync( String pathStr )", "testcase": false, "constructor": false}, {"identifier": "getFederationManager", "parameters": "()", "modifiers": "@Override public", "return": "FederationManager", "signature": "FederationManager getFederationManager()", "full_signature": "@Override public FederationManager getFederationManager()", "class_method_signature": "JcrWorkspace.getFederationManager()", "testcase": false, "constructor": false}, {"identifier": "federationManager", "parameters": "()", "modifiers": "final", "return": "ModeShapeFederationManager", "signature": "ModeShapeFederationManager federationManager()", "full_signature": "final ModeShapeFederationManager federationManager()", "class_method_signature": "JcrWorkspace.federationManager()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/JcrWorkspace.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "@Override public final", "return": "String", "body": "@Override\n    public final String getName() {\n        return workspaceName;\n    }", "signature": "String getName()", "full_signature": "@Override public final String getName()", "class_method_signature": "JcrWorkspace.getName()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}