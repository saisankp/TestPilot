{"test_class": {"identifier": "StorageRequestAuthorizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final HttpTransport HTTP_TRANSPORT = new NetHttpTransport();", "modifier": "public static final", "type": "HttpTransport", "declarator": "HTTP_TRANSPORT = new NetHttpTransport()", "var_name": "HTTP_TRANSPORT"}, {"original_string": "public static final JacksonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();", "modifier": "public static final", "type": "JacksonFactory", "declarator": "JSON_FACTORY = JacksonFactory.getDefaultInstance()", "var_name": "JSON_FACTORY"}, {"original_string": "private static final String PROJECT = \"test-project\";", "modifier": "private static final", "type": "String", "declarator": "PROJECT = \"test-project\"", "var_name": "PROJECT"}, {"original_string": "private static final String BUCKET_NAME = \"test-bucket-name\";", "modifier": "private static final", "type": "String", "declarator": "BUCKET_NAME = \"test-bucket-name\"", "var_name": "BUCKET_NAME"}, {"original_string": "private static final String OBJECT_NAME = \"/dir/test-object\";", "modifier": "private static final", "type": "String", "declarator": "OBJECT_NAME = \"/dir/test-object\"", "var_name": "OBJECT_NAME"}, {"original_string": "private static final String BUCKET_NAME_DST = \"test-bucket-name-dst\";", "modifier": "private static final", "type": "String", "declarator": "BUCKET_NAME_DST = \"test-bucket-name-dst\"", "var_name": "BUCKET_NAME_DST"}, {"original_string": "private static final String OBJECT_NAME_DST = \"/dir/test-object-dst\";", "modifier": "private static final", "type": "String", "declarator": "OBJECT_NAME_DST = \"/dir/test-object-dst\"", "var_name": "OBJECT_NAME_DST"}, {"original_string": "@Rule public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Mock AuthorizationHandler mockHandler;", "modifier": "@Mock", "type": "AuthorizationHandler", "declarator": "mockHandler", "var_name": "mockHandler"}], "file": "gcsio/src/test/java/com/google/cloud/hadoop/gcsio/authorization/StorageRequestAuthorizerTest.java"}, "test_case": {"identifier": "testComposeObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testComposeObject() throws Exception {\n    // Test with three source objects\n    List<ComposeRequest.SourceObjects> sourceObjects =\n        Stream.of(0, 1, 2)\n            .map(x -> new ComposeRequest.SourceObjects().setName(OBJECT_NAME + \"-\" + x))\n            .collect(toImmutableList());\n    ComposeRequest request = new ComposeRequest().setSourceObjects(sourceObjects);\n    Storage.Objects.Compose compose =\n        newStorage().objects().compose(BUCKET_NAME, OBJECT_NAME, request);\n\n    StorageRequestAuthorizer authorizer = new StorageRequestAuthorizer(mockHandler);\n\n    authorizer.authorize(compose);\n\n    ArgumentCaptor<URI> captor = ArgumentCaptor.forClass(URI.class);\n    ArgumentCaptor<List<URI>> listCaptor = ArgumentCaptor.forClass(ArrayList.class);\n\n    verify(mockHandler).handleComposeObject(captor.capture(), listCaptor.capture());\n\n    assertThat(captor.getValue().getAuthority()).isEqualTo(BUCKET_NAME);\n    assertThat(captor.getValue().getPath()).isEqualTo(OBJECT_NAME);\n    for (int i = 0; i < 3; ++i) {\n      assertThat(listCaptor.getValue().get(i).getAuthority()).isEqualTo(BUCKET_NAME);\n      assertThat(listCaptor.getValue().get(i).getPath()).isEqualTo(OBJECT_NAME + \"-\" + i);\n    }\n  }", "signature": "void testComposeObject()", "full_signature": "@Test public void testComposeObject()", "class_method_signature": "StorageRequestAuthorizerTest.testComposeObject()", "testcase": true, "constructor": false, "invocations": ["collect", "map", "of", "setName", "toImmutableList", "setSourceObjects", "compose", "objects", "newStorage", "authorize", "forClass", "forClass", "handleComposeObject", "verify", "capture", "capture", "isEqualTo", "assertThat", "getAuthority", "getValue", "isEqualTo", "assertThat", "getPath", "getValue", "isEqualTo", "assertThat", "getAuthority", "get", "getValue", "isEqualTo", "assertThat", "getPath", "get", "getValue"]}, "focal_class": {"identifier": "StorageRequestAuthorizer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();", "modifier": "private static final", "type": "GoogleLogger", "declarator": "logger = GoogleLogger.forEnclosingClass()", "var_name": "logger"}, {"original_string": "private final AuthorizationHandler authorizationHandler;", "modifier": "private final", "type": "AuthorizationHandler", "declarator": "authorizationHandler", "var_name": "authorizationHandler"}], "methods": [{"identifier": "StorageRequestAuthorizer", "parameters": "(\n      Class<? extends AuthorizationHandler> handlerClass, Map<String, String> properties)", "modifiers": "public", "return": "", "signature": " StorageRequestAuthorizer(\n      Class<? extends AuthorizationHandler> handlerClass, Map<String, String> properties)", "full_signature": "public  StorageRequestAuthorizer(\n      Class<? extends AuthorizationHandler> handlerClass, Map<String, String> properties)", "class_method_signature": "StorageRequestAuthorizer.StorageRequestAuthorizer(\n      Class<? extends AuthorizationHandler> handlerClass, Map<String, String> properties)", "testcase": false, "constructor": true}, {"identifier": "StorageRequestAuthorizer", "parameters": "(AuthorizationHandler authorizationHandler)", "modifiers": "@VisibleForTesting", "return": "", "signature": " StorageRequestAuthorizer(AuthorizationHandler authorizationHandler)", "full_signature": "@VisibleForTesting  StorageRequestAuthorizer(AuthorizationHandler authorizationHandler)", "class_method_signature": "StorageRequestAuthorizer.StorageRequestAuthorizer(AuthorizationHandler authorizationHandler)", "testcase": false, "constructor": true}, {"identifier": "authorize", "parameters": "(StorageRequest<?> request)", "modifiers": "public", "return": "void", "signature": "void authorize(StorageRequest<?> request)", "full_signature": "public void authorize(StorageRequest<?> request)", "class_method_signature": "StorageRequestAuthorizer.authorize(StorageRequest<?> request)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(StorageRequest<?> request)", "modifiers": "private static", "return": "Object", "signature": "Object getData(StorageRequest<?> request)", "full_signature": "private static Object getData(StorageRequest<?> request)", "class_method_signature": "StorageRequestAuthorizer.getData(StorageRequest<?> request)", "testcase": false, "constructor": false}, {"identifier": "getGcsUri", "parameters": "(String bucketName, String objectPath)", "modifiers": "private static", "return": "URI", "signature": "URI getGcsUri(String bucketName, String objectPath)", "full_signature": "private static URI getGcsUri(String bucketName, String objectPath)", "class_method_signature": "StorageRequestAuthorizer.getGcsUri(String bucketName, String objectPath)", "testcase": false, "constructor": false}], "file": "gcsio/src/main/java/com/google/cloud/hadoop/gcsio/authorization/StorageRequestAuthorizer.java"}, "focal_method": {"identifier": "authorize", "parameters": "(StorageRequest<?> request)", "modifiers": "public", "return": "void", "body": "public void authorize(StorageRequest<?> request) throws AccessDeniedException {\n    logger.atFine().log(\"authorizeStorageRequest(%s)\", request);\n\n    // Objects\n    if (request instanceof Storage.Objects.List) {\n      Storage.Objects.List listRequest = (Storage.Objects.List) request;\n      authorizationHandler.handleListObjects(\n          getGcsUri(listRequest.getBucket(), listRequest.getPrefix()));\n    } else if (request instanceof Storage.Objects.Insert) {\n      Storage.Objects.Insert insertRequest = (Storage.Objects.Insert) request;\n      authorizationHandler.handleInsertObject(\n          getGcsUri(insertRequest.getBucket(), ((StorageObject) getData(request)).getName()));\n    } else if (request instanceof Storage.Objects.Compose) {\n      Storage.Objects.Compose composeRequest = (Storage.Objects.Compose) request;\n      String bucket = composeRequest.getDestinationBucket();\n      URI destination = getGcsUri(bucket, composeRequest.getDestinationObject());\n      List<URI> sources =\n          ((ComposeRequest) getData(request))\n              .getSourceObjects().stream()\n                  .map(source -> getGcsUri(bucket, source.getName()))\n                  .collect(toImmutableList());\n      authorizationHandler.handleComposeObject(destination, sources);\n    } else if (request instanceof Storage.Objects.Get) {\n      Storage.Objects.Get getRequest = (Storage.Objects.Get) request;\n      authorizationHandler.handleGetObject(\n          getGcsUri(getRequest.getBucket(), getRequest.getObject()));\n    } else if (request instanceof Storage.Objects.Delete) {\n      Storage.Objects.Delete deleteRequest = (Storage.Objects.Delete) request;\n      authorizationHandler.handleDeleteObject(\n          getGcsUri(deleteRequest.getBucket(), deleteRequest.getObject()));\n    } else if (request instanceof Storage.Objects.Rewrite) {\n      Storage.Objects.Rewrite rewriteRequest = (Storage.Objects.Rewrite) request;\n      authorizationHandler.handleRewriteObject(\n          getGcsUri(rewriteRequest.getSourceBucket(), rewriteRequest.getSourceObject()),\n          getGcsUri(rewriteRequest.getDestinationBucket(), rewriteRequest.getDestinationObject()));\n\n    } else if (request instanceof Storage.Objects.Copy) {\n      Storage.Objects.Copy copyRequest = (Storage.Objects.Copy) request;\n      authorizationHandler.handleCopyObject(\n          getGcsUri(copyRequest.getSourceBucket(), copyRequest.getSourceObject()),\n          getGcsUri(copyRequest.getDestinationBucket(), copyRequest.getDestinationObject()));\n    } else if (request instanceof Storage.Objects.Patch) {\n      Storage.Objects.Patch patchRequest = (Storage.Objects.Patch) request;\n      authorizationHandler.handlePatchObject(\n          getGcsUri(patchRequest.getBucket(), patchRequest.getObject()));\n    }\n\n    // Buckets\n    else if (request instanceof Storage.Buckets.List) {\n      authorizationHandler.handleListBuckets(((Storage.Buckets.List) request).getProject());\n    } else if (request instanceof Storage.Buckets.Insert) {\n      authorizationHandler.handleInsertBucket(\n          ((Storage.Buckets.Insert) request).getProject(),\n          getGcsUri(((Bucket) getData(request)).getName(), /* objectPath= */ null));\n    } else if (request instanceof Storage.Buckets.Get) {\n      authorizationHandler.handleGetBucket(\n          getGcsUri(((Storage.Buckets.Get) request).getBucket(), /* objectPath= */ null));\n    } else if (request instanceof Storage.Buckets.Delete) {\n      authorizationHandler.handleDeleteBucket(\n          getGcsUri(((Storage.Buckets.Delete) request).getBucket(), /* objectPath= */ null));\n    }\n\n    // Unhandled request types. All storage request should be covered by the previous checks.\n    else {\n      throw new RuntimeException(\"Unhandled storage request type. Request: \" + request);\n    }\n  }", "signature": "void authorize(StorageRequest<?> request)", "full_signature": "public void authorize(StorageRequest<?> request)", "class_method_signature": "StorageRequestAuthorizer.authorize(StorageRequest<?> request)", "testcase": false, "constructor": false, "invocations": ["log", "atFine", "handleListObjects", "getGcsUri", "getBucket", "getPrefix", "handleInsertObject", "getGcsUri", "getBucket", "getName", "getData", "getDestinationBucket", "getGcsUri", "getDestinationObject", "collect", "map", "stream", "getSourceObjects", "getData", "getGcsUri", "getName", "toImmutableList", "handleComposeObject", "handleGetObject", "getGcsUri", "getBucket", "getObject", "handleDeleteObject", "getGcsUri", "getBucket", "getObject", "handleRewriteObject", "getGcsUri", "getSourceBucket", "getSourceObject", "getGcsUri", "getDestinationBucket", "getDestinationObject", "handleCopyObject", "getGcsUri", "getSourceBucket", "getSourceObject", "getGcsUri", "getDestinationBucket", "getDestinationObject", "handlePatchObject", "getGcsUri", "getBucket", "getObject", "handleListBuckets", "getProject", "handleInsertBucket", "getProject", "getGcsUri", "getName", "getData", "handleGetBucket", "getGcsUri", "getBucket", "handleDeleteBucket", "getGcsUri", "getBucket"]}, "repository": {"repo_id": 19684359, "url": "https://github.com/GoogleCloudDataproc/bigdata-interop", "stars": 178, "created": "5/12/2014 3:11:55 AM +00:00", "updates": "2020-01-23T23:10:40+00:00", "fork": "False", "license": "licensed"}}