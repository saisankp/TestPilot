{"test_class": {"identifier": "EstimateSpecTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/modelling/arima/tramo/EstimateSpecTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        EstimateSpec expected = new EstimateSpec();\n        EstimateSpec actual = new EstimateSpec();\n        assertEquals(expected, actual);\n\n        expected.setEML(false);\n        assertNotEquals(expected, actual);\n        actual.setEML(false);\n        assertEquals(expected, actual);\n\n        expected.setTol(1e-4);\n        assertNotEquals(expected, actual);\n        actual.setTol(1e-4);\n        assertEquals(expected, actual);\n\n        expected.setUbp(1.0);\n        assertNotEquals(expected, actual);\n        actual.setUbp(1.0);\n        assertEquals(expected, actual);\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "EstimateSpecTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "setEML", "assertNotEquals", "setEML", "assertEquals", "setTol", "assertNotEquals", "setTol", "assertEquals", "setUbp", "assertNotEquals", "setUbp", "assertEquals"]}, "focal_class": {"identifier": "EstimateSpec", "superclass": "", "interfaces": "implements Cloneable, InformationSetSerializable", "fields": [{"original_string": "public static final String SPAN = \"span\",\n            EML = \"eml\",\n            TOL = \"tol\",\n            UBP = \"ubp\";", "modifier": "public static final", "type": "String", "declarator": "SPAN = \"span\"", "var_name": "SPAN"}, {"original_string": "private TsPeriodSelector span_ = new TsPeriodSelector();", "modifier": "private", "type": "TsPeriodSelector", "declarator": "span_ = new TsPeriodSelector()", "var_name": "span_"}, {"original_string": "private boolean eml_ = true;", "modifier": "private", "type": "boolean", "declarator": "eml_ = true", "var_name": "eml_"}, {"original_string": "private double tol_ = DEF_TOL, ubp_ = DEF_UBP;", "modifier": "private", "type": "double", "declarator": "tol_ = DEF_TOL", "var_name": "tol_"}, {"original_string": "public static final double DEF_TOL = 1e-7, DEF_UBP = .96;", "modifier": "public static final", "type": "double", "declarator": "DEF_TOL = 1e-7", "var_name": "DEF_TOL"}], "methods": [{"identifier": "fillDictionary", "parameters": "(String prefix, Map<String, Class> dic)", "modifiers": "public static", "return": "void", "signature": "void fillDictionary(String prefix, Map<String, Class> dic)", "full_signature": "public static void fillDictionary(String prefix, Map<String, Class> dic)", "class_method_signature": "EstimateSpec.fillDictionary(String prefix, Map<String, Class> dic)", "testcase": false, "constructor": false}, {"identifier": "EstimateSpec", "parameters": "()", "modifiers": "public", "return": "", "signature": " EstimateSpec()", "full_signature": "public  EstimateSpec()", "class_method_signature": "EstimateSpec.EstimateSpec()", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "EstimateSpec.reset()", "testcase": false, "constructor": false}, {"identifier": "getSpan", "parameters": "()", "modifiers": "public", "return": "TsPeriodSelector", "signature": "TsPeriodSelector getSpan()", "full_signature": "public TsPeriodSelector getSpan()", "class_method_signature": "EstimateSpec.getSpan()", "testcase": false, "constructor": false}, {"identifier": "setSpan", "parameters": "(TsPeriodSelector span)", "modifiers": "public", "return": "void", "signature": "void setSpan(TsPeriodSelector span)", "full_signature": "public void setSpan(TsPeriodSelector span)", "class_method_signature": "EstimateSpec.setSpan(TsPeriodSelector span)", "testcase": false, "constructor": false}, {"identifier": "isEML", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEML()", "full_signature": "public boolean isEML()", "class_method_signature": "EstimateSpec.isEML()", "testcase": false, "constructor": false}, {"identifier": "setEML", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setEML(boolean value)", "full_signature": "public void setEML(boolean value)", "class_method_signature": "EstimateSpec.setEML(boolean value)", "testcase": false, "constructor": false}, {"identifier": "getTol", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTol()", "full_signature": "public double getTol()", "class_method_signature": "EstimateSpec.getTol()", "testcase": false, "constructor": false}, {"identifier": "setTol", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setTol(double value)", "full_signature": "public void setTol(double value)", "class_method_signature": "EstimateSpec.setTol(double value)", "testcase": false, "constructor": false}, {"identifier": "getUbp", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getUbp()", "full_signature": "public double getUbp()", "class_method_signature": "EstimateSpec.getUbp()", "testcase": false, "constructor": false}, {"identifier": "setUbp", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setUbp(double value)", "full_signature": "public void setUbp(double value)", "class_method_signature": "EstimateSpec.setUbp(double value)", "testcase": false, "constructor": false}, {"identifier": "isDefault", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDefault()", "full_signature": "public boolean isDefault()", "class_method_signature": "EstimateSpec.isDefault()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "EstimateSpec", "signature": "EstimateSpec clone()", "full_signature": "@Override public EstimateSpec clone()", "class_method_signature": "EstimateSpec.clone()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "EstimateSpec.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "EstimateSpec.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(EstimateSpec other)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(EstimateSpec other)", "full_signature": "private boolean equals(EstimateSpec other)", "class_method_signature": "EstimateSpec.equals(EstimateSpec other)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(boolean verbose)", "modifiers": "@Override public", "return": "InformationSet", "signature": "InformationSet write(boolean verbose)", "full_signature": "@Override public InformationSet write(boolean verbose)", "class_method_signature": "EstimateSpec.write(boolean verbose)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(InformationSet info)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean read(InformationSet info)", "full_signature": "@Override public boolean read(InformationSet info)", "class_method_signature": "EstimateSpec.read(InformationSet info)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/modelling/arima/tramo/EstimateSpec.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object obj) {\n        return this == obj || (obj instanceof EstimateSpec && equals((EstimateSpec) obj));\n    }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "EstimateSpec.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}