{"test_class": {"identifier": "WithLicenseTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/model/src/test/java/org/eclipse/sw360/antenna/model/license/WithLicenseTest.java"}, "test_case": {"identifier": "testEmptyWithLicense", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyWithLicense() {\n        WithLicense withLicense = new WithLicense();\n\n        assertThat(withLicense.isEmpty()).isTrue();\n    }", "signature": "void testEmptyWithLicense()", "full_signature": "@Test public void testEmptyWithLicense()", "class_method_signature": "WithLicenseTest.testEmptyWithLicense()", "testcase": true, "constructor": false, "invocations": ["isTrue", "assertThat", "isEmpty"]}, "focal_class": {"identifier": "WithLicense", "superclass": "extends License", "interfaces": "implements LicenseInformation", "fields": [{"original_string": "private static final String SEPARATOR = \" WITH \";", "modifier": "private static final", "type": "String", "declarator": "SEPARATOR = \" WITH \"", "var_name": "SEPARATOR"}, {"original_string": "private static final String TEXT_SEPARATOR = \"with exception:\";", "modifier": "private static final", "type": "String", "declarator": "TEXT_SEPARATOR = \"with exception:\"", "var_name": "TEXT_SEPARATOR"}, {"original_string": "private static final String ERROR_MESSAGE_TEMPLATE = \"Parameter %s is not separated properly with '%s'\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_MESSAGE_TEMPLATE = \"Parameter %s is not separated properly with '%s'\"", "var_name": "ERROR_MESSAGE_TEMPLATE"}, {"original_string": "private String exceptionId;", "modifier": "private", "type": "String", "declarator": "exceptionId", "var_name": "exceptionId"}, {"original_string": "private String exceptionName;", "modifier": "private", "type": "String", "declarator": "exceptionName", "var_name": "exceptionName"}, {"original_string": "private String exceptionText;", "modifier": "private", "type": "String", "declarator": "exceptionText", "var_name": "exceptionText"}], "methods": [{"identifier": "WithLicense", "parameters": "()", "modifiers": "public", "return": "", "signature": " WithLicense()", "full_signature": "public  WithLicense()", "class_method_signature": "WithLicense.WithLicense()", "testcase": false, "constructor": true}, {"identifier": "WithLicense", "parameters": "(String licenseId, String exceptionId)", "modifiers": "public", "return": "", "signature": " WithLicense(String licenseId, String exceptionId)", "full_signature": "public  WithLicense(String licenseId, String exceptionId)", "class_method_signature": "WithLicense.WithLicense(String licenseId, String exceptionId)", "testcase": false, "constructor": true}, {"identifier": "WithLicense", "parameters": "(String licenseId, String licenseName, String licenseText, String exceptionId,\n            String exceptionName, String exceptionText)", "modifiers": "public", "return": "", "signature": " WithLicense(String licenseId, String licenseName, String licenseText, String exceptionId,\n            String exceptionName, String exceptionText)", "full_signature": "public  WithLicense(String licenseId, String licenseName, String licenseText, String exceptionId,\n            String exceptionName, String exceptionText)", "class_method_signature": "WithLicense.WithLicense(String licenseId, String licenseName, String licenseText, String exceptionId,\n            String exceptionName, String exceptionText)", "testcase": false, "constructor": true}, {"identifier": "WithLicense", "parameters": "(String licenseId, String licenseName, String licenseText)", "modifiers": "public", "return": "", "signature": " WithLicense(String licenseId, String licenseName, String licenseText)", "full_signature": "public  WithLicense(String licenseId, String licenseName, String licenseText)", "class_method_signature": "WithLicense.WithLicense(String licenseId, String licenseName, String licenseText)", "testcase": false, "constructor": true}, {"identifier": "separateStringAndSetFirst", "parameters": "(String source, String separator, Consumer<String> consumer)", "modifiers": "private", "return": "String", "signature": "String separateStringAndSetFirst(String source, String separator, Consumer<String> consumer)", "full_signature": "private String separateStringAndSetFirst(String source, String separator, Consumer<String> consumer)", "class_method_signature": "WithLicense.separateStringAndSetFirst(String source, String separator, Consumer<String> consumer)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "WithLicense.getId()", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "(String id)", "modifiers": "@Override public", "return": "void", "signature": "void setId(String id)", "full_signature": "@Override public void setId(String id)", "class_method_signature": "WithLicense.setId(String id)", "testcase": false, "constructor": false}, {"identifier": "getCommonName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCommonName()", "full_signature": "@Override public String getCommonName()", "class_method_signature": "WithLicense.getCommonName()", "testcase": false, "constructor": false}, {"identifier": "setCommonName", "parameters": "(String commonName)", "modifiers": "@Override public", "return": "void", "signature": "void setCommonName(String commonName)", "full_signature": "@Override public void setCommonName(String commonName)", "class_method_signature": "WithLicense.setCommonName(String commonName)", "testcase": false, "constructor": false}, {"identifier": "getText", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getText()", "full_signature": "@Override public String getText()", "class_method_signature": "WithLicense.getText()", "testcase": false, "constructor": false}, {"identifier": "setText", "parameters": "(String text)", "modifiers": "@Override public", "return": "void", "signature": "void setText(String text)", "full_signature": "@Override public void setText(String text)", "class_method_signature": "WithLicense.setText(String text)", "testcase": false, "constructor": false}, {"identifier": "getLicenseId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLicenseId()", "full_signature": "public String getLicenseId()", "class_method_signature": "WithLicense.getLicenseId()", "testcase": false, "constructor": false}, {"identifier": "setLicenseId", "parameters": "(String licenseId)", "modifiers": "public", "return": "void", "signature": "void setLicenseId(String licenseId)", "full_signature": "public void setLicenseId(String licenseId)", "class_method_signature": "WithLicense.setLicenseId(String licenseId)", "testcase": false, "constructor": false}, {"identifier": "getLicenseName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLicenseName()", "full_signature": "public String getLicenseName()", "class_method_signature": "WithLicense.getLicenseName()", "testcase": false, "constructor": false}, {"identifier": "setLicenseName", "parameters": "(String licenseName)", "modifiers": "public", "return": "void", "signature": "void setLicenseName(String licenseName)", "full_signature": "public void setLicenseName(String licenseName)", "class_method_signature": "WithLicense.setLicenseName(String licenseName)", "testcase": false, "constructor": false}, {"identifier": "getLicenseText", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLicenseText()", "full_signature": "public String getLicenseText()", "class_method_signature": "WithLicense.getLicenseText()", "testcase": false, "constructor": false}, {"identifier": "setLicenseText", "parameters": "(String licenseText)", "modifiers": "public", "return": "void", "signature": "void setLicenseText(String licenseText)", "full_signature": "public void setLicenseText(String licenseText)", "class_method_signature": "WithLicense.setLicenseText(String licenseText)", "testcase": false, "constructor": false}, {"identifier": "getExceptionId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getExceptionId()", "full_signature": "public String getExceptionId()", "class_method_signature": "WithLicense.getExceptionId()", "testcase": false, "constructor": false}, {"identifier": "setExceptionId", "parameters": "(String exceptionId)", "modifiers": "public", "return": "void", "signature": "void setExceptionId(String exceptionId)", "full_signature": "public void setExceptionId(String exceptionId)", "class_method_signature": "WithLicense.setExceptionId(String exceptionId)", "testcase": false, "constructor": false}, {"identifier": "getExceptionName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getExceptionName()", "full_signature": "public String getExceptionName()", "class_method_signature": "WithLicense.getExceptionName()", "testcase": false, "constructor": false}, {"identifier": "setExceptionName", "parameters": "(String exceptionName)", "modifiers": "public", "return": "void", "signature": "void setExceptionName(String exceptionName)", "full_signature": "public void setExceptionName(String exceptionName)", "class_method_signature": "WithLicense.setExceptionName(String exceptionName)", "testcase": false, "constructor": false}, {"identifier": "getExceptionText", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getExceptionText()", "full_signature": "public String getExceptionText()", "class_method_signature": "WithLicense.getExceptionText()", "testcase": false, "constructor": false}, {"identifier": "setExceptionText", "parameters": "(String exceptionText)", "modifiers": "public", "return": "void", "signature": "void setExceptionText(String exceptionText)", "full_signature": "public void setExceptionText(String exceptionText)", "class_method_signature": "WithLicense.setExceptionText(String exceptionText)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String evaluate()", "full_signature": "@Override public String evaluate()", "class_method_signature": "WithLicense.evaluate()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "WithLicense.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "WithLicense.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "WithLicense.hashCode()", "testcase": false, "constructor": false}], "file": "core/model/src/main/java/org/eclipse/sw360/antenna/model/license/WithLicense.java"}, "focal_method": {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isEmpty() {\n        return super.isEmpty() || exceptionId.trim().isEmpty();\n    }", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "WithLicense.isEmpty()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isEmpty", "trim"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}