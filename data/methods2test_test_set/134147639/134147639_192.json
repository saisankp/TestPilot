{"test_class": {"identifier": "AggregatingMetadataStatementsProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "webauthn4j-metadata/src/test/java/com/webauthn4j/metadata/AggregatingMetadataStatementsProviderTest.java"}, "test_case": {"identifier": "provide_test", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void provide_test() {\n        MetadataStatementsProvider providerA = mock(MetadataStatementsProvider.class);\n        Map<AAGUID, Set<MetadataStatement>> mapA = new HashMap<>();\n        mapA.put(new AAGUID(\"df495bdc-223a-429d-9f0e-ebfa29155812\"), new HashSet<>());\n        when(providerA.provide()).thenReturn(mapA);\n\n        MetadataStatementsProvider providerB = mock(MetadataStatementsProvider.class);\n        Map<AAGUID, Set<MetadataStatement>> mapB = new HashMap<>();\n        mapB.put(new AAGUID(\"d075c221-6a37-4c61-80c7-11254460d5bb\"), new HashSet<>());\n        when(providerB.provide()).thenReturn(mapB);\n\n        AggregatingMetadataStatementsProvider target = new AggregatingMetadataStatementsProvider(Arrays.asList(providerA, providerB));\n        assertThat(target.provide()).containsOnlyKeys(new AAGUID(\"df495bdc-223a-429d-9f0e-ebfa29155812\"), new AAGUID(\"d075c221-6a37-4c61-80c7-11254460d5bb\"));\n    }", "signature": "void provide_test()", "full_signature": "@Test void provide_test()", "class_method_signature": "AggregatingMetadataStatementsProviderTest.provide_test()", "testcase": true, "constructor": false, "invocations": ["mock", "put", "thenReturn", "when", "provide", "mock", "put", "thenReturn", "when", "provide", "asList", "containsOnlyKeys", "assertThat", "provide"]}, "focal_class": {"identifier": "AggregatingMetadataStatementsProvider", "superclass": "", "interfaces": "implements MetadataStatementsProvider", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(AggregatingMetadataStatementsProvider.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AggregatingMetadataStatementsProvider.class)", "var_name": "logger"}, {"original_string": "private final List<MetadataStatementsProvider> metadataStatementsProviders;", "modifier": "private final", "type": "List<MetadataStatementsProvider>", "declarator": "metadataStatementsProviders", "var_name": "metadataStatementsProviders"}], "methods": [{"identifier": "AggregatingMetadataStatementsProvider", "parameters": "(List<MetadataStatementsProvider> metadataStatementsProviders)", "modifiers": "public", "return": "", "signature": " AggregatingMetadataStatementsProvider(List<MetadataStatementsProvider> metadataStatementsProviders)", "full_signature": "public  AggregatingMetadataStatementsProvider(List<MetadataStatementsProvider> metadataStatementsProviders)", "class_method_signature": "AggregatingMetadataStatementsProvider.AggregatingMetadataStatementsProvider(List<MetadataStatementsProvider> metadataStatementsProviders)", "testcase": false, "constructor": true}, {"identifier": "provide", "parameters": "()", "modifiers": "@SuppressWarnings(\"Duplicates\") @Override public", "return": "Map<AAGUID, Set<MetadataStatement>>", "signature": "Map<AAGUID, Set<MetadataStatement>> provide()", "full_signature": "@SuppressWarnings(\"Duplicates\") @Override public Map<AAGUID, Set<MetadataStatement>> provide()", "class_method_signature": "AggregatingMetadataStatementsProvider.provide()", "testcase": false, "constructor": false}], "file": "webauthn4j-metadata/src/main/java/com/webauthn4j/metadata/AggregatingMetadataStatementsProvider.java"}, "focal_method": {"identifier": "provide", "parameters": "()", "modifiers": "@SuppressWarnings(\"Duplicates\") @Override public", "return": "Map<AAGUID, Set<MetadataStatement>>", "body": "@SuppressWarnings(\"Duplicates\")\n    @Override\n    public Map<AAGUID, Set<MetadataStatement>> provide() {\n        return metadataStatementsProviders.stream()\n                .flatMap(provider -> {\n                    try {\n                        return provider.provide().entrySet().stream();\n                    } catch (RuntimeException e) {\n                        logger.warn(\"Failed to load metadata from one of metadataStatementsProviders\", e);\n                        return null;\n                    }\n                })\n                .filter(Objects::nonNull)\n                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n    }", "signature": "Map<AAGUID, Set<MetadataStatement>> provide()", "full_signature": "@SuppressWarnings(\"Duplicates\") @Override public Map<AAGUID, Set<MetadataStatement>> provide()", "class_method_signature": "AggregatingMetadataStatementsProvider.provide()", "testcase": false, "constructor": false, "invocations": ["collect", "filter", "flatMap", "stream", "stream", "entrySet", "provide", "warn", "toMap"]}, "repository": {"repo_id": 134147639, "url": "https://github.com/webauthn4j/webauthn4j", "stars": 101, "created": "5/20/2018 12:14:36 PM +00:00", "updates": "2020-01-27T13:01:46+00:00", "fork": "False", "license": "licensed"}}