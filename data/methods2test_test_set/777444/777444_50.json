{"test_class": {"identifier": "EncryptCommandTest", "superclass": "", "interfaces": "", "fields": [], "file": "agent/jvm/src/test/java/org/jolokia/jvmagent/client/command/EncryptCommandTest.java"}, "test_case": {"identifier": "testEncryptDecrypt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncryptDecrypt() throws Exception {\n        String passwd = \"test 123\";\n\n        JCPPTest keyHolder = new JCPPTest();\n\n        EncryptCommand ec = new EncryptCommand(keyHolder);\n        OptionsAndArgs oaa = new OptionsAndArgs(CommandDispatcher.getAvailableCommands(),\"encrypt\", passwd);\n        PrintStream original = System.out;\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(baos));\n        ec.execute(oaa, null, null);\n        System.setOut(original);\n\n        Matcher matcher = Pattern.compile(\"^\\\\[\\\\[(.*)]]\").matcher(baos.toString());\n        matcher.find();\n        String encrypted = matcher.group(1);\n\n        JolokiaCipher jolokiaCipher = new JolokiaCipher(keyHolder);\n        String decrypted = jolokiaCipher.decrypt(encrypted);\n        assertEquals(decrypted,passwd);\n    }", "signature": "void testEncryptDecrypt()", "full_signature": "@Test public void testEncryptDecrypt()", "class_method_signature": "EncryptCommandTest.testEncryptDecrypt()", "testcase": true, "constructor": false, "invocations": ["getAvailableCommands", "setOut", "execute", "setOut", "matcher", "compile", "toString", "find", "group", "decrypt", "assertEquals"]}, "focal_class": {"identifier": "EncryptCommand", "superclass": "extends AbstractBaseCommand", "interfaces": "", "fields": [{"original_string": "private final JolokiaCipher.KeyHolder keyHolder;", "modifier": "private final", "type": "JolokiaCipher.KeyHolder", "declarator": "keyHolder", "var_name": "keyHolder"}], "methods": [{"identifier": "EncryptCommand", "parameters": "()", "modifiers": "public", "return": "", "signature": " EncryptCommand()", "full_signature": "public  EncryptCommand()", "class_method_signature": "EncryptCommand.EncryptCommand()", "testcase": false, "constructor": true}, {"identifier": "EncryptCommand", "parameters": "(JolokiaCipher.KeyHolder pKeyHolder)", "modifiers": "public", "return": "", "signature": " EncryptCommand(JolokiaCipher.KeyHolder pKeyHolder)", "full_signature": "public  EncryptCommand(JolokiaCipher.KeyHolder pKeyHolder)", "class_method_signature": "EncryptCommand.EncryptCommand(JolokiaCipher.KeyHolder pKeyHolder)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override", "return": "String", "signature": "String getName()", "full_signature": "@Override String getName()", "class_method_signature": "EncryptCommand.getName()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(OptionsAndArgs pOpts, Object pVm, VirtualMachineHandler pHandler)", "modifiers": "@Override", "return": "int", "signature": "int execute(OptionsAndArgs pOpts, Object pVm, VirtualMachineHandler pHandler)", "full_signature": "@Override int execute(OptionsAndArgs pOpts, Object pVm, VirtualMachineHandler pHandler)", "class_method_signature": "EncryptCommand.execute(OptionsAndArgs pOpts, Object pVm, VirtualMachineHandler pHandler)", "testcase": false, "constructor": false}, {"identifier": "getPasswordFromConsoleOrStdin", "parameters": "(OptionsAndArgs pOpts)", "modifiers": "private", "return": "String", "signature": "String getPasswordFromConsoleOrStdin(OptionsAndArgs pOpts)", "full_signature": "private String getPasswordFromConsoleOrStdin(OptionsAndArgs pOpts)", "class_method_signature": "EncryptCommand.getPasswordFromConsoleOrStdin(OptionsAndArgs pOpts)", "testcase": false, "constructor": false}], "file": "agent/jvm/src/main/java/org/jolokia/jvmagent/client/command/EncryptCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(OptionsAndArgs pOpts, Object pVm, VirtualMachineHandler pHandler)", "modifiers": "@Override", "return": "int", "body": "@Override\n    int execute(OptionsAndArgs pOpts, Object pVm, VirtualMachineHandler pHandler)\n            throws InvocationTargetException, NoSuchMethodException, IllegalAccessException {\n        try {\n            List<String> args = pOpts.getExtraArgs();\n            String password = args.size() == 0 ?\n                    getPasswordFromConsoleOrStdin(pOpts) :\n                    args.get(0);\n            JolokiaCipher jolokiaCipher = keyHolder != null ?\n                    new JolokiaCipher(keyHolder) :\n                    new JolokiaCipher();\n            String encrypted = jolokiaCipher.encrypt(password);\n            System.out.printf(\"[[%s]]%n\", encrypted);\n            return 0;\n        } catch (GeneralSecurityException exp) {\n            throw new InvocationTargetException(exp,\"Can not encrypt password\");\n        }\n    }", "signature": "int execute(OptionsAndArgs pOpts, Object pVm, VirtualMachineHandler pHandler)", "full_signature": "@Override int execute(OptionsAndArgs pOpts, Object pVm, VirtualMachineHandler pHandler)", "class_method_signature": "EncryptCommand.execute(OptionsAndArgs pOpts, Object pVm, VirtualMachineHandler pHandler)", "testcase": false, "constructor": false, "invocations": ["getExtraArgs", "size", "getPasswordFromConsoleOrStdin", "get", "encrypt", "printf"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}