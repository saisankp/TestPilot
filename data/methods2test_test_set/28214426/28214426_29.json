{"test_class": {"identifier": "StructuredJsonLayoutTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Level LOG_LEVEL = Level.INFO;", "modifier": "private static final", "type": "Level", "declarator": "LOG_LEVEL = Level.INFO", "var_name": "LOG_LEVEL"}, {"original_string": "private static final String LOGGER_NAME = \"foo.bar\";", "modifier": "private static final", "type": "String", "declarator": "LOGGER_NAME = \"foo.bar\"", "var_name": "LOGGER_NAME"}, {"original_string": "private static final long LOG_TIME_MS = 123456L;", "modifier": "private static final", "type": "long", "declarator": "LOG_TIME_MS = 123456L", "var_name": "LOG_TIME_MS"}, {"original_string": "private static final String STRUCTURED_MSG = \"msg\";", "modifier": "private static final", "type": "String", "declarator": "STRUCTURED_MSG = \"msg\"", "var_name": "STRUCTURED_MSG"}, {"original_string": "private static final String SERIALIZED_MSG = \"serialized\";", "modifier": "private static final", "type": "String", "declarator": "SERIALIZED_MSG = \"serialized\"", "var_name": "SERIALIZED_MSG"}, {"original_string": "@Mock\n  private LogRecordBuilder<String> builder;", "modifier": "@Mock\n  private", "type": "LogRecordBuilder<String>", "declarator": "builder", "var_name": "builder"}, {"original_string": "private LoggingEvent loggingEvent;", "modifier": "private", "type": "LoggingEvent", "declarator": "loggingEvent", "var_name": "loggingEvent"}, {"original_string": "private StructuredJsonLayout layout;", "modifier": "private", "type": "StructuredJsonLayout", "declarator": "layout", "var_name": "layout"}, {"original_string": "@Rule\n  public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n  public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}], "file": "log4j-extensions/src/test/java/io/confluent/common/logging/log4j/StructuredJsonLayoutTest.java"}, "test_case": {"identifier": "shouldFormatLogRecordCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldFormatLogRecordCorrectly() {\n    // When:\n    final String msg = layout.format(loggingEvent);\n\n    // Then:\n    verifyBeforeBuild(builder, io -> io.verify(builder).withLevel(LOG_LEVEL.toString()));\n    verifyBeforeBuild(builder, io -> io.verify(builder).withTimeMs(LOG_TIME_MS));\n    verifyBeforeBuild(builder, io -> io.verify(builder).withLoggerName(LOGGER_NAME));\n    verifyBeforeBuild(builder, io -> io.verify(builder).withMessageJson(STRUCTURED_MSG));\n    assertThat(msg, equalTo(SERIALIZED_MSG));\n  }", "signature": "void shouldFormatLogRecordCorrectly()", "full_signature": "@Test public void shouldFormatLogRecordCorrectly()", "class_method_signature": "StructuredJsonLayoutTest.shouldFormatLogRecordCorrectly()", "testcase": true, "constructor": false, "invocations": ["format", "verifyBeforeBuild", "withLevel", "verify", "toString", "verifyBeforeBuild", "withTimeMs", "verify", "verifyBeforeBuild", "withLoggerName", "verify", "verifyBeforeBuild", "withMessageJson", "verify", "assertThat", "equalTo"]}, "focal_class": {"identifier": "StructuredJsonLayout", "superclass": "extends Layout", "interfaces": "", "fields": [{"original_string": "final Supplier<LogRecordBuilder<String>> logRecordBuilderFactory;", "modifier": "final", "type": "Supplier<LogRecordBuilder<String>>", "declarator": "logRecordBuilderFactory", "var_name": "logRecordBuilderFactory"}], "methods": [{"identifier": "format", "parameters": "(LoggingEvent loggingEvent)", "modifiers": "@Override public", "return": "String", "signature": "String format(LoggingEvent loggingEvent)", "full_signature": "@Override public String format(LoggingEvent loggingEvent)", "class_method_signature": "StructuredJsonLayout.format(LoggingEvent loggingEvent)", "testcase": false, "constructor": false}, {"identifier": "ignoresThrowable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean ignoresThrowable()", "full_signature": "@Override public boolean ignoresThrowable()", "class_method_signature": "StructuredJsonLayout.ignoresThrowable()", "testcase": false, "constructor": false}, {"identifier": "activateOptions", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void activateOptions()", "full_signature": "@Override public void activateOptions()", "class_method_signature": "StructuredJsonLayout.activateOptions()", "testcase": false, "constructor": false}, {"identifier": "StructuredJsonLayout", "parameters": "()", "modifiers": "public", "return": "", "signature": " StructuredJsonLayout()", "full_signature": "public  StructuredJsonLayout()", "class_method_signature": "StructuredJsonLayout.StructuredJsonLayout()", "testcase": false, "constructor": true}, {"identifier": "StructuredJsonLayout", "parameters": "(\n      final Supplier<LogRecordBuilder<String>> logRecordBuilderFactory)", "modifiers": "", "return": "", "signature": " StructuredJsonLayout(\n      final Supplier<LogRecordBuilder<String>> logRecordBuilderFactory)", "full_signature": "  StructuredJsonLayout(\n      final Supplier<LogRecordBuilder<String>> logRecordBuilderFactory)", "class_method_signature": "StructuredJsonLayout.StructuredJsonLayout(\n      final Supplier<LogRecordBuilder<String>> logRecordBuilderFactory)", "testcase": false, "constructor": true}], "file": "log4j-extensions/src/main/java/io/confluent/common/logging/log4j/StructuredJsonLayout.java"}, "focal_method": {"identifier": "format", "parameters": "(LoggingEvent loggingEvent)", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String format(LoggingEvent loggingEvent) {\n    final LogRecordBuilder<String> recordBuilder = logRecordBuilderFactory.get();\n    return recordBuilder.withLevel(loggingEvent.getLevel().toString())\n        .withLoggerName(loggingEvent.getLoggerName())\n        .withTimeMs(loggingEvent.getTimeStamp())\n        .withMessageJson(loggingEvent.getRenderedMessage())\n        .build();\n  }", "signature": "String format(LoggingEvent loggingEvent)", "full_signature": "@Override public String format(LoggingEvent loggingEvent)", "class_method_signature": "StructuredJsonLayout.format(LoggingEvent loggingEvent)", "testcase": false, "constructor": false, "invocations": ["get", "build", "withMessageJson", "withTimeMs", "withLoggerName", "withLevel", "toString", "getLevel", "getLoggerName", "getTimeStamp", "getRenderedMessage"]}, "repository": {"repo_id": 28214426, "url": "https://github.com/confluentinc/common", "stars": 46, "created": "12/19/2014 4:38:00 AM +00:00", "updates": "2020-01-22T00:50:00+00:00", "fork": "False", "license": "licensed"}}