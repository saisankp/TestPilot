{"test_class": {"identifier": "CreateTransactionReplyTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/messages/CreateTransactionReplyTest.java"}, "test_case": {"identifier": "testIsSerializedType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsSerializedType() {\n        assertTrue(\"isSerializedType\", CreateTransactionReply.isSerializedType(new CreateTransactionReply()));\n        assertFalse(\"isSerializedType\", CreateTransactionReply.isSerializedType(new Object()));\n    }", "signature": "void testIsSerializedType()", "full_signature": "@Test public void testIsSerializedType()", "class_method_signature": "CreateTransactionReplyTest.testIsSerializedType()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isSerializedType", "assertFalse", "isSerializedType"]}, "focal_class": {"identifier": "CreateTransactionReply", "superclass": "extends VersionedExternalizableMessage", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private String transactionPath;", "modifier": "private", "type": "String", "declarator": "transactionPath", "var_name": "transactionPath"}, {"original_string": "private TransactionIdentifier transactionId;", "modifier": "private", "type": "TransactionIdentifier", "declarator": "transactionId", "var_name": "transactionId"}], "methods": [{"identifier": "CreateTransactionReply", "parameters": "()", "modifiers": "public", "return": "", "signature": " CreateTransactionReply()", "full_signature": "public  CreateTransactionReply()", "class_method_signature": "CreateTransactionReply.CreateTransactionReply()", "testcase": false, "constructor": true}, {"identifier": "CreateTransactionReply", "parameters": "(final String transactionPath, final TransactionIdentifier transactionId,\n            final short version)", "modifiers": "public", "return": "", "signature": " CreateTransactionReply(final String transactionPath, final TransactionIdentifier transactionId,\n            final short version)", "full_signature": "public  CreateTransactionReply(final String transactionPath, final TransactionIdentifier transactionId,\n            final short version)", "class_method_signature": "CreateTransactionReply.CreateTransactionReply(final String transactionPath, final TransactionIdentifier transactionId,\n            final short version)", "testcase": false, "constructor": true}, {"identifier": "getTransactionPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTransactionPath()", "full_signature": "public String getTransactionPath()", "class_method_signature": "CreateTransactionReply.getTransactionPath()", "testcase": false, "constructor": false}, {"identifier": "getTransactionId", "parameters": "()", "modifiers": "public", "return": "TransactionIdentifier", "signature": "TransactionIdentifier getTransactionId()", "full_signature": "public TransactionIdentifier getTransactionId()", "class_method_signature": "CreateTransactionReply.getTransactionId()", "testcase": false, "constructor": false}, {"identifier": "readExternal", "parameters": "(ObjectInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readExternal(ObjectInput in)", "full_signature": "@Override public void readExternal(ObjectInput in)", "class_method_signature": "CreateTransactionReply.readExternal(ObjectInput in)", "testcase": false, "constructor": false}, {"identifier": "writeExternal", "parameters": "(ObjectOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void writeExternal(ObjectOutput out)", "full_signature": "@Override public void writeExternal(ObjectOutput out)", "class_method_signature": "CreateTransactionReply.writeExternal(ObjectOutput out)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CreateTransactionReply.toString()", "testcase": false, "constructor": false}, {"identifier": "fromSerializable", "parameters": "(Object serializable)", "modifiers": "public static", "return": "CreateTransactionReply", "signature": "CreateTransactionReply fromSerializable(Object serializable)", "full_signature": "public static CreateTransactionReply fromSerializable(Object serializable)", "class_method_signature": "CreateTransactionReply.fromSerializable(Object serializable)", "testcase": false, "constructor": false}, {"identifier": "isSerializedType", "parameters": "(Object message)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSerializedType(Object message)", "full_signature": "public static boolean isSerializedType(Object message)", "class_method_signature": "CreateTransactionReply.isSerializedType(Object message)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/messages/CreateTransactionReply.java"}, "focal_method": {"identifier": "isSerializedType", "parameters": "(Object message)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isSerializedType(Object message) {\n        return message instanceof CreateTransactionReply;\n    }", "signature": "boolean isSerializedType(Object message)", "full_signature": "public static boolean isSerializedType(Object message)", "class_method_signature": "CreateTransactionReply.isSerializedType(Object message)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}