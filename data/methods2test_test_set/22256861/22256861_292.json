{"test_class": {"identifier": "AtmosphericAuxdataStaticTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-c2rcc/src/test/java/org/esa/s3tbx/c2rcc/ancillary/AtmosphericAuxdataStaticTest.java"}, "test_case": {"identifier": "createCalendarByFilename", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createCalendarByFilename() throws Exception {\n        Calendar calendar;\n        calendar = AtmosphericAuxdataStatic.createCalendarByFilename(\"N201519412_O3_AURAOMI_24h.hdf\");\n        verifyCalendar(calendar, 194, 2015, 6, 13, 12);\n\n        calendar = AtmosphericAuxdataStatic.createCalendarByFilename(\"N201606006_O3_AURAOMI_24h.hdf\");\n        verifyCalendar(calendar, 60, 2016, 1, 29, 6);\n        calendar = AtmosphericAuxdataStatic.createCalendarByFilename(\"N201606108_O3_AURAOMI_24h.hdf\");\n        verifyCalendar(calendar, 61, 2016, 2, 1, 8);\n    }", "signature": "void createCalendarByFilename()", "full_signature": "@Test public void createCalendarByFilename()", "class_method_signature": "AtmosphericAuxdataStaticTest.createCalendarByFilename()", "testcase": true, "constructor": false, "invocations": ["createCalendarByFilename", "verifyCalendar", "createCalendarByFilename", "verifyCalendar", "createCalendarByFilename", "verifyCalendar"]}, "focal_class": {"identifier": "AtmosphericAuxdataStatic", "superclass": "", "interfaces": "implements AtmosphericAuxdata", "fields": [{"original_string": "private final DataInterpolator ozoneInterpolator;", "modifier": "private final", "type": "DataInterpolator", "declarator": "ozoneInterpolator", "var_name": "ozoneInterpolator"}, {"original_string": "private final DataInterpolator pressureInterpolator;", "modifier": "private final", "type": "DataInterpolator", "declarator": "pressureInterpolator", "var_name": "pressureInterpolator"}], "methods": [{"identifier": "AtmosphericAuxdataStatic", "parameters": "(Product startOzone, Product endOzone,\n                             String ozoneBandName, double ozoneDefault,\n                             Product startPressure, Product endPressure,\n                             String pressureBandName, double pressureDefault)", "modifiers": "", "return": "", "signature": " AtmosphericAuxdataStatic(Product startOzone, Product endOzone,\n                             String ozoneBandName, double ozoneDefault,\n                             Product startPressure, Product endPressure,\n                             String pressureBandName, double pressureDefault)", "full_signature": "  AtmosphericAuxdataStatic(Product startOzone, Product endOzone,\n                             String ozoneBandName, double ozoneDefault,\n                             Product startPressure, Product endPressure,\n                             String pressureBandName, double pressureDefault)", "class_method_signature": "AtmosphericAuxdataStatic.AtmosphericAuxdataStatic(Product startOzone, Product endOzone,\n                             String ozoneBandName, double ozoneDefault,\n                             Product startPressure, Product endPressure,\n                             String pressureBandName, double pressureDefault)", "testcase": false, "constructor": true}, {"identifier": "AtmosphericAuxdataStatic", "parameters": "(DataInterpolator ozoneInterpolator, DataInterpolator pressureInterpolator)", "modifiers": "private", "return": "", "signature": " AtmosphericAuxdataStatic(DataInterpolator ozoneInterpolator, DataInterpolator pressureInterpolator)", "full_signature": "private  AtmosphericAuxdataStatic(DataInterpolator ozoneInterpolator, DataInterpolator pressureInterpolator)", "class_method_signature": "AtmosphericAuxdataStatic.AtmosphericAuxdataStatic(DataInterpolator ozoneInterpolator, DataInterpolator pressureInterpolator)", "testcase": false, "constructor": true}, {"identifier": "getOzone", "parameters": "(double mjd, int x, int y, double lat, double lon)", "modifiers": "@Override public", "return": "double", "signature": "double getOzone(double mjd, int x, int y, double lat, double lon)", "full_signature": "@Override public double getOzone(double mjd, int x, int y, double lat, double lon)", "class_method_signature": "AtmosphericAuxdataStatic.getOzone(double mjd, int x, int y, double lat, double lon)", "testcase": false, "constructor": false}, {"identifier": "getSurfacePressure", "parameters": "(double mjd, int x, int y, double lat, double lon)", "modifiers": "@Override public", "return": "double", "signature": "double getSurfacePressure(double mjd, int x, int y, double lat, double lon)", "full_signature": "@Override public double getSurfacePressure(double mjd, int x, int y, double lat, double lon)", "class_method_signature": "AtmosphericAuxdataStatic.getSurfacePressure(double mjd, int x, int y, double lat, double lon)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "AtmosphericAuxdataStatic.dispose()", "testcase": false, "constructor": false}, {"identifier": "getOzoneInterpolator", "parameters": "(Product startOzone, Product endOzone, String ozoneBandName, double ozoneDefault)", "modifiers": "private static", "return": "DataInterpolator", "signature": "DataInterpolator getOzoneInterpolator(Product startOzone, Product endOzone, String ozoneBandName, double ozoneDefault)", "full_signature": "private static DataInterpolator getOzoneInterpolator(Product startOzone, Product endOzone, String ozoneBandName, double ozoneDefault)", "class_method_signature": "AtmosphericAuxdataStatic.getOzoneInterpolator(Product startOzone, Product endOzone, String ozoneBandName, double ozoneDefault)", "testcase": false, "constructor": false}, {"identifier": "getPressureInterpolator", "parameters": "(Product startPressure, Product endPressure, String pressureBandName, double pressureDefault)", "modifiers": "private static", "return": "DataInterpolator", "signature": "DataInterpolator getPressureInterpolator(Product startPressure, Product endPressure, String pressureBandName, double pressureDefault)", "full_signature": "private static DataInterpolator getPressureInterpolator(Product startPressure, Product endPressure, String pressureBandName, double pressureDefault)", "class_method_signature": "AtmosphericAuxdataStatic.getPressureInterpolator(Product startPressure, Product endPressure, String pressureBandName, double pressureDefault)", "testcase": false, "constructor": false}, {"identifier": "isValidProduct", "parameters": "(Product product)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidProduct(Product product)", "full_signature": "private static boolean isValidProduct(Product product)", "class_method_signature": "AtmosphericAuxdataStatic.isValidProduct(Product product)", "testcase": false, "constructor": false}, {"identifier": "getTime", "parameters": "(Product product)", "modifiers": "private static", "return": "double", "signature": "double getTime(Product product)", "full_signature": "private static double getTime(Product product)", "class_method_signature": "AtmosphericAuxdataStatic.getTime(Product product)", "testcase": false, "constructor": false}, {"identifier": "createCalendarByFilename", "parameters": "(String fileName)", "modifiers": "static", "return": "Calendar", "signature": "Calendar createCalendarByFilename(String fileName)", "full_signature": "static Calendar createCalendarByFilename(String fileName)", "class_method_signature": "AtmosphericAuxdataStatic.createCalendarByFilename(String fileName)", "testcase": false, "constructor": false}], "file": "s3tbx-c2rcc/src/main/java/org/esa/s3tbx/c2rcc/ancillary/AtmosphericAuxdataStatic.java"}, "focal_method": {"identifier": "createCalendarByFilename", "parameters": "(String fileName)", "modifiers": "static", "return": "Calendar", "body": "static Calendar createCalendarByFilename(String fileName) {\n        int year = Integer.parseInt(fileName.substring(1, 5));\n        int doy = Integer.parseInt(fileName.substring(5, 8));\n        int hour = Integer.parseInt(fileName.substring(8, 10));\n        final Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"), Locale.ENGLISH);\n        calendar.set(Calendar.YEAR, year);\n        calendar.set(Calendar.DAY_OF_YEAR, doy);\n        calendar.set(Calendar.HOUR_OF_DAY, hour);\n        calendar.set(Calendar.MINUTE, 0);\n        calendar.set(Calendar.SECOND, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        return calendar;\n    }", "signature": "Calendar createCalendarByFilename(String fileName)", "full_signature": "static Calendar createCalendarByFilename(String fileName)", "class_method_signature": "AtmosphericAuxdataStatic.createCalendarByFilename(String fileName)", "testcase": false, "constructor": false, "invocations": ["parseInt", "substring", "parseInt", "substring", "parseInt", "substring", "getInstance", "getTimeZone", "set", "set", "set", "set", "set", "set"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}