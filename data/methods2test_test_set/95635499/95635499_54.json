{"test_class": {"identifier": "ExperimentAdditionalTableLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final IDatabaseConfig DB_CONFIG = null;", "modifier": "private static final", "type": "IDatabaseConfig", "declarator": "DB_CONFIG = null", "var_name": "DB_CONFIG"}], "file": "JAICore/jaicore-experiments/src/test/java/ai/libs/jaicore/experiments/ExperimentAdditionalTableLoaderTest.java"}, "test_case": {"identifier": "testCreateTables", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCreateTables() throws IOException, SQLException {\n\t\tSQLAdapter adapter = new SQLAdapter(DB_CONFIG);\n\t\tExperimentAdditionalTableLoader.executeStatementsFromDirectory(\"test_resource\", adapter);\n\t\tadapter.update(\"DROP TABLE IF EXISTS test\");\n\t\tadapter.update(\"DROP TABLE IF EXISTS test2\");\n\t}", "signature": "void testCreateTables()", "full_signature": "@Test public void testCreateTables()", "class_method_signature": "ExperimentAdditionalTableLoaderTest.testCreateTables()", "testcase": true, "constructor": false, "invocations": ["executeStatementsFromDirectory", "update", "update"]}, "focal_class": {"identifier": "ExperimentAdditionalTableLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(ExperimentAdditionalTableLoader.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ExperimentAdditionalTableLoader.class)", "var_name": "logger"}], "methods": [{"identifier": "ExperimentAdditionalTableLoader", "parameters": "()", "modifiers": "private", "return": "", "signature": " ExperimentAdditionalTableLoader()", "full_signature": "private  ExperimentAdditionalTableLoader()", "class_method_signature": "ExperimentAdditionalTableLoader.ExperimentAdditionalTableLoader()", "testcase": false, "constructor": true}, {"identifier": "executeStatementsFromDirectory", "parameters": "(final String folder, final SQLAdapter adapter)", "modifiers": "public static", "return": "void", "signature": "void executeStatementsFromDirectory(final String folder, final SQLAdapter adapter)", "full_signature": "public static void executeStatementsFromDirectory(final String folder, final SQLAdapter adapter)", "class_method_signature": "ExperimentAdditionalTableLoader.executeStatementsFromDirectory(final String folder, final SQLAdapter adapter)", "testcase": false, "constructor": false}, {"identifier": "executeStatementInFile", "parameters": "(final Path file, final SQLAdapter adapter)", "modifiers": "private static", "return": "void", "signature": "void executeStatementInFile(final Path file, final SQLAdapter adapter)", "full_signature": "private static void executeStatementInFile(final Path file, final SQLAdapter adapter)", "class_method_signature": "ExperimentAdditionalTableLoader.executeStatementInFile(final Path file, final SQLAdapter adapter)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-experiments/src/main/java/ai/libs/jaicore/experiments/ExperimentAdditionalTableLoader.java"}, "focal_method": {"identifier": "executeStatementsFromDirectory", "parameters": "(final String folder, final SQLAdapter adapter)", "modifiers": "public static", "return": "void", "body": "public static void executeStatementsFromDirectory(final String folder, final SQLAdapter adapter) throws IOException {\n\t\ttry (Stream<Path> paths = Files.walk(Paths.get(folder))) {\n\t\t\tpaths.filter(f -> f.toFile().isFile()).forEach(file -> {\n\t\t\t\ttry {\n\t\t\t\t\tlogger.info(\"Execute_Statement\");\n\t\t\t\t\texecuteStatementInFile(file, adapter);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlogger.warn(\"Could not load sql file {} for creating tables for the experimenter: {}\", file.getFileName(), e.getMessage());\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\tlogger.warn(\"Could not execute sql in the file {} and not create the table for the experimenter: {}\", file.getFileName(), e.getMessage());\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}", "signature": "void executeStatementsFromDirectory(final String folder, final SQLAdapter adapter)", "full_signature": "public static void executeStatementsFromDirectory(final String folder, final SQLAdapter adapter)", "class_method_signature": "ExperimentAdditionalTableLoader.executeStatementsFromDirectory(final String folder, final SQLAdapter adapter)", "testcase": false, "constructor": false, "invocations": ["walk", "get", "forEach", "filter", "isFile", "toFile", "info", "executeStatementInFile", "warn", "getFileName", "getMessage", "warn", "getFileName", "getMessage"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}