{"test_class": {"identifier": "GzipCompressionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private GZIPOutputStream gzipOutputStream;", "modifier": "@Mock\n    private", "type": "GZIPOutputStream", "declarator": "gzipOutputStream", "var_name": "gzipOutputStream"}, {"original_string": "@Mock\n    private ByteArrayOutputStream baos;", "modifier": "@Mock\n    private", "type": "ByteArrayOutputStream", "declarator": "baos", "var_name": "baos"}, {"original_string": "@Mock\n    private InputStream source;", "modifier": "@Mock\n    private", "type": "InputStream", "declarator": "source", "var_name": "source"}, {"original_string": "@Mock\n    private ByteArrayOutputStreamFactory outputStreamFactory;", "modifier": "@Mock\n    private", "type": "ByteArrayOutputStreamFactory", "declarator": "outputStreamFactory", "var_name": "outputStreamFactory"}, {"original_string": "@Mock\n    private GzipOutputStreamFactory gzipOutpuStreamFactory;", "modifier": "@Mock\n    private", "type": "GzipOutputStreamFactory", "declarator": "gzipOutpuStreamFactory", "var_name": "gzipOutpuStreamFactory"}, {"original_string": "@Mock\n    private GzipInputStreamFactory gzipInputStreamFactory;", "modifier": "@Mock\n    private", "type": "GzipInputStreamFactory", "declarator": "gzipInputStreamFactory", "var_name": "gzipInputStreamFactory"}, {"original_string": "@Mock\n    private GZIPInputStream gzipInputStream;", "modifier": "@Mock\n    private", "type": "GZIPInputStream", "declarator": "gzipInputStream", "var_name": "gzipInputStream"}, {"original_string": "@InjectMocks\n    private GzipCompressionService underTest;", "modifier": "@InjectMocks\n    private", "type": "GzipCompressionService", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-compression/src/test/java/com/epam/wilma/compression/gzip/GzipCompressionServiceTest.java"}, "test_case": {"identifier": "testDecompressShouldReturnWriter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecompressShouldReturnWriter() throws IOException {\n        //GIVEN\n        given(outputStreamFactory.createByteArrayOutputStream()).willReturn(baos);\n        given(gzipInputStreamFactory.createInputStream(source)).willReturn(gzipInputStream);\n        given(gzipInputStream.read((byte[]) Mockito.any())).willReturn(1, -1);\n        //WHEN\n        ByteArrayOutputStream actual = underTest.decompress(source);\n        //THEN\n        assertEquals(actual, baos);\n    }", "signature": "void testDecompressShouldReturnWriter()", "full_signature": "@Test public void testDecompressShouldReturnWriter()", "class_method_signature": "GzipCompressionServiceTest.testDecompressShouldReturnWriter()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "createByteArrayOutputStream", "willReturn", "given", "createInputStream", "willReturn", "given", "read", "any", "decompress", "assertEquals"]}, "focal_class": {"identifier": "GzipCompressionService", "superclass": "", "interfaces": "implements CompressionService", "fields": [{"original_string": "@Autowired\n    private GzipOutputStreamFactory gzipOutputStreamFactory;", "modifier": "@Autowired\n    private", "type": "GzipOutputStreamFactory", "declarator": "gzipOutputStreamFactory", "var_name": "gzipOutputStreamFactory"}, {"original_string": "@Autowired\n    private GzipInputStreamFactory gzipInputStreamFactory;", "modifier": "@Autowired\n    private", "type": "GzipInputStreamFactory", "declarator": "gzipInputStreamFactory", "var_name": "gzipInputStreamFactory"}, {"original_string": "@Autowired\n    private ByteArrayOutputStreamFactory outputStreamFactory;", "modifier": "@Autowired\n    private", "type": "ByteArrayOutputStreamFactory", "declarator": "outputStreamFactory", "var_name": "outputStreamFactory"}], "methods": [{"identifier": "compress", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "ByteArrayOutputStream", "signature": "ByteArrayOutputStream compress(final InputStream inputStream)", "full_signature": "@Override public ByteArrayOutputStream compress(final InputStream inputStream)", "class_method_signature": "GzipCompressionService.compress(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "decompress", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "ByteArrayOutputStream", "signature": "ByteArrayOutputStream decompress(final InputStream inputStream)", "full_signature": "@Override public ByteArrayOutputStream decompress(final InputStream inputStream)", "class_method_signature": "GzipCompressionService.decompress(final InputStream inputStream)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-compression/src/main/java/com/epam/wilma/compression/gzip/GzipCompressionService.java"}, "focal_method": {"identifier": "decompress", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "ByteArrayOutputStream", "body": "@Override\n    public ByteArrayOutputStream decompress(final InputStream inputStream) {\n        OutputStream writer = outputStreamFactory.createByteArrayOutputStream();\n        try {\n            GZIPInputStream gzipStream = gzipInputStreamFactory.createInputStream(inputStream);\n            IOUtils.copy(gzipStream, writer);\n        } catch (IOException e) {\n            throw new SystemException(\"Could not ungzip message body!\", e);\n        }\n        return (ByteArrayOutputStream) writer;\n    }", "signature": "ByteArrayOutputStream decompress(final InputStream inputStream)", "full_signature": "@Override public ByteArrayOutputStream decompress(final InputStream inputStream)", "class_method_signature": "GzipCompressionService.decompress(final InputStream inputStream)", "testcase": false, "constructor": false, "invocations": ["createByteArrayOutputStream", "createInputStream", "copy"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}