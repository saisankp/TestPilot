{"test_class": {"identifier": "TestUDPConfigHandler", "superclass": "extends UDPTestBase", "interfaces": "", "fields": [{"original_string": "UDPConfigHandler udpConfig;", "modifier": "", "type": "UDPConfigHandler", "declarator": "udpConfig", "var_name": "udpConfig"}, {"original_string": "String sourceName;", "modifier": "", "type": "String", "declarator": "sourceName", "var_name": "sourceName"}, {"original_string": "FalseClient client;", "modifier": "", "type": "FalseClient", "declarator": "client", "var_name": "client"}, {"original_string": "ExtensionServiceMessage msg;", "modifier": "", "type": "ExtensionServiceMessage", "declarator": "msg", "var_name": "msg"}], "file": "udpSource/src/test/java/io/vantiq/extsrc/udp/TestUDPConfigHandler.java"}, "test_case": {"identifier": "testIsConfiguredToReceive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsConfiguredToReceive() {\n        Map<String,Object> incoming = new LinkedHashMap<>();\n        \n        // First, use the right names but wrong types or invalid values\n        incoming.put(\"receiveAllPorts\", false);\n        incoming.put(\"receiveAllAddresses\", false);\n        incoming.put(\"passPureMapIn\", \"not a bool\");\n        incoming.put(\"passUnspecifiedIn\", new Object()); // That's enough of the vals that should be a boolean\n        incoming.put(\"passRecAddress\", 1357);\n        incoming.put(\"passRecPort\", new ArrayList().add(\"not actually a string\"));\n        List<Object> l = new ArrayList<>(); l.add(1234567); l.add(-1); l.add(\"2000\"); l.add(\"not a num\");\n        incoming.put(\"receivePorts\", l);\n        l = new ArrayList<>(); l.add(153); l.add(new Object()); l.add(\"not a valid address\"); l.add(\"1.2.3.4.5\");\n        incoming.put(\"receiveAddresses\", l);\n        l = new ArrayList<>();\n        List<Object> subl = new ArrayList<>(); subl.add(\"invalid address\"); subl.add(2000); l.add(subl); // bad address\n        subl = new ArrayList<>(); subl.add(\"localhost\"); subl.add(-1); l.add(subl); // bad port\n        subl = new ArrayList<>(); subl.add(2000); subl.add(\"localhost\"); l.add(subl); // wrong order\n        incoming.put(\"receiveServers\", l);\n        l = new ArrayList<>();\n        subl = new ArrayList<>(); subl.add(123); subl.add(\"location\"); l.add(subl);\n        subl = new ArrayList<>(); subl.add(\"location\"); l.add(subl);\n        subl = new ArrayList<>(); subl.add(123); subl.add(\"location\"); subl.add(\"location2\"); l.add(subl);\n        subl = new ArrayList<>(); subl.add(\"123\"); subl.add(new Object()); l.add(subl);\n        incoming.put(\"transformations\", l);\n        Map<String,Object> m = new LinkedHashMap<>();\n        m.put(\"pattern\", \"valid regex\");\n        m.put(\"locations\", \"not a list\");\n        incoming.put(\"regexParser\", m);\n        \n        assert !udpConfig.isConfiguredToReceive(incoming);\n        \n        // now set one to a valid setting and try again\n        m = new LinkedHashMap<>();\n        m.put(\"pattern\", \"valid regex with (two) (capture groups)\");\n        l = new ArrayList(); l.add(\"firstLoc\"); l.add(\"secondLocs\");\n        m.put(\"locations\", l);\n        incoming.put(\"regexParser\", m);\n        \n        assert udpConfig.isConfiguredToReceive(incoming);\n    }", "signature": "void testIsConfiguredToReceive()", "full_signature": "@Test public void testIsConfiguredToReceive()", "class_method_signature": "TestUDPConfigHandler.testIsConfiguredToReceive()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "put", "add", "add", "add", "add", "add", "put", "add", "add", "add", "add", "put", "add", "add", "add", "add", "add", "add", "add", "add", "add", "put", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "put", "put", "put", "put", "isConfiguredToReceive", "put", "add", "add", "put", "put", "isConfiguredToReceive"]}, "focal_class": {"identifier": "UDPConfigHandler", "superclass": "extends Handler<ExtensionServiceMessage>", "interfaces": "", "fields": [], "methods": [{"identifier": "handleMessage", "parameters": "(ExtensionServiceMessage message)", "modifiers": "@Override public", "return": "void", "signature": "void handleMessage(ExtensionServiceMessage message)", "full_signature": "@Override public void handleMessage(ExtensionServiceMessage message)", "class_method_signature": "UDPConfigHandler.handleMessage(ExtensionServiceMessage message)", "testcase": false, "constructor": false}, {"identifier": "getListeningPort", "parameters": "(Map general,String sourceName)", "modifiers": "", "return": "int", "signature": "int getListeningPort(Map general,String sourceName)", "full_signature": " int getListeningPort(Map general,String sourceName)", "class_method_signature": "UDPConfigHandler.getListeningPort(Map general,String sourceName)", "testcase": false, "constructor": false}, {"identifier": "getListeningAddress", "parameters": "(Map general, String sourceName)", "modifiers": "", "return": "InetAddress", "signature": "InetAddress getListeningAddress(Map general, String sourceName)", "full_signature": " InetAddress getListeningAddress(Map general, String sourceName)", "class_method_signature": "UDPConfigHandler.getListeningAddress(Map general, String sourceName)", "testcase": false, "constructor": false}, {"identifier": "isConfiguredToSend", "parameters": "(Map outgoing)", "modifiers": "", "return": "boolean", "signature": "boolean isConfiguredToSend(Map outgoing)", "full_signature": " boolean isConfiguredToSend(Map outgoing)", "class_method_signature": "UDPConfigHandler.isConfiguredToSend(Map outgoing)", "testcase": false, "constructor": false}, {"identifier": "isConfiguredToReceive", "parameters": "(Map incoming)", "modifiers": "", "return": "boolean", "signature": "boolean isConfiguredToReceive(Map incoming)", "full_signature": " boolean isConfiguredToReceive(Map incoming)", "class_method_signature": "UDPConfigHandler.isConfiguredToReceive(Map incoming)", "testcase": false, "constructor": false}, {"identifier": "hasValidAddress", "parameters": "(List potentialAddresses)", "modifiers": "", "return": "boolean", "signature": "boolean hasValidAddress(List potentialAddresses)", "full_signature": " boolean hasValidAddress(List potentialAddresses)", "class_method_signature": "UDPConfigHandler.hasValidAddress(List potentialAddresses)", "testcase": false, "constructor": false}, {"identifier": "hasValidPort", "parameters": "(List potentialPorts)", "modifiers": "", "return": "boolean", "signature": "boolean hasValidPort(List potentialPorts)", "full_signature": " boolean hasValidPort(List potentialPorts)", "class_method_signature": "UDPConfigHandler.hasValidPort(List potentialPorts)", "testcase": false, "constructor": false}, {"identifier": "hasValidServer", "parameters": "(List potentialServers)", "modifiers": "", "return": "boolean", "signature": "boolean hasValidServer(List potentialServers)", "full_signature": " boolean hasValidServer(List potentialServers)", "class_method_signature": "UDPConfigHandler.hasValidServer(List potentialServers)", "testcase": false, "constructor": false}, {"identifier": "hasValidTransform", "parameters": "(List potentialTransformations)", "modifiers": "", "return": "boolean", "signature": "boolean hasValidTransform(List potentialTransformations)", "full_signature": " boolean hasValidTransform(List potentialTransformations)", "class_method_signature": "UDPConfigHandler.hasValidTransform(List potentialTransformations)", "testcase": false, "constructor": false}, {"identifier": "isValidRegexParser", "parameters": "(Map potentialParser)", "modifiers": "", "return": "boolean", "signature": "boolean isValidRegexParser(Map potentialParser)", "full_signature": " boolean isValidRegexParser(Map potentialParser)", "class_method_signature": "UDPConfigHandler.isValidRegexParser(Map potentialParser)", "testcase": false, "constructor": false}], "file": "udpSource/src/main/java/io/vantiq/extsrc/udp/UDPConfigHandler.java"}, "focal_method": {"identifier": "isConfiguredToReceive", "parameters": "(Map incoming)", "modifiers": "", "return": "boolean", "body": "boolean isConfiguredToReceive(Map incoming) {\n        return incoming != null &&\n                (ConfigurableUDPSource.valueIsTrue(incoming, \"receiveAllPorts\") \n                || ConfigurableUDPSource.valueIsTrue(incoming, \"receiveAllAddresses\") ||\n                ConfigurableUDPSource.valueIsTrue(incoming, \"passPureMapIn\") \n                || ConfigurableUDPSource.valueIsTrue(incoming, \"passUnspecifiedIn\") ||\n                ConfigurableUDPSource.valueIsTrue(incoming,\"expectCsvIn\") || ConfigurableUDPSource.valueIsTrue(incoming,\"expectXmlIn\") ||\n                incoming.get(\"passRecAddress\") instanceof String || incoming.get(\"passRecPort\") instanceof String ||\n                incoming.get(\"passBytesInAs\") instanceof String ||\n                (incoming.get(\"receivePorts\") instanceof List  \n                        && hasValidPort((List) incoming.get(\"receivePorts\"))) ||\n                (incoming.get(\"receiveAddresses\") instanceof List \n                        && hasValidAddress((List) incoming.get(\"receiveAddresses\"))) ||\n                (incoming.get(\"receiveServers\") instanceof List \n                        && hasValidServer((List) incoming.get(\"receiveServers\"))) ||\n                (incoming.get(\"transformations\") instanceof List \n                        && hasValidTransform((List) incoming.get(\"transformations\"))) || \n                (incoming.get(\"regexParser\") instanceof Map && \n                        isValidRegexParser((Map)incoming.get(\"regexParser\")))\n                );\n    }", "signature": "boolean isConfiguredToReceive(Map incoming)", "full_signature": " boolean isConfiguredToReceive(Map incoming)", "class_method_signature": "UDPConfigHandler.isConfiguredToReceive(Map incoming)", "testcase": false, "constructor": false, "invocations": ["valueIsTrue", "valueIsTrue", "valueIsTrue", "valueIsTrue", "valueIsTrue", "valueIsTrue", "get", "get", "get", "get", "hasValidPort", "get", "get", "hasValidAddress", "get", "get", "hasValidServer", "get", "get", "hasValidTransform", "get", "get", "isValidRegexParser", "get"]}, "repository": {"repo_id": 141492069, "url": "https://github.com/Vantiq/vantiq-extension-sources", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 16261, "license": "licensed"}}