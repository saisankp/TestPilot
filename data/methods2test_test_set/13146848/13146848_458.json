{"test_class": {"identifier": "PDDocumentHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/PDDocumentHandlerTest.java"}, "test_case": {"identifier": "testAddBlankPageIfOdd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddBlankPageIfOdd() throws IOException {\n        try (PDDocumentHandler handler = new PDDocumentHandler()) {\n            assertNull(handler.addBlankPageIfOdd(new PDRectangle(10, 10)));\n            handler.addBlankPage(new PDRectangle(10, 10));\n            assertNotNull(handler.addBlankPageIfOdd(new PDRectangle(10, 10)));\n        }\n    }", "signature": "void testAddBlankPageIfOdd()", "full_signature": "@Test public void testAddBlankPageIfOdd()", "class_method_signature": "PDDocumentHandlerTest.testAddBlankPageIfOdd()", "testcase": true, "constructor": false, "invocations": ["assertNull", "addBlankPageIfOdd", "addBlankPage", "assertNotNull", "addBlankPageIfOdd"]}, "focal_class": {"identifier": "PDDocumentHandler", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "public static final String SAMBOX_USE_ASYNC_WRITER = \"sejda.sambox.asyncwriter\";", "modifier": "public static final", "type": "String", "declarator": "SAMBOX_USE_ASYNC_WRITER = \"sejda.sambox.asyncwriter\"", "var_name": "SAMBOX_USE_ASYNC_WRITER"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PDDocumentHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PDDocumentHandler.class)", "var_name": "LOG"}, {"original_string": "private static final WriteOption[] COMPRESSED_OPTS = new WriteOption[] { WriteOption.COMPRESS_STREAMS,\n            WriteOption.OBJECT_STREAMS, WriteOption.XREF_STREAM };", "modifier": "private static final", "type": "WriteOption[]", "declarator": "COMPRESSED_OPTS = new WriteOption[] { WriteOption.COMPRESS_STREAMS,\n            WriteOption.OBJECT_STREAMS, WriteOption.XREF_STREAM }", "var_name": "COMPRESSED_OPTS"}, {"original_string": "private PDDocument document;", "modifier": "private", "type": "PDDocument", "declarator": "document", "var_name": "document"}, {"original_string": "private PDDocumentAccessPermission permissions;", "modifier": "private", "type": "PDDocumentAccessPermission", "declarator": "permissions", "var_name": "permissions"}, {"original_string": "private Set<WriteOption> writeOptions = new HashSet<>();", "modifier": "private", "type": "Set<WriteOption>", "declarator": "writeOptions = new HashSet<>()", "var_name": "writeOptions"}], "methods": [{"identifier": "PDDocumentHandler", "parameters": "(PDDocument document)", "modifiers": "public", "return": "", "signature": " PDDocumentHandler(PDDocument document)", "full_signature": "public  PDDocumentHandler(PDDocument document)", "class_method_signature": "PDDocumentHandler.PDDocumentHandler(PDDocument document)", "testcase": false, "constructor": true}, {"identifier": "PDDocumentHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " PDDocumentHandler()", "full_signature": "public  PDDocumentHandler()", "class_method_signature": "PDDocumentHandler.PDDocumentHandler()", "testcase": false, "constructor": true}, {"identifier": "setCreatorOnPDDocument", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setCreatorOnPDDocument()", "full_signature": "public void setCreatorOnPDDocument()", "class_method_signature": "PDDocumentHandler.setCreatorOnPDDocument()", "testcase": false, "constructor": false}, {"identifier": "setDocumentInformation", "parameters": "(PDDocumentInformation info)", "modifiers": "public", "return": "void", "signature": "void setDocumentInformation(PDDocumentInformation info)", "full_signature": "public void setDocumentInformation(PDDocumentInformation info)", "class_method_signature": "PDDocumentHandler.setDocumentInformation(PDDocumentInformation info)", "testcase": false, "constructor": false}, {"identifier": "setDocumentTitle", "parameters": "(String title)", "modifiers": "public", "return": "void", "signature": "void setDocumentTitle(String title)", "full_signature": "public void setDocumentTitle(String title)", "class_method_signature": "PDDocumentHandler.setDocumentTitle(String title)", "testcase": false, "constructor": false}, {"identifier": "getPermissions", "parameters": "()", "modifiers": "public", "return": "PDDocumentAccessPermission", "signature": "PDDocumentAccessPermission getPermissions()", "full_signature": "public PDDocumentAccessPermission getPermissions()", "class_method_signature": "PDDocumentHandler.getPermissions()", "testcase": false, "constructor": false}, {"identifier": "setPageLayoutOnDocument", "parameters": "(PdfPageLayout layout)", "modifiers": "public", "return": "void", "signature": "void setPageLayoutOnDocument(PdfPageLayout layout)", "full_signature": "public void setPageLayoutOnDocument(PdfPageLayout layout)", "class_method_signature": "PDDocumentHandler.setPageLayoutOnDocument(PdfPageLayout layout)", "testcase": false, "constructor": false}, {"identifier": "setPageModeOnDocument", "parameters": "(PdfPageMode mode)", "modifiers": "public", "return": "void", "signature": "void setPageModeOnDocument(PdfPageMode mode)", "full_signature": "public void setPageModeOnDocument(PdfPageMode mode)", "class_method_signature": "PDDocumentHandler.setPageModeOnDocument(PdfPageMode mode)", "testcase": false, "constructor": false}, {"identifier": "setPageLabelsOnDocument", "parameters": "(Map<Integer, PdfPageLabel> labels)", "modifiers": "public", "return": "void", "signature": "void setPageLabelsOnDocument(Map<Integer, PdfPageLabel> labels)", "full_signature": "public void setPageLabelsOnDocument(Map<Integer, PdfPageLabel> labels)", "class_method_signature": "PDDocumentHandler.setPageLabelsOnDocument(Map<Integer, PdfPageLabel> labels)", "testcase": false, "constructor": false}, {"identifier": "setVersionOnPDDocument", "parameters": "(PdfVersion version)", "modifiers": "public", "return": "void", "signature": "void setVersionOnPDDocument(PdfVersion version)", "full_signature": "public void setVersionOnPDDocument(PdfVersion version)", "class_method_signature": "PDDocumentHandler.setVersionOnPDDocument(PdfVersion version)", "testcase": false, "constructor": false}, {"identifier": "addWriteOption", "parameters": "(WriteOption... opts)", "modifiers": "public", "return": "void", "signature": "void addWriteOption(WriteOption... opts)", "full_signature": "public void addWriteOption(WriteOption... opts)", "class_method_signature": "PDDocumentHandler.addWriteOption(WriteOption... opts)", "testcase": false, "constructor": false}, {"identifier": "removeWriteOption", "parameters": "(WriteOption... opts)", "modifiers": "public", "return": "void", "signature": "void removeWriteOption(WriteOption... opts)", "full_signature": "public void removeWriteOption(WriteOption... opts)", "class_method_signature": "PDDocumentHandler.removeWriteOption(WriteOption... opts)", "testcase": false, "constructor": false}, {"identifier": "setCompress", "parameters": "(boolean compress)", "modifiers": "public", "return": "void", "signature": "void setCompress(boolean compress)", "full_signature": "public void setCompress(boolean compress)", "class_method_signature": "PDDocumentHandler.setCompress(boolean compress)", "testcase": false, "constructor": false}, {"identifier": "getViewerPreferences", "parameters": "()", "modifiers": "public", "return": "PDViewerPreferences", "signature": "PDViewerPreferences getViewerPreferences()", "full_signature": "public PDViewerPreferences getViewerPreferences()", "class_method_signature": "PDDocumentHandler.getViewerPreferences()", "testcase": false, "constructor": false}, {"identifier": "setViewerPreferences", "parameters": "(PDViewerPreferences preferences)", "modifiers": "public", "return": "void", "signature": "void setViewerPreferences(PDViewerPreferences preferences)", "full_signature": "public void setViewerPreferences(PDViewerPreferences preferences)", "class_method_signature": "PDDocumentHandler.setViewerPreferences(PDViewerPreferences preferences)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "PDDocumentHandler.close()", "testcase": false, "constructor": false}, {"identifier": "savePDDocument", "parameters": "(File file, EncryptionAtRestPolicy encryptionAtRestSecurity)", "modifiers": "public", "return": "void", "signature": "void savePDDocument(File file, EncryptionAtRestPolicy encryptionAtRestSecurity)", "full_signature": "public void savePDDocument(File file, EncryptionAtRestPolicy encryptionAtRestSecurity)", "class_method_signature": "PDDocumentHandler.savePDDocument(File file, EncryptionAtRestPolicy encryptionAtRestSecurity)", "testcase": false, "constructor": false}, {"identifier": "savePDDocument", "parameters": "(File file, StandardSecurity security, EncryptionAtRestPolicy encryptionAtRestSecurity)", "modifiers": "public", "return": "void", "signature": "void savePDDocument(File file, StandardSecurity security, EncryptionAtRestPolicy encryptionAtRestSecurity)", "full_signature": "public void savePDDocument(File file, StandardSecurity security, EncryptionAtRestPolicy encryptionAtRestSecurity)", "class_method_signature": "PDDocumentHandler.savePDDocument(File file, StandardSecurity security, EncryptionAtRestPolicy encryptionAtRestSecurity)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfPages", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumberOfPages()", "full_signature": "public int getNumberOfPages()", "class_method_signature": "PDDocumentHandler.getNumberOfPages()", "testcase": false, "constructor": false}, {"identifier": "getUnderlyingPDDocument", "parameters": "()", "modifiers": "public", "return": "PDDocument", "signature": "PDDocument getUnderlyingPDDocument()", "full_signature": "public PDDocument getUnderlyingPDDocument()", "class_method_signature": "PDDocumentHandler.getUnderlyingPDDocument()", "testcase": false, "constructor": false}, {"identifier": "catalog", "parameters": "()", "modifiers": "public", "return": "PDDocumentCatalog", "signature": "PDDocumentCatalog catalog()", "full_signature": "public PDDocumentCatalog catalog()", "class_method_signature": "PDDocumentHandler.catalog()", "testcase": false, "constructor": false}, {"identifier": "importPage", "parameters": "(PDPage page)", "modifiers": "public", "return": "PDPage", "signature": "PDPage importPage(PDPage page)", "full_signature": "public PDPage importPage(PDPage page)", "class_method_signature": "PDDocumentHandler.importPage(PDPage page)", "testcase": false, "constructor": false}, {"identifier": "addPage", "parameters": "(PDPage page)", "modifiers": "public", "return": "PDPage", "signature": "PDPage addPage(PDPage page)", "full_signature": "public PDPage addPage(PDPage page)", "class_method_signature": "PDDocumentHandler.addPage(PDPage page)", "testcase": false, "constructor": false}, {"identifier": "removePage", "parameters": "(int pageNumber)", "modifiers": "public", "return": "void", "signature": "void removePage(int pageNumber)", "full_signature": "public void removePage(int pageNumber)", "class_method_signature": "PDDocumentHandler.removePage(int pageNumber)", "testcase": false, "constructor": false}, {"identifier": "movePageToDocumentEnd", "parameters": "(int oldPageNumber)", "modifiers": "public", "return": "void", "signature": "void movePageToDocumentEnd(int oldPageNumber)", "full_signature": "public void movePageToDocumentEnd(int oldPageNumber)", "class_method_signature": "PDDocumentHandler.movePageToDocumentEnd(int oldPageNumber)", "testcase": false, "constructor": false}, {"identifier": "getPage", "parameters": "(int pageNumber)", "modifiers": "public", "return": "PDPage", "signature": "PDPage getPage(int pageNumber)", "full_signature": "public PDPage getPage(int pageNumber)", "class_method_signature": "PDDocumentHandler.getPage(int pageNumber)", "testcase": false, "constructor": false}, {"identifier": "getPages", "parameters": "()", "modifiers": "public", "return": "PDPageTree", "signature": "PDPageTree getPages()", "full_signature": "public PDPageTree getPages()", "class_method_signature": "PDDocumentHandler.getPages()", "testcase": false, "constructor": false}, {"identifier": "initialiseBasedOn", "parameters": "(PDDocument other)", "modifiers": "public", "return": "void", "signature": "void initialiseBasedOn(PDDocument other)", "full_signature": "public void initialiseBasedOn(PDDocument other)", "class_method_signature": "PDDocumentHandler.initialiseBasedOn(PDDocument other)", "testcase": false, "constructor": false}, {"identifier": "renderImage", "parameters": "(int pageNumber, int dpi, ImageColorType type)", "modifiers": "public", "return": "BufferedImage", "signature": "BufferedImage renderImage(int pageNumber, int dpi, ImageColorType type)", "full_signature": "public BufferedImage renderImage(int pageNumber, int dpi, ImageColorType type)", "class_method_signature": "PDDocumentHandler.renderImage(int pageNumber, int dpi, ImageColorType type)", "testcase": false, "constructor": false}, {"identifier": "toSamboxImageType", "parameters": "(ImageColorType colorType)", "modifiers": "private", "return": "ImageType", "signature": "ImageType toSamboxImageType(ImageColorType colorType)", "full_signature": "private ImageType toSamboxImageType(ImageColorType colorType)", "class_method_signature": "PDDocumentHandler.toSamboxImageType(ImageColorType colorType)", "testcase": false, "constructor": false}, {"identifier": "setDocumentOutline", "parameters": "(PDDocumentOutline outline)", "modifiers": "public", "return": "void", "signature": "void setDocumentOutline(PDDocumentOutline outline)", "full_signature": "public void setDocumentOutline(PDDocumentOutline outline)", "class_method_signature": "PDDocumentHandler.setDocumentOutline(PDDocumentOutline outline)", "testcase": false, "constructor": false}, {"identifier": "setDocumentAcroForm", "parameters": "(PDAcroForm acroForm)", "modifiers": "public", "return": "void", "signature": "void setDocumentAcroForm(PDAcroForm acroForm)", "full_signature": "public void setDocumentAcroForm(PDAcroForm acroForm)", "class_method_signature": "PDDocumentHandler.setDocumentAcroForm(PDAcroForm acroForm)", "testcase": false, "constructor": false}, {"identifier": "setPageMode", "parameters": "(PageMode pageMode)", "modifiers": "private", "return": "void", "signature": "void setPageMode(PageMode pageMode)", "full_signature": "private void setPageMode(PageMode pageMode)", "class_method_signature": "PDDocumentHandler.setPageMode(PageMode pageMode)", "testcase": false, "constructor": false}, {"identifier": "setPageLayout", "parameters": "(PageLayout pageLayout)", "modifiers": "private", "return": "void", "signature": "void setPageLayout(PageLayout pageLayout)", "full_signature": "private void setPageLayout(PageLayout pageLayout)", "class_method_signature": "PDDocumentHandler.setPageLayout(PageLayout pageLayout)", "testcase": false, "constructor": false}, {"identifier": "addBlankPageIfOdd", "parameters": "(PDRectangle mediaBox)", "modifiers": "public", "return": "PDPage", "signature": "PDPage addBlankPageIfOdd(PDRectangle mediaBox)", "full_signature": "public PDPage addBlankPageIfOdd(PDRectangle mediaBox)", "class_method_signature": "PDDocumentHandler.addBlankPageIfOdd(PDRectangle mediaBox)", "testcase": false, "constructor": false}, {"identifier": "addBlankPage", "parameters": "(PDRectangle mediaBox)", "modifiers": "public", "return": "PDPage", "signature": "PDPage addBlankPage(PDRectangle mediaBox)", "full_signature": "public PDPage addBlankPage(PDRectangle mediaBox)", "class_method_signature": "PDDocumentHandler.addBlankPage(PDRectangle mediaBox)", "testcase": false, "constructor": false}, {"identifier": "addBlankPageAfter", "parameters": "(int pageNumber)", "modifiers": "public", "return": "PDPage", "signature": "PDPage addBlankPageAfter(int pageNumber)", "full_signature": "public PDPage addBlankPageAfter(int pageNumber)", "class_method_signature": "PDDocumentHandler.addBlankPageAfter(int pageNumber)", "testcase": false, "constructor": false}, {"identifier": "addBlankPageBefore", "parameters": "(int pageNumber)", "modifiers": "public", "return": "PDPage", "signature": "PDPage addBlankPageBefore(int pageNumber)", "full_signature": "public PDPage addBlankPageBefore(int pageNumber)", "class_method_signature": "PDDocumentHandler.addBlankPageBefore(int pageNumber)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/PDDocumentHandler.java"}, "focal_method": {"identifier": "addBlankPageIfOdd", "parameters": "(PDRectangle mediaBox)", "modifiers": "public", "return": "PDPage", "body": "public PDPage addBlankPageIfOdd(PDRectangle mediaBox) {\n        if (document.getNumberOfPages() % 2 != 0) {\n            return addBlankPage(mediaBox);\n        }\n        return null;\n    }", "signature": "PDPage addBlankPageIfOdd(PDRectangle mediaBox)", "full_signature": "public PDPage addBlankPageIfOdd(PDRectangle mediaBox)", "class_method_signature": "PDDocumentHandler.addBlankPageIfOdd(PDRectangle mediaBox)", "testcase": false, "constructor": false, "invocations": ["getNumberOfPages", "addBlankPage"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}