{"test_class": {"identifier": "TenderPriceByTypeYearControllerTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TenderPriceByTypeYearController tenderPriceByTypeYearController;", "modifier": "@Autowired\n    private", "type": "TenderPriceByTypeYearController", "declarator": "tenderPriceByTypeYearController", "var_name": "tenderPriceByTypeYearController"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/TenderPriceByTypeYearControllerTest.java"}, "test_case": {"identifier": "tenderPriceByProcurementMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void tenderPriceByProcurementMethod() throws Exception {\n        final List<Document> tenderPriceByProcurementMethod = tenderPriceByTypeYearController\n                .tenderPriceByProcurementMethod(new YearFilterPagingRequest());\n\n        final Document first = tenderPriceByProcurementMethod.get(0);\n        String procurementMethod = (String) first.get(TenderPriceByTypeYearController.Keys.PROCUREMENT_METHOD);\n        Number totalTenderAmount = (Number) first.get(TenderPriceByTypeYearController.Keys.TOTAL_TENDER_AMOUNT);\n        Assert.assertEquals(\"selective\", procurementMethod);\n        Assert.assertEquals(600000.0, totalTenderAmount.doubleValue(), 0);\n\n        final Document second = tenderPriceByProcurementMethod.get(1);\n        procurementMethod = (String) second.get(TenderPriceByTypeYearController.Keys.PROCUREMENT_METHOD);\n        totalTenderAmount = (Number) second.get(TenderPriceByTypeYearController.Keys.TOTAL_TENDER_AMOUNT);\n        Assert.assertEquals(\"open\", procurementMethod);\n        Assert.assertEquals(9000.0, totalTenderAmount.doubleValue(), 0);\n    }", "signature": "void tenderPriceByProcurementMethod()", "full_signature": "@Test public void tenderPriceByProcurementMethod()", "class_method_signature": "TenderPriceByTypeYearControllerTest.tenderPriceByProcurementMethod()", "testcase": true, "constructor": false, "invocations": ["tenderPriceByProcurementMethod", "get", "get", "get", "assertEquals", "assertEquals", "doubleValue", "get", "get", "get", "assertEquals", "assertEquals", "doubleValue"]}, "focal_class": {"identifier": "TenderPriceByTypeYearController", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [], "methods": [{"identifier": "tenderPriceByProcurementMethod", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Returns the tender price by OCDS type (procurementMethod), by year. \" + \"The OCDS type is read from tender.procurementMethod. The tender price is read from \" + MongoConstants.FieldNames.TENDER_VALUE_AMOUNT) @RequestMapping(value = \"/api/tenderPriceByProcurementMethod\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> tenderPriceByProcurementMethod(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Returns the tender price by OCDS type (procurementMethod), by year. \" + \"The OCDS type is read from tender.procurementMethod. The tender price is read from \" + MongoConstants.FieldNames.TENDER_VALUE_AMOUNT) @RequestMapping(value = \"/api/tenderPriceByProcurementMethod\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> tenderPriceByProcurementMethod(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TenderPriceByTypeYearController.tenderPriceByProcurementMethod(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/TenderPriceByTypeYearController.java"}, "focal_method": {"identifier": "tenderPriceByProcurementMethod", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Returns the tender price by OCDS type (procurementMethod), by year. \" + \"The OCDS type is read from tender.procurementMethod. The tender price is read from \" + MongoConstants.FieldNames.TENDER_VALUE_AMOUNT) @RequestMapping(value = \"/api/tenderPriceByProcurementMethod\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "body": "@ApiOperation(value = \"Returns the tender price by OCDS type (procurementMethod), by year. \"\n            + \"The OCDS type is read from tender.procurementMethod. The tender price is read from \"\n            + MongoConstants.FieldNames.TENDER_VALUE_AMOUNT)\n    @RequestMapping(value = \"/api/tenderPriceByProcurementMethod\", method = {RequestMethod.POST,\n            RequestMethod.GET}, produces = \"application/json\")\n    public List<Document> tenderPriceByProcurementMethod(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter) {\n\n        DBObject project = new BasicDBObject();\n        project.put(\"tender.\" + Keys.PROCUREMENT_METHOD, 1);\n        project.put(\"tender.value\", 1);\n\n        Aggregation agg = newAggregation(\n                match(where(\"awards\").elemMatch(where(\"status\").is(Award.Status.active.toString()))\n                        .and(\"tender.value\")\n                        .exists(true)\n                        .andOperator(getYearDefaultFilterCriteria(\n                                filter,\n                                MongoConstants.FieldNames.TENDER_PERIOD_START_DATE\n                        ))),\n                new CustomProjectionOperation(project), group(\"tender.\" + Keys.PROCUREMENT_METHOD)\n                        .sum(ref(MongoConstants.FieldNames.TENDER_VALUE_AMOUNT)).as(Keys.TOTAL_TENDER_AMOUNT),\n                project().and(Fields.UNDERSCORE_ID).as(Keys.PROCUREMENT_METHOD).andInclude(Keys.TOTAL_TENDER_AMOUNT)\n                        .andExclude(Fields.UNDERSCORE_ID),\n                sort(Direction.DESC, Keys.TOTAL_TENDER_AMOUNT)\n        );\n\n        return releaseAgg(agg);\n    }", "signature": "List<Document> tenderPriceByProcurementMethod(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Returns the tender price by OCDS type (procurementMethod), by year. \" + \"The OCDS type is read from tender.procurementMethod. The tender price is read from \" + MongoConstants.FieldNames.TENDER_VALUE_AMOUNT) @RequestMapping(value = \"/api/tenderPriceByProcurementMethod\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> tenderPriceByProcurementMethod(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TenderPriceByTypeYearController.tenderPriceByProcurementMethod(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false, "invocations": ["put", "put", "newAggregation", "match", "andOperator", "exists", "and", "elemMatch", "where", "is", "where", "toString", "getYearDefaultFilterCriteria", "as", "sum", "group", "ref", "andExclude", "andInclude", "as", "and", "project", "sort", "releaseAgg"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}