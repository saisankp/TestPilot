{"test_class": {"identifier": "MarkableIteratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/resultset/iterator/MarkableIteratorTest.java"}, "test_case": {"identifier": "testResetWithoutMark", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n    public void testResetWithoutMark() {\n        List<Integer> input = Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n\n        MarkableIterator<Integer> markableIterator= new MarkableIterator<Integer>(input.iterator());\n        Assert.assertEquals(MarkableIterator.State.READ, markableIterator.state);\n\n        markableIterator.reset();\n    }", "signature": "void testResetWithoutMark()", "full_signature": "@Test(expected = IllegalStateException.class) public void testResetWithoutMark()", "class_method_signature": "MarkableIteratorTest.testResetWithoutMark()", "testcase": true, "constructor": false, "invocations": ["asList", "iterator", "assertEquals", "reset"]}, "focal_class": {"identifier": "MarkableIterator", "superclass": "", "interfaces": "implements Iterator<T>", "fields": [{"original_string": "final Iterator<T> emptyIterator = Collections.<T>emptyList().iterator();", "modifier": "final", "type": "Iterator<T>", "declarator": "emptyIterator = Collections.<T>emptyList().iterator()", "var_name": "emptyIterator"}, {"original_string": "final Iterator<T> backingIterator;", "modifier": "final", "type": "Iterator<T>", "declarator": "backingIterator", "var_name": "backingIterator"}, {"original_string": "State state = State.READ;", "modifier": "", "type": "State", "declarator": "state = State.READ", "var_name": "state"}, {"original_string": "List<T> replayBuffer = Collections.emptyList();", "modifier": "", "type": "List<T>", "declarator": "replayBuffer = Collections.emptyList()", "var_name": "replayBuffer"}, {"original_string": "Iterator<T> replayIterator = emptyIterator;", "modifier": "", "type": "Iterator<T>", "declarator": "replayIterator = emptyIterator", "var_name": "replayIterator"}, {"original_string": "int readLimit = 0;", "modifier": "", "type": "int", "declarator": "readLimit = 0", "var_name": "readLimit"}], "methods": [{"identifier": "MarkableIterator", "parameters": "(Iterator<T> backingIterator)", "modifiers": "public", "return": "", "signature": " MarkableIterator(Iterator<T> backingIterator)", "full_signature": "public  MarkableIterator(Iterator<T> backingIterator)", "class_method_signature": "MarkableIterator.MarkableIterator(Iterator<T> backingIterator)", "testcase": false, "constructor": true}, {"identifier": "hasNext", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "@Override public boolean hasNext()", "class_method_signature": "MarkableIterator.hasNext()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T next()", "full_signature": "@Override public T next()", "class_method_signature": "MarkableIterator.next()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void remove()", "full_signature": "@Override public void remove()", "class_method_signature": "MarkableIterator.remove()", "testcase": false, "constructor": false}, {"identifier": "mark", "parameters": "(int readLimit)", "modifiers": "public", "return": "void", "signature": "void mark(int readLimit)", "full_signature": "public void mark(int readLimit)", "class_method_signature": "MarkableIterator.mark(int readLimit)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "MarkableIterator.reset()", "testcase": false, "constructor": false}, {"identifier": "populateFromIterator", "parameters": "(List<T> collection, Iterator<T> iterator)", "modifiers": "", "return": "List<T>", "signature": "List<T> populateFromIterator(List<T> collection, Iterator<T> iterator)", "full_signature": " List<T> populateFromIterator(List<T> collection, Iterator<T> iterator)", "class_method_signature": "MarkableIterator.populateFromIterator(List<T> collection, Iterator<T> iterator)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/resultset/iterator/MarkableIterator.java"}, "focal_method": {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void reset() {\n        if (state == State.READ) {\n            throw new IllegalStateException(\"Iterator has not been marked or the mark has been invalidated\");\n        }\n        replayIterator = replayBuffer.iterator();\n        state = State.REPLAY;\n    }", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "MarkableIterator.reset()", "testcase": false, "constructor": false, "invocations": ["iterator"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}