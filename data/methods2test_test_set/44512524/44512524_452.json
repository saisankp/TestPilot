{"test_class": {"identifier": "CountingBloomFilterBasedWindowTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CountingBloomFilterBasedWindow window;", "modifier": "private", "type": "CountingBloomFilterBasedWindow", "declarator": "window", "var_name": "window"}, {"original_string": "private int count;", "modifier": "private", "type": "int", "declarator": "count", "var_name": "count"}, {"original_string": "int windowSize;", "modifier": "", "type": "int", "declarator": "windowSize", "var_name": "windowSize"}], "file": "bigdata-intro/cep-intro/siddhi3-quick-start/src/main/java/org/wso2/siddhi/bloomfilter/CountingBloomFilterBasedWindowTest.java"}, "test_case": {"identifier": "testGetLast", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetLast() {\n\n        StreamEvent event = createStreamEvent(\"Dell\", 245.95, 78);\n        addStreamEvent(event);\n\n        addStreamEvent(createStreamEvent(\"Hp\", 210.45, 23));\n        addStreamEvent(createStreamEvent(\"Apple\", 3500.50, 10));\n\n        Assert.assertEquals(event, (StreamEvent) window.getLast(false));\n        Assert.assertEquals(event, (StreamEvent) window.getLast(true));\n        Assert.assertNotSame(event, (StreamEvent) window.getLast(false));\n\n    }", "signature": "void testGetLast()", "full_signature": "@Test public void testGetLast()", "class_method_signature": "CountingBloomFilterBasedWindowTest.testGetLast()", "testcase": true, "constructor": false, "invocations": ["createStreamEvent", "addStreamEvent", "addStreamEvent", "createStreamEvent", "addStreamEvent", "createStreamEvent", "assertEquals", "getLast", "assertEquals", "getLast", "assertNotSame", "getLast"]}, "focal_class": {"identifier": "CountingBloomFilterBasedWindow", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int expectedNoOfEventsPerWindow;", "modifier": "private", "type": "int", "declarator": "expectedNoOfEventsPerWindow", "var_name": "expectedNoOfEventsPerWindow"}, {"original_string": "private int[] joinAttributeId;", "modifier": "private", "type": "int[]", "declarator": "joinAttributeId", "var_name": "joinAttributeId"}, {"original_string": "private CountingBloomFilter filter;", "modifier": "private", "type": "CountingBloomFilter", "declarator": "filter", "var_name": "filter"}, {"original_string": "private int bloomFilterSize;", "modifier": "private", "type": "int", "declarator": "bloomFilterSize", "var_name": "bloomFilterSize"}, {"original_string": "private BlockingQueue<StreamEvent> eventQueue;", "modifier": "private", "type": "BlockingQueue<StreamEvent>", "declarator": "eventQueue", "var_name": "eventQueue"}], "methods": [{"identifier": "init", "parameters": "(Expression[] expressions)", "modifiers": "public", "return": "void", "signature": "void init(Expression[] expressions)", "full_signature": "public void init(Expression[] expressions)", "class_method_signature": "CountingBloomFilterBasedWindow.init(Expression[] expressions)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(ComplexEvent event)", "modifiers": "public", "return": "void", "signature": "void add(ComplexEvent event)", "full_signature": "public void add(ComplexEvent event)", "class_method_signature": "CountingBloomFilterBasedWindow.add(ComplexEvent event)", "testcase": false, "constructor": false}, {"identifier": "getLast", "parameters": "(Boolean remove)", "modifiers": "public", "return": "ComplexEvent", "signature": "ComplexEvent getLast(Boolean remove)", "full_signature": "public ComplexEvent getLast(Boolean remove)", "class_method_signature": "CountingBloomFilterBasedWindow.getLast(Boolean remove)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(String attributeName, Object value)", "modifiers": "public", "return": "List<ComplexEvent>", "signature": "List<ComplexEvent> find(String attributeName, Object value)", "full_signature": "public List<ComplexEvent> find(String attributeName, Object value)", "class_method_signature": "CountingBloomFilterBasedWindow.find(String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(ComplexEvent event)", "modifiers": "public", "return": "void", "signature": "void remove(ComplexEvent event)", "full_signature": "public void remove(ComplexEvent event)", "class_method_signature": "CountingBloomFilterBasedWindow.remove(ComplexEvent event)", "testcase": false, "constructor": false}, {"identifier": "currentState", "parameters": "()", "modifiers": "public", "return": "Object[]", "signature": "Object[] currentState()", "full_signature": "public Object[] currentState()", "class_method_signature": "CountingBloomFilterBasedWindow.currentState()", "testcase": false, "constructor": false}, {"identifier": "restoreState", "parameters": "(Object[] objects)", "modifiers": "public", "return": "void", "signature": "void restoreState(Object[] objects)", "full_signature": "public void restoreState(Object[] objects)", "class_method_signature": "CountingBloomFilterBasedWindow.restoreState(Object[] objects)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "CountingBloomFilterBasedWindow.size()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "CountingBloomFilterBasedWindow.destroy()", "testcase": false, "constructor": false}, {"identifier": "addStreamEvent", "parameters": "(StreamEvent streamEvent)", "modifiers": "private", "return": "void", "signature": "void addStreamEvent(StreamEvent streamEvent)", "full_signature": "private void addStreamEvent(StreamEvent streamEvent)", "class_method_signature": "CountingBloomFilterBasedWindow.addStreamEvent(StreamEvent streamEvent)", "testcase": false, "constructor": false}], "file": "bigdata-intro/cep-intro/siddhi3-quick-start/src/main/java/org/wso2/siddhi/bloomfilter/CountingBloomFilterBasedWindow.java"}, "focal_method": {"identifier": "getLast", "parameters": "(Boolean remove)", "modifiers": "public", "return": "ComplexEvent", "body": "public ComplexEvent getLast(Boolean remove) {\n        if (remove) {\n            StreamEvent streamEvent = eventQueue.poll();\n            filter.delete(new Key((byte[]) streamEvent.getAttribute(joinAttributeId).toString()\n                    .getBytes()));\n            return streamEvent;\n        } else {\n            return eventQueue.peek();\n        }\n    }", "signature": "ComplexEvent getLast(Boolean remove)", "full_signature": "public ComplexEvent getLast(Boolean remove)", "class_method_signature": "CountingBloomFilterBasedWindow.getLast(Boolean remove)", "testcase": false, "constructor": false, "invocations": ["poll", "delete", "getBytes", "toString", "getAttribute", "peek"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}