{"test_class": {"identifier": "PatchInstallerUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "android/testSrc/com/android/tools/idea/sdk/install/patch/PatchInstallerUtilTest.java"}, "test_case": {"identifier": "noLatestPatcher", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void noLatestPatcher() throws Exception {\n    List<LocalPackage> local = ImmutableList.of(new FakeLocalPackage(\"foo\"));\n    RepositoryPackages packages = new RepositoryPackages(local, ImmutableList.of());\n    FakeRepoManager mgr = new FakeRepoManager(new File(\"/sdk\"), packages);\n    LocalPackage patcher = PatchInstallerUtil.getLatestPatcher(mgr);\n    assertNull(patcher);\n  }", "signature": "void noLatestPatcher()", "full_signature": "@Test public void noLatestPatcher()", "class_method_signature": "PatchInstallerUtilTest.noLatestPatcher()", "testcase": true, "constructor": false, "invocations": ["of", "of", "getLatestPatcher", "assertNull"]}, "focal_class": {"identifier": "PatchInstallerUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PATCHER_PATH_PREFIX = \"patcher\";", "modifier": "public static final", "type": "String", "declarator": "PATCHER_PATH_PREFIX = \"patcher\"", "var_name": "PATCHER_PATH_PREFIX"}, {"original_string": "static final String PATCHES_DIR_NAME = \".patches\";", "modifier": "static final", "type": "String", "declarator": "PATCHES_DIR_NAME = \".patches\"", "var_name": "PATCHES_DIR_NAME"}, {"original_string": "static final String PATCH_JAR_FN = \"patch.jar\";", "modifier": "static final", "type": "String", "declarator": "PATCH_JAR_FN = \"patch.jar\"", "var_name": "PATCH_JAR_FN"}, {"original_string": "static final String PATCH_DIR_PREFIX = PatchInstallerFactory.class.getSimpleName();", "modifier": "static final", "type": "String", "declarator": "PATCH_DIR_PREFIX = PatchInstallerFactory.class.getSimpleName()", "var_name": "PATCH_DIR_PREFIX"}, {"original_string": "private static final String PATCH_ZIP_FN = \"patch-file.zip\";", "modifier": "private static final", "type": "String", "declarator": "PATCH_ZIP_FN = \"patch-file.zip\"", "var_name": "PATCH_ZIP_FN"}], "methods": [{"identifier": "getDependantPatcher", "parameters": "(@NotNull RemotePackage remote, @NotNull RepoManager mgr)", "modifiers": "@Nullable static", "return": "LocalPackage", "signature": "LocalPackage getDependantPatcher(@NotNull RemotePackage remote, @NotNull RepoManager mgr)", "full_signature": "@Nullable static LocalPackage getDependantPatcher(@NotNull RemotePackage remote, @NotNull RepoManager mgr)", "class_method_signature": "PatchInstallerUtil.getDependantPatcher(@NotNull RemotePackage remote, @NotNull RepoManager mgr)", "testcase": false, "constructor": false}, {"identifier": "getLatestPatcher", "parameters": "(@NotNull RepoManager mgr)", "modifiers": "@Nullable static", "return": "LocalPackage", "signature": "LocalPackage getLatestPatcher(@NotNull RepoManager mgr)", "full_signature": "@Nullable static LocalPackage getLatestPatcher(@NotNull RepoManager mgr)", "class_method_signature": "PatchInstallerUtil.getLatestPatcher(@NotNull RepoManager mgr)", "testcase": false, "constructor": false}, {"identifier": "comparePatcherPaths", "parameters": "(@NotNull String path1, @NotNull String path2)", "modifiers": "static", "return": "int", "signature": "int comparePatcherPaths(@NotNull String path1, @NotNull String path2)", "full_signature": "static int comparePatcherPaths(@NotNull String path1, @NotNull String path2)", "class_method_signature": "PatchInstallerUtil.comparePatcherPaths(@NotNull String path1, @NotNull String path2)", "testcase": false, "constructor": false}, {"identifier": "installPatch", "parameters": "(@NotNull PatchOperation op,\n                              @Nullable File patch,\n                              @NotNull FileOp fop,\n                              @NotNull ProgressIndicator progress)", "modifiers": "static", "return": "boolean", "signature": "boolean installPatch(@NotNull PatchOperation op,\n                              @Nullable File patch,\n                              @NotNull FileOp fop,\n                              @NotNull ProgressIndicator progress)", "full_signature": "static boolean installPatch(@NotNull PatchOperation op,\n                              @Nullable File patch,\n                              @NotNull FileOp fop,\n                              @NotNull ProgressIndicator progress)", "class_method_signature": "PatchInstallerUtil.installPatch(@NotNull PatchOperation op,\n                              @Nullable File patch,\n                              @NotNull FileOp fop,\n                              @NotNull ProgressIndicator progress)", "testcase": false, "constructor": false}, {"identifier": "askAboutRestart", "parameters": "(@NotNull PatchRunner patchRunner,\n                                      @NotNull PatchOperation op,\n                                      @NotNull final File patchFile,\n                                      @NotNull FileOp fop,\n                                      @NotNull final ProgressIndicator progress)", "modifiers": "private static", "return": "void", "signature": "void askAboutRestart(@NotNull PatchRunner patchRunner,\n                                      @NotNull PatchOperation op,\n                                      @NotNull final File patchFile,\n                                      @NotNull FileOp fop,\n                                      @NotNull final ProgressIndicator progress)", "full_signature": "private static void askAboutRestart(@NotNull PatchRunner patchRunner,\n                                      @NotNull PatchOperation op,\n                                      @NotNull final File patchFile,\n                                      @NotNull FileOp fop,\n                                      @NotNull final ProgressIndicator progress)", "class_method_signature": "PatchInstallerUtil.askAboutRestart(@NotNull PatchRunner patchRunner,\n                                      @NotNull PatchOperation op,\n                                      @NotNull final File patchFile,\n                                      @NotNull FileOp fop,\n                                      @NotNull final ProgressIndicator progress)", "testcase": false, "constructor": false}, {"identifier": "setupPatchDir", "parameters": "(@NotNull File patchFile, @NotNull File patcherFile, @NotNull RepoPackage toInstallOrDelete,\n                                       @NotNull RepoManager mgr, @NotNull FileOp fop, @NotNull ProgressIndicator progress)", "modifiers": "private static", "return": "boolean", "signature": "boolean setupPatchDir(@NotNull File patchFile, @NotNull File patcherFile, @NotNull RepoPackage toInstallOrDelete,\n                                       @NotNull RepoManager mgr, @NotNull FileOp fop, @NotNull ProgressIndicator progress)", "full_signature": "private static boolean setupPatchDir(@NotNull File patchFile, @NotNull File patcherFile, @NotNull RepoPackage toInstallOrDelete,\n                                       @NotNull RepoManager mgr, @NotNull FileOp fop, @NotNull ProgressIndicator progress)", "class_method_signature": "PatchInstallerUtil.setupPatchDir(@NotNull File patchFile, @NotNull File patcherFile, @NotNull RepoPackage toInstallOrDelete,\n                                       @NotNull RepoManager mgr, @NotNull FileOp fop, @NotNull ProgressIndicator progress)", "testcase": false, "constructor": false}, {"identifier": "generatePatch", "parameters": "(PatchOperation patchOp, File destDir, FileOp fop, ProgressIndicator progress)", "modifiers": "public static", "return": "File", "signature": "File generatePatch(PatchOperation patchOp, File destDir, FileOp fop, ProgressIndicator progress)", "full_signature": "public static File generatePatch(PatchOperation patchOp, File destDir, FileOp fop, ProgressIndicator progress)", "class_method_signature": "PatchInstallerUtil.generatePatch(PatchOperation patchOp, File destDir, FileOp fop, ProgressIndicator progress)", "testcase": false, "constructor": false}, {"identifier": "getInProgressDependantPatcherInstall", "parameters": "(@NotNull RemotePackage remote, @NotNull RepoManager mgr)", "modifiers": "@Nullable public static", "return": "PackageOperation", "signature": "PackageOperation getInProgressDependantPatcherInstall(@NotNull RemotePackage remote, @NotNull RepoManager mgr)", "full_signature": "@Nullable public static PackageOperation getInProgressDependantPatcherInstall(@NotNull RemotePackage remote, @NotNull RepoManager mgr)", "class_method_signature": "PatchInstallerUtil.getInProgressDependantPatcherInstall(@NotNull RemotePackage remote, @NotNull RepoManager mgr)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/sdk/install/patch/PatchInstallerUtil.java"}, "focal_method": {"identifier": "getLatestPatcher", "parameters": "(@NotNull RepoManager mgr)", "modifiers": "@Nullable static", "return": "LocalPackage", "body": "@Nullable\n  static LocalPackage getLatestPatcher(@NotNull RepoManager mgr) {\n    LocalPackage patcher = null;\n    for (LocalPackage p : mgr.getPackages().getLocalPackagesForPrefix(PATCHER_PATH_PREFIX)) {\n      if (patcher == null || comparePatcherPaths(p.getPath(), patcher.getPath()) > 0) {\n        patcher = p;\n      }\n    }\n    return patcher;\n  }", "signature": "LocalPackage getLatestPatcher(@NotNull RepoManager mgr)", "full_signature": "@Nullable static LocalPackage getLatestPatcher(@NotNull RepoManager mgr)", "class_method_signature": "PatchInstallerUtil.getLatestPatcher(@NotNull RepoManager mgr)", "testcase": false, "constructor": false, "invocations": ["getLocalPackagesForPrefix", "getPackages", "comparePatcherPaths", "getPath", "getPath"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}