{"test_class": {"identifier": "JsonLayoutTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LoggerContext context = new LoggerContext();", "modifier": "private", "type": "LoggerContext", "declarator": "context = new LoggerContext()", "var_name": "context"}], "file": "json/classic/src/test/java/ch/qos/logback/contrib/json/classic/JsonLayoutTest.java"}, "test_case": {"identifier": "jsonLayout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void jsonLayout() throws Exception {\n        configure(\"src/test/input/json/jsonLayout.xml\");\n        String loggerName = \"ROOT\";\n        String message = \"Info message\";\n        String debugMessage = \"Debug message\";\n        Logger logger = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\n        logger.info(\"Test\");\n        ILoggingEvent event = new LoggingEvent(\"my.class.name\", logger, Level.INFO, message, null, null);\n\n        JsonLayout jsonLayout = new JsonLayout();\n        jsonLayout.setContext(context);\n        String log = jsonLayout.doLayout(event);\n\n        assertTimestamp(log);\n        assertThat(log, containsString(String.format(\"%s=%s\", JsonLayout.LEVEL_ATTR_NAME, Level.INFO)));\n        assertThat(log, containsString(String.format(\"%s=%s\", JsonLayout.THREAD_ATTR_NAME, \"main\")));\n        assertThat(log, containsString(String.format(\"%s=%s\", JsonLayout.LOGGER_ATTR_NAME, loggerName)));\n        assertThat(log, containsString(String.format(\"%s=%s\", JsonLayout.FORMATTED_MESSAGE_ATTR_NAME, message)));\n\n        jsonLayout.setIncludeContextName(true);\n        jsonLayout.setIncludeMDC(true);\n        jsonLayout.setIncludeLoggerName(true);\n        jsonLayout.setIncludeException(true);\n        jsonLayout.setIncludeMessage(true);\n\n        RuntimeException exception = new RuntimeException(\"Exception\");\n        ILoggingEvent eventWithException = new LoggingEvent(\"my.class.name\", logger, Level.DEBUG, debugMessage, exception, null);\n        String logWithException = jsonLayout.doLayout(eventWithException);\n\n        assertTimestamp(logWithException);\n        assertThat(logWithException, containsString(String.format(\"%s=%s\", JsonLayout.LEVEL_ATTR_NAME, Level.DEBUG)));\n        assertThat(logWithException, containsString(String.format(\"%s=%s\", JsonLayout.LOGGER_ATTR_NAME, loggerName)));\n        assertThat(logWithException, containsString(String.format(\"%s=%s\", JsonLayout.FORMATTED_MESSAGE_ATTR_NAME, debugMessage)));\n        assertThat(logWithException, containsString(String.format(\"%s=%s\", JsonLayout.MESSAGE_ATTR_NAME, debugMessage)));\n        assertThat(logWithException, containsString(String.format(\"%s=%s\", JsonLayout.EXCEPTION_ATTR_NAME, exception.toString())));\n    }", "signature": "void jsonLayout()", "full_signature": "@Test public void jsonLayout()", "class_method_signature": "JsonLayoutTest.jsonLayout()", "testcase": true, "constructor": false, "invocations": ["configure", "getLogger", "info", "setContext", "doLayout", "assertTimestamp", "assertThat", "containsString", "format", "assertThat", "containsString", "format", "assertThat", "containsString", "format", "assertThat", "containsString", "format", "setIncludeContextName", "setIncludeMDC", "setIncludeLoggerName", "setIncludeException", "setIncludeMessage", "doLayout", "assertTimestamp", "assertThat", "containsString", "format", "assertThat", "containsString", "format", "assertThat", "containsString", "format", "assertThat", "containsString", "format", "assertThat", "containsString", "format", "toString"]}, "focal_class": {"identifier": "JsonLayout", "superclass": "extends JsonLayoutBase<ILoggingEvent>", "interfaces": "", "fields": [{"original_string": "public static final String TIMESTAMP_ATTR_NAME = \"timestamp\";", "modifier": "public static final", "type": "String", "declarator": "TIMESTAMP_ATTR_NAME = \"timestamp\"", "var_name": "TIMESTAMP_ATTR_NAME"}, {"original_string": "public static final String LEVEL_ATTR_NAME = \"level\";", "modifier": "public static final", "type": "String", "declarator": "LEVEL_ATTR_NAME = \"level\"", "var_name": "LEVEL_ATTR_NAME"}, {"original_string": "public static final String THREAD_ATTR_NAME = \"thread\";", "modifier": "public static final", "type": "String", "declarator": "THREAD_ATTR_NAME = \"thread\"", "var_name": "THREAD_ATTR_NAME"}, {"original_string": "public static final String MDC_ATTR_NAME = \"mdc\";", "modifier": "public static final", "type": "String", "declarator": "MDC_ATTR_NAME = \"mdc\"", "var_name": "MDC_ATTR_NAME"}, {"original_string": "public static final String LOGGER_ATTR_NAME = \"logger\";", "modifier": "public static final", "type": "String", "declarator": "LOGGER_ATTR_NAME = \"logger\"", "var_name": "LOGGER_ATTR_NAME"}, {"original_string": "public static final String FORMATTED_MESSAGE_ATTR_NAME = \"message\";", "modifier": "public static final", "type": "String", "declarator": "FORMATTED_MESSAGE_ATTR_NAME = \"message\"", "var_name": "FORMATTED_MESSAGE_ATTR_NAME"}, {"original_string": "public static final String MESSAGE_ATTR_NAME = \"raw-message\";", "modifier": "public static final", "type": "String", "declarator": "MESSAGE_ATTR_NAME = \"raw-message\"", "var_name": "MESSAGE_ATTR_NAME"}, {"original_string": "public static final String EXCEPTION_ATTR_NAME = \"exception\";", "modifier": "public static final", "type": "String", "declarator": "EXCEPTION_ATTR_NAME = \"exception\"", "var_name": "EXCEPTION_ATTR_NAME"}, {"original_string": "public static final String CONTEXT_ATTR_NAME = \"context\";", "modifier": "public static final", "type": "String", "declarator": "CONTEXT_ATTR_NAME = \"context\"", "var_name": "CONTEXT_ATTR_NAME"}, {"original_string": "protected boolean includeLevel;", "modifier": "protected", "type": "boolean", "declarator": "includeLevel", "var_name": "includeLevel"}, {"original_string": "protected boolean includeThreadName;", "modifier": "protected", "type": "boolean", "declarator": "includeThreadName", "var_name": "includeThreadName"}, {"original_string": "protected boolean includeMDC;", "modifier": "protected", "type": "boolean", "declarator": "includeMDC", "var_name": "includeMDC"}, {"original_string": "protected boolean includeLoggerName;", "modifier": "protected", "type": "boolean", "declarator": "includeLoggerName", "var_name": "includeLoggerName"}, {"original_string": "protected boolean includeFormattedMessage;", "modifier": "protected", "type": "boolean", "declarator": "includeFormattedMessage", "var_name": "includeFormattedMessage"}, {"original_string": "protected boolean includeMessage;", "modifier": "protected", "type": "boolean", "declarator": "includeMessage", "var_name": "includeMessage"}, {"original_string": "protected boolean includeException;", "modifier": "protected", "type": "boolean", "declarator": "includeException", "var_name": "includeException"}, {"original_string": "protected boolean includeContextName;", "modifier": "protected", "type": "boolean", "declarator": "includeContextName", "var_name": "includeContextName"}, {"original_string": "private ThrowableHandlingConverter throwableProxyConverter;", "modifier": "private", "type": "ThrowableHandlingConverter", "declarator": "throwableProxyConverter", "var_name": "throwableProxyConverter"}], "methods": [{"identifier": "JsonLayout", "parameters": "()", "modifiers": "public", "return": "", "signature": " JsonLayout()", "full_signature": "public  JsonLayout()", "class_method_signature": "JsonLayout.JsonLayout()", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "JsonLayout.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "JsonLayout.stop()", "testcase": false, "constructor": false}, {"identifier": "toJsonMap", "parameters": "(ILoggingEvent event)", "modifiers": "@Override protected", "return": "Map", "signature": "Map toJsonMap(ILoggingEvent event)", "full_signature": "@Override protected Map toJsonMap(ILoggingEvent event)", "class_method_signature": "JsonLayout.toJsonMap(ILoggingEvent event)", "testcase": false, "constructor": false}, {"identifier": "addThrowableInfo", "parameters": "(String fieldName, boolean field, ILoggingEvent value, Map<String, Object> map)", "modifiers": "protected", "return": "void", "signature": "void addThrowableInfo(String fieldName, boolean field, ILoggingEvent value, Map<String, Object> map)", "full_signature": "protected void addThrowableInfo(String fieldName, boolean field, ILoggingEvent value, Map<String, Object> map)", "class_method_signature": "JsonLayout.addThrowableInfo(String fieldName, boolean field, ILoggingEvent value, Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "addCustomDataToJsonMap", "parameters": "(Map<String, Object> map, ILoggingEvent event)", "modifiers": "protected", "return": "void", "signature": "void addCustomDataToJsonMap(Map<String, Object> map, ILoggingEvent event)", "full_signature": "protected void addCustomDataToJsonMap(Map<String, Object> map, ILoggingEvent event)", "class_method_signature": "JsonLayout.addCustomDataToJsonMap(Map<String, Object> map, ILoggingEvent event)", "testcase": false, "constructor": false}, {"identifier": "isIncludeLevel", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIncludeLevel()", "full_signature": "public boolean isIncludeLevel()", "class_method_signature": "JsonLayout.isIncludeLevel()", "testcase": false, "constructor": false}, {"identifier": "setIncludeLevel", "parameters": "(boolean includeLevel)", "modifiers": "public", "return": "void", "signature": "void setIncludeLevel(boolean includeLevel)", "full_signature": "public void setIncludeLevel(boolean includeLevel)", "class_method_signature": "JsonLayout.setIncludeLevel(boolean includeLevel)", "testcase": false, "constructor": false}, {"identifier": "isIncludeLoggerName", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIncludeLoggerName()", "full_signature": "public boolean isIncludeLoggerName()", "class_method_signature": "JsonLayout.isIncludeLoggerName()", "testcase": false, "constructor": false}, {"identifier": "setIncludeLoggerName", "parameters": "(boolean includeLoggerName)", "modifiers": "public", "return": "void", "signature": "void setIncludeLoggerName(boolean includeLoggerName)", "full_signature": "public void setIncludeLoggerName(boolean includeLoggerName)", "class_method_signature": "JsonLayout.setIncludeLoggerName(boolean includeLoggerName)", "testcase": false, "constructor": false}, {"identifier": "isIncludeFormattedMessage", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIncludeFormattedMessage()", "full_signature": "public boolean isIncludeFormattedMessage()", "class_method_signature": "JsonLayout.isIncludeFormattedMessage()", "testcase": false, "constructor": false}, {"identifier": "setIncludeFormattedMessage", "parameters": "(boolean includeFormattedMessage)", "modifiers": "public", "return": "void", "signature": "void setIncludeFormattedMessage(boolean includeFormattedMessage)", "full_signature": "public void setIncludeFormattedMessage(boolean includeFormattedMessage)", "class_method_signature": "JsonLayout.setIncludeFormattedMessage(boolean includeFormattedMessage)", "testcase": false, "constructor": false}, {"identifier": "isIncludeMessage", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIncludeMessage()", "full_signature": "public boolean isIncludeMessage()", "class_method_signature": "JsonLayout.isIncludeMessage()", "testcase": false, "constructor": false}, {"identifier": "setIncludeMessage", "parameters": "(boolean includeMessage)", "modifiers": "public", "return": "void", "signature": "void setIncludeMessage(boolean includeMessage)", "full_signature": "public void setIncludeMessage(boolean includeMessage)", "class_method_signature": "JsonLayout.setIncludeMessage(boolean includeMessage)", "testcase": false, "constructor": false}, {"identifier": "isIncludeMDC", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIncludeMDC()", "full_signature": "public boolean isIncludeMDC()", "class_method_signature": "JsonLayout.isIncludeMDC()", "testcase": false, "constructor": false}, {"identifier": "setIncludeMDC", "parameters": "(boolean includeMDC)", "modifiers": "public", "return": "void", "signature": "void setIncludeMDC(boolean includeMDC)", "full_signature": "public void setIncludeMDC(boolean includeMDC)", "class_method_signature": "JsonLayout.setIncludeMDC(boolean includeMDC)", "testcase": false, "constructor": false}, {"identifier": "isIncludeThreadName", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIncludeThreadName()", "full_signature": "public boolean isIncludeThreadName()", "class_method_signature": "JsonLayout.isIncludeThreadName()", "testcase": false, "constructor": false}, {"identifier": "setIncludeThreadName", "parameters": "(boolean includeThreadName)", "modifiers": "public", "return": "void", "signature": "void setIncludeThreadName(boolean includeThreadName)", "full_signature": "public void setIncludeThreadName(boolean includeThreadName)", "class_method_signature": "JsonLayout.setIncludeThreadName(boolean includeThreadName)", "testcase": false, "constructor": false}, {"identifier": "isIncludeException", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIncludeException()", "full_signature": "public boolean isIncludeException()", "class_method_signature": "JsonLayout.isIncludeException()", "testcase": false, "constructor": false}, {"identifier": "setIncludeException", "parameters": "(boolean includeException)", "modifiers": "public", "return": "void", "signature": "void setIncludeException(boolean includeException)", "full_signature": "public void setIncludeException(boolean includeException)", "class_method_signature": "JsonLayout.setIncludeException(boolean includeException)", "testcase": false, "constructor": false}, {"identifier": "isIncludeContextName", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIncludeContextName()", "full_signature": "public boolean isIncludeContextName()", "class_method_signature": "JsonLayout.isIncludeContextName()", "testcase": false, "constructor": false}, {"identifier": "setIncludeContextName", "parameters": "(boolean includeContextName)", "modifiers": "public", "return": "void", "signature": "void setIncludeContextName(boolean includeContextName)", "full_signature": "public void setIncludeContextName(boolean includeContextName)", "class_method_signature": "JsonLayout.setIncludeContextName(boolean includeContextName)", "testcase": false, "constructor": false}, {"identifier": "getThrowableProxyConverter", "parameters": "()", "modifiers": "public", "return": "ThrowableHandlingConverter", "signature": "ThrowableHandlingConverter getThrowableProxyConverter()", "full_signature": "public ThrowableHandlingConverter getThrowableProxyConverter()", "class_method_signature": "JsonLayout.getThrowableProxyConverter()", "testcase": false, "constructor": false}, {"identifier": "setThrowableProxyConverter", "parameters": "(ThrowableHandlingConverter throwableProxyConverter)", "modifiers": "public", "return": "void", "signature": "void setThrowableProxyConverter(ThrowableHandlingConverter throwableProxyConverter)", "full_signature": "public void setThrowableProxyConverter(ThrowableHandlingConverter throwableProxyConverter)", "class_method_signature": "JsonLayout.setThrowableProxyConverter(ThrowableHandlingConverter throwableProxyConverter)", "testcase": false, "constructor": false}], "file": "json/classic/src/main/java/ch/qos/logback/contrib/json/classic/JsonLayout.java"}, "focal_method": {"identifier": "JsonLayout", "parameters": "()", "modifiers": "public", "return": "", "body": "public JsonLayout() {\n        super();\n        this.includeLevel = true;\n        this.includeThreadName = true;\n        this.includeMDC = true;\n        this.includeLoggerName = true;\n        this.includeFormattedMessage = true;\n        this.includeException = true;\n        this.includeContextName = true;\n        this.throwableProxyConverter = new ThrowableProxyConverter();\n    }", "signature": " JsonLayout()", "full_signature": "public  JsonLayout()", "class_method_signature": "JsonLayout.JsonLayout()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 7184464, "url": "https://github.com/qos-ch/logback-contrib", "language": "Java", "is_fork": false, "fork_count": 39, "stargazer_count": 32, "size": 301, "license": "licensed"}}