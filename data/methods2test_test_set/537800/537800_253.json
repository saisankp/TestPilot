{"test_class": {"identifier": "ChunkedAssociativeLongArrayTest", "superclass": "", "interfaces": "", "fields": [], "file": "metrics-core/src/test/java/com/codahale/metrics/ChunkedAssociativeLongArrayTest.java"}, "test_case": {"identifier": "testTrim", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTrim() {\n        ChunkedAssociativeLongArray array = new ChunkedAssociativeLongArray(3);\n        array.put(-3, 3);\n        array.put(-2, 1);\n        array.put(0, 5);\n        array.put(3, 0);\n        array.put(9, 8);\n        array.put(15, 0);\n        array.put(19, 5);\n        array.put(21, 5);\n        array.put(34, -9);\n        array.put(109, 5);\n\n        then(array.out())\n                .isEqualTo(\"[(-3: 3) (-2: 1) (0: 5) ]->[(3: 0) (9: 8) (15: 0) ]->[(19: 5) (21: 5) (34: -9) ]->[(109: 5) ]\");\n        then(array.values())\n                .isEqualTo(new long[]{3, 1, 5, 0, 8, 0, 5, 5, -9, 5});\n        then(array.size())\n                .isEqualTo(10);\n\n        array.trim(-2, 20);\n\n        then(array.out())\n                .isEqualTo(\"[(-2: 1) (0: 5) ]->[(3: 0) (9: 8) (15: 0) ]->[(19: 5) ]\");\n        then(array.values())\n                .isEqualTo(new long[]{1, 5, 0, 8, 0, 5});\n        then(array.size())\n                .isEqualTo(6);\n\n    }", "signature": "void testTrim()", "full_signature": "@Test public void testTrim()", "class_method_signature": "ChunkedAssociativeLongArrayTest.testTrim()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "isEqualTo", "then", "out", "isEqualTo", "then", "values", "isEqualTo", "then", "size", "trim", "isEqualTo", "then", "out", "isEqualTo", "then", "values", "isEqualTo", "then", "size"]}, "focal_class": {"identifier": "ChunkedAssociativeLongArray", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long[] EMPTY = new long[0];", "modifier": "private static final", "type": "long[]", "declarator": "EMPTY = new long[0]", "var_name": "EMPTY"}, {"original_string": "private static final int DEFAULT_CHUNK_SIZE = 512;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_CHUNK_SIZE = 512", "var_name": "DEFAULT_CHUNK_SIZE"}, {"original_string": "private static final int MAX_CACHE_SIZE = 128;", "modifier": "private static final", "type": "int", "declarator": "MAX_CACHE_SIZE = 128", "var_name": "MAX_CACHE_SIZE"}, {"original_string": "private final int defaultChunkSize;", "modifier": "private final", "type": "int", "declarator": "defaultChunkSize", "var_name": "defaultChunkSize"}, {"original_string": "private final ArrayDeque<SoftReference<Chunk>> chunksCache = new ArrayDeque<>();", "modifier": "private final", "type": "ArrayDeque<SoftReference<Chunk>>", "declarator": "chunksCache = new ArrayDeque<>()", "var_name": "chunksCache"}, {"original_string": "private final Deque<Chunk> chunks = new ArrayDeque<>();", "modifier": "private final", "type": "Deque<Chunk>", "declarator": "chunks = new ArrayDeque<>()", "var_name": "chunks"}], "methods": [{"identifier": "ChunkedAssociativeLongArray", "parameters": "()", "modifiers": "", "return": "", "signature": " ChunkedAssociativeLongArray()", "full_signature": "  ChunkedAssociativeLongArray()", "class_method_signature": "ChunkedAssociativeLongArray.ChunkedAssociativeLongArray()", "testcase": false, "constructor": true}, {"identifier": "ChunkedAssociativeLongArray", "parameters": "(int chunkSize)", "modifiers": "", "return": "", "signature": " ChunkedAssociativeLongArray(int chunkSize)", "full_signature": "  ChunkedAssociativeLongArray(int chunkSize)", "class_method_signature": "ChunkedAssociativeLongArray.ChunkedAssociativeLongArray(int chunkSize)", "testcase": false, "constructor": true}, {"identifier": "allocateChunk", "parameters": "()", "modifiers": "private", "return": "Chunk", "signature": "Chunk allocateChunk()", "full_signature": "private Chunk allocateChunk()", "class_method_signature": "ChunkedAssociativeLongArray.allocateChunk()", "testcase": false, "constructor": false}, {"identifier": "freeChunk", "parameters": "(Chunk chunk)", "modifiers": "private", "return": "void", "signature": "void freeChunk(Chunk chunk)", "full_signature": "private void freeChunk(Chunk chunk)", "class_method_signature": "ChunkedAssociativeLongArray.freeChunk(Chunk chunk)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(long key, long value)", "modifiers": "synchronized", "return": "boolean", "signature": "boolean put(long key, long value)", "full_signature": "synchronized boolean put(long key, long value)", "class_method_signature": "ChunkedAssociativeLongArray.put(long key, long value)", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "()", "modifiers": "synchronized", "return": "long[]", "signature": "long[] values()", "full_signature": "synchronized long[] values()", "class_method_signature": "ChunkedAssociativeLongArray.values()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "synchronized", "return": "int", "signature": "int size()", "full_signature": "synchronized int size()", "class_method_signature": "ChunkedAssociativeLongArray.size()", "testcase": false, "constructor": false}, {"identifier": "out", "parameters": "()", "modifiers": "synchronized", "return": "String", "signature": "String out()", "full_signature": "synchronized String out()", "class_method_signature": "ChunkedAssociativeLongArray.out()", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "(long startKey, long endKey)", "modifiers": "synchronized", "return": "void", "signature": "void trim(long startKey, long endKey)", "full_signature": "synchronized void trim(long startKey, long endKey)", "class_method_signature": "ChunkedAssociativeLongArray.trim(long startKey, long endKey)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "synchronized", "return": "void", "signature": "void clear()", "full_signature": "synchronized void clear()", "class_method_signature": "ChunkedAssociativeLongArray.clear()", "testcase": false, "constructor": false}, {"identifier": "isFirstElementIsEmptyOrGreaterEqualThanKey", "parameters": "(Chunk chunk, long key)", "modifiers": "private", "return": "boolean", "signature": "boolean isFirstElementIsEmptyOrGreaterEqualThanKey(Chunk chunk, long key)", "full_signature": "private boolean isFirstElementIsEmptyOrGreaterEqualThanKey(Chunk chunk, long key)", "class_method_signature": "ChunkedAssociativeLongArray.isFirstElementIsEmptyOrGreaterEqualThanKey(Chunk chunk, long key)", "testcase": false, "constructor": false}, {"identifier": "isLastElementIsLessThanKey", "parameters": "(Chunk chunk, long key)", "modifiers": "private", "return": "boolean", "signature": "boolean isLastElementIsLessThanKey(Chunk chunk, long key)", "full_signature": "private boolean isLastElementIsLessThanKey(Chunk chunk, long key)", "class_method_signature": "ChunkedAssociativeLongArray.isLastElementIsLessThanKey(Chunk chunk, long key)", "testcase": false, "constructor": false}, {"identifier": "findFirstIndexOfGreaterEqualElements", "parameters": "(long[] array, int startIndex, int endIndex, long minKey)", "modifiers": "private", "return": "int", "signature": "int findFirstIndexOfGreaterEqualElements(long[] array, int startIndex, int endIndex, long minKey)", "full_signature": "private int findFirstIndexOfGreaterEqualElements(long[] array, int startIndex, int endIndex, long minKey)", "class_method_signature": "ChunkedAssociativeLongArray.findFirstIndexOfGreaterEqualElements(long[] array, int startIndex, int endIndex, long minKey)", "testcase": false, "constructor": false}], "file": "metrics-core/src/main/java/com/codahale/metrics/ChunkedAssociativeLongArray.java"}, "focal_method": {"identifier": "trim", "parameters": "(long startKey, long endKey)", "modifiers": "synchronized", "return": "void", "body": "synchronized void trim(long startKey, long endKey) {\n        /*\n         * [3, 4, 5, 9] -> [10, 13, 14, 15] -> [21, 24, 29, 30] -> [31] :: start layout\n         *       |5______________________________23|                    :: trim(5, 23)\n         *       [5, 9] -> [10, 13, 14, 15] -> [21]                     :: result layout\n         */\n        final Iterator<Chunk> descendingIterator = chunks.descendingIterator();\n        while (descendingIterator.hasNext()) {\n            final Chunk currentTail = descendingIterator.next();\n            if (isFirstElementIsEmptyOrGreaterEqualThanKey(currentTail, endKey)) {\n                freeChunk(currentTail);\n                descendingIterator.remove();\n            } else {\n                currentTail.cursor = findFirstIndexOfGreaterEqualElements(currentTail.keys, currentTail.startIndex,\n                        currentTail.cursor, endKey);\n                break;\n            }\n        }\n\n        final Iterator<Chunk> iterator = chunks.iterator();\n        while (iterator.hasNext()) {\n            final Chunk currentHead = iterator.next();\n            if (isLastElementIsLessThanKey(currentHead, startKey)) {\n                freeChunk(currentHead);\n                iterator.remove();\n            } else {\n                final int newStartIndex = findFirstIndexOfGreaterEqualElements(currentHead.keys, currentHead.startIndex,\n                        currentHead.cursor, startKey);\n                if (currentHead.startIndex != newStartIndex) {\n                    currentHead.startIndex = newStartIndex;\n                    currentHead.chunkSize = currentHead.cursor - currentHead.startIndex;\n                }\n                break;\n            }\n        }\n    }", "signature": "void trim(long startKey, long endKey)", "full_signature": "synchronized void trim(long startKey, long endKey)", "class_method_signature": "ChunkedAssociativeLongArray.trim(long startKey, long endKey)", "testcase": false, "constructor": false, "invocations": ["descendingIterator", "hasNext", "next", "isFirstElementIsEmptyOrGreaterEqualThanKey", "freeChunk", "remove", "findFirstIndexOfGreaterEqualElements", "iterator", "hasNext", "next", "isLastElementIsLessThanKey", "freeChunk", "remove", "findFirstIndexOfGreaterEqualElements"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}