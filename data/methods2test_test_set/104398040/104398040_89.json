{"test_class": {"identifier": "RemovePropertyTest", "superclass": "extends TransformationUtilityTestHelper", "interfaces": "", "fields": [], "file": "butterfly-utilities/src/test/java/com/paypal/butterfly/utilities/operations/properties/RemovePropertyTest.java"}, "test_case": {"identifier": "fileDoesNotExistTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fileDoesNotExistTest() {\n        RemoveProperty removeProperty = new RemoveProperty(\"foo\").relative(\"/src/main/resources/application_zeta.properties\");\n        TOExecutionResult executionResult = removeProperty.execution(transformedAppFolder, transformationContext);\n        assertEquals(executionResult.getType(), TOExecutionResult.Type.NO_OP);\n        assertEquals(executionResult.getException(), null);\n    }", "signature": "void fileDoesNotExistTest()", "full_signature": "@Test public void fileDoesNotExistTest()", "class_method_signature": "RemovePropertyTest.fileDoesNotExistTest()", "testcase": true, "constructor": false, "invocations": ["relative", "execution", "assertEquals", "getType", "assertEquals", "getException"]}, "focal_class": {"identifier": "RemoveProperty", "superclass": "extends TransformationOperation<RemoveProperty>", "interfaces": "", "fields": [{"original_string": "private static final String DESCRIPTION = \"Remove property %s from file %s\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"Remove property %s from file %s\"", "var_name": "DESCRIPTION"}, {"original_string": "private String propertyName;", "modifier": "private", "type": "String", "declarator": "propertyName", "var_name": "propertyName"}], "methods": [{"identifier": "RemoveProperty", "parameters": "()", "modifiers": "public", "return": "", "signature": " RemoveProperty()", "full_signature": "public  RemoveProperty()", "class_method_signature": "RemoveProperty.RemoveProperty()", "testcase": false, "constructor": true}, {"identifier": "RemoveProperty", "parameters": "(String propertyName)", "modifiers": "public", "return": "", "signature": " RemoveProperty(String propertyName)", "full_signature": "public  RemoveProperty(String propertyName)", "class_method_signature": "RemoveProperty.RemoveProperty(String propertyName)", "testcase": false, "constructor": true}, {"identifier": "setPropertyName", "parameters": "(String propertyName)", "modifiers": "public", "return": "RemoveProperty", "signature": "RemoveProperty setPropertyName(String propertyName)", "full_signature": "public RemoveProperty setPropertyName(String propertyName)", "class_method_signature": "RemoveProperty.setPropertyName(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "getPropertyName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPropertyName()", "full_signature": "public String getPropertyName()", "class_method_signature": "RemoveProperty.getPropertyName()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "RemoveProperty.getDescription()", "testcase": false, "constructor": false}, {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") protected", "return": "TOExecutionResult", "signature": "TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "RemoveProperty.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false}], "file": "butterfly-utilities/src/main/java/com/paypal/butterfly/utilities/operations/properties/RemoveProperty.java"}, "focal_method": {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") protected", "return": "TOExecutionResult", "body": "@Override\n    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\")\n    protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext) {\n        String details;\n        BufferedReader reader = null;\n        BufferedWriter writer = null;\n        TOExecutionResult result = null;\n        File fileToBeChanged = getAbsoluteFile(transformedAppFolder, transformationContext);\n        try {\n            if (!fileToBeChanged.exists()) {\n                // TODO Should this be done as pre-validation?\n                details = String.format(\"Operation '%s' hasn't transformed the application because file '%s', where the property removal should happen, does not exist\", getName(), getRelativePath(transformedAppFolder, fileToBeChanged));\n                return TOExecutionResult.noOp(this, details);\n            }\n            File readFile = getOrCreateReadFile(transformedAppFolder, transformationContext);\n            reader = new BufferedReader(new InputStreamReader(new FileInputStream(readFile), StandardCharsets.UTF_8));\n            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileToBeChanged), StandardCharsets.UTF_8));\n            String currentLine;\n            boolean foundFirstMatch = false;\n            String regex = \"(\" + propertyName + \".*)\";\n            final Pattern pattern = Pattern.compile(regex);\n            EolBufferedReader eolReader = new EolBufferedReader(reader);\n            while((currentLine = eolReader.readLineKeepStartEol()) != null) {\n                if(!foundFirstMatch && pattern.matcher(removeEol(currentLine)).matches()) {\n                    foundFirstMatch = true;\n                    continue;\n                }\n                writer.write(currentLine);\n            }\n\n            if (foundFirstMatch) {\n                details = String.format(\"Property '%s' has been removed from '%s'\", propertyName, getRelativePath());\n                result = TOExecutionResult.success(this, details);\n            } else {\n                TransformationOperationException toex = new TransformationOperationException(String.format(\"Property '%s' has not been removed from '%s' because it is not present\", propertyName, getRelativePath()));\n                result = TOExecutionResult.warning(this, toex);\n            }\n        } catch (IOException e) {\n            result = TOExecutionResult.error(this, e);\n        } finally {\n            try {\n                if (writer != null) try {\n                    writer.close();\n                } catch (IOException e) {\n                    result.addWarning(e);\n                }\n            } finally {\n                if(reader != null) try {\n                    reader.close();\n                } catch (IOException e) {\n                    result.addWarning(e);\n                }\n            }\n        }\n\n        return result;\n    }", "signature": "TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "RemoveProperty.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false, "invocations": ["getAbsoluteFile", "exists", "format", "getName", "getRelativePath", "noOp", "getOrCreateReadFile", "compile", "readLineKeepStartEol", "matches", "matcher", "removeEol", "write", "format", "getRelativePath", "success", "format", "getRelativePath", "warning", "error", "close", "addWarning", "close", "addWarning"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}