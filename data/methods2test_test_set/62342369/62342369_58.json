{"test_class": {"identifier": "CustomExpectedStepParserTest", "superclass": "extends AbstractStepParserTest", "interfaces": "", "fields": [], "file": "step-plans/step-plans-parser/src/test/java/step/repositories/parser/CustomExpectedStepParserTest.java"}, "test_case": {"identifier": "testNotEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNotEquals() throws ParsingException {\n\t\tList<AbstractStep> steps = new ArrayList<>();\n\t\tsteps.add(step(\"Key1 != \\\"Value1\\\"\"));\n\t\t\n\t\tAbstractArtefact root = parse(steps);\n\t\tAssert.assertEquals(1,getChildren(root).size());\n\t\t\n\t\tstep.artefacts.Assert check1 = (step.artefacts.Assert ) getChildren(root).get(0);\n\t\tAssert.assertEquals(\"\\\"Value1\\\"\",check1.getExpected().getExpression());\n\t\tAssert.assertEquals(AssertOperator.EQUALS,check1.getOperator());\n\t\tAssert.assertTrue(check1.getDoNegate().get());\n\t}", "signature": "void testNotEquals()", "full_signature": "@Test public void testNotEquals()", "class_method_signature": "CustomExpectedStepParserTest.testNotEquals()", "testcase": true, "constructor": false, "invocations": ["add", "step", "parse", "assertEquals", "size", "getChildren", "get", "getChildren", "assertEquals", "getExpression", "getExpected", "assertEquals", "getOperator", "assertTrue", "get", "getDoNegate"]}, "focal_class": {"identifier": "CustomExpectedStepParser", "superclass": "", "interfaces": "implements StepParser<ExpectedStep>", "fields": [], "methods": [{"identifier": "getParserScoreForStep", "parameters": "(AbstractStep step)", "modifiers": "@Override public", "return": "int", "signature": "int getParserScoreForStep(AbstractStep step)", "full_signature": "@Override public int getParserScoreForStep(AbstractStep step)", "class_method_signature": "CustomExpectedStepParser.getParserScoreForStep(AbstractStep step)", "testcase": false, "constructor": false}, {"identifier": "parseStep", "parameters": "(ParsingContext parsingContext, ExpectedStep step)", "modifiers": "@Override public", "return": "void", "signature": "void parseStep(ParsingContext parsingContext, ExpectedStep step)", "full_signature": "@Override public void parseStep(ParsingContext parsingContext, ExpectedStep step)", "class_method_signature": "CustomExpectedStepParser.parseStep(ParsingContext parsingContext, ExpectedStep step)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String expression)", "modifiers": "private", "return": "ParseContext", "signature": "ParseContext parse(String expression)", "full_signature": "private ParseContext parse(String expression)", "class_method_signature": "CustomExpectedStepParser.parse(String expression)", "testcase": false, "constructor": false}], "file": "step-plans/step-plans-parser/src/main/java/step/repositories/parser/CustomExpectedStepParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String expression)", "modifiers": "private", "return": "ParseContext", "body": "private ParseContext parse(String expression) {\n\t\tExpectedStepLexer lexer = new ExpectedStepLexer(new ANTLRInputStream(expression));\n\t\tExpectedStepParser parser = new ExpectedStepParser(new CommonTokenStream(lexer));\n\t\tparser.addErrorListener(new BaseErrorListener() {\n\t        @Override\n\t        public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line, int charPositionInLine, String msg, RecognitionException e) {\n\t            throw new IllegalStateException(\"failed to parse at line \" + line + \" due to \" + msg, e);\n\t        }\n\t    });\n\t\treturn parser.parse();\n\t\t\n\t}", "signature": "ParseContext parse(String expression)", "full_signature": "private ParseContext parse(String expression)", "class_method_signature": "CustomExpectedStepParser.parse(String expression)", "testcase": false, "constructor": false, "invocations": ["addErrorListener", "parse"]}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}