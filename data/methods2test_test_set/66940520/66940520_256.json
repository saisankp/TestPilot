{"test_class": {"identifier": "DefaultQueryPlannerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "private DefaultQueryPlanner subject;", "modifier": "private", "type": "DefaultQueryPlanner", "declarator": "subject", "var_name": "subject"}, {"original_string": "@Mock\n    private SchemaService schemaService;", "modifier": "@Mock\n    private", "type": "SchemaService", "declarator": "schemaService", "var_name": "schemaService"}], "file": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/query/planner/DefaultQueryPlannerTest.java"}, "test_case": {"identifier": "verifyPlanQueryReturnsNonPersistedQueryWithCriterion2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyPlanQueryReturnsNonPersistedQueryWithCriterion2()\n        throws Exception\n    {\n        // Create schema with attributes\n        final Attribute attribute = new Attribute();\n        final Map<String, Property> propertyMap = new HashMap<>();\n        addProperty( propertyMap, attribute, \"id\", true );\n        addProperty( propertyMap, attribute, \"uid\", true );\n        addProperty( propertyMap, attribute, \"name\", true );\n        Schema schema = new OrganisationUnitSchemaDescriptor().getSchema();\n        schema.setPropertyMap( propertyMap );\n\n        // Add restrictions on a non persisted field\n        Query query = Query.from( schema, Junction.Type.AND );\n        query.setMaxResults( 10 );\n        query.setFirstResult( 500 );\n\n        query.add( Restrictions.eq( \"name\", \"test\" ) );\n        query.add( Restrictions.eq( \"id\", 100 ) );\n\n        // method under test\n        QueryPlan queryPlan = subject.planQuery( query, false );\n\n        Query persistedQuery = queryPlan.getPersistedQuery();\n\n        assertTrue( persistedQuery.isPlannedQuery() );\n        assertEquals( persistedQuery.getCriterions().size(), 2 );\n        assertEquals( persistedQuery.getFirstResult().intValue(), 500 );\n        assertEquals( persistedQuery.getMaxResults().intValue(), 10 );\n        assertEquals( persistedQuery.getRootJunctionType(), Junction.Type.AND );\n\n        Query nonPersistedQuery = queryPlan.getNonPersistedQuery();\n        assertEquals( nonPersistedQuery.getCriterions().size(), 0 );\n        assertTrue( nonPersistedQuery.isPlannedQuery() );\n        assertEquals( nonPersistedQuery.getRootJunctionType(), Junction.Type.AND );\n    }", "signature": "void verifyPlanQueryReturnsNonPersistedQueryWithCriterion2()", "full_signature": "@Test public void verifyPlanQueryReturnsNonPersistedQueryWithCriterion2()", "class_method_signature": "DefaultQueryPlannerTest.verifyPlanQueryReturnsNonPersistedQueryWithCriterion2()", "testcase": true, "constructor": false, "invocations": ["addProperty", "addProperty", "addProperty", "getSchema", "setPropertyMap", "from", "setMaxResults", "setFirstResult", "add", "eq", "add", "eq", "planQuery", "getPersistedQuery", "assertTrue", "isPlannedQuery", "assertEquals", "size", "getCriterions", "assertEquals", "intValue", "getFirstResult", "assertEquals", "intValue", "getMaxResults", "assertEquals", "getRootJunctionType", "getNonPersistedQuery", "assertEquals", "size", "getCriterions", "assertTrue", "isPlannedQuery", "assertEquals", "getRootJunctionType"]}, "focal_class": {"identifier": "DefaultQueryPlanner", "superclass": "", "interfaces": "implements QueryPlanner", "fields": [{"original_string": "private final SchemaService schemaService;", "modifier": "private final", "type": "SchemaService", "declarator": "schemaService", "var_name": "schemaService"}], "methods": [{"identifier": "DefaultQueryPlanner", "parameters": "( SchemaService schemaService )", "modifiers": "@Autowired public", "return": "", "signature": " DefaultQueryPlanner( SchemaService schemaService )", "full_signature": "@Autowired public  DefaultQueryPlanner( SchemaService schemaService )", "class_method_signature": "DefaultQueryPlanner.DefaultQueryPlanner( SchemaService schemaService )", "testcase": false, "constructor": true}, {"identifier": "planQuery", "parameters": "( Query query )", "modifiers": "@Override public", "return": "QueryPlan", "signature": "QueryPlan planQuery( Query query )", "full_signature": "@Override public QueryPlan planQuery( Query query )", "class_method_signature": "DefaultQueryPlanner.planQuery( Query query )", "testcase": false, "constructor": false}, {"identifier": "planQuery", "parameters": "( Query query, boolean persistedOnly )", "modifiers": "@Override public", "return": "QueryPlan", "signature": "QueryPlan planQuery( Query query, boolean persistedOnly )", "full_signature": "@Override public QueryPlan planQuery( Query query, boolean persistedOnly )", "class_method_signature": "DefaultQueryPlanner.planQuery( Query query, boolean persistedOnly )", "testcase": false, "constructor": false}, {"identifier": "getQueryPath", "parameters": "( Schema schema, String path )", "modifiers": "@Override public", "return": "QueryPath", "signature": "QueryPath getQueryPath( Schema schema, String path )", "full_signature": "@Override public QueryPath getQueryPath( Schema schema, String path )", "class_method_signature": "DefaultQueryPlanner.getQueryPath( Schema schema, String path )", "testcase": false, "constructor": false}, {"identifier": "getQueryPath", "parameters": "( Root<?> root, Schema schema, String path )", "modifiers": "@Override public", "return": "Path<?>", "signature": "Path<?> getQueryPath( Root<?> root, Schema schema, String path )", "full_signature": "@Override public Path<?> getQueryPath( Root<?> root, Schema schema, String path )", "class_method_signature": "DefaultQueryPlanner.getQueryPath( Root<?> root, Schema schema, String path )", "testcase": false, "constructor": false}, {"identifier": "getQuery", "parameters": "( Query query, boolean persistedOnly )", "modifiers": "private", "return": "Query", "signature": "Query getQuery( Query query, boolean persistedOnly )", "full_signature": "private Query getQuery( Query query, boolean persistedOnly )", "class_method_signature": "DefaultQueryPlanner.getQuery( Query query, boolean persistedOnly )", "testcase": false, "constructor": false}, {"identifier": "handleJunction", "parameters": "( Query query, Junction queryJunction, boolean persistedOnly )", "modifiers": "private", "return": "Junction", "signature": "Junction handleJunction( Query query, Junction queryJunction, boolean persistedOnly )", "full_signature": "private Junction handleJunction( Query query, Junction queryJunction, boolean persistedOnly )", "class_method_signature": "DefaultQueryPlanner.handleJunction( Query query, Junction queryJunction, boolean persistedOnly )", "testcase": false, "constructor": false}, {"identifier": "isFilterOnPersistedFieldOnly", "parameters": "( Query query )", "modifiers": "private", "return": "boolean", "signature": "boolean isFilterOnPersistedFieldOnly( Query query )", "full_signature": "private boolean isFilterOnPersistedFieldOnly( Query query )", "class_method_signature": "DefaultQueryPlanner.isFilterOnPersistedFieldOnly( Query query )", "testcase": false, "constructor": false}, {"identifier": "nonPersistedFieldExistsInCriterions", "parameters": "( Set<String> persistedFields, List<Criterion> criterions )", "modifiers": "private", "return": "boolean", "signature": "boolean nonPersistedFieldExistsInCriterions( Set<String> persistedFields, List<Criterion> criterions )", "full_signature": "private boolean nonPersistedFieldExistsInCriterions( Set<String> persistedFields, List<Criterion> criterions )", "class_method_signature": "DefaultQueryPlanner.nonPersistedFieldExistsInCriterions( Set<String> persistedFields, List<Criterion> criterions )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/query/planner/DefaultQueryPlanner.java"}, "focal_method": {"identifier": "planQuery", "parameters": "( Query query )", "modifiers": "@Override public", "return": "QueryPlan", "body": "@Override\n    public QueryPlan planQuery( Query query )\n    {\n        return planQuery( query, false );\n    }", "signature": "QueryPlan planQuery( Query query )", "full_signature": "@Override public QueryPlan planQuery( Query query )", "class_method_signature": "DefaultQueryPlanner.planQuery( Query query )", "testcase": false, "constructor": false, "invocations": ["planQuery"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}