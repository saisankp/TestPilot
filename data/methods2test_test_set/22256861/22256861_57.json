{"test_class": {"identifier": "CloudPNTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CloudPN cloudPn;", "modifier": "private", "type": "CloudPN", "declarator": "cloudPn", "var_name": "cloudPn"}], "file": "s3tbx-meris-cloud/src/test/java/org/esa/s3tbx/operator/cloud/CloudPNTest.java"}, "test_case": {"identifier": "testAltitudeCorrectedPressure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAltitudeCorrectedPressure() {\n        double pressure = 1000;\n        double altitude = 100;\n        double correctedPressure = cloudPn.altitudeCorrectedPressure(pressure, altitude, true);\n        assertEquals(\"corrected pressure\", 988.08, correctedPressure, 0.01);\n        correctedPressure = cloudPn.altitudeCorrectedPressure(pressure, altitude, false);\n        assertEquals(\"corrected pressure\", 1000, correctedPressure, 0.0001);\n    }", "signature": "void testAltitudeCorrectedPressure()", "full_signature": "@Test public void testAltitudeCorrectedPressure()", "class_method_signature": "CloudPNTest.testAltitudeCorrectedPressure()", "testcase": true, "constructor": false, "invocations": ["altitudeCorrectedPressure", "assertEquals", "altitudeCorrectedPressure", "assertEquals"]}, "focal_class": {"identifier": "CloudPN", "superclass": "extends ProcessingNode", "interfaces": "", "fields": [{"original_string": "public static final String CONFIG_FILE_NAME = \"config_file_name\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_FILE_NAME = \"config_file_name\"", "var_name": "CONFIG_FILE_NAME"}, {"original_string": "public static final String INVALID_EXPRESSION = \"invalid_expression\";", "modifier": "public static final", "type": "String", "declarator": "INVALID_EXPRESSION = \"invalid_expression\"", "var_name": "INVALID_EXPRESSION"}, {"original_string": "public static final String CLOUD_PROP_BAND = \"cloud_prob\";", "modifier": "public static final", "type": "String", "declarator": "CLOUD_PROP_BAND = \"cloud_prob\"", "var_name": "CLOUD_PROP_BAND"}, {"original_string": "public static final String CLOUD_FLAG_BAND = \"cloud_flag\";", "modifier": "public static final", "type": "String", "declarator": "CLOUD_FLAG_BAND = \"cloud_flag\"", "var_name": "CLOUD_FLAG_BAND"}, {"original_string": "private static final String DEFAULT_OUTPUT_PRODUCT_NAME = \"MER_CLOUD\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_OUTPUT_PRODUCT_NAME = \"MER_CLOUD\"", "var_name": "DEFAULT_OUTPUT_PRODUCT_NAME"}, {"original_string": "private static final String PRODUCT_TYPE = \"MER_L2_CLOUD\";", "modifier": "private static final", "type": "String", "declarator": "PRODUCT_TYPE = \"MER_L2_CLOUD\"", "var_name": "PRODUCT_TYPE"}, {"original_string": "private static final String DEFAULT_VALID_LAND_EXP = \"not l1_flags.INVALID and dem_alt > -50\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_VALID_LAND_EXP = \"not l1_flags.INVALID and dem_alt > -50\"", "var_name": "DEFAULT_VALID_LAND_EXP"}, {"original_string": "private static final String DEFAULT_VALID_OCEAN_EXP = \"not l1_flags.INVALID and dem_alt <= -50\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_VALID_OCEAN_EXP = \"not l1_flags.INVALID and dem_alt <= -50\"", "var_name": "DEFAULT_VALID_OCEAN_EXP"}, {"original_string": "private static final float SCALING_FACTOR = 0.0001f;", "modifier": "private static final", "type": "float", "declarator": "SCALING_FACTOR = 0.0001f", "var_name": "SCALING_FACTOR"}, {"original_string": "private static final String PRESS_SCALE_HEIGHT_KEY = \"press_scale_height\";", "modifier": "private static final", "type": "String", "declarator": "PRESS_SCALE_HEIGHT_KEY = \"press_scale_height\"", "var_name": "PRESS_SCALE_HEIGHT_KEY"}, {"original_string": "private static final int FLAG_CLOUDY = 1;", "modifier": "private static final", "type": "int", "declarator": "FLAG_CLOUDY = 1", "var_name": "FLAG_CLOUDY"}, {"original_string": "private static final int FLAG_CLOUDFREE = 2;", "modifier": "private static final", "type": "int", "declarator": "FLAG_CLOUDFREE = 2", "var_name": "FLAG_CLOUDFREE"}, {"original_string": "private static final int FLAG_UNCERTAIN = 4;", "modifier": "private static final", "type": "int", "declarator": "FLAG_UNCERTAIN = 4", "var_name": "FLAG_UNCERTAIN"}, {"original_string": "public static final String ATM_PRESS = \"atm_press\";", "modifier": "public static final", "type": "String", "declarator": "ATM_PRESS = \"atm_press\"", "var_name": "ATM_PRESS"}, {"original_string": "private final String auxdataDir;", "modifier": "private final", "type": "String", "declarator": "auxdataDir", "var_name": "auxdataDir"}, {"original_string": "private RasterDataNode szaGrid;", "modifier": "private", "type": "RasterDataNode", "declarator": "szaGrid", "var_name": "szaGrid"}, {"original_string": "private RasterDataNode saaGrid;", "modifier": "private", "type": "RasterDataNode", "declarator": "saaGrid", "var_name": "saaGrid"}, {"original_string": "private RasterDataNode vzaGrid;", "modifier": "private", "type": "RasterDataNode", "declarator": "vzaGrid", "var_name": "vzaGrid"}, {"original_string": "private RasterDataNode vaaGrid;", "modifier": "private", "type": "RasterDataNode", "declarator": "vaaGrid", "var_name": "vaaGrid"}, {"original_string": "private RasterDataNode pressGrid;", "modifier": "private", "type": "RasterDataNode", "declarator": "pressGrid", "var_name": "pressGrid"}, {"original_string": "private RasterDataNode altitude;", "modifier": "private", "type": "RasterDataNode", "declarator": "altitude", "var_name": "altitude"}, {"original_string": "private float[] centralWavelength;", "modifier": "private", "type": "float[]", "declarator": "centralWavelength", "var_name": "centralWavelength"}, {"original_string": "private CentralWavelengthProvider centralWavelengthProvider;", "modifier": "private", "type": "CentralWavelengthProvider", "declarator": "centralWavelengthProvider", "var_name": "centralWavelengthProvider"}, {"original_string": "private String validLandExpression;", "modifier": "private", "type": "String", "declarator": "validLandExpression", "var_name": "validLandExpression"}, {"original_string": "private String validOceanExpression;", "modifier": "private", "type": "String", "declarator": "validOceanExpression", "var_name": "validOceanExpression"}, {"original_string": "private Logger logger;", "modifier": "private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private Band cloudBand;", "modifier": "private", "type": "Band", "declarator": "cloudBand", "var_name": "cloudBand"}, {"original_string": "private Band cloudFlagBand;", "modifier": "private", "type": "Band", "declarator": "cloudFlagBand", "var_name": "cloudFlagBand"}, {"original_string": "private Band detectorBand;", "modifier": "private", "type": "Band", "declarator": "detectorBand", "var_name": "detectorBand"}, {"original_string": "private Band[] radianceBands;", "modifier": "private", "type": "Band[]", "declarator": "radianceBands", "var_name": "radianceBands"}, {"original_string": "private CloudAlgorithm landAlgo;", "modifier": "private", "type": "CloudAlgorithm", "declarator": "landAlgo", "var_name": "landAlgo"}, {"original_string": "private CloudAlgorithm oceanAlgo;", "modifier": "private", "type": "CloudAlgorithm", "declarator": "oceanAlgo", "var_name": "oceanAlgo"}, {"original_string": "private int pressScaleHeight;", "modifier": "private", "type": "int", "declarator": "pressScaleHeight", "var_name": "pressScaleHeight"}, {"original_string": "private MultiLevelImage validLandImage;", "modifier": "private", "type": "MultiLevelImage", "declarator": "validLandImage", "var_name": "validLandImage"}, {"original_string": "private MultiLevelImage validOceanImage;", "modifier": "private", "type": "MultiLevelImage", "declarator": "validOceanImage", "var_name": "validOceanImage"}, {"original_string": "private MultiLevelImage landImage;", "modifier": "private", "type": "MultiLevelImage", "declarator": "landImage", "var_name": "landImage"}], "methods": [{"identifier": "CloudPN", "parameters": "(String auxdataDir)", "modifiers": "public", "return": "", "signature": " CloudPN(String auxdataDir)", "full_signature": "public  CloudPN(String auxdataDir)", "class_method_signature": "CloudPN.CloudPN(String auxdataDir)", "testcase": false, "constructor": true}, {"identifier": "setUp", "parameters": "(final Map config)", "modifiers": "@Override public", "return": "void", "signature": "void setUp(final Map config)", "full_signature": "@Override public void setUp(final Map config)", "class_method_signature": "CloudPN.setUp(final Map config)", "testcase": false, "constructor": false}, {"identifier": "createTargetProductImpl", "parameters": "()", "modifiers": "@Override protected", "return": "Product", "signature": "Product createTargetProductImpl()", "full_signature": "@Override protected Product createTargetProductImpl()", "class_method_signature": "CloudPN.createTargetProductImpl()", "testcase": false, "constructor": false}, {"identifier": "addCloudFlagCoding", "parameters": "(Product outputProduct)", "modifiers": "private static", "return": "FlagCoding", "signature": "FlagCoding addCloudFlagCoding(Product outputProduct)", "full_signature": "private static FlagCoding addCloudFlagCoding(Product outputProduct)", "class_method_signature": "CloudPN.addCloudFlagCoding(Product outputProduct)", "testcase": false, "constructor": false}, {"identifier": "createBitmaskColor", "parameters": "(int index, int maxIndex)", "modifiers": "private static", "return": "Color", "signature": "Color createBitmaskColor(int index, int maxIndex)", "full_signature": "private static Color createBitmaskColor(int index, int maxIndex)", "class_method_signature": "CloudPN.createBitmaskColor(int index, int maxIndex)", "testcase": false, "constructor": false}, {"identifier": "ensureCentralWavelengthIsSet", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureCentralWavelengthIsSet()", "full_signature": "private void ensureCentralWavelengthIsSet()", "class_method_signature": "CloudPN.ensureCentralWavelengthIsSet()", "testcase": false, "constructor": false}, {"identifier": "processFrame", "parameters": "(int frameX, int frameY, int frameW, int frameH, ProgressMonitor pm)", "modifiers": "@Override protected", "return": "void", "signature": "void processFrame(int frameX, int frameY, int frameW, int frameH, ProgressMonitor pm)", "full_signature": "@Override protected void processFrame(int frameX, int frameY, int frameW, int frameH, ProgressMonitor pm)", "class_method_signature": "CloudPN.processFrame(int frameX, int frameY, int frameW, int frameH, ProgressMonitor pm)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(int maskValue)", "modifiers": "private", "return": "boolean", "signature": "boolean isValid(int maskValue)", "full_signature": "private boolean isValid(int maskValue)", "class_method_signature": "CloudPN.isValid(int maskValue)", "testcase": false, "constructor": false}, {"identifier": "calculateI", "parameters": "(double radiance, float sunSpectralFlux, double sunZenith)", "modifiers": "protected", "return": "double", "signature": "double calculateI(double radiance, float sunSpectralFlux, double sunZenith)", "full_signature": "protected double calculateI(double radiance, float sunSpectralFlux, double sunZenith)", "class_method_signature": "CloudPN.calculateI(double radiance, float sunSpectralFlux, double sunZenith)", "testcase": false, "constructor": false}, {"identifier": "altitudeCorrectedPressure", "parameters": "(double pressure, double altitude, boolean isLand)", "modifiers": "protected", "return": "double", "signature": "double altitudeCorrectedPressure(double pressure, double altitude, boolean isLand)", "full_signature": "protected double altitudeCorrectedPressure(double pressure, double altitude, boolean isLand)", "class_method_signature": "CloudPN.altitudeCorrectedPressure(double pressure, double altitude, boolean isLand)", "testcase": false, "constructor": false}, {"identifier": "computeAda", "parameters": "(final double vaa, final double saa)", "modifiers": "private static", "return": "double", "signature": "double computeAda(final double vaa, final double saa)", "full_signature": "private static double computeAda(final double vaa, final double saa)", "class_method_signature": "CloudPN.computeAda(final double vaa, final double saa)", "testcase": false, "constructor": false}, {"identifier": "startProcessing", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startProcessing()", "full_signature": "@Override public void startProcessing()", "class_method_signature": "CloudPN.startProcessing()", "testcase": false, "constructor": false}, {"identifier": "getRasterData", "parameters": "(String tieOrBandName)", "modifiers": "private", "return": "RasterDataNode", "signature": "RasterDataNode getRasterData(String tieOrBandName)", "full_signature": "private RasterDataNode getRasterData(String tieOrBandName)", "class_method_signature": "CloudPN.getRasterData(String tieOrBandName)", "testcase": false, "constructor": false}, {"identifier": "isTiePoint", "parameters": "(String name)", "modifiers": "private", "return": "boolean", "signature": "boolean isTiePoint(String name)", "full_signature": "private boolean isTiePoint(String name)", "class_method_signature": "CloudPN.isTiePoint(String name)", "testcase": false, "constructor": false}], "file": "s3tbx-meris-cloud/src/main/java/org/esa/s3tbx/operator/cloud/CloudPN.java"}, "focal_method": {"identifier": "altitudeCorrectedPressure", "parameters": "(double pressure, double altitude, boolean isLand)", "modifiers": "protected", "return": "double", "body": "protected double altitudeCorrectedPressure(double pressure, double altitude, boolean isLand) {\n        double correctedPressure;\n        if (isLand) {\n            // ECMWF pressure is only corrected for positive altitudes and only for land pixels */\n            double f = Math.exp(-Math.max(0.0, altitude) / pressScaleHeight);\n            correctedPressure = pressure * f;\n        } else {\n            correctedPressure = pressure;\n        }\n        return correctedPressure;\n    }", "signature": "double altitudeCorrectedPressure(double pressure, double altitude, boolean isLand)", "full_signature": "protected double altitudeCorrectedPressure(double pressure, double altitude, boolean isLand)", "class_method_signature": "CloudPN.altitudeCorrectedPressure(double pressure, double altitude, boolean isLand)", "testcase": false, "constructor": false, "invocations": ["exp", "max"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}