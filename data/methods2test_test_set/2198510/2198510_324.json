{"test_class": {"identifier": "TestLifecycleSupervisor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LifecycleSupervisor supervisor;", "modifier": "private", "type": "LifecycleSupervisor", "declarator": "supervisor", "var_name": "supervisor"}], "file": "flume-ng-core/src/test/java/org/apache/flume/lifecycle/TestLifecycleSupervisor.java"}, "test_case": {"identifier": "testSupervise", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSupervise() throws LifecycleException, InterruptedException {\n    supervisor.start();\n\n    /* Attempt to supervise a known-to-fail config. */\n    /*\n     * LogicalNode node = new LogicalNode(); SupervisorPolicy policy = new\n     * SupervisorPolicy.OnceOnlyPolicy(); supervisor.supervise(node, policy,\n     * LifecycleState.START);\n     */\n\n    CountingLifecycleAware node = new CountingLifecycleAware();\n\n    SupervisorPolicy policy = new SupervisorPolicy.OnceOnlyPolicy();\n    supervisor.supervise(node, policy, LifecycleState.START);\n\n    Thread.sleep(10000);\n\n    node = new CountingLifecycleAware();\n\n    policy = new SupervisorPolicy.OnceOnlyPolicy();\n    supervisor.supervise(node, policy, LifecycleState.START);\n\n    Thread.sleep(5000);\n\n    supervisor.stop();\n  }", "signature": "void testSupervise()", "full_signature": "@Test public void testSupervise()", "class_method_signature": "TestLifecycleSupervisor.testSupervise()", "testcase": true, "constructor": false, "invocations": ["start", "supervise", "sleep", "supervise", "sleep", "stop"]}, "focal_class": {"identifier": "LifecycleSupervisor", "superclass": "", "interfaces": "implements LifecycleAware", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(LifecycleSupervisor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LifecycleSupervisor.class)", "var_name": "logger"}, {"original_string": "private Map<LifecycleAware, Supervisoree> supervisedProcesses;", "modifier": "private", "type": "Map<LifecycleAware, Supervisoree>", "declarator": "supervisedProcesses", "var_name": "supervisedProcesses"}, {"original_string": "private Map<LifecycleAware, ScheduledFuture<?>> monitorFutures;", "modifier": "private", "type": "Map<LifecycleAware, ScheduledFuture<?>>", "declarator": "monitorFutures", "var_name": "monitorFutures"}, {"original_string": "private ScheduledThreadPoolExecutor monitorService;", "modifier": "private", "type": "ScheduledThreadPoolExecutor", "declarator": "monitorService", "var_name": "monitorService"}, {"original_string": "private LifecycleState lifecycleState;", "modifier": "private", "type": "LifecycleState", "declarator": "lifecycleState", "var_name": "lifecycleState"}, {"original_string": "private Purger purger;", "modifier": "private", "type": "Purger", "declarator": "purger", "var_name": "purger"}, {"original_string": "private boolean needToPurge;", "modifier": "private", "type": "boolean", "declarator": "needToPurge", "var_name": "needToPurge"}], "methods": [{"identifier": "LifecycleSupervisor", "parameters": "()", "modifiers": "public", "return": "", "signature": " LifecycleSupervisor()", "full_signature": "public  LifecycleSupervisor()", "class_method_signature": "LifecycleSupervisor.LifecycleSupervisor()", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void start()", "full_signature": "@Override public synchronized void start()", "class_method_signature": "LifecycleSupervisor.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void stop()", "full_signature": "@Override public synchronized void stop()", "class_method_signature": "LifecycleSupervisor.stop()", "testcase": false, "constructor": false}, {"identifier": "fail", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void fail()", "full_signature": "public synchronized void fail()", "class_method_signature": "LifecycleSupervisor.fail()", "testcase": false, "constructor": false}, {"identifier": "supervise", "parameters": "(LifecycleAware lifecycleAware,\n      SupervisorPolicy policy, LifecycleState desiredState)", "modifiers": "public synchronized", "return": "void", "signature": "void supervise(LifecycleAware lifecycleAware,\n      SupervisorPolicy policy, LifecycleState desiredState)", "full_signature": "public synchronized void supervise(LifecycleAware lifecycleAware,\n      SupervisorPolicy policy, LifecycleState desiredState)", "class_method_signature": "LifecycleSupervisor.supervise(LifecycleAware lifecycleAware,\n      SupervisorPolicy policy, LifecycleState desiredState)", "testcase": false, "constructor": false}, {"identifier": "unsupervise", "parameters": "(LifecycleAware lifecycleAware)", "modifiers": "public synchronized", "return": "void", "signature": "void unsupervise(LifecycleAware lifecycleAware)", "full_signature": "public synchronized void unsupervise(LifecycleAware lifecycleAware)", "class_method_signature": "LifecycleSupervisor.unsupervise(LifecycleAware lifecycleAware)", "testcase": false, "constructor": false}, {"identifier": "setDesiredState", "parameters": "(LifecycleAware lifecycleAware,\n      LifecycleState desiredState)", "modifiers": "public synchronized", "return": "void", "signature": "void setDesiredState(LifecycleAware lifecycleAware,\n      LifecycleState desiredState)", "full_signature": "public synchronized void setDesiredState(LifecycleAware lifecycleAware,\n      LifecycleState desiredState)", "class_method_signature": "LifecycleSupervisor.setDesiredState(LifecycleAware lifecycleAware,\n      LifecycleState desiredState)", "testcase": false, "constructor": false}, {"identifier": "getLifecycleState", "parameters": "()", "modifiers": "@Override public synchronized", "return": "LifecycleState", "signature": "LifecycleState getLifecycleState()", "full_signature": "@Override public synchronized LifecycleState getLifecycleState()", "class_method_signature": "LifecycleSupervisor.getLifecycleState()", "testcase": false, "constructor": false}, {"identifier": "isComponentInErrorState", "parameters": "(LifecycleAware component)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean isComponentInErrorState(LifecycleAware component)", "full_signature": "public synchronized boolean isComponentInErrorState(LifecycleAware component)", "class_method_signature": "LifecycleSupervisor.isComponentInErrorState(LifecycleAware component)", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/lifecycle/LifecycleSupervisor.java"}, "focal_method": {"identifier": "supervise", "parameters": "(LifecycleAware lifecycleAware,\n      SupervisorPolicy policy, LifecycleState desiredState)", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void supervise(LifecycleAware lifecycleAware,\n      SupervisorPolicy policy, LifecycleState desiredState) {\n    if (this.monitorService.isShutdown()\n        || this.monitorService.isTerminated()\n        || this.monitorService.isTerminating()) {\n      throw new FlumeException(\"Supervise called on \" + lifecycleAware + \" \" +\n          \"after shutdown has been initiated. \" + lifecycleAware + \" will not\" +\n          \" be started\");\n    }\n\n    Preconditions.checkState(!supervisedProcesses.containsKey(lifecycleAware),\n        \"Refusing to supervise \" + lifecycleAware + \" more than once\");\n\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Supervising service:{} policy:{} desiredState:{}\",\n          new Object[] { lifecycleAware, policy, desiredState });\n    }\n\n    Supervisoree process = new Supervisoree();\n    process.status = new Status();\n\n    process.policy = policy;\n    process.status.desiredState = desiredState;\n    process.status.error = false;\n\n    MonitorRunnable monitorRunnable = new MonitorRunnable();\n    monitorRunnable.lifecycleAware = lifecycleAware;\n    monitorRunnable.supervisoree = process;\n    monitorRunnable.monitorService = monitorService;\n\n    supervisedProcesses.put(lifecycleAware, process);\n\n    ScheduledFuture<?> future = monitorService.scheduleWithFixedDelay(\n        monitorRunnable, 0, 3, TimeUnit.SECONDS);\n    monitorFutures.put(lifecycleAware, future);\n  }", "signature": "void supervise(LifecycleAware lifecycleAware,\n      SupervisorPolicy policy, LifecycleState desiredState)", "full_signature": "public synchronized void supervise(LifecycleAware lifecycleAware,\n      SupervisorPolicy policy, LifecycleState desiredState)", "class_method_signature": "LifecycleSupervisor.supervise(LifecycleAware lifecycleAware,\n      SupervisorPolicy policy, LifecycleState desiredState)", "testcase": false, "constructor": false, "invocations": ["isShutdown", "isTerminated", "isTerminating", "checkState", "containsKey", "isDebugEnabled", "debug", "put", "scheduleWithFixedDelay", "put"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}