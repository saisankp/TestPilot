{"test_class": {"identifier": "TestDefaultJMSMessageConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEXT = \"text\";", "modifier": "private static final", "type": "String", "declarator": "TEXT = \"text\"", "var_name": "TEXT"}, {"original_string": "private static final byte[] BYTES = TEXT.getBytes(Charsets.UTF_8);", "modifier": "private static final", "type": "byte[]", "declarator": "BYTES = TEXT.getBytes(Charsets.UTF_8)", "var_name": "BYTES"}, {"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private Message message;", "modifier": "private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "private Map<String, String> headers;", "modifier": "private", "type": "Map<String, String>", "declarator": "headers", "var_name": "headers"}, {"original_string": "private JMSMessageConverter converter;", "modifier": "private", "type": "JMSMessageConverter", "declarator": "converter", "var_name": "converter"}], "file": "flume-ng-sources/flume-jms-source/src/test/java/org/apache/flume/source/jms/TestDefaultJMSMessageConverter.java"}, "test_case": {"identifier": "testObjectMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testObjectMessage() throws Exception {\n    createObjectMessage();\n    headers.put(\"key1\", \"value1\");\n    headers.put(\"key2\", \"value2\");\n    createHeaders();\n    Event event = converter.convert(message).iterator().next();\n    assertEquals(headers, event.getHeaders());\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    ObjectOutput out = new ObjectOutputStream(bos);\n    out.writeObject(TEXT);\n    assertArrayEquals(bos.toByteArray(), event.getBody());\n  }", "signature": "void testObjectMessage()", "full_signature": "@Test public void testObjectMessage()", "class_method_signature": "TestDefaultJMSMessageConverter.testObjectMessage()", "testcase": true, "constructor": false, "invocations": ["createObjectMessage", "put", "put", "createHeaders", "next", "iterator", "convert", "assertEquals", "getHeaders", "writeObject", "assertArrayEquals", "toByteArray", "getBody"]}, "focal_class": {"identifier": "DefaultJMSMessageConverter", "superclass": "", "interfaces": "implements JMSMessageConverter", "fields": [{"original_string": "private final Charset charset;", "modifier": "private final", "type": "Charset", "declarator": "charset", "var_name": "charset"}], "methods": [{"identifier": "DefaultJMSMessageConverter", "parameters": "(String charset)", "modifiers": "private", "return": "", "signature": " DefaultJMSMessageConverter(String charset)", "full_signature": "private  DefaultJMSMessageConverter(String charset)", "class_method_signature": "DefaultJMSMessageConverter.DefaultJMSMessageConverter(String charset)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(Message message)", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> convert(Message message)", "full_signature": "@Override public List<Event> convert(Message message)", "class_method_signature": "DefaultJMSMessageConverter.convert(Message message)", "testcase": false, "constructor": false}], "file": "flume-ng-sources/flume-jms-source/src/main/java/org/apache/flume/source/jms/DefaultJMSMessageConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(Message message)", "modifiers": "@Override public", "return": "List<Event>", "body": "@Override\n  public List<Event> convert(Message message) throws JMSException {\n    Event event = new SimpleEvent();\n    Map<String, String> headers = event.getHeaders();\n    @SuppressWarnings(\"rawtypes\")\n    Enumeration propertyNames = message.getPropertyNames();\n    while (propertyNames.hasMoreElements()) {\n      String name = propertyNames.nextElement().toString();\n      String value = message.getStringProperty(name);\n      headers.put(name, value);\n    }\n    if (message instanceof BytesMessage) {\n      BytesMessage bytesMessage = (BytesMessage)message;\n      long length = bytesMessage.getBodyLength();\n      if (length > 0L) {\n        if (length > Integer.MAX_VALUE) {\n          throw new JMSException(\"Unable to process message \" + \"of size \"\n              + length);\n        }\n        byte[] body = new byte[(int)length];\n        int count = bytesMessage.readBytes(body);\n        if (count != length) {\n          throw new JMSException(\"Unable to read full message. \" +\n              \"Read \" + count + \" of total \" + length);\n        }\n        event.setBody(body);\n      }\n    } else if (message instanceof TextMessage) {\n      TextMessage textMessage = (TextMessage)message;\n      String text = textMessage.getText();\n      if (text != null) {\n        event.setBody(text.getBytes(charset));\n      }\n    } else if (message instanceof ObjectMessage) {\n      ObjectMessage objectMessage = (ObjectMessage)message;\n      Object object = objectMessage.getObject();\n      if (object != null) {\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        ObjectOutput out = null;\n        try {\n          out = new ObjectOutputStream(bos);\n          out.writeObject(object);\n          event.setBody(bos.toByteArray());\n        } catch (IOException e) {\n          throw new FlumeException(\"Error serializing object\", e);\n        } finally {\n          try {\n            if (out != null) {\n              out.close();\n            }\n          } catch (IOException e) {\n            throw new FlumeException(\"Error closing ObjectOutputStream\", e);\n          }\n          try {\n            if (bos != null) {\n              bos.close();\n            }\n          } catch (IOException e) {\n            throw new FlumeException(\"Error closing ByteArrayOutputStream\", e);\n          }\n        }\n      }\n\n    }\n    List<Event> events = new ArrayList<Event>(1);\n    events.add(event);\n    return events;\n  }", "signature": "List<Event> convert(Message message)", "full_signature": "@Override public List<Event> convert(Message message)", "class_method_signature": "DefaultJMSMessageConverter.convert(Message message)", "testcase": false, "constructor": false, "invocations": ["getHeaders", "getPropertyNames", "hasMoreElements", "toString", "nextElement", "getStringProperty", "put", "getBodyLength", "readBytes", "setBody", "getText", "setBody", "getBytes", "getObject", "writeObject", "setBody", "toByteArray", "close", "close", "add"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}