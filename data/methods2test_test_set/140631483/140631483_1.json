{"test_class": {"identifier": "NoFreeMemoryManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NoFreeMemoryManager noFreeMemoryManager;", "modifier": "private", "type": "NoFreeMemoryManager", "declarator": "noFreeMemoryManager", "var_name": "noFreeMemoryManager"}], "file": "core/src/test/java/com/yahoo/oak/NoFreeMemoryManagerTest.java"}, "test_case": {"identifier": "allocate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void allocate() {\n        Slice s = new Slice();\n        ByteBuffer bb;\n\n        noFreeMemoryManager.allocate(s, 4);\n        Assert.assertEquals(4, s.getAllocatedLength());\n        Assert.assertEquals(4, noFreeMemoryManager.allocated());\n\n        noFreeMemoryManager.allocate(s, 4);\n        Assert.assertEquals(4, s.getAllocatedLength());\n        Assert.assertEquals(8, noFreeMemoryManager.allocated());\n    }", "signature": "void allocate()", "full_signature": "@Test public void allocate()", "class_method_signature": "NoFreeMemoryManagerTest.allocate()", "testcase": true, "constructor": false, "invocations": ["allocate", "assertEquals", "getAllocatedLength", "assertEquals", "allocated", "allocate", "assertEquals", "getAllocatedLength", "assertEquals", "allocated"]}, "focal_class": {"identifier": "NoFreeMemoryManager", "superclass": "", "interfaces": "implements MemoryManager", "fields": [{"original_string": "private final BlockMemoryAllocator allocator;", "modifier": "private final", "type": "BlockMemoryAllocator", "declarator": "allocator", "var_name": "allocator"}, {"original_string": "private final ReferenceCodecDirect rcd;", "modifier": "private final", "type": "ReferenceCodecDirect", "declarator": "rcd", "var_name": "rcd"}], "methods": [{"identifier": "NoFreeMemoryManager", "parameters": "(BlockMemoryAllocator memoryAllocator)", "modifiers": "", "return": "", "signature": " NoFreeMemoryManager(BlockMemoryAllocator memoryAllocator)", "full_signature": "  NoFreeMemoryManager(BlockMemoryAllocator memoryAllocator)", "class_method_signature": "NoFreeMemoryManager.NoFreeMemoryManager(BlockMemoryAllocator memoryAllocator)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "NoFreeMemoryManager.close()", "testcase": false, "constructor": false}, {"identifier": "allocated", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long allocated()", "full_signature": "public long allocated()", "class_method_signature": "NoFreeMemoryManager.allocated()", "testcase": false, "constructor": false}, {"identifier": "allocate", "parameters": "(Slice s, int size)", "modifiers": "@Override public", "return": "void", "signature": "void allocate(Slice s, int size)", "full_signature": "@Override public void allocate(Slice s, int size)", "class_method_signature": "NoFreeMemoryManager.allocate(Slice s, int size)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(Slice s)", "modifiers": "@Override public", "return": "void", "signature": "void release(Slice s)", "full_signature": "@Override public void release(Slice s)", "class_method_signature": "NoFreeMemoryManager.release(Slice s)", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "public boolean isClosed()", "class_method_signature": "NoFreeMemoryManager.isClosed()", "testcase": false, "constructor": false}, {"identifier": "decodeReference", "parameters": "(Slice s, long reference)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean decodeReference(Slice s, long reference)", "full_signature": "@Override public boolean decodeReference(Slice s, long reference)", "class_method_signature": "NoFreeMemoryManager.decodeReference(Slice s, long reference)", "testcase": false, "constructor": false}, {"identifier": "encodeReference", "parameters": "(Slice s)", "modifiers": "@Override public", "return": "long", "signature": "long encodeReference(Slice s)", "full_signature": "@Override public long encodeReference(Slice s)", "class_method_signature": "NoFreeMemoryManager.encodeReference(Slice s)", "testcase": false, "constructor": false}, {"identifier": "alterReferenceForDelete", "parameters": "(long reference)", "modifiers": "@Override public", "return": "long", "signature": "long alterReferenceForDelete(long reference)", "full_signature": "@Override public long alterReferenceForDelete(long reference)", "class_method_signature": "NoFreeMemoryManager.alterReferenceForDelete(long reference)", "testcase": false, "constructor": false}, {"identifier": "getInvalidReference", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getInvalidReference()", "full_signature": "@Override public long getInvalidReference()", "class_method_signature": "NoFreeMemoryManager.getInvalidReference()", "testcase": false, "constructor": false}, {"identifier": "isReferenceValid", "parameters": "(long reference)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReferenceValid(long reference)", "full_signature": "@Override public boolean isReferenceValid(long reference)", "class_method_signature": "NoFreeMemoryManager.isReferenceValid(long reference)", "testcase": false, "constructor": false}, {"identifier": "isReferenceDeleted", "parameters": "(long reference)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReferenceDeleted(long reference)", "full_signature": "@Override public boolean isReferenceDeleted(long reference)", "class_method_signature": "NoFreeMemoryManager.isReferenceDeleted(long reference)", "testcase": false, "constructor": false}, {"identifier": "isReferenceConsistent", "parameters": "(long reference)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReferenceConsistent(long reference)", "full_signature": "@Override public boolean isReferenceConsistent(long reference)", "class_method_signature": "NoFreeMemoryManager.isReferenceConsistent(long reference)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/yahoo/oak/NoFreeMemoryManager.java"}, "focal_method": {"identifier": "allocate", "parameters": "(Slice s, int size)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void allocate(Slice s, int size) {\n        boolean allocated = allocator.allocate(s, size);\n        assert allocated;\n    }", "signature": "void allocate(Slice s, int size)", "full_signature": "@Override public void allocate(Slice s, int size)", "class_method_signature": "NoFreeMemoryManager.allocate(Slice s, int size)", "testcase": false, "constructor": false, "invocations": ["allocate"]}, "repository": {"repo_id": 140631483, "url": "https://github.com/yahoo/Oak", "stars": 114, "created": "7/11/2018 9:57:20 PM +00:00", "updates": "2020-01-22T11:50:06+00:00", "fork": "False", "license": "licensed"}}