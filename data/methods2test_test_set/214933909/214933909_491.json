{"test_class": {"identifier": "TableEntityDaoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    TableEntityDao tableEntityDao;", "modifier": "@Autowired", "type": "TableEntityDao", "declarator": "tableEntityDao", "var_name": "tableEntityDao"}, {"original_string": "TaskTable taskTable;", "modifier": "", "type": "TaskTable", "declarator": "taskTable", "var_name": "taskTable"}, {"original_string": "TaskTable taskTableModel;", "modifier": "", "type": "TaskTable", "declarator": "taskTableModel", "var_name": "taskTableModel"}, {"original_string": "Paging<TaskTable> paging;", "modifier": "", "type": "Paging<TaskTable>", "declarator": "paging", "var_name": "paging"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/dao/TableEntityDaoTest.java"}, "test_case": {"identifier": "getTaskTableByDbNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getTaskTableByDbNames() throws Exception {\n        List<String> names = Lists.newArrayList(\"risk_scene_strategy\", \"risk_template\");\n        List<TaskTable> list = tableEntityDao.getTaskTableByCustomTableNames(39L, names);\n        System.out.println(\"getTaskTableByCustomTableNames :-------> \" + list);\n        Assert.assertTrue(list.size() > 0);\n    }", "signature": "void getTaskTableByDbNames()", "full_signature": "@Test public void getTaskTableByDbNames()", "class_method_signature": "TableEntityDaoTest.getTaskTableByDbNames()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "getTaskTableByCustomTableNames", "println", "assertTrue", "size"]}, "focal_class": {"identifier": "TableEntityDao", "superclass": "extends BaseDao", "interfaces": "", "fields": [], "methods": [{"identifier": "insertTask", "parameters": "(TaskTable task)", "modifiers": "public", "return": "Long", "signature": "Long insertTask(TaskTable task)", "full_signature": "public Long insertTask(TaskTable task)", "class_method_signature": "TableEntityDao.insertTask(TaskTable task)", "testcase": false, "constructor": false}, {"identifier": "insertTaskTablelist", "parameters": "(List<TaskTable> list)", "modifiers": "public", "return": "int[]", "signature": "int[] insertTaskTablelist(List<TaskTable> list)", "full_signature": "public int[] insertTaskTablelist(List<TaskTable> list)", "class_method_signature": "TableEntityDao.insertTaskTablelist(List<TaskTable> list)", "testcase": false, "constructor": false}, {"identifier": "updateTask", "parameters": "(TaskTable taskTable)", "modifiers": "public", "return": "int", "signature": "int updateTask(TaskTable taskTable)", "full_signature": "public int updateTask(TaskTable taskTable)", "class_method_signature": "TableEntityDao.updateTask(TaskTable taskTable)", "testcase": false, "constructor": false}, {"identifier": "deleteTask", "parameters": "(TaskTable taskTable)", "modifiers": "public", "return": "int", "signature": "int deleteTask(TaskTable taskTable)", "full_signature": "public int deleteTask(TaskTable taskTable)", "class_method_signature": "TableEntityDao.deleteTask(TaskTable taskTable)", "testcase": false, "constructor": false}, {"identifier": "deleteByProjectId", "parameters": "(int id)", "modifiers": "public", "return": "int", "signature": "int deleteByProjectId(int id)", "full_signature": "public int deleteByProjectId(int id)", "class_method_signature": "TableEntityDao.deleteByProjectId(int id)", "testcase": false, "constructor": false}, {"identifier": "getTasksByTaskId", "parameters": "(Long id)", "modifiers": "public", "return": "TaskTable", "signature": "TaskTable getTasksByTaskId(Long id)", "full_signature": "public TaskTable getTasksByTaskId(Long id)", "class_method_signature": "TableEntityDao.getTasksByTaskId(Long id)", "testcase": false, "constructor": false}, {"identifier": "getTaskTableByCustomTableNames", "parameters": "(Long project_id, List<String> names)", "modifiers": "public", "return": "List<TaskTable>", "signature": "List<TaskTable> getTaskTableByCustomTableNames(Long project_id, List<String> names)", "full_signature": "public List<TaskTable> getTaskTableByCustomTableNames(Long project_id, List<String> names)", "class_method_signature": "TableEntityDao.getTaskTableByCustomTableNames(Long project_id, List<String> names)", "testcase": false, "constructor": false}, {"identifier": "getTaskTablesByTableNames", "parameters": "(Long project_id, List<String> names)", "modifiers": "public", "return": "List<TaskTable>", "signature": "List<TaskTable> getTaskTablesByTableNames(Long project_id, List<String> names)", "full_signature": "public List<TaskTable> getTaskTablesByTableNames(Long project_id, List<String> names)", "class_method_signature": "TableEntityDao.getTaskTablesByTableNames(Long project_id, List<String> names)", "testcase": false, "constructor": false}, {"identifier": "getTasksByProjectId", "parameters": "(Long projectId)", "modifiers": "public", "return": "List<TaskTableView>", "signature": "List<TaskTableView> getTasksByProjectId(Long projectId)", "full_signature": "public List<TaskTableView> getTasksByProjectId(Long projectId)", "class_method_signature": "TableEntityDao.getTasksByProjectId(Long projectId)", "testcase": false, "constructor": false}, {"identifier": "getTableEntityTotalCount", "parameters": "(Paging<TaskTable> paging)", "modifiers": "public", "return": "Long", "signature": "Long getTableEntityTotalCount(Paging<TaskTable> paging)", "full_signature": "public Long getTableEntityTotalCount(Paging<TaskTable> paging)", "class_method_signature": "TableEntityDao.getTableEntityTotalCount(Paging<TaskTable> paging)", "testcase": false, "constructor": false}, {"identifier": "findTableEntityPageList", "parameters": "(Paging<TaskTable> paging)", "modifiers": "public", "return": "List<TaskTableView>", "signature": "List<TaskTableView> findTableEntityPageList(Paging<TaskTable> paging)", "full_signature": "public List<TaskTableView> findTableEntityPageList(Paging<TaskTable> paging)", "class_method_signature": "TableEntityDao.findTableEntityPageList(Paging<TaskTable> paging)", "testcase": false, "constructor": false}, {"identifier": "appenWhere", "parameters": "(Paging<TaskTable> paging)", "modifiers": "private", "return": "String", "signature": "String appenWhere(Paging<TaskTable> paging)", "full_signature": "private String appenWhere(Paging<TaskTable> paging)", "class_method_signature": "TableEntityDao.appenWhere(Paging<TaskTable> paging)", "testcase": false, "constructor": false}, {"identifier": "appenCondition", "parameters": "(Paging<TaskTable> paging)", "modifiers": "private", "return": "String", "signature": "String appenCondition(Paging<TaskTable> paging)", "full_signature": "private String appenCondition(Paging<TaskTable> paging)", "class_method_signature": "TableEntityDao.appenCondition(Paging<TaskTable> paging)", "testcase": false, "constructor": false}, {"identifier": "findTableEntitysByDbId", "parameters": "(Long paging)", "modifiers": "public", "return": "List<TaskTableView>", "signature": "List<TaskTableView> findTableEntitysByDbId(Long paging)", "full_signature": "public List<TaskTableView> findTableEntitysByDbId(Long paging)", "class_method_signature": "TableEntityDao.findTableEntitysByDbId(Long paging)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/dao/TableEntityDao.java"}, "focal_method": {"identifier": "getTaskTableByCustomTableNames", "parameters": "(Long project_id, List<String> names)", "modifiers": "public", "return": "List<TaskTable>", "body": "public List<TaskTable> getTaskTableByCustomTableNames(Long project_id, List<String> names) throws SQLException {\n        TaskTable.TaskTableDefinition t = TaskTable.TASKTABLE;\n        SqlBuilder builder = SqlBuilder.selectAllFrom(t).where().allOf(t.customTableName.in(names), t.projectId.eq(project_id)).into(TaskTable.class);\n        return this.getDasClient().query(builder);\n    }", "signature": "List<TaskTable> getTaskTableByCustomTableNames(Long project_id, List<String> names)", "full_signature": "public List<TaskTable> getTaskTableByCustomTableNames(Long project_id, List<String> names)", "class_method_signature": "TableEntityDao.getTaskTableByCustomTableNames(Long project_id, List<String> names)", "testcase": false, "constructor": false, "invocations": ["into", "allOf", "where", "selectAllFrom", "in", "eq", "query", "getDasClient"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}