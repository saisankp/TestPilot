{"test_class": {"identifier": "CsvParameterEntrySerializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CsvParameterEntrySerializer serializer;", "modifier": "private", "type": "CsvParameterEntrySerializer", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "private final DefaultSerializationConfig config = new DefaultSerializationConfig();", "modifier": "private final", "type": "DefaultSerializationConfig", "declarator": "config = new DefaultSerializationConfig()", "var_name": "config"}, {"original_string": "private ParameterEntryBatchLoader entryBatchLoader;", "modifier": "private", "type": "ParameterEntryBatchLoader", "declarator": "entryBatchLoader", "var_name": "entryBatchLoader"}], "file": "smartparam-serializer/src/test/java/org/smartparam/serializer/entries/CsvParameterEntrySerializerTest.java"}, "test_case": {"identifier": "shouldWriteParameterEntryHeaderUsingLevelNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldWriteParameterEntryHeaderUsingLevelNames() throws Exception {\n        // given\n        Level[] levels = new Level[]{\n            level().withName(\"one\").build(),\n            level().withName(\"two\").build()\n        };\n        Parameter parameter = parameter().withLevels(levels).build();\n        StringWriter writer = new StringWriter();\n\n        // when\n        serializer.serialize(config, writer, parameter, entryBatchLoader);\n\n        // then\n        assertThat(writer.toString()).containsOnlyOnce(\"one;two\");\n    }", "signature": "void shouldWriteParameterEntryHeaderUsingLevelNames()", "full_signature": "@Test public void shouldWriteParameterEntryHeaderUsingLevelNames()", "class_method_signature": "CsvParameterEntrySerializerTest.shouldWriteParameterEntryHeaderUsingLevelNames()", "testcase": true, "constructor": false, "invocations": ["build", "withName", "level", "build", "withName", "level", "build", "withLevels", "parameter", "serialize", "containsOnlyOnce", "assertThat", "toString"]}, "focal_class": {"identifier": "CsvParameterEntrySerializer", "superclass": "", "interfaces": "implements ParameterEntrySerializer", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CsvParameterEntrySerializer.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CsvParameterEntrySerializer.class)", "var_name": "logger"}, {"original_string": "private static final int PARAMETER_ENTRY_BATCH_SIZE = 1000;", "modifier": "private static final", "type": "int", "declarator": "PARAMETER_ENTRY_BATCH_SIZE = 1000", "var_name": "PARAMETER_ENTRY_BATCH_SIZE"}], "methods": [{"identifier": "serialize", "parameters": "(SerializationConfig config, Writer writer, Parameter parameter, ParameterEntryBatchLoader parameterEntryLoader)", "modifiers": "@Override public", "return": "void", "signature": "void serialize(SerializationConfig config, Writer writer, Parameter parameter, ParameterEntryBatchLoader parameterEntryLoader)", "full_signature": "@Override public void serialize(SerializationConfig config, Writer writer, Parameter parameter, ParameterEntryBatchLoader parameterEntryLoader)", "class_method_signature": "CsvParameterEntrySerializer.serialize(SerializationConfig config, Writer writer, Parameter parameter, ParameterEntryBatchLoader parameterEntryLoader)", "testcase": false, "constructor": false}, {"identifier": "extractHeader", "parameters": "(Parameter parameter)", "modifiers": "private", "return": "List<String>", "signature": "List<String> extractHeader(Parameter parameter)", "full_signature": "private List<String> extractHeader(Parameter parameter)", "class_method_signature": "CsvParameterEntrySerializer.extractHeader(Parameter parameter)", "testcase": false, "constructor": false}], "file": "smartparam-serializer/src/main/java/org/smartparam/serializer/entries/CsvParameterEntrySerializer.java"}, "focal_method": {"identifier": "serialize", "parameters": "(SerializationConfig config, Writer writer, Parameter parameter, ParameterEntryBatchLoader parameterEntryLoader)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void serialize(SerializationConfig config, Writer writer, Parameter parameter, ParameterEntryBatchLoader parameterEntryLoader) throws ParamSerializationException {\n        CsvListWriter csvWriter = new CsvListWriter(writer, CsvPreferenceBuilder.csvPreference(config));\n\n        try {\n            long startTime = System.currentTimeMillis();\n            logger.debug(\"started parameter entries serialization at {}\", startTime);\n            csvWriter.write(extractHeader(parameter));\n\n            int counter = 0;\n            while (parameterEntryLoader.hasMore()) {\n                for (ParameterEntry entry : parameterEntryLoader.nextBatch(PARAMETER_ENTRY_BATCH_SIZE)) {\n                    csvWriter.write(entry.getLevels());\n                    counter++;\n                    csvWriter.flush();\n                }\n            }\n\n            csvWriter.flush();\n\n            long endTime = System.currentTimeMillis();\n            logger.debug(\"serializing {} parameter entries took {}\", counter, endTime - startTime);\n        } catch (IOException exception) {\n            throw new EntriesCSVSerializationException(exception);\n        } catch (ParamBatchLoadingException batchException) {\n            throw new EntriesCSVSerializationException(batchException);\n        } finally {\n            StreamCloser.closeStream(writer);\n        }\n    }", "signature": "void serialize(SerializationConfig config, Writer writer, Parameter parameter, ParameterEntryBatchLoader parameterEntryLoader)", "full_signature": "@Override public void serialize(SerializationConfig config, Writer writer, Parameter parameter, ParameterEntryBatchLoader parameterEntryLoader)", "class_method_signature": "CsvParameterEntrySerializer.serialize(SerializationConfig config, Writer writer, Parameter parameter, ParameterEntryBatchLoader parameterEntryLoader)", "testcase": false, "constructor": false, "invocations": ["csvPreference", "currentTimeMillis", "debug", "write", "extractHeader", "hasMore", "nextBatch", "write", "getLevels", "flush", "flush", "currentTimeMillis", "debug", "closeStream"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}