{"test_class": {"identifier": "MultiPathMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MultiPathMapper mapper;", "modifier": "private", "type": "MultiPathMapper", "declarator": "mapper", "var_name": "mapper"}], "file": "link-move/src/test/java/com/nhl/link/move/mapper/MultiPathMapperTest.java"}, "test_case": {"identifier": "testKeyForSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testKeyForSource() {\n\n\t\tMap<String, Object> source = new HashMap<>();\n\t\tsource.put(\"a\", \"a1\");\n\t\tsource.put(\"b\", 5);\n\t\tsource.put(\"c\", 6);\n\n\t\tObject key = mapper.keyForSource(new TestRowProxy(Index.forLabels(\"a\", \"b\", \"c\"), \"a1\", 5, 6));\n\t\tassertTrue(key instanceof Map);\n\n\t\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n\t\tMap<String, Object> keyMap = (Map) key;\n\t\tassertEquals(2, keyMap.size());\n\t\tassertEquals(\"a1\", keyMap.get(\"a\"));\n\t\tassertEquals(5, keyMap.get(\"b\"));\n\t}", "signature": "void testKeyForSource()", "full_signature": "@Test public void testKeyForSource()", "class_method_signature": "MultiPathMapperTest.testKeyForSource()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "keyForSource", "forLabels", "assertTrue", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "MultiPathMapper", "superclass": "", "interfaces": "implements Mapper", "fields": [{"original_string": "private final Map<String, Mapper> pathMappers;", "modifier": "private final", "type": "Map<String, Mapper>", "declarator": "pathMappers", "var_name": "pathMappers"}], "methods": [{"identifier": "MultiPathMapper", "parameters": "(Map<String, Mapper> pathMappers)", "modifiers": "public", "return": "", "signature": " MultiPathMapper(Map<String, Mapper> pathMappers)", "full_signature": "public  MultiPathMapper(Map<String, Mapper> pathMappers)", "class_method_signature": "MultiPathMapper.MultiPathMapper(Map<String, Mapper> pathMappers)", "testcase": false, "constructor": true}, {"identifier": "expressionForKey", "parameters": "(Object key)", "modifiers": "@Override public", "return": "Expression", "signature": "Expression expressionForKey(Object key)", "full_signature": "@Override public Expression expressionForKey(Object key)", "class_method_signature": "MultiPathMapper.expressionForKey(Object key)", "testcase": false, "constructor": false}, {"identifier": "keyForSource", "parameters": "(RowProxy source)", "modifiers": "@Override public", "return": "Object", "signature": "Object keyForSource(RowProxy source)", "full_signature": "@Override public Object keyForSource(RowProxy source)", "class_method_signature": "MultiPathMapper.keyForSource(RowProxy source)", "testcase": false, "constructor": false}, {"identifier": "keyForTarget", "parameters": "(DataObject target)", "modifiers": "@Override public", "return": "Object", "signature": "Object keyForTarget(DataObject target)", "full_signature": "@Override public Object keyForTarget(DataObject target)", "class_method_signature": "MultiPathMapper.keyForTarget(DataObject target)", "testcase": false, "constructor": false}], "file": "link-move/src/main/java/com/nhl/link/move/mapper/MultiPathMapper.java"}, "focal_method": {"identifier": "keyForSource", "parameters": "(RowProxy source)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object keyForSource(RowProxy source) {\n        Map<String, Object> keyMap = new HashMap<>(pathMappers.size() * 2);\n        for (Entry<String, Mapper> e : pathMappers.entrySet()) {\n            keyMap.put(e.getKey(), e.getValue().keyForSource(source));\n        }\n\n        return keyMap;\n    }", "signature": "Object keyForSource(RowProxy source)", "full_signature": "@Override public Object keyForSource(RowProxy source)", "class_method_signature": "MultiPathMapper.keyForSource(RowProxy source)", "testcase": false, "constructor": false, "invocations": ["size", "entrySet", "put", "getKey", "keyForSource", "getValue"]}, "repository": {"repo_id": 22876447, "url": "https://github.com/nhl/link-move", "stars": 25, "created": "8/12/2014 12:27:10 PM +00:00", "updates": "2019-12-01T17:30:35+00:00", "fork": "False", "license": "licensed"}}