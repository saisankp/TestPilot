{"test_class": {"identifier": "InvalidBloomFilterPurgatoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String testingFilterName = \"TestingFilterName\";", "modifier": "private static final", "type": "String", "declarator": "testingFilterName = \"TestingFilterName\"", "var_name": "testingFilterName"}], "file": "filter-service-core/src/test/java/cn/leancloud/filter/service/InvalidBloomFilterPurgatoryTest.java"}, "test_case": {"identifier": "testPurge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPurge() {\n        final ExpirableBloomFilterConfig config = new ExpirableBloomFilterConfig();\n        final ZonedDateTime creationTime = ZonedDateTime.now(ZoneOffset.UTC).minus(Duration.ofSeconds(10));\n        final ZonedDateTime expirationTime = creationTime.plusSeconds(5);\n        final GuavaBloomFilterFactory mockedFactory = Mockito.mock(GuavaBloomFilterFactory.class);\n\n        Mockito.when(mockedFactory.createFilter(config))\n                .thenReturn(new GuavaBloomFilter(\n                        Configuration.defaultExpectedInsertions(),\n                        Configuration.defaultFalsePositiveProbability(),\n                        creationTime,\n                        expirationTime,\n                        null));\n\n        final BloomFilterManagerImpl<GuavaBloomFilter, ExpirableBloomFilterConfig> manager = new BloomFilterManagerImpl<>(mockedFactory);\n        final GuavaBloomFilter filter = manager.createFilter(testingFilterName, config).getFilter();\n        final InvalidBloomFilterPurgatory<GuavaBloomFilter> purgatory =\n                new InvalidBloomFilterPurgatory<>(manager);\n\n        assertThat(filter.expired()).isTrue();\n        assertThat(manager.getFilter(testingFilterName)).isSameAs(filter);\n\n        purgatory.purge();\n\n        assertThat(manager.getFilter(testingFilterName)).isNull();\n    }", "signature": "void testPurge()", "full_signature": "@Test public void testPurge()", "class_method_signature": "InvalidBloomFilterPurgatoryTest.testPurge()", "testcase": true, "constructor": false, "invocations": ["minus", "now", "ofSeconds", "plusSeconds", "mock", "thenReturn", "when", "createFilter", "defaultExpectedInsertions", "defaultFalsePositiveProbability", "getFilter", "createFilter", "isTrue", "assertThat", "expired", "isSameAs", "assertThat", "getFilter", "purge", "isNull", "assertThat", "getFilter"]}, "focal_class": {"identifier": "InvalidBloomFilterPurgatory", "superclass": "", "interfaces": "implements Purgatory", "fields": [{"original_string": "private BloomFilterManager<F, ?> manager;", "modifier": "private", "type": "BloomFilterManager<F, ?>", "declarator": "manager", "var_name": "manager"}], "methods": [{"identifier": "InvalidBloomFilterPurgatory", "parameters": "(BloomFilterManager<F, ?> manager)", "modifiers": "public", "return": "", "signature": " InvalidBloomFilterPurgatory(BloomFilterManager<F, ?> manager)", "full_signature": "public  InvalidBloomFilterPurgatory(BloomFilterManager<F, ?> manager)", "class_method_signature": "InvalidBloomFilterPurgatory.InvalidBloomFilterPurgatory(BloomFilterManager<F, ?> manager)", "testcase": false, "constructor": true}, {"identifier": "purge", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void purge()", "full_signature": "@Override public void purge()", "class_method_signature": "InvalidBloomFilterPurgatory.purge()", "testcase": false, "constructor": false}], "file": "filter-service-core/src/main/java/cn/leancloud/filter/service/InvalidBloomFilterPurgatory.java"}, "focal_method": {"identifier": "purge", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void purge() {\n        for (FilterRecord<F> holder : manager) {\n            final F filter = holder.filter();\n            if (!filter.valid()) {\n                final String name = holder.name();\n                manager.remove(name, filter);\n            }\n        }\n    }", "signature": "void purge()", "full_signature": "@Override public void purge()", "class_method_signature": "InvalidBloomFilterPurgatory.purge()", "testcase": false, "constructor": false, "invocations": ["filter", "valid", "name", "remove"]}, "repository": {"repo_id": 217849614, "url": "https://github.com/leancloud/filter-service", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 2797, "license": "licensed"}}