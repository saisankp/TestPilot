{"test_class": {"identifier": "MinerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Map<ByteArrayWrapper, Pair<Transaction, Long>> submittedTxs = Collections.synchronizedMap(\n            new HashMap<ByteArrayWrapper, Pair<Transaction, Long>>());", "modifier": "", "type": "Map<ByteArrayWrapper, Pair<Transaction, Long>>", "declarator": "submittedTxs = Collections.synchronizedMap(\n            new HashMap<ByteArrayWrapper, Pair<Transaction, Long>>())", "var_name": "submittedTxs"}], "file": "ethereumj-core/src/test/java/org/ethereum/mine/MinerTest.java"}, "test_case": {"identifier": "startMiningConsumer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void startMiningConsumer() throws Exception {\n        SysPropConfig2.props.overrideParams(ConfigFactory.parseString(\n                \"peer.listen.port = 30336 \\n\" +\n                        \"peer.privateKey = 3ec771c31cac8c0dba77a69e503765701d3c2bb62435888d4ffa38fed60c445c \\n\" +\n                        \"peer.networkId = 555 \\n\" +\n                        \"peer.active = [\" +\n                        \"{ url = \\\"enode://b23b3b9f38f1d314b27e63c63f3e45a6ea5f82c83f282e2d38f2f01c22165e897656fe2e5f9f18616b81f41cbcf2e9100fc9f8dad099574f3d84cf9623de2fc9@localhost:20301\\\" },\" +\n                        \"{ url = \\\"enode://26ba1aadaf59d7607ad7f437146927d79e80312f026cfa635c6b2ccf2c5d3521f5812ca2beb3b295b14f97110e6448c1c7ff68f14c5328d43a3c62b44143e9b1@localhost:30335\\\" }\" +\n                        \"] \\n\" +\n                        \"sync.enabled = true \\n\" +\n                        \"genesis = genesis-harder.json \\n\" +\n//                        \"genesis = frontier.json \\n\" +\n                        \"database.dir = testDB-1 \\n\"));\n\n        Ethereum ethereum2 = EthereumFactory.createEthereum(SysPropConfig2.props, SysPropConfig2.class);\n\n        final CountDownLatch semaphore = new CountDownLatch(1);\n        ethereum2.addListener(new EthereumListenerAdapter() {\n            @Override\n            public void onBlock(Block block, List<TransactionReceipt> receipts) {\n                System.err.println(\"=== New block: \" + blockInfo(block));\n                System.err.println(block);\n\n                for (Transaction tx : block.getTransactionsList()) {\n//                    Pair<Transaction, Long> remove = submittedTxs.remove(new ByteArrayWrapper(tx.getHash()));\n//                    if (remove == null) {\n//                        System.err.println(\"===== !!! Unknown Tx: \" + tx);\n//                    } else {\n//                        System.out.println(\"===== Tx included in \" + (System.currentTimeMillis() - remove.getRight()) / 1000\n//                                + \" sec: \" + tx);\n//                    }\n\n                }\n\n//                for (Pair<Transaction, Long> pair : submittedTxs.values()) {\n//                    if (System.currentTimeMillis() - pair.getRight() > 60 * 1000) {\n//                        System.err.println(\"==== !!! Lost Tx: \" + (System.currentTimeMillis() - pair.getRight()) / 1000\n//                                + \" sec: \" + pair.getLeft());\n//                    }\n//                }\n            }\n\n            @Override\n            public void onPendingTransactionsReceived(List<Transaction> transactions) {\n                System.err.println(\"=== Tx: \" + transactions);\n            }\n\n            @Override\n            public void onSyncDone(SyncState state) {\n                semaphore.countDown();\n                System.err.println(\"=== Sync Done!\");\n            }\n        });\n\n        System.out.println(\"Waiting for sync...\");\n        semaphore.await();\n\n//        ECKey senderKey = ECKey.fromPrivate(Hex.decode(\"3ec771c31cac8c0dba77a69e503765701d3c2bb62435888d4ffa38fed60c445c\"));\n//        byte[] receiverAddr = Hex.decode(\"31e2e1ed11951c7091dfba62cd4b7145e947219c\");\n        ECKey senderKey = ECKey.fromPrivate(Hex.decode(\"6ef8da380c27cea8fdf7448340ea99e8e2268fc2950d79ed47cbf6f85dc977ec\"));\n        byte[] receiverAddr = Hex.decode(\"5db10750e8caff27f906b41c71b3471057dd2004\");\n\n        for (int i = ethereum2.getRepository().getNonce(senderKey.getAddress()).intValue(), j = 0; j < 200; i++, j++) {\n            {\n                Transaction tx = new Transaction(ByteUtil.intToBytesNoLeadZeroes(i),\n                        ByteUtil.longToBytesNoLeadZeroes(50_000_000_000L), ByteUtil.longToBytesNoLeadZeroes(0xfffff),\n                        receiverAddr, new byte[]{77}, new byte[0]);\n                tx.sign(senderKey);\n                System.out.println(\"=== Submitting tx: \" + tx);\n                ethereum2.submitTransaction(tx);\n\n                submittedTxs.put(new ByteArrayWrapper(tx.getHash()), Pair.of(tx, System.currentTimeMillis()));\n            }\n            Thread.sleep(7000);\n        }\n\n        Thread.sleep(100000000L);\n    }", "signature": "void startMiningConsumer()", "full_signature": "@Test public void startMiningConsumer()", "class_method_signature": "MinerTest.startMiningConsumer()", "testcase": true, "constructor": false, "invocations": ["overrideParams", "parseString", "createEthereum", "addListener", "println", "blockInfo", "println", "getTransactionsList", "println", "countDown", "println", "println", "await", "fromPrivate", "decode", "decode", "intValue", "getNonce", "getRepository", "getAddress", "intToBytesNoLeadZeroes", "longToBytesNoLeadZeroes", "longToBytesNoLeadZeroes", "sign", "println", "submitTransaction", "put", "getHash", "of", "currentTimeMillis", "sleep", "sleep"]}, "focal_class": {"identifier": "Miner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(\"miner\");", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(\"miner\")", "var_name": "logger"}, {"original_string": "private boolean stop = false;", "modifier": "private", "type": "boolean", "declarator": "stop = false", "var_name": "stop"}], "methods": [{"identifier": "mine", "parameters": "(Block newBlock, byte[] difficulty)", "modifiers": "public", "return": "boolean", "signature": "boolean mine(Block newBlock, byte[] difficulty)", "full_signature": "public boolean mine(Block newBlock, byte[] difficulty)", "class_method_signature": "Miner.mine(Block newBlock, byte[] difficulty)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "Miner.stop()", "testcase": false, "constructor": false}, {"identifier": "sleep", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void sleep()", "full_signature": "private void sleep()", "class_method_signature": "Miner.sleep()", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/mine/Miner.java"}, "focal_method": {"identifier": "sleep", "parameters": "()", "modifiers": "private", "return": "void", "body": "private void sleep() {\n        try {\n//            Thread.sleep(1);\n            Thread.sleep(10);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }", "signature": "void sleep()", "full_signature": "private void sleep()", "class_method_signature": "Miner.sleep()", "testcase": false, "constructor": false, "invocations": ["sleep", "printStackTrace"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}