{"test_class": {"identifier": "SimpleSoapExceptionResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SimpleSoapExceptionResolver exceptionResolver;", "modifier": "private", "type": "SimpleSoapExceptionResolver", "declarator": "exceptionResolver", "var_name": "exceptionResolver"}, {"original_string": "private MessageContext messageContext;", "modifier": "private", "type": "MessageContext", "declarator": "messageContext", "var_name": "messageContext"}, {"original_string": "private SoapMessage messageMock;", "modifier": "private", "type": "SoapMessage", "declarator": "messageMock", "var_name": "messageMock"}, {"original_string": "private Soap11Body bodyMock;", "modifier": "private", "type": "Soap11Body", "declarator": "bodyMock", "var_name": "bodyMock"}, {"original_string": "private WebServiceMessageFactory factoryMock;", "modifier": "private", "type": "WebServiceMessageFactory", "declarator": "factoryMock", "var_name": "factoryMock"}], "file": "spring-ws-core/src/test/java/org/springframework/ws/soap/server/endpoint/SimpleSoapExceptionResolverTest.java"}, "test_case": {"identifier": "testResolveExceptionInternal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testResolveExceptionInternal() throws Exception {\n\t\tException exception = new Exception(\"message\");\n\t\texpect(factoryMock.createWebServiceMessage()).andReturn(messageMock);\n\t\texpect(messageMock.getSoapBody()).andReturn(bodyMock);\n\t\texpect(bodyMock.addServerOrReceiverFault(exception.getMessage(), Locale.ENGLISH)).andReturn(null);\n\n\t\treplay(factoryMock, messageMock, bodyMock);\n\n\t\tboolean result = exceptionResolver.resolveExceptionInternal(messageContext, null, exception);\n\t\tAssert.assertTrue(\"Invalid result\", result);\n\n\t\tverify(factoryMock, messageMock, bodyMock);\n\t}", "signature": "void testResolveExceptionInternal()", "full_signature": "@Test public void testResolveExceptionInternal()", "class_method_signature": "SimpleSoapExceptionResolverTest.testResolveExceptionInternal()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "createWebServiceMessage", "andReturn", "expect", "getSoapBody", "andReturn", "expect", "addServerOrReceiverFault", "getMessage", "replay", "resolveExceptionInternal", "assertTrue", "verify"]}, "focal_class": {"identifier": "SimpleSoapExceptionResolver", "superclass": "extends AbstractEndpointExceptionResolver", "interfaces": "", "fields": [{"original_string": "private Locale locale = Locale.ENGLISH;", "modifier": "private", "type": "Locale", "declarator": "locale = Locale.ENGLISH", "var_name": "locale"}], "methods": [{"identifier": "getLocale", "parameters": "()", "modifiers": "public", "return": "Locale", "signature": "Locale getLocale()", "full_signature": "public Locale getLocale()", "class_method_signature": "SimpleSoapExceptionResolver.getLocale()", "testcase": false, "constructor": false}, {"identifier": "setLocale", "parameters": "(Locale locale)", "modifiers": "public", "return": "void", "signature": "void setLocale(Locale locale)", "full_signature": "public void setLocale(Locale locale)", "class_method_signature": "SimpleSoapExceptionResolver.setLocale(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "resolveExceptionInternal", "parameters": "(MessageContext messageContext, Object endpoint, Exception ex)", "modifiers": "@Override protected final", "return": "boolean", "signature": "boolean resolveExceptionInternal(MessageContext messageContext, Object endpoint, Exception ex)", "full_signature": "@Override protected final boolean resolveExceptionInternal(MessageContext messageContext, Object endpoint, Exception ex)", "class_method_signature": "SimpleSoapExceptionResolver.resolveExceptionInternal(MessageContext messageContext, Object endpoint, Exception ex)", "testcase": false, "constructor": false}, {"identifier": "customizeFault", "parameters": "(MessageContext messageContext, Object endpoint, Exception ex, SoapFault fault)", "modifiers": "protected", "return": "void", "signature": "void customizeFault(MessageContext messageContext, Object endpoint, Exception ex, SoapFault fault)", "full_signature": "protected void customizeFault(MessageContext messageContext, Object endpoint, Exception ex, SoapFault fault)", "class_method_signature": "SimpleSoapExceptionResolver.customizeFault(MessageContext messageContext, Object endpoint, Exception ex, SoapFault fault)", "testcase": false, "constructor": false}], "file": "spring-ws-core/src/main/java/org/springframework/ws/soap/server/endpoint/SimpleSoapExceptionResolver.java"}, "focal_method": {"identifier": "resolveExceptionInternal", "parameters": "(MessageContext messageContext, Object endpoint, Exception ex)", "modifiers": "@Override protected final", "return": "boolean", "body": "@Override\n\tprotected final boolean resolveExceptionInternal(MessageContext messageContext, Object endpoint, Exception ex) {\n\t\tAssert.isInstanceOf(SoapMessage.class, messageContext.getResponse(),\n\t\t\t\t\"SimpleSoapExceptionResolver requires a SoapMessage\");\n\t\tSoapMessage response = (SoapMessage) messageContext.getResponse();\n\t\tString faultString = StringUtils.hasLength(ex.getMessage()) ? ex.getMessage() : ex.toString();\n\t\tSoapBody body = response.getSoapBody();\n\t\tSoapFault fault = body.addServerOrReceiverFault(faultString, getLocale());\n\t\tcustomizeFault(messageContext, endpoint, ex, fault);\n\t\treturn true;\n\t}", "signature": "boolean resolveExceptionInternal(MessageContext messageContext, Object endpoint, Exception ex)", "full_signature": "@Override protected final boolean resolveExceptionInternal(MessageContext messageContext, Object endpoint, Exception ex)", "class_method_signature": "SimpleSoapExceptionResolver.resolveExceptionInternal(MessageContext messageContext, Object endpoint, Exception ex)", "testcase": false, "constructor": false, "invocations": ["isInstanceOf", "getResponse", "getResponse", "hasLength", "getMessage", "getMessage", "toString", "getSoapBody", "addServerOrReceiverFault", "getLocale", "customizeFault"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}