{"test_class": {"identifier": "WindowedMapGaugeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Clock clock = mock(Clock.class);", "modifier": "private final", "type": "Clock", "declarator": "clock = mock(Clock.class)", "var_name": "clock"}], "file": "core/src/test/java/com/quantiply/samza/metrics/WindowedMapGaugeTest.java"}, "test_case": {"identifier": "testUpdateWithNull", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void testUpdateWithNull() {\n        WindowedMapGauge<Long> gauge = new WindowedMapGauge<>(\"wtf\", 60000L, Long::max);\n        gauge.update(null, 10L);\n    }", "signature": "void testUpdateWithNull()", "full_signature": "@Test(expected = NullPointerException.class) public void testUpdateWithNull()", "class_method_signature": "WindowedMapGaugeTest.testUpdateWithNull()", "testcase": true, "constructor": false, "invocations": ["update"]}, "focal_class": {"identifier": "WindowedMapGauge", "superclass": "extends Gauge<Map<String,Object>>", "interfaces": "", "fields": [{"original_string": "private final long windowDurationMs;", "modifier": "private final", "type": "long", "declarator": "windowDurationMs", "var_name": "windowDurationMs"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private Map<String,V> curWindowMap;", "modifier": "private", "type": "Map<String,V>", "declarator": "curWindowMap", "var_name": "curWindowMap"}, {"original_string": "private Map<String,V> prevWindowMap;", "modifier": "private", "type": "Map<String,V>", "declarator": "prevWindowMap", "var_name": "prevWindowMap"}, {"original_string": "private Windows windows;", "modifier": "private", "type": "Windows", "declarator": "windows", "var_name": "windows"}, {"original_string": "private final BiFunction<V,V,V> mergeFunc;", "modifier": "private final", "type": "BiFunction<V,V,V>", "declarator": "mergeFunc", "var_name": "mergeFunc"}], "methods": [{"identifier": "WindowedMapGauge", "parameters": "(String name, long windowDurationMs, BiFunction<V,V,V> mergeFunc)", "modifiers": "public", "return": "", "signature": " WindowedMapGauge(String name, long windowDurationMs, BiFunction<V,V,V> mergeFunc)", "full_signature": "public  WindowedMapGauge(String name, long windowDurationMs, BiFunction<V,V,V> mergeFunc)", "class_method_signature": "WindowedMapGauge.WindowedMapGauge(String name, long windowDurationMs, BiFunction<V,V,V> mergeFunc)", "testcase": false, "constructor": true}, {"identifier": "WindowedMapGauge", "parameters": "(String name, long windowDurationMs, BiFunction<V,V,V> mergeFunc, Clock clock)", "modifiers": "public", "return": "", "signature": " WindowedMapGauge(String name, long windowDurationMs, BiFunction<V,V,V> mergeFunc, Clock clock)", "full_signature": "public  WindowedMapGauge(String name, long windowDurationMs, BiFunction<V,V,V> mergeFunc, Clock clock)", "class_method_signature": "WindowedMapGauge.WindowedMapGauge(String name, long windowDurationMs, BiFunction<V,V,V> mergeFunc, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "update", "parameters": "(String src, V val)", "modifiers": "public", "return": "void", "signature": "void update(String src, V val)", "full_signature": "public void update(String src, V val)", "class_method_signature": "WindowedMapGauge.update(String src, V val)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "Map<String,Object>", "signature": "Map<String,Object> getValue()", "full_signature": "@Override public Map<String,Object> getValue()", "class_method_signature": "WindowedMapGauge.getValue()", "testcase": false, "constructor": false}, {"identifier": "getSnapshot", "parameters": "()", "modifiers": "public", "return": "Map<String,V>", "signature": "Map<String,V> getSnapshot()", "full_signature": "public Map<String,V> getSnapshot()", "class_method_signature": "WindowedMapGauge.getSnapshot()", "testcase": false, "constructor": false}, {"identifier": "getWindowStartTimes", "parameters": "(long tsMs)", "modifiers": "public", "return": "Windows", "signature": "Windows getWindowStartTimes(long tsMs)", "full_signature": "public Windows getWindowStartTimes(long tsMs)", "class_method_signature": "WindowedMapGauge.getWindowStartTimes(long tsMs)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/quantiply/samza/metrics/WindowedMapGauge.java"}, "focal_method": {"identifier": "update", "parameters": "(String src, V val)", "modifiers": "public", "return": "void", "body": "public void update(String src, V val){\n        if (src == null) {\n            throw new NullPointerException(\"Null source\");\n        }\n        Windows newWindows = getWindowStartTimes(clock.currentTimeMillis());\n        if (!newWindows.equals(windows)) {\n            prevWindowMap = newWindows.prevStartMs == windows.activeStartMs? curWindowMap : new HashMap<>();\n            curWindowMap = new HashMap<>();\n            windows = newWindows;\n        }\n        curWindowMap.merge(src, val, mergeFunc);\n    }", "signature": "void update(String src, V val)", "full_signature": "public void update(String src, V val)", "class_method_signature": "WindowedMapGauge.update(String src, V val)", "testcase": false, "constructor": false, "invocations": ["getWindowStartTimes", "currentTimeMillis", "equals", "merge"]}, "repository": {"repo_id": 23237318, "url": "https://github.com/quantiply/rico", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 5128, "license": "licensed"}}