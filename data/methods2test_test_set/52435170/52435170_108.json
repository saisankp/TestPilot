{"test_class": {"identifier": "SqlDbFeatureExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder tmpFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "tmpFolder = new TemporaryFolder()", "var_name": "tmpFolder"}, {"original_string": "@Mock\n    private FeatureResolver featureResolver;", "modifier": "@Mock\n    private", "type": "FeatureResolver", "declarator": "featureResolver", "var_name": "featureResolver"}, {"original_string": "@Mock\n    private IDatabaseConnection connection;", "modifier": "@Mock\n    private", "type": "IDatabaseConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock\n    private Connection dbConnection;", "modifier": "@Mock\n    private", "type": "Connection", "declarator": "dbConnection", "var_name": "dbConnection"}, {"original_string": "@Mock\n    private Statement statement;", "modifier": "@Mock\n    private", "type": "Statement", "declarator": "statement", "var_name": "statement"}, {"original_string": "@Mock\n    private CleanupStrategy cleanupStrategy;", "modifier": "@Mock\n    private", "type": "CleanupStrategy", "declarator": "cleanupStrategy", "var_name": "cleanupStrategy"}, {"original_string": "@Mock\n    private DataSeedStrategy dataSeedStrategy;", "modifier": "@Mock\n    private", "type": "DataSeedStrategy", "declarator": "dataSeedStrategy", "var_name": "dataSeedStrategy"}, {"original_string": "@Mock\n    private CleanupStrategyExecutor<IDatabaseConnection, IDataSet> cleanupStrategyExecutor;", "modifier": "@Mock\n    private", "type": "CleanupStrategyExecutor<IDatabaseConnection, IDataSet>", "declarator": "cleanupStrategyExecutor", "var_name": "cleanupStrategyExecutor"}, {"original_string": "@Mock\n    private DatabaseOperation operation;", "modifier": "@Mock\n    private", "type": "DatabaseOperation", "declarator": "operation", "var_name": "operation"}, {"original_string": "@Mock\n    private ExpectedDataSets expectedDataSets;", "modifier": "@Mock\n    private", "type": "ExpectedDataSets", "declarator": "expectedDataSets", "var_name": "expectedDataSets"}, {"original_string": "private SqlDbFeatureExecutor featureExecutor;", "modifier": "private", "type": "SqlDbFeatureExecutor", "declarator": "featureExecutor", "var_name": "featureExecutor"}], "file": "rdbms/src/test/java/eu/drus/jpa/unit/sql/dbunit/SqlDbFeatureExecutorTest.java"}, "test_case": {"identifier": "testVerifyDataAfterFeatureExecution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVerifyDataAfterFeatureExecution() throws DbFeatureException, SQLException, DataSetException {\n        // GIVEN\n        final IDataSet currentDs = mock(IDataSet.class);\n        when(currentDs.getTableNames()).thenReturn(new String[] {});\n        when(connection.createDataSet()).thenReturn(currentDs);\n        when(expectedDataSets.strict()).thenReturn(Boolean.FALSE);\n        when(expectedDataSets.value()).thenReturn(new String[] {});\n        when(expectedDataSets.orderBy()).thenReturn(new String[] {});\n        when(expectedDataSets.excludeColumns()).thenReturn(new String[] {});\n\n        // WHEN\n        final DbFeature<IDatabaseConnection> feature = featureExecutor.createVerifyDataAfterFeature(expectedDataSets);\n        assertThat(feature, notNullValue());\n        feature.execute(connection);\n\n        // THEN\n        verify(connection).createDataSet();\n        verifyNoMoreInteractions(connection);\n    }", "signature": "void testVerifyDataAfterFeatureExecution()", "full_signature": "@Test public void testVerifyDataAfterFeatureExecution()", "class_method_signature": "SqlDbFeatureExecutorTest.testVerifyDataAfterFeatureExecution()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getTableNames", "thenReturn", "when", "createDataSet", "thenReturn", "when", "strict", "thenReturn", "when", "value", "thenReturn", "when", "orderBy", "thenReturn", "when", "excludeColumns", "createVerifyDataAfterFeature", "assertThat", "notNullValue", "execute", "createDataSet", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "SqlDbFeatureExecutor", "superclass": "extends AbstractDbFeatureExecutor<IDataSet, IDatabaseConnection>", "interfaces": "", "fields": [{"original_string": "private StrategyProviderFactory providerFactory;", "modifier": "private", "type": "StrategyProviderFactory", "declarator": "providerFactory", "var_name": "providerFactory"}], "methods": [{"identifier": "SqlDbFeatureExecutor", "parameters": "(final FeatureResolver featureResolver)", "modifiers": "public", "return": "", "signature": " SqlDbFeatureExecutor(final FeatureResolver featureResolver)", "full_signature": "public  SqlDbFeatureExecutor(final FeatureResolver featureResolver)", "class_method_signature": "SqlDbFeatureExecutor.SqlDbFeatureExecutor(final FeatureResolver featureResolver)", "testcase": false, "constructor": true}, {"identifier": "mergeDataSets", "parameters": "(final List<IDataSet> dataSets)", "modifiers": "private static", "return": "IDataSet", "signature": "IDataSet mergeDataSets(final List<IDataSet> dataSets)", "full_signature": "private static IDataSet mergeDataSets(final List<IDataSet> dataSets)", "class_method_signature": "SqlDbFeatureExecutor.mergeDataSets(final List<IDataSet> dataSets)", "testcase": false, "constructor": false}, {"identifier": "toUri", "parameters": "(final String path)", "modifiers": "private static", "return": "URI", "signature": "URI toUri(final String path)", "full_signature": "private static URI toUri(final String path)", "class_method_signature": "SqlDbFeatureExecutor.toUri(final String path)", "testcase": false, "constructor": false}, {"identifier": "loadDataSets", "parameters": "(final List<String> paths)", "modifiers": "@Override protected", "return": "List<IDataSet>", "signature": "List<IDataSet> loadDataSets(final List<String> paths)", "full_signature": "@Override protected List<IDataSet> loadDataSets(final List<String> paths)", "class_method_signature": "SqlDbFeatureExecutor.loadDataSets(final List<String> paths)", "testcase": false, "constructor": false}, {"identifier": "createCleanupFeature", "parameters": "(final CleanupStrategy cleanupStrategy,\n            final List<IDataSet> initialDataSets)", "modifiers": "@Override protected", "return": "DbFeature<IDatabaseConnection>", "signature": "DbFeature<IDatabaseConnection> createCleanupFeature(final CleanupStrategy cleanupStrategy,\n            final List<IDataSet> initialDataSets)", "full_signature": "@Override protected DbFeature<IDatabaseConnection> createCleanupFeature(final CleanupStrategy cleanupStrategy,\n            final List<IDataSet> initialDataSets)", "class_method_signature": "SqlDbFeatureExecutor.createCleanupFeature(final CleanupStrategy cleanupStrategy,\n            final List<IDataSet> initialDataSets)", "testcase": false, "constructor": false}, {"identifier": "createApplyCustomScriptFeature", "parameters": "(final List<String> scriptPaths)", "modifiers": "@Override protected", "return": "DbFeature<IDatabaseConnection>", "signature": "DbFeature<IDatabaseConnection> createApplyCustomScriptFeature(final List<String> scriptPaths)", "full_signature": "@Override protected DbFeature<IDatabaseConnection> createApplyCustomScriptFeature(final List<String> scriptPaths)", "class_method_signature": "SqlDbFeatureExecutor.createApplyCustomScriptFeature(final List<String> scriptPaths)", "testcase": false, "constructor": false}, {"identifier": "createSeedDataFeature", "parameters": "(final DataSeedStrategy dataSeedStrategy,\n            final List<IDataSet> initialDataSets)", "modifiers": "@Override protected", "return": "DbFeature<IDatabaseConnection>", "signature": "DbFeature<IDatabaseConnection> createSeedDataFeature(final DataSeedStrategy dataSeedStrategy,\n            final List<IDataSet> initialDataSets)", "full_signature": "@Override protected DbFeature<IDatabaseConnection> createSeedDataFeature(final DataSeedStrategy dataSeedStrategy,\n            final List<IDataSet> initialDataSets)", "class_method_signature": "SqlDbFeatureExecutor.createSeedDataFeature(final DataSeedStrategy dataSeedStrategy,\n            final List<IDataSet> initialDataSets)", "testcase": false, "constructor": false}, {"identifier": "createVerifyDataAfterFeature", "parameters": "(final ExpectedDataSets expectedDataSets)", "modifiers": "@Override protected", "return": "DbFeature<IDatabaseConnection>", "signature": "DbFeature<IDatabaseConnection> createVerifyDataAfterFeature(final ExpectedDataSets expectedDataSets)", "full_signature": "@Override protected DbFeature<IDatabaseConnection> createVerifyDataAfterFeature(final ExpectedDataSets expectedDataSets)", "class_method_signature": "SqlDbFeatureExecutor.createVerifyDataAfterFeature(final ExpectedDataSets expectedDataSets)", "testcase": false, "constructor": false}, {"identifier": "getColumnFilter", "parameters": "(final ExpectedDataSets expectedDataSets)", "modifiers": "private", "return": "HashSet<Class<? extends IColumnFilter>>", "signature": "HashSet<Class<? extends IColumnFilter>> getColumnFilter(final ExpectedDataSets expectedDataSets)", "full_signature": "private HashSet<Class<? extends IColumnFilter>> getColumnFilter(final ExpectedDataSets expectedDataSets)", "class_method_signature": "SqlDbFeatureExecutor.getColumnFilter(final ExpectedDataSets expectedDataSets)", "testcase": false, "constructor": false}, {"identifier": "executeScript", "parameters": "(final String script, final Connection connection)", "modifiers": "private", "return": "void", "signature": "void executeScript(final String script, final Connection connection)", "full_signature": "private void executeScript(final String script, final Connection connection)", "class_method_signature": "SqlDbFeatureExecutor.executeScript(final String script, final Connection connection)", "testcase": false, "constructor": false}], "file": "rdbms/src/main/java/eu/drus/jpa/unit/sql/dbunit/SqlDbFeatureExecutor.java"}, "focal_method": {"identifier": "createVerifyDataAfterFeature", "parameters": "(final ExpectedDataSets expectedDataSets)", "modifiers": "@Override protected", "return": "DbFeature<IDatabaseConnection>", "body": "@Override\n    protected DbFeature<IDatabaseConnection> createVerifyDataAfterFeature(final ExpectedDataSets expectedDataSets) {\n        return (final IDatabaseConnection connection) -> {\n            try {\n                final IDataSet currentDataSet = connection.createDataSet();\n                final IDataSet expectedDataSet = mergeDataSets(loadDataSets(Arrays.asList(expectedDataSets.value())));\n\n                final DataSetComparator dataSetComparator = new DataSetComparator(expectedDataSets.orderBy(),\n                        expectedDataSets.excludeColumns(), expectedDataSets.strict(), getColumnFilter(expectedDataSets));\n\n                final AssertionErrorCollector errorCollector = new AssertionErrorCollector();\n                dataSetComparator.compare(currentDataSet, expectedDataSet, errorCollector);\n\n                errorCollector.report();\n            } catch (final SQLException | DatabaseUnitException e) {\n                throw new DbFeatureException(\"Could not execute DB contents verification feature\", e);\n            }\n        };\n    }", "signature": "DbFeature<IDatabaseConnection> createVerifyDataAfterFeature(final ExpectedDataSets expectedDataSets)", "full_signature": "@Override protected DbFeature<IDatabaseConnection> createVerifyDataAfterFeature(final ExpectedDataSets expectedDataSets)", "class_method_signature": "SqlDbFeatureExecutor.createVerifyDataAfterFeature(final ExpectedDataSets expectedDataSets)", "testcase": false, "constructor": false, "invocations": ["createDataSet", "mergeDataSets", "loadDataSets", "asList", "value", "orderBy", "excludeColumns", "strict", "getColumnFilter", "compare", "report"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}