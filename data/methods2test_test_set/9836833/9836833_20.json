{"test_class": {"identifier": "TypesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic JUnitSoftAssertions softly = new JUnitSoftAssertions();", "modifier": "@Rule\n\tpublic", "type": "JUnitSoftAssertions", "declarator": "softly = new JUnitSoftAssertions()", "var_name": "softly"}], "file": "restx-common/src/test/java/restx/common/TypesTest.java"}, "test_case": {"identifier": "getRawType_should_return_the_class_of_array_types", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getRawType_should_return_the_class_of_array_types() throws NoSuchMethodException {\n\t\tsoftly.assertThat(Types.getRawType(new TypeReference<List<String>[]>() {}.getType()))\n\t\t\t\t.isEqualTo(List[].class);\n\t}", "signature": "void getRawType_should_return_the_class_of_array_types()", "full_signature": "@Test public void getRawType_should_return_the_class_of_array_types()", "class_method_signature": "TypesTest.getRawType_should_return_the_class_of_array_types()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getRawType", "getType"]}, "focal_class": {"identifier": "Types", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "newParameterizedType", "parameters": "(final Class<?> rawType, final Type... arguments)", "modifiers": "public static", "return": "ParameterizedType", "signature": "ParameterizedType newParameterizedType(final Class<?> rawType, final Type... arguments)", "full_signature": "public static ParameterizedType newParameterizedType(final Class<?> rawType, final Type... arguments)", "class_method_signature": "Types.newParameterizedType(final Class<?> rawType, final Type... arguments)", "testcase": false, "constructor": false}, {"identifier": "getRawType", "parameters": "(Type type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getRawType(Type type)", "full_signature": "public static Class<?> getRawType(Type type)", "class_method_signature": "Types.getRawType(Type type)", "testcase": false, "constructor": false}, {"identifier": "isAssignableFrom", "parameters": "(Type t1, Type t2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAssignableFrom(Type t1, Type t2)", "full_signature": "public static boolean isAssignableFrom(Type t1, Type t2)", "class_method_signature": "Types.isAssignableFrom(Type t1, Type t2)", "testcase": false, "constructor": false}], "file": "restx-common/src/main/java/restx/common/Types.java"}, "focal_method": {"identifier": "getRawType", "parameters": "(Type type)", "modifiers": "public static", "return": "Class<?>", "body": "public static Class<?> getRawType(Type type) {\n\t\tif (type instanceof Class<?>) {\n\t\t\treturn (Class<?>) type;\n\t\t}\n\n\t\tif (type instanceof ParameterizedType) {\n\t\t\tType rawType = ((ParameterizedType) type).getRawType();\n\t\t\tif (rawType instanceof Class<?>) {\n\t\t\t\treturn (Class<?>) rawType;\n\t\t\t}\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\tformat(\"getRawType of the parameterized type %s did not return a class, but %s\", type, rawType));\n\t\t}\n\n\t\tif (type instanceof GenericArrayType) {\n\t\t\tType componentType = ((GenericArrayType) type).getGenericComponentType();\n\t\t\treturn Array.newInstance(getRawType(componentType), 0).getClass();\n\t\t}\n\n\t\tthrow new IllegalArgumentException(\n\t\t\t\tformat(\"Unhandled type %s, unable to extract its raw type.\", type));\n\t}", "signature": "Class<?> getRawType(Type type)", "full_signature": "public static Class<?> getRawType(Type type)", "class_method_signature": "Types.getRawType(Type type)", "testcase": false, "constructor": false, "invocations": ["getRawType", "format", "getGenericComponentType", "getClass", "newInstance", "getRawType", "format"]}, "repository": {"repo_id": 9836833, "url": "https://github.com/restx/restx", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 433, "size": 7896, "license": "licensed"}}