{"test_class": {"identifier": "TracingStatementInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock JdbcConnection connection;", "modifier": "@Mock", "type": "JdbcConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock Span span;", "modifier": "@Mock", "type": "Span", "declarator": "span", "var_name": "span"}, {"original_string": "String url = \"jdbc:mysql://myhost:5555/mydatabase\";", "modifier": "", "type": "String", "declarator": "url = \"jdbc:mysql://myhost:5555/mydatabase\"", "var_name": "url"}], "file": "instrumentation/mysql6/src/test/java/brave/mysql6/TracingStatementInterceptorTest.java"}, "test_case": {"identifier": "parseServerIpAndPort_serviceNameFromDatabaseName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void parseServerIpAndPort_serviceNameFromDatabaseName() throws SQLException {\n    setupAndReturnPropertiesForHost(\"1.2.3.4\");\n    when(connection.getCatalog()).thenReturn(\"mydatabase\");\n\n    TracingStatementInterceptor.parseServerIpAndPort(connection, span);\n\n    verify(span).remoteServiceName(\"mysql-mydatabase\");\n    verify(span).remoteIpAndPort(\"1.2.3.4\", 5555);\n  }", "signature": "void parseServerIpAndPort_serviceNameFromDatabaseName()", "full_signature": "@Test public void parseServerIpAndPort_serviceNameFromDatabaseName()", "class_method_signature": "TracingStatementInterceptorTest.parseServerIpAndPort_serviceNameFromDatabaseName()", "testcase": true, "constructor": false, "invocations": ["setupAndReturnPropertiesForHost", "thenReturn", "when", "getCatalog", "parseServerIpAndPort", "remoteServiceName", "verify", "remoteIpAndPort", "verify"]}, "focal_class": {"identifier": "TracingStatementInterceptor", "superclass": "", "interfaces": "implements StatementInterceptor", "fields": [{"original_string": "private MysqlConnection connection;", "modifier": "private", "type": "MysqlConnection", "declarator": "connection", "var_name": "connection"}], "methods": [{"identifier": "preProcess", "parameters": "(String sql, Statement interceptedStatement)", "modifiers": "@Override public", "return": "T", "signature": "T preProcess(String sql, Statement interceptedStatement)", "full_signature": "@Override public T preProcess(String sql, Statement interceptedStatement)", "class_method_signature": "TracingStatementInterceptor.preProcess(String sql, Statement interceptedStatement)", "testcase": false, "constructor": false}, {"identifier": "postProcess", "parameters": "(String sql, Statement interceptedStatement,\n    T originalResultSet, int warningCount, boolean noIndexUsed, boolean noGoodIndexUsed,\n    Exception error)", "modifiers": "@Override public", "return": "T", "signature": "T postProcess(String sql, Statement interceptedStatement,\n    T originalResultSet, int warningCount, boolean noIndexUsed, boolean noGoodIndexUsed,\n    Exception error)", "full_signature": "@Override public T postProcess(String sql, Statement interceptedStatement,\n    T originalResultSet, int warningCount, boolean noIndexUsed, boolean noGoodIndexUsed,\n    Exception error)", "class_method_signature": "TracingStatementInterceptor.postProcess(String sql, Statement interceptedStatement,\n    T originalResultSet, int warningCount, boolean noIndexUsed, boolean noGoodIndexUsed,\n    Exception error)", "testcase": false, "constructor": false}, {"identifier": "parseServerIpAndPort", "parameters": "(MysqlConnection connection, Span span)", "modifiers": "static", "return": "void", "signature": "void parseServerIpAndPort(MysqlConnection connection, Span span)", "full_signature": "static void parseServerIpAndPort(MysqlConnection connection, Span span)", "class_method_signature": "TracingStatementInterceptor.parseServerIpAndPort(MysqlConnection connection, Span span)", "testcase": false, "constructor": false}, {"identifier": "getDatabaseName", "parameters": "(MysqlConnection connection)", "modifiers": "private static", "return": "String", "signature": "String getDatabaseName(MysqlConnection connection)", "full_signature": "private static String getDatabaseName(MysqlConnection connection)", "class_method_signature": "TracingStatementInterceptor.getDatabaseName(MysqlConnection connection)", "testcase": false, "constructor": false}, {"identifier": "getHost", "parameters": "(MysqlConnection connection)", "modifiers": "private static", "return": "String", "signature": "String getHost(MysqlConnection connection)", "full_signature": "private static String getHost(MysqlConnection connection)", "class_method_signature": "TracingStatementInterceptor.getHost(MysqlConnection connection)", "testcase": false, "constructor": false}, {"identifier": "executeTopLevelOnly", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean executeTopLevelOnly()", "full_signature": "@Override public boolean executeTopLevelOnly()", "class_method_signature": "TracingStatementInterceptor.executeTopLevelOnly()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(MysqlConnection mysqlConnection, Properties properties,\n    Log log)", "modifiers": "@Override public", "return": "StatementInterceptor", "signature": "StatementInterceptor init(MysqlConnection mysqlConnection, Properties properties,\n    Log log)", "full_signature": "@Override public StatementInterceptor init(MysqlConnection mysqlConnection, Properties properties,\n    Log log)", "class_method_signature": "TracingStatementInterceptor.init(MysqlConnection mysqlConnection, Properties properties,\n    Log log)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "TracingStatementInterceptor.destroy()", "testcase": false, "constructor": false}], "file": "instrumentation/mysql6/src/main/java/brave/mysql6/TracingStatementInterceptor.java"}, "focal_method": {"identifier": "parseServerIpAndPort", "parameters": "(MysqlConnection connection, Span span)", "modifiers": "static", "return": "void", "body": "static void parseServerIpAndPort(MysqlConnection connection, Span span) {\n    try {\n      URI url = URI.create(connection.getURL().substring(5)); // strip \"jdbc:\"\n      String remoteServiceName = connection.getProperties().getProperty(\"zipkinServiceName\");\n      if (remoteServiceName == null || \"\".equals(remoteServiceName)) {\n        String databaseName = getDatabaseName(connection);\n        if (databaseName != null && !databaseName.isEmpty()) {\n          remoteServiceName = \"mysql-\" + databaseName;\n        } else {\n          remoteServiceName = \"mysql\";\n        }\n      }\n      span.remoteServiceName(remoteServiceName);\n      String host = getHost(connection);\n      if (host != null) {\n        span.remoteIpAndPort(host, url.getPort() == -1 ? 3306 : url.getPort());\n      }\n    } catch (Exception e) {\n      // remote address is optional\n    }\n  }", "signature": "void parseServerIpAndPort(MysqlConnection connection, Span span)", "full_signature": "static void parseServerIpAndPort(MysqlConnection connection, Span span)", "class_method_signature": "TracingStatementInterceptor.parseServerIpAndPort(MysqlConnection connection, Span span)", "testcase": false, "constructor": false, "invocations": ["create", "substring", "getURL", "getProperty", "getProperties", "equals", "getDatabaseName", "isEmpty", "remoteServiceName", "getHost", "remoteIpAndPort", "getPort", "getPort"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}