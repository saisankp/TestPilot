{"test_class": {"identifier": "ComplexityInvariantDistanceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "EuclideanDistance euclideanDistance;", "modifier": "", "type": "EuclideanDistance", "declarator": "euclideanDistance", "var_name": "euclideanDistance"}, {"original_string": "StretchingComplexity stretchingComplexity;", "modifier": "", "type": "StretchingComplexity", "declarator": "stretchingComplexity", "var_name": "stretchingComplexity"}], "file": "JAICore/jaicore-basic/src/test/java/ai/libs/jaicore/basic/metric/ComplexityInvariantDistanceTest.java"}, "test_case": {"identifier": "testCorrectnessForDistanceCalculation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCorrectnessForDistanceCalculation() {\n        // Input.\n        double[] timeSeries1 = { 1, 1, 1, 1, 1, 1 }; // complexity 5\n        double[] timeSeries2 = { .0, Math.sqrt(8), .0, Math.sqrt(8), .0, Math.sqrt(8) }; // complexity 15\n        // Expectation.\n        double expectation = euclideanDistance.distance(timeSeries1, timeSeries2) * (15 / 5);\n\n        ComplexityInvariantDistance cid = new ComplexityInvariantDistance(euclideanDistance, stretchingComplexity);\n        double distance = cid.distance(timeSeries1, timeSeries2);\n\n        assertEquals(expectation, distance, 0.001);\n    }", "signature": "void testCorrectnessForDistanceCalculation()", "full_signature": "@Test public void testCorrectnessForDistanceCalculation()", "class_method_signature": "ComplexityInvariantDistanceTest.testCorrectnessForDistanceCalculation()", "testcase": true, "constructor": false, "invocations": ["sqrt", "sqrt", "sqrt", "distance", "distance", "assertEquals"]}, "focal_class": {"identifier": "ComplexityInvariantDistance", "superclass": "", "interfaces": "implements IDistanceMetric", "fields": [{"original_string": "private IDistanceMetric distanceMeasure;", "modifier": "private", "type": "IDistanceMetric", "declarator": "distanceMeasure", "var_name": "distanceMeasure"}, {"original_string": "private ITimeSeriesComplexity complexityMeasure;", "modifier": "private", "type": "ITimeSeriesComplexity", "declarator": "complexityMeasure", "var_name": "complexityMeasure"}], "methods": [{"identifier": "ComplexityInvariantDistance", "parameters": "(final IDistanceMetric distanceMeasure, final ITimeSeriesComplexity complexityMeasure)", "modifiers": "", "return": "", "signature": " ComplexityInvariantDistance(final IDistanceMetric distanceMeasure, final ITimeSeriesComplexity complexityMeasure)", "full_signature": "  ComplexityInvariantDistance(final IDistanceMetric distanceMeasure, final ITimeSeriesComplexity complexityMeasure)", "class_method_signature": "ComplexityInvariantDistance.ComplexityInvariantDistance(final IDistanceMetric distanceMeasure, final ITimeSeriesComplexity complexityMeasure)", "testcase": false, "constructor": true}, {"identifier": "distance", "parameters": "(final double[] a, final double[] b)", "modifiers": "@Override public", "return": "double", "signature": "double distance(final double[] a, final double[] b)", "full_signature": "@Override public double distance(final double[] a, final double[] b)", "class_method_signature": "ComplexityInvariantDistance.distance(final double[] a, final double[] b)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-basic/src/main/java/ai/libs/jaicore/basic/metric/ComplexityInvariantDistance.java"}, "focal_method": {"identifier": "distance", "parameters": "(final double[] a, final double[] b)", "modifiers": "@Override public", "return": "double", "body": "@Override\n\tpublic double distance(final double[] a, final double[] b) {\n\t\tdouble complexityA = this.complexityMeasure.complexity(a);\n\t\tdouble complexityB = this.complexityMeasure.complexity(b);\n\t\tdouble complexityCorrectionFactor = Math.max(complexityA, complexityB) / Math.min(complexityA, complexityB);\n\n\t\treturn this.distanceMeasure.distance(a, b) * complexityCorrectionFactor;\n\t}", "signature": "double distance(final double[] a, final double[] b)", "full_signature": "@Override public double distance(final double[] a, final double[] b)", "class_method_signature": "ComplexityInvariantDistance.distance(final double[] a, final double[] b)", "testcase": false, "constructor": false, "invocations": ["complexity", "complexity", "max", "min", "distance"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}