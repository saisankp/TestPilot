{"test_class": {"identifier": "XmlConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NOT_USED = \"not used\";", "modifier": "private static final", "type": "String", "declarator": "NOT_USED = \"not used\"", "var_name": "NOT_USED"}, {"original_string": "private XmlConverter underTest;", "modifier": "private", "type": "XmlConverter", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/sequence/formatters/helper/converter/XmlConverterTest.java"}, "test_case": {"identifier": "testGetJsonFormWithValidJsonShouldReturnJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetJsonFormWithValidJsonShouldReturnJson() {\n        //GIVEN in setup\n        //WHEN\n        String json = underTest.convert(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><root><field1>value1</field1></root>\", NOT_USED);\n        //THEN\n        assertEquals(json, \"{\\\"root\\\":{\\\"field1\\\":\\\"value1\\\"}}\");\n    }", "signature": "void testGetJsonFormWithValidJsonShouldReturnJson()", "full_signature": "@Test public void testGetJsonFormWithValidJsonShouldReturnJson()", "class_method_signature": "XmlConverterTest.testGetJsonFormWithValidJsonShouldReturnJson()", "testcase": true, "constructor": false, "invocations": ["convert", "assertEquals"]}, "focal_class": {"identifier": "XmlConverter", "superclass": "", "interfaces": "implements Converter", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(XmlConverter.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(XmlConverter.class)", "var_name": "logger"}], "methods": [{"identifier": "convert", "parameters": "(final String xml, final String name)", "modifiers": "@Override public", "return": "String", "signature": "String convert(final String xml, final String name)", "full_signature": "@Override public String convert(final String xml, final String name)", "class_method_signature": "XmlConverter.convert(final String xml, final String name)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/sequence/formatters/helper/converter/XmlConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(final String xml, final String name)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String convert(final String xml, final String name) {\n        String json;\n        try {\n            json = XML.toJSONObject(xml).toString();\n        } catch (JSONException e) {\n            logger.debug(\"Couldn't convert to JSON the following XML: \" + xml, e);\n            json = \"\";\n        }\n        return json;\n    }", "signature": "String convert(final String xml, final String name)", "full_signature": "@Override public String convert(final String xml, final String name)", "class_method_signature": "XmlConverter.convert(final String xml, final String name)", "testcase": false, "constructor": false, "invocations": ["toString", "toJSONObject", "debug"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}