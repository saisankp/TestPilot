{"test_class": {"identifier": "TestTextServer", "superclass": "", "interfaces": "implements TextListener", "fields": [{"original_string": "private static final int PORT = 4711;", "modifier": "private static final", "type": "int", "declarator": "PORT = 4711", "var_name": "PORT"}, {"original_string": "private TextServer server;", "modifier": "private", "type": "TextServer", "declarator": "server", "var_name": "server"}, {"original_string": "private TextConnectionInformation info;", "modifier": "private", "type": "TextConnectionInformation", "declarator": "info", "var_name": "info"}, {"original_string": "private Socket socket;", "modifier": "private", "type": "Socket", "declarator": "socket", "var_name": "socket"}, {"original_string": "private final Object lock = new Object();", "modifier": "private final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}, {"original_string": "private TextMessage rcvd;", "modifier": "private", "type": "TextMessage", "declarator": "rcvd", "var_name": "rcvd"}], "file": "org.jvoicexml.client.text/src/test/java/org/jvoicexml/client/text/TestTextServer.java"}, "test_case": {"identifier": "testSendInput", "parameters": "()", "modifiers": "@Test(timeout = 5000) public", "return": "void", "body": "@Test(timeout = 5000)\n    public void testSendInput() throws Exception {\n        Assert.assertTrue(server.isStarted());\n        String input = \"Test123\";\n        final Thread thread = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    synchronized (lock) {\n                        lock.notifyAll();\n                    }\n                    final InputStream in = socket.getInputStream();\n                    System.out.println(\"1\");\n                    rcvd = TextMessage.parseDelimitedFrom(in);\n                    System.out.println(2);\n                    synchronized (lock) {\n                        lock.notifyAll();\n                    }\n                } catch (Exception e) {\n                    Assert.fail(e.getMessage());\n                }\n            }\n        };\n        thread.start();\n        synchronized (lock) {\n            lock.wait();\n        }\n        server.sendInput(input);\n        if (thread.isAlive()) {\n            synchronized (lock) {\n                lock.wait();\n            }\n        }\n        final TextMessage message = TextMessage.newBuilder()\n                .setType(TextMessageType.USER).setData(input)\n                .setSequenceNumber(0).build();\n        Assert.assertEquals(message, rcvd);\n    }", "signature": "void testSendInput()", "full_signature": "@Test(timeout = 5000) public void testSendInput()", "class_method_signature": "TestTextServer.testSendInput()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isStarted", "notifyAll", "getInputStream", "println", "parseDelimitedFrom", "println", "notifyAll", "fail", "getMessage", "start", "wait", "sendInput", "isAlive", "wait", "build", "setSequenceNumber", "setData", "setType", "newBuilder", "assertEquals"]}, "focal_class": {"identifier": "TextServer", "superclass": "extends Thread", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LogManager.getLogger(TextServer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager.getLogger(TextServer.class)", "var_name": "LOGGER"}, {"original_string": "private final int port;", "modifier": "private final", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "private final String host;", "modifier": "private final", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "private InetAddress address;", "modifier": "private", "type": "InetAddress", "declarator": "address", "var_name": "address"}, {"original_string": "private ServerSocket server;", "modifier": "private", "type": "ServerSocket", "declarator": "server", "var_name": "server"}, {"original_string": "private URI callingId;", "modifier": "private", "type": "URI", "declarator": "callingId", "var_name": "callingId"}, {"original_string": "private Socket client;", "modifier": "private", "type": "Socket", "declarator": "client", "var_name": "client"}, {"original_string": "private URI calledId;", "modifier": "private", "type": "URI", "declarator": "calledId", "var_name": "calledId"}, {"original_string": "private OutputStream out;", "modifier": "private", "type": "OutputStream", "declarator": "out", "var_name": "out"}, {"original_string": "private final Object lock;", "modifier": "private final", "type": "Object", "declarator": "lock", "var_name": "lock"}, {"original_string": "private final Object connectionLock;", "modifier": "private final", "type": "Object", "declarator": "connectionLock", "var_name": "connectionLock"}, {"original_string": "private final Object startedLock;", "modifier": "private final", "type": "Object", "declarator": "startedLock", "var_name": "startedLock"}, {"original_string": "private final Collection<TextListener> listener;", "modifier": "private final", "type": "Collection<TextListener>", "declarator": "listener", "var_name": "listener"}, {"original_string": "private boolean notifiedDisconnected;", "modifier": "private", "type": "boolean", "declarator": "notifiedDisconnected", "var_name": "notifiedDisconnected"}, {"original_string": "private boolean started;", "modifier": "private", "type": "boolean", "declarator": "started", "var_name": "started"}, {"original_string": "private boolean stopping;", "modifier": "private", "type": "boolean", "declarator": "stopping", "var_name": "stopping"}, {"original_string": "private boolean receivedBye;", "modifier": "private", "type": "boolean", "declarator": "receivedBye", "var_name": "receivedBye"}, {"original_string": "private boolean sentBye;", "modifier": "private", "type": "boolean", "declarator": "sentBye", "var_name": "sentBye"}, {"original_string": "private boolean closingClient;", "modifier": "private", "type": "boolean", "declarator": "closingClient", "var_name": "closingClient"}, {"original_string": "private final Object acknowledgeMonitor;", "modifier": "private final", "type": "Object", "declarator": "acknowledgeMonitor", "var_name": "acknowledgeMonitor"}, {"original_string": "private int lastSequenceNumber;", "modifier": "private", "type": "int", "declarator": "lastSequenceNumber", "var_name": "lastSequenceNumber"}, {"original_string": "private boolean autoAck;", "modifier": "private", "type": "boolean", "declarator": "autoAck", "var_name": "autoAck"}], "methods": [{"identifier": "TextServer", "parameters": "(final String hostname, final int serverPort)", "modifiers": "public", "return": "", "signature": " TextServer(final String hostname, final int serverPort)", "full_signature": "public  TextServer(final String hostname, final int serverPort)", "class_method_signature": "TextServer.TextServer(final String hostname, final int serverPort)", "testcase": false, "constructor": true}, {"identifier": "TextServer", "parameters": "(final int serverPort)", "modifiers": "public", "return": "", "signature": " TextServer(final int serverPort)", "full_signature": "public  TextServer(final int serverPort)", "class_method_signature": "TextServer.TextServer(final int serverPort)", "testcase": false, "constructor": true}, {"identifier": "setAutoAcknowledge", "parameters": "(final boolean value)", "modifiers": "public", "return": "void", "signature": "void setAutoAcknowledge(final boolean value)", "full_signature": "public void setAutoAcknowledge(final boolean value)", "class_method_signature": "TextServer.setAutoAcknowledge(final boolean value)", "testcase": false, "constructor": false}, {"identifier": "addTextListener", "parameters": "(final TextListener textListener)", "modifiers": "public", "return": "void", "signature": "void addTextListener(final TextListener textListener)", "full_signature": "public void addTextListener(final TextListener textListener)", "class_method_signature": "TextServer.addTextListener(final TextListener textListener)", "testcase": false, "constructor": false}, {"identifier": "fireStarted", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireStarted()", "full_signature": "private void fireStarted()", "class_method_signature": "TextServer.fireStarted()", "testcase": false, "constructor": false}, {"identifier": "fireConnected", "parameters": "(final InetSocketAddress remote)", "modifiers": "private", "return": "void", "signature": "void fireConnected(final InetSocketAddress remote)", "full_signature": "private void fireConnected(final InetSocketAddress remote)", "class_method_signature": "TextServer.fireConnected(final InetSocketAddress remote)", "testcase": false, "constructor": false}, {"identifier": "fireOutputArrived", "parameters": "(final TextMessage message)", "modifiers": "private", "return": "void", "signature": "void fireOutputArrived(final TextMessage message)", "full_signature": "private void fireOutputArrived(final TextMessage message)", "class_method_signature": "TextServer.fireOutputArrived(final TextMessage message)", "testcase": false, "constructor": false}, {"identifier": "fireExpectingInput", "parameters": "(final TextMessage message)", "modifiers": "private", "return": "void", "signature": "void fireExpectingInput(final TextMessage message)", "full_signature": "private void fireExpectingInput(final TextMessage message)", "class_method_signature": "TextServer.fireExpectingInput(final TextMessage message)", "testcase": false, "constructor": false}, {"identifier": "fireInputClosed", "parameters": "(final TextMessage message)", "modifiers": "private", "return": "void", "signature": "void fireInputClosed(final TextMessage message)", "full_signature": "private void fireInputClosed(final TextMessage message)", "class_method_signature": "TextServer.fireInputClosed(final TextMessage message)", "testcase": false, "constructor": false}, {"identifier": "fireDisconnected", "parameters": "(final TextMessage message)", "modifiers": "private", "return": "void", "signature": "void fireDisconnected(final TextMessage message)", "full_signature": "private void fireDisconnected(final TextMessage message)", "class_method_signature": "TextServer.fireDisconnected(final TextMessage message)", "testcase": false, "constructor": false}, {"identifier": "getConnectionInformation", "parameters": "()", "modifiers": "public", "return": "ConnectionInformation", "signature": "ConnectionInformation getConnectionInformation()", "full_signature": "public ConnectionInformation getConnectionInformation()", "class_method_signature": "TextServer.getConnectionInformation()", "testcase": false, "constructor": false}, {"identifier": "getAddress", "parameters": "()", "modifiers": "private", "return": "InetAddress", "signature": "InetAddress getAddress()", "full_signature": "private InetAddress getAddress()", "class_method_signature": "TextServer.getAddress()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "TextServer.run()", "testcase": false, "constructor": false}, {"identifier": "isStarted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStarted()", "full_signature": "public boolean isStarted()", "class_method_signature": "TextServer.isStarted()", "testcase": false, "constructor": false}, {"identifier": "readOutput", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean readOutput()", "full_signature": "private boolean readOutput()", "class_method_signature": "TextServer.readOutput()", "testcase": false, "constructor": false}, {"identifier": "acknowledge", "parameters": "(final TextMessage message)", "modifiers": "private", "return": "boolean", "signature": "boolean acknowledge(final TextMessage message)", "full_signature": "private boolean acknowledge(final TextMessage message)", "class_method_signature": "TextServer.acknowledge(final TextMessage message)", "testcase": false, "constructor": false}, {"identifier": "acknowledge", "parameters": "(final int seq)", "modifiers": "public", "return": "void", "signature": "void acknowledge(final int seq)", "full_signature": "public void acknowledge(final int seq)", "class_method_signature": "TextServer.acknowledge(final int seq)", "testcase": false, "constructor": false}, {"identifier": "waitStarted", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void waitStarted()", "full_signature": "public void waitStarted()", "class_method_signature": "TextServer.waitStarted()", "testcase": false, "constructor": false}, {"identifier": "waitConnected", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void waitConnected()", "full_signature": "public void waitConnected()", "class_method_signature": "TextServer.waitConnected()", "testcase": false, "constructor": false}, {"identifier": "sendInput", "parameters": "(final String input)", "modifiers": "public", "return": "void", "signature": "void sendInput(final String input)", "full_signature": "public void sendInput(final String input)", "class_method_signature": "TextServer.sendInput(final String input)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(final TextMessage message)", "modifiers": "private", "return": "void", "signature": "void send(final TextMessage message)", "full_signature": "private void send(final TextMessage message)", "class_method_signature": "TextServer.send(final TextMessage message)", "testcase": false, "constructor": false}, {"identifier": "stopServer", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stopServer()", "full_signature": "public void stopServer()", "class_method_signature": "TextServer.stopServer()", "testcase": false, "constructor": false}, {"identifier": "closeServer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeServer()", "full_signature": "private void closeServer()", "class_method_signature": "TextServer.closeServer()", "testcase": false, "constructor": false}, {"identifier": "closeClient", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeClient()", "full_signature": "private void closeClient()", "class_method_signature": "TextServer.closeClient()", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "public boolean isConnected()", "class_method_signature": "TextServer.isConnected()", "testcase": false, "constructor": false}], "file": "org.jvoicexml.client.text/src/main/java/org/jvoicexml/client/text/TextServer.java"}, "focal_method": {"identifier": "sendInput", "parameters": "(final String input)", "modifiers": "public", "return": "void", "body": "public void sendInput(final String input) throws IOException {\n        final TextMessage message = TextMessage.newBuilder()\n                .setType(TextMessageType.USER).setData(input)\n                .setSequenceNumber(lastSequenceNumber++).build();\n        send(message);\n    }", "signature": "void sendInput(final String input)", "full_signature": "public void sendInput(final String input)", "class_method_signature": "TextServer.sendInput(final String input)", "testcase": false, "constructor": false, "invocations": ["build", "setSequenceNumber", "setData", "setType", "newBuilder", "send"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}