{"test_class": {"identifier": "TanimotoTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "boolean standAlone = false;", "modifier": "", "type": "boolean", "declarator": "standAlone = false", "var_name": "standAlone"}], "file": "descriptor/fingerprint/src/test/java/org/openscience/cdk/similarity/TanimotoTest.java"}, "test_case": {"identifier": "testTanimoto2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTanimoto2() throws java.lang.Exception {\n        IAtomContainer mol1 = TestMoleculeFactory.makeIndole();\n        IAtomContainer mol2 = TestMoleculeFactory.makeIndole();\n        Fingerprinter fingerprinter = new Fingerprinter();\n        BitSet bs1 = fingerprinter.getBitFingerprint(mol1).asBitSet();\n        BitSet bs2 = fingerprinter.getBitFingerprint(mol2).asBitSet();\n        float tanimoto = Tanimoto.calculate(bs1, bs2);\n        if (standAlone) System.out.println(\"Tanimoto: \" + tanimoto);\n        if (!standAlone) Assert.assertEquals(1.0, tanimoto, 0.001);\n    }", "signature": "void testTanimoto2()", "full_signature": "@Test public void testTanimoto2()", "class_method_signature": "TanimotoTest.testTanimoto2()", "testcase": true, "constructor": false, "invocations": ["makeIndole", "makeIndole", "asBitSet", "getBitFingerprint", "asBitSet", "getBitFingerprint", "calculate", "println", "assertEquals"]}, "focal_class": {"identifier": "Tanimoto", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Tanimoto", "parameters": "()", "modifiers": "private", "return": "", "signature": " Tanimoto()", "full_signature": "private  Tanimoto()", "class_method_signature": "Tanimoto.Tanimoto()", "testcase": false, "constructor": true}, {"identifier": "calculate", "parameters": "(BitSet bitset1, BitSet bitset2)", "modifiers": "public static", "return": "float", "signature": "float calculate(BitSet bitset1, BitSet bitset2)", "full_signature": "public static float calculate(BitSet bitset1, BitSet bitset2)", "class_method_signature": "Tanimoto.calculate(BitSet bitset1, BitSet bitset2)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IBitFingerprint fingerprint1, IBitFingerprint fingerprint2)", "modifiers": "public static", "return": "double", "signature": "double calculate(IBitFingerprint fingerprint1, IBitFingerprint fingerprint2)", "full_signature": "public static double calculate(IBitFingerprint fingerprint1, IBitFingerprint fingerprint2)", "class_method_signature": "Tanimoto.calculate(IBitFingerprint fingerprint1, IBitFingerprint fingerprint2)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(double[] features1, double[] features2)", "modifiers": "public static", "return": "float", "signature": "float calculate(double[] features1, double[] features2)", "full_signature": "public static float calculate(double[] features1, double[] features2)", "class_method_signature": "Tanimoto.calculate(double[] features1, double[] features2)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(Map<String, Integer> features1, Map<String, Integer> features2)", "modifiers": "public static", "return": "float", "signature": "float calculate(Map<String, Integer> features1, Map<String, Integer> features2)", "full_signature": "public static float calculate(Map<String, Integer> features1, Map<String, Integer> features2)", "class_method_signature": "Tanimoto.calculate(Map<String, Integer> features1, Map<String, Integer> features2)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(ICountFingerprint fp1, ICountFingerprint fp2)", "modifiers": "public static", "return": "double", "signature": "double calculate(ICountFingerprint fp1, ICountFingerprint fp2)", "full_signature": "public static double calculate(ICountFingerprint fp1, ICountFingerprint fp2)", "class_method_signature": "Tanimoto.calculate(ICountFingerprint fp1, ICountFingerprint fp2)", "testcase": false, "constructor": false}, {"identifier": "method1", "parameters": "(ICountFingerprint fp1, ICountFingerprint fp2)", "modifiers": "public static", "return": "double", "signature": "double method1(ICountFingerprint fp1, ICountFingerprint fp2)", "full_signature": "public static double method1(ICountFingerprint fp1, ICountFingerprint fp2)", "class_method_signature": "Tanimoto.method1(ICountFingerprint fp1, ICountFingerprint fp2)", "testcase": false, "constructor": false}, {"identifier": "method2", "parameters": "(ICountFingerprint fp1, ICountFingerprint fp2)", "modifiers": "public static", "return": "double", "signature": "double method2(ICountFingerprint fp1, ICountFingerprint fp2)", "full_signature": "public static double method2(ICountFingerprint fp1, ICountFingerprint fp2)", "class_method_signature": "Tanimoto.method2(ICountFingerprint fp1, ICountFingerprint fp2)", "testcase": false, "constructor": false}], "file": "descriptor/fingerprint/src/main/java/org/openscience/cdk/similarity/Tanimoto.java"}, "focal_method": {"identifier": "calculate", "parameters": "(BitSet bitset1, BitSet bitset2)", "modifiers": "public static", "return": "float", "body": "public static float calculate(BitSet bitset1, BitSet bitset2) throws CDKException {\n        float _bitset1_cardinality = bitset1.cardinality();\n        float _bitset2_cardinality = bitset2.cardinality();\n        if (bitset1.size() != bitset2.size()) {\n            throw new CDKException(\"Bitsets must have the same bit length\");\n        }\n        BitSet one_and_two = (BitSet) bitset1.clone();\n        one_and_two.and(bitset2);\n        float _common_bit_count = one_and_two.cardinality();\n        return _common_bit_count / (_bitset1_cardinality + _bitset2_cardinality - _common_bit_count);\n    }", "signature": "float calculate(BitSet bitset1, BitSet bitset2)", "full_signature": "public static float calculate(BitSet bitset1, BitSet bitset2)", "class_method_signature": "Tanimoto.calculate(BitSet bitset1, BitSet bitset2)", "testcase": false, "constructor": false, "invocations": ["cardinality", "cardinality", "size", "size", "clone", "and", "cardinality"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}