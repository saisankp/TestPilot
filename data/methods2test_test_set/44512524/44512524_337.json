{"test_class": {"identifier": "FileReadSpoutTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int messageSize = 100;", "modifier": "private static final", "type": "int", "declarator": "messageSize = 100", "var_name": "messageSize"}, {"original_string": "private static final Map ANY_CONF = new HashMap();", "modifier": "private static final", "type": "Map", "declarator": "ANY_CONF = new HashMap()", "var_name": "ANY_CONF"}, {"original_string": "private static final String NEXT_LINE = \"next line\";", "modifier": "private static final", "type": "String", "declarator": "NEXT_LINE = \"next line\"", "var_name": "NEXT_LINE"}, {"original_string": "private OutputFieldsDeclarer declarer;", "modifier": "private", "type": "OutputFieldsDeclarer", "declarator": "declarer", "var_name": "declarer"}, {"original_string": "private TopologyContext context;", "modifier": "private", "type": "TopologyContext", "declarator": "context", "var_name": "context"}, {"original_string": "private SpoutOutputCollector collector;", "modifier": "private", "type": "SpoutOutputCollector", "declarator": "collector", "var_name": "collector"}, {"original_string": "private FileReader reader;", "modifier": "private", "type": "FileReader", "declarator": "reader", "var_name": "reader"}], "file": "storm/storm-benchmark/src/test/java/storm/benchmark/lib/spout/FileReadSpoutTest.java"}, "test_case": {"identifier": "shouldDeclareOutputFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldDeclareOutputFields() {\n    FileReadSpout spout = new FileReadSpout(false, reader);\n\n    spout.declareOutputFields(declarer);\n\n    verify(declarer, times(1)).declare(any(Fields.class));\n  }", "signature": "void shouldDeclareOutputFields()", "full_signature": "@Test public void shouldDeclareOutputFields()", "class_method_signature": "FileReadSpoutTest.shouldDeclareOutputFields()", "testcase": true, "constructor": false, "invocations": ["declareOutputFields", "declare", "verify", "times", "any"]}, "focal_class": {"identifier": "FileReadSpout", "superclass": "extends BaseRichSpout", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(FileReadSpout.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(FileReadSpout.class)", "var_name": "LOG"}, {"original_string": "private static final long serialVersionUID = -2582705611472467172L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2582705611472467172L", "var_name": "serialVersionUID"}, {"original_string": "public static final String DEFAULT_FILE = \"/resources/A_Tale_of_Two_City.txt\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_FILE = \"/resources/A_Tale_of_Two_City.txt\"", "var_name": "DEFAULT_FILE"}, {"original_string": "public static final boolean DEFAULT_ACK = false;", "modifier": "public static final", "type": "boolean", "declarator": "DEFAULT_ACK = false", "var_name": "DEFAULT_ACK"}, {"original_string": "public static final String FIELDS = \"sentence\";", "modifier": "public static final", "type": "String", "declarator": "FIELDS = \"sentence\"", "var_name": "FIELDS"}, {"original_string": "public final boolean ackEnabled;", "modifier": "public final", "type": "boolean", "declarator": "ackEnabled", "var_name": "ackEnabled"}, {"original_string": "public final FileReader reader;", "modifier": "public final", "type": "FileReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private SpoutOutputCollector collector;", "modifier": "private", "type": "SpoutOutputCollector", "declarator": "collector", "var_name": "collector"}, {"original_string": "private long count = 0;", "modifier": "private", "type": "long", "declarator": "count = 0", "var_name": "count"}], "methods": [{"identifier": "FileReadSpout", "parameters": "()", "modifiers": "public", "return": "", "signature": " FileReadSpout()", "full_signature": "public  FileReadSpout()", "class_method_signature": "FileReadSpout.FileReadSpout()", "testcase": false, "constructor": true}, {"identifier": "FileReadSpout", "parameters": "(boolean ackEnabled)", "modifiers": "public", "return": "", "signature": " FileReadSpout(boolean ackEnabled)", "full_signature": "public  FileReadSpout(boolean ackEnabled)", "class_method_signature": "FileReadSpout.FileReadSpout(boolean ackEnabled)", "testcase": false, "constructor": true}, {"identifier": "FileReadSpout", "parameters": "(boolean ackEnabled, String file)", "modifiers": "public", "return": "", "signature": " FileReadSpout(boolean ackEnabled, String file)", "full_signature": "public  FileReadSpout(boolean ackEnabled, String file)", "class_method_signature": "FileReadSpout.FileReadSpout(boolean ackEnabled, String file)", "testcase": false, "constructor": true}, {"identifier": "FileReadSpout", "parameters": "(boolean ackEnabled, FileReader reader)", "modifiers": "public", "return": "", "signature": " FileReadSpout(boolean ackEnabled, FileReader reader)", "full_signature": "public  FileReadSpout(boolean ackEnabled, FileReader reader)", "class_method_signature": "FileReadSpout.FileReadSpout(boolean ackEnabled, FileReader reader)", "testcase": false, "constructor": true}, {"identifier": "open", "parameters": "(Map conf, TopologyContext context,\n\t\t\tSpoutOutputCollector collector)", "modifiers": "@Override public", "return": "void", "signature": "void open(Map conf, TopologyContext context,\n\t\t\tSpoutOutputCollector collector)", "full_signature": "@Override public void open(Map conf, TopologyContext context,\n\t\t\tSpoutOutputCollector collector)", "class_method_signature": "FileReadSpout.open(Map conf, TopologyContext context,\n\t\t\tSpoutOutputCollector collector)", "testcase": false, "constructor": false}, {"identifier": "nextTuple", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void nextTuple()", "full_signature": "@Override public void nextTuple()", "class_method_signature": "FileReadSpout.nextTuple()", "testcase": false, "constructor": false}, {"identifier": "declareOutputFields", "parameters": "(OutputFieldsDeclarer declarer)", "modifiers": "@Override public", "return": "void", "signature": "void declareOutputFields(OutputFieldsDeclarer declarer)", "full_signature": "@Override public void declareOutputFields(OutputFieldsDeclarer declarer)", "class_method_signature": "FileReadSpout.declareOutputFields(OutputFieldsDeclarer declarer)", "testcase": false, "constructor": false}], "file": "storm/storm-benchmark/src/main/java/storm/benchmark/lib/spout/FileReadSpout.java"}, "focal_method": {"identifier": "declareOutputFields", "parameters": "(OutputFieldsDeclarer declarer)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void declareOutputFields(OutputFieldsDeclarer declarer) {\n\t\tdeclarer.declare(new Fields(FIELDS));\n\t}", "signature": "void declareOutputFields(OutputFieldsDeclarer declarer)", "full_signature": "@Override public void declareOutputFields(OutputFieldsDeclarer declarer)", "class_method_signature": "FileReadSpout.declareOutputFields(OutputFieldsDeclarer declarer)", "testcase": false, "constructor": false, "invocations": ["declare"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}