{"test_class": {"identifier": "VelocityRendererTest", "superclass": "", "interfaces": "", "fields": [], "file": "tiles-request-velocity/src/test/java/org/apache/tiles/request/velocity/render/VelocityRendererTest.java"}, "test_case": {"identifier": "testRender", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRender() throws IOException {\n        VelocityView view = createMock(VelocityView.class);\n        ServletRequest request = createMock(ServletRequest.class);\n        HttpServletRequest httpRequest = createMock(HttpServletRequest.class);\n        HttpServletResponse response = createMock(HttpServletResponse.class);\n        ViewToolContext context = createMock(ViewToolContext.class);\n        Template template = createMock(Template.class);\n        Writer writer = createMock(Writer.class);\n\n        expect(request.getRequest()).andReturn(httpRequest);\n        expect(request.getResponse()).andReturn(response);\n        expect(view.createContext(httpRequest, response)).andReturn(context);\n        expect(view.getTemplate(\"/test.vm\")).andReturn(template);\n        expect(request.getWriter()).andReturn(writer);\n        view.merge(template, context, writer);\n\n        replay(view, request, httpRequest, response, context, template, writer);\n        Renderer renderer = new VelocityRenderer(view);\n        renderer.render(\"/test.vm\", request);\n        verify(view, request, httpRequest, response, context, template, writer);\n    }", "signature": "void testRender()", "full_signature": "@Test public void testRender()", "class_method_signature": "VelocityRendererTest.testRender()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "createMock", "createMock", "createMock", "createMock", "andReturn", "expect", "getRequest", "andReturn", "expect", "getResponse", "andReturn", "expect", "createContext", "andReturn", "expect", "getTemplate", "andReturn", "expect", "getWriter", "merge", "replay", "render", "verify"]}, "focal_class": {"identifier": "VelocityRenderer", "superclass": "", "interfaces": "implements Renderer", "fields": [{"original_string": "private VelocityView velocityView;", "modifier": "private", "type": "VelocityView", "declarator": "velocityView", "var_name": "velocityView"}], "methods": [{"identifier": "VelocityRenderer", "parameters": "(VelocityView velocityView)", "modifiers": "public", "return": "", "signature": " VelocityRenderer(VelocityView velocityView)", "full_signature": "public  VelocityRenderer(VelocityView velocityView)", "class_method_signature": "VelocityRenderer.VelocityRenderer(VelocityView velocityView)", "testcase": false, "constructor": true}, {"identifier": "render", "parameters": "(String path, Request request)", "modifiers": "@Override public", "return": "void", "signature": "void render(String path, Request request)", "full_signature": "@Override public void render(String path, Request request)", "class_method_signature": "VelocityRenderer.render(String path, Request request)", "testcase": false, "constructor": false}, {"identifier": "isRenderable", "parameters": "(String path, Request request)", "modifiers": "public", "return": "boolean", "signature": "boolean isRenderable(String path, Request request)", "full_signature": "public boolean isRenderable(String path, Request request)", "class_method_signature": "VelocityRenderer.isRenderable(String path, Request request)", "testcase": false, "constructor": false}], "file": "tiles-request-velocity/src/main/java/org/apache/tiles/request/velocity/render/VelocityRenderer.java"}, "focal_method": {"identifier": "render", "parameters": "(String path, Request request)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void render(String path, Request request) throws IOException {\n        if (path == null) {\n            throw new CannotRenderException(\"Cannot dispatch a null path\");\n        }\n\n        ServletRequest servletRequest = ServletUtil.getServletRequest(request);\n        // then get a context\n        Context context = velocityView.createContext(servletRequest\n                .getRequest(), servletRequest.getResponse());\n\n        // get the template\n        Template template = velocityView.getTemplate((String) path);\n\n        // merge the template and context into the writer\n        velocityView.merge(template, context, request.getWriter());\n    }", "signature": "void render(String path, Request request)", "full_signature": "@Override public void render(String path, Request request)", "class_method_signature": "VelocityRenderer.render(String path, Request request)", "testcase": false, "constructor": false, "invocations": ["getServletRequest", "createContext", "getRequest", "getResponse", "getTemplate", "merge", "getWriter"]}, "repository": {"repo_id": 4269155, "url": "https://github.com/apache/tiles-request", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 865, "license": "licensed"}}