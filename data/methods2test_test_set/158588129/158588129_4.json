{"test_class": {"identifier": "CalculatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Calculator calculator;", "modifier": "private", "type": "Calculator", "declarator": "calculator", "var_name": "calculator"}, {"original_string": "private Operation mockOperation;", "modifier": "private", "type": "Operation", "declarator": "mockOperation", "var_name": "mockOperation"}], "file": "ch02/recipe_2_1_ii/src/test/java/com/apress/springbootrecipes/calculator/CalculatorTest.java"}, "test_case": {"identifier": "throwExceptionWhenNoSuitableOperationFound", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void throwExceptionWhenNoSuitableOperationFound() {\n\n        when(mockOperation.handles(anyChar())).thenReturn(false);\n        calculator.calculate(2, 2, '*');\n    }", "signature": "void throwExceptionWhenNoSuitableOperationFound()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void throwExceptionWhenNoSuitableOperationFound()", "class_method_signature": "CalculatorTest.throwExceptionWhenNoSuitableOperationFound()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "handles", "anyChar", "calculate"]}, "focal_class": {"identifier": "Calculator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Collection<Operation> operations;", "modifier": "private final", "type": "Collection<Operation>", "declarator": "operations", "var_name": "operations"}], "methods": [{"identifier": "Calculator", "parameters": "(Collection<Operation> operations)", "modifiers": "public", "return": "", "signature": " Calculator(Collection<Operation> operations)", "full_signature": "public  Calculator(Collection<Operation> operations)", "class_method_signature": "Calculator.Calculator(Collection<Operation> operations)", "testcase": false, "constructor": true}, {"identifier": "calculate", "parameters": "(int lhs, int rhs, char op)", "modifiers": "public", "return": "void", "signature": "void calculate(int lhs, int rhs, char op)", "full_signature": "public void calculate(int lhs, int rhs, char op)", "class_method_signature": "Calculator.calculate(int lhs, int rhs, char op)", "testcase": false, "constructor": false}], "file": "ch02/recipe_2_1_ii/src/main/java/com/apress/springbootrecipes/calculator/Calculator.java"}, "focal_method": {"identifier": "calculate", "parameters": "(int lhs, int rhs, char op)", "modifiers": "public", "return": "void", "body": "public void calculate(int lhs, int rhs, char op) {\n\n        for (var operation : operations) {\n            if (operation.handles(op)) {\n                var result = operation.apply(lhs, rhs);\n                System.out.printf(\"%d %s %d = %s%n\", lhs, op, rhs, result);\n                return;\n            }\n        }\n        throw new IllegalArgumentException(\"Unknown operation \" + op);\n    }", "signature": "void calculate(int lhs, int rhs, char op)", "full_signature": "public void calculate(int lhs, int rhs, char op)", "class_method_signature": "Calculator.calculate(int lhs, int rhs, char op)", "testcase": false, "constructor": false, "invocations": ["handles", "apply", "printf"]}, "repository": {"repo_id": 158588129, "url": "https://github.com/Apress/spring-boot-2-recipes", "language": "Java", "is_fork": false, "fork_count": 34, "stargazer_count": 24, "size": 202, "license": "licensed"}}