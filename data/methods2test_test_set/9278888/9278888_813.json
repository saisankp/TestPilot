{"test_class": {"identifier": "JfrScopeDecoratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "ExecutorService wrappedExecutor = Executors.newSingleThreadExecutor();", "modifier": "", "type": "ExecutorService", "declarator": "wrappedExecutor = Executors.newSingleThreadExecutor()", "var_name": "wrappedExecutor"}, {"original_string": "ScopeDecorator decorator = JfrScopeDecorator.get();", "modifier": "", "type": "ScopeDecorator", "declarator": "decorator = JfrScopeDecorator.get()", "var_name": "decorator"}, {"original_string": "CurrentTraceContext currentTraceContext = StrictCurrentTraceContext.newBuilder()\n    .addScopeDecorator(JfrScopeDecorator.get())\n    .build();", "modifier": "", "type": "CurrentTraceContext", "declarator": "currentTraceContext = StrictCurrentTraceContext.newBuilder()\n    .addScopeDecorator(JfrScopeDecorator.get())\n    .build()", "var_name": "currentTraceContext"}, {"original_string": "Executor executor = currentTraceContext.executor(wrappedExecutor);", "modifier": "", "type": "Executor", "declarator": "executor = currentTraceContext.executor(wrappedExecutor)", "var_name": "executor"}, {"original_string": "TraceContext context = TraceContext.newBuilder().traceId(1).spanId(1).build();", "modifier": "", "type": "TraceContext", "declarator": "context = TraceContext.newBuilder().traceId(1).spanId(1).build()", "var_name": "context"}, {"original_string": "TraceContext context2 = TraceContext.newBuilder().traceId(1).parentId(1).spanId(2).build();", "modifier": "", "type": "TraceContext", "declarator": "context2 = TraceContext.newBuilder().traceId(1).parentId(1).spanId(2).build()", "var_name": "context2"}, {"original_string": "TraceContext context3 = TraceContext.newBuilder().traceId(2).spanId(3).build();", "modifier": "", "type": "TraceContext", "declarator": "context3 = TraceContext.newBuilder().traceId(2).spanId(3).build()", "var_name": "context3"}], "file": "context/jfr/src/test/java/brave/context/jfr/JfrScopeDecoratorTest.java"}, "test_case": {"identifier": "doesntDecorateNoop", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void doesntDecorateNoop() {\n    assertThat(decorator.decorateScope(context, Scope.NOOP)).isSameAs(Scope.NOOP);\n    assertThat(decorator.decorateScope(null, Scope.NOOP)).isSameAs(Scope.NOOP);\n  }", "signature": "void doesntDecorateNoop()", "full_signature": "@Test public void doesntDecorateNoop()", "class_method_signature": "JfrScopeDecoratorTest.doesntDecorateNoop()", "testcase": true, "constructor": false, "invocations": ["isSameAs", "assertThat", "decorateScope", "isSameAs", "assertThat", "decorateScope"]}, "focal_class": {"identifier": "JfrScopeDecorator", "superclass": "", "interfaces": "implements ScopeDecorator", "fields": [{"original_string": "static final ScopeDecorator INSTANCE = new JfrScopeDecorator();", "modifier": "static final", "type": "ScopeDecorator", "declarator": "INSTANCE = new JfrScopeDecorator()", "var_name": "INSTANCE"}], "methods": [{"identifier": "get", "parameters": "()", "modifiers": "public static", "return": "ScopeDecorator", "signature": "ScopeDecorator get()", "full_signature": "public static ScopeDecorator get()", "class_method_signature": "JfrScopeDecorator.get()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "()", "modifiers": "@Deprecated public static", "return": "ScopeDecorator", "signature": "ScopeDecorator create()", "full_signature": "@Deprecated public static ScopeDecorator create()", "class_method_signature": "JfrScopeDecorator.create()", "testcase": false, "constructor": false}, {"identifier": "decorateScope", "parameters": "(@Nullable TraceContext context, Scope scope)", "modifiers": "@Override public", "return": "Scope", "signature": "Scope decorateScope(@Nullable TraceContext context, Scope scope)", "full_signature": "@Override public Scope decorateScope(@Nullable TraceContext context, Scope scope)", "class_method_signature": "JfrScopeDecorator.decorateScope(@Nullable TraceContext context, Scope scope)", "testcase": false, "constructor": false}, {"identifier": "JfrScopeDecorator", "parameters": "()", "modifiers": "", "return": "", "signature": " JfrScopeDecorator()", "full_signature": "  JfrScopeDecorator()", "class_method_signature": "JfrScopeDecorator.JfrScopeDecorator()", "testcase": false, "constructor": true}], "file": "context/jfr/src/main/java/brave/context/jfr/JfrScopeDecorator.java"}, "focal_method": {"identifier": "decorateScope", "parameters": "(@Nullable TraceContext context, Scope scope)", "modifiers": "@Override public", "return": "Scope", "body": "@Override public Scope decorateScope(@Nullable TraceContext context, Scope scope) {\n    if (scope == Scope.NOOP) return scope; // we only scope fields constant in the context\n\n    ScopeEvent event = new ScopeEvent();\n    if (!event.isEnabled()) return scope;\n\n    if (context != null) {\n      event.traceId = context.traceIdString();\n      event.parentId = context.parentIdString();\n      event.spanId = context.spanIdString();\n    }\n\n    event.begin();\n\n    class JfrCurrentTraceContextScope implements Scope {\n      @Override public void close() {\n        scope.close();\n        event.commit();\n      }\n    }\n    return new JfrCurrentTraceContextScope();\n  }", "signature": "Scope decorateScope(@Nullable TraceContext context, Scope scope)", "full_signature": "@Override public Scope decorateScope(@Nullable TraceContext context, Scope scope)", "class_method_signature": "JfrScopeDecorator.decorateScope(@Nullable TraceContext context, Scope scope)", "testcase": false, "constructor": false, "invocations": ["isEnabled", "traceIdString", "parentIdString", "spanIdString", "begin", "close", "commit"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}