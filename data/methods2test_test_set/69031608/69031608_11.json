{"test_class": {"identifier": "TypeElementsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public CompilationRule compilationRule = new CompilationRule();", "modifier": "@Rule\n    public", "type": "CompilationRule", "declarator": "compilationRule = new CompilationRule()", "var_name": "compilationRule"}, {"original_string": "private Elements elements;", "modifier": "private", "type": "Elements", "declarator": "elements", "var_name": "elements"}], "file": "shade-processor/src/test/java/io/t28/shade/processor/util/TypeElementsTest.java"}, "test_case": {"identifier": "toElementShouldThrowExceptionWhenTypeIsNotDeclared", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toElementShouldThrowExceptionWhenTypeIsNotDeclared() throws Exception {\n        // setup\n        final Element element = elements.getPackageElement(\"java.util\");\n        final TypeMirror mirror = element.asType();\n\n        // verify\n        assertThatThrownBy(() -> {\n            // exercise\n            TypeElements.toElement(mirror);\n        }).isInstanceOf(IllegalArgumentException.class);\n    }", "signature": "void toElementShouldThrowExceptionWhenTypeIsNotDeclared()", "full_signature": "@Test public void toElementShouldThrowExceptionWhenTypeIsNotDeclared()", "class_method_signature": "TypeElementsTest.toElementShouldThrowExceptionWhenTypeIsNotDeclared()", "testcase": true, "constructor": false, "invocations": ["getPackageElement", "asType", "isInstanceOf", "assertThatThrownBy", "toElement"]}, "focal_class": {"identifier": "TypeElements", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "TypeElements", "parameters": "()", "modifiers": "private", "return": "", "signature": " TypeElements()", "full_signature": "private  TypeElements()", "class_method_signature": "TypeElements.TypeElements()", "testcase": false, "constructor": true}, {"identifier": "toElement", "parameters": "(@Nonnull TypeMirror type)", "modifiers": "@Nonnull public static", "return": "TypeElement", "signature": "TypeElement toElement(@Nonnull TypeMirror type)", "full_signature": "@Nonnull public static TypeElement toElement(@Nonnull TypeMirror type)", "class_method_signature": "TypeElements.toElement(@Nonnull TypeMirror type)", "testcase": false, "constructor": false}, {"identifier": "findGenericTypes", "parameters": "(@Nonnull TypeElement element, @Nonnull String className)", "modifiers": "@Nonnull public static", "return": "List<TypeName>", "signature": "List<TypeName> findGenericTypes(@Nonnull TypeElement element, @Nonnull String className)", "full_signature": "@Nonnull public static List<TypeName> findGenericTypes(@Nonnull TypeElement element, @Nonnull String className)", "class_method_signature": "TypeElements.findGenericTypes(@Nonnull TypeElement element, @Nonnull String className)", "testcase": false, "constructor": false}], "file": "shade-processor/src/main/java/io/t28/shade/processor/util/TypeElements.java"}, "focal_method": {"identifier": "toElement", "parameters": "(@Nonnull TypeMirror type)", "modifiers": "@Nonnull public static", "return": "TypeElement", "body": "@Nonnull\n    public static TypeElement toElement(@Nonnull TypeMirror type) {\n        if (type.getKind() != TypeKind.DECLARED) {\n            throw new IllegalArgumentException(\"Kind of type(\" + type + \") must be \" + TypeKind.DECLARED);\n        }\n\n        final DeclaredType declaredType = (DeclaredType) type;\n        final Element element = declaredType.asElement();\n        if (!(element instanceof TypeElement)) {\n            throw new IllegalArgumentException(\"Provided element(\" + element + \") is not instance of TypeElement\");\n        }\n        return (TypeElement) element;\n    }", "signature": "TypeElement toElement(@Nonnull TypeMirror type)", "full_signature": "@Nonnull public static TypeElement toElement(@Nonnull TypeMirror type)", "class_method_signature": "TypeElements.toElement(@Nonnull TypeMirror type)", "testcase": false, "constructor": false, "invocations": ["getKind", "asElement"]}, "repository": {"repo_id": 69031608, "url": "https://github.com/t28hub/shade", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 27, "size": 486, "license": "licensed"}}