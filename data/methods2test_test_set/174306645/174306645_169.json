{"test_class": {"identifier": "JsonUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "kogito-codegen/src/test/java/org/kie/kogito/codegen/json/JsonUtilsTest.java"}, "test_case": {"identifier": "testMerge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMerge() {\n        ObjectMapper mapper = new ObjectMapper();\n        \n        JsonNode node1 = createJson (mapper, createJson(mapper,\"numbers\",Arrays.asList(1,2,3)));\n        JsonNode node2 = createJson (mapper, createJson(mapper,\"numbers\",Arrays.asList(4,5,6)));\n        JsonNode node3 = createJson (mapper, mapper.createObjectNode().put(\"number\",1));\n        JsonNode node4 = createJson (mapper, mapper.createObjectNode().put(\"boolean\",false));\n        JsonNode node5 = createJson (mapper, mapper.createObjectNode().put(\"string\",\"javier\"));\n\n        JsonNode result = mapper.createObjectNode();\n        JsonUtils.merge(node1, result);\n        JsonUtils.merge(node2, result);\n        JsonUtils.merge(node3, result);\n        JsonUtils.merge(node4, result);\n        JsonUtils.merge(node5, result);\n\n        assertEquals(1, result.size());\n        JsonNode merged = result.get(\"merged\");\n        assertEquals(4, merged.size());\n        JsonNode numbers = merged.get(\"numbers\");\n        assertTrue(numbers instanceof ArrayNode);\n        ArrayNode numbersNode = (ArrayNode) numbers;\n        assertEquals(4, numbersNode.get(0).asInt());\n        assertEquals(5, numbersNode.get(1).asInt());\n        assertEquals(6, numbersNode.get(2).asInt());\n        assertEquals(false, merged.get(\"boolean\").asBoolean());\n        assertEquals(\"javier\", merged.get(\"string\").asText());\n        assertEquals(1, merged.get(\"number\").asInt());\n    }", "signature": "void testMerge()", "full_signature": "@Test public void testMerge()", "class_method_signature": "JsonUtilsTest.testMerge()", "testcase": true, "constructor": false, "invocations": ["createJson", "createJson", "asList", "createJson", "createJson", "asList", "createJson", "put", "createObjectNode", "createJson", "put", "createObjectNode", "createJson", "put", "createObjectNode", "createObjectNode", "merge", "merge", "merge", "merge", "merge", "assertEquals", "size", "get", "assertEquals", "size", "get", "assertTrue", "assertEquals", "asInt", "get", "assertEquals", "asInt", "get", "assertEquals", "asInt", "get", "assertEquals", "asBoolean", "get", "assertEquals", "asText", "get", "assertEquals", "asInt", "get"]}, "focal_class": {"identifier": "JsonUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(JsonUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JsonUtils.class)", "var_name": "logger"}], "methods": [{"identifier": "JsonUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " JsonUtils()", "full_signature": "private  JsonUtils()", "class_method_signature": "JsonUtils.JsonUtils()", "testcase": false, "constructor": true}, {"identifier": "merge", "parameters": "(JsonNode src, JsonNode target)", "modifiers": "public static", "return": "void", "signature": "void merge(JsonNode src, JsonNode target)", "full_signature": "public static void merge(JsonNode src, JsonNode target)", "class_method_signature": "JsonUtils.merge(JsonNode src, JsonNode target)", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(Map.Entry<String, JsonNode> srcEntry, JsonNode target)", "modifiers": "private static", "return": "void", "signature": "void writeObject(Map.Entry<String, JsonNode> srcEntry, JsonNode target)", "full_signature": "private static void writeObject(Map.Entry<String, JsonNode> srcEntry, JsonNode target)", "class_method_signature": "JsonUtils.writeObject(Map.Entry<String, JsonNode> srcEntry, JsonNode target)", "testcase": false, "constructor": false}, {"identifier": "writeArray", "parameters": "(Map.Entry<String, JsonNode> srcEntry, JsonNode target)", "modifiers": "private static", "return": "void", "signature": "void writeArray(Map.Entry<String, JsonNode> srcEntry, JsonNode target)", "full_signature": "private static void writeArray(Map.Entry<String, JsonNode> srcEntry, JsonNode target)", "class_method_signature": "JsonUtils.writeArray(Map.Entry<String, JsonNode> srcEntry, JsonNode target)", "testcase": false, "constructor": false}, {"identifier": "updateObject", "parameters": "(JsonNode target,\n                                     ValueNode value,\n                                     Map.Entry<String, JsonNode> src)", "modifiers": "private static", "return": "void", "signature": "void updateObject(JsonNode target,\n                                     ValueNode value,\n                                     Map.Entry<String, JsonNode> src)", "full_signature": "private static void updateObject(JsonNode target,\n                                     ValueNode value,\n                                     Map.Entry<String, JsonNode> src)", "class_method_signature": "JsonUtils.updateObject(JsonNode target,\n                                     ValueNode value,\n                                     Map.Entry<String, JsonNode> src)", "testcase": false, "constructor": false}], "file": "kogito-codegen/src/main/java/org/kie/kogito/codegen/json/JsonUtils.java"}, "focal_method": {"identifier": "merge", "parameters": "(JsonNode src, JsonNode target)", "modifiers": "public static", "return": "void", "body": "public static void merge(JsonNode src, JsonNode target) {\n        Iterator<Map.Entry<String, JsonNode>> fields = src.fields();\n        while (fields.hasNext()) {\n            Map.Entry<String, JsonNode> entry = fields.next();\n            JsonNode subNode = entry.getValue();\n            switch (subNode.getNodeType()) {\n                case OBJECT:\n                    writeObject(entry, target);\n                    break;\n                case ARRAY:\n                    writeArray(entry, target);\n                    break;\n                case STRING:\n                    updateObject(target, new TextNode(entry.getValue().textValue()), entry);\n                    break;\n                case NUMBER:\n                    updateObject(target, new IntNode(entry.getValue().intValue()), entry);\n                    break;\n                case BOOLEAN:\n                    updateObject(target, BooleanNode.valueOf(entry.getValue().booleanValue()), entry);\n                    break;\n                default:\n                    logger.warn(\"Unrecognized data type {} \"+subNode.getNodeType());\n            }\n        }\n    }", "signature": "void merge(JsonNode src, JsonNode target)", "full_signature": "public static void merge(JsonNode src, JsonNode target)", "class_method_signature": "JsonUtils.merge(JsonNode src, JsonNode target)", "testcase": false, "constructor": false, "invocations": ["fields", "hasNext", "next", "getValue", "getNodeType", "writeObject", "writeArray", "updateObject", "textValue", "getValue", "updateObject", "intValue", "getValue", "updateObject", "valueOf", "booleanValue", "getValue", "warn", "getNodeType"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}