{"test_class": {"identifier": "SubscriptionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private final SubscriptionService subscriptionService = new SubscriptionService();", "modifier": "@InjectMocks\n    private final", "type": "SubscriptionService", "declarator": "subscriptionService = new SubscriptionService()", "var_name": "subscriptionService"}, {"original_string": "@Mock\n    private SeyrenRepository seyrenRepository;", "modifier": "@Mock\n    private", "type": "SeyrenRepository", "declarator": "seyrenRepository", "var_name": "seyrenRepository"}], "file": "services/src/test/java/com/vsct/supervision/notification/service/SubscriptionServiceTest.java"}, "test_case": {"identifier": "addSubscriptionFailWithNoTarget", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addSubscriptionFailWithNoTarget() throws Exception {\n        Subscription subscription = TestUtils.getDefaultSubscription();\n        String subId = \"subTestId\";\n        subscription.setId(subId);\n        subscription.setTarget(\"\");\n\n        try {\n            subscriptionService.addSubscription(subscription, TestUtils.DEFAULT_ALARM_ID);\n            fail(\"Create a subscription with no target should throw an exception\");\n        } catch (CerebroException ce) {\n            assertEquals(ErrorCode.SUBSCRIPTION_INVALID, ce.getErrorCode());\n        }\n    }", "signature": "void addSubscriptionFailWithNoTarget()", "full_signature": "@Test public void addSubscriptionFailWithNoTarget()", "class_method_signature": "SubscriptionServiceTest.addSubscriptionFailWithNoTarget()", "testcase": true, "constructor": false, "invocations": ["getDefaultSubscription", "setId", "setTarget", "addSubscription", "fail", "assertEquals", "getErrorCode"]}, "focal_class": {"identifier": "SubscriptionService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SubscriptionService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SubscriptionService.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private SeyrenRepository seyrenRepository;", "modifier": "@Autowired\n    private", "type": "SeyrenRepository", "declarator": "seyrenRepository", "var_name": "seyrenRepository"}], "methods": [{"identifier": "getSubscription", "parameters": "(String alarmId, String subscriptionId)", "modifiers": "public", "return": "Subscription", "signature": "Subscription getSubscription(String alarmId, String subscriptionId)", "full_signature": "public Subscription getSubscription(String alarmId, String subscriptionId)", "class_method_signature": "SubscriptionService.getSubscription(String alarmId, String subscriptionId)", "testcase": false, "constructor": false}, {"identifier": "addSubscription", "parameters": "(Subscription subscription, String alarmId)", "modifiers": "public", "return": "void", "signature": "void addSubscription(Subscription subscription, String alarmId)", "full_signature": "public void addSubscription(Subscription subscription, String alarmId)", "class_method_signature": "SubscriptionService.addSubscription(Subscription subscription, String alarmId)", "testcase": false, "constructor": false}, {"identifier": "searchSubscription", "parameters": "(Subscription subscription, String alarmId)", "modifiers": "public", "return": "Subscription", "signature": "Subscription searchSubscription(Subscription subscription, String alarmId)", "full_signature": "public Subscription searchSubscription(Subscription subscription, String alarmId)", "class_method_signature": "SubscriptionService.searchSubscription(Subscription subscription, String alarmId)", "testcase": false, "constructor": false}, {"identifier": "updateSubscription", "parameters": "(Subscription subscription, String alarmId)", "modifiers": "public", "return": "void", "signature": "void updateSubscription(Subscription subscription, String alarmId)", "full_signature": "public void updateSubscription(Subscription subscription, String alarmId)", "class_method_signature": "SubscriptionService.updateSubscription(Subscription subscription, String alarmId)", "testcase": false, "constructor": false}, {"identifier": "validateSubscription", "parameters": "(Subscription subscription)", "modifiers": "private", "return": "void", "signature": "void validateSubscription(Subscription subscription)", "full_signature": "private void validateSubscription(Subscription subscription)", "class_method_signature": "SubscriptionService.validateSubscription(Subscription subscription)", "testcase": false, "constructor": false}, {"identifier": "validateUpdateSubscription", "parameters": "(Subscription current, Subscription updated)", "modifiers": "private", "return": "void", "signature": "void validateUpdateSubscription(Subscription current, Subscription updated)", "full_signature": "private void validateUpdateSubscription(Subscription current, Subscription updated)", "class_method_signature": "SubscriptionService.validateUpdateSubscription(Subscription current, Subscription updated)", "testcase": false, "constructor": false}, {"identifier": "isLastSubscriptionActiveToDisable", "parameters": "(Subscription current, Subscription updated, Alarm alarm)", "modifiers": "private", "return": "boolean", "signature": "boolean isLastSubscriptionActiveToDisable(Subscription current, Subscription updated, Alarm alarm)", "full_signature": "private boolean isLastSubscriptionActiveToDisable(Subscription current, Subscription updated, Alarm alarm)", "class_method_signature": "SubscriptionService.isLastSubscriptionActiveToDisable(Subscription current, Subscription updated, Alarm alarm)", "testcase": false, "constructor": false}, {"identifier": "deleteSubscription", "parameters": "(String alarmId, String subscriptionId)", "modifiers": "public", "return": "SubscriptionService.DeletedSubscriptionStatus", "signature": "SubscriptionService.DeletedSubscriptionStatus deleteSubscription(String alarmId, String subscriptionId)", "full_signature": "public SubscriptionService.DeletedSubscriptionStatus deleteSubscription(String alarmId, String subscriptionId)", "class_method_signature": "SubscriptionService.deleteSubscription(String alarmId, String subscriptionId)", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/vsct/supervision/notification/service/SubscriptionService.java"}, "focal_method": {"identifier": "addSubscription", "parameters": "(Subscription subscription, String alarmId)", "modifiers": "public", "return": "void", "body": "public void addSubscription(Subscription subscription, String alarmId) {\n        validateSubscription(subscription);\n\n        if (this.searchSubscription(subscription, alarmId) != null) {\n            LOGGER.debug(\"Identical subscription found (alarm id: {}).\", alarmId);\n            throw new DuplicateSubscriptionException(\"Attempting to add a subscription that already exists on alarm \" + alarmId);\n        }\n\n        seyrenRepository.addSubscription(subscription, alarmId);\n    }", "signature": "void addSubscription(Subscription subscription, String alarmId)", "full_signature": "public void addSubscription(Subscription subscription, String alarmId)", "class_method_signature": "SubscriptionService.addSubscription(Subscription subscription, String alarmId)", "testcase": false, "constructor": false, "invocations": ["validateSubscription", "searchSubscription", "debug", "addSubscription"]}, "repository": {"repo_id": 78868092, "url": "https://github.com/voyages-sncf-technologies/cerebro", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 98, "size": 660, "license": "licensed"}}