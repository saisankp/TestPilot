{"test_class": {"identifier": "OpenIdAuthorizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String OPEN_ID_PUBLIC_JWK = \"{\\\"kty\\\":\\\"RSA\\\",\\\"x5t#S256\\\":\\\"TZFbbj6HsRU28HYvrcVnDs03KreV3DE24-Cxb9EPdS4\\\",\\\"e\\\":\\\"AQAB\\\",\\\"use\\\":\\\"sig\\\",\\\"x5t\\\":\\\"l_N2UlC_a624iu5eYFypnB1Wr20\\\",\\\"kid\\\":\\\"q1-Wm0ozQ5O0mQH8-SJap2ZcN4MmucWwnQWKYxZJ4ow\\\",\\\"x5c\\\":[\\\"MIICmTCCAYECBgFyRdXW2DANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVJb1REQjAeFw0yMDA1MjQwODM3MjJaFw0zMDA1MjQwODM5MDJaMBAxDjAMBgNVBAMMBUlvVERCMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAozDCZTVc9946VvhZ6E\\\\/OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT\\\\/P1b\\\\/zvQK52qA1xj6tBVg64xl3+LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg\\\\/FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw+bfghYp5097Gkl\\\\/Dp4sixVjIWLTh5l9diy4D\\\\/XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD+qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a\\\\/E6oL24QnP\\\\/j2e9coseDtGNywaADQdO8PaJadH\\\\/BV4aPCwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBX4rsWPIAwgSK6BEZmtEkh\\\\/FMfZtkvCFANpwkCX5Pph8yuk\\\\/8xrvx30yb4fIgqsxxQk6H+Q1qptm1cXs0tNu1yft+t+B2VuVjrWtkCkV0hAy6eZcdW411Pt523pHoOTxg6ehQd5DsvCIlsvWo83ePTKME+092vfs3irfQcRzc5xINdpopSvZlZuQ83tNEJY8gWvspQZr+uj8AP2x6w0BOrPJIiLlV+peNJuD3UgJKlSfOueKbKeM1kIVOG\\\\/a2AoEkBgqktnaIWzkXbk475\\\\/0xfGegsSZrxGR3\\\\/SA3jegS0sHFCY7\\\\/Ie\\\\/UvDgqMjd207oT64jxEGrd4mObxOx7aS0tp\\\"],\\\"alg\\\":\\\"RS256\\\",\\\"n\\\":\\\"ozDCZTVc9946VvhZ6E_OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT_P1b_zvQK52qA1xj6tBVg64xl3-LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg_FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw-bfghYp5097Gkl_Dp4sixVjIWLTh5l9diy4D_XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD-qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a_E6oL24QnP_j2e9coseDtGNywaADQdO8PaJadH_BV4aPCw\\\"}\";", "modifier": "private static final", "type": "String", "declarator": "OPEN_ID_PUBLIC_JWK = \"{\\\"kty\\\":\\\"RSA\\\",\\\"x5t#S256\\\":\\\"TZFbbj6HsRU28HYvrcVnDs03KreV3DE24-Cxb9EPdS4\\\",\\\"e\\\":\\\"AQAB\\\",\\\"use\\\":\\\"sig\\\",\\\"x5t\\\":\\\"l_N2UlC_a624iu5eYFypnB1Wr20\\\",\\\"kid\\\":\\\"q1-Wm0ozQ5O0mQH8-SJap2ZcN4MmucWwnQWKYxZJ4ow\\\",\\\"x5c\\\":[\\\"MIICmTCCAYECBgFyRdXW2DANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVJb1REQjAeFw0yMDA1MjQwODM3MjJaFw0zMDA1MjQwODM5MDJaMBAxDjAMBgNVBAMMBUlvVERCMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAozDCZTVc9946VvhZ6E\\\\/OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT\\\\/P1b\\\\/zvQK52qA1xj6tBVg64xl3+LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg\\\\/FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw+bfghYp5097Gkl\\\\/Dp4sixVjIWLTh5l9diy4D\\\\/XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD+qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a\\\\/E6oL24QnP\\\\/j2e9coseDtGNywaADQdO8PaJadH\\\\/BV4aPCwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBX4rsWPIAwgSK6BEZmtEkh\\\\/FMfZtkvCFANpwkCX5Pph8yuk\\\\/8xrvx30yb4fIgqsxxQk6H+Q1qptm1cXs0tNu1yft+t+B2VuVjrWtkCkV0hAy6eZcdW411Pt523pHoOTxg6ehQd5DsvCIlsvWo83ePTKME+092vfs3irfQcRzc5xINdpopSvZlZuQ83tNEJY8gWvspQZr+uj8AP2x6w0BOrPJIiLlV+peNJuD3UgJKlSfOueKbKeM1kIVOG\\\\/a2AoEkBgqktnaIWzkXbk475\\\\/0xfGegsSZrxGR3\\\\/SA3jegS0sHFCY7\\\\/Ie\\\\/UvDgqMjd207oT64jxEGrd4mObxOx7aS0tp\\\"],\\\"alg\\\":\\\"RS256\\\",\\\"n\\\":\\\"ozDCZTVc9946VvhZ6E_OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT_P1b_zvQK52qA1xj6tBVg64xl3-LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg_FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw-bfghYp5097Gkl_Dp4sixVjIWLTh5l9diy4D_XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD-qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a_E6oL24QnP_j2e9coseDtGNywaADQdO8PaJadH_BV4aPCw\\\"}\"", "var_name": "OPEN_ID_PUBLIC_JWK"}], "file": "server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java"}, "test_case": {"identifier": "isAdmin_hasAccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isAdmin_hasAccess() throws AuthException, ParseException, IOException, URISyntaxException {\n        // IOTDB_ADMIN = true\n        String jwt = \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJxMS1XbTBvelE1TzBtUUg4LVNKYXAyWmNONE1tdWNXd25RV0tZeFpKNG93In0.eyJleHAiOjE1OTAzMjM5MjgsImlhdCI6MTU5MDMyMzYyOCwianRpIjoiZGQ5ZDZhNmItZjgzOC00Mjk3LTg5YWUtMjdlZTgxNzVhMThiIiwiaXNzIjoiaHR0cDovL2F1dGguZGVtby5wcmFnbWF0aWNpbmR1c3RyaWVzLmRlL2F1dGgvcmVhbG1zL0lvVERCIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6ImJhMzJlNDcxLWM3NzItNGIzMy04ZGE2LTZmZThhY2RhMDA3MyIsInR5cCI6IkJlYXJlciIsImF6cCI6ImlvdGRiIiwic2Vzc2lvbl9zdGF0ZSI6IjViZDRhNmM5LTBmYzItNGIxMy05Y2QxLTFhN2NjMzk3NjVhNyIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImlvdGRiX2FkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJlbWFpbCBwcm9maWxlIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyIn0.LthDI93A3jqATc_8Fm0ismqQSN62TUknD6ara6w43eao2hY6KBoMXVY1c6SXSy8hhQeHLiWpopjJE6fsG9xbaV2Gs24SJYnP4DkHvhULlBJ_PUjFy18QxzeexwYK358a99eVHG_8yu-f2kN3mJslOSrlny8oZDxeSxUi9wYNIuQFeLPmGfSISVFn_5V8lpoUAHeENmf9h8mSyEcUHGqtZfVm5zEYIbPPSBqvNei2NvKAFle6qoaJ1l13dpbw39KkOtIUF8dJ7v8XY_xgO2GXCJCvZ5YGr-q4UnA9v_GM3h3vSa5dyCuG0HXBmAujxSxywzPl5RB_QCTiYcTm7MGKLg\";\n\n        OpenIdAuthorizer authorizer = new OpenIdAuthorizer(JSONObjectUtils.parse(OPEN_ID_PUBLIC_JWK));\n        boolean admin = authorizer.isAdmin(jwt);\n\n        assertTrue(admin);\n    }", "signature": "void isAdmin_hasAccess()", "full_signature": "@Test public void isAdmin_hasAccess()", "class_method_signature": "OpenIdAuthorizerTest.isAdmin_hasAccess()", "testcase": true, "constructor": false, "invocations": ["parse", "isAdmin", "assertTrue"]}, "focal_class": {"identifier": "OpenIdAuthorizer", "superclass": "extends BasicAuthorizer", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(OpenIdAuthorizer.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(OpenIdAuthorizer.class)", "var_name": "logger"}, {"original_string": "public static final String IOTDB_ADMIN_ROLE_NAME = \"iotdb_admin\";", "modifier": "public static final", "type": "String", "declarator": "IOTDB_ADMIN_ROLE_NAME = \"iotdb_admin\"", "var_name": "IOTDB_ADMIN_ROLE_NAME"}, {"original_string": "public static final String OPENID_USER_PREFIX = \"openid-\";", "modifier": "public static final", "type": "String", "declarator": "OPENID_USER_PREFIX = \"openid-\"", "var_name": "OPENID_USER_PREFIX"}, {"original_string": "private static IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();", "modifier": "private static", "type": "IoTDBConfig", "declarator": "config = IoTDBDescriptor.getInstance().getConfig()", "var_name": "config"}, {"original_string": "private RSAPublicKey providerKey;", "modifier": "private", "type": "RSAPublicKey", "declarator": "providerKey", "var_name": "providerKey"}, {"original_string": "private Map<String, Claims> loggedClaims = new HashMap<>();", "modifier": "private", "type": "Map<String, Claims>", "declarator": "loggedClaims = new HashMap<>()", "var_name": "loggedClaims"}], "methods": [{"identifier": "OpenIdAuthorizer", "parameters": "()", "modifiers": "public", "return": "", "signature": " OpenIdAuthorizer()", "full_signature": "public  OpenIdAuthorizer()", "class_method_signature": "OpenIdAuthorizer.OpenIdAuthorizer()", "testcase": false, "constructor": true}, {"identifier": "OpenIdAuthorizer", "parameters": "(JSONObject jwk)", "modifiers": "", "return": "", "signature": " OpenIdAuthorizer(JSONObject jwk)", "full_signature": "  OpenIdAuthorizer(JSONObject jwk)", "class_method_signature": "OpenIdAuthorizer.OpenIdAuthorizer(JSONObject jwk)", "testcase": false, "constructor": true}, {"identifier": "OpenIdAuthorizer", "parameters": "(String providerUrl)", "modifiers": "", "return": "", "signature": " OpenIdAuthorizer(String providerUrl)", "full_signature": "  OpenIdAuthorizer(String providerUrl)", "class_method_signature": "OpenIdAuthorizer.OpenIdAuthorizer(String providerUrl)", "testcase": false, "constructor": true}, {"identifier": "getJWKfromProvider", "parameters": "(String providerUrl)", "modifiers": "private static", "return": "JSONObject", "signature": "JSONObject getJWKfromProvider(String providerUrl)", "full_signature": "private static JSONObject getJWKfromProvider(String providerUrl)", "class_method_signature": "OpenIdAuthorizer.getJWKfromProvider(String providerUrl)", "testcase": false, "constructor": false}, {"identifier": "getProviderRSAJWK", "parameters": "(InputStream is)", "modifiers": "private static", "return": "JSONObject", "signature": "JSONObject getProviderRSAJWK(InputStream is)", "full_signature": "private static JSONObject getProviderRSAJWK(InputStream is)", "class_method_signature": "OpenIdAuthorizer.getProviderRSAJWK(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "fetchMetadata", "parameters": "(String providerUrl)", "modifiers": "static", "return": "OIDCProviderMetadata", "signature": "OIDCProviderMetadata fetchMetadata(String providerUrl)", "full_signature": "static OIDCProviderMetadata fetchMetadata(String providerUrl)", "class_method_signature": "OpenIdAuthorizer.fetchMetadata(String providerUrl)", "testcase": false, "constructor": false}, {"identifier": "login", "parameters": "(String token, String password)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean login(String token, String password)", "full_signature": "@Override public boolean login(String token, String password)", "class_method_signature": "OpenIdAuthorizer.login(String token, String password)", "testcase": false, "constructor": false}, {"identifier": "validateToken", "parameters": "(String token)", "modifiers": "private", "return": "Claims", "signature": "Claims validateToken(String token)", "full_signature": "private Claims validateToken(String token)", "class_method_signature": "OpenIdAuthorizer.validateToken(String token)", "testcase": false, "constructor": false}, {"identifier": "getUsername", "parameters": "(Claims claims)", "modifiers": "private", "return": "String", "signature": "String getUsername(Claims claims)", "full_signature": "private String getUsername(Claims claims)", "class_method_signature": "OpenIdAuthorizer.getUsername(Claims claims)", "testcase": false, "constructor": false}, {"identifier": "getUsername", "parameters": "(String token)", "modifiers": "private", "return": "String", "signature": "String getUsername(String token)", "full_signature": "private String getUsername(String token)", "class_method_signature": "OpenIdAuthorizer.getUsername(String token)", "testcase": false, "constructor": false}, {"identifier": "createUser", "parameters": "(String username, String password)", "modifiers": "@Override public", "return": "void", "signature": "void createUser(String username, String password)", "full_signature": "@Override public void createUser(String username, String password)", "class_method_signature": "OpenIdAuthorizer.createUser(String username, String password)", "testcase": false, "constructor": false}, {"identifier": "throwUnsupportedOperationException", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void throwUnsupportedOperationException()", "full_signature": "private void throwUnsupportedOperationException()", "class_method_signature": "OpenIdAuthorizer.throwUnsupportedOperationException()", "testcase": false, "constructor": false}, {"identifier": "deleteUser", "parameters": "(String username)", "modifiers": "@Override public", "return": "void", "signature": "void deleteUser(String username)", "full_signature": "@Override public void deleteUser(String username)", "class_method_signature": "OpenIdAuthorizer.deleteUser(String username)", "testcase": false, "constructor": false}, {"identifier": "isAdmin", "parameters": "(String token)", "modifiers": "@Override", "return": "boolean", "signature": "boolean isAdmin(String token)", "full_signature": "@Override boolean isAdmin(String token)", "class_method_signature": "OpenIdAuthorizer.isAdmin(String token)", "testcase": false, "constructor": false}, {"identifier": "checkUserPrivileges", "parameters": "(String username, String path, int privilegeId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkUserPrivileges(String username, String path, int privilegeId)", "full_signature": "@Override public boolean checkUserPrivileges(String username, String path, int privilegeId)", "class_method_signature": "OpenIdAuthorizer.checkUserPrivileges(String username, String path, int privilegeId)", "testcase": false, "constructor": false}, {"identifier": "updateUserPassword", "parameters": "(String username, String newPassword)", "modifiers": "@Override public", "return": "void", "signature": "void updateUserPassword(String username, String newPassword)", "full_signature": "@Override public void updateUserPassword(String username, String newPassword)", "class_method_signature": "OpenIdAuthorizer.updateUserPassword(String username, String newPassword)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizer.java"}, "focal_method": {"identifier": "isAdmin", "parameters": "(String token)", "modifiers": "@Override", "return": "boolean", "body": "@Override\n    boolean isAdmin(String token) {\n        Claims claims;\n        if (this.loggedClaims.containsKey(token)) {\n            // This is a username!\n            claims = this.loggedClaims.get(token);\n        } else {\n            // Its a token\n            try {\n                claims = validateToken(token);\n            } catch (JwtException e) {\n                logger.warn(\"Unable to validate token {}!\", token, e);\n                return false;\n            }\n        }\n        // Get available roles (from keycloack)\n        List<String> availableRoles = ((Map<String, List<String>>) claims.get(\"realm_access\")).get(\"roles\");\n        if (!availableRoles.contains(IOTDB_ADMIN_ROLE_NAME)) {\n            logger.warn(\"Given Token has no admin rights, is there a ROLE with name {} in 'realm_access' role set?\", IOTDB_ADMIN_ROLE_NAME);\n            return false;\n        }\n        return true;\n    }", "signature": "boolean isAdmin(String token)", "full_signature": "@Override boolean isAdmin(String token)", "class_method_signature": "OpenIdAuthorizer.isAdmin(String token)", "testcase": false, "constructor": false, "invocations": ["containsKey", "get", "validateToken", "warn", "get", "get", "contains", "warn"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}