{"test_class": {"identifier": "QNameTest", "superclass": "", "interfaces": "", "fields": [], "file": "webster/src/test/java/net/adamcin/oakpal/webster/QNameTest.java"}, "test_case": {"identifier": "testParseQName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseQName() {\n        final QName ntPrefixName = QName.parseQName(JsonCnd.BUILTIN_MAPPINGS, QName.Type.NODETYPE, \"nt:aType\");\n        assertEquals(\"type is \", QName.Type.NODETYPE, ntPrefixName.getType());\n        assertEquals(\"prefix is \", \"nt\", ntPrefixName.getPrefix());\n        assertEquals(\"localName is \", \"aType\", ntPrefixName.getLocalName());\n        assertEquals(\"uri is \", NamespaceRegistry.NAMESPACE_NT, ntPrefixName.getUri());\n        assertEquals(\"toString is \",\n                \"nt:aType\", ntPrefixName.toString());\n        assertEquals(\"expanded is \",\n                \"{\" + NamespaceRegistry.NAMESPACE_NT + \"}aType\", ntPrefixName.toExpandedForm());\n\n        final QName ntUriName = QName.parseQName(JsonCnd.BUILTIN_MAPPINGS, QName.Type.NODETYPE,\n                \"{http://foo.com}anotherType\");\n        assertEquals(\"type is \", QName.Type.NODETYPE, ntUriName.getType());\n        assertNull(\"prefix is null\", ntUriName.getPrefix());\n        assertEquals(\"localName is \", \"anotherType\", ntUriName.getLocalName());\n        assertEquals(\"uri is \", \"http://foo.com\", ntUriName.getUri());\n        assertEquals(\"toString is \",\n                \"{http://foo.com}anotherType\", ntUriName.toString());\n        assertEquals(\"expanded is \",\n                \"{http://foo.com}anotherType\", ntUriName.toExpandedForm());\n    }", "signature": "void testParseQName()", "full_signature": "@Test public void testParseQName()", "class_method_signature": "QNameTest.testParseQName()", "testcase": true, "constructor": false, "invocations": ["parseQName", "assertEquals", "getType", "assertEquals", "getPrefix", "assertEquals", "getLocalName", "assertEquals", "getUri", "assertEquals", "toString", "assertEquals", "toExpandedForm", "parseQName", "assertEquals", "getType", "assertNull", "getPrefix", "assertEquals", "getLocalName", "assertEquals", "getUri", "assertEquals", "toString", "assertEquals", "toExpandedForm"]}, "focal_class": {"identifier": "QName", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Type type;", "modifier": "private final", "type": "Type", "declarator": "type", "var_name": "type"}, {"original_string": "private final String prefix;", "modifier": "private final", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "private final String localName;", "modifier": "private final", "type": "String", "declarator": "localName", "var_name": "localName"}, {"original_string": "private final String uri;", "modifier": "private final", "type": "String", "declarator": "uri", "var_name": "uri"}], "methods": [{"identifier": "QName", "parameters": "(final @NotNull Type type,\n                 final @Nullable String prefix,\n                 final @NotNull String localName,\n                 final @Nullable String uri)", "modifiers": "public", "return": "", "signature": " QName(final @NotNull Type type,\n                 final @Nullable String prefix,\n                 final @NotNull String localName,\n                 final @Nullable String uri)", "full_signature": "public  QName(final @NotNull Type type,\n                 final @Nullable String prefix,\n                 final @NotNull String localName,\n                 final @Nullable String uri)", "class_method_signature": "QName.QName(final @NotNull Type type,\n                 final @Nullable String prefix,\n                 final @NotNull String localName,\n                 final @Nullable String uri)", "testcase": false, "constructor": true}, {"identifier": "parseQName", "parameters": "(final @NotNull NamespaceMapping mapping,\n                                   final @NotNull Type type,\n                                   final @NotNull String qName)", "modifiers": "public static", "return": "QName", "signature": "QName parseQName(final @NotNull NamespaceMapping mapping,\n                                   final @NotNull Type type,\n                                   final @NotNull String qName)", "full_signature": "public static QName parseQName(final @NotNull NamespaceMapping mapping,\n                                   final @NotNull Type type,\n                                   final @NotNull String qName)", "class_method_signature": "QName.parseQName(final @NotNull NamespaceMapping mapping,\n                                   final @NotNull Type type,\n                                   final @NotNull String qName)", "testcase": false, "constructor": false}, {"identifier": "adaptName", "parameters": "(final @NotNull NamespaceMapping mapping,\n                                  final @NotNull Type type,\n                                  final @NotNull Name name)", "modifiers": "public static", "return": "QName", "signature": "QName adaptName(final @NotNull NamespaceMapping mapping,\n                                  final @NotNull Type type,\n                                  final @NotNull Name name)", "full_signature": "public static QName adaptName(final @NotNull NamespaceMapping mapping,\n                                  final @NotNull Type type,\n                                  final @NotNull Name name)", "class_method_signature": "QName.adaptName(final @NotNull NamespaceMapping mapping,\n                                  final @NotNull Type type,\n                                  final @NotNull Name name)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Type", "signature": "Type getType()", "full_signature": "public Type getType()", "class_method_signature": "QName.getType()", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPrefix()", "full_signature": "public String getPrefix()", "class_method_signature": "QName.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "getLocalName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLocalName()", "full_signature": "public String getLocalName()", "class_method_signature": "QName.getLocalName()", "testcase": false, "constructor": false}, {"identifier": "getUri", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUri()", "full_signature": "public String getUri()", "class_method_signature": "QName.getUri()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "QName.toString()", "testcase": false, "constructor": false}, {"identifier": "toExpandedForm", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toExpandedForm()", "full_signature": "public String toExpandedForm()", "class_method_signature": "QName.toExpandedForm()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "QName.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "QName.hashCode()", "testcase": false, "constructor": false}], "file": "webster/src/main/java/net/adamcin/oakpal/webster/QName.java"}, "focal_method": {"identifier": "parseQName", "parameters": "(final @NotNull NamespaceMapping mapping,\n                                   final @NotNull Type type,\n                                   final @NotNull String qName)", "modifiers": "public static", "return": "QName", "body": "public static QName parseQName(final @NotNull NamespaceMapping mapping,\n                                   final @NotNull Type type,\n                                   final @NotNull String qName) {\n        if (qName.startsWith(\"{\") && qName.contains(\"}\")) {\n            final int lastBrace = qName.indexOf(\"}\");\n            final String uri = qName.substring(1, lastBrace);\n            final String localName = qName.substring(lastBrace + 1);\n            return new QName(type,\n                    result1(mapping::getPrefix).apply(uri).toOptional().orElse(null),\n                    localName, uri);\n        } else if (qName.contains(\":\")) {\n            final String[] parts = qName.split(\":\", 2);\n            final String prefix = parts[0];\n            final String localName = parts[1];\n            return new QName(type, prefix, localName,\n                    result1(mapping::getURI).apply(prefix).toOptional().orElse(null));\n        }\n        throw new UnqualifiedNameException(qName);\n    }", "signature": "QName parseQName(final @NotNull NamespaceMapping mapping,\n                                   final @NotNull Type type,\n                                   final @NotNull String qName)", "full_signature": "public static QName parseQName(final @NotNull NamespaceMapping mapping,\n                                   final @NotNull Type type,\n                                   final @NotNull String qName)", "class_method_signature": "QName.parseQName(final @NotNull NamespaceMapping mapping,\n                                   final @NotNull Type type,\n                                   final @NotNull String qName)", "testcase": false, "constructor": false, "invocations": ["startsWith", "contains", "indexOf", "substring", "substring", "orElse", "toOptional", "apply", "result1", "contains", "split", "orElse", "toOptional", "apply", "result1"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}