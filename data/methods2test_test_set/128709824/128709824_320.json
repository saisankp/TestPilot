{"test_class": {"identifier": "RandomLoadBalancerTest", "superclass": "extends BaseLoadBalancerTest", "interfaces": "", "fields": [], "file": "core-impl/client/src/test/java/com/alipay/sofa/rpc/client/lb/RandomLoadBalancerTest.java"}, "test_case": {"identifier": "doSelect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doSelect() throws Exception {\n\n        RandomLoadBalancer loadBalancer = new RandomLoadBalancer(null);\n\n        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n        int size = 20;\n        int total = 100000;\n        SofaRequest request = new SofaRequest();\n        {\n            for (int i = 0; i < size; i++) {\n                cnt.put(9000 + i, 0);\n            }\n            List<ProviderInfo> providers = buildSameWeightProviderList(size);\n            long start = System.currentTimeMillis();\n            for (int i = 0; i < total; i++) {\n                ProviderInfo provider = loadBalancer.doSelect(request, providers);\n                int port = provider.getPort();\n                cnt.put(port, cnt.get(port) + 1);\n            }\n            long end = System.currentTimeMillis();\n            LOGGER.info(\"elapsed\" + (end - start) + \"ms\");\n            LOGGER.info(\"avg \" + (end - start) * 1000 * 1000 / total + \"ns\");\n\n            int avg = total / size;\n            for (int i = 0; i < size; i++) {\n                Assert.assertTrue(avg * 0.9 < cnt.get(9000 + i)\n                    && avg * 1.1 > cnt.get(9000 + i)); // \u968f\u673a\u504f\u5dee\u4e0d\u4f1a\u592a\u5927\uff0c\u5e94\u8be5\u4e0d\u8d85\u8fc710%\n            }\n        }\n\n        {\n            for (int i = 0; i < size; i++) {\n                cnt.put(9000 + i, 0);\n            }\n            List<ProviderInfo> providers = buildDiffWeightProviderList(size);\n            long start = System.currentTimeMillis();\n            for (int i = 0; i < total; i++) {\n                ProviderInfo provider = loadBalancer.doSelect(request, providers);\n                int port = provider.getPort();\n                cnt.put(port, cnt.get(port) + 1);\n            }\n            long end = System.currentTimeMillis();\n            LOGGER.info(\"elapsed\" + (end - start) + \"ms\");\n            LOGGER.info(\"avg \" + (end - start) * 1000 * 1000 / total + \"ns\");\n\n            Assert.assertTrue(cnt.get(9000) == 0);\n\n            int count = 0;\n            for (int i = 0; i < size; i++) {\n                count += i;\n            }\n            int per = total / count;\n            for (int i = 1; i < size; i++) {\n                Assert.assertTrue(per * i * 0.85 < cnt.get(9000 + i)\n                    && per * i * 1.15 > cnt.get(9000 + i)); // \u968f\u673a\u504f\u5dee\u4e0d\u4f1a\u592a\u5927\uff0c\u5e94\u8be5\u4e0d\u8d85\u8fc715%\n            }\n        }\n    }", "signature": "void doSelect()", "full_signature": "@Test public void doSelect()", "class_method_signature": "RandomLoadBalancerTest.doSelect()", "testcase": true, "constructor": false, "invocations": ["put", "buildSameWeightProviderList", "currentTimeMillis", "doSelect", "getPort", "put", "get", "currentTimeMillis", "info", "info", "assertTrue", "get", "get", "put", "buildDiffWeightProviderList", "currentTimeMillis", "doSelect", "getPort", "put", "get", "currentTimeMillis", "info", "info", "assertTrue", "get", "assertTrue", "get", "get"]}, "focal_class": {"identifier": "RandomLoadBalancer", "superclass": "extends AbstractLoadBalancer", "interfaces": "", "fields": [{"original_string": "private final Random random = new Random();", "modifier": "private final", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}], "methods": [{"identifier": "RandomLoadBalancer", "parameters": "(ConsumerBootstrap consumerBootstrap)", "modifiers": "public", "return": "", "signature": " RandomLoadBalancer(ConsumerBootstrap consumerBootstrap)", "full_signature": "public  RandomLoadBalancer(ConsumerBootstrap consumerBootstrap)", "class_method_signature": "RandomLoadBalancer.RandomLoadBalancer(ConsumerBootstrap consumerBootstrap)", "testcase": false, "constructor": true}, {"identifier": "doSelect", "parameters": "(SofaRequest invocation, List<ProviderInfo> providerInfos)", "modifiers": "@Override public", "return": "ProviderInfo", "signature": "ProviderInfo doSelect(SofaRequest invocation, List<ProviderInfo> providerInfos)", "full_signature": "@Override public ProviderInfo doSelect(SofaRequest invocation, List<ProviderInfo> providerInfos)", "class_method_signature": "RandomLoadBalancer.doSelect(SofaRequest invocation, List<ProviderInfo> providerInfos)", "testcase": false, "constructor": false}], "file": "core-impl/client/src/main/java/com/alipay/sofa/rpc/client/lb/RandomLoadBalancer.java"}, "focal_method": {"identifier": "doSelect", "parameters": "(SofaRequest invocation, List<ProviderInfo> providerInfos)", "modifiers": "@Override public", "return": "ProviderInfo", "body": "@Override\n    public ProviderInfo doSelect(SofaRequest invocation, List<ProviderInfo> providerInfos) {\n        ProviderInfo providerInfo = null;\n        int size = providerInfos.size(); // \u603b\u4e2a\u6570\n        int totalWeight = 0; // \u603b\u6743\u91cd\n        boolean isWeightSame = true; // \u6743\u91cd\u662f\u5426\u90fd\u4e00\u6837\n        for (int i = 0; i < size; i++) {\n            int weight = getWeight(providerInfos.get(i));\n            totalWeight += weight; // \u7d2f\u8ba1\u603b\u6743\u91cd\n            if (isWeightSame && i > 0 && weight != getWeight(providerInfos.get(i - 1))) {\n                isWeightSame = false; // \u8ba1\u7b97\u6240\u6709\u6743\u91cd\u662f\u5426\u4e00\u6837\n            }\n        }\n        if (totalWeight > 0 && !isWeightSame) {\n            // \u5982\u679c\u6743\u91cd\u4e0d\u76f8\u540c\u4e14\u6743\u91cd\u5927\u4e8e0\u5219\u6309\u603b\u6743\u91cd\u6570\u968f\u673a\n            int offset = random.nextInt(totalWeight);\n            // \u5e76\u786e\u5b9a\u968f\u673a\u503c\u843d\u5728\u54ea\u4e2a\u7247\u65ad\u4e0a\n            for (int i = 0; i < size; i++) {\n                offset -= getWeight(providerInfos.get(i));\n                if (offset < 0) {\n                    providerInfo = providerInfos.get(i);\n                    break;\n                }\n            }\n        } else {\n            // \u5982\u679c\u6743\u91cd\u76f8\u540c\u6216\u6743\u91cd\u4e3a0\u5219\u5747\u7b49\u968f\u673a\n            providerInfo = providerInfos.get(random.nextInt(size));\n        }\n        return providerInfo;\n    }", "signature": "ProviderInfo doSelect(SofaRequest invocation, List<ProviderInfo> providerInfos)", "full_signature": "@Override public ProviderInfo doSelect(SofaRequest invocation, List<ProviderInfo> providerInfos)", "class_method_signature": "RandomLoadBalancer.doSelect(SofaRequest invocation, List<ProviderInfo> providerInfos)", "testcase": false, "constructor": false, "invocations": ["size", "getWeight", "get", "getWeight", "get", "nextInt", "getWeight", "get", "get", "get", "nextInt"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}