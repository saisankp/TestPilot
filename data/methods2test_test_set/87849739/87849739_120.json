{"test_class": {"identifier": "JavaStringToEscapedJsonStringTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JavaStringToEscapedJsonString underTest;", "modifier": "private", "type": "JavaStringToEscapedJsonString", "declarator": "underTest", "var_name": "underTest"}], "file": "json/src/test/java/org/eclipse/ditto/json/JavaStringToEscapedJsonStringTest.java"}, "test_case": {"identifier": "convertJavaStringWithoutSpecialChars", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertJavaStringWithoutSpecialChars() {\n        final String javaString = \"Auf der Wiese blueht ein kleines Bluemelein.\";\n        final String expected = \"\\\"\" + javaString + \"\\\"\";\n\n        final String actual = underTest.apply(javaString);\n\n        assertThat(actual).isEqualTo(expected);\n    }", "signature": "void convertJavaStringWithoutSpecialChars()", "full_signature": "@Test public void convertJavaStringWithoutSpecialChars()", "class_method_signature": "JavaStringToEscapedJsonStringTest.convertJavaStringWithoutSpecialChars()", "testcase": true, "constructor": false, "invocations": ["apply", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "JavaStringToEscapedJsonString", "superclass": "", "interfaces": "implements UnaryOperator<String>", "fields": [{"original_string": "private static final JavaStringToEscapedJsonString INSTANCE =\n            new JavaStringToEscapedJsonString(JsonCharEscaper.getInstance());", "modifier": "private static final", "type": "JavaStringToEscapedJsonString", "declarator": "INSTANCE =\n            new JavaStringToEscapedJsonString(JsonCharEscaper.getInstance())", "var_name": "INSTANCE"}, {"original_string": "private static final char QUOTE = '\\\"';", "modifier": "private static final", "type": "char", "declarator": "QUOTE = '\\\"'", "var_name": "QUOTE"}, {"original_string": "private final Function<Integer, String> jsonCharEscaper;", "modifier": "private final", "type": "Function<Integer, String>", "declarator": "jsonCharEscaper", "var_name": "jsonCharEscaper"}], "methods": [{"identifier": "JavaStringToEscapedJsonString", "parameters": "(final Function<Integer, String> theJsonCharEscaper)", "modifiers": "private", "return": "", "signature": " JavaStringToEscapedJsonString(final Function<Integer, String> theJsonCharEscaper)", "full_signature": "private  JavaStringToEscapedJsonString(final Function<Integer, String> theJsonCharEscaper)", "class_method_signature": "JavaStringToEscapedJsonString.JavaStringToEscapedJsonString(final Function<Integer, String> theJsonCharEscaper)", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "JavaStringToEscapedJsonString", "signature": "JavaStringToEscapedJsonString getInstance()", "full_signature": "public static JavaStringToEscapedJsonString getInstance()", "class_method_signature": "JavaStringToEscapedJsonString.getInstance()", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final String javaString)", "modifiers": "@Override public", "return": "String", "signature": "String apply(final String javaString)", "full_signature": "@Override public String apply(final String javaString)", "class_method_signature": "JavaStringToEscapedJsonString.apply(final String javaString)", "testcase": false, "constructor": false}], "file": "json/src/main/java/org/eclipse/ditto/json/JavaStringToEscapedJsonString.java"}, "focal_method": {"identifier": "apply", "parameters": "(final String javaString)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String apply(final String javaString) {\n        requireNonNull(javaString, \"The Java String to be converted must not be null\");\n        final StringBuilder stringBuilder = new StringBuilder(javaString.length() + 2);\n        stringBuilder.append(QUOTE);\n        stringBuilder.append(javaString);\n        int i = 1; // offset of starting \" char\n        for (final char c : javaString.toCharArray()) {\n            @Nullable final String replacement = jsonCharEscaper.apply((int) c);\n            if (null != replacement) {\n                stringBuilder.replace(i, i + 1, replacement);\n                i += replacement.length();\n            } else {\n                i++;\n            }\n        }\n        stringBuilder.append(QUOTE);\n        return stringBuilder.toString();\n    }", "signature": "String apply(final String javaString)", "full_signature": "@Override public String apply(final String javaString)", "class_method_signature": "JavaStringToEscapedJsonString.apply(final String javaString)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "length", "append", "append", "toCharArray", "apply", "replace", "length", "append", "toString"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}