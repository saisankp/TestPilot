{"test_class": {"identifier": "ColorHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/core-map/src/test/java/org/orbisgis/coremap/renderer/se/parameter/color/ColorHelperTest.java"}, "test_case": {"identifier": "testGetColorWithAlpha", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetColorWithAlpha() {\n        System.out.println(\"getColorWithAlpha\");\n        Color c = new Color(40, 40, 40);\n        double alpha = 0.5;\n        Color expResult = new Color(40, 40, 40, 127);\n        Color result = ColorHelper.getColorWithAlpha(c, alpha);\n        assertEquals(expResult, result);\n        alpha = -1.0;\n        result = ColorHelper.getColorWithAlpha(c, alpha);\n        expResult = new Color(40, 40, 40, 0);\n        alpha = 2.0;\n        result = ColorHelper.getColorWithAlpha(c, alpha);\n        expResult = new Color(40, 40, 40, 255);\n    }", "signature": "void testGetColorWithAlpha()", "full_signature": "@Test public void testGetColorWithAlpha()", "class_method_signature": "ColorHelperTest.testGetColorWithAlpha()", "testcase": true, "constructor": false, "invocations": ["println", "getColorWithAlpha", "assertEquals", "getColorWithAlpha", "getColorWithAlpha"]}, "focal_class": {"identifier": "ColorHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MAX_RGB_VALUE = 255;", "modifier": "public static final", "type": "int", "declarator": "MAX_RGB_VALUE = 255", "var_name": "MAX_RGB_VALUE"}, {"original_string": "private static final float INTERVAL_SIZE = 60.0f;", "modifier": "private static final", "type": "float", "declarator": "INTERVAL_SIZE = 60.0f", "var_name": "INTERVAL_SIZE"}, {"original_string": "private static final float DEGREES = 360.0f;", "modifier": "private static final", "type": "float", "declarator": "DEGREES = 360.0f", "var_name": "DEGREES"}], "methods": [{"identifier": "ColorHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " ColorHelper()", "full_signature": "private  ColorHelper()", "class_method_signature": "ColorHelper.ColorHelper()", "testcase": false, "constructor": true}, {"identifier": "getColorWithAlpha", "parameters": "(Color c, double alpha)", "modifiers": "public static", "return": "Color", "signature": "Color getColorWithAlpha(Color c, double alpha)", "full_signature": "public static Color getColorWithAlpha(Color c, double alpha)", "class_method_signature": "ColorHelper.getColorWithAlpha(Color c, double alpha)", "testcase": false, "constructor": false}, {"identifier": "invert", "parameters": "(Color c)", "modifiers": "public static", "return": "Color", "signature": "Color invert(Color c)", "full_signature": "public static Color invert(Color c)", "class_method_signature": "ColorHelper.invert(Color c)", "testcase": false, "constructor": false}, {"identifier": "getColorFromHSL", "parameters": "(double h, double s, double l)", "modifiers": "public static", "return": "Color", "signature": "Color getColorFromHSL(double h, double s, double l)", "full_signature": "public static Color getColorFromHSL(double h, double s, double l)", "class_method_signature": "ColorHelper.getColorFromHSL(double h, double s, double l)", "testcase": false, "constructor": false}, {"identifier": "getColorSpaceImage", "parameters": "()", "modifiers": "public static", "return": "BufferedImage", "signature": "BufferedImage getColorSpaceImage()", "full_signature": "public static BufferedImage getColorSpaceImage()", "class_method_signature": "ColorHelper.getColorSpaceImage()", "testcase": false, "constructor": false}, {"identifier": "getHue", "parameters": "(Color color)", "modifiers": "public static", "return": "float", "signature": "float getHue(Color color)", "full_signature": "public static float getHue(Color color)", "class_method_signature": "ColorHelper.getHue(Color color)", "testcase": false, "constructor": false}, {"identifier": "getLightness", "parameters": "(Color color)", "modifiers": "public static", "return": "float", "signature": "float getLightness(Color color)", "full_signature": "public static float getLightness(Color color)", "class_method_signature": "ColorHelper.getLightness(Color color)", "testcase": false, "constructor": false}], "file": "bundles/core-map/src/main/java/org/orbisgis/coremap/renderer/se/parameter/color/ColorHelper.java"}, "focal_method": {"identifier": "getColorWithAlpha", "parameters": "(Color c, double alpha)", "modifiers": "public static", "return": "Color", "body": "public static Color getColorWithAlpha(Color c, double alpha) {\n        int a = (int) (MAX_RGB_VALUE * alpha);\n\n        if (a < 0) {\n            a = 0;\n        } else if (a > MAX_RGB_VALUE) {\n            a = MAX_RGB_VALUE;\n        }\n\n\t\tif (c != null){\n        \treturn new Color(c.getRed(), c.getGreen(), c.getBlue(), a);\n\t\t}else{\n        \treturn new Color(MAX_RGB_VALUE, MAX_RGB_VALUE, \n                        MAX_RGB_VALUE, a); // WhiteTrans\n\t\t}\n\n    }", "signature": "Color getColorWithAlpha(Color c, double alpha)", "full_signature": "public static Color getColorWithAlpha(Color c, double alpha)", "class_method_signature": "ColorHelper.getColorWithAlpha(Color c, double alpha)", "testcase": false, "constructor": false, "invocations": ["getRed", "getGreen", "getBlue"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}