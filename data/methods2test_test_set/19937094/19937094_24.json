{"test_class": {"identifier": "FileUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}], "file": "quickfixj-core/src/test/java/quickfix/FileUtilTest.java"}, "test_case": {"identifier": "testSessionIDFileName", "parameters": "()", "modifiers": "@Test // QFJ-775 public", "return": "void", "body": "@Test\n    // QFJ-775\n    public void testSessionIDFileName() {\n        SessionID sessionID = new SessionID(FixVersions.BEGINSTRING_FIX44, \"SENDER???\",\n                \"bla_/--/#()_bla\", \"!!!TARGET\", \"foo::bar\");\n        String sessionIdFileName = FileUtil.sessionIdFileName(sessionID);\n        assertEquals(\"FIX.4.4-SENDER____bla__--_____bla-___TARGET_foo__bar\", sessionIdFileName);\n        assertTrue(sessionIdFileName.matches(\"[a-zA-Z0-9-._]*\"));\n\n        sessionID = new SessionID(FixVersions.BEGINSTRING_FIX44, \"SENDER\", \"TARGET\");\n        sessionIdFileName = FileUtil.sessionIdFileName(sessionID);\n        assertEquals(\"FIX.4.4-SENDER-TARGET\", sessionIdFileName);\n    }", "signature": "void testSessionIDFileName()", "full_signature": "@Test // QFJ-775 public void testSessionIDFileName()", "class_method_signature": "FileUtilTest.testSessionIDFileName()", "testcase": true, "constructor": false, "invocations": ["sessionIdFileName", "assertEquals", "assertTrue", "matches", "sessionIdFileName", "assertEquals"]}, "focal_class": {"identifier": "FileUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "fileAppendPath", "parameters": "(String pathPrefix, String pathSuffix)", "modifiers": "public static", "return": "String", "signature": "String fileAppendPath(String pathPrefix, String pathSuffix)", "full_signature": "public static String fileAppendPath(String pathPrefix, String pathSuffix)", "class_method_signature": "FileUtil.fileAppendPath(String pathPrefix, String pathSuffix)", "testcase": false, "constructor": false}, {"identifier": "sessionIdFileName", "parameters": "(SessionID sessionID)", "modifiers": "public static", "return": "String", "signature": "String sessionIdFileName(SessionID sessionID)", "full_signature": "public static String sessionIdFileName(SessionID sessionID)", "class_method_signature": "FileUtil.sessionIdFileName(SessionID sessionID)", "testcase": false, "constructor": false}, {"identifier": "optionalField", "parameters": "(String delim, String value)", "modifiers": "private static", "return": "String", "signature": "String optionalField(String delim, String value)", "full_signature": "private static String optionalField(String delim, String value)", "class_method_signature": "FileUtil.optionalField(String delim, String value)", "testcase": false, "constructor": false}, {"identifier": "replaceIllegalCharactersInFileName", "parameters": "(String fileName)", "modifiers": "private static", "return": "String", "signature": "String replaceIllegalCharactersInFileName(String fileName)", "full_signature": "private static String replaceIllegalCharactersInFileName(String fileName)", "class_method_signature": "FileUtil.replaceIllegalCharactersInFileName(String fileName)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(Class<?> clazz, String name)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream open(Class<?> clazz, String name)", "full_signature": "public static InputStream open(Class<?> clazz, String name)", "class_method_signature": "FileUtil.open(Class<?> clazz, String name)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(Class<?> clazz, String name, Location... locations)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream open(Class<?> clazz, String name, Location... locations)", "full_signature": "public static InputStream open(Class<?> clazz, String name, Location... locations)", "class_method_signature": "FileUtil.open(Class<?> clazz, String name, Location... locations)", "testcase": false, "constructor": false}], "file": "quickfixj-core/src/main/java/quickfix/FileUtil.java"}, "focal_method": {"identifier": "sessionIdFileName", "parameters": "(SessionID sessionID)", "modifiers": "public static", "return": "String", "body": "public static String sessionIdFileName(SessionID sessionID) {\n        return replaceIllegalCharactersInFileName(sessionID.getBeginString() + \"-\"\n                + sessionID.getSenderCompID() + optionalField(\"_\", sessionID.getSenderSubID())\n                + optionalField(\"_\", sessionID.getSenderLocationID()) + \"-\"\n                + sessionID.getTargetCompID() + optionalField(\"_\", sessionID.getTargetSubID())\n                + optionalField(\"_\", sessionID.getTargetLocationID())\n                + optionalField(\"-\", sessionID.getSessionQualifier()));\n    }", "signature": "String sessionIdFileName(SessionID sessionID)", "full_signature": "public static String sessionIdFileName(SessionID sessionID)", "class_method_signature": "FileUtil.sessionIdFileName(SessionID sessionID)", "testcase": false, "constructor": false, "invocations": ["replaceIllegalCharactersInFileName", "getBeginString", "getSenderCompID", "optionalField", "getSenderSubID", "optionalField", "getSenderLocationID", "getTargetCompID", "optionalField", "getTargetSubID", "optionalField", "getTargetLocationID", "optionalField", "getSessionQualifier"]}, "repository": {"repo_id": 19937094, "url": "https://github.com/quickfix-j/quickfixj", "stars": 538, "created": "5/19/2014 10:04:08 AM +00:00", "updates": "2020-01-26T01:21:15+00:00", "fork": "False", "license": "licensed"}}