{"test_class": {"identifier": "MinimalZipEntryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int COMPRESSION_METHOD = 8;", "modifier": "private static final", "type": "int", "declarator": "COMPRESSION_METHOD = 8", "var_name": "COMPRESSION_METHOD"}, {"original_string": "private static final long CRC32 = 123;", "modifier": "private static final", "type": "long", "declarator": "CRC32 = 123", "var_name": "CRC32"}, {"original_string": "private static final long COMPRESSED_SIZE = 456;", "modifier": "private static final", "type": "long", "declarator": "COMPRESSED_SIZE = 456", "var_name": "COMPRESSED_SIZE"}, {"original_string": "private static final long UNCOMPRESSED_SIZE = 789;", "modifier": "private static final", "type": "long", "declarator": "UNCOMPRESSED_SIZE = 789", "var_name": "UNCOMPRESSED_SIZE"}, {"original_string": "private static final byte[] FILE_NAME_BYTES = new byte[] {'f', 'o', 'o', '.', 'b', 'a', 'r'};", "modifier": "private static final", "type": "byte[]", "declarator": "FILE_NAME_BYTES = new byte[] {'f', 'o', 'o', '.', 'b', 'a', 'r'}", "var_name": "FILE_NAME_BYTES"}, {"original_string": "private static final boolean GENERAL_PURPOSE_BIT_FLAG_11 = true;", "modifier": "private static final", "type": "boolean", "declarator": "GENERAL_PURPOSE_BIT_FLAG_11 = true", "var_name": "GENERAL_PURPOSE_BIT_FLAG_11"}, {"original_string": "private static final long FILE_OFFSET_OF_LOCAL_ENTRY = 1337;", "modifier": "private static final", "type": "long", "declarator": "FILE_OFFSET_OF_LOCAL_ENTRY = 1337", "var_name": "FILE_OFFSET_OF_LOCAL_ENTRY"}, {"original_string": "private static final long FILE_OFFSET_OF_COMPRESSED_DATA = 2674;", "modifier": "private static final", "type": "long", "declarator": "FILE_OFFSET_OF_COMPRESSED_DATA = 2674", "var_name": "FILE_OFFSET_OF_COMPRESSED_DATA"}, {"original_string": "private MinimalZipEntry defaultEntry;", "modifier": "private", "type": "MinimalZipEntry", "declarator": "defaultEntry", "var_name": "defaultEntry"}, {"original_string": "private MinimalZipEntry clonedDefaultEntry;", "modifier": "private", "type": "MinimalZipEntry", "declarator": "clonedDefaultEntry", "var_name": "clonedDefaultEntry"}, {"original_string": "private MinimalZipEntry alteredCompressionMethod;", "modifier": "private", "type": "MinimalZipEntry", "declarator": "alteredCompressionMethod", "var_name": "alteredCompressionMethod"}, {"original_string": "private MinimalZipEntry alteredCrc32;", "modifier": "private", "type": "MinimalZipEntry", "declarator": "alteredCrc32", "var_name": "alteredCrc32"}, {"original_string": "private MinimalZipEntry alteredCompressedSize;", "modifier": "private", "type": "MinimalZipEntry", "declarator": "alteredCompressedSize", "var_name": "alteredCompressedSize"}, {"original_string": "private MinimalZipEntry alteredUncompressedSize;", "modifier": "private", "type": "MinimalZipEntry", "declarator": "alteredUncompressedSize", "var_name": "alteredUncompressedSize"}, {"original_string": "private MinimalZipEntry alteredFileNameBytes;", "modifier": "private", "type": "MinimalZipEntry", "declarator": "alteredFileNameBytes", "var_name": "alteredFileNameBytes"}, {"original_string": "private MinimalZipEntry alteredGeneralPurposeBitFlag11;", "modifier": "private", "type": "MinimalZipEntry", "declarator": "alteredGeneralPurposeBitFlag11", "var_name": "alteredGeneralPurposeBitFlag11"}, {"original_string": "private MinimalZipEntry alteredOffsetOfLocalEntry;", "modifier": "private", "type": "MinimalZipEntry", "declarator": "alteredOffsetOfLocalEntry", "var_name": "alteredOffsetOfLocalEntry"}, {"original_string": "private MinimalZipEntry alteredFileOffsetOfCompressedData;", "modifier": "private", "type": "MinimalZipEntry", "declarator": "alteredFileOffsetOfCompressedData", "var_name": "alteredFileOffsetOfCompressedData"}, {"original_string": "private List<MinimalZipEntry> allMutations;", "modifier": "private", "type": "List<MinimalZipEntry>", "declarator": "allMutations", "var_name": "allMutations"}], "file": "feya/libraries/archive_diff/diff.generator/src/test/java/com/google/archivepatcher/generator/MinimalZipEntryTest.java"}, "test_case": {"identifier": "testHashCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHashCode() {\n    Set<MinimalZipEntry> hashSet = new HashSet<>();\n    hashSet.add(defaultEntry);\n    hashSet.add(clonedDefaultEntry);\n    Assert.assertEquals(1, hashSet.size());\n    hashSet.addAll(allMutations);\n    Assert.assertEquals(1 + allMutations.size(), hashSet.size());\n  }", "signature": "void testHashCode()", "full_signature": "@Test public void testHashCode()", "class_method_signature": "MinimalZipEntryTest.testHashCode()", "testcase": true, "constructor": false, "invocations": ["add", "add", "assertEquals", "size", "addAll", "assertEquals", "size", "size"]}, "focal_class": {"identifier": "MinimalZipEntry", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int compressionMethod;", "modifier": "private final", "type": "int", "declarator": "compressionMethod", "var_name": "compressionMethod"}, {"original_string": "private final long crc32OfUncompressedData;", "modifier": "private final", "type": "long", "declarator": "crc32OfUncompressedData", "var_name": "crc32OfUncompressedData"}, {"original_string": "private final long compressedSize;", "modifier": "private final", "type": "long", "declarator": "compressedSize", "var_name": "compressedSize"}, {"original_string": "private final long uncompressedSize;", "modifier": "private final", "type": "long", "declarator": "uncompressedSize", "var_name": "uncompressedSize"}, {"original_string": "private final byte[] fileNameBytes;", "modifier": "private final", "type": "byte[]", "declarator": "fileNameBytes", "var_name": "fileNameBytes"}, {"original_string": "private final boolean generalPurposeFlagBit11;", "modifier": "private final", "type": "boolean", "declarator": "generalPurposeFlagBit11", "var_name": "generalPurposeFlagBit11"}, {"original_string": "private final long fileOffsetOfLocalEntry;", "modifier": "private final", "type": "long", "declarator": "fileOffsetOfLocalEntry", "var_name": "fileOffsetOfLocalEntry"}, {"original_string": "private long fileOffsetOfCompressedData = -1;", "modifier": "private", "type": "long", "declarator": "fileOffsetOfCompressedData = -1", "var_name": "fileOffsetOfCompressedData"}], "methods": [{"identifier": "MinimalZipEntry", "parameters": "(\n      int compressionMethod,\n      long crc32OfUncompressedData,\n      long compressedSize,\n      long uncompressedSize,\n      byte[] fileNameBytes,\n      boolean generalPurposeFlagBit11,\n      long fileOffsetOfLocalEntry)", "modifiers": "public", "return": "", "signature": " MinimalZipEntry(\n      int compressionMethod,\n      long crc32OfUncompressedData,\n      long compressedSize,\n      long uncompressedSize,\n      byte[] fileNameBytes,\n      boolean generalPurposeFlagBit11,\n      long fileOffsetOfLocalEntry)", "full_signature": "public  MinimalZipEntry(\n      int compressionMethod,\n      long crc32OfUncompressedData,\n      long compressedSize,\n      long uncompressedSize,\n      byte[] fileNameBytes,\n      boolean generalPurposeFlagBit11,\n      long fileOffsetOfLocalEntry)", "class_method_signature": "MinimalZipEntry.MinimalZipEntry(\n      int compressionMethod,\n      long crc32OfUncompressedData,\n      long compressedSize,\n      long uncompressedSize,\n      byte[] fileNameBytes,\n      boolean generalPurposeFlagBit11,\n      long fileOffsetOfLocalEntry)", "testcase": false, "constructor": true}, {"identifier": "setFileOffsetOfCompressedData", "parameters": "(long offset)", "modifiers": "public", "return": "void", "signature": "void setFileOffsetOfCompressedData(long offset)", "full_signature": "public void setFileOffsetOfCompressedData(long offset)", "class_method_signature": "MinimalZipEntry.setFileOffsetOfCompressedData(long offset)", "testcase": false, "constructor": false}, {"identifier": "getCompressionMethod", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCompressionMethod()", "full_signature": "public int getCompressionMethod()", "class_method_signature": "MinimalZipEntry.getCompressionMethod()", "testcase": false, "constructor": false}, {"identifier": "getCrc32OfUncompressedData", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCrc32OfUncompressedData()", "full_signature": "public long getCrc32OfUncompressedData()", "class_method_signature": "MinimalZipEntry.getCrc32OfUncompressedData()", "testcase": false, "constructor": false}, {"identifier": "getCompressedSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCompressedSize()", "full_signature": "public long getCompressedSize()", "class_method_signature": "MinimalZipEntry.getCompressedSize()", "testcase": false, "constructor": false}, {"identifier": "getUncompressedSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getUncompressedSize()", "full_signature": "public long getUncompressedSize()", "class_method_signature": "MinimalZipEntry.getUncompressedSize()", "testcase": false, "constructor": false}, {"identifier": "getFileNameBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getFileNameBytes()", "full_signature": "public byte[] getFileNameBytes()", "class_method_signature": "MinimalZipEntry.getFileNameBytes()", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFileName()", "full_signature": "public String getFileName()", "class_method_signature": "MinimalZipEntry.getFileName()", "testcase": false, "constructor": false}, {"identifier": "getGeneralPurposeFlagBit11", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getGeneralPurposeFlagBit11()", "full_signature": "public boolean getGeneralPurposeFlagBit11()", "class_method_signature": "MinimalZipEntry.getGeneralPurposeFlagBit11()", "testcase": false, "constructor": false}, {"identifier": "getFileOffsetOfLocalEntry", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getFileOffsetOfLocalEntry()", "full_signature": "public long getFileOffsetOfLocalEntry()", "class_method_signature": "MinimalZipEntry.getFileOffsetOfLocalEntry()", "testcase": false, "constructor": false}, {"identifier": "getFileOffsetOfCompressedData", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getFileOffsetOfCompressedData()", "full_signature": "public long getFileOffsetOfCompressedData()", "class_method_signature": "MinimalZipEntry.getFileOffsetOfCompressedData()", "testcase": false, "constructor": false}, {"identifier": "isDeflateCompressed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDeflateCompressed()", "full_signature": "public boolean isDeflateCompressed()", "class_method_signature": "MinimalZipEntry.isDeflateCompressed()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MinimalZipEntry.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "MinimalZipEntry.equals(Object obj)", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.generator/src/main/java/com/google/archivepatcher/generator/MinimalZipEntry.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + (int) (compressedSize ^ (compressedSize >>> 32));\n    result = prime * result + compressionMethod;\n    result = prime * result + (int) (crc32OfUncompressedData ^ (crc32OfUncompressedData >>> 32));\n    result = prime * result + Arrays.hashCode(fileNameBytes);\n    result =\n        prime * result + (int) (fileOffsetOfCompressedData ^ (fileOffsetOfCompressedData >>> 32));\n    result = prime * result + (int) (fileOffsetOfLocalEntry ^ (fileOffsetOfLocalEntry >>> 32));\n    result = prime * result + (generalPurposeFlagBit11 ? 1231 : 1237);\n    result = prime * result + (int) (uncompressedSize ^ (uncompressedSize >>> 32));\n    return result;\n  }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MinimalZipEntry.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}