{"test_class": {"identifier": "DiscreteNaiveBayesModelTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/naivebayes/discrete/DiscreteNaiveBayesModelTest.java"}, "test_case": {"identifier": "testPredictWithTwoClasses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPredictWithTwoClasses() {\n        double first = 1;\n        double second = 2;\n        double[][][] probabilities = new double[][][] {\n            {{.5, .5}, {.2, .3, .5}, {2. / 3., 1. / 3.}, {.4, .1, .5}, {.5, .5}},\n            {{0, 1}, {1. / 7, 2. / 7, 4. / 7}, {4. / 7, 3. / 7}, {2. / 7, 3. / 7, 2. / 7}, {4. / 7, 3. / 7,}}\n        };\n\n        double[] classProbabilities = new double[] {6. / 13, 7. / 13};\n        double[][] thresholds = new double[][] {{.5}, {.2, .7}, {.5}, {.5, 1.5}, {.5}};\n        DiscreteNaiveBayesModel mdl = new DiscreteNaiveBayesModel(probabilities, classProbabilities, new double[] {first, second}, thresholds, new DiscreteNaiveBayesSumsHolder());\n        Vector observation = VectorUtils.of(2, 0, 1, 2, 0);\n\n        Assert.assertEquals(second, mdl.predict(observation), 0.0001);\n    }", "signature": "void testPredictWithTwoClasses()", "full_signature": "@Test public void testPredictWithTwoClasses()", "class_method_signature": "DiscreteNaiveBayesModelTest.testPredictWithTwoClasses()", "testcase": true, "constructor": false, "invocations": ["of", "assertEquals", "predict"]}, "focal_class": {"identifier": "DiscreteNaiveBayesModel", "superclass": "", "interfaces": "implements IgniteModel<Vector, Double>, Exportable<DiscreteNaiveBayesModel>, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -127386523291350345L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -127386523291350345L", "var_name": "serialVersionUID"}, {"original_string": "private final double[][][] probabilities;", "modifier": "private final", "type": "double[][][]", "declarator": "probabilities", "var_name": "probabilities"}, {"original_string": "private final double[] clsProbabilities;", "modifier": "private final", "type": "double[]", "declarator": "clsProbabilities", "var_name": "clsProbabilities"}, {"original_string": "private final double[] labels;", "modifier": "private final", "type": "double[]", "declarator": "labels", "var_name": "labels"}, {"original_string": "private final double[][] bucketThresholds;", "modifier": "private final", "type": "double[][]", "declarator": "bucketThresholds", "var_name": "bucketThresholds"}, {"original_string": "private final DiscreteNaiveBayesSumsHolder sumsHolder;", "modifier": "private final", "type": "DiscreteNaiveBayesSumsHolder", "declarator": "sumsHolder", "var_name": "sumsHolder"}], "methods": [{"identifier": "DiscreteNaiveBayesModel", "parameters": "(double[][][] probabilities, double[] clsProbabilities, double[] labels,\n        double[][] bucketThresholds, DiscreteNaiveBayesSumsHolder sumsHolder)", "modifiers": "public", "return": "", "signature": " DiscreteNaiveBayesModel(double[][][] probabilities, double[] clsProbabilities, double[] labels,\n        double[][] bucketThresholds, DiscreteNaiveBayesSumsHolder sumsHolder)", "full_signature": "public  DiscreteNaiveBayesModel(double[][][] probabilities, double[] clsProbabilities, double[] labels,\n        double[][] bucketThresholds, DiscreteNaiveBayesSumsHolder sumsHolder)", "class_method_signature": "DiscreteNaiveBayesModel.DiscreteNaiveBayesModel(double[][][] probabilities, double[] clsProbabilities, double[] labels,\n        double[][] bucketThresholds, DiscreteNaiveBayesSumsHolder sumsHolder)", "testcase": false, "constructor": true}, {"identifier": "saveModel", "parameters": "(Exporter<DiscreteNaiveBayesModel, P> exporter, P path)", "modifiers": "@Override public", "return": "void", "signature": "void saveModel(Exporter<DiscreteNaiveBayesModel, P> exporter, P path)", "full_signature": "@Override public void saveModel(Exporter<DiscreteNaiveBayesModel, P> exporter, P path)", "class_method_signature": "DiscreteNaiveBayesModel.saveModel(Exporter<DiscreteNaiveBayesModel, P> exporter, P path)", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "(Vector vector)", "modifiers": "@Override public", "return": "Double", "signature": "Double predict(Vector vector)", "full_signature": "@Override public Double predict(Vector vector)", "class_method_signature": "DiscreteNaiveBayesModel.predict(Vector vector)", "testcase": false, "constructor": false}, {"identifier": "getProbabilities", "parameters": "()", "modifiers": "public", "return": "double[][][]", "signature": "double[][][] getProbabilities()", "full_signature": "public double[][][] getProbabilities()", "class_method_signature": "DiscreteNaiveBayesModel.getProbabilities()", "testcase": false, "constructor": false}, {"identifier": "getClsProbabilities", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getClsProbabilities()", "full_signature": "public double[] getClsProbabilities()", "class_method_signature": "DiscreteNaiveBayesModel.getClsProbabilities()", "testcase": false, "constructor": false}, {"identifier": "getBucketThresholds", "parameters": "()", "modifiers": "public", "return": "double[][]", "signature": "double[][] getBucketThresholds()", "full_signature": "public double[][] getBucketThresholds()", "class_method_signature": "DiscreteNaiveBayesModel.getBucketThresholds()", "testcase": false, "constructor": false}, {"identifier": "getSumsHolder", "parameters": "()", "modifiers": "public", "return": "DiscreteNaiveBayesSumsHolder", "signature": "DiscreteNaiveBayesSumsHolder getSumsHolder()", "full_signature": "public DiscreteNaiveBayesSumsHolder getSumsHolder()", "class_method_signature": "DiscreteNaiveBayesModel.getSumsHolder()", "testcase": false, "constructor": false}, {"identifier": "toBucketNumber", "parameters": "(double val, double[] thresholds)", "modifiers": "private", "return": "int", "signature": "int toBucketNumber(double val, double[] thresholds)", "full_signature": "private int toBucketNumber(double val, double[] thresholds)", "class_method_signature": "DiscreteNaiveBayesModel.toBucketNumber(double val, double[] thresholds)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/naivebayes/discrete/DiscreteNaiveBayesModel.java"}, "focal_method": {"identifier": "predict", "parameters": "(Vector vector)", "modifiers": "@Override public", "return": "Double", "body": "@Override public Double predict(Vector vector) {\n        double maxProbapilityPower = -Double.MAX_VALUE;\n        int maxLabelIndex = -1;\n\n        for (int i = 0; i < clsProbabilities.length; i++) {\n            double probabilityPower = Math.log(clsProbabilities[i]);\n\n            for (int j = 0; j < probabilities[0].length; j++) {\n                int x = toBucketNumber(vector.get(j), bucketThresholds[j]);\n                double p = probabilities[i][j][x];\n                probabilityPower += (p > 0 ? Math.log(p) : .0);\n            }\n\n            if (probabilityPower > maxProbapilityPower) {\n                maxLabelIndex = i;\n                maxProbapilityPower = probabilityPower;\n            }\n        }\n        return labels[maxLabelIndex];\n    }", "signature": "Double predict(Vector vector)", "full_signature": "@Override public Double predict(Vector vector)", "class_method_signature": "DiscreteNaiveBayesModel.predict(Vector vector)", "testcase": false, "constructor": false, "invocations": ["log", "toBucketNumber", "get", "log"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}