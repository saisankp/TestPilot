{"test_class": {"identifier": "ActorSystemTest", "superclass": "", "interfaces": "", "fields": [], "file": "Actor-Lite/src/test/java/com/actors/ActorSystemTest.java"}, "test_case": {"identifier": "registerActorAndDisposableThroughRegisterWithActor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void registerActorAndDisposableThroughRegisterWithActor() throws Exception {\n        ActorSystemInstance actorSystem = ActorSystemInstance\n                .getInstance(\"registerActorAndDisposableThroughRegisterWithActor\");\n\n        final TestActorTwo actor = new TestActorTwo();\n\n        actorSystem.register(actor);\n\n        assertTrue(actorSystem.getMailboxes().containsKey(TestActorTwo.class).blockingGet()\n                && !actorSystem.getActorsDisposables().get(TestActorTwo.class).blockingFirst().isDisposed());\n\n    }", "signature": "void registerActorAndDisposableThroughRegisterWithActor()", "full_signature": "@Test public void registerActorAndDisposableThroughRegisterWithActor()", "class_method_signature": "ActorSystemTest.registerActorAndDisposableThroughRegisterWithActor()", "testcase": true, "constructor": false, "invocations": ["getInstance", "register", "assertTrue", "blockingGet", "containsKey", "getMailboxes", "isDisposed", "blockingFirst", "get", "getActorsDisposables"]}, "focal_class": {"identifier": "ActorSystem", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ActorSystemInstance implementation = ActorSystemInstance.getInstance(null);", "modifier": "private static final", "type": "ActorSystemInstance", "declarator": "implementation = ActorSystemInstance.getInstance(null)", "var_name": "implementation"}], "methods": [{"identifier": "ActorSystem", "parameters": "()", "modifiers": "private", "return": "", "signature": " ActorSystem()", "full_signature": "private  ActorSystem()", "class_method_signature": "ActorSystem.ActorSystem()", "testcase": false, "constructor": true}, {"identifier": "createMessage", "parameters": "(int id)", "modifiers": "public static", "return": "MessageBuilder", "signature": "MessageBuilder createMessage(int id)", "full_signature": "public static MessageBuilder createMessage(int id)", "class_method_signature": "ActorSystem.createMessage(int id)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(int messageId, @NonNull Class<?>... actorsAddresses)", "modifiers": "public static", "return": "void", "signature": "void send(int messageId, @NonNull Class<?>... actorsAddresses)", "full_signature": "public static void send(int messageId, @NonNull Class<?>... actorsAddresses)", "class_method_signature": "ActorSystem.send(int messageId, @NonNull Class<?>... actorsAddresses)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(final Message message, @NonNull Class<?>... actorsAddresses)", "modifiers": "public static", "return": "void", "signature": "void send(final Message message, @NonNull Class<?>... actorsAddresses)", "full_signature": "public static void send(final Message message, @NonNull Class<?>... actorsAddresses)", "class_method_signature": "ActorSystem.send(final Message message, @NonNull Class<?>... actorsAddresses)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(int messageId, @NonNull String... actorsClassNames)", "modifiers": "public static", "return": "void", "signature": "void send(int messageId, @NonNull String... actorsClassNames)", "full_signature": "public static void send(int messageId, @NonNull String... actorsClassNames)", "class_method_signature": "ActorSystem.send(int messageId, @NonNull String... actorsClassNames)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(final Message message, @NonNull String... actorsClassNames)", "modifiers": "public static", "return": "void", "signature": "void send(final Message message, @NonNull String... actorsClassNames)", "full_signature": "public static void send(final Message message, @NonNull String... actorsClassNames)", "class_method_signature": "ActorSystem.send(final Message message, @NonNull String... actorsClassNames)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(@NonNull Object actor,\n                                @NonNull final Scheduler observeOn,\n                                @NonNull final Consumer<Message> onMessageReceived)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void register(@NonNull Object actor,\n                                @NonNull final Scheduler observeOn,\n                                @NonNull final Consumer<Message> onMessageReceived)", "full_signature": "@Deprecated public static void register(@NonNull Object actor,\n                                @NonNull final Scheduler observeOn,\n                                @NonNull final Consumer<Message> onMessageReceived)", "class_method_signature": "ActorSystem.register(@NonNull Object actor,\n                                @NonNull final Scheduler observeOn,\n                                @NonNull final Consumer<Message> onMessageReceived)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(@NonNull final Actor actor)", "modifiers": "public static", "return": "void", "signature": "void register(@NonNull final Actor actor)", "full_signature": "public static void register(@NonNull final Actor actor)", "class_method_signature": "ActorSystem.register(@NonNull final Actor actor)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(@NonNull Object actor, @NonNull Consumer<MailboxBuilder> mailboxBuilder)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void register(@NonNull Object actor, @NonNull Consumer<MailboxBuilder> mailboxBuilder)", "full_signature": "@Deprecated public static void register(@NonNull Object actor, @NonNull Consumer<MailboxBuilder> mailboxBuilder)", "class_method_signature": "ActorSystem.register(@NonNull Object actor, @NonNull Consumer<MailboxBuilder> mailboxBuilder)", "testcase": false, "constructor": false}, {"identifier": "postpone", "parameters": "(@NonNull Object actor)", "modifiers": "public static", "return": "void", "signature": "void postpone(@NonNull Object actor)", "full_signature": "public static void postpone(@NonNull Object actor)", "class_method_signature": "ActorSystem.postpone(@NonNull Object actor)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(@NonNull Object actor)", "modifiers": "public static", "return": "void", "signature": "void unregister(@NonNull Object actor)", "full_signature": "public static void unregister(@NonNull Object actor)", "class_method_signature": "ActorSystem.unregister(@NonNull Object actor)", "testcase": false, "constructor": false}], "file": "Actor-Lite/src/main/java/com/actors/ActorSystem.java"}, "focal_method": {"identifier": "register", "parameters": "(@NonNull Object actor,\n                                @NonNull final Scheduler observeOn,\n                                @NonNull final Consumer<Message> onMessageReceived)", "modifiers": "@Deprecated public static", "return": "void", "body": "@Deprecated\n    public static void register(@NonNull Object actor,\n                                @NonNull final Scheduler observeOn,\n                                @NonNull final Consumer<Message> onMessageReceived) {\n        implementation.register(actor, observeOn, onMessageReceived);\n    }", "signature": "void register(@NonNull Object actor,\n                                @NonNull final Scheduler observeOn,\n                                @NonNull final Consumer<Message> onMessageReceived)", "full_signature": "@Deprecated public static void register(@NonNull Object actor,\n                                @NonNull final Scheduler observeOn,\n                                @NonNull final Consumer<Message> onMessageReceived)", "class_method_signature": "ActorSystem.register(@NonNull Object actor,\n                                @NonNull final Scheduler observeOn,\n                                @NonNull final Consumer<Message> onMessageReceived)", "testcase": false, "constructor": false, "invocations": ["register"]}, "repository": {"repo_id": 115371169, "url": "https://github.com/Ahmed-Adel-Ismail/ActorLite", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 42, "size": 265, "license": "licensed"}}