{"test_class": {"identifier": "BeanUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/utils/BeanUtilsTest.java"}, "test_case": {"identifier": "testGetProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetProperty() throws Exception {\n        TestBean config = new TestBean();\n        config.setAlias(\"1111aaaa\");\n        config.setHeartbeat(2000);\n        config.setRegister(false);\n        Assert.assertEquals(BeanUtils.getProperty(config, \"alias\", String.class), \"1111aaaa\");\n        Assert.assertTrue(BeanUtils.getProperty(config, \"heartbeat\", int.class) == 2000);\n        Assert.assertTrue((Integer) BeanUtils.getProperty(config, \"heartbeat\", null) == 2000);\n        Assert.assertFalse(BeanUtils.getProperty(config, \"register\", boolean.class));\n        boolean error = false;\n        try {\n            BeanUtils.getProperty(config, \"xxx\", String.class);\n        } catch (Exception e) {\n            error = true;\n        }\n        Assert.assertTrue(error);\n    }", "signature": "void testGetProperty()", "full_signature": "@Test public void testGetProperty()", "class_method_signature": "BeanUtilsTest.testGetProperty()", "testcase": true, "constructor": false, "invocations": ["setAlias", "setHeartbeat", "setRegister", "assertEquals", "getProperty", "assertTrue", "getProperty", "assertTrue", "getProperty", "assertFalse", "getProperty", "getProperty", "assertTrue"]}, "focal_class": {"identifier": "BeanUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "setProperty", "parameters": "(Object bean, String name, Class<T> clazz, T value)", "modifiers": "public static", "return": "void", "signature": "void setProperty(Object bean, String name, Class<T> clazz, T value)", "full_signature": "public static void setProperty(Object bean, String name, Class<T> clazz, T value)", "class_method_signature": "BeanUtils.setProperty(Object bean, String name, Class<T> clazz, T value)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(Object bean, String name, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T getProperty(Object bean, String name, Class<T> clazz)", "full_signature": "public static T getProperty(Object bean, String name, Class<T> clazz)", "class_method_signature": "BeanUtils.getProperty(Object bean, String name, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "copyPropertiesToMap", "parameters": "(Object bean, String prefix, Map<String, Object> map)", "modifiers": "public static", "return": "void", "signature": "void copyPropertiesToMap(Object bean, String prefix, Map<String, Object> map)", "full_signature": "public static void copyPropertiesToMap(Object bean, String prefix, Map<String, Object> map)", "class_method_signature": "BeanUtils.copyPropertiesToMap(Object bean, String prefix, Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "copyProperties", "parameters": "(Object src, Object dst, String... ignoreFields)", "modifiers": "public static", "return": "void", "signature": "void copyProperties(Object src, Object dst, String... ignoreFields)", "full_signature": "public static void copyProperties(Object src, Object dst, String... ignoreFields)", "class_method_signature": "BeanUtils.copyProperties(Object src, Object dst, String... ignoreFields)", "testcase": false, "constructor": false}, {"identifier": "getModifiedFields", "parameters": "(T src, T dst, String... ignoreFields)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getModifiedFields(T src, T dst, String... ignoreFields)", "full_signature": "public static List<String> getModifiedFields(T src, T dst, String... ignoreFields)", "class_method_signature": "BeanUtils.getModifiedFields(T src, T dst, String... ignoreFields)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/utils/BeanUtils.java"}, "focal_method": {"identifier": "getProperty", "parameters": "(Object bean, String name, Class<T> clazz)", "modifiers": "public static", "return": "T", "body": "public static <T> T getProperty(Object bean, String name, Class<T> clazz) throws Exception {\n        Method method = ReflectUtils.getPropertyGetterMethod(bean.getClass(), name);\n        if (method.isAccessible()) {\n            return (T) method.invoke(bean);\n        } else {\n            try {\n                method.setAccessible(true);\n                return (T) method.invoke(bean);\n            } finally {\n                method.setAccessible(false);\n            }\n        }\n    }", "signature": "T getProperty(Object bean, String name, Class<T> clazz)", "full_signature": "public static T getProperty(Object bean, String name, Class<T> clazz)", "class_method_signature": "BeanUtils.getProperty(Object bean, String name, Class<T> clazz)", "testcase": false, "constructor": false, "invocations": ["getPropertyGetterMethod", "getClass", "isAccessible", "invoke", "setAccessible", "invoke", "setAccessible"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}