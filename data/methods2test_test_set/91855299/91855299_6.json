{"test_class": {"identifier": "PluginLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PluginLoader loader;", "modifier": "private", "type": "PluginLoader", "declarator": "loader", "var_name": "loader"}, {"original_string": "private DataTypes dataTypes;", "modifier": "private", "type": "DataTypes", "declarator": "dataTypes", "var_name": "dataTypes"}, {"original_string": "private SourceTypes sourceTypes;", "modifier": "private", "type": "SourceTypes", "declarator": "sourceTypes", "var_name": "sourceTypes"}, {"original_string": "private Components components;", "modifier": "private", "type": "Components", "declarator": "components", "var_name": "components"}, {"original_string": "private Themes themes;", "modifier": "private", "type": "Themes", "declarator": "themes", "var_name": "themes"}, {"original_string": "private TabInfoRegistry tabInfoRegistry;", "modifier": "private", "type": "TabInfoRegistry", "declarator": "tabInfoRegistry", "var_name": "tabInfoRegistry"}], "file": "app/src/test/java/edu/wpi/first/shuffleboard/app/plugin/PluginLoaderTest.java"}, "test_case": {"identifier": "testUnload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testUnload() {\n    // given\n    MockPlugin plugin = new MockPlugin();\n    assumeTrue(loader.load(plugin));\n\n    // when\n    assertTrue(loader.unload(plugin), \"The plugin was not unloaded\");\n\n    // then\n    assertFalse(plugin.isLoaded());\n    assertFalse(loader.getLoadedPlugins().contains(plugin));\n    assertTrue(loader.getKnownPlugins().contains(plugin));\n    assertFalse(dataTypes.isRegistered(MockPlugin.dataType));\n    assertFalse(sourceTypes.isRegistered(MockPlugin.sourceType));\n    assertFalse(components.isRegistered(MockPlugin.component));\n    assertFalse(themes.isRegistered(MockPlugin.theme));\n  }", "signature": "void testUnload()", "full_signature": "@Test public void testUnload()", "class_method_signature": "PluginLoaderTest.testUnload()", "testcase": true, "constructor": false, "invocations": ["assumeTrue", "load", "assertTrue", "unload", "assertFalse", "isLoaded", "assertFalse", "contains", "getLoadedPlugins", "assertTrue", "contains", "getKnownPlugins", "assertFalse", "isRegistered", "assertFalse", "isRegistered", "assertFalse", "isRegistered", "assertFalse", "isRegistered"]}, "focal_class": {"identifier": "PluginLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(PluginLoader.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(PluginLoader.class.getName())", "var_name": "log"}, {"original_string": "private static final PluginLoader defaultLoader =\n      new PluginLoader(\n          DataTypes.getDefault(),\n          SourceTypes.getDefault(),\n          Components.getDefault(),\n          Themes.getDefault(),\n          TabInfoRegistry.getDefault(),\n          Converters.getDefault(),\n          PropertyParsers.getDefault());", "modifier": "private static final", "type": "PluginLoader", "declarator": "defaultLoader =\n      new PluginLoader(\n          DataTypes.getDefault(),\n          SourceTypes.getDefault(),\n          Components.getDefault(),\n          Themes.getDefault(),\n          TabInfoRegistry.getDefault(),\n          Converters.getDefault(),\n          PropertyParsers.getDefault())", "var_name": "defaultLoader"}, {"original_string": "private final ObservableSet<Plugin> loadedPlugins = FXCollections.observableSet(new LinkedHashSet<>());", "modifier": "private final", "type": "ObservableSet<Plugin>", "declarator": "loadedPlugins = FXCollections.observableSet(new LinkedHashSet<>())", "var_name": "loadedPlugins"}, {"original_string": "private final Set<Class<? extends Plugin>> knownPluginClasses = new HashSet<>();", "modifier": "private final", "type": "Set<Class<? extends Plugin>>", "declarator": "knownPluginClasses = new HashSet<>()", "var_name": "knownPluginClasses"}, {"original_string": "private final ObservableList<Plugin> knownPlugins = FXCollections.observableArrayList();", "modifier": "private final", "type": "ObservableList<Plugin>", "declarator": "knownPlugins = FXCollections.observableArrayList()", "var_name": "knownPlugins"}, {"original_string": "private final ObservableList<ClassLoader> classLoaders = FXCollections.observableArrayList();", "modifier": "private final", "type": "ObservableList<ClassLoader>", "declarator": "classLoaders = FXCollections.observableArrayList()", "var_name": "classLoaders"}, {"original_string": "private final DataTypes dataTypes;", "modifier": "private final", "type": "DataTypes", "declarator": "dataTypes", "var_name": "dataTypes"}, {"original_string": "private final SourceTypes sourceTypes;", "modifier": "private final", "type": "SourceTypes", "declarator": "sourceTypes", "var_name": "sourceTypes"}, {"original_string": "private final Components components;", "modifier": "private final", "type": "Components", "declarator": "components", "var_name": "components"}, {"original_string": "private final Themes themes;", "modifier": "private final", "type": "Themes", "declarator": "themes", "var_name": "themes"}, {"original_string": "private final TabInfoRegistry tabInfoRegistry;", "modifier": "private final", "type": "TabInfoRegistry", "declarator": "tabInfoRegistry", "var_name": "tabInfoRegistry"}, {"original_string": "private final Converters converters;", "modifier": "private final", "type": "Converters", "declarator": "converters", "var_name": "converters"}, {"original_string": "private final PropertyParsers propertyParsers;", "modifier": "private final", "type": "PropertyParsers", "declarator": "propertyParsers", "var_name": "propertyParsers"}], "methods": [{"identifier": "PluginLoader", "parameters": "(DataTypes dataTypes,\n                      SourceTypes sourceTypes,\n                      Components components,\n                      Themes themes,\n                      TabInfoRegistry tabInfoRegistry,\n                      Converters converters,\n                      PropertyParsers propertyParsers)", "modifiers": "public", "return": "", "signature": " PluginLoader(DataTypes dataTypes,\n                      SourceTypes sourceTypes,\n                      Components components,\n                      Themes themes,\n                      TabInfoRegistry tabInfoRegistry,\n                      Converters converters,\n                      PropertyParsers propertyParsers)", "full_signature": "public  PluginLoader(DataTypes dataTypes,\n                      SourceTypes sourceTypes,\n                      Components components,\n                      Themes themes,\n                      TabInfoRegistry tabInfoRegistry,\n                      Converters converters,\n                      PropertyParsers propertyParsers)", "class_method_signature": "PluginLoader.PluginLoader(DataTypes dataTypes,\n                      SourceTypes sourceTypes,\n                      Components components,\n                      Themes themes,\n                      TabInfoRegistry tabInfoRegistry,\n                      Converters converters,\n                      PropertyParsers propertyParsers)", "testcase": false, "constructor": true}, {"identifier": "getDefault", "parameters": "()", "modifiers": "public static", "return": "PluginLoader", "signature": "PluginLoader getDefault()", "full_signature": "public static PluginLoader getDefault()", "class_method_signature": "PluginLoader.getDefault()", "testcase": false, "constructor": false}, {"identifier": "loadAllJarsFromDir", "parameters": "(Path directory)", "modifiers": "public", "return": "void", "signature": "void loadAllJarsFromDir(Path directory)", "full_signature": "public void loadAllJarsFromDir(Path directory)", "class_method_signature": "PluginLoader.loadAllJarsFromDir(Path directory)", "testcase": false, "constructor": false}, {"identifier": "loadPluginJar", "parameters": "(URI jarUri)", "modifiers": "public", "return": "void", "signature": "void loadPluginJar(URI jarUri)", "full_signature": "public void loadPluginJar(URI jarUri)", "class_method_signature": "PluginLoader.loadPluginJar(URI jarUri)", "testcase": false, "constructor": false}, {"identifier": "comparePluginsByDependencyGraph", "parameters": "(Class<? extends Plugin> p1, Class<? extends Plugin> p2)", "modifiers": "@VisibleForTesting", "return": "int", "signature": "int comparePluginsByDependencyGraph(Class<? extends Plugin> p1, Class<? extends Plugin> p2)", "full_signature": "@VisibleForTesting int comparePluginsByDependencyGraph(Class<? extends Plugin> p1, Class<? extends Plugin> p2)", "class_method_signature": "PluginLoader.comparePluginsByDependencyGraph(Class<? extends Plugin> p1, Class<? extends Plugin> p2)", "testcase": false, "constructor": false}, {"identifier": "loadPluginClass", "parameters": "(Class<? extends Plugin> clazz)", "modifiers": "public", "return": "boolean", "signature": "boolean loadPluginClass(Class<? extends Plugin> clazz)", "full_signature": "public boolean loadPluginClass(Class<? extends Plugin> clazz)", "class_method_signature": "PluginLoader.loadPluginClass(Class<? extends Plugin> clazz)", "testcase": false, "constructor": false}, {"identifier": "unloadOldVersion", "parameters": "(Plugin plugin)", "modifiers": "private", "return": "void", "signature": "void unloadOldVersion(Plugin plugin)", "full_signature": "private void unloadOldVersion(Plugin plugin)", "class_method_signature": "PluginLoader.unloadOldVersion(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(Plugin plugin)", "modifiers": "public", "return": "boolean", "signature": "boolean load(Plugin plugin)", "full_signature": "public boolean load(Plugin plugin)", "class_method_signature": "PluginLoader.load(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "requires", "parameters": "(Class<? extends Plugin> pluginA, Class<? extends Plugin> pluginB)", "modifiers": "private", "return": "boolean", "signature": "boolean requires(Class<? extends Plugin> pluginA, Class<? extends Plugin> pluginB)", "full_signature": "private boolean requires(Class<? extends Plugin> pluginA, Class<? extends Plugin> pluginB)", "class_method_signature": "PluginLoader.requires(Class<? extends Plugin> pluginA, Class<? extends Plugin> pluginB)", "testcase": false, "constructor": false}, {"identifier": "isDirectRequirement", "parameters": "(Class<? extends Plugin> pluginA, Class<? extends Plugin> pluginB)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDirectRequirement(Class<? extends Plugin> pluginA, Class<? extends Plugin> pluginB)", "full_signature": "private static boolean isDirectRequirement(Class<? extends Plugin> pluginA, Class<? extends Plugin> pluginB)", "class_method_signature": "PluginLoader.isDirectRequirement(Class<? extends Plugin> pluginA, Class<? extends Plugin> pluginB)", "testcase": false, "constructor": false}, {"identifier": "canLoad", "parameters": "(Plugin plugin)", "modifiers": "public", "return": "boolean", "signature": "boolean canLoad(Plugin plugin)", "full_signature": "public boolean canLoad(Plugin plugin)", "class_method_signature": "PluginLoader.canLoad(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "tryRestoreSource", "parameters": "(Widget widget, DestroyedSource destroyedSource)", "modifiers": "private", "return": "void", "signature": "void tryRestoreSource(Widget widget, DestroyedSource destroyedSource)", "full_signature": "private void tryRestoreSource(Widget widget, DestroyedSource destroyedSource)", "class_method_signature": "PluginLoader.tryRestoreSource(Widget widget, DestroyedSource destroyedSource)", "testcase": false, "constructor": false}, {"identifier": "unload", "parameters": "(Plugin plugin)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "boolean", "signature": "boolean unload(Plugin plugin)", "full_signature": "@SuppressWarnings(\"unchecked\") public boolean unload(Plugin plugin)", "class_method_signature": "PluginLoader.unload(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "getKnownPlugins", "parameters": "()", "modifiers": "public", "return": "ObservableList<Plugin>", "signature": "ObservableList<Plugin> getKnownPlugins()", "full_signature": "public ObservableList<Plugin> getKnownPlugins()", "class_method_signature": "PluginLoader.getKnownPlugins()", "testcase": false, "constructor": false}, {"identifier": "getLoadedPlugins", "parameters": "()", "modifiers": "public", "return": "ObservableSet<Plugin>", "signature": "ObservableSet<Plugin> getLoadedPlugins()", "full_signature": "public ObservableSet<Plugin> getLoadedPlugins()", "class_method_signature": "PluginLoader.getLoadedPlugins()", "testcase": false, "constructor": false}, {"identifier": "getClassLoaders", "parameters": "()", "modifiers": "public", "return": "ObservableList<ClassLoader>", "signature": "ObservableList<ClassLoader> getClassLoaders()", "full_signature": "public ObservableList<ClassLoader> getClassLoaders()", "class_method_signature": "PluginLoader.getClassLoaders()", "testcase": false, "constructor": false}], "file": "app/src/main/java/edu/wpi/first/shuffleboard/app/plugin/PluginLoader.java"}, "focal_method": {"identifier": "unload", "parameters": "(Plugin plugin)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "boolean", "body": "@SuppressWarnings(\"unchecked\")\n  public boolean unload(Plugin plugin) {\n    if (!loadedPlugins.contains(plugin)) {\n      // It's not loaded, nothing to unload\n      return false;\n    }\n    // Unload any plugins that depends on the one currently being unloaded\n    knownPlugins.stream()\n        .filter(p -> requires(p.getClass(), plugin.getClass()))\n        .forEach(this::unload);\n\n    log.info(\"Unloading plugin \" + plugin.fullIdString());\n    components.getActiveWidgets().stream()\n        .filter(w -> w.getSources().stream().anyMatch(s -> !(s instanceof DestroyedSource)))\n        .filter(w -> {\n          return w.getSources().stream().anyMatch(s -> plugin.getDataTypes().contains(s.getDataType()))\n              || w.getSources().stream().anyMatch(s -> plugin.getSourceTypes().contains(s.getType()));\n        })\n        .forEach(w -> {\n          if (w instanceof SingleSourceWidget) {\n            SingleSourceWidget singleSource = (SingleSourceWidget) w;\n            singleSource.setSource(new DestroyedSource<>(singleSource.getSource()));\n          } else {\n            w.getSources().replaceAll(s -> {\n              if (!(s instanceof DestroyedSource)\n                  && (plugin.getDataTypes().contains(s.getDataType())\n                  || plugin.getSourceTypes().contains(s.getType()))) {\n                return new DestroyedSource<>(s);\n              }\n              return s;\n            });\n          }\n        });\n    components.unregisterAll(plugin.getComponents());\n    sourceTypes.unregisterAll(plugin.getSourceTypes());\n    plugin.getTypeAdapters().forEach(Serializers::remove);\n    dataTypes.unregisterAll(plugin.getDataTypes());\n    // TODO figure out a good way to remember the theme & reapply it when reloading the plugin\n    themes.unregisterAll(plugin.getThemes());\n    tabInfoRegistry.unregisterAll(plugin.getDefaultTabInfo());\n    converters.unregisterAll(plugin.getRecordingConverters());\n    propertyParsers.unregisterAll(plugin.getPropertyParsers());\n\n    plugin.onUnload();\n    plugin.setLoaded(false);\n    loadedPlugins.remove(plugin);\n    return true;\n  }", "signature": "boolean unload(Plugin plugin)", "full_signature": "@SuppressWarnings(\"unchecked\") public boolean unload(Plugin plugin)", "class_method_signature": "PluginLoader.unload(Plugin plugin)", "testcase": false, "constructor": false, "invocations": ["contains", "forEach", "filter", "stream", "requires", "getClass", "getClass", "info", "fullIdString", "forEach", "filter", "filter", "stream", "getActiveWidgets", "anyMatch", "stream", "getSources", "anyMatch", "stream", "getSources", "contains", "getDataTypes", "getDataType", "anyMatch", "stream", "getSources", "contains", "getSourceTypes", "getType", "setSource", "getSource", "replaceAll", "getSources", "contains", "getDataTypes", "getDataType", "contains", "getSourceTypes", "getType", "unregisterAll", "getComponents", "unregisterAll", "getSourceTypes", "forEach", "getTypeAdapters", "unregisterAll", "getDataTypes", "unregisterAll", "getThemes", "unregisterAll", "getDefaultTabInfo", "unregisterAll", "getRecordingConverters", "unregisterAll", "getPropertyParsers", "onUnload", "setLoaded", "remove"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}