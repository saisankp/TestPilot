{"test_class": {"identifier": "SendingTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final AcknowledgementLabel ACKNOWLEDGEMENT_LABEL = AcknowledgementLabel.of(\"twin-persisted\");", "modifier": "private static final", "type": "AcknowledgementLabel", "declarator": "ACKNOWLEDGEMENT_LABEL = AcknowledgementLabel.of(\"twin-persisted\")", "var_name": "ACKNOWLEDGEMENT_LABEL"}, {"original_string": "@Rule\n    public final TestName testName = new TestName();", "modifier": "@Rule\n    public final", "type": "TestName", "declarator": "testName = new TestName()", "var_name": "testName"}, {"original_string": "@Mock private OutboundSignal.Mapped mappedOutboundSignal;", "modifier": "@Mock private", "type": "OutboundSignal.Mapped", "declarator": "mappedOutboundSignal", "var_name": "mappedOutboundSignal"}, {"original_string": "@Mock private ExternalMessage externalMessage;", "modifier": "@Mock private", "type": "ExternalMessage", "declarator": "externalMessage", "var_name": "externalMessage"}, {"original_string": "@Mock private GenericTarget genericTarget;", "modifier": "@Mock private", "type": "GenericTarget", "declarator": "genericTarget", "var_name": "genericTarget"}, {"original_string": "@Mock private ConnectionMonitor publishedMonitor;", "modifier": "@Mock private", "type": "ConnectionMonitor", "declarator": "publishedMonitor", "var_name": "publishedMonitor"}, {"original_string": "@Mock private ConnectionMonitor acknowledgedMonitor;", "modifier": "@Mock private", "type": "ConnectionMonitor", "declarator": "acknowledgedMonitor", "var_name": "acknowledgedMonitor"}, {"original_string": "@Mock private ConnectionMonitor droppedMonitor;", "modifier": "@Mock private", "type": "ConnectionMonitor", "declarator": "droppedMonitor", "var_name": "droppedMonitor"}, {"original_string": "@Mock private Target autoAckTarget;", "modifier": "@Mock private", "type": "Target", "declarator": "autoAckTarget", "var_name": "autoAckTarget"}, {"original_string": "@Mock private ThreadSafeDittoLoggingAdapter logger;", "modifier": "@Mock private", "type": "ThreadSafeDittoLoggingAdapter", "declarator": "logger", "var_name": "logger"}, {"original_string": "private DittoHeaders dittoHeaders;", "modifier": "private", "type": "DittoHeaders", "declarator": "dittoHeaders", "var_name": "dittoHeaders"}, {"original_string": "private SendingContext sendingContext;", "modifier": "private", "type": "SendingContext", "declarator": "sendingContext", "var_name": "sendingContext"}, {"original_string": "private ExceptionToAcknowledgementConverter exceptionConverter;", "modifier": "private", "type": "ExceptionToAcknowledgementConverter", "declarator": "exceptionConverter", "var_name": "exceptionConverter"}], "file": "services/connectivity/messaging/src/test/java/org/eclipse/ditto/services/connectivity/messaging/SendingTest.java"}, "test_case": {"identifier": "monitorLiveResponseSendSuccessKeepOriginalResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void monitorLiveResponseSendSuccessKeepOriginalResponse() {\n        final var issuedAckLabel = DittoAcknowledgementLabel.LIVE_RESPONSE;\n        Mockito.when(autoAckTarget.getIssuedAcknowledgementLabel()).thenReturn(Optional.of(issuedAckLabel));\n        final CommandResponse<?> commandResponse = Mockito.mock(CommandResponse.class);\n        final var commandResponseStatusCode = HttpStatusCode.ACCEPTED;\n        Mockito.when(commandResponse.getStatusCode()).thenReturn(commandResponseStatusCode);\n        final Sending underTest =\n                new Sending(sendingContext, CompletableFuture.completedStage(commandResponse), logger);\n\n        final Optional<CompletionStage<CommandResponse>> result = underTest.monitorAndAcknowledge(exceptionConverter);\n\n        Mockito.verifyNoInteractions(acknowledgedMonitor);\n        Mockito.verify(publishedMonitor).success(externalMessage);\n        assertThat(result)\n                .hasValueSatisfying(resultFuture -> assertThat(resultFuture).isCompletedWithValue(commandResponse));\n    }", "signature": "void monitorLiveResponseSendSuccessKeepOriginalResponse()", "full_signature": "@Test public void monitorLiveResponseSendSuccessKeepOriginalResponse()", "class_method_signature": "SendingTest.monitorLiveResponseSendSuccessKeepOriginalResponse()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getIssuedAcknowledgementLabel", "of", "mock", "thenReturn", "when", "getStatusCode", "completedStage", "monitorAndAcknowledge", "verifyNoInteractions", "success", "verify", "hasValueSatisfying", "assertThat", "isCompletedWithValue", "assertThat"]}, "focal_class": {"identifier": "Sending", "superclass": "", "interfaces": "implements SendingOrDropped", "fields": [{"original_string": "private final SendingContext sendingContext;", "modifier": "private final", "type": "SendingContext", "declarator": "sendingContext", "var_name": "sendingContext"}, {"original_string": "private final CompletionStage<CommandResponse<?>> futureResponse;", "modifier": "private final", "type": "CompletionStage<CommandResponse<?>>", "declarator": "futureResponse", "var_name": "futureResponse"}, {"original_string": "private final ThreadSafeDittoLoggingAdapter logger;", "modifier": "private final", "type": "ThreadSafeDittoLoggingAdapter", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "Sending", "parameters": "(final SendingContext sendingContext, final CompletionStage<CommandResponse<?>> futureResponse,\n            final ThreadSafeDittoLoggingAdapter logger)", "modifiers": "", "return": "", "signature": " Sending(final SendingContext sendingContext, final CompletionStage<CommandResponse<?>> futureResponse,\n            final ThreadSafeDittoLoggingAdapter logger)", "full_signature": "  Sending(final SendingContext sendingContext, final CompletionStage<CommandResponse<?>> futureResponse,\n            final ThreadSafeDittoLoggingAdapter logger)", "class_method_signature": "Sending.Sending(final SendingContext sendingContext, final CompletionStage<CommandResponse<?>> futureResponse,\n            final ThreadSafeDittoLoggingAdapter logger)", "testcase": false, "constructor": true}, {"identifier": "monitorAndAcknowledge", "parameters": "(\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "modifiers": "@SuppressWarnings(\"rawtypes\") @Override public", "return": "Optional<CompletionStage<CommandResponse>>", "signature": "Optional<CompletionStage<CommandResponse>> monitorAndAcknowledge(\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "full_signature": "@SuppressWarnings(\"rawtypes\") @Override public Optional<CompletionStage<CommandResponse>> monitorAndAcknowledge(\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "class_method_signature": "Sending.monitorAndAcknowledge(\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "testcase": false, "constructor": false}, {"identifier": "acknowledge", "parameters": "(@Nullable final CommandResponse<?> response,\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "modifiers": "@Nullable private", "return": "CommandResponse<?>", "signature": "CommandResponse<?> acknowledge(@Nullable final CommandResponse<?> response,\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "full_signature": "@Nullable private CommandResponse<?> acknowledge(@Nullable final CommandResponse<?> response,\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "class_method_signature": "Sending.acknowledge(@Nullable final CommandResponse<?> response,\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "testcase": false, "constructor": false}, {"identifier": "getNullAckException", "parameters": "()", "modifiers": "private static", "return": "MessageSendingFailedException", "signature": "MessageSendingFailedException getNullAckException()", "full_signature": "private static MessageSendingFailedException getNullAckException()", "class_method_signature": "Sending.getNullAckException()", "testcase": false, "constructor": false}, {"identifier": "monitor", "parameters": "(@Nullable final CommandResponse<?> response)", "modifiers": "@SuppressWarnings({\"rawtypes\", \"java:S3740\"}) @Nullable private", "return": "CommandResponse", "signature": "CommandResponse monitor(@Nullable final CommandResponse<?> response)", "full_signature": "@SuppressWarnings({\"rawtypes\", \"java:S3740\"}) @Nullable private CommandResponse monitor(@Nullable final CommandResponse<?> response)", "class_method_signature": "Sending.monitor(@Nullable final CommandResponse<?> response)", "testcase": false, "constructor": false}, {"identifier": "isAcknowledgement", "parameters": "(final CommandResponse<?> commandResponse)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAcknowledgement(final CommandResponse<?> commandResponse)", "full_signature": "private static boolean isAcknowledgement(final CommandResponse<?> commandResponse)", "class_method_signature": "Sending.isAcknowledgement(final CommandResponse<?> commandResponse)", "testcase": false, "constructor": false}, {"identifier": "monitorAcknowledgement", "parameters": "(final Acknowledgement acknowledgement)", "modifiers": "private", "return": "void", "signature": "void monitorAcknowledgement(final Acknowledgement acknowledgement)", "full_signature": "private void monitorAcknowledgement(final Acknowledgement acknowledgement)", "class_method_signature": "Sending.monitorAcknowledgement(final Acknowledgement acknowledgement)", "testcase": false, "constructor": false}, {"identifier": "isTargetIssuesLiveResponse", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isTargetIssuesLiveResponse()", "full_signature": "private boolean isTargetIssuesLiveResponse()", "class_method_signature": "Sending.isTargetIssuesLiveResponse()", "testcase": false, "constructor": false}, {"identifier": "monitorLiveResponse", "parameters": "(final CommandResponse<?> liveResponse)", "modifiers": "private", "return": "void", "signature": "void monitorLiveResponse(final CommandResponse<?> liveResponse)", "full_signature": "private void monitorLiveResponse(final CommandResponse<?> liveResponse)", "class_method_signature": "Sending.monitorLiveResponse(final CommandResponse<?> liveResponse)", "testcase": false, "constructor": false}, {"identifier": "handleException", "parameters": "(final Exception exception,\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "modifiers": "@Nullable private", "return": "Acknowledgement", "signature": "Acknowledgement handleException(final Exception exception,\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "full_signature": "@Nullable private Acknowledgement handleException(final Exception exception,\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "class_method_signature": "Sending.handleException(final Exception exception,\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "testcase": false, "constructor": false}, {"identifier": "monitorSendFailure", "parameters": "(final Exception exception)", "modifiers": "private", "return": "void", "signature": "void monitorSendFailure(final Exception exception)", "full_signature": "private void monitorSendFailure(final Exception exception)", "class_method_signature": "Sending.monitorSendFailure(final Exception exception)", "testcase": false, "constructor": false}, {"identifier": "convertExceptionToAcknowledgementOrNull", "parameters": "(final Exception exception,\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "modifiers": "@Nullable private", "return": "Acknowledgement", "signature": "Acknowledgement convertExceptionToAcknowledgementOrNull(final Exception exception,\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "full_signature": "@Nullable private Acknowledgement convertExceptionToAcknowledgementOrNull(final Exception exception,\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "class_method_signature": "Sending.convertExceptionToAcknowledgementOrNull(final Exception exception,\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "testcase": false, "constructor": false}, {"identifier": "getRootCause", "parameters": "(final Throwable throwable)", "modifiers": "@SuppressWarnings(\"ChainOfInstanceofChecks\") private static", "return": "Exception", "signature": "Exception getRootCause(final Throwable throwable)", "full_signature": "@SuppressWarnings(\"ChainOfInstanceofChecks\") private static Exception getRootCause(final Throwable throwable)", "class_method_signature": "Sending.getRootCause(final Throwable throwable)", "testcase": false, "constructor": false}], "file": "services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/Sending.java"}, "focal_method": {"identifier": "monitorAndAcknowledge", "parameters": "(\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "modifiers": "@SuppressWarnings(\"rawtypes\") @Override public", "return": "Optional<CompletionStage<CommandResponse>>", "body": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    public Optional<CompletionStage<CommandResponse>> monitorAndAcknowledge(\n            final ExceptionToAcknowledgementConverter exceptionConverter) {\n\n        return Optional.of(futureResponse\n                .thenApply(response -> acknowledge(response, exceptionConverter))\n                .thenApply(this::monitor)\n                .exceptionally(error -> {\n                    final Acknowledgement result = handleException(getRootCause(error), exceptionConverter);\n                    monitor(result);\n                    return result;\n                }));\n    }", "signature": "Optional<CompletionStage<CommandResponse>> monitorAndAcknowledge(\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "full_signature": "@SuppressWarnings(\"rawtypes\") @Override public Optional<CompletionStage<CommandResponse>> monitorAndAcknowledge(\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "class_method_signature": "Sending.monitorAndAcknowledge(\n            final ExceptionToAcknowledgementConverter exceptionConverter)", "testcase": false, "constructor": false, "invocations": ["of", "exceptionally", "thenApply", "thenApply", "acknowledge", "handleException", "getRootCause", "monitor"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}