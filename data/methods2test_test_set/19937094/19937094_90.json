{"test_class": {"identifier": "DynamicAcceptorSessionProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DynamicAcceptorSessionProvider provider;", "modifier": "private", "type": "DynamicAcceptorSessionProvider", "declarator": "provider", "var_name": "provider"}, {"original_string": "private SessionSettings settings;", "modifier": "private", "type": "SessionSettings", "declarator": "settings", "var_name": "settings"}, {"original_string": "private List<TemplateMapping> templateMappings;", "modifier": "private", "type": "List<TemplateMapping>", "declarator": "templateMappings", "var_name": "templateMappings"}, {"original_string": "private Application application;", "modifier": "private", "type": "Application", "declarator": "application", "var_name": "application"}, {"original_string": "private MessageStoreFactory messageStoreFactory;", "modifier": "private", "type": "MessageStoreFactory", "declarator": "messageStoreFactory", "var_name": "messageStoreFactory"}, {"original_string": "private LogFactory logFactory;", "modifier": "private", "type": "LogFactory", "declarator": "logFactory", "var_name": "logFactory"}, {"original_string": "private MessageFactory messageFactory;", "modifier": "private", "type": "MessageFactory", "declarator": "messageFactory", "var_name": "messageFactory"}, {"original_string": "@Rule\n    public TemporaryFolder tempFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "tempFolder = new TemporaryFolder()", "var_name": "tempFolder"}], "file": "quickfixj-core/src/test/java/quickfix/mina/acceptor/DynamicAcceptorSessionProviderTest.java"}, "test_case": {"identifier": "testSessionTemplateNotFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSessionTemplateNotFound() throws Exception {\n        try {\n            provider.getSession(new SessionID(\"FIX.4.3\", \"S\", \"T\"), null);\n            fail(\"No exception thrown\");\n        } catch (QFJException e) {\n            // Expected\n        }\n    }", "signature": "void testSessionTemplateNotFound()", "full_signature": "@Test public void testSessionTemplateNotFound()", "class_method_signature": "DynamicAcceptorSessionProviderTest.testSessionTemplateNotFound()", "testcase": true, "constructor": false, "invocations": ["getSession", "fail"]}, "focal_class": {"identifier": "DynamicAcceptorSessionProvider", "superclass": "", "interfaces": "implements AcceptorSessionProvider", "fields": [{"original_string": "public static final String WILDCARD = \"*\";", "modifier": "public static final", "type": "String", "declarator": "WILDCARD = \"*\"", "var_name": "WILDCARD"}, {"original_string": "private static final SessionID ANY_SESSION = new SessionID(WILDCARD, WILDCARD, WILDCARD,\n            WILDCARD, WILDCARD, WILDCARD, WILDCARD, null);", "modifier": "private static final", "type": "SessionID", "declarator": "ANY_SESSION = new SessionID(WILDCARD, WILDCARD, WILDCARD,\n            WILDCARD, WILDCARD, WILDCARD, WILDCARD, null)", "var_name": "ANY_SESSION"}, {"original_string": "private final List<TemplateMapping> templateMappings;", "modifier": "private final", "type": "List<TemplateMapping>", "declarator": "templateMappings", "var_name": "templateMappings"}, {"original_string": "protected final SessionSettings settings;", "modifier": "protected final", "type": "SessionSettings", "declarator": "settings", "var_name": "settings"}, {"original_string": "protected final SessionFactory sessionFactory;", "modifier": "protected final", "type": "SessionFactory", "declarator": "sessionFactory", "var_name": "sessionFactory"}], "methods": [{"identifier": "DynamicAcceptorSessionProvider", "parameters": "(final SessionSettings settings,\n            final SessionID templateID, quickfix.Application application,\n            MessageStoreFactory messageStoreFactory, LogFactory logFactory,\n            MessageFactory messageFactory)", "modifiers": "public", "return": "", "signature": " DynamicAcceptorSessionProvider(final SessionSettings settings,\n            final SessionID templateID, quickfix.Application application,\n            MessageStoreFactory messageStoreFactory, LogFactory logFactory,\n            MessageFactory messageFactory)", "full_signature": "public  DynamicAcceptorSessionProvider(final SessionSettings settings,\n            final SessionID templateID, quickfix.Application application,\n            MessageStoreFactory messageStoreFactory, LogFactory logFactory,\n            MessageFactory messageFactory)", "class_method_signature": "DynamicAcceptorSessionProvider.DynamicAcceptorSessionProvider(final SessionSettings settings,\n            final SessionID templateID, quickfix.Application application,\n            MessageStoreFactory messageStoreFactory, LogFactory logFactory,\n            MessageFactory messageFactory)", "testcase": false, "constructor": true}, {"identifier": "DynamicAcceptorSessionProvider", "parameters": "(final SessionSettings settings,\n            List<TemplateMapping> templateMappings, quickfix.Application application,\n            MessageStoreFactory messageStoreFactory, LogFactory logFactory,\n            MessageFactory messageFactory)", "modifiers": "public", "return": "", "signature": " DynamicAcceptorSessionProvider(final SessionSettings settings,\n            List<TemplateMapping> templateMappings, quickfix.Application application,\n            MessageStoreFactory messageStoreFactory, LogFactory logFactory,\n            MessageFactory messageFactory)", "full_signature": "public  DynamicAcceptorSessionProvider(final SessionSettings settings,\n            List<TemplateMapping> templateMappings, quickfix.Application application,\n            MessageStoreFactory messageStoreFactory, LogFactory logFactory,\n            MessageFactory messageFactory)", "class_method_signature": "DynamicAcceptorSessionProvider.DynamicAcceptorSessionProvider(final SessionSettings settings,\n            List<TemplateMapping> templateMappings, quickfix.Application application,\n            MessageStoreFactory messageStoreFactory, LogFactory logFactory,\n            MessageFactory messageFactory)", "testcase": false, "constructor": true}, {"identifier": "getSession", "parameters": "(SessionID sessionID, SessionConnector sessionConnector)", "modifiers": "public synchronized", "return": "Session", "signature": "Session getSession(SessionID sessionID, SessionConnector sessionConnector)", "full_signature": "public synchronized Session getSession(SessionID sessionID, SessionConnector sessionConnector)", "class_method_signature": "DynamicAcceptorSessionProvider.getSession(SessionID sessionID, SessionConnector sessionConnector)", "testcase": false, "constructor": false}, {"identifier": "optionallySetValue", "parameters": "(SessionSettings dynamicSettings, String key, String value)", "modifiers": "protected", "return": "void", "signature": "void optionallySetValue(SessionSettings dynamicSettings, String key, String value)", "full_signature": "protected void optionallySetValue(SessionSettings dynamicSettings, String key, String value)", "class_method_signature": "DynamicAcceptorSessionProvider.optionallySetValue(SessionSettings dynamicSettings, String key, String value)", "testcase": false, "constructor": false}, {"identifier": "lookupTemplateID", "parameters": "(SessionID sessionID)", "modifiers": "protected", "return": "SessionID", "signature": "SessionID lookupTemplateID(SessionID sessionID)", "full_signature": "protected SessionID lookupTemplateID(SessionID sessionID)", "class_method_signature": "DynamicAcceptorSessionProvider.lookupTemplateID(SessionID sessionID)", "testcase": false, "constructor": false}, {"identifier": "isMatching", "parameters": "(SessionID pattern, SessionID sessionID)", "modifiers": "private", "return": "boolean", "signature": "boolean isMatching(SessionID pattern, SessionID sessionID)", "full_signature": "private boolean isMatching(SessionID pattern, SessionID sessionID)", "class_method_signature": "DynamicAcceptorSessionProvider.isMatching(SessionID pattern, SessionID sessionID)", "testcase": false, "constructor": false}, {"identifier": "isMatching", "parameters": "(String pattern, String value)", "modifiers": "private", "return": "boolean", "signature": "boolean isMatching(String pattern, String value)", "full_signature": "private boolean isMatching(String pattern, String value)", "class_method_signature": "DynamicAcceptorSessionProvider.isMatching(String pattern, String value)", "testcase": false, "constructor": false}, {"identifier": "copySettings", "parameters": "(SessionSettings settings, Properties properties)", "modifiers": "protected", "return": "void", "signature": "void copySettings(SessionSettings settings, Properties properties)", "full_signature": "protected void copySettings(SessionSettings settings, Properties properties)", "class_method_signature": "DynamicAcceptorSessionProvider.copySettings(SessionSettings settings, Properties properties)", "testcase": false, "constructor": false}], "file": "quickfixj-core/src/main/java/quickfix/mina/acceptor/DynamicAcceptorSessionProvider.java"}, "focal_method": {"identifier": "getSession", "parameters": "(SessionID sessionID, SessionConnector sessionConnector)", "modifiers": "public synchronized", "return": "Session", "body": "public synchronized Session getSession(SessionID sessionID, SessionConnector sessionConnector) {\n        Session s = Session.lookupSession(sessionID);\n        if (s == null) {\n            try {\n                SessionID templateID = lookupTemplateID(sessionID);\n                if (templateID == null) {\n                    throw new ConfigError(\"Unable to find a session template for \" + sessionID);\n                }\n                SessionSettings dynamicSettings = new SessionSettings();\n                copySettings(dynamicSettings, settings.getDefaultProperties());\n                copySettings(dynamicSettings, settings.getSessionProperties(templateID));\n                dynamicSettings.setString(BEGINSTRING, sessionID.getBeginString());\n                dynamicSettings.setString(SENDERCOMPID, sessionID.getSenderCompID());\n                optionallySetValue(dynamicSettings, SENDERSUBID, sessionID.getSenderSubID());\n                optionallySetValue(dynamicSettings, SENDERLOCID, sessionID.getSenderLocationID());\n                dynamicSettings.setString(TARGETCOMPID, sessionID.getTargetCompID());\n                optionallySetValue(dynamicSettings, TARGETSUBID, sessionID.getTargetSubID());\n                optionallySetValue(dynamicSettings, TARGETLOCID, sessionID.getTargetLocationID());\n                s = sessionFactory.create(sessionID, dynamicSettings);\n                if (sessionConnector != null) {\n                    sessionConnector.addDynamicSession(s);\n                }\n            } catch (ConfigError e) {\n                throw new QFJException(e);\n            }\n        }\n        return s;\n    }", "signature": "Session getSession(SessionID sessionID, SessionConnector sessionConnector)", "full_signature": "public synchronized Session getSession(SessionID sessionID, SessionConnector sessionConnector)", "class_method_signature": "DynamicAcceptorSessionProvider.getSession(SessionID sessionID, SessionConnector sessionConnector)", "testcase": false, "constructor": false, "invocations": ["lookupSession", "lookupTemplateID", "copySettings", "getDefaultProperties", "copySettings", "getSessionProperties", "setString", "getBeginString", "setString", "getSenderCompID", "optionallySetValue", "getSenderSubID", "optionallySetValue", "getSenderLocationID", "setString", "getTargetCompID", "optionallySetValue", "getTargetSubID", "optionallySetValue", "getTargetLocationID", "create", "addDynamicSession"]}, "repository": {"repo_id": 19937094, "url": "https://github.com/quickfix-j/quickfixj", "stars": 538, "created": "5/19/2014 10:04:08 AM +00:00", "updates": "2020-01-26T01:21:15+00:00", "fork": "False", "license": "licensed"}}