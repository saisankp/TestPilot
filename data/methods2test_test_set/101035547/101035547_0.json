{"test_class": {"identifier": "VavrHammingEncoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HammingEncoder sut = HammingEncoder.vavrEncoder();", "modifier": "private", "type": "HammingEncoder", "declarator": "sut = HammingEncoder.vavrEncoder()", "var_name": "sut"}], "file": "hamming-error-correction/src/test/java/com/pivovarit/hamming/vavr/VavrHammingEncoderTest.java"}, "test_case": {"identifier": "shouldEncodeZeros", "parameters": "()", "modifiers": "@Test @DisplayName(\"should always encode zeros to zeros\")", "return": "void", "body": "@Test\n    @DisplayName(\"should always encode zeros to zeros\")\n    void shouldEncodeZeros() {\n        Stream.iterate(\"0\", i -> i + \"0\")\n          .take(1000)\n          .map(it -> sut.encode(BinaryString.of(it)).getValue())\n          .forEach(msg -> assertThat(msg).doesNotContain(\"1\"));\n    }", "signature": "void shouldEncodeZeros()", "full_signature": "@Test @DisplayName(\"should always encode zeros to zeros\") void shouldEncodeZeros()", "class_method_signature": "VavrHammingEncoderTest.shouldEncodeZeros()", "testcase": true, "constructor": false, "invocations": ["forEach", "map", "take", "iterate", "getValue", "encode", "of", "doesNotContain", "assertThat"]}, "focal_class": {"identifier": "VavrHammingEncoder", "superclass": "", "interfaces": "implements HammingEncoder", "fields": [{"original_string": "private final HammingHelper helper = new HammingHelper();", "modifier": "private final", "type": "HammingHelper", "declarator": "helper = new HammingHelper()", "var_name": "helper"}], "methods": [{"identifier": "encode", "parameters": "(BinaryString input)", "modifiers": "@Override public", "return": "EncodedString", "signature": "EncodedString encode(BinaryString input)", "full_signature": "@Override public EncodedString encode(BinaryString input)", "class_method_signature": "VavrHammingEncoder.encode(BinaryString input)", "testcase": false, "constructor": false}, {"identifier": "toHammingCodeValue", "parameters": "(int it, BinaryString input)", "modifiers": "private", "return": "String", "signature": "String toHammingCodeValue(int it, BinaryString input)", "full_signature": "private String toHammingCodeValue(int it, BinaryString input)", "class_method_signature": "VavrHammingEncoder.toHammingCodeValue(int it, BinaryString input)", "testcase": false, "constructor": false}], "file": "hamming-error-correction/src/main/java/com/pivovarit/hamming/vavr/VavrHammingEncoder.java"}, "focal_method": {"identifier": "encode", "parameters": "(BinaryString input)", "modifiers": "@Override public", "return": "EncodedString", "body": "@Override\n    public EncodedString encode(BinaryString input) {\n        String result = helper.getHammingCodewordIndices(input.getValue().length())\n          .map(i -> toHammingCodeValue(i, input))\n          .reduce(String::concat);\n\n        return EncodedString.of(result);\n    }", "signature": "EncodedString encode(BinaryString input)", "full_signature": "@Override public EncodedString encode(BinaryString input)", "class_method_signature": "VavrHammingEncoder.encode(BinaryString input)", "testcase": false, "constructor": false, "invocations": ["reduce", "map", "getHammingCodewordIndices", "length", "getValue", "toHammingCodeValue", "of"]}, "repository": {"repo_id": 101035547, "url": "https://github.com/pivovarit/articles", "stars": 66, "created": "8/22/2017 7:39:55 AM +00:00", "updates": "2020-01-25T10:45:47+00:00", "fork": "False", "license": "licensed"}}