{"test_class": {"identifier": "GetNodeIdFromPropsFileTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}, {"original_string": "private File nodeIdPropertiesFile;", "modifier": "private", "type": "File", "declarator": "nodeIdPropertiesFile", "var_name": "nodeIdPropertiesFile"}], "file": "ethereumj-core/src/test/java/org/ethereum/config/GetNodeIdFromPropsFileTest.java"}, "test_case": {"identifier": "testGenerateNodeIdFromPropsFileReadsExistingFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateNodeIdFromPropsFileReadsExistingFile() throws Exception {\n        // Create temporary nodeId.properties file\n        ECKey key = new ECKey();\n        String expectedNodePrivateKey = Hex.toHexString(key.getPrivKeyBytes());\n        String expectedNodeId = Hex.toHexString(key.getNodeId());\n        createNodeIdPropertiesFile(\"database-test\", key);\n\n        new GetNodeIdFromPropsFile(\"database-test\").getNodePrivateKey();\n\n        assertTrue(nodeIdPropertiesFile.exists());\n        String contents = FileCopyUtils.copyToString(new FileReader(nodeIdPropertiesFile));\n        String[] lines = StringUtils.tokenizeToStringArray(contents, \"\\n\");\n        assertEquals(4, lines.length);\n        assertTrue(lines[0].startsWith(\"#Generated NodeID.\"));\n        assertTrue(lines[1].startsWith(\"#\"));\n        assertTrue(lines[2].startsWith(\"nodeIdPrivateKey=\" + expectedNodePrivateKey));\n        assertTrue(lines[3].startsWith(\"nodeId=\" + expectedNodeId));\n    }", "signature": "void testGenerateNodeIdFromPropsFileReadsExistingFile()", "full_signature": "@Test public void testGenerateNodeIdFromPropsFileReadsExistingFile()", "class_method_signature": "GetNodeIdFromPropsFileTest.testGenerateNodeIdFromPropsFileReadsExistingFile()", "testcase": true, "constructor": false, "invocations": ["toHexString", "getPrivKeyBytes", "toHexString", "getNodeId", "createNodeIdPropertiesFile", "getNodePrivateKey", "assertTrue", "exists", "copyToString", "tokenizeToStringArray", "assertEquals", "assertTrue", "startsWith", "assertTrue", "startsWith", "assertTrue", "startsWith", "assertTrue", "startsWith"]}, "focal_class": {"identifier": "GetNodeIdFromPropsFile", "superclass": "", "interfaces": "implements GenerateNodeIdStrategy", "fields": [{"original_string": "private String databaseDir;", "modifier": "private", "type": "String", "declarator": "databaseDir", "var_name": "databaseDir"}, {"original_string": "private GenerateNodeIdStrategy fallbackGenerateNodeIdStrategy;", "modifier": "private", "type": "GenerateNodeIdStrategy", "declarator": "fallbackGenerateNodeIdStrategy", "var_name": "fallbackGenerateNodeIdStrategy"}], "methods": [{"identifier": "GetNodeIdFromPropsFile", "parameters": "(String databaseDir)", "modifiers": "", "return": "", "signature": " GetNodeIdFromPropsFile(String databaseDir)", "full_signature": "  GetNodeIdFromPropsFile(String databaseDir)", "class_method_signature": "GetNodeIdFromPropsFile.GetNodeIdFromPropsFile(String databaseDir)", "testcase": false, "constructor": true}, {"identifier": "getNodePrivateKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getNodePrivateKey()", "full_signature": "@Override public String getNodePrivateKey()", "class_method_signature": "GetNodeIdFromPropsFile.getNodePrivateKey()", "testcase": false, "constructor": false}, {"identifier": "withFallback", "parameters": "(GenerateNodeIdStrategy generateNodeIdStrategy)", "modifiers": "public", "return": "GenerateNodeIdStrategy", "signature": "GenerateNodeIdStrategy withFallback(GenerateNodeIdStrategy generateNodeIdStrategy)", "full_signature": "public GenerateNodeIdStrategy withFallback(GenerateNodeIdStrategy generateNodeIdStrategy)", "class_method_signature": "GetNodeIdFromPropsFile.withFallback(GenerateNodeIdStrategy generateNodeIdStrategy)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/config/GetNodeIdFromPropsFile.java"}, "focal_method": {"identifier": "getNodePrivateKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getNodePrivateKey() {\n        Properties props = new Properties();\n        File file = new File(databaseDir, \"nodeId.properties\");\n        if (file.canRead()) {\n            try (Reader r = new FileReader(file)) {\n              props.load(r);\n              return props.getProperty(\"nodeIdPrivateKey\");\n            } catch (IOException e) {\n              throw new RuntimeException(\"Error reading 'nodeId.properties' file\", e);\n            }\n        } else {\n            if (fallbackGenerateNodeIdStrategy != null) {\n                return fallbackGenerateNodeIdStrategy.getNodePrivateKey();\n            } else {\n                throw new RuntimeException(\"Can't read 'nodeId.properties' and no fallback method has been set\");\n            }\n        }\n    }", "signature": "String getNodePrivateKey()", "full_signature": "@Override public String getNodePrivateKey()", "class_method_signature": "GetNodeIdFromPropsFile.getNodePrivateKey()", "testcase": false, "constructor": false, "invocations": ["canRead", "load", "getProperty", "getNodePrivateKey"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}