{"test_class": {"identifier": "ApolloDynamicConfigManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger        logger                     = LoggerFactory\n                                                                      .getLogger(ApolloDynamicConfigManagerTest.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger                     = LoggerFactory\n                                                                      .getLogger(ApolloDynamicConfigManagerTest.class)", "var_name": "logger"}, {"original_string": "private ApolloDynamicConfigManager apolloDynamicConfigManager = new ApolloDynamicConfigManager(\"test\");", "modifier": "private", "type": "ApolloDynamicConfigManager", "declarator": "apolloDynamicConfigManager = new ApolloDynamicConfigManager(\"test\")", "var_name": "apolloDynamicConfigManager"}], "file": "config/config-apollo/src/test/java/com/alipay/sofa/rpc/dynamic/apollo/ApolloDynamicConfigManagerTest.java"}, "test_case": {"identifier": "getProviderMethodProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getProviderMethodProperty() {\n    }", "signature": "void getProviderMethodProperty()", "full_signature": "@Test public void getProviderMethodProperty()", "class_method_signature": "ApolloDynamicConfigManagerTest.getProviderMethodProperty()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "ApolloDynamicConfigManager", "superclass": "extends DynamicConfigManager", "interfaces": "", "fields": [{"original_string": "private Config config;", "modifier": "private", "type": "Config", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "ApolloDynamicConfigManager", "parameters": "(String appName)", "modifiers": "protected", "return": "", "signature": " ApolloDynamicConfigManager(String appName)", "full_signature": "protected  ApolloDynamicConfigManager(String appName)", "class_method_signature": "ApolloDynamicConfigManager.ApolloDynamicConfigManager(String appName)", "testcase": false, "constructor": true}, {"identifier": "initServiceConfiguration", "parameters": "(String service)", "modifiers": "@Override public", "return": "void", "signature": "void initServiceConfiguration(String service)", "full_signature": "@Override public void initServiceConfiguration(String service)", "class_method_signature": "ApolloDynamicConfigManager.initServiceConfiguration(String service)", "testcase": false, "constructor": false}, {"identifier": "getProviderServiceProperty", "parameters": "(String service, String key)", "modifiers": "@Override public", "return": "String", "signature": "String getProviderServiceProperty(String service, String key)", "full_signature": "@Override public String getProviderServiceProperty(String service, String key)", "class_method_signature": "ApolloDynamicConfigManager.getProviderServiceProperty(String service, String key)", "testcase": false, "constructor": false}, {"identifier": "getConsumerServiceProperty", "parameters": "(String service, String key)", "modifiers": "@Override public", "return": "String", "signature": "String getConsumerServiceProperty(String service, String key)", "full_signature": "@Override public String getConsumerServiceProperty(String service, String key)", "class_method_signature": "ApolloDynamicConfigManager.getConsumerServiceProperty(String service, String key)", "testcase": false, "constructor": false}, {"identifier": "getProviderMethodProperty", "parameters": "(String service, String method, String key)", "modifiers": "@Override public", "return": "String", "signature": "String getProviderMethodProperty(String service, String method, String key)", "full_signature": "@Override public String getProviderMethodProperty(String service, String method, String key)", "class_method_signature": "ApolloDynamicConfigManager.getProviderMethodProperty(String service, String method, String key)", "testcase": false, "constructor": false}, {"identifier": "getConsumerMethodProperty", "parameters": "(String service, String method, String key)", "modifiers": "@Override public", "return": "String", "signature": "String getConsumerMethodProperty(String service, String method, String key)", "full_signature": "@Override public String getConsumerMethodProperty(String service, String method, String key)", "class_method_signature": "ApolloDynamicConfigManager.getConsumerMethodProperty(String service, String method, String key)", "testcase": false, "constructor": false}, {"identifier": "getServiceAuthRule", "parameters": "(String service)", "modifiers": "@Override public", "return": "AuthRuleGroup", "signature": "AuthRuleGroup getServiceAuthRule(String service)", "full_signature": "@Override public AuthRuleGroup getServiceAuthRule(String service)", "class_method_signature": "ApolloDynamicConfigManager.getServiceAuthRule(String service)", "testcase": false, "constructor": false}], "file": "config/config-apollo/src/main/java/com/alipay/sofa/rpc/dynamic/apollo/ApolloDynamicConfigManager.java"}, "focal_method": {"identifier": "getProviderMethodProperty", "parameters": "(String service, String method, String key)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getProviderMethodProperty(String service, String method, String key) {\n        return config.getProperty(DynamicConfigKeyHelper.buildProviderMethodProKey(service, method, key),\n            DynamicHelper.DEFAULT_DYNAMIC_VALUE);\n    }", "signature": "String getProviderMethodProperty(String service, String method, String key)", "full_signature": "@Override public String getProviderMethodProperty(String service, String method, String key)", "class_method_signature": "ApolloDynamicConfigManager.getProviderMethodProperty(String service, String method, String key)", "testcase": false, "constructor": false, "invocations": ["getProperty", "buildProviderMethodProKey"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}