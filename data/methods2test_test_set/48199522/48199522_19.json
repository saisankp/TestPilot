{"test_class": {"identifier": "WinsorizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/src/test/java/macrobase/analysis/stats/WinsorizerTest.java"}, "test_case": {"identifier": "testTrimOutlier", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTrimOutlier() {\n        int n = 10;\n        int k = 2;\n        List<double[]> metrics = new ArrayList<double[]>(n);\n        for (int i = 0; i < n; i++) {\n            double[] curVec = new double[k];\n            for (int j = 0; j < k; j++) {\n                curVec[j] = (double)i;\n            }\n            metrics.add(curVec);\n        }\n        // Add an outlier here\n        metrics.get(5)[0] = 1e5;\n        metrics.get(5)[1] = -0.24;\n\n        Winsorizer trimmer = new Winsorizer(20);\n        List<double[]> trimmed = trimmer.process(metrics);\n\n        for (int i = 0; i < n; i++) {\n            double[] curRow = trimmed.get(i);\n            double[] origRow = metrics.get(i);\n            for (int j = 0; j < curRow.length; j++) {\n                if (curRow[j] < trimmer.bounds[j][1] && curRow[j] > trimmer.bounds[j][0]) {\n                    assertEquals(curRow[j], origRow[j], 0);\n                } else {\n                    assertTrue(curRow[j] >= trimmer.bounds[j][0] && curRow[j] <= trimmer.bounds[j][1]);\n                }\n            }\n        }\n    }", "signature": "void testTrimOutlier()", "full_signature": "@Test public void testTrimOutlier()", "class_method_signature": "WinsorizerTest.testTrimOutlier()", "testcase": true, "constructor": false, "invocations": ["add", "get", "get", "process", "get", "get", "assertEquals", "assertTrue"]}, "focal_class": {"identifier": "Winsorizer", "superclass": "", "interfaces": "", "fields": [{"original_string": "public double trimPct;", "modifier": "public", "type": "double", "declarator": "trimPct", "var_name": "trimPct"}, {"original_string": "public double[][] bounds;", "modifier": "public", "type": "double[][]", "declarator": "bounds", "var_name": "bounds"}], "methods": [{"identifier": "Winsorizer", "parameters": "(double trimPct)", "modifiers": "public", "return": "", "signature": " Winsorizer(double trimPct)", "full_signature": "public  Winsorizer(double trimPct)", "class_method_signature": "Winsorizer.Winsorizer(double trimPct)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(List<double[]> metrics)", "modifiers": "public", "return": "List<double[]>", "signature": "List<double[]> process(List<double[]> metrics)", "full_signature": "public List<double[]> process(List<double[]> metrics)", "class_method_signature": "Winsorizer.process(List<double[]> metrics)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/macrobase/analysis/stats/Winsorizer.java"}, "focal_method": {"identifier": "process", "parameters": "(List<double[]> metrics)", "modifiers": "public", "return": "List<double[]>", "body": "public List<double[]> process(List<double[]> metrics) {\n        int n = metrics.size();\n        int k = metrics.get(0).length;\n        Percentile p = new Percentile();\n        bounds = new double[k][2];\n        List<double[]> newMetrics = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            newMetrics.add(new double[k]);\n        }\n\n        double[] curDimensionValues = new double[n];\n        for (int j = 0; j < k; j++) {\n            for (int i = 0; i < n; i++) {\n                curDimensionValues[i] = metrics.get(i)[j];\n            }\n            p.setData(curDimensionValues);\n            bounds[j][0] = p.evaluate(trimPct);\n            bounds[j][1] = p.evaluate(100 - trimPct);\n            for (int i = 0; i < n; i++) {\n                double curValue = curDimensionValues[i];\n                if (curValue > bounds[j][1]) {\n                    newMetrics.get(i)[j] = bounds[j][1];\n                } else if (curValue < bounds[j][0]) {\n                    newMetrics.get(i)[j] = bounds[j][0];\n                } else {\n                    newMetrics.get(i)[j] = curValue;\n                }\n            }\n        }\n\n        return newMetrics;\n    }", "signature": "List<double[]> process(List<double[]> metrics)", "full_signature": "public List<double[]> process(List<double[]> metrics)", "class_method_signature": "Winsorizer.process(List<double[]> metrics)", "testcase": false, "constructor": false, "invocations": ["size", "get", "add", "get", "setData", "evaluate", "evaluate", "get", "get", "get"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}