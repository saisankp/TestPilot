{"test_class": {"identifier": "DATypeImportComputerTest", "superclass": "", "interfaces": "", "fields": [], "file": "core-parent/core/src/test/java/fr/javatronic/damapping/processor/sourcegenerator/imports/DATypeImportComputerTest.java"}, "test_case": {"identifier": "getImports_no_typeArgs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getImports_no_typeArgs() throws Exception {\n    DAType daType = daType(\"test.Toto\");\n    Assertions.assertThat(DATypeImportComputer.computeImports(daType)).extracting(\"qualifiedName.name\").containsOnly(\"test.Toto\");\n  }", "signature": "void getImports_no_typeArgs()", "full_signature": "@Test public void getImports_no_typeArgs()", "class_method_signature": "DATypeImportComputerTest.getImports_no_typeArgs()", "testcase": true, "constructor": false, "invocations": ["daType", "containsOnly", "extracting", "assertThat", "computeImports"]}, "focal_class": {"identifier": "DATypeImportComputer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Function<DAType,Collection<DAImport>> COMPUTE_IMPORTS = new Function<DAType, Collection<DAImport>>() {\n    @Override\n    public Collection<DAImport> apply(DAType daType) {\n      return computeImports(daType);\n    }\n  };", "modifier": "private static final", "type": "Function<DAType,Collection<DAImport>>", "declarator": "COMPUTE_IMPORTS = new Function<DAType, Collection<DAImport>>() {\n    @Override\n    public Collection<DAImport> apply(DAType daType) {\n      return computeImports(daType);\n    }\n  }", "var_name": "COMPUTE_IMPORTS"}], "methods": [{"identifier": "computeImports", "parameters": "(DAType daType)", "modifiers": "public static", "return": "Collection<DAImport>", "signature": "Collection<DAImport> computeImports(DAType daType)", "full_signature": "public static Collection<DAImport> computeImports(DAType daType)", "class_method_signature": "DATypeImportComputer.computeImports(DAType daType)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Set<DAImport> res, Iterable<DAImport> daImports)", "modifiers": "private static", "return": "void", "signature": "void addAll(Set<DAImport> res, Iterable<DAImport> daImports)", "full_signature": "private static void addAll(Set<DAImport> res, Iterable<DAImport> daImports)", "class_method_signature": "DATypeImportComputer.addAll(Set<DAImport> res, Iterable<DAImport> daImports)", "testcase": false, "constructor": false}, {"identifier": "hasQualifiedNameToImport", "parameters": "(DAType daType)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasQualifiedNameToImport(DAType daType)", "full_signature": "private static boolean hasQualifiedNameToImport(DAType daType)", "class_method_signature": "DATypeImportComputer.hasQualifiedNameToImport(DAType daType)", "testcase": false, "constructor": false}, {"identifier": "hasNoName", "parameters": "(DATypeKind kind)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasNoName(DATypeKind kind)", "full_signature": "private static boolean hasNoName(DATypeKind kind)", "class_method_signature": "DATypeImportComputer.hasNoName(DATypeKind kind)", "testcase": false, "constructor": false}], "file": "core-parent/core/src/main/java/fr/javatronic/damapping/processor/sourcegenerator/imports/DATypeImportComputer.java"}, "focal_method": {"identifier": "computeImports", "parameters": "(DAType daType)", "modifiers": "public static", "return": "Collection<DAImport>", "body": "public static Collection<DAImport> computeImports(DAType daType) {\n    List<DAImport> qualifiedName = hasQualifiedNameToImport(daType)\n        ? Collections.<DAImport>emptyList() : Collections.singletonList(DAImportImpl.from(daType.getQualifiedName()));\n\n    Set<DAImport> res = new HashSet<DAImport>();\n    addAll(res, qualifiedName);\n    List<Collection<DAImport>> argsImportLists = from(daType.getTypeArgs()).transform(COMPUTE_IMPORTS).toList();\n    for (Collection<DAImport> importList : argsImportLists) {\n      addAll(res, importList);\n    }\n    addAll(res,\n        daType.getSuperBound() == null ? Collections.<DAImport>emptyList() : computeImports(daType.getSuperBound())\n    );\n    addAll(res, daType.getExtendsBound() == null ? Collections.<DAImport>emptyList() : computeImports(daType.getExtendsBound()));\n    return res;\n  }", "signature": "Collection<DAImport> computeImports(DAType daType)", "full_signature": "public static Collection<DAImport> computeImports(DAType daType)", "class_method_signature": "DATypeImportComputer.computeImports(DAType daType)", "testcase": false, "constructor": false, "invocations": ["hasQualifiedNameToImport", "emptyList", "singletonList", "from", "getQualifiedName", "addAll", "toList", "transform", "from", "getTypeArgs", "addAll", "addAll", "getSuperBound", "emptyList", "computeImports", "getSuperBound", "addAll", "getExtendsBound", "emptyList", "computeImports", "getExtendsBound"]}, "repository": {"repo_id": 14714017, "url": "https://github.com/lesaint/damapping", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 14, "size": 4324, "license": "licensed"}}