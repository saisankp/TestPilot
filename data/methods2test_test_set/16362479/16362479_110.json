{"test_class": {"identifier": "EntityOwnerSelectionStrategyConfigReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "opendaylight/md-sal/sal-distributed-eos/src/test/java/org/opendaylight/controller/cluster/entityownership/selectionstrategy/EntityOwnerSelectionStrategyConfigReaderTest.java"}, "test_case": {"identifier": "testReadStrategiesInvalidClassType", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testReadStrategiesInvalidClassType() {\n        final Map<Object, Object> props = new HashMap<>();\n        props.put(\"entity.type.test\", \"String,100\");\n        EntityOwnerSelectionStrategyConfigReader.loadStrategyWithConfig(props);\n    }", "signature": "void testReadStrategiesInvalidClassType()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testReadStrategiesInvalidClassType()", "class_method_signature": "EntityOwnerSelectionStrategyConfigReaderTest.testReadStrategiesInvalidClassType()", "testcase": true, "constructor": false, "invocations": ["put", "loadStrategyWithConfig"]}, "focal_class": {"identifier": "EntityOwnerSelectionStrategyConfigReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(EntityOwnerSelectionStrategyConfigReader.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(EntityOwnerSelectionStrategyConfigReader.class)", "var_name": "LOG"}, {"original_string": "private static final String ENTITY_TYPE_PREFIX = \"entity.type.\";", "modifier": "private static final", "type": "String", "declarator": "ENTITY_TYPE_PREFIX = \"entity.type.\"", "var_name": "ENTITY_TYPE_PREFIX"}], "methods": [{"identifier": "EntityOwnerSelectionStrategyConfigReader", "parameters": "()", "modifiers": "private", "return": "", "signature": " EntityOwnerSelectionStrategyConfigReader()", "full_signature": "private  EntityOwnerSelectionStrategyConfigReader()", "class_method_signature": "EntityOwnerSelectionStrategyConfigReader.EntityOwnerSelectionStrategyConfigReader()", "testcase": false, "constructor": true}, {"identifier": "loadStrategyWithConfig", "parameters": "(final Map<Object, Object> props)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") public static", "return": "EntityOwnerSelectionStrategyConfig", "signature": "EntityOwnerSelectionStrategyConfig loadStrategyWithConfig(final Map<Object, Object> props)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") public static EntityOwnerSelectionStrategyConfig loadStrategyWithConfig(final Map<Object, Object> props)", "class_method_signature": "EntityOwnerSelectionStrategyConfigReader.loadStrategyWithConfig(final Map<Object, Object> props)", "testcase": false, "constructor": false}, {"identifier": "parseConfiguration", "parameters": "(final Builder builder,\n            final Map<Object, Object> properties)", "modifiers": "private static", "return": "EntityOwnerSelectionStrategyConfig", "signature": "EntityOwnerSelectionStrategyConfig parseConfiguration(final Builder builder,\n            final Map<Object, Object> properties)", "full_signature": "private static EntityOwnerSelectionStrategyConfig parseConfiguration(final Builder builder,\n            final Map<Object, Object> properties)", "class_method_signature": "EntityOwnerSelectionStrategyConfigReader.parseConfiguration(final Builder builder,\n            final Map<Object, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "loadClass", "parameters": "(final String strategyClassAndDelay)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "Class<? extends EntityOwnerSelectionStrategy>", "signature": "Class<? extends EntityOwnerSelectionStrategy> loadClass(final String strategyClassAndDelay)", "full_signature": "@SuppressWarnings(\"unchecked\") private static Class<? extends EntityOwnerSelectionStrategy> loadClass(final String strategyClassAndDelay)", "class_method_signature": "EntityOwnerSelectionStrategyConfigReader.loadClass(final String strategyClassAndDelay)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-eos/src/main/java/org/opendaylight/controller/cluster/entityownership/selectionstrategy/EntityOwnerSelectionStrategyConfigReader.java"}, "focal_method": {"identifier": "loadStrategyWithConfig", "parameters": "(final Map<Object, Object> props)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") public static", "return": "EntityOwnerSelectionStrategyConfig", "body": "@SuppressWarnings(\"checkstyle:IllegalCatch\")\n    public static EntityOwnerSelectionStrategyConfig loadStrategyWithConfig(final Map<Object, Object> props) {\n        final EntityOwnerSelectionStrategyConfig.Builder builder = EntityOwnerSelectionStrategyConfig.newBuilder();\n\n        if (props != null && !props.isEmpty()) {\n            parseConfiguration(builder, props);\n        } else {\n            if (props == null) {\n                LOG.debug(\"Could not read strategy configuration file, will use default configuration.\");\n            } else {\n                LOG.debug(\"Configuration file is empty, will use default configuration.\");\n            }\n        }\n        return builder.build();\n    }", "signature": "EntityOwnerSelectionStrategyConfig loadStrategyWithConfig(final Map<Object, Object> props)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") public static EntityOwnerSelectionStrategyConfig loadStrategyWithConfig(final Map<Object, Object> props)", "class_method_signature": "EntityOwnerSelectionStrategyConfigReader.loadStrategyWithConfig(final Map<Object, Object> props)", "testcase": false, "constructor": false, "invocations": ["newBuilder", "isEmpty", "parseConfiguration", "debug", "debug", "build"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}