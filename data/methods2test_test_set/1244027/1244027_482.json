{"test_class": {"identifier": "ClusteredChangeBusTest", "superclass": "extends AbstractChangeBusTest", "interfaces": "", "fields": [{"original_string": "private static List<ClusteringService> clusteringServices;", "modifier": "private static", "type": "List<ClusteringService>", "declarator": "clusteringServices", "var_name": "clusteringServices"}, {"original_string": "private ExecutorService executorService = Executors.newCachedThreadPool();", "modifier": "private", "type": "ExecutorService", "declarator": "executorService = Executors.newCachedThreadPool()", "var_name": "executorService"}, {"original_string": "private List<ChangeBus> buses = new ArrayList<>();", "modifier": "private", "type": "List<ChangeBus>", "declarator": "buses = new ArrayList<>()", "var_name": "buses"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/bus/ClusteredChangeBusTest.java"}, "test_case": {"identifier": "twoBusesShouldNotifyEachOther", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void twoBusesShouldNotifyEachOther() throws Exception {\n        // Create three observers ...\n        TestListener listener1 = new TestListener(2);\n        TestListener listener2 = new TestListener(2);\n   \n        startBusWithRegisteredListener(listener1, listener2);\n    \n        // Send changeSet to one of the buses ...\n        ChangeSet changeSet1 = new TestChangeSet(\"bus1\");\n        buses.get(1).notify(changeSet1);\n    \n        ChangeSet changeSet2 = new TestChangeSet(\"bus2\");\n        buses.get(2).notify(changeSet2);    \n        \n        // Wait for the observers to be notified ...\n        listener1.assertExpectedEvents(changeSet1, changeSet2);\n        listener2.assertExpectedEvents(changeSet1, changeSet2);\n    }", "signature": "void twoBusesShouldNotifyEachOther()", "full_signature": "@Test public void twoBusesShouldNotifyEachOther()", "class_method_signature": "ClusteredChangeBusTest.twoBusesShouldNotifyEachOther()", "testcase": true, "constructor": false, "invocations": ["startBusWithRegisteredListener", "notify", "get", "notify", "get", "assertExpectedEvents", "assertExpectedEvents"]}, "focal_class": {"identifier": "ClusteredChangeBus", "superclass": "extends MessageConsumer<ChangeSet>", "interfaces": "implements ChangeBus", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(ClusteredChangeBus.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(ClusteredChangeBus.class)", "var_name": "LOGGER"}, {"original_string": "private final ChangeBus delegate;", "modifier": "private final", "type": "ChangeBus", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private final ClusteringService clusteringService;", "modifier": "private final", "type": "ClusteringService", "declarator": "clusteringService", "var_name": "clusteringService"}], "methods": [{"identifier": "ClusteredChangeBus", "parameters": "( ChangeBus delegate,\n                               ClusteringService clusteringService )", "modifiers": "public", "return": "", "signature": " ClusteredChangeBus( ChangeBus delegate,\n                               ClusteringService clusteringService )", "full_signature": "public  ClusteredChangeBus( ChangeBus delegate,\n                               ClusteringService clusteringService )", "class_method_signature": "ClusteredChangeBus.ClusteredChangeBus( ChangeBus delegate,\n                               ClusteringService clusteringService )", "testcase": false, "constructor": true}, {"identifier": "consume", "parameters": "( ChangeSet changes )", "modifiers": "@Override public", "return": "void", "signature": "void consume( ChangeSet changes )", "full_signature": "@Override public void consume( ChangeSet changes )", "class_method_signature": "ClusteredChangeBus.consume( ChangeSet changes )", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void start()", "full_signature": "@Override public synchronized void start()", "class_method_signature": "ClusteredChangeBus.start()", "testcase": false, "constructor": false}, {"identifier": "hasObservers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasObservers()", "full_signature": "@Override public boolean hasObservers()", "class_method_signature": "ClusteredChangeBus.hasObservers()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public synchronized void shutdown()", "class_method_signature": "ClusteredChangeBus.shutdown()", "testcase": false, "constructor": false}, {"identifier": "notify", "parameters": "( ChangeSet changeSet )", "modifiers": "@Override public", "return": "void", "signature": "void notify( ChangeSet changeSet )", "full_signature": "@Override public void notify( ChangeSet changeSet )", "class_method_signature": "ClusteredChangeBus.notify( ChangeSet changeSet )", "testcase": false, "constructor": false}, {"identifier": "logSendOperation", "parameters": "( ChangeSet changeSet )", "modifiers": "protected final", "return": "void", "signature": "void logSendOperation( ChangeSet changeSet )", "full_signature": "protected final void logSendOperation( ChangeSet changeSet )", "class_method_signature": "ClusteredChangeBus.logSendOperation( ChangeSet changeSet )", "testcase": false, "constructor": false}, {"identifier": "logReceivedOperation", "parameters": "( ChangeSet changeSet )", "modifiers": "protected final", "return": "void", "signature": "void logReceivedOperation( ChangeSet changeSet )", "full_signature": "protected final void logReceivedOperation( ChangeSet changeSet )", "class_method_signature": "ClusteredChangeBus.logReceivedOperation( ChangeSet changeSet )", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "( ChangeSetListener listener )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean register( ChangeSetListener listener )", "full_signature": "@Override public boolean register( ChangeSetListener listener )", "class_method_signature": "ClusteredChangeBus.register( ChangeSetListener listener )", "testcase": false, "constructor": false}, {"identifier": "registerInThread", "parameters": "( ChangeSetListener listener )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean registerInThread( ChangeSetListener listener )", "full_signature": "@Override public boolean registerInThread( ChangeSetListener listener )", "class_method_signature": "ClusteredChangeBus.registerInThread( ChangeSetListener listener )", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "( ChangeSetListener listener )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean unregister( ChangeSetListener listener )", "full_signature": "@Override public boolean unregister( ChangeSetListener listener )", "class_method_signature": "ClusteredChangeBus.unregister( ChangeSetListener listener )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/bus/ClusteredChangeBus.java"}, "focal_method": {"identifier": "notify", "parameters": "( ChangeSet changeSet )", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void notify( ChangeSet changeSet ) {\n        if (changeSet == null) {\n            return; // do nothing\n        }\n        if (!clusteringService.multipleMembersInCluster()) {\n            // We are in clustered mode, but there is only one participant in the cluster (us).\n            // So short-circuit the cluster and just notify the local observers ...\n            consume(changeSet);\n            return;\n        }\n\n        // There are multiple participants in the cluster, so send all changes out to JGroups,\n        // letting JGroups do the ordering of messages...\n        // note that JGroups will dispatch our own changeset *in a separate thread* (see below)\n        logSendOperation(changeSet);\n        clusteringService.sendMessage(changeSet);\n    }", "signature": "void notify( ChangeSet changeSet )", "full_signature": "@Override public void notify( ChangeSet changeSet )", "class_method_signature": "ClusteredChangeBus.notify( ChangeSet changeSet )", "testcase": false, "constructor": false, "invocations": ["multipleMembersInCluster", "consume", "logSendOperation", "sendMessage"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}