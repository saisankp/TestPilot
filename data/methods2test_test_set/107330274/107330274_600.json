{"test_class": {"identifier": "JobAssertionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final JobConfiguration configuration = mock(JobConfiguration.class);", "modifier": "private final", "type": "JobConfiguration", "declarator": "configuration = mock(JobConfiguration.class)", "var_name": "configuration"}, {"original_string": "private final JobAssertions jobAssertions = new JobAssertions(configuration, id -> ResourceDimension.empty());", "modifier": "private final", "type": "JobAssertions", "declarator": "jobAssertions = new JobAssertions(configuration, id -> ResourceDimension.empty())", "var_name": "jobAssertions"}], "file": "titus-api/src/test/java/com/netflix/titus/api/jobmanager/model/job/sanitizer/JobAssertionsTest.java"}, "test_case": {"identifier": "testGoodEnvironmentVariableNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGoodEnvironmentVariableNames() {\n        Map<String, String> violations = jobAssertions.validateEnvironmentVariableNames(ImmutableMap.of(\n                \"THIS_IS_GOOD_123\", \"good name\",\n                \"_THIS_IS_2_GOOD\", \"good name\",\n                \"_AND_THIS\", \"good name\"\n        ));\n        assertThat(violations).isEmpty();\n    }", "signature": "void testGoodEnvironmentVariableNames()", "full_signature": "@Test public void testGoodEnvironmentVariableNames()", "class_method_signature": "JobAssertionsTest.testGoodEnvironmentVariableNames()", "testcase": true, "constructor": false, "invocations": ["validateEnvironmentVariableNames", "of", "isEmpty", "assertThat"]}, "focal_class": {"identifier": "JobAssertions", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Charset UTF_8 = Charset.forName(\"UTF-8\");", "modifier": "private static final", "type": "Charset", "declarator": "UTF_8 = Charset.forName(\"UTF-8\")", "var_name": "UTF_8"}, {"original_string": "public static final int MAX_ENTRY_POINT_SIZE_SIZE_KB = 16;", "modifier": "public static final", "type": "int", "declarator": "MAX_ENTRY_POINT_SIZE_SIZE_KB = 16", "var_name": "MAX_ENTRY_POINT_SIZE_SIZE_KB"}, {"original_string": "public static final int MAX_ENTRY_POINT_SIZE_SIZE_BYTES = MAX_ENTRY_POINT_SIZE_SIZE_KB * 1024;", "modifier": "public static final", "type": "int", "declarator": "MAX_ENTRY_POINT_SIZE_SIZE_BYTES = MAX_ENTRY_POINT_SIZE_SIZE_KB * 1024", "var_name": "MAX_ENTRY_POINT_SIZE_SIZE_BYTES"}, {"original_string": "private static final Pattern SG_PATTERN = Pattern.compile(\"sg-.*\");", "modifier": "private static final", "type": "Pattern", "declarator": "SG_PATTERN = Pattern.compile(\"sg-.*\")", "var_name": "SG_PATTERN"}, {"original_string": "private static final Pattern IMAGE_NAME_PATTERN = Pattern.compile(\"[a-zA-Z0-9\\\\.\\\\\\\\/_-]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "IMAGE_NAME_PATTERN = Pattern.compile(\"[a-zA-Z0-9\\\\.\\\\\\\\/_-]+\")", "var_name": "IMAGE_NAME_PATTERN"}, {"original_string": "private static final Pattern IMAGE_TAG_PATTERN = Pattern.compile(\"[a-zA-Z0-9\\\\._-]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "IMAGE_TAG_PATTERN = Pattern.compile(\"[a-zA-Z0-9\\\\._-]+\")", "var_name": "IMAGE_TAG_PATTERN"}, {"original_string": "private static final String DIGEST_ALGORITHM_SEPARATOR = \"[+.-_]\";", "modifier": "private static final", "type": "String", "declarator": "DIGEST_ALGORITHM_SEPARATOR = \"[+.-_]\"", "var_name": "DIGEST_ALGORITHM_SEPARATOR"}, {"original_string": "private static final String DIGEST_ALGORITHM_COMPONENT = \"[A-Za-z][A-Za-z0-9]*\";", "modifier": "private static final", "type": "String", "declarator": "DIGEST_ALGORITHM_COMPONENT = \"[A-Za-z][A-Za-z0-9]*\"", "var_name": "DIGEST_ALGORITHM_COMPONENT"}, {"original_string": "private static final String DIGEST_ALGORITHM = String.format(\"%s[%s%s]*\", DIGEST_ALGORITHM_COMPONENT, DIGEST_ALGORITHM_SEPARATOR, DIGEST_ALGORITHM_COMPONENT);", "modifier": "private static final", "type": "String", "declarator": "DIGEST_ALGORITHM = String.format(\"%s[%s%s]*\", DIGEST_ALGORITHM_COMPONENT, DIGEST_ALGORITHM_SEPARATOR, DIGEST_ALGORITHM_COMPONENT)", "var_name": "DIGEST_ALGORITHM"}, {"original_string": "private static final String DIGEST_HEX = \"[0-9a-fA-F]{32,}\";", "modifier": "private static final", "type": "String", "declarator": "DIGEST_HEX = \"[0-9a-fA-F]{32,}\"", "var_name": "DIGEST_HEX"}, {"original_string": "private static final String DIGEST = String.format(\"%s:%s\", DIGEST_ALGORITHM, DIGEST_HEX);", "modifier": "private static final", "type": "String", "declarator": "DIGEST = String.format(\"%s:%s\", DIGEST_ALGORITHM, DIGEST_HEX)", "var_name": "DIGEST"}, {"original_string": "private static final Pattern IMAGE_DIGEST_PATTERN = Pattern.compile(DIGEST);", "modifier": "private static final", "type": "Pattern", "declarator": "IMAGE_DIGEST_PATTERN = Pattern.compile(DIGEST)", "var_name": "IMAGE_DIGEST_PATTERN"}, {"original_string": "private final JobConfiguration configuration;", "modifier": "private final", "type": "JobConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final Function<String, ResourceDimension> maxContainerSizeResolver;", "modifier": "private final", "type": "Function<String, ResourceDimension>", "declarator": "maxContainerSizeResolver", "var_name": "maxContainerSizeResolver"}], "methods": [{"identifier": "JobAssertions", "parameters": "(JobConfiguration configuration,\n                         Function<String, ResourceDimension> maxContainerSizeResolver)", "modifiers": "public", "return": "", "signature": " JobAssertions(JobConfiguration configuration,\n                         Function<String, ResourceDimension> maxContainerSizeResolver)", "full_signature": "public  JobAssertions(JobConfiguration configuration,\n                         Function<String, ResourceDimension> maxContainerSizeResolver)", "class_method_signature": "JobAssertions.JobAssertions(JobConfiguration configuration,\n                         Function<String, ResourceDimension> maxContainerSizeResolver)", "testcase": false, "constructor": true}, {"identifier": "isValidSyntax", "parameters": "(List<String> securityGroups)", "modifiers": "public", "return": "boolean", "signature": "boolean isValidSyntax(List<String> securityGroups)", "full_signature": "public boolean isValidSyntax(List<String> securityGroups)", "class_method_signature": "JobAssertions.isValidSyntax(List<String> securityGroups)", "testcase": false, "constructor": false}, {"identifier": "isValidIamRole", "parameters": "(String iamRole)", "modifiers": "public", "return": "boolean", "signature": "boolean isValidIamRole(String iamRole)", "full_signature": "public boolean isValidIamRole(String iamRole)", "class_method_signature": "JobAssertions.isValidIamRole(String iamRole)", "testcase": false, "constructor": false}, {"identifier": "isEntryPointNotTooLarge", "parameters": "(List<String> entryPoint)", "modifiers": "public", "return": "boolean", "signature": "boolean isEntryPointNotTooLarge(List<String> entryPoint)", "full_signature": "public boolean isEntryPointNotTooLarge(List<String> entryPoint)", "class_method_signature": "JobAssertions.isEntryPointNotTooLarge(List<String> entryPoint)", "testcase": false, "constructor": false}, {"identifier": "validateEnvironmentVariableNames", "parameters": "(Map<String, String> environment)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> validateEnvironmentVariableNames(Map<String, String> environment)", "full_signature": "public Map<String, String> validateEnvironmentVariableNames(Map<String, String> environment)", "class_method_signature": "JobAssertions.validateEnvironmentVariableNames(Map<String, String> environment)", "testcase": false, "constructor": false}, {"identifier": "isAsciiUpperCase", "parameters": "(char c)", "modifiers": "private", "return": "boolean", "signature": "boolean isAsciiUpperCase(char c)", "full_signature": "private boolean isAsciiUpperCase(char c)", "class_method_signature": "JobAssertions.isAsciiUpperCase(char c)", "testcase": false, "constructor": false}, {"identifier": "areEnvironmentVariablesNotTooLarge", "parameters": "(Map<String, String> environment)", "modifiers": "public", "return": "boolean", "signature": "boolean areEnvironmentVariablesNotTooLarge(Map<String, String> environment)", "full_signature": "public boolean areEnvironmentVariablesNotTooLarge(Map<String, String> environment)", "class_method_signature": "JobAssertions.areEnvironmentVariablesNotTooLarge(Map<String, String> environment)", "testcase": false, "constructor": false}, {"identifier": "isValidContainerHealthServiceName", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean isValidContainerHealthServiceName(String name)", "full_signature": "public boolean isValidContainerHealthServiceName(String name)", "class_method_signature": "JobAssertions.isValidContainerHealthServiceName(String name)", "testcase": false, "constructor": false}, {"identifier": "validateImage", "parameters": "(Image image)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> validateImage(Image image)", "full_signature": "public Map<String, String> validateImage(Image image)", "class_method_signature": "JobAssertions.validateImage(Image image)", "testcase": false, "constructor": false}, {"identifier": "notExceedsComputeResources", "parameters": "(String capacityGroup, Container container)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> notExceedsComputeResources(String capacityGroup, Container container)", "full_signature": "public Map<String, String> notExceedsComputeResources(String capacityGroup, Container container)", "class_method_signature": "JobAssertions.notExceedsComputeResources(String capacityGroup, Container container)", "testcase": false, "constructor": false}, {"identifier": "notExceedsIpAllocations", "parameters": "(Container container, JobDescriptor.JobDescriptorExt extension)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> notExceedsIpAllocations(Container container, JobDescriptor.JobDescriptorExt extension)", "full_signature": "public Map<String, String> notExceedsIpAllocations(Container container, JobDescriptor.JobDescriptorExt extension)", "class_method_signature": "JobAssertions.notExceedsIpAllocations(Container container, JobDescriptor.JobDescriptorExt extension)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(Supplier<N> jobResource, Supplier<N> maxAllowed)", "modifiers": "private", "return": "Optional<String>", "signature": "Optional<String> check(Supplier<N> jobResource, Supplier<N> maxAllowed)", "full_signature": "private Optional<String> check(Supplier<N> jobResource, Supplier<N> maxAllowed)", "class_method_signature": "JobAssertions.check(Supplier<N> jobResource, Supplier<N> maxAllowed)", "testcase": false, "constructor": false}], "file": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/sanitizer/JobAssertions.java"}, "focal_method": {"identifier": "validateEnvironmentVariableNames", "parameters": "(Map<String, String> environment)", "modifiers": "public", "return": "Map<String, String>", "body": "public Map<String, String> validateEnvironmentVariableNames(Map<String, String> environment) {\n        if (CollectionsExt.isNullOrEmpty(environment)) {\n            return Collections.emptyMap();\n        }\n\n        Map<String, String> violations = new HashMap<>();\n        environment.forEach((key, value) -> {\n            if (key.isEmpty()) {\n                violations.put(\"empty\", \"the environment name cannot be an empty string\");\n                return;\n            }\n\n            char first = key.charAt(0);\n            if (!isAsciiUpperCase(first) && first != '_') {\n                violations.put(\"invalidFirstCharacter\", \"the environment name must start with an upper case ASCII letter or '_'\");\n            }\n\n            if (key.length() == 1) {\n                return;\n            }\n\n            for (int i = 1; i < key.length(); i++) {\n                char c = key.charAt(i);\n                if (!isAsciiUpperCase(c) && !isAsciiDigit(c) && c != '_') {\n                    violations.put(\"invalidCharacter\", \"the environment name characters may be an upper case ASCII letter, a digit or '_'\");\n                    break;\n                }\n            }\n        });\n\n        return violations;\n    }", "signature": "Map<String, String> validateEnvironmentVariableNames(Map<String, String> environment)", "full_signature": "public Map<String, String> validateEnvironmentVariableNames(Map<String, String> environment)", "class_method_signature": "JobAssertions.validateEnvironmentVariableNames(Map<String, String> environment)", "testcase": false, "constructor": false, "invocations": ["isNullOrEmpty", "emptyMap", "forEach", "isEmpty", "put", "charAt", "isAsciiUpperCase", "put", "length", "length", "charAt", "isAsciiUpperCase", "isAsciiDigit", "put"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}