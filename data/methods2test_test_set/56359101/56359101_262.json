{"test_class": {"identifier": "SshUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SshUtils spy;", "modifier": "private", "type": "SshUtils", "declarator": "spy", "var_name": "spy"}, {"original_string": "private ThreadUtils threadUtils;", "modifier": "private", "type": "ThreadUtils", "declarator": "threadUtils", "var_name": "threadUtils"}, {"original_string": "private int CONNECT_TIMEOUT = 60000;", "modifier": "private", "type": "int", "declarator": "CONNECT_TIMEOUT = 60000", "var_name": "CONNECT_TIMEOUT"}, {"original_string": "private Session sshSession;", "modifier": "private", "type": "Session", "declarator": "sshSession", "var_name": "sshSession"}, {"original_string": "private Connection sshConnectionWithHost;", "modifier": "private", "type": "Connection", "declarator": "sshConnectionWithHost", "var_name": "sshConnectionWithHost"}], "file": "autonomic-plugin-common/src/test/java/br/com/autonomiccs/autonomic/plugin/common/utils/SshUtilsTest.java"}, "test_case": {"identifier": "authenticateSshSessionWithPublicKeyTestExpectCloudRuntimeException", "parameters": "()", "modifiers": "@Test(expected = CloudRuntimeException.class) public", "return": "void", "body": "@Test(expected = CloudRuntimeException.class)\n    public void authenticateSshSessionWithPublicKeyTestExpectCloudRuntimeException() throws IOException {\n        Session sess = Mockito.mock(Session.class);\n        Connection sshConnection = setupAuthenticateSshSessionWithPublicKeyTest(sess, false);\n        spy.authenticateSshSessionWithPublicKey(sshConnection);\n    }", "signature": "void authenticateSshSessionWithPublicKeyTestExpectCloudRuntimeException()", "full_signature": "@Test(expected = CloudRuntimeException.class) public void authenticateSshSessionWithPublicKeyTestExpectCloudRuntimeException()", "class_method_signature": "SshUtilsTest.authenticateSshSessionWithPublicKeyTestExpectCloudRuntimeException()", "testcase": true, "constructor": false, "invocations": ["mock", "setupAuthenticateSshSessionWithPublicKeyTest", "authenticateSshSessionWithPublicKey"]}, "focal_class": {"identifier": "SshUtils", "superclass": "", "interfaces": "implements InitializingBean", "fields": [{"original_string": "private Logger logger = Logger.getLogger(this.getClass());", "modifier": "private", "type": "Logger", "declarator": "logger = Logger.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "private int CONNECT_TIMEOUT = 60000;", "modifier": "private", "type": "int", "declarator": "CONNECT_TIMEOUT = 60000", "var_name": "CONNECT_TIMEOUT"}, {"original_string": "@Autowired\n    protected ThreadUtils threadUtils;", "modifier": "@Autowired\n    protected", "type": "ThreadUtils", "declarator": "threadUtils", "var_name": "threadUtils"}, {"original_string": "private File certificate;", "modifier": "private", "type": "File", "declarator": "certificate", "var_name": "certificate"}], "methods": [{"identifier": "authenticateSshSessionWithPublicKey", "parameters": "(Connection sshConnection)", "modifiers": "protected", "return": "Session", "signature": "Session authenticateSshSessionWithPublicKey(Connection sshConnection)", "full_signature": "protected Session authenticateSshSessionWithPublicKey(Connection sshConnection)", "class_method_signature": "SshUtils.authenticateSshSessionWithPublicKey(Connection sshConnection)", "testcase": false, "constructor": false}, {"identifier": "getSshConnectionWithHost", "parameters": "(String address)", "modifiers": "protected", "return": "Connection", "signature": "Connection getSshConnectionWithHost(String address)", "full_signature": "protected Connection getSshConnectionWithHost(String address)", "class_method_signature": "SshUtils.getSshConnectionWithHost(String address)", "testcase": false, "constructor": false}, {"identifier": "executeCommandOnHostViaSsh", "parameters": "(String hostIp, String command)", "modifiers": "public", "return": "void", "signature": "void executeCommandOnHostViaSsh(String hostIp, String command)", "full_signature": "public void executeCommandOnHostViaSsh(String hostIp, String command)", "class_method_signature": "SshUtils.executeCommandOnHostViaSsh(String hostIp, String command)", "testcase": false, "constructor": false}, {"identifier": "waitUntilCommandFinishes", "parameters": "(String hostIp, String command, Session sshSession)", "modifiers": "protected", "return": "void", "signature": "void waitUntilCommandFinishes(String hostIp, String command, Session sshSession)", "full_signature": "protected void waitUntilCommandFinishes(String hostIp, String command, Session sshSession)", "class_method_signature": "SshUtils.waitUntilCommandFinishes(String hostIp, String command, Session sshSession)", "testcase": false, "constructor": false}, {"identifier": "sendFileToHost", "parameters": "(File localfilePath, String remoteFileName, String remotePath, String address)", "modifiers": "public", "return": "void", "signature": "void sendFileToHost(File localfilePath, String remoteFileName, String remotePath, String address)", "full_signature": "public void sendFileToHost(File localfilePath, String remoteFileName, String remotePath, String address)", "class_method_signature": "SshUtils.sendFileToHost(File localfilePath, String remoteFileName, String remotePath, String address)", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "SshUtils.afterPropertiesSet()", "testcase": false, "constructor": false}], "file": "autonomic-plugin-common/src/main/java/br/com/autonomiccs/autonomic/plugin/common/utils/SshUtils.java"}, "focal_method": {"identifier": "authenticateSshSessionWithPublicKey", "parameters": "(Connection sshConnection)", "modifiers": "protected", "return": "Session", "body": "protected Session authenticateSshSessionWithPublicKey(Connection sshConnection) throws IOException {\n        sshConnection.connect(null, CONNECT_TIMEOUT, CONNECT_TIMEOUT);\n        if (!sshConnection.authenticateWithPublicKey(\"root\", certificate, null)) {\n            throw new CloudRuntimeException(String.format(\"Unable to authenticate to (%s)\", sshConnection.getHostname()));\n        }\n        return sshConnection.openSession();\n    }", "signature": "Session authenticateSshSessionWithPublicKey(Connection sshConnection)", "full_signature": "protected Session authenticateSshSessionWithPublicKey(Connection sshConnection)", "class_method_signature": "SshUtils.authenticateSshSessionWithPublicKey(Connection sshConnection)", "testcase": false, "constructor": false, "invocations": ["connect", "authenticateWithPublicKey", "format", "getHostname", "openSession"]}, "repository": {"repo_id": 56359101, "url": "https://github.com/Autonomiccs/autonomiccs-platform", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 944, "license": "licensed"}}