{"test_class": {"identifier": "ExpressionTest", "superclass": "", "interfaces": "", "fields": [], "file": "squel/src/test/java/com/github/gchudnov/squel/ExpressionTest.java"}, "test_case": {"identifier": "or", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void or() {\n        String actual = Squel.expr()\n                .or(\"bla\")\n                .toString();\n\n        String expected = \"bla\";\n        assertEquals(expected, actual);\n    }", "signature": "void or()", "full_signature": "@Test public void or()", "class_method_signature": "ExpressionTest.or()", "testcase": true, "constructor": false, "invocations": ["toString", "or", "expr", "assertEquals"]}, "focal_class": {"identifier": "Expression", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final QueryBuilderOptions mOptions;", "modifier": "private final", "type": "QueryBuilderOptions", "declarator": "mOptions", "var_name": "mOptions"}, {"original_string": "private ExpressionNode mTree = null;", "modifier": "private", "type": "ExpressionNode", "declarator": "mTree = null", "var_name": "mTree"}, {"original_string": "private ExpressionNode mCurrent = null;", "modifier": "private", "type": "ExpressionNode", "declarator": "mCurrent = null", "var_name": "mCurrent"}], "methods": [{"identifier": "Expression", "parameters": "(QueryBuilderOptions options)", "modifiers": "", "return": "", "signature": " Expression(QueryBuilderOptions options)", "full_signature": "  Expression(QueryBuilderOptions options)", "class_method_signature": "Expression.Expression(QueryBuilderOptions options)", "testcase": false, "constructor": true}, {"identifier": "andBegin", "parameters": "()", "modifiers": "public", "return": "Expression", "signature": "Expression andBegin()", "full_signature": "public Expression andBegin()", "class_method_signature": "Expression.andBegin()", "testcase": false, "constructor": false}, {"identifier": "orBegin", "parameters": "()", "modifiers": "public", "return": "Expression", "signature": "Expression orBegin()", "full_signature": "public Expression orBegin()", "class_method_signature": "Expression.orBegin()", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "()", "modifiers": "public", "return": "Expression", "signature": "Expression end()", "full_signature": "public Expression end()", "class_method_signature": "Expression.end()", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(String expr)", "modifiers": "public", "return": "Expression", "signature": "Expression and(String expr)", "full_signature": "public Expression and(String expr)", "class_method_signature": "Expression.and(String expr)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(String expr, P param)", "modifiers": "public", "return": "Expression", "signature": "Expression and(String expr, P param)", "full_signature": "public Expression and(String expr, P param)", "class_method_signature": "Expression.and(String expr, P param)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(String expr)", "modifiers": "public", "return": "Expression", "signature": "Expression or(String expr)", "full_signature": "public Expression or(String expr)", "class_method_signature": "Expression.or(String expr)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(String expr, P param)", "modifiers": "public", "return": "Expression", "signature": "Expression or(String expr, P param)", "full_signature": "public Expression or(String expr, P param)", "class_method_signature": "Expression.or(String expr, P param)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Expression.toString()", "testcase": false, "constructor": false}, {"identifier": "doBegin", "parameters": "(ExpressionType op)", "modifiers": "private", "return": "Expression", "signature": "Expression doBegin(ExpressionType op)", "full_signature": "private Expression doBegin(ExpressionType op)", "class_method_signature": "Expression.doBegin(ExpressionType op)", "testcase": false, "constructor": false}, {"identifier": "doString", "parameters": "(ExpressionNode node)", "modifiers": "private", "return": "String", "signature": "String doString(ExpressionNode node)", "full_signature": "private String doString(ExpressionNode node)", "class_method_signature": "Expression.doString(ExpressionNode node)", "testcase": false, "constructor": false}], "file": "squel/src/main/java/com/github/gchudnov/squel/Expression.java"}, "focal_method": {"identifier": "or", "parameters": "(String expr)", "modifiers": "public", "return": "Expression", "body": "public Expression or(String expr) {\n        return this.or(expr, null);\n    }", "signature": "Expression or(String expr)", "full_signature": "public Expression or(String expr)", "class_method_signature": "Expression.or(String expr)", "testcase": false, "constructor": false, "invocations": ["or"]}, "repository": {"repo_id": 36725014, "url": "https://github.com/gchudnov/squel-java", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 456, "license": "licensed"}}