{"test_class": {"identifier": "ConstantSpeedTraversalSectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DURATION = 1000;", "modifier": "private static final", "type": "double", "declarator": "DURATION = 1000", "var_name": "DURATION"}, {"original_string": "private static final double DISTANCE = 100;", "modifier": "private static final", "type": "double", "declarator": "DISTANCE = 100", "var_name": "DISTANCE"}, {"original_string": "private static final double SPEED = 0.1;", "modifier": "private static final", "type": "double", "declarator": "SPEED = 0.1", "var_name": "SPEED"}, {"original_string": "private final ConstantSpeedTraversalSection traversalSection = new ConstantSpeedTraversalSection(DISTANCE, SPEED, DURATION);", "modifier": "private final", "type": "ConstantSpeedTraversalSection", "declarator": "traversalSection = new ConstantSpeedTraversalSection(DISTANCE, SPEED, DURATION)", "var_name": "traversalSection"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/physics/ConstantSpeedTraversalSectionTest.java"}, "test_case": {"identifier": "testGetDuration_returnsFullDuration", "parameters": "()", "modifiers": "@Test @DisplayName(\"getDuration() method\")", "return": "void", "body": "@Test\n    @DisplayName(\"getDuration() method\")\n    void testGetDuration_returnsFullDuration() {\n        assertThat(traversalSection.getDuration()).isEqualTo(DURATION);\n    }", "signature": "void testGetDuration_returnsFullDuration()", "full_signature": "@Test @DisplayName(\"getDuration() method\") void testGetDuration_returnsFullDuration()", "class_method_signature": "ConstantSpeedTraversalSectionTest.testGetDuration_returnsFullDuration()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getDuration"]}, "focal_class": {"identifier": "ConstantSpeedTraversalSection", "superclass": "", "interfaces": "implements TraversalSection, Serializable", "fields": [{"original_string": "private static final double ROUNDING_ERROR_FRACTION = 1E-9;", "modifier": "private static final", "type": "double", "declarator": "ROUNDING_ERROR_FRACTION = 1E-9", "var_name": "ROUNDING_ERROR_FRACTION"}, {"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final double distance;", "modifier": "private final", "type": "double", "declarator": "distance", "var_name": "distance"}, {"original_string": "private final double speed;", "modifier": "private final", "type": "double", "declarator": "speed", "var_name": "speed"}, {"original_string": "private final double time;", "modifier": "private final", "type": "double", "declarator": "time", "var_name": "time"}], "methods": [{"identifier": "ConstantSpeedTraversalSection", "parameters": "(double distance, double speed, double time)", "modifiers": "", "return": "", "signature": " ConstantSpeedTraversalSection(double distance, double speed, double time)", "full_signature": "  ConstantSpeedTraversalSection(double distance, double speed, double time)", "class_method_signature": "ConstantSpeedTraversalSection.ConstantSpeedTraversalSection(double distance, double speed, double time)", "testcase": false, "constructor": true}, {"identifier": "getDuration", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getDuration()", "full_signature": "@Override public double getDuration()", "class_method_signature": "ConstantSpeedTraversalSection.getDuration()", "testcase": false, "constructor": false}, {"identifier": "getTotalDistance", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getTotalDistance()", "full_signature": "@Override public double getTotalDistance()", "class_method_signature": "ConstantSpeedTraversalSection.getTotalDistance()", "testcase": false, "constructor": false}, {"identifier": "getDistanceAtTime", "parameters": "(@Nonnegative double time)", "modifiers": "@Override public", "return": "double", "signature": "double getDistanceAtTime(@Nonnegative double time)", "full_signature": "@Override public double getDistanceAtTime(@Nonnegative double time)", "class_method_signature": "ConstantSpeedTraversalSection.getDistanceAtTime(@Nonnegative double time)", "testcase": false, "constructor": false}, {"identifier": "getTimeAtDistance", "parameters": "(@Nonnegative double distance)", "modifiers": "@Override public", "return": "double", "signature": "double getTimeAtDistance(@Nonnegative double distance)", "full_signature": "@Override public double getTimeAtDistance(@Nonnegative double distance)", "class_method_signature": "ConstantSpeedTraversalSection.getTimeAtDistance(@Nonnegative double distance)", "testcase": false, "constructor": false}, {"identifier": "getSpeedAtTime", "parameters": "(@Nonnegative double time)", "modifiers": "@Override public", "return": "double", "signature": "double getSpeedAtTime(@Nonnegative double time)", "full_signature": "@Override public double getSpeedAtTime(@Nonnegative double time)", "class_method_signature": "ConstantSpeedTraversalSection.getSpeedAtTime(@Nonnegative double time)", "testcase": false, "constructor": false}, {"identifier": "getAccelerationAtDistance", "parameters": "(@Nonnegative double distance)", "modifiers": "@Override public", "return": "double", "signature": "double getAccelerationAtDistance(@Nonnegative double distance)", "full_signature": "@Override public double getAccelerationAtDistance(@Nonnegative double distance)", "class_method_signature": "ConstantSpeedTraversalSection.getAccelerationAtDistance(@Nonnegative double distance)", "testcase": false, "constructor": false}, {"identifier": "getAccelerationAtTime", "parameters": "(@Nonnegative double time)", "modifiers": "@Override public", "return": "double", "signature": "double getAccelerationAtTime(@Nonnegative double time)", "full_signature": "@Override public double getAccelerationAtTime(@Nonnegative double time)", "class_method_signature": "ConstantSpeedTraversalSection.getAccelerationAtTime(@Nonnegative double time)", "testcase": false, "constructor": false}, {"identifier": "isConstantSpeed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConstantSpeed()", "full_signature": "@Override public boolean isConstantSpeed()", "class_method_signature": "ConstantSpeedTraversalSection.isConstantSpeed()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ConstantSpeedTraversalSection.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ConstantSpeedTraversalSection.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ConstantSpeedTraversalSection.hashCode()", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/physics/ConstantSpeedTraversalSection.java"}, "focal_method": {"identifier": "getDuration", "parameters": "()", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double getDuration() {\n        return time;\n    }", "signature": "double getDuration()", "full_signature": "@Override public double getDuration()", "class_method_signature": "ConstantSpeedTraversalSection.getDuration()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}