{"test_class": {"identifier": "ProjectFileTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/ship/ProjectFileTest.java"}, "test_case": {"identifier": "testFrom", "parameters": "()", "modifiers": "@Test @PrepareForTest(ProjectFile.class) public", "return": "void", "body": "@Test\n  @PrepareForTest(ProjectFile.class)\n  public void testFrom() throws IOException {\n    Path path = mock(Path.class);\n    mockStatic(Files.class);\n    when(Files.newInputStream(path)).thenReturn(openWithExtensionAs(\"json\"));\n    ProjectFile file = ProjectFile.from(path);\n    assertNotNull(file);\n  }", "signature": "void testFrom()", "full_signature": "@Test @PrepareForTest(ProjectFile.class) public void testFrom()", "class_method_signature": "ProjectFileTest.testFrom()", "testcase": true, "constructor": false, "invocations": ["mock", "mockStatic", "thenReturn", "when", "newInputStream", "openWithExtensionAs", "from", "assertNotNull"]}, "focal_class": {"identifier": "ProjectFile", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Getter\n  @Setter\n  protected String name;", "modifier": "@Getter\n  @Setter\n  protected", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "@Getter\n  @Setter\n  protected String source;", "modifier": "@Getter\n  @Setter\n  protected", "type": "String", "declarator": "source", "var_name": "source"}, {"original_string": "@Getter\n  @Setter\n  protected String target;", "modifier": "@Getter\n  @Setter\n  protected", "type": "String", "declarator": "target", "var_name": "target"}, {"original_string": "@Getter\n  @Setter\n  protected List<String> dependencies;", "modifier": "@Getter\n  @Setter\n  protected", "type": "List<String>", "declarator": "dependencies", "var_name": "dependencies"}, {"original_string": "@Getter\n  @Setter\n  protected List<String> tests;", "modifier": "@Getter\n  @Setter\n  protected", "type": "List<String>", "declarator": "tests", "var_name": "tests"}, {"original_string": "@Getter\n  @Setter\n  protected String endpoint = DEFAULT_ENDPOINT;", "modifier": "@Getter\n  @Setter\n  protected", "type": "String", "declarator": "endpoint = DEFAULT_ENDPOINT", "var_name": "endpoint"}, {"original_string": "@Getter\n  @Setter\n  protected String privatekey;", "modifier": "@Getter\n  @Setter\n  protected", "type": "String", "declarator": "privatekey", "var_name": "privatekey"}, {"original_string": "@Getter\n  @Setter\n  protected String password;", "modifier": "@Getter\n  @Setter\n  protected", "type": "String", "declarator": "password", "var_name": "password"}], "methods": [{"identifier": "from", "parameters": "(final Path path)", "modifiers": "public static", "return": "ProjectFile", "signature": "ProjectFile from(final Path path)", "full_signature": "public static ProjectFile from(final Path path)", "class_method_signature": "ProjectFile.from(final Path path)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(final InputStream in)", "modifiers": "public static", "return": "ProjectFile", "signature": "ProjectFile from(final InputStream in)", "full_signature": "public static ProjectFile from(final InputStream in)", "class_method_signature": "ProjectFile.from(final InputStream in)", "testcase": false, "constructor": false}, {"identifier": "getTargetPath", "parameters": "(final Path project)", "modifiers": "public", "return": "String", "signature": "String getTargetPath(final Path project)", "full_signature": "public String getTargetPath(final Path project)", "class_method_signature": "ProjectFile.getTargetPath(final Path project)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toJson()", "full_signature": "public String toJson()", "class_method_signature": "ProjectFile.toJson()", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/ProjectFile.java"}, "focal_method": {"identifier": "from", "parameters": "(final Path path)", "modifiers": "public static", "return": "ProjectFile", "body": "public static ProjectFile from(final Path path) throws IOException {\n    try (final InputStream in = newInputStream(path)) {\n      return ProjectFile.from(in);\n    }\n  }", "signature": "ProjectFile from(final Path path)", "full_signature": "public static ProjectFile from(final Path path)", "class_method_signature": "ProjectFile.from(final Path path)", "testcase": false, "constructor": false, "invocations": ["newInputStream", "from"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}