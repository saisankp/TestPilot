{"test_class": {"identifier": "DefaultTierSlaUpdaterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TestScheduler testScheduler = Schedulers.test();", "modifier": "private final", "type": "TestScheduler", "declarator": "testScheduler = Schedulers.test()", "var_name": "testScheduler"}, {"original_string": "private static final ResourceDimension CRITICAL_CAPACITY = ResourceDimension.newBuilder()\n            .withCpus(10)\n            .withMemoryMB(64 * 1024)\n            .withDiskMB(100 * 1024)\n            .withNetworkMbs(10 * 1000)\n            .build();", "modifier": "private static final", "type": "ResourceDimension", "declarator": "CRITICAL_CAPACITY = ResourceDimension.newBuilder()\n            .withCpus(10)\n            .withMemoryMB(64 * 1024)\n            .withDiskMB(100 * 1024)\n            .withNetworkMbs(10 * 1000)\n            .build()", "var_name": "CRITICAL_CAPACITY"}, {"original_string": "private static final ResourceDimension FLEX_CAPACITY = ResourceDimensions.multiply(CRITICAL_CAPACITY, 2);", "modifier": "private static final", "type": "ResourceDimension", "declarator": "FLEX_CAPACITY = ResourceDimensions.multiply(CRITICAL_CAPACITY, 2)", "var_name": "FLEX_CAPACITY"}, {"original_string": "private static final ApplicationSLA CRITICAL_CAPACITY_GROUP = ApplicationSlaSample.CriticalLarge.build();", "modifier": "private static final", "type": "ApplicationSLA", "declarator": "CRITICAL_CAPACITY_GROUP = ApplicationSlaSample.CriticalLarge.build()", "var_name": "CRITICAL_CAPACITY_GROUP"}, {"original_string": "private static final ApplicationSLA FLEX_CAPACITY_GROUP = ApplicationSlaSample.FlexLarge.build();", "modifier": "private static final", "type": "ApplicationSLA", "declarator": "FLEX_CAPACITY_GROUP = ApplicationSlaSample.FlexLarge.build()", "var_name": "FLEX_CAPACITY_GROUP"}, {"original_string": "private final SchedulerConfiguration config = mock(SchedulerConfiguration.class);", "modifier": "private final", "type": "SchedulerConfiguration", "declarator": "config = mock(SchedulerConfiguration.class)", "var_name": "config"}, {"original_string": "private final ApplicationSlaManagementService applicationSlaManagementService = mock(ApplicationSlaManagementService.class);", "modifier": "private final", "type": "ApplicationSlaManagementService", "declarator": "applicationSlaManagementService = mock(ApplicationSlaManagementService.class)", "var_name": "applicationSlaManagementService"}, {"original_string": "private final AvailableCapacityService availableCapacityService = mock(AvailableCapacityService.class);", "modifier": "private final", "type": "AvailableCapacityService", "declarator": "availableCapacityService = mock(AvailableCapacityService.class)", "var_name": "availableCapacityService"}, {"original_string": "private final DefaultTierSlaUpdater updater = new DefaultTierSlaUpdater(config, applicationSlaManagementService, availableCapacityService, testScheduler);", "modifier": "private final", "type": "DefaultTierSlaUpdater", "declarator": "updater = new DefaultTierSlaUpdater(config, applicationSlaManagementService, availableCapacityService, testScheduler)", "var_name": "updater"}, {"original_string": "private final ExtTestSubscriber<TieredQueueSlas> testSubscriber = new ExtTestSubscriber<>();", "modifier": "private final", "type": "ExtTestSubscriber<TieredQueueSlas>", "declarator": "testSubscriber = new ExtTestSubscriber<>()", "var_name": "testSubscriber"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/scheduler/DefaultTierSlaUpdaterTest.java"}, "test_case": {"identifier": "testTierSlaComputationCorrectness", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTierSlaComputationCorrectness() throws Exception {\n        updater.tieredQueueSlaUpdates().subscribe(testSubscriber);\n\n        testScheduler.triggerActions();\n        MyTieredQueueSlas slas = (MyTieredQueueSlas) testSubscriber.takeNext();\n\n        // Verify critical tier\n        ResAllocs criticalTierCapacity = slas.getTierCapacities().get(Tier.Critical.ordinal());\n        assertThat(fromResAllocs(criticalTierCapacity)).isEqualTo(CRITICAL_CAPACITY);\n\n        // Verify critical capacity group\n        ResAllocs criticalGrCapActual = slas.getGroupCapacities().get(Tier.Critical.ordinal()).get(CRITICAL_CAPACITY_GROUP.getAppName());\n        assertThat(fromResAllocs(criticalGrCapActual)).isEqualTo(toResourceDimension(CRITICAL_CAPACITY_GROUP));\n\n        // Verify flex tier\n        ResAllocs flexTierCapacity = slas.getTierCapacities().get(Tier.Flex.ordinal());\n        assertThat(fromResAllocs(flexTierCapacity)).isEqualTo(FLEX_CAPACITY);\n\n        // Verify flex capacity group\n        ResAllocs flexGrCapActual = slas.getGroupCapacities().get(Tier.Flex.ordinal()).get(FLEX_CAPACITY_GROUP.getAppName());\n        assertThat(fromResAllocs(flexGrCapActual)).isEqualTo(toResourceDimension(FLEX_CAPACITY_GROUP));\n    }", "signature": "void testTierSlaComputationCorrectness()", "full_signature": "@Test public void testTierSlaComputationCorrectness()", "class_method_signature": "DefaultTierSlaUpdaterTest.testTierSlaComputationCorrectness()", "testcase": true, "constructor": false, "invocations": ["subscribe", "tieredQueueSlaUpdates", "triggerActions", "takeNext", "get", "getTierCapacities", "ordinal", "isEqualTo", "assertThat", "fromResAllocs", "get", "get", "getGroupCapacities", "ordinal", "getAppName", "isEqualTo", "assertThat", "fromResAllocs", "toResourceDimension", "get", "getTierCapacities", "ordinal", "isEqualTo", "assertThat", "fromResAllocs", "get", "get", "getGroupCapacities", "ordinal", "getAppName", "isEqualTo", "assertThat", "fromResAllocs", "toResourceDimension"]}, "focal_class": {"identifier": "DefaultTierSlaUpdater", "superclass": "", "interfaces": "implements TierSlaUpdater", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DefaultTierSlaUpdater.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DefaultTierSlaUpdater.class)", "var_name": "logger"}, {"original_string": "private final SchedulerConfiguration schedulerConfiguration;", "modifier": "private final", "type": "SchedulerConfiguration", "declarator": "schedulerConfiguration", "var_name": "schedulerConfiguration"}, {"original_string": "private final ApplicationSlaManagementService applicationSlaManagementService;", "modifier": "private final", "type": "ApplicationSlaManagementService", "declarator": "applicationSlaManagementService", "var_name": "applicationSlaManagementService"}, {"original_string": "private final AvailableCapacityService availableCapacityService;", "modifier": "private final", "type": "AvailableCapacityService", "declarator": "availableCapacityService", "var_name": "availableCapacityService"}, {"original_string": "private final Scheduler scheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}], "methods": [{"identifier": "DefaultTierSlaUpdater", "parameters": "(SchedulerConfiguration schedulerConfiguration,\n                                 ApplicationSlaManagementService applicationSlaManagementService,\n                                 AvailableCapacityService availableCapacityService)", "modifiers": "@Inject public", "return": "", "signature": " DefaultTierSlaUpdater(SchedulerConfiguration schedulerConfiguration,\n                                 ApplicationSlaManagementService applicationSlaManagementService,\n                                 AvailableCapacityService availableCapacityService)", "full_signature": "@Inject public  DefaultTierSlaUpdater(SchedulerConfiguration schedulerConfiguration,\n                                 ApplicationSlaManagementService applicationSlaManagementService,\n                                 AvailableCapacityService availableCapacityService)", "class_method_signature": "DefaultTierSlaUpdater.DefaultTierSlaUpdater(SchedulerConfiguration schedulerConfiguration,\n                                 ApplicationSlaManagementService applicationSlaManagementService,\n                                 AvailableCapacityService availableCapacityService)", "testcase": false, "constructor": true}, {"identifier": "DefaultTierSlaUpdater", "parameters": "(SchedulerConfiguration schedulerConfiguration,\n                          ApplicationSlaManagementService applicationSlaManagementService,\n                          AvailableCapacityService availableCapacityService,\n                          Scheduler scheduler)", "modifiers": "", "return": "", "signature": " DefaultTierSlaUpdater(SchedulerConfiguration schedulerConfiguration,\n                          ApplicationSlaManagementService applicationSlaManagementService,\n                          AvailableCapacityService availableCapacityService,\n                          Scheduler scheduler)", "full_signature": "  DefaultTierSlaUpdater(SchedulerConfiguration schedulerConfiguration,\n                          ApplicationSlaManagementService applicationSlaManagementService,\n                          AvailableCapacityService availableCapacityService,\n                          Scheduler scheduler)", "class_method_signature": "DefaultTierSlaUpdater.DefaultTierSlaUpdater(SchedulerConfiguration schedulerConfiguration,\n                          ApplicationSlaManagementService applicationSlaManagementService,\n                          AvailableCapacityService availableCapacityService,\n                          Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "tieredQueueSlaUpdates", "parameters": "()", "modifiers": "@Override public", "return": "Observable<TieredQueueSlas>", "signature": "Observable<TieredQueueSlas> tieredQueueSlaUpdates()", "full_signature": "@Override public Observable<TieredQueueSlas> tieredQueueSlaUpdates()", "class_method_signature": "DefaultTierSlaUpdater.tieredQueueSlaUpdates()", "testcase": false, "constructor": false}, {"identifier": "recomputeSLAs", "parameters": "()", "modifiers": "private", "return": "TieredQueueSlas", "signature": "TieredQueueSlas recomputeSLAs()", "full_signature": "private TieredQueueSlas recomputeSLAs()", "class_method_signature": "DefaultTierSlaUpdater.recomputeSLAs()", "testcase": false, "constructor": false}, {"identifier": "toResAllocs", "parameters": "(ApplicationSLA applicationSLA)", "modifiers": "static", "return": "ResAllocs", "signature": "ResAllocs toResAllocs(ApplicationSLA applicationSLA)", "full_signature": "static ResAllocs toResAllocs(ApplicationSLA applicationSLA)", "class_method_signature": "DefaultTierSlaUpdater.toResAllocs(ApplicationSLA applicationSLA)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/scheduler/DefaultTierSlaUpdater.java"}, "focal_method": {"identifier": "tieredQueueSlaUpdates", "parameters": "()", "modifiers": "@Override public", "return": "Observable<TieredQueueSlas>", "body": "@Override\n    public Observable<TieredQueueSlas> tieredQueueSlaUpdates() {\n        return Observable.interval(0, schedulerConfiguration.getTierSlaUpdateIntervalMs(), TimeUnit.MILLISECONDS, scheduler)\n                .flatMap(tick -> {\n                    try {\n                        return Observable.just(recomputeSLAs());\n                    } catch (Exception e) {\n                        logger.warn(\"Failed to recompute tier SLAs\", e);\n                        return Observable.empty();\n                    }\n                }).share();\n    }", "signature": "Observable<TieredQueueSlas> tieredQueueSlaUpdates()", "full_signature": "@Override public Observable<TieredQueueSlas> tieredQueueSlaUpdates()", "class_method_signature": "DefaultTierSlaUpdater.tieredQueueSlaUpdates()", "testcase": false, "constructor": false, "invocations": ["share", "flatMap", "interval", "getTierSlaUpdateIntervalMs", "just", "recomputeSLAs", "warn", "empty"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}