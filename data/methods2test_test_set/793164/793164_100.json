{"test_class": {"identifier": "TimeValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final TimeValidator validator = new TimeValidator();", "modifier": "private static final", "type": "TimeValidator", "declarator": "validator = new TimeValidator()", "var_name": "validator"}], "file": "commons/ihe/xds/src/test/java/org/openehealth/ipf/commons/ihe/xds/core/validate/TimeValidatorTest.java"}, "test_case": {"identifier": "testValidateGoodCases", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateGoodCases() throws XDSMetaDataException {\n        validator.validate(\"1980\");\n        validator.validate(\"198001\");\n        validator.validate(\"198012\");\n        validator.validate(\"19800101\");\n        validator.validate(\"19800131\");\n        validator.validate(\"1980010100\");\n        validator.validate(\"1980010123\");\n        validator.validate(\"198001010100\");\n        validator.validate(\"198001010159\");\n        validator.validate(\"19800101010100\");\n        validator.validate(\"19800101010159\");\n    }", "signature": "void testValidateGoodCases()", "full_signature": "@Test public void testValidateGoodCases()", "class_method_signature": "TimeValidatorTest.testValidateGoodCases()", "testcase": true, "constructor": false, "invocations": ["validate", "validate", "validate", "validate", "validate", "validate", "validate", "validate", "validate", "validate", "validate"]}, "focal_class": {"identifier": "TimeValidator", "superclass": "", "interfaces": "implements ValueValidator", "fields": [{"original_string": "private static final String YEAR = \"[0-9]{4}\";", "modifier": "private static final", "type": "String", "declarator": "YEAR = \"[0-9]{4}\"", "var_name": "YEAR"}, {"original_string": "private static final String MONTH = \"(0[1-9]|1[012])\";", "modifier": "private static final", "type": "String", "declarator": "MONTH = \"(0[1-9]|1[012])\"", "var_name": "MONTH"}, {"original_string": "private static final String DAY = \"(0[1-9]|[12][0-9]|3[01])\";", "modifier": "private static final", "type": "String", "declarator": "DAY = \"(0[1-9]|[12][0-9]|3[01])\"", "var_name": "DAY"}, {"original_string": "private static final String HOUR = \"([01][0-9]|2[0123])\";", "modifier": "private static final", "type": "String", "declarator": "HOUR = \"([01][0-9]|2[0123])\"", "var_name": "HOUR"}, {"original_string": "private static final String MIN_SEC = \"[0-5][0-9]\";", "modifier": "private static final", "type": "String", "declarator": "MIN_SEC = \"[0-5][0-9]\"", "var_name": "MIN_SEC"}, {"original_string": "private static final String REG_EX = \n        YEAR + \"(\" + MONTH + \"(\" + DAY + \"(\" + HOUR + \"(\" + MIN_SEC + \"(\" + MIN_SEC + \")?)?)?)?)?\";", "modifier": "private static final", "type": "String", "declarator": "REG_EX = \n        YEAR + \"(\" + MONTH + \"(\" + DAY + \"(\" + HOUR + \"(\" + MIN_SEC + \"(\" + MIN_SEC + \")?)?)?)?)?\"", "var_name": "REG_EX"}, {"original_string": "private static final Pattern TIME_PATTERN = Pattern.compile(REG_EX);", "modifier": "private static final", "type": "Pattern", "declarator": "TIME_PATTERN = Pattern.compile(REG_EX)", "var_name": "TIME_PATTERN"}], "methods": [{"identifier": "validate", "parameters": "(String time)", "modifiers": "@Override public", "return": "void", "signature": "void validate(String time)", "full_signature": "@Override public void validate(String time)", "class_method_signature": "TimeValidator.validate(String time)", "testcase": false, "constructor": false}], "file": "commons/ihe/xds/src/main/java/org/openehealth/ipf/commons/ihe/xds/core/validate/TimeValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(String time)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(String time) throws XDSMetaDataException {\n        notNull(time, \"time cannot be null\");        \n        metaDataAssert(TIME_PATTERN.matcher(time).matches(), INVALID_TIME, time);\n    }", "signature": "void validate(String time)", "full_signature": "@Override public void validate(String time)", "class_method_signature": "TimeValidator.validate(String time)", "testcase": false, "constructor": false, "invocations": ["notNull", "metaDataAssert", "matches", "matcher"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}