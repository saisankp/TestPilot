{"test_class": {"identifier": "PsseImporterTest", "superclass": "extends AbstractConverterTest", "interfaces": "", "fields": [], "file": "psse/psse-converter/src/test/java/com/powsybl/psse/converter/PsseImporterTest.java"}, "test_case": {"identifier": "existsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void existsTest() {\n        // test with a valid raw/RAW file\n        assertTrue(new PsseImporter().exists(new ResourceDataSource(\"IEEE_14_bus\", new ResourceSet(\"/\", \"IEEE_14_bus.raw\"))));\n        assertTrue(new PsseImporter().exists(new ResourceDataSource(\"IEEE_30_bus\", new ResourceSet(\"/\", \"IEEE_30_bus.RAW\"))));\n\n        // test with an invalid extension\n        assertFalse(new PsseImporter().exists(new ResourceDataSource(\"IEEE_14_bus\", new ResourceSet(\"/\", \"IEEE_14_bus.json\"))));\n\n        // test with a valid extension and an invalid content\n        assertFalse(new PsseImporter().exists(new ResourceDataSource(\"fake\", new ResourceSet(\"/\", \"fake.raw\"))));\n\n        // test with not supported content\n        assertFalse(new PsseImporter().exists(new ResourceDataSource(\"case-flag-not-supported\", new ResourceSet(\"/\", \"case-flag-not-supported.raw\"))));\n        assertFalse(new PsseImporter().exists(new ResourceDataSource(\"version-not-supported\", new ResourceSet(\"/\", \"version-not-supported.raw\"))));\n    }", "signature": "void existsTest()", "full_signature": "@Test public void existsTest()", "class_method_signature": "PsseImporterTest.existsTest()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "exists", "assertTrue", "exists", "assertFalse", "exists", "assertFalse", "exists", "assertFalse", "exists", "assertFalse", "exists"]}, "focal_class": {"identifier": "PsseImporter", "superclass": "", "interfaces": "implements Importer", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PsseImporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PsseImporter.class)", "var_name": "LOGGER"}, {"original_string": "private static final String FORMAT = \"PSS/E\";", "modifier": "private static final", "type": "String", "declarator": "FORMAT = \"PSS/E\"", "var_name": "FORMAT"}, {"original_string": "private static final String[] EXTS = {\"raw\", \"RAW\"};", "modifier": "private static final", "type": "String[]", "declarator": "EXTS = {\"raw\", \"RAW\"}", "var_name": "EXTS"}, {"original_string": "private static final Parameter IGNORE_BASE_VOLTAGE_PARAMETER = new Parameter(\"psse.import.ignore-base-voltage\",\n            ParameterType.BOOLEAN,\n            \"Ignore base voltage specified in the file\",\n            Boolean.FALSE);", "modifier": "private static final", "type": "Parameter", "declarator": "IGNORE_BASE_VOLTAGE_PARAMETER = new Parameter(\"psse.import.ignore-base-voltage\",\n            ParameterType.BOOLEAN,\n            \"Ignore base voltage specified in the file\",\n            Boolean.FALSE)", "var_name": "IGNORE_BASE_VOLTAGE_PARAMETER"}, {"original_string": "private static final String V_PROPERTY = \"v\";", "modifier": "private static final", "type": "String", "declarator": "V_PROPERTY = \"v\"", "var_name": "V_PROPERTY"}, {"original_string": "private static final String ANGLE_PROPERTY = \"angle\";", "modifier": "private static final", "type": "String", "declarator": "ANGLE_PROPERTY = \"angle\"", "var_name": "ANGLE_PROPERTY"}], "methods": [{"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getFormat()", "full_signature": "@Override public String getFormat()", "class_method_signature": "PsseImporter.getFormat()", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "List<Parameter>", "signature": "List<Parameter> getParameters()", "full_signature": "@Override public List<Parameter> getParameters()", "class_method_signature": "PsseImporter.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getComment", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getComment()", "full_signature": "@Override public String getComment()", "class_method_signature": "PsseImporter.getComment()", "testcase": false, "constructor": false}, {"identifier": "findExtension", "parameters": "(ReadOnlyDataSource dataSource, boolean throwException)", "modifiers": "private", "return": "String", "signature": "String findExtension(ReadOnlyDataSource dataSource, boolean throwException)", "full_signature": "private String findExtension(ReadOnlyDataSource dataSource, boolean throwException)", "class_method_signature": "PsseImporter.findExtension(ReadOnlyDataSource dataSource, boolean throwException)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(ReadOnlyDataSource dataSource)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(ReadOnlyDataSource dataSource)", "full_signature": "@Override public boolean exists(ReadOnlyDataSource dataSource)", "class_method_signature": "PsseImporter.exists(ReadOnlyDataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "modifiers": "@Override public", "return": "void", "signature": "void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "full_signature": "@Override public void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "class_method_signature": "PsseImporter.copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "testcase": false, "constructor": false}, {"identifier": "getBusId", "parameters": "(int busNum)", "modifiers": "private static", "return": "String", "signature": "String getBusId(int busNum)", "full_signature": "private static String getBusId(int busNum)", "class_method_signature": "PsseImporter.getBusId(int busNum)", "testcase": false, "constructor": false}, {"identifier": "createBus", "parameters": "(PsseBus psseBus, VoltageLevel voltageLevel)", "modifiers": "private static", "return": "Bus", "signature": "Bus createBus(PsseBus psseBus, VoltageLevel voltageLevel)", "full_signature": "private static Bus createBus(PsseBus psseBus, VoltageLevel voltageLevel)", "class_method_signature": "PsseImporter.createBus(PsseBus psseBus, VoltageLevel voltageLevel)", "testcase": false, "constructor": false}, {"identifier": "createSubstation", "parameters": "(Network network, String substationId)", "modifiers": "private static", "return": "Substation", "signature": "Substation createSubstation(Network network, String substationId)", "full_signature": "private static Substation createSubstation(Network network, String substationId)", "class_method_signature": "PsseImporter.createSubstation(Network network, String substationId)", "testcase": false, "constructor": false}, {"identifier": "createVoltageLevel", "parameters": "(PsseBus psseBus, PerUnitContext perUnitContext,\n                                                   String voltageLevelId, Substation substation, Network network)", "modifiers": "private static", "return": "VoltageLevel", "signature": "VoltageLevel createVoltageLevel(PsseBus psseBus, PerUnitContext perUnitContext,\n                                                   String voltageLevelId, Substation substation, Network network)", "full_signature": "private static VoltageLevel createVoltageLevel(PsseBus psseBus, PerUnitContext perUnitContext,\n                                                   String voltageLevelId, Substation substation, Network network)", "class_method_signature": "PsseImporter.createVoltageLevel(PsseBus psseBus, PerUnitContext perUnitContext,\n                                                   String voltageLevelId, Substation substation, Network network)", "testcase": false, "constructor": false}, {"identifier": "createLoad", "parameters": "(PsseLoad psseLoad, ContainersMapping containerMapping, Network network)", "modifiers": "private static", "return": "void", "signature": "void createLoad(PsseLoad psseLoad, ContainersMapping containerMapping, Network network)", "full_signature": "private static void createLoad(PsseLoad psseLoad, ContainersMapping containerMapping, Network network)", "class_method_signature": "PsseImporter.createLoad(PsseLoad psseLoad, ContainersMapping containerMapping, Network network)", "testcase": false, "constructor": false}, {"identifier": "createShuntCompensator", "parameters": "(PsseFixedShunt psseShunt, ContainersMapping containerMapping, Network network)", "modifiers": "private static", "return": "void", "signature": "void createShuntCompensator(PsseFixedShunt psseShunt, ContainersMapping containerMapping, Network network)", "full_signature": "private static void createShuntCompensator(PsseFixedShunt psseShunt, ContainersMapping containerMapping, Network network)", "class_method_signature": "PsseImporter.createShuntCompensator(PsseFixedShunt psseShunt, ContainersMapping containerMapping, Network network)", "testcase": false, "constructor": false}, {"identifier": "createSwitchedShuntBlockMap", "parameters": "(PsseRawModel psseModel, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab)", "modifiers": "private", "return": "void", "signature": "void createSwitchedShuntBlockMap(PsseRawModel psseModel, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab)", "full_signature": "private void createSwitchedShuntBlockMap(PsseRawModel psseModel, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab)", "class_method_signature": "PsseImporter.createSwitchedShuntBlockMap(PsseRawModel psseModel, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab)", "testcase": false, "constructor": false}, {"identifier": "createSwitchedShunt", "parameters": "(PsseSwitchedShunt psseSwShunt, PerUnitContext perUnitContext, ContainersMapping containerMapping, Network network, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab)", "modifiers": "private static", "return": "void", "signature": "void createSwitchedShunt(PsseSwitchedShunt psseSwShunt, PerUnitContext perUnitContext, ContainersMapping containerMapping, Network network, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab)", "full_signature": "private static void createSwitchedShunt(PsseSwitchedShunt psseSwShunt, PerUnitContext perUnitContext, ContainersMapping containerMapping, Network network, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab)", "class_method_signature": "PsseImporter.createSwitchedShunt(PsseSwitchedShunt psseSwShunt, PerUnitContext perUnitContext, ContainersMapping containerMapping, Network network, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab)", "testcase": false, "constructor": false}, {"identifier": "createGenerator", "parameters": "(PsseGenerator psseGen, PsseBus psseBus, ContainersMapping containerMapping, Network network)", "modifiers": "private static", "return": "void", "signature": "void createGenerator(PsseGenerator psseGen, PsseBus psseBus, ContainersMapping containerMapping, Network network)", "full_signature": "private static void createGenerator(PsseGenerator psseGen, PsseBus psseBus, ContainersMapping containerMapping, Network network)", "class_method_signature": "PsseImporter.createGenerator(PsseGenerator psseGen, PsseBus psseBus, ContainersMapping containerMapping, Network network)", "testcase": false, "constructor": false}, {"identifier": "createBuses", "parameters": "(PsseRawModel psseModel, ContainersMapping containerMapping, PerUnitContext perUnitContext,\n                                    Network network, Map<Integer, PsseBus> busNumToPsseBus)", "modifiers": "private static", "return": "void", "signature": "void createBuses(PsseRawModel psseModel, ContainersMapping containerMapping, PerUnitContext perUnitContext,\n                                    Network network, Map<Integer, PsseBus> busNumToPsseBus)", "full_signature": "private static void createBuses(PsseRawModel psseModel, ContainersMapping containerMapping, PerUnitContext perUnitContext,\n                                    Network network, Map<Integer, PsseBus> busNumToPsseBus)", "class_method_signature": "PsseImporter.createBuses(PsseRawModel psseModel, ContainersMapping containerMapping, PerUnitContext perUnitContext,\n                                    Network network, Map<Integer, PsseBus> busNumToPsseBus)", "testcase": false, "constructor": false}, {"identifier": "createLine", "parameters": "(PsseNonTransformerBranch psseLine, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network)", "modifiers": "private static", "return": "void", "signature": "void createLine(PsseNonTransformerBranch psseLine, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network)", "full_signature": "private static void createLine(PsseNonTransformerBranch psseLine, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network)", "class_method_signature": "PsseImporter.createLine(PsseNonTransformerBranch psseLine, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network)", "testcase": false, "constructor": false}, {"identifier": "createTransformer", "parameters": "(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network, Map<Integer, PsseBus> busNumToPsseBus, double sbase)", "modifiers": "private static", "return": "void", "signature": "void createTransformer(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network, Map<Integer, PsseBus> busNumToPsseBus, double sbase)", "full_signature": "private static void createTransformer(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network, Map<Integer, PsseBus> busNumToPsseBus, double sbase)", "class_method_signature": "PsseImporter.createTransformer(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network, Map<Integer, PsseBus> busNumToPsseBus, double sbase)", "testcase": false, "constructor": false}, {"identifier": "importData", "parameters": "(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "modifiers": "@Override public", "return": "Network", "signature": "Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "full_signature": "@Override public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "class_method_signature": "PsseImporter.importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "testcase": false, "constructor": false}], "file": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java"}, "focal_method": {"identifier": "exists", "parameters": "(ReadOnlyDataSource dataSource)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean exists(ReadOnlyDataSource dataSource) {\n        try {\n            String ext = findExtension(dataSource, false);\n            if (ext != null) {\n                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, ext)))) {\n                    return new PsseRawReader().checkCaseIdentification(reader);\n                }\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n        return false;\n    }", "signature": "boolean exists(ReadOnlyDataSource dataSource)", "full_signature": "@Override public boolean exists(ReadOnlyDataSource dataSource)", "class_method_signature": "PsseImporter.exists(ReadOnlyDataSource dataSource)", "testcase": false, "constructor": false, "invocations": ["findExtension", "newInputStream", "checkCaseIdentification"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}