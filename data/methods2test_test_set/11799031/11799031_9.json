{"test_class": {"identifier": "CoverageMetaDataTest", "superclass": "", "interfaces": "", "fields": [], "file": "gdp-data-access/src/test/java/gov/usgs/cida/gdp/dataaccess/CoverageMetaDataTest.java"}, "test_case": {"identifier": "findCoverageDataTypeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findCoverageDataTypeTest() {\n        assertThat(findCoverageDataType(\"int\").toString(), is(equalTo(\"INT\")));\n        assertThat(findCoverageDataType(\"byte\").toString(), is(equalTo(\"BYTE\")));\n        assertThat(findCoverageDataType(\"short\").toString(), is(equalTo(\"SHORT\")));\n        assertThat(findCoverageDataType(\"long\").toString(), is(equalTo(\"LONG\")));\n        assertThat(findCoverageDataType(\"float\").toString(), is(equalTo(\"FLOAT\")));\n        assertThat(findCoverageDataType(\"double\").toString(), is(equalTo(\"DOUBLE\")));\n\n        assertThat(findCoverageDataType(\"INT1\").toString(), is(equalTo(\"BYTE\")));\n        assertThat(findCoverageDataType(\"INT2\").toString(), is(equalTo(\"SHORT\")));\n        assertThat(findCoverageDataType(\"INT4\").toString(), is(equalTo(\"INT\")));\n        assertThat(findCoverageDataType(\"INT8\").toString(), is(equalTo(\"LONG\")));\n        assertThat(findCoverageDataType(\"INT16\").toString(), is(equalTo(\"SHORT\")));\n        assertThat(findCoverageDataType(\"INT32\").toString(), is(equalTo(\"INT\")));\n        assertThat(findCoverageDataType(\"INT64\").toString(), is(equalTo(\"LONG\")));\n\n        assertThat(findCoverageDataType(\"INTEGER\").toString(), is(equalTo(\"INT\")));\n\n        assertThat(findCoverageDataType(\"FLOAT4\").toString(), is(equalTo(\"FLOAT\")));\n        assertThat(findCoverageDataType(\"FLOAT8\").toString(), is(equalTo(\"DOUBLE\")));\n        assertThat(findCoverageDataType(\"FLOAT32\").toString(), is(equalTo(\"FLOAT\")));\n        assertThat(findCoverageDataType(\"FLOAT64\").toString(), is(equalTo(\"DOUBLE\")));\n        \n        assertThat(findCoverageDataType(\"UNUSED\"), is(instanceOf(UnknownDataType.getClass())));\n\n    }", "signature": "void findCoverageDataTypeTest()", "full_signature": "@Test public void findCoverageDataTypeTest()", "class_method_signature": "CoverageMetaDataTest.findCoverageDataTypeTest()", "testcase": true, "constructor": false, "invocations": ["assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "toString", "findCoverageDataType", "is", "equalTo", "assertThat", "findCoverageDataType", "is", "instanceOf", "getClass"]}, "focal_class": {"identifier": "CoverageMetaData", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static DataType UnknownDataType = new DataType() {\n        @Override public int getSizeBytes() { return -1;  }\n        @Override public boolean isIntegerType() { return false; }\n        @Override public boolean isFloatingPointType() { return false; }\n    };", "modifier": "public final static", "type": "DataType", "declarator": "UnknownDataType = new DataType() {\n        @Override public int getSizeBytes() { return -1;  }\n        @Override public boolean isIntegerType() { return false; }\n        @Override public boolean isFloatingPointType() { return false; }\n    }", "var_name": "UnknownDataType"}], "methods": [{"identifier": "findCoverageDataType", "parameters": "(String string)", "modifiers": "public static", "return": "DataType", "signature": "DataType findCoverageDataType(String string)", "full_signature": "public static DataType findCoverageDataType(String string)", "class_method_signature": "CoverageMetaData.findCoverageDataType(String string)", "testcase": false, "constructor": false}], "file": "gdp-data-access/src/main/java/gov/usgs/cida/gdp/dataaccess/CoverageMetaData.java"}, "focal_method": {"identifier": "findCoverageDataType", "parameters": "(String string)", "modifiers": "public static", "return": "DataType", "body": "public static DataType findCoverageDataType(String string) {\n        string = string.toUpperCase();\n\n        for (PrimitiveDataType dataType : PrimitiveDataType.values()) {\n            if (string.equals(dataType.name().toUpperCase())) {\n                return dataType;\n            }\n        }\n\n        if (string.contains(\"INT\")) {\n            // Bits\n            if (string.endsWith(\"16\")) {\n                return PrimitiveDataType.SHORT;\n            }\n            if (string.endsWith(\"32\")) {\n                return PrimitiveDataType.INT;\n            }\n            if (string.endsWith(\"64\")) {\n                return PrimitiveDataType.LONG;\n            }\n            // Bytes\n            if (string.endsWith(\"1\")) {\n                return PrimitiveDataType.BYTE;\n            }\n            if (string.endsWith(\"2\")) {\n                return PrimitiveDataType.SHORT;\n            }\n            if (string.endsWith(\"4\")) {\n                return PrimitiveDataType.INT;\n            }\n            // Byte or Bit?  Assume Byte as it's larger\n            if (string.endsWith(\"8\")) {\n                return PrimitiveDataType.LONG;\n//                return PrimitiveDataType.BYTE;\n            }\n        }\n        \n        if (string.contains(\"INTEGER\")) {\n            return PrimitiveDataType.INT;\n        }\n\n        if (string.contains(\"FLOAT\")) {\n            // Bits\n            if (string.endsWith(\"32\")) {\n                return PrimitiveDataType.FLOAT;\n            }\n            if (string.endsWith(\"64\")) {\n                return PrimitiveDataType.DOUBLE;\n            }\n            // Bytes\n            if (string.endsWith(\"4\")) {\n                return PrimitiveDataType.FLOAT;\n            }\n            if (string.endsWith(\"8\")) {\n                return PrimitiveDataType.DOUBLE;\n            }\n        }\n\n        return UnknownDataType;\n    }", "signature": "DataType findCoverageDataType(String string)", "full_signature": "public static DataType findCoverageDataType(String string)", "class_method_signature": "CoverageMetaData.findCoverageDataType(String string)", "testcase": false, "constructor": false, "invocations": ["toUpperCase", "values", "equals", "toUpperCase", "name", "contains", "endsWith", "endsWith", "endsWith", "endsWith", "endsWith", "endsWith", "endsWith", "contains", "contains", "endsWith", "endsWith", "endsWith", "endsWith"]}, "repository": {"repo_id": 11799031, "url": "https://github.com/USGS-CIDA/geo-data-portal", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 9, "size": 178468, "license": "licensed"}}