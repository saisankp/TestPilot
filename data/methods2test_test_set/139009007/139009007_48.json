{"test_class": {"identifier": "FindFirstStageFactoryTest", "superclass": "extends StageTestBase", "interfaces": "", "fields": [{"original_string": "private final FindFirstStageFactory factory = new FindFirstStageFactory();", "modifier": "private final", "type": "FindFirstStageFactory", "declarator": "factory = new FindFirstStageFactory()", "var_name": "factory"}], "file": "implementation/src/test/java/io/smallrye/reactive/streams/stages/FindFirstStageFactoryTest.java"}, "test_case": {"identifier": "createWithoutStage", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void createWithoutStage() {\n        factory.create(null, null);\n    }", "signature": "void createWithoutStage()", "full_signature": "@Test(expected = NullPointerException.class) public void createWithoutStage()", "class_method_signature": "FindFirstStageFactoryTest.createWithoutStage()", "testcase": true, "constructor": false, "invocations": ["create"]}, "focal_class": {"identifier": "FindFirstStageFactory", "superclass": "", "interfaces": "implements TerminalStageFactory<Stage.FindFirst>", "fields": [{"original_string": "private static final TerminalStage<?, Optional<?>> INSTANCE = source -> {\n        CompletableFuture<Optional<?>> future = new CompletableFuture<>();\n        //noinspection ResultOfMethodCallIgnored\n        source.map(Optional::of).first(Optional.empty())\n                .subscribe(\n                        future::complete, future::completeExceptionally);\n        return future;\n    };", "modifier": "private static final", "type": "TerminalStage<?, Optional<?>>", "declarator": "INSTANCE = source -> {\n        CompletableFuture<Optional<?>> future = new CompletableFuture<>();\n        //noinspection ResultOfMethodCallIgnored\n        source.map(Optional::of).first(Optional.empty())\n                .subscribe(\n                        future::complete, future::completeExceptionally);\n        return future;\n    }", "var_name": "INSTANCE"}], "methods": [{"identifier": "create", "parameters": "(Engine engine, Stage.FindFirst stage)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "TerminalStage<I, O>", "signature": "TerminalStage<I, O> create(Engine engine, Stage.FindFirst stage)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public TerminalStage<I, O> create(Engine engine, Stage.FindFirst stage)", "class_method_signature": "FindFirstStageFactory.create(Engine engine, Stage.FindFirst stage)", "testcase": false, "constructor": false}], "file": "implementation/src/main/java/io/smallrye/reactive/streams/stages/FindFirstStageFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(Engine engine, Stage.FindFirst stage)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "TerminalStage<I, O>", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public <I, O> TerminalStage<I, O> create(Engine engine, Stage.FindFirst stage) {\n        Objects.requireNonNull(stage); // Not really useful here as it conveys no parameters, so just here for symmetry\n        return (TerminalStage<I, O>) INSTANCE;\n    }", "signature": "TerminalStage<I, O> create(Engine engine, Stage.FindFirst stage)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public TerminalStage<I, O> create(Engine engine, Stage.FindFirst stage)", "class_method_signature": "FindFirstStageFactory.create(Engine engine, Stage.FindFirst stage)", "testcase": false, "constructor": false, "invocations": ["requireNonNull"]}, "repository": {"repo_id": 139009007, "url": "https://github.com/smallrye/smallrye-reactive-streams-operators", "stars": 14, "created": "6/28/2018 11:27:21 AM +00:00", "updates": "2020-01-20T06:48:19+00:00", "fork": "False", "license": "licensed"}}