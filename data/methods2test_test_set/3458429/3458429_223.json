{"test_class": {"identifier": "MultiMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-common/src/test/java/com/fireflysource/common/collection/map/MultiMapTest.java"}, "test_case": {"identifier": "testToStringArrayMap", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testToStringArrayMap() {\n        MultiMap<String> mm = new MultiMap<>();\n        mm.putValues(\"food\", \"apple\", \"cherry\", \"raspberry\");\n        mm.put(\"color\", \"red\");\n        mm.putValues(\"amount\", \"bushel\", \"pint\");\n\n        assertMapSize(mm, 3);\n\n        Map<String, String[]> sam = mm.toStringArrayMap();\n        assertEquals(3, sam.size());\n\n        assertArray(\"toStringArrayMap(food)\", sam.get(\"food\"), \"apple\", \"cherry\", \"raspberry\");\n        assertArray(\"toStringArrayMap(color)\", sam.get(\"color\"), \"red\");\n        assertArray(\"toStringArrayMap(amount)\", sam.get(\"amount\"), \"bushel\", \"pint\");\n    }", "signature": "void testToStringArrayMap()", "full_signature": "@Test void testToStringArrayMap()", "class_method_signature": "MultiMapTest.testToStringArrayMap()", "testcase": true, "constructor": false, "invocations": ["putValues", "put", "putValues", "assertMapSize", "toStringArrayMap", "assertEquals", "size", "assertArray", "get", "assertArray", "get", "assertArray", "get"]}, "focal_class": {"identifier": "MultiMap", "superclass": "extends HashMap<String, List<V>>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -1127515104096783129L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -1127515104096783129L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "MultiMap", "parameters": "()", "modifiers": "public", "return": "", "signature": " MultiMap()", "full_signature": "public  MultiMap()", "class_method_signature": "MultiMap.MultiMap()", "testcase": false, "constructor": true}, {"identifier": "MultiMap", "parameters": "(Map<String, List<V>> map)", "modifiers": "public", "return": "", "signature": " MultiMap(Map<String, List<V>> map)", "full_signature": "public  MultiMap(Map<String, List<V>> map)", "class_method_signature": "MultiMap.MultiMap(Map<String, List<V>> map)", "testcase": false, "constructor": true}, {"identifier": "MultiMap", "parameters": "(MultiMap<V> map)", "modifiers": "public", "return": "", "signature": " MultiMap(MultiMap<V> map)", "full_signature": "public  MultiMap(MultiMap<V> map)", "class_method_signature": "MultiMap.MultiMap(MultiMap<V> map)", "testcase": false, "constructor": true}, {"identifier": "getValues", "parameters": "(String name)", "modifiers": "public", "return": "List<V>", "signature": "List<V> getValues(String name)", "full_signature": "public List<V> getValues(String name)", "class_method_signature": "MultiMap.getValues(String name)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(String name, int i)", "modifiers": "public", "return": "V", "signature": "V getValue(String name, int i)", "full_signature": "public V getValue(String name, int i)", "class_method_signature": "MultiMap.getValue(String name, int i)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String getString(String name)", "full_signature": "public String getString(String name)", "class_method_signature": "MultiMap.getString(String name)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String name, V value)", "modifiers": "public", "return": "List<V>", "signature": "List<V> put(String name, V value)", "full_signature": "public List<V> put(String name, V value)", "class_method_signature": "MultiMap.put(String name, V value)", "testcase": false, "constructor": false}, {"identifier": "putAllValues", "parameters": "(Map<String, V> input)", "modifiers": "public", "return": "void", "signature": "void putAllValues(Map<String, V> input)", "full_signature": "public void putAllValues(Map<String, V> input)", "class_method_signature": "MultiMap.putAllValues(Map<String, V> input)", "testcase": false, "constructor": false}, {"identifier": "putValues", "parameters": "(String name, List<V> values)", "modifiers": "public", "return": "List<V>", "signature": "List<V> putValues(String name, List<V> values)", "full_signature": "public List<V> putValues(String name, List<V> values)", "class_method_signature": "MultiMap.putValues(String name, List<V> values)", "testcase": false, "constructor": false}, {"identifier": "putValues", "parameters": "(String name, V... values)", "modifiers": "@SafeVarargs public final", "return": "List<V>", "signature": "List<V> putValues(String name, V... values)", "full_signature": "@SafeVarargs public final List<V> putValues(String name, V... values)", "class_method_signature": "MultiMap.putValues(String name, V... values)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String name, V value)", "modifiers": "public", "return": "void", "signature": "void add(String name, V value)", "full_signature": "public void add(String name, V value)", "class_method_signature": "MultiMap.add(String name, V value)", "testcase": false, "constructor": false}, {"identifier": "addValues", "parameters": "(String name, List<V> values)", "modifiers": "public", "return": "void", "signature": "void addValues(String name, List<V> values)", "full_signature": "public void addValues(String name, List<V> values)", "class_method_signature": "MultiMap.addValues(String name, List<V> values)", "testcase": false, "constructor": false}, {"identifier": "addValues", "parameters": "(String name, V[] values)", "modifiers": "public", "return": "void", "signature": "void addValues(String name, V[] values)", "full_signature": "public void addValues(String name, V[] values)", "class_method_signature": "MultiMap.addValues(String name, V[] values)", "testcase": false, "constructor": false}, {"identifier": "addAllValues", "parameters": "(MultiMap<V> map)", "modifiers": "public", "return": "boolean", "signature": "boolean addAllValues(MultiMap<V> map)", "full_signature": "public boolean addAllValues(MultiMap<V> map)", "class_method_signature": "MultiMap.addAllValues(MultiMap<V> map)", "testcase": false, "constructor": false}, {"identifier": "removeValue", "parameters": "(String name, V value)", "modifiers": "public", "return": "boolean", "signature": "boolean removeValue(String name, V value)", "full_signature": "public boolean removeValue(String name, V value)", "class_method_signature": "MultiMap.removeValue(String name, V value)", "testcase": false, "constructor": false}, {"identifier": "containsSimpleValue", "parameters": "(V value)", "modifiers": "public", "return": "boolean", "signature": "boolean containsSimpleValue(V value)", "full_signature": "public boolean containsSimpleValue(V value)", "class_method_signature": "MultiMap.containsSimpleValue(V value)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MultiMap.toString()", "testcase": false, "constructor": false}, {"identifier": "toStringArrayMap", "parameters": "()", "modifiers": "public", "return": "Map<String, String[]>", "signature": "Map<String, String[]> toStringArrayMap()", "full_signature": "public Map<String, String[]> toStringArrayMap()", "class_method_signature": "MultiMap.toStringArrayMap()", "testcase": false, "constructor": false}], "file": "firefly-common/src/main/java/com/fireflysource/common/collection/map/MultiMap.java"}, "focal_method": {"identifier": "toStringArrayMap", "parameters": "()", "modifiers": "public", "return": "Map<String, String[]>", "body": "public Map<String, String[]> toStringArrayMap() {\n        HashMap<String, String[]> map = new HashMap<String, String[]>(size() * 3 / 2) {\n\n            private static final long serialVersionUID = -6129887569971781626L;\n\n            @Override\n            public String toString() {\n                StringBuilder b = new StringBuilder();\n                b.append('{');\n                for (String k : super.keySet()) {\n                    if (b.length() > 1)\n                        b.append(',');\n                    b.append(k);\n                    b.append('=');\n                    b.append(Arrays.asList(super.get(k)));\n                }\n\n                b.append('}');\n                return b.toString();\n            }\n        };\n\n        for (Entry<String, List<V>> entry : entrySet()) {\n            String[] a = null;\n            if (entry.getValue() != null) {\n                a = new String[entry.getValue().size()];\n                a = entry.getValue().toArray(a);\n            }\n            map.put(entry.getKey(), a);\n        }\n        return map;\n    }", "signature": "Map<String, String[]> toStringArrayMap()", "full_signature": "public Map<String, String[]> toStringArrayMap()", "class_method_signature": "MultiMap.toStringArrayMap()", "testcase": false, "constructor": false, "invocations": ["size", "append", "keySet", "length", "append", "append", "append", "append", "asList", "get", "append", "toString", "entrySet", "getValue", "size", "getValue", "toArray", "getValue", "put", "getKey"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}