{"test_class": {"identifier": "SearchUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ClassNode classNode;", "modifier": "private", "type": "ClassNode", "declarator": "classNode", "var_name": "classNode"}], "file": "instrumenter/src/test/java/com/offbynull/coroutines/instrumenter/asm/SearchUtilsTest.java"}, "test_case": {"identifier": "mustFindMethodsWithIntParameters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mustFindMethodsWithIntParameters() {\n        List<MethodNode> methodNodes = findMethodsWithParameter(classNode.methods, Type.INT_TYPE);\n        \n        assertEquals(2, methodNodes.size());\n        assertEquals(\"method1\", methodNodes.get(0).name);\n        assertEquals(\"method2\", methodNodes.get(1).name);\n    }", "signature": "void mustFindMethodsWithIntParameters()", "full_signature": "@Test public void mustFindMethodsWithIntParameters()", "class_method_signature": "SearchUtilsTest.mustFindMethodsWithIntParameters()", "testcase": true, "constructor": false, "invocations": ["findMethodsWithParameter", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "SearchUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "SearchUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " SearchUtils()", "full_signature": "private  SearchUtils()", "class_method_signature": "SearchUtils.SearchUtils()", "testcase": false, "constructor": true}, {"identifier": "findMethodsWithName", "parameters": "(Collection<MethodNode> methodNodes, String name)", "modifiers": "public static", "return": "List<MethodNode>", "signature": "List<MethodNode> findMethodsWithName(Collection<MethodNode> methodNodes, String name)", "full_signature": "public static List<MethodNode> findMethodsWithName(Collection<MethodNode> methodNodes, String name)", "class_method_signature": "SearchUtils.findMethodsWithName(Collection<MethodNode> methodNodes, String name)", "testcase": false, "constructor": false}, {"identifier": "findStaticMethods", "parameters": "(Collection<MethodNode> methodNodes)", "modifiers": "public static", "return": "List<MethodNode>", "signature": "List<MethodNode> findStaticMethods(Collection<MethodNode> methodNodes)", "full_signature": "public static List<MethodNode> findStaticMethods(Collection<MethodNode> methodNodes)", "class_method_signature": "SearchUtils.findStaticMethods(Collection<MethodNode> methodNodes)", "testcase": false, "constructor": false}, {"identifier": "findMethodsWithParameter", "parameters": "(Collection<MethodNode> methodNodes, Type expectedParamType)", "modifiers": "public static", "return": "List<MethodNode>", "signature": "List<MethodNode> findMethodsWithParameter(Collection<MethodNode> methodNodes, Type expectedParamType)", "full_signature": "public static List<MethodNode> findMethodsWithParameter(Collection<MethodNode> methodNodes, Type expectedParamType)", "class_method_signature": "SearchUtils.findMethodsWithParameter(Collection<MethodNode> methodNodes, Type expectedParamType)", "testcase": false, "constructor": false}, {"identifier": "findMethodsWithParameters", "parameters": "(Collection<MethodNode> methodNodes, Type ... paramTypes)", "modifiers": "public static", "return": "List<MethodNode>", "signature": "List<MethodNode> findMethodsWithParameters(Collection<MethodNode> methodNodes, Type ... paramTypes)", "full_signature": "public static List<MethodNode> findMethodsWithParameters(Collection<MethodNode> methodNodes, Type ... paramTypes)", "class_method_signature": "SearchUtils.findMethodsWithParameters(Collection<MethodNode> methodNodes, Type ... paramTypes)", "testcase": false, "constructor": false}, {"identifier": "findMethod", "parameters": "(Collection<MethodNode> methodNodes, boolean isStatic, Type returnType, String name,\n            Type ... paramTypes)", "modifiers": "public static", "return": "MethodNode", "signature": "MethodNode findMethod(Collection<MethodNode> methodNodes, boolean isStatic, Type returnType, String name,\n            Type ... paramTypes)", "full_signature": "public static MethodNode findMethod(Collection<MethodNode> methodNodes, boolean isStatic, Type returnType, String name,\n            Type ... paramTypes)", "class_method_signature": "SearchUtils.findMethod(Collection<MethodNode> methodNodes, boolean isStatic, Type returnType, String name,\n            Type ... paramTypes)", "testcase": false, "constructor": false}, {"identifier": "findInvocationsOf", "parameters": "(InsnList insnList, Method expectedMethod)", "modifiers": "public static", "return": "List<AbstractInsnNode>", "signature": "List<AbstractInsnNode> findInvocationsOf(InsnList insnList, Method expectedMethod)", "full_signature": "public static List<AbstractInsnNode> findInvocationsOf(InsnList insnList, Method expectedMethod)", "class_method_signature": "SearchUtils.findInvocationsOf(InsnList insnList, Method expectedMethod)", "testcase": false, "constructor": false}, {"identifier": "findInvocationsWithParameter", "parameters": "(InsnList insnList,\n            Type expectedParamType)", "modifiers": "public static", "return": "List<AbstractInsnNode>", "signature": "List<AbstractInsnNode> findInvocationsWithParameter(InsnList insnList,\n            Type expectedParamType)", "full_signature": "public static List<AbstractInsnNode> findInvocationsWithParameter(InsnList insnList,\n            Type expectedParamType)", "class_method_signature": "SearchUtils.findInvocationsWithParameter(InsnList insnList,\n            Type expectedParamType)", "testcase": false, "constructor": false}, {"identifier": "searchForOpcodes", "parameters": "(InsnList insnList, int ... opcodes)", "modifiers": "public static", "return": "List<AbstractInsnNode>", "signature": "List<AbstractInsnNode> searchForOpcodes(InsnList insnList, int ... opcodes)", "full_signature": "public static List<AbstractInsnNode> searchForOpcodes(InsnList insnList, int ... opcodes)", "class_method_signature": "SearchUtils.searchForOpcodes(InsnList insnList, int ... opcodes)", "testcase": false, "constructor": false}, {"identifier": "findTryCatchBlockNodesEncompassingInstruction", "parameters": "(InsnList insnList,\n            List<TryCatchBlockNode> tryCatchBlockNodes, AbstractInsnNode insnNode)", "modifiers": "public static", "return": "List<TryCatchBlockNode>", "signature": "List<TryCatchBlockNode> findTryCatchBlockNodesEncompassingInstruction(InsnList insnList,\n            List<TryCatchBlockNode> tryCatchBlockNodes, AbstractInsnNode insnNode)", "full_signature": "public static List<TryCatchBlockNode> findTryCatchBlockNodesEncompassingInstruction(InsnList insnList,\n            List<TryCatchBlockNode> tryCatchBlockNodes, AbstractInsnNode insnNode)", "class_method_signature": "SearchUtils.findTryCatchBlockNodesEncompassingInstruction(InsnList insnList,\n            List<TryCatchBlockNode> tryCatchBlockNodes, AbstractInsnNode insnNode)", "testcase": false, "constructor": false}, {"identifier": "findLineNumberForInstruction", "parameters": "(InsnList insnList, AbstractInsnNode insnNode)", "modifiers": "public static", "return": "LineNumberNode", "signature": "LineNumberNode findLineNumberForInstruction(InsnList insnList, AbstractInsnNode insnNode)", "full_signature": "public static LineNumberNode findLineNumberForInstruction(InsnList insnList, AbstractInsnNode insnNode)", "class_method_signature": "SearchUtils.findLineNumberForInstruction(InsnList insnList, AbstractInsnNode insnNode)", "testcase": false, "constructor": false}, {"identifier": "findLocalVariableNodeForInstruction", "parameters": "(List<LocalVariableNode> lvnList, InsnList insnList,\n            final AbstractInsnNode insnNode, int idx)", "modifiers": "public static", "return": "LocalVariableNode", "signature": "LocalVariableNode findLocalVariableNodeForInstruction(List<LocalVariableNode> lvnList, InsnList insnList,\n            final AbstractInsnNode insnNode, int idx)", "full_signature": "public static LocalVariableNode findLocalVariableNodeForInstruction(List<LocalVariableNode> lvnList, InsnList insnList,\n            final AbstractInsnNode insnNode, int idx)", "class_method_signature": "SearchUtils.findLocalVariableNodeForInstruction(List<LocalVariableNode> lvnList, InsnList insnList,\n            final AbstractInsnNode insnNode, int idx)", "testcase": false, "constructor": false}, {"identifier": "findField", "parameters": "(ClassNode classNode, String name)", "modifiers": "public static", "return": "FieldNode", "signature": "FieldNode findField(ClassNode classNode, String name)", "full_signature": "public static FieldNode findField(ClassNode classNode, String name)", "class_method_signature": "SearchUtils.findField(ClassNode classNode, String name)", "testcase": false, "constructor": false}], "file": "instrumenter/src/main/java/com/offbynull/coroutines/instrumenter/asm/SearchUtils.java"}, "focal_method": {"identifier": "findMethodsWithParameter", "parameters": "(Collection<MethodNode> methodNodes, Type expectedParamType)", "modifiers": "public static", "return": "List<MethodNode>", "body": "public static List<MethodNode> findMethodsWithParameter(Collection<MethodNode> methodNodes, Type expectedParamType) {\n        Validate.notNull(methodNodes);\n        Validate.notNull(expectedParamType);\n        Validate.noNullElements(methodNodes);\n        Validate.isTrue(expectedParamType.getSort() != Type.METHOD && expectedParamType.getSort() != Type.VOID);\n\n        List<MethodNode> ret = new ArrayList<>();\n        for (MethodNode methodNode : methodNodes) {\n            Type methodDescType = Type.getType(methodNode.desc);\n            Type[] methodParamTypes = methodDescType.getArgumentTypes();\n\n            if (Arrays.asList(methodParamTypes).contains(expectedParamType)) {\n                ret.add(methodNode);\n            }\n        }\n\n        return ret;\n    }", "signature": "List<MethodNode> findMethodsWithParameter(Collection<MethodNode> methodNodes, Type expectedParamType)", "full_signature": "public static List<MethodNode> findMethodsWithParameter(Collection<MethodNode> methodNodes, Type expectedParamType)", "class_method_signature": "SearchUtils.findMethodsWithParameter(Collection<MethodNode> methodNodes, Type expectedParamType)", "testcase": false, "constructor": false, "invocations": ["notNull", "notNull", "noNullElements", "isTrue", "getSort", "getSort", "getType", "getArgumentTypes", "contains", "asList", "add"]}, "repository": {"repo_id": 31940141, "url": "https://github.com/offbynull/coroutines", "language": "Java", "is_fork": false, "fork_count": 45, "stargazer_count": 287, "size": 841, "license": "licensed"}}