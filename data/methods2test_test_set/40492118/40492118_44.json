{"test_class": {"identifier": "ReactiveNetworkTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_VALID_HOST = \"www.test.com\";", "modifier": "private static final", "type": "String", "declarator": "TEST_VALID_HOST = \"www.test.com\"", "var_name": "TEST_VALID_HOST"}, {"original_string": "private static final int TEST_VALID_PORT = 80;", "modifier": "private static final", "type": "int", "declarator": "TEST_VALID_PORT = 80", "var_name": "TEST_VALID_PORT"}, {"original_string": "private static final int TEST_VALID_TIMEOUT = 1000;", "modifier": "private static final", "type": "int", "declarator": "TEST_VALID_TIMEOUT = 1000", "var_name": "TEST_VALID_TIMEOUT"}, {"original_string": "private static final int TEST_VALID_INTERVAL = 1000;", "modifier": "private static final", "type": "int", "declarator": "TEST_VALID_INTERVAL = 1000", "var_name": "TEST_VALID_INTERVAL"}, {"original_string": "private static final int TEST_VALID_INITIAL_INTERVAL = 1000;", "modifier": "private static final", "type": "int", "declarator": "TEST_VALID_INITIAL_INTERVAL = 1000", "var_name": "TEST_VALID_INITIAL_INTERVAL"}, {"original_string": "private static final int TEST_VALID_HTTP_RESPONSE = 204;", "modifier": "private static final", "type": "int", "declarator": "TEST_VALID_HTTP_RESPONSE = 204", "var_name": "TEST_VALID_HTTP_RESPONSE"}], "file": "library/src/test/java/com/github/pwittchen/reactivenetwork/library/rx2/ReactiveNetworkTest.java"}, "test_case": {"identifier": "observeNetworkConnectivityWithStrategyShouldNotBeNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void observeNetworkConnectivityWithStrategyShouldNotBeNull() {\n    // given\n    final Context context = RuntimeEnvironment.application;\n    NetworkObservingStrategy strategy = new LollipopNetworkObservingStrategy();\n\n    // when\n    Observable<Connectivity> observable;\n    observable = ReactiveNetwork.observeNetworkConnectivity(context, strategy);\n\n    // then\n    assertThat(observable).isNotNull();\n  }", "signature": "void observeNetworkConnectivityWithStrategyShouldNotBeNull()", "full_signature": "@Test public void observeNetworkConnectivityWithStrategyShouldNotBeNull()", "class_method_signature": "ReactiveNetworkTest.observeNetworkConnectivityWithStrategyShouldNotBeNull()", "testcase": true, "constructor": false, "invocations": ["observeNetworkConnectivity", "isNotNull", "assertThat"]}, "focal_class": {"identifier": "ReactiveNetwork", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static String LOG_TAG = \"ReactiveNetwork\";", "modifier": "public final static", "type": "String", "declarator": "LOG_TAG = \"ReactiveNetwork\"", "var_name": "LOG_TAG"}], "methods": [{"identifier": "ReactiveNetwork", "parameters": "()", "modifiers": "protected", "return": "", "signature": " ReactiveNetwork()", "full_signature": "protected  ReactiveNetwork()", "class_method_signature": "ReactiveNetwork.ReactiveNetwork()", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "()", "modifiers": "public static", "return": "ReactiveNetwork", "signature": "ReactiveNetwork create()", "full_signature": "public static ReactiveNetwork create()", "class_method_signature": "ReactiveNetwork.create()", "testcase": false, "constructor": false}, {"identifier": "observeNetworkConnectivity", "parameters": "(final Context context)", "modifiers": "@RequiresPermission(Manifest.permission.ACCESS_NETWORK_STATE) public static", "return": "Observable<Connectivity>", "signature": "Observable<Connectivity> observeNetworkConnectivity(final Context context)", "full_signature": "@RequiresPermission(Manifest.permission.ACCESS_NETWORK_STATE) public static Observable<Connectivity> observeNetworkConnectivity(final Context context)", "class_method_signature": "ReactiveNetwork.observeNetworkConnectivity(final Context context)", "testcase": false, "constructor": false}, {"identifier": "observeNetworkConnectivity", "parameters": "(final Context context,\n      final NetworkObservingStrategy strategy)", "modifiers": "@RequiresPermission(Manifest.permission.ACCESS_NETWORK_STATE) public static", "return": "Observable<Connectivity>", "signature": "Observable<Connectivity> observeNetworkConnectivity(final Context context,\n      final NetworkObservingStrategy strategy)", "full_signature": "@RequiresPermission(Manifest.permission.ACCESS_NETWORK_STATE) public static Observable<Connectivity> observeNetworkConnectivity(final Context context,\n      final NetworkObservingStrategy strategy)", "class_method_signature": "ReactiveNetwork.observeNetworkConnectivity(final Context context,\n      final NetworkObservingStrategy strategy)", "testcase": false, "constructor": false}, {"identifier": "observeInternetConnectivity", "parameters": "()", "modifiers": "@RequiresPermission(Manifest.permission.INTERNET) public static", "return": "Observable<Boolean>", "signature": "Observable<Boolean> observeInternetConnectivity()", "full_signature": "@RequiresPermission(Manifest.permission.INTERNET) public static Observable<Boolean> observeInternetConnectivity()", "class_method_signature": "ReactiveNetwork.observeInternetConnectivity()", "testcase": false, "constructor": false}, {"identifier": "observeInternetConnectivity", "parameters": "(\n      InternetObservingSettings settings)", "modifiers": "@RequiresPermission(Manifest.permission.INTERNET) public static", "return": "Observable<Boolean>", "signature": "Observable<Boolean> observeInternetConnectivity(\n      InternetObservingSettings settings)", "full_signature": "@RequiresPermission(Manifest.permission.INTERNET) public static Observable<Boolean> observeInternetConnectivity(\n      InternetObservingSettings settings)", "class_method_signature": "ReactiveNetwork.observeInternetConnectivity(\n      InternetObservingSettings settings)", "testcase": false, "constructor": false}, {"identifier": "observeInternetConnectivity", "parameters": "(\n      final InternetObservingStrategy strategy, final int initialIntervalInMs,\n      final int intervalInMs, final String host, final int port, final int timeoutInMs,\n      final int httpResponse, final ErrorHandler errorHandler)", "modifiers": "@RequiresPermission(Manifest.permission.INTERNET) protected static", "return": "Observable<Boolean>", "signature": "Observable<Boolean> observeInternetConnectivity(\n      final InternetObservingStrategy strategy, final int initialIntervalInMs,\n      final int intervalInMs, final String host, final int port, final int timeoutInMs,\n      final int httpResponse, final ErrorHandler errorHandler)", "full_signature": "@RequiresPermission(Manifest.permission.INTERNET) protected static Observable<Boolean> observeInternetConnectivity(\n      final InternetObservingStrategy strategy, final int initialIntervalInMs,\n      final int intervalInMs, final String host, final int port, final int timeoutInMs,\n      final int httpResponse, final ErrorHandler errorHandler)", "class_method_signature": "ReactiveNetwork.observeInternetConnectivity(\n      final InternetObservingStrategy strategy, final int initialIntervalInMs,\n      final int intervalInMs, final String host, final int port, final int timeoutInMs,\n      final int httpResponse, final ErrorHandler errorHandler)", "testcase": false, "constructor": false}, {"identifier": "checkInternetConnectivity", "parameters": "()", "modifiers": "@RequiresPermission(Manifest.permission.INTERNET) public static", "return": "Single<Boolean>", "signature": "Single<Boolean> checkInternetConnectivity()", "full_signature": "@RequiresPermission(Manifest.permission.INTERNET) public static Single<Boolean> checkInternetConnectivity()", "class_method_signature": "ReactiveNetwork.checkInternetConnectivity()", "testcase": false, "constructor": false}, {"identifier": "checkInternetConnectivity", "parameters": "(InternetObservingSettings settings)", "modifiers": "@RequiresPermission(Manifest.permission.INTERNET) public static", "return": "Single<Boolean>", "signature": "Single<Boolean> checkInternetConnectivity(InternetObservingSettings settings)", "full_signature": "@RequiresPermission(Manifest.permission.INTERNET) public static Single<Boolean> checkInternetConnectivity(InternetObservingSettings settings)", "class_method_signature": "ReactiveNetwork.checkInternetConnectivity(InternetObservingSettings settings)", "testcase": false, "constructor": false}, {"identifier": "checkInternetConnectivity", "parameters": "(\n      final InternetObservingStrategy strategy,\n      final String host, final int port, final int timeoutInMs, final int httpResponse,\n      final ErrorHandler errorHandler)", "modifiers": "@RequiresPermission(Manifest.permission.INTERNET) protected static", "return": "Single<Boolean>", "signature": "Single<Boolean> checkInternetConnectivity(\n      final InternetObservingStrategy strategy,\n      final String host, final int port, final int timeoutInMs, final int httpResponse,\n      final ErrorHandler errorHandler)", "full_signature": "@RequiresPermission(Manifest.permission.INTERNET) protected static Single<Boolean> checkInternetConnectivity(\n      final InternetObservingStrategy strategy,\n      final String host, final int port, final int timeoutInMs, final int httpResponse,\n      final ErrorHandler errorHandler)", "class_method_signature": "ReactiveNetwork.checkInternetConnectivity(\n      final InternetObservingStrategy strategy,\n      final String host, final int port, final int timeoutInMs, final int httpResponse,\n      final ErrorHandler errorHandler)", "testcase": false, "constructor": false}, {"identifier": "checkStrategyIsNotNull", "parameters": "(InternetObservingStrategy strategy)", "modifiers": "private static", "return": "void", "signature": "void checkStrategyIsNotNull(InternetObservingStrategy strategy)", "full_signature": "private static void checkStrategyIsNotNull(InternetObservingStrategy strategy)", "class_method_signature": "ReactiveNetwork.checkStrategyIsNotNull(InternetObservingStrategy strategy)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/ReactiveNetwork.java"}, "focal_method": {"identifier": "observeNetworkConnectivity", "parameters": "(final Context context)", "modifiers": "@RequiresPermission(Manifest.permission.ACCESS_NETWORK_STATE) public static", "return": "Observable<Connectivity>", "body": "@RequiresPermission(Manifest.permission.ACCESS_NETWORK_STATE)\n  public static Observable<Connectivity> observeNetworkConnectivity(final Context context) {\n    final NetworkObservingStrategy strategy;\n\n    if (Preconditions.isAtLeastAndroidMarshmallow()) {\n      strategy = new MarshmallowNetworkObservingStrategy();\n    } else if (Preconditions.isAtLeastAndroidLollipop()) {\n      strategy = new LollipopNetworkObservingStrategy();\n    } else {\n      strategy = new PreLollipopNetworkObservingStrategy();\n    }\n\n    return observeNetworkConnectivity(context, strategy);\n  }", "signature": "Observable<Connectivity> observeNetworkConnectivity(final Context context)", "full_signature": "@RequiresPermission(Manifest.permission.ACCESS_NETWORK_STATE) public static Observable<Connectivity> observeNetworkConnectivity(final Context context)", "class_method_signature": "ReactiveNetwork.observeNetworkConnectivity(final Context context)", "testcase": false, "constructor": false, "invocations": ["isAtLeastAndroidMarshmallow", "isAtLeastAndroidLollipop", "observeNetworkConnectivity"]}, "repository": {"repo_id": 40492118, "url": "https://github.com/pwittchen/ReactiveNetwork", "stars": 2282, "created": "8/10/2015 4:06:58 PM +00:00", "updates": "2020-01-26T20:59:17+00:00", "fork": "False", "license": "licensed"}}