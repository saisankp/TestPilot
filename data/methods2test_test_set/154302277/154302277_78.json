{"test_class": {"identifier": "BundleServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PREFIX = \"prefix\";", "modifier": "private static final", "type": "String", "declarator": "PREFIX = \"prefix\"", "var_name": "PREFIX"}, {"original_string": "private static final String NAME = \"name\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"name\"", "var_name": "NAME"}, {"original_string": "private static final String DEVICE_IDENTIFICATION = \"deviceIdentification\";", "modifier": "private static final", "type": "String", "declarator": "DEVICE_IDENTIFICATION = \"deviceIdentification\"", "var_name": "DEVICE_IDENTIFICATION"}, {"original_string": "private static final String ORGANISATION_IDENTIFICATION = \"organisationIdentification\";", "modifier": "private static final", "type": "String", "declarator": "ORGANISATION_IDENTIFICATION = \"organisationIdentification\"", "var_name": "ORGANISATION_IDENTIFICATION"}, {"original_string": "private static final PlatformFunctionGroup FUNCTION_GROEP = PlatformFunctionGroup.USER;", "modifier": "private static final", "type": "PlatformFunctionGroup", "declarator": "FUNCTION_GROEP = PlatformFunctionGroup.USER", "var_name": "FUNCTION_GROEP"}, {"original_string": "private static final boolean BYPASS_RETRY = false;", "modifier": "private static final", "type": "boolean", "declarator": "BYPASS_RETRY = false", "var_name": "BYPASS_RETRY"}, {"original_string": "private static final int MESSAGE_PRIORITY = 1;", "modifier": "private static final", "type": "int", "declarator": "MESSAGE_PRIORITY = 1", "var_name": "MESSAGE_PRIORITY"}, {"original_string": "@InjectMocks\n    private BundleService bundleService;", "modifier": "@InjectMocks\n    private", "type": "BundleService", "declarator": "bundleService", "var_name": "bundleService"}, {"original_string": "@Mock\n    private DomainHelperService domainHelperService;", "modifier": "@Mock\n    private", "type": "DomainHelperService", "declarator": "domainHelperService", "var_name": "domainHelperService"}, {"original_string": "@Mock\n    private CorrelationIdProviderService correlationIdProviderService;", "modifier": "@Mock\n    private", "type": "CorrelationIdProviderService", "declarator": "correlationIdProviderService", "var_name": "correlationIdProviderService"}, {"original_string": "@Mock\n    private SmartMeteringRequestMessageSender smartMeteringRequestMessageSender;", "modifier": "@Mock\n    private", "type": "SmartMeteringRequestMessageSender", "declarator": "smartMeteringRequestMessageSender", "var_name": "smartMeteringRequestMessageSender"}, {"original_string": "private Organisation organisation;", "modifier": "private", "type": "Organisation", "declarator": "organisation", "var_name": "organisation"}, {"original_string": "private Device device;", "modifier": "private", "type": "Device", "declarator": "device", "var_name": "device"}, {"original_string": "private List<ActionRequest> actionRequestMockList;", "modifier": "private", "type": "List<ActionRequest>", "declarator": "actionRequestMockList", "var_name": "actionRequestMockList"}], "file": "osgp/platform/osgp-adapter-ws-smartmetering/src/test/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/BundleServiceTest.java"}, "test_case": {"identifier": "testAllOperationsAreAllowed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAllOperationsAreAllowed() throws FunctionalException {\n        // Run the test\n        this.bundleService.enqueueBundleRequest(ORGANISATION_IDENTIFICATION, DEVICE_IDENTIFICATION,\n                this.actionRequestMockList, MESSAGE_PRIORITY, BYPASS_RETRY);\n\n        // Verify the test\n        final ArgumentCaptor<SmartMeteringRequestMessage> message = ArgumentCaptor\n                .forClass(SmartMeteringRequestMessage.class);\n\n        verify(this.smartMeteringRequestMessageSender).send(message.capture());\n\n        assertThat(message.getValue().getOrganisationIdentification()).isEqualTo(ORGANISATION_IDENTIFICATION);\n        assertThat(message.getValue().getDeviceIdentification()).isEqualTo(DEVICE_IDENTIFICATION);\n\n        final BundleMessageRequest requestMessage = (BundleMessageRequest) message.getValue().getRequest();\n        final List<ActionRequest> actionList = requestMessage.getBundleList();\n        assertThat(actionList.size()).isEqualTo(this.actionRequestMockList.size());\n\n        for (int i = 0; i < actionList.size(); i++) {\n            assertThat(actionList.get(i)).isEqualTo(this.actionRequestMockList.get(i));\n        }\n    }", "signature": "void testAllOperationsAreAllowed()", "full_signature": "@Test public void testAllOperationsAreAllowed()", "class_method_signature": "BundleServiceTest.testAllOperationsAreAllowed()", "testcase": true, "constructor": false, "invocations": ["enqueueBundleRequest", "forClass", "send", "verify", "capture", "isEqualTo", "assertThat", "getOrganisationIdentification", "getValue", "isEqualTo", "assertThat", "getDeviceIdentification", "getValue", "getRequest", "getValue", "getBundleList", "isEqualTo", "assertThat", "size", "size", "size", "isEqualTo", "assertThat", "get", "get"]}, "focal_class": {"identifier": "BundleService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(BundleService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(BundleService.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private DomainHelperService domainHelperService;", "modifier": "@Autowired\n    private", "type": "DomainHelperService", "declarator": "domainHelperService", "var_name": "domainHelperService"}, {"original_string": "@Autowired\n    private CorrelationIdProviderService correlationIdProviderService;", "modifier": "@Autowired\n    private", "type": "CorrelationIdProviderService", "declarator": "correlationIdProviderService", "var_name": "correlationIdProviderService"}, {"original_string": "@Autowired\n    private SmartMeteringRequestMessageSender smartMeteringRequestMessageSender;", "modifier": "@Autowired\n    private", "type": "SmartMeteringRequestMessageSender", "declarator": "smartMeteringRequestMessageSender", "var_name": "smartMeteringRequestMessageSender"}], "methods": [{"identifier": "BundleService", "parameters": "()", "modifiers": "public", "return": "", "signature": " BundleService()", "full_signature": "public  BundleService()", "class_method_signature": "BundleService.BundleService()", "testcase": false, "constructor": true}, {"identifier": "enqueueBundleRequest", "parameters": "(final String organisationIdentification, final String deviceIdentification,\n            final List<ActionRequest> actionList, final int messagePriority, final boolean bypassRetry)", "modifiers": "public", "return": "String", "signature": "String enqueueBundleRequest(final String organisationIdentification, final String deviceIdentification,\n            final List<ActionRequest> actionList, final int messagePriority, final boolean bypassRetry)", "full_signature": "public String enqueueBundleRequest(final String organisationIdentification, final String deviceIdentification,\n            final List<ActionRequest> actionList, final int messagePriority, final boolean bypassRetry)", "class_method_signature": "BundleService.enqueueBundleRequest(final String organisationIdentification, final String deviceIdentification,\n            final List<ActionRequest> actionList, final int messagePriority, final boolean bypassRetry)", "testcase": false, "constructor": false}, {"identifier": "checkIfBundleIsAllowed", "parameters": "(final List<ActionRequest> actionList, final Organisation organisation,\n            final Device device)", "modifiers": "private", "return": "void", "signature": "void checkIfBundleIsAllowed(final List<ActionRequest> actionList, final Organisation organisation,\n            final Device device)", "full_signature": "private void checkIfBundleIsAllowed(final List<ActionRequest> actionList, final Organisation organisation,\n            final Device device)", "class_method_signature": "BundleService.checkIfBundleIsAllowed(final List<ActionRequest> actionList, final Organisation organisation,\n            final Device device)", "testcase": false, "constructor": false}], "file": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/BundleService.java"}, "focal_method": {"identifier": "enqueueBundleRequest", "parameters": "(final String organisationIdentification, final String deviceIdentification,\n            final List<ActionRequest> actionList, final int messagePriority, final boolean bypassRetry)", "modifiers": "public", "return": "String", "body": "public String enqueueBundleRequest(final String organisationIdentification, final String deviceIdentification,\n            final List<ActionRequest> actionList, final int messagePriority, final boolean bypassRetry)\n            throws FunctionalException {\n\n        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n        final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n\n        LOGGER.info(\"Bundle request called with organisation {}\", organisationIdentification);\n        this.checkIfBundleIsAllowed(actionList, organisation, device);\n\n        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n                deviceIdentification);\n\n        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n                organisationIdentification, correlationUid, MessageType.HANDLE_BUNDLED_ACTIONS.name(), messagePriority);\n        deviceMessageMetadata.setBypassRetry(bypassRetry);\n\n        final SmartMeteringRequestMessage message = new SmartMeteringRequestMessage.Builder().deviceMessageMetadata(\n                deviceMessageMetadata).request(new BundleMessageRequest(actionList)).build();\n\n        this.smartMeteringRequestMessageSender.send(message);\n\n        return correlationUid;\n    }", "signature": "String enqueueBundleRequest(final String organisationIdentification, final String deviceIdentification,\n            final List<ActionRequest> actionList, final int messagePriority, final boolean bypassRetry)", "full_signature": "public String enqueueBundleRequest(final String organisationIdentification, final String deviceIdentification,\n            final List<ActionRequest> actionList, final int messagePriority, final boolean bypassRetry)", "class_method_signature": "BundleService.enqueueBundleRequest(final String organisationIdentification, final String deviceIdentification,\n            final List<ActionRequest> actionList, final int messagePriority, final boolean bypassRetry)", "testcase": false, "constructor": false, "invocations": ["findOrganisation", "findActiveDevice", "info", "checkIfBundleIsAllowed", "getCorrelationId", "name", "setBypassRetry", "build", "request", "deviceMessageMetadata", "send"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}