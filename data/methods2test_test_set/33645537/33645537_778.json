{"test_class": {"identifier": "OnSubscribeDeferTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/internal/operators/OnSubscribeDeferTest.java"}, "test_case": {"identifier": "testDeferFunctionThrows", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeferFunctionThrows() {\n        Func0<Observable<String>> factory = mock(Func0.class);\n        \n        when(factory.call()).thenThrow(new TestException());\n        \n        Observable<String> result = Observable.defer(factory);\n        \n        Observer<String> o = mock(Observer.class);\n        \n        result.subscribe(o);\n        \n        verify(o).onError(any(TestException.class));\n        verify(o, never()).onNext(any(String.class));\n        verify(o, never()).onCompleted();\n    }", "signature": "void testDeferFunctionThrows()", "full_signature": "@Test public void testDeferFunctionThrows()", "class_method_signature": "OnSubscribeDeferTest.testDeferFunctionThrows()", "testcase": true, "constructor": false, "invocations": ["mock", "thenThrow", "when", "call", "defer", "mock", "subscribe", "onError", "verify", "any", "onNext", "verify", "never", "any", "onCompleted", "verify", "never"]}, "focal_class": {"identifier": "OnSubscribeDefer", "superclass": "", "interfaces": "implements OnSubscribe<T>", "fields": [{"original_string": "final Func0<? extends Observable<? extends T>> observableFactory;", "modifier": "final", "type": "Func0<? extends Observable<? extends T>>", "declarator": "observableFactory", "var_name": "observableFactory"}], "methods": [{"identifier": "OnSubscribeDefer", "parameters": "(Func0<? extends Observable<? extends T>> observableFactory)", "modifiers": "public", "return": "", "signature": " OnSubscribeDefer(Func0<? extends Observable<? extends T>> observableFactory)", "full_signature": "public  OnSubscribeDefer(Func0<? extends Observable<? extends T>> observableFactory)", "class_method_signature": "OnSubscribeDefer.OnSubscribeDefer(Func0<? extends Observable<? extends T>> observableFactory)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "(Subscriber<? super T> s)", "modifiers": "@Override public", "return": "void", "signature": "void call(Subscriber<? super T> s)", "full_signature": "@Override public void call(Subscriber<? super T> s)", "class_method_signature": "OnSubscribeDefer.call(Subscriber<? super T> s)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/internal/operators/OnSubscribeDefer.java"}, "focal_method": {"identifier": "call", "parameters": "(Subscriber<? super T> s)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void call(Subscriber<? super T> s) {\n        Observable<? extends T> o;\n        try {\n            o = observableFactory.call();\n        } catch (Throwable t) {\n            s.onError(t);\n            return;\n        }\n        o.unsafeSubscribe(s);\n    }", "signature": "void call(Subscriber<? super T> s)", "full_signature": "@Override public void call(Subscriber<? super T> s)", "class_method_signature": "OnSubscribeDefer.call(Subscriber<? super T> s)", "testcase": false, "constructor": false, "invocations": ["call", "onError", "unsafeSubscribe"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}