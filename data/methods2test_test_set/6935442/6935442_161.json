{"test_class": {"identifier": "WrapperFactoryDefaultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public JUnitRuleMockery2 context = JUnitRuleMockery2.createFor(JUnitRuleMockery2.Mode.INTERFACES_AND_CLASSES);", "modifier": "@Rule\n    public", "type": "JUnitRuleMockery2", "declarator": "context = JUnitRuleMockery2.createFor(JUnitRuleMockery2.Mode.INTERFACES_AND_CLASSES)", "var_name": "context"}, {"original_string": "@Mock private _ProxyFactoryService mockProxyFactoryService;", "modifier": "@Mock private", "type": "_ProxyFactoryService", "declarator": "mockProxyFactoryService", "var_name": "mockProxyFactoryService"}, {"original_string": "private WrapperFactoryDefault wrapperFactory;", "modifier": "private", "type": "WrapperFactoryDefault", "declarator": "wrapperFactory", "var_name": "wrapperFactory"}, {"original_string": "private DomainObject createProxyCalledWithDomainObject;", "modifier": "private", "type": "DomainObject", "declarator": "createProxyCalledWithDomainObject", "var_name": "createProxyCalledWithDomainObject"}, {"original_string": "private SyncControl createProxyCalledWithSyncControl;", "modifier": "private", "type": "SyncControl", "declarator": "createProxyCalledWithSyncControl", "var_name": "createProxyCalledWithSyncControl"}], "file": "core/runtimeservices/src/test/java/org/apache/isis/core/runtimeservices/wrapper/WrapperFactoryDefaultTest.java"}, "test_case": {"identifier": "wrap_ofWrapped_differentMode_delegates_to_createProxy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void wrap_ofWrapped_differentMode_delegates_to_createProxy() throws Exception {\n        // given\n        final DomainObject wrappedObject = new DomainObject();\n        final DomainObject domainObject = new WrappingDomainObject(wrappedObject, ImmutableEnumSet.noneOf(ExecutionMode.class));\n\n        // when\n        final DomainObject wrappingObject = wrapperFactory.wrap(domainObject, SyncControl.control().withSkipRules());\n\n        // then\n        assertThat(wrappingObject, is(not(domainObject)));\n        assertThat(createProxyCalledWithDomainObject, is(wrappedObject));\n        Assertions.assertThat(createProxyCalledWithSyncControl.getExecutionModes()).contains(ExecutionMode.SKIP_RULE_VALIDATION);\n    }", "signature": "void wrap_ofWrapped_differentMode_delegates_to_createProxy()", "full_signature": "@Test public void wrap_ofWrapped_differentMode_delegates_to_createProxy()", "class_method_signature": "WrapperFactoryDefaultTest.wrap_ofWrapped_differentMode_delegates_to_createProxy()", "testcase": true, "constructor": false, "invocations": ["noneOf", "wrap", "withSkipRules", "control", "assertThat", "is", "not", "assertThat", "is", "contains", "assertThat", "getExecutionModes"]}, "focal_class": {"identifier": "WrapperFactoryDefault", "superclass": "", "interfaces": "implements WrapperFactory", "fields": [{"original_string": "@Inject IsisInteractionTracker isisInteractionTracker;", "modifier": "@Inject", "type": "IsisInteractionTracker", "declarator": "isisInteractionTracker", "var_name": "isisInteractionTracker"}, {"original_string": "@Inject FactoryService factoryService;", "modifier": "@Inject", "type": "FactoryService", "declarator": "factoryService", "var_name": "factoryService"}, {"original_string": "@Inject MetaModelContext metaModelContext;", "modifier": "@Inject", "type": "MetaModelContext", "declarator": "metaModelContext", "var_name": "metaModelContext"}, {"original_string": "@Inject SpecificationLoader specificationLoader;", "modifier": "@Inject", "type": "SpecificationLoader", "declarator": "specificationLoader", "var_name": "specificationLoader"}, {"original_string": "@Inject Provider<InteractionContext> interactionContextProvider;", "modifier": "@Inject", "type": "Provider<InteractionContext>", "declarator": "interactionContextProvider", "var_name": "interactionContextProvider"}, {"original_string": "@Inject ServiceInjector serviceInjector;", "modifier": "@Inject", "type": "ServiceInjector", "declarator": "serviceInjector", "var_name": "serviceInjector"}, {"original_string": "@Inject _ProxyFactoryService proxyFactoryService;", "modifier": "@Inject", "type": "_ProxyFactoryService", "declarator": "proxyFactoryService", "var_name": "proxyFactoryService"}, {"original_string": "@Inject CommandDtoServiceInternal commandDtoServiceInternal;", "modifier": "@Inject", "type": "CommandDtoServiceInternal", "declarator": "commandDtoServiceInternal", "var_name": "commandDtoServiceInternal"}, {"original_string": "private final List<InteractionListener> listeners = new ArrayList<>();", "modifier": "private final", "type": "List<InteractionListener>", "declarator": "listeners = new ArrayList<>()", "var_name": "listeners"}, {"original_string": "private final Map<Class<? extends InteractionEvent>, InteractionEventDispatcher>\n        dispatchersByEventClass = new HashMap<>();", "modifier": "private final", "type": "Map<Class<? extends InteractionEvent>, InteractionEventDispatcher>", "declarator": "dispatchersByEventClass = new HashMap<>()", "var_name": "dispatchersByEventClass"}, {"original_string": "private ProxyContextHandler proxyContextHandler;", "modifier": "private", "type": "ProxyContextHandler", "declarator": "proxyContextHandler", "var_name": "proxyContextHandler"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "WrapperFactoryDefault.init()", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(T domainObject)", "modifiers": "@Override public", "return": "T", "signature": "T wrap(T domainObject)", "full_signature": "@Override public T wrap(T domainObject)", "class_method_signature": "WrapperFactoryDefault.wrap(T domainObject)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(\n            final T domainObject,\n            final SyncControl syncControl)", "modifiers": "@Override public", "return": "T", "signature": "T wrap(\n            final T domainObject,\n            final SyncControl syncControl)", "full_signature": "@Override public T wrap(\n            final T domainObject,\n            final SyncControl syncControl)", "class_method_signature": "WrapperFactoryDefault.wrap(\n            final T domainObject,\n            final SyncControl syncControl)", "testcase": false, "constructor": false}, {"identifier": "equivalent", "parameters": "(ImmutableEnumSet<ExecutionMode> first, ImmutableEnumSet<ExecutionMode> second)", "modifiers": "private static", "return": "boolean", "signature": "boolean equivalent(ImmutableEnumSet<ExecutionMode> first, ImmutableEnumSet<ExecutionMode> second)", "full_signature": "private static boolean equivalent(ImmutableEnumSet<ExecutionMode> first, ImmutableEnumSet<ExecutionMode> second)", "class_method_signature": "WrapperFactoryDefault.equivalent(ImmutableEnumSet<ExecutionMode> first, ImmutableEnumSet<ExecutionMode> second)", "testcase": false, "constructor": false}, {"identifier": "equivalent", "parameters": "(EnumSet<ExecutionMode> first, EnumSet<ExecutionMode> second)", "modifiers": "private static", "return": "boolean", "signature": "boolean equivalent(EnumSet<ExecutionMode> first, EnumSet<ExecutionMode> second)", "full_signature": "private static boolean equivalent(EnumSet<ExecutionMode> first, EnumSet<ExecutionMode> second)", "class_method_signature": "WrapperFactoryDefault.equivalent(EnumSet<ExecutionMode> first, EnumSet<ExecutionMode> second)", "testcase": false, "constructor": false}, {"identifier": "wrapMixin", "parameters": "(Class<T> mixinClass, Object mixedIn)", "modifiers": "@Override public", "return": "T", "signature": "T wrapMixin(Class<T> mixinClass, Object mixedIn)", "full_signature": "@Override public T wrapMixin(Class<T> mixinClass, Object mixedIn)", "class_method_signature": "WrapperFactoryDefault.wrapMixin(Class<T> mixinClass, Object mixedIn)", "testcase": false, "constructor": false}, {"identifier": "wrapMixin", "parameters": "(Class<T> mixinClass, Object mixedIn, SyncControl syncControl)", "modifiers": "@Override public", "return": "T", "signature": "T wrapMixin(Class<T> mixinClass, Object mixedIn, SyncControl syncControl)", "full_signature": "@Override public T wrapMixin(Class<T> mixinClass, Object mixedIn, SyncControl syncControl)", "class_method_signature": "WrapperFactoryDefault.wrapMixin(Class<T> mixinClass, Object mixedIn, SyncControl syncControl)", "testcase": false, "constructor": false}, {"identifier": "createProxy", "parameters": "(T domainObject, SyncControl syncControl)", "modifiers": "protected", "return": "T", "signature": "T createProxy(T domainObject, SyncControl syncControl)", "full_signature": "protected T createProxy(T domainObject, SyncControl syncControl)", "class_method_signature": "WrapperFactoryDefault.createProxy(T domainObject, SyncControl syncControl)", "testcase": false, "constructor": false}, {"identifier": "isWrapper", "parameters": "(Object possibleWrappedDomainObject)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWrapper(Object possibleWrappedDomainObject)", "full_signature": "@Override public boolean isWrapper(Object possibleWrappedDomainObject)", "class_method_signature": "WrapperFactoryDefault.isWrapper(Object possibleWrappedDomainObject)", "testcase": false, "constructor": false}, {"identifier": "unwrap", "parameters": "(T possibleWrappedDomainObject)", "modifiers": "@Override public", "return": "T", "signature": "T unwrap(T possibleWrappedDomainObject)", "full_signature": "@Override public T unwrap(T possibleWrappedDomainObject)", "class_method_signature": "WrapperFactoryDefault.unwrap(T possibleWrappedDomainObject)", "testcase": false, "constructor": false}, {"identifier": "asyncWrap", "parameters": "(\n            final T domainObject,\n            final AsyncControl<R> asyncControl)", "modifiers": "@Override public", "return": "T", "signature": "T asyncWrap(\n            final T domainObject,\n            final AsyncControl<R> asyncControl)", "full_signature": "@Override public T asyncWrap(\n            final T domainObject,\n            final AsyncControl<R> asyncControl)", "class_method_signature": "WrapperFactoryDefault.asyncWrap(\n            final T domainObject,\n            final AsyncControl<R> asyncControl)", "testcase": false, "constructor": false}, {"identifier": "shouldCheckRules", "parameters": "(final AsyncControl<?> asyncControl)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldCheckRules(final AsyncControl<?> asyncControl)", "full_signature": "private boolean shouldCheckRules(final AsyncControl<?> asyncControl)", "class_method_signature": "WrapperFactoryDefault.shouldCheckRules(final AsyncControl<?> asyncControl)", "testcase": false, "constructor": false}, {"identifier": "asyncWrapMixin", "parameters": "(Class<T> mixinClass, Object mixedIn, AsyncControl<R> asyncControl)", "modifiers": "@Override public", "return": "T", "signature": "T asyncWrapMixin(Class<T> mixinClass, Object mixedIn, AsyncControl<R> asyncControl)", "full_signature": "@Override public T asyncWrapMixin(Class<T> mixinClass, Object mixedIn, AsyncControl<R> asyncControl)", "class_method_signature": "WrapperFactoryDefault.asyncWrapMixin(Class<T> mixinClass, Object mixedIn, AsyncControl<R> asyncControl)", "testcase": false, "constructor": false}, {"identifier": "isInheritedFromJavaLangObject", "parameters": "(final Method method)", "modifiers": "private", "return": "boolean", "signature": "boolean isInheritedFromJavaLangObject(final Method method)", "full_signature": "private boolean isInheritedFromJavaLangObject(final Method method)", "class_method_signature": "WrapperFactoryDefault.isInheritedFromJavaLangObject(final Method method)", "testcase": false, "constructor": false}, {"identifier": "submitAsync", "parameters": "(\n            final MemberAndTarget memberAndTarget,\n            final Object[] args,\n            final AsyncControl<R> asyncControl)", "modifiers": "private", "return": "Object", "signature": "Object submitAsync(\n            final MemberAndTarget memberAndTarget,\n            final Object[] args,\n            final AsyncControl<R> asyncControl)", "full_signature": "private Object submitAsync(\n            final MemberAndTarget memberAndTarget,\n            final Object[] args,\n            final AsyncControl<R> asyncControl)", "class_method_signature": "WrapperFactoryDefault.submitAsync(\n            final MemberAndTarget memberAndTarget,\n            final Object[] args,\n            final AsyncControl<R> asyncControl)", "testcase": false, "constructor": false}, {"identifier": "forRegular", "parameters": "(Method method, T domainObject)", "modifiers": "private", "return": "MemberAndTarget", "signature": "MemberAndTarget forRegular(Method method, T domainObject)", "full_signature": "private MemberAndTarget forRegular(Method method, T domainObject)", "class_method_signature": "WrapperFactoryDefault.forRegular(Method method, T domainObject)", "testcase": false, "constructor": false}, {"identifier": "forMixin", "parameters": "(Method method, T mixedIn)", "modifiers": "private", "return": "MemberAndTarget", "signature": "MemberAndTarget forMixin(Method method, T mixedIn)", "full_signature": "private MemberAndTarget forMixin(Method method, T mixedIn)", "class_method_signature": "WrapperFactoryDefault.forMixin(Method method, T mixedIn)", "testcase": false, "constructor": false}, {"identifier": "authSessionFrom", "parameters": "(AsyncControl<R> asyncControl, AuthenticationSession authSession)", "modifiers": "private static", "return": "SimpleSession", "signature": "SimpleSession authSessionFrom(AsyncControl<R> asyncControl, AuthenticationSession authSession)", "full_signature": "private static SimpleSession authSessionFrom(AsyncControl<R> asyncControl, AuthenticationSession authSession)", "class_method_signature": "WrapperFactoryDefault.authSessionFrom(AsyncControl<R> asyncControl, AuthenticationSession authSession)", "testcase": false, "constructor": false}, {"identifier": "adaptersFor", "parameters": "(final Object[] args)", "modifiers": "private", "return": "ManagedObject[]", "signature": "ManagedObject[] adaptersFor(final Object[] args)", "full_signature": "private ManagedObject[] adaptersFor(final Object[] args)", "class_method_signature": "WrapperFactoryDefault.adaptersFor(final Object[] args)", "testcase": false, "constructor": false}, {"identifier": "getListeners", "parameters": "()", "modifiers": "@Override public", "return": "List<InteractionListener>", "signature": "List<InteractionListener> getListeners()", "full_signature": "@Override public List<InteractionListener> getListeners()", "class_method_signature": "WrapperFactoryDefault.getListeners()", "testcase": false, "constructor": false}, {"identifier": "addInteractionListener", "parameters": "(InteractionListener listener)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addInteractionListener(InteractionListener listener)", "full_signature": "@Override public boolean addInteractionListener(InteractionListener listener)", "class_method_signature": "WrapperFactoryDefault.addInteractionListener(InteractionListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeInteractionListener", "parameters": "(InteractionListener listener)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeInteractionListener(InteractionListener listener)", "full_signature": "@Override public boolean removeInteractionListener(InteractionListener listener)", "class_method_signature": "WrapperFactoryDefault.removeInteractionListener(InteractionListener listener)", "testcase": false, "constructor": false}, {"identifier": "notifyListeners", "parameters": "(InteractionEvent interactionEvent)", "modifiers": "@Override public", "return": "void", "signature": "void notifyListeners(InteractionEvent interactionEvent)", "full_signature": "@Override public void notifyListeners(InteractionEvent interactionEvent)", "class_method_signature": "WrapperFactoryDefault.notifyListeners(InteractionEvent interactionEvent)", "testcase": false, "constructor": false}, {"identifier": "putDispatcher", "parameters": "(\n            Class<T> type, BiConsumer<InteractionListener, T> onDispatch)", "modifiers": "private", "return": "void", "signature": "void putDispatcher(\n            Class<T> type, BiConsumer<InteractionListener, T> onDispatch)", "full_signature": "private void putDispatcher(\n            Class<T> type, BiConsumer<InteractionListener, T> onDispatch)", "class_method_signature": "WrapperFactoryDefault.putDispatcher(\n            Class<T> type, BiConsumer<InteractionListener, T> onDispatch)", "testcase": false, "constructor": false}, {"identifier": "currentInteractionSession", "parameters": "()", "modifiers": "private", "return": "InteractionSession", "signature": "InteractionSession currentInteractionSession()", "full_signature": "private InteractionSession currentInteractionSession()", "class_method_signature": "WrapperFactoryDefault.currentInteractionSession()", "testcase": false, "constructor": false}, {"identifier": "currentObjectManager", "parameters": "()", "modifiers": "private", "return": "ObjectManager", "signature": "ObjectManager currentObjectManager()", "full_signature": "private ObjectManager currentObjectManager()", "class_method_signature": "WrapperFactoryDefault.currentObjectManager()", "testcase": false, "constructor": false}], "file": "core/runtimeservices/src/main/java/org/apache/isis/core/runtimeservices/wrapper/WrapperFactoryDefault.java"}, "focal_method": {"identifier": "wrap", "parameters": "(T domainObject)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T wrap(T domainObject) {\n        return wrap(domainObject, control());\n    }", "signature": "T wrap(T domainObject)", "full_signature": "@Override public T wrap(T domainObject)", "class_method_signature": "WrapperFactoryDefault.wrap(T domainObject)", "testcase": false, "constructor": false, "invocations": ["wrap", "control"]}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}