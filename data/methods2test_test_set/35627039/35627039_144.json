{"test_class": {"identifier": "DruidSinkBundleHintProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DruidSinkBundleHintProvider provider = new DruidSinkBundleHintProvider();", "modifier": "private", "type": "DruidSinkBundleHintProvider", "declarator": "provider = new DruidSinkBundleHintProvider()", "var_name": "provider"}, {"original_string": "@Mocked\n    private EnvironmentService environmentService;", "modifier": "@Mocked\n    private", "type": "EnvironmentService", "declarator": "environmentService", "var_name": "environmentService"}], "file": "streams/cluster/src/test/java/com/hortonworks/streamline/streams/cluster/bundle/impl/DruidSinkBundleHintProviderTest.java"}, "test_case": {"identifier": "getHintsOnCluster", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getHintsOnCluster() throws Exception {\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        Cluster cluster = new Cluster();\n        cluster.setId(1L);\n        cluster.setName(\"cluster1\");\n\n        Service service = new Service();\n        service.setId(1L);\n        service.setName(Constants.Druid.SERVICE_NAME);\n\n        Map<String, String> confMap = new HashMap<>();\n        confMap.put(Constants.Druid.PROPERTY_KEY_ZK_SERVICE_HOSTS, \"svr1:2181,svr2:2181\");\n        confMap.put(Constants.Druid.PROPERTY_KEY_INDEXING_SERVICE_NAME, \"druid/overlord\");\n        confMap.put(Constants.Druid.PROPERTY_KEY_DISCOVERY_CURATOR_PATH, \"/discovery\");\n\n        ServiceConfiguration serviceConfiguration = new ServiceConfiguration();\n        serviceConfiguration.setId(1L);\n        serviceConfiguration.setName(Constants.Druid.CONF_TYPE_COMMON_RUNTIME);\n        serviceConfiguration.setConfiguration(objectMapper.writeValueAsString(confMap));\n\n        new Expectations() {{\n            environmentService.getServiceByName(cluster.getId(), Constants.Druid.SERVICE_NAME);\n            result = service;\n\n            environmentService.getServiceConfigurationByName(service.getId(), Constants.Druid.CONF_TYPE_COMMON_RUNTIME);\n            result = serviceConfiguration;\n        }};\n\n        provider.init(environmentService);\n\n        Map<String, Object> hints = provider.getHintsOnCluster(cluster, null, null);\n        Assert.assertNotNull(hints);\n        Assert.assertEquals(\"svr1:2181,svr2:2181\", hints.get(DruidSinkBundleHintProvider.FIELD_NAME_ZK_CONNECT));\n        Assert.assertEquals(\"druid/overlord\", hints.get(DruidSinkBundleHintProvider.FIELD_NAME_INDEX_SERVICE));\n        Assert.assertEquals(\"/discovery\", hints.get(DruidSinkBundleHintProvider.FIELD_NAME_DISCOVERY_PATH));\n    }", "signature": "void getHintsOnCluster()", "full_signature": "@Test public void getHintsOnCluster()", "class_method_signature": "DruidSinkBundleHintProviderTest.getHintsOnCluster()", "testcase": true, "constructor": false, "invocations": ["setId", "setName", "setId", "setName", "put", "put", "put", "setId", "setName", "setConfiguration", "writeValueAsString", "getServiceByName", "getId", "getServiceConfigurationByName", "getId", "init", "getHintsOnCluster", "assertNotNull", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "DruidSinkBundleHintProvider", "superclass": "extends AbstractBundleHintProvider", "interfaces": "", "fields": [{"original_string": "public static final String FIELD_NAME_ZK_CONNECT = \"tranquilityZKconnect\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_NAME_ZK_CONNECT = \"tranquilityZKconnect\"", "var_name": "FIELD_NAME_ZK_CONNECT"}, {"original_string": "public static final String FIELD_NAME_INDEX_SERVICE = \"indexService\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_NAME_INDEX_SERVICE = \"indexService\"", "var_name": "FIELD_NAME_INDEX_SERVICE"}, {"original_string": "public static final String FIELD_NAME_DISCOVERY_PATH = \"discoveryPath\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_NAME_DISCOVERY_PATH = \"discoveryPath\"", "var_name": "FIELD_NAME_DISCOVERY_PATH"}], "methods": [{"identifier": "getServiceName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getServiceName()", "full_signature": "@Override public String getServiceName()", "class_method_signature": "DruidSinkBundleHintProvider.getServiceName()", "testcase": false, "constructor": false}, {"identifier": "getHintsOnCluster", "parameters": "(Cluster cluster, SecurityContext securityContext, Subject subject)", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject)", "full_signature": "@Override public Map<String, Object> getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject)", "class_method_signature": "DruidSinkBundleHintProvider.getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject)", "testcase": false, "constructor": false}, {"identifier": "putToHintMapIfAvailable", "parameters": "(Map<String, String> configurationMap, Map<String, Object> hintMap,\n                                         String confKey, String fieldName)", "modifiers": "private", "return": "void", "signature": "void putToHintMapIfAvailable(Map<String, String> configurationMap, Map<String, Object> hintMap,\n                                         String confKey, String fieldName)", "full_signature": "private void putToHintMapIfAvailable(Map<String, String> configurationMap, Map<String, Object> hintMap,\n                                         String confKey, String fieldName)", "class_method_signature": "DruidSinkBundleHintProvider.putToHintMapIfAvailable(Map<String, String> configurationMap, Map<String, Object> hintMap,\n                                         String confKey, String fieldName)", "testcase": false, "constructor": false}], "file": "streams/cluster/src/main/java/com/hortonworks/streamline/streams/cluster/bundle/impl/DruidSinkBundleHintProvider.java"}, "focal_method": {"identifier": "getHintsOnCluster", "parameters": "(Cluster cluster, SecurityContext securityContext, Subject subject)", "modifiers": "@Override public", "return": "Map<String, Object>", "body": "@Override\n    public Map<String, Object> getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject) {\n        Map<String, Object> hintMap = new HashMap<>();\n\n        try {\n            Service druid = environmentService.getServiceByName(cluster.getId(), Constants.Druid.SERVICE_NAME);\n            if (druid == null) {\n                throw new ServiceNotFoundException(Constants.Druid.SERVICE_NAME);\n            }\n\n            ServiceConfiguration commonRuntime = environmentService.getServiceConfigurationByName(druid.getId(), Constants.Druid.CONF_TYPE_COMMON_RUNTIME);\n            if (commonRuntime == null) {\n                throw new ServiceConfigurationNotFoundException(Constants.Druid.CONF_TYPE_COMMON_RUNTIME);\n            }\n\n            Map<String, String> configurationMap = commonRuntime.getConfigurationMap();\n            putToHintMapIfAvailable(configurationMap, hintMap, Constants.Druid.PROPERTY_KEY_ZK_SERVICE_HOSTS, FIELD_NAME_ZK_CONNECT);\n            putToHintMapIfAvailable(configurationMap, hintMap, Constants.Druid.PROPERTY_KEY_INDEXING_SERVICE_NAME, FIELD_NAME_INDEX_SERVICE);\n            putToHintMapIfAvailable(configurationMap, hintMap, Constants.Druid.PROPERTY_KEY_DISCOVERY_CURATOR_PATH, FIELD_NAME_DISCOVERY_PATH);\n\n            // exceptional case for Ambari import\n            if (!hintMap.containsKey(FIELD_NAME_INDEX_SERVICE)) {\n                ServiceConfiguration druidOverload = environmentService.getServiceConfigurationByName(druid.getId(), Constants.Druid.CONF_TYPE_DRUID_OVERLOAD);\n                if (druidOverload != null) {\n                    putToHintMapIfAvailable(druidOverload.getConfigurationMap(), hintMap, Constants.Druid.PROPERTY_KEY_SERVICE_NAME, FIELD_NAME_INDEX_SERVICE);\n                }\n            }\n        } catch (ServiceNotFoundException e) {\n            // we access it from mapping information so shouldn't be here\n            throw new IllegalStateException(\"Service \" + Constants.Druid.SERVICE_NAME + \" in cluster \" + cluster.getName() +\n                    \" not found but mapping information exists.\");\n        } catch (ServiceConfigurationNotFoundException e) {\n            // there's Druid service configuration but not having enough information\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        return hintMap;\n    }", "signature": "Map<String, Object> getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject)", "full_signature": "@Override public Map<String, Object> getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject)", "class_method_signature": "DruidSinkBundleHintProvider.getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject)", "testcase": false, "constructor": false, "invocations": ["getServiceByName", "getId", "getServiceConfigurationByName", "getId", "getConfigurationMap", "putToHintMapIfAvailable", "putToHintMapIfAvailable", "putToHintMapIfAvailable", "containsKey", "getServiceConfigurationByName", "getId", "putToHintMapIfAvailable", "getConfigurationMap", "getName"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}