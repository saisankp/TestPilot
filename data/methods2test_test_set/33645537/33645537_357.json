{"test_class": {"identifier": "SumListsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SumLists sumLists;", "modifier": "private", "type": "SumLists", "declarator": "sumLists", "var_name": "sumLists"}], "file": "algs/src/test/java/com/github/pedrovgs/problem61/SumListsTest.java"}, "test_case": {"identifier": "shouldSumNumbersWithJustOneDigit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldSumNumbersWithJustOneDigit() {\n    ListNode<Integer> n1 = createList(new int[] { 3 });\n    ListNode<Integer> n2 = createList(new int[] { 8 });\n\n    int result = sumLists.sum(n1, n2);\n\n    assertEquals(11, result);\n  }", "signature": "void shouldSumNumbersWithJustOneDigit()", "full_signature": "@Test public void shouldSumNumbersWithJustOneDigit()", "class_method_signature": "SumListsTest.shouldSumNumbersWithJustOneDigit()", "testcase": true, "constructor": false, "invocations": ["createList", "createList", "sum", "assertEquals"]}, "focal_class": {"identifier": "SumLists", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "sumReverse", "parameters": "(ListNode<Integer> n1, ListNode<Integer> n2)", "modifiers": "public", "return": "int", "signature": "int sumReverse(ListNode<Integer> n1, ListNode<Integer> n2)", "full_signature": "public int sumReverse(ListNode<Integer> n1, ListNode<Integer> n2)", "class_method_signature": "SumLists.sumReverse(ListNode<Integer> n1, ListNode<Integer> n2)", "testcase": false, "constructor": false}, {"identifier": "calculateReverseNumber", "parameters": "(ListNode<Integer> list)", "modifiers": "private", "return": "int", "signature": "int calculateReverseNumber(ListNode<Integer> list)", "full_signature": "private int calculateReverseNumber(ListNode<Integer> list)", "class_method_signature": "SumLists.calculateReverseNumber(ListNode<Integer> list)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(ListNode<Integer> n1, ListNode<Integer> n2)", "modifiers": "public", "return": "int", "signature": "int sum(ListNode<Integer> n1, ListNode<Integer> n2)", "full_signature": "public int sum(ListNode<Integer> n1, ListNode<Integer> n2)", "class_method_signature": "SumLists.sum(ListNode<Integer> n1, ListNode<Integer> n2)", "testcase": false, "constructor": false}, {"identifier": "calculateNumber", "parameters": "(ListNode<Integer> list)", "modifiers": "private", "return": "int", "signature": "int calculateNumber(ListNode<Integer> list)", "full_signature": "private int calculateNumber(ListNode<Integer> list)", "class_method_signature": "SumLists.calculateNumber(ListNode<Integer> list)", "testcase": false, "constructor": false}, {"identifier": "getListSize", "parameters": "(ListNode<Integer> list)", "modifiers": "private", "return": "int", "signature": "int getListSize(ListNode<Integer> list)", "full_signature": "private int getListSize(ListNode<Integer> list)", "class_method_signature": "SumLists.getListSize(ListNode<Integer> list)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(ListNode<Integer> n1, ListNode<Integer> n2)", "modifiers": "private", "return": "void", "signature": "void validateInput(ListNode<Integer> n1, ListNode<Integer> n2)", "full_signature": "private void validateInput(ListNode<Integer> n1, ListNode<Integer> n2)", "class_method_signature": "SumLists.validateInput(ListNode<Integer> n1, ListNode<Integer> n2)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem61/SumLists.java"}, "focal_method": {"identifier": "sum", "parameters": "(ListNode<Integer> n1, ListNode<Integer> n2)", "modifiers": "public", "return": "int", "body": "public int sum(ListNode<Integer> n1, ListNode<Integer> n2) {\n    validateInput(n1, n2);\n\n    int n1Value = calculateNumber(n1);\n    int n2Value = calculateNumber(n2);\n    return n1Value + n2Value;\n  }", "signature": "int sum(ListNode<Integer> n1, ListNode<Integer> n2)", "full_signature": "public int sum(ListNode<Integer> n1, ListNode<Integer> n2)", "class_method_signature": "SumLists.sum(ListNode<Integer> n1, ListNode<Integer> n2)", "testcase": false, "constructor": false, "invocations": ["validateInput", "calculateNumber", "calculateNumber"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}