{"test_class": {"identifier": "ShapeHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/core-map/src/test/java/org/orbisgis/coremap/renderer/se/common/ShapeHelperTest.java"}, "test_case": {"identifier": "testGetPointAt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\t public void testGetPointAt() {\n         Path2D.Double path = new Path2D.Double();\n         path.moveTo(10, 10);\n\n         path.lineTo(20, 10);\n         path.lineTo(20, 20);\n\n\n         Double pointAt = ShapeHelper.getPointAt(path, 30);\n\n         System.out.println (\"PT: \" + pointAt.getX() + \";\" + pointAt.getY());\n         assertEquals(pointAt.getX(), 20.0, 0.00001);\n         assertEquals(pointAt.getY(), 30.0, 0.00001);\n\n\n         path = new Path2D.Double();\n\n\n\n\n     }", "signature": "void testGetPointAt()", "full_signature": "@Test public void testGetPointAt()", "class_method_signature": "ShapeHelperTest.testGetPointAt()", "testcase": true, "constructor": false, "invocations": ["moveTo", "lineTo", "lineTo", "getPointAt", "println", "getX", "getY", "assertEquals", "getX", "assertEquals", "getY"]}, "focal_class": {"identifier": "ShapeHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final double ONE_DEG_IN_RAD = Math.PI / 180.0;", "modifier": "public static final", "type": "double", "declarator": "ONE_DEG_IN_RAD = Math.PI / 180.0", "var_name": "ONE_DEG_IN_RAD"}, {"original_string": "private static final boolean ENABLE_QUAD = true;", "modifier": "private static final", "type": "boolean", "declarator": "ENABLE_QUAD = true", "var_name": "ENABLE_QUAD"}, {"original_string": "private static final double FLATNESS = 1e-5;", "modifier": "private static final", "type": "double", "declarator": "FLATNESS = 1e-5", "var_name": "FLATNESS"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ShapeHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ShapeHelper.class)", "var_name": "LOGGER"}, {"original_string": "private static final I18n I18N = I18nFactory.getI18n(ShapeHelper.class);", "modifier": "private static final", "type": "I18n", "declarator": "I18N = I18nFactory.getI18n(ShapeHelper.class)", "var_name": "I18N"}], "methods": [{"identifier": "ShapeHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " ShapeHelper()", "full_signature": "private  ShapeHelper()", "class_method_signature": "ShapeHelper.ShapeHelper()", "testcase": false, "constructor": true}, {"identifier": "getAreaPerimeterLength", "parameters": "(Shape area)", "modifiers": "public static", "return": "double", "signature": "double getAreaPerimeterLength(Shape area)", "full_signature": "public static double getAreaPerimeterLength(Shape area)", "class_method_signature": "ShapeHelper.getAreaPerimeterLength(Shape area)", "testcase": false, "constructor": false}, {"identifier": "getLineLength", "parameters": "(Shape line)", "modifiers": "public static", "return": "double", "signature": "double getLineLength(Shape line)", "full_signature": "public static double getLineLength(Shape line)", "class_method_signature": "ShapeHelper.getLineLength(Shape line)", "testcase": false, "constructor": false}, {"identifier": "printvertices", "parameters": "(Shape shp)", "modifiers": "public static", "return": "void", "signature": "void printvertices(Shape shp)", "full_signature": "public static void printvertices(Shape shp)", "class_method_signature": "ShapeHelper.printvertices(Shape shp)", "testcase": false, "constructor": false}, {"identifier": "splitLine", "parameters": "(Shape line, double firstLineLength)", "modifiers": "public static", "return": "List<Shape>", "signature": "List<Shape> splitLine(Shape line, double firstLineLength)", "full_signature": "public static List<Shape> splitLine(Shape line, double firstLineLength)", "class_method_signature": "ShapeHelper.splitLine(Shape line, double firstLineLength)", "testcase": false, "constructor": false}, {"identifier": "splitLineInSeg", "parameters": "(Shape line, double segLength)", "modifiers": "public static", "return": "List<Shape>", "signature": "List<Shape> splitLineInSeg(Shape line, double segLength)", "full_signature": "public static List<Shape> splitLineInSeg(Shape line, double segLength)", "class_method_signature": "ShapeHelper.splitLineInSeg(Shape line, double segLength)", "testcase": false, "constructor": false}, {"identifier": "splitLine", "parameters": "(Shape line, int nbPart)", "modifiers": "public static", "return": "List<Shape>", "signature": "List<Shape> splitLine(Shape line, int nbPart)", "full_signature": "public static List<Shape> splitLine(Shape line, int nbPart)", "class_method_signature": "ShapeHelper.splitLine(Shape line, int nbPart)", "testcase": false, "constructor": false}, {"identifier": "getPointAt", "parameters": "(double x1, double y1, double x2, double y2, double distance)", "modifiers": "private static", "return": "Point2D.Double", "signature": "Point2D.Double getPointAt(double x1, double y1, double x2, double y2, double distance)", "full_signature": "private static Point2D.Double getPointAt(double x1, double y1, double x2, double y2, double distance)", "class_method_signature": "ShapeHelper.getPointAt(double x1, double y1, double x2, double y2, double distance)", "testcase": false, "constructor": false}, {"identifier": "getPointAt", "parameters": "(Shape shp, double distance)", "modifiers": "public static", "return": "Point2D.Double", "signature": "Point2D.Double getPointAt(Shape shp, double distance)", "full_signature": "public static Point2D.Double getPointAt(Shape shp, double distance)", "class_method_signature": "ShapeHelper.getPointAt(Shape shp, double distance)", "testcase": false, "constructor": false}, {"identifier": "getVertexes", "parameters": "(Shape shp)", "modifiers": "private static", "return": "List<ArrayList<Vertex>>", "signature": "List<ArrayList<Vertex>> getVertexes(Shape shp)", "full_signature": "private static List<ArrayList<Vertex>> getVertexes(Shape shp)", "class_method_signature": "ShapeHelper.getVertexes(Shape shp)", "testcase": false, "constructor": false}, {"identifier": "removeUselessVertex", "parameters": "(List<Vertex> vertexes)", "modifiers": "private static", "return": "void", "signature": "void removeUselessVertex(List<Vertex> vertexes)", "full_signature": "private static void removeUselessVertex(List<Vertex> vertexes)", "class_method_signature": "ShapeHelper.removeUselessVertex(List<Vertex> vertexes)", "testcase": false, "constructor": false}, {"identifier": "createOffsetVertexes", "parameters": "(List<Vertex> vertexes, double offset, boolean closed)", "modifiers": "private static", "return": "List<Vertex>", "signature": "List<Vertex> createOffsetVertexes(List<Vertex> vertexes, double offset, boolean closed)", "full_signature": "private static List<Vertex> createOffsetVertexes(List<Vertex> vertexes, double offset, boolean closed)", "class_method_signature": "ShapeHelper.createOffsetVertexes(List<Vertex> vertexes, double offset, boolean closed)", "testcase": false, "constructor": false}, {"identifier": "getDistanceFromSegment", "parameters": "(double x1, double y1, double x2, double y2, double x3, double y3)", "modifiers": "private static", "return": "double", "signature": "double getDistanceFromSegment(double x1, double y1, double x2, double y2, double x3, double y3)", "full_signature": "private static double getDistanceFromSegment(double x1, double y1, double x2, double y2, double x3, double y3)", "class_method_signature": "ShapeHelper.getDistanceFromSegment(double x1, double y1, double x2, double y2, double x3, double y3)", "testcase": false, "constructor": false}, {"identifier": "computeEdges", "parameters": "(List<Vertex> vertexes, List<Vertex> offsetVertexes, double offset, boolean closed)", "modifiers": "private static", "return": "List<Edge>", "signature": "List<Edge> computeEdges(List<Vertex> vertexes, List<Vertex> offsetVertexes, double offset, boolean closed)", "full_signature": "private static List<Edge> computeEdges(List<Vertex> vertexes, List<Vertex> offsetVertexes, double offset, boolean closed)", "class_method_signature": "ShapeHelper.computeEdges(List<Vertex> vertexes, List<Vertex> offsetVertexes, double offset, boolean closed)", "testcase": false, "constructor": false}, {"identifier": "createShapeFromVertexes", "parameters": "(List<Vertex> vertexes, boolean closed)", "modifiers": "private static", "return": "Shape", "signature": "Shape createShapeFromVertexes(List<Vertex> vertexes, boolean closed)", "full_signature": "private static Shape createShapeFromVertexes(List<Vertex> vertexes, boolean closed)", "class_method_signature": "ShapeHelper.createShapeFromVertexes(List<Vertex> vertexes, boolean closed)", "testcase": false, "constructor": false}, {"identifier": "computeRawLink", "parameters": "(List<Edge> edges, List<Vertex> vertexes, boolean closed)", "modifiers": "private static", "return": "List<Vertex>", "signature": "List<Vertex> computeRawLink(List<Edge> edges, List<Vertex> vertexes, boolean closed)", "full_signature": "private static List<Vertex> computeRawLink(List<Edge> edges, List<Vertex> vertexes, boolean closed)", "class_method_signature": "ShapeHelper.computeRawLink(List<Edge> edges, List<Vertex> vertexes, boolean closed)", "testcase": false, "constructor": false}, {"identifier": "isPointOnSegement", "parameters": "(double x1, double y1, double x2, double y2, double x3, double y3)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPointOnSegement(double x1, double y1, double x2, double y2, double x3, double y3)", "full_signature": "private static boolean isPointOnSegement(double x1, double y1, double x2, double y2, double x3, double y3)", "class_method_signature": "ShapeHelper.isPointOnSegement(double x1, double y1, double x2, double y2, double x3, double y3)", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "(List<Vertex> vertexes)", "modifiers": "private static", "return": "boolean", "signature": "boolean isClosed(List<Vertex> vertexes)", "full_signature": "private static boolean isClosed(List<Vertex> vertexes)", "class_method_signature": "ShapeHelper.isClosed(List<Vertex> vertexes)", "testcase": false, "constructor": false}, {"identifier": "contourParallelShape", "parameters": "(Shape shp, double offset)", "modifiers": "private static", "return": "List<Shape>", "signature": "List<Shape> contourParallelShape(Shape shp, double offset)", "full_signature": "private static List<Shape> contourParallelShape(Shape shp, double offset)", "class_method_signature": "ShapeHelper.contourParallelShape(Shape shp, double offset)", "testcase": false, "constructor": false}, {"identifier": "crossProduct", "parameters": "(double x1, double y1, double x2, double y2, double x3, double y3)", "modifiers": "static", "return": "double", "signature": "double crossProduct(double x1, double y1, double x2, double y2, double x3, double y3)", "full_signature": "static double crossProduct(double x1, double y1, double x2, double y2, double x3, double y3)", "class_method_signature": "ShapeHelper.crossProduct(double x1, double y1, double x2, double y2, double x3, double y3)", "testcase": false, "constructor": false}, {"identifier": "isSegIntersect", "parameters": "(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSegIntersect(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)", "full_signature": "private static boolean isSegIntersect(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)", "class_method_signature": "ShapeHelper.isSegIntersect(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)", "testcase": false, "constructor": false}, {"identifier": "computeSegmentIntersection", "parameters": "(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)", "modifiers": "private static", "return": "Point2D.Double", "signature": "Point2D.Double computeSegmentIntersection(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)", "full_signature": "private static Point2D.Double computeSegmentIntersection(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)", "class_method_signature": "ShapeHelper.computeSegmentIntersection(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)", "testcase": false, "constructor": false}, {"identifier": "getLineIntersection", "parameters": "(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)", "modifiers": "private static", "return": "Point2D.Double", "signature": "Point2D.Double getLineIntersection(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)", "full_signature": "private static Point2D.Double getLineIntersection(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)", "class_method_signature": "ShapeHelper.getLineIntersection(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)", "testcase": false, "constructor": false}, {"identifier": "perpendicularOffset", "parameters": "(Shape shp, double offset)", "modifiers": "public static", "return": "List<Shape>", "signature": "List<Shape> perpendicularOffset(Shape shp, double offset)", "full_signature": "public static List<Shape> perpendicularOffset(Shape shp, double offset)", "class_method_signature": "ShapeHelper.perpendicularOffset(Shape shp, double offset)", "testcase": false, "constructor": false}, {"identifier": "intersection", "parameters": "(Line2D.Double line, Rectangle2D.Double bounds)", "modifiers": "public static", "return": "Line2D.Double", "signature": "Line2D.Double intersection(Line2D.Double line, Rectangle2D.Double bounds)", "full_signature": "public static Line2D.Double intersection(Line2D.Double line, Rectangle2D.Double bounds)", "class_method_signature": "ShapeHelper.intersection(Line2D.Double line, Rectangle2D.Double bounds)", "testcase": false, "constructor": false}, {"identifier": "clipToExtent", "parameters": "(Geometry theGeom, Envelope extent)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry clipToExtent(Geometry theGeom, Envelope extent)", "full_signature": "public static Geometry clipToExtent(Geometry theGeom, Envelope extent)", "class_method_signature": "ShapeHelper.clipToExtent(Geometry theGeom, Envelope extent)", "testcase": false, "constructor": false}], "file": "bundles/core-map/src/main/java/org/orbisgis/coremap/renderer/se/common/ShapeHelper.java"}, "focal_method": {"identifier": "getPointAt", "parameters": "(double x1, double y1, double x2, double y2, double distance)", "modifiers": "private static", "return": "Point2D.Double", "body": "private static Point2D.Double getPointAt(double x1, double y1, double x2, double y2, double distance) {\n        double length = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        return new Point2D.Double(x1 + distance * (x2 - x1) / length, y1 + distance * (y2 - y1) / length);\n    }", "signature": "Point2D.Double getPointAt(double x1, double y1, double x2, double y2, double distance)", "full_signature": "private static Point2D.Double getPointAt(double x1, double y1, double x2, double y2, double distance)", "class_method_signature": "ShapeHelper.getPointAt(double x1, double y1, double x2, double y2, double distance)", "testcase": false, "constructor": false, "invocations": ["sqrt"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}