{"test_class": {"identifier": "WebClientFactoryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WebClientFactoryImpl webClientFactory;", "modifier": "private", "type": "WebClientFactoryImpl", "declarator": "webClientFactory", "var_name": "webClientFactory"}, {"original_string": "private static final String TEST_URL = \"https://www.eclipse.org/\";", "modifier": "private static final", "type": "String", "declarator": "TEST_URL = \"https://www.eclipse.org/\"", "var_name": "TEST_URL"}, {"original_string": "private @Mock ExtensibleTrustManagerImpl extensibleTrustManager;", "modifier": "private @Mock", "type": "ExtensibleTrustManagerImpl", "declarator": "extensibleTrustManager", "var_name": "extensibleTrustManager"}], "file": "bundles/org.openhab.core.io.net/src/test/java/org/openhab/core/io/net/http/internal/WebClientFactoryImplTest.java"}, "test_case": {"identifier": "testMultiThreadedCustom", "parameters": "()", "modifiers": "@Disabled(\"only for manual test\") @Test public", "return": "void", "body": "@Disabled(\"only for manual test\")\n    @Test\n    public void testMultiThreadedCustom() throws Exception {\n        ThreadPoolExecutor workers = new ThreadPoolExecutor(20, 80, 60, TimeUnit.SECONDS,\n                new ArrayBlockingQueue<>(50 * 50));\n\n        final List<HttpClient> clients = new ArrayList<>();\n\n        final int maxClients = 2;\n        final int maxRequests = 2;\n\n        for (int i = 0; i < maxClients; i++) {\n            HttpClient httpClient = webClientFactory.createHttpClient(\"consumer\" + i);\n            clients.add(httpClient);\n        }\n\n        final List<String> failures = new ArrayList<>();\n\n        for (int i = 0; i < maxRequests; i++) {\n            for (final HttpClient client : clients) {\n                workers.execute(new Runnable() {\n                    @Override\n                    public void run() {\n                        try {\n                            ContentResponse response = client.GET(TEST_URL);\n                            if (response.getStatus() != 200) {\n                                failures.add(\"Statuscode != 200\");\n                            }\n                        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n                            failures.add(\"Unexpected exception:\" + e.getMessage());\n                        }\n                    }\n                });\n            }\n        }\n\n        workers.shutdown();\n        workers.awaitTermination(120, TimeUnit.SECONDS);\n        if (!failures.isEmpty()) {\n            fail(failures.toString());\n        }\n\n        for (HttpClient client : clients) {\n            client.stop();\n        }\n    }", "signature": "void testMultiThreadedCustom()", "full_signature": "@Disabled(\"only for manual test\") @Test public void testMultiThreadedCustom()", "class_method_signature": "WebClientFactoryImplTest.testMultiThreadedCustom()", "testcase": true, "constructor": false, "invocations": ["createHttpClient", "add", "execute", "GET", "getStatus", "add", "add", "getMessage", "shutdown", "awaitTermination", "isEmpty", "fail", "toString", "stop"]}, "focal_class": {"identifier": "WebClientFactoryImpl", "superclass": "", "interfaces": "implements HttpClientFactory, WebSocketFactory", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(WebClientFactoryImpl.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(WebClientFactoryImpl.class)", "var_name": "logger"}, {"original_string": "private static final String CONFIG_MIN_THREADS_SHARED = \"minThreadsShared\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_MIN_THREADS_SHARED = \"minThreadsShared\"", "var_name": "CONFIG_MIN_THREADS_SHARED"}, {"original_string": "private static final String CONFIG_MAX_THREADS_SHARED = \"maxThreadsShared\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_MAX_THREADS_SHARED = \"maxThreadsShared\"", "var_name": "CONFIG_MAX_THREADS_SHARED"}, {"original_string": "private static final String CONFIG_KEEP_ALIVE_SHARED = \"keepAliveTimeoutShared\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_KEEP_ALIVE_SHARED = \"keepAliveTimeoutShared\"", "var_name": "CONFIG_KEEP_ALIVE_SHARED"}, {"original_string": "private static final String CONFIG_MIN_THREADS_CUSTOM = \"minThreadsCustom\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_MIN_THREADS_CUSTOM = \"minThreadsCustom\"", "var_name": "CONFIG_MIN_THREADS_CUSTOM"}, {"original_string": "private static final String CONFIG_MAX_THREADS_CUSTOM = \"maxThreadsCustom\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_MAX_THREADS_CUSTOM = \"maxThreadsCustom\"", "var_name": "CONFIG_MAX_THREADS_CUSTOM"}, {"original_string": "private static final String CONFIG_KEEP_ALIVE_CUSTOM = \"keepAliveTimeoutCustom\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_KEEP_ALIVE_CUSTOM = \"keepAliveTimeoutCustom\"", "var_name": "CONFIG_KEEP_ALIVE_CUSTOM"}, {"original_string": "private static final int MIN_CONSUMER_NAME_LENGTH = 4;", "modifier": "private static final", "type": "int", "declarator": "MIN_CONSUMER_NAME_LENGTH = 4", "var_name": "MIN_CONSUMER_NAME_LENGTH"}, {"original_string": "private static final int MAX_CONSUMER_NAME_LENGTH = 20;", "modifier": "private static final", "type": "int", "declarator": "MAX_CONSUMER_NAME_LENGTH = 20", "var_name": "MAX_CONSUMER_NAME_LENGTH"}, {"original_string": "private static final Pattern CONSUMER_NAME_PATTERN = Pattern.compile(\"[a-zA-Z0-9_\\\\-]*\");", "modifier": "private static final", "type": "Pattern", "declarator": "CONSUMER_NAME_PATTERN = Pattern.compile(\"[a-zA-Z0-9_\\\\-]*\")", "var_name": "CONSUMER_NAME_PATTERN"}, {"original_string": "private final ExtensibleTrustManager extensibleTrustManager;", "modifier": "private final", "type": "ExtensibleTrustManager", "declarator": "extensibleTrustManager", "var_name": "extensibleTrustManager"}, {"original_string": "private @NonNullByDefault({}) QueuedThreadPool threadPool;", "modifier": "private @NonNullByDefault({})", "type": "QueuedThreadPool", "declarator": "threadPool", "var_name": "threadPool"}, {"original_string": "private @NonNullByDefault({}) HttpClient commonHttpClient;", "modifier": "private @NonNullByDefault({})", "type": "HttpClient", "declarator": "commonHttpClient", "var_name": "commonHttpClient"}, {"original_string": "private @NonNullByDefault({}) WebSocketClient commonWebSocketClient;", "modifier": "private @NonNullByDefault({})", "type": "WebSocketClient", "declarator": "commonWebSocketClient", "var_name": "commonWebSocketClient"}, {"original_string": "private int minThreadsShared;", "modifier": "private", "type": "int", "declarator": "minThreadsShared", "var_name": "minThreadsShared"}, {"original_string": "private int maxThreadsShared;", "modifier": "private", "type": "int", "declarator": "maxThreadsShared", "var_name": "maxThreadsShared"}, {"original_string": "private int keepAliveTimeoutShared;", "modifier": "private", "type": "int", "declarator": "keepAliveTimeoutShared", "var_name": "keepAliveTimeoutShared"}, {"original_string": "private int minThreadsCustom;", "modifier": "private", "type": "int", "declarator": "minThreadsCustom", "var_name": "minThreadsCustom"}, {"original_string": "private int maxThreadsCustom;", "modifier": "private", "type": "int", "declarator": "maxThreadsCustom", "var_name": "maxThreadsCustom"}, {"original_string": "private int keepAliveTimeoutCustom;", "modifier": "private", "type": "int", "declarator": "keepAliveTimeoutCustom", "var_name": "keepAliveTimeoutCustom"}], "methods": [{"identifier": "WebClientFactoryImpl", "parameters": "(final @Reference ExtensibleTrustManager extensibleTrustManager)", "modifiers": "@Activate public", "return": "", "signature": " WebClientFactoryImpl(final @Reference ExtensibleTrustManager extensibleTrustManager)", "full_signature": "@Activate public  WebClientFactoryImpl(final @Reference ExtensibleTrustManager extensibleTrustManager)", "class_method_signature": "WebClientFactoryImpl.WebClientFactoryImpl(final @Reference ExtensibleTrustManager extensibleTrustManager)", "testcase": false, "constructor": true}, {"identifier": "activate", "parameters": "(Map<String, Object> parameters)", "modifiers": "@Activate protected", "return": "void", "signature": "void activate(Map<String, Object> parameters)", "full_signature": "@Activate protected void activate(Map<String, Object> parameters)", "class_method_signature": "WebClientFactoryImpl.activate(Map<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "modified", "parameters": "(Map<String, Object> parameters)", "modifiers": "@Modified protected", "return": "void", "signature": "void modified(Map<String, Object> parameters)", "full_signature": "@Modified protected void modified(Map<String, Object> parameters)", "class_method_signature": "WebClientFactoryImpl.modified(Map<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "deactivate", "parameters": "()", "modifiers": "@Deactivate protected", "return": "void", "signature": "void deactivate()", "full_signature": "@Deactivate protected void deactivate()", "class_method_signature": "WebClientFactoryImpl.deactivate()", "testcase": false, "constructor": false}, {"identifier": "createHttpClient", "parameters": "(String consumerName)", "modifiers": "@Override public", "return": "HttpClient", "signature": "HttpClient createHttpClient(String consumerName)", "full_signature": "@Override public HttpClient createHttpClient(String consumerName)", "class_method_signature": "WebClientFactoryImpl.createHttpClient(String consumerName)", "testcase": false, "constructor": false}, {"identifier": "createWebSocketClient", "parameters": "(String consumerName)", "modifiers": "@Override public", "return": "WebSocketClient", "signature": "WebSocketClient createWebSocketClient(String consumerName)", "full_signature": "@Override public WebSocketClient createWebSocketClient(String consumerName)", "class_method_signature": "WebClientFactoryImpl.createWebSocketClient(String consumerName)", "testcase": false, "constructor": false}, {"identifier": "getCommonHttpClient", "parameters": "()", "modifiers": "@Override public", "return": "HttpClient", "signature": "HttpClient getCommonHttpClient()", "full_signature": "@Override public HttpClient getCommonHttpClient()", "class_method_signature": "WebClientFactoryImpl.getCommonHttpClient()", "testcase": false, "constructor": false}, {"identifier": "getCommonWebSocketClient", "parameters": "()", "modifiers": "@Override public", "return": "WebSocketClient", "signature": "WebSocketClient getCommonWebSocketClient()", "full_signature": "@Override public WebSocketClient getCommonWebSocketClient()", "class_method_signature": "WebClientFactoryImpl.getCommonWebSocketClient()", "testcase": false, "constructor": false}, {"identifier": "getConfigParameters", "parameters": "(Map<String, Object> parameters)", "modifiers": "private", "return": "void", "signature": "void getConfigParameters(Map<String, Object> parameters)", "full_signature": "private void getConfigParameters(Map<String, Object> parameters)", "class_method_signature": "WebClientFactoryImpl.getConfigParameters(Map<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "getConfigParameter", "parameters": "(Map<String, Object> parameters, String parameter, int defaultValue)", "modifiers": "@SuppressWarnings({ \"null\", \"unused\" }) private", "return": "int", "signature": "int getConfigParameter(Map<String, Object> parameters, String parameter, int defaultValue)", "full_signature": "@SuppressWarnings({ \"null\", \"unused\" }) private int getConfigParameter(Map<String, Object> parameters, String parameter, int defaultValue)", "class_method_signature": "WebClientFactoryImpl.getConfigParameter(Map<String, Object> parameters, String parameter, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void initialize()", "full_signature": "private synchronized void initialize()", "class_method_signature": "WebClientFactoryImpl.initialize()", "testcase": false, "constructor": false}, {"identifier": "createHttpClientInternal", "parameters": "(String consumerName, boolean startClient,\n            @Nullable QueuedThreadPool threadPool)", "modifiers": "private", "return": "HttpClient", "signature": "HttpClient createHttpClientInternal(String consumerName, boolean startClient,\n            @Nullable QueuedThreadPool threadPool)", "full_signature": "private HttpClient createHttpClientInternal(String consumerName, boolean startClient,\n            @Nullable QueuedThreadPool threadPool)", "class_method_signature": "WebClientFactoryImpl.createHttpClientInternal(String consumerName, boolean startClient,\n            @Nullable QueuedThreadPool threadPool)", "testcase": false, "constructor": false}, {"identifier": "createWebSocketClientInternal", "parameters": "(String consumerName, boolean startClient,\n            @Nullable QueuedThreadPool threadPool)", "modifiers": "private", "return": "WebSocketClient", "signature": "WebSocketClient createWebSocketClientInternal(String consumerName, boolean startClient,\n            @Nullable QueuedThreadPool threadPool)", "full_signature": "private WebSocketClient createWebSocketClientInternal(String consumerName, boolean startClient,\n            @Nullable QueuedThreadPool threadPool)", "class_method_signature": "WebClientFactoryImpl.createWebSocketClientInternal(String consumerName, boolean startClient,\n            @Nullable QueuedThreadPool threadPool)", "testcase": false, "constructor": false}, {"identifier": "createThreadPool", "parameters": "(String consumerName, int minThreads, int maxThreads,\n            int keepAliveTimeout)", "modifiers": "private", "return": "QueuedThreadPool", "signature": "QueuedThreadPool createThreadPool(String consumerName, int minThreads, int maxThreads,\n            int keepAliveTimeout)", "full_signature": "private QueuedThreadPool createThreadPool(String consumerName, int minThreads, int maxThreads,\n            int keepAliveTimeout)", "class_method_signature": "WebClientFactoryImpl.createThreadPool(String consumerName, int minThreads, int maxThreads,\n            int keepAliveTimeout)", "testcase": false, "constructor": false}, {"identifier": "checkConsumerName", "parameters": "(String consumerName)", "modifiers": "private", "return": "void", "signature": "void checkConsumerName(String consumerName)", "full_signature": "private void checkConsumerName(String consumerName)", "class_method_signature": "WebClientFactoryImpl.checkConsumerName(String consumerName)", "testcase": false, "constructor": false}, {"identifier": "createSslContextFactory", "parameters": "()", "modifiers": "private", "return": "SslContextFactory", "signature": "SslContextFactory createSslContextFactory()", "full_signature": "private SslContextFactory createSslContextFactory()", "class_method_signature": "WebClientFactoryImpl.createSslContextFactory()", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/http/internal/WebClientFactoryImpl.java"}, "focal_method": {"identifier": "createHttpClient", "parameters": "(String consumerName)", "modifiers": "@Override public", "return": "HttpClient", "body": "@Override\n    public HttpClient createHttpClient(String consumerName) {\n        logger.debug(\"http client for consumer {} requested\", consumerName);\n        checkConsumerName(consumerName);\n        return createHttpClientInternal(consumerName, false, null);\n    }", "signature": "HttpClient createHttpClient(String consumerName)", "full_signature": "@Override public HttpClient createHttpClient(String consumerName)", "class_method_signature": "WebClientFactoryImpl.createHttpClient(String consumerName)", "testcase": false, "constructor": false, "invocations": ["debug", "checkConsumerName", "createHttpClientInternal"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}