{"test_class": {"identifier": "InstrumentedSqlLoggerTest", "superclass": "", "interfaces": "", "fields": [], "file": "metrics-jdbi3/src/test/java/com/codahale/metrics/jdbi3/InstrumentedSqlLoggerTest.java"}, "test_case": {"identifier": "logsExecutionTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void logsExecutionTime() {\n        final MetricRegistry mockRegistry = mock(MetricRegistry.class);\n        final StatementNameStrategy mockNameStrategy = mock(StatementNameStrategy.class);\n        final InstrumentedSqlLogger logger = new InstrumentedSqlLogger(mockRegistry, mockNameStrategy);\n\n        final StatementContext mockContext = mock(StatementContext.class);\n        final Timer mockTimer = mock(Timer.class);\n\n        final String statementName = \"my-fake-name\";\n        final long fakeElapsed = 1234L;\n\n        when(mockNameStrategy.getStatementName(mockContext)).thenReturn(statementName);\n        when(mockRegistry.timer(statementName)).thenReturn(mockTimer);\n\n        when(mockContext.getElapsedTime(ChronoUnit.NANOS)).thenReturn(fakeElapsed);\n\n        logger.logAfterExecution(mockContext);\n\n        verify(mockTimer).update(fakeElapsed, TimeUnit.NANOSECONDS);\n    }", "signature": "void logsExecutionTime()", "full_signature": "@Test public void logsExecutionTime()", "class_method_signature": "InstrumentedSqlLoggerTest.logsExecutionTime()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "thenReturn", "when", "getStatementName", "thenReturn", "when", "timer", "thenReturn", "when", "getElapsedTime", "logAfterExecution", "update", "verify"]}, "focal_class": {"identifier": "InstrumentedSqlLogger", "superclass": "", "interfaces": "implements SqlLogger", "fields": [{"original_string": "private final MetricRegistry registry;", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private final StatementNameStrategy statementNameStrategy;", "modifier": "private final", "type": "StatementNameStrategy", "declarator": "statementNameStrategy", "var_name": "statementNameStrategy"}], "methods": [{"identifier": "InstrumentedSqlLogger", "parameters": "(MetricRegistry registry)", "modifiers": "public", "return": "", "signature": " InstrumentedSqlLogger(MetricRegistry registry)", "full_signature": "public  InstrumentedSqlLogger(MetricRegistry registry)", "class_method_signature": "InstrumentedSqlLogger.InstrumentedSqlLogger(MetricRegistry registry)", "testcase": false, "constructor": true}, {"identifier": "InstrumentedSqlLogger", "parameters": "(MetricRegistry registry,\n                                 StatementNameStrategy statementNameStrategy)", "modifiers": "public", "return": "", "signature": " InstrumentedSqlLogger(MetricRegistry registry,\n                                 StatementNameStrategy statementNameStrategy)", "full_signature": "public  InstrumentedSqlLogger(MetricRegistry registry,\n                                 StatementNameStrategy statementNameStrategy)", "class_method_signature": "InstrumentedSqlLogger.InstrumentedSqlLogger(MetricRegistry registry,\n                                 StatementNameStrategy statementNameStrategy)", "testcase": false, "constructor": true}, {"identifier": "logAfterExecution", "parameters": "(StatementContext context)", "modifiers": "@Override public", "return": "void", "signature": "void logAfterExecution(StatementContext context)", "full_signature": "@Override public void logAfterExecution(StatementContext context)", "class_method_signature": "InstrumentedSqlLogger.logAfterExecution(StatementContext context)", "testcase": false, "constructor": false}, {"identifier": "logException", "parameters": "(StatementContext context, SQLException ex)", "modifiers": "@Override public", "return": "void", "signature": "void logException(StatementContext context, SQLException ex)", "full_signature": "@Override public void logException(StatementContext context, SQLException ex)", "class_method_signature": "InstrumentedSqlLogger.logException(StatementContext context, SQLException ex)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(StatementContext context)", "modifiers": "private", "return": "void", "signature": "void log(StatementContext context)", "full_signature": "private void log(StatementContext context)", "class_method_signature": "InstrumentedSqlLogger.log(StatementContext context)", "testcase": false, "constructor": false}], "file": "metrics-jdbi3/src/main/java/com/codahale/metrics/jdbi3/InstrumentedSqlLogger.java"}, "focal_method": {"identifier": "logAfterExecution", "parameters": "(StatementContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void logAfterExecution(StatementContext context) {\n        log(context);\n    }", "signature": "void logAfterExecution(StatementContext context)", "full_signature": "@Override public void logAfterExecution(StatementContext context)", "class_method_signature": "InstrumentedSqlLogger.logAfterExecution(StatementContext context)", "testcase": false, "constructor": false, "invocations": ["log"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}