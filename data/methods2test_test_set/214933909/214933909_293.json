{"test_class": {"identifier": "ServerConfigControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@MockBean\n    private UserLoginInterceptor userLoginInterceptor;", "modifier": "@MockBean\n    private", "type": "UserLoginInterceptor", "declarator": "userLoginInterceptor", "var_name": "userLoginInterceptor"}, {"original_string": "@MockBean\n    private CommStatusInterceptor commStatusInterceptor;", "modifier": "@MockBean\n    private", "type": "CommStatusInterceptor", "declarator": "commStatusInterceptor", "var_name": "commStatusInterceptor"}, {"original_string": "@MockBean\n    private PermissionService permissionService;", "modifier": "@MockBean\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "@MockBean\n    private Message message;", "modifier": "@MockBean\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@MockBean\n    private ServerConfigService serverConfigService;", "modifier": "@MockBean\n    private", "type": "ServerConfigService", "declarator": "serverConfigService", "var_name": "serverConfigService"}, {"original_string": "@MockBean\n    private ServerConfigDao serverConfigDao;", "modifier": "@MockBean\n    private", "type": "ServerConfigDao", "declarator": "serverConfigDao", "var_name": "serverConfigDao"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private String requestJson;", "modifier": "private", "type": "String", "declarator": "requestJson", "var_name": "requestJson"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/controller/ServerConfigControllerTest.java"}, "test_case": {"identifier": "delete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void delete() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.delete(\"/serverConfig/delete\")\n                .contentType(MediaType.APPLICATION_JSON_UTF8)\n                .content(requestJson)\n                .accept(MediaType.APPLICATION_JSON_UTF8))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print());\n    }", "signature": "void delete()", "full_signature": "@Test public void delete()", "class_method_signature": "ServerConfigControllerTest.delete()", "testcase": true, "constructor": false, "invocations": ["andDo", "andExpect", "perform", "accept", "content", "contentType", "delete", "isOk", "status", "print"]}, "focal_class": {"identifier": "ServerConfigController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Resource\n    private Message message;", "modifier": "@Resource\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private ServerConfigService serverConfigService;", "modifier": "@Autowired\n    private", "type": "ServerConfigService", "declarator": "serverConfigService", "var_name": "serverConfigService"}, {"original_string": "@Autowired\n    private ServerConfigDao serverConfigDao;", "modifier": "@Autowired\n    private", "type": "ServerConfigDao", "declarator": "serverConfigDao", "var_name": "serverConfigDao"}], "methods": [{"identifier": "loadPageList", "parameters": "(@RequestBody Paging<ServerConfig> paging)", "modifiers": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public", "return": "ServiceResult<ListResult<Server>>", "signature": "ServiceResult<ListResult<Server>> loadPageList(@RequestBody Paging<ServerConfig> paging)", "full_signature": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public ServiceResult<ListResult<Server>> loadPageList(@RequestBody Paging<ServerConfig> paging)", "class_method_signature": "ServerConfigController.loadPageList(@RequestBody Paging<ServerConfig> paging)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@Validated(AddServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> add(@Validated(AddServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public ServiceResult<String> add(@Validated(AddServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "ServerConfigController.add(@Validated(AddServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@Validated(UpdateServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> update(@Validated(UpdateServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public ServiceResult<String> update(@Validated(UpdateServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "ServerConfigController.update(@Validated(UpdateServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@Validated(DeleteServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> delete(@Validated(DeleteServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public ServiceResult<String> delete(@Validated(DeleteServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "ServerConfigController.delete(@Validated(DeleteServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/controller/ServerConfigController.java"}, "focal_method": {"identifier": "delete", "parameters": "(@Validated(DeleteServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public", "return": "ServiceResult<String>", "body": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE)\n    public ServiceResult<String> delete(@Validated(DeleteServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors) throws Exception {\n        ValidateResult validateRes = serverConfigService.validatePermision(user, errors)\n                .addAssert(() -> serverConfigDao.deleteServerAppConfig(serverConfig) > 0, message.db_message_delete_operation_failed).validate();\n        if (!validateRes.isValid()) {\n            return ServiceResult.fail(validateRes.getSummarize());\n        }\n        return ServiceResult.success(\"\u963f\u6ce2\u7f57\u914d\u7f6e\u8bf7\u81ea\u884c\u5220\u9664\uff01\uff01\");\n    }", "signature": "ServiceResult<String> delete(@Validated(DeleteServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public ServiceResult<String> delete(@Validated(DeleteServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "ServerConfigController.delete(@Validated(DeleteServerConfig.class) @RequestBody ServerConfig serverConfig, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false, "invocations": ["validate", "addAssert", "validatePermision", "deleteServerAppConfig", "isValid", "fail", "getSummarize", "success"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}