{"test_class": {"identifier": "SpringExtensionFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SpringExtensionFactory springExtensionFactory = new SpringExtensionFactory();", "modifier": "private", "type": "SpringExtensionFactory", "declarator": "springExtensionFactory = new SpringExtensionFactory()", "var_name": "springExtensionFactory"}, {"original_string": "private AnnotationConfigApplicationContext context1;", "modifier": "private", "type": "AnnotationConfigApplicationContext", "declarator": "context1", "var_name": "context1"}, {"original_string": "private AnnotationConfigApplicationContext context2;", "modifier": "private", "type": "AnnotationConfigApplicationContext", "declarator": "context2", "var_name": "context2"}], "file": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/extension/SpringExtensionFactoryTest.java"}, "test_case": {"identifier": "testGetExtensionBySPI", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetExtensionBySPI() {\n        Protocol protocol = springExtensionFactory.getExtension(Protocol.class, \"protocol\");\n        Assertions.assertNull(protocol);\n    }", "signature": "void testGetExtensionBySPI()", "full_signature": "@Test public void testGetExtensionBySPI()", "class_method_signature": "SpringExtensionFactoryTest.testGetExtensionBySPI()", "testcase": true, "constructor": false, "invocations": ["getExtension", "assertNull"]}, "focal_class": {"identifier": "SpringExtensionFactory", "superclass": "", "interfaces": "implements ExtensionFactory", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SpringExtensionFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SpringExtensionFactory.class)", "var_name": "logger"}, {"original_string": "private static final Set<ApplicationContext> CONTEXTS = new ConcurrentHashSet<ApplicationContext>();", "modifier": "private static final", "type": "Set<ApplicationContext>", "declarator": "CONTEXTS = new ConcurrentHashSet<ApplicationContext>()", "var_name": "CONTEXTS"}], "methods": [{"identifier": "addApplicationContext", "parameters": "(ApplicationContext context)", "modifiers": "public static", "return": "void", "signature": "void addApplicationContext(ApplicationContext context)", "full_signature": "public static void addApplicationContext(ApplicationContext context)", "class_method_signature": "SpringExtensionFactory.addApplicationContext(ApplicationContext context)", "testcase": false, "constructor": false}, {"identifier": "removeApplicationContext", "parameters": "(ApplicationContext context)", "modifiers": "public static", "return": "void", "signature": "void removeApplicationContext(ApplicationContext context)", "full_signature": "public static void removeApplicationContext(ApplicationContext context)", "class_method_signature": "SpringExtensionFactory.removeApplicationContext(ApplicationContext context)", "testcase": false, "constructor": false}, {"identifier": "getContexts", "parameters": "()", "modifiers": "public static", "return": "Set<ApplicationContext>", "signature": "Set<ApplicationContext> getContexts()", "full_signature": "public static Set<ApplicationContext> getContexts()", "class_method_signature": "SpringExtensionFactory.getContexts()", "testcase": false, "constructor": false}, {"identifier": "clearContexts", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clearContexts()", "full_signature": "public static void clearContexts()", "class_method_signature": "SpringExtensionFactory.clearContexts()", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(Class<T> type, String name)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T getExtension(Class<T> type, String name)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public T getExtension(Class<T> type, String name)", "class_method_signature": "SpringExtensionFactory.getExtension(Class<T> type, String name)", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/extension/SpringExtensionFactory.java"}, "focal_method": {"identifier": "getExtension", "parameters": "(Class<T> type, String name)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "T", "body": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T getExtension(Class<T> type, String name) {\n\n        //SPI should be get from SpiExtensionFactory\n        if (type.isInterface() && type.isAnnotationPresent(SPI.class)) {\n            return null;\n        }\n\n        for (ApplicationContext context : CONTEXTS) {\n            T bean = BeanFactoryUtils.getOptionalBean(context, name, type);\n            if (bean != null) {\n                return bean;\n            }\n        }\n\n        //logger.warn(\"No spring extension (bean) named:\" + name + \", try to find an extension (bean) of type \" + type.getName());\n\n        return null;\n    }", "signature": "T getExtension(Class<T> type, String name)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public T getExtension(Class<T> type, String name)", "class_method_signature": "SpringExtensionFactory.getExtension(Class<T> type, String name)", "testcase": false, "constructor": false, "invocations": ["isInterface", "isAnnotationPresent", "getOptionalBean"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}