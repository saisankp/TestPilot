{"test_class": {"identifier": "LdapURLSetTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/LdapURLSetTest.java"}, "test_case": {"identifier": "populate", "parameters": "(final LdapURLSet urlSet, final LdapURL[] expected)", "modifiers": "@Test(groups = \"conn\", dataProvider = \"urls\") public", "return": "void", "body": "@Test(groups = \"conn\", dataProvider = \"urls\")\n  public void populate(final LdapURLSet urlSet, final LdapURL[] expected)\n    throws Exception\n  {\n    Assert.assertTrue(urlSet.hasActiveUrls());\n    Assert.assertEquals(urlSet.getActiveUrls().size(), expected.length);\n    Assert.assertFalse(urlSet.hasInactiveUrls());\n    Assert.assertEquals(urlSet.getInactiveUrls().size(), 0);\n    for (int i = 0; i < expected.length; i++) {\n      Assert.assertEquals(urlSet.getActiveUrls().get(i), expected[i]);\n    }\n  }", "signature": "void populate(final LdapURLSet urlSet, final LdapURL[] expected)", "full_signature": "@Test(groups = \"conn\", dataProvider = \"urls\") public void populate(final LdapURLSet urlSet, final LdapURL[] expected)", "class_method_signature": "LdapURLSetTest.populate(final LdapURLSet urlSet, final LdapURL[] expected)", "testcase": true, "constructor": false, "invocations": ["assertTrue", "hasActiveUrls", "assertEquals", "size", "getActiveUrls", "assertFalse", "hasInactiveUrls", "assertEquals", "size", "getInactiveUrls", "assertEquals", "get", "getActiveUrls"]}, "focal_class": {"identifier": "LdapURLSet", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "protected final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private final List<LdapURL> urls = new ArrayList<>();", "modifier": "private final", "type": "List<LdapURL>", "declarator": "urls = new ArrayList<>()", "var_name": "urls"}], "methods": [{"identifier": "LdapURLSet", "parameters": "(final ConnectionStrategy strategy, final String ldapUrls)", "modifiers": "public", "return": "", "signature": " LdapURLSet(final ConnectionStrategy strategy, final String ldapUrls)", "full_signature": "public  LdapURLSet(final ConnectionStrategy strategy, final String ldapUrls)", "class_method_signature": "LdapURLSet.LdapURLSet(final ConnectionStrategy strategy, final String ldapUrls)", "testcase": false, "constructor": true}, {"identifier": "getUrls", "parameters": "()", "modifiers": "public", "return": "List<LdapURL>", "signature": "List<LdapURL> getUrls()", "full_signature": "public List<LdapURL> getUrls()", "class_method_signature": "LdapURLSet.getUrls()", "testcase": false, "constructor": false}, {"identifier": "hasActiveUrls", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasActiveUrls()", "full_signature": "public boolean hasActiveUrls()", "class_method_signature": "LdapURLSet.hasActiveUrls()", "testcase": false, "constructor": false}, {"identifier": "getActiveUrls", "parameters": "()", "modifiers": "public", "return": "List<LdapURL>", "signature": "List<LdapURL> getActiveUrls()", "full_signature": "public List<LdapURL> getActiveUrls()", "class_method_signature": "LdapURLSet.getActiveUrls()", "testcase": false, "constructor": false}, {"identifier": "hasInactiveUrls", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasInactiveUrls()", "full_signature": "public boolean hasInactiveUrls()", "class_method_signature": "LdapURLSet.hasInactiveUrls()", "testcase": false, "constructor": false}, {"identifier": "getInactiveUrls", "parameters": "()", "modifiers": "public", "return": "List<LdapURL>", "signature": "List<LdapURL> getInactiveUrls()", "full_signature": "public List<LdapURL> getInactiveUrls()", "class_method_signature": "LdapURLSet.getInactiveUrls()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "LdapURLSet.size()", "testcase": false, "constructor": false}, {"identifier": "populate", "parameters": "(final List<LdapURL> ldapUrls)", "modifiers": "protected synchronized", "return": "void", "signature": "void populate(final List<LdapURL> ldapUrls)", "full_signature": "protected synchronized void populate(final List<LdapURL> ldapUrls)", "class_method_signature": "LdapURLSet.populate(final List<LdapURL> ldapUrls)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LdapURLSet.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/LdapURLSet.java"}, "focal_method": {"identifier": "populate", "parameters": "(final List<LdapURL> ldapUrls)", "modifiers": "protected synchronized", "return": "void", "body": "protected synchronized void populate(final List<LdapURL> ldapUrls)\n  {\n    // Copy activity state from any URLs currently in the set that match new entries\n    for (LdapURL url : urls) {\n      final LdapURL match = ldapUrls.stream().filter(u -> u.equals(url)).findFirst().orElse(null);\n      if (match != null && !url.isActive()) {\n        match.deactivate();\n      }\n    }\n    urls.clear();\n    urls.addAll(ldapUrls);\n  }", "signature": "void populate(final List<LdapURL> ldapUrls)", "full_signature": "protected synchronized void populate(final List<LdapURL> ldapUrls)", "class_method_signature": "LdapURLSet.populate(final List<LdapURL> ldapUrls)", "testcase": false, "constructor": false, "invocations": ["orElse", "findFirst", "filter", "stream", "equals", "isActive", "deactivate", "clear", "addAll"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}