{"test_class": {"identifier": "InjectorUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ActionRegistry actionRegistry;", "modifier": "@Mock\n    private", "type": "ActionRegistry", "declarator": "actionRegistry", "var_name": "actionRegistry"}, {"original_string": "@InjectMocks\n    private InjectorUtil injectorUtil;", "modifier": "@InjectMocks\n    private", "type": "InjectorUtil", "declarator": "injectorUtil", "var_name": "injectorUtil"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/util/InjectorUtilTest.java"}, "test_case": {"identifier": "testInjectPreparationDetailsDTO", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInjectPreparationDetailsDTO() throws IllegalAccessException, InstantiationException {\n        PreparationDetailsDTO prep = new PreparationDetailsDTO();\n        List<Action> actions = new ArrayList<>();\n\n        actions.add(getSimpleAction(\"uppercase\", \"column_name\", \"lastname\"));\n        actions.add(getSimpleAction(\"lowercase\", \"column_name\", \"lastname\"));\n\n        when(actionRegistry.get(\"uppercase\")).thenReturn(UpperCase.class.newInstance());\n        when(actionRegistry.get(\"lowercase\")).thenReturn(LowerCase.class.newInstance());\n\n        PreparationDetailsDTO detailsPrep = injectorUtil.injectPreparationDetails(actions, prep);\n\n        detailsPrep.getMetadata().forEach(af -> {\n            af.getParameters().forEach(p -> {\n\n                // we check if action create new column then it is on readonly mode\n                if (p.getName().equals(CREATE_NEW_COLUMN)) {\n                    assertTrue(p.isReadonly());\n                }\n            });\n        });\n\n        assertEquals(\"Number of action should be the same\", actions.size(), detailsPrep.getActions().size());\n        assertEquals(\"Number of ActionForm should be the same\", actions.size(), detailsPrep.getMetadata().size());\n\n    }", "signature": "void testInjectPreparationDetailsDTO()", "full_signature": "@Test public void testInjectPreparationDetailsDTO()", "class_method_signature": "InjectorUtilTest.testInjectPreparationDetailsDTO()", "testcase": true, "constructor": false, "invocations": ["add", "getSimpleAction", "add", "getSimpleAction", "thenReturn", "when", "get", "newInstance", "thenReturn", "when", "get", "newInstance", "injectPreparationDetails", "forEach", "getMetadata", "forEach", "getParameters", "equals", "getName", "assertTrue", "isReadonly", "assertEquals", "size", "size", "getActions", "assertEquals", "size", "size", "getMetadata"]}, "focal_class": {"identifier": "InjectorUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ActionRegistry registry;", "modifier": "@Autowired\n    private", "type": "ActionRegistry", "declarator": "registry", "var_name": "registry"}], "methods": [{"identifier": "injectPreparationDetails", "parameters": "(List<Action> actions, PreparationDetailsDTO details)", "modifiers": "public", "return": "PreparationDetailsDTO", "signature": "PreparationDetailsDTO injectPreparationDetails(List<Action> actions, PreparationDetailsDTO details)", "full_signature": "public PreparationDetailsDTO injectPreparationDetails(List<Action> actions, PreparationDetailsDTO details)", "class_method_signature": "InjectorUtil.injectPreparationDetails(List<Action> actions, PreparationDetailsDTO details)", "testcase": false, "constructor": false}, {"identifier": "disallowColumnCreationChange", "parameters": "(ActionForm form)", "modifiers": "private static", "return": "ActionForm", "signature": "ActionForm disallowColumnCreationChange(ActionForm form)", "full_signature": "private static ActionForm disallowColumnCreationChange(ActionForm form)", "class_method_signature": "InjectorUtil.disallowColumnCreationChange(ActionForm form)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/util/InjectorUtil.java"}, "focal_method": {"identifier": "injectPreparationDetails", "parameters": "(List<Action> actions, PreparationDetailsDTO details)", "modifiers": "public", "return": "PreparationDetailsDTO", "body": "public PreparationDetailsDTO injectPreparationDetails(List<Action> actions, PreparationDetailsDTO details) {\n        // Append actions and action forms\n        details.setActions(actions);\n\n        final AtomicBoolean allowDistributedRun = new AtomicBoolean();\n        final List<ActionForm> metadata = actions\n                .stream() //\n                .map(a -> registry.get(a.getName())) //\n                .peek(a -> {\n                    if (allowDistributedRun.get()) {\n                        allowDistributedRun.set(a.getBehavior().contains(ActionDefinition.Behavior.FORBID_DISTRIBUTED));\n                    }\n                }) //\n                // action must be adapted before usage. See problems with masking action\n                .map(a -> a.getActionForm(LocaleContextHolder.getLocale(), Locale.US)) //\n                .map(InjectorUtil::disallowColumnCreationChange) //\n                .collect(Collectors.toList());\n        details.setMetadata(metadata);\n\n        // Flag for allow distributed run (based on metadata).\n        details.setAllowDistributedRun(allowDistributedRun.get());\n\n        return details;\n    }", "signature": "PreparationDetailsDTO injectPreparationDetails(List<Action> actions, PreparationDetailsDTO details)", "full_signature": "public PreparationDetailsDTO injectPreparationDetails(List<Action> actions, PreparationDetailsDTO details)", "class_method_signature": "InjectorUtil.injectPreparationDetails(List<Action> actions, PreparationDetailsDTO details)", "testcase": false, "constructor": false, "invocations": ["setActions", "collect", "map", "map", "peek", "map", "stream", "get", "getName", "get", "set", "contains", "getBehavior", "getActionForm", "getLocale", "toList", "setMetadata", "setAllowDistributedRun", "get"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}