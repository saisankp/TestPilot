{"test_class": {"identifier": "AutoUpdateManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ThingUID THING_UID_ONLINE = new ThingUID(\"test::mock-online\");", "modifier": "private static final", "type": "ThingUID", "declarator": "THING_UID_ONLINE = new ThingUID(\"test::mock-online\")", "var_name": "THING_UID_ONLINE"}, {"original_string": "private static final ThingUID THING_UID_OFFLINE = new ThingUID(\"test::mock-offline\");", "modifier": "private static final", "type": "ThingUID", "declarator": "THING_UID_OFFLINE = new ThingUID(\"test::mock-offline\")", "var_name": "THING_UID_OFFLINE"}, {"original_string": "private static final ThingUID THING_UID_HANDLER_MISSING = new ThingUID(\"test::handlerMissing\");", "modifier": "private static final", "type": "ThingUID", "declarator": "THING_UID_HANDLER_MISSING = new ThingUID(\"test::handlerMissing\")", "var_name": "THING_UID_HANDLER_MISSING"}, {"original_string": "private static final ChannelUID CHANNEL_UID_ONLINE_1 = new ChannelUID(THING_UID_ONLINE, \"channel1\");", "modifier": "private static final", "type": "ChannelUID", "declarator": "CHANNEL_UID_ONLINE_1 = new ChannelUID(THING_UID_ONLINE, \"channel1\")", "var_name": "CHANNEL_UID_ONLINE_1"}, {"original_string": "private static final ChannelUID CHANNEL_UID_ONLINE_2 = new ChannelUID(THING_UID_ONLINE, \"channel2\");", "modifier": "private static final", "type": "ChannelUID", "declarator": "CHANNEL_UID_ONLINE_2 = new ChannelUID(THING_UID_ONLINE, \"channel2\")", "var_name": "CHANNEL_UID_ONLINE_2"}, {"original_string": "private static final ChannelUID CHANNEL_UID_OFFLINE_1 = new ChannelUID(THING_UID_OFFLINE, \"channel1\");", "modifier": "private static final", "type": "ChannelUID", "declarator": "CHANNEL_UID_OFFLINE_1 = new ChannelUID(THING_UID_OFFLINE, \"channel1\")", "var_name": "CHANNEL_UID_OFFLINE_1"}, {"original_string": "private static final ChannelUID CHANNEL_UID_ONLINE_GONE = new ChannelUID(THING_UID_ONLINE, \"gone\");", "modifier": "private static final", "type": "ChannelUID", "declarator": "CHANNEL_UID_ONLINE_GONE = new ChannelUID(THING_UID_ONLINE, \"gone\")", "var_name": "CHANNEL_UID_ONLINE_GONE"}, {"original_string": "private static final ChannelUID CHANNEL_UID_HANDLER_MISSING = new ChannelUID(THING_UID_HANDLER_MISSING, \"channel1\");", "modifier": "private static final", "type": "ChannelUID", "declarator": "CHANNEL_UID_HANDLER_MISSING = new ChannelUID(THING_UID_HANDLER_MISSING, \"channel1\")", "var_name": "CHANNEL_UID_HANDLER_MISSING"}, {"original_string": "private ItemCommandEvent event;", "modifier": "private", "type": "ItemCommandEvent", "declarator": "event", "var_name": "event"}, {"original_string": "private GenericItem item;", "modifier": "private", "type": "GenericItem", "declarator": "item", "var_name": "item"}, {"original_string": "private @Mock ChannelTypeRegistry channelTypeRegistryMock;", "modifier": "private @Mock", "type": "ChannelTypeRegistry", "declarator": "channelTypeRegistryMock", "var_name": "channelTypeRegistryMock"}, {"original_string": "private @Mock EventPublisher eventPublisherMock;", "modifier": "private @Mock", "type": "EventPublisher", "declarator": "eventPublisherMock", "var_name": "eventPublisherMock"}, {"original_string": "private @Mock ItemChannelLinkRegistry iclRegistryMock;", "modifier": "private @Mock", "type": "ItemChannelLinkRegistry", "declarator": "iclRegistryMock", "var_name": "iclRegistryMock"}, {"original_string": "private @Mock ThingRegistry thingRegistryMock;", "modifier": "private @Mock", "type": "ThingRegistry", "declarator": "thingRegistryMock", "var_name": "thingRegistryMock"}, {"original_string": "private @Mock Thing onlineThingMock;", "modifier": "private @Mock", "type": "Thing", "declarator": "onlineThingMock", "var_name": "onlineThingMock"}, {"original_string": "private @Mock Thing offlineThingMock;", "modifier": "private @Mock", "type": "Thing", "declarator": "offlineThingMock", "var_name": "offlineThingMock"}, {"original_string": "private @Mock Thing thingMissingHandlerMock;", "modifier": "private @Mock", "type": "Thing", "declarator": "thingMissingHandlerMock", "var_name": "thingMissingHandlerMock"}, {"original_string": "private @Mock ThingHandler handlerMock;", "modifier": "private @Mock", "type": "ThingHandler", "declarator": "handlerMock", "var_name": "handlerMock"}, {"original_string": "private @Mock MetadataRegistry metadataRegistryMock;", "modifier": "private @Mock", "type": "MetadataRegistry", "declarator": "metadataRegistryMock", "var_name": "metadataRegistryMock"}, {"original_string": "private final List<ItemChannelLink> links = new LinkedList<>();", "modifier": "private final", "type": "List<ItemChannelLink>", "declarator": "links = new LinkedList<>()", "var_name": "links"}, {"original_string": "private AutoUpdateManager aum;", "modifier": "private", "type": "AutoUpdateManager", "declarator": "aum", "var_name": "aum"}, {"original_string": "private final Map<ChannelUID, AutoUpdatePolicy> policies = new HashMap<>();", "modifier": "private final", "type": "Map<ChannelUID, AutoUpdatePolicy>", "declarator": "policies = new HashMap<>()", "var_name": "policies"}], "file": "bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/internal/AutoUpdateManagerTest.java"}, "test_case": {"identifier": "testAutoUpdateErrorInvalidatesVETO", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAutoUpdateErrorInvalidatesVETO() {\n        links.add(new ItemChannelLink(\"test\", CHANNEL_UID_ONLINE_1));\n        links.add(new ItemChannelLink(\"test\", CHANNEL_UID_ONLINE_GONE));\n        setAutoUpdatePolicy(CHANNEL_UID_ONLINE_1, AutoUpdatePolicy.RECOMMEND);\n        setAutoUpdatePolicy(CHANNEL_UID_ONLINE_GONE, AutoUpdatePolicy.VETO);\n\n        aum.receiveCommand(event, item);\n\n        assertStateEvent(\"AFTER\", AutoUpdateManager.EVENT_SOURCE);\n    }", "signature": "void testAutoUpdateErrorInvalidatesVETO()", "full_signature": "@Test public void testAutoUpdateErrorInvalidatesVETO()", "class_method_signature": "AutoUpdateManagerTest.testAutoUpdateErrorInvalidatesVETO()", "testcase": true, "constructor": false, "invocations": ["add", "add", "setAutoUpdatePolicy", "setAutoUpdatePolicy", "receiveCommand", "assertStateEvent"]}, "focal_class": {"identifier": "AutoUpdateManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String AUTOUPDATE_KEY = \"autoupdate\";", "modifier": "private static final", "type": "String", "declarator": "AUTOUPDATE_KEY = \"autoupdate\"", "var_name": "AUTOUPDATE_KEY"}, {"original_string": "protected static final String EVENT_SOURCE = \"org.openhab.core.autoupdate\";", "modifier": "protected static final", "type": "String", "declarator": "EVENT_SOURCE = \"org.openhab.core.autoupdate\"", "var_name": "EVENT_SOURCE"}, {"original_string": "protected static final String EVENT_SOURCE_OPTIMISTIC = \"org.openhab.core.autoupdate.optimistic\";", "modifier": "protected static final", "type": "String", "declarator": "EVENT_SOURCE_OPTIMISTIC = \"org.openhab.core.autoupdate.optimistic\"", "var_name": "EVENT_SOURCE_OPTIMISTIC"}, {"original_string": "protected static final String PROPERTY_ENABLED = \"enabled\";", "modifier": "protected static final", "type": "String", "declarator": "PROPERTY_ENABLED = \"enabled\"", "var_name": "PROPERTY_ENABLED"}, {"original_string": "protected static final String PROPERTY_SEND_OPTIMISTIC_UPDATES = \"sendOptimisticUpdates\";", "modifier": "protected static final", "type": "String", "declarator": "PROPERTY_SEND_OPTIMISTIC_UPDATES = \"sendOptimisticUpdates\"", "var_name": "PROPERTY_SEND_OPTIMISTIC_UPDATES"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(AutoUpdateManager.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AutoUpdateManager.class)", "var_name": "logger"}, {"original_string": "private final ChannelTypeRegistry channelTypeRegistry;", "modifier": "private final", "type": "ChannelTypeRegistry", "declarator": "channelTypeRegistry", "var_name": "channelTypeRegistry"}, {"original_string": "private final EventPublisher eventPublisher;", "modifier": "private final", "type": "EventPublisher", "declarator": "eventPublisher", "var_name": "eventPublisher"}, {"original_string": "private final ItemChannelLinkRegistry itemChannelLinkRegistry;", "modifier": "private final", "type": "ItemChannelLinkRegistry", "declarator": "itemChannelLinkRegistry", "var_name": "itemChannelLinkRegistry"}, {"original_string": "private final MetadataRegistry metadataRegistry;", "modifier": "private final", "type": "MetadataRegistry", "declarator": "metadataRegistry", "var_name": "metadataRegistry"}, {"original_string": "private final ThingRegistry thingRegistry;", "modifier": "private final", "type": "ThingRegistry", "declarator": "thingRegistry", "var_name": "thingRegistry"}, {"original_string": "private boolean enabled = true;", "modifier": "private", "type": "boolean", "declarator": "enabled = true", "var_name": "enabled"}, {"original_string": "private boolean sendOptimisticUpdates = false;", "modifier": "private", "type": "boolean", "declarator": "sendOptimisticUpdates = false", "var_name": "sendOptimisticUpdates"}], "methods": [{"identifier": "AutoUpdateManager", "parameters": "(Map<String, @Nullable Object> configuration,\n            final @Reference ChannelTypeRegistry channelTypeRegistry, //\n            final @Reference EventPublisher eventPublisher,\n            final @Reference ItemChannelLinkRegistry itemChannelLinkRegistry,\n            final @Reference MetadataRegistry metadataRegistry, //\n            final @Reference ThingRegistry thingRegistry)", "modifiers": "@Activate public", "return": "", "signature": " AutoUpdateManager(Map<String, @Nullable Object> configuration,\n            final @Reference ChannelTypeRegistry channelTypeRegistry, //\n            final @Reference EventPublisher eventPublisher,\n            final @Reference ItemChannelLinkRegistry itemChannelLinkRegistry,\n            final @Reference MetadataRegistry metadataRegistry, //\n            final @Reference ThingRegistry thingRegistry)", "full_signature": "@Activate public  AutoUpdateManager(Map<String, @Nullable Object> configuration,\n            final @Reference ChannelTypeRegistry channelTypeRegistry, //\n            final @Reference EventPublisher eventPublisher,\n            final @Reference ItemChannelLinkRegistry itemChannelLinkRegistry,\n            final @Reference MetadataRegistry metadataRegistry, //\n            final @Reference ThingRegistry thingRegistry)", "class_method_signature": "AutoUpdateManager.AutoUpdateManager(Map<String, @Nullable Object> configuration,\n            final @Reference ChannelTypeRegistry channelTypeRegistry, //\n            final @Reference EventPublisher eventPublisher,\n            final @Reference ItemChannelLinkRegistry itemChannelLinkRegistry,\n            final @Reference MetadataRegistry metadataRegistry, //\n            final @Reference ThingRegistry thingRegistry)", "testcase": false, "constructor": true}, {"identifier": "modified", "parameters": "(Map<String, @Nullable Object> configuration)", "modifiers": "@Modified protected", "return": "void", "signature": "void modified(Map<String, @Nullable Object> configuration)", "full_signature": "@Modified protected void modified(Map<String, @Nullable Object> configuration)", "class_method_signature": "AutoUpdateManager.modified(Map<String, @Nullable Object> configuration)", "testcase": false, "constructor": false}, {"identifier": "receiveCommand", "parameters": "(ItemCommandEvent commandEvent, Item item)", "modifiers": "public", "return": "void", "signature": "void receiveCommand(ItemCommandEvent commandEvent, Item item)", "full_signature": "public void receiveCommand(ItemCommandEvent commandEvent, Item item)", "class_method_signature": "AutoUpdateManager.receiveCommand(ItemCommandEvent commandEvent, Item item)", "testcase": false, "constructor": false}, {"identifier": "shouldAutoUpdate", "parameters": "(String itemName)", "modifiers": "private", "return": "Recommendation", "signature": "Recommendation shouldAutoUpdate(String itemName)", "full_signature": "private Recommendation shouldAutoUpdate(String itemName)", "class_method_signature": "AutoUpdateManager.shouldAutoUpdate(String itemName)", "testcase": false, "constructor": false}, {"identifier": "postUpdate", "parameters": "(Item item, State newState, String origin)", "modifiers": "private", "return": "void", "signature": "void postUpdate(Item item, State newState, String origin)", "full_signature": "private void postUpdate(Item item, State newState, String origin)", "class_method_signature": "AutoUpdateManager.postUpdate(Item item, State newState, String origin)", "testcase": false, "constructor": false}, {"identifier": "postPrediction", "parameters": "(Item item, State predictedState, boolean isConfirmation)", "modifiers": "private", "return": "void", "signature": "void postPrediction(Item item, State predictedState, boolean isConfirmation)", "full_signature": "private void postPrediction(Item item, State predictedState, boolean isConfirmation)", "class_method_signature": "AutoUpdateManager.postPrediction(Item item, State predictedState, boolean isConfirmation)", "testcase": false, "constructor": false}, {"identifier": "isAcceptedState", "parameters": "(State newState, Item item)", "modifiers": "private", "return": "boolean", "signature": "boolean isAcceptedState(State newState, Item item)", "full_signature": "private boolean isAcceptedState(State newState, Item item)", "class_method_signature": "AutoUpdateManager.isAcceptedState(State newState, Item item)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/internal/AutoUpdateManager.java"}, "focal_method": {"identifier": "receiveCommand", "parameters": "(ItemCommandEvent commandEvent, Item item)", "modifiers": "public", "return": "void", "body": "public void receiveCommand(ItemCommandEvent commandEvent, Item item) {\n        if (!enabled) {\n            return;\n        }\n        final String itemName = commandEvent.getItemName();\n        final Command command = commandEvent.getItemCommand();\n        if (command instanceof State) {\n            final State state = (State) command;\n\n            Recommendation autoUpdate = shouldAutoUpdate(itemName);\n\n            // consider user-override via item meta-data\n            MetadataKey key = new MetadataKey(AUTOUPDATE_KEY, itemName);\n            Metadata metadata = metadataRegistry.get(key);\n            if (metadata != null && !metadata.getValue().trim().isEmpty()) {\n                boolean override = Boolean.parseBoolean(metadata.getValue());\n                if (override) {\n                    logger.trace(\"Auto update strategy {} overriden by item metadata to REQUIRED\", autoUpdate);\n                    autoUpdate = Recommendation.REQUIRED;\n                } else {\n                    logger.trace(\"Auto update strategy {} overriden by item metadata to DONT\", autoUpdate);\n                    autoUpdate = Recommendation.DONT;\n                }\n            }\n\n            switch (autoUpdate) {\n                case REQUIRED:\n                    logger.trace(\"Automatically updating item '{}' because no channel is linked\", itemName);\n                    postUpdate(item, state, EVENT_SOURCE);\n                    break;\n                case RECOMMENDED:\n                    logger.trace(\"Automatically updating item '{}' because no channel does it\", itemName);\n                    postUpdate(item, state, EVENT_SOURCE);\n                    break;\n                case OPTIMISTIC:\n                    logger.trace(\"Optimistically updating item '{}'\", itemName);\n                    postPrediction(item, state, false);\n                    if (sendOptimisticUpdates) {\n                        postUpdate(item, state, EVENT_SOURCE_OPTIMISTIC);\n                    }\n                    break;\n                case DONT:\n                    logger.trace(\"Won't update item '{}' as it was vetoed.\", itemName);\n                    break;\n                case REVERT:\n                    logger.trace(\"Sending current item state to revert controls '{}'\", itemName);\n                    postPrediction(item, item.getState(), true);\n                    break;\n            }\n        }\n    }", "signature": "void receiveCommand(ItemCommandEvent commandEvent, Item item)", "full_signature": "public void receiveCommand(ItemCommandEvent commandEvent, Item item)", "class_method_signature": "AutoUpdateManager.receiveCommand(ItemCommandEvent commandEvent, Item item)", "testcase": false, "constructor": false, "invocations": ["getItemName", "getItemCommand", "shouldAutoUpdate", "get", "isEmpty", "trim", "getValue", "parseBoolean", "getValue", "trace", "trace", "trace", "postUpdate", "trace", "postUpdate", "trace", "postPrediction", "postUpdate", "trace", "trace", "postPrediction", "getState"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}