{"test_class": {"identifier": "ImgscalrImageManipulatorTest", "superclass": "extends AbstractImageTest", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ImgscalrImageManipulatorTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ImgscalrImageManipulatorTest.class)", "var_name": "log"}, {"original_string": "private ImgscalrImageManipulator manipulator;", "modifier": "private", "type": "ImgscalrImageManipulator", "declarator": "manipulator", "var_name": "manipulator"}], "file": "services/image-imgscalr/src/test/java/com/gentics/mesh/image/ImgscalrImageManipulatorTest.java"}, "test_case": {"identifier": "testPropResize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPropResize() throws IOException {\n\t\t// tests with horizontal input ...\n\t\tBufferedImage biH = ImageTestUtil.readImage(\"testgrid-horizontal-hd_1920x1080.png\");\n\n\t\t// .. fit to width\n\t\tBufferedImage outputImage1 = manipulator.cropAndResize(biH,\n\t\t\tnew ImageManipulationParametersImpl().setWidth(500).setHeight(400).setResizeMode(ResizeMode.PROP));\n\t\tassertThat(outputImage1).matchesReference(\"outputImage1-prop-reference.png\");\n\n\t\t// .. fit to height\n\t\tBufferedImage outputImage2 = manipulator.cropAndResize(biH,\n\t\t\tnew ImageManipulationParametersImpl().setWidth(2000).setHeight(500).setResizeMode(ResizeMode.PROP));\n\t\tassertThat(outputImage2).matchesReference(\"outputImage2-prop-reference.png\");\n\n\t\t// tests with vertical input ...\n\t\tBufferedImage biV = ImageTestUtil.readImage(\"testgrid-vertical-hd_1080x1920.png\");\n\n\t\t// .. fit to width\n\t\tBufferedImage outputImage3 = manipulator.cropAndResize(biV,\n\t\t\tnew ImageManipulationParametersImpl().setWidth(500).setHeight(1500).setResizeMode(ResizeMode.PROP));\n\t\tassertThat(outputImage3).matchesReference(\"outputImage3-prop-reference.png\");\n\t\t// .. fit to height\n\t\tBufferedImage outputImage4 = manipulator.cropAndResize(biV,\n\t\t\tnew ImageManipulationParametersImpl().setWidth(400).setHeight(500).setResizeMode(ResizeMode.PROP));\n\t\tassertThat(outputImage4).matchesReference(\"outputImage4-prop-reference.png\");\n\n\t\t// tests with square input ...\n\t\tBufferedImage biS = ImageTestUtil.readImage(\"testgrid-square_1080x1080.png\");\n\n\t\t// .. fit to width\n\t\tBufferedImage outputImage5 = manipulator.cropAndResize(biS,\n\t\t\tnew ImageManipulationParametersImpl().setWidth(500).setHeight(1000).setResizeMode(ResizeMode.PROP));\n\t\tassertThat(outputImage5).matchesReference(\"outputImage5-prop-reference.png\");\n\n\t\t// .. fit to height\n\t\tBufferedImage outputImage6 = manipulator.cropAndResize(biS,\n\t\t\tnew ImageManipulationParametersImpl().setWidth(1000).setHeight(500).setResizeMode(ResizeMode.PROP));\n\t\tassertThat(outputImage6).matchesReference(\"outputImage6-prop-reference.png\");\n\n\t\t// test if certain formats omit resampling\n\t\t// format that is horizontal, has same width as original image, but is higher\n\t\tBufferedImage outputImage7 = manipulator.cropAndResize(biH,\n\t\t\tnew ImageManipulationParametersImpl().setWidth(1920).setHeight(1200).setResizeMode(ResizeMode.PROP));\n\t\tassertEquals(\"The image should not have been resized since the resulting images dimensions match the source image dimension.\", biH.hashCode(),\n\t\t\toutputImage7\n\t\t\t\t.hashCode());\n\n\t\t// format that is horizontal, has same height as original image, but is wider\n\t\tBufferedImage outputImage8 = manipulator.cropAndResize(biH,\n\t\t\tnew ImageManipulationParametersImpl().setWidth(2000).setHeight(1080).setResizeMode(ResizeMode.PROP));\n\t\tassertEquals(\"The image should not have been resized since the resulting images dimensions match the source image dimension.\", biH.hashCode(),\n\t\t\toutputImage8\n\t\t\t\t.hashCode());\n\n\t\t// ident horizontal format\n\t\tBufferedImage outputImage9 = manipulator.cropAndResize(biH,\n\t\t\tnew ImageManipulationParametersImpl().setWidth(1920).setHeight(1080).setResizeMode(ResizeMode.PROP));\n\t\tassertEquals(\"The image should not have been resized since the parameters match the source image dimension.\", biH.hashCode(), outputImage9\n\t\t\t.hashCode());\n\n\t\t// format that is vertical, has same width as original image, but is higher\n\t\tBufferedImage outputImage10 = manipulator.cropAndResize(biV,\n\t\t\tnew ImageManipulationParametersImpl().setWidth(1080).setHeight(2000).setResizeMode(ResizeMode.PROP));\n\t\tassertEquals(\"The image should not have been resized since the resulting images dimensions match the source image dimension.\", biV.hashCode(),\n\t\t\toutputImage10\n\t\t\t\t.hashCode());\n\n\t\t// format that is vertical, has same height as original image, but is wider\n\t\tBufferedImage outputImage11 = manipulator.cropAndResize(biV,\n\t\t\tnew ImageManipulationParametersImpl().setWidth(1200).setHeight(1920).setResizeMode(ResizeMode.PROP));\n\t\tassertEquals(\"The image should not have been resized since the resulting images dimensions match the source image dimension.\", biV.hashCode(),\n\t\t\toutputImage11\n\t\t\t\t.hashCode());\n\n\t\t// ident vertical format\n\t\tBufferedImage outputImage12 = manipulator.cropAndResize(biV,\n\t\t\tnew ImageManipulationParametersImpl().setWidth(1080).setHeight(1920).setResizeMode(ResizeMode.PROP));\n\t\tassertEquals(\"The image should not have been resized since the parameters match the source image dimension.\", biV.hashCode(), outputImage12\n\t\t\t.hashCode());\n\n\t\t// format that is square, has same width as original image, but is higher\n\t\tBufferedImage outputImage13 = manipulator.cropAndResize(biS,\n\t\t\tnew ImageManipulationParametersImpl().setWidth(1080).setHeight(1200).setResizeMode(ResizeMode.PROP));\n\t\tassertEquals(\"The image should not have been resized since the resulting images dimensions match the source image dimension.\", biS.hashCode(),\n\t\t\toutputImage13\n\t\t\t\t.hashCode());\n\n\t\t// format that is vertical, has same height as original image, but is wider\n\t\tBufferedImage outputImage14 = manipulator.cropAndResize(biS,\n\t\t\tnew ImageManipulationParametersImpl().setWidth(1200).setHeight(1080).setResizeMode(ResizeMode.PROP));\n\t\tassertEquals(\"The image should not have been resized since the resulting images dimensions match the source image dimension.\", biS.hashCode(),\n\t\t\toutputImage14\n\t\t\t\t.hashCode());\n\n\t\t// ident square format\n\t\tBufferedImage outputImage15 = manipulator.cropAndResize(biS,\n\t\t\tnew ImageManipulationParametersImpl().setWidth(1080).setHeight(1080).setResizeMode(ResizeMode.PROP));\n\t\tassertEquals(\"The image should not have been resized since the parameters match the source image dimension.\", biS.hashCode(), outputImage15\n\t\t\t.hashCode());\n\n\t\t// when you want to update the referenceImage, execute the code below\n\t\t// and copy the files to src/test/resources/references/\n\t\t// ImageTestUtil.writePngImage(outputImage1, new File(\"target/outputImage1-prop-reference.png\"));\n\t\t// ImageTestUtil.writePngImage(outputImage2, new File(\"target/outputImage2-prop-reference.png\"));\n\t\t// ImageTestUtil.writePngImage(outputImage3, new File(\"target/outputImage3-prop-reference.png\"));\n\t\t// ImageTestUtil.writePngImage(outputImage4, new File(\"target/outputImage4-prop-reference.png\"));\n\t\t// ImageTestUtil.writePngImage(outputImage5, new File(\"target/outputImage5-prop-reference.png\"));\n\t\t// ImageTestUtil.writePngImage(outputImage6, new File(\"target/outputImage6-prop-reference.png\"));\n\n\t}", "signature": "void testPropResize()", "full_signature": "@Test public void testPropResize()", "class_method_signature": "ImgscalrImageManipulatorTest.testPropResize()", "testcase": true, "constructor": false, "invocations": ["readImage", "cropAndResize", "setResizeMode", "setHeight", "setWidth", "matchesReference", "assertThat", "cropAndResize", "setResizeMode", "setHeight", "setWidth", "matchesReference", "assertThat", "readImage", "cropAndResize", "setResizeMode", "setHeight", "setWidth", "matchesReference", "assertThat", "cropAndResize", "setResizeMode", "setHeight", "setWidth", "matchesReference", "assertThat", "readImage", "cropAndResize", "setResizeMode", "setHeight", "setWidth", "matchesReference", "assertThat", "cropAndResize", "setResizeMode", "setHeight", "setWidth", "matchesReference", "assertThat", "cropAndResize", "setResizeMode", "setHeight", "setWidth", "assertEquals", "hashCode", "hashCode", "cropAndResize", "setResizeMode", "setHeight", "setWidth", "assertEquals", "hashCode", "hashCode", "cropAndResize", "setResizeMode", "setHeight", "setWidth", "assertEquals", "hashCode", "hashCode", "cropAndResize", "setResizeMode", "setHeight", "setWidth", "assertEquals", "hashCode", "hashCode", "cropAndResize", "setResizeMode", "setHeight", "setWidth", "assertEquals", "hashCode", "hashCode", "cropAndResize", "setResizeMode", "setHeight", "setWidth", "assertEquals", "hashCode", "hashCode", "cropAndResize", "setResizeMode", "setHeight", "setWidth", "assertEquals", "hashCode", "hashCode", "cropAndResize", "setResizeMode", "setHeight", "setWidth", "assertEquals", "hashCode", "hashCode", "cropAndResize", "setResizeMode", "setHeight", "setWidth", "assertEquals", "hashCode", "hashCode"]}, "focal_class": {"identifier": "ImgscalrImageManipulator", "superclass": "extends AbstractImageManipulator", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ImgscalrImageManipulator.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ImgscalrImageManipulator.class)", "var_name": "log"}, {"original_string": "private FocalPointModifier focalPointModifier;", "modifier": "private", "type": "FocalPointModifier", "declarator": "focalPointModifier", "var_name": "focalPointModifier"}, {"original_string": "private WorkerExecutor workerPool;", "modifier": "private", "type": "WorkerExecutor", "declarator": "workerPool", "var_name": "workerPool"}, {"original_string": "private final BootstrapInitializer boot;", "modifier": "private final", "type": "BootstrapInitializer", "declarator": "boot", "var_name": "boot"}], "methods": [{"identifier": "ImgscalrImageManipulator", "parameters": "(Vertx vertx, MeshOptions options, BootstrapInitializer boot)", "modifiers": "public", "return": "", "signature": " ImgscalrImageManipulator(Vertx vertx, MeshOptions options, BootstrapInitializer boot)", "full_signature": "public  ImgscalrImageManipulator(Vertx vertx, MeshOptions options, BootstrapInitializer boot)", "class_method_signature": "ImgscalrImageManipulator.ImgscalrImageManipulator(Vertx vertx, MeshOptions options, BootstrapInitializer boot)", "testcase": false, "constructor": true}, {"identifier": "ImgscalrImageManipulator", "parameters": "(Vertx vertx, ImageManipulatorOptions options, BootstrapInitializer boot)", "modifiers": "", "return": "", "signature": " ImgscalrImageManipulator(Vertx vertx, ImageManipulatorOptions options, BootstrapInitializer boot)", "full_signature": "  ImgscalrImageManipulator(Vertx vertx, ImageManipulatorOptions options, BootstrapInitializer boot)", "class_method_signature": "ImgscalrImageManipulator.ImgscalrImageManipulator(Vertx vertx, ImageManipulatorOptions options, BootstrapInitializer boot)", "testcase": false, "constructor": true}, {"identifier": "crop", "parameters": "(BufferedImage originalImage, ImageRect cropArea)", "modifiers": "protected", "return": "BufferedImage", "signature": "BufferedImage crop(BufferedImage originalImage, ImageRect cropArea)", "full_signature": "protected BufferedImage crop(BufferedImage originalImage, ImageRect cropArea)", "class_method_signature": "ImgscalrImageManipulator.crop(BufferedImage originalImage, ImageRect cropArea)", "testcase": false, "constructor": false}, {"identifier": "resizeIfRequested", "parameters": "(BufferedImage originalImage, ImageManipulationParameters parameters)", "modifiers": "protected", "return": "BufferedImage", "signature": "BufferedImage resizeIfRequested(BufferedImage originalImage, ImageManipulationParameters parameters)", "full_signature": "protected BufferedImage resizeIfRequested(BufferedImage originalImage, ImageManipulationParameters parameters)", "class_method_signature": "ImgscalrImageManipulator.resizeIfRequested(BufferedImage originalImage, ImageManipulationParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "getImageReader", "parameters": "(ImageInputStream input)", "modifiers": "private", "return": "ImageReader", "signature": "ImageReader getImageReader(ImageInputStream input)", "full_signature": "private ImageReader getImageReader(ImageInputStream input)", "class_method_signature": "ImgscalrImageManipulator.getImageReader(ImageInputStream input)", "testcase": false, "constructor": false}, {"identifier": "getImageWriter", "parameters": "(ImageReader reader, ImageOutputStream out)", "modifiers": "private", "return": "ImageWriter", "signature": "ImageWriter getImageWriter(ImageReader reader, ImageOutputStream out)", "full_signature": "private ImageWriter getImageWriter(ImageReader reader, ImageOutputStream out)", "class_method_signature": "ImgscalrImageManipulator.getImageWriter(ImageReader reader, ImageOutputStream out)", "testcase": false, "constructor": false}, {"identifier": "cropAndResize", "parameters": "(BufferedImage image, ImageManipulationParameters parameters)", "modifiers": "protected", "return": "BufferedImage", "signature": "BufferedImage cropAndResize(BufferedImage image, ImageManipulationParameters parameters)", "full_signature": "protected BufferedImage cropAndResize(BufferedImage image, ImageManipulationParameters parameters)", "class_method_signature": "ImgscalrImageManipulator.cropAndResize(BufferedImage image, ImageManipulationParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "handleResize", "parameters": "(Binary binary, ImageManipulationParameters parameters)", "modifiers": "@Override public", "return": "Single<String>", "signature": "Single<String> handleResize(Binary binary, ImageManipulationParameters parameters)", "full_signature": "@Override public Single<String> handleResize(Binary binary, ImageManipulationParameters parameters)", "class_method_signature": "ImgscalrImageManipulator.handleResize(Binary binary, ImageManipulationParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "getImageWriteparams", "parameters": "(String extension)", "modifiers": "private", "return": "ImageWriteParam", "signature": "ImageWriteParam getImageWriteparams(String extension)", "full_signature": "private ImageWriteParam getImageWriteparams(String extension)", "class_method_signature": "ImgscalrImageManipulator.getImageWriteparams(String extension)", "testcase": false, "constructor": false}, {"identifier": "isJpeg", "parameters": "(String extension)", "modifiers": "private", "return": "boolean", "signature": "boolean isJpeg(String extension)", "full_signature": "private boolean isJpeg(String extension)", "class_method_signature": "ImgscalrImageManipulator.isJpeg(String extension)", "testcase": false, "constructor": false}, {"identifier": "calculateDominantColor", "parameters": "(BufferedImage image)", "modifiers": "@Override public", "return": "int[]", "signature": "int[] calculateDominantColor(BufferedImage image)", "full_signature": "@Override public int[] calculateDominantColor(BufferedImage image)", "class_method_signature": "ImgscalrImageManipulator.calculateDominantColor(BufferedImage image)", "testcase": false, "constructor": false}, {"identifier": "getMetadata", "parameters": "(InputStream ins)", "modifiers": "@Override public", "return": "Single<Map<String, String>>", "signature": "Single<Map<String, String>> getMetadata(InputStream ins)", "full_signature": "@Override public Single<Map<String, String>> getMetadata(InputStream ins)", "class_method_signature": "ImgscalrImageManipulator.getMetadata(InputStream ins)", "testcase": false, "constructor": false}], "file": "services/image-imgscalr/src/main/java/com/gentics/mesh/image/ImgscalrImageManipulator.java"}, "focal_method": {"identifier": "cropAndResize", "parameters": "(BufferedImage image, ImageManipulationParameters parameters)", "modifiers": "protected", "return": "BufferedImage", "body": "protected BufferedImage cropAndResize(BufferedImage image, ImageManipulationParameters parameters) {\n\t\tCropMode cropMode = parameters.getCropMode();\n\t\tboolean omitResize = false;\n\t\tif (cropMode != null) {\n\t\t\tswitch (cropMode) {\n\t\t\t\tcase RECT:\n\t\t\t\t\timage = crop(image, parameters.getRect());\n\t\t\t\t\tbreak;\n\t\t\t\tcase FOCALPOINT:\n\t\t\t\t\timage = focalPointModifier.apply(image, parameters);\n\t\t\t\t\t// We don't need to resize the image again. The dimensions already match up with the target dimension\n\t\t\t\t\tomitResize = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!omitResize) {\n\t\t\timage = resizeIfRequested(image, parameters);\n\t\t}\n\n\t\treturn image;\n\t}", "signature": "BufferedImage cropAndResize(BufferedImage image, ImageManipulationParameters parameters)", "full_signature": "protected BufferedImage cropAndResize(BufferedImage image, ImageManipulationParameters parameters)", "class_method_signature": "ImgscalrImageManipulator.cropAndResize(BufferedImage image, ImageManipulationParameters parameters)", "testcase": false, "constructor": false, "invocations": ["getCropMode", "crop", "getRect", "apply", "resizeIfRequested"]}, "repository": {"repo_id": 67999496, "url": "https://github.com/gentics/mesh", "stars": 412, "created": "9/12/2016 10:28:41 AM +00:00", "updates": "2020-01-27T10:25:42+00:00", "fork": "False", "license": "licensed"}}