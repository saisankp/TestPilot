{"test_class": {"identifier": "LdapCustomAuthenticationProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String USERNAME = \"username\";", "modifier": "private static final", "type": "String", "declarator": "USERNAME = \"username\"", "var_name": "USERNAME"}, {"original_string": "private static final String PASSWORD = \"password\";", "modifier": "private static final", "type": "String", "declarator": "PASSWORD = \"password\"", "var_name": "PASSWORD"}, {"original_string": "private static final int ID = 1;", "modifier": "private static final", "type": "int", "declarator": "ID = 1", "var_name": "ID"}, {"original_string": "private LdapCustomAuthenticationProvider sut;", "modifier": "private", "type": "LdapCustomAuthenticationProvider", "declarator": "sut", "var_name": "sut"}, {"original_string": "private UserDetailsService userDetailsService = mock(UserDetailsService.class);", "modifier": "private", "type": "UserDetailsService", "declarator": "userDetailsService = mock(UserDetailsService.class)", "var_name": "userDetailsService"}, {"original_string": "private LdapUserDetails ldapUserDetails = mock(LdapUserDetails.class);", "modifier": "private", "type": "LdapUserDetails", "declarator": "ldapUserDetails = mock(LdapUserDetails.class)", "var_name": "ldapUserDetails"}, {"original_string": "private LdapAuthenticator authenticator = mock(LdapAuthenticator.class);", "modifier": "private", "type": "LdapAuthenticator", "declarator": "authenticator = mock(LdapAuthenticator.class)", "var_name": "authenticator"}, {"original_string": "private LdapAuthoritiesPopulator ldapAuthoritiesPopulator = mock(LdapAuthoritiesPopulator.class);", "modifier": "private", "type": "LdapAuthoritiesPopulator", "declarator": "ldapAuthoritiesPopulator = mock(LdapAuthoritiesPopulator.class)", "var_name": "ldapAuthoritiesPopulator"}], "file": "tntconcept-core/src/test/java/com/autentia/tnt/manager/security/LdapCustomAuthenticationProviderTest.java"}, "test_case": {"identifier": "shouldSetExpiredPasswordWhenPwdGraceUseTimeIsActive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSetExpiredPasswordWhenPwdGraceUseTimeIsActive(){\n\n        Attribute pwdGraceUseTime = new BasicAttribute(\"pwdGraceUseTime\");\n        Attributes attributes = new BasicAttributes();\n        attributes.put(pwdGraceUseTime);\n        when(ldapUserDetails.getAttributes()).thenReturn(attributes);\n\n        User userForTest = getUserForTest();\n        Boolean passExpired = sut.checkExpiredPassword(ldapUserDetails.getAttributes());\n        userForTest.setPasswordExpired(passExpired);\n        assertThat(passExpired ,is(true));\n\n    }", "signature": "void shouldSetExpiredPasswordWhenPwdGraceUseTimeIsActive()", "full_signature": "@Test public void shouldSetExpiredPasswordWhenPwdGraceUseTimeIsActive()", "class_method_signature": "LdapCustomAuthenticationProviderTest.shouldSetExpiredPasswordWhenPwdGraceUseTimeIsActive()", "testcase": true, "constructor": false, "invocations": ["put", "thenReturn", "when", "getAttributes", "getUserForTest", "checkExpiredPassword", "getAttributes", "setPasswordExpired", "assertThat", "is"]}, "focal_class": {"identifier": "LdapCustomAuthenticationProvider", "superclass": "extends LdapAuthenticationProvider", "interfaces": "", "fields": [{"original_string": "private UserDetailsService userDetailsService;", "modifier": "private", "type": "UserDetailsService", "declarator": "userDetailsService", "var_name": "userDetailsService"}, {"original_string": "private static final Log log = LogFactory.getLog(LdapCustomAuthenticationProvider.class);", "modifier": "private static final", "type": "Log", "declarator": "log = LogFactory.getLog(LdapCustomAuthenticationProvider.class)", "var_name": "log"}], "methods": [{"identifier": "LdapCustomAuthenticationProvider", "parameters": "(LdapAuthenticator authenticator,\n                                            LdapAuthoritiesPopulator authoritiesPopulator)", "modifiers": "public", "return": "", "signature": " LdapCustomAuthenticationProvider(LdapAuthenticator authenticator,\n                                            LdapAuthoritiesPopulator authoritiesPopulator)", "full_signature": "public  LdapCustomAuthenticationProvider(LdapAuthenticator authenticator,\n                                            LdapAuthoritiesPopulator authoritiesPopulator)", "class_method_signature": "LdapCustomAuthenticationProvider.LdapCustomAuthenticationProvider(LdapAuthenticator authenticator,\n                                            LdapAuthoritiesPopulator authoritiesPopulator)", "testcase": false, "constructor": true}, {"identifier": "setUserDetailsService", "parameters": "(UserDetailsService userDetailsService)", "modifiers": "public", "return": "void", "signature": "void setUserDetailsService(UserDetailsService userDetailsService)", "full_signature": "public void setUserDetailsService(UserDetailsService userDetailsService)", "class_method_signature": "LdapCustomAuthenticationProvider.setUserDetailsService(UserDetailsService userDetailsService)", "testcase": false, "constructor": false}, {"identifier": "createUserDetails", "parameters": "(LdapUserDetails ldapUser, String username, String password)", "modifiers": "@Override protected", "return": "UserDetails", "signature": "UserDetails createUserDetails(LdapUserDetails ldapUser, String username, String password)", "full_signature": "@Override protected UserDetails createUserDetails(LdapUserDetails ldapUser, String username, String password)", "class_method_signature": "LdapCustomAuthenticationProvider.createUserDetails(LdapUserDetails ldapUser, String username, String password)", "testcase": false, "constructor": false}, {"identifier": "mergeUsers", "parameters": "(LdapUserDetails ldapUser, Principal principalFromDB, String password)", "modifiers": "protected", "return": "Principal", "signature": "Principal mergeUsers(LdapUserDetails ldapUser, Principal principalFromDB, String password)", "full_signature": "protected Principal mergeUsers(LdapUserDetails ldapUser, Principal principalFromDB, String password)", "class_method_signature": "LdapCustomAuthenticationProvider.mergeUsers(LdapUserDetails ldapUser, Principal principalFromDB, String password)", "testcase": false, "constructor": false}, {"identifier": "checkExpiredPassword", "parameters": "(Attributes attributes)", "modifiers": "protected", "return": "Boolean", "signature": "Boolean checkExpiredPassword(Attributes attributes)", "full_signature": "protected Boolean checkExpiredPassword(Attributes attributes)", "class_method_signature": "LdapCustomAuthenticationProvider.checkExpiredPassword(Attributes attributes)", "testcase": false, "constructor": false}, {"identifier": "checkResetPassword", "parameters": "(Attributes attributes)", "modifiers": "protected", "return": "Boolean", "signature": "Boolean checkResetPassword(Attributes attributes)", "full_signature": "protected Boolean checkResetPassword(Attributes attributes)", "class_method_signature": "LdapCustomAuthenticationProvider.checkResetPassword(Attributes attributes)", "testcase": false, "constructor": false}, {"identifier": "retrieveUser", "parameters": "(String username, UsernamePasswordAuthenticationToken authentication)", "modifiers": "@Override protected", "return": "UserDetails", "signature": "UserDetails retrieveUser(String username, UsernamePasswordAuthenticationToken authentication)", "full_signature": "@Override protected UserDetails retrieveUser(String username, UsernamePasswordAuthenticationToken authentication)", "class_method_signature": "LdapCustomAuthenticationProvider.retrieveUser(String username, UsernamePasswordAuthenticationToken authentication)", "testcase": false, "constructor": false}], "file": "tntconcept-core/src/main/java/com/autentia/tnt/manager/security/LdapCustomAuthenticationProvider.java"}, "focal_method": {"identifier": "checkExpiredPassword", "parameters": "(Attributes attributes)", "modifiers": "protected", "return": "Boolean", "body": "protected Boolean checkExpiredPassword(Attributes attributes) {\n\n        return attributes.get(LdapAttributes.PWD_GRACE_LOGIN) != null;\n\n    }", "signature": "Boolean checkExpiredPassword(Attributes attributes)", "full_signature": "protected Boolean checkExpiredPassword(Attributes attributes)", "class_method_signature": "LdapCustomAuthenticationProvider.checkExpiredPassword(Attributes attributes)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 2503314, "url": "https://github.com/autentia/TNTConcept", "stars": 11, "created": "10/3/2011 8:00:30 AM +00:00", "updates": "2020-01-24T12:30:31+00:00", "fork": "False", "license": "licensed"}}