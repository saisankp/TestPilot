{"test_class": {"identifier": "SerializedObserverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    Subscriber<String> observer;", "modifier": "@Mock", "type": "Subscriber<String>", "declarator": "observer", "var_name": "observer"}], "file": "zava/src/test/java/rx/observers/SerializedObserverTest.java"}, "test_case": {"identifier": "testThreadStarvation", "parameters": "()", "modifiers": "@Ignore @Test public", "return": "void", "body": "@Ignore\n    @Test\n    public void testThreadStarvation() throws InterruptedException {\n\n        TestSubscriber<String> to = new TestSubscriber<String>(new Observer<String>() {\n\n            @Override\n            public void onCompleted() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String t) {\n                // force it to take time when delivering\n                try {\n                    Thread.sleep(1);\n                } catch (InterruptedException e) {\n                }\n            }\n\n        });\n        Observer<String> o = serializedObserver(to);\n\n        AtomicInteger p1 = new AtomicInteger();\n        AtomicInteger p2 = new AtomicInteger();\n\n        Subscription s1 = infinite(p1).subscribe(o);\n        Subscription s2 = infinite(p2).subscribe(o);\n\n        Thread.sleep(100);\n\n        System.out.println(\"p1: \" + p1.get() + \" p2: \" + p2.get() + \" => should be close to each other unless we have thread starvation\");\n        assertEquals(p1.get(), p2.get(), 10000); // fairly distributed within 10000 of each other\n\n        s1.unsubscribe();\n        s2.unsubscribe();\n    }", "signature": "void testThreadStarvation()", "full_signature": "@Ignore @Test public void testThreadStarvation()", "class_method_signature": "SerializedObserverTest.testThreadStarvation()", "testcase": true, "constructor": false, "invocations": ["sleep", "serializedObserver", "subscribe", "infinite", "subscribe", "infinite", "sleep", "println", "get", "get", "assertEquals", "get", "get", "unsubscribe", "unsubscribe"]}, "focal_class": {"identifier": "SerializedObserver", "superclass": "", "interfaces": "implements Observer<T>", "fields": [{"original_string": "private final Observer<? super T> actual;", "modifier": "private final", "type": "Observer<? super T>", "declarator": "actual", "var_name": "actual"}, {"original_string": "private boolean emitting = false;", "modifier": "private", "type": "boolean", "declarator": "emitting = false", "var_name": "emitting"}, {"original_string": "private boolean terminated = false;", "modifier": "private", "type": "boolean", "declarator": "terminated = false", "var_name": "terminated"}, {"original_string": "private FastList queue;", "modifier": "private", "type": "FastList", "declarator": "queue", "var_name": "queue"}, {"original_string": "private static final int MAX_DRAIN_ITERATION = Integer.MAX_VALUE;", "modifier": "private static final", "type": "int", "declarator": "MAX_DRAIN_ITERATION = Integer.MAX_VALUE", "var_name": "MAX_DRAIN_ITERATION"}, {"original_string": "private static final Object NULL_SENTINEL = new Object();", "modifier": "private static final", "type": "Object", "declarator": "NULL_SENTINEL = new Object()", "var_name": "NULL_SENTINEL"}, {"original_string": "private static final Object COMPLETE_SENTINEL = new Object();", "modifier": "private static final", "type": "Object", "declarator": "COMPLETE_SENTINEL = new Object()", "var_name": "COMPLETE_SENTINEL"}], "methods": [{"identifier": "SerializedObserver", "parameters": "(Observer<? super T> s)", "modifiers": "public", "return": "", "signature": " SerializedObserver(Observer<? super T> s)", "full_signature": "public  SerializedObserver(Observer<? super T> s)", "class_method_signature": "SerializedObserver.SerializedObserver(Observer<? super T> s)", "testcase": false, "constructor": true}, {"identifier": "onCompleted", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onCompleted()", "full_signature": "@Override public void onCompleted()", "class_method_signature": "SerializedObserver.onCompleted()", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(final Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void onError(final Throwable e)", "full_signature": "@Override public void onError(final Throwable e)", "class_method_signature": "SerializedObserver.onError(final Throwable e)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "SerializedObserver.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "drainQueue", "parameters": "(FastList list)", "modifiers": "", "return": "void", "signature": "void drainQueue(FastList list)", "full_signature": " void drainQueue(FastList list)", "class_method_signature": "SerializedObserver.drainQueue(FastList list)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/observers/SerializedObserver.java"}, "focal_method": {"identifier": "SerializedObserver", "parameters": "(Observer<? super T> s)", "modifiers": "public", "return": "", "body": "public SerializedObserver(Observer<? super T> s) {\n        this.actual = s;\n    }", "signature": " SerializedObserver(Observer<? super T> s)", "full_signature": "public  SerializedObserver(Observer<? super T> s)", "class_method_signature": "SerializedObserver.SerializedObserver(Observer<? super T> s)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}