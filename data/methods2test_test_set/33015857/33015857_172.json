{"test_class": {"identifier": "StringScannerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_STRING = \"[199984,1384795052823,\\\"/127.0.0.1:51706\\\",[\\\"abc123\\\",\\\"rickHigh\\\",\" +\n            \"\\\"217.0.0.1\\\",\\\"start\\\",1234567,12345678,\\\"abcsesson123\\\",\\\"asdfasdf\\\"]]\";", "modifier": "private static final", "type": "String", "declarator": "TEST_STRING = \"[199984,1384795052823,\\\"/127.0.0.1:51706\\\",[\\\"abc123\\\",\\\"rickHigh\\\",\" +\n            \"\\\"217.0.0.1\\\",\\\"start\\\",1234567,12345678,\\\"abcsesson123\\\",\\\"asdfasdf\\\"]]\"", "var_name": "TEST_STRING"}, {"original_string": "boolean ok = true;", "modifier": "", "type": "boolean", "declarator": "ok = true", "var_name": "ok"}], "file": "reflekt/src/test/java/io/advantageous/boon/core/StringScannerTest.java"}, "test_case": {"identifier": "testRemoveChars", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveChars() {\n\n        String testString = \"1_2 345 6    _____\\t\\t7\\t890\";\n\n        String after = StringScanner.removeChars ( testString, '_', ' ', '\\t' );\n        boolean ok =  \"1234567890\".equals (after ) || die( \"$\"+ after + \"$\");\n    }", "signature": "void testRemoveChars()", "full_signature": "@Test public void testRemoveChars()", "class_method_signature": "StringScannerTest.testRemoveChars()", "testcase": true, "constructor": false, "invocations": ["removeChars", "equals", "die"]}, "focal_class": {"identifier": "StringScanner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char[] WHITE_SPACE = new char[] {'\\n', '\\t', ' ', '\\r'};", "modifier": "private static final", "type": "char[]", "declarator": "WHITE_SPACE = new char[] {'\\n', '\\t', ' ', '\\r'}", "var_name": "WHITE_SPACE"}], "methods": [{"identifier": "isDigits", "parameters": "( String input )", "modifiers": "public static", "return": "boolean", "signature": "boolean isDigits( String input )", "full_signature": "public static boolean isDigits( String input )", "class_method_signature": "StringScanner.isDigits( String input )", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "( final String string,\n                                  final char split, final int limit )", "modifiers": "public static", "return": "String[]", "signature": "String[] split( final String string,\n                                  final char split, final int limit )", "full_signature": "public static String[] split( final String string,\n                                  final char split, final int limit )", "class_method_signature": "StringScanner.split( final String string,\n                                  final char split, final int limit )", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "( final String string,\n                                  final char split )", "modifiers": "public static", "return": "String[]", "signature": "String[] split( final String string,\n                                  final char split )", "full_signature": "public static String[] split( final String string,\n                                  final char split )", "class_method_signature": "StringScanner.split( final String string,\n                                  final char split )", "testcase": false, "constructor": false}, {"identifier": "splitByChars", "parameters": "( final String string,\n                                         final char... delimiters )", "modifiers": "public static", "return": "String[]", "signature": "String[] splitByChars( final String string,\n                                         final char... delimiters )", "full_signature": "public static String[] splitByChars( final String string,\n                                         final char... delimiters )", "class_method_signature": "StringScanner.splitByChars( final String string,\n                                         final char... delimiters )", "testcase": false, "constructor": false}, {"identifier": "splitByCharsFromToDelims", "parameters": "( final String string, int from, int to,\n                                         final char... delimiters )", "modifiers": "public static", "return": "String[]", "signature": "String[] splitByCharsFromToDelims( final String string, int from, int to,\n                                         final char... delimiters )", "full_signature": "public static String[] splitByCharsFromToDelims( final String string, int from, int to,\n                                         final char... delimiters )", "class_method_signature": "StringScanner.splitByCharsFromToDelims( final String string, int from, int to,\n                                         final char... delimiters )", "testcase": false, "constructor": false}, {"identifier": "splitByCharsFrom", "parameters": "( final String string, int from,\n                                                     final char... delimiters )", "modifiers": "public static", "return": "String[]", "signature": "String[] splitByCharsFrom( final String string, int from,\n                                                     final char... delimiters )", "full_signature": "public static String[] splitByCharsFrom( final String string, int from,\n                                                     final char... delimiters )", "class_method_signature": "StringScanner.splitByCharsFrom( final String string, int from,\n                                                     final char... delimiters )", "testcase": false, "constructor": false}, {"identifier": "splitByWhiteSpace", "parameters": "( final String string\n                                         )", "modifiers": "public static", "return": "String[]", "signature": "String[] splitByWhiteSpace( final String string\n                                         )", "full_signature": "public static String[] splitByWhiteSpace( final String string\n                                         )", "class_method_signature": "StringScanner.splitByWhiteSpace( final String string\n                                         )", "testcase": false, "constructor": false}, {"identifier": "splitByDelimiters", "parameters": "( final String string,\n                                              final String delimiters )", "modifiers": "public static", "return": "String[]", "signature": "String[] splitByDelimiters( final String string,\n                                              final String delimiters )", "full_signature": "public static String[] splitByDelimiters( final String string,\n                                              final String delimiters )", "class_method_signature": "StringScanner.splitByDelimiters( final String string,\n                                              final String delimiters )", "testcase": false, "constructor": false}, {"identifier": "splitByCharsNoneEmpty", "parameters": "( final String string, final char... delimiters )", "modifiers": "public static", "return": "String[]", "signature": "String[] splitByCharsNoneEmpty( final String string, final char... delimiters )", "full_signature": "public static String[] splitByCharsNoneEmpty( final String string, final char... delimiters )", "class_method_signature": "StringScanner.splitByCharsNoneEmpty( final String string, final char... delimiters )", "testcase": false, "constructor": false}, {"identifier": "removeChars", "parameters": "( final String string, final char... delimiters )", "modifiers": "public static", "return": "String", "signature": "String removeChars( final String string, final char... delimiters )", "full_signature": "public static String removeChars( final String string, final char... delimiters )", "class_method_signature": "StringScanner.removeChars( final String string, final char... delimiters )", "testcase": false, "constructor": false}, {"identifier": "splitByCharsNoneEmpty", "parameters": "( final String string, int start, int end, final char... delimiters )", "modifiers": "public static", "return": "String[]", "signature": "String[] splitByCharsNoneEmpty( final String string, int start, int end, final char... delimiters )", "full_signature": "public static String[] splitByCharsNoneEmpty( final String string, int start, int end, final char... delimiters )", "class_method_signature": "StringScanner.splitByCharsNoneEmpty( final String string, int start, int end, final char... delimiters )", "testcase": false, "constructor": false}, {"identifier": "parseFloat", "parameters": "( String buffer, int from, int to )", "modifiers": "public static", "return": "float", "signature": "float parseFloat( String buffer, int from, int to )", "full_signature": "public static float parseFloat( String buffer, int from, int to )", "class_method_signature": "StringScanner.parseFloat( String buffer, int from, int to )", "testcase": false, "constructor": false}, {"identifier": "parseFloat", "parameters": "( String buffer )", "modifiers": "public static", "return": "float", "signature": "float parseFloat( String buffer )", "full_signature": "public static float parseFloat( String buffer )", "class_method_signature": "StringScanner.parseFloat( String buffer )", "testcase": false, "constructor": false}, {"identifier": "parseDouble", "parameters": "( String buffer, int from, int to )", "modifiers": "public static", "return": "double", "signature": "double parseDouble( String buffer, int from, int to )", "full_signature": "public static double parseDouble( String buffer, int from, int to )", "class_method_signature": "StringScanner.parseDouble( String buffer, int from, int to )", "testcase": false, "constructor": false}, {"identifier": "parseDouble", "parameters": "( String buffer )", "modifiers": "public static", "return": "double", "signature": "double parseDouble( String buffer )", "full_signature": "public static double parseDouble( String buffer )", "class_method_signature": "StringScanner.parseDouble( String buffer )", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "( String buffer, int from, int to )", "modifiers": "public static", "return": "int", "signature": "int parseInt( String buffer, int from, int to )", "full_signature": "public static int parseInt( String buffer, int from, int to )", "class_method_signature": "StringScanner.parseInt( String buffer, int from, int to )", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "( String buffer )", "modifiers": "public static", "return": "int", "signature": "int parseInt( String buffer )", "full_signature": "public static int parseInt( String buffer )", "class_method_signature": "StringScanner.parseInt( String buffer )", "testcase": false, "constructor": false}, {"identifier": "parseLong", "parameters": "( String buffer, int from, int to )", "modifiers": "public static", "return": "long", "signature": "long parseLong( String buffer, int from, int to )", "full_signature": "public static long parseLong( String buffer, int from, int to )", "class_method_signature": "StringScanner.parseLong( String buffer, int from, int to )", "testcase": false, "constructor": false}, {"identifier": "parseLong", "parameters": "( String buffer )", "modifiers": "public static", "return": "long", "signature": "long parseLong( String buffer )", "full_signature": "public static long parseLong( String buffer )", "class_method_signature": "StringScanner.parseLong( String buffer )", "testcase": false, "constructor": false}, {"identifier": "parseShort", "parameters": "( String buffer, int from, int to )", "modifiers": "public static", "return": "short", "signature": "short parseShort( String buffer, int from, int to )", "full_signature": "public static short parseShort( String buffer, int from, int to )", "class_method_signature": "StringScanner.parseShort( String buffer, int from, int to )", "testcase": false, "constructor": false}, {"identifier": "parseShort", "parameters": "( String buffer )", "modifiers": "public static", "return": "short", "signature": "short parseShort( String buffer )", "full_signature": "public static short parseShort( String buffer )", "class_method_signature": "StringScanner.parseShort( String buffer )", "testcase": false, "constructor": false}, {"identifier": "parseByte", "parameters": "( String buffer, int from, int to )", "modifiers": "public static", "return": "short", "signature": "short parseByte( String buffer, int from, int to )", "full_signature": "public static short parseByte( String buffer, int from, int to )", "class_method_signature": "StringScanner.parseByte( String buffer, int from, int to )", "testcase": false, "constructor": false}, {"identifier": "parseByte", "parameters": "( String buffer )", "modifiers": "public static", "return": "short", "signature": "short parseByte( String buffer )", "full_signature": "public static short parseByte( String buffer )", "class_method_signature": "StringScanner.parseByte( String buffer )", "testcase": false, "constructor": false}, {"identifier": "findWhiteSpace", "parameters": "(String buffer)", "modifiers": "public static", "return": "int", "signature": "int findWhiteSpace(String buffer)", "full_signature": "public static int findWhiteSpace(String buffer)", "class_method_signature": "StringScanner.findWhiteSpace(String buffer)", "testcase": false, "constructor": false}, {"identifier": "substringAfter", "parameters": "(String string, String after)", "modifiers": "public static", "return": "String", "signature": "String substringAfter(String string, String after)", "full_signature": "public static String substringAfter(String string, String after)", "class_method_signature": "StringScanner.substringAfter(String string, String after)", "testcase": false, "constructor": false}, {"identifier": "findString", "parameters": "(String string, String after)", "modifiers": "private static", "return": "int", "signature": "int findString(String string, String after)", "full_signature": "private static int findString(String string, String after)", "class_method_signature": "StringScanner.findString(String string, String after)", "testcase": false, "constructor": false}, {"identifier": "substringBefore", "parameters": "(String string, String before)", "modifiers": "public static", "return": "String", "signature": "String substringBefore(String string, String before)", "full_signature": "public static String substringBefore(String string, String before)", "class_method_signature": "StringScanner.substringBefore(String string, String before)", "testcase": false, "constructor": false}], "file": "reflekt/src/main/java/io/advantageous/boon/core/StringScanner.java"}, "focal_method": {"identifier": "removeChars", "parameters": "( final String string, final char... delimiters )", "modifiers": "public static", "return": "String", "body": "public static String removeChars( final String string, final char... delimiters ) {\n        char[][] comps = CharScanner.splitByCharsNoneEmpty( FastStringUtils.toCharArray( string ), delimiters );\n        return new String(Chr.add(comps));\n    }", "signature": "String removeChars( final String string, final char... delimiters )", "full_signature": "public static String removeChars( final String string, final char... delimiters )", "class_method_signature": "StringScanner.removeChars( final String string, final char... delimiters )", "testcase": false, "constructor": false, "invocations": ["splitByCharsNoneEmpty", "toCharArray", "add"]}, "repository": {"repo_id": 33015857, "url": "https://github.com/advantageous/boon", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 18, "size": 6174, "license": "licensed"}}