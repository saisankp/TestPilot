{"test_class": {"identifier": "TargetCayenneServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DataSource ds1;", "modifier": "private", "type": "DataSource", "declarator": "ds1", "var_name": "ds1"}, {"original_string": "private DataSource ds2;", "modifier": "private", "type": "DataSource", "declarator": "ds2", "var_name": "ds2"}, {"original_string": "private TargetCayenneService cayenneService;", "modifier": "private", "type": "TargetCayenneService", "declarator": "cayenneService", "var_name": "cayenneService"}], "file": "link-move/src/test/java/com/nhl/link/move/runtime/cayenne/TargetCayenneServiceTest.java"}, "test_case": {"identifier": "testDataSources", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDataSources() {\n\t\tMap<String, DataSource> dss = cayenneService.dataSources();\n\t\tassertEquals(2, dss.size());\n\t\tassertSame(ds1, dss.get(\"dn1\"));\n\t\tassertSame(ds2, dss.get(\"dn2\"));\n\t}", "signature": "void testDataSources()", "full_signature": "@Test public void testDataSources()", "class_method_signature": "TargetCayenneServiceTest.testDataSources()", "testcase": true, "constructor": false, "invocations": ["dataSources", "assertEquals", "size", "assertSame", "get", "assertSame", "get"]}, "focal_class": {"identifier": "TargetCayenneService", "superclass": "", "interfaces": "implements ITargetCayenneService", "fields": [{"original_string": "private final ServerRuntime runtime;", "modifier": "private final", "type": "ServerRuntime", "declarator": "runtime", "var_name": "runtime"}], "methods": [{"identifier": "TargetCayenneService", "parameters": "(ServerRuntime runtime)", "modifiers": "public", "return": "", "signature": " TargetCayenneService(ServerRuntime runtime)", "full_signature": "public  TargetCayenneService(ServerRuntime runtime)", "class_method_signature": "TargetCayenneService.TargetCayenneService(ServerRuntime runtime)", "testcase": false, "constructor": true}, {"identifier": "dataSources", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, DataSource>", "signature": "Map<String, DataSource> dataSources()", "full_signature": "@Override public Map<String, DataSource> dataSources()", "class_method_signature": "TargetCayenneService.dataSources()", "testcase": false, "constructor": false}, {"identifier": "newContext", "parameters": "()", "modifiers": "@Override public", "return": "ObjectContext", "signature": "ObjectContext newContext()", "full_signature": "@Override public ObjectContext newContext()", "class_method_signature": "TargetCayenneService.newContext()", "testcase": false, "constructor": false}, {"identifier": "entityResolver", "parameters": "()", "modifiers": "@Override public", "return": "EntityResolver", "signature": "EntityResolver entityResolver()", "full_signature": "@Override public EntityResolver entityResolver()", "class_method_signature": "TargetCayenneService.entityResolver()", "testcase": false, "constructor": false}], "file": "link-move/src/main/java/com/nhl/link/move/runtime/cayenne/TargetCayenneService.java"}, "focal_method": {"identifier": "dataSources", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, DataSource>", "body": "@Override\n\tpublic Map<String, DataSource> dataSources() {\n\n\t\tMap<String, DataSource> dataSources = new HashMap<>();\n\n\t\tfor (DataNode n : runtime.getDataDomain().getDataNodes()) {\n\n\t\t\t// this method is used to seed a special kind of JdbcConnector.\n\t\t\t// But note that the DataSource here is attached to the DataNode\n\t\t\t// transaction, so reading source data will happen over the same\n\t\t\t// connection as writing target data. Hopefully such multiplexing\n\t\t\t// the connection works ok...\n\n\t\t\tdataSources.put(n.getName(), n.getDataSource());\n\t\t}\n\n\t\treturn dataSources;\n\t}", "signature": "Map<String, DataSource> dataSources()", "full_signature": "@Override public Map<String, DataSource> dataSources()", "class_method_signature": "TargetCayenneService.dataSources()", "testcase": false, "constructor": false, "invocations": ["getDataNodes", "getDataDomain", "put", "getName", "getDataSource"]}, "repository": {"repo_id": 22876447, "url": "https://github.com/nhl/link-move", "stars": 25, "created": "8/12/2014 12:27:10 PM +00:00", "updates": "2019-12-01T17:30:35+00:00", "fork": "False", "license": "licensed"}}