{"test_class": {"identifier": "ImportPrivateKeyPresenterTest", "superclass": "extends BaseTestCase", "interfaces": "", "fields": [{"original_string": "@Mock\n   private ImportPrivateKeyContract.View view;", "modifier": "@Mock\n   private", "type": "ImportPrivateKeyContract.View", "declarator": "view", "var_name": "view"}, {"original_string": "private ImportPrivateKeyPresenter presenter;", "modifier": "private", "type": "ImportPrivateKeyPresenter", "declarator": "presenter", "var_name": "presenter"}], "file": "wallet/src/test/java/com/platon/aton/component/ui/presenter/ImportPrivateKeyPresenterTest.java"}, "test_case": {"identifier": "parseQRCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseQRCode(){\n        String QRCode = \"541a6474dfccc0d36d88ef9269fbede85c35b3ec08d9a327ce488349fcd52888\";\n        presenter.parseQRCode(QRCode);\n        Mockito.verify(view).showQRCode(Mockito.anyString());\n    }", "signature": "void parseQRCode()", "full_signature": "@Test public void parseQRCode()", "class_method_signature": "ImportPrivateKeyPresenterTest.parseQRCode()", "testcase": true, "constructor": false, "invocations": ["parseQRCode", "showQRCode", "verify", "anyString"]}, "focal_class": {"identifier": "ImportPrivateKeyPresenter", "superclass": "extends BasePresenter<ImportPrivateKeyContract.View>", "interfaces": "implements ImportPrivateKeyContract.Presenter", "fields": [{"original_string": "private static final int MSG_OK = 1;", "modifier": "private static final", "type": "int", "declarator": "MSG_OK = 1", "var_name": "MSG_OK"}, {"original_string": "private static final int MSG_PASSWORD_FAILED = -1;", "modifier": "private static final", "type": "int", "declarator": "MSG_PASSWORD_FAILED = -1", "var_name": "MSG_PASSWORD_FAILED"}, {"original_string": "private static final int MSG_PRIVATEKEY_ERROR = -2;", "modifier": "private static final", "type": "int", "declarator": "MSG_PRIVATEKEY_ERROR = -2", "var_name": "MSG_PRIVATEKEY_ERROR"}, {"original_string": "private static final int MSG_WALLET_EXISTS = -3;", "modifier": "private static final", "type": "int", "declarator": "MSG_WALLET_EXISTS = -3", "var_name": "MSG_WALLET_EXISTS"}, {"original_string": "private Handler mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            super.handleMessage(msg);\n            switch (msg.what) {\n                case MSG_OK:\n                    EventPublisher.getInstance().sendWalletNumberChangeEvent();\n                    dismissLoadingDialogImmediately();\n                    MainActivity.actionStart(currentActivity());\n                    currentActivity().finish();\n                    break;\n                case MSG_PASSWORD_FAILED:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.validPasswordError));\n                    break;\n                case MSG_PRIVATEKEY_ERROR:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.parsedError, string(R.string.privateKey)));\n                    break;\n                case MSG_WALLET_EXISTS:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.walletExists));\n                    break;\n                default:\n                    break;\n            }\n        }\n    };", "modifier": "private", "type": "Handler", "declarator": "mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            super.handleMessage(msg);\n            switch (msg.what) {\n                case MSG_OK:\n                    EventPublisher.getInstance().sendWalletNumberChangeEvent();\n                    dismissLoadingDialogImmediately();\n                    MainActivity.actionStart(currentActivity());\n                    currentActivity().finish();\n                    break;\n                case MSG_PASSWORD_FAILED:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.validPasswordError));\n                    break;\n                case MSG_PRIVATEKEY_ERROR:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.parsedError, string(R.string.privateKey)));\n                    break;\n                case MSG_WALLET_EXISTS:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.walletExists));\n                    break;\n                default:\n                    break;\n            }\n        }\n    }", "var_name": "mHandler"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "ImportPrivateKeyPresenter.init()", "testcase": false, "constructor": false}, {"identifier": "checkPaste", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void checkPaste()", "full_signature": "@Override public void checkPaste()", "class_method_signature": "ImportPrivateKeyPresenter.checkPaste()", "testcase": false, "constructor": false}, {"identifier": "parseQRCode", "parameters": "(String QRCode)", "modifiers": "@Override public", "return": "void", "signature": "void parseQRCode(String QRCode)", "full_signature": "@Override public void parseQRCode(String QRCode)", "class_method_signature": "ImportPrivateKeyPresenter.parseQRCode(String QRCode)", "testcase": false, "constructor": false}, {"identifier": "importPrivateKey", "parameters": "(String privateKey, String name, String password, String repeatPassword)", "modifiers": "@Override public", "return": "void", "signature": "void importPrivateKey(String privateKey, String name, String password, String repeatPassword)", "full_signature": "@Override public void importPrivateKey(String privateKey, String name, String password, String repeatPassword)", "class_method_signature": "ImportPrivateKeyPresenter.importPrivateKey(String privateKey, String name, String password, String repeatPassword)", "testcase": false, "constructor": false}, {"identifier": "isExists", "parameters": "(String walletName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isExists(String walletName)", "full_signature": "@Override public boolean isExists(String walletName)", "class_method_signature": "ImportPrivateKeyPresenter.isExists(String walletName)", "testcase": false, "constructor": false}, {"identifier": "loadDBWalletNumber", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void loadDBWalletNumber()", "full_signature": "@Override public void loadDBWalletNumber()", "class_method_signature": "ImportPrivateKeyPresenter.loadDBWalletNumber()", "testcase": false, "constructor": false}], "file": "wallet/src/main/java/com/platon/aton/component/ui/presenter/ImportPrivateKeyPresenter.java"}, "focal_method": {"identifier": "parseQRCode", "parameters": "(String QRCode)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void parseQRCode(String QRCode) {\n        getView().showQRCode(QRCode);\n    }", "signature": "void parseQRCode(String QRCode)", "full_signature": "@Override public void parseQRCode(String QRCode)", "class_method_signature": "ImportPrivateKeyPresenter.parseQRCode(String QRCode)", "testcase": false, "constructor": false, "invocations": ["showQRCode", "getView"]}, "repository": {"repo_id": 166324888, "url": "https://github.com/PlatONnetwork/ATON-Android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 118901, "license": "licensed"}}