{"test_class": {"identifier": "MongoUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ServerAddress address;", "modifier": "private", "type": "ServerAddress", "declarator": "address", "var_name": "address"}, {"original_string": "private List<ServerAddress> addresses = new ArrayList<>();", "modifier": "private", "type": "List<ServerAddress>", "declarator": "addresses = new ArrayList<>()", "var_name": "addresses"}], "file": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/MongoUtilTest.java"}, "test_case": {"identifier": "shouldParseServerAddressesWithoutPort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldParseServerAddressesWithoutPort() {\n        addresses = MongoUtil.parseAddresses(\"host1,host2,[::1/128],host4\");\n        assertThat(addresses.size()).isEqualTo(4);\n        assertThat(addresses.get(0).getHost()).isEqualTo(\"host1\");\n        assertThat(addresses.get(0).getPort()).isEqualTo(ServerAddress.defaultPort());\n        assertThat(addresses.get(1).getHost()).isEqualTo(\"host2\");\n        assertThat(addresses.get(1).getPort()).isEqualTo(ServerAddress.defaultPort());\n        assertThat(addresses.get(2).getHost()).isEqualTo(\"::1/128\");\n        assertThat(addresses.get(2).getPort()).isEqualTo(ServerAddress.defaultPort());\n        assertThat(addresses.get(3).getHost()).isEqualTo(\"host4\");\n        assertThat(addresses.get(3).getPort()).isEqualTo(ServerAddress.defaultPort());\n    }", "signature": "void shouldParseServerAddressesWithoutPort()", "full_signature": "@Test public void shouldParseServerAddressesWithoutPort()", "class_method_signature": "MongoUtilTest.shouldParseServerAddressesWithoutPort()", "testcase": true, "constructor": false, "invocations": ["parseAddresses", "isEqualTo", "assertThat", "size", "isEqualTo", "assertThat", "getHost", "get", "isEqualTo", "assertThat", "getPort", "get", "defaultPort", "isEqualTo", "assertThat", "getHost", "get", "isEqualTo", "assertThat", "getPort", "get", "defaultPort", "isEqualTo", "assertThat", "getHost", "get", "isEqualTo", "assertThat", "getPort", "get", "defaultPort", "isEqualTo", "assertThat", "getHost", "get", "isEqualTo", "assertThat", "getPort", "get", "defaultPort"]}, "focal_class": {"identifier": "MongoUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ADDRESS_DELIMITER = \",\";", "modifier": "private static final", "type": "String", "declarator": "ADDRESS_DELIMITER = \",\"", "var_name": "ADDRESS_DELIMITER"}, {"original_string": "public static final Pattern ADDRESS_DELIMITER_PATTERN = Pattern.compile(ADDRESS_DELIMITER);", "modifier": "public static final", "type": "Pattern", "declarator": "ADDRESS_DELIMITER_PATTERN = Pattern.compile(ADDRESS_DELIMITER)", "var_name": "ADDRESS_DELIMITER_PATTERN"}, {"original_string": "private static final Pattern ADDRESS_PATTERN = Pattern.compile(\"([^:]+)(:(\\\\d+))?\");", "modifier": "private static final", "type": "Pattern", "declarator": "ADDRESS_PATTERN = Pattern.compile(\"([^:]+)(:(\\\\d+))?\")", "var_name": "ADDRESS_PATTERN"}, {"original_string": "private static final Pattern IPV6_ADDRESS_PATTERN = Pattern.compile(\"(\\\\[[^]]+\\\\])(:(\\\\d+))?\");", "modifier": "private static final", "type": "Pattern", "declarator": "IPV6_ADDRESS_PATTERN = Pattern.compile(\"(\\\\[[^]]+\\\\])(:(\\\\d+))?\")", "var_name": "IPV6_ADDRESS_PATTERN"}], "methods": [{"identifier": "replicaSetUsedIn", "parameters": "(String addresses)", "modifiers": "public static", "return": "String", "signature": "String replicaSetUsedIn(String addresses)", "full_signature": "public static String replicaSetUsedIn(String addresses)", "class_method_signature": "MongoUtil.replicaSetUsedIn(String addresses)", "testcase": false, "constructor": false}, {"identifier": "forEachDatabaseName", "parameters": "(MongoClient client, Consumer<String> operation)", "modifiers": "public static", "return": "void", "signature": "void forEachDatabaseName(MongoClient client, Consumer<String> operation)", "full_signature": "public static void forEachDatabaseName(MongoClient client, Consumer<String> operation)", "class_method_signature": "MongoUtil.forEachDatabaseName(MongoClient client, Consumer<String> operation)", "testcase": false, "constructor": false}, {"identifier": "forEachCollectionNameInDatabase", "parameters": "(MongoClient client, String databaseName, Consumer<String> operation)", "modifiers": "public static", "return": "void", "signature": "void forEachCollectionNameInDatabase(MongoClient client, String databaseName, Consumer<String> operation)", "full_signature": "public static void forEachCollectionNameInDatabase(MongoClient client, String databaseName, Consumer<String> operation)", "class_method_signature": "MongoUtil.forEachCollectionNameInDatabase(MongoClient client, String databaseName, Consumer<String> operation)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(MongoIterable<T> iterable, Consumer<T> operation)", "modifiers": "public static", "return": "void", "signature": "void forEach(MongoIterable<T> iterable, Consumer<T> operation)", "full_signature": "public static void forEach(MongoIterable<T> iterable, Consumer<T> operation)", "class_method_signature": "MongoUtil.forEach(MongoIterable<T> iterable, Consumer<T> operation)", "testcase": false, "constructor": false}, {"identifier": "onDatabase", "parameters": "(MongoClient client, String dbName, Consumer<MongoDatabase> dbOperation)", "modifiers": "public static", "return": "void", "signature": "void onDatabase(MongoClient client, String dbName, Consumer<MongoDatabase> dbOperation)", "full_signature": "public static void onDatabase(MongoClient client, String dbName, Consumer<MongoDatabase> dbOperation)", "class_method_signature": "MongoUtil.onDatabase(MongoClient client, String dbName, Consumer<MongoDatabase> dbOperation)", "testcase": false, "constructor": false}, {"identifier": "onCollection", "parameters": "(MongoClient client, String dbName, String collectionName,\n                                    Consumer<MongoCollection<Document>> collectionOperation)", "modifiers": "public static", "return": "void", "signature": "void onCollection(MongoClient client, String dbName, String collectionName,\n                                    Consumer<MongoCollection<Document>> collectionOperation)", "full_signature": "public static void onCollection(MongoClient client, String dbName, String collectionName,\n                                    Consumer<MongoCollection<Document>> collectionOperation)", "class_method_signature": "MongoUtil.onCollection(MongoClient client, String dbName, String collectionName,\n                                    Consumer<MongoCollection<Document>> collectionOperation)", "testcase": false, "constructor": false}, {"identifier": "onCollectionDocuments", "parameters": "(MongoClient client, String dbName, String collectionName,\n                                             BlockingConsumer<Document> documentOperation)", "modifiers": "public static", "return": "void", "signature": "void onCollectionDocuments(MongoClient client, String dbName, String collectionName,\n                                             BlockingConsumer<Document> documentOperation)", "full_signature": "public static void onCollectionDocuments(MongoClient client, String dbName, String collectionName,\n                                             BlockingConsumer<Document> documentOperation)", "class_method_signature": "MongoUtil.onCollectionDocuments(MongoClient client, String dbName, String collectionName,\n                                             BlockingConsumer<Document> documentOperation)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(MongoIterable<String> iterable, String match)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(MongoIterable<String> iterable, String match)", "full_signature": "public static boolean contains(MongoIterable<String> iterable, String match)", "class_method_signature": "MongoUtil.contains(MongoIterable<String> iterable, String match)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(MongoIterable<T> iterable, Predicate<T> matcher)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(MongoIterable<T> iterable, Predicate<T> matcher)", "full_signature": "public static boolean contains(MongoIterable<T> iterable, Predicate<T> matcher)", "class_method_signature": "MongoUtil.contains(MongoIterable<T> iterable, Predicate<T> matcher)", "testcase": false, "constructor": false}, {"identifier": "parseAddress", "parameters": "(String addressStr)", "modifiers": "public static", "return": "ServerAddress", "signature": "ServerAddress parseAddress(String addressStr)", "full_signature": "public static ServerAddress parseAddress(String addressStr)", "class_method_signature": "MongoUtil.parseAddress(String addressStr)", "testcase": false, "constructor": false}, {"identifier": "getOplogSessionTransactionId", "parameters": "(Document oplogEvent)", "modifiers": "public static", "return": "String", "signature": "String getOplogSessionTransactionId(Document oplogEvent)", "full_signature": "public static String getOplogSessionTransactionId(Document oplogEvent)", "class_method_signature": "MongoUtil.getOplogSessionTransactionId(Document oplogEvent)", "testcase": false, "constructor": false}, {"identifier": "parseAddresses", "parameters": "(String addressStr)", "modifiers": "protected static", "return": "List<ServerAddress>", "signature": "List<ServerAddress> parseAddresses(String addressStr)", "full_signature": "protected static List<ServerAddress> parseAddresses(String addressStr)", "class_method_signature": "MongoUtil.parseAddresses(String addressStr)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(ServerAddress address)", "modifiers": "protected static", "return": "String", "signature": "String toString(ServerAddress address)", "full_signature": "protected static String toString(ServerAddress address)", "class_method_signature": "MongoUtil.toString(ServerAddress address)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(List<ServerAddress> addresses)", "modifiers": "protected static", "return": "String", "signature": "String toString(List<ServerAddress> addresses)", "full_signature": "protected static String toString(List<ServerAddress> addresses)", "class_method_signature": "MongoUtil.toString(List<ServerAddress> addresses)", "testcase": false, "constructor": false}, {"identifier": "MongoUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " MongoUtil()", "full_signature": "private  MongoUtil()", "class_method_signature": "MongoUtil.MongoUtil()", "testcase": false, "constructor": true}], "file": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoUtil.java"}, "focal_method": {"identifier": "parseAddresses", "parameters": "(String addressStr)", "modifiers": "protected static", "return": "List<ServerAddress>", "body": "protected static List<ServerAddress> parseAddresses(String addressStr) {\n        List<ServerAddress> addresses = new ArrayList<>();\n        if (addressStr != null) {\n            addressStr = addressStr.trim();\n            for (String address : ADDRESS_DELIMITER_PATTERN.split(addressStr)) {\n                String hostAndPort = null;\n                if (address.startsWith(\"[\")) {\n                    // Definitely an IPv6 address without a replica set name ...\n                    hostAndPort = address;\n                }\n                else {\n                    // May start with replica set name ...\n                    int index = address.indexOf(\"/[\");\n                    if (index >= 0) {\n                        if ((index + 2) < address.length()) {\n                            // replica set name with IPv6, so use just the IPv6 address ...\n                            hostAndPort = address.substring(index + 1);\n                        }\n                        else {\n                            // replica set name with just opening bracket; this is invalid, so we'll ignore ...\n                            continue;\n                        }\n                    }\n                    else {\n                        // possible replica set name with IPv4 only\n                        index = address.indexOf(\"/\");\n                        if (index >= 0) {\n                            if ((index + 1) < address.length()) {\n                                // replica set name with IPv4, so use just the IPv4 address ...\n                                hostAndPort = address.substring(index + 1);\n                            }\n                            else {\n                                // replica set name with no address ...\n                                hostAndPort = ServerAddress.defaultHost();\n                            }\n                        }\n                        else {\n                            // No replica set name with IPv4, so use the whole address ...\n                            hostAndPort = address;\n                        }\n                    }\n                }\n                ServerAddress newAddress = parseAddress(hostAndPort);\n                if (newAddress != null) {\n                    addresses.add(newAddress);\n                }\n            }\n        }\n        return addresses;\n    }", "signature": "List<ServerAddress> parseAddresses(String addressStr)", "full_signature": "protected static List<ServerAddress> parseAddresses(String addressStr)", "class_method_signature": "MongoUtil.parseAddresses(String addressStr)", "testcase": false, "constructor": false, "invocations": ["trim", "split", "startsWith", "indexOf", "length", "substring", "indexOf", "length", "substring", "defaultHost", "parseAddress", "add"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}