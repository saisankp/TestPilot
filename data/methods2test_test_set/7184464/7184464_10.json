{"test_class": {"identifier": "XmppAppenderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SEND_TO = \"user_to@host.com\";", "modifier": "private static final", "type": "String", "declarator": "SEND_TO = \"user_to@host.com\"", "var_name": "SEND_TO"}, {"original_string": "private XmppAppender<Object> appender;", "modifier": "private", "type": "XmppAppender<Object>", "declarator": "appender", "var_name": "appender"}, {"original_string": "@Mock\n    private XMPPConnection connection;", "modifier": "@Mock\n    private", "type": "XMPPConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock\n    private ChatManager chatManager;", "modifier": "@Mock\n    private", "type": "ChatManager", "declarator": "chatManager", "var_name": "chatManager"}, {"original_string": "@Mock\n    private Roster roster;", "modifier": "@Mock\n    private", "type": "Roster", "declarator": "roster", "var_name": "roster"}, {"original_string": "@Mock\n    private Chat chat;", "modifier": "@Mock\n    private", "type": "Chat", "declarator": "chat", "var_name": "chat"}], "file": "xmpp/src/test/java/ch/qos/logback/classic/net/XmppAppenderTest.java"}, "test_case": {"identifier": "testStart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStart() throws Exception {\n        Assert.assertFalse(appender.isStarted());\n        appender.start();\n        verify(roster).contains(SEND_TO);\n        verify(connection).connect();\n        Assert.assertTrue(appender.isStarted());\n    }", "signature": "void testStart()", "full_signature": "@Test public void testStart()", "class_method_signature": "XmppAppenderTest.testStart()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isStarted", "start", "contains", "verify", "connect", "verify", "assertTrue", "isStarted"]}, "focal_class": {"identifier": "XmppAppender", "superclass": "extends AppenderBase<E>", "interfaces": "", "fields": [{"original_string": "private ConnectionConfiguration connectionConfiguration;", "modifier": "private", "type": "ConnectionConfiguration", "declarator": "connectionConfiguration", "var_name": "connectionConfiguration"}, {"original_string": "private XMPPConnection conn;", "modifier": "private", "type": "XMPPConnection", "declarator": "conn", "var_name": "conn"}, {"original_string": "private String password;", "modifier": "private", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private String username;", "modifier": "private", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "private String resourceName = getClass().getSimpleName();", "modifier": "private", "type": "String", "declarator": "resourceName = getClass().getSimpleName()", "var_name": "resourceName"}, {"original_string": "private String sendToJid;", "modifier": "private", "type": "String", "declarator": "sendToJid", "var_name": "sendToJid"}, {"original_string": "private Chat chat;", "modifier": "private", "type": "Chat", "declarator": "chat", "var_name": "chat"}, {"original_string": "private int xmmpPort = 5222;", "modifier": "private", "type": "int", "declarator": "xmmpPort = 5222", "var_name": "xmmpPort"}, {"original_string": "private String xmmpServer;", "modifier": "private", "type": "String", "declarator": "xmmpServer", "var_name": "xmmpServer"}, {"original_string": "private Layout<E> layout = new EchoLayout<E>();", "modifier": "private", "type": "Layout<E>", "declarator": "layout = new EchoLayout<E>()", "var_name": "layout"}], "methods": [{"identifier": "setSendToJid", "parameters": "(String sendToJid)", "modifiers": "public", "return": "void", "signature": "void setSendToJid(String sendToJid)", "full_signature": "public void setSendToJid(String sendToJid)", "class_method_signature": "XmppAppender.setSendToJid(String sendToJid)", "testcase": false, "constructor": false}, {"identifier": "setLayout", "parameters": "(Layout<E> layout)", "modifiers": "public", "return": "void", "signature": "void setLayout(Layout<E> layout)", "full_signature": "public void setLayout(Layout<E> layout)", "class_method_signature": "XmppAppender.setLayout(Layout<E> layout)", "testcase": false, "constructor": false}, {"identifier": "setXmmpAccount", "parameters": "(String xmmpAccount)", "modifiers": "public", "return": "void", "signature": "void setXmmpAccount(String xmmpAccount)", "full_signature": "public void setXmmpAccount(String xmmpAccount)", "class_method_signature": "XmppAppender.setXmmpAccount(String xmmpAccount)", "testcase": false, "constructor": false}, {"identifier": "setUsername", "parameters": "(String username)", "modifiers": "public", "return": "void", "signature": "void setUsername(String username)", "full_signature": "public void setUsername(String username)", "class_method_signature": "XmppAppender.setUsername(String username)", "testcase": false, "constructor": false}, {"identifier": "setPassword", "parameters": "(String password)", "modifiers": "public", "return": "void", "signature": "void setPassword(String password)", "full_signature": "public void setPassword(String password)", "class_method_signature": "XmppAppender.setPassword(String password)", "testcase": false, "constructor": false}, {"identifier": "setResourceName", "parameters": "(String resourceName)", "modifiers": "public", "return": "void", "signature": "void setResourceName(String resourceName)", "full_signature": "public void setResourceName(String resourceName)", "class_method_signature": "XmppAppender.setResourceName(String resourceName)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "XmppAppender.stop()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "XmppAppender.start()", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(E event)", "modifiers": "@Override protected", "return": "void", "signature": "void append(E event)", "full_signature": "@Override protected void append(E event)", "class_method_signature": "XmppAppender.append(E event)", "testcase": false, "constructor": false}, {"identifier": "createXmppConnection", "parameters": "()", "modifiers": "", "return": "XMPPConnection", "signature": "XMPPConnection createXmppConnection()", "full_signature": " XMPPConnection createXmppConnection()", "class_method_signature": "XmppAppender.createXmppConnection()", "testcase": false, "constructor": false}, {"identifier": "xmmpConnect", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void xmmpConnect()", "full_signature": "private synchronized void xmmpConnect()", "class_method_signature": "XmppAppender.xmmpConnect()", "testcase": false, "constructor": false}, {"identifier": "formatLogMessage", "parameters": "(String logMessage)", "modifiers": "private", "return": "String", "signature": "String formatLogMessage(String logMessage)", "full_signature": "private String formatLogMessage(String logMessage)", "class_method_signature": "XmppAppender.formatLogMessage(String logMessage)", "testcase": false, "constructor": false}], "file": "xmpp/src/main/java/ch/qos/logback/classic/net/XmppAppender.java"}, "focal_method": {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void start() {\n        Roster.setDefaultSubscriptionMode(Roster.SubscriptionMode.accept_all);\n        connectionConfiguration = new ConnectionConfiguration(xmmpServer, xmmpPort);\n        xmmpConnect();\n        super.start();\n    }", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "XmppAppender.start()", "testcase": false, "constructor": false, "invocations": ["setDefaultSubscriptionMode", "xmmpConnect", "start"]}, "repository": {"repo_id": 7184464, "url": "https://github.com/qos-ch/logback-contrib", "language": "Java", "is_fork": false, "fork_count": 39, "stargazer_count": 32, "size": 301, "license": "licensed"}}