{"test_class": {"identifier": "AbstractQueryTranslatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String property = \"propertyName\";", "modifier": "private final", "type": "String", "declarator": "property = \"propertyName\"", "var_name": "property"}, {"original_string": "private final String field = \"resolvedFieldName\";", "modifier": "private final", "type": "String", "declarator": "field = \"resolvedFieldName\"", "var_name": "field"}, {"original_string": "private final String testValue = \"test property value\";", "modifier": "private final", "type": "String", "declarator": "testValue = \"test property value\"", "var_name": "testValue"}, {"original_string": "private final Integer testFrom = 1;", "modifier": "private final", "type": "Integer", "declarator": "testFrom = 1", "var_name": "testFrom"}, {"original_string": "private final Integer testTo = 10;", "modifier": "private final", "type": "Integer", "declarator": "testTo = 10", "var_name": "testTo"}, {"original_string": "private final String[] testValues = { \"test\", \"value\", \"array\" };", "modifier": "private final", "type": "String[]", "declarator": "testValues = { \"test\", \"value\", \"array\" }", "var_name": "testValues"}, {"original_string": "private final double x = 1.0;", "modifier": "private final", "type": "double", "declarator": "x = 1.0", "var_name": "x"}, {"original_string": "private final double y = 2.0;", "modifier": "private final", "type": "double", "declarator": "y = 2.0", "var_name": "y"}, {"original_string": "private final double distance = 3.5;", "modifier": "private final", "type": "double", "declarator": "distance = 3.5", "var_name": "distance"}, {"original_string": "private final Class<Test> entityClass = Test.class;", "modifier": "private final", "type": "Class<Test>", "declarator": "entityClass = Test.class", "var_name": "entityClass"}, {"original_string": "private final PropertyResolver resolver = new PropertyResolver() {\n        @Override\n        public String resolve(String fieldName, Class<?> entityClass) {\n            return property.equals(fieldName) ? field : fieldName;\n        }\n    };", "modifier": "private final", "type": "PropertyResolver", "declarator": "resolver = new PropertyResolver() {\n        @Override\n        public String resolve(String fieldName, Class<?> entityClass) {\n            return property.equals(fieldName) ? field : fieldName;\n        }\n    }", "var_name": "resolver"}, {"original_string": "private final AbstractQueryTranslator<String, String, String> translator = new AbstractQueryTranslator<String, String, String>(\n            String.class, String.class, resolver) {\n\n        @Override\n        public String eq(String fieldName, Object value) {\n            return join(Operator.EQUAL, fieldName, value);\n        }\n\n        @Override\n        public String ne(String fieldName, Object value) {\n            return join(Operator.NOT_EQUAL, fieldName, value);\n        }\n\n        @Override\n        public String lt(String fieldName, Object value) {\n            return join(Operator.LESS_THAN, fieldName, value);\n        }\n\n        @Override\n        public String lte(String fieldName, Object value) {\n            return join(Operator.LESS_THAN_OR_EQUAL, fieldName, value);\n        }\n\n        @Override\n        public String gt(String fieldName, Object value) {\n            return join(Operator.GREATER_THAN, fieldName, value);\n        }\n\n        @Override\n        public String gte(String fieldName, Object value) {\n            return join(Operator.GREATER_THAN_OR_EQUAL, fieldName, value);\n        }\n\n        @Override\n        public String between(String fieldName, Object from, Object to) {\n            return join(Operator.BETWEEN, fieldName, from, to);\n        }\n\n        @Override\n        public String in(String fieldName, Object[] values) {\n            return join(Operator.IN, fieldName, values);\n        }\n\n        @Override\n        public String notIn(String fieldName, Object[] values) {\n            return join(Operator.NOT_IN, fieldName, values);\n        }\n\n        @Override\n        public String contains(String fieldName, Object[] values) {\n            return join(Operator.CONTAINS, fieldName, values);\n        }\n\n        @Override\n        public String isNull(String fieldName) {\n            return join(Operator.NULL, fieldName);\n        }\n\n        @Override\n        public String notNull(String fieldName) {\n            return join(Operator.NOT_NULL, fieldName);\n        }\n\n        @Override\n        public String isEmpty(String fieldName) {\n            return join(Operator.EMPTY, fieldName);\n        }\n\n        @Override\n        public String notEmpty(String fieldName) {\n            return join(Operator.NOT_EMPTY, fieldName);\n        }\n\n        @Override\n        public String and(String... subqueries) {\n            return Joiner.on(\" and \").join(subqueries);\n        }\n\n        @Override\n        public String or(String... subqueries) {\n            return Joiner.on(\" or \").join(subqueries);\n        }\n\n        @Override\n        public String order(String fieldName, Order o) {\n            return fieldName + \" \"\n                    + (Order.ASCENDING.equals(o) ? \"asc\" : \"desc\");\n        }\n\n        @Override\n        public String order(String... orders) {\n            return Joiner.on(\", \").join(orders);\n        }\n\n        @Override\n        public <N extends Number & Comparable<N>> String within(\n                String fieldName, Point<N> center, Number distance) {\n            return join(Operator.WITHIN, fieldName, center.getX(), center.getY(), distance);\n        }\n\n        @Override\n        public <T, R> String translateProjection(Query<T, R> query) {\n            return query.getReturnFields().size() > 0 ? join(query.getReturnFields()) : null;\n        }\n\n        @Override\n        protected <T> String translate(NativeExpression e, Class<T> entityClass) {\n            return e.getExpression().toString();\n        }\n    };", "modifier": "private final", "type": "AbstractQueryTranslator<String, String, String>", "declarator": "translator = new AbstractQueryTranslator<String, String, String>(\n            String.class, String.class, resolver) {\n\n        @Override\n        public String eq(String fieldName, Object value) {\n            return join(Operator.EQUAL, fieldName, value);\n        }\n\n        @Override\n        public String ne(String fieldName, Object value) {\n            return join(Operator.NOT_EQUAL, fieldName, value);\n        }\n\n        @Override\n        public String lt(String fieldName, Object value) {\n            return join(Operator.LESS_THAN, fieldName, value);\n        }\n\n        @Override\n        public String lte(String fieldName, Object value) {\n            return join(Operator.LESS_THAN_OR_EQUAL, fieldName, value);\n        }\n\n        @Override\n        public String gt(String fieldName, Object value) {\n            return join(Operator.GREATER_THAN, fieldName, value);\n        }\n\n        @Override\n        public String gte(String fieldName, Object value) {\n            return join(Operator.GREATER_THAN_OR_EQUAL, fieldName, value);\n        }\n\n        @Override\n        public String between(String fieldName, Object from, Object to) {\n            return join(Operator.BETWEEN, fieldName, from, to);\n        }\n\n        @Override\n        public String in(String fieldName, Object[] values) {\n            return join(Operator.IN, fieldName, values);\n        }\n\n        @Override\n        public String notIn(String fieldName, Object[] values) {\n            return join(Operator.NOT_IN, fieldName, values);\n        }\n\n        @Override\n        public String contains(String fieldName, Object[] values) {\n            return join(Operator.CONTAINS, fieldName, values);\n        }\n\n        @Override\n        public String isNull(String fieldName) {\n            return join(Operator.NULL, fieldName);\n        }\n\n        @Override\n        public String notNull(String fieldName) {\n            return join(Operator.NOT_NULL, fieldName);\n        }\n\n        @Override\n        public String isEmpty(String fieldName) {\n            return join(Operator.EMPTY, fieldName);\n        }\n\n        @Override\n        public String notEmpty(String fieldName) {\n            return join(Operator.NOT_EMPTY, fieldName);\n        }\n\n        @Override\n        public String and(String... subqueries) {\n            return Joiner.on(\" and \").join(subqueries);\n        }\n\n        @Override\n        public String or(String... subqueries) {\n            return Joiner.on(\" or \").join(subqueries);\n        }\n\n        @Override\n        public String order(String fieldName, Order o) {\n            return fieldName + \" \"\n                    + (Order.ASCENDING.equals(o) ? \"asc\" : \"desc\");\n        }\n\n        @Override\n        public String order(String... orders) {\n            return Joiner.on(\", \").join(orders);\n        }\n\n        @Override\n        public <N extends Number & Comparable<N>> String within(\n                String fieldName, Point<N> center, Number distance) {\n            return join(Operator.WITHIN, fieldName, center.getX(), center.getY(), distance);\n        }\n\n        @Override\n        public <T, R> String translateProjection(Query<T, R> query) {\n            return query.getReturnFields().size() > 0 ? join(query.getReturnFields()) : null;\n        }\n\n        @Override\n        protected <T> String translate(NativeExpression e, Class<T> entityClass) {\n            return e.getExpression().toString();\n        }\n    }", "var_name": "translator"}], "file": "seeking-core/src/test/java/com/eharmony/matching/seeking/translator/AbstractQueryTranslatorTest.java"}, "test_case": {"identifier": "translateOrdering_many", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void translateOrdering_many() {\n        Query<Test,Test> orderQuery = orderQuery(\n                Ordering.asc(\"property1\"),\n                Ordering.desc(\"property2\"),\n                Ordering.asc(\"property3\"),\n                Ordering.desc(\"property4\")\n            );\n        String expected = \"property1 asc, property2 desc, property3 asc, property4 desc\";\n        assertEquals(expected, translator.translateOrder(orderQuery));\n    }", "signature": "void translateOrdering_many()", "full_signature": "@Test public void translateOrdering_many()", "class_method_signature": "AbstractQueryTranslatorTest.translateOrdering_many()", "testcase": true, "constructor": false, "invocations": ["orderQuery", "asc", "desc", "asc", "desc", "assertEquals", "translateOrder"]}, "focal_class": {"identifier": "AbstractQueryTranslator", "superclass": "", "interfaces": "implements QueryTranslator<Q,O,P>", "fields": [{"original_string": "private final Class<Q> queryClass;", "modifier": "private final", "type": "Class<Q>", "declarator": "queryClass", "var_name": "queryClass"}, {"original_string": "private final Class<O> orderClass;", "modifier": "private final", "type": "Class<O>", "declarator": "orderClass", "var_name": "orderClass"}, {"original_string": "private final PropertyResolver propertyResolver;", "modifier": "private final", "type": "PropertyResolver", "declarator": "propertyResolver", "var_name": "propertyResolver"}], "methods": [{"identifier": "AbstractQueryTranslator", "parameters": "(Class<Q> queryClass,\n            Class<O> orderClass,\n            PropertyResolver propertyResolver)", "modifiers": "public", "return": "", "signature": " AbstractQueryTranslator(Class<Q> queryClass,\n            Class<O> orderClass,\n            PropertyResolver propertyResolver)", "full_signature": "public  AbstractQueryTranslator(Class<Q> queryClass,\n            Class<O> orderClass,\n            PropertyResolver propertyResolver)", "class_method_signature": "AbstractQueryTranslator.AbstractQueryTranslator(Class<Q> queryClass,\n            Class<O> orderClass,\n            PropertyResolver propertyResolver)", "testcase": false, "constructor": true}, {"identifier": "getQueryClass", "parameters": "()", "modifiers": "protected", "return": "Class<Q>", "signature": "Class<Q> getQueryClass()", "full_signature": "protected Class<Q> getQueryClass()", "class_method_signature": "AbstractQueryTranslator.getQueryClass()", "testcase": false, "constructor": false}, {"identifier": "getOrderClass", "parameters": "()", "modifiers": "protected", "return": "Class<O>", "signature": "Class<O> getOrderClass()", "full_signature": "protected Class<O> getOrderClass()", "class_method_signature": "AbstractQueryTranslator.getOrderClass()", "testcase": false, "constructor": false}, {"identifier": "getPropertyResolver", "parameters": "()", "modifiers": "protected", "return": "PropertyResolver", "signature": "PropertyResolver getPropertyResolver()", "full_signature": "protected PropertyResolver getPropertyResolver()", "class_method_signature": "AbstractQueryTranslator.getPropertyResolver()", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(Query<T,R> query)", "modifiers": "@Override public", "return": "Q", "signature": "Q translate(Query<T,R> query)", "full_signature": "@Override public Q translate(Query<T,R> query)", "class_method_signature": "AbstractQueryTranslator.translate(Query<T,R> query)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(Criterion c, Class<T> entityClass)", "modifiers": "protected", "return": "Q", "signature": "Q translate(Criterion c, Class<T> entityClass)", "full_signature": "protected Q translate(Criterion c, Class<T> entityClass)", "class_method_signature": "AbstractQueryTranslator.translate(Criterion c, Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(NativeExpression e, Class<T> entityClass)", "modifiers": "protected abstract", "return": "Q", "signature": "Q translate(NativeExpression e, Class<T> entityClass)", "full_signature": "protected abstract Q translate(NativeExpression e, Class<T> entityClass)", "class_method_signature": "AbstractQueryTranslator.translate(NativeExpression e, Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(Expression e,\n            Class<T> entityClass)", "modifiers": "protected", "return": "Q", "signature": "Q translate(Expression e,\n            Class<T> entityClass)", "full_signature": "protected Q translate(Expression e,\n            Class<T> entityClass)", "class_method_signature": "AbstractQueryTranslator.translate(Expression e,\n            Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(Junction j, Class<T> entityClass)", "modifiers": "protected", "return": "Q", "signature": "Q translate(Junction j, Class<T> entityClass)", "full_signature": "protected Q translate(Junction j, Class<T> entityClass)", "class_method_signature": "AbstractQueryTranslator.translate(Junction j, Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(Conjunction j, Class<T> entityClass)", "modifiers": "protected", "return": "Q", "signature": "Q translate(Conjunction j, Class<T> entityClass)", "full_signature": "protected Q translate(Conjunction j, Class<T> entityClass)", "class_method_signature": "AbstractQueryTranslator.translate(Conjunction j, Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(Disjunction j, Class<T> entityClass)", "modifiers": "protected", "return": "Q", "signature": "Q translate(Disjunction j, Class<T> entityClass)", "full_signature": "protected Q translate(Disjunction j, Class<T> entityClass)", "class_method_signature": "AbstractQueryTranslator.translate(Disjunction j, Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "subqueries", "parameters": "(Junction j, Class<T> entityClass)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "Q[]", "signature": "Q[] subqueries(Junction j, Class<T> entityClass)", "full_signature": "@SuppressWarnings(\"unchecked\") protected Q[] subqueries(Junction j, Class<T> entityClass)", "class_method_signature": "AbstractQueryTranslator.subqueries(Junction j, Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(EqualityExpression e, String fieldName)", "modifiers": "protected", "return": "Q", "signature": "Q translate(EqualityExpression e, String fieldName)", "full_signature": "protected Q translate(EqualityExpression e, String fieldName)", "class_method_signature": "AbstractQueryTranslator.translate(EqualityExpression e, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(RangeExpression e, String fieldName)", "modifiers": "protected", "return": "Q", "signature": "Q translate(RangeExpression e, String fieldName)", "full_signature": "protected Q translate(RangeExpression e, String fieldName)", "class_method_signature": "AbstractQueryTranslator.translate(RangeExpression e, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(SetExpression e, String fieldName)", "modifiers": "protected", "return": "Q", "signature": "Q translate(SetExpression e, String fieldName)", "full_signature": "protected Q translate(SetExpression e, String fieldName)", "class_method_signature": "AbstractQueryTranslator.translate(SetExpression e, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(UnaryExpression e, String fieldName)", "modifiers": "protected", "return": "Q", "signature": "Q translate(UnaryExpression e, String fieldName)", "full_signature": "protected Q translate(UnaryExpression e, String fieldName)", "class_method_signature": "AbstractQueryTranslator.translate(UnaryExpression e, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(\n            Distance2dExpression<N> e, Class<T> entityClass)", "modifiers": "protected", "return": "Q", "signature": "Q translate(\n            Distance2dExpression<N> e, Class<T> entityClass)", "full_signature": "protected Q translate(\n            Distance2dExpression<N> e, Class<T> entityClass)", "class_method_signature": "AbstractQueryTranslator.translate(\n            Distance2dExpression<N> e, Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "translateOrder", "parameters": "(Query<T, R> query)", "modifiers": "@Override public", "return": "O", "signature": "O translateOrder(Query<T, R> query)", "full_signature": "@Override public O translateOrder(Query<T, R> query)", "class_method_signature": "AbstractQueryTranslator.translateOrder(Query<T, R> query)", "testcase": false, "constructor": false}, {"identifier": "unsupported", "parameters": "(\n            Class<? extends Criterion> type)", "modifiers": "protected", "return": "UnsupportedOperationException", "signature": "UnsupportedOperationException unsupported(\n            Class<? extends Criterion> type)", "full_signature": "protected UnsupportedOperationException unsupported(\n            Class<? extends Criterion> type)", "class_method_signature": "AbstractQueryTranslator.unsupported(\n            Class<? extends Criterion> type)", "testcase": false, "constructor": false}, {"identifier": "unsupported", "parameters": "(Operator operator,\n            Class<? extends Expression> expressionType)", "modifiers": "protected", "return": "UnsupportedOperationException", "signature": "UnsupportedOperationException unsupported(Operator operator,\n            Class<? extends Expression> expressionType)", "full_signature": "protected UnsupportedOperationException unsupported(Operator operator,\n            Class<? extends Expression> expressionType)", "class_method_signature": "AbstractQueryTranslator.unsupported(Operator operator,\n            Class<? extends Expression> expressionType)", "testcase": false, "constructor": false}, {"identifier": "unsupported", "parameters": "(\n            NativeExpression e)", "modifiers": "protected", "return": "UnsupportedOperationException", "signature": "UnsupportedOperationException unsupported(\n            NativeExpression e)", "full_signature": "protected UnsupportedOperationException unsupported(\n            NativeExpression e)", "class_method_signature": "AbstractQueryTranslator.unsupported(\n            NativeExpression e)", "testcase": false, "constructor": false}, {"identifier": "eq", "parameters": "(String fieldName, Object value)", "modifiers": "public abstract", "return": "Q", "signature": "Q eq(String fieldName, Object value)", "full_signature": "public abstract Q eq(String fieldName, Object value)", "class_method_signature": "AbstractQueryTranslator.eq(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "ne", "parameters": "(String fieldName, Object value)", "modifiers": "public abstract", "return": "Q", "signature": "Q ne(String fieldName, Object value)", "full_signature": "public abstract Q ne(String fieldName, Object value)", "class_method_signature": "AbstractQueryTranslator.ne(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "lt", "parameters": "(String fieldName, Object value)", "modifiers": "public abstract", "return": "Q", "signature": "Q lt(String fieldName, Object value)", "full_signature": "public abstract Q lt(String fieldName, Object value)", "class_method_signature": "AbstractQueryTranslator.lt(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "lte", "parameters": "(String fieldName, Object value)", "modifiers": "public abstract", "return": "Q", "signature": "Q lte(String fieldName, Object value)", "full_signature": "public abstract Q lte(String fieldName, Object value)", "class_method_signature": "AbstractQueryTranslator.lte(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "gt", "parameters": "(String fieldName, Object value)", "modifiers": "public abstract", "return": "Q", "signature": "Q gt(String fieldName, Object value)", "full_signature": "public abstract Q gt(String fieldName, Object value)", "class_method_signature": "AbstractQueryTranslator.gt(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "gte", "parameters": "(String fieldName, Object value)", "modifiers": "public abstract", "return": "Q", "signature": "Q gte(String fieldName, Object value)", "full_signature": "public abstract Q gte(String fieldName, Object value)", "class_method_signature": "AbstractQueryTranslator.gte(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "between", "parameters": "(String fieldName, Object from, Object to)", "modifiers": "public abstract", "return": "Q", "signature": "Q between(String fieldName, Object from, Object to)", "full_signature": "public abstract Q between(String fieldName, Object from, Object to)", "class_method_signature": "AbstractQueryTranslator.between(String fieldName, Object from, Object to)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "(String fieldName, Object[] values)", "modifiers": "public abstract", "return": "Q", "signature": "Q in(String fieldName, Object[] values)", "full_signature": "public abstract Q in(String fieldName, Object[] values)", "class_method_signature": "AbstractQueryTranslator.in(String fieldName, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "notIn", "parameters": "(String fieldName, Object[] values)", "modifiers": "public abstract", "return": "Q", "signature": "Q notIn(String fieldName, Object[] values)", "full_signature": "public abstract Q notIn(String fieldName, Object[] values)", "class_method_signature": "AbstractQueryTranslator.notIn(String fieldName, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String fieldName, Object[] values)", "modifiers": "public abstract", "return": "Q", "signature": "Q contains(String fieldName, Object[] values)", "full_signature": "public abstract Q contains(String fieldName, Object[] values)", "class_method_signature": "AbstractQueryTranslator.contains(String fieldName, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "(String fieldName)", "modifiers": "public abstract", "return": "Q", "signature": "Q isNull(String fieldName)", "full_signature": "public abstract Q isNull(String fieldName)", "class_method_signature": "AbstractQueryTranslator.isNull(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "notNull", "parameters": "(String fieldName)", "modifiers": "public abstract", "return": "Q", "signature": "Q notNull(String fieldName)", "full_signature": "public abstract Q notNull(String fieldName)", "class_method_signature": "AbstractQueryTranslator.notNull(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String fieldName)", "modifiers": "public abstract", "return": "Q", "signature": "Q isEmpty(String fieldName)", "full_signature": "public abstract Q isEmpty(String fieldName)", "class_method_signature": "AbstractQueryTranslator.isEmpty(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(String fieldName)", "modifiers": "public abstract", "return": "Q", "signature": "Q notEmpty(String fieldName)", "full_signature": "public abstract Q notEmpty(String fieldName)", "class_method_signature": "AbstractQueryTranslator.notEmpty(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "within", "parameters": "(\n            String fieldName, Point<N> center, Number distance)", "modifiers": "public abstract", "return": "Q", "signature": "Q within(\n            String fieldName, Point<N> center, Number distance)", "full_signature": "public abstract Q within(\n            String fieldName, Point<N> center, Number distance)", "class_method_signature": "AbstractQueryTranslator.within(\n            String fieldName, Point<N> center, Number distance)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(Q... subqueries)", "modifiers": "public abstract", "return": "Q", "signature": "Q and(Q... subqueries)", "full_signature": "public abstract Q and(Q... subqueries)", "class_method_signature": "AbstractQueryTranslator.and(Q... subqueries)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(Q... subqueries)", "modifiers": "public abstract", "return": "Q", "signature": "Q or(Q... subqueries)", "full_signature": "public abstract Q or(Q... subqueries)", "class_method_signature": "AbstractQueryTranslator.or(Q... subqueries)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "(String fieldName, Order o)", "modifiers": "public abstract", "return": "O", "signature": "O order(String fieldName, Order o)", "full_signature": "public abstract O order(String fieldName, Order o)", "class_method_signature": "AbstractQueryTranslator.order(String fieldName, Order o)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "(O... orders)", "modifiers": "public abstract", "return": "O", "signature": "O order(O... orders)", "full_signature": "public abstract O order(O... orders)", "class_method_signature": "AbstractQueryTranslator.order(O... orders)", "testcase": false, "constructor": false}], "file": "seeking-core/src/main/java/com/eharmony/matching/seeking/translator/AbstractQueryTranslator.java"}, "focal_method": {"identifier": "translateOrder", "parameters": "(Query<T, R> query)", "modifiers": "@Override public", "return": "O", "body": "@Override\n    public <T, R> O translateOrder(Query<T, R> query) {\n        List<Ordering> orderingList = query.getOrder().get();\n        @SuppressWarnings(\"unchecked\")\n        O[] orders = (O[]) Array.newInstance(orderClass, orderingList.size());\n        for (int i = 0; i < orders.length; i++) {\n            Ordering ordering = orderingList.get(i);\n            orders[i] = order(\n                    propertyResolver.resolve(ordering.getPropertyName(),\n                            query.getEntityClass()), ordering.getOrder());\n        }\n        return order(orders);\n    }", "signature": "O translateOrder(Query<T, R> query)", "full_signature": "@Override public O translateOrder(Query<T, R> query)", "class_method_signature": "AbstractQueryTranslator.translateOrder(Query<T, R> query)", "testcase": false, "constructor": false, "invocations": ["get", "getOrder", "newInstance", "size", "get", "order", "resolve", "getPropertyName", "getEntityClass", "getOrder", "order"]}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}