{"test_class": {"identifier": "NodeIteratorFacadeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/jcrfacade/NodeIteratorFacadeTest.java"}, "test_case": {"identifier": "testNext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNext() throws Exception {\n        NodeIterator delegate = mock(NodeIterator.class);\n        NodeIteratorFacade<Session> facade = getFacade(delegate);\n        final Node value = mock(Node.class);\n        final String path = \"/correct/path\";\n        when(value.getPath()).thenReturn(path);\n        when(delegate.nextNode()).thenReturn(value);\n        final Object fromFacade = facade.next();\n        assertTrue(\"is node\", fromFacade instanceof Node);\n        final Node nodeFromFacade = (Node) fromFacade;\n        assertEquals(\"same path\", path, nodeFromFacade.getPath());\n        assertTrue(\"is facade\", nodeFromFacade instanceof NodeFacade);\n    }", "signature": "void testNext()", "full_signature": "@Test public void testNext()", "class_method_signature": "NodeIteratorFacadeTest.testNext()", "testcase": true, "constructor": false, "invocations": ["mock", "getFacade", "mock", "thenReturn", "when", "getPath", "thenReturn", "when", "nextNode", "next", "assertTrue", "assertEquals", "getPath", "assertTrue"]}, "focal_class": {"identifier": "NodeIteratorFacade", "superclass": "extends RangeIteratorFacade<NodeIterator>", "interfaces": "implements NodeIterator", "fields": [{"original_string": "private final @NotNull SessionFacade<S> session;", "modifier": "private final @NotNull", "type": "SessionFacade<S>", "declarator": "session", "var_name": "session"}], "methods": [{"identifier": "NodeIteratorFacade", "parameters": "(final @NotNull NodeIterator delegate,\n                              final @NotNull SessionFacade<S> session)", "modifiers": "public", "return": "", "signature": " NodeIteratorFacade(final @NotNull NodeIterator delegate,\n                              final @NotNull SessionFacade<S> session)", "full_signature": "public  NodeIteratorFacade(final @NotNull NodeIterator delegate,\n                              final @NotNull SessionFacade<S> session)", "class_method_signature": "NodeIteratorFacade.NodeIteratorFacade(final @NotNull NodeIterator delegate,\n                              final @NotNull SessionFacade<S> session)", "testcase": false, "constructor": true}, {"identifier": "nextNode", "parameters": "()", "modifiers": "@Override public", "return": "Node", "signature": "Node nextNode()", "full_signature": "@Override public Node nextNode()", "class_method_signature": "NodeIteratorFacade.nextNode()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object next()", "full_signature": "@Override public Object next()", "class_method_signature": "NodeIteratorFacade.next()", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/jcrfacade/NodeIteratorFacade.java"}, "focal_method": {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object next() {\n        return nextNode();\n    }", "signature": "Object next()", "full_signature": "@Override public Object next()", "class_method_signature": "NodeIteratorFacade.next()", "testcase": false, "constructor": false, "invocations": ["nextNode"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}