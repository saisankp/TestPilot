{"test_class": {"identifier": "RpcFutureTest", "superclass": "extends BaseMockitoTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Timeout timeout;", "modifier": "@Mock\n    private", "type": "Timeout", "declarator": "timeout", "var_name": "timeout"}, {"original_string": "@Mock\n    private ChannelInfo channelInfo;", "modifier": "@Mock\n    private", "type": "ChannelInfo", "declarator": "channelInfo", "var_name": "channelInfo"}, {"original_string": "@Mock\n    private BrpcChannel channelGroup;", "modifier": "@Mock\n    private", "type": "BrpcChannel", "declarator": "channelGroup", "var_name": "channelGroup"}, {"original_string": "@Mock\n    private RpcCallback<String> rpcCallback;", "modifier": "@Mock\n    private", "type": "RpcCallback<String>", "declarator": "rpcCallback", "var_name": "rpcCallback"}, {"original_string": "@Mock\n    private Interceptor interceptor;", "modifier": "@Mock\n    private", "type": "Interceptor", "declarator": "interceptor", "var_name": "interceptor"}, {"original_string": "@Captor\n    private ArgumentCaptor<Throwable> throwableCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<Throwable>", "declarator": "throwableCaptor", "var_name": "throwableCaptor"}, {"original_string": "private RpcMethodInfo methodInfo;", "modifier": "private", "type": "RpcMethodInfo", "declarator": "methodInfo", "var_name": "methodInfo"}, {"original_string": "@Mock\n    private Request request;", "modifier": "@Mock\n    private", "type": "Request", "declarator": "request", "var_name": "request"}, {"original_string": "private RpcFuture rpcFuture;", "modifier": "private", "type": "RpcFuture", "declarator": "rpcFuture", "var_name": "rpcFuture"}], "file": "brpc-java-communication/src/test/java/com/baidu/brpc/client/RpcFutureTest.java"}, "test_case": {"identifier": "testAsyncHandleNullResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAsyncHandleNullResponse() throws Exception {\n        rpcFuture.handleResponse(null);\n        verify(rpcCallback).fail(throwableCaptor.capture());\n        Throwable t = throwableCaptor.getValue();\n        assertThat(t, instanceOf(RpcException.class));\n        verify(interceptor).handleResponse(null);\n    }", "signature": "void testAsyncHandleNullResponse()", "full_signature": "@Test public void testAsyncHandleNullResponse()", "class_method_signature": "RpcFutureTest.testAsyncHandleNullResponse()", "testcase": true, "constructor": false, "invocations": ["handleResponse", "fail", "verify", "capture", "getValue", "assertThat", "instanceOf", "handleResponse", "verify"]}, "focal_class": {"identifier": "RpcFuture", "superclass": "", "interfaces": "implements AsyncAwareFuture<T>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RpcFuture.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RpcFuture.class)", "var_name": "LOG"}, {"original_string": "protected CountDownLatch latch;", "modifier": "protected", "type": "CountDownLatch", "declarator": "latch", "var_name": "latch"}, {"original_string": "protected Timeout timeout;", "modifier": "protected", "type": "Timeout", "declarator": "timeout", "var_name": "timeout"}, {"original_string": "protected Request request;", "modifier": "protected", "type": "Request", "declarator": "request", "var_name": "request"}, {"original_string": "protected RpcCallback<T> callback;", "modifier": "protected", "type": "RpcCallback<T>", "declarator": "callback", "var_name": "callback"}, {"original_string": "protected ChannelInfo channelInfo;", "modifier": "protected", "type": "ChannelInfo", "declarator": "channelInfo", "var_name": "channelInfo"}, {"original_string": "protected ChannelType channelType;", "modifier": "protected", "type": "ChannelType", "declarator": "channelType", "var_name": "channelType"}, {"original_string": "protected RpcMethodInfo rpcMethodInfo;", "modifier": "protected", "type": "RpcMethodInfo", "declarator": "rpcMethodInfo", "var_name": "rpcMethodInfo"}, {"original_string": "protected Response response;", "modifier": "protected", "type": "Response", "declarator": "response", "var_name": "response"}, {"original_string": "protected boolean isDone;", "modifier": "protected", "type": "boolean", "declarator": "isDone", "var_name": "isDone"}, {"original_string": "protected long startTime;", "modifier": "protected", "type": "long", "declarator": "startTime", "var_name": "startTime"}, {"original_string": "protected long endTime;", "modifier": "protected", "type": "long", "declarator": "endTime", "var_name": "endTime"}, {"original_string": "protected volatile long correlationId;", "modifier": "protected volatile", "type": "long", "declarator": "correlationId", "var_name": "correlationId"}, {"original_string": "protected List<Interceptor> interceptors = new ArrayList<Interceptor>();", "modifier": "protected", "type": "List<Interceptor>", "declarator": "interceptors = new ArrayList<Interceptor>()", "var_name": "interceptors"}], "methods": [{"identifier": "RpcFuture", "parameters": "()", "modifiers": "public", "return": "", "signature": " RpcFuture()", "full_signature": "public  RpcFuture()", "class_method_signature": "RpcFuture.RpcFuture()", "testcase": false, "constructor": true}, {"identifier": "RpcFuture", "parameters": "(long correlationId)", "modifiers": "public", "return": "", "signature": " RpcFuture(long correlationId)", "full_signature": "public  RpcFuture(long correlationId)", "class_method_signature": "RpcFuture.RpcFuture(long correlationId)", "testcase": false, "constructor": true}, {"identifier": "createRpcFuture", "parameters": "(Request request)", "modifiers": "public static", "return": "RpcFuture", "signature": "RpcFuture createRpcFuture(Request request)", "full_signature": "public static RpcFuture createRpcFuture(Request request)", "class_method_signature": "RpcFuture.createRpcFuture(Request request)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Timeout timeout,\n                     RpcMethodInfo rpcMethodInfo,\n                     RpcCallback<T> callback,\n                     ChannelInfo channelInfo)", "modifiers": "public", "return": "void", "signature": "void init(Timeout timeout,\n                     RpcMethodInfo rpcMethodInfo,\n                     RpcCallback<T> callback,\n                     ChannelInfo channelInfo)", "full_signature": "public void init(Timeout timeout,\n                     RpcMethodInfo rpcMethodInfo,\n                     RpcCallback<T> callback,\n                     ChannelInfo channelInfo)", "class_method_signature": "RpcFuture.init(Timeout timeout,\n                     RpcMethodInfo rpcMethodInfo,\n                     RpcCallback<T> callback,\n                     ChannelInfo channelInfo)", "testcase": false, "constructor": false}, {"identifier": "handleConnection", "parameters": "(Response response)", "modifiers": "public", "return": "void", "signature": "void handleConnection(Response response)", "full_signature": "public void handleConnection(Response response)", "class_method_signature": "RpcFuture.handleConnection(Response response)", "testcase": false, "constructor": false}, {"identifier": "handleResponse", "parameters": "(Response response)", "modifiers": "public", "return": "void", "signature": "void handleResponse(Response response)", "full_signature": "public void handleResponse(Response response)", "class_method_signature": "RpcFuture.handleResponse(Response response)", "testcase": false, "constructor": false}, {"identifier": "isAsync", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAsync()", "full_signature": "@Override public boolean isAsync()", "class_method_signature": "RpcFuture.isAsync()", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "(boolean mayInterruptIfRunning)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean cancel(boolean mayInterruptIfRunning)", "full_signature": "@Override public boolean cancel(boolean mayInterruptIfRunning)", "class_method_signature": "RpcFuture.cancel(boolean mayInterruptIfRunning)", "testcase": false, "constructor": false}, {"identifier": "isCancelled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCancelled()", "full_signature": "@Override public boolean isCancelled()", "class_method_signature": "RpcFuture.isCancelled()", "testcase": false, "constructor": false}, {"identifier": "isDone", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDone()", "full_signature": "@Override public boolean isDone()", "class_method_signature": "RpcFuture.isDone()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T get()", "full_signature": "@Override public T get()", "class_method_signature": "RpcFuture.get()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "T", "signature": "T get(long timeout, TimeUnit unit)", "full_signature": "@Override public T get(long timeout, TimeUnit unit)", "class_method_signature": "RpcFuture.get(long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RpcFuture.toString()", "testcase": false, "constructor": false}, {"identifier": "setRpcContext", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void setRpcContext()", "full_signature": "protected void setRpcContext()", "class_method_signature": "RpcFuture.setRpcContext()", "testcase": false, "constructor": false}], "file": "brpc-java-communication/src/main/java/com/baidu/brpc/client/RpcFuture.java"}, "focal_method": {"identifier": "handleResponse", "parameters": "(Response response)", "modifiers": "public", "return": "void", "body": "public void handleResponse(Response response) {\n        handleConnection(response);\n        // invoke the chain of interceptors when async scene\n        if (isAsync() && CollectionUtils.isNotEmpty(interceptors)) {\n            int length = interceptors.size();\n            for (int i = length - 1; i >= 0; i--) {\n                interceptors.get(i).handleResponse(response);\n            }\n        }\n\n        if (isAsync()) {\n            setRpcContext();\n            if (response == null) {\n                callback.fail(new RpcException(RpcException.SERVICE_EXCEPTION, \"internal error\"));\n            } else if (response.getResult() != null) {\n                callback.success((T) response.getResult());\n            } else {\n                callback.fail(response.getException());\n            }\n        }\n    }", "signature": "void handleResponse(Response response)", "full_signature": "public void handleResponse(Response response)", "class_method_signature": "RpcFuture.handleResponse(Response response)", "testcase": false, "constructor": false, "invocations": ["handleConnection", "isAsync", "isNotEmpty", "size", "handleResponse", "get", "isAsync", "setRpcContext", "fail", "getResult", "success", "getResult", "fail", "getException"]}, "repository": {"repo_id": 162548942, "url": "https://github.com/baidu/brpc-java", "language": "Java", "is_fork": false, "fork_count": 175, "stargazer_count": 551, "size": 3271, "license": "licensed"}}