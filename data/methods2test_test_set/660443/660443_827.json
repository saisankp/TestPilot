{"test_class": {"identifier": "OverlapResolverTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "public boolean              standAlone = false;", "modifier": "public", "type": "boolean", "declarator": "standAlone = false", "var_name": "standAlone"}, {"original_string": "private static ILoggingTool logger     = LoggingToolFactory.createLoggingTool(OverlapResolverTest.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger     = LoggingToolFactory.createLoggingTool(OverlapResolverTest.class)", "var_name": "logger"}, {"original_string": "StructureDiagramGenerator   sdg        = null;", "modifier": "", "type": "StructureDiagramGenerator", "declarator": "sdg        = null", "var_name": "sdg"}], "file": "tool/sdg/src/test/java/org/openscience/cdk/layout/OverlapResolverTest.java"}, "test_case": {"identifier": "testResolveOverlap4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolveOverlap4() throws Exception {\n        double overlapScore = 0;\n        logger.debug(\"Test case with atom clash\");\n        String filename = \"data/cml/overlaptest.cml\";\n        InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename);\n        CMLReader reader = new CMLReader(ins);\n        IChemFile chemFile = (IChemFile) reader.read(new ChemFile());\n        IAtomContainer atomContainer = (IAtomContainer) ChemFileManipulator.getAllAtomContainers(chemFile).get(0);\n        //MoleculeViewer2D.display(new AtomContainer(atomContainer), false);\n        OverlapResolver or = new OverlapResolver();\n        overlapScore = or.resolveOverlap(atomContainer, null);\n        //MoleculeViewer2D.display(new AtomContainer(atomContainer), false);\n        Assert.assertEquals(0.0, overlapScore, 0.0001);\n        logger.debug(\"End of test case with atom clash\");\n\n    }", "signature": "void testResolveOverlap4()", "full_signature": "@Test public void testResolveOverlap4()", "class_method_signature": "OverlapResolverTest.testResolveOverlap4()", "testcase": true, "constructor": false, "invocations": ["debug", "getResourceAsStream", "getClassLoader", "getClass", "read", "get", "getAllAtomContainers", "resolveOverlap", "assertEquals", "debug"]}, "focal_class": {"identifier": "OverlapResolver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ILoggingTool logger   = LoggingToolFactory.createLoggingTool(OverlapResolver.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger   = LoggingToolFactory.createLoggingTool(OverlapResolver.class)", "var_name": "logger"}, {"original_string": "int                         maxSteps = 10000;", "modifier": "", "type": "int", "declarator": "maxSteps = 10000", "var_name": "maxSteps"}], "methods": [{"identifier": "OverlapResolver", "parameters": "()", "modifiers": "public", "return": "", "signature": " OverlapResolver()", "full_signature": "public  OverlapResolver()", "class_method_signature": "OverlapResolver.OverlapResolver()", "testcase": false, "constructor": true}, {"identifier": "resolveOverlap", "parameters": "(IAtomContainer ac, IRingSet sssr)", "modifiers": "public", "return": "double", "signature": "double resolveOverlap(IAtomContainer ac, IRingSet sssr)", "full_signature": "public double resolveOverlap(IAtomContainer ac, IRingSet sssr)", "class_method_signature": "OverlapResolver.resolveOverlap(IAtomContainer ac, IRingSet sssr)", "testcase": false, "constructor": false}, {"identifier": "displace", "parameters": "(IAtomContainer ac, Vector overlappingAtoms, Vector overlappingBonds)", "modifiers": "public", "return": "double", "signature": "double displace(IAtomContainer ac, Vector overlappingAtoms, Vector overlappingBonds)", "full_signature": "public double displace(IAtomContainer ac, Vector overlappingAtoms, Vector overlappingBonds)", "class_method_signature": "OverlapResolver.displace(IAtomContainer ac, Vector overlappingAtoms, Vector overlappingBonds)", "testcase": false, "constructor": false}, {"identifier": "getOverlapScore", "parameters": "(IAtomContainer ac, Vector overlappingAtoms, Vector overlappingBonds)", "modifiers": "public", "return": "double", "signature": "double getOverlapScore(IAtomContainer ac, Vector overlappingAtoms, Vector overlappingBonds)", "full_signature": "public double getOverlapScore(IAtomContainer ac, Vector overlappingAtoms, Vector overlappingBonds)", "class_method_signature": "OverlapResolver.getOverlapScore(IAtomContainer ac, Vector overlappingAtoms, Vector overlappingBonds)", "testcase": false, "constructor": false}, {"identifier": "getAtomOverlapScore", "parameters": "(IAtomContainer ac, Vector overlappingAtoms)", "modifiers": "public", "return": "double", "signature": "double getAtomOverlapScore(IAtomContainer ac, Vector overlappingAtoms)", "full_signature": "public double getAtomOverlapScore(IAtomContainer ac, Vector overlappingAtoms)", "class_method_signature": "OverlapResolver.getAtomOverlapScore(IAtomContainer ac, Vector overlappingAtoms)", "testcase": false, "constructor": false}, {"identifier": "getBondOverlapScore", "parameters": "(IAtomContainer ac, Vector overlappingBonds)", "modifiers": "public", "return": "double", "signature": "double getBondOverlapScore(IAtomContainer ac, Vector overlappingBonds)", "full_signature": "public double getBondOverlapScore(IAtomContainer ac, Vector overlappingBonds)", "class_method_signature": "OverlapResolver.getBondOverlapScore(IAtomContainer ac, Vector overlappingBonds)", "testcase": false, "constructor": false}, {"identifier": "areIntersected", "parameters": "(IBond bond1, IBond bond2)", "modifiers": "public", "return": "boolean", "signature": "boolean areIntersected(IBond bond1, IBond bond2)", "full_signature": "public boolean areIntersected(IBond bond1, IBond bond2)", "class_method_signature": "OverlapResolver.areIntersected(IBond bond1, IBond bond2)", "testcase": false, "constructor": false}], "file": "tool/sdg/src/main/java/org/openscience/cdk/layout/OverlapResolver.java"}, "focal_method": {"identifier": "resolveOverlap", "parameters": "(IAtomContainer ac, IRingSet sssr)", "modifiers": "public", "return": "double", "body": "public double resolveOverlap(IAtomContainer ac, IRingSet sssr) {\n\n        Vector overlappingAtoms = new Vector();\n        Vector overlappingBonds = new Vector();\n        logger.debug(\"Start of resolveOverlap\");\n        double overlapScore = getOverlapScore(ac, overlappingAtoms, overlappingBonds);\n        if (overlapScore > 0) {\n            overlapScore = displace(ac, overlappingAtoms, overlappingBonds);\n        }\n        logger.debug(\"overlapScore = \" + overlapScore);\n        logger.debug(\"End of resolveOverlap\");\n        return overlapScore;\n    }", "signature": "double resolveOverlap(IAtomContainer ac, IRingSet sssr)", "full_signature": "public double resolveOverlap(IAtomContainer ac, IRingSet sssr)", "class_method_signature": "OverlapResolver.resolveOverlap(IAtomContainer ac, IRingSet sssr)", "testcase": false, "constructor": false, "invocations": ["debug", "getOverlapScore", "displace", "debug", "debug"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}