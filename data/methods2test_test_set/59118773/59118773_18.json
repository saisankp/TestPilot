{"test_class": {"identifier": "ExcelFieldServiceTest", "superclass": "", "interfaces": "", "fields": [], "file": "persistence/src/test/java/org/devgateway/toolkit/persistence/excel/ExcelFieldServiceTest.java"}, "test_case": {"identifier": "getFieldType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getFieldType() throws Exception {\n        final ClassFields classFields = new ClassFieldsDefault(TestClass.class);\n        final Iterator<Field> fields = classFields.getFields();\n\n        final Field firstField = fields.next();      // get first element\n        Assert.assertEquals(\"Check basic field type\", FieldType.basic, ExcelFieldService.getFieldType(firstField));\n\n        final Field secondField = fields.next();      // get second element\n        Assert.assertEquals(\"Check type class for a List\", FieldType.basic, ExcelFieldService.getFieldType(secondField));\n\n        final Field thirdField = fields.next();      // get third element\n        Assert.assertEquals(\"Check basic field type for Object\", FieldType.basic, ExcelFieldService.getFieldType(thirdField));\n\n        final Field fourthField = fields.next();      // get fourth element\n        Assert.assertEquals(\"Check objectSeparateSheet field type Object\", FieldType.objectSeparateSheet, ExcelFieldService.getFieldType(fourthField));\n    }", "signature": "void getFieldType()", "full_signature": "@Test public void getFieldType()", "class_method_signature": "ExcelFieldServiceTest.getFieldType()", "testcase": true, "constructor": false, "invocations": ["getFields", "next", "assertEquals", "getFieldType", "next", "assertEquals", "getFieldType", "next", "assertEquals", "getFieldType", "next", "assertEquals", "getFieldType"]}, "focal_class": {"identifier": "ExcelFieldService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ExcelFieldService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ExcelFieldService.class)", "var_name": "logger"}, {"original_string": "private static Map<Field, FieldType> fieldsTypeCache;", "modifier": "private static", "type": "Map<Field, FieldType>", "declarator": "fieldsTypeCache", "var_name": "fieldsTypeCache"}, {"original_string": "private static Map<Field, Class> fieldsClassCache;", "modifier": "private static", "type": "Map<Field, Class>", "declarator": "fieldsClassCache", "var_name": "fieldsClassCache"}, {"original_string": "private static Map<Class, List<Field>> fieldsCache;", "modifier": "private static", "type": "Map<Class, List<Field>>", "declarator": "fieldsCache", "var_name": "fieldsCache"}], "methods": [{"identifier": "ExcelFieldService", "parameters": "()", "modifiers": "private", "return": "", "signature": " ExcelFieldService()", "full_signature": "private  ExcelFieldService()", "class_method_signature": "ExcelFieldService.ExcelFieldService()", "testcase": false, "constructor": true}, {"identifier": "getFieldType", "parameters": "(final Field field)", "modifiers": "public static", "return": "FieldType", "signature": "FieldType getFieldType(final Field field)", "full_signature": "public static FieldType getFieldType(final Field field)", "class_method_signature": "ExcelFieldService.getFieldType(final Field field)", "testcase": false, "constructor": false}, {"identifier": "getFieldClass", "parameters": "(final Field field)", "modifiers": "public static", "return": "Class", "signature": "Class getFieldClass(final Field field)", "full_signature": "public static Class getFieldClass(final Field field)", "class_method_signature": "ExcelFieldService.getFieldClass(final Field field)", "testcase": false, "constructor": false}, {"identifier": "getFields", "parameters": "(final Class clazz)", "modifiers": "public static", "return": "Iterator<Field>", "signature": "Iterator<Field> getFields(final Class clazz)", "full_signature": "public static Iterator<Field> getFields(final Class clazz)", "class_method_signature": "ExcelFieldService.getFields(final Class clazz)", "testcase": false, "constructor": false}, {"identifier": "getObjectID", "parameters": "(final Object object)", "modifiers": "public static", "return": "Long", "signature": "Long getObjectID(final Object object)", "full_signature": "public static Long getObjectID(final Object object)", "class_method_signature": "ExcelFieldService.getObjectID(final Object object)", "testcase": false, "constructor": false}, {"identifier": "getFieldName", "parameters": "(final Class clazz, final Field field, final TranslateService translateService)", "modifiers": "public static", "return": "String", "signature": "String getFieldName(final Class clazz, final Field field, final TranslateService translateService)", "full_signature": "public static String getFieldName(final Class clazz, final Field field, final TranslateService translateService)", "class_method_signature": "ExcelFieldService.getFieldName(final Class clazz, final Field field, final TranslateService translateService)", "testcase": false, "constructor": false}, {"identifier": "getFieldClazz", "parameters": "(final Field field)", "modifiers": "public static", "return": "Class[]", "signature": "Class[] getFieldClazz(final Field field)", "full_signature": "public static Class[] getFieldClazz(final Field field)", "class_method_signature": "ExcelFieldService.getFieldClazz(final Field field)", "testcase": false, "constructor": false}, {"identifier": "isCollection", "parameters": "(final Field field)", "modifiers": "public static", "return": "Boolean", "signature": "Boolean isCollection(final Field field)", "full_signature": "public static Boolean isCollection(final Field field)", "class_method_signature": "ExcelFieldService.isCollection(final Field field)", "testcase": false, "constructor": false}], "file": "persistence/src/main/java/org/devgateway/toolkit/persistence/excel/ExcelFieldService.java"}, "focal_method": {"identifier": "getFieldType", "parameters": "(final Field field)", "modifiers": "public static", "return": "FieldType", "body": "public static FieldType getFieldType(final Field field) {\n        FieldType fieldType;\n\n        if (fieldsTypeCache.get(field) != null) {\n            fieldType = fieldsTypeCache.get(field);\n        } else {\n            fieldType = FieldType.basic;        // default field type\n            final Class fieldClass = getFieldClass(field);\n\n            // first we check if we have a basic type\n            if (FieldType.BASICTYPES.contains(fieldClass) || fieldClass.isEnum()) {\n                fieldType = FieldType.basic;\n            } else {\n                final ExcelExport excelExport = field.getAnnotation(ExcelExport.class);\n                if (excelExport != null) {\n                    fieldType = FieldType.object;\n\n                    // if we just want to export a field (toString) we consider it a basic type.\n                    if (excelExport.justExport()) {\n                        fieldType = FieldType.basic;\n                    }\n\n                    // check if we want to export the object in a separate sheet\n                    if (excelExport.separateSheet()) {\n                        fieldType = FieldType.objectSeparateSheet;\n                    }\n                }\n            }\n\n            fieldsTypeCache.put(field, fieldType);\n        }\n\n        return fieldType;\n    }", "signature": "FieldType getFieldType(final Field field)", "full_signature": "public static FieldType getFieldType(final Field field)", "class_method_signature": "ExcelFieldService.getFieldType(final Field field)", "testcase": false, "constructor": false, "invocations": ["get", "get", "getFieldClass", "contains", "isEnum", "getAnnotation", "justExport", "separateSheet", "put"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}