{"test_class": {"identifier": "StepModelFitTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Region regionSmall = new Region(0,11);", "modifier": "", "type": "Region", "declarator": "regionSmall = new Region(0,11)", "var_name": "regionSmall"}, {"original_string": "Region regionBig = new Region(-111,420);", "modifier": "", "type": "Region", "declarator": "regionBig = new Region(-111,420)", "var_name": "regionBig"}, {"original_string": "Region regionZero = new Region(0, 0);", "modifier": "", "type": "Region", "declarator": "regionZero = new Region(0, 0)", "var_name": "regionZero"}, {"original_string": "Region regionUndef = new Region(0, null);", "modifier": "", "type": "Region", "declarator": "regionUndef = new Region(0, null)", "var_name": "regionUndef"}, {"original_string": "double[] stpSmall = {1,2,5}, stpBig = {1,10,100}, nonsense = {0};", "modifier": "", "type": "double[]", "declarator": "stpSmall = {1,2,5}", "var_name": "stpSmall"}], "file": "androidplot-core/src/test/java/com/androidplot/xy/StepModelFitTest.java"}, "test_case": {"identifier": "getValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getValue() throws Exception {\n\n        StepModelFit model = new StepModelFit(regionSmall,stpSmall,3);\n\n        assertEquals(5.0, model.getValue(), 0.0);\n        model.setValue(5.0);\n        assertEquals(2.0, model.getValue(), 0.0);\n        model.setValue(7.0);\n        assertEquals(2.0, model.getValue(), 0.0);\n\n        model.setSteps(stpBig);\n        assertEquals(1.0, model.getValue(), 0.0);\n\n        model.setScale(regionBig);\n        assertEquals(100.0, model.getValue(), 0.0);\n        model.setValue(1000.0);\n        assertEquals(1.0, model.getValue(), 0.0);\n\n        // bad parameters\n        model.setSteps(nonsense);\n        assertArrayEquals(stpBig,model.getSteps(), 0.0);\n\n        model.setScale(regionZero);\n        assertEquals(stpBig[0], model.getValue(), 0.0);\n\n        model.setScale(regionUndef);\n        model.setValue(1.1);\n        assertEquals(1.1, model.getValue(), 0.0);\n    }", "signature": "void getValue()", "full_signature": "@Test public void getValue()", "class_method_signature": "StepModelFitTest.getValue()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getValue", "setValue", "assertEquals", "getValue", "setValue", "assertEquals", "getValue", "setSteps", "assertEquals", "getValue", "setScale", "assertEquals", "getValue", "setValue", "assertEquals", "getValue", "setSteps", "assertArrayEquals", "getSteps", "setScale", "assertEquals", "getValue", "setScale", "setValue", "assertEquals", "getValue"]}, "focal_class": {"identifier": "StepModelFit", "superclass": "extends StepModel", "interfaces": "", "fields": [{"original_string": "private double[] steps;", "modifier": "private", "type": "double[]", "declarator": "steps", "var_name": "steps"}, {"original_string": "private Region scale;", "modifier": "private", "type": "Region", "declarator": "scale", "var_name": "scale"}], "methods": [{"identifier": "StepModelFit", "parameters": "(Region axisRegion, double[] increments, double numLines)", "modifiers": "public", "return": "", "signature": " StepModelFit(Region axisRegion, double[] increments, double numLines)", "full_signature": "public  StepModelFit(Region axisRegion, double[] increments, double numLines)", "class_method_signature": "StepModelFit.StepModelFit(Region axisRegion, double[] increments, double numLines)", "testcase": false, "constructor": true}, {"identifier": "getSteps", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getSteps()", "full_signature": "public double[] getSteps()", "class_method_signature": "StepModelFit.getSteps()", "testcase": false, "constructor": false}, {"identifier": "setSteps", "parameters": "(double[] steps)", "modifiers": "public", "return": "void", "signature": "void setSteps(double[] steps)", "full_signature": "public void setSteps(double[] steps)", "class_method_signature": "StepModelFit.setSteps(double[] steps)", "testcase": false, "constructor": false}, {"identifier": "getScale", "parameters": "()", "modifiers": "public", "return": "Region", "signature": "Region getScale()", "full_signature": "public Region getScale()", "class_method_signature": "StepModelFit.getScale()", "testcase": false, "constructor": false}, {"identifier": "setScale", "parameters": "(Region scale)", "modifiers": "public", "return": "void", "signature": "void setScale(Region scale)", "full_signature": "public void setScale(Region scale)", "class_method_signature": "StepModelFit.setScale(Region scale)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getValue()", "full_signature": "@Override public double getValue()", "class_method_signature": "StepModelFit.getValue()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StepModelFit.toString()", "testcase": false, "constructor": false}], "file": "androidplot-core/src/main/java/com/androidplot/xy/StepModelFit.java"}, "focal_method": {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double getValue() {\n\n        // no possible increments where supplied\n        // or no region defined\n        if (steps == null || scale == null || !scale.isDefined())\n            return super.getValue();\n\n        double curStep = steps[0];\n        double oldDistance = Math.abs((scale.length().doubleValue() / curStep)-super.getValue() );\n\n        // determine which step size comes closest to the desired number of steps\n        // since steps[] is a small array brute force search is ok\n        for (double step : steps) {\n\n            double newDistance = Math.abs((scale.length().doubleValue() / step)-super.getValue() );\n\n            // closer than previous stepping?\n            if (newDistance < oldDistance){\n                curStep = step;\n                oldDistance = newDistance;\n            }\n        }\n        return curStep;\n    }", "signature": "double getValue()", "full_signature": "@Override public double getValue()", "class_method_signature": "StepModelFit.getValue()", "testcase": false, "constructor": false, "invocations": ["isDefined", "getValue", "abs", "doubleValue", "length", "getValue", "abs", "doubleValue", "length", "getValue"]}, "repository": {"repo_id": 1424783, "url": "https://github.com/halfhp/androidplot", "language": "Java", "is_fork": false, "fork_count": 129, "stargazer_count": 369, "size": 7178, "license": "licensed"}}