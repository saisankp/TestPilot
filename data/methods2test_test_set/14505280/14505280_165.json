{"test_class": {"identifier": "SearchFeatureCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DOUBLE_TOLERANCE = .00000001;", "modifier": "private static final", "type": "double", "declarator": "DOUBLE_TOLERANCE = .00000001", "var_name": "DOUBLE_TOLERANCE"}, {"original_string": "private static final String LAYER_ID = \"countries\";", "modifier": "private static final", "type": "String", "declarator": "LAYER_ID = \"countries\"", "var_name": "LAYER_ID"}, {"original_string": "private static final String REGION_ATTRIBUTE = \"region\";", "modifier": "private static final", "type": "String", "declarator": "REGION_ATTRIBUTE = \"region\"", "var_name": "REGION_ATTRIBUTE"}, {"original_string": "private static final String NAME_ATTRIBUTE = \"name\";", "modifier": "private static final", "type": "String", "declarator": "NAME_ATTRIBUTE = \"name\"", "var_name": "NAME_ATTRIBUTE"}, {"original_string": "private static final String ID_ATTRIBUTE = \"id\";", "modifier": "private static final", "type": "String", "declarator": "ID_ATTRIBUTE = \"id\"", "var_name": "ID_ATTRIBUTE"}, {"original_string": "@Autowired\n\tprivate CommandDispatcher dispatcher;", "modifier": "@Autowired\n\tprivate", "type": "CommandDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "@Autowired\n\tprivate SearchFeatureCommand searchFeatureCommand;", "modifier": "@Autowired\n\tprivate", "type": "SearchFeatureCommand", "declarator": "searchFeatureCommand", "var_name": "searchFeatureCommand"}], "file": "command/src/test/java/org/geomajas/command/feature/SearchFeatureCommandTest.java"}, "test_case": {"identifier": "createFilterTest", "parameters": "()", "modifiers": "@Test @DirtiesContext // @todo need to check why this is necessary, otherwise next test fails? (GetVectorTileCommandTest) // probably cause by directly using the command service which has an injected security context public", "return": "void", "body": "@Test\n\t@DirtiesContext // @todo need to check why this is necessary, otherwise next test fails? (GetVectorTileCommandTest)\n\t// probably cause by directly using the command service which has an injected security context\n\tpublic void createFilterTest() throws Exception {\n\t\tSearchFeatureRequest request = new SearchFeatureRequest();\n\t\trequest.setLayerId(LAYER_ID);\n\t\trequest.setCrs(\"EPSG:4326\");\n\t\tSearchCriterion searchCriterion = new SearchCriterion();\n\t\tFilter filter;\n\n\t\t// needs to be FidFilter when equals test on id\n\t\tsearchCriterion.setAttributeName(ID_ATTRIBUTE);\n\t\tsearchCriterion.setOperator(\"=\");\n\t\tsearchCriterion.setValue(\"'1'\");\n\t\trequest.setCriteria(new SearchCriterion[] {searchCriterion});\n\t\tfilter = searchFeatureCommand.createFilter(request, LAYER_ID);\n\t\tAssert.assertTrue(filter instanceof Id);\n\n\t\t// but *not* when other test\n\t\tsearchCriterion.setAttributeName(ID_ATTRIBUTE);\n\t\tsearchCriterion.setOperator(\"like\");\n\t\tsearchCriterion.setValue(\"'%a%'\");\n\t\trequest.setCriteria(new SearchCriterion[] {searchCriterion});\n\t\tfilter = searchFeatureCommand.createFilter(request, LAYER_ID);\n\t\tAssert.assertFalse(filter instanceof Id);\n\t}", "signature": "void createFilterTest()", "full_signature": "@Test @DirtiesContext // @todo need to check why this is necessary, otherwise next test fails? (GetVectorTileCommandTest) // probably cause by directly using the command service which has an injected security context public void createFilterTest()", "class_method_signature": "SearchFeatureCommandTest.createFilterTest()", "testcase": true, "constructor": false, "invocations": ["setLayerId", "setCrs", "setAttributeName", "setOperator", "setValue", "setCriteria", "createFilter", "assertTrue", "setAttributeName", "setOperator", "setValue", "setCriteria", "createFilter", "assertFalse"]}, "focal_class": {"identifier": "SearchFeatureCommand", "superclass": "", "interfaces": "implements CommandHasRequest<SearchFeatureRequest, SearchFeatureResponse>", "fields": [{"original_string": "private final Logger log  = LoggerFactory.getLogger(SearchFeatureCommand.class);", "modifier": "private final", "type": "Logger", "declarator": "log  = LoggerFactory.getLogger(SearchFeatureCommand.class)", "var_name": "log"}, {"original_string": "@Autowired\n\tprivate ConfigurationService configurationService;", "modifier": "@Autowired\n\tprivate", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}, {"original_string": "@Autowired\n\tprivate DtoConverterService converter;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "converter", "var_name": "converter"}, {"original_string": "@Autowired\n\tprivate FilterService filterService;", "modifier": "@Autowired\n\tprivate", "type": "FilterService", "declarator": "filterService", "var_name": "filterService"}, {"original_string": "@Autowired\n\tprivate VectorLayerService layerService;", "modifier": "@Autowired\n\tprivate", "type": "VectorLayerService", "declarator": "layerService", "var_name": "layerService"}], "methods": [{"identifier": "getEmptyCommandRequest", "parameters": "()", "modifiers": "@Override public", "return": "SearchFeatureRequest", "signature": "SearchFeatureRequest getEmptyCommandRequest()", "full_signature": "@Override public SearchFeatureRequest getEmptyCommandRequest()", "class_method_signature": "SearchFeatureCommand.getEmptyCommandRequest()", "testcase": false, "constructor": false}, {"identifier": "getEmptyCommandResponse", "parameters": "()", "modifiers": "@Override public", "return": "SearchFeatureResponse", "signature": "SearchFeatureResponse getEmptyCommandResponse()", "full_signature": "@Override public SearchFeatureResponse getEmptyCommandResponse()", "class_method_signature": "SearchFeatureCommand.getEmptyCommandResponse()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(SearchFeatureRequest request, SearchFeatureResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void execute(SearchFeatureRequest request, SearchFeatureResponse response)", "full_signature": "@Override public void execute(SearchFeatureRequest request, SearchFeatureResponse response)", "class_method_signature": "SearchFeatureCommand.execute(SearchFeatureRequest request, SearchFeatureResponse response)", "testcase": false, "constructor": false}, {"identifier": "createFilter", "parameters": "(SearchFeatureRequest request, String layerId)", "modifiers": "", "return": "Filter", "signature": "Filter createFilter(SearchFeatureRequest request, String layerId)", "full_signature": " Filter createFilter(SearchFeatureRequest request, String layerId)", "class_method_signature": "SearchFeatureCommand.createFilter(SearchFeatureRequest request, String layerId)", "testcase": false, "constructor": false}], "file": "command/src/main/java/org/geomajas/command/feature/SearchFeatureCommand.java"}, "focal_method": {"identifier": "createFilter", "parameters": "(SearchFeatureRequest request, String layerId)", "modifiers": "", "return": "Filter", "body": "Filter createFilter(SearchFeatureRequest request, String layerId) throws GeomajasException {\n\t\tFilter f = null;\n\t\tVectorLayer layer = configurationService.getVectorLayer(layerId);\n\t\tif (layer == null) {\n\t\t\tthrow new  GeomajasException(ExceptionCode.LAYER_NOT_FOUND, layerId);\n\t\t}\n\t\tString idName = layer.getLayerInfo().getFeatureInfo().getIdentifier().getName();\n\t\tif (null != request.getCriteria()) {\n\t\t\tfor (SearchCriterion criterion : request.getCriteria()) {\n\t\t\t\tFilter temp;\n\t\t\t\tString attributeName = criterion.getAttributeName();\n\t\t\t\tString operator = criterion.getOperator();\n\t\t\t\tif ((SearchFeatureRequest.ID_ATTRIBUTE.equals(attributeName) || attributeName.equals(idName)) &&\n\t\t\t\t\t\t(null == operator || \"=\".equals(operator))) {\n\t\t\t\t\ttemp = filterService.createFidFilter(new String[]{criterion.getValue()});\n\t\t\t\t} else {\n\t\t\t\t\tString c = criterion.toString().replace('*', '%').replace('?', '_');\n\t\t\t\t\ttemp = filterService.parseFilter(c);\n\t\t\t\t}\n\t\t\t\tif (f == null) {\n\t\t\t\t\tf = temp;\n\t\t\t\t} else {\n\t\t\t\t\tf = filterService.createLogicFilter(f, request.getBooleanOperator(), temp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// AND the layer filter\n\t\tString filter = request.getFilter();\n\t\tif (filter != null) {\n\t\t\tif (f == null) {\n\t\t\t\tf = filterService.parseFilter(filter);\n\t\t\t} else {\n\t\t\t\tf = filterService.createAndFilter(filterService.parseFilter(filter), f);\n\t\t\t}\n\t\t}\n\n\t\t// If f is still null:\n\t\tif (f == null) {\n\t\t\tf = filterService.createTrueFilter();\n\t\t}\n\n\t\treturn f;\n\t}", "signature": "Filter createFilter(SearchFeatureRequest request, String layerId)", "full_signature": " Filter createFilter(SearchFeatureRequest request, String layerId)", "class_method_signature": "SearchFeatureCommand.createFilter(SearchFeatureRequest request, String layerId)", "testcase": false, "constructor": false, "invocations": ["getVectorLayer", "getName", "getIdentifier", "getFeatureInfo", "getLayerInfo", "getCriteria", "getCriteria", "getAttributeName", "getOperator", "equals", "equals", "equals", "createFidFilter", "getValue", "replace", "replace", "toString", "parseFilter", "createLogicFilter", "getBooleanOperator", "getFilter", "parseFilter", "createAndFilter", "parseFilter", "createTrueFilter"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}