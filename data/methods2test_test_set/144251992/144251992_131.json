{"test_class": {"identifier": "ProjectionTypeArgumentResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String REQUEST_PARAM_NAME = \"projection\";", "modifier": "private final", "type": "String", "declarator": "REQUEST_PARAM_NAME = \"projection\"", "var_name": "REQUEST_PARAM_NAME"}, {"original_string": "@Mock\n    private ProjectionService projectionServiceMock;", "modifier": "@Mock\n    private", "type": "ProjectionService", "declarator": "projectionServiceMock", "var_name": "projectionServiceMock"}, {"original_string": "@Mock\n    private ProjectBoardConfigurationProperties propertiesMock;", "modifier": "@Mock\n    private", "type": "ProjectBoardConfigurationProperties", "declarator": "propertiesMock", "var_name": "propertiesMock"}, {"original_string": "@Mock\n    private MethodParameter methodParameterMock;", "modifier": "@Mock\n    private", "type": "MethodParameter", "declarator": "methodParameterMock", "var_name": "methodParameterMock"}, {"original_string": "@Mock\n    private NativeWebRequest nativeWebRequestMock;", "modifier": "@Mock\n    private", "type": "NativeWebRequest", "declarator": "nativeWebRequestMock", "var_name": "nativeWebRequestMock"}, {"original_string": "@Mock\n    private ProjectionType projectionTypeMock;", "modifier": "@Mock\n    private", "type": "ProjectionType", "declarator": "projectionTypeMock", "var_name": "projectionTypeMock"}, {"original_string": "private ProjectionTypeArgumentResolver argumentResolver;", "modifier": "private", "type": "ProjectionTypeArgumentResolver", "declarator": "argumentResolver", "var_name": "argumentResolver"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/base/projection/ProjectionTypeArgumentResolverTest.java"}, "test_case": {"identifier": "resolveArgumentReturnsDefaultProjectionWhenProjectionNotNullOrEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void resolveArgumentReturnsDefaultProjectionWhenProjectionNotNullOrEmpty() {\n        // given\n        var expectedProjection = (Class) Iterable.class;\n        var expectedTarget = (Class) String.class;\n        var expectedRequestParamValue = \"cool-projection\";\n\n        given(nativeWebRequestMock.getParameter(REQUEST_PARAM_NAME)).willReturn(expectedRequestParamValue);\n        given(methodParameterMock.getParameterAnnotation(ProjectionType.class)).willReturn(projectionTypeMock);\n        given(projectionTypeMock.value()).willReturn(expectedTarget);\n\n        given(projectionServiceMock.getByNameOrDefault(expectedRequestParamValue, expectedTarget))\n                .willReturn(expectedProjection);\n\n        // when\n        var actualProjection = argumentResolver.resolveArgument(methodParameterMock, null, nativeWebRequestMock, null);\n\n        // then\n        assertThat(actualProjection).isEqualTo(expectedProjection);\n    }", "signature": "void resolveArgumentReturnsDefaultProjectionWhenProjectionNotNullOrEmpty()", "full_signature": "@Test public void resolveArgumentReturnsDefaultProjectionWhenProjectionNotNullOrEmpty()", "class_method_signature": "ProjectionTypeArgumentResolverTest.resolveArgumentReturnsDefaultProjectionWhenProjectionNotNullOrEmpty()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getParameter", "willReturn", "given", "getParameterAnnotation", "willReturn", "given", "value", "willReturn", "given", "getByNameOrDefault", "resolveArgument", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ProjectionTypeArgumentResolver", "superclass": "", "interfaces": "implements HandlerMethodArgumentResolver", "fields": [{"original_string": "private final ProjectionService projectionService;", "modifier": "private final", "type": "ProjectionService", "declarator": "projectionService", "var_name": "projectionService"}, {"original_string": "private final String projectionParamName;", "modifier": "private final", "type": "String", "declarator": "projectionParamName", "var_name": "projectionParamName"}], "methods": [{"identifier": "ProjectionTypeArgumentResolver", "parameters": "(ProjectionService projectionService, ProjectBoardConfigurationProperties properties)", "modifiers": "@Autowired public", "return": "", "signature": " ProjectionTypeArgumentResolver(ProjectionService projectionService, ProjectBoardConfigurationProperties properties)", "full_signature": "@Autowired public  ProjectionTypeArgumentResolver(ProjectionService projectionService, ProjectBoardConfigurationProperties properties)", "class_method_signature": "ProjectionTypeArgumentResolver.ProjectionTypeArgumentResolver(ProjectionService projectionService, ProjectBoardConfigurationProperties properties)", "testcase": false, "constructor": true}, {"identifier": "supportsParameter", "parameters": "(MethodParameter parameter)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsParameter(MethodParameter parameter)", "full_signature": "@Override public boolean supportsParameter(MethodParameter parameter)", "class_method_signature": "ProjectionTypeArgumentResolver.supportsParameter(MethodParameter parameter)", "testcase": false, "constructor": false}, {"identifier": "resolveArgument", "parameters": "(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)", "full_signature": "@Override public Class<?> resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)", "class_method_signature": "ProjectionTypeArgumentResolver.resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/base/projection/ProjectionTypeArgumentResolver.java"}, "focal_method": {"identifier": "resolveArgument", "parameters": "(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)", "modifiers": "@Override public", "return": "Class<?>", "body": "@Override\n    public Class<?> resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) {\n        var desiredProjectionName = webRequest.getParameter(projectionParamName);\n        var projectionTarget = parameter.getParameterAnnotation(ProjectionType.class).value();\n\n        if(Objects.isNull(desiredProjectionName) || desiredProjectionName.isEmpty()) {\n            return projectionService.getDefault(projectionTarget);\n        }\n\n        return projectionService.getByNameOrDefault(desiredProjectionName, projectionTarget);\n    }", "signature": "Class<?> resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)", "full_signature": "@Override public Class<?> resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)", "class_method_signature": "ProjectionTypeArgumentResolver.resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)", "testcase": false, "constructor": false, "invocations": ["getParameter", "value", "getParameterAnnotation", "isNull", "isEmpty", "getDefault", "getByNameOrDefault"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}