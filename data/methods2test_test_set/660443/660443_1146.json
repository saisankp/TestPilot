{"test_class": {"identifier": "ToleranceRangeRuleTest", "superclass": "extends FormulaRuleTest", "interfaces": "", "fields": [{"original_string": "private static IChemObjectBuilder builder;", "modifier": "private static", "type": "IChemObjectBuilder", "declarator": "builder", "var_name": "builder"}], "file": "tool/formula/src/test/java/org/openscience/cdk/formula/rules/ToleranceRangeRuleTest.java"}, "test_case": {"identifier": "testSetParameters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetParameters() throws Exception {\n\n        IRule rule = new ToleranceRangeRule();\n\n        Object[] params = new Object[2];\n        params[0] = 133.0;\n        params[1] = 0.00005;\n        rule.setParameters(params);\n\n        Object[] objects = rule.getParameters();\n\n        Assert.assertEquals(2, objects.length);\n\n        double mass = (Double) objects[0];\n        Assert.assertEquals(133.0, mass, 0.00001);\n        double tolerance = (Double) objects[1];\n        Assert.assertEquals(0.00005, tolerance, 0.00001);\n\n    }", "signature": "void testSetParameters()", "full_signature": "@Test public void testSetParameters()", "class_method_signature": "ToleranceRangeRuleTest.testSetParameters()", "testcase": true, "constructor": false, "invocations": ["setParameters", "getParameters", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "ToleranceRangeRule", "superclass": "", "interfaces": "implements IRule", "fields": [{"original_string": "private static ILoggingTool logger    = LoggingToolFactory.createLoggingTool(ToleranceRangeRule.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger    = LoggingToolFactory.createLoggingTool(ToleranceRangeRule.class)", "var_name": "logger"}, {"original_string": "private double              mass      = 0.0;", "modifier": "private", "type": "double", "declarator": "mass      = 0.0", "var_name": "mass"}, {"original_string": "private double              tolerance = 0.05;", "modifier": "private", "type": "double", "declarator": "tolerance = 0.05", "var_name": "tolerance"}], "methods": [{"identifier": "ToleranceRangeRule", "parameters": "()", "modifiers": "public", "return": "", "signature": " ToleranceRangeRule()", "full_signature": "public  ToleranceRangeRule()", "class_method_signature": "ToleranceRangeRule.ToleranceRangeRule()", "testcase": false, "constructor": true}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "ToleranceRangeRule.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "ToleranceRangeRule.getParameters()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(IMolecularFormula formula)", "modifiers": "@Override public", "return": "double", "signature": "double validate(IMolecularFormula formula)", "full_signature": "@Override public double validate(IMolecularFormula formula)", "class_method_signature": "ToleranceRangeRule.validate(IMolecularFormula formula)", "testcase": false, "constructor": false}], "file": "tool/formula/src/main/java/org/openscience/cdk/formula/rules/ToleranceRangeRule.java"}, "focal_method": {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setParameters(Object[] params) throws CDKException {\n        if (params.length > 2) throw new CDKException(\"ToleranceRangeRule expects only two parameter\");\n\n        if (!(params[0] instanceof Double)) throw new CDKException(\"The parameter 0 must be of type Double\");\n\n        if (!(params[1] instanceof Double)) throw new CDKException(\"The parameter 1 must be of type Double\");\n\n        mass = (Double) params[0];\n        tolerance = (Double) params[1];\n    }", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "ToleranceRangeRule.setParameters(Object[] params)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}