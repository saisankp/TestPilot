{"test_class": {"identifier": "AthenzJettyContainerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_EXCLUDED_CIPHERS = \"^_(MD5|SHA|SHA1)$\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_EXCLUDED_CIPHERS = \"^_(MD5|SHA|SHA1)$\"", "var_name": "DEFAULT_EXCLUDED_CIPHERS"}, {"original_string": "private static final String DEFAULT_INCLUDED_CIPHERS = \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_INCLUDED_CIPHERS = \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"", "var_name": "DEFAULT_INCLUDED_CIPHERS"}], "file": "containers/jetty/src/test/java/com/yahoo/athenz/container/AthenzJettyContainerTest.java"}, "test_case": {"identifier": "testAddServletHandlers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddServletHandlers() {\n        System.setProperty(AthenzConsts.ATHENZ_PROP_KEEP_ALIVE, \"false\");\n        AthenzJettyContainer container = new AthenzJettyContainer();\n        container.createServer(100);\n        container.addServletHandlers(\"localhost\");\n    }", "signature": "void testAddServletHandlers()", "full_signature": "@Test public void testAddServletHandlers()", "class_method_signature": "AthenzJettyContainerTest.testAddServletHandlers()", "testcase": true, "constructor": false, "invocations": ["setProperty", "createServer", "addServletHandlers"]}, "focal_class": {"identifier": "AthenzJettyContainer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AthenzJettyContainer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AthenzJettyContainer.class)", "var_name": "LOG"}, {"original_string": "private static String ROOT_DIR;", "modifier": "private static", "type": "String", "declarator": "ROOT_DIR", "var_name": "ROOT_DIR"}, {"original_string": "private static final String DEFAULT_WEBAPP_DESCRIPTOR = \"/etc/webdefault.xml\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_WEBAPP_DESCRIPTOR = \"/etc/webdefault.xml\"", "var_name": "DEFAULT_WEBAPP_DESCRIPTOR"}, {"original_string": "static final String ATHENZ_DEFAULT_EXCLUDED_PROTOCOLS = \"SSLv2,SSLv3\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_DEFAULT_EXCLUDED_PROTOCOLS = \"SSLv2,SSLv3\"", "var_name": "ATHENZ_DEFAULT_EXCLUDED_PROTOCOLS"}, {"original_string": "private Server server = null;", "modifier": "private", "type": "Server", "declarator": "server = null", "var_name": "server"}, {"original_string": "private String banner = null;", "modifier": "private", "type": "String", "declarator": "banner = null", "var_name": "banner"}, {"original_string": "private HandlerCollection handlers = null;", "modifier": "private", "type": "HandlerCollection", "declarator": "handlers = null", "var_name": "handlers"}, {"original_string": "private PrivateKeyStore privateKeyStore;", "modifier": "private", "type": "PrivateKeyStore", "declarator": "privateKeyStore", "var_name": "privateKeyStore"}], "methods": [{"identifier": "AthenzJettyContainer", "parameters": "()", "modifiers": "public", "return": "", "signature": " AthenzJettyContainer()", "full_signature": "public  AthenzJettyContainer()", "class_method_signature": "AthenzJettyContainer.AthenzJettyContainer()", "testcase": false, "constructor": true}, {"identifier": "getServer", "parameters": "()", "modifiers": "", "return": "Server", "signature": "Server getServer()", "full_signature": " Server getServer()", "class_method_signature": "AthenzJettyContainer.getServer()", "testcase": false, "constructor": false}, {"identifier": "getHandlers", "parameters": "()", "modifiers": "", "return": "HandlerCollection", "signature": "HandlerCollection getHandlers()", "full_signature": " HandlerCollection getHandlers()", "class_method_signature": "AthenzJettyContainer.getHandlers()", "testcase": false, "constructor": false}, {"identifier": "getServerHostName", "parameters": "()", "modifiers": "static", "return": "String", "signature": "String getServerHostName()", "full_signature": "static String getServerHostName()", "class_method_signature": "AthenzJettyContainer.getServerHostName()", "testcase": false, "constructor": false}, {"identifier": "getRootDir", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getRootDir()", "full_signature": "public static String getRootDir()", "class_method_signature": "AthenzJettyContainer.getRootDir()", "testcase": false, "constructor": false}, {"identifier": "addRequestLogHandler", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void addRequestLogHandler()", "full_signature": "public void addRequestLogHandler()", "class_method_signature": "AthenzJettyContainer.addRequestLogHandler()", "testcase": false, "constructor": false}, {"identifier": "addServletHandlers", "parameters": "(String serverHostName)", "modifiers": "public", "return": "void", "signature": "void addServletHandlers(String serverHostName)", "full_signature": "public void addServletHandlers(String serverHostName)", "class_method_signature": "AthenzJettyContainer.addServletHandlers(String serverHostName)", "testcase": false, "constructor": false}, {"identifier": "setDefaultsDescriptor", "parameters": "(WebAppProvider webappProvider, String jettyHome)", "modifiers": "private", "return": "void", "signature": "void setDefaultsDescriptor(WebAppProvider webappProvider, String jettyHome)", "full_signature": "private void setDefaultsDescriptor(WebAppProvider webappProvider, String jettyHome)", "class_method_signature": "AthenzJettyContainer.setDefaultsDescriptor(WebAppProvider webappProvider, String jettyHome)", "testcase": false, "constructor": false}, {"identifier": "newHttpConfiguration", "parameters": "()", "modifiers": "public", "return": "HttpConfiguration", "signature": "HttpConfiguration newHttpConfiguration()", "full_signature": "public HttpConfiguration newHttpConfiguration()", "class_method_signature": "AthenzJettyContainer.newHttpConfiguration()", "testcase": false, "constructor": false}, {"identifier": "loadServicePrivateKey", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadServicePrivateKey()", "full_signature": " void loadServicePrivateKey()", "class_method_signature": "AthenzJettyContainer.loadServicePrivateKey()", "testcase": false, "constructor": false}, {"identifier": "createSSLContextObject", "parameters": "(boolean needClientAuth)", "modifiers": "", "return": "SslContextFactory.Server", "signature": "SslContextFactory.Server createSSLContextObject(boolean needClientAuth)", "full_signature": " SslContextFactory.Server createSSLContextObject(boolean needClientAuth)", "class_method_signature": "AthenzJettyContainer.createSSLContextObject(boolean needClientAuth)", "testcase": false, "constructor": false}, {"identifier": "addHTTPConnector", "parameters": "(HttpConfiguration httpConfig, int httpPort, boolean proxyProtocol,\n            String listenHost, int idleTimeout)", "modifiers": "", "return": "void", "signature": "void addHTTPConnector(HttpConfiguration httpConfig, int httpPort, boolean proxyProtocol,\n            String listenHost, int idleTimeout)", "full_signature": " void addHTTPConnector(HttpConfiguration httpConfig, int httpPort, boolean proxyProtocol,\n            String listenHost, int idleTimeout)", "class_method_signature": "AthenzJettyContainer.addHTTPConnector(HttpConfiguration httpConfig, int httpPort, boolean proxyProtocol,\n            String listenHost, int idleTimeout)", "testcase": false, "constructor": false}, {"identifier": "addHTTPSConnector", "parameters": "(HttpConfiguration httpConfig, int httpsPort, boolean proxyProtocol,\n            String listenHost, int idleTimeout, boolean needClientAuth)", "modifiers": "", "return": "void", "signature": "void addHTTPSConnector(HttpConfiguration httpConfig, int httpsPort, boolean proxyProtocol,\n            String listenHost, int idleTimeout, boolean needClientAuth)", "full_signature": " void addHTTPSConnector(HttpConfiguration httpConfig, int httpsPort, boolean proxyProtocol,\n            String listenHost, int idleTimeout, boolean needClientAuth)", "class_method_signature": "AthenzJettyContainer.addHTTPSConnector(HttpConfiguration httpConfig, int httpsPort, boolean proxyProtocol,\n            String listenHost, int idleTimeout, boolean needClientAuth)", "testcase": false, "constructor": false}, {"identifier": "addHTTPConnectors", "parameters": "(HttpConfiguration httpConfig, int httpPort, int httpsPort,\n            int statusPort)", "modifiers": "public", "return": "void", "signature": "void addHTTPConnectors(HttpConfiguration httpConfig, int httpPort, int httpsPort,\n            int statusPort)", "full_signature": "public void addHTTPConnectors(HttpConfiguration httpConfig, int httpPort, int httpsPort,\n            int statusPort)", "class_method_signature": "AthenzJettyContainer.addHTTPConnectors(HttpConfiguration httpConfig, int httpPort, int httpsPort,\n            int statusPort)", "testcase": false, "constructor": false}, {"identifier": "setBanner", "parameters": "(String banner)", "modifiers": "public", "return": "void", "signature": "void setBanner(String banner)", "full_signature": "public void setBanner(String banner)", "class_method_signature": "AthenzJettyContainer.setBanner(String banner)", "testcase": false, "constructor": false}, {"identifier": "createServer", "parameters": "(int maxThreads)", "modifiers": "public", "return": "void", "signature": "void createServer(int maxThreads)", "full_signature": "public void createServer(int maxThreads)", "class_method_signature": "AthenzJettyContainer.createServer(int maxThreads)", "testcase": false, "constructor": false}, {"identifier": "createJettyContainer", "parameters": "()", "modifiers": "public static", "return": "AthenzJettyContainer", "signature": "AthenzJettyContainer createJettyContainer()", "full_signature": "public static AthenzJettyContainer createJettyContainer()", "class_method_signature": "AthenzJettyContainer.createJettyContainer()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void run()", "full_signature": "public void run()", "class_method_signature": "AthenzJettyContainer.run()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "AthenzJettyContainer.stop()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String [] args)", "modifiers": "public static", "return": "void", "signature": "void main(String [] args)", "full_signature": "public static void main(String [] args)", "class_method_signature": "AthenzJettyContainer.main(String [] args)", "testcase": false, "constructor": false}], "file": "containers/jetty/src/main/java/com/yahoo/athenz/container/AthenzJettyContainer.java"}, "focal_method": {"identifier": "addServletHandlers", "parameters": "(String serverHostName)", "modifiers": "public", "return": "void", "body": "public void addServletHandlers(String serverHostName) {\n\n        // Handler Structure\n        \n        RewriteHandler rewriteHandler = new RewriteHandler();\n        \n        // Check whether or not to disable Keep-Alive support in Jetty.\n        // This will be the first handler in our array so we always set\n        // the appropriate header in response. However, since we're now\n        // behind ATS, we want to keep the connections alive so ATS\n        // can re-use them as necessary\n        \n        boolean keepAlive = Boolean.parseBoolean(System.getProperty(AthenzConsts.ATHENZ_PROP_KEEP_ALIVE, \"true\"));\n\n        if (!keepAlive) {\n            HeaderPatternRule disableKeepAliveRule = new HeaderPatternRule();\n            disableKeepAliveRule.setPattern(\"/*\");\n            disableKeepAliveRule.setName(HttpHeader.CONNECTION.asString());\n            disableKeepAliveRule.setValue(HttpHeaderValue.CLOSE.asString());\n            rewriteHandler.addRule(disableKeepAliveRule);\n        }\n        \n        // Return a Host field in the response so during debugging\n        // we know what server was handling request\n        \n        HeaderPatternRule hostNameRule = new HeaderPatternRule();\n        hostNameRule.setPattern(\"/*\");\n        hostNameRule.setName(HttpHeader.HOST.asString());\n        hostNameRule.setValue(serverHostName);\n        rewriteHandler.addRule(hostNameRule);\n        \n        handlers.addHandler(rewriteHandler);\n\n        ContextHandlerCollection contexts = new ContextHandlerCollection();\n\n        // check to see if gzip support is enabled\n\n        boolean gzipSupport = Boolean.parseBoolean(System.getProperty(AthenzConsts.ATHENZ_PROP_GZIP_SUPPORT, \"false\"));\n\n        if (gzipSupport) {\n            int gzipMinSize = Integer.parseInt(\n                    System.getProperty(AthenzConsts.ATHENZ_PROP_GZIP_MIN_SIZE, \"1024\"));\n\n            GzipHandler gzipHandler = new GzipHandler();\n            gzipHandler.setMinGzipSize(gzipMinSize);\n            gzipHandler.setIncludedMimeTypes(\"application/json\");\n            gzipHandler.setHandler(contexts);\n\n            handlers.addHandler(gzipHandler);\n        }\n\n        // check to see if graceful shutdown support is enabled\n        boolean gracefulShutdown = Boolean.parseBoolean(\n                System.getProperty(AthenzConsts.ATHENZ_PROP_GRACEFUL_SHUTDOWN, \"false\"));\n        if (gracefulShutdown) {\n            server.setStopAtShutdown(true);\n\n            long stopTimeout = Long.parseLong(\n                    System.getProperty(AthenzConsts.ATHENZ_PROP_GRACEFUL_SHUTDOWN_TIMEOUT, \"30000\"));\n            server.setStopTimeout(stopTimeout);\n\n            StatisticsHandler statisticsHandler = new StatisticsHandler();\n            statisticsHandler.setHandler(contexts);\n\n            handlers.addHandler(statisticsHandler);\n        }\n\n        handlers.addHandler(contexts);\n\n        // now setup our default servlet handler for filters\n        \n        ServletContextHandler servletCtxHandler = new ServletContextHandler(ServletContextHandler.SESSIONS);\n        servletCtxHandler.setContextPath(\"/\");\n        \n        FilterHolder filterHolder = new FilterHolder(HealthCheckFilter.class);\n        final String healthCheckPath = System.getProperty(AthenzConsts.ATHENZ_PROP_HEALTH_CHECK_PATH,\n                getRootDir());\n        filterHolder.setInitParameter(AthenzConsts.ATHENZ_PROP_HEALTH_CHECK_PATH, healthCheckPath);\n\n        final String checkList = System.getProperty(AthenzConsts.ATHENZ_PROP_HEALTH_CHECK_URI_LIST);\n\n        if (checkList != null && !checkList.isEmpty()) {\n            String[] checkUriArray = checkList.split(\",\");\n            for (String checkUri : checkUriArray) {\n                servletCtxHandler.addFilter(filterHolder, checkUri.trim(), EnumSet.of(DispatcherType.REQUEST));\n            }\n        }\n        contexts.addHandler(servletCtxHandler);\n\n\n        DeploymentManager deployer = new DeploymentManager();\n        \n        boolean debug = Boolean.parseBoolean(System.getProperty(AthenzConsts.ATHENZ_PROP_DEBUG, \"false\"));\n        if (debug) {\n            DebugListener debugListener = new DebugListener(System.err, true, true, true);\n            server.addBean(debugListener);\n            deployer.addLifeCycleBinding(new DebugListenerBinding(debugListener));\n        }\n        \n        deployer.setContexts(contexts);\n        deployer.setContextAttribute(\n                \"org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern\",\n                \".*/servlet-api-[^/]*\\\\.jar$\");\n\n        final String jettyHome = System.getProperty(AthenzConsts.ATHENZ_PROP_JETTY_HOME, getRootDir());\n        WebAppProvider webappProvider = new WebAppProvider();\n        webappProvider.setMonitoredDirName(jettyHome + \"/webapps\");\n        webappProvider.setScanInterval(60);\n        webappProvider.setExtractWars(true);\n        webappProvider.setConfigurationManager(new PropertiesConfigurationManager());\n        webappProvider.setParentLoaderPriority(true);\n        //setup a Default web.xml file.  file is applied to a Web application before it's own WEB_INF/web.xml \n        setDefaultsDescriptor(webappProvider, jettyHome);\n        final String jettyTemp = System.getProperty(AthenzConsts.ATHENZ_PROP_JETTY_TEMP, jettyHome + \"/temp\");\n        webappProvider.setTempDir(new File(jettyTemp));\n\n        deployer.addAppProvider(webappProvider);\n        server.addBean(deployer);\n    }", "signature": "void addServletHandlers(String serverHostName)", "full_signature": "public void addServletHandlers(String serverHostName)", "class_method_signature": "AthenzJettyContainer.addServletHandlers(String serverHostName)", "testcase": false, "constructor": false, "invocations": ["parseBoolean", "getProperty", "setPattern", "setName", "asString", "setValue", "asString", "addRule", "setPattern", "setName", "asString", "setValue", "addRule", "addHandler", "parseBoolean", "getProperty", "parseInt", "getProperty", "setMinGzipSize", "setIncludedMimeTypes", "setHandler", "addHandler", "parseBoolean", "getProperty", "setStopAtShutdown", "parseLong", "getProperty", "setStopTimeout", "setHandler", "addHandler", "addHandler", "setContextPath", "getProperty", "getRootDir", "setInitParameter", "getProperty", "isEmpty", "split", "addFilter", "trim", "of", "addHandler", "parseBoolean", "getProperty", "addBean", "addLifeCycleBinding", "setContexts", "setContextAttribute", "getProperty", "getRootDir", "setMonitoredDirName", "setScanInterval", "setExtractWars", "setConfigurationManager", "setParentLoaderPriority", "setDefaultsDescriptor", "getProperty", "setTempDir", "addAppProvider", "addBean"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}