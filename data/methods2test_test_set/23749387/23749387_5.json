{"test_class": {"identifier": "RCUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}], "file": "restcomm.android.sdk/src/test/java/org/restcomm/android/sdk/util/RCUtilsTest.java"}, "test_case": {"identifier": "validateDeviceParams_Invalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validateDeviceParams_Invalid() {\n        HashMap<String, Object> settingParams = new HashMap<String, Object>();\n\n        try {\n            settingParams = getFilledHashMapWithValidPush(settingParams);\n            getFilledWithMediaParams(settingParams);\n\n            RCUtils.validateDeviceParms(settingParams);\n        } catch (RCException ex) {\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_CALL_INTENT);\n        }\n\n        try {\n            settingParams = getFilledHashMapWithValidPush(settingParams);\n            getFilledWithMediaParams(settingParams);\n            settingParams.put(RCDevice.ParameterKeys.INTENT_INCOMING_CALL, \"intent\");\n\n            RCUtils.validateDeviceParms(settingParams);\n        } catch (RCException ex) {\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_CALL_INTENT);\n        }\n    }", "signature": "void validateDeviceParams_Invalid()", "full_signature": "@Test public void validateDeviceParams_Invalid()", "class_method_signature": "RCUtilsTest.validateDeviceParams_Invalid()", "testcase": true, "constructor": false, "invocations": ["getFilledHashMapWithValidPush", "getFilledWithMediaParams", "validateDeviceParms", "isEqualTo", "assertThat", "getFilledHashMapWithValidPush", "getFilledWithMediaParams", "put", "validateDeviceParms", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "RCUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"RCUtils\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"RCUtils\"", "var_name": "TAG"}], "methods": [{"identifier": "validateDeviceParms", "parameters": "(HashMap<String, Object> parameters)", "modifiers": "public static", "return": "void", "signature": "void validateDeviceParms(HashMap<String, Object> parameters)", "full_signature": "public static void validateDeviceParms(HashMap<String, Object> parameters)", "class_method_signature": "RCUtils.validateDeviceParms(HashMap<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "validateSettingsParms", "parameters": "(HashMap<String, Object> parameters)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "void", "signature": "void validateSettingsParms(HashMap<String, Object> parameters)", "full_signature": "@SuppressWarnings(\"unchecked\") public static void validateSettingsParms(HashMap<String, Object> parameters)", "class_method_signature": "RCUtils.validateSettingsParms(HashMap<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "validateConnectionParms", "parameters": "(HashMap<String, Object> parameters)", "modifiers": "public static", "return": "void", "signature": "void validateConnectionParms(HashMap<String, Object> parameters)", "full_signature": "public static void validateConnectionParms(HashMap<String, Object> parameters)", "class_method_signature": "RCUtils.validateConnectionParms(HashMap<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "validatePushSettings", "parameters": "(HashMap<String, Object> parameters)", "modifiers": "static", "return": "void", "signature": "void validatePushSettings(HashMap<String, Object> parameters)", "full_signature": "static void validatePushSettings(HashMap<String, Object> parameters)", "class_method_signature": "RCUtils.validatePushSettings(HashMap<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "shouldRegisterForPush", "parameters": "(HashMap<String, Object> parameters, StorageManagerInterface storageManagerInterface)", "modifiers": "public static", "return": "boolean", "signature": "boolean shouldRegisterForPush(HashMap<String, Object> parameters, StorageManagerInterface storageManagerInterface)", "full_signature": "public static boolean shouldRegisterForPush(HashMap<String, Object> parameters, StorageManagerInterface storageManagerInterface)", "class_method_signature": "RCUtils.shouldRegisterForPush(HashMap<String, Object> parameters, StorageManagerInterface storageManagerInterface)", "testcase": false, "constructor": false}], "file": "restcomm.android.sdk/src/main/java/org/restcomm/android/sdk/util/RCUtils.java"}, "focal_method": {"identifier": "validateDeviceParms", "parameters": "(HashMap<String, Object> parameters)", "modifiers": "public static", "return": "void", "body": "public static void validateDeviceParms(HashMap<String, Object> parameters) throws RCException\n    {\n        validateSettingsParms(parameters);\n\n        if (!parameters.containsKey(RCDevice.ParameterKeys.INTENT_INCOMING_CALL)) {\n            throw new RCException(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_CALL_INTENT);\n        } else {\n            if (parameters.get(RCDevice.ParameterKeys.INTENT_INCOMING_CALL) instanceof String){\n                try {\n                    Intent.parseUri((String) parameters.get(RCDevice.ParameterKeys.INTENT_INCOMING_CALL), Intent.URI_INTENT_SCHEME);\n                } catch (URISyntaxException e) {\n                    throw new RCException(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_CALL_INTENT);\n                }\n            }\n        }\n        if (!parameters.containsKey(RCDevice.ParameterKeys.INTENT_INCOMING_MESSAGE)) {\n            RCLogger.w(TAG, \"validateDeviceParms(): Intent missing for incoming text messages, your App will work but won't be able to be notified on such event\");\n        }\n\n\n        //return new ErrorStruct(RCClient.ErrorCodes.SUCCESS);\n    }", "signature": "void validateDeviceParms(HashMap<String, Object> parameters)", "full_signature": "public static void validateDeviceParms(HashMap<String, Object> parameters)", "class_method_signature": "RCUtils.validateDeviceParms(HashMap<String, Object> parameters)", "testcase": false, "constructor": false, "invocations": ["validateSettingsParms", "containsKey", "get", "parseUri", "get", "containsKey", "w"]}, "repository": {"repo_id": 23749387, "url": "https://github.com/RestComm/restcomm-android-sdk", "language": "Java", "is_fork": false, "fork_count": 102, "stargazer_count": 129, "size": 28987, "license": "licensed"}}