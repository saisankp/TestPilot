{"test_class": {"identifier": "OnlineLogLikelihoodTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/clustering/lda/OnlineLogLikelihoodTest.java"}, "test_case": {"identifier": "testCalc", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCalc() {\n\t\tList <Vector> data = new ArrayList <>();\n\n\t\tRow[] testArray =\n\t\t\tnew Row[]{\n\t\t\t\tRow.of(new Object[]{0, \"0:1 1:2 2:6 3:0 4:2 5:3 6:1 7:1 8:0 9:0 10:3\"}),\n\t\t\t\tRow.of(new Object[]{1, \"0:1 1:3 2:0 3:1 4:3 5:0 6:0 7:2 8:0 9:0 10:1\"}),\n\t\t\t\tRow.of(new Object[]{2, \"0:1 1:4 2:1 3:0 4:0 5:4 6:9 7:0 8:1 9:2 10:0\"}),\n\t\t\t\tRow.of(new Object[]{3, \"0:2 1:1 2:0 3:3 4:0 5:0 6:5 7:0 8:2 9:3 10:9\"}),\n\t\t\t\tRow.of(new Object[]{4, \"0:3 1:1 2:1 3:9 4:3 5:0 6:2 7:0 8:0 9:1 10:3\"}),\n\t\t\t\tRow.of(new Object[]{5, \"0:4 1:2 2:0 3:3 4:4 5:5 6:1 7:1 8:1 9:4 10:0\"}),\n\t\t\t\tRow.of(new Object[]{6, \"0:2 1:1 2:0 3:3 4:0 5:0 6:5 7:0 8:2 9:2 10:9\"}),\n\t\t\t\tRow.of(new Object[]{7, \"0:1 1:1 2:1 3:9 4:2 5:1 6:2 7:0 8:0 9:1 10:3\"}),\n\t\t\t\tRow.of(new Object[]{8, \"0:4 1:4 2:0 3:3 4:4 5:2 6:1 7:3 8:0 9:0 10:0\"}),\n\t\t\t\tRow.of(new Object[]{9, \"0:2 1:8 2:2 3:0 4:3 5:0 6:2 7:0 8:2 9:7 10:2\"}),\n\t\t\t\tRow.of(new Object[]{10, \"0:1 1:1 2:1 3:9 4:0 5:2 6:2 7:0 8:0 9:3 10:3\"}),\n\t\t\t\tRow.of(new Object[]{11, \"0:4 1:1 2:0 3:0 4:4 5:5 6:1 7:3 8:0 9:1 10:0\"})\n\t\t\t};\n\n\t\tfor (int i = 0; i < testArray.length; i++) {\n\t\t\tdata.add(VectorUtil.parseSparse((String) testArray[i].getField(1)));\n\t\t}\n\n\t\tint row = 11;\n\t\tint col = 5;\n\n\t\tdouble[] temp = new double[] {0.8936825549031158,\n\t\t\t0.9650683744577933,\n\t\t\t1.1760851442955271,\n\t\t\t0.889011463028263,\n\t\t\t1.0355502890838704,\n\t\t\t1.1720254142865503,\n\t\t\t0.8496512959061578,\n\t\t\t1.1564109073902848,\n\t\t\t0.8528198328651976,\n\t\t\t1.072261907065107,\n\t\t\t1.0112487630821958,\n\t\t\t1.0288027427394206,\n\t\t\t1.1256918577237478,\n\t\t\t1.0641131417250107,\n\t\t\t0.9830788207753957,\n\t\t\t0.9519235842178695,\n\t\t\t1.0531103642783968,\n\t\t\t1.0846663792488604,\n\t\t\t0.9317316401779444,\n\t\t\t0.9816247167440154,\n\t\t\t0.953061129524052,\n\t\t\t0.8836097897537777,\n\t\t\t0.8539728772760822,\n\t\t\t1.109432137460693,\n\t\t\t0.9801693423689286,\n\t\t\t0.9385725168762017,\n\t\t\t1.009886079821316,\n\t\t\t0.9741390218380398,\n\t\t\t0.8734624459614093,\n\t\t\t0.8548583255850564,\n\t\t\t0.8934120594879987,\n\t\t\t1.0200469492393616,\n\t\t\t0.9461610896051537,\n\t\t\t1.1912819895664948,\n\t\t\t0.9650275833536232,\n\t\t\t0.9312815665885328,\n\t\t\t0.984681817963758,\n\t\t\t1.1412711858668625,\n\t\t\t1.1159082714127344,\n\t\t\t1.0219124026668207,\n\t\t\t1.1052645047308647,\n\t\t\t1.1380919062139254,\n\t\t\t0.9684793634316371,\n\t\t\t1.023922805813918,\n\t\t\t1.0777999541431174,\n\t\t\t0.8730213177341947,\n\t\t\t1.0353598060502658,\n\t\t\t1.047104264664753,\n\t\t\t1.1284793487722498,\n\t\t\t0.8898021261569816,\n\t\t\t1.1634869627283706,\n\t\t\t0.817874601150865,\n\t\t\t1.0424867867765728,\n\t\t\t1.167773175905418,\n\t\t\t0.915224402643435};\n\n\t\tDenseMatrix lambda = new DenseMatrix(row, col, temp, false).transpose();\n\n\t\tDenseMatrix alpha = new DenseMatrix(5, 1, new double[] {0.2, 0.3, 0.4, 0.5, 0.6});\n\n\t\tDenseMatrix gammad = new DenseMatrix(5, 1, new double[] {0.7, 0.8, 0.9, 1.0, 1.1});\n\n\t\tint numTopic = 5;\n\t\tint vocabularySize = 11;\n\t\tdouble beta = 0.2;\n\t\tint taskNum = 1;\n\n\t\tdouble loglikelihood = OnlineLogLikelihood.logLikelihood(data, lambda, alpha, gammad,\n\t\t\tnumTopic, vocabularySize, beta, taskNum);\n\n\t\tAssert.assertEquals(-833.0890905595685, loglikelihood, 10e-4);\n\n\t\tSystem.out.println(\"loglikelihood: \" + loglikelihood);\n\t}", "signature": "void testCalc()", "full_signature": "@Test public void testCalc()", "class_method_signature": "OnlineLogLikelihoodTest.testCalc()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "add", "parseSparse", "getField", "transpose", "logLikelihood", "assertEquals", "println"]}, "focal_class": {"identifier": "OnlineLogLikelihood", "superclass": "extends ComputeFunction", "interfaces": "", "fields": [{"original_string": "private double beta;", "modifier": "private", "type": "double", "declarator": "beta", "var_name": "beta"}, {"original_string": "private int numTopic;", "modifier": "private", "type": "int", "declarator": "numTopic", "var_name": "numTopic"}, {"original_string": "private int numIter;", "modifier": "private", "type": "int", "declarator": "numIter", "var_name": "numIter"}], "methods": [{"identifier": "OnlineLogLikelihood", "parameters": "(double beta, int numTopic, int numIter)", "modifiers": "public", "return": "", "signature": " OnlineLogLikelihood(double beta, int numTopic, int numIter)", "full_signature": "public  OnlineLogLikelihood(double beta, int numTopic, int numIter)", "class_method_signature": "OnlineLogLikelihood.OnlineLogLikelihood(double beta, int numTopic, int numIter)", "testcase": false, "constructor": true}, {"identifier": "logLikelihood", "parameters": "(List <Vector> data, DenseMatrix lambda, DenseMatrix alpha, DenseMatrix gammad,\n\t\t\t\t\t\t\t\t\t   int numTopic, int vocabularySize, double beta, int taskNum)", "modifiers": "public static", "return": "double", "signature": "double logLikelihood(List <Vector> data, DenseMatrix lambda, DenseMatrix alpha, DenseMatrix gammad,\n\t\t\t\t\t\t\t\t\t   int numTopic, int vocabularySize, double beta, int taskNum)", "full_signature": "public static double logLikelihood(List <Vector> data, DenseMatrix lambda, DenseMatrix alpha, DenseMatrix gammad,\n\t\t\t\t\t\t\t\t\t   int numTopic, int vocabularySize, double beta, int taskNum)", "class_method_signature": "OnlineLogLikelihood.logLikelihood(List <Vector> data, DenseMatrix lambda, DenseMatrix alpha, DenseMatrix gammad,\n\t\t\t\t\t\t\t\t\t   int numTopic, int vocabularySize, double beta, int taskNum)", "testcase": false, "constructor": false}, {"identifier": "logSumExp", "parameters": "(DenseMatrix dm)", "modifiers": "public static", "return": "double", "signature": "double logSumExp(DenseMatrix dm)", "full_signature": "public static double logSumExp(DenseMatrix dm)", "class_method_signature": "OnlineLogLikelihood.logSumExp(DenseMatrix dm)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(ComContext context)", "modifiers": "@Override public", "return": "void", "signature": "void calc(ComContext context)", "full_signature": "@Override public void calc(ComContext context)", "class_method_signature": "OnlineLogLikelihood.calc(ComContext context)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/clustering/lda/OnlineLogLikelihood.java"}, "focal_method": {"identifier": "calc", "parameters": "(ComContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void calc(ComContext context) {\n\n\t\tdouble[] logLikeliHooks = new double[]{0};\n\t\tcontext.putObj(LdaVariable.logLikelihood, logLikeliHooks);\n\t\tif (context.getStepNo() == numIter) {\n\t\t\tTuple2<Long, Integer> tuple2 = ((List<Tuple2<Long, Integer>>) context.getObj(LdaVariable.shape)).get(0);\n\t\t\tint vocabularySize = tuple2.f1;\n\n\t\t\tDenseMatrix lambda = context.getObj(LdaVariable.lambda);\n\t\t\tDenseMatrix alpha = context.getObj(LdaVariable.alpha);\n\n\t\t\t//get data\n\t\t\tList<Vector> data = context.getObj(LdaVariable.data);\n\n\t\t\tint taskNum = context.getNumTask();\n\n\t\t\tDenseMatrix gammad = null;\n\n\t\t\tdouble logLikelihood = logLikelihood(data, lambda, alpha, gammad,\n\t\t\t\tnumTopic, vocabularySize, beta, taskNum);\n\n\t\t\tlogLikeliHooks[0] = logLikelihood;\n\t\t\tcontext.putObj(LdaVariable.logLikelihood, logLikeliHooks);\n\t\t}\n\t}", "signature": "void calc(ComContext context)", "full_signature": "@Override public void calc(ComContext context)", "class_method_signature": "OnlineLogLikelihood.calc(ComContext context)", "testcase": false, "constructor": false, "invocations": ["putObj", "getStepNo", "get", "getObj", "getObj", "getObj", "getObj", "getNumTask", "logLikelihood", "putObj"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}