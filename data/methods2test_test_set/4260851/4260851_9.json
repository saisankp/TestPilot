{"test_class": {"identifier": "StringSequenceValueGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "DbSetup-core/src/test/java/com/ninja_squad/dbsetup/generator/StringSequenceValueGeneratorTest.java"}, "test_case": {"identifier": "startsAtOne", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void startsAtOne() {\n        assertEquals(\"CODE_1\", ValueGenerators.stringSequence(\"CODE_\").nextValue());\n    }", "signature": "void startsAtOne()", "full_signature": "@Test public void startsAtOne()", "class_method_signature": "StringSequenceValueGeneratorTest.startsAtOne()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "nextValue", "stringSequence"]}, "focal_class": {"identifier": "StringSequenceValueGenerator", "superclass": "", "interfaces": "implements ValueGenerator<String>", "fields": [{"original_string": "private String prefix;", "modifier": "private", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "private long next;", "modifier": "private", "type": "long", "declarator": "next", "var_name": "next"}, {"original_string": "private int increment;", "modifier": "private", "type": "int", "declarator": "increment", "var_name": "increment"}, {"original_string": "private int paddedNumberLength;", "modifier": "private", "type": "int", "declarator": "paddedNumberLength", "var_name": "paddedNumberLength"}], "methods": [{"identifier": "StringSequenceValueGenerator", "parameters": "(String prefix)", "modifiers": "", "return": "", "signature": " StringSequenceValueGenerator(String prefix)", "full_signature": "  StringSequenceValueGenerator(String prefix)", "class_method_signature": "StringSequenceValueGenerator.StringSequenceValueGenerator(String prefix)", "testcase": false, "constructor": true}, {"identifier": "StringSequenceValueGenerator", "parameters": "(String prefix, long next, int increment, int paddedNumberLength)", "modifiers": "private", "return": "", "signature": " StringSequenceValueGenerator(String prefix, long next, int increment, int paddedNumberLength)", "full_signature": "private  StringSequenceValueGenerator(String prefix, long next, int increment, int paddedNumberLength)", "class_method_signature": "StringSequenceValueGenerator.StringSequenceValueGenerator(String prefix, long next, int increment, int paddedNumberLength)", "testcase": false, "constructor": true}, {"identifier": "withLeftPadding", "parameters": "(int paddedNumberLength)", "modifiers": "public", "return": "StringSequenceValueGenerator", "signature": "StringSequenceValueGenerator withLeftPadding(int paddedNumberLength)", "full_signature": "public StringSequenceValueGenerator withLeftPadding(int paddedNumberLength)", "class_method_signature": "StringSequenceValueGenerator.withLeftPadding(int paddedNumberLength)", "testcase": false, "constructor": false}, {"identifier": "withoutLeftPadding", "parameters": "()", "modifiers": "public", "return": "StringSequenceValueGenerator", "signature": "StringSequenceValueGenerator withoutLeftPadding()", "full_signature": "public StringSequenceValueGenerator withoutLeftPadding()", "class_method_signature": "StringSequenceValueGenerator.withoutLeftPadding()", "testcase": false, "constructor": false}, {"identifier": "startingAt", "parameters": "(long start)", "modifiers": "public", "return": "StringSequenceValueGenerator", "signature": "StringSequenceValueGenerator startingAt(long start)", "full_signature": "public StringSequenceValueGenerator startingAt(long start)", "class_method_signature": "StringSequenceValueGenerator.startingAt(long start)", "testcase": false, "constructor": false}, {"identifier": "incrementingBy", "parameters": "(int increment)", "modifiers": "public", "return": "StringSequenceValueGenerator", "signature": "StringSequenceValueGenerator incrementingBy(int increment)", "full_signature": "public StringSequenceValueGenerator incrementingBy(int increment)", "class_method_signature": "StringSequenceValueGenerator.incrementingBy(int increment)", "testcase": false, "constructor": false}, {"identifier": "nextValue", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String nextValue()", "full_signature": "@Override public String nextValue()", "class_method_signature": "StringSequenceValueGenerator.nextValue()", "testcase": false, "constructor": false}, {"identifier": "leftPadIfNecessary", "parameters": "(long number)", "modifiers": "private", "return": "String", "signature": "String leftPadIfNecessary(long number)", "full_signature": "private String leftPadIfNecessary(long number)", "class_method_signature": "StringSequenceValueGenerator.leftPadIfNecessary(long number)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StringSequenceValueGenerator.toString()", "testcase": false, "constructor": false}], "file": "DbSetup-core/src/main/java/com/ninja_squad/dbsetup/generator/StringSequenceValueGenerator.java"}, "focal_method": {"identifier": "nextValue", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String nextValue() {\n        long number = next;\n        next += increment;\n        return prefix + leftPadIfNecessary(number);\n    }", "signature": "String nextValue()", "full_signature": "@Override public String nextValue()", "class_method_signature": "StringSequenceValueGenerator.nextValue()", "testcase": false, "constructor": false, "invocations": ["leftPadIfNecessary"]}, "repository": {"repo_id": 4260851, "url": "https://github.com/Ninja-Squad/DbSetup", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 183, "size": 1379, "license": "licensed"}}