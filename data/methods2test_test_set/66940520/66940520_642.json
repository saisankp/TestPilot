{"test_class": {"identifier": "BiMonthlyPeriodTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DateTime startDate;", "modifier": "private", "type": "DateTime", "declarator": "startDate", "var_name": "startDate"}, {"original_string": "private DateTime endDate;", "modifier": "private", "type": "DateTime", "declarator": "endDate", "var_name": "endDate"}, {"original_string": "private DateTime testDate;", "modifier": "private", "type": "DateTime", "declarator": "testDate", "var_name": "testDate"}, {"original_string": "private BiMonthlyPeriodType periodType;", "modifier": "private", "type": "BiMonthlyPeriodType", "declarator": "periodType", "var_name": "periodType"}], "file": "dhis-2/dhis-api/src/test/java/org/hisp/dhis/period/BiMonthlyPeriodTypeTest.java"}, "test_case": {"identifier": "testGetRewindedDate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRewindedDate()\n    {\n        assertEquals( new DateTime( 2020, 1, 5, 0, 0 ).toDate(),\n            periodType.getRewindedDate( new DateTime( 2020, 7, 5, 0, 0 ).toDate(), 3 ) );\n\n        assertEquals( new DateTime( 2020, 10, 10, 0, 0 ).toDate(),\n            periodType.getRewindedDate( new DateTime( 2020, 6, 10, 0, 0 ).toDate(), -2 ) );\n    }", "signature": "void testGetRewindedDate()", "full_signature": "@Test public void testGetRewindedDate()", "class_method_signature": "BiMonthlyPeriodTypeTest.testGetRewindedDate()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toDate", "getRewindedDate", "toDate", "assertEquals", "toDate", "getRewindedDate", "toDate"]}, "focal_class": {"identifier": "BiMonthlyPeriodType", "superclass": "extends CalendarPeriodType", "interfaces": "", "fields": [{"original_string": "private static final String ISO_FORMAT = \"yyyyMMB\";", "modifier": "private static final", "type": "String", "declarator": "ISO_FORMAT = \"yyyyMMB\"", "var_name": "ISO_FORMAT"}, {"original_string": "private static final String ISO8601_DURATION = \"P2M\";", "modifier": "private static final", "type": "String", "declarator": "ISO8601_DURATION = \"P2M\"", "var_name": "ISO8601_DURATION"}, {"original_string": "public static final String NAME = \"BiMonthly\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"BiMonthly\"", "var_name": "NAME"}, {"original_string": "public static final int FREQUENCY_ORDER = 61;", "modifier": "public static final", "type": "int", "declarator": "FREQUENCY_ORDER = 61", "var_name": "FREQUENCY_ORDER"}, {"original_string": "public static final String SQL_INTERVAL = \"2 months\";", "modifier": "public static final", "type": "String", "declarator": "SQL_INTERVAL = \"2 months\"", "var_name": "SQL_INTERVAL"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "BiMonthlyPeriodType.getName()", "testcase": false, "constructor": false}, {"identifier": "createPeriod", "parameters": "( DateTimeUnit dateTimeUnit, Calendar calendar )", "modifiers": "@Override public", "return": "Period", "signature": "Period createPeriod( DateTimeUnit dateTimeUnit, Calendar calendar )", "full_signature": "@Override public Period createPeriod( DateTimeUnit dateTimeUnit, Calendar calendar )", "class_method_signature": "BiMonthlyPeriodType.createPeriod( DateTimeUnit dateTimeUnit, Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "getFrequencyOrder", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getFrequencyOrder()", "full_signature": "@Override public int getFrequencyOrder()", "class_method_signature": "BiMonthlyPeriodType.getFrequencyOrder()", "testcase": false, "constructor": false}, {"identifier": "getSqlInterval", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSqlInterval()", "full_signature": "@Override public String getSqlInterval()", "class_method_signature": "BiMonthlyPeriodType.getSqlInterval()", "testcase": false, "constructor": false}, {"identifier": "getDateWithOffset", "parameters": "(  DateTimeUnit dateTimeUnit, int offset, Calendar calendar )", "modifiers": "@Override public", "return": "DateTimeUnit", "signature": "DateTimeUnit getDateWithOffset(  DateTimeUnit dateTimeUnit, int offset, Calendar calendar )", "full_signature": "@Override public DateTimeUnit getDateWithOffset(  DateTimeUnit dateTimeUnit, int offset, Calendar calendar )", "class_method_signature": "BiMonthlyPeriodType.getDateWithOffset(  DateTimeUnit dateTimeUnit, int offset, Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "generatePeriods", "parameters": "( DateTimeUnit dateTimeUnit )", "modifiers": "@Override public", "return": "List<Period>", "signature": "List<Period> generatePeriods( DateTimeUnit dateTimeUnit )", "full_signature": "@Override public List<Period> generatePeriods( DateTimeUnit dateTimeUnit )", "class_method_signature": "BiMonthlyPeriodType.generatePeriods( DateTimeUnit dateTimeUnit )", "testcase": false, "constructor": false}, {"identifier": "generateRollingPeriods", "parameters": "( DateTimeUnit dateTimeUnit, Calendar calendar )", "modifiers": "@Override public", "return": "List<Period>", "signature": "List<Period> generateRollingPeriods( DateTimeUnit dateTimeUnit, Calendar calendar )", "full_signature": "@Override public List<Period> generateRollingPeriods( DateTimeUnit dateTimeUnit, Calendar calendar )", "class_method_signature": "BiMonthlyPeriodType.generateRollingPeriods( DateTimeUnit dateTimeUnit, Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "getIsoDate", "parameters": "( DateTimeUnit dateTimeUnit, Calendar calendar )", "modifiers": "@Override public", "return": "String", "signature": "String getIsoDate( DateTimeUnit dateTimeUnit, Calendar calendar )", "full_signature": "@Override public String getIsoDate( DateTimeUnit dateTimeUnit, Calendar calendar )", "class_method_signature": "BiMonthlyPeriodType.getIsoDate( DateTimeUnit dateTimeUnit, Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "getIsoFormat", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getIsoFormat()", "full_signature": "@Override public String getIsoFormat()", "class_method_signature": "BiMonthlyPeriodType.getIsoFormat()", "testcase": false, "constructor": false}, {"identifier": "getRewindedDate", "parameters": "( Date date, Integer rewindedPeriods )", "modifiers": "@Override public", "return": "Date", "signature": "Date getRewindedDate( Date date, Integer rewindedPeriods )", "full_signature": "@Override public Date getRewindedDate( Date date, Integer rewindedPeriods )", "class_method_signature": "BiMonthlyPeriodType.getRewindedDate( Date date, Integer rewindedPeriods )", "testcase": false, "constructor": false}, {"identifier": "getIso8601Duration", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getIso8601Duration()", "full_signature": "@Override public String getIso8601Duration()", "class_method_signature": "BiMonthlyPeriodType.getIso8601Duration()", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/period/BiMonthlyPeriodType.java"}, "focal_method": {"identifier": "getRewindedDate", "parameters": "( Date date, Integer rewindedPeriods )", "modifiers": "@Override public", "return": "Date", "body": "@Override\n    public Date getRewindedDate( Date date, Integer rewindedPeriods )\n    {\n        Calendar cal = getCalendar();\n\n        date = date != null ? date : new Date();\n        rewindedPeriods = rewindedPeriods != null ? rewindedPeriods : 1;\n\n        DateTimeUnit dateTimeUnit = cal.fromIso( DateTimeUnit.fromJdkDate( date ) );\n        dateTimeUnit = cal.minusMonths( dateTimeUnit, rewindedPeriods * 2 );\n\n        return cal.toIso( dateTimeUnit ).toJdkDate();\n    }", "signature": "Date getRewindedDate( Date date, Integer rewindedPeriods )", "full_signature": "@Override public Date getRewindedDate( Date date, Integer rewindedPeriods )", "class_method_signature": "BiMonthlyPeriodType.getRewindedDate( Date date, Integer rewindedPeriods )", "testcase": false, "constructor": false, "invocations": ["getCalendar", "fromIso", "fromJdkDate", "minusMonths", "toJdkDate", "toIso"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}