{"test_class": {"identifier": "DatumEncoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/src/test/java/macrobase/ingest/DatumEncoderTest.java"}, "test_case": {"identifier": "copyTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void copyTest() {\n        DatumEncoder e1 = new DatumEncoder();\n        e1.recordAttributeName(0, \"foo\");\n        int encoded1 = e1.getIntegerEncoding(0, \"attrValue1\");\n        int encoded2 = e1.getIntegerEncoding(0, \"attrValue2\");\n        e1.recordAttributeName(1, \"bar\");\n        int encoded3 = e1.getIntegerEncoding(1, \"attrValue3\");\n\n        DatumEncoder e2 = new DatumEncoder();\n        e2.copy(e1);\n\n        assertEquals(\"foo\", e2.getAttribute(encoded1).getColumn());\n        assertEquals(\"bar\", e2.getAttribute(encoded3).getColumn());\n        assertEquals(\"attrValue3\", e2.getAttribute(encoded3).getValue());\n\n        int encoded4 = e2.getIntegerEncoding(1, \"attrValue4\");\n        assertEquals(\"attrValue4\", e2.getAttribute(encoded4).getValue());\n    }", "signature": "void copyTest()", "full_signature": "@Test public void copyTest()", "class_method_signature": "DatumEncoderTest.copyTest()", "testcase": true, "constructor": false, "invocations": ["recordAttributeName", "getIntegerEncoding", "getIntegerEncoding", "recordAttributeName", "getIntegerEncoding", "copy", "assertEquals", "getColumn", "getAttribute", "assertEquals", "getColumn", "getAttribute", "assertEquals", "getValue", "getAttribute", "getIntegerEncoding", "assertEquals", "getValue", "getAttribute"]}, "focal_class": {"identifier": "DatumEncoder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DatumEncoder.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DatumEncoder.class)", "var_name": "log"}, {"original_string": "private HashMap<Integer, String> attributeDimensionNameMap = new HashMap<>();", "modifier": "private", "type": "HashMap<Integer, String>", "declarator": "attributeDimensionNameMap = new HashMap<>()", "var_name": "attributeDimensionNameMap"}, {"original_string": "private HashMap<Integer, Map<String, Integer>> integerEncoding = new HashMap<>();", "modifier": "private", "type": "HashMap<Integer, Map<String, Integer>>", "declarator": "integerEncoding = new HashMap<>()", "var_name": "integerEncoding"}, {"original_string": "private HashMap<Integer, Integer> integerToColumn = new HashMap<>();", "modifier": "private", "type": "HashMap<Integer, Integer>", "declarator": "integerToColumn = new HashMap<>()", "var_name": "integerToColumn"}, {"original_string": "private Integer nextKey = 0;", "modifier": "private", "type": "Integer", "declarator": "nextKey = 0", "var_name": "nextKey"}], "methods": [{"identifier": "DatumEncoder", "parameters": "()", "modifiers": "public", "return": "", "signature": " DatumEncoder()", "full_signature": "public  DatumEncoder()", "class_method_signature": "DatumEncoder.DatumEncoder()", "testcase": false, "constructor": true}, {"identifier": "copy", "parameters": "(DatumEncoder other)", "modifiers": "public", "return": "void", "signature": "void copy(DatumEncoder other)", "full_signature": "public void copy(DatumEncoder other)", "class_method_signature": "DatumEncoder.copy(DatumEncoder other)", "testcase": false, "constructor": false}, {"identifier": "recordAttributeName", "parameters": "(int dimension, String attribute)", "modifiers": "public", "return": "void", "signature": "void recordAttributeName(int dimension, String attribute)", "full_signature": "public void recordAttributeName(int dimension, String attribute)", "class_method_signature": "DatumEncoder.recordAttributeName(int dimension, String attribute)", "testcase": false, "constructor": false}, {"identifier": "getAttributeName", "parameters": "(Integer dimension)", "modifiers": "public", "return": "String", "signature": "String getAttributeName(Integer dimension)", "full_signature": "public String getAttributeName(Integer dimension)", "class_method_signature": "DatumEncoder.getAttributeName(Integer dimension)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(int encodedAttr)", "modifiers": "public", "return": "ColumnValue", "signature": "ColumnValue getAttribute(int encodedAttr)", "full_signature": "public ColumnValue getAttribute(int encodedAttr)", "class_method_signature": "DatumEncoder.getAttribute(int encodedAttr)", "testcase": false, "constructor": false}, {"identifier": "getColsFromAttrSet", "parameters": "(Set<Integer> attrs)", "modifiers": "public", "return": "List<ColumnValue>", "signature": "List<ColumnValue> getColsFromAttrSet(Set<Integer> attrs)", "full_signature": "public List<ColumnValue> getColsFromAttrSet(Set<Integer> attrs)", "class_method_signature": "DatumEncoder.getColsFromAttrSet(Set<Integer> attrs)", "testcase": false, "constructor": false}, {"identifier": "getColsFromAttr", "parameters": "(Integer item)", "modifiers": "public", "return": "List<ColumnValue>", "signature": "List<ColumnValue> getColsFromAttr(Integer item)", "full_signature": "public List<ColumnValue> getColsFromAttr(Integer item)", "class_method_signature": "DatumEncoder.getColsFromAttr(Integer item)", "testcase": false, "constructor": false}, {"identifier": "getIntegerEncoding", "parameters": "(int dimension, String attr)", "modifiers": "public", "return": "int", "signature": "int getIntegerEncoding(int dimension, String attr)", "full_signature": "public int getIntegerEncoding(int dimension, String attr)", "class_method_signature": "DatumEncoder.getIntegerEncoding(int dimension, String attr)", "testcase": false, "constructor": false}, {"identifier": "getNextKey", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNextKey()", "full_signature": "public int getNextKey()", "class_method_signature": "DatumEncoder.getNextKey()", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/macrobase/ingest/DatumEncoder.java"}, "focal_method": {"identifier": "copy", "parameters": "(DatumEncoder other)", "modifiers": "public", "return": "void", "body": "public void copy(DatumEncoder other) {\n        attributeDimensionNameMap.clear();\n        for (Map.Entry<Integer, String> entry : other.attributeDimensionNameMap.entrySet()) {\n            attributeDimensionNameMap.put(entry.getKey(), entry.getValue());\n        }\n\n        integerEncoding.clear();\n        for (Map.Entry<Integer, Map<String, Integer>> entry :\n                other.integerEncoding.entrySet()) {\n            integerEncoding.put(entry.getKey(), entry.getValue());\n        }\n\n        integerToColumn.clear();\n        for (Map.Entry<Integer, Integer> entry :\n                other.integerToColumn.entrySet()) {\n            integerToColumn.put(entry.getKey(), entry.getValue());\n        }\n\n        nextKey = other.nextKey;\n    }", "signature": "void copy(DatumEncoder other)", "full_signature": "public void copy(DatumEncoder other)", "class_method_signature": "DatumEncoder.copy(DatumEncoder other)", "testcase": false, "constructor": false, "invocations": ["clear", "entrySet", "put", "getKey", "getValue", "clear", "entrySet", "put", "getKey", "getValue", "clear", "entrySet", "put", "getKey", "getValue"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}