{"test_class": {"identifier": "PermissionTest", "superclass": "extends Assert", "interfaces": "", "fields": [], "file": "fathom-security/src/test/java/fathom/authz/PermissionTest.java"}, "test_case": {"identifier": "testWildcards", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWildcards() {\n        Permission p1, p2, p3, p4, p5, p6, p7, p8;\n\n        p1 = new Permission(\"*\");\n        p2 = new Permission(\"one\");\n        p3 = new Permission(\"one:two\");\n        p4 = new Permission(\"one,two:three,four\");\n        p5 = new Permission(\"one,two:three,four,five:six:seven,eight\");\n        assertTrue(p1.implies(p2));\n        assertTrue(p1.implies(p3));\n        assertTrue(p1.implies(p4));\n        assertTrue(p1.implies(p5));\n\n        p1 = new Permission(\"newsletter:*\");\n        p2 = new Permission(\"newsletter:read\");\n        p3 = new Permission(\"newsletter:read,write\");\n        p4 = new Permission(\"newsletter:*\");\n        p5 = new Permission(\"newsletter:*:*\");\n        p6 = new Permission(\"newsletter:*:read\");\n        p7 = new Permission(\"newsletter:write:*\");\n        p8 = new Permission(\"newsletter:read,write:*\");\n        assertTrue(p1.implies(p2));\n        assertTrue(p1.implies(p3));\n        assertTrue(p1.implies(p4));\n        assertTrue(p1.implies(p5));\n        assertTrue(p1.implies(p6));\n        assertTrue(p1.implies(p7));\n        assertTrue(p1.implies(p8));\n\n\n        p1 = new Permission(\"newsletter:*:*\");\n        assertTrue(p1.implies(p2));\n        assertTrue(p1.implies(p3));\n        assertTrue(p1.implies(p4));\n        assertTrue(p1.implies(p5));\n        assertTrue(p1.implies(p6));\n        assertTrue(p1.implies(p7));\n        assertTrue(p1.implies(p8));\n\n        p1 = new Permission(\"newsletter:*:*:*\");\n        assertTrue(p1.implies(p2));\n        assertTrue(p1.implies(p3));\n        assertTrue(p1.implies(p4));\n        assertTrue(p1.implies(p5));\n        assertTrue(p1.implies(p6));\n        assertTrue(p1.implies(p7));\n        assertTrue(p1.implies(p8));\n\n        p1 = new Permission(\"newsletter:*:read\");\n        p2 = new Permission(\"newsletter:123:read\");\n        p3 = new Permission(\"newsletter:123,456:read,write\");\n        p4 = new Permission(\"newsletter:read\");\n        p5 = new Permission(\"newsletter:read,write\");\n        p6 = new Permission(\"newsletter:123:read:write\");\n        assertTrue(p1.implies(p2));\n        assertFalse(p1.implies(p3));\n        assertFalse(p1.implies(p4));\n        assertFalse(p1.implies(p5));\n        assertTrue(p1.implies(p6));\n\n        p1 = new Permission(\"newsletter:*:read:*\");\n        assertTrue(p1.implies(p2));\n        assertTrue(p1.implies(p6));\n\n    }", "signature": "void testWildcards()", "full_signature": "@Test public void testWildcards()", "class_method_signature": "PermissionTest.testWildcards()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertFalse", "implies", "assertFalse", "implies", "assertFalse", "implies", "assertTrue", "implies", "assertTrue", "implies", "assertTrue", "implies"]}, "focal_class": {"identifier": "Permission", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "protected static final String WILDCARD_TOKEN = \"*\";", "modifier": "protected static final", "type": "String", "declarator": "WILDCARD_TOKEN = \"*\"", "var_name": "WILDCARD_TOKEN"}, {"original_string": "protected static final String PART_DIVIDER_TOKEN = \":\";", "modifier": "protected static final", "type": "String", "declarator": "PART_DIVIDER_TOKEN = \":\"", "var_name": "PART_DIVIDER_TOKEN"}, {"original_string": "protected static final String SUBPART_DIVIDER_TOKEN = \",\";", "modifier": "protected static final", "type": "String", "declarator": "SUBPART_DIVIDER_TOKEN = \",\"", "var_name": "SUBPART_DIVIDER_TOKEN"}, {"original_string": "protected static final boolean DEFAULT_CASE_SENSITIVE = false;", "modifier": "protected static final", "type": "boolean", "declarator": "DEFAULT_CASE_SENSITIVE = false", "var_name": "DEFAULT_CASE_SENSITIVE"}, {"original_string": "private List<Set<String>> parts;", "modifier": "private", "type": "List<Set<String>>", "declarator": "parts", "var_name": "parts"}], "methods": [{"identifier": "Permission", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Permission()", "full_signature": "protected  Permission()", "class_method_signature": "Permission.Permission()", "testcase": false, "constructor": true}, {"identifier": "Permission", "parameters": "(String wildcardString)", "modifiers": "public", "return": "", "signature": " Permission(String wildcardString)", "full_signature": "public  Permission(String wildcardString)", "class_method_signature": "Permission.Permission(String wildcardString)", "testcase": false, "constructor": true}, {"identifier": "Permission", "parameters": "(String wildcardString, boolean caseSensitive)", "modifiers": "public", "return": "", "signature": " Permission(String wildcardString, boolean caseSensitive)", "full_signature": "public  Permission(String wildcardString, boolean caseSensitive)", "class_method_signature": "Permission.Permission(String wildcardString, boolean caseSensitive)", "testcase": false, "constructor": true}, {"identifier": "setParts", "parameters": "(String wildcardString, boolean caseSensitive)", "modifiers": "protected", "return": "void", "signature": "void setParts(String wildcardString, boolean caseSensitive)", "full_signature": "protected void setParts(String wildcardString, boolean caseSensitive)", "class_method_signature": "Permission.setParts(String wildcardString, boolean caseSensitive)", "testcase": false, "constructor": false}, {"identifier": "lowercase", "parameters": "(Set<String> subparts)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> lowercase(Set<String> subparts)", "full_signature": "private Set<String> lowercase(Set<String> subparts)", "class_method_signature": "Permission.lowercase(Set<String> subparts)", "testcase": false, "constructor": false}, {"identifier": "getParts", "parameters": "()", "modifiers": "protected", "return": "List<Set<String>>", "signature": "List<Set<String>> getParts()", "full_signature": "protected List<Set<String>> getParts()", "class_method_signature": "Permission.getParts()", "testcase": false, "constructor": false}, {"identifier": "setParts", "parameters": "(String wildcardString)", "modifiers": "protected", "return": "void", "signature": "void setParts(String wildcardString)", "full_signature": "protected void setParts(String wildcardString)", "class_method_signature": "Permission.setParts(String wildcardString)", "testcase": false, "constructor": false}, {"identifier": "implies", "parameters": "(Permission p)", "modifiers": "public", "return": "boolean", "signature": "boolean implies(Permission p)", "full_signature": "public boolean implies(Permission p)", "class_method_signature": "Permission.implies(Permission p)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Permission.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "public boolean equals(Object o)", "class_method_signature": "Permission.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "Permission.hashCode()", "testcase": false, "constructor": false}], "file": "fathom-security/src/main/java/fathom/authz/Permission.java"}, "focal_method": {"identifier": "implies", "parameters": "(Permission p)", "modifiers": "public", "return": "boolean", "body": "public boolean implies(Permission p) {\n        // By default only supports comparisons with other WildcardPermissions\n        List<Set<String>> otherParts = p.getParts();\n\n        int i = 0;\n        for (Set<String> otherPart : otherParts) {\n            // If this permission has less parts than the other permission, everything after the number of parts contained\n            // in this permission is automatically implied, so return true\n            if (getParts().size() - 1 < i) {\n                return true;\n            } else {\n                Set<String> part = getParts().get(i);\n                if (!part.contains(WILDCARD_TOKEN) && !part.containsAll(otherPart)) {\n                    return false;\n                }\n                i++;\n            }\n        }\n\n        // If this permission has more parts than the other parts, only imply it if all of the other parts are wildcards\n        for (; i < getParts().size(); i++) {\n            Set<String> part = getParts().get(i);\n            if (!part.contains(WILDCARD_TOKEN)) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "signature": "boolean implies(Permission p)", "full_signature": "public boolean implies(Permission p)", "class_method_signature": "Permission.implies(Permission p)", "testcase": false, "constructor": false, "invocations": ["getParts", "size", "getParts", "get", "getParts", "contains", "containsAll", "size", "getParts", "get", "getParts", "contains"]}, "repository": {"repo_id": 35689778, "url": "https://github.com/gitblit/fathom", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 1076, "license": "licensed"}}