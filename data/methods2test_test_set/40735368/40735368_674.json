{"test_class": {"identifier": "TestTypeMap", "superclass": "", "interfaces": "", "fields": [], "file": "modules/library/coverage/src/test/java/org/geotools/coverage/TestTypeMap.java"}, "test_case": {"identifier": "testIsSigned", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsSigned() {\n        assertTrue(TypeMap.isSigned(SampleDimensionType.REAL_32BITS));\n        assertTrue(TypeMap.isSigned(SampleDimensionType.REAL_64BITS));\n        assertTrue(TypeMap.isSigned(SampleDimensionType.SIGNED_16BITS));\n        assertTrue(TypeMap.isSigned(SampleDimensionType.SIGNED_32BITS));\n        assertTrue(TypeMap.isSigned(SampleDimensionType.SIGNED_8BITS));\n        assertFalse(TypeMap.isSigned(SampleDimensionType.UNSIGNED_16BITS));\n        assertFalse(TypeMap.isSigned(SampleDimensionType.UNSIGNED_1BIT));\n        assertFalse(TypeMap.isSigned(SampleDimensionType.UNSIGNED_2BITS));\n        assertFalse(TypeMap.isSigned(SampleDimensionType.UNSIGNED_32BITS));\n        assertFalse(TypeMap.isSigned(SampleDimensionType.UNSIGNED_4BITS));\n        assertFalse(TypeMap.isSigned(SampleDimensionType.UNSIGNED_8BITS));\n        \n    }", "signature": "void testIsSigned()", "full_signature": "@Test public void testIsSigned()", "class_method_signature": "TestTypeMap.testIsSigned()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isSigned", "assertTrue", "isSigned", "assertTrue", "isSigned", "assertTrue", "isSigned", "assertTrue", "isSigned", "assertFalse", "isSigned", "assertFalse", "isSigned", "assertFalse", "isSigned", "assertFalse", "isSigned", "assertFalse", "isSigned", "assertFalse", "isSigned"]}, "focal_class": {"identifier": "TypeMap", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final TypeMap[] MAP = new TypeMap[SampleDimensionType.values().length];", "modifier": "private static final", "type": "TypeMap[]", "declarator": "MAP = new TypeMap[SampleDimensionType.values().length]", "var_name": "MAP"}, {"original_string": "private final SampleDimensionType code;", "modifier": "private final", "type": "SampleDimensionType", "declarator": "code", "var_name": "code"}, {"original_string": "private final int type;", "modifier": "private final", "type": "int", "declarator": "type", "var_name": "type"}, {"original_string": "private final byte size;", "modifier": "private final", "type": "byte", "declarator": "size", "var_name": "size"}, {"original_string": "private final boolean signed;", "modifier": "private final", "type": "boolean", "declarator": "signed", "var_name": "signed"}, {"original_string": "private final boolean real;", "modifier": "private final", "type": "boolean", "declarator": "real", "var_name": "real"}, {"original_string": "private final NumberRange<? extends Number> range;", "modifier": "private final", "type": "NumberRange<? extends Number>", "declarator": "range", "var_name": "range"}, {"original_string": "private final NumberRange<? extends Number> positiveRange;", "modifier": "private final", "type": "NumberRange<? extends Number>", "declarator": "positiveRange", "var_name": "positiveRange"}, {"original_string": "private final InternationalString name = new AbstractInternationalString() {\n        public String toString(final Locale locale) {\n            return Vocabulary.getResources(locale).getString(VocabularyKeys.DATA_TYPE_$2,\n                    Integer.valueOf(real ? 2 : signed ? 1 : 0), size);\n        }\n    };", "modifier": "private final", "type": "InternationalString", "declarator": "name = new AbstractInternationalString() {\n        public String toString(final Locale locale) {\n            return Vocabulary.getResources(locale).getString(VocabularyKeys.DATA_TYPE_$2,\n                    Integer.valueOf(real ? 2 : signed ? 1 : 0), size);\n        }\n    }", "var_name": "name"}], "methods": [{"identifier": "TypeMap", "parameters": "(final SampleDimensionType code,\n                    final int     type,   final byte    size,\n                    final boolean signed, final boolean real,\n                    final Map<Number,Number> pool)", "modifiers": "private", "return": "", "signature": " TypeMap(final SampleDimensionType code,\n                    final int     type,   final byte    size,\n                    final boolean signed, final boolean real,\n                    final Map<Number,Number> pool)", "full_signature": "private  TypeMap(final SampleDimensionType code,\n                    final int     type,   final byte    size,\n                    final boolean signed, final boolean real,\n                    final Map<Number,Number> pool)", "class_method_signature": "TypeMap.TypeMap(final SampleDimensionType code,\n                    final int     type,   final byte    size,\n                    final boolean signed, final boolean real,\n                    final Map<Number,Number> pool)", "testcase": false, "constructor": true}, {"identifier": "TypeMap", "parameters": "(final SampleDimensionType code,\n                    final int     type,   final byte    size,\n                    final boolean signed, final boolean real,\n                    Number lower, Number upper, final Map<Number,Number> pool)", "modifiers": "private", "return": "", "signature": " TypeMap(final SampleDimensionType code,\n                    final int     type,   final byte    size,\n                    final boolean signed, final boolean real,\n                    Number lower, Number upper, final Map<Number,Number> pool)", "full_signature": "private  TypeMap(final SampleDimensionType code,\n                    final int     type,   final byte    size,\n                    final boolean signed, final boolean real,\n                    Number lower, Number upper, final Map<Number,Number> pool)", "class_method_signature": "TypeMap.TypeMap(final SampleDimensionType code,\n                    final int     type,   final byte    size,\n                    final boolean signed, final boolean real,\n                    Number lower, Number upper, final Map<Number,Number> pool)", "testcase": false, "constructor": true}, {"identifier": "unique", "parameters": "(final Map<Number,Number> pool, final Number n)", "modifiers": "private static", "return": "Number", "signature": "Number unique(final Map<Number,Number> pool, final Number n)", "full_signature": "private static Number unique(final Map<Number,Number> pool, final Number n)", "class_method_signature": "TypeMap.unique(final Map<Number,Number> pool, final Number n)", "testcase": false, "constructor": false}, {"identifier": "getSampleDimensionType", "parameters": "(final Range<?> range)", "modifiers": "public static", "return": "SampleDimensionType", "signature": "SampleDimensionType getSampleDimensionType(final Range<?> range)", "full_signature": "public static SampleDimensionType getSampleDimensionType(final Range<?> range)", "class_method_signature": "TypeMap.getSampleDimensionType(final Range<?> range)", "testcase": false, "constructor": false}, {"identifier": "getSampleDimensionType", "parameters": "(double min, double max)", "modifiers": "public static", "return": "SampleDimensionType", "signature": "SampleDimensionType getSampleDimensionType(double min, double max)", "full_signature": "public static SampleDimensionType getSampleDimensionType(double min, double max)", "class_method_signature": "TypeMap.getSampleDimensionType(double min, double max)", "testcase": false, "constructor": false}, {"identifier": "getSampleDimensionType", "parameters": "(final long min, final long max)", "modifiers": "public static", "return": "SampleDimensionType", "signature": "SampleDimensionType getSampleDimensionType(final long min, final long max)", "full_signature": "public static SampleDimensionType getSampleDimensionType(final long min, final long max)", "class_method_signature": "TypeMap.getSampleDimensionType(final long min, final long max)", "testcase": false, "constructor": false}, {"identifier": "getSampleDimensionType", "parameters": "(final SampleModel model, final int band)", "modifiers": "@SuppressWarnings(\"fallthrough\") public static", "return": "SampleDimensionType", "signature": "SampleDimensionType getSampleDimensionType(final SampleModel model, final int band)", "full_signature": "@SuppressWarnings(\"fallthrough\") public static SampleDimensionType getSampleDimensionType(final SampleModel model, final int band)", "class_method_signature": "TypeMap.getSampleDimensionType(final SampleModel model, final int band)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(final SampleDimensionType type)", "modifiers": "public static", "return": "InternationalString", "signature": "InternationalString getName(final SampleDimensionType type)", "full_signature": "public static InternationalString getName(final SampleDimensionType type)", "class_method_signature": "TypeMap.getName(final SampleDimensionType type)", "testcase": false, "constructor": false}, {"identifier": "getDataBufferType", "parameters": "(final SampleDimensionType type)", "modifiers": "public static", "return": "int", "signature": "int getDataBufferType(final SampleDimensionType type)", "full_signature": "public static int getDataBufferType(final SampleDimensionType type)", "class_method_signature": "TypeMap.getDataBufferType(final SampleDimensionType type)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "(final SampleDimensionType type)", "modifiers": "public static", "return": "int", "signature": "int getSize(final SampleDimensionType type)", "full_signature": "public static int getSize(final SampleDimensionType type)", "class_method_signature": "TypeMap.getSize(final SampleDimensionType type)", "testcase": false, "constructor": false}, {"identifier": "isSigned", "parameters": "(final SampleDimensionType type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSigned(final SampleDimensionType type)", "full_signature": "public static boolean isSigned(final SampleDimensionType type)", "class_method_signature": "TypeMap.isSigned(final SampleDimensionType type)", "testcase": false, "constructor": false}, {"identifier": "isFloatingPoint", "parameters": "(final SampleDimensionType type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFloatingPoint(final SampleDimensionType type)", "full_signature": "public static boolean isFloatingPoint(final SampleDimensionType type)", "class_method_signature": "TypeMap.isFloatingPoint(final SampleDimensionType type)", "testcase": false, "constructor": false}, {"identifier": "getRange", "parameters": "(final SampleDimensionType type)", "modifiers": "public static", "return": "NumberRange<? extends Number>", "signature": "NumberRange<? extends Number> getRange(final SampleDimensionType type)", "full_signature": "public static NumberRange<? extends Number> getRange(final SampleDimensionType type)", "class_method_signature": "TypeMap.getRange(final SampleDimensionType type)", "testcase": false, "constructor": false}, {"identifier": "getPositiveRange", "parameters": "(final SampleDimensionType type)", "modifiers": "public static", "return": "NumberRange<? extends Number>", "signature": "NumberRange<? extends Number> getPositiveRange(final SampleDimensionType type)", "full_signature": "public static NumberRange<? extends Number> getPositiveRange(final SampleDimensionType type)", "class_method_signature": "TypeMap.getPositiveRange(final SampleDimensionType type)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(final SampleDimensionType type)", "modifiers": "private static", "return": "TypeMap", "signature": "TypeMap map(final SampleDimensionType type)", "full_signature": "private static TypeMap map(final SampleDimensionType type)", "class_method_signature": "TypeMap.map(final SampleDimensionType type)", "testcase": false, "constructor": false}, {"identifier": "wrapSample", "parameters": "(final double             value,\n                                    final SampleDimensionType type,\n                                    final boolean    allowWidening)", "modifiers": "@SuppressWarnings(\"fallthrough\") public static", "return": "Number", "signature": "Number wrapSample(final double             value,\n                                    final SampleDimensionType type,\n                                    final boolean    allowWidening)", "full_signature": "@SuppressWarnings(\"fallthrough\") public static Number wrapSample(final double             value,\n                                    final SampleDimensionType type,\n                                    final boolean    allowWidening)", "class_method_signature": "TypeMap.wrapSample(final double             value,\n                                    final SampleDimensionType type,\n                                    final boolean    allowWidening)", "testcase": false, "constructor": false}, {"identifier": "getColorInterpretation", "parameters": "(final ColorModel model, final int band)", "modifiers": "public static", "return": "ColorInterpretation", "signature": "ColorInterpretation getColorInterpretation(final ColorModel model, final int band)", "full_signature": "public static ColorInterpretation getColorInterpretation(final ColorModel model, final int band)", "class_method_signature": "TypeMap.getColorInterpretation(final ColorModel model, final int band)", "testcase": false, "constructor": false}], "file": "modules/library/coverage/src/main/java/org/geotools/coverage/TypeMap.java"}, "focal_method": {"identifier": "isSigned", "parameters": "(final SampleDimensionType type)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isSigned(final SampleDimensionType type) {\n        return map(type).signed;\n    }", "signature": "boolean isSigned(final SampleDimensionType type)", "full_signature": "public static boolean isSigned(final SampleDimensionType type)", "class_method_signature": "TypeMap.isSigned(final SampleDimensionType type)", "testcase": false, "constructor": false, "invocations": ["map"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}