{"test_class": {"identifier": "AverageTenderAndAwardsExcelControllerTest", "superclass": "extends AbstractExcelControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private AverageTenderAndAwardsExcelController averageTenderAndAwardsExcelController;", "modifier": "@Autowired\n    private", "type": "AverageTenderAndAwardsExcelController", "declarator": "averageTenderAndAwardsExcelController", "var_name": "averageTenderAndAwardsExcelController"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/excelchart/AverageTenderAndAwardsExcelControllerTest.java"}, "test_case": {"identifier": "bidTimelineExcelChart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void bidTimelineExcelChart() throws Exception {\n        LangYearFilterPagingRequest filter = getLangYearFilterMockRequest();\n        averageTenderAndAwardsExcelController.bidTimelineExcelChart(\n                filter,\n                mockHttpServletResponse);\n\n        final byte[] responseOutput = mockHttpServletResponse.getContentAsByteArray();\n        final Workbook workbook = new XSSFWorkbook(new ByteArrayInputStream(responseOutput));\n        Assert.assertNotNull(workbook);\n\n        final Sheet sheet = workbook.getSheet(ChartType.stackedbar.toString());\n        Assert.assertNotNull(\"check chart type, sheet name should be the same as the type\", sheet);\n\n        final XSSFDrawing drawing = (XSSFDrawing) sheet.getDrawingPatriarch();\n        final List<XSSFChart> charts =  drawing.getCharts();\n        Assert.assertEquals(\"number of charts\", 1, charts.size());\n\n        final XSSFChart chart = charts.get(0);\n        Assert.assertEquals(\"chart title\",\n                translationService.getValue(filter.getLanguage(),\"charts:bidPeriod:title\"),\n                chart.getTitle().getString());\n\n        final List<? extends XSSFChartAxis> axis = chart.getAxis();\n        Assert.assertEquals(\"number of axis\", 2, axis.size());\n\n        final CTChart ctChart = chart.getCTChart();\n        Assert.assertEquals(\"Check if we have 1 bar chart\", 1, ctChart.getPlotArea().getBarChartArray().length);\n    }", "signature": "void bidTimelineExcelChart()", "full_signature": "@Test public void bidTimelineExcelChart()", "class_method_signature": "AverageTenderAndAwardsExcelControllerTest.bidTimelineExcelChart()", "testcase": true, "constructor": false, "invocations": ["getLangYearFilterMockRequest", "bidTimelineExcelChart", "getContentAsByteArray", "assertNotNull", "getSheet", "toString", "assertNotNull", "getDrawingPatriarch", "getCharts", "assertEquals", "size", "get", "assertEquals", "getValue", "getLanguage", "getString", "getTitle", "getAxis", "assertEquals", "size", "getCTChart", "assertEquals", "getBarChartArray", "getPlotArea"]}, "focal_class": {"identifier": "AverageTenderAndAwardsExcelController", "superclass": "extends ExcelChartOCDSController", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ExcelChartGenerator excelChartGenerator;", "modifier": "@Autowired\n    private", "type": "ExcelChartGenerator", "declarator": "excelChartGenerator", "var_name": "excelChartGenerator"}, {"original_string": "@Autowired\n    private ExcelChartHelper excelChartHelper;", "modifier": "@Autowired\n    private", "type": "ExcelChartHelper", "declarator": "excelChartHelper", "var_name": "excelChartHelper"}, {"original_string": "@Autowired\n    private AverageTenderAndAwardPeriodsController averageTenderAndAwardPeriodsController;", "modifier": "@Autowired\n    private", "type": "AverageTenderAndAwardPeriodsController", "declarator": "averageTenderAndAwardPeriodsController", "var_name": "averageTenderAndAwardPeriodsController"}], "methods": [{"identifier": "bidTimelineExcelChart", "parameters": "(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                      final HttpServletResponse response)", "modifiers": "@ApiOperation(value = \"Exports *Bid Timeline* dashboard in Excel format.\") @RequestMapping(value = \"/api/ocds/bidTimelineExcelChart\", method = {RequestMethod.GET, RequestMethod.POST}) public", "return": "void", "signature": "void bidTimelineExcelChart(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                      final HttpServletResponse response)", "full_signature": "@ApiOperation(value = \"Exports *Bid Timeline* dashboard in Excel format.\") @RequestMapping(value = \"/api/ocds/bidTimelineExcelChart\", method = {RequestMethod.GET, RequestMethod.POST}) public void bidTimelineExcelChart(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                      final HttpServletResponse response)", "class_method_signature": "AverageTenderAndAwardsExcelController.bidTimelineExcelChart(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                      final HttpServletResponse response)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/excelchart/AverageTenderAndAwardsExcelController.java"}, "focal_method": {"identifier": "bidTimelineExcelChart", "parameters": "(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                      final HttpServletResponse response)", "modifiers": "@ApiOperation(value = \"Exports *Bid Timeline* dashboard in Excel format.\") @RequestMapping(value = \"/api/ocds/bidTimelineExcelChart\", method = {RequestMethod.GET, RequestMethod.POST}) public", "return": "void", "body": "@ApiOperation(value = \"Exports *Bid Timeline* dashboard in Excel format.\")\n    @RequestMapping(value = \"/api/ocds/bidTimelineExcelChart\", method = {RequestMethod.GET, RequestMethod.POST})\n    public void bidTimelineExcelChart(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                      final HttpServletResponse response) throws IOException {\n        final String chartTitle = translationService.getValue(filter.getLanguage(), \"charts:bidPeriod:title\");\n\n        // fetch the data that will be displayed in the chart (we have multiple sources for this dashboard)\n        final List<Document> averageAwardPeriod = averageTenderAndAwardPeriodsController.averageAwardPeriod(filter);\n        final List<Document> averageTenderPeriod = averageTenderAndAwardPeriodsController.averageTenderPeriod(filter);\n\n        final List<?> categories = excelChartHelper.getCategoriesFromDBObject(getExportYearMonthXAxis(filter),\n                averageTenderPeriod, averageAwardPeriod);\n        final List<List<? extends Number>> values = new ArrayList<>();\n\n        final List<Number> valueTenders = excelChartHelper.getValuesFromDBObject(averageTenderPeriod, categories,\n                getExportYearMonthXAxis(filter), AverageTenderAndAwardPeriodsController.Keys.AVERAGE_TENDER_DAYS);\n        final List<Number> valueAwards = excelChartHelper.getValuesFromDBObject(averageAwardPeriod, categories,\n                getExportYearMonthXAxis(filter), AverageTenderAndAwardPeriodsController.Keys.AVERAGE_AWARD_DAYS);\n        if (!valueTenders.isEmpty()) {\n            values.add(valueTenders);\n        }\n        if (!valueAwards.isEmpty()) {\n            values.add(valueAwards);\n        }\n\n        // check if we have anything to display before setting the *seriesTitle*.\n        final List<String> seriesTitle;\n        if (!values.isEmpty()) {\n            seriesTitle = Arrays.asList(\n                    translationService.getValue(filter.getLanguage(), \"charts:bidPeriod:traces:tender\"),\n                    translationService.getValue(filter.getLanguage(), \"charts:bidPeriod:traces:award\"));\n        } else {\n            seriesTitle = new ArrayList<>();\n        }\n\n        response.setContentType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n        response.setHeader(\"Content-Disposition\", \"attachment; filename=\" + chartTitle + \".xlsx\");\n        response.getOutputStream().write(\n                excelChartGenerator.getExcelChart(\n                        ChartType.stackedbar,\n                        chartTitle,\n                        seriesTitle,\n                        categories, values));\n    }", "signature": "void bidTimelineExcelChart(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                      final HttpServletResponse response)", "full_signature": "@ApiOperation(value = \"Exports *Bid Timeline* dashboard in Excel format.\") @RequestMapping(value = \"/api/ocds/bidTimelineExcelChart\", method = {RequestMethod.GET, RequestMethod.POST}) public void bidTimelineExcelChart(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                      final HttpServletResponse response)", "class_method_signature": "AverageTenderAndAwardsExcelController.bidTimelineExcelChart(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                      final HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["getValue", "getLanguage", "averageAwardPeriod", "averageTenderPeriod", "getCategoriesFromDBObject", "getExportYearMonthXAxis", "getValuesFromDBObject", "getExportYearMonthXAxis", "getValuesFromDBObject", "getExportYearMonthXAxis", "isEmpty", "add", "isEmpty", "add", "isEmpty", "asList", "getValue", "getLanguage", "getValue", "getLanguage", "setContentType", "setHeader", "write", "getOutputStream", "getExcelChart"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}