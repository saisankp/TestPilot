{"test_class": {"identifier": "LocationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private LocationRepository repository;", "modifier": "@Mock\n    private", "type": "LocationRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Mock\n    private RouteOptimizer optimizer;", "modifier": "@Mock\n    private", "type": "RouteOptimizer", "declarator": "optimizer", "var_name": "optimizer"}, {"original_string": "@Mock\n    private DistanceMatrix distanceMatrix;", "modifier": "@Mock\n    private", "type": "DistanceMatrix", "declarator": "distanceMatrix", "var_name": "distanceMatrix"}, {"original_string": "@Mock\n    private ApplicationEventPublisher eventPublisher;", "modifier": "@Mock\n    private", "type": "ApplicationEventPublisher", "declarator": "eventPublisher", "var_name": "eventPublisher"}, {"original_string": "@InjectMocks\n    private LocationService locationService;", "modifier": "@InjectMocks\n    private", "type": "LocationService", "declarator": "locationService", "var_name": "locationService"}, {"original_string": "private final Coordinates coordinates = Coordinates.valueOf(0.0, 1.0);", "modifier": "private final", "type": "Coordinates", "declarator": "coordinates = Coordinates.valueOf(0.0, 1.0)", "var_name": "coordinates"}, {"original_string": "private final Location location = new Location(1, coordinates);", "modifier": "private final", "type": "Location", "declarator": "location = new Location(1, coordinates)", "var_name": "location"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/service/location/LocationServiceTest.java"}, "test_case": {"identifier": "addLocation", "parameters": "(@Mock DistanceMatrixRow matrixRow)", "modifiers": "@Test", "return": "void", "body": "@Test\n    void addLocation(@Mock DistanceMatrixRow matrixRow) {\n        when(distanceMatrix.addLocation(any())).thenReturn(matrixRow);\n        assertThat(locationService.addLocation(location)).isTrue();\n\n        verifyNoInteractions(repository);\n        verify(distanceMatrix).addLocation(location);\n        verify(optimizer).addLocation(location, matrixRow);\n    }", "signature": "void addLocation(@Mock DistanceMatrixRow matrixRow)", "full_signature": "@Test void addLocation(@Mock DistanceMatrixRow matrixRow)", "class_method_signature": "LocationServiceTest.addLocation(@Mock DistanceMatrixRow matrixRow)", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "addLocation", "any", "isTrue", "assertThat", "addLocation", "verifyNoInteractions", "addLocation", "verify", "addLocation", "verify"]}, "focal_class": {"identifier": "LocationService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(LocationService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LocationService.class)", "var_name": "logger"}, {"original_string": "private final LocationRepository repository;", "modifier": "private final", "type": "LocationRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private final RouteOptimizer optimizer;", "modifier": "private final", "type": "RouteOptimizer", "declarator": "optimizer", "var_name": "optimizer"}, {"original_string": "private final DistanceMatrix distanceMatrix;", "modifier": "private final", "type": "DistanceMatrix", "declarator": "distanceMatrix", "var_name": "distanceMatrix"}, {"original_string": "private final ApplicationEventPublisher eventPublisher;", "modifier": "private final", "type": "ApplicationEventPublisher", "declarator": "eventPublisher", "var_name": "eventPublisher"}], "methods": [{"identifier": "LocationService", "parameters": "(\n            LocationRepository repository,\n            RouteOptimizer optimizer,\n            DistanceMatrix distanceMatrix,\n            ApplicationEventPublisher eventPublisher)", "modifiers": "@Autowired", "return": "", "signature": " LocationService(\n            LocationRepository repository,\n            RouteOptimizer optimizer,\n            DistanceMatrix distanceMatrix,\n            ApplicationEventPublisher eventPublisher)", "full_signature": "@Autowired  LocationService(\n            LocationRepository repository,\n            RouteOptimizer optimizer,\n            DistanceMatrix distanceMatrix,\n            ApplicationEventPublisher eventPublisher)", "class_method_signature": "LocationService.LocationService(\n            LocationRepository repository,\n            RouteOptimizer optimizer,\n            DistanceMatrix distanceMatrix,\n            ApplicationEventPublisher eventPublisher)", "testcase": false, "constructor": true}, {"identifier": "createLocation", "parameters": "(Coordinates coordinates, String description)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean createLocation(Coordinates coordinates, String description)", "full_signature": "public synchronized boolean createLocation(Coordinates coordinates, String description)", "class_method_signature": "LocationService.createLocation(Coordinates coordinates, String description)", "testcase": false, "constructor": false}, {"identifier": "addLocation", "parameters": "(Location location)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean addLocation(Location location)", "full_signature": "public synchronized boolean addLocation(Location location)", "class_method_signature": "LocationService.addLocation(Location location)", "testcase": false, "constructor": false}, {"identifier": "submitToPlanner", "parameters": "(Location location)", "modifiers": "private", "return": "boolean", "signature": "boolean submitToPlanner(Location location)", "full_signature": "private boolean submitToPlanner(Location location)", "class_method_signature": "LocationService.submitToPlanner(Location location)", "testcase": false, "constructor": false}, {"identifier": "removeLocation", "parameters": "(long id)", "modifiers": "public synchronized", "return": "void", "signature": "void removeLocation(long id)", "full_signature": "public synchronized void removeLocation(long id)", "class_method_signature": "LocationService.removeLocation(long id)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void removeAll()", "full_signature": "public synchronized void removeAll()", "class_method_signature": "LocationService.removeAll()", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/service/location/LocationService.java"}, "focal_method": {"identifier": "addLocation", "parameters": "(Location location)", "modifiers": "public synchronized", "return": "boolean", "body": "public synchronized boolean addLocation(Location location) {\n        return submitToPlanner(Objects.requireNonNull(location));\n    }", "signature": "boolean addLocation(Location location)", "full_signature": "public synchronized boolean addLocation(Location location)", "class_method_signature": "LocationService.addLocation(Location location)", "testcase": false, "constructor": false, "invocations": ["submitToPlanner", "requireNonNull"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}