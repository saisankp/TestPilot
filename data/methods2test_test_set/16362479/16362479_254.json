{"test_class": {"identifier": "FollowerTest", "superclass": "extends AbstractRaftActorBehaviorTest<Follower>", "interfaces": "", "fields": [{"original_string": "private final ActorRef followerActor = actorFactory.createActor(\n            MessageCollectorActor.props(), actorFactory.generateActorId(\"follower\"));", "modifier": "private final", "type": "ActorRef", "declarator": "followerActor = actorFactory.createActor(\n            MessageCollectorActor.props(), actorFactory.generateActorId(\"follower\"))", "var_name": "followerActor"}, {"original_string": "private final ActorRef leaderActor = actorFactory.createActor(\n            MessageCollectorActor.props(), actorFactory.generateActorId(\"leader\"));", "modifier": "private final", "type": "ActorRef", "declarator": "leaderActor = actorFactory.createActor(\n            MessageCollectorActor.props(), actorFactory.generateActorId(\"leader\"))", "var_name": "leaderActor"}, {"original_string": "private Follower follower;", "modifier": "private", "type": "Follower", "declarator": "follower", "var_name": "follower"}, {"original_string": "private final short payloadVersion = 5;", "modifier": "private final", "type": "short", "declarator": "payloadVersion = 5", "var_name": "payloadVersion"}], "file": "opendaylight/md-sal/sal-akka-raft/src/test/java/org/opendaylight/controller/cluster/raft/behaviors/FollowerTest.java"}, "test_case": {"identifier": "testHandleFirstAppendEntriesWithPrevIndexMinusOne", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHandleFirstAppendEntriesWithPrevIndexMinusOne() {\n        logStart(\"testHandleFirstAppendEntries\");\n\n        MockRaftActorContext context = createActorContext();\n\n        List<ReplicatedLogEntry> entries = Arrays.asList(\n                newReplicatedLogEntry(2, 101, \"foo\"));\n\n        // The new commitIndex is 101\n        AppendEntries appendEntries = new AppendEntries(2, \"leader-1\", -1, -1, entries, 101, 100, (short) 0);\n\n        follower = createBehavior(context);\n        follower.handleMessage(leaderActor, appendEntries);\n\n        FollowerInitialSyncUpStatus syncStatus = MessageCollectorActor.expectFirstMatching(followerActor,\n                FollowerInitialSyncUpStatus.class);\n        AppendEntriesReply reply = MessageCollectorActor.expectFirstMatching(leaderActor, AppendEntriesReply.class);\n\n        assertFalse(syncStatus.isInitialSyncDone());\n        assertFalse(\"append entries reply should be false\", reply.isSuccess());\n    }", "signature": "void testHandleFirstAppendEntriesWithPrevIndexMinusOne()", "full_signature": "@Test public void testHandleFirstAppendEntriesWithPrevIndexMinusOne()", "class_method_signature": "FollowerTest.testHandleFirstAppendEntriesWithPrevIndexMinusOne()", "testcase": true, "constructor": false, "invocations": ["logStart", "createActorContext", "asList", "newReplicatedLogEntry", "createBehavior", "handleMessage", "expectFirstMatching", "expectFirstMatching", "assertFalse", "isInitialSyncDone", "assertFalse", "isSuccess"]}, "focal_class": {"identifier": "Follower", "superclass": "extends AbstractRaftActorBehavior", "interfaces": "", "fields": [{"original_string": "private static final long MAX_ELECTION_TIMEOUT_FACTOR = 18;", "modifier": "private static final", "type": "long", "declarator": "MAX_ELECTION_TIMEOUT_FACTOR = 18", "var_name": "MAX_ELECTION_TIMEOUT_FACTOR"}, {"original_string": "private final SyncStatusTracker initialSyncStatusTracker;", "modifier": "private final", "type": "SyncStatusTracker", "declarator": "initialSyncStatusTracker", "var_name": "initialSyncStatusTracker"}, {"original_string": "private final MessageAssembler appendEntriesMessageAssembler;", "modifier": "private final", "type": "MessageAssembler", "declarator": "appendEntriesMessageAssembler", "var_name": "appendEntriesMessageAssembler"}, {"original_string": "private final Stopwatch lastLeaderMessageTimer = Stopwatch.createStarted();", "modifier": "private final", "type": "Stopwatch", "declarator": "lastLeaderMessageTimer = Stopwatch.createStarted()", "var_name": "lastLeaderMessageTimer"}, {"original_string": "private SnapshotTracker snapshotTracker = null;", "modifier": "private", "type": "SnapshotTracker", "declarator": "snapshotTracker = null", "var_name": "snapshotTracker"}, {"original_string": "private String leaderId;", "modifier": "private", "type": "String", "declarator": "leaderId", "var_name": "leaderId"}, {"original_string": "private short leaderPayloadVersion;", "modifier": "private", "type": "short", "declarator": "leaderPayloadVersion", "var_name": "leaderPayloadVersion"}], "methods": [{"identifier": "Follower", "parameters": "(final RaftActorContext context)", "modifiers": "public", "return": "", "signature": " Follower(final RaftActorContext context)", "full_signature": "public  Follower(final RaftActorContext context)", "class_method_signature": "Follower.Follower(final RaftActorContext context)", "testcase": false, "constructor": true}, {"identifier": "Follower", "parameters": "(final RaftActorContext context, final String initialLeaderId,\n            final short initialLeaderPayloadVersion)", "modifiers": "public", "return": "", "signature": " Follower(final RaftActorContext context, final String initialLeaderId,\n            final short initialLeaderPayloadVersion)", "full_signature": "public  Follower(final RaftActorContext context, final String initialLeaderId,\n            final short initialLeaderPayloadVersion)", "class_method_signature": "Follower.Follower(final RaftActorContext context, final String initialLeaderId,\n            final short initialLeaderPayloadVersion)", "testcase": false, "constructor": true}, {"identifier": "getLeaderId", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String getLeaderId()", "full_signature": "@Override public final String getLeaderId()", "class_method_signature": "Follower.getLeaderId()", "testcase": false, "constructor": false}, {"identifier": "setLeaderId", "parameters": "(final @Nullable String leaderId)", "modifiers": "@VisibleForTesting protected final", "return": "void", "signature": "void setLeaderId(final @Nullable String leaderId)", "full_signature": "@VisibleForTesting protected final void setLeaderId(final @Nullable String leaderId)", "class_method_signature": "Follower.setLeaderId(final @Nullable String leaderId)", "testcase": false, "constructor": false}, {"identifier": "getLeaderPayloadVersion", "parameters": "()", "modifiers": "@Override public", "return": "short", "signature": "short getLeaderPayloadVersion()", "full_signature": "@Override public short getLeaderPayloadVersion()", "class_method_signature": "Follower.getLeaderPayloadVersion()", "testcase": false, "constructor": false}, {"identifier": "setLeaderPayloadVersion", "parameters": "(final short leaderPayloadVersion)", "modifiers": "@VisibleForTesting protected final", "return": "void", "signature": "void setLeaderPayloadVersion(final short leaderPayloadVersion)", "full_signature": "@VisibleForTesting protected final void setLeaderPayloadVersion(final short leaderPayloadVersion)", "class_method_signature": "Follower.setLeaderPayloadVersion(final short leaderPayloadVersion)", "testcase": false, "constructor": false}, {"identifier": "restartLastLeaderMessageTimer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void restartLastLeaderMessageTimer()", "full_signature": "private void restartLastLeaderMessageTimer()", "class_method_signature": "Follower.restartLastLeaderMessageTimer()", "testcase": false, "constructor": false}, {"identifier": "isLogEntryPresent", "parameters": "(final long index)", "modifiers": "private", "return": "boolean", "signature": "boolean isLogEntryPresent(final long index)", "full_signature": "private boolean isLogEntryPresent(final long index)", "class_method_signature": "Follower.isLogEntryPresent(final long index)", "testcase": false, "constructor": false}, {"identifier": "updateInitialSyncStatus", "parameters": "(final long currentLeaderCommit, final String newLeaderId)", "modifiers": "private", "return": "void", "signature": "void updateInitialSyncStatus(final long currentLeaderCommit, final String newLeaderId)", "full_signature": "private void updateInitialSyncStatus(final long currentLeaderCommit, final String newLeaderId)", "class_method_signature": "Follower.updateInitialSyncStatus(final long currentLeaderCommit, final String newLeaderId)", "testcase": false, "constructor": false}, {"identifier": "handleAppendEntries", "parameters": "(final ActorRef sender, final AppendEntries appendEntries)", "modifiers": "@Override protected", "return": "RaftActorBehavior", "signature": "RaftActorBehavior handleAppendEntries(final ActorRef sender, final AppendEntries appendEntries)", "full_signature": "@Override protected RaftActorBehavior handleAppendEntries(final ActorRef sender, final AppendEntries appendEntries)", "class_method_signature": "Follower.handleAppendEntries(final ActorRef sender, final AppendEntries appendEntries)", "testcase": false, "constructor": false}, {"identifier": "processNewEntries", "parameters": "(final AppendEntries appendEntries, final ActorRef sender)", "modifiers": "private", "return": "boolean", "signature": "boolean processNewEntries(final AppendEntries appendEntries, final ActorRef sender)", "full_signature": "private boolean processNewEntries(final AppendEntries appendEntries, final ActorRef sender)", "class_method_signature": "Follower.processNewEntries(final AppendEntries appendEntries, final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "isOutOfSync", "parameters": "(final AppendEntries appendEntries, final ActorRef sender)", "modifiers": "private", "return": "boolean", "signature": "boolean isOutOfSync(final AppendEntries appendEntries, final ActorRef sender)", "full_signature": "private boolean isOutOfSync(final AppendEntries appendEntries, final ActorRef sender)", "class_method_signature": "Follower.isOutOfSync(final AppendEntries appendEntries, final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "sendOutOfSyncAppendEntriesReply", "parameters": "(final ActorRef sender, final boolean forceInstallSnapshot,\n            final short leaderRaftVersion)", "modifiers": "private", "return": "void", "signature": "void sendOutOfSyncAppendEntriesReply(final ActorRef sender, final boolean forceInstallSnapshot,\n            final short leaderRaftVersion)", "full_signature": "private void sendOutOfSyncAppendEntriesReply(final ActorRef sender, final boolean forceInstallSnapshot,\n            final short leaderRaftVersion)", "class_method_signature": "Follower.sendOutOfSyncAppendEntriesReply(final ActorRef sender, final boolean forceInstallSnapshot,\n            final short leaderRaftVersion)", "testcase": false, "constructor": false}, {"identifier": "needsLeaderAddress", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean needsLeaderAddress()", "full_signature": "private boolean needsLeaderAddress()", "class_method_signature": "Follower.needsLeaderAddress()", "testcase": false, "constructor": false}, {"identifier": "handleAppendEntriesReply", "parameters": "(final ActorRef sender,\n        final AppendEntriesReply appendEntriesReply)", "modifiers": "@Override protected", "return": "RaftActorBehavior", "signature": "RaftActorBehavior handleAppendEntriesReply(final ActorRef sender,\n        final AppendEntriesReply appendEntriesReply)", "full_signature": "@Override protected RaftActorBehavior handleAppendEntriesReply(final ActorRef sender,\n        final AppendEntriesReply appendEntriesReply)", "class_method_signature": "Follower.handleAppendEntriesReply(final ActorRef sender,\n        final AppendEntriesReply appendEntriesReply)", "testcase": false, "constructor": false}, {"identifier": "handleRequestVoteReply", "parameters": "(final ActorRef sender,\n        final RequestVoteReply requestVoteReply)", "modifiers": "@Override protected", "return": "RaftActorBehavior", "signature": "RaftActorBehavior handleRequestVoteReply(final ActorRef sender,\n        final RequestVoteReply requestVoteReply)", "full_signature": "@Override protected RaftActorBehavior handleRequestVoteReply(final ActorRef sender,\n        final RequestVoteReply requestVoteReply)", "class_method_signature": "Follower.handleRequestVoteReply(final ActorRef sender,\n        final RequestVoteReply requestVoteReply)", "testcase": false, "constructor": false}, {"identifier": "getApplyStateFor", "parameters": "(final ReplicatedLogEntry entry)", "modifiers": "@Override final", "return": "ApplyState", "signature": "ApplyState getApplyStateFor(final ReplicatedLogEntry entry)", "full_signature": "@Override final ApplyState getApplyStateFor(final ReplicatedLogEntry entry)", "class_method_signature": "Follower.getApplyStateFor(final ReplicatedLogEntry entry)", "testcase": false, "constructor": false}, {"identifier": "handleMessage", "parameters": "(final ActorRef sender, final Object message)", "modifiers": "@Override public", "return": "RaftActorBehavior", "signature": "RaftActorBehavior handleMessage(final ActorRef sender, final Object message)", "full_signature": "@Override public RaftActorBehavior handleMessage(final ActorRef sender, final Object message)", "class_method_signature": "Follower.handleMessage(final ActorRef sender, final Object message)", "testcase": false, "constructor": false}, {"identifier": "handleElectionTimeout", "parameters": "(final Object message)", "modifiers": "private", "return": "RaftActorBehavior", "signature": "RaftActorBehavior handleElectionTimeout(final Object message)", "full_signature": "private RaftActorBehavior handleElectionTimeout(final Object message)", "class_method_signature": "Follower.handleElectionTimeout(final Object message)", "testcase": false, "constructor": false}, {"identifier": "isLeaderAvailabilityKnown", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isLeaderAvailabilityKnown()", "full_signature": "private boolean isLeaderAvailabilityKnown()", "class_method_signature": "Follower.isLeaderAvailabilityKnown()", "testcase": false, "constructor": false}, {"identifier": "isThisFollowerIsolated", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isThisFollowerIsolated()", "full_signature": "private boolean isThisFollowerIsolated()", "class_method_signature": "Follower.isThisFollowerIsolated()", "testcase": false, "constructor": false}, {"identifier": "handleInstallSnapshot", "parameters": "(final ActorRef sender, final InstallSnapshot installSnapshot)", "modifiers": "private", "return": "void", "signature": "void handleInstallSnapshot(final ActorRef sender, final InstallSnapshot installSnapshot)", "full_signature": "private void handleInstallSnapshot(final ActorRef sender, final InstallSnapshot installSnapshot)", "class_method_signature": "Follower.handleInstallSnapshot(final ActorRef sender, final InstallSnapshot installSnapshot)", "testcase": false, "constructor": false}, {"identifier": "closeSnapshotTracker", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeSnapshotTracker()", "full_signature": "private void closeSnapshotTracker()", "class_method_signature": "Follower.closeSnapshotTracker()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "Follower.close()", "testcase": false, "constructor": false}, {"identifier": "getSnapshotTracker", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "SnapshotTracker", "signature": "SnapshotTracker getSnapshotTracker()", "full_signature": "@VisibleForTesting SnapshotTracker getSnapshotTracker()", "class_method_signature": "Follower.getSnapshotTracker()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/behaviors/Follower.java"}, "focal_method": {"identifier": "handleMessage", "parameters": "(final ActorRef sender, final Object message)", "modifiers": "@Override public", "return": "RaftActorBehavior", "body": "@Override\n    public RaftActorBehavior handleMessage(final ActorRef sender, final Object message) {\n        if (message instanceof ElectionTimeout || message instanceof TimeoutNow) {\n            return handleElectionTimeout(message);\n        }\n\n        if (appendEntriesMessageAssembler.handleMessage(message, actor())) {\n            return this;\n        }\n\n        if (!(message instanceof RaftRPC)) {\n            // The rest of the processing requires the message to be a RaftRPC\n            return null;\n        }\n\n        final RaftRPC rpc = (RaftRPC) message;\n        // If RPC request or response contains term T > currentTerm:\n        // set currentTerm = T, convert to follower (\u00a75.1)\n        // This applies to all RPC messages and responses\n        if (rpc.getTerm() > context.getTermInformation().getCurrentTerm() && shouldUpdateTerm(rpc)) {\n            log.info(\"{}: Term {} in \\\"{}\\\" message is greater than follower's term {} - updating term\",\n                logName(), rpc.getTerm(), rpc, context.getTermInformation().getCurrentTerm());\n\n            context.getTermInformation().updateAndPersist(rpc.getTerm(), null);\n        }\n\n        if (rpc instanceof InstallSnapshot) {\n            handleInstallSnapshot(sender, (InstallSnapshot) rpc);\n            restartLastLeaderMessageTimer();\n            scheduleElection(electionDuration());\n            return this;\n        }\n\n        if (!(rpc instanceof RequestVote) || canGrantVote((RequestVote) rpc)) {\n            restartLastLeaderMessageTimer();\n            scheduleElection(electionDuration());\n        }\n\n        return super.handleMessage(sender, rpc);\n    }", "signature": "RaftActorBehavior handleMessage(final ActorRef sender, final Object message)", "full_signature": "@Override public RaftActorBehavior handleMessage(final ActorRef sender, final Object message)", "class_method_signature": "Follower.handleMessage(final ActorRef sender, final Object message)", "testcase": false, "constructor": false, "invocations": ["handleElectionTimeout", "handleMessage", "actor", "getTerm", "getCurrentTerm", "getTermInformation", "shouldUpdateTerm", "info", "logName", "getTerm", "getCurrentTerm", "getTermInformation", "updateAndPersist", "getTermInformation", "getTerm", "handleInstallSnapshot", "restartLastLeaderMessageTimer", "scheduleElection", "electionDuration", "canGrantVote", "restartLastLeaderMessageTimer", "scheduleElection", "electionDuration", "handleMessage"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}