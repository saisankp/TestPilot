{"test_class": {"identifier": "TestSecureComputationEngineImpl", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final BigIntegerFieldDefinition fieldDefinition = new BigIntegerFieldDefinition(\n      ModulusFinder.findSuitableModulus(8));", "modifier": "private final", "type": "BigIntegerFieldDefinition", "declarator": "fieldDefinition = new BigIntegerFieldDefinition(\n      ModulusFinder.findSuitableModulus(8))", "var_name": "fieldDefinition"}, {"original_string": "private SecureComputationEngineImpl<DummyArithmeticResourcePool, ProtocolBuilderNumeric> sce;", "modifier": "private", "type": "SecureComputationEngineImpl<DummyArithmeticResourcePool, ProtocolBuilderNumeric>", "declarator": "sce", "var_name": "sce"}], "file": "core/src/test/java/dk/alexandra/fresco/framework/sce/TestSecureComputationEngineImpl.java"}, "test_case": {"identifier": "testRunApplicationAppTimesOut", "parameters": "()", "modifiers": "@Test(expected = RuntimeException.class) public", "return": "void", "body": "@Test(expected = RuntimeException.class)\n  public void testRunApplicationAppTimesOut() {\n    Application<Object, ProtocolBuilderNumeric> app =\n        builder -> {\n          while (true) {\n\n          }\n        };\n    DummyArithmeticResourcePool rp =\n        new DummyArithmeticResourcePoolImpl(0, 1, fieldDefinition);\n    sce.runApplication(app, rp, null, Duration.ofNanos(1));\n    fail(\"Should not be reachable\");\n  }", "signature": "void testRunApplicationAppTimesOut()", "full_signature": "@Test(expected = RuntimeException.class) public void testRunApplicationAppTimesOut()", "class_method_signature": "TestSecureComputationEngineImpl.testRunApplicationAppTimesOut()", "testcase": true, "constructor": false, "invocations": ["runApplication", "ofNanos", "fail"]}, "focal_class": {"identifier": "SecureComputationEngineImpl", "superclass": "", "interfaces": "implements SecureComputationEngine<ResourcePoolT, BuilderT>", "fields": [{"original_string": "private ProtocolEvaluator<ResourcePoolT> evaluator;", "modifier": "private", "type": "ProtocolEvaluator<ResourcePoolT>", "declarator": "evaluator", "var_name": "evaluator"}, {"original_string": "private ExecutorService executorService;", "modifier": "private", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private boolean setup;", "modifier": "private", "type": "boolean", "declarator": "setup", "var_name": "setup"}, {"original_string": "private ProtocolSuite<ResourcePoolT, BuilderT> protocolSuite;", "modifier": "private", "type": "ProtocolSuite<ResourcePoolT, BuilderT>", "declarator": "protocolSuite", "var_name": "protocolSuite"}, {"original_string": "private static final AtomicInteger threadCounter = new AtomicInteger(1);", "modifier": "private static final", "type": "AtomicInteger", "declarator": "threadCounter = new AtomicInteger(1)", "var_name": "threadCounter"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(SecureComputationEngineImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SecureComputationEngineImpl.class)", "var_name": "logger"}], "methods": [{"identifier": "SecureComputationEngineImpl", "parameters": "(ProtocolSuite<ResourcePoolT, BuilderT> protocolSuite,\n      ProtocolEvaluator<ResourcePoolT> evaluator)", "modifiers": "public", "return": "", "signature": " SecureComputationEngineImpl(ProtocolSuite<ResourcePoolT, BuilderT> protocolSuite,\n      ProtocolEvaluator<ResourcePoolT> evaluator)", "full_signature": "public  SecureComputationEngineImpl(ProtocolSuite<ResourcePoolT, BuilderT> protocolSuite,\n      ProtocolEvaluator<ResourcePoolT> evaluator)", "class_method_signature": "SecureComputationEngineImpl.SecureComputationEngineImpl(ProtocolSuite<ResourcePoolT, BuilderT> protocolSuite,\n      ProtocolEvaluator<ResourcePoolT> evaluator)", "testcase": false, "constructor": true}, {"identifier": "runApplication", "parameters": "(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network, Duration timeout)", "modifiers": "@Override public", "return": "OutputT", "signature": "OutputT runApplication(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network, Duration timeout)", "full_signature": "@Override public OutputT runApplication(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network, Duration timeout)", "class_method_signature": "SecureComputationEngineImpl.runApplication(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network, Duration timeout)", "testcase": false, "constructor": false}, {"identifier": "startApplication", "parameters": "(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network)", "modifiers": "@Override public", "return": "Future<OutputT>", "signature": "Future<OutputT> startApplication(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network)", "full_signature": "@Override public Future<OutputT> startApplication(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network)", "class_method_signature": "SecureComputationEngineImpl.startApplication(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network)", "testcase": false, "constructor": false}, {"identifier": "evalApplication", "parameters": "(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network)", "modifiers": "private", "return": "DRes<OutputT>", "signature": "DRes<OutputT> evalApplication(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network)", "full_signature": "private DRes<OutputT> evalApplication(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network)", "class_method_signature": "SecureComputationEngineImpl.evalApplication(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network)", "testcase": false, "constructor": false}, {"identifier": "setup", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void setup()", "full_signature": "@Override public synchronized void setup()", "class_method_signature": "SecureComputationEngineImpl.setup()", "testcase": false, "constructor": false}, {"identifier": "shutdownSCE", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void shutdownSCE()", "full_signature": "@Override public synchronized void shutdownSCE()", "class_method_signature": "SecureComputationEngineImpl.shutdownSCE()", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/sce/SecureComputationEngineImpl.java"}, "focal_method": {"identifier": "runApplication", "parameters": "(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network, Duration timeout)", "modifiers": "@Override public", "return": "OutputT", "body": "@Override\n  public <OutputT> OutputT runApplication(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network, Duration timeout) {\n    Future<OutputT> future = startApplication(application, resourcePool, network);\n    try {\n      return future.get(timeout.toNanos(), TimeUnit.NANOSECONDS);\n    } catch (InterruptedException | TimeoutException e) {\n      throw new RuntimeException(\"Internal error in waiting\", e);\n    } catch (ExecutionException e) {\n      throw new RuntimeException(\"Execution exception when running the application\", e.getCause());\n    }\n  }", "signature": "OutputT runApplication(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network, Duration timeout)", "full_signature": "@Override public OutputT runApplication(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network, Duration timeout)", "class_method_signature": "SecureComputationEngineImpl.runApplication(Application<OutputT, BuilderT> application,\n      ResourcePoolT resourcePool, Network network, Duration timeout)", "testcase": false, "constructor": false, "invocations": ["startApplication", "get", "toNanos", "getCause"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}