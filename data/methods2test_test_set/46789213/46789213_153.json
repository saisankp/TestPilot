{"test_class": {"identifier": "TestByteAndBitConverter", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestByteAndBitConverter.java"}, "test_case": {"identifier": "testToBoolean", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToBoolean() {\n    boolean exception = false;\n    try {\n      ByteAndBitConverter.toBoolean(\"Foo\");\n    } catch (IllegalArgumentException e) {\n      exception = true;\n    }\n    Assert.assertTrue(exception);\n    Boolean[] x = ByteAndBitConverter.toBoolean(\"00\");\n    Boolean[] expectedX = new Boolean[]{false, false, false, false, false, false, false, false};\n    Assert.assertEquals(expectedX.length, x.length);\n    Assert.assertArrayEquals(expectedX, x);\n    Boolean[] y = ByteAndBitConverter.toBoolean(\"42\");\n    Boolean[] expectedY = new Boolean[]{false, true, false, false, false, false, true, false};\n    Assert.assertEquals(expectedY.length, y.length);\n    Assert.assertArrayEquals(expectedY, y);\n    Boolean[] z = ByteAndBitConverter.toBoolean(\"42FF\");\n    Boolean[] expectedZ = new Boolean[]{false, true, false, false, false, false, true, false,\n        true, true, true, true, true, true, true, true};\n    Assert.assertEquals(expectedZ.length, z.length);\n    Assert.assertArrayEquals(expectedZ, z);\n  }", "signature": "void testToBoolean()", "full_signature": "@Test public void testToBoolean()", "class_method_signature": "TestByteAndBitConverter.testToBoolean()", "testcase": true, "constructor": false, "invocations": ["toBoolean", "assertTrue", "toBoolean", "assertEquals", "assertArrayEquals", "toBoolean", "assertEquals", "assertArrayEquals", "toBoolean", "assertEquals", "assertArrayEquals"]}, "focal_class": {"identifier": "ByteAndBitConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ByteAndBitConverter", "parameters": "()", "modifiers": "private", "return": "", "signature": " ByteAndBitConverter()", "full_signature": "private  ByteAndBitConverter()", "class_method_signature": "ByteAndBitConverter.ByteAndBitConverter()", "testcase": false, "constructor": true}, {"identifier": "toByteArray", "parameters": "(long value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(long value)", "full_signature": "public static byte[] toByteArray(long value)", "class_method_signature": "ByteAndBitConverter.toByteArray(long value)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(int value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(int value)", "full_signature": "public static byte[] toByteArray(int value)", "class_method_signature": "ByteAndBitConverter.toByteArray(int value)", "testcase": false, "constructor": false}, {"identifier": "intToBitSet", "parameters": "(int i)", "modifiers": "public static", "return": "BitSet", "signature": "BitSet intToBitSet(int i)", "full_signature": "public static BitSet intToBitSet(int i)", "class_method_signature": "ByteAndBitConverter.intToBitSet(int i)", "testcase": false, "constructor": false}, {"identifier": "toBoolean", "parameters": "(String hex)", "modifiers": "public static", "return": "Boolean[]", "signature": "Boolean[] toBoolean(String hex)", "full_signature": "public static Boolean[] toBoolean(String hex)", "class_method_signature": "ByteAndBitConverter.toBoolean(String hex)", "testcase": false, "constructor": false}, {"identifier": "toHex", "parameters": "(boolean[] bits)", "modifiers": "public static", "return": "String", "signature": "String toHex(boolean[] bits)", "full_signature": "public static String toHex(boolean[] bits)", "class_method_signature": "ByteAndBitConverter.toHex(boolean[] bits)", "testcase": false, "constructor": false}, {"identifier": "toHex", "parameters": "(List<Boolean> bits)", "modifiers": "public static", "return": "String", "signature": "String toHex(List<Boolean> bits)", "full_signature": "public static String toHex(List<Boolean> bits)", "class_method_signature": "ByteAndBitConverter.toHex(List<Boolean> bits)", "testcase": false, "constructor": false}, {"identifier": "convertArray", "parameters": "(Boolean[] in)", "modifiers": "private static", "return": "boolean[]", "signature": "boolean[] convertArray(Boolean[] in)", "full_signature": "private static boolean[] convertArray(Boolean[] in)", "class_method_signature": "ByteAndBitConverter.convertArray(Boolean[] in)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/ByteAndBitConverter.java"}, "focal_method": {"identifier": "toBoolean", "parameters": "(String hex)", "modifiers": "public static", "return": "Boolean[]", "body": "public static Boolean[] toBoolean(String hex) throws IllegalArgumentException {\n    if (hex.length() % 2 != 0) {\n      throw new IllegalArgumentException(\"Illegal hex string\");\n    }\n    Boolean[] res = new Boolean[hex.length() * 4]; // 8\n    for (int i = 0; i < hex.length() / 2; i++) {\n      String sub = hex.substring(2 * i, 2 * i + 2);\n      int value = Integer.parseInt(sub, 16);\n      int numOfBits = 8;\n      for (int j = 0; j < numOfBits; j++) {\n        boolean val = (value & 1 << j) != 0;\n        res[8 * i + (numOfBits - j - 1)] = val;\n      }\n    }\n    return res;\n  }", "signature": "Boolean[] toBoolean(String hex)", "full_signature": "public static Boolean[] toBoolean(String hex)", "class_method_signature": "ByteAndBitConverter.toBoolean(String hex)", "testcase": false, "constructor": false, "invocations": ["length", "length", "length", "substring", "parseInt"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}