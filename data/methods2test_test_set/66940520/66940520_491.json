{"test_class": {"identifier": "EventAnalyticsUtilsTest", "superclass": "extends DhisConvenienceTest", "interfaces": "", "fields": [], "file": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/event/EventAnalyticsUtilsTest.java"}, "test_case": {"identifier": "testGetAggregatedDataValueMapping", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAggregatedDataValueMapping()\n    {\n        Grid grid = new ListGrid();\n\n        grid.addRow();\n        grid.addValue( \"de1\" );\n        grid.addValue( \"ou2\" );\n        grid.addValue( \"pe1\" );\n        grid.addValue( 3 );\n\n        grid.addRow();\n        grid.addValue( \"de2\" );\n        grid.addValue( \"ou3\" );\n        grid.addValue( \"pe2\" );\n        grid.addValue( 5 );\n\n        Map<String, Object> map = EventAnalyticsUtils.getAggregatedEventDataMapping( grid );\n\n        assertEquals( 3, map.get( \"de1\" + DIMENSION_SEP + \"ou2\" + DIMENSION_SEP + \"pe1\" ) );\n        assertEquals( 5, map.get( \"de2\" + DIMENSION_SEP + \"ou3\" + DIMENSION_SEP + \"pe2\" ) );\n    }", "signature": "void testGetAggregatedDataValueMapping()", "full_signature": "@Test public void testGetAggregatedDataValueMapping()", "class_method_signature": "EventAnalyticsUtilsTest.testGetAggregatedDataValueMapping()", "testcase": true, "constructor": false, "invocations": ["addRow", "addValue", "addValue", "addValue", "addValue", "addRow", "addValue", "addValue", "addValue", "addValue", "getAggregatedEventDataMapping", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "EventAnalyticsUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getCombinations", "parameters": "( Map<String, List<EventAnalyticsDimensionalItem>> map,\n        List<Map<String, EventAnalyticsDimensionalItem>> list )", "modifiers": "private static", "return": "void", "signature": "void getCombinations( Map<String, List<EventAnalyticsDimensionalItem>> map,\n        List<Map<String, EventAnalyticsDimensionalItem>> list )", "full_signature": "private static void getCombinations( Map<String, List<EventAnalyticsDimensionalItem>> map,\n        List<Map<String, EventAnalyticsDimensionalItem>> list )", "class_method_signature": "EventAnalyticsUtils.getCombinations( Map<String, List<EventAnalyticsDimensionalItem>> map,\n        List<Map<String, EventAnalyticsDimensionalItem>> list )", "testcase": false, "constructor": false}, {"identifier": "recurse", "parameters": "( Map<String, List<EventAnalyticsDimensionalItem>> map, ListIterator<String> iter,\n        TreeMap<String, EventAnalyticsDimensionalItem> cur, List<Map<String, EventAnalyticsDimensionalItem>> list )", "modifiers": "public static", "return": "void", "signature": "void recurse( Map<String, List<EventAnalyticsDimensionalItem>> map, ListIterator<String> iter,\n        TreeMap<String, EventAnalyticsDimensionalItem> cur, List<Map<String, EventAnalyticsDimensionalItem>> list )", "full_signature": "public static void recurse( Map<String, List<EventAnalyticsDimensionalItem>> map, ListIterator<String> iter,\n        TreeMap<String, EventAnalyticsDimensionalItem> cur, List<Map<String, EventAnalyticsDimensionalItem>> list )", "class_method_signature": "EventAnalyticsUtils.recurse( Map<String, List<EventAnalyticsDimensionalItem>> map, ListIterator<String> iter,\n        TreeMap<String, EventAnalyticsDimensionalItem> cur, List<Map<String, EventAnalyticsDimensionalItem>> list )", "testcase": false, "constructor": false}, {"identifier": "generateEventDataPermutations", "parameters": "(\n        Map<String, List<EventAnalyticsDimensionalItem>> dataOptionMap )", "modifiers": "public static", "return": "List<Map<String, EventAnalyticsDimensionalItem>>", "signature": "List<Map<String, EventAnalyticsDimensionalItem>> generateEventDataPermutations(\n        Map<String, List<EventAnalyticsDimensionalItem>> dataOptionMap )", "full_signature": "public static List<Map<String, EventAnalyticsDimensionalItem>> generateEventDataPermutations(\n        Map<String, List<EventAnalyticsDimensionalItem>> dataOptionMap )", "class_method_signature": "EventAnalyticsUtils.generateEventDataPermutations(\n        Map<String, List<EventAnalyticsDimensionalItem>> dataOptionMap )", "testcase": false, "constructor": false}, {"identifier": "getAggregatedEventDataMapping", "parameters": "( Grid grid )", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> getAggregatedEventDataMapping( Grid grid )", "full_signature": "public static Map<String, Object> getAggregatedEventDataMapping( Grid grid )", "class_method_signature": "EventAnalyticsUtils.getAggregatedEventDataMapping( Grid grid )", "testcase": false, "constructor": false}, {"identifier": "addValues", "parameters": "( List<List<String>> ids, Grid grid, Grid outputGrid )", "modifiers": "public static", "return": "void", "signature": "void addValues( List<List<String>> ids, Grid grid, Grid outputGrid )", "full_signature": "public static void addValues( List<List<String>> ids, Grid grid, Grid outputGrid )", "class_method_signature": "EventAnalyticsUtils.addValues( List<List<String>> ids, Grid grid, Grid outputGrid )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/event/EventAnalyticsUtils.java"}, "focal_method": {"identifier": "getAggregatedEventDataMapping", "parameters": "( Grid grid )", "modifiers": "public static", "return": "Map<String, Object>", "body": "public static Map<String, Object> getAggregatedEventDataMapping( Grid grid )\n    {\n        Map<String, Object> map = new HashMap<>();\n\n        int metaCols = grid.getWidth() - 1;\n        int valueIndex = grid.getWidth() - 1;\n\n        for ( List<Object> row : grid.getRows() )\n        {\n            List<String> ids = new ArrayList<>();\n\n            for ( int index = 0; index < metaCols; index++ )\n            {\n                Object id = row.get( index );\n\n                if ( id != null )\n                {\n                    ids.add( (String) row.get( index ) );\n                }\n            }\n\n            Collections.sort( ids );\n\n            String key = StringUtils.join( ids, DIMENSION_SEP );\n            Object value = row.get( valueIndex );\n\n            map.put( key, value );\n        }\n\n        return map;\n    }", "signature": "Map<String, Object> getAggregatedEventDataMapping( Grid grid )", "full_signature": "public static Map<String, Object> getAggregatedEventDataMapping( Grid grid )", "class_method_signature": "EventAnalyticsUtils.getAggregatedEventDataMapping( Grid grid )", "testcase": false, "constructor": false, "invocations": ["getWidth", "getWidth", "getRows", "get", "add", "get", "sort", "join", "get", "put"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}