{"test_class": {"identifier": "PairwiseResnikSimilarityTest", "superclass": "extends VegetableOntologyTestBase", "interfaces": "", "fields": [{"original_string": "private PairwiseResnikSimilarity similarity;", "modifier": "private", "type": "PairwiseResnikSimilarity", "declarator": "similarity", "var_name": "similarity"}], "file": "phenol-core/src/test/java/org/monarchinitiative/phenol/ontology/similarity/PairwiseResnikSimilarityTest.java"}, "test_case": {"identifier": "testComputeSimilarities", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testComputeSimilarities() {\n    assertEquals(0.0, similarity.computeScore(idBeet, idCarrot), 0.01);\n    assertEquals(0.405, similarity.computeScore(idBlueCarrot, idCarrot), 0.01);\n    assertEquals(0.0, similarity.computeScore(idPumpkin, idCarrot), 0.01);\n    assertEquals(0.0, similarity.computeScore(idLeafVegetable, idCarrot), 0.01);\n  }", "signature": "void testComputeSimilarities()", "full_signature": "@Test public void testComputeSimilarities()", "class_method_signature": "PairwiseResnikSimilarityTest.testComputeSimilarities()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore"]}, "focal_class": {"identifier": "PairwiseResnikSimilarity", "superclass": "", "interfaces": "implements PairwiseSimilarity", "fields": [{"original_string": "private final Ontology ontology;", "modifier": "private final", "type": "Ontology", "declarator": "ontology", "var_name": "ontology"}, {"original_string": "private final Map<TermId, Double> termToIc;", "modifier": "private final", "type": "Map<TermId, Double>", "declarator": "termToIc", "var_name": "termToIc"}], "methods": [{"identifier": "PairwiseResnikSimilarity", "parameters": "()", "modifiers": "protected", "return": "", "signature": " PairwiseResnikSimilarity()", "full_signature": "protected  PairwiseResnikSimilarity()", "class_method_signature": "PairwiseResnikSimilarity.PairwiseResnikSimilarity()", "testcase": false, "constructor": true}, {"identifier": "PairwiseResnikSimilarity", "parameters": "(Ontology ontology, Map<TermId, Double> termToIc)", "modifiers": "public", "return": "", "signature": " PairwiseResnikSimilarity(Ontology ontology, Map<TermId, Double> termToIc)", "full_signature": "public  PairwiseResnikSimilarity(Ontology ontology, Map<TermId, Double> termToIc)", "class_method_signature": "PairwiseResnikSimilarity.PairwiseResnikSimilarity(Ontology ontology, Map<TermId, Double> termToIc)", "testcase": false, "constructor": true}, {"identifier": "computeScoreImpl", "parameters": "(TermId query, TermId target)", "modifiers": "private", "return": "double", "signature": "double computeScoreImpl(TermId query, TermId target)", "full_signature": "private double computeScoreImpl(TermId query, TermId target)", "class_method_signature": "PairwiseResnikSimilarity.computeScoreImpl(TermId query, TermId target)", "testcase": false, "constructor": false}, {"identifier": "computeScore", "parameters": "(TermId query, TermId target)", "modifiers": "@Override public", "return": "double", "signature": "double computeScore(TermId query, TermId target)", "full_signature": "@Override public double computeScore(TermId query, TermId target)", "class_method_signature": "PairwiseResnikSimilarity.computeScore(TermId query, TermId target)", "testcase": false, "constructor": false}, {"identifier": "getOntology", "parameters": "()", "modifiers": "public", "return": "Ontology", "signature": "Ontology getOntology()", "full_signature": "public Ontology getOntology()", "class_method_signature": "PairwiseResnikSimilarity.getOntology()", "testcase": false, "constructor": false}, {"identifier": "getTermToIc", "parameters": "()", "modifiers": "public", "return": "Map<TermId, Double>", "signature": "Map<TermId, Double> getTermToIc()", "full_signature": "public Map<TermId, Double> getTermToIc()", "class_method_signature": "PairwiseResnikSimilarity.getTermToIc()", "testcase": false, "constructor": false}], "file": "phenol-core/src/main/java/org/monarchinitiative/phenol/ontology/similarity/PairwiseResnikSimilarity.java"}, "focal_method": {"identifier": "computeScore", "parameters": "(TermId query, TermId target)", "modifiers": "@Override public", "return": "double", "body": "@Override\n  public double computeScore(TermId query, TermId target) {\n    return computeScoreImpl(query, target);\n  }", "signature": "double computeScore(TermId query, TermId target)", "full_signature": "@Override public double computeScore(TermId query, TermId target)", "class_method_signature": "PairwiseResnikSimilarity.computeScore(TermId query, TermId target)", "testcase": false, "constructor": false, "invocations": ["computeScoreImpl"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}