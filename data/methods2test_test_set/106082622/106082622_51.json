{"test_class": {"identifier": "WebKafkaConsumerFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static SharedKafkaTestResource sharedKafkaTestResource = new SharedKafkaTestResource();", "modifier": "@ClassRule\n    public static", "type": "SharedKafkaTestResource", "declarator": "sharedKafkaTestResource = new SharedKafkaTestResource()", "var_name": "sharedKafkaTestResource"}, {"original_string": "private static ExecutorService executorService;", "modifier": "private static", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private String topic1;", "modifier": "private", "type": "String", "declarator": "topic1", "var_name": "topic1"}, {"original_string": "private String topic2;", "modifier": "private", "type": "String", "declarator": "topic2", "var_name": "topic2"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/kafka/WebKafkaConsumerFactoryTest.java"}, "test_case": {"identifier": "smokeTestWebClient_noFilters_partitionFilter", "parameters": "(final WebKafkaConsumerFactory factory)", "modifiers": "@Test @Parameters(method = \"provideFactoryInstances\") public", "return": "void", "body": "@Test\n    @Parameters(method = \"provideFactoryInstances\")\n    public void smokeTestWebClient_noFilters_partitionFilter(final WebKafkaConsumerFactory factory) {\n        final int resultsPerPartition = 5;\n\n        // Create default view.\n        final View view = createDefaultView(topic1);\n\n        // Set results per partition to 5\n        view.setResultsPerPartition(resultsPerPartition);\n\n        // Set to only read partition 1\n        view.setPartitions(\"1\");\n\n        // Create SessionId\n        final SessionIdentifier sessionId = SessionIdentifier.newWebIdentifier(12L, \"MySession\");\n\n        // Ok lets see what happens\n        try (final WebKafkaConsumer webKafkaConsumer = factory.createWebClient(view, new ArrayList<>(), sessionId)) {\n            // Validate we got something back\n            assertNotNull(webKafkaConsumer);\n\n            // Consume everything\n            final List<KafkaResult> results = consumeAllResults(webKafkaConsumer, resultsPerPartition);\n            assertEquals(\"Should have 10 records\", 10, results.size());\n\n            // Validate is from partition 1 only\n            for (final KafkaResult kafkaResult: results) {\n                assertEquals(\"Should be from partition 1\", 1, kafkaResult.getPartition());\n            }\n        }\n    }", "signature": "void smokeTestWebClient_noFilters_partitionFilter(final WebKafkaConsumerFactory factory)", "full_signature": "@Test @Parameters(method = \"provideFactoryInstances\") public void smokeTestWebClient_noFilters_partitionFilter(final WebKafkaConsumerFactory factory)", "class_method_signature": "WebKafkaConsumerFactoryTest.smokeTestWebClient_noFilters_partitionFilter(final WebKafkaConsumerFactory factory)", "testcase": true, "constructor": false, "invocations": ["createDefaultView", "setResultsPerPartition", "setPartitions", "newWebIdentifier", "createWebClient", "assertNotNull", "consumeAllResults", "assertEquals", "size", "assertEquals", "getPartition"]}, "focal_class": {"identifier": "WebKafkaConsumerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(WebKafkaConsumerFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(WebKafkaConsumerFactory.class)", "var_name": "logger"}, {"original_string": "private static final String consumerIdPrefix = \"UserId\";", "modifier": "private static final", "type": "String", "declarator": "consumerIdPrefix = \"UserId\"", "var_name": "consumerIdPrefix"}, {"original_string": "private final PluginFactory<Deserializer> deserializerPluginFactory;", "modifier": "private final", "type": "PluginFactory<Deserializer>", "declarator": "deserializerPluginFactory", "var_name": "deserializerPluginFactory"}, {"original_string": "private final PluginFactory<RecordFilter> recordFilterPluginFactory;", "modifier": "private final", "type": "PluginFactory<RecordFilter>", "declarator": "recordFilterPluginFactory", "var_name": "recordFilterPluginFactory"}, {"original_string": "private final SecretManager secretManager;", "modifier": "private final", "type": "SecretManager", "declarator": "secretManager", "var_name": "secretManager"}, {"original_string": "private final KafkaConsumerFactory kafkaConsumerFactory;", "modifier": "private final", "type": "KafkaConsumerFactory", "declarator": "kafkaConsumerFactory", "var_name": "kafkaConsumerFactory"}, {"original_string": "private final ExecutorService multiThreadedConsumerThreadPool;", "modifier": "private final", "type": "ExecutorService", "declarator": "multiThreadedConsumerThreadPool", "var_name": "multiThreadedConsumerThreadPool"}, {"original_string": "private final ObjectMapper mapper = new ObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}], "methods": [{"identifier": "WebKafkaConsumerFactory", "parameters": "(\n        final PluginFactory<Deserializer> deserializerPluginFactory,\n        final PluginFactory<RecordFilter> recordFilterPluginFactory,\n        final SecretManager secretManager,\n        final KafkaConsumerFactory kafkaConsumerFactory,\n        final ExecutorService multiThreadedConsumerThreadPool)", "modifiers": "public", "return": "", "signature": " WebKafkaConsumerFactory(\n        final PluginFactory<Deserializer> deserializerPluginFactory,\n        final PluginFactory<RecordFilter> recordFilterPluginFactory,\n        final SecretManager secretManager,\n        final KafkaConsumerFactory kafkaConsumerFactory,\n        final ExecutorService multiThreadedConsumerThreadPool)", "full_signature": "public  WebKafkaConsumerFactory(\n        final PluginFactory<Deserializer> deserializerPluginFactory,\n        final PluginFactory<RecordFilter> recordFilterPluginFactory,\n        final SecretManager secretManager,\n        final KafkaConsumerFactory kafkaConsumerFactory,\n        final ExecutorService multiThreadedConsumerThreadPool)", "class_method_signature": "WebKafkaConsumerFactory.WebKafkaConsumerFactory(\n        final PluginFactory<Deserializer> deserializerPluginFactory,\n        final PluginFactory<RecordFilter> recordFilterPluginFactory,\n        final SecretManager secretManager,\n        final KafkaConsumerFactory kafkaConsumerFactory,\n        final ExecutorService multiThreadedConsumerThreadPool)", "testcase": false, "constructor": true}, {"identifier": "createWebClient", "parameters": "(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final SessionIdentifier sessionIdentifier)", "modifiers": "public", "return": "WebKafkaConsumer", "signature": "WebKafkaConsumer createWebClient(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final SessionIdentifier sessionIdentifier)", "full_signature": "public WebKafkaConsumer createWebClient(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final SessionIdentifier sessionIdentifier)", "class_method_signature": "WebKafkaConsumerFactory.createWebClient(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final SessionIdentifier sessionIdentifier)", "testcase": false, "constructor": false}, {"identifier": "createWebSocketClient", "parameters": "(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final StartingPosition startingPosition,\n        final SessionIdentifier sessionIdentifier)", "modifiers": "public", "return": "SocketKafkaConsumer", "signature": "SocketKafkaConsumer createWebSocketClient(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final StartingPosition startingPosition,\n        final SessionIdentifier sessionIdentifier)", "full_signature": "public SocketKafkaConsumer createWebSocketClient(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final StartingPosition startingPosition,\n        final SessionIdentifier sessionIdentifier)", "class_method_signature": "WebKafkaConsumerFactory.createWebSocketClient(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final StartingPosition startingPosition,\n        final SessionIdentifier sessionIdentifier)", "testcase": false, "constructor": false}, {"identifier": "createClientConfig", "parameters": "(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final SessionIdentifier sessionIdentifier)", "modifiers": "private", "return": "ClientConfig.Builder", "signature": "ClientConfig.Builder createClientConfig(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final SessionIdentifier sessionIdentifier)", "full_signature": "private ClientConfig.Builder createClientConfig(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final SessionIdentifier sessionIdentifier)", "class_method_signature": "WebKafkaConsumerFactory.createClientConfig(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final SessionIdentifier sessionIdentifier)", "testcase": false, "constructor": false}, {"identifier": "buildRecordFilterDefinition", "parameters": "(final Filter filter, final Map<String, String> options)", "modifiers": "private", "return": "RecordFilterDefinition", "signature": "RecordFilterDefinition buildRecordFilterDefinition(final Filter filter, final Map<String, String> options)", "full_signature": "private RecordFilterDefinition buildRecordFilterDefinition(final Filter filter, final Map<String, String> options)", "class_method_signature": "WebKafkaConsumerFactory.buildRecordFilterDefinition(final Filter filter, final Map<String, String> options)", "testcase": false, "constructor": false}, {"identifier": "buildRecordFilterDefinition", "parameters": "(final Filter filter, final String optionParametersJsonStr)", "modifiers": "private", "return": "RecordFilterDefinition", "signature": "RecordFilterDefinition buildRecordFilterDefinition(final Filter filter, final String optionParametersJsonStr)", "full_signature": "private RecordFilterDefinition buildRecordFilterDefinition(final Filter filter, final String optionParametersJsonStr)", "class_method_signature": "WebKafkaConsumerFactory.buildRecordFilterDefinition(final Filter filter, final String optionParametersJsonStr)", "testcase": false, "constructor": false}, {"identifier": "buildDeserializerConfig", "parameters": "(final View view)", "modifiers": "private", "return": "DeserializerConfig", "signature": "DeserializerConfig buildDeserializerConfig(final View view)", "full_signature": "private DeserializerConfig buildDeserializerConfig(final View view)", "class_method_signature": "WebKafkaConsumerFactory.buildDeserializerConfig(final View view)", "testcase": false, "constructor": false}, {"identifier": "getDeserializerClass", "parameters": "(final MessageFormat messageFormat)", "modifiers": "private", "return": "Class<? extends Deserializer>", "signature": "Class<? extends Deserializer> getDeserializerClass(final MessageFormat messageFormat)", "full_signature": "private Class<? extends Deserializer> getDeserializerClass(final MessageFormat messageFormat)", "class_method_signature": "WebKafkaConsumerFactory.getDeserializerClass(final MessageFormat messageFormat)", "testcase": false, "constructor": false}, {"identifier": "createKafkaConsumer", "parameters": "(final ClientConfig clientConfig)", "modifiers": "private", "return": "KafkaConsumer", "signature": "KafkaConsumer createKafkaConsumer(final ClientConfig clientConfig)", "full_signature": "private KafkaConsumer createKafkaConsumer(final ClientConfig clientConfig)", "class_method_signature": "WebKafkaConsumerFactory.createKafkaConsumer(final ClientConfig clientConfig)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/kafka/WebKafkaConsumerFactory.java"}, "focal_method": {"identifier": "createWebClient", "parameters": "(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final SessionIdentifier sessionIdentifier)", "modifiers": "public", "return": "WebKafkaConsumer", "body": "public WebKafkaConsumer createWebClient(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final SessionIdentifier sessionIdentifier) {\n\n        // Create client config builder\n        final ClientConfig clientConfig = createClientConfig(view, filterDefinitions, sessionIdentifier)\n            // Always resume from existing state.\n            .withStartingPosition(StartingPosition.newResumeFromExistingState())\n            .build();\n\n        // If we've been passed an executor service\n        if (multiThreadedConsumerThreadPool != null) {\n            // Assume we want to use multi-threaded consumer.\n            return new ParallelWebKafkaConsumer(kafkaConsumerFactory, clientConfig, multiThreadedConsumerThreadPool);\n        } else {\n            // Create single threaded kafka consumer\n            final KafkaConsumer kafkaConsumer = createKafkaConsumer(clientConfig);\n            return new DefaultWebKafkaConsumer(kafkaConsumer, clientConfig);\n        }\n    }", "signature": "WebKafkaConsumer createWebClient(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final SessionIdentifier sessionIdentifier)", "full_signature": "public WebKafkaConsumer createWebClient(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final SessionIdentifier sessionIdentifier)", "class_method_signature": "WebKafkaConsumerFactory.createWebClient(\n        final View view,\n        final Collection<FilterDefinition> filterDefinitions,\n        final SessionIdentifier sessionIdentifier)", "testcase": false, "constructor": false, "invocations": ["build", "withStartingPosition", "createClientConfig", "newResumeFromExistingState", "createKafkaConsumer"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}