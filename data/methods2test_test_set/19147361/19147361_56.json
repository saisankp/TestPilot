{"test_class": {"identifier": "TestServerLockCleaner", "superclass": "extends TransactionTestBase", "interfaces": "", "fields": [{"original_string": "protected ServerLockCleaner lockCleaner;", "modifier": "protected", "type": "ServerLockCleaner", "declarator": "lockCleaner", "var_name": "lockCleaner"}], "file": "themis-coprocessor/src/test/java/org/apache/hadoop/hbase/themis/cp/TestServerLockCleaner.java"}, "test_case": {"identifier": "testCreateGetOfWriteColumnsIndexingPrewriteTs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreateGetOfWriteColumnsIndexingPrewriteTs() throws IOException {\n    Get get = lockCleaner.createGetOfWriteColumnsIndexingPrewriteTs(COLUMN, prewriteTs);\n    TestThemisCpUtil.checkReadWithWriteColumns(get.getFamilyMap(), COLUMN);\n    Assert.assertEquals(prewriteTs, get.getTimeRange().getMin());\n    Assert.assertEquals(Long.MAX_VALUE, get.getTimeRange().getMax());\n    Assert.assertEquals(Integer.MAX_VALUE, get.getMaxVersions());\n  }", "signature": "void testCreateGetOfWriteColumnsIndexingPrewriteTs()", "full_signature": "@Test public void testCreateGetOfWriteColumnsIndexingPrewriteTs()", "class_method_signature": "TestServerLockCleaner.testCreateGetOfWriteColumnsIndexingPrewriteTs()", "testcase": true, "constructor": false, "invocations": ["createGetOfWriteColumnsIndexingPrewriteTs", "checkReadWithWriteColumns", "getFamilyMap", "assertEquals", "getMin", "getTimeRange", "assertEquals", "getMax", "getTimeRange", "assertEquals", "getMaxVersions"]}, "focal_class": {"identifier": "ServerLockCleaner", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final ThemisCoprocessorClient cpClient;", "modifier": "protected final", "type": "ThemisCoprocessorClient", "declarator": "cpClient", "var_name": "cpClient"}, {"original_string": "protected final HConnection conn;", "modifier": "protected final", "type": "HConnection", "declarator": "conn", "var_name": "conn"}], "methods": [{"identifier": "ServerLockCleaner", "parameters": "(HConnection conn, ThemisCoprocessorClient cpClient)", "modifiers": "public", "return": "", "signature": " ServerLockCleaner(HConnection conn, ThemisCoprocessorClient cpClient)", "full_signature": "public  ServerLockCleaner(HConnection conn, ThemisCoprocessorClient cpClient)", "class_method_signature": "ServerLockCleaner.ServerLockCleaner(HConnection conn, ThemisCoprocessorClient cpClient)", "testcase": false, "constructor": true}, {"identifier": "getPrimaryLockWithColumn", "parameters": "(ThemisLock lock)", "modifiers": "public static", "return": "PrimaryLock", "signature": "PrimaryLock getPrimaryLockWithColumn(ThemisLock lock)", "full_signature": "public static PrimaryLock getPrimaryLockWithColumn(ThemisLock lock)", "class_method_signature": "ServerLockCleaner.getPrimaryLockWithColumn(ThemisLock lock)", "testcase": false, "constructor": false}, {"identifier": "cleanLock", "parameters": "(ThemisLock lock)", "modifiers": "public", "return": "void", "signature": "void cleanLock(ThemisLock lock)", "full_signature": "public void cleanLock(ThemisLock lock)", "class_method_signature": "ServerLockCleaner.cleanLock(ThemisLock lock)", "testcase": false, "constructor": false}, {"identifier": "cleanPrimaryLock", "parameters": "(ColumnCoordinate columnCoordinate,\n      long prewriteTs)", "modifiers": "public", "return": "Pair<Long, PrimaryLock>", "signature": "Pair<Long, PrimaryLock> cleanPrimaryLock(ColumnCoordinate columnCoordinate,\n      long prewriteTs)", "full_signature": "public Pair<Long, PrimaryLock> cleanPrimaryLock(ColumnCoordinate columnCoordinate,\n      long prewriteTs)", "class_method_signature": "ServerLockCleaner.cleanPrimaryLock(ColumnCoordinate columnCoordinate,\n      long prewriteTs)", "testcase": false, "constructor": false}, {"identifier": "getTimestampOfWriteIndexingPrewriteTs", "parameters": "(ColumnCoordinate columnCoordinate, long timestamp)", "modifiers": "public", "return": "Long", "signature": "Long getTimestampOfWriteIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "full_signature": "public Long getTimestampOfWriteIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "class_method_signature": "ServerLockCleaner.getTimestampOfWriteIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "createGetOfWriteColumnsIndexingPrewriteTs", "parameters": "(ColumnCoordinate columnCoordinate, long timestamp)", "modifiers": "public", "return": "Get", "signature": "Get createGetOfWriteColumnsIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "full_signature": "public Get createGetOfWriteColumnsIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "class_method_signature": "ServerLockCleaner.createGetOfWriteColumnsIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "cleanSecondaryLocks", "parameters": "(PrimaryLock primaryLock, Long commitTs)", "modifiers": "public", "return": "void", "signature": "void cleanSecondaryLocks(PrimaryLock primaryLock, Long commitTs)", "full_signature": "public void cleanSecondaryLocks(PrimaryLock primaryLock, Long commitTs)", "class_method_signature": "ServerLockCleaner.cleanSecondaryLocks(PrimaryLock primaryLock, Long commitTs)", "testcase": false, "constructor": false}, {"identifier": "eraseLockAndData", "parameters": "(ColumnCoordinate column, long timestamp)", "modifiers": "public", "return": "void", "signature": "void eraseLockAndData(ColumnCoordinate column, long timestamp)", "full_signature": "public void eraseLockAndData(ColumnCoordinate column, long timestamp)", "class_method_signature": "ServerLockCleaner.eraseLockAndData(ColumnCoordinate column, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "eraseLockAndData", "parameters": "(byte[] tableName, byte[] row, Collection<Column> columns, long timestamp)", "modifiers": "public", "return": "void", "signature": "void eraseLockAndData(byte[] tableName, byte[] row, Collection<Column> columns, long timestamp)", "full_signature": "public void eraseLockAndData(byte[] tableName, byte[] row, Collection<Column> columns, long timestamp)", "class_method_signature": "ServerLockCleaner.eraseLockAndData(byte[] tableName, byte[] row, Collection<Column> columns, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "closeTable", "parameters": "(HTableInterface table)", "modifiers": "protected", "return": "void", "signature": "void closeTable(HTableInterface table)", "full_signature": "protected void closeTable(HTableInterface table)", "class_method_signature": "ServerLockCleaner.closeTable(HTableInterface table)", "testcase": false, "constructor": false}], "file": "themis-coprocessor/src/main/java/org/apache/hadoop/hbase/themis/cp/ServerLockCleaner.java"}, "focal_method": {"identifier": "createGetOfWriteColumnsIndexingPrewriteTs", "parameters": "(ColumnCoordinate columnCoordinate, long timestamp)", "modifiers": "public", "return": "Get", "body": "public Get createGetOfWriteColumnsIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)\n      throws IOException {\n    Get get = new Get(columnCoordinate.getRow());\n    ThemisCpUtil.addWriteColumnToGet(columnCoordinate, get);\n    get.setTimeRange(timestamp, Long.MAX_VALUE);\n    get.setMaxVersions();\n    return get;\n  }", "signature": "Get createGetOfWriteColumnsIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "full_signature": "public Get createGetOfWriteColumnsIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "class_method_signature": "ServerLockCleaner.createGetOfWriteColumnsIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "testcase": false, "constructor": false, "invocations": ["getRow", "addWriteColumnToGet", "setTimeRange", "setMaxVersions"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}