{"test_class": {"identifier": "SimpleCatalogUtilsServiceTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private SimpleCatalogUtilsService service;", "modifier": "private", "type": "SimpleCatalogUtilsService", "declarator": "service", "var_name": "service"}, {"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private OrmFactory<Catalog> catalogFactory = getRequiredOrmFactory(Catalog.class);", "modifier": "private", "type": "OrmFactory<Catalog>", "declarator": "catalogFactory = getRequiredOrmFactory(Catalog.class)", "var_name": "catalogFactory"}, {"original_string": "private OrmFactory<Record> recordFactory = getRequiredOrmFactory(Record.class);", "modifier": "private", "type": "OrmFactory<Record>", "declarator": "recordFactory = getRequiredOrmFactory(Record.class)", "var_name": "recordFactory"}, {"original_string": "private OrmFactory<VersionedRDFRecord> versionedRDFRecordFactory = getRequiredOrmFactory(VersionedRDFRecord.class);", "modifier": "private", "type": "OrmFactory<VersionedRDFRecord>", "declarator": "versionedRDFRecordFactory = getRequiredOrmFactory(VersionedRDFRecord.class)", "var_name": "versionedRDFRecordFactory"}, {"original_string": "private OrmFactory<Version> versionFactory = getRequiredOrmFactory(Version.class);", "modifier": "private", "type": "OrmFactory<Version>", "declarator": "versionFactory = getRequiredOrmFactory(Version.class)", "var_name": "versionFactory"}, {"original_string": "private OrmFactory<Branch> branchFactory = getRequiredOrmFactory(Branch.class);", "modifier": "private", "type": "OrmFactory<Branch>", "declarator": "branchFactory = getRequiredOrmFactory(Branch.class)", "var_name": "branchFactory"}, {"original_string": "private OrmFactory<Commit> commitFactory = getRequiredOrmFactory(Commit.class);", "modifier": "private", "type": "OrmFactory<Commit>", "declarator": "commitFactory = getRequiredOrmFactory(Commit.class)", "var_name": "commitFactory"}, {"original_string": "private OrmFactory<InProgressCommit> inProgressCommitFactory = getRequiredOrmFactory(InProgressCommit.class);", "modifier": "private", "type": "OrmFactory<InProgressCommit>", "declarator": "inProgressCommitFactory = getRequiredOrmFactory(InProgressCommit.class)", "var_name": "inProgressCommitFactory"}, {"original_string": "private OrmFactory<Distribution> distributionFactory = getRequiredOrmFactory(Distribution.class);", "modifier": "private", "type": "OrmFactory<Distribution>", "declarator": "distributionFactory = getRequiredOrmFactory(Distribution.class)", "var_name": "distributionFactory"}, {"original_string": "private final IRI typeIRI = VALUE_FACTORY.createIRI(com.mobi.ontologies.rdfs.Resource.type_IRI);", "modifier": "private final", "type": "IRI", "declarator": "typeIRI = VALUE_FACTORY.createIRI(com.mobi.ontologies.rdfs.Resource.type_IRI)", "var_name": "typeIRI"}, {"original_string": "private final IRI labelIRI = VALUE_FACTORY.createIRI(com.mobi.ontologies.rdfs.Resource.label_IRI);", "modifier": "private final", "type": "IRI", "declarator": "labelIRI = VALUE_FACTORY.createIRI(com.mobi.ontologies.rdfs.Resource.label_IRI)", "var_name": "labelIRI"}, {"original_string": "private final IRI titleIRI = VALUE_FACTORY.createIRI(_Thing.title_IRI);", "modifier": "private final", "type": "IRI", "declarator": "titleIRI = VALUE_FACTORY.createIRI(_Thing.title_IRI)", "var_name": "titleIRI"}, {"original_string": "private final IRI descriptionIRI = VALUE_FACTORY.createIRI(_Thing.description_IRI);", "modifier": "private final", "type": "IRI", "declarator": "descriptionIRI = VALUE_FACTORY.createIRI(_Thing.description_IRI)", "var_name": "descriptionIRI"}, {"original_string": "private final IRI MISSING_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test#missing\");", "modifier": "private final", "type": "IRI", "declarator": "MISSING_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test#missing\")", "var_name": "MISSING_IRI"}, {"original_string": "private final IRI EMPTY_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test#empty\");", "modifier": "private final", "type": "IRI", "declarator": "EMPTY_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test#empty\")", "var_name": "EMPTY_IRI"}, {"original_string": "private final IRI RANDOM_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test#random\");", "modifier": "private final", "type": "IRI", "declarator": "RANDOM_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test#random\")", "var_name": "RANDOM_IRI"}, {"original_string": "private final IRI DIFFERENT_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test#different\");", "modifier": "private final", "type": "IRI", "declarator": "DIFFERENT_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test#different\")", "var_name": "DIFFERENT_IRI"}, {"original_string": "private final IRI USER_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/users#taken\");", "modifier": "private final", "type": "IRI", "declarator": "USER_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/users#taken\")", "var_name": "USER_IRI"}, {"original_string": "private final IRI USER2_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/users#user2\");", "modifier": "private final", "type": "IRI", "declarator": "USER2_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/users#user2\")", "var_name": "USER2_IRI"}, {"original_string": "private final IRI CATALOG_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/catalogs#catalog-distributed\");", "modifier": "private final", "type": "IRI", "declarator": "CATALOG_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/catalogs#catalog-distributed\")", "var_name": "CATALOG_IRI"}, {"original_string": "private final IRI RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#record\");", "modifier": "private final", "type": "IRI", "declarator": "RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#record\")", "var_name": "RECORD_IRI"}, {"original_string": "private final IRI RECORD_NO_CATALOG_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#record-no-catalog\");", "modifier": "private final", "type": "IRI", "declarator": "RECORD_NO_CATALOG_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#record-no-catalog\")", "var_name": "RECORD_NO_CATALOG_IRI"}, {"original_string": "private final IRI UNVERSIONED_RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#unversioned-record\");", "modifier": "private final", "type": "IRI", "declarator": "UNVERSIONED_RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#unversioned-record\")", "var_name": "UNVERSIONED_RECORD_IRI"}, {"original_string": "private final IRI UNVERSIONED_RECORD_NO_CATALOG_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#unversioned-record-no-catalog\");", "modifier": "private final", "type": "IRI", "declarator": "UNVERSIONED_RECORD_NO_CATALOG_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#unversioned-record-no-catalog\")", "var_name": "UNVERSIONED_RECORD_NO_CATALOG_IRI"}, {"original_string": "private final IRI UNVERSIONED_RECORD_MISSING_DISTRIBUTION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#unversioned-record-missing-distribution\");", "modifier": "private final", "type": "IRI", "declarator": "UNVERSIONED_RECORD_MISSING_DISTRIBUTION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#unversioned-record-missing-distribution\")", "var_name": "UNVERSIONED_RECORD_MISSING_DISTRIBUTION_IRI"}, {"original_string": "private final IRI VERSIONED_RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-record\");", "modifier": "private final", "type": "IRI", "declarator": "VERSIONED_RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-record\")", "var_name": "VERSIONED_RECORD_IRI"}, {"original_string": "private final IRI VERSIONED_RECORD_NO_CATALOG_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-record-no-catalog\");", "modifier": "private final", "type": "IRI", "declarator": "VERSIONED_RECORD_NO_CATALOG_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-record-no-catalog\")", "var_name": "VERSIONED_RECORD_NO_CATALOG_IRI"}, {"original_string": "private final IRI VERSIONED_RECORD_MISSING_VERSION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-record-missing-version\");", "modifier": "private final", "type": "IRI", "declarator": "VERSIONED_RECORD_MISSING_VERSION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-record-missing-version\")", "var_name": "VERSIONED_RECORD_MISSING_VERSION_IRI"}, {"original_string": "private final IRI VERSIONED_RDF_RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-rdf-record\");", "modifier": "private final", "type": "IRI", "declarator": "VERSIONED_RDF_RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-rdf-record\")", "var_name": "VERSIONED_RDF_RECORD_IRI"}, {"original_string": "private final IRI VERSIONED_RDF_RECORD_NO_CATALOG_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-rdf-record-no-catalog\");", "modifier": "private final", "type": "IRI", "declarator": "VERSIONED_RDF_RECORD_NO_CATALOG_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-rdf-record-no-catalog\")", "var_name": "VERSIONED_RDF_RECORD_NO_CATALOG_IRI"}, {"original_string": "private final IRI VERSIONED_RDF_RECORD_MISSING_BRANCH_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-rdf-record-missing-branch\");", "modifier": "private final", "type": "IRI", "declarator": "VERSIONED_RDF_RECORD_MISSING_BRANCH_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-rdf-record-missing-branch\")", "var_name": "VERSIONED_RDF_RECORD_MISSING_BRANCH_IRI"}, {"original_string": "private final IRI LATEST_VERSION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/versions#latest-version\");", "modifier": "private final", "type": "IRI", "declarator": "LATEST_VERSION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/versions#latest-version\")", "var_name": "LATEST_VERSION_IRI"}, {"original_string": "private final IRI LATEST_TAG_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/versions#latest-tag\");", "modifier": "private final", "type": "IRI", "declarator": "LATEST_TAG_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/versions#latest-tag\")", "var_name": "LATEST_TAG_IRI"}, {"original_string": "private final IRI DISTRIBUTION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/distributions#distribution\");", "modifier": "private final", "type": "IRI", "declarator": "DISTRIBUTION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/distributions#distribution\")", "var_name": "DISTRIBUTION_IRI"}, {"original_string": "private final IRI LONE_DISTRIBUTION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/distributions#lone-distribution\");", "modifier": "private final", "type": "IRI", "declarator": "LONE_DISTRIBUTION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/distributions#lone-distribution\")", "var_name": "LONE_DISTRIBUTION_IRI"}, {"original_string": "private final IRI VERSION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/versions#version\");", "modifier": "private final", "type": "IRI", "declarator": "VERSION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/versions#version\")", "var_name": "VERSION_IRI"}, {"original_string": "private final IRI LONE_VERSION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/versions#lone-version\");", "modifier": "private final", "type": "IRI", "declarator": "LONE_VERSION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/versions#lone-version\")", "var_name": "LONE_VERSION_IRI"}, {"original_string": "private final IRI VERSION_MISSING_DISTRIBUTION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/versions#version-missing-distribution\");", "modifier": "private final", "type": "IRI", "declarator": "VERSION_MISSING_DISTRIBUTION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/versions#version-missing-distribution\")", "var_name": "VERSION_MISSING_DISTRIBUTION_IRI"}, {"original_string": "private final IRI BRANCH_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#branch\");", "modifier": "private final", "type": "IRI", "declarator": "BRANCH_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#branch\")", "var_name": "BRANCH_IRI"}, {"original_string": "private final IRI LONE_BRANCH_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#lone-branch\");", "modifier": "private final", "type": "IRI", "declarator": "LONE_BRANCH_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#lone-branch\")", "var_name": "LONE_BRANCH_IRI"}, {"original_string": "private final IRI COMMIT_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/commits#commit\");", "modifier": "private final", "type": "IRI", "declarator": "COMMIT_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/commits#commit\")", "var_name": "COMMIT_IRI"}, {"original_string": "private final IRI COMMIT_NO_ADDITIONS_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/commits#commit-no-additions\");", "modifier": "private final", "type": "IRI", "declarator": "COMMIT_NO_ADDITIONS_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/commits#commit-no-additions\")", "var_name": "COMMIT_NO_ADDITIONS_IRI"}, {"original_string": "private final IRI COMMIT_NO_DELETIONS_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/commits#commit-no-deletions\");", "modifier": "private final", "type": "IRI", "declarator": "COMMIT_NO_DELETIONS_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/commits#commit-no-deletions\")", "var_name": "COMMIT_NO_DELETIONS_IRI"}, {"original_string": "private final IRI IN_PROGRESS_COMMIT_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/commits#in-progress-commit\");", "modifier": "private final", "type": "IRI", "declarator": "IN_PROGRESS_COMMIT_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/commits#in-progress-commit\")", "var_name": "IN_PROGRESS_COMMIT_IRI"}, {"original_string": "private final IRI IN_PROGRESS_COMMIT_NO_RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/commits#in-progress-commit-no-record\");", "modifier": "private final", "type": "IRI", "declarator": "IN_PROGRESS_COMMIT_NO_RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/commits#in-progress-commit-no-record\")", "var_name": "IN_PROGRESS_COMMIT_NO_RECORD_IRI"}, {"original_string": "private final IRI OWL_THING = VALUE_FACTORY.createIRI(\"http://www.w3.org/2002/07/owl#Thing\");", "modifier": "private final", "type": "IRI", "declarator": "OWL_THING = VALUE_FACTORY.createIRI(\"http://www.w3.org/2002/07/owl#Thing\")", "var_name": "OWL_THING"}, {"original_string": "private static final String COMMITS = \"http://mobi.com/test/commits#\";", "modifier": "private static final", "type": "String", "declarator": "COMMITS = \"http://mobi.com/test/commits#\"", "var_name": "COMMITS"}, {"original_string": "private static final String GRAPHS = \"http://mobi.com/test/graphs#\";", "modifier": "private static final", "type": "String", "declarator": "GRAPHS = \"http://mobi.com/test/graphs#\"", "var_name": "GRAPHS"}, {"original_string": "private static final String ADDITIONS = \"https://mobi.com/additions#\";", "modifier": "private static final", "type": "String", "declarator": "ADDITIONS = \"https://mobi.com/additions#\"", "var_name": "ADDITIONS"}, {"original_string": "private static final String DELETIONS = \"https://mobi.com/deletions#\";", "modifier": "private static final", "type": "String", "declarator": "DELETIONS = \"https://mobi.com/deletions#\"", "var_name": "DELETIONS"}, {"original_string": "private static final String BRANCHES = \"http://mobi.com/test/branches#\";", "modifier": "private static final", "type": "String", "declarator": "BRANCHES = \"http://mobi.com/test/branches#\"", "var_name": "BRANCHES"}, {"original_string": "private static final String RECORDS = \"http://mobi.com/test/records#\";", "modifier": "private static final", "type": "String", "declarator": "RECORDS = \"http://mobi.com/test/records#\"", "var_name": "RECORDS"}, {"original_string": "private static final String REVISIONS = \"http://mobi.com/test/revisions#\";", "modifier": "private static final", "type": "String", "declarator": "REVISIONS = \"http://mobi.com/test/revisions#\"", "var_name": "REVISIONS"}, {"original_string": "private static final IRI VERSION_CATALOG_IRI = VALUE_FACTORY.createIRI(VersionedRecord.version_IRI);", "modifier": "private static final", "type": "IRI", "declarator": "VERSION_CATALOG_IRI = VALUE_FACTORY.createIRI(VersionedRecord.version_IRI)", "var_name": "VERSION_CATALOG_IRI"}, {"original_string": "private static final IRI BRANCH_CATALOG_IRI = VALUE_FACTORY.createIRI(VersionedRDFRecord.branch_IRI);", "modifier": "private static final", "type": "IRI", "declarator": "BRANCH_CATALOG_IRI = VALUE_FACTORY.createIRI(VersionedRDFRecord.branch_IRI)", "var_name": "BRANCH_CATALOG_IRI"}, {"original_string": "private static final IRI HEAD_CATALOG_IRI = VALUE_FACTORY.createIRI(Branch.head_IRI);", "modifier": "private static final", "type": "IRI", "declarator": "HEAD_CATALOG_IRI = VALUE_FACTORY.createIRI(Branch.head_IRI)", "var_name": "HEAD_CATALOG_IRI"}, {"original_string": "private static final IRI COMMIT_CATALOG_IRI = VALUE_FACTORY.createIRI(Commit.TYPE);", "modifier": "private static final", "type": "IRI", "declarator": "COMMIT_CATALOG_IRI = VALUE_FACTORY.createIRI(Commit.TYPE)", "var_name": "COMMIT_CATALOG_IRI"}, {"original_string": "private static final IRI ADDITIONS_CATALOG_IRI = VALUE_FACTORY.createIRI(Revision.additions_IRI);", "modifier": "private static final", "type": "IRI", "declarator": "ADDITIONS_CATALOG_IRI = VALUE_FACTORY.createIRI(Revision.additions_IRI)", "var_name": "ADDITIONS_CATALOG_IRI"}, {"original_string": "private static final IRI DELETIONS_CATALOG_IRI = VALUE_FACTORY.createIRI(Revision.deletions_IRI);", "modifier": "private static final", "type": "IRI", "declarator": "DELETIONS_CATALOG_IRI = VALUE_FACTORY.createIRI(Revision.deletions_IRI)", "var_name": "DELETIONS_CATALOG_IRI"}, {"original_string": "private static final IRI LATEST_VERSION_CATALOG_IRI = VALUE_FACTORY.createIRI(VersionedRecord.latestVersion_IRI);", "modifier": "private static final", "type": "IRI", "declarator": "LATEST_VERSION_CATALOG_IRI = VALUE_FACTORY.createIRI(VersionedRecord.latestVersion_IRI)", "var_name": "LATEST_VERSION_CATALOG_IRI"}, {"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "com.mobi.catalog.impl/src/test/java/com/mobi/catalog/impl/SimpleCatalogUtilsServiceTest.java"}, "test_case": {"identifier": "getVersionedDistributionWithWrongRecordTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getVersionedDistributionWithWrongRecordTest() {\n        // Setup:\n        thrown.expect(IllegalArgumentException.class);\n        thrown.expectMessage(String.format(\"Version %s does not belong to VersionedRecord %s\", LONE_VERSION_IRI, VERSIONED_RECORD_IRI));\n\n        try (RepositoryConnection conn = repo.getConnection()) {\n            service.getVersionedDistribution(CATALOG_IRI, VERSIONED_RECORD_IRI, LONE_VERSION_IRI, DISTRIBUTION_IRI, conn);\n        }\n    }", "signature": "void getVersionedDistributionWithWrongRecordTest()", "full_signature": "@Test public void getVersionedDistributionWithWrongRecordTest()", "class_method_signature": "SimpleCatalogUtilsServiceTest.getVersionedDistributionWithWrongRecordTest()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "format", "getConnection", "getVersionedDistribution"]}, "focal_class": {"identifier": "SimpleCatalogUtilsService", "superclass": "", "interfaces": "implements CatalogUtilsService", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(SimpleCatalogUtilsService.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SimpleCatalogUtilsService.class)", "var_name": "log"}, {"original_string": "private ModelFactory mf;", "modifier": "private", "type": "ModelFactory", "declarator": "mf", "var_name": "mf"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private CatalogFactory catalogFactory;", "modifier": "private", "type": "CatalogFactory", "declarator": "catalogFactory", "var_name": "catalogFactory"}, {"original_string": "private RecordFactory recordFactory;", "modifier": "private", "type": "RecordFactory", "declarator": "recordFactory", "var_name": "recordFactory"}, {"original_string": "private UnversionedRecordFactory unversionedRecordFactory;", "modifier": "private", "type": "UnversionedRecordFactory", "declarator": "unversionedRecordFactory", "var_name": "unversionedRecordFactory"}, {"original_string": "private VersionedRecordFactory versionedRecordFactory;", "modifier": "private", "type": "VersionedRecordFactory", "declarator": "versionedRecordFactory", "var_name": "versionedRecordFactory"}, {"original_string": "private VersionedRDFRecordFactory versionedRDFRecordFactory;", "modifier": "private", "type": "VersionedRDFRecordFactory", "declarator": "versionedRDFRecordFactory", "var_name": "versionedRDFRecordFactory"}, {"original_string": "private DistributionFactory distributionFactory;", "modifier": "private", "type": "DistributionFactory", "declarator": "distributionFactory", "var_name": "distributionFactory"}, {"original_string": "private VersionFactory versionFactory;", "modifier": "private", "type": "VersionFactory", "declarator": "versionFactory", "var_name": "versionFactory"}, {"original_string": "private BranchFactory branchFactory;", "modifier": "private", "type": "BranchFactory", "declarator": "branchFactory", "var_name": "branchFactory"}, {"original_string": "private CommitFactory commitFactory;", "modifier": "private", "type": "CommitFactory", "declarator": "commitFactory", "var_name": "commitFactory"}, {"original_string": "private RevisionFactory revisionFactory;", "modifier": "private", "type": "RevisionFactory", "declarator": "revisionFactory", "var_name": "revisionFactory"}, {"original_string": "private GraphRevisionFactory graphRevisionFactory;", "modifier": "private", "type": "GraphRevisionFactory", "declarator": "graphRevisionFactory", "var_name": "graphRevisionFactory"}, {"original_string": "private InProgressCommitFactory inProgressCommitFactory;", "modifier": "private", "type": "InProgressCommitFactory", "declarator": "inProgressCommitFactory", "var_name": "inProgressCommitFactory"}, {"original_string": "private static final String GET_IN_PROGRESS_COMMIT;", "modifier": "private static final", "type": "String", "declarator": "GET_IN_PROGRESS_COMMIT", "var_name": "GET_IN_PROGRESS_COMMIT"}, {"original_string": "private static final String GET_COMMIT_CHAIN;", "modifier": "private static final", "type": "String", "declarator": "GET_COMMIT_CHAIN", "var_name": "GET_COMMIT_CHAIN"}, {"original_string": "private static final String GET_COMMIT_ENTITY_CHAIN;", "modifier": "private static final", "type": "String", "declarator": "GET_COMMIT_ENTITY_CHAIN", "var_name": "GET_COMMIT_ENTITY_CHAIN"}, {"original_string": "private static final String GET_NEW_LATEST_VERSION;", "modifier": "private static final", "type": "String", "declarator": "GET_NEW_LATEST_VERSION", "var_name": "GET_NEW_LATEST_VERSION"}, {"original_string": "private static final String GET_COMMIT_PATHS;", "modifier": "private static final", "type": "String", "declarator": "GET_COMMIT_PATHS", "var_name": "GET_COMMIT_PATHS"}, {"original_string": "private static final String COMMIT_IN_RECORD;", "modifier": "private static final", "type": "String", "declarator": "COMMIT_IN_RECORD", "var_name": "COMMIT_IN_RECORD"}, {"original_string": "private static final String USER_BINDING = \"user\";", "modifier": "private static final", "type": "String", "declarator": "USER_BINDING = \"user\"", "var_name": "USER_BINDING"}, {"original_string": "private static final String PARENT_BINDING = \"parent\";", "modifier": "private static final", "type": "String", "declarator": "PARENT_BINDING = \"parent\"", "var_name": "PARENT_BINDING"}, {"original_string": "private static final String RECORD_BINDING = \"record\";", "modifier": "private static final", "type": "String", "declarator": "RECORD_BINDING = \"record\"", "var_name": "RECORD_BINDING"}, {"original_string": "private static final String COMMIT_BINDING = \"commit\";", "modifier": "private static final", "type": "String", "declarator": "COMMIT_BINDING = \"commit\"", "var_name": "COMMIT_BINDING"}, {"original_string": "private static final String ENTITY_BINDING = \"entity\";", "modifier": "private static final", "type": "String", "declarator": "ENTITY_BINDING = \"entity\"", "var_name": "ENTITY_BINDING"}], "methods": [{"identifier": "setMf", "parameters": "(ModelFactory mf)", "modifiers": "@Reference", "return": "void", "signature": "void setMf(ModelFactory mf)", "full_signature": "@Reference void setMf(ModelFactory mf)", "class_method_signature": "SimpleCatalogUtilsService.setMf(ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "setVf", "parameters": "(ValueFactory vf)", "modifiers": "@Reference", "return": "void", "signature": "void setVf(ValueFactory vf)", "full_signature": "@Reference void setVf(ValueFactory vf)", "class_method_signature": "SimpleCatalogUtilsService.setVf(ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "setCatalogFactory", "parameters": "(CatalogFactory catalogFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setCatalogFactory(CatalogFactory catalogFactory)", "full_signature": "@Reference void setCatalogFactory(CatalogFactory catalogFactory)", "class_method_signature": "SimpleCatalogUtilsService.setCatalogFactory(CatalogFactory catalogFactory)", "testcase": false, "constructor": false}, {"identifier": "setRecordFactory", "parameters": "(RecordFactory recordFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setRecordFactory(RecordFactory recordFactory)", "full_signature": "@Reference void setRecordFactory(RecordFactory recordFactory)", "class_method_signature": "SimpleCatalogUtilsService.setRecordFactory(RecordFactory recordFactory)", "testcase": false, "constructor": false}, {"identifier": "setUnversionedRecordFactory", "parameters": "(UnversionedRecordFactory unversionedRecordFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setUnversionedRecordFactory(UnversionedRecordFactory unversionedRecordFactory)", "full_signature": "@Reference void setUnversionedRecordFactory(UnversionedRecordFactory unversionedRecordFactory)", "class_method_signature": "SimpleCatalogUtilsService.setUnversionedRecordFactory(UnversionedRecordFactory unversionedRecordFactory)", "testcase": false, "constructor": false}, {"identifier": "setVersionedRecordFactory", "parameters": "(VersionedRecordFactory versionedRecordFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setVersionedRecordFactory(VersionedRecordFactory versionedRecordFactory)", "full_signature": "@Reference void setVersionedRecordFactory(VersionedRecordFactory versionedRecordFactory)", "class_method_signature": "SimpleCatalogUtilsService.setVersionedRecordFactory(VersionedRecordFactory versionedRecordFactory)", "testcase": false, "constructor": false}, {"identifier": "setVersionedRDFRecordFactory", "parameters": "(VersionedRDFRecordFactory versionedRDFRecordFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setVersionedRDFRecordFactory(VersionedRDFRecordFactory versionedRDFRecordFactory)", "full_signature": "@Reference void setVersionedRDFRecordFactory(VersionedRDFRecordFactory versionedRDFRecordFactory)", "class_method_signature": "SimpleCatalogUtilsService.setVersionedRDFRecordFactory(VersionedRDFRecordFactory versionedRDFRecordFactory)", "testcase": false, "constructor": false}, {"identifier": "setDistributionFactory", "parameters": "(DistributionFactory distributionFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setDistributionFactory(DistributionFactory distributionFactory)", "full_signature": "@Reference void setDistributionFactory(DistributionFactory distributionFactory)", "class_method_signature": "SimpleCatalogUtilsService.setDistributionFactory(DistributionFactory distributionFactory)", "testcase": false, "constructor": false}, {"identifier": "setVersionFactory", "parameters": "(VersionFactory versionFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setVersionFactory(VersionFactory versionFactory)", "full_signature": "@Reference void setVersionFactory(VersionFactory versionFactory)", "class_method_signature": "SimpleCatalogUtilsService.setVersionFactory(VersionFactory versionFactory)", "testcase": false, "constructor": false}, {"identifier": "setBranchFactory", "parameters": "(BranchFactory branchFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setBranchFactory(BranchFactory branchFactory)", "full_signature": "@Reference void setBranchFactory(BranchFactory branchFactory)", "class_method_signature": "SimpleCatalogUtilsService.setBranchFactory(BranchFactory branchFactory)", "testcase": false, "constructor": false}, {"identifier": "setInProgressCommitFactory", "parameters": "(InProgressCommitFactory inProgressCommitFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setInProgressCommitFactory(InProgressCommitFactory inProgressCommitFactory)", "full_signature": "@Reference void setInProgressCommitFactory(InProgressCommitFactory inProgressCommitFactory)", "class_method_signature": "SimpleCatalogUtilsService.setInProgressCommitFactory(InProgressCommitFactory inProgressCommitFactory)", "testcase": false, "constructor": false}, {"identifier": "setCommitFactory", "parameters": "(CommitFactory commitFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setCommitFactory(CommitFactory commitFactory)", "full_signature": "@Reference void setCommitFactory(CommitFactory commitFactory)", "class_method_signature": "SimpleCatalogUtilsService.setCommitFactory(CommitFactory commitFactory)", "testcase": false, "constructor": false}, {"identifier": "setRevisionFactory", "parameters": "(RevisionFactory revisionFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setRevisionFactory(RevisionFactory revisionFactory)", "full_signature": "@Reference void setRevisionFactory(RevisionFactory revisionFactory)", "class_method_signature": "SimpleCatalogUtilsService.setRevisionFactory(RevisionFactory revisionFactory)", "testcase": false, "constructor": false}, {"identifier": "setGraphRevisionFactory", "parameters": "(GraphRevisionFactory graphRevisionFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setGraphRevisionFactory(GraphRevisionFactory graphRevisionFactory)", "full_signature": "@Reference void setGraphRevisionFactory(GraphRevisionFactory graphRevisionFactory)", "class_method_signature": "SimpleCatalogUtilsService.setGraphRevisionFactory(GraphRevisionFactory graphRevisionFactory)", "testcase": false, "constructor": false}, {"identifier": "validateResource", "parameters": "(Resource resource, IRI classId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void validateResource(Resource resource, IRI classId, RepositoryConnection conn)", "full_signature": "@Override public void validateResource(Resource resource, IRI classId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.validateResource(Resource resource, IRI classId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "addObject", "parameters": "(T object, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void addObject(T object, RepositoryConnection conn)", "full_signature": "@Override public void addObject(T object, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.addObject(T object, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "updateObject", "parameters": "(T object, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void updateObject(T object, RepositoryConnection conn)", "full_signature": "@Override public void updateObject(T object, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.updateObject(T object, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "optObject", "parameters": "(Resource id, OrmFactory<T> factory, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Optional<T>", "signature": "Optional<T> optObject(Resource id, OrmFactory<T> factory, RepositoryConnection conn)", "full_signature": "@Override public Optional<T> optObject(Resource id, OrmFactory<T> factory, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.optObject(Resource id, OrmFactory<T> factory, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getObject", "parameters": "(Resource id, OrmFactory<T> factory, RepositoryConnection conn)", "modifiers": "@Override public", "return": "T", "signature": "T getObject(Resource id, OrmFactory<T> factory, RepositoryConnection conn)", "full_signature": "@Override public T getObject(Resource id, OrmFactory<T> factory, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getObject(Resource id, OrmFactory<T> factory, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getExpectedObject", "parameters": "(Resource id, OrmFactory<T> factory, RepositoryConnection conn)", "modifiers": "@Override public", "return": "T", "signature": "T getExpectedObject(Resource id, OrmFactory<T> factory, RepositoryConnection conn)", "full_signature": "@Override public T getExpectedObject(Resource id, OrmFactory<T> factory, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getExpectedObject(Resource id, OrmFactory<T> factory, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Resource resourceId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void remove(Resource resourceId, RepositoryConnection conn)", "full_signature": "@Override public void remove(Resource resourceId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.remove(Resource resourceId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "removeObject", "parameters": "(T object, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void removeObject(T object, RepositoryConnection conn)", "full_signature": "@Override public void removeObject(T object, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.removeObject(T object, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "removeObjectWithRelationship", "parameters": "(Resource objectId, Resource removeFromId, String predicate,\n                                             RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void removeObjectWithRelationship(Resource objectId, Resource removeFromId, String predicate,\n                                             RepositoryConnection conn)", "full_signature": "@Override public void removeObjectWithRelationship(Resource objectId, Resource removeFromId, String predicate,\n                                             RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.removeObjectWithRelationship(Resource objectId, Resource removeFromId, String predicate,\n                                             RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "validateRecord", "parameters": "(Resource catalogId, Resource recordId, IRI recordType,\n                               RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void validateRecord(Resource catalogId, Resource recordId, IRI recordType,\n                               RepositoryConnection conn)", "full_signature": "@Override public void validateRecord(Resource catalogId, Resource recordId, IRI recordType,\n                               RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.validateRecord(Resource catalogId, Resource recordId, IRI recordType,\n                               RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getRecord", "parameters": "(Resource catalogId, Resource recordId,\n                                          OrmFactory<T> factory,\n                                          RepositoryConnection conn)", "modifiers": "@Override public", "return": "T", "signature": "T getRecord(Resource catalogId, Resource recordId,\n                                          OrmFactory<T> factory,\n                                          RepositoryConnection conn)", "full_signature": "@Override public T getRecord(Resource catalogId, Resource recordId,\n                                          OrmFactory<T> factory,\n                                          RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getRecord(Resource catalogId, Resource recordId,\n                                          OrmFactory<T> factory,\n                                          RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "validateUnversionedDistribution", "parameters": "(Resource catalogId, Resource recordId,\n                                                Resource distributionId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void validateUnversionedDistribution(Resource catalogId, Resource recordId,\n                                                Resource distributionId, RepositoryConnection conn)", "full_signature": "@Override public void validateUnversionedDistribution(Resource catalogId, Resource recordId,\n                                                Resource distributionId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.validateUnversionedDistribution(Resource catalogId, Resource recordId,\n                                                Resource distributionId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getUnversionedDistribution", "parameters": "(Resource catalogId, Resource recordId, Resource distributionId,\n                                                   RepositoryConnection conn)", "modifiers": "@Override public", "return": "Distribution", "signature": "Distribution getUnversionedDistribution(Resource catalogId, Resource recordId, Resource distributionId,\n                                                   RepositoryConnection conn)", "full_signature": "@Override public Distribution getUnversionedDistribution(Resource catalogId, Resource recordId, Resource distributionId,\n                                                   RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getUnversionedDistribution(Resource catalogId, Resource recordId, Resource distributionId,\n                                                   RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "validateVersion", "parameters": "(Resource catalogId, Resource recordId, Resource versionId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void validateVersion(Resource catalogId, Resource recordId, Resource versionId, RepositoryConnection conn)", "full_signature": "@Override public void validateVersion(Resource catalogId, Resource recordId, Resource versionId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.validateVersion(Resource catalogId, Resource recordId, Resource versionId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "(Resource catalogId, Resource recordId, Resource versionId,\n                                            OrmFactory<T> factory, RepositoryConnection conn)", "modifiers": "@Override public", "return": "T", "signature": "T getVersion(Resource catalogId, Resource recordId, Resource versionId,\n                                            OrmFactory<T> factory, RepositoryConnection conn)", "full_signature": "@Override public T getVersion(Resource catalogId, Resource recordId, Resource versionId,\n                                            OrmFactory<T> factory, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getVersion(Resource catalogId, Resource recordId, Resource versionId,\n                                            OrmFactory<T> factory, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "removeVersion", "parameters": "(Resource recordId, Version version, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void removeVersion(Resource recordId, Version version, RepositoryConnection conn)", "full_signature": "@Override public void removeVersion(Resource recordId, Version version, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.removeVersion(Resource recordId, Version version, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "removeVersion", "parameters": "(Resource recordId, Resource versionId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void removeVersion(Resource recordId, Resource versionId, RepositoryConnection conn)", "full_signature": "@Override public void removeVersion(Resource recordId, Resource versionId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.removeVersion(Resource recordId, Resource versionId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "validateVersionedDistribution", "parameters": "(Resource catalogId, Resource recordId, Resource versionId,\n                                              Resource distributionId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void validateVersionedDistribution(Resource catalogId, Resource recordId, Resource versionId,\n                                              Resource distributionId, RepositoryConnection conn)", "full_signature": "@Override public void validateVersionedDistribution(Resource catalogId, Resource recordId, Resource versionId,\n                                              Resource distributionId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.validateVersionedDistribution(Resource catalogId, Resource recordId, Resource versionId,\n                                              Resource distributionId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getVersionedDistribution", "parameters": "(Resource catalogId, Resource recordId, Resource versionId,\n                                                 Resource distributionId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Distribution", "signature": "Distribution getVersionedDistribution(Resource catalogId, Resource recordId, Resource versionId,\n                                                 Resource distributionId, RepositoryConnection conn)", "full_signature": "@Override public Distribution getVersionedDistribution(Resource catalogId, Resource recordId, Resource versionId,\n                                                 Resource distributionId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getVersionedDistribution(Resource catalogId, Resource recordId, Resource versionId,\n                                                 Resource distributionId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "validateBranch", "parameters": "(Resource catalogId, Resource recordId, Resource branchId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void validateBranch(Resource catalogId, Resource recordId, Resource branchId, RepositoryConnection conn)", "full_signature": "@Override public void validateBranch(Resource catalogId, Resource recordId, Resource branchId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.validateBranch(Resource catalogId, Resource recordId, Resource branchId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "testBranchPath", "parameters": "(VersionedRDFRecord record, Resource branchId)", "modifiers": "private", "return": "void", "signature": "void testBranchPath(VersionedRDFRecord record, Resource branchId)", "full_signature": "private void testBranchPath(VersionedRDFRecord record, Resource branchId)", "class_method_signature": "SimpleCatalogUtilsService.testBranchPath(VersionedRDFRecord record, Resource branchId)", "testcase": false, "constructor": false}, {"identifier": "getBranch", "parameters": "(Resource catalogId, Resource recordId, Resource branchId,\n                                          OrmFactory<T> factory, RepositoryConnection conn)", "modifiers": "@Override public", "return": "T", "signature": "T getBranch(Resource catalogId, Resource recordId, Resource branchId,\n                                          OrmFactory<T> factory, RepositoryConnection conn)", "full_signature": "@Override public T getBranch(Resource catalogId, Resource recordId, Resource branchId,\n                                          OrmFactory<T> factory, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getBranch(Resource catalogId, Resource recordId, Resource branchId,\n                                          OrmFactory<T> factory, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getBranch", "parameters": "(VersionedRDFRecord record, Resource branchId, OrmFactory<T> factory,\n                                          RepositoryConnection conn)", "modifiers": "@Override public", "return": "T", "signature": "T getBranch(VersionedRDFRecord record, Resource branchId, OrmFactory<T> factory,\n                                          RepositoryConnection conn)", "full_signature": "@Override public T getBranch(VersionedRDFRecord record, Resource branchId, OrmFactory<T> factory,\n                                          RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getBranch(VersionedRDFRecord record, Resource branchId, OrmFactory<T> factory,\n                                          RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "removeBranch", "parameters": "(Resource recordId, Resource branchId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "List<Resource>", "signature": "List<Resource> removeBranch(Resource recordId, Resource branchId, RepositoryConnection conn)", "full_signature": "@Override public List<Resource> removeBranch(Resource recordId, Resource branchId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.removeBranch(Resource recordId, Resource branchId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "removeBranch", "parameters": "(Resource recordId, Resource branchId, List<Resource> deletedCommits,\n                             RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void removeBranch(Resource recordId, Resource branchId, List<Resource> deletedCommits,\n                             RepositoryConnection conn)", "full_signature": "@Override public void removeBranch(Resource recordId, Resource branchId, List<Resource> deletedCommits,\n                             RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.removeBranch(Resource recordId, Resource branchId, List<Resource> deletedCommits,\n                             RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "removeBranch", "parameters": "(Resource recordId, Branch branch, RepositoryConnection conn)", "modifiers": "@Override public", "return": "List<Resource>", "signature": "List<Resource> removeBranch(Resource recordId, Branch branch, RepositoryConnection conn)", "full_signature": "@Override public List<Resource> removeBranch(Resource recordId, Branch branch, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.removeBranch(Resource recordId, Branch branch, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "removeBranch", "parameters": "(Resource recordId, Branch branch, List<Resource> deletedCommits,\n                              RepositoryConnection conn)", "modifiers": "private", "return": "void", "signature": "void removeBranch(Resource recordId, Branch branch, List<Resource> deletedCommits,\n                              RepositoryConnection conn)", "full_signature": "private void removeBranch(Resource recordId, Branch branch, List<Resource> deletedCommits,\n                              RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.removeBranch(Resource recordId, Branch branch, List<Resource> deletedCommits,\n                              RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getCommitPaths", "parameters": "(Resource commitId, RepositoryConnection conn)", "modifiers": "private", "return": "List<List<Resource>>", "signature": "List<List<Resource>> getCommitPaths(Resource commitId, RepositoryConnection conn)", "full_signature": "private List<List<Resource>> getCommitPaths(Resource commitId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getCommitPaths(Resource commitId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "commitIsReferenced", "parameters": "(Resource commitId, List<Resource> deletedCommits, RepositoryConnection conn)", "modifiers": "private", "return": "boolean", "signature": "boolean commitIsReferenced(Resource commitId, List<Resource> deletedCommits, RepositoryConnection conn)", "full_signature": "private boolean commitIsReferenced(Resource commitId, List<Resource> deletedCommits, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.commitIsReferenced(Resource commitId, List<Resource> deletedCommits, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getHeadCommitIRI", "parameters": "(Branch branch)", "modifiers": "@Override public", "return": "Resource", "signature": "Resource getHeadCommitIRI(Branch branch)", "full_signature": "@Override public Resource getHeadCommitIRI(Branch branch)", "class_method_signature": "SimpleCatalogUtilsService.getHeadCommitIRI(Branch branch)", "testcase": false, "constructor": false}, {"identifier": "validateInProgressCommit", "parameters": "(Resource catalogId, Resource recordId, Resource commitId,\n                                         RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void validateInProgressCommit(Resource catalogId, Resource recordId, Resource commitId,\n                                         RepositoryConnection conn)", "full_signature": "@Override public void validateInProgressCommit(Resource catalogId, Resource recordId, Resource commitId,\n                                         RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.validateInProgressCommit(Resource catalogId, Resource recordId, Resource commitId,\n                                         RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getInProgressCommit", "parameters": "(Resource recordId, Resource userId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "InProgressCommit", "signature": "InProgressCommit getInProgressCommit(Resource recordId, Resource userId, RepositoryConnection conn)", "full_signature": "@Override public InProgressCommit getInProgressCommit(Resource recordId, Resource userId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getInProgressCommit(Resource recordId, Resource userId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getInProgressCommit", "parameters": "(Resource catalogId, Resource recordId, Resource commitId,\n                                                RepositoryConnection conn)", "modifiers": "@Override public", "return": "InProgressCommit", "signature": "InProgressCommit getInProgressCommit(Resource catalogId, Resource recordId, Resource commitId,\n                                                RepositoryConnection conn)", "full_signature": "@Override public InProgressCommit getInProgressCommit(Resource catalogId, Resource recordId, Resource commitId,\n                                                RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getInProgressCommit(Resource catalogId, Resource recordId, Resource commitId,\n                                                RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getInProgressCommitIRI", "parameters": "(Resource recordId, Resource userId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Optional<Resource>", "signature": "Optional<Resource> getInProgressCommitIRI(Resource recordId, Resource userId, RepositoryConnection conn)", "full_signature": "@Override public Optional<Resource> getInProgressCommitIRI(Resource recordId, Resource userId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getInProgressCommitIRI(Resource recordId, Resource userId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "removeInProgressCommit", "parameters": "(InProgressCommit commit, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void removeInProgressCommit(InProgressCommit commit, RepositoryConnection conn)", "full_signature": "@Override public void removeInProgressCommit(InProgressCommit commit, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.removeInProgressCommit(InProgressCommit commit, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "updateCommit", "parameters": "(Commit commit, Model additions, Model deletions, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void updateCommit(Commit commit, Model additions, Model deletions, RepositoryConnection conn)", "full_signature": "@Override public void updateCommit(Commit commit, Model additions, Model deletions, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.updateCommit(Commit commit, Model additions, Model deletions, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "updateCommit", "parameters": "(Resource commitId, Model additions, Model deletions, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void updateCommit(Resource commitId, Model additions, Model deletions, RepositoryConnection conn)", "full_signature": "@Override public void updateCommit(Resource commitId, Model additions, Model deletions, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.updateCommit(Resource commitId, Model additions, Model deletions, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "updateCommit", "parameters": "(Resource commitId, Revision revision, @Nullable Model additions,\n                              @Nullable Model deletions, RepositoryConnection conn)", "modifiers": "private", "return": "void", "signature": "void updateCommit(Resource commitId, Revision revision, @Nullable Model additions,\n                              @Nullable Model deletions, RepositoryConnection conn)", "full_signature": "private void updateCommit(Resource commitId, Revision revision, @Nullable Model additions,\n                              @Nullable Model deletions, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.updateCommit(Resource commitId, Revision revision, @Nullable Model additions,\n                              @Nullable Model deletions, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "addCommit", "parameters": "(Branch branch, Commit commit, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void addCommit(Branch branch, Commit commit, RepositoryConnection conn)", "full_signature": "@Override public void addCommit(Branch branch, Commit commit, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.addCommit(Branch branch, Commit commit, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getRevision", "parameters": "(Resource commitId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Revision", "signature": "Revision getRevision(Resource commitId, RepositoryConnection conn)", "full_signature": "@Override public Revision getRevision(Resource commitId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getRevision(Resource commitId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getAdditions", "parameters": "(Resource commitId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Stream<Statement>", "signature": "Stream<Statement> getAdditions(Resource commitId, RepositoryConnection conn)", "full_signature": "@Override public Stream<Statement> getAdditions(Resource commitId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getAdditions(Resource commitId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getAdditions", "parameters": "(Commit commit, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Stream<Statement>", "signature": "Stream<Statement> getAdditions(Commit commit, RepositoryConnection conn)", "full_signature": "@Override public Stream<Statement> getAdditions(Commit commit, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getAdditions(Commit commit, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getAdditions", "parameters": "(Revision revision, RepositoryConnection conn)", "modifiers": "private", "return": "Stream<Statement>", "signature": "Stream<Statement> getAdditions(Revision revision, RepositoryConnection conn)", "full_signature": "private Stream<Statement> getAdditions(Revision revision, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getAdditions(Revision revision, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getDeletions", "parameters": "(Resource commitId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Stream<Statement>", "signature": "Stream<Statement> getDeletions(Resource commitId, RepositoryConnection conn)", "full_signature": "@Override public Stream<Statement> getDeletions(Resource commitId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getDeletions(Resource commitId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getDeletions", "parameters": "(Commit commit, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Stream<Statement>", "signature": "Stream<Statement> getDeletions(Commit commit, RepositoryConnection conn)", "full_signature": "@Override public Stream<Statement> getDeletions(Commit commit, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getDeletions(Commit commit, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getDeletions", "parameters": "(Revision revision, RepositoryConnection conn)", "modifiers": "private", "return": "Stream<Statement>", "signature": "Stream<Statement> getDeletions(Revision revision, RepositoryConnection conn)", "full_signature": "private Stream<Statement> getDeletions(Revision revision, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getDeletions(Revision revision, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "collectRevisionedGraphChanges", "parameters": "(List<Stream<Statement>> streams, GraphRevision graphRevision,\n                                               IRI changesGraph, RepositoryConnection conn)", "modifiers": "private", "return": "void", "signature": "void collectRevisionedGraphChanges(List<Stream<Statement>> streams, GraphRevision graphRevision,\n                                               IRI changesGraph, RepositoryConnection conn)", "full_signature": "private void collectRevisionedGraphChanges(List<Stream<Statement>> streams, GraphRevision graphRevision,\n                                               IRI changesGraph, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.collectRevisionedGraphChanges(List<Stream<Statement>> streams, GraphRevision graphRevision,\n                                               IRI changesGraph, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "collectChanges", "parameters": "(List<Stream<Statement>> streams, IRI changesGraph, Resource versionedGraph,\n                                RepositoryConnection conn)", "modifiers": "private", "return": "void", "signature": "void collectChanges(List<Stream<Statement>> streams, IRI changesGraph, Resource versionedGraph,\n                                RepositoryConnection conn)", "full_signature": "private void collectChanges(List<Stream<Statement>> streams, IRI changesGraph, Resource versionedGraph,\n                                RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.collectChanges(List<Stream<Statement>> streams, IRI changesGraph, Resource versionedGraph,\n                                RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "addChanges", "parameters": "(Resource targetNamedGraph, Resource oppositeNamedGraph, Model changes,\n                           RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void addChanges(Resource targetNamedGraph, Resource oppositeNamedGraph, Model changes,\n                           RepositoryConnection conn)", "full_signature": "@Override public void addChanges(Resource targetNamedGraph, Resource oppositeNamedGraph, Model changes,\n                           RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.addChanges(Resource targetNamedGraph, Resource oppositeNamedGraph, Model changes,\n                           RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "validateCommitPath", "parameters": "(Resource catalogId, Resource recordId, Resource branchId, Resource commitId,\n                                   RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void validateCommitPath(Resource catalogId, Resource recordId, Resource branchId, Resource commitId,\n                                   RepositoryConnection conn)", "full_signature": "@Override public void validateCommitPath(Resource catalogId, Resource recordId, Resource branchId, Resource commitId,\n                                   RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.validateCommitPath(Resource catalogId, Resource recordId, Resource branchId, Resource commitId,\n                                   RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "validateCommitPath", "parameters": "(Resource catalogId, Resource recordId, Resource commitId,\n                                   RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void validateCommitPath(Resource catalogId, Resource recordId, Resource commitId,\n                                   RepositoryConnection conn)", "full_signature": "@Override public void validateCommitPath(Resource catalogId, Resource recordId, Resource commitId,\n                                   RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.validateCommitPath(Resource catalogId, Resource recordId, Resource commitId,\n                                   RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "commitInBranch", "parameters": "(Resource branchId, Resource commitId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean commitInBranch(Resource branchId, Resource commitId, RepositoryConnection conn)", "full_signature": "@Override public boolean commitInBranch(Resource branchId, Resource commitId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.commitInBranch(Resource branchId, Resource commitId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "commitInRecord", "parameters": "(Resource recordId, Resource commitId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean commitInRecord(Resource recordId, Resource commitId, RepositoryConnection conn)", "full_signature": "@Override public boolean commitInRecord(Resource recordId, Resource commitId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.commitInRecord(Resource recordId, Resource commitId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getCommitChain", "parameters": "(Resource commitId, boolean asc, RepositoryConnection conn)", "modifiers": "@Override public", "return": "List<Resource>", "signature": "List<Resource> getCommitChain(Resource commitId, boolean asc, RepositoryConnection conn)", "full_signature": "@Override public List<Resource> getCommitChain(Resource commitId, boolean asc, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getCommitChain(Resource commitId, boolean asc, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getCommitChain", "parameters": "(Resource commitId, Resource entityId, boolean asc, RepositoryConnection conn)", "modifiers": "@Override public", "return": "List<Resource>", "signature": "List<Resource> getCommitChain(Resource commitId, Resource entityId, boolean asc, RepositoryConnection conn)", "full_signature": "@Override public List<Resource> getCommitChain(Resource commitId, Resource entityId, boolean asc, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getCommitChain(Resource commitId, Resource entityId, boolean asc, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getDifferenceChain", "parameters": "(final Resource sourceCommitId, final Resource targetCommitId,\n                                             final RepositoryConnection conn)", "modifiers": "@Override public", "return": "List<Resource>", "signature": "List<Resource> getDifferenceChain(final Resource sourceCommitId, final Resource targetCommitId,\n                                             final RepositoryConnection conn)", "full_signature": "@Override public List<Resource> getDifferenceChain(final Resource sourceCommitId, final Resource targetCommitId,\n                                             final RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getDifferenceChain(final Resource sourceCommitId, final Resource targetCommitId,\n                                             final RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getDifferenceChain", "parameters": "(final Resource sourceCommitId, final Resource targetCommitId,\n                                             final RepositoryConnection conn, boolean asc)", "modifiers": "@Override public", "return": "List<Resource>", "signature": "List<Resource> getDifferenceChain(final Resource sourceCommitId, final Resource targetCommitId,\n                                             final RepositoryConnection conn, boolean asc)", "full_signature": "@Override public List<Resource> getDifferenceChain(final Resource sourceCommitId, final Resource targetCommitId,\n                                             final RepositoryConnection conn, boolean asc)", "class_method_signature": "SimpleCatalogUtilsService.getDifferenceChain(final Resource sourceCommitId, final Resource targetCommitId,\n                                             final RepositoryConnection conn, boolean asc)", "testcase": false, "constructor": false}, {"identifier": "getDifferenceChain", "parameters": "(final Resource sourceCommitId, final Resource targetCommitId,\n                                             final Resource targetEntityId, final RepositoryConnection conn)", "modifiers": "@Override public", "return": "List<Resource>", "signature": "List<Resource> getDifferenceChain(final Resource sourceCommitId, final Resource targetCommitId,\n                                             final Resource targetEntityId, final RepositoryConnection conn)", "full_signature": "@Override public List<Resource> getDifferenceChain(final Resource sourceCommitId, final Resource targetCommitId,\n                                             final Resource targetEntityId, final RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getDifferenceChain(final Resource sourceCommitId, final Resource targetCommitId,\n                                             final Resource targetEntityId, final RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getDifferenceChain", "parameters": "(final Resource sourceCommitId, final Resource targetCommitId,\n                                             final Resource targetEntityId, final RepositoryConnection conn,\n                                             boolean asc)", "modifiers": "@Override public", "return": "List<Resource>", "signature": "List<Resource> getDifferenceChain(final Resource sourceCommitId, final Resource targetCommitId,\n                                             final Resource targetEntityId, final RepositoryConnection conn,\n                                             boolean asc)", "full_signature": "@Override public List<Resource> getDifferenceChain(final Resource sourceCommitId, final Resource targetCommitId,\n                                             final Resource targetEntityId, final RepositoryConnection conn,\n                                             boolean asc)", "class_method_signature": "SimpleCatalogUtilsService.getDifferenceChain(final Resource sourceCommitId, final Resource targetCommitId,\n                                             final Resource targetEntityId, final RepositoryConnection conn,\n                                             boolean asc)", "testcase": false, "constructor": false}, {"identifier": "getCommitDifference", "parameters": "(List<Resource> commits, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Difference", "signature": "Difference getCommitDifference(List<Resource> commits, RepositoryConnection conn)", "full_signature": "@Override public Difference getCommitDifference(List<Resource> commits, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getCommitDifference(List<Resource> commits, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getCommitDifference", "parameters": "(Resource commitId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Difference", "signature": "Difference getCommitDifference(Resource commitId, RepositoryConnection conn)", "full_signature": "@Override public Difference getCommitDifference(Resource commitId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getCommitDifference(Resource commitId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getCompiledResource", "parameters": "(Resource commitId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Model", "signature": "Model getCompiledResource(Resource commitId, RepositoryConnection conn)", "full_signature": "@Override public Model getCompiledResource(Resource commitId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getCompiledResource(Resource commitId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getCompiledResource", "parameters": "(List<Resource> commits, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Model", "signature": "Model getCompiledResource(List<Resource> commits, RepositoryConnection conn)", "full_signature": "@Override public Model getCompiledResource(List<Resource> commits, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getCompiledResource(List<Resource> commits, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getRevisionChanges", "parameters": "(Resource commitId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Difference", "signature": "Difference getRevisionChanges(Resource commitId, RepositoryConnection conn)", "full_signature": "@Override public Difference getRevisionChanges(Resource commitId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getRevisionChanges(Resource commitId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "applyDifference", "parameters": "(Model base, Difference diff)", "modifiers": "@Override public", "return": "Model", "signature": "Model applyDifference(Model base, Difference diff)", "full_signature": "@Override public Model applyDifference(Model base, Difference diff)", "class_method_signature": "SimpleCatalogUtilsService.applyDifference(Model base, Difference diff)", "testcase": false, "constructor": false}, {"identifier": "getConflicts", "parameters": "(Resource sourceCommitId, Resource targetCommitId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Set<Conflict>", "signature": "Set<Conflict> getConflicts(Resource sourceCommitId, Resource targetCommitId, RepositoryConnection conn)", "full_signature": "@Override public Set<Conflict> getConflicts(Resource sourceCommitId, Resource targetCommitId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getConflicts(Resource sourceCommitId, Resource targetCommitId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "throwAlreadyExists", "parameters": "(Resource id, OrmFactory<T> factory)", "modifiers": "@Override public", "return": "IllegalArgumentException", "signature": "IllegalArgumentException throwAlreadyExists(Resource id, OrmFactory<T> factory)", "full_signature": "@Override public IllegalArgumentException throwAlreadyExists(Resource id, OrmFactory<T> factory)", "class_method_signature": "SimpleCatalogUtilsService.throwAlreadyExists(Resource id, OrmFactory<T> factory)", "testcase": false, "constructor": false}, {"identifier": "throwDoesNotBelong", "parameters": "(Resource child,\n                                                                                          OrmFactory<T> childFactory,\n                                                                                          Resource parent,\n                                                                                          OrmFactory<S> parentFactory)", "modifiers": "@Override public", "return": "IllegalArgumentException", "signature": "IllegalArgumentException throwDoesNotBelong(Resource child,\n                                                                                          OrmFactory<T> childFactory,\n                                                                                          Resource parent,\n                                                                                          OrmFactory<S> parentFactory)", "full_signature": "@Override public IllegalArgumentException throwDoesNotBelong(Resource child,\n                                                                                          OrmFactory<T> childFactory,\n                                                                                          Resource parent,\n                                                                                          OrmFactory<S> parentFactory)", "class_method_signature": "SimpleCatalogUtilsService.throwDoesNotBelong(Resource child,\n                                                                                          OrmFactory<T> childFactory,\n                                                                                          Resource parent,\n                                                                                          OrmFactory<S> parentFactory)", "testcase": false, "constructor": false}, {"identifier": "throwThingNotFound", "parameters": "(Resource id, OrmFactory<T> factory)", "modifiers": "@Override public", "return": "IllegalStateException", "signature": "IllegalStateException throwThingNotFound(Resource id, OrmFactory<T> factory)", "full_signature": "@Override public IllegalStateException throwThingNotFound(Resource id, OrmFactory<T> factory)", "class_method_signature": "SimpleCatalogUtilsService.throwThingNotFound(Resource id, OrmFactory<T> factory)", "testcase": false, "constructor": false}, {"identifier": "getCommitChainIterator", "parameters": "(Resource commitId, boolean asc, RepositoryConnection conn)", "modifiers": "private", "return": "Iterator<Resource>", "signature": "Iterator<Resource> getCommitChainIterator(Resource commitId, boolean asc, RepositoryConnection conn)", "full_signature": "private Iterator<Resource> getCommitChainIterator(Resource commitId, boolean asc, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getCommitChainIterator(Resource commitId, boolean asc, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getCommitChainIterator", "parameters": "(Resource commitId, Resource entityId, boolean asc,\n                                                      RepositoryConnection conn)", "modifiers": "private", "return": "Iterator<Resource>", "signature": "Iterator<Resource> getCommitChainIterator(Resource commitId, Resource entityId, boolean asc,\n                                                      RepositoryConnection conn)", "full_signature": "private Iterator<Resource> getCommitChainIterator(Resource commitId, Resource entityId, boolean asc,\n                                                      RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getCommitChainIterator(Resource commitId, Resource entityId, boolean asc,\n                                                      RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "aggregateDifferences", "parameters": "(Map<Statement, Integer> additions, Map<Statement, Integer> deletions, Resource commitId,\n                                      RepositoryConnection conn)", "modifiers": "private", "return": "void", "signature": "void aggregateDifferences(Map<Statement, Integer> additions, Map<Statement, Integer> deletions, Resource commitId,\n                                      RepositoryConnection conn)", "full_signature": "private void aggregateDifferences(Map<Statement, Integer> additions, Map<Statement, Integer> deletions, Resource commitId,\n                                      RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.aggregateDifferences(Map<Statement, Integer> additions, Map<Statement, Integer> deletions, Resource commitId,\n                                      RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "updateModels", "parameters": "(Statement statement, Map<Statement, Integer> mapToAdd, Map<Statement, Integer> mapToRemove)", "modifiers": "private", "return": "void", "signature": "void updateModels(Statement statement, Map<Statement, Integer> mapToAdd, Map<Statement, Integer> mapToRemove)", "full_signature": "private void updateModels(Statement statement, Map<Statement, Integer> mapToAdd, Map<Statement, Integer> mapToRemove)", "class_method_signature": "SimpleCatalogUtilsService.updateModels(Statement statement, Map<Statement, Integer> mapToAdd, Map<Statement, Integer> mapToRemove)", "testcase": false, "constructor": false}, {"identifier": "createConflict", "parameters": "(Resource subject, IRI predicate, Model left, Model leftDeletions,\n                                    Model right, Model rightDeletions)", "modifiers": "private", "return": "Conflict", "signature": "Conflict createConflict(Resource subject, IRI predicate, Model left, Model leftDeletions,\n                                    Model right, Model rightDeletions)", "full_signature": "private Conflict createConflict(Resource subject, IRI predicate, Model left, Model leftDeletions,\n                                    Model right, Model rightDeletions)", "class_method_signature": "SimpleCatalogUtilsService.createConflict(Resource subject, IRI predicate, Model left, Model leftDeletions,\n                                    Model right, Model rightDeletions)", "testcase": false, "constructor": false}], "file": "com.mobi.catalog.impl/src/main/java/com/mobi/catalog/impl/SimpleCatalogUtilsService.java"}, "focal_method": {"identifier": "getVersionedDistribution", "parameters": "(Resource catalogId, Resource recordId, Resource versionId,\n                                                 Resource distributionId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Distribution", "body": "@Override\n    public Distribution getVersionedDistribution(Resource catalogId, Resource recordId, Resource versionId,\n                                                 Resource distributionId, RepositoryConnection conn) {\n        validateVersionedDistribution(catalogId, recordId, versionId, distributionId, conn);\n        return getObject(distributionId, distributionFactory, conn);\n    }", "signature": "Distribution getVersionedDistribution(Resource catalogId, Resource recordId, Resource versionId,\n                                                 Resource distributionId, RepositoryConnection conn)", "full_signature": "@Override public Distribution getVersionedDistribution(Resource catalogId, Resource recordId, Resource versionId,\n                                                 Resource distributionId, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogUtilsService.getVersionedDistribution(Resource catalogId, Resource recordId, Resource versionId,\n                                                 Resource distributionId, RepositoryConnection conn)", "testcase": false, "constructor": false, "invocations": ["validateVersionedDistribution", "getObject"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}