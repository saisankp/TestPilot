{"test_class": {"identifier": "AesCmacPrfKeyManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/prf/AesCmacPrfKeyManagerTest.java"}, "test_case": {"identifier": "validateKeyFormat_empty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void validateKeyFormat_empty() throws Exception {\n    try {\n      new AesCmacPrfKeyManager()\n          .keyFactory()\n          .validateKeyFormat(AesCmacPrfKeyFormat.getDefaultInstance());\n      fail();\n    } catch (GeneralSecurityException e) {\n      // expected.\n    }\n  }", "signature": "void validateKeyFormat_empty()", "full_signature": "@Test public void validateKeyFormat_empty()", "class_method_signature": "AesCmacPrfKeyManagerTest.validateKeyFormat_empty()", "testcase": true, "constructor": false, "invocations": ["validateKeyFormat", "keyFactory", "getDefaultInstance", "fail"]}, "focal_class": {"identifier": "AesCmacPrfKeyManager", "superclass": "extends KeyTypeManager<AesCmacPrfKey>", "interfaces": "", "fields": [{"original_string": "private static final int VERSION = 0;", "modifier": "private static final", "type": "int", "declarator": "VERSION = 0", "var_name": "VERSION"}, {"original_string": "private static final int KEY_SIZE_IN_BYTES = 32;", "modifier": "private static final", "type": "int", "declarator": "KEY_SIZE_IN_BYTES = 32", "var_name": "KEY_SIZE_IN_BYTES"}], "methods": [{"identifier": "AesCmacPrfKeyManager", "parameters": "()", "modifiers": "", "return": "", "signature": " AesCmacPrfKeyManager()", "full_signature": "  AesCmacPrfKeyManager()", "class_method_signature": "AesCmacPrfKeyManager.AesCmacPrfKeyManager()", "testcase": false, "constructor": true}, {"identifier": "getKeyType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getKeyType()", "full_signature": "@Override public String getKeyType()", "class_method_signature": "AesCmacPrfKeyManager.getKeyType()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVersion()", "full_signature": "@Override public int getVersion()", "class_method_signature": "AesCmacPrfKeyManager.getVersion()", "testcase": false, "constructor": false}, {"identifier": "keyMaterialType", "parameters": "()", "modifiers": "@Override public", "return": "KeyMaterialType", "signature": "KeyMaterialType keyMaterialType()", "full_signature": "@Override public KeyMaterialType keyMaterialType()", "class_method_signature": "AesCmacPrfKeyManager.keyMaterialType()", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(AesCmacPrfKey key)", "modifiers": "@Override public", "return": "void", "signature": "void validateKey(AesCmacPrfKey key)", "full_signature": "@Override public void validateKey(AesCmacPrfKey key)", "class_method_signature": "AesCmacPrfKeyManager.validateKey(AesCmacPrfKey key)", "testcase": false, "constructor": false}, {"identifier": "parseKey", "parameters": "(ByteString byteString)", "modifiers": "@Override public", "return": "AesCmacPrfKey", "signature": "AesCmacPrfKey parseKey(ByteString byteString)", "full_signature": "@Override public AesCmacPrfKey parseKey(ByteString byteString)", "class_method_signature": "AesCmacPrfKeyManager.parseKey(ByteString byteString)", "testcase": false, "constructor": false}, {"identifier": "validateSize", "parameters": "(int size)", "modifiers": "private static", "return": "void", "signature": "void validateSize(int size)", "full_signature": "private static void validateSize(int size)", "class_method_signature": "AesCmacPrfKeyManager.validateSize(int size)", "testcase": false, "constructor": false}, {"identifier": "keyFactory", "parameters": "()", "modifiers": "@Override public", "return": "KeyFactory<AesCmacPrfKeyFormat, AesCmacPrfKey>", "signature": "KeyFactory<AesCmacPrfKeyFormat, AesCmacPrfKey> keyFactory()", "full_signature": "@Override public KeyFactory<AesCmacPrfKeyFormat, AesCmacPrfKey> keyFactory()", "class_method_signature": "AesCmacPrfKeyManager.keyFactory()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(boolean newKeyAllowed)", "modifiers": "public static", "return": "void", "signature": "void register(boolean newKeyAllowed)", "full_signature": "public static void register(boolean newKeyAllowed)", "class_method_signature": "AesCmacPrfKeyManager.register(boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "aes256CmacTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate aes256CmacTemplate()", "full_signature": "public static final KeyTemplate aes256CmacTemplate()", "class_method_signature": "AesCmacPrfKeyManager.aes256CmacTemplate()", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/prf/AesCmacPrfKeyManager.java"}, "focal_method": {"identifier": "keyFactory", "parameters": "()", "modifiers": "@Override public", "return": "KeyFactory<AesCmacPrfKeyFormat, AesCmacPrfKey>", "body": "@Override\n  public KeyFactory<AesCmacPrfKeyFormat, AesCmacPrfKey> keyFactory() {\n    return new KeyFactory<AesCmacPrfKeyFormat, AesCmacPrfKey>(AesCmacPrfKeyFormat.class) {\n      @Override\n      public void validateKeyFormat(AesCmacPrfKeyFormat format) throws GeneralSecurityException {\n        validateSize(format.getKeySize());\n      }\n\n      @Override\n      public AesCmacPrfKeyFormat parseKeyFormat(ByteString byteString)\n          throws InvalidProtocolBufferException {\n        return AesCmacPrfKeyFormat.parseFrom(byteString, ExtensionRegistryLite.getEmptyRegistry());\n      }\n\n      @Override\n      public AesCmacPrfKey createKey(AesCmacPrfKeyFormat format) {\n        return AesCmacPrfKey.newBuilder()\n            .setVersion(VERSION)\n            .setKeyValue(ByteString.copyFrom(Random.randBytes(format.getKeySize())))\n            .build();\n      }\n    };\n  }", "signature": "KeyFactory<AesCmacPrfKeyFormat, AesCmacPrfKey> keyFactory()", "full_signature": "@Override public KeyFactory<AesCmacPrfKeyFormat, AesCmacPrfKey> keyFactory()", "class_method_signature": "AesCmacPrfKeyManager.keyFactory()", "testcase": false, "constructor": false, "invocations": ["validateSize", "getKeySize", "parseFrom", "getEmptyRegistry", "build", "setKeyValue", "setVersion", "newBuilder", "copyFrom", "randBytes", "getKeySize"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}