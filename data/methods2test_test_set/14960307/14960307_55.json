{"test_class": {"identifier": "DataCodingTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DataCodingTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DataCodingTest.class)", "var_name": "logger"}], "file": "ch-commons-gsm/src/test/java/com/cloudhopper/commons/gsm/DataCodingTest.java"}, "test_case": {"identifier": "parse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parse() {\n        DataCoding dc = DataCoding.parse(DataCoding.CHAR_ENC_DEFAULT);\n        Assert.assertEquals((byte)0x00, dc.getByteValue());\n        Assert.assertEquals(DataCoding.CHAR_ENC_DEFAULT, dc.getCharacterEncoding());\n        Assert.assertEquals(DataCoding.Group.CHARACTER_ENCODING, dc.getCodingGroup());\n        Assert.assertEquals(DataCoding.MESSAGE_CLASS_0, dc.getMessageClass());\n        Assert.assertEquals(false, dc.isCompressed());\n\n        dc = DataCoding.parse(DataCoding.CHAR_ENC_8BIT);\n        Assert.assertEquals((byte)0x04, dc.getByteValue());\n        Assert.assertEquals(DataCoding.CHAR_ENC_8BIT, dc.getCharacterEncoding());\n        Assert.assertEquals(DataCoding.Group.CHARACTER_ENCODING, dc.getCodingGroup());\n        Assert.assertEquals(DataCoding.MESSAGE_CLASS_0, dc.getMessageClass());\n        Assert.assertEquals(false, dc.isCompressed());\n\n        dc = DataCoding.parse(DataCoding.CHAR_ENC_IA5);\n        Assert.assertEquals((byte)0x01, dc.getByteValue());\n        Assert.assertEquals(DataCoding.CHAR_ENC_IA5, dc.getCharacterEncoding());\n        Assert.assertEquals(DataCoding.Group.CHARACTER_ENCODING, dc.getCodingGroup());\n        Assert.assertEquals(DataCoding.MESSAGE_CLASS_0, dc.getMessageClass());\n        Assert.assertEquals(false, dc.isCompressed());\n\n        dc = DataCoding.parse(DataCoding.CHAR_ENC_UCS2);\n        Assert.assertEquals((byte)0x08, dc.getByteValue());\n        Assert.assertEquals(DataCoding.CHAR_ENC_UCS2, dc.getCharacterEncoding());\n        Assert.assertEquals(DataCoding.Group.CHARACTER_ENCODING, dc.getCodingGroup());\n        Assert.assertEquals(DataCoding.MESSAGE_CLASS_0, dc.getMessageClass());\n        Assert.assertEquals(false, dc.isCompressed());\n\n        // common to see a byte value of -15 used\n        dc = DataCoding.parse((byte)-15);\n        Assert.assertEquals((byte)0xF1, dc.getByteValue());\n        Assert.assertEquals(DataCoding.CHAR_ENC_DEFAULT, dc.getCharacterEncoding());\n        Assert.assertEquals(DataCoding.Group.MESSAGE_CLASS, dc.getCodingGroup());\n        Assert.assertEquals(DataCoding.MESSAGE_CLASS_1, dc.getMessageClass());\n        Assert.assertEquals(false, dc.isCompressed());\n\n        // common to see a byte value of 16 used\n        dc = DataCoding.parse((byte)16);\n        Assert.assertEquals((byte)16, dc.getByteValue());\n        Assert.assertEquals(DataCoding.CHAR_ENC_DEFAULT, dc.getCharacterEncoding());\n        Assert.assertEquals(DataCoding.Group.GENERAL, dc.getCodingGroup());\n        Assert.assertEquals(DataCoding.MESSAGE_CLASS_0, dc.getMessageClass());\n        Assert.assertEquals(false, dc.isCompressed());\n\n        // common to see a byte value of 17 used\n        dc = DataCoding.parse((byte)17);\n        Assert.assertEquals((byte)17, dc.getByteValue());\n        Assert.assertEquals(DataCoding.CHAR_ENC_DEFAULT, dc.getCharacterEncoding());\n        Assert.assertEquals(DataCoding.Group.GENERAL, dc.getCodingGroup());\n        Assert.assertEquals(DataCoding.MESSAGE_CLASS_1, dc.getMessageClass());\n        Assert.assertEquals(false, dc.isCompressed());\n\n        // common to see a byte value of 20 used\n        dc = DataCoding.parse((byte)20);\n        Assert.assertEquals((byte)20, dc.getByteValue());\n        Assert.assertEquals(DataCoding.CHAR_ENC_8BIT, dc.getCharacterEncoding());\n        Assert.assertEquals(DataCoding.Group.GENERAL, dc.getCodingGroup());\n        Assert.assertEquals(DataCoding.MESSAGE_CLASS_0, dc.getMessageClass());\n        Assert.assertEquals(false, dc.isCompressed());\n\n        // common to see a byte value of 21 used\n        dc = DataCoding.parse((byte)21);\n        Assert.assertEquals((byte)21, dc.getByteValue());\n        Assert.assertEquals(DataCoding.CHAR_ENC_8BIT, dc.getCharacterEncoding());\n        Assert.assertEquals(DataCoding.Group.GENERAL, dc.getCodingGroup());\n        Assert.assertEquals(DataCoding.MESSAGE_CLASS_1, dc.getMessageClass());\n        Assert.assertEquals(false, dc.isCompressed());\n\n        // common to see a byte value of 21 used\n        dc = DataCoding.parse((byte)21);\n        Assert.assertEquals((byte)21, dc.getByteValue());\n        Assert.assertEquals(DataCoding.CHAR_ENC_8BIT, dc.getCharacterEncoding());\n        Assert.assertEquals(DataCoding.Group.GENERAL, dc.getCodingGroup());\n        Assert.assertEquals(DataCoding.MESSAGE_CLASS_1, dc.getMessageClass());\n        Assert.assertEquals(false, dc.isCompressed());\n\n        // 1C is a reserved character encoding!\n        dc = DataCoding.parse((byte)0x1C);\n        Assert.assertEquals(DataCoding.CHAR_ENC_DEFAULT, dc.getCharacterEncoding());\n        Assert.assertEquals(DataCoding.Group.RESERVED, dc.getCodingGroup());\n        Assert.assertEquals(DataCoding.MESSAGE_CLASS_0, dc.getMessageClass());\n        Assert.assertEquals(false, dc.isCompressed());\n\n        // very complicated general data coding 111011\n        dc = DataCoding.parse((byte)0x3B);\n        Assert.assertEquals((byte)0x3B, dc.getByteValue());\n        Assert.assertEquals(DataCoding.CHAR_ENC_UCS2, dc.getCharacterEncoding());\n        Assert.assertEquals(DataCoding.Group.GENERAL, dc.getCodingGroup());\n        Assert.assertEquals(DataCoding.MESSAGE_CLASS_3, dc.getMessageClass());\n        Assert.assertEquals(true, dc.isCompressed());\n\n        // message waiting indication group\n        dc = DataCoding.parse((byte)0xEA);\n        Assert.assertEquals((byte)0xEA, dc.getByteValue());\n        Assert.assertEquals(DataCoding.CHAR_ENC_UCS2, dc.getCharacterEncoding());\n        Assert.assertEquals(DataCoding.Group.MESSAGE_WAITING_INDICATION, dc.getCodingGroup());\n        Assert.assertEquals(DataCoding.MESSAGE_CLASS_0, dc.getMessageClass());\n        Assert.assertEquals(false, dc.isCompressed());\n\n        // 0xFD = 1111 11 01 -> should be UCS2\n        /** NOTE: 0xFD is not a valid DCS value\n        dc = DataCoding.parse((byte)0xFD);\n        Assert.assertEquals((byte)0xFD, dc.getByteValue());\n        Assert.assertEquals(DataCoding.CHAR_ENC_UCS2, dc.getCharacterEncoding());\n        Assert.assertEquals(DataCoding.Group.MESSAGE_CLASS, dc.getCodingGroup());\n        Assert.assertEquals(DataCoding.MESSAGE_CLASS_1, dc.getMessageClass());\n        Assert.assertEquals(false, dc.isCompressed());\n         */\n    }", "signature": "void parse()", "full_signature": "@Test public void parse()", "class_method_signature": "DataCodingTest.parse()", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals", "getByteValue", "assertEquals", "getCharacterEncoding", "assertEquals", "getCodingGroup", "assertEquals", "getMessageClass", "assertEquals", "isCompressed", "parse", "assertEquals", "getByteValue", "assertEquals", "getCharacterEncoding", "assertEquals", "getCodingGroup", "assertEquals", "getMessageClass", "assertEquals", "isCompressed", "parse", "assertEquals", "getByteValue", "assertEquals", "getCharacterEncoding", "assertEquals", "getCodingGroup", "assertEquals", "getMessageClass", "assertEquals", "isCompressed", "parse", "assertEquals", "getByteValue", "assertEquals", "getCharacterEncoding", "assertEquals", "getCodingGroup", "assertEquals", "getMessageClass", "assertEquals", "isCompressed", "parse", "assertEquals", "getByteValue", "assertEquals", "getCharacterEncoding", "assertEquals", "getCodingGroup", "assertEquals", "getMessageClass", "assertEquals", "isCompressed", "parse", "assertEquals", "getByteValue", "assertEquals", "getCharacterEncoding", "assertEquals", "getCodingGroup", "assertEquals", "getMessageClass", "assertEquals", "isCompressed", "parse", "assertEquals", "getByteValue", "assertEquals", "getCharacterEncoding", "assertEquals", "getCodingGroup", "assertEquals", "getMessageClass", "assertEquals", "isCompressed", "parse", "assertEquals", "getByteValue", "assertEquals", "getCharacterEncoding", "assertEquals", "getCodingGroup", "assertEquals", "getMessageClass", "assertEquals", "isCompressed", "parse", "assertEquals", "getByteValue", "assertEquals", "getCharacterEncoding", "assertEquals", "getCodingGroup", "assertEquals", "getMessageClass", "assertEquals", "isCompressed", "parse", "assertEquals", "getByteValue", "assertEquals", "getCharacterEncoding", "assertEquals", "getCodingGroup", "assertEquals", "getMessageClass", "assertEquals", "isCompressed", "parse", "assertEquals", "getCharacterEncoding", "assertEquals", "getCodingGroup", "assertEquals", "getMessageClass", "assertEquals", "isCompressed", "parse", "assertEquals", "getByteValue", "assertEquals", "getCharacterEncoding", "assertEquals", "getCodingGroup", "assertEquals", "getMessageClass", "assertEquals", "isCompressed", "parse", "assertEquals", "getByteValue", "assertEquals", "getCharacterEncoding", "assertEquals", "getCodingGroup", "assertEquals", "getMessageClass", "assertEquals", "isCompressed"]}, "focal_class": {"identifier": "DataCoding", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final byte MESSAGE_CLASS_0 = 0;", "modifier": "public static final", "type": "byte", "declarator": "MESSAGE_CLASS_0 = 0", "var_name": "MESSAGE_CLASS_0"}, {"original_string": "public static final byte MESSAGE_CLASS_1 = 1;", "modifier": "public static final", "type": "byte", "declarator": "MESSAGE_CLASS_1 = 1", "var_name": "MESSAGE_CLASS_1"}, {"original_string": "public static final byte MESSAGE_CLASS_2 = 2;", "modifier": "public static final", "type": "byte", "declarator": "MESSAGE_CLASS_2 = 2", "var_name": "MESSAGE_CLASS_2"}, {"original_string": "public static final byte MESSAGE_CLASS_3 = 3;", "modifier": "public static final", "type": "byte", "declarator": "MESSAGE_CLASS_3 = 3", "var_name": "MESSAGE_CLASS_3"}, {"original_string": "public static final byte CHAR_ENC_DEFAULT = 0x00;", "modifier": "public static final", "type": "byte", "declarator": "CHAR_ENC_DEFAULT = 0x00", "var_name": "CHAR_ENC_DEFAULT"}, {"original_string": "public static final byte CHAR_ENC_IA5 = 0x01;", "modifier": "public static final", "type": "byte", "declarator": "CHAR_ENC_IA5 = 0x01", "var_name": "CHAR_ENC_IA5"}, {"original_string": "public static final byte CHAR_ENC_8BITA = 0x02;", "modifier": "public static final", "type": "byte", "declarator": "CHAR_ENC_8BITA = 0x02", "var_name": "CHAR_ENC_8BITA"}, {"original_string": "public static final byte CHAR_ENC_LATIN1 = 0x03;", "modifier": "public static final", "type": "byte", "declarator": "CHAR_ENC_LATIN1 = 0x03", "var_name": "CHAR_ENC_LATIN1"}, {"original_string": "public static final byte CHAR_ENC_8BIT = 0x04;", "modifier": "public static final", "type": "byte", "declarator": "CHAR_ENC_8BIT = 0x04", "var_name": "CHAR_ENC_8BIT"}, {"original_string": "public static final byte CHAR_ENC_JIS = 0x05;", "modifier": "public static final", "type": "byte", "declarator": "CHAR_ENC_JIS = 0x05", "var_name": "CHAR_ENC_JIS"}, {"original_string": "public static final byte CHAR_ENC_CYRLLIC = 0x06;", "modifier": "public static final", "type": "byte", "declarator": "CHAR_ENC_CYRLLIC = 0x06", "var_name": "CHAR_ENC_CYRLLIC"}, {"original_string": "public static final byte CHAR_ENC_HEBREW = 0x07;", "modifier": "public static final", "type": "byte", "declarator": "CHAR_ENC_HEBREW = 0x07", "var_name": "CHAR_ENC_HEBREW"}, {"original_string": "public static final byte CHAR_ENC_UCS2 = 0x08;", "modifier": "public static final", "type": "byte", "declarator": "CHAR_ENC_UCS2 = 0x08", "var_name": "CHAR_ENC_UCS2"}, {"original_string": "public static final byte CHAR_ENC_PICTO = 0x09;", "modifier": "public static final", "type": "byte", "declarator": "CHAR_ENC_PICTO = 0x09", "var_name": "CHAR_ENC_PICTO"}, {"original_string": "public static final byte CHAR_ENC_MUSIC = 0x0A;", "modifier": "public static final", "type": "byte", "declarator": "CHAR_ENC_MUSIC = 0x0A", "var_name": "CHAR_ENC_MUSIC"}, {"original_string": "public static final byte CHAR_ENC_RSRVD = 0x0B;", "modifier": "public static final", "type": "byte", "declarator": "CHAR_ENC_RSRVD = 0x0B", "var_name": "CHAR_ENC_RSRVD"}, {"original_string": "public static final byte CHAR_ENC_RSRVD2 = 0x0C;", "modifier": "public static final", "type": "byte", "declarator": "CHAR_ENC_RSRVD2 = 0x0C", "var_name": "CHAR_ENC_RSRVD2"}, {"original_string": "public static final byte CHAR_ENC_EXKANJI = 0x0D;", "modifier": "public static final", "type": "byte", "declarator": "CHAR_ENC_EXKANJI = 0x0D", "var_name": "CHAR_ENC_EXKANJI"}, {"original_string": "public static final byte CHAR_ENC_KSC5601 = 0x0E;", "modifier": "public static final", "type": "byte", "declarator": "CHAR_ENC_KSC5601 = 0x0E", "var_name": "CHAR_ENC_KSC5601"}, {"original_string": "public static final byte CHAR_ENC_RSRVD3 = 0x0F;", "modifier": "public static final", "type": "byte", "declarator": "CHAR_ENC_RSRVD3 = 0x0F", "var_name": "CHAR_ENC_RSRVD3"}, {"original_string": "private final byte dcs;", "modifier": "private final", "type": "byte", "declarator": "dcs", "var_name": "dcs"}, {"original_string": "private final Group codingGroup;", "modifier": "private final", "type": "Group", "declarator": "codingGroup", "var_name": "codingGroup"}, {"original_string": "private final byte characterEncoding;", "modifier": "private final", "type": "byte", "declarator": "characterEncoding", "var_name": "characterEncoding"}, {"original_string": "private final byte messageClass;", "modifier": "private final", "type": "byte", "declarator": "messageClass", "var_name": "messageClass"}, {"original_string": "private final boolean compressed;", "modifier": "private final", "type": "boolean", "declarator": "compressed", "var_name": "compressed"}], "methods": [{"identifier": "DataCoding", "parameters": "(byte dcs, Group codingGroup, byte characterEncoding, byte messageClass, boolean compressed)", "modifiers": "protected", "return": "", "signature": " DataCoding(byte dcs, Group codingGroup, byte characterEncoding, byte messageClass, boolean compressed)", "full_signature": "protected  DataCoding(byte dcs, Group codingGroup, byte characterEncoding, byte messageClass, boolean compressed)", "class_method_signature": "DataCoding.DataCoding(byte dcs, Group codingGroup, byte characterEncoding, byte messageClass, boolean compressed)", "testcase": false, "constructor": true}, {"identifier": "getByteValue", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte getByteValue()", "full_signature": "public byte getByteValue()", "class_method_signature": "DataCoding.getByteValue()", "testcase": false, "constructor": false}, {"identifier": "getCodingGroup", "parameters": "()", "modifiers": "public", "return": "Group", "signature": "Group getCodingGroup()", "full_signature": "public Group getCodingGroup()", "class_method_signature": "DataCoding.getCodingGroup()", "testcase": false, "constructor": false}, {"identifier": "getCharacterEncoding", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte getCharacterEncoding()", "full_signature": "public byte getCharacterEncoding()", "class_method_signature": "DataCoding.getCharacterEncoding()", "testcase": false, "constructor": false}, {"identifier": "getMessageClass", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte getMessageClass()", "full_signature": "public byte getMessageClass()", "class_method_signature": "DataCoding.getMessageClass()", "testcase": false, "constructor": false}, {"identifier": "isCompressed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCompressed()", "full_signature": "public boolean isCompressed()", "class_method_signature": "DataCoding.isCompressed()", "testcase": false, "constructor": false}, {"identifier": "createCharacterEncodingGroup", "parameters": "(byte characterEncoding)", "modifiers": "static public", "return": "DataCoding", "signature": "DataCoding createCharacterEncodingGroup(byte characterEncoding)", "full_signature": "static public DataCoding createCharacterEncodingGroup(byte characterEncoding)", "class_method_signature": "DataCoding.createCharacterEncodingGroup(byte characterEncoding)", "testcase": false, "constructor": false}, {"identifier": "createMessageClassGroup", "parameters": "(byte characterEncoding, byte messageClass)", "modifiers": "static public", "return": "DataCoding", "signature": "DataCoding createMessageClassGroup(byte characterEncoding, byte messageClass)", "full_signature": "static public DataCoding createMessageClassGroup(byte characterEncoding, byte messageClass)", "class_method_signature": "DataCoding.createMessageClassGroup(byte characterEncoding, byte messageClass)", "testcase": false, "constructor": false}, {"identifier": "createGeneralGroup", "parameters": "(byte characterEncoding, Byte messageClass, boolean compressed)", "modifiers": "static public", "return": "DataCoding", "signature": "DataCoding createGeneralGroup(byte characterEncoding, Byte messageClass, boolean compressed)", "full_signature": "static public DataCoding createGeneralGroup(byte characterEncoding, Byte messageClass, boolean compressed)", "class_method_signature": "DataCoding.createGeneralGroup(byte characterEncoding, Byte messageClass, boolean compressed)", "testcase": false, "constructor": false}, {"identifier": "createMessageWaitingIndicationGroup", "parameters": "(byte characterEncoding, boolean store, boolean active, byte indicatorType)", "modifiers": "static public", "return": "DataCoding", "signature": "DataCoding createMessageWaitingIndicationGroup(byte characterEncoding, boolean store, boolean active, byte indicatorType)", "full_signature": "static public DataCoding createMessageWaitingIndicationGroup(byte characterEncoding, boolean store, boolean active, byte indicatorType)", "class_method_signature": "DataCoding.createMessageWaitingIndicationGroup(byte characterEncoding, boolean store, boolean active, byte indicatorType)", "testcase": false, "constructor": false}, {"identifier": "createReservedGroup", "parameters": "(byte dcs)", "modifiers": "static public", "return": "DataCoding", "signature": "DataCoding createReservedGroup(byte dcs)", "full_signature": "static public DataCoding createReservedGroup(byte dcs)", "class_method_signature": "DataCoding.createReservedGroup(byte dcs)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(byte dcs)", "modifiers": "static public", "return": "DataCoding", "signature": "DataCoding parse(byte dcs)", "full_signature": "static public DataCoding parse(byte dcs)", "class_method_signature": "DataCoding.parse(byte dcs)", "testcase": false, "constructor": false}], "file": "ch-commons-gsm/src/main/java/com/cloudhopper/commons/gsm/DataCoding.java"}, "focal_method": {"identifier": "parse", "parameters": "(byte dcs)", "modifiers": "static public", "return": "DataCoding", "body": "static public DataCoding parse(byte dcs) {\n        try {\n            // if bits 7 thru 4 are all off, this represents a simple character encoding group\n            if ((dcs & (byte)0xF0) == 0x00) {\n                // the raw dcs value is exactly our 16 possible languaged\n                return createCharacterEncodingGroup(dcs);\n\n            // if bits 7 thru 4 are all on, this represents a message class group\n            } else if ((dcs & (byte)0xF0) == (byte)0xF0) {\n                // bit 2 is the language encoding\n                byte characterEncoding = CHAR_ENC_DEFAULT;\n                if ((dcs & (byte)0x04) == (byte)0x04) {\n                    characterEncoding = CHAR_ENC_8BIT;\n                }\n\n                // bits 1 thru 0 is the message class\n                byte messageClass = (byte)(dcs & (byte)0x03);\n\n                return createMessageClassGroup(characterEncoding, messageClass);\n\n            // at this point if bits 7 and 6 are off, then general data coding group\n            } else if ((dcs & (byte)0xC0) == (byte)0x00) {\n                // bit 5 represents \"compression\"\n                boolean compressed = false;\n                if ((dcs & (byte)0x20) == (byte)0x20) {\n                    compressed = true;\n                }\n\n                // bits 1 thru 0 is the message class\n                byte tempMessageClass = (byte)(dcs & (byte)0x03);\n\n                Byte messageClass = null;\n                // bit 4 on means the message class becomes used\n                if ((dcs & (byte)0x10) == (byte)0x10) {\n                    messageClass = new Byte(tempMessageClass);\n                }\n\n                // bits 3 and 2 represent the language encodings (nicely match default, 8-bit, or UCS2)\n                byte characterEncoding = (byte)(dcs & (byte)0x0C);\n\n                return createGeneralGroup(characterEncoding, messageClass, compressed);\n\n            // at this point if bits 7 and 6 are on, then bits 5 and 4 determine MWI\n            } else if ((dcs & (byte)0xC0) == (byte)0xC0) {\n                // bit 5: 0=default, 1=UCS2\n                byte characterEncoding = CHAR_ENC_DEFAULT;\n                if ((byte)(dcs & (byte)0x20) == 0x20) {\n                    characterEncoding = CHAR_ENC_UCS2;\n                }\n\n                // bit 4: 0=discard, 1=store\n                boolean store = false;\n                if ((byte)(dcs & (byte)0x10) == 0x10) {\n                    store = true;\n                }\n\n                // bit 3: indicator active\n                boolean indicatorActive = false;\n                if ((byte)(dcs & (byte)0x08) == 0x08) {\n                    indicatorActive = true;\n                }\n\n                // bit 2: means nothing\n\n                // bit 1 thru 0 is the type of indicator\n                byte indicatorType = (byte)(dcs & (byte)0x03);\n\n                return createMessageWaitingIndicationGroup(characterEncoding, store, indicatorActive, indicatorType);\n\n            } else {\n                return createReservedGroup(dcs);\n            }\n        } catch (IllegalArgumentException e) {\n            return createReservedGroup(dcs);\n        }\n    }", "signature": "DataCoding parse(byte dcs)", "full_signature": "static public DataCoding parse(byte dcs)", "class_method_signature": "DataCoding.parse(byte dcs)", "testcase": false, "constructor": false, "invocations": ["createCharacterEncodingGroup", "createMessageClassGroup", "createGeneralGroup", "createMessageWaitingIndicationGroup", "createReservedGroup", "createReservedGroup"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}