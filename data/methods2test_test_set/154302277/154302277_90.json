{"test_class": {"identifier": "PushNotificationSmsMessageProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEVICE_IDENTIFICATION = \"dvc-1\";", "modifier": "private static final", "type": "String", "declarator": "DEVICE_IDENTIFICATION = \"dvc-1\"", "var_name": "DEVICE_IDENTIFICATION"}, {"original_string": "private static final String IP_ADDRESS = \"127.0.0.1\";", "modifier": "private static final", "type": "String", "declarator": "IP_ADDRESS = \"127.0.0.1\"", "var_name": "IP_ADDRESS"}, {"original_string": "@Mock\n    private PushNotificationSmsDto pushNotificationSms;", "modifier": "@Mock\n    private", "type": "PushNotificationSmsDto", "declarator": "pushNotificationSms", "var_name": "pushNotificationSms"}, {"original_string": "@Mock\n    private EventNotificationMessageService eventNotificationMessageService;", "modifier": "@Mock\n    private", "type": "EventNotificationMessageService", "declarator": "eventNotificationMessageService", "var_name": "eventNotificationMessageService"}, {"original_string": "@Mock\n    private DeviceRepository deviceRepository;", "modifier": "@Mock\n    private", "type": "DeviceRepository", "declarator": "deviceRepository", "var_name": "deviceRepository"}, {"original_string": "@InjectMocks\n    private PushNotificationSmsMessageProcessor pushNotificationSmsMessageProcessor;", "modifier": "@InjectMocks\n    private", "type": "PushNotificationSmsMessageProcessor", "declarator": "pushNotificationSmsMessageProcessor", "var_name": "pushNotificationSmsMessageProcessor"}, {"original_string": "private ObjectMessage message;", "modifier": "private", "type": "ObjectMessage", "declarator": "message", "var_name": "message"}], "file": "osgp/platform/osgp-core/src/test/java/org/opensmartgridplatform/core/infra/jms/protocol/inbound/messageprocessors/PushNotificationSmsMessageProcessorTest.java"}, "test_case": {"identifier": "testUnknownDevice", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnknownDevice() {\n        when(this.deviceRepository.findByDeviceIdentification(DEVICE_IDENTIFICATION)).thenReturn(null);\n        assertThatExceptionOfType(JMSException.class).isThrownBy(() -> {\n            this.pushNotificationSmsMessageProcessor.processMessage(this.message);\n        });\n    }", "signature": "void testUnknownDevice()", "full_signature": "@Test public void testUnknownDevice()", "class_method_signature": "PushNotificationSmsMessageProcessorTest.testUnknownDevice()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findByDeviceIdentification", "isThrownBy", "assertThatExceptionOfType", "processMessage"]}, "focal_class": {"identifier": "PushNotificationSmsMessageProcessor", "superclass": "extends AbstractProtocolRequestMessageProcessor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PushNotificationSmsMessageProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PushNotificationSmsMessageProcessor.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private EventNotificationMessageService eventNotificationMessageService;", "modifier": "@Autowired\n    private", "type": "EventNotificationMessageService", "declarator": "eventNotificationMessageService", "var_name": "eventNotificationMessageService"}, {"original_string": "@Autowired\n    private DeviceRepository deviceRepository;", "modifier": "@Autowired\n    private", "type": "DeviceRepository", "declarator": "deviceRepository", "var_name": "deviceRepository"}], "methods": [{"identifier": "PushNotificationSmsMessageProcessor", "parameters": "()", "modifiers": "protected", "return": "", "signature": " PushNotificationSmsMessageProcessor()", "full_signature": "protected  PushNotificationSmsMessageProcessor()", "class_method_signature": "PushNotificationSmsMessageProcessor.PushNotificationSmsMessageProcessor()", "testcase": false, "constructor": true}, {"identifier": "processMessage", "parameters": "(final ObjectMessage message)", "modifiers": "@Override public", "return": "void", "signature": "void processMessage(final ObjectMessage message)", "full_signature": "@Override public void processMessage(final ObjectMessage message)", "class_method_signature": "PushNotificationSmsMessageProcessor.processMessage(final ObjectMessage message)", "testcase": false, "constructor": false}, {"identifier": "getDevice", "parameters": "(String deviceIdentification)", "modifiers": "private", "return": "Device", "signature": "Device getDevice(String deviceIdentification)", "full_signature": "private Device getDevice(String deviceIdentification)", "class_method_signature": "PushNotificationSmsMessageProcessor.getDevice(String deviceIdentification)", "testcase": false, "constructor": false}, {"identifier": "storeSmsAsEvent", "parameters": "(final PushNotificationSmsDto pushNotificationSms)", "modifiers": "private", "return": "void", "signature": "void storeSmsAsEvent(final PushNotificationSmsDto pushNotificationSms)", "full_signature": "private void storeSmsAsEvent(final PushNotificationSmsDto pushNotificationSms)", "class_method_signature": "PushNotificationSmsMessageProcessor.storeSmsAsEvent(final PushNotificationSmsDto pushNotificationSms)", "testcase": false, "constructor": false}], "file": "osgp/platform/osgp-core/src/main/java/org/opensmartgridplatform/core/infra/jms/protocol/inbound/messageprocessors/PushNotificationSmsMessageProcessor.java"}, "focal_method": {"identifier": "processMessage", "parameters": "(final ObjectMessage message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void processMessage(final ObjectMessage message) throws JMSException {\n\n        final MessageMetadata metadata = MessageMetadata.fromMessage(message);\n\n        LOGGER.info(\"Received message of messageType: {} organisationIdentification: {} deviceIdentification: {}\",\n                messageType, metadata.getOrganisationIdentification(), metadata.getDeviceIdentification());\n\n        final RequestMessage requestMessage = (RequestMessage) message.getObject();\n        final Object dataObject = requestMessage.getRequest();\n\n        try {\n\n            final Device device = getDevice(metadata.getDeviceIdentification());\n\n            final PushNotificationSmsDto pushNotificationSms = (PushNotificationSmsDto) dataObject;\n\n            this.storeSmsAsEvent(pushNotificationSms);\n\n            if (pushNotificationSms.getIpAddress() != null && !\"\".equals(pushNotificationSms.getIpAddress())) {\n\n                LOGGER.info(\"Updating device {} IP address from {} to {}\", metadata.getDeviceIdentification(),\n                        requestMessage.getIpAddress(), pushNotificationSms.getIpAddress());\n\n                // Convert the IP address from String to InetAddress.\n                final InetAddress address = InetAddress.getByName(pushNotificationSms.getIpAddress());\n\n                device.updateRegistrationData(address, device.getDeviceType());\n                device.updateConnectionDetailsToSuccess();\n                this.deviceRepository.save(device);\n\n            } else {\n                LOGGER.warn(\"Sms notification request for device = {} has no new IP address. Discard request.\",\n                        metadata.getDeviceIdentification());\n            }\n\n        } catch (final UnknownHostException | FunctionalException e) {\n            String errorMessage = String.format(\"%s occurred, reason: %s\", e.getClass().getName(), e.getMessage());\n            LOGGER.error(errorMessage, e);\n\n            throw new JMSException(errorMessage);\n        }\n    }", "signature": "void processMessage(final ObjectMessage message)", "full_signature": "@Override public void processMessage(final ObjectMessage message)", "class_method_signature": "PushNotificationSmsMessageProcessor.processMessage(final ObjectMessage message)", "testcase": false, "constructor": false, "invocations": ["fromMessage", "info", "getOrganisationIdentification", "getDeviceIdentification", "getObject", "getRequest", "getDevice", "getDeviceIdentification", "storeSmsAsEvent", "getIpAddress", "equals", "getIpAddress", "info", "getDeviceIdentification", "getIpAddress", "getIpAddress", "getByName", "getIpAddress", "updateRegistrationData", "getDeviceType", "updateConnectionDetailsToSuccess", "save", "warn", "getDeviceIdentification", "format", "getName", "getClass", "getMessage", "error"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}