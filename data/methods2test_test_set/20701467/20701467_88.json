{"test_class": {"identifier": "Ipv4DecoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "packethandler/implementation/src/test/java/org/opendaylight/l2switch/packethandler/decoders/Ipv4DecoderTest.java"}, "test_case": {"identifier": "testDecode_WithDiffServAndFlagsAndOffset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecode_WithDiffServAndFlagsAndOffset() throws Exception {\n        byte[] ethPayload = {\n            0x01, 0x23, 0x66, 0x67, (byte) 0x89, (byte) 0xab, //src mac\n            (byte) 0xcd, (byte) 0xef, 0x01, 0x23, 0x45, 0x67, //dst mac\n            (byte) 0x81, 0x00,\n            0x08, 0x00, // EtherType\n            0x45, // Version = 4,  IHL = 5\n            (byte) 0xff, // DSCP =63, ECN = 3\n            0x00, 0x1E, // Total Length -- 30\n            0x01, 0x1E, // Identification -- 286\n            (byte) 0xf0, 0x00, // Flags = all on & Fragment offset = 0\n            0x12, 0x06, // TTL = 18, Protocol = TCP\n            (byte) 0x00, 0x00, // Checksum = 0\n            (byte) 0xc0, (byte) 0xa8, 0x00, 0x01, // Src IP Address\n            0x01, 0x02, 0x03, 0x04, // Dest IP Address\n            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11,\n            0x12, 0x13, // Data\n            (byte) 0x98, (byte) 0xfe, (byte) 0xdc, (byte) 0xba // CRC\n        };\n        NotificationProviderService npServiceMock = Mockito.mock(NotificationProviderService.class);\n        ArrayList<PacketChain> packetChainList = new ArrayList<>();\n        packetChainList.add(new PacketChainBuilder().setPacket(new RawPacketBuilder().build()).build());\n        packetChainList.add(\n                new PacketChainBuilder().setPacket(new EthernetPacketBuilder().setPayloadOffset(16).build()).build());\n\n        Ipv4PacketReceived notification = new Ipv4Decoder(npServiceMock).decode(\n                new EthernetPacketReceivedBuilder().setPacketChain(packetChainList).setPayload(ethPayload).build());\n        Ipv4Packet ipv4Packet = (Ipv4Packet) notification.getPacketChain().get(2).getPacket();\n        assertEquals(4, ipv4Packet.getVersion().intValue());\n        assertEquals(5, ipv4Packet.getIhl().intValue());\n        assertEquals(30, ipv4Packet.getIpv4Length().intValue());\n        assertEquals(63, ipv4Packet.getDscp().getValue().intValue());\n        assertEquals(3, ipv4Packet.getEcn().intValue());\n        assertEquals(30, ipv4Packet.getIpv4Length().intValue());\n        assertEquals(286, ipv4Packet.getId().intValue());\n        assertTrue(ipv4Packet.isReservedFlag());\n        assertTrue(ipv4Packet.isDfFlag());\n        assertTrue(ipv4Packet.isMfFlag());\n        assertEquals(4096, ipv4Packet.getFragmentOffset().intValue());\n        assertEquals(18, ipv4Packet.getTtl().intValue());\n        assertEquals(KnownIpProtocols.Tcp, ipv4Packet.getProtocol());\n        assertEquals(0, ipv4Packet.getChecksum().intValue());\n\n        Ipv4Address srcAddress = new Ipv4Address(\"192.168.0.1\");\n        Ipv4Address dstAddress = new Ipv4Address(\"1.2.3.4\");\n        assertEquals(srcAddress, ipv4Packet.getSourceIpv4());\n        assertEquals(dstAddress, ipv4Packet.getDestinationIpv4());\n        assertEquals(13, ipv4Packet.getPayloadLength().intValue());\n        assertEquals(36, ipv4Packet.getPayloadOffset().intValue());\n        assertTrue(Arrays.equals(ethPayload, notification.getPayload()));\n    }", "signature": "void testDecode_WithDiffServAndFlagsAndOffset()", "full_signature": "@Test public void testDecode_WithDiffServAndFlagsAndOffset()", "class_method_signature": "Ipv4DecoderTest.testDecode_WithDiffServAndFlagsAndOffset()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "build", "setPacket", "build", "add", "build", "setPacket", "build", "setPayloadOffset", "decode", "build", "setPayload", "setPacketChain", "getPacket", "get", "getPacketChain", "assertEquals", "intValue", "getVersion", "assertEquals", "intValue", "getIhl", "assertEquals", "intValue", "getIpv4Length", "assertEquals", "intValue", "getValue", "getDscp", "assertEquals", "intValue", "getEcn", "assertEquals", "intValue", "getIpv4Length", "assertEquals", "intValue", "getId", "assertTrue", "isReservedFlag", "assertTrue", "isDfFlag", "assertTrue", "isMfFlag", "assertEquals", "intValue", "getFragmentOffset", "assertEquals", "intValue", "getTtl", "assertEquals", "getProtocol", "assertEquals", "intValue", "getChecksum", "assertEquals", "getSourceIpv4", "assertEquals", "getDestinationIpv4", "assertEquals", "intValue", "getPayloadLength", "assertEquals", "intValue", "getPayloadOffset", "assertTrue", "equals", "getPayload"]}, "focal_class": {"identifier": "Ipv4Decoder", "superclass": "extends AbstractPacketDecoder<EthernetPacketReceived, Ipv4PacketReceived>", "interfaces": "implements EthernetPacketListener", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Ipv4Decoder.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Ipv4Decoder.class)", "var_name": "LOG"}], "methods": [{"identifier": "Ipv4Decoder", "parameters": "(NotificationProviderService notificationProviderService)", "modifiers": "public", "return": "", "signature": " Ipv4Decoder(NotificationProviderService notificationProviderService)", "full_signature": "public  Ipv4Decoder(NotificationProviderService notificationProviderService)", "class_method_signature": "Ipv4Decoder.Ipv4Decoder(NotificationProviderService notificationProviderService)", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "(EthernetPacketReceived ethernetPacketReceived)", "modifiers": "@Override public", "return": "Ipv4PacketReceived", "signature": "Ipv4PacketReceived decode(EthernetPacketReceived ethernetPacketReceived)", "full_signature": "@Override public Ipv4PacketReceived decode(EthernetPacketReceived ethernetPacketReceived)", "class_method_signature": "Ipv4Decoder.decode(EthernetPacketReceived ethernetPacketReceived)", "testcase": false, "constructor": false}, {"identifier": "getConsumedNotificationListener", "parameters": "()", "modifiers": "@Override public", "return": "NotificationListener", "signature": "NotificationListener getConsumedNotificationListener()", "full_signature": "@Override public NotificationListener getConsumedNotificationListener()", "class_method_signature": "Ipv4Decoder.getConsumedNotificationListener()", "testcase": false, "constructor": false}, {"identifier": "onEthernetPacketReceived", "parameters": "(EthernetPacketReceived notification)", "modifiers": "@Override public", "return": "void", "signature": "void onEthernetPacketReceived(EthernetPacketReceived notification)", "full_signature": "@Override public void onEthernetPacketReceived(EthernetPacketReceived notification)", "class_method_signature": "Ipv4Decoder.onEthernetPacketReceived(EthernetPacketReceived notification)", "testcase": false, "constructor": false}, {"identifier": "canDecode", "parameters": "(EthernetPacketReceived ethernetPacketReceived)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canDecode(EthernetPacketReceived ethernetPacketReceived)", "full_signature": "@Override public boolean canDecode(EthernetPacketReceived ethernetPacketReceived)", "class_method_signature": "Ipv4Decoder.canDecode(EthernetPacketReceived ethernetPacketReceived)", "testcase": false, "constructor": false}], "file": "packethandler/implementation/src/main/java/org/opendaylight/l2switch/packethandler/decoders/Ipv4Decoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(EthernetPacketReceived ethernetPacketReceived)", "modifiers": "@Override public", "return": "Ipv4PacketReceived", "body": "@Override\n    public Ipv4PacketReceived decode(EthernetPacketReceived ethernetPacketReceived) {\n        Ipv4PacketReceivedBuilder ipv4ReceivedBuilder = new Ipv4PacketReceivedBuilder();\n\n        // Find the latest packet in the packet-chain, which is an\n        // EthernetPacket\n        List<PacketChain> packetChainList = ethernetPacketReceived.getPacketChain();\n        EthernetPacket ethernetPacket = (EthernetPacket) packetChainList.get(packetChainList.size() - 1).getPacket();\n        int bitOffset = ethernetPacket.getPayloadOffset() * NetUtils.NUM_BITS_IN_A_BYTE;\n        byte[] data = ethernetPacketReceived.getPayload();\n\n        Ipv4PacketBuilder builder = new Ipv4PacketBuilder();\n        try {\n            builder.setVersion(BitBufferHelper.getShort(BitBufferHelper.getBits(data, bitOffset, 4)));\n            if (builder.getVersion().intValue() != 4) {\n                LOG.debug(\"Version should be 4, but is {}\", builder.getVersion());\n            }\n\n            builder.setIhl(BitBufferHelper.getShort(BitBufferHelper.getBits(data, bitOffset + 4, 4)));\n            builder.setDscp(new Dscp(BitBufferHelper.getShort(BitBufferHelper.getBits(data, bitOffset + 8, 6))));\n            builder.setEcn(BitBufferHelper.getShort(BitBufferHelper.getBits(data, bitOffset + 14, 2)));\n            builder.setIpv4Length(BitBufferHelper.getInt(BitBufferHelper.getBits(data, bitOffset + 16, 16)));\n            builder.setId(BitBufferHelper.getInt(BitBufferHelper.getBits(data, bitOffset + 32, 16)));\n\n            // Decode the flags -- Reserved, DF (Don't Fragment), MF (More\n            // Fragments)\n            builder.setReservedFlag(1 == (BitBufferHelper.getBits(data, bitOffset + 48, 1)[0] & 0xff));\n            if (builder.isReservedFlag()) {\n                LOG.debug(\"Reserved flag should be 0, but is 1.\");\n            }\n            // \"& 0xff\" removes the sign of the Java byte\n            builder.setDfFlag(1 == (BitBufferHelper.getBits(data, bitOffset + 49, 1)[0] & 0xff));\n            builder.setMfFlag(1 == (BitBufferHelper.getBits(data, bitOffset + 50, 1)[0] & 0xff));\n\n            builder.setFragmentOffset(BitBufferHelper.getInt(BitBufferHelper.getBits(data, bitOffset + 51, 13)));\n            builder.setTtl(BitBufferHelper.getShort(BitBufferHelper.getBits(data, bitOffset + 64, 8)));\n            builder.setProtocol(KnownIpProtocols\n                    .forValue(BitBufferHelper.getShort(BitBufferHelper.getBits(data, bitOffset + 72, 8))));\n            builder.setChecksum(BitBufferHelper.getInt(BitBufferHelper.getBits(data, bitOffset + 80, 16)));\n            builder.setSourceIpv4(Ipv4Address.getDefaultInstance(\n                    InetAddress.getByAddress(BitBufferHelper.getBits(data, bitOffset + 96, 32)).getHostAddress()));\n            builder.setDestinationIpv4(Ipv4Address.getDefaultInstance(\n                    InetAddress.getByAddress(BitBufferHelper.getBits(data, bitOffset + 128, 32)).getHostAddress()));\n\n            // Decode the optional \"options\" parameter\n            int optionsSize = (builder.getIhl() - 5) * 32;\n            if (optionsSize > 0) {\n                builder.setIpv4Options(BitBufferHelper.getBits(data, bitOffset + 160, optionsSize));\n            }\n\n            // Decode the IPv4 Payload\n            int payloadStartInBits = bitOffset + 160 + optionsSize;\n            int payloadEndInBits = data.length * NetUtils.NUM_BITS_IN_A_BYTE - payloadStartInBits\n                    - 4 * NetUtils.NUM_BITS_IN_A_BYTE;\n            int start = payloadStartInBits / NetUtils.NUM_BITS_IN_A_BYTE;\n            int end = start + payloadEndInBits / NetUtils.NUM_BITS_IN_A_BYTE;\n            builder.setPayloadOffset(start);\n            builder.setPayloadLength(end - start);\n        } catch (BufferException | UnknownHostException e) {\n            LOG.debug(\"Exception while decoding IPv4 packet\", e.getMessage());\n        }\n\n        // build ipv4\n        packetChainList.add(new PacketChainBuilder().setPacket(builder.build()).build());\n        ipv4ReceivedBuilder.setPacketChain(packetChainList);\n\n        // carry forward the original payload.\n        ipv4ReceivedBuilder.setPayload(ethernetPacketReceived.getPayload());\n\n        return ipv4ReceivedBuilder.build();\n    }", "signature": "Ipv4PacketReceived decode(EthernetPacketReceived ethernetPacketReceived)", "full_signature": "@Override public Ipv4PacketReceived decode(EthernetPacketReceived ethernetPacketReceived)", "class_method_signature": "Ipv4Decoder.decode(EthernetPacketReceived ethernetPacketReceived)", "testcase": false, "constructor": false, "invocations": ["getPacketChain", "getPacket", "get", "size", "getPayloadOffset", "getPayload", "setVersion", "getShort", "getBits", "intValue", "getVersion", "debug", "getVersion", "setIhl", "getShort", "getBits", "setDscp", "getShort", "getBits", "setEcn", "getShort", "getBits", "setIpv4Length", "getInt", "getBits", "setId", "getInt", "getBits", "setReservedFlag", "getBits", "isReservedFlag", "debug", "setDfFlag", "getBits", "setMfFlag", "getBits", "setFragmentOffset", "getInt", "getBits", "setTtl", "getShort", "getBits", "setProtocol", "forValue", "getShort", "getBits", "setChecksum", "getInt", "getBits", "setSourceIpv4", "getDefaultInstance", "getHostAddress", "getByAddress", "getBits", "setDestinationIpv4", "getDefaultInstance", "getHostAddress", "getByAddress", "getBits", "getIhl", "setIpv4Options", "getBits", "setPayloadOffset", "setPayloadLength", "debug", "getMessage", "add", "build", "setPacket", "build", "setPacketChain", "setPayload", "getPayload", "build"]}, "repository": {"repo_id": 20701467, "url": "https://github.com/opendaylight/l2switch", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 25, "size": 4178, "license": "licensed"}}