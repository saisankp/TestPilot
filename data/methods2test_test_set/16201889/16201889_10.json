{"test_class": {"identifier": "AuthorshipTest", "superclass": "", "interfaces": "", "fields": [], "file": "name-parser-api/src/test/java/org/gbif/nameparser/api/AuthorshipTest.java"}, "test_case": {"identifier": "testAuthorship", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAuthorship() throws Exception {\n    Authorship auth = new Authorship();\n    assertNull(auth.toString());\n    \n    auth.setAuthors(Lists.newArrayList(\"L.\"));\n    assertEquals(\"L.\", auth.toString());\n    \n    auth.getAuthors().add(\"Rohe\");\n    assertEquals(\"L. & Rohe\", auth.toString());\n    \n    auth.getAuthors().clear();\n    auth.setYear(\"1878\");\n    assertEquals(\"1878\", auth.toString());\n    \n    auth.getAuthors().add(\"L.\");\n    auth.getAuthors().add(\"Rohe\");\n    assertEquals(\"L. & Rohe, 1878\", auth.toString());\n    \n    auth.setExAuthors(Lists.newArrayList(\"Bassier\"));\n    assertEquals(\"Bassier ex L. & Rohe, 1878\", auth.toString());\n  }", "signature": "void testAuthorship()", "full_signature": "@Test public void testAuthorship()", "class_method_signature": "AuthorshipTest.testAuthorship()", "testcase": true, "constructor": false, "invocations": ["assertNull", "toString", "setAuthors", "newArrayList", "assertEquals", "toString", "add", "getAuthors", "assertEquals", "toString", "clear", "getAuthors", "setYear", "assertEquals", "toString", "add", "getAuthors", "add", "getAuthors", "assertEquals", "toString", "setExAuthors", "newArrayList", "assertEquals", "toString"]}, "focal_class": {"identifier": "Authorship", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<String> authors = new ArrayList<>();", "modifier": "private", "type": "List<String>", "declarator": "authors = new ArrayList<>()", "var_name": "authors"}, {"original_string": "private List<String> exAuthors = new ArrayList<>();", "modifier": "private", "type": "List<String>", "declarator": "exAuthors = new ArrayList<>()", "var_name": "exAuthors"}, {"original_string": "private String year;", "modifier": "private", "type": "String", "declarator": "year", "var_name": "year"}], "methods": [{"identifier": "authors", "parameters": "(String... authors)", "modifiers": "public static", "return": "Authorship", "signature": "Authorship authors(String... authors)", "full_signature": "public static Authorship authors(String... authors)", "class_method_signature": "Authorship.authors(String... authors)", "testcase": false, "constructor": false}, {"identifier": "yearAuthors", "parameters": "(String year, String... authors)", "modifiers": "public static", "return": "Authorship", "signature": "Authorship yearAuthors(String year, String... authors)", "full_signature": "public static Authorship yearAuthors(String year, String... authors)", "class_method_signature": "Authorship.yearAuthors(String year, String... authors)", "testcase": false, "constructor": false}, {"identifier": "Authorship", "parameters": "()", "modifiers": "public", "return": "", "signature": " Authorship()", "full_signature": "public  Authorship()", "class_method_signature": "Authorship.Authorship()", "testcase": false, "constructor": true}, {"identifier": "Authorship", "parameters": "(List<String> authors)", "modifiers": "public", "return": "", "signature": " Authorship(List<String> authors)", "full_signature": "public  Authorship(List<String> authors)", "class_method_signature": "Authorship.Authorship(List<String> authors)", "testcase": false, "constructor": true}, {"identifier": "Authorship", "parameters": "(List<String> authors, String year)", "modifiers": "public", "return": "", "signature": " Authorship(List<String> authors, String year)", "full_signature": "public  Authorship(List<String> authors, String year)", "class_method_signature": "Authorship.Authorship(List<String> authors, String year)", "testcase": false, "constructor": true}, {"identifier": "Authorship", "parameters": "(List<String> authors, List<String> exAuthors, String year)", "modifiers": "public", "return": "", "signature": " Authorship(List<String> authors, List<String> exAuthors, String year)", "full_signature": "public  Authorship(List<String> authors, List<String> exAuthors, String year)", "class_method_signature": "Authorship.Authorship(List<String> authors, List<String> exAuthors, String year)", "testcase": false, "constructor": true}, {"identifier": "hasAuthors", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasAuthors()", "full_signature": "public boolean hasAuthors()", "class_method_signature": "Authorship.hasAuthors()", "testcase": false, "constructor": false}, {"identifier": "getAuthors", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAuthors()", "full_signature": "public List<String> getAuthors()", "class_method_signature": "Authorship.getAuthors()", "testcase": false, "constructor": false}, {"identifier": "addAuthor", "parameters": "(String author)", "modifiers": "public", "return": "void", "signature": "void addAuthor(String author)", "full_signature": "public void addAuthor(String author)", "class_method_signature": "Authorship.addAuthor(String author)", "testcase": false, "constructor": false}, {"identifier": "setAuthors", "parameters": "(List<String> authors)", "modifiers": "public", "return": "void", "signature": "void setAuthors(List<String> authors)", "full_signature": "public void setAuthors(List<String> authors)", "class_method_signature": "Authorship.setAuthors(List<String> authors)", "testcase": false, "constructor": false}, {"identifier": "hasExAuthors", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasExAuthors()", "full_signature": "public boolean hasExAuthors()", "class_method_signature": "Authorship.hasExAuthors()", "testcase": false, "constructor": false}, {"identifier": "getExAuthors", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getExAuthors()", "full_signature": "public List<String> getExAuthors()", "class_method_signature": "Authorship.getExAuthors()", "testcase": false, "constructor": false}, {"identifier": "addExAuthor", "parameters": "(String author)", "modifiers": "public", "return": "void", "signature": "void addExAuthor(String author)", "full_signature": "public void addExAuthor(String author)", "class_method_signature": "Authorship.addExAuthor(String author)", "testcase": false, "constructor": false}, {"identifier": "setExAuthors", "parameters": "(List<String> exAuthors)", "modifiers": "public", "return": "void", "signature": "void setExAuthors(List<String> exAuthors)", "full_signature": "public void setExAuthors(List<String> exAuthors)", "class_method_signature": "Authorship.setExAuthors(List<String> exAuthors)", "testcase": false, "constructor": false}, {"identifier": "getYear", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getYear()", "full_signature": "public String getYear()", "class_method_signature": "Authorship.getYear()", "testcase": false, "constructor": false}, {"identifier": "setYear", "parameters": "(String year)", "modifiers": "public", "return": "void", "signature": "void setYear(String year)", "full_signature": "public void setYear(String year)", "class_method_signature": "Authorship.setYear(String year)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "Authorship.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean exists()", "full_signature": "public boolean exists()", "class_method_signature": "Authorship.exists()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Authorship.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Authorship.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Authorship.toString()", "testcase": false, "constructor": false}], "file": "name-parser-api/src/main/java/org/gbif/nameparser/api/Authorship.java"}, "focal_method": {"identifier": "Authorship", "parameters": "()", "modifiers": "public", "return": "", "body": "public Authorship() {\n  }", "signature": " Authorship()", "full_signature": "public  Authorship()", "class_method_signature": "Authorship.Authorship()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 16201889, "url": "https://github.com/gbif/name-parser", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 11, "size": 1978, "license": "licensed"}}