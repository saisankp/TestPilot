{"test_class": {"identifier": "AnnotationDetectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "aesh/src/test/java/org/aesh/io/scanner/AnnotationDetectorTest.java"}, "test_case": {"identifier": "testAnnotationDetector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAnnotationDetector() {\n        AnnotationReporter reporter = new AnnotationReporter();\n        AnnotationDetector detector = new AnnotationDetector(reporter);\n        try {\n            detector.detect(\"org.aesh.command.foo\");\n            assertFalse(reporter.foundManCommand);\n\n            detector.detect(\"org.aesh.command.man\");\n            assertTrue(reporter.foundManCommand);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }", "signature": "void testAnnotationDetector()", "full_signature": "@Test public void testAnnotationDetector()", "class_method_signature": "AnnotationDetectorTest.testAnnotationDetector()", "testcase": true, "constructor": false, "invocations": ["detect", "assertFalse", "detect", "assertTrue", "printStackTrace"]}, "focal_class": {"identifier": "AnnotationDetector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final boolean DEBUG = false;", "modifier": "private static final", "type": "boolean", "declarator": "DEBUG = false", "var_name": "DEBUG"}, {"original_string": "private static final int CP_UTF8 = 1;", "modifier": "private static final", "type": "int", "declarator": "CP_UTF8 = 1", "var_name": "CP_UTF8"}, {"original_string": "private static final int CP_INTEGER = 3;", "modifier": "private static final", "type": "int", "declarator": "CP_INTEGER = 3", "var_name": "CP_INTEGER"}, {"original_string": "private static final int CP_FLOAT = 4;", "modifier": "private static final", "type": "int", "declarator": "CP_FLOAT = 4", "var_name": "CP_FLOAT"}, {"original_string": "private static final int CP_LONG = 5;", "modifier": "private static final", "type": "int", "declarator": "CP_LONG = 5", "var_name": "CP_LONG"}, {"original_string": "private static final int CP_DOUBLE = 6;", "modifier": "private static final", "type": "int", "declarator": "CP_DOUBLE = 6", "var_name": "CP_DOUBLE"}, {"original_string": "private static final int CP_CLASS = 7;", "modifier": "private static final", "type": "int", "declarator": "CP_CLASS = 7", "var_name": "CP_CLASS"}, {"original_string": "private static final int CP_STRING = 8;", "modifier": "private static final", "type": "int", "declarator": "CP_STRING = 8", "var_name": "CP_STRING"}, {"original_string": "private static final int CP_REF_FIELD = 9;", "modifier": "private static final", "type": "int", "declarator": "CP_REF_FIELD = 9", "var_name": "CP_REF_FIELD"}, {"original_string": "private static final int CP_REF_METHOD = 10;", "modifier": "private static final", "type": "int", "declarator": "CP_REF_METHOD = 10", "var_name": "CP_REF_METHOD"}, {"original_string": "private static final int CP_REF_INTERFACE = 11;", "modifier": "private static final", "type": "int", "declarator": "CP_REF_INTERFACE = 11", "var_name": "CP_REF_INTERFACE"}, {"original_string": "private static final int CP_NAME_AND_TYPE = 12;", "modifier": "private static final", "type": "int", "declarator": "CP_NAME_AND_TYPE = 12", "var_name": "CP_NAME_AND_TYPE"}, {"original_string": "private static final int CP_METHOD_HANDLE = 15;", "modifier": "private static final", "type": "int", "declarator": "CP_METHOD_HANDLE = 15", "var_name": "CP_METHOD_HANDLE"}, {"original_string": "private static final int CP_METHOD_TYPE = 16;", "modifier": "private static final", "type": "int", "declarator": "CP_METHOD_TYPE = 16", "var_name": "CP_METHOD_TYPE"}, {"original_string": "private static final int CP_INVOKE_DYNAMIC = 18;", "modifier": "private static final", "type": "int", "declarator": "CP_INVOKE_DYNAMIC = 18", "var_name": "CP_INVOKE_DYNAMIC"}, {"original_string": "private static final int BYTE = 'B';", "modifier": "private static final", "type": "int", "declarator": "BYTE = 'B'", "var_name": "BYTE"}, {"original_string": "private static final int CHAR = 'C';", "modifier": "private static final", "type": "int", "declarator": "CHAR = 'C'", "var_name": "CHAR"}, {"original_string": "private static final int DOUBLE = 'D';", "modifier": "private static final", "type": "int", "declarator": "DOUBLE = 'D'", "var_name": "DOUBLE"}, {"original_string": "private static final int FLOAT = 'F';", "modifier": "private static final", "type": "int", "declarator": "FLOAT = 'F'", "var_name": "FLOAT"}, {"original_string": "private static final int INT = 'I';", "modifier": "private static final", "type": "int", "declarator": "INT = 'I'", "var_name": "INT"}, {"original_string": "private static final int LONG = 'J';", "modifier": "private static final", "type": "int", "declarator": "LONG = 'J'", "var_name": "LONG"}, {"original_string": "private static final int SHORT = 'S';", "modifier": "private static final", "type": "int", "declarator": "SHORT = 'S'", "var_name": "SHORT"}, {"original_string": "private static final int BOOLEAN = 'Z';", "modifier": "private static final", "type": "int", "declarator": "BOOLEAN = 'Z'", "var_name": "BOOLEAN"}, {"original_string": "private static final int STRING = 's';", "modifier": "private static final", "type": "int", "declarator": "STRING = 's'", "var_name": "STRING"}, {"original_string": "private static final int ENUM = 'e';", "modifier": "private static final", "type": "int", "declarator": "ENUM = 'e'", "var_name": "ENUM"}, {"original_string": "private static final int CLASS = 'c';", "modifier": "private static final", "type": "int", "declarator": "CLASS = 'c'", "var_name": "CLASS"}, {"original_string": "private static final int ANNOTATION = '@';", "modifier": "private static final", "type": "int", "declarator": "ANNOTATION = '@'", "var_name": "ANNOTATION"}, {"original_string": "private static final int ARRAY = '[';", "modifier": "private static final", "type": "int", "declarator": "ARRAY = '['", "var_name": "ARRAY"}, {"original_string": "private final ClassFileBuffer cpBuffer = new ClassFileBuffer();", "modifier": "private final", "type": "ClassFileBuffer", "declarator": "cpBuffer = new ClassFileBuffer()", "var_name": "cpBuffer"}, {"original_string": "private final Map<String, Class<? extends Annotation>> annotations;", "modifier": "private final", "type": "Map<String, Class<? extends Annotation>>", "declarator": "annotations", "var_name": "annotations"}, {"original_string": "private TypeReporter typeReporter;", "modifier": "private", "type": "TypeReporter", "declarator": "typeReporter", "var_name": "typeReporter"}, {"original_string": "private FieldReporter fieldReporter;", "modifier": "private", "type": "FieldReporter", "declarator": "fieldReporter", "var_name": "fieldReporter"}, {"original_string": "private MethodReporter methodReporter;", "modifier": "private", "type": "MethodReporter", "declarator": "methodReporter", "var_name": "methodReporter"}, {"original_string": "private String typeName;", "modifier": "private", "type": "String", "declarator": "typeName", "var_name": "typeName"}, {"original_string": "private Object[] constantPool;", "modifier": "private", "type": "Object[]", "declarator": "constantPool", "var_name": "constantPool"}, {"original_string": "private String memberName;", "modifier": "private", "type": "String", "declarator": "memberName", "var_name": "memberName"}], "methods": [{"identifier": "AnnotationDetector", "parameters": "(final Reporter reporter)", "modifiers": "public", "return": "", "signature": " AnnotationDetector(final Reporter reporter)", "full_signature": "public  AnnotationDetector(final Reporter reporter)", "class_method_signature": "AnnotationDetector.AnnotationDetector(final Reporter reporter)", "testcase": false, "constructor": true}, {"identifier": "detect", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void detect()", "full_signature": "public void detect()", "class_method_signature": "AnnotationDetector.detect()", "testcase": false, "constructor": false}, {"identifier": "detect", "parameters": "(final String... packageNames)", "modifiers": "public", "return": "void", "signature": "void detect(final String... packageNames)", "full_signature": "public void detect(final String... packageNames)", "class_method_signature": "AnnotationDetector.detect(final String... packageNames)", "testcase": false, "constructor": false}, {"identifier": "detect", "parameters": "(final File... filesOrDirectories)", "modifiers": "public", "return": "void", "signature": "void detect(final File... filesOrDirectories)", "full_signature": "public void detect(final File... filesOrDirectories)", "class_method_signature": "AnnotationDetector.detect(final File... filesOrDirectories)", "testcase": false, "constructor": false}, {"identifier": "toFile", "parameters": "(final URL url)", "modifiers": "private", "return": "File", "signature": "File toFile(final URL url)", "full_signature": "private File toFile(final URL url)", "class_method_signature": "AnnotationDetector.toFile(final URL url)", "testcase": false, "constructor": false}, {"identifier": "openJarURLConnection", "parameters": "(final URL url)", "modifiers": "private", "return": "JarURLConnection", "signature": "JarURLConnection openJarURLConnection(final URL url)", "full_signature": "private JarURLConnection openJarURLConnection(final URL url)", "class_method_signature": "AnnotationDetector.openJarURLConnection(final URL url)", "testcase": false, "constructor": false}, {"identifier": "detect", "parameters": "(final ResourceIterator iterator)", "modifiers": "@SuppressWarnings(\"illegalcatch\") private", "return": "void", "signature": "void detect(final ResourceIterator iterator)", "full_signature": "@SuppressWarnings(\"illegalcatch\") private void detect(final ResourceIterator iterator)", "class_method_signature": "AnnotationDetector.detect(final ResourceIterator iterator)", "testcase": false, "constructor": false}, {"identifier": "hasCafebabe", "parameters": "(final ClassFileBuffer buffer)", "modifiers": "private", "return": "boolean", "signature": "boolean hasCafebabe(final ClassFileBuffer buffer)", "full_signature": "private boolean hasCafebabe(final ClassFileBuffer buffer)", "class_method_signature": "AnnotationDetector.hasCafebabe(final ClassFileBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "detect", "parameters": "(final DataInput di)", "modifiers": "private", "return": "void", "signature": "void detect(final DataInput di)", "full_signature": "private void detect(final DataInput di)", "class_method_signature": "AnnotationDetector.detect(final DataInput di)", "testcase": false, "constructor": false}, {"identifier": "readVersion", "parameters": "(final DataInput di)", "modifiers": "private", "return": "void", "signature": "void readVersion(final DataInput di)", "full_signature": "private void readVersion(final DataInput di)", "class_method_signature": "AnnotationDetector.readVersion(final DataInput di)", "testcase": false, "constructor": false}, {"identifier": "readConstantPoolEntries", "parameters": "(final DataInput di)", "modifiers": "private", "return": "void", "signature": "void readConstantPoolEntries(final DataInput di)", "full_signature": "private void readConstantPoolEntries(final DataInput di)", "class_method_signature": "AnnotationDetector.readConstantPoolEntries(final DataInput di)", "testcase": false, "constructor": false}, {"identifier": "readConstantPoolEntry", "parameters": "(final DataInput di, final int index)", "modifiers": "private", "return": "boolean", "signature": "boolean readConstantPoolEntry(final DataInput di, final int index)", "full_signature": "private boolean readConstantPoolEntry(final DataInput di, final int index)", "class_method_signature": "AnnotationDetector.readConstantPoolEntry(final DataInput di, final int index)", "testcase": false, "constructor": false}, {"identifier": "readAccessFlags", "parameters": "(final DataInput di)", "modifiers": "private", "return": "void", "signature": "void readAccessFlags(final DataInput di)", "full_signature": "private void readAccessFlags(final DataInput di)", "class_method_signature": "AnnotationDetector.readAccessFlags(final DataInput di)", "testcase": false, "constructor": false}, {"identifier": "readThisClass", "parameters": "(final DataInput di)", "modifiers": "private", "return": "void", "signature": "void readThisClass(final DataInput di)", "full_signature": "private void readThisClass(final DataInput di)", "class_method_signature": "AnnotationDetector.readThisClass(final DataInput di)", "testcase": false, "constructor": false}, {"identifier": "readSuperClass", "parameters": "(final DataInput di)", "modifiers": "private", "return": "void", "signature": "void readSuperClass(final DataInput di)", "full_signature": "private void readSuperClass(final DataInput di)", "class_method_signature": "AnnotationDetector.readSuperClass(final DataInput di)", "testcase": false, "constructor": false}, {"identifier": "readInterfaces", "parameters": "(final DataInput di)", "modifiers": "private", "return": "void", "signature": "void readInterfaces(final DataInput di)", "full_signature": "private void readInterfaces(final DataInput di)", "class_method_signature": "AnnotationDetector.readInterfaces(final DataInput di)", "testcase": false, "constructor": false}, {"identifier": "readFields", "parameters": "(final DataInput di)", "modifiers": "private", "return": "void", "signature": "void readFields(final DataInput di)", "full_signature": "private void readFields(final DataInput di)", "class_method_signature": "AnnotationDetector.readFields(final DataInput di)", "testcase": false, "constructor": false}, {"identifier": "readMethods", "parameters": "(final DataInput di)", "modifiers": "private", "return": "void", "signature": "void readMethods(final DataInput di)", "full_signature": "private void readMethods(final DataInput di)", "class_method_signature": "AnnotationDetector.readMethods(final DataInput di)", "testcase": false, "constructor": false}, {"identifier": "readAttributes", "parameters": "(final DataInput di, final char reporterType,\n                                final boolean skipReporting)", "modifiers": "private", "return": "void", "signature": "void readAttributes(final DataInput di, final char reporterType,\n                                final boolean skipReporting)", "full_signature": "private void readAttributes(final DataInput di, final char reporterType,\n                                final boolean skipReporting)", "class_method_signature": "AnnotationDetector.readAttributes(final DataInput di, final char reporterType,\n                                final boolean skipReporting)", "testcase": false, "constructor": false}, {"identifier": "readAnnotations", "parameters": "(final DataInput di, final char reporterType)", "modifiers": "private", "return": "void", "signature": "void readAnnotations(final DataInput di, final char reporterType)", "full_signature": "private void readAnnotations(final DataInput di, final char reporterType)", "class_method_signature": "AnnotationDetector.readAnnotations(final DataInput di, final char reporterType)", "testcase": false, "constructor": false}, {"identifier": "readAnnotation", "parameters": "(final DataInput di)", "modifiers": "private", "return": "String", "signature": "String readAnnotation(final DataInput di)", "full_signature": "private String readAnnotation(final DataInput di)", "class_method_signature": "AnnotationDetector.readAnnotation(final DataInput di)", "testcase": false, "constructor": false}, {"identifier": "readAnnotationElementValue", "parameters": "(final DataInput di)", "modifiers": "private", "return": "void", "signature": "void readAnnotationElementValue(final DataInput di)", "full_signature": "private void readAnnotationElementValue(final DataInput di)", "class_method_signature": "AnnotationDetector.readAnnotationElementValue(final DataInput di)", "testcase": false, "constructor": false}, {"identifier": "resolveUtf8", "parameters": "(final DataInput di)", "modifiers": "private", "return": "String", "signature": "String resolveUtf8(final DataInput di)", "full_signature": "private String resolveUtf8(final DataInput di)", "class_method_signature": "AnnotationDetector.resolveUtf8(final DataInput di)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(final String message, final Object... args)", "modifiers": "@SuppressWarnings(\"regexpsinglelinejava\") private static", "return": "void", "signature": "void print(final String message, final Object... args)", "full_signature": "@SuppressWarnings(\"regexpsinglelinejava\") private static void print(final String message, final Object... args)", "class_method_signature": "AnnotationDetector.print(final String message, final Object... args)", "testcase": false, "constructor": false}], "file": "aesh/src/main/java/org/aesh/io/scanner/AnnotationDetector.java"}, "focal_method": {"identifier": "AnnotationDetector", "parameters": "(final Reporter reporter)", "modifiers": "public", "return": "", "body": "public AnnotationDetector(final Reporter reporter) {\n        final Class<? extends Annotation>[] a = reporter.annotations();\n        annotations = new HashMap<>(a.length);\n        // map \"raw\" type names to Class object\n        for (int i = 0; i < a.length; ++i) {\n            annotations.put(\"L\" + a[i].getName().replace('.', '/') + \";\", a[i]);\n        }\n        if (reporter instanceof TypeReporter) {\n            typeReporter = (TypeReporter)reporter;\n        }\n        if (reporter instanceof FieldReporter) {\n            fieldReporter = (FieldReporter)reporter;\n        }\n        if (reporter instanceof MethodReporter) {\n            methodReporter = (MethodReporter)reporter;\n        }\n        if (typeReporter == null && fieldReporter == null && methodReporter == null) {\n            throw new AssertionError(\"No reporter defined\");\n        }\n    }", "signature": " AnnotationDetector(final Reporter reporter)", "full_signature": "public  AnnotationDetector(final Reporter reporter)", "class_method_signature": "AnnotationDetector.AnnotationDetector(final Reporter reporter)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 2280644, "url": "https://github.com/aeshell/aesh", "language": "Java", "is_fork": false, "fork_count": 62, "stargazer_count": 83, "size": 6068, "license": "licensed"}}