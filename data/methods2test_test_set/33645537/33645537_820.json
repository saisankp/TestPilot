{"test_class": {"identifier": "RxJavaPluginsTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/plugins/RxJavaPluginsTest.java"}, "test_case": {"identifier": "testErrorHandlerViaProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testErrorHandlerViaProperty() {\n        try {\n            RxJavaPlugins p = new RxJavaPlugins();\n            String fullClass = getFullClassNameForTestClass(RxJavaErrorHandlerTestImpl.class);\n            System.setProperty(\"rxjava.plugin.RxJavaErrorHandler.implementation\", fullClass);\n            RxJavaErrorHandler impl = p.getErrorHandler();\n            assertTrue(impl instanceof RxJavaErrorHandlerTestImpl);\n        } finally {\n            System.clearProperty(\"rxjava.plugin.RxJavaErrorHandler.implementation\");\n        }\n    }", "signature": "void testErrorHandlerViaProperty()", "full_signature": "@Test public void testErrorHandlerViaProperty()", "class_method_signature": "RxJavaPluginsTest.testErrorHandlerViaProperty()", "testcase": true, "constructor": false, "invocations": ["getFullClassNameForTestClass", "setProperty", "getErrorHandler", "assertTrue", "clearProperty"]}, "focal_class": {"identifier": "RxJavaPlugins", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static RxJavaPlugins INSTANCE = new RxJavaPlugins();", "modifier": "private final static", "type": "RxJavaPlugins", "declarator": "INSTANCE = new RxJavaPlugins()", "var_name": "INSTANCE"}, {"original_string": "private final AtomicReference<RxJavaErrorHandler> errorHandler = new AtomicReference<RxJavaErrorHandler>();", "modifier": "private final", "type": "AtomicReference<RxJavaErrorHandler>", "declarator": "errorHandler = new AtomicReference<RxJavaErrorHandler>()", "var_name": "errorHandler"}, {"original_string": "private final AtomicReference<RxJavaObservableExecutionHook> observableExecutionHook = new AtomicReference<RxJavaObservableExecutionHook>();", "modifier": "private final", "type": "AtomicReference<RxJavaObservableExecutionHook>", "declarator": "observableExecutionHook = new AtomicReference<RxJavaObservableExecutionHook>()", "var_name": "observableExecutionHook"}, {"original_string": "private final AtomicReference<RxJavaSchedulersHook> schedulersHook = new AtomicReference<RxJavaSchedulersHook>();", "modifier": "private final", "type": "AtomicReference<RxJavaSchedulersHook>", "declarator": "schedulersHook = new AtomicReference<RxJavaSchedulersHook>()", "var_name": "schedulersHook"}, {"original_string": "static final RxJavaErrorHandler DEFAULT_ERROR_HANDLER = new RxJavaErrorHandler() {\n    };", "modifier": "static final", "type": "RxJavaErrorHandler", "declarator": "DEFAULT_ERROR_HANDLER = new RxJavaErrorHandler() {\n    }", "var_name": "DEFAULT_ERROR_HANDLER"}], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "RxJavaPlugins", "signature": "RxJavaPlugins getInstance()", "full_signature": "public static RxJavaPlugins getInstance()", "class_method_signature": "RxJavaPlugins.getInstance()", "testcase": false, "constructor": false}, {"identifier": "RxJavaPlugins", "parameters": "()", "modifiers": "", "return": "", "signature": " RxJavaPlugins()", "full_signature": "  RxJavaPlugins()", "class_method_signature": "RxJavaPlugins.RxJavaPlugins()", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "", "return": "void", "signature": "void reset()", "full_signature": " void reset()", "class_method_signature": "RxJavaPlugins.reset()", "testcase": false, "constructor": false}, {"identifier": "getErrorHandler", "parameters": "()", "modifiers": "public", "return": "RxJavaErrorHandler", "signature": "RxJavaErrorHandler getErrorHandler()", "full_signature": "public RxJavaErrorHandler getErrorHandler()", "class_method_signature": "RxJavaPlugins.getErrorHandler()", "testcase": false, "constructor": false}, {"identifier": "registerErrorHandler", "parameters": "(RxJavaErrorHandler impl)", "modifiers": "public", "return": "void", "signature": "void registerErrorHandler(RxJavaErrorHandler impl)", "full_signature": "public void registerErrorHandler(RxJavaErrorHandler impl)", "class_method_signature": "RxJavaPlugins.registerErrorHandler(RxJavaErrorHandler impl)", "testcase": false, "constructor": false}, {"identifier": "getObservableExecutionHook", "parameters": "()", "modifiers": "public", "return": "RxJavaObservableExecutionHook", "signature": "RxJavaObservableExecutionHook getObservableExecutionHook()", "full_signature": "public RxJavaObservableExecutionHook getObservableExecutionHook()", "class_method_signature": "RxJavaPlugins.getObservableExecutionHook()", "testcase": false, "constructor": false}, {"identifier": "registerObservableExecutionHook", "parameters": "(RxJavaObservableExecutionHook impl)", "modifiers": "public", "return": "void", "signature": "void registerObservableExecutionHook(RxJavaObservableExecutionHook impl)", "full_signature": "public void registerObservableExecutionHook(RxJavaObservableExecutionHook impl)", "class_method_signature": "RxJavaPlugins.registerObservableExecutionHook(RxJavaObservableExecutionHook impl)", "testcase": false, "constructor": false}, {"identifier": "getPluginImplementationViaProperty", "parameters": "(Class<?> pluginClass)", "modifiers": "private static", "return": "Object", "signature": "Object getPluginImplementationViaProperty(Class<?> pluginClass)", "full_signature": "private static Object getPluginImplementationViaProperty(Class<?> pluginClass)", "class_method_signature": "RxJavaPlugins.getPluginImplementationViaProperty(Class<?> pluginClass)", "testcase": false, "constructor": false}, {"identifier": "getSchedulersHook", "parameters": "()", "modifiers": "public", "return": "RxJavaSchedulersHook", "signature": "RxJavaSchedulersHook getSchedulersHook()", "full_signature": "public RxJavaSchedulersHook getSchedulersHook()", "class_method_signature": "RxJavaPlugins.getSchedulersHook()", "testcase": false, "constructor": false}, {"identifier": "registerSchedulersHook", "parameters": "(RxJavaSchedulersHook impl)", "modifiers": "public", "return": "void", "signature": "void registerSchedulersHook(RxJavaSchedulersHook impl)", "full_signature": "public void registerSchedulersHook(RxJavaSchedulersHook impl)", "class_method_signature": "RxJavaPlugins.registerSchedulersHook(RxJavaSchedulersHook impl)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/plugins/RxJavaPlugins.java"}, "focal_method": {"identifier": "getErrorHandler", "parameters": "()", "modifiers": "public", "return": "RxJavaErrorHandler", "body": "public RxJavaErrorHandler getErrorHandler() {\n        if (errorHandler.get() == null) {\n            // check for an implementation from System.getProperty first\n            Object impl = getPluginImplementationViaProperty(RxJavaErrorHandler.class);\n            if (impl == null) {\n                // nothing set via properties so initialize with default \n                errorHandler.compareAndSet(null, DEFAULT_ERROR_HANDLER);\n                // we don't return from here but call get() again in case of thread-race so the winner will always get returned\n            } else {\n                // we received an implementation from the system property so use it\n                errorHandler.compareAndSet(null, (RxJavaErrorHandler) impl);\n            }\n        }\n        return errorHandler.get();\n    }", "signature": "RxJavaErrorHandler getErrorHandler()", "full_signature": "public RxJavaErrorHandler getErrorHandler()", "class_method_signature": "RxJavaPlugins.getErrorHandler()", "testcase": false, "constructor": false, "invocations": ["get", "getPluginImplementationViaProperty", "compareAndSet", "compareAndSet", "get"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}