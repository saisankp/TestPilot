{"test_class": {"identifier": "SingleGroupAddressHolderTest", "superclass": "", "interfaces": "", "fields": [], "file": "core-impl/client/src/test/java/com/alipay/sofa/rpc/client/SingleGroupAddressHolderTest.java"}, "test_case": {"identifier": "getProviders", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getProviders() throws Exception {\n        SingleGroupAddressHolder addressHolder = new SingleGroupAddressHolder(null);\n        Assert.assertTrue(ProviderHelper.isEmpty(addressHolder.getProviderGroup(null)));\n        Assert.assertTrue(ProviderHelper.isEmpty(addressHolder.getProviderGroup(StringUtils.EMPTY)));\n        Assert.assertTrue(ProviderHelper.isEmpty(addressHolder.getProviderGroup(ADDRESS_DEFAULT_GROUP)));\n\n        addressHolder.registryGroup.add(ProviderHelper.toProviderInfo(\"127.0.0.1:12200\"));\n        addressHolder.registryGroup.add(ProviderHelper.toProviderInfo(\"127.0.0.1:12201\"));\n\n        Assert.assertTrue(addressHolder.getProviderGroup(null).size() == 2);\n        Assert.assertTrue(addressHolder.getProviderGroup(StringUtils.EMPTY).size() == 2);\n        Assert.assertTrue(addressHolder.getProviderGroup(ADDRESS_DEFAULT_GROUP).size() == 2);\n\n        addressHolder.directUrlGroup.add(ProviderHelper.toProviderInfo(\"127.0.0.1:12200\"));\n\n        Assert.assertTrue(addressHolder.getProviderGroup(ADDRESS_DIRECT_GROUP).size() == 1);\n        Assert.assertTrue(addressHolder.getProviderGroup(null).size() == 2);\n        Assert.assertTrue(addressHolder.getProviderGroup(StringUtils.EMPTY).size() == 2);\n        Assert.assertTrue(addressHolder.getProviderGroup(ADDRESS_DEFAULT_GROUP).size() == 2);\n    }", "signature": "void getProviders()", "full_signature": "@Test public void getProviders()", "class_method_signature": "SingleGroupAddressHolderTest.getProviders()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isEmpty", "getProviderGroup", "assertTrue", "isEmpty", "getProviderGroup", "assertTrue", "isEmpty", "getProviderGroup", "add", "toProviderInfo", "add", "toProviderInfo", "assertTrue", "size", "getProviderGroup", "assertTrue", "size", "getProviderGroup", "assertTrue", "size", "getProviderGroup", "add", "toProviderInfo", "assertTrue", "size", "getProviderGroup", "assertTrue", "size", "getProviderGroup", "assertTrue", "size", "getProviderGroup", "assertTrue", "size", "getProviderGroup"]}, "focal_class": {"identifier": "SingleGroupAddressHolder", "superclass": "extends AddressHolder", "interfaces": "", "fields": [{"original_string": "protected ProviderGroup        directUrlGroup;", "modifier": "protected", "type": "ProviderGroup", "declarator": "directUrlGroup", "var_name": "directUrlGroup"}, {"original_string": "protected ProviderGroup        registryGroup;", "modifier": "protected", "type": "ProviderGroup", "declarator": "registryGroup", "var_name": "registryGroup"}, {"original_string": "private ReentrantReadWriteLock lock  = new ReentrantReadWriteLock();", "modifier": "private", "type": "ReentrantReadWriteLock", "declarator": "lock  = new ReentrantReadWriteLock()", "var_name": "lock"}, {"original_string": "private Lock                   rLock = lock.readLock();", "modifier": "private", "type": "Lock", "declarator": "rLock = lock.readLock()", "var_name": "rLock"}, {"original_string": "private Lock                   wLock = lock.writeLock();", "modifier": "private", "type": "Lock", "declarator": "wLock = lock.writeLock()", "var_name": "wLock"}], "methods": [{"identifier": "SingleGroupAddressHolder", "parameters": "(ConsumerBootstrap consumerBootstrap)", "modifiers": "protected", "return": "", "signature": " SingleGroupAddressHolder(ConsumerBootstrap consumerBootstrap)", "full_signature": "protected  SingleGroupAddressHolder(ConsumerBootstrap consumerBootstrap)", "class_method_signature": "SingleGroupAddressHolder.SingleGroupAddressHolder(ConsumerBootstrap consumerBootstrap)", "testcase": false, "constructor": true}, {"identifier": "getProviderInfos", "parameters": "(String groupName)", "modifiers": "@Override public", "return": "List<ProviderInfo>", "signature": "List<ProviderInfo> getProviderInfos(String groupName)", "full_signature": "@Override public List<ProviderInfo> getProviderInfos(String groupName)", "class_method_signature": "SingleGroupAddressHolder.getProviderInfos(String groupName)", "testcase": false, "constructor": false}, {"identifier": "getProviderGroup", "parameters": "(String groupName)", "modifiers": "@Override public", "return": "ProviderGroup", "signature": "ProviderGroup getProviderGroup(String groupName)", "full_signature": "@Override public ProviderGroup getProviderGroup(String groupName)", "class_method_signature": "SingleGroupAddressHolder.getProviderGroup(String groupName)", "testcase": false, "constructor": false}, {"identifier": "getProviderGroups", "parameters": "()", "modifiers": "@Override public", "return": "List<ProviderGroup>", "signature": "List<ProviderGroup> getProviderGroups()", "full_signature": "@Override public List<ProviderGroup> getProviderGroups()", "class_method_signature": "SingleGroupAddressHolder.getProviderGroups()", "testcase": false, "constructor": false}, {"identifier": "getAllProviderSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getAllProviderSize()", "full_signature": "@Override public int getAllProviderSize()", "class_method_signature": "SingleGroupAddressHolder.getAllProviderSize()", "testcase": false, "constructor": false}, {"identifier": "addProvider", "parameters": "(ProviderGroup providerGroup)", "modifiers": "@Override public", "return": "void", "signature": "void addProvider(ProviderGroup providerGroup)", "full_signature": "@Override public void addProvider(ProviderGroup providerGroup)", "class_method_signature": "SingleGroupAddressHolder.addProvider(ProviderGroup providerGroup)", "testcase": false, "constructor": false}, {"identifier": "removeProvider", "parameters": "(ProviderGroup providerGroup)", "modifiers": "@Override public", "return": "void", "signature": "void removeProvider(ProviderGroup providerGroup)", "full_signature": "@Override public void removeProvider(ProviderGroup providerGroup)", "class_method_signature": "SingleGroupAddressHolder.removeProvider(ProviderGroup providerGroup)", "testcase": false, "constructor": false}, {"identifier": "updateProviders", "parameters": "(ProviderGroup providerGroup)", "modifiers": "@Override public", "return": "void", "signature": "void updateProviders(ProviderGroup providerGroup)", "full_signature": "@Override public void updateProviders(ProviderGroup providerGroup)", "class_method_signature": "SingleGroupAddressHolder.updateProviders(ProviderGroup providerGroup)", "testcase": false, "constructor": false}, {"identifier": "updateAllProviders", "parameters": "(List<ProviderGroup> providerGroups)", "modifiers": "@Override public", "return": "void", "signature": "void updateAllProviders(List<ProviderGroup> providerGroups)", "full_signature": "@Override public void updateAllProviders(List<ProviderGroup> providerGroups)", "class_method_signature": "SingleGroupAddressHolder.updateAllProviders(List<ProviderGroup> providerGroups)", "testcase": false, "constructor": false}], "file": "core-impl/client/src/main/java/com/alipay/sofa/rpc/client/SingleGroupAddressHolder.java"}, "focal_method": {"identifier": "getProviderGroup", "parameters": "(String groupName)", "modifiers": "@Override public", "return": "ProviderGroup", "body": "@Override\n    public ProviderGroup getProviderGroup(String groupName) {\n        rLock.lock();\n        try {\n            return RpcConstants.ADDRESS_DIRECT_GROUP.equals(groupName) ? directUrlGroup\n                : registryGroup;\n        } finally {\n            rLock.unlock();\n        }\n    }", "signature": "ProviderGroup getProviderGroup(String groupName)", "full_signature": "@Override public ProviderGroup getProviderGroup(String groupName)", "class_method_signature": "SingleGroupAddressHolder.getProviderGroup(String groupName)", "testcase": false, "constructor": false, "invocations": ["lock", "equals", "unlock"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}