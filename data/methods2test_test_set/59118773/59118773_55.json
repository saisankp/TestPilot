{"test_class": {"identifier": "TendersAwardsYearsTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TendersAwardsYears tendersAwardsYears;", "modifier": "@Autowired\n    private", "type": "TendersAwardsYears", "declarator": "tendersAwardsYears", "var_name": "tendersAwardsYears"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/TendersAwardsYearsTest.java"}, "test_case": {"identifier": "tendersAwardsYears", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void tendersAwardsYears() throws Exception {\n        final List<Document> response = tendersAwardsYears.tendersAwardsYears();\n\n        final Document first = response.get(0);\n        int year = (int) first.get(Fields.UNDERSCORE_ID);\n        Assert.assertEquals(2014, year);\n\n        final Document second = response.get(1);\n        year = (int) second.get(Fields.UNDERSCORE_ID);\n        Assert.assertEquals(2015, year);\n\n        final Document third = response.get(2);\n        year = (int) third.get(Fields.UNDERSCORE_ID);\n        Assert.assertEquals(2016, year);\n    }", "signature": "void tendersAwardsYears()", "full_signature": "@Test public void tendersAwardsYears()", "class_method_signature": "TendersAwardsYearsTest.tendersAwardsYears()", "testcase": true, "constructor": false, "invocations": ["tendersAwardsYears", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals"]}, "focal_class": {"identifier": "TendersAwardsYears", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [], "methods": [{"identifier": "tendersAwardsYears", "parameters": "()", "modifiers": "@ApiOperation(value = \"Computes all available years from awards.date, tender.tenderPeriod.startDate\") @RequestMapping(value = \"/api/tendersAwardsYears\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> tendersAwardsYears()", "full_signature": "@ApiOperation(value = \"Computes all available years from awards.date, tender.tenderPeriod.startDate\") @RequestMapping(value = \"/api/tendersAwardsYears\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> tendersAwardsYears()", "class_method_signature": "TendersAwardsYears.tendersAwardsYears()", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/TendersAwardsYears.java"}, "focal_method": {"identifier": "tendersAwardsYears", "parameters": "()", "modifiers": "@ApiOperation(value = \"Computes all available years from awards.date, tender.tenderPeriod.startDate\") @RequestMapping(value = \"/api/tendersAwardsYears\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "body": "@ApiOperation(value = \"Computes all available years from awards.date, tender.tenderPeriod.startDate\")\n    @RequestMapping(value = \"/api/tendersAwardsYears\", method = {RequestMethod.POST,\n            RequestMethod.GET}, produces = \"application/json\")\n    public List<Document> tendersAwardsYears() {\n\n        BasicDBObject project1 = new BasicDBObject();\n\n        project1.put(\n                \"tenderYear\",\n                new BasicDBObject(\n                        \"$cond\",\n                        Arrays.asList(\n                                new BasicDBObject(\n                                        \"$gt\",\n                                        Arrays.asList(ref(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE), null)\n                                ),\n                                new BasicDBObject(\"$year\", ref(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE)),\n                                null\n                        )\n                )\n        );\n\n        project1.put(\n                \"awardYear\",\n                new BasicDBObject(\"$cond\", Arrays.asList(\n                        new BasicDBObject(\"$gt\", Arrays.asList(ref(MongoConstants.FieldNames.AWARDS_DATE), null)),\n                        new BasicDBObject(\"$year\", ref(MongoConstants.FieldNames.AWARDS_DATE)), null\n                ))\n        );\n        project1.put(Fields.UNDERSCORE_ID, 0);\n\n        BasicDBObject project2 = new BasicDBObject();\n        project2.put(\"year\", Arrays.asList(\"$tenderYear\", \"$awardYear\"));\n\n        Aggregation agg = Aggregation.newAggregation(\n                project().and(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE)\n                        .as(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE)\n                        .and(MongoConstants.FieldNames.AWARDS_DATE)\n                        .as(MongoConstants.FieldNames.AWARDS_DATE),\n                match(new Criteria().orOperator(\n                        where(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE).exists(true),\n                        where(MongoConstants.FieldNames.AWARDS_DATE).exists(true)\n                )),\n                new CustomUnwindOperation(\"$awards\", true), new CustomProjectionOperation(project1),\n                new CustomProjectionOperation(project2), new CustomUnwindOperation(\"$year\"),\n                match(where(\"year\").ne(null)),\n                new CustomGroupingOperation(new BasicDBObject(Fields.UNDERSCORE_ID, \"$year\")),\n                new CustomSortingOperation(new BasicDBObject(Fields.UNDERSCORE_ID, 1))\n        );\n\n        return releaseAgg(agg);\n    }", "signature": "List<Document> tendersAwardsYears()", "full_signature": "@ApiOperation(value = \"Computes all available years from awards.date, tender.tenderPeriod.startDate\") @RequestMapping(value = \"/api/tendersAwardsYears\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> tendersAwardsYears()", "class_method_signature": "TendersAwardsYears.tendersAwardsYears()", "testcase": false, "constructor": false, "invocations": ["put", "asList", "asList", "ref", "ref", "put", "asList", "asList", "ref", "ref", "put", "put", "asList", "newAggregation", "as", "and", "as", "and", "project", "match", "orOperator", "exists", "where", "exists", "where", "match", "ne", "where", "releaseAgg"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}