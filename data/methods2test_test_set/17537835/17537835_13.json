{"test_class": {"identifier": "SecurityDelegatingHttpContextTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected HttpContext defaultHttpContext;", "modifier": "protected", "type": "HttpContext", "declarator": "defaultHttpContext", "var_name": "defaultHttpContext"}, {"original_string": "protected SecurityDelegatingHttpContext httpContext;", "modifier": "protected", "type": "SecurityDelegatingHttpContext", "declarator": "httpContext", "var_name": "httpContext"}, {"original_string": "protected CommitResponseFilter commitFilter;", "modifier": "protected", "type": "CommitResponseFilter", "declarator": "commitFilter", "var_name": "commitFilter"}, {"original_string": "protected DoNothingFilter doNothingFilter;", "modifier": "protected", "type": "DoNothingFilter", "declarator": "doNothingFilter", "var_name": "doNothingFilter"}, {"original_string": "protected AccessDeniedFilter accessDeniedFilter;", "modifier": "protected", "type": "AccessDeniedFilter", "declarator": "accessDeniedFilter", "var_name": "accessDeniedFilter"}, {"original_string": "protected String mimeType;", "modifier": "protected", "type": "String", "declarator": "mimeType", "var_name": "mimeType"}, {"original_string": "protected URL url;", "modifier": "protected", "type": "URL", "declarator": "url", "var_name": "url"}], "file": "common/src/test/java/org/apache/cxf/dosgi/common/httpservice/SecurityDelegatingHttpContextTest.java"}, "test_case": {"identifier": "testAllowRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAllowRequest() throws Exception {\n        // Mock up the service references\n        ServiceReference filterReference = EasyMock.createNiceMock(ServiceReference.class);\n        EasyMock.replay(filterReference);\n        ServiceReference[] serviceReferences = {filterReference};\n\n        // Mock up the bundle context\n        BundleContext bundleContext = EasyMock.createNiceMock(BundleContext.class);\n        EasyMock.expect(bundleContext.getServiceReferences((String)EasyMock.anyObject(), (String)EasyMock.anyObject()))\n            .andReturn(serviceReferences);\n        EasyMock.expect(bundleContext.getService((ServiceReference)EasyMock.anyObject())).andReturn(doNothingFilter);\n        EasyMock.replay(bundleContext);\n\n        // Set up the secure http context\n        httpContext = new SecurityDelegatingHttpContext(bundleContext, defaultHttpContext);\n\n        // Ensure that the httpContext returns true, since the filter has not committed the response\n        HttpServletRequest request = EasyMock.createNiceMock(HttpServletRequest.class);\n        EasyMock.replay(request);\n        HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n        EasyMock.expect(response.isCommitted()).andReturn(false);\n        EasyMock.replay(response);\n        assertTrue(httpContext.handleSecurity(request, response));\n\n        // Ensure that the appropriate filters were called\n        assertTrue(doNothingFilter.called);\n        assertFalse(commitFilter.called);\n        assertFalse(accessDeniedFilter.called);\n    }", "signature": "void testAllowRequest()", "full_signature": "@Test public void testAllowRequest()", "class_method_signature": "SecurityDelegatingHttpContextTest.testAllowRequest()", "testcase": true, "constructor": false, "invocations": ["createNiceMock", "replay", "createNiceMock", "andReturn", "expect", "getServiceReferences", "anyObject", "anyObject", "andReturn", "expect", "getService", "anyObject", "replay", "createNiceMock", "replay", "createNiceMock", "andReturn", "expect", "isCommitted", "replay", "assertTrue", "handleSecurity", "assertTrue", "assertFalse", "assertFalse"]}, "focal_class": {"identifier": "SecurityDelegatingHttpContext", "superclass": "", "interfaces": "implements HttpContext", "fields": [{"original_string": "public static final String FILTER_PROP = \"org.apache.cxf.httpservice.filter\";", "modifier": "public static final", "type": "String", "declarator": "FILTER_PROP = \"org.apache.cxf.httpservice.filter\"", "var_name": "FILTER_PROP"}, {"original_string": "public static final String FILTER_REQUIRED_PROP = \"org.apache.cxf.httpservice.requirefilter\";", "modifier": "public static final", "type": "String", "declarator": "FILTER_REQUIRED_PROP = \"org.apache.cxf.httpservice.requirefilter\"", "var_name": "FILTER_REQUIRED_PROP"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SecurityDelegatingHttpContext.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SecurityDelegatingHttpContext.class)", "var_name": "LOG"}, {"original_string": "private static final String FILTER_FILTER = \"(\" + FILTER_PROP + \"=*)\";", "modifier": "private static final", "type": "String", "declarator": "FILTER_FILTER = \"(\" + FILTER_PROP + \"=*)\"", "var_name": "FILTER_FILTER"}, {"original_string": "BundleContext bundleContext;", "modifier": "", "type": "BundleContext", "declarator": "bundleContext", "var_name": "bundleContext"}, {"original_string": "HttpContext delegate;", "modifier": "", "type": "HttpContext", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "boolean requireFilter;", "modifier": "", "type": "boolean", "declarator": "requireFilter", "var_name": "requireFilter"}], "methods": [{"identifier": "SecurityDelegatingHttpContext", "parameters": "(BundleContext bundleContext, HttpContext delegate)", "modifiers": "", "return": "", "signature": " SecurityDelegatingHttpContext(BundleContext bundleContext, HttpContext delegate)", "full_signature": "  SecurityDelegatingHttpContext(BundleContext bundleContext, HttpContext delegate)", "class_method_signature": "SecurityDelegatingHttpContext.SecurityDelegatingHttpContext(BundleContext bundleContext, HttpContext delegate)", "testcase": false, "constructor": true}, {"identifier": "getMimeType", "parameters": "(String name)", "modifiers": "@Override public", "return": "String", "signature": "String getMimeType(String name)", "full_signature": "@Override public String getMimeType(String name)", "class_method_signature": "SecurityDelegatingHttpContext.getMimeType(String name)", "testcase": false, "constructor": false}, {"identifier": "getResource", "parameters": "(String name)", "modifiers": "@Override public", "return": "URL", "signature": "URL getResource(String name)", "full_signature": "@Override public URL getResource(String name)", "class_method_signature": "SecurityDelegatingHttpContext.getResource(String name)", "testcase": false, "constructor": false}, {"identifier": "handleSecurity", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "@Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public", "return": "boolean", "signature": "boolean handleSecurity(HttpServletRequest request, HttpServletResponse response)", "full_signature": "@Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public boolean handleSecurity(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "SecurityDelegatingHttpContext.handleSecurity(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/apache/cxf/dosgi/common/httpservice/SecurityDelegatingHttpContext.java"}, "focal_method": {"identifier": "handleSecurity", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "@Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public", "return": "boolean", "body": "@Override\n    @SuppressWarnings({\n     \"unchecked\", \"rawtypes\"\n    })\n    public boolean handleSecurity(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        ServiceReference[] refs;\n        try {\n            refs = bundleContext.getServiceReferences(Filter.class.getName(), FILTER_FILTER);\n        } catch (InvalidSyntaxException e) {\n            LOG.warn(e.getMessage(), e);\n            return false;\n        }\n        if (refs == null || refs.length == 0) {\n            LOG.info(\"No filter registered.\");\n            return !requireFilter;\n        }\n        Filter[] filters = new Filter[refs.length];\n        try {\n            for (int i = 0; i < refs.length; i++) {\n                filters[i] = (Filter)bundleContext.getService(refs[i]);\n            }\n            try {\n                new Chain(filters).doFilter(request, response);\n                return !response.isCommitted();\n            } catch (ServletException e) {\n                LOG.warn(e.getMessage(), e);\n                return false;\n            }\n        } finally {\n            for (int i = 0; i < refs.length; i++) {\n                if (filters[i] != null) {\n                    bundleContext.ungetService(refs[i]);\n                }\n            }\n        }\n    }", "signature": "boolean handleSecurity(HttpServletRequest request, HttpServletResponse response)", "full_signature": "@Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public boolean handleSecurity(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "SecurityDelegatingHttpContext.handleSecurity(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["getServiceReferences", "getName", "warn", "getMessage", "info", "getService", "doFilter", "isCommitted", "warn", "getMessage", "ungetService"]}, "repository": {"repo_id": 17537835, "url": "https://github.com/apache/cxf-dosgi", "language": "Java", "is_fork": false, "fork_count": 27, "stargazer_count": 26, "size": 3444, "license": "licensed"}}