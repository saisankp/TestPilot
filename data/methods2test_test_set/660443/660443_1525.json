{"test_class": {"identifier": "ChiIndexUtilsTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "DefaultChemObjectBuilder builder;", "modifier": "", "type": "DefaultChemObjectBuilder", "declarator": "builder", "var_name": "builder"}], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/ChiIndexUtilsTest.java"}, "test_case": {"identifier": "testDeltaVSulphurSO", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeltaVSulphurSO() {\n        IAtom s = builder.newInstance(IAtom.class, \"S\");\n        IAtom o = builder.newInstance(IAtom.class, \"O\");\n        IBond b = builder.newInstance(IBond.class, s, o);\n        b.setOrder(IBond.Order.DOUBLE);\n\n        IAtomContainer m = builder.newInstance(IAtomContainer.class);\n        m.addAtom(s);\n        m.addAtom(o);\n        m.addBond(b);\n\n        double deltav = ChiIndexUtils.deltavSulphur(s, m);\n        Assert.assertEquals(1.33, deltav, 0.01);\n    }", "signature": "void testDeltaVSulphurSO()", "full_signature": "@Test public void testDeltaVSulphurSO()", "class_method_signature": "ChiIndexUtilsTest.testDeltaVSulphurSO()", "testcase": true, "constructor": false, "invocations": ["newInstance", "newInstance", "newInstance", "setOrder", "newInstance", "addAtom", "addAtom", "addBond", "deltavSulphur", "assertEquals"]}, "focal_class": {"identifier": "ChiIndexUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getFragments", "parameters": "(IAtomContainer atomContainer, QueryAtomContainer[] queries)", "modifiers": "public static", "return": "List<List<Integer>>", "signature": "List<List<Integer>> getFragments(IAtomContainer atomContainer, QueryAtomContainer[] queries)", "full_signature": "public static List<List<Integer>> getFragments(IAtomContainer atomContainer, QueryAtomContainer[] queries)", "class_method_signature": "ChiIndexUtils.getFragments(IAtomContainer atomContainer, QueryAtomContainer[] queries)", "testcase": false, "constructor": false}, {"identifier": "evalSimpleIndex", "parameters": "(IAtomContainer atomContainer, List<List<Integer>> fragLists)", "modifiers": "public static", "return": "double", "signature": "double evalSimpleIndex(IAtomContainer atomContainer, List<List<Integer>> fragLists)", "full_signature": "public static double evalSimpleIndex(IAtomContainer atomContainer, List<List<Integer>> fragLists)", "class_method_signature": "ChiIndexUtils.evalSimpleIndex(IAtomContainer atomContainer, List<List<Integer>> fragLists)", "testcase": false, "constructor": false}, {"identifier": "evalValenceIndex", "parameters": "(IAtomContainer atomContainer, List<List<Integer>> fragList)", "modifiers": "public static", "return": "double", "signature": "double evalValenceIndex(IAtomContainer atomContainer, List<List<Integer>> fragList)", "full_signature": "public static double evalValenceIndex(IAtomContainer atomContainer, List<List<Integer>> fragList)", "class_method_signature": "ChiIndexUtils.evalValenceIndex(IAtomContainer atomContainer, List<List<Integer>> fragList)", "testcase": false, "constructor": false}, {"identifier": "getValenceElectronCount", "parameters": "(IAtom atom)", "modifiers": "private static", "return": "int", "signature": "int getValenceElectronCount(IAtom atom)", "full_signature": "private static int getValenceElectronCount(IAtom atom)", "class_method_signature": "ChiIndexUtils.getValenceElectronCount(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "deltavSulphur", "parameters": "(IAtom atom, IAtomContainer atomContainer)", "modifiers": "protected static", "return": "double", "signature": "double deltavSulphur(IAtom atom, IAtomContainer atomContainer)", "full_signature": "protected static double deltavSulphur(IAtom atom, IAtomContainer atomContainer)", "class_method_signature": "ChiIndexUtils.deltavSulphur(IAtom atom, IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "deltavPhosphorous", "parameters": "(IAtom atom, IAtomContainer atomContainer)", "modifiers": "private static", "return": "double", "signature": "double deltavPhosphorous(IAtom atom, IAtomContainer atomContainer)", "full_signature": "private static double deltavPhosphorous(IAtom atom, IAtomContainer atomContainer)", "class_method_signature": "ChiIndexUtils.deltavPhosphorous(IAtom atom, IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getUniqueBondSubgraphs", "parameters": "(List<List<RMap>> subgraphs, IAtomContainer ac)", "modifiers": "private static", "return": "List<List<Integer>>", "signature": "List<List<Integer>> getUniqueBondSubgraphs(List<List<RMap>> subgraphs, IAtomContainer ac)", "full_signature": "private static List<List<Integer>> getUniqueBondSubgraphs(List<List<RMap>> subgraphs, IAtomContainer ac)", "class_method_signature": "ChiIndexUtils.getUniqueBondSubgraphs(List<List<RMap>> subgraphs, IAtomContainer ac)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/ChiIndexUtils.java"}, "focal_method": {"identifier": "deltavSulphur", "parameters": "(IAtom atom, IAtomContainer atomContainer)", "modifiers": "protected static", "return": "double", "body": "protected static double deltavSulphur(IAtom atom, IAtomContainer atomContainer) {\n        if (atom.getAtomicNumber() != IElement.S) return -1;\n\n        // check whether it's a S in S-S\n        List<IAtom> connected = atomContainer.getConnectedAtomsList(atom);\n        for (IAtom connectedAtom : connected) {\n            if (connectedAtom.getAtomicNumber() == IElement.S\n                    && atomContainer.getBond(atom, connectedAtom).getOrder() == IBond.Order.SINGLE) return .89;\n        }\n\n        int count = 0;\n        for (IAtom connectedAtom : connected) {\n            if (connectedAtom.getAtomicNumber() == IElement.O\n                    && atomContainer.getBond(atom, connectedAtom).getOrder() == IBond.Order.DOUBLE) count++;\n        }\n        if (count == 1)\n            return 1.33; // check whether it's a S in -SO-\n        else if (count == 2) return 2.67; // check whether it's a S in -SO2-\n\n        return -1;\n    }", "signature": "double deltavSulphur(IAtom atom, IAtomContainer atomContainer)", "full_signature": "protected static double deltavSulphur(IAtom atom, IAtomContainer atomContainer)", "class_method_signature": "ChiIndexUtils.deltavSulphur(IAtom atom, IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["getAtomicNumber", "getConnectedAtomsList", "getAtomicNumber", "getOrder", "getBond", "getAtomicNumber", "getOrder", "getBond"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}