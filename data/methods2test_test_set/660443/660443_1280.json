{"test_class": {"identifier": "DoubleBond2DParityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int UNSPECIFIED = 0;", "modifier": "private static final", "type": "int", "declarator": "UNSPECIFIED = 0", "var_name": "UNSPECIFIED"}, {"original_string": "private static final int OPPOSITE    = +1;", "modifier": "private static final", "type": "int", "declarator": "OPPOSITE    = +1", "var_name": "OPPOSITE"}, {"original_string": "private static final int TOGETHER    = -1;", "modifier": "private static final", "type": "int", "declarator": "TOGETHER    = -1", "var_name": "TOGETHER"}], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/stereo/DoubleBond2DParityTest.java"}, "test_case": {"identifier": "together30", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void together30() throws Exception {\n        GeometricParity geometric = new DoubleBond2DParity(new Point2d(-2.4455, 0.5046), new Point2d(-2.0330, -0.2099),\n                new Point2d(-3.2705, 0.5046), new Point2d(-2.4455, -0.9244));\n        assertEquals(TOGETHER, geometric.parity());\n    }", "signature": "void together30()", "full_signature": "@Test public void together30()", "class_method_signature": "DoubleBond2DParityTest.together30()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "parity"]}, "focal_class": {"identifier": "DoubleBond2DParity", "superclass": "extends GeometricParity", "interfaces": "", "fields": [{"original_string": "private Point2d             l, r, l1, r1, l2, r2;", "modifier": "private", "type": "Point2d", "declarator": "l", "var_name": "l"}, {"original_string": "private static final double THRESHOLD = 0.1;", "modifier": "private static final", "type": "double", "declarator": "THRESHOLD = 0.1", "var_name": "THRESHOLD"}], "methods": [{"identifier": "DoubleBond2DParity", "parameters": "(Point2d left, Point2d right, Point2d leftSubstituent, Point2d rightSubstituent)", "modifiers": "public", "return": "", "signature": " DoubleBond2DParity(Point2d left, Point2d right, Point2d leftSubstituent, Point2d rightSubstituent)", "full_signature": "public  DoubleBond2DParity(Point2d left, Point2d right, Point2d leftSubstituent, Point2d rightSubstituent)", "class_method_signature": "DoubleBond2DParity.DoubleBond2DParity(Point2d left, Point2d right, Point2d leftSubstituent, Point2d rightSubstituent)", "testcase": false, "constructor": true}, {"identifier": "DoubleBond2DParity", "parameters": "(Point2d left, Point2d right, Point2d leftSubstituent1, Point2d leftSubstituent2,\n            Point2d rightSubstituent1, Point2d rightSubstituent2)", "modifiers": "public", "return": "", "signature": " DoubleBond2DParity(Point2d left, Point2d right, Point2d leftSubstituent1, Point2d leftSubstituent2,\n            Point2d rightSubstituent1, Point2d rightSubstituent2)", "full_signature": "public  DoubleBond2DParity(Point2d left, Point2d right, Point2d leftSubstituent1, Point2d leftSubstituent2,\n            Point2d rightSubstituent1, Point2d rightSubstituent2)", "class_method_signature": "DoubleBond2DParity.DoubleBond2DParity(Point2d left, Point2d right, Point2d leftSubstituent1, Point2d leftSubstituent2,\n            Point2d rightSubstituent1, Point2d rightSubstituent2)", "testcase": false, "constructor": true}, {"identifier": "parity", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int parity()", "full_signature": "@Override public int parity()", "class_method_signature": "DoubleBond2DParity.parity()", "testcase": false, "constructor": false}, {"identifier": "parity", "parameters": "(Point2d a, Point2d b, Point2d c)", "modifiers": "private static", "return": "int", "signature": "int parity(Point2d a, Point2d b, Point2d c)", "full_signature": "private static int parity(Point2d a, Point2d b, Point2d c)", "class_method_signature": "DoubleBond2DParity.parity(Point2d a, Point2d b, Point2d c)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/stereo/DoubleBond2DParity.java"}, "focal_method": {"identifier": "parity", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int parity() {\n        return parity(l1, l2, r) * parity(r1, r2, l);\n    }", "signature": "int parity()", "full_signature": "@Override public int parity()", "class_method_signature": "DoubleBond2DParity.parity()", "testcase": false, "constructor": false, "invocations": ["parity", "parity"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}