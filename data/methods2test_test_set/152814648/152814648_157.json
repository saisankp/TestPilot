{"test_class": {"identifier": "HealthTrendChartTest", "superclass": "", "interfaces": "", "fields": [], "file": "plugin/src/test/java/io/jenkins/plugins/analysis/core/charts/HealthTrendChartTest.java"}, "test_case": {"identifier": "shouldCreateFallbackChartIfHealthIsDisabled", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldCreateFallbackChartIfHealthIsDisabled() {\n        HealthDescriptor healthDescriptor = new HealthDescriptor(-1, -1, Severity.WARNING_NORMAL);\n        HealthTrendChart chart = new HealthTrendChart(healthDescriptor);\n\n        List<BuildResult<AnalysisBuildResult>> resultsCheckStyle = createBuildResults();\n        LinesChartModel model = chart.create(resultsCheckStyle, new ChartModelConfiguration());\n\n        assertThatJson(model).node(\"domainAxisLabels\")\n                .isArray().containsExactly(\"#1\", \"#2\", \"#3\", \"#4\");\n        assertThatJson(model).node(\"series\")\n                .isArray().hasSize(1);\n        assertThat(healthDescriptor.isEnabled()).isFalse();\n        assertThat(model.getSeries().get(0).getName()).isEqualTo(\"Total (health report disabled)\");\n        verifySeries(model, 0, 0, 5, 10, 15);\n    }", "signature": "void shouldCreateFallbackChartIfHealthIsDisabled()", "full_signature": "@Test void shouldCreateFallbackChartIfHealthIsDisabled()", "class_method_signature": "HealthTrendChartTest.shouldCreateFallbackChartIfHealthIsDisabled()", "testcase": true, "constructor": false, "invocations": ["createBuildResults", "create", "containsExactly", "isArray", "node", "assertThatJson", "hasSize", "isArray", "node", "assertThatJson", "isFalse", "assertThat", "isEnabled", "isEqualTo", "assertThat", "getName", "get", "getSeries", "verifySeries"]}, "focal_class": {"identifier": "HealthTrendChart", "superclass": "", "interfaces": "implements TrendChart", "fields": [{"original_string": "private final HealthDescriptor healthDescriptor;", "modifier": "private final", "type": "HealthDescriptor", "declarator": "healthDescriptor", "var_name": "healthDescriptor"}], "methods": [{"identifier": "HealthTrendChart", "parameters": "(final HealthDescriptor healthDescriptor)", "modifiers": "public", "return": "", "signature": " HealthTrendChart(final HealthDescriptor healthDescriptor)", "full_signature": "public  HealthTrendChart(final HealthDescriptor healthDescriptor)", "class_method_signature": "HealthTrendChart.HealthTrendChart(final HealthDescriptor healthDescriptor)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration)", "modifiers": "@Override public", "return": "LinesChartModel", "signature": "LinesChartModel create(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration)", "full_signature": "@Override public LinesChartModel create(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration)", "class_method_signature": "HealthTrendChart.create(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "createSeries", "parameters": "(final String name, final Palette color)", "modifiers": "private", "return": "LineSeries", "signature": "LineSeries createSeries(final String name, final Palette color)", "full_signature": "private LineSeries createSeries(final String name, final Palette color)", "class_method_signature": "HealthTrendChart.createSeries(final String name, final Palette color)", "testcase": false, "constructor": false}], "file": "plugin/src/main/java/io/jenkins/plugins/analysis/core/charts/HealthTrendChart.java"}, "focal_method": {"identifier": "create", "parameters": "(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration)", "modifiers": "@Override public", "return": "LinesChartModel", "body": "@Override\n    public LinesChartModel create(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration) {\n        HealthSeriesBuilder builder = new HealthSeriesBuilder(healthDescriptor);\n        LinesDataSet dataSet = builder.createDataSet(configuration, results);\n\n        LinesChartModel model = new LinesChartModel();\n        model.setDomainAxisLabels(dataSet.getDomainAxisLabels());\n\n        if (healthDescriptor.isEnabled()) {\n            LineSeries healthy = createSeries(Messages.Healthy_Name(), Palette.GREEN);\n            healthy.addAll(dataSet.getSeries(HealthSeriesBuilder.HEALTHY));\n            LineSeries intermediate = createSeries(Messages.Satisfactory_Name(), Palette.YELLOW);\n            intermediate.addAll(dataSet.getSeries(HealthSeriesBuilder.BETWEEN));\n            LineSeries unhealthy = createSeries(Messages.Unhealthy_Name(), Palette.RED);\n            unhealthy.addAll(dataSet.getSeries(HealthSeriesBuilder.UNHEALTHY));\n            model.addSeries(healthy, intermediate, unhealthy);\n        }\n        else {\n            LineSeries total = new LineSeries(Messages.Total_Name(), Palette.YELLOW.getNormal(),\n                    StackedMode.SEPARATE_LINES, FilledMode.LINES);\n            total.addAll(dataSet.getSeries(HealthSeriesBuilder.TOTAL));\n            model.addSeries(total);\n        }\n\n        return model;\n    }", "signature": "LinesChartModel create(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration)", "full_signature": "@Override public LinesChartModel create(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration)", "class_method_signature": "HealthTrendChart.create(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration)", "testcase": false, "constructor": false, "invocations": ["createDataSet", "setDomainAxisLabels", "getDomainAxisLabels", "isEnabled", "createSeries", "Healthy_Name", "addAll", "getSeries", "createSeries", "Satisfactory_Name", "addAll", "getSeries", "createSeries", "Unhealthy_Name", "addAll", "getSeries", "addSeries", "Total_Name", "getNormal", "addAll", "getSeries", "addSeries"]}, "repository": {"repo_id": 152814648, "url": "https://github.com/jenkinsci/warnings-ng-plugin", "stars": 158, "created": "10/12/2018 10:41:36 PM +00:00", "updates": "2020-01-27T14:00:03+00:00", "fork": "False", "license": "licensed"}}