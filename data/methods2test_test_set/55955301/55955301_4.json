{"test_class": {"identifier": "PortfolioServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private PortfolioService service;", "modifier": "private", "type": "PortfolioService", "declarator": "service", "var_name": "service"}, {"original_string": "private Portfolio original;", "modifier": "private", "type": "Portfolio", "declarator": "original", "var_name": "original"}], "file": "solution/portfolio-service/src/test/java/io/vertx/workshop/portfolio/impl/PortfolioServiceImplTest.java"}, "test_case": {"identifier": "testYouCannotSellANegativeAmount", "parameters": "(TestContext tc)", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testYouCannotSellANegativeAmount(TestContext tc) {\n    Async async = tc.async();\n    service.sell(-1, quote(\"A\", 10, 20, 100), ar -> {\n      tc.assertTrue(ar.failed());\n      async.complete();\n    });\n  }", "signature": "void testYouCannotSellANegativeAmount(TestContext tc)", "full_signature": "@Test public void testYouCannotSellANegativeAmount(TestContext tc)", "class_method_signature": "PortfolioServiceImplTest.testYouCannotSellANegativeAmount(TestContext tc)", "testcase": true, "constructor": false, "invocations": ["async", "sell", "quote", "assertTrue", "failed", "complete"]}, "focal_class": {"identifier": "PortfolioServiceImpl", "superclass": "", "interfaces": "implements PortfolioService", "fields": [{"original_string": "private final Vertx vertx;", "modifier": "private final", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private final Portfolio portfolio;", "modifier": "private final", "type": "Portfolio", "declarator": "portfolio", "var_name": "portfolio"}, {"original_string": "private final ServiceDiscovery discovery;", "modifier": "private final", "type": "ServiceDiscovery", "declarator": "discovery", "var_name": "discovery"}], "methods": [{"identifier": "PortfolioServiceImpl", "parameters": "(Vertx vertx, ServiceDiscovery discovery, double initialCash)", "modifiers": "public", "return": "", "signature": " PortfolioServiceImpl(Vertx vertx, ServiceDiscovery discovery, double initialCash)", "full_signature": "public  PortfolioServiceImpl(Vertx vertx, ServiceDiscovery discovery, double initialCash)", "class_method_signature": "PortfolioServiceImpl.PortfolioServiceImpl(Vertx vertx, ServiceDiscovery discovery, double initialCash)", "testcase": false, "constructor": true}, {"identifier": "getPortfolio", "parameters": "(Handler<AsyncResult<Portfolio>> resultHandler)", "modifiers": "@Override public", "return": "void", "signature": "void getPortfolio(Handler<AsyncResult<Portfolio>> resultHandler)", "full_signature": "@Override public void getPortfolio(Handler<AsyncResult<Portfolio>> resultHandler)", "class_method_signature": "PortfolioServiceImpl.getPortfolio(Handler<AsyncResult<Portfolio>> resultHandler)", "testcase": false, "constructor": false}, {"identifier": "sendActionOnTheEventBus", "parameters": "(String action, int amount, JsonObject quote, int newAmount)", "modifiers": "private", "return": "void", "signature": "void sendActionOnTheEventBus(String action, int amount, JsonObject quote, int newAmount)", "full_signature": "private void sendActionOnTheEventBus(String action, int amount, JsonObject quote, int newAmount)", "class_method_signature": "PortfolioServiceImpl.sendActionOnTheEventBus(String action, int amount, JsonObject quote, int newAmount)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Handler<AsyncResult<Double>> resultHandler)", "modifiers": "@Override public", "return": "void", "signature": "void evaluate(Handler<AsyncResult<Double>> resultHandler)", "full_signature": "@Override public void evaluate(Handler<AsyncResult<Double>> resultHandler)", "class_method_signature": "PortfolioServiceImpl.evaluate(Handler<AsyncResult<Double>> resultHandler)", "testcase": false, "constructor": false}, {"identifier": "computeEvaluation", "parameters": "(WebClient webClient, Handler<AsyncResult<Double>> resultHandler)", "modifiers": "private", "return": "void", "signature": "void computeEvaluation(WebClient webClient, Handler<AsyncResult<Double>> resultHandler)", "full_signature": "private void computeEvaluation(WebClient webClient, Handler<AsyncResult<Double>> resultHandler)", "class_method_signature": "PortfolioServiceImpl.computeEvaluation(WebClient webClient, Handler<AsyncResult<Double>> resultHandler)", "testcase": false, "constructor": false}, {"identifier": "getValueForCompany", "parameters": "(WebClient client, String company, int numberOfShares)", "modifiers": "private", "return": "Future<Double>", "signature": "Future<Double> getValueForCompany(WebClient client, String company, int numberOfShares)", "full_signature": "private Future<Double> getValueForCompany(WebClient client, String company, int numberOfShares)", "class_method_signature": "PortfolioServiceImpl.getValueForCompany(WebClient client, String company, int numberOfShares)", "testcase": false, "constructor": false}, {"identifier": "buy", "parameters": "(int amount, JsonObject quote, Handler<AsyncResult<Portfolio>> resultHandler)", "modifiers": "@Override public", "return": "void", "signature": "void buy(int amount, JsonObject quote, Handler<AsyncResult<Portfolio>> resultHandler)", "full_signature": "@Override public void buy(int amount, JsonObject quote, Handler<AsyncResult<Portfolio>> resultHandler)", "class_method_signature": "PortfolioServiceImpl.buy(int amount, JsonObject quote, Handler<AsyncResult<Portfolio>> resultHandler)", "testcase": false, "constructor": false}, {"identifier": "sell", "parameters": "(int amount, JsonObject quote, Handler<AsyncResult<Portfolio>> resultHandler)", "modifiers": "@Override public", "return": "void", "signature": "void sell(int amount, JsonObject quote, Handler<AsyncResult<Portfolio>> resultHandler)", "full_signature": "@Override public void sell(int amount, JsonObject quote, Handler<AsyncResult<Portfolio>> resultHandler)", "class_method_signature": "PortfolioServiceImpl.sell(int amount, JsonObject quote, Handler<AsyncResult<Portfolio>> resultHandler)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(String value)", "modifiers": "private static", "return": "String", "signature": "String encode(String value)", "full_signature": "private static String encode(String value)", "class_method_signature": "PortfolioServiceImpl.encode(String value)", "testcase": false, "constructor": false}], "file": "solution/portfolio-service/src/main/java/io/vertx/workshop/portfolio/impl/PortfolioServiceImpl.java"}, "focal_method": {"identifier": "sell", "parameters": "(int amount, JsonObject quote, Handler<AsyncResult<Portfolio>> resultHandler)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void sell(int amount, JsonObject quote, Handler<AsyncResult<Portfolio>> resultHandler) {\n    if (amount <= 0) {\n      resultHandler.handle(Future.failedFuture(\"Cannot sell \" + quote.getString(\"name\") + \" - the amount must be \" +\n          \"greater than 0\"));\n    }\n\n    double price = amount * quote.getDouble(\"bid\");\n    String name = quote.getString(\"name\");\n    int current = portfolio.getAmount(name);\n    // 1) do we have enough stocks\n    if (current >= amount) {\n      // Yes, sell it\n      int newAmount = current - amount;\n      if (newAmount == 0) {\n        portfolio.getShares().remove(name);\n      } else {\n        portfolio.getShares().put(name, newAmount);\n      }\n      portfolio.setCash(portfolio.getCash() + price);\n      sendActionOnTheEventBus(\"SELL\", amount, quote, newAmount);\n      resultHandler.handle(Future.succeededFuture(portfolio));\n    } else {\n      resultHandler.handle(Future.failedFuture(\"Cannot sell \" + amount + \" of \" + name + \" - \" + \"not enough stocks \" +\n          \"in portfolio\"));\n    }\n\n  }", "signature": "void sell(int amount, JsonObject quote, Handler<AsyncResult<Portfolio>> resultHandler)", "full_signature": "@Override public void sell(int amount, JsonObject quote, Handler<AsyncResult<Portfolio>> resultHandler)", "class_method_signature": "PortfolioServiceImpl.sell(int amount, JsonObject quote, Handler<AsyncResult<Portfolio>> resultHandler)", "testcase": false, "constructor": false, "invocations": ["handle", "failedFuture", "getString", "getDouble", "getString", "getAmount", "remove", "getShares", "put", "getShares", "setCash", "getCash", "sendActionOnTheEventBus", "handle", "succeededFuture", "handle", "failedFuture"]}, "repository": {"repo_id": 55955301, "url": "https://github.com/cescoffier/vertx-microservices-workshop", "language": "Java", "is_fork": false, "fork_count": 181, "stargazer_count": 273, "size": 2913, "license": "licensed"}}