{"test_class": {"identifier": "KiltReformatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public TemporaryFolder tmpFolder= new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "tmpFolder= new TemporaryFolder()", "var_name": "tmpFolder"}], "file": "kilt-core/src/test/java/de/poiu/kilt/reformatting/KiltReformatterTest.java"}, "test_case": {"identifier": "testReorder_orderByLanguage_NothingInCommon", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReorder_orderByLanguage_NothingInCommon() throws IOException {\n\n    // - preparation\n\n    final Path propertiesRootDirectory= this.tmpFolder.getRoot().toPath();\n    final File f1= createI18nBundle(propertiesRootDirectory, \"\"\n      + \"keyC = valueC\\n\"\n      + \"keyB = valueB\\n\"\n      + \"keyA = valueA\\n\"\n      + \"keyE = valueE\\n\"\n      + \"keyD = valueD\\n\"\n    );\n    final File f2= createI18nBundle(propertiesRootDirectory, \"\"\n      + \"keyZ = valueZ\\n\"\n      + \"keyY = valueY\\n\"\n      + \"keyX = valueX\\n\"\n    );\n\n    final FileMatcher fileMatcher= new FileMatcher(propertiesRootDirectory, new String[]{\"**/*.properties\"}, new String[]{\"\"});\n\n    // - execution\n\n    new KiltReformatter()\n      .reorderByTemplate(f1, fileMatcher, AttachCommentsTo.NEXT_PROPERTY, UTF_8);\n\n    // - verification\n\n    assertThat(contentOf(f1)).isEqualTo(\"\"\n      + \"keyC = valueC\\n\"\n      + \"keyB = valueB\\n\"\n      + \"keyA = valueA\\n\"\n      + \"keyE = valueE\\n\"\n      + \"keyD = valueD\\n\"\n    );\n    assertThat(contentOf(f2)).isEqualTo(\"\"\n      + \"keyZ = valueZ\\n\"\n      + \"keyY = valueY\\n\"\n      + \"keyX = valueX\\n\"\n    );\n  }", "signature": "void testReorder_orderByLanguage_NothingInCommon()", "full_signature": "@Test public void testReorder_orderByLanguage_NothingInCommon()", "class_method_signature": "KiltReformatterTest.testReorder_orderByLanguage_NothingInCommon()", "testcase": true, "constructor": false, "invocations": ["toPath", "getRoot", "createI18nBundle", "createI18nBundle", "reorderByTemplate", "isEqualTo", "assertThat", "contentOf", "isEqualTo", "assertThat", "contentOf"]}, "focal_class": {"identifier": "KiltReformatter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER= LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER= LogManager.getLogger()", "var_name": "LOGGER"}, {"original_string": "private static final ApronOptions APRON_OPTIONS= ApronOptions.create()\n        .with(MissingKeyAction.NOTHING)\n        .with(UnicodeHandling.DO_NOTHING);", "modifier": "private static final", "type": "ApronOptions", "declarator": "APRON_OPTIONS= ApronOptions.create()\n        .with(MissingKeyAction.NOTHING)\n        .with(UnicodeHandling.DO_NOTHING)", "var_name": "APRON_OPTIONS"}], "methods": [{"identifier": "reformat", "parameters": "(final FileMatcher fileMatcher, final String formatString, final boolean reformatKeyAndValue, final Charset charset)", "modifiers": "public", "return": "void", "signature": "void reformat(final FileMatcher fileMatcher, final String formatString, final boolean reformatKeyAndValue, final Charset charset)", "full_signature": "public void reformat(final FileMatcher fileMatcher, final String formatString, final boolean reformatKeyAndValue, final Charset charset)", "class_method_signature": "KiltReformatter.reformat(final FileMatcher fileMatcher, final String formatString, final boolean reformatKeyAndValue, final Charset charset)", "testcase": false, "constructor": false}, {"identifier": "reorderByKey", "parameters": "(final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "modifiers": "public", "return": "void", "signature": "void reorderByKey(final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "full_signature": "public void reorderByKey(final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "class_method_signature": "KiltReformatter.reorderByKey(final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "testcase": false, "constructor": false}, {"identifier": "reorderByTemplate", "parameters": "(final File template, final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "modifiers": "public", "return": "void", "signature": "void reorderByTemplate(final File template, final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "full_signature": "public void reorderByTemplate(final File template, final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "class_method_signature": "KiltReformatter.reorderByTemplate(final File template, final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "testcase": false, "constructor": false}], "file": "kilt-core/src/main/java/de/poiu/kilt/reformatting/KiltReformatter.java"}, "focal_method": {"identifier": "reorderByTemplate", "parameters": "(final File template, final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "modifiers": "public", "return": "void", "body": "public void reorderByTemplate(final File template, final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset) {\n    Require.nonNull(fileMatcher);\n    Require.nonNull(attachCommentsTo);\n    Require.nonNull(charset);\n\n    final Set<File> propertyFiles= fileMatcher.findMatchingFiles();\n    LOGGER.log(Level.INFO, \"Reordering entries by template {} in the following files: {}\", template, propertyFiles);\n\n    // create a PropertyFile instance for each file\n    final PropertyFile reference= PropertyFile.from(template, charset);\n    final Set<RememberingPropertyFile> pfs= propertyFiles.stream()\n      .filter(_f -> {\n        if (_f.getAbsolutePath().equals(template.getAbsolutePath())) {\n          LOGGER.log(Level.DEBUG, \"Ignoring property file \"+_f.getAbsolutePath()+\" because it is the same as the reference template.\");\n          return false;\n        } else {\n          return true;\n        }\n      })\n      .map(_f -> {\n        return RememberingPropertyFile.from(_f, charset);\n      })\n      .collect(Collectors.toSet());\n\n//    // and reorder in the given order\n//    for (int i= 1; i < pfs.size(); i++) {\n//      final RememberingPropertyFile rpf= pfs.get(i);\n//      new Reformatter().reorderByTemplate(pfs.get(i - 1).propertyFile, rpf.propertyFile, attachCommentsTo);\n//      rpf.propertyFile.overwrite(rpf.actualFile);\n//    }\n\n    // and reorder them\n    final Reformatter reformatter= new Reformatter(\n    ReformatOptions.create()\n      .with(charset)\n      .with(attachCommentsTo));\n\n    for (final RememberingPropertyFile rpf : pfs) {\n      reformatter.reorderByTemplate(reference, rpf.propertyFile);\n      rpf.propertyFile.overwrite(rpf.actualFile, APRON_OPTIONS.with(charset));\n    }\n  }", "signature": "void reorderByTemplate(final File template, final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "full_signature": "public void reorderByTemplate(final File template, final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "class_method_signature": "KiltReformatter.reorderByTemplate(final File template, final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "testcase": false, "constructor": false, "invocations": ["nonNull", "nonNull", "nonNull", "findMatchingFiles", "log", "from", "collect", "map", "filter", "stream", "equals", "getAbsolutePath", "getAbsolutePath", "log", "getAbsolutePath", "from", "toSet", "with", "with", "create", "reorderByTemplate", "overwrite", "with"]}, "repository": {"repo_id": 145957544, "url": "https://github.com/hupfdule/kilt", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 31, "size": 782, "license": "licensed"}}