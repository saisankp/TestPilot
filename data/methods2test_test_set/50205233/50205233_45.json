{"test_class": {"identifier": "MongoUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ServerAddress address;", "modifier": "private", "type": "ServerAddress", "declarator": "address", "var_name": "address"}, {"original_string": "private List<ServerAddress> addresses = new ArrayList<>();", "modifier": "private", "type": "List<ServerAddress>", "declarator": "addresses = new ArrayList<>()", "var_name": "addresses"}], "file": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/MongoUtilTest.java"}, "test_case": {"identifier": "shouldParseIPv6ServerAddressWithPort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldParseIPv6ServerAddressWithPort() {\n        address = MongoUtil.parseAddress(\"[::1/128]:28017\");\n        assertThat(address.getHost()).isEqualTo(\"::1/128\"); // removes brackets\n        assertThat(address.getPort()).isEqualTo(28017);\n    }", "signature": "void shouldParseIPv6ServerAddressWithPort()", "full_signature": "@Test public void shouldParseIPv6ServerAddressWithPort()", "class_method_signature": "MongoUtilTest.shouldParseIPv6ServerAddressWithPort()", "testcase": true, "constructor": false, "invocations": ["parseAddress", "isEqualTo", "assertThat", "getHost", "isEqualTo", "assertThat", "getPort"]}, "focal_class": {"identifier": "MongoUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ADDRESS_DELIMITER = \",\";", "modifier": "private static final", "type": "String", "declarator": "ADDRESS_DELIMITER = \",\"", "var_name": "ADDRESS_DELIMITER"}, {"original_string": "public static final Pattern ADDRESS_DELIMITER_PATTERN = Pattern.compile(ADDRESS_DELIMITER);", "modifier": "public static final", "type": "Pattern", "declarator": "ADDRESS_DELIMITER_PATTERN = Pattern.compile(ADDRESS_DELIMITER)", "var_name": "ADDRESS_DELIMITER_PATTERN"}, {"original_string": "private static final Pattern ADDRESS_PATTERN = Pattern.compile(\"([^:]+)(:(\\\\d+))?\");", "modifier": "private static final", "type": "Pattern", "declarator": "ADDRESS_PATTERN = Pattern.compile(\"([^:]+)(:(\\\\d+))?\")", "var_name": "ADDRESS_PATTERN"}, {"original_string": "private static final Pattern IPV6_ADDRESS_PATTERN = Pattern.compile(\"(\\\\[[^]]+\\\\])(:(\\\\d+))?\");", "modifier": "private static final", "type": "Pattern", "declarator": "IPV6_ADDRESS_PATTERN = Pattern.compile(\"(\\\\[[^]]+\\\\])(:(\\\\d+))?\")", "var_name": "IPV6_ADDRESS_PATTERN"}], "methods": [{"identifier": "replicaSetUsedIn", "parameters": "(String addresses)", "modifiers": "public static", "return": "String", "signature": "String replicaSetUsedIn(String addresses)", "full_signature": "public static String replicaSetUsedIn(String addresses)", "class_method_signature": "MongoUtil.replicaSetUsedIn(String addresses)", "testcase": false, "constructor": false}, {"identifier": "forEachDatabaseName", "parameters": "(MongoClient client, Consumer<String> operation)", "modifiers": "public static", "return": "void", "signature": "void forEachDatabaseName(MongoClient client, Consumer<String> operation)", "full_signature": "public static void forEachDatabaseName(MongoClient client, Consumer<String> operation)", "class_method_signature": "MongoUtil.forEachDatabaseName(MongoClient client, Consumer<String> operation)", "testcase": false, "constructor": false}, {"identifier": "forEachCollectionNameInDatabase", "parameters": "(MongoClient client, String databaseName, Consumer<String> operation)", "modifiers": "public static", "return": "void", "signature": "void forEachCollectionNameInDatabase(MongoClient client, String databaseName, Consumer<String> operation)", "full_signature": "public static void forEachCollectionNameInDatabase(MongoClient client, String databaseName, Consumer<String> operation)", "class_method_signature": "MongoUtil.forEachCollectionNameInDatabase(MongoClient client, String databaseName, Consumer<String> operation)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(MongoIterable<T> iterable, Consumer<T> operation)", "modifiers": "public static", "return": "void", "signature": "void forEach(MongoIterable<T> iterable, Consumer<T> operation)", "full_signature": "public static void forEach(MongoIterable<T> iterable, Consumer<T> operation)", "class_method_signature": "MongoUtil.forEach(MongoIterable<T> iterable, Consumer<T> operation)", "testcase": false, "constructor": false}, {"identifier": "onDatabase", "parameters": "(MongoClient client, String dbName, Consumer<MongoDatabase> dbOperation)", "modifiers": "public static", "return": "void", "signature": "void onDatabase(MongoClient client, String dbName, Consumer<MongoDatabase> dbOperation)", "full_signature": "public static void onDatabase(MongoClient client, String dbName, Consumer<MongoDatabase> dbOperation)", "class_method_signature": "MongoUtil.onDatabase(MongoClient client, String dbName, Consumer<MongoDatabase> dbOperation)", "testcase": false, "constructor": false}, {"identifier": "onCollection", "parameters": "(MongoClient client, String dbName, String collectionName,\n                                    Consumer<MongoCollection<Document>> collectionOperation)", "modifiers": "public static", "return": "void", "signature": "void onCollection(MongoClient client, String dbName, String collectionName,\n                                    Consumer<MongoCollection<Document>> collectionOperation)", "full_signature": "public static void onCollection(MongoClient client, String dbName, String collectionName,\n                                    Consumer<MongoCollection<Document>> collectionOperation)", "class_method_signature": "MongoUtil.onCollection(MongoClient client, String dbName, String collectionName,\n                                    Consumer<MongoCollection<Document>> collectionOperation)", "testcase": false, "constructor": false}, {"identifier": "onCollectionDocuments", "parameters": "(MongoClient client, String dbName, String collectionName,\n                                             BlockingConsumer<Document> documentOperation)", "modifiers": "public static", "return": "void", "signature": "void onCollectionDocuments(MongoClient client, String dbName, String collectionName,\n                                             BlockingConsumer<Document> documentOperation)", "full_signature": "public static void onCollectionDocuments(MongoClient client, String dbName, String collectionName,\n                                             BlockingConsumer<Document> documentOperation)", "class_method_signature": "MongoUtil.onCollectionDocuments(MongoClient client, String dbName, String collectionName,\n                                             BlockingConsumer<Document> documentOperation)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(MongoIterable<String> iterable, String match)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(MongoIterable<String> iterable, String match)", "full_signature": "public static boolean contains(MongoIterable<String> iterable, String match)", "class_method_signature": "MongoUtil.contains(MongoIterable<String> iterable, String match)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(MongoIterable<T> iterable, Predicate<T> matcher)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(MongoIterable<T> iterable, Predicate<T> matcher)", "full_signature": "public static boolean contains(MongoIterable<T> iterable, Predicate<T> matcher)", "class_method_signature": "MongoUtil.contains(MongoIterable<T> iterable, Predicate<T> matcher)", "testcase": false, "constructor": false}, {"identifier": "parseAddress", "parameters": "(String addressStr)", "modifiers": "public static", "return": "ServerAddress", "signature": "ServerAddress parseAddress(String addressStr)", "full_signature": "public static ServerAddress parseAddress(String addressStr)", "class_method_signature": "MongoUtil.parseAddress(String addressStr)", "testcase": false, "constructor": false}, {"identifier": "getOplogSessionTransactionId", "parameters": "(Document oplogEvent)", "modifiers": "public static", "return": "String", "signature": "String getOplogSessionTransactionId(Document oplogEvent)", "full_signature": "public static String getOplogSessionTransactionId(Document oplogEvent)", "class_method_signature": "MongoUtil.getOplogSessionTransactionId(Document oplogEvent)", "testcase": false, "constructor": false}, {"identifier": "parseAddresses", "parameters": "(String addressStr)", "modifiers": "protected static", "return": "List<ServerAddress>", "signature": "List<ServerAddress> parseAddresses(String addressStr)", "full_signature": "protected static List<ServerAddress> parseAddresses(String addressStr)", "class_method_signature": "MongoUtil.parseAddresses(String addressStr)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(ServerAddress address)", "modifiers": "protected static", "return": "String", "signature": "String toString(ServerAddress address)", "full_signature": "protected static String toString(ServerAddress address)", "class_method_signature": "MongoUtil.toString(ServerAddress address)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(List<ServerAddress> addresses)", "modifiers": "protected static", "return": "String", "signature": "String toString(List<ServerAddress> addresses)", "full_signature": "protected static String toString(List<ServerAddress> addresses)", "class_method_signature": "MongoUtil.toString(List<ServerAddress> addresses)", "testcase": false, "constructor": false}, {"identifier": "MongoUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " MongoUtil()", "full_signature": "private  MongoUtil()", "class_method_signature": "MongoUtil.MongoUtil()", "testcase": false, "constructor": true}], "file": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoUtil.java"}, "focal_method": {"identifier": "parseAddress", "parameters": "(String addressStr)", "modifiers": "public static", "return": "ServerAddress", "body": "public static ServerAddress parseAddress(String addressStr) {\n        if (addressStr != null) {\n            addressStr = addressStr.trim();\n            Matcher matcher = ADDRESS_PATTERN.matcher(addressStr);\n            if (!matcher.matches()) {\n                matcher = IPV6_ADDRESS_PATTERN.matcher(addressStr);\n            }\n            if (matcher.matches()) {\n                // Both regex have the same groups\n                String host = matcher.group(1);\n                String port = matcher.group(3);\n                if (port == null) {\n                    return new ServerAddress(host.trim());\n                }\n                return new ServerAddress(host.trim(), Integer.parseInt(port));\n            }\n        }\n        return null;\n    }", "signature": "ServerAddress parseAddress(String addressStr)", "full_signature": "public static ServerAddress parseAddress(String addressStr)", "class_method_signature": "MongoUtil.parseAddress(String addressStr)", "testcase": false, "constructor": false, "invocations": ["trim", "matcher", "matches", "matcher", "matches", "group", "group", "trim", "trim", "parseInt"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}