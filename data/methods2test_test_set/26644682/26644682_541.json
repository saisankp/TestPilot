{"test_class": {"identifier": "XlsSerializerTest", "superclass": "extends AbstractSchemaTestUtils", "interfaces": "", "fields": [{"original_string": "private final static Logger logger = LoggerFactory.getLogger(XlsSerializerTest.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(XlsSerializerTest.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private DataSetMetadataBuilder metadataBuilder;", "modifier": "@Autowired\n    private", "type": "DataSetMetadataBuilder", "declarator": "metadataBuilder", "var_name": "metadataBuilder"}, {"original_string": "@Autowired\n    CompositeFormatDetector formatDetector;", "modifier": "@Autowired", "type": "CompositeFormatDetector", "declarator": "formatDetector", "var_name": "formatDetector"}, {"original_string": "@Autowired\n    private XlsSchemaParser xlsSchemaParser;", "modifier": "@Autowired\n    private", "type": "XlsSchemaParser", "declarator": "xlsSchemaParser", "var_name": "xlsSchemaParser"}, {"original_string": "@Autowired\n    private XlsSerializer xlsSerializer;", "modifier": "@Autowired\n    private", "type": "XlsSerializer", "declarator": "xlsSerializer", "var_name": "xlsSerializer"}, {"original_string": "@Autowired\n    private ObjectMapper mapper;", "modifier": "@Autowired\n    private", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "@Rule\n    public LocalizationRule rule = new LocalizationRule(Locale.US);", "modifier": "@Rule\n    public", "type": "LocalizationRule", "declarator": "rule = new LocalizationRule(Locale.US)", "var_name": "rule"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/schema/xls/XlsSerializerTest.java"}, "test_case": {"identifier": "testGeneralNumberFormat_TDP_222", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGeneralNumberFormat_TDP_222() throws Exception {\n        final DataSetMetadata metadata = metadataBuilder\n                .metadata()\n                .id(\"1234\")\n                .row(column().name(\"id\").id(0).type(Type.INTEGER), column().name(\"value1\").id(1).type(Type.INTEGER))\n                .build();\n        Format format = assertFormat(\"excel_numbers.xls\");\n        // Test number serialization in XLS type guess\n        InputStream input = this.getClass().getResourceAsStream(\"excel_numbers.xls\");\n        final String result =\n                IOUtils.toString(format.getFormatFamily().getSerializer().serialize(input, metadata, -1), UTF_8);\n        final String expected =\n                \"[{\\\"0000\\\":\\\"1\\\",\\\"0001\\\":\\\"123\\\"},{\\\"0000\\\":\\\"2\\\",\\\"0001\\\":\\\"123.1\\\"},{\\\"0000\\\":\\\"3\\\",\\\"0001\\\":\\\"209.9\\\"}]\";\n        assertThat(result, sameJSONAs(expected));\n    }", "signature": "void testGeneralNumberFormat_TDP_222()", "full_signature": "@Test public void testGeneralNumberFormat_TDP_222()", "class_method_signature": "XlsSerializerTest.testGeneralNumberFormat_TDP_222()", "testcase": true, "constructor": false, "invocations": ["build", "row", "id", "metadata", "type", "id", "name", "column", "type", "id", "name", "column", "assertFormat", "getResourceAsStream", "getClass", "toString", "serialize", "getSerializer", "getFormatFamily", "assertThat", "sameJSONAs"]}, "focal_class": {"identifier": "XlsSerializer", "superclass": "", "interfaces": "implements Serializer", "fields": [{"original_string": "@Autowired\n    private ObjectMapper mapper;", "modifier": "@Autowired\n    private", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "@Resource(name = \"serializer#excel#executor\")\n    private TaskExecutor executor;", "modifier": "@Resource(name = \"serializer#excel#executor\")\n    private", "type": "TaskExecutor", "declarator": "executor", "var_name": "executor"}], "methods": [{"identifier": "isHeaderLine", "parameters": "(int lineIndex, List<ColumnMetadata> columns)", "modifiers": "public static", "return": "boolean", "signature": "boolean isHeaderLine(int lineIndex, List<ColumnMetadata> columns)", "full_signature": "public static boolean isHeaderLine(int lineIndex, List<ColumnMetadata> columns)", "class_method_signature": "XlsSerializer.isHeaderLine(int lineIndex, List<ColumnMetadata> columns)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(InputStream givenInputStream, DataSetMetadata metadata, long limit)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream serialize(InputStream givenInputStream, DataSetMetadata metadata, long limit)", "full_signature": "@Override public InputStream serialize(InputStream givenInputStream, DataSetMetadata metadata, long limit)", "class_method_signature": "XlsSerializer.serialize(InputStream givenInputStream, DataSetMetadata metadata, long limit)", "testcase": false, "constructor": false}, {"identifier": "serializeNew", "parameters": "(InputStream rawContent, DataSetMetadata metadata, long limit,\n            PipedOutputStream jsonOutput)", "modifiers": "private", "return": "Runnable", "signature": "Runnable serializeNew(InputStream rawContent, DataSetMetadata metadata, long limit,\n            PipedOutputStream jsonOutput)", "full_signature": "private Runnable serializeNew(InputStream rawContent, DataSetMetadata metadata, long limit,\n            PipedOutputStream jsonOutput)", "class_method_signature": "XlsSerializer.serializeNew(InputStream rawContent, DataSetMetadata metadata, long limit,\n            PipedOutputStream jsonOutput)", "testcase": false, "constructor": false}, {"identifier": "serializeOld", "parameters": "(InputStream rawContent, DataSetMetadata metadata, long limit,\n            PipedOutputStream jsonOutput)", "modifiers": "private", "return": "Runnable", "signature": "Runnable serializeOld(InputStream rawContent, DataSetMetadata metadata, long limit,\n            PipedOutputStream jsonOutput)", "full_signature": "private Runnable serializeOld(InputStream rawContent, DataSetMetadata metadata, long limit,\n            PipedOutputStream jsonOutput)", "class_method_signature": "XlsSerializer.serializeOld(InputStream rawContent, DataSetMetadata metadata, long limit,\n            PipedOutputStream jsonOutput)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/schema/xls/XlsSerializer.java"}, "focal_method": {"identifier": "serialize", "parameters": "(InputStream givenInputStream, DataSetMetadata metadata, long limit)", "modifiers": "@Override public", "return": "InputStream", "body": "@Override\n    public InputStream serialize(InputStream givenInputStream, DataSetMetadata metadata, long limit) {\n        try {\n\n            PipedInputStream pipe = new PipedInputStream();\n            PipedOutputStream jsonOutput = new PipedOutputStream(pipe);\n\n            // override the parameter in case it needs to be wrapped in a buffered inputstream\n            InputStream inputStream = givenInputStream;\n            if (!inputStream.markSupported()) {\n                inputStream = new BufferedInputStream(inputStream);\n            }\n\n            inputStream.mark(Integer.MAX_VALUE);\n\n            boolean newExcelFormat = XlsUtils.isNewExcelFormat(inputStream);\n\n            inputStream.reset();\n\n            Runnable runnable = newExcelFormat ? //\n                    serializeNew(inputStream, metadata, limit, jsonOutput)\n                    : serializeOld(inputStream, metadata, limit, jsonOutput);\n\n            // Serialize asynchronously for better performance (especially if caller doesn't consume all, see sampling).\n            executor.execute(runnable);\n\n            return pipe;\n        } catch (IOException e) {\n            throw new TDPException(CommonErrorCodes.UNABLE_TO_SERIALIZE_TO_JSON, e);\n        }\n    }", "signature": "InputStream serialize(InputStream givenInputStream, DataSetMetadata metadata, long limit)", "full_signature": "@Override public InputStream serialize(InputStream givenInputStream, DataSetMetadata metadata, long limit)", "class_method_signature": "XlsSerializer.serialize(InputStream givenInputStream, DataSetMetadata metadata, long limit)", "testcase": false, "constructor": false, "invocations": ["markSupported", "mark", "isNewExcelFormat", "reset", "serializeNew", "serializeOld", "execute"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}