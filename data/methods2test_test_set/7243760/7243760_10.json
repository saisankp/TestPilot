{"test_class": {"identifier": "TradingWeekImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String TEST = \"TEST\";", "modifier": "private final", "type": "String", "declarator": "TEST = \"TEST\"", "var_name": "TEST"}, {"original_string": "private final String TEST3 = \"TEST3\";", "modifier": "private final", "type": "String", "declarator": "TEST3 = \"TEST3\"", "var_name": "TEST3"}, {"original_string": "private static Properties DEFAULT_PROPS;", "modifier": "private static", "type": "Properties", "declarator": "DEFAULT_PROPS", "var_name": "DEFAULT_PROPS"}, {"original_string": "public static TradingWeek DEFAULT;", "modifier": "public static", "type": "TradingWeek", "declarator": "DEFAULT", "var_name": "DEFAULT"}], "file": "series/src/test/java/com/barchart/feed/series/TradingWeekImplTest.java"}, "test_case": {"identifier": "testGetTradingSessionOnOrAfter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTradingSessionOnOrAfter() {\n        TradingWeek tradingWeek = getTestTradingWeek(TEST);\n        \n        assertEquals(7, tradingWeek.length());\n        \n        //FIRST: Test within bounds Sunday, May 3 - Saturday, May 9\n        DateTime testDate = new DateTime(2009, 5, 3, 8, 30, 0, 0);\n        TradingSession session = tradingWeek.getTradingSessionOnOrAfter(testDate);\n        assertEquals(\"Sunday(08:30:00.000-15:30:00.000)\", session.toString());\n        \n        testDate = new DateTime(2009, 5, 4, 8, 30, 0, 0);\n        session = tradingWeek.getTradingSessionOnOrAfter(testDate);\n        assertEquals(\"Monday(08:30:00.000-15:30:00.000)\", session.toString());\n        \n        testDate = new DateTime(2009, 5, 5, 8, 30, 0, 0);\n        session = tradingWeek.getTradingSessionOnOrAfter(testDate);\n        assertEquals(\"Tuesday(08:30:00.000-15:30:00.000)\", session.toString());\n        \n        testDate = new DateTime(2009, 5, 6, 8, 30, 0, 0);\n        session = tradingWeek.getTradingSessionOnOrAfter(testDate);\n        assertEquals(\"Wednesday(08:30:00.000-15:30:00.000)\", session.toString());\n        \n        testDate = new DateTime(2009, 5, 7, 8, 30, 0, 0);\n        session = tradingWeek.getTradingSessionOnOrAfter(testDate);\n        assertEquals(\"Thursday(08:30:00.000-15:30:00.000)\", session.toString());\n        \n        testDate = new DateTime(2009, 5, 8, 8, 30, 0, 0);\n        session = tradingWeek.getTradingSessionOnOrAfter(testDate);\n        assertEquals(\"Friday(08:30:00.000-15:30:00.000)\", session.toString());\n        \n        testDate = new DateTime(2009, 5, 9, 8, 30, 0, 0);\n        session = tradingWeek.getTradingSessionOnOrAfter(testDate);\n        assertEquals(\"Saturday(08:30:00.000-15:30:00.000)\", session.toString());\n        \n        //////////////////////////////////////////////////////////\n        //SECOND: Test advancement to next session\n        //Advancement due to hours\n        testDate = new DateTime(2009, 5, 2, 16, 30, 0, 0); //Saturday, May 2nd\n        session = tradingWeek.getTradingSessionOnOrAfter(testDate);\n        assertEquals(\"Sunday(08:30:00.000-15:30:00.000)\", session.toString());\n        \n        //Advancement due to minutes\n        testDate = new DateTime(2009, 5, 2, 15, 31, 0, 0);\n        session = tradingWeek.getTradingSessionOnOrAfter(testDate);\n        assertEquals(\"Sunday(08:30:00.000-15:30:00.000)\", session.toString());\n        \n        //Advancement due to seconds\n        testDate = new DateTime(2009, 5, 2, 15, 30, 1, 0);\n        session = tradingWeek.getTradingSessionOnOrAfter(testDate);\n        assertEquals(\"Sunday(08:30:00.000-15:30:00.000)\", session.toString());\n    }", "signature": "void testGetTradingSessionOnOrAfter()", "full_signature": "@Test public void testGetTradingSessionOnOrAfter()", "class_method_signature": "TradingWeekImplTest.testGetTradingSessionOnOrAfter()", "testcase": true, "constructor": false, "invocations": ["getTestTradingWeek", "assertEquals", "length", "getTradingSessionOnOrAfter", "assertEquals", "toString", "getTradingSessionOnOrAfter", "assertEquals", "toString", "getTradingSessionOnOrAfter", "assertEquals", "toString", "getTradingSessionOnOrAfter", "assertEquals", "toString", "getTradingSessionOnOrAfter", "assertEquals", "toString", "getTradingSessionOnOrAfter", "assertEquals", "toString", "getTradingSessionOnOrAfter", "assertEquals", "toString", "getTradingSessionOnOrAfter", "assertEquals", "toString", "getTradingSessionOnOrAfter", "assertEquals", "toString", "getTradingSessionOnOrAfter", "assertEquals", "toString"]}, "focal_class": {"identifier": "TradingWeekImpl", "superclass": "extends JodaWorkingWeek", "interfaces": "implements TradingWeek", "fields": [{"original_string": "private long weekMillis = -1;", "modifier": "private", "type": "long", "declarator": "weekMillis = -1", "var_name": "weekMillis"}, {"original_string": "private List<TradingSessionImpl> sessions = new ArrayList<TradingSessionImpl>();", "modifier": "private", "type": "List<TradingSessionImpl>", "declarator": "sessions = new ArrayList<TradingSessionImpl>()", "var_name": "sessions"}, {"original_string": "private DateCalculator<LocalDate> calculator;", "modifier": "private", "type": "DateCalculator<LocalDate>", "declarator": "calculator", "var_name": "calculator"}, {"original_string": "public static final TradingWeek DEFAULT;", "modifier": "public static final", "type": "TradingWeek", "declarator": "DEFAULT", "var_name": "DEFAULT"}, {"original_string": "private static final Properties DEFAULT_PROPS;", "modifier": "private static final", "type": "Properties", "declarator": "DEFAULT_PROPS", "var_name": "DEFAULT_PROPS"}], "methods": [{"identifier": "TradingWeekImpl", "parameters": "(byte tradingDays)", "modifiers": "private", "return": "", "signature": " TradingWeekImpl(byte tradingDays)", "full_signature": "private  TradingWeekImpl(byte tradingDays)", "class_method_signature": "TradingWeekImpl.TradingWeekImpl(byte tradingDays)", "testcase": false, "constructor": true}, {"identifier": "configBuilder", "parameters": "(\n        String propertiesFilePath, String calendarName, String tradingWeekName)", "modifiers": "public static", "return": "Builder", "signature": "Builder configBuilder(\n        String propertiesFilePath, String calendarName, String tradingWeekName)", "full_signature": "public static Builder configBuilder(\n        String propertiesFilePath, String calendarName, String tradingWeekName)", "class_method_signature": "TradingWeekImpl.configBuilder(\n        String propertiesFilePath, String calendarName, String tradingWeekName)", "testcase": false, "constructor": false}, {"identifier": "configBuilder", "parameters": "(\n        Properties properties, String calendarName, String tradingWeekName)", "modifiers": "public static", "return": "Builder", "signature": "Builder configBuilder(\n        Properties properties, String calendarName, String tradingWeekName)", "full_signature": "public static Builder configBuilder(\n        Properties properties, String calendarName, String tradingWeekName)", "class_method_signature": "TradingWeekImpl.configBuilder(\n        Properties properties, String calendarName, String tradingWeekName)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int length()", "full_signature": "@Override public int length()", "class_method_signature": "TradingWeekImpl.length()", "testcase": false, "constructor": false}, {"identifier": "addTradingSession", "parameters": "(TradingSession session)", "modifiers": "@Override public", "return": "void", "signature": "void addTradingSession(TradingSession session)", "full_signature": "@Override public void addTradingSession(TradingSession session)", "class_method_signature": "TradingWeekImpl.addTradingSession(TradingSession session)", "testcase": false, "constructor": false}, {"identifier": "getStartSession", "parameters": "()", "modifiers": "@Override public", "return": "TradingSession", "signature": "TradingSession getStartSession()", "full_signature": "@Override public TradingSession getStartSession()", "class_method_signature": "TradingWeekImpl.getStartSession()", "testcase": false, "constructor": false}, {"identifier": "getEndSession", "parameters": "()", "modifiers": "@Override public", "return": "TradingSession", "signature": "TradingSession getEndSession()", "full_signature": "@Override public TradingSession getEndSession()", "class_method_signature": "TradingWeekImpl.getEndSession()", "testcase": false, "constructor": false}, {"identifier": "getTradingDaysInMonth", "parameters": "(DateTime dt)", "modifiers": "@Override public", "return": "int", "signature": "int getTradingDaysInMonth(DateTime dt)", "full_signature": "@Override public int getTradingDaysInMonth(DateTime dt)", "class_method_signature": "TradingWeekImpl.getTradingDaysInMonth(DateTime dt)", "testcase": false, "constructor": false}, {"identifier": "isTradingDay", "parameters": "(DateTime dt)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isTradingDay(DateTime dt)", "full_signature": "@Override public boolean isTradingDay(DateTime dt)", "class_method_signature": "TradingWeekImpl.isTradingDay(DateTime dt)", "testcase": false, "constructor": false}, {"identifier": "getSessionTradingDate", "parameters": "(DateTime dt)", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime getSessionTradingDate(DateTime dt)", "full_signature": "@Override public DateTime getSessionTradingDate(DateTime dt)", "class_method_signature": "TradingWeekImpl.getSessionTradingDate(DateTime dt)", "testcase": false, "constructor": false}, {"identifier": "setWeekMillis", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setWeekMillis()", "full_signature": "private void setWeekMillis()", "class_method_signature": "TradingWeekImpl.setWeekMillis()", "testcase": false, "constructor": false}, {"identifier": "getWeekMillis", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getWeekMillis()", "full_signature": "@Override public long getWeekMillis()", "class_method_signature": "TradingWeekImpl.getWeekMillis()", "testcase": false, "constructor": false}, {"identifier": "getSessionMillisBetween", "parameters": "(DateTime dt1, DateTime dt2)", "modifiers": "@Override public", "return": "long", "signature": "long getSessionMillisBetween(DateTime dt1, DateTime dt2)", "full_signature": "@Override public long getSessionMillisBetween(DateTime dt1, DateTime dt2)", "class_method_signature": "TradingWeekImpl.getSessionMillisBetween(DateTime dt1, DateTime dt2)", "testcase": false, "constructor": false}, {"identifier": "getTradingSessionOnOrBefore", "parameters": "(DateTime date)", "modifiers": "public", "return": "TradingSession", "signature": "TradingSession getTradingSessionOnOrBefore(DateTime date)", "full_signature": "public TradingSession getTradingSessionOnOrBefore(DateTime date)", "class_method_signature": "TradingWeekImpl.getTradingSessionOnOrBefore(DateTime date)", "testcase": false, "constructor": false}, {"identifier": "getPreviousSessionDate", "parameters": "(DateTime dt, Period period)", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime getPreviousSessionDate(DateTime dt, Period period)", "full_signature": "@Override public DateTime getPreviousSessionDate(DateTime dt, Period period)", "class_method_signature": "TradingWeekImpl.getPreviousSessionDate(DateTime dt, Period period)", "testcase": false, "constructor": false}, {"identifier": "getTradingSessionOnOrAfter", "parameters": "(DateTime date)", "modifiers": "@Override public", "return": "TradingSession", "signature": "TradingSession getTradingSessionOnOrAfter(DateTime date)", "full_signature": "@Override public TradingSession getTradingSessionOnOrAfter(DateTime date)", "class_method_signature": "TradingWeekImpl.getTradingSessionOnOrAfter(DateTime date)", "testcase": false, "constructor": false}, {"identifier": "getNextSessionDate", "parameters": "(DateTime dt, Period period)", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime getNextSessionDate(DateTime dt, Period period)", "full_signature": "@Override public DateTime getNextSessionDate(DateTime dt, Period period)", "class_method_signature": "TradingWeekImpl.getNextSessionDate(DateTime dt, Period period)", "testcase": false, "constructor": false}, {"identifier": "loadDefaultTradingWeek", "parameters": "()", "modifiers": "public static", "return": "TradingWeek", "signature": "TradingWeek loadDefaultTradingWeek()", "full_signature": "public static TradingWeek loadDefaultTradingWeek()", "class_method_signature": "TradingWeekImpl.loadDefaultTradingWeek()", "testcase": false, "constructor": false}, {"identifier": "isWorkingDay", "parameters": "(LocalDate date)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWorkingDay(LocalDate date)", "full_signature": "@Override public boolean isWorkingDay(LocalDate date)", "class_method_signature": "TradingWeekImpl.isWorkingDay(LocalDate date)", "testcase": false, "constructor": false}, {"identifier": "naturalDaysBetween", "parameters": "(int startDay, int endDay)", "modifiers": "public static", "return": "int", "signature": "int naturalDaysBetween(int startDay, int endDay)", "full_signature": "public static int naturalDaysBetween(int startDay, int endDay)", "class_method_signature": "TradingWeekImpl.naturalDaysBetween(int startDay, int endDay)", "testcase": false, "constructor": false}, {"identifier": "dayToString", "parameters": "(int day)", "modifiers": "public static", "return": "String", "signature": "String dayToString(int day)", "full_signature": "public static String dayToString(int day)", "class_method_signature": "TradingWeekImpl.dayToString(int day)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TradingWeekImpl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "TradingWeekImpl.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equalSessions", "parameters": "(List<TradingSessionImpl> l)", "modifiers": "private", "return": "boolean", "signature": "boolean equalSessions(List<TradingSessionImpl> l)", "full_signature": "private boolean equalSessions(List<TradingSessionImpl> l)", "class_method_signature": "TradingWeekImpl.equalSessions(List<TradingSessionImpl> l)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TradingWeekImpl.toString()", "testcase": false, "constructor": false}], "file": "series/src/main/java/com/barchart/feed/series/TradingWeekImpl.java"}, "focal_method": {"identifier": "getTradingSessionOnOrAfter", "parameters": "(DateTime date)", "modifiers": "@Override public", "return": "TradingSession", "body": "@Override\n\tpublic TradingSession getTradingSessionOnOrAfter(DateTime date) {\n        if(sessions.size() == 0) {\n            throw new IllegalStateException(\"Trading week has no sessions configured!\");\n        }\n        while(!isWorkingDay(date.toLocalDate())) {\n            date = date.plusDays(1);\n        }\n        int otherDay = date.getDayOfWeek();\n        LocalTime lt = date.toLocalTime();\n        int len = sessions.size();\n        for(int i = 0;i < len;i++) {\n            TradingSession ts = sessions.get(i);\n            if(ts.contains(date)) {\n                return ts;\n            }else if(ts.day() == otherDay){\n               if(ts.start().isAfter(lt)) {\n                   return ts;\n               }else if(ts.end().isBefore(lt)) {\n                   return sessions.get(i == len - 1 ? 0 : i + 1);\n               }\n            }\n        }\n        return null;\n    }", "signature": "TradingSession getTradingSessionOnOrAfter(DateTime date)", "full_signature": "@Override public TradingSession getTradingSessionOnOrAfter(DateTime date)", "class_method_signature": "TradingWeekImpl.getTradingSessionOnOrAfter(DateTime date)", "testcase": false, "constructor": false, "invocations": ["size", "isWorkingDay", "toLocalDate", "plusDays", "getDayOfWeek", "toLocalTime", "size", "get", "contains", "day", "isAfter", "start", "isBefore", "end", "get"]}, "repository": {"repo_id": 7243760, "url": "https://github.com/barchart/barchart-feed", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 64172, "license": "licensed"}}