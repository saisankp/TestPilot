{"test_class": {"identifier": "VersionsHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final RepositoryHandler repositoryHandler;", "modifier": "private final", "type": "RepositoryHandler", "declarator": "repositoryHandler", "var_name": "repositoryHandler"}, {"original_string": "private final VersionsHandler versionsHandler;", "modifier": "private final", "type": "VersionsHandler", "declarator": "versionsHandler", "var_name": "versionsHandler"}], "file": "server/src/test/java/org/axway/grapes/server/core/VersionsHandlerTest.java"}, "test_case": {"identifier": "testInvalidVersionDoesNotCauseStackTrace2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvalidVersionDoesNotCauseStackTrace2() throws IncomparableException {\n        final List<String> versions = new ArrayList<String>();\n        versions.add(null);\n        versions.add(\"1.2.0\");\n\n        assertEquals(\"1.2.0\", versionsHandler.getLastVersion(versions));\n    }", "signature": "void testInvalidVersionDoesNotCauseStackTrace2()", "full_signature": "@Test public void testInvalidVersionDoesNotCauseStackTrace2()", "class_method_signature": "VersionsHandlerTest.testInvalidVersionDoesNotCauseStackTrace2()", "testcase": true, "constructor": false, "invocations": ["add", "add", "assertEquals", "getLastVersion"]}, "focal_class": {"identifier": "VersionsHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final RepositoryHandler repoHandler;", "modifier": "private final", "type": "RepositoryHandler", "declarator": "repoHandler", "var_name": "repoHandler"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(VersionsHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(VersionsHandler.class)", "var_name": "LOG"}], "methods": [{"identifier": "VersionsHandler", "parameters": "(final RepositoryHandler repoHandler)", "modifiers": "public", "return": "", "signature": " VersionsHandler(final RepositoryHandler repoHandler)", "full_signature": "public  VersionsHandler(final RepositoryHandler repoHandler)", "class_method_signature": "VersionsHandler.VersionsHandler(final RepositoryHandler repoHandler)", "testcase": false, "constructor": true}, {"identifier": "isUpToDate", "parameters": "(final DbArtifact artifact)", "modifiers": "public", "return": "boolean", "signature": "boolean isUpToDate(final DbArtifact artifact)", "full_signature": "public boolean isUpToDate(final DbArtifact artifact)", "class_method_signature": "VersionsHandler.isUpToDate(final DbArtifact artifact)", "testcase": false, "constructor": false}, {"identifier": "getLastRelease", "parameters": "(final Collection<String> versions)", "modifiers": "public", "return": "String", "signature": "String getLastRelease(final Collection<String> versions)", "full_signature": "public String getLastRelease(final Collection<String> versions)", "class_method_signature": "VersionsHandler.getLastRelease(final Collection<String> versions)", "testcase": false, "constructor": false}, {"identifier": "getLastVersion", "parameters": "(final Collection<String> versions)", "modifiers": "public", "return": "String", "signature": "String getLastVersion(final Collection<String> versions)", "full_signature": "public String getLastVersion(final Collection<String> versions)", "class_method_signature": "VersionsHandler.getLastVersion(final Collection<String> versions)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/axway/grapes/server/core/VersionsHandler.java"}, "focal_method": {"identifier": "getLastVersion", "parameters": "(final Collection<String> versions)", "modifiers": "public", "return": "String", "body": "public String getLastVersion(final Collection<String> versions) {\n        final List<Version> sorted = versions.stream()\n                .filter(Version::isValid) // filter invalid input values\n                .map(Version::make)\n                .filter(Optional::isPresent)\n                .map(Optional::get)\n                .sorted((v1, v2) -> {\n                    try {\n                        return v1.compare(v2);\n                    } catch (IncomparableException e) {\n                        return 0;\n                    }\n                })\n                .collect(Collectors.toList());\n\n        if(sorted.isEmpty()) {\n            if(LOG.isWarnEnabled()) {\n                LOG.warn(String.format(\"Cannot obtain last version from collection %s\", versions.toString()));\n            }\n            return null;\n        }\n\n        return sorted.get(sorted.size() - 1).toString();\n    }", "signature": "String getLastVersion(final Collection<String> versions)", "full_signature": "public String getLastVersion(final Collection<String> versions)", "class_method_signature": "VersionsHandler.getLastVersion(final Collection<String> versions)", "testcase": false, "constructor": false, "invocations": ["collect", "sorted", "map", "filter", "map", "filter", "stream", "compare", "toList", "isEmpty", "isWarnEnabled", "warn", "format", "toString", "toString", "get", "size"]}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}