{"test_class": {"identifier": "DefaultDeflateCompressionDivinerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultDeflateCompressionDiviner diviner = null;", "modifier": "private", "type": "DefaultDeflateCompressionDiviner", "declarator": "diviner = null", "var_name": "diviner"}, {"original_string": "private byte[] testData = null;", "modifier": "private", "type": "byte[]", "declarator": "testData = null", "var_name": "testData"}], "file": "feya/libraries/archive_diff/diff.generator/src/test/java/com/google/archivepatcher/generator/DefaultDeflateCompressionDivinerTest.java"}, "test_case": {"identifier": "testDivineDeflateParameters_BadCloseInputStreamFactory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDivineDeflateParameters_BadCloseInputStreamFactory() throws IOException {\n    final JreDeflateParameters parameters = JreDeflateParameters.of(1, 0, true);\n    final byte[] buffer = deflate(parameters);\n    // The factory here will produce streams that throw exceptions when close() is called.\n    // These exceptions should be ignored.\n    JreDeflateParameters result =\n        diviner.divineDeflateParameters(new ByteArrayInputStreamFactory(buffer, true, true));\n    Assert.assertEquals(result, parameters);\n  }", "signature": "void testDivineDeflateParameters_BadCloseInputStreamFactory()", "full_signature": "@Test public void testDivineDeflateParameters_BadCloseInputStreamFactory()", "class_method_signature": "DefaultDeflateCompressionDivinerTest.testDivineDeflateParameters_BadCloseInputStreamFactory()", "testcase": true, "constructor": false, "invocations": ["of", "deflate", "divineDeflateParameters", "assertEquals"]}, "focal_class": {"identifier": "DefaultDeflateCompressionDiviner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<Integer, List<Integer>> levelsByStrategy = getLevelsByStrategy();", "modifier": "private final", "type": "Map<Integer, List<Integer>>", "declarator": "levelsByStrategy = getLevelsByStrategy()", "var_name": "levelsByStrategy"}], "methods": [{"identifier": "divineDeflateParameters", "parameters": "(File archiveFile)", "modifiers": "public", "return": "List<DivinationResult>", "signature": "List<DivinationResult> divineDeflateParameters(File archiveFile)", "full_signature": "public List<DivinationResult> divineDeflateParameters(File archiveFile)", "class_method_signature": "DefaultDeflateCompressionDiviner.divineDeflateParameters(File archiveFile)", "testcase": false, "constructor": false}, {"identifier": "getLevelsByStrategy", "parameters": "()", "modifiers": "protected", "return": "Map<Integer, List<Integer>>", "signature": "Map<Integer, List<Integer>> getLevelsByStrategy()", "full_signature": "protected Map<Integer, List<Integer>> getLevelsByStrategy()", "class_method_signature": "DefaultDeflateCompressionDiviner.getLevelsByStrategy()", "testcase": false, "constructor": false}, {"identifier": "divineDeflateParameters", "parameters": "(\n      MultiViewInputStreamFactory<?> compressedDataInputStreamFactory)", "modifiers": "public", "return": "JreDeflateParameters", "signature": "JreDeflateParameters divineDeflateParameters(\n      MultiViewInputStreamFactory<?> compressedDataInputStreamFactory)", "full_signature": "public JreDeflateParameters divineDeflateParameters(\n      MultiViewInputStreamFactory<?> compressedDataInputStreamFactory)", "class_method_signature": "DefaultDeflateCompressionDiviner.divineDeflateParameters(\n      MultiViewInputStreamFactory<?> compressedDataInputStreamFactory)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(\n      InputStream compressedDataIn,\n      Inflater inflater,\n      Deflater deflater,\n      InputStream matchingStreamInput,\n      byte[] copyBuffer)", "modifiers": "private", "return": "boolean", "signature": "boolean matches(\n      InputStream compressedDataIn,\n      Inflater inflater,\n      Deflater deflater,\n      InputStream matchingStreamInput,\n      byte[] copyBuffer)", "full_signature": "private boolean matches(\n      InputStream compressedDataIn,\n      Inflater inflater,\n      Deflater deflater,\n      InputStream matchingStreamInput,\n      byte[] copyBuffer)", "class_method_signature": "DefaultDeflateCompressionDiviner.matches(\n      InputStream compressedDataIn,\n      Inflater inflater,\n      Deflater deflater,\n      InputStream matchingStreamInput,\n      byte[] copyBuffer)", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.generator/src/main/java/com/google/archivepatcher/generator/DefaultDeflateCompressionDiviner.java"}, "focal_method": {"identifier": "divineDeflateParameters", "parameters": "(File archiveFile)", "modifiers": "public", "return": "List<DivinationResult>", "body": "public List<DivinationResult> divineDeflateParameters(File archiveFile) throws IOException {\n    List<DivinationResult> results = new ArrayList<DivinationResult>();\n    for (MinimalZipEntry minimalZipEntry : MinimalZipArchive.listEntries(archiveFile)) {\n      JreDeflateParameters divinedParameters = null;\n      if (minimalZipEntry.isDeflateCompressed()) {\n        // TODO(andrewhayden): Reuse streams to avoid churning file descriptors\n        RandomAccessFileInputStreamFactory rafisFactory =\n            new RandomAccessFileInputStreamFactory(\n                archiveFile,\n                minimalZipEntry.getFileOffsetOfCompressedData(),\n                minimalZipEntry.getCompressedSize());\n        divinedParameters = divineDeflateParameters(rafisFactory);\n      }\n      results.add(new DivinationResult(minimalZipEntry, divinedParameters));\n    }\n    return results;\n  }", "signature": "List<DivinationResult> divineDeflateParameters(File archiveFile)", "full_signature": "public List<DivinationResult> divineDeflateParameters(File archiveFile)", "class_method_signature": "DefaultDeflateCompressionDiviner.divineDeflateParameters(File archiveFile)", "testcase": false, "constructor": false, "invocations": ["listEntries", "isDeflateCompressed", "getFileOffsetOfCompressedData", "getCompressedSize", "divineDeflateParameters", "add"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}