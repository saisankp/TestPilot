{"test_class": {"identifier": "CompoundSegmentPredicateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SimplePredicate simplePredicate[];", "modifier": "private", "type": "SimplePredicate", "declarator": "simplePredicate[]", "var_name": "simplePredicate"}, {"original_string": "private SimpleSetPredicate simpleSetPredicate[];", "modifier": "private", "type": "SimpleSetPredicate", "declarator": "simpleSetPredicate[]", "var_name": "simpleSetPredicate"}], "file": "kie-pmml/src/test/java/org/kie/pmml/pmml_4_2/model/mining/CompoundSegmentPredicateTest.java"}, "test_case": {"identifier": "testCompoundWithCompound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCompoundWithCompound() {\n\t\tCompoundPredicate outerPredicate = new CompoundPredicate();\n\t\touterPredicate.setBooleanOperator(\"or\");\n\t\tsetupSimplePredicate(0,\"TF1\",SimpleSegmentPredicate.LESSER_EQUAL,\"150\");\n\t\touterPredicate.getSimplePredicatesAndCompoundPredicatesAndSimpleSetPredicates().add(simplePredicate[0]);\n\t\tCompoundPredicate innerPredicate = new CompoundPredicate();\n\t\tinnerPredicate.setBooleanOperator(\"and\");\n\t\tsetupSimplePredicate(1, \"TF1\", SimpleSegmentPredicate.GREATER, \"150\");\n\t\tArray valueSet = getNewArray(\"string\", new BigInteger(\"3\"), \"red\", \"white\", \"blue\");\n\t\tsetupSimpleSetPredicate(0, \"TF2\", \"isIn\", valueSet);\n\t\tinnerPredicate.getSimplePredicatesAndCompoundPredicatesAndSimpleSetPredicates().add(simplePredicate[1]);\n\t\tinnerPredicate.getSimplePredicatesAndCompoundPredicatesAndSimpleSetPredicates().add(simpleSetPredicate[0]);\n\t\touterPredicate.getSimplePredicatesAndCompoundPredicatesAndSimpleSetPredicates().add(innerPredicate);\n\t\tCompoundSegmentPredicate testPredicate = new CompoundSegmentPredicate(outerPredicate);\n\t\tString text = testPredicate.getPredicateRule();\n\t\tassertNotNull(text);\n\t\tStringBuilder bldr = new StringBuilder(\"(\");\n\t\tbldr.append(\"(( mTF1 == false ) && ( vTF1 <= 150 )) || ((\");\n\t\tbldr.append(\"(( mTF1 == false ) && ( vTF1 > 150 )) && \");\n\t\tbldr.append(\"(( mTF2 == false ) && ( vTF2 in (  \\\"red\\\" ,  \\\"white\\\" ,  \\\"blue\\\"  ) )))\");\n\t\tbldr.append(\"))\");\n\t\tassertEquals(bldr.toString(),text);\n\t}", "signature": "void testCompoundWithCompound()", "full_signature": "@Test public void testCompoundWithCompound()", "class_method_signature": "CompoundSegmentPredicateTest.testCompoundWithCompound()", "testcase": true, "constructor": false, "invocations": ["setBooleanOperator", "setupSimplePredicate", "add", "getSimplePredicatesAndCompoundPredicatesAndSimpleSetPredicates", "setBooleanOperator", "setupSimplePredicate", "getNewArray", "setupSimpleSetPredicate", "add", "getSimplePredicatesAndCompoundPredicatesAndSimpleSetPredicates", "add", "getSimplePredicatesAndCompoundPredicatesAndSimpleSetPredicates", "add", "getSimplePredicatesAndCompoundPredicatesAndSimpleSetPredicates", "getPredicateRule", "assertNotNull", "append", "append", "append", "append", "assertEquals", "toString"]}, "focal_class": {"identifier": "CompoundSegmentPredicate", "superclass": "", "interfaces": "implements PredicateRuleProducer", "fields": [{"original_string": "private String booleanOperator;", "modifier": "private", "type": "String", "declarator": "booleanOperator", "var_name": "booleanOperator"}, {"original_string": "private List<PredicateRuleProducer> subpredicates;", "modifier": "private", "type": "List<PredicateRuleProducer>", "declarator": "subpredicates", "var_name": "subpredicates"}], "methods": [{"identifier": "CompoundSegmentPredicate", "parameters": "()", "modifiers": "public", "return": "", "signature": " CompoundSegmentPredicate()", "full_signature": "public  CompoundSegmentPredicate()", "class_method_signature": "CompoundSegmentPredicate.CompoundSegmentPredicate()", "testcase": false, "constructor": true}, {"identifier": "CompoundSegmentPredicate", "parameters": "(CompoundPredicate predicate)", "modifiers": "public", "return": "", "signature": " CompoundSegmentPredicate(CompoundPredicate predicate)", "full_signature": "public  CompoundSegmentPredicate(CompoundPredicate predicate)", "class_method_signature": "CompoundSegmentPredicate.CompoundSegmentPredicate(CompoundPredicate predicate)", "testcase": false, "constructor": true}, {"identifier": "buildAndPredicate", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String buildAndPredicate()", "full_signature": "private String buildAndPredicate()", "class_method_signature": "CompoundSegmentPredicate.buildAndPredicate()", "testcase": false, "constructor": false}, {"identifier": "buildXorPredicate", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String buildXorPredicate()", "full_signature": "private String buildXorPredicate()", "class_method_signature": "CompoundSegmentPredicate.buildXorPredicate()", "testcase": false, "constructor": false}, {"identifier": "buildOrPredicate", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String buildOrPredicate()", "full_signature": "private String buildOrPredicate()", "class_method_signature": "CompoundSegmentPredicate.buildOrPredicate()", "testcase": false, "constructor": false}, {"identifier": "getPredicateFieldNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getPredicateFieldNames()", "full_signature": "public List<String> getPredicateFieldNames()", "class_method_signature": "CompoundSegmentPredicate.getPredicateFieldNames()", "testcase": false, "constructor": false}, {"identifier": "getFieldMissingFieldNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getFieldMissingFieldNames()", "full_signature": "public List<String> getFieldMissingFieldNames()", "class_method_signature": "CompoundSegmentPredicate.getFieldMissingFieldNames()", "testcase": false, "constructor": false}, {"identifier": "getPrimaryPredicateRule", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPrimaryPredicateRule()", "full_signature": "public String getPrimaryPredicateRule()", "class_method_signature": "CompoundSegmentPredicate.getPrimaryPredicateRule()", "testcase": false, "constructor": false}, {"identifier": "calcMissingFields", "parameters": "(CompoundSegmentPredicate csp, List<String> fields)", "modifiers": "private", "return": "String", "signature": "String calcMissingFields(CompoundSegmentPredicate csp, List<String> fields)", "full_signature": "private String calcMissingFields(CompoundSegmentPredicate csp, List<String> fields)", "class_method_signature": "CompoundSegmentPredicate.calcMissingFields(CompoundSegmentPredicate csp, List<String> fields)", "testcase": false, "constructor": false}, {"identifier": "getNextPredicateRule", "parameters": "(int lastPredicate)", "modifiers": "public", "return": "String", "signature": "String getNextPredicateRule(int lastPredicate)", "full_signature": "public String getNextPredicateRule(int lastPredicate)", "class_method_signature": "CompoundSegmentPredicate.getNextPredicateRule(int lastPredicate)", "testcase": false, "constructor": false}, {"identifier": "getSubpredicateCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSubpredicateCount()", "full_signature": "public int getSubpredicateCount()", "class_method_signature": "CompoundSegmentPredicate.getSubpredicateCount()", "testcase": false, "constructor": false}, {"identifier": "hasSurrogation", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasSurrogation()", "full_signature": "public boolean hasSurrogation()", "class_method_signature": "CompoundSegmentPredicate.hasSurrogation()", "testcase": false, "constructor": false}, {"identifier": "buildSurrogationPredicate", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String buildSurrogationPredicate()", "full_signature": "private String buildSurrogationPredicate()", "class_method_signature": "CompoundSegmentPredicate.buildSurrogationPredicate()", "testcase": false, "constructor": false}, {"identifier": "getPredicateRule", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPredicateRule()", "full_signature": "@Override public String getPredicateRule()", "class_method_signature": "CompoundSegmentPredicate.getPredicateRule()", "testcase": false, "constructor": false}, {"identifier": "isAlwaysTrue", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAlwaysTrue()", "full_signature": "@Override public boolean isAlwaysTrue()", "class_method_signature": "CompoundSegmentPredicate.isAlwaysTrue()", "testcase": false, "constructor": false}, {"identifier": "isAlwaysFalse", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAlwaysFalse()", "full_signature": "@Override public boolean isAlwaysFalse()", "class_method_signature": "CompoundSegmentPredicate.isAlwaysFalse()", "testcase": false, "constructor": false}], "file": "kie-pmml/src/main/java/org/kie/pmml/pmml_4_2/model/mining/CompoundSegmentPredicate.java"}, "focal_method": {"identifier": "getPredicateRule", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getPredicateRule() {\n        if (booleanOperator.equalsIgnoreCase(\"and\")) {\n            return buildAndPredicate();\n        } else if (booleanOperator.equalsIgnoreCase(\"or\")) {\n            return buildOrPredicate();\n        } else if (booleanOperator.equalsIgnoreCase(\"xor\")) {\n            return buildXorPredicate();\n        } else if (hasSurrogation()) {\n            return buildSurrogationPredicate();\n        }\n        return null;\n    }", "signature": "String getPredicateRule()", "full_signature": "@Override public String getPredicateRule()", "class_method_signature": "CompoundSegmentPredicate.getPredicateRule()", "testcase": false, "constructor": false, "invocations": ["equalsIgnoreCase", "buildAndPredicate", "equalsIgnoreCase", "buildOrPredicate", "equalsIgnoreCase", "buildXorPredicate", "hasSurrogation", "buildSurrogationPredicate"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}