{"test_class": {"identifier": "GeometryAreaCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate CommandDispatcher dispatcher;", "modifier": "@Autowired\n\tprivate", "type": "CommandDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "private List<Geometry> geometries;", "modifier": "private", "type": "List<Geometry>", "declarator": "geometries", "var_name": "geometries"}, {"original_string": "private double DELTA = 1E-5;", "modifier": "private", "type": "double", "declarator": "DELTA = 1E-5", "var_name": "DELTA"}], "file": "command/src/test/java/org/geomajas/command/geometry/GeometryAreaCommandTest.java"}, "test_case": {"identifier": "areaTestCrs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void areaTestCrs() throws GeomajasException {\n\t\tGeometryAreaRequest request = new GeometryAreaRequest();\n\t\trequest.setGeometries(geometries);\n\t\trequest.setGeometries(geometries);\n\t\trequest.setCrs(\"EPSG:4326\");\n\t\tGeometryAreaResponse response = (GeometryAreaResponse) dispatcher.execute(GeometryAreaRequest.COMMAND, request,\n\t\t\t\tnull, \"en\");\n\t\tList<Double> areas = response.getAreas();\n\t\tAssert.assertEquals(4, areas.size());\n\t\tAssert.assertEquals(3.05094E11, areas.get(0), DELTA * 3.05094E11);\n\t\tAssert.assertEquals(0, areas.get(1), DELTA);\n\t\tAssert.assertEquals(0, areas.get(2), DELTA);\n\t\tAssert.assertEquals(1.278E14, areas.get(3), DELTA * 1.278E14);\n\t}", "signature": "void areaTestCrs()", "full_signature": "@Test public void areaTestCrs()", "class_method_signature": "GeometryAreaCommandTest.areaTestCrs()", "testcase": true, "constructor": false, "invocations": ["setGeometries", "setGeometries", "setCrs", "execute", "getAreas", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "GeometryAreaCommand", "superclass": "", "interfaces": "implements CommandHasRequest<GeometryAreaRequest, GeometryAreaResponse>", "fields": [{"original_string": "private static final String EPSG_4326 = \"EPSG:4326\";", "modifier": "private static final", "type": "String", "declarator": "EPSG_4326 = \"EPSG:4326\"", "var_name": "EPSG_4326"}, {"original_string": "private static final double RADIUS = 6378137;", "modifier": "private static final", "type": "double", "declarator": "RADIUS = 6378137", "var_name": "RADIUS"}, {"original_string": "@Autowired\n\tprivate DtoConverterService converter;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "converter", "var_name": "converter"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}], "methods": [{"identifier": "getEmptyCommandRequest", "parameters": "()", "modifiers": "@Override public", "return": "GeometryAreaRequest", "signature": "GeometryAreaRequest getEmptyCommandRequest()", "full_signature": "@Override public GeometryAreaRequest getEmptyCommandRequest()", "class_method_signature": "GeometryAreaCommand.getEmptyCommandRequest()", "testcase": false, "constructor": false}, {"identifier": "getEmptyCommandResponse", "parameters": "()", "modifiers": "@Override public", "return": "GeometryAreaResponse", "signature": "GeometryAreaResponse getEmptyCommandResponse()", "full_signature": "@Override public GeometryAreaResponse getEmptyCommandResponse()", "class_method_signature": "GeometryAreaCommand.getEmptyCommandResponse()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(GeometryAreaRequest request, GeometryAreaResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void execute(GeometryAreaRequest request, GeometryAreaResponse response)", "full_signature": "@Override public void execute(GeometryAreaRequest request, GeometryAreaResponse response)", "class_method_signature": "GeometryAreaCommand.execute(GeometryAreaRequest request, GeometryAreaResponse response)", "testcase": false, "constructor": false}], "file": "command/src/main/java/org/geomajas/command/geometry/GeometryAreaCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(GeometryAreaRequest request, GeometryAreaResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(GeometryAreaRequest request, GeometryAreaResponse response) throws Exception {\n\t\tList<Double> areas = new ArrayList<Double>(request.getGeometries().size());\n\t\tfor (org.geomajas.geometry.Geometry g : request.getGeometries()) {\n\t\t\tGeometry geometry = converter.toInternal(g);\n\t\t\tdouble area = 0;\n\t\t\tif (geometry instanceof Polygonal) {\n\t\t\t\tif (request.getCrs() != null) {\n\t\t\t\t\tif (!EPSG_4326.equals(request.getCrs())) {\n\t\t\t\t\t\tgeometry = geoService.transform(geometry, request.getCrs(), EPSG_4326);\n\t\t\t\t\t}\n\t\t\t\t\t// applying global sinusoidal projection (equal-area)\n\t\t\t\t\tgeometry.apply(new CoordinateFilter() {\n\n\t\t\t\t\t\tpublic void filter(Coordinate coord) {\n\t\t\t\t\t\t\tdouble newX = coord.x * Math.PI / 180.0 * Math.cos(coord.y * Math.PI / 180.0);\n\t\t\t\t\t\t\tdouble newY = coord.y * Math.PI / 180.0;\n\t\t\t\t\t\t\tcoord.x = newX;\n\t\t\t\t\t\t\tcoord.y = newY;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tarea = geometry.getArea() * RADIUS * RADIUS;\n\t\t\t\t} else {\n\t\t\t\t\tarea = geometry.getArea();\n\t\t\t\t}\n\t\t\t}\n\t\t\tareas.add(area);\n\t\t}\n\t\tresponse.setAreas(areas);\n\t}", "signature": "void execute(GeometryAreaRequest request, GeometryAreaResponse response)", "full_signature": "@Override public void execute(GeometryAreaRequest request, GeometryAreaResponse response)", "class_method_signature": "GeometryAreaCommand.execute(GeometryAreaRequest request, GeometryAreaResponse response)", "testcase": false, "constructor": false, "invocations": ["size", "getGeometries", "getGeometries", "toInternal", "getCrs", "equals", "getCrs", "transform", "getCrs", "apply", "cos", "getArea", "getArea", "add", "setAreas"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}