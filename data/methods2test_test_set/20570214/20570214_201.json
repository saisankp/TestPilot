{"test_class": {"identifier": "AesSivKeyManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/daead/AesSivKeyManagerTest.java"}, "test_case": {"identifier": "validateKeyFormat_checkAllLengths", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void validateKeyFormat_checkAllLengths() throws Exception {\n    AesSivKeyManager manager = new AesSivKeyManager();\n    for (int i = 0; i < 100; i++) {\n      if (i == 64) {\n        manager.keyFactory().validateKeyFormat(createAesSivKeyFormat(i));\n      } else {\n        try {\n          manager.keyFactory().validateKeyFormat(createAesSivKeyFormat(i));\n          fail();\n        } catch (GeneralSecurityException e) {\n          // expected\n        }\n      }\n    }\n  }", "signature": "void validateKeyFormat_checkAllLengths()", "full_signature": "@Test public void validateKeyFormat_checkAllLengths()", "class_method_signature": "AesSivKeyManagerTest.validateKeyFormat_checkAllLengths()", "testcase": true, "constructor": false, "invocations": ["validateKeyFormat", "keyFactory", "createAesSivKeyFormat", "validateKeyFormat", "keyFactory", "createAesSivKeyFormat", "fail"]}, "focal_class": {"identifier": "AesSivKeyManager", "superclass": "extends KeyTypeManager<AesSivKey>", "interfaces": "", "fields": [], "methods": [{"identifier": "AesSivKeyManager", "parameters": "()", "modifiers": "", "return": "", "signature": " AesSivKeyManager()", "full_signature": "  AesSivKeyManager()", "class_method_signature": "AesSivKeyManager.AesSivKeyManager()", "testcase": false, "constructor": true}, {"identifier": "getKeyType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getKeyType()", "full_signature": "@Override public String getKeyType()", "class_method_signature": "AesSivKeyManager.getKeyType()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVersion()", "full_signature": "@Override public int getVersion()", "class_method_signature": "AesSivKeyManager.getVersion()", "testcase": false, "constructor": false}, {"identifier": "keyMaterialType", "parameters": "()", "modifiers": "@Override public", "return": "KeyMaterialType", "signature": "KeyMaterialType keyMaterialType()", "full_signature": "@Override public KeyMaterialType keyMaterialType()", "class_method_signature": "AesSivKeyManager.keyMaterialType()", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(AesSivKey key)", "modifiers": "@Override public", "return": "void", "signature": "void validateKey(AesSivKey key)", "full_signature": "@Override public void validateKey(AesSivKey key)", "class_method_signature": "AesSivKeyManager.validateKey(AesSivKey key)", "testcase": false, "constructor": false}, {"identifier": "parseKey", "parameters": "(ByteString byteString)", "modifiers": "@Override public", "return": "AesSivKey", "signature": "AesSivKey parseKey(ByteString byteString)", "full_signature": "@Override public AesSivKey parseKey(ByteString byteString)", "class_method_signature": "AesSivKeyManager.parseKey(ByteString byteString)", "testcase": false, "constructor": false}, {"identifier": "keyFactory", "parameters": "()", "modifiers": "@Override public", "return": "KeyFactory<AesSivKeyFormat, AesSivKey>", "signature": "KeyFactory<AesSivKeyFormat, AesSivKey> keyFactory()", "full_signature": "@Override public KeyFactory<AesSivKeyFormat, AesSivKey> keyFactory()", "class_method_signature": "AesSivKeyManager.keyFactory()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(boolean newKeyAllowed)", "modifiers": "public static", "return": "void", "signature": "void register(boolean newKeyAllowed)", "full_signature": "public static void register(boolean newKeyAllowed)", "class_method_signature": "AesSivKeyManager.register(boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "aes256SivTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate aes256SivTemplate()", "full_signature": "public static final KeyTemplate aes256SivTemplate()", "class_method_signature": "AesSivKeyManager.aes256SivTemplate()", "testcase": false, "constructor": false}, {"identifier": "rawAes256SivTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate rawAes256SivTemplate()", "full_signature": "public static final KeyTemplate rawAes256SivTemplate()", "class_method_signature": "AesSivKeyManager.rawAes256SivTemplate()", "testcase": false, "constructor": false}, {"identifier": "createKeyTemplate", "parameters": "(\n      int keySize, KeyTemplate.OutputPrefixType prefixType)", "modifiers": "private static", "return": "KeyTemplate", "signature": "KeyTemplate createKeyTemplate(\n      int keySize, KeyTemplate.OutputPrefixType prefixType)", "full_signature": "private static KeyTemplate createKeyTemplate(\n      int keySize, KeyTemplate.OutputPrefixType prefixType)", "class_method_signature": "AesSivKeyManager.createKeyTemplate(\n      int keySize, KeyTemplate.OutputPrefixType prefixType)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/daead/AesSivKeyManager.java"}, "focal_method": {"identifier": "keyFactory", "parameters": "()", "modifiers": "@Override public", "return": "KeyFactory<AesSivKeyFormat, AesSivKey>", "body": "@Override\n  public KeyFactory<AesSivKeyFormat, AesSivKey> keyFactory() {\n    return new KeyFactory<AesSivKeyFormat, AesSivKey>(AesSivKeyFormat.class) {\n      @Override\n      public void validateKeyFormat(AesSivKeyFormat format) throws GeneralSecurityException {\n        if (format.getKeySize() != 64) {\n          throw new InvalidAlgorithmParameterException(\n              \"invalid key size: \" + format.getKeySize() + \". Valid keys must have 64 bytes.\");\n        }\n      }\n\n      @Override\n      public AesSivKeyFormat parseKeyFormat(ByteString byteString)\n          throws InvalidProtocolBufferException {\n        return AesSivKeyFormat.parseFrom(byteString, ExtensionRegistryLite.getEmptyRegistry());\n      }\n\n      @Override\n      public AesSivKey createKey(AesSivKeyFormat format) throws GeneralSecurityException {\n        return AesSivKey.newBuilder()\n            .setKeyValue(ByteString.copyFrom(Random.randBytes(format.getKeySize())))\n            .setVersion(getVersion())\n            .build();\n      }\n    };\n  }", "signature": "KeyFactory<AesSivKeyFormat, AesSivKey> keyFactory()", "full_signature": "@Override public KeyFactory<AesSivKeyFormat, AesSivKey> keyFactory()", "class_method_signature": "AesSivKeyManager.keyFactory()", "testcase": false, "constructor": false, "invocations": ["getKeySize", "getKeySize", "parseFrom", "getEmptyRegistry", "build", "setVersion", "setKeyValue", "newBuilder", "copyFrom", "randBytes", "getKeySize", "getVersion"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}