{"test_class": {"identifier": "OutputWriterHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "@Rule\n    public TemporaryFolder outputFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "outputFolder = new TemporaryFolder()", "var_name": "outputFolder"}, {"original_string": "private TaskExecutionContext context;", "modifier": "private", "type": "TaskExecutionContext", "declarator": "context", "var_name": "context"}], "file": "sejda-core/src/test/java/org/sejda/core/support/io/OutputWriterHelperTest.java"}, "test_case": {"identifier": "copyDirectorySkips", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void copyDirectorySkips() throws IOException {\n        File dest = folder.newFolder();\n        File tempFile = folder.newFile();\n        Map<String, File> files = populateWithOneExisting(dest, tempFile);\n        OutputWriterHelper.moveToDirectory(files, dest, ExistingOutputPolicy.SKIP, context);\n        assertEquals(2, dest.list().length);\n        assertEquals(1, context.notifiableTaskMetadata().taskOutput().size());\n    }", "signature": "void copyDirectorySkips()", "full_signature": "@Test public void copyDirectorySkips()", "class_method_signature": "OutputWriterHelperTest.copyDirectorySkips()", "testcase": true, "constructor": false, "invocations": ["newFolder", "newFile", "populateWithOneExisting", "moveToDirectory", "assertEquals", "list", "assertEquals", "size", "taskOutput", "notifiableTaskMetadata"]}, "focal_class": {"identifier": "OutputWriterHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(OutputWriterHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(OutputWriterHelper.class)", "var_name": "LOG"}], "methods": [{"identifier": "OutputWriterHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " OutputWriterHelper()", "full_signature": "private  OutputWriterHelper()", "class_method_signature": "OutputWriterHelper.OutputWriterHelper()", "testcase": false, "constructor": true}, {"identifier": "moveToFile", "parameters": "(Map<String, File> files, File outputFile, ExistingOutputPolicy existingOutputPolicy,\n            TaskExecutionContext executionContext)", "modifiers": "static", "return": "void", "signature": "void moveToFile(Map<String, File> files, File outputFile, ExistingOutputPolicy existingOutputPolicy,\n            TaskExecutionContext executionContext)", "full_signature": "static void moveToFile(Map<String, File> files, File outputFile, ExistingOutputPolicy existingOutputPolicy,\n            TaskExecutionContext executionContext)", "class_method_signature": "OutputWriterHelper.moveToFile(Map<String, File> files, File outputFile, ExistingOutputPolicy existingOutputPolicy,\n            TaskExecutionContext executionContext)", "testcase": false, "constructor": false}, {"identifier": "moveToDirectory", "parameters": "(Map<String, File> files, File outputDirectory,\n            ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "modifiers": "static", "return": "void", "signature": "void moveToDirectory(Map<String, File> files, File outputDirectory,\n            ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "full_signature": "static void moveToDirectory(Map<String, File> files, File outputDirectory,\n            ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "class_method_signature": "OutputWriterHelper.moveToDirectory(Map<String, File> files, File outputDirectory,\n            ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "testcase": false, "constructor": false}, {"identifier": "moveFile", "parameters": "(File input, File output, ExistingOutputPolicy existingOutputPolicy,\n            TaskExecutionContext executionContext)", "modifiers": "static", "return": "void", "signature": "void moveFile(File input, File output, ExistingOutputPolicy existingOutputPolicy,\n            TaskExecutionContext executionContext)", "full_signature": "static void moveFile(File input, File output, ExistingOutputPolicy existingOutputPolicy,\n            TaskExecutionContext executionContext)", "class_method_signature": "OutputWriterHelper.moveFile(File input, File output, ExistingOutputPolicy existingOutputPolicy,\n            TaskExecutionContext executionContext)", "testcase": false, "constructor": false}, {"identifier": "doMoveFile", "parameters": "(File input, File output)", "modifiers": "private static", "return": "void", "signature": "void doMoveFile(File input, File output)", "full_signature": "private static void doMoveFile(File input, File output)", "class_method_signature": "OutputWriterHelper.doMoveFile(File input, File output)", "testcase": false, "constructor": false}, {"identifier": "finalName", "parameters": "(String filename, int totalFilesNumber)", "modifiers": "private static", "return": "String", "signature": "String finalName(String filename, int totalFilesNumber)", "full_signature": "private static String finalName(String filename, int totalFilesNumber)", "class_method_signature": "OutputWriterHelper.finalName(String filename, int totalFilesNumber)", "testcase": false, "constructor": false}, {"identifier": "copyToStreamZipped", "parameters": "(Map<String, File> files, OutputStream out)", "modifiers": "static", "return": "void", "signature": "void copyToStreamZipped(Map<String, File> files, OutputStream out)", "full_signature": "static void copyToStreamZipped(Map<String, File> files, OutputStream out)", "class_method_signature": "OutputWriterHelper.copyToStreamZipped(Map<String, File> files, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "copyToStream", "parameters": "(File file, OutputStream out)", "modifiers": "static", "return": "void", "signature": "void copyToStream(File file, OutputStream out)", "full_signature": "static void copyToStream(File file, OutputStream out)", "class_method_signature": "OutputWriterHelper.copyToStream(File file, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(File file)", "modifiers": "private static", "return": "void", "signature": "void delete(File file)", "full_signature": "private static void delete(File file)", "class_method_signature": "OutputWriterHelper.delete(File file)", "testcase": false, "constructor": false}], "file": "sejda-core/src/main/java/org/sejda/core/support/io/OutputWriterHelper.java"}, "focal_method": {"identifier": "moveToDirectory", "parameters": "(Map<String, File> files, File outputDirectory,\n            ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "modifiers": "static", "return": "void", "body": "static void moveToDirectory(Map<String, File> files, File outputDirectory,\n            ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext) throws IOException {\n        if (!outputDirectory.exists() && !outputDirectory.mkdirs()) {\n            throw new IOException(String.format(\"Unable to make destination directory tree %s.\", outputDirectory));\n        }\n        if (!outputDirectory.isDirectory()) {\n            throw new IOException(String.format(\"Wrong output destination %s, must be a directory.\", outputDirectory));\n        }\n        for (Entry<String, File> entry : files.entrySet()) {\n            if (isBlank(entry.getKey())) {\n                throw new IOException(String.format(\n                        \"Unable to move %s to the output directory, no output name specified.\", entry.getValue()));\n            }\n            moveFile(entry.getValue(), new File(outputDirectory, finalName(entry.getKey(), files.size())),\n                    existingOutputPolicy,\n                    executionContext);\n        }\n    }", "signature": "void moveToDirectory(Map<String, File> files, File outputDirectory,\n            ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "full_signature": "static void moveToDirectory(Map<String, File> files, File outputDirectory,\n            ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "class_method_signature": "OutputWriterHelper.moveToDirectory(Map<String, File> files, File outputDirectory,\n            ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "testcase": false, "constructor": false, "invocations": ["exists", "mkdirs", "format", "isDirectory", "format", "entrySet", "isBlank", "getKey", "format", "getValue", "moveFile", "getValue", "finalName", "getKey", "size"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}