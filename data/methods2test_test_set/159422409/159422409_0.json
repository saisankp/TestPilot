{"test_class": {"identifier": "AsyncServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired AsyncService asyncService;", "modifier": "@Autowired", "type": "AsyncService", "declarator": "asyncService", "var_name": "asyncService"}], "file": "source-code/advanced/async-method-springboot/src/test/java/github/javaguide/asyncmethodspringboot/service/AsyncServiceTest.java"}, "test_case": {"identifier": "testCompletableFutureTask", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCompletableFutureTask() throws InterruptedException, ExecutionException {\n    // \u5f00\u59cb\u65f6\u95f4\n    long start = System.currentTimeMillis();\n    // \u5f00\u59cb\u6267\u884c\u5927\u91cf\u7684\u5f02\u6b65\u4efb\u52a1\n    List<String> words = Arrays.asList(\"F\", \"T\", \"S\", \"Z\", \"J\", \"C\");\n    List<CompletableFuture<List<String>>> completableFutureList =\n        words.stream()\n            .map(word -> asyncService.completableFutureTask(word))\n            .collect(Collectors.toList());\n    // CompletableFuture.join\uff08\uff09\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u4ed6\u4eec\u7684\u7ed3\u679c\u5e76\u5c06\u7ed3\u679c\u8fde\u63a5\u8d77\u6765\n    List<List<String>> results =\n        completableFutureList.stream().map(CompletableFuture::join).collect(Collectors.toList());\n    // \u6253\u5370\u7ed3\u679c\u4ee5\u53ca\u8fd0\u884c\u7a0b\u5e8f\u8fd0\u884c\u82b1\u8d39\u65f6\u95f4\n    System.out.println(\"Elapsed time: \" + (System.currentTimeMillis() - start));\n    System.out.println(results.toString());\n  }", "signature": "void testCompletableFutureTask()", "full_signature": "@Test public void testCompletableFutureTask()", "class_method_signature": "AsyncServiceTest.testCompletableFutureTask()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "asList", "collect", "map", "stream", "completableFutureTask", "toList", "collect", "map", "stream", "toList", "println", "currentTimeMillis", "println", "toString"]}, "focal_class": {"identifier": "AsyncService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AsyncService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AsyncService.class)", "var_name": "logger"}, {"original_string": "private List<String> movies =\n      new ArrayList<>(\n          Arrays.asList(\n              \"Forrest Gump\",\n              \"Titanic\",\n              \"Spirited Away\",\n              \"The Shawshank Redemption\",\n              \"Zootopia\",\n              \"Farewell \",\n              \"Joker\",\n              \"Crawl\"));", "modifier": "private", "type": "List<String>", "declarator": "movies =\n      new ArrayList<>(\n          Arrays.asList(\n              \"Forrest Gump\",\n              \"Titanic\",\n              \"Spirited Away\",\n              \"The Shawshank Redemption\",\n              \"Zootopia\",\n              \"Farewell \",\n              \"Joker\",\n              \"Crawl\"))", "var_name": "movies"}], "methods": [{"identifier": "completableFutureTask", "parameters": "(String start)", "modifiers": "@Async public", "return": "CompletableFuture<List<String>>", "signature": "CompletableFuture<List<String>> completableFutureTask(String start)", "full_signature": "@Async public CompletableFuture<List<String>> completableFutureTask(String start)", "class_method_signature": "AsyncService.completableFutureTask(String start)", "testcase": false, "constructor": false}], "file": "source-code/advanced/async-method-springboot/src/main/java/github/javaguide/asyncmethodspringboot/service/AsyncService.java"}, "focal_method": {"identifier": "completableFutureTask", "parameters": "(String start)", "modifiers": "@Async public", "return": "CompletableFuture<List<String>>", "body": "@Async\n  public CompletableFuture<List<String>> completableFutureTask(String start) {\n    logger.warn(Thread.currentThread().getName() + \"start this task!\");\n    // \u627e\u51fa\u6240\u6709\u4ee5 F \u5f00\u5934\u7684\u7535\u5f71\n    List<String> results =\n        movies.stream().filter(movie -> movie.startsWith(start)).collect(Collectors.toList());\n    // \u6a21\u62df\u8fd9\u662f\u4e00\u4e2a\u8017\u65f6\u7684\u4efb\u52a1\n    try {\n      Thread.sleep(1000L);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n    // \u8fd4\u56de\u4e00\u4e2a\u5df2\u7ecf\u7528\u7ed9\u5b9a\u503c\u5b8c\u6210\u7684\u65b0\u7684CompletableFuture\u3002\n    return CompletableFuture.completedFuture(results);\n  }", "signature": "CompletableFuture<List<String>> completableFutureTask(String start)", "full_signature": "@Async public CompletableFuture<List<String>> completableFutureTask(String start)", "class_method_signature": "AsyncService.completableFutureTask(String start)", "testcase": false, "constructor": false, "invocations": ["warn", "getName", "currentThread", "collect", "filter", "stream", "startsWith", "toList", "sleep", "printStackTrace", "completedFuture"]}, "repository": {"repo_id": 159422409, "url": "https://github.com/Snailclimb/springboot-guide", "stars": 1316, "created": "11/28/2018 1:05:07 AM +00:00", "updates": "2020-01-27T20:56:10+00:00", "fork": "False", "license": "licensed"}}