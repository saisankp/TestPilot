{"test_class": {"identifier": "MapViewportTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ReferencedEnvelope WORLD_1_1 = new ReferencedEnvelope(\n            150, 152, -33, -35, DefaultGeographicCRS.WGS84);", "modifier": "private static final", "type": "ReferencedEnvelope", "declarator": "WORLD_1_1 = new ReferencedEnvelope(\n            150, 152, -33, -35, DefaultGeographicCRS.WGS84)", "var_name": "WORLD_1_1"}, {"original_string": "private static final ReferencedEnvelope BIG_WORLD_1_1 = new ReferencedEnvelope(\n            140, 160, -30, -50, DefaultGeographicCRS.WGS84);", "modifier": "private static final", "type": "ReferencedEnvelope", "declarator": "BIG_WORLD_1_1 = new ReferencedEnvelope(\n            140, 160, -30, -50, DefaultGeographicCRS.WGS84)", "var_name": "BIG_WORLD_1_1"}, {"original_string": "private static final Rectangle SCREEN_1_1 = new Rectangle(100, 100);", "modifier": "private static final", "type": "Rectangle", "declarator": "SCREEN_1_1 = new Rectangle(100, 100)", "var_name": "SCREEN_1_1"}, {"original_string": "private static final Rectangle SCREEN_2_1 = new Rectangle(200, 100);", "modifier": "private static final", "type": "Rectangle", "declarator": "SCREEN_2_1 = new Rectangle(200, 100)", "var_name": "SCREEN_2_1"}, {"original_string": "private static final Rectangle SCREEN_1_2 = new Rectangle(100, 200);", "modifier": "private static final", "type": "Rectangle", "declarator": "SCREEN_1_2 = new Rectangle(100, 200)", "var_name": "SCREEN_1_2"}, {"original_string": "private static final double TOL = 1.0e-6d;", "modifier": "private static final", "type": "double", "declarator": "TOL = 1.0e-6d", "var_name": "TOL"}, {"original_string": "private static final Logger LOGGER = Logging.getLogger(\"org.geotools.map\");", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(\"org.geotools.map\")", "var_name": "LOGGER"}, {"original_string": "private static Level oldLevel;", "modifier": "private static", "type": "Level", "declarator": "oldLevel", "var_name": "oldLevel"}, {"original_string": "private Handler logHandler;", "modifier": "private", "type": "Handler", "declarator": "logHandler", "var_name": "logHandler"}, {"original_string": "private ByteArrayOutputStream logStream;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "logStream", "var_name": "logStream"}], "file": "modules/library/render/src/test/java/org/geotools/map/MapViewportTest.java"}, "test_case": {"identifier": "setBoundsWithAspectCorrection_2_1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setBoundsWithAspectCorrection_2_1() {\n        double w = WORLD_1_1.getWidth();\n        ReferencedEnvelope expected = new ReferencedEnvelope(\n                WORLD_1_1.getMinX() - w/2, WORLD_1_1.getMaxX() + w/2,\n                WORLD_1_1.getMinY(), WORLD_1_1.getMaxY(),\n                WORLD_1_1.getCoordinateReferenceSystem());\n\n        assertAspectCorrection(SCREEN_2_1, expected);\n    }", "signature": "void setBoundsWithAspectCorrection_2_1()", "full_signature": "@Test public void setBoundsWithAspectCorrection_2_1()", "class_method_signature": "MapViewportTest.setBoundsWithAspectCorrection_2_1()", "testcase": true, "constructor": false, "invocations": ["getWidth", "getMinX", "getMaxX", "getMinY", "getMaxY", "getCoordinateReferenceSystem", "assertAspectCorrection"]}, "focal_class": {"identifier": "MapViewport", "superclass": "", "interfaces": "", "fields": [{"original_string": "static protected final Logger LOGGER = Logging.getLogger(\"org.geotools.map\");", "modifier": "static protected final", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(\"org.geotools.map\")", "var_name": "LOGGER"}, {"original_string": "private final AtomicBoolean editable;", "modifier": "private final", "type": "AtomicBoolean", "declarator": "editable", "var_name": "editable"}, {"original_string": "private Rectangle screenArea;", "modifier": "private", "type": "Rectangle", "declarator": "screenArea", "var_name": "screenArea"}, {"original_string": "private ReferencedEnvelope bounds;", "modifier": "private", "type": "ReferencedEnvelope", "declarator": "bounds", "var_name": "bounds"}, {"original_string": "private AffineTransform screenToWorld;", "modifier": "private", "type": "AffineTransform", "declarator": "screenToWorld", "var_name": "screenToWorld"}, {"original_string": "private AffineTransform worldToScreen;", "modifier": "private", "type": "AffineTransform", "declarator": "worldToScreen", "var_name": "worldToScreen"}, {"original_string": "private CopyOnWriteArrayList<MapBoundsListener> boundsListeners;", "modifier": "private", "type": "CopyOnWriteArrayList<MapBoundsListener>", "declarator": "boundsListeners", "var_name": "boundsListeners"}, {"original_string": "private boolean matchingAspectRatio;", "modifier": "private", "type": "boolean", "declarator": "matchingAspectRatio", "var_name": "matchingAspectRatio"}, {"original_string": "private boolean hasCenteringTransforms;", "modifier": "private", "type": "boolean", "declarator": "hasCenteringTransforms", "var_name": "hasCenteringTransforms"}, {"original_string": "private final ReadWriteLock lock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReadWriteLock", "declarator": "lock = new ReentrantReadWriteLock()", "var_name": "lock"}], "methods": [{"identifier": "MapViewport", "parameters": "()", "modifiers": "public", "return": "", "signature": " MapViewport()", "full_signature": "public  MapViewport()", "class_method_signature": "MapViewport.MapViewport()", "testcase": false, "constructor": true}, {"identifier": "MapViewport", "parameters": "(boolean matchAspectRatio)", "modifiers": "public", "return": "", "signature": " MapViewport(boolean matchAspectRatio)", "full_signature": "public  MapViewport(boolean matchAspectRatio)", "class_method_signature": "MapViewport.MapViewport(boolean matchAspectRatio)", "testcase": false, "constructor": true}, {"identifier": "MapViewport", "parameters": "(ReferencedEnvelope bounds)", "modifiers": "public", "return": "", "signature": " MapViewport(ReferencedEnvelope bounds)", "full_signature": "public  MapViewport(ReferencedEnvelope bounds)", "class_method_signature": "MapViewport.MapViewport(ReferencedEnvelope bounds)", "testcase": false, "constructor": true}, {"identifier": "MapViewport", "parameters": "(ReferencedEnvelope bounds, boolean matchAspectRatio)", "modifiers": "public", "return": "", "signature": " MapViewport(ReferencedEnvelope bounds, boolean matchAspectRatio)", "full_signature": "public  MapViewport(ReferencedEnvelope bounds, boolean matchAspectRatio)", "class_method_signature": "MapViewport.MapViewport(ReferencedEnvelope bounds, boolean matchAspectRatio)", "testcase": false, "constructor": true}, {"identifier": "MapViewport", "parameters": "(MapViewport sourceViewport)", "modifiers": "public", "return": "", "signature": " MapViewport(MapViewport sourceViewport)", "full_signature": "public  MapViewport(MapViewport sourceViewport)", "class_method_signature": "MapViewport.MapViewport(MapViewport sourceViewport)", "testcase": false, "constructor": true}, {"identifier": "isEditable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEditable()", "full_signature": "public boolean isEditable()", "class_method_signature": "MapViewport.isEditable()", "testcase": false, "constructor": false}, {"identifier": "setEditable", "parameters": "(boolean editable)", "modifiers": "public", "return": "void", "signature": "void setEditable(boolean editable)", "full_signature": "public void setEditable(boolean editable)", "class_method_signature": "MapViewport.setEditable(boolean editable)", "testcase": false, "constructor": false}, {"identifier": "setMatchingAspectRatio", "parameters": "(boolean enabled)", "modifiers": "public", "return": "void", "signature": "void setMatchingAspectRatio(boolean enabled)", "full_signature": "public void setMatchingAspectRatio(boolean enabled)", "class_method_signature": "MapViewport.setMatchingAspectRatio(boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "isMatchingAspectRatio", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMatchingAspectRatio()", "full_signature": "public boolean isMatchingAspectRatio()", "class_method_signature": "MapViewport.isMatchingAspectRatio()", "testcase": false, "constructor": false}, {"identifier": "addMapBoundsListener", "parameters": "(MapBoundsListener listener)", "modifiers": "public", "return": "void", "signature": "void addMapBoundsListener(MapBoundsListener listener)", "full_signature": "public void addMapBoundsListener(MapBoundsListener listener)", "class_method_signature": "MapViewport.addMapBoundsListener(MapBoundsListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeMapBoundsListener", "parameters": "(MapBoundsListener listener)", "modifiers": "public", "return": "void", "signature": "void removeMapBoundsListener(MapBoundsListener listener)", "full_signature": "public void removeMapBoundsListener(MapBoundsListener listener)", "class_method_signature": "MapViewport.removeMapBoundsListener(MapBoundsListener listener)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "MapViewport.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "getBounds", "parameters": "()", "modifiers": "public", "return": "ReferencedEnvelope", "signature": "ReferencedEnvelope getBounds()", "full_signature": "public ReferencedEnvelope getBounds()", "class_method_signature": "MapViewport.getBounds()", "testcase": false, "constructor": false}, {"identifier": "setBounds", "parameters": "(ReferencedEnvelope requestedBounds)", "modifiers": "public", "return": "void", "signature": "void setBounds(ReferencedEnvelope requestedBounds)", "full_signature": "public void setBounds(ReferencedEnvelope requestedBounds)", "class_method_signature": "MapViewport.setBounds(ReferencedEnvelope requestedBounds)", "testcase": false, "constructor": false}, {"identifier": "copyBounds", "parameters": "(ReferencedEnvelope newBounds)", "modifiers": "private", "return": "void", "signature": "void copyBounds(ReferencedEnvelope newBounds)", "full_signature": "private void copyBounds(ReferencedEnvelope newBounds)", "class_method_signature": "MapViewport.copyBounds(ReferencedEnvelope newBounds)", "testcase": false, "constructor": false}, {"identifier": "getScreenArea", "parameters": "()", "modifiers": "public", "return": "Rectangle", "signature": "Rectangle getScreenArea()", "full_signature": "public Rectangle getScreenArea()", "class_method_signature": "MapViewport.getScreenArea()", "testcase": false, "constructor": false}, {"identifier": "setScreenArea", "parameters": "(Rectangle screenArea)", "modifiers": "public", "return": "void", "signature": "void setScreenArea(Rectangle screenArea)", "full_signature": "public void setScreenArea(Rectangle screenArea)", "class_method_signature": "MapViewport.setScreenArea(Rectangle screenArea)", "testcase": false, "constructor": false}, {"identifier": "doSetScreenArea", "parameters": "(Rectangle screenArea)", "modifiers": "private", "return": "void", "signature": "void doSetScreenArea(Rectangle screenArea)", "full_signature": "private void doSetScreenArea(Rectangle screenArea)", "class_method_signature": "MapViewport.doSetScreenArea(Rectangle screenArea)", "testcase": false, "constructor": false}, {"identifier": "getCoordinateReferenceSystem", "parameters": "()", "modifiers": "public", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getCoordinateReferenceSystem()", "full_signature": "public CoordinateReferenceSystem getCoordinateReferenceSystem()", "class_method_signature": "MapViewport.getCoordinateReferenceSystem()", "testcase": false, "constructor": false}, {"identifier": "setCoordinateReferenceSystem", "parameters": "(CoordinateReferenceSystem crs)", "modifiers": "public", "return": "void", "signature": "void setCoordinateReferenceSystem(CoordinateReferenceSystem crs)", "full_signature": "public void setCoordinateReferenceSystem(CoordinateReferenceSystem crs)", "class_method_signature": "MapViewport.setCoordinateReferenceSystem(CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "fireMapBoundsListenerMapBoundsChanged", "parameters": "(Type type, ReferencedEnvelope oldBounds,\n            ReferencedEnvelope newBounds)", "modifiers": "protected", "return": "void", "signature": "void fireMapBoundsListenerMapBoundsChanged(Type type, ReferencedEnvelope oldBounds,\n            ReferencedEnvelope newBounds)", "full_signature": "protected void fireMapBoundsListenerMapBoundsChanged(Type type, ReferencedEnvelope oldBounds,\n            ReferencedEnvelope newBounds)", "class_method_signature": "MapViewport.fireMapBoundsListenerMapBoundsChanged(Type type, ReferencedEnvelope oldBounds,\n            ReferencedEnvelope newBounds)", "testcase": false, "constructor": false}, {"identifier": "getScreenToWorld", "parameters": "()", "modifiers": "public", "return": "AffineTransform", "signature": "AffineTransform getScreenToWorld()", "full_signature": "public AffineTransform getScreenToWorld()", "class_method_signature": "MapViewport.getScreenToWorld()", "testcase": false, "constructor": false}, {"identifier": "getWorldToScreen", "parameters": "()", "modifiers": "public", "return": "AffineTransform", "signature": "AffineTransform getWorldToScreen()", "full_signature": "public AffineTransform getWorldToScreen()", "class_method_signature": "MapViewport.getWorldToScreen()", "testcase": false, "constructor": false}, {"identifier": "setTransforms", "parameters": "(boolean newBounds)", "modifiers": "private", "return": "void", "signature": "void setTransforms(boolean newBounds)", "full_signature": "private void setTransforms(boolean newBounds)", "class_method_signature": "MapViewport.setTransforms(boolean newBounds)", "testcase": false, "constructor": false}, {"identifier": "calculateCenteringTransforms", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void calculateCenteringTransforms()", "full_signature": "private void calculateCenteringTransforms()", "class_method_signature": "MapViewport.calculateCenteringTransforms()", "testcase": false, "constructor": false}, {"identifier": "calculateSimpleTransforms", "parameters": "(ReferencedEnvelope requestedBounds)", "modifiers": "private", "return": "void", "signature": "void calculateSimpleTransforms(ReferencedEnvelope requestedBounds)", "full_signature": "private void calculateSimpleTransforms(ReferencedEnvelope requestedBounds)", "class_method_signature": "MapViewport.calculateSimpleTransforms(ReferencedEnvelope requestedBounds)", "testcase": false, "constructor": false}, {"identifier": "calculateActualBounds", "parameters": "()", "modifiers": "private", "return": "ReferencedEnvelope", "signature": "ReferencedEnvelope calculateActualBounds()", "full_signature": "private ReferencedEnvelope calculateActualBounds()", "class_method_signature": "MapViewport.calculateActualBounds()", "testcase": false, "constructor": false}, {"identifier": "checkEditable", "parameters": "(String methodName)", "modifiers": "private", "return": "boolean", "signature": "boolean checkEditable(String methodName)", "full_signature": "private boolean checkEditable(String methodName)", "class_method_signature": "MapViewport.checkEditable(String methodName)", "testcase": false, "constructor": false}], "file": "modules/library/render/src/main/java/org/geotools/map/MapViewport.java"}, "focal_method": {"identifier": "getCoordinateReferenceSystem", "parameters": "()", "modifiers": "public", "return": "CoordinateReferenceSystem", "body": "public CoordinateReferenceSystem getCoordinateReferenceSystem() {\n        lock.readLock().lock();\n        try {\n            return bounds.getCoordinateReferenceSystem();\n        } finally {\n            lock.readLock().unlock();\n        }\n    }", "signature": "CoordinateReferenceSystem getCoordinateReferenceSystem()", "full_signature": "public CoordinateReferenceSystem getCoordinateReferenceSystem()", "class_method_signature": "MapViewport.getCoordinateReferenceSystem()", "testcase": false, "constructor": false, "invocations": ["lock", "readLock", "getCoordinateReferenceSystem", "unlock", "readLock"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}