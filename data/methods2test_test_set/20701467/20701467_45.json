{"test_class": {"identifier": "FlowWriterServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@MockitoAnnotations.Mock\n    private SalFlowService salFlowService;", "modifier": "@MockitoAnnotations.Mock\n    private", "type": "SalFlowService", "declarator": "salFlowService", "var_name": "salFlowService"}, {"original_string": "private FlowWriterServiceImpl flowWriterService;", "modifier": "private", "type": "FlowWriterServiceImpl", "declarator": "flowWriterService", "var_name": "flowWriterService"}, {"original_string": "private InstanceIdentifier<NodeConnector> nodeConnectorInstanceIdentifier;", "modifier": "private", "type": "InstanceIdentifier<NodeConnector>", "declarator": "nodeConnectorInstanceIdentifier", "var_name": "nodeConnectorInstanceIdentifier"}, {"original_string": "private NodeConnectorRef nodeConnectorRef;", "modifier": "private", "type": "NodeConnectorRef", "declarator": "nodeConnectorRef", "var_name": "nodeConnectorRef"}], "file": "l2switch-main/src/test/java/org/opendaylight/l2switch/flow/FlowWriterServiceImplTest.java"}, "test_case": {"identifier": "addMacToMacFlowTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addMacToMacFlowTest() {\n\n        nodeConnectorInstanceIdentifier = InstanceIdentifier.builder(Nodes.class)\n                .child(Node.class, new NodeKey(new NodeId(\"node-id\")))\n                .child(NodeConnector.class, new NodeConnectorKey(new NodeConnectorId(\"nodeconnector-id\"))).build();\n        nodeConnectorRef = new NodeConnectorRef(nodeConnectorInstanceIdentifier);\n\n        MacAddress sourceMac = new MacAddress(\"00:00:ac:f0:01:01\");\n        MacAddress destMac = new MacAddress(\"00:00:ac:f0:02:02\");\n\n        flowWriterService.addMacToMacFlow(sourceMac, destMac, nodeConnectorRef);\n        verify(salFlowService, times(1)).addFlow(any(AddFlowInput.class));\n    }", "signature": "void addMacToMacFlowTest()", "full_signature": "@Test public void addMacToMacFlowTest()", "class_method_signature": "FlowWriterServiceImplTest.addMacToMacFlowTest()", "testcase": true, "constructor": false, "invocations": ["build", "child", "child", "builder", "addMacToMacFlow", "addFlow", "verify", "times", "any"]}, "focal_class": {"identifier": "FlowWriterServiceImpl", "superclass": "", "interfaces": "implements FlowWriterService", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FlowWriterServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FlowWriterServiceImpl.class)", "var_name": "LOG"}, {"original_string": "private static final String FLOW_ID_PREFIX = \"L2switch-\";", "modifier": "private static final", "type": "String", "declarator": "FLOW_ID_PREFIX = \"L2switch-\"", "var_name": "FLOW_ID_PREFIX"}, {"original_string": "private final SalFlowService salFlowService;", "modifier": "private final", "type": "SalFlowService", "declarator": "salFlowService", "var_name": "salFlowService"}, {"original_string": "private short flowTableId;", "modifier": "private", "type": "short", "declarator": "flowTableId", "var_name": "flowTableId"}, {"original_string": "private int flowPriority;", "modifier": "private", "type": "int", "declarator": "flowPriority", "var_name": "flowPriority"}, {"original_string": "private int flowIdleTimeout;", "modifier": "private", "type": "int", "declarator": "flowIdleTimeout", "var_name": "flowIdleTimeout"}, {"original_string": "private int flowHardTimeout;", "modifier": "private", "type": "int", "declarator": "flowHardTimeout", "var_name": "flowHardTimeout"}, {"original_string": "private final AtomicLong flowIdInc = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "flowIdInc = new AtomicLong()", "var_name": "flowIdInc"}, {"original_string": "private final AtomicLong flowCookieInc = new AtomicLong(0x2a00000000000000L);", "modifier": "private final", "type": "AtomicLong", "declarator": "flowCookieInc = new AtomicLong(0x2a00000000000000L)", "var_name": "flowCookieInc"}], "methods": [{"identifier": "FlowWriterServiceImpl", "parameters": "(SalFlowService salFlowService)", "modifiers": "public", "return": "", "signature": " FlowWriterServiceImpl(SalFlowService salFlowService)", "full_signature": "public  FlowWriterServiceImpl(SalFlowService salFlowService)", "class_method_signature": "FlowWriterServiceImpl.FlowWriterServiceImpl(SalFlowService salFlowService)", "testcase": false, "constructor": true}, {"identifier": "setFlowTableId", "parameters": "(short flowTableId)", "modifiers": "public", "return": "void", "signature": "void setFlowTableId(short flowTableId)", "full_signature": "public void setFlowTableId(short flowTableId)", "class_method_signature": "FlowWriterServiceImpl.setFlowTableId(short flowTableId)", "testcase": false, "constructor": false}, {"identifier": "setFlowPriority", "parameters": "(int flowPriority)", "modifiers": "public", "return": "void", "signature": "void setFlowPriority(int flowPriority)", "full_signature": "public void setFlowPriority(int flowPriority)", "class_method_signature": "FlowWriterServiceImpl.setFlowPriority(int flowPriority)", "testcase": false, "constructor": false}, {"identifier": "setFlowIdleTimeout", "parameters": "(int flowIdleTimeout)", "modifiers": "public", "return": "void", "signature": "void setFlowIdleTimeout(int flowIdleTimeout)", "full_signature": "public void setFlowIdleTimeout(int flowIdleTimeout)", "class_method_signature": "FlowWriterServiceImpl.setFlowIdleTimeout(int flowIdleTimeout)", "testcase": false, "constructor": false}, {"identifier": "setFlowHardTimeout", "parameters": "(int flowHardTimeout)", "modifiers": "public", "return": "void", "signature": "void setFlowHardTimeout(int flowHardTimeout)", "full_signature": "public void setFlowHardTimeout(int flowHardTimeout)", "class_method_signature": "FlowWriterServiceImpl.setFlowHardTimeout(int flowHardTimeout)", "testcase": false, "constructor": false}, {"identifier": "addMacToMacFlow", "parameters": "(MacAddress sourceMac, MacAddress destMac, NodeConnectorRef destNodeConnectorRef)", "modifiers": "@Override public", "return": "void", "signature": "void addMacToMacFlow(MacAddress sourceMac, MacAddress destMac, NodeConnectorRef destNodeConnectorRef)", "full_signature": "@Override public void addMacToMacFlow(MacAddress sourceMac, MacAddress destMac, NodeConnectorRef destNodeConnectorRef)", "class_method_signature": "FlowWriterServiceImpl.addMacToMacFlow(MacAddress sourceMac, MacAddress destMac, NodeConnectorRef destNodeConnectorRef)", "testcase": false, "constructor": false}, {"identifier": "addBidirectionalMacToMacFlows", "parameters": "(MacAddress sourceMac, NodeConnectorRef sourceNodeConnectorRef,\n            MacAddress destMac, NodeConnectorRef destNodeConnectorRef)", "modifiers": "@Override public", "return": "void", "signature": "void addBidirectionalMacToMacFlows(MacAddress sourceMac, NodeConnectorRef sourceNodeConnectorRef,\n            MacAddress destMac, NodeConnectorRef destNodeConnectorRef)", "full_signature": "@Override public void addBidirectionalMacToMacFlows(MacAddress sourceMac, NodeConnectorRef sourceNodeConnectorRef,\n            MacAddress destMac, NodeConnectorRef destNodeConnectorRef)", "class_method_signature": "FlowWriterServiceImpl.addBidirectionalMacToMacFlows(MacAddress sourceMac, NodeConnectorRef sourceNodeConnectorRef,\n            MacAddress destMac, NodeConnectorRef destNodeConnectorRef)", "testcase": false, "constructor": false}, {"identifier": "buildFlowPath", "parameters": "(NodeConnectorRef nodeConnectorRef, TableKey flowTableKey)", "modifiers": "private", "return": "InstanceIdentifier<Flow>", "signature": "InstanceIdentifier<Flow> buildFlowPath(NodeConnectorRef nodeConnectorRef, TableKey flowTableKey)", "full_signature": "private InstanceIdentifier<Flow> buildFlowPath(NodeConnectorRef nodeConnectorRef, TableKey flowTableKey)", "class_method_signature": "FlowWriterServiceImpl.buildFlowPath(NodeConnectorRef nodeConnectorRef, TableKey flowTableKey)", "testcase": false, "constructor": false}, {"identifier": "createMacToMacFlow", "parameters": "(Short tableId, int priority, MacAddress sourceMac, MacAddress destMac,\n            NodeConnectorRef destPort)", "modifiers": "private", "return": "Flow", "signature": "Flow createMacToMacFlow(Short tableId, int priority, MacAddress sourceMac, MacAddress destMac,\n            NodeConnectorRef destPort)", "full_signature": "private Flow createMacToMacFlow(Short tableId, int priority, MacAddress sourceMac, MacAddress destMac,\n            NodeConnectorRef destPort)", "class_method_signature": "FlowWriterServiceImpl.createMacToMacFlow(Short tableId, int priority, MacAddress sourceMac, MacAddress destMac,\n            NodeConnectorRef destPort)", "testcase": false, "constructor": false}, {"identifier": "writeFlowToConfigData", "parameters": "(InstanceIdentifier<Flow> flowPath, Flow flow)", "modifiers": "private", "return": "Future<RpcResult<AddFlowOutput>>", "signature": "Future<RpcResult<AddFlowOutput>> writeFlowToConfigData(InstanceIdentifier<Flow> flowPath, Flow flow)", "full_signature": "private Future<RpcResult<AddFlowOutput>> writeFlowToConfigData(InstanceIdentifier<Flow> flowPath, Flow flow)", "class_method_signature": "FlowWriterServiceImpl.writeFlowToConfigData(InstanceIdentifier<Flow> flowPath, Flow flow)", "testcase": false, "constructor": false}], "file": "l2switch-main/src/main/java/org/opendaylight/l2switch/flow/FlowWriterServiceImpl.java"}, "focal_method": {"identifier": "addMacToMacFlow", "parameters": "(MacAddress sourceMac, MacAddress destMac, NodeConnectorRef destNodeConnectorRef)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void addMacToMacFlow(MacAddress sourceMac, MacAddress destMac, NodeConnectorRef destNodeConnectorRef) {\n\n        Preconditions.checkNotNull(destMac, \"Destination mac address should not be null.\");\n        Preconditions.checkNotNull(destNodeConnectorRef, \"Destination port should not be null.\");\n\n        // do not add flow if both macs are same.\n        if (sourceMac != null && destMac.equals(sourceMac)) {\n            LOG.info(\"In addMacToMacFlow: No flows added. Source and Destination mac are same.\");\n            return;\n        }\n\n        // get flow table key\n        TableKey flowTableKey = new TableKey(flowTableId);\n\n        // build a flow path based on node connector to program flow\n        InstanceIdentifier<Flow> flowPath = buildFlowPath(destNodeConnectorRef, flowTableKey);\n\n        // build a flow that target given mac id\n        Flow flowBody = createMacToMacFlow(flowTableKey.getId(), flowPriority, sourceMac, destMac,\n                destNodeConnectorRef);\n\n        // commit the flow in config data\n        writeFlowToConfigData(flowPath, flowBody);\n    }", "signature": "void addMacToMacFlow(MacAddress sourceMac, MacAddress destMac, NodeConnectorRef destNodeConnectorRef)", "full_signature": "@Override public void addMacToMacFlow(MacAddress sourceMac, MacAddress destMac, NodeConnectorRef destNodeConnectorRef)", "class_method_signature": "FlowWriterServiceImpl.addMacToMacFlow(MacAddress sourceMac, MacAddress destMac, NodeConnectorRef destNodeConnectorRef)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "equals", "info", "buildFlowPath", "createMacToMacFlow", "getId", "writeFlowToConfigData"]}, "repository": {"repo_id": 20701467, "url": "https://github.com/opendaylight/l2switch", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 25, "size": 4178, "license": "licensed"}}