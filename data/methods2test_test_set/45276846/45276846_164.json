{"test_class": {"identifier": "TestJsonMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int NUM_THREADS = 2;", "modifier": "private static final", "type": "int", "declarator": "NUM_THREADS = 2", "var_name": "NUM_THREADS"}], "file": "xenon-common/src/test/java/com/vmware/xenon/common/serialization/TestJsonMapper.java"}, "test_case": {"identifier": "testJsonOptions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testJsonOptions() {\n        TestGsonConfiguration.AnnotatedDoc testDoc = new TestGsonConfiguration.AnnotatedDoc();\n        testDoc.value = new TestGsonConfiguration.SomeComplexObject(\"complexA\", \"complexB\");\n        testDoc.sensitivePropertyOptions = \"sensitive data1\";\n        testDoc.sensitiveUsageOption = \"sensitive data2\";\n        Pattern containsWhitespacePattern = Pattern.compile(\"\\\\s\");\n\n        String jsonIncludeSensitiveAndBuiltInPrettyPrinted = Utils.toJson(EnumSet.noneOf(JsonMapper.JsonOptions.class), testDoc);\n        assertThat(jsonIncludeSensitiveAndBuiltInPrettyPrinted, containsString(\"complexA\"));\n        assertThat(jsonIncludeSensitiveAndBuiltInPrettyPrinted, containsString(\"sensitive\"));\n        assertThat(jsonIncludeSensitiveAndBuiltInPrettyPrinted, containsString(ServiceDocument.FIELD_NAME_VERSION));\n        assertTrue(\"pretty-printed JSON should have whitespaces\",\n                containsWhitespacePattern.matcher(jsonIncludeSensitiveAndBuiltInPrettyPrinted).find());\n\n        String jsonExcludeSensitiveIncludesBuiltIn = Utils.toJson(EnumSet.of(JsonMapper.JsonOptions.EXCLUDE_SENSITIVE), testDoc);\n        assertThat(jsonExcludeSensitiveIncludesBuiltIn, containsString(\"complexA\"));\n        assertThat(jsonExcludeSensitiveIncludesBuiltIn, not(containsString(\"sensitive\")));\n        assertThat(jsonExcludeSensitiveIncludesBuiltIn, containsString(ServiceDocument.FIELD_NAME_VERSION));\n\n        String jsonIncludeSensitiveExcludeBuiltIn = Utils.toJson(EnumSet.of(JsonMapper.JsonOptions.EXCLUDE_BUILTIN), testDoc);\n        assertThat(jsonIncludeSensitiveExcludeBuiltIn, containsString(\"complexA\"));\n        assertThat(jsonIncludeSensitiveExcludeBuiltIn, containsString(\"sensitive\"));\n        assertThat(jsonIncludeSensitiveExcludeBuiltIn, not(containsString(ServiceDocument.FIELD_NAME_VERSION)));\n\n        String jsonExcludeSensitiveAndBuiltInCompact = Utils.toJson(\n                EnumSet.of(JsonMapper.JsonOptions.EXCLUDE_SENSITIVE, JsonMapper.JsonOptions.EXCLUDE_BUILTIN, JsonMapper.JsonOptions.COMPACT),\n                testDoc);\n        assertThat(jsonExcludeSensitiveAndBuiltInCompact, containsString(\"complexA\"));\n        assertThat(jsonExcludeSensitiveAndBuiltInCompact, not(containsString(\"sensitive\")));\n        assertThat(jsonExcludeSensitiveAndBuiltInCompact, not(containsString(ServiceDocument.FIELD_NAME_VERSION)));\n        assertFalse(\"compact JSON should not have whitespaces\",\n                containsWhitespacePattern.matcher(jsonExcludeSensitiveAndBuiltInCompact).find());\n    }", "signature": "void testJsonOptions()", "full_signature": "@Test public void testJsonOptions()", "class_method_signature": "TestJsonMapper.testJsonOptions()", "testcase": true, "constructor": false, "invocations": ["compile", "toJson", "noneOf", "assertThat", "containsString", "assertThat", "containsString", "assertThat", "containsString", "assertTrue", "find", "matcher", "toJson", "of", "assertThat", "containsString", "assertThat", "not", "containsString", "assertThat", "containsString", "toJson", "of", "assertThat", "containsString", "assertThat", "containsString", "assertThat", "not", "containsString", "toJson", "of", "assertThat", "containsString", "assertThat", "not", "containsString", "assertThat", "not", "containsString", "assertFalse", "find", "matcher"]}, "focal_class": {"identifier": "JsonMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final boolean JSON_SUPPRESS_GSON_SERIALIZATION_ERRORS = XenonConfiguration.bool(\n            \"json\",\n            \"suppressGsonSerializationErrors\",\n            false\n    );", "modifier": "private static final", "type": "boolean", "declarator": "JSON_SUPPRESS_GSON_SERIALIZATION_ERRORS = XenonConfiguration.bool(\n            \"json\",\n            \"suppressGsonSerializationErrors\",\n            false\n    )", "var_name": "JSON_SUPPRESS_GSON_SERIALIZATION_ERRORS"}, {"original_string": "private static final boolean DISABLE_OBJECT_COLLECTION_AND_MAP_JSON_ADAPTERS = XenonConfiguration.bool(\n            JsonMapper.class,\n            \"disableObjectCollectionAndMapJsonAdapters\",\n            false\n    );", "modifier": "private static final", "type": "boolean", "declarator": "DISABLE_OBJECT_COLLECTION_AND_MAP_JSON_ADAPTERS = XenonConfiguration.bool(\n            JsonMapper.class,\n            \"disableObjectCollectionAndMapJsonAdapters\",\n            false\n    )", "var_name": "DISABLE_OBJECT_COLLECTION_AND_MAP_JSON_ADAPTERS"}, {"original_string": "private static final int MAX_SERIALIZATION_ATTEMPTS = 100;", "modifier": "private static final", "type": "int", "declarator": "MAX_SERIALIZATION_ATTEMPTS = 100", "var_name": "MAX_SERIALIZATION_ATTEMPTS"}, {"original_string": "private static final String JSON_INDENT = \"  \";", "modifier": "private static final", "type": "String", "declarator": "JSON_INDENT = \"  \"", "var_name": "JSON_INDENT"}, {"original_string": "private final Gson compact;", "modifier": "private final", "type": "Gson", "declarator": "compact", "var_name": "compact"}, {"original_string": "private Gson hashing;", "modifier": "private", "type": "Gson", "declarator": "hashing", "var_name": "hashing"}, {"original_string": "private final Gson compactSensitive;", "modifier": "private final", "type": "Gson", "declarator": "compactSensitive", "var_name": "compactSensitive"}, {"original_string": "private final Gson compactExcludeBuiltin;", "modifier": "private final", "type": "Gson", "declarator": "compactExcludeBuiltin", "var_name": "compactExcludeBuiltin"}, {"original_string": "private final Gson compactSensitiveAndExcludeBuiltin;", "modifier": "private final", "type": "Gson", "declarator": "compactSensitiveAndExcludeBuiltin", "var_name": "compactSensitiveAndExcludeBuiltin"}, {"original_string": "private boolean jsonSuppressGsonSerializationErrors = JSON_SUPPRESS_GSON_SERIALIZATION_ERRORS;", "modifier": "private", "type": "boolean", "declarator": "jsonSuppressGsonSerializationErrors = JSON_SUPPRESS_GSON_SERIALIZATION_ERRORS", "var_name": "jsonSuppressGsonSerializationErrors"}], "methods": [{"identifier": "JsonMapper", "parameters": "()", "modifiers": "public", "return": "", "signature": " JsonMapper()", "full_signature": "public  JsonMapper()", "class_method_signature": "JsonMapper.JsonMapper()", "testcase": false, "constructor": true}, {"identifier": "JsonMapper", "parameters": "(Consumer<GsonBuilder> gsonConfigCallback)", "modifiers": "public", "return": "", "signature": " JsonMapper(Consumer<GsonBuilder> gsonConfigCallback)", "full_signature": "public  JsonMapper(Consumer<GsonBuilder> gsonConfigCallback)", "class_method_signature": "JsonMapper.JsonMapper(Consumer<GsonBuilder> gsonConfigCallback)", "testcase": false, "constructor": true}, {"identifier": "JsonMapper", "parameters": "(Gson compact, Gson compactSensitive)", "modifiers": "public", "return": "", "signature": " JsonMapper(Gson compact, Gson compactSensitive)", "full_signature": "public  JsonMapper(Gson compact, Gson compactSensitive)", "class_method_signature": "JsonMapper.JsonMapper(Gson compact, Gson compactSensitive)", "testcase": false, "constructor": true}, {"identifier": "createHashingGson", "parameters": "(Consumer<GsonBuilder> gsonConfigCallback)", "modifiers": "private", "return": "Gson", "signature": "Gson createHashingGson(Consumer<GsonBuilder> gsonConfigCallback)", "full_signature": "private Gson createHashingGson(Consumer<GsonBuilder> gsonConfigCallback)", "class_method_signature": "JsonMapper.createHashingGson(Consumer<GsonBuilder> gsonConfigCallback)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(Object body)", "modifiers": "public", "return": "String", "signature": "String toJson(Object body)", "full_signature": "public String toJson(Object body)", "class_method_signature": "JsonMapper.toJson(Object body)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(Object body, Appendable appendable)", "modifiers": "public", "return": "void", "signature": "void toJson(Object body, Appendable appendable)", "full_signature": "public void toJson(Object body, Appendable appendable)", "class_method_signature": "JsonMapper.toJson(Object body, Appendable appendable)", "testcase": false, "constructor": false}, {"identifier": "toJsonElement", "parameters": "(Object body)", "modifiers": "public", "return": "JsonElement", "signature": "JsonElement toJsonElement(Object body)", "full_signature": "public JsonElement toJsonElement(Object body)", "class_method_signature": "JsonMapper.toJsonElement(Object body)", "testcase": false, "constructor": false}, {"identifier": "toJsonHtml", "parameters": "(Object body)", "modifiers": "public", "return": "String", "signature": "String toJsonHtml(Object body)", "full_signature": "public String toJsonHtml(Object body)", "class_method_signature": "JsonMapper.toJsonHtml(Object body)", "testcase": false, "constructor": false}, {"identifier": "getGsonForOptions", "parameters": "(Set<JsonOptions> options)", "modifiers": "private", "return": "Gson", "signature": "Gson getGsonForOptions(Set<JsonOptions> options)", "full_signature": "private Gson getGsonForOptions(Set<JsonOptions> options)", "class_method_signature": "JsonMapper.getGsonForOptions(Set<JsonOptions> options)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(Set<JsonOptions> options, Object body, Appendable appendable)", "modifiers": "public", "return": "void", "signature": "void toJson(Set<JsonOptions> options, Object body, Appendable appendable)", "full_signature": "public void toJson(Set<JsonOptions> options, Object body, Appendable appendable)", "class_method_signature": "JsonMapper.toJson(Set<JsonOptions> options, Object body, Appendable appendable)", "testcase": false, "constructor": false}, {"identifier": "handleIllegalStateException", "parameters": "(IllegalStateException e, int i)", "modifiers": "private", "return": "void", "signature": "void handleIllegalStateException(IllegalStateException e, int i)", "full_signature": "private void handleIllegalStateException(IllegalStateException e, int i)", "class_method_signature": "JsonMapper.handleIllegalStateException(IllegalStateException e, int i)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(Object json, Class<T> clazz)", "modifiers": "public", "return": "T", "signature": "T fromJson(Object json, Class<T> clazz)", "full_signature": "public T fromJson(Object json, Class<T> clazz)", "class_method_signature": "JsonMapper.fromJson(Object json, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(Object json, Type type)", "modifiers": "public", "return": "T", "signature": "T fromJson(Object json, Type type)", "full_signature": "public T fromJson(Object json, Type type)", "class_method_signature": "JsonMapper.fromJson(Object json, Type type)", "testcase": false, "constructor": false}, {"identifier": "setJsonSuppressGsonSerializationErrors", "parameters": "(boolean suppressErrors)", "modifiers": "public", "return": "void", "signature": "void setJsonSuppressGsonSerializationErrors(boolean suppressErrors)", "full_signature": "public void setJsonSuppressGsonSerializationErrors(boolean suppressErrors)", "class_method_signature": "JsonMapper.setJsonSuppressGsonSerializationErrors(boolean suppressErrors)", "testcase": false, "constructor": false}, {"identifier": "createDefaultGson", "parameters": "(EnumSet<JsonOptions> options)", "modifiers": "private static", "return": "Gson", "signature": "Gson createDefaultGson(EnumSet<JsonOptions> options)", "full_signature": "private static Gson createDefaultGson(EnumSet<JsonOptions> options)", "class_method_signature": "JsonMapper.createDefaultGson(EnumSet<JsonOptions> options)", "testcase": false, "constructor": false}, {"identifier": "createCustomGson", "parameters": "(EnumSet<JsonOptions> options, Consumer<GsonBuilder> gsonConfigCallback)", "modifiers": "private static", "return": "Gson", "signature": "Gson createCustomGson(EnumSet<JsonOptions> options, Consumer<GsonBuilder> gsonConfigCallback)", "full_signature": "private static Gson createCustomGson(EnumSet<JsonOptions> options, Consumer<GsonBuilder> gsonConfigCallback)", "class_method_signature": "JsonMapper.createCustomGson(EnumSet<JsonOptions> options, Consumer<GsonBuilder> gsonConfigCallback)", "testcase": false, "constructor": false}, {"identifier": "createDefaultGsonBuilder", "parameters": "(EnumSet<JsonOptions> options)", "modifiers": "public static", "return": "GsonBuilder", "signature": "GsonBuilder createDefaultGsonBuilder(EnumSet<JsonOptions> options)", "full_signature": "public static GsonBuilder createDefaultGsonBuilder(EnumSet<JsonOptions> options)", "class_method_signature": "JsonMapper.createDefaultGsonBuilder(EnumSet<JsonOptions> options)", "testcase": false, "constructor": false}, {"identifier": "registerCommonGsonTypeAdapters", "parameters": "(GsonBuilder bldr)", "modifiers": "private static", "return": "void", "signature": "void registerCommonGsonTypeAdapters(GsonBuilder bldr)", "full_signature": "private static void registerCommonGsonTypeAdapters(GsonBuilder bldr)", "class_method_signature": "JsonMapper.registerCommonGsonTypeAdapters(GsonBuilder bldr)", "testcase": false, "constructor": false}, {"identifier": "toJsonHtml", "parameters": "(Object body, Appendable appendable)", "modifiers": "public", "return": "void", "signature": "void toJsonHtml(Object body, Appendable appendable)", "full_signature": "public void toJsonHtml(Object body, Appendable appendable)", "class_method_signature": "JsonMapper.toJsonHtml(Object body, Appendable appendable)", "testcase": false, "constructor": false}, {"identifier": "makePrettyJsonWriter", "parameters": "(Appendable appendable)", "modifiers": "private", "return": "JsonWriter", "signature": "JsonWriter makePrettyJsonWriter(Appendable appendable)", "full_signature": "private JsonWriter makePrettyJsonWriter(Appendable appendable)", "class_method_signature": "JsonMapper.makePrettyJsonWriter(Appendable appendable)", "testcase": false, "constructor": false}, {"identifier": "hashJson", "parameters": "(Object body, long seed)", "modifiers": "public", "return": "long", "signature": "long hashJson(Object body, long seed)", "full_signature": "public long hashJson(Object body, long seed)", "class_method_signature": "JsonMapper.hashJson(Object body, long seed)", "testcase": false, "constructor": false}], "file": "xenon-common/src/main/java/com/vmware/xenon/common/serialization/JsonMapper.java"}, "focal_method": {"identifier": "toJson", "parameters": "(Object body)", "modifiers": "public", "return": "String", "body": "public String toJson(Object body) {\n        for (int i = 1; ; i++) {\n            try {\n                return this.compact.toJson(body);\n            } catch (IllegalStateException e) {\n                handleIllegalStateException(e, i);\n            }\n        }\n    }", "signature": "String toJson(Object body)", "full_signature": "public String toJson(Object body)", "class_method_signature": "JsonMapper.toJson(Object body)", "testcase": false, "constructor": false, "invocations": ["toJson", "handleIllegalStateException"]}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}