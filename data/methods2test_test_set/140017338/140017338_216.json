{"test_class": {"identifier": "SourceValidatorTest", "superclass": "extends AntennaTestWithMockedContext", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder tmpFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "tmpFolder = new TemporaryFolder()", "var_name": "tmpFolder"}, {"original_string": "private SourceValidator validator;", "modifier": "private", "type": "SourceValidator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private File jar;", "modifier": "private", "type": "File", "declarator": "jar", "var_name": "jar"}, {"original_string": "private SourceValidatorTestTools sourceValidatorTestTools;", "modifier": "private", "type": "SourceValidatorTestTools", "declarator": "sourceValidatorTestTools", "var_name": "sourceValidatorTestTools"}], "file": "modules/simple-validators/src/test/java/org/eclipse/sw360/antenna/validators/workflow/processors/SourceValidatorTest.java"}, "test_case": {"identifier": "testWithHalfCompleteSourcesAndWhitelist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithHalfCompleteSourcesAndWhitelist() throws IOException {\n        Artifact artifact = setupForTest(Collections.emptyMap(), 50, Collections.emptyList(), Collections.singletonList(mkArtifactIdentifier()));\n\n        final IPolicyEvaluation evaluate = validator.evaluate(Collections.singleton(artifact));\n\n        assertThat(evaluate).isNotNull();\n        assertThat(evaluate.getEvaluationResults().size()).isEqualTo(0);\n    }", "signature": "void testWithHalfCompleteSourcesAndWhitelist()", "full_signature": "@Test public void testWithHalfCompleteSourcesAndWhitelist()", "class_method_signature": "SourceValidatorTest.testWithHalfCompleteSourcesAndWhitelist()", "testcase": true, "constructor": false, "invocations": ["setupForTest", "emptyMap", "emptyList", "singletonList", "mkArtifactIdentifier", "evaluate", "singleton", "isNotNull", "assertThat", "isEqualTo", "assertThat", "size", "getEvaluationResults"]}, "focal_class": {"identifier": "SourceValidator", "superclass": "extends AbstractComplianceChecker", "interfaces": "", "fields": [{"original_string": "private IProcessingReporter reporter;", "modifier": "private", "type": "IProcessingReporter", "declarator": "reporter", "var_name": "reporter"}, {"original_string": "private int threshold = 80;", "modifier": "private", "type": "int", "declarator": "threshold = 80", "var_name": "threshold"}, {"original_string": "private Collection<ArtifactSelector> missingSourcesWhiteList = Collections.emptySet();", "modifier": "private", "type": "Collection<ArtifactSelector>", "declarator": "missingSourcesWhiteList = Collections.emptySet()", "var_name": "missingSourcesWhiteList"}, {"original_string": "private Collection<ArtifactSelector> incompleteSourcesWhiteList = Collections.emptySet();", "modifier": "private", "type": "Collection<ArtifactSelector>", "declarator": "incompleteSourcesWhiteList = Collections.emptySet()", "var_name": "incompleteSourcesWhiteList"}, {"original_string": "private IEvaluationResult.Severity missingSourcesSeverity;", "modifier": "private", "type": "IEvaluationResult.Severity", "declarator": "missingSourcesSeverity", "var_name": "missingSourcesSeverity"}, {"original_string": "private IEvaluationResult.Severity incompleteSourcesSeverity;", "modifier": "private", "type": "IEvaluationResult.Severity", "declarator": "incompleteSourcesSeverity", "var_name": "incompleteSourcesSeverity"}], "methods": [{"identifier": "SourceValidator", "parameters": "()", "modifiers": "public", "return": "", "signature": " SourceValidator()", "full_signature": "public  SourceValidator()", "class_method_signature": "SourceValidator.SourceValidator()", "testcase": false, "constructor": true}, {"identifier": "isArtifactAllowedToHaveNoSourceJar", "parameters": "(Artifact artifact)", "modifiers": "private", "return": "boolean", "signature": "boolean isArtifactAllowedToHaveNoSourceJar(Artifact artifact)", "full_signature": "private boolean isArtifactAllowedToHaveNoSourceJar(Artifact artifact)", "class_method_signature": "SourceValidator.isArtifactAllowedToHaveNoSourceJar(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "isArtifactAllowedToHaveIncompleteSources", "parameters": "(Artifact artifact)", "modifiers": "private", "return": "boolean", "signature": "boolean isArtifactAllowedToHaveIncompleteSources(Artifact artifact)", "full_signature": "private boolean isArtifactAllowedToHaveIncompleteSources(Artifact artifact)", "class_method_signature": "SourceValidator.isArtifactAllowedToHaveIncompleteSources(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "validateSources", "parameters": "(Artifact artifact)", "modifiers": "private", "return": "List<IEvaluationResult>", "signature": "List<IEvaluationResult> validateSources(Artifact artifact)", "full_signature": "private List<IEvaluationResult> validateSources(Artifact artifact)", "class_method_signature": "SourceValidator.validateSources(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "validateArtifactWithJars", "parameters": "(Artifact artifact, Path artifactSourceFile, Path artifactFile)", "modifiers": "private", "return": "List<IEvaluationResult>", "signature": "List<IEvaluationResult> validateArtifactWithJars(Artifact artifact, Path artifactSourceFile, Path artifactFile)", "full_signature": "private List<IEvaluationResult> validateArtifactWithJars(Artifact artifact, Path artifactSourceFile, Path artifactFile)", "class_method_signature": "SourceValidator.validateArtifactWithJars(Artifact artifact, Path artifactSourceFile, Path artifactFile)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Artifact artifact, JarFile jar, File sourceJar)", "modifiers": "private", "return": "List<IEvaluationResult>", "signature": "List<IEvaluationResult> validate(Artifact artifact, JarFile jar, File sourceJar)", "full_signature": "private List<IEvaluationResult> validate(Artifact artifact, JarFile jar, File sourceJar)", "class_method_signature": "SourceValidator.validate(Artifact artifact, JarFile jar, File sourceJar)", "testcase": false, "constructor": false}, {"identifier": "checkIfJavaFileExists", "parameters": "(String className, JarFile source, List<String> missingClasses)", "modifiers": "private", "return": "boolean", "signature": "boolean checkIfJavaFileExists(String className, JarFile source, List<String> missingClasses)", "full_signature": "private boolean checkIfJavaFileExists(String className, JarFile source, List<String> missingClasses)", "class_method_signature": "SourceValidator.checkIfJavaFileExists(String className, JarFile source, List<String> missingClasses)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "@Override public", "return": "IPolicyEvaluation", "signature": "IPolicyEvaluation evaluate(Collection<Artifact> artifacts)", "full_signature": "@Override public IPolicyEvaluation evaluate(Collection<Artifact> artifacts)", "class_method_signature": "SourceValidator.evaluate(Collection<Artifact> artifacts)", "testcase": false, "constructor": false}, {"identifier": "getRulesetDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRulesetDescription()", "full_signature": "@Override public String getRulesetDescription()", "class_method_signature": "SourceValidator.getRulesetDescription()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Map<String, String> configMap)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String, String> configMap)", "full_signature": "@Override public void configure(Map<String, String> configMap)", "class_method_signature": "SourceValidator.configure(Map<String, String> configMap)", "testcase": false, "constructor": false}], "file": "modules/simple-validators/src/main/java/org/eclipse/sw360/antenna/validators/workflow/processors/SourceValidator.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "@Override public", "return": "IPolicyEvaluation", "body": "@Override\n    public IPolicyEvaluation evaluate(Collection<Artifact> artifacts) {\n        DefaultPolicyEvaluation policyEvaluation = new DefaultPolicyEvaluation();\n\n        artifacts.stream()\n                .filter(artifact -> ! artifact.getFlag(Artifact.IS_PROPRIETARY_FLAG_KEY))\n                .filter(artifact ->  artifact.getCoordinateForType(Coordinate.Types.MAVEN).isPresent())\n                .forEach(artifact -> validateSources(artifact)\n                        .forEach(policyEvaluation::addEvaluationResult));\n\n        return policyEvaluation;\n    }", "signature": "IPolicyEvaluation evaluate(Collection<Artifact> artifacts)", "full_signature": "@Override public IPolicyEvaluation evaluate(Collection<Artifact> artifacts)", "class_method_signature": "SourceValidator.evaluate(Collection<Artifact> artifacts)", "testcase": false, "constructor": false, "invocations": ["forEach", "filter", "filter", "stream", "getFlag", "isPresent", "getCoordinateForType", "forEach", "validateSources"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}