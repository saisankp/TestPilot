{"test_class": {"identifier": "ClusterUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-cluster/src/test/java/com/alibaba/dubbo/rpc/cluster/support/ClusterUtilsTest.java"}, "test_case": {"identifier": "testMergeUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMergeUrl() throws Exception {\n        URL providerURL = URL.valueOf(\"dubbo://localhost:55555\");\n        providerURL = providerURL.setPath(\"path\")\n                .setUsername(\"username\")\n                .setPassword(\"password\");\n\n        providerURL = providerURL.addParameter(Constants.GROUP_KEY, \"dubbo\")\n                .addParameter(Constants.VERSION_KEY, \"1.2.3\")\n                .addParameter(Constants.DUBBO_VERSION_KEY, \"2.3.7\")\n                .addParameter(Constants.THREADPOOL_KEY, \"fixed\")\n                .addParameter(Constants.THREADS_KEY, Integer.MAX_VALUE)\n                .addParameter(Constants.THREAD_NAME_KEY, \"test\")\n                .addParameter(Constants.CORE_THREADS_KEY, Integer.MAX_VALUE)\n                .addParameter(Constants.QUEUES_KEY, Integer.MAX_VALUE)\n                .addParameter(Constants.ALIVE_KEY, Integer.MAX_VALUE)\n                .addParameter(Constants.DEFAULT_KEY_PREFIX + Constants.THREADS_KEY, Integer.MAX_VALUE)\n                .addParameter(Constants.DEFAULT_KEY_PREFIX + Constants.THREADPOOL_KEY, \"fixed\")\n                .addParameter(Constants.DEFAULT_KEY_PREFIX + Constants.CORE_THREADS_KEY, Integer.MAX_VALUE)\n                .addParameter(Constants.DEFAULT_KEY_PREFIX + Constants.QUEUES_KEY, Integer.MAX_VALUE)\n                .addParameter(Constants.DEFAULT_KEY_PREFIX + Constants.ALIVE_KEY, Integer.MAX_VALUE)\n                .addParameter(Constants.DEFAULT_KEY_PREFIX + Constants.THREAD_NAME_KEY, \"test\");\n\n        URL consumerURL = URL.valueOf(\"dubbo://localhost:55555\");\n        consumerURL = consumerURL.addParameter(Constants.PID_KEY, \"1234\");\n        consumerURL = consumerURL.addParameter(Constants.THREADPOOL_KEY, \"foo\");\n\n        URL url = ClusterUtils.mergeUrl(providerURL, consumerURL.getParameters());\n\n        Assert.assertFalse(url.hasParameter(Constants.THREADS_KEY));\n        Assert.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.THREADS_KEY));\n\n        Assert.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.THREADPOOL_KEY));\n\n        Assert.assertFalse(url.hasParameter(Constants.CORE_THREADS_KEY));\n        Assert.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.CORE_THREADS_KEY));\n\n        Assert.assertFalse(url.hasParameter(Constants.QUEUES_KEY));\n        Assert.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.QUEUES_KEY));\n\n        Assert.assertFalse(url.hasParameter(Constants.ALIVE_KEY));\n        Assert.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.ALIVE_KEY));\n\n        Assert.assertFalse(url.hasParameter(Constants.THREAD_NAME_KEY));\n        Assert.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.THREAD_NAME_KEY));\n\n        Assert.assertEquals(url.getPath(), \"path\");\n        Assert.assertEquals(url.getUsername(), \"username\");\n        Assert.assertEquals(url.getPassword(), \"password\");\n        Assert.assertEquals(url.getParameter(Constants.PID_KEY), \"1234\");\n        Assert.assertEquals(url.getParameter(Constants.THREADPOOL_KEY), \"foo\");\n    }", "signature": "void testMergeUrl()", "full_signature": "@Test public void testMergeUrl()", "class_method_signature": "ClusterUtilsTest.testMergeUrl()", "testcase": true, "constructor": false, "invocations": ["valueOf", "setPassword", "setUsername", "setPath", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "valueOf", "addParameter", "addParameter", "mergeUrl", "getParameters", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertEquals", "getPath", "assertEquals", "getUsername", "assertEquals", "getPassword", "assertEquals", "getParameter", "assertEquals", "getParameter"]}, "focal_class": {"identifier": "ClusterUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ClusterUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ClusterUtils()", "full_signature": "private  ClusterUtils()", "class_method_signature": "ClusterUtils.ClusterUtils()", "testcase": false, "constructor": true}, {"identifier": "mergeUrl", "parameters": "(URL remoteUrl, Map<String, String> localMap)", "modifiers": "public static", "return": "URL", "signature": "URL mergeUrl(URL remoteUrl, Map<String, String> localMap)", "full_signature": "public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap)", "class_method_signature": "ClusterUtils.mergeUrl(URL remoteUrl, Map<String, String> localMap)", "testcase": false, "constructor": false}], "file": "dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/support/ClusterUtils.java"}, "focal_method": {"identifier": "mergeUrl", "parameters": "(URL remoteUrl, Map<String, String> localMap)", "modifiers": "public static", "return": "URL", "body": "public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap) {\n        Map<String, String> map = new HashMap<String, String>();\n        Map<String, String> remoteMap = remoteUrl.getParameters();\n\n\n        if (remoteMap != null && remoteMap.size() > 0) {\n            map.putAll(remoteMap);\n\n            // Remove configurations from provider, some items should be affected by provider.\n            map.remove(Constants.THREAD_NAME_KEY);\n            map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.THREAD_NAME_KEY);\n\n            map.remove(Constants.THREADPOOL_KEY);\n            map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.THREADPOOL_KEY);\n\n            map.remove(Constants.CORE_THREADS_KEY);\n            map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.CORE_THREADS_KEY);\n\n            map.remove(Constants.THREADS_KEY);\n            map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.THREADS_KEY);\n\n            map.remove(Constants.QUEUES_KEY);\n            map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.QUEUES_KEY);\n\n            map.remove(Constants.ALIVE_KEY);\n            map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.ALIVE_KEY);\n\n            map.remove(Constants.TRANSPORTER_KEY);\n            map.remove(Constants.DEFAULT_KEY_PREFIX + Constants.TRANSPORTER_KEY);\n        }\n\n        if (localMap != null && localMap.size() > 0) {\n            map.putAll(localMap);\n        }\n        if (remoteMap != null && remoteMap.size() > 0) {\n            // Use version passed from provider side\n            String dubbo = remoteMap.get(Constants.DUBBO_VERSION_KEY);\n            if (dubbo != null && dubbo.length() > 0) {\n                map.put(Constants.DUBBO_VERSION_KEY, dubbo);\n            }\n            String version = remoteMap.get(Constants.VERSION_KEY);\n            if (version != null && version.length() > 0) {\n                map.put(Constants.VERSION_KEY, version);\n            }\n            String group = remoteMap.get(Constants.GROUP_KEY);\n            if (group != null && group.length() > 0) {\n                map.put(Constants.GROUP_KEY, group);\n            }\n            String methods = remoteMap.get(Constants.METHODS_KEY);\n            if (methods != null && methods.length() > 0) {\n                map.put(Constants.METHODS_KEY, methods);\n            }\n            // Reserve timestamp of provider url.\n            String remoteTimestamp = remoteMap.get(Constants.TIMESTAMP_KEY);\n            if (remoteTimestamp != null && remoteTimestamp.length() > 0) {\n                map.put(Constants.REMOTE_TIMESTAMP_KEY, remoteMap.get(Constants.TIMESTAMP_KEY));\n            }\n            // Combine filters and listeners on Provider and Consumer\n            String remoteFilter = remoteMap.get(Constants.REFERENCE_FILTER_KEY);\n            String localFilter = localMap.get(Constants.REFERENCE_FILTER_KEY);\n            if (remoteFilter != null && remoteFilter.length() > 0\n                    && localFilter != null && localFilter.length() > 0) {\n                localMap.put(Constants.REFERENCE_FILTER_KEY, remoteFilter + \",\" + localFilter);\n            }\n            String remoteListener = remoteMap.get(Constants.INVOKER_LISTENER_KEY);\n            String localListener = localMap.get(Constants.INVOKER_LISTENER_KEY);\n            if (remoteListener != null && remoteListener.length() > 0\n                    && localListener != null && localListener.length() > 0) {\n                localMap.put(Constants.INVOKER_LISTENER_KEY, remoteListener + \",\" + localListener);\n            }\n        }\n\n        return remoteUrl.clearParameters().addParameters(map);\n    }", "signature": "URL mergeUrl(URL remoteUrl, Map<String, String> localMap)", "full_signature": "public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap)", "class_method_signature": "ClusterUtils.mergeUrl(URL remoteUrl, Map<String, String> localMap)", "testcase": false, "constructor": false, "invocations": ["getParameters", "size", "putAll", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "size", "putAll", "size", "get", "length", "put", "get", "length", "put", "get", "length", "put", "get", "length", "put", "get", "length", "put", "get", "get", "get", "length", "length", "put", "get", "get", "length", "length", "put", "addParameters", "clearParameters"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}