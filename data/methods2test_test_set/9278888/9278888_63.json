{"test_class": {"identifier": "HttpParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock HttpClientAdapter<Object, Object> adapter;", "modifier": "@Mock", "type": "HttpClientAdapter<Object, Object>", "declarator": "adapter", "var_name": "adapter"}, {"original_string": "@Mock SpanCustomizer customizer;", "modifier": "@Mock", "type": "SpanCustomizer", "declarator": "customizer", "var_name": "customizer"}, {"original_string": "Object request = new Object();", "modifier": "", "type": "Object", "declarator": "request = new Object()", "var_name": "request"}, {"original_string": "Object response = new Object();", "modifier": "", "type": "Object", "declarator": "response = new Object()", "var_name": "response"}, {"original_string": "HttpParser parser = new HttpParser();", "modifier": "", "type": "HttpParser", "declarator": "parser = new HttpParser()", "var_name": "parser"}], "file": "instrumentation/http/src/test/java/brave/http/HttpParserTest.java"}, "test_case": {"identifier": "spanName_isMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void spanName_isMethod() {\n    when(adapter.method(request)).thenReturn(\"GET\");\n\n    assertThat(parser.spanName(adapter, request))\n      .isEqualTo(\"GET\"); // note: in practice this will become lowercase\n  }", "signature": "void spanName_isMethod()", "full_signature": "@Test public void spanName_isMethod()", "class_method_signature": "HttpParserTest.spanName_isMethod()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "method", "isEqualTo", "assertThat", "spanName"]}, "focal_class": {"identifier": "HttpParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final ErrorParser ERROR_PARSER = new ErrorParser();", "modifier": "static final", "type": "ErrorParser", "declarator": "ERROR_PARSER = new ErrorParser()", "var_name": "ERROR_PARSER"}], "methods": [{"identifier": "errorParser", "parameters": "()", "modifiers": "protected", "return": "ErrorParser", "signature": "ErrorParser errorParser()", "full_signature": "protected ErrorParser errorParser()", "class_method_signature": "HttpParser.errorParser()", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(HttpAdapter<Req, ?> adapter, Req req, SpanCustomizer customizer)", "modifiers": "public", "return": "void", "signature": "void request(HttpAdapter<Req, ?> adapter, Req req, SpanCustomizer customizer)", "full_signature": "public void request(HttpAdapter<Req, ?> adapter, Req req, SpanCustomizer customizer)", "class_method_signature": "HttpParser.request(HttpAdapter<Req, ?> adapter, Req req, SpanCustomizer customizer)", "testcase": false, "constructor": false}, {"identifier": "spanName", "parameters": "(HttpAdapter<Req, ?> adapter, Req req)", "modifiers": "@Nullable protected", "return": "String", "signature": "String spanName(HttpAdapter<Req, ?> adapter, Req req)", "full_signature": "@Nullable protected String spanName(HttpAdapter<Req, ?> adapter, Req req)", "class_method_signature": "HttpParser.spanName(HttpAdapter<Req, ?> adapter, Req req)", "testcase": false, "constructor": false}, {"identifier": "response", "parameters": "(HttpAdapter<?, Resp> adapter, @Nullable Resp res,\n    @Nullable Throwable error, SpanCustomizer customizer)", "modifiers": "public", "return": "void", "signature": "void response(HttpAdapter<?, Resp> adapter, @Nullable Resp res,\n    @Nullable Throwable error, SpanCustomizer customizer)", "full_signature": "public void response(HttpAdapter<?, Resp> adapter, @Nullable Resp res,\n    @Nullable Throwable error, SpanCustomizer customizer)", "class_method_signature": "HttpParser.response(HttpAdapter<?, Resp> adapter, @Nullable Resp res,\n    @Nullable Throwable error, SpanCustomizer customizer)", "testcase": false, "constructor": false}, {"identifier": "maybeStatusAsString", "parameters": "(int statusCode, int upperRange)", "modifiers": "@Nullable", "return": "String", "signature": "String maybeStatusAsString(int statusCode, int upperRange)", "full_signature": "@Nullable String maybeStatusAsString(int statusCode, int upperRange)", "class_method_signature": "HttpParser.maybeStatusAsString(int statusCode, int upperRange)", "testcase": false, "constructor": false}, {"identifier": "spanNameFromRoute", "parameters": "(HttpAdapter<?, Resp> adapter, Resp res, int statusCode)", "modifiers": "static", "return": "String", "signature": "String spanNameFromRoute(HttpAdapter<?, Resp> adapter, Resp res, int statusCode)", "full_signature": "static String spanNameFromRoute(HttpAdapter<?, Resp> adapter, Resp res, int statusCode)", "class_method_signature": "HttpParser.spanNameFromRoute(HttpAdapter<?, Resp> adapter, Resp res, int statusCode)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(@Nullable Integer httpStatus, @Nullable Throwable error,\n    SpanCustomizer customizer)", "modifiers": "protected", "return": "void", "signature": "void error(@Nullable Integer httpStatus, @Nullable Throwable error,\n    SpanCustomizer customizer)", "full_signature": "protected void error(@Nullable Integer httpStatus, @Nullable Throwable error,\n    SpanCustomizer customizer)", "class_method_signature": "HttpParser.error(@Nullable Integer httpStatus, @Nullable Throwable error,\n    SpanCustomizer customizer)", "testcase": false, "constructor": false}], "file": "instrumentation/http/src/main/java/brave/http/HttpParser.java"}, "focal_method": {"identifier": "spanName", "parameters": "(HttpAdapter<Req, ?> adapter, Req req)", "modifiers": "@Nullable protected", "return": "String", "body": "@Nullable protected <Req> String spanName(HttpAdapter<Req, ?> adapter, Req req) {\n    return adapter.method(req);\n  }", "signature": "String spanName(HttpAdapter<Req, ?> adapter, Req req)", "full_signature": "@Nullable protected String spanName(HttpAdapter<Req, ?> adapter, Req req)", "class_method_signature": "HttpParser.spanName(HttpAdapter<Req, ?> adapter, Req req)", "testcase": false, "constructor": false, "invocations": ["method"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}