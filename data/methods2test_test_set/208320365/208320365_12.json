{"test_class": {"identifier": "SchedulerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private AsyncSqsClient asyncClient;", "modifier": "@Mock private", "type": "AsyncSqsClient", "declarator": "asyncClient", "var_name": "asyncClient"}, {"original_string": "@Mock private ScheduleManager scheduleManager;", "modifier": "@Mock private", "type": "ScheduleManager", "declarator": "scheduleManager", "var_name": "scheduleManager"}, {"original_string": "private Scheduler scheduler;", "modifier": "private", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private JobSpecTransformer jobSpecTransformer;", "modifier": "private", "type": "JobSpecTransformer", "declarator": "jobSpecTransformer", "var_name": "jobSpecTransformer"}], "file": "dynein/src/test/java/com/airbnb/dynein/scheduler/SchedulerTest.java"}, "test_case": {"identifier": "testSQSDelayedJob_withInstant", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSQSDelayedJob_withInstant() {\n    when(asyncClient.add(any(String.class), eq(\"test-queue\"), any(Integer.class)))\n        .thenReturn(CompletableFuture.completedFuture(null));\n\n    DyneinJobSpec jobSpec =\n        DyneinJobSpec.builder()\n            .name(\"AddJob\")\n            .queueName(\"test-queue\")\n            .schedulePolicy(\n                JobSchedulePolicy.builder()\n                    .type(JobScheduleType.SQS_DELAYED)\n                    .delayMillis(5000L)\n                    .build())\n            .build();\n    CompletableFuture<Void> ret = scheduler.createJob(jobSpec);\n    verify(asyncClient).add(jobSpecTransformer.serializeJobSpec(jobSpec), \"test-queue\", 5);\n    assertNull(ret.join());\n  }", "signature": "void testSQSDelayedJob_withInstant()", "full_signature": "@Test public void testSQSDelayedJob_withInstant()", "class_method_signature": "SchedulerTest.testSQSDelayedJob_withInstant()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "add", "any", "eq", "any", "completedFuture", "build", "schedulePolicy", "queueName", "name", "builder", "build", "delayMillis", "type", "builder", "createJob", "add", "verify", "serializeJobSpec", "assertNull", "join"]}, "focal_class": {"identifier": "Scheduler", "superclass": "", "interfaces": "", "fields": [{"original_string": "@NonNull\n  @Named(Constants.SQS_PRODUCER)\n  private final AsyncSqsClient asyncClient;", "modifier": "@NonNull\n  @Named(Constants.SQS_PRODUCER)\n  private final", "type": "AsyncSqsClient", "declarator": "asyncClient", "var_name": "asyncClient"}, {"original_string": "@NonNull\n  @Named(Constants.INBOUND_QUEUE_NAME)\n  private final String inboundQueueName;", "modifier": "@NonNull\n  @Named(Constants.INBOUND_QUEUE_NAME)\n  private final", "type": "String", "declarator": "inboundQueueName", "var_name": "inboundQueueName"}, {"original_string": "@NonNull private final JobSpecTransformer jobSpecTransformer;", "modifier": "@NonNull private final", "type": "JobSpecTransformer", "declarator": "jobSpecTransformer", "var_name": "jobSpecTransformer"}, {"original_string": "@NonNull private final TokenManager tokenManager;", "modifier": "@NonNull private final", "type": "TokenManager", "declarator": "tokenManager", "var_name": "tokenManager"}, {"original_string": "@NonNull private final ScheduleManager scheduleManager;", "modifier": "@NonNull private final", "type": "ScheduleManager", "declarator": "scheduleManager", "var_name": "scheduleManager"}, {"original_string": "@NonNull private final Clock clock;", "modifier": "@NonNull private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "@NonNull private final Metrics metrics;", "modifier": "@NonNull private final", "type": "Metrics", "declarator": "metrics", "var_name": "metrics"}], "methods": [{"identifier": "prepareJob", "parameters": "(@NonNull PrepareJobRequest request)", "modifiers": "public", "return": "String", "signature": "String prepareJob(@NonNull PrepareJobRequest request)", "full_signature": "public String prepareJob(@NonNull PrepareJobRequest request)", "class_method_signature": "Scheduler.prepareJob(@NonNull PrepareJobRequest request)", "testcase": false, "constructor": false}, {"identifier": "createJob", "parameters": "(@NonNull DyneinJobSpec jobSpec)", "modifiers": "public", "return": "CompletableFuture<Void>", "signature": "CompletableFuture<Void> createJob(@NonNull DyneinJobSpec jobSpec)", "full_signature": "public CompletableFuture<Void> createJob(@NonNull DyneinJobSpec jobSpec)", "class_method_signature": "Scheduler.createJob(@NonNull DyneinJobSpec jobSpec)", "testcase": false, "constructor": false}, {"identifier": "deleteJob", "parameters": "(String token)", "modifiers": "public", "return": "CompletableFuture<Void>", "signature": "CompletableFuture<Void> deleteJob(String token)", "full_signature": "public CompletableFuture<Void> deleteJob(String token)", "class_method_signature": "Scheduler.deleteJob(String token)", "testcase": false, "constructor": false}, {"identifier": "getJob", "parameters": "(String token)", "modifiers": "public", "return": "CompletableFuture<DyneinJobSpec>", "signature": "CompletableFuture<DyneinJobSpec> getJob(String token)", "full_signature": "public CompletableFuture<DyneinJobSpec> getJob(String token)", "class_method_signature": "Scheduler.getJob(String token)", "testcase": false, "constructor": false}], "file": "dynein/src/main/java/com/airbnb/dynein/scheduler/Scheduler.java"}, "focal_method": {"identifier": "createJob", "parameters": "(@NonNull DyneinJobSpec jobSpec)", "modifiers": "public", "return": "CompletableFuture<Void>", "body": "public CompletableFuture<Void> createJob(@NonNull DyneinJobSpec jobSpec) {\n    CompletableFuture<Void> ret = new CompletableFuture<>();\n    log.info(\"Create new job {}\", jobSpec);\n    String serializedJobSpec = jobSpecTransformer.serializeJobSpec(jobSpec);\n\n    switch (jobSpec.getSchedulePolicy().getType()) {\n      case IMMEDIATE:\n        {\n          ret =\n              asyncClient\n                  .add(serializedJobSpec, jobSpec.getQueueName())\n                  .whenComplete(\n                      (it, ex) -> {\n                        if (ex == null) {\n                          log.info(\n                              \"DyneinJob {} triggered, enqueue to queue {}, type: IMMEDIATE\",\n                              jobSpec.getJobToken(),\n                              jobSpec.getQueueName());\n                          metrics.dispatchJob(jobSpec.getQueueName());\n                        } else {\n                          log.error(\n                              \"Failed to trigger DyneinJob {} to queue {}, type: IMMEDIATE\",\n                              jobSpec.getJobToken(),\n                              jobSpec.getQueueName(),\n                              ex);\n                        }\n                      });\n          break;\n        }\n      case SCHEDULED:\n        {\n          ret =\n              asyncClient\n                  .add(serializedJobSpec, inboundQueueName)\n                  .whenComplete(\n                      (it, ex) -> {\n                        if (ex == null) {\n                          log.info(\n                              \"Added job spec {} to inbound job queue {}, with token {}\",\n                              jobSpec.getName(),\n                              inboundQueueName,\n                              jobSpec.getJobToken());\n                          metrics.enqueueToInboundQueue(jobSpec);\n                        } else {\n                          log.error(\n                              \"Exception when adding job spec {} to inbound job queue {}, with token {}\",\n                              jobSpec.getName(),\n                              inboundQueueName,\n                              jobSpec.getJobToken(),\n                              ex);\n                        }\n                      });\n          break;\n        }\n      case SQS_DELAYED:\n        {\n          long delayMs = TimeUtils.getDelayMillis(jobSpec.getSchedulePolicy(), clock);\n\n          if (delayMs > TimeUnit.MINUTES.toMillis(15)) {\n            ret.completeExceptionally(\n                new IllegalArgumentException(\n                    \"Delay \"\n                        + delayMs\n                        + \"ms is longer than 15 minutes, cannot be scheduled with SQS_DELAYED\"));\n          } else {\n            ret =\n                asyncClient\n                    .add(\n                        serializedJobSpec,\n                        jobSpec.getQueueName(),\n                        (int) TimeUnit.MILLISECONDS.toSeconds(delayMs))\n                    .whenComplete(\n                        (it, ex) -> {\n                          if (ex == null) {\n                            log.info(\n                                \"DyneinJob {} triggered, enqueue to queue {}, type: SQS_DELAYED\",\n                                jobSpec.getJobToken(),\n                                jobSpec.getQueueName());\n                            metrics.dispatchJob(jobSpec.getQueueName());\n                          } else {\n                            log.error(\n                                \"Failed to trigger DyneinJob {} to queue {}, type: SQS_DELAYED\",\n                                jobSpec.getJobToken(),\n                                jobSpec.getQueueName(),\n                                ex);\n                          }\n                        });\n          }\n          break;\n        }\n      default:\n        ret.completeExceptionally(\n            new UnsupportedOperationException(\"Unsupported Job Schedule Policy Type\"));\n    }\n    return ret;\n  }", "signature": "CompletableFuture<Void> createJob(@NonNull DyneinJobSpec jobSpec)", "full_signature": "public CompletableFuture<Void> createJob(@NonNull DyneinJobSpec jobSpec)", "class_method_signature": "Scheduler.createJob(@NonNull DyneinJobSpec jobSpec)", "testcase": false, "constructor": false, "invocations": ["info", "serializeJobSpec", "getType", "getSchedulePolicy", "whenComplete", "add", "getQueueName", "info", "getJobToken", "getQueueName", "dispatchJob", "getQueueName", "error", "getJobToken", "getQueueName", "whenComplete", "add", "info", "getName", "getJobToken", "enqueueToInboundQueue", "error", "getName", "getJobToken", "getDelayMillis", "getSchedulePolicy", "toMillis", "completeExceptionally", "whenComplete", "add", "getQueueName", "toSeconds", "info", "getJobToken", "getQueueName", "dispatchJob", "getQueueName", "error", "getJobToken", "getQueueName", "completeExceptionally"]}, "repository": {"repo_id": 208320365, "url": "https://github.com/airbnb/dynein", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 247, "size": 71, "license": "licensed"}}