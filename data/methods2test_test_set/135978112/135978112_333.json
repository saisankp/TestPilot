{"test_class": {"identifier": "ProcessorStateManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Set<TopicPartition> noPartitions = Collections.emptySet();", "modifier": "private final", "type": "Set<TopicPartition>", "declarator": "noPartitions = Collections.emptySet()", "var_name": "noPartitions"}, {"original_string": "private final String applicationId = \"test-application\";", "modifier": "private final", "type": "String", "declarator": "applicationId = \"test-application\"", "var_name": "applicationId"}, {"original_string": "private final String stateDir = \"test\";", "modifier": "private final", "type": "String", "declarator": "stateDir = \"test\"", "var_name": "stateDir"}, {"original_string": "private final String persistentStoreName = \"persistentStore\";", "modifier": "private final", "type": "String", "declarator": "persistentStoreName = \"persistentStore\"", "var_name": "persistentStoreName"}, {"original_string": "private final String nonPersistentStoreName = \"nonPersistentStore\";", "modifier": "private final", "type": "String", "declarator": "nonPersistentStoreName = \"nonPersistentStore\"", "var_name": "nonPersistentStoreName"}, {"original_string": "private final String persistentStoreTopicName = ProcessorStateManager.storeChangelogTopic(applicationId, persistentStoreName);", "modifier": "private final", "type": "String", "declarator": "persistentStoreTopicName = ProcessorStateManager.storeChangelogTopic(applicationId, persistentStoreName)", "var_name": "persistentStoreTopicName"}, {"original_string": "private final String nonPersistentStoreTopicName = ProcessorStateManager.storeChangelogTopic(applicationId, nonPersistentStoreName);", "modifier": "private final", "type": "String", "declarator": "nonPersistentStoreTopicName = ProcessorStateManager.storeChangelogTopic(applicationId, nonPersistentStoreName)", "var_name": "nonPersistentStoreTopicName"}], "file": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java"}, "test_case": {"identifier": "testLockStateDirectory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLockStateDirectory() throws IOException {\n        File baseDir = Files.createTempDirectory(stateDir).toFile();\n        try {\n            FileLock lock;\n\n            // the state manager locks the directory\n            ProcessorStateManager stateMgr = new ProcessorStateManager(applicationId, 1, noPartitions, baseDir, new MockRestoreConsumer(), false);\n\n            try {\n                // this should not get the lock\n                lock = ProcessorStateManager.lockStateDirectory(baseDir);\n                assertNull(lock);\n            } finally {\n                // by closing the state manager, release the lock\n                stateMgr.close(Collections.<TopicPartition, Long>emptyMap());\n            }\n\n            // now, this should get the lock\n            lock = ProcessorStateManager.lockStateDirectory(baseDir);\n            try {\n                assertNotNull(lock);\n            } finally {\n                if (lock != null) {\n                    lock.release();\n                    lock.channel().close();\n                }\n            }\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }", "signature": "void testLockStateDirectory()", "full_signature": "@Test public void testLockStateDirectory()", "class_method_signature": "ProcessorStateManagerTest.testLockStateDirectory()", "testcase": true, "constructor": false, "invocations": ["toFile", "createTempDirectory", "lockStateDirectory", "assertNull", "close", "emptyMap", "lockStateDirectory", "assertNotNull", "release", "close", "channel", "delete"]}, "focal_class": {"identifier": "ProcessorStateManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ProcessorStateManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ProcessorStateManager.class)", "var_name": "log"}, {"original_string": "public static final String STATE_CHANGELOG_TOPIC_SUFFIX = \"-changelog\";", "modifier": "public static final", "type": "String", "declarator": "STATE_CHANGELOG_TOPIC_SUFFIX = \"-changelog\"", "var_name": "STATE_CHANGELOG_TOPIC_SUFFIX"}, {"original_string": "public static final String CHECKPOINT_FILE_NAME = \".checkpoint\";", "modifier": "public static final", "type": "String", "declarator": "CHECKPOINT_FILE_NAME = \".checkpoint\"", "var_name": "CHECKPOINT_FILE_NAME"}, {"original_string": "public static final String LOCK_FILE_NAME = \".lock\";", "modifier": "public static final", "type": "String", "declarator": "LOCK_FILE_NAME = \".lock\"", "var_name": "LOCK_FILE_NAME"}, {"original_string": "private final String applicationId;", "modifier": "private final", "type": "String", "declarator": "applicationId", "var_name": "applicationId"}, {"original_string": "private final int defaultPartition;", "modifier": "private final", "type": "int", "declarator": "defaultPartition", "var_name": "defaultPartition"}, {"original_string": "private final Map<String, TopicPartition> partitionForTopic;", "modifier": "private final", "type": "Map<String, TopicPartition>", "declarator": "partitionForTopic", "var_name": "partitionForTopic"}, {"original_string": "private final File baseDir;", "modifier": "private final", "type": "File", "declarator": "baseDir", "var_name": "baseDir"}, {"original_string": "private final FileLock directoryLock;", "modifier": "private final", "type": "FileLock", "declarator": "directoryLock", "var_name": "directoryLock"}, {"original_string": "private final Map<String, StateStore> stores;", "modifier": "private final", "type": "Map<String, StateStore>", "declarator": "stores", "var_name": "stores"}, {"original_string": "private final Set<String> loggingEnabled;", "modifier": "private final", "type": "Set<String>", "declarator": "loggingEnabled", "var_name": "loggingEnabled"}, {"original_string": "private final Consumer<byte[], byte[]> restoreConsumer;", "modifier": "private final", "type": "Consumer<byte[], byte[]>", "declarator": "restoreConsumer", "var_name": "restoreConsumer"}, {"original_string": "private final Map<TopicPartition, Long> restoredOffsets;", "modifier": "private final", "type": "Map<TopicPartition, Long>", "declarator": "restoredOffsets", "var_name": "restoredOffsets"}, {"original_string": "private final Map<TopicPartition, Long> checkpointedOffsets;", "modifier": "private final", "type": "Map<TopicPartition, Long>", "declarator": "checkpointedOffsets", "var_name": "checkpointedOffsets"}, {"original_string": "private final Map<TopicPartition, Long> offsetLimits;", "modifier": "private final", "type": "Map<TopicPartition, Long>", "declarator": "offsetLimits", "var_name": "offsetLimits"}, {"original_string": "private final boolean isStandby;", "modifier": "private final", "type": "boolean", "declarator": "isStandby", "var_name": "isStandby"}, {"original_string": "private final Map<String, StateRestoreCallback> restoreCallbacks;", "modifier": "private final", "type": "Map<String, StateRestoreCallback>", "declarator": "restoreCallbacks", "var_name": "restoreCallbacks"}], "methods": [{"identifier": "ProcessorStateManager", "parameters": "(String applicationId, int defaultPartition, Collection<TopicPartition> sources, File baseDir, Consumer<byte[], byte[]> restoreConsumer, boolean isStandby)", "modifiers": "public", "return": "", "signature": " ProcessorStateManager(String applicationId, int defaultPartition, Collection<TopicPartition> sources, File baseDir, Consumer<byte[], byte[]> restoreConsumer, boolean isStandby)", "full_signature": "public  ProcessorStateManager(String applicationId, int defaultPartition, Collection<TopicPartition> sources, File baseDir, Consumer<byte[], byte[]> restoreConsumer, boolean isStandby)", "class_method_signature": "ProcessorStateManager.ProcessorStateManager(String applicationId, int defaultPartition, Collection<TopicPartition> sources, File baseDir, Consumer<byte[], byte[]> restoreConsumer, boolean isStandby)", "testcase": false, "constructor": true}, {"identifier": "createStateDirectory", "parameters": "(File stateDir)", "modifiers": "private static", "return": "void", "signature": "void createStateDirectory(File stateDir)", "full_signature": "private static void createStateDirectory(File stateDir)", "class_method_signature": "ProcessorStateManager.createStateDirectory(File stateDir)", "testcase": false, "constructor": false}, {"identifier": "storeChangelogTopic", "parameters": "(String applicationId, String storeName)", "modifiers": "public static", "return": "String", "signature": "String storeChangelogTopic(String applicationId, String storeName)", "full_signature": "public static String storeChangelogTopic(String applicationId, String storeName)", "class_method_signature": "ProcessorStateManager.storeChangelogTopic(String applicationId, String storeName)", "testcase": false, "constructor": false}, {"identifier": "lockStateDirectory", "parameters": "(File stateDir)", "modifiers": "public static", "return": "FileLock", "signature": "FileLock lockStateDirectory(File stateDir)", "full_signature": "public static FileLock lockStateDirectory(File stateDir)", "class_method_signature": "ProcessorStateManager.lockStateDirectory(File stateDir)", "testcase": false, "constructor": false}, {"identifier": "lockStateDirectory", "parameters": "(File stateDir, int retry)", "modifiers": "private static", "return": "FileLock", "signature": "FileLock lockStateDirectory(File stateDir, int retry)", "full_signature": "private static FileLock lockStateDirectory(File stateDir, int retry)", "class_method_signature": "ProcessorStateManager.lockStateDirectory(File stateDir, int retry)", "testcase": false, "constructor": false}, {"identifier": "lockStateDirectory", "parameters": "(FileChannel channel)", "modifiers": "private static", "return": "FileLock", "signature": "FileLock lockStateDirectory(FileChannel channel)", "full_signature": "private static FileLock lockStateDirectory(FileChannel channel)", "class_method_signature": "ProcessorStateManager.lockStateDirectory(FileChannel channel)", "testcase": false, "constructor": false}, {"identifier": "baseDir", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File baseDir()", "full_signature": "public File baseDir()", "class_method_signature": "ProcessorStateManager.baseDir()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(StateStore store, boolean loggingEnabled, StateRestoreCallback stateRestoreCallback)", "modifiers": "public", "return": "void", "signature": "void register(StateStore store, boolean loggingEnabled, StateRestoreCallback stateRestoreCallback)", "full_signature": "public void register(StateStore store, boolean loggingEnabled, StateRestoreCallback stateRestoreCallback)", "class_method_signature": "ProcessorStateManager.register(StateStore store, boolean loggingEnabled, StateRestoreCallback stateRestoreCallback)", "testcase": false, "constructor": false}, {"identifier": "restoreActiveState", "parameters": "(String topicName, StateRestoreCallback stateRestoreCallback)", "modifiers": "private", "return": "void", "signature": "void restoreActiveState(String topicName, StateRestoreCallback stateRestoreCallback)", "full_signature": "private void restoreActiveState(String topicName, StateRestoreCallback stateRestoreCallback)", "class_method_signature": "ProcessorStateManager.restoreActiveState(String topicName, StateRestoreCallback stateRestoreCallback)", "testcase": false, "constructor": false}, {"identifier": "checkpointedOffsets", "parameters": "()", "modifiers": "public", "return": "Map<TopicPartition, Long>", "signature": "Map<TopicPartition, Long> checkpointedOffsets()", "full_signature": "public Map<TopicPartition, Long> checkpointedOffsets()", "class_method_signature": "ProcessorStateManager.checkpointedOffsets()", "testcase": false, "constructor": false}, {"identifier": "updateStandbyStates", "parameters": "(TopicPartition storePartition, List<ConsumerRecord<byte[], byte[]>> records)", "modifiers": "public", "return": "List<ConsumerRecord<byte[], byte[]>>", "signature": "List<ConsumerRecord<byte[], byte[]>> updateStandbyStates(TopicPartition storePartition, List<ConsumerRecord<byte[], byte[]>> records)", "full_signature": "public List<ConsumerRecord<byte[], byte[]>> updateStandbyStates(TopicPartition storePartition, List<ConsumerRecord<byte[], byte[]>> records)", "class_method_signature": "ProcessorStateManager.updateStandbyStates(TopicPartition storePartition, List<ConsumerRecord<byte[], byte[]>> records)", "testcase": false, "constructor": false}, {"identifier": "putOffsetLimit", "parameters": "(TopicPartition partition, long limit)", "modifiers": "public", "return": "void", "signature": "void putOffsetLimit(TopicPartition partition, long limit)", "full_signature": "public void putOffsetLimit(TopicPartition partition, long limit)", "class_method_signature": "ProcessorStateManager.putOffsetLimit(TopicPartition partition, long limit)", "testcase": false, "constructor": false}, {"identifier": "offsetLimit", "parameters": "(TopicPartition partition)", "modifiers": "private", "return": "long", "signature": "long offsetLimit(TopicPartition partition)", "full_signature": "private long offsetLimit(TopicPartition partition)", "class_method_signature": "ProcessorStateManager.offsetLimit(TopicPartition partition)", "testcase": false, "constructor": false}, {"identifier": "getStore", "parameters": "(String name)", "modifiers": "public", "return": "StateStore", "signature": "StateStore getStore(String name)", "full_signature": "public StateStore getStore(String name)", "class_method_signature": "ProcessorStateManager.getStore(String name)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void flush()", "full_signature": "public void flush()", "class_method_signature": "ProcessorStateManager.flush()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(Map<TopicPartition, Long> ackedOffsets)", "modifiers": "public", "return": "void", "signature": "void close(Map<TopicPartition, Long> ackedOffsets)", "full_signature": "public void close(Map<TopicPartition, Long> ackedOffsets)", "class_method_signature": "ProcessorStateManager.close(Map<TopicPartition, Long> ackedOffsets)", "testcase": false, "constructor": false}, {"identifier": "getPartition", "parameters": "(String topic)", "modifiers": "private", "return": "int", "signature": "int getPartition(String topic)", "full_signature": "private int getPartition(String topic)", "class_method_signature": "ProcessorStateManager.getPartition(String topic)", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorStateManager.java"}, "focal_method": {"identifier": "lockStateDirectory", "parameters": "(File stateDir)", "modifiers": "public static", "return": "FileLock", "body": "public static FileLock lockStateDirectory(File stateDir) throws IOException {\n        return lockStateDirectory(stateDir, 0);\n    }", "signature": "FileLock lockStateDirectory(File stateDir)", "full_signature": "public static FileLock lockStateDirectory(File stateDir)", "class_method_signature": "ProcessorStateManager.lockStateDirectory(File stateDir)", "testcase": false, "constructor": false, "invocations": ["lockStateDirectory"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}