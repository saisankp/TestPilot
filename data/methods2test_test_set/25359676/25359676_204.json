{"test_class": {"identifier": "ExpressionUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "rice-framework/krad-web-framework/src/test/java/org/kuali/rice/krad/uif/util/ExpressionUtilsTest.java"}, "test_case": {"identifier": "testPopulatePropertyExpressionsFromGraph_RefreshGraphs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPopulatePropertyExpressionsFromGraph_RefreshGraphs() {\n        Map<String, String> expressionGraph = new HashMap<String, String>();\n\n        expressionGraph.put(\"property1\", \"@{expr1}\");\n        expressionGraph.put(\"property2\", \"@{expr2}\");\n        expressionGraph.put(\"property3['key1']\", \"@{key1expr}\");\n        expressionGraph.put(\"property4.property1\", \"@{nexpr1}\");\n        expressionGraph.put(\"property4.property4.property3['key2']\", \"@{nkey2expr}\");\n\n        MockConfigurable configurable = new MockConfigurable();\n        MockConfigurable configurable2 = new MockConfigurable();\n        MockConfigurable configurable3 = new MockConfigurable();\n\n        configurable2.setProperty4(configurable3);\n        configurable.setProperty4(configurable2);\n\n        configurable.setExpressionGraph(expressionGraph);\n\n        ViewLifecycle.getExpressionEvaluator().populatePropertyExpressionsFromGraph(configurable, true);\n    }", "signature": "void testPopulatePropertyExpressionsFromGraph_RefreshGraphs()", "full_signature": "@Test public void testPopulatePropertyExpressionsFromGraph_RefreshGraphs()", "class_method_signature": "ExpressionUtilsTest.testPopulatePropertyExpressionsFromGraph_RefreshGraphs()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "setProperty4", "setProperty4", "setExpressionGraph", "populatePropertyExpressionsFromGraph", "getExpressionEvaluator"]}, "focal_class": {"identifier": "ExpressionUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(ExpressionUtils.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(ExpressionUtils.class)", "var_name": "LOG"}], "methods": [{"identifier": "populatePropertyExpressionsFromGraph", "parameters": "(UifDictionaryBean expressionConfigurable)", "modifiers": "public static", "return": "void", "signature": "void populatePropertyExpressionsFromGraph(UifDictionaryBean expressionConfigurable)", "full_signature": "public static void populatePropertyExpressionsFromGraph(UifDictionaryBean expressionConfigurable)", "class_method_signature": "ExpressionUtils.populatePropertyExpressionsFromGraph(UifDictionaryBean expressionConfigurable)", "testcase": false, "constructor": false}, {"identifier": "parseExpression", "parameters": "(String exp, List<String> controlNames)", "modifiers": "public static", "return": "String", "signature": "String parseExpression(String exp, List<String> controlNames)", "full_signature": "public static String parseExpression(String exp, List<String> controlNames)", "class_method_signature": "ExpressionUtils.parseExpression(String exp, List<String> controlNames)", "testcase": false, "constructor": false}, {"identifier": "evaluateCurrentStack", "parameters": "(String stack, List<String> controlNames)", "modifiers": "public static", "return": "void", "signature": "void evaluateCurrentStack(String stack, List<String> controlNames)", "full_signature": "public static void evaluateCurrentStack(String stack, List<String> controlNames)", "class_method_signature": "ExpressionUtils.evaluateCurrentStack(String stack, List<String> controlNames)", "testcase": false, "constructor": false}], "file": "rice-framework/krad-web-framework/src/main/java/org/kuali/rice/krad/uif/util/ExpressionUtils.java"}, "focal_method": {"identifier": "populatePropertyExpressionsFromGraph", "parameters": "(UifDictionaryBean expressionConfigurable)", "modifiers": "public static", "return": "void", "body": "public static void populatePropertyExpressionsFromGraph(UifDictionaryBean expressionConfigurable) {\n        if (expressionConfigurable == null || expressionConfigurable.getExpressionGraph() == null) {\n            return;\n        }\n\n        // will hold graphs to populate the refreshExpressionGraph property on each expressionConfigurable\n        // key is the path to the expressionConfigurable and value is the map of nested property names to expressions\n        Map<String, Map<String, String>> refreshExpressionGraphs = new HashMap<String, Map<String, String>>();\n\n        Map<String, String> expressionGraph = expressionConfigurable.getExpressionGraph();\n        for (Map.Entry<String, String> expressionEntry : expressionGraph.entrySet()) {\n            String propertyName = expressionEntry.getKey();\n            String expression = expressionEntry.getValue();\n\n            // by default assume expression belongs with passed in expressionConfigurable\n            UifDictionaryBean configurableWithExpression = expressionConfigurable;\n\n            // if property name is nested, we need to move the expression to the last expressionConfigurable\n            String adjustedPropertyName = propertyName;\n            if (StringUtils.contains(propertyName, \".\")) {\n                String configurablePath = StringUtils.substringBeforeLast(propertyName, \".\");\n                adjustedPropertyName = StringUtils.substringAfterLast(propertyName, \".\");\n\n                Object nestedObject = ObjectPropertyUtils.getPropertyValue(expressionConfigurable, configurablePath);\n\n                // skip missing expression object for components skipping their lifecycle because objects\n                // in these components may be missing (and are expected to be missing)\n                if (nestedObject == null\n                        && expressionConfigurable instanceof LifecycleElement\n                        && ((LifecycleElement) expressionConfigurable).skipLifecycle()) {\n                    continue;\n                }\n\n                if ((nestedObject == null) || !(nestedObject instanceof UifDictionaryBean)) {\n                    throw new RiceRuntimeException(\"Object for which expression is configured on is null or does not \"\n                            + \"implement UifDictionaryBean: '\"\n                            + configurablePath\n                            + \"' on class \"\n                            + expressionConfigurable.getClass().getName()\n                            + \" while evaluating \"\n                            + \"expression for \"\n                            + propertyName);\n                }\n\n                // use nested object as the expressionConfigurable which will get the property expression\n                configurableWithExpression = (UifDictionaryBean) nestedObject;\n            }\n\n            configurableWithExpression.getPropertyExpressions().put(adjustedPropertyName, expression);\n        }\n    }", "signature": "void populatePropertyExpressionsFromGraph(UifDictionaryBean expressionConfigurable)", "full_signature": "public static void populatePropertyExpressionsFromGraph(UifDictionaryBean expressionConfigurable)", "class_method_signature": "ExpressionUtils.populatePropertyExpressionsFromGraph(UifDictionaryBean expressionConfigurable)", "testcase": false, "constructor": false, "invocations": ["getExpressionGraph", "getExpressionGraph", "entrySet", "getKey", "getValue", "contains", "substringBeforeLast", "substringAfterLast", "getPropertyValue", "skipLifecycle", "getName", "getClass", "put", "getPropertyExpressions"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}