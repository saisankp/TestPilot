{"test_class": {"identifier": "TestLoadBalancingRpcClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(TestLoadBalancingRpcClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(TestLoadBalancingRpcClient.class)", "var_name": "LOGGER"}], "file": "flume-ng-sdk/src/test/java/org/apache/flume/api/TestLoadBalancingRpcClient.java"}, "test_case": {"identifier": "testCreatingLbClientSingleHost", "parameters": "()", "modifiers": "@Test(expected = FlumeException.class) public", "return": "void", "body": "@Test(expected = FlumeException.class)\n  public void testCreatingLbClientSingleHost() {\n    Server server1 = null;\n    RpcClient c = null;\n    try {\n      server1 = RpcTestUtils.startServer(new OKAvroHandler());\n      Properties p = new Properties();\n      p.put(\"host1\", \"127.0.0.1:\" + server1.getPort());\n      p.put(\"hosts\", \"host1\");\n      p.put(\"client.type\", \"default_loadbalance\");\n      RpcClientFactory.getInstance(p);\n    } finally {\n      if (server1 != null) server1.close();\n      if (c != null) c.close();\n    }\n  }", "signature": "void testCreatingLbClientSingleHost()", "full_signature": "@Test(expected = FlumeException.class) public void testCreatingLbClientSingleHost()", "class_method_signature": "TestLoadBalancingRpcClient.testCreatingLbClientSingleHost()", "testcase": true, "constructor": false, "invocations": ["startServer", "put", "getPort", "put", "put", "getInstance", "close", "close"]}, "focal_class": {"identifier": "LoadBalancingRpcClient", "superclass": "extends AbstractRpcClient", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory\n      .getLogger(LoadBalancingRpcClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory\n      .getLogger(LoadBalancingRpcClient.class)", "var_name": "LOGGER"}, {"original_string": "private List<HostInfo> hosts;", "modifier": "private", "type": "List<HostInfo>", "declarator": "hosts", "var_name": "hosts"}, {"original_string": "private HostSelector selector;", "modifier": "private", "type": "HostSelector", "declarator": "selector", "var_name": "selector"}, {"original_string": "private Map<String, RpcClient> clientMap;", "modifier": "private", "type": "Map<String, RpcClient>", "declarator": "clientMap", "var_name": "clientMap"}, {"original_string": "private Properties configurationProperties;", "modifier": "private", "type": "Properties", "declarator": "configurationProperties", "var_name": "configurationProperties"}, {"original_string": "private volatile boolean isOpen = false;", "modifier": "private volatile", "type": "boolean", "declarator": "isOpen = false", "var_name": "isOpen"}], "methods": [{"identifier": "append", "parameters": "(Event event)", "modifiers": "@Override public", "return": "void", "signature": "void append(Event event)", "full_signature": "@Override public void append(Event event)", "class_method_signature": "LoadBalancingRpcClient.append(Event event)", "testcase": false, "constructor": false}, {"identifier": "appendBatch", "parameters": "(List<Event> events)", "modifiers": "@Override public", "return": "void", "signature": "void appendBatch(List<Event> events)", "full_signature": "@Override public void appendBatch(List<Event> events)", "class_method_signature": "LoadBalancingRpcClient.appendBatch(List<Event> events)", "testcase": false, "constructor": false}, {"identifier": "isActive", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isActive()", "full_signature": "@Override public boolean isActive()", "class_method_signature": "LoadBalancingRpcClient.isActive()", "testcase": false, "constructor": false}, {"identifier": "throwIfClosed", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void throwIfClosed()", "full_signature": "private void throwIfClosed()", "class_method_signature": "LoadBalancingRpcClient.throwIfClosed()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "LoadBalancingRpcClient.close()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Properties properties)", "modifiers": "@Override protected", "return": "void", "signature": "void configure(Properties properties)", "full_signature": "@Override protected void configure(Properties properties)", "class_method_signature": "LoadBalancingRpcClient.configure(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "getClient", "parameters": "(HostInfo info)", "modifiers": "private synchronized", "return": "RpcClient", "signature": "RpcClient getClient(HostInfo info)", "full_signature": "private synchronized RpcClient getClient(HostInfo info)", "class_method_signature": "LoadBalancingRpcClient.getClient(HostInfo info)", "testcase": false, "constructor": false}, {"identifier": "createClient", "parameters": "(String referenceName)", "modifiers": "private", "return": "RpcClient", "signature": "RpcClient createClient(String referenceName)", "full_signature": "private RpcClient createClient(String referenceName)", "class_method_signature": "LoadBalancingRpcClient.createClient(String referenceName)", "testcase": false, "constructor": false}, {"identifier": "getClientConfigurationProperties", "parameters": "(String referenceName)", "modifiers": "private", "return": "Properties", "signature": "Properties getClientConfigurationProperties(String referenceName)", "full_signature": "private Properties getClientConfigurationProperties(String referenceName)", "class_method_signature": "LoadBalancingRpcClient.getClientConfigurationProperties(String referenceName)", "testcase": false, "constructor": false}], "file": "flume-ng-sdk/src/main/java/org/apache/flume/api/LoadBalancingRpcClient.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void close() throws FlumeException {\n    isOpen = false;\n    synchronized (this) {\n      Iterator<String> it = clientMap.keySet().iterator();\n      while (it.hasNext()) {\n        String name = it.next();\n        RpcClient client = clientMap.get(name);\n        if (client != null) {\n          try {\n            client.close();\n          } catch (Exception ex) {\n            LOGGER.warn(\"Failed to close client: \" + name, ex);\n          }\n        }\n        it.remove();\n      }\n    }\n  }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "LoadBalancingRpcClient.close()", "testcase": false, "constructor": false, "invocations": ["iterator", "keySet", "hasNext", "next", "get", "close", "warn", "remove"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}