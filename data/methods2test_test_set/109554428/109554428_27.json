{"test_class": {"identifier": "ACLFileParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "broker/src/test/java/io/moquette/spi/impl/security/ACLFileParserTest.java"}, "test_case": {"identifier": "testParseValidPlusTopicWithEndLineComment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseValidPlusTopicWithEndLineComment() throws ParseException {\n        Reader conf = new StringReader(\"topic /weather/+/anemometer #simple comment\");\n        AuthorizationsCollector authorizations = ACLFileParser.parse(conf);\n\n        // Verify\n        assertTrue(authorizations.canRead(new Topic(\"/weather/+/anemometer\"), \"\", \"\"));\n        assertTrue(authorizations.canWrite(new Topic(\"/weather/+/anemometer\"), \"\", \"\"));\n    }", "signature": "void testParseValidPlusTopicWithEndLineComment()", "full_signature": "@Test public void testParseValidPlusTopicWithEndLineComment()", "class_method_signature": "ACLFileParserTest.testParseValidPlusTopicWithEndLineComment()", "testcase": true, "constructor": false, "invocations": ["parse", "assertTrue", "canRead", "assertTrue", "canWrite"]}, "focal_class": {"identifier": "ACLFileParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ACLFileParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ACLFileParser.class)", "var_name": "LOG"}], "methods": [{"identifier": "parse", "parameters": "(File file)", "modifiers": "public static", "return": "AuthorizationsCollector", "signature": "AuthorizationsCollector parse(File file)", "full_signature": "public static AuthorizationsCollector parse(File file)", "class_method_signature": "ACLFileParser.parse(File file)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(Reader reader)", "modifiers": "public static", "return": "AuthorizationsCollector", "signature": "AuthorizationsCollector parse(Reader reader)", "full_signature": "public static AuthorizationsCollector parse(Reader reader)", "class_method_signature": "ACLFileParser.parse(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "ACLFileParser", "parameters": "()", "modifiers": "private", "return": "", "signature": " ACLFileParser()", "full_signature": "private  ACLFileParser()", "class_method_signature": "ACLFileParser.ACLFileParser()", "testcase": false, "constructor": true}], "file": "broker/src/main/java/io/moquette/spi/impl/security/ACLFileParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(File file)", "modifiers": "public static", "return": "AuthorizationsCollector", "body": "public static AuthorizationsCollector parse(File file) throws ParseException {\n        if (file == null) {\n            LOG.warn(\"parsing NULL file, so fallback on default configuration!\");\n            return AuthorizationsCollector.emptyImmutableCollector();\n        }\n        if (!file.exists()) {\n            LOG.warn(\n                    String.format(\n                            \"parsing not existing file %s, so fallback on default configuration!\",\n                            file.getAbsolutePath()));\n            return AuthorizationsCollector.emptyImmutableCollector();\n        }\n        try {\n            FileReader reader = new FileReader(file);\n            return parse(reader);\n        } catch (FileNotFoundException fex) {\n            LOG.warn(\n                    String.format(\n                            \"parsing not existing file %s, so fallback on default configuration!\",\n                            file.getAbsolutePath()),\n                    fex);\n            return AuthorizationsCollector.emptyImmutableCollector();\n        }\n    }", "signature": "AuthorizationsCollector parse(File file)", "full_signature": "public static AuthorizationsCollector parse(File file)", "class_method_signature": "ACLFileParser.parse(File file)", "testcase": false, "constructor": false, "invocations": ["warn", "emptyImmutableCollector", "exists", "warn", "format", "getAbsolutePath", "emptyImmutableCollector", "parse", "warn", "format", "getAbsolutePath", "emptyImmutableCollector"]}, "repository": {"repo_id": 109554428, "url": "https://github.com/historicvally/springboot-mqtt", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 91, "size": 318, "license": "licensed"}}