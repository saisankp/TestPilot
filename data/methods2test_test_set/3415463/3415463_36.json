{"test_class": {"identifier": "RepositoryFactoryBeanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "RepositoryFactoryBean factory;", "modifier": "", "type": "RepositoryFactoryBean", "declarator": "factory", "var_name": "factory"}], "file": "se-jcr-jackrabbit/src/test/java/org/springframework/extensions/jcr/jackrabbit/RepositoryFactoryBeanTest.java"}, "test_case": {"identifier": "testResolveConfigurationResource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolveConfigurationResource() throws Exception {\n\n        factory.resolveConfigurationResource();\n        DefaultResourceLoader loader = new DefaultResourceLoader();\n        Resource res = loader.getResource(\"/repository.xml\");\n        assertEquals(res, factory.getConfiguration());\n        assertEquals(\".\", factory.getHomeDir().getFilename());\n\n    }", "signature": "void testResolveConfigurationResource()", "full_signature": "@Test public void testResolveConfigurationResource()", "class_method_signature": "RepositoryFactoryBeanTest.testResolveConfigurationResource()", "testcase": true, "constructor": false, "invocations": ["resolveConfigurationResource", "getResource", "assertEquals", "getConfiguration", "assertEquals", "getFilename", "getHomeDir"]}, "focal_class": {"identifier": "RepositoryFactoryBean", "superclass": "extends org.springframework.extensions.jcr.RepositoryFactoryBean", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RepositoryFactoryBean.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RepositoryFactoryBean.class)", "var_name": "LOG"}, {"original_string": "private static final String DEFAULT_CONF_FILE = \"repository.xml\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CONF_FILE = \"repository.xml\"", "var_name": "DEFAULT_CONF_FILE"}, {"original_string": "private static final String DEFAULT_REP_DIR = \".\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_REP_DIR = \".\"", "var_name": "DEFAULT_REP_DIR"}, {"original_string": "private Resource homeDir;", "modifier": "private", "type": "Resource", "declarator": "homeDir", "var_name": "homeDir"}, {"original_string": "private RepositoryConfig repositoryConfig;", "modifier": "private", "type": "RepositoryConfig", "declarator": "repositoryConfig", "var_name": "repositoryConfig"}], "methods": [{"identifier": "createRepository", "parameters": "()", "modifiers": "protected", "return": "Repository", "signature": "Repository createRepository()", "full_signature": "protected Repository createRepository()", "class_method_signature": "RepositoryFactoryBean.createRepository()", "testcase": false, "constructor": false}, {"identifier": "resolveConfigurationResource", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void resolveConfigurationResource()", "full_signature": "protected void resolveConfigurationResource()", "class_method_signature": "RepositoryFactoryBean.resolveConfigurationResource()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "RepositoryFactoryBean.destroy()", "testcase": false, "constructor": false}, {"identifier": "getHomeDir", "parameters": "()", "modifiers": "public", "return": "Resource", "signature": "Resource getHomeDir()", "full_signature": "public Resource getHomeDir()", "class_method_signature": "RepositoryFactoryBean.getHomeDir()", "testcase": false, "constructor": false}, {"identifier": "setHomeDir", "parameters": "(Resource defaultRepDir)", "modifiers": "public", "return": "void", "signature": "void setHomeDir(Resource defaultRepDir)", "full_signature": "public void setHomeDir(Resource defaultRepDir)", "class_method_signature": "RepositoryFactoryBean.setHomeDir(Resource defaultRepDir)", "testcase": false, "constructor": false}, {"identifier": "getRepositoryConfig", "parameters": "()", "modifiers": "public", "return": "RepositoryConfig", "signature": "RepositoryConfig getRepositoryConfig()", "full_signature": "public RepositoryConfig getRepositoryConfig()", "class_method_signature": "RepositoryFactoryBean.getRepositoryConfig()", "testcase": false, "constructor": false}, {"identifier": "setRepositoryConfig", "parameters": "(RepositoryConfig repositoryConfig)", "modifiers": "public", "return": "void", "signature": "void setRepositoryConfig(RepositoryConfig repositoryConfig)", "full_signature": "public void setRepositoryConfig(RepositoryConfig repositoryConfig)", "class_method_signature": "RepositoryFactoryBean.setRepositoryConfig(RepositoryConfig repositoryConfig)", "testcase": false, "constructor": false}], "file": "se-jcr-jackrabbit/src/main/java/org/springframework/extensions/jcr/jackrabbit/RepositoryFactoryBean.java"}, "focal_method": {"identifier": "resolveConfigurationResource", "parameters": "()", "modifiers": "protected", "return": "void", "body": "protected void resolveConfigurationResource() throws Exception {\n        // read the configuration object\n        if (repositoryConfig != null)\n            return;\n\n        if (this.configuration == null) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"no configuration resource specified, using the default one:\" + DEFAULT_CONF_FILE);\n            configuration = new ClassPathResource(DEFAULT_CONF_FILE);\n        }\n\n        if (homeDir == null) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"no repository home dir specified, using the default one:\" + DEFAULT_REP_DIR);\n            homeDir = new FileSystemResource(DEFAULT_REP_DIR);\n        }\n\n        repositoryConfig = RepositoryConfig.create(new InputSource(configuration.getInputStream()), homeDir.getFile().getAbsolutePath());\n    }", "signature": "void resolveConfigurationResource()", "full_signature": "protected void resolveConfigurationResource()", "class_method_signature": "RepositoryFactoryBean.resolveConfigurationResource()", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "isDebugEnabled", "debug", "create", "getInputStream", "getAbsolutePath", "getFile"]}, "repository": {"repo_id": 3415463, "url": "https://github.com/jbellmann/jcr-springextension", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 14, "size": 634, "license": "licensed"}}