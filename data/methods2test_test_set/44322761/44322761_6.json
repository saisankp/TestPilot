{"test_class": {"identifier": "CitizenIdTest", "superclass": "", "interfaces": "", "fields": [], "file": "thai-widget/src/test/java/nectec/thai/identity/CitizenIdTest.java"}, "test_case": {"identifier": "invalIdWithValidFormat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void invalIdWithValidFormat() {\n        assertFalse(\"0012300000000 should be invalid\", CitizenId.isValid(\"0012300000000\"));\n        assertFalse(\"1345678981235 should be invalid\", CitizenId.isValid(\"1345678981235\"));\n    }", "signature": "void invalIdWithValidFormat()", "full_signature": "@Test public void invalIdWithValidFormat()", "class_method_signature": "CitizenIdTest.invalIdWithValidFormat()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isValid", "assertFalse", "isValid"]}, "focal_class": {"identifier": "CitizenId", "superclass": "", "interfaces": "implements Identity", "fields": [{"original_string": "private static final int[] MULTIPLIER_TABLE = {13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2};", "modifier": "private static final", "type": "int[]", "declarator": "MULTIPLIER_TABLE = {13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2}", "var_name": "MULTIPLIER_TABLE"}, {"original_string": "private static final int LENGTH = 13;", "modifier": "private static final", "type": "int", "declarator": "LENGTH = 13", "var_name": "LENGTH"}, {"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private final PrettyPrinter printer = new IdPrettyPrinter() {\n        @Override\n        protected boolean positionToInsertSeparatorBefore(int position) {\n            switch (position) {\n                case 1:\n                case 5:\n                case 10:\n                case 12:\n                    return true;\n            }\n            return false;\n        }\n    };", "modifier": "private final", "type": "PrettyPrinter", "declarator": "printer = new IdPrettyPrinter() {\n        @Override\n        protected boolean positionToInsertSeparatorBefore(int position) {\n            switch (position) {\n                case 1:\n                case 5:\n                case 10:\n                case 12:\n                    return true;\n            }\n            return false;\n        }\n    }", "var_name": "printer"}], "methods": [{"identifier": "CitizenId", "parameters": "(String id)", "modifiers": "public", "return": "", "signature": " CitizenId(String id)", "full_signature": "public  CitizenId(String id)", "class_method_signature": "CitizenId.CitizenId(String id)", "testcase": false, "constructor": true}, {"identifier": "isValid", "parameters": "(String id)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValid(String id)", "full_signature": "public static boolean isValid(String id)", "class_method_signature": "CitizenId.isValid(String id)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean validate()", "full_signature": "@Override public boolean validate()", "class_method_signature": "CitizenId.validate()", "testcase": false, "constructor": false}, {"identifier": "isValidFormat", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValidFormat()", "full_signature": "@Override public boolean isValidFormat()", "class_method_signature": "CitizenId.isValidFormat()", "testcase": false, "constructor": false}, {"identifier": "isRepeatNumber", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isRepeatNumber()", "full_signature": "private boolean isRepeatNumber()", "class_method_signature": "CitizenId.isRepeatNumber()", "testcase": false, "constructor": false}, {"identifier": "getCheckDigit", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int getCheckDigit()", "full_signature": "protected int getCheckDigit()", "class_method_signature": "CitizenId.getCheckDigit()", "testcase": false, "constructor": false}, {"identifier": "calculateCheckDigit", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int calculateCheckDigit()", "full_signature": "protected int calculateCheckDigit()", "class_method_signature": "CitizenId.calculateCheckDigit()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "CitizenId.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "CitizenId.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CitizenId.toString()", "testcase": false, "constructor": false}, {"identifier": "prettyPrint", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String prettyPrint()", "full_signature": "@Override public String prettyPrint()", "class_method_signature": "CitizenId.prettyPrint()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "CitizenId.getId()", "testcase": false, "constructor": false}], "file": "thai-widget/src/main/java/nectec/thai/identity/CitizenId.java"}, "focal_method": {"identifier": "isValid", "parameters": "(String id)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isValid(String id) {\n        CitizenId cid = new CitizenId(id);\n        return cid.validate();\n    }", "signature": "boolean isValid(String id)", "full_signature": "public static boolean isValid(String id)", "class_method_signature": "CitizenId.isValid(String id)", "testcase": false, "constructor": false, "invocations": ["validate"]}, "repository": {"repo_id": 44322761, "url": "https://github.com/nectec-opensource/thai-widget", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 2551, "license": "licensed"}}