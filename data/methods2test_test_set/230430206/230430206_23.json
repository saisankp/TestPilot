{"test_class": {"identifier": "ZKTrustManagerTest", "superclass": "extends ZKTestCase", "interfaces": "", "fields": [{"original_string": "private static KeyPair keyPair;", "modifier": "private static", "type": "KeyPair", "declarator": "keyPair", "var_name": "keyPair"}, {"original_string": "private X509ExtendedTrustManager mockX509ExtendedTrustManager;", "modifier": "private", "type": "X509ExtendedTrustManager", "declarator": "mockX509ExtendedTrustManager", "var_name": "mockX509ExtendedTrustManager"}, {"original_string": "private static final String IP_ADDRESS = \"127.0.0.1\";", "modifier": "private static final", "type": "String", "declarator": "IP_ADDRESS = \"127.0.0.1\"", "var_name": "IP_ADDRESS"}, {"original_string": "private static final String HOSTNAME = \"localhost\";", "modifier": "private static final", "type": "String", "declarator": "HOSTNAME = \"localhost\"", "var_name": "HOSTNAME"}, {"original_string": "private InetAddress mockInetAddress;", "modifier": "private", "type": "InetAddress", "declarator": "mockInetAddress", "var_name": "mockInetAddress"}, {"original_string": "private Socket mockSocket;", "modifier": "private", "type": "Socket", "declarator": "mockSocket", "var_name": "mockSocket"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKTrustManagerTest.java"}, "test_case": {"identifier": "testServerHostnameVerificationWithHostname", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testServerHostnameVerificationWithHostname() throws Exception {\n        ZKTrustManager zkTrustManager = new ZKTrustManager(mockX509ExtendedTrustManager, true, false);\n\n        X509Certificate[] certificateChain = createSelfSignedCertifcateChain(null, HOSTNAME);\n        zkTrustManager.checkServerTrusted(certificateChain, null, mockSocket);\n\n        verify(mockInetAddress, times(1)).getHostAddress();\n        verify(mockInetAddress, times(1)).getHostName();\n\n        verify(mockX509ExtendedTrustManager, times(1)).checkServerTrusted(certificateChain, null, mockSocket);\n    }", "signature": "void testServerHostnameVerificationWithHostname()", "full_signature": "@Test public void testServerHostnameVerificationWithHostname()", "class_method_signature": "ZKTrustManagerTest.testServerHostnameVerificationWithHostname()", "testcase": true, "constructor": false, "invocations": ["createSelfSignedCertifcateChain", "checkServerTrusted", "getHostAddress", "verify", "times", "getHostName", "verify", "times", "checkServerTrusted", "verify", "times"]}, "focal_class": {"identifier": "ZKTrustManager", "superclass": "extends X509ExtendedTrustManager", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ZKTrustManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ZKTrustManager.class)", "var_name": "LOG"}, {"original_string": "private X509ExtendedTrustManager x509ExtendedTrustManager;", "modifier": "private", "type": "X509ExtendedTrustManager", "declarator": "x509ExtendedTrustManager", "var_name": "x509ExtendedTrustManager"}, {"original_string": "private boolean serverHostnameVerificationEnabled;", "modifier": "private", "type": "boolean", "declarator": "serverHostnameVerificationEnabled", "var_name": "serverHostnameVerificationEnabled"}, {"original_string": "private boolean clientHostnameVerificationEnabled;", "modifier": "private", "type": "boolean", "declarator": "clientHostnameVerificationEnabled", "var_name": "clientHostnameVerificationEnabled"}, {"original_string": "private ZKHostnameVerifier hostnameVerifier;", "modifier": "private", "type": "ZKHostnameVerifier", "declarator": "hostnameVerifier", "var_name": "hostnameVerifier"}], "methods": [{"identifier": "ZKTrustManager", "parameters": "(X509ExtendedTrustManager x509ExtendedTrustManager, boolean serverHostnameVerificationEnabled,\n                   boolean clientHostnameVerificationEnabled)", "modifiers": "", "return": "", "signature": " ZKTrustManager(X509ExtendedTrustManager x509ExtendedTrustManager, boolean serverHostnameVerificationEnabled,\n                   boolean clientHostnameVerificationEnabled)", "full_signature": "  ZKTrustManager(X509ExtendedTrustManager x509ExtendedTrustManager, boolean serverHostnameVerificationEnabled,\n                   boolean clientHostnameVerificationEnabled)", "class_method_signature": "ZKTrustManager.ZKTrustManager(X509ExtendedTrustManager x509ExtendedTrustManager, boolean serverHostnameVerificationEnabled,\n                   boolean clientHostnameVerificationEnabled)", "testcase": false, "constructor": true}, {"identifier": "getAcceptedIssuers", "parameters": "()", "modifiers": "@Override public", "return": "X509Certificate[]", "signature": "X509Certificate[] getAcceptedIssuers()", "full_signature": "@Override public X509Certificate[] getAcceptedIssuers()", "class_method_signature": "ZKTrustManager.getAcceptedIssuers()", "testcase": false, "constructor": false}, {"identifier": "checkClientTrusted", "parameters": "(X509Certificate[] chain, String authType, Socket socket)", "modifiers": "@Override public", "return": "void", "signature": "void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket)", "full_signature": "@Override public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket)", "class_method_signature": "ZKTrustManager.checkClientTrusted(X509Certificate[] chain, String authType, Socket socket)", "testcase": false, "constructor": false}, {"identifier": "checkServerTrusted", "parameters": "(X509Certificate[] chain, String authType, Socket socket)", "modifiers": "@Override public", "return": "void", "signature": "void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket)", "full_signature": "@Override public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket)", "class_method_signature": "ZKTrustManager.checkServerTrusted(X509Certificate[] chain, String authType, Socket socket)", "testcase": false, "constructor": false}, {"identifier": "checkClientTrusted", "parameters": "(X509Certificate[] chain, String authType, SSLEngine engine)", "modifiers": "@Override public", "return": "void", "signature": "void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine)", "full_signature": "@Override public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine)", "class_method_signature": "ZKTrustManager.checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine)", "testcase": false, "constructor": false}, {"identifier": "checkServerTrusted", "parameters": "(X509Certificate[] chain, String authType, SSLEngine engine)", "modifiers": "@Override public", "return": "void", "signature": "void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine)", "full_signature": "@Override public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine)", "class_method_signature": "ZKTrustManager.checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine)", "testcase": false, "constructor": false}, {"identifier": "checkClientTrusted", "parameters": "(X509Certificate[] chain, String authType)", "modifiers": "@Override public", "return": "void", "signature": "void checkClientTrusted(X509Certificate[] chain, String authType)", "full_signature": "@Override public void checkClientTrusted(X509Certificate[] chain, String authType)", "class_method_signature": "ZKTrustManager.checkClientTrusted(X509Certificate[] chain, String authType)", "testcase": false, "constructor": false}, {"identifier": "checkServerTrusted", "parameters": "(X509Certificate[] chain, String authType)", "modifiers": "@Override public", "return": "void", "signature": "void checkServerTrusted(X509Certificate[] chain, String authType)", "full_signature": "@Override public void checkServerTrusted(X509Certificate[] chain, String authType)", "class_method_signature": "ZKTrustManager.checkServerTrusted(X509Certificate[] chain, String authType)", "testcase": false, "constructor": false}, {"identifier": "performHostVerification", "parameters": "(InetAddress inetAddress, X509Certificate certificate)", "modifiers": "private", "return": "void", "signature": "void performHostVerification(InetAddress inetAddress, X509Certificate certificate)", "full_signature": "private void performHostVerification(InetAddress inetAddress, X509Certificate certificate)", "class_method_signature": "ZKTrustManager.performHostVerification(InetAddress inetAddress, X509Certificate certificate)", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKTrustManager.java"}, "focal_method": {"identifier": "checkServerTrusted", "parameters": "(X509Certificate[] chain, String authType, Socket socket)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        x509ExtendedTrustManager.checkServerTrusted(chain, authType, socket);\n        if (serverHostnameVerificationEnabled) {\n            performHostVerification(socket.getInetAddress(), chain[0]);\n        }\n    }", "signature": "void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket)", "full_signature": "@Override public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket)", "class_method_signature": "ZKTrustManager.checkServerTrusted(X509Certificate[] chain, String authType, Socket socket)", "testcase": false, "constructor": false, "invocations": ["checkServerTrusted", "performHostVerification", "getInetAddress"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}