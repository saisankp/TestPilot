{"test_class": {"identifier": "RollingCollapserBatchSizeDistributionStreamTest", "superclass": "extends CommandStreamTest", "interfaces": "", "fields": [{"original_string": "RollingCollapserBatchSizeDistributionStream stream;", "modifier": "", "type": "RollingCollapserBatchSizeDistributionStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "HystrixRequestContext context;", "modifier": "", "type": "HystrixRequestContext", "declarator": "context", "var_name": "context"}], "file": "hystrix-core/src/test/java/com/netflix/hystrix/metric/consumer/RollingCollapserBatchSizeDistributionStreamTest.java"}, "test_case": {"identifier": "testBatches", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBatches() {\n        HystrixCollapserKey key = HystrixCollapserKey.Factory.asKey(\"Collapser-Batch-Size-B\");\n        stream = RollingCollapserBatchSizeDistributionStream.getInstance(key, 10, 100);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(10).subscribe(new Subscriber<CachedValuesHistogram>() {\n            @Override\n            public void onCompleted() {\n                latch.countDown();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                fail(e.getMessage());\n            }\n\n            @Override\n            public void onNext(CachedValuesHistogram distribution) {\n                System.out.println(\"OnNext @ \" + System.currentTimeMillis());\n            }\n        });\n\n        Collapser.from(key, 1).observe();\n        Collapser.from(key, 2).observe();\n        Collapser.from(key, 3).observe();\n\n        try {\n            Thread.sleep(250);\n        } catch (InterruptedException ex) {\n            fail(\"Interrupted ex\");\n        }\n\n        Collapser.from(key, 4).observe();\n\n        try {\n            Thread.sleep(250);\n        } catch (InterruptedException ex) {\n            fail(\"Interrupted ex\");\n        }\n\n        Collapser.from(key, 5).observe();\n        Collapser.from(key, 6).observe();\n        Collapser.from(key, 7).observe();\n        Collapser.from(key, 8).observe();\n        Collapser.from(key, 9).observe();\n\n        try {\n            Thread.sleep(250);\n        } catch (InterruptedException ex) {\n            fail(\"Interrupted ex\");\n        }\n\n        Collapser.from(key, 10).observe();\n        Collapser.from(key, 11).observe();\n        Collapser.from(key, 12).observe();\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(\"Interrupted ex\");\n        }\n        //should have 4 batches: 3, 1, 5, 3\n        assertEquals(4, stream.getLatest().getTotalCount());\n        assertEquals(3, stream.getLatestMean());\n        assertEquals(1, stream.getLatestPercentile(0));\n        assertEquals(5, stream.getLatestPercentile(100));\n    }", "signature": "void testBatches()", "full_signature": "@Test public void testBatches()", "class_method_signature": "RollingCollapserBatchSizeDistributionStreamTest.testBatches()", "testcase": true, "constructor": false, "invocations": ["asKey", "getInstance", "startCachingStreamValuesIfUnstarted", "subscribe", "take", "observe", "countDown", "fail", "getMessage", "println", "currentTimeMillis", "observe", "from", "observe", "from", "observe", "from", "sleep", "fail", "observe", "from", "sleep", "fail", "observe", "from", "observe", "from", "observe", "from", "observe", "from", "observe", "from", "sleep", "fail", "observe", "from", "observe", "from", "observe", "from", "assertTrue", "await", "fail", "assertEquals", "getTotalCount", "getLatest", "assertEquals", "getLatestMean", "assertEquals", "getLatestPercentile", "assertEquals", "getLatestPercentile"]}, "focal_class": {"identifier": "RollingCollapserBatchSizeDistributionStream", "superclass": "extends RollingDistributionStream<HystrixCollapserEvent>", "interfaces": "", "fields": [{"original_string": "private static final ConcurrentMap<String, RollingCollapserBatchSizeDistributionStream> streams = new ConcurrentHashMap<String, RollingCollapserBatchSizeDistributionStream>();", "modifier": "private static final", "type": "ConcurrentMap<String, RollingCollapserBatchSizeDistributionStream>", "declarator": "streams = new ConcurrentHashMap<String, RollingCollapserBatchSizeDistributionStream>()", "var_name": "streams"}, {"original_string": "private static final Func2<Histogram, HystrixCollapserEvent, Histogram> addValuesToBucket = new Func2<Histogram, HystrixCollapserEvent, Histogram>() {\n        @Override\n        public Histogram call(Histogram initialDistribution, HystrixCollapserEvent event) {\n            switch (event.getEventType()) {\n                case ADDED_TO_BATCH:\n                    if (event.getCount() > -1) {\n                        initialDistribution.recordValue(event.getCount());\n                    }\n                    break;\n                default:\n                    //do nothing\n                    break;\n            }\n            return initialDistribution;\n        }\n    };", "modifier": "private static final", "type": "Func2<Histogram, HystrixCollapserEvent, Histogram>", "declarator": "addValuesToBucket = new Func2<Histogram, HystrixCollapserEvent, Histogram>() {\n        @Override\n        public Histogram call(Histogram initialDistribution, HystrixCollapserEvent event) {\n            switch (event.getEventType()) {\n                case ADDED_TO_BATCH:\n                    if (event.getCount() > -1) {\n                        initialDistribution.recordValue(event.getCount());\n                    }\n                    break;\n                default:\n                    //do nothing\n                    break;\n            }\n            return initialDistribution;\n        }\n    }", "var_name": "addValuesToBucket"}], "methods": [{"identifier": "getInstance", "parameters": "(HystrixCollapserKey collapserKey, HystrixCollapserProperties properties)", "modifiers": "public static", "return": "RollingCollapserBatchSizeDistributionStream", "signature": "RollingCollapserBatchSizeDistributionStream getInstance(HystrixCollapserKey collapserKey, HystrixCollapserProperties properties)", "full_signature": "public static RollingCollapserBatchSizeDistributionStream getInstance(HystrixCollapserKey collapserKey, HystrixCollapserProperties properties)", "class_method_signature": "RollingCollapserBatchSizeDistributionStream.getInstance(HystrixCollapserKey collapserKey, HystrixCollapserProperties properties)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(HystrixCollapserKey collapserKey, int numBuckets, int bucketSizeInMs)", "modifiers": "public static", "return": "RollingCollapserBatchSizeDistributionStream", "signature": "RollingCollapserBatchSizeDistributionStream getInstance(HystrixCollapserKey collapserKey, int numBuckets, int bucketSizeInMs)", "full_signature": "public static RollingCollapserBatchSizeDistributionStream getInstance(HystrixCollapserKey collapserKey, int numBuckets, int bucketSizeInMs)", "class_method_signature": "RollingCollapserBatchSizeDistributionStream.getInstance(HystrixCollapserKey collapserKey, int numBuckets, int bucketSizeInMs)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void reset()", "full_signature": "public static void reset()", "class_method_signature": "RollingCollapserBatchSizeDistributionStream.reset()", "testcase": false, "constructor": false}, {"identifier": "RollingCollapserBatchSizeDistributionStream", "parameters": "(HystrixCollapserKey collapserKey, int numPercentileBuckets, int percentileBucketSizeInMs)", "modifiers": "private", "return": "", "signature": " RollingCollapserBatchSizeDistributionStream(HystrixCollapserKey collapserKey, int numPercentileBuckets, int percentileBucketSizeInMs)", "full_signature": "private  RollingCollapserBatchSizeDistributionStream(HystrixCollapserKey collapserKey, int numPercentileBuckets, int percentileBucketSizeInMs)", "class_method_signature": "RollingCollapserBatchSizeDistributionStream.RollingCollapserBatchSizeDistributionStream(HystrixCollapserKey collapserKey, int numPercentileBuckets, int percentileBucketSizeInMs)", "testcase": false, "constructor": true}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/metric/consumer/RollingCollapserBatchSizeDistributionStream.java"}, "focal_method": {"identifier": "getInstance", "parameters": "(HystrixCollapserKey collapserKey, HystrixCollapserProperties properties)", "modifiers": "public static", "return": "RollingCollapserBatchSizeDistributionStream", "body": "public static RollingCollapserBatchSizeDistributionStream getInstance(HystrixCollapserKey collapserKey, HystrixCollapserProperties properties) {\n        final int percentileMetricWindow = properties.metricsRollingPercentileWindowInMilliseconds().get();\n        final int numPercentileBuckets = properties.metricsRollingPercentileWindowBuckets().get();\n        final int percentileBucketSizeInMs = percentileMetricWindow / numPercentileBuckets;\n\n        return getInstance(collapserKey, numPercentileBuckets, percentileBucketSizeInMs);\n    }", "signature": "RollingCollapserBatchSizeDistributionStream getInstance(HystrixCollapserKey collapserKey, HystrixCollapserProperties properties)", "full_signature": "public static RollingCollapserBatchSizeDistributionStream getInstance(HystrixCollapserKey collapserKey, HystrixCollapserProperties properties)", "class_method_signature": "RollingCollapserBatchSizeDistributionStream.getInstance(HystrixCollapserKey collapserKey, HystrixCollapserProperties properties)", "testcase": false, "constructor": false, "invocations": ["get", "metricsRollingPercentileWindowInMilliseconds", "get", "metricsRollingPercentileWindowBuckets", "getInstance"]}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}