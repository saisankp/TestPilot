{"test_class": {"identifier": "CompilationManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "FileSystem fileSystem = FileSystems.getDefault();", "modifier": "", "type": "FileSystem", "declarator": "fileSystem = FileSystems.getDefault()", "var_name": "fileSystem"}, {"original_string": "Path testSourceRoot = fileSystem.getPath(\"src/test/test-classes-sources\");", "modifier": "", "type": "Path", "declarator": "testSourceRoot = fileSystem.getPath(\"src/test/test-classes-sources\")", "var_name": "testSourceRoot"}, {"original_string": "Path sourceRoot = fileSystem.getPath(\"target/tmp/src\");", "modifier": "", "type": "Path", "declarator": "sourceRoot = fileSystem.getPath(\"target/tmp/src\")", "var_name": "sourceRoot"}, {"original_string": "List<Path> sourceRoots = asList(sourceRoot);", "modifier": "", "type": "List<Path>", "declarator": "sourceRoots = asList(sourceRoot)", "var_name": "sourceRoots"}, {"original_string": "Path destination = fileSystem.getPath(\"target/tmp/classes\");", "modifier": "", "type": "Path", "declarator": "destination = fileSystem.getPath(\"target/tmp/classes\")", "var_name": "destination"}, {"original_string": "EventBus eventBus = new EventBus();", "modifier": "", "type": "EventBus", "declarator": "eventBus = new EventBus()", "var_name": "eventBus"}, {"original_string": "List<Object> events = new ArrayList<>();", "modifier": "", "type": "List<Object>", "declarator": "events = new ArrayList<>()", "var_name": "events"}], "file": "restx-classloader/src/test/java/restx/classloader/CompilationManagerTest.java"}, "test_case": {"identifier": "should_filter_resources", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_filter_resources() throws Exception {\n        CompilationManager compilationManager = new CompilationManager(eventBus, sourceRoots, destination);\n\n        File resource = destination.resolve(\"restx/classloader/test_resource.txt___jb_old___\").toFile();\n        assertThat(resource).doesNotExist();\n\n        prepareSource(\"restx/classloader/test_resource.txt___jb_old___\");\n        compilationManager.rebuild();\n        assertThat(resource).doesNotExist();\n        assertThat(events).isEmpty();\n    }", "signature": "void should_filter_resources()", "full_signature": "@Test public void should_filter_resources()", "class_method_signature": "CompilationManagerTest.should_filter_resources()", "testcase": true, "constructor": false, "invocations": ["toFile", "resolve", "doesNotExist", "assertThat", "prepareSource", "rebuild", "doesNotExist", "assertThat", "isEmpty", "assertThat"]}, "focal_class": {"identifier": "CompilationManager", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final Runnable NO_OP = new Runnable() {\n        @Override\n        public void run() {\n        }\n    };", "modifier": "private static final", "type": "Runnable", "declarator": "NO_OP = new Runnable() {\n        @Override\n        public void run() {\n        }\n    }", "var_name": "NO_OP"}, {"original_string": "public static final Predicate<Path> DEFAULT_CLASSPATH_RESOURCE_FILTER = new Predicate<Path>() {\n        @Override\n        public boolean apply(java.nio.file.Path path) {\n            return\n                    // Intellij IDEA temporary files\n                       !path.toString().endsWith(\"___jb_old___\")\n                    && !path.toString().endsWith(\"___jb_bak___\")\n\n                    // svn\n                    && path.toAbsolutePath().toString().replace('\\\\', '/').indexOf(\"/.svn/\") == -1;\n        }\n    };", "modifier": "public static final", "type": "Predicate<Path>", "declarator": "DEFAULT_CLASSPATH_RESOURCE_FILTER = new Predicate<Path>() {\n        @Override\n        public boolean apply(java.nio.file.Path path) {\n            return\n                    // Intellij IDEA temporary files\n                       !path.toString().endsWith(\"___jb_old___\")\n                    && !path.toString().endsWith(\"___jb_bak___\")\n\n                    // svn\n                    && path.toAbsolutePath().toString().replace('\\\\', '/').indexOf(\"/.svn/\") == -1;\n        }\n    }", "var_name": "DEFAULT_CLASSPATH_RESOURCE_FILTER"}, {"original_string": "public static final CompilationSettings DEFAULT_SETTINGS = new CompilationSettings() {\n        @Override\n        public int autoCompileCoalescePeriod() {\n            return 50;\n        }\n\n        @Override\n        public Predicate<Path> classpathResourceFilter() {\n            return DEFAULT_CLASSPATH_RESOURCE_FILTER;\n        }\n    };", "modifier": "public static final", "type": "CompilationSettings", "declarator": "DEFAULT_SETTINGS = new CompilationSettings() {\n        @Override\n        public int autoCompileCoalescePeriod() {\n            return 50;\n        }\n\n        @Override\n        public Predicate<Path> classpathResourceFilter() {\n            return DEFAULT_CLASSPATH_RESOURCE_FILTER;\n        }\n    }", "var_name": "DEFAULT_SETTINGS"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(CompilationManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CompilationManager.class)", "var_name": "logger"}, {"original_string": "private final EventBus eventBus;", "modifier": "private final", "type": "EventBus", "declarator": "eventBus", "var_name": "eventBus"}, {"original_string": "private final Predicate<Path> classpathResourceFilter;", "modifier": "private final", "type": "Predicate<Path>", "declarator": "classpathResourceFilter", "var_name": "classpathResourceFilter"}, {"original_string": "private final JavaCompiler javaCompiler;", "modifier": "private final", "type": "JavaCompiler", "declarator": "javaCompiler", "var_name": "javaCompiler"}, {"original_string": "private final Iterable<Path> sourceRoots;", "modifier": "private final", "type": "Iterable<Path>", "declarator": "sourceRoots", "var_name": "sourceRoots"}, {"original_string": "private final Path destination;", "modifier": "private final", "type": "Path", "declarator": "destination", "var_name": "destination"}, {"original_string": "private final CompilationSettings settings;", "modifier": "private final", "type": "CompilationSettings", "declarator": "settings", "var_name": "settings"}, {"original_string": "private final StandardJavaFileManager fileManager;", "modifier": "private final", "type": "StandardJavaFileManager", "declarator": "fileManager", "var_name": "fileManager"}, {"original_string": "private final ScheduledExecutorService compileExecutor = Executors.newSingleThreadScheduledExecutor();", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "compileExecutor = Executors.newSingleThreadScheduledExecutor()", "var_name": "compileExecutor"}, {"original_string": "private final ConcurrentLinkedDeque<Path> compileQueue = new ConcurrentLinkedDeque<>();", "modifier": "private final", "type": "ConcurrentLinkedDeque<Path>", "declarator": "compileQueue = new ConcurrentLinkedDeque<>()", "var_name": "compileQueue"}, {"original_string": "private final Map<Path, SourceHash> hashes = new HashMap<>();", "modifier": "private final", "type": "Map<Path, SourceHash>", "declarator": "hashes = new HashMap<>()", "var_name": "hashes"}, {"original_string": "private ExecutorService watcherExecutor;", "modifier": "private", "type": "ExecutorService", "declarator": "watcherExecutor", "var_name": "watcherExecutor"}, {"original_string": "private final List<Closeable> closeableWatchers = new ArrayList<>();", "modifier": "private final", "type": "List<Closeable>", "declarator": "closeableWatchers = new ArrayList<>()", "var_name": "closeableWatchers"}, {"original_string": "private volatile boolean compiling;", "modifier": "private volatile", "type": "boolean", "declarator": "compiling", "var_name": "compiling"}, {"original_string": "private final long compilationTimeout = 60;", "modifier": "private final", "type": "long", "declarator": "compilationTimeout = 60", "var_name": "compilationTimeout"}, {"original_string": "private final int autoCompileQuietPeriod = 50;", "modifier": "private final", "type": "int", "declarator": "autoCompileQuietPeriod = 50", "var_name": "autoCompileQuietPeriod"}, {"original_string": "private final boolean useLastModifiedTocheckChanges = true;", "modifier": "private final", "type": "boolean", "declarator": "useLastModifiedTocheckChanges = true", "var_name": "useLastModifiedTocheckChanges"}, {"original_string": "private Collection<Diagnostic<?>> lastDiagnostics = new CopyOnWriteArrayList<>();", "modifier": "private", "type": "Collection<Diagnostic<?>>", "declarator": "lastDiagnostics = new CopyOnWriteArrayList<>()", "var_name": "lastDiagnostics"}, {"original_string": "private final static AtomicLong CLASSLOADER_COUNT = new AtomicLong();", "modifier": "private final static", "type": "AtomicLong", "declarator": "CLASSLOADER_COUNT = new AtomicLong()", "var_name": "CLASSLOADER_COUNT"}], "methods": [{"identifier": "CompilationManager", "parameters": "(EventBus eventBus, Iterable<Path> sourceRoots, Path destination)", "modifiers": "public", "return": "", "signature": " CompilationManager(EventBus eventBus, Iterable<Path> sourceRoots, Path destination)", "full_signature": "public  CompilationManager(EventBus eventBus, Iterable<Path> sourceRoots, Path destination)", "class_method_signature": "CompilationManager.CompilationManager(EventBus eventBus, Iterable<Path> sourceRoots, Path destination)", "testcase": false, "constructor": true}, {"identifier": "CompilationManager", "parameters": "(EventBus eventBus, final Iterable<Path> sourceRoots, Path destination, CompilationSettings settings)", "modifiers": "public", "return": "", "signature": " CompilationManager(EventBus eventBus, final Iterable<Path> sourceRoots, Path destination, CompilationSettings settings)", "full_signature": "public  CompilationManager(EventBus eventBus, final Iterable<Path> sourceRoots, Path destination, CompilationSettings settings)", "class_method_signature": "CompilationManager.CompilationManager(EventBus eventBus, final Iterable<Path> sourceRoots, Path destination, CompilationSettings settings)", "testcase": false, "constructor": true}, {"identifier": "getEventBus", "parameters": "()", "modifiers": "public", "return": "EventBus", "signature": "EventBus getEventBus()", "full_signature": "public EventBus getEventBus()", "class_method_signature": "CompilationManager.getEventBus()", "testcase": false, "constructor": false}, {"identifier": "getDestination", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getDestination()", "full_signature": "public Path getDestination()", "class_method_signature": "CompilationManager.getDestination()", "testcase": false, "constructor": false}, {"identifier": "getSourceRoots", "parameters": "()", "modifiers": "public", "return": "Iterable<Path>", "signature": "Iterable<Path> getSourceRoots()", "full_signature": "public Iterable<Path> getSourceRoots()", "class_method_signature": "CompilationManager.getSourceRoots()", "testcase": false, "constructor": false}, {"identifier": "copyResource", "parameters": "(final SourcePath resourcePath)", "modifiers": "private", "return": "void", "signature": "void copyResource(final SourcePath resourcePath)", "full_signature": "private void copyResource(final SourcePath resourcePath)", "class_method_signature": "CompilationManager.copyResource(final SourcePath resourcePath)", "testcase": false, "constructor": false}, {"identifier": "doCopyResource", "parameters": "(SourcePath resourcePath)", "modifiers": "private", "return": "void", "signature": "void doCopyResource(SourcePath resourcePath)", "full_signature": "private void doCopyResource(SourcePath resourcePath)", "class_method_signature": "CompilationManager.doCopyResource(SourcePath resourcePath)", "testcase": false, "constructor": false}, {"identifier": "queueCompile", "parameters": "(final Path source)", "modifiers": "private", "return": "boolean", "signature": "boolean queueCompile(final Path source)", "full_signature": "private boolean queueCompile(final Path source)", "class_method_signature": "CompilationManager.queueCompile(final Path source)", "testcase": false, "constructor": false}, {"identifier": "getClassFile", "parameters": "(String className)", "modifiers": "public", "return": "Optional<Path>", "signature": "Optional<Path> getClassFile(String className)", "full_signature": "public Optional<Path> getClassFile(String className)", "class_method_signature": "CompilationManager.getClassFile(String className)", "testcase": false, "constructor": false}, {"identifier": "startAutoCompile", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startAutoCompile()", "full_signature": "public void startAutoCompile()", "class_method_signature": "CompilationManager.startAutoCompile()", "testcase": false, "constructor": false}, {"identifier": "stopAutoCompile", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stopAutoCompile()", "full_signature": "public void stopAutoCompile()", "class_method_signature": "CompilationManager.stopAutoCompile()", "testcase": false, "constructor": false}, {"identifier": "awaitAutoCompile", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void awaitAutoCompile()", "full_signature": "public void awaitAutoCompile()", "class_method_signature": "CompilationManager.awaitAutoCompile()", "testcase": false, "constructor": false}, {"identifier": "incrementalCompile", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void incrementalCompile()", "full_signature": "public void incrementalCompile()", "class_method_signature": "CompilationManager.incrementalCompile()", "testcase": false, "constructor": false}, {"identifier": "isSource", "parameters": "(Path file)", "modifiers": "private", "return": "boolean", "signature": "boolean isSource(Path file)", "full_signature": "private boolean isSource(Path file)", "class_method_signature": "CompilationManager.isSource(Path file)", "testcase": false, "constructor": false}, {"identifier": "rebuild", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void rebuild()", "full_signature": "public void rebuild()", "class_method_signature": "CompilationManager.rebuild()", "testcase": false, "constructor": false}, {"identifier": "compileSources", "parameters": "(final Path... sources)", "modifiers": "public", "return": "void", "signature": "void compileSources(final Path... sources)", "full_signature": "public void compileSources(final Path... sources)", "class_method_signature": "CompilationManager.compileSources(final Path... sources)", "testcase": false, "constructor": false}, {"identifier": "getLastDiagnostics", "parameters": "()", "modifiers": "public", "return": "Collection<Diagnostic<?>>", "signature": "Collection<Diagnostic<?>> getLastDiagnostics()", "full_signature": "public Collection<Diagnostic<?>> getLastDiagnostics()", "class_method_signature": "CompilationManager.getLastDiagnostics()", "testcase": false, "constructor": false}, {"identifier": "newHotReloadingClassLoader", "parameters": "(String rootPackage, ImmutableSet<Class> coldClasses)", "modifiers": "public", "return": "HotReloadingClassLoader", "signature": "HotReloadingClassLoader newHotReloadingClassLoader(String rootPackage, ImmutableSet<Class> coldClasses)", "full_signature": "public HotReloadingClassLoader newHotReloadingClassLoader(String rootPackage, ImmutableSet<Class> coldClasses)", "class_method_signature": "CompilationManager.newHotReloadingClassLoader(String rootPackage, ImmutableSet<Class> coldClasses)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(Collection<Path> sources)", "modifiers": "private", "return": "void", "signature": "void compile(Collection<Path> sources)", "full_signature": "private void compile(Collection<Path> sources)", "class_method_signature": "CompilationManager.compile(Collection<Path> sources)", "testcase": false, "constructor": false}, {"identifier": "saveHashes", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void saveHashes()", "full_signature": "private void saveHashes()", "class_method_signature": "CompilationManager.saveHashes()", "testcase": false, "constructor": false}, {"identifier": "loadHashes", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadHashes()", "full_signature": "private void loadHashes()", "class_method_signature": "CompilationManager.loadHashes()", "testcase": false, "constructor": false}, {"identifier": "hashesFile", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File hashesFile()", "full_signature": "private File hashesFile()", "class_method_signature": "CompilationManager.hashesFile()", "testcase": false, "constructor": false}, {"identifier": "isCompiling", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCompiling()", "full_signature": "public boolean isCompiling()", "class_method_signature": "CompilationManager.isCompiling()", "testcase": false, "constructor": false}, {"identifier": "hasSourceChanged", "parameters": "(Path dir, Path source)", "modifiers": "private", "return": "boolean", "signature": "boolean hasSourceChanged(Path dir, Path source)", "full_signature": "private boolean hasSourceChanged(Path dir, Path source)", "class_method_signature": "CompilationManager.hasSourceChanged(Path dir, Path source)", "testcase": false, "constructor": false}, {"identifier": "newSourceHashFor", "parameters": "(SourcePath sourcePath)", "modifiers": "private", "return": "SourceHash", "signature": "SourceHash newSourceHashFor(SourcePath sourcePath)", "full_signature": "private SourceHash newSourceHashFor(SourcePath sourcePath)", "class_method_signature": "CompilationManager.newSourceHashFor(SourcePath sourcePath)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(File file)", "modifiers": "private", "return": "String", "signature": "String hash(File file)", "full_signature": "private String hash(File file)", "class_method_signature": "CompilationManager.hash(File file)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String str)", "modifiers": "private", "return": "SourceHash", "signature": "SourceHash parse(String str)", "full_signature": "private SourceHash parse(String str)", "class_method_signature": "CompilationManager.parse(String str)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "CompilationManager.close()", "testcase": false, "constructor": false}], "file": "restx-classloader/src/main/java/restx/classloader/CompilationManager.java"}, "focal_method": {"identifier": "rebuild", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void rebuild() {\n        try {\n            Exception e = compileExecutor.submit(new Callable<Exception>() {\n                @Override\n                public Exception call() throws Exception {\n                    try {\n                        compileQueue.clear();\n                        MoreFiles.delete(destination);\n                        destination.toFile().mkdirs();\n\n\n                        final Collection<Path> sources = new ArrayList<>();\n                        for (final Path sourceRoot : sourceRoots) {\n                            if (sourceRoot.toFile().exists()) {\n                                Files.walkFileTree(sourceRoot, new SimpleFileVisitor<Path>() {\n                                    @Override\n                                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n                                            throws IOException {\n                                        if (isSource(file)) {\n                                            sources.add(file);\n                                        } else if (file.toFile().isFile()) {\n                                            doCopyResource(SourcePath.valueOf(sourceRoot, sourceRoot.relativize(file)));\n                                        }\n                                        return FileVisitResult.CONTINUE;\n                                    }\n                                });\n                            }\n                        }\n\n                        compile(sources);\n                        return null;\n                    } catch (Exception e) {\n                        return e;\n                    }\n                }\n            }).get(compilationTimeout, TimeUnit.SECONDS);\n            if (e != null) {\n                throw new RuntimeException(e);\n            }\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        } catch (ExecutionException e) {\n            throw new RuntimeException(e);\n        } catch (TimeoutException e) {\n            throw new RuntimeException(e);\n        }\n    }", "signature": "void rebuild()", "full_signature": "public void rebuild()", "class_method_signature": "CompilationManager.rebuild()", "testcase": false, "constructor": false, "invocations": ["get", "submit", "clear", "delete", "mkdirs", "toFile", "exists", "toFile", "walkFileTree", "isSource", "add", "isFile", "toFile", "doCopyResource", "valueOf", "relativize", "compile"]}, "repository": {"repo_id": 9836833, "url": "https://github.com/restx/restx", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 433, "size": 7896, "license": "licensed"}}