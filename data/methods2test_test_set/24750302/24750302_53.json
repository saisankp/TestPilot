{"test_class": {"identifier": "LocalGitRepositoryPathResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LocalGitRepositoryPathResolver resolver;", "modifier": "private", "type": "LocalGitRepositoryPathResolver", "declarator": "resolver", "var_name": "resolver"}], "file": "alien4cloud-core/src/test/java/org/alien4cloud/git/LocalGitRepositoryPathResolverTest.java"}, "test_case": {"identifier": "findAllLocalDeploymentConfigGitPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findAllLocalDeploymentConfigGitPath() throws Exception {\n        assertThat(resolver.findAllEnvironmentSetupLocalPath(\"my_app\")).hasSize(2);\n    }", "signature": "void findAllLocalDeploymentConfigGitPath()", "full_signature": "@Test public void findAllLocalDeploymentConfigGitPath()", "class_method_signature": "LocalGitRepositoryPathResolverTest.findAllLocalDeploymentConfigGitPath()", "testcase": true, "constructor": false, "invocations": ["hasSize", "assertThat", "findAllEnvironmentSetupLocalPath"]}, "focal_class": {"identifier": "LocalGitRepositoryPathResolver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ENV_DEPLOYMENT_SETUP_DIRECTORY = \"env_setup\";", "modifier": "private static final", "type": "String", "declarator": "ENV_DEPLOYMENT_SETUP_DIRECTORY = \"env_setup\"", "var_name": "ENV_DEPLOYMENT_SETUP_DIRECTORY"}, {"original_string": "private static final String APP_VARIABLES_DIRECTORY = \"vars\";", "modifier": "private static final", "type": "String", "declarator": "APP_VARIABLES_DIRECTORY = \"vars\"", "var_name": "APP_VARIABLES_DIRECTORY"}, {"original_string": "private Path storageRootPath;", "modifier": "private", "type": "Path", "declarator": "storageRootPath", "var_name": "storageRootPath"}], "methods": [{"identifier": "setStorageRootPath", "parameters": "(String rootDir)", "modifiers": "@Required @Value(\"${directories.alien}\") public", "return": "void", "signature": "void setStorageRootPath(String rootDir)", "full_signature": "@Required @Value(\"${directories.alien}\") public void setStorageRootPath(String rootDir)", "class_method_signature": "LocalGitRepositoryPathResolver.setStorageRootPath(String rootDir)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(Class<T> clazz, String deploymentConfigId)", "modifiers": "@SneakyThrows public", "return": "Path", "signature": "Path resolve(Class<T> clazz, String deploymentConfigId)", "full_signature": "@SneakyThrows public Path resolve(Class<T> clazz, String deploymentConfigId)", "class_method_signature": "LocalGitRepositoryPathResolver.resolve(Class<T> clazz, String deploymentConfigId)", "testcase": false, "constructor": false}, {"identifier": "findApplicationVariableLocalPath", "parameters": "(String applicationId)", "modifiers": "public", "return": "Path", "signature": "Path findApplicationVariableLocalPath(String applicationId)", "full_signature": "public Path findApplicationVariableLocalPath(String applicationId)", "class_method_signature": "LocalGitRepositoryPathResolver.findApplicationVariableLocalPath(String applicationId)", "testcase": false, "constructor": false}, {"identifier": "findEnvironmentSetupLocalPath", "parameters": "(String applicationId, String environmentId)", "modifiers": "public", "return": "Path", "signature": "Path findEnvironmentSetupLocalPath(String applicationId, String environmentId)", "full_signature": "public Path findEnvironmentSetupLocalPath(String applicationId, String environmentId)", "class_method_signature": "LocalGitRepositoryPathResolver.findEnvironmentSetupLocalPath(String applicationId, String environmentId)", "testcase": false, "constructor": false}, {"identifier": "findAllEnvironmentSetupLocalPath", "parameters": "(String applicationId)", "modifiers": "@SneakyThrows public", "return": "List<Path>", "signature": "List<Path> findAllEnvironmentSetupLocalPath(String applicationId)", "full_signature": "@SneakyThrows public List<Path> findAllEnvironmentSetupLocalPath(String applicationId)", "class_method_signature": "LocalGitRepositoryPathResolver.findAllEnvironmentSetupLocalPath(String applicationId)", "testcase": false, "constructor": false}], "file": "alien4cloud-core/src/main/java/org/alien4cloud/git/LocalGitRepositoryPathResolver.java"}, "focal_method": {"identifier": "findAllEnvironmentSetupLocalPath", "parameters": "(String applicationId)", "modifiers": "@SneakyThrows public", "return": "List<Path>", "body": "@SneakyThrows\n    public List<Path> findAllEnvironmentSetupLocalPath(String applicationId) {\n        Path environmentSetupPath = storageRootPath.resolve(applicationId).resolve(ENV_DEPLOYMENT_SETUP_DIRECTORY);\n        return Files.walk(environmentSetupPath, 1).filter(path -> !environmentSetupPath.equals(path) && Files.isDirectory(path)).collect(Collectors.toList());\n    }", "signature": "List<Path> findAllEnvironmentSetupLocalPath(String applicationId)", "full_signature": "@SneakyThrows public List<Path> findAllEnvironmentSetupLocalPath(String applicationId)", "class_method_signature": "LocalGitRepositoryPathResolver.findAllEnvironmentSetupLocalPath(String applicationId)", "testcase": false, "constructor": false, "invocations": ["resolve", "resolve", "collect", "filter", "walk", "equals", "isDirectory", "toList"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}