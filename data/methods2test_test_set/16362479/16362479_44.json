{"test_class": {"identifier": "CommitLocalTransactionRequestTest", "superclass": "extends AbstractLocalTransactionRequestTest<CommitLocalTransactionRequest>", "interfaces": "", "fields": [{"original_string": "private static final FrontendIdentifier FRONTEND = FrontendIdentifier.create(\n            MemberName.forName(\"test\"), FrontendType.forName(\"one\"));", "modifier": "private static final", "type": "FrontendIdentifier", "declarator": "FRONTEND = FrontendIdentifier.create(\n            MemberName.forName(\"test\"), FrontendType.forName(\"one\"))", "var_name": "FRONTEND"}, {"original_string": "private static final ClientIdentifier CLIENT = ClientIdentifier.create(FRONTEND, 0);", "modifier": "private static final", "type": "ClientIdentifier", "declarator": "CLIENT = ClientIdentifier.create(FRONTEND, 0)", "var_name": "CLIENT"}, {"original_string": "private static final LocalHistoryIdentifier HISTORY = new LocalHistoryIdentifier(CLIENT, 0);", "modifier": "private static final", "type": "LocalHistoryIdentifier", "declarator": "HISTORY = new LocalHistoryIdentifier(CLIENT, 0)", "var_name": "HISTORY"}, {"original_string": "private static final TransactionIdentifier TRANSACTION = new TransactionIdentifier(HISTORY, 0);", "modifier": "private static final", "type": "TransactionIdentifier", "declarator": "TRANSACTION = new TransactionIdentifier(HISTORY, 0)", "var_name": "TRANSACTION"}, {"original_string": "private static final DataTreeModification MODIFICATION = Mockito.mock(DataTreeModification.class);", "modifier": "private static final", "type": "DataTreeModification", "declarator": "MODIFICATION = Mockito.mock(DataTreeModification.class)", "var_name": "MODIFICATION"}, {"original_string": "private static final boolean COORDINATED = true;", "modifier": "private static final", "type": "boolean", "declarator": "COORDINATED = true", "var_name": "COORDINATED"}, {"original_string": "private static final CommitLocalTransactionRequest OBJECT = new CommitLocalTransactionRequest(\n            TRANSACTION, 0, ACTOR_REF, MODIFICATION, null, COORDINATED);", "modifier": "private static final", "type": "CommitLocalTransactionRequest", "declarator": "OBJECT = new CommitLocalTransactionRequest(\n            TRANSACTION, 0, ACTOR_REF, MODIFICATION, null, COORDINATED)", "var_name": "OBJECT"}], "file": "opendaylight/md-sal/cds-access-api/src/test/java/org/opendaylight/controller/cluster/access/commands/CommitLocalTransactionRequestTest.java"}, "test_case": {"identifier": "isCoordinatedTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isCoordinatedTest() {\n        Assert.assertEquals(COORDINATED, OBJECT.isCoordinated());\n    }", "signature": "void isCoordinatedTest()", "full_signature": "@Test public void isCoordinatedTest()", "class_method_signature": "CommitLocalTransactionRequestTest.isCoordinatedTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "isCoordinated"]}, "focal_class": {"identifier": "CommitLocalTransactionRequest", "superclass": "extends AbstractLocalTransactionRequest<CommitLocalTransactionRequest>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "@SuppressFBWarnings(value = \"SE_BAD_FIELD\", justification = \"This field is not Serializable but this class \"\n            + \"implements writeReplace to delegate serialization to a Proxy class and thus instances of this class \"\n            + \"aren't serialized. FindBugs does not recognize this.\")\n    private final DataTreeModification mod;", "modifier": "@SuppressFBWarnings(value = \"SE_BAD_FIELD\", justification = \"This field is not Serializable but this class \"\n            + \"implements writeReplace to delegate serialization to a Proxy class and thus instances of this class \"\n            + \"aren't serialized. FindBugs does not recognize this.\")\n    private final", "type": "DataTreeModification", "declarator": "mod", "var_name": "mod"}, {"original_string": "private final Exception delayedFailure;", "modifier": "private final", "type": "Exception", "declarator": "delayedFailure", "var_name": "delayedFailure"}, {"original_string": "private final boolean coordinated;", "modifier": "private final", "type": "boolean", "declarator": "coordinated", "var_name": "coordinated"}], "methods": [{"identifier": "CommitLocalTransactionRequest", "parameters": "(final @NonNull TransactionIdentifier identifier, final long sequence,\n            final @NonNull ActorRef replyTo, final @NonNull DataTreeModification mod,\n            final @Nullable Exception delayedFailure, final boolean coordinated)", "modifiers": "public", "return": "", "signature": " CommitLocalTransactionRequest(final @NonNull TransactionIdentifier identifier, final long sequence,\n            final @NonNull ActorRef replyTo, final @NonNull DataTreeModification mod,\n            final @Nullable Exception delayedFailure, final boolean coordinated)", "full_signature": "public  CommitLocalTransactionRequest(final @NonNull TransactionIdentifier identifier, final long sequence,\n            final @NonNull ActorRef replyTo, final @NonNull DataTreeModification mod,\n            final @Nullable Exception delayedFailure, final boolean coordinated)", "class_method_signature": "CommitLocalTransactionRequest.CommitLocalTransactionRequest(final @NonNull TransactionIdentifier identifier, final long sequence,\n            final @NonNull ActorRef replyTo, final @NonNull DataTreeModification mod,\n            final @Nullable Exception delayedFailure, final boolean coordinated)", "testcase": false, "constructor": true}, {"identifier": "getDelayedFailure", "parameters": "()", "modifiers": "public", "return": "Optional<Exception>", "signature": "Optional<Exception> getDelayedFailure()", "full_signature": "public Optional<Exception> getDelayedFailure()", "class_method_signature": "CommitLocalTransactionRequest.getDelayedFailure()", "testcase": false, "constructor": false}, {"identifier": "getModification", "parameters": "()", "modifiers": "public", "return": "DataTreeModification", "signature": "DataTreeModification getModification()", "full_signature": "public DataTreeModification getModification()", "class_method_signature": "CommitLocalTransactionRequest.getModification()", "testcase": false, "constructor": false}, {"identifier": "isCoordinated", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCoordinated()", "full_signature": "public boolean isCoordinated()", "class_method_signature": "CommitLocalTransactionRequest.isCoordinated()", "testcase": false, "constructor": false}, {"identifier": "addToStringAttributes", "parameters": "(final ToStringHelper toStringHelper)", "modifiers": "@Override protected", "return": "ToStringHelper", "signature": "ToStringHelper addToStringAttributes(final ToStringHelper toStringHelper)", "full_signature": "@Override protected ToStringHelper addToStringAttributes(final ToStringHelper toStringHelper)", "class_method_signature": "CommitLocalTransactionRequest.addToStringAttributes(final ToStringHelper toStringHelper)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/cds-access-api/src/main/java/org/opendaylight/controller/cluster/access/commands/CommitLocalTransactionRequest.java"}, "focal_method": {"identifier": "isCoordinated", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isCoordinated() {\n        return coordinated;\n    }", "signature": "boolean isCoordinated()", "full_signature": "public boolean isCoordinated()", "class_method_signature": "CommitLocalTransactionRequest.isCoordinated()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}