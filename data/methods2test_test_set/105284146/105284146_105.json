{"test_class": {"identifier": "SecurityAnalysisResultComparisonWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "LimitViolation vlViolation;", "modifier": "", "type": "LimitViolation", "declarator": "vlViolation", "var_name": "vlViolation"}, {"original_string": "LimitViolation lineViolation;", "modifier": "", "type": "LimitViolation", "declarator": "lineViolation", "var_name": "lineViolation"}, {"original_string": "LimitViolation similarLineViolation;", "modifier": "", "type": "LimitViolation", "declarator": "similarLineViolation", "var_name": "similarLineViolation"}, {"original_string": "List<String> actions;", "modifier": "", "type": "List<String>", "declarator": "actions", "var_name": "actions"}, {"original_string": "Writer writer;", "modifier": "", "type": "Writer", "declarator": "writer", "var_name": "writer"}, {"original_string": "SecurityAnalysisResultComparisonWriter comparisonWriter;", "modifier": "", "type": "SecurityAnalysisResultComparisonWriter", "declarator": "comparisonWriter", "var_name": "comparisonWriter"}], "file": "security-analysis-api/src/test/java/com/powsybl/security/comparator/SecurityAnalysisResultComparisonWriterTest.java"}, "test_case": {"identifier": "write", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void write() {\n        String content = String.join(System.lineSeparator(),\n                                     \"Security Analysis Results Comparison\",\n                                     String.join(\";\", \"Contingency\", \"StatusResult1\", \"StatusResult2\", \"Equipment\", \"End\", \"ViolationType\",\n                                                 \"ViolationNameResult1\", \"ValueResult1\", \"LimitResult1\", \"ViolationNameResult2\", \"ValueResult2\",\n                                                 \"LimitResult2\", \"ActionsResult1\", \"ActionsResult2\", \"Comparison\"),\n                                     String.join(\";\", \"\", \"converge\", \"converge\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"equivalent\"),\n                                     String.join(\";\", \"\", \"\", \"\", \"VL1\", \"\", LimitViolationType.HIGH_VOLTAGE.name(),\n                                                 \"\", String.format(Locale.getDefault(), \"%g\", 250.0), String.format(Locale.getDefault(), \"%g\", 200.0),\n                                                 \"\", String.format(Locale.getDefault(), \"%g\", 250.0), String.format(Locale.getDefault(), \"%g\", 200.0),\n                                                 \"\", \"\", \"equivalent\"),\n                                     String.join(\";\", \"contingency\", \"converge\", \"converge\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"equivalent\"),\n                                     String.join(\";\", \"contingency\", \"\", \"\", \"VL1\", \"\", LimitViolationType.HIGH_VOLTAGE.name(),\n                                                 \"\", String.format(Locale.getDefault(), \"%g\", 250.0), String.format(Locale.getDefault(), \"%g\", 200.0),\n                                                 \"\", String.format(Locale.getDefault(), \"%g\", 250.0), String.format(Locale.getDefault(), \"%g\", 200.0),\n                                                 \"\", \"\", \"equivalent\"),\n                                     String.join(\";\", \"contingency\", \"\", \"\", \"NHV1_NHV2_1\", Branch.Side.ONE.name(), LimitViolationType.CURRENT.name(),\n                                                 \"PermanentLimit\", String.format(Locale.getDefault(), \"%g\", 1100.0), String.format(Locale.getDefault(), \"%g\", 1000.0),\n                                                 \"PermanentLimit\", String.format(Locale.getDefault(), \"%g\", 1100.09), String.format(Locale.getDefault(), \"%g\", 1000.0),\n                                                 \"\", \"\",  \"equivalent\"),\n                                     String.join(\";\", \"contingency\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", actions.toString(), actions.toString(), \"equivalent\"));\n\n        // precontingency violations results\n        comparisonWriter.write(true, true, true);\n        comparisonWriter.write(vlViolation, vlViolation, true);\n        comparisonWriter.write(Collections.emptyList(), Collections.emptyList(), true);\n\n        // postcontingency violations results\n        comparisonWriter.setContingency(\"contingency\");\n        comparisonWriter.write(true, true, true);\n        comparisonWriter.write(vlViolation, vlViolation, true);\n        comparisonWriter.write(lineViolation, similarLineViolation, true);\n        comparisonWriter.write(actions, actions, true);\n\n        assertEquals(content, writer.toString().trim());\n    }", "signature": "void write()", "full_signature": "@Test public void write()", "class_method_signature": "SecurityAnalysisResultComparisonWriterTest.write()", "testcase": true, "constructor": false, "invocations": ["join", "lineSeparator", "join", "join", "join", "name", "format", "getDefault", "format", "getDefault", "format", "getDefault", "format", "getDefault", "join", "join", "name", "format", "getDefault", "format", "getDefault", "format", "getDefault", "format", "getDefault", "join", "name", "name", "format", "getDefault", "format", "getDefault", "format", "getDefault", "format", "getDefault", "join", "toString", "toString", "write", "write", "write", "emptyList", "emptyList", "setContingency", "write", "write", "write", "write", "assertEquals", "trim", "toString"]}, "focal_class": {"identifier": "SecurityAnalysisResultComparisonWriter", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private static final String RESULT = \"Result\";", "modifier": "private static final", "type": "String", "declarator": "RESULT = \"Result\"", "var_name": "RESULT"}, {"original_string": "private static final String EQUIVALENT = \"equivalent\";", "modifier": "private static final", "type": "String", "declarator": "EQUIVALENT = \"equivalent\"", "var_name": "EQUIVALENT"}, {"original_string": "private static final String DIFFERENT = \"different\";", "modifier": "private static final", "type": "String", "declarator": "DIFFERENT = \"different\"", "var_name": "DIFFERENT"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SecurityAnalysisResultComparisonWriter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SecurityAnalysisResultComparisonWriter.class)", "var_name": "LOGGER"}, {"original_string": "private TableFormatter formatter;", "modifier": "private", "type": "TableFormatter", "declarator": "formatter", "var_name": "formatter"}, {"original_string": "private String contingency;", "modifier": "private", "type": "String", "declarator": "contingency", "var_name": "contingency"}], "methods": [{"identifier": "SecurityAnalysisResultComparisonWriter", "parameters": "(Writer writer)", "modifiers": "public", "return": "", "signature": " SecurityAnalysisResultComparisonWriter(Writer writer)", "full_signature": "public  SecurityAnalysisResultComparisonWriter(Writer writer)", "class_method_signature": "SecurityAnalysisResultComparisonWriter.SecurityAnalysisResultComparisonWriter(Writer writer)", "testcase": false, "constructor": true}, {"identifier": "getColumns", "parameters": "()", "modifiers": "private", "return": "Column[]", "signature": "Column[] getColumns()", "full_signature": "private Column[] getColumns()", "class_method_signature": "SecurityAnalysisResultComparisonWriter.getColumns()", "testcase": false, "constructor": false}, {"identifier": "setContingency", "parameters": "(String contingency)", "modifiers": "public", "return": "void", "signature": "void setContingency(String contingency)", "full_signature": "public void setContingency(String contingency)", "class_method_signature": "SecurityAnalysisResultComparisonWriter.setContingency(String contingency)", "testcase": false, "constructor": false}, {"identifier": "checkInput", "parameters": "(T value1, T value2)", "modifiers": "private", "return": "void", "signature": "void checkInput(T value1, T value2)", "full_signature": "private void checkInput(T value1, T value2)", "class_method_signature": "SecurityAnalysisResultComparisonWriter.checkInput(T value1, T value2)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Boolean computationOk1, Boolean computationOk2, boolean equivalent)", "modifiers": "public", "return": "SecurityAnalysisResultComparisonWriter", "signature": "SecurityAnalysisResultComparisonWriter write(Boolean computationOk1, Boolean computationOk2, boolean equivalent)", "full_signature": "public SecurityAnalysisResultComparisonWriter write(Boolean computationOk1, Boolean computationOk2, boolean equivalent)", "class_method_signature": "SecurityAnalysisResultComparisonWriter.write(Boolean computationOk1, Boolean computationOk2, boolean equivalent)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(boolean computationOk)", "modifiers": "private", "return": "String", "signature": "String getStatus(boolean computationOk)", "full_signature": "private String getStatus(boolean computationOk)", "class_method_signature": "SecurityAnalysisResultComparisonWriter.getStatus(boolean computationOk)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(LimitViolation violation1, LimitViolation violation2, boolean equivalent)", "modifiers": "public", "return": "SecurityAnalysisResultComparisonWriter", "signature": "SecurityAnalysisResultComparisonWriter write(LimitViolation violation1, LimitViolation violation2, boolean equivalent)", "full_signature": "public SecurityAnalysisResultComparisonWriter write(LimitViolation violation1, LimitViolation violation2, boolean equivalent)", "class_method_signature": "SecurityAnalysisResultComparisonWriter.write(LimitViolation violation1, LimitViolation violation2, boolean equivalent)", "testcase": false, "constructor": false}, {"identifier": "getEquipment", "parameters": "(LimitViolation violation1, LimitViolation violation2)", "modifiers": "private", "return": "String", "signature": "String getEquipment(LimitViolation violation1, LimitViolation violation2)", "full_signature": "private String getEquipment(LimitViolation violation1, LimitViolation violation2)", "class_method_signature": "SecurityAnalysisResultComparisonWriter.getEquipment(LimitViolation violation1, LimitViolation violation2)", "testcase": false, "constructor": false}, {"identifier": "getEnd", "parameters": "(LimitViolation violation1, LimitViolation violation2)", "modifiers": "private", "return": "Branch.Side", "signature": "Branch.Side getEnd(LimitViolation violation1, LimitViolation violation2)", "full_signature": "private Branch.Side getEnd(LimitViolation violation1, LimitViolation violation2)", "class_method_signature": "SecurityAnalysisResultComparisonWriter.getEnd(LimitViolation violation1, LimitViolation violation2)", "testcase": false, "constructor": false}, {"identifier": "getViolationType", "parameters": "(LimitViolation violation1, LimitViolation violation2)", "modifiers": "private", "return": "LimitViolationType", "signature": "LimitViolationType getViolationType(LimitViolation violation1, LimitViolation violation2)", "full_signature": "private LimitViolationType getViolationType(LimitViolation violation1, LimitViolation violation2)", "class_method_signature": "SecurityAnalysisResultComparisonWriter.getViolationType(LimitViolation violation1, LimitViolation violation2)", "testcase": false, "constructor": false}, {"identifier": "writeViolation", "parameters": "(LimitViolation violation)", "modifiers": "private", "return": "void", "signature": "void writeViolation(LimitViolation violation)", "full_signature": "private void writeViolation(LimitViolation violation)", "class_method_signature": "SecurityAnalysisResultComparisonWriter.writeViolation(LimitViolation violation)", "testcase": false, "constructor": false}, {"identifier": "getViolationLimit", "parameters": "(LimitViolation violation)", "modifiers": "private", "return": "double", "signature": "double getViolationLimit(LimitViolation violation)", "full_signature": "private double getViolationLimit(LimitViolation violation)", "class_method_signature": "SecurityAnalysisResultComparisonWriter.getViolationLimit(LimitViolation violation)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(List<String> actions1, List<String> actions2, boolean equivalent)", "modifiers": "public", "return": "SecurityAnalysisResultComparisonWriter", "signature": "SecurityAnalysisResultComparisonWriter write(List<String> actions1, List<String> actions2, boolean equivalent)", "full_signature": "public SecurityAnalysisResultComparisonWriter write(List<String> actions1, List<String> actions2, boolean equivalent)", "class_method_signature": "SecurityAnalysisResultComparisonWriter.write(List<String> actions1, List<String> actions2, boolean equivalent)", "testcase": false, "constructor": false}, {"identifier": "noActions", "parameters": "(List<String> actions1, List<String> actions2)", "modifiers": "private", "return": "boolean", "signature": "boolean noActions(List<String> actions1, List<String> actions2)", "full_signature": "private boolean noActions(List<String> actions1, List<String> actions2)", "class_method_signature": "SecurityAnalysisResultComparisonWriter.noActions(List<String> actions1, List<String> actions2)", "testcase": false, "constructor": false}, {"identifier": "getComparison", "parameters": "(boolean equivalent)", "modifiers": "private", "return": "String", "signature": "String getComparison(boolean equivalent)", "full_signature": "private String getComparison(boolean equivalent)", "class_method_signature": "SecurityAnalysisResultComparisonWriter.getComparison(boolean equivalent)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SecurityAnalysisResultComparisonWriter.close()", "testcase": false, "constructor": false}], "file": "security-analysis-api/src/main/java/com/powsybl/security/comparator/SecurityAnalysisResultComparisonWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(Boolean computationOk1, Boolean computationOk2, boolean equivalent)", "modifiers": "public", "return": "SecurityAnalysisResultComparisonWriter", "body": "public SecurityAnalysisResultComparisonWriter write(Boolean computationOk1, Boolean computationOk2, boolean equivalent) {\n        checkInput(computationOk1, computationOk2);\n        try {\n            formatter = contingency == null ? formatter.writeEmptyCell() : formatter.writeCell(contingency);\n            formatter = computationOk1 == null ? formatter.writeEmptyCells(1) : formatter.writeCell(getStatus(computationOk1));\n            formatter = computationOk2 == null ? formatter.writeEmptyCells(1) : formatter.writeCell(getStatus(computationOk2));\n            formatter.writeEmptyCells(11);\n            formatter.writeCell(getComparison(equivalent));\n        } catch (IOException e) {\n            LOGGER.error(\"Error writing security analysis results computation status comparison: {}\", e.getMessage());\n        }\n        return this;\n    }", "signature": "SecurityAnalysisResultComparisonWriter write(Boolean computationOk1, Boolean computationOk2, boolean equivalent)", "full_signature": "public SecurityAnalysisResultComparisonWriter write(Boolean computationOk1, Boolean computationOk2, boolean equivalent)", "class_method_signature": "SecurityAnalysisResultComparisonWriter.write(Boolean computationOk1, Boolean computationOk2, boolean equivalent)", "testcase": false, "constructor": false, "invocations": ["checkInput", "writeEmptyCell", "writeCell", "writeEmptyCells", "writeCell", "getStatus", "writeEmptyCells", "writeCell", "getStatus", "writeEmptyCells", "writeCell", "getComparison", "error", "getMessage"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}