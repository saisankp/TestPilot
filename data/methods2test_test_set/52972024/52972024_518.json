{"test_class": {"identifier": "QuerySensorSchedulerActionTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IQueryExecutor queryExecutorMock;", "modifier": "private", "type": "IQueryExecutor", "declarator": "queryExecutorMock", "var_name": "queryExecutorMock"}, {"original_string": "private ISchedulerEntry schedulerEntryMock;", "modifier": "private", "type": "ISchedulerEntry", "declarator": "schedulerEntryMock", "var_name": "schedulerEntryMock"}, {"original_string": "private IMessageBusHandler messageBusHandlerMock;", "modifier": "private", "type": "IMessageBusHandler", "declarator": "messageBusHandlerMock", "var_name": "messageBusHandlerMock"}], "file": "CoreFeatures/Statistics/ScheduledQuerySensor/src/test/java/info/smart_tools/smartactors/statistics/sensors/scheduled_query_sensor/QuerySensorSchedulerActionTest.java"}, "test_case": {"identifier": "Should_initializeEntryState", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_initializeEntryState()\n            throws Exception {\n        IObject args = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"),\n                (\"{\" +\n                    \"'queryExecutor':'that query executor',\" +\n                    \"'statisticsChain':'the_statistics_chain'\" +\n                    \"}\").replace('\\'','\"'));\n        new QuerySensorSchedulerAction().init(schedulerEntryMock, args);\n\n        verify(queryExecutorMock).init(same(schedulerEntryMock), same(args));\n        assertEquals(\"that query executor\", schedulerEntryMock.getState()\n                .getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"queryExecutor\")));\n        assertEquals(\"the_statistics_chain\", schedulerEntryMock.getState()\n                .getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"statisticsChain\")));\n    }", "signature": "void Should_initializeEntryState()", "full_signature": "@Test public void Should_initializeEntryState()", "class_method_signature": "QuerySensorSchedulerActionTest.Should_initializeEntryState()", "testcase": true, "constructor": false, "invocations": ["resolve", "getOrAdd", "replace", "init", "init", "verify", "same", "same", "assertEquals", "getValue", "getState", "resolve", "getOrAdd", "assertEquals", "getValue", "getState", "resolve", "getOrAdd"]}, "focal_class": {"identifier": "QuerySensorSchedulerAction", "superclass": "", "interfaces": "implements ISchedulerAction", "fields": [{"original_string": "private final IFieldName queryExecutorFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "queryExecutorFieldName", "var_name": "queryExecutorFieldName"}, {"original_string": "private final IFieldName statisticsChainFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "statisticsChainFieldName", "var_name": "statisticsChainFieldName"}, {"original_string": "private final IFieldName dataFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "dataFieldName", "var_name": "dataFieldName"}, {"original_string": "private final IFieldName periodStartFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "periodStartFieldName", "var_name": "periodStartFieldName"}, {"original_string": "private final IFieldName periodEndFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "periodEndFieldName", "var_name": "periodEndFieldName"}], "methods": [{"identifier": "QuerySensorSchedulerAction", "parameters": "()", "modifiers": "public", "return": "", "signature": " QuerySensorSchedulerAction()", "full_signature": "public  QuerySensorSchedulerAction()", "class_method_signature": "QuerySensorSchedulerAction.QuerySensorSchedulerAction()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(final ISchedulerEntry entry, final IObject args)", "modifiers": "@Override public", "return": "void", "signature": "void init(final ISchedulerEntry entry, final IObject args)", "full_signature": "@Override public void init(final ISchedulerEntry entry, final IObject args)", "class_method_signature": "QuerySensorSchedulerAction.init(final ISchedulerEntry entry, final IObject args)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final ISchedulerEntry entry)", "modifiers": "@Override public", "return": "void", "signature": "void execute(final ISchedulerEntry entry)", "full_signature": "@Override public void execute(final ISchedulerEntry entry)", "class_method_signature": "QuerySensorSchedulerAction.execute(final ISchedulerEntry entry)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Statistics/ScheduledQuerySensor/src/main/java/info/smart_tools/smartactors/statistics/sensors/scheduled_query_sensor/QuerySensorSchedulerAction.java"}, "focal_method": {"identifier": "init", "parameters": "(final ISchedulerEntry entry, final IObject args)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void init(final ISchedulerEntry entry, final IObject args) throws SchedulerActionInitializationException {\n        try {\n            Object queryExecutorDependency = args.getValue(queryExecutorFieldName);\n            IQueryExecutor queryExecutor = IOC.resolve(IOC.resolve(IOC.getKeyForKeyStorage(), queryExecutorDependency));\n\n            queryExecutor.init(entry, args);\n\n            entry.getState().setValue(queryExecutorFieldName, queryExecutorDependency);\n            entry.getState().setValue(statisticsChainFieldName, args.getValue(statisticsChainFieldName));\n        } catch (ResolutionException | ReadValueException | ChangeValueException | InvalidArgumentException\n                | QueryExecutorInitializationException e) {\n            throw new SchedulerActionInitializationException(\"Error occurred initializing query sensor scheduler action.\", e);\n        }\n    }", "signature": "void init(final ISchedulerEntry entry, final IObject args)", "full_signature": "@Override public void init(final ISchedulerEntry entry, final IObject args)", "class_method_signature": "QuerySensorSchedulerAction.init(final ISchedulerEntry entry, final IObject args)", "testcase": false, "constructor": false, "invocations": ["getValue", "resolve", "resolve", "getKeyForKeyStorage", "init", "setValue", "getState", "setValue", "getState", "getValue"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}