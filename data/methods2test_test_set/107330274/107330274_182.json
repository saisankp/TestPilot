{"test_class": {"identifier": "StreamStatusMonitorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String MY_SOURCE = \"TEST\";", "modifier": "private static final", "type": "String", "declarator": "MY_SOURCE = \"TEST\"", "var_name": "MY_SOURCE"}, {"original_string": "private final TestScheduler testScheduler = Schedulers.test();", "modifier": "private final", "type": "TestScheduler", "declarator": "testScheduler = Schedulers.test()", "var_name": "testScheduler"}, {"original_string": "private final PublishSubject<AgentStatus> statusUpdateSubject = PublishSubject.create();", "modifier": "private final", "type": "PublishSubject<AgentStatus>", "declarator": "statusUpdateSubject = PublishSubject.create()", "var_name": "statusUpdateSubject"}, {"original_string": "private final AgentManagementService agentManagementService = mock(AgentManagementService.class);", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService = mock(AgentManagementService.class)", "var_name": "agentManagementService"}, {"original_string": "private final StreamStatusMonitor monitor = new StreamStatusMonitor(MY_SOURCE, false, agentManagementService, statusUpdateSubject, new DefaultRegistry(), testScheduler);", "modifier": "private final", "type": "StreamStatusMonitor", "declarator": "monitor = new StreamStatusMonitor(MY_SOURCE, false, agentManagementService, statusUpdateSubject, new DefaultRegistry(), testScheduler)", "var_name": "monitor"}, {"original_string": "private final ExtTestSubscriber<AgentStatus> testSubscriber = new ExtTestSubscriber<>();", "modifier": "private final", "type": "ExtTestSubscriber<AgentStatus>", "declarator": "testSubscriber = new ExtTestSubscriber<>()", "var_name": "testSubscriber"}, {"original_string": "private final AgentInstance instance = AgentGenerator.agentInstances().getValue();", "modifier": "private final", "type": "AgentInstance", "declarator": "instance = AgentGenerator.agentInstances().getValue()", "var_name": "instance"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/agent/service/monitor/StreamStatusMonitorTest.java"}, "test_case": {"identifier": "testRemovedInstanceCleanup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemovedInstanceCleanup() {\n        statusUpdateSubject.onNext(AgentStatus.healthy(MY_SOURCE, instance, \"OK\", testScheduler.now()));\n        statusUpdateSubject.onNext(AgentStatus.terminated(MY_SOURCE, instance, \"Terminated\", testScheduler.now()));\n\n        AgentStatus status = monitor.getStatus(instance.getId());\n        assertThat(status.getStatusCode()).isEqualTo(AgentStatusCode.Healthy);\n        assertThat(status.getDescription()).contains(\"No data recorded yet\");\n    }", "signature": "void testRemovedInstanceCleanup()", "full_signature": "@Test public void testRemovedInstanceCleanup()", "class_method_signature": "StreamStatusMonitorTest.testRemovedInstanceCleanup()", "testcase": true, "constructor": false, "invocations": ["onNext", "healthy", "now", "onNext", "terminated", "now", "getStatus", "getId", "isEqualTo", "assertThat", "getStatusCode", "contains", "assertThat", "getDescription"]}, "focal_class": {"identifier": "StreamStatusMonitor", "superclass": "", "interfaces": "implements AgentStatusMonitor", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(StreamStatusMonitor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(StreamStatusMonitor.class)", "var_name": "logger"}, {"original_string": "private static final long RETRY_DELAYS_MS = 1_000;", "modifier": "private static final", "type": "long", "declarator": "RETRY_DELAYS_MS = 1_000", "var_name": "RETRY_DELAYS_MS"}, {"original_string": "private final String source;", "modifier": "private final", "type": "String", "declarator": "source", "var_name": "source"}, {"original_string": "private final boolean failOnMissingData;", "modifier": "private final", "type": "boolean", "declarator": "failOnMissingData", "var_name": "failOnMissingData"}, {"original_string": "private final Scheduler scheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private final AgentStatusMonitorMetrics metrics;", "modifier": "private final", "type": "AgentStatusMonitorMetrics", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private final Subscription statusUpdateSubscription;", "modifier": "private final", "type": "Subscription", "declarator": "statusUpdateSubscription", "var_name": "statusUpdateSubscription"}, {"original_string": "private final PublishSubject<AgentStatus> statusUpdateSubject = PublishSubject.create();", "modifier": "private final", "type": "PublishSubject<AgentStatus>", "declarator": "statusUpdateSubject = PublishSubject.create()", "var_name": "statusUpdateSubject"}, {"original_string": "private final AgentManagementService agentManagementService;", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService", "var_name": "agentManagementService"}, {"original_string": "private volatile ConcurrentMap<String, AgentStatus> instanceStatuses = new ConcurrentHashMap<>();", "modifier": "private volatile", "type": "ConcurrentMap<String, AgentStatus>", "declarator": "instanceStatuses = new ConcurrentHashMap<>()", "var_name": "instanceStatuses"}], "methods": [{"identifier": "StreamStatusMonitor", "parameters": "(String source,\n                               boolean failOnMissingData,\n                               AgentManagementService agentManagementService,\n                               Observable<AgentStatus> agentStatusObservable,\n                               Registry registry,\n                               Scheduler scheduler)", "modifiers": "public", "return": "", "signature": " StreamStatusMonitor(String source,\n                               boolean failOnMissingData,\n                               AgentManagementService agentManagementService,\n                               Observable<AgentStatus> agentStatusObservable,\n                               Registry registry,\n                               Scheduler scheduler)", "full_signature": "public  StreamStatusMonitor(String source,\n                               boolean failOnMissingData,\n                               AgentManagementService agentManagementService,\n                               Observable<AgentStatus> agentStatusObservable,\n                               Registry registry,\n                               Scheduler scheduler)", "class_method_signature": "StreamStatusMonitor.StreamStatusMonitor(String source,\n                               boolean failOnMissingData,\n                               AgentManagementService agentManagementService,\n                               Observable<AgentStatus> agentStatusObservable,\n                               Registry registry,\n                               Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "StreamStatusMonitor.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(String agentInstanceId)", "modifiers": "@Override public", "return": "AgentStatus", "signature": "AgentStatus getStatus(String agentInstanceId)", "full_signature": "@Override public AgentStatus getStatus(String agentInstanceId)", "class_method_signature": "StreamStatusMonitor.getStatus(String agentInstanceId)", "testcase": false, "constructor": false}, {"identifier": "isHealthy", "parameters": "(String agentInstanceId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isHealthy(String agentInstanceId)", "full_signature": "@Override public boolean isHealthy(String agentInstanceId)", "class_method_signature": "StreamStatusMonitor.isHealthy(String agentInstanceId)", "testcase": false, "constructor": false}, {"identifier": "monitor", "parameters": "()", "modifiers": "@Override public", "return": "Observable<AgentStatus>", "signature": "Observable<AgentStatus> monitor()", "full_signature": "@Override public Observable<AgentStatus> monitor()", "class_method_signature": "StreamStatusMonitor.monitor()", "testcase": false, "constructor": false}, {"identifier": "handleStatusUpdate", "parameters": "(AgentStatus statusUpdate)", "modifiers": "private", "return": "void", "signature": "void handleStatusUpdate(AgentStatus statusUpdate)", "full_signature": "private void handleStatusUpdate(AgentStatus statusUpdate)", "class_method_signature": "StreamStatusMonitor.handleStatusUpdate(AgentStatus statusUpdate)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/agent/service/monitor/StreamStatusMonitor.java"}, "focal_method": {"identifier": "getStatus", "parameters": "(String agentInstanceId)", "modifiers": "@Override public", "return": "AgentStatus", "body": "@Override\n    public AgentStatus getStatus(String agentInstanceId) {\n        AgentStatus agentStatus = instanceStatuses.get(agentInstanceId);\n        if (agentStatus == null) {\n            if (failOnMissingData) {\n                throw AgentManagementException.agentNotFound(agentInstanceId);\n            }\n            AgentInstance agentInstance = agentManagementService.getAgentInstance(agentInstanceId);\n            return AgentStatus.healthy(source, agentInstance, \"No data recorded yet; assuming healthy\", scheduler.now());\n        }\n        return agentStatus;\n    }", "signature": "AgentStatus getStatus(String agentInstanceId)", "full_signature": "@Override public AgentStatus getStatus(String agentInstanceId)", "class_method_signature": "StreamStatusMonitor.getStatus(String agentInstanceId)", "testcase": false, "constructor": false, "invocations": ["get", "agentNotFound", "getAgentInstance", "healthy", "now"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}