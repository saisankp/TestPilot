{"test_class": {"identifier": "VersionMessageTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/google/bitcoin/core/VersionMessageTest.java"}, "test_case": {"identifier": "testDecode", "parameters": "()", "modifiers": "@Test // Test that we can decode version messages which miss data which some old nodes may not include public", "return": "void", "body": "@Test\n    // Test that we can decode version messages which miss data which some old nodes may not include\n    public void testDecode() throws Exception {\n        NetworkParameters params = UnitTestParams.get();\n        \n        VersionMessage ver = new VersionMessage(params, Hex.decode(\"71110100000000000000000048e5e95000000000000000000000000000000000000000000000ffff7f000001479d000000000000000000000000000000000000ffff7f000001479d0000000000000000172f426974436f696e4a3a302e372d534e415053484f542f0004000000\"));\n        assertTrue(!ver.relayTxesBeforeFilter);\n        assertTrue(ver.bestHeight == 1024);\n        assertTrue(ver.subVer.equals(\"/\"+CoinDefinition.coinName+\"J:0.7-SNAPSHOT/\"));\n        \n        ver = new VersionMessage(params, Hex.decode(\"71110100000000000000000048e5e95000000000000000000000000000000000000000000000ffff7f000001479d000000000000000000000000000000000000ffff7f000001479d0000000000000000172f426974436f696e4a3a302e372d534e415053484f542f00040000\"));\n        assertTrue(ver.relayTxesBeforeFilter);\n        assertTrue(ver.bestHeight == 1024);\n        assertTrue(ver.subVer.equals(\"/\"+CoinDefinition.coinName+\"J:0.7-SNAPSHOT/\"));\n        \n        ver = new VersionMessage(params, Hex.decode(\"71110100000000000000000048e5e95000000000000000000000000000000000000000000000ffff7f000001479d000000000000000000000000000000000000ffff7f000001479d0000000000000000172f426974436f696e4a3a302e372d534e415053484f542f\"));\n        assertTrue(ver.relayTxesBeforeFilter);\n        assertTrue(ver.bestHeight == 0);\n        assertTrue(ver.subVer.equals(\"/\"+CoinDefinition.coinName+\"J:0.7-SNAPSHOT/\"));\n        \n        ver = new VersionMessage(params, Hex.decode(\"71110100000000000000000048e5e95000000000000000000000000000000000000000000000ffff7f000001479d000000000000000000000000000000000000ffff7f000001479d0000000000000000\"));\n        assertTrue(ver.relayTxesBeforeFilter);\n        assertTrue(ver.bestHeight == 0);\n        assertTrue(ver.subVer.equals(\"\"));\n    }", "signature": "void testDecode()", "full_signature": "@Test // Test that we can decode version messages which miss data which some old nodes may not include public void testDecode()", "class_method_signature": "VersionMessageTest.testDecode()", "testcase": true, "constructor": false, "invocations": ["get", "decode", "assertTrue", "assertTrue", "assertTrue", "equals", "decode", "assertTrue", "assertTrue", "assertTrue", "equals", "decode", "assertTrue", "assertTrue", "assertTrue", "equals", "decode", "assertTrue", "assertTrue", "assertTrue", "equals"]}, "focal_class": {"identifier": "VersionMessage", "superclass": "extends Message", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 7313594258967483180L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 7313594258967483180L", "var_name": "serialVersionUID"}, {"original_string": "public static final int NODE_NETWORK = 1;", "modifier": "public static final", "type": "int", "declarator": "NODE_NETWORK = 1", "var_name": "NODE_NETWORK"}, {"original_string": "public int clientVersion;", "modifier": "public", "type": "int", "declarator": "clientVersion", "var_name": "clientVersion"}, {"original_string": "public long localServices;", "modifier": "public", "type": "long", "declarator": "localServices", "var_name": "localServices"}, {"original_string": "public long time;", "modifier": "public", "type": "long", "declarator": "time", "var_name": "time"}, {"original_string": "public PeerAddress myAddr;", "modifier": "public", "type": "PeerAddress", "declarator": "myAddr", "var_name": "myAddr"}, {"original_string": "public PeerAddress theirAddr;", "modifier": "public", "type": "PeerAddress", "declarator": "theirAddr", "var_name": "theirAddr"}, {"original_string": "public String subVer;", "modifier": "public", "type": "String", "declarator": "subVer", "var_name": "subVer"}, {"original_string": "public long bestHeight;", "modifier": "public", "type": "long", "declarator": "bestHeight", "var_name": "bestHeight"}, {"original_string": "public boolean relayTxesBeforeFilter;", "modifier": "public", "type": "boolean", "declarator": "relayTxesBeforeFilter", "var_name": "relayTxesBeforeFilter"}, {"original_string": "public static final String BITCOINJ_VERSION = \"0.12-SNAPSHOT\";", "modifier": "public static final", "type": "String", "declarator": "BITCOINJ_VERSION = \"0.12-SNAPSHOT\"", "var_name": "BITCOINJ_VERSION"}, {"original_string": "public static final String LIBRARY_SUBVER = \"/\"+CoinDefinition.coinName+\"J:\" + BITCOINJ_VERSION + \"/\";", "modifier": "public static final", "type": "String", "declarator": "LIBRARY_SUBVER = \"/\"+CoinDefinition.coinName+\"J:\" + BITCOINJ_VERSION + \"/\"", "var_name": "LIBRARY_SUBVER"}], "methods": [{"identifier": "VersionMessage", "parameters": "(NetworkParameters params, byte[] msg)", "modifiers": "public", "return": "", "signature": " VersionMessage(NetworkParameters params, byte[] msg)", "full_signature": "public  VersionMessage(NetworkParameters params, byte[] msg)", "class_method_signature": "VersionMessage.VersionMessage(NetworkParameters params, byte[] msg)", "testcase": false, "constructor": true}, {"identifier": "VersionMessage", "parameters": "(NetworkParameters params, int newBestHeight)", "modifiers": "public", "return": "", "signature": " VersionMessage(NetworkParameters params, int newBestHeight)", "full_signature": "public  VersionMessage(NetworkParameters params, int newBestHeight)", "class_method_signature": "VersionMessage.VersionMessage(NetworkParameters params, int newBestHeight)", "testcase": false, "constructor": true}, {"identifier": "VersionMessage", "parameters": "(NetworkParameters params, int newBestHeight, boolean relayTxesBeforeFilter)", "modifiers": "public", "return": "", "signature": " VersionMessage(NetworkParameters params, int newBestHeight, boolean relayTxesBeforeFilter)", "full_signature": "public  VersionMessage(NetworkParameters params, int newBestHeight, boolean relayTxesBeforeFilter)", "class_method_signature": "VersionMessage.VersionMessage(NetworkParameters params, int newBestHeight, boolean relayTxesBeforeFilter)", "testcase": false, "constructor": true}, {"identifier": "parseLite", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void parseLite()", "full_signature": "@Override protected void parseLite()", "class_method_signature": "VersionMessage.parseLite()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void parse()", "full_signature": "@Override public void parse()", "class_method_signature": "VersionMessage.parse()", "testcase": false, "constructor": false}, {"identifier": "bitcoinSerializeToStream", "parameters": "(OutputStream buf)", "modifiers": "@Override public", "return": "void", "signature": "void bitcoinSerializeToStream(OutputStream buf)", "full_signature": "@Override public void bitcoinSerializeToStream(OutputStream buf)", "class_method_signature": "VersionMessage.bitcoinSerializeToStream(OutputStream buf)", "testcase": false, "constructor": false}, {"identifier": "hasBlockChain", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasBlockChain()", "full_signature": "public boolean hasBlockChain()", "class_method_signature": "VersionMessage.hasBlockChain()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "VersionMessage.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "getChecksum", "parameters": "()", "modifiers": "@Override", "return": "byte[]", "signature": "byte[] getChecksum()", "full_signature": "@Override byte[] getChecksum()", "class_method_signature": "VersionMessage.getChecksum()", "testcase": false, "constructor": false}, {"identifier": "setChecksum", "parameters": "(byte[] checksum)", "modifiers": "@Override", "return": "void", "signature": "void setChecksum(byte[] checksum)", "full_signature": "@Override void setChecksum(byte[] checksum)", "class_method_signature": "VersionMessage.setChecksum(byte[] checksum)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "VersionMessage.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "VersionMessage.toString()", "testcase": false, "constructor": false}, {"identifier": "duplicate", "parameters": "()", "modifiers": "public", "return": "VersionMessage", "signature": "VersionMessage duplicate()", "full_signature": "public VersionMessage duplicate()", "class_method_signature": "VersionMessage.duplicate()", "testcase": false, "constructor": false}, {"identifier": "appendToSubVer", "parameters": "(String name, String version, @Nullable String comments)", "modifiers": "public", "return": "void", "signature": "void appendToSubVer(String name, String version, @Nullable String comments)", "full_signature": "public void appendToSubVer(String name, String version, @Nullable String comments)", "class_method_signature": "VersionMessage.appendToSubVer(String name, String version, @Nullable String comments)", "testcase": false, "constructor": false}, {"identifier": "checkSubVerComponent", "parameters": "(String component)", "modifiers": "private static", "return": "void", "signature": "void checkSubVerComponent(String component)", "full_signature": "private static void checkSubVerComponent(String component)", "class_method_signature": "VersionMessage.checkSubVerComponent(String component)", "testcase": false, "constructor": false}, {"identifier": "isPingPongSupported", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPingPongSupported()", "full_signature": "public boolean isPingPongSupported()", "class_method_signature": "VersionMessage.isPingPongSupported()", "testcase": false, "constructor": false}, {"identifier": "isBloomFilteringSupported", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBloomFilteringSupported()", "full_signature": "public boolean isBloomFilteringSupported()", "class_method_signature": "VersionMessage.isBloomFilteringSupported()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/google/bitcoin/core/VersionMessage.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object o) {\n        if (!(o instanceof VersionMessage)) return false;\n        VersionMessage other = (VersionMessage) o;\n        return other.bestHeight == bestHeight &&\n                other.clientVersion == clientVersion &&\n                other.localServices == localServices &&\n                other.time == time &&\n                other.subVer.equals(subVer) &&\n                other.myAddr.equals(myAddr) &&\n                other.theirAddr.equals(theirAddr) &&\n                other.relayTxesBeforeFilter == relayTxesBeforeFilter;\n    }", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "VersionMessage.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals"]}, "repository": {"repo_id": 24363680, "url": "https://github.com/cannabiscoindev/cannabiscoinj", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 10126, "license": "licensed"}}