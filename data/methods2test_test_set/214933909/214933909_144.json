{"test_class": {"identifier": "ServerGroupServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ServerGroupService serverGroupService;", "modifier": "@Mock\n    private", "type": "ServerGroupService", "declarator": "serverGroupService", "var_name": "serverGroupService"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/service/ServerGroupServiceTest.java"}, "test_case": {"identifier": "findServerGroupPageListTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findServerGroupPageListTest() throws SQLException {\n        Paging<ServerGroup> paging = new Paging<>();\n        paging.setData(new ServerGroup());\n        Assert.assertTrue(serverGroupService.findServerGroupPageList(paging).getList().size() > 0);\n    }", "signature": "void findServerGroupPageListTest()", "full_signature": "@Test public void findServerGroupPageListTest()", "class_method_signature": "ServerGroupServiceTest.findServerGroupPageListTest()", "testcase": true, "constructor": false, "invocations": ["setData", "assertTrue", "size", "getList", "findServerGroupPageList"]}, "focal_class": {"identifier": "ServerGroupService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Message message;", "modifier": "@Autowired\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private AppGroupDao appGroupDao;", "modifier": "@Autowired\n    private", "type": "AppGroupDao", "declarator": "appGroupDao", "var_name": "appGroupDao"}, {"original_string": "@Autowired\n    private ServerGroupDao serverGroupDaoOld;", "modifier": "@Autowired\n    private", "type": "ServerGroupDao", "declarator": "serverGroupDaoOld", "var_name": "serverGroupDaoOld"}, {"original_string": "@Autowired\n    private PermissionService permissionService;", "modifier": "@Autowired\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "@Autowired\n    private DeleteCheckDao deleteCheckDao;", "modifier": "@Autowired\n    private", "type": "DeleteCheckDao", "declarator": "deleteCheckDao", "var_name": "deleteCheckDao"}], "methods": [{"identifier": "validatePermision", "parameters": "(LoginUser user, Errors errors)", "modifiers": "public", "return": "ValidatorChain", "signature": "ValidatorChain validatePermision(LoginUser user, Errors errors)", "full_signature": "public ValidatorChain validatePermision(LoginUser user, Errors errors)", "class_method_signature": "ServerGroupService.validatePermision(LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "findServerGroupPageList", "parameters": "(Paging<ServerGroup> paging)", "modifiers": "public", "return": "ListResult<ServerGroupView>", "signature": "ListResult<ServerGroupView> findServerGroupPageList(Paging<ServerGroup> paging)", "full_signature": "public ListResult<ServerGroupView> findServerGroupPageList(Paging<ServerGroup> paging)", "class_method_signature": "ServerGroupService.findServerGroupPageList(Paging<ServerGroup> paging)", "testcase": false, "constructor": false}, {"identifier": "deleteCheck", "parameters": "(Long dbsetId)", "modifiers": "public", "return": "ServiceResult", "signature": "ServiceResult deleteCheck(Long dbsetId)", "full_signature": "public ServiceResult deleteCheck(Long dbsetId)", "class_method_signature": "ServerGroupService.deleteCheck(Long dbsetId)", "testcase": false, "constructor": false}, {"identifier": "deleteServerGroup", "parameters": "(ServerGroup serverGroup)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> deleteServerGroup(ServerGroup serverGroup)", "full_signature": "public ServiceResult<String> deleteServerGroup(ServerGroup serverGroup)", "class_method_signature": "ServerGroupService.deleteServerGroup(ServerGroup serverGroup)", "testcase": false, "constructor": false}, {"identifier": "isNotExistByName", "parameters": "(ServerGroup serverGroup)", "modifiers": "public", "return": "boolean", "signature": "boolean isNotExistByName(ServerGroup serverGroup)", "full_signature": "public boolean isNotExistByName(ServerGroup serverGroup)", "class_method_signature": "ServerGroupService.isNotExistByName(ServerGroup serverGroup)", "testcase": false, "constructor": false}, {"identifier": "addDataCenter", "parameters": "(LoginUser user, ServerGroup serverGroup)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> addDataCenter(LoginUser user, ServerGroup serverGroup)", "full_signature": "public ServiceResult<String> addDataCenter(LoginUser user, ServerGroup serverGroup)", "class_method_signature": "ServerGroupService.addDataCenter(LoginUser user, ServerGroup serverGroup)", "testcase": false, "constructor": false}, {"identifier": "updateDataCenter", "parameters": "(LoginUser user, ServerGroup serverGroup)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> updateDataCenter(LoginUser user, ServerGroup serverGroup)", "full_signature": "public ServiceResult<String> updateDataCenter(LoginUser user, ServerGroup serverGroup)", "class_method_signature": "ServerGroupService.updateDataCenter(LoginUser user, ServerGroup serverGroup)", "testcase": false, "constructor": false}, {"identifier": "deleteDataCenter", "parameters": "(LoginUser user, ServerGroup serverGroup)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> deleteDataCenter(LoginUser user, ServerGroup serverGroup)", "full_signature": "public ServiceResult<String> deleteDataCenter(LoginUser user, ServerGroup serverGroup)", "class_method_signature": "ServerGroupService.deleteDataCenter(LoginUser user, ServerGroup serverGroup)", "testcase": false, "constructor": false}, {"identifier": "syncDataCenter", "parameters": "(LoginUser user, ServerGroup serverGroup)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> syncDataCenter(LoginUser user, ServerGroup serverGroup)", "full_signature": "public ServiceResult<String> syncDataCenter(LoginUser user, ServerGroup serverGroup)", "class_method_signature": "ServerGroupService.syncDataCenter(LoginUser user, ServerGroup serverGroup)", "testcase": false, "constructor": false}, {"identifier": "getCheckData", "parameters": "(LoginUser user, ServerGroup serverGroup)", "modifiers": "public", "return": "List<ConfigDataResponse>", "signature": "List<ConfigDataResponse> getCheckData(LoginUser user, ServerGroup serverGroup)", "full_signature": "public List<ConfigDataResponse> getCheckData(LoginUser user, ServerGroup serverGroup)", "class_method_signature": "ServerGroupService.getCheckData(LoginUser user, ServerGroup serverGroup)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/service/ServerGroupService.java"}, "focal_method": {"identifier": "findServerGroupPageList", "parameters": "(Paging<ServerGroup> paging)", "modifiers": "public", "return": "ListResult<ServerGroupView>", "body": "public ListResult<ServerGroupView> findServerGroupPageList(Paging<ServerGroup> paging) throws SQLException {\n        Long count = serverGroupDaoOld.getServerGroupTotalCount(paging);\n        return PagerUtil.find(count, paging.getPage(), paging.getPageSize(), () -> {\n            List<ServerGroupView> list = serverGroupDaoOld.findServerGroupPageList(paging);\n            if (CollectionUtils.isEmpty(list)) {\n                return Collections.emptyList();\n            }\n            return list;\n        });\n    }", "signature": "ListResult<ServerGroupView> findServerGroupPageList(Paging<ServerGroup> paging)", "full_signature": "public ListResult<ServerGroupView> findServerGroupPageList(Paging<ServerGroup> paging)", "class_method_signature": "ServerGroupService.findServerGroupPageList(Paging<ServerGroup> paging)", "testcase": false, "constructor": false, "invocations": ["getServerGroupTotalCount", "find", "getPage", "getPageSize", "findServerGroupPageList", "isEmpty", "emptyList"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}