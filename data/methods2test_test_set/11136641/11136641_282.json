{"test_class": {"identifier": "LdapEncoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/springframework/ldap/support/LdapEncoderTest.java"}, "test_case": {"identifier": "testNameDecode_slashlast", "parameters": "()", "modifiers": "@Test(expected = BadLdapGrammarException.class) public", "return": "void", "body": "@Test(expected = BadLdapGrammarException.class)\n    public void testNameDecode_slashlast() {\n        LdapEncoder.nameDecode(\"\\\\\");\n    }", "signature": "void testNameDecode_slashlast()", "full_signature": "@Test(expected = BadLdapGrammarException.class) public void testNameDecode_slashlast()", "class_method_signature": "LdapEncoderTest.testNameDecode_slashlast()", "testcase": true, "constructor": false, "invocations": ["nameDecode"]}, "focal_class": {"identifier": "LdapEncoder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int HEX = 16;", "modifier": "private static final", "type": "int", "declarator": "HEX = 16", "var_name": "HEX"}, {"original_string": "private static String[] NAME_ESCAPE_TABLE = new String[96];", "modifier": "private static", "type": "String[]", "declarator": "NAME_ESCAPE_TABLE = new String[96]", "var_name": "NAME_ESCAPE_TABLE"}, {"original_string": "private static String[] FILTER_ESCAPE_TABLE = new String['\\\\' + 1];", "modifier": "private static", "type": "String[]", "declarator": "FILTER_ESCAPE_TABLE = new String['\\\\' + 1]", "var_name": "FILTER_ESCAPE_TABLE"}, {"original_string": "private static final int RFC2849_MAX_BASE64_CHARS_PER_LINE = 76;", "modifier": "private static final", "type": "int", "declarator": "RFC2849_MAX_BASE64_CHARS_PER_LINE = 76", "var_name": "RFC2849_MAX_BASE64_CHARS_PER_LINE"}], "methods": [{"identifier": "LdapEncoder", "parameters": "()", "modifiers": "private", "return": "", "signature": " LdapEncoder()", "full_signature": "private  LdapEncoder()", "class_method_signature": "LdapEncoder.LdapEncoder()", "testcase": false, "constructor": true}, {"identifier": "toTwoCharHex", "parameters": "(char c)", "modifiers": "protected static", "return": "String", "signature": "String toTwoCharHex(char c)", "full_signature": "protected static String toTwoCharHex(char c)", "class_method_signature": "LdapEncoder.toTwoCharHex(char c)", "testcase": false, "constructor": false}, {"identifier": "filterEncode", "parameters": "(String value)", "modifiers": "public static", "return": "String", "signature": "String filterEncode(String value)", "full_signature": "public static String filterEncode(String value)", "class_method_signature": "LdapEncoder.filterEncode(String value)", "testcase": false, "constructor": false}, {"identifier": "nameEncode", "parameters": "(String value)", "modifiers": "public static", "return": "String", "signature": "String nameEncode(String value)", "full_signature": "public static String nameEncode(String value)", "class_method_signature": "LdapEncoder.nameEncode(String value)", "testcase": false, "constructor": false}, {"identifier": "nameDecode", "parameters": "(String value)", "modifiers": "static public", "return": "String", "signature": "String nameDecode(String value)", "full_signature": "static public String nameDecode(String value)", "class_method_signature": "LdapEncoder.nameDecode(String value)", "testcase": false, "constructor": false}, {"identifier": "printBase64Binary", "parameters": "(byte[] val)", "modifiers": "public static", "return": "String", "signature": "String printBase64Binary(byte[] val)", "full_signature": "public static String printBase64Binary(byte[] val)", "class_method_signature": "LdapEncoder.printBase64Binary(byte[] val)", "testcase": false, "constructor": false}, {"identifier": "parseBase64Binary", "parameters": "(String val)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] parseBase64Binary(String val)", "full_signature": "public static byte[] parseBase64Binary(String val)", "class_method_signature": "LdapEncoder.parseBase64Binary(String val)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/support/LdapEncoder.java"}, "focal_method": {"identifier": "nameDecode", "parameters": "(String value)", "modifiers": "static public", "return": "String", "body": "static public String nameDecode(String value)\n            throws BadLdapGrammarException {\n\n        if (value == null)\n            return null;\n\n        // make buffer same size\n        StringBuilder decoded = new StringBuilder(value.length());\n\n        int i = 0;\n        while (i < value.length()) {\n            char currentChar = value.charAt(i);\n            if (currentChar == '\\\\') {\n                if (value.length() <= i + 1) {\n                    // Ending with a single backslash is not allowed\n                    throw new BadLdapGrammarException(\n                            \"Unexpected end of value \" + \"unterminated '\\\\'\");\n                } else {\n                    char nextChar = value.charAt(i + 1);\n                    if (nextChar == ',' || nextChar == '=' || nextChar == '+'\n                            || nextChar == '<' || nextChar == '>'\n                            || nextChar == '#' || nextChar == ';'\n                            || nextChar == '\\\\' || nextChar == '\\\"'\n                            || nextChar == ' ') {\n                        // Normal backslash escape\n                        decoded.append(nextChar);\n                        i += 2;\n                    } else {\n                        if (value.length() <= i + 2) {\n                            throw new BadLdapGrammarException(\n                                    \"Unexpected end of value \"\n                                            + \"expected special or hex, found '\"\n                                            + nextChar + \"'\");\n                        } else {\n                            // This should be a hex value\n                            String hexString = \"\" + nextChar\n                                    + value.charAt(i + 2);\n                            decoded.append((char) Integer.parseInt(hexString,\n                                    HEX));\n                            i += 3;\n                        }\n                    }\n                }\n            } else {\n                // This character wasn't escaped - just append it\n                decoded.append(currentChar);\n                i++;\n            }\n        }\n\n        return decoded.toString();\n\n    }", "signature": "String nameDecode(String value)", "full_signature": "static public String nameDecode(String value)", "class_method_signature": "LdapEncoder.nameDecode(String value)", "testcase": false, "constructor": false, "invocations": ["length", "length", "charAt", "length", "charAt", "append", "length", "charAt", "append", "parseInt", "append", "toString"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}