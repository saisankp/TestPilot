{"test_class": {"identifier": "AuthenticationServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String username = uniquify(\"username\");", "modifier": "private final", "type": "String", "declarator": "username = uniquify(\"username\")", "var_name": "username"}, {"original_string": "private final String password = uniquify(\"password\");", "modifier": "private final", "type": "String", "declarator": "password = uniquify(\"password\")", "var_name": "password"}, {"original_string": "private final User user = new User(username);", "modifier": "private final", "type": "User", "declarator": "user = new User(username)", "var_name": "user"}, {"original_string": "private final TokenStore tokenStore = mock(TokenStore.class);", "modifier": "private final", "type": "TokenStore", "declarator": "tokenStore = mock(TokenStore.class)", "var_name": "tokenStore"}, {"original_string": "private final UserRepository userRepository = mock(UserRepository.class);", "modifier": "private final", "type": "UserRepository", "declarator": "userRepository = mock(UserRepository.class)", "var_name": "userRepository"}, {"original_string": "private final AuthenticationService authenticationService = new AuthenticationServiceImpl(\n      tokenStore, userRepository);", "modifier": "private final", "type": "AuthenticationService", "declarator": "authenticationService = new AuthenticationServiceImpl(\n      tokenStore, userRepository)", "var_name": "authenticationService"}, {"original_string": "private String token = uniquify(\"token\");", "modifier": "private", "type": "String", "declarator": "token = uniquify(\"token\")", "var_name": "token"}], "file": "doorman/src/test/java/io/servicecomb/company/auth/AuthenticationServiceImplTest.java"}, "test_case": {"identifier": "authenticateUserWithUsernameAndPassword", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void authenticateUserWithUsernameAndPassword() {\n    when(userRepository.findByUsernameAndPassword(username, password)).thenReturn(user);\n    when(tokenStore.generate(username)).thenReturn(token);\n\n    String token = authenticationService.authenticate(username, password);\n\n    assertThat(token).isEqualTo(this.token);\n  }", "signature": "void authenticateUserWithUsernameAndPassword()", "full_signature": "@Test public void authenticateUserWithUsernameAndPassword()", "class_method_signature": "AuthenticationServiceImplTest.authenticateUserWithUsernameAndPassword()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findByUsernameAndPassword", "thenReturn", "when", "generate", "authenticate", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "AuthenticationServiceImpl", "superclass": "", "interfaces": "implements AuthenticationService", "fields": [{"original_string": "private final TokenStore tokenStore;", "modifier": "private final", "type": "TokenStore", "declarator": "tokenStore", "var_name": "tokenStore"}, {"original_string": "private final UserRepository userRepository;", "modifier": "private final", "type": "UserRepository", "declarator": "userRepository", "var_name": "userRepository"}], "methods": [{"identifier": "AuthenticationServiceImpl", "parameters": "(\n      TokenStore tokenStore,\n      UserRepository userRepository)", "modifiers": "", "return": "", "signature": " AuthenticationServiceImpl(\n      TokenStore tokenStore,\n      UserRepository userRepository)", "full_signature": "  AuthenticationServiceImpl(\n      TokenStore tokenStore,\n      UserRepository userRepository)", "class_method_signature": "AuthenticationServiceImpl.AuthenticationServiceImpl(\n      TokenStore tokenStore,\n      UserRepository userRepository)", "testcase": false, "constructor": true}, {"identifier": "authenticate", "parameters": "(String username, String password)", "modifiers": "@Override public", "return": "String", "signature": "String authenticate(String username, String password)", "full_signature": "@Override public String authenticate(String username, String password)", "class_method_signature": "AuthenticationServiceImpl.authenticate(String username, String password)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(String token)", "modifiers": "@Override public", "return": "String", "signature": "String validate(String token)", "full_signature": "@Override public String validate(String token)", "class_method_signature": "AuthenticationServiceImpl.validate(String token)", "testcase": false, "constructor": false}], "file": "doorman/src/main/java/io/servicecomb/company/auth/AuthenticationServiceImpl.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(String username, String password)", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String authenticate(String username, String password) {\n    User user = userRepository.findByUsernameAndPassword(username, password);\n\n    if (user == null) {\n      throw new UnauthorizedAccessException(\"No user matches username \" + username + \" and password\");\n    }\n\n    return tokenStore.generate(username);\n  }", "signature": "String authenticate(String username, String password)", "full_signature": "@Override public String authenticate(String username, String password)", "class_method_signature": "AuthenticationServiceImpl.authenticate(String username, String password)", "testcase": false, "constructor": false, "invocations": ["findByUsernameAndPassword", "generate"]}, "repository": {"repo_id": 93611636, "url": "https://github.com/huaweicse/ServiceComb-Company-WorkShop", "language": "Java", "is_fork": false, "fork_count": 49, "stargazer_count": 79, "size": 1350, "license": "licensed"}}