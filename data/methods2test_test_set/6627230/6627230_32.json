{"test_class": {"identifier": "JoinsTokenResolverTest", "superclass": "extends AbstractTokenResolverTest", "interfaces": "", "fields": [], "file": "dal-jdbc/src/test/java/org/unidal/dal/jdbc/query/token/resolver/JoinsTokenResolverTest.java"}, "test_case": {"identifier": "testInsert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testInsert() throws Exception {\n      QueryDef query = new QueryDef(\"test\", UserEntity.class, QueryType.INSERT, \"<JOINS/>\");\n      User user = new User();\n      QueryContext ctx = getSelectContext(query, user, null);\n\n      try {\n         m_queryResolver.resolve(ctx);\n\n         Assert.fail(\"DalRuntimeException expected\");\n      } catch (DalRuntimeException e) {\n         // expected\n      }\n   }", "signature": "void testInsert()", "full_signature": "@Test public void testInsert()", "class_method_signature": "JoinsTokenResolverTest.testInsert()", "testcase": true, "constructor": false, "invocations": ["getSelectContext", "resolve", "fail"]}, "focal_class": {"identifier": "JoinsTokenResolver", "superclass": "", "interfaces": "implements TokenResolver", "fields": [], "methods": [{"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "JoinsTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false}], "file": "dal-jdbc/src/main/java/org/unidal/dal/jdbc/query/token/resolver/JoinsTokenResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "body": "public String resolve(Token token, QueryContext ctx) {\n      if (token.getType() != TokenType.JOINS) {\n         throw new DalRuntimeException(\"Internal error: only JOINS token is supported by \" + getClass());\n      }\n\n      switch (ctx.getQuery().getType()) {\n      case SELECT:\n         EntityInfo entityInfo = ctx.getEntityInfo();\n         SubObjects subobject = entityInfo.getSubobjects(ctx.getReadset());\n         StringBuilder sb = new StringBuilder(256);\n\n         if (subobject != null) {\n            String[] names = subobject.value();\n\n            for (String name : names) {\n               if (name != null && name.length() > 0) {\n                  Relation relation = entityInfo.getRelation(name);\n\n                  if (sb.length() > 0) {\n                     sb.append(\" and \");\n                  }\n\n                  sb.append(relation.join());\n               }\n            }\n         }\n\n         if (sb.length() == 0) {\n            sb.append(\"1=1\");\n         }\n\n         return sb.toString();\n      case INSERT:\n         throw new DalRuntimeException(\"TABLES token does not support query type: \" + ctx.getQuery().getType());\n      case UPDATE:\n         throw new DalRuntimeException(\"TABLES token does not support query type: \" + ctx.getQuery().getType());\n      case DELETE:\n         throw new DalRuntimeException(\"TABLES token does not support query type: \" + ctx.getQuery().getType());\n      default:\n         throw new DalRuntimeException(\"TABLES token does not support query type: \" + ctx.getQuery().getType());\n      }\n   }", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "JoinsTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false, "invocations": ["getType", "getClass", "getType", "getQuery", "getEntityInfo", "getSubobjects", "getReadset", "value", "length", "getRelation", "length", "append", "append", "join", "length", "append", "toString", "getType", "getQuery", "getType", "getQuery", "getType", "getQuery", "getType", "getQuery"]}, "repository": {"repo_id": 6627230, "url": "https://github.com/unidal/frameworks", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 100, "size": 3009, "license": "licensed"}}