{"test_class": {"identifier": "SpecificationTransformerTypeBasedTest", "superclass": "", "interfaces": "", "fields": [], "file": "opendse-optimization/src/test/java/net/sf/opendse/optimization/io/SpecificationTransformerTypeBasedTest.java"}, "test_case": {"identifier": "generateArchitectureTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void generateArchitectureTest() {\n\n\t\tResource r1 = new Resource(\"type1\");\n\t\tr1.setAttribute(\"A1\", 5);\n\t\tr1.setAttribute(\"A2\", 1);\n\n\t\tResource r2 = new Resource(\"type2\");\n\t\tr2.setAttribute(\"A1\", 0);\n\n\t\tResourceTypes<Resource> types = new ResourceTypes<Resource>();\n\t\ttypes.put(\"r1\", r1);\n\t\ttypes.put(\"r2\", r2);\n\n\t\tLink l1 = new Link(\"linkType1\");\n\t\tl1.setAttribute(\"B1\", 2);\n\n\t\tLinkTypes<Link> linkTypes = new LinkTypes<Link>();\n\t\tlinkTypes.put(\"l1\", l1);\n\n\t\tSpecificationTransformerTypeBased<SpecificationTypeBased, Specification> transformer = new SpecificationTransformerTypeBased<SpecificationTypeBased, Specification>();\n\n\t\tArchitecture<Resource, Link> arch = transformer.generateArchitecture(types, linkTypes);\n\n\t\tAssert.assertNotNull(arch);\n\t\tAssert.assertEquals(arch.getVertexCount(), 3);\n\n\t\tAssert.assertNotNull(arch.getVertex(\"r_type1\"));\n\t\tAssert.assertNotNull(arch.getVertex(\"r_type2\"));\n\t\tAssert.assertNotNull(arch.getVertex(\"bus\"));\n\n\t\tAssert.assertNotNull(arch.getEdge(\"l_type1\"));\n\t\tAssert.assertNotNull(arch.getEdge(\"l_type2\"));\n\n\t\tAssert.assertEquals(arch.getVertex(\"r_type1\").getAttribute(\"A1\"), 5);\n\t\tAssert.assertEquals(arch.getVertex(\"r_type1\").getAttribute(\"A2\"), 1);\n\n\t\tAssert.assertEquals(arch.getVertex(\"r_type1\").getType(), \"type1\");\n\t\tAssert.assertEquals(arch.getEdge(\"l_type1\").getAttribute(\"B1\"), 2);\n\n\t\tAssert.assertNotEquals(arch.getVertex(\"r_type1\"), types.get(\"type1\"));\n\t}", "signature": "void generateArchitectureTest()", "full_signature": "@Test public void generateArchitectureTest()", "class_method_signature": "SpecificationTransformerTypeBasedTest.generateArchitectureTest()", "testcase": true, "constructor": false, "invocations": ["setAttribute", "setAttribute", "setAttribute", "put", "put", "setAttribute", "put", "generateArchitecture", "assertNotNull", "assertEquals", "getVertexCount", "assertNotNull", "getVertex", "assertNotNull", "getVertex", "assertNotNull", "getVertex", "assertNotNull", "getEdge", "assertNotNull", "getEdge", "assertEquals", "getAttribute", "getVertex", "assertEquals", "getAttribute", "getVertex", "assertEquals", "getType", "getVertex", "assertEquals", "getAttribute", "getEdge", "assertNotEquals", "getVertex", "get"]}, "focal_class": {"identifier": "SpecificationTransformerTypeBased", "superclass": "", "interfaces": "implements Transformer<T, S>", "fields": [{"original_string": "protected final String CONNECTOR = \"_\";", "modifier": "protected final", "type": "String", "declarator": "CONNECTOR = \"_\"", "var_name": "CONNECTOR"}, {"original_string": "protected Map<Resource, List<Resource>> typeMap;", "modifier": "protected", "type": "Map<Resource, List<Resource>>", "declarator": "typeMap", "var_name": "typeMap"}], "methods": [{"identifier": "transform", "parameters": "(T typeBasedSpec)", "modifiers": "@Override public", "return": "S", "signature": "S transform(T typeBasedSpec)", "full_signature": "@Override public S transform(T typeBasedSpec)", "class_method_signature": "SpecificationTransformerTypeBased.transform(T typeBasedSpec)", "testcase": false, "constructor": false}, {"identifier": "generateArchitecture", "parameters": "(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes)", "modifiers": "protected", "return": "Architecture<Resource, Link>", "signature": "Architecture<Resource, Link> generateArchitecture(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes)", "full_signature": "protected Architecture<Resource, Link> generateArchitecture(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes)", "class_method_signature": "SpecificationTransformerTypeBased.generateArchitecture(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes)", "testcase": false, "constructor": false}, {"identifier": "generateMappings", "parameters": "(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture)", "modifiers": "protected", "return": "Mappings<Task, Resource>", "signature": "Mappings<Task, Resource> generateMappings(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture)", "full_signature": "protected Mappings<Task, Resource> generateMappings(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture)", "class_method_signature": "SpecificationTransformerTypeBased.generateMappings(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture)", "testcase": false, "constructor": false}], "file": "opendse-optimization/src/main/java/net/sf/opendse/optimization/io/SpecificationTransformerTypeBased.java"}, "focal_method": {"identifier": "generateArchitecture", "parameters": "(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes)", "modifiers": "protected", "return": "Architecture<Resource, Link>", "body": "protected Architecture<Resource, Link> generateArchitecture(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes) {\n\n\t\tArchitecture<Resource, Link> architecture = new Architecture<Resource, Link>();\n\t\tLink linkType = linkTypes.values().iterator().next();\n\n\t\t// on-chip bus\n\t\tResource bus = new Resource(\"bus\");\n\n\t\tfor (Resource type : resourceTypes.values()) {\n\t\t\tResource instance = new Resource(\"r\" + CONNECTOR + type.getId());\n\n\t\t\tAttributes attributes = type.getAttributes();\n\t\t\tfor (String key : attributes.keySet()) {\n\t\t\t\tinstance.setAttribute(key, attributes.getAttribute(key));\n\t\t\t}\n\t\t\tinstance.setType(type.getId());\n\n\t\t\tLink link = new Link(\"l\" + CONNECTOR + type.getId());\n\n\t\t\tAttributes linkAttributes = linkType.getAttributes();\n\t\t\tfor (String key : linkAttributes.keySet()) {\n\t\t\t\tlink.setAttribute(key, linkAttributes.getAttribute(key));\n\t\t\t}\n\n\t\t\tarchitecture.addVertex(instance);\n\t\t\tarchitecture.addEdge(link, instance, bus);\n\t\t}\n\t\treturn architecture;\n\t}", "signature": "Architecture<Resource, Link> generateArchitecture(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes)", "full_signature": "protected Architecture<Resource, Link> generateArchitecture(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes)", "class_method_signature": "SpecificationTransformerTypeBased.generateArchitecture(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes)", "testcase": false, "constructor": false, "invocations": ["next", "iterator", "values", "values", "getId", "getAttributes", "keySet", "setAttribute", "getAttribute", "setType", "getId", "getId", "getAttributes", "keySet", "setAttribute", "getAttribute", "addVertex", "addEdge"]}, "repository": {"repo_id": 121694310, "url": "https://github.com/felixreimann/opendse", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 7, "size": 2024, "license": "licensed"}}