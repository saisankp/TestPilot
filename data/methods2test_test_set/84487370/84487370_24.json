{"test_class": {"identifier": "ValidationAPITest", "superclass": "", "interfaces": "", "fields": [], "file": "hydrograph.engine/hydrograph.engine.expression/src/test/java/hydrograph/engine/expression/api/ValidationAPITest.java"}, "test_case": {"identifier": "itShouldCompileTransformExpression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void itShouldCompileTransformExpression() {\n\t\tValidationAPI validationAPI = new ValidationAPI(\n\t\t\t\t\"StringFunctions.stringMatch(\\\"HELLO WORLD\\\",DateFunctions.getStringDateFromDateObject(f1, \\\"\\\"))?f1:\\\"HELLO WORLD\\\"\",\n\t\t\t\t\"\");\n\t\tMap<String, Class<?>> schemaFields = new HashMap<String, Class<?>>();\n\t\tschemaFields.put(\"f1\", Date.class);\n\t\tDiagnosticCollector<JavaFileObject> dig = validationAPI.transformCompiler(schemaFields);\n\n\t\tAssert.assertTrue(dig.getDiagnostics().size() <= 0);\n\t}", "signature": "void itShouldCompileTransformExpression()", "full_signature": "@Test public void itShouldCompileTransformExpression()", "class_method_signature": "ValidationAPITest.itShouldCompileTransformExpression()", "testcase": true, "constructor": false, "invocations": ["put", "transformCompiler", "assertTrue", "size", "getDiagnostics"]}, "focal_class": {"identifier": "ValidationAPI", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private final static String USER_FUNCTIONS_PROPS = \"UserFunctions.properties\";", "modifier": "private final static", "type": "String", "declarator": "USER_FUNCTIONS_PROPS = \"UserFunctions.properties\"", "var_name": "USER_FUNCTIONS_PROPS"}, {"original_string": "private String packageNames = \"\";", "modifier": "private", "type": "String", "declarator": "packageNames = \"\"", "var_name": "packageNames"}, {"original_string": "private String expr;", "modifier": "private", "type": "String", "declarator": "expr", "var_name": "expr"}, {"original_string": "private Interpreter interpreter;", "modifier": "private", "type": "Interpreter", "declarator": "interpreter", "var_name": "interpreter"}, {"original_string": "private List<String> listOfPackage;", "modifier": "private", "type": "List<String>", "declarator": "listOfPackage", "var_name": "listOfPackage"}, {"original_string": "private  ExpressionEvaluator expressionEvaluator;", "modifier": "private", "type": "ExpressionEvaluator", "declarator": "expressionEvaluator", "var_name": "expressionEvaluator"}, {"original_string": "private ValidationAPIWrapper apiWrapper;", "modifier": "private", "type": "ValidationAPIWrapper", "declarator": "apiWrapper", "var_name": "apiWrapper"}, {"original_string": "private List<ValidationAPIWrapper> apiWrapperList;", "modifier": "private", "type": "List<ValidationAPIWrapper>", "declarator": "apiWrapperList", "var_name": "apiWrapperList"}], "methods": [{"identifier": "ValidationAPI", "parameters": "(String expression, String propertiesFilePath)", "modifiers": "public", "return": "", "signature": " ValidationAPI(String expression, String propertiesFilePath)", "full_signature": "public  ValidationAPI(String expression, String propertiesFilePath)", "class_method_signature": "ValidationAPI.ValidationAPI(String expression, String propertiesFilePath)", "testcase": false, "constructor": true}, {"identifier": "generatePackageName", "parameters": "(String propertiesFile)", "modifiers": "private", "return": "String", "signature": "String generatePackageName(String propertiesFile)", "full_signature": "private String generatePackageName(String propertiesFile)", "class_method_signature": "ValidationAPI.generatePackageName(String propertiesFile)", "testcase": false, "constructor": false}, {"identifier": "generatePackageName", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String generatePackageName()", "full_signature": "private String generatePackageName()", "class_method_signature": "ValidationAPI.generatePackageName()", "testcase": false, "constructor": false}, {"identifier": "generateAntlrTree", "parameters": "()", "modifiers": "private", "return": "ExpressionEditorParser.BlockContext", "signature": "ExpressionEditorParser.BlockContext generateAntlrTree()", "full_signature": "private ExpressionEditorParser.BlockContext generateAntlrTree()", "class_method_signature": "ValidationAPI.generateAntlrTree()", "testcase": false, "constructor": false}, {"identifier": "isExpressionValid", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isExpressionValid()", "full_signature": "public boolean isExpressionValid()", "class_method_signature": "ValidationAPI.isExpressionValid()", "testcase": false, "constructor": false}, {"identifier": "getValidExpression", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getValidExpression()", "full_signature": "public String getValidExpression()", "class_method_signature": "ValidationAPI.getValidExpression()", "testcase": false, "constructor": false}, {"identifier": "transformCompiler", "parameters": "(Map<String, Class<?>> schemaFields)", "modifiers": "public", "return": "DiagnosticCollector<JavaFileObject>", "signature": "DiagnosticCollector<JavaFileObject> transformCompiler(Map<String, Class<?>> schemaFields)", "full_signature": "public DiagnosticCollector<JavaFileObject> transformCompiler(Map<String, Class<?>> schemaFields)", "class_method_signature": "ValidationAPI.transformCompiler(Map<String, Class<?>> schemaFields)", "testcase": false, "constructor": false}, {"identifier": "filterCompiler", "parameters": "(Map<String, Class<?>> schemaFields)", "modifiers": "public", "return": "DiagnosticCollector<JavaFileObject>", "signature": "DiagnosticCollector<JavaFileObject> filterCompiler(Map<String, Class<?>> schemaFields)", "full_signature": "public DiagnosticCollector<JavaFileObject> filterCompiler(Map<String, Class<?>> schemaFields)", "class_method_signature": "ValidationAPI.filterCompiler(Map<String, Class<?>> schemaFields)", "testcase": false, "constructor": false}, {"identifier": "filterCompiler", "parameters": "(Map<String, Class<?>> schemaFields,\n\t\t\tString externalJarPath)", "modifiers": "private", "return": "DiagnosticCollector<JavaFileObject>", "signature": "DiagnosticCollector<JavaFileObject> filterCompiler(Map<String, Class<?>> schemaFields,\n\t\t\tString externalJarPath)", "full_signature": "private DiagnosticCollector<JavaFileObject> filterCompiler(Map<String, Class<?>> schemaFields,\n\t\t\tString externalJarPath)", "class_method_signature": "ValidationAPI.filterCompiler(Map<String, Class<?>> schemaFields,\n\t\t\tString externalJarPath)", "testcase": false, "constructor": false}, {"identifier": "transformCompiler", "parameters": "(Map<String, Class<?>> schemaFields,\n\t\t\tString externalJarPath)", "modifiers": "private", "return": "DiagnosticCollector<JavaFileObject>", "signature": "DiagnosticCollector<JavaFileObject> transformCompiler(Map<String, Class<?>> schemaFields,\n\t\t\tString externalJarPath)", "full_signature": "private DiagnosticCollector<JavaFileObject> transformCompiler(Map<String, Class<?>> schemaFields,\n\t\t\tString externalJarPath)", "class_method_signature": "ValidationAPI.transformCompiler(Map<String, Class<?>> schemaFields,\n\t\t\tString externalJarPath)", "testcase": false, "constructor": false}, {"identifier": "getFieldNameList", "parameters": "(Map<String, Class<?>> schemaFields)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getFieldNameList(Map<String, Class<?>> schemaFields)", "full_signature": "public List<String> getFieldNameList(Map<String, Class<?>> schemaFields)", "class_method_signature": "ValidationAPI.getFieldNameList(Map<String, Class<?>> schemaFields)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object execute()", "full_signature": "public Object execute()", "class_method_signature": "ValidationAPI.execute()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String[] fieldNames, Object[] data)", "modifiers": "public", "return": "Object", "signature": "Object execute(String[] fieldNames, Object[] data)", "full_signature": "public Object execute(String[] fieldNames, Object[] data)", "class_method_signature": "ValidationAPI.execute(String[] fieldNames, Object[] data)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String[] fieldNames, Object[] data, String validExpression)", "modifiers": "public", "return": "Object", "signature": "Object execute(String[] fieldNames, Object[] data, String validExpression)", "full_signature": "public Object execute(String[] fieldNames, Object[] data, String validExpression)", "class_method_signature": "ValidationAPI.execute(String[] fieldNames, Object[] data, String validExpression)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(String className)", "modifiers": "private", "return": "Class", "signature": "Class getType(String className)", "full_signature": "private Class getType(String className)", "class_method_signature": "ValidationAPI.getType(String className)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(String[] fieldNames,String[] fieldTypes)", "modifiers": "public", "return": "void", "signature": "void init(String[] fieldNames,String[] fieldTypes)", "full_signature": "public void init(String[] fieldNames,String[] fieldTypes)", "class_method_signature": "ValidationAPI.init(String[] fieldNames,String[] fieldTypes)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(String validExpression,Map<String,String> fieldMap)", "modifiers": "public", "return": "ValidationAPI", "signature": "ValidationAPI init(String validExpression,Map<String,String> fieldMap)", "full_signature": "public ValidationAPI init(String validExpression,Map<String,String> fieldMap)", "class_method_signature": "ValidationAPI.init(String validExpression,Map<String,String> fieldMap)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(String expression)", "modifiers": "public", "return": "void", "signature": "void init(String expression)", "full_signature": "public void init(String expression)", "class_method_signature": "ValidationAPI.init(String expression)", "testcase": false, "constructor": false}, {"identifier": "exec", "parameters": "(Object[] data)", "modifiers": "public", "return": "Object", "signature": "Object exec(Object[] data)", "full_signature": "public Object exec(Object[] data)", "class_method_signature": "ValidationAPI.exec(Object[] data)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String validExpression)", "modifiers": "public", "return": "Object", "signature": "Object execute(String validExpression)", "full_signature": "public Object execute(String validExpression)", "class_method_signature": "ValidationAPI.execute(String validExpression)", "testcase": false, "constructor": false}, {"identifier": "filterCompiler", "parameters": "(String expression, String propertiesFilePath,\n\t\t\tMap<String, Class<?>> schemaFields, String externalJarPath)", "modifiers": "public static", "return": "DiagnosticCollector<JavaFileObject>", "signature": "DiagnosticCollector<JavaFileObject> filterCompiler(String expression, String propertiesFilePath,\n\t\t\tMap<String, Class<?>> schemaFields, String externalJarPath)", "full_signature": "public static DiagnosticCollector<JavaFileObject> filterCompiler(String expression, String propertiesFilePath,\n\t\t\tMap<String, Class<?>> schemaFields, String externalJarPath)", "class_method_signature": "ValidationAPI.filterCompiler(String expression, String propertiesFilePath,\n\t\t\tMap<String, Class<?>> schemaFields, String externalJarPath)", "testcase": false, "constructor": false}, {"identifier": "transformCompiler", "parameters": "(String expression, String propertiesFilePath,\n\t\t\tMap<String, Class<?>> schemaFields, String externalJarPath)", "modifiers": "public static", "return": "DiagnosticCollector<JavaFileObject>", "signature": "DiagnosticCollector<JavaFileObject> transformCompiler(String expression, String propertiesFilePath,\n\t\t\tMap<String, Class<?>> schemaFields, String externalJarPath)", "full_signature": "public static DiagnosticCollector<JavaFileObject> transformCompiler(String expression, String propertiesFilePath,\n\t\t\tMap<String, Class<?>> schemaFields, String externalJarPath)", "class_method_signature": "ValidationAPI.transformCompiler(String expression, String propertiesFilePath,\n\t\t\tMap<String, Class<?>> schemaFields, String externalJarPath)", "testcase": false, "constructor": false}, {"identifier": "getFieldNameList", "parameters": "(Map<String, Class<?>> schemaFields,String expression,String propertiesFilePath)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getFieldNameList(Map<String, Class<?>> schemaFields,String expression,String propertiesFilePath)", "full_signature": "public static List<String> getFieldNameList(Map<String, Class<?>> schemaFields,String expression,String propertiesFilePath)", "class_method_signature": "ValidationAPI.getFieldNameList(Map<String, Class<?>> schemaFields,String expression,String propertiesFilePath)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String expression, String propertiesFilePath, String[] fieldNames, Object[] data)", "modifiers": "public static", "return": "Object", "signature": "Object execute(String expression, String propertiesFilePath, String[] fieldNames, Object[] data)", "full_signature": "public static Object execute(String expression, String propertiesFilePath, String[] fieldNames, Object[] data)", "class_method_signature": "ValidationAPI.execute(String expression, String propertiesFilePath, String[] fieldNames, Object[] data)", "testcase": false, "constructor": false}, {"identifier": "getExpr", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getExpr()", "full_signature": "public String getExpr()", "class_method_signature": "ValidationAPI.getExpr()", "testcase": false, "constructor": false}, {"identifier": "setExpr", "parameters": "(String expr)", "modifiers": "public", "return": "void", "signature": "void setExpr(String expr)", "full_signature": "public void setExpr(String expr)", "class_method_signature": "ValidationAPI.setExpr(String expr)", "testcase": false, "constructor": false}], "file": "hydrograph.engine/hydrograph.engine.expression/src/main/java/hydrograph/engine/expression/api/ValidationAPI.java"}, "focal_method": {"identifier": "transformCompiler", "parameters": "(Map<String, Class<?>> schemaFields)", "modifiers": "public", "return": "DiagnosticCollector<JavaFileObject>", "body": "public DiagnosticCollector<JavaFileObject> transformCompiler(Map<String, Class<?>> schemaFields) {\n\t\tString fields = \"\";\n\t\tCustomExpressionVisitor customExpressionVisitor = new CustomExpressionVisitor();\n\t\tcustomExpressionVisitor.visit(generateAntlrTree());\n\t\tfor (String field : customExpressionVisitor.getFieldList()) {\n\t\t\tif (schemaFields.get(field) != null) {\n\t\t\t\tfields += ClassToDataTypeConversion.valueOf(schemaFields.get(field).getSimpleName()).getValue(field);\n\t\t\t}\n\t\t}\n\n\t\treturn CompileUtils.javaCompile(fields, expr, packageNames, \"Object\");\n\n\t}", "signature": "DiagnosticCollector<JavaFileObject> transformCompiler(Map<String, Class<?>> schemaFields)", "full_signature": "public DiagnosticCollector<JavaFileObject> transformCompiler(Map<String, Class<?>> schemaFields)", "class_method_signature": "ValidationAPI.transformCompiler(Map<String, Class<?>> schemaFields)", "testcase": false, "constructor": false, "invocations": ["visit", "generateAntlrTree", "getFieldList", "get", "getValue", "valueOf", "getSimpleName", "get", "javaCompile"]}, "repository": {"repo_id": 84487370, "url": "https://github.com/BitwiseInc/Hydrograph", "language": "Java", "is_fork": false, "fork_count": 104, "stargazer_count": 139, "size": 35089, "license": "licensed"}}