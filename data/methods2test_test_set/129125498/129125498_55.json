{"test_class": {"identifier": "NaivePointForecasterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double TOLERANCE = 0.001;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.001", "var_name": "TOLERANCE"}, {"original_string": "private NaivePointForecaster forecasterUnderTest = new NaivePointForecaster();", "modifier": "private", "type": "NaivePointForecaster", "declarator": "forecasterUnderTest = new NaivePointForecaster()", "var_name": "forecasterUnderTest"}, {"original_string": "private Random random = new Random();", "modifier": "private", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}, {"original_string": "private MetricDefinition metricDef = new MetricDefinition(\"some-key\");", "modifier": "private", "type": "MetricDefinition", "declarator": "metricDef = new MetricDefinition(\"some-key\")", "var_name": "metricDef"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/forecast/point/algo/naive/NaivePointForecasterTest.java"}, "test_case": {"identifier": "testForecast", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testForecast() {\n        double currValue = random.nextDouble();\n        MetricData metricData = new MetricData(metricDef, currValue, 0);\n        PointForecast forecast = forecasterUnderTest.forecast(metricData);\n        assertNull(forecast);\n\n        for (int i = 0; i < 10; i++) {\n            val prevValue = currValue;\n            currValue = random.nextDouble();\n            metricData = new MetricData(metricDef, currValue, 0);\n            forecast = forecasterUnderTest.forecast(metricData);\n            assertEquals(forecast.getValue(), prevValue, TOLERANCE);\n        }\n    }", "signature": "void testForecast()", "full_signature": "@Test public void testForecast()", "class_method_signature": "NaivePointForecasterTest.testForecast()", "testcase": true, "constructor": false, "invocations": ["nextDouble", "forecast", "assertNull", "nextDouble", "forecast", "assertEquals", "getValue"]}, "focal_class": {"identifier": "NaivePointForecaster", "superclass": "", "interfaces": "implements PointForecaster", "fields": [{"original_string": "private MetricData lastMetricData;", "modifier": "private", "type": "MetricData", "declarator": "lastMetricData", "var_name": "lastMetricData"}], "methods": [{"identifier": "forecast", "parameters": "(MetricData metricData)", "modifiers": "@Override public", "return": "PointForecast", "signature": "PointForecast forecast(MetricData metricData)", "full_signature": "@Override public PointForecast forecast(MetricData metricData)", "class_method_signature": "NaivePointForecaster.forecast(MetricData metricData)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/forecast/point/algo/naive/NaivePointForecaster.java"}, "focal_method": {"identifier": "forecast", "parameters": "(MetricData metricData)", "modifiers": "@Override public", "return": "PointForecast", "body": "@Override\n    public PointForecast forecast(MetricData metricData) {\n        notNull(metricData, \"metricData can't be null\");\n        val forecastMetricData = lastMetricData;\n        this.lastMetricData = metricData;\n        return forecastMetricData == null ? null : new PointForecast(forecastMetricData.getValue(), false);\n    }", "signature": "PointForecast forecast(MetricData metricData)", "full_signature": "@Override public PointForecast forecast(MetricData metricData)", "class_method_signature": "NaivePointForecaster.forecast(MetricData metricData)", "testcase": false, "constructor": false, "invocations": ["notNull", "getValue"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}