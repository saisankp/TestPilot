{"test_class": {"identifier": "JobS3LogLocationValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final JobDescriptor<?> JOB_WITH_DEFAULT_BUCKET = JobDescriptorGenerator.oneTaskBatchJobDescriptor();", "modifier": "private static final", "type": "JobDescriptor<?>", "declarator": "JOB_WITH_DEFAULT_BUCKET = JobDescriptorGenerator.oneTaskBatchJobDescriptor()", "var_name": "JOB_WITH_DEFAULT_BUCKET"}, {"original_string": "private static final JobDescriptor<?> JOB_WITH_CUSTOM_BUCKET = JobDescriptorGenerator.oneTaskBatchJobDescriptor().toBuilder()\n            .withContainer(JOB_WITH_DEFAULT_BUCKET.getContainer().toBuilder()\n                    .withAttributes(CollectionsExt.asMap(\n                            JobAttributes.JOB_CONTAINER_ATTRIBUTE_S3_BUCKET_NAME, \"junitBucket\",\n                            JobAttributes.JOB_CONTAINER_ATTRIBUTE_S3_PATH_PREFIX, \"junitPrefix\"\n                    ))\n                    .build()\n            )\n            .build();", "modifier": "private static final", "type": "JobDescriptor<?>", "declarator": "JOB_WITH_CUSTOM_BUCKET = JobDescriptorGenerator.oneTaskBatchJobDescriptor().toBuilder()\n            .withContainer(JOB_WITH_DEFAULT_BUCKET.getContainer().toBuilder()\n                    .withAttributes(CollectionsExt.asMap(\n                            JobAttributes.JOB_CONTAINER_ATTRIBUTE_S3_BUCKET_NAME, \"junitBucket\",\n                            JobAttributes.JOB_CONTAINER_ATTRIBUTE_S3_PATH_PREFIX, \"junitPrefix\"\n                    ))\n                    .build()\n            )\n            .build()", "var_name": "JOB_WITH_CUSTOM_BUCKET"}, {"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.internal();", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.internal()", "var_name": "titusRuntime"}, {"original_string": "private final ReactorValidationServiceClient validationClient = mock(ReactorValidationServiceClient.class);", "modifier": "private final", "type": "ReactorValidationServiceClient", "declarator": "validationClient = mock(ReactorValidationServiceClient.class)", "var_name": "validationClient"}, {"original_string": "private final JobS3LogLocationValidator validator = new JobS3LogLocationValidator(\n            validationClient,\n            \"defaultBucket\",\n            \"defaultPrefix\",\n            Function.identity(),\n            () -> ValidationError.Type.SOFT,\n            () -> true,\n            titusRuntime\n    );", "modifier": "private final", "type": "JobS3LogLocationValidator", "declarator": "validator = new JobS3LogLocationValidator(\n            validationClient,\n            \"defaultBucket\",\n            \"defaultPrefix\",\n            Function.identity(),\n            () -> ValidationError.Type.SOFT,\n            () -> true,\n            titusRuntime\n    )", "var_name": "validator"}], "file": "titus-ext/job-validator/src/test/java/com/netflix/titus/ext/jobvalidator/s3/JobS3LogLocationValidatorTest.java"}, "test_case": {"identifier": "testNoCustomBucket", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoCustomBucket() {\n        when(validationClient.validateS3BucketAccess(any())).thenReturn(\n                Mono.just(S3BucketAccessValidationResponse.getDefaultInstance())\n        );\n        Set<ValidationError> result = validator.validate(JOB_WITH_DEFAULT_BUCKET).block();\n        assertThat(result).isEmpty();\n        verify(validationClient, times(0)).validateS3BucketAccess(any());\n    }", "signature": "void testNoCustomBucket()", "full_signature": "@Test public void testNoCustomBucket()", "class_method_signature": "JobS3LogLocationValidatorTest.testNoCustomBucket()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "validateS3BucketAccess", "any", "just", "getDefaultInstance", "block", "validate", "isEmpty", "assertThat", "validateS3BucketAccess", "verify", "times", "any"]}, "focal_class": {"identifier": "JobS3LogLocationValidator", "superclass": "", "interfaces": "implements AdmissionValidator<JobDescriptor>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(JobS3LogLocationValidator.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JobS3LogLocationValidator.class)", "var_name": "logger"}, {"original_string": "private static final String VALIDATOR_PATH = \"/titusS3AccessValidator\";", "modifier": "private static final", "type": "String", "declarator": "VALIDATOR_PATH = \"/titusS3AccessValidator\"", "var_name": "VALIDATOR_PATH"}, {"original_string": "private static final String REASON_ACCESS_DENIED = \"accessDenied\";", "modifier": "private static final", "type": "String", "declarator": "REASON_ACCESS_DENIED = \"accessDenied\"", "var_name": "REASON_ACCESS_DENIED"}, {"original_string": "private static final long RETRY_COUNT = 3;", "modifier": "private static final", "type": "long", "declarator": "RETRY_COUNT = 3", "var_name": "RETRY_COUNT"}, {"original_string": "private final ReactorValidationServiceClient validationClient;", "modifier": "private final", "type": "ReactorValidationServiceClient", "declarator": "validationClient", "var_name": "validationClient"}, {"original_string": "private final String defaultBucket;", "modifier": "private final", "type": "String", "declarator": "defaultBucket", "var_name": "defaultBucket"}, {"original_string": "private final String defaultPathPrefix;", "modifier": "private final", "type": "String", "declarator": "defaultPathPrefix", "var_name": "defaultPathPrefix"}, {"original_string": "private final Function<String, String> iamRoleArnResolver;", "modifier": "private final", "type": "Function<String, String>", "declarator": "iamRoleArnResolver", "var_name": "iamRoleArnResolver"}, {"original_string": "private final Supplier<ValidationError.Type> validationErrorTypeProvider;", "modifier": "private final", "type": "Supplier<ValidationError.Type>", "declarator": "validationErrorTypeProvider", "var_name": "validationErrorTypeProvider"}, {"original_string": "private final Supplier<Boolean> enabledSupplier;", "modifier": "private final", "type": "Supplier<Boolean>", "declarator": "enabledSupplier", "var_name": "enabledSupplier"}, {"original_string": "private final ValidatorMetrics metrics;", "modifier": "private final", "type": "ValidatorMetrics", "declarator": "metrics", "var_name": "metrics"}], "methods": [{"identifier": "JobS3LogLocationValidator", "parameters": "(ReactorValidationServiceClient validationClient,\n                                     String defaultBucket,\n                                     String defaultPathPrefix,\n                                     Function<String, String> iamRoleArnResolver,\n                                     Supplier<ValidationError.Type> validationErrorTypeProvider,\n                                     Supplier<Boolean> enabledSupplier,\n                                     TitusRuntime titusRuntime)", "modifiers": "public", "return": "", "signature": " JobS3LogLocationValidator(ReactorValidationServiceClient validationClient,\n                                     String defaultBucket,\n                                     String defaultPathPrefix,\n                                     Function<String, String> iamRoleArnResolver,\n                                     Supplier<ValidationError.Type> validationErrorTypeProvider,\n                                     Supplier<Boolean> enabledSupplier,\n                                     TitusRuntime titusRuntime)", "full_signature": "public  JobS3LogLocationValidator(ReactorValidationServiceClient validationClient,\n                                     String defaultBucket,\n                                     String defaultPathPrefix,\n                                     Function<String, String> iamRoleArnResolver,\n                                     Supplier<ValidationError.Type> validationErrorTypeProvider,\n                                     Supplier<Boolean> enabledSupplier,\n                                     TitusRuntime titusRuntime)", "class_method_signature": "JobS3LogLocationValidator.JobS3LogLocationValidator(ReactorValidationServiceClient validationClient,\n                                     String defaultBucket,\n                                     String defaultPathPrefix,\n                                     Function<String, String> iamRoleArnResolver,\n                                     Supplier<ValidationError.Type> validationErrorTypeProvider,\n                                     Supplier<Boolean> enabledSupplier,\n                                     TitusRuntime titusRuntime)", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(JobDescriptor jobDescriptor)", "modifiers": "@Override public", "return": "Mono<Set<ValidationError>>", "signature": "Mono<Set<ValidationError>> validate(JobDescriptor jobDescriptor)", "full_signature": "@Override public Mono<Set<ValidationError>> validate(JobDescriptor jobDescriptor)", "class_method_signature": "JobS3LogLocationValidator.validate(JobDescriptor jobDescriptor)", "testcase": false, "constructor": false}, {"identifier": "getErrorType", "parameters": "()", "modifiers": "@Override public", "return": "ValidationError.Type", "signature": "ValidationError.Type getErrorType()", "full_signature": "@Override public ValidationError.Type getErrorType()", "class_method_signature": "JobS3LogLocationValidator.getErrorType()", "testcase": false, "constructor": false}, {"identifier": "toValidationError", "parameters": "(List<ValidationFailure> failures)", "modifiers": "private", "return": "Set<ValidationError>", "signature": "Set<ValidationError> toValidationError(List<ValidationFailure> failures)", "full_signature": "private Set<ValidationError> toValidationError(List<ValidationFailure> failures)", "class_method_signature": "JobS3LogLocationValidator.toValidationError(List<ValidationFailure> failures)", "testcase": false, "constructor": false}], "file": "titus-ext/job-validator/src/main/java/com/netflix/titus/ext/jobvalidator/s3/JobS3LogLocationValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(JobDescriptor jobDescriptor)", "modifiers": "@Override public", "return": "Mono<Set<ValidationError>>", "body": "@Override\n    public Mono<Set<ValidationError>> validate(JobDescriptor jobDescriptor) {\n        if (!enabledSupplier.get()) {\n            metrics.incrementValidationSkipped(ValidatorMetrics.REASON_DISABLED);\n            return Mono.just(Collections.emptySet());\n        }\n\n        LogStorageInfos.S3Bucket s3BucketInfo = LogStorageInfos.findCustomS3Bucket(jobDescriptor).orElse(null);\n        String customPrefix = LogStorageInfos.findCustomPathPrefix(jobDescriptor).orElse(null);\n        if (s3BucketInfo == null && customPrefix == null) {\n            metrics.incrementValidationSkipped(ValidatorMetrics.REASON_NOT_APPLICABLE);\n            return Mono.just(Collections.emptySet());\n        }\n\n        String bucketName = s3BucketInfo == null ? defaultBucket : s3BucketInfo.getBucketName();\n        String pathPrefix = LogStorageInfos.buildPathPrefix(\n                customPrefix == null ? defaultPathPrefix : LogStorageInfos.buildPathPrefix(customPrefix, defaultPathPrefix),\n                VALIDATOR_PATH\n        );\n\n        String iamRole = jobDescriptor.getContainer().getSecurityProfile().getIamRole();\n        // This condition should never happen, but we are adding this check here just in case.\n        if (StringExt.isEmpty(iamRole)) {\n            metrics.incrementValidationError(bucketName, REASON_ACCESS_DENIED);\n            return Mono.just(Collections.singleton(new ValidationError(\"iamRole\", \"IAM role not set\")));\n        }\n        iamRole = iamRoleArnResolver.apply(iamRole);\n\n        Mono<Set<ValidationError>> action = validationClient.validateS3BucketAccess(\n                ComputeValidator.S3BucketAccessValidationRequest.newBuilder()\n                        .setBucket(bucketName)\n                        .setBucketPrefix(pathPrefix)\n                        .setIamRole(iamRole)\n                        .build()\n        ).map(result -> {\n            if (result.getResultCase() == ComputeValidator.S3BucketAccessValidationResponse.ResultCase.FAILURES) {\n                List<ValidationFailure> failures = result.getFailures().getFailuresList();\n                if (!failures.isEmpty()) {\n                    metrics.incrementValidationError(bucketName, REASON_ACCESS_DENIED);\n                    return toValidationError(failures);\n                }\n            }\n            metrics.incrementValidationSuccess(bucketName);\n            return Collections.emptySet();\n        });\n        return action.retry(RETRY_COUNT)\n                .onErrorMap(error -> {\n                    logger.warn(\"S3 validation failure: {}\", error.getMessage());\n                    logger.debug(\"Stack trace\", error);\n                    metrics.incrementValidationError(bucketName, error.getClass().getSimpleName());\n\n                    return new IllegalArgumentException(String.format(\"S3 bucket validation error: bucket=%s, pathPrefix=%s, error=%s\",\n                            bucketName,\n                            pathPrefix,\n                            error.getMessage()\n                    ), error);\n                });\n    }", "signature": "Mono<Set<ValidationError>> validate(JobDescriptor jobDescriptor)", "full_signature": "@Override public Mono<Set<ValidationError>> validate(JobDescriptor jobDescriptor)", "class_method_signature": "JobS3LogLocationValidator.validate(JobDescriptor jobDescriptor)", "testcase": false, "constructor": false, "invocations": ["get", "incrementValidationSkipped", "just", "emptySet", "orElse", "findCustomS3Bucket", "orElse", "findCustomPathPrefix", "incrementValidationSkipped", "just", "emptySet", "getBucketName", "buildPathPrefix", "buildPathPrefix", "getIamRole", "getSecurityProfile", "getContainer", "isEmpty", "incrementValidationError", "just", "singleton", "apply", "map", "validateS3BucketAccess", "build", "setIamRole", "setBucketPrefix", "setBucket", "newBuilder", "getResultCase", "getFailuresList", "getFailures", "isEmpty", "incrementValidationError", "toValidationError", "incrementValidationSuccess", "emptySet", "onErrorMap", "retry", "warn", "getMessage", "debug", "incrementValidationError", "getSimpleName", "getClass", "format", "getMessage"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}