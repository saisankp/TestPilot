{"test_class": {"identifier": "ShapeTableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ShapeTable table;", "modifier": "", "type": "ShapeTable", "declarator": "table", "var_name": "table"}], "file": "src/edu/lclark/orego/patterns/ShapeTableTest.java"}, "test_case": {"identifier": "testTigersMouth", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testTigersMouth() {\n\t\t// Playing into a Tiger's mouth should be a terrible idea\n\t\ttable = new ShapeTable(OREGO_ROOT\n\t\t\t\t+ \"patterns/patterns3stones-SHAPE-sf999.data\", 0.999f);\n\t\tBoard board = new Board(9);\n\t\tCoordinateSystem coords = board.getCoordinateSystem();\n\t\tboard.play(\"d5\");\n\t\tboard.pass();\n\t\tboard.play(\"f5\");\n\t\tboard.pass();\n\t\tboard.play(\"e6\");\n\t\t// TODO Should getHash really be a static method?\n\t\tlong hash = PatternFinder.getHash(board, coords.at(\"e5\"), 3, coords.at(\"a1\"));\n\t\t// Note that this test would fail if the last move (a1 above) were changed\n\t\t// to one of the nearby stones, because such a move is so rare that the table\n\t\t// slot would consist entirely of noise.\n\t\tassertTrue(table.getWinRate(hash) < 0.3);\n\t}", "signature": "void testTigersMouth()", "full_signature": "@Test public void testTigersMouth()", "class_method_signature": "ShapeTableTest.testTigersMouth()", "testcase": true, "constructor": false, "invocations": ["getCoordinateSystem", "play", "pass", "play", "pass", "play", "getHash", "at", "at", "assertTrue", "getWinRate"]}, "focal_class": {"identifier": "ShapeTable", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private final float[][] winRateTables;", "modifier": "private final", "type": "float[][]", "declarator": "winRateTables", "var_name": "winRateTables"}, {"original_string": "private float scalingFactor;", "modifier": "private", "type": "float", "declarator": "scalingFactor", "var_name": "scalingFactor"}], "methods": [{"identifier": "ShapeTable", "parameters": "()", "modifiers": "public", "return": "", "signature": " ShapeTable()", "full_signature": "public  ShapeTable()", "class_method_signature": "ShapeTable.ShapeTable()", "testcase": false, "constructor": true}, {"identifier": "ShapeTable", "parameters": "(String filePath, float scalingFactor)", "modifiers": "public", "return": "", "signature": " ShapeTable(String filePath, float scalingFactor)", "full_signature": "public  ShapeTable(String filePath, float scalingFactor)", "class_method_signature": "ShapeTable.ShapeTable(String filePath, float scalingFactor)", "testcase": false, "constructor": true}, {"identifier": "ShapeTable", "parameters": "(float scalingFactor)", "modifiers": "public", "return": "", "signature": " ShapeTable(float scalingFactor)", "full_signature": "public  ShapeTable(float scalingFactor)", "class_method_signature": "ShapeTable.ShapeTable(float scalingFactor)", "testcase": false, "constructor": true}, {"identifier": "getRates", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void getRates()", "full_signature": "public void getRates()", "class_method_signature": "ShapeTable.getRates()", "testcase": false, "constructor": false}, {"identifier": "getScalingFactor", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getScalingFactor()", "full_signature": "public float getScalingFactor()", "class_method_signature": "ShapeTable.getScalingFactor()", "testcase": false, "constructor": false}, {"identifier": "testGetRate", "parameters": "(int index)", "modifiers": "public", "return": "double", "signature": "double testGetRate(int index)", "full_signature": "public double testGetRate(int index)", "class_method_signature": "ShapeTable.testGetRate(int index)", "testcase": false, "constructor": false}, {"identifier": "getWinRateTables", "parameters": "()", "modifiers": "public", "return": "float[][]", "signature": "float[][] getWinRateTables()", "full_signature": "public float[][] getWinRateTables()", "class_method_signature": "ShapeTable.getWinRateTables()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(long hash, boolean win)", "modifiers": "public", "return": "void", "signature": "void update(long hash, boolean win)", "full_signature": "public void update(long hash, boolean win)", "class_method_signature": "ShapeTable.update(long hash, boolean win)", "testcase": false, "constructor": false}, {"identifier": "getWinRate", "parameters": "(long hash)", "modifiers": "public", "return": "float", "signature": "float getWinRate(long hash)", "full_signature": "public float getWinRate(long hash)", "class_method_signature": "ShapeTable.getWinRate(long hash)", "testcase": false, "constructor": false}, {"identifier": "printIndividualWinRates", "parameters": "(long hash)", "modifiers": "public", "return": "void", "signature": "void printIndividualWinRates(long hash)", "full_signature": "public void printIndividualWinRates(long hash)", "class_method_signature": "ShapeTable.printIndividualWinRates(long hash)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/patterns/ShapeTable.java"}, "focal_method": {"identifier": "getWinRate", "parameters": "(long hash)", "modifiers": "public", "return": "float", "body": "public float getWinRate(long hash) {\n\t\tfloat result = 0;\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tint index = (int) (hash >> (21 * i) & 2097151);\n\t\t\tresult += winRateTables[i][index];\n\t\t}\n\t\treturn result / 3;\n\t}", "signature": "float getWinRate(long hash)", "full_signature": "public float getWinRate(long hash)", "class_method_signature": "ShapeTable.getWinRate(long hash)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}