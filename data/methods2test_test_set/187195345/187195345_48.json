{"test_class": {"identifier": "PointAlongLineDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "PointAlongLineDecoder pointAlongLineDecoder = new PointAlongLineDecoder(new LocationReferencePointDecoder());", "modifier": "", "type": "PointAlongLineDecoder", "declarator": "pointAlongLineDecoder = new PointAlongLineDecoder(new LocationReferencePointDecoder())", "var_name": "pointAlongLineDecoder"}], "file": "proto/src/test/java/openlr/proto/decoder/PointAlongLineDecoderTest.java"}, "test_case": {"identifier": "testValidLocationReference", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidLocationReference() throws PhysicalFormatException {\n        Coordinates firstCoordinates = Coordinates.newBuilder()\n                .setLongitude(4)\n                .setLatitude(5)\n                .build();\n\n        LineAttributes firstLineAttributes = LineAttributes.newBuilder()\n                .setBearing(120)\n                .setFrc(FRC.FRC_3)\n                .setFow(FOW.FOW_SLIPROAD)\n                .build();\n\n        PathAttributes firstPathAttributes = PathAttributes.newBuilder()\n                .setDistanceToNext(200)\n                .setLowestFrcAlongPath(FRC.FRC_5)\n                .build();\n\n        LocationReferencePoint first = LocationReferencePoint.newBuilder()\n                .setCoordinates(firstCoordinates)\n                .setLineAttributes(firstLineAttributes)\n                .setPathAttributes(firstPathAttributes)\n                .build();\n\n        Coordinates lastCoordinates = Coordinates.newBuilder()\n                .setLongitude(4.2)\n                .setLatitude(5.2)\n                .build();\n\n        LineAttributes lastLineAttributes = LineAttributes.newBuilder()\n                .setBearing(270)\n                .setFrc(FRC.FRC_1)\n                .setFow(FOW.FOW_MULTIPLE_CARRIAGEWAY)\n                .build();\n\n        LocationReferencePoint last = LocationReferencePoint.newBuilder()\n                .setCoordinates(lastCoordinates)\n                .setLineAttributes(lastLineAttributes)\n                .build();\n\n        PointAlongLineLocationReference pointAlongLineLocationReference = PointAlongLineLocationReference.newBuilder()\n                .setFirst(first)\n                .setLast(last)\n                .setPositiveOffset(20)\n                .setSideOfRoad(openlr.proto.schema.SideOfRoad.SIDE_OF_ROAD_RIGHT)\n                .setOrientation(openlr.proto.schema.Orientation.ORIENTATION_BOTH)\n                .build();\n\n        LocationReferenceData locationReferenceData = LocationReferenceData.newBuilder()\n                .setPointAlongLineLocationReference(pointAlongLineLocationReference)\n                .build();\n\n        RawLocationReference rawLocationReference = pointAlongLineDecoder.decode(\"1\", locationReferenceData);\n\n        assertNotNull(rawLocationReference);\n        assertEquals(rawLocationReference.getID(), \"1\");\n        assertEquals(rawLocationReference.getLocationType(), LocationType.POINT_ALONG_LINE);\n\n        List<openlr.LocationReferencePoint> locationReferencePoints = rawLocationReference.getLocationReferencePoints();\n        assertNotNull(locationReferencePoints);\n        assertEquals(locationReferencePoints.size(), 2);\n\n        openlr.LocationReferencePoint firstLrp = locationReferencePoints.get(0);\n        assertEquals(firstLrp.getLongitudeDeg(), 4);\n        assertEquals(firstLrp.getLatitudeDeg(), 5);\n        assertEquals(firstLrp.getBearing(), 120);\n        assertEquals(firstLrp.getFRC(), FunctionalRoadClass.FRC_3);\n        assertEquals(firstLrp.getFOW(), FormOfWay.SLIPROAD);\n        assertEquals(firstLrp.getDistanceToNext(), 200);\n        assertEquals(firstLrp.getLfrc(), FunctionalRoadClass.FRC_5);\n\n        openlr.LocationReferencePoint lastLrp = locationReferencePoints.get(1);\n        assertEquals(lastLrp.getLongitudeDeg(), 4.2);\n        assertEquals(lastLrp.getLatitudeDeg(), 5.2);\n        assertEquals(lastLrp.getBearing(), 270);\n        assertEquals(lastLrp.getFRC(), FunctionalRoadClass.FRC_1);\n        assertEquals(lastLrp.getFOW(), FormOfWay.MULTIPLE_CARRIAGEWAY);\n\n        Offsets offsets = rawLocationReference.getOffsets();\n        assertNotNull(offsets);\n        assertEquals(offsets.getPositiveOffset(200),20);\n\n        assertEquals(rawLocationReference.getSideOfRoad(), SideOfRoad.RIGHT);\n        assertEquals(rawLocationReference.getOrientation(), Orientation.BOTH);\n    }", "signature": "void testValidLocationReference()", "full_signature": "@Test public void testValidLocationReference()", "class_method_signature": "PointAlongLineDecoderTest.testValidLocationReference()", "testcase": true, "constructor": false, "invocations": ["build", "setLatitude", "setLongitude", "newBuilder", "build", "setFow", "setFrc", "setBearing", "newBuilder", "build", "setLowestFrcAlongPath", "setDistanceToNext", "newBuilder", "build", "setPathAttributes", "setLineAttributes", "setCoordinates", "newBuilder", "build", "setLatitude", "setLongitude", "newBuilder", "build", "setFow", "setFrc", "setBearing", "newBuilder", "build", "setLineAttributes", "setCoordinates", "newBuilder", "build", "setOrientation", "setSideOfRoad", "setPositiveOffset", "setLast", "setFirst", "newBuilder", "build", "setPointAlongLineLocationReference", "newBuilder", "decode", "assertNotNull", "assertEquals", "getID", "assertEquals", "getLocationType", "getLocationReferencePoints", "assertNotNull", "assertEquals", "size", "get", "assertEquals", "getLongitudeDeg", "assertEquals", "getLatitudeDeg", "assertEquals", "getBearing", "assertEquals", "getFRC", "assertEquals", "getFOW", "assertEquals", "getDistanceToNext", "assertEquals", "getLfrc", "get", "assertEquals", "getLongitudeDeg", "assertEquals", "getLatitudeDeg", "assertEquals", "getBearing", "assertEquals", "getFRC", "assertEquals", "getFOW", "getOffsets", "assertNotNull", "assertEquals", "getPositiveOffset", "assertEquals", "getSideOfRoad", "assertEquals", "getOrientation"]}, "focal_class": {"identifier": "PointAlongLineDecoder", "superclass": "", "interfaces": "implements LocationReferenceDecoder", "fields": [{"original_string": "private final LocationReferencePointDecoder locationReferencePointDecoder;", "modifier": "private final", "type": "LocationReferencePointDecoder", "declarator": "locationReferencePointDecoder", "var_name": "locationReferencePointDecoder"}], "methods": [{"identifier": "PointAlongLineDecoder", "parameters": "(LocationReferencePointDecoder locationReferencePointDecoder)", "modifiers": "", "return": "", "signature": " PointAlongLineDecoder(LocationReferencePointDecoder locationReferencePointDecoder)", "full_signature": "  PointAlongLineDecoder(LocationReferencePointDecoder locationReferencePointDecoder)", "class_method_signature": "PointAlongLineDecoder.PointAlongLineDecoder(LocationReferencePointDecoder locationReferencePointDecoder)", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "(String id, LocationReferenceData data)", "modifiers": "@Override public", "return": "RawLocationReference", "signature": "RawLocationReference decode(String id, LocationReferenceData data)", "full_signature": "@Override public RawLocationReference decode(String id, LocationReferenceData data)", "class_method_signature": "PointAlongLineDecoder.decode(String id, LocationReferenceData data)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(openlr.proto.schema.SideOfRoad sideOfRoad)", "modifiers": "private", "return": "SideOfRoad", "signature": "SideOfRoad map(openlr.proto.schema.SideOfRoad sideOfRoad)", "full_signature": "private SideOfRoad map(openlr.proto.schema.SideOfRoad sideOfRoad)", "class_method_signature": "PointAlongLineDecoder.map(openlr.proto.schema.SideOfRoad sideOfRoad)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(openlr.proto.schema.Orientation orientation)", "modifiers": "private", "return": "Orientation", "signature": "Orientation map(openlr.proto.schema.Orientation orientation)", "full_signature": "private Orientation map(openlr.proto.schema.Orientation orientation)", "class_method_signature": "PointAlongLineDecoder.map(openlr.proto.schema.Orientation orientation)", "testcase": false, "constructor": false}], "file": "proto/src/main/java/openlr/proto/decoder/PointAlongLineDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(String id, LocationReferenceData data)", "modifiers": "@Override public", "return": "RawLocationReference", "body": "@Override\n    public RawLocationReference decode(String id, LocationReferenceData data) throws OpenLRProtoException {\n        if (!data.hasPointAlongLineLocationReference()) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.MISSING_LOCATION_REFERENCE);\n        }\n\n        PointAlongLineLocationReference pointAlongLineLocationReference = data.getPointAlongLineLocationReference();\n\n        if (!pointAlongLineLocationReference.hasFirst()) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);\n        }\n\n        LocationReferencePoint first = locationReferencePointDecoder.decode(\n                pointAlongLineLocationReference.getFirst(), 1, false);\n\n        if (!pointAlongLineLocationReference.hasLast()) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);\n        }\n\n        LocationReferencePoint last = locationReferencePointDecoder.decode(\n                pointAlongLineLocationReference.getLast(), 2, true);\n\n        Offsets offsets = new OffsetsProtoImpl(pointAlongLineLocationReference.getPositiveOffset());\n\n        SideOfRoad sideOfRoad = map(pointAlongLineLocationReference.getSideOfRoad());\n        Orientation orientation = map(pointAlongLineLocationReference.getOrientation());\n\n        return new RawPointAlongLocRef(id, first, last, offsets, sideOfRoad, orientation);\n    }", "signature": "RawLocationReference decode(String id, LocationReferenceData data)", "full_signature": "@Override public RawLocationReference decode(String id, LocationReferenceData data)", "class_method_signature": "PointAlongLineDecoder.decode(String id, LocationReferenceData data)", "testcase": false, "constructor": false, "invocations": ["hasPointAlongLineLocationReference", "getPointAlongLineLocationReference", "hasFirst", "decode", "getFirst", "hasLast", "decode", "getLast", "getPositiveOffset", "map", "getSideOfRoad", "map", "getOrientation"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}