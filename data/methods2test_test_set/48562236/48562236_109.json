{"test_class": {"identifier": "NodeTest", "superclass": "", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/jsoup/nodes/NodeTest.java"}, "test_case": {"identifier": "handleAbsOnFileUris", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void handleAbsOnFileUris() {\n        Document doc = Jsoup.parse(\"<a href='password'>One/a><a href='/var/log/messages'>Two</a>\", \"file:/etc/\");\n        Element one = doc.select(\"a\").first();\n        assertEquals(\"file:/etc/password\", one.absUrl(\"href\"));\n        Element two = doc.select(\"a\").get(1);\n        assertEquals(\"file:/var/log/messages\", two.absUrl(\"href\"));\n    }", "signature": "void handleAbsOnFileUris()", "full_signature": "@Test public void handleAbsOnFileUris()", "class_method_signature": "NodeTest.handleAbsOnFileUris()", "testcase": true, "constructor": false, "invocations": ["parse", "first", "select", "assertEquals", "absUrl", "get", "select", "assertEquals", "absUrl"]}, "focal_class": {"identifier": "Node", "superclass": "", "interfaces": "implements Cloneable", "fields": [{"original_string": "Node parentNode;", "modifier": "", "type": "Node", "declarator": "parentNode", "var_name": "parentNode"}, {"original_string": "List<Node> childNodes;", "modifier": "", "type": "List<Node>", "declarator": "childNodes", "var_name": "childNodes"}, {"original_string": "Attributes attributes;", "modifier": "", "type": "Attributes", "declarator": "attributes", "var_name": "attributes"}, {"original_string": "String baseUri;", "modifier": "", "type": "String", "declarator": "baseUri", "var_name": "baseUri"}, {"original_string": "int siblingIndex;", "modifier": "", "type": "int", "declarator": "siblingIndex", "var_name": "siblingIndex"}], "methods": [{"identifier": "Node", "parameters": "(String baseUri, Attributes attributes)", "modifiers": "protected", "return": "", "signature": " Node(String baseUri, Attributes attributes)", "full_signature": "protected  Node(String baseUri, Attributes attributes)", "class_method_signature": "Node.Node(String baseUri, Attributes attributes)", "testcase": false, "constructor": true}, {"identifier": "Node", "parameters": "(String baseUri)", "modifiers": "protected", "return": "", "signature": " Node(String baseUri)", "full_signature": "protected  Node(String baseUri)", "class_method_signature": "Node.Node(String baseUri)", "testcase": false, "constructor": true}, {"identifier": "Node", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Node()", "full_signature": "protected  Node()", "class_method_signature": "Node.Node()", "testcase": false, "constructor": true}, {"identifier": "nodeName", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String nodeName()", "full_signature": "public abstract String nodeName()", "class_method_signature": "Node.nodeName()", "testcase": false, "constructor": false}, {"identifier": "attr", "parameters": "(String attributeKey)", "modifiers": "public", "return": "String", "signature": "String attr(String attributeKey)", "full_signature": "public String attr(String attributeKey)", "class_method_signature": "Node.attr(String attributeKey)", "testcase": false, "constructor": false}, {"identifier": "attributes", "parameters": "()", "modifiers": "public", "return": "Attributes", "signature": "Attributes attributes()", "full_signature": "public Attributes attributes()", "class_method_signature": "Node.attributes()", "testcase": false, "constructor": false}, {"identifier": "attr", "parameters": "(String attributeKey, String attributeValue)", "modifiers": "public", "return": "Node", "signature": "Node attr(String attributeKey, String attributeValue)", "full_signature": "public Node attr(String attributeKey, String attributeValue)", "class_method_signature": "Node.attr(String attributeKey, String attributeValue)", "testcase": false, "constructor": false}, {"identifier": "hasAttr", "parameters": "(String attributeKey)", "modifiers": "public", "return": "boolean", "signature": "boolean hasAttr(String attributeKey)", "full_signature": "public boolean hasAttr(String attributeKey)", "class_method_signature": "Node.hasAttr(String attributeKey)", "testcase": false, "constructor": false}, {"identifier": "removeAttr", "parameters": "(String attributeKey)", "modifiers": "public", "return": "Node", "signature": "Node removeAttr(String attributeKey)", "full_signature": "public Node removeAttr(String attributeKey)", "class_method_signature": "Node.removeAttr(String attributeKey)", "testcase": false, "constructor": false}, {"identifier": "baseUri", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String baseUri()", "full_signature": "public String baseUri()", "class_method_signature": "Node.baseUri()", "testcase": false, "constructor": false}, {"identifier": "setBaseUri", "parameters": "(final String baseUri)", "modifiers": "public", "return": "void", "signature": "void setBaseUri(final String baseUri)", "full_signature": "public void setBaseUri(final String baseUri)", "class_method_signature": "Node.setBaseUri(final String baseUri)", "testcase": false, "constructor": false}, {"identifier": "absUrl", "parameters": "(String attributeKey)", "modifiers": "public", "return": "String", "signature": "String absUrl(String attributeKey)", "full_signature": "public String absUrl(String attributeKey)", "class_method_signature": "Node.absUrl(String attributeKey)", "testcase": false, "constructor": false}, {"identifier": "childNode", "parameters": "(int index)", "modifiers": "public", "return": "Node", "signature": "Node childNode(int index)", "full_signature": "public Node childNode(int index)", "class_method_signature": "Node.childNode(int index)", "testcase": false, "constructor": false}, {"identifier": "childNodes", "parameters": "()", "modifiers": "public", "return": "List<Node>", "signature": "List<Node> childNodes()", "full_signature": "public List<Node> childNodes()", "class_method_signature": "Node.childNodes()", "testcase": false, "constructor": false}, {"identifier": "childNodesCopy", "parameters": "()", "modifiers": "public", "return": "List<Node>", "signature": "List<Node> childNodesCopy()", "full_signature": "public List<Node> childNodesCopy()", "class_method_signature": "Node.childNodesCopy()", "testcase": false, "constructor": false}, {"identifier": "childNodeSize", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int childNodeSize()", "full_signature": "public final int childNodeSize()", "class_method_signature": "Node.childNodeSize()", "testcase": false, "constructor": false}, {"identifier": "childNodesAsArray", "parameters": "()", "modifiers": "protected", "return": "Node[]", "signature": "Node[] childNodesAsArray()", "full_signature": "protected Node[] childNodesAsArray()", "class_method_signature": "Node.childNodesAsArray()", "testcase": false, "constructor": false}, {"identifier": "parent", "parameters": "()", "modifiers": "public", "return": "Node", "signature": "Node parent()", "full_signature": "public Node parent()", "class_method_signature": "Node.parent()", "testcase": false, "constructor": false}, {"identifier": "parentNode", "parameters": "()", "modifiers": "public final", "return": "Node", "signature": "Node parentNode()", "full_signature": "public final Node parentNode()", "class_method_signature": "Node.parentNode()", "testcase": false, "constructor": false}, {"identifier": "ownerDocument", "parameters": "()", "modifiers": "public", "return": "Document", "signature": "Document ownerDocument()", "full_signature": "public Document ownerDocument()", "class_method_signature": "Node.ownerDocument()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void remove()", "full_signature": "public void remove()", "class_method_signature": "Node.remove()", "testcase": false, "constructor": false}, {"identifier": "before", "parameters": "(String html)", "modifiers": "public", "return": "Node", "signature": "Node before(String html)", "full_signature": "public Node before(String html)", "class_method_signature": "Node.before(String html)", "testcase": false, "constructor": false}, {"identifier": "before", "parameters": "(Node node)", "modifiers": "public", "return": "Node", "signature": "Node before(Node node)", "full_signature": "public Node before(Node node)", "class_method_signature": "Node.before(Node node)", "testcase": false, "constructor": false}, {"identifier": "after", "parameters": "(String html)", "modifiers": "public", "return": "Node", "signature": "Node after(String html)", "full_signature": "public Node after(String html)", "class_method_signature": "Node.after(String html)", "testcase": false, "constructor": false}, {"identifier": "after", "parameters": "(Node node)", "modifiers": "public", "return": "Node", "signature": "Node after(Node node)", "full_signature": "public Node after(Node node)", "class_method_signature": "Node.after(Node node)", "testcase": false, "constructor": false}, {"identifier": "addSiblingHtml", "parameters": "(int index, String html)", "modifiers": "private", "return": "void", "signature": "void addSiblingHtml(int index, String html)", "full_signature": "private void addSiblingHtml(int index, String html)", "class_method_signature": "Node.addSiblingHtml(int index, String html)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(String html)", "modifiers": "public", "return": "Node", "signature": "Node wrap(String html)", "full_signature": "public Node wrap(String html)", "class_method_signature": "Node.wrap(String html)", "testcase": false, "constructor": false}, {"identifier": "unwrap", "parameters": "()", "modifiers": "public", "return": "Node", "signature": "Node unwrap()", "full_signature": "public Node unwrap()", "class_method_signature": "Node.unwrap()", "testcase": false, "constructor": false}, {"identifier": "getDeepChild", "parameters": "(Element el)", "modifiers": "private", "return": "Element", "signature": "Element getDeepChild(Element el)", "full_signature": "private Element getDeepChild(Element el)", "class_method_signature": "Node.getDeepChild(Element el)", "testcase": false, "constructor": false}, {"identifier": "replaceWith", "parameters": "(Node in)", "modifiers": "public", "return": "void", "signature": "void replaceWith(Node in)", "full_signature": "public void replaceWith(Node in)", "class_method_signature": "Node.replaceWith(Node in)", "testcase": false, "constructor": false}, {"identifier": "setParentNode", "parameters": "(Node parentNode)", "modifiers": "protected", "return": "void", "signature": "void setParentNode(Node parentNode)", "full_signature": "protected void setParentNode(Node parentNode)", "class_method_signature": "Node.setParentNode(Node parentNode)", "testcase": false, "constructor": false}, {"identifier": "replaceChild", "parameters": "(Node out, Node in)", "modifiers": "protected", "return": "void", "signature": "void replaceChild(Node out, Node in)", "full_signature": "protected void replaceChild(Node out, Node in)", "class_method_signature": "Node.replaceChild(Node out, Node in)", "testcase": false, "constructor": false}, {"identifier": "removeChild", "parameters": "(Node out)", "modifiers": "protected", "return": "void", "signature": "void removeChild(Node out)", "full_signature": "protected void removeChild(Node out)", "class_method_signature": "Node.removeChild(Node out)", "testcase": false, "constructor": false}, {"identifier": "addChildren", "parameters": "(Node... children)", "modifiers": "protected", "return": "void", "signature": "void addChildren(Node... children)", "full_signature": "protected void addChildren(Node... children)", "class_method_signature": "Node.addChildren(Node... children)", "testcase": false, "constructor": false}, {"identifier": "addChildren", "parameters": "(int index, Node... children)", "modifiers": "protected", "return": "void", "signature": "void addChildren(int index, Node... children)", "full_signature": "protected void addChildren(int index, Node... children)", "class_method_signature": "Node.addChildren(int index, Node... children)", "testcase": false, "constructor": false}, {"identifier": "reparentChild", "parameters": "(Node child)", "modifiers": "private", "return": "void", "signature": "void reparentChild(Node child)", "full_signature": "private void reparentChild(Node child)", "class_method_signature": "Node.reparentChild(Node child)", "testcase": false, "constructor": false}, {"identifier": "reindexChildren", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void reindexChildren()", "full_signature": "private void reindexChildren()", "class_method_signature": "Node.reindexChildren()", "testcase": false, "constructor": false}, {"identifier": "siblingNodes", "parameters": "()", "modifiers": "public", "return": "List<Node>", "signature": "List<Node> siblingNodes()", "full_signature": "public List<Node> siblingNodes()", "class_method_signature": "Node.siblingNodes()", "testcase": false, "constructor": false}, {"identifier": "nextSibling", "parameters": "()", "modifiers": "public", "return": "Node", "signature": "Node nextSibling()", "full_signature": "public Node nextSibling()", "class_method_signature": "Node.nextSibling()", "testcase": false, "constructor": false}, {"identifier": "previousSibling", "parameters": "()", "modifiers": "public", "return": "Node", "signature": "Node previousSibling()", "full_signature": "public Node previousSibling()", "class_method_signature": "Node.previousSibling()", "testcase": false, "constructor": false}, {"identifier": "siblingIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int siblingIndex()", "full_signature": "public int siblingIndex()", "class_method_signature": "Node.siblingIndex()", "testcase": false, "constructor": false}, {"identifier": "setSiblingIndex", "parameters": "(int siblingIndex)", "modifiers": "protected", "return": "void", "signature": "void setSiblingIndex(int siblingIndex)", "full_signature": "protected void setSiblingIndex(int siblingIndex)", "class_method_signature": "Node.setSiblingIndex(int siblingIndex)", "testcase": false, "constructor": false}, {"identifier": "traverse", "parameters": "(NodeVisitor nodeVisitor)", "modifiers": "public", "return": "Node", "signature": "Node traverse(NodeVisitor nodeVisitor)", "full_signature": "public Node traverse(NodeVisitor nodeVisitor)", "class_method_signature": "Node.traverse(NodeVisitor nodeVisitor)", "testcase": false, "constructor": false}, {"identifier": "outerHtml", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String outerHtml()", "full_signature": "public String outerHtml()", "class_method_signature": "Node.outerHtml()", "testcase": false, "constructor": false}, {"identifier": "outerHtml", "parameters": "(StringBuilder accum)", "modifiers": "protected", "return": "void", "signature": "void outerHtml(StringBuilder accum)", "full_signature": "protected void outerHtml(StringBuilder accum)", "class_method_signature": "Node.outerHtml(StringBuilder accum)", "testcase": false, "constructor": false}, {"identifier": "getOutputSettings", "parameters": "()", "modifiers": "private", "return": "Document.OutputSettings", "signature": "Document.OutputSettings getOutputSettings()", "full_signature": "private Document.OutputSettings getOutputSettings()", "class_method_signature": "Node.getOutputSettings()", "testcase": false, "constructor": false}, {"identifier": "outerHtmlHead", "parameters": "(StringBuilder accum, int depth, Document.OutputSettings out)", "modifiers": "abstract", "return": "void", "signature": "void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out)", "full_signature": "abstract void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out)", "class_method_signature": "Node.outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out)", "testcase": false, "constructor": false}, {"identifier": "outerHtmlTail", "parameters": "(StringBuilder accum, int depth, Document.OutputSettings out)", "modifiers": "abstract", "return": "void", "signature": "void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out)", "full_signature": "abstract void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out)", "class_method_signature": "Node.outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Node.toString()", "testcase": false, "constructor": false}, {"identifier": "indent", "parameters": "(StringBuilder accum, int depth, Document.OutputSettings out)", "modifiers": "protected", "return": "void", "signature": "void indent(StringBuilder accum, int depth, Document.OutputSettings out)", "full_signature": "protected void indent(StringBuilder accum, int depth, Document.OutputSettings out)", "class_method_signature": "Node.indent(StringBuilder accum, int depth, Document.OutputSettings out)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Node.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Node.hashCode()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Node", "signature": "Node clone()", "full_signature": "@Override public Node clone()", "class_method_signature": "Node.clone()", "testcase": false, "constructor": false}, {"identifier": "doClone", "parameters": "(Node parent)", "modifiers": "protected", "return": "Node", "signature": "Node doClone(Node parent)", "full_signature": "protected Node doClone(Node parent)", "class_method_signature": "Node.doClone(Node parent)", "testcase": false, "constructor": false}], "file": "base/lang/src/main/java/leap/lang/jsoup/nodes/Node.java"}, "focal_method": {"identifier": "absUrl", "parameters": "(String attributeKey)", "modifiers": "public", "return": "String", "body": "public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n                if (relUrl.startsWith(\"?\"))\n                    relUrl = base.getPath() + relUrl;\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }", "signature": "String absUrl(String attributeKey)", "full_signature": "public String absUrl(String attributeKey)", "class_method_signature": "Node.absUrl(String attributeKey)", "testcase": false, "constructor": false, "invocations": ["notEmpty", "attr", "hasAttr", "toExternalForm", "startsWith", "getPath", "toExternalForm"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}