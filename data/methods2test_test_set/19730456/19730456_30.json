{"test_class": {"identifier": "BIUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/util/BIUtilTest.java"}, "test_case": {"identifier": "testIsIn20PercentRange", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsIn20PercentRange() {\n\n        assertTrue(isIn20PercentRange(BigInteger.valueOf(20000), BigInteger.valueOf(24000)));\n\n        assertTrue(isIn20PercentRange(BigInteger.valueOf(24000), BigInteger.valueOf(20000)));\n\n        assertFalse(isIn20PercentRange(BigInteger.valueOf(20000), BigInteger.valueOf(25000)));\n\n        assertTrue(isIn20PercentRange(BigInteger.valueOf(20), BigInteger.valueOf(24)));\n\n        assertTrue(isIn20PercentRange(BigInteger.valueOf(24), BigInteger.valueOf(20)));\n\n        assertFalse(isIn20PercentRange(BigInteger.valueOf(20), BigInteger.valueOf(25)));\n\n        assertTrue(isIn20PercentRange(BigInteger.ZERO, BigInteger.ZERO));\n\n        assertFalse(isIn20PercentRange(BigInteger.ZERO, BigInteger.ONE));\n\n        assertTrue(isIn20PercentRange(BigInteger.ONE, BigInteger.ZERO));\n    }", "signature": "void testIsIn20PercentRange()", "full_signature": "@Test public void testIsIn20PercentRange()", "class_method_signature": "BIUtilTest.testIsIn20PercentRange()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isIn20PercentRange", "valueOf", "valueOf", "assertTrue", "isIn20PercentRange", "valueOf", "valueOf", "assertFalse", "isIn20PercentRange", "valueOf", "valueOf", "assertTrue", "isIn20PercentRange", "valueOf", "valueOf", "assertTrue", "isIn20PercentRange", "valueOf", "valueOf", "assertFalse", "isIn20PercentRange", "valueOf", "valueOf", "assertTrue", "isIn20PercentRange", "assertFalse", "isIn20PercentRange", "assertTrue", "isIn20PercentRange"]}, "focal_class": {"identifier": "BIUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "isZero", "parameters": "(BigInteger value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isZero(BigInteger value)", "full_signature": "public static boolean isZero(BigInteger value)", "class_method_signature": "BIUtil.isZero(BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "isEqual", "parameters": "(BigInteger valueA, BigInteger valueB)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEqual(BigInteger valueA, BigInteger valueB)", "full_signature": "public static boolean isEqual(BigInteger valueA, BigInteger valueB)", "class_method_signature": "BIUtil.isEqual(BigInteger valueA, BigInteger valueB)", "testcase": false, "constructor": false}, {"identifier": "isNotEqual", "parameters": "(BigInteger valueA, BigInteger valueB)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEqual(BigInteger valueA, BigInteger valueB)", "full_signature": "public static boolean isNotEqual(BigInteger valueA, BigInteger valueB)", "class_method_signature": "BIUtil.isNotEqual(BigInteger valueA, BigInteger valueB)", "testcase": false, "constructor": false}, {"identifier": "isLessThan", "parameters": "(BigInteger valueA, BigInteger valueB)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLessThan(BigInteger valueA, BigInteger valueB)", "full_signature": "public static boolean isLessThan(BigInteger valueA, BigInteger valueB)", "class_method_signature": "BIUtil.isLessThan(BigInteger valueA, BigInteger valueB)", "testcase": false, "constructor": false}, {"identifier": "isMoreThan", "parameters": "(BigInteger valueA, BigInteger valueB)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMoreThan(BigInteger valueA, BigInteger valueB)", "full_signature": "public static boolean isMoreThan(BigInteger valueA, BigInteger valueB)", "class_method_signature": "BIUtil.isMoreThan(BigInteger valueA, BigInteger valueB)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(BigInteger valueA, BigInteger valueB)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger sum(BigInteger valueA, BigInteger valueB)", "full_signature": "public static BigInteger sum(BigInteger valueA, BigInteger valueB)", "class_method_signature": "BIUtil.sum(BigInteger valueA, BigInteger valueB)", "testcase": false, "constructor": false}, {"identifier": "toBI", "parameters": "(byte[] data)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger toBI(byte[] data)", "full_signature": "public static BigInteger toBI(byte[] data)", "class_method_signature": "BIUtil.toBI(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "toBI", "parameters": "(long data)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger toBI(long data)", "full_signature": "public static BigInteger toBI(long data)", "class_method_signature": "BIUtil.toBI(long data)", "testcase": false, "constructor": false}, {"identifier": "isPositive", "parameters": "(BigInteger value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPositive(BigInteger value)", "full_signature": "public static boolean isPositive(BigInteger value)", "class_method_signature": "BIUtil.isPositive(BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "isCovers", "parameters": "(BigInteger covers, BigInteger value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCovers(BigInteger covers, BigInteger value)", "full_signature": "public static boolean isCovers(BigInteger covers, BigInteger value)", "class_method_signature": "BIUtil.isCovers(BigInteger covers, BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "isNotCovers", "parameters": "(BigInteger covers, BigInteger value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotCovers(BigInteger covers, BigInteger value)", "full_signature": "public static boolean isNotCovers(BigInteger covers, BigInteger value)", "class_method_signature": "BIUtil.isNotCovers(BigInteger covers, BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "transfer", "parameters": "(Repository repository, byte[] fromAddr, byte[] toAddr, BigInteger value)", "modifiers": "public static", "return": "void", "signature": "void transfer(Repository repository, byte[] fromAddr, byte[] toAddr, BigInteger value)", "full_signature": "public static void transfer(Repository repository, byte[] fromAddr, byte[] toAddr, BigInteger value)", "class_method_signature": "BIUtil.transfer(Repository repository, byte[] fromAddr, byte[] toAddr, BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "exitLong", "parameters": "(BigInteger value)", "modifiers": "public static", "return": "boolean", "signature": "boolean exitLong(BigInteger value)", "full_signature": "public static boolean exitLong(BigInteger value)", "class_method_signature": "BIUtil.exitLong(BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "isIn20PercentRange", "parameters": "(BigInteger first, BigInteger second)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIn20PercentRange(BigInteger first, BigInteger second)", "full_signature": "public static boolean isIn20PercentRange(BigInteger first, BigInteger second)", "class_method_signature": "BIUtil.isIn20PercentRange(BigInteger first, BigInteger second)", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "(BigInteger first, BigInteger second)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger max(BigInteger first, BigInteger second)", "full_signature": "public static BigInteger max(BigInteger first, BigInteger second)", "class_method_signature": "BIUtil.max(BigInteger first, BigInteger second)", "testcase": false, "constructor": false}, {"identifier": "addSafely", "parameters": "(int a, int b)", "modifiers": "public static", "return": "int", "signature": "int addSafely(int a, int b)", "full_signature": "public static int addSafely(int a, int b)", "class_method_signature": "BIUtil.addSafely(int a, int b)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/util/BIUtil.java"}, "focal_method": {"identifier": "isIn20PercentRange", "parameters": "(BigInteger first, BigInteger second)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isIn20PercentRange(BigInteger first, BigInteger second) {\n        BigInteger five = BigInteger.valueOf(5);\n        BigInteger limit = first.add(first.divide(five));\n        return !isMoreThan(second, limit);\n    }", "signature": "boolean isIn20PercentRange(BigInteger first, BigInteger second)", "full_signature": "public static boolean isIn20PercentRange(BigInteger first, BigInteger second)", "class_method_signature": "BIUtil.isIn20PercentRange(BigInteger first, BigInteger second)", "testcase": false, "constructor": false, "invocations": ["valueOf", "add", "divide", "isMoreThan"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}