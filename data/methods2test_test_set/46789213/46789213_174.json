{"test_class": {"identifier": "TestModulusFinder", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestModulusFinder.java"}, "test_case": {"identifier": "testFindSuitableWrongBitLength", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void testFindSuitableWrongBitLength() {\n    ModulusFinder.findSuitableModulus(150);\n  }", "signature": "void testFindSuitableWrongBitLength()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testFindSuitableWrongBitLength()", "class_method_signature": "TestModulusFinder.testFindSuitableWrongBitLength()", "testcase": true, "constructor": false, "invocations": ["findSuitableModulus"]}, "focal_class": {"identifier": "ModulusFinder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final HashMap<Integer, BigInteger> precomputed = new HashMap<>();", "modifier": "private static final", "type": "HashMap<Integer, BigInteger>", "declarator": "precomputed = new HashMap<>()", "var_name": "precomputed"}, {"original_string": "private static final BigInteger TWO = BigInteger.valueOf(2);", "modifier": "private static final", "type": "BigInteger", "declarator": "TWO = BigInteger.valueOf(2)", "var_name": "TWO"}, {"original_string": "private static final BigInteger THREE = BigInteger.valueOf(3);", "modifier": "private static final", "type": "BigInteger", "declarator": "THREE = BigInteger.valueOf(3)", "var_name": "THREE"}, {"original_string": "private static final int CERTAINTY = 1024;", "modifier": "private static final", "type": "int", "declarator": "CERTAINTY = 1024", "var_name": "CERTAINTY"}], "methods": [{"identifier": "ModulusFinder", "parameters": "()", "modifiers": "private", "return": "", "signature": " ModulusFinder()", "full_signature": "private  ModulusFinder()", "class_method_signature": "ModulusFinder.ModulusFinder()", "testcase": false, "constructor": true}, {"identifier": "areCoprime", "parameters": "(BigInteger a, BigInteger b)", "modifiers": "private static", "return": "boolean", "signature": "boolean areCoprime(BigInteger a, BigInteger b)", "full_signature": "private static boolean areCoprime(BigInteger a, BigInteger b)", "class_method_signature": "ModulusFinder.areCoprime(BigInteger a, BigInteger b)", "testcase": false, "constructor": false}, {"identifier": "compute", "parameters": "(int modBitLength)", "modifiers": "private static", "return": "BigInteger", "signature": "BigInteger compute(int modBitLength)", "full_signature": "private static BigInteger compute(int modBitLength)", "class_method_signature": "ModulusFinder.compute(int modBitLength)", "testcase": false, "constructor": false}, {"identifier": "findSuitableModulus", "parameters": "(int modBitLength)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger findSuitableModulus(int modBitLength)", "full_signature": "public static BigInteger findSuitableModulus(int modBitLength)", "class_method_signature": "ModulusFinder.findSuitableModulus(int modBitLength)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/ModulusFinder.java"}, "focal_method": {"identifier": "findSuitableModulus", "parameters": "(int modBitLength)", "modifiers": "public static", "return": "BigInteger", "body": "public static BigInteger findSuitableModulus(int modBitLength) {\n    if (modBitLength % 8 != 0) {\n      throw new IllegalArgumentException(\"Bit length must be divisible by 8\");\n    }\n    if (precomputed.containsKey(modBitLength)) {\n      return precomputed.get(modBitLength);\n    } else {\n      return compute(modBitLength);\n    }\n  }", "signature": "BigInteger findSuitableModulus(int modBitLength)", "full_signature": "public static BigInteger findSuitableModulus(int modBitLength)", "class_method_signature": "ModulusFinder.findSuitableModulus(int modBitLength)", "testcase": false, "constructor": false, "invocations": ["containsKey", "get", "compute"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}