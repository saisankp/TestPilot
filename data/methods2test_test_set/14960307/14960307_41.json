{"test_class": {"identifier": "TMobileNlGSMCharsetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TMobileNlGSMCharsetTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TMobileNlGSMCharsetTest.class)", "var_name": "logger"}], "file": "ch-commons-charset/src/test/java/com/cloudhopper/commons/charset/TMobileNlGSMCharsetTest.java"}, "test_case": {"identifier": "canRepresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void canRepresent() throws Exception {\n        // nulls are always ok\n        Assert.assertEquals(true, TMobileNlGSMCharset.canRepresent(null));\n        Assert.assertEquals(true, TMobileNlGSMCharset.canRepresent(\" \"));\n        Assert.assertEquals(true, TMobileNlGSMCharset.canRepresent(\"\\n\\r\"));\n        Assert.assertEquals(true, TMobileNlGSMCharset.canRepresent(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"));\n        Assert.assertEquals(true, TMobileNlGSMCharset.canRepresent(\"Hello @ World\"));\n        Assert.assertEquals(true, TMobileNlGSMCharset.canRepresent(\"$_\"));\n        // euro currency symbol is good\n        Assert.assertEquals(true, TMobileNlGSMCharset.canRepresent(\"\\u20ac\"));\n        // arabic char is not valid TMobileNlGSM char\n        Assert.assertEquals(false, TMobileNlGSMCharset.canRepresent(\"\\u0623\"));\n        // '`' char is NOT in the TMobileNlGSM charset\n        Assert.assertEquals(false, TMobileNlGSMCharset.canRepresent(\"`\"));\n        // []{}^~|\\ GSM extended table chars are not supported by T-Mo NL\n        Assert.assertEquals(false, TMobileNlGSMCharset.canRepresent(\"{}[\\\\]^~|\"));\n        \n        // create a fully correct string from lookup table\n        // strings to decode/encode to/from UTF-8\n        // build a string of every GSM base-table char\n        StringBuilder s = new StringBuilder();\n        for (int i = 0; i < GSMCharset.CHAR_TABLE.length; i++) {\n            char c = GSMCharset.CHAR_TABLE[i];\n            if (c > 0) {\n                s.append(c);\n            }\n        }\n        s.append(\"\\u20ac\");  // and the euro-mark\n        \n        Assert.assertEquals(true, TMobileNlGSMCharset.canRepresent(s.toString()));\n    }", "signature": "void canRepresent()", "full_signature": "@Test public void canRepresent()", "class_method_signature": "TMobileNlGSMCharsetTest.canRepresent()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "canRepresent", "assertEquals", "canRepresent", "assertEquals", "canRepresent", "assertEquals", "canRepresent", "assertEquals", "canRepresent", "assertEquals", "canRepresent", "assertEquals", "canRepresent", "assertEquals", "canRepresent", "assertEquals", "canRepresent", "assertEquals", "canRepresent", "append", "append", "assertEquals", "canRepresent", "toString"]}, "focal_class": {"identifier": "TMobileNlGSMCharset", "superclass": "extends GSMCharset", "interfaces": "", "fields": [{"original_string": "static final int TMO_EURO_BYTE = 0x80;", "modifier": "static final", "type": "int", "declarator": "TMO_EURO_BYTE = 0x80", "var_name": "TMO_EURO_BYTE"}, {"original_string": "static final char EURO_MARK = '\\u20AC';", "modifier": "static final", "type": "char", "declarator": "EURO_MARK = '\\u20AC'", "var_name": "EURO_MARK"}], "methods": [{"identifier": "canRepresent", "parameters": "(CharSequence str0)", "modifiers": "static public", "return": "boolean", "signature": "boolean canRepresent(CharSequence str0)", "full_signature": "static public boolean canRepresent(CharSequence str0)", "class_method_signature": "TMobileNlGSMCharset.canRepresent(CharSequence str0)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(CharSequence str0)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] encode(CharSequence str0)", "full_signature": "@Override public byte[] encode(CharSequence str0)", "class_method_signature": "TMobileNlGSMCharset.encode(CharSequence str0)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(byte[] bytes, StringBuilder buffer)", "modifiers": "@Override public", "return": "void", "signature": "void decode(byte[] bytes, StringBuilder buffer)", "full_signature": "@Override public void decode(byte[] bytes, StringBuilder buffer)", "class_method_signature": "TMobileNlGSMCharset.decode(byte[] bytes, StringBuilder buffer)", "testcase": false, "constructor": false}], "file": "ch-commons-charset/src/main/java/com/cloudhopper/commons/charset/TMobileNlGSMCharset.java"}, "focal_method": {"identifier": "canRepresent", "parameters": "(CharSequence str0)", "modifiers": "static public", "return": "boolean", "body": "static public boolean canRepresent(CharSequence str0) {\n        if (str0 == null) {\n            return true;\n        }\n\n        int len = str0.length();\n        for (int i = 0; i < len; i++) {\n            // get the char in this string\n            char c = str0.charAt(i);\n            // simple range checks for most common characters (0x20 -> 0x5A) or (0x61 -> 0x7A)\n            if ((c >= ' ' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n                continue;\n            } else {\n                // 10X more efficient using a switch statement vs. a lookup table search\n                switch (c) {\n                    case '_':\t\n                    case '\\u00A3':\t// \u00a3\n                    case '\\u00A5':\t// \u00a5\n                    case '\\u00E8':\t// \u00e8\n                    case '\\u00E9':\t// \u00e9\n                    case '\\u00F9':\t// \u00f9\n                    case '\\u00EC':\t// \u00ec\n                    case '\\u00F2':\t// \u00f2\n                    case '\\u00C7':\t// \u00c7\n                    case '\\n':          // newline\n                    case '\\u00D8':\t// \u00d8\n                    case '\\u00F8':\t// \u00f8\n                    case '\\r':          // carriage return\n                    case '\\u00C5':\t// \u00c5\n                    case '\\u00E5':\t// \u00e5\n                    case '\\u0394':\t// \u0394\n                    case '\\u03A6':\t// \u03a6\n                    case '\\u0393':\t// \u0393\n                    case '\\u039B':\t// \u039b\n                    case '\\u03A9':\t// \u03a9\n                    case '\\u03A0':\t// \u03a0\n                    case '\\u03A8':\t// \u03a8\n                    case '\\u03A3':\t// \u03a3\n                    case '\\u0398':\t// \u0398\n                    case '\\u039E':\t// \u039e\n                    case '\\u00C6':\t// \u00c6\n                    case '\\u00E6':\t// \u00e6\n                    case '\\u00DF':\t// \u00df\n                    case '\\u00C9':\t// \u00c9\n                    case '\\u00A4':\t// \u00a4\n                    case '\\u00A1':\t// \u00a1\n                    case '\\u00C4':\t// \u00c4\n                    case '\\u00D6':\t// \u00d6\n                    case '\\u00D1':\t// \u00d1\n                    case '\\u00DC':\t// \u00dc\n                    case '\\u00A7':\t// \u00a7\n                    case '\\u00BF':\t// \u00bf\n                    case '\\u00E4':\t// \u00e4\n                    case '\\u00F6':\t// \u00f6\n                    case '\\u00F1':\t// \u00f1\n                    case '\\u00FC':\t// \u00fc\n                    case '\\u00E0':\t// \u00e0\n                    case '\\u20AC':\t// \u20ac\n                        continue;\n                    default:\n                        return false;\n                }\n            }\n        }\n        return true;\n    }", "signature": "boolean canRepresent(CharSequence str0)", "full_signature": "static public boolean canRepresent(CharSequence str0)", "class_method_signature": "TMobileNlGSMCharset.canRepresent(CharSequence str0)", "testcase": false, "constructor": false, "invocations": ["length", "charAt"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}