{"test_class": {"identifier": "FragmentUtilsTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "static SmilesParser smilesParser;", "modifier": "static", "type": "SmilesParser", "declarator": "smilesParser", "var_name": "smilesParser"}], "file": "tool/fragment/src/test/java/org/openscience/cdk/fragment/FragmentUtilsTest.java"}, "test_case": {"identifier": "testSplit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSplit() throws CDKException {\n        IAtomContainer mol = smilesParser.parseSmiles(\"C1CC1C2CCC2\");\n        SpanningTree st = new SpanningTree(mol);\n        IRingSet rings = st.getAllRings();\n        IBond splitBond = null;\n        for (int i = 0; i < mol.getBondCount(); i++) {\n            if (rings.getRings(mol.getBond(i)).getAtomContainerCount() == 0) {\n                splitBond = mol.getBond(i);\n                break;\n            }\n        }\n        List<IAtomContainer> frags = FragmentUtils.splitMolecule(mol, splitBond);\n        SmilesGenerator sg = new SmilesGenerator();\n        Set<String> uniqueFrags = new HashSet<String>();\n        for (IAtomContainer frag : frags) {\n            uniqueFrags.add(sg.create(frag));\n        }\n        Assert.assertEquals(2, uniqueFrags.size());\n        // You can put the fragments back together with a ring closure and dot\n        // [CH]12CC1.[CH]12CCC1\n        org.hamcrest.MatcherAssert.assertThat(uniqueFrags, hasItems(\"[CH]1CC1\", \"[CH]1CCC1\"));\n    }", "signature": "void testSplit()", "full_signature": "@Test public void testSplit()", "class_method_signature": "FragmentUtilsTest.testSplit()", "testcase": true, "constructor": false, "invocations": ["parseSmiles", "getAllRings", "getBondCount", "getAtomContainerCount", "getRings", "getBond", "getBond", "splitMolecule", "add", "create", "assertEquals", "size", "assertThat", "hasItems"]}, "focal_class": {"identifier": "FragmentUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "splitMolecule", "parameters": "(IAtomContainer atomContainer, IBond bond)", "modifiers": "protected static", "return": "List<IAtomContainer>", "signature": "List<IAtomContainer> splitMolecule(IAtomContainer atomContainer, IBond bond)", "full_signature": "protected static List<IAtomContainer> splitMolecule(IAtomContainer atomContainer, IBond bond)", "class_method_signature": "FragmentUtils.splitMolecule(IAtomContainer atomContainer, IBond bond)", "testcase": false, "constructor": false}, {"identifier": "makeAtomContainer", "parameters": "(IAtom atom, List<IBond> parts, IAtom excludedAtom)", "modifiers": "protected static", "return": "IAtomContainer", "signature": "IAtomContainer makeAtomContainer(IAtom atom, List<IBond> parts, IAtom excludedAtom)", "full_signature": "protected static IAtomContainer makeAtomContainer(IAtom atom, List<IBond> parts, IAtom excludedAtom)", "class_method_signature": "FragmentUtils.makeAtomContainer(IAtom atom, List<IBond> parts, IAtom excludedAtom)", "testcase": false, "constructor": false}, {"identifier": "traverse", "parameters": "(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList)", "modifiers": "protected static", "return": "List<IBond>", "signature": "List<IBond> traverse(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList)", "full_signature": "protected static List<IBond> traverse(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList)", "class_method_signature": "FragmentUtils.traverse(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList)", "testcase": false, "constructor": false}], "file": "tool/fragment/src/main/java/org/openscience/cdk/fragment/FragmentUtils.java"}, "focal_method": {"identifier": "splitMolecule", "parameters": "(IAtomContainer atomContainer, IBond bond)", "modifiers": "protected static", "return": "List<IAtomContainer>", "body": "protected static List<IAtomContainer> splitMolecule(IAtomContainer atomContainer, IBond bond) {\n        List<IAtomContainer> ret = new ArrayList<IAtomContainer>();\n\n        for (IAtom atom : bond.atoms()) {\n\n            // later on we'll want to make sure that the fragment doesn't contain\n            // the bond joining the current atom and the atom that is on the other side\n            IAtom excludedAtom;\n            if (atom.equals(bond.getBegin()))\n                excludedAtom = bond.getEnd();\n            else\n                excludedAtom = bond.getBegin();\n\n            List<IBond> part = new ArrayList<IBond>();\n            part.add(bond);\n            part = traverse(atomContainer, atom, part);\n\n            // at this point we have a partion which contains the bond we\n            // split. This partition should actually 2 partitions:\n            // - one with the splitting bond\n            // - one without the splitting bond\n            // note that this will lead to repeated fragments when we  do this\n            // with adjacent bonds, so when we gather all the fragments we need\n            // to check for repeats\n            IAtomContainer partContainer;\n            partContainer = makeAtomContainer(atom, part, excludedAtom);\n\n            // by checking for more than 2 atoms, we exclude single bond fragments\n            // also if a fragment has the same number of atoms as the parent molecule,\n            // it is the parent molecule, so we exclude it.\n            if (partContainer.getAtomCount() > 2 && partContainer.getAtomCount() != atomContainer.getAtomCount())\n                ret.add(partContainer);\n\n            part.remove(0);\n            partContainer = makeAtomContainer(atom, part, excludedAtom);\n            if (partContainer.getAtomCount() > 2 && partContainer.getAtomCount() != atomContainer.getAtomCount())\n                ret.add(partContainer);\n        }\n        return ret;\n    }", "signature": "List<IAtomContainer> splitMolecule(IAtomContainer atomContainer, IBond bond)", "full_signature": "protected static List<IAtomContainer> splitMolecule(IAtomContainer atomContainer, IBond bond)", "class_method_signature": "FragmentUtils.splitMolecule(IAtomContainer atomContainer, IBond bond)", "testcase": false, "constructor": false, "invocations": ["atoms", "equals", "getBegin", "getEnd", "getBegin", "add", "traverse", "makeAtomContainer", "getAtomCount", "getAtomCount", "getAtomCount", "add", "remove", "makeAtomContainer", "getAtomCount", "getAtomCount", "getAtomCount", "add"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}