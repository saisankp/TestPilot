{"test_class": {"identifier": "TestSpoolDirectorySource", "superclass": "", "interfaces": "", "fields": [{"original_string": "static SpoolDirectorySource source;", "modifier": "static", "type": "SpoolDirectorySource", "declarator": "source", "var_name": "source"}, {"original_string": "static MemoryChannel channel;", "modifier": "static", "type": "MemoryChannel", "declarator": "channel", "var_name": "channel"}, {"original_string": "private File tmpDir;", "modifier": "private", "type": "File", "declarator": "tmpDir", "var_name": "tmpDir"}], "file": "flume-ng-core/src/test/java/org/apache/flume/source/TestSpoolDirectorySource.java"}, "test_case": {"identifier": "testInvalidSortOrder", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void testInvalidSortOrder() {\n    Context context = new Context();\n    context.put(SpoolDirectorySourceConfigurationConstants.SPOOL_DIRECTORY,\n        tmpDir.getAbsolutePath());\n    context.put(SpoolDirectorySourceConfigurationConstants.CONSUME_ORDER,\n        \"undefined\");\n    Configurables.configure(source, context);\n  }", "signature": "void testInvalidSortOrder()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testInvalidSortOrder()", "class_method_signature": "TestSpoolDirectorySource.testInvalidSortOrder()", "testcase": true, "constructor": false, "invocations": ["put", "getAbsolutePath", "put", "configure"]}, "focal_class": {"identifier": "SpoolDirectorySource", "superclass": "extends AbstractSource", "interfaces": "implements Configurable, EventDrivenSource, BatchSizeSupported", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SpoolDirectorySource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SpoolDirectorySource.class)", "var_name": "logger"}, {"original_string": "private String completedSuffix;", "modifier": "private", "type": "String", "declarator": "completedSuffix", "var_name": "completedSuffix"}, {"original_string": "private String spoolDirectory;", "modifier": "private", "type": "String", "declarator": "spoolDirectory", "var_name": "spoolDirectory"}, {"original_string": "private boolean fileHeader;", "modifier": "private", "type": "boolean", "declarator": "fileHeader", "var_name": "fileHeader"}, {"original_string": "private String fileHeaderKey;", "modifier": "private", "type": "String", "declarator": "fileHeaderKey", "var_name": "fileHeaderKey"}, {"original_string": "private boolean basenameHeader;", "modifier": "private", "type": "boolean", "declarator": "basenameHeader", "var_name": "basenameHeader"}, {"original_string": "private String basenameHeaderKey;", "modifier": "private", "type": "String", "declarator": "basenameHeaderKey", "var_name": "basenameHeaderKey"}, {"original_string": "private int batchSize;", "modifier": "private", "type": "int", "declarator": "batchSize", "var_name": "batchSize"}, {"original_string": "private String includePattern;", "modifier": "private", "type": "String", "declarator": "includePattern", "var_name": "includePattern"}, {"original_string": "private String ignorePattern;", "modifier": "private", "type": "String", "declarator": "ignorePattern", "var_name": "ignorePattern"}, {"original_string": "private String trackerDirPath;", "modifier": "private", "type": "String", "declarator": "trackerDirPath", "var_name": "trackerDirPath"}, {"original_string": "private String deserializerType;", "modifier": "private", "type": "String", "declarator": "deserializerType", "var_name": "deserializerType"}, {"original_string": "private Context deserializerContext;", "modifier": "private", "type": "Context", "declarator": "deserializerContext", "var_name": "deserializerContext"}, {"original_string": "private String deletePolicy;", "modifier": "private", "type": "String", "declarator": "deletePolicy", "var_name": "deletePolicy"}, {"original_string": "private String inputCharset;", "modifier": "private", "type": "String", "declarator": "inputCharset", "var_name": "inputCharset"}, {"original_string": "private DecodeErrorPolicy decodeErrorPolicy;", "modifier": "private", "type": "DecodeErrorPolicy", "declarator": "decodeErrorPolicy", "var_name": "decodeErrorPolicy"}, {"original_string": "private volatile boolean hasFatalError = false;", "modifier": "private volatile", "type": "boolean", "declarator": "hasFatalError = false", "var_name": "hasFatalError"}, {"original_string": "private SourceCounter sourceCounter;", "modifier": "private", "type": "SourceCounter", "declarator": "sourceCounter", "var_name": "sourceCounter"}, {"original_string": "ReliableSpoolingFileEventReader reader;", "modifier": "", "type": "ReliableSpoolingFileEventReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private ScheduledExecutorService executor;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "executor", "var_name": "executor"}, {"original_string": "private boolean backoff = true;", "modifier": "private", "type": "boolean", "declarator": "backoff = true", "var_name": "backoff"}, {"original_string": "private boolean hitChannelException = false;", "modifier": "private", "type": "boolean", "declarator": "hitChannelException = false", "var_name": "hitChannelException"}, {"original_string": "private boolean hitChannelFullException = false;", "modifier": "private", "type": "boolean", "declarator": "hitChannelFullException = false", "var_name": "hitChannelFullException"}, {"original_string": "private int maxBackoff;", "modifier": "private", "type": "int", "declarator": "maxBackoff", "var_name": "maxBackoff"}, {"original_string": "private ConsumeOrder consumeOrder;", "modifier": "private", "type": "ConsumeOrder", "declarator": "consumeOrder", "var_name": "consumeOrder"}, {"original_string": "private int pollDelay;", "modifier": "private", "type": "int", "declarator": "pollDelay", "var_name": "pollDelay"}, {"original_string": "private boolean recursiveDirectorySearch;", "modifier": "private", "type": "boolean", "declarator": "recursiveDirectorySearch", "var_name": "recursiveDirectorySearch"}, {"original_string": "private String trackingPolicy;", "modifier": "private", "type": "String", "declarator": "trackingPolicy", "var_name": "trackingPolicy"}], "methods": [{"identifier": "start", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void start()", "full_signature": "@Override public synchronized void start()", "class_method_signature": "SpoolDirectorySource.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void stop()", "full_signature": "@Override public synchronized void stop()", "class_method_signature": "SpoolDirectorySource.stop()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SpoolDirectorySource.toString()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Context context)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void configure(Context context)", "full_signature": "@Override public synchronized void configure(Context context)", "class_method_signature": "SpoolDirectorySource.configure(Context context)", "testcase": false, "constructor": false}, {"identifier": "hasFatalError", "parameters": "()", "modifiers": "@VisibleForTesting protected", "return": "boolean", "signature": "boolean hasFatalError()", "full_signature": "@VisibleForTesting protected boolean hasFatalError()", "class_method_signature": "SpoolDirectorySource.hasFatalError()", "testcase": false, "constructor": false}, {"identifier": "setBackOff", "parameters": "(boolean backoff)", "modifiers": "@VisibleForTesting protected", "return": "void", "signature": "void setBackOff(boolean backoff)", "full_signature": "@VisibleForTesting protected void setBackOff(boolean backoff)", "class_method_signature": "SpoolDirectorySource.setBackOff(boolean backoff)", "testcase": false, "constructor": false}, {"identifier": "didHitChannelException", "parameters": "()", "modifiers": "@VisibleForTesting protected", "return": "boolean", "signature": "boolean didHitChannelException()", "full_signature": "@VisibleForTesting protected boolean didHitChannelException()", "class_method_signature": "SpoolDirectorySource.didHitChannelException()", "testcase": false, "constructor": false}, {"identifier": "didHitChannelFullException", "parameters": "()", "modifiers": "@VisibleForTesting protected", "return": "boolean", "signature": "boolean didHitChannelFullException()", "full_signature": "@VisibleForTesting protected boolean didHitChannelFullException()", "class_method_signature": "SpoolDirectorySource.didHitChannelFullException()", "testcase": false, "constructor": false}, {"identifier": "getSourceCounter", "parameters": "()", "modifiers": "@VisibleForTesting protected", "return": "SourceCounter", "signature": "SourceCounter getSourceCounter()", "full_signature": "@VisibleForTesting protected SourceCounter getSourceCounter()", "class_method_signature": "SpoolDirectorySource.getSourceCounter()", "testcase": false, "constructor": false}, {"identifier": "getRecursiveDirectorySearch", "parameters": "()", "modifiers": "@VisibleForTesting protected", "return": "boolean", "signature": "boolean getRecursiveDirectorySearch()", "full_signature": "@VisibleForTesting protected boolean getRecursiveDirectorySearch()", "class_method_signature": "SpoolDirectorySource.getRecursiveDirectorySearch()", "testcase": false, "constructor": false}, {"identifier": "getBatchSize", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getBatchSize()", "full_signature": "@Override public long getBatchSize()", "class_method_signature": "SpoolDirectorySource.getBatchSize()", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/source/SpoolDirectorySource.java"}, "focal_method": {"identifier": "configure", "parameters": "(Context context)", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n  public synchronized void configure(Context context) {\n    spoolDirectory = context.getString(SPOOL_DIRECTORY);\n    Preconditions.checkState(spoolDirectory != null,\n        \"Configuration must specify a spooling directory\");\n\n    completedSuffix = context.getString(SPOOLED_FILE_SUFFIX,\n        DEFAULT_SPOOLED_FILE_SUFFIX);\n    deletePolicy = context.getString(DELETE_POLICY, DEFAULT_DELETE_POLICY);\n    fileHeader = context.getBoolean(FILENAME_HEADER,\n        DEFAULT_FILE_HEADER);\n    fileHeaderKey = context.getString(FILENAME_HEADER_KEY,\n        DEFAULT_FILENAME_HEADER_KEY);\n    basenameHeader = context.getBoolean(BASENAME_HEADER,\n        DEFAULT_BASENAME_HEADER);\n    basenameHeaderKey = context.getString(BASENAME_HEADER_KEY,\n        DEFAULT_BASENAME_HEADER_KEY);\n    batchSize = context.getInteger(BATCH_SIZE,\n        DEFAULT_BATCH_SIZE);\n    inputCharset = context.getString(INPUT_CHARSET, DEFAULT_INPUT_CHARSET);\n    decodeErrorPolicy = DecodeErrorPolicy.valueOf(\n        context.getString(DECODE_ERROR_POLICY, DEFAULT_DECODE_ERROR_POLICY)\n            .toUpperCase(Locale.ENGLISH));\n\n    includePattern = context.getString(INCLUDE_PAT, DEFAULT_INCLUDE_PAT);\n    ignorePattern = context.getString(IGNORE_PAT, DEFAULT_IGNORE_PAT);\n    trackerDirPath = context.getString(TRACKER_DIR, DEFAULT_TRACKER_DIR);\n\n    deserializerType = context.getString(DESERIALIZER, DEFAULT_DESERIALIZER);\n    deserializerContext = new Context(context.getSubProperties(DESERIALIZER +\n        \".\"));\n\n    consumeOrder = ConsumeOrder.valueOf(context.getString(CONSUME_ORDER,\n        DEFAULT_CONSUME_ORDER.toString()).toUpperCase(Locale.ENGLISH));\n\n    pollDelay = context.getInteger(POLL_DELAY, DEFAULT_POLL_DELAY);\n\n    recursiveDirectorySearch = context.getBoolean(RECURSIVE_DIRECTORY_SEARCH,\n        DEFAULT_RECURSIVE_DIRECTORY_SEARCH);\n\n    // \"Hack\" to support backwards compatibility with previous generation of\n    // spooling directory source, which did not support deserializers\n    Integer bufferMaxLineLength = context.getInteger(BUFFER_MAX_LINE_LENGTH);\n    if (bufferMaxLineLength != null && deserializerType != null &&\n        deserializerType.equalsIgnoreCase(DEFAULT_DESERIALIZER)) {\n      deserializerContext.put(LineDeserializer.MAXLINE_KEY,\n          bufferMaxLineLength.toString());\n    }\n\n    maxBackoff = context.getInteger(MAX_BACKOFF, DEFAULT_MAX_BACKOFF);\n    if (sourceCounter == null) {\n      sourceCounter = new SourceCounter(getName());\n    }\n    trackingPolicy = context.getString(TRACKING_POLICY, DEFAULT_TRACKING_POLICY);\n  }", "signature": "void configure(Context context)", "full_signature": "@Override public synchronized void configure(Context context)", "class_method_signature": "SpoolDirectorySource.configure(Context context)", "testcase": false, "constructor": false, "invocations": ["getString", "checkState", "getString", "getString", "getBoolean", "getString", "getBoolean", "getString", "getInteger", "getString", "valueOf", "toUpperCase", "getString", "getString", "getString", "getString", "getString", "getSubProperties", "valueOf", "toUpperCase", "getString", "toString", "getInteger", "getBoolean", "getInteger", "equalsIgnoreCase", "put", "toString", "getInteger", "getName", "getString"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}