{"test_class": {"identifier": "AuthenticationServiceJwtImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public AuthenticationServiceJwtImpl authenticationService;", "modifier": "public", "type": "AuthenticationServiceJwtImpl", "declarator": "authenticationService", "var_name": "authenticationService"}], "file": "alibaba-broker-spring-boot-starter/src/test/java/com/alibaba/spring/boot/rsocket/broker/security/AuthenticationServiceJwtImplTest.java"}, "test_case": {"identifier": "testAuth", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAuth() throws Exception {\n        String subject = \"testing-only\";\n        String credentials = authenticationService.generateCredentials(UUID.randomUUID().toString(), new String[]{\"alibaba\"}, new String[]{\"default\"}, new String[]{\"internal\"}, null, subject, new String[]{\"leijuan\"});\n        System.out.println(credentials);\n        Principal principal = authenticationService.auth(\"JWT\", credentials);\n        Assertions.assertNotNull(principal);\n        Assertions.assertEquals(subject, principal.getName());\n    }", "signature": "void testAuth()", "full_signature": "@Test public void testAuth()", "class_method_signature": "AuthenticationServiceJwtImplTest.testAuth()", "testcase": true, "constructor": false, "invocations": ["generateCredentials", "toString", "randomUUID", "println", "auth", "assertNotNull", "assertEquals", "getName"]}, "focal_class": {"identifier": "AuthenticationServiceJwtImpl", "superclass": "", "interfaces": "implements AuthenticationService", "fields": [{"original_string": "private List<JWTVerifier> verifiers = new ArrayList<>();", "modifier": "private", "type": "List<JWTVerifier>", "declarator": "verifiers = new ArrayList<>()", "var_name": "verifiers"}, {"original_string": "private static String iss = \"RSocketBroker\";", "modifier": "private static", "type": "String", "declarator": "iss = \"RSocketBroker\"", "var_name": "iss"}, {"original_string": "Cache<Integer, RSocketAppPrincipal> jwtVerifyCache = Caffeine.newBuilder()\n            .maximumSize(100_000)\n            .expireAfterWrite(30, TimeUnit.MINUTES)\n            .build();", "modifier": "", "type": "Cache<Integer, RSocketAppPrincipal>", "declarator": "jwtVerifyCache = Caffeine.newBuilder()\n            .maximumSize(100_000)\n            .expireAfterWrite(30, TimeUnit.MINUTES)\n            .build()", "var_name": "jwtVerifyCache"}], "methods": [{"identifier": "AuthenticationServiceJwtImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " AuthenticationServiceJwtImpl()", "full_signature": "public  AuthenticationServiceJwtImpl()", "class_method_signature": "AuthenticationServiceJwtImpl.AuthenticationServiceJwtImpl()", "testcase": false, "constructor": true}, {"identifier": "auth", "parameters": "(String type, String credentials)", "modifiers": "@Override @Nullable public", "return": "RSocketAppPrincipal", "signature": "RSocketAppPrincipal auth(String type, String credentials)", "full_signature": "@Override @Nullable public RSocketAppPrincipal auth(String type, String credentials)", "class_method_signature": "AuthenticationServiceJwtImpl.auth(String type, String credentials)", "testcase": false, "constructor": false}, {"identifier": "generateCredentials", "parameters": "(String id, String[] organizations, String[] serviceAccounts, String[] roles, String[] authorities, String sub, String[] audience)", "modifiers": "public", "return": "String", "signature": "String generateCredentials(String id, String[] organizations, String[] serviceAccounts, String[] roles, String[] authorities, String sub, String[] audience)", "full_signature": "public String generateCredentials(String id, String[] organizations, String[] serviceAccounts, String[] roles, String[] authorities, String sub, String[] audience)", "class_method_signature": "AuthenticationServiceJwtImpl.generateCredentials(String id, String[] organizations, String[] serviceAccounts, String[] roles, String[] authorities, String sub, String[] audience)", "testcase": false, "constructor": false}, {"identifier": "readPrivateKey", "parameters": "()", "modifiers": "public", "return": "RSAPrivateKey", "signature": "RSAPrivateKey readPrivateKey()", "full_signature": "public RSAPrivateKey readPrivateKey()", "class_method_signature": "AuthenticationServiceJwtImpl.readPrivateKey()", "testcase": false, "constructor": false}, {"identifier": "readPublicKey", "parameters": "()", "modifiers": "public", "return": "RSAPublicKey", "signature": "RSAPublicKey readPublicKey()", "full_signature": "public RSAPublicKey readPublicKey()", "class_method_signature": "AuthenticationServiceJwtImpl.readPublicKey()", "testcase": false, "constructor": false}, {"identifier": "toBytes", "parameters": "(InputStream inputStream)", "modifiers": "public", "return": "byte[]", "signature": "byte[] toBytes(InputStream inputStream)", "full_signature": "public byte[] toBytes(InputStream inputStream)", "class_method_signature": "AuthenticationServiceJwtImpl.toBytes(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "generateRSAKeyPairs", "parameters": "(File rsocketKeysDir)", "modifiers": "private", "return": "void", "signature": "void generateRSAKeyPairs(File rsocketKeysDir)", "full_signature": "private void generateRSAKeyPairs(File rsocketKeysDir)", "class_method_signature": "AuthenticationServiceJwtImpl.generateRSAKeyPairs(File rsocketKeysDir)", "testcase": false, "constructor": false}], "file": "alibaba-broker-spring-boot-starter/src/main/java/com/alibaba/spring/boot/rsocket/broker/security/AuthenticationServiceJwtImpl.java"}, "focal_method": {"identifier": "auth", "parameters": "(String type, String credentials)", "modifiers": "@Override @Nullable public", "return": "RSocketAppPrincipal", "body": "@Override\n    @Nullable\n    public RSocketAppPrincipal auth(String type, String credentials) {\n        int tokenHashCode = credentials.hashCode();\n        RSocketAppPrincipal principal = jwtVerifyCache.getIfPresent(tokenHashCode);\n        for (JWTVerifier verifier : verifiers) {\n            try {\n                principal = new JwtPrincipal(verifier.verify(credentials), credentials);\n                jwtVerifyCache.put(tokenHashCode, principal);\n                break;\n            } catch (JWTVerificationException ignore) {\n\n            }\n        }\n        return principal;\n    }", "signature": "RSocketAppPrincipal auth(String type, String credentials)", "full_signature": "@Override @Nullable public RSocketAppPrincipal auth(String type, String credentials)", "class_method_signature": "AuthenticationServiceJwtImpl.auth(String type, String credentials)", "testcase": false, "constructor": false, "invocations": ["hashCode", "getIfPresent", "verify", "put"]}, "repository": {"repo_id": 224353263, "url": "https://github.com/alibaba/alibaba-rsocket-broker", "stars": 208, "created": "11/27/2019 5:42:01 AM +00:00", "updates": "2020-01-27T22:23:55+00:00", "fork": "False", "license": "licensed"}}