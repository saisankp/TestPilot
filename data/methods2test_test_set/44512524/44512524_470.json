{"test_class": {"identifier": "SiddhiHandlerTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "bigdata-intro/cep-intro/siddhi-kafka-rest/src/test/java/net/redborder/cep/siddhi/SiddhiHandlerTest.java"}, "test_case": {"identifier": "stop", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void stop() throws ExecutionPlanException {\n        // Create two mocks\n        SiddhiPlan siddhiPlanMock = mock(SiddhiPlan.class);\n        when(siddhiPlanMock.getId()).thenReturn(\"testMockID\");\n        SiddhiPlan siddhiPlanMockTwo = mock(SiddhiPlan.class);\n        when(siddhiPlanMockTwo.getId()).thenReturn(\"testMockIDTwo\");\n\n        // Create the handler and add both execution plans\n        SiddhiHandler siddhiHandler = new SiddhiHandler();\n        siddhiHandler.add(siddhiPlanMock);\n        siddhiHandler.add(siddhiPlanMockTwo);\n\n        // Call stop\n        siddhiHandler.stop();\n\n        // Now verify that the stop method was called\n        verify(siddhiPlanMock).stop();\n        verify(siddhiPlanMockTwo).stop();\n    }", "signature": "void stop()", "full_signature": "@Test public void stop()", "class_method_signature": "SiddhiHandlerTest.stop()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getId", "mock", "thenReturn", "when", "getId", "add", "add", "stop", "stop", "verify", "stop", "verify"]}, "focal_class": {"identifier": "SiddhiHandler", "superclass": "", "interfaces": "implements RestListener, EventHandler<MapEvent>", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(SiddhiHandler.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SiddhiHandler.class)", "var_name": "log"}, {"original_string": "private SiddhiManager siddhiManager;", "modifier": "private", "type": "SiddhiManager", "declarator": "siddhiManager", "var_name": "siddhiManager"}, {"original_string": "private SiddhiCallback siddhiCallback;", "modifier": "private", "type": "SiddhiCallback", "declarator": "siddhiCallback", "var_name": "siddhiCallback"}, {"original_string": "private ObjectMapper objectMapper;", "modifier": "private", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "private Map<String, SiddhiPlan> siddhiPlans;", "modifier": "private", "type": "Map<String, SiddhiPlan>", "declarator": "siddhiPlans", "var_name": "siddhiPlans"}], "methods": [{"identifier": "SiddhiHandler", "parameters": "(Sink eventReceiver)", "modifiers": "public", "return": "", "signature": " SiddhiHandler(Sink eventReceiver)", "full_signature": "public  SiddhiHandler(Sink eventReceiver)", "class_method_signature": "SiddhiHandler.SiddhiHandler(Sink eventReceiver)", "testcase": false, "constructor": true}, {"identifier": "SiddhiHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " SiddhiHandler()", "full_signature": "public  SiddhiHandler()", "class_method_signature": "SiddhiHandler.SiddhiHandler()", "testcase": false, "constructor": true}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "SiddhiHandler.stop()", "testcase": false, "constructor": false}, {"identifier": "getSiddhiPlans", "parameters": "()", "modifiers": "public", "return": "Map<String, SiddhiPlan>", "signature": "Map<String, SiddhiPlan> getSiddhiPlans()", "full_signature": "public Map<String, SiddhiPlan> getSiddhiPlans()", "class_method_signature": "SiddhiHandler.getSiddhiPlans()", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(MapEvent mapEvent, long sequence, boolean endOfBatch)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(MapEvent mapEvent, long sequence, boolean endOfBatch)", "full_signature": "@Override public void onEvent(MapEvent mapEvent, long sequence, boolean endOfBatch)", "class_method_signature": "SiddhiHandler.onEvent(MapEvent mapEvent, long sequence, boolean endOfBatch)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Map<String, Object> element)", "modifiers": "@Override public", "return": "void", "signature": "void add(Map<String, Object> element)", "full_signature": "@Override public void add(Map<String, Object> element)", "class_method_signature": "SiddhiHandler.add(Map<String, Object> element)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(SiddhiPlan siddhiPlan)", "modifiers": "public synchronized", "return": "void", "signature": "void add(SiddhiPlan siddhiPlan)", "full_signature": "public synchronized void add(SiddhiPlan siddhiPlan)", "class_method_signature": "SiddhiHandler.add(SiddhiPlan siddhiPlan)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String id)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void remove(String id)", "full_signature": "@Override public synchronized void remove(String id)", "class_method_signature": "SiddhiHandler.remove(String id)", "testcase": false, "constructor": false}, {"identifier": "synchronize", "parameters": "(List<Map<String, Object>> elements)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void synchronize(List<Map<String, Object>> elements)", "full_signature": "@Override public synchronized void synchronize(List<Map<String, Object>> elements)", "class_method_signature": "SiddhiHandler.synchronize(List<Map<String, Object>> elements)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<String, Object>>", "signature": "List<Map<String, Object>> list()", "full_signature": "@Override public List<Map<String, Object>> list()", "class_method_signature": "SiddhiHandler.list()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void save()", "full_signature": "public synchronized void save()", "class_method_signature": "SiddhiHandler.save()", "testcase": false, "constructor": false}, {"identifier": "restore", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void restore()", "full_signature": "public synchronized void restore()", "class_method_signature": "SiddhiHandler.restore()", "testcase": false, "constructor": false}], "file": "bigdata-intro/cep-intro/siddhi-kafka-rest/src/main/java/net/redborder/cep/siddhi/SiddhiHandler.java"}, "focal_method": {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void stop() {\n        log.info(\"Stopping siddhi plans...\");\n\n        for (SiddhiPlan siddhiPlan : siddhiPlans.values()) {\n            siddhiPlan.stop();\n        }\n    }", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "SiddhiHandler.stop()", "testcase": false, "constructor": false, "invocations": ["info", "values", "stop"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}