{"test_class": {"identifier": "DiscreteAutocorrelationAtLagJTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DiscreteAutocorrelationAtLagJ autocorrelation;", "modifier": "private", "type": "DiscreteAutocorrelationAtLagJ", "declarator": "autocorrelation", "var_name": "autocorrelation"}, {"original_string": "private double[] arrayOfTwos;", "modifier": "private", "type": "double[]", "declarator": "arrayOfTwos", "var_name": "arrayOfTwos"}], "file": "recognito/src/test/java/com/bitsinharmony/recognito/algorithms/DiscreteAutocorrelationAtLagJTest.java"}, "test_case": {"identifier": "lagLowerBoundIsTestedBeforeMethodExecutes", "parameters": "()", "modifiers": "@Test(expected = IndexOutOfBoundsException.class) public", "return": "void", "body": "@Test(expected = IndexOutOfBoundsException.class)\n    public void lagLowerBoundIsTestedBeforeMethodExecutes() {\n        autocorrelation.autocorrelate(arrayOfTwos, -1);\n    }", "signature": "void lagLowerBoundIsTestedBeforeMethodExecutes()", "full_signature": "@Test(expected = IndexOutOfBoundsException.class) public void lagLowerBoundIsTestedBeforeMethodExecutes()", "class_method_signature": "DiscreteAutocorrelationAtLagJTest.lagLowerBoundIsTestedBeforeMethodExecutes()", "testcase": true, "constructor": false, "invocations": ["autocorrelate"]}, "focal_class": {"identifier": "DiscreteAutocorrelationAtLagJ", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "autocorrelate", "parameters": "(double[] buffer, int lag)", "modifiers": "public", "return": "double", "signature": "double autocorrelate(double[] buffer, int lag)", "full_signature": "public double autocorrelate(double[] buffer, int lag)", "class_method_signature": "DiscreteAutocorrelationAtLagJ.autocorrelate(double[] buffer, int lag)", "testcase": false, "constructor": false}], "file": "recognito/src/main/java/com/bitsinharmony/recognito/algorithms/DiscreteAutocorrelationAtLagJ.java"}, "focal_method": {"identifier": "autocorrelate", "parameters": "(double[] buffer, int lag)", "modifiers": "public", "return": "double", "body": "public double autocorrelate(double[] buffer, int lag) {\n        if(lag > -1 && lag < buffer.length) {\n            double result = 0.0;\n            for (int i = lag; i < buffer.length; i++) {\n                result += buffer[i] * buffer[i - lag];\n            }\n            return result;\n        } else {\n            throw new IndexOutOfBoundsException(\"Lag parameter range is : -1 < lag < buffer size. Received [\" \n                    + lag + \"] for buffer size of [\" + buffer.length + \"]\");\n        }\n    }", "signature": "double autocorrelate(double[] buffer, int lag)", "full_signature": "public double autocorrelate(double[] buffer, int lag)", "class_method_signature": "DiscreteAutocorrelationAtLagJ.autocorrelate(double[] buffer, int lag)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 16597144, "url": "https://github.com/amaurycrickx/recognito", "language": "Java", "is_fork": false, "fork_count": 100, "stargazer_count": 173, "size": 76, "license": "licensed"}}