{"test_class": {"identifier": "CustomHttpResponseHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CustomHttpResponseHandler responseHandler;", "modifier": "private", "type": "CustomHttpResponseHandler", "declarator": "responseHandler", "var_name": "responseHandler"}], "file": "gateleen-routing/src/test/java/org/swisspush/gateleen/routing/CustomHttpResponseHandlerTest.java"}, "test_case": {"identifier": "testRequestHandledWithStatus503", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRequestHandledWithStatus503(TestContext context){\n        HttpServerResponse response = spy(new DummyHttpServerResponse());\n        HttpServerRequest request = new HttpServerRequest(\"/gateleen/server/return-with-status-code/503\", response);\n\n        final boolean handled = responseHandler.handle(request);\n        context.assertTrue(handled, \"Request should have been handled\");\n\n        verify(response, times(1)).setStatusCode(eq(StatusCode.SERVICE_UNAVAILABLE.getStatusCode()));\n        verify(response, times(1)).setStatusMessage(eq(StatusCode.SERVICE_UNAVAILABLE.getStatusMessage()));\n    }", "signature": "void testRequestHandledWithStatus503(TestContext context)", "full_signature": "@Test public void testRequestHandledWithStatus503(TestContext context)", "class_method_signature": "CustomHttpResponseHandlerTest.testRequestHandledWithStatus503(TestContext context)", "testcase": true, "constructor": false, "invocations": ["spy", "handle", "assertTrue", "setStatusCode", "verify", "times", "eq", "getStatusCode", "setStatusMessage", "verify", "times", "eq", "getStatusMessage"]}, "focal_class": {"identifier": "CustomHttpResponseHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger LOG = LoggerFactory.getLogger(CustomHttpResponseHandler.class);", "modifier": "private final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CustomHttpResponseHandler.class)", "var_name": "LOG"}, {"original_string": "private final String path;", "modifier": "private final", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private static final String SLASH = \"/\";", "modifier": "private static final", "type": "String", "declarator": "SLASH = \"/\"", "var_name": "SLASH"}, {"original_string": "private static final String EMPTY = \"\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY = \"\"", "var_name": "EMPTY"}], "methods": [{"identifier": "CustomHttpResponseHandler", "parameters": "(String rootPath)", "modifiers": "public", "return": "", "signature": " CustomHttpResponseHandler(String rootPath)", "full_signature": "public  CustomHttpResponseHandler(String rootPath)", "class_method_signature": "CustomHttpResponseHandler.CustomHttpResponseHandler(String rootPath)", "testcase": false, "constructor": true}, {"identifier": "handle", "parameters": "(HttpServerRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean handle(HttpServerRequest request)", "full_signature": "public boolean handle(HttpServerRequest request)", "class_method_signature": "CustomHttpResponseHandler.handle(HttpServerRequest request)", "testcase": false, "constructor": false}], "file": "gateleen-routing/src/main/java/org/swisspush/gateleen/routing/CustomHttpResponseHandler.java"}, "focal_method": {"identifier": "handle", "parameters": "(HttpServerRequest request)", "modifiers": "public", "return": "boolean", "body": "public boolean handle(HttpServerRequest request) {\n        if (!request.uri().startsWith(path)) {\n            return false;\n        }\n        HttpResponseStatus rs;\n        String info = \"\";\n        try {\n            String code = request.uri().substring(path.length());\n\n            // remove leading slashes\n            while (code.startsWith(SLASH)) {\n                code = code.substring(1);\n            }\n\n            // find additional path segments\n            int index = code.indexOf(SLASH);\n            if(index != -1) {\n                code = code.substring(0, index); // remove additional path segments\n            }\n\n            int codeAsInt = Integer.parseInt(code);\n            rs = HttpResponseStatus.valueOf(codeAsInt);\n        } catch (Exception ex) {\n            LOG.warn(\"can't parse wanted response code from {}\", request.uri(), ex);\n            rs = HttpResponseStatus.BAD_REQUEST;\n            info = \": missing, wrong or non-numeric status-code in request URL\";\n        }\n        request.response().setStatusCode(rs.code()).setStatusMessage(rs.reasonPhrase()).end(rs.toString() + info);\n        return true;\n    }", "signature": "boolean handle(HttpServerRequest request)", "full_signature": "public boolean handle(HttpServerRequest request)", "class_method_signature": "CustomHttpResponseHandler.handle(HttpServerRequest request)", "testcase": false, "constructor": false, "invocations": ["startsWith", "uri", "substring", "uri", "length", "startsWith", "substring", "indexOf", "substring", "parseInt", "valueOf", "warn", "uri", "end", "setStatusMessage", "setStatusCode", "response", "code", "reasonPhrase", "toString"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}