{"test_class": {"identifier": "ReferenceCountExchangeClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static ProxyFactory proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();", "modifier": "public static", "type": "ProxyFactory", "declarator": "proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension()", "var_name": "proxy"}, {"original_string": "private static DubboProtocol protocol = DubboProtocol.getDubboProtocol();", "modifier": "private static", "type": "DubboProtocol", "declarator": "protocol = DubboProtocol.getDubboProtocol()", "var_name": "protocol"}, {"original_string": "Exporter<?> demoExporter;", "modifier": "", "type": "Exporter<?>", "declarator": "demoExporter", "var_name": "demoExporter"}, {"original_string": "Exporter<?> helloExporter;", "modifier": "", "type": "Exporter<?>", "declarator": "helloExporter", "var_name": "helloExporter"}, {"original_string": "Invoker<IDemoService> demoServiceInvoker;", "modifier": "", "type": "Invoker<IDemoService>", "declarator": "demoServiceInvoker", "var_name": "demoServiceInvoker"}, {"original_string": "Invoker<IHelloService> helloServiceInvoker;", "modifier": "", "type": "Invoker<IHelloService>", "declarator": "helloServiceInvoker", "var_name": "helloServiceInvoker"}, {"original_string": "IDemoService demoService;", "modifier": "", "type": "IDemoService", "declarator": "demoService", "var_name": "demoService"}, {"original_string": "IHelloService helloService;", "modifier": "", "type": "IHelloService", "declarator": "helloService", "var_name": "helloService"}, {"original_string": "ExchangeClient demoClient;", "modifier": "", "type": "ExchangeClient", "declarator": "demoClient", "var_name": "demoClient"}, {"original_string": "ExchangeClient helloClient;", "modifier": "", "type": "ExchangeClient", "declarator": "helloClient", "var_name": "helloClient"}, {"original_string": "String errorMsg = \"safe guard client , should not be called ,must have a bug\";", "modifier": "", "type": "String", "declarator": "errorMsg = \"safe guard client , should not be called ,must have a bug\"", "var_name": "errorMsg"}], "file": "dubbo-rpc/dubbo-rpc-dubbo/src/test/java/com/alibaba/dubbo/rpc/protocol/dubbo/ReferenceCountExchangeClientTest.java"}, "test_case": {"identifier": "test_not_share_connect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_not_share_connect() {\n        init(1);\n        Assert.assertNotSame(demoClient.getLocalAddress(), helloClient.getLocalAddress());\n        Assert.assertNotSame(demoClient, helloClient);\n        destoy();\n    }", "signature": "void test_not_share_connect()", "full_signature": "@Test public void test_not_share_connect()", "class_method_signature": "ReferenceCountExchangeClientTest.test_not_share_connect()", "testcase": true, "constructor": false, "invocations": ["init", "assertNotSame", "getLocalAddress", "getLocalAddress", "assertNotSame", "destoy"]}, "focal_class": {"identifier": "ReferenceCountExchangeClient", "superclass": "", "interfaces": "implements ExchangeClient", "fields": [{"original_string": "private final URL url;", "modifier": "private final", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "private final AtomicInteger refenceCount = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "refenceCount = new AtomicInteger(0)", "var_name": "refenceCount"}, {"original_string": "private final ConcurrentMap<String, LazyConnectExchangeClient> ghostClientMap;", "modifier": "private final", "type": "ConcurrentMap<String, LazyConnectExchangeClient>", "declarator": "ghostClientMap", "var_name": "ghostClientMap"}, {"original_string": "private ExchangeClient client;", "modifier": "private", "type": "ExchangeClient", "declarator": "client", "var_name": "client"}], "methods": [{"identifier": "ReferenceCountExchangeClient", "parameters": "(ExchangeClient client, ConcurrentMap<String, LazyConnectExchangeClient> ghostClientMap)", "modifiers": "public", "return": "", "signature": " ReferenceCountExchangeClient(ExchangeClient client, ConcurrentMap<String, LazyConnectExchangeClient> ghostClientMap)", "full_signature": "public  ReferenceCountExchangeClient(ExchangeClient client, ConcurrentMap<String, LazyConnectExchangeClient> ghostClientMap)", "class_method_signature": "ReferenceCountExchangeClient.ReferenceCountExchangeClient(ExchangeClient client, ConcurrentMap<String, LazyConnectExchangeClient> ghostClientMap)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void reset(URL url)", "full_signature": "@Override public void reset(URL url)", "class_method_signature": "ReferenceCountExchangeClient.reset(URL url)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(Object request)", "modifiers": "@Override public", "return": "ResponseFuture", "signature": "ResponseFuture request(Object request)", "full_signature": "@Override public ResponseFuture request(Object request)", "class_method_signature": "ReferenceCountExchangeClient.request(Object request)", "testcase": false, "constructor": false}, {"identifier": "getUrl", "parameters": "()", "modifiers": "@Override public", "return": "URL", "signature": "URL getUrl()", "full_signature": "@Override public URL getUrl()", "class_method_signature": "ReferenceCountExchangeClient.getUrl()", "testcase": false, "constructor": false}, {"identifier": "getRemoteAddress", "parameters": "()", "modifiers": "@Override public", "return": "InetSocketAddress", "signature": "InetSocketAddress getRemoteAddress()", "full_signature": "@Override public InetSocketAddress getRemoteAddress()", "class_method_signature": "ReferenceCountExchangeClient.getRemoteAddress()", "testcase": false, "constructor": false}, {"identifier": "getChannelHandler", "parameters": "()", "modifiers": "@Override public", "return": "ChannelHandler", "signature": "ChannelHandler getChannelHandler()", "full_signature": "@Override public ChannelHandler getChannelHandler()", "class_method_signature": "ReferenceCountExchangeClient.getChannelHandler()", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(Object request, int timeout)", "modifiers": "@Override public", "return": "ResponseFuture", "signature": "ResponseFuture request(Object request, int timeout)", "full_signature": "@Override public ResponseFuture request(Object request, int timeout)", "class_method_signature": "ReferenceCountExchangeClient.request(Object request, int timeout)", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "@Override public boolean isConnected()", "class_method_signature": "ReferenceCountExchangeClient.isConnected()", "testcase": false, "constructor": false}, {"identifier": "reconnect", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reconnect()", "full_signature": "@Override public void reconnect()", "class_method_signature": "ReferenceCountExchangeClient.reconnect()", "testcase": false, "constructor": false}, {"identifier": "getLocalAddress", "parameters": "()", "modifiers": "@Override public", "return": "InetSocketAddress", "signature": "InetSocketAddress getLocalAddress()", "full_signature": "@Override public InetSocketAddress getLocalAddress()", "class_method_signature": "ReferenceCountExchangeClient.getLocalAddress()", "testcase": false, "constructor": false}, {"identifier": "hasAttribute", "parameters": "(String key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasAttribute(String key)", "full_signature": "@Override public boolean hasAttribute(String key)", "class_method_signature": "ReferenceCountExchangeClient.hasAttribute(String key)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "(Parameters parameters)", "modifiers": "@Override public", "return": "void", "signature": "void reset(Parameters parameters)", "full_signature": "@Override public void reset(Parameters parameters)", "class_method_signature": "ReferenceCountExchangeClient.reset(Parameters parameters)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Object message)", "modifiers": "@Override public", "return": "void", "signature": "void send(Object message)", "full_signature": "@Override public void send(Object message)", "class_method_signature": "ReferenceCountExchangeClient.send(Object message)", "testcase": false, "constructor": false}, {"identifier": "getExchangeHandler", "parameters": "()", "modifiers": "@Override public", "return": "ExchangeHandler", "signature": "ExchangeHandler getExchangeHandler()", "full_signature": "@Override public ExchangeHandler getExchangeHandler()", "class_method_signature": "ReferenceCountExchangeClient.getExchangeHandler()", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String key)", "modifiers": "@Override public", "return": "Object", "signature": "Object getAttribute(String key)", "full_signature": "@Override public Object getAttribute(String key)", "class_method_signature": "ReferenceCountExchangeClient.getAttribute(String key)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Object message, boolean sent)", "modifiers": "@Override public", "return": "void", "signature": "void send(Object message, boolean sent)", "full_signature": "@Override public void send(Object message, boolean sent)", "class_method_signature": "ReferenceCountExchangeClient.send(Object message, boolean sent)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String key, Object value)", "modifiers": "@Override public", "return": "void", "signature": "void setAttribute(String key, Object value)", "full_signature": "@Override public void setAttribute(String key, Object value)", "class_method_signature": "ReferenceCountExchangeClient.setAttribute(String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "removeAttribute", "parameters": "(String key)", "modifiers": "@Override public", "return": "void", "signature": "void removeAttribute(String key)", "full_signature": "@Override public void removeAttribute(String key)", "class_method_signature": "ReferenceCountExchangeClient.removeAttribute(String key)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ReferenceCountExchangeClient.close()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(int timeout)", "modifiers": "@Override public", "return": "void", "signature": "void close(int timeout)", "full_signature": "@Override public void close(int timeout)", "class_method_signature": "ReferenceCountExchangeClient.close(int timeout)", "testcase": false, "constructor": false}, {"identifier": "startClose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startClose()", "full_signature": "@Override public void startClose()", "class_method_signature": "ReferenceCountExchangeClient.startClose()", "testcase": false, "constructor": false}, {"identifier": "replaceWithLazyClient", "parameters": "()", "modifiers": "private", "return": "LazyConnectExchangeClient", "signature": "LazyConnectExchangeClient replaceWithLazyClient()", "full_signature": "private LazyConnectExchangeClient replaceWithLazyClient()", "class_method_signature": "ReferenceCountExchangeClient.replaceWithLazyClient()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "@Override public boolean isClosed()", "class_method_signature": "ReferenceCountExchangeClient.isClosed()", "testcase": false, "constructor": false}, {"identifier": "incrementAndGetCount", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void incrementAndGetCount()", "full_signature": "public void incrementAndGetCount()", "class_method_signature": "ReferenceCountExchangeClient.incrementAndGetCount()", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/ReferenceCountExchangeClient.java"}, "focal_method": {"identifier": "getLocalAddress", "parameters": "()", "modifiers": "@Override public", "return": "InetSocketAddress", "body": "@Override\n    public InetSocketAddress getLocalAddress() {\n        return client.getLocalAddress();\n    }", "signature": "InetSocketAddress getLocalAddress()", "full_signature": "@Override public InetSocketAddress getLocalAddress()", "class_method_signature": "ReferenceCountExchangeClient.getLocalAddress()", "testcase": false, "constructor": false, "invocations": ["getLocalAddress"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}