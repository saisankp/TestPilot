{"test_class": {"identifier": "LockManagerFacadeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/jcrfacade/lock/LockManagerFacadeTest.java"}, "test_case": {"identifier": "testIsLocked", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsLocked() throws Exception {\n        LockManager delegate = mock(LockManager.class);\n        LockManagerFacade<Session> facade = getFacade(delegate);\n        final String path = \"/correct/path\";\n        when(delegate.isLocked(path)).thenReturn(true);\n        assertTrue(\"is true\", facade.isLocked(path));\n    }", "signature": "void testIsLocked()", "full_signature": "@Test public void testIsLocked()", "class_method_signature": "LockManagerFacadeTest.testIsLocked()", "testcase": true, "constructor": false, "invocations": ["mock", "getFacade", "thenReturn", "when", "isLocked", "assertTrue", "isLocked"]}, "focal_class": {"identifier": "LockManagerFacade", "superclass": "", "interfaces": "implements LockManager", "fields": [{"original_string": "private final @NotNull LockManager delegate;", "modifier": "private final @NotNull", "type": "LockManager", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private final @NotNull SessionFacade<S> session;", "modifier": "private final @NotNull", "type": "SessionFacade<S>", "declarator": "session", "var_name": "session"}], "methods": [{"identifier": "LockManagerFacade", "parameters": "(final @NotNull LockManager delegate, final @NotNull SessionFacade<S> session)", "modifiers": "public", "return": "", "signature": " LockManagerFacade(final @NotNull LockManager delegate, final @NotNull SessionFacade<S> session)", "full_signature": "public  LockManagerFacade(final @NotNull LockManager delegate, final @NotNull SessionFacade<S> session)", "class_method_signature": "LockManagerFacade.LockManagerFacade(final @NotNull LockManager delegate, final @NotNull SessionFacade<S> session)", "testcase": false, "constructor": true}, {"identifier": "getLock", "parameters": "(String absPath)", "modifiers": "@Override public", "return": "Lock", "signature": "Lock getLock(String absPath)", "full_signature": "@Override public Lock getLock(String absPath)", "class_method_signature": "LockManagerFacade.getLock(String absPath)", "testcase": false, "constructor": false}, {"identifier": "getLockTokens", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getLockTokens()", "full_signature": "@Override public String[] getLockTokens()", "class_method_signature": "LockManagerFacade.getLockTokens()", "testcase": false, "constructor": false}, {"identifier": "holdsLock", "parameters": "(String absPath)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean holdsLock(String absPath)", "full_signature": "@Override public boolean holdsLock(String absPath)", "class_method_signature": "LockManagerFacade.holdsLock(String absPath)", "testcase": false, "constructor": false}, {"identifier": "isLocked", "parameters": "(String absPath)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLocked(String absPath)", "full_signature": "@Override public boolean isLocked(String absPath)", "class_method_signature": "LockManagerFacade.isLocked(String absPath)", "testcase": false, "constructor": false}, {"identifier": "addLockToken", "parameters": "(String lockToken)", "modifiers": "@Override public", "return": "void", "signature": "void addLockToken(String lockToken)", "full_signature": "@Override public void addLockToken(String lockToken)", "class_method_signature": "LockManagerFacade.addLockToken(String lockToken)", "testcase": false, "constructor": false}, {"identifier": "lock", "parameters": "(String absPath, boolean isDeep, boolean isSessionScoped, long timeoutHint, String ownerInfo)", "modifiers": "@Override public", "return": "Lock", "signature": "Lock lock(String absPath, boolean isDeep, boolean isSessionScoped, long timeoutHint, String ownerInfo)", "full_signature": "@Override public Lock lock(String absPath, boolean isDeep, boolean isSessionScoped, long timeoutHint, String ownerInfo)", "class_method_signature": "LockManagerFacade.lock(String absPath, boolean isDeep, boolean isSessionScoped, long timeoutHint, String ownerInfo)", "testcase": false, "constructor": false}, {"identifier": "removeLockToken", "parameters": "(String lockToken)", "modifiers": "@Override public", "return": "void", "signature": "void removeLockToken(String lockToken)", "full_signature": "@Override public void removeLockToken(String lockToken)", "class_method_signature": "LockManagerFacade.removeLockToken(String lockToken)", "testcase": false, "constructor": false}, {"identifier": "unlock", "parameters": "(String absPath)", "modifiers": "@Override public", "return": "void", "signature": "void unlock(String absPath)", "full_signature": "@Override public void unlock(String absPath)", "class_method_signature": "LockManagerFacade.unlock(String absPath)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/jcrfacade/lock/LockManagerFacade.java"}, "focal_method": {"identifier": "isLocked", "parameters": "(String absPath)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isLocked(String absPath) throws RepositoryException {\n        return delegate.isLocked(absPath);\n    }", "signature": "boolean isLocked(String absPath)", "full_signature": "@Override public boolean isLocked(String absPath)", "class_method_signature": "LockManagerFacade.isLocked(String absPath)", "testcase": false, "constructor": false, "invocations": ["isLocked"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}