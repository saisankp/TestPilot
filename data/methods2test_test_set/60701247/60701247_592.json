{"test_class": {"identifier": "SliderValuePropertyTest", "superclass": "", "interfaces": "", "fields": [], "file": "observable-ui/testSrc/com/android/tools/idea/observable/ui/SliderValuePropertyTest.java"}, "test_case": {"identifier": "testSliderValueProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSliderValueProperty() throws Exception {\n    JSlider slider = new JSlider(0, 100, 50);\n    SliderValueProperty sliderValue = new SliderValueProperty(slider);\n    CountListener listener = new CountListener();\n    sliderValue.addListener(listener);\n\n    assertThat(sliderValue.get()).isEqualTo(50);\n    assertThat(listener.getCount()).isEqualTo(0);\n\n    slider.setValue(90);\n    assertThat(sliderValue.get()).isEqualTo(90);\n    assertThat(listener.getCount()).isEqualTo(1);\n\n    sliderValue.set(10);\n    assertThat(slider.getValue()).isEqualTo(10);\n    assertThat(listener.getCount()).isEqualTo(2);\n  }", "signature": "void testSliderValueProperty()", "full_signature": "@Test public void testSliderValueProperty()", "class_method_signature": "SliderValuePropertyTest.testSliderValueProperty()", "testcase": true, "constructor": false, "invocations": ["addListener", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "getCount", "setValue", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "getCount", "set", "isEqualTo", "assertThat", "getValue", "isEqualTo", "assertThat", "getCount"]}, "focal_class": {"identifier": "SliderValueProperty", "superclass": "extends IntProperty", "interfaces": "implements ChangeListener", "fields": [{"original_string": "@NotNull private final JSlider mySlider;", "modifier": "@NotNull private final", "type": "JSlider", "declarator": "mySlider", "var_name": "mySlider"}], "methods": [{"identifier": "SliderValueProperty", "parameters": "(@NotNull JSlider slider)", "modifiers": "public", "return": "", "signature": " SliderValueProperty(@NotNull JSlider slider)", "full_signature": "public  SliderValueProperty(@NotNull JSlider slider)", "class_method_signature": "SliderValueProperty.SliderValueProperty(@NotNull JSlider slider)", "testcase": false, "constructor": true}, {"identifier": "setDirectly", "parameters": "(@NotNull Integer value)", "modifiers": "@Override protected", "return": "void", "signature": "void setDirectly(@NotNull Integer value)", "full_signature": "@Override protected void setDirectly(@NotNull Integer value)", "class_method_signature": "SliderValueProperty.setDirectly(@NotNull Integer value)", "testcase": false, "constructor": false}, {"identifier": "stateChanged", "parameters": "(ChangeEvent e)", "modifiers": "@Override public", "return": "void", "signature": "void stateChanged(ChangeEvent e)", "full_signature": "@Override public void stateChanged(ChangeEvent e)", "class_method_signature": "SliderValueProperty.stateChanged(ChangeEvent e)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Integer", "signature": "Integer get()", "full_signature": "@NotNull @Override public Integer get()", "class_method_signature": "SliderValueProperty.get()", "testcase": false, "constructor": false}], "file": "observable-ui/src/com/android/tools/idea/observable/ui/SliderValueProperty.java"}, "focal_method": {"identifier": "SliderValueProperty", "parameters": "(@NotNull JSlider slider)", "modifiers": "public", "return": "", "body": "public SliderValueProperty(@NotNull JSlider slider) {\n    mySlider = slider;\n    mySlider.addChangeListener(this);\n  }", "signature": " SliderValueProperty(@NotNull JSlider slider)", "full_signature": "public  SliderValueProperty(@NotNull JSlider slider)", "class_method_signature": "SliderValueProperty.SliderValueProperty(@NotNull JSlider slider)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}