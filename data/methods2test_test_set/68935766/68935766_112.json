{"test_class": {"identifier": "MapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Mapper<String, String> mapper = new Mapper<>();", "modifier": "", "type": "Mapper<String, String>", "declarator": "mapper = new Mapper<>()", "var_name": "mapper"}], "file": "commons/src/test/java/com/karuslabs/commons/command/tree/MapperTest.java"}, "test_case": {"identifier": "suggestions", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void suggestions() {\n        assertNull(mapper.suggestions(null));\n    }", "signature": "void suggestions()", "full_signature": "@Test void suggestions()", "class_method_signature": "MapperTest.suggestions()", "testcase": true, "constructor": false, "invocations": ["assertNull", "suggestions"]}, "focal_class": {"identifier": "Mapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Command<?> NONE = context -> 0;", "modifier": "public static final", "type": "Command<?>", "declarator": "NONE = context -> 0", "var_name": "NONE"}, {"original_string": "public static final Predicate<?> TRUE = source -> true;", "modifier": "public static final", "type": "Predicate<?>", "declarator": "TRUE = source -> true", "var_name": "TRUE"}, {"original_string": "public static final SuggestionProvider<?> EMPTY = (suggestions, builder) -> builder.buildFuture();", "modifier": "public static final", "type": "SuggestionProvider<?>", "declarator": "EMPTY = (suggestions, builder) -> builder.buildFuture()", "var_name": "EMPTY"}], "methods": [{"identifier": "map", "parameters": "(CommandNode<T> command)", "modifiers": "public", "return": "CommandNode<R>", "signature": "CommandNode<R> map(CommandNode<T> command)", "full_signature": "public CommandNode<R> map(CommandNode<T> command)", "class_method_signature": "Mapper.map(CommandNode<T> command)", "testcase": false, "constructor": false}, {"identifier": "argument", "parameters": "(CommandNode<T> command)", "modifiers": "@VisibleForOverride protected", "return": "CommandNode<R>", "signature": "CommandNode<R> argument(CommandNode<T> command)", "full_signature": "@VisibleForOverride protected CommandNode<R> argument(CommandNode<T> command)", "class_method_signature": "Mapper.argument(CommandNode<T> command)", "testcase": false, "constructor": false}, {"identifier": "literal", "parameters": "(CommandNode<T> command)", "modifiers": "@VisibleForOverride protected", "return": "CommandNode<R>", "signature": "CommandNode<R> literal(CommandNode<T> command)", "full_signature": "@VisibleForOverride protected CommandNode<R> literal(CommandNode<T> command)", "class_method_signature": "Mapper.literal(CommandNode<T> command)", "testcase": false, "constructor": false}, {"identifier": "root", "parameters": "(CommandNode<T> command)", "modifiers": "@VisibleForOverride protected", "return": "CommandNode<R>", "signature": "CommandNode<R> root(CommandNode<T> command)", "full_signature": "@VisibleForOverride protected CommandNode<R> root(CommandNode<T> command)", "class_method_signature": "Mapper.root(CommandNode<T> command)", "testcase": false, "constructor": false}, {"identifier": "otherwise", "parameters": "(CommandNode<T> command)", "modifiers": "@VisibleForOverride protected", "return": "CommandNode<R>", "signature": "CommandNode<R> otherwise(CommandNode<T> command)", "full_signature": "@VisibleForOverride protected CommandNode<R> otherwise(CommandNode<T> command)", "class_method_signature": "Mapper.otherwise(CommandNode<T> command)", "testcase": false, "constructor": false}, {"identifier": "type", "parameters": "(ArgumentCommandNode<T, ?> command)", "modifiers": "@VisibleForOverride protected", "return": "ArgumentType<?>", "signature": "ArgumentType<?> type(ArgumentCommandNode<T, ?> command)", "full_signature": "@VisibleForOverride protected ArgumentType<?> type(ArgumentCommandNode<T, ?> command)", "class_method_signature": "Mapper.type(ArgumentCommandNode<T, ?> command)", "testcase": false, "constructor": false}, {"identifier": "execution", "parameters": "(CommandNode<T> command)", "modifiers": "@VisibleForOverride protected", "return": "Command<R>", "signature": "Command<R> execution(CommandNode<T> command)", "full_signature": "@VisibleForOverride protected Command<R> execution(CommandNode<T> command)", "class_method_signature": "Mapper.execution(CommandNode<T> command)", "testcase": false, "constructor": false}, {"identifier": "requirement", "parameters": "(CommandNode<T> command)", "modifiers": "@VisibleForOverride protected", "return": "Predicate<R>", "signature": "Predicate<R> requirement(CommandNode<T> command)", "full_signature": "@VisibleForOverride protected Predicate<R> requirement(CommandNode<T> command)", "class_method_signature": "Mapper.requirement(CommandNode<T> command)", "testcase": false, "constructor": false}, {"identifier": "suggestions", "parameters": "(ArgumentCommandNode<T, ?> command)", "modifiers": "@VisibleForOverride protected @Nullable", "return": "SuggestionProvider<R>", "signature": "SuggestionProvider<R> suggestions(ArgumentCommandNode<T, ?> command)", "full_signature": "@VisibleForOverride protected @Nullable SuggestionProvider<R> suggestions(ArgumentCommandNode<T, ?> command)", "class_method_signature": "Mapper.suggestions(ArgumentCommandNode<T, ?> command)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/tree/Mapper.java"}, "focal_method": {"identifier": "suggestions", "parameters": "(ArgumentCommandNode<T, ?> command)", "modifiers": "@VisibleForOverride protected @Nullable", "return": "SuggestionProvider<R>", "body": "@VisibleForOverride\n    protected @Nullable SuggestionProvider<R> suggestions(ArgumentCommandNode<T, ?> command) {\n        return null;\n    }", "signature": "SuggestionProvider<R> suggestions(ArgumentCommandNode<T, ?> command)", "full_signature": "@VisibleForOverride protected @Nullable SuggestionProvider<R> suggestions(ArgumentCommandNode<T, ?> command)", "class_method_signature": "Mapper.suggestions(ArgumentCommandNode<T, ?> command)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}