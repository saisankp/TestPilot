{"test_class": {"identifier": "MapMouseEventTest", "superclass": "extends GraphicsTestBase", "interfaces": "", "fields": [{"original_string": "private static final double TOL = 1.0e-6;", "modifier": "private static final", "type": "double", "declarator": "TOL = 1.0e-6", "var_name": "TOL"}, {"original_string": "private static final Rectangle SCREEN = new Rectangle(100, 100);", "modifier": "private static final", "type": "Rectangle", "declarator": "SCREEN = new Rectangle(100, 100)", "var_name": "SCREEN"}, {"original_string": "private static final ReferencedEnvelope WORLD = new ReferencedEnvelope(\n            149.0, 153.0, -33, -35, DefaultGeographicCRS.WGS84);", "modifier": "private static final", "type": "ReferencedEnvelope", "declarator": "WORLD = new ReferencedEnvelope(\n            149.0, 153.0, -33, -35, DefaultGeographicCRS.WGS84)", "var_name": "WORLD"}, {"original_string": "private static final int x = SCREEN.width / 2;", "modifier": "private static final", "type": "int", "declarator": "x = SCREEN.width / 2", "var_name": "x"}, {"original_string": "private static final int y = SCREEN.height / 2;", "modifier": "private static final", "type": "int", "declarator": "y = SCREEN.height / 2", "var_name": "y"}, {"original_string": "private MockMapPane pane;", "modifier": "private", "type": "MockMapPane", "declarator": "pane", "var_name": "pane"}, {"original_string": "private MouseEvent ev;", "modifier": "private", "type": "MouseEvent", "declarator": "ev", "var_name": "ev"}, {"original_string": "private MapMouseEvent mapEv;", "modifier": "private", "type": "MapMouseEvent", "declarator": "mapEv", "var_name": "mapEv"}], "file": "modules/unsupported/swing/src/test/java/org/geotools/swing/event/MapMouseEventTest.java"}, "test_case": {"identifier": "getEnvelopeByWorld", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getEnvelopeByWorld() throws Exception {\n        final double w = 0.1;\n        AffineTransform tr = pane.getMapContent().getViewport().getScreenToWorld();\n        Point2D p = new Point2D.Double(x, y);\n        tr.transform(p, p);\n        Rectangle2D expected = new Rectangle2D.Double(p.getX() - w/2, p.getY() - w/2, w, w);\n        \n        createEvent(x, y);\n        ReferencedEnvelope actual = mapEv.getEnvelopeByWorld(0.1);\n        \n        assertRect(expected, actual);\n    }", "signature": "void getEnvelopeByWorld()", "full_signature": "@Test public void getEnvelopeByWorld()", "class_method_signature": "MapMouseEventTest.getEnvelopeByWorld()", "testcase": true, "constructor": false, "invocations": ["getScreenToWorld", "getViewport", "getMapContent", "transform", "getX", "getY", "createEvent", "getEnvelopeByWorld", "assertRect"]}, "focal_class": {"identifier": "MapMouseEvent", "superclass": "extends MouseEvent", "interfaces": "", "fields": [{"original_string": "private final DirectPosition2D worldCoords;", "modifier": "private final", "type": "DirectPosition2D", "declarator": "worldCoords", "var_name": "worldCoords"}, {"original_string": "private final boolean isWheelEvent;", "modifier": "private final", "type": "boolean", "declarator": "isWheelEvent", "var_name": "isWheelEvent"}, {"original_string": "private final int wheelAmount;", "modifier": "private final", "type": "int", "declarator": "wheelAmount", "var_name": "wheelAmount"}], "methods": [{"identifier": "MapMouseEvent", "parameters": "(MapPane pane, MouseEvent event)", "modifiers": "public", "return": "", "signature": " MapMouseEvent(MapPane pane, MouseEvent event)", "full_signature": "public  MapMouseEvent(MapPane pane, MouseEvent event)", "class_method_signature": "MapMouseEvent.MapMouseEvent(MapPane pane, MouseEvent event)", "testcase": false, "constructor": true}, {"identifier": "MapMouseEvent", "parameters": "(MapPane pane, MouseWheelEvent event)", "modifiers": "public", "return": "", "signature": " MapMouseEvent(MapPane pane, MouseWheelEvent event)", "full_signature": "public  MapMouseEvent(MapPane pane, MouseWheelEvent event)", "class_method_signature": "MapMouseEvent.MapMouseEvent(MapPane pane, MouseWheelEvent event)", "testcase": false, "constructor": true}, {"identifier": "getSource", "parameters": "()", "modifiers": "@Override public", "return": "MapPane", "signature": "MapPane getSource()", "full_signature": "@Override public MapPane getSource()", "class_method_signature": "MapMouseEvent.getSource()", "testcase": false, "constructor": false}, {"identifier": "isWheelEvent", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isWheelEvent()", "full_signature": "public boolean isWheelEvent()", "class_method_signature": "MapMouseEvent.isWheelEvent()", "testcase": false, "constructor": false}, {"identifier": "getWheelAmount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getWheelAmount()", "full_signature": "public int getWheelAmount()", "class_method_signature": "MapMouseEvent.getWheelAmount()", "testcase": false, "constructor": false}, {"identifier": "getMapPosition", "parameters": "()", "modifiers": "public", "return": "DirectPosition2D", "signature": "DirectPosition2D getMapPosition()", "full_signature": "public DirectPosition2D getMapPosition()", "class_method_signature": "MapMouseEvent.getMapPosition()", "testcase": false, "constructor": false}, {"identifier": "getWorldPos", "parameters": "()", "modifiers": "public", "return": "DirectPosition2D", "signature": "DirectPosition2D getWorldPos()", "full_signature": "public DirectPosition2D getWorldPos()", "class_method_signature": "MapMouseEvent.getWorldPos()", "testcase": false, "constructor": false}, {"identifier": "getEnvelopeByWorld", "parameters": "(double widthWorld)", "modifiers": "public", "return": "ReferencedEnvelope", "signature": "ReferencedEnvelope getEnvelopeByWorld(double widthWorld)", "full_signature": "public ReferencedEnvelope getEnvelopeByWorld(double widthWorld)", "class_method_signature": "MapMouseEvent.getEnvelopeByWorld(double widthWorld)", "testcase": false, "constructor": false}, {"identifier": "getEnvelopeByPixels", "parameters": "(double widthPixels)", "modifiers": "public", "return": "ReferencedEnvelope", "signature": "ReferencedEnvelope getEnvelopeByPixels(double widthPixels)", "full_signature": "public ReferencedEnvelope getEnvelopeByPixels(double widthPixels)", "class_method_signature": "MapMouseEvent.getEnvelopeByPixels(double widthPixels)", "testcase": false, "constructor": false}, {"identifier": "calculateWorldPos", "parameters": "(MapPane pane, MouseEvent event)", "modifiers": "private", "return": "DirectPosition2D", "signature": "DirectPosition2D calculateWorldPos(MapPane pane, MouseEvent event)", "full_signature": "private DirectPosition2D calculateWorldPos(MapPane pane, MouseEvent event)", "class_method_signature": "MapMouseEvent.calculateWorldPos(MapPane pane, MouseEvent event)", "testcase": false, "constructor": false}], "file": "modules/unsupported/swing/src/main/java/org/geotools/swing/event/MapMouseEvent.java"}, "focal_method": {"identifier": "getEnvelopeByWorld", "parameters": "(double widthWorld)", "modifiers": "public", "return": "ReferencedEnvelope", "body": "public ReferencedEnvelope getEnvelopeByWorld(double widthWorld) {\n        if (widthWorld < 0) {\n            throw new IllegalArgumentException(\"invalid value for widthWorld: \" + widthWorld);\n        }\n        \n        double halfw = widthWorld / 2;\n        DirectPosition2D worldPos = getWorldPos();\n        return new ReferencedEnvelope(\n                worldPos.x - halfw, worldPos.x + halfw,\n                worldPos.y - halfw, worldPos.y + halfw,\n                worldPos.getCoordinateReferenceSystem());\n    }", "signature": "ReferencedEnvelope getEnvelopeByWorld(double widthWorld)", "full_signature": "public ReferencedEnvelope getEnvelopeByWorld(double widthWorld)", "class_method_signature": "MapMouseEvent.getEnvelopeByWorld(double widthWorld)", "testcase": false, "constructor": false, "invocations": ["getWorldPos", "getCoordinateReferenceSystem"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}