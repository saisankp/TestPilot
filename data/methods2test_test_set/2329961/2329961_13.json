{"test_class": {"identifier": "CloudnameServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final CloudnameBackend memoryBackend = BackendManager.getBackend(\"memory://\");", "modifier": "private static final", "type": "CloudnameBackend", "declarator": "memoryBackend = BackendManager.getBackend(\"memory://\")", "var_name": "memoryBackend"}, {"original_string": "private final ServiceCoordinate coordinate = ServiceCoordinate.parse(\"service.tag.region\");", "modifier": "private final", "type": "ServiceCoordinate", "declarator": "coordinate = ServiceCoordinate.parse(\"service.tag.region\")", "var_name": "coordinate"}, {"original_string": "private static final int MAX_WAIT_S = 1;", "modifier": "private static final", "type": "int", "declarator": "MAX_WAIT_S = 1", "var_name": "MAX_WAIT_S"}, {"original_string": "private final Random random = new Random();", "modifier": "private final", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}], "file": "cn-service/src/test/java/org/cloudname/service/CloudnameServiceTest.java"}, "test_case": {"identifier": "coordinateCanNotBeNullWhenAddingListener", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void coordinateCanNotBeNullWhenAddingListener() {\n        new CloudnameService(memoryBackend).addServiceListener(null, null);\n    }", "signature": "void coordinateCanNotBeNullWhenAddingListener()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void coordinateCanNotBeNullWhenAddingListener()", "class_method_signature": "CloudnameServiceTest.coordinateCanNotBeNullWhenAddingListener()", "testcase": true, "constructor": false, "invocations": ["addServiceListener"]}, "focal_class": {"identifier": "CloudnameService", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(CloudnameService.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(CloudnameService.class.getName())", "var_name": "LOG"}, {"original_string": "private final CloudnameBackend backend;", "modifier": "private final", "type": "CloudnameBackend", "declarator": "backend", "var_name": "backend"}, {"original_string": "private final List<ServiceHandle> handles = new ArrayList<>();", "modifier": "private final", "type": "List<ServiceHandle>", "declarator": "handles = new ArrayList<>()", "var_name": "handles"}, {"original_string": "private final List<LeaseListener> temporaryListeners = new ArrayList<>();", "modifier": "private final", "type": "List<LeaseListener>", "declarator": "temporaryListeners = new ArrayList<>()", "var_name": "temporaryListeners"}, {"original_string": "private final List<LeaseListener> permanentListeners = new ArrayList<>();", "modifier": "private final", "type": "List<LeaseListener>", "declarator": "permanentListeners = new ArrayList<>()", "var_name": "permanentListeners"}, {"original_string": "private final Set<ServiceCoordinate> permanentUpdatesInProgress = new CopyOnWriteArraySet<>();", "modifier": "private final", "type": "Set<ServiceCoordinate>", "declarator": "permanentUpdatesInProgress = new CopyOnWriteArraySet<>()", "var_name": "permanentUpdatesInProgress"}, {"original_string": "private final Object syncObject = new Object();", "modifier": "private final", "type": "Object", "declarator": "syncObject = new Object()", "var_name": "syncObject"}, {"original_string": "private final Random random = new Random();", "modifier": "private final", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}, {"original_string": "private static final int MAX_COORDINATE_RETRIES = 10;", "modifier": "private static final", "type": "int", "declarator": "MAX_COORDINATE_RETRIES = 10", "var_name": "MAX_COORDINATE_RETRIES"}], "methods": [{"identifier": "CloudnameService", "parameters": "(final CloudnameBackend backend)", "modifiers": "public", "return": "", "signature": " CloudnameService(final CloudnameBackend backend)", "full_signature": "public  CloudnameService(final CloudnameBackend backend)", "class_method_signature": "CloudnameService.CloudnameService(final CloudnameBackend backend)", "testcase": false, "constructor": true}, {"identifier": "registerService", "parameters": "(\n            final ServiceCoordinate serviceCoordinate, final ServiceData serviceData)", "modifiers": "public", "return": "ServiceHandle", "signature": "ServiceHandle registerService(\n            final ServiceCoordinate serviceCoordinate, final ServiceData serviceData)", "full_signature": "public ServiceHandle registerService(\n            final ServiceCoordinate serviceCoordinate, final ServiceData serviceData)", "class_method_signature": "CloudnameService.registerService(\n            final ServiceCoordinate serviceCoordinate, final ServiceData serviceData)", "testcase": false, "constructor": false}, {"identifier": "addServiceListener", "parameters": "(\n            final ServiceCoordinate coordinate, final ServiceListener listener)", "modifiers": "public", "return": "void", "signature": "void addServiceListener(\n            final ServiceCoordinate coordinate, final ServiceListener listener)", "full_signature": "public void addServiceListener(\n            final ServiceCoordinate coordinate, final ServiceListener listener)", "class_method_signature": "CloudnameService.addServiceListener(\n            final ServiceCoordinate coordinate, final ServiceListener listener)", "testcase": false, "constructor": false}, {"identifier": "createPermanentService", "parameters": "(\n            final ServiceCoordinate coordinate, final Endpoint endpoint)", "modifiers": "public", "return": "boolean", "signature": "boolean createPermanentService(\n            final ServiceCoordinate coordinate, final Endpoint endpoint)", "full_signature": "public boolean createPermanentService(\n            final ServiceCoordinate coordinate, final Endpoint endpoint)", "class_method_signature": "CloudnameService.createPermanentService(\n            final ServiceCoordinate coordinate, final Endpoint endpoint)", "testcase": false, "constructor": false}, {"identifier": "updatePermanentService", "parameters": "(\n            final ServiceCoordinate coordinate, final Endpoint endpoint)", "modifiers": "public", "return": "boolean", "signature": "boolean updatePermanentService(\n            final ServiceCoordinate coordinate, final Endpoint endpoint)", "full_signature": "public boolean updatePermanentService(\n            final ServiceCoordinate coordinate, final Endpoint endpoint)", "class_method_signature": "CloudnameService.updatePermanentService(\n            final ServiceCoordinate coordinate, final Endpoint endpoint)", "testcase": false, "constructor": false}, {"identifier": "removePermanentService", "parameters": "(final ServiceCoordinate coordinate)", "modifiers": "public", "return": "boolean", "signature": "boolean removePermanentService(final ServiceCoordinate coordinate)", "full_signature": "public boolean removePermanentService(final ServiceCoordinate coordinate)", "class_method_signature": "CloudnameService.removePermanentService(final ServiceCoordinate coordinate)", "testcase": false, "constructor": false}, {"identifier": "addPermanentServiceListener", "parameters": "(\n            final ServiceCoordinate coordinate, final PermanentServiceListener listener)", "modifiers": "public", "return": "void", "signature": "void addPermanentServiceListener(\n            final ServiceCoordinate coordinate, final PermanentServiceListener listener)", "full_signature": "public void addPermanentServiceListener(\n            final ServiceCoordinate coordinate, final PermanentServiceListener listener)", "class_method_signature": "CloudnameService.addPermanentServiceListener(\n            final ServiceCoordinate coordinate, final PermanentServiceListener listener)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "CloudnameService.close()", "testcase": false, "constructor": false}], "file": "cn-service/src/main/java/org/cloudname/service/CloudnameService.java"}, "focal_method": {"identifier": "addServiceListener", "parameters": "(\n            final ServiceCoordinate coordinate, final ServiceListener listener)", "modifiers": "public", "return": "void", "body": "public void addServiceListener(\n            final ServiceCoordinate coordinate, final ServiceListener listener) {\n        if (coordinate == null) {\n            throw new IllegalArgumentException(\"Coordinate can not be null\");\n        }\n        if (listener == null) {\n            throw new IllegalArgumentException(\"Listener can not be null\");\n        }\n        // Just create the corresponding listener on the backend and translate the parameters\n        // from the listener.\n        final LeaseListener leaseListener = new LeaseListener() {\n            @Override\n            public void leaseCreated(final CloudnamePath path, final String data) {\n                final InstanceCoordinate instanceCoordinate = new InstanceCoordinate(path);\n                final ServiceData serviceData = ServiceData.fromJsonString(data);\n                listener.onServiceCreated(instanceCoordinate, serviceData);\n            }\n\n            @Override\n            public void leaseRemoved(final CloudnamePath path) {\n                final InstanceCoordinate instanceCoordinate = new InstanceCoordinate(path);\n                listener.onServiceRemoved(instanceCoordinate);\n            }\n\n            @Override\n            public void dataChanged(final CloudnamePath path, final String data) {\n                final InstanceCoordinate instanceCoordinate = new InstanceCoordinate(path);\n                final ServiceData serviceData = ServiceData.fromJsonString(data);\n                listener.onServiceDataChanged(instanceCoordinate, serviceData);\n            }\n        };\n        synchronized (syncObject) {\n            temporaryListeners.add(leaseListener);\n        }\n        backend.addLeaseCollectionListener(coordinate.toCloudnamePath(), leaseListener);\n    }", "signature": "void addServiceListener(\n            final ServiceCoordinate coordinate, final ServiceListener listener)", "full_signature": "public void addServiceListener(\n            final ServiceCoordinate coordinate, final ServiceListener listener)", "class_method_signature": "CloudnameService.addServiceListener(\n            final ServiceCoordinate coordinate, final ServiceListener listener)", "testcase": false, "constructor": false, "invocations": ["fromJsonString", "onServiceCreated", "onServiceRemoved", "fromJsonString", "onServiceDataChanged", "add", "addLeaseCollectionListener", "toCloudnamePath"]}, "repository": {"repo_id": 2329961, "url": "https://github.com/Cloudname/cloudname", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 21, "size": 26031, "license": "licensed"}}