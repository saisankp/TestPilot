{"test_class": {"identifier": "FindEventsCommandExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private DlmsHelper dlmsHelper;", "modifier": "@Mock\n    private", "type": "DlmsHelper", "declarator": "dlmsHelper", "var_name": "dlmsHelper"}, {"original_string": "@Mock\n    private DlmsDevice dlmsDevice;", "modifier": "@Mock\n    private", "type": "DlmsDevice", "declarator": "dlmsDevice", "var_name": "dlmsDevice"}, {"original_string": "@Mock\n    private DlmsConnectionManager conn;", "modifier": "@Mock\n    private", "type": "DlmsConnectionManager", "declarator": "conn", "var_name": "conn"}, {"original_string": "@Mock\n    private DlmsMessageListener dlmsMessageListener;", "modifier": "@Mock\n    private", "type": "DlmsMessageListener", "declarator": "dlmsMessageListener", "var_name": "dlmsMessageListener"}, {"original_string": "@Mock\n    private DlmsConnection dlmsConnection;", "modifier": "@Mock\n    private", "type": "DlmsConnection", "declarator": "dlmsConnection", "var_name": "dlmsConnection"}, {"original_string": "@Mock\n    private DataObject resultData;", "modifier": "@Mock\n    private", "type": "DataObject", "declarator": "resultData", "var_name": "resultData"}, {"original_string": "@Mock\n    private GetResult getResult;", "modifier": "@Mock\n    private", "type": "GetResult", "declarator": "getResult", "var_name": "getResult"}, {"original_string": "private FindEventsRequestDto findEventsRequestDto;", "modifier": "private", "type": "FindEventsRequestDto", "declarator": "findEventsRequestDto", "var_name": "findEventsRequestDto"}, {"original_string": "private DataObjectToEventListConverter dataObjectToEventListConverter;", "modifier": "private", "type": "DataObjectToEventListConverter", "declarator": "dataObjectToEventListConverter", "var_name": "dataObjectToEventListConverter"}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/misc/FindEventsCommandExecutorTest.java"}, "test_case": {"identifier": "testEmptyGetResult", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyGetResult() throws ProtocolAdapterException, IOException {\n\n        when(this.dlmsConnection.get(any(AttributeAddress.class))).thenReturn(null);\n\n        assertThatExceptionOfType(ProtocolAdapterException.class).isThrownBy(() -> {\n            new FindEventsCommandExecutor(this.dlmsHelper, this.dataObjectToEventListConverter).execute(this.conn,\n                    this.dlmsDevice, this.findEventsRequestDto);\n        });\n    }", "signature": "void testEmptyGetResult()", "full_signature": "@Test public void testEmptyGetResult()", "class_method_signature": "FindEventsCommandExecutorTest.testEmptyGetResult()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "get", "any", "isThrownBy", "assertThatExceptionOfType", "execute"]}, "focal_class": {"identifier": "FindEventsCommandExecutor", "superclass": "extends AbstractCommandExecutor<FindEventsRequestDto, List<EventDto>>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(FindEventsCommandExecutor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FindEventsCommandExecutor.class)", "var_name": "LOGGER"}, {"original_string": "private static final int CLASS_ID = 7;", "modifier": "private static final", "type": "int", "declarator": "CLASS_ID = 7", "var_name": "CLASS_ID"}, {"original_string": "private static final int ATTRIBUTE_ID = 2;", "modifier": "private static final", "type": "int", "declarator": "ATTRIBUTE_ID = 2", "var_name": "ATTRIBUTE_ID"}, {"original_string": "private static final int CLASS_ID_CLOCK = 8;", "modifier": "private static final", "type": "int", "declarator": "CLASS_ID_CLOCK = 8", "var_name": "CLASS_ID_CLOCK"}, {"original_string": "private static final byte[] OBIS_BYTES_CLOCK = new byte[] { 0, 0, 1, 0, 0, (byte) 255 };", "modifier": "private static final", "type": "byte[]", "declarator": "OBIS_BYTES_CLOCK = new byte[] { 0, 0, 1, 0, 0, (byte) 255 }", "var_name": "OBIS_BYTES_CLOCK"}, {"original_string": "private static final byte ATTRIBUTE_ID_TIME = 2;", "modifier": "private static final", "type": "byte", "declarator": "ATTRIBUTE_ID_TIME = 2", "var_name": "ATTRIBUTE_ID_TIME"}, {"original_string": "private static final int ACCESS_SELECTOR_RANGE_DESCRIPTOR = 1;", "modifier": "private static final", "type": "int", "declarator": "ACCESS_SELECTOR_RANGE_DESCRIPTOR = 1", "var_name": "ACCESS_SELECTOR_RANGE_DESCRIPTOR"}, {"original_string": "private final DataObjectToEventListConverter dataObjectToEventListConverter;", "modifier": "private final", "type": "DataObjectToEventListConverter", "declarator": "dataObjectToEventListConverter", "var_name": "dataObjectToEventListConverter"}, {"original_string": "private final DlmsHelper dlmsHelper;", "modifier": "private final", "type": "DlmsHelper", "declarator": "dlmsHelper", "var_name": "dlmsHelper"}, {"original_string": "private static final EnumMap<EventLogCategoryDto, ObisCode> EVENT_LOG_CATEGORY_OBISCODE_MAP = new EnumMap<>(\n            EventLogCategoryDto.class);", "modifier": "private static final", "type": "EnumMap<EventLogCategoryDto, ObisCode>", "declarator": "EVENT_LOG_CATEGORY_OBISCODE_MAP = new EnumMap<>(\n            EventLogCategoryDto.class)", "var_name": "EVENT_LOG_CATEGORY_OBISCODE_MAP"}], "methods": [{"identifier": "FindEventsCommandExecutor", "parameters": "(final DlmsHelper dlmsHelper,\n            final DataObjectToEventListConverter dataObjectToEventListConverter)", "modifiers": "@Autowired public", "return": "", "signature": " FindEventsCommandExecutor(final DlmsHelper dlmsHelper,\n            final DataObjectToEventListConverter dataObjectToEventListConverter)", "full_signature": "@Autowired public  FindEventsCommandExecutor(final DlmsHelper dlmsHelper,\n            final DataObjectToEventListConverter dataObjectToEventListConverter)", "class_method_signature": "FindEventsCommandExecutor.FindEventsCommandExecutor(final DlmsHelper dlmsHelper,\n            final DataObjectToEventListConverter dataObjectToEventListConverter)", "testcase": false, "constructor": true}, {"identifier": "asBundleResponse", "parameters": "(final List<EventDto> executionResult)", "modifiers": "@Override public", "return": "ActionResponseDto", "signature": "ActionResponseDto asBundleResponse(final List<EventDto> executionResult)", "full_signature": "@Override public ActionResponseDto asBundleResponse(final List<EventDto> executionResult)", "class_method_signature": "FindEventsCommandExecutor.asBundleResponse(final List<EventDto> executionResult)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final DlmsConnectionManager conn, final DlmsDevice device,\n            final FindEventsRequestDto findEventsQuery)", "modifiers": "@Override public", "return": "List<EventDto>", "signature": "List<EventDto> execute(final DlmsConnectionManager conn, final DlmsDevice device,\n            final FindEventsRequestDto findEventsQuery)", "full_signature": "@Override public List<EventDto> execute(final DlmsConnectionManager conn, final DlmsDevice device,\n            final FindEventsRequestDto findEventsQuery)", "class_method_signature": "FindEventsCommandExecutor.execute(final DlmsConnectionManager conn, final DlmsDevice device,\n            final FindEventsRequestDto findEventsQuery)", "testcase": false, "constructor": false}, {"identifier": "getSelectiveAccessDescription", "parameters": "(final DateTime beginDateTime,\n            final DateTime endDateTime)", "modifiers": "private", "return": "SelectiveAccessDescription", "signature": "SelectiveAccessDescription getSelectiveAccessDescription(final DateTime beginDateTime,\n            final DateTime endDateTime)", "full_signature": "private SelectiveAccessDescription getSelectiveAccessDescription(final DateTime beginDateTime,\n            final DateTime endDateTime)", "class_method_signature": "FindEventsCommandExecutor.getSelectiveAccessDescription(final DateTime beginDateTime,\n            final DateTime endDateTime)", "testcase": false, "constructor": false}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/misc/FindEventsCommandExecutor.java"}, "focal_method": {"identifier": "execute", "parameters": "(final DlmsConnectionManager conn, final DlmsDevice device,\n            final FindEventsRequestDto findEventsQuery)", "modifiers": "@Override public", "return": "List<EventDto>", "body": "@Override\n    public List<EventDto> execute(final DlmsConnectionManager conn, final DlmsDevice device,\n            final FindEventsRequestDto findEventsQuery) throws ProtocolAdapterException {\n\n        final SelectiveAccessDescription selectiveAccessDescription = this\n                .getSelectiveAccessDescription(findEventsQuery.getFrom(), findEventsQuery.getUntil());\n\n        final AttributeAddress eventLogBuffer = new AttributeAddress(CLASS_ID,\n                EVENT_LOG_CATEGORY_OBISCODE_MAP.get(findEventsQuery.getEventLogCategory()), ATTRIBUTE_ID,\n                selectiveAccessDescription);\n\n        conn.getDlmsMessageListener().setDescription(\n                \"RetrieveEvents for \" + findEventsQuery.getEventLogCategory() + \" from \" + findEventsQuery.getFrom()\n                        + \" until \" + findEventsQuery.getUntil() + \", retrieve attribute: \" + JdlmsObjectToStringUtil\n                        .describeAttributes(eventLogBuffer));\n\n        final GetResult getResult;\n        try {\n            getResult = conn.getConnection().get(eventLogBuffer);\n        } catch (final IOException e) {\n            throw new ConnectionException(e);\n        }\n\n        if (getResult == null) {\n            throw new ProtocolAdapterException(\n                    \"No GetResult received while retrieving event register \" + findEventsQuery.getEventLogCategory());\n        }\n\n        if (!AccessResultCode.SUCCESS.equals(getResult.getResultCode())) {\n            LOGGER.info(\"Result of getting events for {} is {}\", findEventsQuery.getEventLogCategory(),\n                    getResult.getResultCode());\n            throw new ProtocolAdapterException(\n                    \"Getting the events for  \" + findEventsQuery.getEventLogCategory() + \" from the meter resulted in: \"\n                            + getResult.getResultCode());\n        }\n\n        final DataObject resultData = getResult.getResultData();\n        return this.dataObjectToEventListConverter.convert(resultData, findEventsQuery.getEventLogCategory());\n    }", "signature": "List<EventDto> execute(final DlmsConnectionManager conn, final DlmsDevice device,\n            final FindEventsRequestDto findEventsQuery)", "full_signature": "@Override public List<EventDto> execute(final DlmsConnectionManager conn, final DlmsDevice device,\n            final FindEventsRequestDto findEventsQuery)", "class_method_signature": "FindEventsCommandExecutor.execute(final DlmsConnectionManager conn, final DlmsDevice device,\n            final FindEventsRequestDto findEventsQuery)", "testcase": false, "constructor": false, "invocations": ["getSelectiveAccessDescription", "getFrom", "getUntil", "get", "getEventLogCategory", "setDescription", "getDlmsMessageListener", "getEventLogCategory", "getFrom", "getUntil", "describeAttributes", "get", "getConnection", "getEventLogCategory", "equals", "getResultCode", "info", "getEventLogCategory", "getResultCode", "getEventLogCategory", "getResultCode", "getResultData", "convert", "getEventLogCategory"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}