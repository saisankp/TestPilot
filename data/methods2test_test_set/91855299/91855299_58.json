{"test_class": {"identifier": "EqualityUtilsTest", "superclass": "extends UtilityClassTest<EqualityUtils>", "interfaces": "", "fields": [], "file": "api/src/test/java/edu/wpi/first/shuffleboard/api/util/EqualityUtilsTest.java"}, "test_case": {"identifier": "isEqualInvalidPrimativeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void isEqualInvalidPrimativeTest() {\n    assertThrows(UnsupportedOperationException.class, () -> EqualityUtils.isEqual(new long[0], new long[0]));\n  }", "signature": "void isEqualInvalidPrimativeTest()", "full_signature": "@Test public void isEqualInvalidPrimativeTest()", "class_method_signature": "EqualityUtilsTest.isEqualInvalidPrimativeTest()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "isEqual"]}, "focal_class": {"identifier": "EqualityUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "EqualityUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " EqualityUtils()", "full_signature": "private  EqualityUtils()", "class_method_signature": "EqualityUtils.EqualityUtils()", "testcase": false, "constructor": true}, {"identifier": "isDifferent", "parameters": "(Object o1, Object o2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDifferent(Object o1, Object o2)", "full_signature": "public static boolean isDifferent(Object o1, Object o2)", "class_method_signature": "EqualityUtils.isDifferent(Object o1, Object o2)", "testcase": false, "constructor": false}, {"identifier": "isDifferent", "parameters": "(T[] array1, T[] array2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDifferent(T[] array1, T[] array2)", "full_signature": "public static boolean isDifferent(T[] array1, T[] array2)", "class_method_signature": "EqualityUtils.isDifferent(T[] array1, T[] array2)", "testcase": false, "constructor": false}, {"identifier": "isEqual", "parameters": "(Object o1, Object o2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEqual(Object o1, Object o2)", "full_signature": "public static boolean isEqual(Object o1, Object o2)", "class_method_signature": "EqualityUtils.isEqual(Object o1, Object o2)", "testcase": false, "constructor": false}, {"identifier": "isEqual", "parameters": "(T[] array1, T[] array2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEqual(T[] array1, T[] array2)", "full_signature": "public static boolean isEqual(T[] array1, T[] array2)", "class_method_signature": "EqualityUtils.isEqual(T[] array1, T[] array2)", "testcase": false, "constructor": false}], "file": "api/src/main/java/edu/wpi/first/shuffleboard/api/util/EqualityUtils.java"}, "focal_method": {"identifier": "isEqual", "parameters": "(Object o1, Object o2)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isEqual(Object o1, Object o2) {\n    if (o1 == null || o2 == null) {\n      return o1 == o2; //NOPMD comparing objects using ==; one of these is null so PMD is being dumb\n    }\n    final Class<?> classA = o1.getClass();\n    final Class<?> classB = o2.getClass();\n\n    // check arrays\n    if (classA.isArray() && classB.isArray()) {\n      final Class<?> typeA = classA.getComponentType();\n      final Class<?> typeB = classB.getComponentType();\n      if (typeA.equals(typeB)) {\n        final Class<?> arrayType = typeA;\n        if (arrayType.isPrimitive()) {\n          // Primitive arrays\n          if (arrayType == int.class) {\n            return Arrays.equals((int[]) o1, (int[]) o2);\n          } else if (arrayType == double.class) {\n            return Arrays.equals((double[]) o1, (double[]) o2);\n          } else if (arrayType == byte.class) {\n            return Arrays.equals((byte[]) o1, (byte[]) o2);\n          } else if (arrayType == short.class) {\n            return Arrays.equals((short[]) o1, (short[]) o2);\n          } else if (arrayType == char.class) {\n            return Arrays.equals((char[]) o1, (char[]) o2);\n          } else if (arrayType == boolean.class) {\n            return Arrays.equals((boolean[]) o1, (boolean[]) o2);\n          } else if (arrayType == float.class) {\n            return Arrays.equals((float[]) o1, (float[]) o2);\n          }\n          throw new UnsupportedOperationException(\n              \"Cannot compare primitive arrays of type \" + arrayType.getSimpleName());\n        } else {\n          // Object or multi-dimensional arrays\n          return isEqual((Object[]) o1, (Object[]) o2);\n        }\n      } else {\n        // Different component types eg int[] and String[]\n        return false;\n      }\n    }\n\n    return Objects.equals(o1, o2);\n  }", "signature": "boolean isEqual(Object o1, Object o2)", "full_signature": "public static boolean isEqual(Object o1, Object o2)", "class_method_signature": "EqualityUtils.isEqual(Object o1, Object o2)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "isArray", "isArray", "getComponentType", "getComponentType", "equals", "isPrimitive", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "getSimpleName", "isEqual", "equals"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}