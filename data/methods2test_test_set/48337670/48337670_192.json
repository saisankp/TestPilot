{"test_class": {"identifier": "ExecUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/org.openhab.core.io.net/src/test/java/org/openhab/core/io/net/exec/ExecUtilTest.java"}, "test_case": {"identifier": "testBasicExecuteCommandLineAndWaitResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBasicExecuteCommandLineAndWaitResponse() {\n        final String result;\n        if (isWindowsSystem()) {\n            result = ExecUtil.executeCommandLineAndWaitResponse(\"cmd@@/c@@dir\", 1000);\n        } else {\n            result = ExecUtil.executeCommandLineAndWaitResponse(\"ls\", 1000);\n        }\n        assertNotNull(result);\n        assertNotEquals(\"\", result);\n    }", "signature": "void testBasicExecuteCommandLineAndWaitResponse()", "full_signature": "@Test public void testBasicExecuteCommandLineAndWaitResponse()", "class_method_signature": "ExecUtilTest.testBasicExecuteCommandLineAndWaitResponse()", "testcase": true, "constructor": false, "invocations": ["isWindowsSystem", "executeCommandLineAndWaitResponse", "executeCommandLineAndWaitResponse", "assertNotNull", "assertNotEquals"]}, "focal_class": {"identifier": "ExecUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(ExecUtil.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ExecUtil.class)", "var_name": "logger"}, {"original_string": "public static final String CMD_LINE_DELIMITER = \"@@\";", "modifier": "public static final", "type": "String", "declarator": "CMD_LINE_DELIMITER = \"@@\"", "var_name": "CMD_LINE_DELIMITER"}], "methods": [{"identifier": "executeCommandLine", "parameters": "(String commandLine)", "modifiers": "public static", "return": "void", "signature": "void executeCommandLine(String commandLine)", "full_signature": "public static void executeCommandLine(String commandLine)", "class_method_signature": "ExecUtil.executeCommandLine(String commandLine)", "testcase": false, "constructor": false}, {"identifier": "executeCommandLineAndWaitResponse", "parameters": "(String commandLine, int timeout)", "modifiers": "public static", "return": "String", "signature": "String executeCommandLineAndWaitResponse(String commandLine, int timeout)", "full_signature": "public static String executeCommandLineAndWaitResponse(String commandLine, int timeout)", "class_method_signature": "ExecUtil.executeCommandLineAndWaitResponse(String commandLine, int timeout)", "testcase": false, "constructor": false}, {"identifier": "internalExecute", "parameters": "(String commandLine)", "modifiers": "private static @Nullable", "return": "Process", "signature": "Process internalExecute(String commandLine)", "full_signature": "private static @Nullable Process internalExecute(String commandLine)", "class_method_signature": "ExecUtil.internalExecute(String commandLine)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java"}, "focal_method": {"identifier": "executeCommandLineAndWaitResponse", "parameters": "(String commandLine, int timeout)", "modifiers": "public static", "return": "String", "body": "public static String executeCommandLineAndWaitResponse(String commandLine, int timeout) {\n        final Process process = internalExecute(commandLine);\n        if (process != null) {\n            try {\n                process.waitFor(timeout, TimeUnit.MILLISECONDS);\n                int exitCode = process.exitValue();\n                final StringBuilder result = new StringBuilder();\n                try (final BufferedReader reader = new BufferedReader(\n                        new InputStreamReader(process.getInputStream()))) {\n                    String line = \"\";\n                    while ((line = reader.readLine()) != null) {\n                        result.append(line).append(\"\\n\");\n                    }\n                }\n                logger.debug(\"exit code '{}', result '{}'\", exitCode, result);\n                return result.toString();\n            } catch (IOException e) {\n                logger.debug(\"I/O exception occurred when executing commandLine '{}'\", commandLine, e);\n            } catch (InterruptedException e) {\n                logger.warn(\"Timeout occurred when executing commandLine '{}'\", commandLine);\n                logger.debug(\"{}\", e.getMessage(), e);\n            }\n        }\n        return null;\n    }", "signature": "String executeCommandLineAndWaitResponse(String commandLine, int timeout)", "full_signature": "public static String executeCommandLineAndWaitResponse(String commandLine, int timeout)", "class_method_signature": "ExecUtil.executeCommandLineAndWaitResponse(String commandLine, int timeout)", "testcase": false, "constructor": false, "invocations": ["internalExecute", "waitFor", "exitValue", "getInputStream", "readLine", "append", "append", "debug", "toString", "debug", "warn", "debug", "getMessage"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}