{"test_class": {"identifier": "FlowablePublishTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/flowable/FlowablePublishTest.java"}, "test_case": {"identifier": "publishFunctionCancelOuterAfterOneInnerBackpressured", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void publishFunctionCancelOuterAfterOneInnerBackpressured() {\n        final AtomicReference<Flowable<Integer>> ref = new AtomicReference<Flowable<Integer>>();\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        final TestSubscriber<Integer> ts = pp.publish(new Function<Flowable<Integer>, Publisher<Integer>>() {\n            @Override\n            public Publisher<Integer> apply(Flowable<Integer> f) throws Exception {\n                ref.set(f);\n                return Flowable.never();\n            }\n        }).test();\n\n        ref.get().subscribe(new TestSubscriber<Integer>(1L) {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n                onComplete();\n                ts.cancel();\n            }\n        });\n\n        pp.onNext(1);\n    }", "signature": "void publishFunctionCancelOuterAfterOneInnerBackpressured()", "full_signature": "@Test public void publishFunctionCancelOuterAfterOneInnerBackpressured()", "class_method_signature": "FlowablePublishTest.publishFunctionCancelOuterAfterOneInnerBackpressured()", "testcase": true, "constructor": false, "invocations": ["create", "test", "publish", "set", "never", "subscribe", "get", "onNext", "onComplete", "cancel", "onNext"]}, "focal_class": {"identifier": "FlowablePublish", "superclass": "extends ConnectableFlowable<T>", "interfaces": "implements HasUpstreamPublisher<T>", "fields": [{"original_string": "static final long CANCELLED = Long.MIN_VALUE;", "modifier": "static final", "type": "long", "declarator": "CANCELLED = Long.MIN_VALUE", "var_name": "CANCELLED"}, {"original_string": "final Flowable<T> source;", "modifier": "final", "type": "Flowable<T>", "declarator": "source", "var_name": "source"}, {"original_string": "final AtomicReference<PublishSubscriber<T>> current;", "modifier": "final", "type": "AtomicReference<PublishSubscriber<T>>", "declarator": "current", "var_name": "current"}, {"original_string": "final int bufferSize;", "modifier": "final", "type": "int", "declarator": "bufferSize", "var_name": "bufferSize"}, {"original_string": "final Publisher<T> onSubscribe;", "modifier": "final", "type": "Publisher<T>", "declarator": "onSubscribe", "var_name": "onSubscribe"}], "methods": [{"identifier": "create", "parameters": "(Flowable<T> source, final int bufferSize)", "modifiers": "public static", "return": "ConnectableFlowable<T>", "signature": "ConnectableFlowable<T> create(Flowable<T> source, final int bufferSize)", "full_signature": "public static ConnectableFlowable<T> create(Flowable<T> source, final int bufferSize)", "class_method_signature": "FlowablePublish.create(Flowable<T> source, final int bufferSize)", "testcase": false, "constructor": false}, {"identifier": "FlowablePublish", "parameters": "(Publisher<T> onSubscribe, Flowable<T> source,\n            final AtomicReference<PublishSubscriber<T>> current, int bufferSize)", "modifiers": "private", "return": "", "signature": " FlowablePublish(Publisher<T> onSubscribe, Flowable<T> source,\n            final AtomicReference<PublishSubscriber<T>> current, int bufferSize)", "full_signature": "private  FlowablePublish(Publisher<T> onSubscribe, Flowable<T> source,\n            final AtomicReference<PublishSubscriber<T>> current, int bufferSize)", "class_method_signature": "FlowablePublish.FlowablePublish(Publisher<T> onSubscribe, Flowable<T> source,\n            final AtomicReference<PublishSubscriber<T>> current, int bufferSize)", "testcase": false, "constructor": true}, {"identifier": "source", "parameters": "()", "modifiers": "@Override public", "return": "Publisher<T>", "signature": "Publisher<T> source()", "full_signature": "@Override public Publisher<T> source()", "class_method_signature": "FlowablePublish.source()", "testcase": false, "constructor": false}, {"identifier": "subscribeActual", "parameters": "(Subscriber<? super T> s)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(Subscriber<? super T> s)", "full_signature": "@Override protected void subscribeActual(Subscriber<? super T> s)", "class_method_signature": "FlowablePublish.subscribeActual(Subscriber<? super T> s)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(Consumer<? super Disposable> connection)", "modifiers": "@Override public", "return": "void", "signature": "void connect(Consumer<? super Disposable> connection)", "full_signature": "@Override public void connect(Consumer<? super Disposable> connection)", "class_method_signature": "FlowablePublish.connect(Consumer<? super Disposable> connection)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowablePublish.java"}, "focal_method": {"identifier": "create", "parameters": "(Flowable<T> source, final int bufferSize)", "modifiers": "public static", "return": "ConnectableFlowable<T>", "body": "public static <T> ConnectableFlowable<T> create(Flowable<T> source, final int bufferSize) {\n        // the current connection to source needs to be shared between the operator and its onSubscribe call\n        final AtomicReference<PublishSubscriber<T>> curr = new AtomicReference<PublishSubscriber<T>>();\n        Publisher<T> onSubscribe = new FlowablePublisher<T>(curr, bufferSize);\n        return RxJavaPlugins.onAssembly(new FlowablePublish<T>(onSubscribe, source, curr, bufferSize));\n    }", "signature": "ConnectableFlowable<T> create(Flowable<T> source, final int bufferSize)", "full_signature": "public static ConnectableFlowable<T> create(Flowable<T> source, final int bufferSize)", "class_method_signature": "FlowablePublish.create(Flowable<T> source, final int bufferSize)", "testcase": false, "constructor": false, "invocations": ["onAssembly"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}