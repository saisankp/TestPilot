{"test_class": {"identifier": "CarbonTypesDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/CarbonTypesDescriptorTest.java"}, "test_case": {"identifier": "testComplex1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testComplex1() throws Exception {\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"C(C)(C)C=C(C)C\");\n\n        IntegerArrayResult ret = (IntegerArrayResult) descriptor.calculate(mol).getValue();\n\n        Assert.assertEquals(0, ret.get(0));\n        Assert.assertEquals(0, ret.get(1));\n        Assert.assertEquals(0, ret.get(2));\n        Assert.assertEquals(1, ret.get(3));\n        Assert.assertEquals(1, ret.get(4));\n        Assert.assertEquals(4, ret.get(5));\n        Assert.assertEquals(0, ret.get(6));\n        Assert.assertEquals(1, ret.get(7));\n        Assert.assertEquals(0, ret.get(8));\n    }", "signature": "void testComplex1()", "full_signature": "@Test public void testComplex1()", "class_method_signature": "CarbonTypesDescriptorTest.testComplex1()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "getValue", "calculate", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "CarbonTypesDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private final static String[] NAMES = {\"C1SP1\", \"C2SP1\", \"C1SP2\", \"C2SP2\", \"C3SP2\", \"C1SP3\", \"C2SP3\", \"C3SP3\",\n            \"C4SP3\"                     };", "modifier": "private final static", "type": "String[]", "declarator": "NAMES = {\"C1SP1\", \"C2SP1\", \"C1SP2\", \"C2SP2\", \"C3SP2\", \"C1SP3\", \"C2SP3\", \"C3SP3\",\n            \"C4SP3\"                     }", "var_name": "NAMES"}], "methods": [{"identifier": "CarbonTypesDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " CarbonTypesDescriptor()", "full_signature": "public  CarbonTypesDescriptor()", "class_method_signature": "CarbonTypesDescriptor.CarbonTypesDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "CarbonTypesDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "CarbonTypesDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "CarbonTypesDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "CarbonTypesDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "CarbonTypesDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "CarbonTypesDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "CarbonTypesDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getHighestBondOrder", "parameters": "(IAtomContainer container, IAtom atom)", "modifiers": "private", "return": "IBond.Order", "signature": "IBond.Order getHighestBondOrder(IAtomContainer container, IAtom atom)", "full_signature": "private IBond.Order getHighestBondOrder(IAtomContainer container, IAtom atom)", "class_method_signature": "CarbonTypesDescriptor.getHighestBondOrder(IAtomContainer container, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "CarbonTypesDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/CarbonTypesDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer container) {\n        int c1sp1 = 0;\n        int c2sp1 = 0;\n        int c1sp2 = 0;\n        int c2sp2 = 0;\n        int c3sp2 = 0;\n        int c1sp3 = 0;\n        int c2sp3 = 0;\n        int c3sp3 = 0;\n        int c4sp3 = 0;\n\n        for (IAtom atom : container.atoms()) {\n            if (atom.getAtomicNumber() != IElement.C) continue;\n            List<IAtom> connectedAtoms = container.getConnectedAtomsList(atom);\n\n            int cc = 0;\n            for (IAtom connectedAtom : connectedAtoms) {\n                if (connectedAtom.getAtomicNumber() == IElement.C) cc++;\n            }\n\n            IBond.Order maxBondOrder = getHighestBondOrder(container, atom);\n\n            if (maxBondOrder == IBond.Order.TRIPLE && cc == 1)\n                c1sp1++;\n            else if (maxBondOrder == IBond.Order.TRIPLE && cc == 2)\n                c2sp1++;\n            else if (maxBondOrder == IBond.Order.DOUBLE && cc == 1)\n                c1sp2++;\n            else if (maxBondOrder == IBond.Order.DOUBLE && cc == 2)\n                c2sp2++;\n            else if (maxBondOrder == IBond.Order.DOUBLE && cc == 3)\n                c3sp2++;\n            else if (maxBondOrder == IBond.Order.SINGLE && cc == 1)\n                c1sp3++;\n            else if (maxBondOrder == IBond.Order.SINGLE && cc == 2)\n                c2sp3++;\n            else if (maxBondOrder == IBond.Order.SINGLE && cc == 3)\n                c3sp3++;\n            else if (maxBondOrder == IBond.Order.SINGLE && cc == 4) c4sp3++;\n        }\n\n        IntegerArrayResult retval = new IntegerArrayResult(9);\n        retval.add(c1sp1);\n        retval.add(c2sp1);\n        retval.add(c1sp2);\n        retval.add(c2sp2);\n        retval.add(c3sp2);\n        retval.add(c1sp3);\n        retval.add(c2sp3);\n        retval.add(c3sp3);\n        retval.add(c4sp3);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), retval,\n                getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "CarbonTypesDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["atoms", "getAtomicNumber", "getConnectedAtomsList", "getAtomicNumber", "getHighestBondOrder", "add", "add", "add", "add", "add", "add", "add", "add", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}