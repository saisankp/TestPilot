{"test_class": {"identifier": "JsonConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JsonConverter underTest;", "modifier": "private", "type": "JsonConverter", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/sequence/formatters/helper/converter/JsonConverterTest.java"}, "test_case": {"identifier": "testGetXmlFormWithValidJsonShouldReturnXml", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetXmlFormWithValidJsonShouldReturnXml() {\n        //GIVEN in setup\n        //WHEN\n        String xml = underTest.convert(\"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\"}\", \"rootElementName\");\n        //THEN\n        //two answer is accepted\n        String expectedResult1 = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><rootElementName><field2>value2</field2><field1>value1</field1></rootElementName>\";\n        String expectedResult2 = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><rootElementName><field1>value1</field1><field2>value2</field2></rootElementName>\";\n        assertTrue(xml.equals(expectedResult1) || xml.equals(expectedResult2), \"Convert from JSON to XML failed, got answer:\" + xml);\n    }", "signature": "void testGetXmlFormWithValidJsonShouldReturnXml()", "full_signature": "@Test public void testGetXmlFormWithValidJsonShouldReturnXml()", "class_method_signature": "JsonConverterTest.testGetXmlFormWithValidJsonShouldReturnXml()", "testcase": true, "constructor": false, "invocations": ["convert", "assertTrue", "equals", "equals"]}, "focal_class": {"identifier": "JsonConverter", "superclass": "", "interfaces": "implements Converter", "fields": [{"original_string": "private static final String XML_HEADER = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\";", "modifier": "private static final", "type": "String", "declarator": "XML_HEADER = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"", "var_name": "XML_HEADER"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(JsonConverter.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JsonConverter.class)", "var_name": "logger"}], "methods": [{"identifier": "convert", "parameters": "(final String json, final String rootName)", "modifiers": "@Override public", "return": "String", "signature": "String convert(final String json, final String rootName)", "full_signature": "@Override public String convert(final String json, final String rootName)", "class_method_signature": "JsonConverter.convert(final String json, final String rootName)", "testcase": false, "constructor": false}, {"identifier": "buildXMLFrom", "parameters": "(final String xmlBody, final String xmlRootName)", "modifiers": "private", "return": "String", "signature": "String buildXMLFrom(final String xmlBody, final String xmlRootName)", "full_signature": "private String buildXMLFrom(final String xmlBody, final String xmlRootName)", "class_method_signature": "JsonConverter.buildXMLFrom(final String xmlBody, final String xmlRootName)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/sequence/formatters/helper/converter/JsonConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(final String json, final String rootName)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String convert(final String json, final String rootName) {\n        String xml;\n        try {\n            JSONObject jsonObject = new JSONObject(json);\n            xml = buildXMLFrom(XML.toString(jsonObject), rootName);\n        } catch (JSONException e) {\n            logger.debug(\"Couldn't convert to XML the following JSON: \" + json, e);\n            xml = \"\";\n        }\n        return xml;\n    }", "signature": "String convert(final String json, final String rootName)", "full_signature": "@Override public String convert(final String json, final String rootName)", "class_method_signature": "JsonConverter.convert(final String json, final String rootName)", "testcase": false, "constructor": false, "invocations": ["buildXMLFrom", "toString", "debug"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}