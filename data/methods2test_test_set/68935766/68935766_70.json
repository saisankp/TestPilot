{"test_class": {"identifier": "ExceptionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final CommandListenerWrapper LISTENER = mock(CommandListenerWrapper.class);", "modifier": "static final", "type": "CommandListenerWrapper", "declarator": "LISTENER = mock(CommandListenerWrapper.class)", "var_name": "LISTENER"}, {"original_string": "CommandListenerWrapper listener = mock(CommandListenerWrapper.class);", "modifier": "", "type": "CommandListenerWrapper", "declarator": "listener = mock(CommandListenerWrapper.class)", "var_name": "listener"}, {"original_string": "EntityPlayer player = when(mock(EntityPlayer.class).getCommandListener()).thenReturn(listener).getMock();", "modifier": "", "type": "EntityPlayer", "declarator": "player = when(mock(EntityPlayer.class).getCommandListener()).thenReturn(listener).getMock()", "var_name": "player"}, {"original_string": "CommandSender sender = when(mock(CraftPlayer.class).getHandle()).thenReturn(player).getMock();", "modifier": "", "type": "CommandSender", "declarator": "sender = when(mock(CraftPlayer.class).getHandle()).thenReturn(player).getMock()", "var_name": "sender"}], "file": "commons/src/test/java/com/karuslabs/commons/command/dispatcher/ExceptionsTest.java"}, "test_case": {"identifier": "from_exception", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void from_exception() {\n        CommandSender sender = mock(CommandSender.class);\n        assertEquals(\n            \"Cannot make \" + sender + \" a vanilla command listener\",\n            assertThrows(IllegalArgumentException.class, () -> Exceptions.from(sender)).getMessage()\n        );\n    }", "signature": "void from_exception()", "full_signature": "@Test void from_exception()", "class_method_signature": "ExceptionsTest.from_exception()", "testcase": true, "constructor": false, "invocations": ["mock", "assertEquals", "getMessage", "assertThrows", "from"]}, "focal_class": {"identifier": "Exceptions", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Object[] EMPTY = new Object[0];", "modifier": "private static final", "type": "Object[]", "declarator": "EMPTY = new Object[0]", "var_name": "EMPTY"}], "methods": [{"identifier": "report", "parameters": "(CommandSender sender, CommandSyntaxException exception)", "modifiers": "static", "return": "void", "signature": "void report(CommandSender sender, CommandSyntaxException exception)", "full_signature": "static void report(CommandSender sender, CommandSyntaxException exception)", "class_method_signature": "Exceptions.report(CommandSender sender, CommandSyntaxException exception)", "testcase": false, "constructor": false}, {"identifier": "report", "parameters": "(CommandSender sender, Exception exception)", "modifiers": "static", "return": "void", "signature": "void report(CommandSender sender, Exception exception)", "full_signature": "static void report(CommandSender sender, Exception exception)", "class_method_signature": "Exceptions.report(CommandSender sender, Exception exception)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(CommandSender sender)", "modifiers": "static", "return": "CommandListenerWrapper", "signature": "CommandListenerWrapper from(CommandSender sender)", "full_signature": "static CommandListenerWrapper from(CommandSender sender)", "class_method_signature": "Exceptions.from(CommandSender sender)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/dispatcher/Exceptions.java"}, "focal_method": {"identifier": "from", "parameters": "(CommandSender sender)", "modifiers": "static", "return": "CommandListenerWrapper", "body": "static CommandListenerWrapper from(CommandSender sender) {\n        if (sender instanceof Player) {\n            return ((CraftPlayer) sender).getHandle().getCommandListener();\n            \n        } else if (sender instanceof BlockCommandSender) {\n            return ((CraftBlockCommandSender) sender).getWrapper();\n            \n        } else if (sender instanceof CommandMinecart) {\n            return ((EntityMinecartCommandBlock) ((CraftMinecartCommand) sender).getHandle()).getCommandBlock().getWrapper();\n            \n        } else if (sender instanceof RemoteConsoleCommandSender) {\n            return ((DedicatedServer) MinecraftServer.getServer()).remoteControlCommandListener.getWrapper();\n            \n        } else if (sender instanceof ConsoleCommandSender) {\n            return ((CraftServer) sender.getServer()).getServer().getServerCommandListener();\n            \n        } else if (sender instanceof ProxiedCommandSender) {\n            return ((ProxiedNativeCommandSender) sender).getHandle();\n            \n        } else {\n            throw new IllegalArgumentException(\"Cannot make \" + sender + \" a vanilla command listener\");\n        }\n    }", "signature": "CommandListenerWrapper from(CommandSender sender)", "full_signature": "static CommandListenerWrapper from(CommandSender sender)", "class_method_signature": "Exceptions.from(CommandSender sender)", "testcase": false, "constructor": false, "invocations": ["getCommandListener", "getHandle", "getWrapper", "getWrapper", "getCommandBlock", "getHandle", "getWrapper", "getServer", "getServerCommandListener", "getServer", "getServer", "getHandle"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}