{"test_class": {"identifier": "FairQueueTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FairQueue<FairQueueTestString> queue;", "modifier": "private", "type": "FairQueue<FairQueueTestString>", "declarator": "queue", "var_name": "queue"}], "file": "core/src/test/java/fr/gael/dhus/datastore/processing/fair/FairQueueTest.java"}, "test_case": {"identifier": "testIsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testIsEmpty()\n   {\n      Assert.assertEquals(queue.isEmpty(), true);\n      queue.offer(new FairQueueTestString(\"key1\", \"item1\"));\n      Assert.assertEquals(queue.isEmpty(), false);\n   }", "signature": "void testIsEmpty()", "full_signature": "@Test public void testIsEmpty()", "class_method_signature": "FairQueueTest.testIsEmpty()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "isEmpty", "offer", "assertEquals", "isEmpty"]}, "focal_class": {"identifier": "FairQueue", "superclass": "", "interfaces": "implements BlockingQueue<E>", "fields": [{"original_string": "private final AtomicInteger count = new AtomicInteger (0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "count = new AtomicInteger (0)", "var_name": "count"}, {"original_string": "private HashMap<Object, LinkedList<E>> storage;", "modifier": "private", "type": "HashMap<Object, LinkedList<E>>", "declarator": "storage", "var_name": "storage"}, {"original_string": "private List<Object> keys;", "modifier": "private", "type": "List<Object>", "declarator": "keys", "var_name": "keys"}, {"original_string": "private Object lastUsedKey = null;", "modifier": "private", "type": "Object", "declarator": "lastUsedKey = null", "var_name": "lastUsedKey"}, {"original_string": "private final ReentrantLock lock = new ReentrantLock ();", "modifier": "private final", "type": "ReentrantLock", "declarator": "lock = new ReentrantLock ()", "var_name": "lock"}, {"original_string": "private final Condition notEmpty = lock.newCondition ();", "modifier": "private final", "type": "Condition", "declarator": "notEmpty = lock.newCondition ()", "var_name": "notEmpty"}], "methods": [{"identifier": "FairQueue", "parameters": "()", "modifiers": "public", "return": "", "signature": " FairQueue()", "full_signature": "public  FairQueue()", "class_method_signature": "FairQueue.FairQueue()", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "FairQueue.size()", "testcase": false, "constructor": false}, {"identifier": "remainingCapacity", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int remainingCapacity()", "full_signature": "@Override public int remainingCapacity()", "class_method_signature": "FairQueue.remainingCapacity()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(E e)", "modifiers": "@Override public", "return": "void", "signature": "void put(E e)", "full_signature": "@Override public void put(E e)", "class_method_signature": "FairQueue.put(E e)", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(E e)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offer(E e)", "full_signature": "@Override public boolean offer(E e)", "class_method_signature": "FairQueue.offer(E e)", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(E e, long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offer(E e, long timeout, TimeUnit unit)", "full_signature": "@Override public boolean offer(E e, long timeout, TimeUnit unit)", "class_method_signature": "FairQueue.offer(E e, long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "take", "parameters": "()", "modifiers": "@Override public", "return": "E", "signature": "E take()", "full_signature": "@Override public E take()", "class_method_signature": "FairQueue.take()", "testcase": false, "constructor": false}, {"identifier": "peek", "parameters": "()", "modifiers": "@Override public", "return": "E", "signature": "E peek()", "full_signature": "@Override public E peek()", "class_method_signature": "FairQueue.peek()", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "()", "modifiers": "@Override public", "return": "E", "signature": "E poll()", "full_signature": "@Override public E poll()", "class_method_signature": "FairQueue.poll()", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "(long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "E", "signature": "E poll(long timeout, TimeUnit unit)", "full_signature": "@Override public E poll(long timeout, TimeUnit unit)", "class_method_signature": "FairQueue.poll(long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "drainTo", "parameters": "(Collection<? super E> c)", "modifiers": "@Override public", "return": "int", "signature": "int drainTo(Collection<? super E> c)", "full_signature": "@Override public int drainTo(Collection<? super E> c)", "class_method_signature": "FairQueue.drainTo(Collection<? super E> c)", "testcase": false, "constructor": false}, {"identifier": "drainTo", "parameters": "(Collection<? super E> c, int maxElements)", "modifiers": "@Override public", "return": "int", "signature": "int drainTo(Collection<? super E> c, int maxElements)", "full_signature": "@Override public int drainTo(Collection<? super E> c, int maxElements)", "class_method_signature": "FairQueue.drainTo(Collection<? super E> c, int maxElements)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "FairQueue.clear()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Object o)", "full_signature": "@Override public boolean contains(Object o)", "class_method_signature": "FairQueue.contains(Object o)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] toArray()", "full_signature": "@Override public Object[] toArray()", "class_method_signature": "FairQueue.toArray()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(T[] a)", "modifiers": "@Override public", "return": "T[]", "signature": "T[] toArray(T[] a)", "full_signature": "@Override public T[] toArray(T[] a)", "class_method_signature": "FairQueue.toArray(T[] a)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<E>", "signature": "Iterator<E> iterator()", "full_signature": "@Override public Iterator<E> iterator()", "class_method_signature": "FairQueue.iterator()", "testcase": false, "constructor": false}, {"identifier": "getNext", "parameters": "(boolean remove)", "modifiers": "private", "return": "E", "signature": "E getNext(boolean remove)", "full_signature": "private E getNext(boolean remove)", "class_method_signature": "FairQueue.getNext(boolean remove)", "testcase": false, "constructor": false}, {"identifier": "store", "parameters": "(E e)", "modifiers": "private", "return": "void", "signature": "void store(E e)", "full_signature": "private void store(E e)", "class_method_signature": "FairQueue.store(E e)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "@Override public", "return": "E", "signature": "E remove()", "full_signature": "@Override public E remove()", "class_method_signature": "FairQueue.remove()", "testcase": false, "constructor": false}, {"identifier": "element", "parameters": "()", "modifiers": "@Override public", "return": "E", "signature": "E element()", "full_signature": "@Override public E element()", "class_method_signature": "FairQueue.element()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "FairQueue.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "containsAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsAll(Collection<?> c)", "full_signature": "@Override public boolean containsAll(Collection<?> c)", "class_method_signature": "FairQueue.containsAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Collection<? extends E> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(Collection<? extends E> c)", "full_signature": "@Override public boolean addAll(Collection<? extends E> c)", "class_method_signature": "FairQueue.addAll(Collection<? extends E> c)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAll(Collection<?> c)", "full_signature": "@Override public boolean removeAll(Collection<?> c)", "class_method_signature": "FairQueue.removeAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "retainAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean retainAll(Collection<?> c)", "full_signature": "@Override public boolean retainAll(Collection<?> c)", "class_method_signature": "FairQueue.retainAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(E e)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(E e)", "full_signature": "@Override public boolean add(E e)", "class_method_signature": "FairQueue.add(E e)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(Object o)", "full_signature": "@Override public boolean remove(Object o)", "class_method_signature": "FairQueue.remove(Object o)", "testcase": false, "constructor": false}], "file": "core/src/main/java/fr/gael/dhus/datastore/processing/fair/FairQueue.java"}, "focal_method": {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n   public boolean isEmpty ()\n   {\n      return count.get () == 0;\n   }", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "FairQueue.isEmpty()", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 90016934, "url": "https://github.com/SentinelDataHub/dhus-core", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 2371, "license": "licensed"}}