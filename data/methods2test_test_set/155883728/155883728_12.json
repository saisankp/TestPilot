{"test_class": {"identifier": "OpearPackageMojoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File testOutBaseDir = new File(\"target/test-out/OpearPackageMojoTest\");", "modifier": "private final", "type": "File", "declarator": "testOutBaseDir = new File(\"target/test-out/OpearPackageMojoTest\")", "var_name": "testOutBaseDir"}, {"original_string": "private final File srcDir = new File(\"src/test/resources/OpearPackageMojoTest\");", "modifier": "private final", "type": "File", "declarator": "srcDir = new File(\"src/test/resources/OpearPackageMojoTest\")", "var_name": "srcDir"}], "file": "maven/src/test/java/net/adamcin/oakpal/maven/mojo/OpearPackageMojoTest.java"}, "test_case": {"identifier": "testShrinkWrapPlans", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShrinkWrapPlans() throws Exception {\n        final File testOutDir = new File(testOutBaseDir, \"testShrinkWrapPlans\");\n        FileUtils.deleteDirectory(testOutDir);\n        testOutDir.mkdirs();\n        final File copyTarget = new File(testOutDir, \"copied\");\n        copyTarget.mkdirs();\n\n        final String preInstallFilename = \"tmp_foo_bar.zip\";\n        final File preInstallPackage = TestPackageUtil.prepareTestPackage(preInstallFilename);\n\n        final OpearPackageMojo mojo = newMojo();\n        final MavenProject project = mock(MavenProject.class);\n        mojo.project = project;\n\n        final String expectFilename = \"sample-plan.json\";\n        final File samplePlanFile = new File(srcDir, expectFilename);\n        mojo.planFile = samplePlanFile;\n        final int addPlans = 10;\n        for (int i = 0; i < addPlans; i++) {\n            mojo.additionalPlans.add(samplePlanFile);\n        }\n\n        List<String> expectedPlanNames = new ArrayList<>();\n        expectedPlanNames.add(expectFilename);\n        for (int i = 0; i < addPlans; i++) {\n            expectedPlanNames.add(\"sample-plan_\" + (i+1) + \".json\");\n        }\n\n        Result<List<String>> planNamesResult = mojo.shrinkWrapPlans(copyTarget);\n        assertTrue(\"is success: \" + planNamesResult, planNamesResult.isSuccess());\n        assertEquals(\"expect plan names\",\n                expectedPlanNames,\n                planNamesResult.getOrDefault(Collections.emptyList()));\n        assertTrue(\"preinstall is file\", new File(copyTarget, preInstallFilename).isFile());\n        File[] otherZips = copyTarget.listFiles((dir, name) -> !preInstallFilename.equals(name) && name.endsWith(\".zip\"));\n        assertNotNull(\"other zips should not be null\", otherZips);\n        assertEquals(\"other zips should be empty\", 0, otherZips.length);\n    }", "signature": "void testShrinkWrapPlans()", "full_signature": "@Test public void testShrinkWrapPlans()", "class_method_signature": "OpearPackageMojoTest.testShrinkWrapPlans()", "testcase": true, "constructor": false, "invocations": ["deleteDirectory", "mkdirs", "mkdirs", "prepareTestPackage", "newMojo", "mock", "add", "add", "add", "shrinkWrapPlans", "assertTrue", "isSuccess", "assertEquals", "getOrDefault", "emptyList", "assertTrue", "isFile", "listFiles", "equals", "endsWith", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "OpearPackageMojo", "superclass": "extends AbstractCommonMojo", "interfaces": "", "fields": [{"original_string": "public static final String OPEAR = \"opear\";", "modifier": "public static final", "type": "String", "declarator": "OPEAR = \"opear\"", "var_name": "OPEAR"}, {"original_string": "static final String OAKPAL_GROUP_ID = \"net.adamcin.oakpal\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_GROUP_ID = \"net.adamcin.oakpal\"", "var_name": "OAKPAL_GROUP_ID"}, {"original_string": "static final String OAKPAL_API_ARTIFACT_ID = \"oakpal-api\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_API_ARTIFACT_ID = \"oakpal-api\"", "var_name": "OAKPAL_API_ARTIFACT_ID"}, {"original_string": "static final String OAKPAL_CORE_ARTIFACT_ID = \"oakpal-core\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_CORE_ARTIFACT_ID = \"oakpal-core\"", "var_name": "OAKPAL_CORE_ARTIFACT_ID"}, {"original_string": "private static final Predicate<Artifact> TEST_IS_OAKPAL_API =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_API_ARTIFACT_ID::equals));", "modifier": "private static final", "type": "Predicate<Artifact>", "declarator": "TEST_IS_OAKPAL_API =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_API_ARTIFACT_ID::equals))", "var_name": "TEST_IS_OAKPAL_API"}, {"original_string": "private static final Predicate<Artifact> TEST_IS_OAKPAL_CORE =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_CORE_ARTIFACT_ID::equals));", "modifier": "private static final", "type": "Predicate<Artifact>", "declarator": "TEST_IS_OAKPAL_CORE =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_CORE_ARTIFACT_ID::equals))", "var_name": "TEST_IS_OAKPAL_CORE"}, {"original_string": "@Component\n    ArtifactHandlerManager artifactHandlerManager;", "modifier": "@Component", "type": "ArtifactHandlerManager", "declarator": "artifactHandlerManager", "var_name": "artifactHandlerManager"}, {"original_string": "@Parameter(defaultValue = \"${project.build.finalName}\", required = true)\n    String finalName;", "modifier": "@Parameter(defaultValue = \"${project.build.finalName}\", required = true)", "type": "String", "declarator": "finalName", "var_name": "finalName"}, {"original_string": "@Parameter(defaultValue = \"${project.build.directory}/oakpal-plugin/opear-plans/plan.json\", required = true)\n    File planFile;", "modifier": "@Parameter(defaultValue = \"${project.build.directory}/oakpal-plugin/opear-plans/plan.json\", required = true)", "type": "File", "declarator": "planFile", "var_name": "planFile"}, {"original_string": "@Parameter\n    List<File> additionalPlans = new ArrayList<>();", "modifier": "@Parameter", "type": "List<File>", "declarator": "additionalPlans = new ArrayList<>()", "var_name": "additionalPlans"}, {"original_string": "@Parameter(defaultValue = \"${project.build.directory}\", required = true)\n    File outputDirectory;", "modifier": "@Parameter(defaultValue = \"${project.build.directory}\", required = true)", "type": "File", "declarator": "outputDirectory", "var_name": "outputDirectory"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "OpearPackageMojo.execute()", "testcase": false, "constructor": false}, {"identifier": "attachArtifact", "parameters": "(final @NotNull File finalFile)", "modifiers": "", "return": "Artifact", "signature": "Artifact attachArtifact(final @NotNull File finalFile)", "full_signature": " Artifact attachArtifact(final @NotNull File finalFile)", "class_method_signature": "OpearPackageMojo.attachArtifact(final @NotNull File finalFile)", "testcase": false, "constructor": false}, {"identifier": "getOwnVersion", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getOwnVersion()", "full_signature": " String getOwnVersion()", "class_method_signature": "OpearPackageMojo.getOwnVersion()", "testcase": false, "constructor": false}, {"identifier": "getBundleSymbolicName", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getBundleSymbolicName()", "full_signature": " String getBundleSymbolicName()", "class_method_signature": "OpearPackageMojo.getBundleSymbolicName()", "testcase": false, "constructor": false}, {"identifier": "getOakpalCoreVersion", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getOakpalCoreVersion()", "full_signature": " String getOakpalCoreVersion()", "class_method_signature": "OpearPackageMojo.getOakpalCoreVersion()", "testcase": false, "constructor": false}, {"identifier": "getEmbeddedLibraries", "parameters": "()", "modifiers": "", "return": "List<File>", "signature": "List<File> getEmbeddedLibraries()", "full_signature": " List<File> getEmbeddedLibraries()", "class_method_signature": "OpearPackageMojo.getEmbeddedLibraries()", "testcase": false, "constructor": false}, {"identifier": "assembleOpear", "parameters": "()", "modifiers": "", "return": "File", "signature": "File assembleOpear()", "full_signature": " File assembleOpear()", "class_method_signature": "OpearPackageMojo.assembleOpear()", "testcase": false, "constructor": false}, {"identifier": "mapDestFileNames", "parameters": "(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "modifiers": "static", "return": "Map<String, T>", "signature": "Map<String, T> mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "full_signature": "static Map<String, T> mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "class_method_signature": "OpearPackageMojo.mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "testcase": false, "constructor": false}, {"identifier": "shrinkWrapPlans", "parameters": "(final @NotNull File toDir)", "modifiers": "", "return": "Result<List<String>>", "signature": "Result<List<String>> shrinkWrapPlans(final @NotNull File toDir)", "full_signature": " Result<List<String>> shrinkWrapPlans(final @NotNull File toDir)", "class_method_signature": "OpearPackageMojo.shrinkWrapPlans(final @NotNull File toDir)", "testcase": false, "constructor": false}, {"identifier": "rewritePlan", "parameters": "(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "modifiers": "static", "return": "OakpalPlan", "signature": "OakpalPlan rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "full_signature": "static OakpalPlan rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "class_method_signature": "OpearPackageMojo.rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "testcase": false, "constructor": false}, {"identifier": "copyPlans", "parameters": "(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "modifiers": "static", "return": "Result<Map<String, OakpalPlan>>", "signature": "Result<Map<String, OakpalPlan>> copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "full_signature": "static Result<Map<String, OakpalPlan>> copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "class_method_signature": "OpearPackageMojo.copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "testcase": false, "constructor": false}, {"identifier": "copyUrlStreams", "parameters": "(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "modifiers": "static", "return": "Result<Map<URL, String>>", "signature": "Result<Map<URL, String>> copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "full_signature": "static Result<Map<URL, String>> copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "class_method_signature": "OpearPackageMojo.copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "testcase": false, "constructor": false}], "file": "maven/src/main/java/net/adamcin/oakpal/maven/mojo/OpearPackageMojo.java"}, "focal_method": {"identifier": "shrinkWrapPlans", "parameters": "(final @NotNull File toDir)", "modifiers": "", "return": "Result<List<String>>", "body": "Result<List<String>> shrinkWrapPlans(final @NotNull File toDir) {\n        final Result<List<OakpalPlan>> initialResult =\n                !(planFile != null && planFile.isFile())\n                        ? Result.success(new ArrayList<>())\n                        : Result.success(planFile)\n                        .flatMap(compose1(File::toURI, result1(URI::toURL)))\n                        .flatMap(OakpalPlan::fromJson)\n                        .map(compose1(Collections::singletonList, ArrayList::new));\n\n        final Result<List<OakpalPlan>> addedResult = initialResult.flatMap(plans ->\n                additionalPlans.stream()\n                        .map(compose1(File::toURI, result1(URI::toURL)))\n                        .collect(Result.tryCollect(Collectors.toList()))\n                        .flatMap(planUrls -> planUrls.stream()\n                                .map(OakpalPlan::fromJson)\n                                .collect(Result.logAndRestream())\n                                .collect(Result.tryCollect(Collectors.toList()))));\n\n\n        final Result<List<OakpalPlan>> allPlansResult = initialResult.flatMap(initial ->\n                addedResult.map(added -> {\n                    initial.addAll(added);\n                    return initial;\n                }));\n\n        final Result<Map<URL, String>> renamedResult = allPlansResult\n                .flatMap(plans -> copyUrlStreams(toDir, plans.stream()\n                        .flatMap(plan -> Stream.concat(\n                                plan.getPreInstallUrls().stream(),\n                                plan.getRepoInitUrls().stream()))\n                        .collect(Collectors.toList())));\n        final Result<Map<String, OakpalPlan>> rewrittenResult = renamedResult.flatMap(renamed ->\n                allPlansResult.map(allPlans -> allPlans.stream()\n                        .map(plan -> rewritePlan(toDir, renamed, plan, plan.getName()))\n                        .collect(Collectors.toList()))\n                        .flatMap(allPlans -> copyPlans(toDir, allPlans)));\n\n        return rewrittenResult.map(compose1(Map::keySet, ArrayList::new));\n    }", "signature": "Result<List<String>> shrinkWrapPlans(final @NotNull File toDir)", "full_signature": " Result<List<String>> shrinkWrapPlans(final @NotNull File toDir)", "class_method_signature": "OpearPackageMojo.shrinkWrapPlans(final @NotNull File toDir)", "testcase": false, "constructor": false, "invocations": ["isFile", "success", "map", "flatMap", "flatMap", "success", "compose1", "result1", "compose1", "flatMap", "flatMap", "collect", "map", "stream", "compose1", "result1", "tryCollect", "toList", "collect", "collect", "map", "stream", "logAndRestream", "tryCollect", "toList", "flatMap", "map", "addAll", "flatMap", "copyUrlStreams", "collect", "flatMap", "stream", "concat", "stream", "getPreInstallUrls", "stream", "getRepoInitUrls", "toList", "flatMap", "flatMap", "map", "collect", "map", "stream", "rewritePlan", "getName", "toList", "copyPlans", "map", "compose1"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}