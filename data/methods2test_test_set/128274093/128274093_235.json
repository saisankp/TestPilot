{"test_class": {"identifier": "LambdaSubscriberTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/subscribers/LambdaSubscriberTest.java"}, "test_case": {"identifier": "onNextThrowsCancelsUpstream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onNextThrowsCancelsUpstream() {\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        final List<Throwable> errors = new ArrayList<Throwable>();\n\n        pp.subscribe(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        }, new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) throws Exception {\n                errors.add(e);\n            }\n        });\n\n        assertTrue(\"No observers?!\", pp.hasSubscribers());\n        assertTrue(\"Has errors already?!\", errors.isEmpty());\n\n        pp.onNext(1);\n\n        assertFalse(\"Has observers?!\", pp.hasSubscribers());\n        assertFalse(\"No errors?!\", errors.isEmpty());\n\n        assertTrue(errors.toString(), errors.get(0) instanceof TestException);\n    }", "signature": "void onNextThrowsCancelsUpstream()", "full_signature": "@Test public void onNextThrowsCancelsUpstream()", "class_method_signature": "LambdaSubscriberTest.onNextThrowsCancelsUpstream()", "testcase": true, "constructor": false, "invocations": ["create", "subscribe", "add", "assertTrue", "hasSubscribers", "assertTrue", "isEmpty", "onNext", "assertFalse", "hasSubscribers", "assertFalse", "isEmpty", "assertTrue", "toString", "get"]}, "focal_class": {"identifier": "LambdaSubscriber", "superclass": "extends AtomicReference<Subscription>", "interfaces": "implements FlowableSubscriber<T>, Subscription, Disposable, LambdaConsumerIntrospection", "fields": [{"original_string": "private static final long serialVersionUID = -7251123623727029452L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -7251123623727029452L", "var_name": "serialVersionUID"}, {"original_string": "final Consumer<? super T> onNext;", "modifier": "final", "type": "Consumer<? super T>", "declarator": "onNext", "var_name": "onNext"}, {"original_string": "final Consumer<? super Throwable> onError;", "modifier": "final", "type": "Consumer<? super Throwable>", "declarator": "onError", "var_name": "onError"}, {"original_string": "final Action onComplete;", "modifier": "final", "type": "Action", "declarator": "onComplete", "var_name": "onComplete"}, {"original_string": "final Consumer<? super Subscription> onSubscribe;", "modifier": "final", "type": "Consumer<? super Subscription>", "declarator": "onSubscribe", "var_name": "onSubscribe"}], "methods": [{"identifier": "LambdaSubscriber", "parameters": "(Consumer<? super T> onNext, Consumer<? super Throwable> onError,\n            Action onComplete,\n            Consumer<? super Subscription> onSubscribe)", "modifiers": "public", "return": "", "signature": " LambdaSubscriber(Consumer<? super T> onNext, Consumer<? super Throwable> onError,\n            Action onComplete,\n            Consumer<? super Subscription> onSubscribe)", "full_signature": "public  LambdaSubscriber(Consumer<? super T> onNext, Consumer<? super Throwable> onError,\n            Action onComplete,\n            Consumer<? super Subscription> onSubscribe)", "class_method_signature": "LambdaSubscriber.LambdaSubscriber(Consumer<? super T> onNext, Consumer<? super Throwable> onError,\n            Action onComplete,\n            Consumer<? super Subscription> onSubscribe)", "testcase": false, "constructor": true}, {"identifier": "onSubscribe", "parameters": "(Subscription s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Subscription s)", "full_signature": "@Override public void onSubscribe(Subscription s)", "class_method_signature": "LambdaSubscriber.onSubscribe(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "LambdaSubscriber.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t)", "full_signature": "@Override public void onError(Throwable t)", "class_method_signature": "LambdaSubscriber.onError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "LambdaSubscriber.onComplete()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "LambdaSubscriber.dispose()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "LambdaSubscriber.isDisposed()", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(long n)", "modifiers": "@Override public", "return": "void", "signature": "void request(long n)", "full_signature": "@Override public void request(long n)", "class_method_signature": "LambdaSubscriber.request(long n)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "LambdaSubscriber.cancel()", "testcase": false, "constructor": false}, {"identifier": "hasCustomOnError", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasCustomOnError()", "full_signature": "@Override public boolean hasCustomOnError()", "class_method_signature": "LambdaSubscriber.hasCustomOnError()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/subscribers/LambdaSubscriber.java"}, "focal_method": {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onNext(T t) {\n        if (!isDisposed()) {\n            try {\n                onNext.accept(t);\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                get().cancel();\n                onError(e);\n            }\n        }\n    }", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "LambdaSubscriber.onNext(T t)", "testcase": false, "constructor": false, "invocations": ["isDisposed", "accept", "throwIfFatal", "cancel", "get", "onError"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}