{"test_class": {"identifier": "ArrayCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Gateway gateway;", "modifier": "private", "type": "Gateway", "declarator": "gateway", "var_name": "gateway"}, {"original_string": "private ArrayCommand command;", "modifier": "private", "type": "ArrayCommand", "declarator": "command", "var_name": "command"}, {"original_string": "private BufferedWriter writer;", "modifier": "private", "type": "BufferedWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "private StringWriter sWriter;", "modifier": "private", "type": "StringWriter", "declarator": "sWriter", "var_name": "sWriter"}, {"original_string": "private String target;", "modifier": "private", "type": "String", "declarator": "target", "var_name": "target"}, {"original_string": "private String target2;", "modifier": "private", "type": "String", "declarator": "target2", "var_name": "target2"}, {"original_string": "private Object array1;", "modifier": "private", "type": "Object", "declarator": "array1", "var_name": "array1"}, {"original_string": "private Object array2;", "modifier": "private", "type": "Object", "declarator": "array2", "var_name": "array2"}], "file": "py4j-java/src/test/java/py4j/commands/ArrayCommandTest.java"}, "test_case": {"identifier": "testSlice", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSlice() {\n\t\tint[] array3 = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n\t\tString[][] array4 = new String[][] { { \"111\", \"222\" }, { \"aaa\", \"bbb\" }, { \"88\", \"99\" } };\n\t\tgateway.putNewObject(array3);\n\t\tgateway.putNewObject(array4);\n\t\tString inputCommand = ArrayCommand.ARRAY_SLICE_SUB_COMMAND_NAME + \"\\n\" + \"o2\" + \"\\ni1\\ni5\\ne\\n\";\n\t\ttry {\n\t\t\tcommand.execute(\"a\", new BufferedReader(new StringReader(inputCommand)), writer);\n\t\t\tassertEquals(\"!yto4\\n\", sWriter.toString());\n\t\t\tint[] intarray = (int[]) gateway.getObject(\"o4\");\n\t\t\tassertEquals(2, intarray.length);\n\t\t\tassertEquals(6, intarray[1]);\n\n\t\t\tinputCommand = ArrayCommand.ARRAY_SLICE_SUB_COMMAND_NAME + \"\\n\" + \"o3\" + \"\\ni2\\ne\\n\";\n\t\t\tcommand.execute(\"a\", new BufferedReader(new StringReader(inputCommand)), writer);\n\t\t\tassertEquals(\"!yto4\\n!yto5\\n\", sWriter.toString());\n\t\t\tString[][] stringarray = (String[][]) gateway.getObject(\"o5\");\n\t\t\tassertEquals(1, stringarray.length);\n\t\t\tassertEquals(\"99\", stringarray[0][1]);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail();\n\t\t}\n\n\t}", "signature": "void testSlice()", "full_signature": "@Test public void testSlice()", "class_method_signature": "ArrayCommandTest.testSlice()", "testcase": true, "constructor": false, "invocations": ["putNewObject", "putNewObject", "execute", "assertEquals", "toString", "getObject", "assertEquals", "assertEquals", "execute", "assertEquals", "toString", "getObject", "assertEquals", "assertEquals", "printStackTrace", "fail"]}, "focal_class": {"identifier": "ArrayCommand", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "private final Logger logger = Logger.getLogger(ArrayCommand.class.getName());", "modifier": "private final", "type": "Logger", "declarator": "logger = Logger.getLogger(ArrayCommand.class.getName())", "var_name": "logger"}, {"original_string": "public static final String ARRAY_COMMAND_NAME = \"a\";", "modifier": "public static final", "type": "String", "declarator": "ARRAY_COMMAND_NAME = \"a\"", "var_name": "ARRAY_COMMAND_NAME"}, {"original_string": "public static final char ARRAY_GET_SUB_COMMAND_NAME = 'g';", "modifier": "public static final", "type": "char", "declarator": "ARRAY_GET_SUB_COMMAND_NAME = 'g'", "var_name": "ARRAY_GET_SUB_COMMAND_NAME"}, {"original_string": "public static final char ARRAY_SET_SUB_COMMAND_NAME = 's';", "modifier": "public static final", "type": "char", "declarator": "ARRAY_SET_SUB_COMMAND_NAME = 's'", "var_name": "ARRAY_SET_SUB_COMMAND_NAME"}, {"original_string": "public static final char ARRAY_SLICE_SUB_COMMAND_NAME = 'l';", "modifier": "public static final", "type": "char", "declarator": "ARRAY_SLICE_SUB_COMMAND_NAME = 'l'", "var_name": "ARRAY_SLICE_SUB_COMMAND_NAME"}, {"original_string": "public static final char ARRAY_LEN_SUB_COMMAND_NAME = 'e';", "modifier": "public static final", "type": "char", "declarator": "ARRAY_LEN_SUB_COMMAND_NAME = 'e'", "var_name": "ARRAY_LEN_SUB_COMMAND_NAME"}, {"original_string": "public static final char ARRAY_CREATE_SUB_COMMAND_NAME = 'c';", "modifier": "public static final", "type": "char", "declarator": "ARRAY_CREATE_SUB_COMMAND_NAME = 'c'", "var_name": "ARRAY_CREATE_SUB_COMMAND_NAME"}, {"original_string": "public static final String RETURN_VOID = Protocol.RETURN_MESSAGE + \"\" + Protocol.SUCCESS + \"\" + Protocol.VOID\n\t\t\t+ Protocol.END_OUTPUT;", "modifier": "public static final", "type": "String", "declarator": "RETURN_VOID = Protocol.RETURN_MESSAGE + \"\" + Protocol.SUCCESS + \"\" + Protocol.VOID\n\t\t\t+ Protocol.END_OUTPUT", "var_name": "RETURN_VOID"}], "methods": [{"identifier": "ArrayCommand", "parameters": "()", "modifiers": "public", "return": "", "signature": " ArrayCommand()", "full_signature": "public  ArrayCommand()", "class_method_signature": "ArrayCommand.ArrayCommand()", "testcase": false, "constructor": true}, {"identifier": "createArray", "parameters": "(BufferedReader reader)", "modifiers": "private", "return": "String", "signature": "String createArray(BufferedReader reader)", "full_signature": "private String createArray(BufferedReader reader)", "class_method_signature": "ArrayCommand.createArray(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String commandName, BufferedReader reader, BufferedWriter writer)", "modifiers": "@Override public", "return": "void", "signature": "void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "full_signature": "@Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "class_method_signature": "ArrayCommand.execute(String commandName, BufferedReader reader, BufferedWriter writer)", "testcase": false, "constructor": false}, {"identifier": "getArray", "parameters": "(BufferedReader reader)", "modifiers": "private", "return": "String", "signature": "String getArray(BufferedReader reader)", "full_signature": "private String getArray(BufferedReader reader)", "class_method_signature": "ArrayCommand.getArray(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "lenArray", "parameters": "(BufferedReader reader)", "modifiers": "private", "return": "String", "signature": "String lenArray(BufferedReader reader)", "full_signature": "private String lenArray(BufferedReader reader)", "class_method_signature": "ArrayCommand.lenArray(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "setArray", "parameters": "(BufferedReader reader)", "modifiers": "private", "return": "String", "signature": "String setArray(BufferedReader reader)", "full_signature": "private String setArray(BufferedReader reader)", "class_method_signature": "ArrayCommand.setArray(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "convertArgument", "parameters": "(Class<?> arrayClass, Object objectToSet)", "modifiers": "private", "return": "Object", "signature": "Object convertArgument(Class<?> arrayClass, Object objectToSet)", "full_signature": "private Object convertArgument(Class<?> arrayClass, Object objectToSet)", "class_method_signature": "ArrayCommand.convertArgument(Class<?> arrayClass, Object objectToSet)", "testcase": false, "constructor": false}, {"identifier": "sliceArray", "parameters": "(BufferedReader reader)", "modifiers": "private", "return": "String", "signature": "String sliceArray(BufferedReader reader)", "full_signature": "private String sliceArray(BufferedReader reader)", "class_method_signature": "ArrayCommand.sliceArray(BufferedReader reader)", "testcase": false, "constructor": false}], "file": "py4j-java/src/main/java/py4j/commands/ArrayCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(String commandName, BufferedReader reader, BufferedWriter writer)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(String commandName, BufferedReader reader, BufferedWriter writer)\n\t\t\tthrows Py4JException, IOException {\n\t\tchar subCommand = safeReadLine(reader).charAt(0);\n\t\tString returnCommand = null;\n\t\tif (subCommand == ARRAY_GET_SUB_COMMAND_NAME) {\n\t\t\treturnCommand = getArray(reader);\n\t\t} else if (subCommand == ARRAY_SET_SUB_COMMAND_NAME) {\n\t\t\treturnCommand = setArray(reader);\n\t\t} else if (subCommand == ARRAY_SLICE_SUB_COMMAND_NAME) {\n\t\t\treturnCommand = sliceArray(reader);\n\t\t} else if (subCommand == ARRAY_LEN_SUB_COMMAND_NAME) {\n\t\t\treturnCommand = lenArray(reader);\n\t\t} else if (subCommand == ARRAY_CREATE_SUB_COMMAND_NAME) {\n\t\t\treturnCommand = createArray(reader);\n\t\t} else {\n\t\t\treturnCommand = Protocol.getOutputErrorCommand(\"Unknown Array SubCommand Name: \" + subCommand);\n\t\t}\n\n\t\tlogger.finest(\"Returning command: \" + returnCommand);\n\t\twriter.write(returnCommand);\n\t\twriter.flush();\n\n\t}", "signature": "void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "full_signature": "@Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "class_method_signature": "ArrayCommand.execute(String commandName, BufferedReader reader, BufferedWriter writer)", "testcase": false, "constructor": false, "invocations": ["charAt", "safeReadLine", "getArray", "setArray", "sliceArray", "lenArray", "createArray", "getOutputErrorCommand", "finest", "write", "flush"]}, "repository": {"repo_id": 1045976, "url": "https://github.com/bartdag/py4j", "language": "Java", "is_fork": false, "fork_count": 141, "stargazer_count": 737, "size": 16415, "license": "licensed"}}