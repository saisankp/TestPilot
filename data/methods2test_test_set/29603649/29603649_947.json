{"test_class": {"identifier": "MessageLoggingStatusServletTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private MessageLoggingStatusServlet underTest;", "modifier": "@InjectMocks\n    private", "type": "MessageLoggingStatusServlet", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private HttpServletRequest request;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private HttpServletResponse response;", "modifier": "@Mock\n    private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    private MessageLoggingToggle messageLoggingToggle;", "modifier": "@Mock\n    private", "type": "MessageLoggingToggle", "declarator": "messageLoggingToggle", "var_name": "messageLoggingToggle"}, {"original_string": "@Mock\n    private PrintWriter printWriter;", "modifier": "@Mock\n    private", "type": "PrintWriter", "declarator": "printWriter", "var_name": "printWriter"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/config/servlet/logging/MessageLoggingStatusServletTest.java"}, "test_case": {"identifier": "testDoGetSetsResponseTypeAndWritesResponse", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testDoGetSetsResponseTypeAndWritesResponse() throws ServletException, IOException {\n        // GIVEN\n        given(response.getWriter()).willReturn(printWriter);\n        given(messageLoggingToggle.isRequestLoggingOn()).willReturn(true);\n        given(messageLoggingToggle.isResponseLoggingOn()).willReturn(true);\n        // WHEN\n        underTest.doGet(request, response);\n        // THEN\n        verify(response).setContentType(\"application/json\");\n        verify(messageLoggingToggle).isRequestLoggingOn();\n        verify(messageLoggingToggle).isResponseLoggingOn();\n        verify(printWriter).write(\"{\\\"requestLogging\\\":true,\\\"responseLogging\\\":true}\");\n    }", "signature": "void testDoGetSetsResponseTypeAndWritesResponse()", "full_signature": "@Test public final void testDoGetSetsResponseTypeAndWritesResponse()", "class_method_signature": "MessageLoggingStatusServletTest.testDoGetSetsResponseTypeAndWritesResponse()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getWriter", "willReturn", "given", "isRequestLoggingOn", "willReturn", "given", "isResponseLoggingOn", "doGet", "setContentType", "verify", "isRequestLoggingOn", "verify", "isResponseLoggingOn", "verify", "write", "verify"]}, "focal_class": {"identifier": "MessageLoggingStatusServlet", "superclass": "extends HttpServlet", "interfaces": "", "fields": [{"original_string": "private final MessageLoggingToggle messageLoggingToggle;", "modifier": "private final", "type": "MessageLoggingToggle", "declarator": "messageLoggingToggle", "var_name": "messageLoggingToggle"}], "methods": [{"identifier": "MessageLoggingStatusServlet", "parameters": "(MessageLoggingToggle messageLoggingToggle)", "modifiers": "@Autowired public", "return": "", "signature": " MessageLoggingStatusServlet(MessageLoggingToggle messageLoggingToggle)", "full_signature": "@Autowired public  MessageLoggingStatusServlet(MessageLoggingToggle messageLoggingToggle)", "class_method_signature": "MessageLoggingStatusServlet.MessageLoggingStatusServlet(MessageLoggingToggle messageLoggingToggle)", "testcase": false, "constructor": true}, {"identifier": "doGet", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "MessageLoggingStatusServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "doPost", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doPost(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "MessageLoggingStatusServlet.doPost(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/config/servlet/logging/MessageLoggingStatusServlet.java"}, "focal_method": {"identifier": "doGet", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void doGet(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {\n        resp.setContentType(\"application/json\");\n        PrintWriter out = resp.getWriter();\n        boolean requestLogOn = messageLoggingToggle.isRequestLoggingOn();\n        boolean responseLogOn = messageLoggingToggle.isResponseLoggingOn();\n        out.write(\"{\\\"requestLogging\\\":\" + requestLogOn + \",\\\"responseLogging\\\":\" + responseLogOn + \"}\");\n        out.flush();\n        out.close();\n    }", "signature": "void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "MessageLoggingStatusServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false, "invocations": ["setContentType", "getWriter", "isRequestLoggingOn", "isResponseLoggingOn", "write", "flush", "close"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}