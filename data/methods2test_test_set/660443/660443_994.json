{"test_class": {"identifier": "MolecularFormulaSetManipulatorTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private final static IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private final static", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "tool/formula/src/test/java/org/openscience/cdk/tools/manipulator/MolecularFormulaSetManipulatorTest.java"}, "test_case": {"identifier": "testContains_IMolecularFormulaSet_IMolecularFormula", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testContains_IMolecularFormulaSet_IMolecularFormula() {\n        IMolecularFormula mf1 = new MolecularFormula();\n        mf1.addIsotope(builder.newInstance(IIsotope.class, \"C\"), 4);\n        mf1.addIsotope(builder.newInstance(IIsotope.class, \"H\"), 12);\n        mf1.addIsotope(builder.newInstance(IIsotope.class, \"N\"), 1);\n        mf1.addIsotope(builder.newInstance(IIsotope.class, \"O\"), 4);\n\n        IMolecularFormula mf3 = new MolecularFormula();\n        mf3.addIsotope(builder.newInstance(IIsotope.class, \"C\"), 9);\n        mf3.addIsotope(builder.newInstance(IIsotope.class, \"H\"), 5);\n        mf3.addIsotope(builder.newInstance(IIsotope.class, \"O\"), 7);\n\n        IMolecularFormulaSet formulaSet = new MolecularFormulaSet();\n        formulaSet.addMolecularFormula(mf1);\n        formulaSet.addMolecularFormula(mf3);\n\n        IMolecularFormula mf2 = new MolecularFormula();\n        mf2.addIsotope(builder.newInstance(IIsotope.class, \"C\"), 4);\n        mf2.addIsotope(builder.newInstance(IIsotope.class, \"H\"), 12);\n        mf2.addIsotope(builder.newInstance(IIsotope.class, \"N\"), 1);\n        mf2.addIsotope(builder.newInstance(IIsotope.class, \"O\"), 4);\n\n        IMolecularFormula mf4 = new MolecularFormula();\n        mf4.addIsotope(builder.newInstance(IIsotope.class, \"C\"), 4);\n        IIsotope hyd = builder.newInstance(IIsotope.class, \"H\");\n        hyd.setExactMass(2.0032342);\n        mf4.addIsotope(hyd, 12);\n        mf4.addIsotope(builder.newInstance(IIsotope.class, \"N\"), 1);\n        mf4.addIsotope(builder.newInstance(IIsotope.class, \"O\"), 4);\n\n        Assert.assertTrue(MolecularFormulaSetManipulator.contains(formulaSet, mf2));\n        Assert.assertFalse(MolecularFormulaSetManipulator.contains(formulaSet, mf4));\n\n    }", "signature": "void testContains_IMolecularFormulaSet_IMolecularFormula()", "full_signature": "@Test public void testContains_IMolecularFormulaSet_IMolecularFormula()", "class_method_signature": "MolecularFormulaSetManipulatorTest.testContains_IMolecularFormulaSet_IMolecularFormula()", "testcase": true, "constructor": false, "invocations": ["addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addMolecularFormula", "addMolecularFormula", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "newInstance", "setExactMass", "addIsotope", "addIsotope", "newInstance", "addIsotope", "newInstance", "assertTrue", "contains", "assertFalse", "contains"]}, "focal_class": {"identifier": "MolecularFormulaSetManipulator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getMaxOccurrenceElements", "parameters": "(IMolecularFormulaSet mfSet)", "modifiers": "public static", "return": "IMolecularFormula", "signature": "IMolecularFormula getMaxOccurrenceElements(IMolecularFormulaSet mfSet)", "full_signature": "public static IMolecularFormula getMaxOccurrenceElements(IMolecularFormulaSet mfSet)", "class_method_signature": "MolecularFormulaSetManipulator.getMaxOccurrenceElements(IMolecularFormulaSet mfSet)", "testcase": false, "constructor": false}, {"identifier": "getMinOccurrenceElements", "parameters": "(IMolecularFormulaSet mfSet)", "modifiers": "public static", "return": "IMolecularFormula", "signature": "IMolecularFormula getMinOccurrenceElements(IMolecularFormulaSet mfSet)", "full_signature": "public static IMolecularFormula getMinOccurrenceElements(IMolecularFormulaSet mfSet)", "class_method_signature": "MolecularFormulaSetManipulator.getMinOccurrenceElements(IMolecularFormulaSet mfSet)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(IMolecularFormulaSet formulaSet, IMolecularFormula formulaMin,\n            IMolecularFormula formulaMax)", "modifiers": "public static", "return": "IMolecularFormulaSet", "signature": "IMolecularFormulaSet remove(IMolecularFormulaSet formulaSet, IMolecularFormula formulaMin,\n            IMolecularFormula formulaMax)", "full_signature": "public static IMolecularFormulaSet remove(IMolecularFormulaSet formulaSet, IMolecularFormula formulaMin,\n            IMolecularFormula formulaMax)", "class_method_signature": "MolecularFormulaSetManipulator.remove(IMolecularFormulaSet formulaSet, IMolecularFormula formulaMin,\n            IMolecularFormula formulaMax)", "testcase": false, "constructor": false}, {"identifier": "validCorrelation", "parameters": "(IMolecularFormula formulaMin, IMolecularFormula formulamax)", "modifiers": "private static", "return": "boolean", "signature": "boolean validCorrelation(IMolecularFormula formulaMin, IMolecularFormula formulamax)", "full_signature": "private static boolean validCorrelation(IMolecularFormula formulaMin, IMolecularFormula formulamax)", "class_method_signature": "MolecularFormulaSetManipulator.validCorrelation(IMolecularFormula formulaMin, IMolecularFormula formulamax)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(IMolecularFormulaSet formulaSet, IMolecularFormula formula)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(IMolecularFormulaSet formulaSet, IMolecularFormula formula)", "full_signature": "public static boolean contains(IMolecularFormulaSet formulaSet, IMolecularFormula formula)", "class_method_signature": "MolecularFormulaSetManipulator.contains(IMolecularFormulaSet formulaSet, IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(IMolecularFormulaSet formulaSet, MolecularFormulaRange formulaRange)", "modifiers": "public static", "return": "IMolecularFormulaSet", "signature": "IMolecularFormulaSet remove(IMolecularFormulaSet formulaSet, MolecularFormulaRange formulaRange)", "full_signature": "public static IMolecularFormulaSet remove(IMolecularFormulaSet formulaSet, MolecularFormulaRange formulaRange)", "class_method_signature": "MolecularFormulaSetManipulator.remove(IMolecularFormulaSet formulaSet, MolecularFormulaRange formulaRange)", "testcase": false, "constructor": false}], "file": "tool/formula/src/main/java/org/openscience/cdk/tools/manipulator/MolecularFormulaSetManipulator.java"}, "focal_method": {"identifier": "contains", "parameters": "(IMolecularFormulaSet formulaSet, IMolecularFormula formula)", "modifiers": "public static", "return": "boolean", "body": "public static boolean contains(IMolecularFormulaSet formulaSet, IMolecularFormula formula) {\n        for (IMolecularFormula fm : formulaSet.molecularFormulas()) {\n            if (MolecularFormulaManipulator.compare(fm, formula)) {\n                return true;\n            }\n        }\n        return false;\n    }", "signature": "boolean contains(IMolecularFormulaSet formulaSet, IMolecularFormula formula)", "full_signature": "public static boolean contains(IMolecularFormulaSet formulaSet, IMolecularFormula formula)", "class_method_signature": "MolecularFormulaSetManipulator.contains(IMolecularFormulaSet formulaSet, IMolecularFormula formula)", "testcase": false, "constructor": false, "invocations": ["molecularFormulas", "compare"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}