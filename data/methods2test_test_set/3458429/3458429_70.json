{"test_class": {"identifier": "TestNBitInteger", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-net/src/test/java/com/fireflysource/net/http/common/v2/hpack/TestNBitInteger.java"}, "test_case": {"identifier": "testOctetsNeeded", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testOctetsNeeded() {\n        assertEquals(0, NBitInteger.octectsNeeded(5, 10));\n        assertEquals(2, NBitInteger.octectsNeeded(5, 1337));\n        assertEquals(1, NBitInteger.octectsNeeded(8, 42));\n        assertEquals(3, NBitInteger.octectsNeeded(8, 1337));\n\n        assertEquals(0, NBitInteger.octectsNeeded(6, 62));\n        assertEquals(1, NBitInteger.octectsNeeded(6, 63));\n        assertEquals(1, NBitInteger.octectsNeeded(6, 64));\n        assertEquals(2, NBitInteger.octectsNeeded(6, 63 + 0x00 + 0x80 * 0x01));\n        assertEquals(3, NBitInteger.octectsNeeded(6, 63 + 0x00 + 0x80 * 0x80));\n        assertEquals(4, NBitInteger.octectsNeeded(6, 63 + 0x00 + 0x80 * 0x80 * 0x80));\n    }", "signature": "void testOctetsNeeded()", "full_signature": "@Test void testOctetsNeeded()", "class_method_signature": "TestNBitInteger.testOctetsNeeded()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "octectsNeeded", "assertEquals", "octectsNeeded", "assertEquals", "octectsNeeded", "assertEquals", "octectsNeeded", "assertEquals", "octectsNeeded", "assertEquals", "octectsNeeded", "assertEquals", "octectsNeeded", "assertEquals", "octectsNeeded", "assertEquals", "octectsNeeded", "assertEquals", "octectsNeeded"]}, "focal_class": {"identifier": "NBitInteger", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "octectsNeeded", "parameters": "(int n, int i)", "modifiers": "public static", "return": "int", "signature": "int octectsNeeded(int n, int i)", "full_signature": "public static int octectsNeeded(int n, int i)", "class_method_signature": "NBitInteger.octectsNeeded(int n, int i)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(ByteBuffer buf, int n, int i)", "modifiers": "public static", "return": "void", "signature": "void encode(ByteBuffer buf, int n, int i)", "full_signature": "public static void encode(ByteBuffer buf, int n, int i)", "class_method_signature": "NBitInteger.encode(ByteBuffer buf, int n, int i)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(ByteBuffer buffer, int n)", "modifiers": "public static", "return": "int", "signature": "int decode(ByteBuffer buffer, int n)", "full_signature": "public static int decode(ByteBuffer buffer, int n)", "class_method_signature": "NBitInteger.decode(ByteBuffer buffer, int n)", "testcase": false, "constructor": false}], "file": "firefly-net/src/main/java/com/fireflysource/net/http/common/v2/hpack/NBitInteger.java"}, "focal_method": {"identifier": "octectsNeeded", "parameters": "(int n, int i)", "modifiers": "public static", "return": "int", "body": "public static int octectsNeeded(int n, int i) {\n        if (n == 8) {\n            int nbits = 0xFF;\n            i = i - nbits;\n            if (i < 0)\n                return 1;\n            if (i == 0)\n                return 2;\n            int lz = Integer.numberOfLeadingZeros(i);\n            int log = 32 - lz;\n            return 1 + (log + 6) / 7;\n        }\n\n        int nbits = 0xFF >>> (8 - n);\n        i = i - nbits;\n        if (i < 0)\n            return 0;\n        if (i == 0)\n            return 1;\n        int lz = Integer.numberOfLeadingZeros(i);\n        int log = 32 - lz;\n        return (log + 6) / 7;\n    }", "signature": "int octectsNeeded(int n, int i)", "full_signature": "public static int octectsNeeded(int n, int i)", "class_method_signature": "NBitInteger.octectsNeeded(int n, int i)", "testcase": false, "constructor": false, "invocations": ["numberOfLeadingZeros", "numberOfLeadingZeros"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}