{"test_class": {"identifier": "StateMachineTest", "superclass": "", "interfaces": "", "fields": [], "file": "streamflyer-core/src/test/java/com/github/rwitzel/streamflyer/regex/addons/stateful/StateMachineTest.java"}, "test_case": {"identifier": "testProcess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcess() throws Exception {\n\n        List<String> foundTokens = new ArrayList<String>();\n        TokenCollector tokenCollector = new TokenCollector(foundTokens);\n\n        // +++ define the states\n        // (remember: (1) title and item are optional + (2) a list of items is possible)\n        State state0 = new State(\"Start\"); // the initial state\n        State state1 = new State(\"SectionStart\", \"<section class='abc'>\");\n        State state2 = new State(\"SectionTitle\", \"(<h1>)([^<>]*)(</h1>)\", \"$1TITLE_FOUND$3\");\n        State state3 = new State(\"ListItem\", \"(<li>)([^<>]*)(</li>)\", \"$1LIST_ITEM_FOUND$3\");\n        State state4 = new State(\"SectionEnd\", \"</section>\");\n        state0.setTransitions(asList(state1), tokenCollector);\n        state1.setTransitions(asList(state2, state3, state4), tokenCollector);\n        state2.setTransitions(asList(state3, state4), tokenCollector);\n        state3.setTransitions(asList(state3, state4), tokenCollector);\n        state4.setTransitions(asList(state1), tokenCollector);\n\n        // +++ create a processor that stores the found states and replaces some text\n        DelegatingMatcher delegatingMatcher = new DelegatingMatcher();\n        StateMachine stateMachine = new StateMachine(state0, delegatingMatcher);\n\n        // +++ create the modifier\n        Modifier modifier = new RegexModifier(delegatingMatcher, stateMachine, 1, 2048);\n\n        String input = \"\";\n        input += \"text <section class='abc'>\";\n        input += \"text <h1>my title</h1>\";\n        input += \"text <ul>\";\n        input += \"text <li>my first list item</li>\";\n        input += \"text <li>my second list item</li>\";\n        input += \"text </ul>\";\n        input += \"text </section>\";\n        input += \"text <h1>title outside section</h1>\";\n        input += \"text <li>list item outside section</li>\";\n\n        // apply the modifying reader\n        Reader reader = new ModifyingReader(new StringReader(input), modifier);\n        String foundOutput = IOUtils.toString(reader);\n\n        assertEquals(5, foundTokens.size());\n        assertEquals(\"SectionStart:<section class='abc'>\", foundTokens.get(0));\n        assertEquals(\"SectionTitle:<h1>my title</h1>\", foundTokens.get(1));\n        assertEquals(\"ListItem:<li>my first list item</li>\", foundTokens.get(2));\n        assertEquals(\"ListItem:<li>my second list item</li>\", foundTokens.get(3));\n        assertEquals(\"SectionEnd:</section>\", foundTokens.get(4));\n\n        String output = \"\";\n        output += \"text <section class='abc'>\";\n        output += \"text <h1>TITLE_FOUND</h1>\";\n        output += \"text <ul>\";\n        output += \"text <li>LIST_ITEM_FOUND</li>\";\n        output += \"text <li>LIST_ITEM_FOUND</li>\";\n        output += \"text </ul>\";\n        output += \"text </section>\";\n        output += \"text <h1>title outside section</h1>\";\n        output += \"text <li>list item outside section</li>\";\n\n        assertEquals(output, foundOutput);\n\n    }", "signature": "void testProcess()", "full_signature": "@Test public void testProcess()", "class_method_signature": "StateMachineTest.testProcess()", "testcase": true, "constructor": false, "invocations": ["setTransitions", "asList", "setTransitions", "asList", "setTransitions", "asList", "setTransitions", "asList", "setTransitions", "asList", "toString", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals"]}, "focal_class": {"identifier": "StateMachine", "superclass": "", "interfaces": "implements MatchProcessor", "fields": [{"original_string": "private State currentState;", "modifier": "private", "type": "State", "declarator": "currentState", "var_name": "currentState"}, {"original_string": "private Transitions transitions;", "modifier": "private", "type": "Transitions", "declarator": "transitions", "var_name": "transitions"}, {"original_string": "private DelegatingMatcher delegatingMatcher;", "modifier": "private", "type": "DelegatingMatcher", "declarator": "delegatingMatcher", "var_name": "delegatingMatcher"}], "methods": [{"identifier": "StateMachine", "parameters": "(State initialState, DelegatingMatcher delegatingMatcher)", "modifiers": "public", "return": "", "signature": " StateMachine(State initialState, DelegatingMatcher delegatingMatcher)", "full_signature": "public  StateMachine(State initialState, DelegatingMatcher delegatingMatcher)", "class_method_signature": "StateMachine.StateMachine(State initialState, DelegatingMatcher delegatingMatcher)", "testcase": false, "constructor": true}, {"identifier": "getCurrentState", "parameters": "()", "modifiers": "public", "return": "State", "signature": "State getCurrentState()", "full_signature": "public State getCurrentState()", "class_method_signature": "StateMachine.getCurrentState()", "testcase": false, "constructor": false}, {"identifier": "changeStateTo", "parameters": "(State state)", "modifiers": "protected", "return": "void", "signature": "void changeStateTo(State state)", "full_signature": "protected void changeStateTo(State state)", "class_method_signature": "StateMachine.changeStateTo(State state)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            MatchResult matchResult)", "modifiers": "@Override public", "return": "MatchProcessorResult", "signature": "MatchProcessorResult process(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            MatchResult matchResult)", "full_signature": "@Override public MatchProcessorResult process(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            MatchResult matchResult)", "class_method_signature": "StateMachine.process(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            MatchResult matchResult)", "testcase": false, "constructor": false}], "file": "streamflyer-core/src/main/java/com/github/rwitzel/streamflyer/regex/addons/stateful/StateMachine.java"}, "focal_method": {"identifier": "process", "parameters": "(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            MatchResult matchResult)", "modifiers": "@Override public", "return": "MatchProcessorResult", "body": "@Override\n    public MatchProcessorResult process(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            MatchResult matchResult) {\n\n        // modify stream\n        MatchProcessorResult result = transitions.process(characterBuffer, firstModifiableCharacterInBuffer,\n                matchResult);\n\n        // change state if needed\n        State newState = transitions.pollNewState();\n        if (newState != currentState) {\n            changeStateTo(newState);\n        }\n\n        return result;\n    }", "signature": "MatchProcessorResult process(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            MatchResult matchResult)", "full_signature": "@Override public MatchProcessorResult process(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            MatchResult matchResult)", "class_method_signature": "StateMachine.process(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            MatchResult matchResult)", "testcase": false, "constructor": false, "invocations": ["process", "pollNewState", "changeStateTo"]}, "repository": {"repo_id": 32796510, "url": "https://github.com/rwitzel/streamflyer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 26, "size": 2880, "license": "licensed"}}