{"test_class": {"identifier": "ReporterParameterParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String id = \"--id\";", "modifier": "private final", "type": "String", "declarator": "id = \"--id\"", "var_name": "id"}], "file": "assembly/compliance-tool/src/test/java/org/eclipse/sw360/antenna/frontend/compliancetool/sw360/reporter/ReporterParameterParserTest.java"}, "test_case": {"identifier": "checkParametersNullParameters", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void checkParametersNullParameters() {\n        ReporterParameterParser.checkParameters(null);\n    }", "signature": "void checkParametersNullParameters()", "full_signature": "@Test(expected = NullPointerException.class) public void checkParametersNullParameters()", "class_method_signature": "ReporterParameterParserTest.checkParametersNullParameters()", "testcase": true, "constructor": false, "invocations": ["checkParameters"]}, "focal_class": {"identifier": "ReporterParameterParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ReporterParameterParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ReporterParameterParser.class)", "var_name": "LOGGER"}, {"original_string": "static final String REPORTER_PARAMETER_PREFIX = AbstractAntennaCLIOptions.SWITCH_PREFIX + \"-info\";", "modifier": "static final", "type": "String", "declarator": "REPORTER_PARAMETER_PREFIX = AbstractAntennaCLIOptions.SWITCH_PREFIX + \"-info\"", "var_name": "REPORTER_PARAMETER_PREFIX"}, {"original_string": "static final String OUTPUT_FORMAT_PREFIX_LONG = AbstractAntennaCLIOptions.SWITCH_PREFIX + \"-output\";", "modifier": "static final", "type": "String", "declarator": "OUTPUT_FORMAT_PREFIX_LONG = AbstractAntennaCLIOptions.SWITCH_PREFIX + \"-output\"", "var_name": "OUTPUT_FORMAT_PREFIX_LONG"}, {"original_string": "static final String OUTPUT_FORMAT_PREFIX_SHORT = AbstractAntennaCLIOptions.SWITCH_PREFIX + \"o\";", "modifier": "static final", "type": "String", "declarator": "OUTPUT_FORMAT_PREFIX_SHORT = AbstractAntennaCLIOptions.SWITCH_PREFIX + \"o\"", "var_name": "OUTPUT_FORMAT_PREFIX_SHORT"}, {"original_string": "static final String DEFAULT_OUTPUT_FORMAT = \"CSV\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_OUTPUT_FORMAT = \"CSV\"", "var_name": "DEFAULT_OUTPUT_FORMAT"}], "methods": [{"identifier": "ReporterParameterParser", "parameters": "()", "modifiers": "private", "return": "", "signature": " ReporterParameterParser()", "full_signature": "private  ReporterParameterParser()", "class_method_signature": "ReporterParameterParser.ReporterParameterParser()", "testcase": false, "constructor": true}, {"identifier": "getInfoParameterFromParameters", "parameters": "(Map<String, String> parameters)", "modifiers": "static", "return": "String", "signature": "String getInfoParameterFromParameters(Map<String, String> parameters)", "full_signature": "static String getInfoParameterFromParameters(Map<String, String> parameters)", "class_method_signature": "ReporterParameterParser.getInfoParameterFromParameters(Map<String, String> parameters)", "testcase": false, "constructor": false}, {"identifier": "parseParameterValueFromMapOfParameters", "parameters": "(Map<String, String> parameters, String parameterKey)", "modifiers": "static", "return": "String", "signature": "String parseParameterValueFromMapOfParameters(Map<String, String> parameters, String parameterKey)", "full_signature": "static String parseParameterValueFromMapOfParameters(Map<String, String> parameters, String parameterKey)", "class_method_signature": "ReporterParameterParser.parseParameterValueFromMapOfParameters(Map<String, String> parameters, String parameterKey)", "testcase": false, "constructor": false}, {"identifier": "getOutputFormat", "parameters": "(Map<String, String> parameters)", "modifiers": "static", "return": "String", "signature": "String getOutputFormat(Map<String, String> parameters)", "full_signature": "static String getOutputFormat(Map<String, String> parameters)", "class_method_signature": "ReporterParameterParser.getOutputFormat(Map<String, String> parameters)", "testcase": false, "constructor": false}, {"identifier": "mapParameters", "parameters": "(Set<String> parameters)", "modifiers": "static", "return": "Map<String, String>", "signature": "Map<String, String> mapParameters(Set<String> parameters)", "full_signature": "static Map<String, String> mapParameters(Set<String> parameters)", "class_method_signature": "ReporterParameterParser.mapParameters(Set<String> parameters)", "testcase": false, "constructor": false}, {"identifier": "checkParameters", "parameters": "(Set<String> parameters)", "modifiers": "static", "return": "void", "signature": "void checkParameters(Set<String> parameters)", "full_signature": "static void checkParameters(Set<String> parameters)", "class_method_signature": "ReporterParameterParser.checkParameters(Set<String> parameters)", "testcase": false, "constructor": false}], "file": "assembly/compliance-tool/src/main/java/org/eclipse/sw360/antenna/frontend/compliancetool/sw360/reporter/ReporterParameterParser.java"}, "focal_method": {"identifier": "checkParameters", "parameters": "(Set<String> parameters)", "modifiers": "static", "return": "void", "body": "static void checkParameters(Set<String> parameters) {\n        Objects.requireNonNull(parameters, \"Parameters must not be null\");\n        if (parameters.isEmpty()) {\n            LOGGER.error(\"No parameters provided for the reporter reporter.\");\n            LOGGER.info(InfoRequestFactory.helpMessage());\n            throw new IllegalArgumentException(\"No parameters provided for the reporter reporter.\");\n        }\n    }", "signature": "void checkParameters(Set<String> parameters)", "full_signature": "static void checkParameters(Set<String> parameters)", "class_method_signature": "ReporterParameterParser.checkParameters(Set<String> parameters)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "isEmpty", "error", "info", "helpMessage"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}