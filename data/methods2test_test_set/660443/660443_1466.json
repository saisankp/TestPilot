{"test_class": {"identifier": "DescriptorEngineTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/DescriptorEngineTest.java"}, "test_case": {"identifier": "testAvailableClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAvailableClass() {\n        DescriptorEngine engine = new DescriptorEngine(IMolecularDescriptor.class,\n                DefaultChemObjectBuilder.getInstance());\n        String[] availClasses = engine.getAvailableDictionaryClasses();\n        Assert.assertEquals(5, availClasses.length);\n    }", "signature": "void testAvailableClass()", "full_signature": "@Test public void testAvailableClass()", "class_method_signature": "DescriptorEngineTest.testAvailableClass()", "testcase": true, "constructor": false, "invocations": ["getInstance", "getAvailableDictionaryClasses", "assertEquals"]}, "focal_class": {"identifier": "DescriptorEngine", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String                      rdfNS       = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";", "modifier": "private static", "type": "String", "declarator": "rdfNS       = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", "var_name": "rdfNS"}, {"original_string": "private Dictionary                         dict        = null;", "modifier": "private", "type": "Dictionary", "declarator": "dict        = null", "var_name": "dict"}, {"original_string": "private List<String>                       classNames  = new ArrayList<String>(200);", "modifier": "private", "type": "List<String>", "declarator": "classNames  = new ArrayList<String>(200)", "var_name": "classNames"}, {"original_string": "private List<IDescriptor>                  descriptors = new ArrayList<IDescriptor>(200);", "modifier": "private", "type": "List<IDescriptor>", "declarator": "descriptors = new ArrayList<IDescriptor>(200)", "var_name": "descriptors"}, {"original_string": "private List<IImplementationSpecification> speclist    = null;", "modifier": "private", "type": "List<IImplementationSpecification>", "declarator": "speclist    = null", "var_name": "speclist"}, {"original_string": "private static ILoggingTool                logger      = LoggingToolFactory\n                                                                   .createLoggingTool(DescriptorEngine.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger      = LoggingToolFactory\n                                                                   .createLoggingTool(DescriptorEngine.class)", "var_name": "logger"}, {"original_string": "private final IChemObjectBuilder           builder;", "modifier": "private final", "type": "IChemObjectBuilder", "declarator": "builder", "var_name": "builder"}], "methods": [{"identifier": "DescriptorEngine", "parameters": "(List<String> classNames, IChemObjectBuilder builder)", "modifiers": "public", "return": "", "signature": " DescriptorEngine(List<String> classNames, IChemObjectBuilder builder)", "full_signature": "public  DescriptorEngine(List<String> classNames, IChemObjectBuilder builder)", "class_method_signature": "DescriptorEngine.DescriptorEngine(List<String> classNames, IChemObjectBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "DescriptorEngine", "parameters": "(Class<? extends IDescriptor> c, IChemObjectBuilder builder)", "modifiers": "public", "return": "", "signature": " DescriptorEngine(Class<? extends IDescriptor> c, IChemObjectBuilder builder)", "full_signature": "public  DescriptorEngine(Class<? extends IDescriptor> c, IChemObjectBuilder builder)", "class_method_signature": "DescriptorEngine.DescriptorEngine(Class<? extends IDescriptor> c, IChemObjectBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "void", "signature": "void process(IAtomContainer molecule)", "full_signature": "public void process(IAtomContainer molecule)", "class_method_signature": "DescriptorEngine.process(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "getDictionaryType", "parameters": "(String identifier)", "modifiers": "public", "return": "String", "signature": "String getDictionaryType(String identifier)", "full_signature": "public String getDictionaryType(String identifier)", "class_method_signature": "DescriptorEngine.getDictionaryType(String identifier)", "testcase": false, "constructor": false}, {"identifier": "getDictionaryType", "parameters": "(IImplementationSpecification descriptorSpecification)", "modifiers": "public", "return": "String", "signature": "String getDictionaryType(IImplementationSpecification descriptorSpecification)", "full_signature": "public String getDictionaryType(IImplementationSpecification descriptorSpecification)", "class_method_signature": "DescriptorEngine.getDictionaryType(IImplementationSpecification descriptorSpecification)", "testcase": false, "constructor": false}, {"identifier": "getDictionaryClass", "parameters": "(String identifier)", "modifiers": "public", "return": "String[]", "signature": "String[] getDictionaryClass(String identifier)", "full_signature": "public String[] getDictionaryClass(String identifier)", "class_method_signature": "DescriptorEngine.getDictionaryClass(String identifier)", "testcase": false, "constructor": false}, {"identifier": "getDictionaryClass", "parameters": "(IImplementationSpecification descriptorSpecification)", "modifiers": "public", "return": "String[]", "signature": "String[] getDictionaryClass(IImplementationSpecification descriptorSpecification)", "full_signature": "public String[] getDictionaryClass(IImplementationSpecification descriptorSpecification)", "class_method_signature": "DescriptorEngine.getDictionaryClass(IImplementationSpecification descriptorSpecification)", "testcase": false, "constructor": false}, {"identifier": "getDictionaryDefinition", "parameters": "(String identifier)", "modifiers": "public", "return": "String", "signature": "String getDictionaryDefinition(String identifier)", "full_signature": "public String getDictionaryDefinition(String identifier)", "class_method_signature": "DescriptorEngine.getDictionaryDefinition(String identifier)", "testcase": false, "constructor": false}, {"identifier": "getDictionaryDefinition", "parameters": "(DescriptorSpecification descriptorSpecification)", "modifiers": "public", "return": "String", "signature": "String getDictionaryDefinition(DescriptorSpecification descriptorSpecification)", "full_signature": "public String getDictionaryDefinition(DescriptorSpecification descriptorSpecification)", "class_method_signature": "DescriptorEngine.getDictionaryDefinition(DescriptorSpecification descriptorSpecification)", "testcase": false, "constructor": false}, {"identifier": "getDictionaryTitle", "parameters": "(String identifier)", "modifiers": "public", "return": "String", "signature": "String getDictionaryTitle(String identifier)", "full_signature": "public String getDictionaryTitle(String identifier)", "class_method_signature": "DescriptorEngine.getDictionaryTitle(String identifier)", "testcase": false, "constructor": false}, {"identifier": "getDictionaryTitle", "parameters": "(DescriptorSpecification descriptorSpecification)", "modifiers": "public", "return": "String", "signature": "String getDictionaryTitle(DescriptorSpecification descriptorSpecification)", "full_signature": "public String getDictionaryTitle(DescriptorSpecification descriptorSpecification)", "class_method_signature": "DescriptorEngine.getDictionaryTitle(DescriptorSpecification descriptorSpecification)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorSpecifications", "parameters": "()", "modifiers": "public", "return": "List<IImplementationSpecification>", "signature": "List<IImplementationSpecification> getDescriptorSpecifications()", "full_signature": "public List<IImplementationSpecification> getDescriptorSpecifications()", "class_method_signature": "DescriptorEngine.getDescriptorSpecifications()", "testcase": false, "constructor": false}, {"identifier": "setDescriptorSpecifications", "parameters": "(List<IImplementationSpecification> specs)", "modifiers": "public", "return": "void", "signature": "void setDescriptorSpecifications(List<IImplementationSpecification> specs)", "full_signature": "public void setDescriptorSpecifications(List<IImplementationSpecification> specs)", "class_method_signature": "DescriptorEngine.setDescriptorSpecifications(List<IImplementationSpecification> specs)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorClassNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getDescriptorClassNames()", "full_signature": "public List<String> getDescriptorClassNames()", "class_method_signature": "DescriptorEngine.getDescriptorClassNames()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorInstances", "parameters": "()", "modifiers": "public", "return": "List<IDescriptor>", "signature": "List<IDescriptor> getDescriptorInstances()", "full_signature": "public List<IDescriptor> getDescriptorInstances()", "class_method_signature": "DescriptorEngine.getDescriptorInstances()", "testcase": false, "constructor": false}, {"identifier": "setDescriptorInstances", "parameters": "(List<IDescriptor> descriptors)", "modifiers": "public", "return": "void", "signature": "void setDescriptorInstances(List<IDescriptor> descriptors)", "full_signature": "public void setDescriptorInstances(List<IDescriptor> descriptors)", "class_method_signature": "DescriptorEngine.setDescriptorInstances(List<IDescriptor> descriptors)", "testcase": false, "constructor": false}, {"identifier": "getAvailableDictionaryClasses", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getAvailableDictionaryClasses()", "full_signature": "public String[] getAvailableDictionaryClasses()", "class_method_signature": "DescriptorEngine.getAvailableDictionaryClasses()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorClassNameByInterface", "parameters": "(String interfaceName, String[] jarFileNames)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getDescriptorClassNameByInterface(String interfaceName, String[] jarFileNames)", "full_signature": "public static List<String> getDescriptorClassNameByInterface(String interfaceName, String[] jarFileNames)", "class_method_signature": "DescriptorEngine.getDescriptorClassNameByInterface(String interfaceName, String[] jarFileNames)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorClassNameByPackage", "parameters": "(String packageName, String[] jarFileNames)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getDescriptorClassNameByPackage(String packageName, String[] jarFileNames)", "full_signature": "public static List<String> getDescriptorClassNameByPackage(String packageName, String[] jarFileNames)", "class_method_signature": "DescriptorEngine.getDescriptorClassNameByPackage(String packageName, String[] jarFileNames)", "testcase": false, "constructor": false}, {"identifier": "instantiateDescriptors", "parameters": "(List<String> descriptorClassNames)", "modifiers": "public", "return": "List<IDescriptor>", "signature": "List<IDescriptor> instantiateDescriptors(List<String> descriptorClassNames)", "full_signature": "public List<IDescriptor> instantiateDescriptors(List<String> descriptorClassNames)", "class_method_signature": "DescriptorEngine.instantiateDescriptors(List<String> descriptorClassNames)", "testcase": false, "constructor": false}, {"identifier": "instantiate", "parameters": "(Class<? extends IDescriptor> c)", "modifiers": "private", "return": "IDescriptor", "signature": "IDescriptor instantiate(Class<? extends IDescriptor> c)", "full_signature": "private IDescriptor instantiate(Class<? extends IDescriptor> c)", "class_method_signature": "DescriptorEngine.instantiate(Class<? extends IDescriptor> c)", "testcase": false, "constructor": false}, {"identifier": "initializeSpecifications", "parameters": "(List<IDescriptor> descriptors)", "modifiers": "public", "return": "List<IImplementationSpecification>", "signature": "List<IImplementationSpecification> initializeSpecifications(List<IDescriptor> descriptors)", "full_signature": "public List<IImplementationSpecification> initializeSpecifications(List<IDescriptor> descriptors)", "class_method_signature": "DescriptorEngine.initializeSpecifications(List<IDescriptor> descriptors)", "testcase": false, "constructor": false}, {"identifier": "getSpecRef", "parameters": "(String identifier)", "modifiers": "private", "return": "String", "signature": "String getSpecRef(String identifier)", "full_signature": "private String getSpecRef(String identifier)", "class_method_signature": "DescriptorEngine.getSpecRef(String identifier)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/DescriptorEngine.java"}, "focal_method": {"identifier": "getAvailableDictionaryClasses", "parameters": "()", "modifiers": "public", "return": "String[]", "body": "public String[] getAvailableDictionaryClasses() {\n        List<String> classList = new ArrayList<String>();\n        for (IImplementationSpecification spec : speclist) {\n            String[] tmp = getDictionaryClass(spec);\n            if (tmp != null) classList.addAll(Arrays.asList(tmp));\n        }\n        Set<String> uniqueClasses = new HashSet<String>(classList);\n        return (String[]) uniqueClasses.toArray(new String[]{});\n    }", "signature": "String[] getAvailableDictionaryClasses()", "full_signature": "public String[] getAvailableDictionaryClasses()", "class_method_signature": "DescriptorEngine.getAvailableDictionaryClasses()", "testcase": false, "constructor": false, "invocations": ["getDictionaryClass", "addAll", "asList", "toArray"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}