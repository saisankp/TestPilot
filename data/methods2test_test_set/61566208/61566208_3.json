{"test_class": {"identifier": "FileUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String tmpDir;", "modifier": "private", "type": "String", "declarator": "tmpDir", "var_name": "tmpDir"}], "file": "modules/hms-util/src/test/java/com/vmware/vrack/hms/common/util/FileUtilTest.java"}, "test_case": {"identifier": "testFileExistsWithInvalidFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFileExistsWithInvalidFile()\n    {\n        String timeInMillis = this.getDateTimeInMillis();\n        assertFalse( FileUtil.isFileExists( FilenameUtils.concat( tmpDir, timeInMillis ) ) );\n        assertFalse( FileUtil.isFileExists( null ) );\n        assertFalse( FileUtil.isFileExists( null, timeInMillis ) );\n        assertFalse( FileUtil.isFileExists( tmpDir, null ) );\n    }", "signature": "void testFileExistsWithInvalidFile()", "full_signature": "@Test public void testFileExistsWithInvalidFile()", "class_method_signature": "FileUtilTest.testFileExistsWithInvalidFile()", "testcase": true, "constructor": false, "invocations": ["getDateTimeInMillis", "assertFalse", "isFileExists", "concat", "assertFalse", "isFileExists", "assertFalse", "isFileExists", "assertFalse", "isFileExists"]}, "focal_class": {"identifier": "FileUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger( FileUtil.class );", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( FileUtil.class )", "var_name": "logger"}], "methods": [{"identifier": "FileUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " FileUtil()", "full_signature": "private  FileUtil()", "class_method_signature": "FileUtil.FileUtil()", "testcase": false, "constructor": true}, {"identifier": "isFileExists", "parameters": "( final String dirAbsPath, final String fileName )", "modifiers": "public static", "return": "boolean", "signature": "boolean isFileExists( final String dirAbsPath, final String fileName )", "full_signature": "public static boolean isFileExists( final String dirAbsPath, final String fileName )", "class_method_signature": "FileUtil.isFileExists( final String dirAbsPath, final String fileName )", "testcase": false, "constructor": false}, {"identifier": "isFileExists", "parameters": "( final String fileAbsPath )", "modifiers": "public static", "return": "boolean", "signature": "boolean isFileExists( final String fileAbsPath )", "full_signature": "public static boolean isFileExists( final String fileAbsPath )", "class_method_signature": "FileUtil.isFileExists( final String fileAbsPath )", "testcase": false, "constructor": false}, {"identifier": "isDirExists", "parameters": "( final String dirAbsPath )", "modifiers": "public static", "return": "boolean", "signature": "boolean isDirExists( final String dirAbsPath )", "full_signature": "public static boolean isDirExists( final String dirAbsPath )", "class_method_signature": "FileUtil.isDirExists( final String dirAbsPath )", "testcase": false, "constructor": false}, {"identifier": "findFiles", "parameters": "( final String dirAbsPath, final String ext )", "modifiers": "public static", "return": "File[]", "signature": "File[] findFiles( final String dirAbsPath, final String ext )", "full_signature": "public static File[] findFiles( final String dirAbsPath, final String ext )", "class_method_signature": "FileUtil.findFiles( final String dirAbsPath, final String ext )", "testcase": false, "constructor": false}, {"identifier": "setFilesExecutable", "parameters": "( final String dirAbsPath, final String ext )", "modifiers": "public static", "return": "boolean", "signature": "boolean setFilesExecutable( final String dirAbsPath, final String ext )", "full_signature": "public static boolean setFilesExecutable( final String dirAbsPath, final String ext )", "class_method_signature": "FileUtil.setFilesExecutable( final String dirAbsPath, final String ext )", "testcase": false, "constructor": false}, {"identifier": "extractArchive", "parameters": "( final String archiveFileAbsPath, final String destDirAbsPath )", "modifiers": "public static", "return": "boolean", "signature": "boolean extractArchive( final String archiveFileAbsPath, final String destDirAbsPath )", "full_signature": "public static boolean extractArchive( final String archiveFileAbsPath, final String destDirAbsPath )", "class_method_signature": "FileUtil.extractArchive( final String archiveFileAbsPath, final String destDirAbsPath )", "testcase": false, "constructor": false}, {"identifier": "extractArchive", "parameters": "( final File archiveFile, final File destDir )", "modifiers": "public static", "return": "boolean", "signature": "boolean extractArchive( final File archiveFile, final File destDir )", "full_signature": "public static boolean extractArchive( final File archiveFile, final File destDir )", "class_method_signature": "FileUtil.extractArchive( final File archiveFile, final File destDir )", "testcase": false, "constructor": false}, {"identifier": "findFiles", "parameters": "( final String dirAbsPath, final String[] extensions, boolean recursive )", "modifiers": "public static", "return": "File[]", "signature": "File[] findFiles( final String dirAbsPath, final String[] extensions, boolean recursive )", "full_signature": "public static File[] findFiles( final String dirAbsPath, final String[] extensions, boolean recursive )", "class_method_signature": "FileUtil.findFiles( final String dirAbsPath, final String[] extensions, boolean recursive )", "testcase": false, "constructor": false}, {"identifier": "findFiles", "parameters": "( final File dirAbsPath, final String[] extensions, boolean recursive )", "modifiers": "public static", "return": "File[]", "signature": "File[] findFiles( final File dirAbsPath, final String[] extensions, boolean recursive )", "full_signature": "public static File[] findFiles( final File dirAbsPath, final String[] extensions, boolean recursive )", "class_method_signature": "FileUtil.findFiles( final File dirAbsPath, final String[] extensions, boolean recursive )", "testcase": false, "constructor": false}, {"identifier": "findFiles", "parameters": "( final String dirAbsPath, final String fileNamePattern, boolean recursive )", "modifiers": "public static", "return": "File[]", "signature": "File[] findFiles( final String dirAbsPath, final String fileNamePattern, boolean recursive )", "full_signature": "public static File[] findFiles( final String dirAbsPath, final String fileNamePattern, boolean recursive )", "class_method_signature": "FileUtil.findFiles( final String dirAbsPath, final String fileNamePattern, boolean recursive )", "testcase": false, "constructor": false}, {"identifier": "getFileChecksum", "parameters": "( final String fileAbsPath, ChecksumMethod checksumMethod )", "modifiers": "public static", "return": "String", "signature": "String getFileChecksum( final String fileAbsPath, ChecksumMethod checksumMethod )", "full_signature": "public static String getFileChecksum( final String fileAbsPath, ChecksumMethod checksumMethod )", "class_method_signature": "FileUtil.getFileChecksum( final String fileAbsPath, ChecksumMethod checksumMethod )", "testcase": false, "constructor": false}, {"identifier": "deleteDirectory", "parameters": "( final String directory )", "modifiers": "public static", "return": "boolean", "signature": "boolean deleteDirectory( final String directory )", "full_signature": "public static boolean deleteDirectory( final String directory )", "class_method_signature": "FileUtil.deleteDirectory( final String directory )", "testcase": false, "constructor": false}, {"identifier": "deleteDirectory", "parameters": "( final File directory )", "modifiers": "public static", "return": "boolean", "signature": "boolean deleteDirectory( final File directory )", "full_signature": "public static boolean deleteDirectory( final File directory )", "class_method_signature": "FileUtil.deleteDirectory( final File directory )", "testcase": false, "constructor": false}, {"identifier": "getTemporaryFolderPath", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getTemporaryFolderPath()", "full_signature": "public static String getTemporaryFolderPath()", "class_method_signature": "FileUtil.getTemporaryFolderPath()", "testcase": false, "constructor": false}, {"identifier": "deleteFile", "parameters": "( final String filePath )", "modifiers": "public static", "return": "boolean", "signature": "boolean deleteFile( final String filePath )", "full_signature": "public static boolean deleteFile( final String filePath )", "class_method_signature": "FileUtil.deleteFile( final String filePath )", "testcase": false, "constructor": false}, {"identifier": "createDirectory", "parameters": "( final String dirPath )", "modifiers": "public static", "return": "boolean", "signature": "boolean createDirectory( final String dirPath )", "full_signature": "public static boolean createDirectory( final String dirPath )", "class_method_signature": "FileUtil.createDirectory( final String dirPath )", "testcase": false, "constructor": false}, {"identifier": "getFileBaseName", "parameters": "( final String fileName )", "modifiers": "public static", "return": "String", "signature": "String getFileBaseName( final String fileName )", "full_signature": "public static String getFileBaseName( final String fileName )", "class_method_signature": "FileUtil.getFileBaseName( final String fileName )", "testcase": false, "constructor": false}, {"identifier": "unzipFile", "parameters": "( final String zipFileAbsPath, final String outputDirAbsPath )", "modifiers": "public static", "return": "boolean", "signature": "boolean unzipFile( final String zipFileAbsPath, final String outputDirAbsPath )", "full_signature": "public static boolean unzipFile( final String zipFileAbsPath, final String outputDirAbsPath )", "class_method_signature": "FileUtil.unzipFile( final String zipFileAbsPath, final String outputDirAbsPath )", "testcase": false, "constructor": false}, {"identifier": "createOrUpdateFile", "parameters": "( final String filePath, final String fileContent )", "modifiers": "public static", "return": "boolean", "signature": "boolean createOrUpdateFile( final String filePath, final String fileContent )", "full_signature": "public static boolean createOrUpdateFile( final String filePath, final String fileContent )", "class_method_signature": "FileUtil.createOrUpdateFile( final String filePath, final String fileContent )", "testcase": false, "constructor": false}, {"identifier": "createOrUpdateFile", "parameters": "( final String filePath, final String fileContent,\n                                              final boolean createBackup )", "modifiers": "public static", "return": "boolean", "signature": "boolean createOrUpdateFile( final String filePath, final String fileContent,\n                                              final boolean createBackup )", "full_signature": "public static boolean createOrUpdateFile( final String filePath, final String fileContent,\n                                              final boolean createBackup )", "class_method_signature": "FileUtil.createOrUpdateFile( final String filePath, final String fileContent,\n                                              final boolean createBackup )", "testcase": false, "constructor": false}, {"identifier": "createNewFile", "parameters": "( final String fileAbsPath )", "modifiers": "public static", "return": "boolean", "signature": "boolean createNewFile( final String fileAbsPath )", "full_signature": "public static boolean createNewFile( final String fileAbsPath )", "class_method_signature": "FileUtil.createNewFile( final String fileAbsPath )", "testcase": false, "constructor": false}, {"identifier": "createNewFile", "parameters": "( final File file )", "modifiers": "private static", "return": "boolean", "signature": "boolean createNewFile( final File file )", "full_signature": "private static boolean createNewFile( final File file )", "class_method_signature": "FileUtil.createNewFile( final File file )", "testcase": false, "constructor": false}, {"identifier": "readFileToString", "parameters": "( final String fileName )", "modifiers": "public static", "return": "String", "signature": "String readFileToString( final String fileName )", "full_signature": "public static String readFileToString( final String fileName )", "class_method_signature": "FileUtil.readFileToString( final String fileName )", "testcase": false, "constructor": false}, {"identifier": "isValidPattern", "parameters": "( final String pattern )", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidPattern( final String pattern )", "full_signature": "private static boolean isValidPattern( final String pattern )", "class_method_signature": "FileUtil.isValidPattern( final String pattern )", "testcase": false, "constructor": false}, {"identifier": "findLatestFileByLastModified", "parameters": "( final String directory, final String fileNamePattern,\n                                                       final boolean recursive )", "modifiers": "public static", "return": "String", "signature": "String findLatestFileByLastModified( final String directory, final String fileNamePattern,\n                                                       final boolean recursive )", "full_signature": "public static String findLatestFileByLastModified( final String directory, final String fileNamePattern,\n                                                       final boolean recursive )", "class_method_signature": "FileUtil.findLatestFileByLastModified( final String directory, final String fileNamePattern,\n                                                       final boolean recursive )", "testcase": false, "constructor": false}], "file": "modules/hms-util/src/main/java/com/vmware/vrack/hms/common/util/FileUtil.java"}, "focal_method": {"identifier": "isFileExists", "parameters": "( final String dirAbsPath, final String fileName )", "modifiers": "public static", "return": "boolean", "body": "public static boolean isFileExists( final String dirAbsPath, final String fileName )\n    {\n\n        return FileUtil.isFileExists( FilenameUtils.concat( dirAbsPath, fileName ) );\n    }", "signature": "boolean isFileExists( final String dirAbsPath, final String fileName )", "full_signature": "public static boolean isFileExists( final String dirAbsPath, final String fileName )", "class_method_signature": "FileUtil.isFileExists( final String dirAbsPath, final String fileName )", "testcase": false, "constructor": false, "invocations": ["isFileExists", "concat"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}