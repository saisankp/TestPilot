{"test_class": {"identifier": "ArtifactToComponentConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/cyclone-dx/src/test/java/com/eclipse/sw360/antenna/cyclonedx/ArtifactToComponentConverterTest.java"}, "test_case": {"identifier": "disallowsNull", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void disallowsNull() {\n        assertThatThrownBy(() -> toComponent(null))\n                .isInstanceOf(IllegalArgumentException.class)\n                .hasMessage(\"Artifact must not be null\");\n    }", "signature": "void disallowsNull()", "full_signature": "@Test void disallowsNull()", "class_method_signature": "ArtifactToComponentConverterTest.disallowsNull()", "testcase": true, "constructor": false, "invocations": ["hasMessage", "isInstanceOf", "assertThatThrownBy", "toComponent"]}, "focal_class": {"identifier": "ArtifactToComponentConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ArtifactToComponentConverter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ArtifactToComponentConverter.class)", "var_name": "LOG"}], "methods": [{"identifier": "ArtifactToComponentConverter", "parameters": "()", "modifiers": "private", "return": "", "signature": " ArtifactToComponentConverter()", "full_signature": "private  ArtifactToComponentConverter()", "class_method_signature": "ArtifactToComponentConverter.ArtifactToComponentConverter()", "testcase": false, "constructor": true}, {"identifier": "toComponent", "parameters": "(Artifact artifact)", "modifiers": "public static", "return": "Component", "signature": "Component toComponent(Artifact artifact)", "full_signature": "public static Component toComponent(Artifact artifact)", "class_method_signature": "ArtifactToComponentConverter.toComponent(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "createGenericPurl", "parameters": "(Component c, Artifact artifact)", "modifiers": "private static", "return": "void", "signature": "void createGenericPurl(Component c, Artifact artifact)", "full_signature": "private static void createGenericPurl(Component c, Artifact artifact)", "class_method_signature": "ArtifactToComponentConverter.createGenericPurl(Component c, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "addHashesToComponent", "parameters": "(Artifact artifact, Component c)", "modifiers": "private static", "return": "void", "signature": "void addHashesToComponent(Artifact artifact, Component c)", "full_signature": "private static void addHashesToComponent(Artifact artifact, Component c)", "class_method_signature": "ArtifactToComponentConverter.addHashesToComponent(Artifact artifact, Component c)", "testcase": false, "constructor": false}, {"identifier": "createHashFor", "parameters": "(ArtifactFilename.ArtifactFilenameEntry entry)", "modifiers": "protected static", "return": "Optional<Hash>", "signature": "Optional<Hash> createHashFor(ArtifactFilename.ArtifactFilenameEntry entry)", "full_signature": "protected static Optional<Hash> createHashFor(ArtifactFilename.ArtifactFilenameEntry entry)", "class_method_signature": "ArtifactToComponentConverter.createHashFor(ArtifactFilename.ArtifactFilenameEntry entry)", "testcase": false, "constructor": false}, {"identifier": "matchAlgorithm", "parameters": "(String hashAlgorithm)", "modifiers": "private static", "return": "Hash.Algorithm", "signature": "Hash.Algorithm matchAlgorithm(String hashAlgorithm)", "full_signature": "private static Hash.Algorithm matchAlgorithm(String hashAlgorithm)", "class_method_signature": "ArtifactToComponentConverter.matchAlgorithm(String hashAlgorithm)", "testcase": false, "constructor": false}, {"identifier": "setCoordinatesForComponent", "parameters": "(Artifact artifact, Component component)", "modifiers": "private static", "return": "void", "signature": "void setCoordinatesForComponent(Artifact artifact, Component component)", "full_signature": "private static void setCoordinatesForComponent(Artifact artifact, Component component)", "class_method_signature": "ArtifactToComponentConverter.setCoordinatesForComponent(Artifact artifact, Component component)", "testcase": false, "constructor": false}, {"identifier": "addLicensesToComponent", "parameters": "(Collection<License> antennaLicenses, Component c)", "modifiers": "private static", "return": "void", "signature": "void addLicensesToComponent(Collection<License> antennaLicenses, Component c)", "full_signature": "private static void addLicensesToComponent(Collection<License> antennaLicenses, Component c)", "class_method_signature": "ArtifactToComponentConverter.addLicensesToComponent(Collection<License> antennaLicenses, Component c)", "testcase": false, "constructor": false}], "file": "modules/cyclone-dx/src/main/java/com/eclipse/sw360/antenna/cyclonedx/ArtifactToComponentConverter.java"}, "focal_method": {"identifier": "toComponent", "parameters": "(Artifact artifact)", "modifiers": "public static", "return": "Component", "body": "public static Component toComponent(Artifact artifact) {\n        if (artifact == null) {\n            throw new IllegalArgumentException(\"Artifact must not be null\");\n        }\n\n        Component c = new Component();\n        c.setType(Component.Type.LIBRARY);\n\n        setCoordinatesForComponent(artifact, c);\n\n        LicenseInformation licenses = ArtifactLicenseUtils.getFinalLicenses(artifact);\n        addLicensesToComponent(licenses.getLicenses(), c);\n\n        addHashesToComponent(artifact, c);\n\n        if (c.getPurl() == null) {\n            createGenericPurl(c, artifact);\n        }\n\n        return c;\n    }", "signature": "Component toComponent(Artifact artifact)", "full_signature": "public static Component toComponent(Artifact artifact)", "class_method_signature": "ArtifactToComponentConverter.toComponent(Artifact artifact)", "testcase": false, "constructor": false, "invocations": ["setType", "setCoordinatesForComponent", "getFinalLicenses", "addLicensesToComponent", "getLicenses", "addHashesToComponent", "getPurl", "createGenericPurl"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}