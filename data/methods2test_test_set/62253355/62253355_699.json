{"test_class": {"identifier": "StateRestTest", "superclass": "extends MobiRestTestNg", "interfaces": "", "fields": [{"original_string": "private StateRest rest;", "modifier": "private", "type": "StateRest", "declarator": "rest", "var_name": "rest"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private ModelFactory mf;", "modifier": "private", "type": "ModelFactory", "declarator": "mf", "var_name": "mf"}, {"original_string": "private static Map<Resource, Model> results = new HashMap<>();", "modifier": "private static", "type": "Map<Resource, Model>", "declarator": "results = new HashMap<>()", "var_name": "results"}, {"original_string": "private static Resource stateId;", "modifier": "private static", "type": "Resource", "declarator": "stateId", "var_name": "stateId"}, {"original_string": "private static Model stateModel;", "modifier": "private static", "type": "Model", "declarator": "stateModel", "var_name": "stateModel"}, {"original_string": "@Mock\n    StateManager stateManager;", "modifier": "@Mock", "type": "StateManager", "declarator": "stateManager", "var_name": "stateManager"}, {"original_string": "@Mock\n    SesameTransformer transformer;", "modifier": "@Mock", "type": "SesameTransformer", "declarator": "transformer", "var_name": "transformer"}], "file": "com.mobi.platform.config.rest/src/test/java/com/mobi/platform/config/rest/StateRestTest.java"}, "test_case": {"identifier": "getStatesWithFiltersTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getStatesWithFiltersTest() {\n        // Setup:\n        Set<Resource> subjects = IntStream.range(0, 2)\n                .mapToObj(i -> \"http://mobi.com/subjects/\" + i)\n                .map(vf::createIRI)\n                .collect(Collectors.toSet());\n\n        WebTarget webTarget = target().path(\"states\").queryParam(\"application\", \"app\");\n        for (Resource subject : subjects) {\n            webTarget = webTarget.queryParam(\"subjects\", subject.stringValue());\n        }\n        Response response = webTarget.request().get();\n        assertEquals(response.getStatus(), 200);\n        verify(stateManager).getStates(anyString(), eq(\"app\"), eq(subjects));\n        try {\n            String str = response.readEntity(String.class);\n            JSONArray arr = JSONArray.fromObject(str);\n            assertEquals(results.size(), arr.size());\n            for (int i = 0; i < arr.size(); i++) {\n                JSONObject object = arr.optJSONObject(i);\n                assertNotNull(object);\n                assertTrue(results.keySet().contains(vf.createIRI(object.get(\"id\").toString())));\n            }\n        } catch (Exception e) {\n            fail(\"Expected no exception, but got: \" + e.getMessage());\n        }\n    }", "signature": "void getStatesWithFiltersTest()", "full_signature": "@Test public void getStatesWithFiltersTest()", "class_method_signature": "StateRestTest.getStatesWithFiltersTest()", "testcase": true, "constructor": false, "invocations": ["collect", "map", "mapToObj", "range", "toSet", "queryParam", "path", "target", "queryParam", "stringValue", "get", "request", "assertEquals", "getStatus", "getStates", "verify", "anyString", "eq", "eq", "readEntity", "fromObject", "assertEquals", "size", "size", "size", "optJSONObject", "assertNotNull", "assertTrue", "contains", "keySet", "createIRI", "toString", "get", "fail", "getMessage"]}, "focal_class": {"identifier": "StateRest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected StateManager stateManager;", "modifier": "protected", "type": "StateManager", "declarator": "stateManager", "var_name": "stateManager"}, {"original_string": "protected ValueFactory factory;", "modifier": "protected", "type": "ValueFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "protected ModelFactory modelFactory;", "modifier": "protected", "type": "ModelFactory", "declarator": "modelFactory", "var_name": "modelFactory"}, {"original_string": "protected SesameTransformer transformer;", "modifier": "protected", "type": "SesameTransformer", "declarator": "transformer", "var_name": "transformer"}], "methods": [{"identifier": "setStateManager", "parameters": "(StateManager stateManager)", "modifiers": "@Reference protected", "return": "void", "signature": "void setStateManager(StateManager stateManager)", "full_signature": "@Reference protected void setStateManager(StateManager stateManager)", "class_method_signature": "StateRest.setStateManager(StateManager stateManager)", "testcase": false, "constructor": false}, {"identifier": "setValueFactory", "parameters": "(final ValueFactory vf)", "modifiers": "@Reference protected", "return": "void", "signature": "void setValueFactory(final ValueFactory vf)", "full_signature": "@Reference protected void setValueFactory(final ValueFactory vf)", "class_method_signature": "StateRest.setValueFactory(final ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "setModelFactory", "parameters": "(final ModelFactory mf)", "modifiers": "@Reference protected", "return": "void", "signature": "void setModelFactory(final ModelFactory mf)", "full_signature": "@Reference protected void setModelFactory(final ModelFactory mf)", "class_method_signature": "StateRest.setModelFactory(final ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "setTransformer", "parameters": "(SesameTransformer transformer)", "modifiers": "@Reference protected", "return": "void", "signature": "void setTransformer(SesameTransformer transformer)", "full_signature": "@Reference protected void setTransformer(SesameTransformer transformer)", "class_method_signature": "StateRest.setTransformer(SesameTransformer transformer)", "testcase": false, "constructor": false}, {"identifier": "getStates", "parameters": "(@Context ContainerRequestContext context,\n                       @QueryParam(\"application\") String applicationId,\n                       @QueryParam(\"subjects\") List<String> subjectIds)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves State for the User making the request based on filter criteria\") public", "return": "Response", "signature": "Response getStates(@Context ContainerRequestContext context,\n                       @QueryParam(\"application\") String applicationId,\n                       @QueryParam(\"subjects\") List<String> subjectIds)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves State for the User making the request based on filter criteria\") public Response getStates(@Context ContainerRequestContext context,\n                       @QueryParam(\"application\") String applicationId,\n                       @QueryParam(\"subjects\") List<String> subjectIds)", "class_method_signature": "StateRest.getStates(@Context ContainerRequestContext context,\n                       @QueryParam(\"application\") String applicationId,\n                       @QueryParam(\"subjects\") List<String> subjectIds)", "testcase": false, "constructor": false}, {"identifier": "createState", "parameters": "(@Context ContainerRequestContext context,\n                         @QueryParam(\"application\") String applicationId,\n                         String stateJson)", "modifiers": "@POST @Consumes(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Creates a new State for the User making the request\") public", "return": "Response", "signature": "Response createState(@Context ContainerRequestContext context,\n                         @QueryParam(\"application\") String applicationId,\n                         String stateJson)", "full_signature": "@POST @Consumes(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Creates a new State for the User making the request\") public Response createState(@Context ContainerRequestContext context,\n                         @QueryParam(\"application\") String applicationId,\n                         String stateJson)", "class_method_signature": "StateRest.createState(@Context ContainerRequestContext context,\n                         @QueryParam(\"application\") String applicationId,\n                         String stateJson)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "(@Context ContainerRequestContext context, @PathParam(\"stateId\") String stateId)", "modifiers": "@GET @Path(\"{stateId}\") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves State by ID as long it belongs to the User making the request\") public", "return": "Response", "signature": "Response getState(@Context ContainerRequestContext context, @PathParam(\"stateId\") String stateId)", "full_signature": "@GET @Path(\"{stateId}\") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves State by ID as long it belongs to the User making the request\") public Response getState(@Context ContainerRequestContext context, @PathParam(\"stateId\") String stateId)", "class_method_signature": "StateRest.getState(@Context ContainerRequestContext context, @PathParam(\"stateId\") String stateId)", "testcase": false, "constructor": false}, {"identifier": "updateState", "parameters": "(@Context ContainerRequestContext context,\n                         @PathParam(\"stateId\") String stateId,\n                         String newStateJson)", "modifiers": "@PUT @Path(\"{stateId}\") @Consumes(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Updates State as long as it belongs to the User making the request\") public", "return": "Response", "signature": "Response updateState(@Context ContainerRequestContext context,\n                         @PathParam(\"stateId\") String stateId,\n                         String newStateJson)", "full_signature": "@PUT @Path(\"{stateId}\") @Consumes(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Updates State as long as it belongs to the User making the request\") public Response updateState(@Context ContainerRequestContext context,\n                         @PathParam(\"stateId\") String stateId,\n                         String newStateJson)", "class_method_signature": "StateRest.updateState(@Context ContainerRequestContext context,\n                         @PathParam(\"stateId\") String stateId,\n                         String newStateJson)", "testcase": false, "constructor": false}, {"identifier": "deleteState", "parameters": "(@Context ContainerRequestContext context, @PathParam(\"stateId\") String stateId)", "modifiers": "@DELETE @Path(\"{stateId}\") @RolesAllowed(\"user\") @ApiOperation(\"Deletes State as long as it belongs to the User making the request\") public", "return": "Response", "signature": "Response deleteState(@Context ContainerRequestContext context, @PathParam(\"stateId\") String stateId)", "full_signature": "@DELETE @Path(\"{stateId}\") @RolesAllowed(\"user\") @ApiOperation(\"Deletes State as long as it belongs to the User making the request\") public Response deleteState(@Context ContainerRequestContext context, @PathParam(\"stateId\") String stateId)", "class_method_signature": "StateRest.deleteState(@Context ContainerRequestContext context, @PathParam(\"stateId\") String stateId)", "testcase": false, "constructor": false}, {"identifier": "convertModel", "parameters": "(Model model)", "modifiers": "private", "return": "String", "signature": "String convertModel(Model model)", "full_signature": "private String convertModel(Model model)", "class_method_signature": "StateRest.convertModel(Model model)", "testcase": false, "constructor": false}], "file": "com.mobi.platform.config.rest/src/main/java/com/mobi/platform/config/rest/StateRest.java"}, "focal_method": {"identifier": "getStates", "parameters": "(@Context ContainerRequestContext context,\n                       @QueryParam(\"application\") String applicationId,\n                       @QueryParam(\"subjects\") List<String> subjectIds)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves State for the User making the request based on filter criteria\") public", "return": "Response", "body": "@GET\n    @Produces(MediaType.APPLICATION_JSON)\n    @RolesAllowed(\"user\")\n    @ApiOperation(\"Retrieves State for the User making the request based on filter criteria\")\n    public Response getStates(@Context ContainerRequestContext context,\n                       @QueryParam(\"application\") String applicationId,\n                       @QueryParam(\"subjects\") List<String> subjectIds) {\n        String username = RestUtils.getActiveUsername(context);\n        Set<Resource> subjects = subjectIds.stream()\n                .map(factory::createIRI)\n                .collect(Collectors.toSet());\n        try {\n            Map<Resource, Model> results = stateManager.getStates(username, applicationId, subjects);\n            JSONArray array = new JSONArray();\n            results.keySet().forEach(resource -> {\n                JSONObject state = new JSONObject();\n                state.put(\"id\", resource.stringValue());\n                state.put(\"model\", convertModel(results.get(resource)));\n                array.add(state);\n            });\n            return Response.ok(array).build();\n        } catch (MobiException ex) {\n            throw ErrorUtils.sendError(ex, ex.getMessage(), Response.Status.INTERNAL_SERVER_ERROR);\n        }\n    }", "signature": "Response getStates(@Context ContainerRequestContext context,\n                       @QueryParam(\"application\") String applicationId,\n                       @QueryParam(\"subjects\") List<String> subjectIds)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves State for the User making the request based on filter criteria\") public Response getStates(@Context ContainerRequestContext context,\n                       @QueryParam(\"application\") String applicationId,\n                       @QueryParam(\"subjects\") List<String> subjectIds)", "class_method_signature": "StateRest.getStates(@Context ContainerRequestContext context,\n                       @QueryParam(\"application\") String applicationId,\n                       @QueryParam(\"subjects\") List<String> subjectIds)", "testcase": false, "constructor": false, "invocations": ["getActiveUsername", "collect", "map", "stream", "toSet", "getStates", "forEach", "keySet", "put", "stringValue", "put", "convertModel", "get", "add", "build", "ok", "sendError", "getMessage"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}