{"test_class": {"identifier": "HtpasswdRealmTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "HtpasswdRealm htpasswd;", "modifier": "", "type": "HtpasswdRealm", "declarator": "htpasswd", "var_name": "htpasswd"}], "file": "fathom-security-htpasswd/src/test/java/fathom/realm/htpasswd/HtpasswdRealmTest.java"}, "test_case": {"identifier": "testAuthenticate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAuthenticate() {\n\n        htpasswd.setAllowClearTextPasswords(true);\n\n        Account account = htpasswd.authenticate(\"user1\", \"pass1\");\n        assertNotNull(account);\n        assertEquals(\"user1\", account.getUsername());\n\n        account = htpasswd.authenticate(\"user2\", \"pass2\");\n        assertNotNull(account);\n        assertEquals(\"user2\", account.getUsername());\n\n        // Test different encryptions\n        account = htpasswd.authenticate(\"plain\", \"passWord\");\n        assertNotNull(account);\n        assertEquals(\"plain\", account.getUsername());\n\n        htpasswd.setAllowClearTextPasswords(false);\n        account = htpasswd.authenticate(\"crypt\", \"password\");\n        assertNotNull(account);\n        assertEquals(\"crypt\", account.getUsername());\n\n        account = htpasswd.authenticate(\"md5\", \"password\");\n        assertNotNull(account);\n        assertEquals(\"md5\", account.getUsername());\n\n        account = htpasswd.authenticate(\"sha\", \"password\");\n        assertNotNull(account);\n        assertEquals(\"sha\", account.getUsername());\n\n\n        // Test leading and trailing whitespace\n        account = htpasswd.authenticate(\"trailing\", \"whitespace\");\n        assertNotNull(account);\n        assertEquals(\"trailing\", account.getUsername());\n\n        account = htpasswd.authenticate(\"tabbed\", \"frontAndBack\");\n        assertNotNull(account);\n        assertEquals(\"tabbed\", account.getUsername());\n\n        account = htpasswd.authenticate(\"leading\", \"whitespace\");\n        assertNotNull(account);\n        assertEquals(\"leading\", account.getUsername());\n    }", "signature": "void testAuthenticate()", "full_signature": "@Test public void testAuthenticate()", "class_method_signature": "HtpasswdRealmTest.testAuthenticate()", "testcase": true, "constructor": false, "invocations": ["setAllowClearTextPasswords", "authenticate", "assertNotNull", "assertEquals", "getUsername", "authenticate", "assertNotNull", "assertEquals", "getUsername", "authenticate", "assertNotNull", "assertEquals", "getUsername", "setAllowClearTextPasswords", "authenticate", "assertNotNull", "assertEquals", "getUsername", "authenticate", "assertNotNull", "assertEquals", "getUsername", "authenticate", "assertNotNull", "assertEquals", "getUsername", "authenticate", "assertNotNull", "assertEquals", "getUsername", "authenticate", "assertNotNull", "assertEquals", "getUsername", "authenticate", "assertNotNull", "assertEquals", "getUsername"]}, "focal_class": {"identifier": "HtpasswdRealm", "superclass": "extends MemoryRealm", "interfaces": "", "fields": [{"original_string": "private final static Logger log = LoggerFactory.getLogger(HtpasswdRealm.class);", "modifier": "private final static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(HtpasswdRealm.class)", "var_name": "log"}, {"original_string": "private final Map<String, String> credentialsMap;", "modifier": "private final", "type": "Map<String, String>", "declarator": "credentialsMap", "var_name": "credentialsMap"}, {"original_string": "private String file;", "modifier": "private", "type": "String", "declarator": "file", "var_name": "file"}, {"original_string": "private volatile File realmFile;", "modifier": "private volatile", "type": "File", "declarator": "realmFile", "var_name": "realmFile"}, {"original_string": "private volatile long lastModified;", "modifier": "private volatile", "type": "long", "declarator": "lastModified", "var_name": "lastModified"}, {"original_string": "private boolean isAllowClearTextPasswords;", "modifier": "private", "type": "boolean", "declarator": "isAllowClearTextPasswords", "var_name": "isAllowClearTextPasswords"}], "methods": [{"identifier": "HtpasswdRealm", "parameters": "()", "modifiers": "public", "return": "", "signature": " HtpasswdRealm()", "full_signature": "public  HtpasswdRealm()", "class_method_signature": "HtpasswdRealm.HtpasswdRealm()", "testcase": false, "constructor": true}, {"identifier": "canAuthenticate", "parameters": "(AuthenticationToken authenticationToken)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canAuthenticate(AuthenticationToken authenticationToken)", "full_signature": "@Override public boolean canAuthenticate(AuthenticationToken authenticationToken)", "class_method_signature": "HtpasswdRealm.canAuthenticate(AuthenticationToken authenticationToken)", "testcase": false, "constructor": false}, {"identifier": "setup", "parameters": "(Config config)", "modifiers": "@Override public", "return": "void", "signature": "void setup(Config config)", "full_signature": "@Override public void setup(Config config)", "class_method_signature": "HtpasswdRealm.setup(Config config)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "HtpasswdRealm.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "HtpasswdRealm.stop()", "testcase": false, "constructor": false}, {"identifier": "isAllowClearTextPasswords", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAllowClearTextPasswords()", "full_signature": "public boolean isAllowClearTextPasswords()", "class_method_signature": "HtpasswdRealm.isAllowClearTextPasswords()", "testcase": false, "constructor": false}, {"identifier": "setAllowClearTextPasswords", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setAllowClearTextPasswords(boolean value)", "full_signature": "public void setAllowClearTextPasswords(boolean value)", "class_method_signature": "HtpasswdRealm.setAllowClearTextPasswords(boolean value)", "testcase": false, "constructor": false}, {"identifier": "setFile", "parameters": "(File realmFile)", "modifiers": "public synchronized", "return": "void", "signature": "void setFile(File realmFile)", "full_signature": "public synchronized void setFile(File realmFile)", "class_method_signature": "HtpasswdRealm.setFile(File realmFile)", "testcase": false, "constructor": false}, {"identifier": "hasAccount", "parameters": "(String username)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasAccount(String username)", "full_signature": "@Override public boolean hasAccount(String username)", "class_method_signature": "HtpasswdRealm.hasAccount(String username)", "testcase": false, "constructor": false}, {"identifier": "getAccount", "parameters": "(String username)", "modifiers": "@Override public", "return": "Account", "signature": "Account getAccount(String username)", "full_signature": "@Override public Account getAccount(String username)", "class_method_signature": "HtpasswdRealm.getAccount(String username)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(AuthenticationToken authenticationToken)", "modifiers": "@Override public", "return": "Account", "signature": "Account authenticate(AuthenticationToken authenticationToken)", "full_signature": "@Override public Account authenticate(AuthenticationToken authenticationToken)", "class_method_signature": "HtpasswdRealm.authenticate(AuthenticationToken authenticationToken)", "testcase": false, "constructor": false}, {"identifier": "validatePassword", "parameters": "(StandardCredentials requestCredentials, StandardCredentials storedCredentials)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean validatePassword(StandardCredentials requestCredentials, StandardCredentials storedCredentials)", "full_signature": "@Override protected boolean validatePassword(StandardCredentials requestCredentials, StandardCredentials storedCredentials)", "class_method_signature": "HtpasswdRealm.validatePassword(StandardCredentials requestCredentials, StandardCredentials storedCredentials)", "testcase": false, "constructor": false}, {"identifier": "readCredentialsFile", "parameters": "()", "modifiers": "protected synchronized", "return": "void", "signature": "void readCredentialsFile()", "full_signature": "protected synchronized void readCredentialsFile()", "class_method_signature": "HtpasswdRealm.readCredentialsFile()", "testcase": false, "constructor": false}, {"identifier": "readCredentialsURL", "parameters": "(URL url)", "modifiers": "protected", "return": "Map<String, String>", "signature": "Map<String, String> readCredentialsURL(URL url)", "full_signature": "protected Map<String, String> readCredentialsURL(URL url)", "class_method_signature": "HtpasswdRealm.readCredentialsURL(URL url)", "testcase": false, "constructor": false}], "file": "fathom-security-htpasswd/src/main/java/fathom/realm/htpasswd/HtpasswdRealm.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(AuthenticationToken authenticationToken)", "modifiers": "@Override public", "return": "Account", "body": "@Override\n    public Account authenticate(AuthenticationToken authenticationToken) {\n        readCredentialsFile();\n        return super.authenticate(authenticationToken);\n    }", "signature": "Account authenticate(AuthenticationToken authenticationToken)", "full_signature": "@Override public Account authenticate(AuthenticationToken authenticationToken)", "class_method_signature": "HtpasswdRealm.authenticate(AuthenticationToken authenticationToken)", "testcase": false, "constructor": false, "invocations": ["readCredentialsFile", "authenticate"]}, "repository": {"repo_id": 35689778, "url": "https://github.com/gitblit/fathom", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 1076, "license": "licensed"}}