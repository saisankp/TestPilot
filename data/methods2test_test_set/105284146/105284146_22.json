{"test_class": {"identifier": "FlowsValidationTest", "superclass": "extends AbstractValidationTest", "interfaces": "", "fields": [{"original_string": "private final double r = 0.04;", "modifier": "private final", "type": "double", "declarator": "r = 0.04", "var_name": "r"}, {"original_string": "private final double x = 0.423;", "modifier": "private final", "type": "double", "declarator": "x = 0.423", "var_name": "x"}, {"original_string": "private final double g1 = 0.0;", "modifier": "private final", "type": "double", "declarator": "g1 = 0.0", "var_name": "g1"}, {"original_string": "private final double g2 = 0.0;", "modifier": "private final", "type": "double", "declarator": "g2 = 0.0", "var_name": "g2"}, {"original_string": "private final double b1 = 0.0;", "modifier": "private final", "type": "double", "declarator": "b1 = 0.0", "var_name": "b1"}, {"original_string": "private final double b2 = 0.0;", "modifier": "private final", "type": "double", "declarator": "b2 = 0.0", "var_name": "b2"}, {"original_string": "private final double rho1 = 1;", "modifier": "private final", "type": "double", "declarator": "rho1 = 1", "var_name": "rho1"}, {"original_string": "private final double rho2 = 11.249999728;", "modifier": "private final", "type": "double", "declarator": "rho2 = 11.249999728", "var_name": "rho2"}, {"original_string": "private final double alpha1 = 0.0;", "modifier": "private final", "type": "double", "declarator": "alpha1 = 0.0", "var_name": "alpha1"}, {"original_string": "private final double alpha2 = 0.0;", "modifier": "private final", "type": "double", "declarator": "alpha2 = 0.0", "var_name": "alpha2"}, {"original_string": "private final double u1 = 236.80258178710938;", "modifier": "private final", "type": "double", "declarator": "u1 = 236.80258178710938", "var_name": "u1"}, {"original_string": "private final double ratedU1 = 225.0;", "modifier": "private final", "type": "double", "declarator": "ratedU1 = 225.0", "var_name": "ratedU1"}, {"original_string": "private final double u2 = 21.04814910888672;", "modifier": "private final", "type": "double", "declarator": "u2 = 21.04814910888672", "var_name": "u2"}, {"original_string": "private final double ratedU2 = 20.0;", "modifier": "private final", "type": "double", "declarator": "ratedU2 = 20.0", "var_name": "ratedU2"}, {"original_string": "private final double theta1 = 0.1257718437996544;", "modifier": "private final", "type": "double", "declarator": "theta1 = 0.1257718437996544", "var_name": "theta1"}, {"original_string": "private final double theta2 = 0.12547118123496284;", "modifier": "private final", "type": "double", "declarator": "theta2 = 0.12547118123496284", "var_name": "theta2"}, {"original_string": "private final boolean connected1 = true;", "modifier": "private final", "type": "boolean", "declarator": "connected1 = true", "var_name": "connected1"}, {"original_string": "private final boolean connected2 = true;", "modifier": "private final", "type": "boolean", "declarator": "connected2 = true", "var_name": "connected2"}, {"original_string": "private final boolean mainComponent1 = true;", "modifier": "private final", "type": "boolean", "declarator": "mainComponent1 = true", "var_name": "mainComponent1"}, {"original_string": "private final boolean mainComponent2 = true;", "modifier": "private final", "type": "boolean", "declarator": "mainComponent2 = true", "var_name": "mainComponent2"}, {"original_string": "private Bus bus1;", "modifier": "private", "type": "Bus", "declarator": "bus1", "var_name": "bus1"}, {"original_string": "private Bus bus2;", "modifier": "private", "type": "Bus", "declarator": "bus2", "var_name": "bus2"}, {"original_string": "private Terminal terminal1;", "modifier": "private", "type": "Terminal", "declarator": "terminal1", "var_name": "terminal1"}, {"original_string": "private Terminal terminal2;", "modifier": "private", "type": "Terminal", "declarator": "terminal2", "var_name": "terminal2"}, {"original_string": "private Line line1;", "modifier": "private", "type": "Line", "declarator": "line1", "var_name": "line1"}, {"original_string": "private RatioTapChanger ratioTapChanger;", "modifier": "private", "type": "RatioTapChanger", "declarator": "ratioTapChanger", "var_name": "ratioTapChanger"}, {"original_string": "private TwoWindingsTransformer transformer1;", "modifier": "private", "type": "TwoWindingsTransformer", "declarator": "transformer1", "var_name": "transformer1"}, {"original_string": "private ValidationConfig looseConfigSpecificCompatibility;", "modifier": "private", "type": "ValidationConfig", "declarator": "looseConfigSpecificCompatibility", "var_name": "looseConfigSpecificCompatibility"}, {"original_string": "private ValidationConfig strictConfigSpecificCompatibility;", "modifier": "private", "type": "ValidationConfig", "declarator": "strictConfigSpecificCompatibility", "var_name": "strictConfigSpecificCompatibility"}], "file": "loadflow/loadflow-validation/src/test/java/com/powsybl/loadflow/validation/FlowsValidationTest.java"}, "test_case": {"identifier": "checkFlows", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkFlows() {\n        double p1 = 40.0744;\n        double q1 = 2.3124743;\n        double p2 = -40.073254;\n        double q2 = -2.3003194;\n\n        assertTrue(FlowsValidation.INSTANCE.checkFlows(new BranchData(\"test\", r, x, rho1, rho2, u1, u2, theta1, theta2, alpha1, alpha2, g1, g2, b1, b2, p1, q1, p2, q2, connected1, connected2,\n                                              mainComponent1, mainComponent2, looseConfig.getEpsilonX(), looseConfig.applyReactanceCorrection()), looseConfig, NullWriter.NULL_WRITER));\n        assertFalse(FlowsValidation.INSTANCE.checkFlows(new BranchData(\"test\", r, x, rho1, rho2, u1, u2, theta1, theta2, alpha1, alpha2, g1, g2, b1, b2, p1, q1, p2, q2, connected1, connected2,\n                                               mainComponent1, mainComponent2, strictConfig.getEpsilonX(), strictConfig.applyReactanceCorrection()), strictConfig, NullWriter.NULL_WRITER));\n\n        double r = 0.04 / (rho2 * rho2);\n        double x = 0.423 / (rho2 * rho2);\n        double rho1 = 1 / rho2;\n        double rho2 = 1;\n\n        assertTrue(FlowsValidation.INSTANCE.checkFlows(new BranchData(\"test\", r, x, rho1, rho2, u1, u2, theta1, theta2, alpha1, alpha2, g1, g2, b1, b2, p1, q1, p2, q2, connected1, connected2,\n                                              mainComponent1, mainComponent2, looseConfig.getEpsilonX(), looseConfig.applyReactanceCorrection()), looseConfig, NullWriter.NULL_WRITER));\n        assertFalse(FlowsValidation.INSTANCE.checkFlows(new BranchData(\"test\", r, x, rho1, rho2, u1, u2, theta1, theta2, alpha1, alpha2, g1, g2, b1, b2, p1, q1, p2, q2, connected1, connected2,\n                                               mainComponent1, mainComponent2, strictConfig.getEpsilonX(), strictConfig.applyReactanceCorrection()), strictConfig, NullWriter.NULL_WRITER));\n\n        // check disconnected on one end\n        assertTrue(FlowsValidation.INSTANCE.checkFlows(new BranchData(\"test\", r, x, rho1, rho2, Double.NaN, u2, Double.NaN, theta2, alpha1, alpha2, g1, g2, b1, b2, Double.NaN, Double.NaN, 0f, 0f, false, connected2,\n                                            mainComponent1, mainComponent2, looseConfig.getEpsilonX(), looseConfig.applyReactanceCorrection()), looseConfig, new PrintWriter(System.err)));\n        assertFalse(FlowsValidation.INSTANCE.checkFlows(new BranchData(\"test\", r, x, rho1, rho2, Double.NaN, u2, Double.NaN, theta2, alpha1, alpha2, g1, g2, b1, b2, Double.NaN, Double.NaN, 0.2f, 0f, false, connected2,\n                                               mainComponent1, mainComponent2, looseConfig.getEpsilonX(), looseConfig.applyReactanceCorrection()), looseConfig, NullWriter.NULL_WRITER));\n\n        // check disconnected on both end\n        assertTrue(FlowsValidation.INSTANCE.checkFlows(new BranchData(\"test\", r, x, rho1, rho2, Double.NaN, Double.NaN, Double.NaN, Double.NaN, alpha1, alpha2, g1, g2, b1, b2, Float.NaN, Float.NaN, Float.NaN, Float.NaN,\n                                              false, false, mainComponent1, mainComponent2, looseConfig.getEpsilonX(), looseConfig.applyReactanceCorrection()), looseConfig, NullWriter.NULL_WRITER));\n        assertFalse(FlowsValidation.INSTANCE.checkFlows(new BranchData(\"test\", r, x, rho1, rho2, Double.NaN, Double.NaN, Double.NaN, Double.NaN, alpha1, alpha2, g1, g2, b1, b2, p1, q2, Double.NaN, Double.NaN,\n                                              false, false, mainComponent1, mainComponent2, looseConfig.getEpsilonX(), looseConfig.applyReactanceCorrection()), looseConfig, NullWriter.NULL_WRITER));\n        assertFalse(FlowsValidation.INSTANCE.checkFlows(new BranchData(\"test\", r, x, rho1, rho2, Double.NaN, Double.NaN, Double.NaN, Double.NaN, alpha1, alpha2, g1, g2, b1, b2, Double.NaN, Double.NaN, p2, q2,\n                                              false, false, mainComponent1, mainComponent2, looseConfig.getEpsilonX(), looseConfig.applyReactanceCorrection()), looseConfig, NullWriter.NULL_WRITER));\n\n        // check with NaN values\n        assertFalse(FlowsValidation.INSTANCE.checkFlows(new BranchData(\"test\", r, x, Double.NaN, rho2, u1, u2, theta1, theta2, alpha1, alpha2, g1, g2, b1, b2, p1, q1, p2, q2, connected1, connected2,\n                                               mainComponent1, mainComponent2, looseConfig.getEpsilonX(), looseConfig.applyReactanceCorrection()), looseConfig, NullWriter.NULL_WRITER));\n        looseConfig.setOkMissingValues(true);\n        assertTrue(FlowsValidation.INSTANCE.checkFlows(new BranchData(\"test\", r, x, Double.NaN, rho2, u1, u2, theta1, theta2, alpha1, alpha2, g1, g2, b1, b2, p1, q1, p2, q2, connected1, connected2,\n                                              mainComponent1, mainComponent2, looseConfig.getEpsilonX(), looseConfig.applyReactanceCorrection()), looseConfig, NullWriter.NULL_WRITER));\n        looseConfig.setOkMissingValues(false);\n    }", "signature": "void checkFlows()", "full_signature": "@Test public void checkFlows()", "class_method_signature": "FlowsValidationTest.checkFlows()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "checkFlows", "getEpsilonX", "applyReactanceCorrection", "assertFalse", "checkFlows", "getEpsilonX", "applyReactanceCorrection", "assertTrue", "checkFlows", "getEpsilonX", "applyReactanceCorrection", "assertFalse", "checkFlows", "getEpsilonX", "applyReactanceCorrection", "assertTrue", "checkFlows", "getEpsilonX", "applyReactanceCorrection", "assertFalse", "checkFlows", "getEpsilonX", "applyReactanceCorrection", "assertTrue", "checkFlows", "getEpsilonX", "applyReactanceCorrection", "assertFalse", "checkFlows", "getEpsilonX", "applyReactanceCorrection", "assertFalse", "checkFlows", "getEpsilonX", "applyReactanceCorrection", "assertFalse", "checkFlows", "getEpsilonX", "applyReactanceCorrection", "setOkMissingValues", "assertTrue", "checkFlows", "getEpsilonX", "applyReactanceCorrection", "setOkMissingValues"]}, "focal_class": {"identifier": "FlowsValidation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(FlowsValidation.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FlowsValidation.class)", "var_name": "LOGGER"}, {"original_string": "public static final FlowsValidation INSTANCE = new FlowsValidation();", "modifier": "public static final", "type": "FlowsValidation", "declarator": "INSTANCE = new FlowsValidation()", "var_name": "INSTANCE"}], "methods": [{"identifier": "FlowsValidation", "parameters": "()", "modifiers": "private", "return": "", "signature": " FlowsValidation()", "full_signature": "private  FlowsValidation()", "class_method_signature": "FlowsValidation.FlowsValidation()", "testcase": false, "constructor": true}, {"identifier": "checkFlows", "parameters": "(BranchData branch, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(BranchData branch, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkFlows(BranchData branch, ValidationConfig config, Writer writer)", "class_method_signature": "FlowsValidation.checkFlows(BranchData branch, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkFlows", "parameters": "(BranchData branch, ValidationConfig config, ValidationWriter flowsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(BranchData branch, ValidationConfig config, ValidationWriter flowsWriter)", "full_signature": "public boolean checkFlows(BranchData branch, ValidationConfig config, ValidationWriter flowsWriter)", "class_method_signature": "FlowsValidation.checkFlows(BranchData branch, ValidationConfig config, ValidationWriter flowsWriter)", "testcase": false, "constructor": false}, {"identifier": "checkDisconnectedTerminal", "parameters": "(String id, String terminalNumber, double p, double pCalc, double q, double qCalc, ValidationConfig config)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkDisconnectedTerminal(String id, String terminalNumber, double p, double pCalc, double q, double qCalc, ValidationConfig config)", "full_signature": "private static boolean checkDisconnectedTerminal(String id, String terminalNumber, double p, double pCalc, double q, double qCalc, ValidationConfig config)", "class_method_signature": "FlowsValidation.checkDisconnectedTerminal(String id, String terminalNumber, double p, double pCalc, double q, double qCalc, ValidationConfig config)", "testcase": false, "constructor": false}, {"identifier": "checkConnectedTerminal", "parameters": "(String id, String terminalNumber, double p, double pCalc, double q, double qCalc, ValidationConfig config)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkConnectedTerminal(String id, String terminalNumber, double p, double pCalc, double q, double qCalc, ValidationConfig config)", "full_signature": "private static boolean checkConnectedTerminal(String id, String terminalNumber, double p, double pCalc, double q, double qCalc, ValidationConfig config)", "class_method_signature": "FlowsValidation.checkConnectedTerminal(String id, String terminalNumber, double p, double pCalc, double q, double qCalc, ValidationConfig config)", "testcase": false, "constructor": false}, {"identifier": "checkFlows", "parameters": "(Line l, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(Line l, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkFlows(Line l, ValidationConfig config, Writer writer)", "class_method_signature": "FlowsValidation.checkFlows(Line l, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkFlows", "parameters": "(Line l, ValidationConfig config, ValidationWriter flowsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(Line l, ValidationConfig config, ValidationWriter flowsWriter)", "full_signature": "public boolean checkFlows(Line l, ValidationConfig config, ValidationWriter flowsWriter)", "class_method_signature": "FlowsValidation.checkFlows(Line l, ValidationConfig config, ValidationWriter flowsWriter)", "testcase": false, "constructor": false}, {"identifier": "checkFlows", "parameters": "(TwoWindingsTransformer twt, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(TwoWindingsTransformer twt, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkFlows(TwoWindingsTransformer twt, ValidationConfig config, Writer writer)", "class_method_signature": "FlowsValidation.checkFlows(TwoWindingsTransformer twt, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkFlows", "parameters": "(TwoWindingsTransformer twt, ValidationConfig config, ValidationWriter flowsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(TwoWindingsTransformer twt, ValidationConfig config, ValidationWriter flowsWriter)", "full_signature": "public boolean checkFlows(TwoWindingsTransformer twt, ValidationConfig config, ValidationWriter flowsWriter)", "class_method_signature": "FlowsValidation.checkFlows(TwoWindingsTransformer twt, ValidationConfig config, ValidationWriter flowsWriter)", "testcase": false, "constructor": false}, {"identifier": "checkFlows", "parameters": "(Network network, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(Network network, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkFlows(Network network, ValidationConfig config, Writer writer)", "class_method_signature": "FlowsValidation.checkFlows(Network network, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkFlows", "parameters": "(Network network, ValidationConfig config, Path file)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(Network network, ValidationConfig config, Path file)", "full_signature": "public boolean checkFlows(Network network, ValidationConfig config, Path file)", "class_method_signature": "FlowsValidation.checkFlows(Network network, ValidationConfig config, Path file)", "testcase": false, "constructor": false}, {"identifier": "checkFlows", "parameters": "(Network network, ValidationConfig config, ValidationWriter flowsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(Network network, ValidationConfig config, ValidationWriter flowsWriter)", "full_signature": "public boolean checkFlows(Network network, ValidationConfig config, ValidationWriter flowsWriter)", "class_method_signature": "FlowsValidation.checkFlows(Network network, ValidationConfig config, ValidationWriter flowsWriter)", "testcase": false, "constructor": false}], "file": "loadflow/loadflow-validation/src/main/java/com/powsybl/loadflow/validation/FlowsValidation.java"}, "focal_method": {"identifier": "checkFlows", "parameters": "(BranchData branch, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "body": "public boolean checkFlows(BranchData branch, ValidationConfig config, Writer writer) {\n        Objects.requireNonNull(branch);\n        Objects.requireNonNull(branch.getId());\n        Objects.requireNonNull(config);\n        Objects.requireNonNull(writer);\n\n        try (ValidationWriter flowsWriter = ValidationUtils.createValidationWriter(branch.getId(), config, writer, ValidationType.FLOWS)) {\n            return checkFlows(branch, config, flowsWriter);\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }", "signature": "boolean checkFlows(BranchData branch, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkFlows(BranchData branch, ValidationConfig config, Writer writer)", "class_method_signature": "FlowsValidation.checkFlows(BranchData branch, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "getId", "requireNonNull", "requireNonNull", "createValidationWriter", "getId", "checkFlows"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}