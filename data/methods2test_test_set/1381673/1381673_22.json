{"test_class": {"identifier": "ScenarioSimulationXMLPersistenceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected ScenarioSimulationXMLPersistence instance = ScenarioSimulationXMLPersistence.getInstance();", "modifier": "protected", "type": "ScenarioSimulationXMLPersistence", "declarator": "instance = ScenarioSimulationXMLPersistence.getInstance()", "var_name": "instance"}, {"original_string": "protected String currentVersion = new ScenarioSimulationModel().getVersion();", "modifier": "protected", "type": "String", "declarator": "currentVersion = new ScenarioSimulationModel().getVersion()", "var_name": "currentVersion"}, {"original_string": "protected MigrationStrategy migrationInstance = new InMemoryMigrationStrategy();", "modifier": "protected", "type": "MigrationStrategy", "declarator": "migrationInstance = new InMemoryMigrationStrategy()", "var_name": "migrationInstance"}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/util/ScenarioSimulationXMLPersistenceTest.java"}, "test_case": {"identifier": "migrateIfNecessary_1_6_to_1_7", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void migrateIfNecessary_1_6_to_1_7() throws Exception {\n        String toMigrate = getFileContent(\"scesim-1-6-rule.scesim\");\n        Document document = DOMParserUtil.getDocument(toMigrate);\n        migrationInstance.from1_6to1_7().accept(document);\n        List<Node> factMappingsNodes = DOMParserUtil.getNestedChildrenNodesList(document, SIMULATION_NODE, SIMULATION_DESCRIPTOR_NODE, FACT_MAPPINGS_NODE);\n        assertNotNull(factMappingsNodes);\n        assertEquals(1, factMappingsNodes.size());\n        List<Node> factMappingNodes = DOMParserUtil.getChildrenNodesList(factMappingsNodes.get(0), FACT_MAPPING_NODE);\n        for (Node factMappingNode : factMappingNodes) {\n            List<Node> expressionIdentifierNamesNodes = DOMParserUtil.getNestedChildrenNodesList(factMappingNode, \"expressionIdentifier\", \"name\");\n            String expressionIdentifierName = expressionIdentifierNamesNodes.get(0).getTextContent();\n            assertNotNull(expressionIdentifierName);\n            List<Node> columnWidthNodes = DOMParserUtil.getChildrenNodesList(factMappingNode, \"columnWidth\");\n            assertEquals(1, columnWidthNodes.size());\n            String columnWidth = columnWidthNodes.get(0).getTextContent();\n            assertNotNull(columnWidth);\n            assertFalse(columnWidth.isEmpty());\n            double columnWidthDouble = Double.parseDouble(columnWidth);\n            assertEquals(getColumnWidth(expressionIdentifierName), columnWidthDouble, 0.0);\n        }\n        commonCheck(toMigrate, document, \"1.7\");\n        toMigrate = getFileContent(\"scesim-1-6-dmn.scesim\");\n        document = DOMParserUtil.getDocument(toMigrate);\n        migrationInstance.from1_6to1_7().accept(document);\n        factMappingsNodes = DOMParserUtil.getNestedChildrenNodesList(document, SIMULATION_NODE, SIMULATION_DESCRIPTOR_NODE, FACT_MAPPINGS_NODE);\n        assertNotNull(factMappingsNodes);\n        assertEquals(1, factMappingsNodes.size());\n        factMappingNodes = DOMParserUtil.getChildrenNodesList(factMappingsNodes.get(0), FACT_MAPPING_NODE);\n        for (Node factMappingNode : factMappingNodes) {\n            List<Node> expressionIdentifierNamesNodes = DOMParserUtil.getNestedChildrenNodesList(factMappingNode, \"expressionIdentifier\", \"name\");\n            String expressionIdentifierName = expressionIdentifierNamesNodes.get(0).getTextContent();\n            assertNotNull(expressionIdentifierName);\n            List<Node> columnWidthNodes = DOMParserUtil.getChildrenNodesList(factMappingNode, \"columnWidth\");\n            assertEquals(1, columnWidthNodes.size());\n            String columnWidth = columnWidthNodes.get(0).getTextContent();\n            assertNotNull(columnWidth);\n            assertFalse(columnWidth.isEmpty());\n            double columnWidthDouble = Double.parseDouble(columnWidth);\n            assertEquals(getColumnWidth(expressionIdentifierName), columnWidthDouble, 0.0);\n        }\n        commonCheck(toMigrate, document, \"1.7\");\n    }", "signature": "void migrateIfNecessary_1_6_to_1_7()", "full_signature": "@Test public void migrateIfNecessary_1_6_to_1_7()", "class_method_signature": "ScenarioSimulationXMLPersistenceTest.migrateIfNecessary_1_6_to_1_7()", "testcase": true, "constructor": false, "invocations": ["getFileContent", "getDocument", "accept", "from1_6to1_7", "getNestedChildrenNodesList", "assertNotNull", "assertEquals", "size", "getChildrenNodesList", "get", "getNestedChildrenNodesList", "getTextContent", "get", "assertNotNull", "getChildrenNodesList", "assertEquals", "size", "getTextContent", "get", "assertNotNull", "assertFalse", "isEmpty", "parseDouble", "assertEquals", "getColumnWidth", "commonCheck", "getFileContent", "getDocument", "accept", "from1_6to1_7", "getNestedChildrenNodesList", "assertNotNull", "assertEquals", "size", "getChildrenNodesList", "get", "getNestedChildrenNodesList", "getTextContent", "get", "assertNotNull", "getChildrenNodesList", "assertEquals", "size", "getTextContent", "get", "assertNotNull", "assertFalse", "isEmpty", "parseDouble", "assertEquals", "getColumnWidth", "commonCheck"]}, "focal_class": {"identifier": "ScenarioSimulationXMLPersistence", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ScenarioSimulationXMLPersistence INSTANCE = new ScenarioSimulationXMLPersistence();", "modifier": "private static final", "type": "ScenarioSimulationXMLPersistence", "declarator": "INSTANCE = new ScenarioSimulationXMLPersistence()", "var_name": "INSTANCE"}, {"original_string": "private static final String CURRENT_VERSION = new ScenarioSimulationModel().getVersion();", "modifier": "private static final", "type": "String", "declarator": "CURRENT_VERSION = new ScenarioSimulationModel().getVersion()", "var_name": "CURRENT_VERSION"}, {"original_string": "private static final Pattern p = Pattern.compile(\"version=\\\"([0-9]+\\\\.[0-9]+)\");", "modifier": "private static final", "type": "Pattern", "declarator": "p = Pattern.compile(\"version=\\\"([0-9]+\\\\.[0-9]+)\")", "var_name": "p"}, {"original_string": "private XStream xt;", "modifier": "private", "type": "XStream", "declarator": "xt", "var_name": "xt"}, {"original_string": "private MigrationStrategy migrationStrategy = new InMemoryMigrationStrategy();", "modifier": "private", "type": "MigrationStrategy", "declarator": "migrationStrategy = new InMemoryMigrationStrategy()", "var_name": "migrationStrategy"}], "methods": [{"identifier": "ScenarioSimulationXMLPersistence", "parameters": "()", "modifiers": "private", "return": "", "signature": " ScenarioSimulationXMLPersistence()", "full_signature": "private  ScenarioSimulationXMLPersistence()", "class_method_signature": "ScenarioSimulationXMLPersistence.ScenarioSimulationXMLPersistence()", "testcase": false, "constructor": true}, {"identifier": "configureXStreamMappings", "parameters": "(XStream toConfigure)", "modifiers": "public static", "return": "void", "signature": "void configureXStreamMappings(XStream toConfigure)", "full_signature": "public static void configureXStreamMappings(XStream toConfigure)", "class_method_signature": "ScenarioSimulationXMLPersistence.configureXStreamMappings(XStream toConfigure)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "ScenarioSimulationXMLPersistence", "signature": "ScenarioSimulationXMLPersistence getInstance()", "full_signature": "public static ScenarioSimulationXMLPersistence getInstance()", "class_method_signature": "ScenarioSimulationXMLPersistence.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getCurrentVersion", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getCurrentVersion()", "full_signature": "public static String getCurrentVersion()", "class_method_signature": "ScenarioSimulationXMLPersistence.getCurrentVersion()", "testcase": false, "constructor": false}, {"identifier": "cleanUpUnusedNodes", "parameters": "(String input)", "modifiers": "public static", "return": "String", "signature": "String cleanUpUnusedNodes(String input)", "full_signature": "public static String cleanUpUnusedNodes(String input)", "class_method_signature": "ScenarioSimulationXMLPersistence.cleanUpUnusedNodes(String input)", "testcase": false, "constructor": false}, {"identifier": "getColumnWidth", "parameters": "(String expressionIdentifierName)", "modifiers": "public static", "return": "double", "signature": "double getColumnWidth(String expressionIdentifierName)", "full_signature": "public static double getColumnWidth(String expressionIdentifierName)", "class_method_signature": "ScenarioSimulationXMLPersistence.getColumnWidth(String expressionIdentifierName)", "testcase": false, "constructor": false}, {"identifier": "marshal", "parameters": "(final ScenarioSimulationModel sc)", "modifiers": "public", "return": "String", "signature": "String marshal(final ScenarioSimulationModel sc)", "full_signature": "public String marshal(final ScenarioSimulationModel sc)", "class_method_signature": "ScenarioSimulationXMLPersistence.marshal(final ScenarioSimulationModel sc)", "testcase": false, "constructor": false}, {"identifier": "unmarshal", "parameters": "(final String rawXml)", "modifiers": "public", "return": "ScenarioSimulationModel", "signature": "ScenarioSimulationModel unmarshal(final String rawXml)", "full_signature": "public ScenarioSimulationModel unmarshal(final String rawXml)", "class_method_signature": "ScenarioSimulationXMLPersistence.unmarshal(final String rawXml)", "testcase": false, "constructor": false}, {"identifier": "unmarshal", "parameters": "(final String rawXml, boolean migrate)", "modifiers": "public", "return": "ScenarioSimulationModel", "signature": "ScenarioSimulationModel unmarshal(final String rawXml, boolean migrate)", "full_signature": "public ScenarioSimulationModel unmarshal(final String rawXml, boolean migrate)", "class_method_signature": "ScenarioSimulationXMLPersistence.unmarshal(final String rawXml, boolean migrate)", "testcase": false, "constructor": false}, {"identifier": "migrateIfNecessary", "parameters": "(String rawXml)", "modifiers": "public", "return": "String", "signature": "String migrateIfNecessary(String rawXml)", "full_signature": "public String migrateIfNecessary(String rawXml)", "class_method_signature": "ScenarioSimulationXMLPersistence.migrateIfNecessary(String rawXml)", "testcase": false, "constructor": false}, {"identifier": "extractVersion", "parameters": "(String rawXml)", "modifiers": "public", "return": "String", "signature": "String extractVersion(String rawXml)", "full_signature": "public String extractVersion(String rawXml)", "class_method_signature": "ScenarioSimulationXMLPersistence.extractVersion(String rawXml)", "testcase": false, "constructor": false}, {"identifier": "getMigrationStrategy", "parameters": "()", "modifiers": "public", "return": "MigrationStrategy", "signature": "MigrationStrategy getMigrationStrategy()", "full_signature": "public MigrationStrategy getMigrationStrategy()", "class_method_signature": "ScenarioSimulationXMLPersistence.getMigrationStrategy()", "testcase": false, "constructor": false}, {"identifier": "setMigrationStrategy", "parameters": "(MigrationStrategy migrationStrategy)", "modifiers": "public", "return": "void", "signature": "void setMigrationStrategy(MigrationStrategy migrationStrategy)", "full_signature": "public void setMigrationStrategy(MigrationStrategy migrationStrategy)", "class_method_signature": "ScenarioSimulationXMLPersistence.setMigrationStrategy(MigrationStrategy migrationStrategy)", "testcase": false, "constructor": false}, {"identifier": "internalUnmarshal", "parameters": "(String xml)", "modifiers": "protected", "return": "ScenarioSimulationModel", "signature": "ScenarioSimulationModel internalUnmarshal(String xml)", "full_signature": "protected ScenarioSimulationModel internalUnmarshal(String xml)", "class_method_signature": "ScenarioSimulationXMLPersistence.internalUnmarshal(String xml)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/util/ScenarioSimulationXMLPersistence.java"}, "focal_method": {"identifier": "getColumnWidth", "parameters": "(String expressionIdentifierName)", "modifiers": "public static", "return": "double", "body": "public static double getColumnWidth(String expressionIdentifierName) {\n        ExpressionIdentifier.NAME expressionName = ExpressionIdentifier.NAME.Other;\n        try {\n            expressionName = ExpressionIdentifier.NAME.valueOf(expressionIdentifierName);\n        } catch (IllegalArgumentException e) {\n            // ColumnId not recognized\n        }\n        switch (expressionName) {\n            case Index:\n                return 70;\n            case Description:\n                return 300;\n            default:\n                return 114;\n        }\n    }", "signature": "double getColumnWidth(String expressionIdentifierName)", "full_signature": "public static double getColumnWidth(String expressionIdentifierName)", "class_method_signature": "ScenarioSimulationXMLPersistence.getColumnWidth(String expressionIdentifierName)", "testcase": false, "constructor": false, "invocations": ["valueOf"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}