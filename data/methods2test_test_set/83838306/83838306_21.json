{"test_class": {"identifier": "FeatureStoreRealTest", "superclass": "", "interfaces": "", "fields": [], "file": "outland-feature-java/src/test/java/outland/feature/FeatureStoreRealTest.java"}, "test_case": {"identifier": "noApiServerAndFailingLocalStoreDoesNotCrashTheFeatureLoader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void noApiServerAndFailingLocalStoreDoesNotCrashTheFeatureLoader() {\n\n    ServerConfiguration serverConfiguration =\n        new ServerConfiguration()\n            .baseURI(\"http://localhost\")\n            .defaultGroup(\"the_group\");\n\n    final FeatureClient client = FeatureClient.newBuilder()\n        // set useless store and backing\n        .featureStore(new FeatureStoreFailing())\n        .localFeatureStore(new FeatureStoreLocalNone())\n        .serverConfiguration(serverConfiguration)\n        .build();\n\n    FeatureStoreLocal failing = new FeatureStoreLocalFailing();\n\n    FeatureStoreReal fs = new FeatureStoreReal(client, failing);\n    try {\n      fs.open();\n      assertTrue(\"should call api server for single group\",\n          fs.loadFromApiAttempted.get());\n      assertFalse(\"should call api server for single group when api server down\",\n          fs.loadFromApiSuccessful.get());\n      assertTrue(\n          \"should call local store for single group\",\n          fs.loadFromLocalAttempted.get());\n      assertFalse(\"should not load local store for single group when local store crashes\",\n          fs.loadFromLocalSuccessful.get());\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail();\n    }\n  }", "signature": "void noApiServerAndFailingLocalStoreDoesNotCrashTheFeatureLoader()", "full_signature": "@Test public void noApiServerAndFailingLocalStoreDoesNotCrashTheFeatureLoader()", "class_method_signature": "FeatureStoreRealTest.noApiServerAndFailingLocalStoreDoesNotCrashTheFeatureLoader()", "testcase": true, "constructor": false, "invocations": ["defaultGroup", "baseURI", "build", "serverConfiguration", "localFeatureStore", "featureStore", "newBuilder", "open", "assertTrue", "get", "assertFalse", "get", "assertTrue", "get", "assertFalse", "get", "printStackTrace", "fail"]}, "focal_class": {"identifier": "FeatureStoreReal", "superclass": "", "interfaces": "implements FeatureStore", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(FeatureClient.class.getSimpleName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FeatureClient.class.getSimpleName())", "var_name": "logger"}, {"original_string": "private static final long MAX_CACHE_SIZE = ServerConfiguration.MAX_CACHE_SIZE;", "modifier": "private static final", "type": "long", "declarator": "MAX_CACHE_SIZE = ServerConfiguration.MAX_CACHE_SIZE", "var_name": "MAX_CACHE_SIZE"}, {"original_string": "private static final int INITIAL_CAPACITY = ServerConfiguration.INITIAL_CAPACITY;", "modifier": "private static final", "type": "int", "declarator": "INITIAL_CAPACITY = ServerConfiguration.INITIAL_CAPACITY", "var_name": "INITIAL_CAPACITY"}, {"original_string": "private static final int REFRESH_AFTER_WRITE_S = ServerConfiguration.REFRESH_AFTER_WRITE_S;", "modifier": "private static final", "type": "int", "declarator": "REFRESH_AFTER_WRITE_S = ServerConfiguration.REFRESH_AFTER_WRITE_S", "var_name": "REFRESH_AFTER_WRITE_S"}, {"original_string": "private final FeatureClient client;", "modifier": "private final", "type": "FeatureClient", "declarator": "client", "var_name": "client"}, {"original_string": "private final FeatureStoreLocal backingFeatureStore;", "modifier": "private final", "type": "FeatureStoreLocal", "declarator": "backingFeatureStore", "var_name": "backingFeatureStore"}, {"original_string": "@VisibleForTesting AtomicBoolean loadFromApiSuccessful = new AtomicBoolean(false);", "modifier": "@VisibleForTesting", "type": "AtomicBoolean", "declarator": "loadFromApiSuccessful = new AtomicBoolean(false)", "var_name": "loadFromApiSuccessful"}, {"original_string": "@VisibleForTesting AtomicBoolean loadFromLocalSuccessful = new AtomicBoolean(false);", "modifier": "@VisibleForTesting", "type": "AtomicBoolean", "declarator": "loadFromLocalSuccessful = new AtomicBoolean(false)", "var_name": "loadFromLocalSuccessful"}, {"original_string": "@VisibleForTesting AtomicBoolean loadFromApiAttempted = new AtomicBoolean(false);", "modifier": "@VisibleForTesting", "type": "AtomicBoolean", "declarator": "loadFromApiAttempted = new AtomicBoolean(false)", "var_name": "loadFromApiAttempted"}, {"original_string": "@VisibleForTesting AtomicBoolean loadFromLocalAttempted = new AtomicBoolean(false);", "modifier": "@VisibleForTesting", "type": "AtomicBoolean", "declarator": "loadFromLocalAttempted = new AtomicBoolean(false)", "var_name": "loadFromLocalAttempted"}, {"original_string": "private LoadingCache<String, FeatureRecord> featureCache;", "modifier": "private", "type": "LoadingCache<String, FeatureRecord>", "declarator": "featureCache", "var_name": "featureCache"}, {"original_string": "private long maxCacheSize = FeatureStoreReal.MAX_CACHE_SIZE;", "modifier": "private", "type": "long", "declarator": "maxCacheSize = FeatureStoreReal.MAX_CACHE_SIZE", "var_name": "maxCacheSize"}, {"original_string": "private int initialCacheSize = FeatureStoreReal.INITIAL_CAPACITY;", "modifier": "private", "type": "int", "declarator": "initialCacheSize = FeatureStoreReal.INITIAL_CAPACITY", "var_name": "initialCacheSize"}, {"original_string": "private long refreshCacheAfterWriteSeconds = FeatureStoreReal.REFRESH_AFTER_WRITE_S;", "modifier": "private", "type": "long", "declarator": "refreshCacheAfterWriteSeconds = FeatureStoreReal.REFRESH_AFTER_WRITE_S", "var_name": "refreshCacheAfterWriteSeconds"}], "methods": [{"identifier": "FeatureStoreReal", "parameters": "(FeatureClient client, FeatureStoreLocal backingFeatureStore)", "modifiers": "", "return": "", "signature": " FeatureStoreReal(FeatureClient client, FeatureStoreLocal backingFeatureStore)", "full_signature": "  FeatureStoreReal(FeatureClient client, FeatureStoreLocal backingFeatureStore)", "class_method_signature": "FeatureStoreReal.FeatureStoreReal(FeatureClient client, FeatureStoreLocal backingFeatureStore)", "testcase": false, "constructor": true}, {"identifier": "open", "parameters": "()", "modifiers": "", "return": "void", "signature": "void open()", "full_signature": " void open()", "class_method_signature": "FeatureStoreReal.open()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Feature feature)", "modifiers": "@Override public", "return": "Void", "signature": "Void put(Feature feature)", "full_signature": "@Override public Void put(Feature feature)", "class_method_signature": "FeatureStoreReal.put(Feature feature)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(String group, String featureKey)", "modifiers": "@Override public", "return": "FeatureRecord", "signature": "FeatureRecord find(String group, String featureKey)", "full_signature": "@Override public FeatureRecord find(String group, String featureKey)", "class_method_signature": "FeatureStoreReal.find(String group, String featureKey)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "(String group)", "modifiers": "@Override public", "return": "FeatureCollection", "signature": "FeatureCollection findAll(String group)", "full_signature": "@Override public FeatureCollection findAll(String group)", "class_method_signature": "FeatureStoreReal.findAll(String group)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String group, String featureKey)", "modifiers": "@Override public", "return": "Void", "signature": "Void remove(String group, String featureKey)", "full_signature": "@Override public Void remove(String group, String featureKey)", "class_method_signature": "FeatureStoreReal.remove(String group, String featureKey)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "()", "modifiers": "@Override public", "return": "Void", "signature": "Void removeAll()", "full_signature": "@Override public Void removeAll()", "class_method_signature": "FeatureStoreReal.removeAll()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FeatureStoreReal.close()", "testcase": false, "constructor": false}, {"identifier": "buildCache", "parameters": "(FeatureClient client,\n      FeatureStoreLocal backingFeatureStore)", "modifiers": "private", "return": "LoadingCache<String, FeatureRecord>", "signature": "LoadingCache<String, FeatureRecord> buildCache(FeatureClient client,\n      FeatureStoreLocal backingFeatureStore)", "full_signature": "private LoadingCache<String, FeatureRecord> buildCache(FeatureClient client,\n      FeatureStoreLocal backingFeatureStore)", "class_method_signature": "FeatureStoreReal.buildCache(FeatureClient client,\n      FeatureStoreLocal backingFeatureStore)", "testcase": false, "constructor": false}, {"identifier": "loadFeaturesIntoCache", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadFeaturesIntoCache()", "full_signature": "private void loadFeaturesIntoCache()", "class_method_signature": "FeatureStoreReal.loadFeaturesIntoCache()", "testcase": false, "constructor": false}, {"identifier": "loadedFromApi", "parameters": "(String group)", "modifiers": "private", "return": "boolean", "signature": "boolean loadedFromApi(String group)", "full_signature": "private boolean loadedFromApi(String group)", "class_method_signature": "FeatureStoreReal.loadedFromApi(String group)", "testcase": false, "constructor": false}, {"identifier": "loadedFromLocal", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean loadedFromLocal()", "full_signature": "private boolean loadedFromLocal()", "class_method_signature": "FeatureStoreReal.loadedFromLocal()", "testcase": false, "constructor": false}, {"identifier": "newFeatureRecord", "parameters": "(Feature f)", "modifiers": "private", "return": "FeatureRecord", "signature": "FeatureRecord newFeatureRecord(Feature f)", "full_signature": "private FeatureRecord newFeatureRecord(Feature f)", "class_method_signature": "FeatureStoreReal.newFeatureRecord(Feature f)", "testcase": false, "constructor": false}], "file": "outland-feature-java/src/main/java/outland/feature/FeatureStoreReal.java"}, "focal_method": {"identifier": "open", "parameters": "()", "modifiers": "", "return": "void", "body": "void open() {\n    loadFeaturesIntoCache();\n  }", "signature": "void open()", "full_signature": " void open()", "class_method_signature": "FeatureStoreReal.open()", "testcase": false, "constructor": false, "invocations": ["loadFeaturesIntoCache"]}, "repository": {"repo_id": 83838306, "url": "https://github.com/dehora/outland", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 944, "license": "licensed"}}