{"test_class": {"identifier": "RequestHandlerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private final String requestPath = \"/a/b/c\";", "modifier": "private final", "type": "String", "declarator": "requestPath = \"/a/b/c\"", "var_name": "requestPath"}, {"original_string": "private ContainerRequest   request;", "modifier": "private", "type": "ContainerRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private ContainerResponse  response;", "modifier": "private", "type": "ContainerResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private RequestDispatcher  requestDispatcher;", "modifier": "private", "type": "RequestDispatcher", "declarator": "requestDispatcher", "var_name": "requestDispatcher"}, {"original_string": "private ProviderBinder     providers;", "modifier": "private", "type": "ProviderBinder", "declarator": "providers", "var_name": "providers"}, {"original_string": "private EnvironmentContext environmentContext;", "modifier": "private", "type": "EnvironmentContext", "declarator": "environmentContext", "var_name": "environmentContext"}, {"original_string": "private RequestHandlerImpl requestHandler;", "modifier": "private", "type": "RequestHandlerImpl", "declarator": "requestHandler", "var_name": "requestHandler"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/RequestHandlerImplTest.java"}, "test_case": {"identifier": "usesMessageFromWebApplicationExceptionForResponseEntityWhenResponseFromWebApplicationExceptionDoesNotHaveEntity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void usesMessageFromWebApplicationExceptionForResponseEntityWhenResponseFromWebApplicationExceptionDoesNotHaveEntity() throws Exception {\n        WebApplicationException webApplicationException = new WebApplicationException(\"Error message\");\n        doThrow(webApplicationException).when(requestDispatcher).dispatch(request, response);\n\n        requestHandler.handleRequest(request, response);\n\n        ArgumentCaptor<Response> argumentCaptor = ArgumentCaptor.forClass(Response.class);\n        verify(response).setResponse(argumentCaptor.capture());\n        assertEquals(INTERNAL_SERVER_ERROR, argumentCaptor.getValue().getStatusInfo());\n        assertEquals(\"Error message\", argumentCaptor.getValue().getEntity());\n    }", "signature": "void usesMessageFromWebApplicationExceptionForResponseEntityWhenResponseFromWebApplicationExceptionDoesNotHaveEntity()", "full_signature": "@Test public void usesMessageFromWebApplicationExceptionForResponseEntityWhenResponseFromWebApplicationExceptionDoesNotHaveEntity()", "class_method_signature": "RequestHandlerImplTest.usesMessageFromWebApplicationExceptionForResponseEntityWhenResponseFromWebApplicationExceptionDoesNotHaveEntity()", "testcase": true, "constructor": false, "invocations": ["dispatch", "when", "doThrow", "handleRequest", "forClass", "setResponse", "verify", "capture", "assertEquals", "getStatusInfo", "getValue", "assertEquals", "getEntity", "getValue"]}, "focal_class": {"identifier": "RequestHandlerImpl", "superclass": "", "interfaces": "implements RequestHandler", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RequestHandlerImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RequestHandlerImpl.class)", "var_name": "LOG"}, {"original_string": "private final RequestDispatcher dispatcher;", "modifier": "private final", "type": "RequestDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "private final ProviderBinder providers;", "modifier": "private final", "type": "ProviderBinder", "declarator": "providers", "var_name": "providers"}], "methods": [{"identifier": "RequestHandlerImpl", "parameters": "(RequestDispatcher dispatcher, ProviderBinder providers)", "modifiers": "public", "return": "", "signature": " RequestHandlerImpl(RequestDispatcher dispatcher, ProviderBinder providers)", "full_signature": "public  RequestHandlerImpl(RequestDispatcher dispatcher, ProviderBinder providers)", "class_method_signature": "RequestHandlerImpl.RequestHandlerImpl(RequestDispatcher dispatcher, ProviderBinder providers)", "testcase": false, "constructor": true}, {"identifier": "handleRequest", "parameters": "(GenericContainerRequest request, GenericContainerResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void handleRequest(GenericContainerRequest request, GenericContainerResponse response)", "full_signature": "@Override public void handleRequest(GenericContainerRequest request, GenericContainerResponse response)", "class_method_signature": "RequestHandlerImpl.handleRequest(GenericContainerRequest request, GenericContainerResponse response)", "testcase": false, "constructor": false}, {"identifier": "handleWebApplicationException", "parameters": "(WebApplicationException webApplicationException, GenericContainerResponse response)", "modifiers": "@SuppressWarnings({\"unchecked\"}) private", "return": "void", "signature": "void handleWebApplicationException(WebApplicationException webApplicationException, GenericContainerResponse response)", "full_signature": "@SuppressWarnings({\"unchecked\"}) private void handleWebApplicationException(WebApplicationException webApplicationException, GenericContainerResponse response)", "class_method_signature": "RequestHandlerImpl.handleWebApplicationException(WebApplicationException webApplicationException, GenericContainerResponse response)", "testcase": false, "constructor": false}, {"identifier": "handleInternalException", "parameters": "(InternalException internalException, GenericContainerResponse response)", "modifiers": "@SuppressWarnings({\"unchecked\"}) private", "return": "void", "signature": "void handleInternalException(InternalException internalException, GenericContainerResponse response)", "full_signature": "@SuppressWarnings({\"unchecked\"}) private void handleInternalException(InternalException internalException, GenericContainerResponse response)", "class_method_signature": "RequestHandlerImpl.handleInternalException(InternalException internalException, GenericContainerResponse response)", "testcase": false, "constructor": false}, {"identifier": "propagateErrorIfHaveErrorPage", "parameters": "(Throwable error, ErrorPages errorPages)", "modifiers": "private", "return": "void", "signature": "void propagateErrorIfHaveErrorPage(Throwable error, ErrorPages errorPages)", "full_signature": "private void propagateErrorIfHaveErrorPage(Throwable error, ErrorPages errorPages)", "class_method_signature": "RequestHandlerImpl.propagateErrorIfHaveErrorPage(Throwable error, ErrorPages errorPages)", "testcase": false, "constructor": false}, {"identifier": "propagateErrorIfHaveErrorPage", "parameters": "(int errorStatus, ErrorPages errorPages)", "modifiers": "private", "return": "void", "signature": "void propagateErrorIfHaveErrorPage(int errorStatus, ErrorPages errorPages)", "full_signature": "private void propagateErrorIfHaveErrorPage(int errorStatus, ErrorPages errorPages)", "class_method_signature": "RequestHandlerImpl.propagateErrorIfHaveErrorPage(int errorStatus, ErrorPages errorPages)", "testcase": false, "constructor": false}, {"identifier": "setupInternalResponseHeaders", "parameters": "(int status, MultivaluedMap<String, Object> responseHeaders)", "modifiers": "@Deprecated private", "return": "void", "signature": "void setupInternalResponseHeaders(int status, MultivaluedMap<String, Object> responseHeaders)", "full_signature": "@Deprecated private void setupInternalResponseHeaders(int status, MultivaluedMap<String, Object> responseHeaders)", "class_method_signature": "RequestHandlerImpl.setupInternalResponseHeaders(int status, MultivaluedMap<String, Object> responseHeaders)", "testcase": false, "constructor": false}, {"identifier": "getProviders", "parameters": "()", "modifiers": "@Override public", "return": "ProviderBinder", "signature": "ProviderBinder getProviders()", "full_signature": "@Override public ProviderBinder getProviders()", "class_method_signature": "RequestHandlerImpl.getProviders()", "testcase": false, "constructor": false}, {"identifier": "getResources", "parameters": "()", "modifiers": "@Override public", "return": "ResourceBinder", "signature": "ResourceBinder getResources()", "full_signature": "@Override public ResourceBinder getResources()", "class_method_signature": "RequestHandlerImpl.getResources()", "testcase": false, "constructor": false}, {"identifier": "createErrorResponse", "parameters": "(int status, String message)", "modifiers": "private", "return": "Response", "signature": "Response createErrorResponse(int status, String message)", "full_signature": "private Response createErrorResponse(int status, String message)", "class_method_signature": "RequestHandlerImpl.createErrorResponse(int status, String message)", "testcase": false, "constructor": false}, {"identifier": "getJaxrsHeader", "parameters": "(int status)", "modifiers": "private", "return": "String", "signature": "String getJaxrsHeader(int status)", "full_signature": "private String getJaxrsHeader(int status)", "class_method_signature": "RequestHandlerImpl.getJaxrsHeader(int status)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/RequestHandlerImpl.java"}, "focal_method": {"identifier": "handleRequest", "parameters": "(GenericContainerRequest request, GenericContainerResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void handleRequest(GenericContainerRequest request, GenericContainerResponse response) throws IOException {\n        final ApplicationContext context = ApplicationContext.getCurrent();\n\n        try {\n            for (RequestFilter filter : providers.getRequestFilters(context.getPath())) {\n                filter.doFilter(request);\n            }\n            dispatcher.dispatch(request, response);\n            setupInternalResponseHeaders(response.getStatus(), response.getHttpHeaders());\n            for (ResponseFilter filter : providers.getResponseFilters(context.getPath())) {\n                filter.doFilter(response);\n            }\n        } catch (Exception e) {\n            if (e instanceof WebApplicationException) {\n                handleWebApplicationException((WebApplicationException)e, response);\n            } else if (e instanceof InternalException) {\n                handleInternalException((InternalException)e, response);\n            } else {\n                throw new UnhandledException(e);\n            }\n        }\n\n        response.writeResponse();\n    }", "signature": "void handleRequest(GenericContainerRequest request, GenericContainerResponse response)", "full_signature": "@Override public void handleRequest(GenericContainerRequest request, GenericContainerResponse response)", "class_method_signature": "RequestHandlerImpl.handleRequest(GenericContainerRequest request, GenericContainerResponse response)", "testcase": false, "constructor": false, "invocations": ["getCurrent", "getRequestFilters", "getPath", "doFilter", "dispatch", "setupInternalResponseHeaders", "getStatus", "getHttpHeaders", "getResponseFilters", "getPath", "doFilter", "handleWebApplicationException", "handleInternalException", "writeResponse"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}