{"test_class": {"identifier": "PutRoleMembershipNotificationTaskTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zms/src/test/java/com/yahoo/athenz/zms/notification/PutRoleMembershipNotificationTaskTest.java"}, "test_case": {"identifier": "testGenerateAndSendPostPutMembershipNotificationNullNotificationSvc", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateAndSendPostPutMembershipNotificationNullNotificationSvc() {\n\n        DBService dbsvc = Mockito.mock(DBService.class);\n        Mockito.when(dbsvc.getPendingMembershipApproverRoles(1)).thenReturn(Collections.emptySet());\n\n        NotificationServiceFactory testfact = () -> null;\n        NotificationService mockNotificationService =  Mockito.mock(NotificationService.class);\n        NotificationManager notificationManager = getNotificationManager(dbsvc, testfact);\n        notificationManager.shutdown();\n        Role notifyRole = new Role().setAuditEnabled(false).setSelfServe(false);\n        List<Notification> notifications = new PutRoleMembershipNotificationTask(\"testdomain1\", \"neworg\", notifyRole, null, dbsvc, USER_DOMAIN_PREFIX).getNotifications();\n        notificationManager.sendNotifications(notifications);\n        verify(mockNotificationService, never()).notify(any(Notification.class));\n    }", "signature": "void testGenerateAndSendPostPutMembershipNotificationNullNotificationSvc()", "full_signature": "@Test public void testGenerateAndSendPostPutMembershipNotificationNullNotificationSvc()", "class_method_signature": "PutRoleMembershipNotificationTaskTest.testGenerateAndSendPostPutMembershipNotificationNullNotificationSvc()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getPendingMembershipApproverRoles", "emptySet", "mock", "getNotificationManager", "shutdown", "setSelfServe", "setAuditEnabled", "getNotifications", "sendNotifications", "notify", "verify", "never", "any"]}, "focal_class": {"identifier": "PutRoleMembershipNotificationTask", "superclass": "", "interfaces": "implements NotificationTask", "fields": [{"original_string": "final String domain;", "modifier": "final", "type": "String", "declarator": "domain", "var_name": "domain"}, {"original_string": "final String org;", "modifier": "final", "type": "String", "declarator": "org", "var_name": "org"}, {"original_string": "final Role role;", "modifier": "final", "type": "Role", "declarator": "role", "var_name": "role"}, {"original_string": "private Map<String, String> details;", "modifier": "private", "type": "Map<String, String>", "declarator": "details", "var_name": "details"}, {"original_string": "private NotificationCommon notificationCommon;", "modifier": "private", "type": "NotificationCommon", "declarator": "notificationCommon", "var_name": "notificationCommon"}, {"original_string": "private final static String DESCRIPTION = \"Membership Approval Notification\";", "modifier": "private final static", "type": "String", "declarator": "DESCRIPTION = \"Membership Approval Notification\"", "var_name": "DESCRIPTION"}, {"original_string": "private final static String NOTIFICATION_TYPE = \"role_membership_approval\";", "modifier": "private final static", "type": "String", "declarator": "NOTIFICATION_TYPE = \"role_membership_approval\"", "var_name": "NOTIFICATION_TYPE"}, {"original_string": "private final PutMembershipNotificationToEmailConverter putMembershipNotificationToEmailConverter;", "modifier": "private final", "type": "PutMembershipNotificationToEmailConverter", "declarator": "putMembershipNotificationToEmailConverter", "var_name": "putMembershipNotificationToEmailConverter"}], "methods": [{"identifier": "PutRoleMembershipNotificationTask", "parameters": "(String domain, String org, Role role, Map<String, String> details, DBService dbService, String userDomainPrefix)", "modifiers": "public", "return": "", "signature": " PutRoleMembershipNotificationTask(String domain, String org, Role role, Map<String, String> details, DBService dbService, String userDomainPrefix)", "full_signature": "public  PutRoleMembershipNotificationTask(String domain, String org, Role role, Map<String, String> details, DBService dbService, String userDomainPrefix)", "class_method_signature": "PutRoleMembershipNotificationTask.PutRoleMembershipNotificationTask(String domain, String org, Role role, Map<String, String> details, DBService dbService, String userDomainPrefix)", "testcase": false, "constructor": true}, {"identifier": "getNotifications", "parameters": "()", "modifiers": "@Override public", "return": "List<Notification>", "signature": "List<Notification> getNotifications()", "full_signature": "@Override public List<Notification> getNotifications()", "class_method_signature": "PutRoleMembershipNotificationTask.getNotifications()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "PutRoleMembershipNotificationTask.getDescription()", "testcase": false, "constructor": false}], "file": "servers/zms/src/main/java/com/yahoo/athenz/zms/notification/PutRoleMembershipNotificationTask.java"}, "focal_method": {"identifier": "getNotifications", "parameters": "()", "modifiers": "@Override public", "return": "List<Notification>", "body": "@Override\n    public List<Notification> getNotifications() {\n        // we need to generate the appropriate recipients for the notification\n        // there are 2 possible use cases we need to handle here:\n        // a) audit enabled role - we need to add the domain and org roles\n        //          from the sys.auth.audit domain\n        // b) review/self-serve roles - we need to look at the configured\n        //          role list for notification and if not present then default\n        //          to the admin role from the domain\n\n        Set<String> recipients = new HashSet<>();\n        if (role.getAuditEnabled() == Boolean.TRUE) {\n\n            recipients.add(ZMSUtils.roleResourceName(ZMSConsts.SYS_AUTH_AUDIT_BY_DOMAIN, domain));\n            recipients.add(ZMSUtils.roleResourceName(ZMSConsts.SYS_AUTH_AUDIT_BY_ORG, org));\n\n        } else {\n\n            // if we're given a notify role list then we're going\n            // to add those role members to the recipient list\n            // otherwise use the admin role for the domain\n\n            final String notifyRoles = role.getNotifyRoles();\n            if (notifyRoles == null || notifyRoles.isEmpty()) {\n                recipients.add(ZMSUtils.roleResourceName(domain, ZMSConsts.ADMIN_ROLE_NAME));\n            } else {\n                Iterable<String> roleNames = Splitter.on(',')\n                        .omitEmptyStrings()\n                        .trimResults()\n                        .split(notifyRoles);\n\n                for (String roleName : roleNames) {\n                    if (roleName.indexOf(AuthorityConsts.ROLE_SEP) == -1) {\n                        recipients.add(ZMSUtils.roleResourceName(domain, roleName));\n                    } else {\n                        recipients.add(roleName);\n                    }\n                }\n            }\n        }\n\n        // create and process our notification\n\n        return Collections.singletonList(notificationCommon.createNotification(\n                recipients,\n                details,\n                putMembershipNotificationToEmailConverter,\n                NOTIFICATION_TYPE));\n    }", "signature": "List<Notification> getNotifications()", "full_signature": "@Override public List<Notification> getNotifications()", "class_method_signature": "PutRoleMembershipNotificationTask.getNotifications()", "testcase": false, "constructor": false, "invocations": ["getAuditEnabled", "add", "roleResourceName", "add", "roleResourceName", "getNotifyRoles", "isEmpty", "add", "roleResourceName", "split", "trimResults", "omitEmptyStrings", "on", "indexOf", "add", "roleResourceName", "add", "singletonList", "createNotification"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}