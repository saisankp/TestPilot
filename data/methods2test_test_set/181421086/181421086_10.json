{"test_class": {"identifier": "VectorClockInconsistencyResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IInconsistencyResolver<Versioned<String>> resolver;", "modifier": "private", "type": "IInconsistencyResolver<Versioned<String>>", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private Versioned<String> later;", "modifier": "private", "type": "Versioned<String>", "declarator": "later", "var_name": "later"}, {"original_string": "private Versioned<String> prior;", "modifier": "private", "type": "Versioned<String>", "declarator": "prior", "var_name": "prior"}, {"original_string": "private Versioned<String> current;", "modifier": "private", "type": "Versioned<String>", "declarator": "current", "var_name": "current"}, {"original_string": "private Versioned<String> concurrent;", "modifier": "private", "type": "Versioned<String>", "declarator": "concurrent", "var_name": "concurrent"}, {"original_string": "private Versioned<String> concurrent2;", "modifier": "private", "type": "Versioned<String>", "declarator": "concurrent2", "var_name": "concurrent2"}], "file": "src/agents/apps/floodlight/floodlight-1.0/src/test/java/org/sdnplatform/sync/internal/version/VectorClockInconsistencyResolverTest.java"}, "test_case": {"identifier": "testResolveNormal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolveNormal() {\n        assertEquals(later, resolver.resolveConflicts(Arrays.asList(current, prior, later)).get(0));\n        assertEquals(later, resolver.resolveConflicts(Arrays.asList(prior, current, later)).get(0));\n        assertEquals(later, resolver.resolveConflicts(Arrays.asList(later, current, prior)).get(0));\n    }", "signature": "void testResolveNormal()", "full_signature": "@Test public void testResolveNormal()", "class_method_signature": "VectorClockInconsistencyResolverTest.testResolveNormal()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "get", "resolveConflicts", "asList", "assertEquals", "get", "resolveConflicts", "asList", "assertEquals", "get", "resolveConflicts", "asList"]}, "focal_class": {"identifier": "VectorClockInconsistencyResolver", "superclass": "", "interfaces": "implements IInconsistencyResolver<Versioned<T>>", "fields": [], "methods": [{"identifier": "resolveConflicts", "parameters": "(List<Versioned<T>> items)", "modifiers": "public", "return": "List<Versioned<T>>", "signature": "List<Versioned<T>> resolveConflicts(List<Versioned<T>> items)", "full_signature": "public List<Versioned<T>> resolveConflicts(List<Versioned<T>> items)", "class_method_signature": "VectorClockInconsistencyResolver.resolveConflicts(List<Versioned<T>> items)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "VectorClockInconsistencyResolver.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "VectorClockInconsistencyResolver.hashCode()", "testcase": false, "constructor": false}], "file": "src/agents/apps/floodlight/floodlight-1.0/src/main/java/org/sdnplatform/sync/internal/version/VectorClockInconsistencyResolver.java"}, "focal_method": {"identifier": "resolveConflicts", "parameters": "(List<Versioned<T>> items)", "modifiers": "public", "return": "List<Versioned<T>>", "body": "public List<Versioned<T>> resolveConflicts(List<Versioned<T>> items) {\n        int size = items.size();\n        if(size <= 1)\n            return items;\n\n        List<Versioned<T>> newItems = Lists.newArrayList();\n        for(Versioned<T> v1: items) {\n            boolean found = false;\n            for(ListIterator<Versioned<T>> it2 =\n                    newItems.listIterator(); it2.hasNext();) {\n                Versioned<T> v2 = it2.next();\n                Occurred compare = v1.getVersion().compare(v2.getVersion());\n                if(compare == Occurred.AFTER) {\n                    if(found)\n                        it2.remove();\n                    else\n                        it2.set(v1);\n                }\n                if(compare != Occurred.CONCURRENTLY)\n                    found = true;\n            }\n            if(!found)\n                newItems.add(v1);\n        }\n        return newItems;\n    }", "signature": "List<Versioned<T>> resolveConflicts(List<Versioned<T>> items)", "full_signature": "public List<Versioned<T>> resolveConflicts(List<Versioned<T>> items)", "class_method_signature": "VectorClockInconsistencyResolver.resolveConflicts(List<Versioned<T>> items)", "testcase": false, "constructor": false, "invocations": ["size", "newArrayList", "listIterator", "hasNext", "next", "compare", "getVersion", "getVersion", "remove", "set", "add"]}, "repository": {"repo_id": 181421086, "url": "https://github.com/seungsoo-lee/DELTA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 99244, "license": "licensed"}}