{"test_class": {"identifier": "VanillaIndexCacheTest", "superclass": "extends VanillaChronicleTestBase", "interfaces": "", "fields": [], "file": "chronicle/src/test/java/net/openhft/chronicle/VanillaIndexCacheTest.java"}, "test_case": {"identifier": "testLastIndexFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLastIndexFile() throws Exception {\n        final String baseDir = getTestPath();\n        assertNotNull(baseDir);\n\n        final DateCache dateCache = new DateCache(\"yyyyMMddHHmmss\", 1000);\n        final VanillaIndexCache cache = new VanillaIndexCache(baseDir, 10 + 3, dateCache);\n\n        final int cycle = (int) (System.currentTimeMillis() / 1000);\n\n        try {\n            // Check that the index file count starts at 0 when the data directory is empty\n            assertEquals(0, cache.lastIndexFile(cycle));\n\n            final VanillaMappedBytes vanillaBuffer0 = cache.indexFor(cycle, 0, true);\n            assertEquals(\"index-0\", cache.fileFor(cycle, 0, true).getName());\n            vanillaBuffer0.release();\n            assertEquals(0, cache.lastIndexFile(cycle));\n\n            final VanillaMappedBytes vanillaBuffer1 = cache.indexFor(cycle, 1, true);\n            assertEquals(\"index-1\", cache.fileFor(cycle, 1, true).getName());\n            vanillaBuffer1.release();\n            assertEquals(1, cache.lastIndexFile(cycle));\n\n            final VanillaMappedBytes vanillaBuffer3 = cache.indexFor(cycle, 3, true);\n            assertEquals(\"index-3\", cache.fileFor(cycle, 3, true).getName());\n            vanillaBuffer3.release();\n            assertEquals(3, cache.lastIndexFile(cycle));\n\n            cache.checkCounts(1, 1);\n        } finally {\n            cache.close();\n            IOTools.deleteDir(baseDir);\n\n            assertFalse(new File(baseDir).exists());\n        }\n    }", "signature": "void testLastIndexFile()", "full_signature": "@Test public void testLastIndexFile()", "class_method_signature": "VanillaIndexCacheTest.testLastIndexFile()", "testcase": true, "constructor": false, "invocations": ["getTestPath", "assertNotNull", "currentTimeMillis", "assertEquals", "lastIndexFile", "indexFor", "assertEquals", "getName", "fileFor", "release", "assertEquals", "lastIndexFile", "indexFor", "assertEquals", "getName", "fileFor", "release", "assertEquals", "lastIndexFile", "indexFor", "assertEquals", "getName", "fileFor", "release", "assertEquals", "lastIndexFile", "checkCounts", "close", "deleteDir", "assertFalse", "exists"]}, "focal_class": {"identifier": "VanillaIndexCache", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final String FILE_NAME_PREFIX = \"index-\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NAME_PREFIX = \"index-\"", "var_name": "FILE_NAME_PREFIX"}, {"original_string": "private final String basePath;", "modifier": "private final", "type": "String", "declarator": "basePath", "var_name": "basePath"}, {"original_string": "private final File baseFile;", "modifier": "private final", "type": "File", "declarator": "baseFile", "var_name": "baseFile"}, {"original_string": "private final IndexKey key = new IndexKey();", "modifier": "private final", "type": "IndexKey", "declarator": "key = new IndexKey()", "var_name": "key"}, {"original_string": "private final int blockBits;", "modifier": "private final", "type": "int", "declarator": "blockBits", "var_name": "blockBits"}, {"original_string": "private final DateCache dateCache;", "modifier": "private final", "type": "DateCache", "declarator": "dateCache", "var_name": "dateCache"}, {"original_string": "private final VanillaMappedCache<IndexKey> cache;", "modifier": "private final", "type": "VanillaMappedCache<IndexKey>", "declarator": "cache", "var_name": "cache"}], "methods": [{"identifier": "VanillaIndexCache", "parameters": "(@NotNull String basePath, int blockBits, @NotNull DateCache dateCache)", "modifiers": "public", "return": "", "signature": " VanillaIndexCache(@NotNull String basePath, int blockBits, @NotNull DateCache dateCache)", "full_signature": "public  VanillaIndexCache(@NotNull String basePath, int blockBits, @NotNull DateCache dateCache)", "class_method_signature": "VanillaIndexCache.VanillaIndexCache(@NotNull String basePath, int blockBits, @NotNull DateCache dateCache)", "testcase": false, "constructor": true}, {"identifier": "VanillaIndexCache", "parameters": "(@NotNull String basePath, int blockBits, @NotNull DateCache dateCache, @NotNull VanillaChronicleConfig config)", "modifiers": "public", "return": "", "signature": " VanillaIndexCache(@NotNull String basePath, int blockBits, @NotNull DateCache dateCache, @NotNull VanillaChronicleConfig config)", "full_signature": "public  VanillaIndexCache(@NotNull String basePath, int blockBits, @NotNull DateCache dateCache, @NotNull VanillaChronicleConfig config)", "class_method_signature": "VanillaIndexCache.VanillaIndexCache(@NotNull String basePath, int blockBits, @NotNull DateCache dateCache, @NotNull VanillaChronicleConfig config)", "testcase": false, "constructor": true}, {"identifier": "VanillaIndexCache", "parameters": "(@NotNull String basePath, int blockBits, @NotNull DateCache dateCache, int capacity)", "modifiers": "public", "return": "", "signature": " VanillaIndexCache(@NotNull String basePath, int blockBits, @NotNull DateCache dateCache, int capacity)", "full_signature": "public  VanillaIndexCache(@NotNull String basePath, int blockBits, @NotNull DateCache dateCache, int capacity)", "class_method_signature": "VanillaIndexCache.VanillaIndexCache(@NotNull String basePath, int blockBits, @NotNull DateCache dateCache, int capacity)", "testcase": false, "constructor": true}, {"identifier": "VanillaIndexCache", "parameters": "(@NotNull String basePath, int blockBits, @NotNull DateCache dateCache, int capacity, boolean cleanupOnClose)", "modifiers": "public", "return": "", "signature": " VanillaIndexCache(@NotNull String basePath, int blockBits, @NotNull DateCache dateCache, int capacity, boolean cleanupOnClose)", "full_signature": "public  VanillaIndexCache(@NotNull String basePath, int blockBits, @NotNull DateCache dateCache, int capacity, boolean cleanupOnClose)", "class_method_signature": "VanillaIndexCache.VanillaIndexCache(@NotNull String basePath, int blockBits, @NotNull DateCache dateCache, int capacity, boolean cleanupOnClose)", "testcase": false, "constructor": true}, {"identifier": "fileFor", "parameters": "(int cycle, int indexCount, boolean forAppend)", "modifiers": "public", "return": "File", "signature": "File fileFor(int cycle, int indexCount, boolean forAppend)", "full_signature": "public File fileFor(int cycle, int indexCount, boolean forAppend)", "class_method_signature": "VanillaIndexCache.fileFor(int cycle, int indexCount, boolean forAppend)", "testcase": false, "constructor": false}, {"identifier": "indexFor", "parameters": "(int cycle, int indexCount, boolean forAppend)", "modifiers": "public synchronized", "return": "VanillaMappedBytes", "signature": "VanillaMappedBytes indexFor(int cycle, int indexCount, boolean forAppend)", "full_signature": "public synchronized VanillaMappedBytes indexFor(int cycle, int indexCount, boolean forAppend)", "class_method_signature": "VanillaIndexCache.indexFor(int cycle, int indexCount, boolean forAppend)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void close()", "full_signature": "@Override public synchronized void close()", "class_method_signature": "VanillaIndexCache.close()", "testcase": false, "constructor": false}, {"identifier": "lastIndexFile", "parameters": "(int cycle)", "modifiers": "", "return": "int", "signature": "int lastIndexFile(int cycle)", "full_signature": " int lastIndexFile(int cycle)", "class_method_signature": "VanillaIndexCache.lastIndexFile(int cycle)", "testcase": false, "constructor": false}, {"identifier": "lastIndexFile", "parameters": "(int cycle, int defaultCycle)", "modifiers": "", "return": "int", "signature": "int lastIndexFile(int cycle, int defaultCycle)", "full_signature": " int lastIndexFile(int cycle, int defaultCycle)", "class_method_signature": "VanillaIndexCache.lastIndexFile(int cycle, int defaultCycle)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(int cycle, long indexValue, boolean synchronous, long[] position)", "modifiers": "public", "return": "VanillaMappedBytes", "signature": "VanillaMappedBytes append(int cycle, long indexValue, boolean synchronous, long[] position)", "full_signature": "public VanillaMappedBytes append(int cycle, long indexValue, boolean synchronous, long[] position)", "class_method_signature": "VanillaIndexCache.append(int cycle, long indexValue, boolean synchronous, long[] position)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(final VanillaMappedBytes bytes, final long indexValue, final boolean synchronous)", "modifiers": "public static", "return": "long", "signature": "long append(final VanillaMappedBytes bytes, final long indexValue, final boolean synchronous)", "full_signature": "public static long append(final VanillaMappedBytes bytes, final long indexValue, final boolean synchronous)", "class_method_signature": "VanillaIndexCache.append(final VanillaMappedBytes bytes, final long indexValue, final boolean synchronous)", "testcase": false, "constructor": false}, {"identifier": "countIndices", "parameters": "(final VanillaMappedBytes buffer)", "modifiers": "public static", "return": "long", "signature": "long countIndices(final VanillaMappedBytes buffer)", "full_signature": "public static long countIndices(final VanillaMappedBytes buffer)", "class_method_signature": "VanillaIndexCache.countIndices(final VanillaMappedBytes buffer)", "testcase": false, "constructor": false}, {"identifier": "firstCycle", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long firstCycle()", "full_signature": "public long firstCycle()", "class_method_signature": "VanillaIndexCache.firstCycle()", "testcase": false, "constructor": false}, {"identifier": "lastCycle", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long lastCycle()", "full_signature": "public long lastCycle()", "class_method_signature": "VanillaIndexCache.lastCycle()", "testcase": false, "constructor": false}, {"identifier": "checkCounts", "parameters": "(int min, int max)", "modifiers": "public", "return": "void", "signature": "void checkCounts(int min, int max)", "full_signature": "public void checkCounts(int min, int max)", "class_method_signature": "VanillaIndexCache.checkCounts(int min, int max)", "testcase": false, "constructor": false}], "file": "chronicle/src/main/java/net/openhft/chronicle/VanillaIndexCache.java"}, "focal_method": {"identifier": "lastIndexFile", "parameters": "(int cycle)", "modifiers": "", "return": "int", "body": "int lastIndexFile(int cycle) {\n        return lastIndexFile(cycle, 0);\n    }", "signature": "int lastIndexFile(int cycle)", "full_signature": " int lastIndexFile(int cycle)", "class_method_signature": "VanillaIndexCache.lastIndexFile(int cycle)", "testcase": false, "constructor": false, "invocations": ["lastIndexFile"]}, "repository": {"repo_id": 23783621, "url": "https://github.com/peter-lawrey/Java-Chronicle-OLD", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 33, "size": 1275, "license": "licensed"}}