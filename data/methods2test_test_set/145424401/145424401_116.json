{"test_class": {"identifier": "ASTSignatureComparatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}, {"original_string": "Map<Class<?>, StdDeserializer<?>> custom_deserializers =\n      new HashMap<Class<?>, StdDeserializer<?>>();", "modifier": "", "type": "Map<Class<?>, StdDeserializer<?>>", "declarator": "custom_deserializers =\n      new HashMap<Class<?>, StdDeserializer<?>>()", "var_name": "custom_deserializers"}, {"original_string": "private static final String TEST_DATA = \"./src/test/resources/methodBody/\";", "modifier": "private static final", "type": "String", "declarator": "TEST_DATA = \"./src/test/resources/methodBody/\"", "var_name": "TEST_DATA"}, {"original_string": "private String _constructQName =\n      \"org.apache.commons.fileupload.MultipartStream(InputStream,byte[],int,ProgressNotifier)\";", "modifier": "private", "type": "String", "declarator": "_constructQName =\n      \"org.apache.commons.fileupload.MultipartStream(InputStream,byte[],int,ProgressNotifier)\"", "var_name": "_constructQName"}, {"original_string": "private String _fixedJavaFile = \"MultipartStreamFix.java\";", "modifier": "private", "type": "String", "declarator": "_fixedJavaFile = \"MultipartStreamFix.java\"", "var_name": "_fixedJavaFile"}, {"original_string": "private String _defectiveJavaFile = \"MultipartStreamDef.java\";", "modifier": "private", "type": "String", "declarator": "_defectiveJavaFile = \"MultipartStreamDef.java\"", "var_name": "_defectiveJavaFile"}, {"original_string": "private String _underTestJavaFile = \"MultipartStream121.java\";", "modifier": "private", "type": "String", "declarator": "_underTestJavaFile = \"MultipartStream121.java\"", "var_name": "_underTestJavaFile"}, {"original_string": "private Signature signatureFix = null;", "modifier": "private", "type": "Signature", "declarator": "signatureFix = null", "var_name": "signatureFix"}, {"original_string": "private Signature signatureDef = null;", "modifier": "private", "type": "Signature", "declarator": "signatureDef = null", "var_name": "signatureDef"}, {"original_string": "private Signature signatureUnderTest = null;", "modifier": "private", "type": "Signature", "declarator": "signatureUnderTest = null", "var_name": "signatureUnderTest"}, {"original_string": "SignatureChange astChange = null;", "modifier": "", "type": "SignatureChange", "declarator": "astChange = null", "var_name": "astChange"}, {"original_string": "private static final String vulSigJson =\n      \"{\\\"ast\\\":[ {\\\"Value\\\" : \\\"MultipartStream\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 19,\\\"End\\\" : 861}},\\\"EntityType\\\" :\"\n          + \" \\\"METHOD\\\",\\\"C\\\" : [{\\\"Value\\\" : \\\"this.input = input;\\\",\\\"SourceCodeEntity\\\" :{\"\n          + \" \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 162,\\\"End\\\" :\"\n          + \" 180}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.bufSize =\"\n          + \" bufSize;\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" :\"\n          + \" {\\\"Start\\\" : 191,\\\"End\\\" : 213}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" :\"\n          + \" \\\"this.buffer = new byte[bufSize];\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 224,\\\"End\\\" : 255}},\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.notifier = pNotifier;\\\",\\\"SourceCodeEntity\\\" :{\"\n          + \" \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 266,\\\"End\\\" :\"\n          + \" 291}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.boundary = new\"\n          + \" byte[(boundary.length + BOUNDARY_PREFIX.length)];\\\",\\\"SourceCodeEntity\\\" :{\"\n          + \" \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 407,\\\"End\\\" :\"\n          + \" 473}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.boundaryLength =\"\n          + \" (boundary.length + BOUNDARY_PREFIX.length);\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\"\"\n          + \" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 484,\\\"End\\\" : 546}},\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.keepRegion =\"\n          + \" this.boundary.length;\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 557,\\\"End\\\" : 595}},\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"System.arraycopy(BOUNDARY_PREFIX, 0, this.boundary,\"\n          + \" 0, BOUNDARY_PREFIX.length);\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 606,\\\"End\\\" : 701}},\\\"EntityType\\\" :\"\n          + \" \\\"METHOD_INVOCATION\\\"},{\\\"Value\\\" : \\\"System.arraycopy(boundary, 0, this.boundary,\"\n          + \" BOUNDARY_PREFIX.length, boundary.length);\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 712,\\\"End\\\" : 814}},\\\"EntityType\\\" :\"\n          + \" \\\"METHOD_INVOCATION\\\"},{\\\"Value\\\" : \\\"head = 0;\\\",\\\"SourceCodeEntity\\\" :{\"\n          + \" \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 827,\\\"End\\\" :\"\n          + \" 835}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"tail =\"\n          + \" 0;\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" :\"\n          + \" 846,\\\"End\\\" : 854}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"}]}]}\";", "modifier": "private static final", "type": "String", "declarator": "vulSigJson =\n      \"{\\\"ast\\\":[ {\\\"Value\\\" : \\\"MultipartStream\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 19,\\\"End\\\" : 861}},\\\"EntityType\\\" :\"\n          + \" \\\"METHOD\\\",\\\"C\\\" : [{\\\"Value\\\" : \\\"this.input = input;\\\",\\\"SourceCodeEntity\\\" :{\"\n          + \" \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 162,\\\"End\\\" :\"\n          + \" 180}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.bufSize =\"\n          + \" bufSize;\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" :\"\n          + \" {\\\"Start\\\" : 191,\\\"End\\\" : 213}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" :\"\n          + \" \\\"this.buffer = new byte[bufSize];\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 224,\\\"End\\\" : 255}},\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.notifier = pNotifier;\\\",\\\"SourceCodeEntity\\\" :{\"\n          + \" \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 266,\\\"End\\\" :\"\n          + \" 291}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.boundary = new\"\n          + \" byte[(boundary.length + BOUNDARY_PREFIX.length)];\\\",\\\"SourceCodeEntity\\\" :{\"\n          + \" \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 407,\\\"End\\\" :\"\n          + \" 473}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.boundaryLength =\"\n          + \" (boundary.length + BOUNDARY_PREFIX.length);\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\"\"\n          + \" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 484,\\\"End\\\" : 546}},\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.keepRegion =\"\n          + \" this.boundary.length;\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 557,\\\"End\\\" : 595}},\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"System.arraycopy(BOUNDARY_PREFIX, 0, this.boundary,\"\n          + \" 0, BOUNDARY_PREFIX.length);\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 606,\\\"End\\\" : 701}},\\\"EntityType\\\" :\"\n          + \" \\\"METHOD_INVOCATION\\\"},{\\\"Value\\\" : \\\"System.arraycopy(boundary, 0, this.boundary,\"\n          + \" BOUNDARY_PREFIX.length, boundary.length);\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 712,\\\"End\\\" : 814}},\\\"EntityType\\\" :\"\n          + \" \\\"METHOD_INVOCATION\\\"},{\\\"Value\\\" : \\\"head = 0;\\\",\\\"SourceCodeEntity\\\" :{\"\n          + \" \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 827,\\\"End\\\" :\"\n          + \" 835}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"tail =\"\n          + \" 0;\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" :\"\n          + \" 846,\\\"End\\\" : 854}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"}]}]}\"", "var_name": "vulSigJson"}, {"original_string": "private static final String fixSigJson =\n      \"{\\\"ast\\\":[ {\\\"Value\\\" : \\\"MultipartStream\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 19,\\\"End\\\" : 1040}},\\\"EntityType\\\" :\"\n          + \" \\\"METHOD\\\",\\\"C\\\" : [{\\\"Value\\\" : \\\"this.input = input;\\\",\\\"SourceCodeEntity\\\" :{\"\n          + \" \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 162,\\\"End\\\" :\"\n          + \" 180}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.bufSize =\"\n          + \" bufSize;\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" :\"\n          + \" {\\\"Start\\\" : 191,\\\"End\\\" : 213}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" :\"\n          + \" \\\"this.buffer = new byte[bufSize];\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 224,\\\"End\\\" : 255}},\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.notifier = pNotifier;\\\",\\\"SourceCodeEntity\\\" :{\"\n          + \" \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 266,\\\"End\\\" :\"\n          + \" 291}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.boundaryLength =\"\n          + \" (boundary.length + BOUNDARY_PREFIX.length);\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\"\"\n          + \" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 407,\\\"End\\\" : 469}},\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"(bufSize < (this.boundaryLength +\"\n          + \" 1))\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" :\"\n          + \" 480,\\\"End\\\" : 667}},\\\"EntityType\\\" : \\\"IF_STATEMENT\\\",\\\"C\\\" : [{\\\"Value\\\" :\"\n          + \" \\\"(bufSize < (this.boundaryLength + 1))\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 519,\\\"End\\\" : 667}},\\\"EntityType\\\" :\"\n          + \" \\\"THEN_STATEMENT\\\",\\\"C\\\" : [{\\\"Value\\\" : \\\"new IllegalArgumentException(\\\\\\\"The\"\n          + \" buffer size specified for the MultipartStream is too\"\n          + \" small\\\\\\\");\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" :\"\n          + \" {\\\"Start\\\" : 534,\\\"End\\\" : 656}},\\\"EntityType\\\" :\"\n          + \" \\\"THROW_STATEMENT\\\"}]}]},{\\\"Value\\\" : \\\"this.boundary = new\"\n          + \" byte[this.boundaryLength];\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 678,\\\"End\\\" : 723}},\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.keepRegion =\"\n          + \" this.boundary.length;\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 734,\\\"End\\\" : 772}},\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"System.arraycopy(BOUNDARY_PREFIX, 0, this.boundary,\"\n          + \" 0, BOUNDARY_PREFIX.length);\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 785,\\\"End\\\" : 880}},\\\"EntityType\\\" :\"\n          + \" \\\"METHOD_INVOCATION\\\"},{\\\"Value\\\" : \\\"System.arraycopy(boundary, 0, this.boundary,\"\n          + \" BOUNDARY_PREFIX.length, boundary.length);\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 891,\\\"End\\\" : 993}},\\\"EntityType\\\" :\"\n          + \" \\\"METHOD_INVOCATION\\\"},{\\\"Value\\\" : \\\"head = 0;\\\",\\\"SourceCodeEntity\\\" :{\"\n          + \" \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 1006,\\\"End\\\" :\"\n          + \" 1014}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"tail =\"\n          + \" 0;\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" :\"\n          + \" 1025,\\\"End\\\" : 1033}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"}]}]}\";", "modifier": "private static final", "type": "String", "declarator": "fixSigJson =\n      \"{\\\"ast\\\":[ {\\\"Value\\\" : \\\"MultipartStream\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 19,\\\"End\\\" : 1040}},\\\"EntityType\\\" :\"\n          + \" \\\"METHOD\\\",\\\"C\\\" : [{\\\"Value\\\" : \\\"this.input = input;\\\",\\\"SourceCodeEntity\\\" :{\"\n          + \" \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 162,\\\"End\\\" :\"\n          + \" 180}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.bufSize =\"\n          + \" bufSize;\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" :\"\n          + \" {\\\"Start\\\" : 191,\\\"End\\\" : 213}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" :\"\n          + \" \\\"this.buffer = new byte[bufSize];\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 224,\\\"End\\\" : 255}},\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.notifier = pNotifier;\\\",\\\"SourceCodeEntity\\\" :{\"\n          + \" \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 266,\\\"End\\\" :\"\n          + \" 291}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.boundaryLength =\"\n          + \" (boundary.length + BOUNDARY_PREFIX.length);\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\"\"\n          + \" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 407,\\\"End\\\" : 469}},\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"(bufSize < (this.boundaryLength +\"\n          + \" 1))\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" :\"\n          + \" 480,\\\"End\\\" : 667}},\\\"EntityType\\\" : \\\"IF_STATEMENT\\\",\\\"C\\\" : [{\\\"Value\\\" :\"\n          + \" \\\"(bufSize < (this.boundaryLength + 1))\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 519,\\\"End\\\" : 667}},\\\"EntityType\\\" :\"\n          + \" \\\"THEN_STATEMENT\\\",\\\"C\\\" : [{\\\"Value\\\" : \\\"new IllegalArgumentException(\\\\\\\"The\"\n          + \" buffer size specified for the MultipartStream is too\"\n          + \" small\\\\\\\");\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" :\"\n          + \" {\\\"Start\\\" : 534,\\\"End\\\" : 656}},\\\"EntityType\\\" :\"\n          + \" \\\"THROW_STATEMENT\\\"}]}]},{\\\"Value\\\" : \\\"this.boundary = new\"\n          + \" byte[this.boundaryLength];\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 678,\\\"End\\\" : 723}},\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"this.keepRegion =\"\n          + \" this.boundary.length;\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 734,\\\"End\\\" : 772}},\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"System.arraycopy(BOUNDARY_PREFIX, 0, this.boundary,\"\n          + \" 0, BOUNDARY_PREFIX.length);\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 785,\\\"End\\\" : 880}},\\\"EntityType\\\" :\"\n          + \" \\\"METHOD_INVOCATION\\\"},{\\\"Value\\\" : \\\"System.arraycopy(boundary, 0, this.boundary,\"\n          + \" BOUNDARY_PREFIX.length, boundary.length);\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 891,\\\"End\\\" : 993}},\\\"EntityType\\\" :\"\n          + \" \\\"METHOD_INVOCATION\\\"},{\\\"Value\\\" : \\\"head = 0;\\\",\\\"SourceCodeEntity\\\" :{\"\n          + \" \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" : 1006,\\\"End\\\" :\"\n          + \" 1014}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"},{\\\"Value\\\" : \\\"tail =\"\n          + \" 0;\\\",\\\"SourceCodeEntity\\\" :{ \\\"Modifiers\\\" : \\\"0\\\",\\\"SourceRange\\\" : {\\\"Start\\\" :\"\n          + \" 1025,\\\"End\\\" : 1033}},\\\"EntityType\\\" : \\\"ASSIGNMENT\\\"}]}]}\"", "var_name": "fixSigJson"}, {"original_string": "private static final String sigChange =\n      \"{\\\"StructureEntity\\\" :{ \\\"UniqueName\\\" : \\\"MultipartStream\\\",\\\"EntityType\\\" :\"\n          + \" \\\"METHOD\\\",\\\"Modifiers\\\" : \\\"0\\\",\\\"changes\\\" :[{\\\"OperationType\\\" :\"\n          + \" \\\"Insert\\\",\\\"changeType\\\" : \\\"STATEMENT_INSERT\\\",\\\"InsertedEntity\\\" :\"\n          + \" {\\\"UniqueName\\\" : \\\"(bufSize < (this.boundaryLength + 1))\\\",\\\"EntityType\\\" :\"\n          + \" \\\"IF_STATEMENT\\\",\\\"Modifiers\\\" : \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" :\"\n          + \" \\\"480\\\",\\\"End\\\" : \\\"667\\\"}},\\\"ParentEntity\\\" : {\\\"UniqueName\\\" :\"\n          + \" \\\"MultipartStream\\\",\\\"EntityType\\\" : \\\"METHOD\\\",\\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" : \\\"19\\\",\\\"End\\\" :\"\n          + \" \\\"861\\\"}}},{\\\"OperationType\\\" : \\\"Move\\\",\\\"changeType\\\" :\"\n          + \" \\\"STATEMENT_ORDERING_CHANGE\\\",\\\"OldParentEntity\\\" : {\\\"UniqueName\\\" :\"\n          + \" \\\"MultipartStream\\\",\\\"EntityType\\\" : \\\"METHOD\\\",\\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" : \\\"19\\\",\\\"End\\\" : \\\"861\\\"}},\\\"MovedEntity\\\"\"\n          + \" : {\\\"UniqueName\\\" : \\\"this.boundaryLength = (boundary.length +\"\n          + \" BOUNDARY_PREFIX.length);\\\",\\\"EntityType\\\" : \\\"ASSIGNMENT\\\",\\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" : \\\"484\\\",\\\"End\\\" :\"\n          + \" \\\"546\\\"}},\\\"NewParentEntity\\\" : {\\\"UniqueName\\\" : \\\"MultipartStream\\\",\\\"EntityType\\\"\"\n          + \" : \\\"METHOD\\\",\\\"Modifiers\\\" : \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" : \\\"19\\\",\\\"End\\\"\"\n          + \" : \\\"861\\\"}},\\\"NewEntity\\\" : {\\\"UniqueName\\\" : \\\"this.boundaryLength =\"\n          + \" (boundary.length + BOUNDARY_PREFIX.length);\\\",\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\",\\\"Modifiers\\\" : \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" :\"\n          + \" \\\"407\\\",\\\"End\\\" : \\\"469\\\"}}},{\\\"OperationType\\\" : \\\"Update\\\",\\\"changeType\\\" :\"\n          + \" \\\"STATEMENT_UPDATE\\\",\\\"NewEntity\\\" : {\\\"UniqueName\\\" : \\\"this.boundary = new\"\n          + \" byte[this.boundaryLength];\\\",\\\"EntityType\\\" : \\\"ASSIGNMENT\\\",\\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" : \\\"678\\\",\\\"End\\\" :\"\n          + \" \\\"723\\\"}},\\\"UpdatedEntity\\\" : {\\\"UniqueName\\\" : \\\"this.boundary = new\"\n          + \" byte[(boundary.length + BOUNDARY_PREFIX.length)];\\\",\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\",\\\"Modifiers\\\" : \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" :\"\n          + \" \\\"407\\\",\\\"End\\\" : \\\"473\\\"}},\\\"ParentEntity\\\" : {\\\"UniqueName\\\" :\"\n          + \" \\\"MultipartStream\\\",\\\"EntityType\\\" : \\\"METHOD\\\",\\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" : \\\"19\\\",\\\"End\\\" :\"\n          + \" \\\"861\\\"}}},{\\\"OperationType\\\" : \\\"Insert\\\",\\\"changeType\\\" :\"\n          + \" \\\"STATEMENT_INSERT\\\",\\\"InsertedEntity\\\" : {\\\"UniqueName\\\" : \\\"new\"\n          + \" IllegalArgumentException(\\\\\\\"The buffer size specified for the MultipartStream is\"\n          + \" too small\\\\\\\");\\\",\\\"EntityType\\\" : \\\"THROW_STATEMENT\\\",\\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" : \\\"534\\\",\\\"End\\\" :\"\n          + \" \\\"656\\\"}},\\\"ParentEntity\\\" : {\\\"UniqueName\\\" : \\\"(bufSize < (this.boundaryLength +\"\n          + \" 1))\\\",\\\"EntityType\\\" : \\\"THEN_STATEMENT\\\",\\\"Modifiers\\\" : \\\"0\\\",\\\"SourceCodeRange\\\"\"\n          + \" : {\\\"Start\\\" : \\\"519\\\",\\\"End\\\" : \\\"667\\\"}}}]}}\";", "modifier": "private static final", "type": "String", "declarator": "sigChange =\n      \"{\\\"StructureEntity\\\" :{ \\\"UniqueName\\\" : \\\"MultipartStream\\\",\\\"EntityType\\\" :\"\n          + \" \\\"METHOD\\\",\\\"Modifiers\\\" : \\\"0\\\",\\\"changes\\\" :[{\\\"OperationType\\\" :\"\n          + \" \\\"Insert\\\",\\\"changeType\\\" : \\\"STATEMENT_INSERT\\\",\\\"InsertedEntity\\\" :\"\n          + \" {\\\"UniqueName\\\" : \\\"(bufSize < (this.boundaryLength + 1))\\\",\\\"EntityType\\\" :\"\n          + \" \\\"IF_STATEMENT\\\",\\\"Modifiers\\\" : \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" :\"\n          + \" \\\"480\\\",\\\"End\\\" : \\\"667\\\"}},\\\"ParentEntity\\\" : {\\\"UniqueName\\\" :\"\n          + \" \\\"MultipartStream\\\",\\\"EntityType\\\" : \\\"METHOD\\\",\\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" : \\\"19\\\",\\\"End\\\" :\"\n          + \" \\\"861\\\"}}},{\\\"OperationType\\\" : \\\"Move\\\",\\\"changeType\\\" :\"\n          + \" \\\"STATEMENT_ORDERING_CHANGE\\\",\\\"OldParentEntity\\\" : {\\\"UniqueName\\\" :\"\n          + \" \\\"MultipartStream\\\",\\\"EntityType\\\" : \\\"METHOD\\\",\\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" : \\\"19\\\",\\\"End\\\" : \\\"861\\\"}},\\\"MovedEntity\\\"\"\n          + \" : {\\\"UniqueName\\\" : \\\"this.boundaryLength = (boundary.length +\"\n          + \" BOUNDARY_PREFIX.length);\\\",\\\"EntityType\\\" : \\\"ASSIGNMENT\\\",\\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" : \\\"484\\\",\\\"End\\\" :\"\n          + \" \\\"546\\\"}},\\\"NewParentEntity\\\" : {\\\"UniqueName\\\" : \\\"MultipartStream\\\",\\\"EntityType\\\"\"\n          + \" : \\\"METHOD\\\",\\\"Modifiers\\\" : \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" : \\\"19\\\",\\\"End\\\"\"\n          + \" : \\\"861\\\"}},\\\"NewEntity\\\" : {\\\"UniqueName\\\" : \\\"this.boundaryLength =\"\n          + \" (boundary.length + BOUNDARY_PREFIX.length);\\\",\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\",\\\"Modifiers\\\" : \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" :\"\n          + \" \\\"407\\\",\\\"End\\\" : \\\"469\\\"}}},{\\\"OperationType\\\" : \\\"Update\\\",\\\"changeType\\\" :\"\n          + \" \\\"STATEMENT_UPDATE\\\",\\\"NewEntity\\\" : {\\\"UniqueName\\\" : \\\"this.boundary = new\"\n          + \" byte[this.boundaryLength];\\\",\\\"EntityType\\\" : \\\"ASSIGNMENT\\\",\\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" : \\\"678\\\",\\\"End\\\" :\"\n          + \" \\\"723\\\"}},\\\"UpdatedEntity\\\" : {\\\"UniqueName\\\" : \\\"this.boundary = new\"\n          + \" byte[(boundary.length + BOUNDARY_PREFIX.length)];\\\",\\\"EntityType\\\" :\"\n          + \" \\\"ASSIGNMENT\\\",\\\"Modifiers\\\" : \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" :\"\n          + \" \\\"407\\\",\\\"End\\\" : \\\"473\\\"}},\\\"ParentEntity\\\" : {\\\"UniqueName\\\" :\"\n          + \" \\\"MultipartStream\\\",\\\"EntityType\\\" : \\\"METHOD\\\",\\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" : \\\"19\\\",\\\"End\\\" :\"\n          + \" \\\"861\\\"}}},{\\\"OperationType\\\" : \\\"Insert\\\",\\\"changeType\\\" :\"\n          + \" \\\"STATEMENT_INSERT\\\",\\\"InsertedEntity\\\" : {\\\"UniqueName\\\" : \\\"new\"\n          + \" IllegalArgumentException(\\\\\\\"The buffer size specified for the MultipartStream is\"\n          + \" too small\\\\\\\");\\\",\\\"EntityType\\\" : \\\"THROW_STATEMENT\\\",\\\"Modifiers\\\" :\"\n          + \" \\\"0\\\",\\\"SourceCodeRange\\\" : {\\\"Start\\\" : \\\"534\\\",\\\"End\\\" :\"\n          + \" \\\"656\\\"}},\\\"ParentEntity\\\" : {\\\"UniqueName\\\" : \\\"(bufSize < (this.boundaryLength +\"\n          + \" 1))\\\",\\\"EntityType\\\" : \\\"THEN_STATEMENT\\\",\\\"Modifiers\\\" : \\\"0\\\",\\\"SourceCodeRange\\\"\"\n          + \" : {\\\"Start\\\" : \\\"519\\\",\\\"End\\\" : \\\"667\\\"}}}]}}\"", "var_name": "sigChange"}], "file": "lang-java/src/test/java/org/eclipse/steady/java/sign/ASTSignatureComparatorTest.java"}, "test_case": {"identifier": "testChangeComparison", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testChangeComparison() throws FileAnalysisException, IOException {\n\n    // Read previous change from disk and check equality\n    final String sig_chg_json =\n        FileUtil.readFile(\n            Paths.get(\"./src/test/resources/methodBody/deserialize/signatureChange.json\"));\n    final SignatureChange ddf =\n        (ASTSignatureChange)\n            JacksonUtil.asObject(sig_chg_json, custom_deserializers, ASTSignatureChange.class);\n\n    SignatureComparator signComparator = new ASTSignatureComparator();\n    SignatureChange ddt = signComparator.computeChange(signatureDef, signatureUnderTest);\n\n    this.setupDefectiveConstruct();\n    this.setupFixedConstruct();\n    this.setupConstructUnderTest();\n    SignatureChange dtf = signComparator.computeChange(signatureUnderTest, signatureFix);\n\n    final Set<Object> i_dt =\n        ASTUtil.intersectSourceCodeChanges(ddt.getModifications(), ddf.getModifications(), false);\n    final Set<Object> i_tf =\n        ASTUtil.intersectSourceCodeChanges(dtf.getModifications(), ddf.getModifications(), false);\n\n    this.setupConstructUnderTest();\n  }", "signature": "void testChangeComparison()", "full_signature": "@Test public void testChangeComparison()", "class_method_signature": "ASTSignatureComparatorTest.testChangeComparison()", "testcase": true, "constructor": false, "invocations": ["readFile", "get", "asObject", "computeChange", "setupDefectiveConstruct", "setupFixedConstruct", "setupConstructUnderTest", "computeChange", "intersectSourceCodeChanges", "getModifications", "getModifications", "intersectSourceCodeChanges", "getModifications", "getModifications", "setupConstructUnderTest"]}, "focal_class": {"identifier": "ASTSignatureComparator", "superclass": "", "interfaces": "implements SignatureComparator", "fields": [{"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}, {"original_string": "private static final double NUM_OF_FIXES_THRESHOLD = 100.0;", "modifier": "private static final", "type": "double", "declarator": "NUM_OF_FIXES_THRESHOLD = 100.0", "var_name": "NUM_OF_FIXES_THRESHOLD"}, {"original_string": "private int totalNumFixes;", "modifier": "private", "type": "int", "declarator": "totalNumFixes", "var_name": "totalNumFixes"}, {"original_string": "private int matchedNumFixes;", "modifier": "private", "type": "int", "declarator": "matchedNumFixes", "var_name": "matchedNumFixes"}, {"original_string": "private LevenshteinSimilarityCalculator fLevenshtein = new LevenshteinSimilarityCalculator();", "modifier": "private", "type": "LevenshteinSimilarityCalculator", "declarator": "fLevenshtein = new LevenshteinSimilarityCalculator()", "var_name": "fLevenshtein"}, {"original_string": "private NGramsCalculator fNgrams = new NGramsCalculator(2);", "modifier": "private", "type": "NGramsCalculator", "declarator": "fNgrams = new NGramsCalculator(2)", "var_name": "fNgrams"}, {"original_string": "private static final double STRING_SIMILARITY_THRESHOLD_LESS_THAN_TWO_CHANGES = 0.7;", "modifier": "private static final", "type": "double", "declarator": "STRING_SIMILARITY_THRESHOLD_LESS_THAN_TWO_CHANGES = 0.7", "var_name": "STRING_SIMILARITY_THRESHOLD_LESS_THAN_TWO_CHANGES"}, {"original_string": "private static final double STRING_SIMILARITY_THRESHOLD_BETWEEN_TWO_AND_FIVE_CHANGES = 0.6;", "modifier": "private static final", "type": "double", "declarator": "STRING_SIMILARITY_THRESHOLD_BETWEEN_TWO_AND_FIVE_CHANGES = 0.6", "var_name": "STRING_SIMILARITY_THRESHOLD_BETWEEN_TWO_AND_FIVE_CHANGES"}, {"original_string": "private static final double STRING_SIMILARITY_THRESHOLD_MORE_THAN__FIVE_CHANGES = 0.5;", "modifier": "private static final", "type": "double", "declarator": "STRING_SIMILARITY_THRESHOLD_MORE_THAN__FIVE_CHANGES = 0.5", "var_name": "STRING_SIMILARITY_THRESHOLD_MORE_THAN__FIVE_CHANGES"}, {"original_string": "private double mStringSimilarity;", "modifier": "private", "type": "double", "declarator": "mStringSimilarity", "var_name": "mStringSimilarity"}], "methods": [{"identifier": "ASTSignatureComparator", "parameters": "()", "modifiers": "public", "return": "", "signature": " ASTSignatureComparator()", "full_signature": "public  ASTSignatureComparator()", "class_method_signature": "ASTSignatureComparator.ASTSignatureComparator()", "testcase": false, "constructor": true}, {"identifier": "ASTSignatureComparator", "parameters": "(double stringSimilarity)", "modifiers": "public", "return": "", "signature": " ASTSignatureComparator(double stringSimilarity)", "full_signature": "public  ASTSignatureComparator(double stringSimilarity)", "class_method_signature": "ASTSignatureComparator.ASTSignatureComparator(double stringSimilarity)", "testcase": false, "constructor": true}, {"identifier": "computeSimilarity", "parameters": "(Signature _a, Signature _b)", "modifiers": "@Override public", "return": "float", "signature": "float computeSimilarity(Signature _a, Signature _b)", "full_signature": "@Override public float computeSimilarity(Signature _a, Signature _b)", "class_method_signature": "ASTSignatureComparator.computeSimilarity(Signature _a, Signature _b)", "testcase": false, "constructor": false}, {"identifier": "computeSimilarity", "parameters": "(Node _vulnerable, Node _fixed)", "modifiers": "private", "return": "float", "signature": "float computeSimilarity(Node _vulnerable, Node _fixed)", "full_signature": "private float computeSimilarity(Node _vulnerable, Node _fixed)", "class_method_signature": "ASTSignatureComparator.computeSimilarity(Node _vulnerable, Node _fixed)", "testcase": false, "constructor": false}, {"identifier": "computeChange", "parameters": "(Signature _a, Signature _b)", "modifiers": "@Override public", "return": "SignatureChange", "signature": "SignatureChange computeChange(Signature _a, Signature _b)", "full_signature": "@Override public SignatureChange computeChange(Signature _a, Signature _b)", "class_method_signature": "ASTSignatureComparator.computeChange(Signature _a, Signature _b)", "testcase": false, "constructor": false}, {"identifier": "getTotalNumChanges", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTotalNumChanges()", "full_signature": "public int getTotalNumChanges()", "class_method_signature": "ASTSignatureComparator.getTotalNumChanges()", "testcase": false, "constructor": false}, {"identifier": "getMatchedNumChanges", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMatchedNumChanges()", "full_signature": "public int getMatchedNumChanges()", "class_method_signature": "ASTSignatureComparator.getMatchedNumChanges()", "testcase": false, "constructor": false}, {"identifier": "containsChange", "parameters": "(Signature _s, SignatureChange _change)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsChange(Signature _s, SignatureChange _change)", "full_signature": "@Override public boolean containsChange(Signature _s, SignatureChange _change)", "class_method_signature": "ASTSignatureComparator.containsChange(Signature _s, SignatureChange _change)", "testcase": false, "constructor": false}, {"identifier": "getStringSimilarityThreshold", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getStringSimilarityThreshold()", "full_signature": "public double getStringSimilarityThreshold()", "class_method_signature": "ASTSignatureComparator.getStringSimilarityThreshold()", "testcase": false, "constructor": false}, {"identifier": "setStringSimilarityThreshold", "parameters": "(double _threshold)", "modifiers": "public", "return": "void", "signature": "void setStringSimilarityThreshold(double _threshold)", "full_signature": "public void setStringSimilarityThreshold(double _threshold)", "class_method_signature": "ASTSignatureComparator.setStringSimilarityThreshold(double _threshold)", "testcase": false, "constructor": false}, {"identifier": "assignSimlarityScheme", "parameters": "(int _change_count)", "modifiers": "private", "return": "void", "signature": "void assignSimlarityScheme(int _change_count)", "full_signature": "private void assignSimlarityScheme(int _change_count)", "class_method_signature": "ASTSignatureComparator.assignSimlarityScheme(int _change_count)", "testcase": false, "constructor": false}, {"identifier": "getSimpleChangeName", "parameters": "(SourceCodeChange _change)", "modifiers": "private", "return": "String", "signature": "String getSimpleChangeName(SourceCodeChange _change)", "full_signature": "private String getSimpleChangeName(SourceCodeChange _change)", "class_method_signature": "ASTSignatureComparator.getSimpleChangeName(SourceCodeChange _change)", "testcase": false, "constructor": false}, {"identifier": "getBestMatch", "parameters": "(Node _root, SourceCodeChange _change)", "modifiers": "private", "return": "Node", "signature": "Node getBestMatch(Node _root, SourceCodeChange _change)", "full_signature": "private Node getBestMatch(Node _root, SourceCodeChange _change)", "class_method_signature": "ASTSignatureComparator.getBestMatch(Node _root, SourceCodeChange _change)", "testcase": false, "constructor": false}, {"identifier": "containsChange", "parameters": "(Node _root_node, Set<SourceCodeChange> _changes)", "modifiers": "private", "return": "boolean", "signature": "boolean containsChange(Node _root_node, Set<SourceCodeChange> _changes)", "full_signature": "private boolean containsChange(Node _root_node, Set<SourceCodeChange> _changes)", "class_method_signature": "ASTSignatureComparator.containsChange(Node _root_node, Set<SourceCodeChange> _changes)", "testcase": false, "constructor": false}, {"identifier": "hasSameParent", "parameters": "(Node _n1, Node _n2)", "modifiers": "private", "return": "boolean", "signature": "boolean hasSameParent(Node _n1, Node _n2)", "full_signature": "private boolean hasSameParent(Node _n1, Node _n2)", "class_method_signature": "ASTSignatureComparator.hasSameParent(Node _n1, Node _n2)", "testcase": false, "constructor": false}, {"identifier": "searchForBestMatchingNode", "parameters": "(Node changedNode, Node astRoot)", "modifiers": "private", "return": "Node", "signature": "Node searchForBestMatchingNode(Node changedNode, Node astRoot)", "full_signature": "private Node searchForBestMatchingNode(Node changedNode, Node astRoot)", "class_method_signature": "ASTSignatureComparator.searchForBestMatchingNode(Node changedNode, Node astRoot)", "testcase": false, "constructor": false}, {"identifier": "searchSourceCodeEntityByUniqueName", "parameters": "(\n      String _entityUniqueName, Node astRoot)", "modifiers": "private", "return": "SourceCodeEntity", "signature": "SourceCodeEntity searchSourceCodeEntityByUniqueName(\n      String _entityUniqueName, Node astRoot)", "full_signature": "private SourceCodeEntity searchSourceCodeEntityByUniqueName(\n      String _entityUniqueName, Node astRoot)", "class_method_signature": "ASTSignatureComparator.searchSourceCodeEntityByUniqueName(\n      String _entityUniqueName, Node astRoot)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(String _entityUniqueName, Node _s)", "modifiers": "private", "return": "Node", "signature": "Node search(String _entityUniqueName, Node _s)", "full_signature": "private Node search(String _entityUniqueName, Node _s)", "class_method_signature": "ASTSignatureComparator.search(String _entityUniqueName, Node _s)", "testcase": false, "constructor": false}, {"identifier": "simplePercentageClosenessScheme", "parameters": "(double numFoundFixes, double numTotalFixes)", "modifiers": "private", "return": "boolean", "signature": "boolean simplePercentageClosenessScheme(double numFoundFixes, double numTotalFixes)", "full_signature": "private boolean simplePercentageClosenessScheme(double numFoundFixes, double numTotalFixes)", "class_method_signature": "ASTSignatureComparator.simplePercentageClosenessScheme(double numFoundFixes, double numTotalFixes)", "testcase": false, "constructor": false}, {"identifier": "searchForNode", "parameters": "(SourceCodeChange change, Node astRoot)", "modifiers": "public", "return": "Node", "signature": "Node searchForNode(SourceCodeChange change, Node astRoot)", "full_signature": "public Node searchForNode(SourceCodeChange change, Node astRoot)", "class_method_signature": "ASTSignatureComparator.searchForNode(SourceCodeChange change, Node astRoot)", "testcase": false, "constructor": false}, {"identifier": "searchForEntity", "parameters": "(SourceCodeChange change, Node astRoot)", "modifiers": "public", "return": "boolean", "signature": "boolean searchForEntity(SourceCodeChange change, Node astRoot)", "full_signature": "public boolean searchForEntity(SourceCodeChange change, Node astRoot)", "class_method_signature": "ASTSignatureComparator.searchForEntity(SourceCodeChange change, Node astRoot)", "testcase": false, "constructor": false}, {"identifier": "searchForEntity", "parameters": "(String _entityUniqueName, Node astRoot)", "modifiers": "public", "return": "boolean", "signature": "boolean searchForEntity(String _entityUniqueName, Node astRoot)", "full_signature": "public boolean searchForEntity(String _entityUniqueName, Node astRoot)", "class_method_signature": "ASTSignatureComparator.searchForEntity(String _entityUniqueName, Node astRoot)", "testcase": false, "constructor": false}], "file": "lang-java/src/main/java/org/eclipse/steady/java/sign/ASTSignatureComparator.java"}, "focal_method": {"identifier": "computeChange", "parameters": "(Signature _a, Signature _b)", "modifiers": "@Override public", "return": "SignatureChange", "body": "@Override\n  public SignatureChange computeChange(Signature _a, Signature _b) {\n    SignatureChange astChange = new ASTSignatureChange(_a, _b);\n    astChange.getModifications();\n    return astChange;\n  }", "signature": "SignatureChange computeChange(Signature _a, Signature _b)", "full_signature": "@Override public SignatureChange computeChange(Signature _a, Signature _b)", "class_method_signature": "ASTSignatureComparator.computeChange(Signature _a, Signature _b)", "testcase": false, "constructor": false, "invocations": ["getModifications"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}