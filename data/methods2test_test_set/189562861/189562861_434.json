{"test_class": {"identifier": "DataSourceStatusCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DataSourceStatusChecker dataSourceStatusChecker;", "modifier": "private", "type": "DataSourceStatusChecker", "declarator": "dataSourceStatusChecker", "var_name": "dataSourceStatusChecker"}, {"original_string": "@Mock\n    private ApplicationContext applicationContext;", "modifier": "@Mock\n    private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}], "file": "dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/status/DataSourceStatusCheckerTest.java"}, "test_case": {"identifier": "testWithoutDatasource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithoutDatasource() {\n        Map<String, DataSource> map = new HashMap<String, DataSource>();\n        given(applicationContext.getBeansOfType(eq(DataSource.class), anyBoolean(), anyBoolean())).willReturn(map);\n\n        Status status = dataSourceStatusChecker.check();\n\n        assertThat(status.getLevel(), is(Status.Level.UNKNOWN));\n    }", "signature": "void testWithoutDatasource()", "full_signature": "@Test public void testWithoutDatasource()", "class_method_signature": "DataSourceStatusCheckerTest.testWithoutDatasource()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getBeansOfType", "eq", "anyBoolean", "anyBoolean", "check", "assertThat", "getLevel", "is"]}, "focal_class": {"identifier": "DataSourceStatusChecker", "superclass": "", "interfaces": "implements StatusChecker", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DataSourceStatusChecker.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DataSourceStatusChecker.class)", "var_name": "logger"}], "methods": [{"identifier": "check", "parameters": "()", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "Status", "signature": "Status check()", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public Status check()", "class_method_signature": "DataSourceStatusChecker.check()", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/status/DataSourceStatusChecker.java"}, "focal_method": {"identifier": "check", "parameters": "()", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "Status", "body": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public Status check() {\n        ApplicationContext context = null;\n        for (ApplicationContext c : SpringExtensionFactory.getContexts()) {\n            if (c != null) {\n                context = c;\n                break;\n            }\n        }\n        if (context == null) {\n            return new Status(Status.Level.UNKNOWN);\n        }\n        Map<String, DataSource> dataSources = context.getBeansOfType(DataSource.class, false, false);\n        if (dataSources == null || dataSources.size() == 0) {\n            return new Status(Status.Level.UNKNOWN);\n        }\n        Status.Level level = Status.Level.OK;\n        StringBuilder buf = new StringBuilder();\n        for (Map.Entry<String, DataSource> entry : dataSources.entrySet()) {\n            DataSource dataSource = entry.getValue();\n            if (buf.length() > 0) {\n                buf.append(\", \");\n            }\n            buf.append(entry.getKey());\n            try {\n                Connection connection = dataSource.getConnection();\n                try {\n                    DatabaseMetaData metaData = connection.getMetaData();\n                    ResultSet resultSet = metaData.getTypeInfo();\n                    try {\n                        if (!resultSet.next()) {\n                            level = Status.Level.ERROR;\n                        }\n                    } finally {\n                        resultSet.close();\n                    }\n                    buf.append(metaData.getURL());\n                    buf.append(\"(\");\n                    buf.append(metaData.getDatabaseProductName());\n                    buf.append(\"-\");\n                    buf.append(metaData.getDatabaseProductVersion());\n                    buf.append(\")\");\n                } finally {\n                    connection.close();\n                }\n            } catch (Throwable e) {\n                logger.warn(e.getMessage(), e);\n                return new Status(level, e.getMessage());\n            }\n        }\n        return new Status(level, buf.toString());\n    }", "signature": "Status check()", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public Status check()", "class_method_signature": "DataSourceStatusChecker.check()", "testcase": false, "constructor": false, "invocations": ["getContexts", "getBeansOfType", "size", "entrySet", "getValue", "length", "append", "append", "getKey", "getConnection", "getMetaData", "getTypeInfo", "next", "close", "append", "getURL", "append", "append", "getDatabaseProductName", "append", "append", "getDatabaseProductVersion", "append", "close", "warn", "getMessage", "getMessage", "toString"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}