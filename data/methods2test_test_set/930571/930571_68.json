{"test_class": {"identifier": "ProcessInstanceAdminServiceImplTest", "superclass": "extends AbstractKieServicesBaseTest", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(KModuleDeploymentServiceTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(KModuleDeploymentServiceTest.class)", "var_name": "logger"}, {"original_string": "protected static final String ADMIN_ARTIFACT_ID = \"test-admin\";", "modifier": "protected static final", "type": "String", "declarator": "ADMIN_ARTIFACT_ID = \"test-admin\"", "var_name": "ADMIN_ARTIFACT_ID"}, {"original_string": "protected static final String ADMIN_GROUP_ID = \"org.jbpm.test\";", "modifier": "protected static final", "type": "String", "declarator": "ADMIN_GROUP_ID = \"org.jbpm.test\"", "var_name": "ADMIN_GROUP_ID"}, {"original_string": "protected static final String ADMIN_VERSION_V1 = \"1.0.0\";", "modifier": "protected static final", "type": "String", "declarator": "ADMIN_VERSION_V1 = \"1.0.0\"", "var_name": "ADMIN_VERSION_V1"}, {"original_string": "private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();", "modifier": "private", "type": "List<DeploymentUnit>", "declarator": "units = new ArrayList<DeploymentUnit>()", "var_name": "units"}, {"original_string": "private KModuleDeploymentUnit deploymentUnit;", "modifier": "private", "type": "KModuleDeploymentUnit", "declarator": "deploymentUnit", "var_name": "deploymentUnit"}, {"original_string": "private Long processInstanceId = null;", "modifier": "private", "type": "Long", "declarator": "processInstanceId = null", "var_name": "processInstanceId"}], "file": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/admin/ProcessInstanceAdminServiceImplTest.java"}, "test_case": {"identifier": "testUpdateTimer", "parameters": "()", "modifiers": "@Test(timeout=10000) public", "return": "void", "body": "@Test(timeout=10000)\n    public void testUpdateTimer() throws Exception {\n        processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"IntermediateCatchEvent\");\n        assertNotNull(processInstanceId);\n        long scheduleTime = System.currentTimeMillis();\n        \n        Collection<NodeInstanceDesc> activeNodes = processAdminService.getActiveNodeInstances(processInstanceId);\n        assertNotNull(activeNodes);\n        assertEquals(1, activeNodes.size());\n        \n        NodeInstanceDesc active = activeNodes.iterator().next();       \n        assertEquals(\"timer\", active.getName());\n        \n        Collection<TimerInstance> timers = processAdminService.getTimerInstances(processInstanceId);\n        assertNotNull(timers);\n        assertEquals(1, timers.size());\n        \n        TimerInstance timer = timers.iterator().next();\n        assertNotNull(timer.getActivationTime());\n        assertNotNull(timer.getDelay());\n        assertNotNull(timer.getNextFireTime());\n        assertNotNull(timer.getProcessInstanceId());\n        assertNotNull(timer.getSessionId());\n        assertNotNull(timer.getTimerId());\n        assertNotNull(timer.getId());\n        assertNotNull(timer.getTimerName());\n        // thread sleep to test the different in the time timer spent after upgrade\n        // not to wait for any job to be done\n        Thread.sleep(1000);\n        \n        processAdminService.updateTimer(processInstanceId, timer.getId(), 3, 0, 0);\n        \n        CountDownListenerFactory.getExisting(\"processAdminService\").waitTillCompleted();\n        long fireTime = System.currentTimeMillis();        \n        long expirationTime = fireTime - scheduleTime;\n        //since the update of timer was including time already spent (thread sleep above) then it must wait less than 4 secs\n        assertTrue(expirationTime < 4000);\n       \n        ProcessInstanceDesc pi = runtimeDataService.getProcessInstanceById(processInstanceId);\n        assertEquals(ProcessInstance.STATE_COMPLETED, pi.getState().intValue());\n        \n        processInstanceId = null;\n    }", "signature": "void testUpdateTimer()", "full_signature": "@Test(timeout=10000) public void testUpdateTimer()", "class_method_signature": "ProcessInstanceAdminServiceImplTest.testUpdateTimer()", "testcase": true, "constructor": false, "invocations": ["startProcess", "getIdentifier", "assertNotNull", "currentTimeMillis", "getActiveNodeInstances", "assertNotNull", "assertEquals", "size", "next", "iterator", "assertEquals", "getName", "getTimerInstances", "assertNotNull", "assertEquals", "size", "next", "iterator", "assertNotNull", "getActivationTime", "assertNotNull", "getDelay", "assertNotNull", "getNextFireTime", "assertNotNull", "getProcessInstanceId", "assertNotNull", "getSessionId", "assertNotNull", "getTimerId", "assertNotNull", "getId", "assertNotNull", "getTimerName", "sleep", "updateTimer", "getId", "waitTillCompleted", "getExisting", "currentTimeMillis", "assertTrue", "getProcessInstanceById", "assertEquals", "intValue", "getState"]}, "focal_class": {"identifier": "ProcessInstanceAdminServiceImpl", "superclass": "", "interfaces": "implements ProcessInstanceAdminService", "fields": [{"original_string": "private ProcessService processService;", "modifier": "private", "type": "ProcessService", "declarator": "processService", "var_name": "processService"}, {"original_string": "private RuntimeDataService runtimeDataService;", "modifier": "private", "type": "RuntimeDataService", "declarator": "runtimeDataService", "var_name": "runtimeDataService"}, {"original_string": "private IdentityProvider identityProvider;", "modifier": "private", "type": "IdentityProvider", "declarator": "identityProvider", "var_name": "identityProvider"}, {"original_string": "private TransactionalCommandService commandService;", "modifier": "private", "type": "TransactionalCommandService", "declarator": "commandService", "var_name": "commandService"}], "methods": [{"identifier": "ProcessInstanceAdminServiceImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " ProcessInstanceAdminServiceImpl()", "full_signature": "public  ProcessInstanceAdminServiceImpl()", "class_method_signature": "ProcessInstanceAdminServiceImpl.ProcessInstanceAdminServiceImpl()", "testcase": false, "constructor": true}, {"identifier": "setProcessService", "parameters": "(ProcessService processService)", "modifiers": "public", "return": "void", "signature": "void setProcessService(ProcessService processService)", "full_signature": "public void setProcessService(ProcessService processService)", "class_method_signature": "ProcessInstanceAdminServiceImpl.setProcessService(ProcessService processService)", "testcase": false, "constructor": false}, {"identifier": "setRuntimeDataService", "parameters": "(RuntimeDataService runtimeDataService)", "modifiers": "public", "return": "void", "signature": "void setRuntimeDataService(RuntimeDataService runtimeDataService)", "full_signature": "public void setRuntimeDataService(RuntimeDataService runtimeDataService)", "class_method_signature": "ProcessInstanceAdminServiceImpl.setRuntimeDataService(RuntimeDataService runtimeDataService)", "testcase": false, "constructor": false}, {"identifier": "setIdentityProvider", "parameters": "(IdentityProvider identityProvider)", "modifiers": "public", "return": "void", "signature": "void setIdentityProvider(IdentityProvider identityProvider)", "full_signature": "public void setIdentityProvider(IdentityProvider identityProvider)", "class_method_signature": "ProcessInstanceAdminServiceImpl.setIdentityProvider(IdentityProvider identityProvider)", "testcase": false, "constructor": false}, {"identifier": "setCommandService", "parameters": "(TransactionalCommandService commandService)", "modifiers": "public", "return": "void", "signature": "void setCommandService(TransactionalCommandService commandService)", "full_signature": "public void setCommandService(TransactionalCommandService commandService)", "class_method_signature": "ProcessInstanceAdminServiceImpl.setCommandService(TransactionalCommandService commandService)", "testcase": false, "constructor": false}, {"identifier": "getProcessNodes", "parameters": "(long processInstanceId)", "modifiers": "@Override public", "return": "Collection<ProcessNode>", "signature": "Collection<ProcessNode> getProcessNodes(long processInstanceId)", "full_signature": "@Override public Collection<ProcessNode> getProcessNodes(long processInstanceId)", "class_method_signature": "ProcessInstanceAdminServiceImpl.getProcessNodes(long processInstanceId)", "testcase": false, "constructor": false}, {"identifier": "cancelNodeInstance", "parameters": "(long processInstanceId, long nodeInstanceId)", "modifiers": "@Override public", "return": "void", "signature": "void cancelNodeInstance(long processInstanceId, long nodeInstanceId)", "full_signature": "@Override public void cancelNodeInstance(long processInstanceId, long nodeInstanceId)", "class_method_signature": "ProcessInstanceAdminServiceImpl.cancelNodeInstance(long processInstanceId, long nodeInstanceId)", "testcase": false, "constructor": false}, {"identifier": "retriggerNodeInstance", "parameters": "(long processInstanceId, long nodeInstanceId)", "modifiers": "@Override public", "return": "void", "signature": "void retriggerNodeInstance(long processInstanceId, long nodeInstanceId)", "full_signature": "@Override public void retriggerNodeInstance(long processInstanceId, long nodeInstanceId)", "class_method_signature": "ProcessInstanceAdminServiceImpl.retriggerNodeInstance(long processInstanceId, long nodeInstanceId)", "testcase": false, "constructor": false}, {"identifier": "updateTimer", "parameters": "(long processInstanceId, long timerId, long delay, long period, int repeatLimit)", "modifiers": "@Override public", "return": "void", "signature": "void updateTimer(long processInstanceId, long timerId, long delay, long period, int repeatLimit)", "full_signature": "@Override public void updateTimer(long processInstanceId, long timerId, long delay, long period, int repeatLimit)", "class_method_signature": "ProcessInstanceAdminServiceImpl.updateTimer(long processInstanceId, long timerId, long delay, long period, int repeatLimit)", "testcase": false, "constructor": false}, {"identifier": "updateTimerRelative", "parameters": "(long processInstanceId, long timerId, long delay, long period, int repeatLimit)", "modifiers": "@Override public", "return": "void", "signature": "void updateTimerRelative(long processInstanceId, long timerId, long delay, long period, int repeatLimit)", "full_signature": "@Override public void updateTimerRelative(long processInstanceId, long timerId, long delay, long period, int repeatLimit)", "class_method_signature": "ProcessInstanceAdminServiceImpl.updateTimerRelative(long processInstanceId, long timerId, long delay, long period, int repeatLimit)", "testcase": false, "constructor": false}, {"identifier": "getTimerInstances", "parameters": "(long processInstanceId)", "modifiers": "@Override public", "return": "Collection<TimerInstance>", "signature": "Collection<TimerInstance> getTimerInstances(long processInstanceId)", "full_signature": "@Override public Collection<TimerInstance> getTimerInstances(long processInstanceId)", "class_method_signature": "ProcessInstanceAdminServiceImpl.getTimerInstances(long processInstanceId)", "testcase": false, "constructor": false}, {"identifier": "triggerNode", "parameters": "(long processInstanceId, long nodeId)", "modifiers": "@Override public", "return": "void", "signature": "void triggerNode(long processInstanceId, long nodeId)", "full_signature": "@Override public void triggerNode(long processInstanceId, long nodeId)", "class_method_signature": "ProcessInstanceAdminServiceImpl.triggerNode(long processInstanceId, long nodeId)", "testcase": false, "constructor": false}, {"identifier": "getActiveNodeInstances", "parameters": "(long processInstanceId)", "modifiers": "@Override public", "return": "Collection<NodeInstanceDesc>", "signature": "Collection<NodeInstanceDesc> getActiveNodeInstances(long processInstanceId)", "full_signature": "@Override public Collection<NodeInstanceDesc> getActiveNodeInstances(long processInstanceId)", "class_method_signature": "ProcessInstanceAdminServiceImpl.getActiveNodeInstances(long processInstanceId)", "testcase": false, "constructor": false}, {"identifier": "acknowledgeError", "parameters": "(String... errorId)", "modifiers": "@Override public", "return": "void", "signature": "void acknowledgeError(String... errorId)", "full_signature": "@Override public void acknowledgeError(String... errorId)", "class_method_signature": "ProcessInstanceAdminServiceImpl.acknowledgeError(String... errorId)", "testcase": false, "constructor": false}, {"identifier": "getError", "parameters": "(String errorId)", "modifiers": "@Override public", "return": "ExecutionError", "signature": "ExecutionError getError(String errorId)", "full_signature": "@Override public ExecutionError getError(String errorId)", "class_method_signature": "ProcessInstanceAdminServiceImpl.getError(String errorId)", "testcase": false, "constructor": false}, {"identifier": "getErrors", "parameters": "(boolean includeAcknowledged, QueryContext queryContext)", "modifiers": "@Override public", "return": "List<ExecutionError>", "signature": "List<ExecutionError> getErrors(boolean includeAcknowledged, QueryContext queryContext)", "full_signature": "@Override public List<ExecutionError> getErrors(boolean includeAcknowledged, QueryContext queryContext)", "class_method_signature": "ProcessInstanceAdminServiceImpl.getErrors(boolean includeAcknowledged, QueryContext queryContext)", "testcase": false, "constructor": false}, {"identifier": "getErrorsByProcessId", "parameters": "(String deploymentId, String processId, boolean includeAcknowledged, QueryContext queryContext)", "modifiers": "@Override public", "return": "List<ExecutionError>", "signature": "List<ExecutionError> getErrorsByProcessId(String deploymentId, String processId, boolean includeAcknowledged, QueryContext queryContext)", "full_signature": "@Override public List<ExecutionError> getErrorsByProcessId(String deploymentId, String processId, boolean includeAcknowledged, QueryContext queryContext)", "class_method_signature": "ProcessInstanceAdminServiceImpl.getErrorsByProcessId(String deploymentId, String processId, boolean includeAcknowledged, QueryContext queryContext)", "testcase": false, "constructor": false}, {"identifier": "getErrorsByProcessInstanceId", "parameters": "(long processInstanceId, boolean includeAcknowledged, QueryContext queryContext)", "modifiers": "@Override public", "return": "List<ExecutionError>", "signature": "List<ExecutionError> getErrorsByProcessInstanceId(long processInstanceId, boolean includeAcknowledged, QueryContext queryContext)", "full_signature": "@Override public List<ExecutionError> getErrorsByProcessInstanceId(long processInstanceId, boolean includeAcknowledged, QueryContext queryContext)", "class_method_signature": "ProcessInstanceAdminServiceImpl.getErrorsByProcessInstanceId(long processInstanceId, boolean includeAcknowledged, QueryContext queryContext)", "testcase": false, "constructor": false}, {"identifier": "getErrorsByProcessInstanceId", "parameters": "(long processInstanceId, String nodeName, boolean includeAcknowledged, QueryContext queryContext)", "modifiers": "@Override public", "return": "List<ExecutionError>", "signature": "List<ExecutionError> getErrorsByProcessInstanceId(long processInstanceId, String nodeName, boolean includeAcknowledged, QueryContext queryContext)", "full_signature": "@Override public List<ExecutionError> getErrorsByProcessInstanceId(long processInstanceId, String nodeName, boolean includeAcknowledged, QueryContext queryContext)", "class_method_signature": "ProcessInstanceAdminServiceImpl.getErrorsByProcessInstanceId(long processInstanceId, String nodeName, boolean includeAcknowledged, QueryContext queryContext)", "testcase": false, "constructor": false}, {"identifier": "getErrorsByDeploymentId", "parameters": "(String containerId, boolean includeAcknowledged, QueryContext queryContext)", "modifiers": "@Override public", "return": "List<ExecutionError>", "signature": "List<ExecutionError> getErrorsByDeploymentId(String containerId, boolean includeAcknowledged, QueryContext queryContext)", "full_signature": "@Override public List<ExecutionError> getErrorsByDeploymentId(String containerId, boolean includeAcknowledged, QueryContext queryContext)", "class_method_signature": "ProcessInstanceAdminServiceImpl.getErrorsByDeploymentId(String containerId, boolean includeAcknowledged, QueryContext queryContext)", "testcase": false, "constructor": false}, {"identifier": "applyQueryContext", "parameters": "(Map<String, Object> params, QueryContext queryContext)", "modifiers": "protected", "return": "void", "signature": "void applyQueryContext(Map<String, Object> params, QueryContext queryContext)", "full_signature": "protected void applyQueryContext(Map<String, Object> params, QueryContext queryContext)", "class_method_signature": "ProcessInstanceAdminServiceImpl.applyQueryContext(Map<String, Object> params, QueryContext queryContext)", "testcase": false, "constructor": false}, {"identifier": "getAckMode", "parameters": "(boolean includeAcknowledged)", "modifiers": "protected", "return": "List<Short>", "signature": "List<Short> getAckMode(boolean includeAcknowledged)", "full_signature": "protected List<Short> getAckMode(boolean includeAcknowledged)", "class_method_signature": "ProcessInstanceAdminServiceImpl.getAckMode(boolean includeAcknowledged)", "testcase": false, "constructor": false}], "file": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/admin/ProcessInstanceAdminServiceImpl.java"}, "focal_method": {"identifier": "updateTimer", "parameters": "(long processInstanceId, long timerId, long delay, long period, int repeatLimit)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void updateTimer(long processInstanceId, long timerId, long delay, long period, int repeatLimit) throws NodeInstanceNotFoundException, ProcessInstanceNotFoundException {\n        ProcessInstanceDesc pi = runtimeDataService.getProcessInstanceById(processInstanceId);\n        if (pi == null) {\n            throw new ProcessInstanceNotFoundException(\"Process instance with id \" + processInstanceId + \" not found\");\n        }\n        processService.execute(pi.getDeploymentId(), ProcessInstanceIdContext.get(processInstanceId), new UpdateTimerCommand(processInstanceId, timerId, delay, period, repeatLimit));\n    }", "signature": "void updateTimer(long processInstanceId, long timerId, long delay, long period, int repeatLimit)", "full_signature": "@Override public void updateTimer(long processInstanceId, long timerId, long delay, long period, int repeatLimit)", "class_method_signature": "ProcessInstanceAdminServiceImpl.updateTimer(long processInstanceId, long timerId, long delay, long period, int repeatLimit)", "testcase": false, "constructor": false, "invocations": ["getProcessInstanceById", "execute", "getDeploymentId", "get"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}