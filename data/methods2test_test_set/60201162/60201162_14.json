{"test_class": {"identifier": "WorkerInstanceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(WorkerInstanceTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(WorkerInstanceTest.class)", "var_name": "LOGGER"}, {"original_string": "private int zkCluster1Port = ZkStarter.DEFAULT_ZK_TEST_PORT;", "modifier": "private", "type": "int", "declarator": "zkCluster1Port = ZkStarter.DEFAULT_ZK_TEST_PORT", "var_name": "zkCluster1Port"}, {"original_string": "private String zkCluster1Str = \"localhost:\" + zkCluster1Port;", "modifier": "private", "type": "String", "declarator": "zkCluster1Str = \"localhost:\" + zkCluster1Port", "var_name": "zkCluster1Str"}, {"original_string": "private int zkCluster2Port = ZkStarter.DEFAULT_ZK_TEST_PORT;", "modifier": "private", "type": "int", "declarator": "zkCluster2Port = ZkStarter.DEFAULT_ZK_TEST_PORT", "var_name": "zkCluster2Port"}, {"original_string": "private String zkCluster2Str = \"localhost:\" + zkCluster2Port;", "modifier": "private", "type": "String", "declarator": "zkCluster2Str = \"localhost:\" + zkCluster2Port", "var_name": "zkCluster2Str"}, {"original_string": "private KafkaServerStartable srcKafka1;", "modifier": "private", "type": "KafkaServerStartable", "declarator": "srcKafka1", "var_name": "srcKafka1"}, {"original_string": "private KafkaServerStartable srcKafka2;", "modifier": "private", "type": "KafkaServerStartable", "declarator": "srcKafka2", "var_name": "srcKafka2"}, {"original_string": "private final int srcCluster1Port1 = 19092;", "modifier": "private final", "type": "int", "declarator": "srcCluster1Port1 = 19092", "var_name": "srcCluster1Port1"}, {"original_string": "private final int srcCluster1Port2 = 19094;", "modifier": "private final", "type": "int", "declarator": "srcCluster1Port2 = 19094", "var_name": "srcCluster1Port2"}, {"original_string": "private final String srcCluster1ZK = zkCluster1Str + \"/\" + TestUtils.SRC_CLUSTER;", "modifier": "private final", "type": "String", "declarator": "srcCluster1ZK = zkCluster1Str + \"/\" + TestUtils.SRC_CLUSTER", "var_name": "srcCluster1ZK"}, {"original_string": "private final String srcCluster1BootstrapServer = String\n      .format(\"localhost:%d\", srcCluster1Port1);", "modifier": "private final", "type": "String", "declarator": "srcCluster1BootstrapServer = String\n      .format(\"localhost:%d\", srcCluster1Port1)", "var_name": "srcCluster1BootstrapServer"}, {"original_string": "private KafkaServerStartable srcKafka3;", "modifier": "private", "type": "KafkaServerStartable", "declarator": "srcKafka3", "var_name": "srcKafka3"}, {"original_string": "private final int srcCluster2Port = 19095;", "modifier": "private final", "type": "int", "declarator": "srcCluster2Port = 19095", "var_name": "srcCluster2Port"}, {"original_string": "private final String srcCluster2ZK = zkCluster2Str + \"/\" + TestUtils.SRC_CLUSTER_2;", "modifier": "private final", "type": "String", "declarator": "srcCluster2ZK = zkCluster2Str + \"/\" + TestUtils.SRC_CLUSTER_2", "var_name": "srcCluster2ZK"}, {"original_string": "private final String srcCluster2BootstrapServer = String\n      .format(\"localhost:%d\", srcCluster2Port);", "modifier": "private final", "type": "String", "declarator": "srcCluster2BootstrapServer = String\n      .format(\"localhost:%d\", srcCluster2Port)", "var_name": "srcCluster2BootstrapServer"}, {"original_string": "private KafkaServerStartable dstKafka;", "modifier": "private", "type": "KafkaServerStartable", "declarator": "dstKafka", "var_name": "dstKafka"}, {"original_string": "private final int dstClusterPort = 19093;", "modifier": "private final", "type": "int", "declarator": "dstClusterPort = 19093", "var_name": "dstClusterPort"}, {"original_string": "private final String dstClusterZK = zkCluster1Str + \"/\" + TestUtils.DST_CLUSTER;", "modifier": "private final", "type": "String", "declarator": "dstClusterZK = zkCluster1Str + \"/\" + TestUtils.DST_CLUSTER", "var_name": "dstClusterZK"}, {"original_string": "private final String dstBootstrapServer = String.format(\"localhost:%d\", dstClusterPort);", "modifier": "private final", "type": "String", "declarator": "dstBootstrapServer = String.format(\"localhost:%d\", dstClusterPort)", "var_name": "dstBootstrapServer"}, {"original_string": "private int numberOfPartitions = 2;", "modifier": "private", "type": "int", "declarator": "numberOfPartitions = 2", "var_name": "numberOfPartitions"}], "file": "uReplicator-Worker-3.0/src/test/java/com/uber/stream/ureplicator/worker/WorkerInstanceTest.java"}, "test_case": {"identifier": "testFederatedWorkerEndToEnd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFederatedWorkerEndToEnd() throws Exception {\n    class WorkerStarterRunnable implements Runnable {\n\n      private final WorkerStarter starter;\n\n      public WorkerStarterRunnable(WorkerConf workerConf) {\n        starter = new WorkerStarter(workerConf);\n      }\n\n      @Override\n      public void run() {\n        try {\n          LOGGER.info(\"Starting WorkerStarter\");\n          starter.run();\n        } catch (Exception e) {\n          LOGGER.error(\"WorkerStarter failed\", e);\n        }\n      }\n\n      public void shutdown() {\n        starter.shutdown();\n      }\n    }\n\n    // create new topic for testing\n    String topicName1 = \"tessFederatedWorkerEndToEnd1\";\n    String topicName2 = \"tessFederatedWorkerEndToEnd2\";\n    String topicName3 = \"tessFederatedWorkerEndToEnd3\";\n\n    KafkaStarterUtils.createTopic(topicName1, numberOfPartitions, srcCluster1ZK, \"2\");\n    KafkaStarterUtils.createTopic(topicName2, numberOfPartitions, srcCluster1ZK, \"2\");\n    KafkaStarterUtils.createTopic(topicName3, numberOfPartitions, srcCluster2ZK, \"1\");\n    KafkaStarterUtils.createTopic(topicName1, numberOfPartitions, dstClusterZK, \"1\");\n    KafkaStarterUtils.createTopic(topicName2, numberOfPartitions, dstClusterZK, \"1\");\n    KafkaStarterUtils.createTopic(topicName3, numberOfPartitions, dstClusterZK, \"1\");\n\n    // init zk client for zk cluster 1\n    ZkClient commitZkClient = ZkUtils.createZkClient(\n        srcCluster1ZK,\n        10000,\n        10000);\n    WorkerConf workerConf = TestUtils.initWorkerConf();\n    Properties helixProps = WorkerUtils.loadAndValidateHelixProps(workerConf.getHelixConfigFile());\n\n    String instanceId = helixProps.getProperty(Constants.HELIX_INSTANCE_ID, null);\n    Assert.assertNotNull(instanceId, String\n        .format(\"failed to find property %s in configuration file %s\", Constants.HELIX_INSTANCE_ID,\n            workerConf.getHelixConfigFile()));\n\n    // prepare helix cluster\n    String route1 = String.format(\"%s-%s-0\", TestUtils.SRC_CLUSTER, TestUtils.DST_CLUSTER);\n    String route1ForHelix = String.format(\"@%s@%s\", TestUtils.SRC_CLUSTER, TestUtils.DST_CLUSTER);\n    String route2 = String.format(\"%s-%s-0\", TestUtils.SRC_CLUSTER_2, TestUtils.DST_CLUSTER);\n    String route2ForHelix = String.format(\"@%s@%s\", TestUtils.SRC_CLUSTER_2, TestUtils.DST_CLUSTER);\n\n    ZKHelixAdmin helixAdmin = TestUtils.initHelixClustersForWorkerTest(helixProps, route1, route2);\n    String deployment = helixProps.getProperty(\"federated.deployment.name\");\n    String managerHelixClusterName = WorkerUtils.getManagerWorkerHelixClusterName(deployment);\n    String controllerHelixClusterName = WorkerUtils.getControllerWorkerHelixClusterName(route1);\n    String controller2HelixClusterName = WorkerUtils.getControllerWorkerHelixClusterName(route2);\n\n    Thread.sleep(1000);\n    WorkerStarterRunnable runnable = new WorkerStarterRunnable(workerConf);\n    Thread workerThread = new Thread(runnable);\n    workerThread.start();\n\n    // assign worker to route1\n    TestUtils.updateRouteWithValidation(managerHelixClusterName, route1ForHelix, instanceId, helixAdmin, \"ONLINE\");\n    TestUtils.updateTopicWithValidation(controllerHelixClusterName, topicName1, Arrays.asList(0, 1),\n        Arrays.asList(\"0\"), helixAdmin, \"ONLINE\");\n\n    TestUtils.produceMessages(srcCluster1BootstrapServer, topicName1, 20);\n    List<ConsumerRecord<Byte[], Byte[]>> records = TestUtils\n        .consumeMessage(dstBootstrapServer, topicName1, 6000);\n    Assert.assertEquals(records.size(), 20);\n\n    TestUtils.updateTopicWithValidation(controllerHelixClusterName, topicName1, Arrays.asList(0, 1),\n        Arrays.asList(\"0\"), helixAdmin, \"OFFLINE\");\n\n    TestUtils.produceMessages(srcCluster1BootstrapServer, topicName1, 20);\n    records = TestUtils.consumeMessage(dstBootstrapServer, topicName1, 6000);\n    Assert.assertEquals(records.size(), 0);\n\n    TestUtils.updateRouteWithValidation(managerHelixClusterName, route1ForHelix, instanceId, helixAdmin, \"OFFLINE\");\n\n\n    String offset = commitZkClient\n        .readData(\"/consumers/ureplicator-cluster1-cluster2/offsets/\" + topicName1 + \"/0\")\n        .toString();\n    Assert.assertEquals(offset, \"10\");\n\n    // assign worker to route1\n    TestUtils.updateRouteWithValidation(managerHelixClusterName, route1ForHelix, instanceId, helixAdmin, \"ONLINE\");\n    TestUtils.updateTopicWithValidation(controllerHelixClusterName, topicName1, Arrays.asList(0, 1),\n        Arrays.asList(\"0\"), helixAdmin, \"ONLINE\");\n    records = TestUtils.consumeMessage(dstBootstrapServer, topicName1, 6000);\n    Assert.assertEquals(records.size(), 20);\n\n\n    TestUtils.updateRouteWithValidation(managerHelixClusterName, route1ForHelix, instanceId, helixAdmin, \"OFFLINE\");\n\n    TestUtils.updateRouteWithValidation(managerHelixClusterName, route2ForHelix, instanceId, helixAdmin, \"ONLINE\");\n    TestUtils.updateTopicWithValidation(controller2HelixClusterName, topicName3, Arrays.asList(0, 1),\n\n        Arrays.asList(\"0\"), helixAdmin, \"ONLINE\");\n\n    TestUtils.produceMessages(srcCluster2BootstrapServer, topicName3, 20);\n\n    records = TestUtils.consumeMessage(dstBootstrapServer, topicName3, 6000);\n    Assert.assertEquals(records.size(), 20);\n\n    runnable.shutdown();\n    offset = commitZkClient\n        .readData(\"/consumers/ureplicator-cluster1-cluster2/offsets/\" + topicName1 + \"/0\")\n        .toString();\n    Assert.assertEquals(offset, \"20\");\n  }", "signature": "void testFederatedWorkerEndToEnd()", "full_signature": "@Test public void testFederatedWorkerEndToEnd()", "class_method_signature": "WorkerInstanceTest.testFederatedWorkerEndToEnd()", "testcase": true, "constructor": false, "invocations": ["info", "run", "error", "shutdown", "createTopic", "createTopic", "createTopic", "createTopic", "createTopic", "createTopic", "createZkClient", "initWorkerConf", "loadAndValidateHelixProps", "getHelixConfigFile", "getProperty", "assertNotNull", "format", "getHelixConfigFile", "format", "format", "format", "format", "initHelixClustersForWorkerTest", "getProperty", "getManagerWorkerHelixClusterName", "getControllerWorkerHelixClusterName", "getControllerWorkerHelixClusterName", "sleep", "start", "updateRouteWithValidation", "updateTopicWithValidation", "asList", "asList", "produceMessages", "consumeMessage", "assertEquals", "size", "updateTopicWithValidation", "asList", "asList", "produceMessages", "consumeMessage", "assertEquals", "size", "updateRouteWithValidation", "toString", "readData", "assertEquals", "updateRouteWithValidation", "updateTopicWithValidation", "asList", "asList", "consumeMessage", "assertEquals", "size", "updateRouteWithValidation", "updateRouteWithValidation", "updateTopicWithValidation", "asList", "asList", "produceMessages", "consumeMessage", "assertEquals", "size", "shutdown", "toString", "readData", "assertEquals"]}, "focal_class": {"identifier": "WorkerInstance", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(WorkerInstance.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(WorkerInstance.class)", "var_name": "LOGGER"}, {"original_string": "protected final AtomicBoolean isShuttingDown = new AtomicBoolean(false);", "modifier": "protected final", "type": "AtomicBoolean", "declarator": "isShuttingDown = new AtomicBoolean(false)", "var_name": "isShuttingDown"}, {"original_string": "protected final AtomicBoolean isRunning = new AtomicBoolean(false);", "modifier": "protected final", "type": "AtomicBoolean", "declarator": "isRunning = new AtomicBoolean(false)", "var_name": "isRunning"}, {"original_string": "protected final WorkerConf workerConf;", "modifier": "protected final", "type": "WorkerConf", "declarator": "workerConf", "var_name": "workerConf"}, {"original_string": "protected final Map<String, String> topicMapping;", "modifier": "protected final", "type": "Map<String, String>", "declarator": "topicMapping", "var_name": "topicMapping"}, {"original_string": "protected final Properties producerProps;", "modifier": "protected final", "type": "Properties", "declarator": "producerProps", "var_name": "producerProps"}, {"original_string": "protected final CustomizedConsumerConfig consumerProps;", "modifier": "protected final", "type": "CustomizedConsumerConfig", "declarator": "consumerProps", "var_name": "consumerProps"}, {"original_string": "protected final Properties clusterProps;", "modifier": "protected final", "type": "Properties", "declarator": "clusterProps", "var_name": "clusterProps"}, {"original_string": "protected final List<BlockingQueue<FetchedDataChunk>> messageQueue = new ArrayList<>();", "modifier": "protected final", "type": "List<BlockingQueue<FetchedDataChunk>>", "declarator": "messageQueue = new ArrayList<>()", "var_name": "messageQueue"}, {"original_string": "protected final List<ConsumerIterator> consumerStream = new ArrayList<>();", "modifier": "protected final", "type": "List<ConsumerIterator>", "declarator": "consumerStream = new ArrayList<>()", "var_name": "consumerStream"}, {"original_string": "protected final int numOfProducer;", "modifier": "protected final", "type": "int", "declarator": "numOfProducer", "var_name": "numOfProducer"}, {"original_string": "protected final int maxQueueSize;", "modifier": "protected final", "type": "int", "declarator": "maxQueueSize", "var_name": "maxQueueSize"}, {"original_string": "private String topicObserverZk;", "modifier": "private", "type": "String", "declarator": "topicObserverZk", "var_name": "topicObserverZk"}, {"original_string": "private IConsumerFetcherManager fetcherManager;", "modifier": "private", "type": "IConsumerFetcherManager", "declarator": "fetcherManager", "var_name": "fetcherManager"}, {"original_string": "private IMessageTransformer messageTransformer;", "modifier": "private", "type": "IMessageTransformer", "declarator": "messageTransformer", "var_name": "messageTransformer"}, {"original_string": "private ProducerManager producerManager;", "modifier": "private", "type": "ProducerManager", "declarator": "producerManager", "var_name": "producerManager"}, {"original_string": "private ICheckPointManager checkpointManager;", "modifier": "private", "type": "ICheckPointManager", "declarator": "checkpointManager", "var_name": "checkpointManager"}, {"original_string": "protected TopicPartitionCountObserver observer;", "modifier": "protected", "type": "TopicPartitionCountObserver", "declarator": "observer", "var_name": "observer"}, {"original_string": "protected String srcCluster;", "modifier": "protected", "type": "String", "declarator": "srcCluster", "var_name": "srcCluster"}, {"original_string": "protected String dstCluster;", "modifier": "protected", "type": "String", "declarator": "dstCluster", "var_name": "dstCluster"}], "methods": [{"identifier": "WorkerInstance", "parameters": "(WorkerConf workerConf)", "modifiers": "public", "return": "", "signature": " WorkerInstance(WorkerConf workerConf)", "full_signature": "public  WorkerInstance(WorkerConf workerConf)", "class_method_signature": "WorkerInstance.WorkerInstance(WorkerConf workerConf)", "testcase": false, "constructor": true}, {"identifier": "isRunning", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRunning()", "full_signature": "public boolean isRunning()", "class_method_signature": "WorkerInstance.isRunning()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(String srcCluster, String dstCluster, String routeId,\n      String federatedDeploymentName)", "modifiers": "public", "return": "void", "signature": "void start(String srcCluster, String dstCluster, String routeId,\n      String federatedDeploymentName)", "full_signature": "public void start(String srcCluster, String dstCluster, String routeId,\n      String federatedDeploymentName)", "class_method_signature": "WorkerInstance.start(String srcCluster, String dstCluster, String routeId,\n      String federatedDeploymentName)", "testcase": false, "constructor": false}, {"identifier": "createMessageTransformer", "parameters": "()", "modifiers": "public", "return": "IMessageTransformer", "signature": "IMessageTransformer createMessageTransformer()", "full_signature": "public IMessageTransformer createMessageTransformer()", "class_method_signature": "WorkerInstance.createMessageTransformer()", "testcase": false, "constructor": false}, {"identifier": "createCheckpointManager", "parameters": "()", "modifiers": "public", "return": "ICheckPointManager", "signature": "ICheckPointManager createCheckpointManager()", "full_signature": "public ICheckPointManager createCheckpointManager()", "class_method_signature": "WorkerInstance.createCheckpointManager()", "testcase": false, "constructor": false}, {"identifier": "createFetcherManager", "parameters": "()", "modifiers": "public", "return": "IConsumerFetcherManager", "signature": "IConsumerFetcherManager createFetcherManager()", "full_signature": "public IConsumerFetcherManager createFetcherManager()", "class_method_signature": "WorkerInstance.createFetcherManager()", "testcase": false, "constructor": false}, {"identifier": "createProducerManager", "parameters": "()", "modifiers": "public", "return": "ProducerManager", "signature": "ProducerManager createProducerManager()", "full_signature": "public ProducerManager createProducerManager()", "class_method_signature": "WorkerInstance.createProducerManager()", "testcase": false, "constructor": false}, {"identifier": "addTopicPartition", "parameters": "(String topic, int partition)", "modifiers": "public", "return": "void", "signature": "void addTopicPartition(String topic, int partition)", "full_signature": "public void addTopicPartition(String topic, int partition)", "class_method_signature": "WorkerInstance.addTopicPartition(String topic, int partition)", "testcase": false, "constructor": false}, {"identifier": "addTopicPartition", "parameters": "(String topic, int partition, Long startingOffset,\n      Long endingOffset, String dstTopic)", "modifiers": "public", "return": "void", "signature": "void addTopicPartition(String topic, int partition, Long startingOffset,\n      Long endingOffset, String dstTopic)", "full_signature": "public void addTopicPartition(String topic, int partition, Long startingOffset,\n      Long endingOffset, String dstTopic)", "class_method_signature": "WorkerInstance.addTopicPartition(String topic, int partition, Long startingOffset,\n      Long endingOffset, String dstTopic)", "testcase": false, "constructor": false}, {"identifier": "deleteTopicPartition", "parameters": "(String topic, int partition)", "modifiers": "public", "return": "void", "signature": "void deleteTopicPartition(String topic, int partition)", "full_signature": "public void deleteTopicPartition(String topic, int partition)", "class_method_signature": "WorkerInstance.deleteTopicPartition(String topic, int partition)", "testcase": false, "constructor": false}, {"identifier": "cleanShutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cleanShutdown()", "full_signature": "public void cleanShutdown()", "class_method_signature": "WorkerInstance.cleanShutdown()", "testcase": false, "constructor": false}, {"identifier": "cleanShutdown", "parameters": "(boolean force)", "modifiers": "public", "return": "void", "signature": "void cleanShutdown(boolean force)", "full_signature": "public void cleanShutdown(boolean force)", "class_method_signature": "WorkerInstance.cleanShutdown(boolean force)", "testcase": false, "constructor": false}, {"identifier": "initializeConsumerStream", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeConsumerStream()", "full_signature": "private void initializeConsumerStream()", "class_method_signature": "WorkerInstance.initializeConsumerStream()", "testcase": false, "constructor": false}, {"identifier": "initializeProperties", "parameters": "(String srcCluster, String dstCluster)", "modifiers": "private", "return": "void", "signature": "void initializeProperties(String srcCluster, String dstCluster)", "full_signature": "private void initializeProperties(String srcCluster, String dstCluster)", "class_method_signature": "WorkerInstance.initializeProperties(String srcCluster, String dstCluster)", "testcase": false, "constructor": false}, {"identifier": "initializeMetricsReporter", "parameters": "(String srcCluster, String dstCluster, String routeId,\n      String federatedDeploymentName)", "modifiers": "private", "return": "void", "signature": "void initializeMetricsReporter(String srcCluster, String dstCluster, String routeId,\n      String federatedDeploymentName)", "full_signature": "private void initializeMetricsReporter(String srcCluster, String dstCluster, String routeId,\n      String federatedDeploymentName)", "class_method_signature": "WorkerInstance.initializeMetricsReporter(String srcCluster, String dstCluster, String routeId,\n      String federatedDeploymentName)", "testcase": false, "constructor": false}, {"identifier": "initializeTopicObserver", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeTopicObserver()", "full_signature": "private void initializeTopicObserver()", "class_method_signature": "WorkerInstance.initializeTopicObserver()", "testcase": false, "constructor": false}, {"identifier": "initializeTopicMapping", "parameters": "(Properties topicMappingProps)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> initializeTopicMapping(Properties topicMappingProps)", "full_signature": "private Map<String, String> initializeTopicMapping(Properties topicMappingProps)", "class_method_signature": "WorkerInstance.initializeTopicMapping(Properties topicMappingProps)", "testcase": false, "constructor": false}, {"identifier": "registerMetrics", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerMetrics()", "full_signature": "private void registerMetrics()", "class_method_signature": "WorkerInstance.registerMetrics()", "testcase": false, "constructor": false}, {"identifier": "removeMetrics", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeMetrics()", "full_signature": "private void removeMetrics()", "class_method_signature": "WorkerInstance.removeMetrics()", "testcase": false, "constructor": false}, {"identifier": "additionalConfigs", "parameters": "(String srcCluster, String dstCluster)", "modifiers": "public", "return": "void", "signature": "void additionalConfigs(String srcCluster, String dstCluster)", "full_signature": "public void additionalConfigs(String srcCluster, String dstCluster)", "class_method_signature": "WorkerInstance.additionalConfigs(String srcCluster, String dstCluster)", "testcase": false, "constructor": false}, {"identifier": "onProducerCompletionWithoutException", "parameters": "(RecordMetadata metadata, int srcPartition,\n      long srcOffset)", "modifiers": "protected", "return": "void", "signature": "void onProducerCompletionWithoutException(RecordMetadata metadata, int srcPartition,\n      long srcOffset)", "full_signature": "protected void onProducerCompletionWithoutException(RecordMetadata metadata, int srcPartition,\n      long srcOffset)", "class_method_signature": "WorkerInstance.onProducerCompletionWithoutException(RecordMetadata metadata, int srcPartition,\n      long srcOffset)", "testcase": false, "constructor": false}, {"identifier": "setMessageRatePerSecond", "parameters": "(Double messageRatePerSecond)", "modifiers": "public", "return": "void", "signature": "void setMessageRatePerSecond(Double messageRatePerSecond)", "full_signature": "public void setMessageRatePerSecond(Double messageRatePerSecond)", "class_method_signature": "WorkerInstance.setMessageRatePerSecond(Double messageRatePerSecond)", "testcase": false, "constructor": false}], "file": "uReplicator-Worker-3.0/src/main/java/com/uber/stream/ureplicator/worker/WorkerInstance.java"}, "focal_method": {"identifier": "start", "parameters": "(String srcCluster, String dstCluster, String routeId,\n      String federatedDeploymentName)", "modifiers": "public", "return": "void", "body": "public void start(String srcCluster, String dstCluster, String routeId,\n      String federatedDeploymentName) {\n    if (!isRunning.compareAndSet(false, true)) {\n      LOGGER.error(\n          \"Instance already running, srcCluster: {}, dstCluster:{}\",\n          this.srcCluster, this.dstCluster);\n      throw new InternalError(String\n          .format(\"Instance already running, srcCluster: %s, dstCluster:%s\", this.srcCluster,\n              this.dstCluster));\n    }\n    isShuttingDown.set(false);\n    this.srcCluster = srcCluster;\n    this.dstCluster = dstCluster;\n    initializeProperties(srcCluster, dstCluster);\n    // Init blocking queue\n    initializeConsumerStream();\n    initializeTopicObserver();\n    initializeMetricsReporter(srcCluster, dstCluster, routeId, federatedDeploymentName);\n    additionalConfigs(srcCluster, dstCluster);\n\n    messageTransformer = createMessageTransformer();\n\n    checkpointManager = createCheckpointManager();\n\n    // set client id prefix\n    String clientId = \"ureplicator\";\n    if (workerConf.getFederatedEnabled()) {\n      clientId = String.format(\"ureplicator-%s-%s-%s\", srcCluster, dstCluster, routeId);\n    }\n    consumerProps.setProperty(ConsumerConfig.CLIENT_ID_CONFIG, clientId);\n    // set consumer group to ureplicator it does not exists\n    String consumerGroup = consumerProps.getProperty(ConsumerConfig.GROUP_ID_CONFIG, \"ureplicator\");\n    consumerProps.setProperty(ConsumerConfig.GROUP_ID_CONFIG, consumerGroup);\n    fetcherManager = createFetcherManager();\n    fetcherManager.start();\n\n    producerManager = createProducerManager();\n    producerManager.start();\n    registerMetrics();\n  }", "signature": "void start(String srcCluster, String dstCluster, String routeId,\n      String federatedDeploymentName)", "full_signature": "public void start(String srcCluster, String dstCluster, String routeId,\n      String federatedDeploymentName)", "class_method_signature": "WorkerInstance.start(String srcCluster, String dstCluster, String routeId,\n      String federatedDeploymentName)", "testcase": false, "constructor": false, "invocations": ["compareAndSet", "error", "format", "set", "initializeProperties", "initializeConsumerStream", "initializeTopicObserver", "initializeMetricsReporter", "additionalConfigs", "createMessageTransformer", "createCheckpointManager", "getFederatedEnabled", "format", "setProperty", "getProperty", "setProperty", "createFetcherManager", "start", "createProducerManager", "start", "registerMetrics"]}, "repository": {"repo_id": 60201162, "url": "https://github.com/uber/uReplicator", "language": "Java", "is_fork": false, "fork_count": 148, "stargazer_count": 652, "size": 2223, "license": "licensed"}}