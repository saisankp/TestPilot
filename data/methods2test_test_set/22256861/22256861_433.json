{"test_class": {"identifier": "SstCoefficientLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String expNadirDesc = \"test coefficients nadir\";", "modifier": "private static final", "type": "String", "declarator": "expNadirDesc = \"test coefficients nadir\"", "var_name": "expNadirDesc"}, {"original_string": "private static final String expDualDesc = \"test coefficients dual\";", "modifier": "private static final", "type": "String", "declarator": "expDualDesc = \"test coefficients dual\"", "var_name": "expDualDesc"}, {"original_string": "private SstCoefficientLoader loader;", "modifier": "private", "type": "SstCoefficientLoader", "declarator": "loader", "var_name": "loader"}], "file": "s3tbx-aatsr-sst/src/test/java/org/esa/s3tbx/aatsr/sst/SstCoefficientLoaderTest.java"}, "test_case": {"identifier": "testLoadDescriptionInterface", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadDescriptionInterface() throws IOException {\n        try {\n            loader.getDescription(null);\n            fail(\"IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ignored) {\n        }\n\n        URL nonExistent = createNonExistentUrl();\n\n        String description = loader.getDescription(nonExistent);\n        assertEquals(\"\", description);\n    }", "signature": "void testLoadDescriptionInterface()", "full_signature": "@Test public void testLoadDescriptionInterface()", "class_method_signature": "SstCoefficientLoaderTest.testLoadDescriptionInterface()", "testcase": true, "constructor": false, "invocations": ["getDescription", "fail", "createNonExistentUrl", "getDescription", "assertEquals"]}, "focal_class": {"identifier": "SstCoefficientLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String _descriptionKey = \"description\";", "modifier": "private static final", "type": "String", "declarator": "_descriptionKey = \"description\"", "var_name": "_descriptionKey"}, {"original_string": "private static final String _mapKeyStub = \"map.\";", "modifier": "private static final", "type": "String", "declarator": "_mapKeyStub = \"map.\"", "var_name": "_mapKeyStub"}, {"original_string": "private static final String _aKeyStub = \"a.\";", "modifier": "private static final", "type": "String", "declarator": "_aKeyStub = \"a.\"", "var_name": "_aKeyStub"}, {"original_string": "private static final String _bKeyStub = \"b.\";", "modifier": "private static final", "type": "String", "declarator": "_bKeyStub = \"b.\"", "var_name": "_bKeyStub"}, {"original_string": "private static final String _cKeyStub = \"c.\";", "modifier": "private static final", "type": "String", "declarator": "_cKeyStub = \"c.\"", "var_name": "_cKeyStub"}, {"original_string": "private static final String _dKeyStub = \"d.\";", "modifier": "private static final", "type": "String", "declarator": "_dKeyStub = \"d.\"", "var_name": "_dKeyStub"}, {"original_string": "private static final char[] _separators = new char[]{','};", "modifier": "private static final", "type": "char[]", "declarator": "_separators = new char[]{','}", "var_name": "_separators"}, {"original_string": "private Properties _props;", "modifier": "private", "type": "Properties", "declarator": "_props", "var_name": "_props"}, {"original_string": "private static final int _numACoeffs = 3;", "modifier": "private static final", "type": "int", "declarator": "_numACoeffs = 3", "var_name": "_numACoeffs"}, {"original_string": "private static final int _numBCoeffs = 4;", "modifier": "private static final", "type": "int", "declarator": "_numBCoeffs = 4", "var_name": "_numBCoeffs"}, {"original_string": "private static final int _numCCoeffs = 5;", "modifier": "private static final", "type": "int", "declarator": "_numCCoeffs = 5", "var_name": "_numCCoeffs"}, {"original_string": "private static final int _numDCoeffs = 7;", "modifier": "private static final", "type": "int", "declarator": "_numDCoeffs = 7", "var_name": "_numDCoeffs"}, {"original_string": "private Logger _logger;", "modifier": "private", "type": "Logger", "declarator": "_logger", "var_name": "_logger"}], "methods": [{"identifier": "SstCoefficientLoader", "parameters": "()", "modifiers": "public", "return": "", "signature": " SstCoefficientLoader()", "full_signature": "public  SstCoefficientLoader()", "class_method_signature": "SstCoefficientLoader.SstCoefficientLoader()", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "(URL coeffFile)", "modifiers": "public", "return": "SstCoefficientSet", "signature": "SstCoefficientSet load(URL coeffFile)", "full_signature": "public SstCoefficientSet load(URL coeffFile)", "class_method_signature": "SstCoefficientLoader.load(URL coeffFile)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "(URL coeffFile)", "modifiers": "public", "return": "String", "signature": "String getDescription(URL coeffFile)", "full_signature": "public String getDescription(URL coeffFile)", "class_method_signature": "SstCoefficientLoader.getDescription(URL coeffFile)", "testcase": false, "constructor": false}, {"identifier": "addDescription", "parameters": "(SstCoefficientSet set)", "modifiers": "private", "return": "void", "signature": "void addDescription(SstCoefficientSet set)", "full_signature": "private void addDescription(SstCoefficientSet set)", "class_method_signature": "SstCoefficientLoader.addDescription(SstCoefficientSet set)", "testcase": false, "constructor": false}, {"identifier": "addCoefficients", "parameters": "(SstCoefficientSet set)", "modifiers": "private", "return": "void", "signature": "void addCoefficients(SstCoefficientSet set)", "full_signature": "private void addCoefficients(SstCoefficientSet set)", "class_method_signature": "SstCoefficientLoader.addCoefficients(SstCoefficientSet set)", "testcase": false, "constructor": false}, {"identifier": "loadMapStringToCoefficients", "parameters": "(String map, SstCoefficients coeffs)", "modifiers": "private static", "return": "void", "signature": "void loadMapStringToCoefficients(String map, SstCoefficients coeffs)", "full_signature": "private static void loadMapStringToCoefficients(String map, SstCoefficients coeffs)", "class_method_signature": "SstCoefficientLoader.loadMapStringToCoefficients(String map, SstCoefficients coeffs)", "testcase": false, "constructor": false}, {"identifier": "load_A_ToCoefficients", "parameters": "(String a_values, SstCoefficients coeffs)", "modifiers": "private static", "return": "void", "signature": "void load_A_ToCoefficients(String a_values, SstCoefficients coeffs)", "full_signature": "private static void load_A_ToCoefficients(String a_values, SstCoefficients coeffs)", "class_method_signature": "SstCoefficientLoader.load_A_ToCoefficients(String a_values, SstCoefficients coeffs)", "testcase": false, "constructor": false}, {"identifier": "load_B_ToCoefficients", "parameters": "(String b_values, SstCoefficients coeffs)", "modifiers": "private static", "return": "void", "signature": "void load_B_ToCoefficients(String b_values, SstCoefficients coeffs)", "full_signature": "private static void load_B_ToCoefficients(String b_values, SstCoefficients coeffs)", "class_method_signature": "SstCoefficientLoader.load_B_ToCoefficients(String b_values, SstCoefficients coeffs)", "testcase": false, "constructor": false}, {"identifier": "load_C_ToCoefficients", "parameters": "(String c_values, SstCoefficients coeffs)", "modifiers": "private static", "return": "void", "signature": "void load_C_ToCoefficients(String c_values, SstCoefficients coeffs)", "full_signature": "private static void load_C_ToCoefficients(String c_values, SstCoefficients coeffs)", "class_method_signature": "SstCoefficientLoader.load_C_ToCoefficients(String c_values, SstCoefficients coeffs)", "testcase": false, "constructor": false}, {"identifier": "load_D_ToCoefficients", "parameters": "(String d_values, SstCoefficients coeffs)", "modifiers": "private static", "return": "void", "signature": "void load_D_ToCoefficients(String d_values, SstCoefficients coeffs)", "full_signature": "private static void load_D_ToCoefficients(String d_values, SstCoefficients coeffs)", "class_method_signature": "SstCoefficientLoader.load_D_ToCoefficients(String d_values, SstCoefficients coeffs)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(SstCoefficientSet set)", "modifiers": "private", "return": "void", "signature": "void verify(SstCoefficientSet set)", "full_signature": "private void verify(SstCoefficientSet set)", "class_method_signature": "SstCoefficientLoader.verify(SstCoefficientSet set)", "testcase": false, "constructor": false}], "file": "s3tbx-aatsr-sst/src/main/java/org/esa/s3tbx/aatsr/sst/SstCoefficientLoader.java"}, "focal_method": {"identifier": "getDescription", "parameters": "(URL coeffFile)", "modifiers": "public", "return": "String", "body": "public String getDescription(URL coeffFile) throws IOException {\n        Guardian.assertNotNull(\"coeffFile\", coeffFile);\n        String desc = \"\";\n\n        File file = null;\n        try {\n            file = new File(coeffFile.toURI());\n        } catch (URISyntaxException e) {\n            // ignore\n        }\n\n        if (file != null && file.exists() && file.isFile()) {\n            InputStream inStream = new FileInputStream(file);\n            _props.load(inStream);\n            inStream.close();\n            desc = _props.getProperty(_descriptionKey);\n        }\n\n        return desc;\n    }", "signature": "String getDescription(URL coeffFile)", "full_signature": "public String getDescription(URL coeffFile)", "class_method_signature": "SstCoefficientLoader.getDescription(URL coeffFile)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "toURI", "exists", "isFile", "load", "close", "getProperty"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}