{"test_class": {"identifier": "SshUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/hms-switch-plugin/src/test/java/com/vmware/vrack/hms/common/util/SshUtilTest.java"}, "test_case": {"identifier": "testAddHostKeyInKnownHostFile", "parameters": "()", "modifiers": "@Test( expected = JSchException.class ) public", "return": "void", "body": "@Test( expected = JSchException.class )\n    public void testAddHostKeyInKnownHostFile()\n        throws JSchException\n    {\n        Properties sessionConfig = new Properties();\n        sessionConfig.put( \"StrictHostKeyChecking\", \"no\" );\n        Session session = SshUtil.getSessionObject( \"username\", \"password\", \"localhost\", 22, sessionConfig );\n        final String userHomeDir = System.getProperty( \"user.home\" );\n        final String knownHostsFile = String.format( \"%s%s.ssh/known_hosts\", userHomeDir, File.separator );\n        boolean hostKeyAdded = SshUtil.addHostKeyInKnownHostFile( session, knownHostsFile );\n        assertTrue( hostKeyAdded );\n    }", "signature": "void testAddHostKeyInKnownHostFile()", "full_signature": "@Test( expected = JSchException.class ) public void testAddHostKeyInKnownHostFile()", "class_method_signature": "SshUtilTest.testAddHostKeyInKnownHostFile()", "testcase": true, "constructor": false, "invocations": ["put", "getSessionObject", "getProperty", "format", "addHostKeyInKnownHostFile", "assertTrue"]}, "focal_class": {"identifier": "SshUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger( SshUtil.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( SshUtil.class )", "var_name": "logger"}], "methods": [{"identifier": "maskedPasswordString", "parameters": "( String command )", "modifiers": "public static", "return": "String", "signature": "String maskedPasswordString( String command )", "full_signature": "public static String maskedPasswordString( String command )", "class_method_signature": "SshUtil.maskedPasswordString( String command )", "testcase": false, "constructor": false}, {"identifier": "getSessionObject", "parameters": "( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "modifiers": "public static", "return": "Session", "signature": "Session getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "full_signature": "public static Session getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "class_method_signature": "SshUtil.getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "testcase": false, "constructor": false}, {"identifier": "executeCommand", "parameters": "( Session sessionObj, String command )", "modifiers": "public static", "return": "String", "signature": "String executeCommand( Session sessionObj, String command )", "full_signature": "public static String executeCommand( Session sessionObj, String command )", "class_method_signature": "SshUtil.executeCommand( Session sessionObj, String command )", "testcase": false, "constructor": false}, {"identifier": "executeCommandEnhanced", "parameters": "( Session session, String command )", "modifiers": "public static", "return": "SshExecResult", "signature": "SshExecResult executeCommandEnhanced( Session session, String command )", "full_signature": "public static SshExecResult executeCommandEnhanced( Session session, String command )", "class_method_signature": "SshUtil.executeCommandEnhanced( Session session, String command )", "testcase": false, "constructor": false}, {"identifier": "executeCommandNoResponse", "parameters": "( Session sessionObj, String command )", "modifiers": "public static", "return": "void", "signature": "void executeCommandNoResponse( Session sessionObj, String command )", "full_signature": "public static void executeCommandNoResponse( Session sessionObj, String command )", "class_method_signature": "SshUtil.executeCommandNoResponse( Session sessionObj, String command )", "testcase": false, "constructor": false}, {"identifier": "upload", "parameters": "( Session session, InputStream localInputStream, String remoteFile )", "modifiers": "public static", "return": "void", "signature": "void upload( Session session, InputStream localInputStream, String remoteFile )", "full_signature": "public static void upload( Session session, InputStream localInputStream, String remoteFile )", "class_method_signature": "SshUtil.upload( Session session, InputStream localInputStream, String remoteFile )", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "( Session session, OutputStream localOutputStream, String remoteFile )", "modifiers": "public static", "return": "void", "signature": "void download( Session session, OutputStream localOutputStream, String remoteFile )", "full_signature": "public static void download( Session session, OutputStream localOutputStream, String remoteFile )", "class_method_signature": "SshUtil.download( Session session, OutputStream localOutputStream, String remoteFile )", "testcase": false, "constructor": false}, {"identifier": "lstat", "parameters": "( Session session, String remoteFile )", "modifiers": "public static", "return": "SftpATTRS", "signature": "SftpATTRS lstat( Session session, String remoteFile )", "full_signature": "public static SftpATTRS lstat( Session session, String remoteFile )", "class_method_signature": "SshUtil.lstat( Session session, String remoteFile )", "testcase": false, "constructor": false}, {"identifier": "executeCommand", "parameters": "( Session sessionObj, String[] commands )", "modifiers": "public static", "return": "String", "signature": "String executeCommand( Session sessionObj, String[] commands )", "full_signature": "public static String executeCommand( Session sessionObj, String[] commands )", "class_method_signature": "SshUtil.executeCommand( Session sessionObj, String[] commands )", "testcase": false, "constructor": false}, {"identifier": "getHostKeyRepository", "parameters": "( String knownHostFile )", "modifiers": "private static", "return": "HostKeyRepository", "signature": "HostKeyRepository getHostKeyRepository( String knownHostFile )", "full_signature": "private static HostKeyRepository getHostKeyRepository( String knownHostFile )", "class_method_signature": "SshUtil.getHostKeyRepository( String knownHostFile )", "testcase": false, "constructor": false}, {"identifier": "addHostKeyInKnownHostFile", "parameters": "( Session session, String knownHostsFile )", "modifiers": "public static", "return": "boolean", "signature": "boolean addHostKeyInKnownHostFile( Session session, String knownHostsFile )", "full_signature": "public static boolean addHostKeyInKnownHostFile( Session session, String knownHostsFile )", "class_method_signature": "SshUtil.addHostKeyInKnownHostFile( Session session, String knownHostsFile )", "testcase": false, "constructor": false}], "file": "modules/hms-switch-plugin/src/main/java/com/vmware/vrack/hms/common/util/SshUtil.java"}, "focal_method": {"identifier": "addHostKeyInKnownHostFile", "parameters": "( Session session, String knownHostsFile )", "modifiers": "public static", "return": "boolean", "body": "public static boolean addHostKeyInKnownHostFile( Session session, String knownHostsFile )\n        throws JSchException\n    {\n        if ( session == null )\n        {\n            logger.warn( \"In addHostKeyInKnownHostFile, Session is null.\" );\n            return false;\n        }\n        if ( knownHostsFile == null || knownHostsFile.isEmpty() )\n        {\n            logger.warn( \"In addHostKeyInKnownHostFile, knownHostFile is either null or empty.\" );\n            return false;\n        }\n        try\n        {\n            session.connect();\n        }\n        catch ( JSchException e )\n        {\n            logger.error( \"In addHostKeyInKnownHostFile, error while SSH connection to Host '{}'.\", session.getHost(),\n                          e );\n            throw e;\n        }\n        finally\n        {\n            if ( session != null && session.isConnected() )\n            {\n                session.disconnect();\n            }\n        }\n        HostKeyRepository hostKeyRepository = null;\n        try\n        {\n            hostKeyRepository = getHostKeyRepository( knownHostsFile );\n        }\n        catch ( JSchException e )\n        {\n            logger.error( \"In addHostKeyInKnownHostFile, error while getting Host Key Repository \"\n                + \"from the known hosts file '{}'.\", knownHostsFile, e );\n            throw e;\n        }\n\n        // get host key of the host\n        HostKey hostKey = session.getHostKey();\n        if ( hostKeyRepository != null )\n        {\n            if ( hostKeyRepository.check( hostKey.getHost(),\n                                          hostKey.getKey().getBytes() ) == HostKeyRepository.NOT_INCLUDED )\n            {\n                // Add host key\n                hostKeyRepository.add( hostKey, null );\n                logger.debug( \"In addHostKeyInKnownHostFile, Host key added for host {}.\", hostKey.getHost() );\n            }\n            else\n            {\n                logger.debug( \"In addHostKeyInKnownHostFile, SSH key already exists for host {} \"\n                    + \"in the known hosts file '{}'.\", hostKey.getHost(), knownHostsFile );\n            }\n            return true;\n        }\n        return false;\n    }", "signature": "boolean addHostKeyInKnownHostFile( Session session, String knownHostsFile )", "full_signature": "public static boolean addHostKeyInKnownHostFile( Session session, String knownHostsFile )", "class_method_signature": "SshUtil.addHostKeyInKnownHostFile( Session session, String knownHostsFile )", "testcase": false, "constructor": false, "invocations": ["warn", "isEmpty", "warn", "connect", "error", "getHost", "isConnected", "disconnect", "getHostKeyRepository", "error", "getHostKey", "check", "getHost", "getBytes", "getKey", "add", "debug", "getHost", "debug", "getHost"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}