{"test_class": {"identifier": "ConsolidationScoredPreferenceForSmallHostsTest", "superclass": "extends ConsolidationAlgorithmsTest", "interfaces": "", "fields": [{"original_string": "private ConsolidationScoredPreferenceForSmallHosts spyAlgorithm;", "modifier": "private", "type": "ConsolidationScoredPreferenceForSmallHosts", "declarator": "spyAlgorithm", "var_name": "spyAlgorithm"}], "file": "autonomic-administration-algorithms/src/test/java/br/com/autonomiccs/autonomic/administration/algorithms/impl/ConsolidationScoredPreferenceForSmallHostsTest.java"}, "test_case": {"identifier": "calculateHostScoreTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void calculateHostScoreTest() {\n        List<HostResources> hosts = createHosts();\n        HostProfile hostProfile = Mockito.mock(HostProfile.class);\n        Mockito.when(hostProfile.getCpuSpeedProfile()).thenReturn(5.0);\n        Mockito.when(hostProfile.getCpusProfile()).thenReturn(2.0);\n        Mockito.when(hostProfile.getMemoryProfile()).thenReturn(1.0);\n\n        HostProfiler spyProfiler = Mockito.spy(new HostProfiler(hosts));\n        spyAlgorithm.profiler = spyProfiler;\n        Mockito.doReturn(hostProfile).when(spyProfiler).hostVMsResourceProportion(Mockito.any(HostResources.class));\n        double result = spyAlgorithm.calculateHostScore(hosts.get(0));\n\n        Assert.assertEquals(10.0, result, 0.0);\n        Mockito.verify(spyProfiler).hostVMsResourceProportion(Mockito.any(HostResources.class));\n        Mockito.verify(hostProfile).getCpuSpeedProfile();\n        Mockito.verify(hostProfile).getCpusProfile();\n        Mockito.verify(hostProfile).getMemoryProfile();\n    }", "signature": "void calculateHostScoreTest()", "full_signature": "@Test public void calculateHostScoreTest()", "class_method_signature": "ConsolidationScoredPreferenceForSmallHostsTest.calculateHostScoreTest()", "testcase": true, "constructor": false, "invocations": ["createHosts", "mock", "thenReturn", "when", "getCpuSpeedProfile", "thenReturn", "when", "getCpusProfile", "thenReturn", "when", "getMemoryProfile", "spy", "hostVMsResourceProportion", "when", "doReturn", "any", "calculateHostScore", "get", "assertEquals", "hostVMsResourceProportion", "verify", "any", "getCpuSpeedProfile", "verify", "getCpusProfile", "verify", "getMemoryProfile", "verify"]}, "focal_class": {"identifier": "ConsolidationScoredPreferenceForSmallHosts", "superclass": "extends ConsolidationAlgorithmBase", "interfaces": "", "fields": [{"original_string": "protected final static double BYTES_TO_MEGA_BYTES_AS_DOUBLE = ConsolidationAlgorithmBase.BYTES_TO_MEGA_BYTES;", "modifier": "protected final static", "type": "double", "declarator": "BYTES_TO_MEGA_BYTES_AS_DOUBLE = ConsolidationAlgorithmBase.BYTES_TO_MEGA_BYTES", "var_name": "BYTES_TO_MEGA_BYTES_AS_DOUBLE"}, {"original_string": "protected HostProfiler profiler;", "modifier": "protected", "type": "HostProfiler", "declarator": "profiler", "var_name": "profiler"}, {"original_string": "private HostUpwardComparator hostUpwardScoreComparator = new HostUpwardComparator();", "modifier": "private", "type": "HostUpwardComparator", "declarator": "hostUpwardScoreComparator = new HostUpwardComparator()", "var_name": "hostUpwardScoreComparator"}, {"original_string": "@SuppressWarnings(\"unchecked\")\n    private Comparator<HostResources> reversedComparator = ComparatorUtils.reversedComparator(hostUpwardScoreComparator);", "modifier": "@SuppressWarnings(\"unchecked\")\n    private", "type": "Comparator<HostResources>", "declarator": "reversedComparator = ComparatorUtils.reversedComparator(hostUpwardScoreComparator)", "var_name": "reversedComparator"}], "methods": [{"identifier": "rankHosts", "parameters": "(List<HostResources> hostsList)", "modifiers": "@Override public", "return": "List<HostResources>", "signature": "List<HostResources> rankHosts(List<HostResources> hostsList)", "full_signature": "@Override public List<HostResources> rankHosts(List<HostResources> hostsList)", "class_method_signature": "ConsolidationScoredPreferenceForSmallHosts.rankHosts(List<HostResources> hostsList)", "testcase": false, "constructor": false}, {"identifier": "sortHosts", "parameters": "(List<HostResources> hosts)", "modifiers": "protected", "return": "void", "signature": "void sortHosts(List<HostResources> hosts)", "full_signature": "protected void sortHosts(List<HostResources> hosts)", "class_method_signature": "ConsolidationScoredPreferenceForSmallHosts.sortHosts(List<HostResources> hosts)", "testcase": false, "constructor": false}, {"identifier": "sortHostsUpwardScore", "parameters": "(List<HostResources> hosts)", "modifiers": "protected", "return": "void", "signature": "void sortHostsUpwardScore(List<HostResources> hosts)", "full_signature": "protected void sortHostsUpwardScore(List<HostResources> hosts)", "class_method_signature": "ConsolidationScoredPreferenceForSmallHosts.sortHostsUpwardScore(List<HostResources> hosts)", "testcase": false, "constructor": false}, {"identifier": "sortHostsDownwardScore", "parameters": "(List<HostResources> hosts)", "modifiers": "protected", "return": "void", "signature": "void sortHostsDownwardScore(List<HostResources> hosts)", "full_signature": "protected void sortHostsDownwardScore(List<HostResources> hosts)", "class_method_signature": "ConsolidationScoredPreferenceForSmallHosts.sortHostsDownwardScore(List<HostResources> hosts)", "testcase": false, "constructor": false}, {"identifier": "setEachHostScore", "parameters": "(List<HostResources> hosts)", "modifiers": "protected", "return": "List<HostResources>", "signature": "List<HostResources> setEachHostScore(List<HostResources> hosts)", "full_signature": "protected List<HostResources> setEachHostScore(List<HostResources> hosts)", "class_method_signature": "ConsolidationScoredPreferenceForSmallHosts.setEachHostScore(List<HostResources> hosts)", "testcase": false, "constructor": false}, {"identifier": "calculateHostScore", "parameters": "(HostResources host)", "modifiers": "protected", "return": "double", "signature": "double calculateHostScore(HostResources host)", "full_signature": "protected double calculateHostScore(HostResources host)", "class_method_signature": "ConsolidationScoredPreferenceForSmallHosts.calculateHostScore(HostResources host)", "testcase": false, "constructor": false}, {"identifier": "rankHostToPowerOff", "parameters": "(List<HostResources> idleHosts)", "modifiers": "@Override public", "return": "List<HostResources>", "signature": "List<HostResources> rankHostToPowerOff(List<HostResources> idleHosts)", "full_signature": "@Override public List<HostResources> rankHostToPowerOff(List<HostResources> idleHosts)", "class_method_signature": "ConsolidationScoredPreferenceForSmallHosts.rankHostToPowerOff(List<HostResources> idleHosts)", "testcase": false, "constructor": false}, {"identifier": "internalCanPowerOffHost", "parameters": "(HostResources hostToPowerOff, CloudResources cloudResources)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean internalCanPowerOffHost(HostResources hostToPowerOff, CloudResources cloudResources)", "full_signature": "@Override protected boolean internalCanPowerOffHost(HostResources hostToPowerOff, CloudResources cloudResources)", "class_method_signature": "ConsolidationScoredPreferenceForSmallHosts.internalCanPowerOffHost(HostResources hostToPowerOff, CloudResources cloudResources)", "testcase": false, "constructor": false}, {"identifier": "getCloudExpetedMemoryUsagePercentageAfterHostShutdown", "parameters": "(HostResources hostToPowerOff, CloudResources cloudResources)", "modifiers": "protected", "return": "double", "signature": "double getCloudExpetedMemoryUsagePercentageAfterHostShutdown(HostResources hostToPowerOff, CloudResources cloudResources)", "full_signature": "protected double getCloudExpetedMemoryUsagePercentageAfterHostShutdown(HostResources hostToPowerOff, CloudResources cloudResources)", "class_method_signature": "ConsolidationScoredPreferenceForSmallHosts.getCloudExpetedMemoryUsagePercentageAfterHostShutdown(HostResources hostToPowerOff, CloudResources cloudResources)", "testcase": false, "constructor": false}, {"identifier": "getCloudExpetedCpuUsageAfterHostShutdown", "parameters": "(HostResources hostToPowerOff, CloudResources cloudResources)", "modifiers": "protected", "return": "double", "signature": "double getCloudExpetedCpuUsageAfterHostShutdown(HostResources hostToPowerOff, CloudResources cloudResources)", "full_signature": "protected double getCloudExpetedCpuUsageAfterHostShutdown(HostResources hostToPowerOff, CloudResources cloudResources)", "class_method_signature": "ConsolidationScoredPreferenceForSmallHosts.getCloudExpetedCpuUsageAfterHostShutdown(HostResources hostToPowerOff, CloudResources cloudResources)", "testcase": false, "constructor": false}, {"identifier": "getCloudCpuCapacity", "parameters": "(CloudResources cloudResources)", "modifiers": "protected", "return": "float", "signature": "float getCloudCpuCapacity(CloudResources cloudResources)", "full_signature": "protected float getCloudCpuCapacity(CloudResources cloudResources)", "class_method_signature": "ConsolidationScoredPreferenceForSmallHosts.getCloudCpuCapacity(CloudResources cloudResources)", "testcase": false, "constructor": false}, {"identifier": "internalCanPowerOffAnotherHostInCloud", "parameters": "(CloudResources cloudResources)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean internalCanPowerOffAnotherHostInCloud(CloudResources cloudResources)", "full_signature": "@Override protected boolean internalCanPowerOffAnotherHostInCloud(CloudResources cloudResources)", "class_method_signature": "ConsolidationScoredPreferenceForSmallHosts.internalCanPowerOffAnotherHostInCloud(CloudResources cloudResources)", "testcase": false, "constructor": false}, {"identifier": "cloudMemoryUsagePercentage", "parameters": "(CloudResources cloudResources)", "modifiers": "protected", "return": "double", "signature": "double cloudMemoryUsagePercentage(CloudResources cloudResources)", "full_signature": "protected double cloudMemoryUsagePercentage(CloudResources cloudResources)", "class_method_signature": "ConsolidationScoredPreferenceForSmallHosts.cloudMemoryUsagePercentage(CloudResources cloudResources)", "testcase": false, "constructor": false}, {"identifier": "cloudCpuUsagePercentage", "parameters": "(CloudResources cloudResources)", "modifiers": "protected", "return": "double", "signature": "double cloudCpuUsagePercentage(CloudResources cloudResources)", "full_signature": "protected double cloudCpuUsagePercentage(CloudResources cloudResources)", "class_method_signature": "ConsolidationScoredPreferenceForSmallHosts.cloudCpuUsagePercentage(CloudResources cloudResources)", "testcase": false, "constructor": false}], "file": "autonomic-administration-algorithms/src/main/java/br/com/autonomiccs/autonomic/administration/algorithms/impl/ConsolidationScoredPreferenceForSmallHosts.java"}, "focal_method": {"identifier": "calculateHostScore", "parameters": "(HostResources host)", "modifiers": "protected", "return": "double", "body": "protected double calculateHostScore(HostResources host) {\n        HostProfile hostProfile = profiler.hostVMsResourceProportion(host);\n        return hostProfile.getCpuSpeedProfile() * hostProfile.getCpusProfile() * hostProfile.getMemoryProfile();\n    }", "signature": "double calculateHostScore(HostResources host)", "full_signature": "protected double calculateHostScore(HostResources host)", "class_method_signature": "ConsolidationScoredPreferenceForSmallHosts.calculateHostScore(HostResources host)", "testcase": false, "constructor": false, "invocations": ["hostVMsResourceProportion", "getCpuSpeedProfile", "getCpusProfile", "getMemoryProfile"]}, "repository": {"repo_id": 56359101, "url": "https://github.com/Autonomiccs/autonomiccs-platform", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 944, "license": "licensed"}}