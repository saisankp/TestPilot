{"test_class": {"identifier": "EolBufferedReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_STRING = \"line1\\nline2\\rline3\\r\\n\\n\";", "modifier": "private static final", "type": "String", "declarator": "TEST_STRING = \"line1\\nline2\\rline3\\r\\n\\n\"", "var_name": "TEST_STRING"}], "file": "butterfly-utilities/src/test/java/com/paypal/butterfly/utilities/operations/EolBufferedReaderTest.java"}, "test_case": {"identifier": "readLineKeepStartEOLTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void readLineKeepStartEOLTest() throws IOException {\n        EolBufferedReader reader = null;\n        try {\n            reader = new EolBufferedReader(new BufferedReader(new StringReader(TEST_STRING)));\n\n            String line1 = reader.readLineKeepStartEol();\n            String line2 = reader.readLineKeepStartEol();\n            String line3 = reader.readLineKeepStartEol();\n            String line4 = reader.readLineKeepStartEol();\n            String line5 = reader.readLineKeepStartEol();\n            String line6 = reader.readLineKeepStartEol();\n\n            Assert.assertFalse(startsWithEol(line1));\n            Assert.assertFalse(endsWithEol(line1));\n            Assert.assertEquals(removeEol(line1), \"line1\");\n            Assert.assertEquals(getStartEol(line1), null);\n            Assert.assertEquals(getEndEol(line1), null);\n\n            Assert.assertTrue(startsWithEol(line2));\n            Assert.assertFalse(endsWithEol(line2));\n            Assert.assertEquals(removeEol(line2), \"line2\");\n            Assert.assertEquals(getStartEol(line2), \"\\n\");\n            Assert.assertEquals(getEndEol(line2), null);\n\n            Assert.assertTrue(startsWithEol(line3));\n            Assert.assertFalse(endsWithEol(line3));\n            Assert.assertEquals(removeEol(line3), \"line3\");\n            Assert.assertEquals(getStartEol(line3), \"\\r\");\n            Assert.assertEquals(getEndEol(line3), null);\n\n            Assert.assertTrue(startsWithEol(line4));\n            Assert.assertTrue(endsWithEol(line4));\n            Assert.assertEquals(removeEol(line4), \"\");\n            Assert.assertEquals(getStartEol(line4), \"\\r\\n\");\n            Assert.assertEquals(getEndEol(line4), \"\\r\\n\");\n\n\n            Assert.assertTrue(startsWithEol(line5));\n            Assert.assertTrue(endsWithEol(line5));\n            Assert.assertEquals(removeEol(line5), \"\");\n            Assert.assertEquals(getStartEol(line5), \"\\n\");\n            Assert.assertEquals(getEndEol(line5), \"\\n\");\n\n            Assert.assertNull(line6);\n        } finally {\n            if(reader != null) reader.close();\n        }\n    }", "signature": "void readLineKeepStartEOLTest()", "full_signature": "@Test public void readLineKeepStartEOLTest()", "class_method_signature": "EolBufferedReaderTest.readLineKeepStartEOLTest()", "testcase": true, "constructor": false, "invocations": ["readLineKeepStartEol", "readLineKeepStartEol", "readLineKeepStartEol", "readLineKeepStartEol", "readLineKeepStartEol", "readLineKeepStartEol", "assertFalse", "startsWithEol", "assertFalse", "endsWithEol", "assertEquals", "removeEol", "assertEquals", "getStartEol", "assertEquals", "getEndEol", "assertTrue", "startsWithEol", "assertFalse", "endsWithEol", "assertEquals", "removeEol", "assertEquals", "getStartEol", "assertEquals", "getEndEol", "assertTrue", "startsWithEol", "assertFalse", "endsWithEol", "assertEquals", "removeEol", "assertEquals", "getStartEol", "assertEquals", "getEndEol", "assertTrue", "startsWithEol", "assertTrue", "endsWithEol", "assertEquals", "removeEol", "assertEquals", "getStartEol", "assertEquals", "getEndEol", "assertTrue", "startsWithEol", "assertTrue", "endsWithEol", "assertEquals", "removeEol", "assertEquals", "getStartEol", "assertEquals", "getEndEol", "assertNull", "close"]}, "focal_class": {"identifier": "EolBufferedReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BufferedReader reader;", "modifier": "private", "type": "BufferedReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private Object monitor = new Object();", "modifier": "private", "type": "Object", "declarator": "monitor = new Object()", "var_name": "monitor"}], "methods": [{"identifier": "EolBufferedReader", "parameters": "(BufferedReader bufferedReader)", "modifiers": "public", "return": "", "signature": " EolBufferedReader(BufferedReader bufferedReader)", "full_signature": "public  EolBufferedReader(BufferedReader bufferedReader)", "class_method_signature": "EolBufferedReader.EolBufferedReader(BufferedReader bufferedReader)", "testcase": false, "constructor": true}, {"identifier": "setBufferedReader", "parameters": "(BufferedReader bufferedReader)", "modifiers": "private", "return": "void", "signature": "void setBufferedReader(BufferedReader bufferedReader)", "full_signature": "private void setBufferedReader(BufferedReader bufferedReader)", "class_method_signature": "EolBufferedReader.setBufferedReader(BufferedReader bufferedReader)", "testcase": false, "constructor": false}, {"identifier": "readLineKeepEol", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String readLineKeepEol()", "full_signature": "public String readLineKeepEol()", "class_method_signature": "EolBufferedReader.readLineKeepEol()", "testcase": false, "constructor": false}, {"identifier": "readLineKeepStartEol", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String readLineKeepStartEol()", "full_signature": "public String readLineKeepStartEol()", "class_method_signature": "EolBufferedReader.readLineKeepStartEol()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "EolBufferedReader.close()", "testcase": false, "constructor": false}], "file": "butterfly-utilities/src/main/java/com/paypal/butterfly/utilities/operations/EolBufferedReader.java"}, "focal_method": {"identifier": "readLineKeepStartEol", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String readLineKeepStartEol() throws IOException {\n        StringBuilder stringBuilder = new StringBuilder();\n\n        synchronized (monitor) {\n            int read = reader.read();\n            if (read == -1) {\n                return null;\n            }\n            stringBuilder.append((char) read);\n            if (read == '\\r') {\n                read = reader.read();\n                if (read == -1) {\n                    return stringBuilder.toString();\n                }\n                stringBuilder.append((char) read);\n            }\n            while(true) {\n                reader.mark(1);\n                read = reader.read();\n                if (read == -1) {\n                    break;\n                }\n                if (read == '\\n' || read == '\\r') {\n                    reader.reset();\n                    break;\n                }\n                stringBuilder.append((char) read);\n            }\n        }\n\n        return stringBuilder.toString();\n    }", "signature": "String readLineKeepStartEol()", "full_signature": "public String readLineKeepStartEol()", "class_method_signature": "EolBufferedReader.readLineKeepStartEol()", "testcase": false, "constructor": false, "invocations": ["read", "append", "read", "toString", "append", "mark", "read", "reset", "append", "toString"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}