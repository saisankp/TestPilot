{"test_class": {"identifier": "PreparationExportStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ObjectMapper mapper = new ObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "@InjectMocks\n    private PreparationExportStrategy strategy;", "modifier": "@InjectMocks\n    private", "type": "PreparationExportStrategy", "declarator": "strategy", "var_name": "strategy"}, {"original_string": "@Mock\n    private TransformerFactory factory;", "modifier": "@Mock\n    private", "type": "TransformerFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "@Mock\n    private FormatRegistrationService formatRegistrationService;", "modifier": "@Mock\n    private", "type": "FormatRegistrationService", "declarator": "formatRegistrationService", "var_name": "formatRegistrationService"}, {"original_string": "@Mock\n    private ApplicationContext applicationContext;", "modifier": "@Mock\n    private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "@Mock\n    private SecurityProxy securityProxy;", "modifier": "@Mock\n    private", "type": "SecurityProxy", "declarator": "securityProxy", "var_name": "securityProxy"}, {"original_string": "@Mock\n    private CacheKeyGenerator cacheKeyGenerator;", "modifier": "@Mock\n    private", "type": "CacheKeyGenerator", "declarator": "cacheKeyGenerator", "var_name": "cacheKeyGenerator"}, {"original_string": "@Mock\n    private ContentCache contentCache;", "modifier": "@Mock\n    private", "type": "ContentCache", "declarator": "contentCache", "var_name": "contentCache"}, {"original_string": "@Mock\n    private Transformer transformer;", "modifier": "@Mock\n    private", "type": "Transformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "@Mock\n    private PreparationSummaryGet preparationSummaryGet;", "modifier": "@Mock\n    private", "type": "PreparationSummaryGet", "declarator": "preparationSummaryGet", "var_name": "preparationSummaryGet"}, {"original_string": "@Mock\n    private DatasetClient datasetClient;", "modifier": "@Mock\n    private", "type": "DatasetClient", "declarator": "datasetClient", "var_name": "datasetClient"}], "file": "dataprep-transformation/src/test/java/org/talend/dataprep/transformation/service/export/PreparationExportStrategyTest.java"}, "test_case": {"identifier": "shouldUsedHeadPreparation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUsedHeadPreparation() throws IOException {\n        // Given\n        final ExportParameters parameters = new ExportParameters();\n        parameters.setExportType(\"JSON\");\n        parameters.setPreparationId(\"prep-1234\");\n        parameters.setStepId(\"head\");\n\n        final PreparationDTO preparation = new PreparationDTO();\n        preparation.getSteps().add(Step.ROOT_STEP.id());\n        preparation.setId(\"prep-1234\");\n        preparation.setHeadId(\"head\");\n        configurePreparation(preparation, \"prep-1234\", \"head\");\n\n        // When\n        final StreamingResponseBody body = strategy.execute(parameters);\n        body.writeTo(new NullOutputStream());\n\n        // Then\n        final ArgumentCaptor<Configuration> captor = ArgumentCaptor.forClass(Configuration.class);\n        verify(transformer).buildExecutable(any(), captor.capture());\n        assertEquals(\"prep-1234\", captor.getValue().getPreparationId());\n        assertEquals(\"head\", captor.getValue().getPreparation().getHeadId());\n    }", "signature": "void shouldUsedHeadPreparation()", "full_signature": "@Test public void shouldUsedHeadPreparation()", "class_method_signature": "PreparationExportStrategyTest.shouldUsedHeadPreparation()", "testcase": true, "constructor": false, "invocations": ["setExportType", "setPreparationId", "setStepId", "add", "getSteps", "id", "setId", "setHeadId", "configurePreparation", "execute", "writeTo", "forClass", "buildExecutable", "verify", "any", "capture", "assertEquals", "getPreparationId", "getValue", "assertEquals", "getHeadId", "getPreparation", "getValue"]}, "focal_class": {"identifier": "PreparationExportStrategy", "superclass": "extends BaseSampleExportStrategy", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PreparationExportStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PreparationExportStrategy.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private CacheKeyGenerator cacheKeyGenerator;", "modifier": "@Autowired\n    private", "type": "CacheKeyGenerator", "declarator": "cacheKeyGenerator", "var_name": "cacheKeyGenerator"}, {"original_string": "@Autowired\n    private SecurityProxy securityProxy;", "modifier": "@Autowired\n    private", "type": "SecurityProxy", "declarator": "securityProxy", "var_name": "securityProxy"}, {"original_string": "@Autowired\n    private DatasetClient datasetClient;", "modifier": "@Autowired\n    private", "type": "DatasetClient", "declarator": "datasetClient", "var_name": "datasetClient"}], "methods": [{"identifier": "test", "parameters": "(final ExportParameters parameters)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean test(final ExportParameters parameters)", "full_signature": "@Override public boolean test(final ExportParameters parameters)", "class_method_signature": "PreparationExportStrategy.test(final ExportParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final ExportParameters parameters)", "modifiers": "@Override public", "return": "StreamingResponseBody", "signature": "StreamingResponseBody execute(final ExportParameters parameters)", "full_signature": "@Override public StreamingResponseBody execute(final ExportParameters parameters)", "class_method_signature": "PreparationExportStrategy.execute(final ExportParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "performPreparation", "parameters": "(final ExportParameters parameters, final OutputStream outputStream)", "modifiers": "public", "return": "void", "signature": "void performPreparation(final ExportParameters parameters, final OutputStream outputStream)", "full_signature": "public void performPreparation(final ExportParameters parameters, final OutputStream outputStream)", "class_method_signature": "PreparationExportStrategy.performPreparation(final ExportParameters parameters, final OutputStream outputStream)", "testcase": false, "constructor": false}], "file": "dataprep-transformation/src/main/java/org/talend/dataprep/transformation/service/export/PreparationExportStrategy.java"}, "focal_method": {"identifier": "execute", "parameters": "(final ExportParameters parameters)", "modifiers": "@Override public", "return": "StreamingResponseBody", "body": "@Override\n    public StreamingResponseBody execute(final ExportParameters parameters) {\n        final String formatName = parameters.getExportType();\n        final ExportFormat format = getFormat(formatName);\n        ExportUtils.setExportHeaders(parameters.getExportName(), //\n                parameters.getArguments().get(ExportFormat.PREFIX + CSVFormat.ParametersCSV.ENCODING), //\n                format);\n\n        return outputStream -> performPreparation(parameters, outputStream);\n    }", "signature": "StreamingResponseBody execute(final ExportParameters parameters)", "full_signature": "@Override public StreamingResponseBody execute(final ExportParameters parameters)", "class_method_signature": "PreparationExportStrategy.execute(final ExportParameters parameters)", "testcase": false, "constructor": false, "invocations": ["getExportType", "getFormat", "setExportHeaders", "getExportName", "get", "getArguments", "performPreparation"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}