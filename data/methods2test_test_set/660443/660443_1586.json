{"test_class": {"identifier": "ChiPathDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/ChiPathDescriptorTest.java"}, "test_case": {"identifier": "testDan81", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDan81() throws Exception {\n        IAtomContainer mol = new AtomContainer();\n        IAtom a1 = mol.getBuilder().newInstance(IAtom.class, \"C\");\n        a1.setPoint2d(new Point2d(0.0, 1.5));\n        mol.addAtom(a1);\n        IAtom a2 = mol.getBuilder().newInstance(IAtom.class, \"C\");\n        a2.setPoint2d(new Point2d(0.0, 0.0));\n        mol.addAtom(a2);\n        IAtom a3 = mol.getBuilder().newInstance(IAtom.class, \"C\");\n        a3.setPoint2d(new Point2d(-1.4265847744427305, -0.46352549156242084));\n        mol.addAtom(a3);\n        IAtom a4 = mol.getBuilder().newInstance(IAtom.class, \"C\");\n        a4.setPoint2d(new Point2d(-2.3082626528814396, 0.7500000000000002));\n        mol.addAtom(a4);\n        IAtom a5 = mol.getBuilder().newInstance(IAtom.class, \"S\");\n        a5.setPoint2d(new Point2d(-1.42658477444273, 1.9635254915624212));\n        mol.addAtom(a5);\n        IBond b1 = mol.getBuilder().newInstance(IBond.class, a2, a1, IBond.Order.DOUBLE);\n        mol.addBond(b1);\n        IBond b2 = mol.getBuilder().newInstance(IBond.class, a3, a2, IBond.Order.SINGLE);\n        mol.addBond(b2);\n        IBond b3 = mol.getBuilder().newInstance(IBond.class, a4, a3, IBond.Order.DOUBLE);\n        mol.addBond(b3);\n        IBond b4 = mol.getBuilder().newInstance(IBond.class, a5, a4, IBond.Order.SINGLE);\n        mol.addBond(b4);\n        IBond b5 = mol.getBuilder().newInstance(IBond.class, a5, a1, IBond.Order.SINGLE);\n        mol.addBond(b5);\n\n        DoubleArrayResult ret = (DoubleArrayResult) descriptor.calculate(mol).getValue();\n\n        Assert.assertEquals(3.5355, ret.get(0), 0.0001);\n        Assert.assertEquals(2.5000, ret.get(1), 0.0001);\n        Assert.assertEquals(1.7678, ret.get(2), 0.0001);\n        Assert.assertEquals(1.2500, ret.get(3), 0.0001);\n\n        Assert.assertEquals(3.5341, ret.get(8), 0.0001);\n        Assert.assertEquals(2.4142, ret.get(9), 0.0001);\n        Assert.assertEquals(1.6096, ret.get(10), 0.0001);\n        Assert.assertEquals(1.0539, ret.get(11), 0.0001);\n    }", "signature": "void testDan81()", "full_signature": "@Test public void testDan81()", "class_method_signature": "ChiPathDescriptorTest.testDan81()", "testcase": true, "constructor": false, "invocations": ["newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "getValue", "calculate", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "ChiPathDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private SmilesParser sp;", "modifier": "private", "type": "SmilesParser", "declarator": "sp", "var_name": "sp"}], "methods": [{"identifier": "ChiPathDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " ChiPathDescriptor()", "full_signature": "public  ChiPathDescriptor()", "class_method_signature": "ChiPathDescriptor.ChiPathDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "ChiPathDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "ChiPathDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "ChiPathDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "ChiPathDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "ChiPathDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "ChiPathDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "ChiPathDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "ChiPathDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "ChiPathDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "order0", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "List<List<Integer>>", "signature": "List<List<Integer>> order0(IAtomContainer atomContainer)", "full_signature": "private List<List<Integer>> order0(IAtomContainer atomContainer)", "class_method_signature": "ChiPathDescriptor.order0(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "order1", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "List<List<Integer>>", "signature": "List<List<Integer>> order1(IAtomContainer atomContainer)", "full_signature": "private List<List<Integer>> order1(IAtomContainer atomContainer)", "class_method_signature": "ChiPathDescriptor.order1(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "order2", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "List<List<Integer>>", "signature": "List<List<Integer>> order2(IAtomContainer atomContainer)", "full_signature": "private List<List<Integer>> order2(IAtomContainer atomContainer)", "class_method_signature": "ChiPathDescriptor.order2(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "order3", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "List<List<Integer>>", "signature": "List<List<Integer>> order3(IAtomContainer atomContainer)", "full_signature": "private List<List<Integer>> order3(IAtomContainer atomContainer)", "class_method_signature": "ChiPathDescriptor.order3(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "order4", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "List<List<Integer>>", "signature": "List<List<Integer>> order4(IAtomContainer atomContainer)", "full_signature": "private List<List<Integer>> order4(IAtomContainer atomContainer)", "class_method_signature": "ChiPathDescriptor.order4(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "order5", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "List<List<Integer>>", "signature": "List<List<Integer>> order5(IAtomContainer atomContainer)", "full_signature": "private List<List<Integer>> order5(IAtomContainer atomContainer)", "class_method_signature": "ChiPathDescriptor.order5(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "order6", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "List<List<Integer>>", "signature": "List<List<Integer>> order6(IAtomContainer atomContainer)", "full_signature": "private List<List<Integer>> order6(IAtomContainer atomContainer)", "class_method_signature": "ChiPathDescriptor.order6(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "order7", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "List<List<Integer>>", "signature": "List<List<Integer>> order7(IAtomContainer atomContainer)", "full_signature": "private List<List<Integer>> order7(IAtomContainer atomContainer)", "class_method_signature": "ChiPathDescriptor.order7(IAtomContainer atomContainer)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/ChiPathDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer container) {\n        if (sp == null) sp = new SmilesParser(container.getBuilder());\n\n        IAtomContainer localAtomContainer = AtomContainerManipulator.removeHydrogens(container);\n        CDKAtomTypeMatcher matcher = CDKAtomTypeMatcher.getInstance(container.getBuilder());\n        Iterator<IAtom> atoms = localAtomContainer.atoms().iterator();\n        while (atoms.hasNext()) {\n            IAtom atom = atoms.next();\n            IAtomType type;\n            try {\n                type = matcher.findMatchingAtomType(localAtomContainer, atom);\n                AtomTypeManipulator.configure(atom, type);\n            } catch (Exception e) {\n                return getDummyDescriptorValue(new CDKException(\"Error in atom typing: \" + e.getMessage()));\n            }\n        }\n        CDKHydrogenAdder hAdder = CDKHydrogenAdder.getInstance(container.getBuilder());\n        try {\n            hAdder.addImplicitHydrogens(localAtomContainer);\n        } catch (CDKException e) {\n            return getDummyDescriptorValue(new CDKException(\"Error in hydrogen addition: \" + e.getMessage()));\n        }\n\n        try {\n            List<List<Integer>> subgraph0 = order0(localAtomContainer);\n            List<List<Integer>> subgraph1 = order1(localAtomContainer);\n            List<List<Integer>> subgraph2 = order2(localAtomContainer);\n            List<List<Integer>> subgraph3 = order3(localAtomContainer);\n            List<List<Integer>> subgraph4 = order4(localAtomContainer);\n            List<List<Integer>> subgraph5 = order5(localAtomContainer);\n            List<List<Integer>> subgraph6 = order6(localAtomContainer);\n            List<List<Integer>> subgraph7 = order7(localAtomContainer);\n\n            double order0s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph0);\n            double order1s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph1);\n            double order2s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph2);\n            double order3s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph3);\n            double order4s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph4);\n            double order5s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph5);\n            double order6s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph6);\n            double order7s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph7);\n\n            double order0v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph0);\n            double order1v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph1);\n            double order2v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph2);\n            double order3v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph3);\n            double order4v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph4);\n            double order5v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph5);\n            double order6v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph6);\n            double order7v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph7);\n\n            DoubleArrayResult retval = new DoubleArrayResult();\n            retval.add(order0s);\n            retval.add(order1s);\n            retval.add(order2s);\n            retval.add(order3s);\n            retval.add(order4s);\n            retval.add(order5s);\n            retval.add(order6s);\n            retval.add(order7s);\n\n            retval.add(order0v);\n            retval.add(order1v);\n            retval.add(order2v);\n            retval.add(order3v);\n            retval.add(order4v);\n            retval.add(order5v);\n            retval.add(order6v);\n            retval.add(order7v);\n\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), retval,\n                    getDescriptorNames());\n        } catch (CDKException e) {\n            return getDummyDescriptorValue(new CDKException(e.getMessage()));\n        }\n\n    }", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "ChiPathDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["getBuilder", "removeHydrogens", "getInstance", "getBuilder", "iterator", "atoms", "hasNext", "next", "findMatchingAtomType", "configure", "getDummyDescriptorValue", "getMessage", "getInstance", "getBuilder", "addImplicitHydrogens", "getDummyDescriptorValue", "getMessage", "order0", "order1", "order2", "order3", "order4", "order5", "order6", "order7", "evalSimpleIndex", "evalSimpleIndex", "evalSimpleIndex", "evalSimpleIndex", "evalSimpleIndex", "evalSimpleIndex", "evalSimpleIndex", "evalSimpleIndex", "evalValenceIndex", "evalValenceIndex", "evalValenceIndex", "evalValenceIndex", "evalValenceIndex", "evalValenceIndex", "evalValenceIndex", "evalValenceIndex", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "getDummyDescriptorValue", "getMessage"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}