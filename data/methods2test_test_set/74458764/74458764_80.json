{"test_class": {"identifier": "TestExpirationListener", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SessionManager sessionManager;", "modifier": "private", "type": "SessionManager", "declarator": "sessionManager", "var_name": "sessionManager"}, {"original_string": "private ExpirationListener expirationListener;", "modifier": "private", "type": "ExpirationListener", "declarator": "expirationListener", "var_name": "expirationListener"}], "file": "session-replacement/src/test/java/com/amadeus/session/repository/redis/TestExpirationListener.java"}, "test_case": {"identifier": "testOnPMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testOnPMessage() {\n    String sessionId = \"test-id\";\n    byte[] pattern = SafeEncoder.encode(\"\");\n    byte[] goodChannel = SafeEncoder.encode(\"_keyspace:test:expired\");\n    byte[] notExpireChannel = SafeEncoder.encode(\"_keyspace:test:expared\");\n    byte[] shortChannel = SafeEncoder.encode(\"expir\");\n    byte[] goodKey = SafeEncoder.encode(\"myprefix:key:test-id\");\n    byte[] shortKey = SafeEncoder.encode(\"myprefi\");\n    expirationListener.onPMessage(pattern, null, goodKey);\n    verify(sessionManager, never()).deleteAsync(sessionId, true);\n    expirationListener.onPMessage(pattern, goodChannel, null);\n    verify(sessionManager, never()).deleteAsync(sessionId, true);\n    expirationListener.onPMessage(pattern, notExpireChannel, goodKey);\n    verify(sessionManager, never()).deleteAsync(sessionId, true);\n    expirationListener.onPMessage(pattern, shortChannel, goodKey);\n    verify(sessionManager, never()).deleteAsync(sessionId, true);\n    expirationListener.onPMessage(pattern, goodChannel, shortKey);\n    verify(sessionManager, never()).deleteAsync(sessionId, true);\n    expirationListener.onPMessage(pattern, goodChannel, goodKey);\n    verify(sessionManager).deleteAsync(sessionId, true);\n  }", "signature": "void testOnPMessage()", "full_signature": "@Test public void testOnPMessage()", "class_method_signature": "TestExpirationListener.testOnPMessage()", "testcase": true, "constructor": false, "invocations": ["encode", "encode", "encode", "encode", "encode", "encode", "onPMessage", "deleteAsync", "verify", "never", "onPMessage", "deleteAsync", "verify", "never", "onPMessage", "deleteAsync", "verify", "never", "onPMessage", "deleteAsync", "verify", "never", "onPMessage", "deleteAsync", "verify", "never", "onPMessage", "deleteAsync", "verify"]}, "focal_class": {"identifier": "ExpirationListener", "superclass": "", "interfaces": "implements RedisFacade.RedisPubSub", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(ExpirationListener.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ExpirationListener.class)", "var_name": "logger"}, {"original_string": "private static final String SUBSCRIPTION_PATTERN = \"__keyevent@*__:expired\";", "modifier": "private static final", "type": "String", "declarator": "SUBSCRIPTION_PATTERN = \"__keyevent@*__:expired\"", "var_name": "SUBSCRIPTION_PATTERN"}, {"original_string": "private final SessionManager sessionManager;", "modifier": "private final", "type": "SessionManager", "declarator": "sessionManager", "var_name": "sessionManager"}, {"original_string": "private static final byte[] EXPIRED_SUFFIX = encode(\":expired\");", "modifier": "private static final", "type": "byte[]", "declarator": "EXPIRED_SUFFIX = encode(\":expired\")", "var_name": "EXPIRED_SUFFIX"}, {"original_string": "private final byte[] keyPrefix;", "modifier": "private final", "type": "byte[]", "declarator": "keyPrefix", "var_name": "keyPrefix"}, {"original_string": "private boolean subsrcibed;", "modifier": "private", "type": "boolean", "declarator": "subsrcibed", "var_name": "subsrcibed"}, {"original_string": "private Object linkedImplementation;", "modifier": "private", "type": "Object", "declarator": "linkedImplementation", "var_name": "linkedImplementation"}], "methods": [{"identifier": "ExpirationListener", "parameters": "(SessionManager sessionManager, String keyPrefix)", "modifiers": "", "return": "", "signature": " ExpirationListener(SessionManager sessionManager, String keyPrefix)", "full_signature": "  ExpirationListener(SessionManager sessionManager, String keyPrefix)", "class_method_signature": "ExpirationListener.ExpirationListener(SessionManager sessionManager, String keyPrefix)", "testcase": false, "constructor": true}, {"identifier": "onPMessage", "parameters": "(byte[] pattern, byte[] channelBuf, byte[] message)", "modifiers": "@Override public", "return": "void", "signature": "void onPMessage(byte[] pattern, byte[] channelBuf, byte[] message)", "full_signature": "@Override public void onPMessage(byte[] pattern, byte[] channelBuf, byte[] message)", "class_method_signature": "ExpirationListener.onPMessage(byte[] pattern, byte[] channelBuf, byte[] message)", "testcase": false, "constructor": false}, {"identifier": "isExpiredChannel", "parameters": "(byte[] channelBuf)", "modifiers": "private", "return": "boolean", "signature": "boolean isExpiredChannel(byte[] channelBuf)", "full_signature": "private boolean isExpiredChannel(byte[] channelBuf)", "class_method_signature": "ExpirationListener.isExpiredChannel(byte[] channelBuf)", "testcase": false, "constructor": false}, {"identifier": "isExpireKey", "parameters": "(byte[] message)", "modifiers": "private", "return": "boolean", "signature": "boolean isExpireKey(byte[] message)", "full_signature": "private boolean isExpireKey(byte[] message)", "class_method_signature": "ExpirationListener.isExpireKey(byte[] message)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(RedisFacade redis)", "modifiers": "", "return": "void", "signature": "void start(RedisFacade redis)", "full_signature": " void start(RedisFacade redis)", "class_method_signature": "ExpirationListener.start(RedisFacade redis)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(RedisFacade redis)", "modifiers": "", "return": "void", "signature": "void close(RedisFacade redis)", "full_signature": " void close(RedisFacade redis)", "class_method_signature": "ExpirationListener.close(RedisFacade redis)", "testcase": false, "constructor": false}, {"identifier": "getLinked", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getLinked()", "full_signature": "@Override public Object getLinked()", "class_method_signature": "ExpirationListener.getLinked()", "testcase": false, "constructor": false}, {"identifier": "link", "parameters": "(Object linkedImplementation)", "modifiers": "@Override public", "return": "void", "signature": "void link(Object linkedImplementation)", "full_signature": "@Override public void link(Object linkedImplementation)", "class_method_signature": "ExpirationListener.link(Object linkedImplementation)", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/repository/redis/ExpirationListener.java"}, "focal_method": {"identifier": "onPMessage", "parameters": "(byte[] pattern, byte[] channelBuf, byte[] message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void onPMessage(byte[] pattern, byte[] channelBuf, byte[] message) {\n    // Only accept messages expiration notification channel\n    // and only those that match our key prefix.\n    if (channelBuf == null || message == null) {\n      return;\n    }\n    if (!isExpiredChannel(channelBuf)) {\n      return;\n    }\n    if (!isExpireKey(message)) {\n      return;\n    }\n\n    String body = encode(message);\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Got notification for channel: '{}', body: '{}'\", encode(channelBuf), body);\n    }\n\n    String sessionId = RedisSessionRepository.extractSessionId(body);\n    logger.info(\"Session expired event for sessionId: '{}'\", sessionId);\n\n    // We run session delete in another thread, otherwise we would block\n    // listener.\n    sessionManager.deleteAsync(sessionId, true);\n  }", "signature": "void onPMessage(byte[] pattern, byte[] channelBuf, byte[] message)", "full_signature": "@Override public void onPMessage(byte[] pattern, byte[] channelBuf, byte[] message)", "class_method_signature": "ExpirationListener.onPMessage(byte[] pattern, byte[] channelBuf, byte[] message)", "testcase": false, "constructor": false, "invocations": ["isExpiredChannel", "isExpireKey", "encode", "isDebugEnabled", "debug", "encode", "extractSessionId", "info", "deleteAsync"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}