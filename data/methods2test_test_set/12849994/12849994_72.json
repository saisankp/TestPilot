{"test_class": {"identifier": "ConnectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Connection connection;", "modifier": "", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock\n  Socket socket;", "modifier": "@Mock", "type": "Socket", "declarator": "socket", "var_name": "socket"}, {"original_string": "@Mock\n  InetSocketAddress inetSocketAddress;", "modifier": "@Mock", "type": "InetSocketAddress", "declarator": "inetSocketAddress", "var_name": "inetSocketAddress"}, {"original_string": "@Mock\n  RedisStreamWriter redisOutputStream;", "modifier": "@Mock", "type": "RedisStreamWriter", "declarator": "redisOutputStream", "var_name": "redisOutputStream"}], "file": "imcache-redis/src/test/java/com/cetsoft/imcache/redis/client/ConnectionTest.java"}, "test_case": {"identifier": "open", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void open() throws ConnectionException, IOException {\n    doReturn(false).when(connection).isConnected();\n    doReturn(socket).when(connection).createSocket();\n    connection.open();\n    assertNotNull(connection.getStreamReader());\n    assertNotNull(connection.getStreamWriter());\n    verify(socket).setSoTimeout(Connection.DEFAULT_SOCKET_TIMEOUT);\n    assertEquals(connection.getHost(), Connection.DEFAULT_HOST);\n    assertEquals(connection.getPort(), Connection.DEFAULT_PORT);\n    assertEquals(connection.getSocketTimeout(), Connection.DEFAULT_SOCKET_TIMEOUT);\n    assertEquals(connection.getTimeout(), Connection.DEFAULT_TIMEOUT);\n  }", "signature": "void open()", "full_signature": "@Test public void open()", "class_method_signature": "ConnectionTest.open()", "testcase": true, "constructor": false, "invocations": ["isConnected", "when", "doReturn", "createSocket", "when", "doReturn", "open", "assertNotNull", "getStreamReader", "assertNotNull", "getStreamWriter", "setSoTimeout", "verify", "assertEquals", "getHost", "assertEquals", "getPort", "assertEquals", "getSocketTimeout", "assertEquals", "getTimeout"]}, "focal_class": {"identifier": "Connection", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static int DEFAULT_TIMEOUT = 100;", "modifier": "public final static", "type": "int", "declarator": "DEFAULT_TIMEOUT = 100", "var_name": "DEFAULT_TIMEOUT"}, {"original_string": "public final static int DEFAULT_SOCKET_TIMEOUT = 100;", "modifier": "public final static", "type": "int", "declarator": "DEFAULT_SOCKET_TIMEOUT = 100", "var_name": "DEFAULT_SOCKET_TIMEOUT"}, {"original_string": "public static final String DEFAULT_HOST = \"localhost\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_HOST = \"localhost\"", "var_name": "DEFAULT_HOST"}, {"original_string": "public static final int DEFAULT_PORT = 6379;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_PORT = 6379", "var_name": "DEFAULT_PORT"}, {"original_string": "private final String host;", "modifier": "private final", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "private final int port;", "modifier": "private final", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "private final int timeout;", "modifier": "private final", "type": "int", "declarator": "timeout", "var_name": "timeout"}, {"original_string": "private final int socketTimeout;", "modifier": "private final", "type": "int", "declarator": "socketTimeout", "var_name": "socketTimeout"}, {"original_string": "Socket socket;", "modifier": "", "type": "Socket", "declarator": "socket", "var_name": "socket"}], "methods": [{"identifier": "Connection", "parameters": "()", "modifiers": "public", "return": "", "signature": " Connection()", "full_signature": "public  Connection()", "class_method_signature": "Connection.Connection()", "testcase": false, "constructor": true}, {"identifier": "Connection", "parameters": "(final String host)", "modifiers": "public", "return": "", "signature": " Connection(final String host)", "full_signature": "public  Connection(final String host)", "class_method_signature": "Connection.Connection(final String host)", "testcase": false, "constructor": true}, {"identifier": "Connection", "parameters": "(final String host, final int port)", "modifiers": "public", "return": "", "signature": " Connection(final String host, final int port)", "full_signature": "public  Connection(final String host, final int port)", "class_method_signature": "Connection.Connection(final String host, final int port)", "testcase": false, "constructor": true}, {"identifier": "Connection", "parameters": "(final String host, final int port, final int timeout, final int socketTimeout)", "modifiers": "public", "return": "", "signature": " Connection(final String host, final int port, final int timeout, final int socketTimeout)", "full_signature": "public  Connection(final String host, final int port, final int timeout, final int socketTimeout)", "class_method_signature": "Connection.Connection(final String host, final int port, final int timeout, final int socketTimeout)", "testcase": false, "constructor": true}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTimeout()", "full_signature": "public int getTimeout()", "class_method_signature": "Connection.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "getSocketTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSocketTimeout()", "full_signature": "public int getSocketTimeout()", "class_method_signature": "Connection.getSocketTimeout()", "testcase": false, "constructor": false}, {"identifier": "getHost", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHost()", "full_signature": "public String getHost()", "class_method_signature": "Connection.getHost()", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPort()", "full_signature": "public int getPort()", "class_method_signature": "Connection.getPort()", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "public boolean isConnected()", "class_method_signature": "Connection.isConnected()", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void open()", "full_signature": "public void open()", "class_method_signature": "Connection.open()", "testcase": false, "constructor": false}, {"identifier": "createSocket", "parameters": "()", "modifiers": "protected", "return": "Socket", "signature": "Socket createSocket()", "full_signature": "protected Socket createSocket()", "class_method_signature": "Connection.createSocket()", "testcase": false, "constructor": false}, {"identifier": "getInetSocketAddress", "parameters": "()", "modifiers": "protected", "return": "InetSocketAddress", "signature": "InetSocketAddress getInetSocketAddress()", "full_signature": "protected InetSocketAddress getInetSocketAddress()", "class_method_signature": "Connection.getInetSocketAddress()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "Connection.close()", "testcase": false, "constructor": false}, {"identifier": "getStreamWriter", "parameters": "()", "modifiers": "public", "return": "RedisStreamWriter", "signature": "RedisStreamWriter getStreamWriter()", "full_signature": "public RedisStreamWriter getStreamWriter()", "class_method_signature": "Connection.getStreamWriter()", "testcase": false, "constructor": false}, {"identifier": "getStreamReader", "parameters": "()", "modifiers": "public", "return": "RedisStreamReader", "signature": "RedisStreamReader getStreamReader()", "full_signature": "public RedisStreamReader getStreamReader()", "class_method_signature": "Connection.getStreamReader()", "testcase": false, "constructor": false}], "file": "imcache-redis/src/main/java/com/cetsoft/imcache/redis/client/Connection.java"}, "focal_method": {"identifier": "open", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void open() throws ConnectionException {\n    if (!isConnected()) {\n      try {\n        socket = createSocket();\n        socket.setReuseAddress(true);\n        // Monitor TCP connection.\n        socket.setKeepAlive(true);\n        // Make sure packets arrive timely.\n        socket.setTcpNoDelay(true);\n        socket.setSoLinger(true, 0);\n\n        socket.connect(getInetSocketAddress(), timeout);\n        socket.setSoTimeout(socketTimeout);\n      } catch (IOException ex) {\n        throw new ConnectionException(ex);\n      }\n    }\n  }", "signature": "void open()", "full_signature": "public void open()", "class_method_signature": "Connection.open()", "testcase": false, "constructor": false, "invocations": ["isConnected", "createSocket", "setReuseAddress", "setKeepAlive", "setTcpNoDelay", "setSoLinger", "connect", "getInetSocketAddress", "setSoTimeout"]}, "repository": {"repo_id": 12849994, "url": "https://github.com/Cetsoft/imcache", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 121, "size": 1599, "license": "licensed"}}