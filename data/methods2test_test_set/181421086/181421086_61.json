{"test_class": {"identifier": "RoleManagerTest", "superclass": "extends FloodlightTestCase", "interfaces": "", "fields": [{"original_string": "private Controller controller;", "modifier": "private", "type": "Controller", "declarator": "controller", "var_name": "controller"}, {"original_string": "private RoleManager roleManager;", "modifier": "private", "type": "RoleManager", "declarator": "roleManager", "var_name": "roleManager"}], "file": "src/agents/apps/floodlight/floodlight-1.0/src/test/java/net/floodlightcontroller/core/internal/RoleManagerTest.java"}, "test_case": {"identifier": "testSetRoleActiveToActive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetRoleActiveToActive() throws Exception {\n        // Set by default\n        assertTrue(roleManager.getRole() == HARole.ACTIVE);\n\n        this.setRoleAndMockController(HARole.ACTIVE);\n\n        assertTrue(roleManager.getRole() == HARole.ACTIVE);\n\n    }", "signature": "void testSetRoleActiveToActive()", "full_signature": "@Test public void testSetRoleActiveToActive()", "class_method_signature": "RoleManagerTest.testSetRoleActiveToActive()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "getRole", "setRoleAndMockController", "assertTrue", "getRole"]}, "focal_class": {"identifier": "RoleManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private volatile RoleInfo currentRoleInfo;", "modifier": "private volatile", "type": "RoleInfo", "declarator": "currentRoleInfo", "var_name": "currentRoleInfo"}, {"original_string": "private final Controller controller;", "modifier": "private final", "type": "Controller", "declarator": "controller", "var_name": "controller"}, {"original_string": "private final IShutdownService shutdownService;", "modifier": "private final", "type": "IShutdownService", "declarator": "shutdownService", "var_name": "shutdownService"}, {"original_string": "private final RoleManagerCounters counters;", "modifier": "private final", "type": "RoleManagerCounters", "declarator": "counters", "var_name": "counters"}, {"original_string": "private static final Logger log =\n            LoggerFactory.getLogger(RoleManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "log =\n            LoggerFactory.getLogger(RoleManager.class)", "var_name": "log"}], "methods": [{"identifier": "RoleManager", "parameters": "(@Nonnull Controller controller,\n            @Nonnull IShutdownService shutdownService,\n            @Nonnull HARole role,\n            @Nonnull String roleChangeDescription)", "modifiers": "public", "return": "", "signature": " RoleManager(@Nonnull Controller controller,\n            @Nonnull IShutdownService shutdownService,\n            @Nonnull HARole role,\n            @Nonnull String roleChangeDescription)", "full_signature": "public  RoleManager(@Nonnull Controller controller,\n            @Nonnull IShutdownService shutdownService,\n            @Nonnull HARole role,\n            @Nonnull String roleChangeDescription)", "class_method_signature": "RoleManager.RoleManager(@Nonnull Controller controller,\n            @Nonnull IShutdownService shutdownService,\n            @Nonnull HARole role,\n            @Nonnull String roleChangeDescription)", "testcase": false, "constructor": true}, {"identifier": "reassertRole", "parameters": "(OFSwitchHandshakeHandler ofSwitchHandshakeHandler, HARole role)", "modifiers": "public synchronized", "return": "void", "signature": "void reassertRole(OFSwitchHandshakeHandler ofSwitchHandshakeHandler, HARole role)", "full_signature": "public synchronized void reassertRole(OFSwitchHandshakeHandler ofSwitchHandshakeHandler, HARole role)", "class_method_signature": "RoleManager.reassertRole(OFSwitchHandshakeHandler ofSwitchHandshakeHandler, HARole role)", "testcase": false, "constructor": false}, {"identifier": "setRole", "parameters": "(@Nonnull HARole role, @Nonnull String roleChangeDescription)", "modifiers": "public synchronized", "return": "void", "signature": "void setRole(@Nonnull HARole role, @Nonnull String roleChangeDescription)", "full_signature": "public synchronized void setRole(@Nonnull HARole role, @Nonnull String roleChangeDescription)", "class_method_signature": "RoleManager.setRole(@Nonnull HARole role, @Nonnull String roleChangeDescription)", "testcase": false, "constructor": false}, {"identifier": "getRole", "parameters": "()", "modifiers": "@SuppressFBWarnings(value=\"UG_SYNC_SET_UNSYNC_GET\", justification = \"setter is synchronized for mutual exclusion, \" + \"currentRoleInfo is volatile, so no sync on getter needed\") public synchronized", "return": "HARole", "signature": "HARole getRole()", "full_signature": "@SuppressFBWarnings(value=\"UG_SYNC_SET_UNSYNC_GET\", justification = \"setter is synchronized for mutual exclusion, \" + \"currentRoleInfo is volatile, so no sync on getter needed\") public synchronized HARole getRole()", "class_method_signature": "RoleManager.getRole()", "testcase": false, "constructor": false}, {"identifier": "getOFControllerRole", "parameters": "()", "modifiers": "public synchronized", "return": "OFControllerRole", "signature": "OFControllerRole getOFControllerRole()", "full_signature": "public synchronized OFControllerRole getOFControllerRole()", "class_method_signature": "RoleManager.getOFControllerRole()", "testcase": false, "constructor": false}, {"identifier": "getRoleInfo", "parameters": "()", "modifiers": "public", "return": "RoleInfo", "signature": "RoleInfo getRoleInfo()", "full_signature": "public RoleInfo getRoleInfo()", "class_method_signature": "RoleManager.getRoleInfo()", "testcase": false, "constructor": false}, {"identifier": "attemptActiveTransition", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void attemptActiveTransition()", "full_signature": "private void attemptActiveTransition()", "class_method_signature": "RoleManager.attemptActiveTransition()", "testcase": false, "constructor": false}, {"identifier": "switchesHaveAnotherMaster", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean switchesHaveAnotherMaster()", "full_signature": "private boolean switchesHaveAnotherMaster()", "class_method_signature": "RoleManager.switchesHaveAnotherMaster()", "testcase": false, "constructor": false}, {"identifier": "notifyControllerConnectionUpdate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void notifyControllerConnectionUpdate()", "full_signature": "public void notifyControllerConnectionUpdate()", "class_method_signature": "RoleManager.notifyControllerConnectionUpdate()", "testcase": false, "constructor": false}, {"identifier": "getCounters", "parameters": "()", "modifiers": "public", "return": "RoleManagerCounters", "signature": "RoleManagerCounters getCounters()", "full_signature": "public RoleManagerCounters getCounters()", "class_method_signature": "RoleManager.getCounters()", "testcase": false, "constructor": false}], "file": "src/agents/apps/floodlight/floodlight-1.0/src/main/java/net/floodlightcontroller/core/internal/RoleManager.java"}, "focal_method": {"identifier": "getRole", "parameters": "()", "modifiers": "@SuppressFBWarnings(value=\"UG_SYNC_SET_UNSYNC_GET\", justification = \"setter is synchronized for mutual exclusion, \" + \"currentRoleInfo is volatile, so no sync on getter needed\") public synchronized", "return": "HARole", "body": "@SuppressFBWarnings(value=\"UG_SYNC_SET_UNSYNC_GET\",\n                        justification = \"setter is synchronized for mutual exclusion, \"\n                                + \"currentRoleInfo is volatile, so no sync on getter needed\")\n    public synchronized HARole getRole() {\n        return currentRoleInfo.getRole();\n    }", "signature": "HARole getRole()", "full_signature": "@SuppressFBWarnings(value=\"UG_SYNC_SET_UNSYNC_GET\", justification = \"setter is synchronized for mutual exclusion, \" + \"currentRoleInfo is volatile, so no sync on getter needed\") public synchronized HARole getRole()", "class_method_signature": "RoleManager.getRole()", "testcase": false, "constructor": false, "invocations": ["getRole"]}, "repository": {"repo_id": 181421086, "url": "https://github.com/seungsoo-lee/DELTA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 99244, "license": "licensed"}}