{"test_class": {"identifier": "TestServerLockCleaner", "superclass": "extends TransactionTestBase", "interfaces": "", "fields": [{"original_string": "protected ServerLockCleaner lockCleaner;", "modifier": "protected", "type": "ServerLockCleaner", "declarator": "lockCleaner", "var_name": "lockCleaner"}], "file": "themis-coprocessor/src/test/java/org/apache/hadoop/hbase/themis/cp/TestServerLockCleaner.java"}, "test_case": {"identifier": "testCleanLockFromSecondary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCleanLockFromSecondary() throws IOException {\n    ColumnCoordinate columnCoordinate = SECONDARY_COLUMNS[1];\n    ThemisLock from = getLock(columnCoordinate);\n    // primary lock exist\n    writeLockAndData(COLUMN);\n    prepareCleanSecondaryLocks(false);\n    lockCleaner.cleanLock(from);\n    checkTransactionRollback();\n    // transaction committed with primary lock cleaned\n    deleteOldDataAndUpdateTs();\n    writePutAndData(COLUMN, prewriteTs, commitTs);\n    prepareCleanSecondaryLocks(true);\n    from = getLock(columnCoordinate);\n    lockCleaner.cleanLock(from);\n    checkColumnsCommitSuccess(new ColumnCoordinate[]{COLUMN, SECONDARY_COLUMNS[0], SECONDARY_COLUMNS[1]});\n    checkColumnsPrewriteSuccess(new ColumnCoordinate[]{SECONDARY_COLUMNS[2], SECONDARY_COLUMNS[3]});\n    // transaction uncommitted with primary lock erased\n    deleteOldDataAndUpdateTs();\n    writeData(COLUMN, prewriteTs);\n    prepareCleanSecondaryLocks(false);\n    from = getLock(columnCoordinate);\n    lockCleaner.cleanLock(from);\n    checkColumnsRallback(new ColumnCoordinate[]{COLUMN, SECONDARY_COLUMNS[0], SECONDARY_COLUMNS[1]});\n    checkColumnsPrewriteSuccess(new ColumnCoordinate[]{SECONDARY_COLUMNS[2], SECONDARY_COLUMNS[3]});\n  }", "signature": "void testCleanLockFromSecondary()", "full_signature": "@Test public void testCleanLockFromSecondary()", "class_method_signature": "TestServerLockCleaner.testCleanLockFromSecondary()", "testcase": true, "constructor": false, "invocations": ["getLock", "writeLockAndData", "prepareCleanSecondaryLocks", "cleanLock", "checkTransactionRollback", "deleteOldDataAndUpdateTs", "writePutAndData", "prepareCleanSecondaryLocks", "getLock", "cleanLock", "checkColumnsCommitSuccess", "checkColumnsPrewriteSuccess", "deleteOldDataAndUpdateTs", "writeData", "prepareCleanSecondaryLocks", "getLock", "cleanLock", "checkColumnsRallback", "checkColumnsPrewriteSuccess"]}, "focal_class": {"identifier": "ServerLockCleaner", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final ThemisCoprocessorClient cpClient;", "modifier": "protected final", "type": "ThemisCoprocessorClient", "declarator": "cpClient", "var_name": "cpClient"}, {"original_string": "protected final HConnection conn;", "modifier": "protected final", "type": "HConnection", "declarator": "conn", "var_name": "conn"}], "methods": [{"identifier": "ServerLockCleaner", "parameters": "(HConnection conn, ThemisCoprocessorClient cpClient)", "modifiers": "public", "return": "", "signature": " ServerLockCleaner(HConnection conn, ThemisCoprocessorClient cpClient)", "full_signature": "public  ServerLockCleaner(HConnection conn, ThemisCoprocessorClient cpClient)", "class_method_signature": "ServerLockCleaner.ServerLockCleaner(HConnection conn, ThemisCoprocessorClient cpClient)", "testcase": false, "constructor": true}, {"identifier": "getPrimaryLockWithColumn", "parameters": "(ThemisLock lock)", "modifiers": "public static", "return": "PrimaryLock", "signature": "PrimaryLock getPrimaryLockWithColumn(ThemisLock lock)", "full_signature": "public static PrimaryLock getPrimaryLockWithColumn(ThemisLock lock)", "class_method_signature": "ServerLockCleaner.getPrimaryLockWithColumn(ThemisLock lock)", "testcase": false, "constructor": false}, {"identifier": "cleanLock", "parameters": "(ThemisLock lock)", "modifiers": "public", "return": "void", "signature": "void cleanLock(ThemisLock lock)", "full_signature": "public void cleanLock(ThemisLock lock)", "class_method_signature": "ServerLockCleaner.cleanLock(ThemisLock lock)", "testcase": false, "constructor": false}, {"identifier": "cleanPrimaryLock", "parameters": "(ColumnCoordinate columnCoordinate,\n      long prewriteTs)", "modifiers": "public", "return": "Pair<Long, PrimaryLock>", "signature": "Pair<Long, PrimaryLock> cleanPrimaryLock(ColumnCoordinate columnCoordinate,\n      long prewriteTs)", "full_signature": "public Pair<Long, PrimaryLock> cleanPrimaryLock(ColumnCoordinate columnCoordinate,\n      long prewriteTs)", "class_method_signature": "ServerLockCleaner.cleanPrimaryLock(ColumnCoordinate columnCoordinate,\n      long prewriteTs)", "testcase": false, "constructor": false}, {"identifier": "getTimestampOfWriteIndexingPrewriteTs", "parameters": "(ColumnCoordinate columnCoordinate, long timestamp)", "modifiers": "public", "return": "Long", "signature": "Long getTimestampOfWriteIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "full_signature": "public Long getTimestampOfWriteIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "class_method_signature": "ServerLockCleaner.getTimestampOfWriteIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "createGetOfWriteColumnsIndexingPrewriteTs", "parameters": "(ColumnCoordinate columnCoordinate, long timestamp)", "modifiers": "public", "return": "Get", "signature": "Get createGetOfWriteColumnsIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "full_signature": "public Get createGetOfWriteColumnsIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "class_method_signature": "ServerLockCleaner.createGetOfWriteColumnsIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "cleanSecondaryLocks", "parameters": "(PrimaryLock primaryLock, Long commitTs)", "modifiers": "public", "return": "void", "signature": "void cleanSecondaryLocks(PrimaryLock primaryLock, Long commitTs)", "full_signature": "public void cleanSecondaryLocks(PrimaryLock primaryLock, Long commitTs)", "class_method_signature": "ServerLockCleaner.cleanSecondaryLocks(PrimaryLock primaryLock, Long commitTs)", "testcase": false, "constructor": false}, {"identifier": "eraseLockAndData", "parameters": "(ColumnCoordinate column, long timestamp)", "modifiers": "public", "return": "void", "signature": "void eraseLockAndData(ColumnCoordinate column, long timestamp)", "full_signature": "public void eraseLockAndData(ColumnCoordinate column, long timestamp)", "class_method_signature": "ServerLockCleaner.eraseLockAndData(ColumnCoordinate column, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "eraseLockAndData", "parameters": "(byte[] tableName, byte[] row, Collection<Column> columns, long timestamp)", "modifiers": "public", "return": "void", "signature": "void eraseLockAndData(byte[] tableName, byte[] row, Collection<Column> columns, long timestamp)", "full_signature": "public void eraseLockAndData(byte[] tableName, byte[] row, Collection<Column> columns, long timestamp)", "class_method_signature": "ServerLockCleaner.eraseLockAndData(byte[] tableName, byte[] row, Collection<Column> columns, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "closeTable", "parameters": "(HTableInterface table)", "modifiers": "protected", "return": "void", "signature": "void closeTable(HTableInterface table)", "full_signature": "protected void closeTable(HTableInterface table)", "class_method_signature": "ServerLockCleaner.closeTable(HTableInterface table)", "testcase": false, "constructor": false}], "file": "themis-coprocessor/src/main/java/org/apache/hadoop/hbase/themis/cp/ServerLockCleaner.java"}, "focal_method": {"identifier": "cleanLock", "parameters": "(ThemisLock lock)", "modifiers": "public", "return": "void", "body": "public void cleanLock(ThemisLock lock) throws IOException {\n    long beginTs = System.nanoTime();\n    try {\n      PrimaryLock primary = getPrimaryLockWithColumn(lock);\n      // judge whether the transaction committed by clean the primary lock\n      Pair<Long, PrimaryLock> cleanResult = cleanPrimaryLock(primary.getColumn(), primary.getTimestamp());\n      // if the primary lock is cleaned in cleanPrimaryLock, we could get the primary lock with all secondaries\n      primary = cleanResult.getSecond() == null ? primary : cleanResult.getSecond();\n      // clean secondary locks\n      cleanSecondaryLocks(primary, cleanResult.getFirst());\n      ThemisCpStatistics.getThemisCpStatistics().cleanLockSuccessCount.inc();\n    } catch (IOException e) {\n      ThemisCpStatistics.getThemisCpStatistics().cleanLockFailCount.inc();\n      throw e;\n    } finally {\n      ThemisCpStatistics.updateLatency(ThemisCpStatistics.getThemisCpStatistics().cleanLockLatency,\n        beginTs, \"lock=\" + lock);\n    }\n  }", "signature": "void cleanLock(ThemisLock lock)", "full_signature": "public void cleanLock(ThemisLock lock)", "class_method_signature": "ServerLockCleaner.cleanLock(ThemisLock lock)", "testcase": false, "constructor": false, "invocations": ["nanoTime", "getPrimaryLockWithColumn", "cleanPrimaryLock", "getColumn", "getTimestamp", "getSecond", "getSecond", "cleanSecondaryLocks", "getFirst", "inc", "getThemisCpStatistics", "inc", "getThemisCpStatistics", "updateLatency", "getThemisCpStatistics"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}