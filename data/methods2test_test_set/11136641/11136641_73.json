{"test_class": {"identifier": "LdapCompensatingTransactionOperationFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LdapOperations ldapOperationsMock;", "modifier": "private", "type": "LdapOperations", "declarator": "ldapOperationsMock", "var_name": "ldapOperationsMock"}, {"original_string": "private TempEntryRenamingStrategy renamingStrategyMock;", "modifier": "private", "type": "TempEntryRenamingStrategy", "declarator": "renamingStrategyMock", "var_name": "renamingStrategyMock"}, {"original_string": "private DirContext dirContextMock;", "modifier": "private", "type": "DirContext", "declarator": "dirContextMock", "var_name": "dirContextMock"}, {"original_string": "private LdapCompensatingTransactionOperationFactory tested;", "modifier": "private", "type": "LdapCompensatingTransactionOperationFactory", "declarator": "tested", "var_name": "tested"}], "file": "core/src/test/java/org/springframework/ldap/transaction/compensating/LdapCompensatingTransactionOperationFactoryTest.java"}, "test_case": {"identifier": "testGetRecordingOperation_ModifyAttributes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRecordingOperation_ModifyAttributes() throws Exception {\n        CompensatingTransactionOperationRecorder result = tested\n                .createRecordingOperation(dirContextMock, \"modifyAttributes\");\n        assertThat(result instanceof ModifyAttributesOperationRecorder).isTrue();\n        ModifyAttributesOperationRecorder recordingOperation = (ModifyAttributesOperationRecorder) result;\n        assertThat(recordingOperation.getLdapOperations()).isSameAs(ldapOperationsMock);\n    }", "signature": "void testGetRecordingOperation_ModifyAttributes()", "full_signature": "@Test public void testGetRecordingOperation_ModifyAttributes()", "class_method_signature": "LdapCompensatingTransactionOperationFactoryTest.testGetRecordingOperation_ModifyAttributes()", "testcase": true, "constructor": false, "invocations": ["createRecordingOperation", "isTrue", "assertThat", "isSameAs", "assertThat", "getLdapOperations"]}, "focal_class": {"identifier": "LdapCompensatingTransactionOperationFactory", "superclass": "", "interfaces": "implements CompensatingTransactionOperationFactory", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(LdapCompensatingTransactionOperationFactory.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LdapCompensatingTransactionOperationFactory.class)", "var_name": "log"}, {"original_string": "private TempEntryRenamingStrategy renamingStrategy;", "modifier": "private", "type": "TempEntryRenamingStrategy", "declarator": "renamingStrategy", "var_name": "renamingStrategy"}], "methods": [{"identifier": "LdapCompensatingTransactionOperationFactory", "parameters": "(TempEntryRenamingStrategy renamingStrategy)", "modifiers": "public", "return": "", "signature": " LdapCompensatingTransactionOperationFactory(TempEntryRenamingStrategy renamingStrategy)", "full_signature": "public  LdapCompensatingTransactionOperationFactory(TempEntryRenamingStrategy renamingStrategy)", "class_method_signature": "LdapCompensatingTransactionOperationFactory.LdapCompensatingTransactionOperationFactory(TempEntryRenamingStrategy renamingStrategy)", "testcase": false, "constructor": true}, {"identifier": "createRecordingOperation", "parameters": "(Object resource, String operation)", "modifiers": "public", "return": "CompensatingTransactionOperationRecorder", "signature": "CompensatingTransactionOperationRecorder createRecordingOperation(Object resource, String operation)", "full_signature": "public CompensatingTransactionOperationRecorder createRecordingOperation(Object resource, String operation)", "class_method_signature": "LdapCompensatingTransactionOperationFactory.createRecordingOperation(Object resource, String operation)", "testcase": false, "constructor": false}, {"identifier": "createLdapOperationsInstance", "parameters": "(DirContext ctx)", "modifiers": "", "return": "LdapOperations", "signature": "LdapOperations createLdapOperationsInstance(DirContext ctx)", "full_signature": " LdapOperations createLdapOperationsInstance(DirContext ctx)", "class_method_signature": "LdapCompensatingTransactionOperationFactory.createLdapOperationsInstance(DirContext ctx)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/transaction/compensating/LdapCompensatingTransactionOperationFactory.java"}, "focal_method": {"identifier": "createRecordingOperation", "parameters": "(Object resource, String operation)", "modifiers": "public", "return": "CompensatingTransactionOperationRecorder", "body": "public CompensatingTransactionOperationRecorder createRecordingOperation(Object resource, String operation) {\n\t\tif (ObjectUtils.nullSafeEquals(operation, LdapTransactionUtils.BIND_METHOD_NAME)) {\n\t\t\tlog.debug(\"Bind operation recorded\");\n\t\t\treturn new BindOperationRecorder(createLdapOperationsInstance((DirContext) resource));\n\t\t}\n\t\telse if (ObjectUtils.nullSafeEquals(operation, LdapTransactionUtils.REBIND_METHOD_NAME)) {\n\t\t\tlog.debug(\"Rebind operation recorded\");\n\t\t\treturn new RebindOperationRecorder(createLdapOperationsInstance((DirContext) resource), renamingStrategy);\n\t\t}\n\t\telse if (ObjectUtils.nullSafeEquals(operation, LdapTransactionUtils.RENAME_METHOD_NAME)) {\n\t\t\tlog.debug(\"Rename operation recorded\");\n\t\t\treturn new RenameOperationRecorder(createLdapOperationsInstance((DirContext) resource));\n\t\t}\n\t\telse if (ObjectUtils.nullSafeEquals(operation, LdapTransactionUtils.MODIFY_ATTRIBUTES_METHOD_NAME)) {\n\t\t\treturn new ModifyAttributesOperationRecorder(createLdapOperationsInstance((DirContext) resource));\n\t\t}\n\t\telse if (ObjectUtils.nullSafeEquals(operation, LdapTransactionUtils.UNBIND_METHOD_NAME)) {\n\t\t\treturn new UnbindOperationRecorder(createLdapOperationsInstance((DirContext) resource), renamingStrategy);\n\t\t}\n\n\t\tlog.warn(\"No suitable CompensatingTransactionOperationRecorder found for method \" + operation\n\t\t\t\t+ \". Operation will not be transacted.\");\n\t\treturn new NullOperationRecorder();\n\t}", "signature": "CompensatingTransactionOperationRecorder createRecordingOperation(Object resource, String operation)", "full_signature": "public CompensatingTransactionOperationRecorder createRecordingOperation(Object resource, String operation)", "class_method_signature": "LdapCompensatingTransactionOperationFactory.createRecordingOperation(Object resource, String operation)", "testcase": false, "constructor": false, "invocations": ["nullSafeEquals", "debug", "createLdapOperationsInstance", "nullSafeEquals", "debug", "createLdapOperationsInstance", "nullSafeEquals", "debug", "createLdapOperationsInstance", "nullSafeEquals", "createLdapOperationsInstance", "nullSafeEquals", "createLdapOperationsInstance", "warn"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}