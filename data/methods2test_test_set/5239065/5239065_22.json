{"test_class": {"identifier": "TreeDispatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "exposure-engine/gateway-common/src/test/java/com/alu/e3/gateway/dispatch/TreeDispatcherTest.java"}, "test_case": {"identifier": "testFindExactMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFindExactMatch() {\n\t\tTreeDispatcher<String> dispatcher = setupDispatcher();\n\t\t\n\t\tassertNull(dispatcher.findExactMatch(\"\"));\n\t\tassertNull(dispatcher.findExactMatch(\"/\"));\n\t\tassertNull(dispatcher.findExactMatch(\"/one\"));\n\t\tassertEquals(dispatcher.findExactMatch(\"/one/two\"), \"/one/two\");\n\t\tassertNull(dispatcher.findExactMatch(\"/one/two/three\"));\n\t\tassertEquals(dispatcher.findExactMatch(\"/one/two/three/four\"), \"/one/two/three/four\");\n\t\tassertNull(dispatcher.findExactMatch(\"/one/two/three/four/five\"));\n\t\tassertEquals(dispatcher.findExactMatch(\"/one/two/three/four/five/six\"), \"/one/two/three/four/five/six\");\n\t\tassertNull(dispatcher.findExactMatch(\"/one/two/three/four/five/six/seven\"));\n\t\tassertNull(dispatcher.findExactMatch(\"/one/three\"));\n\t\tassertNull(dispatcher.findExactMatch(\"/one/three/three\"));\n\t\tassertEquals(dispatcher.findExactMatch(\"/one/three/three/four\"), \"/one/three/three/four\");\n\t\tassertNull(dispatcher.findExactMatch(\"/one/three/three/four/five\"));\n\t\tassertEquals(dispatcher.findExactMatch(\"/one/three/three/four/five/six\"), \"/one/three/three/four/five/six\");\n\t\tassertNull(dispatcher.findExactMatch(\"/one/three/three/four/five/six/seven\"));\n\t\tassertNull(dispatcher.findExactMatch(\"/one/three/four\"));\n\t\tassertNull(dispatcher.findExactMatch(\"/one/four\"));\n\t\t\n\t\tassertEquals(dispatcher.findExactMatch(\"/one////two////\"), \"/one/two\");\n\t\tassertEquals(dispatcher.findExactMatch(\"////one////two\"), \"/one/two\");\n\t\tassertEquals(dispatcher.findExactMatch(\"////one////two////\"), \"/one/two\");\n\t\t\n\t\tassertNull(dispatcher.findExactMatch(\"/*\"));\n\t\tassertNull(dispatcher.findExactMatch(\"/.*\"));\n\t\tassertNull(dispatcher.findExactMatch(\"one\"));\n\t\tassertNull(dispatcher.findExactMatch(\"/one/tw\"));\n\t\tassertNull(dispatcher.findExactMatch(\"/one/twoo\"));\n\t\tassertNull(dispatcher.findExactMatch(\"/one/two*\"));\n\t\tassertNull(dispatcher.findExactMatch(\"/one/two.*\"));\n\t\tassertNull(dispatcher.findExactMatch(\"/on/two\"));\n\t\tassertNull(dispatcher.findExactMatch(\"/onee/two\"));\n\t\tassertNull(dispatcher.findExactMatch(\"/onetwo\"));\n\t\tassertNull(dispatcher.findExactMatch(\"/oneetwo\"));\n\t\tassertNull(dispatcher.findExactMatch(\"/one\\\\two\"));\n\t}", "signature": "void testFindExactMatch()", "full_signature": "@Test public void testFindExactMatch()", "class_method_signature": "TreeDispatcherTest.testFindExactMatch()", "testcase": true, "constructor": false, "invocations": ["setupDispatcher", "assertNull", "findExactMatch", "assertNull", "findExactMatch", "assertNull", "findExactMatch", "assertEquals", "findExactMatch", "assertNull", "findExactMatch", "assertEquals", "findExactMatch", "assertNull", "findExactMatch", "assertEquals", "findExactMatch", "assertNull", "findExactMatch", "assertNull", "findExactMatch", "assertNull", "findExactMatch", "assertEquals", "findExactMatch", "assertNull", "findExactMatch", "assertEquals", "findExactMatch", "assertNull", "findExactMatch", "assertNull", "findExactMatch", "assertNull", "findExactMatch", "assertEquals", "findExactMatch", "assertEquals", "findExactMatch", "assertEquals", "findExactMatch", "assertNull", "findExactMatch", "assertNull", "findExactMatch", "assertNull", "findExactMatch", "assertNull", "findExactMatch", "assertNull", "findExactMatch", "assertNull", "findExactMatch", "assertNull", "findExactMatch", "assertNull", "findExactMatch", "assertNull", "findExactMatch", "assertNull", "findExactMatch", "assertNull", "findExactMatch", "assertNull", "findExactMatch"]}, "focal_class": {"identifier": "TreeDispatcher", "superclass": "", "interfaces": "implements Dispatcher<E>", "fields": [{"original_string": "private final ConcurrentTree<String, E> tree = new ConcurrentTree<String, E>();", "modifier": "private final", "type": "ConcurrentTree<String, E>", "declarator": "tree = new ConcurrentTree<String, E>()", "var_name": "tree"}, {"original_string": "private Pattern delimiter = Pattern.compile(\"/+\");", "modifier": "private", "type": "Pattern", "declarator": "delimiter = Pattern.compile(\"/+\")", "var_name": "delimiter"}], "methods": [{"identifier": "setDelimiter", "parameters": "(String delimiter)", "modifiers": "public", "return": "void", "signature": "void setDelimiter(String delimiter)", "full_signature": "public void setDelimiter(String delimiter)", "class_method_signature": "TreeDispatcher.setDelimiter(String delimiter)", "testcase": false, "constructor": false}, {"identifier": "addEndpoint", "parameters": "(String path, E endpoint)", "modifiers": "@Override public", "return": "void", "signature": "void addEndpoint(String path, E endpoint)", "full_signature": "@Override public void addEndpoint(String path, E endpoint)", "class_method_signature": "TreeDispatcher.addEndpoint(String path, E endpoint)", "testcase": false, "constructor": false}, {"identifier": "removeEndpoint", "parameters": "(String path)", "modifiers": "@Override public", "return": "E", "signature": "E removeEndpoint(String path)", "full_signature": "@Override public E removeEndpoint(String path)", "class_method_signature": "TreeDispatcher.removeEndpoint(String path)", "testcase": false, "constructor": false}, {"identifier": "findExactMatch", "parameters": "(String path)", "modifiers": "@Override public", "return": "E", "signature": "E findExactMatch(String path)", "full_signature": "@Override public E findExactMatch(String path)", "class_method_signature": "TreeDispatcher.findExactMatch(String path)", "testcase": false, "constructor": false}, {"identifier": "findPrefixMatches", "parameters": "(String path)", "modifiers": "@Override public", "return": "List<E>", "signature": "List<E> findPrefixMatches(String path)", "full_signature": "@Override public List<E> findPrefixMatches(String path)", "class_method_signature": "TreeDispatcher.findPrefixMatches(String path)", "testcase": false, "constructor": false}], "file": "exposure-engine/gateway-common/src/main/java/com/alu/e3/gateway/dispatch/TreeDispatcher.java"}, "focal_method": {"identifier": "findExactMatch", "parameters": "(String path)", "modifiers": "@Override public", "return": "E", "body": "@Override\n\tpublic E findExactMatch(String path) {\n\t\treturn tree.get(delimiter.split(path));\n\t}", "signature": "E findExactMatch(String path)", "full_signature": "@Override public E findExactMatch(String path)", "class_method_signature": "TreeDispatcher.findExactMatch(String path)", "testcase": false, "constructor": false, "invocations": ["get", "split"]}, "repository": {"repo_id": 5239065, "url": "https://github.com/apigrove/apigrove", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 118, "size": 215144, "license": "licensed"}}