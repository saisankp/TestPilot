{"test_class": {"identifier": "NumbersTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/com/platypii/baseline/util/NumbersTest.java"}, "test_case": {"identifier": "pow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void pow() {\n//        assertEquals(1, Numbers.pow(0, 0)); // undefined\n        assertEquals(0, Numbers.pow(0, 1));\n        assertEquals(0, Numbers.pow(0, 2));\n        assertEquals(1, Numbers.pow(1, 0));\n        assertEquals(1, Numbers.pow(1, 1));\n        assertEquals(1, Numbers.pow(1, 2));\n        assertEquals(1, Numbers.pow(2, 0));\n        assertEquals(2, Numbers.pow(2, 1));\n        assertEquals(4, Numbers.pow(2, 2));\n        assertEquals(8, Numbers.pow(2, 3));\n        assertEquals(16, Numbers.pow(2, 4));\n        assertEquals(32, Numbers.pow(2, 5));\n        assertEquals(256, Numbers.pow(2, 8));\n        assertEquals(65536, Numbers.pow(2, 16));\n        assertEquals(1, Numbers.pow(10, 0));\n        assertEquals(10, Numbers.pow(10, 1));\n        assertEquals(100, Numbers.pow(10, 2));\n        assertEquals(1, Numbers.pow(-1, 0));\n        assertEquals(-1, Numbers.pow(-1, 1));\n        assertEquals(1, Numbers.pow(-1, 2));\n        assertEquals(1, Numbers.pow(-2, 0));\n        assertEquals(-2, Numbers.pow(-2, 1));\n        assertEquals(4, Numbers.pow(-2, 2));\n    }", "signature": "void pow()", "full_signature": "@Test public void pow()", "class_method_signature": "NumbersTest.pow()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow", "assertEquals", "pow"]}, "focal_class": {"identifier": "Numbers", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DecimalFormatSymbols formatSymbols = DecimalFormatSymbols.getInstance(Locale.US);", "modifier": "private static final", "type": "DecimalFormatSymbols", "declarator": "formatSymbols = DecimalFormatSymbols.getInstance(Locale.US)", "var_name": "formatSymbols"}, {"original_string": "public static final DecimalFormat format2 = new DecimalFormat(\"#.##\", formatSymbols);", "modifier": "public static final", "type": "DecimalFormat", "declarator": "format2 = new DecimalFormat(\"#.##\", formatSymbols)", "var_name": "format2"}, {"original_string": "public static final DecimalFormat format3 = new DecimalFormat(\"#.###\", formatSymbols);", "modifier": "public static final", "type": "DecimalFormat", "declarator": "format3 = new DecimalFormat(\"#.###\", formatSymbols)", "var_name": "format3"}, {"original_string": "public static final DecimalFormat format6 = new DecimalFormat(\"#.######\", formatSymbols);", "modifier": "public static final", "type": "DecimalFormat", "declarator": "format6 = new DecimalFormat(\"#.######\", formatSymbols)", "var_name": "format6"}], "methods": [{"identifier": "isReal", "parameters": "(double value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isReal(double value)", "full_signature": "public static boolean isReal(double value)", "class_method_signature": "Numbers.isReal(double value)", "testcase": false, "constructor": false}, {"identifier": "pow", "parameters": "(int x, int y)", "modifiers": "public static", "return": "int", "signature": "int pow(int x, int y)", "full_signature": "public static int pow(int x, int y)", "class_method_signature": "Numbers.pow(int x, int y)", "testcase": false, "constructor": false}, {"identifier": "parseDouble", "parameters": "(@Nullable String str)", "modifiers": "public static", "return": "double", "signature": "double parseDouble(@Nullable String str)", "full_signature": "public static double parseDouble(@Nullable String str)", "class_method_signature": "Numbers.parseDouble(@Nullable String str)", "testcase": false, "constructor": false}, {"identifier": "parseDoubleNull", "parameters": "(@Nullable String str)", "modifiers": "@Nullable public static", "return": "Double", "signature": "Double parseDoubleNull(@Nullable String str)", "full_signature": "@Nullable public static Double parseDoubleNull(@Nullable String str)", "class_method_signature": "Numbers.parseDoubleNull(@Nullable String str)", "testcase": false, "constructor": false}, {"identifier": "parseFloat", "parameters": "(@Nullable String str)", "modifiers": "public static", "return": "float", "signature": "float parseFloat(@Nullable String str)", "full_signature": "public static float parseFloat(@Nullable String str)", "class_method_signature": "Numbers.parseFloat(@Nullable String str)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(@Nullable String str, int defaultValue)", "modifiers": "public static", "return": "int", "signature": "int parseInt(@Nullable String str, int defaultValue)", "full_signature": "public static int parseInt(@Nullable String str, int defaultValue)", "class_method_signature": "Numbers.parseInt(@Nullable String str, int defaultValue)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/platypii/baseline/util/Numbers.java"}, "focal_method": {"identifier": "pow", "parameters": "(int x, int y)", "modifiers": "public static", "return": "int", "body": "public static int pow(int x, int y) {\n        // base cases\n        if (x == 1 || y == 0) return 1;\n        else if (y == 1) return x;\n        else if (y == 2) return x * x;\n        else if (y == 3) return x * x * x;\n        // divide and conquer\n        final int sqrt = pow(x, y / 2);\n        if (y % 2 == 0) return sqrt * sqrt;\n        else return x * sqrt * sqrt;\n    }", "signature": "int pow(int x, int y)", "full_signature": "public static int pow(int x, int y)", "class_method_signature": "Numbers.pow(int x, int y)", "testcase": false, "constructor": false, "invocations": ["pow"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}