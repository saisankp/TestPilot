{"test_class": {"identifier": "HerdJmsMessageListenerTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    HerdJmsMessageListener herdJmsMessageListener;", "modifier": "@Autowired", "type": "HerdJmsMessageListener", "declarator": "herdJmsMessageListener", "var_name": "herdJmsMessageListener"}, {"original_string": "@Autowired\n    JsonHelper jsonHelper;", "modifier": "@Autowired", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Autowired\n    UploadDownloadService uploadDownloadService;", "modifier": "@Autowired", "type": "UploadDownloadService", "declarator": "uploadDownloadService", "var_name": "uploadDownloadService"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/HerdJmsMessageListenerTest.java"}, "test_case": {"identifier": "testControlListener", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testControlListener()\n    {\n        configurationHelper = Mockito.mock(ConfigurationHelper.class);\n\n        ReflectionTestUtils.setField(herdJmsMessageListener, \"configurationHelper\", configurationHelper);\n        MessageListenerContainer mockMessageListenerContainer = Mockito.mock(MessageListenerContainer.class);\n\n        //The listener is not enabled\n        when(configurationHelper.getProperty(ConfigurationValue.JMS_LISTENER_ENABLED)).thenReturn(\"false\");\n        JmsListenerEndpointRegistry registry = ApplicationContextHolder.getApplicationContext()\n            .getBean(\"org.springframework.jms.config.internalJmsListenerEndpointRegistry\", JmsListenerEndpointRegistry.class);\n        when(registry.getListenerContainer(HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING)).thenReturn(mockMessageListenerContainer);\n        //the listener is not running, nothing happened\n        when(mockMessageListenerContainer.isRunning()).thenReturn(false);\n        herdJmsMessageListener.controlHerdJmsMessageListener();\n        verify(mockMessageListenerContainer, Mockito.times(0)).stop();\n        verify(mockMessageListenerContainer, Mockito.times(0)).start();\n        // the listener is running, but it is not enable, should stop\n        when(mockMessageListenerContainer.isRunning()).thenReturn(true);\n        herdJmsMessageListener.controlHerdJmsMessageListener();\n        verify(mockMessageListenerContainer).stop();\n\n        //The listener is enabled\n        when(configurationHelper.getProperty(ConfigurationValue.JMS_LISTENER_ENABLED)).thenReturn(\"true\");\n        //the listener is running, should not call the start method\n        when(mockMessageListenerContainer.isRunning()).thenReturn(true);\n        herdJmsMessageListener.controlHerdJmsMessageListener();\n        verify(mockMessageListenerContainer, Mockito.times(0)).start();\n        // the listener is not running, but it is enabled, should start\n        when(mockMessageListenerContainer.isRunning()).thenReturn(false);\n        herdJmsMessageListener.controlHerdJmsMessageListener();\n        verify(mockMessageListenerContainer).start();\n    }", "signature": "void testControlListener()", "full_signature": "@Test public void testControlListener()", "class_method_signature": "HerdJmsMessageListenerTest.testControlListener()", "testcase": true, "constructor": false, "invocations": ["mock", "setField", "mock", "thenReturn", "when", "getProperty", "getBean", "getApplicationContext", "thenReturn", "when", "getListenerContainer", "thenReturn", "when", "isRunning", "controlHerdJmsMessageListener", "stop", "verify", "times", "start", "verify", "times", "thenReturn", "when", "isRunning", "controlHerdJmsMessageListener", "stop", "verify", "thenReturn", "when", "getProperty", "thenReturn", "when", "isRunning", "controlHerdJmsMessageListener", "start", "verify", "times", "thenReturn", "when", "isRunning", "controlHerdJmsMessageListener", "start", "verify"]}, "focal_class": {"identifier": "HerdJmsMessageListener", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HerdJmsMessageListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HerdJmsMessageListener.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Autowired\n    private MessageNotificationEventService sqsNotificationEventService;", "modifier": "@Autowired\n    private", "type": "MessageNotificationEventService", "declarator": "sqsNotificationEventService", "var_name": "sqsNotificationEventService"}, {"original_string": "@Autowired\n    private UploadDownloadService uploadDownloadService;", "modifier": "@Autowired\n    private", "type": "UploadDownloadService", "declarator": "uploadDownloadService", "var_name": "uploadDownloadService"}], "methods": [{"identifier": "controlHerdJmsMessageListener", "parameters": "()", "modifiers": "@Scheduled(fixedDelay = 60000) public", "return": "void", "signature": "void controlHerdJmsMessageListener()", "full_signature": "@Scheduled(fixedDelay = 60000) public void controlHerdJmsMessageListener()", "class_method_signature": "HerdJmsMessageListener.controlHerdJmsMessageListener()", "testcase": false, "constructor": false}, {"identifier": "processMessage", "parameters": "(String payload, @Headers Map<Object, Object> allHeaders)", "modifiers": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING, containerFactory = \"jmsListenerContainerFactory\", destination = HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING) public", "return": "void", "signature": "void processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "full_signature": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING, containerFactory = \"jmsListenerContainerFactory\", destination = HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING) public void processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "class_method_signature": "HerdJmsMessageListener.processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "testcase": false, "constructor": false}, {"identifier": "processS3Notification", "parameters": "(String payload)", "modifiers": "private", "return": "boolean", "signature": "boolean processS3Notification(String payload)", "full_signature": "private boolean processS3Notification(String payload)", "class_method_signature": "HerdJmsMessageListener.processS3Notification(String payload)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/HerdJmsMessageListener.java"}, "focal_method": {"identifier": "controlHerdJmsMessageListener", "parameters": "()", "modifiers": "@Scheduled(fixedDelay = 60000) public", "return": "void", "body": "@Scheduled(fixedDelay = 60000)\n    public void controlHerdJmsMessageListener()\n    {\n        try\n        {\n            // Get the configuration setting.\n            Boolean jmsMessageListenerEnabled = Boolean.valueOf(configurationHelper.getProperty(ConfigurationValue.JMS_LISTENER_ENABLED));\n\n            // Get the registry bean.\n            JmsListenerEndpointRegistry registry = ApplicationContextHolder.getApplicationContext()\n                .getBean(\"org.springframework.jms.config.internalJmsListenerEndpointRegistry\", JmsListenerEndpointRegistry.class);\n\n            // Get the herd JMS message listener container.\n            MessageListenerContainer jmsMessageListenerContainer = registry.getListenerContainer(HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING);\n\n            // Get the current JMS message listener status and the configuration value.\n            LOGGER.debug(\"controlHerdJmsMessageListener(): {}={} jmsMessageListenerContainer.isRunning()={}\", ConfigurationValue.JMS_LISTENER_ENABLED.getKey(),\n                jmsMessageListenerEnabled, jmsMessageListenerContainer.isRunning());\n\n            // Apply the relative action if needed.\n            if (!jmsMessageListenerEnabled && jmsMessageListenerContainer.isRunning())\n            {\n                LOGGER.info(\"controlHerdJmsMessageListener(): Stopping the herd JMS message listener ...\");\n                jmsMessageListenerContainer.stop();\n                LOGGER.info(\"controlHerdJmsMessageListener(): Done\");\n            }\n            else if (jmsMessageListenerEnabled && !jmsMessageListenerContainer.isRunning())\n            {\n                LOGGER.info(\"controlHerdJmsMessageListener(): Starting the herd JMS message listener ...\");\n                jmsMessageListenerContainer.start();\n                LOGGER.info(\"controlHerdJmsMessageListener(): Done\");\n            }\n        }\n        catch (Exception e)\n        {\n            LOGGER.error(\"controlHerdJmsMessageListener(): Failed to control the herd Jms message listener service.\", e);\n        }\n    }", "signature": "void controlHerdJmsMessageListener()", "full_signature": "@Scheduled(fixedDelay = 60000) public void controlHerdJmsMessageListener()", "class_method_signature": "HerdJmsMessageListener.controlHerdJmsMessageListener()", "testcase": false, "constructor": false, "invocations": ["valueOf", "getProperty", "getBean", "getApplicationContext", "getListenerContainer", "debug", "getKey", "isRunning", "isRunning", "info", "stop", "info", "isRunning", "info", "start", "info", "error"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}