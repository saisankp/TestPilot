{"test_class": {"identifier": "JavaTypeFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "recipe-generator/src/test/java/ca/derekcormier/recipe/generator/filter/JavaTypeFilterTest.java"}, "test_case": {"identifier": "testApply_convertsArrayOfStrings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testApply_convertsArrayOfStrings() {\n    Cookbook cookbook = new Cookbook(\"test\", new ArrayList<>(), new ArrayList<>());\n    Filter filter = new JavaTypeFilter(cookbook);\n\n    assertEquals(\"String[]\", filter.apply(\"string[]\"));\n  }", "signature": "void testApply_convertsArrayOfStrings()", "full_signature": "@Test public void testApply_convertsArrayOfStrings()", "class_method_signature": "JavaTypeFilterTest.testApply_convertsArrayOfStrings()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "apply"]}, "focal_class": {"identifier": "JavaTypeFilter", "superclass": "extends RecipeFilter", "interfaces": "", "fields": [], "methods": [{"identifier": "JavaTypeFilter", "parameters": "(Cookbook cookbook)", "modifiers": "public", "return": "", "signature": " JavaTypeFilter(Cookbook cookbook)", "full_signature": "public  JavaTypeFilter(Cookbook cookbook)", "class_method_signature": "JavaTypeFilter.JavaTypeFilter(Cookbook cookbook)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(Object value, Object... params)", "modifiers": "@Override public", "return": "Object", "signature": "Object apply(Object value, Object... params)", "full_signature": "@Override public Object apply(Object value, Object... params)", "class_method_signature": "JavaTypeFilter.apply(Object value, Object... params)", "testcase": false, "constructor": false}, {"identifier": "toJavaType", "parameters": "(ParamType type, boolean varargAsArray)", "modifiers": "private", "return": "String", "signature": "String toJavaType(ParamType type, boolean varargAsArray)", "full_signature": "private String toJavaType(ParamType type, boolean varargAsArray)", "class_method_signature": "JavaTypeFilter.toJavaType(ParamType type, boolean varargAsArray)", "testcase": false, "constructor": false}, {"identifier": "_toJavaType", "parameters": "(Type type)", "modifiers": "private", "return": "String", "signature": "String _toJavaType(Type type)", "full_signature": "private String _toJavaType(Type type)", "class_method_signature": "JavaTypeFilter._toJavaType(Type type)", "testcase": false, "constructor": false}], "file": "recipe-generator/src/main/java/ca/derekcormier/recipe/generator/filter/JavaTypeFilter.java"}, "focal_method": {"identifier": "apply", "parameters": "(Object value, Object... params)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n  public Object apply(Object value, Object... params) {\n    ParamType type = CookbookUtils.parseType(super.asString(value), getCookbook());\n    return toJavaType(type, params.length > 0 && super.asBoolean(params[0]));\n  }", "signature": "Object apply(Object value, Object... params)", "full_signature": "@Override public Object apply(Object value, Object... params)", "class_method_signature": "JavaTypeFilter.apply(Object value, Object... params)", "testcase": false, "constructor": false, "invocations": ["parseType", "asString", "getCookbook", "toJavaType", "asBoolean"]}, "repository": {"repo_id": 97669395, "url": "https://github.com/kormide/recipe", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 727, "license": "licensed"}}