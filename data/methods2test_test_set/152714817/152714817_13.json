{"test_class": {"identifier": "ApplicationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private ApplicationService applicationService;", "modifier": "@InjectMocks\n    private", "type": "ApplicationService", "declarator": "applicationService", "var_name": "applicationService"}, {"original_string": "@Mock\n    private ApplicationDiscovery applicationDiscovery;", "modifier": "@Mock\n    private", "type": "ApplicationDiscovery", "declarator": "applicationDiscovery", "var_name": "applicationDiscovery"}, {"original_string": "@Mock\n    private ApplicationReader applicationReader;", "modifier": "@Mock\n    private", "type": "ApplicationReader", "declarator": "applicationReader", "var_name": "applicationReader"}], "file": "activiti-spring-application/src/test/java/org/activiti/application/ApplicationServiceTest.java"}, "test_case": {"identifier": "shouldThrowApplicationLoadExceptionWhenIOExceptionOccurs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldThrowApplicationLoadExceptionWhenIOExceptionOccurs() throws Exception {\n        //given\n        Resource applicationResource = mock(Resource.class);\n        IOException ioException = new IOException();\n        given(applicationResource.getInputStream()).willThrow(ioException);\n\n        given(applicationDiscovery.discoverApplications()).willReturn(Collections.singletonList(applicationResource));\n\n        //when\n        Throwable thrown = catchThrowable(() ->\n                                                  applicationService.loadApplications());\n\n        //then\n        assertThat(thrown).isInstanceOf(AppliationLoadException.class)\n                .hasCause(ioException);\n    }", "signature": "void shouldThrowApplicationLoadExceptionWhenIOExceptionOccurs()", "full_signature": "@Test public void shouldThrowApplicationLoadExceptionWhenIOExceptionOccurs()", "class_method_signature": "ApplicationServiceTest.shouldThrowApplicationLoadExceptionWhenIOExceptionOccurs()", "testcase": true, "constructor": false, "invocations": ["mock", "willThrow", "given", "getInputStream", "willReturn", "given", "discoverApplications", "singletonList", "catchThrowable", "loadApplications", "hasCause", "isInstanceOf", "assertThat"]}, "focal_class": {"identifier": "ApplicationService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ApplicationDiscovery applicationDiscovery;", "modifier": "private", "type": "ApplicationDiscovery", "declarator": "applicationDiscovery", "var_name": "applicationDiscovery"}, {"original_string": "private ApplicationReader applicationReader;", "modifier": "private", "type": "ApplicationReader", "declarator": "applicationReader", "var_name": "applicationReader"}], "methods": [{"identifier": "ApplicationService", "parameters": "(ApplicationDiscovery applicationDiscovery,\n                              ApplicationReader applicationReader)", "modifiers": "public", "return": "", "signature": " ApplicationService(ApplicationDiscovery applicationDiscovery,\n                              ApplicationReader applicationReader)", "full_signature": "public  ApplicationService(ApplicationDiscovery applicationDiscovery,\n                              ApplicationReader applicationReader)", "class_method_signature": "ApplicationService.ApplicationService(ApplicationDiscovery applicationDiscovery,\n                              ApplicationReader applicationReader)", "testcase": false, "constructor": true}, {"identifier": "loadApplications", "parameters": "()", "modifiers": "public", "return": "List<ApplicationContent>", "signature": "List<ApplicationContent> loadApplications()", "full_signature": "public List<ApplicationContent> loadApplications()", "class_method_signature": "ApplicationService.loadApplications()", "testcase": false, "constructor": false}], "file": "activiti-spring-application/src/main/java/org/activiti/application/ApplicationService.java"}, "focal_method": {"identifier": "loadApplications", "parameters": "()", "modifiers": "public", "return": "List<ApplicationContent>", "body": "public List<ApplicationContent> loadApplications() {\n        List<ApplicationContent> applications = new ArrayList<>();\n        List<Resource> applicationResources = applicationDiscovery.discoverApplications();\n        try {\n            for (Resource applicationResource : applicationResources) {\n                try (InputStream inputStream = applicationResource.getInputStream()) {\n                    applications.add(applicationReader.read(inputStream));\n                }\n            }\n        } catch (IOException e) {\n            throw new AppliationLoadException(\"Unable to load application resource\", e);\n        }\n        return applications;\n    }", "signature": "List<ApplicationContent> loadApplications()", "full_signature": "public List<ApplicationContent> loadApplications()", "class_method_signature": "ApplicationService.loadApplications()", "testcase": false, "constructor": false, "invocations": ["discoverApplications", "getInputStream", "add", "read"]}, "repository": {"repo_id": 152714817, "url": "https://github.com/Activiti/activiti-core-common", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 7, "size": 543, "license": "licensed"}}