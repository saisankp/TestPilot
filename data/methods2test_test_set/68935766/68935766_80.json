{"test_class": {"identifier": "DispatcherCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "CommandListenerWrapper listener = mock(CommandListenerWrapper.class);", "modifier": "", "type": "CommandListenerWrapper", "declarator": "listener = mock(CommandListenerWrapper.class)", "var_name": "listener"}, {"original_string": "EntityPlayer player = when(mock(EntityPlayer.class).getCommandListener()).thenReturn(listener).getMock();", "modifier": "", "type": "EntityPlayer", "declarator": "player = when(mock(EntityPlayer.class).getCommandListener()).thenReturn(listener).getMock()", "var_name": "player"}, {"original_string": "CommandSender sender = when(mock(CraftPlayer.class).getHandle()).thenReturn(player).getMock();", "modifier": "", "type": "CommandSender", "declarator": "sender = when(mock(CraftPlayer.class).getHandle()).thenReturn(player).getMock()", "var_name": "sender"}, {"original_string": "Plugin plugin = mock(Plugin.class);", "modifier": "", "type": "Plugin", "declarator": "plugin = mock(Plugin.class)", "var_name": "plugin"}, {"original_string": "CommandDispatcher<CommandSender> dispatcher = mock(CommandDispatcher.class);", "modifier": "", "type": "CommandDispatcher<CommandSender>", "declarator": "dispatcher = mock(CommandDispatcher.class)", "var_name": "dispatcher"}, {"original_string": "DispatcherCommand command = spy(new DispatcherCommand(\"name\", plugin, dispatcher, \"\", List.of()));", "modifier": "", "type": "DispatcherCommand", "declarator": "command = spy(new DispatcherCommand(\"name\", plugin, dispatcher, \"\", List.of()))", "var_name": "command"}], "file": "commons/src/test/java/com/karuslabs/commons/command/dispatcher/DispatcherCommandTest.java"}, "test_case": {"identifier": "execute_Exception", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void execute_Exception() throws CommandSyntaxException {\n        doReturn(true).when(command).testPermission(sender);\n        doThrow(RuntimeException.class).when(dispatcher).execute(any(StringReader.class), any(CommandSender.class));\n        \n        assertTrue(command.execute(sender, \"command\", \"a\", \"b\"));\n        verify(listener, times(1)).sendFailureMessage(any());\n    }", "signature": "void execute_Exception()", "full_signature": "@Test void execute_Exception()", "class_method_signature": "DispatcherCommandTest.execute_Exception()", "testcase": true, "constructor": false, "invocations": ["testPermission", "when", "doReturn", "execute", "when", "doThrow", "any", "any", "assertTrue", "execute", "sendFailureMessage", "verify", "times", "any"]}, "focal_class": {"identifier": "DispatcherCommand", "superclass": "extends Command", "interfaces": "implements PluginIdentifiableCommand", "fields": [{"original_string": "Plugin plugin;", "modifier": "", "type": "Plugin", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "CommandDispatcher<CommandSender> dispatcher;", "modifier": "", "type": "CommandDispatcher<CommandSender>", "declarator": "dispatcher", "var_name": "dispatcher"}], "methods": [{"identifier": "DispatcherCommand", "parameters": "(String name, Plugin plugin, CommandDispatcher<CommandSender> dispatcher, String usage, List<String> aliases)", "modifiers": "public", "return": "", "signature": " DispatcherCommand(String name, Plugin plugin, CommandDispatcher<CommandSender> dispatcher, String usage, List<String> aliases)", "full_signature": "public  DispatcherCommand(String name, Plugin plugin, CommandDispatcher<CommandSender> dispatcher, String usage, List<String> aliases)", "class_method_signature": "DispatcherCommand.DispatcherCommand(String name, Plugin plugin, CommandDispatcher<CommandSender> dispatcher, String usage, List<String> aliases)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(CommandSender sender, String label, String... arguments)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean execute(CommandSender sender, String label, String... arguments)", "full_signature": "@Override public boolean execute(CommandSender sender, String label, String... arguments)", "class_method_signature": "DispatcherCommand.execute(CommandSender sender, String label, String... arguments)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(String name, String[] arguments)", "modifiers": "private", "return": "String", "signature": "String join(String name, String[] arguments)", "full_signature": "private String join(String name, String[] arguments)", "class_method_signature": "DispatcherCommand.join(String name, String[] arguments)", "testcase": false, "constructor": false}, {"identifier": "getPlugin", "parameters": "()", "modifiers": "@Override public", "return": "Plugin", "signature": "Plugin getPlugin()", "full_signature": "@Override public Plugin getPlugin()", "class_method_signature": "DispatcherCommand.getPlugin()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/dispatcher/DispatcherCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(CommandSender sender, String label, String... arguments)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean execute(CommandSender sender, String label, String... arguments) {\n        if (!testPermission(sender)) {\n            return true;\n        }\n        \n        var reader = new StringReader(join(label, arguments));\n        if (reader.canRead() && reader.peek() == '/') {\n            reader.skip();\n        }\n        \n        try {\n            dispatcher.execute(reader, sender);\n            \n        } catch (CommandSyntaxException e) {\n            Exceptions.report(sender, e);\n            \n        } catch (Exception e) {\n            Exceptions.report(sender, e);\n        }\n        \n        return true;\n    }", "signature": "boolean execute(CommandSender sender, String label, String... arguments)", "full_signature": "@Override public boolean execute(CommandSender sender, String label, String... arguments)", "class_method_signature": "DispatcherCommand.execute(CommandSender sender, String label, String... arguments)", "testcase": false, "constructor": false, "invocations": ["testPermission", "join", "canRead", "peek", "skip", "execute", "report", "report"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}