{"test_class": {"identifier": "SSMCacheManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SSMCacheManager ssmCacheManager;", "modifier": "private", "type": "SSMCacheManager", "declarator": "ssmCacheManager", "var_name": "ssmCacheManager"}, {"original_string": "private Set<SSMCache> caches;", "modifier": "private", "type": "Set<SSMCache>", "declarator": "caches", "var_name": "caches"}, {"original_string": "private Cache cache1;", "modifier": "private", "type": "Cache", "declarator": "cache1", "var_name": "cache1"}, {"original_string": "private Cache cache2;", "modifier": "private", "type": "Cache", "declarator": "cache2", "var_name": "cache2"}, {"original_string": "private Cache cache3;", "modifier": "private", "type": "Cache", "declarator": "cache3", "var_name": "cache3"}], "file": "spring-cache/src/test/java/com/google/code/ssm/spring/SSMCacheManagerTest.java"}, "test_case": {"identifier": "getCacheNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getCacheNames() {\n        Collection<String> names = ssmCacheManager.getCacheNames();\n        assertNotNull(names);\n        assertEquals(5, names.size());\n        assertTrue(names.contains(\"cache1\"));\n        assertTrue(names.contains(\"cache2\"));\n        assertTrue(names.contains(\"cache3\"));\n        assertTrue(names.contains(\"cache3Alias1\"));\n        assertTrue(names.contains(\"cache3Alias2\"));\n    }", "signature": "void getCacheNames()", "full_signature": "@Test public void getCacheNames()", "class_method_signature": "SSMCacheManagerTest.getCacheNames()", "testcase": true, "constructor": false, "invocations": ["getCacheNames", "assertNotNull", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "SSMCacheManager", "superclass": "", "interfaces": "implements CacheManager, InitializingBean", "fields": [{"original_string": "private final ConcurrentMap<String, Cache> cacheMap = new ConcurrentHashMap<String, Cache>();", "modifier": "private final", "type": "ConcurrentMap<String, Cache>", "declarator": "cacheMap = new ConcurrentHashMap<String, Cache>()", "var_name": "cacheMap"}, {"original_string": "private final Set<String> cacheNames = new LinkedHashSet<String>();", "modifier": "private final", "type": "Set<String>", "declarator": "cacheNames = new LinkedHashSet<String>()", "var_name": "cacheNames"}, {"original_string": "@Getter\n    private Collection<SSMCache> caches;", "modifier": "@Getter\n    private", "type": "Collection<SSMCache>", "declarator": "caches", "var_name": "caches"}], "methods": [{"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "SSMCacheManager.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "getCacheNames", "parameters": "()", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> getCacheNames()", "full_signature": "@Override public Collection<String> getCacheNames()", "class_method_signature": "SSMCacheManager.getCacheNames()", "testcase": false, "constructor": false}, {"identifier": "getCache", "parameters": "(final String name)", "modifiers": "@Override public", "return": "SSMCache", "signature": "SSMCache getCache(final String name)", "full_signature": "@Override public SSMCache getCache(final String name)", "class_method_signature": "SSMCacheManager.getCache(final String name)", "testcase": false, "constructor": false}, {"identifier": "addCache", "parameters": "(final SSMCache cache)", "modifiers": "public", "return": "void", "signature": "void addCache(final SSMCache cache)", "full_signature": "public void addCache(final SSMCache cache)", "class_method_signature": "SSMCacheManager.addCache(final SSMCache cache)", "testcase": false, "constructor": false}, {"identifier": "removeCache", "parameters": "(final String nameOrAlias)", "modifiers": "public", "return": "void", "signature": "void removeCache(final String nameOrAlias)", "full_signature": "public void removeCache(final String nameOrAlias)", "class_method_signature": "SSMCacheManager.removeCache(final String nameOrAlias)", "testcase": false, "constructor": false}, {"identifier": "setCaches", "parameters": "(Collection<SSMCache> caches)", "modifiers": "public", "return": "void", "signature": "void setCaches(Collection<SSMCache> caches)", "full_signature": "public void setCaches(Collection<SSMCache> caches)", "class_method_signature": "SSMCacheManager.setCaches(Collection<SSMCache> caches)", "testcase": false, "constructor": false}, {"identifier": "registerCache", "parameters": "(final SSMCache cache)", "modifiers": "private", "return": "void", "signature": "void registerCache(final SSMCache cache)", "full_signature": "private void registerCache(final SSMCache cache)", "class_method_signature": "SSMCacheManager.registerCache(final SSMCache cache)", "testcase": false, "constructor": false}, {"identifier": "registerCache", "parameters": "(final String name, final Cache cache)", "modifiers": "private", "return": "void", "signature": "void registerCache(final String name, final Cache cache)", "full_signature": "private void registerCache(final String name, final Cache cache)", "class_method_signature": "SSMCacheManager.registerCache(final String name, final Cache cache)", "testcase": false, "constructor": false}, {"identifier": "unregisterCache", "parameters": "(final String name)", "modifiers": "private", "return": "void", "signature": "void unregisterCache(final String name)", "full_signature": "private void unregisterCache(final String name)", "class_method_signature": "SSMCacheManager.unregisterCache(final String name)", "testcase": false, "constructor": false}], "file": "spring-cache/src/main/java/com/google/code/ssm/spring/SSMCacheManager.java"}, "focal_method": {"identifier": "getCacheNames", "parameters": "()", "modifiers": "@Override public", "return": "Collection<String>", "body": "@Override\n    public Collection<String> getCacheNames() {\n        return Collections.unmodifiableSet(this.cacheNames);\n    }", "signature": "Collection<String> getCacheNames()", "full_signature": "@Override public Collection<String> getCacheNames()", "class_method_signature": "SSMCacheManager.getCacheNames()", "testcase": false, "constructor": false, "invocations": ["unmodifiableSet"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}