{"test_class": {"identifier": "NetworkHelperImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long HOST_ID = 10L;", "modifier": "private static final", "type": "long", "declarator": "HOST_ID = 10L", "var_name": "HOST_ID"}, {"original_string": "@Mock\n    protected AgentManager agentManager;", "modifier": "@Mock\n    protected", "type": "AgentManager", "declarator": "agentManager", "var_name": "agentManager"}, {"original_string": "@InjectMocks\n    protected NetworkHelperImpl nwHelper = new NetworkHelperImpl();", "modifier": "@InjectMocks\n    protected", "type": "NetworkHelperImpl", "declarator": "nwHelper = new NetworkHelperImpl()", "var_name": "nwHelper"}], "file": "server/src/test/java/com/cloud/network/router/NetworkHelperImplTest.java"}, "test_case": {"identifier": "testSendCommandsToRouter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSendCommandsToRouter()\n            throws AgentUnavailableException, OperationTimedoutException, ResourceUnavailableException {\n        // Prepare\n        NetworkHelperImpl nwHelperUT = spy(this.nwHelper);\n        VirtualRouter vr = mock(VirtualRouter.class);\n        when(vr.getHostId()).thenReturn(HOST_ID);\n        doReturn(true).when(nwHelperUT).checkRouterVersion(vr);\n\n        Commands commands = mock(Commands.class);\n        when(commands.size()).thenReturn(3);\n        Answer answer1 = mock(Answer.class);\n        Answer answer2 = mock(Answer.class);\n        Answer answer3 = mock(Answer.class);\n        // In the second iteration it should match and return, without invoking the third\n        Answer[] answers = {answer1, answer2, answer3};\n        when(answer1.getResult()).thenReturn(true);\n        when(answer2.getResult()).thenReturn(false);\n        when(answer3.getResult()).thenReturn(false);\n        when(this.agentManager.send(HOST_ID, commands)).thenReturn(answers);\n\n        // Execute\n        final boolean result = nwHelperUT.sendCommandsToRouter(vr, commands);\n\n        // Assert\n        verify(this.agentManager, times(1)).send(HOST_ID, commands);\n        verify(answer1, times(1)).getResult();\n        verify(answer2, times(1)).getResult();\n        verify(answer3, times(0)).getResult();\n        assertFalse(result);\n    }", "signature": "void testSendCommandsToRouter()", "full_signature": "@Test public void testSendCommandsToRouter()", "class_method_signature": "NetworkHelperImplTest.testSendCommandsToRouter()", "testcase": true, "constructor": false, "invocations": ["spy", "mock", "thenReturn", "when", "getHostId", "checkRouterVersion", "when", "doReturn", "mock", "thenReturn", "when", "size", "mock", "mock", "mock", "thenReturn", "when", "getResult", "thenReturn", "when", "getResult", "thenReturn", "when", "getResult", "thenReturn", "when", "send", "sendCommandsToRouter", "send", "verify", "times", "getResult", "verify", "times", "getResult", "verify", "times", "getResult", "verify", "times", "assertFalse"]}, "focal_class": {"identifier": "NetworkHelperImpl", "superclass": "", "interfaces": "implements NetworkHelper", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(NetworkHelperImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(NetworkHelperImpl.class)", "var_name": "s_logger"}, {"original_string": "protected static Account s_systemAccount;", "modifier": "protected static", "type": "Account", "declarator": "s_systemAccount", "var_name": "s_systemAccount"}, {"original_string": "protected static String s_vmInstanceName;", "modifier": "protected static", "type": "String", "declarator": "s_vmInstanceName", "var_name": "s_vmInstanceName"}, {"original_string": "@Inject\n    protected NicDao _nicDao;", "modifier": "@Inject\n    protected", "type": "NicDao", "declarator": "_nicDao", "var_name": "_nicDao"}, {"original_string": "@Inject\n    protected NetworkDao _networkDao;", "modifier": "@Inject\n    protected", "type": "NetworkDao", "declarator": "_networkDao", "var_name": "_networkDao"}, {"original_string": "@Inject\n    protected DomainRouterDao _routerDao;", "modifier": "@Inject\n    protected", "type": "DomainRouterDao", "declarator": "_routerDao", "var_name": "_routerDao"}, {"original_string": "@Inject\n    private AgentManager _agentMgr;", "modifier": "@Inject\n    private", "type": "AgentManager", "declarator": "_agentMgr", "var_name": "_agentMgr"}, {"original_string": "@Inject\n    private AlertManager _alertMgr;", "modifier": "@Inject\n    private", "type": "AlertManager", "declarator": "_alertMgr", "var_name": "_alertMgr"}, {"original_string": "@Inject\n    protected NetworkModel _networkModel;", "modifier": "@Inject\n    protected", "type": "NetworkModel", "declarator": "_networkModel", "var_name": "_networkModel"}, {"original_string": "@Inject\n    private AccountManager _accountMgr;", "modifier": "@Inject\n    private", "type": "AccountManager", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Inject\n    private Site2SiteVpnManager _s2sVpnMgr;", "modifier": "@Inject\n    private", "type": "Site2SiteVpnManager", "declarator": "_s2sVpnMgr", "var_name": "_s2sVpnMgr"}, {"original_string": "@Inject\n    private HostDao _hostDao;", "modifier": "@Inject\n    private", "type": "HostDao", "declarator": "_hostDao", "var_name": "_hostDao"}, {"original_string": "@Inject\n    private VolumeDao _volumeDao;", "modifier": "@Inject\n    private", "type": "VolumeDao", "declarator": "_volumeDao", "var_name": "_volumeDao"}, {"original_string": "@Inject\n    private VMTemplateDao _templateDao;", "modifier": "@Inject\n    private", "type": "VMTemplateDao", "declarator": "_templateDao", "var_name": "_templateDao"}, {"original_string": "@Inject\n    private ResourceManager _resourceMgr;", "modifier": "@Inject\n    private", "type": "ResourceManager", "declarator": "_resourceMgr", "var_name": "_resourceMgr"}, {"original_string": "@Inject\n    protected IPAddressDao _ipAddressDao;", "modifier": "@Inject\n    protected", "type": "IPAddressDao", "declarator": "_ipAddressDao", "var_name": "_ipAddressDao"}, {"original_string": "@Inject\n    private UserIpv6AddressDao _ipv6Dao;", "modifier": "@Inject\n    private", "type": "UserIpv6AddressDao", "declarator": "_ipv6Dao", "var_name": "_ipv6Dao"}, {"original_string": "@Inject\n    protected NetworkOrchestrationService _networkMgr;", "modifier": "@Inject\n    protected", "type": "NetworkOrchestrationService", "declarator": "_networkMgr", "var_name": "_networkMgr"}, {"original_string": "@Inject\n    private UserDao _userDao;", "modifier": "@Inject\n    private", "type": "UserDao", "declarator": "_userDao", "var_name": "_userDao"}, {"original_string": "@Inject\n    protected ServiceOfferingDao _serviceOfferingDao;", "modifier": "@Inject\n    protected", "type": "ServiceOfferingDao", "declarator": "_serviceOfferingDao", "var_name": "_serviceOfferingDao"}, {"original_string": "@Inject\n    protected VirtualMachineManager _itMgr;", "modifier": "@Inject\n    protected", "type": "VirtualMachineManager", "declarator": "_itMgr", "var_name": "_itMgr"}, {"original_string": "@Inject\n    protected IpAddressManager _ipAddrMgr;", "modifier": "@Inject\n    protected", "type": "IpAddressManager", "declarator": "_ipAddrMgr", "var_name": "_ipAddrMgr"}, {"original_string": "protected final Map<HypervisorType, ConfigKey<String>> hypervisorsMap = new HashMap<>();", "modifier": "protected final", "type": "Map<HypervisorType, ConfigKey<String>>", "declarator": "hypervisorsMap = new HashMap<>()", "var_name": "hypervisorsMap"}], "methods": [{"identifier": "setupHypervisorsMap", "parameters": "()", "modifiers": "@PostConstruct protected", "return": "void", "signature": "void setupHypervisorsMap()", "full_signature": "@PostConstruct protected void setupHypervisorsMap()", "class_method_signature": "NetworkHelperImpl.setupHypervisorsMap()", "testcase": false, "constructor": false}, {"identifier": "sendCommandsToRouter", "parameters": "(final VirtualRouter router, final Commands cmds)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean sendCommandsToRouter(final VirtualRouter router, final Commands cmds)", "full_signature": "@Override public boolean sendCommandsToRouter(final VirtualRouter router, final Commands cmds)", "class_method_signature": "NetworkHelperImpl.sendCommandsToRouter(final VirtualRouter router, final Commands cmds)", "testcase": false, "constructor": false}, {"identifier": "handleSingleWorkingRedundantRouter", "parameters": "(final List<? extends VirtualRouter> connectedRouters, final List<? extends VirtualRouter> disconnectedRouters,\n                                                   final String reason)", "modifiers": "@Override public", "return": "void", "signature": "void handleSingleWorkingRedundantRouter(final List<? extends VirtualRouter> connectedRouters, final List<? extends VirtualRouter> disconnectedRouters,\n                                                   final String reason)", "full_signature": "@Override public void handleSingleWorkingRedundantRouter(final List<? extends VirtualRouter> connectedRouters, final List<? extends VirtualRouter> disconnectedRouters,\n                                                   final String reason)", "class_method_signature": "NetworkHelperImpl.handleSingleWorkingRedundantRouter(final List<? extends VirtualRouter> connectedRouters, final List<? extends VirtualRouter> disconnectedRouters,\n                                                   final String reason)", "testcase": false, "constructor": false}, {"identifier": "getNicTO", "parameters": "(final VirtualRouter router, final Long networkId, final String broadcastUri)", "modifiers": "@Override public", "return": "NicTO", "signature": "NicTO getNicTO(final VirtualRouter router, final Long networkId, final String broadcastUri)", "full_signature": "@Override public NicTO getNicTO(final VirtualRouter router, final Long networkId, final String broadcastUri)", "class_method_signature": "NetworkHelperImpl.getNicTO(final VirtualRouter router, final Long networkId, final String broadcastUri)", "testcase": false, "constructor": false}, {"identifier": "destroyRouter", "parameters": "(final long routerId, final Account caller, final Long callerUserId)", "modifiers": "@Override public", "return": "VirtualRouter", "signature": "VirtualRouter destroyRouter(final long routerId, final Account caller, final Long callerUserId)", "full_signature": "@Override public VirtualRouter destroyRouter(final long routerId, final Account caller, final Long callerUserId)", "class_method_signature": "NetworkHelperImpl.destroyRouter(final long routerId, final Account caller, final Long callerUserId)", "testcase": false, "constructor": false}, {"identifier": "checkRouterVersion", "parameters": "(final VirtualRouter router)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkRouterVersion(final VirtualRouter router)", "full_signature": "@Override public boolean checkRouterVersion(final VirtualRouter router)", "class_method_signature": "NetworkHelperImpl.checkRouterVersion(final VirtualRouter router)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(DomainRouterVO router, final User user, final Account caller, final Map<Param, Object> params, final DeploymentPlan planToDeploy)", "modifiers": "protected", "return": "DomainRouterVO", "signature": "DomainRouterVO start(DomainRouterVO router, final User user, final Account caller, final Map<Param, Object> params, final DeploymentPlan planToDeploy)", "full_signature": "protected DomainRouterVO start(DomainRouterVO router, final User user, final Account caller, final Map<Param, Object> params, final DeploymentPlan planToDeploy)", "class_method_signature": "NetworkHelperImpl.start(DomainRouterVO router, final User user, final Account caller, final Map<Param, Object> params, final DeploymentPlan planToDeploy)", "testcase": false, "constructor": false}, {"identifier": "waitRouter", "parameters": "(final DomainRouterVO router)", "modifiers": "protected", "return": "DomainRouterVO", "signature": "DomainRouterVO waitRouter(final DomainRouterVO router)", "full_signature": "protected DomainRouterVO waitRouter(final DomainRouterVO router)", "class_method_signature": "NetworkHelperImpl.waitRouter(final DomainRouterVO router)", "testcase": false, "constructor": false}, {"identifier": "startRouters", "parameters": "(final RouterDeploymentDefinition routerDeploymentDefinition)", "modifiers": "@Override public", "return": "List<DomainRouterVO>", "signature": "List<DomainRouterVO> startRouters(final RouterDeploymentDefinition routerDeploymentDefinition)", "full_signature": "@Override public List<DomainRouterVO> startRouters(final RouterDeploymentDefinition routerDeploymentDefinition)", "class_method_signature": "NetworkHelperImpl.startRouters(final RouterDeploymentDefinition routerDeploymentDefinition)", "testcase": false, "constructor": false}, {"identifier": "startVirtualRouter", "parameters": "(final DomainRouterVO router, final User user, final Account caller, final Map<Param, Object> params)", "modifiers": "@Override public", "return": "DomainRouterVO", "signature": "DomainRouterVO startVirtualRouter(final DomainRouterVO router, final User user, final Account caller, final Map<Param, Object> params)", "full_signature": "@Override public DomainRouterVO startVirtualRouter(final DomainRouterVO router, final User user, final Account caller, final Map<Param, Object> params)", "class_method_signature": "NetworkHelperImpl.startVirtualRouter(final DomainRouterVO router, final User user, final Account caller, final Map<Param, Object> params)", "testcase": false, "constructor": false}, {"identifier": "retrieveTemplateName", "parameters": "(final HypervisorType hType, final long datacenterId)", "modifiers": "protected", "return": "String", "signature": "String retrieveTemplateName(final HypervisorType hType, final long datacenterId)", "full_signature": "protected String retrieveTemplateName(final HypervisorType hType, final long datacenterId)", "class_method_signature": "NetworkHelperImpl.retrieveTemplateName(final HypervisorType hType, final long datacenterId)", "testcase": false, "constructor": false}, {"identifier": "deployRouter", "parameters": "(final RouterDeploymentDefinition routerDeploymentDefinition, final boolean startRouter)", "modifiers": "@Override public", "return": "DomainRouterVO", "signature": "DomainRouterVO deployRouter(final RouterDeploymentDefinition routerDeploymentDefinition, final boolean startRouter)", "full_signature": "@Override public DomainRouterVO deployRouter(final RouterDeploymentDefinition routerDeploymentDefinition, final boolean startRouter)", "class_method_signature": "NetworkHelperImpl.deployRouter(final RouterDeploymentDefinition routerDeploymentDefinition, final boolean startRouter)", "testcase": false, "constructor": false}, {"identifier": "filterSupportedHypervisors", "parameters": "(final List<HypervisorType> hypervisors)", "modifiers": "protected", "return": "void", "signature": "void filterSupportedHypervisors(final List<HypervisorType> hypervisors)", "full_signature": "protected void filterSupportedHypervisors(final List<HypervisorType> hypervisors)", "class_method_signature": "NetworkHelperImpl.filterSupportedHypervisors(final List<HypervisorType> hypervisors)", "testcase": false, "constructor": false}, {"identifier": "getNoHypervisorsErrMsgDetails", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getNoHypervisorsErrMsgDetails()", "full_signature": "protected String getNoHypervisorsErrMsgDetails()", "class_method_signature": "NetworkHelperImpl.getNoHypervisorsErrMsgDetails()", "testcase": false, "constructor": false}, {"identifier": "getHypervisors", "parameters": "(final RouterDeploymentDefinition routerDeploymentDefinition)", "modifiers": "protected", "return": "List<HypervisorType>", "signature": "List<HypervisorType> getHypervisors(final RouterDeploymentDefinition routerDeploymentDefinition)", "full_signature": "protected List<HypervisorType> getHypervisors(final RouterDeploymentDefinition routerDeploymentDefinition)", "class_method_signature": "NetworkHelperImpl.getHypervisors(final RouterDeploymentDefinition routerDeploymentDefinition)", "testcase": false, "constructor": false}, {"identifier": "configureControlNic", "parameters": "(final RouterDeploymentDefinition routerDeploymentDefinition)", "modifiers": "protected", "return": "LinkedHashMap<Network, List<? extends NicProfile>>", "signature": "LinkedHashMap<Network, List<? extends NicProfile>> configureControlNic(final RouterDeploymentDefinition routerDeploymentDefinition)", "full_signature": "protected LinkedHashMap<Network, List<? extends NicProfile>> configureControlNic(final RouterDeploymentDefinition routerDeploymentDefinition)", "class_method_signature": "NetworkHelperImpl.configureControlNic(final RouterDeploymentDefinition routerDeploymentDefinition)", "testcase": false, "constructor": false}, {"identifier": "configurePublicNic", "parameters": "(final RouterDeploymentDefinition routerDeploymentDefinition, final boolean hasGuestNic)", "modifiers": "protected", "return": "LinkedHashMap<Network, List<? extends NicProfile>>", "signature": "LinkedHashMap<Network, List<? extends NicProfile>> configurePublicNic(final RouterDeploymentDefinition routerDeploymentDefinition, final boolean hasGuestNic)", "full_signature": "protected LinkedHashMap<Network, List<? extends NicProfile>> configurePublicNic(final RouterDeploymentDefinition routerDeploymentDefinition, final boolean hasGuestNic)", "class_method_signature": "NetworkHelperImpl.configurePublicNic(final RouterDeploymentDefinition routerDeploymentDefinition, final boolean hasGuestNic)", "testcase": false, "constructor": false}, {"identifier": "configureDefaultNics", "parameters": "(final RouterDeploymentDefinition routerDeploymentDefinition)", "modifiers": "@Override public", "return": "LinkedHashMap<Network, List<? extends NicProfile>>", "signature": "LinkedHashMap<Network, List<? extends NicProfile>> configureDefaultNics(final RouterDeploymentDefinition routerDeploymentDefinition)", "full_signature": "@Override public LinkedHashMap<Network, List<? extends NicProfile>> configureDefaultNics(final RouterDeploymentDefinition routerDeploymentDefinition)", "class_method_signature": "NetworkHelperImpl.configureDefaultNics(final RouterDeploymentDefinition routerDeploymentDefinition)", "testcase": false, "constructor": false}, {"identifier": "configureGuestNic", "parameters": "(final RouterDeploymentDefinition routerDeploymentDefinition)", "modifiers": "@Override public", "return": "LinkedHashMap<Network, List<? extends NicProfile>>", "signature": "LinkedHashMap<Network, List<? extends NicProfile>> configureGuestNic(final RouterDeploymentDefinition routerDeploymentDefinition)", "full_signature": "@Override public LinkedHashMap<Network, List<? extends NicProfile>> configureGuestNic(final RouterDeploymentDefinition routerDeploymentDefinition)", "class_method_signature": "NetworkHelperImpl.configureGuestNic(final RouterDeploymentDefinition routerDeploymentDefinition)", "testcase": false, "constructor": false}, {"identifier": "reallocateRouterNetworks", "parameters": "(final RouterDeploymentDefinition routerDeploymentDefinition, final VirtualRouter router, final VMTemplateVO template, final HypervisorType hType)", "modifiers": "@Override public", "return": "void", "signature": "void reallocateRouterNetworks(final RouterDeploymentDefinition routerDeploymentDefinition, final VirtualRouter router, final VMTemplateVO template, final HypervisorType hType)", "full_signature": "@Override public void reallocateRouterNetworks(final RouterDeploymentDefinition routerDeploymentDefinition, final VirtualRouter router, final VMTemplateVO template, final HypervisorType hType)", "class_method_signature": "NetworkHelperImpl.reallocateRouterNetworks(final RouterDeploymentDefinition routerDeploymentDefinition, final VirtualRouter router, final VMTemplateVO template, final HypervisorType hType)", "testcase": false, "constructor": false}, {"identifier": "setSystemAccount", "parameters": "(final Account systemAccount)", "modifiers": "public static", "return": "void", "signature": "void setSystemAccount(final Account systemAccount)", "full_signature": "public static void setSystemAccount(final Account systemAccount)", "class_method_signature": "NetworkHelperImpl.setSystemAccount(final Account systemAccount)", "testcase": false, "constructor": false}, {"identifier": "setVMInstanceName", "parameters": "(final String vmInstanceName)", "modifiers": "public static", "return": "void", "signature": "void setVMInstanceName(final String vmInstanceName)", "full_signature": "public static void setVMInstanceName(final String vmInstanceName)", "class_method_signature": "NetworkHelperImpl.setVMInstanceName(final String vmInstanceName)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/network/router/NetworkHelperImpl.java"}, "focal_method": {"identifier": "sendCommandsToRouter", "parameters": "(final VirtualRouter router, final Commands cmds)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean sendCommandsToRouter(final VirtualRouter router, final Commands cmds) throws AgentUnavailableException, ResourceUnavailableException {\n        if (!checkRouterVersion(router)) {\n            s_logger.debug(\"Router requires upgrade. Unable to send command to router:\" + router.getId() + \", router template version : \" + router.getTemplateVersion()\n                    + \", minimal required version : \" + NetworkOrchestrationService.MinVRVersion.valueIn(router.getDataCenterId()));\n            throw new ResourceUnavailableException(\"Unable to send command. Router requires upgrade\", VirtualRouter.class, router.getId());\n        }\n        Answer[] answers = null;\n        try {\n            answers = _agentMgr.send(router.getHostId(), cmds);\n        } catch (final OperationTimedoutException e) {\n            s_logger.warn(\"Timed Out\", e);\n            throw new AgentUnavailableException(\"Unable to send commands to virtual router \", router.getHostId(), e);\n        }\n\n        if (answers == null || answers.length != cmds.size()) {\n            return false;\n        }\n\n        // FIXME: Have to return state for individual command in the future\n        boolean result = true;\n        for (final Answer answer : answers) {\n            if (!answer.getResult()) {\n                result = false;\n                break;\n            }\n        }\n        return result;\n    }", "signature": "boolean sendCommandsToRouter(final VirtualRouter router, final Commands cmds)", "full_signature": "@Override public boolean sendCommandsToRouter(final VirtualRouter router, final Commands cmds)", "class_method_signature": "NetworkHelperImpl.sendCommandsToRouter(final VirtualRouter router, final Commands cmds)", "testcase": false, "constructor": false, "invocations": ["checkRouterVersion", "debug", "getId", "getTemplateVersion", "valueIn", "getDataCenterId", "getId", "send", "getHostId", "warn", "getHostId", "size", "getResult"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}