{"test_class": {"identifier": "PartitionSpecTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/nextdoor/bender/partition/PartitionSpecTest.java"}, "test_case": {"identifier": "testStatic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testStatic() {\n    PartitionSpec spec =\n        new PartitionSpec(\"test\", Collections.emptyList(), Interpreter.STATIC, \"static\", 0);\n    assertEquals(\"static\", spec.interpret(\"\"));\n  }", "signature": "void testStatic()", "full_signature": "@Test public void testStatic()", "class_method_signature": "PartitionSpecTest.testStatic()", "testcase": true, "constructor": false, "invocations": ["emptyList", "assertEquals", "interpret"]}, "focal_class": {"identifier": "PartitionSpec", "superclass": "", "interfaces": "", "fields": [{"original_string": "@JsonSchemaDescription(\"Value to use as the key for the partition.\")\n  @JsonProperty(required = true)\n  private String name;", "modifier": "@JsonSchemaDescription(\"Value to use as the key for the partition.\")\n  @JsonProperty(required = true)\n  private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "@JsonSchemaDescription(\"Fields to use for the value of the partition.\")\n  private List<String> sources = Collections.emptyList();", "modifier": "@JsonSchemaDescription(\"Fields to use for the value of the partition.\")\n  private", "type": "List<String>", "declarator": "sources = Collections.emptyList()", "var_name": "sources"}, {"original_string": "@JsonSchemaDescription(\"Interpreter to use on the partition value.\")\n  @JsonProperty(required = true)\n  @JsonSchemaDefault(\"STRING\")\n  private Interpreter interpreter = Interpreter.STRING;", "modifier": "@JsonSchemaDescription(\"Interpreter to use on the partition value.\")\n  @JsonProperty(required = true)\n  @JsonSchemaDefault(\"STRING\")\n  private", "type": "Interpreter", "declarator": "interpreter = Interpreter.STRING", "var_name": "interpreter"}, {"original_string": "@JsonSchemaDescription(\"Java date format to use when using a time based interpreter.\")\n  @JsonProperty(required = false)\n  private String format = null;", "modifier": "@JsonSchemaDescription(\"Java date format to use when using a time based interpreter.\")\n  @JsonProperty(required = false)\n  private", "type": "String", "declarator": "format = null", "var_name": "format"}, {"original_string": "@JsonSchemaDescription(\"Basic string formatting.\")\n  @JsonProperty(required = false)\n  @JsonSchemaDefault(\"NONE\")\n  private StringFormat stringFormat = StringFormat.NONE;", "modifier": "@JsonSchemaDescription(\"Basic string formatting.\")\n  @JsonProperty(required = false)\n  @JsonSchemaDefault(\"NONE\")\n  private", "type": "StringFormat", "declarator": "stringFormat = StringFormat.NONE", "var_name": "stringFormat"}, {"original_string": "private DateTimeFormatter dateTimeFormatter;", "modifier": "private", "type": "DateTimeFormatter", "declarator": "dateTimeFormatter", "var_name": "dateTimeFormatter"}, {"original_string": "@JsonSchemaDescription(\"Rounds time down to value prior to formatting. For example 300 would round down to nearest 5 minutes. If set to 0 then rounding is disabled.\")\n  @JsonSchemaDefault(value = \"0\")\n  @JsonProperty(required = false)\n  @Min(0)\n  @Max(86400)\n  private Integer secondsToRound = 0;", "modifier": "@JsonSchemaDescription(\"Rounds time down to value prior to formatting. For example 300 would round down to nearest 5 minutes. If set to 0 then rounding is disabled.\")\n  @JsonSchemaDefault(value = \"0\")\n  @JsonProperty(required = false)\n  @Min(0)\n  @Max(86400)\n  private", "type": "Integer", "declarator": "secondsToRound = 0", "var_name": "secondsToRound"}], "methods": [{"identifier": "PartitionSpec", "parameters": "()", "modifiers": "public", "return": "", "signature": " PartitionSpec()", "full_signature": "public  PartitionSpec()", "class_method_signature": "PartitionSpec.PartitionSpec()", "testcase": false, "constructor": true}, {"identifier": "PartitionSpec", "parameters": "(String name, List<String> sources, Interpreter interpreter, String format,\n      int secondsToRound)", "modifiers": "public", "return": "", "signature": " PartitionSpec(String name, List<String> sources, Interpreter interpreter, String format,\n      int secondsToRound)", "full_signature": "public  PartitionSpec(String name, List<String> sources, Interpreter interpreter, String format,\n      int secondsToRound)", "class_method_signature": "PartitionSpec.PartitionSpec(String name, List<String> sources, Interpreter interpreter, String format,\n      int secondsToRound)", "testcase": false, "constructor": true}, {"identifier": "PartitionSpec", "parameters": "(String name, List<String> sources, Interpreter interpreter)", "modifiers": "public", "return": "", "signature": " PartitionSpec(String name, List<String> sources, Interpreter interpreter)", "full_signature": "public  PartitionSpec(String name, List<String> sources, Interpreter interpreter)", "class_method_signature": "PartitionSpec.PartitionSpec(String name, List<String> sources, Interpreter interpreter)", "testcase": false, "constructor": true}, {"identifier": "PartitionSpec", "parameters": "(String name, List<String> sources)", "modifiers": "public", "return": "", "signature": " PartitionSpec(String name, List<String> sources)", "full_signature": "public  PartitionSpec(String name, List<String> sources)", "class_method_signature": "PartitionSpec.PartitionSpec(String name, List<String> sources)", "testcase": false, "constructor": true}, {"identifier": "PartitionSpec", "parameters": "(String name, String... sources)", "modifiers": "public", "return": "", "signature": " PartitionSpec(String name, String... sources)", "full_signature": "public  PartitionSpec(String name, String... sources)", "class_method_signature": "PartitionSpec.PartitionSpec(String name, String... sources)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "PartitionSpec.getName()", "testcase": false, "constructor": false}, {"identifier": "getSources", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getSources()", "full_signature": "public List<String> getSources()", "class_method_signature": "PartitionSpec.getSources()", "testcase": false, "constructor": false}, {"identifier": "getInterpreter", "parameters": "()", "modifiers": "public", "return": "Interpreter", "signature": "Interpreter getInterpreter()", "full_signature": "public Interpreter getInterpreter()", "class_method_signature": "PartitionSpec.getInterpreter()", "testcase": false, "constructor": false}, {"identifier": "getStringFormat", "parameters": "()", "modifiers": "public", "return": "StringFormat", "signature": "StringFormat getStringFormat()", "full_signature": "public StringFormat getStringFormat()", "class_method_signature": "PartitionSpec.getStringFormat()", "testcase": false, "constructor": false}, {"identifier": "setStringFormat", "parameters": "(StringFormat format)", "modifiers": "public", "return": "void", "signature": "void setStringFormat(StringFormat format)", "full_signature": "public void setStringFormat(StringFormat format)", "class_method_signature": "PartitionSpec.setStringFormat(StringFormat format)", "testcase": false, "constructor": false}, {"identifier": "setFormat", "parameters": "(String format)", "modifiers": "public", "return": "void", "signature": "void setFormat(String format)", "full_signature": "public void setFormat(String format)", "class_method_signature": "PartitionSpec.setFormat(String format)", "testcase": false, "constructor": false}, {"identifier": "getFormat", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFormat()", "full_signature": "public String getFormat()", "class_method_signature": "PartitionSpec.getFormat()", "testcase": false, "constructor": false}, {"identifier": "setDateTimeFormatter", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setDateTimeFormatter()", "full_signature": "private void setDateTimeFormatter()", "class_method_signature": "PartitionSpec.setDateTimeFormatter()", "testcase": false, "constructor": false}, {"identifier": "interpret", "parameters": "(String input)", "modifiers": "public", "return": "String", "signature": "String interpret(String input)", "full_signature": "public String interpret(String input)", "class_method_signature": "PartitionSpec.interpret(String input)", "testcase": false, "constructor": false}, {"identifier": "getFormattedString", "parameters": "(String input)", "modifiers": "protected", "return": "String", "signature": "String getFormattedString(String input)", "full_signature": "protected String getFormattedString(String input)", "class_method_signature": "PartitionSpec.getFormattedString(String input)", "testcase": false, "constructor": false}, {"identifier": "getFormattedTime", "parameters": "(String input)", "modifiers": "protected", "return": "String", "signature": "String getFormattedTime(String input)", "full_signature": "protected String getFormattedTime(String input)", "class_method_signature": "PartitionSpec.getFormattedTime(String input)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "PartitionSpec.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/nextdoor/bender/partition/PartitionSpec.java"}, "focal_method": {"identifier": "interpret", "parameters": "(String input)", "modifiers": "public", "return": "String", "body": "public String interpret(String input) {\n    switch (this.interpreter) {\n      case STRING:\n        return getFormattedString(input);\n      case STATIC:\n        return this.format;\n      default:\n        return getFormattedTime(input);\n    }\n  }", "signature": "String interpret(String input)", "full_signature": "public String interpret(String input)", "class_method_signature": "PartitionSpec.interpret(String input)", "testcase": false, "constructor": false, "invocations": ["getFormattedString", "getFormattedTime"]}, "repository": {"repo_id": 75955378, "url": "https://github.com/Nextdoor/bender", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 163, "size": 1503, "license": "licensed"}}