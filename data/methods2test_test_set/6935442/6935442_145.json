{"test_class": {"identifier": "MethodFinderUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/MethodFinderUtilsTest.java"}, "test_case": {"identifier": "whenExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenExists() throws Exception {\n\n        final Map<Class<?>, Optional<Method>> cache = _Maps.newHashMap();\n        final Method method = MethodFinderUtils.findAnnotatedMethod(new WithPostConstruct(), PostConstruct.class, cache);\n\n        assertThat(method, is(not(nullValue())));\n        final Optional<Method> actual = cache.get(WithPostConstruct.class);\n        assertThat(actual, is(not(nullValue())));\n        assertThat(actual.isPresent(), is(true));\n        assertThat(actual.orElse(null), is(method));\n    }", "signature": "void whenExists()", "full_signature": "@Test public void whenExists()", "class_method_signature": "MethodFinderUtilsTest.whenExists()", "testcase": true, "constructor": false, "invocations": ["newHashMap", "findAnnotatedMethod", "assertThat", "is", "not", "nullValue", "get", "assertThat", "is", "not", "nullValue", "assertThat", "isPresent", "is", "assertThat", "orElse", "is"]}, "focal_class": {"identifier": "MethodFinderUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Class<?>[] BOOLEAN_TYPES = new Class<?>[]{\n        boolean.class};", "modifier": "private static final", "type": "Class<?>[]", "declarator": "BOOLEAN_TYPES = new Class<?>[]{\n        boolean.class}", "var_name": "BOOLEAN_TYPES"}, {"original_string": "private static final Class<?>[] TEXT_TYPES = new Class<?>[]{\n        String.class, \n        TranslatableString.class};", "modifier": "private static final", "type": "Class<?>[]", "declarator": "TEXT_TYPES = new Class<?>[]{\n        String.class, \n        TranslatableString.class}", "var_name": "TEXT_TYPES"}], "methods": [{"identifier": "MethodFinderUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " MethodFinderUtils()", "full_signature": "private  MethodFinderUtils()", "class_method_signature": "MethodFinderUtils.MethodFinderUtils()", "testcase": false, "constructor": true}, {"identifier": "findMethod", "parameters": "(\n            final Class<?> type,\n            final String name,\n            final Class<?> expectedReturnType,\n            final Class<?>[] paramTypes)", "modifiers": "public static", "return": "Method", "signature": "Method findMethod(\n            final Class<?> type,\n            final String name,\n            final Class<?> expectedReturnType,\n            final Class<?>[] paramTypes)", "full_signature": "public static Method findMethod(\n            final Class<?> type,\n            final String name,\n            final Class<?> expectedReturnType,\n            final Class<?>[] paramTypes)", "class_method_signature": "MethodFinderUtils.findMethod(\n            final Class<?> type,\n            final String name,\n            final Class<?> expectedReturnType,\n            final Class<?>[] paramTypes)", "testcase": false, "constructor": false}, {"identifier": "findMethod_returningAnyOf", "parameters": "(\n            final Class<?>[] returnTypes,\n            final Class<?> type,\n            final String name,\n            final Class<?>[] paramTypes)", "modifiers": "public static", "return": "Method", "signature": "Method findMethod_returningAnyOf(\n            final Class<?>[] returnTypes,\n            final Class<?> type,\n            final String name,\n            final Class<?>[] paramTypes)", "full_signature": "public static Method findMethod_returningAnyOf(\n            final Class<?>[] returnTypes,\n            final Class<?> type,\n            final String name,\n            final Class<?>[] paramTypes)", "class_method_signature": "MethodFinderUtils.findMethod_returningAnyOf(\n            final Class<?>[] returnTypes,\n            final Class<?> type,\n            final String name,\n            final Class<?>[] paramTypes)", "testcase": false, "constructor": false}, {"identifier": "findNoArgMethod", "parameters": "(final Class<?> type, final String name, final Class<?> returnType)", "modifiers": "public static", "return": "Optional<Method>", "signature": "Optional<Method> findNoArgMethod(final Class<?> type, final String name, final Class<?> returnType)", "full_signature": "public static Optional<Method> findNoArgMethod(final Class<?> type, final String name, final Class<?> returnType)", "class_method_signature": "MethodFinderUtils.findNoArgMethod(final Class<?> type, final String name, final Class<?> returnType)", "testcase": false, "constructor": false}, {"identifier": "findSingleArgMethod", "parameters": "(final Class<?> type, final String name, final Class<?> returnType)", "modifiers": "public static", "return": "Optional<Method>", "signature": "Optional<Method> findSingleArgMethod(final Class<?> type, final String name, final Class<?> returnType)", "full_signature": "public static Optional<Method> findSingleArgMethod(final Class<?> type, final String name, final Class<?> returnType)", "class_method_signature": "MethodFinderUtils.findSingleArgMethod(final Class<?> type, final String name, final Class<?> returnType)", "testcase": false, "constructor": false}, {"identifier": "streamMethods", "parameters": "(final Class<?> type, final Can<String> names, final Class<?> returnType)", "modifiers": "public static", "return": "Stream<Method>", "signature": "Stream<Method> streamMethods(final Class<?> type, final Can<String> names, final Class<?> returnType)", "full_signature": "public static Stream<Method> streamMethods(final Class<?> type, final Can<String> names, final Class<?> returnType)", "class_method_signature": "MethodFinderUtils.streamMethods(final Class<?> type, final Can<String> names, final Class<?> returnType)", "testcase": false, "constructor": false}, {"identifier": "findMethodsWithAnnotation", "parameters": "(\n            final Class<?> type, \n            final Class<? extends Annotation> annotationClass)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> findMethodsWithAnnotation(\n            final Class<?> type, \n            final Class<? extends Annotation> annotationClass)", "full_signature": "public static List<Method> findMethodsWithAnnotation(\n            final Class<?> type, \n            final Class<? extends Annotation> annotationClass)", "class_method_signature": "MethodFinderUtils.findMethodsWithAnnotation(\n            final Class<?> type, \n            final Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "removeMethod", "parameters": "(final MethodRemover methodRemover, final Method method)", "modifiers": "public static", "return": "void", "signature": "void removeMethod(final MethodRemover methodRemover, final Method method)", "full_signature": "public static void removeMethod(final MethodRemover methodRemover, final Method method)", "class_method_signature": "MethodFinderUtils.removeMethod(final MethodRemover methodRemover, final Method method)", "testcase": false, "constructor": false}, {"identifier": "paramTypesOrNull", "parameters": "(final Class<?> type)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] paramTypesOrNull(final Class<?> type)", "full_signature": "public static Class<?>[] paramTypesOrNull(final Class<?> type)", "class_method_signature": "MethodFinderUtils.paramTypesOrNull(final Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "allParametersOfSameType", "parameters": "(final Class<?>[] params)", "modifiers": "public static", "return": "boolean", "signature": "boolean allParametersOfSameType(final Class<?>[] params)", "full_signature": "public static boolean allParametersOfSameType(final Class<?>[] params)", "class_method_signature": "MethodFinderUtils.allParametersOfSameType(final Class<?>[] params)", "testcase": false, "constructor": false}, {"identifier": "findAnnotatedMethod", "parameters": "(\n            final Object pojo,\n            final Class<? extends Annotation> annotationClass,\n            final Map<Class<?>, Optional<Method>> methods)", "modifiers": "public static", "return": "Method", "signature": "Method findAnnotatedMethod(\n            final Object pojo,\n            final Class<? extends Annotation> annotationClass,\n            final Map<Class<?>, Optional<Method>> methods)", "full_signature": "public static Method findAnnotatedMethod(\n            final Object pojo,\n            final Class<? extends Annotation> annotationClass,\n            final Map<Class<?>, Optional<Method>> methods)", "class_method_signature": "MethodFinderUtils.findAnnotatedMethod(\n            final Object pojo,\n            final Class<? extends Annotation> annotationClass,\n            final Map<Class<?>, Optional<Method>> methods)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(\n            final Class<?> clz,\n            final Class<? extends Annotation> annotationClass,\n            final Map<Class<?>, Optional<Method>> postConstructMethods)", "modifiers": "private static", "return": "Optional<Method>", "signature": "Optional<Method> search(\n            final Class<?> clz,\n            final Class<? extends Annotation> annotationClass,\n            final Map<Class<?>, Optional<Method>> postConstructMethods)", "full_signature": "private static Optional<Method> search(\n            final Class<?> clz,\n            final Class<? extends Annotation> annotationClass,\n            final Map<Class<?>, Optional<Method>> postConstructMethods)", "class_method_signature": "MethodFinderUtils.search(\n            final Class<?> clz,\n            final Class<? extends Annotation> annotationClass,\n            final Map<Class<?>, Optional<Method>> postConstructMethods)", "testcase": false, "constructor": false}, {"identifier": "findMethod_returningBoolean", "parameters": "(\n            final Class<?> type,\n            final String name,\n            final Class<?>[] paramTypes)", "modifiers": "public static", "return": "Method", "signature": "Method findMethod_returningBoolean(\n            final Class<?> type,\n            final String name,\n            final Class<?>[] paramTypes)", "full_signature": "public static Method findMethod_returningBoolean(\n            final Class<?> type,\n            final String name,\n            final Class<?>[] paramTypes)", "class_method_signature": "MethodFinderUtils.findMethod_returningBoolean(\n            final Class<?> type,\n            final String name,\n            final Class<?>[] paramTypes)", "testcase": false, "constructor": false}, {"identifier": "findMethod_returningText", "parameters": "(\n            final Class<?> type,\n            final String name,\n            final Class<?>[] paramTypes)", "modifiers": "public static", "return": "Method", "signature": "Method findMethod_returningText(\n            final Class<?> type,\n            final String name,\n            final Class<?>[] paramTypes)", "full_signature": "public static Method findMethod_returningText(\n            final Class<?> type,\n            final String name,\n            final Class<?>[] paramTypes)", "class_method_signature": "MethodFinderUtils.findMethod_returningText(\n            final Class<?> type,\n            final String name,\n            final Class<?>[] paramTypes)", "testcase": false, "constructor": false}, {"identifier": "findMethod_returningNonScalar", "parameters": "(\n            final Class<?> type,\n            final String name, \n            final Class<?> elementReturnType,\n            final Class<?>[] paramTypes)", "modifiers": "public static", "return": "Method", "signature": "Method findMethod_returningNonScalar(\n            final Class<?> type,\n            final String name, \n            final Class<?> elementReturnType,\n            final Class<?>[] paramTypes)", "full_signature": "public static Method findMethod_returningNonScalar(\n            final Class<?> type,\n            final String name, \n            final Class<?> elementReturnType,\n            final Class<?>[] paramTypes)", "class_method_signature": "MethodFinderUtils.findMethod_returningNonScalar(\n            final Class<?> type,\n            final String name, \n            final Class<?> elementReturnType,\n            final Class<?>[] paramTypes)", "testcase": false, "constructor": false}, {"identifier": "findMethodWithPPMArg", "parameters": "(\n            final Class<?> type, \n            final String name, \n            final Class<?> returnType,\n            final Class<?>[] paramTypes,\n            final Can<Class<?>> additionalParamTypes)", "modifiers": "public static", "return": "MethodAndPpmConstructor", "signature": "MethodAndPpmConstructor findMethodWithPPMArg(\n            final Class<?> type, \n            final String name, \n            final Class<?> returnType,\n            final Class<?>[] paramTypes,\n            final Can<Class<?>> additionalParamTypes)", "full_signature": "public static MethodAndPpmConstructor findMethodWithPPMArg(\n            final Class<?> type, \n            final String name, \n            final Class<?> returnType,\n            final Class<?>[] paramTypes,\n            final Can<Class<?>> additionalParamTypes)", "class_method_signature": "MethodFinderUtils.findMethodWithPPMArg(\n            final Class<?> type, \n            final String name, \n            final Class<?> returnType,\n            final Class<?>[] paramTypes,\n            final Can<Class<?>> additionalParamTypes)", "testcase": false, "constructor": false}, {"identifier": "findMethodWithPPMArg_returningAnyOf", "parameters": "(\n            final Class<?>[] returnTypes,\n            final Class<?> type,\n            final String name,\n            final Class<?>[] paramTypes,\n            final Can<Class<?>> additionalParamTypes)", "modifiers": "public static", "return": "MethodAndPpmConstructor", "signature": "MethodAndPpmConstructor findMethodWithPPMArg_returningAnyOf(\n            final Class<?>[] returnTypes,\n            final Class<?> type,\n            final String name,\n            final Class<?>[] paramTypes,\n            final Can<Class<?>> additionalParamTypes)", "full_signature": "public static MethodAndPpmConstructor findMethodWithPPMArg_returningAnyOf(\n            final Class<?>[] returnTypes,\n            final Class<?> type,\n            final String name,\n            final Class<?>[] paramTypes,\n            final Can<Class<?>> additionalParamTypes)", "class_method_signature": "MethodFinderUtils.findMethodWithPPMArg_returningAnyOf(\n            final Class<?>[] returnTypes,\n            final Class<?> type,\n            final String name,\n            final Class<?>[] paramTypes,\n            final Can<Class<?>> additionalParamTypes)", "testcase": false, "constructor": false}, {"identifier": "findMethodWithPPMArg_returningBoolean", "parameters": "(\n            final Class<?> type, \n            final String name,\n            final Class<?>[] paramTypes,\n            final Can<Class<?>> additionalParamTypes)", "modifiers": "public static", "return": "MethodAndPpmConstructor", "signature": "MethodAndPpmConstructor findMethodWithPPMArg_returningBoolean(\n            final Class<?> type, \n            final String name,\n            final Class<?>[] paramTypes,\n            final Can<Class<?>> additionalParamTypes)", "full_signature": "public static MethodAndPpmConstructor findMethodWithPPMArg_returningBoolean(\n            final Class<?> type, \n            final String name,\n            final Class<?>[] paramTypes,\n            final Can<Class<?>> additionalParamTypes)", "class_method_signature": "MethodFinderUtils.findMethodWithPPMArg_returningBoolean(\n            final Class<?> type, \n            final String name,\n            final Class<?>[] paramTypes,\n            final Can<Class<?>> additionalParamTypes)", "testcase": false, "constructor": false}, {"identifier": "findMethodWithPPMArg_returningText", "parameters": "(\n            final Class<?> type, \n            final String name,\n            final Class<?>[] paramTypes,\n            final Can<Class<?>> additionalParamTypes)", "modifiers": "public static", "return": "MethodAndPpmConstructor", "signature": "MethodAndPpmConstructor findMethodWithPPMArg_returningText(\n            final Class<?> type, \n            final String name,\n            final Class<?>[] paramTypes,\n            final Can<Class<?>> additionalParamTypes)", "full_signature": "public static MethodAndPpmConstructor findMethodWithPPMArg_returningText(\n            final Class<?> type, \n            final String name,\n            final Class<?>[] paramTypes,\n            final Can<Class<?>> additionalParamTypes)", "class_method_signature": "MethodFinderUtils.findMethodWithPPMArg_returningText(\n            final Class<?> type, \n            final String name,\n            final Class<?>[] paramTypes,\n            final Can<Class<?>> additionalParamTypes)", "testcase": false, "constructor": false}, {"identifier": "findMethodWithPPMArg_returningNonScalar", "parameters": "(\n            final Class<?> type, \n            final String name, \n            final Class<?> elementReturnType,\n            final Class<?>[] paramTypes, \n            final Can<Class<?>> additionalParamTypes)", "modifiers": "public static", "return": "MethodAndPpmConstructor", "signature": "MethodAndPpmConstructor findMethodWithPPMArg_returningNonScalar(\n            final Class<?> type, \n            final String name, \n            final Class<?> elementReturnType,\n            final Class<?>[] paramTypes, \n            final Can<Class<?>> additionalParamTypes)", "full_signature": "public static MethodAndPpmConstructor findMethodWithPPMArg_returningNonScalar(\n            final Class<?> type, \n            final String name, \n            final Class<?> elementReturnType,\n            final Class<?>[] paramTypes, \n            final Can<Class<?>> additionalParamTypes)", "class_method_signature": "MethodFinderUtils.findMethodWithPPMArg_returningNonScalar(\n            final Class<?> type, \n            final String name, \n            final Class<?> elementReturnType,\n            final Class<?>[] paramTypes, \n            final Can<Class<?>> additionalParamTypes)", "testcase": false, "constructor": false}], "file": "core/metamodel/src/main/java/org/apache/isis/core/metamodel/facets/MethodFinderUtils.java"}, "focal_method": {"identifier": "findAnnotatedMethod", "parameters": "(\n            final Object pojo,\n            final Class<? extends Annotation> annotationClass,\n            final Map<Class<?>, Optional<Method>> methods)", "modifiers": "public static", "return": "Method", "body": "public static Method findAnnotatedMethod(\n            final Object pojo,\n            final Class<? extends Annotation> annotationClass,\n            final Map<Class<?>, Optional<Method>> methods) {\n\n        val clz = pojo.getClass();\n        val annotatedMethodIfAny = \n                methods.computeIfAbsent(clz, __->search(clz, annotationClass, methods));\n        return annotatedMethodIfAny.orElse(null);\n    }", "signature": "Method findAnnotatedMethod(\n            final Object pojo,\n            final Class<? extends Annotation> annotationClass,\n            final Map<Class<?>, Optional<Method>> methods)", "full_signature": "public static Method findAnnotatedMethod(\n            final Object pojo,\n            final Class<? extends Annotation> annotationClass,\n            final Map<Class<?>, Optional<Method>> methods)", "class_method_signature": "MethodFinderUtils.findAnnotatedMethod(\n            final Object pojo,\n            final Class<? extends Annotation> annotationClass,\n            final Map<Class<?>, Optional<Method>> methods)", "testcase": false, "constructor": false, "invocations": ["getClass", "computeIfAbsent", "search", "orElse"]}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}