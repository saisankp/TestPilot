{"test_class": {"identifier": "TaintDataflowEngineTest", "superclass": "extends BaseDetectorTest", "interfaces": "", "fields": [], "file": "findsecbugs-plugin/src/test/java/com/h3xstream/findsecbugs/taintanalysis/TaintDataflowEngineTest.java"}, "test_case": {"identifier": "testDerivedConfiguration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDerivedConfiguration() throws Exception {\n\n        FindSecBugsGlobalConfig.getInstance().setDebugOutputTaintConfigs(true);\n\n        TaintDataflowEngine.writer = mock(Writer.class);\n\n        //Locate test code\n        String[] files = {\n                getClassFilePath(\"testcode/command/CommandInjection\"),\n                getClassFilePath(\"testcode/command/MoreMethods\"),\n                getClassFilePath(\"testcode/command/SubClass\")\n        };\n\n        //Run the analysis\n        EasyBugReporter reporter = spy(new BaseDetectorTest.SecurityReporter());\n        analyze(files, reporter);\n\n        verify(TaintDataflowEngine.writer,atLeast(2)).append(anyString());\n\n        FindSecBugsGlobalConfig.getInstance().setDebugOutputTaintConfigs(false);\n    }", "signature": "void testDerivedConfiguration()", "full_signature": "@Test public void testDerivedConfiguration()", "class_method_signature": "TaintDataflowEngineTest.testDerivedConfiguration()", "testcase": true, "constructor": false, "invocations": ["setDebugOutputTaintConfigs", "getInstance", "mock", "getClassFilePath", "getClassFilePath", "getClassFilePath", "spy", "analyze", "append", "verify", "atLeast", "anyString", "setDebugOutputTaintConfigs", "getInstance"]}, "focal_class": {"identifier": "TaintDataflowEngine", "superclass": "", "interfaces": "implements IMethodAnalysisEngine<TaintDataflow>", "fields": [{"original_string": "private static final FindSecBugsGlobalConfig CONFIG = FindSecBugsGlobalConfig.getInstance();", "modifier": "private static final", "type": "FindSecBugsGlobalConfig", "declarator": "CONFIG = FindSecBugsGlobalConfig.getInstance()", "var_name": "CONFIG"}, {"original_string": "private static final Logger LOGGER = Logger.getLogger(TaintDataflowEngine.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(TaintDataflowEngine.class.getName())", "var_name": "LOGGER"}, {"original_string": "private static final String TAINT_CONFIG_PATH = \"taint-config/\";", "modifier": "private static final", "type": "String", "declarator": "TAINT_CONFIG_PATH = \"taint-config/\"", "var_name": "TAINT_CONFIG_PATH"}, {"original_string": "private static final String[] TAINT_CONFIG_FILENAMES = {\n        \"android-taint-sql.txt\",\n        \"collections.txt\",\n        \"dropwizard.txt\",\n        \"guava.txt\",\n        \"java-ee.txt\",\n        \"java-lang.txt\",\n        \"java-net.txt\",\n        \"jetty.txt\",\n        \"logging.txt\",\n        \"other.txt\",\n        \"portlet.txt\",\n        \"scala.txt\",\n        \"sonarqube.txt\",\n        \"struts2-taint.txt\",\n        \"wicket.txt\",\n    };", "modifier": "private static final", "type": "String[]", "declarator": "TAINT_CONFIG_FILENAMES = {\n        \"android-taint-sql.txt\",\n        \"collections.txt\",\n        \"dropwizard.txt\",\n        \"guava.txt\",\n        \"java-ee.txt\",\n        \"java-lang.txt\",\n        \"java-net.txt\",\n        \"jetty.txt\",\n        \"logging.txt\",\n        \"other.txt\",\n        \"portlet.txt\",\n        \"scala.txt\",\n        \"sonarqube.txt\",\n        \"struts2-taint.txt\",\n        \"wicket.txt\",\n    }", "var_name": "TAINT_CONFIG_FILENAMES"}, {"original_string": "private static final String SAFE_ENCODERS_PATH = \"safe-encoders/\";", "modifier": "private static final", "type": "String", "declarator": "SAFE_ENCODERS_PATH = \"safe-encoders/\"", "var_name": "SAFE_ENCODERS_PATH"}, {"original_string": "private static final String[] SAFE_ENCODERS_FILENAMES = {\n        \"owasp.txt\",\n        \"apache-commons.txt\",\n        \"other.txt\"\n    };", "modifier": "private static final", "type": "String[]", "declarator": "SAFE_ENCODERS_FILENAMES = {\n        \"owasp.txt\",\n        \"apache-commons.txt\",\n        \"other.txt\"\n    }", "var_name": "SAFE_ENCODERS_FILENAMES"}, {"original_string": "private final TaintConfig taintConfig = new TaintConfig();", "modifier": "private final", "type": "TaintConfig", "declarator": "taintConfig = new TaintConfig()", "var_name": "taintConfig"}, {"original_string": "@SuppressFBWarnings(value=\"MS_SHOULD_BE_REFACTORED_TO_BE_FINAL\", justification=\"Can't be final because FileOutputStream needs a try-catch.\")\n    protected static Writer writer = null;", "modifier": "@SuppressFBWarnings(value=\"MS_SHOULD_BE_REFACTORED_TO_BE_FINAL\", justification=\"Can't be final because FileOutputStream needs a try-catch.\")\n    protected static", "type": "Writer", "declarator": "writer = null", "var_name": "writer"}, {"original_string": "private static List<TaintFrameAdditionalVisitor> visitors = new ArrayList<TaintFrameAdditionalVisitor>();", "modifier": "private static", "type": "List<TaintFrameAdditionalVisitor>", "declarator": "visitors = new ArrayList<TaintFrameAdditionalVisitor>()", "var_name": "visitors"}], "methods": [{"identifier": "TaintDataflowEngine", "parameters": "()", "modifiers": "public", "return": "", "signature": " TaintDataflowEngine()", "full_signature": "public  TaintDataflowEngine()", "class_method_signature": "TaintDataflowEngine.TaintDataflowEngine()", "testcase": false, "constructor": true}, {"identifier": "registerAdditionalVisitor", "parameters": "(TaintFrameAdditionalVisitor visitor)", "modifiers": "public static", "return": "void", "signature": "void registerAdditionalVisitor(TaintFrameAdditionalVisitor visitor)", "full_signature": "public static void registerAdditionalVisitor(TaintFrameAdditionalVisitor visitor)", "class_method_signature": "TaintDataflowEngine.registerAdditionalVisitor(TaintFrameAdditionalVisitor visitor)", "testcase": false, "constructor": false}, {"identifier": "loadTaintConfig", "parameters": "(String path, boolean checkRewrite)", "modifiers": "private", "return": "void", "signature": "void loadTaintConfig(String path, boolean checkRewrite)", "full_signature": "private void loadTaintConfig(String path, boolean checkRewrite)", "class_method_signature": "TaintDataflowEngine.loadTaintConfig(String path, boolean checkRewrite)", "testcase": false, "constructor": false}, {"identifier": "addCustomConfig", "parameters": "(String path)", "modifiers": "private", "return": "void", "signature": "void addCustomConfig(String path)", "full_signature": "private void addCustomConfig(String path)", "class_method_signature": "TaintDataflowEngine.addCustomConfig(String path)", "testcase": false, "constructor": false}, {"identifier": "analyze", "parameters": "(IAnalysisCache cache, MethodDescriptor descriptor)", "modifiers": "@Override public", "return": "TaintDataflow", "signature": "TaintDataflow analyze(IAnalysisCache cache, MethodDescriptor descriptor)", "full_signature": "@Override public TaintDataflow analyze(IAnalysisCache cache, MethodDescriptor descriptor)", "class_method_signature": "TaintDataflowEngine.analyze(IAnalysisCache cache, MethodDescriptor descriptor)", "testcase": false, "constructor": false}, {"identifier": "writeTaint", "parameters": "(Taint taint)", "modifiers": "private", "return": "void", "signature": "void writeTaint(Taint taint)", "full_signature": "private void writeTaint(Taint taint)", "class_method_signature": "TaintDataflowEngine.writeTaint(Taint taint)", "testcase": false, "constructor": false}, {"identifier": "getSlashedMethodName", "parameters": "(MethodGen methodGen)", "modifiers": "private static", "return": "String", "signature": "String getSlashedMethodName(MethodGen methodGen)", "full_signature": "private static String getSlashedMethodName(MethodGen methodGen)", "class_method_signature": "TaintDataflowEngine.getSlashedMethodName(MethodGen methodGen)", "testcase": false, "constructor": false}, {"identifier": "registerWith", "parameters": "(IAnalysisCache iac)", "modifiers": "@Override public", "return": "void", "signature": "void registerWith(IAnalysisCache iac)", "full_signature": "@Override public void registerWith(IAnalysisCache iac)", "class_method_signature": "TaintDataflowEngine.registerWith(IAnalysisCache iac)", "testcase": false, "constructor": false}], "file": "findsecbugs-plugin/src/main/java/com/h3xstream/findsecbugs/taintanalysis/TaintDataflowEngine.java"}, "focal_method": {"identifier": "analyze", "parameters": "(IAnalysisCache cache, MethodDescriptor descriptor)", "modifiers": "@Override public", "return": "TaintDataflow", "body": "@Override\n    public TaintDataflow analyze(IAnalysisCache cache, MethodDescriptor descriptor)\n            throws CheckedAnalysisException {\n        if(FindSecBugsGlobalConfig.getInstance().isDebugPrintInstructionVisited() || FindSecBugsGlobalConfig.getInstance().isDebugPrintInvocationVisited()) {\n            System.out.println(\"==[ Method: \"+descriptor.getName()+\" ]==\");\n        }\n        CFG cfg = cache.getMethodAnalysis(CFG.class, descriptor);\n        DepthFirstSearch dfs = cache.getMethodAnalysis(DepthFirstSearch.class, descriptor);\n        MethodGen methodGen = cache.getMethodAnalysis(MethodGen.class, descriptor);\n        TaintAnalysis analysis = new TaintAnalysis(methodGen, dfs, descriptor, taintConfig, visitors);\n        TaintDataflow flow = new TaintDataflow(cfg, analysis);\n        flow.execute();\n        analysis.finishAnalysis();\n        if (CONFIG.isDebugOutputTaintConfigs() && writer != null) {\n            String slashedMethodName = getSlashedMethodName(methodGen);\n            TaintMethodConfig derivedConfig = taintConfig.get(slashedMethodName);\n            if (derivedConfig != null) {\n                try {\n                    writer.append(slashedMethodName);\n\n                    Taint outputTaint = derivedConfig.getOutputTaint();\n                    if (outputTaint != null) {\n                        writer.append(':');\n                        writeTaint(outputTaint);\n                    }\n\n                    Map<Integer, Taint> parametersOutputTaints = derivedConfig.getParametersOutputTaints();\n                    if (!parametersOutputTaints.isEmpty()) {\n                        for (Map.Entry<Integer, Taint> parameterTaint : parametersOutputTaints.entrySet()) {\n                            writer.append('^');\n                            writer.append(Integer.toString(parameterTaint.getKey()));\n                            writer.append(':');\n                            writeTaint(parameterTaint.getValue());\n                        }\n                    }\n\n                    writer.append('\\n');\n                    writer.flush();\n                } catch (IOException ex) {\n                    AnalysisContext.logError(\"Cannot write derived configs\", ex);\n                }\n            }\n        }\n        return flow;\n    }", "signature": "TaintDataflow analyze(IAnalysisCache cache, MethodDescriptor descriptor)", "full_signature": "@Override public TaintDataflow analyze(IAnalysisCache cache, MethodDescriptor descriptor)", "class_method_signature": "TaintDataflowEngine.analyze(IAnalysisCache cache, MethodDescriptor descriptor)", "testcase": false, "constructor": false, "invocations": ["isDebugPrintInstructionVisited", "getInstance", "isDebugPrintInvocationVisited", "getInstance", "println", "getName", "getMethodAnalysis", "getMethodAnalysis", "getMethodAnalysis", "execute", "finishAnalysis", "isDebugOutputTaintConfigs", "getSlashedMethodName", "get", "append", "getOutputTaint", "append", "writeTaint", "getParametersOutputTaints", "isEmpty", "entrySet", "append", "append", "toString", "getKey", "append", "writeTaint", "getValue", "append", "flush", "logError"]}, "repository": {"repo_id": 4354801, "url": "https://github.com/find-sec-bugs/find-sec-bugs", "stars": 1292, "created": "5/17/2012 4:07:57 AM +00:00", "updates": "2020-01-27T13:17:10+00:00", "fork": "False", "license": "licensed"}}