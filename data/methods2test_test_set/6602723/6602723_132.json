{"test_class": {"identifier": "TestTimer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HardwareClock mockClock;", "modifier": "private", "type": "HardwareClock", "declarator": "mockClock", "var_name": "mockClock"}, {"original_string": "private Timer impl;", "modifier": "private", "type": "Timer", "declarator": "impl", "var_name": "impl"}], "file": "jrugged-core/src/test/java/org/fishwife/jrugged/clocks/TestTimer.java"}, "test_case": {"identifier": "cannotSetATimerWithASmallerErrorThanClockGranularity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cannotSetATimerWithASmallerErrorThanClockGranularity() {\n        expect(mockClock.getGranularity()).andReturn(1000L).anyTimes();\n        replay(mockClock);\n        assertFalse(impl.set(1000L, 500L));\n        verify(mockClock);\n    }", "signature": "void cannotSetATimerWithASmallerErrorThanClockGranularity()", "full_signature": "@Test public void cannotSetATimerWithASmallerErrorThanClockGranularity()", "class_method_signature": "TestTimer.cannotSetATimerWithASmallerErrorThanClockGranularity()", "testcase": true, "constructor": false, "invocations": ["anyTimes", "andReturn", "expect", "getGranularity", "replay", "assertFalse", "set", "verify"]}, "focal_class": {"identifier": "Timer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HardwareClock clock;", "modifier": "private", "type": "HardwareClock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private boolean wasSet = false;", "modifier": "private", "type": "boolean", "declarator": "wasSet = false", "var_name": "wasSet"}, {"original_string": "private DiscreteInterval targetElapsedTime;", "modifier": "private", "type": "DiscreteInterval", "declarator": "targetElapsedTime", "var_name": "targetElapsedTime"}, {"original_string": "private DiscreteInterval startTime;", "modifier": "private", "type": "DiscreteInterval", "declarator": "startTime", "var_name": "startTime"}, {"original_string": "private DiscreteInterval targetEndTime;", "modifier": "private", "type": "DiscreteInterval", "declarator": "targetEndTime", "var_name": "targetEndTime"}], "methods": [{"identifier": "Timer", "parameters": "()", "modifiers": "public", "return": "", "signature": " Timer()", "full_signature": "public  Timer()", "class_method_signature": "Timer.Timer()", "testcase": false, "constructor": true}, {"identifier": "Timer", "parameters": "(HardwareClock clock)", "modifiers": "public", "return": "", "signature": " Timer(HardwareClock clock)", "full_signature": "public  Timer(HardwareClock clock)", "class_method_signature": "Timer.Timer(HardwareClock clock)", "testcase": false, "constructor": true}, {"identifier": "set", "parameters": "(long duration, long error)", "modifiers": "public", "return": "boolean", "signature": "boolean set(long duration, long error)", "full_signature": "public boolean set(long duration, long error)", "class_method_signature": "Timer.set(long duration, long error)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "Timer.start()", "testcase": false, "constructor": false}, {"identifier": "hasElapsed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasElapsed()", "full_signature": "public boolean hasElapsed()", "class_method_signature": "Timer.hasElapsed()", "testcase": false, "constructor": false}, {"identifier": "isLate", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLate()", "full_signature": "public boolean isLate()", "class_method_signature": "Timer.isLate()", "testcase": false, "constructor": false}, {"identifier": "getTimeRemaining", "parameters": "()", "modifiers": "public", "return": "DiscreteInterval", "signature": "DiscreteInterval getTimeRemaining()", "full_signature": "public DiscreteInterval getTimeRemaining()", "class_method_signature": "Timer.getTimeRemaining()", "testcase": false, "constructor": false}, {"identifier": "waitUntilElapsed", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void waitUntilElapsed()", "full_signature": "public void waitUntilElapsed()", "class_method_signature": "Timer.waitUntilElapsed()", "testcase": false, "constructor": false}], "file": "jrugged-core/src/main/java/org/fishwife/jrugged/clocks/Timer.java"}, "focal_method": {"identifier": "set", "parameters": "(long duration, long error)", "modifiers": "public", "return": "boolean", "body": "public boolean set(long duration, long error) {\n        if (error < clock.getGranularity()) return false;\n        wasSet = true;\n        targetElapsedTime = new DiscreteInterval(duration - error, duration + error);\n        return true;\n    }", "signature": "boolean set(long duration, long error)", "full_signature": "public boolean set(long duration, long error)", "class_method_signature": "Timer.set(long duration, long error)", "testcase": false, "constructor": false, "invocations": ["getGranularity"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}