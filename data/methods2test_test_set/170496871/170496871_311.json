{"test_class": {"identifier": "DecisionTreeDataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Parameterized.Parameter\n    public boolean useIdx;", "modifier": "@Parameterized.Parameter\n    public", "type": "boolean", "declarator": "useIdx", "var_name": "useIdx"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/tree/data/DecisionTreeDataTest.java"}, "test_case": {"identifier": "testFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFilter() {\n        double[][] features = new double[][]{{0}, {1}, {2}, {3}, {4}, {5}};\n        double[] labels = new double[]{0, 1, 2, 3, 4, 5};\n\n        DecisionTreeData data = new DecisionTreeData(features, labels, useIdx);\n        DecisionTreeData filteredData = data.filter(obj -> obj[0] > 2);\n\n        assertArrayEquals(new double[][]{{3}, {4}, {5}}, filteredData.getFeatures());\n        assertArrayEquals(new double[]{3, 4, 5}, filteredData.getLabels(), 1e-10);\n    }", "signature": "void testFilter()", "full_signature": "@Test public void testFilter()", "class_method_signature": "DecisionTreeDataTest.testFilter()", "testcase": true, "constructor": false, "invocations": ["filter", "assertArrayEquals", "getFeatures", "assertArrayEquals", "getLabels"]}, "focal_class": {"identifier": "DecisionTreeData", "superclass": "extends FeatureMatrixWithLabelsOnHeapData", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private double[] copiedOriginalLabels;", "modifier": "private", "type": "double[]", "declarator": "copiedOriginalLabels", "var_name": "copiedOriginalLabels"}, {"original_string": "private final List<TreeDataIndex> indexesCache;", "modifier": "private final", "type": "List<TreeDataIndex>", "declarator": "indexesCache", "var_name": "indexesCache"}, {"original_string": "private final boolean buildIdx;", "modifier": "private final", "type": "boolean", "declarator": "buildIdx", "var_name": "buildIdx"}], "methods": [{"identifier": "DecisionTreeData", "parameters": "(double[][] features, double[] labels, boolean buildIdx)", "modifiers": "public", "return": "", "signature": " DecisionTreeData(double[][] features, double[] labels, boolean buildIdx)", "full_signature": "public  DecisionTreeData(double[][] features, double[] labels, boolean buildIdx)", "class_method_signature": "DecisionTreeData.DecisionTreeData(double[][] features, double[] labels, boolean buildIdx)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(TreeFilter filter)", "modifiers": "public", "return": "DecisionTreeData", "signature": "DecisionTreeData filter(TreeFilter filter)", "full_signature": "public DecisionTreeData filter(TreeFilter filter)", "class_method_signature": "DecisionTreeData.filter(TreeFilter filter)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(int col)", "modifiers": "public", "return": "void", "signature": "void sort(int col)", "full_signature": "public void sort(int col)", "class_method_signature": "DecisionTreeData.sort(int col)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(int col, int from, int to)", "modifiers": "private", "return": "void", "signature": "void sort(int col, int from, int to)", "full_signature": "private void sort(int col, int from, int to)", "class_method_signature": "DecisionTreeData.sort(int col, int from, int to)", "testcase": false, "constructor": false}, {"identifier": "getCopiedOriginalLabels", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getCopiedOriginalLabels()", "full_signature": "public double[] getCopiedOriginalLabels()", "class_method_signature": "DecisionTreeData.getCopiedOriginalLabels()", "testcase": false, "constructor": false}, {"identifier": "setCopiedOriginalLabels", "parameters": "(double[] copiedOriginalLabels)", "modifiers": "public", "return": "void", "signature": "void setCopiedOriginalLabels(double[] copiedOriginalLabels)", "full_signature": "public void setCopiedOriginalLabels(double[] copiedOriginalLabels)", "class_method_signature": "DecisionTreeData.setCopiedOriginalLabels(double[] copiedOriginalLabels)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "DecisionTreeData.close()", "testcase": false, "constructor": false}, {"identifier": "createIndexByFilter", "parameters": "(int depth, TreeFilter filter)", "modifiers": "public", "return": "TreeDataIndex", "signature": "TreeDataIndex createIndexByFilter(int depth, TreeFilter filter)", "full_signature": "public TreeDataIndex createIndexByFilter(int depth, TreeFilter filter)", "class_method_signature": "DecisionTreeData.createIndexByFilter(int depth, TreeFilter filter)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/tree/data/DecisionTreeData.java"}, "focal_method": {"identifier": "filter", "parameters": "(TreeFilter filter)", "modifiers": "public", "return": "DecisionTreeData", "body": "public DecisionTreeData filter(TreeFilter filter) {\n        int size = 0;\n\n        double[][] features = getFeatures();\n        double[] labels = getLabels();\n        for (int i = 0; i < features.length; i++)\n            if (filter.test(features[i]))\n                size++;\n\n        double[][] newFeatures = new double[size][];\n        double[] newLabels = new double[size];\n\n        int ptr = 0;\n\n        for (int i = 0; i < features.length; i++) {\n            if (filter.test(features[i])) {\n                newFeatures[ptr] = features[i];\n                newLabels[ptr] = labels[i];\n\n                ptr++;\n            }\n        }\n\n        return new DecisionTreeData(newFeatures, newLabels, buildIdx);\n    }", "signature": "DecisionTreeData filter(TreeFilter filter)", "full_signature": "public DecisionTreeData filter(TreeFilter filter)", "class_method_signature": "DecisionTreeData.filter(TreeFilter filter)", "testcase": false, "constructor": false, "invocations": ["getFeatures", "getLabels", "test", "test"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}