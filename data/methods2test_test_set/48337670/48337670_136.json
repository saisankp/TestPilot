{"test_class": {"identifier": "SitemapResourceTest", "superclass": "extends JavaTest", "interfaces": "", "fields": [{"original_string": "private static final int STATE_UPDATE_WAIT_TIME = 100;", "modifier": "private static final", "type": "int", "declarator": "STATE_UPDATE_WAIT_TIME = 100", "var_name": "STATE_UPDATE_WAIT_TIME"}, {"original_string": "private static final String HTTP_HEADER_X_ATMOSPHERE_TRANSPORT = \"X-Atmosphere-Transport\";", "modifier": "private static final", "type": "String", "declarator": "HTTP_HEADER_X_ATMOSPHERE_TRANSPORT = \"X-Atmosphere-Transport\"", "var_name": "HTTP_HEADER_X_ATMOSPHERE_TRANSPORT"}, {"original_string": "private static final String ITEM_NAME = \"itemName\";", "modifier": "private static final", "type": "String", "declarator": "ITEM_NAME = \"itemName\"", "var_name": "ITEM_NAME"}, {"original_string": "private static final String SITEMAP_PATH = \"/sitemaps\";", "modifier": "private static final", "type": "String", "declarator": "SITEMAP_PATH = \"/sitemaps\"", "var_name": "SITEMAP_PATH"}, {"original_string": "private static final String SITEMAP_MODEL_NAME = \"sitemapModel\";", "modifier": "private static final", "type": "String", "declarator": "SITEMAP_MODEL_NAME = \"sitemapModel\"", "var_name": "SITEMAP_MODEL_NAME"}, {"original_string": "private static final String SITEMAP_NAME = \"defaultSitemap\";", "modifier": "private static final", "type": "String", "declarator": "SITEMAP_NAME = \"defaultSitemap\"", "var_name": "SITEMAP_NAME"}, {"original_string": "private static final String SITEMAP_TITLE = \"Default Sitemap\";", "modifier": "private static final", "type": "String", "declarator": "SITEMAP_TITLE = \"Default Sitemap\"", "var_name": "SITEMAP_TITLE"}, {"original_string": "private static final String VISIBILITY_RULE_ITEM_NAME = \"visibilityRuleItem\";", "modifier": "private static final", "type": "String", "declarator": "VISIBILITY_RULE_ITEM_NAME = \"visibilityRuleItem\"", "var_name": "VISIBILITY_RULE_ITEM_NAME"}, {"original_string": "private static final String LABEL_COLOR_ITEM_NAME = \"labelColorItemName\";", "modifier": "private static final", "type": "String", "declarator": "LABEL_COLOR_ITEM_NAME = \"labelColorItemName\"", "var_name": "LABEL_COLOR_ITEM_NAME"}, {"original_string": "private static final String VALUE_COLOR_ITEM_NAME = \"valueColorItemName\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_COLOR_ITEM_NAME = \"valueColorItemName\"", "var_name": "VALUE_COLOR_ITEM_NAME"}, {"original_string": "private static final String WIDGET1_LABEL = \"widget 1\";", "modifier": "private static final", "type": "String", "declarator": "WIDGET1_LABEL = \"widget 1\"", "var_name": "WIDGET1_LABEL"}, {"original_string": "private static final String WIDGET2_LABEL = \"widget 2\";", "modifier": "private static final", "type": "String", "declarator": "WIDGET2_LABEL = \"widget 2\"", "var_name": "WIDGET2_LABEL"}, {"original_string": "private static final String WIDGET1_ID = \"00\";", "modifier": "private static final", "type": "String", "declarator": "WIDGET1_ID = \"00\"", "var_name": "WIDGET1_ID"}, {"original_string": "private static final String WIDGET2_ID = \"01\";", "modifier": "private static final", "type": "String", "declarator": "WIDGET2_ID = \"01\"", "var_name": "WIDGET2_ID"}, {"original_string": "private static final String CLIENT_IP = \"127.0.0.1\";", "modifier": "private static final", "type": "String", "declarator": "CLIENT_IP = \"127.0.0.1\"", "var_name": "CLIENT_IP"}, {"original_string": "private SitemapResource sitemapResource;", "modifier": "private", "type": "SitemapResource", "declarator": "sitemapResource", "var_name": "sitemapResource"}, {"original_string": "private @Mock HttpHeaders headers;", "modifier": "private @Mock", "type": "HttpHeaders", "declarator": "headers", "var_name": "headers"}, {"original_string": "private @Mock Sitemap defaultSitemap;", "modifier": "private @Mock", "type": "Sitemap", "declarator": "defaultSitemap", "var_name": "defaultSitemap"}, {"original_string": "private @Mock ItemUIRegistry itemUIRegistry;", "modifier": "private @Mock", "type": "ItemUIRegistry", "declarator": "itemUIRegistry", "var_name": "itemUIRegistry"}, {"original_string": "private @Mock LocaleService localeService;", "modifier": "private @Mock", "type": "LocaleService", "declarator": "localeService", "var_name": "localeService"}, {"original_string": "private @Mock HttpServletRequest request;", "modifier": "private @Mock", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private @Mock SitemapProvider sitemapProvider;", "modifier": "private @Mock", "type": "SitemapProvider", "declarator": "sitemapProvider", "var_name": "sitemapProvider"}, {"original_string": "private @Mock SitemapSubscriptionService subscriptions;", "modifier": "private @Mock", "type": "SitemapSubscriptionService", "declarator": "subscriptions", "var_name": "subscriptions"}, {"original_string": "private @Mock UriInfo uriInfo;", "modifier": "private @Mock", "type": "UriInfo", "declarator": "uriInfo", "var_name": "uriInfo"}, {"original_string": "private GenericItem item;", "modifier": "private", "type": "GenericItem", "declarator": "item", "var_name": "item"}, {"original_string": "private GenericItem visibilityRuleItem;", "modifier": "private", "type": "GenericItem", "declarator": "visibilityRuleItem", "var_name": "visibilityRuleItem"}, {"original_string": "private GenericItem labelColorItem;", "modifier": "private", "type": "GenericItem", "declarator": "labelColorItem", "var_name": "labelColorItem"}, {"original_string": "private GenericItem valueColorItem;", "modifier": "private", "type": "GenericItem", "declarator": "valueColorItem", "var_name": "valueColorItem"}, {"original_string": "private EList<Widget> widgets;", "modifier": "private", "type": "EList<Widget>", "declarator": "widgets", "var_name": "widgets"}], "file": "bundles/org.openhab.core.io.rest.sitemap/src/test/java/org/openhab/core/io/rest/sitemap/internal/SitemapResourceTest.java"}, "test_case": {"identifier": "whenLongPollingShouldObserveItems", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenLongPollingShouldObserveItems() {\n        new Thread(() -> {\n            try {\n                Thread.sleep(STATE_UPDATE_WAIT_TIME); // wait for the #getPageData call and listeners to attach to the\n                                                      // item\n                item.setState(PercentType.ZERO);\n            } catch (InterruptedException e) {\n            }\n        }).start();\n\n        // non-null is sufficient here.\n        when(headers.getRequestHeader(HTTP_HEADER_X_ATMOSPHERE_TRANSPORT)).thenReturn(List.of());\n\n        Response response = sitemapResource.getPageData(headers, null, SITEMAP_MODEL_NAME, SITEMAP_NAME, null, false);\n\n        PageDTO pageDTO = (PageDTO) response.getEntity();\n        assertThat(pageDTO.timeout, is(false)); // assert that the item state change did trigger the blocking method to\n                                                // return\n    }", "signature": "void whenLongPollingShouldObserveItems()", "full_signature": "@Test public void whenLongPollingShouldObserveItems()", "class_method_signature": "SitemapResourceTest.whenLongPollingShouldObserveItems()", "testcase": true, "constructor": false, "invocations": ["start", "sleep", "setState", "thenReturn", "when", "getRequestHeader", "of", "getPageData", "getEntity", "assertThat", "is"]}, "focal_class": {"identifier": "SitemapResource", "superclass": "", "interfaces": "implements RESTResource, SitemapSubscriptionCallback, SseBroadcaster.Listener<SseSinkInfo>", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(SitemapResource.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SitemapResource.class)", "var_name": "logger"}, {"original_string": "public static final String PATH_SITEMAPS = \"sitemaps\";", "modifier": "public static final", "type": "String", "declarator": "PATH_SITEMAPS = \"sitemaps\"", "var_name": "PATH_SITEMAPS"}, {"original_string": "private static final String SEGMENT_EVENTS = \"events\";", "modifier": "private static final", "type": "String", "declarator": "SEGMENT_EVENTS = \"events\"", "var_name": "SEGMENT_EVENTS"}, {"original_string": "private static final String X_ACCEL_BUFFERING_HEADER = \"X-Accel-Buffering\";", "modifier": "private static final", "type": "String", "declarator": "X_ACCEL_BUFFERING_HEADER = \"X-Accel-Buffering\"", "var_name": "X_ACCEL_BUFFERING_HEADER"}, {"original_string": "private static final long TIMEOUT_IN_MS = 30000;", "modifier": "private static final", "type": "long", "declarator": "TIMEOUT_IN_MS = 30000", "var_name": "TIMEOUT_IN_MS"}, {"original_string": "private SseBroadcaster<@NonNull SseSinkInfo> broadcaster;", "modifier": "private", "type": "SseBroadcaster<@NonNull SseSinkInfo>", "declarator": "broadcaster", "var_name": "broadcaster"}, {"original_string": "@Context\n    @NonNullByDefault({})\n    UriInfo uriInfo;", "modifier": "@Context\n    @NonNullByDefault({})", "type": "UriInfo", "declarator": "uriInfo", "var_name": "uriInfo"}, {"original_string": "@Context\n    @NonNullByDefault({})\n    HttpServletRequest request;", "modifier": "@Context\n    @NonNullByDefault({})", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Context\n    @NonNullByDefault({})\n    HttpServletResponse response;", "modifier": "@Context\n    @NonNullByDefault({})", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Context\n    @NonNullByDefault({})\n    Sse sse;", "modifier": "@Context\n    @NonNullByDefault({})", "type": "Sse", "declarator": "sse", "var_name": "sse"}, {"original_string": "private final ItemUIRegistry itemUIRegistry;", "modifier": "private final", "type": "ItemUIRegistry", "declarator": "itemUIRegistry", "var_name": "itemUIRegistry"}, {"original_string": "private final SitemapSubscriptionService subscriptions;", "modifier": "private final", "type": "SitemapSubscriptionService", "declarator": "subscriptions", "var_name": "subscriptions"}, {"original_string": "private final LocaleService localeService;", "modifier": "private final", "type": "LocaleService", "declarator": "localeService", "var_name": "localeService"}, {"original_string": "private final java.util.List<SitemapProvider> sitemapProviders = new ArrayList<>();", "modifier": "private final", "type": "java.util.List<SitemapProvider>", "declarator": "sitemapProviders = new ArrayList<>()", "var_name": "sitemapProviders"}, {"original_string": "private final Map<String, SseSinkInfo> knownSubscriptions = new MapMaker().weakValues().makeMap();", "modifier": "private final", "type": "Map<String, SseSinkInfo>", "declarator": "knownSubscriptions = new MapMaker().weakValues().makeMap()", "var_name": "knownSubscriptions"}, {"original_string": "private final ScheduledExecutorService scheduler = ThreadPoolManager\n            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "scheduler = ThreadPoolManager\n            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON)", "var_name": "scheduler"}, {"original_string": "private @Nullable ScheduledFuture<?> cleanSubscriptionsJob;", "modifier": "private @Nullable", "type": "ScheduledFuture<?>", "declarator": "cleanSubscriptionsJob", "var_name": "cleanSubscriptionsJob"}], "methods": [{"identifier": "SitemapResource", "parameters": "( //\n            final @Reference ItemUIRegistry itemUIRegistry, //\n            final @Reference LocaleService localeService, //\n            final @Reference SitemapSubscriptionService subscriptions)", "modifiers": "@Activate public", "return": "", "signature": " SitemapResource( //\n            final @Reference ItemUIRegistry itemUIRegistry, //\n            final @Reference LocaleService localeService, //\n            final @Reference SitemapSubscriptionService subscriptions)", "full_signature": "@Activate public  SitemapResource( //\n            final @Reference ItemUIRegistry itemUIRegistry, //\n            final @Reference LocaleService localeService, //\n            final @Reference SitemapSubscriptionService subscriptions)", "class_method_signature": "SitemapResource.SitemapResource( //\n            final @Reference ItemUIRegistry itemUIRegistry, //\n            final @Reference LocaleService localeService, //\n            final @Reference SitemapSubscriptionService subscriptions)", "testcase": false, "constructor": true}, {"identifier": "deactivate", "parameters": "()", "modifiers": "@Deactivate protected", "return": "void", "signature": "void deactivate()", "full_signature": "@Deactivate protected void deactivate()", "class_method_signature": "SitemapResource.deactivate()", "testcase": false, "constructor": false}, {"identifier": "addSitemapProvider", "parameters": "(SitemapProvider provider)", "modifiers": "@Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC) public", "return": "void", "signature": "void addSitemapProvider(SitemapProvider provider)", "full_signature": "@Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC) public void addSitemapProvider(SitemapProvider provider)", "class_method_signature": "SitemapResource.addSitemapProvider(SitemapProvider provider)", "testcase": false, "constructor": false}, {"identifier": "removeSitemapProvider", "parameters": "(SitemapProvider provider)", "modifiers": "public", "return": "void", "signature": "void removeSitemapProvider(SitemapProvider provider)", "full_signature": "public void removeSitemapProvider(SitemapProvider provider)", "class_method_signature": "SitemapResource.removeSitemapProvider(SitemapProvider provider)", "testcase": false, "constructor": false}, {"identifier": "getSitemaps", "parameters": "()", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Get all available sitemaps.\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(array = @ArraySchema(schema = @Schema(implementation = SitemapDTO.class)))) }) public", "return": "Response", "signature": "Response getSitemaps()", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Get all available sitemaps.\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(array = @ArraySchema(schema = @Schema(implementation = SitemapDTO.class)))) }) public Response getSitemaps()", "class_method_signature": "SitemapResource.getSitemaps()", "testcase": false, "constructor": false}, {"identifier": "getSitemapData", "parameters": "(@Context HttpHeaders headers,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @PathParam(\"sitemapname\") @Parameter(description = \"sitemap name\") String sitemapname,\n            @QueryParam(\"type\") String type, @QueryParam(\"jsoncallback\") @DefaultValue(\"callback\") String callback,\n            @QueryParam(\"includeHidden\") @Parameter(description = \"include hidden widgets\") boolean includeHiddenWidgets)", "modifiers": "@GET @Path(\"/{sitemapname: [a-zA-Z_0-9]+}\") @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Get sitemap by name.\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(schema = @Schema(implementation = SitemapDTO.class))) }) public", "return": "Response", "signature": "Response getSitemapData(@Context HttpHeaders headers,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @PathParam(\"sitemapname\") @Parameter(description = \"sitemap name\") String sitemapname,\n            @QueryParam(\"type\") String type, @QueryParam(\"jsoncallback\") @DefaultValue(\"callback\") String callback,\n            @QueryParam(\"includeHidden\") @Parameter(description = \"include hidden widgets\") boolean includeHiddenWidgets)", "full_signature": "@GET @Path(\"/{sitemapname: [a-zA-Z_0-9]+}\") @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Get sitemap by name.\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(schema = @Schema(implementation = SitemapDTO.class))) }) public Response getSitemapData(@Context HttpHeaders headers,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @PathParam(\"sitemapname\") @Parameter(description = \"sitemap name\") String sitemapname,\n            @QueryParam(\"type\") String type, @QueryParam(\"jsoncallback\") @DefaultValue(\"callback\") String callback,\n            @QueryParam(\"includeHidden\") @Parameter(description = \"include hidden widgets\") boolean includeHiddenWidgets)", "class_method_signature": "SitemapResource.getSitemapData(@Context HttpHeaders headers,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @PathParam(\"sitemapname\") @Parameter(description = \"sitemap name\") String sitemapname,\n            @QueryParam(\"type\") String type, @QueryParam(\"jsoncallback\") @DefaultValue(\"callback\") String callback,\n            @QueryParam(\"includeHidden\") @Parameter(description = \"include hidden widgets\") boolean includeHiddenWidgets)", "testcase": false, "constructor": false}, {"identifier": "getPageData", "parameters": "(@Context HttpHeaders headers,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @PathParam(\"sitemapname\") @Parameter(description = \"sitemap name\") String sitemapname,\n            @PathParam(\"pageid\") @Parameter(description = \"page id\") String pageId,\n            @QueryParam(\"subscriptionid\") @Parameter(description = \"subscriptionid\") @Nullable String subscriptionId,\n            @QueryParam(\"includeHidden\") @Parameter(description = \"include hidden widgets\") boolean includeHiddenWidgets)", "modifiers": "@GET @Path(\"/{sitemapname: [a-zA-Z_0-9]+}/{pageid: [a-zA-Z_0-9]+}\") @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Polls the data for a sitemap.\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(schema = @Schema(implementation = PageDTO.class))), @ApiResponse(responseCode = \"404\", description = \"Sitemap with requested name does not exist or page does not exist, or page refers to a non-linkable widget\"), @ApiResponse(responseCode = \"400\", description = \"Invalid subscription id has been provided.\") }) public", "return": "Response", "signature": "Response getPageData(@Context HttpHeaders headers,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @PathParam(\"sitemapname\") @Parameter(description = \"sitemap name\") String sitemapname,\n            @PathParam(\"pageid\") @Parameter(description = \"page id\") String pageId,\n            @QueryParam(\"subscriptionid\") @Parameter(description = \"subscriptionid\") @Nullable String subscriptionId,\n            @QueryParam(\"includeHidden\") @Parameter(description = \"include hidden widgets\") boolean includeHiddenWidgets)", "full_signature": "@GET @Path(\"/{sitemapname: [a-zA-Z_0-9]+}/{pageid: [a-zA-Z_0-9]+}\") @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Polls the data for a sitemap.\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(schema = @Schema(implementation = PageDTO.class))), @ApiResponse(responseCode = \"404\", description = \"Sitemap with requested name does not exist or page does not exist, or page refers to a non-linkable widget\"), @ApiResponse(responseCode = \"400\", description = \"Invalid subscription id has been provided.\") }) public Response getPageData(@Context HttpHeaders headers,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @PathParam(\"sitemapname\") @Parameter(description = \"sitemap name\") String sitemapname,\n            @PathParam(\"pageid\") @Parameter(description = \"page id\") String pageId,\n            @QueryParam(\"subscriptionid\") @Parameter(description = \"subscriptionid\") @Nullable String subscriptionId,\n            @QueryParam(\"includeHidden\") @Parameter(description = \"include hidden widgets\") boolean includeHiddenWidgets)", "class_method_signature": "SitemapResource.getPageData(@Context HttpHeaders headers,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @PathParam(\"sitemapname\") @Parameter(description = \"sitemap name\") String sitemapname,\n            @PathParam(\"pageid\") @Parameter(description = \"page id\") String pageId,\n            @QueryParam(\"subscriptionid\") @Parameter(description = \"subscriptionid\") @Nullable String subscriptionId,\n            @QueryParam(\"includeHidden\") @Parameter(description = \"include hidden widgets\") boolean includeHiddenWidgets)", "testcase": false, "constructor": false}, {"identifier": "createEventSubscription", "parameters": "()", "modifiers": "@POST @Path(SEGMENT_EVENTS + \"/subscribe\") @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Creates a sitemap event subscription.\", responses = { @ApiResponse(responseCode = \"201\", description = \"Subscription created.\"), @ApiResponse(responseCode = \"503\", description = \"Subscriptions limit reached.\") }) public", "return": "Object", "signature": "Object createEventSubscription()", "full_signature": "@POST @Path(SEGMENT_EVENTS + \"/subscribe\") @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Creates a sitemap event subscription.\", responses = { @ApiResponse(responseCode = \"201\", description = \"Subscription created.\"), @ApiResponse(responseCode = \"503\", description = \"Subscriptions limit reached.\") }) public Object createEventSubscription()", "class_method_signature": "SitemapResource.createEventSubscription()", "testcase": false, "constructor": false}, {"identifier": "getSitemapEvents", "parameters": "(@Context final SseEventSink sseEventSink, @Context final HttpServletResponse response,\n            @PathParam(\"subscriptionid\") @Parameter(description = \"subscription id\") String subscriptionId,\n            @QueryParam(\"sitemap\") @Parameter(description = \"sitemap name\") @Nullable String sitemapname,\n            @QueryParam(\"pageid\") @Parameter(description = \"page id\") @Nullable String pageId)", "modifiers": "@GET @Path(SEGMENT_EVENTS + \"/{subscriptionid: [a-zA-Z_0-9-]+}\") @Produces(MediaType.SERVER_SENT_EVENTS) @Operation(summary = \"Get sitemap events.\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\"), @ApiResponse(responseCode = \"400\", description = \"Page not linked to the subscription.\"), @ApiResponse(responseCode = \"404\", description = \"Subscription not found.\") }) public", "return": "void", "signature": "void getSitemapEvents(@Context final SseEventSink sseEventSink, @Context final HttpServletResponse response,\n            @PathParam(\"subscriptionid\") @Parameter(description = \"subscription id\") String subscriptionId,\n            @QueryParam(\"sitemap\") @Parameter(description = \"sitemap name\") @Nullable String sitemapname,\n            @QueryParam(\"pageid\") @Parameter(description = \"page id\") @Nullable String pageId)", "full_signature": "@GET @Path(SEGMENT_EVENTS + \"/{subscriptionid: [a-zA-Z_0-9-]+}\") @Produces(MediaType.SERVER_SENT_EVENTS) @Operation(summary = \"Get sitemap events.\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\"), @ApiResponse(responseCode = \"400\", description = \"Page not linked to the subscription.\"), @ApiResponse(responseCode = \"404\", description = \"Subscription not found.\") }) public void getSitemapEvents(@Context final SseEventSink sseEventSink, @Context final HttpServletResponse response,\n            @PathParam(\"subscriptionid\") @Parameter(description = \"subscription id\") String subscriptionId,\n            @QueryParam(\"sitemap\") @Parameter(description = \"sitemap name\") @Nullable String sitemapname,\n            @QueryParam(\"pageid\") @Parameter(description = \"page id\") @Nullable String pageId)", "class_method_signature": "SitemapResource.getSitemapEvents(@Context final SseEventSink sseEventSink, @Context final HttpServletResponse response,\n            @PathParam(\"subscriptionid\") @Parameter(description = \"subscription id\") String subscriptionId,\n            @QueryParam(\"sitemap\") @Parameter(description = \"sitemap name\") @Nullable String sitemapname,\n            @QueryParam(\"pageid\") @Parameter(description = \"page id\") @Nullable String pageId)", "testcase": false, "constructor": false}, {"identifier": "getPageBean", "parameters": "(String sitemapName, String pageId, URI uri, Locale locale, boolean timeout,\n            boolean includeHidden)", "modifiers": "private", "return": "PageDTO", "signature": "PageDTO getPageBean(String sitemapName, String pageId, URI uri, Locale locale, boolean timeout,\n            boolean includeHidden)", "full_signature": "private PageDTO getPageBean(String sitemapName, String pageId, URI uri, Locale locale, boolean timeout,\n            boolean includeHidden)", "class_method_signature": "SitemapResource.getPageBean(String sitemapName, String pageId, URI uri, Locale locale, boolean timeout,\n            boolean includeHidden)", "testcase": false, "constructor": false}, {"identifier": "getSitemapBeans", "parameters": "(URI uri)", "modifiers": "public", "return": "Collection<SitemapDTO>", "signature": "Collection<SitemapDTO> getSitemapBeans(URI uri)", "full_signature": "public Collection<SitemapDTO> getSitemapBeans(URI uri)", "class_method_signature": "SitemapResource.getSitemapBeans(URI uri)", "testcase": false, "constructor": false}, {"identifier": "getSitemapBean", "parameters": "(String sitemapname, URI uri, Locale locale, boolean includeHiddenWidgets)", "modifiers": "private", "return": "SitemapDTO", "signature": "SitemapDTO getSitemapBean(String sitemapname, URI uri, Locale locale, boolean includeHiddenWidgets)", "full_signature": "private SitemapDTO getSitemapBean(String sitemapname, URI uri, Locale locale, boolean includeHiddenWidgets)", "class_method_signature": "SitemapResource.getSitemapBean(String sitemapname, URI uri, Locale locale, boolean includeHiddenWidgets)", "testcase": false, "constructor": false}, {"identifier": "createSitemapBean", "parameters": "(String sitemapName, Sitemap sitemap, URI uri, Locale locale,\n            boolean includeHiddenWidgets)", "modifiers": "private", "return": "SitemapDTO", "signature": "SitemapDTO createSitemapBean(String sitemapName, Sitemap sitemap, URI uri, Locale locale,\n            boolean includeHiddenWidgets)", "full_signature": "private SitemapDTO createSitemapBean(String sitemapName, Sitemap sitemap, URI uri, Locale locale,\n            boolean includeHiddenWidgets)", "class_method_signature": "SitemapResource.createSitemapBean(String sitemapName, Sitemap sitemap, URI uri, Locale locale,\n            boolean includeHiddenWidgets)", "testcase": false, "constructor": false}, {"identifier": "createPageBean", "parameters": "(String sitemapName, @Nullable String title, @Nullable String icon, String pageId,\n            @Nullable EList<Widget> children, boolean drillDown, boolean isLeaf, URI uri, Locale locale,\n            boolean timeout, boolean includeHiddenWidgets)", "modifiers": "private", "return": "PageDTO", "signature": "PageDTO createPageBean(String sitemapName, @Nullable String title, @Nullable String icon, String pageId,\n            @Nullable EList<Widget> children, boolean drillDown, boolean isLeaf, URI uri, Locale locale,\n            boolean timeout, boolean includeHiddenWidgets)", "full_signature": "private PageDTO createPageBean(String sitemapName, @Nullable String title, @Nullable String icon, String pageId,\n            @Nullable EList<Widget> children, boolean drillDown, boolean isLeaf, URI uri, Locale locale,\n            boolean timeout, boolean includeHiddenWidgets)", "class_method_signature": "SitemapResource.createPageBean(String sitemapName, @Nullable String title, @Nullable String icon, String pageId,\n            @Nullable EList<Widget> children, boolean drillDown, boolean isLeaf, URI uri, Locale locale,\n            boolean timeout, boolean includeHiddenWidgets)", "testcase": false, "constructor": false}, {"identifier": "createWidgetBean", "parameters": "(String sitemapName, Widget widget, boolean drillDown, URI uri,\n            String widgetId, Locale locale, boolean evenIfHidden)", "modifiers": "private @Nullable", "return": "WidgetDTO", "signature": "WidgetDTO createWidgetBean(String sitemapName, Widget widget, boolean drillDown, URI uri,\n            String widgetId, Locale locale, boolean evenIfHidden)", "full_signature": "private @Nullable WidgetDTO createWidgetBean(String sitemapName, Widget widget, boolean drillDown, URI uri,\n            String widgetId, Locale locale, boolean evenIfHidden)", "class_method_signature": "SitemapResource.createWidgetBean(String sitemapName, Widget widget, boolean drillDown, URI uri,\n            String widgetId, Locale locale, boolean evenIfHidden)", "testcase": false, "constructor": false}, {"identifier": "buildProxyUrl", "parameters": "(String sitemapName, Widget widget, URI uri)", "modifiers": "private", "return": "String", "signature": "String buildProxyUrl(String sitemapName, Widget widget, URI uri)", "full_signature": "private String buildProxyUrl(String sitemapName, Widget widget, URI uri)", "class_method_signature": "SitemapResource.buildProxyUrl(String sitemapName, Widget widget, URI uri)", "testcase": false, "constructor": false}, {"identifier": "isLeaf", "parameters": "(EList<Widget> children)", "modifiers": "private", "return": "boolean", "signature": "boolean isLeaf(EList<Widget> children)", "full_signature": "private boolean isLeaf(EList<Widget> children)", "class_method_signature": "SitemapResource.isLeaf(EList<Widget> children)", "testcase": false, "constructor": false}, {"identifier": "getSitemap", "parameters": "(String sitemapname)", "modifiers": "private @Nullable", "return": "Sitemap", "signature": "Sitemap getSitemap(String sitemapname)", "full_signature": "private @Nullable Sitemap getSitemap(String sitemapname)", "class_method_signature": "SitemapResource.getSitemap(String sitemapname)", "testcase": false, "constructor": false}, {"identifier": "blockUnlessChangeOccurs", "parameters": "(String sitemapname, String pageId)", "modifiers": "private", "return": "boolean", "signature": "boolean blockUnlessChangeOccurs(String sitemapname, String pageId)", "full_signature": "private boolean blockUnlessChangeOccurs(String sitemapname, String pageId)", "class_method_signature": "SitemapResource.blockUnlessChangeOccurs(String sitemapname, String pageId)", "testcase": false, "constructor": false}, {"identifier": "waitForChanges", "parameters": "(EList<Widget> widgets)", "modifiers": "private", "return": "boolean", "signature": "boolean waitForChanges(EList<Widget> widgets)", "full_signature": "private boolean waitForChanges(EList<Widget> widgets)", "class_method_signature": "SitemapResource.waitForChanges(EList<Widget> widgets)", "testcase": false, "constructor": false}, {"identifier": "getAllItems", "parameters": "(EList<Widget> widgets)", "modifiers": "private", "return": "Set<GenericItem>", "signature": "Set<GenericItem> getAllItems(EList<Widget> widgets)", "full_signature": "private Set<GenericItem> getAllItems(EList<Widget> widgets)", "class_method_signature": "SitemapResource.getAllItems(EList<Widget> widgets)", "testcase": false, "constructor": false}, {"identifier": "getItemsInVisibilityCond", "parameters": "(EList<VisibilityRule> ruleList)", "modifiers": "private", "return": "Set<GenericItem>", "signature": "Set<GenericItem> getItemsInVisibilityCond(EList<VisibilityRule> ruleList)", "full_signature": "private Set<GenericItem> getItemsInVisibilityCond(EList<VisibilityRule> ruleList)", "class_method_signature": "SitemapResource.getItemsInVisibilityCond(EList<VisibilityRule> ruleList)", "testcase": false, "constructor": false}, {"identifier": "getItemsInColorCond", "parameters": "(EList<ColorArray> colorList)", "modifiers": "private", "return": "Set<GenericItem>", "signature": "Set<GenericItem> getItemsInColorCond(EList<ColorArray> colorList)", "full_signature": "private Set<GenericItem> getItemsInColorCond(EList<ColorArray> colorList)", "class_method_signature": "SitemapResource.getItemsInColorCond(EList<ColorArray> colorList)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(SitemapEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(SitemapEvent event)", "full_signature": "@Override public void onEvent(SitemapEvent event)", "class_method_signature": "SitemapResource.onEvent(SitemapEvent event)", "testcase": false, "constructor": false}, {"identifier": "onRelease", "parameters": "(String subscriptionId)", "modifiers": "@Override public", "return": "void", "signature": "void onRelease(String subscriptionId)", "full_signature": "@Override public void onRelease(String subscriptionId)", "class_method_signature": "SitemapResource.onRelease(String subscriptionId)", "testcase": false, "constructor": false}, {"identifier": "sseEventSinkRemoved", "parameters": "(SseEventSink sink, SseSinkInfo info)", "modifiers": "@Override public", "return": "void", "signature": "void sseEventSinkRemoved(SseEventSink sink, SseSinkInfo info)", "full_signature": "@Override public void sseEventSinkRemoved(SseEventSink sink, SseSinkInfo info)", "class_method_signature": "SitemapResource.sseEventSinkRemoved(SseEventSink sink, SseSinkInfo info)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.io.rest.sitemap/src/main/java/org/openhab/core/io/rest/sitemap/internal/SitemapResource.java"}, "focal_method": {"identifier": "getPageData", "parameters": "(@Context HttpHeaders headers,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @PathParam(\"sitemapname\") @Parameter(description = \"sitemap name\") String sitemapname,\n            @PathParam(\"pageid\") @Parameter(description = \"page id\") String pageId,\n            @QueryParam(\"subscriptionid\") @Parameter(description = \"subscriptionid\") @Nullable String subscriptionId,\n            @QueryParam(\"includeHidden\") @Parameter(description = \"include hidden widgets\") boolean includeHiddenWidgets)", "modifiers": "@GET @Path(\"/{sitemapname: [a-zA-Z_0-9]+}/{pageid: [a-zA-Z_0-9]+}\") @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Polls the data for a sitemap.\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(schema = @Schema(implementation = PageDTO.class))), @ApiResponse(responseCode = \"404\", description = \"Sitemap with requested name does not exist or page does not exist, or page refers to a non-linkable widget\"), @ApiResponse(responseCode = \"400\", description = \"Invalid subscription id has been provided.\") }) public", "return": "Response", "body": "@GET\n    @Path(\"/{sitemapname: [a-zA-Z_0-9]+}/{pageid: [a-zA-Z_0-9]+}\")\n    @Produces(MediaType.APPLICATION_JSON)\n    @Operation(summary = \"Polls the data for a sitemap.\", responses = {\n            @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(schema = @Schema(implementation = PageDTO.class))),\n            @ApiResponse(responseCode = \"404\", description = \"Sitemap with requested name does not exist or page does not exist, or page refers to a non-linkable widget\"),\n            @ApiResponse(responseCode = \"400\", description = \"Invalid subscription id has been provided.\") })\n    public Response getPageData(@Context HttpHeaders headers,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @PathParam(\"sitemapname\") @Parameter(description = \"sitemap name\") String sitemapname,\n            @PathParam(\"pageid\") @Parameter(description = \"page id\") String pageId,\n            @QueryParam(\"subscriptionid\") @Parameter(description = \"subscriptionid\") @Nullable String subscriptionId,\n            @QueryParam(\"includeHidden\") @Parameter(description = \"include hidden widgets\") boolean includeHiddenWidgets) {\n        final Locale locale = localeService.getLocale(language);\n        logger.debug(\"Received HTTP GET request from IP {} at '{}'\", request.getRemoteAddr(), uriInfo.getPath());\n\n        if (subscriptionId != null) {\n            try {\n                subscriptions.setPageId(subscriptionId, sitemapname, pageId);\n            } catch (IllegalArgumentException e) {\n                return JSONResponse.createErrorResponse(Response.Status.BAD_REQUEST, e.getMessage());\n            }\n        }\n\n        boolean timeout = false;\n        if (headers.getRequestHeader(\"X-Atmosphere-Transport\") != null) {\n            // Make the REST-API pseudo-compatible with openHAB 1.x\n            // The client asks Atmosphere for server push functionality,\n            // so we do a simply listening for changes on the appropriate items\n            // The blocking has a timeout of 30 seconds. If this timeout is reached,\n            // we notice this information in the response object.\n            timeout = blockUnlessChangeOccurs(sitemapname, pageId);\n        }\n        PageDTO responseObject = getPageBean(sitemapname, pageId, uriInfo.getBaseUriBuilder().build(), locale, timeout,\n                includeHiddenWidgets);\n        return Response.ok(responseObject).build();\n    }", "signature": "Response getPageData(@Context HttpHeaders headers,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @PathParam(\"sitemapname\") @Parameter(description = \"sitemap name\") String sitemapname,\n            @PathParam(\"pageid\") @Parameter(description = \"page id\") String pageId,\n            @QueryParam(\"subscriptionid\") @Parameter(description = \"subscriptionid\") @Nullable String subscriptionId,\n            @QueryParam(\"includeHidden\") @Parameter(description = \"include hidden widgets\") boolean includeHiddenWidgets)", "full_signature": "@GET @Path(\"/{sitemapname: [a-zA-Z_0-9]+}/{pageid: [a-zA-Z_0-9]+}\") @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Polls the data for a sitemap.\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(schema = @Schema(implementation = PageDTO.class))), @ApiResponse(responseCode = \"404\", description = \"Sitemap with requested name does not exist or page does not exist, or page refers to a non-linkable widget\"), @ApiResponse(responseCode = \"400\", description = \"Invalid subscription id has been provided.\") }) public Response getPageData(@Context HttpHeaders headers,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @PathParam(\"sitemapname\") @Parameter(description = \"sitemap name\") String sitemapname,\n            @PathParam(\"pageid\") @Parameter(description = \"page id\") String pageId,\n            @QueryParam(\"subscriptionid\") @Parameter(description = \"subscriptionid\") @Nullable String subscriptionId,\n            @QueryParam(\"includeHidden\") @Parameter(description = \"include hidden widgets\") boolean includeHiddenWidgets)", "class_method_signature": "SitemapResource.getPageData(@Context HttpHeaders headers,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @PathParam(\"sitemapname\") @Parameter(description = \"sitemap name\") String sitemapname,\n            @PathParam(\"pageid\") @Parameter(description = \"page id\") String pageId,\n            @QueryParam(\"subscriptionid\") @Parameter(description = \"subscriptionid\") @Nullable String subscriptionId,\n            @QueryParam(\"includeHidden\") @Parameter(description = \"include hidden widgets\") boolean includeHiddenWidgets)", "testcase": false, "constructor": false, "invocations": ["getLocale", "debug", "getRemoteAddr", "getPath", "setPageId", "createErrorResponse", "getMessage", "getRequestHeader", "blockUnlessChangeOccurs", "getPageBean", "build", "getBaseUriBuilder", "build", "ok"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}