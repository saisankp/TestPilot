{"test_class": {"identifier": "TestMascot", "superclass": "extends NetworkedTest", "interfaces": "", "fields": [{"original_string": "private final FieldElement macKeyShareOne = getFieldDefinition().createElement(11231);", "modifier": "private final", "type": "FieldElement", "declarator": "macKeyShareOne = getFieldDefinition().createElement(11231)", "var_name": "macKeyShareOne"}, {"original_string": "private final FieldElement macKeyShareTwo = getFieldDefinition().createElement(7719);", "modifier": "private final", "type": "FieldElement", "declarator": "macKeyShareTwo = getFieldDefinition().createElement(7719)", "var_name": "macKeyShareTwo"}], "file": "tools/mascot/src/test/java/dk/alexandra/fresco/tools/mascot/TestMascot.java"}, "test_case": {"identifier": "testInput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInput() {\n    // set up runtime environment and get contexts\n    initContexts(2);\n\n    FieldElement input = getFieldDefinition().createElement(12345);\n\n    // define per party task with params\n    List<Callable<List<AuthenticatedElement>>> tasks = new ArrayList<>();\n    tasks.add(() -> runInputter(contexts.get(1), macKeyShareOne, Collections.singletonList(input)));\n    tasks.add(() -> runNonInputter(contexts.get(2), macKeyShareTwo, 1, 1));\n\n    List<List<AuthenticatedElement>> results = testRuntime.runPerPartyTasks(tasks);\n    assertEquals(results.get(0).size(), 1);\n    assertEquals(results.get(1).size(), 1);\n    List<AuthenticatedElement> combined =\n        Addable.sumRows(results);\n    FieldElement actualRecombinedValue = combined.get(0).getShare();\n    FieldElement actualRecombinedMac = combined.get(0).getMac();\n    CustomAsserts.assertEquals(getFieldDefinition(), input, actualRecombinedValue);\n    FieldElement expectedMac = input.multiply(macKeyShareOne.add(macKeyShareTwo));\n    CustomAsserts.assertEquals(getFieldDefinition(), expectedMac, actualRecombinedMac);\n  }", "signature": "void testInput()", "full_signature": "@Test public void testInput()", "class_method_signature": "TestMascot.testInput()", "testcase": true, "constructor": false, "invocations": ["initContexts", "createElement", "getFieldDefinition", "add", "runInputter", "get", "singletonList", "add", "runNonInputter", "get", "runPerPartyTasks", "assertEquals", "size", "get", "assertEquals", "size", "get", "sumRows", "getShare", "get", "getMac", "get", "assertEquals", "getFieldDefinition", "multiply", "add", "assertEquals", "getFieldDefinition"]}, "focal_class": {"identifier": "Mascot", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TripleGeneration tripleGeneration;", "modifier": "private final", "type": "TripleGeneration", "declarator": "tripleGeneration", "var_name": "tripleGeneration"}, {"original_string": "private final ElementGeneration elementGeneration;", "modifier": "private final", "type": "ElementGeneration", "declarator": "elementGeneration", "var_name": "elementGeneration"}, {"original_string": "private final BitConverter bitConverter;", "modifier": "private final", "type": "BitConverter", "declarator": "bitConverter", "var_name": "bitConverter"}, {"original_string": "private final MascotResourcePool resourcePool;", "modifier": "private final", "type": "MascotResourcePool", "declarator": "resourcePool", "var_name": "resourcePool"}], "methods": [{"identifier": "Mascot", "parameters": "(MascotResourcePool resourcePool, Network network, FieldElement macKeyShare)", "modifiers": "public", "return": "", "signature": " Mascot(MascotResourcePool resourcePool, Network network, FieldElement macKeyShare)", "full_signature": "public  Mascot(MascotResourcePool resourcePool, Network network, FieldElement macKeyShare)", "class_method_signature": "Mascot.Mascot(MascotResourcePool resourcePool, Network network, FieldElement macKeyShare)", "testcase": false, "constructor": true}, {"identifier": "getTriples", "parameters": "(int numTriples)", "modifiers": "public", "return": "List<MultiplicationTriple>", "signature": "List<MultiplicationTriple> getTriples(int numTriples)", "full_signature": "public List<MultiplicationTriple> getTriples(int numTriples)", "class_method_signature": "Mascot.getTriples(int numTriples)", "testcase": false, "constructor": false}, {"identifier": "input", "parameters": "(List<FieldElement> rawElements)", "modifiers": "public", "return": "List<AuthenticatedElement>", "signature": "List<AuthenticatedElement> input(List<FieldElement> rawElements)", "full_signature": "public List<AuthenticatedElement> input(List<FieldElement> rawElements)", "class_method_signature": "Mascot.input(List<FieldElement> rawElements)", "testcase": false, "constructor": false}, {"identifier": "input", "parameters": "(Integer inputterId, int numElements)", "modifiers": "public", "return": "List<AuthenticatedElement>", "signature": "List<AuthenticatedElement> input(Integer inputterId, int numElements)", "full_signature": "public List<AuthenticatedElement> input(Integer inputterId, int numElements)", "class_method_signature": "Mascot.input(Integer inputterId, int numElements)", "testcase": false, "constructor": false}, {"identifier": "getRandomElements", "parameters": "(int numElements)", "modifiers": "public", "return": "List<AuthenticatedElement>", "signature": "List<AuthenticatedElement> getRandomElements(int numElements)", "full_signature": "public List<AuthenticatedElement> getRandomElements(int numElements)", "class_method_signature": "Mascot.getRandomElements(int numElements)", "testcase": false, "constructor": false}, {"identifier": "getInputMasks", "parameters": "(Integer maskerId, int numMasks)", "modifiers": "public", "return": "List<InputMask>", "signature": "List<InputMask> getInputMasks(Integer maskerId, int numMasks)", "full_signature": "public List<InputMask> getInputMasks(Integer maskerId, int numMasks)", "class_method_signature": "Mascot.getInputMasks(Integer maskerId, int numMasks)", "testcase": false, "constructor": false}, {"identifier": "getRandomBits", "parameters": "(int numBits)", "modifiers": "public", "return": "List<AuthenticatedElement>", "signature": "List<AuthenticatedElement> getRandomBits(int numBits)", "full_signature": "public List<AuthenticatedElement> getRandomBits(int numBits)", "class_method_signature": "Mascot.getRandomBits(int numBits)", "testcase": false, "constructor": false}], "file": "tools/mascot/src/main/java/dk/alexandra/fresco/tools/mascot/Mascot.java"}, "focal_method": {"identifier": "input", "parameters": "(List<FieldElement> rawElements)", "modifiers": "public", "return": "List<AuthenticatedElement>", "body": "public List<AuthenticatedElement> input(List<FieldElement> rawElements) {\n    return elementGeneration.input(rawElements);\n  }", "signature": "List<AuthenticatedElement> input(List<FieldElement> rawElements)", "full_signature": "public List<AuthenticatedElement> input(List<FieldElement> rawElements)", "class_method_signature": "Mascot.input(List<FieldElement> rawElements)", "testcase": false, "constructor": false, "invocations": ["input"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}