{"test_class": {"identifier": "BenjaminiYekutieliTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON=0.00001;", "modifier": "private static final", "type": "double", "declarator": "EPSILON=0.00001", "var_name": "EPSILON"}, {"original_string": "private static List<PValue> pvallist;", "modifier": "private static", "type": "List<PValue>", "declarator": "pvallist", "var_name": "pvallist"}], "file": "phenol-analysis/src/test/java/org/monarchinitiative/phenol/stats/mtc/BenjaminiYekutieliTest.java"}, "test_case": {"identifier": "testB", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testB() {\n    MultipleTestingCorrection bonf = new BenjaminiYekutieli();\n    bonf.adjustPvals(pvallist);\n    // index 0\n    PValue item = getResult(MadeUpPValues.B,pvallist);\n    assertNotNull(item);\n    double adjpval = item.getAdjustedPValue(); // raw value was 0.0001 // raw value was 0.0001\n    assertEquals(0.009954687,adjpval,EPSILON);\n  }", "signature": "void testB()", "full_signature": "@Test void testB()", "class_method_signature": "BenjaminiYekutieliTest.testB()", "testcase": true, "constructor": false, "invocations": ["adjustPvals", "getResult", "assertNotNull", "getAdjustedPValue", "assertEquals"]}, "focal_class": {"identifier": "BenjaminiYekutieli", "superclass": "", "interfaces": "implements MultipleTestingCorrection", "fields": [], "methods": [{"identifier": "adjustPvals", "parameters": "(List<? extends PValue> pvals)", "modifiers": "@Override public", "return": "void", "signature": "void adjustPvals(List<? extends PValue> pvals)", "full_signature": "@Override public void adjustPvals(List<? extends PValue> pvals)", "class_method_signature": "BenjaminiYekutieli.adjustPvals(List<? extends PValue> pvals)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "BenjaminiYekutieli.getName()", "testcase": false, "constructor": false}], "file": "phenol-analysis/src/main/java/org/monarchinitiative/phenol/stats/mtc/BenjaminiYekutieli.java"}, "focal_method": {"identifier": "adjustPvals", "parameters": "(List<? extends PValue> pvals)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void adjustPvals(List<? extends PValue> pvals) {\n    Collections.sort(pvals);\n    int N = pvals.size();\n    double h = 0.0;\n    for (int l = 1; l <= N; l++) {\n      h += 1.0 / l;\n    }\n    /* Adjust the p values according to BY. Note that all object\n     * within relevantP also are objects within p!\n     */\n    for (int r = 0; r < N; r++) {\n      PValue item = pvals.get(r);\n      double raw_p = item.getRawPValue();\n      double adj_p = raw_p * N * h / (r + 1);\n      item.setAdjustedPValue(adj_p);\n    }\n    enforcePValueMonotony(pvals);\n  }", "signature": "void adjustPvals(List<? extends PValue> pvals)", "full_signature": "@Override public void adjustPvals(List<? extends PValue> pvals)", "class_method_signature": "BenjaminiYekutieli.adjustPvals(List<? extends PValue> pvals)", "testcase": false, "constructor": false, "invocations": ["sort", "size", "get", "getRawPValue", "setAdjustedPValue", "enforcePValueMonotony"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}