{"test_class": {"identifier": "SimpleHibernatePropertyResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SimpleHibernatePropertyResolver resolver = new SimpleHibernatePropertyResolver();", "modifier": "private final", "type": "SimpleHibernatePropertyResolver", "declarator": "resolver = new SimpleHibernatePropertyResolver()", "var_name": "resolver"}], "file": "seeking-hibernate/src/test/java/com/eharmony/matching/seeking/translator/hibernate/SimpleHibernatePropertyResolverTest.java"}, "test_case": {"identifier": "testYField_LatLon", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testYField_LatLon() {\n        String resolved = resolver.resolveYField(\"latlon\", WithLatLon.class);\n        assertEquals(\"latlon.longitude\", resolved);\n    }", "signature": "void testYField_LatLon()", "full_signature": "@Test public void testYField_LatLon()", "class_method_signature": "SimpleHibernatePropertyResolverTest.testYField_LatLon()", "testcase": true, "constructor": false, "invocations": ["resolveYField", "assertEquals"]}, "focal_class": {"identifier": "SimpleHibernatePropertyResolver", "superclass": "extends SimplePropertyResolver", "interfaces": "implements HibernatePropertyResolver", "fields": [{"original_string": "private final Function<Annotation, String> xFieldExtractor = new Function<Annotation, String>() {\n        @Override\n        public String apply(Annotation a) {\n            return ((XField) a).value(); \n        }\n    };", "modifier": "private final", "type": "Function<Annotation, String>", "declarator": "xFieldExtractor = new Function<Annotation, String>() {\n        @Override\n        public String apply(Annotation a) {\n            return ((XField) a).value(); \n        }\n    }", "var_name": "xFieldExtractor"}, {"original_string": "private final Function<Annotation, String> yFieldExtractor = new Function<Annotation, String>() {\n        @Override\n        public String apply(Annotation a) {\n            return ((YField) a).value(); \n        }\n    };", "modifier": "private final", "type": "Function<Annotation, String>", "declarator": "yFieldExtractor = new Function<Annotation, String>() {\n        @Override\n        public String apply(Annotation a) {\n            return ((YField) a).value(); \n        }\n    }", "var_name": "yFieldExtractor"}], "methods": [{"identifier": "resolveXField", "parameters": "(String propertyName, Class<?> entityClass)", "modifiers": "@Override public", "return": "String", "signature": "String resolveXField(String propertyName, Class<?> entityClass)", "full_signature": "@Override public String resolveXField(String propertyName, Class<?> entityClass)", "class_method_signature": "SimpleHibernatePropertyResolver.resolveXField(String propertyName, Class<?> entityClass)", "testcase": false, "constructor": false}, {"identifier": "resolveYField", "parameters": "(String propertyName, Class<?> entityClass)", "modifiers": "@Override public", "return": "String", "signature": "String resolveYField(String propertyName, Class<?> entityClass)", "full_signature": "@Override public String resolveYField(String propertyName, Class<?> entityClass)", "class_method_signature": "SimpleHibernatePropertyResolver.resolveYField(String propertyName, Class<?> entityClass)", "testcase": false, "constructor": false}, {"identifier": "resolveAnnotatedSubFieldName", "parameters": "(\n            String propertyName, Class<?> entityClass, Class<A> annotationType,\n            Function<Annotation, String> extractor)", "modifiers": "protected", "return": "String", "signature": "String resolveAnnotatedSubFieldName(\n            String propertyName, Class<?> entityClass, Class<A> annotationType,\n            Function<Annotation, String> extractor)", "full_signature": "protected String resolveAnnotatedSubFieldName(\n            String propertyName, Class<?> entityClass, Class<A> annotationType,\n            Function<Annotation, String> extractor)", "class_method_signature": "SimpleHibernatePropertyResolver.resolveAnnotatedSubFieldName(\n            String propertyName, Class<?> entityClass, Class<A> annotationType,\n            Function<Annotation, String> extractor)", "testcase": false, "constructor": false}], "file": "seeking-hibernate/src/main/java/com/eharmony/matching/seeking/translator/hibernate/SimpleHibernatePropertyResolver.java"}, "focal_method": {"identifier": "resolveYField", "parameters": "(String propertyName, Class<?> entityClass)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String resolveYField(String propertyName, Class<?> entityClass) {\n        return resolveAnnotatedSubFieldName(propertyName, entityClass,\n                YField.class, yFieldExtractor);\n    }", "signature": "String resolveYField(String propertyName, Class<?> entityClass)", "full_signature": "@Override public String resolveYField(String propertyName, Class<?> entityClass)", "class_method_signature": "SimpleHibernatePropertyResolver.resolveYField(String propertyName, Class<?> entityClass)", "testcase": false, "constructor": false, "invocations": ["resolveAnnotatedSubFieldName"]}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}