{"test_class": {"identifier": "ConfigurationConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConfigurationConverter.Metadata metadata;", "modifier": "private", "type": "ConfigurationConverter.Metadata", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private ConfigurationConverter converter;", "modifier": "private", "type": "ConfigurationConverter", "declarator": "converter", "var_name": "converter"}, {"original_string": "private XStream xstream;", "modifier": "private", "type": "XStream", "declarator": "xstream", "var_name": "xstream"}], "file": "geoclient-core/src/test/java/gov/nyc/doitt/gis/geoclient/config/xml/ConfigurationConverterTest.java"}, "test_case": {"identifier": "testUnmarshal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnmarshal()\n    {\n        DefaultConfiguration result = (DefaultConfiguration) xstream\n                .fromXML(\"<configuration>\" + \"<requiredArgument name=\\\"arg1\\\" value=\\\"val1\\\"/>\"\n                        + \"<requiredArgument name=\\\"arg2\\\" value=\\\"val2\\\"/>\" + \"</configuration>\");\n        assertNotNull(result);\n        assertNotNull(result.requiredArguments());\n        assertEquals(\"val1\", result.requiredArguments().get(\"arg1\"));\n        assertEquals(\"val2\", result.requiredArguments().get(\"arg2\"));\n    }", "signature": "void testUnmarshal()", "full_signature": "@Test public void testUnmarshal()", "class_method_signature": "ConfigurationConverterTest.testUnmarshal()", "testcase": true, "constructor": false, "invocations": ["fromXML", "assertNotNull", "assertNotNull", "requiredArguments", "assertEquals", "get", "requiredArguments", "assertEquals", "get", "requiredArguments"]}, "focal_class": {"identifier": "ConfigurationConverter", "superclass": "", "interfaces": "implements Converter", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ConfigurationConverter.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ConfigurationConverter.class)", "var_name": "log"}, {"original_string": "private final Metadata metadata;", "modifier": "private final", "type": "Metadata", "declarator": "metadata", "var_name": "metadata"}], "methods": [{"identifier": "ConfigurationConverter", "parameters": "(Metadata metadata)", "modifiers": "public", "return": "", "signature": " ConfigurationConverter(Metadata metadata)", "full_signature": "public  ConfigurationConverter(Metadata metadata)", "class_method_signature": "ConfigurationConverter.ConfigurationConverter(Metadata metadata)", "testcase": false, "constructor": true}, {"identifier": "canConvert", "parameters": "(@SuppressWarnings(\"rawtypes\") Class type)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canConvert(@SuppressWarnings(\"rawtypes\") Class type)", "full_signature": "@Override public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class type)", "class_method_signature": "ConfigurationConverter.canConvert(@SuppressWarnings(\"rawtypes\") Class type)", "testcase": false, "constructor": false}, {"identifier": "marshal", "parameters": "(Object source, HierarchicalStreamWriter writer, MarshallingContext context)", "modifiers": "@Override public", "return": "void", "signature": "void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context)", "full_signature": "@Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context)", "class_method_signature": "ConfigurationConverter.marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context)", "testcase": false, "constructor": false}, {"identifier": "unmarshal", "parameters": "(HierarchicalStreamReader reader, UnmarshallingContext context)", "modifiers": "@Override public", "return": "Object", "signature": "Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "full_signature": "@Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "class_method_signature": "ConfigurationConverter.unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "testcase": false, "constructor": false}], "file": "geoclient-core/src/main/java/gov/nyc/doitt/gis/geoclient/config/xml/ConfigurationConverter.java"}, "focal_method": {"identifier": "unmarshal", "parameters": "(HierarchicalStreamReader reader, UnmarshallingContext context)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)\n    {\n        DefaultConfiguration configuration = new DefaultConfiguration();\n        Map<String, Object> requiredArguments = new HashMap<String, Object>();\n        while(reader.hasMoreChildren()) {\n            reader.moveDown();\n            if(metadata.xmlRequiredArgumentElement.equals(reader.getNodeName()))\n            {\n                requiredArguments.put(reader.getAttribute(metadata.xmlRequiredArgumentAttributeName), reader.getAttribute(metadata.xmlRequiredArgumentAttributeValue));\n            }\n            reader.moveUp();\n        }\n        configuration.setRequiredArguments(requiredArguments);\n        log.trace(\"Created {}\", configuration);\n        return configuration;\n    }", "signature": "Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "full_signature": "@Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "class_method_signature": "ConfigurationConverter.unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "testcase": false, "constructor": false, "invocations": ["hasMoreChildren", "moveDown", "equals", "getNodeName", "put", "getAttribute", "getAttribute", "moveUp", "setRequiredArguments", "trace"]}, "repository": {"repo_id": 49475567, "url": "https://github.com/CityOfNewYork/geoclient", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 42, "size": 9801, "license": "licensed"}}