{"test_class": {"identifier": "LabeledVectorSetTest", "superclass": "", "interfaces": "implements ExternalizableTest<LabeledVectorSet>", "fields": [{"original_string": "private static final String KNN_IRIS_TXT = \"datasets/knn/iris.txt\";", "modifier": "private static final", "type": "String", "declarator": "KNN_IRIS_TXT = \"datasets/knn/iris.txt\"", "var_name": "KNN_IRIS_TXT"}, {"original_string": "private static final String NO_DATA_TXT = \"datasets/knn/no_data.txt\";", "modifier": "private static final", "type": "String", "declarator": "NO_DATA_TXT = \"datasets/knn/no_data.txt\"", "var_name": "NO_DATA_TXT"}, {"original_string": "private static final String EMPTY_TXT = \"datasets/knn/empty.txt\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY_TXT = \"datasets/knn/empty.txt\"", "var_name": "EMPTY_TXT"}, {"original_string": "private static final String IRIS_INCORRECT_TXT = \"datasets/knn/iris_incorrect.txt\";", "modifier": "private static final", "type": "String", "declarator": "IRIS_INCORRECT_TXT = \"datasets/knn/iris_incorrect.txt\"", "var_name": "IRIS_INCORRECT_TXT"}, {"original_string": "private static final String IRIS_MISSED_DATA = \"datasets/knn/missed_data.txt\";", "modifier": "private static final", "type": "String", "declarator": "IRIS_MISSED_DATA = \"datasets/knn/missed_data.txt\"", "var_name": "IRIS_MISSED_DATA"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/structures/LabeledVectorSetTest.java"}, "test_case": {"identifier": "testLabels", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLabels() {\n        double[][] mtx =\n            new double[][] {\n                {1.0, 1.0},\n                {1.0, 2.0},\n                {2.0, 1.0},\n                {-1.0, -1.0},\n                {-1.0, -2.0},\n                {-2.0, -1.0}};\n        double[] lbs = new double[] {1.0, 1.0, 1.0, 2.0, 2.0, 2.0};\n\n        LabeledVectorSet dataset = new LabeledVectorSet(mtx, lbs);\n        final double[] labels = dataset.labels();\n        for (int i = 0; i < lbs.length; i++)\n            assertEquals(lbs[i], labels[i], 0);\n    }", "signature": "void testLabels()", "full_signature": "@Test public void testLabels()", "class_method_signature": "LabeledVectorSetTest.testLabels()", "testcase": true, "constructor": false, "invocations": ["labels", "assertEquals"]}, "focal_class": {"identifier": "LabeledVectorSet", "superclass": "extends Dataset<Row>", "interfaces": "implements AutoCloseable", "fields": [], "methods": [{"identifier": "LabeledVectorSet", "parameters": "()", "modifiers": "public", "return": "", "signature": " LabeledVectorSet()", "full_signature": "public  LabeledVectorSet()", "class_method_signature": "LabeledVectorSet.LabeledVectorSet()", "testcase": false, "constructor": true}, {"identifier": "LabeledVectorSet", "parameters": "(int rowSize, int colSize, boolean isDistributed)", "modifiers": "public", "return": "", "signature": " LabeledVectorSet(int rowSize, int colSize, boolean isDistributed)", "full_signature": "public  LabeledVectorSet(int rowSize, int colSize, boolean isDistributed)", "class_method_signature": "LabeledVectorSet.LabeledVectorSet(int rowSize, int colSize, boolean isDistributed)", "testcase": false, "constructor": true}, {"identifier": "LabeledVectorSet", "parameters": "(int rowSize, int colSize)", "modifiers": "public", "return": "", "signature": " LabeledVectorSet(int rowSize, int colSize)", "full_signature": "public  LabeledVectorSet(int rowSize, int colSize)", "class_method_signature": "LabeledVectorSet.LabeledVectorSet(int rowSize, int colSize)", "testcase": false, "constructor": true}, {"identifier": "LabeledVectorSet", "parameters": "(int rowSize, int colSize, String[] featureNames, boolean isDistributed)", "modifiers": "public", "return": "", "signature": " LabeledVectorSet(int rowSize, int colSize, String[] featureNames, boolean isDistributed)", "full_signature": "public  LabeledVectorSet(int rowSize, int colSize, String[] featureNames, boolean isDistributed)", "class_method_signature": "LabeledVectorSet.LabeledVectorSet(int rowSize, int colSize, String[] featureNames, boolean isDistributed)", "testcase": false, "constructor": true}, {"identifier": "LabeledVectorSet", "parameters": "(Row[] data)", "modifiers": "public", "return": "", "signature": " LabeledVectorSet(Row[] data)", "full_signature": "public  LabeledVectorSet(Row[] data)", "class_method_signature": "LabeledVectorSet.LabeledVectorSet(Row[] data)", "testcase": false, "constructor": true}, {"identifier": "initializeDataWithLabeledVectors", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeDataWithLabeledVectors()", "full_signature": "private void initializeDataWithLabeledVectors()", "class_method_signature": "LabeledVectorSet.initializeDataWithLabeledVectors()", "testcase": false, "constructor": false}, {"identifier": "LabeledVectorSet", "parameters": "(Row[] data, int colSize)", "modifiers": "public", "return": "", "signature": " LabeledVectorSet(Row[] data, int colSize)", "full_signature": "public  LabeledVectorSet(Row[] data, int colSize)", "class_method_signature": "LabeledVectorSet.LabeledVectorSet(Row[] data, int colSize)", "testcase": false, "constructor": true}, {"identifier": "LabeledVectorSet", "parameters": "(double[][] mtx, double[] lbs)", "modifiers": "public", "return": "", "signature": " LabeledVectorSet(double[][] mtx, double[] lbs)", "full_signature": "public  LabeledVectorSet(double[][] mtx, double[] lbs)", "class_method_signature": "LabeledVectorSet.LabeledVectorSet(double[][] mtx, double[] lbs)", "testcase": false, "constructor": true}, {"identifier": "LabeledVectorSet", "parameters": "(double[][] mtx, double[] lbs, String[] featureNames, boolean isDistributed)", "modifiers": "public", "return": "", "signature": " LabeledVectorSet(double[][] mtx, double[] lbs, String[] featureNames, boolean isDistributed)", "full_signature": "public  LabeledVectorSet(double[][] mtx, double[] lbs, String[] featureNames, boolean isDistributed)", "class_method_signature": "LabeledVectorSet.LabeledVectorSet(double[][] mtx, double[] lbs, String[] featureNames, boolean isDistributed)", "testcase": false, "constructor": true}, {"identifier": "label", "parameters": "(int idx)", "modifiers": "public", "return": "double", "signature": "double label(int idx)", "full_signature": "public double label(int idx)", "class_method_signature": "LabeledVectorSet.label(int idx)", "testcase": false, "constructor": false}, {"identifier": "labels", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] labels()", "full_signature": "public double[] labels()", "class_method_signature": "LabeledVectorSet.labels()", "testcase": false, "constructor": false}, {"identifier": "setLabel", "parameters": "(int idx, double lb)", "modifiers": "public", "return": "void", "signature": "void setLabel(int idx, double lb)", "full_signature": "public void setLabel(int idx, double lb)", "class_method_signature": "LabeledVectorSet.setLabel(int idx, double lb)", "testcase": false, "constructor": false}, {"identifier": "emptyVector", "parameters": "(int size, boolean isDistributed)", "modifiers": "public static", "return": "Vector", "signature": "Vector emptyVector(int size, boolean isDistributed)", "full_signature": "public static Vector emptyVector(int size, boolean isDistributed)", "class_method_signature": "LabeledVectorSet.emptyVector(int size, boolean isDistributed)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "public", "return": "LabeledVectorSet", "signature": "LabeledVectorSet copy()", "full_signature": "public LabeledVectorSet copy()", "class_method_signature": "LabeledVectorSet.copy()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "LabeledVectorSet.close()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/structures/LabeledVectorSet.java"}, "focal_method": {"identifier": "labels", "parameters": "()", "modifiers": "public", "return": "double[]", "body": "public double[] labels() {\n        assert data != null;\n        assert data.length > 0;\n\n        double[] labels = new double[data.length];\n\n        for (int i = 0; i < data.length; i++)\n            labels[i] = (double)data[i].label();\n\n        return labels;\n    }", "signature": "double[] labels()", "full_signature": "public double[] labels()", "class_method_signature": "LabeledVectorSet.labels()", "testcase": false, "constructor": false, "invocations": ["label"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}