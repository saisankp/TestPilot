{"test_class": {"identifier": "CloneGitTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/ship/command/CloneGitTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test @PrepareForTest({CloneGit.class, FetchResult.class, RevCommit.class}) public", "return": "void", "body": "@Test\n  @PrepareForTest({CloneGit.class, FetchResult.class, RevCommit.class})\n  public void testExecute() throws Exception {\n    final byte[] fileContent = randomUUID().toString().getBytes();\n    final InMemoryRepository repository = mock(InMemoryRepository.class);\n    final Git git = mock(Git.class);\n    final RemoteAddCommand remoteAddCommand = mock(RemoteAddCommand.class);\n    final FetchCommand fetchCommand = mock(FetchCommand.class);\n    final FetchResult fetchResult = mock(FetchResult.class);\n    final Ref headRef = mock(Ref.class);\n    final ObjectId headId = mock(ObjectId.class);\n    final RevWalk revWalk = mock(RevWalk.class);\n    final RevCommit revCommit = mock(RevCommit.class);\n    final RevTree revTree = mock(RevTree.class);\n    final TreeWalk treeWalk = mock(TreeWalk.class);\n    final ObjectId fileId = mock(ObjectId.class);\n    final ObjectLoader objectLoader = mock(ObjectLoader.class);\n\n    whenNew(InMemoryRepository.class).withAnyArguments().thenReturn(repository);\n    whenNew(Git.class).withAnyArguments().thenReturn(git);\n    when(git.remoteAdd()).thenReturn(remoteAddCommand);\n    when(remoteAddCommand.setName(anyString())).thenReturn(remoteAddCommand);\n    when(remoteAddCommand.setUri(any(URIish.class))).thenReturn(remoteAddCommand);\n    when(git.fetch()).thenReturn(fetchCommand);\n    when(fetchCommand.setRemote(anyString())).thenReturn(fetchCommand);\n    when(fetchCommand.setRefSpecs(anyString())).thenReturn(fetchCommand);\n    when(fetchCommand.call()).thenReturn(fetchResult);\n    when(fetchResult.getAdvertisedRef(eq(HEAD))).thenReturn(headRef);\n    when(headRef.getObjectId()).thenReturn(headId);\n    whenNew(RevWalk.class).withAnyArguments().thenReturn(revWalk);\n    when(revWalk.parseCommit(any(AnyObjectId.class))).thenReturn(revCommit);\n    when(revCommit.getTree()).thenReturn(revTree);\n    whenNew(TreeWalk.class).withAnyArguments().thenReturn(treeWalk);\n    final AtomicInteger visitCounter = new AtomicInteger(0);\n    when(treeWalk.next()).then(invocation -> 0 == visitCounter.getAndIncrement());\n    when(treeWalk.getObjectId(0)).thenReturn(fileId);\n    when(treeWalk.getPathString()).thenReturn(randomUUID().toString());\n    when(repository.open(fileId)).thenReturn(objectLoader);\n    doAnswer(invocation -> {\n      try {\n        ((OutputStream) invocation.getArgument(0)).write(fileContent);\n      } catch (final IOException ex) {\n        fail(\"Unexpected exception\");\n      }\n      return null;\n    }).when(objectLoader).copyTo(any(OutputStream.class));\n\n    final String packageName = randomUUID().toString();\n    final CloneGit cloneGit = new CloneGit();\n    cloneGit.setArguments(asList(packageName));\n    cloneGit.execute();\n\n    cloneGit.stream().forEach(file -> {\n      try {\n        assertArrayEquals(fileContent, from(file.open()));\n      } catch (final IOException e) {\n        e.printStackTrace();\n        fail();\n      }\n    });\n  }", "signature": "void testExecute()", "full_signature": "@Test @PrepareForTest({CloneGit.class, FetchResult.class, RevCommit.class}) public void testExecute()", "class_method_signature": "CloneGitTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["getBytes", "toString", "randomUUID", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "thenReturn", "withAnyArguments", "whenNew", "thenReturn", "withAnyArguments", "whenNew", "thenReturn", "when", "remoteAdd", "thenReturn", "when", "setName", "anyString", "thenReturn", "when", "setUri", "any", "thenReturn", "when", "fetch", "thenReturn", "when", "setRemote", "anyString", "thenReturn", "when", "setRefSpecs", "anyString", "thenReturn", "when", "call", "thenReturn", "when", "getAdvertisedRef", "eq", "thenReturn", "when", "getObjectId", "thenReturn", "withAnyArguments", "whenNew", "thenReturn", "when", "parseCommit", "any", "thenReturn", "when", "getTree", "thenReturn", "withAnyArguments", "whenNew", "then", "when", "next", "getAndIncrement", "thenReturn", "when", "getObjectId", "thenReturn", "when", "getPathString", "toString", "randomUUID", "thenReturn", "when", "open", "copyTo", "when", "doAnswer", "write", "getArgument", "fail", "any", "toString", "randomUUID", "setArguments", "asList", "execute", "forEach", "stream", "assertArrayEquals", "from", "open", "printStackTrace", "fail"]}, "focal_class": {"identifier": "CloneGit", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "protected static final String URI_PATTERN = \"https://github.com/{0}.git\";", "modifier": "protected static final", "type": "String", "declarator": "URI_PATTERN = \"https://github.com/{0}.git\"", "var_name": "URI_PATTERN"}, {"original_string": "@Getter\n  @Setter\n  protected FileSet fileSet = new FileSet();", "modifier": "@Getter\n  @Setter\n  protected", "type": "FileSet", "declarator": "fileSet = new FileSet()", "var_name": "fileSet"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "CloneGit.execute()", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(final Repository repository, final RevWalk revWalk,\n      final ObjectId commitId)", "modifiers": "protected", "return": "void", "signature": "void visit(final Repository repository, final RevWalk revWalk,\n      final ObjectId commitId)", "full_signature": "protected void visit(final Repository repository, final RevWalk revWalk,\n      final ObjectId commitId)", "class_method_signature": "CloneGit.visit(final Repository repository, final RevWalk revWalk,\n      final ObjectId commitId)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(final Repository repository, final TreeWalk treeWalk)", "modifiers": "protected", "return": "void", "signature": "void visit(final Repository repository, final TreeWalk treeWalk)", "full_signature": "protected void visit(final Repository repository, final TreeWalk treeWalk)", "class_method_signature": "CloneGit.visit(final Repository repository, final TreeWalk treeWalk)", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "()", "modifiers": "public", "return": "Stream<FileContent>", "signature": "Stream<FileContent> stream()", "full_signature": "public Stream<FileContent> stream()", "class_method_signature": "CloneGit.stream()", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/command/CloneGit.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void execute() throws Exception {\n    final String packageName = getArgument(0);\n    final String branch = getOptionalArgument(1).orElse(\"master\");\n    logger.debug(\"Package name: {}, Branch: {}\", packageName, branch);\n\n    final String remoteUri = MessageFormat.format(URI_PATTERN, packageName);\n    final InMemoryRepository repository = new InMemoryRepository(new DfsRepositoryDescription());\n    final Git git = new Git(repository);\n    git.remoteAdd().setName(\"origin\").setUri(new URIish(remoteUri)).call();\n\n    logger.trace(\"Git: {}\", git);\n\n    final FetchResult fetchResult = git.fetch()\n        .setRemote(\"origin\")\n        .setRefSpecs(\"+refs/heads/\" + branch + \":refs/remotes/origin/\" + branch)\n        .call();\n    logger.debug(\"Fetch result: {}\", fetchResult);\n\n    logger.debug(\"Refs: {}\", fetchResult.getAdvertisedRefs());\n    final Ref fetchHead = fetchResult.getAdvertisedRef(HEAD);\n\n    final ObjectId commitId = fetchHead.getObjectId();\n    logger.debug(\"Commit id: {}\", commitId);\n\n    try (final RevWalk revWalk = new RevWalk(repository)) {\n      visit(repository, revWalk, commitId);\n    }\n    logger.debug(\"FileSet: {}\", fileSet);\n  }", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "CloneGit.execute()", "testcase": false, "constructor": false, "invocations": ["getArgument", "orElse", "getOptionalArgument", "debug", "format", "call", "setUri", "setName", "remoteAdd", "trace", "call", "setRefSpecs", "setRemote", "fetch", "debug", "debug", "getAdvertisedRefs", "getAdvertisedRef", "getObjectId", "debug", "visit", "debug"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}