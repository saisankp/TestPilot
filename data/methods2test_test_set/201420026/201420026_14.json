{"test_class": {"identifier": "LideaLogErrorDAOTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Resource\n    private\n    LideaLogErrorDAO lideaLogErrorDAO;", "modifier": "@Resource\n    private", "type": "LideaLogErrorDAO", "declarator": "lideaLogErrorDAO", "var_name": "lideaLogErrorDAO"}], "file": "mmc-lidea-web/src/test/java/com/mmc/flink/lidea/dao/LideaLogErrorDAOTest.java"}, "test_case": {"identifier": "list", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void list() {\n\n        List<String> traceIds = new ArrayList<>();\n        traceIds.add(\"a3f2f2660d6c4a869626c878be92961d\");\n\n        List<LideaLogErrorDetailBO> ret = lideaLogErrorDAO.list(traceIds);\n\n\n        System.out.println(\"==========================================================================================\");\n        System.out.println(JSON.toJSONString(ret));\n\n    }", "signature": "void list()", "full_signature": "@Test public void list()", "class_method_signature": "LideaLogErrorDAOTest.list()", "testcase": true, "constructor": false, "invocations": ["add", "list", "println", "println", "toJSONString"]}, "focal_class": {"identifier": "LideaLogErrorDAO", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Resource\n    private HbaseTemplate hbaseTemplate;", "modifier": "@Resource\n    private", "type": "HbaseTemplate", "declarator": "hbaseTemplate", "var_name": "hbaseTemplate"}], "methods": [{"identifier": "list", "parameters": "(List<String> traceIds)", "modifiers": "public", "return": "List<LideaLogErrorDetailBO>", "signature": "List<LideaLogErrorDetailBO> list(List<String> traceIds)", "full_signature": "public List<LideaLogErrorDetailBO> list(List<String> traceIds)", "class_method_signature": "LideaLogErrorDAO.list(List<String> traceIds)", "testcase": false, "constructor": false}], "file": "mmc-lidea-web/src/main/java/com/mmc/flink/lidea/dao/LideaLogErrorDAO.java"}, "focal_method": {"identifier": "list", "parameters": "(List<String> traceIds)", "modifiers": "public", "return": "List<LideaLogErrorDetailBO>", "body": "public List<LideaLogErrorDetailBO> list(List<String> traceIds) {\n\n\n        return hbaseTemplate.execute(Const.LIDEA_LOG_DEATIL_TABLE, table -> {\n\n            List<LideaLogErrorDetailBO> bos = new ArrayList<>();\n\n            if (traceIds.size() > 1) {\n\n                List<Get> list = new ArrayList<>();\n\n                for (String traceId : traceIds) {\n\n                    Get get = new Get(BytesUtils.toBytes(traceId));\n\n                    list.add(get);\n                }\n\n                Result[] rs = table.get(list);\n\n                for (Result r : rs) {\n                    LideaLogErrorDetailBO bo = LideaLogResultsExtractor.mapErrorDetail(r);\n                    bos.add(bo);\n                }\n                return bos;\n\n            } else {\n\n                Get get = new Get(BytesUtils.toBytes(traceIds.get(0)));\n                Result r = table.get(get);\n                if (r.isEmpty()) {\n                    return null;\n                }\n                LideaLogErrorDetailBO bo = LideaLogResultsExtractor.mapErrorDetail(r);\n\n                return Collections.singletonList(bo);\n            }\n        });\n\n    }", "signature": "List<LideaLogErrorDetailBO> list(List<String> traceIds)", "full_signature": "public List<LideaLogErrorDetailBO> list(List<String> traceIds)", "class_method_signature": "LideaLogErrorDAO.list(List<String> traceIds)", "testcase": false, "constructor": false, "invocations": ["execute", "size", "toBytes", "add", "get", "mapErrorDetail", "add", "toBytes", "get", "get", "isEmpty", "mapErrorDetail", "singletonList"]}, "repository": {"repo_id": 201420026, "url": "https://github.com/VIPJoey/Lidea", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 13, "size": 991, "license": "licensed"}}