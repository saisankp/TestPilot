{"test_class": {"identifier": "ContingencyTest", "superclass": "", "interfaces": "", "fields": [], "file": "contingency/contingency-api/src/test/java/com/powsybl/contingency/ContingencyTest.java"}, "test_case": {"identifier": "validationTestForSVC", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validationTestForSVC() {\n        Network network = SvcTestCaseFactory.create();\n        Contingency staticVarCompensatorContingency = new Contingency(\"SVC contingency\", new StaticVarCompensatorContingency(\"SVC2\"));\n        Contingency staticVarCompensatorInvalidContingency = new Contingency(\"SVC invalid contingency\", new StaticVarCompensatorContingency(\"SVC\"));\n        List<Contingency> validContingencies = Contingency.checkValidity(Arrays.asList(staticVarCompensatorContingency, staticVarCompensatorInvalidContingency), network);\n        assertEquals(Arrays.asList(\"SVC contingency\"),\n                validContingencies.stream().map(Contingency::getId).collect(Collectors.toList()));\n    }", "signature": "void validationTestForSVC()", "full_signature": "@Test public void validationTestForSVC()", "class_method_signature": "ContingencyTest.validationTestForSVC()", "testcase": true, "constructor": false, "invocations": ["create", "checkValidity", "asList", "assertEquals", "asList", "collect", "map", "stream", "toList"]}, "focal_class": {"identifier": "Contingency", "superclass": "extends AbstractExtendable<Contingency>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Contingency.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Contingency.class)", "var_name": "LOGGER"}, {"original_string": "private String id;", "modifier": "private", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private final List<ContingencyElement> elements;", "modifier": "private final", "type": "List<ContingencyElement>", "declarator": "elements", "var_name": "elements"}], "methods": [{"identifier": "Contingency", "parameters": "(String id, ContingencyElement... elements)", "modifiers": "public", "return": "", "signature": " Contingency(String id, ContingencyElement... elements)", "full_signature": "public  Contingency(String id, ContingencyElement... elements)", "class_method_signature": "Contingency.Contingency(String id, ContingencyElement... elements)", "testcase": false, "constructor": true}, {"identifier": "Contingency", "parameters": "(String id, List<ContingencyElement> elements)", "modifiers": "public", "return": "", "signature": " Contingency(String id, List<ContingencyElement> elements)", "full_signature": "public  Contingency(String id, List<ContingencyElement> elements)", "class_method_signature": "Contingency.Contingency(String id, List<ContingencyElement> elements)", "testcase": false, "constructor": true}, {"identifier": "checkGeneratorContingency", "parameters": "(Contingency contingency, GeneratorContingency element, Network network)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkGeneratorContingency(Contingency contingency, GeneratorContingency element, Network network)", "full_signature": "private static boolean checkGeneratorContingency(Contingency contingency, GeneratorContingency element, Network network)", "class_method_signature": "Contingency.checkGeneratorContingency(Contingency contingency, GeneratorContingency element, Network network)", "testcase": false, "constructor": false}, {"identifier": "checkStaticVarCompensatorContingency", "parameters": "(Contingency contingency, StaticVarCompensatorContingency element, Network network)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkStaticVarCompensatorContingency(Contingency contingency, StaticVarCompensatorContingency element, Network network)", "full_signature": "private static boolean checkStaticVarCompensatorContingency(Contingency contingency, StaticVarCompensatorContingency element, Network network)", "class_method_signature": "Contingency.checkStaticVarCompensatorContingency(Contingency contingency, StaticVarCompensatorContingency element, Network network)", "testcase": false, "constructor": false}, {"identifier": "checkShuntCompensatorContingency", "parameters": "(Contingency contingency, ShuntCompensatorContingency element, Network network)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkShuntCompensatorContingency(Contingency contingency, ShuntCompensatorContingency element, Network network)", "full_signature": "private static boolean checkShuntCompensatorContingency(Contingency contingency, ShuntCompensatorContingency element, Network network)", "class_method_signature": "Contingency.checkShuntCompensatorContingency(Contingency contingency, ShuntCompensatorContingency element, Network network)", "testcase": false, "constructor": false}, {"identifier": "checkSidedContingency", "parameters": "(Contingency contingency, AbstractSidedContingency element, Network network)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkSidedContingency(Contingency contingency, AbstractSidedContingency element, Network network)", "full_signature": "private static boolean checkSidedContingency(Contingency contingency, AbstractSidedContingency element, Network network)", "class_method_signature": "Contingency.checkSidedContingency(Contingency contingency, AbstractSidedContingency element, Network network)", "testcase": false, "constructor": false}, {"identifier": "checkBusbarSectionContingency", "parameters": "(Contingency contingency, BusbarSectionContingency element, Network network)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkBusbarSectionContingency(Contingency contingency, BusbarSectionContingency element, Network network)", "full_signature": "private static boolean checkBusbarSectionContingency(Contingency contingency, BusbarSectionContingency element, Network network)", "class_method_signature": "Contingency.checkBusbarSectionContingency(Contingency contingency, BusbarSectionContingency element, Network network)", "testcase": false, "constructor": false}, {"identifier": "checkDanglingLineContingency", "parameters": "(Contingency contingency, DanglingLineContingency element, Network network)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkDanglingLineContingency(Contingency contingency, DanglingLineContingency element, Network network)", "full_signature": "private static boolean checkDanglingLineContingency(Contingency contingency, DanglingLineContingency element, Network network)", "class_method_signature": "Contingency.checkDanglingLineContingency(Contingency contingency, DanglingLineContingency element, Network network)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(Contingency contingency, Network network)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValid(Contingency contingency, Network network)", "full_signature": "private static boolean isValid(Contingency contingency, Network network)", "class_method_signature": "Contingency.isValid(Contingency contingency, Network network)", "testcase": false, "constructor": false}, {"identifier": "checkValidity", "parameters": "(List<Contingency> contingencies, Network network)", "modifiers": "public static", "return": "List<Contingency>", "signature": "List<Contingency> checkValidity(List<Contingency> contingencies, Network network)", "full_signature": "public static List<Contingency> checkValidity(List<Contingency> contingencies, Network network)", "class_method_signature": "Contingency.checkValidity(List<Contingency> contingencies, Network network)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getId()", "full_signature": "public String getId()", "class_method_signature": "Contingency.getId()", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void setId(String id)", "full_signature": "public void setId(String id)", "class_method_signature": "Contingency.setId(String id)", "testcase": false, "constructor": false}, {"identifier": "addElement", "parameters": "(ContingencyElement element)", "modifiers": "public", "return": "void", "signature": "void addElement(ContingencyElement element)", "full_signature": "public void addElement(ContingencyElement element)", "class_method_signature": "Contingency.addElement(ContingencyElement element)", "testcase": false, "constructor": false}, {"identifier": "removeElement", "parameters": "(ContingencyElement element)", "modifiers": "public", "return": "void", "signature": "void removeElement(ContingencyElement element)", "full_signature": "public void removeElement(ContingencyElement element)", "class_method_signature": "Contingency.removeElement(ContingencyElement element)", "testcase": false, "constructor": false}, {"identifier": "getElements", "parameters": "()", "modifiers": "public", "return": "Collection<ContingencyElement>", "signature": "Collection<ContingencyElement> getElements()", "full_signature": "public Collection<ContingencyElement> getElements()", "class_method_signature": "Contingency.getElements()", "testcase": false, "constructor": false}, {"identifier": "toTask", "parameters": "()", "modifiers": "public", "return": "ModificationTask", "signature": "ModificationTask toTask()", "full_signature": "public ModificationTask toTask()", "class_method_signature": "Contingency.toTask()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Contingency.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Contingency.equals(Object obj)", "testcase": false, "constructor": false}], "file": "contingency/contingency-api/src/main/java/com/powsybl/contingency/Contingency.java"}, "focal_method": {"identifier": "checkValidity", "parameters": "(List<Contingency> contingencies, Network network)", "modifiers": "public static", "return": "List<Contingency>", "body": "public static List<Contingency> checkValidity(List<Contingency> contingencies, Network network) {\n        Objects.requireNonNull(contingencies);\n        Objects.requireNonNull(network);\n        return contingencies.stream()\n                .filter(c -> isValid(c, network))\n                .collect(Collectors.toList());\n    }", "signature": "List<Contingency> checkValidity(List<Contingency> contingencies, Network network)", "full_signature": "public static List<Contingency> checkValidity(List<Contingency> contingencies, Network network)", "class_method_signature": "Contingency.checkValidity(List<Contingency> contingencies, Network network)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "collect", "filter", "stream", "isValid", "toList"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}