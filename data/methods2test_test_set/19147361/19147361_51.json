{"test_class": {"identifier": "TestColumnUtil", "superclass": "extends TestBase", "interfaces": "", "fields": [{"original_string": "private static byte[] illegalQualifier = Bytes.toBytes(\"Qualifier#suffix\");", "modifier": "private static", "type": "byte[]", "declarator": "illegalQualifier = Bytes.toBytes(\"Qualifier#suffix\")", "var_name": "illegalQualifier"}, {"original_string": "private static byte[] illegalLockQualifier = Bytes.add(FAMILY,\n    ColumnUtil.PRESERVED_COLUMN_CHARACTER_BYTES, illegalQualifier);", "modifier": "private static", "type": "byte[]", "declarator": "illegalLockQualifier = Bytes.add(FAMILY,\n    ColumnUtil.PRESERVED_COLUMN_CHARACTER_BYTES, illegalQualifier)", "var_name": "illegalLockQualifier"}, {"original_string": "private Configuration conf = HBaseConfiguration.create();", "modifier": "private", "type": "Configuration", "declarator": "conf = HBaseConfiguration.create()", "var_name": "conf"}], "file": "themis-coprocessor/src/test/java/org/apache/hadoop/hbase/themis/columns/TestColumnUtil.java"}, "test_case": {"identifier": "testConcatQualifierWithSuffix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConcatQualifierWithSuffix() {\n    byte[] actual = ColumnUtil.concatQualifierWithSuffix(QUALIFIER, ColumnUtil.PUT_QUALIFIER_SUFFIX_BYTES);\n    Assert.assertEquals(QUALIFIER.length + ColumnUtil.PUT_QUALIFIER_SUFFIX.length(), actual.length);\n    Assert.assertTrue(Bytes.equals(QUALIFIER, 0, QUALIFIER.length, actual, 0, QUALIFIER.length));\n    \n    byte[] from = new byte[]{0x00, 0x00, 0x07, (byte)((int)0xDC)};\n    actual = ColumnUtil.concatQualifierWithSuffix(from, ColumnUtil.PUT_QUALIFIER_SUFFIX_BYTES);\n    Assert.assertEquals(from.length + ColumnUtil.PUT_QUALIFIER_SUFFIX.length(), actual.length);\n    Assert.assertTrue(Bytes.equals(from, 0, from.length, actual, 0, from.length));\n  }", "signature": "void testConcatQualifierWithSuffix()", "full_signature": "@Test public void testConcatQualifierWithSuffix()", "class_method_signature": "TestColumnUtil.testConcatQualifierWithSuffix()", "testcase": true, "constructor": false, "invocations": ["concatQualifierWithSuffix", "assertEquals", "length", "assertTrue", "equals", "concatQualifierWithSuffix", "assertEquals", "length", "assertTrue", "equals"]}, "focal_class": {"identifier": "ColumnUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final char PRESERVED_COLUMN_CHARACTER = '#';", "modifier": "public static final", "type": "char", "declarator": "PRESERVED_COLUMN_CHARACTER = '#'", "var_name": "PRESERVED_COLUMN_CHARACTER"}, {"original_string": "public static final byte[] PRESERVED_COLUMN_CHARACTER_BYTES = Bytes.toBytes(\"\" + PRESERVED_COLUMN_CHARACTER);", "modifier": "public static final", "type": "byte[]", "declarator": "PRESERVED_COLUMN_CHARACTER_BYTES = Bytes.toBytes(\"\" + PRESERVED_COLUMN_CHARACTER)", "var_name": "PRESERVED_COLUMN_CHARACTER_BYTES"}, {"original_string": "public static final String PUT_QUALIFIER_SUFFIX = PRESERVED_COLUMN_CHARACTER + \"p\";", "modifier": "public static final", "type": "String", "declarator": "PUT_QUALIFIER_SUFFIX = PRESERVED_COLUMN_CHARACTER + \"p\"", "var_name": "PUT_QUALIFIER_SUFFIX"}, {"original_string": "public static final byte[] PUT_QUALIFIER_SUFFIX_BYTES = Bytes.toBytes(PUT_QUALIFIER_SUFFIX);", "modifier": "public static final", "type": "byte[]", "declarator": "PUT_QUALIFIER_SUFFIX_BYTES = Bytes.toBytes(PUT_QUALIFIER_SUFFIX)", "var_name": "PUT_QUALIFIER_SUFFIX_BYTES"}, {"original_string": "public static final String DELETE_QUALIFIER_SUFFIX = PRESERVED_COLUMN_CHARACTER + \"d\";", "modifier": "public static final", "type": "String", "declarator": "DELETE_QUALIFIER_SUFFIX = PRESERVED_COLUMN_CHARACTER + \"d\"", "var_name": "DELETE_QUALIFIER_SUFFIX"}, {"original_string": "public static final byte[] DELETE_QUALIFIER_SUFFIX_BYTES = Bytes.toBytes(DELETE_QUALIFIER_SUFFIX);", "modifier": "public static final", "type": "byte[]", "declarator": "DELETE_QUALIFIER_SUFFIX_BYTES = Bytes.toBytes(DELETE_QUALIFIER_SUFFIX)", "var_name": "DELETE_QUALIFIER_SUFFIX_BYTES"}, {"original_string": "public static final String PRESERVED_QUALIFIER_SUFFIX = PUT_QUALIFIER_SUFFIX + \" or \" + DELETE_QUALIFIER_SUFFIX;", "modifier": "public static final", "type": "String", "declarator": "PRESERVED_QUALIFIER_SUFFIX = PUT_QUALIFIER_SUFFIX + \" or \" + DELETE_QUALIFIER_SUFFIX", "var_name": "PRESERVED_QUALIFIER_SUFFIX"}, {"original_string": "public static final byte[] LOCK_FAMILY_NAME = Bytes.toBytes(\"L\");", "modifier": "public static final", "type": "byte[]", "declarator": "LOCK_FAMILY_NAME = Bytes.toBytes(\"L\")", "var_name": "LOCK_FAMILY_NAME"}, {"original_string": "public static final String LOCK_FAMILY_NAME_STRING = Bytes.toString(LOCK_FAMILY_NAME);", "modifier": "public static final", "type": "String", "declarator": "LOCK_FAMILY_NAME_STRING = Bytes.toString(LOCK_FAMILY_NAME)", "var_name": "LOCK_FAMILY_NAME_STRING"}, {"original_string": "public static final String PUT_FAMILY_NAME = \"#p\";", "modifier": "public static final", "type": "String", "declarator": "PUT_FAMILY_NAME = \"#p\"", "var_name": "PUT_FAMILY_NAME"}, {"original_string": "public static final byte[] PUT_FAMILY_NAME_BYTES = Bytes.toBytes(PUT_FAMILY_NAME);", "modifier": "public static final", "type": "byte[]", "declarator": "PUT_FAMILY_NAME_BYTES = Bytes.toBytes(PUT_FAMILY_NAME)", "var_name": "PUT_FAMILY_NAME_BYTES"}, {"original_string": "public static final String DELETE_FAMILY_NAME = \"#d\";", "modifier": "public static final", "type": "String", "declarator": "DELETE_FAMILY_NAME = \"#d\"", "var_name": "DELETE_FAMILY_NAME"}, {"original_string": "public static final byte[] DELETE_FAMILY_NAME_BYTES = Bytes.toBytes(DELETE_FAMILY_NAME);", "modifier": "public static final", "type": "byte[]", "declarator": "DELETE_FAMILY_NAME_BYTES = Bytes.toBytes(DELETE_FAMILY_NAME)", "var_name": "DELETE_FAMILY_NAME_BYTES"}, {"original_string": "public static final byte[][] COMMIT_FAMILY_NAME_BYTES = new byte[][] { PUT_FAMILY_NAME_BYTES,\n      DELETE_FAMILY_NAME_BYTES };", "modifier": "public static final", "type": "byte[][]", "declarator": "COMMIT_FAMILY_NAME_BYTES = new byte[][] { PUT_FAMILY_NAME_BYTES,\n      DELETE_FAMILY_NAME_BYTES }", "var_name": "COMMIT_FAMILY_NAME_BYTES"}, {"original_string": "public static final String THEMIS_COMMIT_FAMILY_TYPE = \"themis.commit.family.type\";", "modifier": "public static final", "type": "String", "declarator": "THEMIS_COMMIT_FAMILY_TYPE = \"themis.commit.family.type\"", "var_name": "THEMIS_COMMIT_FAMILY_TYPE"}, {"original_string": "protected static CommitFamily commitFamily;", "modifier": "protected static", "type": "CommitFamily", "declarator": "commitFamily", "var_name": "commitFamily"}], "methods": [{"identifier": "init", "parameters": "(Configuration conf)", "modifiers": "public static", "return": "void", "signature": "void init(Configuration conf)", "full_signature": "public static void init(Configuration conf)", "class_method_signature": "ColumnUtil.init(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "isCommitToSameFamily", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isCommitToSameFamily()", "full_signature": "public static boolean isCommitToSameFamily()", "class_method_signature": "ColumnUtil.isCommitToSameFamily()", "testcase": false, "constructor": false}, {"identifier": "isCommitToDifferentFamily", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isCommitToDifferentFamily()", "full_signature": "public static boolean isCommitToDifferentFamily()", "class_method_signature": "ColumnUtil.isCommitToDifferentFamily()", "testcase": false, "constructor": false}, {"identifier": "isPreservedColumn", "parameters": "(Column column)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPreservedColumn(Column column)", "full_signature": "public static boolean isPreservedColumn(Column column)", "class_method_signature": "ColumnUtil.isPreservedColumn(Column column)", "testcase": false, "constructor": false}, {"identifier": "containPreservedCharacter", "parameters": "(Column column)", "modifiers": "public static", "return": "boolean", "signature": "boolean containPreservedCharacter(Column column)", "full_signature": "public static boolean containPreservedCharacter(Column column)", "class_method_signature": "ColumnUtil.containPreservedCharacter(Column column)", "testcase": false, "constructor": false}, {"identifier": "isLockColumn", "parameters": "(Column column)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLockColumn(Column column)", "full_signature": "public static boolean isLockColumn(Column column)", "class_method_signature": "ColumnUtil.isLockColumn(Column column)", "testcase": false, "constructor": false}, {"identifier": "isCommitFamily", "parameters": "(byte[] family)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCommitFamily(byte[] family)", "full_signature": "public static boolean isCommitFamily(byte[] family)", "class_method_signature": "ColumnUtil.isCommitFamily(byte[] family)", "testcase": false, "constructor": false}, {"identifier": "isLockColumn", "parameters": "(byte[] family, byte[] qualifier)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLockColumn(byte[] family, byte[] qualifier)", "full_signature": "public static boolean isLockColumn(byte[] family, byte[] qualifier)", "class_method_signature": "ColumnUtil.isLockColumn(byte[] family, byte[] qualifier)", "testcase": false, "constructor": false}, {"identifier": "isPutColumn", "parameters": "(byte[] family, byte[] qualifier)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPutColumn(byte[] family, byte[] qualifier)", "full_signature": "public static boolean isPutColumn(byte[] family, byte[] qualifier)", "class_method_signature": "ColumnUtil.isPutColumn(byte[] family, byte[] qualifier)", "testcase": false, "constructor": false}, {"identifier": "isPutColumn", "parameters": "(Column column)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPutColumn(Column column)", "full_signature": "public static boolean isPutColumn(Column column)", "class_method_signature": "ColumnUtil.isPutColumn(Column column)", "testcase": false, "constructor": false}, {"identifier": "isDeleteColumn", "parameters": "(Column column)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDeleteColumn(Column column)", "full_signature": "public static boolean isDeleteColumn(Column column)", "class_method_signature": "ColumnUtil.isDeleteColumn(Column column)", "testcase": false, "constructor": false}, {"identifier": "isDeleteColumn", "parameters": "(byte[] family, byte[] qualifier)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDeleteColumn(byte[] family, byte[] qualifier)", "full_signature": "public static boolean isDeleteColumn(byte[] family, byte[] qualifier)", "class_method_signature": "ColumnUtil.isDeleteColumn(byte[] family, byte[] qualifier)", "testcase": false, "constructor": false}, {"identifier": "isWriteColumn", "parameters": "(byte[] family, byte[] qualifier)", "modifiers": "public static", "return": "boolean", "signature": "boolean isWriteColumn(byte[] family, byte[] qualifier)", "full_signature": "public static boolean isWriteColumn(byte[] family, byte[] qualifier)", "class_method_signature": "ColumnUtil.isWriteColumn(byte[] family, byte[] qualifier)", "testcase": false, "constructor": false}, {"identifier": "isWriteColumn", "parameters": "(Column column)", "modifiers": "public static", "return": "boolean", "signature": "boolean isWriteColumn(Column column)", "full_signature": "public static boolean isWriteColumn(Column column)", "class_method_signature": "ColumnUtil.isWriteColumn(Column column)", "testcase": false, "constructor": false}, {"identifier": "isDataColumn", "parameters": "(Column column)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDataColumn(Column column)", "full_signature": "public static boolean isDataColumn(Column column)", "class_method_signature": "ColumnUtil.isDataColumn(Column column)", "testcase": false, "constructor": false}, {"identifier": "getLockColumn", "parameters": "(byte[] family, byte[] qualifier)", "modifiers": "public static", "return": "Column", "signature": "Column getLockColumn(byte[] family, byte[] qualifier)", "full_signature": "public static Column getLockColumn(byte[] family, byte[] qualifier)", "class_method_signature": "ColumnUtil.getLockColumn(byte[] family, byte[] qualifier)", "testcase": false, "constructor": false}, {"identifier": "getLockColumn", "parameters": "(Column dataColumn)", "modifiers": "public static", "return": "Column", "signature": "Column getLockColumn(Column dataColumn)", "full_signature": "public static Column getLockColumn(Column dataColumn)", "class_method_signature": "ColumnUtil.getLockColumn(Column dataColumn)", "testcase": false, "constructor": false}, {"identifier": "getPutColumn", "parameters": "(Column dataColumn)", "modifiers": "public static", "return": "Column", "signature": "Column getPutColumn(Column dataColumn)", "full_signature": "public static Column getPutColumn(Column dataColumn)", "class_method_signature": "ColumnUtil.getPutColumn(Column dataColumn)", "testcase": false, "constructor": false}, {"identifier": "getDeleteColumn", "parameters": "(Column dataColumn)", "modifiers": "public static", "return": "Column", "signature": "Column getDeleteColumn(Column dataColumn)", "full_signature": "public static Column getDeleteColumn(Column dataColumn)", "class_method_signature": "ColumnUtil.getDeleteColumn(Column dataColumn)", "testcase": false, "constructor": false}, {"identifier": "getDataColumn", "parameters": "(Column lockOrWriteColumn)", "modifiers": "public static", "return": "Column", "signature": "Column getDataColumn(Column lockOrWriteColumn)", "full_signature": "public static Column getDataColumn(Column lockOrWriteColumn)", "class_method_signature": "ColumnUtil.getDataColumn(Column lockOrWriteColumn)", "testcase": false, "constructor": false}, {"identifier": "concatQualifierWithSuffix", "parameters": "(byte[] qualifier, byte[] suffix)", "modifiers": "protected static", "return": "byte[]", "signature": "byte[] concatQualifierWithSuffix(byte[] qualifier, byte[] suffix)", "full_signature": "protected static byte[] concatQualifierWithSuffix(byte[] qualifier, byte[] suffix)", "class_method_signature": "ColumnUtil.concatQualifierWithSuffix(byte[] qualifier, byte[] suffix)", "testcase": false, "constructor": false}, {"identifier": "isQualifierWithSuffix", "parameters": "(byte[] qualifier, byte[] suffix)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isQualifierWithSuffix(byte[] qualifier, byte[] suffix)", "full_signature": "protected static boolean isQualifierWithSuffix(byte[] qualifier, byte[] suffix)", "class_method_signature": "ColumnUtil.isQualifierWithSuffix(byte[] qualifier, byte[] suffix)", "testcase": false, "constructor": false}, {"identifier": "getDataColumnFromConstructedQualifier", "parameters": "(Column lockColumn)", "modifiers": "public static", "return": "Column", "signature": "Column getDataColumnFromConstructedQualifier(Column lockColumn)", "full_signature": "public static Column getDataColumnFromConstructedQualifier(Column lockColumn)", "class_method_signature": "ColumnUtil.getDataColumnFromConstructedQualifier(Column lockColumn)", "testcase": false, "constructor": false}, {"identifier": "constructQualifierFromColumn", "parameters": "(Column column)", "modifiers": "protected static", "return": "byte[]", "signature": "byte[] constructQualifierFromColumn(Column column)", "full_signature": "protected static byte[] constructQualifierFromColumn(Column column)", "class_method_signature": "ColumnUtil.constructQualifierFromColumn(Column column)", "testcase": false, "constructor": false}], "file": "themis-coprocessor/src/main/java/org/apache/hadoop/hbase/themis/columns/ColumnUtil.java"}, "focal_method": {"identifier": "concatQualifierWithSuffix", "parameters": "(byte[] qualifier, byte[] suffix)", "modifiers": "protected static", "return": "byte[]", "body": "protected static byte[] concatQualifierWithSuffix(byte[] qualifier, byte[] suffix) {\n    return qualifier == null ? qualifier : Bytes.add(qualifier, suffix);\n  }", "signature": "byte[] concatQualifierWithSuffix(byte[] qualifier, byte[] suffix)", "full_signature": "protected static byte[] concatQualifierWithSuffix(byte[] qualifier, byte[] suffix)", "class_method_signature": "ColumnUtil.concatQualifierWithSuffix(byte[] qualifier, byte[] suffix)", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}