{"test_class": {"identifier": "MailerWithTemplateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MailerWithTemplate mailerWithTemplate;", "modifier": "private", "type": "MailerWithTemplate", "declarator": "mailerWithTemplate", "var_name": "mailerWithTemplate"}, {"original_string": "private OLATPrincipal helene;", "modifier": "private", "type": "OLATPrincipal", "declarator": "helene", "var_name": "helene"}, {"original_string": "private OLATPrincipal mia;", "modifier": "private", "type": "OLATPrincipal", "declarator": "mia", "var_name": "mia"}, {"original_string": "private OLATPrincipal nicolas;", "modifier": "private", "type": "OLATPrincipal", "declarator": "nicolas", "var_name": "nicolas"}, {"original_string": "private OLATPrincipal peter;", "modifier": "private", "type": "OLATPrincipal", "declarator": "peter", "var_name": "peter"}, {"original_string": "private OLATPrincipal heidi;", "modifier": "private", "type": "OLATPrincipal", "declarator": "heidi", "var_name": "heidi"}, {"original_string": "private OLATPrincipal ruedi;", "modifier": "private", "type": "OLATPrincipal", "declarator": "ruedi", "var_name": "ruedi"}, {"original_string": "private MailPackageStaticDependenciesWrapper webappAndMailhelperMock;", "modifier": "private", "type": "MailPackageStaticDependenciesWrapper", "declarator": "webappAndMailhelperMock", "var_name": "webappAndMailhelperMock"}, {"original_string": "private String subject;", "modifier": "private", "type": "String", "declarator": "subject", "var_name": "subject"}, {"original_string": "private String body;", "modifier": "private", "type": "String", "declarator": "body", "var_name": "body"}, {"original_string": "private String coursename;", "modifier": "private", "type": "String", "declarator": "coursename", "var_name": "coursename"}, {"original_string": "private String courseURL;", "modifier": "private", "type": "String", "declarator": "courseURL", "var_name": "courseURL"}, {"original_string": "private MailTemplate template;", "modifier": "private", "type": "MailTemplate", "declarator": "template", "var_name": "template"}, {"original_string": "private ArrayList<OLATPrincipal> recipients;", "modifier": "private", "type": "ArrayList<OLATPrincipal>", "declarator": "recipients", "var_name": "recipients"}, {"original_string": "private ArrayList<OLATPrincipal> recipientsCC;", "modifier": "private", "type": "ArrayList<OLATPrincipal>", "declarator": "recipientsCC", "var_name": "recipientsCC"}, {"original_string": "private ArrayList<OLATPrincipal> recipientsBCC;", "modifier": "private", "type": "ArrayList<OLATPrincipal>", "declarator": "recipientsBCC", "var_name": "recipientsBCC"}, {"original_string": "private InternetAddress[] recipientsAsInternetAddresses;", "modifier": "private", "type": "InternetAddress[]", "declarator": "recipientsAsInternetAddresses", "var_name": "recipientsAsInternetAddresses"}], "file": "OLAT-LMS/src/test/java/org/olat/system/mail/MailerWithTemplateTest.java"}, "test_case": {"identifier": "testValidAndInvalidPrincipalsInRecipientToForSendAsSeparateMails", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidAndInvalidPrincipalsInRecipientToForSendAsSeparateMails() {\n        // setup\n        OLATPrincipal invalidRecipient = ObjectMother.createInvalidPrincipal();\n        recipients.add(invalidRecipient);\n        int numberOfSeparateMails = recipients.size();\n        MailerResult result = new MailerResult();\n        //\n        result = mailerWithTemplate.sendMailAsSeparateMails(recipients, null, recipientsBCC, template, ruedi);\n        // verify\n        assertEquals(MailerResult.OK, result.getReturnCode());\n        assertNotNull(\"failed email must be reported, hence not null\", result.getFailedIdentites());\n        assertEquals(1, result.getFailedIdentites().size());\n        verifyTimesCallingCreateAndSendMessageInvocationsFor(numberOfSeparateMails, recipients, null, recipientsBCC);\n    }", "signature": "void testValidAndInvalidPrincipalsInRecipientToForSendAsSeparateMails()", "full_signature": "@Test public void testValidAndInvalidPrincipalsInRecipientToForSendAsSeparateMails()", "class_method_signature": "MailerWithTemplateTest.testValidAndInvalidPrincipalsInRecipientToForSendAsSeparateMails()", "testcase": true, "constructor": false, "invocations": ["createInvalidPrincipal", "add", "size", "sendMailAsSeparateMails", "assertEquals", "getReturnCode", "assertNotNull", "getFailedIdentites", "assertEquals", "size", "getFailedIdentites", "verifyTimesCallingCreateAndSendMessageInvocationsFor"]}, "focal_class": {"identifier": "MailerWithTemplate", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "private VelocityEngine velocityEngine;", "modifier": "private", "type": "VelocityEngine", "declarator": "velocityEngine", "var_name": "velocityEngine"}, {"original_string": "private static MailerWithTemplate INSTANCE = new MailerWithTemplate();", "modifier": "private static", "type": "MailerWithTemplate", "declarator": "INSTANCE = new MailerWithTemplate()", "var_name": "INSTANCE"}, {"original_string": "private MailPackageStaticDependenciesWrapper webappAndMailHelper = null;", "modifier": "private", "type": "MailPackageStaticDependenciesWrapper", "declarator": "webappAndMailHelper = null", "var_name": "webappAndMailHelper"}], "methods": [{"identifier": "MailerWithTemplate", "parameters": "()", "modifiers": "private", "return": "", "signature": " MailerWithTemplate()", "full_signature": "private  MailerWithTemplate()", "class_method_signature": "MailerWithTemplate.MailerWithTemplate()", "testcase": false, "constructor": true}, {"identifier": "MailerWithTemplate", "parameters": "(MailPackageStaticDependenciesWrapper webappAndMailHelper)", "modifiers": "private", "return": "", "signature": " MailerWithTemplate(MailPackageStaticDependenciesWrapper webappAndMailHelper)", "full_signature": "private  MailerWithTemplate(MailPackageStaticDependenciesWrapper webappAndMailHelper)", "class_method_signature": "MailerWithTemplate.MailerWithTemplate(MailPackageStaticDependenciesWrapper webappAndMailHelper)", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "MailerWithTemplate", "signature": "MailerWithTemplate getInstance()", "full_signature": "public static MailerWithTemplate getInstance()", "class_method_signature": "MailerWithTemplate.getInstance()", "testcase": false, "constructor": false}, {"identifier": "setUnittestingInstanceWith", "parameters": "(MailPackageStaticDependenciesWrapper webappAndMailHelper)", "modifiers": "static", "return": "void", "signature": "void setUnittestingInstanceWith(MailPackageStaticDependenciesWrapper webappAndMailHelper)", "full_signature": "static void setUnittestingInstanceWith(MailPackageStaticDependenciesWrapper webappAndMailHelper)", "class_method_signature": "MailerWithTemplate.setUnittestingInstanceWith(MailPackageStaticDependenciesWrapper webappAndMailHelper)", "testcase": false, "constructor": false}, {"identifier": "sendMailUsingTemplateContext", "parameters": "(OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC, List<? extends OLATPrincipal> recipientsBCC,\n            MailTemplate template, OLATPrincipal sender)", "modifiers": "public", "return": "MailerResult", "signature": "MailerResult sendMailUsingTemplateContext(OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC, List<? extends OLATPrincipal> recipientsBCC,\n            MailTemplate template, OLATPrincipal sender)", "full_signature": "public MailerResult sendMailUsingTemplateContext(OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC, List<? extends OLATPrincipal> recipientsBCC,\n            MailTemplate template, OLATPrincipal sender)", "class_method_signature": "MailerWithTemplate.sendMailUsingTemplateContext(OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC, List<? extends OLATPrincipal> recipientsBCC,\n            MailTemplate template, OLATPrincipal sender)", "testcase": false, "constructor": false}, {"identifier": "previewSubjectAndBody", "parameters": "(OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC, List<? extends OLATPrincipal> recipientsBCC,\n            MailTemplate template, OLATPrincipal sender)", "modifiers": "public", "return": "String[]", "signature": "String[] previewSubjectAndBody(OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC, List<? extends OLATPrincipal> recipientsBCC,\n            MailTemplate template, OLATPrincipal sender)", "full_signature": "public String[] previewSubjectAndBody(OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC, List<? extends OLATPrincipal> recipientsBCC,\n            MailTemplate template, OLATPrincipal sender)", "class_method_signature": "MailerWithTemplate.previewSubjectAndBody(OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC, List<? extends OLATPrincipal> recipientsBCC,\n            MailTemplate template, OLATPrincipal sender)", "testcase": false, "constructor": false}, {"identifier": "sendMail", "parameters": "(OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC, List<? extends OLATPrincipal> recipientsBCC,\n            MailTemplate template, OLATPrincipal sender)", "modifiers": "public", "return": "MailerResult", "signature": "MailerResult sendMail(OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC, List<? extends OLATPrincipal> recipientsBCC,\n            MailTemplate template, OLATPrincipal sender)", "full_signature": "public MailerResult sendMail(OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC, List<? extends OLATPrincipal> recipientsBCC,\n            MailTemplate template, OLATPrincipal sender)", "class_method_signature": "MailerWithTemplate.sendMail(OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC, List<? extends OLATPrincipal> recipientsBCC,\n            MailTemplate template, OLATPrincipal sender)", "testcase": false, "constructor": false}, {"identifier": "sendMailAsSeparateMails", "parameters": "(List<? extends OLATPrincipal> recipientsTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender)", "modifiers": "public", "return": "MailerResult", "signature": "MailerResult sendMailAsSeparateMails(List<? extends OLATPrincipal> recipientsTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender)", "full_signature": "public MailerResult sendMailAsSeparateMails(List<? extends OLATPrincipal> recipientsTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender)", "class_method_signature": "MailerWithTemplate.sendMailAsSeparateMails(List<? extends OLATPrincipal> recipientsTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender)", "testcase": false, "constructor": false}, {"identifier": "isMailSentToRecipient", "parameters": "(MailerResult result, OLATPrincipal recipient)", "modifiers": "private", "return": "boolean", "signature": "boolean isMailSentToRecipient(MailerResult result, OLATPrincipal recipient)", "full_signature": "private boolean isMailSentToRecipient(MailerResult result, OLATPrincipal recipient)", "class_method_signature": "MailerWithTemplate.isMailSentToRecipient(MailerResult result, OLATPrincipal recipient)", "testcase": false, "constructor": false}, {"identifier": "createWithContext", "parameters": "(VelocityContext context, OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender, MailerResult result)", "modifiers": "private", "return": "MimeMessage", "signature": "MimeMessage createWithContext(VelocityContext context, OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender, MailerResult result)", "full_signature": "private MimeMessage createWithContext(VelocityContext context, OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender, MailerResult result)", "class_method_signature": "MailerWithTemplate.createWithContext(VelocityContext context, OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender, MailerResult result)", "testcase": false, "constructor": false}, {"identifier": "sendWithContext", "parameters": "(VelocityContext context, OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender, MailerResult result)", "modifiers": "private", "return": "void", "signature": "void sendWithContext(VelocityContext context, OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender, MailerResult result)", "full_signature": "private void sendWithContext(VelocityContext context, OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender, MailerResult result)", "class_method_signature": "MailerWithTemplate.sendWithContext(VelocityContext context, OLATPrincipal recipientTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender, MailerResult result)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Context context, String template, StringWriter writer, MailerResult mailerResult)", "modifiers": "", "return": "void", "signature": "void evaluate(Context context, String template, StringWriter writer, MailerResult mailerResult)", "full_signature": " void evaluate(Context context, String template, StringWriter writer, MailerResult mailerResult)", "class_method_signature": "MailerWithTemplate.evaluate(Context context, String template, StringWriter writer, MailerResult mailerResult)", "testcase": false, "constructor": false}, {"identifier": "createAddressesFromIdentities", "parameters": "(List<? extends OLATPrincipal> recipients, MailerResult result)", "modifiers": "private", "return": "Address[]", "signature": "Address[] createAddressesFromIdentities(List<? extends OLATPrincipal> recipients, MailerResult result)", "full_signature": "private Address[] createAddressesFromIdentities(List<? extends OLATPrincipal> recipients, MailerResult result)", "class_method_signature": "MailerWithTemplate.createAddressesFromIdentities(List<? extends OLATPrincipal> recipients, MailerResult result)", "testcase": false, "constructor": false}], "file": "OLAT-LMS/src/main/java/org/olat/system/mail/MailerWithTemplate.java"}, "focal_method": {"identifier": "sendMailAsSeparateMails", "parameters": "(List<? extends OLATPrincipal> recipientsTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender)", "modifiers": "public", "return": "MailerResult", "body": "public MailerResult sendMailAsSeparateMails(List<? extends OLATPrincipal> recipientsTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender) {\n        MailerResult result = new MailerResult();\n        if (webappAndMailHelper.getMailhost() == null) {\n            result.setReturnCode(MailerResult.MAILHOST_UNDEFINED);\n            log.warn(\"sendMailAsSeparateMails - webappAndMailHelper.getMailhost(): \" + webappAndMailHelper.getMailhost());\n            return result;\n        }\n        boolean isMailSendToRecipient = false;\n        if (recipientsTO != null) {\n            for (OLATPrincipal recipient : recipientsTO) {\n                // populate velocity context with variables\n                VelocityContext context = new VelocityContext();\n                template.putVariablesInMailContext(context, recipient);\n                sendWithContext(context, recipient, null, null, template, sender, result);\n                if (isMailSentToRecipient(result, recipient)) {\n                    isMailSendToRecipient = true;\n                }\n            }\n        }\n        if (recipientsCC != null) {\n            for (OLATPrincipal recipient : recipientsCC) {\n                List<OLATPrincipal> cc = new ArrayList<OLATPrincipal>();\n                cc.add(recipient);\n                // populate velocity context with variables\n                VelocityContext context = new VelocityContext();\n                template.putVariablesInMailContext(context, recipient);\n                sendWithContext(context, null, cc, null, template, sender, result);\n                if (isMailSentToRecipient(result, recipient)) {\n                    isMailSendToRecipient = true;\n                }\n            }\n        }\n        if (recipientsBCC != null) {\n            for (OLATPrincipal recipient : recipientsBCC) {\n                // populate velocity context with variables\n                VelocityContext context = new VelocityContext();\n                template.putVariablesInMailContext(context, recipient);\n                sendWithContext(context, recipient, null, null, template, sender, result);\n                if (isMailSentToRecipient(result, recipient)) {\n                    isMailSendToRecipient = true;\n                }\n            }\n        }\n        if (!isMailSendToRecipient) {\n            if (result.getReturnCode() == MailerResult.OK) {\n                result.setReturnCode(MailerResult.RECIPIENT_ADDRESS_ERROR);\n            }\n            log.warn(\"sendMailAsSeparateMails - result.getReturnCode(): \" + result.getReturnCode() + \" . See MailerResult for return codes.\");\n        }\n        return result;\n    }", "signature": "MailerResult sendMailAsSeparateMails(List<? extends OLATPrincipal> recipientsTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender)", "full_signature": "public MailerResult sendMailAsSeparateMails(List<? extends OLATPrincipal> recipientsTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender)", "class_method_signature": "MailerWithTemplate.sendMailAsSeparateMails(List<? extends OLATPrincipal> recipientsTO, List<? extends OLATPrincipal> recipientsCC,\n            List<? extends OLATPrincipal> recipientsBCC, MailTemplate template, OLATPrincipal sender)", "testcase": false, "constructor": false, "invocations": ["getMailhost", "setReturnCode", "warn", "getMailhost", "putVariablesInMailContext", "sendWithContext", "isMailSentToRecipient", "add", "putVariablesInMailContext", "sendWithContext", "isMailSentToRecipient", "putVariablesInMailContext", "sendWithContext", "isMailSentToRecipient", "getReturnCode", "setReturnCode", "warn", "getReturnCode"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}