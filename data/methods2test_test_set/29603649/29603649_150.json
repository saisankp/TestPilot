{"test_class": {"identifier": "FileCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ERROR_POSTFIX = \"DOES_NOT_EXIST\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_POSTFIX = \"DOES_NOT_EXIST\"", "var_name": "ERROR_POSTFIX"}, {"original_string": "@InjectMocks\n    private FileChecker underTest;", "modifier": "@InjectMocks\n    private", "type": "FileChecker", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-message-search/modules/wilma-message-search-webapp/src/test/java/com/epam/wilma/message/search/web/support/FileCheckerTest.java"}, "test_case": {"identifier": "testCheckFilesExistsWithPairsWhenThereAreSomeSearchResultButOneRequestDoesntHavePair", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckFilesExistsWithPairsWhenThereAreSomeSearchResultButOneRequestDoesntHavePair() {\n        //GIVEN\n        List<String> list = new ArrayList<>();\n        list.add(\"src/test/resources/first_testreq.txt\");\n        list.add(\"src/test/resources/second_testreq.txt\");\n\n        List<List<String>> expected = new ArrayList<>();\n        List<String> pair = new ArrayList<>();\n        pair.add(\"src/test/resources/first_testreq.txt\");\n        pair.add(\"src/test/resources/first_testresp.txt\");\n        expected.add(pair);\n        pair = new ArrayList<>();\n        pair.add(\"src/test/resources/second_testreq.txt\");\n        pair.add(\"src/test/resources/second_testresp.txt\" + ERROR_POSTFIX);\n        expected.add(pair);\n        //WHEN\n        List<List<String>> result = underTest.checkFilesExistsWithPairs(list);\n        //THEN\n        Assert.assertEquals(result, expected);\n    }", "signature": "void testCheckFilesExistsWithPairsWhenThereAreSomeSearchResultButOneRequestDoesntHavePair()", "full_signature": "@Test public void testCheckFilesExistsWithPairsWhenThereAreSomeSearchResultButOneRequestDoesntHavePair()", "class_method_signature": "FileCheckerTest.testCheckFilesExistsWithPairsWhenThereAreSomeSearchResultButOneRequestDoesntHavePair()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "add", "checkFilesExistsWithPairs", "assertEquals"]}, "focal_class": {"identifier": "FileChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String RESP_FILE_END = \"resp.txt\";", "modifier": "private static final", "type": "String", "declarator": "RESP_FILE_END = \"resp.txt\"", "var_name": "RESP_FILE_END"}, {"original_string": "private static final String REQ_FILE_END = \"req.txt\";", "modifier": "private static final", "type": "String", "declarator": "REQ_FILE_END = \"req.txt\"", "var_name": "REQ_FILE_END"}, {"original_string": "private static final String ERROR_POSTFIX = \"DOES_NOT_EXIST\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_POSTFIX = \"DOES_NOT_EXIST\"", "var_name": "ERROR_POSTFIX"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(FileChecker.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FileChecker.class)", "var_name": "logger"}], "methods": [{"identifier": "checkFilesExistsWithPairs", "parameters": "(final List<String> searchResult)", "modifiers": "public", "return": "List<List<String>>", "signature": "List<List<String>> checkFilesExistsWithPairs(final List<String> searchResult)", "full_signature": "public List<List<String>> checkFilesExistsWithPairs(final List<String> searchResult)", "class_method_signature": "FileChecker.checkFilesExistsWithPairs(final List<String> searchResult)", "testcase": false, "constructor": false}, {"identifier": "markFileIfNotExists", "parameters": "(final String actualFile, final List<String> pair)", "modifiers": "private", "return": "void", "signature": "void markFileIfNotExists(final String actualFile, final List<String> pair)", "full_signature": "private void markFileIfNotExists(final String actualFile, final List<String> pair)", "class_method_signature": "FileChecker.markFileIfNotExists(final String actualFile, final List<String> pair)", "testcase": false, "constructor": false}, {"identifier": "getPair", "parameters": "(final String filePath)", "modifiers": "private", "return": "String", "signature": "String getPair(final String filePath)", "full_signature": "private String getPair(final String filePath)", "class_method_signature": "FileChecker.getPair(final String filePath)", "testcase": false, "constructor": false}], "file": "wilma-message-search/modules/wilma-message-search-webapp/src/main/java/com/epam/wilma/message/search/web/support/FileChecker.java"}, "focal_method": {"identifier": "checkFilesExistsWithPairs", "parameters": "(final List<String> searchResult)", "modifiers": "public", "return": "List<List<String>>", "body": "public List<List<String>> checkFilesExistsWithPairs(final List<String> searchResult) {\n        List<List<String>> result = new ArrayList<>();\n        for (String actualFile : searchResult) {\n            List<String> actualPair = new ArrayList<>();\n            markFileIfNotExists(actualFile, actualPair); //adds actualFile to actualPair, mark it with \"does not exist\" if necessary\n            String pairFile = getPair(actualFile);\n            markFileIfNotExists(pairFile, actualPair); //adds pairFile to actualPair, mark it with \"does not exist\" if necessary\n            result.add(actualPair);\n        }\n        return result;\n    }", "signature": "List<List<String>> checkFilesExistsWithPairs(final List<String> searchResult)", "full_signature": "public List<List<String>> checkFilesExistsWithPairs(final List<String> searchResult)", "class_method_signature": "FileChecker.checkFilesExistsWithPairs(final List<String> searchResult)", "testcase": false, "constructor": false, "invocations": ["markFileIfNotExists", "getPair", "markFileIfNotExists", "add"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}