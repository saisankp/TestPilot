{"test_class": {"identifier": "PolicyRestTest", "superclass": "extends MobiRestTestNg", "interfaces": "", "fields": [{"original_string": "private PolicyRest rest;", "modifier": "private", "type": "PolicyRest", "declarator": "rest", "var_name": "rest"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private String xml;", "modifier": "private", "type": "String", "declarator": "xml", "var_name": "xml"}, {"original_string": "private String json;", "modifier": "private", "type": "String", "declarator": "json", "var_name": "json"}, {"original_string": "private XACMLPolicy policy;", "modifier": "private", "type": "XACMLPolicy", "declarator": "policy", "var_name": "policy"}, {"original_string": "private IRI policyId;", "modifier": "private", "type": "IRI", "declarator": "policyId", "var_name": "policyId"}, {"original_string": "@Mock\n    private XACMLPolicyManager policyManager;", "modifier": "@Mock\n    private", "type": "XACMLPolicyManager", "declarator": "policyManager", "var_name": "policyManager"}], "file": "com.mobi.security.policy.rest/src/test/java/com/mobi/security/policy/rest/PolicyRestTest.java"}, "test_case": {"identifier": "getPoliciesErrorTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getPoliciesErrorTest() {\n        // Setup:\n        doThrow(new IllegalStateException()).when(policyManager).getPolicies(any(PolicyQueryParams.class));\n\n        Response response = target().path(\"policies\").request().get();\n        assertEquals(response.getStatus(), 500);\n        verify(policyManager).getPolicies(any(PolicyQueryParams.class));\n    }", "signature": "void getPoliciesErrorTest()", "full_signature": "@Test public void getPoliciesErrorTest()", "class_method_signature": "PolicyRestTest.getPoliciesErrorTest()", "testcase": true, "constructor": false, "invocations": ["getPolicies", "when", "doThrow", "any", "get", "request", "path", "target", "assertEquals", "getStatus", "getPolicies", "verify", "any"]}, "focal_class": {"identifier": "PolicyRest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private XACMLPolicyManager policyManager;", "modifier": "private", "type": "XACMLPolicyManager", "declarator": "policyManager", "var_name": "policyManager"}], "methods": [{"identifier": "setVf", "parameters": "(ValueFactory vf)", "modifiers": "@Reference", "return": "void", "signature": "void setVf(ValueFactory vf)", "full_signature": "@Reference void setVf(ValueFactory vf)", "class_method_signature": "PolicyRest.setVf(ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "setPolicyManager", "parameters": "(XACMLPolicyManager policyManager)", "modifiers": "@Reference", "return": "void", "signature": "void setPolicyManager(XACMLPolicyManager policyManager)", "full_signature": "@Reference void setPolicyManager(XACMLPolicyManager policyManager)", "class_method_signature": "PolicyRest.setPolicyManager(XACMLPolicyManager policyManager)", "testcase": false, "constructor": false}, {"identifier": "getPolicies", "parameters": "(@QueryParam(\"relatedSubject\") String relatedSubject,\n                         @QueryParam(\"relatedResource\") String relatedResource,\n                         @QueryParam(\"relatedAction\") String relatedAction)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves security policies matching the provided filters.\") public", "return": "Response", "signature": "Response getPolicies(@QueryParam(\"relatedSubject\") String relatedSubject,\n                         @QueryParam(\"relatedResource\") String relatedResource,\n                         @QueryParam(\"relatedAction\") String relatedAction)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves security policies matching the provided filters.\") public Response getPolicies(@QueryParam(\"relatedSubject\") String relatedSubject,\n                         @QueryParam(\"relatedResource\") String relatedResource,\n                         @QueryParam(\"relatedAction\") String relatedAction)", "class_method_signature": "PolicyRest.getPolicies(@QueryParam(\"relatedSubject\") String relatedSubject,\n                         @QueryParam(\"relatedResource\") String relatedResource,\n                         @QueryParam(\"relatedAction\") String relatedAction)", "testcase": false, "constructor": false}, {"identifier": "createPolicy", "parameters": "(String policyJson)", "modifiers": "@POST @Produces(MediaType.TEXT_PLAIN) @Consumes(MediaType.APPLICATION_JSON) @RolesAllowed(\"admin\") @ApiOperation(\"Creates a new security policy using the provided JSON body.\") public", "return": "Response", "signature": "Response createPolicy(String policyJson)", "full_signature": "@POST @Produces(MediaType.TEXT_PLAIN) @Consumes(MediaType.APPLICATION_JSON) @RolesAllowed(\"admin\") @ApiOperation(\"Creates a new security policy using the provided JSON body.\") public Response createPolicy(String policyJson)", "class_method_signature": "PolicyRest.createPolicy(String policyJson)", "testcase": false, "constructor": false}, {"identifier": "retrievePolicy", "parameters": "(@PathParam(\"policyId\") String policyId)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @Path(\"{policyId}\") @RolesAllowed(\"user\") @ApiOperation(\"Retrieves a specific security policy by its ID.\") @ResourceId(type = ValueType.PATH, value = \"policyId\") public", "return": "Response", "signature": "Response retrievePolicy(@PathParam(\"policyId\") String policyId)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @Path(\"{policyId}\") @RolesAllowed(\"user\") @ApiOperation(\"Retrieves a specific security policy by its ID.\") @ResourceId(type = ValueType.PATH, value = \"policyId\") public Response retrievePolicy(@PathParam(\"policyId\") String policyId)", "class_method_signature": "PolicyRest.retrievePolicy(@PathParam(\"policyId\") String policyId)", "testcase": false, "constructor": false}, {"identifier": "updatePolicy", "parameters": "(@PathParam(\"policyId\") String policyId, String policyJson)", "modifiers": "@PUT @Path(\"{policyId}\") @Consumes(MediaType.APPLICATION_JSON) @RolesAllowed(\"admin\") @ApiOperation(\"Updates an existing security policy using the provided JSON body.\") @ResourceId(type = ValueType.PATH, value = \"policyId\") public", "return": "Response", "signature": "Response updatePolicy(@PathParam(\"policyId\") String policyId, String policyJson)", "full_signature": "@PUT @Path(\"{policyId}\") @Consumes(MediaType.APPLICATION_JSON) @RolesAllowed(\"admin\") @ApiOperation(\"Updates an existing security policy using the provided JSON body.\") @ResourceId(type = ValueType.PATH, value = \"policyId\") public Response updatePolicy(@PathParam(\"policyId\") String policyId, String policyJson)", "class_method_signature": "PolicyRest.updatePolicy(@PathParam(\"policyId\") String policyId, String policyJson)", "testcase": false, "constructor": false}, {"identifier": "jsonToPolicy", "parameters": "(String json)", "modifiers": "private", "return": "XACMLPolicy", "signature": "XACMLPolicy jsonToPolicy(String json)", "full_signature": "private XACMLPolicy jsonToPolicy(String json)", "class_method_signature": "PolicyRest.jsonToPolicy(String json)", "testcase": false, "constructor": false}, {"identifier": "policyToJson", "parameters": "(XACMLPolicy policy)", "modifiers": "private", "return": "String", "signature": "String policyToJson(XACMLPolicy policy)", "full_signature": "private String policyToJson(XACMLPolicy policy)", "class_method_signature": "PolicyRest.policyToJson(XACMLPolicy policy)", "testcase": false, "constructor": false}, {"identifier": "getMapper", "parameters": "()", "modifiers": "private", "return": "ObjectMapper", "signature": "ObjectMapper getMapper()", "full_signature": "private ObjectMapper getMapper()", "class_method_signature": "PolicyRest.getMapper()", "testcase": false, "constructor": false}], "file": "com.mobi.security.policy.rest/src/main/java/com/mobi/security/policy/rest/PolicyRest.java"}, "focal_method": {"identifier": "getPolicies", "parameters": "(@QueryParam(\"relatedSubject\") String relatedSubject,\n                         @QueryParam(\"relatedResource\") String relatedResource,\n                         @QueryParam(\"relatedAction\") String relatedAction)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves security policies matching the provided filters.\") public", "return": "Response", "body": "@GET\n    @Produces(MediaType.APPLICATION_JSON)\n    @RolesAllowed(\"user\")\n    @ApiOperation(\"Retrieves security policies matching the provided filters.\")\n    public Response getPolicies(@QueryParam(\"relatedSubject\") String relatedSubject,\n                         @QueryParam(\"relatedResource\") String relatedResource,\n                         @QueryParam(\"relatedAction\") String relatedAction) {\n        PolicyQueryParams.Builder params = new PolicyQueryParams.Builder();\n        if (StringUtils.isNotEmpty(relatedResource)) {\n            params.addResourceIRI(vf.createIRI(relatedResource));\n        }\n        if (StringUtils.isNotEmpty(relatedSubject)) {\n            params.addSubjectIRI(vf.createIRI(relatedSubject));\n        }\n        if (StringUtils.isNotEmpty(relatedAction)) {\n            params.addActionIRI(vf.createIRI(relatedAction));\n        }\n        try {\n            return Response.ok(policyManager.getPolicies(params.build()).stream()\n                    .map(this::policyToJson)\n                    .collect(JSONArray::new, JSONArray::add, JSONArray::add)).build();\n        } catch (Exception ex) {\n            throw ErrorUtils.sendError(ex, \"Error retrieving policies\", Response.Status.INTERNAL_SERVER_ERROR);\n        }\n    }", "signature": "Response getPolicies(@QueryParam(\"relatedSubject\") String relatedSubject,\n                         @QueryParam(\"relatedResource\") String relatedResource,\n                         @QueryParam(\"relatedAction\") String relatedAction)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves security policies matching the provided filters.\") public Response getPolicies(@QueryParam(\"relatedSubject\") String relatedSubject,\n                         @QueryParam(\"relatedResource\") String relatedResource,\n                         @QueryParam(\"relatedAction\") String relatedAction)", "class_method_signature": "PolicyRest.getPolicies(@QueryParam(\"relatedSubject\") String relatedSubject,\n                         @QueryParam(\"relatedResource\") String relatedResource,\n                         @QueryParam(\"relatedAction\") String relatedAction)", "testcase": false, "constructor": false, "invocations": ["isNotEmpty", "addResourceIRI", "createIRI", "isNotEmpty", "addSubjectIRI", "createIRI", "isNotEmpty", "addActionIRI", "createIRI", "build", "ok", "collect", "map", "stream", "getPolicies", "build", "sendError"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}